
Antenna Azimuth P< 
Control System 
ion 
Layout 
Potentiometer 
Desired 
azimuth angle 
input 
Differential amplifier 
and power amplifier 
Schematic 
Desired 
azimuth angle 
input 
-v 
n-turn potentiometer 
Differential 
preamplifier 
Power 
amplifier 
Motor 
I v/(o +4 
| y ) J 
" 
I ea(f) vw 
Antenna 
Potentiometer 
t(f) 
Ja 
kg-m2 
Da N-m s/rad 
Kh V-s/rad 
. A 
i 
f 
M /A 
Armature 
-±r 
Kt 
N-m/A 
— 1 - 
^ 
«1 
Gear 
-V 
Gear 
Azimuth 
angle 
output 
4 kg-m2 
M-turn potentiometer 
+V 
£>£ N-m-s/rad 
N3 
Gear 

Block Diagram 
Desired 
azimuth 
Potentiometer 
angle 
Power 
Motor 
Preamplifier 
amplifier 
and load 
Gears Azimuth 
angle 
m 
-»• 
K pot 
V/J&+ f^y^\^^^^ 
,(.0 
Potentiometer 
^pot 
Schematic Parameters 
Parameter 
V 
n 
K 
Ki 
a 
Ra 
h 
Di: 
Kh 
K, 
m 
N2 
N3 
h 
t>t 
Block D 
Parameter 
Kpot 
K 
Kv 
a 
Km 
dm 
Kg 
ConHguration 1 
10 
10 
— 
100 
100 
8 
0.02 
0.01 
0.5 
0.5 
25 
250 
250 
1 
1 
agram Parameters 
Configuration 1 
0.318 
— 
100 
100 
2.083 
1.71 
0.1 
Configuration 2 
10 
1 
— 
150 
150 
5 
0.05 
0.01 
1 
1 
50 
250 
250 
5 
3 
Configuration 2 
Configuration 3 
10 
1 
— 
100 
100 
5 
0.05 
0.01 
1 
1 
50 
250 
250 
5 
3 
Configuration 3 
Note: reader may fill in Configuration 2 and Configuration 3 columns after completing 
the antenna control Case Study challenge problems in Chapters 2 and 10, respectively. 

CONTROL SYSTEMS ENGINEERING 
Sixth Edition 
Norman S. Nise 
California State Polytechnic University, Pomona 
John Wiley & Sons, Inc. 

To my wife, Ellen; sons, Benjamin and Alan; and daughter, Sharon, 
and their families. 
Vice President & Publisher 
Don Fowley 
Publisher 
Daniel Sayre 
Senior Editorial Assistant 
Katie Singleton 
Associate Director of Marketing 
Amy Scholz 
Marketing Manager 
Christopher Ruel 
Production Manager 
Dorothy Sinclair 
Production Editor 
Sandra Dumas 
Creative Director 
Harry Nolan 
Cover Designer 
James O'Shea 
Cover Photo 
Jim Stroup, Virginia Tech 
Photo Department Manager 
Hilary Newman 
Photo Editor 
Sheena Goldstein 
Executive Media Editor 
Thomas Kulesa 
Associate Media Editor 
Jennifer Mullin 
Production Management Services 
Integra Software Services Inc. 
This book was typeset in 10/12 TimesRoman at Thomson and printed and bound by R. R. Donnelley 
(Jefferson City). The cover was printed by R. R. Donnelley (Jefferson City). 
The paper in this book was manufactured by a mill whose forest management programs include sustained 
yield-harvesting of its timberlands. Sustained yield harvesting principles ensure that the number of trees 
cut each year does not exceed the amount of new growth. 
This book is printed on acid-free paper. @ 
On the cover: CHARLI, a 5-foot tall autonomous humanoid robot built by Dr. Dennis Hong and 
his students at RoMeLa (Robotics and Mechanisms Laboratory) in the College of Engineering of 
Virginia Tech. 
Founded in 1807, John Wiley & Sons, Inc. has been a valued source of knowledge and understanding for 
more than 200 years, helping people around the world meet their needs and fulfill their aspirations. Our 
company is built on a foundation of principles that include responsibility to the communities we serve and 
where we live and work, in 2008, we launched a Corporate Citizenship initiative, a global effort to address 
the environmental, social, economic, and ethical challenges we face in our business. Among the issues we 
are addressing are carbon impact, paper specifications and procurement, ethical conduct within our 
business and among our vendors, and community and charitable support. For more information, please 
visit our website: www.wiley.com/go/citizenship. 
The software programs available with this book have been included for their instructional value. They have 
been tested with care but are not guaranteed for any particular purpose. The publisher and author do not 
offer any warranties or restrictions, nor do they accept any liabilities with respect to the programs. 
Copyright © 2011,2006,2003,1996 by John Wiley & Sons, Inc. All rights reserved. 
No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or by 
any means, electronic, mechanical, photocopying recording, scanning or otherwise, except as permitted 
under Sections 107 or 108 of the 1976 United States Copyright Act, without either the prior written 
permission of the Publisher or authorization through payment of the appropriate per-copy fee to the 
Copyright Clearance Center, 222 Rosewood Drive, Danvers, MA 01923, (978) 750-8400, fax (978) 646-
8600. Requests to the Publisher for permission should be addressed to the Permissions Department, John 
Wiley & Sons, Inc., HI River Street, Hoboken, NJ 07030-5774, (201) 748-6011, fax (201) 748-6008. 
Evaluation copies are provided to qualified academics and professionals for review purposes only, for use 
in their courses during the next academic year. These copies are licensed and may not be sold or transferred 
to a third party. Upon completion of the review period, please return the evaluation copy to Wiley. Return 
instructions and a free of charge return shipping label are available at www.wiley.com/go/returnlabel. 
Outside of the United States, please contact your local representative. 
ISBN 13 978-0470-54756-4 
ISBN 13 978-0470-91769-5 
Printed in the United States of America. 
10 9 8 7 6 5 4 3 2 1 

Contents 
PREFACE, 
ix 
1. INTRODUCTION, 
1 
1.1 
Introduction, 
2 
1.2 
A History of Control Systems, 4 
1.3 
System Configurations, 
7 
1.4 
Analysis and Design Objectives, 
10 
Case Study, 
12 
1.5 
The Design Process, 
15 
1.6 
Computer-Aided Design, 
20 
1.7 
The Control Systems Engineer, 
21 
Summary, 
23 
Review Questions, 
23 
Problems, 
24 
Cyber Exploration Laboratory, 
30 
Bibliography, 
31 
2. MODELING IN THE FREQUENCY 
DOMAIN, 
33 
2.1 
Introduction, 34 
2.2 
Laplace Transform Review, 
35 
2.3 
The Transfer Function, 
44 
2.4 
Electrical Network Transfer Functions, 
47 
2.5 
Translational Mechanical System 
Transfer Functions, 
61 
2.6 
Rotational Mechanical System 
Transfer Functions, 
69 
2.7 
Transfer Functions for Systems 
with Gears, 
74 
2.8 
Electromechanical System 
Transfer Functions, 
79 
2.9 
Electric Circuit Analogs, 
84 
2.10 Nonlinearities, 
88 
2.11 Linearization, 
89 
Case Studies, 
94 
Summary, 
97 
Review Questions, 
97 
Problems, 
98 
Cyber Exploration Laboratory, 
112 
Bibliography, 
115 
3. MODELING IN THE TIME 
DOMAIN, 
117 
3.1 
Introduction, 
118 
3.2 
Some Observations, 
119 
3.3 
The General State-Space 
Representation, 
123 
3.4 
Applying the State-Space 
Representation, 
124 
3.5 
Converting a Transfer Function 
to State Space, 
132 
3.6 
Converting from State Space to a 
Transfer Function, 
139 
3.7 
Linearization, 
141 
Case Studies, 
144 
Summary, 
148 
Review Questions, 
149 
Problems, 
149 
Cyber Exploration Laboratory, 
157 
Bibliography, 
159 
4. TIME RESPONSE, 
161 
4.1 
Introduction, 
162 
4.2 
Poles, Zeros, and System Response, 
162 
4.3 
First-Order Systems, 
166 
4.4 
Second-Order Systems: Introduction, 
168 
4.5 
The General Second-Order System, 
173 
4.6 
Underdamped Second-Order Systems, 
177 
4.7 
System Response with 
Additional Poles, 
186 
4.8 
System Response With Zeros, 
191 
4.9 
Effects of Nonlinearities Upon 
Time Response, 
196 
v 

vi 
Contents 
4.10 Laplace Transform Solution 
of State Equations, 
199 
4.11 Time Domain Solution of 
State Equations, 
203 
Case Studies, 
207 
Summary, 
213 
Review Questions, 
214 
Problems, 
215 
Cyber Exploration Laboratory, 
228 
Bibliography, 
232 
5. REDUCTION OF 
MULTIPLE SUBSYSTEMS, 
235 
5.1 
Introduction, 
236 
5.2 
Block Diagrams, 
236 
5.3 
Analysis and Design of 
Feedback Systems, 
245 
5.4 
Signal-Flow Graphs, 
248 
5.5 
Mason's Rule, 
251 
5.6 
Signal-Flow Graphs of 
State Equations, 
254 
5.7 
Alternative Representations in State 
Space, 256 
5.8 
Similarity Transformations, 
266 
Case Studies, 
272 
Summary, 
278 
Review Questions, 
279 
Problems, 280 
Cyber Exploration Laboratory, 297 
Bibliography, 
299 
6. STABILITY, 
301 
6.1 
Introduction, 
302 
6.2 
Routh-Hurwitz Criterion, 
305 
6.3 
Routh-Hurwitz Criterion: 
Special Cases, 308 
6.4 
Routh-Hurwitz Criterion: 
Additional Examples, 
314 
6.5 
Stability in State Space, 
320 
Case Studies, 
323 
Summary, 
325 
Review Questions, 
325 
Problems, 
326 
Cyber Exploration Laboratory, 
335 
Bibliography, 
336 
7. STEADY-STATE ERRORS, 
339 
7.1 
Introduction, 
340 
7.2 
Steady-State Error for Unity 
Feedback Systems, 
343 
7.3 
Static Error Constants 
and System Type, 
349 
7.4 
Steady-State Error Specifications, 
353 
7.5 
Steady-State Error for Disturbances, 
356 
7.6 
Steady-State Error for Nonunity 
Feedback Systems, 
358 
7.7 
Sensitivity, 
362 
7.8 
Steady-State Error for Systems in 
State Space, 
364 
Case Studies, 
368 
Summary, 
371 
Review Questions, 
372 
Problems, 
373 
Cyber Exploration Laboratory, 
384 
Bibliography, 
386 
8. ROOT LOCUS TECHNIQUES, 
387 
8.1 
Introduction, 
388 
8.2 
Defining the Root Locus, 392 
8.3 
Properties of the Root Locus, 394 
8.4 
Sketching the Root Locus, 397 
8.5 
Refining the Sketch, 
402 
8.6 
An Example, 
411 
8.7 
Transient Response Design 
via Gain Adjustment, 
415 
8.8 
Generalized Root Locus, 419 
8.9 
Root Locus for Positive-Feedback 
Systems, 
421 
8.10 Pole Sensitivity, 
424 
Case Studies, 
426 
Summary, 
431 
Review Questions, 
432 
Problems, 
432 
Cyber Exploration Laboratory, 
450 
Bibliography, 
452 

9. DESIGN VIA ROOT LOCUS, 
455 
9.1 
Introduction, 
456 
9.2 
Improving Steady-State Error via 
Cascade Compensation, 
459 
9.3 
Improving Transient Response via 
Cascade Compensation, 
469 
9.4 
Improving Steady-State Error and 
Transient Response, 
482 
9.5 
Feedback Compensation, 
495 
9.6 
Physical Realization of Compensation, 
503 
Case Studies, 
508 
Summary, 
513 
Review Questions, 
514 
Problems, 
515 
Cyber Exploration Laboratory, 
530 
Bibliography, 
531 
10. FREQUENCY RESPONSE 
TECHNIQUES, 
533 
10.1 
Introduction, 
534 
10.2 
Asymptotic Approximations: 
Bode Plots, 
540 
10.3 
Introduction to the Nyquist Criterion, 
559 
10.4 
Sketching the Nyquist Diagram, 
564 
10.5 
Stability via the Nyquist Diagram, 
569 
10.6 
Gain Margin and Phase Margin 
via the Nyquist Diagram, 
574 
10.7 
Stability, Gain Margin, and Phase Margin 
via Bode Plots, 
576 
10.8 
Relation Between Closed-Loop Transient 
and Closed-Loop Frequency 
Responses, 
580 
10.9 
Relation Between Closed- and Open-Loop 
Frequency Responses, 
583 
10.10 Relation Between Closed-Loop Transient 
and Open-Loop Frequency Responses, 
589 
10.11 Steady-State Error Characteristics 
from Frequency Response, 
593 
10.12 Systems with Time Delay, 
597 
10.13 Obtaining Transfer Functions 
Experimentally, 
602 
Case Study, 
606 
Summary, 
607 
Contents 
Review Questions, 
609 
Problems, 
610 
Cyber Exploration Laboratory, 
621 
Bibliography, 
623 
1 1 . DESIGN VIA FREQUENCY 
RESPONSE, 
625 
11.1 
Introduction, 
626 
11.2 
Transient Response via 
Gain Adjustment, 
627 
11.3 
Lag Compensation, 
630 
11.4 
Lead Compensation, 
635 
11.5 
Lag-Lead Compensation, 
641 
Case Studies, 
650 
Summary, 
652 
Review Questions, 
653 
Problems, 
653 
Cyber Exploration Laboratory, 
660 
Bibliography, 
661 
12. DESIGN VIA STATE SPACE, 
663 
12.1 
Introduction, 
664 
12.2 
Controller Design, 
665 
12.3 
Controllability, 
672 
12.4 
Alternative Approaches to 
Controller Design, 
676 
12.5 
Observer Design, 
682 
12.6 
Observability, 
689 
12.7 
Alternative Approaches to 
Observer Design, 
693 
12.8 
Steady-State Error Design Via 
Integral Control, 
700 
Case Study, 
704 
Summary, 
709 
Review Questions, 
710 
Problems, 
711 
Cyber Exploration Laboratory, 
719 
Bibliography, 
721 
13. DIGITAL CONTROL SYSTEMS, 
723 
13.1 
Introduction, 
724 
13.2 
Modeling the Digital Computer, 
727 

viii 
Contents 
13.3 
Thez-Transform, 
730 
13.4 
Transfer Functions, 
735 
13.5 
Block Diagram Reduction, 
739 
13.6 
Stability, 
742 
13.7 
Steady-State Errors, 
749 
13.8 
Transient Response on the z-Plane, 
753 
13.9 
Gain Design on the z-Plane, 
755 
13.10 Cascade Compensation via 
the s-Plane, 
758 
13.11 Implementing the Digital 
Compensator, 
762 
Case Studies, 
765 
Summary, 
769 
Review Questions, 
770 
Problems, 
771 
Cyber Exploration Laboratory, 
778 
Bibliography, 
780 
Appendix A List of Symbols, 
783 
Appendix B MATLAB Tutorial, 
787 
B.I 
Introduction, 
787 
B.2 
MATLAB Examples, 
788 
B.3 
Command Summary, 
833 
Bibliography, 
835 
Appendix C MATLAB's Simulink 
Tutorial, 
836 
C.1 
Introduction, 
836 
C.2 
Using Simulink, 
836 
C.3 
Examples, 
841 
Summary, 
855 
Bibliography, 
856 
Appendix D LabVIEW Tutorial, 
857 
D.1 
Introduction, 
857 
D.2 
Control Systems Analysis, Design, 
and Simulation, 
858 
D.3 
Using LabVIEW, 
859 
D.4 
Analysis and Design Examples, 
862 
D.5 
Simulation Examples, 
876 
Summary, 
885 
Bibliography, 
886 
Glossary, 887 
Answers to Selected Problems, 897 
Credits, 903 
Index, 907 
Appendix E MATLAB's GUI Tools Tutorial 
(Online) 
Appendix F MATLAB's Symbolic 
Math Toolbox Tutorial (Online) 
Appendix G Matrices, Determinants, 
and Systems of Equations 
(Online) 
Appendix H Control System Computational 
Aids (Online) 
Appendix I 
Derivation of a Schematic for a 
DC Motor (Online) 
Appendix J Derivation of the Time Domain 
Solution of State Equations 
(Online) 
Appendix K Solution of State Equations for 
t0 / 0 (Online) 
Appendix L Derivation of Similarity 
Transformations (Online) 
Appendix M Root Locus Rules: Derivations 
(Online) 
Control Systems Engineering Toolbox 
(Online) 
Cyber Exploration Laboratory Experiments 
Covers Sheets (Online) 
Lecture Graphics (Online) 
Solutions to Skill-Assessment Exercises 
(Online) 
Online location is www.wiley.com/college/nise 

Preface 
This book introduces students to the theory and practice of control systems engineer-
ing. The text emphasizes the practical application of the subject to the analysis and 
design of feedback systems. 
The study of control systems engineering is essential for students pursuing 
degrees in electrical, mechanical, aerospace, biomedical, or chemical engineering. 
Control systems are found in a broad range of applications within these disciplines, 
from aircraft and spacecraft to robots and process control systems. 
Control Systems Engineering is suitable for upper-division college and univer-
sity engineering students and for those who wish to master the subject matter 
through self-study. The student using this text should have completed typical lower-
division courses in physics and mathematics through differential equations. Other 
required background material, including Laplace transforms and linear algebra, is 
incorporated in the text, either within chapter discussions or separately in the 
appendixes or on the book's Companion Web site. This review material can be 
omitted without loss of continuity if the student does not require it. 
^ Key Features 
The key features of this sixth edition are: 
• Standardized chapter organization 
• Qualitative and quantitative explanations 
• Examples, Skill-Assessment Exercises, and Case Studies throughout the text 
• WileyPLUS content management system for students and professors 
• Cyber Exploration Laboratory and Virtual Experiments 
• Abundant illustrations 
• Numerous end-of-chapter problems 
• Emphasis on design 
• Flexible coverage 
• Emphasis on computer-aided analysis and design including MATLAB®1 and 
LabVIEW®2 
1MATLAB is a registered trademark of The Math Works, Inc. 
2LabVIEW is a registered trademark of National Instruments Corporation. 
ix 

X 
Preface 
• Icons identifying major topics 
Let us look at each feature in more detail. 
^Standardized Chapter Organization 
Each chapter begins with a list of chapter learning outcomes, followed by a list 
of case study learning outcomes that relate to specific student performance in 
solving a practical case study problem, such as an antenna azimuth position control 
system. 
Topics are then divided into clearly numbered and labeled sections containing 
explanations, examples, and, where appropriate, skill-assessment exercises with 
answers. These numbered sections are followed by one or more case studies, as 
will be outlined in a few paragraphs. Each chapter ends with a brief summary, several 
review questions requiring short answers, a set of homework problems, and 
experiments. 
( Qualitative and Quantitative Explanations 
Explanations are clear and complete and, where appropriate, include a brief review 
of required background material. Topics build upon and support one another in a 
logical fashion. Groundwork for new concepts and terminology is carefully laid to 
avoid overwhelming the student and to facilitate self-study. 
Although quantitative solutions are obviously important, a qualitative or 
intuitive understanding of problems and methods of solution is vital to producing 
the insight required to develop sound designs. Therefore, whenever possible, new 
concepts are discussed from a qualitative perspective before quantitative analysis 
and design are addressed. For example, in Chapter 8 the student can simply look at 
the root locus and describe qualitatively the changes in transient response that will 
occur as a system parameter, such as gain, is varied. This ability is developed with the 
help of a few simple equations from Chapter 4. 
( Examples, Skill-Assessment Exercises, and Case Studies 
Explanations are clearly illustrated by means of numerous numbered and labeled 
Examples throughout the text. Where appropriate, sections conclude with Skill-
Assessment Exercises. These are computation drills, most with answers that test 
comprehension and provide immediate feedback. Complete solutions can be found 
at www.wiley.com/college/nise. 
Broader examples in the form of Case Studies can be found after the last 
numbered section of every chapter, with the exception of Chapter 1. These case 
studies arc practical application problems that demonstrate the concepts introduced 
in the chapter. Each case study concludes with a "Challenge" problem that students 
may work in order to test their understanding of the material. 
One of the case studies, an antenna azimuth position control system, is 
carried throughout the book. The purpose is to illustrate the application of new 
material in each chapter to the same physical system, thus highlighting the 
continuity of the design process. Another, more challenging case study, involving 

Preface 
xi 
an Unmannered Free-Swimming Submersible Vehicle, is developed over the 
course of five chapters. 
(
_ 
WileyPLUS 
WileyPLUS Content Management System 
CE3 
for Students and Professors 
con °
o u l 0 
WileyPLUS is an online suite of resources, including the full text, for students and 
instructors. For the sixth edition of Control Systems Engineering, this suite offers 
professors who adopt the book with WileyPLUS the ability to create homework 
assignments based on algorithmic problems or multi-part questions, which guide the 
student through a problem. Instructors also have the capability to integrate assets, 
such as the simulations, into their lecture presentations. Students will find a Read, 
Study, and Practice zone to help them work through problems based on the ones 
offered in the text. 
Control Solutions (prepared by JustAsk) are included in the WileyPLUS 
platform. The student will find simulations and Control Solutions in the Read, 
Study, and Practice zone. The Control Solutions are highlighted in the text with a 
WileyPLUS icon. 
A new addition to the WileyPLUS platform for this edition are National 
Instruments and Quanser Virtual Laboratories. You will find references to them in 
sidebar entries throughout the textbook. 
Visit www.wiley.com or contact your local Wiley representative for 
information. 
(
Cyber Exploration Laboratory and Virtual 
Experiments 
Computer experiments using MATLAB, Simulink®3 and the Control System 
Toolbox are found at the end of the Problems sections under the sub-heading 
Cyber Exploration Laboratory. New to this edition is LabVIEW, which is also used 
for experiments within the Cyber Exploration Laboratory section of the chapters. 
The experiments allow the reader to verify the concepts covered in the chapter via 
simulation. The reader also can change parameters and perform "what if" explora-
tion to gain insight into the effect of parameter and configuration changes. The 
experiments are written with stated Objectives, Minimum Required Software Pack-
ages, as well as Prelab, Lab, and Postlab tasks and questions. Thus, the experiments 
may be used for a laboratory course that accompanies the class. Cover sheets for 
these experiments are available at www.wiley.com.college/nise. 
In addition, and new to this sixth edition, are Virtual Experiments. These 
experiments are more tightly focused than the Cyber Exploration Laboratory 
experiments and use LabVIEW and Quanser virtual hardware to illustrate 
immediate discussion and examples. The experiments are referenced in sidebars 
throughout some chapters. 
Simulink is a registered trademark of The Math Works, Inc. 

xii 
Preface 
£ Abundant Illustrations 
The ability to visualize concepts and processes is critical to the student's under-
standing. For this reason, approximately 800 photos, diagrams, graphs, and tables 
appear throughout the book to illustrate the topics under discussion. 
^ Numerous End-of-Chapter Problems 
Each chapter ends with a variety of homework problems that allow students to test 
their understanding of the material presented in the chapter. Problems vary in 
degree of difficulty and complexity, and most chapters include several practical, real-
life problems to help maintain students' motivation. Also, the homework problems 
contain progressive analysis and design problems that use the same practical systems 
to demonstrate the concepts of each chapter. 
^ Emphasis on Design 
This textbook places a heavy emphasis on design. Chapters 8, 9,11,12 and 13 focus 
D . 
primarily on design. But. even in chapters that emphasize analysis, simple design 
^•T]A 
examples are included wherever possible. 
Throughout the book, design examples involving physical systems are identi-
fied by the icon shown in the margin. End-of-chapter problems that involve the 
design of physical systems are included under the separate heading Design Problems, 
and also in chapters covering design, under the heading Progressive Analysis and 
Design Problems. In these examples and problems, a desired response is specified, 
and the student must evaluate certain system parameters, such as gain, or specify a 
system configuration along with parameter values. In addition, the text includes 
numerous design examples and problems (not identified by an icon) that involve 
purely mathematical systems. 
Because visualization is so vital to understanding design, this text carefully 
relates indirect design specifications to more familiar ones. For example, the less 
familiar and indirect phase margin is carefully related to the more direct and familiar 
percent overshoot before being used as a design specification. 
For each general type of design problem introduced in the text, a methodology 
for solving the problem is presented—in many cases in the form of a step-by-step 
procedure, beginning with a statement of design objectives. Example problems serve 
to demonstrate the methodology by following the procedure, making simplifying 
assumptions, and presenting the results of the design in tables or plots that compare 
the performance of the original system to that of the improved system. This 
comparison also serves as a check on the simplifying assumptions. 
Transient response design topics are covered comprehensively in the text. They 
include: 
• Design via gain adjustment using the root locus 
• Design of compensation and controllers via the root locus 
• Design via gain adjustment using sinusoidal frequency response methods 
• Design of compensation via sinusoidal frequency response methods 

Preface 
• Design of controllers in state space using pole-placement techniques 
• Design of observers in state-space using pole-placement techniques 
• Design of digital control systems via gain adjustment on the root locus 
• Design of digital control system compensation via s-plane design and the 
Tustin transformation 
Steady-state error design is covered comprehensively in this textbook and 
includes: 
• Gain adjustment 
• Design of compensation via the root locus 
• Design of compensation via sinusoidal frequency response methods 
• Design of integral control in state space 
Finally, the design of gain to yield stability is covered from the following 
perspectives: 
• Routh-Hurwitz criterion 
• Root locus 
• Nyquist criterion 
• Bode plots 
J Flexible Coverage 
The material in this book can be adapted for a one-quarter or a one-semester course. 
The organization is flexible, allowing the instructor to select the material that best 
suits the requirements and time constraints of the class. 
Throughout the book, state-space methods are presented along with the 
classical approach. Chapters and sections (as well as examples, exercises, review 
questions, and problems) that cover state space are marked by the icon shown in the 
margin and can be omitted without any loss of continuity. Those wishing to add a 
basic introduction to state-space modeling can include Chapter 3 in the syllabus. 
In a one-semester course, the discussions of slate-space analysis in Chapters 4, 
5,6 and 7, as well as state-space design in Chapter 12, can be covered along with the 
classical approach. Another option is to teach state space separately by gathering the 
appropriate chapters and sections marked with the State Space icon into a single unit 
that follows the classical approach. In a one-quarter course, Chapter 13, "Digital 
Control Systems," could be eliminated. 
(
Emphasis on Computer-Aided Analysis 
ana Design 
Control systems problems, particularly analysis and design problems using the root 
locus, can be tedious, since their solution involves trial and error. To solve these 
problems, students should be given access to computers or programmable calcula-
tors configured with appropriate software. In this sixth edition, MATLAB continues 
to be integrated into the text as an optional feature. In addition, and new to this 

Preface 
edition, we have included LabVIEW as an option to computer-aided analysis and 
design. 
Many problems in this text can be solved with either a computer or a hand-held 
programmable calculator. For example, students can use the programmable calcu-
lator to (1) determine whether a point on the s-plane is also on the root locus, (2) find 
magnitude and phase frequency response data for Nyquist and Bode diagrams, and 
(3) convert between the following representations of a second-order system: 
• Pole location in polar coordinates 
• Pole location in Cartesian coordinates 
• Characteristic polynomial 
• Natural frequency and damping ratio 
• Settling time and percent overshoot 
• Peak time and percent overshoot 
• Settling time and peak time 
Handheld calculators have the advantage of easy accessibility for homework 
and exams. Please consult Appendix H, located at www.wiley.com/college/nise, for a 
discussion of computational aids that can be adapted to handheld calculators. 
Personal computers are better suited for more computation-intensive appli-
cations, such as plotting time responses, root loci, and frequency response curves, as 
well as finding state-transition matrices. These computers also give the student a 
real-world environment in which to analyze and design control systems. Those not 
using MATLAB or LabVIEW can write their own programs or use other programs, 
such as Program CC. Please consult Appendix H at www.wiley.com/college/nise for a 
discussion of computational aids that can be adapted for use on computers that do 
not have MATLAB or LabVIEW installed. 
Without access to computers or programmable calculators, students cannot 
obtain meaningful analysis and design results and the learning experience will be 
limited. 
J Icons Identifying Major Topics 
Several icons identify coverage and optional material. The icons are summarized as 
follows: 
Control Solutions for the student are identified with a WileyPLUS icon. These 
problems, developed by JustAsk, are worked in detail and offer explanations of 
every facet of the solution. 
The MATLAB icon identifies MATLAB discussions, examples, exercises, and 
problems. MATLAB coverage is provided as an enhancement and is not required to 
use the text. 
The Simulink icon identifies Simulink discussions, examples, exercises, and 
problems. Simulink coverage is provided as an enhancement and is not required to 
use the text. 
The GUI Tool icon identifies MATLAB GUI Tools discussions, examples, 
exercises, and problems. The discussion of the tools, which includes the LTI Viewer, 
the Simulink LTIViewer, and the SISO Design Tool, is provided as an enhancement 
and is not required to use the text. 
WileyPLUS 
Control Solutions 
MATLAB 
Simulink 
Gui TOOl 
(339 

Preface 
The Symbolic Math icon identifies Symbolic Math Toolbox discussions, exam-
ples, exercises, and problems. Symbolic Math Toolbox coverage is provided as an 
enhancement and is not required to use the text. 
The LabVIEW icon identifies Lab VIEW discussions, examples, exercises, and 
problems. LabVIEW is provided as an enhancement and is not required to use the text. 
The State Space icon highlights state-space discussions, examples, exercises, and 
problems State-space material is optional and can be omitted without loss of continuity. 
The Design icon clearly identifies design problems involving physical systems. 
^ New to This Edition 
The following list describes the key changes in this sixth edition 
End-of-chapter problems More than 20% of the end-of-chapter problems 
are either new or revised. Also, an additional Progressive Analysis and Design 
Problem has been added at the end of the chapter problems. The new progressive 
problem analyzes and designs a hybrid electric vehicle. 
MATLAB The use of MATLAB for computer-aided analysis and design con-
tinues to be integrated into discussions and problems as an optional feature in the sixth 
edition. The MATLAB tutorial has been updated to MATLAB Version 7.9 (R 2009b), 
the Control System Toolbox Version 8.4, and the Symbolic Math Toolbox Version 5.3 
In addition, MATLAB code continues to be incorporated in the chapters in the 
form of sidebar boxes entitled Trylt. 
Virtual Experiments Virtual experiments, developed by National Instru-
ments and Quanser, are included via sidebar references to experiments on Wiley-
PLUS. The experiments are performed with 3-D simulations of Quanser hardware 
using developed LabVIEW Vis. Virtual Experiments are tightly focused and linked 
to a discussion or example. 
Cyber Exploration Laboratory Experiments using LabVIEW have been 
added. Cyber Exploration Laboratory experiments are general in focus and are 
envisioned to be used in an associated lab class. 
MATLAB's Simulink The use of Simulink to show the effects of nonlinear-
ities upon the time response of open-loop and closed-loop systems appears again in 
this sixth edition. We also continue to use Simulink to demonstrate how to simulate 
digital systems. Finally, the Simulink tutorial has been updated to Simulink 7.4 
Chapter 11 Lag-lead compensator design using Nichols charts has been 
added to Section 11.5. 
LabVIEW New to this edition is LabVIEW. A tutorial for this tool is 
included in Appendix D. LabVIEW is used in Cyber Exploration Laboratory 
experiments and other problems throughout the textbook. 
(Book Companion Site (BCS) at www 
.wiley.com/college/nise 
The BCS for the sixth edition includes various student and instructor resources. This 
free resource can be accessed by going to www.wiley.com/college/nise and clicking 
on Student Companion Site. Professors also access their password-protected re-
sources on the Instructor Companion Site available through this url. Instructors 
should contact their Wiley sales representative for access. 

XVI 
Preface 
For the Student: 
• All M-files used in the MATLAB, Simulink, GUI Tools, and Symbolic Math 
Toolbox tutorials, as well as the Trylt exercises 
• Copies of the Cyber Exploration Laboratory experiments for use as experi-
ment cover sheets 
• Solutions to the Skill-Assessment Exercises in the text 
• Lab VIEW Virtual Experiments and Lab VIEW Vis used in Appendix D 
For the Instructor; 
• PowerPoint®4 files containing the figures from the textbook 
• Solutions to end-of-chapter problem sets 
• Simulations, developed by JustAsk, for inclusion in lecture presentations 
£ Book Organization by Chapter 
Many times it is helpful lo understand an author's reasoning behind the organization 
of the course material. The following paragraphs hopefully shed light on this topic. 
The primary goal of Chapter 1 is to motivate students. In this chapter, students 
learn about the many applications of control systems in everyday life and about the 
advantages of study and a career in this field. Control systems engineering design 
objectives, such as transient response, steady-state error, and stability, are intro-
duced, as is the path to obtaining these objectives. New and unfamiliar terms also are 
included in the Glossary. 
Many students have trouble with an early step in the analysis and design sequence: 
transforming a physical system into a schematic. This step requires many simplifying 
assumptions based on experience the typical college student does not yet possess. 
Identifying some of these assumptions in Chapter 1 helps to fill the experience gap. 
Chapters 2,3, and 5 address the representation of physical systems. Chapters 2 and 3 
cover modeling of open-loop systems, using frequency response techniques and state-
space techniques, respectively. Chapter 5 discusses the representation and reduction of 
systems formed of interconnected open-loop subsystems. Only a representative sample of 
physical systems can be covered in a textbook of this length. Electrical, mechanical (both 
translational and rotational), and electromechanical systems are used as examples of 
physical systems that are modeled, analyzed, and designed. Linearization of a nonlinear 
system—one technique used by the engineer to simplify a system in order to represent it 
mathematically—is also introduced. 
Chapter 4 provides an introduction to system analysis, that is, finding and 
describing the output response of a system. It may seem more logical to reverse the 
order of Chapters 4 and 5, to present the material in Chapter 4 along with other 
chapters covering analysis. However, many years of teaching control systems have 
taught me that the sooner students see an application of the study of system 
representation, the higher their motivation levels remain. 
Chapters 6, 7, 8, and 9 return to control systems analysis and design with the 
study of stability (Chapter 6), steady-state errors (Chapter 7), and transient response 
of higher-order systems using root locus techniques (Chapter 8). Chapter 9 covers 
design of compensators and controllers using the root locus. 
PowerPoint is a registered trademark of Microsoft Corporation. 

Preface 
Chapters 10 and 11 focus on sinusoidal frequency analysis and design. Chapter 
10, like Chapter 8, covers basic concepts for stability, transient response, and steady-
state-error analysis. However, Nyquist and Bode methods are used in place of root 
locus. Chapter 11, like Chapter 9, covers the design of compensators, but from the 
point of view of sinusoidal frequency techniques rather than root locus. 
An introduction to state-space design and digital control systems analysis and 
design completes the text in Chapters 12 and 13, respectively. Although these 
chapters can be used as an introduction for students who will be continuing their 
study of control systems engineering, they are useful by themselves and as a 
supplement to the discussion of analysis and design in the previous chapters. The 
subject matter cannot be given a comprehensive treatment in two chapters, but the 
emphasis is clearly outlined and logically linked to the rest of the book. 
^ Acknowledgments 
The author would like to acknowledge the contributions of faculty and students, both 
at California State Polytechnic University, Pomona, and across the country, whose 
suggestions through all editions have made a positive impact on the new edition. 
I am deeply indebted to my colleagues, Elhami T. Ibrahim, Salomon Oldak, 
and Norali Pernalete at California State Polytechnic University, Pomona for author-
ing the creative new problems you will find at the end of every chapter. Dr. Pernalete 
created the LabVIEW experiments and problems you will find in this new edition. 
The new progressive problem, hybrid vehicle, that is at the end of every chapter is the 
creation of Dr Ibrahim. In addition to his busy schedule as Electrical and Computer 
Engineering Department Chairman and author of many of the new problems, 
Professor Oldak also error checked new additions to the book and prevented 
glitches from ever reaching you, the reader. 
I would like to express my appreciation to contributors to this sixth edition who 
participated in reviews, accuracy checking, surveys, or focus groups. They are: Jorge 
Aravena, Louisiana State University; Kurt Behpour, Cal Poly San Luis Obispo; Bill 
Diong, Texas Christian University; Sam Guccione, Eastern Illinois University; 
Pushkin Kachroo, Virginia Tech; Dmitriy Kalantarov, Cal State San Diego; Kamran 
Iqbal, University of Arkansas, Little Rock; Pushkin Kachroo, Virginia Tech; Kevin 
Lynch, Northwestern University; Tesfay Meressi, University of Massachusetts, 
Dartmouth; Luai Najim, University of Alabama at Birmingham; Dalton Nelson, 
University of Alabama at Birmingham; Marcio S. de Queiroz, Louisiana State 
University; John Ridgely, Cal Poly San Luis Obispo; John Schmitt, Oregon State 
University; Lili Tabrizi, California State University, Los Angeles; Raman Unnik-
rishnan, Cal State Fullerton; Stephen Williams, Milwaukee School of Engineering; 
Jiann-Shiou Yang, University of Minnesota, Duluth; and Ryan Zurakowski, Uni-
versity of Delaware. 
The author would like to thank John Wiley & Sons, Inc. and its staff for once 
again providing professional support for this project through all phases of its 
development. Specifically, the following are due recognition for their contributions: 
Don Fowler, Vice President and Publisher, who gave full corporate support to the 
project; Daniel Sayre, Publisher, with whom I worked closely and who provided 
guidance and leadership throughout the development of the sixth edition; and Katie 
Singleton, Senior Editorial Assistant, who was always there to answer my questions 
and respond to my concerns in a professional manner. There are many others who 

XViif 
Preface 
worked behind the scenes, but who should be thanked never the less. Rather than 
repeating their names and titles here, I refer the reader to the copyright page of this 
book where they are listed and credited. I am very thankful for their contributions. 
Next, I want to acknowledge Integra Software Services, Inc. and its staff for 
turning the sixth edition manuscript into the finished product you are holding in your 
hands. Specifically, kudos go out to Heather Johnson, Managing Editor, who, once 
again, was always there to address my concerns in a timely and professional manner. 
My sincere appreciation is extended to Erik Luther of National Instruments 
Corporation and Paul Gilbert and Michel Levis of Quanser for conceiving, coor-
dinating, and developing the Virtual Experiments that I am sure will enhance your 
understanding of control systems. 
Finally, last but certainly not least, I want to express my appreciation to my 
wife, Ellen, for her support in ways too numerous to mention during the writing 
of the past six editions. Specifically though, thanks to her proofing final pages for 
this sixth edition, you the reader hopefully will find comprehension rather than 
apprehension in the pages that follow. 
Norman S. Nise 

Introduction 
1 
^ Chapter Learning Outcomes ] J 
After completing this chapter, the student will be able to: 
• Define a control system and describe some applications (Section 1.1) 
• Describe historical developments leading to modern day control theory (Section 1.2) 
• Describe the basic features and configurations of control systems (Section 1.3) 
• Describe control systems analysis and design objectives (Section 1.4) 
• Describe a control system's design process (Sections 1.5-1.6) 
• Describe the benefit from studying control systems (Section 1.7) 
^Case Study Learning Outcomes^ 
• You will be introduced to a running case study—an antenna azimuth position control 
system—that will serve to illustrate the principles in each subsequent chapter. In this 
chapter, the system is used to demonstrate qualitatively how a control system works 
as well as to define performance criteria that are the basis for control systems 
analysis and design. 

2 
Chapter 1 
Introduction 
C^1.1 Introduction 
Input; stimulus 
Desired response 
Control 
system 
FIG U R E 1.1 
Simplified description of a 
control system 
Control systems are an integral part of modern society. Numerous applications are 
all around us: The rockets fire, and the space shuttle lifts off to earth orbit; in 
splashing cooling water, a metallic part is automatically machined; a self-guided 
vehicle delivering material to workstations in an aerospace assembly plant glides 
along the floor seeking its destination. These are just a few examples of the 
automatically controlled systems that we can create. 
We are not the only creators of automatically controlled systems; these systems 
also exist in nature. Within our own bodies are numerous control systems, such as the 
pancreas, which regulates our blood sugar. In time of "fight or flight," our adrenaline 
increases along with our heart rate, causing more oxygen to be delivered to our cells. 
Our eyes follow a moving object to keep it in view; our hands grasp the object and 
place it precisely at a predetermined location. 
Even the nonphysical world appears to be automatically regulated. Models 
have been suggested showing automatic control of student performance. The input 
to the model is the student's available study time, and the output is the grade. The 
model can be used to predict the time required for the grade to rise if a sudden 
increase in study time is available. Using this model, you can determine whether 
increased study is worth the effort during the last week of the term. 
Control System Definition 
A control system consists of subsystems and processes (or plants) assembled for the 
purpose of obtaining a desired output with desired performance, given a specified 
input. Figure 1.1 shows a control system in its simplest form, where the 
input represents a desired output. 
For example, consider an elevator. When the fourth-floor button is 
pressed on the first floor, the elevator rises to the fourth floor with a 
speed and floor-leveling accuracy designed for passenger comfort. The 
push of the fourth-floor button is an input that represents our desired 
output, shown as a step function in Figure 1.2. The performance of the elevator can be 
seen from the elevator response curve in the figure. 
Two major measures of performance are apparent: (1) the transient response 
and (2) the steady-state error. In our example, passenger comfort and passenger 
patience are dependent upon the transient response. If this response is too fast, 
passenger comfort is sacrificed; if too slow, passenger patience is sacrificed. The 
steady-state error is another important performance specification since passenger 
safety and convenience would be sacrificed if the elevator did not properly level. 
Output: response 
Actual response 
FIG U R E 1.2 
Elevator response 
Input command 
Transient 
response 
i 
r 
Steady-state Steady-state 
response 
error 
Elevator response 
Time 

1.1 
Introduction 
3 
(a) 
Advantages of Control Systems 
With control systems we can move large equipment with precision that 
would otherwise be impossible. We can point huge antennas toward 
the farthest reaches of the universe to pick up faint radio signals; 
controlling these antennas by hand would be impossible. Because of 
control systems, elevators carry us quickly to our destination, auto-
matically stopping at the right floor (Figure 1.3). We alone could not 
provide the power required for the load and the speed; motors provide 
the power, and control systems regulate the position and speed. 
We build control systems for four primary reasons: 
1. Power amplification 
2. Remote control 
3. Convenience of input form 
4. Compensation for disturbances 
For example, a radar antenna, positioned by the low-power rotation 
of a knob at the input, requires a large amount of power for its output 
rotation. A control system can produce the needed power amplifica-
tion, or power gain-
Robots designed by control system principles can compensate 
for human disabilities. Control systems are also useful in remote or 
dangerous locations. For example, a remote-controlled robot arm can 
be used to pick up material in a radioactive environment. Figure 1.4 
shows a robot arm designed to work in contaminated environments. 
Control systems can also be used to provide convenience by 
changing the form of the input. For example, in a temperature control 
system, the input is a position on a thermostat. The output is heat. 
Thus, a convenient position input yields a desired thermal output. 
Another advantage of a control system is the ability to compensate 
for disturbances. Typically, we control such variables as temperature in 
FIGURE 1.3 
a. Earl)' elevators 
were controlled by hand ropes 
or an elevator operator. Here a 
rope is cut to demonstrate the 
safety brake, an innovation in 
early elevators (© Bettman/ 
Corbis); b. One of two modern 
Duo-lift elevators makes i Is way 
up the Grande Arche in Paris. 
Two elevators are driven by one 
motor, with each car acting as a 
counterbalance to the other. 
Today, elevators are fully auto-
matic, using control systems to 
regulate position and velocity. 
FIGURE 1.4 
Rover was built to work in 
contaminated areas at Three Mile Island in 
Middleton, Pennsylvania, where a nuclear 
accident occurred in 1979. The remote-controlled 
robot's long arm can be seen at the front of the 
vehicle. 

Chapter 1 
Introduction 
thermal systems, position and velocity in mechanical systems, and voltage, current, or 
frequency in electrical systems. The system must be able to yield the correct output even 
with a disturbance. For example, consider an antenna system that points in a commanded 
direction. If wind forces the antenna from its commanded position, or if noise enters 
internally, the system must be able to detect the disturbance and correct the antenna's 
position. Obviously, the system's input will not change to make the correction. Conse-
quently, the system itself must measure the amount that the disturbance has repositioned 
the antenna and then return the antenna to the position commanded by the input. 
A History of Control Systems 
Feedback control systems are older than humanity. Numerous biological control 
systems were built into the earliest inhabitants of our planet. Let us now look at a 
brief history of human-designed control systems.1 
Liquid-Level Control 
The Greeks began engineering feedback systems around 300 ac A water clock invented 
by Ktesibios operated by having water trickle into a measuring container at a constant 
rate. The level of water in the measuring container could be used to tell time. For water to 
trickle at a constant rate, the supply tank had to be kept at a constant level. This was 
accomplished using a float valve similar to the water-level control in today's flush toilets. 
Soon after Ktesibios, the idea of liquid-level control was applied to an oil lamp 
by Philon of Byzantium. The lamp consisted of two oil containers configured 
vertically. The lower pan was open at the top and was the fuel supply for the flame. 
The closed upper bowl was the fuel reservoir for the pan below. The containers were 
interconnected by two capillary tubes and another tube, called a vertical riser, which 
was inserted into the oil in the lower pan just below the surface. As the oil burned, 
the base of the vertical riser was exposed to air, which forced oil in the reservoir 
above to flow through the capillary tubes and into the pan. The transfer of fuel from 
the upper reservoir to the pan stopped when the previous oil level in the pan was 
reestablished, thus blocking the air from entering the vertical riser. Hence, the 
system kept the liquid level in the lower container constant. 
Steam Pressure and Temperature Controls 
Regulation of steam pressure began around 1681 with Denis Papin's invention of the safety 
valve. The concept was further elaborated on by weighting the valve top. If the upward 
pressure from the boiler exceeded the weight, steam was released, and the pressure 
decreased. Kit did not exceed the weight, the valve did not open, and the pressure inside the 
boiler increased. Thus, the weight on the valve top set the internal pressure of the boiler. 
Also in the seventeenth century, Cornells Drebbel in Holland invented a purely 
mechanical temperature control system for hatching eggs. The device used a vial of 
alcohol and mercury with a floater inserted in it. The floater was connected to a damper 
that controlled a flame. A portion of the vial was inserted into the incubator to sense 
the heat generated by the fire. As the heat increased, the alcohol and mercury 
expanded, raising the floater, closing the damper, and reducing the flame. Lower 
temperature caused the float to descend, opening the damper and increasing the flame. 
Speed Control 
In 1745, speed control was applied to a windmill by Edmund Lee. Increasing winds 
pitched the blades farther back, so that less area was available. As the wind 
1 See Bennett (1979) and Mayr (1970) for definitive works on the history of control systems. 

1.2 
A History of Control Systems 
decreased, more blade area was available. William Cubitt improved on the idea in 
1809 by dividing the windmill sail into movable louvers. 
Also in the eighteenth century, James Watt invented the flyball speed governor to 
control the speed of steam engines. In this device, two spinning flyballs rise as rotational 
speed increases. A steam valve connected to the flyball mechanism closes with the 
ascending flyballs and opens with the descending flyballs, thus regulating the speed. 
Stability, Stabilization, and Steering 
Control systems theory as we know it today began to crystallize in the latter half of the 
nineteenth century. In 1868, James Clerk Maxwell published the stability criterion for a 
third-order system based on the coefficients of the differential equation. In 1874, Edward 
John Routh, using a suggestion from William Kingdon Clifford that was ignored earlier 
by Maxwell, was able to extend the stability criterion to fifth-order systems. In 1877, the 
topic for the Adams Prize was "The Criterion of Dynamical Stability." In response, 
Routh submitted a paper entitled A Treatise on the Stability of a Given State of Motion 
and won the prize. This paper contains what is now known as the Routh-Hurwitz 
criterion for stability, which we will study in Chapter 6. Alexandr Michailovich Lyapunov 
also contributed to the development and formulation of today's theories and practice of 
control system stability. A student of P. L. Chebyshev at the University of St. Petersburg 
in Russia, Lyapunov extended the work of Routh to nonlinear systems in his 1892 
doctoral thesis, entitled The General Problem of Stability of Motion. 
During the second half of the 1800s, the development of control systems 
focused on the steering and stabilizing of ships. In 1874, Henry Bessemer, using a 
gyro to sense a ship's motion and applying power generated by the ship's hydraulic 
system, moved the ship's saloon to keep it stable (whether this made a difference to 
the patrons is doubtful). Other efforts were made to stabilize platforms for guns as 
well as to stabilize entire ships, using pendulums to sense the motion. 
Twentieth-Century Developments 
It was not until the early 1900s that automatic steering of ships was achieved. In 1922, 
the Sperry Gyroscope Company installed an automatic steering system that used the 
elements of compensation and adaptive control to improve performance. However, 
much of the general theory used today to improve the performance of automatic 
control systems is attributed to Nicholas Minorsky, a Russian born in 1885. It was his 
theoretical development applied to the automatic steering of ships that led to what 
we call today proportional-plus-integral-plus-derivative (PID), or three-mode, con-
trollers, which we will study in Chapters 9 and 11. 
In the late 1920s and early 1930s, H. W. Bode and H. Nyquist at Bell Telephone 
Laboratories developed the analysis of feedback amplifiers. These contributions 
evolved into sinusoidal frequency analysis and design techniques currently used for 
feedback control system, and are presented in Chapters 10 and 11. 
In 1948, Walter R. Evans, working in the aircraft industry, developed a 
graphical technique to plot the roots of a characteristic equation of a feedback 
system whose parameters changed over a particular range of values. This technique, 
now known as the root locus, takes its place with the work of Bode and Nyquist in 
forming the foundation of linear control systems analysis and design theory. We will 
study root locus in Chapters 8, 9, and 13. 
Contemporary Applications 
Today, control systems find widespread application in the guidance, navigation, and 
control of missiles and spacecraft, as well as planes and ships at sea. For example, 

Chapter 1 
Introduction 
modern ships use a combination of electrical, mechanical, and hydraulic components 
to develop rudder commands in response to desired heading commands. The rudder 
commands, in turn, result in a rudder angle that steers the ship. 
We find control systems throughout the process control industry, regulating 
liquid levels in tanks, chemical concentrations in vats, as well as the thickness of 
fabricated material. For example, consider a thickness control system for a steel 
plate finishing mill. Steel enters the finishing mill and passes through rollers. In the 
finishing mill, X-rays measure the actual thickness and compare it to the desired 
thickness. Any difference is adjusted by a screw-down position control that changes 
the roll gap at the rollers through which the steel passes. This change in roll gap 
regulates the thickness. 
Modern developments have seen widespread use of the digital computer as 
part of control systems. For example, computers in control systems are for industrial 
robots, spacecraft, and the process control industry. It is hard to visualize a modern 
control system that does not use a digital computer. 
The space shuttle contains numerous control systems operated by an onboard 
computer on a time-shared basis. Without control systems, it would be impossible to 
guide the shuttle to and from earth's orbit or to adjust the orbit itself and support life 
on board. Navigation functions programmed into the shuttle's computers use data 
from the shuttle's hardware to estimate vehicle position and velocity. This informa-
tion is fed to the guidance equations that calculate commands for the shuttle's flight 
control systems, which steer the spacecraft. In space, the flight control system 
gimbals (rotates) the orbital maneuvering system (OMS) engines into a position 
that provides thrust in the commanded direction to steer the spacecraft. Within the 
earth's atmosphere, the shuttle is steered by commands sent from the flight control 
system to the aerosurfaces, such as the elevons. 
Within this large control system represented by navigation, guidance, and 
control are numerous subsystems to control the vehicle's functions. For example, the 
elevons require a control system to ensure that their position is indeed that which 
was commanded, since disturbances such as wind could rotate the elevons away from 
the commanded position. Similarly, in space, the gimbaling of the orbital maneu-
vering engines requires a similar control system to ensure that the rotating engine 
can accomplish its function with speed and accuracy. Control systems are also used to 
control and stabilize the vehicle during its descent from orbit. Numerous small jets 
that compose the reaction control system (RCS) are used initially in the exoatmo-
sphere, where the aerosurfaces are ineffective. Control is passed to the aerosurfaces 
as the orbiter descends into the atmosphere. 
Inside the shuttle, numerous control systems are required for power and 
life support. For example, the orbiter has three fuel-cell power plants that 
convert hydrogen and oxygen (reactants) into electricity and water for use by 
the crew. The fuel cells involve the use of control systems to regulate temperature 
and pressure. The reactant tanks are kept at constant pressure as the quantity 
of reactant diminishes. Sensors in the tanks send signals to the control systems 
to turn heaters on or off to keep the tank pressure constant (Rockwell Interna-
tional, 1984). 
Control systems are not limited to science and industry. For example, a home 
heating system is a simple control system consisting of a thermostat containing a 
bimetallic material that expands or contracts with changing temperature. This 
expansion or contraction moves a vial of mercury that acts as a switch, turning 
the heater on or off. The amount of expansion or contraction required to move the 
mercury switch is determined by the temperature setting. 

1.3 System Configurations 
7 
(a) 
FIGURE 1.5 
Optical playback 
system: a. objective lens read-
ing pits on an optical disc; 
b. optical path for playback, 
showing tracking mirror 
rotated by a control system to 
keep the laser beam positioned 
on the pits (Pioneer Electronics 
(b) 
(USA), Inc.) 
Home entertainment systems also have built-in control systems. For example, 
in an optical disk recording system microscopic pits representing the information are 
burned into the disc by a laser during the recording process. During playback, a 
reflected laser beam focused on the pits changes intensity (Figure 1.5). The light 
intensity changes are converted to an electrical signal and processed as sound or 
picture. A control system keeps the laser beam positioned on the pits, which are cut 
as concentric circles. 
There are countless other examples of control systems, from the everyday to 
the extraordinary. As you begin your study of control systems engineering, you will 
become more aware of the wide variety of applications. 
( 1 3 
System Configurations 
In this section, we discuss two major configurations of control systems: open loop 
and closed loop. We can consider these configurations to be the internal architecture 
of the total system shown in Figure 1.1. Finally, we show how a digital computer 
forms part of a control system's configuration. 
Photodiode 
Fixed mirror 
Toric lens 
Tangential mirror 
Coupling lens 
Prism 
1/4-wavelength plate / ¢^ 
Cylindrical 
Grating 
lens 
Tracking mirror 
Laser diode 

Chapter 1 
Introduction 
Open-Loop Systems 
A generic open-loop system is shown in Figure 1.6(a). It starts with a subsystem 
called an input transducer, which converts the form of the input to that used by the 
controller. The controller drives a process or a plant. The input is sometimes called 
the reference, while the output can be called the controlled variable. Other signals, 
such as disturbances, are shown added to the controller and process outputs via 
summing junctions, which yield the algebraic sum of their input signals using 
associated signs. For example, the plant can be a furnace or air conditioning system, 
where the output variable is temperature. The controller in a heating system consists 
of fuel valves and the electrical system that operates the valves. 
The distinguishing characteristic of an open-loop system is that it cannot 
compensate for any disturbances that add to the controller's driving signal (Distur-
bance 1 in Figure 1.6(a)). For example, if the controller is an electronic amplifier and 
Disturbance 1 is noise, then any additive amplifier noise at the first summing 
junction will also drive the process, corrupting the output with the effect of the 
noise. The output of an open-loop system is corrupted not only by signals that add to 
the controller's commands but also by disturbances at the output (Disturbance 2 in 
Figure 1.6(a)). The system cannot correct for these disturbances, either. 
Open-loop systems, then, do not correct for disturbances and are simply 
commanded by the input. For example, toasters are open-loop systems, as anyone 
with burnt toast can attest. The controlled variable (output) of a toaster is the color 
of the toast. The device is designed with the assumption that the toast will be darker 
the longer it is subjected to heat. The toaster does not measure the color of the toast; 
it does not correct for the fact that the toast is rye, white, or sourdough, nor does it 
correct for the fact that toast comes in different thicknesses. 
Other examples of open-loop systems are mechanical systems consisting of a 
mass, spring, and damper with a constant force positioning the mass. The greater the 
force, the greater the displacement. Again, the system position will change with a 
disturbance, such as an additional force, and the system will not detect or correct for 
the disturbance. Or assume that you calculate the amount of time you need to study 
Input 
or —* 
Reference 
Input 
transducer —^- Controller 
Disturbance 1 
^§H 
Summing 
junction 
Process 
or Plant 
disturbance 2 
t(9\ 
*^9 
Summing 
junction 
Output 
or 
Controlled 
variable 
Error 
Input 
or —»• 
Reference 
Input 
transducer 
Sun 
Aclualin 
- ^ 
iming 
action 
?* 
9 ' 
Controller 
Disturbance 1 
: 
- * & - * 
junction 
Process 
or Plant 
Output 
orSf nsor 
Disturbance 2 
Summing 
junction 
Output 
Controlled 
variable 
(b) 
FIGURE 1.6 
Block diagrams of control systems: a. open-loop system; b. closed-loop system 

1.3 System Configurations 
for an examination that covers three chapters in order to get an A. If the professor 
adds a fourth chapter—a disturbance—you are an open-loop system if you do not 
detect the disturbance and add study time to that previously calculated. The result of 
this oversight would be a lower grade than you expected. 
Closed-Loop (Feedback Control) Systems 
The disadvantages of open-loop systems, namely sensitivity to disturbances and 
inability to correct for these disturbances, may be overcome in closed-loop systems. 
The generic architecture of a closed-loop system is shown in Figure 1.6(6). 
The input transducer converts the form of the input to the form used by the 
controller. An output transducer, or sensor, measures the output response and 
converts it into the form used by the controller. For example, if the controller 
uses electrical signals to operate the valves of a temperature control system, the 
input position and the output temperature are converted to electrical signals. The 
input position can be converted to a voltage by a potentiometer, a variable resistor, 
and the output temperature can be converted to a voltage by a thermistor, a device 
whose electrical resistance changes with temperature. 
The first summing junction algebraically adds the signal from the input to the 
signal from the output, which arrives via the feedback path, the return path from the 
output to the summing junction. In Figure 1.6(6), the output signal is subtracted from 
the input signal. The result is generally called the actuating signal. However, in 
systems where both the input and output transducers have unity gain (that is, the 
transducer amplifies its input by 1), the actuating signal's value is equal to the actual 
difference between the input and the output. Under this condition, the actuating 
signal is called the error. 
The closed-loop system compensates for disturbances by measuring the output 
response, feeding that measurement back through a feedback path, and comparing 
that response to the input at the summing junction. If there is any difference between 
the two responses, the system drives the plant, via the actuating signal, to make a 
correction. If there is no difference, the system does not drive the plant, since the 
plant's response is already the desired response. 
Closed-loop systems, then, have the obvious advantage of greater accuracy 
than open-loop systems. They are less sensitive to noise, disturbances, and changes in 
the environment. Transient response and steady-state error can be controlled more 
conveniently and with greater flexibility in closed-loop systems, often by a simple 
adjustment of gain (amplification) in the loop and sometimes by redesigning the 
controller. We refer to the redesign as compensating the system and to the resulting 
hardware as a compensator. On the other hand, closed-loop systems are more 
complex and expensive than open-loop systems. A standard, open-loop toaster 
serves as an example: It is simple and inexpensive. A closed-loop toaster oven is 
more complex and more expensive since it has to measure both color (through light 
reflectivity) and humidity inside the toaster oven. Thus, the control systems engineer 
must consider the trade-off between the simplicity and low cost of an open-loop 
system and the accuracy and higher cost of a closed-loop system. 
In summary, systems that perform the previously described measurement and 
correction are called closed-loop, or feedback control, systems. Systems that do not 
have this property of measurement and correction are called open-loop systems. 
Computer-Controlled Systems 
In many modern systems, the controller (or compensator) is a digital computer. The 
advantage of using a computer is that many loops can be controlled or compensated 
by the same computer through time sharing. Furthermore, any adjustments of the 

Chapter 1 
Introduction 
compensator parameters required to yield a desired response can be made by 
changes in software rather than hardware. The computer can also perform supervi-
sory functions, such as scheduling many required applications. For example, the 
space shuttle main engine (SSME) controller, which contains two digital computers, 
alone controls numerous engine functions. It monitors engine sensors that provide 
pressures, temperatures, flow rates, turbopump speed, valve positions, and engine 
servo valve actuator positions. The controller further provides closed-loop control of 
thrust and propellant mixture ratio, sensor excitation, valve actuators, spark igniters, 
as well as other functions (Rockwell International, 1984). 
( 1 . 4 
Analysis and Design Objectives 
In Section 1.1 we briefly alluded to some control system performance specifications, 
such as transient response and steady-state error. We now expand upon the topic of 
performance and place it in perspective as we define our analysis and design 
objectives. 
Analysis is the process by which a system's performance is determined. For 
example, we evaluate its transient response and steady-state error to determine if 
they meet the desired specifications. Design is the process by which a system's 
performance is created or changed. For example, if a system's transient response and 
steady-state error are analyzed and found not to meet the specifications, then we 
change parameters or add additional components to meet the specifications. 
A control system is dynamic: It responds to an input by undergoing a transient 
response before reaching a steady-state response that generally resembles the input. 
We have already identified these two responses and cited a position control system (an 
elevator) as an example. In this section, we discuss three major objectives of systems 
analysis and design: producing the desired transient response, reducing steady-state 
error, and achieving stability. We also address some other design concerns, such as cost 
and the sensitivity of system performance to changes in parameters. 
Transient Response 
Transient response is important. In the case of an elevator, a slow transient response 
makes passengers impatient, whereas an excessively rapid response makes them 
uncomfortable. If the elevator oscillates about the arrival 
floor for more than a second, a disconcerting feeling can 
result. Transient response is also important for structural 
reasons: Too fast a transient response could cause perma-
nent physical damage. In a computer, transient response 
contributes to the time required to read from or write to 
the computer's disk storage (see Figure 1.7). Since read-
ing and writing cannot take place until the head stops, the 
speed of the read/write head's movement from one track 
on the disk to another influences the overall speed of the 
computer. 
In this book, we establish quantitative definitions 
for transient response. We then analyze the system for its 
existing transient response. Finally, we adjust parameters 
FIGURE 1.7 Computer hard disk drive, showing disks and 
or design components to yield a desired transient 
read/write head 
response—our first analysis and design objective. 

1.4 Analysis and Design Objectives 
Steady-State Response 
Another analysis and design goal focuses on the steady-state response. As we have 
seen, this response resembles the input and is usually what remains after the transients 
have decayed to zero. For example, this response may be an elevator stopped near the 
fourth floor or the head of a disk drive finally stopped at the correct track. We are 
concerned about the accuracy of the steady-state response. An elevator must be level 
enough with the floor for the passengers to exit, and a read/write head not positioned 
over the commanded track results in computer errors. An antenna tracking a satellite 
must keep the satellite well within its beamwidth in order not to lose track. In this text 
we define steady-state errors quantitatively, analyze a system's steady-state error, and 
then design corrective action to reduce the steady-state error—our second analysis 
and design objective. 
Stability 
Discussion of transient response and steady-state error is moot if the system does not 
have stability. In order to explain stability, we start from the fact that the total response 
of a system is the sum of the natural response and the forced response. When you 
studied linear differential equations, you probably referred to these responses as the 
homogeneous and the particularsolutions, respectively. Natural response describes the 
way the system dissipates or acquires energy. The form or nature of this response is 
dependent only on the system, not the input. On the other hand, the form or nature of 
the forced response is dependent on the input. Thus, for a linear system, we can write 
Total response = Natural response + Forced response 
(1.1) 
For a control system to be useful, the natural response must (1) eventually 
approach zero, thus leaving only the forced response, or (2) oscillate. In some systems, 
however, the natural response grows without bound rather than diminish to zero or 
oscillate. Eventually, the natural response is so much greater than the forced response 
that the system is no longer controlled. This condition, called instability, could lead to 
self-destruction of the physical device if limit stops are not part of the design. For 
example, the elevator would crash through the floor or exit through the ceiling; an 
aircraft would go into an uncontrollable roll; or an antenna commanded to point to a 
target would rotate, line up with the target, but then begin to oscillate about the target 
with growing oscillations and increasing velocity until the motor or amplifiers reached 
their output limits or until the antenna was damaged structurally. A time plot of an 
unstable system would show a transient response that grows without bound and without 
any evidence of a steady-state response. 
Control systems must be designed to be stable. That is, their natural response 
must decay to zero as time approaches infinity, or oscillate. In many systems the 
transient response you see on a time response plot can be directly related to the 
natural response. Thus, if the natural response decays to zero as time approaches 
infinity, the transient response will also die out, leaving only the forced response. If 
the system is stable, the proper transient response and steady-state error character-
istics can be designed. Stability is our third analysis and design objective. 
2 You may be confused by the words transient vs. natural, and steady-state vs. forced. If you look at Figure 
1.2, you can see the transient and steady-state portions of the total response as indicated. The transient 
response is the sum of the natural and forced responses, while the natural response is large. If we plotted 
the natural response by itself, we would get a curve that is different from the transient portion of Figure 1.2. 
The steady-state response of Figure 1.2 is also the sum of the natural and forced responses, but the natural 
response is small. Thus, the transient and steady-state responses are what you actually see on the plot; the 
natural and forced responses are the underlying mathematical components of those responses. 

12 
Chapter 1 
Introduction 
Other Considerations 
The three main objectives of control system analysis and design have already been 
enumerated. However, other important considerations must be taken into account. For 
example, factors affecting hardware selection, such as motor sizing to fulfill power 
requirements and choice of sensors for accuracy, must be considered early in the design. 
Finances are another consideration. Control system designers cannot create 
designs without considering their economic impact. Such considerations as budget 
allocations and competitive pricing must guide the engineer. For example, if your 
product is one of a kind, you may be able to create a design that uses more expensive 
components without appreciably increasing total cost. However, if your design will be 
used for many copies, slight increases in cost per copy can translate into many more 
dollars for your company to propose during contract bidding and to outlay before sales. 
Another consideration is robust design. System parameters considered con-
stant during the design for transient response, steady-state errors, and stability 
change over time when the actual system is built. Thus, the performance of the 
system also changes over time and will not be consistent with your design. Un-
fortunately, the relationship between parameter changes and their effect on per-
formance is not linear. In some cases, even in the same system, changes in parameter 
values can lead to small or large changes in performance, depending on the system's 
nominal operating point and the type of design used. Thus, the engineer wants to 
create a robust design so that the system will not be sensitive to parameter changes. 
We discuss the concept of system sensitivity to parameter changes in Chapters 7 and 
8. This concept, then, can be used to test a design for robustness. 
Introduction to a Case Study 
Now that our objectives are stated, how do we meet them? In this section we will 
look at an example of a feedback control system. The system introduced here will 
be used in subsequent chapters as a running case study to demonstrate the 
objectives of those chapters. A colored background like this will identify the 
case study section at the end of each chapter. Section 1.5, which follows this first 
case study, explores the design process that will help us build our system. 
Antenna Azimuth: An Introduction to Position Control Systems 
A position control system converts a position input command to a position output 
response. Position control systems find widespread applications in antennas, robot 
arms, and computer disk drives. The radio telescope antenna in Figure 1.8 is one 
example of a system that uses position control systems. In this section, we will look in 
detail at an antenna azimuth position control system that could be used to position a 
radio telescope antenna. We will see how the system works and how we can effect 
changes in its performance. The discussion here will be on a qualitative level, with the 
objective of getting an intuitive feeling for the systems with which we will be dealing. 
An antenna azimuth position control system is shown in Figure 1.9(a), with a 
more detailed layout and schematic in Figures 1.9(6) and 1.9(c), respectively. 
Figure 1.9(d) shows a functional block diagram of the system. The functions are 
shown above the blocks, and the required hardware is indicated inside the blocks. 
Parts of Figure 1.9 are repeated on the front endpapers for future reference. 
FIGURE 1.8 The search for 
extraterrestrial life is being 
carried out with radio antennas 
like the one pictured here. A 
radio antenna is an example of 
a system with position 
controls. 

Case Study 
The purpose of this system is to have the azimuth angle output of the antenna, 
90(t), follow the input angle of the potentiometer, 0,-(f). Let us look at Figure 1.9(d) 
and describe how this system works. The input command is an angular displace-
ment. The potentiometer converts the angular displacement into a voltage. 
Antenna 
Desired 
azimuth ang 
input 
(a) 
Potentiometer 
Antenna 
Differential amplifier 
and power amplifier 
Potentiometer 
Potentiometer 
Amplifiers 
Motor 
Differential 
and 
power 
amplifier 
K 
Armature 
resistance 
Armature 
Fixed field 
Gear 
Gear 
0,,(0 
Potentiometer-. 
Inertia 
Viscous 
damping 
Gear 
(0 
FIGURE 1.9 Antenna azimuth 
position control system: 
a. system concept; b. detailed 
layout; c. schematic; 
{figure continues) 

14 
Chapter 1 
Introduction 
FIGURE 1.9 (Continued) 
d. functional block diagram 
Input 
transducer 
Angular 
input 
Potentiometer 
Voltage 
Error 
proportional Summing 
or 
t 0 
junction Actuating 
input 
+ ,<~x 
signal 
Voltage 
proportional 
to 
output 
Sensor 
(output transducer) 
Potentiometer 
Similarly, the output angular displacement is converted to a voltage by the potentiome-
ter in the feedback path. The signal and power amplifiers boost the difference between 
the input and output voltages. This amplified actuating signal drives the plant. 
The system normally operates to drive the error to zero. When the input and output 
match, the error will be zero, and the motor will not turn. Thus, the motor is driven only 
when the output and the input do not match. The greater the difference between the input 
and the output, the larger the motor input voltage, and the faster the motor will turn. 
If we increase the gain of the signal amplifier, will there be an increase in the 
steady-state value of the output? If the gain is increased, then for a given actuating 
signal, the motor will be driven harder. However, the motor will still stop when the 
actuating signal reaches zero, that is, when the output matches the input. The 
difference in the response, however, will be in the transients. Since the motor is 
driven harder, it turns faster toward its final position. Also, because of the increased 
speed, increased momentum could cause the motor to overshoot the final value and 
be forced by the system to return to the commanded position. Thus, the possibility 
exists for a transient response that consists of damped oscillations (that is, a sinusoidal 
response whose amplitude diminishes with time) about the steady-state value if the 
gain is high. The responses for low gain and high gain are shown in Figure 1.10. 
FIGURE 1.10 Response of a 
position control system, 
showing effect of high and low 
controller gain on the output 
response 
, Output with 
high gain 
Time 

1.5 The Design Process 
We have discussed the transient response of the position control system. Let us 
now direct our attention to the steady-state position to see how closely the output 
matches the input after the transients disappear. 
We define steady-state error as the difference between the input and the output 
after the transients have effectively disappeared. The definition holds equally well 
for step, ramp, and other types of inputs. Typically, the steady-state error decreases 
with an increase in gain and increases with a decrease in gain. Figure 1.10 shows 
zero error in the steady-state response; that is, after the transients have disap-
peared, the output position equals the commanded input position. In some systems, 
the steady-state error will not be zero; for these systems, a simple gain adjustment 
to regulate the transient response is either not effective or leads to a trade-off 
between the desired transient response and the desired steady-state accuracy. 
To solve this problem, a controller with a dynamic response, such as an electrical 
filter, is used along with an amplifier. With this type of controller, it is possible to 
design both the required transient response and the required steady-state accuracy 
without the trade-off required by a simple setting of gain. However, the controller 
is now more complex. The filter in this case is called a compensator. Many systems 
also use dynamic elements in the feedback path along with the output transducer to 
improve system performance. 
In summary, then, our design objectives and the system's performance revolve 
around the transient response, the steady-state error, and stability. Gain adjust-
ments can affect performance and sometimes lead to trade-offs between the 
performance criteria. Compensators can often be designed to achieve performance 
specifications without the need for trade-offs. Now that we have stated our 
objectives and some of the methods available to meet those objectives, we describe 
the orderly progression that leads us to the final system design. 
£ l . 5 
The Design Process 
In this section, we establish an orderly sequence for the design of feedback control 
systems that will be followed as we progress through the rest of the book. Figure 1.11 
shows the described process as well as the chapters in which the steps are discussed. 
The antenna azimuth position control system discussed in the last section is 
representative of control systems that must be analyzed and designed. Inherent in 
Step 
Step 2 
Step 3 
Step 4 
Step 5 
Determine 
a physical 
system and 
specifications 
from the 
requirements. 
Draw a 
functional 
block 
diagram. 
Transform 
the physical 
system into 
a schematic. 
Analog: 
Chapter 1 
Digital: 
FIGURE 1.11 
The control system design process 
Use the 
schematic 
to obtain a 
block diagram, 
signal-flow 
diagram, 
or state-space 
representation. 
Chapters 2,3 
Chapter 13 
If multiple 
blocks, reduce 
the block 
diagram to a 
single block or 
closed-loop 
system. 
Chapter 5 
Chapter 13 
Step 6 
Analyze, 
design, and test 
to see that 
requirements 
and 
specifications 
are met. 
Chapters 4, 6-12 
Chapter 13 

Chapter 1 
Introduction 
Figure 1.11 is feedback and communication during each phase. For example, if 
testing (Step 6) shows that requirements have not been met, the system must be 
redesigned and retested. Sometimes requirements are conflicting and the design 
cannot be attained. In these cases, the requirements have to be respecified and the 
design process repeated. Let us now elaborate on each block of Figure 1.11. 
Step 1: Transform Requirements Into a Physical System 
We begin by transforming the requirements into a physical system. For example, in 
the antenna azimuth position control system, the requirements would state the 
desire to position the antenna from a remote location and describe such features as 
weight and physical dimensions. Using the requirements, design specifications, such 
as desired transient response and steady-state accuracy, are determined. Perhaps an 
overall concept, such as Figure 1.9(a), would result. 
Step 2: Draw a Functional Block Diagram 
The designer now translates a qualitative description of the system into a functional 
block diagram that describes the component parts of the system (that is, function and/or 
hardware) and shows their interconnection. Figure 1.9(d) is an example of a functional 
block diagram for the antenna azimuth position control system. It indicates functions 
such as input transducer and controller, as well as possible hardware descriptions such 
as amplifiers and motors. At this point the designer may produce a detailed layout of 
the system, such as that shown in Figure 1.9(b), from which the next phase of the 
analysis and design sequence, developing a schematic diagram, can be launched. 
Step 3: Create a Schematic 
As we have seen, position control systems consist of electrical, mechanical, and 
electromechanical components. After producing the description of a physical 
system, the control systems engineer transforms the physical system into a schematic 
diagram. The control system designer can begin with the physical description, as 
contained in Figure 1.9(A), to derive a schematic. The engineer must make approxi-
mations about the system and neglect certain phenomena, or else the schematic will 
be unwieldy, making it difficult to extract a useful mathematical model during the 
next phase of the analysis and design sequence. The designer starts with a simple 
schematic representation and, at subsequent phases of the analysis and design 
sequence, checks the assumptions made about the physical system through analysis 
and computer simulation. If the schematic is too simple and does not adequately 
account for observed behavior, the control systems engineer adds phenomena to the 
schematic that were previously assumed negligible. A schematic diagram for the 
antenna azimuth position control system is shown in Figure 1.9(c). 
When we draw the potentiometers, we make our first simplifying assumption 
by neglecting their friction or inertia. These mechanical characteristics yield a 
dynamic, rather than an instantaneous, response in the output voltage. We assume 
that these mechanical effects are negligible and that the voltage across a potenti-
ometer changes instantaneously as the potentiometer shaft turns. 
A differential amplifier and a power amplifier are used as the controller to 
yield gain and power amplification, respectively, to drive the motor. Again, we 
assume that the dynamics of the amplifiers are rapid compared to the response time 
of the motor; thus, we model them as a pure gain, K. 
A dc motor and equivalent load produce the output angular displacement. The 
speed of the motor is proportional to the voltage applied to the motor's armature 
circuit. Both inductance and resistance are part of the armature circuit. In showing 

1.5 The Design Process 
just the armature resistance in Figure 1.9(c), we assume the effect of the armature 
inductance is negligible for a dc motor. 
The designer makes further assumptions about the load. The load consists of a 
rotating mass and bearing friction. Thus, the model consists of inertia and viscous 
damping whose resistive torque increases with speed, as in an automobile's shock 
absorber or a screen door damper. 
The decisions made in developing the schematic stem from knowledge of the 
physical system, the physical laws governing the system's behavior, and practical 
experience. These decisions are not easy; however, as you acquire more design 
experience, you will gain the insight required for this difficult task. 
Step 4: Develop a Mathematical Model (Block Diagram) 
Once the schematic is drawn, the designer uses physical laws, such as Kirchhoff's 
laws for electrical networks and Newton's law for mechanical systems, along with 
simplifying assumptions, to model the system mathematically. These laws are 
Kirchhoff's voltage law 
The sum of voltages around a closed path equals zero. 
Kirchhoffs current law 
The sum of electric currents flowing from a node equals zero. 
Newton's laws 
The sum of forces on a body equals zero;3 the sum of moments on 
a body equals zero. 
Kirchhoffs and Newton's laws lead to mathematical models that describe the 
relationship between the input and output of dynamic systems. One such model 
is the linear, time-invariant differential equation, Eq. (1.2): 
dmc{t) 
. 
dm-lc{t) 
-a 
.. 
L dmr{t) 
, 
dm-lr{t) 
, 
.. 
(1.2)4 
Many systems can be approximately described by this equation, which relates the 
output, c(t), to the input, r(t), by way of the system parameters, a, and bj. We assume 
the reader is familiar with differential equations. Problems and a bibliography are 
provided at the end of the chapter for you to review this subject. 
Simplifying assumptions made in the process of obtaining a mathematical 
model usually leads to a low-order form of Eq. (1.2). Without the assumptions the 
system model could be of high order or described with nonlinear, time-varying, or 
partial differential equations. These equations complicate the design process and 
reduce the designer's insight. Of course, all assumptions must be checked and all 
simplifications justified through analysis or testing. If the assumptions for simplifi-
cation cannot be justified, then the model cannot be simplified. We examine some of 
these simplifying assumptions in Chapter 2. 
In addition to the differential equation, the transfer function is another way of 
mathematically modeling a system. The model is derived from the linear, time-invariant 
differential equation using what we call the Laplace transform. Although the transfer 
3 Alternately, £i: o r c e s = Ma. In this text the force, Ma, will be brought to the left-hand side of the 
equation to yield £ forces = 0 (D'Alembert's principle). We can then have a consistent analogy between 
force and voltage, and Kirchhoff's and Newton's laws (that is, ^forces = 0; ^voltages = 0). 
4The right-hand side of Eq. (1.2) indicates differentiation of the input, r(t). In physical systems, 
differentiation of the input introduces noise. In Chapters 3 and 5 we show implementations and 
interpretations of Eq. (1.2) that do not require differentiation of the input. 

Chapter 1 
Introduction 
function can be used only for linear systems, it yields more intuitive information than the 
differential equation. We will be able to change system parameters and rapidly sense the 
effect of these changes on the system response. The transfer function is also useful in 
modeling the interconnection of subsystems by forming a block diagram similar to Figure 
1.9(d) but with a mathematical function inside each block. 
Still another model is the state-space representation. One advantage of state-
space methods is that they can also be used for systems that cannot be described by 
linear differential equations. Further, state-space methods are used to model systems 
for simulation on the digital computer. Basically, this representation turns an nth-
order differential equation into n simultaneous first-order differential equations. Let 
this description suffice for now; we describe this approach in more detail in Chapter 3. 
Finally, we should mention that to produce the mathematical model for a system, 
we require knowledge of the parameter values, such as equivalent resistance, induc-
tance, mass, and damping, which is often not easy to obtain. Analysis, measurements, 
or specifications from vendors are sources that the control systems engineer may use 
to obtain the parameters. 
Step 5: Reduce the Block Diagram 
Subsystem models are interconnected to form block diagrams of larger systems, as in 
Figure 1.9(d), where each block has a mathematical description. Notice that many 
signals, such as proportional voltages and error, are internal to the system. There are 
also two signals—angular input and angular output—that are external to the system. 
In order to evaluate system response in this example, we need to reduce this large 
system's block diagram to a single block with a mathematical description that 
represents the system from its input to its output, as shown in Figure 1.12. Once the 
block diagram is reduced, we are ready to analyze and design the system. 
Step 6: Analyze and Design 
The next phase of the process, following block diagram reduction, is analysis and 
design. If you are interested only in the performance of an individual subsystem, you 
can skip the block diagram reduction and move immediately into analysis and 
design. In this phase, the engineer analyzes the system to see if the response 
specifications and performance requirements can be met by simple adjustments 
of system parameters. If specifications cannot be met, the designer then designs 
additional hardware in order to effect a desired performance. 
Test input signals are used, both analytically and during testing, to verify the design. 
It is neither necessarily practical nor illuminating to choose complicated input signals to 
analyze a system's performance. Thus, the engineer usually selects standard test inputs. 
These inputs are impulses, steps, ramps, parabolas, and sinusoids, as shown in Table 1.1. 
An impulse is infinite at t = 0 and zero elsewhere. The area under the unit impulse 
is 1. An approximation of this type of waveform is used to place initial energy into a 
system so that the response due to that initial energy is only the transient response of a 
system. From this response the designer can derive a mathematical model of the system. 
A step input represents a constant command, such as position, velocity, or 
acceleration. Typically, the step input command is of the same form as the output. For 
example, if the system's output is position, as it is for the antenna azimuth position 
control system, the step input represents a desired position, and the output represents 
the actual position. If the system's output is velocity, as is the spindle speed for a video 
disc player, the step input represents a constant desired speed, and the output 
represents the actual speed. The designer uses step inputs because both the transient 
response and the steady-state response are clearly visible and can be evaluated. 

1.5 The Design Process 
TABLE 1.1 
Test waveforms used in control systems 
Input 
Function 
Description 
Sketch 
Use 
Impulse 
S(t) 
Step 
«(/) 
Ramp 
tu(t) 
&{t) = 00 f o r O - < f < 0 + 
fit) 
= 0 elsewhere 
/»0+ 
/ 
S(t)dt=l 
"«(/) 
Jo-
Transient response 
Modeling 
«(0 = lforf >0 
= 0for;<0 
m 
Transient response 
Steady-state error 
ft*(f)=fforf>0 fit) 
= 0 elsewhere 
Steady-state error 
Parabola 
1 7 .„ 
1 , , . 
I *, 
< _ 
./(/) 
-?u{t) 
^ru{t)=-?lort>b 
= 0 elsewhere 
Sinusoid 
sin atf 
Steady-state error 
**t 
Transient response 
Modeling 
Steady-state error 
The ramp input represents a linearly increasing command. For example, if the 
system's output is position, the input ramp represents a linearly increasing position, 
such as that found when tracking a satellite moving across the sky at constant speed. 
If the system's output is velocity, the input ramp represents a linearly increasing 
velocity. The response to an input ramp test signal yields additional information 
about the steady-state error. The previous discussion can be extended to parabolic 
inputs, which are also used to evaluate a system's steady-state error. 
Sinusoidal inputs can also be used to test a physical system to arrive at a 
mathematical model. We discuss the use of this waveform in detail in Chapters 10 
and 11. 
We conclude that one of the basic analysis and design requirements is to 
evaluate the time response of a system for a given input. Throughout the book you 
will learn numerous methods for accomplishing this goal. 
The control systems engineer must take into consideration other characteristics 
about feedback control systems. For example, control system behavior is altered by 
fluctuations in component values or system parameters. These variations can be 

20 
Chapter 1 
Introduction 
caused by temperature, pressure, or other environmental changes. Systems must be 
built so that expected fluctuations do not degrade performance beyond specified 
bounds. A sensitivity analysis can yield the percentage of change in a specification as a 
function of a change in a system parameter. One of the designer's goals, then, is to build 
a system with minimum sensitivity over an expected range of environmental changes. 
In this section we looked at some control systems analysis and design considera-
tions. We saw that the designer is concerned about transient response, steady-state error, 
stability, and sensitivity. The text pointed out that although the basis of evaluating system 
performance is the differential equation, other methods, such as transfer functions and 
state space, will be used. The advantages of these new techniques over differential 
equations will become apparent as we discuss them in later chapters. 
( 1 . 6 
Computer-Aided Design 
Now that we have discussed the analysis and design sequence, let us discuss the use of 
the computer as a computational tool in this sequence. The computer plays an 
important role in the design of modern control systems. In the past, control system 
design was labor intensive. Many of the tools we use today were implemented 
through hand calculations or, at best, using plastic graphical aid tools. The process 
was slow, and the results not always accurate. Large mainframe computers were then 
used to simulate the designs. 
Today we are fortunate to have computers and software that remove the 
drudgery from the task. At our own desktop computers, we can perform analysis, 
design, and simulation with one program. With the ability to simulate a design 
rapidly, we can easily make changes and immediately test a new design. We can play 
what-if games and try alternate solutions to see if they yield better results, such as 
reduced sensitivity to parameter changes. We can include nonlinearities and other 
effects and test our models for accuracy. 
MATLAB 
The computer is an integral part of modern control system design, and many computa-
tional tools are available for your use. In this book we use MATLAB and the MATLAB 
Control System Toolbox, which expands MATLAB to include control system-specific 
commands. In addition, presented are several MATLAB enhancements that give added 
functionality to MATLAB and the Control Systems Toolbox. Included are (1) Simulink, 
which uses a graphical user interface (GUI); (2) the LTI Viewer, which permits 
measurements to be made directly from time and frequency response curves; (3) the 
SISO Design Tool, a convenient and intuitive analysis and design tool; and (4) the 
Symbolic Math Toolbox, which saves labor when making symbolic calculations required 
in control system analysis and design. Some of these enhancements may require 
additional software available from The Math Works, Inc. 
MATLAB is presented as an alternate method of solving control system 
problems. You are encouraged to solve problems first by hand and then by 
MATLAB so that insight is not lost through mechanized use of computer programs. 
To this end, many examples throughout the book are solved by hand, followed by 
suggested use of MATLAB. 
As an enticement to begin using MATLAB, simple program statements that 
you can try are suggested throughout the chapters at appropriate locations. Through-
out the book, various icons appear in the margin to identify MATLAB references 
that direct you to the proper program in the proper appendix and tell you what you 

1.7 The Control Systems Engineer 
21 
will learn. Selected end-of-chapter problems and Case Study Challenges to be solved 
using MATLAB have also been marked with appropriate icons. The following list 
itemizes the specific components of MATLAB used in this book, the icon used to 
identify each, and the appendix in which a description can be found: 
MATLAB/Control System Toolbox tutorials and code are found in 
Appendix B and identified in the text with the MATLAB icon shown 
in the margin. 
Simulink tutorials and diagrams are found in Appendix C and 
identified in the text with the Simulink icon shown in the margin. 
MATLAB GUI tools, tutorials, and examples are in Appendix E at 
www.wiley.com/college/nise and identified in the text with the GUI 
Tool icon shown in the margin. These tools consist of the LTI 
Viewer and the SISO Design Tool. 
Symbolic Math Toolbox tutorials and code are found in Appendix F at 
www.wiley.com/college/nise and identified in the text with the 
Symbolic Math icon shown in the margin. 
MATLAB code itself is not platform specific. The same code runs on PCs and 
workstations that support MATLAB. Although there are differences in installing 
and managing MATLAB files, we do not address them in this book. Also, there are 
many more commands in MATLAB and the MATLAB toolboxes than are covered 
in the appendixes. Please explore the bibliographies at the end of the applicable 
appendixes to find out more about MATLAB file management and MATLAB 
instructions not covered in this textbook. 
LabVIEW 
Lab VIEW is a programming environment presented as an alternative to MATLAB. 
This graphical alternative produces front panels of virtual instruments on your 
computer that are pictorial reproductions of hardware instruments, such as wave-
form generators or oscilloscopes. Underlying the front panels are block diagrams. 
The blocks contain underlying code for the controls and indicators on the front 
panel. Thus, a knowledge of coding is not required. Also, parameters can be easily 
passed or viewed from the front panel. 
A LabVIEW tutorial is in Appendix D and all LabVIEW material is 
identified with the LabVIEW icon shown in the margin. 
You are encouraged to use computational aids throughout this book. Those not 
using MATLAB or LabVIEW should consult Appendix H at www.wiley.com/ 
college/nise for a discussion of other alternatives. Now that we have introduced 
control systems to you and established a need for computational aids to perform 
analysis and design, we will conclude with a discussion of your career as a control 
systems engineer and look at the opportunities and challenges that await you. 
MATLAB 
Simulink 
Gui Tool 
Symbolic Math 
LabVIEW 
^ 1 . 7 
The Control Systems Engineer 
Control systems engineering is an exciting field in which to apply your engineer-
ing talents, because it cuts across numerous disciplines and numerous functions 
within those disciplines. The control engineer can be found at the top level of 
large projects, engaged at the conceptual phase in determining or implementing 

Chapter 1 
Introduction 
overall system requirements. These requirements include total system perform-
ance specifications, subsystem functions, and the interconnection of these func-
tions, including interface requirements, hardware and software design, and test 
plans and procedures. 
Many engineers are engaged in only one area, such as circuit design or software 
development. However, as a control systems engineer, you may find yourself 
working in a broad arena and interacting with people from numerous branches 
of engineering and the sciences. For example, if you are working on a biological 
system, you will need to interact with colleagues in the biological sciences, mechan-
ical engineering, electrical engineering, and computer engineering, not to mention 
mathematics and physics. You will be working with these engineers at all levels of 
project development from concept through design and, finally, testing. At the design 
level, the control systems engineer can be performing hardware selection, design, 
and interface, including total subsystem design to meet specified requirements. The 
control engineer can be working with sensors and motors as well as electronic, 
pneumatic, and hydraulic circuits. 
The space shuttle provides another example of the diversity required of the 
systems engineer. In the previous section, we showed that the space shuttle's control 
systems cut across many branches of science: orbital mechanics and propulsion, 
aerodynamics, electrical engineering, and mechanical engineering. Whether or not 
you work in the space program, as a control systems engineer you will apply broad-
based knowledge to the solution of engineering control problems. You will have the 
opportunity to expand your engineering horizons beyond your university curriculum. 
You are now aware of future opportunities. But for now, what advantages does 
this course offer to a student of control systems (other than the fact that you need it 
to graduate)? Engineering curricula tend to emphasize bottom-up design. That is, 
you start from the components, develop circuits, and then assemble a product. In top-
down design, a high-level picture of the requirements is first formulated; then the 
functions and hardware required to implement the system are determined. You will 
be able to take a top-down systems approach as a result of this course. 
A major reason for not teaching top-down design throughout the curriculum is 
the high level of mathematics initially required for the systems approach. For 
example, control systems theory, which requires differential equations, could not 
be taught as a lower-division course. However, while progressing through bottom-up 
design courses, it is difficult to see how such design fits logically into the large picture 
of the product development cycle. 
After completing this control systems course, you will be able to stand back and 
see how your previous studies fit into the large picture. Your amplifier course or 
vibrations course will take on new meaning as you begin to see the role design work 
plays as part of product development. For example, as engineers, we want to describe 
the physical world mathematically so that we can create systems that will benefit 
humanity. You will find that you have indeed acquired, through your previous courses, 
the ability to model physical systems mathematically, although at the time you might 
not have understood where in the product development cycle the modeling fits. This 
course will clarify the analysis and design procedures and show you how the 
knowledge you acquired fits into the total picture of system design. 
Understanding control systems enables students from all branches of engineer-
ing to speak a common language and develop an appreciation and working 
knowledge of the other branches. You will find that there really is not much 
difference among the branches of engineering as far as the goals and applications 
are concerned. As you study control systems, you will see this commonality. 

Review Questions 
£ Summary^ 
Control systems contribute to every aspect of modern society. In our homes we find 
them in everything from toasters to heating systems to VCRs. Control systems also 
have widespread applications in science and industry, from steering ships and planes 
to guiding missiles and the space shuttle. Control systems also exist naturally; our 
bodies contain numerous control systems. Even economic and psychological system 
representations have been proposed based on control system theory. Control 
systems are used where power gain, remote control, or conversion of the form of 
the input is required. 
A control system has an input, a process, and an output. Control systems can be 
open loop or closed loop. Open-loop systems do not monitor or correct the output for 
disturbances; however, they are simpler and less expensive than closed-loop systems. 
Closed-loop systems monitor the output and compare it to the input. If an error is 
detected, the system corrects the output and hence corrects the effects of disturbances. 
Control systems analysis and design focuses on three primary objectives: 
1. Producing the desired transient response 
2. Reducing steady-state errors 
3. Achieving stability 
A system must be stable in order to produce the proper transient and steady-
state response. Transient response is important because it affects the speed of the 
system and influences human patience and comfort, not to mention mechanical 
stress. Steady-state response determines the accuracy of the control system; it 
governs how closely the output matches the desired response. 
The design of a control system follows these steps: 
Step 1 Determine a physical system and specifications from requirements. 
Step 2 Draw a functional block diagram. 
Step 3 Represent the physical system as a schematic. 
Step 4 Use the schematic to obtain a mathematical model, such as a block diagram. 
Step 5 Reduce the block diagram. 
Step 6 Analyze and design the system to meet specified requirements and specifica-
tions that include stability, transient response, and steady-state performance. 
In the next chapter we continue through the analysis and design sequence and learn 
how to use the schematic to obtain a mathematical model. 
^ Review Questions ^ 
1. Name three applications for feedback control systems. 
2. Name three reasons for using feedback control systems and at least one reason 
for not using them. 
3. Give three examples of open-loop systems. 
4. Functionally, how do closed-loop systems differ from open-loop systems? 
5. State one condition under which the error signal of a feedback control system 
would not be the difference between the input and the output. 

6. If the error signal is not the difference between input and output, by what 
general name can we describe the error signal? 
7. Name two advantages of having a computer in the loop. 
8. Name the three major design criteria for control systems. 
9. Name the two parts of a system's response. 
10. Physically, what happens to a system that is unstable? 
11. Instability is attributable to what part of the total response? 
12. Describe a typical control system analysis task. 
13. Describe a typical control system design task. 
14. Adjustments of the forward path gain can cause changes in the transient 
response. True or false? 
15. Name three approaches to the mathematical modeling of control systems. 
16. Briefly describe each of your answers to Question 15. 
Problems 
24 
Chapter 1 
Introduction 
1. A variable resistor, called a potentiome- 
wileyPLus5 
ter, is shown in Figure Pl.l. The resist- 
aViUK 
ance is varied by moving a wiper arm 
control solutions 
along a fixed resistance. The resistance 
from A to C is fixed, but the resistance from B to C 
varies with the position of the wiper arm. If it takes 
10 turns to move the wiper arm from A to C, draw a 
block diagram of the potentiometer showing the 
input variable, the output variable, and (inside the 
block) the gain, which is a constant and is the amount 
by which the input is multiplied to obtain the output. 
[Section 1.4: Introduction to a Case Study] 
Input angle. 6,(t) + 5 0 volts 
- 50 volts 
Output 
voltage, i'„(/) 
I 
FIGURE P1.1 
Potentiometer 
2. A temperature control system operates by sensing 
the difference between the thermostat setting and 
sThe WileyPLUS icon identifies interactive worked examples and 
problems. These problems, developed by JustAsk, are worked in detail 
and offer explanations of every facet of the solution. The identified 
examples and problems can be accessed at www.wiley.com/college/ 
nise. 
the actual temperature and then opening a fuel valve 
an amount proportional to this difference. Draw a 
functional closed-loop block diagram similar to Figure 
1.9(d) identifying the input and output transducers, 
the controller, and the plant. Further, identify the 
input and output signals of all subsystems previously 
described. [Section 1.4: Introduction to a Case Study] 
3. An aircraft's attitude varies in roll, pitch, and yaw as 
defined in Figure P1.2. Draw a functional block dia-
gram for a closed-loop system that stabilizes the roll 
as follows: The system measures the actual roll angle 
with a gyro and compares the actual roll angle with 
the desired roll angle. The ailerons respond to the roll-
angle error by undergoing an angular deflection. The 
aircraft responds to this angular deflection, producing 
a roll angle rate. Identify the input and output trans-
ducers, the controller, and the plant. Further, identify 
the nature of each signal. [Section 1.4: Introduction to 
a Case Study] 
FIGURE P1.2 Aircraft attitude defined 

Problems 
25 
4. Many processes operate on rolled material that moves 
from a supply reel to a take-up reel. Typically, these 
systems, called winders, control the material so that it 
travels at a constant velocity. Besides velocity, com-
plex winders also control tension, compensate for roll 
inertia while accelerating or decelerating, and regulate 
acceleration due to sudden changes. A winder is 
shown in Figure PI.3. The force transducer measures 
tension; the winder pulls against the nip rolls, which 
provide an opposing force; and the bridle provides 
slip. In order to compensate for changes in speed, the 
material is looped around a dancer. The loop prevents 
rapid changes from causing excessive slack or damag-
ing the material. If the dancer position is sensed by a 
potentiometer or other device, speed variations due to 
buildup on the take-up reel or other causes can be 
controlled by comparing the potentiometer voltage to 
the commanded speed. The system then corrects the 
speed and resets the dancer to the desired position 
(Ayers, 1988). Draw a functional block diagram for the 
speed control system, showing each component and 
signal. [Section 1.4: Introduction to a Case Study] 
Nip rolls 
-Q _ o 
v. 
J 
Force 
^ — y transducer 
Center-driven 
unwinder 
Dancer • 
FIGURE PI.3 
Winder 
Surface winder 
Dancer-position 
feedback 
5. In a nuclear power generating plant, heat from a 
reactor is used to generate steam for turbines. The 
rate of the fission reaction determines the amount of 
heat generated, and this rate is controlled by rods 
inserted into the radioactive core. The rods regulate 
the flow of neutrons. If the rods are lowered into the 
core, the rate of fission will diminish; if the rods are 
raised, the fission rate will increase. By automatically 
Amplifier. 
motor, and 
drive system 
Rod 
Radioactive core 
Neutron 
detector 
FIGURE P1A Control of a nuclear reactor 
controlling the position of the rods, the amount of heat 
generated by the reactor can be regulated. Draw a 
functional block diagram for the nuclear reactor con-
trol system shown in Figure PI .4. Show all blocks and 
signals. [Section 1.4: Introduction to a Case Study] 
6. A university wants to establish a control system 
model that represents the student population as 
an output, with the desired student population as 
an input. The administration determines the rate of 
admissions by comparing the current and desired 
student populations. The admissions office then uses 
this rate to admit students. Draw a functional block 
diagram showing the administration and the admis-
sions office as blocks of the system. Also show the 
following signals: the desired student population, 
the actual student population, the desired student 
rate as determined by the administration, the actual 
student rate as generated by the admissions office, 
the dropout rate, and the net rate of influx. [Section 
1.4: Introduction to a Case Study] 
7. We can build a control system that will 
wileypms 
automatically adjust a motorcycle's ra- 
ftVi209 
dio volume as the noise generated by 
Control solutions 
the motorcycle changes. The noise gen-
erated by the motorcycle increases with speed. As 
the noise increases, the system increases the volume 
of the radio. Assume that the amount of noise can 
be represented by a voltage generated by the 
speedometer cable, and the volume of the radio 
is controlled by a dc voltage (Hogan, 1988). If the 
dc voltage represents the desired volume dis-
turbed by the motorcycle noise, draw the func-
tional block diagram of the automatic volume 
control system, showing the input transducer, 
the volume control circuit, and the speed trans-
ducer as blocks. Also show the following signals: 
the desired volume as an input, the actual volume 
as an output, and voltages representing speed, 
desired volume, and actual volume. [Section 1.4: 
Introduction to a Case Study] 
8. Your bathtub at home is a control system that keeps 
the water level constant. A constant flow from the 
tap yields a constant water level, because the flow 
rate through the drain increases as the water level 
increases, and decreases as the water level de-
creases. After equilibrium has been reached, the 
level can be controlled by controlling the input flow 
rate. A low input flow rate yields a lower level, while 
a higher input flow rate yields a higher level. [Sec-
tion 1.4: Introduction to a Case Study] 

26 
Chapter 1 
Introduction 
a. Sketch a control system that uses this principle to 
precisely control the fluid level in a tank. Show 
the intake and drain valves, the tank, any sensors 
and transducers, and the interconnection of all 
components. 
b. Draw a functional block diagram of the system, 
identifying the input and output signals of each 
block. 
9. A dynamometer is a device used to measure torque 
and speed and to vary the load on rotating devices. 
The dynamometer operates as follows to control the 
amount of torque: A hydraulic actuator attached to 
the axle presses a tire against a rotating flywheel. 
The greater the displacement of the actuator, the 
more force that is applied to the rotating flywheel. A 
strain gage load cell senses the force. The displace-
ment of the actuator is controlled by an electrically 
operated valve whose displacement regulates fluid 
flowing into the actuator (D'Souza, 1988). Draw a 
functional block diagram of a closed-loop system 
that uses the described dynamometer to regulate 
the force against the tire during testing. Show all 
signals and systems. Include amplifiers that power 
the valve, the valve, the actuator and load, and the 
tire. [Section 1.4: Introduction to a Case Study] 
10. During amedical operation an anesthe- 
wileyPLUs 
siologist controls the depth of un- 
4 V J J ^ 
consciousness 
by 
controlling 
the 
control solutions 
concentration of isoflurane in a vapor-
izedmixture withoxygenandnitrousoxide. The depth 
of anesthesia is measured by the patient's blood 
pressure. The anesthesiologist also regulates ventila-
tion, fluid balance, and the administration of other 
drugs. In order to free the anesthesiologist to devote 
more time to the latter tasks, and in the interest of the 
patient's safety, we wish to automate the depth of 
anesthesia by automating the control of isoflurane 
concentration. Draw a functional block diagram of 
the system showing pertinent signals and subsystems 
(Meier, 1992). [Section 1.4: Introduction to a Case 
Study] 
11. The vertical position, x(t), of the grinding wheel 
shown in Figure PI.5 is controlled by a closed-loop 
system. The input to the system is the desired 
depth of grind, and the output is the actual depth 
of grind. The difference between the desired depth 
and the actual depth drives the motor, resulting in 
a force applied to the work. This force results in a 
feed velocity for the grinding wheel 
(Jenkins, 
1997). 
Draw a closed-loop functional 
block 
diagram for the grinding process, showing the 
input, output, force, and grinder feed rate. [Section 
1.4: Introduction to a Case Study] 
y-axis 
servo motor 
\ 
, servo motor 
• Force transducer 
Cupped 
grinding 
\ 
wheel 
Workpiece' 
Q\ > 
Eddy 
J 
Shaft 
current probe 
i 
encoder 
z-axis 
servo motor 
FIGURE P1.5 
Grinder system (Reprinted with 
permission of ASME.) 
12. A high-speed proportional solenoid valve is shown 
in Figure PI.6. A voltage proportional to the desired 
position of the spool is applied to the coil. The 
resulting magnetic field produced by the current 
in the coil causes the armature to move. A push pin 
connected to the armature moves the spool. A 
linear voltage differential transformer (LVDT) 
that outputs a voltage proportional to displacement 
senses the spool's position. This voltage can be used 
in a feedback path to implement closed-loop oper-
ation (Vaughan, 1996). Draw a functional block 
diagram of the valve, showing input and output 
positions, coil voltage, coil current, and spool force. 
[Section 1.4: Introduction to a Case Study] 
Return 
spring 
Sleeve 
Spool 
Coil 
Pressure tube 
Bearings Armature 
LVDT 
FIGUREP1.6 
High-speed proportional solenoid valve 
(Reprinted with permission of ASME.) 
13. The human eye has a biological control system that 
varies the pupil diameter to maintain constant light 

intensity to the retina. As the light intensity in-
creases, the optical nerve sends a signal to the brain, 
which commands internal eye muscles to decrease 
the pupil's eye diameter. When the light intensity 
decreases, the pupil diameter increases. 
a. Draw a functional block diagram of the light-pupil 
system indicating the input, output, and intermedi-
ate signals; the sensor; the controller; and the 
actuator. [Section 1.4: Introduction to a Case Study] 
b. Under normal conditions the incident light 
will be larger than the pupil, as shown in 
Figure PI.7(a). If the incident light is smaller 
than the diameter of the pupil as shown in 
Figure PI.7(b), the feedback path is broken 
(Bechhoefer, 2005). Modify your block diagram 
from Part a. to show where the loop is broken. 
What will happen if the narrow beam of light 
varies in intensity, say in a sinusoidal fashion? 
c. It has been found (Bechhoefer, 2005) that it takes 
the pupil about 300 milliseconds to react to a 
change in the incident light. If light shines off 
center to the retina as shown in Figure PI.7(c), 
describe the response of the pupil with delay 
present and then without delay present. 
[a) 
(b) 
(c) 
FIGURE P1.7 Pupil is shown black; light beam is shown 
white, a. Light beam diameter is larger than pupil, b. Light 
beam diameter is smaller than pupil, c. Narrow light beam is 
illuminated at pupil's edge. 
14. A Segway®6 Personal Transporter (PT) (Figure P1.8) 
is a two-wheeled vehicle in which the human operator 
stands vertically on a platform. As the driver leans left, 
right, forward, or backward, a set of sensitive gyroscopic 
sensors sense the desired input. These signals are fed to a 
computer that amplifies them and commands motors to 
propel the vehicle in the desired direction. One very 
important feature of the PTis its safety: The system will 
maintain its vertical position within a specified angle 
despite road disturbances, such as uphills and downhills 
or evenif the operator over-leans in any direction. Draw 
6 Segway is a registered trademark of Segway, Inc. in the United States 
and/or other countries. 
Problems 
27 
a functional block diagram of the PT system that keeps 
the system in a vertical position. Indicate the input and 
output signals, intermediate signals, and main subsys-
tems. (http://segway.com) 
FIGURE P1.8 The Segway Personal Transporter (PT) 
15. In humans, hormone levels, alertness, 
wileypms 
and core body temperature are syn- 
>ViU*-"» 
chronized through a 24-hour circadian 
control solutions 
cycle. Daytime alertness is at its best when sleep/ 
wake cycles are in synch with the circadian cycle. 
Thus alertness can be easily affected with a distrib-
uted work schedule, such as the one to which astro-
nauts are subjected. It has been shown that the 
human circadian cycle can be delayed or advanced 
through light stimulus. To ensure optimal alertness, 
a system is designed to track astronauts' circadian 
cycles and increase the quality of sleep during 
missions. Core body temperature can be used as 
an indicator of the circadian cycle. A computer 
model with optimum circadian body temperature 
variations can be compared to an astronaut's body 
temperatures. Whenever a difference is detected, 
the astronaut is subjected to a light stimulus to 
advance or delay the astronaut's circadian cycle 
(Mott, 2003). Draw a functional block diagram of 
the system. Indicate the input and output signals, 
intermediate signals, and main subsystems. 
16. Tactile feedback is an important component in the 
learning of motor skills such as dancing, sports, 
and physical rehabilitation. A suit with white dots 
recognized by a vision system to determine arm 
joint positions with millimetric precision was de-
veloped. This suit is worn by both teacher and 

28 
Chapter 1 
Introduction 
student to provide position information. (Lieber-
man, 2007). If there is a difference between the 
teacher's positions and that of the student, vibra-
tional feedback is provided to the student through 
8 strategically placed vibrotactile actuators in the 
wrist and arm, which take advantage of a sensory 
effect known as cutaneous rabbit that tricks the 
subject to feel uniformly spaced stimuli in places 
where the actuators are not present. These stimuli 
help the student adjust to correct the motion. In 
summary, the system consists of an instructor and 
a student having their movements followed by the 
vision system. Their movements are fed into a 
computer that finds the differences between their 
joint positions and provides proportional vibra-
tional strength feedback to the student. Draw a 
block diagram describing the system design. 
17. Given the electric network shown in 
wileypius 
Figure PI.9. [Review] 
aVJilK 
a. Write the differential equation for 
control solutions 
the network if v(t) = u(t), a unit step. 
b. Solve the differential equation for the current, 
i(t), if there is no initial energy in the network. 
c. Make a plot of your solution if R/L = 1. 
—Wv— 
vw© 
FIGURE PI.9 
RL network 
18. Repeat Problem 17 using the network shown in Fig-
urePl.lO.Assumei? = 2H, L = lH,andl/LC =25. 
[Review] 
m&) 
/(0 
19. Solve the following differential equa-
tions using classical methods. Assume 
zero initial conditions. [Review] 
dx 
M . 
>, 
a. -r- 4* iX = 5 cos 2r 
at 
, d2x 
,dx 
rt 
_ . „ 
b. -pr + 6 — + 8x = 5 sin 3t 
dt2 
dt 
c. —^ + 8^- + 25x = 10u(t) 
at* 
at 
20. Solve the following differential equa-
tions using classical methods and the 
given initial conditions: [Review] 
d2x 
„dx 
„ 
a- w+2-di+2x 
= sin2t 
40) = 2; ¢(0) = -3 
WileyPLUS 
Control Solutions 
WileyPLUS 
Control Solutions 
K d2x 
ndx 
_ 
7l 
dt2 
dt 
*(0)=2;^(0) = 1 
dt2 
dx 
* ( 0 ) = 1; d7(0) = 2 
+ t 
FIGURE PI. 10 
RLCnetwork 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
21. High-speed rail pantograph. Some high-speed 
rail systems are powered by electricity supplied 
to a pantograph on the train's roof from a cate-
nary overhead, as shown in Figure Pl.ll. The 
force applied by the pantograph to the catenary 
is regulated to avoid loss of contact due to exces-
sive transient motion. A proposed method to 
regulate the force uses a closed-loop feedback 
system, whereby a force, Fup, is applied to the 
bottom of the pantograph, resulting in an output 
Catenary 
Pantograph 
CDCDCDCDCD 
phY 
Train 
D D D D D 
D C 
/ > ,,> , / />V/>l; 
/1 / ; > > >*» >V; VI >}; J J >/ ?? x) W? fly), 
,,,,»V>* 
-rrr///////> 
FIGURE P1.11 High-speed rail system showing pantograph and catenary (Reprinted with permission of ASME.) 

Problems 
29 
force applied to the catenary at the top. The contact 
between the head of the pantograph and the cate-
nary is represented by a spring. The output force is 
proportional to the displacement of this spring, 
which is the difference between the catenary and 
pantograph head vertical positions (O'Connor, 
1997). Draw a functional block diagram showing 
the following signals: the desired output force as 
the input; the force, Fup, applied to the bottom of the 
pantograph; the difference in displacement between 
the catenary and pantograph head; and the output 
contact force. Also, show blocks representing the 
input transducer, controller, actuator generating 
Fup, pantograph dynamics, spring described above, 
and output sensor. All forces and displacements are 
measured from equilibrium. 
22. Contol of HIV/AIDS. As of 2005, the number of 
people living worldwide with Human Immuno-
deficiency Virus/Acquired Immune Deficiency Syn-
drome (HIV/AIDS) was estimated at 40 million, 
with 5 million new infections per year and 3 million 
deaths due to the disease {UNAIDS, 2005). Cur-
rently there is no known cure for the disease, and 
HIV cannot be completely eliminated in an infected 
individual. Drug combinations can be used to main-
tain the virus numbers at low levels, which helps 
prevent AIDS from developing. A common treat-
ment for HIV is the administration of two types of 
drugs: reverse transcriptase inhibitors (RTIs) and 
protease inhibitors (Pis). The amount in which each 
of these drugs is administered is varied according to 
the amount of HIV viruses in the body (Craig, 
2004). Draw a block diagram of a feedback system 
designed to control the amount of HIV viruses in an 
infected person. The plant input variables are the 
amount of RTIs and Pis dispensed. Show blocks 
representing the controller, the system under con-
trol, and the transducers. Label the corresponding 
variables at the input and output of every block. 
23. Hybrid vehicle. The use of hybrid cars is becoming 
increasingly popular. A hybrid electric vehicle 
(HEV) combines electric machine(s) with an inter-
nal combustion engine (ICE), making it possible 
(along with other fuel consumption-reducing mea-
sures, such as stopping the ICE at traffic lights) to 
use smaller and more efficient gasoline engines. 
Thus, the efficiency advantages of the electric driv-
etrain are obtained, while the energy needed to 
power the electric motor is stored in the onboard 
fuel tank and not in a large and heavy battery pack. 
There are various ways to arrange the flow of 
power in hybrid car. In a serial HEV (Figure PI.12), 
the ICE is not connected to the drive shaft. It drives 
only the generator, which charges the batteries and/ 
or supplies power to the electric motor(s) through 
an inverter or a converter. 
FIGURE PI .12 Serial hybrid-electric vehicle 
The HEVs sold today are primarily of the par-
allel or split-power variety. If the combustion 
engine can turn the drive wheels as well as the 
generator, then the vehicle is referred to as a 
parallel hybrid, because both an electric motor 
and the ICE can drive the vehicle. A parallel hybrid 
car (Figure PI. 13) includes a relatively small bat-
tery pack (electrical storage) to put out extra power 
to the electric motor when fast acceleration is 
needed. See (Bosch 5th ed., 2000), (Bosch 7th 
ed., 2007), (Edelson, 2008), (Anderson, 2009) for 
more detailed information about HEV. 
FIGURE P1.13 Parallel hybrid drive 
As shown in Figure P1.14, split-power hybrid cars 
utilize a combination of series and parallel drives 
(Bosch, 5th ed., 2007). These cars use a planetary 
gear (3) as a split-power transmission to allow some of 
the ICE power to be applied mechanically to the 
drive. The other part is converted into electrical 
energy through the alternator (7) and the inverter 
(5) to feed the electric motor (downstream of the 
transmission) and/or to charge the high-voltage 

30 
Chapter 1 
Introduction 
battery (6). Depending upon driving conditions, the 
ICE, the electric motor, or both propel the vehicle. 
1. internal-combustion engine; 2. tank 
3. planetary gear; 4. electric motor; 5. inverter; 
6. battery; 7. alternator. 
1 
3 4 
r i i 
0050^ 1^ 
6 
5 
FIGURE P1.14 
Split-power hybrid electric vehicle 
Draw a functional block diagram for the cruise 
(speed) control system of: 
a. A serial hybrid vehicle, showing its major com-
ponents, including the speed sensor, electronic 
control unit (ECU), inverter, electric motor, and 
vehicle dynamics; as well as all signals, including 
the desired vehicle speed, actual speed, control 
command (ECU output), controlled voltage (in-
verter output), the motive force (provided by the 
electric motor), and running resistive force7; 
b. A parallel hybrid vehicle, showing its major com-
ponents, which should include also a block that 
represents the accelerator, engine, and motor, as 
well as the signals (including accelerator displace-
ment and combined engine/motor motive force); 
c. A split-power HEV, showing its major compo-
nents and signals, including, in addition to those 
listed in Parts a and b, a block representing the 
planetary gear and its control, which, depending 
upon driving conditions, would allow the ICE, the 
electric motor, or both to propel the vehicle, that 
is, to provide the necessary total motive force. 
7 These include the aerodynamic drag, rolling resistance, and climbing 
resistance. The aerodynamic drag is a function of car speed, whereas 
the other two are proportional to car weight. 
Cyber Exploration Laboratory 
Experiment 1.1 
Objective To verify the behavior of closed-loop systems as described in the 
Chapter 1 Case Study. 
Minimum Required Software Packages LabVIEW and the LabVIEW 
Control Design and Simulation Module. Note: While no knowledge of LabVIEW 
is required for this experiment, see Appendix D to learn more about LabVIEW, 
which will be pursued in more detail in later chapters. 
Prelab 
1. From the discussion in the Case Study, describe the effect of the gain of a closed-
loop system upon transient response. 
2. From the discussion in the Case Study about steady-state error, sketch a graph of 
a step input superimposed with a step response output and show the steady-state 
error. Assume any transient response. Repeat for a ramp input and ramp output 
response. Describe the effect of gain upon the steady-state error. 
Lab 
1. Launch LabVIEW and open Find Examples . . . 

Bibliography 
2. In the NI Example Finder window, open CDEx Effect of Controller Type.vi, 
found by navigating to it thourgh Toolkits and Modules/Control and Simulation/ 
Control Design/Time Analysis/CDEx Effect of Controller Type vi. 
3. On the tool bar click the circulating arrows located next to the solid arrow on the 
left. The program is now running. 
4. Move the slider Controller Gain and note the effect of high and low gains. 
5. Change the controller by clicking the arrows for Controller Type and repeat 
Step 4. 
Postlab 
1. Correlate the responses found in the experiment with those described in your 
Prelab. Explore other examples provided in the Lab VIEW example folders. 
(Bibliography) 
Alternative Drivetrains, July 2005. Available at www.altfuels.org/backgrnd/altdrive.html. 
Accessed October 13, 2009. 
Anderson, S. Field Guide: Hybrid Electric Powertrains, part 4 of 5. Automotive Design & 
Production. Gardner Publication, Inc. Available at http://www.autofieldguide.com/articles/ 
020904.html. Accessed October 13, 2009. 
Ayers, J. Taking the Mystery out of Winder Controls. Power Transmission Design, April 1988, 
pp. 27-34. 
Bahill, A. T. Bioengineering: Biomedical, Medical, and Clinical Engineering. Prentice Hall, 
Englewood Cliffs, NJ, 1981. 
Bechhoefer, J. Feedback for Physicists: A Tutorial Essay on Control. To Appear in Review 
of Modern Physics, July 2005, pp. 42-45. Also available at http://www.sfu.ca/chaos/ 
Publications/papers/RMP_feedback.pdf. 
Bennett, S. A History of Control Engineering, 1800-1930. Peter Peregrinus, Stevenage, UK, 1979. 
Bode, H. W. Network Analysis and Feedback Amplifier Design. Van Nostrand, Princeton, NJ, 
1945. 
Bosch, R. GmbH. Automotive Electrics and Automotive Electronics, 5th ed. John Wiley & 
Sons Ltd., UK, 2007. 
Bosch, R. GmbH. Bosch Automotive Handbook, 7th ed. John Wiley & Sons Ltd., UK, 2007. 
Cannon, R. H., Jr. Dynamics of Physical Systems. McGraw-Hill, New York, 1967. 
Craig, I. K., Xia, X., and Venter, J. W Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
D'Azzo, J. X, and Houpis, C. H. Feedback Control System Analysis and Synthesis, 2d ed. 
McGraw-Hill, New York, 1966. 
Doebelin, E. O. Measurement Systems Application and Design, 4th ed. McGraw-Hill. 
New York, 1990. 
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989. 
D'Souza, A. F. Design of Control Systems. Prentice Hall, Upper Saddle River, NJ, 1988. 
Edelson, J., et al. Facing the Challenges of the Current Hybrid Electric Drivetrain. SMMA 
Technical Conference of the Motor and Motion Association. Fall 2008. Available at 
www.ChorusCars.com. 
Franklin, G. F, Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems. 
Addison-Wesley, Reading, MA, 1986. 

Chapter 1 
Introduction 
Heller, H. C, Crawshaw, L. I., and Hammel, H. T. The Thermostat of Vertebrate Animals. 
Scientific American, August 1978, pp. 102-113. 
Hogan, B. J. As Motorcycle's Speed Changes, Circuit Adjusts Radio's Volume. Design News, 
18, August 1988, pp. 118-119. 
Hostetter, G. H., Savant, C. X, Jr., and Stefani, R. T. Design of Feedback Control Systems, 
2d ed. Saunders College Publishing, New York, 1989. 
Jenkins, H. E., Kurfess, T R., and Ludwick, S. X Determination of a Dynamic Grinding Model. 
Journal of Dynamic Systems, Measurements, and Control, vol. 119, June 1997, pp. 289-293. 
Klapper, X, and Frankle, X T. Phase-Locked and Frequency-Feedback Systems. Academic 
Press, New York, 1972. 
Lieberman, J., and Breazeal, C. Development of a Wearable Vibrotactile Feedback Suit for 
Accelerated Human Motor Learning. 2007 IEEE Int. Conf. on Robotics and Automation. 
Roma, Italy, April 2007. 
Martin, R. H , Jr. Elementary Differential Equations with Boundary Value Problems. McGraw-
Hill, New York, 1984. 
Mayr, O. The Origins of Feedback Control. Scientific American, October 1970, pp. 110-118. 
Mayr, O. The Origins of Feedback Control. MIT Press, Cambridge, MA, 1970. 
Meier, R., Nieuwland, J., Zbinden, A. M., and Hacisalihzade, S. S. Fuzzy Logic Control of 
Blood Pressure during Anesthesia. IEEE Control Systems, December 1992, pp. 12-17. 
Mott, C, et al. Modifying the Human Orcadian Pacemaker Using Model-Based Predictive 
Control. Proceedings of the American Control Conference. Denver, CO, June 2003, 
pp. 453-458. 
Novosad, X P. Systems, Modeling, and Decision Making. Kendall/Hunt, Dubuque, IA, 1982. 
Nyquist, H. Regeneration Theory. Bell System Technical Journal, January 1932. 
O'Connor, D. N, Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. \-A. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Rockwell International. Space Shuttle Transportation System, 1984 (press information). 
Shaw, D. A., and Turnbull, G. A. Modern Thickness Control for a Generation III Hot Strip 
Mill. The International Steel Rolling Conference— The Science & Technology of Flat Rolling, 
vol. 1. Association Technique de la Siderurgie Francaise, Deauville, France, 1-3, June 1987. 
UNAIDS. AIDS Epidemic Update. World Health Organization, December 2005. Available 
at www.unaids.org/Epi2005/doc/EPIupdate2005_pdf_en/epi-update2005_en.pdf. 
Accessed 
January 1, 2006. 
Vaughan, N. D., and Gamble, J. B. The Modeling and Simulation of a Proportional Solenoid 
Valve. Journal of Dynamic Systems, Measurements, and Control, vol. 118, March 1996, 
pp. 120-125. 

•r 
Modeling in the 
$ 
Frequency Domain 
^Chapter 
Learning Outcomes^ 
After completing this chapter, the student will be able to: 
• Find the Laplace transform of time functions and the inverse Laplace transform 
(Sections 2.1-2.2) 
• Find the transfer function from a differential equation and solve the differential 
equation using the transfer function (Section 2.3) 
• Find the transfer function for linear, time-invariant electrical networks (Section 2.4) 
• Find the transfer function for linear, time-invariant translational mechanical systems 
(Section 2.5) 
• Find the transfer function for linear, time-invariant rotational mechanical systems 
(Section 2.6) 
• Find the transfer functions for gear systems with no loss and for gear systems with 
loss (Section 2.7) 
• Find the transfer function for linear, time-invariant electromechanical systems 
(Section 2.8) 
• Produce analogous electrical and mechanical circuits (Section 2.9) 
• Linearize a nonlinear system in order to find the transfer function (Sections 2.10-
2.11) 
33 
2 

34 
Chapter 2 
Modeling in the Frequency Domain 
(case Study Learning Outcomes 3 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to find the transfer function of each subsystem. 
• Given a model of a human leg or a nonlinear electrical circuit, you will be able to 
linearize the model and then find the transfer function. 
^2.1 Introduction 
In Chapter 1, we discussed the analysis and design sequence that included obtaining 
the system's schematic and demonstrated this step for a position control system. To 
obtain a schematic, the control systems engineer must often make many simplifying 
assumptions in order to keep the ensuing model manageable and still approximate 
physical reality. 
The next step is to develop mathematical models from schematics of physical 
systems. We will discuss two methods: (1) transfer functions in the frequency domain 
and (2) state equations in the time domain. These topics are covered in this chapter 
and in Chapter 3, respectively. As we proceed, we will notice that in every case the 
first step in developing a mathematical model is to apply the fundamental physical 
laws of science and engineering. For example, when we model electrical networks, 
Ohm's law and Kirchhoff's laws, which are basic laws of electric networks, will be 
applied initially. We will sum voltages in a loop or sum currents at a node. When we 
study mechanical systems, we will use Newton's laws as the fundamental guiding 
principles. Here we will sum forces or torques. From these equations we will obtain 
the relationship between the system's output and input. 
In Chapter 1 we saw that a differential equation can describe the relationship 
between the input and output of a system. The form of the differential equation and its 
coefficients are a formulation or description of the system. Although the differential 
equation relates the system to its input and output, it is not a satisfying representation 
from a system perspective. Looking at Eq. (1.2), a general, «th-order, linear, time-
invariant differential equation, we see that the system parameters, which are the 
coefficients, as well as the output, c(t), and the input, r(t), appear throughout the equation. 
We would prefer a mathematical representation such as that shown in 
Figure 2.1(a), where the input, output, and system are distinct and separate parts. 
Also, we would like to represent conveniently the interconnection of several sub-
systems. For example, we would like to represent cascaded interconnections, as shown 
Input 
r(t) 
System 
Output 
c{t) 
(a) 
FIGURE 2.1 
a. Block diagram 
representation of a system; b. 
block diagram representation 
of an interconnection of 
subsystems 
Input 
m 
Subsystem 
Subsystem 
Subsystem 
Output 
(b) 
Note: The input, r(t), stands for reference input. 
The output, c(t), stands for controlled variable. 
c(t) 

2.2 Laplace Transform Review 
35 
in Figure 2.1(b), where a mathematical function, called a transfer function, is inside 
each block, and block functions can easily be combined to yield Figure 2.1 (a) for 
ease of analysis and design. This convenience cannot be obtained with the 
differential equation. 
£ 2.2 Laplace Transform Review 
A system represented by a differential equation is difficult to model as a block 
diagram. Thus, we now lay the groundwork for the Laplace transform, with which we 
can represent the input, output, and system as separate entities. Further, their 
interrelationship will be simply algebraic. Let us first define the Laplace transform 
and then show how it simplifies the representation of physical systems (Nilsson, 1996). 
The Laplace transform is defined as 
/•00 
&[f(t)] = F(s) = 
f(t)e~sldt 
Jo-
(2.1) 
where s = a + jco, a complex variable. Thus, knowing/(f) and that the integral in Eq. (2.1) 
exists, we can find a function, F(s), that is called the Laplace transform of/(f).1 
The notation for the lower limit means that even if/(0 is discontinuous at t = 0, 
we can start the integration prior to the discontinuity as long as the integral 
converges. Thus, we can find the Laplace transform of impulse functions. This 
property has distinct advantages when applying the Laplace transform to the 
solution of differential equations where the initial conditions are discontinuous 
at t = 0. Using differential equations, we have to solve for the initial conditions after 
the discontinuity knowing the initial conditions before the discontinuity. Using the 
Laplace transform we need only know the initial conditions before the discontinuity. 
See Kailath (1980) for a more detailed discussion. 
The inverse Laplace transform, which allows us to find f(t) given F(s), is 
i 
pa+joo 
^ [ ^ ) 1 = 9 3 / 
F(sy'ds=f(t)u(t) 
(2.2) 
where 
u(t) = 1 
t > 0 
= 0 
t<0 
is the unit step function. Multiplication of f(t) by u(t) yields a time function that is 
zero for t < 0. 
Using Eq. (2.1), it is possible to derive a table relating/(f) to F(s) for specific 
cases. Table 2.1 shows the results for a representative sample of functions. If we use 
the tables, we do not have to use Eq. (2.2), which requires complex integration, to 
find f(t) given F(s). 
'The Laplace transform exists if the integral of Eq. (2.1) converges. The integral will converge if 
/o_ l/Wk-"1' dt < oc. Tf \f(t)\ < Meai',0 < t < oo, the integral will converge if oo > o\ > 0¾. We call 02 
the abscissa of convergence, and it is the smallest value of CT, where s = a + jco, for which the integral exists. 

36 
Chapter 2 
Modeling in the Frequency Domain 
TABLE 2.1 Laplace transform table 
Item no. 
1. 
2. 
3. 
4-
5. 
6. 
7. 
M 
8(0 
u(t) 
tu(t) 
fuit) 
e~atu{t) 
sina)tu(t) 
cos a>tu(t) 
F(s) 
1 
1 
s 
1 
s2 
1 
s + a 
CO 
s2 + co2 
s 
s2 + co2 
In the following example we demonstrate the use of Eq. (2.1) to find the 
Laplace transform of a time function. 
Example 2.1 
Laplace Transform of a Time Function 
PROBLEM: Find the Laplace transform of/(f) = Ae~atu(t). 
SOLUTION: Since the time function does not contain an impulse function, we can 
replace the lower limit of Eq. (2.1) with 0. Hence, 
/>CO 
/"00 
fX> 
F(s)= 
/ 
f(t)e~stdt 
= / 
Ae~ate-St 
cit = A / 
e~{s+a)t dt 
Jo 
Jo 
Jo 
A 
s + a 
.e-{*+a)t 
A 
/=0 
s + a 
(2.3) 
In addition to the Laplace transform table, Table 2.1, we can use Laplace 
transform theorems, listed in Table 2.2, to assist in transforming between f(t) and 
F(s). In the next example, we demonstrate the use of the Laplace transform 
theorems shown in Table 2.2 to find f(t) given F(s). 
Example 2.2 
Inverse Laplace Transform 
PROBLEM: Find the inverse Laplace transform of Fi{s) = l/(s + 3)2. 
SOLUTION: For this example we make use of the frequency shift theorem, Item 4 
of Table 2.2, and the Laplace transform of/(f) = tu(t), Item 3 of Table 2.1. If the 
inverse transform of F(s) = 1/s2 is tu(t), the inverse transform of F(s + a) = 
1/(5 + a)2 is e-altu(t). Hence, f^t) = e-3ttu(t). 

2.2 Laplace Transform Review 
37 
TABLE 2.2 Laplace transform theorems 
Item no. 
Theorem 
Name 
1. 
2. 
3. 
4. 
5. 
6. 
7. 
9. 
10. 
11. 
12. 
#[f(t)]=F(s) 
=J£f(t)er*dt 
<f[kfit)\ 
= kF(s) 
^[fi(t)+fi(t)]=F1(s)+F2{s) 
&[e~<*f{t)} 
X[f(t-T)] 
2 
<e 
/(0 
fiat 
'df\ 
dt 
\d2f 
dt2 
'd"f 
dt" 
L 
+) 
)] 
f(r)dr] 
= Fis + a) 
= e-sTF(s) 
= ^(^)-/(0-) 
= s2F(s) -^/(0-) -/'(0-
= 5"f(5)- £V-*/*-1(0 
*=i 
= F(£) 
5 
= lim sFfrsO 
s-»0 
= lim sFis) 
Definition 
Linearity theorem 
Linearity theorem 
Frequency shift theorem 
Time shift theorem 
Scaling theorem 
Differentiation theorem 
Differentiation theorem 
Differentiation theorem 
Integration theorem 
Final value theorem1 
Initial value theorem2 
1 For this theorem to yield correct finite results, all roots of the denominator of F(s) must have negative real 
parts, and no more than one can be at the origin. 
2For this theorem to be valid, fit) must be continuous or have a step discontinuity at t = 0 (that is, no 
impulses or their derivatives at t = 0). 
Partial-Fraction Expansion 
To find the inverse Laplace transform of a complicated function, we can convert the 
function to a sum of simpler terms for which we know the Laplace transform of each 
term. The result is called & partial-fraction expansion. If F\is) = Nis)/Dis), 
where 
the order of N(s) is less than the order of D(s), then a partial-fraction expansion can 
be made. If the order of N(s) is greater than or equal to the order of D(s), then N(s) 
must be divided by D(s) successively until the result has a remainder whose 
numerator is of order less than its denominator. For example, if 
mm±gg£l 
M 
we must perform the indicated division until we obtain a remainder whose numera-
tor is of order less than its denominator. Hence, 
F i ( s ) = s + 1 + s2 + s + 5 
(2.5) 
Taking the inverse Laplace transform, using Item 1 of Table 2.1, along with the 
differentiation theorem (Item 7) and the linearity theorem (Item 3 of Table 2.2), we obtain 
2 
M) = d-f + sit) + ^ 
s2 + s + 5 
(2.6) 
Using partial-fraction expansion, we will be able to expand functions like F(s) = 
2/is2 +s + 5) into a sum of terms and then find the inverse Laplace transform for 
each term. We will now consider three cases and show for each case how an F(s) can be 
expanded into partial fractions. 

Chapter 2 
Modeling in the Frequency Domain 
Case 1. Roots of the Denominator of F(s) Are Real and Distinct An example of an 
F(s) with real and distinct roots in the denominator is 
F® = (s + i, + 2) 
<
2'
7> 
The roots of the denominator are distinct, since each factor is raised only to unity 
power. We can write the partial-fraction expansion as a sum of terms where each 
factor of the original denominator forms the denominator of each term, and 
constants, called residues, form the numerators. Hence, 
f ( 5 ) = (ni)H2) = (^ij+(^) 
( Z 8 ) 
To find Ku we first multiply Eq. (2.8) by (5 + 1), which isolates K\. Thus, 
2 =Kl+ttm 
(2.9) 
(5 + 2) 
' 
(s + 2) 
Letting 5 approach -1 eliminates the last term and yields K\ = 2. Similarly, K2 can be 
found by multiplying Eq. (2.8) by (s 4- 2) and then letting s approach -2; hence, K2 = -2. 
Each component part of Eq. (2.8) is an F(s) in Table 2.1. Hence,/(f) is the sum 
of the inverse Laplace transform of each term, or 
f{t) = {2e-'-2e-2t)u{t) 
(2.10) 
In general, then, given an F(s) whose denominator has real and distinct roots, a 
partial-fraction expansion, 
D(s) 
(s+Pl)(s+p2)...(s 
+ pm)---(s + pn) 
K] 
Kl 
+ . . . + - i ^ + ' . . + 
*» 
(2.11) 
{s+pj 
(s+p2) 
(S+Pm) 
(S+Pn) 
can be made if the order of N(s) is less than the order of D(s). To evaluate each 
residue, Kj, we multiply Eq. (2.11) by the denominator of the corresponding partial 
fraction. Thus, if we want to find Km, we multiply Eq. (2.11) by (s +pm) and get 
(s+PJN(s) 
{s+pm)F{s) = [S +Pi){s+p2) • • • (* +Pm) • • • (* +Pn) 
If we let s approach —pm, all terms on the right-hand side of Eq. (2.12) go to zero 
except the term Km, leaving 
J^rfQm 
{s+Pl)(s+p2) 
• • -Is^rTd 
•••{s 
+p„) 
= Km 
(2.13) 
s^~P„ 
The following example demonstrates the use of the partial-fraction expansion 
to solve a differential equation. We will see that the Laplace transform reduces the 
task of finding the solution to simple algebra. 

2.2 Laplace Transform Review 
39 
Example 2.3 
Laplace Transform Solution of a Differential Equation 
PROBLEM: Given the following differential equation, solve for y(t) if all initial 
conditions are zero. Use the Laplace transform. 
£+«j + *-»« 
(2.14) 
SOLUTION: Substitute the corresponding F(s) for each term in Eq. (2.14), using 
Item 2 in Table 2.1, Items 7 and 8 in Table 2.2, and the initial conditions of y(t) and 
dy(t)/dt given by y(0—) = 0 and y(0-) = 0, respectively. Hence, the Laplace 
transform of Eq. (2.14) is 
s2Y(s) + 12sY(s) + 32Y(s) = — 
Solving for the response, Y(s), yields 
32 
Y(s) = 
32 
s{s2 + 125 + 32) 
5(5 + 4)(5 + 8) 
(2.15) 
(2.16) 
To solve for y(t), we notice that Eq. (2.16) does not match any of the terms in Table 
2.1. Thus, we form the partial-fraction expansion of the right-hand term and match 
each of the resulting terms with F(s) in Table 2.1. Therefore, 
Y(s) = 
where, from Eq. (2.13), 
32 
_j^i 
5(5 + 4)(5 + 8) ~ T 
K, 
+ 
K3 
5 + 4) 
(5 + 8) 
#. = 
K2 = 
32 
[s + 4)(5 + 8) 
32 
= 1 
K3 = 
5(5 + 8) 
32 
s - 0 
= - 2 
s—»-4 
s(s + 4) 
= 1 
5 — 8 
Hence, 
y(,)=I 
2— + 
^ 
U 
5 (^ + 4)^(5 + 8) 
(2.17) 
(2.18a) 
(2.18b) 
(2.18c) 
(2.19) 
Since each of the three component parts of Eq. (2.19) is represented as an 
F(s) in Table 2.1, y(t) is the sum of the inverse Laplace transforms of each term. 
Hence, 
y{t) = (l-2e-4' 
+ e-*!)u{t) 
(2.20) 

40 
Chapter 2 
Modeling in the Frequency Domain 
MATLAB 
Students who are using MATLAB should now run ch2pl through ch2p8 
in Appendix B. This is your first MATLAB exercise. You will learn how 
to use MATLAB to (1) represent polynomials, {2) find roots of poly-
nomials, (3) multiply polynomials, and (4) find partial-fraction 
expansions. Finally, Example 2 .3 will be solved using MATLAB. 
HryltZl 
Use the following MATLAB 
and Control System Toolbox 
statement to form the linear, 
time-invariant (LTI) transfer 
function of Eq. (2.22). 
F=zpk([],[-1 -2 -2], 2) 
Trylt2.2 
Use the following MATLAB 
statements to help you get 
Eq. (2.26). 
numf=2; 
denf = poly([-l -2 -2]); 
[k,p, k] = residue. .. 
(numf,denf) 
The u{i) in Eq. (2.20) shows that the response is zero until t = 0. Unless 
otherwise specified, all inputs to systems in the text will not start until t — 0. Thus, 
output responses will also be zero until t = 0. For convenience, we will leave off the 
u(t) notation from now on. Accordingly, we write the output response as 
y(0 = l-2«T* + <? 
, - 8 r 
(2.21) 
Case 2. Roots of the Denominator of F(s) Are Real and Repeated An example of 
an F(s) with real and repeated roots in the denominator is 
F(s) = 
(. + 1)(5 + 2)^ 
(2.22) 
The roots of (s + 2) in the denominator are repeated, since the factor is raised to an 
integer power higher than 1. In this case, the denominator root at -2 is a multiple 
root of multiplicity 2. 
We can write the partial-fraction expansion as a sum of terms, where each 
factor of the denominator forms the denominator of each term. In addition, each 
multiple root generates additional terms consisting of denominator factors of 
reduced multiplicity. For example, if 
F(s) = 
Ki 
K2 
Ks 
(5 + 1)(5 + 2)2 
(5 + 1) 
(5 + 2)2 
{s + 2) 
(2.23) 
then K\ = 2, which can be found as previously described. K2 can be isolated by 
multiplying Eq. (2.23) by {s + 2)2, yielding 
5 + 1 
= (5 + 2)' Ki 
1) 
K2 + (5 + 2)K3 
(2.24) 
Letting 5 approach -2, K2 = -2. To find K3 we see that if we differentiate Eq. (2.24) 
with respect to s, 
- 2 
? 
~~ / • 
, 1 \ 2 ^ 1 
^ ^
3 
(5+ir 
(5+iy 
(2.25) 
K3 is isolated and can be found if we let 5 approach -2. Hence, Kj, = —2. 
Each component part of Eq. (2.23) is an F(s) in Table 2.1; hence, f(t) is the sum 
of the inverse Laplace transform of each term, or 
-2i 
f(t) = 2e~( - 2te~M - 2e ,-2r 
(2.26) 
If the denominator root is of higher multiplicity than 2, successive differentiation 
would isolate each residue in the expansion of the multiple root. 

2.2 Laplace Transform Review 
41 
In general, then, given an F(s) whose denominator has real and repeated roots, 
a partial-fraction expansion, 
F(S) = D(s) 
N(s) 
(s + p1)r(s+p2)---(s+pn] 
K\ 
K2 
(s+pj 
+ (s+Ply-1 
+ '" 
Kr 
Pi) 
+ (s+p2) + ••• + (S+Pn) 
(2.27) 
can be made if the order of N(s) is less than the order of D(s) and the repeated roots 
are of multiplicity r at —p1. To find K\ through Kr for the roots of multiplicity greater 
than unity, first multiply Eq. (2.27) by (s +p{f getting F\{s), which is 
F1(s) = (S+pl)rF(s) 
(S+Pl)rN(S) 
(s + 
PiY(s+p2)---{s+pn) 
= Ki + (s +p1)K2 + {s +Pi)2K3 + ••• + (* +P1)r~1Kr 
Kn(s+PiY 
• * r + l ( * + P l ) r 
(s+Pi) 
+ (S+Pn) 
(2.28) 
Immediately, we can solve for K\ if we let s approach —pv We can solve for K2 if we 
differentiate Eq. (2.28) with respect to s and then let s approach —p^ Subsequent 
differentiation will allow us to find K3 through Kr. The general expression for K\ 
through Kr for the multiple roots is 
/-1 
Ki = 
1 
<?-lFi{s) 
[/-1)1 ds1-1 
/=1,2,. ..,r; 
0!=1 
(2.29) 
5-+-/3, 
Case 3. Roots of the Denominator of F(s) Are Complex or Imaginary An example 
of F(s) with complex roots in the denominator is 
F(s) = s(s2 + 2s + 5) 
This function can be expanded in the following form: 
3 
=Kt 
K2s + K2 
s(s2 + 2s + 5) 
s 
s2 + 2s + 5 
(2.30) 
(2.31) 
K\ is found in the usual way to be |. K2 and K$ can be found by first multiplying 
Eq. (2.31) by the lowest common denominator, 5(^+2^ + 5), and clearing the 
fractions. After simplification with Ki = I, we obtain 
3 (2^ + |y+(^3-f|V -3 
(2.32) 
Trylt2.3 
Use the following MATLAB 
and Control System Toolbox 
statement to form the LTI 
transfer function of Eq. (2.30). 
F = tf([3],[l 2 5 0]) 

42 
Chapter 2 
Modeling in the Frequency Domain 
Balancing coefficients, (K2 + 3) = 0 and (£3+5) = 0. Hence K% = - | and K3 = 
-f. Thus, 
F(s) = 
3/5 
3 
5 + 2 
s(s2 +25 + 5) 
5 
5 52 + 2s + 5 
(2.33) 
The last term can be shown to be the sum of the Laplace transforms of an 
exponentially damped sine and cosine. Using Item 7 in Table 2.1 and Items 2 and 4 in 
Table 2.2, we get 
A(s + a) 
<£\Ae-alcos cot] = 
(5 + a)2 + (o2 
Similarly, 
Se[Be'alsmcot} = 
Bay 
(s + af + a? 
Adding Eqs. (2.34) and (2.35), we get 
y[Ae-a'cos cot + Be~atsm cot] = 
A(s + a)+Bco 
(s + a)2 + (o2 
(2.34) 
(2.35) 
(2.36) 
Trylt 2.4 
Use the following MATLAB 
and Symbolic Math Toolbox 
statements to get Eq. (2.38) 
from Eq. (2.30). 
syms s 
f = i l a p l a c e . . . 
(3/(s*(s A2+2*s + 5))); 
p r e t t y ( f ) 
We now convert the last term of Eq. (2.33) to the form suggested by Eq. (2.36) 
by completing the squares in the denominator and adjusting terms in the numerator 
without changing its value. Hence, 
F(s) = 3/5 
3(5 + 1) + (1/2)(2) 
• 
5 
(s + l)2 + 22 
Comparing Eq. (2.37) to Table 2.1 and Eq. (2.36), we find 
3 
3 
( 
1 
/(f) = - - - e " ' cos2f + -sin2/ 
(2.37) 
(2.38) 
In order to visualize the solution, an alternate form of f(t), obtained by 
trigonometric identities, is preferable. Using the amplitudes of the cos and sin 
terms, we factor out A/ 1 + (1/2) from the term in parentheses and obtain 
f(t) =l-yi2 
+ (V2)2e-< 
I 2 + (l/2); 
: COS 2f 
1/2 
12 + (1/2)' 
:sin2r 
(2.39) 
Letting 1/Jl2 + (l/2)z = cos0 and (1/2)/A/1 + (1/2)* = sin0, 
or 
3 
3 I 
f(t) = - - - y i 2 + (l/2)V r (cos (j) cos It + i\xi<l>im2i) 
f(t) = 0.6 - 0.671e-'cos(2f - ¢) 
(2.40) 
(2.41) 

2.2 Laplace Transform Review 
where 0 = arctan 0.5 = 26.57°. Thus,/(f) is a constant plus an exponentially damped 
sinusoid. 
In general, then, given an F(s) whose denominator has complex or purely 
imaginary roots, a partial-fraction expansion, 
N(s) 
N{s) 
F(s) = D{s) 
(s + pt){s2 + as + b) • 
(K2s + K3] 
K, 
(s+Pl) 
' (s2 + as + b) ' '" 
{2A2) 
can be made if the order of N(s) is less than the order of D(s) p1 is real, and (s2 + 
as + b) has complex or purely imaginary roots. The complex or imaginary roots are 
expanded with (Kis + K^) terms in the numerator rather than just simply K;, as in 
the case of real roots. The Kfs in Eq. (2.42) are found through balancing the 
coefficients of the equation after clearing fractions. After completing the squares on 
(s2 + as + b) and adjusting the numerator, {K2S + K^)/(s2 + as + b) can be put into 
the form shown on the right-hand side of Eq. (2.36). 
Finally, the case of purely imaginary roots arises if a — 0 in Eq. (2.42). The 
calculations are the same. 
Another method that follows the technique used for the partial-fraction 
expansion of F(s) with real roots in the denominator can be used for complex 
and imaginary roots. However, the residues of the complex and imaginary roots are 
themselves complex conjugates. Then, after taking the inverse Laplace transform, 
the resulting terms can be identified as 
and 
er + e 
e>" - e 
2} 
— cos 
= sin 
(2.43) 
(2.44) 
For example, the previous F(s) can also be expanded in partial fractions as 
3 
3 
m = 
s(s2+2s + 5) 
s(s + l+j2){s + 
\-j2) 
= — H 
1 
s 
5 + 1+/2 
^ + 1-/2 
Finding K2, 
Ko = s(s + 
l-j2) 
-2o(2 + /l) 
(2.45) 
(2.46) 
s-*-l-j2 
Similarly, £3 is found to be the complex conjugate of K2, and K\ is found as 
previously described. Hence, 
2 - / 1 
mJ4 
-if^ 
from which 
5 
20 V? + 1+/2 
5 + 1-/2 
fit) = § - I (2 +jl)e-{l+i2)t + (2- }l)e-*-M 
(2.47) 
5 
20^ 
2/ 
(2.48) 
Trylt2.5 
Use the following MATLAB 
statements to help you get 
Eq. (2.47). 
numf = 3 
denf=[l 2 5 0] 
[k,p, k] = residue.. . 
(numf,denf) 

44 
Chapter 2 
Modeling in the Frequency Domain 
Using Eqs. (2.43) and (2.44), we get 
Symbolic Math 
f{t)=-^-~e-c(cos2t 
+ -sm2t 
where $ = arctan0.5 = 26.57°. 
= 0.6 - 0.671e-'cos(2f - ¢) 
(2.49) 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run ch2spl and ch2sp2 in Appendix F at www.wiley.com/ 
college/nise. You will learn how to construct symbolic objects and 
then find the inverse Laplace and Laplace transforms of frequency 
and time functions, respectively. The examples in Case 2 and Case 3 
in this section will be solved using the Symbolic Math Toolbox. 
Skill-Assessment Exercise 2.1 
PROBLEM: Find the Laplace transform of/(f) = te~5t. 
ANSWER: F{s) = l/(s + 5)2 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 2.2 
PROBLEM: Find the inverse Laplace transform of F(s) = 10/[s{s + 2){s + 3)2] 
ANSWER: /(,) = * _ Se~2t + j t e ^ + ^ < r * 
The complete solution is at www.wiley.com/college/nise. 
( 2.3 The Transfer Function 
In the previous section we defined the Laplace transform and its inverse. We presented 
the idea of the partial-fraction expansion and applied the concepts to the solution of 
differential equations. We are now ready to formulate the system representation 
shown in Figure 2.1 by establishing a viable definition for a function that algebraically 
relates a system's output to its input. This function will allow separation of the input, 
system, and output into three separate and distinct parts, unlike the differential 
equation. The function will also allow us to algebraically combine mathematical 
representations of subsystems to yield a total system representation. 
Let us begin by writing a general nth-order, linear, time-invariant differential 
equation, 
d"c(t) 
dn-lc{t) 
a„———l-%-i 
dtn 
dt"'1 
, . 
, dmr(t) 
_ 
dm-lr{t) 
+ aoc{t) = 
bm-1±L+bm_1 
dt" 
dt m—\ 
• + b0r{t) 
(2.50) 

2.3 The Transfer Function 
where c(t) is the output, r(t) is the input, and the a,'s, b/s, and the form of the 
differential equation represent the system. Taking the Laplace transform of both sides, 
ans"C{s) + an-is'^Cis) 
H 
+ a0C(s) + initial condition 
terms involving c(t) 
= bms"'R(s) + bm-ism-lR(s) 
+ ••• + b0R(s) + initial condition 
terms involving r(t) 
(2-51) 
Equation (2.51) is a purely algebraic expression. If we assume that all initial 
conditions are zero, Eq. (2.51) reduces to 
(ansn + fln-i^-1 + • • • + a0)C{s) = (bms"' + b^s™'1 
+ ••• + b0)R{s) 
(2.52) 
Now form the ratio of the output transform, C(s), divided by the input transform, R(s): 
C(s) = 
= (bmsm + Z^-is"'-1 4-«• + h) 
m 
(a„s" + an-is"-1 + • • • + a0) 
(2.53) 
Notice that Eq. (2.53) separates the output, C(s), the input, R(s), and the system, the 
ratio of polynomials in s on the right. We call this ratio, G(s), the transfer function and 
evaluate it with zero initial conditions. 
The transfer function can be represented as a block diagram, as 
shown in Figure 2.2, with the input on the left, the output on the right, and 
— 
the system transfer function inside the block. Notice that the denomina-
(V+Vi*""1 + --- + *o) 
(0^+0^^ 
+ ---+0(,) 
C(s) 
tor of the transfer function is identical to the characteristic polynomial of 
FIGURE 2.2 Block diagram of a transfer 
the differential equation. Also, we can find the output, C(s) by using 
function 
C{s) = R(s)G(s) 
(2.54) 
Let us apply the concept of a transfer function to an example and then use the result to 
find the response of the system. 
Example 2.4 
Transfer Function for a Differential Equation 
PROBLEM: Find the transfer function represented by 
dc(t) 
dt + 
2c(t)=r(t) 
(2.55) 
SOLUTION: Taking the Laplace transform of both sides, assuming zero initial 
conditions, we have 
sC(s) + 2C(s) = R(s) 
The transfer function, G(s), is 
G(s) = C{s)= 
1 
Ms) s + 2 
(2.56) 
(2.57) 

46 
Chapter 2 
Modeling in the Frequency Domain 
MATLAB 
Symbolic Malh 
Students who are using MATLAB should now run ch2p9 through ch2pl2 
in Appendix B. You will learn how to use MATLAB to create transfer 
functions with numerators and denominators in polynomial or fac-
tored form. You will also learn how to convert between polynomial 
and factored forms. Finally, you will learn how to use MATLAB to 
plot time functions. 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run ch2sp3 in Appendix F at www.wiley.com/college/ 
nise. You will learn how to use the Symbolic Math Toolbox to 
simplify the input of complicated transfer functions as well as 
improve readability. You will learn how to enter a symbolic trans-
fer function and convert it to a linear,time-invariant(LTI) 
object as presented in Appendix B, ch2p9. 
Trylt 2.6 
Use the following MATLAB 
and Symbolic Math Toolbox 
statements to help you get 
Eq. (2.60). 
syms s 
C = l/(s*(s+2» 
C = i l a p l a c e ( C ) 
Trylt 2.7 
Use the following MATLAB 
statements to plot Eq. (2.60) 
for f from 0 to 1 sat intervals of 
0.01s. 
t = 0 : 0 . 0 1 : 1 ; 
p l o t . . . 
( t , ( l / 2 - l / 2 * e x p ( - 2 * t ) ) ) 
Example 2.5 
System Response from the Transfer Function 
PROBLEM: Use the result of Example 2.4 to find the response, c(t) to an input, 
r{t) = u(t), a unit step, assuming zero initial conditions. 
SOLUTION: To solve the problem, we use Eq. (2.54), where G{s) = l/(s + 2) as 
found in Example 2.4. Since r(t) = «(r), R(s) = 1/s, from Table 2.1. Since the initial 
conditions are zero, 
C(s) = R(s)G{s) = 
1 
s(s + 2) 
1/2 
1/2 
Expanding by partial fractions, we get 
C(s) = 
Finally, taking the inverse Laplace transform of each term yields 
(2.58) 
(2.59) 
(2.60) 
Skill-Assessment Exercise 2.3 
PROBLEM: Find the transfer function, G(s) = C(s)/R(s), corresponding to the 
dzc 
_ dc 
dt2 
dt 
C(s) 
s2 +4s + 3 
. 
dc 
ndc 
^dc 
c 
dr 
dr 
differential equation —-=- + 3 -pr + 7 — + 5c = -73 + 4 - + 3/-. 
n 
dt3 
dt2 
dt 
dt2 
dt 
ANSWER: G(s) =• 
. 
. ., 
_ 
v ; 
R(s) 
s3 +3s2 + 7s + 5 
The complete solution is at www.wiley.com/college/nise. 

2.4 Electrical Network Transfer Functions 
47 
Skill-Assessment Exercise 2.4 
PROBLEM: Find the differential equation corresponding to the transfer function, 
G(s) = j — 6s+ 2 
d2c 
dc 
ANSWER: ^ 
+ 6 ^ 
1C = 2Jt
+r 
The complete solution is at www.wiley.com/college/nise. 
Skill-Assessment Exercise 2.5 
PROBLEM: Find the ramp response for a system whose transfer function is 
G(s) = > + 4)(* + 8) 
ANSWER: c(t) = - 
e 
1 
' 
-4f , J_p-8r 
"32 
32 
16 
The complete solution is at www.wiley.com/college/nise. 
WileyPius 
Control Solutions 
In general, a physical system that can be represented by a linear, time-invariant 
differential equation can be modeled as a transfer function. The rest of this chapter will 
be devoted to the task of modeling individual subsystems. We will learn how to represent 
electrical networks, translational mechanical systems, rotational mechanical systems, 
and electromechanical systems as transfer functions. As the need arises, the reader can 
consult the Bibliography at the end of the chapter for discussions of other types of 
systems, such as pneumatic, hydraulic, and heat-transfer systems {Cannon, 1967). 
^ 2.4 
Electrical Network Transfer Functions 
In this section, we formally apply the transfer function to the mathematical modeling 
of electric circuits including passive networks and operational amplifier circuits. 
Subsequent sections cover mechanical and electromechanical systems. 
Equivalent circuits for the electric networks that we work with first consist of 
three passive linear components: resistors, capacitors, and inductors." Table 2.3 
summarizes the components and the relationships between voltage and current and 
between voltage and charge under zero initial conditions. 
We now combine electrical components into circuits, decide on the input and 
output, and find the transfer function. Our guiding principles are Kirchhoff s laws. 
We sum voltages around loops or sum currents at nodes, depending on which 
technique involves the least effort in algebraic manipulation, and then equate the 
result to zero. From these relationships we can write the differential equations for 
the circuit. Then we can take the Laplace transforms of the differential equations 
and finally solve for the transfer function. 
2 Passive means that there is no internal source of energy. 

48 
Chapter 2 
Modeling in the Frequency Domain 
TABLE 2.3 Voltage-current, voltage-charge, and impedance relationships for capacitors, resistors, and inductors 
Component 
Voltage-current 
Impedance 
Admittance 
Current-voltage 
Voltage-charge 
Z(s) = V(s)/I(s) 
Y(s) =I(s)/V(s) 
Capacitor 
Resistor 
Inductor 
v(t) = Riit) 
di(t) 
i(t) = C dv(t) 
dt 
<t)=^q{t) 
i{t)=jv{t) 
v(t)=R 
di(t) 
1 r1 
v{t) = LdT 
m~H 
v{x)dx 
v(0 = L 
dq{t) 
dt 
d2q(t) 
dt2 
1 
R 
Ls 
Cs 
H 
Li-
Note: The following set of symbols and units is used throughout this book: v(t) — V (volts), i(t) - A (amps), q{t) - Q (coulombs), C - F (farads), 
R-Cl 
(ohms), G - fi (mhos), L - H (henries). 
Simple Circuits via Mesh Analysis 
Transfer functions can be obtained using Kirchhoffs voltage law and summing 
voltages around loops or meshes.3 We call this method loop or mesh analysis and 
demonstrate it in the following example. 
Example 2.6 
Transfer Function—Single Loop via the Differential Equation 
rW^ 
v(t) © 
i(t) 
vc-U) 
FIGURE 2.3 RLC network 
PROBLEM: Find the transfer function relating the capacitor voltage, Vc(s), to 
the input voltage, V(s) in Figure 2.3. 
SOLUTION: In any problem, the designer must first decide what the input and 
output should be. In this network, several variables could have been chosen to be 
the output—for example, the inductor voltage, the capacitor voltage, the resistor 
voltage, or the current. The problem statement, however, is clear in this case: We 
are to treat the capacitor voltage as the output and the applied voltage as the input. 
Summing the voltages around the loop, assuming zero initial conditions, 
yields the integro-differential equation for this network as 
L
^ 
+ Ri(t)+y^i(T)dT 
= v(t) 
Changing variables from current to charge using i(t) — dq{t)/dt yields 
L d2q(t) 
dt2 
A ^ + Jttt-KO 
From the voltage-charge relationship for a capacitor in Table 2.3, 
.7(f) = Cvc(t) 
Substituting Eq. (2.63) into Eq. (2.62) yields 
LC %^C*f> + vcW = , « 
(2.61) 
(2.62) 
(2.63) 
(2.64) 
A particular loop that resembles the spaces in a screen or fence is called a mesh. 

2.4 Electrical Network Transfer Functions 
49 
Taking the Laplace transform assuming zero initial conditions, rearranging terms, 
and simplifying yields 
V(x) 
(LCs2 + RCs + l)Vc{s) = V(s) 
(2.65) 
Solving for the transfer function, Vc(s)/V(s), we obtain 
VctA 
V(s) 
1/LC 
s2 + — s + 1 
(2.66) 
L 
LC 
as shown in Figure 2.4. 
J_ 
LC 
2 J 
, l 
LC 
VMS) 
FIGURE 2.4 Block diagram of 
series RLC electrical network 
Let us now develop a technique for simplifying the solution for future 
problems. First, take the Laplace transform of the equations in the voltage-current 
column of Table 2.3 assuming zero initial conditions. 
For the capacitor, 
v(s)=y{s) 
For the resistor, 
For the inductor, 
V{s) = RI(s) 
V(s) = Lsl(s) 
Now define the following transfer function: 
(2.67) 
(2.68) 
(2.69) 
(2.70) 
Notice that this function is similar to the definition of resistance, that is, the ratio of 
voltage to current. But, unlike resistance, this function is applicable to capacitors and 
inductors and carries information on the dynamic behavior of the component, since it 
represents an equivalent differential equation. We call this particular transfer function 
impedance. The impedance for each of the electrical elements is shown in Table 2.3. 
Let us now demonstrate how the concept of impedance simplifies the solution 
for the transfer function. The Laplace transform of Eq. (2.61), assuming zero initial 
conditions, is 
(LS + R + ±-)I(S) 
= V(S) 
(2.71) 
Notice that Eq. (2.71), which is in the form 
[Sum of impedances]/^) = [Sum of applied voltages] 
(2.72) 
suggests the series circuit shown in Figure 2.5. Also notice that the circuit of 
Figure 2.5 could have been obtained immediately from the circuit of Figure 2.3 
simply by replacing each element with its impedance. We call this altered circuit 
the transformed circuit. Finally, notice that the transformed circuit leads imme-
diately to Eq. (2.71) if we add impedances in series as we add resistors in series. 
Thus, rather than writing the differential equation first and then taking the 
Ls 
K(.v)Q 
/(.v) 
j _ 
Cs 
Vc(s) 
FIGURE 2.5 
network 
Laplace-transformed 

50 
Chapter 2 
Modeling in the Frequency Domain 
Laplace transform, we can draw the transformed circuit and obtain the Laplace 
transform of the differential equation simply by applying Kirchhoff's voltage law to 
the transformed circuit. We summarize the steps as follows: 
1. Redraw the original network showing all time variables, such as v(t), i(t), and 
vc(t), as Laplace transforms V(s), I(s), and Vc{s), respectively. 
2. Replace the component values with their impedance values. This replacement is 
similar to the case of dc circuits, where we represent resistors with their resistance 
values. 
We now redo Example 2.6 using the transform methods just described and bypass 
the writing of the differential equation. 
Example 2.7 
Transfer Function—Single Loop via Transform Methods 
PROBLEM: Repeat Example 2.6 using mesh analysis and transform methods 
without writing a differential equation. 
SOLUTION: Using Figure 2.5 and writing a mesh equation using the impedances as 
we would use resistor values in a purely resistive circuit, we obtain 
J* + * + gK(.v) 
Vis] 
Solving for I(s)/V(s), 
V(s) 
Ls + R + 
(2.73) 
(2.74) 
Cs 
But the voltage across the capacitor, VQ (S), is the product of the current and the 
impedance of the capacitor. Thus, 
Vc(s)=I(s)±-s 
(2.75) 
Solving Eq. (2.75) for I(s), substituting I(s) into Eq. (2.74), and simplifying yields 
the same result as Eq. (2.66). 
Simple Circuits via Nodal Analysis 
Transfer functions also can be obtained using Kirchhoff's current law and summing 
currents flowing from nodes. We call this method nodal analysis. We now demon-
strate this principle by redoing Example 2.6 using Kirchhoff's current law and the 
transform methods just described to bypass writing the differential equation. 
Example 2.8 
Transfer Function—Single Node via Transform Methods 
PROBLEM: Repeat Example 2.6 using nodal analysis and without writing a 
differential equation. 

2.4 Electrical Network Transfer Functions 
SOLUTION: The transfer function can be obtained by summing currents flowing out 
of the node whose voltage is Vc(s) in Figure 2.5. We assume that currents leaving the 
node are positive and currents entering the node are negative. The currents consist of 
the current through the capacitor and the current flowing through the series resistor 
and inductor. From Eq. (2.70), each I(s) = V(s)/Z(s). 
Hence, 
Vc(s) , Vc(s) - V{s) 
I/Cs 
R + Ls 
= 0 
(2.76) 
where Vc{s)/{1/Cs) is the current flowing out of the node through the capacitor, 
and [Vc(s) - V(s)]/(R 4- Ls) is the current flowing out of the node through the 
series resistor and inductor. Solving Eq. (2.76) for the transfer function, 
Vc{s)/V(s), 
we arrive at the same result as Eq. (2.66). 
Simple Circuits via Voltage Division 
Example 2.6 can be solved directly by using voltage division on the transformed 
network. We now demonstrate this technique. 
Example 2.9 
Transfer Function—Single Loop via Voltage Division 
PROBLEM: Repeat Example 2.6 using voltage division and the transformed 
circuit. 
SOLUTION: The voltage across the capacitor is some proportion of the input 
voltage, namely the impedance of the capacitor divided by the sum of the 
impedances. Thus, 
I/O 
Vc(s) 
= 
Ls + R + Cs) 
V(s) 
(2.77) 
Solving for the transfer function, Vc {s)/V(s), yields the same result as Eq. (2.66). 
Review Examples 2.6 through 2.9. Which method do you think is easiest for 
this circuit? 
The previous example involves a simple, single-loop electrical network. Many 
electrical networks consist of multiple loops and nodes, and for these circuits we 
must write and solve simultaneous differential equations in order to find the transfer 
function, or solve for the output. 
Complex Circuits via Mesh Analysis 
To solve complex electrical networks—those with multiple loops and nodes—using 
mesh analysis, we can perform the following steps: 
1. Replace passive element values with their impedances. 
2. Replace all sources and time variables with their Laplace transform. 
3. Assume a transform current and a current direction in each mesh. 

Chapter 2 
Modeling in the Frequency Domain 
4. Write Kirchhoffs voltage law around each mesh. 
5. Solve the simultaneous equations for the output. 
6. Form the transfer function. 
Let us look at an example. 
FIGURE 2.6 
a. Two-loop 
electrical network; 
b. transformed two-loop 
electrical network; 
c. block diagram 
Example 2.10 
Transfer Function—Multiple Loops 
PROBLEM: Given the network of Figure 2.6(a), find the transfer function, 
h(s)/V(s). 
SOLUTION: The first step in the solution is to convert the network into Laplace 
transforms for impedances and circuit variables, assuming zero initial conditions. 
The result is shown in Figure 2.6(b). The circuit with which we are dealing requires 
two simultaneous equations to solve for the transfer function. These equations can 
be found by summing voltages around each mesh through which the assumed 
currents, I\(s) and I2(s), flow. Around Mesh 1, where Ii(s) flows, 
Rih(s) + Lsh(s) - Lsl2{s) = V{s) 
Around Mesh 2, where /2(^) flows, 
Lsl2(s) + R2h(s) + £-/2(s) - Lsh (s) = 0 
(2.78) 
(2.79) 
iv £0 
V(.s) 
LCs2 
(/?,+ R2)LCs2+(RxR2C + L)s + /?, 
his) 
(c) 

2.4 Electrical Network Transfer Functions 
53 
Combining terms, Eqs. (2.78) and (2.79) become simultaneous equations in I\ (s) 
and his): 
(Ri + Ls)h (s) 
- Lsl2(s) = V(s) 
(2.80a) 
- Lsh(s) + (LS + R2 + ^)I2{S)=0 
(2.80b) 
We can use Cramer's rule (or any other method for solving simultaneous 
equations) to solve Eq. (2.80) for h(s).4 Hence, 
where 
h(s) = 
A = 
(Ri+Ls) 
-Ls 
A 
{Ri + Ls) 
-Ls 
( 
V(s) 
0 
LsV(s) 
A 
-Ls 
^+* +s) 
(2.8i; 
Forming the transfer function, G(s), yields 
I_2[sl_Ls__ 
LOt_ 
V(s) ~ A ~ {St + R2)LCs2 + {RiR2C + L)s + Rx 
G(s) = 
(2.82) 
as shown in Figure 2.6(c). 
We have succeeded in modeling a physical network as a transfer function: The 
network of Figure 2.6(a) is now modeled as the transfer function of Figure 2.6(c). 
Before leaving the example, we notice a pattern first illustrated by Eq. (2.72). The 
form that Eq. (2.80) take is 
Sum of 
impedances 
. around Mesh 1 
Sum of 
impedances 
common to the 
two meshes 
/ i ( * ) 
" 
/,(*) + 
Sum of 
impedances 
common to the 
two meshes 
Sum of 
impedances 
around Mesh 2 
h(s) = 
his) = 
' Sum of applied 
voltages around 
Meshl 
Sum of applied 
voltages around 
Mesh 2 
(2.83a) 
(2.83b) 
Recognizing the form will help us write such equations rapidly; for example, mechani-
cal equations of motion (covered in Sections 2.5 and 2.6) have the same form. 
Students who are performing the MATLAB exercises and want to explore 
the added capability of MATLAB's Symbolic Math Toolbox should now 
run ch2sp4 in Appendix F at www.wiley.com/college/nise, where 
Example 2.10 is solved. You will learn how to use the Symbolic 
Math Toolbox to solve simultaneous equations using Cramer's 
rule. Specifically, the Symbolic Math Toolbox will be used to solve 
for the transfer function in Eq. (2 .82) using Eq. (2.80). 
Symbolic Math 
4 See Appendix G (Section G.4) at www.wiley.com/college/nise for Cramer's rule. 

54 
Chapter 2 
Modeling in the Frequency Domain 
Complex Circuits via Nodal Analysis 
Often, the easiest way to find the transfer function is to use nodal analysis rather than 
mesh analysis. The number of simultaneous differential equations that must be 
written is equal to the number of nodes whose voltage is unknown. In the previous 
example we wrote simultaneous mesh equations using Kirchhoff's voltage law. For 
multiple nodes we use Kirchhoff's current law and sum currents flowing from each 
node. Again, as a convention, currents flowing from the node are assumed to be 
positive, and currents flowing into the node are assumed to be negative. 
Before progressing to an example, let us first define admittance, Y(s), as the 
reciprocal of impedance, or 
Y(s) = Z(s) 
V(s) 
(2.84) 
When writing nodal equations, it can be more convenient to represent circuit 
elements by their admittance. Admittances for the basic electrical components 
are shown in Table 2.3. Let us look at an example. 
Example 2.11 
Transfer Function—Multiple Nodes 
PROBLEM: Find the transfer function, Vc(s)/V(s), 
for the circuit in Figure 2.6(b). 
Use nodal analysis. 
SOLUTION: For this problem, we sum currents at the nodes rather than sum 
voltages around the meshes. From Figure 2.6(b) the sum of currents flowing from 
the nodes marked VL(S) and Vc(s) are, respectively, 
VL(S)-V(S) 
| VL(S) 
t 
VL(s)-Vc(s)_Q 
HI 
Ls 
R-, 
CsVc{s) 
+ 
V^-V^=0 
Ri 
(2.85a) 
(2.85b) 
V(s) 
G[G2 
C 
s 
, 
G,G2L+C 
G2 
V(is) 
FIGURE 2.7 Block diagram of the network of 
Figure 2.6 
Rearranging and expressing the resistances as conductances,5 G\ = 1/Ri and 
G2 = I/R2, we obtain, 
O- 
G: \-^)vL(s) 
-G2Vc(s) 
= V(s)G1 
(2.86a) 
(2.86b) 
(2.87) 
Ls, 
-G2VL(s) 
+ (G2 + Cs)Vc(s) = 0 
Solving for the transfer function, Vc(s)/V(s), 
yields 
G1G2 
Vc(s) 
V(s) 
C 
(Gi + G2)s2 + 
— 
s + — 
as shown in Figure 2.7. 
5 In general, admittance is complex. The real part is called conductance and the imaginary part is called 
susceptance. But when we take the reciprocal of resistance to obtain the admittance, a purely real quantity 
results. The reciprocal of resistance is called conductance. 

2.4 Electrical Network Transfer Functions 
Another way to write node equations is to replace voltage sources by 
current sources. A voltage source presents a constant voltage to any load; 
conversely, a current source delivers a constant current to any load. Practically, 
a current source can be constructed from a voltage source by placing a large 
resistance in series with the voltage source. Thus, variations in the load do not 
appreciably change the current, because the current is determined approxi-
mately by the large series resistor and the voltage source. Theoretically, we rely 
on Norton's theorem, which states that a voltage source, V(s), in series with an 
impedance, Zs(s), can be replaced by a current source, I(s) — V(s)/Zs(s), in 
parallel with Zs(s). 
In order to handle multiple-node electrical networks, we can perform the 
following steps: 
1. Replace passive element values with their admittances. 
2. Replace all sources and time variables with their Laplace transform. 
3. Replace transformed voltage sources with transformed current sources. 
4. Write Kirchhoffs current law at each node. 
5. Solve the simultaneous equations for the output. 
6. Form the transfer function. 
Let us look at an example. 
Transfer Function—Multiple Nodes with Current Sources 
PROBLEM: For the network of Figure 2.6, find the transfer function, 
Vc(s)/V(s), using nodal analysis and a transformed circuit with current 
sources. 
SOLUTION: Convert all impedances to admittances and all voltage 
sources in series with an impedance to current sources in parallel with 
an admittance using Norton's theorem. 
Redrawing Figure 2.6(b) to reflect the changes, we obtain Fig-
ure 2.8, where Gi = l/R\, G2 = I/R2, and the node voltages—the 
voltages across the inductor and the capacitor—have been identified 
as VL(S) and Vc{s), respectively. Using the general relationship, 
I(s) = Y(s)V{s), and summing currents at the node VL{S), 
GIVL(S)+^VL(S) 
+ G2[VL(s) - Vc{*)] = VWh 
Summing the currents at the node Vc{s) yields 
CsVc(s) + 
G2[Vc(s)-VL(s)}=0 
Combining terms, Eqs. (2.88) and (2.89) become simultaneous equations in Vc(s) 
and Vi (s), which are identical to Eq. (2.86) and lead to the same solution as Eq. (2.87). 
An advantage of drawing this circuit lies in the form of Eq. (2.86) and its 
direct relationship to Figure 2.8, namely 
V(s)G 
FIGURE 2.8 Transformed network 
ready for nodal analysis 
(2.88) 
(2.89) 

56 
Chapter 2 
Modeling in the Frequency Domain 
Sum of admittances 
connected to Node 1 
Sum of admittances 
common to the two 
nodes 
VL(S) ~ 
VL(s) + 
Sum of admittances 
common to the two 
nodes 
Sum of admittances 
connected to Node 2 
Vc(s) = 
Vc(s) = 
Sum of applied 
currents at Node 1 
(2.90a) 
Sum of applied 
currents at Node 2 
(2.90b) 
A Problem-Solving Technique 
In all of the previous examples, we have seen a repeating pattern in the equations 
that we can use to our advantage. If we recognize this pattern, we need not write the 
equations component by component; we can sum impedances around a mesh in the 
case of mesh equations or sum admittances at a node in the case of node equations. 
Let us now look at a three-loop electrical network and write the mesh equations by 
inspection to demonstrate the process. 
FIGURE 2.9 Three-loop 
electrical network 
Example 2.13 
Mesh Equations via Inspection 
PROBLEM: Write, but do not solve, the mesh equations for the network shown in 
Figure 2.9. 
SOLUTION: Each of the previous problems has illustrated that the mesh 
equations and nodal equations have a predictable form. We use that knowledge 
to solve this three-loop problem. The equation for Mesh 1 will have the following 
form: 

2.4 Electrical Network Transfer Functions 
57 
Sum of 
impedances 
around Mesh 
-1 
his) -
L. 
-
\ 
Sum of 
impedances 
common to 
Mesh 1 and 
Mesh 2 
[ 
Sum of 
impedances 
common to 
Mesh 1 and 
Mesh 3 
his) 
his) = 
" Sum of applied 1 
voltages around 
Mesh 1 
Similarly, Meshes 2 and 3, respectively, are 
r 
-
Sum of 
impedances 
common to 1 
Mesh 1 and 
Mesh 2 
r 
r 
ri(*) + 
a 
Sum of 
impedances 
round Mesh 2 _ 
his)-
Sum of 
1 
impedances 
common to 
Mesh 2 and 
Mesh 3 
. 
his) 
and 
Sum of 
impedances 
common to 
Mesh 1 and 
Mesh 3 
his) -
+ 
Substituting the values from 
Sum of 
impedances 
common to 1 
Mesh 2 and 
Mesh 3 
Sum of 
impedances 
around Mesh C 
Figure 2.9 int 
T2is) 
his) = 
0 Eqs. (2. 
f Sum of applied 
voltages around 
Mesh 3 
91) through (2.93) 
+(25 + 2)h(s) - (2s + l)/2(s) 
- Us) = Vis) 
-(25 + l)/i(5) + (95 + 1)/2(5) 
- 45/3(5) = 0 
- his) 
- 45/2(5) + (45 + 1+1)/3(5) = 0 
which can be solved simultaneously for any desired transfer func 
example, /3(5)/1^(5). 
(2.91) 
= 
F Sum of appied 
voltages around 
. 
(2.92) 
(2.93) 
yields 
(2.94a) 
(2.94b) 
(2.94c) 
ion, for 
Mesh 2 
Itylt 2.8 
Use the following MATLAB 
and Symbolic Math Toolbox 
statements to help you solve for 
the electrical currents in Eq. 
(2.94). 
syms s 11 12 13 V 
A=[(2*s + 2) 
-(2*s + D . . . 
- 1 
- ( 2 * s + l) 
(9*s + l ) . . . 
- 4 * s 
- 1 - 4 * s . . . 
(4*s + l + l / s ) ] ; 
B=[I1;I2;I3]; 
C=[V;0;0]; 
B = inv(A)*C; 
pretty(B) 

58 
Chapter 2 
Modeling in the Frequency Domain 
+ V\(t) 
+!•-.( n 
m 
m 
(0 
FIGURE 2.10 
a. Operational amplifier; b. schematic for an inverting operational amplifier; 
c. inverting operational amplifier configured for transfer function realization. Typically, the 
amplifier gain, A, is omitted. 
Passive electrical circuits were the topic of discussion up to this point. We now 
discuss a class of active circuits that can be used to implement transfer functions. 
These are circuits built around an operational amplifier. 
Operational Amplifiers 
An operational amplifier, pictured in Figure 2.10(a), is an electronic amplifier used as 
a basic building block to implement transfer functions. It has the following 
characteristics: 
1. Differential input, V2(t) - v\(t) 
2. High input impedance, Z/ = oo (ideal) 
3. Low output impedance, Z0 = 0 (ideal) 
4. High constant gain amplification, A = oo (ideal) 
The output, v0(t), is given by 
v0(t)=A(v2(t)-Vl(t)) 
(2.95) 
Inverting Operational Amplifier 
If vi{t) is grounded, the amplifier is called an inverting operational amplifier, as 
shown in Figure 2.10(6). For the inverting operational amplifier, we have 
v0(t) = 
-Avi(t) 
(2.96) 
If two impedances are connected to the inverting operational amplifier as 
shown in Figure 2.10(c), we can derive an interesting result if the amplifier has the 
characteristics mentioned in the beginning of this subsection. If the input impedance 
to the amplifier is high, then by Kirchhoff's current law, Ia(s) = 0 and I] (s) — —h{s)-

2.4 Electrical Network Transfer Functions 
59 
Also, since the gain A is large, v\(t) « 0 . Thus, I\(s) = Vj{s)/Z\{s), 
and -h(s) 
= 
—V0(s)/Z2{s). Equating the two currents, V0(s)/Z2{s) = —V,(s)/Zi (s), or the transfer 
function of the inverting operational amplifier configured as shown in Figure 2.10(c) is 
Vo(s) _ 
Z2(s) 
Vi(s) 
Zx{s) 
(2.97) 
Example 2.14 
Transfer Function—Inverting Operational Amplifier Circuit 
PROBLEM: Find the transfer function, V0(s)/Vi(s), 
for the circuit given in 
Figure 2.11. 
I';! t) 
5.6/iF 
R2= 
C2 = 
220 kQ 
0.1 juF 
v,(0 
360 kfi 
r„(0 
FIGURE 2.11 
Inverting operational 
amplifier circuit for Example 2.14 
SOLUTION: The transfer function of the operational amplifier circuit is given by 
Eq. (2.97). Since the admittances of parallel components add, Z\{s) is the recipro-
cal of the sum of the admittances, or 
r, is 
1 
1 
360 x 103 
Zi W = 
r = 
i 
= ^ T T T T T 
(2-98) 
Ci^ + 4- 5.6xlO-<W 
l-—5 
2¾ 
360 x 103 
2.016s + 1 
For Z2(A") the impedances add, 
or 
1 
107 
Z 2 (s) = R2+-— 
= 220 x 103 + 
— 
C2s 
s 
Substituting Eqs. (2.98) and (2.99) into Eq. (2.97) and simplifying, we get 
V0(s) _ 
g? + 45.955 + 22.55 
(2.99) 
(2.100) 
The resulting circuit is called a PID controller and can be used to improve the 
performance of a control system. We explore this possibility further in Chapter 9. 
Noninverting Operational Amplifier 
Another circuit that can be analyzed for its transfer function is the noninverting 
operational amplifier circuit shown in Figure 2.12. We now derive the transfer 

60 
Vis) 
A/W^ 
V,{s) 
Vjs) 
Z,(s) 
FIGURE 2.12 General 
noninverting operational 
amplifier circuit 
Chapter 2 
Modeling in the Frequency Domain 
function. We see that 
V0(s)=A(Vi(s)-V1(S)) 
But, using voltage division, 
Z1(s) 
V1(s) = 
Vo(s) 
(2.101) 
(2.102) 
Z1{s) + Z2(s) 
Substituting Eq. (2.102) into Eq. (2.101), rearranging, and simplifying, we obtain 
Vo(s) 
A 
KiW 
l+AZl(s)/(Z1(s) 
+ Z2(s)) 
For large A, we disregard unity in the denominator and Eq. (2.103) becomes 
(2.103) 
V0{s) 
Z1(s)+Z2(s) 
Vi(s) 
Zi(s) 
(2.104) 
Let us now look at an example. 
'.(n 
^ 
Example 2.15 
Transfer Function—Noninverting Operational Amplifier Circuit 
PROBLEM: Find the transfer function, V0(s)/Vi(s), 
for the circuit given in 
Figure 2.13. 
v,(0 
R2 
'•„(') 
1 
FIGURE 2.13 Noninverting 
operational amplifier circuit for 
Example 2.15 
SOLUTION: We find each of the impedance functions, Z\ (s) and Z2 (s), and then 
substitute them into Eq. (2.104). Thus, 
1 
and 
Zi(s)=Ri 
+ 
Z2(s) = 
C\s 
R2{l/C2s) 
R2 + {l/C2s) 
Substituting Eqs. (2.105) and (2.106) into Eq. (2.104) yields 
V0(s) 
CtCiKzRts2 + (C2R2 + CiR2 + C i % > + 1 
Vi(s) 
C2CxR2R^2 
+ (C2R2 + CiRija + 1 
(2.105) 
(2.106) 
(2.107) 
Skill-Assessment Exercise 2.6 
PROBLEM: Find the transfer function, G(s) = VL(s)/V(s), 
for the circuit given in 
Figure 2.14. Solve the problem two ways—mesh analysis and nodal analysis. Show 
that the two methods yield the same result. 

2.5 Translational Mechanical System Transfer Functions 
61 
1H 
1Q 
A/W 
A/W-
1-(/) © 
1 H 
1 H 
+ 
FIGURE 2.14 
Electric circuit for Skill-
Assessment Exercise 2.6 
ANSWER: VL(s)/V(s) 
= {s2+2s 
+ \)/{s2 
+ 55 + 2) 
The complete solution is at www.wiley.com/college/nise. 
Skill-Assessment Exercise 2.7 
PROBLEM: If Z\{s) is the impedance of a 10 \XF capacitor and Z%{s) is the 
impedance of a 100 kfl resistor, find the transfer function, G(s) = V0(s)/Vj(s), 
if these components are used with (a) an inverting operational amplifier and (b) a 
noninverting amplifier as shown in Figures 2.10(c) and 2.12, respectively. 
ANSWER: G(s) = —s for an inverting operational amplifier; G(s) 
noninverting operational amplifier. 
The complete solution is at www.wiley.com/college/nise. 
• s + l for a 
WileyPLUS 
Control Solutions 
In this section, we found transfer functions for multiple-loop and multiple-node 
electrical networks, as well as operational amplifier circuits. We developed mesh and 
nodal equations, noted their form, and wrote them by inspection. In the next section 
we begin our work with mechanical systems. We will see that many of the concepts 
applied to electrical networks can also be applied to mechanical systems via analo-
gies—from basic concepts to writing the describing equations by inspection. This 
revelation will give you the confidence to move beyond this textbook and study 
systems not covered here, such as hydraulic or pneumatic systems. 
( 
2.5 Translational Mechanical System 
Transfer Functions 
We have shown that electrical networks can be modeled by a transfer function, G(s), 
that algebraically relates the Laplace transform of the output to the Laplace transform 
of the input. Now we will do the same for mechanical systems. In this section we 
concentrate on translational mechanical systems. In the next section we extend the 
concepts to rotational mechanical systems. Notice that the end product, shown in 
Figure 2.2, will be mathematically indistinguishable from an electrical network. 
Hence, an electrical network can be interfaced to a mechanical system by cascading 
their transfer functions, provided that one system is not loaded by the other.6 
6 The concept of loading is explained further in Chapter 5. 

Chapter 2 
Modeling in the Frequency Domain 
TABLE 2.4 Force-velocity, force-displacement, and impedance translational relationships 
for springs, viscous dampers, and mass 
Impedence 
Component 
Force-velocity 
Force-displacement 
ZM(S) = F(s)/X(s) 
Spring 
—I—•*• v(/) 
•
_
: 
K 
f{t)=Kf0v(x)dT 
f[t)=Kx{t) 
K 
Viscous damper 
*• xit) 
^m 
m=fxt) 
msaf*iF 
& 
Mass 
•*- -v(0 
A . M 
//2, 
M 
-+• fit) 
m=Md-f 
/ w = * ^ 
Note: The following set of symbols and units is used throughout this book: /(/) = N (newtons), 
x(t) = m (meters), v(t) = m/s (meters/second), K = N/m (newtons/meter), fv = N-s/m(newton-seconds/ 
meter), M = kg (kilograms = newton-seconds2/meter). 
Mechanical systems parallel electrical networks to such an extent that there are 
analogies between electrical and mechanical components and variables. Mechanical 
systems, like electrical networks, have three passive, linear components. Two of 
them, the spring and the mass, are energy-storage elements; one of them, the viscous 
damper, dissipates energy. The two energy-storage elements are analogous to the 
two electrical energy-storage elements, the inductor and capacitor. The energy 
dissipator is analogous to electrical resistance. Let us take a look at these mechanical 
elements, which are shown in Table 2.4. In the table, K,fv, and M are called spring 
constant, coefficient of viscous friction, and mass, respectively. 
We now create analogies between electrical and mechanical systems by 
comparing Tables 2.3 and 2.4. Comparing the force-velocity column of Table 2.4 
to the voltage-current column of Table 2.3, we see that mechanical force is analogous 
to electrical voltage and mechanical velocity is analogous to electrical current. 
Comparing the force-displacement column of Table 2.4 with the voltage-charge 
column of Table 2.3 leads to the analogy between the mechanical displacement and 
electrical charge. We also see that the spring is analogous to the capacitor, the 
viscous damper is analogous to the resistor, and the mass is analogous to the 
inductor. Thus, summing forces written in terms of velocity is analogous to summing 
voltages written in terms of current, and the resulting mechanical differential 
equations are analogous to mesh equations. If the forces are written in terms of 
displacement, the resulting mechanical equations resemble, but are not analogous 
to, the mesh equations. We, however, will use this model for mechanical systems so 
that we can write equations directly in terms of displacement. 
Another analogy can be drawn by comparing the force-velocity column of 
Table 2.4 to the current-voltage column of Table 2.3 in reverse order. Here the 
analogy is between force and current and between velocity and voltage. Also, the 

2.5 Translational Mechanical System Transfer Functions 
63 
spring is analogous to the inductor, the viscous damper is analogous to the resistor, 
and the mass is analogous to the capacitor. Thus, summing forces written in terms of 
velocity is analogous to summing currents written in terms of voltage and the 
resulting mechanical differential equations are analogous to nodal equations. We 
will discuss these analogies in more detail in Section 2.9. 
We are now ready to find transfer functions for translational mechanical 
systems. Our first example, shown in Figure 2.15(a), is similar to the simple RLC 
network of Example 2.6 (see Figure 2.3). The mechanical system requires just one 
differential equation, called the equation of motion, to describe it. We will begin by 
assuming a positive direction of motion, for example, to the right. This assumed 
positive direction of motion is similar to assuming a current direction in an electrical 
loop. Using our assumed direction of positive motion, we first draw a free-body 
diagram, placing on the body all forces that act on the body either in the direction of 
motion or opposite to it. Next we use Newton's law to form a differential equation of 
motion by summing the forces and setting the sum equal to zero. Finally, assuming 
zero initial conditions, we take the Laplace transform of the differential equation, 
separate the variables, and arrive at the transfer function. An example follows. 
Example 2.16 
Transfer Function—One Equation of Motion 
^m^ 
.1-(/) 
M 
J\D 
F{s) 
1 
Ms2+fvs + K 
X(.v) 
(a) 
PROBLEM: Find the transfer function, X(s)/F{s), for the system of Figure 2.15(a). 
SOLUTION: Begin the solution by drawing the free-body diagram shown in Figure 
2.16(a). Place on the mass all forces felt by the mass. We assume the mass is 
traveling toward the right. Thus, only the applied force points to the right; all other 
forces impede the motion and act to oppose it. Hence, the spring, viscous damper, 
and the force due to acceleration point to the left. 
We now write the differential equation of motion using Newton's law to sum 
to zero all of the forces shown on the mass in Figure 2.16(a): 
„AM + /*W 
/v 
M 
(it2 
Kx(t) 
d.x 
dt 
Kx(t)=f(t) 
dt 
dt2 
M 
— x(t) 
•M 
KX(s) 
fcX(s) 
Ms2X(s) 
(2.108) 
-X(s) 
M 
m 
FIGURE 2.15 
a. Mass, spring, 
and damper system; b. block 
diagram 
FIGURE 2.16 
a. Free-body 
diagram of mass, spring, and 
damper system; b. trans-
formed free-body diagram 

64 
Chapter 2 
Modeling in the Frequency Domain 
Taking the Laplace transform, assuming zero initial conditions, 
Ms2X{s) + fvsX{s) + KX(s) = F(s) 
or 
{Ms2+fvs + K)X(s) = F(s) 
Solving for the transfer function yields 
c(-) 
x{s) 
x 
^{S) 
F(s) 
MSi+fvs + K 
which is represented in Figure 2.15(6). 
(2.109) 
(2.110) 
(2.111) 
Now can we parallel our work with electrical networks by circumventing the 
writing of differential equations and by defining impedances for mechanical 
components? If so, we can apply to mechanical systems the problem-solving 
techniques learned in the previous section. Taking the Laplace transform of the 
force-displacement column in Table 2.4, we obtain for the spring, 
F(s) = KX{s) 
for the viscous damper, 
and for the mass, 
F(s)=fvsX(s) 
F(s) = Ms2X{s) 
If we define impedance for mechanical components as 
ZM(s) = m 
X(s) 
(2.112) 
(2.113) 
(2.114) 
(2.115) 
and apply the definition to Eqs. (2.112) through (2.114), we arrive at the impedances 
of each component as summarized in Table 2.4 (Raven, 1995)? 
Replacing each force in Figure 2.16(a) by its Laplace transform, which is in the 
format 
F(s) = ZM(s)X(s) 
(2.116) 
we obtain Figure 2.16(6), from which we could have obtained Eq. (2.109) immedi-
ately without writing the differential equation. From now on we use this approach. 
7 Notice that the impedance column of Table 2.4 is not a direct analogy to the impedance column of 
Table 2.3, since the denominator of Eq. (2.115) is displacement. A direct analogy could be derived by 
defining mechanical impedance in terms of velocity as F(s)/V(s). We chose Eq. (2.115) as a convenient 
definition for writing the equations of motion in terms of displacement, rather than velocity. The 
alternative, however, is available. 

2.5 Translational Mechanical System Transfer Functions 
Finally, notice that Eq. (2,110) is of the form 
[Sum of impedances]^.?) = [Sum of applied forces] 
(2.117) 
which is similar, but not analogous, to a mesh equation (see footnote 7). 
Many mechanical systems are similar to multiple-loop and multiple-node 
electrical networks, where more than one simultaneous differential equation is 
required to describe the system. In mechanical systems, the number of equations of 
motion required is equal to the number of linearly independent motions. Linear 
independence implies that a point of motion in a system can still move if all other 
points of motion are held still. Another name for the number of linearly independent 
motions is the number of degrees of freedom. This discussion is not meant to imply 
that these motions are not coupled to one another; in general, they are. For example, 
in a two-loop electrical network, each loop current depends on the other loop 
current, but if we open-circuit just one of the loops, the other current can still exist if 
there is a voltage source in that loop. Similarly, in a mechanical system with two 
degrees of freedom, one point of motion can be held still while the other point of 
motion moves under the influence of an applied force. 
In order to work such a problem, we draw the free-body diagram for each point 
of motion and then use superposition. For each free-body diagram we begin by holding 
all other points of motion still and finding the forces acting on the body due only to its 
own motion. Then we hold the body still and activate the other points of motion one at 
a time, placing on the original body the forces created by the adjacent motion. 
Using Newton's law, we sum the forces on each body and set the sum to zero. 
The result is a system of simultaneous equations of motion. As Laplace transforms, 
these equations are then solved for the output variable of interest in terms of the 
input variable from which the transfer function is evaluated. Example 2.17 demon-
strates this problem-solving technique. 
Example 2.17 
Transfer Function—Two Degrees of Freedom 
PROBLEM: Find the transfer function, X2(s)/F(s), for the system of Figure 2.17(a). 
xiU) 
Vi(/) 
K1H 
rl-r'-r-Tj.LU^T'T-Err 
F(s) 
<&/*%£ 
X,(.v) 
m 
FIGURE 2.17 
a.Two-
degrees-of-freedom 
translational 
mechanical system;8 
b. block diagram 
Friction shown here and throughout the book, unless otherwise indicated, is viscous friction. Thus, fv\ 
and fa are not Coulomb friction, but arise because of a viscous interface. 
Virtual Experiment 2.1 
Automobile Suspension 
Put theory into practice 
exploring the dynamics of 
another two degree of free-
dom system—an automobile 
suspension system driving 
over a bumpy road demon-
strated with the Quanser 
Active Suspension System 
modeled in Lab VIEW. 
Virtual experiments are found 
on WileyPLUS. 

66 
Chapter 2 
Modeling in the Frequency Domain 
SOLUTION: The system has two degrees of freedom, since each mass can be moved 
in the horizontal direction while the other is held still. Thus, two simultaneous 
equations of motion will be required to describe the system. The two equations 
come from free-body diagrams of each mass. Superposition is used to draw the free-
body diagrams. For example, the forces on Mi are due to (1) its own motion and 
(2) the motion of Mi transmitted to M\ through the system. We will consider these 
two sources separately. 
If we hold Mi still and move M\ to the right, we see the forces shown in 
Figure 2.18(A). If we hold M\ still and move Mi to the right, we see the forces shown 
in Figure 2.18(6). The total force on M\ is the superposition, or sum, of the forces 
just discussed. This result is shown in Figure 2.18(c). For Mi, we proceed in a similar 
fashion: First we move Mi to the right while holding M\ still; then we move M\ to 
the right and hold Mi still. For each case we evaluate the forces on Mi, The results 
appear in Figure 2.19. 
K,X,(s) 
M{s2Xi(s) 
Mi 
AT2W 
M, 
K2X2(s) 
FIGURE 2.18 
a. Forces on 
Mi due only to motion of M\; 
b. forces on M\ due only to 
motion of Mi', c. all forces 
on Mi 
(A-, + tf2)X,(5) 
(fv+fv}sXAs) 
F(s) 
M]S
2X\(s) 
Mi 
K2X2(s) 
(c) 
FIGURE 2.19 
a. Forces on 
M2 due only to motion of M2\ 
b. forces on Mi due only to 
motion of Mi; c. all forces 
onM2 
K2X2{s) +— 
fV2sX2(s) 
+-
fVisX2(s) 
+-
M2s2X2(s) +— 
M2 — 
K3X2(s) 
(a) 
(K2 +KT,)X2(S) * 
<fv2+J 
A i2s2X 
2® +— 
&>••+— 
M2 
K2Xi(s) — * 
f^xm 
-+ 
-+ KzW 
M2 
(b) 
(c) 
The Laplace transform of the equations of motion can now be written from 
Figures 2.18(c) and 2.19(c) as 
[MlS
2(fVi + fVi)s + (K{ + K2)]X, (s) - (fV3s + K2)Xi{s) = F(s) 
(2.118a) 
~{fV}s + K2)X1{s) + [M2s2 + (fV2 + & > + (K2 + K3)]X2(s) 
= 0 
(2.118b) 

2.5 Translational Mechanical System Transfer Functions 
From this, the transfer function, X2{s)/F(s), is 
^
=
^
=
^ 
*«* 
as shown in Figure 2.17(6) where 
A = 
[M,s2 + (f„ + / „ > + (K, + K2)} 
-{fVis + K2) 
-ifV3s + K2) 
[M2s2 + (fV2 + /v,> + (K2 + Ks)] 
67 
Notice again, in Eq. (2.118), that the form of the equations is similar to 
electrical mesh equations: 
Sum of 
impedances 
connected 
to the motion 
atxi 
Sum of 
impedances 
between 
x\ and x2 
XAs) -
Xi(s) + 
Sum of 
impedances 
between 
Xj andx? 
Sum of 
impedances 
connected 
to the motion 
at x2 
Xo(s) = 
X2(s) = 
Sum of 
applied forces 
at X] 
Sum of 
applied forces 
at x2 
(2.120a) 
(2.120b) 
The pattern shown in Eq. (2.120) should now be familiar to us. Let us use the concept 
to write the equations of motion of a three-degrees-of-freedom mechanical network 
by inspection, without drawing the free-body diagram. 
Example 2.18 
Equations of Motion by Inspection 
PROBLEM: Write, but do not solve, the equations of motion for the mechanical 
network of Figure 2.20. 
4-
^ ^ K X K P -
v,(/) 
M3 
/W, 
!1 
: __:._!_ i_i_i_L 
A/2 
fj 
+*x2M 
IV) 
FIGURE 2.20 Three-
degrees-of-freedom 
translational mechanical 
system 

68 
Chapter 2 
Modeling in the Frequency Domain 
SOLUTION: The system has three degrees of freedom, since each of the three 
masses can be moved independently while the others are held still. The form of the 
equations will be similar to electrical mesh equations. For Mi, 
Sum of 
impedances 
connected 
to the motion 
at*i 
Xi(s) 
-
Sum of 
impedances 
between 
xi and x2 
Sum of 
impedances 
between 
x\ and.*3 
Similarly, for Mi and M3, respectively, 
X2(s) 
X3(s) = 
Sum of 
applied forces 
atJti 
Sum of 
impedances 
between 
xi and X2 
Xi(s) + 
Sum of 
impedances 
between 
xi and*3 
*ito -
Sum of 
impedances 
connected 
to the motion 
at x2 
Sum of 
impedances 
between 
x2 and x3 
Sum of 
impedances 
between 
x2 and x3 
X2(s) 
Xi(a) = 
Sum of 
applied forces 
atx2 
X2(s) 
+ 
Sum of 
1 
impedances 
connected 
to the motion 
atx3 
X3(s) = 
f 
Sum of 
applied forces 
at X3 
(2.121) 
(2.122) 
(2.123) 
Mi has two springs, two viscous dampers, and mass associated with its motion. 
There is one spring between Mi and M2 and one viscous damper between Mi and 
M3. Thus, using Eq. (2.121), 
[MlS
2 + (fn +fVi)s + (Ki + K2)]Xi(s) - K2X2(s) -fVisX3(s) 
= 0 
(2.124) 
Similarly, using Eq. (2.122) for M2, 
-KiXiW 
+ [M2s2 + (fV2 +fV4)s + K2]X2(s) -fV4sX3(s) = F(s) 
(2.125) 

2.6 Rotational Mechanical System Transfer Functions 
and using Eq. (2.123) for M3, 
\M3s2 + {fv%+fJs}X3(s)^Q 
(2.126) 
Equations (2.124) through (2.126) are the equations of motion. We can solve them 
for any displacement, X\(s), ^2(5), or .^3(5), or transfer function. 
Skill-Assessment Exercise 2.8 
PROBLEM: Find the transfer function, G(s) = X2{s)/F(s), 
for the translational 
mechanical system shown in Figure 2.21. 
/V|=lN-s/m 
fU) 
1 
fv = I N-s/m 
.V|(/) 
vM/> 
M, = 1 kg 
K= 1 N/m 
fVi= 1 N-s/m 
— M2= 1 kg 
/ v = 1 N-s/m 
ANSWER: : G(*) = 
35 + 1 
5(5 3+75 2+ 5^ + 1) 
The complete solution is at www.wiley.com/college/nise. 
FIGURE 2.21 Translational 
mechanical system for Skill-
Assessment Exercise 2.8 
( 
2.6 Rotational Mechanical System 
Transfer Functions 
Having covered electrical and translational mechanical systems, we now move on 
to consider rotational mechanical systems. Rotational mechanical systems are 
handled the same way as translational mechanical systems, except that torque 
replaces force and angular displacement replaces translational displacement. The 
mechanical components for rotational systems are the same as those for transla-
tional systems, except that the components undergo rotation instead of translation. 
Table 2.5 shows the components along with the relationships between torque and 
angular velocity, as well as angular displacement. Notice that the symbols for the 

Chapter 2 
Modeling in the Frequency Domain 
TABLE 2.5 
Torque-angular velocity, torque-angular displacement, and impedance rotational 
relationships for springs, viscous dampers, and inertia 
Component 
Torque-angular 
velocity 
Torque-angular 
displacement 
Impedence 
ZM(s) = T(s)/0(s) 
Til) 6U) 
•—' 
K 
Viscous -/•(/) e{t) 
damper r^. 
T(t) = K Jlco(r)dr 
T{t) = Dco{t) 
77»=/ 
dcojt) 
dt 
no = mt) 
T(t)=D d0(() 
dt 
7(0=/ 
d29(t) 
dt2 
Ds 
Js2 
Note: The following set of symbols and units is used throughout this book: T(t) - N-m (newton-meters), 
9(t) — rad(radians), to(t) - rad/s(radians/second), K — N-m/rad(newton- meters/radian), D — N-m-s/rad 
(newton- meters-seconds/radian). J - kg-m2(kilograms-meters2 - newton-meters-seconds2/radian). 
components look the same as translational symbols, but they are undergoing 
rotation and not translation. 
Also notice that the term associated with the mass is replaced by inertia. The 
values of K, D, and J are called spring constant, coefficient of viscous friction, and 
moment of inertia, respectively. The impedances of the mechanical components are 
also summarized in the last column of Table 2.5. The values can be found by taking 
the Laplace transform, assuming zero initial conditions, of the torque-angular 
displacement column of Table 2.5. 
The concept of degrees of freedom carries over to rotational systems, except 
that we test a point of motion by rotating it while holding still all other points of 
motion. The number of points of motion that can be rotated while all others are 
held still equals the number of equations of motion required to describe the 
system. 
Writing the equations of motion for rotational systems is similar to writing 
them for translational systems; the only difference is that the free-body diagram 
consists of torques rather than forces. We obtain these torques using superposition. 
First, we rotate a body while holding all other points still and place on its free-body 
diagram all torques due to the body's own motion. Then, holding the body still, we 
rotate adjacent points of motion one at a time and add the torques due to the 
adjacent motion to the free-body diagram. The process is repeated for each point of 
motion. For each free-body diagram, these torques are summed and set equal to zero 
to form the equations of motion. 
Two examples will demonstrate the solution of rotational systems. The first one 
uses free-body diagrams; the second uses the concept of impedances to write the 
equations of motion by inspection. 

2.6 
Rotational Mechanical System Transfer Functions 
71 
Example 2.19 
Transfer Function—Two Equations of Motion 
PROBLEM: Find the transfer function, 62(s)/T(s), for the rotational system shown 
in Figure 2.22(a). The rod is supported by bearings at either end and is undergoing 
torsion. A torque is applied at the left, and the displacement is measured at the 
right. 
7(/) 0,(r) 02{i) 
l~7~7 
2ZZJ 
Bearing 
ft 
Bearing 
D] 
Torsion 
D2 
(a) 
T(s) 
(c) 
d,(s) 
FIGURE 2.22 
a. Physical 
system; b. schematic; 
c. block diagram 
SOLUTION: First, obtain the schematic from the physical system. Even though 
torsion occurs throughout the rod in Figure 2.22(a),9 we approximate the system 
by assuming that the torsion acts like a spring concentrated at one particular point 
in the rod, with an inertia J\ to the left and an inertia J2 to the right.10 We also 
assume that the damping inside the flexible shaft is negligible. The schematic is 
shown in Figure 2.22(b). There are two degrees of freedom, since each inertia can 
be rotated while the other is held still. Hence, it will take two simultaneous 
equations to solve the system. 
Next, draw a free-body diagram of J\, using superposition. Figure 2.23(a) 
shows the torques on J\ if/2 is held still and J\ rotated. Figure 2.23(b) shows the 
torques on/i if J\ is held still and / 2 rotated. Finally, the sum of Figures 2.23(a) and 
2.23(6) is shown in Figure 2.23(c), the final free-body diagram for J\. The same 
process is repeated in Figure 2.24 for /2-
0\(s) Direction 
\ 
^ 
uplift) 
*»iM 
0\(s) Direction 
( © 
Kd2{s) 
0\(s) Direction 
f®> 
mm 
K02(s) 
(a) 
(b) 
(0 
FIGURE 2.23 
a. Torques on 
/1 due only to the motion of J1; 
b. torques on /1 due only to the 
motion of/2'. c. final free-body 
diagram for J\ 
9 In this case the parameter is referred to as a distributed parameter. 
10 The parameter is now referred to as a lumped parameter. 

72 
Chapter 2 
Modeling in the Frequency Domain 
FIGURE 2.24 
a.Torqueson 
J2 due only to the motion of 
J2\ b. torques on J2 due only 
to the motion of/1; c. final 
free-body diagram for J 2 
Ttylt 2.9 
Use the following MATLAB 
and Symbolic Math Toolbox 
statements to help you get 
Eq. (2.128). 
syras s J l Dl K T J2 D2 . . . 
t h e t a l 
t h e t a 2 
A=[(Jl*sA2+Dl*s+K) 
-K 
-K (J2*sA2+D2*s+K)]; 
B=[thetal 
theta2]; 
C=[T 
0]; 
B=inv(A)*C; 
theta2=B(2); 
'theta2' 
p r e t t y ( t h e t a 2 ) 
#2(.?) Direction 
Ks)}D2s02(s) 
K62{s) 
<92(.v) Direction 
/^,(.5) 
(.?) Direction 
fCOx{s) 
~^J2s1e2{S) 
1 }D2s02(s) 
K02{s) 
(a) 
(b) 
(0 
Summing torques respectively from Figures 2.23(c) and 2.24(c) we obtain the 
equations of motion, 
{JlS
2 +D1s+K)01(s) 
- Ke2(s) = T(s) 
-K0! (s) + {J2s2 + D2s + K)92{s) = 0 
from which the required transfer function is found to be 
0i(s) 
T(s)~ 
as shown in Figure 2.22(c), where 
{JlS
2 + DlS + K) 
K 
A" 
A = 
K 
-K 
(J2s2 + D2s + K) 
Notice that Eq. (2.127) have that now well-known form 
Sum of 
r 
, 
, 
Sum of 
„ 
. 
Sum of 
impedances 
. 
t. . 
between 
°2{s) = 
appH^Jtequcs 
6i and 62 
impedances 
connected 
to the motion 
s) -
at 0X 
Sum of 
impedances 
between 
61 and 02 
0i{s) + 
Sum of 
impedances 
connected 
to the motion 
at6>2 
0i(s) = 
Sum of 
applied torques 
at <92 
(2.127a) 
(2.127b) 
(2.128) 
(2.129a) 
(2.129b) 
FIGURE 2.25 
Three-degrees-
of-freedom rotational 
system 
Example 2.20 
Equations of Motion By Inspection 
PROBLEM: Write, but do not solve, the Laplace transform of the equations of 
motion for the system shown in Figure 2.25. 

2.6 Rotational Mechanical System Transfer Functions 
73 
SOLUTION: The equations will take on the following form, similar to electrical 
mesh equations: 
Sum of 
impedances 
connected 
to the motion 
atBi 
0!(S) -
Sum of 
impedances 
between 
0i and 92 
e2(s) 
(2.130a) 
Sum of 
impedances 
between 
0i and 03 
e3(s) = 
Sum of 
applied torques 
at 0i 
Sum of 
impedances 
between 
0i and 02 
0l(5) 
Sum of 
impedances 
connected 
to the motion 
at 02 
lis) 
(2.130b) 
Sum of 
impedances 
between 
02 and 03 
03(5) = 
Sum of 
applied torques 
at 02 
Sum of 
impedances 
between 
01 and 03 
Bits) -
Hence, 
Sum of 
impedances 
between 
02 and 03 
his) 
+ 
Sum of 
impedances 
connected 
to the motion 
at 03 
03(s) = 
Sum of 
applied torques 
at 03 
(2.130c) 
{J^+DiS 
+ K)9i(s) 
-^01(5)+(/252 
-001 (5) 
-Kd2(s) 
D2s + K)02(s) 
-003(5) = T(S) 
-D2503(5) = 0 
-D2sd2(s) +(/352 + D3s + D2s)03(s) = 0 
(2.131a, b,c) 

Chapter 2 
Modeling in the Frequency Domain 
Skill-Assessment Exercise 2.9 
PROBLEM: Find the transfer function, G(s) =62(s)/T(s), 
for the rotational 
mechanical system shown in Figure 2.26. 
FIGURE 2.26 Rotational 
mechanical system for Skill-
Assessment Exercise 2.9 
7( r) 
1 N-m/rad 
I kg-m2 
I N-m-s/rad 
02U) 
r* 
I N-m/rad 
v 
1 N-m-s/rad 
ANSWER: G{s) = 
1 
2s2 + s + 1 
The complete solution is at www.wiley.com/college/nise. 
^ 2.7 Transfer Functions for Systems with Gears 
7'i(f) 
Input 
drive gear, 
Gear 1 
Output 
driven gear, 
Gear 2 
FIGURE 2.27 A gear system 
Now that we are able to find the transfer function for rotational systems, we 
realize that these systems, especially those driven by motors, are rarely seen 
without associated gear trains driving the load. This section covers this 
important topic. 
Gears provide mechanical advantage to rotational systems. Anyone who has 
ridden a 10-speed bicycle knows the effect of gearing. Going uphill, you shift to 
provide more torque and less speed. On the straightaway, you shift to obtain more 
speed and less torque. Thus, gears allow you to match the drive system and the 
load—a trade-off between speed and torque. 
For many applications, gears exhibit backlash, which occurs because of the 
loose fit between two meshed gears. The drive gear rotates through a small angle 
before making contact with the meshed gear. The result is that the angular rotation 
of the output gear does not occur until a small angular rotation of the input gear has 
occurred. In this section, we idealize the behavior of gears and assume that there is 
no backlash. 
The linearized interaction between two gears is depicted in Figure 2.27. An 
input gear with radius t\ and N\ teeth is rotated through angle 9\ (t) due to a 
torque, T\(t). An output gear with radius ro and N2 teeth responds by rotating 
through angle 02(f) and delivering a torque, 7^(0- Let us now find the relation-
ship between the rotation of Gear 1, 9\(t), and Gear 2, 62(1). 
From Figure 2.27, as the gears turn, the distance traveled along each gear's 
circumference is the same. Thus, 
ri0i = r2r?2 
(2.132) 

2.7 Transfer Functions for Systems with Gears 
75 
or 
r_1 = N1 
n 
N2 
(2.133) 
since the ratio of the number of teeth along the circumference is in the same 
proportion as the ratio of the radii. We conclude that the ratio of the angular 
displacement of the gears is inversely proportional to the ratio of the number of 
teeth. 
What is the relationship between the input torque, T\, and the delivered 
torque, T2r>- If we assume the gears are lossless, that is they do not absorb or store 
energy, the energy into Gear 1 equals the energy out of Gear 2.11 Since the 
translational energy of force times displacement becomes the rotational energy 
of torque times angular displacement, 
TiOi = T202 
(2.134) 
Solving Eq. (2.134) for the ratio of the torques and using Eq. (2.133), we get 
Thus, the torques are directly proportional to the ratio of the number 
of teeth. All results are summarized in Figure 2.28. 
Let us see what happens to mechanical impedances that are 
driven by gears. Figure 2.29(a) shows gears driving a rotational inertia, 
spring, and viscous damper. For clarity, the gears are shown by an end-
on view. We want to represent Figure 2.29(a) as an equivalent system at 
6\ without the gears. In other words, can the mechanical impedances be 
reflected from the output to the input, thereby eliminating the gears? 
0. 
N2 
e2 
n 
T2 
(a) 
(b) 
FIGURE 2.28 Transfer functions for a. angular 
displacement in lossless gears and b. torque in 
lossless gears 
7'|C) 0,(r) 
I AT, 
2(0 
N2 
2*1(0 0,(/) 
"t 
(O 
7-,(0 
/V_2 
N, 
(9-,(/) 
m 
Dti 
TO 
Y c 
N-, 
FIGURE 2.29 
a. Rotational 
system driven by gears; 
b. equivalent system at the 
output after reflection of input 
torque; c. equivalent system at 
the input after reflection of 
impedances 
This is equivalent to saying that the gears have negligible inertia and damping. 

76 
Chapter 2 
Modeling in the Frequency Domain 
From Figure 2.28(b), T\ can be reflected to the output by multiplying by N2/N\. 
The result is shown in Figure 2.29(b), from which we write the equation of motion as 
(2.136) 
Now convert 02(s) into an equivalent 9\ (s), so that Eq. (2.136) will look as if it were 
written at the input. Using Figure 2.28(a) to obtain 62(s) in terms of 9i(s), we get 
(Js^ + Ds + ^ 0 ^ ) 
= 
1^)^ 
After simplification, 
©'••©HS : 0i(*) = riM 
(2.137) 
(2.138) 
which suggests the equivalent system at the input and without gears shown in 
Figure 2.29(c). Thus, the load can be thought of as having been reflected from the 
output to the input. 
Generalizing the results, we can make the following statement: Rotational 
mechanical impedances can be reflected through gear trains by multiplying the 
mechanical impedance by the ratio 
/ 
Number of teeth of 
\ 
gear on destination shaft | 
Number of teeth of 
J 
\ 
gear on source shaft 
/ 
where the impedance to be reflected is attached to the source shaft and is being 
reflected to the destination shaft. The next example demonstrates the application of 
the concept of reflected impedances as we find the transfer function of a rotational 
mechanical system with gears. 
7",<n 0,(» 
Example 2.21 
Transfer Function—System with Lossless Gears 
PROBLEM: Find the transfer function, e2(s)/Ti (s), for the system of Figure 2.30(A). 
fMSGDfc 
TMltx)Hn 
'<-u\N[ 
N-y 
" .333 
K2 
h 
J7KXr 
A „ — K-) 
7'i(.v) 
N2IN{ 
J^2 + DgS + Ke 
e,(s) 
(N2 
(a) 
(b) 
(c) 
FIGURE 2.30 
a. Rotational mechanical system with gears; b. system after reflection of torques and impedances to the output 
shaft; c block diagram 

2.7 Transfer Functions for Systems with Gears 
SOLUTION: It may be tempting at this point to search for two simultaneous 
equations corresponding to each inertia. The inertias, however, do not undergo 
linearly independent motion, since they are tied together by the gears. Thus, there 
is only one degree of freedom and hence one equation of motion. 
Let us first reflect the impedances {J\ and D\) and torque (T\) on the input 
shaft to the output as shown in Figure 2.30(6), where the impedances are reflected 
by (N2/N\)2 
and the torque is reflected by (N2/N\). 
The equation of motion can 
now be written as 
{Jesz + Des + Ke)92(s) = ri(j) -rf-
(2.139) 
where 
Je=Ji(^A 
+h\ 
De = D,(jA 
+D2; 
Ke=K2 
Solving for 62{s)/T\{s), the transfer function is found to be 
62(s) 
N2/Ni 
G(s) = Ti(s) 
Jes2 + Des + Ke 
(2.140) 
as shown in Figure 2.30(c). 
In order to eliminate gears with large radii, a gear train is used 
to implement large gear ratios by cascading smaller gear ratios. A 
schematic diagram of a gear train is shown in Figure 2.31. Next to 
each rotation, the angular displacement relative to 0\ has been 
calculated. From Figure 2.31, 
= 
N1N3N5 
4 
N2N4N6
 
l 
(2.141) 
AS 
^ = — 01 
N3 
HA 
/V, 
A'1 /V, 
N5 
Ns 
NtNzN5 
For gear trains, we conclude that the equivalent gear ratio is the 
product of the individual gear ratios. We now apply this result to solve 
figuRE 2 31 Gear train 
for the transfer function of a system that does not have lossless gears. 
Example 2.22 
Transfer Function—Gears with Loss 
PROBLEM: Find the transfer function, 0i(s)/7/i(s),for the system of Figure 232(a). 
7"|</> gjjfl 
Mi 
JhDi 
I 
N2 
pa, 1$ 
m 
h 
N3 
h 
n J " 
^:) 
Js , 
\N2J 
\N2Nt 
w * & 
7"i(.s» 
(a) 
m 
J^ + DfS 
(c) 
»,(.«) 
FIGURE 2.32 
a. System using a gear 
train; b. equivalent 
system at the input; 
c. block diagram 

Chapter 2 
Modeling in the Frequency Domain 
SOLUTION: This system, which uses a gear train, does not have lossless gears. All of 
the gears have inertia, and for some shafts there is viscous friction. To solve the 
problem, we want to reflect all of the impedances to the input shaft, d\. The 
gear ratio is not the same for all impedances. For example, D2 is reflected 
only through one gear ratio as D2(Ni/N2)2, 
whereas /4 plus /5 is reflected through 
two gear ratios as (/4 + /5)((^3/^4)(^1/^2)]2. The result of reflecting all imped-
ances to #1 is shown in Figure 2.32(6), from which the equation of motion is 
( / ^ + /),5)01(5) = ^ ( 5 ) 
where 
and 
/ e = / 1 + (/2+/3) Ni 
N2 
+ (/4+/5^ 
D'-
D'
+D{wS 
From Eq. (2.142), the transfer function is 
0i (5) 
0(9) = Ti{s) 
Jes2 + Des 
as shown in Figure 2.32(c). 
(2.142) 
\N2N4) 
(2.143) 
Skill-Assessment Exercise 2.10 
PROBLEM: Find the transfer function, G(s) = 02(s)/T(s), 
for the rotational 
mechanical system with gears shown in Figure 2.33. 
1 N-m-s/rad 
] kg-m2 
N2 = 5Q 
'TOP-
4 N-m/rad 
FIGURE 2.33 Rotational mechanical system with gears for Skill-Assessment 
Exercise 2.10 
1/2 
ANSWER: G(s) = 52 + 5 + 1 
The complete solution is at www.wiley.com/college/nise. 

2.8 Electromechanical System Transfer Functions 
79 
I 
2.8 Electromechanical System 
Transfer Functions 
In the last section we talked about rotational systems with gears, which completed 
our discussion of purely mechanical systems. Now, we move to systems that are 
hybrids of electrical and mechanical variables, the electromechanical systems. We 
have seen one application of an electromechanical system in Chapter 1, the antenna 
azimuth position control system. Other applications for systems with electrome-
chanical components are robot controls, sun and star trackers, and computer tape 
and disk-drive position controls. An example of a control system that uses electro-
mechanical components is shown in Figure 2.34. 
A motor is an electromechanical component that yields a displacement output 
for a voltage input, that is, a mechanical output generated by an electrical input. 
We will derive the transfer function for one particular kind of electromechanical 
system, the armature-controlled dc servomotor (Mablekos, 1980). The motor's 
schematic is shown in Figure 2.35(a), and the transfer function we will derive 
appears in Figure 2.35(b). 
< • — — * 
FIGURE 2.34 
NASA flight 
simulator robot arm with 
electromechanical control 
system components. 
-1-
I) 
-
R/i 
La 
V V V 
u u u u 
+ 
Armature^ v.rf\ ( 
circuit J 
' 
\ 
( 
Fixed 
Xgf 
field 
lv Rotor 
\ \ 0,,,(/) 
Etlm 
G(s) 
0,,,( .s) 
(a) 
FIGURE 2.35 
D C motor: a. schematic;12 b. block diagram 
(*) 
;See Appendix I at www.wiley.com/college/nise for a derivation of this schematic and its parameters. 

80 
Chapter 2 
Modeling in the Frequency Domain 
In Figure 2.35(a) a magnetic field is developed by stationary permanent 
magnets or a stationary electromagnet called the fixed field. A rotating circuit 
called the armature, through which current ia(t) flows, passes through this magnetic 
field at right angles and feels a force, F = Blia(t), where B is the magnetic field 
strength and /is the length of the conductor. The resulting torque turns the rotor, the 
rotating member of the motor. 
There is another phenomenon that occurs in the motor: A conductor moving at 
right angles to a magnetic field generates a voltage at the terminals of the conductor 
equal to e = Blv, where e is the voltage and v is the velocity of the conductor normal 
to the magnetic field. Since the current-carrying armature is rotating in a magnetic 
field, its voltage is proportional to speed. Thus, 
vb(t)=Kb dem(t) 
dt 
(2.144) 
We call vb(t) the back electromotive force (back emf); Kb is a constant of 
proportionality called the back emf constant; and d6m(t)/dt = com(t) is the angular 
velocity of the motor. Taking the Laplace transform, we get 
Vb{s)=KbsOm{s) 
(2.145) 
The relationship between the armature current, ia(t), the applied armature 
voltage, ea(t), and the back emf, vb(t), is found by writing a loop equation around the 
Laplace transformed armature circuit (see Figure 3.5(a)): 
RJa{s) + Lasla(s) + Vb(s) - Ea(s) 
(2.146) 
The torque developed by the motor is proportional to the armature current; thus, 
Tm(s) = KtIa(s) 
(2.147) 
where Tm is the torque developed by the motor, and Kt is a constant of proportion-
ality, called the motor torque constant, which depends on the motor and magnetic 
field characteristics. In a consistent set of units, the value of Kt is equal to the value of 
Kb. Rearranging Eq. (2.147) yields 
Ia{s) = — Tm(s) 
(2.148) 
To find the transfer function of the motor, we first substitute Eqs. (2.145) and 
(2.148) into (2.146), yielding 
(Ra + Las)Tm{s) 
Kt 
Kbs6m(s) = Ea(s) 
(2.149) 
'/',„<') 0,,,(') 
^PCV 
\ 
U_ 
Jm 
) — 
Dm 
S 
FIGURE 2.36 Typical equivalent 
mechanical loading on a motor 
Now we must find Tm(s) in terms of 0m{s) if we are to separate the input and 
output variables and obtain the transfer function, 6m(s)/Ea(s). 
Figure 2.36 shows a typical equivalent mechanical loading on a motor. 
Jm is the equivalent inertia at the armature and includes both the armature 
inertia and, as we will see later, the load inertia reflected to the armature. 

2.8 Electromechanical System Transfer Functions 
Dm is the equivalent viscous damping at the armature and includes both the 
armature viscous damping and, as we will see later, the load viscous damping 
reflected to the armature. From Figure 2.36, 
Tm(s) = (Jm!? + Dms)em{s) 
Substituting Eq. (2.150) into Eq. (2.149) yields 
(Ra + Las)(Jms2 + Dms)9m{s) 
Kt 
+ KbsOm{s) = E„(s) 
(2.150) 
(2.151) 
If we assume that the armature inductance, La, is small compared to the armature 
resistance, Ra, which is usual for a dc motor, Eq. (2.151) becomes 
Ra (Jms + Dm) + Kb s6m{s) = Ea{s) 
(2.152) 
After simplification, the desired transfer function, dm(s)/Ea(s), is found to be 
em{s) 
Ea(s) 
m 
Kt/{RaJm) 
. 1 /r, i KtKb 
s + — (Dm+——) 
(2.153) 13 
Even though the form of Eq. (2.153) is relatively simple, namely 
.w 
K 
Ea(s) 
sis 
(2.154) 
Motor 
JmDn 
the reader may be concerned about how to evaluate the constants. 
Let us first discuss the mechanical constants, Jm and Dm. Consider 
Figure 2.37, which shows a motor with inertia Ja and damping Da at the 
armature driving a load consisting of inertia JL and damping Di. 
Assuming that all inertia and damping values shown are known, JL 
and Di can be reflected back to the armature as some equivalent inertia 
and damping to be added to Ja and Da, respectively. Thus, the equiv- 
FIGURE 2.37 DC motor driving a rotational 
alent inertia, Jm, and equivalent damping, Dm, at the armature are 
mechanical load 
m 
DL 
T. 
= 
Jm=Ja+JL[^2; 
Dm^Da + 
DL(^2 
(2.155) 14 
Now that we have evaluated the mechanical constants, Jm and Dm, what about 
the electrical constants in the transfer function of Eq. (2.153)? We will show that 
these constants can be obtained through a dynamometer test of the motor, where a 
dynamometer measures the torque and speed of a motor under the condition of a 
13 The units for the electrical constants are K, = N-m-A (newton-meters/ampere), and Kb = V-s/rad 
(volt-seconds/radian). 
14 If the values of the mechanical constants are not known, motor constants can be determined through 
laboratory testing using transient response or frequency response data. The concept of transient response 
is covered in Chapter 4; frequency response is covered in Chapter 10. 

82 
Chapter 2 
Modeling in the Frequency Domain 
constant applied voltage. Let us first develop the relationships that dictate the use of 
a dynamometer. 
Substituting Eqs. (2.145) and (2.148) into Eq. (2.146), with La = 0, yields 
Ra 
K, Tm{s) + 
Kbs0m{s)=Ea{s) 
(2.156) 
Taking the inverse Laplace transform, we get 
D 
-£Tm{t)+Kba>m{t) = eatt) 
(2.157) 
where the inverse Laplace transform of s9m(s) is d0m(t)/dt or, alternately, com{t). 
If a dc voltage, ea, is applied, the motor will turn at a constant angular velocity, 
com, with a constant torque, Tm. Hence, dropping the functional relationship based 
on time from Eq. (2.157), the following relationship exists when the motor is 
operating at steady state with a dc voltage input: 
R 
Kt 
rTm 
+ Kb(Om = £a 
(2.158) 
Solving for Tm yields 
Tm = 
KbKt 
Ra 
0),, 
R~a 
(2.159) 
*-®m 
^no-load 
Speed 
FIGURE 2.38 Torque-speed curves with 
an armature voltage, ea, as a parameter 
Equation (2.159) is a straight line, Tm vs. a>m, and is shown in 
Figure 2.38. This plot is called the torque-speed curve. The torque axis 
intercept occurs when the angular velocity reaches zero. That value of 
torque is called the stall torque, Tsta\h Thus, 
K, 
1 stall = yr £a 
K„ 
(2.160) 
The angular velocity occurring when the torque is zero is called the no-
load speed, Wno-ioad- Thus, 
^no-load — Kb 
(2.i6i; 
The electrical constants of the motor's transfer function can now be found 
from Eqs. (2.160) and (2.161) as 
(2.162) 
Kt 
rslaii 
Ra 
ea 
K 
6a 
^no-load 
(2.163) 
The electrical constants, Kt/Ra and Kb, can be found from a dynamometer test of the 
motor, which would yield Tstaii and <wno-ioad for a given ea. 

2.8 Electromechanical System Transfer Functions 
83 
Example 2.23 
Transfer Function—DC Motor and Load 
PROBLEM: Given the system and torque-speed curve of Figure 2.39(a) and (b), 
find the transfer function, 0L(s)/Ea(s). 
SOLUTION: Begin by finding the mechanical constants, Jm and Dm, in Eq. (2.153). 
From Eq. (2.155), the total inertia at the armature of the motor is 
/„,=/»WgY = 5 + 700(1)2 = 12 
and the total damping at the armature of the motor is 
D, 
^
¾
¾
) 
= 2 + 800 ( 1 ) 
=10 
(2.164) 
(2.165) 
Now we will find the electrical constants, Kt/Ra and Kb. From the torque-
speed curve of Figure 2.39(6), 
(2.166) 
(2.167) 
(2.168) 
Fixed 
field 
^stali = 500 
^no-load = 50 
ea = 100 
/fl=5kg-m2 
Z)a = 2N-ms/rad 
Virtual Experiment 2.2 
Open-Loop 
Servo Motor 
Put theory into practice explor-
ing the dynamics of the Quanser 
Rotary Servo System modeled 
in Lab VIEW. It is particularly 
important to know how a servo 
motor behaves when using them 
in high-precision applications 
such as hard disk drives. 
Virtual experiments are found 
on WileyPLUS. 
(a) 
0/,= 800 N-ms/rad 
E. Is) 
0.0417 
s(s + 1.667) 
6, is) 
(c) 
FIGURE 2.39 a. DC motor and load; b. torque-speed curve; c. block diagram 
Hence the electrical constants are 
K, = rstal] = 500 
R„ 
en 
100 
(2.169) 

84 
Chapter 2 
Modeling in the Frequency Domain 
and 
K, 
e" 
10° " 
n-m 
^b 
— c n — * 
(/.1/UJ 
^no-load 
->V 
Substituting Eqs. (2.164), (2.165), (2.169), and (2.170) into Eq. (2.153) yield 
M*) 
5/12 
0.417 
* » 
, { , + l [ 1 0 + <5)<2)]} 
^ 
+ 1- 6 6 7) 
U - ' ] 
In order to find BL(s)/Ea(s), 
we use the gear ratio, N\/Ni = 1/10, and find 
fcM 
0.0417 
£fl(s) 
5(5 + 1.667) 
l " 
] 
as shown in Figure 2.39(c). 
WileyPLUS 
Control Solutions 
FIGURE 2.40 Electro-
mechanical system for 
Skill-Assessment Exercise 
2.11 
Skill-Assessment Exercise 2.11 
^ ^ ^ ^ ^ k t 
PROBLEM: Find the transfer function, G(s) = 6L{S)/E0{S), 
for the motor and load 
shown in Figure 2.40. The torque-speed curve is given by Tm — —8(om + 200 when 
the input voltage is 100 volts. 
<>„(/) Motor 
#, = 20 
, 
, , 
, 
#2=100 
Ja = 1 kg-m2 
D0=5N-m-s/rad 
ANSWER: G{s) = 
#4=100 
1/20 
#3 = 25 
- f - ) 
JL = 400 kg-m2 
£),^ = 800 N-m-s/rad 
5[s +(15/2)] 
The complete solution is at www.wiley.com/college/nise. 
( 2.9 Electric Circuit Analogs 
In this section, we show the commonality of systems from the various disciplines 
by demonstrating that the mechanical systems with which we worked can be 
represented by equivalent electric circuits. We have pointed out the similarity 
between the equations resulting from Kirchhoff s laws for electrical systems and 
the equations of motion of mechanical systems. We now show this commonality 
even more convincingly by producing electric circuit equivalents for mechanical 
systems. The variables of the electric circuits behave exactly as the analogous 

2.9 
Electric Circuit Analogs 
85 
variables of the mechanical systems. In fact, converting mechanical systems to 
electrical networks before writing the describing equations is a problem-solving 
approach that you may want to pursue. 
An electric circuit that is analogous to a system from another discipline is 
called an electric circuit analog. Analogs can be obtained by comparing the 
describing equations, such as the equations of motion of a mechanical system, 
with either electrical mesh or nodal equations. When compared with mesh 
equations, the resulting electrical circuit is called a series analog. When com-
pared with nodal equations, the resulting electrical circuit is called a parallel 
analog. 
Series Analog 
Consider the translational mechanical system shown in Figure 2.41(A), whose 
equation of motion is 
{Ms2 + fvs + K)X{s) = F(s) 
(2.173) 
Kirchhoff's mesh equation for the simple series RLC 
network shown in 
Figure 2.41(6) is 
(LS + 
R+±-]I(S)=E(S) 
(2.174) 
As we previously pointed out, Eq. (2.173) is not directly analogous to 
Eq. (2.174) because displacement and current are not analogous. We can create 
a direct analogy by operating on Eq. (2.173) to convert displacement to velocity by 
dividing and multiplying the left-hand side by s, yielding 
Ml±Ll±lsX{s)=fMs+fv 
+ ^]V{s] /:;,; 
(2.175) 
Comparing Eqs. 2.174 and 2.175, we recognize the sum of impedances and 
draw the circuit shown in Figure 2.41(c). The conversions are summarized in 
Figure 2.41(d). 
When we have more than one degree of freedom, the impedances 
associated with a motion appear as series electrical elements in a mesh, but 
TORT 
(a) 
Ml) 
M 
./!') 
^WJ^NV 
c(D(Z © 
MM 
m 
m(z © 
r</) 
A" 
mass = M 
viscous damper =/,. 
spring = K 
applied force = fit) 
velocity = v(r) 
inductor 
= M henries 
resistor 
= fv ohms 
capacitor 
= - farads 
voltage source = fit) 
mesh current 
= v(f) 
(rf) 
FIGURE 2.41 Development 
of series analog: a. mechanical 
system; b. desired 
electrical representation; 
c. series analog; d. parameters 
for series analog 

Chapter 2 
Modeling in the Frequency Domain 
the impedances between adjacent motions are drawn as series electrical 
impedances between the two corresponding meshes. We demonstrate with 
an example. 
Example 2.24 
Converting a Mechanical System to a Series Analog 
PROBLEM: Draw a series analog for the mechanical system of Figure 2.17(a). 
SOLUTION: Equations (2.118) are analogous to electrical mesh equations after 
conversion to velocity. Thus, 
FIGURE 2.42 Series analog of 
mechanical system of 
Figure 2.17(a) 
Mis + (fVl+fJ + [Ki+K2] 
Ki\ 
1 ;VI 
\f^+-f)V^=F^ 
(2.176a) 
( / * + V J K l ( v ! ~ M2s + (fV7+U + (K2 + K3] V2{s) = 0 
(2.176b) 
Coefficients represent sums of electrical impedance. Mechanical impedances 
associated with Mi form the first mesh, where impedances between the two masses 
are common to the two loops. Impedances associated with A/2 form the second 
mesh. The result is shown in Figure 2.42, where vi (t) and V2{t) are the velocities of 
M\ and M%, respectively. 
/V/, 
K 
f 
./('>! © 
( / ) 
- * • 
/v, 
K2 
Ht) 
Parallel Analog 
A system can also be converted to an equivalent parallel analog. Consider the 
translational mechanical system shown in Figure 2.43(a), whose equation of motion 
is given by Eq. (2.175). Kirchhoffs nodal equation for the simple parallel RLC 
network shown in Figure 2.43(b) is 
Cs+R~+h]hs 
'is] 
(2.177) 
Comparing Eqs. (2.175) and (2.177), we identify the sum of admittances and draw the 
circuit shown in Figure 2.43(c). The conversions are summarized in Figure 2.43(^). 

2.9 Electric Circuit Analogs 
87 
PkwH 
\ii) 
M 
eU) 
AD 
hD 6 
R^> 
L 
r(/) 
/">© M 
(c) 
mass = M 
viscous damper =fv 
spring = K 
applied force = AD 
velocity = v(f) 
*- capacitor 
P- resistor 
+- inductor 
*- current source 
*- node voltage 
m 
= M farads 
= -7 ohms 
/v 
= - henries 
K 
=AD 
= m 
FIGURE 2.43 Development of 
parallel analog: a. mechanical 
system; b. desired electrical 
representation; c parallel 
analog; d. parameters for 
parallel analog 
When we have more than one degree of freedom, the components associated 
with a motion appear as parallel electrical elements connected to a node, but the 
components of adjacent motions are drawn as parallel electrical elements between 
two corresponding nodes. We demonstrate with an example. 
Example 2.25 
Converting a Mechanical System to a Parallel Analog 
PROBLEM: Draw a parallel analog for the mechanical system of Figure 2.17(a). 
SOLUTION: Equation (2.176) is also analogous to electrical node equations. Coeffi-
cients represent sums of electrical admittances. Admittances associated with M\ form 
the elements connected to the first node, where mechanical admittances between the 
two masses are common to the two nodes. Mechanical admittances associated with Mi 
form the elements connected to the second node. The result is shown in Figure 2.44, 
where V\{t) and vi{t) are the velocities of M\ and M2, respectively. 
FIGURE 2.44 Parallel 
analog of mechanical system 
of Figure 2.17(a) 
Skill-Assessment Exercise 2.12 
PROBLEM: Draw a series and parallel analog for the rotational mechanical system 
of Figure 2.22. 
ANSWER: The complete solution is at www.wiley.com/college/nise. 

Chapter 2 
Modeling in the Frequency Domain 
(^2.10 
Nonlinearities 
m 
O l 
2 
3 
4 
0 
1 2 
3 
4 
Input 
Input 
(a) 
(b) 
FIGURE 2.45 a. Linear system; b. nonlinear system 
The models thus far are developed from systems that can be described approxi-
mately by linear, time-invariant differential equations. An assumption of linearity 
was implicit in the development of these models. In this section, we formally define 
the terms linear and nonlinear and show how to distinguish between the two. In 
Section 2.11, we show how to approximate a nonlinear system as a linear system so 
that we can use the modeling techniques previously covered in this chapter (Hsu, 
1968). 
A linear system possesses two properties: superposition and homogeneity. The 
property of superposition means that the output response of a system to the sum of 
inputs is the sum of the responses to the individual inputs. Thus, if an input of r\ (t) 
yields an output of t\ (t) and an input of rz(t) yields an output of C2(r), then an input of 
f\{t) 4- /"2(f) yields an output of C\(t) + C2(t). The property of homogeneity describes 
the response of the system to a multiplication of the input by a scalar. Specifically, in 
a linear system, the property of homogeneity is demonstrated if for an input of r\ (i) 
that yields an output of c\(t), an input of Ar\(t) yields an output of Ac\(t); that is, 
multiplication of an input by a scalar yields a response that is multiplied by the same 
scalar. 
We can visualize linearity as shown in Figure 2.45. Figure 
2.45(a) is a linear system where the output is always \ the 
input, oif(x) = 0.5A:, regardless of the value of X, Thus each of 
the two properties of linear systems applies. For example, an 
input of 1 yields an output of \ and an input of 2 yields an 
output of 1. Using superposition, an input that is the sum of the 
original inputs, or 3, should yield an output that is the sum of 
the individual outputs, or 1.5. From Figure 2.45(A), an input of 
3 does indeed yield an output of 1.5. 
To test the property of homogeneity, assume an input 
of 2, which yields an output of 1. Multiplying this input by 
2 should yield an output of twice as much, or 2. From 
Figure 2.45(a), an input of 4 does indeed yield an output of 2. The reader can 
verify that the properties of linearity certainly do not apply to the relationship 
shown in Figure 2.45(5). 
Figure 2.46 shows some examples of physical nonlinearities. An electronic 
amplifier is linear over a specific range but exhibits the nonlinearity called saturation 
at high input voltages. A motor that does not respond at very low input voltages due 
to frictional forces exhibits a nonlinearity called dead zone. Gears that do not fit 
tightly exhibit a nonlinearity called backlash: The input moves over a small range 
FIGURE 2.46 Some physical 
nonlinearities 
Amplifier saturation 
Motor dead zone 
Backlash in gears 
Input 
Input 
Input 

2.11 
Linearization 
without the output responding. The reader should verify that the curves shown in 
Figure 2.46 do not fit the definitions of linearity over their entire range. Another 
example of a nonlinear subsystem is a phase detector, used in a phase-locked loop in 
an FM radio receiver, whose output response is the sine of the input. 
A designer can often make a linear approximation to a nonlinear system. 
Linear approximations simplify the analysis and design of a system and are used as 
long as the results yield a good approximation to reality. For example, a linear 
relationship can be established at a point on the nonlinear curve if the range of input 
values about that point is small and the origin is translated to that point. Electronic 
amplifiers are an example of physical devices that perform linear amplification with 
small excursions about a point. 
f 2.11 Linearization 
The electrical and mechanical systems covered thus far were assumed to be 
linear. However, if any nonlinear components are present, we must linearize 
the system before we can find the transfer function. In the last section, we 
defined and discussed nonlinearities; in this section, we show how to obtain 
linear approximations to nonlinear systems in order to obtain transfer 
functions. 
The first step is to recognize the nonlinear component and write the 
nonlinear differential equation. When we linearize a nonlinear differential 
equation, we linearize it for small-signal inputs about the steady-state solution 
when the small-signal input is equal to zero. This steady-state solution is called 
equilibrium and is selected as the second step in the linearization process. For 
example, when a pendulum is at rest, it is at equilibrium. The angular 
displacement is described by a nonlinear differential equation, but it can be 
expressed with a linear differential equation for small excursions about this 
equilibrium point. 
Next we linearize the nonlinear differential equation, and then we take the 
Laplace transform of the linearized differential equation, assuming zero initial 
conditions. Finally, we separate input and output variables and form the transfer 
function. Let us first see how to linearize a function; later, we will apply the method 
to the linearization of a differential equation. 
If we assume a nonlinear system operating at point A, [XQ, f{xo)] in 
Figure 2.47, small changes in the input can be related to changes in the 
output about the point by way of the slope of the curve at the point A. 
Thus, if the slope of the curve at point A is ma, then small excursions of 
the input about point A, Sx, yield small changes in the output, 8f(x), 
«/(*) 
related by the slope at point A. Thus, 
§ 
m 
from which 
and 
[/(*) -/(*o)] ~ 
ma(x-x0] 
8f(x) sa ma8x 
f(x) ?» f(x0) + ma{x - XQ) M f(x0) + ma8x 
(2.178) 
(2.179) 
(2.180) 
<v 
A 
X) 
y 
{ ^ 
1 
, ,V> 
fixQ) 
0 
x0 
x 
Input 
FIGURE 2.47 Linearization about 
points 

90 
Chapter 2 
Modeling in the Frequency Domain 
This relationship is shown graphically in Figure 2.47, where a new set of axes, 8X 
and 8f(x), is created at the point A, and f(x) is approximately equal to /(x0), the 
ordinate of the new origin, plus small excursions, ma8x, away from point A. Let us 
look at an example. 
FIGURE 2.48 
Linearization 
of 5 cos x about x — n/2 
Example 2.26 
Linearizing a Function 
PROBLEM: Linearize f(x) = 5 cos x about x = n/2. 
SOLUTION: We first find that the derivative of f(x) is df/dx = (-5sinx). At 
x = 7r/2, the derivative is —5. Also f(xo) = f(n/2) — 5COS(TT/2) = 0. Thus, from 
Eq. (2.180), the system can be represented as/(x) = -5 <5xfor small excursions of x 
about 7r/2. The process is shown graphically in Figure 2.48, where the cosine curve 
does indeed look like a straight line of slope -5 near JT/2. 
The previous discussion can be formalized using the Taylor series expansion, 
which expresses the value of a function in terms of the value of that function at a 
particular point, the excursion away from that point, and derivatives evaluated at 
that point. The Taylor series is shown in Eq. (2.181). 
m=/M 
dx X=XQ 
{X ~ XQ) 
1! 
if 
dx2 
(x-x0y 
2! 
+ 
(2.181) 
For small excursions of x from xo, we can neglect higher-order terms. The resulting 
approximation yields a straight-line relationship between the change in f(x) and the 
excursions away from XQ. Neglecting the higher-order terms in Eq. (2.181), we get 
/ W - / ( , 0 ) - | 
(2.182) 

2.11 Linearization 
91 
or 
*/(*) 
m\r_r8x 
(2.183) 
which is a linear relationship between 8f(x) and 8x for small excursions away from XQ. 
It is interesting to note that Eqs. (2.182) and (2.183) are identical to Eqs. (2.178) and 
(2.179), which we derived intuitively. The following examples illustrate linearization. 
The first example demonstrates linearization of a differential equation, and the 
second example applies linearization to finding a transfer function. 
Example 2.27 
Linearizing a Differential Equation 
PROBLEM: Linearize Eq. (2.184) for small excursions about x = n/A. 
(2.184) 
d x 
_ dx 
- p r + 2 — + COSX = 0 
dt2 
dt 
SOLUTION: The presence of the term cos x makes this equation nonlinear. Since 
we want to linearize the equation about x = n/A, we let x = 8x + n/A, where 8x is 
the small excursion about izjA, and substitute x into Eq. (2.184): 
But 
and 
d2(8x + 7P) 
d(8x + ^) 
_. 
dt2 
dt 
V 
4/ 
d2{Sx^) 
d28x 
dt2 
dt2 
d{8x + li) _d8x 
dt 
dt 
= 0 
(2.185) 
(2.186) 
(2.187) 
Finally, the term cos (Sx + (n/4)) can be linearized with the truncated Taylor series. 
Substituting f(x) = cos(Sx + (TT/4)), f(xo) =/(TT/4) = cos(7r/4), and (x - xo) — 8x 
into Eq. (2.182) yields 
cos ( ^ + 1 ) - c o s (|) = dcosx 
dx 
Solving Eq. (2.188) for cos {8x + (TT/4)), we get 
8x = -sm(-)8x 
V2 y/2 
(2.188) 
cos (to + 1 ) = c o s Q - sinQ&c = ~ - ^f8x 
(2.189) 
Substituting Eqs. (2.186), (2.187), and (2.189) into Eq. (2.185) yields the following 
linearized differential equation: 
d28x ^d8x 
\/2~ 
V2 
-W + 
2-df-T8x--Y 
(2.190) 
This equation can now be solved for 8x, from which we can obtain x = 8x + (TT/4). 
Even though the nonlinear Eq. (2.184) is homogeneous, the linearized Eq. (2.190) 
is not homogeneous. Eq. (2.190) has a forcing function on its right-hand side. This 
additional term can be thought of as an input to a system represented by Eq. (2.184). 

Chapter 2 
Modeling in the Frequency Domain 
Another observation about Eq. (2.190) is the negative sign on the left-hand 
side. The study of differential equations tells us that since the roots of the 
characteristic equation are positive, the homogeneous solution grows without 
bound instead of diminishing to zero. Thus, this system linearized around x = 
7r/4 is not stable. 
FIGURE 2.49 
Nonlinear 
electrical network 
Example 2.28 
Transfer Function—Nonlinear Electrical Network 
PROBLEM: Find the transfer function, VL(s)/V(s), for the electrical network 
shown in Figure 2.49, which contains a nonlinear resistor whose voltage-
current relationship is defined by ir = 2e01vv, where ir and vr are the resistor 
current and voltage, respectively. Also, v(r) in Figure 2.49 is a small-signal 
source. 
SOLUTION: We will use Kirchhoff's voltage law to sum the voltages in the 
loop to obtain the nonlinear differential equation, but first we must solve for 
the voltage across the nonlinear resistor. Taking the natural log of the 
resistor's current-voltage relationship, we get vr = 10 ln|ir. Applying Kirchh-
off's voltage law around the loop, where ir = i, yields 
L $ + 101ni/-20 = v(f) 
at 
2 
(2.191) 
Next, letus evaluate the equilibrium solution. First, set the small-signal 
source, v(r), equal to zero. Now evaluate the steady-state current. With v(t) = 0, 
the circuit consists of a 20 V battery in series with the inductor and nonlinear 
resistor. In the steady state, the voltage across the inductor will be zero, since 
vL(t) = Ldi/dt and di/dt is zero in the steady state, given a constant battery 
source. Hence, the resistor voltage, vr, is 20 V. Using the characteristics of the 
resistor, ir = 2e0AVr, we find that ir = i — 14.78 amps. This current, io, is the 
equilibrium value of the network current. Hence i = io + Si. Substituting this 
current into Eq. (2.191) yields 
Ldik + Si) + m l { h 
+ si)_20 
= v{t) 
dt 
I 
Using Eq. (2.182) to linearize In\{i§ 4- Si), we get 
1 
1 
d(\nhi) 
I 
Si — — Si 
or 
Ii4 (¾ + Si) =ln£ + i&' 
Z 
Z 
lQ 
Substituting into Eq. (2.192), the linearized equation becomes 
dt 
\ 
2 
IQ J 
(2.192) 
(2.193) 
(2.194) 
(2.195) 

2.11 
Linearization 
93 
Letting L = 1 and z"o = 14.78, the final linearized differential 
^ + 0.6775/ = v(r) 
at 
equation is 
Taking the Laplace transform with zero initial conditions and solving for 
get 
«
^ 
But the voltage across the inductor about the equilibrium point is 
T d ,. 
„,v 
r dSi 
Taking the Laplace transform, 
VL(s) = Ls8i(s) =s8i(s) 
Substituting Eq. (2.197) into Eq. (2.199) yields 
"*«-V$W7 
from which the final transfer function is 
VL(s) 
s 
V{s) 
s + 0.677 
for small excursions about i = 14.78 or, equivalently, about v (t) = 0. 
(2.196) 
8i(s), we 
(2.197) 
(2.198) 
(2.199) 
(2.200) 
(2.201) 
Skill-Assessment Exercise 2.13 
PROBLEM: Find the linearized transfer function, G(s) = V(s)/I(s), for the elec-
trical network shown in Figure 2.50. The network contains a nonlinear resistor 
whose voltage-current relationship is defined by ir = e\ The current source, i(t), is 
a small-signal generator. 
ANSWER: 
G(s) = 
1 
5 + 2 
The complete solution is at www.wiley.com/college/nise. 
•it) 
2 A® /(/)0 
Nonlinear 
resistor 
IF 
WileyPLUS 
Control Solutions 
FIGURE 2.50 Nonlinear 
electric circuit for Skill-
Assessment Exercise 2.13 

94 
Chapter 2 
Modeling in the Frequency Domain 
Case Studies 
Antenna Control: Transfer Functions 
This chapter showed that physical systems can be modeled mathematically with 
transfer functions. Typically, systems are composed of subsystems of different 
types, such as electrical, mechanical, and electromechanical. 
The first case study uses our ongoing example of the antenna azimuth position 
control system to show how to represent each subsystem as a transfer function. 
PROBLEM: Find the transfer function for each subsystem of the antenna 
azimuth position control system schematic shown on the front endpapers. Use 
Configuration 1. 
SOLUTION: First, we identify the individual subsystems for which we must find 
transfer functions; they are summarized in Table 2.6. We proceed to find the 
transfer function for each subsystem. 
TABLE 2.6 Subsystems of the antenna azimuth position control system 
Subsystem 
Input potentiometer 
Preamp 
Power amp 
Motor 
Output potentiometer 
Input 
Angular rotation from user, #,(*) 
Voltage from potentiometers, 
ve(t) = v,{t) - v0{t) 
Voltage from preamp, vp{t) 
Voltage from power amp, ea(t) 
Angular rotation from load, 0Q(() 
Output 
Voltage to preamp, Vj(t) 
Voltage to power amp, vp(t) 
Voltage to motor, e(l(t) 
Angular rotation to load, 
0o(t) 
Voltage to preamp, VQ(0 
Input Potentiometer; Output Potentiometer 
Since the input and output potentiometers are configured in the same way, their 
transfer functions will be the same. We neglect the dynamics for the potentiometers 
and simply find the relationship between the output voltage and the input angular 
displacement. In the center position the output voltage is zero. Five turns toward 
either the positive 10 volts or the negative 10 volts yields a voltage change of 10 
volts. Thus, the transfer function, V,-(s)/0,;(s), for the potentiometers is found by 
dividing the voltage change by the angular displacement: 
Vt(s) 
m 
10 
lOJr 
(2.202) 
Preamplifier; Power Amplifier 
The transfer functions of the amplifiers are given in the problem statement. Two 
phenomena are neglected. First, we assume that saturation is never reached. 
Second, the dynamics of the preamplifier are neglected, since its speed of response 
is typically much greater than that of the power amplifier. The transfer functions of 
both amplifiers are given in the problem statement and are the ratio of the Laplace 
transforms of the output voltage divided by the input voltage. Hence, for the 

Case Studies 
95 
preamplifier, 
and for the power amplifier, 
Ea(s) 
VP(s) 
I) 
100 
5 + 100 
(2.203) 
(2.204) 
Motor and Load 
The motor and its load are next. The transfer function relating the armature displace-
ment to the armature voltage is given in Eq. (2.153). The equivalent inertia, /,„, is 
J - ^ + ' r f J g ) = 0.02 + 1 ^ = 0.03 
(2.205) 
where JL = lis the load inertia at 9$. The equivalent viscous damping, Dm, at the 
armature is 
D » B f l " + 1 > i ( p ) 
= 0.01 + 1 ^ = 0.02 
(2.206) 
where DL is the load viscous damping at 9Q. From the problem statement, Kt = 0.5 
N-m/A, Kb = 0.5 V-s/rad, and the armature resistance Ra = 8 ohms. These quantit-
ies along with Jm and Dm are substituted into Eq. (2.153), yielding the transfer 
function of the motor from the armature voltage to the armature displacement, or 
9m{s) _ 
Kt/{RaJm) 
2.083 
Ea(s) 
_L * (n 
±K*Kb 
s + — [Dm + 
5(5 + 1.71) 
T 
l 
J? 
To complete the transfer function of the motor, we multiply by the gear ratio to 
arrive at the transfer function relating load displacement to armature voltage: 
Oo(s) 
6m(s) 
0-2083 
EW) = 0AEM-4^vn) 
(2-208) 
The results are summarized in the block diagram and table of block diagram 
parameters (Configuration 1) shown on the front endpapers. 
CHALLENGE: We now give you a problem to test your knowledge of this chapter's 
objectives; Referring to the antenna azimuth position control system schematic 
shown on the front endpapers, evaluate the transfer function of each subsystem. 
Use Configuration 2. Record your results in the table of block diagram parameters 
shown on the front endpapers for use in subsequent chapters' case study challenges. 
Transfer Function of a Human Leg 
In this case study we find the transfer function of a biological system. The system is 
a human leg, which pivots from the hip joint. In this problem, the component of 
weight is nonlinear, so the system requires linearization before the evaluation of 
the transfer function. 

96 
Chapter 2 
Modeling in the Frequency Domain 
Hip joint 
FIGURE 2.51 
Cylinder model of a 
human leg. 
MDTt 
Tntt) 
PROBLEM: 
The transfer function of a human leg relates the output angular 
rotation about the hip joint to the input torque supplied by the leg muscle. A 
simplified model for the leg is shown in Figure 2.51. The model assumes an 
applied muscular torque, Tm(t), 
viscous damping, D, at the hip joint, and 
inertia, J, around the hip joint.15 Also, a component of the weight of the leg, 
Mg, where M is the mass of the leg and g is the acceleration due to gravity, 
creates a nonlinear torque. If we assume that the leg is of uniform density, 
the weight can be applied at L/2, where L is the length of the leg 
(Milsum, 
1966). Do the following: 
a. Evaluate the nonlinear torque. 
b. Find the transfer function, 9(s)/Tm(s), 
for small angles of rotation, 
where 9{s) is the angular rotation of the leg about the hip joint. 
SOLUTION: First, calculate the torque due to the weight. The total weight of 
the leg is Mg acting vertically. The component of the weight in the direction 
of rotation is Mg sin 9. This force is applied at a distance L / 2 from the hip 
joint. Hence the torque in the direction of rotation, Tw(t), is Mg(L/2) 
sin 9. 
Next, draw a free-body diagram of the leg, showing the applied torque, 
Tm{t), the torque due to the weight, Tw(t), 
and the opposing torques due to 
inertia and viscous damping (see Figure 2.52). 
Summing torques, we get 
Tw(t) 
J &9_ 
dt2 
d9 
I 
D-^ + Mg-sm9 = Tm(t) 
(2.209) 
FIGURE 2.52 
Free-body diagram of 
We linearize the system about the equilibrium point, 9 = 0, the vertical 
leg model 
position of the leg. Using Eq. (2.182), we get 
s i n # - s i n 0 = (cos0)<5# 
(2.210) 
from which, sin 9 = 89. Also, J d29/dt2 
= J d289/dt2 
and D d9/dt = D 
d89/dt. 
Hence Eq. (2.209) becomes 
rd289 
nd89 
mr L 
_, 
, , 
(2.211) 
Notice that the torque due to the weight approximates a spring torque on the leg. 
Taking the Laplace transform with zero initial conditions yields 
Js2 + Ds + Mg^\89{s) 
= 
Tm(s) 
(2.212) 
from which the transfer function is 
89(s) 
1/7 
Tm(s) 
92 +%S + MgL 
2/ 
(2.213) 
15 For emphasis, J is not around the center of mass, as we previously assumed for inertia in mechanical 
rotation. 

Review Questions 
97 
for small excursions about the equilibrium point, 9 = 0. 
CHALLENGE: We now introduce a case study challenge to test your 
knowledge of this chapter's objectives. Although the physical 
system is different from a human leg, the problem demonstrates 
the same principles: linearization followed by transfer function 
evaluation. 
Given the nonlinear electrical network shown in Figure 2.53, find 
the transfer function relating the output nonlinear resistor voltage, 
Vr(s), to the input source voltage, V(s). 
vrO = 2/:(/) 
FIGURE2.53 Nonlinear electric circuit 
^ Summary ^ 
In this chapter, we discussed how to find a mathematical model, called a transfer 
function, for linear, time-invariant electrical, mechanical, and electromechanical 
systems. The transfer function is defined as G(s) = C(s)/R(s), or the ratio of the 
Laplace transform of the output to the Laplace transform of the input. This relation-
ship is algebraic and also adapts itself to modeling interconnected subsystems. 
We realize that the physical world consists of more systems than we illustrated 
in this chapter. For example, we could apply transfer function modeling to hydraulic, 
pneumatic, heat, and even economic systems. Of course, we must assume these 
systems to be linear, or make linear approximations, in order to use this modeling 
technique. 
Now that we have our transfer function, we can evaluate its response to a 
specified input. System response will be covered in Chapter 4. For those pursuing the 
state-space approach, we continue our discussion of modeling in Chapter 3, where 
we use the time domain rather than the frequency domain. 
( 
Review Questions ^ 
1. What mathematical model permits easy interconnection of physical systems? 
2. To what classification of systems can the transfer function be best applied? 
3. What transformation turns the solution of differential equations into algebraic 
manipulations? 
4. Define the transfer function. 
5. What assumption is made concerning initial conditions when dealing with 
transfer functions? 
6. What do we call the mechanical equations written in order to evaluate the 
transfer function? 
7. If we understand the form the mechanical equations take, what step do we avoid 
in evaluating the transfer function? 
8. Why do transfer functions for mechanical networks look identical to transfer 
functions for electrical networks? 

Chapter 2 
Modeling in the Frequency Domain 
9. What function do gears perform? 
10. What are the component parts of the mechanical constants of a motor's 
transfer function? 
11. The motor's transfer function relates armature displacement to armature 
voltage. How can the transfer function that relates load displacement and 
armature voltage be determined? 
12. Summarize the steps taken to linearize a nonlinear system. 
WileyPLUS 
CEEJ 
Control Solutions 
Problems 
1. Derive the Laplace transform for the following time 
functions: [Section: 2.2] 
a. u{t) 
b. tu{t) 
c sin cot u(t) 
d. cos cot u(t) 
2. Using the Laplace transform pairs 
of Table 2.1 and the Laplace trans-
form theorems of Table 2.2, derive 
the Laplace transforms for the fol-
lowing time functions: [Section: 2.2] 
a. e~alsin cot u(t) 
b. e~atcos cot u(t) 
c. t3u{t) 
3. Repeat Problem 18 in Chapter 1, using Laplace 
transforms. Assume that the forcing functions are 
zero prior to t = 0-. [Section: 2.2] 
4. Repeat Problem 19 in Chapter 1, using Laplace 
transforms. Use the following initial conditions 
for each part as follows: (a) x(0) = 4, x'(0) — - 4 ; 
(b)x(0) = 4, x'(0) = l;(c)x(0) = 2, x'{0) = 3, where 
dx 
x'(0) = -r- (0). Assume that the forcing functions are 
zero prior to t = 0-. [Section: 2.2] 
5. Use MATLAB and the Symbolic Math 
Toolbox to find the Laplace 
transform of the following 
time functions: [Section :2.2] 
a. f(t) = 8 t 2 c o s ( 3 t + 45°) 
Symbolic Math 
b. f(t) = 3te-2tsin(4t + 60°) 
6. Use MATLAB and the Symbolic Math 
Toolbox to find the inverse 
Laplace transform of the following 
frequency functions: [ Section: 2.2] 
(s2 + 3s+10)(s+5) 
a. G(s) 
= 
b. G(s) = 
> + 3)(s + 4)(s2 -f-2s+100) 
s^ + 4s2 + 2s+6 
> + 8)(s2 + 8s + 3)(s2 + 5s + 1] 
A system is described by the following differential 
equation: 
^ + 3 ^ + 5 ^ 
dt3^dt2^dt 
d3x 
, d2x 
, dx 
dt3 
dt2 
dt 
8x 
Find the expression for the transfer function of the 
system, Y(s)/X(s). 
[Section: 2.3] 
For each of the following transfer functions, write 
the corresponding differential equation. [Section: 
2.3] 
X(s) 
7 
a. 
b. 
c. 
F(s) 
5 2+ 55+ 10 
X(s) _ 
15 
F(s)~ 
X(s) 
(s 
10)(5+ n ; 
5 + 3 
F(s) 
53 + 1152 + 12s + 18 
Write the differential equation for the system shown 
in Figure P2.1. [Section: 2.3] 
R(s) 
s6+ 7s5+ 3s4 + 2s3 + s2 + 5 
C(s) 
FIGURE P2.1 
symbolic Math 10. Write the differential equation that 
is mathematically equivalent to the 
WileyPLUS 
Control Solutions 

Problems 
99 
block diagram shown in Figure P2.2. Assume that 
16. Find the transfer function, G(s) — V0(s)/Vi(s), for 
r{t) — 3f3. [Section: 2.3] 
each network shown in Figure P2.3. [Section: 2.4] 
R(s) 
54 + 3s3+2,s2 + s + l 
s5 + 4s4 + 3s3 + 2s2 + 3s + 2 as) 
i n 
in 
IH 
FIGURE P2.2 
11. A system is described by the following differential 
equation: [Section 2.3] 
d2x 
^dx 
„ 
- y + 2 — + 3 ^ = 1 
dt2 
dt 
with the initial conditions x(0) — 1, i(0) = —1. 
Show a block diagram of the system, giving its 
transfer function and all pertinent inputs and out-
puts. (Hint: the initial conditions will show up as 
added inputs to an effective system with zero initial 
conditions.) 
12. Use MATLAB t o generate the t r a n s f e r 
MATLAB 
function: [Section :2.3] 
G(s) = 
5(s + 15)(s + 26)(s + 72) 
s(s + 55)(s 2 + 5 s + 30)(s + 56)(s 2 + 21 s + 52) 
in the following ways : 
a. the ratio of factors; 
b. the ratio of polynomials. 
13. Repeat Problem 12 for the following MATLAB 
transfer function: [Section :2.3] 
G(s) = 
s4 + 25s3 + 2052 + 15s + 42 
s5 + 13s4 + 9s3 + 37s2 + 35s + 50 
14. Use MATLAB to generate the partial-
fraction expansion of the following 
function: [Section:2.3] 
F s) = 
104(s + 5)(s+70; 
s(s+45)(s + 55)(s2 + 7s + 110)(s2 + 6s + 95) 
15. Use MATLAB and the Symbolic Math 
Symbolic Math 
Toolbox to input and form LTI ob- ^ E u 9 
jects in polynomial and factored form 
for the following frequency functions: 
[Section:2.3] 
45(s2 + 37s + 74)(s3 + 28s2 + 32s + 16) 
>+39)(s + 47)(s2+2s+100)(s3 + 27s2 + 18s+15) 
56(s + 14)(s3 + 4 9s2 + 62s + 53) 
> 3+81s 2 + 76s+65)(s2 + 88s + 33)(s2 + 56s + 77) 
a. G(s) = 
b. G{s) = 
«•/(/) ( i 
i H g i f l > v f l ( / ) v i ( / ) f + ) 
i n > 
IF^ZVOU) 
(a) 
m 
FIGURE P2.3 
17. Find the transfer function, G{s) = 
VL(s)/V(s), 
for each network shown in Figure P2.4. [Section: 2.4] 
2H 
2Q 
IF 
rAAAHf 
•to m 
20 
20 
2H 
*>© 
2P_. 
2 Q 
>'/.(') 
1 F ^ b 
2 H § | VLU) 
(a) 
m 
FIGURE P2.4 
18. Find the transfer function, G(s) = V0{s)/ 
Vi(s), for each network shown in 
Figure P2.5. Solve the problem using 
mesh analysis. [Section: 2.4] 
WileyPLUS 
Control Solutions 
+ v„(0-
2H 
(1)(+) 
IQ. 
3H 
i F " 
1H 
vHt)(l) 
l H l ;±TlF lF--v,,(/) 
(a) 
(b) 
FIGURE P2.5 
19. Repeat Problem 18 using nodal equations. [Section: 
2.4] 
20. a. Write, but do not solve, the mesh and nodal 
equations for the network of Figure P2.6. [Sec-
tion: 2.4] 
b. Use MATLAB, the Symbolic Math Symbolic Math 
Toolbox, and the equations found ^ E u V 
inpartatosolveforthetransfer 
function, G{s) = V0(s)/V(s). 
Use both the 

100 
Chapter 2 
Modeling in the Frequency Domain 
mesh 
and 
nodal 
equations 
and 
show 
t h a t e i t h e r s e t y i e l d s t h e same t r a n s f e r 
f u n c t i o n . [ S e c t i o n : 2.4] 
110 kQ 
4/iF 
v,(0 
i n 
9* 
!',(/) 
If 
2Q 
4 Q 
6H 
AAA—rAAA/W 
rt-)© 
2Q 
4H 
1-,,(/) 
8 f i > v„(/) 
400 kQ 
4/iF 
(a) 
HOkQ 
FIGURE P2.6 
21. Find the transfer function, G(s) = V0(s)/Vi(s), 
for 
each operational amplifier circuit shown in Figure 
P2.7. [Section: 2.4] 
100 kQ 
VjU) 
It 
600 kQ 
4/iF 
v,(0 
,.(0 
400 kQ 
500 kQ 2/dP 
2/iF 
v,(0 
4//F 
>'.,<0 
"600kQ 
(6) 
FIGURE P2.8 
(a) 
100 kQ 
rWY 
r;(/) 
AAAHC-
100kQ 2/iF 
100 kQ 
2/lF 
23. Find the transfer function, G(s) =X\(s)/F(s), 
for 
the translational mechanical system shown in Figure 
P2.9. [Section: 2.5] 
i _ 
.-. (i\ 
5N/m 
1 
r7 
4 N-s/m 
1 | 
| 1 
i* 
5 kg 
|C 
vjt) 
FIGURE P2.9 
24. Find the transfer function, G(s) = X2(s)/F{s), 
for 
the translational mechanical network shown in 
Figure P2.10. [Section: 2.5] 
(b) 
FIGURE P2.7 
22. Find the transfer function, G(s) = V0(s)/Vi(s), 
for 
each operational amplifier circuit shown in Figure 
P2.8. [Section: 2.4] 
Frictionless" 
FIGURE P2.10 

Problems 
101 
25. Find the transfer function, G(s) = 
wileyPius 
X2(s)/F(s). 
for the translational 
d J J > 
mechanical system shown in Figure 
control solutions 
P2.ll. (Hint: place a zero mass at 
x2(t).) [Section: 2.5] 
A, (/) 
-A,(/) 
m — -nm^ 
\Mi) 
Mt = 8 kg 
Frictionless 
10 kg 
-
2 N/m 
5 N-s/m 
FIGURE P2.11 
2 N-s/m — 
fit) 
1 N/m 
4 N-s/m 
M2=3kg 
N Frictionless 
I—0KKKP-
16 N-s/m 15 N/m 
.Frictionless 
orcrr.,-'"." 
_3 
(6) 
FIGURE P2.14 
26. For the system of Figure P2.12 find the transfer 
29. Write, but do not solve, the equations of motion for 
function, G(s) = Xi{s)/F(s). 
[Section: 2.5] 
the translational mechanical system shown in Figure 
P2.15. [Section: 2.5] 
AT, = 4 N/m 
/ v. = 3N-s/m 
-v,(/) 
if, = 1 kg 
K2=5N/m 
/Vo = 3 N-s/m 
-*~AS(/) 
M2 = 2kg 
'-fit) 
/v3 = 2 N-s/mF: 
I/ 
. 
FIGURE P2.12 
27. Find the transfer function, G{s) =X${s)/F(s), 
for 
the translational mechanical system shown in Figure 
P2.13. [Section: 2.5] 
K\ - 5 N/m 
/ v, = 2 N-s/m 
AT2 = 4 N/m 
/v2 = 2 N-s/m 
Hn 
W3 = 5kg 
w,=4k g—^JQ^p— /kr2 = 5 kg 
8¾ = 4 N/m 
/^. = 3 N-s/m 
2 N-s/m 
6 N/m 
^vOTP 4ks -
MO 
2 N-s/m 
4 kg 
\Mi) 
6 N/m 
-7(0 
^ 
4 kg 
2 N-s/m 
Frictionless 
-A"|(0 
FIGURE P2.15 
-./(') 
v2C) 
30. For each of the rotational mechanical systems 
shown in Figure P2.16, write, but do not solve, the 
equations of motion. [Section: 2.6] 
Frictionless' 
FIGURE P2.13 
28. Find the transfer function, Xs(s)/F(s), 
for each 
system shown in Figure P2.14. [Section: 2.5] 
/v, = 4 N-s/m 
fit) 
*-
/ v 2 = 4 N-s/m 
E 
TT^ff 
-A I i t ) 
M\ = 4 kg 
0ff 
lN-m-s/rad ™*<'> 
: N-m-s/rad A 
i-p- 
A A 
v 
9 N-m/rad 
(a) 
7(/) 
~ 
°2 
3 N-m/rad 
D, 
-x2U) 
K\ 
AT=5N/m 
|/v3 = 4N-s/m 
FIGURE P2.16 
-M2 = 4kg 
(«) 
f =4N / 
31. For the rotational mechanical system 
wileypws 
/ 4 
s " 
shown in Figure P2.17, find the transfer 
C B S 
! 
function 
¢7(5)=02(5-)/7(51) 
[Section: control solutions 
2.6] 

102 
Chapter 2 
Modeling in the Frequency Domain 
7(/) 
1 kg-m2 
) -
d 
1 N-m/rad 
6M/) 
n 
1 N-m-s/rad 
1 N-m-s/rad 
V 1 N-m-s/rad 
35. Find the transfer function, G(s) = 94(s)/T(s), for 
the rotational system shown in Figure P2.21. 
[Section: 2.7] 
7(/) B\{t) 
FIGURE P2.17 
32. For the rotational mechanical system with gears 
shown in Figure P2.18, find the transfer function, 
G(s) = 0^(s)/T(s). The gears have inertia and bear-
ing friction as shown. [Section: 2.7] 
7(/) 
W> = 110 
W, =26 /V4=120 
B2(t) 
01,(1) 
26 N-m-s/rad 
/V3 = 23 
2 N-m/rad 
FIGURE P2.21 
p I 
^2 
J2,D2 
/V, 
^ i 
/V4 
FIGURE P2 
A/3 
l 
.18 
36. For the rotational system shown in Figure P2.22, 
find the transfer function, G(s) — 0L(S)/T(S). 
[Sec-
tion: 2.7] 
2 N-m-s/rad 3 N-m/rad 
^2=33 U ] lkg-m2 ) 
[ T 
n$W 
^ = 50 
17-(/) 
i 
— U | = l l 
N4=10\-
J5^5 
lit) 
0.04 N-m-s/rad 
33. For the rotational system shown in Figure P2.19, find 
the transfer function, G{s) = e2{s)/T{s). [Section: 2.7] 
rrwii 
FIGURE P2.22 
7(/) 
-p()/L = 2kg-n4| D( a , N.m.s/rad 
M) 
r-j—f)j2=lkg-m2 
/V2=12 
D2 = 2 N-m-s/rad 
M = 4 
/V4= I6 
D3 = 32 N-m-s/rad 
FIGURE P2.19 
K = 64 N-m/rad n 
(•/•^lekg-m^j-^ro^--
37. For the rotational system shown in 
wileyPLUS 
Figure P2.23, write the equations of 
^ 
j^9 
motion from which the transfer func- 
control solutions 
tion, G(s) = 6i(s)/T(s), can be found. 
[Section: 2.7] 
34. Find the transfer function, G(s) = 02(s)/T(s), for 
the rotational mechanical system shown in Figure 
P2.20. [Section: 2.7] 
7(/) 0,(/) 
/V, = 25 
1000 N-m-s/rad ^ 
200 kg-m2 
3 kg-m2 
3 N-m/rad ^ 2 = 50 
Ni=5 
0<t) 
200 kg-m2 
250 N-m/rad 
N2 
J? rWHI 
Ns 
h 
h 
FIGURE P2.23 
D, 
± 
SB 
FIGURE P2.20 
38. Given the rotational system shown in Figure P2.24, 
find the transfer 
function, 
G(s) 
=9(,(s)/0i(s). 
[Section: 2.7] 

Problems 
103 
0,(/) 
J[,D 
N2 
N, 
Ai 
K, 
(=1 
w 
J4,D 
— 
A 
A', 
D 
FIGURE P2.24 
39. In the system shown in Figure P2.25, the inertia, /, of 
radius, r, is constrained to move only about the station-
ary axis A. A viscous damping force of translational 
value /„ exists between the bodies J and M. If an 
external force, f(t), is applied to the mass, find the 
transfer function, G{s) = Q(s)/F(s). [Sections: 2.5; 2.6] 
FIGURE P2.27 
42. For the motor, load, and torque-speed curve shown 
in Figure P2.28, find 
the 
transfer 
function, 
G(s) = $L{s)/Ea(s). 
[Section: 2.8] 
^m^ 
(•„(!) 
)./,=5 kg-m2) 
1 
//2 = 150 i 
D2 = 36 N-m-s/rad 
Nj =50 
Dx = 8 N-m-s/rad 
6L(t) 
-(-)¾ =18kg-m^ 
M 
AD 
FIGURE P2.25 
40. For the combined translational and rotational sys-
tem shown in Figure P2.26, find the transfer func-
tion, G{s) = X(s)/T(s). 
[Sections: 2.5; 2.6; 2.7] 
150 
FIGURE P2.28 
co (rad/s) 
7(/) 
/V, = 10 
NA = 60 I 
N2 = 20 I 
I $3 = 30 
/ = 3 kg-m2 
i N-m-s/rad 
, ^ ^Radius = 2 m 
£)2 = I N-m-s/rad 
Ideal 
gear 1:1 
43. The motor whose torque-speed characteristics are 
shown in Figure P2.29 drives the load shown in the 
diagram. Some of the gears have inertia. Find the 
transfer function, G(s) — &g(s)/Ea{s). [Section: 2.8] 
edt) 
2 kg 
2 N-s/m I 
Motor 
°3N/m 
N2 = 2Q 
J2 = 2 kg-m2 
#, = 10 
7, = 1 kg-m2 
W3=10 
N4 = 20 
/ 3 = 2 kg-m2 
ft (/) 
D = 32 N-m-s/rad 
/4= 16 kg-m2 
FIGURE P2.26 
T(N-m) 
41. Given the combined translational and 
wileyPius 
rotational system shown in Figure 
WHJ«K 
P2.27, find 
the 
transfer 
function, 
control solutions 
G(s) = X(s)/T(s). 
[Sections: 2.5; 2.6] 
RPM 
FIGURE P2.29 

104 
Chapter 2 
Modeling in the Frequency Domain 
44. A dc motor develops 55 N-m of torque at a speed 
of 600 rad/s when 12 volts are applied. It stalls out 
at this voltage with 100 N-m of torque. If the 
inertia and damping of the armature are 7 kg-m 
and 3 N-m-s/rad, respectively, find the transfer 
function, G(s) = 0/,(s)/Ea(s), 
of this motor if it 
drives an inertia load of 105 kg-m2 through a gear 
train, as shown in Figure P2.30. [Section: 2.8] 
#,„(') 
+ — 
Motor f 
N2 = 25 
N, = 12 
N4 = 72 
^3 = 25 
48. Find the series and parallel analogs for the rota-
tional mechanical systems shown in Figure P2.16(b) 
in the problems. [Section: 2.9] 
49. A system's output, c, is related to the system's input, 
r, by the straight-line relationship, c = 5r + 7. Is the 
system linear? [Section: 2.10] 
50. Consider the differential equation 
d2x 
ndx 
_ 
_. . 
_ 
+ 3 - + 2 * = / M 
where f(x) is the input and is a function of the 
output, x. If f(x) = sinx, linearize the differential 
equation for small excursions. [Section: 2.10] 
x = 0 
a. 
Load 
51, 
FIGURE P2.30 
45. In this chapter, we derived the 
wileyPLUs 
transfer function of a dc motor 
C J J S J 
relating the angular displace- 
control solutions 
ment output to the armature 
voltage input. Often we want to control the out-
put torque rather than the displacement. Derive 
the transfer function of the motor that relates 
output torque to input armature voltage. 
[Section: 2.8] 
46. Find the transfer function, G(s) = X(s)/Ea(s), 
for 
the system shown in Figure P2.31. [Sections: 2.5-2.8] 
b. x = it 
Consider the differential equation 
d3x 
d2x 
dx 
5 ^ + 1 0 ^ + 3 1 ^ + 30* = /(*) 
dt3 
dt2 
dt 
JX ' 
WileyPLUS 
Control Solutions 
52. 
ejl) 
Motor — N, = 10 
D = 1 N-m-s/rad 
N2 = 20 
Radius = 2 m 
For the motor: 
Ja =lkg-m 2 
Da = 1 N-m-s/rad 
Ra = ID 
Kb = 1 V-s/rad 
K, = 1 N-m/A 
where f(x) is the input and is a function of the 
output, x. If f(x) = e~x, linearize the differential 
equation for x near 0. [Section: 2.10] 
Many systems are piecewise linear. That is, over a 
large range of variable values, the system can be 
described linearly. A system with amplifier satura-
tion is one such example. Given the differential 
equation 
g + 17§ + 50* = /W 
assume that f(x) is as shown in Figure P2.32. Write 
the differential equation for each of the following 
ranges of x: [Section: 2.10] 
a. — oo < x < —3 
b. - 3 < x < 3 
c. 3 < x < oo 
6 
FIGURE P2.31 
47. Find the series and parallel analogs for the transla-
tional mechanical system shown in Figure 2.20 in the 
text. [Section: 2.9] 
-6 
FIGURE P2.32 

Problems 
105 
53. For the translational mechanical system 
wileyPLUs 
with a nonlinear spring shown in Figure 
( J J J J J 
P2.33, 
find 
the 
transfer 
function, control solutions 
G(s) = X(s)/F(s), 
for small excursions 
around f(t) = 1. The spring is defined by JC,(/) = 
1 — e~/jM, where xs(t) is the spring displacement 
and/ 5 (/) is the spring force. [Section: 2.10] 
Nonlinear 
spring 
1 N-s/m 
FIGURE P2.33 
54. Consider the restaurant plate dispenser shown in 
Figure P2.34, which consists of a vertical stack of 
dishes supported by a compressed spring. As each 
plate is removed, the reduced weight on the 
dispenser causes the remaining plates to rise. 
Assume that the mass of the system minus the 
top plate is M, the viscous friction between 
the piston and the sides of the cylinder is /„, 
the spring constant is K, and the weight of a 
single plate is Wn. Find the transfer function, 
Y(s)/F(s), 
where F(s) is the step reduction in 
force felt when the top plate is removed, and 
Y(s) is the vertical displacement of the dispenser 
in an upward direction. 
Plates 
Piston 
FIGURE P2.34 
Plate dispenser 
55. Each inner ear in a human has a set of three nearly 
perpendicular semicircular canals of about 0.28 mm 
in diameter filled with fluid. Hair-cell transducers 
that deflect with skull movements and whose main 
purpose is to work as attitude sensors as well as help 
us maintain our sense of direction and equilibrium 
are attached to the canals. As the hair cells move, 
they deflect a waterproof flap called the cupula. It 
has been shown that the skull and cupula move-
ments are related by the following equation (Mil-
sum, 1966): 
J(j) + b<i> + k(j>= (af)\jr 
where 
J = moment of inertia of the fluid in the 
thin tube (constant) 
b = torque per unit relative angular velocity 
(constant) 
k = torque per unit relative angular 
displacement (constant) 
a = constant 
¢(1) — angular deflection of the cupula (output) 
•fi(t) = skull's angular acceleration (input) 
Find the transfer function — 
®(s) 
n*) 
56. Diabetes is an illness that has risen to epidemic propor-
tions, affecting about 3% of the total world population 
in 2003. A differential equation model that describes 
the total population size of diabetics is 
dC(t) 
dt 
dN(t) 
dt 
= -(k + fi + 8 + y + v)C(t) + XN(t) 
= -(v + 
8)C(t)~/xN(t)+I(t) 
with the initial conditions C(0) = Co and N{0) = JVn 
I(t) — the system input: the number of new 
cases of diabetes 
C(t) = number of diabetics with complications 
N(t) = the system output: the total number of 
diabetics with and without complications 
ix = natural mortality rate (constant) 
X = probability of developing a complication 
(constant) 
8 = mortality rate due to complications 
(constant) 
v = rate at which patients with complications 
become severely disabled (constant) 
y — rate at which complications are cured 
(constant) 

106 
Chapter 2 
Modeling in the Frequency Domain 
Assume the following values for parameters: v = 8 = 
0.05/yr, n = 0.02/yr, y = 0.08/yr, A = 0.7, with ini-
tial conditions C0 = 47,000,500 and N0 =, 61,100,500. 
Assume also that diabetic incidence is constant I(t) = 
I = 6 x 106 (Boutayeb, 2004). 
a. Draw a block diagram of the system showing the 
output N(s), the input /(5), the transfer function, 
and the initial conditions. 
b. Use any method to find the analytic expression 
for N(t) for t > 0. 
57. The circuit shown in Figure P235(a) is excited with 
the pulse shown in Figure P2.35(6). 
2Q 
vjl) 
3V 
(«) 
5 msec 
(b) 
FIGURE P2.35 
The Laplace transform can be used to calculate va(t) 
in two different ways: The "exact" method is per-
formed 
by writing v,(f) = 3[w(f) - u{t - 0.005)], 
from which we use the Laplace transform to obtain 
l - e -0.0055 
Vin(s) = 3 
(Hint: look at Item 5 in Table 2.2, the time shift 
theorem.) In the second approach the pulse is approxi-
mated by an impulse input having the same area 
(energy) as the original input. From Figure F235(b): 
vin(t) « (3V)(5msec) 5(f) = 0.0155(f). In this case, 
Vin(s) = 0.015. This approximation can be used as 
long as the width of the pulse of Figure P2.35(6) is 
much smaller than the circuit's smallest time constant. 
(Here, t = RC = (20)(4F) = 8 s e c > 5msec.) 
a. Assuming the capacitor is initially discharged, 
obtain an analytic expression for v0 (f) using both 
methods. 
b. Plot the results of both methods using any means 
available to you, and compare both outputs. 
Discuss the differences. 
58. In a magnetic levitation experiment a metallic ob-
ject is held up in the air suspended under an electro-
magnet. The vertical displacement of the object can 
be described by the following nonlinear differential 
equation (Galvao, 2003): 
d2H 
, I2 
m —rr- = me - k —, 
H2 
dt2 
where 
m — mass of the metallic object 
g = gravity acceleration constant 
k = a positive constant 
H= distance between the electromagnet and 
the metallic object (output signal) 
I = electromagnet/s current (input signal) 
a. Show that a system's equilibrium will be achieved 
when HQ — IO-
b. Linearize the equation about the equilibrium 
point found in Part a and show that the resulting 
transfer function obtained from the linearized 
differential equation can be expressed as 
8H(s) _ 
a 
8I(s) ~ 
s2-b2 
with a > 0. Hint: to perform the linearization, define 
8H = H(t) - HQ and 5/ = /(f) - /0; substitute into 
the original equation. This will give 
in d2(H0 + 8H) 
(/0 
'- = me - k-
siy 
= y 
dt2 
{HQ + SHY 
Now get a first-order Taylor's series approximation on 
the right-hand side of the equation. Namely, calculate 
m 
d28H 
dy 
dt2 
38H 
8H 
SH=0, 5/=0 
dy_ 
881 
SI 
5//=0, 81=0 
59. Figure P2.36 shows a quarter-car model commonly 
used for analyzing suspension systems. The car's tire 
is considered to act as a spring without damping, as 
shown. The parameters of the model are (Lin, 1997) 
Mb = car's body mass 
Mlts= wheel's mass 
Ka = strut's spring constant 
K( = tire's spring constant 
/ v = strut's damping constant 
r = road disturbance (input) 
xs = car's vertical displacement 
xw = wheel's vertical displacement 

Problems 
107 
Obtain the transfer function from the road distur-
Xs(s) 
bance to the car's vertical displacement R(s)-
/ v C 
Mu 
Wheel 
////////////// 
FIGURE P2.36 
Quarter-car model used for suspension design. 
(© 1997 IEEE) 
60. Enzymes are large proteins that biological systems 
use to increase the rate at which reactions occur. For 
example, food is usually composed of large mole-
cules that are hard to digest; enzymes break down 
the large molecules into small nutrients as part of 
the digestive process. One such enzyme is amylase, 
contained in human saliva. It is commonly known 
that if you place a piece of uncooked pasta in your 
mouth its taste will change from paper-like to sweet 
as amylase breaks down the carbohydrates into 
sugars. Enzyme breakdown is often expressed by 
the following relation: 
S + 
E^tC^P 
In this expression a substrate (S) interacts with an 
enzyme (E) to form a combined product (Q at a 
rate k\. The intermediate compound is reversible 
and gets disassociated at a rate k-\. Simultaneously 
some of the compound is transformed into the final 
product (P) at a rate k2. The kinetics describing this 
reaction are known as the Michaelis-Menten equations 
and consist of four nonlinear differential equations. 
However, under some conditions these equations can 
be simplified. Let EQ and 5b be the initial concentra-
tions of enzyme and substrate, respectively. It is gener-
ally accepted that under some energetic conditions or 
when the enzyme concentration is very big (EQ » So), 
the kinetics for this reaction are given by 
/70 
-jt = 
kf(KsC-S) 
— = k^(S — KM C) 
dP 
vr 
where the following constant terms are used 
{Schnell, 2004) : 
k* = k]E0 
K< = k-l 
KM — &$ + 7— 
kf 
a. Assuming the initial conditions for the reaction 
are S(0) = S0, £(0) = E0, C(0) = P(0) = 0, find 
the Laplace transform expressions for S, C, and 
P: &{S}, S£{C}, and Sf{P}, respectively. 
b. Use the final theorem to find S(oo), C(oo), and 
P(oo). 
61. Humans are able to stand on two legs through a 
complex feedback system that includes several sensory 
inputs—equilibrium and visual along with muscle ac-
tuation. In order to gain a better understanding of the 
workings of the postural feedback mechanism, an 
individual is asked to stand on a platform to which 
sensors are attached at the base. Vibration actuators are 
attached with straps to the individual's calves. As the 
vibration actuators are stimulated, the individual sways 
and movements are recorded. It was hypothesized that 
the human postural dynamics are analogous to those of 
a cart with a balancing standing pole attached (inverted 
pendulum). In that case, the dynamics can be described 
by the following two equations: 
J~dfi = ms / s i n 6 )W + rbaI + r<'W 
rbal(0 = -mgUm6{t) + kJd{t) - i]J0(t) 
1 
-pj fo(t)dt 
where m is the individual's mass; / is the height of 
the individual's center of gravity; g is the gravita-
tional constant; J is the individual's equivalent 
moment of inertia; ??, p, and k are constants given 
by the body's postural control system; 6(t) is the 

108 
Chapter 2 
Modeling in the Frequency Domain 
individual's angle with respect to a vertical line; 
Tba\(t) is the torque generated by the body muscles 
to maintain balance; and Ta(t) is the external 
torque input disturbance. Find the transfer func-
K ' (Johansson, 1988). 
tion Td(s) 
62. Figure P2.37 shows a crane hoisting a load. Al-
though the actual system's model is highly non-
linear, if the rope is considered to be stiff with a 
fixed length L, the system can be modeled using the 
following equations: 
mLxLa = mLg<t) 
mT'xr = fa - mLg$ 
XLa 
=XT-XL 
XL = L<t> 
where mt is the mass of the load, mj is the mass of the 
cart, xj and XL are displacements as defined in the 
figure, 0 is the rope angle with respect to the vertical, 
and/r is the force applied to the cart (Marttinen, 1990). 
a. Obtain the transfer function from cart velocity to 
rope angle VT(s)' 
b. Assume that the cart is driven at a constant 
velocity Vo and obtain an expression for the 
resulting 0(f). Show that under this condition, 
fg 
the load will sway with a frequency COQ = ,/—. 
V 
c. Find the transfer function from the applied force 
XT(s) 
to the cart's position, FT{s)' 
d. Show that if a constant force is applied to the cart, 
its velocity will increase without bound as t —* oo. 
FIGURE P2.37 (© 1990 IEEE) 
63. In 1978, Malthus developed a model for human 
growth population that is also commonly used to 
model bacterial growth as follows. Let N(t) be the 
population density observed at time t. Let K be the 
rate of reproduction per unit time. Neglecting pop-
ulation deaths, the population density at a time 
t + At (with small At) is given by 
N{t + At) t* N(t) + KN(t)At 
which also can be written as 
N(t + At)-N{t) 
At 
= KN(t) 
Since N(t) can be considered to be a very large 
number, letting At -* 0 gives the following differen-
tial equation (Edelstein-Keshet, 2005): 
dN(t) = KN(t) 
a. Assuming an initial population ./V(O) = TVo, solve 
the differential equation by finding N(t). 
b. Find the time at which the population is double 
the initial population. 
64. Blood vessel blockages can in some instances be 
diagnosed through noninvasive techniques such as 
the use of sensitive microphones to detect flow 
acoustic anomalies. In order to predict the sound 
properties of the left coronary artery, a model has 
been developed that partitions the artery into 14 
segments, as shown in Figure P2.38(a). 
(a) 

Problems 
109 
o-
AA/v-^IKKK^ 
Q, 
p2 
-o 
c ~z 
=>Q2 
FIGURE P2.38 (© 1990 IEEE) 
Each segment is then modeled through the anal-
ogous electrical circuit of Figure P2.38(6), resulting 
in the total model shown in Figure P2.38(c), where 
eight terminal resistances (Z) have been added. In 
the electrical model, pressure is analogous to volt-
age and blood flow is analogous to current. As an 
example, for Segment 3 it was experimentally veri-
fied that R3 = 41760, C3 = 0.98 /zF, L3 = 140.6 H, 
and Z 3 = 308,163 ft (Wang, 1990). 
a. For Segment 3, find the transfer function from 
input pressure to blood flow through Z3, 
°3 
. 
b. It is well known in circuit analysis that if a 
constant input is applied to a circuit such as 
the one of Figure P2.38(fr), the capacitor can be 
substituted by an open circuit and the inductor 
can be substituted by a short circuit as time 
approaches infinity. Use this fact to calculate 
the flow through Z 3 after a constant unit pres-
sure pulse is applied and time approaches 
infinity. 
c. Verify the result obtained in Part b using the 
transfer function obtained in Part a and applying 
the final value theorem. 
65. In order to design an underwater vehicle that has 
the characteristics of both a long-range transit vehi-
cle (torpedo-like) and a highly maneuverable low-
speed vehicle (boxlike), researchers have developed 
a thruster that mimics that of squid jet locomotion 
(Krieg, 2008). It has been demonstrated there that 
the average normalized thrust due to a command 
T 
step input, U(s) = - ^ - , is given by: 
T(t) = Tref(\ - e~xt) + a sm(2irft) 
where Tref- is the reference or desired thrust, A. is 
the system's damping constant, a is the amplitude of 
the oscillation caused by the pumping action 
of the actuator, / is the actuator frequency, and 
T(t) is the average resulting normalized thrust. Find 
T(s) 
the thruster's transfer function -r—r- Show all steps. 
U{s) 
66. The Gompertz growth model is commonly used to 
model tumor cell growth. Let v(t) be the tumor's 
volume, then 
dv(t) 
dt = Xe-atv{t) 
where X and a are two appropriate constants 
(Edelstein-Keshet, 2005). 
a. Verify that the solution to this equation is given 
by v(t) = vo^-/a^~e"'\ 
where vo is the initial 
tumor volume. 
This model takes into account the fact that when 
nutrients and oxygen are scarce at the tumor's 
core, its growth is impaired. Find the final pre-
dicted tumor volume (let t —* oo). 
For a specific mouse tumor, it was experimen-
tally found that A = 2.5 days, a = 0.1 days with 
v0 = 50 x 10"3 mm3 (Chignola, 2005). Use any 
method available to make a plot of v(t) vs. t. 
Check the result obtained in Part b with the results 
from the graph from Part c. 
5). 
C. 
d. 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
67. High-speed rail pantograph. Problem 21 in Chap-
ter 1 discusses active control of a pantograph 
mechanism for high-speed rail systems. The dia-
gram for the pantograph and catenary coupling is 
shown in Figure P2.39(a). Assume the simplified 
model shown in Figure P2.39(6), where the catenary 
is represented by the spring, Kavc (O'Connor, 1997). 

110 
Chapter 2 
Modeling in the Frequency Domain 
Tower 
Mh 
Pantograph shoe 
Head mass 
Kb < 
U /v/, 
Head suspension 
Mr 
Frame mass 
, 
Frame 
KfS 
?/v/ 
7777777777777777 
Direction 
of travel 
suspension 
tfnvp=l.535xl06N/m 
Kt=82.3xl03N/m 
/v/r=130N-s/m 
I —|/v/ = 30N-s/m 
FIGURE P2.39 
a. Coupling of pantograph and catenary; b. simplified representation showing the active-control force (Reprinted 
with permission of ASME.) 
a. Find the transfer function, G\{s) = Ycal(s)/ 
^up(s), where ycat(f) is the catenary displacement 
and /up(r) is the upward force applied to the 
pantograph under active control. 
b. Find the transfer function G2(s) = 
Yh(s)/Fup(s), 
where yh(t) is the pantograph head displacement. 
c. Find 
the 
transfer 
function, 
G(s) = (Yt,(s)-
Ycat(s))/Fap(s). 
68. Control of HIV/AIDS. HIV inflicts its damage by 
infecting healthy CD4 + T cells (a type of white 
blood cell) that are necessary to fight infection. As 
the virus embeds in a T cell and the immune system 
produces more of these cells to fight the infection, 
the virus propagates in an opportunistic fashion. As 
we now develop a simple HIV model, refer to Figure 
P2.40. Normally T cells are produced at a rate s and 
die at a rate d. The HIV virus is present in the 
bloodstream in the infected individual. These 
viruses in the bloodstream, called free viruses, infect 
healthy T cells at a rate fi. Also, the viruses repro-
duce through the T cell multiplication process or 
otherwise at a rate k. Free viruses die at a rate c. 
Infected T cells die at a rate /x. 
U 
I 
Healthy cell 
Free virus 
Infected cell 
H 
• 
> fi 
FIGURE P2.40 (© 2004 IEEE) 
A simple mathematical model that illustrates 
these interactions is given by the following equa-
tions {Craig, 2004): 
— = s-dT- 
pTv 
dt 
dV 
dt 
= PTv 
- IMT* 
dv 
.-» 
— = kT — cv 
dt 

Problems 
111 
where 
T = number of healthy T cells 
T* = number of infected T cells 
v = number of free viruses 
a. The system is nonlinear; thus linearization is 
necessary to find transfer functions as you will 
do in subsequent chapters. The nonlinear nature 
of this model can be seen from the above equa-
tions. Determine which of these equations are 
linear, which are nonlinear, and explain why. 
b. The system has two equilibrium points. Show 
that these are given by 
(To, Tl v0) = ( ^ , 0 , 0 ) 
and 
(en 
s 
cd 
sk 
d\ 
(To, r0,v0) = ^ , - - - , - - - j 
69. Hybrid vehicle. Problem 23 in Chapter 1 discusses 
the cruise control of serial, parallel, and split-
power hybrid electric vehicles (HEVs). The func-
tional block diagrams developed for these HEVs 
indicated that the speed of a vehicle depends upon 
the balance between the motive forces (developed 
by the gasoline engine and/or the electric motor) 
and running resistive forces. The resistive forces 
include the aerodynamic drag, rolling resistance, 
and climbing resistance. Figure P2.41 illustrates 
the running resistances for a car moving uphill 
(Bosch, 2007). 
FIGURE P2.41 
Running resistances 
The total running resistance, Fw is calculated as 
Fw — FR0 + FL + Fst, where FR(I is the rolling resist-
ance, Fi is the aerodynamic drag, and F& is the 
climbing resistance. The aerodynamic drag is propor-
tional to the square of the sum of car velocity, v, and 
the head-wind velocity, v/,*., or v + v/,H.. The other two 
resistances are functions of car weight, G, and the 
gradient of the road (given by the gradient angle, a), 
as seen from the following equations: 
FRO = fG cos a — fmg cos a 
where 
/ = coefficient of rolling resistance, 
m — car mass, in kg, 
g = gravitational acceleration, inm/s2. 
FL=Q.5pCwA{v 
+ v,lw)2 
where 
p — air density, in kg/m3, 
Cw = coefficient of aerodynamic drag, 
A = largest cross-section of the car, in kg/m2. 
Fst = G since = mgsin a 
The motive force, F, available at the drive wheels 
is: 
j-, _ I hot 
_ Film, 
where 
T = motive torque. 
P = motive power, 
i tot = total transmission ratio, 
r = tire radius, 
r\tol — total drive-train efficiency. 
The surplus force, F — Fw, accelerates the vehicle (or 
F — Fw 
retards it when Fw > F). Letting a = 
-. where a 
km • m 
is the acceleration and km is a coefficient that com-
pensates for the apparent increase in vehicle mass due 
to rotating masses (wheels, flywheel, crankshaft, etc.): 
a. Show that car acceleration,16 a, may be deter-
mined from the equation: 
F = fmg cos a + mg sin a + 0.5pCwA(v + v/TO.)2 + km ma 
16 Other quantities, such as top speed, climbing ability, etc., may also be 
calculated by manipulation from that equation. 

112 
Chapter 2 
Modeling in the Frequency Domain 
b. Assuming constant acceleration and using the 
average value for speed, find the average motive 
force, Fav (inN), and power, Pav (inkW) the car needs 
to accelerate from 40 to 60 km/h in 4 seconds on a 
level road, (a = 0°), under windless conditions, 
where VHW — 0. You are given the following parame-
ters: m = 1590kg, A = 2m2, / = 0.011, p; = 
l.2kg/m3,Cw = 0.3,t]tot = 0.9, km = 1.2.Further-
more, calculate the additional power, PaM, the car 
needs after reaching 60 km/h to maintain its speed 
while climbing a hill with a gradient a = 5°. 
e. The equation derived in Part a describes the non-
linear car motion dynamics where F(t) is the input to 
the system, and v(r) the resulting output. Given that 
the aerodynamic drag is proportional to v2 under 
windless conditions, linearize the resulting equation 
of motion around an average speed, v0 = 50 km/h, 
when the car travels on a level road,17 where a = 0°. 
(Hint: Expand v2 - v2, in a truncated Taylor series). 
Write that equation of motion and represent it with a 
block diagram in which the block Gv represents the 
vehicle dynamics. The output of that block is the car 
speed, v(t), and the input is the excess motive force, 
Fe(t), defined as: Fe = F - /¾ — FRo + F0, where 
F0 the constant component of the linearized aerody-
namic drag. 
Use the equation in Part c to find the vehicle 
transfer function: Gv(s) = V(s)/Fe(s). 
Note that on a level road the climbing resistance is Fst = 0, 
since sin a = sin0° = 0. 
Cyber Exploration Laboratory 
Experiment 2.1 
Objectives To learn to use MATLAB to (1) generate polynomials, (2) manipu-
late polynomials, (3) generate transfer functions, (4) manipulate transfer functions, 
and (5) perform partial-fraction expansions. 
Minimum Required Software Packages MATLAB and the Control System 
Toolbox 
Prelab 
1. Calculate the following by hand or with a calculator: 
a. The roots of Px = . 6 + 7.5 + 2s4 + 9.3 + 10.2 + 12s + 15 
b. The roots of P2 = . 6 + 9s5 + 8s4 + 9s7, + 12s2 + 15s + 20 
c. P3 = Pi +P2; P* = Pi- Pi; PS = P1P2 
2. Calculate by hand or with a calculator the polynomial 
P6 = (s + 7)(s + 8)(s + 3)(s + 5)(s + 9){s + 10) 
3. Calculate by hand or with a calculator the following transfer functions: 
20(. + 2)(5 + 3)(. + 6)(. + 8) 
' 
1 U 
.(.+ 7)(.+ 9)(.+ 10)(.+ 15)' 
represented as a numerator polynomial divided by a denominator polynomial. 
.4 + 17.3 + 99.2 + 223. + 140 
2 ^ ~ s5 + 32.4 + 363.3 + 2092.2 + 5052. + 4320' 
expressed as factors in the numerator divided by factors in the denominator, 
similar to the form of G\ (.) in Prelab 3a. 
c. Gs(s) = Gi(.) + G2(s); GA{s) = Gi(s) - G2(.); G5(.) = Gi(.)G2(.) 
expressed as factors divided by factors and expressed as polynomials divided 
by polynomials. 

Cyber Exploration Laboratory 
113 
4. Calculate by hand or with a calculator the partial-fraction expansion of the 
following transfer functions: 
a . G 6 = 
5(* + 2> 
b. G7 = 
c G8 = 
Lab 
s{s2 + 85 + 15) 
5(5 + 2) 
s{s2 + 65 + 9) 
5(5 + 2) 
s(s2 + 65 + 34) 
1. Use MATLAB to find P3, PA, and P5 in Prelab 1. 
2. Use only one MATLAB command to find P6 in Prelab 2. 
3. Use only two MATLAB commands to find Gi(s) in Prelab 3a represented as a 
polynomial divided by a polynomial. 
4. Use only two MATLAB commands to find G2(s) expressed as factors in the 
numerator divided by factors in the denominator. 
5. Using various combinations of G\(s) and G2(s), find Gi(s), G^s), and Gs(s). 
Various combinations implies mixing and matching Gi(s) and G2(s) expressed as 
factors and polynomials. For example, in finding G3(5), G\ (s) can be expressed in 
factored form and G2(s) can be expressed in polynomial form. Another combi-
nation is Gi(s) and G2(s) both expressed as polynomials. Still another combina-
tion is Gi(5)and G2(5) both expressed in factored form. 
6. Use MATLAB to evaluate the partial fraction expansions shown in Prelab 4. 
Postlab 
1. Discuss your findings for Lab 5. What can you conclude? 
2. Discuss the use of MATLAB to manipulate transfer functions and polynomials. 
Discuss any shortcomings in using MATLAB to evaluate partial fraction expansions. 
Experiment 2.2 
Objectives To learn to use MATLAB and the Symbolic Math Toolbox to (1) find 
Laplace transforms for time functions, (2) find time functions from Laplace trans-
forms, (3) create LTI transfer functions from symbolic transfer functions, and (4) 
perform solutions of symbolic simultaneous equations. 
Minimum Required Software Packages MATLAB, the Symbolic 
Math Toolbox, and the Control System Toolbox 
Prelab 
1. Using a hand calculation, find the Laplace transform of: 
/(0 = 0.0075 - 0.00034e"2-5' cos(220 + 0.087e"2-5' sin(220 - 0.0072e~8f 
2. Using a hand calculation, find the inverse Laplace transform of 
2(5 + 3)(5 + 5)(5 + 7) 
1 ; 
5(5+ 8)(52+ 105+ 100) 
3. Use a hand calculation to solve the circuit for the loop currents shown in 
Figure P2.42. 
FIGURE P2.42 

Chapter 2 
Modeling in the Frequency Domain 
Lab 
1. Use MATLAB and the Symbolic Math Toolbox to 
a. Generate symbolically the time function f(i) shown in Prelab 1. 
b. Generate symbolically F{s) shown in Prelab 2. Obtain your result symboli-
cally in both factored and polynomial forms. 
c. Find the Laplace transform of/(/) shown in Prelab 1. 
d. Find the inverse Laplace transform of F(s) shown in Prelab 2. 
e. Generate an LTI transfer function for your symbolic representation of F(s) in 
Prelab 2 in both polynomial form and factored form. Start with the F(s) you 
generated symbolically. 
f. Solve for the loop currents in Prelab 3. 
Postlab 
1. Discuss the advantages and disadvantages between the Symbolic Math Toolbox 
and MATLAB alone to convert a transfer function from factored form to 
polynomial form and vice versa. 
2. Discuss the advantages and disadvantages of using the Symbolic Math Toolbox to 
generate LTI transfer functions. 
3. Discuss the advantages of using the Symbolic Math Toolbox to solve simulta-
neous equations of the type generated by the electrical network in Prelab 3. Is it 
possible to solve the equations via MATLAB alone? Explain. 
4. Discuss any other observations you had using the Symbolic Math Toolbox. 
Experiment 2.3 
Objective To learn to use LabVIEW to generate and manipulate polynomials 
and transfer functions. 
Minimum Required Software Packages LabVIEW and the LabVIEW 
Control Design and Simulation Module. 
Prelab 
1. Study Appendix D, Sections D.l through Section D.4, Example D.l. 
2. Perform by hand the calculations stated in Prelab 1 of Experiment 2.1. 
3. Find by a hand calculation the polynomial whose roots are: -7, -8, - 3 , -5, 
-9, and-10. 
4. Perform by hand a partial-fraction expansion of G(s) = -^— 
2 
. 
5. Find by a hand calculation Gi(s) + G2(s), Gi(s) - G2{s), and G-[(s)G2(s), where 
Gl{s) = ^T7T2 and°2{s) = ,4t/+3-
Lab 
1. Open the LabVIEW functions palette and select the Mathematics/Polynomial palette. 
2. Generate the polynomials enumerated in Prelab la and lb of Experiment 2.1. 
3. Generate the polynomial operations stated in Prelab lc of Experiment 2.1. 
4. Generate a polynomial whose roots are those stated in Prelab 3 of this experiment. 

Bibliography 
5. Generate the partial fraction expansion of the transfer function given in Prelab 4 
of this experiment. 
6. Using the Control Design and Simulation/Control Design/Model Construction 
palette, construct the two transfer functions enumerated in Prelab 5. 
7. Using the Control Design and Simulation/Control Design/Model Inter-
connection palette, display the results of the mathematical operations enumer-
ated in Prelab 5 of this experiment. 
Postlab 
1. Compare the polynomial operations obtained in Lab 3 to those obtained in 
Prelab 2. 
2. Compare the polynomial displayed in Lab 4 with that calculated in Prelab 3. 
3. Compare the partial-fraction expansion obtained in Lab 5 with that calculated in 
Prelab 4. 
4. Compare the results of the mathematical operations found in Lab 7 to those 
calculated in Prelab 5. 
^ Bibliography^ 
Aggarwal, J. K. Notes on Nonlinear Systems. Van Nostrand Reinhold, New York, 1972. 
Bosch, R. GmbH, Bosch Automotive Handbook, 7th ed. John Wiley & Sons Ltd., UK, 2007. 
Boutayeb, A., Twizell, E. H., Achouayb, K., and Chetouani, A. Mathematical Model for the 
Burden of Diabetes and Its Complications. BioMedical Engineering OnLine, 2004, Re-
trieved from http://www.biomedical-engineering-online.eom/content/3/l/20, pp. 1-19. 
Cannon, R. H.. Jr., Dynamics of Physical Systems, McGraw-Hill, New York, 1967. 
Carlson, L. E., and Griggs, G. E. Aluminum Catenary System Quarterly Report. Technical 
Report Contract Number DOT-FR-9154, U.S. Department of Transportation, 1980. 
Chignola, R., and Foroni, R. I. Estimating the Growth Kinetics of Experimental Tumors from 
as Few as Two Determinations of Tumor Size: Implications for Clinical Oncology. IEEE 
Transactions on Biomedical Engineering, vol. 52, no. 5, May 2005, pp. 808-815. 
Cochin, I. Analysis and Design of Dynamic Systems. Harper and Row, New York, 1980. 
Cook, R A. Nonlinear Dynamical Systems. Prentice Hall, United Kingdom, 1986. 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
Davis, S. A., and Ledgerwood, B. K. Electromechanical Components for Servomechanisms. 
McGraw-Hill, New York, 1961. 
Doebelin, E. O. Measurement Systems Application and Design. McGraw-Hill, New York, 
1983. 
Dorf, R. Introduction to Electric Circuits, 2d ed. Wiley, New York, 1993. 
D'Souza, A. Design of Control Systems. Prentice Hall, Upper Saddle River, NJ, 1988. 
Edelstein-Keshet, L. Mathematical Models in Biology. Society for Industrial and Applied 
Mathematics, Philadelphia, PA, 2005. 
Elkins, J. A. A Method for Predicting the Dynamic Response of a Pantograph Running at 
Constant Speed under a Finite Length of Overhead Equipment. Technical Report TN 
DA36, British Railways, 1976. 
Franklin, G. F, Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems. 
Addison-Wesley, Reading, MA, 1986. 

Chapter 2 
Modeling in the Frequency Domain 
Gaivao, R. K. H., Yoneyama, T., and de Araujo, F. M. U. A Simple Technique for Identifying a 
Linearized Model for a Didactic Magnetic Levitation System. IEEE Transactions on 
Education, vol. 46, no. 1, February 2003, pp. 22-25. 
Hsu, J. G, and Meyer, A. U. Modern Control Principles and Applications. McGraw-Hill, New 
York, 1968. 
Johansson, R., Magnusson, M., and Akesson, M. Identification of Human Postural Dynamics. 
IEEE Transactions on Biomedical Engineering, vol. 35, no. 10, October 1988, pp. 858-869. 
Kailath, T. Linear Systems. Prentice Hall, Upper Saddle River, NJ, 1980. 
Kermurjian, A. From the Moon Rover to the Mars Rover. The Planetary Report, July/August 
1990, pp. 4-11. 
Krieg, M., and Mohseni, K. Developing a Transient Model for Squid Inspired Thrusters, and 
Incorporation into Underwater Robot Control Design. 2008 IEEE/RSJ Int. Conf. on 
Intelligent Robots and Systems, France, September 2008. 
Kuo, F. F. Network Analysis and Synthesis. Wiley, New York, 1966. 
Lago, G., and Benningfield, L. M. Control System Theory. Ronald Press, New York, 1962. 
Lin, J.-S., and Kanellakopoulos, I. Nonlinear Design of Active Suspensions. IEEE Control 
Systems Magazine, vol. 17, issue 3, June 1997, pp. 45-59. 
Mablekos, V E. Electric Machine Theory for Power Engineers. Harper & Row, Cambridge, 
MA, 1980. 
Marttinen, A., Virkkunen, J, and Salminen, R. T. Control Study with Pilot Crane. IEEE 
Transactions on Education, vol. 33, no. 3, August 1990, pp. 298-305. 
Milsum, J. H. Biological Control Systems Analysis. McGraw-Hill, New York, 1966. 
Minorsky, N. Theory of Nonlinear Control Systems. McGraw-Hill, New York, 1969. 
Nilsson, J. W., and Riedel, S. A. Electric Circuits, 5th ed. Addison-Wesley, Reading, MA, 1996. 
O'Connor, D. N., Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Raven, F. H. Automatic Control Engineering, 5th ed. McGraw-Hill, New York, 1995. 
Schnell, S., and Mendoza, C. The Condition for Pseudo-First-Order Kinetics in Enzymatic 
Reactions Is Independent of the Initial Enzyme Concentration. Biophysical Chemistry 
(107), 2004, pp. 165-174. 
Van Valkenburg, M. E. Network Analysis. Prentice Hall, Upper Saddle River, NJ, 1974. 
Vidyasagar, M. Nonlinear Systems Analysis. Prentice Hall, Upper Saddle River, NJ, 1978. 
Wang, J. Z., Tie, B., Welkowitz, W., Semmlow, J. L., and Kostis, J. B. Modeling Sound 
Generation in Stenosed Coronary Arteries. IEEE Transactions on Biomedical Engineer-
ing, vol. 37, no. 11, November 1990, pp. 1087-1094. 

Modeling in the Time Domain (. *% 
J 
3 
State Space 
This chapter covers only state-space methods. 
^Chapter Learning Outcomes^ 
After completing this chapter, the student will be able to: 
• 
Find a mathematical model, called a state-space representation, for a linear, time-
invariant system (Sections 3.1-3.3) 
• Model electrical and mechanical systems in state space (Section 3.4) 
• 
Convert a transfer function to state space (Section 3.5) 
• 
Convert a state-space representation to a transfer function (Section 3.6) 
• 
Linearize a state-space representation (Section 3.7) 
^ Case Study Learning Outcomes ^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows-. 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to find the state-space representation of each subsystem. 
• Given a description of the way a pharmaceutical drug flows through a human being, you 
will be able to find the state-space representation to determine drug concentrations in 
specified compartmentalized blocks of the process and of the human body. You will also 
be able to apply the same concepts to an aquifer to find water level. 
117 

Chapter 3 
Modeling in the Time Domain 
Introduction 
Two approaches are available for the analysis and design of feedback control 
systems. The first, which we began to study in Chapter 2, is known as the classical, 
or frequency-domain, 
technique. This approach is based on converting a system's 
differential equation to a transfer function, thus generating a mathematical model of 
the system that algebraically relates a representation of the output to a representa-
tion of the input. Replacing a differential equation with an algebraic equation not 
only simplifies the representation of individual subsystems but also simplifies 
modeling interconnected subsystems. 
The primary disadvantage of the classical approach is its limited applicability: 
It can be applied only to linear, time-invariant systems or systems that can be 
approximated as such. 
A major advantage of frequency-domain techniques is that they rapidly 
provide stability and transient response information. Thus, we can immediately 
see the effects of varying system parameters until an acceptable design is met. 
With the arrival of space exploration, requirements for control systems 
increased in scope. Modeling systems by using linear, time-invariant differential 
equations and subsequent transfer functions became inadequate. The state-space 
approach (also referred to as the modern, or time-domain, approach) is a unified 
method for modeling, analyzing, and designing a wide range of systems. For example, 
the state-space approach can be used to represent nonlinear systems that have 
backlash, saturation, and dead zone. Also, it can handle, conveniently, systems with 
nonzero initial conditions. Time-varying systems, (for example, missiles with varying 
fuel levels or lift in an aircraft flying through a wide range of altitudes) can be 
represented in state space. Many systems do not have just a single input and a single 
output. Multiple-input, multiple-output systems (such as a vehicle with input 
direction and input velocity yielding an output direction and an output velocity) 
can be compactly represented in state space with a model similar in form and 
complexity to that used for single-input, single-output systems. The time-domain 
approach can be used to represent systems with a digital computer in the loop or to 
model systems for digital simulation. With a simulated system, system response can 
be obtained for changes in system parameters—an important design tool. The state-
space approach is also attractive because of the availability of numerous state-space 
software packages for the personal computer. 
The time-domain approach can also be used for the same class of systems 
modeled by the classical approach. This alternate model gives the control systems 
designer another perspective from which to create a design. While the state-space 
approach can be applied to a wide range of systems, it is not as intuitive as the classical 
approach. The designer has to engage in several calculations before the physical 
interpretation of the model is apparent, whereas in classical control a few quick 
calculations or a graphic presentation of data rapidly yields the physical interpretation. 
In this book, the coverage of state-space techniques is to be regarded as an 
introduction to the subject, a springboard to advanced studies, and an alternate 
approach to frequency-domain techniques. We will limit the state-space approach to 
linear, time-invariant systems or systems that can be linearized by the methods of 
Chapter 2. The study of other classes of systems is beyond the scope of this book. 
Since state-space analysis and design rely on matrices and matrix operations, you 
may want to review this topic in Appendix G, located at www.wiley.com/college/nise, 
before continuing. 

3.2 Some Observations 
119 
£ 3.2 Some Observations 
We proceed now to establish the state-space approach as an alternate method for 
representing physical systems. This section sets the stage for the formal definition of 
the state-space representation by making some observations about systems and their 
variables. In the discussion that follows, some of the development has been placed in 
footnotes to avoid clouding the main issues with an excess of equations and to ensure 
that the concept is clear. Although we use two electrical networks to illustrate the 
concepts, we could just as easily have used a mechanical or any other physical 
system. 
We now demonstrate that for a system with many variables, such as inductor 
voltage, resistor voltage, and capacitor charge, we need to use differential equations 
only to solve for a selected subset of system variables because all other remaining 
system variables can be evaluated algebraically from the variables in the subset. Our 
examples take the following approach: 
1. We select a particular subset of all possible system variables and call the variables 
in this subset state variables. 
2. For an nth-order system, we write n simultaneous, first-order differential equations 
in terms of the state variables. We call this system of simultaneous differential 
equations state equations. 
3. If we know the initial condition of all of the state variables at fo as well as the 
system input for t > to, we can solve the simultaneous differential equations for 
the state variables for t > to. 
4. We algebraically combine the state variables with the system's input and find all of 
the other system variables for t > to. We call this algebraic equation the output 
equation. 
5. We consider the state equations and the output equations a viable representation of 
the system. We call this representation of the system a state-space representation. 
Let us now follow these steps through an example. Consider the RL network shown 
in Figure 3.1 with an initial current of /(0). 
1. We select the current, /(f), for which we will write and solve a differential equation 
using Laplace transforms. 
2. We write the loop equation, 
FIGURE 3.1 
RL network 
Lft + Ri = v(t) 
(3.r 
3. Taking the Laplace transform, using Table 2.2, Item 7, and including the initial 
conditions, yields 
L[sI{s)-i(Q)]+RI(s) 
= V{s) 
(3.2) 
Assuming the input, v(/), to be a unit step, u(t), whose Laplace transform is 
V(s) = 1/5, we solve for I(s) and get 
l 
/ M = s 
1 \ 
R 
go? 
R 
(3.3) 

120 
Chapter 3 
Modeling in the Time Domain 
from which 
m=1(i < 
,-(R/L)t 
+ i(0)e -{R/L)t 
(3.4) 
The function i(t) is a subset of all possible network variables that we are able to 
find from Eq. (3.4) if we know its initial condition, /(0), and the input, v(r). Thus, 
i(t) is a state variable, and the differential equation (3.1) is a state equation. 
4. We can now solve for all of the other network variables algebraically in terms of 
/(0 and the applied voltage, v(t). For example, the voltage across the resistor is 
vR{t) = Ri{t) 
The voltage across the inductor is 
vL(t) = 
v(t)-Ri(t) 
(3.5) 
(3.6)1 
The derivative of the current is 
J 4MO-*MI 
(3.7)' 
Thus, knowing the state variable, i(t), and the input, v(f), we can find the value, or 
state, of any network variable at any time, t > to. Hence, the algebraic equations, 
Eqs. (3.5) through (3.7), are output equations. 
5. Since the variables of interest are completely described by Eq. (3.1) and Eqs. (3.5) 
through (3.7), we say that the combined state equation (3.1) and the output 
equations (3.5 through 3.7) form a viable representation of the network, which we 
call a state-space representation. 
Equation (3.1), which describes the dynamics of the network, is not unique. 
This equation could be written in terms of any other network variable. For example, 
substituting i = VR/R into Eq. (3.1) yields 
AA/WTOW^ 
LdvR 
(3.8) 
i(t) 
FIGURE 3.2 RLC network 
which can be solved knowing that the initial condition v/?(0) = Ri(Q) and 
knowing v(0- In this case, the state variable is Vy?(r). Similarly, all other 
network variables can now be written in terms of the state variable, vR(t), 
and the input, v(r). Let us now extend our observations to a second-order 
system, such as that shown in Figure 3.2. 
1. Since the network is of second order, two simultaneous, first-order differential 
equations are needed to solve for two state variables. We select /(0 and q(t),tne 
charge on the capacitor, as the two state variables. 
2. Writing the loop equation yields 
Lj + Ri + - j idt = v{t) 
(3.9) 
1 Since vL{t) = v(t) - vR{t) = v{t) - Ri{t). 
2Smce^- = 
]-VL(t)=y[V(t)-Ri(t)}. 
dt 
L 
U 

3.2 Some Observations 
Converting to charge, using i(t) = dq/dt, we get 
4+44«=*« 
(3.10) 
But an nth-order differential equation can be converted to n simultaneous 
first-order differential equations, with each equation of the form 
dx 
-— = OiiXi + ai2X2 H 
1- OinXn + 
faf{t) 
(3.11) 
where each xt is a state variable, and the %,'S and &j are constants for linear, time-
invariant systems. We say that the right-hand side of Eq. (3.11) is a linear 
combination of the state variables and the input, f(t). 
We can convert Eq. (3.10) into two simultaneous, first-order differential 
equations in terms of i(t) and q{t). The first equation can be dq/dt ~ i. The 
second equation can be formed by substituting fidt = q into Eq. (3.9) and solving 
for di/dt. Summarizing the two resulting equations, we get 
} - , 
(3,2a) 
J~K*-!'+r« 
(3-12b) 
3. These equations are the state equations and can be solved simultaneously for the 
state variables, q(t) and i(t), using the Laplace transform and the methods of 
Chapter 2, if we know the initial conditions for q{t) and i(t) and if we know v(r), 
the input. 
4. From these two state variables, we can solve for all other network variables. For 
example, the voltage across the inductor can be written in terms of the solved state 
variables and the input as 
vL(t) = -^q(t)-Ri(t)+v(t) 
(3.13)3 
Equation (3.13) is an output equation; we say that vL(t) is a linear combination of 
the state variables, q(t) and i(t), and the input, v(t). 
5. The combined state equations (3.12) and the output equation (3.13) form a viable 
representation of the network, which we call a state-space representation. 
Another choice of two state variables can be made, for example, vR(t) and 
vc(t), the resistor and capacitor voltage, respectively. The resulting set of simul-
taneous, first-order differential equations follows: 
S - r - f " c
+ f v W 
(3.14a)< 
3 Since vL(t) = L{di/dt) = ~{\/C)q -Ri + v(t), where di/dt can be found from Eq. (3.9), and fidt = q. 
4 Since vR{t) = i(t)R, and vc(t) = (1/C) fi dt, differentiating vR(t) yields dvR/dt = R{di/dt) = (R/L)vL 
= 
(R/L)[v(t) - vR - vc], and differentiating v c(0 yields dvc/dl = {\JC)i = 
(l/RC)vK. 

122 
Chapter 3 
Modeling in the Time Domain 
Again, these differential equations can be solved for the state variables if we know 
the initial conditions along with v(f). Further, all other network variables can be 
found as a linear combination of these state variables. 
Is there a restriction on the choice of state variables? Yes! Typically, the 
minimum number of state variables required to describe a system equals the 
order of the differential equation. Thus, a second-order system requires a 
minimum of two state variables to describe it. We can define more state variables 
than the minimal set; however, within this minimal set the state variables must be 
linearly independent. For example, if vR(t) is chosen as a state variable, then i(t) 
cannot be chosen, because vR(t) can be written as a linear combination of i(t), 
namely VR(t) = Ri(t). Under these circumstances we say that the state variables 
are linearly dependent. State variables must be linearly independent; that is, no 
state variable can be written as a linear combination of the other state variables, 
or else we would not have enough information to solve for all other system 
variables, and we could even have trouble writing the simultaneous equations 
themselves. 
The state and output equations can be written in vector-matrix form if the 
system is linear. Thus, Eq. (3.12), the state equations, can be written as 
x = Ax + Bu 
(3.15) 
where 
X = 
X = 
rdqjdf 
_ di/dt J 
rf 1 
i _ 
; 
A = 
i 
B = 
r o 
-tfi 
0 1 
m. 
1 
1/LC 
-R/L\ 
; u = v{i) 
Equation (3.13), the output equation, can be written as 
y = Cx + Du 
where 
(3.16) 
y = vL(t); C = [-l/C 
-M]; x = 
D = h 
u = v(t) 
We call the combination of Eqs. (3.15) and (3.16) a state-space representation of the 
network of Figure 3.2. A state-space representation, therefore, consists of (1) the 
simultaneous, first-order differential equations from which the state variables can be 
solved and (2) the algebraic output equation from which all other system variables 
can be found. A state-space representation is not unique, since a different choice of 
state variables leads to a different representation of the same system. 
In this section, we used two electrical networks to demonstrate some principles 
that are the foundation of the state-space representation. The representations 
developed in this section were for single-input, single-output systems, where y,D, 
and u in Eqs. (3.15) and (3.16) are scalar quantities. In general, systems have multiple 
inputs and multiple outputs. For these cases, y and u become vector quantities, and D 
becomes a matrix. In Section 3.3 we will generalize the representation for multiple-
input, multiple-output systems and summarize the concept of the state-space 
representation. 

3.3 The General State-Space Representation 
123 
I 
3.3 The General State-Space 
Representation 
Now that we have represented a physical network in state space and have a good 
idea of the terminology and the concept, let us summarize and generalize the 
representation for linear differential equations. First, we formalize some of the 
definitions that we came across in the last section. 
Linear combination. A linear combination of n variables, x,-, for i = 1 to«, is 
given by the following sum, S: 
S = K„xn + Kn-ixn-\ 
H 
\- K)X] 
(3.17) 
where each Kt is a constant. 
Linear independence. A set of variables is said to be linearly independent if 
none of the variables can be written as a linear combination of the others. For 
example, given 3¾ x2, and x3, if x2 = 5xi + 6x3, then the variables are not linearly 
independent, since one of them can be written as a linear combination of the other 
two. Now, what must be true so that one variable cannot be written as a linear 
combination of the other variables? Consider the example K2X2 = K\x\ + /C3X3. If 
no X-, = 0, then any x,- can be written as a linear combination of other variables, unless 
all Ki = 0. Formally, then, variables x/, for i = 1 to n, are said to be linearly 
independent if their linear combination, S, equals zero only if every Kt — 0 and 
no xi = 0 for all t> 0. 
System variable. Any variable that responds to an input or initial conditions in a 
system. 
State variables. The smallest set of linearly independent system variables such 
that the values of the members of the set at time t0 along with known forcing 
functions completely determine the value of all system variables for all t > to. 
State vector. A vector whose elements are the state variables. 
State space. The n-dimensional space whose axes are the state 
variables. This is a new term and is illustrated in Figure 3.3, where the 
state variables are assumed to be a resistor voltage, v#, and a capacitor 
voltage, vc. These variables form the axes of the state space. A 
trajectory can be thought of as being mapped out by the state vector, 
x(f), for a range of t. Also shown is the state vector at the particular 
time t = 4. 
State equations. A set of n simultaneous, first-order differential 
equations with n variables, where the n variables to be solved are the 
state variables. 
Output equation. The algebraic equation that expresses the out-
put variables of a system as linear combinations of the state variables 
and the inputs. 
Now that the definitions have been formally stated, we define the 
state-space representation of a system. A system is represented in state 
space by the following equations: 
State space 
State vector, x(r) 
Stale vector trajectory 
State vector, x(4) 
FIGURE 3.3 Graphic representation of state 
space and a state vector 
x = Ax + Bu 
(3.18) 
y = Cx + Du 
(3.19) 

Chapter 3 
Modeling in the Time Domain 
for t > to and initial conditions, x(t0), where 
x = state vector 
x = derivative of the state vector with respect to time 
y = output vector 
u = input or control vector 
A = system matrix 
B = input matrix 
C = output matrix 
D = feedforward matrix 
Equation (3.18) is called the state equation, and the vector x, the state vector, contains 
the state variables. Equation (3.18) can be solved for the state variables, which we 
demonstrate in Chapter 4. Equation (3.19) is called the output equation. This 
equation is used to calculate any other system variables. This representation of a 
system provides complete knowledge of all variables of the system at any t > fo 
As an example, for a linear, time-invariant, second-order system with a single 
input v(t), the state equations could take on the following form: 
-j- = a\\x\ + «12*2 + biv{t) 
(3.20a) 
dxo 
-± = «2i*i + «22*2 + b2v(t) 
(3.20b) 
where xx and x2 are the state variables. If there is a single output, the output equation 
could take on the following form: 
y = c1xl + c2x2 + di v(t) 
(3.21) 
The choice of state variables for a given system is not unique. The requirement in 
choosing the state variables is that they be linearly independent and that a minimum 
number of them be chosen. 
( 3.4 Applying the State-Space Representation 
In this section, we apply the state-space formulation to the representation of more 
complicated physical systems. The first step in representing a system is to select the 
state vector, which must be chosen according to the following considerations: 
1. A minimum number of state variables must be selected as components of the state 
vector. This minimum number of state variables is sufficient to describe com-
pletely the state of the system. 
2. The components of the state vector (that is, this minimum number of state 
variables) must be linearly independent. 
Let us review and clarify these statements. 
Linearly Independent State Variables 
The components of the state vector must be linearly independent. For example, 
following the definition of linear independence in Section 3.3, if X\, x2, and x3 are 
chosen as state variables, but X3 = 5x\ + 4x2, then x3 is not linearly independent of X] 

3.4 Applying the State-Space Representation 
125 
and x2, since knowledge of the values of x% and x2 will yield the value of x3. Variables 
and their successive derivatives are linearly independent. For example, the voltage 
across an inductor, vL, is linearly independent of the current through the inductor, %,, 
since vL — Lditldt. Thus, vL cannot be evaluated as a linear combination of the 
current, ig,. 
Minimum Number of State Variables 
How do we know the minimum number of state variables to select? Typically, the 
minimum number required equals the order of the differential equation describing 
the system. For example, if a third-order differential equation describes the system, 
then three simultaneous, first-order differential equations are required along with 
three state variables. From the perspective of the transfer function, the order of the 
differential equation is the order of the denominator of the transfer function after 
canceling common factors in the numerator and denominator. 
In most cases, another way to determine the number of state variables is to 
count the number of independent energy-storage elements in the system.5 The 
number of these energy-storage elements equals the order of the differential 
equation and the number of state variables. In Figure 3.2 there are two energy-
storage elements, the capacitor and the inductor. Hence, two state variables and two 
state equations are required for the system. 
If too few state variables are selected, it may be impossible to write particular 
output equations, since some system variables cannot be written as a linear 
combination of the reduced number of state variables. In many cases, it may be 
impossible even to complete the writing of the state equations, since the derivatives 
of the state variables cannot be expressed as linear combinations of the reduced 
number of state variables. 
If you select the minimum number of state variables but they are not linearly 
independent, at best you may not be able to solve for all other system variables. At 
worst you may not be able to complete the writing of the state equations. 
Often the state vector includes more than the minimum number of state 
variables required. Two possible cases exist. Often state variables are chosen to be 
physical variables of a system, such as position and velocity in a mechanical system. 
Cases arise where these variables, although linearly independent, are also decoupled. 
That is, some linearly independent variables are not required in order to solve for 
any of the other linearly independent variables or any other dependent system 
variable. Consider the case of a mass and viscous damper whose differential 
equation is M dv/dt + Dv = /(f), where v is the velocity of the mass. Since this is 
a first-order equation, one state equation is all that is required to define this system 
in state space with velocity as the state variable. Also, since there is only one 
energy-storage element, mass, only one state variable is required to repre-
sent this system in state space. However, the mass also has an associated 
position, which is linearly independent of velocity. If we want to include 
position in the state vector along with velocity, then we add position as a state 
variable that is linearly independent of the other state variable, velocity. 
Figure 3.4 illustrates what is happening. The first block is the transfer 
F(s) 
1 
M 
M 
V{s) 
1 
5 
X(s) 
FIGURE 3.4 
Block diagram of a mass 
and damper 
5 Sometimes it is not apparent in a schematic how many independent energy-storage elements there are. It 
is possible that more than the minimum number of energy-storage elements could be selected, leading to a 
state vector whose components number more than the minimum required and are not linearly indepen-
dent. Selecting additional dependent energy-storage elements results in a system matrix of higher order 
and more complexity than required for the solution of the state equations. 

126 
Chapter 3 
Modeling in the Time Domain 
function equivalent to M dv{t) / dt + Dv(t) = f(t). The second block shows that we 
integrate the output velocity to yield output displacement (see Table 2.2, Item 10). 
Thus, if we want displacement as an output, the denominator, or characteristic 
equation, has increased in order to 2, the product of the two transfer functions. Many 
times, the writing of the state equations is simplified by including additional state 
variables. 
Another case that increases the size of the state vector arises when the added 
variable is not linearly independent of the other members of the state vector. This 
usually occurs when a variable is selected as a state variable but its dependence on 
the other state variables is not immediately apparent. For example, energy-storage 
elements may be used to select the state variables, and the dependence of the 
variable associated with one energy-storage element on the variables of other 
energy-storage elements may not be recognized. Thus, the dimension of the system 
matrix is increased unnecessarily, and the solution for the state vector, which we 
cover in Chapter 4, is more difficult. Also, adding dependent state variables affects 
the designer's ability to use state-space methods for design.6 
We saw in Section 3.2 that the state-space representation is not unique. The 
following example demonstrates one technique for selecting state variables and 
representing a system in state space. Our approach is to write the simple derivative 
equation for each energy-storage element and solve for each derivative term as a 
linear combination of any of the system variables and the input that are present in 
the equation. Next we select each differentiated variable as a state variable. Then we 
express all other system variables in the equations in terms of the state variables and 
the input. Finally, we write the output variables as linear combinations of the state 
variables and the input. 
Example 3.1 
Representing an Electrical Network 
PROBLEM: Given the electrical network of Figure 3.5, find a state-space repre-
sentation if the output is the current through the resistor. 
y w 
Node I 
FIGURE 3.5 Electrical 
network for representation in 
state space 
SOLUTION: The following steps will yield a viable representation of the network in 
state space. 
Step 1 Label all of the branch currents in the network. These include iL, IR, and ic, 
as shown in Figure 3.5. 
6 See Chapter 12 for state-space design techniques. 

3.4 Applying the State-Space Representation 
127 
Step 2 Select the state variables by writing the derivative equation for all energy-
storage elements, that is, the inductor and the capacitor. Thus, 
T diL 
(3.22) 
(3.23) 
From Eqs. (3.22) and (3.23), choose the state variables as the quantities that 
are differentiated, namely vc and iL. Using Eq. (3.20) as a guide, we see that the 
state-space representation is complete if the right-hand sides of Eqs. (3.22) and 
(3.23) can be written as linear combinations of the state variables and the input. 
Since ic and vL are not state variables, our next step is to express ic and vL as 
linear combinations of the state variables, vc and iL, and the input, v(t). 
Step 3 Apply network theory, such as Kirchhoffs voltage and current laws, to 
obtain ic and vL in terms of the state variables, v c and iL. At Node 1, 
ic = -«/?+ k 
1 
. 
(3.24) 
= -RVc 
+ lL 
which yields ic in terms of the state variables, vc and k. 
Around the outer loop, 
vL = - v c + v(0 
(3.25) 
which yields vL in terms of the state variable, vc, and the source, v(t). 
Step 4 Substitute the results of Eqs. (3.24) and (3.25) into Eqs. (3.22) and (3.23) to 
obtain the following state equations: 
C dvc 
1 
= --RVQ 
+ IL 
R 
r diL 
L - = 
-vc 
v(t) 
(3.26a) 
(3.26b) 
or 
dvc 
1 
1 . 
-dF=-RCVc + 
clL 
_
= 
_ Iv c 
+ zv(r) 
Step 5 Find the output equation. Since the output is (R(/), 
(3.27a) 
(3.27b) 
(3.28) 
The final result for the state-space representation is found by representing 
Eqs. (3.27) and (3.28) in vector-matrix form as follows: 
vc 
k 
-1/(RC) 
1/C 
-1/L 
0 
k=\m o i 
vc 
vc] 
k 
+ 
0 
1/L v(t) 
(3.29a) 
(3.29b) 
where the dot indicates differentiation with respect to time. 

128 
Chapter 3 
Modeling in the Time Domain 
In order to clarify the representation of physical systems in state space, we will 
look at two more examples. The first is an electrical network with a dependent 
source. Although we will follow the same procedure as in the previous problem, this 
problem will yield increased complexity in applying network analysis to find the 
state equations. For the second example, we find the state-space representation of a 
mechanical system. 
Example 3.2 
Representing an Electrical Network with a Dependent Source 
PROBLEM: Find the state and output equations for the electrical network shown in 
Figure 3.6 if the output vector is y = [VR2 iR2 ]T, where T means transpose.7 
Node I 
Node 2 
FIGURE 3.6 
Electrical 
network for Example 3.2 
<$> 4v/.(/) 
SOLUTION: Immediately notice that this network has a voltage-dependent current 
source. 
Step 1 Label all of the branch currents on the network, as shown in Figure 3.6. 
Step 2 Select the state variables by listing the voltage-current relationships for all 
of the energy-storage elements: 
T diL 
ndvc 
. 
(3.30a) 
(3.30b) 
From Eqs. (3.30) select the state variables to be the differentiated variables. Thus, 
the state variables, X\ and x2, are 
Xi = IL\ 
x2 = vc 
Step 3 
Remembering that the form of the state equation is 
x = Ax 4- Bu 
(3.31) 
(3.32) 
we see that the remaining task is to transform the right-hand side of Eq. (3.30) 
into linear combinations of the state variables and input source current. Using 
Kirchhoffs voltage and current laws, we find vL and ic in terms of the state 
variables and the input current source. 
See Appendix G for a discussion of the transpose. Appendix G is located at www.wiley.com/college/nise. 

3.4 Applying the State-Space Representation 
Around the mesh containing L and Q 
VL = VC + VR2 =VC + iR2Ri 
(3.33) 
But at Node 2, IR2 = ic + 4vL. Substituting this relationship for i/?2 into Eq. (3.33) yields 
vL = vc + (ic + 4vL)R2 
(3.34) 
Solving for vL, we get 
1 
129 
VL = 1-4/¾ 
(VC + *C^2) 
(3.35) 
Notice that since v c is a state variable, we only need to find ic in terms of the state 
variables. We will then have obtained vL in terms of the state variables. 
Thus, at Node 1 we can write the sum of the currents as 
ic = /(0 - IRX - k 
(3.36) 
where VRX = V[_- Equations (3.35) and (3.36) are two equations relating vL and ic in 
terms of the state variables iL and vC- Rewriting Eqs. (3.35) and (3.36), we obtain 
two simultaneous equations yielding v/, and ic as linear combinations of the state 
variables iL and v<> 
(3.37a) 
(3.37b) 
(3.38) 
(3.39) 
(3.40) 
Substituting Eqs. (3.38) and (3.39) into (3.30), simplifying, and writing the result in 
vector-matrix form renders the following state equation: 
(1 - 4R2)vL - R2ic = vc 
1 
. 
.,, 
--^-VL-lC=lL 
-1(0 
m 
Solving Eq. (3.37) simultaneously for vL and ic yields 
1 
and 
where 
ic = 1 
~A 
vL = T [Rik -vc- RiKt)] 
[(1 - 4R2)iL + i vc - (1 - 4R2)i(t)} 
A = -[(l-4i?2)+^ 
IL 
LvcJ 
i?2/(LA) 
-1/(LA) 
.(1 -4i?2)/(CA) 
l/(/?iCA)J 
T 
-i?2/(LA) 
1 
. - ( l - 4 * 2 ) / ( C A ) . 
1>C 
+ 
/(0 
(3.41) 

130 
Chapter 3 
Modeling in the Time Domain 
Step 4 Derive the output equation. Since the specified output variables are VR2 
and iR2, we note that around the mesh containing C, L, and R2, 
VR2 = -vc + vL 
in2 = k + 4vL 
(3.42a) 
(3.42b) 
Substituting Eqs. (3.38) and (3.39) into Eq. (3.42), vR2 and iRz are obtained as linear 
combinations of the state variables, iL and vc. In vector-matrix form, the output 
equation is 
VR 
iR2 J 
R2/& 
-(1 + 1/A) 
-11-¾. 
Ll/A 
(l-4*i)/(A*,)_ .vcJ + 
-i?2/A 
L - i / A J m 
(3.43) 
In the next example, we find the state-space representation for a mechanical 
system. It is more convenient when working with mechanical systems to obtain the 
state equations directly from the equations of motion rather than from the energy-
storage elements. For example, consider an energy-storage element such as a spring, 
where F = Kx. This relationship does not contain the derivative of a physical 
variable as in the case of electrical networks, where i — C dv/dt for capacitors, 
and v = L di/dt for inductors. Thus, in mechanical systems we change our selection 
of state variables to be the position and velocity of each point of linearly indepen-
dent motion. In the example, we will see that although there are three energy-
storage elements, there will be four state variables; an additional linearly indepen-
dent state variable is included for the convenience of writing the state equations. It is 
left to the student to show that this system yields a fourth-order transfer function if 
we relate the displacement of either mass to the applied force, and a third-order 
transfer function if we relate the velocity of either mass to the applied force. 
Example 3.3 
Representing a Translational Mechanical System 
PROBLEM: Find the state equations for the translational mechanical system shown 
in Figure 3.7. 
D 
M\ 
K 
-
rwx
x- * 
/•(/) 
x 
^ £ . 
FIGURE 3.7 Translational 
mechanical system 
Frictionless 
SOLUTION: First write the differential equations for the network in Figure 3.7, 
using the methods of Chapter 2 to find the Laplace-transformed equations of 
motion. Next take the inverse Laplace transform of these equations, assuming zero 

3.4 Applying the State-Space Representation 
131 
initial conditions, and obtain 
-KXl + M2^ 
+ Kx2 =/(0 
(3.44) 
(3.45) 
Now let d2x\/dt2 = dv\/dt, and d2X2/dt2 = dvzfdt, and then select Xi, v1? X2, and 
v2 as state variables. Next form two of the state equations by solving Eq. (3.44) for 
dv\/dt and Eq. (3.45) for dv2/dt. Finally, add dx\/dt = vi and dx2/dt = v2 to 
complete the set of state equations. Hence, 
dx\ 
IF 
dv\ 
dt 
dx2 
~~dt 
dv2 
~~dt 
+vi 
K 
D 
K 
-W^-M[VlJrM[X2 
-v2 
w2
xi 
~kxi 
+ k m 
(3.46a) 
(3.46b) 
(3.46c) 
(3.46d) 
In vector-matrix form, 
Xi 
V\ 
x2 
h 
0 
-K/Mi 
0 
_ K/M2 
1 
-D/Mi 
0 
0 
0 
0 
K/Mi 
0 
0 
1 
-K/M2 
0 
Xi 
Vl 
x2 
v2 
+ 
0 
0 
0 
_1/M2 
fit) 
(3.47) 
where the dot indicates differentiation with respect to time. What is the output 
equation if the output is x(t)1 
Skill-Assessment Exercise 3.1 
PROBLEM: Find the state-space representation of the electrical network shown in 
Figure 3.8. The output is va(t). 
C, 
AA/V 
.*>© 
v,M) 
FIGURE 3.8 Electric circuit 
for Skill-Assessment 
Exercise 3.1 
WileyPLUS 
Control Solutions 

132 
Chapter 3 
Modeling in the Time Domain 
fW9WCK; 
X = 
- i/Ci i/d 
-i/cr 
- 1 / L 
0 
0 
. 1/C2 
0 
- 1 / C 2 . 
x + 
roi 
l 
.0. m 
y= 
[0 0 
l]x 
The complete solution is at www.wiley.com/college/nise. 
Skill-Assessment Exercise 3.2 
PROBLEM: Represent the translational mechanical system shown in Figure 3.9 in 
state space, where x3(r) is the output. 
E3 
lN/m 
x\U) 
xM) 
njiW- 
1kg 
=3 /1/)-
1 N-s/m 
1 N/m 
• v , ( f ) 
^g 
/TOHPL lkg 
1 N-s/m 
Fr 
FIGURE 3.9 Translational mechanical system for Skill-Assessment Exercise 3.2 
ANSWER: 
z = 
* « 
r 0 
- 1 
0 
0 
0 
0 
0 
1 
- 1 
0 
1 
0 
0 
0 
0 
0 
0 
- 1 
0 
1 
0 
0 
1 
1 
- 1 
0 
0 
0 
0 
0 
0 
1 
0 
- 1 
1 
0" 
0 
0 
0 
1 
- 1 . 
0 
z + 
z 
"0 
1 
0 
0 
0 
.0 
fit) 
where 
z = [xi xi x2 x2 x5 X3] 
The complete solution is at www.wiley.com/college/nise. 
( 3.5 Converting a Transfer Function to State Space 
In the last section, we applied the state-space representation to electrical and 
mechanical systems. We learn how to convert a transfer function representation to 
a state-space representation in this section. One advantage of the state-space 

3.5 Converting a Transfer Function to State Space 
representation is that it can be used for the simulation of physical systems on the digital 
computer. Thus, if we want to simulate a system that is represented by a transfer 
function, we must first convert the transfer function representation to state space. 
At first we select a set of state variables, called phase variables, where each 
subsequent state variable is defined to be the derivative of the previous state 
variable. In Chapter 5 we show how to make other choices for the state variables. 
Let us begin by showing how to represent a general, nth-order, linear differ-
ential equation with constant coefficients in state space in the phase-variable form. 
We will then show how to apply this representation to transfer functions. 
Consider the differential equation 
-^ + ^-1-^1+--- 
+ ^ 
+ ^ 
= ^11 
(3.48) 
A convenient way to choose state variables is to choose the output, y(t), and its 
(n -1) derivatives as the state variables. This choice is called the phase-variable 
choice. Choosing the state variables, %, we get 
xj » y 
(3.49a) 
x2 = ^- 
(3.49b) 
dt 
d2y 
and differentiating both sides yields 
*3 ; 
xn -
X\ 
X2--
h --
Xn 
dt2 
dn~ly 
_ay 
dt 
Sy 
dt2 
d3y 
dP 
-¾ 
dt" 
(3.49c) 
(3.49d) 
(3.50a) 
(3.50b) 
(3.50c) 
(3.50d) 
where the dot above the x signifies differentiation with respect to time. 
Substituting the definitions of Eq. (3.49) into Eq. (3.50), the state equations are 
evaluated as 
x\ = X2 
(3.51a) 
X2 = x-i 
(3.51b) 
(3.51c) 
Xft—t = Xn 
xn — —aoX\ — a\X2 • • • —a„-\xn + b$u 
(3.51d) 

134 
Chapter 3 
Modeling in the Time Domain 
where Eq. (3.51d) was obtained from Eq. (3.48) by solving for dny/df and using 
Eq. (3.49). In vector-matrix form, Eq. (3.51) become 
Xi 
m 
X„-\ 
, Xn J 
0 
0 
0 
1 
0 
0 
0 
1 
0 
0 
0 
1 
0 
0 
0 
0 
•• 
0 
•• 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
Xi 
X2 
*3 
* « 
J 
+ 
0 
0 
0 
0 
(3.52) 
Equation (3.52) is the phase-variable form of the state equations. This form is easily 
recognized by the unique pattern of l's and 0's and the negative of the coefficients 
of the differential equation written in reverse order in the last row of the system 
matrix. 
Finally, since the solution to the differential equation is y(f), or Xi, the output 
equation is 
y = [\ 0 0 
Xi 
X2 
X3 
Xn-\ 
Xn 
(3.53) 
In summary, then, to convert a transfer function into state equations in phase-
variable form, we first convert the transfer function to a differential equation by 
cross-multiplying and taking the inverse Laplace transform, assuming zero initial 
conditions. Then we represent the differential equation in state space in phase-
variable form. An example illustrates the process. 
Example 3.4 
Converting a Transfer Function with Constant Term in Numerator 
PROBLEM: Find the state-space representation in phase-variable form for the 
transfer function shown in Figure 3.10(A). 
SOLUTION: 
Step 1 Find the associated differential equation. Since 
C(s) 
24 
R(s) 
{s3 + 9s2 + 26s + 24) 
cross-multiplying yields 
(j3 + 9s2 + 2fa + 24)C(s) = 24R{s) 
(3.54) 
(3.55) 
The corresponding differential equation is found by taking the inverse Laplace 
transform, assuming zero initial conditions: 
c + 9 c + 26c + 24c = 24/-
(3.56) 

3.5 Converting a Transfer Function to State Space 
135 
/?(.v) 
24 
J 3+ 9i-2 + 26s+24 
C(.v) 
(a) 
1,(/) 
v(/) 
FIGURE 3.10 
a. Transfer function; b. equivalent block diagram showing phase variables. 
Note: y(t) = c(t). 
Step 2 Select the state variables. 
Choosing the state variables as successive derivatives, we get 
X\ = C 
x2 = c 
(3.57a) 
(3.57b) 
(3.57c) 
Differentiating both sides and making use of Eq. (3.57) to find k\ and X2, and Eq. 
(3.56) to find c = X3, we obtain the state equations. Since the output is c = xi, the 
combined state and output equations are 
xi = 
x2 
X2 = 
X3 
x3 = -24xi - 26x2 - 9x3 + 24r 
y = c = xi 
In vector-matrix form, 
Xi" 
X2 
X* 
= 
r 0 
0 
-24 
1 
0 
-26 
0 
1 
-9 
y = [l 0 0] 
'Xl 
X2 
-X3 
Xi" 
X2 
X3 
+ 
roi 
0 
24 
(3.58a) 
(3.58b) 
(3.58c) 
(3.58d) 
(3.59a) 
(3.59b) 
Notice that the third row of the system matrix has the same coefficients as the 
denominator of the transfer function but negative and in reverse order. 
At this point, we can create an equivalent block diagram of the system of Figure 
3.10(A) to help visualize the state variables. We draw three integral blocks as shown in 
Rgure 3.10(6) and label each output as one of the state variables, X/(t), as shown. Since 
the input to each integrator is x,(f), use Eqs. (3.58a), (3.58b), and (3.58c) to determine 

136 
Chapter 3 
Modeling in the Time Domain 
the combination of input signals to each integrator. Form and label each input. Finally, 
use Eq. (3.58d) to form and label the output, v(r) = c(t). The final result of Figure 3.10 
(b) is a system equivalent to Figure 3.10(a) that explicitly shows the state variables and 
gives a vivid picture of the state-space representation. 
Students who are using MATLAB should now run ch3pl through ch3p4 
in Appendix B. You will learn how to represent the system matrix 
A, the input matrix B, and the output matrix C using MATLAB. You 
will learn how to convert a transfer function to the state-space 
representation in phase-variable form. Finally, Example 3.4 
will be solved using MATLAB. 
The transfer function of Example 3.4 has a constant term in the numerator. If a 
transfer function has a polynomial in s in the numerator that is of order less than the 
polynomial in the denominator, as shown in Figure 3.11(a), the numerator and 
denominator can be handled separately. First separate the transfer function into two 
cascaded transfer functions, as shown in Figure 3.11(6); the first is the denominator, 
and the second is just the numerator. The first transfer function with just the 
denominator is converted to the phase-variable representation in state space as 
demonstrated in the last example. Hence, phase variable x1 is the output, and the 
rest of the phase variables are the internal variables of the first block, as shown in 
Figure 3.11(6). The second transfer function with just the numerator yields 
Y(s) = C(s) = {b2s2 + hs + b0)X1 (s) 
(3.60) 
where, after taking the inverse Laplace transform with zero initial conditions, 
y(t) = b
2 ^ 
+ b 1 ^ + b0xl 
(3.61) 
But the derivative terms are the definitions of the phase variables obtained in the 
first block. Thus, writing the terms in reverse order to conform to an output equation, 
y(t) = boxi + b\x2 + b2X3 
(3.62) 
Hence, the second block simply forms a specified linear combination of the state 
variables developed in the first block. 
From another perspective, the denominator of the transfer function yields the 
state equations, while the numerator yields the output equation. The next example 
demonstrates the process. 
K(.v) 
b2S2 + b\S + b^ 
e^s3 + a2s2 + fli* + «o 
C(.v) 
(«) 
R(s) 
1 
a^s* + ajs2- + a\s + «o 
X,(.v) 
b2s2 + b]s + b() 
C(s) 
Internal variables: 
FIGURE 3.11 
Decomposing a 
X2(s),X3(s) 
transfer function 
(*) 
MATLAB 

3.5 Converting a Transfer Function to State Space 
137 
Example 3.5 
Converting a Transfer Function with Polynomial in Numerator 
PROBLEM: Find the state-space representation of the transfer function shown in 
Figure 3.12(A). 
s2 + 7s + 2 
53 + 9s2+ 265+ 24 
C(s) 
R(.v) 
I 
s3 + 9s2 + 26A- + 24 
(a) 
Xi(.v) 
s2 + 7s + 2 
CU) 
Internal variables: 
(b) 
FIGURE 3.12 
a. Transfer 
function; b. decomposed trans-
fer function; c. equivalent block 
diagram Note: y (t) = c(t). 
SOLUTION: This problem differs from Example 3.4 since the numerator has a 
polynomial in 51 instead of just a constant term. 
Step 1 Separate the system into two cascaded blocks, as shown in Figure 3.12(6). The 
first block contains the denominator and the second block contains the 
numerator. 
Step 2 Find the state equations for the block containing the denominator. We 
notice that the first block's numerator is 1/24 that of Example 3.4. Thus, 
the state equations are the same except that this system's input matrix is 
1/24 that of Example 3.4. Hence, the state equation is 
(3.63) 
rir 
X2 
.X3. 
= 
r o 
0 
.-24 
1 
0 
-26 
0 
1 
-9 
*i 
X2 
*» 
+ 
"()-
0 
1 

138 
Chapter 3 
Modeling in the Time Domain 
Trylt 3.1 
Use the following MATLAB 
statements to form an LTI 
state-space representation 
from the transfer function 
shown in Figure 3.12(a). The 
A matrix and B vector are 
shown in Eq. (3.63). The C 
vector is shown in Eq. (3.67). 
num=[l 7 2]; 
den=[l 9 26 24]; 
[A,B,C,D]=tf2ss. . . 
(num, den),• 
P=[0 0 1,-0 1 0,-1 0 0]; 
A=inv(P)*A*P 
B=inv(P)*B 
C=C*P 
Step 3 Introduce the effect of the block with the numerator. The second block of 
Figure 3.12(6), where 62 = 1, 6i = 7, and 60 = 2, states that 
C{s) = {b2s2 + biS + b0)X1 (s) = {s2 + 7s + 2)X} (s) 
(3.64) 
(3.65) 
Taking the inverse Laplace transform with zero initial conditions, we get 
c = xi + 7*i + 2*i 
But 
Xi 
=Xi 
Xi = * 2 
X-[ 
=X3 
Hence, 
y = c{t) = b2x3 + bix2 + b0X] = x-i + x2 + 2*i 
(3.66) 
Thus, the last box of Figure 3.11(6) "collects" the states and generates the output 
equation. From Eq. (3.66), 
pi 1 
p i ] 
y=[b0 
b, b2] x2 
=[2 
7 1] x2 
(3.67) 
X\ 
x2 
L^3 J 
= [2 7 1] 
Xi 
x2 
Lx3 J 
Although the second block of Figure 3.12(6) shows differentiation, this block was 
implemented without differentiation because of the partitioning that was applied 
to the transfer function. The last block simply collected derivatives that were 
already formed by the first block. 
Once again we can produce an equivalent block diagram that vividly repre-
sents our state-space model. The first block of Figure 3.12(6) is the same as Figure 
3.10(a) except for the different constant in the numerator. Thus, in Figure 3.12(c) 
we reproduce Figure 3.10(6) except for the change in the numerator constant, 
which appears as a change in the input multiplying factor. The second block of 
Figure 3.12(6) is represented using Eq. (3.66), which forms the output from a linear 
combination of the state variables, as shown in Figure 3.12(c). 
WileyPLUS 
C33E9 
Control Solutions 
Skill-Assessment Exercise 3.3 
PROBLEM: Find the state equations and output equation for the phase-variable 
2s + 1 
representation of the transfer function G(s) = 
ANSWER: 
X = 
v = 
0 
1 
-9 
-7 
1 2]x 
x + 
0 
1 
s2 + Is 4- 9' 
r(t) 
The complete solution is at www.wiley.com/college.nise. 

3.6 Converting from State Space to a Transfer Function 
139 
I 
3.6 Converting from State Space to a 
Transfer Function 
In Chapters 2 and 3, we have explored two methods of representing systems: the 
transfer function representation and the state-space representation. In the last 
section, we united the two representations by converting transfer functions into 
state-space representations. Now we move in the opposite direction and convert the 
state-space representation into a transfer function. 
Given the state and output equations 
x = Ax + Bu 
(3.68a) 
y = Cx + Du 
(3.68b) 
take the Laplace transform assuming zero initial conditions:8 
sX{s) = AX(s) + BU(» 
(3.69a) 
Y(s) = CX(s) + DU(s) 
(3.69b) 
Solving for X(s) in Eq. (3.69a), 
(si - A)X(s) = BV{s) 
(3.70) 
i - i 
X(s) = (5l-A)_IBU(s) 
(3.71; 
where I is the identity matrix. 
Substituting Eq. (3.71) into Eq. (3.69b) yields 
> - U I T / . \ 
, n n / . \ 
rrv„T 
A \ - l 
Y{s) = C{sl - A)~ 1BU(J) + DU(s) = [C{sl - A)-1B + D]U(s) 
(3.72) 
We call the matrix [C(sl - A)_1B + D] the transfer function matrix, since it relates 
the output vector, Y(s), to the input vector, U(s). However, if U(s) = U(s) and 
Y(s) — Y(s) are scalars, we can find the transfer function, 
^ - f l ^ C ^ - A r ^ B + D 
(3.73) 
Let us look at an example. 
8 The Laplace transform of a vector is found by taking the Laplace transform of each component. Since x 
consists of the derivatives of the state variables, the Laplace transform of x with zero initial conditions 
yields each component with the form sXfe), where X/(s) is the Laplace transform of the state variable. 
Factoring out the complex variable, s, in each component yields the Laplace transform of x as s X(s), where 
X(s) is a column vector with components X,(s). 

140 
Chapter 3 
Modeling in the Time Domain 
MATLAB 
Symbolic Math 
Example 3.6 
State-Space Representation to Transfer Function 
PROBLEM: Given the system defined by Eq. (3.74), find the transfer function, 
T(s) = Y(s)/U(s), 
where U(s) is the input and Y(s) is the output. 
0 
1
0 
0 
0 
1 
- 1 
- 2 
- 3 
y=[l 
0 
0]x 
x = 
10 
0 
0 
(3.74a) 
(3.74b) 
- i 
SOLUTION: The solution revolves around finding the term ( s i - A ) 
in 
Eq. (3.73).9 All other terms are already defined. Hence, first find (si — A): 
Ts 
0 0 
(si - A) = 
0 s 
0 
.0 
0 s 
Now form (si - A) - 1: 
0 
1
0 
0 
0 
1 
- 1 
- 2 
- 3 
- 1 
s 
2 
0 
- 1 
s + 3] 
(3.75) 
- i 
(si-Ar = 
adj(sI-A) 
"(s2 + 3s + 2) 
-1 
-s 
s + 3 
r 
s(s + 3) 
s 
-(2s+ 1) s2. 
s3 + 3s2 + 2s + 1 
det(sl - A) 
Substituting (si - A)"1, B, C, and D into Eq. (3.73), where 
rio' 
B = 
0 
. 0 . 
C = [l 
0 0] 
D = 0 
we obtain the final result for the transfer function: 
10(s2 + 3s + 2) 
(3.76) 
T(s) = 
(3.77) 
s3 + 3s2 + 2s + l 
Students who are using MATLAB should now run ch3p5 in Appendix B. 
You will learn how to convert a state-space representation to a 
transfer function using MATLAB. You can practice by writing a 
MATLAB program to solve Example 3 . 6 . 
Students who are performing the MATLAB exercises and want to explore 
the added capability of MATLAB's Symbolic Math Toolbox should now 
run ch3spl in Appendix F located at www.wiley.com/college/nise. 
You will learn how to use the Symbolic Math Toolbox to write matrices 
and vectors. You will see that the Symbolic Math Toolbox yields 
an alternative way to use MATLAB to solve Example 3. 6. 
9 See Appendix G. It is located at www.wiley.com/college/nise and discusses the evaluation of the matrix 
inverse. 

3.7 Linearization 
141 
skill-; 
PROBLEM: Convert the state and outpu 
transfer function. 
ANSWER: 
Vssessment Exercis 
t equations shown in Eq. 
x = 
-4 
-1.5 
4 
0 
x + 
2 
0 u(t) 
y = [1.5 0.625 ]x 
rt, 
3^ + 5 
G(s) = -=— 
7 
K 
s2 + 4s + 6 
The complete solution is located at www.wiley.com/college/nise. 
B3.4J 
(3.78) to a 
(3.78a) 
(3.78b) 
Trylt 3.2 
Use the following MATLAB 
and the Control System 
Toolbox statements to obtain 
the transfer function shown in 
Skill-Assessment Exercise 3.4 
from the state-space repre-
sentation of Eq. (3.78). 
A=[-4 - 1 . 5 ; 4 0]; 
B=[2 0]' ; 
C=[L5 0.625]; 
D=0; 
T=ss (A,B,C,D); 
T=tf(T) 
In Example 3.6, the state equations in phase-variable form were converted to 
transfer functions. In Chapter 5, we will see that other forms besides the phase-
variable form can be used to represent a system in state space. The method of finding 
the transfer function representation for these other forms is the same as that 
presented in this section. 
| 
3.7 Linearization 
A prime advantage of the state-space representation over the transfer function 
representation is the ability to represent systems with nonlinearities, such as the 
one shown in Figure 3.13. The ability to represent nonlinear systems does not imply the 
ability to solve their state equations for the state variables and the output. Techniques 
do exist for the solution of some nonlinear state equations, but this study is beyond the 
scope of this course. However, in Appendix H, located at www.wiley.com/college/nise, 
FIGURE 3.13 Walking robots, such as Hannibal shown here, can be used to explore hostile 
environments and rough terrain, such as that found on other planets or inside volcanoes. 

142 
Chapter 3 
Modeling in the Time Domain 
you can see how to use the digital computer to solve state equations. This method also 
can be used for nonlinear state equations. 
If we are interested in small perturbations about an equilibrium point, as we 
were when we studied linearization in Chapter 2, we can also linearize the state 
equations about the equilibrium point. The key to linearization about an equilibrium 
point is, once again, the Taylor series. In the following example, we write the state 
equations for a simple pendulum, showing that we can represent a nonlinear system 
in state space; then we linearize the pendulum about its equilibrium point, the 
vertical position with zero velocity. 
Virtual Experiment 3.1 
Rotary Inverted 
Pendulum 
Put theory into practice by 
simulating the linear and 
non-linear model of the 
Quanser Rotary Inverted 
Pendulum in LabVIEW. The 
behavior of an inverted pen-
dulum is similar to a variety of 
systems, such as Segway trans-
porters and human 
posture. 
Virtual experiments are found 
on WileyPLUS. 
Example 3.7 
Representing a Nonlinear System 
PROBLEM: First represent the simple pendulum shown in Figure 3.14(a) (which 
could be a simple model for the leg of the robot shown in Figure 3.13) in state space: 
Mg is the weight, Tis an applied torque in the 0 direction, and L is the length of the 
pendulum. Assume the mass is evenly distributed, with the center of mass at L/2. 
Then linearize the state equations about the pendulum's equilibrium point—the 
vertical position with zero angular velocity. 
MgL sin 6 
(a) 
(b) 
(c) 
FIGURE 3.14 a. Simple pendulum; b. force components of Mg; c free-body diagram 
SOLUTION: First draw a free-body diagram as shown in Figure 3.14(c). Summing 
the torques, we get 
d20 { MgL . 
J ^ 
+ — 
Sm9=T 
(3.79) 
where J is the moment of inertia of the pendulum around the point of rotation. 
Select the state variables x{ and x2 as phase variables. Letting x\ = 9 and 
x2 = dd/dt, we write the state equations as 
X\ 
=X2 
MgL . 
T 
x^—2Tsmx'+J 
where k% = d20/dt2 is evaluated from Eq. (3.79). 
(3.80a) 
(3.80b) 

3.7 Linearization 
143 
Thus, we have represented a nonlinear system in state space. It is interesting 
to note that the nonlinear Eq. (3.80) represent a valid and complete model of the 
pendulum in state space even under nonzero initial conditions and even if 
parameters are time varying. However, if we want to apply classical techniques 
and convert these state equations to a transfer function, we must linearize them. 
Let us proceed now to linearize the equation about the equilibrium point, 
xi = 0, x2 = 0, that is, 0 = 0 and dO/dt = 0. Let JCI and x2 be perturbed about the 
equilibrium point, or 
x\ = 0 + 8x\ 
X2 = 0 + 8X2 
Using Eq. (2.182), we obtain 
sin Xi - sin 0 = d(sw.x\] 
dx\ 
8x\ = Sxi 
xt=Q 
from which 
sin x\ = 5*i 
(3.81a) 
(3.81b) 
(3.82) 
(3.83) 
Substituting Eqs. (3.81) and (3.83) into Eq. (3.80) yields the following state 
equations: 
8x\ = 8x2 
• 
MgL „ 
T 
(3.84a) 
(3.84b) 
which are linear and a good approximation to Eq. (3.80) for small excursions away 
from the equilibrium point. What is the output equation? 
Skill-Assessment Exercise 3.5 
PROBLEM: Represent the translational mechanical system shown in Figure 3.15 in 
state space about the equilibrium displacement. The spring is nonlinear, where the 
relationship between the spring force, fs(t), and the spring displacement, xs(t), is 
fs(t) = 2xJ(/). The applied force is f(t) = 10 + 8f(t), where 8f(t) is a small force 
about the 10 N constant value. 
Assume the output to be the displacement of the mass, x(t). 
WiieyPLUS 
Control Solutions 
ANSWER: 
x = 
0 1 
- 4 A / 5 
0 
x + 
<5/W 
y = [l 
0]x 
The complete solution is located at www.wiley.com/college/nise. 
Nonlinear 
spring 
h J W H 1kg 
1(/) 
./'(') 
FIGURE 3.15 Nonlinear translational 
mechanical system for Skill-
Assessment Exercise 3.5 

144 
Chapter 3 
Modeling in the Time Domain 
Case Studies 
Antenna Control: State-Space Representation 
We have covered the state-space representation of individual physical subsystems 
in this chapter. In Chapter 5, we will assemble individual subsystems into feedback 
control systems and represent the entire feedback system in state space. Chapter 5 
also shows how the state-space representation, via signal-flow diagrams, can be 
used to interconnect these subsystems and permit the state-space representation of 
the whole closed-loop system. In the following case study, we look at the antenna 
azimuth position control system and demonstrate the concepts of this chapter by 
representing each subsystem in state space. 
PROBLEM: Find the state-space representation in phase-variable form for each 
dynamic subsystem in the antenna azimuth position control system shown on the 
front endpapers, Configuration 1. By dynamic, we mean that the system does not 
reach the steady state instantaneously. For example, a system described by a 
differential equation of first order or higher is a dynamic system. A pure gain, on 
the other hand, is an example of a nondynamic system, since the steady state is 
reached instantaneously. 
SOLUTION: In the case study problem of Chapter 2, each subsystem of the antenna 
azimuth position control system was identified. We found that the power amplifier 
and the motor and load were dynamic systems. The preamplifier and the potenti-
ometers are pure gains and so respond instantaneously. Hence, we will find the 
state-space representations only of the power amplifier and of the motor and load. 
Power amplifier: 
The transfer function of the power amplifier is given on the front endpapers as 
G(s) = 100/(5 + 100). We will convert this transfer function to its state-space 
representation. Letting vp{t) represent the power amplifier input and ea{i) repre-
sent the power amplifier output, 
Ea{s) 
100 
( 
, 
G{s) = v^) = Vnoo) 
(3-85) 
Cross-multiplying, (s + 100)£a(.s) — \00Vp{s), from which the differential equation 
can be written as 
^ 
+ 100^ = 1 0 0 ^ ) 
(3.86) 
Rearranging Eq. (3.86) leads to the state equation with ea as the state variable: 
dea 
dt 
Since the output of the power amplifier is ea{t), the output equation is 
y = ea 
(3.88) 
^ = - 1 0 0 e a + 100vp(0 
(3.87) 
Motor and load: 
We now find the state-space representation for the motor and load. We could of course 
use the motor and load block shown in the block diagram on the front endpapers 
to obtain the result. However, it is more informative to derive the state-space 

Case Studies 
145 
representation directly from the physics of the motor without first deriving the transfer 
function. The elements of the derivation were covered in Section 2.8 but are repeated 
here for continuity. Starting with Kirchhoff s voltage equation around the armature 
circuit, we find 
ea(t) = ia{t)Ra + Kb dt 
(3.89) 
where ea{i) is the armature input voltage, ia(t) is the armature current, Ra is the 
armature resistance, Kb is the armature constant, and 9m is the angular displace-
ment of the armature. 
The torque, Tm(t), delivered by the motor is related separately to the armature 
current and the load seen by the armature. From Section 2.8, 
d9m 
Tm(t) = 
Ktia(t)=J, d29n + DM 
(3.90) 
dt2 
' ~m 
dt 
where Jm is the equivalent inertia as seen by the armature, and Dm is the equivalent 
viscous damping as seen by the armature. 
Solving Eq. (3.90) for ia(t) and substituting the result into Eq. (3.89) yields 
ea{t) = RaJm\ d 9, 
K, J dt2 
Defining the state variables x1 and x2 as 
Xi = I 
and substituting into Eq. (3.91), we get 
Kt 
Kt 
dOrr, 
dt 
d9ri 
/RaJmX dX2 , (DmRa 
, 
e"(t)^-Kr)^+\-Kr+Kb]x" 
Solving for dx2/dt yields 
S~s-«°' 
KtKb\ 
-RTF2* 
Kt_ 
RaJrt ea(t) 
Using Eqs. (3.92) and (3.94), the state equations are written as 
dx\ 
Kt 
dX2= 
1 (D 
I 
KtKb\, 
dt 
Jm 
\ 
Ra 
J 
\RaJn 
e„(t) 
(3.91) 
(3.92a) 
(3.92b) 
(3.93) 
(3.94) 
(3.95a) 
(3.95b) 
The output, 90(t), is 1/10 the displacement of the armature, which is X\. Hence, the 
output equation is 
y = O.lxi 
(3.96) 
In vector-matrix form, 
x = 
y = [ 
"0 
0 
0.1 
1 
Jm \ 
Ra J -
0]x 
x + 
r o I 
ea{t) 
(3.97a) 
(3.97b) 

146 
Chapter 3 
Modeling in the Time Domain 
But from the case study problem in Chapter 2, Jm = 0.03 and Dm = 0.02. Also, 
Kt/Ra = 0.0625 and Kb = 0.5. Substituting the values into Eq. (3.97a), we obtain 
the final state-space representation: 
x = 
0 
1 
0 -1.71 
v = [0.1 0]x 
x + 
0 
2.083 
ea(t) 
(3.98a) 
(3.98b) 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. Referring to the antenna azimuth position control system shown on the 
front endpapers, find the state-space representation of each dynamic subsystem. 
Use Configuration 2. 
Pharmaceutical Drug Absorption 
An advantage of state-space representation over the transfer function representa-
tion is the ability to focus on component parts of a system and write n simultaneous, 
first-order differential equations rather than attempt to represent the system as a 
single, «th-order differential equation, as we have done with the transfer function. 
Also, multiple-input, multiple-output systems can be conveniently represented in 
state space. This case study demonstrates both of these concepts. 
Dosage 
Absorption 
site 
Blood 
Urine 
*1 
x2 
! 
xA 
x5 
Peripheral 
compartment 
FIGURE 3.16 
Pharmaceutical drug-level 
concentrations in a human 
PROBLEM: In the pharmaceutical industry we want to de-
scribe the distribution of a drug in the body. A simple model 
divides the process into compartments: the dosage, the absorp-
tion site, the blood, the peripheral compartment, and the urine. 
The rate of change of the amount of a drug in a compartment is 
equal to the input flow rate diminished by the output flow rate. 
Figure 3.16 summarizes the system. Here each xt is the amount 
of drug in that particular compartment (Lordi, 1972). Repre-
sent the system in state space, where the outputs are the 
amounts of drug in each compartment. 
SOLUTION: The flow rate of the drug into any given compart-
ment is proportional to the concentration of the drug in the 
previous compartment, and the flow rate out of a given compartment is propor-
tional to the concentration of the drug in its own compartment. 
We now write the flow rate for each compartment. The dosage is released to the 
absorption site at a rate proportional to the dosage concentration, or 
dxi 
— = -K1X1 
(3.99) 
The flow into the absorption site is proportional to the concentration of the drug 
at the dosage site. The flow from the absorption site into the blood is proportional 
to the concentration of the drug at the absorption site. Hence, 
-½ = Kixi - K2x2 
Similarly, the net flow rate into the blood and peripheral compartment is 
-— = K2x2 - K3X3 + K4X4 - 
K5x3 
at 
dx^ 
~dt 
K5X3 - K4X4 
(3.100) 
(3.101) 
(3.102) 

Case Studies 
147 
where (K4X4 — K5X3) is the net flow rate into the blood from the peripheral 
compartment. Finally, the amount of the drug in the urine is increased as the 
blood releases the drug to the urine at a rate proportional to the concentration of 
the drug in the blood. Thus, 
^ 
= *3*3 
(3.103) 
Equations (3.99) through (3.103) are the state equations. The output equation is 
a vector that contains each of the amounts, Xj. Thus, in vector-matrix form, 
x = 
-Ki 
Ki 
0 
0 
0 
y = 
0 
-K2 
K2 
0 
0 
1 0 
0 0 0 
0 1 0 
0 0 
0 0 1 0 
0 
0 0 0 
1 0 
0 0 0 0 1 
0 
0 
-(#3+#5; 
K5 
0 
0 
K4 
K4 
0 
01 
0 
0 
0 
0 
(3.104a) 
(3.104b) 
You may wonder how there can be a solution to these equations if there is no 
input. In Chapter 4, when we study how to solve the state equations, we will see that 
initial conditions will yield solutions without forcing functions. For this problem, an 
initial condition on the amount of dosage, x\, will generate drug quantities in all 
other compartments. 
CHALLENGE: We now give you a problem to test your knowledge of this chapter's 
objectives. The problem concerns the storage of water in aquifers. The principles 
are similar to those used to model pharmaceutical drug absorption. 
Underground water supplies, called aquifers, are used in many areas for 
agricultural, industrial, and residential purposes. An aquifer system consists of a 
number of interconnected natural storage tanks. Natural water flows through the 
sand and sandstone of the aquifer system, changing the water levels in the tanks on 
its way to the sea. A water conservation policy can be established whereby water is 
pumped between tanks to prevent its loss to the sea. 
A model for the aquifer system is shown in Figure 3.17. In this model, the aquifer 
is represented by three tanks, with water level ht called the head. Each qn is the 
;xn: 
qx = G,A, 
%2 <7/2 
t I 
¢21 = ^21(^1-^1) 
9o3 
0/3 
t 
I 
n r - m ^ 
: i , i; 
. . 1.. i...1; i . ; . i . ; . ; . : 1. • . 1; 1; 1 ; . : . ; . . 1. L. L.±. ^,^ L17 
q2 = G2(h2-h-\) 
¢3= %(%-%) 
FIGURE 3.17 
Aquifer system 
mode] 

148 
Chapter 3 
Modeling in the Time Domain 
natural water flow to the sea and is proportional to the difference in head between 
two adjoining tanks, or qn = Gn(hn - h„-i), where G„ is a constant of proportion-
ality and the units of qn are m3/yr. 
The engineered flow consists of three components, also measured in m3/yr: (1) flow 
from the tanks for irrigation, industry, and homes, qon; (2) replenishing of the tanks 
from wells, qin; and (3) flow, q2i, created by the water conservation policy to prevent 
loss to the sea. In this model, water for irrigation and industry will be taken only from 
Tank 2 and Tank 3. Water conservation will take place only between Tank 1 and Tank 2, 
as follows. Let Hi be a reference head for Tank 1. If the water level in Tank 1 falls below 
Hi, water will be pumped from Tank 2 to Tank 1 to replenish the head. If hi is higher 
than Hi, water will be pumped back to Tank 2 to prevent loss to the sea. Calling this 
flow for conservation q2i, we can say this flow is proportional to the difference between 
the head of Tank 1, h\, and the reference head, Hi, or q21 = G2\{Hi - hi). 
The net flow into a tank is proportional to the rate of change of head in each 
tank. Thus, 
Cndhn/dt = qin - qon + qn+i -qn + q{n+i)n - qn(n-\) 
(Kandel, 1973). 
Represent the aquifer system in state space, where the state variables and the 
outputs are the heads of each tank. 
£ Summary ) 
This chapter has dealt with the state-space representation of physical systems, which 
took the form of a state equation, 
x = Ax + Bu 
(3.105) 
and an output equation, 
y = Cx + Du 
(3.106) 
for t > to, and initial conditions x(fo). Vector x is called the state vector and contains 
variables, called state variables. The state variables can be combined algebraically 
with the input to form the output equation, Eq. (3.106), from which any other system 
variables can be found. State variables, which can represent physical quantities such 
as current or voltage, are chosen to be linearly independent. The choice of state 
variables is not unique and affects how the matrices A, B, C, and D look. We will 
solve the state and output equations for x and y in Chapter 4. 
In this chapter, transfer functions were represented in state space. The form 
selected was the phase-variable form, which consists of state variables that are 
successive derivatives of each other. In three-dimensional state space, the resulting 
system matrix, A, for the phase-variable representation is of the form 
" 0 
1 
0 
0 
0 
1 
(3.1.07; 
-ao 
-ai 
-a2 

Problems 
149 
where the a/s are the coefficients of the characteristic polynomial or denominator of 
the system transfer function. We also discussed how to convert from a state-space 
representation to a transfer function. 
In conclusion, then, for linear, time-invariant systems, the state-space repre-
sentation is simply another way of mathematically modeling them. One major 
advantage of applying the state-space representation to such linear systems is 
that it allows computer simulation. Programming the system on the digital computer 
and watching the system's response is an invaluable analysis and design tool. 
Simulation is covered in Appendix H located at www.wiley.com/college/nise. 
^Review 
Questions^ 
1. Give two reasons for modeling systems in state space. 
2. State an advantage of the transfer function approach over the state-space 
approach. 
3. Define state variables. 
4. Define state. 
5. Define state vector. 
6. Define state space. 
7. What is required to represent a system in state space? 
8. An eighth-order system would be represented in state space with how many 
state equations? 
9. If the state equations are a system of first-order differential equations whose 
solution yields the state variables, then the output equation performs what 
function? 
10. What is meant by linear independence'? 
11. What factors influence the choice of state variables in any system? 
12. What is a convenient choice of state variables for electrical networks? 
13. If an electrical network has three energy-storage elements, is it possible to have a 
state-space representation with more than three state variables? Explain. 
14. What is meant by the phase-variable form of the state-equation? 
Problems 
1. Represent the electrical network shown in Figure P3.1 
in state space, where v()(t) is the output. [Section: 3.4] 
1Q 
1Q 
IQ. 
*> © 
1 H 
I F 
v„C) 
2. Represent the electrical network shown in Figure P3.2 
in state space, where iR(t) is the output. [Section: 3.4] 
3Q 
^ 
2H 
r^WTOP 
3F -j- 
4>',(r)<|> 
3 a 
'*(') 
FIGURE P3.1 
FIGURE P3.2 

150 
Chapter 3 
Modeling in the Time Domain 
3. Find the state-space representation of 
the network shown in Figure P3.3 if the 
output is v0(t). [Section: 3.4] 
WileyPLUS 
Control Solutions 
FIGURE P3.3 
4. Represent the system shown in Figure P3.4 in state 
space where the output is x3(r). [Section: 3.4] 
/v3=l_N-s/m 
[±r 
/v 4= 1 N-s/m_ 
/Vj = 1 N-s/m 
[±r 
•AMD 
M3 = 1 kg 
Mi = 2 kg 
/v2 = 1 N-s/m 
K = 2N/m 
fv5 = 1 N-s/m 
M2 = 1 kg 
• A | ( / ) Frictionless 
• / ( / ) 
.1-.(/) 
FIGURE P3.4 
5. Represent the translational mechanical system 
shown in Figure P3.5 in state space, where Xi(t) is 
the output. [Section: 3.4] 
fit) 
K j = 1 N/m 
Mil) 
M 3 = l k g 
M 2 = l k g 
x*m 
/ V | = 1 N-s/m 
fv = 1 N-s/m 
M, = 2 kg 
tf2=l 
N/m 
/ V (= 1 N-s/m 
/ 
FIGURE P3.5 
6. Represent the rotational mechanical system shown 
in Figure P3.6 in state space, where 9\{t) is the 
output. [Section: 3.4] 
T(1)0A!) 
50 kg-m2 
/V, =30 
^ 2=100 
100 N-m/rad 
100 N-m-s/rad "-1 
FIGURE P3.6 
7. Represent the system shown in Figure P3.7 in state 
space where the output is 9i(t). [Section: 3.4] 
/•(/) 
10 N-m/rad 
N\ = 30 
, 2 N-m/rad 3 N-m-s/rad 
m=3oo^"0OTv—[T 
\m = io 
> 
. 
#,,= loo U 
200 N-m-s/rad 
t.U) 
FIGURE P3.7 
S. Show that the system of Figure 3.7 in the text yields 
a fourth-order transfer function if we relate the 
displacement of either mass to the applied force, 
and a third-order one if we relate the velocity of 
either mass to the applied force. [Section: 3.4] 
9. Find the state-space representation 
WileyPLUS 
in phase-variable form for each of the 
aViJ^'B 
systems shown in Figure P3.8. 
control solutions 
[Section: 3.5] 
R(s) 
m 
100 
*4+20j-HlOs2 + 75-+100 
(«) 
30 
55 + 8s4 + 9i'3 + 6s2+.? + 30 
C(s) 
C(s) 
FIGURE P3.8 
10. R e p e a t 
P r o b l e m 
9 u s i n g 
MATLAB. 
MATLAB 
[ S e c t i o n : 3.5] 

Problems 
151 
11. For each system shown in Figure P3.9, write the 
state equations and the output equation for the 
phase-variable representation. [Section: 3.5] 
m 
R(s) 
85+10 
s4 + 5s3 + .^ + 55+ 13 
(a) 
s4 + 2s3+12s*+7s + 6 
4-5 + 954+13^3 + 84.2 
m 
FIGURE P3.9 
C(s) 
as) 
a. x = 
y = 
b. x = 
0 
1 5 
0 
0 
0 
1 0 
0 
0 
0 
1 
-7 -9 
-2 
-3 
x 
1 
3 6 
" 3 1 
- 3 
5 
0 
1 
- 7 
6 
. - 6 
0 
1 
-2 
6]x 
0 
4 
- 5 
2 
- 1 
2 
- 3 
- 4 
4 
- 3 
-9 
7 ( 
-2" 
- 1 
8 
0 
1. 
x + 
[21 
7 
8 
5 
4 
6 x 
MATLAB 
12. R e p e a t P r o b l e m 11 u s i n g MATLAB. 
flTTA 
[ S e c t i o n : 3.5] 
13. Represent the following transfer function in state 
*'• 
space. Give your answer in vector-matrix form. 
[Section: 3.5] 
Symbolic Math 
WileyPLUS 
Control Solutions 
T(s) = 
(52 + 35 + 8) 
(5 + 1)(52 + 5s + 5) 
14. Find the transfer function G{s) = Y{s)/R{s) WileyPLUS 
for each of the following systems 
represented in state space: [Section: 3.6] 
contf°' solutions 
a. x = 
0 
1 
0 
0 
0 
1 
-3 
-2 
-5 
x + 
0 
0 
10 
16. Repeat Problem 15 using MATLAB, 
the Symbolic Math Toolbox, 
andEq. (3 . 73). [Section : 3 . 6] 
Gyros are used on space vehicles, 
aircraft, and ships for inertial nav-
igation. The gyro shown in Fig-
ure P3.10 is a rate gyro restrained by springs connected 
between the inner gimbal and the outer gimbal (frame) 
as shown. A rotational rate about the z-axis causes the 
rotating disk to precess about the x-axis. Hence, the 
input is a rotational rate about the z-axis, and the output 
is an angular displacement about the x-axis. Since the 
outer gimbal is secured to the vehicle, the displacement 
about the x-axis is a measure of the vehicle's angular 
rate about the z-axis. The equation of motion is 
/» dt2 + D3 dt 
= 
JCD~~ 
dt 
v = [l 0 0]x 
b. x = 
2 
0 
- 3 
- 3 
5 
- 5 
- 8 " 
3 
- 4 . 
x + 
"1" 
4 
.6. 
v = [l 
3 6]x 
3 
1 
- 3 
- 5 
2" 
- 8 
7 
- 6 
2. 
x + 
" 5" 
- 3 
2_ 
Inner gimbal 
Bearing 
c x = 
y = [l 
-4 3]x 
15. Use MATLAB to find the transfer 
function, G(s) = Y(s)/R{s)r 
for 
each of the following systems 
represented in state space: [Section :3.6] 
MATLAB 
Frame 
FIGURE P3.10 
Gyro system 
Represent the gyro in state space. [Section: 3.4] 

152 
Chapter 3 
Modeling in the Time Domain 
18. A missile in flight, as shown in Figure P3.ll, is subject 
to several forces: thrust, lift, drag, and gravity. 
The missile flies at an angle of attack, a, from its 
longitudinal axis, creating lift. For steering, the body 
angle from vertical, ¢, is controlled by rotating the 
engine at the tail. The transfer function relating 
the body angle, 0, to the angular displacement, 8, of 
the engine is of the form 
8(s) 
K3s3 + K2s2 + Kis + K0 
Vertical 
Thrust 
FIGURE P3.11 
Missile 
Represent the missile steering control in state space. 
[Section: 3.5] 
19. Given the dc servomotor and load shown in Figure 
P3.12, represent the system in state space, where the 
state variables are the armature current, ia, load 
displacement, #£,, and load angular velocity, COL. 
Assume that the output is the angular displacement 
of the armature. Do not neglect armature induc-
tance. [Section: 3.4] 
/ 
Fixed 
FIGURE P3.12 
Motor and load 
20. Consider the mechanical system of Figure P3.13. If 
the spring is nonlinear, and the force, Fs, required to 
stretch the spring is Fs = 2xj, represent the system 
in state space linearized about x\ = 1 if the output is 
,. [Section: 3.7] 
x2 
Fff=2x,2N 
• v i ( / ) 
lkg 
1 N-s/m 
xm 
lkg 
./in 
FIGURE P3.13 Nonlinear mechanical system 
21. Image-based homing for robots can be 
wiieypius 
implemented by generating heading 
>ViJ'K 
command inputs to a steering system 
control solutions 
based on the following guidance algorithm. Suppose 
the robot shown in Figure P3.14(a) is to go from point 
R to a target, point T, as shown in Figure P3.14(6). If 
R*, Ry, and Rz are vectors from the robot to each 
landmark, X, Y, Z, respectively, and Tx, Ty, and Tz are 
vectors from the target to each landmark, respectively, 
then heading commands would drive the robot to 
minimize Rx — T^, Ry — Ty, and Rz — Tz simulta-
neously, since the differences will be zero when the 
robot arrives at the target (Hong, 1992). If Figure 
P3.14(c) represents the control system that steers the 
robot, represent each block—the controller, wheels, 
and vehicle—in state space. [Section: 3.5] 
Camera 
Heading 
Heading Controller Steering Wheels Wheel Vehicle 
Actual 
command 
error 
command 
angle 
heading 
* » 
Ki(s + a) 
(s + b) 
(c) 
FIGURE P3.14 
a. Robot with television imaging system; 
b. vector diagram showing concept behind image-based 
homing; c. heading control system (© 1992 IEEE) 
22. Given the F4-E military aircraft shown in Figure 
P3.15(«), where normal acceleration, an, and pitch 

Problems 
153 
rate, q, are controlled by elevator deflection, 5C, on 
the horizontal stabilizers and by canard deflection, 
8e. A commanded deflection, 5com, as shown in 
Figure P3.15(b), is used to effect a change in both 
Se and Sc. The relationships are 
1/T 
Se(s) 
_ 
SCOm(s) 
S+l/t 
Sc(s) 
= 
Kc/x 
&com{s) 
S+l/t 
Horizontal 
canards (5,.) 
Elevator (5,.) 
$cUs) 
\lt 
5+1/r 
d,(s) 
Kc 4(v) 
Aircraft 
longitudinal 
dynamics 
fl/i 
</ 
(b) 
FIGURE P3.15 
a. F4-E with canards b. open-loop flight 
control system 
These deflections yield, via the aircraft longitudinal 
dynamics, an and q. The state equations describing the 
effect of 5COm on an and q is given by (Cavallo, 1992) 
an 
q 
Se 
= 
1.702 
50.72 
0.22 
-1.418 
o 
° 
+ 
f" -272.06" 
0 
14 
Ocom 
263.38 
-31.99 
-14 
an 
q 
Se 
Find the following transfer functions: [Section: 3.5] 
Ms) 
G,(s) = 
<h{s) = 
<$com(s) 
Q(S) 
Scorn(S) 
23. Modern robotic manipulators that act directly upon 
their target environments must be controlled so that 
impact forces as well as steady-state forces do not 
damage the targets. At the same time, the manipu-
lator must provide sufficient force to perform the 
task. In order to develop a control system to regu-
late these forces, the robotic manipulator and target 
environment must be modeled. Assuming the 
model shown in Figure P3.16, represent in state 
space the manipulator and its environment under 
the following conditions (Chiu, 1997). [Section: 3.5] 
a. The manipulator is not in contact with its target 
environment. 
b. The manipulator is in constant contact with its 
target environment. 
Contact 
point 
lN/m 
IN/m 
^ir 
1kg 
Manipulator 
1 N/m 1 N-s/m 
1 N-s/m 
>K 
J 
Internal force 
Environment 
model 
FIGURE P3.16 
Robotic manipulator and target 
environment (© 1997 IEEE) 
24. In the past, Type-1 diabetes patients had to inject 
themselves with insulin three to four times a day. New 
delayed-action insulin analogues such as insulin Glar-
gine require a single daily dose. A similar procedure 
to the one described in the Pharmaceutical Drug 
Absorption case study of this chapter is used to 
find a model for the concentration-time evolution 
of plasma for insulin Glargine. For a specific patient, 
state-space model matrices are given by (Tarin, 2007) 
-0.435 
0.209 0.02 
0.268 -0.394 0 
0.227 0 -0.02 
C =: [0.0003 0 0]; 
D = 0 
where the state vector is given by 
B = 
x = 
X3 

154 
Chapter 3 
Modeling in the Time Domain 
The state variables are 
Xi — insulin amount in plasma compartment 
X2 = insulin amount in liver compartment 
%3 = insulin amount in interstitial (in body tissue) 
compartment 
The system's input is u = external insulin flow. 
The system's output is y = plasma insulin 
concentration. 
a. Find the system's transfer function. 
MATLAB 
b. Verify your result using MATLAB. 
25. A linear, time-invariant model of the hypothalamic-
pituitary-adrenal axis of the endocrine system with 
five state variables has been proposed as follows 
(Kyrylov, 2005): 
= «00*0 + «02*2 + ^0 
dxQ 
dt 
dx\ 
— = aioxo + anx\ + «12*2 
dt 
dx2 
dt 
dx$ 
~dt 
dr 
= «20*0 + «21*1 + «22*2 + «23*3 + «24*4 
= «32*2 + «33*3 
= a42*2 + «44*4 
where each of the state variables represents circula-
tory concentrations as follows: 
xo = corticotropin-releasing hormone 
Xi = corticotropin 
X2 = free Cortisol 
X3 = albumin-bound Cortisol 
X4 = corticosteroid-binding globulin 
«0 = an external generating factor 
Express the system in the form x = Ax 4- Bu. 
26. In this chapter, we described the state-space repre-
sentation of single-input, single-output systems. In 
general, systems can have multiple inputs and multiple 
outputs. An autopilot is to be designed for a submarine 
as shown in Figure P3.17 to maintain a constant depth 
under severe wave disturbances. We will see that this 
system has two inputs and two outputs and thus the 
scaler u becomes a vector, u, and the scaler v becomes 
a vector, y, in the state equations. 
FIGURE P3.17 (© 1995 IEEE) 
It has been shown that the system's linearized dy-
namics under neutral buoyancy and at a given 
constant speed are given by (Liceaga-Cast.ro, 2009): 
x = Ax -)- Bu 
y = Cx 
where 
x = 
vv 
y = 
u = h 
A = 
-0.038 
0.0017 
1 
0 
-0.0075 
0.0017 
0 
0 
0.896 
-0.092 
0 
1 
-0.023 
-0.0022 
0 
0 
0 
0 
0 
0 
J 
0.0015 
-0.0056 
-3.086 
0 
1 
c = "0 0 1 01 
0 0 0 1 
B 
and where 
w = the heave velocity 
q = the pitch rate 
z = the submarine depth 
9 = the pitch angle 
8B = the bow hydroplane angle 
8s = the stern hydroplane angle 

Problems 
155 
Since this system has two inputs and two outputs, 
four transfer functions are possible. 
MATLAB 
a. Use MATLAB to calculate the 
system's matrix 
t r a n s f e r 
function. 
b. Using the results from Part a, write the transfer 
function «(•) 
z(s) e(s) 
and e(s) 
&B(SY 
8S{S)' 
SB(S)' 
8S(S)' 
27. Experiments to identify precision grip dynamics 
between the index finger and thumb have been 
performed using a ball-drop experiment. A subject 
holds a device with a small receptacle into which an 
object is dropped, and the response is measured 
(Fagergren, 2000). Assuming a step input, it has 
been found that the response of the motor sub-
system together with the sensory system is of the 
form 
G(s) = 
s + c 
m^ 
_ 
R(s) 
(s2 + as + b)(s + d) 
Convert this transfer function to a state-space 
representation. 
28. State-space representations are, in general, not unique. 
One system can be represented in several possible 
ways. For example, consider the following systems: 
a. 
b. 
x = —5x + 3M 
y — lx 
Xl 
= r-5 
o -
v = [7 0] 
0 
-1 
r*i 
L*2 
x2 
+ 
3 
1 
c. 
xi 
V 
= 
= [ 
[-5 
7 3] 
0 
-1 
x2 
xi 
X2 
+ 
3 
0 
Show that these systems will result in the same 
transfer function. We will explore this phenomenon 
in more detail in Chapter 5. 
29. Figure P3.18 shows a schematic description of the 
global carbon cycle (Li, 2009). In the figure, mA(t) 
represents the amount of carbon in gigatons (GtC) 
present in the atmosphere of earth; my(t) the 
amount in vegetation; ms(t) the amount in soil; 
inso(t) the amount in surface ocean; and mmo(t) 
the amount in intermediate and deep-ocean reser-
voirs. Let UE({) stand for the human generated CO2 
emissions (GtC/yr). From the figure, the atmo-
spheric mass balance in the atmosphere can be 
expressed as: 
dm.A 
IT t) = uE{t) - (koi + kLl)mA(t) 
+ 
kL2mv(t) 
+ k02mso{t) + kL4ms{t) 
where the k's are exchange coefficients (yr x). 
a. Write the remaining reservoir mass balances. 
dmso(t) 
dmiDo{t) 
Namely, write equations for 
dmv(t) 
dms{t) 
,and-
dt 
dt 
dt 
' " " 
dt 
b. Express the system in state space form. 
(/,.(1 
Ocean sink 
FIGURE P3.18 Global carbon cycle 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
30. High-speed rail pantograph. A translational me-
chanical system model for a high-speed rail panto-
graph, used to supply electricity to a train from an 
overhead catenary, is shown in Figure P2.39(b) 
(O'Connor, 
1979). Represent the pantograph in 

156 
Chapter 3 
Modeling in the Time Domain 
state space, where the output is the displacement 
of the top of the pantograph, yh(t) - ycat{t). 
31. Control of HIV/AIDS. Problem 68 in Chapter 2 intro-
duced a model for HIV infection. If retroviral drugs, 
RTIs and Pis as discussed in Problem 22 in Chapter 1, 
are used, the model is modified as follows (Craig, 2004): 
AT 
— = s-dT-(l- 
u{)PTv 
dV 
~dt 
dv 
^{l-u^pTv-nT* 
— = (1 - u2)kT* - cv 
where 0 < w i < l , 0 < w 2 < l represent the effective-
ness of the RTI and PI medication, respectively. 
a. Obtain a state-space representation of the HIV/ 
AIDS model by linearizing the equations about the 
'cix s 
cd sk 
ct 
To, T*0, v0) = 
equilibrium with «io = «20 = 0- This equilibrium 
represents the asymptomatic HIV-infected pa-
tient. Note that each one of the above equations 
is of the form i/ = /;(*,-, «1, u2)i = 1, 2, 3. 
b. If Matrices A and B are given by 
A = 
\dh 
dxi 
df2 
dxx 
m 
.dx\ 
dfx 
dx% 
dh 
dx2 
dh 
0X2 
3/i" 
8x3 
df2 
dx?, 
m 
dxz. 
B 
To,T~a,vu 
\dh 
du\ 
df2 
du\ 
dh 
.du\ 
dfx] 
du2 
df2 
du2 
dfs 
du2. 
T0,T'n,vo 
and we are interested in the number of free HIV 
viruses as the system's output, 
C = [0 0 1] 
A = 
show that 
-(d + fivo) 
0 
0 -0T6 
k 
-c 
B = 
pT0v0 
0 
-PTov0 
0 
0 
-kT 0 -
c. Typical parameter values and descriptions for the 
HIV/AIDS model are shown in the following table. 
Substitute the values from the table into your model 
and write as 
x = Ax -(- Bu 
y = Cx 
/ 
d 
k 
s 
p 
c 
M 
Time 
Death of uninfected T cells 
Rate of free viruses produced 
per infected T cell 
Source term for 
uninfected T cells 
Infectivity rate of 
free virus particles 
Death rate of viruses 
Death rate of infected 
T cells 
days 
0.02/day 
100 counts/cell 
10/mm3/day 
2.4 x 10_5/mm3/day 
2.4/day 
0.24/day 
(© 2004 IEEE) 
32. Hybrid vehicle. For Problem 23 in Chapter 1 we 
developed the functional block diagrams for the 
cruise control of serial, parallel, and split-power 
hybrid electric vehicles (HEV). Those diagrams 
showed that the engine or electric motor or both 
may propel the vehicle. When electric motors are 
the sole providers of the motive force, the forward 
paths of all HEV topologies are similar. In general, 
such a forward path can be represented (Preitl, 
2007) by a block diagram similar to the one of 
Figure P3.19. 
Assume the motor to be an armature-
controlled dc motor. In this diagram, KA is the 
power amplifier gain; Ge(s) is the transfer func-
tion of the motor electric circuit and consists of a 
series inductor and resistor, La and Ra, respec-
tively; Kt is the motor torque constant; Jlot, is the 
sum of the motor inertia, /„,, the inertias of the 
vehicle, Jveh, and the two driven wheels, / ^ both 
of which are reflected to the motor shaft; kf is the 
coefficient of viscous friction; and kb is the back 
emf constant. 
The input variables are uc(t), the command volt-
age from the electronic control unit and Tc(t), the 
load torque. The output variables in this block 
diagram are the motor angular speed, co(t), and its 
armature current, Ia(t). 
a. Write the basic time-domain equations that char-
acterize the relationships between the state, in-
put, and output variables for the block diagram 
of Figure P3.19, given that the state variables are 
the motor armature current, Ia{t), and angular 
speed, co{t). 

Cyber Exploration Laboratory 
157 
Control 
command, 
uc{t) 
KA 
Amplifier 
output 
voltage, 
Ua(t) . 
AM (/) 
Back emf, 
eh(t) 
GM) 
Armature 
current, 
Ut) 
K, 
un 
Motive 
torque, 
m 
Load 
torque, 
Tc(t) 
Vehicle 
dynamics 
Friction 
torque, 
7/(/) 
l 
Angular 
speed, 
6>® 
cod) 
FIGURE P3.19 Block diagram representation of an HEV forward path (© 2007 IEEE) 
b. Write the resulting state-space equations and 
then represent them in matrix form. Regard the 
load torque Tc(f) as an extra input to the system. 
Thus, in your resulting state-space representa-
tion, the system will have two inputs and two 
outputs. 
Cyber Exploration Laboratory 
Experiment 3.1 
Objectives To learn to use MATLAB to (1) generate an LTI state-space 
representation of a system and (2) convert an LTI state-space representation of a 
system to an LTI transfer function. 
Minimum Required Software Packages MATLAB and the Control System 
Toolbox 
Prelab 
1. Derive the state-space representation of the translational mechanical system 
shown in Skill-Assessment Exercise 3.2 if you have not already done so. Consider 
the output to be x3(t). 
2. Derive the transfer function, -j&x, from the equations of motion for the transla-
tional mechanical system shown in Skill-Assessment Exercise 3.2. 
Lab 
1. Use MATLAB to generate the LTI state-space representation derived in Prelab 1. 
2. Use MATLAB to convert the LTI state-space representation found in Lab 1 to 
the LTI transfer function found in Prelab 2. 
Postlab 
1. Compare your transfer functions as found from Prelab 2 and Lab 2. 
2. Discuss the use of MATLAB to create LTI state-space representations and the 
use of MATLAB to convert these representations to transfer functions. 

Chapter 3 
Modeling in the Time Domain 
Experiment 3.2 
Objectives To learn to use MATLAB and the Symbolic Math Toolbox to (1) find 
a symbolic transfer function from the state-space representation and (2) find a state-
space representation from the equations of motion. 
Minimum Required Software Packages MATLAB, the Symbolic Math 
Toolbox, and the Control System Toolbox 
Prelab 
1. Perform Prelab 1 and Prelab 2 of Experiment 3.1 if you have not already 
done so. 
2. Using the equation T(s) = C(sI- A)_1B to find a transfer function from a state-
space representation, write a MATLAB program using the Symbolic Math 
Toolbox to find the symbolic transfer function from the state-space representa-
tion of the translational mechanical system shown in Skill-Assessment Exercise 
3.2 and found as a step in Prelab 1. 
3. Using the equations of motion of the translational mechanical system shown in 
Skill-Assessment Exercise 3.2 and found in Prelab 1, write a symbolic MATLAB 
program to find the transfer function, yfjx-, for this system. 
Lab 
1. Run the programs composed in Prelabs 2 and Prelab 3 and obtain the symbolic 
transfer functions by the two methods. 
Postlab 
1. Compare the symbolic transfer function obtained from T(s) — C(sl — A) - B 
with the symbolic transfer function obtained from the equations of motion. 
2. Discuss the advantages and disadvantages between the two methods. 
3. Describe how you would obtain an LTI state-space representation and an LTI 
transfer function from your symbolic transfer function. 
Experiment 3.3 
Objectives To learn to use LabVIEW to (1) generate state-space representa-
tions of transfer functions, (2) generate transfer functions from state-space 
representations, and (3) verify that there are multiple state-space representations 
for a transfer function. 
Minimum Required Software Packages LabVIEW, the LabVIEW Control 
Design and Simulation Module, and the MathScript RT Module. 
Prelab 
1. Study Appendix D, Sections D.l through Section D.4, Example D.l. 
2. Solve Skill-Assessment Exercise 3.3 in Chapter 3. 
3. Use your solution to Prelab 2 and convert back to the transfer function. 

Bibliography 
Lab 
2s + 1 
1. Use LabVIEW to convert the transfer function, G(s) = -¾—= 
-, into a state-
v ; 
s2+7s + 9 
space representation using both the graphical and MathScript approaches. The 
front panel will contain controls for the entry of the transfer function and 
indicators of the transfer function and the two state-space results. Functions 
for this experiment can be found in the following palettes: (1) Control Design 
and Simulation/Control Design/Model Construction, (2) Control Design and 
Simulation/Control Design/Model Conversion, and (3) Programming/Structures 
Hint: Coefficients are entered in reverse order when using MathScript with 
MATLAB. 
2. Use LabVIEW to convert all state-space representations found in Lab 1 to a 
transfer function. All state-space conversions should yield the transfer function 
given in Lab 1. The front panel will contain controls for entering state-space 
representations and indicators of the transfer function results as well as the state 
equations used. 
Postlab 
1. Describe any correlation found between the results of Lab 1 and calculations 
made in the Prelab. 
2. Describe and account for any differences between the results of Lab 1 and 
calculations made in the Prelab. 
3. Explain the results of Lab 2 and draw conclusions from the results. 
^Bibliography^ 
Carlson, L. E., and Griggs, G. E. Aluminum 
Catenary System Quarterly Report. Technical 
Report Contract Number DOT-FR-9154, U.S. Department of Transportation, 1980. 
Cavallo, A., De Maria, G., and Verde, L. Robust Flight Control Systems: A Parameter Space 
Design. Journal of Guidance, Control, and Dynamics, vol. 15, no. 5, September-October 
1992, pp. 1207-1215. 
Cereijo, M. R. State Variable Formulations. Instruments and Control Systems, December 1969, 
pp. 87-88. 
Chiu, D. K., and Lee, S. Design and Experimentation of a Jump Impact Controller. IEEE 
Control Systems, June 1997, pp. 99-106. 
Cochin, I. Analysis and Design of Dynamic Systems. Harper & Row, New York, 1980. 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
Elkins, J. A. A Method for Predicting the Dynamic Response of a Pantograph Running at 
Constant Speed under a Finite Length of Overhead Equipment. Technical Report TN DA36, 
British Railways, 1976. 
Fagergren, A., Ekeberg, O., and Forssberg, H. Precision Grip Force Dynamics: A System 
Identification Approach. IEEE Transactions on Biomedical Engineering, vol. 47, no. 10, 
2000, pp. 1366-1375. 
Franklin, G. F, Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems. 
Addison-Wesley, Reading, MA, 1986. 

Chapter 3 
Modeling in the Time Domain 
Hong, X, Tan, X., Pinette, B., Weiss, R., and Riseman, E. M. Image-Based Homing. IEEE 
Control Systems, February 1992, pp. 38-45. 
Inigo, R. M. Observer and Controller Design for D.C. Positional Control Systems Using State 
Variables. Transactions, Analog/Hybrid 
Computer Educational Society, December 1974, 
pp. 177-189. 
Kailath, T. Linear Systems. Prentice Hall, Upper Saddle River, NJ, 1980. 
Kandel, A. Analog Simulation of Groundwater Mining in Coastal Aquifers. Transactions, 
Analog/Hybrid Computer Educational Society, November 1973, pp. 175-183. 
Kyrylov, V., Severyanova, L. A., and Vieira, A. Modeling Robust Oscillatory Behavior of the 
Hypothalamic-Pituitary-Adrenal Axis. IEEE Transactions on Biomedical Engineering, vol. 
52, no. 12, 2005, pp. 1977-1983. 
Li, S., Jarvis, A.J., and Leedal, D.T., Are Response Function Representations of the Global 
Carbon Cycle Ever Interpretable? Tellus, vol. 61B, 2009, pp. 361-371. 
Liceaga-Castro, E., van der Molen, G M. Submarine H°° Depth Control Under Wave 
Disturbances. IEEE Transactions on Control Systems Technology, vol. 3, no. 3, 1995, 
pp. 338-346. 
Lordi, N. G. Analog Computer Generated Lecture Demonstrations in Pharmacokinetics. 
Transactions, Analog/Hybrid Computer Educational Society, November 1972, pp. 217-222. 
O'Connor, D. N., Eppinger, S. D., Seering, W P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Philco Technological Center. Servomechanism Fundamentals and Experiments. Prentice Hall, 
Upper Saddle River, NJ, 1980. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE. 2007. 
Riegelman, S. et al. Shortcomings in Pharmacokinetic Analysis by Conceiving the Body to 
Exhibit Properties of a Single Compartment. Journal of Pharmaceutical Sciences, vol. 57, 
no. 1,1968, pp. 117-123. 
Tarin, C, Teufel, E., Pico, X, Bondia, X, and Pfleiderer, H. X Comprehensive Pharmacokinetic 
Model of Insulin Glargine and Other Insulin Formulations. IEEE 
Transactions on 
Biomedical Engineering, vol. 52, no. 12, 2005, pp. 1994-2005. 
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New 
York, 1968. 

Time Response 
J 4 
^ Chapter Learning Outcomes J 
After completing this chapter the student will be able to: 
• Use poles and zeros of transfer functions to determine the time response of a control 
system (Sections 4.1-4.2) 
• Describe quantitatively the transient response of first-order systems (Section 4.3) 
• Write the general response of second-order systems given the pole location 
(Section 4.4) 
• 
Find the damping ratio and natural frequency of a second-order system (Section 4.5) 
• 
Find the settling time, peak time, percent overshoot, and rise time for an under-
damped second-order system (Section 4.6) 
• Approximate higher-order systems and systems with zeros as first- or second-order 
systems (Sections 4.7-4.8) 
• 
Describe the effects of nonlinearities on the system time response (Section 4.9) 
• Find the time response from the state-space representation (Sections 4.10-4.11) 
( ^ Case Study Learning Outcomes J 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows-. 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to (1) predict, by inspection, the form of the open-loop angular 
velocity response of the load to a step voltage input to the power amplifier; 
161 

162 
Chapter 4 
Time Response 
(2) describe quantitatively the transient response of the open-loop system; 
(3) derive the expression for the open-loop angular velocity output for a step 
voltage input; (A) obtain the open-loop state-space representation; (5) plot the 
open-loop velocity step response using a computer simulation. 
• Given the block diagram for the Unmanned Free-Swimming Submersible (UFSS) 
vehicle's pitch control system shown on the back endpapers, you will be able to 
predict, find, and plot the response of the vehicle dynamics to a step input 
command. Further, you will be able to evaluate the effect of system zeros and 
higher-order poles on the response. You also will be able to evaluate the roll 
response of a ship at sea. 
^ 4 . 1 
Introduction 
In Chapter 2, we saw how transfer functions can represent linear, time-invariant 
systems. In Chapter 3, systems were represented directly in the time domain via the 
state and output equations. After the engineer obtains a mathematical representa-
tion of a subsystem, the subsystem is analyzed for its transient and steady-state 
responses to see if these characteristics yield the desired behavior. This chapter is 
devoted to the analysis of system transient response. 
It may appear more logical to continue with Chapter 5, which covers the 
modeling of closed-loop systems, rather than to break the modeling sequence with 
the analysis presented here in Chapter 4. However, the student should not continue 
too far into system representation without knowing the application for the effort 
expended. Thus, this chapter demonstrates applications of the system representation 
by evaluating the transient response from the system model. Logically, this approach 
is not far from reality, since the engineer may indeed want to evaluate the response 
of a subsystem prior to inserting it into the closed-loop system. 
After describing a valuable analysis and design tool, poles and zeros, we begin 
analyzing our models to find the step response of first- and second-order systems. 
The order refers to the order of the equivalent differential equation representing the 
system—the order of the denominator of the transfer function after cancellation of 
common factors in the numerator or the number of simultaneous first-order 
equations required for the state-space representation. 
^ 4.2 Poles, Zeros, and System Response 
The output response of a system is the sum of two responses: the forced response and 
the natural response.1 Although many techniques, such as solving a differential 
equation or taking the inverse Laplace transform, enable us to evaluate this output 
response, these techniques are laborious and time-consuming. Productivity is aided 
by analysis and design techniques that yield results in a minimum of time. If the 
technique is so rapid that we feel we derive the desired result by inspection, we 
sometimes use the attribute qualitative to describe the method. The use of poles and 
1 The forced response is also called the steady-state response or particular solution. The natural response is 
also called the homogeneous solution. 

4.2 Poles, Zeros, and System Response 
zeros and their relationship to the time response of a system is such a technique. 
Learning this relationship gives us a qualitative "handle" on problems. The concept 
of poles and zeros, fundamental to the analysis and design of control systems, 
simplifies the evaluation of a system's response. The reader is encouraged to master 
the concepts of poles and zeros and their application to problems throughout this 
book. Let us begin with two definitions. 
Poles of a Transfer Function 
The poles of a transfer function are (1) the values of the Laplace transform variable, 
s, that cause the transfer function to become infinite or (2) any roots of the 
denominator of the transfer function that are common to roots of the numerator. 
Strictly speaking, the poles of a transfer function satisfy part (1) of the 
definition. For example, the roots of the characteristic polynomial in the denomina-
tor are values of s that make the transfer function infinite, so they are thus poles. 
However, if a factor of the denominator can be canceled by the same factor in the 
numerator, the root of this factor no longer causes the transfer function to become 
infinite. In control systems, we often refer to the root of the canceled factor in the 
denominator as a pole even though the transfer function will not be infinite at this 
value. Hence, we include part (2) of the definition. 
Zeros of a Transfer Function 
The zeros of a transfer function are (1) the values of the Laplace transform variable, 
s, that cause the transfer function to become zero, or (2) any roots of the numerator 
of the transfer function that are common to roots of the denominator. 
Strictly speaking, the zeros of a transfer function satisfy part (1) of this 
definition. For example, the roots of the numerator are values of s that make the 
transfer function zero and are thus zeros. However, if a factor of the numerator can 
be canceled by the same factor in the denominator, the root of this factor no longer 
causes the transfer function to become zero. In control systems, we often refer to the 
root of the canceled factor in the numerator as a zero even though the transfer 
function will not be zero at this value. Hence, we include part (2) of the definition. 
Poles and Zeros of a First-Order System: An Example 
Given the transfer function G(s) in Figure 4.1(a), a pole exists at s — -5, and a zero 
exists at -2. These values are plotted on the complex s-plane in Figure 4.1(b), using 
an x for the pole and a O f°r the zero. To show the properties of the poles and zeros, 
let us find the unit step response of the system. Multiplying the transfer function of 
Figure 4.1(a) by a step function yields 
(4.i; 
S\S •+• J) 
S 
S -|- J 
8 
J t J 
where 
C(s) = _ (* + 2) _A ! B _2/5 , 3/5 
5(5 + 5) 
.? ' s + 5 
s 
s + 5 
^ - ( s + 2 ) 
(s + 5) 
B = (s + 2) 
s 
c(t)=-5 + 
2 
3 
^-5 " 5 
b-« 
Thus, 
? 
1 
_. 
(4.2) 

164 
Chapter 4 
Time Response 
R(s) = r 
G(s) 
s + 2 
s + 5 
C(s) 
-*-o 
-5 
-2 
5-plane 
• * - & 
Input pole 
System zero 
System pole 
Output 
transform 
Output 
time 
response 
c(t) = 
- + «** i 
2 
^1 _X^ 
i 
*- 
1 i 
^ 
1 
Forced response Natural response 
(c) 
FIGURE 4.1 
a. System showing input and output; b. pole-zero plot of the system; c. evolution 
of a system response. Follow blue arrows to see the evolution of the response component 
generated by the pole or zero. 
From the development summarized in Figure 4.1(c), we draw the following 
conclusions: 
1. A pole of the input function generates the form of the forced response (that is, the 
pole at the origin generated a step function at the output). 
2. A pole of the transfer function generates the form of the natural response (that is, 
the pole at - 5 generated e-5'). 
3. A pole on the real axis generates an exponential response of the form e~°", where 
-a is the pole location on the real axis. Thus, the farther to the left a pole is on the 
negative real axis, the faster the exponential transient response will decay to 
zero (again, the pole at —5 generated e~5t; see Figure 4.2 for the general case). 
4. The zeros and poles generate the amplitudes for both the forced and natural 
responses (this can be seen from the calculation of A and B in Eq. (4.1)). 
Let us now look at an example that demonstrates the technique of using poles 
to obtain the form of the system response. We will learn to write the form of the 
response by inspection. Each pole of the system transfer function that is on the real 
axis generates an exponential response that is a component of the natural response. 
The input pole generates the forced response. 

4.2 Poles, Zeros, and System Response 
165 
Pole at -a generates 
response Ke~at 
J(o 
s-plane 
FIGURE 4.2 Effect of a real-axis pole upon transient response. 
Example 4.1 
Evaluating Response Using Poles 
PROBLEM: Given the system of Figure 4.3, write the output, c(t), in general terms. 
Specify the forced and natural parts of the solution. 
SOLUTION: By inspection, each system pole generates an exponen-
tial as part of the natural response. The input's pole generates the 
forced response. Thus, 
R(s) = 7 
(s + 3) 
(s + 2)(s + 4)(s + 5) 
C(s) 
C{s) = 
Kl 
&2 
^ 3 
&4 
5 
5 + 2 
5 + 4 
5 + 5 
J 
L 
Forced 
response 
Natural 
response 
Taking the inverse Laplace transform, we get 
c(t) — K\ 
+K.2e-2< + Kse-4' + ^4e-5' 
I 
I 
I 
I 
Forced 
response 
Natural 
response 
FIGURE 4.3 
System for Example 4.1 
(4.3) 
(4.4) 
Skill-Assessment Exercise 4.1 
PROBLEM: A system has a transfer function, G(s) = 
10(5 + 4)(5 + 6) 
(5+l)(5 + 7)(5 + 8)(5 + 10)" 
Write, by inspection, the output, c(f), in general terms if the input is a unit step. 
ANSWER: 
-it 
c(t) =A+ Be'1 + Ce~n + De~sl + Ee ,-10/ 
In this section, we learned that poles determine the nature of the time 
response: Poles of the input function determine the form of the forced response, 
and poles of the transfer function determine the form of the natural response. 
Zeros and poles of the input or transfer function contribute to the amplitudes of the 
component parts of the total response. Finally, poles on the real axis generate 
exponential responses. 

166 
Chapter 4 
Time Response 
( 43 First-Order Systems 
ja> 
R(s) 
G(s) 
a 
s + a 
Qs) 
5-pIane 
We now discuss first-order systems without zeros to define a 
performance specification for such a system. A first-order system 
without zeros can be described by the transfer function shown in 
Figure 4.4(a). If the input is a unit step, where R(s) = 1/s, the Laplace 
transform of the step response is C(s), where 
(a) 
(b) 
FIGURE 4.4 
a. First-order system; b. pole plot 
C(s) = R{s)G(s) = 
Virtual Experiment 4.1 
First-Order 
Open-Loop Systems 
Put theory into practice and find 
a first-order transfer function 
representing the Quanser Rotary 
Servo. Then validate the model 
by simulating it in Lab VIEW. 
Such a servo motor is used in 
mechatronic gadgets such as 
cameras. 
Virtual experiments are found 
on WileyPLUS. 
s(s + a) 
Taking the inverse transform, the step response is given by 
c(t) = cf(t) + Cn(t) = 1 - e-
(4.5) 
(4.6) 
where the input pole at the origin generated the forced response Cf(t) = 1, and the 
system pole at —a, as shown in Figure 4.4(b), generated the natural response 
c«(0 = ~e~a'. Equation (4.6) is plotted in Figure 4.5. 
Let us examine the significance of parameter a, the only parameter needed to 
describe the transient response. When t — l/a, 
(4.7) 
\t=l/a = e~l = 0.37 
or 
c(t)\t= l/a 
1 - e-at\l=l/a = 1 - 0.37 = 0.63 
(4.8) 
We now use Eqs. (4.6), (4.7), and (4.8) to define three transient response 
performance specifications. 
Time Constant 
We call l/a the time constant of the response. From Eq. (4.7), the time constant can 
be described as the time for e~al to decay to 37% of its initial value. Alternately, from 
Eq. (4.8) the time constant is the time it takes for the step response to rise to 63% of 
its final value (see Figure 4.5). 
FIGURE 4.5 First-order system 
response to a unit step 
Initial slope = 
1 
time constant 
63% of final value 
at t = one time constant 

4.3 First-Order Systems 
The reciprocal of the time constant has the units (1/seconds), or frequency. 
Thus, we can call the parameter a the exponential frequency. Since the derivative of 
e~at is —a when t = 0, a is the initial rate of change of the exponential at t = 0. Thus, 
the time constant can be considered a transient response specification for a first-
order system, since it is related to the speed at which the system responds to a 
step input. 
The time constant can also be evaluated from the pole plot (see Figure 4.4(b)). 
Since the pole of the transfer function is at —a, we can say the pole is located at the 
reciprocal of the time constant, and the farther the pole from the imaginary axis, the 
faster the transient response. 
Let us look at other transient response specifications, such as rise time, Tr, and 
settling time, Ts, as shown in Figure 4.5. 
Rise Time, Tr 
Rise time is defined as the time for the waveform to go from 0.1 to 0.9 of its final 
value. Rise time is found by solving Eq. (4.6) for the difference in time at c(t) = 0.9 
and c(t) = 0.1. Hence, 
_2.31 
0.11 
2.2 
1 r — a 
a 
a 
(4.9) 
Settling Time, Ts 
Settling time is defined as the time for the response to reach, and stay within, 2% of 
its final value.2 Letting c(t) = 0.98 in Eq. (4.6) and solving for time, t, we find the 
settling time to be 
T-4-
J- S — 
a 
(4.10) 
First-Order Transfer Functions via Testing 
Often it is not possible or practical to obtain a system's transfer function analytically. 
Perhaps the system is closed, and the component parts are not easily identifiable. 
Since the transfer function is a representation of the system from input to output, the 
system's step response can lead to a representation even though the inner construc-
tion is not known. With a step input, we can measure the time constant and the 
steady-state value, from which the transfer function can be calculated. 
Consider a simple first-order system, G(s) = K/(s + a), whose step response is 
c w = 
* 
=«/5_JiAL 
(4.n) 
w 
s{s + a) 
s 
(s + a) 
v 
' 
If we can identify K and a from laboratory testing, we can obtain the transfer 
function of the system. 
For example, assume the unit step response given in Figure 4.6. We determine 
that it has the first-order characteristics we have seen thus far, such as no overshoot 
and nonzero initial slope. From the response, we measure the time constant, that is, 
the time for the amplitude to reach 63% of its final value. Since the final value is 
2 Strictly speaking, this is the definition of the 2% setting time. Other percentages, for example 5%, also can 
be used. We will use settling time throughout the book to mean 2% settling time. 

168 
Chapter 4 
Time Response 
0.2 
0.3 
0.4 
0.5 
Time (seconds) 
0.6 
0.7 
0.8 
FIGURE 4.6 Laboratory results of a system step response test 
about 0.72, the time constant is evaluated where the curve reaches 0.63 x 0.72 = 
0.45, or about 0.13 second. Hence, a = 1/0.13 = 7.7. 
To find K, we realize from Eq. (4.11) that the forced response reaches a steady-
state value of K/a = 0.72. Substituting the value of a, we find K = 5.54. Thus, the 
transfer function for the system is G(s) — 5.54/(s + 7.7). It is interesting to note that 
the response of Figure 4.6 was generated using the transfer function G(s) = 
5/(s + 7). 
Skill-Assessment Exercise 4.2 
PROBLEM: A system has a transfer function, G(s) — 50 
5 + 50 . Find the time con-
stant, Tc, settling time, Ts, and rise time, Tr. 
ANSWER: 
Tc = 0.02 s, Ts = 0.08 s, and Tr = 0.044 s. 
The complete solution is located at www.wiley.com/college/nise. 
£ 4.4 Second-Order Systems: Introduction 
Let us now extend the concepts of poles and zeros and transient response to second-
order systems. Compared to the simplicity of a first-order system, a second-order 
system exhibits a wide range of responses that must be analyzed and described. 
Whereas varying a first-order system's parameter simply changes the speed of the 
response, changes in the parameters of a second-order system can change the form of 
the response. For example, a second-order system can display characteristics much 

4.4 Second-Order Systems: Introduction 
169 
like a first-order system, or, depending on component values, display damped or 
pure oscillations for its transient response. 
To become familiar with the wide range of responses before formalizing our 
discussion in the next section, we take a look at numerical examples of the second-
order system responses shown in Figure 4.7. All examples are derived from Figure 
4.7(a), the general case, which has two finite poles and no zeros. The term in the 
numerator is simply a scale or input multiplying factor that can take on any value 
without affecting the form of the derived results. By assigning appropriate values to 
parameters a and b, we can show all possible second-order transient responses. The 
unit step response then can be found using C(s) = R(s)G(s), where R(s) = 1/s, 
followed by a partial-fraction expansion and the inverse Laplace transform. Details 
are left as an end-of-chapter problem, for which you may want to review Section 2.2. 
System 
Pole-zero plot 
Response 
G(s) 
(a) 
R(s)= | 
b 
P'+as + b 
C(s) 
General 
G(s) 
ib) RU)= j 
Overdamped 
J0> 
s-plane 
9 
s2+9s 
+9 
C(5) 
X 
X -
-7.854 -1.146 
c(t) c(i) = l+0.nie-7S54' 
-
,4 
1.171e-'-146' 
-*~<7 
0.5 -
0 
1 2 
3 
4 
5 
(c) 
R(s)= I 
G(s) 
9 
s2+2s + 9 
C(s) 
Underdamped 
G(s) 
id) m> \u A 
C(s) 
Undamped 
G(s) 
(e) 
R(s)= I + 
2 
s2+6s + 9 
C(s) 
Critically damped 
c(f) c{t) = \-eT'(cosf%t +^ sin\/80 
= 1-1.06e"' cos(/8i-l 9.47°) 
5-plane X 
FIGURE 4.7 Second-order 
systems, pole plots, and step 
responses 

170 
Chapter 4 
Time Response 
We now explain each response and show how we can use the poles to determine 
the nature of the response without going through the procedure of a partial-fraction 
expansion followed by the inverse Laplace transform. 
Overdamped Response, Figure 4.7(6) 
For this response, 
9 
9 
C W = S(S2 + 9s + 9) = srs + 7.854)(5 + 1.146) 
( 4 - 1 2 ) 
This function has a pole at the origin that comes from the unit step input and two real 
poles that come from the system. The input pole at the origin generates the constant 
forced response; each of the two system poles on the real axis generates an exponential 
natural response whose exponential frequency is equal to the pole location. Hence, the 
output initially could have been written as c(t) = Ki +K2e~7-854t + K3e-U4(". 
This 
response, shown in Figure 4.7(b), is called overdamped.3 We see that the poles tell us the 
form of the response without the tedious calculation of the inverse Laplace transform. 
Underdamped Response, Figure 4.7 (c) 
For this response, 
C(s) = , , 
\ 
(4.13) 
v ; 
s{s2 4-25 + 9) 
v 
) 
This function has a pole at the origin that comes from the unit step input and two 
complex poles that come from the system. We now compare the response of the 
second-order system to the poles that generated it. First we will compare the pole 
location to the time function, and then we will compare the pole location to the plot. 
From Figure 4.7(c), the poles that generate the natural response are at s = —1 ± /Yo. 
Comparing these values to c(t) in the same figure, we see that the real part of the pole 
matches the exponential decay frequency of the sinusoid's amplitude, while the 
imaginary part of the pole matches the frequency of the sinusoidal oscillation. 
Let us now compare the pole location to the plot. Figure 
4.8 shows a general, damped sinusoidal response for a second-
order system. The transient response consists of an exponen-
Exponentiai decay generated by 
tially decaying amplitude generated by the real part of the 
rea par o comp ex po e pair 
system pole times a sinusoidal waveform generated by 
the imaginary part of the system pole. The time constant of 
the exponential decay is equal to the reciprocal of the real part 
of the system pole. The value of the imaginary part is the 
actual frequency of the sinusoid, as depicted in Figure 4.8. This 
sinusoidal frequency is given the name damped frequency of 
oscillation, cod- Finally, the steady-state response (unit step) 
Sinusoidal oscillation generated by 
was generated by the input pole located at the origin. We call 
imaginary part of complex pole pair 
th e type of response shown in Figure 4.8 an underdamped 
*"r 
response, one which approaches a steady-state value via a 
FIGURE 4.8 Second-order step response components 
transient response that is a damped oscillation. 
generated by complex poles 
The following example demonstrates how a knowledge 
of the relationship between the pole location and the transient response can lead 
rapidly to the response form without calculating the inverse Laplace transform. 
c{t) 
3 So named because overdamped refers to a large amount of energy absorption in the system, which 
inhibits the transient response from overshooting and oscillating about the steady-state value for a step 
input. As the energy absorption is reduced, an overdamped system will become underdamped and exhibit 
overshoot. 

4.4 Second-Order Systems: Introduction 
171 
Example 4.2 
Form of Underdamped Response Using Poles 
PROBLEM: By inspection, write the form of the step response of the 
system in Figure 4.9. 
R(S) = T 
200 
s* + 10s + 200 
C(s) 
SOLUTION: First we determine that the form of the forced response is a 
step. Next we find the form of the natural response. Factoring the 
FIGURE 4.9 System for Example 4.2 
denominator of the transfer function in Figure 4.9, we find the poles 
to be s = —5 ±yl3.23. The real part, -5, is the exponential frequency for the 
damping. It is also the reciprocal of the time constant of the decay of the 
oscillations. The imaginary part, 13.23, is the radian frequency for the sinusoidal 
oscillations. Using our previous discussion and Figure 4.7(c) as a guide, we ob-
tain c{t) = Ki + e~5t{K2 cos 13.23? + K3 sin 13.23r) = Ki + K4e"5'(cos 13.23* - 0), 
where <p = tan-1 K^/K^, K4 = JK\ + K\, and c(t) is a constant plus an exponen-
tially damped sinusoid. 
We will revisit the second-order underdamped response in Sections 4.5 and 4.6, 
where we generalize the discussion and derive some results that relate the pole 
position to other parameters of the response. 
Undamped Response, Figure 4.7((/) 
For this response, 
o 
C(s) = sis' 
9) 
(4.14) 
This function has a pole at the origin that comes from the unit step input and two 
imaginary poles that come from the system. The input pole at the origin generates 
the constant forced response, and the two system poles on the imaginary axis 
at ±/3 generate a sinusoidal natural response whose frequency is equal to the 
location of the imaginary poles. Hence, the output can be estimated as c(t) = K\ + 
K4 cos(3? - ¢). This type of response, shown in Figure 4.7(d), is called undamped. 
Note that the absence of a real part in the pole pair corresponds to an exponential 
that does not decay. Mathematically, the exponential is e~0t = 1. 
Critically Damped Response, Figure 4.7 (e) 
For this response, 
9 
9 
C(") = ^ 2 + 6* + 9 ) = ^ ~ ^ 
(4.15) 
This function has a pole at the origin that comes from the unit step input and two 
multiple real poles that come from the system. The input pole at the origin generates 
the constant forced response, and the two poles on the real axis at —3 generate a 
natural response consisting of an exponential and an exponential multiplied by time, 
where the exponential frequency is equal to the location of the real poles. Hence, the 
output can be estimated as c(r) = K\ + Kze~3' + Kste~3'. This type of response, shown 
in Figure 4.7(e), is called critically damped. Critically damped responses are the fastest 
possible without the overshoot that is characteristic of the underdamped response. 

172 
Chapter 4 
Time Response 
We now summarize our observations. In this section we defined the following 
natural responses and found their characteristics: 
1. Overdamped responses 
Poles: Two real at -o\, 
-cr2 
Natural response: Two exponentials with time constants equal to the reciprocal of 
the pole locations, or 
c(t) = Kxe-"1' + K2e-°2t 
2. Underdamped responses 
Poles: Two complex at — a a ± jcoa 
Natural response: Damped sinusoid with an exponential envelope whose time 
constant is equal to the reciprocal of the pole's real part. The radian frequency of 
the sinusoid, the damped frequency of oscillation, is equal to the imaginary part 
of the poles, or 
c{t) = Ae~adt cos(codt - 0) 
3. Undamped responses 
Poles: Two imaginary at ±jco\ 
Natural response: Undamped sinusoid with radian frequency equal to the 
imaginary part of the poles, or 
c(t) ~ Acos(coit - <p) 
4. Critically damped responses 
Poles: Two real at — a\ 
Natural response: One term is an exponential whose time constant is equal to the 
reciprocal of the pole location. Another term is the product of time, t, and an 
exponential with time constant equal to the reciprocal of the pole location, or 
c(t) = Kie~a'1 + K2te-axt 
The step responses for the four cases of damping discussed in this section are 
superimposed in Figure 4.10. Notice that the critically damped case is the division 
FIGURE 4.10 Step responses for second-order system damping cases 

4.5 The General Second-Order System 
173 
between the overdamped cases and the underdamped cases and is the fastest 
response without overshoot. 
Skill-Assessment Exercise 4.3 
PROBLEM: For each of the following transfer functions, write, by inspection, the 
general form of the step response: 
a. G{s) = 
b. G(s) = 
c. G(s) = 
d. G(s) = 
400 
s2 + 12s + 400 
900 
s2 + 90s + 900 
225 
s2 + 305 + 225 
625 
J 2 + 625 
ANSWERS: 
a. c(t) = A + Be'61 cos(19.08* + ¢) 
b. c(t) = A + Be-18Mt + Ce-nMl 
c. c{t) =A+ Be'151 + Cte~l5t 
d. c(t) =A+Bcos(25r 
+ ¢) 
The complete solution is located at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
In the next section, we will formalize and generalize our discussion of second-
order responses and define two specifications used for the analysis and design of 
second-order systems. In Section 4.6, we will focus on the underdamped case and 
derive some specifications unique to this response that we will use later for analysis 
and design. 
^ 4.5 The General Second-Order System 
Now that we have become familiar with second-order systems and their responses, 
we generalize the discussion and establish quantitative specifications defined in such 
a way that the response of a second-order system can be described to a designer 
without the need for sketching the response. In this section, we define two physically 
meaningful specifications for second-order systems. These quantities can be used to 
describe the characteristics of the second-order transient response just as time 
constants describe the first-order system response. The two quantities are called 
natural frequency and damping ratio. Let us formally define them. 
Natural Frequency, con 
The natural frequency of a second-order system is the frequency of oscillation of the 
system without damping. For example, the frequency of oscillation of a series RLC 
circuit with the resistance shorted would be the natural frequency. 

Chapter 4 
Time Response 
Damping Ratio, £ 
Before we state our next definition, some explanation is in order. We have already seen 
that a second-order system's underdamped step response is characterized by damped 
oscillations. Our definition is derived from the need to quantitatively describe this 
damped oscillation regardless of the time scale. Thus, a system whose transient response 
goes through three cycles in a millisecond before reaching the steady state would have 
the same measure as a system that went through three cycles in a millennium before 
reaching the steady state. For example, the underdamped curve in Figure 4.10 has an 
associated measure that defines its shape. This measure remains the same even if we 
change the time base from seconds to microseconds or to millennia. 
A viable definition for this quantity is one that compares the exponential decay 
frequency of the envelope to the natural frequency. This ratio is constant regardless 
of the time scale of the response. Also, the reciprocal, which is proportional to the 
ratio of the natural period to the exponential time constant, remains the same 
regardless of the time base. 
We define the damping ratio, £, to be 
_ 
Exponential decay frequency 
1 
Natural period (seconds) 
Natural frequency (rad/second) 
27r Exponential time constant 
Let us now revise our description of the second-order system to reflect the new 
definitions. The general second-order system shown in Figure 4.7(a) can be trans-
formed to show the quantities £ and con. Consider the general system 
G(s)=^—- 
(4.16) 
w 
s2 + as + b 
v 
' 
Without damping, the poles would be on the /w-axis, and the response would be an 
undamped sinusoid. For the poles to be purely imaginary, a = 0. Hence, 
By definition, the natural frequency, con, is the frequency of oscillation of this system. 
Since the poles of this system are on the jco-axis at ±jy/b, 
m„ = Vb 
(4.18) 
Hence, 
b = co\ 
(4-19) 
Now what is the term a in Eq. (4.16)? Assuming an underdamped system, the 
complex poles have a real part, o\ equal to -a/2. The magnitude of this value is then 
the exponential decay frequency described in Section 4.4. Hence, 
_ 
Exponential decay frequency 
\cr\ _ a/2 
. 
. 
Natural frequency (rad/second) 
con 
con 
from which 
a = 2;con 
(4.21) 
Our general second-order transfer function finally looks like this: 
G(s) = 7 
™2" 
o 
(4.22) 
w 
s2 + 2t,a)ns + co2 

4.5 The General Second-Order System 
175 
In the following example we find numerical values for £ and con by matching the 
transfer function to Eq. (4.22). 
PROBLEM: 
SOLUTION: 
2$(o„ = 4.2 
Example 4.3 
Finding £ and m„ For a Second-Order System 
Given the transfer function of Eq. (4.23), find £ and a>n. 
Comparing 
Substituting 
CM 
36 
G ( j ) 
52+4.2. + 36 
Eq. (4.23) to (4.22), co2
n = 36, from which eon = 
the value of can, £ = 0.35. 
(4.23) 
= 6. Also, 
Now that we have defined t, and con, let us relate these quantities to the pole 
location. Solving for the poles of the transfer function in Eq. (4.22) yields 
si, 2 = -#fc ± c»n \ / £ 2 - l 
(4.24) 
From Eq. (4.24) we see that the various cases of second-order response are a function 
of £; they are summarized in Figure 4.11.4 
( 
Poles 
Step response 
o < ?< l 
C=i 
C> i 
/w 
M, 
5-plane 
jco 
5-plane 
-fan 
X 
-#-
-;«„ \/l-C 2 
yffl 
-£<»„ 
s-plane 
-fa„+6)n \]tp--\ 
\ 
-X 
X-
jm 
t 
5-plane 
Undcrdamped 
c(t) 
Critically damped 
FIGURE 4.11 
Second-order response as a function of damping ratio 
Overdamped 
*The student should verify Figure 4.11 as an exercise. 

176 
Chapter 4 
Time Response 
In the following example we find the numerical value of £ and determine the 
nature of the transient response. 
Example 4.4 
Characterizing Response from the Value of £ 
PROBLEM: For each of the systems shown in Figure 4.12, find the value of £ and 
report the kind of response expected. 
R(s) 
12 
s2+8s+12 
C(s) 
R(s) 
16 
s2+Ss+16 
C(s) 
(a) 
(b) 
R{s) 
20 
s2+Ss+20 
C(s) 
(c) 
FIGURE 4.12 Systems for Example 4.4 
SOLUTION: First match the form of these systems to the forms shown in Eqs. (4.16) 
and (4.22). Since a = 2t;a>n and con = y/b, 
< = 2sfb 
(4.25) 
Using the values of a and b from each of the systems of Figure 4.12, we find 
£ = 1.155 for system (a), which is thus overdamped, since f > 1; £ = 1 for system 
(6), which is thus critically damped; and £ = 0.894 for system (c), which is thus 
underdamped, since f < 1. 
Skill-Assessment Exercise 4.4 
PROBLEM: For each of the transfer functions in Skill-Assessment Exercise 4.3, do 
the following: (1) Find the values of £ and con; (2) characterize the nature of the 
response. 
ANSWERS: 
a. £ = 0.3, con = 20; system is underdamped 
b. % —1.5, mn = 30; system is overdamped 
c. < = 1, con = 15; system is critically damped 
d. £ = 0, con — 25; system is undamped 
The complete solution is located at www.wiley.com/college/nise. 

4.6 Underdamped Second-Order Systems 
177 
This section defined two specifications, or parameters, of second-order sys-
tems: natural frequency, con, and damping ratio, £. We saw that the nature of the 
response obtained was related to the value of £. Variations of damping ratio alone 
yield the complete range of overdamped, critically damped, underdamped, and 
undamped responses. 
^ 4.6 Underdamped Second-Order Systems 
Now that we have generalized the second-order transfer function in terms of £ and 
co„, let us analyze the step response of an underdamped second-order system. Not 
only will this response be found in terms of £ and con, but more specifications 
indigenous to the underdamped case will be defined. The underdamped second-
order system, a common model for physical problems, displays unique behavior that 
must be itemized; a detailed description of the underdamped response is necessary 
for both analysis and design. Our first objective is to define transient specifications 
associated with underdamped responses. Next we relate these specifications to the 
pole location, drawing an association between pole location and the form of the 
underdamped second-order response. Finally, we tie the pole location to system 
parameters, thus closing the loop: Desired response generates required system 
components. 
Let us begin by finding the step response for the general second-order system 
of Eq. (4.22). The transform of the response, C(s), is the transform of the input times 
the transfer function, or 
C(s) = _ _ ^ 
£, 
K# + K3 
s{s2 + 2ra)ns + col) 
s 
s + Z&nS + aft 
where it is assumed that £ < 1 (the underdamped case). Expanding by partial 
fractions, using the methods described in Section 2.2, Case 3, yields 
1 
(^ + ^ , , ) + - ^ 0 ^ 1 - ^ 
C(s) = 
f1^ 
(4.27) 
* 
(s + rconf +of(l 
-?) 
Taking the inverse Laplace transform, which is left as an exercise for the student, 
produces 
c(t) = 1 - e~^"1 ( cos eony/l - ft + 
. I 
.sin a>„ y/l-f 
= 1 - —L=e-^1 
cotfai/1-fr 
- ¢) 
%/1-t2 
(4.28) 
where 4> = tan-1 (£/\A - C2)-
A plot of this response appears in Figure 4.13 for various values of £, plotted 
along a time axis normalized to the natural frequency. We now see the relationship 
between the value of £ and the type of response obtained: The lower the value of £, 
the more oscillatory the response. The natural frequency is a time-axis scale factor 
and does not affect the nature of the response other than to scale it in time. 

Chapter 4 
Time Response 
0 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
FIGURE 4.13 Second-order underdamped responses for damping ratio values 
coj 
We have defined two parameters associated with second-order systems, £ and 
co„. Other parameters associated with the underdamped response are rise time, peak 
time, percent overshoot, and settling time. These specifications are defined as 
follows (see also Figure 4.14): 
1. Rise time, Tr. The time required for the waveform to go from 0.1 of the final value 
to 0.9 of the final value. 
2. Peak time, Tp. The time required to reach the first, or maximum, peak. 
3. Percent overshoot, %OS. The amount that the waveform overshoots the steady-
state, or final, value at the peak time, expressed as a percentage of the steady-state 
value. 
4. Settling time, Ts. The time required for the transient's damped oscillations to 
reach and stay within ±2% of the steady-state value. 
0- If final 
FIGURE 4.14 
Second-order underdamped response specifications 

4.6 Underdamped Second-Order Systems 
179 
Notice that the definitions for settling time and rise time are basically the same as the 
definitions for the first-order response. All definitions are also valid for systems of 
order higher than 2, although analytical expressions for these parameters cannot be 
found unless the response of the higher-order system can be approximated as a 
second-order system, which we do in Sections 4.7 and 4.8. 
Rise time, peak time, and settling time yield information about the speed of the 
transient response. This information can help a designer determine if the speed and 
the nature of the response do or do not degrade the performance of the system. For 
example, the speed of an entire computer system depends on the time it takes for a 
hard drive head to reach steady state and read data; passenger comfort depends in 
part on the suspension system of a car and the number of oscillations it goes through 
after hitting a bump. 
We now evaluate Tp, %OS, and Ts as functions of % and con. Later in this 
chapter we relate these specifications to the location of the system poles. A precise 
analytical expression for rise time cannot be obtained; thus, we present a plot and a 
table showing the relationship between £ and rise time. 
Evaluation of Tp 
Tp is found by differentiating c(t) in Eq. (4.28) and finding the first zero crossing 
after t — 0. This task is simplified by "differentiating" in the frequency domain 
by using Item 7 of Table 2.2. Assuming zero initial conditions and using Eq. (4.26), 
we get 
&[c{t)] = sC(s) = , 
™n 
r 
(4.29) 
Completing squares in the denominator, we have 
(On 
CO, M/I-? 
Therefore, 
&[c{i)] = 
P1 
r = 
VX - 7 
; 
(4-30) 
(, + ^ 
+ ^(1-^) 
(* + *%)* + aft(l-rt 
c{t) = 
^ ' 
e-^'sinojny/l 
- ?t 
(4.31) 
VW2 
Setting the derivative equal to zero yields 
con y/\ - ft = tin 
(4.32) 
or 
t=^==i 
(4-33) 
Each value of n yields the time for local maxima or minima. Letting n = 0 yields 
t = 0, the first point on the curve in Figure 4.14 that has zero slope. The first peak, 
which occurs at the peak time, Tp, is found by letting n = 1 in Eq. (4.33): 

180 
Chapter 4 
Time Response 
Evaluation of %0S 
From Figure 4.14 the percent overshoot, %OS, is given by 
%OS = Cmax~Cfinalxl00 
Cfinai 
(4.35) 
The term cmax is found by evaluating c(t) at the peak time, c{Tp). Using Eq. (4.34) for 
Tp and substituting into Eq. (4.28) yields 
cmax = c(Tp) = 1 - e-WV^i2) 
f cosn + 
K
 
2sin TT 
= i + r ( W \ / f ? ) 
For the unit step used for Eq. (4.28), 
CGnal = 
1 
Substituting Eqs. (4.36) and (4.37) into Eq. (4.35), we finally obtain 
%OS = e-wV*1?) 
x 100 
(4.36) 
(4.37) 
(4.38) 
Notice that the percent overshoot is a function only of the damping ratio, £. 
Whereas Eq. (4.38) allows one to find %OS given £, the inverse of the equation 
allows one to solve for £ given %OS. The inverse is given by 
C = 
-ln(% OS/100) 
SJTT2 + In2 (% O5/100) 
(4.39) 
The derivation of Eq. (4.39) is left as an exercise for the student. Equation (4.38) (or, 
equivalently, (4.39)) is plotted in Figure 4.15. 
0 
0.1 
0.2 
0.3 
0.4 
0.5 
0.6 
0.7 
0.8 
0.9 
Damping ratio, £ 
FIGURE 4.15 Percent overshoot versus damping ratio 

4.6 Underdamped Second-Order Systems 
Evaluation of T5 
In order to find the settling time, we must find the time for which c(l) in Eq. (4.28) 
reaches and stays within ±2% of the steady-state value, Cfjnai. Using our definition, 
the settling time is the time it takes for the amplitude of the decaying sinusoid in 
Eq. (4.28) to reach 0.02, or 
1 
" 
(4.40) 
,-^nl. 
x/W' 
= 0.02 
This equation is a conservative estimate, since we are assuming that cos 
[con >/l - t?t - ¢) = 1 at the settling time. Solving Eq. (4.40) for r, the settling time is 
7\ = -ln(0.02Vl - C2) 
$(*>n 
(4.41) 
You can verify that the numerator of Eq. (4.41) varies from 3.91 to 4.74 as £ varies 
from 0 to 0.9. Let us agree on an approximation for the settling time that will be used 
for all values of £; let it be 
(4.42) 
Evaluation of Tr 
A precise analytical relationship between rise time and damping ratio, £, cannot be 
found. However, using a computer and Eq. (4.28), the rise time can be found. We 
first designate co„t as the normalized time variable and select a value for £. Using the 
computer, we solve for the values of co„t that yield c(t) = 0.9 and c(t) = 0.1. 
Subtracting the two values of cont yields the normalized rise time, a>nTr, for that 
value of £. Continuing in like fashion with other values of £, we obtain the results 
plotted in Figure 4.16.5 Let us look at an example. 
3.0 
| 2.6 
1 2.4 
I
2-
2 
2 2.0 
x 
i i-8 
£ 1.6|-
1.4 h 
1.2 -
1.0 
Damping 
ratio 
0.1 
0.2 
0.3 
0.4 
0.5 
0.6 
0.7 
0.8 
0.9 
Normalized 
rise time 
1.104 
1.203 
1.321 
1.463 
1.638 
1.854 
2.126 
2.467 
2.883 
0.1 
0.2 
0.3 
0.4 
0.5 
0.6 
Damping ratio 
0.7 
0.8 
0.9 
FIGURE 4.16 Normalized rise 
time versus damping ratio for 
a second-order underdamped 
response 
5Figure 4.16 can be approximated by the following polynomials: conTr = 1.76¾3 - 0.417?2 +1.039?+ 1 
(maximum error less than |% for 0 < ? < 0.9), and f = 0.115(^,7,.)3 - 0.883(<onTr)2+ 2.504{conTr) -
1.738 (maximum error less than 5% for 0.1 < f < 0.9). The polynomials were obtained using MATLAB's 
polyfit function. 

Chapter 4 
Time Response 
Example 4.5 
Finding Tp, %0S, Ts, and Tr from a Transfer Function 
Virtual Experiment 4.2 
Second-Order 
System Response 
Put theory into practice studying 
the effect that natural frequency 
and damping ratio have on 
controlling the speed response 
of the Quanser Linear Servo in 
LabVIEW. This concept is ap-
plicable to automobile cruise 
controls or speed controls of 
subways or trucks. 
Virtual experiments are found 
on WileyPLUS. 
PROBLEM: Given the transfer function 
G(s) = 
100 
s2 + 15s + 100 
(4.43) 
find Tp, %OS, Ts, and Tr. 
SOLUTION: co„ and £ are calculated as 10 and 0.75, respectively. Now substitute 
£ and con into Eqs. (4.34), (4.38), and (4.42) and find, respectively, that 
Tp = 0.475 second, %OS = 2.838, and 7, = 0.533 second. Using the table 
in Figure 4.16, the normalized rise time is approximately 2.3 seconds. Dividing by con 
yields Tr = 0.23 second. This problem demonstrates that we can find Tp, %OS, Ts, 
and Tr without the tedious task of taking an inverse Laplace transform, plotting the 
output response, and taking measurements from the plot. 
.i") 
1 
^
^ 
1 
o \ 
-^0),,= 
-0,, 
*
-
- 
• 
s-plane 
- -jw„il- $2=-ja>a 
FIGURE 4.17 Pole plot for an underdamped 
second-order system 
We now have expressions that relate peak time, percent over-
shoot, and settling time to the natural frequency and the damping 
ratio. Now let us relate these quantities to the location of the poles 
that generate these characteristics. 
The pole plot for a general, underdamped second-order sys-
tem, previously shown in Figure 4.11, is reproduced and expanded in 
Figure 4.17 for focus. We see from the Pythagorean theorem that the 
radial distance from the origin to the pole is the natural frequency, 
con, and the cos 9 = ¢. 
Now, comparing Eqs. (4.34) and (4.42) with the pole location, 
we evaluate peak time and settling time in terms of the pole location. 
Thus, 
TP = 
n 
71 
CO nVl-? 
m 
(4.44) 
r, = $Un 
7X 
(4.45) 
where coa is the imaginary part of the pole and is called the damped frequency of 
oscillation, and ad is the magnitude of the real part of the pole and is the exponential 
damping frequency. 

4.6 Underdamped Second-Order Systems 
183 
%0S-> 
%OS\ 
i-plane 
FIGURE 4.18 
Lines of 
constant peak time, Tp, 
settling time, Ts, and percent 
overshoot, %OS. Note: 
TS2 < TSl; TP2 < Tpi; 
%OS\ < %OS2. 
Equation (4.44) shows that Tp is inversely proportional to the imaginary 
part of the pole. Since horizontal lines on the s-plane are lines of constant imagmary 
value, they are also lines of constant peak time. Similarly, Eq. (4.45) tells us that 
settling time is inversely proportional to the real part of the pole. Since vertical lines 
on the s-plane are lines of constant real value, they are also lines of constant settling 
time. Finally, since £ = cos 0, radial lines are lines of constant £. Since percent 
overshoot is only a function of £, radial lines are thus lines of constant percent 
overshoot, %OS. These concepts are depicted in Figure 4.18, where lines of constant 
Tp, Ts, and %OS are labeled on the s-plane. 
At this point, we can understand the significance of Figure 4.18 by examining 
the actual step response of comparative systems. Depicted in Figure 4.19(A) are the 
step responses as the poles are moved in a vertical direction, keeping the real part the 
same. As the poles move in a vertical direction, the frequency increases, but the 
envelope remains the same since the real part of the pole is not changing. The figure 
shows a constant exponential envelope, even though the sinusoidal response is 
changing frequency. Since all curves fit under the same exponential decay curve, the 
settling time is virtually the same for all waveforms. Note that as overshoot increases, 
the rise time decreases. 
Let us move the poles to the right or left. Since the imaginary part is now 
constant, movement of the poles yields the responses of Figure 4.19(b). Here the 
frequency is constant over the range of variation of the real part. As the poles move 
to the left, the response damps out more rapidly, while the frequency remains the 
same. Notice that the peak time is the same for all waveforms because the imaginary 
part remains the same. 
Moving the poles along a constant radial line yields the responses shown in 
Figure 4.19(c). Here the percent overshoot remains the same. Notice also that the 
responses look exactly alike, except for their speed. The farther the poles are from 
the origin, the more rapid the response. 
We conclude this section with some examples that demonstrate the relation-
ship between the pole location and the specifications of the second-order under-
damped response. The first example covers analysis. The second example is a simple 
design problem consisting of a physical system whose component values we want to 
design to meet a transient response specification. 

184 
Chapter 4 
Time Response 
c(t) 
Envelope the same 
FIGURE 4.19 Step responses 
of second-order underdamped systems 
as poles move: a. with constant real 
part; b. with constant imaginary part; 
c. with constant damping ratio 
>:2 
; ; i 
JO 
x i 
):2 
):3 
5-plane 
Pole 
motion 
2 
1 
-X—X 
JO) 
-x—x 
2 
1 
.s-plane 
Pole 
motion 
V 
i-plane 
Pole 
motion 
Example 4.6 
Finding Tp, %0S, and T5 from Pole Location 
-/7 = -jo)d 
FIGURE 4.20 Pole plot for Example 4.6 
PROBLEM: Given the pole plot shown in Figure 4.20, find £, con, Tp, 
%OS, and Ts. 
SOLUTION: The damping ratio is given by £ = cos# = cos[arctan 
(7/3)] = 0.394. The natural frequency, to,,, is the radial distance 
from the origin to the pole, or con = y 72 + 32 = 7.616. The peak 
time is 
(4.46) 
TD = — = - = 0.449 second 
cod 
7 
The percent overshoot is 
%OS = e-^/v 7! 3?) x 100 = 26% 
The approximate settling time is 
4 
4 
Ts = — = x = 1.333 seconds 
Od 
3 
(4.47) 
(4.48) 

4.6 Underdamped Second-Order Systems 
185 
Students who are using MATLAB should now run ch4pl in Appendix B . 
You will learn how to generate a second-order polynomial from 
two complex poles as well as extract and use the coefficients of 
the polynomial to calculate Tp, %0S, and Ts. This exercise uses 
MATLAB to solve the problem in Example 4 . 6 . 
MATLAB 
Example 4.7 
Transient Response Through Component Design 
PROBLEM: Given the system shown in Figure 4.21, find J and D to yield 20% 
overshoot and a settling time of 2 seconds for a step input of torque T(t). 
T(t) 
0(t) 
-OM^-£VQ 
J 
K = 5N-m/ra6 
D 
FIGURE 4.21 
Rotational mechanical system for Example 4.7 
SOLUTION: First, the transfer function for the system is 
From the transfer function, 
and 
But, from the problem statement, 
J_ 
G(s) 
s2 
co„ = 
2$Q)n 
1// 
D 
+ 7S + 
s 
D 
~7 
K 
J 
Ts = 2 = fan 
or i;con — 2. Hence, 
2^a)n = 4 = -
Also, from Eqs. (4.50) and (4.52), 
^i = 2vl 
(4.49) 
(4.50) 
(4.51) 
(4.52) 
(4.53) 
(4.54) 
From Eq. (4.39), a 20% overshoot implies % = 0.456. Therefore, from Eq. (4.54), 
7~ 
%=
2y^=°-
456 
(4.55) 

1 8 6 
Chapter 4 
Time Response 
Hence, 
Uom 
(4.56) 
From the problem statement, K = 5 N-m/rad. Combining this value with Eqs. 
(4.53) and (4.56), D = 1.04 N-m-s/rad, and J = 0.26 kg-m2. 
Second-Order Transfer Functions via Testing 
Just as we obtained the transfer function of a first-order system experimentally, we 
can do the same for a system that exhibits a typical underdamped second-order 
response. Again, we can measure the laboratory response curve for percent over-
shoot and settling time, from which we can find the poles and hence the denomina-
tor. The numerator can be found, as in the first-order system, from a knowledge of 
the measured and expected steady-state values. A problem at the end of the chapter 
illustrates the estimation of a second-order transfer function from the step response. 
Trylt 4.1 
Use the following MATLAB 
statements to calculate the 
answers to Skill-Assessment 
Exercise 4.5. Ellipses mean 
code continues on next line. 
numg=361; 
deng=(l 16 361]; 
omegan=sqrt(deng(3)... 
/deng(l)) 
zeta=(deng(2)/deng(l)) . . . 
/<2*omegan) 
Ts=4/(zeta* omegan) 
Tp=pi/(omegan*sqrt... 
(l-zeta"2)) 
pos=100* exp (-zeta* . . . 
p i / s q r t (l-zeta A2)) 
Tr=(1.768*zeta A3 
0.417*zeta A2 + 1 . 0 3 9 * . . 
zeta + 1) /omegan 
Skill-Assessment Exercise 4.5 
wileyPLUs 
PROBLEM: Find £, con, Ts, Tp, Tr, and %OS for a system whose 
CEEJ 
, - 
. • ^, x 
' 36i 
Control Solutions 
t r a n s f e r f u n c t l ° n l S G(*) 
= ^ + 16s + 
36f 
ANSWERS: 
t = 0.421, con = 19, Ts = 0.5 s, Tp = 0.182 s, Tr = 0.079 s, and %OS = 23.3%. 
The complete solution is located at www.wiley.com/college/nise. 
Now that we have analyzed systems with two poles, how does the addition of 
another pole affect the response? We answer this question in the next section. 
| 
4.7 System Response with Additional Poles 
In the last section, we analyzed systems with one or two poles. It must be emphasized 
that the formulas describing percent overshoot, settling time, and peak time were 
derived only for a system with two complex poles and no zeros. If a system such as 
that shown in Figure 4.22 has more than two poles or has zeros, we cannot use the 
formulas to calculate the performance specifications that we derived. However, 
under certain conditions, a system with more than two poles or with zeros can be 

4.7 System Response with Additional Poles 
187 
FIGURE 4.22 Robot follows 
input commands from a 
human trainer 
approximated as a second-order system that has just two complex dominant poles, 
Once we justify this approximation, the formulas for percent overshoot, settling 
time, and peak time can be applied to these higher-order systems by using the 
location of the dominant poles. In this section, we investigate the effect of an 
additional pole on the second-order response. In the next section, we analyze the 
effect of adding a zero to a two-pole system. 
Let us now look at the conditions that would have to exist in order to 
approximate the behavior of a three-pole system as that of a two-pole system. 
Consider a three-pole system with complex poles and a third pole on the real axis. 
Assuming that the complex poles are at — £&>„ ±j(ony/l 
— £2 and the real pole is at 
-ar, the step response of the system can be determined from a partial-fraction 
expansion. Thus, the output transform is 
A | B(s + Sa>n) + Ccod | 
D 
s 
(s + S(Dn)2 + a>l 
or, in the time domain, 
s + ar 
c(t) = Au(t) + e~K<°n'(B cos codt + C sin codt) + De 
-art 
(4.57) 
(4.58) 
The component parts of c(t) are shown in Figure 4.23 for three cases of ar. For 
Case I, ar = an and is not much larger than £o)„; for Case II, ar = an and is much 
larger than t;con; and for Case III, ar = oo. 
Let us direct our attention to Eq. (4.58) and Figure 4.23. If ar > t,a>n (Case II), the 
pure exponential will die out much more rapidly than the second-order underdamped 
step response. If the pure exponential term decays to an insignificant value at the time of 
the first overshoot, such parameters as percent overshoot, settling time, and peak time 
will be generated by the second-order underdamped step response component. Thus, 
the total response will approach that of a pure second-order system (Case III). 

188 
Chapter 4 
Time Response 
JO) 
Jo) 
Pi 
• 
X 
/>3 
X 
Pi 
Case I 
i-plane 
Pi 
-a. 
r2 
Pi 
X 
X 
Pi 
Case II 
(a) 
s-plane 
J 
Pi 
X 
X 
Pi 
03 
i-plane 
Case III 
FIGURE 4.23 Component 
responses of a three-pole 
system: a. pole plot; 
b. component responses: 
Nondominant pole 
is near dominant second-order 
pair (Case I), far from the pair 
(Case II), and at infinity 
(Case III) 
/u. 
10^ 
r Case I 
^ C a s e l 
Au(t) + e~&l(B cos COdt + C sin COdt) 
De'V 
*- Time 
(b) 
If ar is not much greater than £m„ (Case I), the real pole's transient response 
will not decay to insignificance at the peak time or settling time generated by the 
second-order pair. In this case, the exponential decay is significant, and the system 
cannot be represented as a second-order system. 
The next question is, How much farther from the dominant poles does the third 
pole have to be for its effect on the second-order response to be negligible? The 
answer of course depends on the accuracy for which you are looking. However, this 
book assumes that the exponential decay is negligible after five time constants. Thus, 
if the real pole is five times farther to the left than the dominant poles, we assume 
that the system is represented by its dominant second-order pair of poles. 
What about the magnitude of the exponential decay? Can it be so large that its 
contribution at the peak time is not negligible? We can show, through a partial-
fraction expansion, that the residue of the third pole, in a three-pole system with 
dominant second-order poles and no zeros, will actually decrease in magnitude as 
the third pole is moved farther into the left half-plane. Assume a step response, C(s), 
of a three-pole system: 
bc 
A 
Bs + C 
D 
f.eriS 
C(s) = ~To 
TT7 
s = - + -i 
Z + 
(4-59) 
w 
s(s2 + as + b)(s + c) 
s 
s2 + as + b 
s + c 
where we assume that the nondominant pole is located at - c on the real axis and that 
the steady-state response approaches unity. Evaluating the constants in the numer-
ator of each term, 
.4 = 1; 
B = 
ca - cr 
c2 + b - ca 
(4.60a) 
_ca2 — (P-a — be 
_ 
—b 
c2 + b — ca 
c2 + b - ca 
(4.60b) 

4.7 System Response with Additional Poles 
189 
As the nondominant pole approaches oo, ore -» oo, 
A = \\B = -l\ C=-a- 
D = 0 
(4.61) 
Thus, for this example, D, the residue of the nondominant pole and its response, 
becomes zero as the nondominant pole approaches infinity. 
The designer can also choose to forgo extensive residue analysis, since all 
system designs should be simulated to determine final acceptance. In this case, the 
control systems engineer can use the "five times" rule of thumb as a necessary but 
not sufficient condition to increase the confidence in the second-order approxima-
tion during design, but then simulate the completed design. 
Let us look at an example that compares the responses of two different three-
pole systems with that of a second-order system. 
Example 4.8 
Comparing Responses of Three-Pole Systems 
PROBLEM: Find the step response of each of the transfer functions shown in 
Eqs. (4.62) through (4.64) and compare them. 
riW=*3 , f 5 4 L , , 
(4-62) 
s2 + 45 + 24.542 
245.42 
(5 + 10)(52 + 4s + 24.542) 
73.626 
(5 + 3)(*2+4*+ 24.542) 
(4.63) 
(4.64) 
SOLUTION: The step response, Cj(s), for the transfer function, Tj(s), can be found 
by multiplying the transfer function by I/5, a step input, and using partial-fraction 
expansion followed by the inverse Laplace transform to find the response, c,-(f). 
With the details left as an exercise for the student, the results are 
d (?) = 1 - i.09e-^eos(4.532« - 23.8°) 
(4.65) 
c2(t) = 1 - 0.29<T10' - 1.189e^cos(4.532r - 53.34°) 
(4.66) 
c3(/) = 1 - 1.14c-3' + 0.707<r2'cos(4.532f + 78.63°) 
(4.67) 
The three responses are plotted in Figure 4.24. Notice that ci(t), with its third pole 
at —10 and farthest from the dominant poles, is the better approximation of c\ (t), 
1.0 
1.5 
2.0 
Time (seconds) 
FIGURE4.24 Step responses 
of system ^1(5), system 7/2(5), 
and system 7/3(5) 

1 9 0 
Chapter 4 
Time Response 
MATLAB 
Simulink 
Gui Tool 
the pure second-order system response; c3(r), with a third pole close to the 
dominant poles, yields the most error. 
Students who are using MATLAB should now run ch4p2 in Appendix B. 
You will learn how to generate a step response for a transfer 
function and how to plot the response directly or collect the 
points for future use. The example shows how to collect the points 
and then use them to create a multiple plot, title the graph, and 
label theaxesandcurvestoproducethegraphinFigure4 . 24 tosolve 
Example 4 . 8 . 
System responses can alternately be obtained using Simulink. 
Simulink is a software package that is integrated with MATLAB 
to provide a graphical user interface (GUI) for defining systems 
and generating responses. The reader is encouraged to study 
Appendix C, which contains a tutorial on Simulink as well as 
some examples. One of the illustrative examples, Example C.l, 
solves Example 4.8 using Simulink. 
Another method to obtain systems responses is through the use of 
MATLAB's LTI Viewer. An advantage of the LTI Viewer is that it 
displaysthevaluesof settlingtime, peaktime, risetime, maximum 
response, andthefinalvalueon thestepresponseplot. Thereaderis 
encouraged to study Appendix E at www.wiley.com/college/nise, 
whichcontainsatutorialontheLTIVieweraswellas someexamples . 
Example E. 1 solves Example 4 . 8 using the LTI Viewer. 
Ttylt4.2 
Use the following MATLAB 
and Control System Toolbox 
statements to investigate the 
effect of the additional pole 
in Skill-Assessment Exer-
cise 4.6(a). Move the higher-
order pole originally at —15 
to other values by changing 
"a" in the code. 
a=15 
numga=100*a; 
denga=conv([l a], . . . 
[1 4 100]); 
Ta=tf (numga, denga); 
numg=100; 
deng=(l 4 100]; 
T=tf (numg,deng); 
s t e p ( T a , ' . ' , T , ' - ' ) 
Skill-Assessment Exercise 4.6 
PROBLEM: Determine the validity of a second-order approximation for each of 
these two transfer functions: 
a. G(s) = 
b. G(s) = 
700 
(5 + 15)(52 + 45 +100) 
360 
(5 + 4)(52 + 2s + 90) 
ANSWERS: 
a. The second-order approximation is valid. 
b. The second-order approximation is not valid. 
The complete solution is located at www.wiley.com/college/nise. 

4.8 
System Response With Zeros 
191 
( 4.8 System Response With Zeros 
Now that we have seen the effect of an additional pole, let us add a zero to the 
second-order system. In Section 4.2, we saw that the zeros of a response affect 
the residue, or amplitude, of a response component but do not affect the nature of 
the response—exponential, damped sinusoid, and so on. In this section, we add a 
real-axis zero to a two-pole system. The zero will be added first in the left half-plane 
and then in the right half-plane and its effects noted and analyzed. We conclude the 
section by talking about pole-zero cancellation. 
Starting with a two-pole system with poles at (-1 ±j2.828), we consecutively 
add zeros at - 3 , -5, and —10. The results, normalized to the steady-state value, are 
plotted in Figure 4.25. We can see that the closer the zero is to the dominant poles, 
the greater its effect on the transient response. As the zero moves away from the 
dominant poles, the response approaches that of the two-pole system. This analysis 
can be reasoned via the partial-fraction expansion. If we assume a group of poles and 
a zero far from the poles, the residue of each pole will be affected the same by the 
zero. Hence, the relative amplitudes remain appreciably the same. For example, 
assume the partial-fraction expansion shown in Eq. (4.68): 
T(s) = 
A 
B 
+ 
(s + b){s + c) 
s + b s + c 
(-b + a)/(-b + c) 
-c + a)/{-c + b) 
s+b 
s + c 
If the zero is far from the poles, then a is large compared to b and c, and 
a 
(4.68) 
T(s) 
l/(-b + c) + l/(-c + b) 
s + b 
s + c 
[s + b)(s + c) 
(4.69) 
Hence, the zero looks like a simple gain factor and does not change the relative 
amplitudes of the components of the response. 
Another way to look at the effect of a zero, which is more general, is as follows 
(Franklin, 1991): Let C(s) be the response of a system, T(s), with unity in the 
Trylt 4.3 
Use the following MATLAB 
and Control System Toolbox 
statements to generate Figure 
4.25. 
deng=[l 2 9]; 
Ta=tf ([1 3 ] * 9 / 3 , d e n g ) ; 
Tb=tf([l 5] * 9 / 5 , d e n g ) ; 
Tc=tf ([1 10] * 9/10, deng); 
T=tf (9,deng); 
s t e p ( T , T a , T b , Tc) 
t e x t ( 0 . 5 , 0.6, 'no zero') 
t e x t ( 0 . 4 , 0 . 7 , . . . 
'zero a t -10') 
t e x t ( 0 . 3 5 , 0 . 8 , . . . 
'zero a t -5') 
t e x t (0.3,0.9,'zero a t -3') 
2.0 
4.0 
Time (seconds) 
FIGURE 4.25 
Effect of adding 
a zero to a two-pole system 

192 
Chapter 4 
Time Response 
FIGURE 4.26 
Step response of a 
_o.5 
nonminimum-phase system 
2.0 
3.0 
4.0 
5.0 
Time (seconds) 
6.0 
numerator. If we add a zero to the transfer function, yielding (s + a) T(s), the Laplace 
transform of the response will be 
(s + a)C(s) = sC(s) + aC{s) 
(4.70) 
Thus, the response of a system with a zero consists of two parts: the derivative of the 
original response and a scaled version of the original response. If a, the negative of 
the zero, is very large, the Laplace transform of the response is approximately aC(s), 
or a scaled version of the original response. If a is not very large, the response has an 
additional component consisting of the derivative of the original response. As a 
becomes smaller, the derivative term contributes more to the response and has 
a greater effect. For step responses, the derivative is typically positive at the start of a 
step response. Thus, for small values of a, we can expect more overshoot in second-
order systems because the derivative term will be additive around the first over-
shoot. This reasoning is borne out by Figure 4.25. 
An interesting phenomenon occurs if a is negative, placing the zero in the right 
half-plane. From Eq. (4.70) we see that the derivative term, which is typically 
positive initially, will be of opposite sign from the scaled response term. Thus, if the 
derivative term, sCXs), is larger than the scaled response, aC(s), the response will 
initially follow the derivative in the opposite direction from the scaled response. The 
result for a second-order system is shown in Figure 4.26, where the sign of the input 
was reversed to yield a positive steady-state value. Notice that the response begins to 
turn toward the negative direction even though the final value is positive. A system 
that exhibits this phenomenon is known as a nonminimum-phase system. If a 
motorcycle or airplane was a nonminimum-phase system, it would initially veer 
left when commanded to steer right. 
Let us now look at an example of an electrical nonminimum-phase network. 
Example 4.9 
Transfer Function of a Nonminimum-Phase System 
PROBLEM: 
a. Find the transfer function, V0(s)/Vi(s) for the operational amplifier circuit 
shown in Figure 4.27. 

4.8 System Response With Zeros 
193 
b. If i?i = R2, this circuit is known as an all-pass filter, since it 
passes sine waves of a wide range of frequencies without 
attenuating or amplifying their magnitude (Dorf, 1993). 
We will learn more about frequency response in Chap-
ter 10. For now, let Rx = R2) R3C = 1/10, and find the step 
response of the filter. Show that component parts of the 
response can be identified with those in Eq. (4.70). 
SOLUTION: 
FIGURE 4.27 Nonminimum-phase electric circuit 
a. Remembering from Chapter 2 that the operational ampli- 
(Reprinted with permission of John Wiley & 
fier has a high input impedance, the current, I(s), through 
S o n s' inc-> 
i?i and R2, is the same and is equal to 
Also, 
But 
^=¾^ 
V0(s)^A(V2(s)-V1(s)) 
Vi(s)=lWMi + Va® 
(4.71) 
(4.72) 
(4.73) 
Substituting Eq. (4.71) into (4.73), 
Vi(s) = R1+M2 (RiVi(s)+R2V0(s)) 
Using voltage division, 
V2(s) = Vi{S). 1/Cs 
R^h 
(4.74) 
(4.75) 
Substituting Eqs. (4.74) and (4.75) into Eq. (4.72) and simplifying yields 
V0(s) 
A(R2-RxR3Cs) 
V,{s) 
(MsCs + t m . +lfe(l+ii)) 
(4.76) 
Since the operational amplifier has a large gain, A, let A approach infinity. 
Thus, after simplification 
V0(s) 
R2 - R1R3CS 
Ri Vs " 
R^c) 
R3C 
Vi(s) 
R2R3Cs + R2 
R2 / 
, 1 
b. Letting jRj = R2 and R3C = 1/10, 
Vo(s) 
R3CJ 
(s - 10) 
Vi(s) 
s + R3C 
(s + 10) 
(4.77) 
(4.78) 

Chapter 4 
Time Response 
For a step input, we evaluate the response as suggested by Eq. (4.70): 
5-10) 
1 
_ 
1 
C(s) = -
where 
4?+ 10) 
s + 10 ' 10 s(s + 10) 
C0(s) = - 
l 
= sC0(s) - 10Co{s) (4.79) 
(4.80) 
s{s + 10) 
is the Laplace transform of the response without a zero. Expanding 
Eq. (4.79) into partial fractions, 
1 
1_ 
_\_ 
1 
1_ _ 1 
2_ 
W 
5+10 
5(5 + 10)" _ 5 + 10 + 5~5 + 1 0 _ 5 ~ 5 + 10 
(4.81) 
or the response with a zero is 
c(r) = -e-10' + 1 - <T10' = 1 - 2e~m 
Also, from Eq. (4.80), 
or the response without a zero is 
(4.82) 
(4.83) 
(4.84) 
The normalized responses are plotted in Figure 4.28. Notice the immediate 
reversal of the nonminimum-phase response, c(t). 
-0.5 
0.2 
0.3 
Time (seconds) 
0.4 
0.5 
FIGURE 4.28 Step response of the nonminimum-phase network of Figure 4.27 (c(t)) and 
normalized step response of an equivalent network without the zero (—l0co(t)) 
We conclude this section by talking about pole-zero cancellation and its effect 
on our ability to make second-order approximations to a system. Assume a three-
pole system with a zero as shown in Eq. (4.85). If the pole term, (5 + p3), and the zero 
term, (5 + z), cancel out, we are left with 
T(s) = 
Kl?<z) 
i^rp^) (s2 + as + b) 
(4.85) 

4.8 
System Response With Zeros 
1 9 5 
as a second-order transfer function. From another perspective, if the zero at — z is 
very close to the pole at —/?3, then a partial-fraction expansion of Eq. (4.85) will show 
that the residue of the exponential decay is much smaller than the amplitude of the 
second-order response. Let us look at an example. 
Example 4.10 
Evaluating Pole-Zero Cancellation Using Residues 
PROBLEM: For each of the response functions in Eqs. (4.86) and (4.87), determine 
whether there is cancellation between the zero and the pole closest to the zero. For 
any function for which pole-zero cancellation is valid, find the approximate response. 
Ci(s) = 
26.25(^ + 4) 
C2(s) = 
5(5 + 3.5)(5 + 5)(5 + 6) 
26.25(5 + 4) 
5(5 + 4.01)(5 + 5)(5 + 6) 
SOLUTION: The partial-fraction expansion of Eq. (4.86) is 
3.5 
1 
5 + 6 
5 + 3.5 
r t \ 
1 
3-5 
Cl{s) = S-iT5 
(4.86) 
(4.87) 
(4.88) 
The residue of the pole at -3.5, whichis closest to the zero at - 4 , is equal to 1 andis not 
negligible compared to the other residues. Thus, a second-order step response 
approximation cannot be made for C\ (5). The partial-fraction expansion for C2(s) is 
C2(s) = 0.87 
5.3 
4.4 
+ 
5 
5 + 6 
0.033 
+ 4.01 
(4.89) 
The residue of the pole at -4.01, which is closest to the zero at —4, is equal to 0.033, 
about two orders of magnitude below any of the other residues. Hence, we make a 
second-order approximation by neglecting the response generated by the pole at -4.01: 
Ci{s) 
0.87 
5 
5.3 
4.4 
+ 
5 + 5 
5 + 6 
and the response C2{t) is approximately 
c2(t) ^ 0.87 - 5.3e--5/ + 4.4«T6' 
(4.90) 
(4.91) 
Itylt 4.4 
Use the following MATLAB 
and Symbolic Math Toolbox 
statements to evaluate the ef-
fect of higher-order poles by 
finding the component parts of 
the time response of ci(t) and 
Cz(t) in Example 4.10. 
syms s 
Cl=26.25*<s+4)/. . . 
(s*(s + 3.5)*... 
(s+5)*(s+6)); 
C2=26.25*(s+4)/. . . 
(s*(s+4.0D*. . . 
(s+5)'(s + 6)); 
c l = i l a p l a c e ( C l ) ; 
c l = v p a ( c l , 3); 
' e i 
pretty (cl) 
c2=ilaplace(C2); 
c2=vpa (c2, 3); 
'c2' 
pretty (c2); 
Skill-Assessment Exercise 4.7 
PROBLEM: 
Determine the validity of a second-order step-response approxima-
tion for each transfer function shown below. 
185.71(5 + 7) 
a. G{s) = 
b. G(s) 
(5 + 6.5)(5 + 10)(5 + 20) 
197.14(5 + 7) 
(5 + 6.9)(5 + 10)(5 + 20) 
WileyPLUS 
Control Solutions 

Chapter 4 
Time Response 
ANSWERS: 
a. A second-order approximation is not valid. 
b. A second-order approximation is valid. 
The complete solution is located at www.wiley.com/college/nise. 
In this section, we have examined the effects of additional transfer func-
tion poles and zeros upon the response. In the next section we add nonlinearities of 
the type discussed in Section 2.10 and see what effects they have on system response. 
^ 4 . 9 
Effects of Nonlinearities Upon Time Response 
In this section, we qualitatively examine the effects of nonhnearities upon the time 
response of physical systems. In the following examples, we insert nonlinearities, 
such as saturation, dead zone, and backlash, as shown in Figure 2.46, into a system to 
show the effects of these nonlinearities upon the linear responses. 
The responses were obtained using Simulink, a simulation software package 
that is integrated with MATLAB to provide a graphical user interface (GUI). 
Readers who would like to learn how to use Simulink to generate nonlinear 
responses should consult the Simulink tutorial in Appendix C. Simulink block 
diagrams are included with all responses that follow. 
Let us assume the motor and load from the Antenna Control Case Study of 
Chapter 2 and look at the load angular velocity, co0(s), where co0(s) = 0.1 sdm(s) = 
0.2083 Ea(s)/(s + 1.71) from Eq. (2.208). If we drive the motor with a step input 
i 
I 
1 
i 
i 
i 
Without saturation i 
| 
I 
! 
; 
] 
: 
j 
| 
i 
: 
: 
i 
i 
! 
i 
i 
: 
! 
I 
| 
i 
i 
With saturation 
i : : 
0 
2 
4 
6 
8 
10 
Time (seconds) 
(a) 
FIGURE 4.29 
a. Effect of amplifier saturation on load angular velocity response; 
(figure continues) 

4.9 Effects of Nonlinearities Upon Time Response 
197 
Step 
10 volts 
-^ 
/ -
Saturation 
±5 volts 
0.2083 
s + 1.71 
Motor, load, 
& gears 
0.2083 
s+1.71 
{ \1 
Mux 
Sc°Pe 
00 
Motor, load, 
& gears 
FIGURE 4.29 
(Continued) b. Simulink block diagram 
through an amplifier of unity gain that saturates at ±5 volts, Figure 4.29 shows that 
the effect of amplifier saturation is to limit the obtained velocity. 
The effect of dead zone on the output shaft driven by a motor and gears is 
shown in Figure 4.30. Here we once again assume the motor, load, and gears from 
Antenna Control Case Study of Chapter 2. Dead zone is present when the motor 
cannot respond to small voltages. The motor input is a sinusoidal waveform chosen 
to allow us to see the effects of dead zone vividly. The response begins when the input 
voltage to the motor exceeds a threshold. We notice a lower amplitude when dead 
zone is present. 
The effect of backlash on the output shaft driven by a motor and gears is shown 
in Figure 4.31. Again we assume the motor, load, and gears from the Antenna 
Control Case Study of Chapter 2. The motor input is again a sinusoidal waveform, 
5 
10 
15 
20 
25 
Time (seconds) 
(a) 
FIGURE 4.30 
a. Effect of dead zone on load angular displacement response; (figure continues) 

Chapter 4 
Time Response 
^ 
\J 
Sine wave 
Frequency = 1 rad/s 
/ 
/ 
0.2083 
s+1.71 
Dead zone 
M o t o r 
l o a d 
-2 to +1 
& gears 
0.2083 
s+1.71 
1 
s 
Integrator 
1 
s 
—1— 
J 1 
Mux 
1 1 
Scope 
Motor, load, 
& gears 
Integrator 
FIGURE 4.30 
(Continued) 
b. Simulink block diagram 
0.25 
0.2 
1 0.15 
0.1 
0.05 
Without backlash j 
IT t 
With backlash j 
1 
/ 
1 
\\m\l\\ 
t v 
r~r~'i 
V"V pt 
v~x~ ft 
T T 
T 
10 
15 
Time (seconds) 
(a) 
20 
25 
rv 
Sine wave 
Amplitude = 5 
Frequency = 1 rad/s 
0.2083 
s+ 1.71 
# 
Motor, load. 
Integrator 
Backlash 
and gears 
deadband width 
0.15 
0.2083 
s+1.71 
Motor, load, 
and gears 
Integrator 
Mux 
Scope 
FIGURE 4.31 
a. Effect of backlash on load angular displacement response; b. Simulink block 
diagram 

4.10 Laplace Transform Solution of State Equations 
199 
which is chosen to allow us to see vividly the effects of backlash in the gears driven by 
the motor. As the motor reverses direction, the output shaft remains stationary while 
the motor begins to reverse. When the gears finally connect, the output shaft itself 
begins to turn in the reverse direction. The resulting response is quite different from 
the linear response without backlash. 
Skill-Assessment Exercise 4.8 
PROBLEM: Use MATLAB's Simulink to reproduce Figure 4 . 31. 
ANSWER: See Figure 4.31. 
Simulink 
Now that we have seen the effects of nonlinearities on the time response, let us 
return to linear systems. Our coverage so far for linear systems has dealt with finding 
the time response by using the Laplace transform in the frequency domain. Another 
way to solve for the response is to use state-space techniques in the time domain. 
This topic is the subject of the next two sections. 
t 
4.10 Laplace Transform Solution 
of State Equations 
In Chapter 3, systems were modeled in state space, where the state-space represen-
tation consisted of a state equation and an output equation. In this section, we use 
the Laplace transform to solve the state equations for the state and output vectors. 
Consider the state equation 
x = Ax + Bu 
(4.92) 
and the output equation 
y = Cx + Du 
(4.93) 
Taking the Laplace transform of both sides of the state equation yields 
sX(s) - x(0) = AX(s) + BU(s) 
(4.94) 
In order to separate X(s), replace sX(s) with sIX(s), where I is an n x n 
identity matrix, and n is the order of the system. Combining all of the X(.s') terms, 
we get 
(si - A)X(s) = x(0) + BU(s) 
(4.95) 
Solving for X(s) by premultiplying both sides of Eq. (4.95) by (si — A) \ the final 
solution for X(s) is 
State Space 
X(s) = (si - A)_1x(0) + (si - A)~1BV(s) 
adj(sI-A) 
det(sl - A) [x(0)+BU(s)] 
(4.96) 

200 
Chapter 4 
Time Response 
Taking the Laplace transform of the output equation yields 
Y(s) = CX(s) + DU{s) 
(4.97) 
Eigenvalues and Transfer Function Poles 
We saw that the poles of the transfer function determine the nature of the transient 
response of the system. Is there an equivalent quantity in the state-space represen-
tation that yields the same information? Section 5.8 formally defines the roots of 
det(sl - A) = 0 (see the denominator of Eq. (4.96)) to be eigenvalues of the system 
matrix, A.6 Let us show that the eigenvalues are equal to the poles of the system's 
transfer function. Let the output, Y(s), and the input, U(s), be scalar quantities Y(s) 
and U(s), respectively. Further, to conform to the definition of a transfer function, let 
x(0), the initial state vector, equal 0, the null vector. Substituting Eq. (4.96) into 
Eq. (4.97) and solving for the transfer function, Y(s)/U(s), yields 
Y{s) = 
radj(sI-A) 
U(s) 
det(sl - A) J B + D 
C adjfrl - A)B + D detfrl - A) 
det(sl - A) 
(4.98) 
The roots of the denominator of Eq. (4.98) are the poles of the system. Since the 
denominators of Eqs. (4.96) and (4.98) are identical, the system poles equal the 
eigenvalues. Hence, if a system is represented in state-space, we can find the poles 
from det(sl - A) = 0. We will be more formal about these facts when we discuss 
stability in Chapter 6. 
The following example demonstrates solving the state equations using the 
Laplace transform as well as finding the eigenvalues and system poles. 
Example 4.11 
Laplace Transform Solution; Eigenvalues and Poles 
PROBLEM: Given the system represented in state space by Eqs. (4.99), 
X = 
y = [ 
)) = 
0 
0 
-24 
1 1 
'1* 
0 
2 
1 
0 
-26 
0]x 
0 
1 
-9 
x + 
0 
0 
1 
(4.99a) 
(4.99b) 
(4.99c) 
6 Sometimes the symbol X is used in place of the complex variable s when solving the state equations 
without using the Laplace transform. Thus, it is common to see the characteristic equation also written as 
det (XI - A) = 0. 

4.10 Laplace Transform Solution of State Equations 
do the following: 
a. Solve the preceding state equation and obtain the output for the given 
exponential input. 
b. Find the eigenvalues and the system poles. 
SOLUTION: 
a. We will solve the problem by finding the component parts of Eq. (4.96), 
followed by substitution into Eq. (4.97). First obtain A and B by comparing 
Eq. (4.99a) to Eq. (4.92). Since 
then 
and 
(si-A) 
-i 
sl = 
(sl-\) 
= 
s 0 
0 s 
0 0 
r s 
0 
24 
\{s2 + 9s + 26) 
-24 
-24s 
5 3 -
0 
0 
s 
-1 
0 
s 
-1 
26 5 + 9 
(5 + 9) 
r 
s2 + 9s 
s 
-(26^ + 24) s2_ 
H 9s2+ 26. - + 24 
(4.100) 
(4.101) 
(4.102) 
Since U(s) (the Laplace transform for e ') is 1/(5 + 1), X(s) can be calculated. 
Rewriting Eq. (4.96) as 
X(5) = (5l - A)"1 [x(0) + BU(5)] 
(4.103) 
and using B and x(0) from Eqs. (4.99a) and (4.99c), respectively, we get 
(53 + 1052 + 375 + 29) 
X,(s) = 
X2(s) = 
^ 3 ( 5 ) = 
(5+1)(5 + 2)(5 + 3)(5 + 4) 
(252 - 215 - 24) 
(5 + 1)(5 + 2)(5 + 3)(5 + 4) 
5(252 - 215 - 24) 
(5+1)(5 + 2)(5 + 3)(5 + 4) 
(4.104a) 
(4.104b) 
(4.104c) 
The output equation is found from Eq. (4.99b). Performing the indicated addition 
yields 
Y(5) = [l 
1 0; 
X3(5) 
= 
X1(s)+X2{s) 
(4.105) 

202 
Chapter 4 
Time Response 
or 
Symbolic Math 
Y(s) = 
{s3 + 1252 + 165 + 5) 
(s + l)(s + 2)(s + 3){s + 4) 
-6.5 
19 
11.5 
(4.106) 
s+2 
s + 3 
s+4 
where the pole at -1 canceled a zero at - 1 . Taking the inverse Laplace 
transform, 
, - 2 f 
y(t) = -6.5e~Zf -f 19e~M -U.5e 
.-At 
(4.107) 
b. The denominator of Eq. (4.102), which is det(sl - A), is also the denominator 
of the system's transfer function. Thus, det(.sl - A) = 0 furnishes both the 
poles of the system and the eigenvalues -2, - 3, and -4. 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run ch4spl in Appendix F at www.wiley.com/college/ 
nise. You will learn how to solve state equations for the output 
response using the Laplace transform. Example 4.11 will be 
solved using MATLAB and the Symbolic Math Toolbox. 
WileyPLUS 
dJEJ 
Conlrol Solutions 
Skill-Assessment Exercise 4.9 
PROBLEM: Given the system represented in state space by Eqs. (4.108), 
0 
-3 
2 
-5_ x + 
0 
1 
x = 
x+ 
e~' 
(4.108a) 
7 = 11 3]x 
(4.108b) 
Trylt 4.5 
Use the following MATLAB 
and Symbolic Math Toolbox 
statements to solve Skill-
Assessment Exercise 4.9. 
Syms s 
A=[0 2 ; - 3 - 5 ] ; B=[0;1]; 
C=[l 3];X0=[2;1]; 
U=l/(s+l); 
I=[l 0;0 1]; 
X=( (s*I-A) A - l ) * . . . 
(X0+B*U); 
Y=C*X; Y=simplify (Y); 
y=ilaplace (Y); 
pretty(y) 
eig(A) 
*(0) = 
(4.108c) 
do the following: 
a. Solve for y(t) using state-space and Laplace transform techniques. 
b. Find the eigenvalues and the system poles. 
ANSWERS: 
a. y(t) = -0.5*r' - 12e-2' + 17.5e-3' 
b. -2, - 3 
The complete solution is located at www.wiley.com/college/nise. 

4.11 Time Domain Solution of State Equations 
t 
4.11 Time Domain Solution of State 
Equations 
We now look at another technique for solving the state equations. Rather than using 
the Laplace transform, we solve the equations directly in the time domain using a 
method closely allied to the classical solution of differential equations. We will find 
that the final solution consists of two parts that are different from the forced and 
natural responses. 
The solution in the time domain is given directly by 
x(t) = eAtx(0) + [ 
ex{t-T)Bu(r)dr 
JQ 
= *(*)x(0) + [ ®(t- r)Bu(r)rfr 
Jo 
(4.109) 
where <&(t) = e^ by definition, and which is called the state-transition matrix. 
Eq. (4.109) is derived in Appendix I located at www.wiley.com/college/nise. Readers 
who are not familiar with this equation or who may want to refresh their memory 
should consult Appendix I before proceeding. 
Notice that the first term on the right-hand side of the equation is the response 
due to the initial state vector, x(0). Notice also that it is the only term dependent on 
the initial state vector and not the input. We call this part of the response the zero-
input response, since it is the total response if the input is zero. The second term, 
called the convolution integral, is dependent only on the input, u, and the input 
matrix, B, not the initial state vector. We call this part of the response the zero-state 
response, since it is the total response if the initial state vector is zero. Thus, there is a 
partitioning of the response different from the forced/natural response we have seen 
when solving differential equations. In differential equations, the arbitrary constants 
of the natural response are evaluated based on the initial conditions and the initial 
values of the forced response and its derivatives. Thus, the natural response's 
amplitudes are a function of the initial conditions of the output and the input. In 
Eq. (4.109), the zero-input response is not dependent on the initial values of the 
input and its derivatives. It is dependent only on the initial conditions of the state 
vector. The next example vividly shows the difference in partitioning. Pay close 
attention to the fact that in the final result the zero-state response contains not only 
the forced solution but also pieces of what we previously called the natural response. 
We will see in the solution that the natural response is distributed through the zero-
input response and the zero-state response. 
Before proceeding with the example, let us examine the form the elements of 
<&(t) take for linear, time-invariant systems. The first term of Eq. (4.96), the Laplace 
transform of the response for unforced systems, is the transform of 4>(f)x(0), the 
zero-input response from Eq. (4.109). Thus, for the unforced system 
JS?[x(r)] = if [*(f)x(0)] = (si - A)_1x(0) 
(4.110) 
from which we can see that (si — A)" is the Laplace transform of the state-transition 
matrix, ¢(/1). We have already seen that the denominator of (si - A) - is a 
polynomial in s whose roots are the system poles. This polynomial is found from 

204 
Chapter 4 
Time Response 
the equation det(.sl - A) = 0. Since 
-h 
&-l[{si-A)-l] 
= se 7-1 adj(sI-A) 
det{sl - A) = #(fj 
(4.111) 
each term of ¢(/) would be the sum of exponentials generated by the system's poles. 
Let us summarize the concepts with two numerical examples. The first example 
solves the state equations directly in the time domain. The second example uses 
the Laplace transform to solve for the state-transition matrix by finding the inverse 
Laplace transform of (si - A)-1. 
Example 4.12 
Time Domain Solution 
PROBLEM: For the state equation and initial state vector shown in Eqs. (4.112), 
where u(t) is a unit step, find the state-transition matrix and then solve for x(t). 
x(0) = 
0 
1 
-8 
-6 
1 
0 
*(') + 
u{t) 
SOLUTION: Since the state equation is in the form 
±(t) = Ax(0 + Bu(t) 
(4.112a) 
(4.112b) 
(4.113) 
find the eigenvalues using det(sl - A) = 0. Hence, s2 + 6s + 8 = 0, from which 
Sl = -2 and 52 = -4. Since each term of the state-transition matrix is the sum of 
responses generated by the poles (eigenvalues), we assume a state-transition 
matrix of the form 
¢(0 = 
(Kie-2< + K2e-4<) (K3e-2t + K4e~4t) 
I {K5e-2t + K6e~4t) 
{K^21 + K8e~41) 
(4.114) 
In order to find the values of the constants, we make use of the properties of 
the state-transition matrix derived in Appendix J located at www.wiley.com/ 
college/nise. 
¢(0) = 1 
(4.115) 
Ki + K2 = 1 
K3 + K4 = 0 
K5 + K6 = 0 
#7+-^8 = 1 
(4.116a) 
(4.116b) 
(4.116c) 
(4.116d) 

4.11 Time Domain Solution of State Equations 
205 
and since 
then 
6(0) = A 
- 2 £ i - 4K2 = 0 
-2K3 -4K4 
= 1 
-2K5 - 4K6 = - 8 
-2K-, - 4K8 = - 6 
(4.117) 
(4.118a) 
(4.118b) 
(4.118c) 
(4.118d) 
The constants are solved by taking two simultaneous equations four times. For 
example, Eq. (4.116a) can be solved simultaneously with Eq. (4.118a) to yield the 
values of K\ and K2. Proceeding similarly, all of the constants can be found. 
Therefore, 
*(') = 
(2e * -e4') 
(\e-2t-\e-M 
. (-4e~2' + 4e~4t) 
(-e~2t + 2e~4t) . 
Also, 
4>(f - r)B = 
Ie-2('-r) _ie-4(f-r) 
(-e-2«-T)+2e-4«-r)\ 
Hence, the first term of Eq. (4.109) is 
4>(r)x(0) = 
The last term of Eq. (4.109) is 
(2e~21 - e~4t) 
|_(-4e-2' + 4<?-4,)J 
I ®{t - r)Bu(r)<fr = 
Jo 
l-e-21 ['fdr-le-* 
f J*dz 
2 
Jo 
2 
JQ 
-e~2t [ e2Tdr + 2e-4' f e4xd% 
Jo 
Jo 
8 
4 
+ 8 
L 2 
2 
(4.119) 
(4.120) 
(4.121) 
(4.122) 
Notice, as promised, that Eq. (4.122), the zero-state response, contains not only the 
forced response, 1/8, but also terms of the form Ae~2t and Be~4t that are part of 

206 
Chapter 4 
Time Response 
what we previously called the natural response. However, the coefficients, A and 
B, are not dependent on the initial conditions. 
The final result is found by adding Eqs. (4.121) and (4.122). Hence, 
x(r) = 3>(r)x(0) + / ¢ ( / - r)Bu{r)dz = 
8 
4 
8 
(4.123) 
Symbolic Math 
Example 4.13 
State-Transition Matrix via Laplace Transform 
PROBLEM: Find the state-transition matrix of Example 4.12, using (si - A) - 1. 
SOLUTION: We use the fact that €>(?) is the inverse Laplace transform of 
(si - A) _ 1. Thus, first find (si - A) as 
(,1 - A) = 
- 1 
(s + 6) 
(4.124) 
from which 
- i 
(sl-A)-l 
= 
s + 6 1 
-8 
s 
s + 6 
1 
s2 + 6s + 8 s2 + 6s + 
- 8 
s 
s2 + 6s + 8 
Ls2 + 6s + 8 s2 + 6s + 8J 
Expanding each term in the matrix on the right by partial fractions yields 
2 
1 \ 
/ 1 / 2 
1/2 
(4.125) 
-3 
(sI-Ap = 
s + 2 
s + 4/ 
V^ + 2 
s + 4 
-4 
4 
+ 
. V * + 2 
s + 4/ 
V s + 2 
s + 4/ . 
1 
2 
• + 
(4.126) 
Finally, taking the inverse Laplace transform of each term, we obtain 
{2e-2'-e-4') 
'-4e-2< + 4e-4') 
{-e~2r + 2e'4') J 
*(0 = 
8 * * - 5 ^ 
(4.127) 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run ch4sp2 in Appendix F at www.wiley.com/college/ 
nise . You will learn how to solve state equations for the output 
response using the convolution integral. Examples 4.12 and 4.13 
will be solved using MATLAB and the Symbolic Math Toolbox. 

Case Studies 
207 
Systems represented in state space can be simulated on the digital computer. 
Programs such as MATLAB can be used for this purpose. Alternately, the user can write 
specialized programs, as discussed in Appendix G.l at www.wiley.com/college/nise. 
Students who are using MATLAB should now run ch4p3 in Appendix B. 
This exercise uses MATLAB to simulate the step response of systems 
represented in state space. In addition to generating the step 
response, you will learn how to specify the range on the time axis 
for the plot. 
MATLAB 
Skill-Assessment Exercise 4.10 
PROBLEM: Given the system represented in state space by Eqs. (4.128): 
x = 
0 
-2 
2^ 
-5 x + 
0 
1 
, - 2 / 
y = [2 
l]x 
1 
x(0) = 
do the following: 
a. Solve for the state-transition matrix. 
b. Solve for the state vector using the convolution integral. 
c. Find the output, y(t). 
(4.128a) 
(4.128b) 
(4.128c) 
ANSWERS: 
a. #{*) = 
b. x(t) = 
4 -, 
1 -At 
3 
3 
2 -r , 2 -* 
-3« 
+ S ' 
10 _, 
_2, 
4 _At 
— e ' -e 
--e 
m 
3 
3 
•** —t 
^ 
-At 
36 
~36 
3 
+ 3 
5 
~3e 
8 
+ 3 e" 
c. y{i) = 5e~' - e~2t 
The complete solution is located at www.wiley.com/college/mse. 
WileyPLUS 
Conlrol Solutions 
Case Studies 
Antenna Control: Open-Loop Response 
In this chapter, we have made use of the transfer functions derived in Chapter 2 
and the state equations derived in Chapter 3 to obtain the output response of an 

Chapter 4 
Time Response 
open-loop system. We also showed the importance of the poles of a system in deter-
mining the transient response. The following case study uses these concepts to analyze 
an open-loop portion of the antenna azimuth position control system. The open-loop 
function that we will deal with consists of a power amplifier and motor with load. 
PROBLEM: 
For the schematic of the azimuth position control system shown on 
the front endpapers, Configuration 1, assume an open-loop system (feedback path 
disconnected). 
a. Predict, by inspection, the form of the open-loop angular velocity response of 
the load to a step-voltage input to the power amplifier. 
b. Find the damping ratio and natural frequency of the open-loop system. 
c. Derive the complete analytical expression for the open-loop angular velocity 
response of the load to a step-voltage input to the power amplifier, using 
transfer functions. 
d. Obtain the open-loop state and output equations. 
e. Use M ATLAB t o o b t a i n a p l o t of t h e open-loop a n g u l a r v e l o c i t y 
response t o a s t e p - v o l t a g e i n p u t . 
SOLUTION: The transfer functions of the power amplifier, motor, and load as 
shown on the front endpapers, Configuration 1, were discussed in the Chapter 2 
case study. The two subsystems are shown interconnected in Figure 4.32(a). 
Differentiating the angular position of the motor and load output by multiplying 
by s, we obtain the output angular velocity, co0, as shown in Figure 4.32(a). The 
equivalent transfer function representing the three blocks in Figure 4.32(a) is the 
product of the individual transfer functions and is shown in Figure 4.32(b).7 
a. Using the transfer function shown in Figure 4.32(b), we can predict the nature of 
the step response. The step response consists of the steady-state response 
generated by the step input and the transient response, which is the sum of 
two exponentials generated by each pole of the transfer function. Hence, the 
form of the response is 
-100f 
co0{t) = A + Be-1™ + Ce ,-l.Tll 
(4.129) 
b. The damping ratio and natural frequency of the open-loop system can be found 
by expanding the denominator of the transfer function. Since the open-loop 
VM 
Power amp 
100 
(5+100) 
Convert to 
Motor and load 
angular velocity 
Eu(s) 
0.2083 
5(.V+1.71) 
e,M m 
s 
{0,,(5) ^ 
(fl) 
V*3 
20.83 
(5+100)(5+1.71) 
co„(s) 
(b) 
FIGURE 4.32 Antenna azimuth position control system for angular velocity: a. forward 
path; b. equivalent forward path 
7This product relationship will be derived in Chapter 5. 

Case Studies 
209 
transfer function is 
70 83 
G
^ 
+ ioi.7i, + i71
 
(413°) 
(on = V171 = 13.08, and£ = 3.89 (overdamped). 
c. In order to derive the angular velocity response to a step input, we multiply the 
transfer function of Eq. (4.130) by a step input, lis, and obtain 
90 83 
^ = , ( , + 100)(, + 1.71) 
( 4 1 3 1 ) 
Expanding into partial fractions, we get 
, , 
0.122 
2.12 xlO"3 
0.124 
*,*~« 
^
=
- 
+ ^+100-,-+171 
(4132) 
Transforming to the time domain yields 
co0(t) = 0.122 + (2.12 x 10-3)e-100' - 0.124^ 1^ 
(4.133) 
d. First convert the transfer function into the state-space representation. Using 
state space 
Eq. (4.130), we have 
co0(s) 
20.83 
Vp(s) 
S2 + 101.71J + 171 
(4.134) 
Cross-multiplying and taking the inverse Laplace transform with zero initial 
conditions, we have 
a>0 + 101.716)0 + 171co0 = 20.83vp 
(4.135) 
Defining the phase variables as 
xi = co0 
(4.136a) 
x2 = co0 
(4.136b) 
and using Eq. (4.135), the state equations are written as 
ki = x2 
(4.137a) 
x2 = -171*i - 101.71¾ + 20.83vp 
(4.137b) 
where vp = 1, a unit step. Since x\ = co0 is the output, the output equation is 
y = Xl 
(4.138) 
Equations (4.137) and (4.138) can be programmed to obtain the step response 
using MATLAB or alternative methods described in Appendix H.l at 
www.wiley.com/college/nise. 
e. Students who are using MATLAB shouldnowrunch4p4 in Appendix B. 
This exercise uses MATLAB to plot the step response. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. Refer to the antenna azimuth position control system shown on the 
MATLAB 

210 
Chapter 4 
Time Response 
State Space 
MATLAB 
front endpapers, Configuration 2. Assume an open-loop system (feedback path 
disconnected) and do the following: 
a. Predict the open-loop angular velocity response of the power amplifier, motor, 
and load to a step voltage at the input to the power amplifier. 
b. Find the damping ratio and natural frequency of the open-loop system. 
c. Derive the open-loop angular velocity response of the power amplifier, motor, 
and load to a step-voltage input using transfer functions. 
d. Obtain the open-loop state and output equations. 
e. Use MATLAB to obtain a plot of the open-loop angular velocity 
response to a step-voltage input. 
Unmanned Free-Swimming Submersible Vehicle: 
Open-Loop Pitch Response 
An Unmanned Free-Swimming Submersible (UFSS) vehicle is shown in Figure 
4.33. The depth of the vehicle is controlled as follows. During forward motion, an 
elevator surface on the vehicle is deflected by a selected amount. This deflection 
causes the vehicle to rotate about the pitch axis. The pitch of the vehicle creates a 
vertical force that causes the vehicle to submerge or rise. The pitch control system 
for the vehicle is used here and in subsequent chapters as a case study to 
demonstrate the covered concepts. The block diagram for the pitch control system 
is shown in Figure 4.34 and on the back endpapers for future reference (Johnson, 
1980). In this case study, we investigate the time response of the vehicle dynamics 
that relate the pitch angle output to the elevator deflection input. 
PROBLEM: The transfer function relating pitch angle, 6(s), to elevator surface 
angle, Se(s), for the UFSS vehicle is 
e(s) 
-0.125(5 + 0.435) 
8e(s) 
(s + 1.23)(^2 + 0.2265 + 0.0169) 
(4.139) 
FIGURE 4.33 Unmanned Free-Swimming Submersible (UFSS) vehicle. 

Case Studies 
211 
Pitch 
command 
0,<A> 
Pitch gain 
0— -*, --(¾ 
Commanded 
elevator 
Elevator Elevator 
deflection actuator deflection 
<5<-» 
2 
8.(s) 
Vehicle 
dynamics 
s+2 
-0.125(^+0.435) 
(A-+1.23)(i2+0.226j+0.0169) 
Pitch 
em 
Pitch rate 
sensor 
-K-,5 
-* 
FIGURE 4.34 
Pitch control loop for the UFSS vehicle 
a. Using only the second-order poles shown in the transfer function, predict 
percent overshoot, rise time, peak time, and settling time. 
b. Using Laplace transforms, find the analytical expression for the response of the 
pitch angle to a step input in elevator surface deflection. 
c. Evaluate the effect of the additional pole and zero on the validity of the second-
order approximation. 
d. Plot the step response of the vehicle dynamics and verify your conclusions found 
in (c). 
SOLUTION: 
a. Using the polynomial s2 + 0.226s + 0.0169, we find that <yj = 0.0169 and 
2^eon = 0.226. Thus, a>„ = 0.13 rad/s and % = 0.869. Hence, %OS = 
er&V1-* 
100 = 0.399%. FromFigure4.16,^„7V = 2.75, or 71, = 21.2 s. To findpeak time, we 
use Tp = n/cony/l - C2 = 48.9 s. Finally, settling time is Ts = 4/^con = 35.4 s. 
b. In order to display a positive final value in Part d. we find the response of the 
system to a negative unit step, compensating for the negative sign in the transfer 
function. Using partial-fraction expansion, the Laplace transform of the 
response, 9(s), is 
0.125(5 + 0.435) 
d(s) = s(s + 1.23)(^2 + 0.226s + 0.0169) 
= 2.616^ + 0.0645 
\— 
s 
5 + 1.23 
2.68(5 + 0.113) + 3.478^0.00413 
(5 + 0.113)2 + 0.00413 
Taking the inverse Laplace transform, 
0(0 = 2.616 + 0.0645<rL23/ 
- 6>-0113'(2.68 cos 0.0643f + 3.478 sin 0.06430 
= 2.616 + 0.0645e-! 23' - 4.39e-°113'cos(0.0643? + 52.38°] 
(4.140) 
(4.141) 
c. Looking at the relative amplitudes between the coefficient of the e~l23t term 
and the cosine term in Eq. (4.165), we see that there is pole-zero cancellation 
between the pole at -1.23 and the zero at -0.435. Further, the pole at -1.23 is 
more than five times farther from the jco axis than the second-order dominant 

212 
Chapter 4 
Time Response 
Time (seconds) 
FIGURE 4.35 Negative step response of pitch control for UFSS vehicle 
MATLAB 
Roll axis 
FIGURE 4.36 
A ship at sea, showing roll axis 
poles at —0.113 + /0.0643. We conclude that the response will be close to that 
predicted. 
d. Plotting Eq. (4.141) or using a computer simulation, we obtain the step response 
shown in Figure 4.35. We indeed see a response close to that predicted. 
Students who are using MATLAB should now run ch4p5 in Appendix B. 
This exercise uses MATLAB to find £, con, Ts, Tpr and Tr and plot a step 
response. Table lookup is used to find Tr. The exercise applies the 
concepts to the problem above. 
CHALLENGE: You are now given a problem to test your 
knowledge of this chapter's objectives. This problem uses 
the same principles that were applied to the Unmanned 
Free-Swimming Submersible vehicle: Ships at sea undergo 
motion about their roll axis, as shown in Figure 4.36. Fins 
called stabilizers are used to reduce this rolling motion. The 
stabilizers can be positioned by a closed-loop roll control 
system that consists of components, such as fin actuators 
and sensors, as well as the ship's roll dynamics. 
Assume the roll dynamics, which relates the roll-angle 
output, 0(s), to a disturbance-torque input, TD(S), is 
2.25 
TD(s) 
(s2 + 0.5s + 2.25) 
(4.142) 
MATLAB 
Do the following: 
a. Find the natural frequency, damping ratio, peak time, settling time, rise time, 
and percent overshoot. 
b. Find the analytical expression for the output response to a unit step input in 
voltage. 
c. Use MATLAB to solve a and b and to plot the response found in b, 

Summary 
213 
^Summary^ 
In this chapter, we took the system models developed in Chapters 2 and 3 and found 
the output response for a given input, usually a step. The step response yields a clear 
picture of the system's transient response. "We performed this analysis for two types 
of systems, first order and second order, which are representative of many physical 
systems. We then formalized our findings and arrived at numerical specifications 
describing the responses. 
For first-order systems having a single pole on the real axis, the specification of 
transient response that we derived was the time constant, which is the reciprocal of 
the real-axis pole location. This specification gives us an indication of the speed of 
the transient response. In particular, the time constant is the time for the step 
response to reach 63% of its final value. 
Second-order systems are more complex. Depending on the values of system 
components, a second-order system can exhibit four kinds of behavior: 
1. Overdamped 
2. Underdamped 
3. Undamped 
4. Critically damped 
We found that the poles of the input generate the forced response, whereas 
the system poles generate the transient response. If the system poles are real, the 
system exhibits overdamped behavior. These exponential responses have time 
constants equal to the reciprocals of the pole locations. Purely imaginary poles 
yield undamped sinusoidal oscillations whose radian frequency is equal to the 
magnitude of the imaginary pole. Systems with complex poles display under-
damped responses. The real part of the complex pole dictates the exponential 
decay envelope, and the imaginary part dictates the sinusoidal radian frequency. 
The exponential decay envelope has a time constant equal to the reciprocal of the 
real part of the pole, and the sinusoid has a radian frequency equal to the 
imaginary part of the pole. 
For all second-order cases, we developed specifications called the damping 
ratio, £, and natural frequency, con. The damping ratio gives us an idea about the 
nature of the transient response and how much overshoot and oscillation it under-
goes, regardless of time scaling. The natural frequency gives an indication of the 
speed of the response. 
We found that the value of £ determines the form of the second-order natural 
response: 
• If £ = 0, the response is undamped. 
• If f < 1, the response is underdamped. 
• If £ = 1, the response is critically damped. 
• If £ > 1, the response is overdamped. 
The natural frequency is the frequency of oscillation if all damping is removed. 
It acts as a scaling factor for the response, as can be seen from Eq. (4.28), in which the 
independent variable can be considered to be co„t. 

Chapter 4 
Time Response 
For the underdamped case we defined several transient response specifica-
tions, including these: 
• Percent overshoot, %OS 
• Peak time, Tp 
• Settling time, Ts 
• Rise time, Tr 
The peak time is inversely proportional to the imaginary part of the complex pole. 
Thus, horizontal lines on the .s-plane are lines of constant peak time. Percent 
overshoot is a function of only the damping ratio. Consequently, radial lines are 
lines of constant percent overshoot. Finally, settling time is inversely proportional to 
the real part of the complex pole. Hence, vertical lines on the s-plane are lines of 
constant settling time. 
We found that peak time, percent overshoot, and settling time are related to 
pole location. Thus, we can design transient responses by relating a desired response 
to a pole location and then relating that pole location to a transfer function and the 
system's components. 
The effects of nonlinearities, such as saturation, dead zone, and backlash were 
explored using MATLAB's Simulink. 
In this chapter, we also evaluated the time response using the state-space 
approach. The response found in this way was separated into the zero-input response, 
and the zero-state response, whereas the frequency response method yielded a total 
response divided into natural response and forced response components. 
In the next chapter we will use the transient response specifications developed 
here to analyze and design systems that consist of the interconnection of multiple 
subsystems. We will see how to reduce these systems to a single transfer function in 
order to apply the concepts developed in Chapter 4. 
^ Review Questions ^ 
1. Name the performance specification for first-order systems. 
2. What does the performance specification for a first-order system tell us? 
3. In a system with an input and an output, what poles generate the steady-state 
response? 
4. In a system with an input and an output, what poles generate the transient 
response? 
5. The imaginary part of a pole generates what part of a response? 
6. The real part of a pole generates what part of a response? 
7. What is the difference between the natural frequency and the damped frequency 
of oscillation? 
8. If a pole is moved with a constant imaginary part, what will the responses have in 
common? 
9. If a pole is moved with a constant real part, what will the responses have in 
common? 
10. If a pole is moved along a radial line extending from the origin, what will the 
responses have in common? 

Problems 
11. List five specifications for a second-order underdamped system. 
12. For Question 11 how many specifications completely determine the response? 
13. What pole locations characterize (1) the underdamped system, (2) the over-
damped system, and (3) the critically damped system? 
14. Name two conditions under which the response generated by a pole can be 
neglected. 
15. How can you justify pole-zero cancellation? 
16. Does the solution of the state equation yield the output response of the system? 
Explain. 
17. What is the relationship between (si — A), which appeared during the Laplace 
transformation solution of the state equations, and the state-transition matrix, 
which appeared during the classical solution of the state equation? 
18. Name a major advantage of using time-domain techniques for the solution of the 
response. 
19. Name a major advantage of using frequency-domain techniques for the solution 
of the response. 
20. What three pieces of information must be given in order to solve for the output 
response of a system using state-space techniques? 
21. How can the poles of a system be found from the state equations? 
State Space 
State Space 
State Space 
State Space 
State Space 
Problems 
1, Derive the output responses for all parts of 
Figure 4.7. [Section: 4.4] 
2. Find the output response, c(t), for each 
of the systems shown in Figure P4.1. 
Also find the time constant, rise time, 
and settling time for each case. [Sections: 4.2, 4.3] 
WileyPLUS 
Control Solutions 
I 
5 
J —»-
5 
6+5 
(a) 
20 
i'+20 
C(s) 
Qs) 
for 
MATLAB 
FIGURE P4.1 
3. Plot the step responses 
Problem 2 using MATLAB. 
4. Find the capacitor voltage in the network shown in 
Figure P4.2 if the switch closes at t = 0. Assume zero 
initial conditions. Also find the time constant, rise 
time, and settling time for the capacitor voltage. 
[Sections: 4.2, 4.3] 
— w v — 
1.8 Q 
/ = 0 
5 V 
0.79 F 
MATLAB 
FIGURE P4.2 
5. Plot the step response for 
Problem 4 using MATLAB. From 
your plots, find the time con-
stant, rise time, and settling 
time . 
6. For the system shown in Figure P4.3, (a) find an 
equation that relates settling time of the velocity of 

216 
Chapter 4 
Time Response 
the mass to M; (b) find an equation that relates rise 
time of the velocity of the mass to M. [Sections: 4.2,4.3] 
tli) 
.v(f) 
M 
6 N-s/m 
FIGURE P4.3 
7. Plot the step response for 
MATLAB 
Problem 6 using MATLAB. From 
( Q B 
your plots, find the time con-
stant, rise time, and settling 
time. Use M = 1 and M = 2. 
8. For each of the transfer functions shown below, find 
the locations of the poles and zeros, plot them on the 
.-plane, and then write an expression for the general 
form of the step response without solving for the 
inverse Laplace transform. State the nature of each 
response (overdamped, underdamped, and so on). 
[Sections: 4.3, 4.4] 
2 
u. 
h 
A 
e. 
F 
i yt) --
T{s)--
7/(.) = 
T(s)--
T(s)--
7Y.0 ; 
. + 2 
5 
(. + 3)(. + 6) 
10(. + 7) 
(. + 10)(. + 20) 
20 
.2 + 6. + 144 
. + 2 
~.2 + 9 
(. + 5) 
(. + 10)2 
9. Use MATLAB t o find t h e p o l e s of 
[ S e c t i o n : 4.2] 
s2 + 2 s + 2 
MATLAB 
T(s) = s4 + 6s3 + 4s 2 + 7s + 2 
10. Find the transfer function and poles of the system 
represented in state space here: [Section: 4.10] 
x = 
y = 
-3 
5 
2 8 - 3 
-4 
2 
7 
r 
0 
-9 
x + 
"-41 
-3 
4 "(0 
x; x(0) = 
4 , 
MATLAB 
11. Repeat Problem 10 using 
MATLAB. [Section: 4.10] . 
12. Write the general form of the capacitor 
voltage for the electrical network shown 
in Figure P4.4. [Section: 4.4]. 
/?! = lOkXi 
-Wv-
WileyPLUS 
Control Solutions 
Ht) = u(t) © R2=\0kQ^> 
L = 200H 
C = 10 //F 
MATLAB 
FIGURE P4.4 
13. Use MATLAB to plot the capaci-
tor voltage in Problem 12 . 
[Section: 4.4]. 
14. Solve for x(t) in the system shown in Figure P4.5 if 
/(f) is a unit step. [Section: 4.4]. 
M=lkg 
Ks = 5 N/m 
/,.= 1 N-s/m 
f(t) = u(t)N 
X(l) 
M 
•fit) 
FIGURE P4.5 
15. The system shown in Figure P4.6 has a unit step 
input. Find the output response as a function of 
time. Assume the system is underdamped. Notice 
that the result will be Eq. (4.28). [Section: 4.6]. 
R(s) 
s2+2 C,(o ,,s+ a>l 
C(.v) 
FIGURE P4.6 
16. Derive the relationship for damping ratio as a func-
tion of percent overshoot, Eq. (4.39). [Section: 4.6]. 
17. Calculate the exact response of each system of 
Problem 8 using Laplace transform techniques, 
and compare the results to those obtained in that 
problem. [Sections: 4.3, 4.4]. 
18. Find the damping ratio and natural frequency for 
each second-order system of Problem 8 and show 
that the value of the damping ratio conforms to the 
type of response (underdamped, overdamped, and 
so on) predicted in that problem. [Section: 4.5]. 
19. A system has a damping ratio of 0.5, a 
wileypms 
natural frequency of 100 rad/s, and a 
»Vi 1149 
dc gain of 1. Find the response of 
Contral solutions 
the system to a unit step input. [Section: 4.6]. 

Problems 
217 
20. For each of the second-order systems that follow, 
find £, con, Ts, Tp, Tr, and %OS. [Section: 4.6]. 
T M 
16 
a. T(s) = 
b. T(s) = 
c. 7(5) = 
s2 + 3s +16 
0.04 
52 + 0.025 + 0.04 
1.05 x 107 
MATLAB 
52 + 1.6x 1035 + 1.05x 107 
21. Repeat Problem 20 using MATLAB. 
Have the computer program esti-
mate the given specifications and plot the 
step responses. Estimate the rise time 
from the plots . [Section : 4 . 6]. 
22. Use MATLAB's LTI Viewer and ob- 
GuiTool 
tain settling time, peak, time, 
grjIJiT) 
rise time, andpercent overshoot 
for each of the systems in Problem 20. 
[Section: 4.6]. 
23. For each pair of second-order system specifications 
that follow, find the location of the second-order 
pair of poles. [Section: 4.6], 
a. %OS = 12%; Ts = 0.6 second 
b. %OS = 10%; Tp = 5 seconds 
c. Ts = l seconds; Tp = 3 seconds 
24. Find the transfer function of asecond-order 
system that yields a 12.3 % overshoot and a 
settling time of 1 second. [Section: 4.6] 
25. For the system shown in Figure P4.7, do the follow-
ing: [Section: 4.6] 
a. Find the transfer function G(s) = 
X(s)/F(s). 
b. Find £, con, %OS, Ts, Tp, and Tr. 
27. Derive the unit step response for each transfer 
function in Example 4.8. [Section: 4.7]. 
28. Find the percent overshoot, settling time, rise time, 
and peak time for 
14145 
T(S) = (^ + 0.842, + 2.829)(, + 5) [ S e C t i ° n : 4 7 ] 
29. For each of the unit step responses shown 
wiieyPLUs 
in Figure P4.9. find the transfer function 
^Vj Jj-fl 
of the system. [Sections: 4.3, 4.6]. 
control solutions 
WileyPLUS 
Cliilii 
Control Solutions 
5 N-s/m 
FIGURE P4.7 
26. For the system shown in Figure P4.8, a step torque is 
applied at $i(t). Find 
a. The transfer function, G(s) = 
e2{s)/T(s). 
b. The percent overshoot, settling time, and peak 
time for 92(t). [Section: 4.6] 
Toy dt(t) 
e2«) 
1.07 kg-m 
-m2 
1.53 N-m-s/rad 
FIGURE P4.8 
1.92N-m/rad 
at 
1 
1 
\ 
\ 
1 
: 
: 
: 
0.05 
0.1 
0.15 
Time (seconds) 
(a) 
0.2 
0.25 
20 
| 
15 
c o 
a. 
2 IO 
5 
" " " - n 
* " 
2 
3 
Time (seconds) 
(b) 
10 
15 
Time (seconds) 
(c) 
FIGURE P4.9 

218 
Chapter 4 
Time Response 
30. For the following response functions, determine if 
pole-zero cancellation can be approximated. If it 
can, find percent overshoot, settling time, rise time, 
and peak time. [Section: 4.8]. 
(* + 3) 
a. C(s) = 
b. C{s) = 
c. C(s) = 
d. C{s) = 
5(5 + 2)(52+35 +10) 
(5 + 2.5) 
s(s + 2)(s2 +4s + 20) 
(5 + 2.1) 
5(5 + 2)(52 +s + 5) 
(5 + 2.01) 
s(s + 2)(52 + 55 + 20) 
31. Using MATLAB, plot the time re- 
MATLAB 
sponse of Problem 30a and from 
^yj^) 
the plot determine percent overshoot, 
settling time, rise time, and peak time. 
[Section: 4 .8] 
32. Find peak time, settling time, and percent overshoot 
for only those responses below that can be approxi-
mated as second-order responses. [Section: 4.8]. 
a. c{t) = 0.003500 - 0.001524<r4' 
-0.001976e-3'cos(22.16f) 
-0.0005427e-3'sin(22.16r) 
b. c{t) = 0.05100 - 0.007353e-8' 
-0.007647e-6'cos(8f) 
-0.01309e"6rsin(8r) 
c. c{t) = 0.009804 - 0.0001857<r51f 
-0.009990e-2fcos(9.7960 
-0.001942e-2'sin(9.796r) 
d. c{t) = 0.007000 - 0.001667<r10' 
-0.008667e-2'cos(9.9510 
-0.0008040e-2fsin(9.951f) 
33. For each of the following transfer functions with 
zeros, find the component parts of the unit step 
response: (1) the derivative of the response without 
a zero and (2) the response without a zero, scaled to 
the negative of the zero value. Also, find and plot 
the total response. Describe any nonminimum-
phase behavior. [Section: 4.8]. 
a. G W = 
— 
b. G(s) = 
52 + 35 + 36 
5 - 2 
?2 + 35 + 36 
34. Use MATLAB's Simulink t o o b t a i n 
simulink 
t h e s t e p response of a system, 
1 
G{s) = s2 + 3s + U 
under the following conditions: 
[Section: 4.9] 
a. The system is linear and driven by an 
amplifier whose gain is 10. 
b. An amplifier whose gain is 10 drives the 
system. The amplifier saturates at 
±0.25 volts. Describe the effect of 
the saturation on the system's output. 
c. An amplifier whose gain is 10 drives the 
system. The amplifier saturates at 
±0.25 volts. The system drives a 1:1 
gear train that has backlash. The dead-
band width of the backlash is 0.02 rad. 
Describe the effect of saturation and 
backlash on the system's output. 
35. A system is represented by the state and 
output equations that follow. Without 
solving the state equation, find the poles 
of the system. [Section: 4.10] 
State Space 
X 
= 
- 2 
- 1 
- 3 
- 5 x + 
u{t) 
y = [ 3 
2]x 
36. A system is represented by the state 
and output equations that follow. With-
out solving the state equation, find 
[Section: 4.10] 
a. the characteristic equation; 
b. the poles of the system 
WileyPLUS 
dJ2J 
Control Solutions 
State Space 
X 
= 
"0 2 3" 
0 6 5 
U 
4 
2J 
x + 
0" 
1 
lj 
lilt) 
y = [ l 
2 
0]x 
37. Given the following state-space re-
presentation of a system, find 
Y(s): 
[Section: 4.10] 
State Space 
X 
= 
1 
2 
- 3 
- 1 x + 
sin 3t 
v = [ l 
2]x; x(0) = 
38. Given the following system represented 
in state space, solve for Y(s) using the 
State Space 

Problems 
219 
Laplace transform method for solution of the state 
equation: [Section: 4.10] 
x = 
0 
1 
- 2 
- 4 
0 
0 
ol 
1 
- 6 . 
x + 
[ol 
0 
1 
y = [ 0 
0 
l]x; x(0) = 
39. Solve the following state equation and 
output equation for y(t), where u(t) is 
the unit step. Use the Laplace trans-
form method. [Section: 4.10] 
State Space 
X = 
y=[ 
1-2 
0] 
-1 
- 1 
x + 
0 l]x; x(0) = 
l l 
u 
1 
[3] 
0 
40. Solve for y(t) for the following system 
state space 
represented in state space, where u(t) is 
^ ^ ^ V 
the unit step. Use the Laplace transform approach 
to solve the state equation. [Section: 4.10] 
x = 
- 3 
0 
0 
1 
- 6 
0 
01 
1 
- 5 . 
x + r°i 
i 
. 1 . 
u{t) 
y = [0 1 l]x;x(0) = 
41. Use MATLAB to plot the step re- 
MATLAB 
sponse of Problem 40 . [Section : 
4.10] 
42. Repeat Problem40 usingMATLAB's 
Symbolic Math Toolbox and Eq. 
(4.96). In addition, run your program 
with an initial condition, 
Symbolic Math 
x(0 = 
. [Section : 4.10] 
43. Using classical (not Laplace) methods 
WileyPLUS 
only, solve for the state-transition matrix. 
>Vi 114¾ 
the state vector, and the output of the 
Contfo1 solutions 
system represented 
x = 
x(0) 
here: [Section: 4.11] 
r o 
ii 
- 1 
-5 
rr 
0 
x;y = [l 2]x; 
State Space 
44. Using classical (not Laplace) methods 
state space 
only, solve for the state-transition 
^E£9"J 
matrix, the state vector, and the output 
of the system represented here, where u(t) is the unit 
step: [Section: 4.11]. 
x = 
0 
1 
-1 0 x + 
y = [ 3 
4]x; x(0) = 
u(t) 
45. Solve for y(t) for the following system 
represented in state space, where u(t) is 
the unit step. Use the classical approach 
to solve the state equation. [Section: 4.11] 
State Space 
X 
= 
-2 
0 
0 
1 
0 
-6 
0" 
1 
- 1 
x + 
rii 
0 
0 
u(t) 
y = [1 0 0]x; x(0) = 
46. Repeat Problem 45 using MAT- 
Symbc^icAJath 
LAB's Symbolic Math Toolbox 
^ E u W 
and Eq. (4.109) . In addition, run your 
program with an initial condition, 
x(0) = 
[Section : 4.111 
47. 
State Space 
Using methods described in Appendix 
H.l located at www.wiley.com/college/ 
nise simulate the following system and 
plot the step response. Verify the expected values of 
percent overshoot, peak time, and settling time. 
T(s) = s2 + 0.8s + 1 

220 
Chapter 4 
Time Response 
48. Using methods described in Appendix 
H.l located at www.wiley.com/college/ 
nise, simulate the following system and 
plot the output, v(f), for a step input: 
State Space 
X = 
0 
10 
0 
1 
- 7 
0 
0 
1 
- 2 
x + 
"o" 
0 
1 
u(t) 
y(t)= 
[1 1 0]x; x(0) = 
- 1 
0 
0 
49. A human responds to a visual cue with a physical 
response, as shown in Figure P4.10. The transfer 
function that relates the output physical response, 
P(s), to the input visual command, V(s), is 
G(s) = P(s) 
(5 + 0.5) 
V{s) 
(s + 2)(s + 5) 
State Space 
(Stefani, 1973). Do the following: 
a. Evaluate the output response for a unit step 
input using the Laplace transform. 
b. Represent the transfer function in 
state space. 
c. Use MATLAB to simulate the 
MATLAB 
system and obtain a plot of 
^1 ~) 
the step response. 
50. Industrial robots are used for myriad applications. 
Figure P4.ll shows a robot used to move 55-pound 
bags of salt pellets; a vacuum head lifts the bags 
before positioning. The robot can move as many as 
12 bags per minute (Schneider, 1992). Assume a 
FIGURE P4.11 Vacuum robot lifts two bags of salt. 
model for the open-loop swivel controller and 
plant of 
Ge{s) = 
K 
Q>o(s) 
Vj(s) 
(s + 10)(52 + 4* + 10) 
where a)0{s) is the Laplace transform of the robot's 
output swivel velocity and V,(s) is the voltage ap-
plied to the controller. 
a. Evaluate percent overshoot, settling time, peak 
time, and rise time of the response of the open-
loop swivel velocity to a step-voltage input. 
Justify all second-order assumptions. 
b. Represent the open-loop system in 
state space. 
State Space 
Step 1: Light source on 
Step 2: Recognize light source 
Step 3: Respond to light source 
FIGURE P4.10 Steps in determining the transfer function relating output physical response to the input visual command 

Problems 
221 
c. Use MATLAB or any other com- JJyJJL 
puter program to simulate the wiiUP 
system and compare your results to a. 
51. Anesthesia induces muscle relaxation (paralysis) 
and unconsciousness in the patient. Muscle relaxa-
tion can be monitored using electromyogram signals 
from nerves in the hand; unconsciousness can be 
monitored using the cardiovascular system's mean 
arterial pressure. The anesthetic drug is a mixture of 
isoflurane and atracurium. An approximate model 
relating muscle relaxation to the percent isoflurane 
in the mixture is 
P(s) _ 
7.63 x 10"2 
U(s) ~ s2 + 1.15^ + 0.28 
where P(s) is muscle relaxation measured as a 
fraction of total paralysis (normalized to unity) 
and U(s) is the percent mixture of isoflurane (Link-
ens, 1992). [Section: 4.6] 
a. Find the damping ratio and the natural frequency 
of the paralysis transient response. 
b. Find the maximum possible percent paralysis if a 
2% mixture of isoflurane is used. 
c. Plot the step response of paralysis if a 1 % mix-
ture of isoflurane is used. 
d. What percent isoflurane would have to be used 
for 100% paralysis? 
52. To treat acute asthma, the drug theophylline is 
infused intravenously. The rate of change of the 
drug concentration in the blood is equal to the 
difference between the infused concentration and 
the eliminated concentration. The infused concen-
tration is i{t)/Vd, where i(t) is the rate of flow of the 
drug by weight and Vd is the apparent volume and 
depends on the patient. The eliminated concentra-
tion is given by k\Qc(t), where c(t) is the current 
concentration of the drug in the blood and k\o is the 
elimination rate constant. The theophylline concen-
tration in the blood is critical—if it is too low, the 
drug is ineffective; if too high, the drug is toxic 
(Jannett, 1992). You will help the doctor with 
your calculations. 
a. Derive an equation relating the desired blood 
concentration, Co, to the required infusion rate 
by weight of the drug, IR. 
b. Derive an equation that will tell how long the 
drug must be administered to reach the desired 
blood concentration. Use both rise time and 
settling time. 
c. Find the infusion rate of theophylline if VD = 
600 ml, kio = 0.07 h - 1, and the required blood 
level of the drug is 12mcg/ml ("meg" means micro-
grams). See (Jannett, 1992); for a description of 
parameter values. 
d. Find the rise and settling times for the constants 
in c. 
Upper motor neuron disorder patients can benefit 
and regain useful function through the use of func-
tional neuroprostheses. The design requires a good 
understanding of muscle dynamics. In an experi-
ment to determine muscle responses, the identified 
transfer function was (Zhou, 1995) 
_ 2.5e-°0085(l + 0.172^)(1 +0.00¾) 
(l+0.07s)2(l + 0.05s)2 
Find the unit step response of this transfer function. 
When electrodes are attached to the mastoid bones 
(right behind the ears) and current pulses are ap-
plied, a person will sway forward and backward. It 
has been found that the transfer function from the 
current to the subject's angle (in degrees) with 
respect to the vertical is given by (Nashner, 1974) 
B(s) _ 
5.8(0.35+ l ) e - ° b 
I(s) ~ (s + l)(s2/1.22 + O.fo/1.2 + 1) 
a. Determine whether a dominant pole approxima-
tion can be applied to this transfer function. 
b. Find the body sway caused by a 250 |xA pulse of 
150 msec duration. 
55. A MOEMS (optical MEMS) is a MEMS (Micro 
Electromechanical Systems) with an optical fiber 
channel that takes light generated from a laser 
diode. It also has a photodetector that measures 
light intensity variations and outputs voltage varia-
tions proportional to small mechanical device de-
flections. Additionally, a voltage input is capable of 
deflecting the device. The apparatus can be used as 
an optical switch or as a variable optical attenuator, 
and it does not exceed 2000 [xm in any dimension. 
Figure P4.12 shows input-output signal pairs used to 
identify the parameters of the system. Assume a 
second-order transfer function and find the system's 
transfer function (Borovic, 2005), 
53. 
54. 
55. 

222 
Chapter 4 
Time Response 
Open-Loop Responses 
E 
c 
x 2 
-2 
Open-Loop Response 
(simulated, d = 0.8) 
Open-Loop Response 
(experimental) 
500 
t[us] 
FIGURE P4.12 
1000 
1500 
56. The response of the deflection of a fluid-filled cathe-
ter to changes in pressure can be modeled using a 
second-order model. Knowledge of the parameters 
of the model is important because in cardiovascular 
applications the undamped natural frequency should 
be close to five times the heart rate. However, due to 
sterility and other considerations, measurement of 
the parameters is difficult. A method to obtain trans-
fer functions using measurements of the amplitudes 
of two consecutive peaks of the response and their 
timing has been developed (Glantz, 1979). Assume 
that Figure P4.13 is obtained from catheter measure-
ments. Using the information shown and assuming a 
second-order model excited by a unit step input, find 
the corresponding transfer function. 
57. Several factors affect the workings of the kidneys. 
For example, Figure P4.14 shows how a step change 
in arterial flow pressure affects renal blood flow in 
rats. In the "hot tail" part of the experiment, pe-
ripheral thermal receptor stimulation is achieved by 
inserting the rat's tail in heated water. Variations 
between different test subjects are indicated by the 
vertical lines. It has been argued that the "control" 
and "hot tail" responses are identical except for 
their steady-state values (DiBona, 2005). 
1 
2 
3 
Time (sec) 
FIGURE P4.14 
1.6 
1.4 
1.2 
3 
'& 0.8 
I 
0.6 
0.4 • 
0.2 -
Step Response 
System: T 
' 
Time (sec): 0.0505) 
Ampliiude: LIS 
i 
i System: T 
J Time (sec): 0.0674 f 
I Ampliiude: 0.923 
0.05 
0.15 
Time (sec) 
FIGURE P4.13 

Problems 
223 
a. Using Figure P4.14, obtain the normalized 
(cfina| = 1) transfer functions for both responses. 
b. Use MATLAB to prove or dis- 
MATLAB 
prove the assertion about 
^ ^ Q ) 
the "control" and "hot 
tail" responses. 
58. The transfer function of a nano-positioning device 
capable of translating biological samples within a 
few |xm uses a piezoelectric actuator and a linear 
variable differential transformer (LDVT) as a 
displacement sensor. The transfer function from 
input to displacement has been found to be 
(Salapaka, 2002) 
Infusion Pump 
Human Response 
G(s) = 
9.7 x 1 0 V - 144005 + 106.6 x 106) 
(s2 + 38005 + 23.86 x 106){s2 + 2405 + 2324.8 x 103 
Use a dominant-pole 
argument 
to find 
an 
equivalent transfer function with the 
MATLAB 
same numerator but only three poles. 
^ j ^ J ^ ) 
Use MATLAB t o find t h e 
a c t u a l 
s i z e and approximate system u n i t 
s t e p 
r e s p o n s e s , p l o t t i n g them on t h e same 
g r a p h . Explain the differences between both 
responses given that both pairs of poles are so far 
apart. 
59. At some point in their lives most people will suffer 
from at least one onset of low back pain. This 
disorder can trigger excruciating pain and tempo-
rary disability, but its causes are hard to diagnose. 
It is well known that low back pain alters motor 
trunk patterns; thus it is of interest to study the 
causes for these alterations and their extent. Due 
to the different possible causes of this type of pain, 
a "control" group of people is hard to obtain for 
laboratory studies. However, pain can be stimu-
lated in healthy people and muscle movement 
ranges can be compared. Controlled back pain 
can be induced by injecting saline solution directly 
into related muscles or ligaments. The transfer 
function from infusion rate to pain response was 
obtained experimentally by injecting a 5% saline 
solution at six different infusion rates over a period 
of 12 minutes. Subjects verbally rated their pain 
every 15 seconds on a scale from 0 to 10, with 0 
indicating no pain and 10 unbearable pain. Several 
trials were averaged and the data was fitted to the 
following transfer function: 
G(s) = 
9.72 x 10~8(5 + 0.0001) 
[s + 0.009)2 (s2 + 0.018^ + 0.0001) 
Constant 
infusion 
rate 
M{s) 
G(s) 
Constant 
back pain 
FIGURE P4.15 
For experimentation it is desired to build an auto-
matic dispensing system to make the pain level 
constant as shown in Figure P4.15. It follows that 
ideally the injection system transfer function has 
to be 
M{s) = 
1 
G(s) 
to obtain an overall transfer function M(s)G(s) RS 1. 
However, for implementation purposes M(s) must 
have at least one more pole than zeros (Zedka, 
1999). Find a suitable transfer function, M(s) by 
inverting G(s) and adding poles that are far from 
the imaginary axis. 
60. An artificial heart works in closed loop by varying 
its pumping rate according to changes in signals 
from the recipient's nervous system. For feedback 
compensation design it is important to know the 
heart's open-loop transfer function. To identify this 
transfer function, an artificial heart is implanted in a 
calf while the main parts of the original heart are left 
in place. Then the atrial pumping rate in the original 
heart is measured while step input changes are 
effected on the artificial heart. It has been found 
that, in general, the obtained response closely 
resembles that of a second-order system. In one 
such experiment it was found that the step response 
has a %OS = 30% and a time of first peak Tp = 
127 sec (Nakamura, 2002). Find the corresponding 
transfer function. 
61. An observed transfer function from voltage poten-
tial to force in skeletal muscles is given by (lonescu, 
2005) 
T(s) = 
450 
> + 5)(5+ 20) 
a. Obtain the system's impulse response. 
b. Integrate the impulse response to find the step 
response. 
c. Verify the result in Part b by obtaining the step 
response using Laplace transform techniques. 
62. In typical conventional aircraft, longitudinal flight 
model linearization results in transfer functions with 

224 
Chapter 4 
Time Response 
two pairs of complex conjugate poles. Consequently, 
the natural response for these airplanes has two 
modes in their natural response. The "short period" 
mode is relatively well-damped and has a high-
frequency oscillation. The "plugoid mode" is lightly 
damped and its oscillation frequency is relatively 
low. For example, in a specific aircraft the transfer 
function from wing elevator deflection to nose angle 
(angle of attack) is (McRuer, 1973) 
26.12(^ + 0.0098)(5 + 1.371; 
(52 + 8.99 x 10-¾ + 3.97 x 10-3)(^2 + 4.215 + 18.23) 
a. Find which of the poles correspond to the short 
period mode and which to the phugoid mode. 
b. Peform a "phugoid approximation" (dominant-
pole approximation), retaining the two poles and 
the zero closest to the; co-axis. 
c. Use MATLAB to compare the step 
MATLAB 
responses of the original 
transfer function and the 
approximation. 
MATLAB 
63. A crosslapper is a machine that 
takes as an input a light fiber 
fabric and produces a heavier 
fabric by laying the original fabric in 
layers rotated by 90 degrees. A feedback 
system is required in order to maintain 
consistent product width and thickness 
by controlling its carriage velocity. 
The transfer function from servomotor 
torque, Tm(s), to carriage velocity, 
Y(s), 
was developed for such a machine 
(Kuo, 
2008) . Assume that the transfer 
function is : 
c(s) = Y(s) 
3334 + 202s3 + 10061s2 + 24332s+170704 
s1 + 8s6 + 464s5+2411s" + 52899s3 + 16782 9s2 + 913599s + 1076555 
a. Use MATLAB to find the partial fraction 
residues and poles of G(s). 
b. Find an approximation to G{s) by ne-
glecting the second-order terms found 
in a. 
c. Use MATLAB to plot on one graph the step 
response of the transfer function 
given above and the approximation 
found in b. Explain the differences 
between the two plots . 
64. Although the use of fractional 
MATLAB 
calculus in control systems is 
not new, in the last decade there 
is increased interest in its use for sev-
eral reasons. The most relevant are that 
fractional calculus differential equa-
tions may model certain systems with 
higher accuracy than integer diffe-
rential equations, and that fractional 
calculus compensators might exhibit ad-
vantageous properties for control system 
design. An example of a transfer function 
obtained through fractional calculus is: 
G ( s ) =
 s2.5 + 4si.7 + 3so.5 + 5 
This function can be approximated with 
an integer rational transfer function 
(integer powers of s) using Oustaloup's 
method (Xue, 2005). We ask you now to do a 
little research and consult the afore-
mentioned reference to find and run an 
M-file that will calculate the integer 
rational transfer function approxima-
tion to G(s) and plot its step response . 
65. Mathematical modeling and control of pH pro-
cesses are quite challenging since the processes are 
highly nonlinear, due to the logarithmic relation-
ship between the concentration of hydrogen ions 
[H+] and pH level. The transfer function from 
Ya(s) 
input pH to output pH is 
14.49e-4-9 
G„(s) = X„(s) 
.Ga(s) is a model for the anaerobic 
1478.265 + 1 
process in a wastewater treatment system in which 
methane bacteria need the pH to be maintained in its 
optimal range from 6.8 to 7.2 {Jiayu, 2009). Similarly, 
(Elarafi, 2008) used empirical techniques to model a 
pH neutralization plant as a second-order system 
with a pure delay, yielding the following transfer 
function relating output pH to input pH: 
GP(s) = YP(s) 
XP(s) 
1.716 x ICrV 3 0 5 
s2 + 6.989 x K r t + 1.185 x 10-6 
a. Find 
analytical 
expressions 
for 
the 
unit-
step responses ya(t) and yp{t) for the two 

Problems 
225 
processes, Ga(s) and Gp(s). 
(Hint: Use the time shift theorem in Table 2.2). 
b. Use Simulink to plot ya(t) and ^ ™^ < 
yp{t) 
on a single graph. 
^ » 1 ^ ^ 
66. Using wind tunnel tests, insect flight dynamics can 
be studied in a very similar fashion to that of man-
made aircraft. Linearized longitudinal flight equa-
tions for a bumblebee have been found in the 
unforced case to be 
-8.792 x 10"3 
0.56 x 1(T3 
-1.0 x 10-3 
-13.79 x 10" 
-0.347 x 10-3 -11.7 x 10-3 -0.347 x 10-3 
0 
0.261 
-20.8 x 10-3 
-96.6 x 10"3 
0 
0 
0 
1
0 
where u — forward velocity; vv = vertical velocity, 
q = angular pitch rate at center of mass, and 9 = 
pitch angle between the flight direction and the 
horizontal (Sun, 2005). 
a. Use MATLAB to obtain the sys- 
MATLAB 
tern's e i g e n v a l u e s . 
^ j l Q P 
b. Write the general form of the state-transition 
matrix. How many constants would have to be 
found? 
b. Using the A, B, and C matrices of Part a, obtain 
the converter's transfer function 
State Space 
67. A dc-dc converter is a device that takes as 
an input an unregulated dc voltage and 
provides a regulated dc voltage as its 
output. The output voltage may be lower (buck con-
verter), higher (boost converter), or the same as the 
input voltage. Switching dc-dc converters have a semi-
conductor active switch (BJT or FET) that is closed 
periodically with a duty cycle d in a pulse width 
modulated (FWM) manner. For a boost converter, 
averaging techniques can be used to arrive at the 
following state equations (Van Dijk, 1995): 
L^± 
= -(l-d)uc 
+ Es 
at 
C — = ( 1 - < * K - -
where L and C are respectively the values of internal 
inductance and capacitance; &, is the current through 
the internal inductor; R is the resistive load connected 
to the converter; Es is the dc input voltage; and the 
capacitor voltage, uc, is the converter's output. 
a. Write the converter's equations in the form 
x = Ax + Bu 
y =Cx 
assuming d is a constant. 
EM 
State Space 
.6] 
Xi 
X2 
Xl 
.X1. 
+ 1 
0 
68. An IPMC (ionic polymer-metal com-
posite) is a Nafion sheet plated with 
gold on both sides. An IPMC bends when an electric 
field is applied across its thickness. IPMCs have 
been used as robotic actuators in several applica-
tions and as active catheters in biomedical app-
lications. With the aim of improving actuator 
settling times, a state-space model has been devel-
oped for a 20 mm x 10 mm x 0.2 mm polymer sam-
ple (Mallavarapu, 2001): 
xi 
-8.34 
-2.26 
x2 
1 
0 
y = [12.54 2.26] 
where u is the applied input voltage and v is the 
deflection at one of the material's tips when the 
sample is tested in a cantilever arrangement. 
a. Find the state-transition matrix for the system. 
b. From Eq. (4.109) in the text, it follows that if a 
system has zero initial conditions the system 
output for any input can be directly calculated 
from the state-space representation and the 
state-transition matrix using 
y{t) = Cx(t) = J C<P(t - r) Bu(t)dr 
Use this equation to find the zero initial condition 
unit step response of the IPMC material sample. 
c. Use MATLAB to verify that your 
MATLAB 
step response calculation in 
^Ei9P 
Part b is correct. 
DESIGN PROBLEMS 
69. Find an equation that relates 2% settling 
W'leyPLUs 
time to the value of fv for the transla- 
C H B I 
tional mechanical system shown in 
control solutions 
Figure P4.16. Neglect the mass of all components. 
[Section: 4.6] 
fv 
/(0-
2N/m 
FIGURE PA. 16 

226 
Chapter 4 
Time Response 
70. Consider the translational mechanical system shown 
in Figure P4.17. A 1-pound force,/(/), is applied at 
t = 0. If fv = 1, find K and M such that the response 
is characterized by a 4-second settling time and a 
1-second peak time. Also, what is the resulting 
percent overshoot? [Section: 4.6] 
7(/) 
1 kg-m2 
M, 
1 kg-m2 
1 N-m/rad 
yMKM 
I N-m-s/rad 
I 
/;• 
1 
-/WWV-
-kn/ 
M 
-
FIGURE P4.20 
fit) 
K 
FIGURE P4.17 
71. Given the translational mechanical system of 
Figure P4.17, where K = 1 and /(r) is a unit step, 
find the values of M and fv to yield a response with 
17% overshoot and a settling time of 10 seconds. 
[Section: 4.6] 
72. Find J and K in the rotational system shown in 
Figure P4.18 to yield a 30% overshoot and a sett-
ling time of 3 seconds for a step input in torque. 
[Section: 4.6] 
75. Find M and K, shown in the system of Figure P4.21, 
to yield x(t) with 10% overshoot and 15 seconds 
settling time for a step input in motor torque, Tm(t). 
[Section: 4.6] 
Tjfl 
7(/) 
i 
"h 
K 
FIGURE P4.18 
73. Given the system shown in Figure P4.19, find the 
damping, D, to yield a 30% overshoot in output 
angular displacement for a step input in torque. 
[Section: 4.6] 
/W-
For the motor: 
Ja = 1 kg-m2 
Da = 1 N-m-s/rad 
Ra=\Q 
Kb = 1 V-s/rad 
Kt = 1 N-m/A 
FIGURE P4.21 
7(/) 6,(/) 
kg-m: 
/V, = 25 
iV-> = 5 
N 3=10 
N 
5 4 N-m/rad 
f 
4 Mir 
FIGURE P4.19 
74. For the system shown in Figure P4.20, 
find N1/N2 so that the settling time 
for a step torque input is 16 seconds. 
[Section: 4.6] 
76. If Vj(t) is a step voltage in the network shown in 
Figure P4.22, find the value of the resistor such that a 
20% overshoot in voltage will be seen across the 
capacitor if C = 10~6 F and L = 1H. [Section: 4.6] 
Vi(t) 
FIGURE P4.22 
77. If Vj-(f) is a step voltage in the network 
shown in Figure P4.22, find the values 
of R and C to yield a 20% overshoot 
and a 1 ms settling time for vc(r) if 
Z, = 1H. [Section: 4.6] 
wiieyptus 
78. Given the circuit of Figure P4.22, where C = 10fiF, 
>ViJ4-< 
find R and L to yield 15% overshoot with a settling 
control solutions 
time of 7 ms for the capacitor voltage. The input, 
v(r), is a unit step. [Section: 4.6] 
WileyPLUS 
dJJJ 
Control Solutions 

Problems 
227 
79. For the circuit shown in Figure P4.23, find the 
values of R2 and C to yield 8% overshoot with 
a settling time of 1 ms for the voltage across 
the capacitor, with v,-(r) as a step input. [Section: 4.6] 
hydraulic pump is 
!•;(/) 
FIGURE P4.23 
80. Hydraulic pumps are used as inputs to 
statespace 
hydraulic circuits to supply pressure, just 
S ^ B 
as voltage sources supply potential to electric circuits. 
Applications for hydraulic circuits can be found in 
the robotics and aircraft industries, where hydraulic 
actuators are used to move component parts. Figure 
P4.24 shows the internal parts of the pump. A barrel 
containing equally spaced pistons rotates about the 
j'-axis. A swashplate, set at an angle, causes the 
slippers at the ends of the pistons to move the pistons 
in and out. When the pistons are moving across the 
intake port, they are extending, and when they are 
moving across the discharge port, they are retracting 
and pushing fluid from the port. The large and small 
actuators at the top and bottom, respectively, control 
the angle of the swashplate, a. The swashplate angle 
affects the piston stroke length. Thus, by controlling 
the swashplate angle, the pump discharge flow rate 
can be regulated. Assume the state equation for the 
x = 
(3.45 - 14000^) 
-0.255 x 10 
0.499 x 1011 
- 3 . 
-3.45 + 14000£, 
- 9 1 
-0.499 x 10 11 
«o, 
where x = 
a 
Pd 
and Pd is the pump discharge pressure (Manr-
ing, 1996). Find the value of controller flow 
gain, Kc, so that the damping ratio of the system's 
poles is 0.9. 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
81. High-speed rail pantograph. Problem 67c in Chap-
ter 
2 
asked 
you 
to 
find 
G(s) = (Yi,(s) -
Yeai{s))/FUp{s) (O'Connor, 1997). 
a. Use the dominant poles from this transfer func-
tion and estimate percent overshoot, damping 
ratio, natural frequency, settling time, peak time, 
and rise time. 
b. Determine if the second-order approximation is 
valid. 
MATLAB 
c. Obtain the step response of 
G(s) and. compare the results 
to Part a. 
82. Control of HIV/AIDS. In Chapter 3, 
state Space 
Problem 31, we developed a linearized 
Portplate 
Large actuator - 7 \ 
a 
| 
Discharge port 
Slipper 
SPrin8 
N Small actuator 
FIGURE PA.24 Pump diagram (Reprinted with permission of ASME.) 

228 
Chapter 4 
Time Response 
state-space model of HIV infection. The model 
assumed that two different drugs were used to 
combat the spread of the HIV virus. Since this 
book focuses on single-input, single-output systems, 
only one of the two drugs will be considered. We will 
assume that only RTIs are used as an input. Thus, in 
the equations of Chapter 3, Problem 31, «2 = 0 
(Craig, 2004). 
a. Show that when using only RTIs in the linear-
ized system of Problem 31 and substituting the 
typical parameter values given in the table of 
Problem 31c, the resulting state-space represen-
tation for the system is given by 
r ^ i 
r 
V 
= 
[" — 
0.04167 
c 
0.0217 -0.24 
0 
100 
X 
r T i 
V 
V 
+ 
y=[0 
0 1] 
r 5.2i 
-5.2 
0 . 
r T 1 
r 
\ ; 
-0.00581 
0.0058 
-2.4 
«i 
b. Obtain the transfer function from RTI efficiency 
Y(s) 
to virus count; namely find • , , .. 
Ui{s) 
c. Assuming RTIs are 100% effective, what will be 
the steady-state change of virus count in a given 
infected patient? Express your answer in virus 
copies per ml of plasma. Approximately how 
much time will the medicine take to reach its 
maximum possible effectiveness? 
83. Hybrid vehicle. Assume that the car motive dynam-
ics for a hybrid electric vehicle (HEV) can be 
described by the transfer function 
AVjs) _ 
1 
A^e(s)~ 190&s+ 10 
where AVis the change of velocity in m/sec and AFe 
is the change in excess motive force in N necessary 
to propel the vehicle. 
a. Find an analytical expression for Av<^ for a step 
change in excess motive force AFe = 2650 N. 
b. Simulate the system using 
MATLAB 
MATLAB. Plot the expression 
found in Part a together with 
your simulated plot. 
Cyber Exploration Laboratory 
Experiment 4.1 
Objective To evaluate the effect of pole and zero location upon the time 
response of first- and second-order systems. 
Minimum Required Software Packages MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
1. Given the transfer function G(s) = 
, evaluate settling time and rise time for 
s + a 
the following values of a: 1, 2, 3, 4. Also, plot the poles. 
2. Given the transfer function G(s) = -a 
r: 
w 
s2 + as + b 
a. Evaluate percent overshoot, settling time, peak time, and rise time for the 
following values: a = 4, b = 25. Also, plot the poles. 
b. Calculate the values of a and b so that the imaginary part of the poles remains 
the same but the real part is increased two times over that of Prelab 2a, and 
repeat Prelab 2a. 

Cyber Exploration Laboratory 
c. Calculate the values of a and b so that the imaginary part of the poles remains 
the same but the real part is decreased \ time over that of Prelab 2a, and repeat 
Prelab 2a. 
3. a. For the system of Prelab 2a, calculate the values of a and b so that the real part 
of the poles remains the same but the imaginary part is increased two times 
over that of Prelab 2a, and repeat Prelab 2a. 
b. For the system of Prelab 2a, calculate the values of a and b so that the real part 
of the poles remains the same but the imaginary part is increased four times 
over that of Prelab 2a, and repeat Prelab 2a. 
4. a. For the system of Prelab 2a, calculate the values of a and b so that the damping 
ratio remains the same but the natural frequency is increased two times over 
that of Prelab 2a, and repeat Prelab 2a. 
b. For the system of Prelab 2a, calculate the values of a and b so that the damping 
ratio remains the same but the natural frequency is increased four times over 
that of Prelab 2a, and repeat Prelab 2a. 
5. Briefly describe the effects on the time response as the poles are changed in each 
of Prelab 2, 3, and 4. 
Lab 
1. Using Simulink, set up the systems of Prelab 1 and plot the step response of 
each of the four transfer functions on a single graph by using the Simulink LTI 
Viewer. Also, record the values of settling time and rise time for each step 
response. 
2. Using Simulink, set up the systems of Prelab 2. Using the Simulink LTI Viewer, 
plot the step response of each of the three transfer functions on a single graph. 
Also, record the values of percent overshoot, settling time, peak time, and rise 
time for each step response. 
3. Using Simulink, set up the systems of Prelab 2a and Prelab 3. Using the Simulink 
LTI Viewer, plot the step response of each of the three transfer functions on a 
single graph. Also, record the values of percent overshoot, settling time, peak 
time, and rise time for each step response. 
4. Using Simulink, set up the systems of Prelab 2a and Prelab 4. Using the Simulink 
LTI Viewer, plot the step response of each of the three transfer functions on a 
single graph. Also, record the values of percent overshoot, settling time, peak 
time, and rise time for each step response. 
Postlab 
1. For the first-order systems, make a table of calculated and experimental values of 
settling time, rise time, and pole location. 
2. For the second-order systems of Prelab 2, make a table of calculated and experimental 
values of percent overshoot, settling time, peak time, rise time, and pole location. 
3. For the second-order systems of Prelab 2a and Prelab 3, make a table of 
calculated and experimental values of percent overshoot, settling time, peak 
time, rise time, and pole location. 
4. For the second-order systems of Prelab 2a and Prelab 4, make a table of 
calculated and experimental values of percent overshoot, settling time, peak 
time, rise time, and pole location. 

Chapter 4 
Time Response 
5. Discuss the effects of pole location upon the time response for both first- and 
second-order systems. Discuss any discrepancies between your calculated and 
experimental values. 
Experiment 4.2 
Objective 
To evaluate the effect of additional poles and zeros upon the time 
response of second-order systems. 
Minimum Required Software Packages 
MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
25 
1. a. Given the transfer function G(s) = -= 
--, evaluate the percent over-
w 
s2 + As + 25 
F 
shoot, settling time, peak time, and rise time. Also, plot the poles. 
b. Add a pole at -200 to the system of Prelab la. Estimate whether the transient 
response in Prelab la will be appreciably affected. 
c. Repeat Prelab lb with the pole successively placed at —20, — 10, and - 2 . 
2. A zero is added to the system of Prelab la at —200 and then moved to 
-50, — 20, — 10, - 5, and - 2 . List the values of zero location in the order 
of the greatest to the least effect upon the pure second-order transient 
response. 
3. Given the transfer function G(s) = 
^
/
^
^
^
, 
let a = 3 and b = 3.01, 
v 
(s + b)(s2 + 4s + 25) 
3.1, 3.3, 3.5, and 4.0. Which values of b will have minimal effect upon the pure 
second-order transient response? 
. ^ . 
, 
r 
c 
• 
y-./ x 
(25006/a)(s + a) 
4. Given the transfer function Gis) = -—V 
. — j - 
' „ . , let a = 30 and 
{s + b){s2 -f 40s + 2500) 
b = 30.01, 30.1, 30.5, 31, 35, and 40. Which values of b will have minimal effect 
upon the pure second-order transient response? 
Lab 
1. Using Simulink, add a pole to the second-order system of Prelab la and plot the 
step responses of the system when the higher-order pole is nonexistent, at 
-200, - 20, - 10, and - 2 . Make your plots on a single graph, using the Simulink 
LTI Viewer. Normalize all plots to a steady-state value of unity. Record percent 
overshoot, settling time, peak time, and rise time for each response. 
2. Using Simulink, add a zero to the second-order system of Prelab 1 a and plot the step 
responses of the system when the zero is nonexistent, at —200, - 50, 
-20, - 10, - 5, and - 2 . Make your plots on a single graph, using the Simulink 
LTI Viewer. Normalize all plots to a steady-state value of unity. Record percent 
overshoot, settling time, peak time, and rise time for each response. 
3. Using Simulink and the transfer function of Prelab 3 with a = 3, plot the 
step responses of the system when the value of b is 3, 3.01, 3.1, 3.3, 3.5, 
and 4.0. Make your plots on a single graph using the Simulink LTI Viewer. 
Record percent overshoot, settling time, peak time, and rise time for each 
response. 

Cyber Exploration Laboratory 
4. Using Simulink and the transfer function of Prelab 4 with a = 30, plot the 
step responses of the system when the value of b is 30, 30.01, 30.1, 30.5, 31, 35, 
and 40. Make your plots on a single graph, using the Simulink LTI Viewer. 
Record percent overshoot, settling time, peak time, and rise time for each 
response. 
Postlab 
1. Discuss the effect upon the transient response of the proximity of a higher-order 
pole to the dominant second-order pole pair. 
2. Discuss the effect upon the transient response of the proximity of a zero to the 
dominant second-order pole pair. Explore the relationship between the length of 
the vector from the zero to the dominant pole and the zero's effect upon the pure 
second-order step response. 
3. Discuss the effect of pole-zero cancellation upon the transient response of a 
dominant second-order pole pair. Allude to how close the canceling pole and zero 
should be and the relationships of (1) the distance between them and (2) the 
distance between the zero and the dominant second-order poles. 
Experiment 4.3 
Objective To use Lab VIEW Control Design and Simulation Module for time 
performance analysis of systems. 
Minimum Required Software Packages Lab VIEW with the Control De-
sign and Simulation Module 
Prelab One of the experimental direct drive robotic arms built at the MTT 
Artificial Intelligence Laboratory and the CMU Robotics Institute can be repre-
sented as a feedback control system with a desired angular position input for the 
robot's joint position and an angular position output representing the actual robot's 
joint position. 
The forward path consists of three transfer functions in cascade; (1) a compensa-
tor, Gc(s), to improve performance; (2) a power amplifier of gain, Ka = l; and (3) the 
transfer function of the motor and load, G(s) — 2292/s(s + 75.6). Assume a unity-
feedback system. Initially the system will be controlled with Gc(s) = 0.6234, which is 
called a proportional controller (McKerrow, 1991). 
1. Obtain the closed-loop system transfer function and use MATLAB to make a plot 
of the resulting unit step response. 
2. Repeat with Gc(s) = 3.05 + 0.045, which is called a PD controller. 
3. Compare both responses and draw conclusions regarding their time domain 
specifications. 
Lab Create a LabVIEW VI that uses a simulation loop to implement both 
controllers given in the Prelab. Plot the responses on the same graph for comparison 
purposes. 
Postlab Compare the responses obtained using your LabVIEW VI with those 
obtained in the Prelab. 

232 
Chapter 4 
Time Response 
Experiment 4.4 
Objective To use the LabVIEW Control Design and Simulation Module to 
evaluate the effect of pole location upon the time response of second-order systems. 
Minimum Required Software Packages LabVIEW with the Control 
Design and Simulation Module. 
Prelab Solve the Cyber Exploration Laboratory Experiment 4.1 Prelab, Part 2. 
Lab Build a LabVIEW VI to implement the functions studied in the Prelab of 
Cyber Exploration Laboratory 4.1, Part 2. 
Specifically for Prelab Part a, your front panel will have the coefficients 
of the second-order transfer function as inputs. The front panel will also have 
the following indicators: (1) the transfer function; (2) the state-space repre-
sentation; (3) the pole locations; (4) the step response graph; (5) the time response 
of the two states on the same graph; (6) the time response parametric data 
including rise time, peak time, settling time, percent overshoot, peak value; 
and final value. 
For Prelab, Part b, your front panel will also have the following indicators: 
(1) the step response graph, and (2) the parametric data listed above for Prelab, Part 
a, but specific to Part b. 
For Prelab, Part c, your front panel will also have the following indicators: 
(1) the step response graph, and (2) the parametric data listed above for Prelab, Part 
a, but specific to Part c. 
Run the VI to obtain the data from the indicators. 
Postlab Use your results to discuss the effect of pole location upon the step 
response. 
J Bibliography ^ 
Borovic, B., Liu, A. Q., Popa, D., and Lewis, F. L. Open-Loop versus Closed-Loop Control of 
MEMS Devices: Choices and Issues. Journal of Micromechanics, Microengineering, vol. 15, 
2005, pp. 1917-1924. 
Craig, I. K., Xia, X., and Venter, J. W.; Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
DiBona, G. F Physiology in Perspective: The Wisdom of the Body. Neural Control of the 
Kidney. American Journal of Physiology-Regulatory, 
Integrative and Comparative Physi-
ology, vol. 289, 2005, pp. R633-R641. 
Dorf, R. C. Introduction to Electric Circuits, 2d ed. Wiley, New York, 1993. 
Elarafi, M. G. M. K., and Hisham, S. B. Modeling and Control of pH Neutralization Using 
Neural Network Predictive Controller. International Conference on Control, Automation 
and Systems 2008, Seoul, Korea. Oct. 14-17, 2008. 
Franklin, G. F, Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems, 
2d ed. Addison-Wesley, Reading, MA, 1991. 
Glantz, A. S., and Tyberg, V. J. Determination of Frequency Response from Step Response: 
Application to Fluid-Filled Catheters. American Journal of Physiology, vol. 2, 1979, 
pp. H376-H378. 

Bibliography 
Good, M. G, Sweet, L. M., and Strobel, K. L. Dynamic Models for Control System Design of 
Integrated Robot and Drive Systems. Journal of Dynamic Systems, Measurement, and 
Control, March 1985, pp. 53-59. 
Ionescu, G, and De Keyser, R. Adaptive Closed-Loop Strategy for Paralyzed Skeletal 
Muscles. Proceedings of the IASTED International Conference on Biomedical Engineer-
ing, 2005. 
Jannett, T. G, and Aragula, S. Simulation of Adaptive Control of Theophylline Concentra-
tions. IEEE Control Systems, December 1992, pp. 32-37. 
Jiayu, K., Mengxiao W., Linan, M., and Zhongjun, X. Cascade Control of pH in an Anaerobic 
Waste Water Treatment System, 3d International Conference on Bioinformatics 
and 
Biomedical Engineering, 2009. 
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL 
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C. 1980. 
Kuo, B. G Automatic Control Systems, 5th ed. Prentice Hall, Upper Saddle River, NJ, 1987. 
Kuo, C-F. X, Tsai, C-G, and Tu, H-M. Carriage Speed Control of a Cross-lapper System for 
Nonwoven Web Quality. Fibers and Polymers, vol. 9, no. 4, 2008, pp. 495-502. 
Linkens, D. A. Adaptive and Intelligent Control in Anesthesia. IEEE Control Systems, 
December 1992, pp. 6-11. 
Mallavarapu, K., Newbury, K., and Leo, D. J. Feedback Control of the Bending Response 
of Ionic Polymer-Metal Composite Actuators. Proceedings of the SPIE, vol. 4329, 2001, 
pp. 301-310. 
Manring, N. D., and Johnson, R. E. Modeling and Designing a Variable-Displacement Open-
Loop Pump. Journal of Dynamic Systems, Measurements, and Control, vol. 118, June 1996, 
pp. 267-271. 
McKerrow, P. J. Introduction to Robotics. Addison-Wesley, Singapore, 1991. 
McRuer, D., Ashkenas, I., and Graham, D. Aircraft Dynamics and Automatic 
Control. 
Princeton University Press, 1973. 
Nakamura, M. et al. Transient Response of Remnant Atrial Heart Rate to Step Changes in 
Total Artificial Heart Output. Journal of Artificial Organs, vol. 5, 2002, pp. 6-12. 
Nashner, L. M., and Wolfson, P. Influence of Head Position and Proprioceptive Cues on Short 
Latency Postural Reflexes Evoked by Galvanic Stimulation of the Human Labyrinth. Brain 
Research, vol. 67, 1974, pp. 255-268. 
O'Connor, D. R, Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Philips, G L., and Nagle, H. T. Digital Control Systems Analysis and Design. Prentice Hall, 
Upper Saddle River, NJ, 1984. 
Salapaka, S., Sebastian, A., Cleveland, J. P., and Salapaka, M. V High Bandwidth Nano-
Positioner: A Robust Control Approach. Review of Scientific Instruments, vol. 73, No. 9, 
2002, pp. 3232-3241. 
Sawusch, M. R., and Summers, T. A. 1001 Things to Do with Your Macintosh. TAB Books, 
Blue Ridge Summit, PA, 1984. 
Schneider, R. T. Pneumatic Robots Continue to Improve. Hydraulics & Pneumatics, October 
1992, pp. 38-39. 
Stefani, R. T. Modeling Human Response Characteristics. COED Application Note No. 33. 
Computers in Education Division of ASEE, 1973. 
Sun, M., and Xiong, Y. Dynamic Flight Stability of a Hovering Bumblebee. Journal of 
Experimental Biology, vol. 208, 2005, pp. 447-459. 
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New 
York, 1968. 

234 
Chapter 4 
Time Response 
Van Dijk, E., Spruijt, J. N., O'Sullivan, D. M., and Klaasens, J. B. PWM-Switch Modeling 
of DC-DC Converters. IEEE Transactions on Power Electronics, vol. 10, 1995, pp. 659-
665. 
Xue, D , and Chen, Y. D. Sub-Optimum H2 Rational Approximations to Fractional Order 
Linear Systems. Proceedings oflDET/CIE 
2005. ASME 2005 International Design Engi-
neering Technical Conferences & Computers and Information in Engineering Conference, 
Long Beach. CA, 2005. pp. 1-10. 
Zedka, M., Prochazka, A., Knight, B., Gillard, D., and Gauthier, M. Voluntary and Reflex 
Control of Human Back Muscles During Induced Pain. Journal of Physiology, vol. 520, 
1999, pp. 591-604. 
Zhou, B. H., Baratta, R. V., Solomonow, M., and D'Ambrosia, R. D. The Dynamic Response 
of the Cat Ankle Joint During Load-Moving Contractions. IEEE Transactions on Bio-
medical Engineering, vol. 42, no. 4, 1995, pp. 386-393. 

Reduction of Multiple 
Subsystems 
5 
^Chapter Learning Outcomes^ 
After completing this chapter the student will be able to: 
• Reduce a block diagram of multiple subsystems to a single block representing the 
transfer function from input to output (Sections 5.1-5.2) 
• Analyze and design transient response for a system consisting of multiple sub-
systems (Section 5.3) 
• Convert block diagrams to signal-flow diagrams (Section 5.4) 
• Find the transfer function of multiple subsystems using Mason's rule (Section 5.5) 
l n 
i 
/ 
• 
v 
S t 3 t e 
S P 3 C e 
• Represent state equations as signal-flow graphs (Section 5.6) 
Represent multiple subsystems in state space in cascade, parallel, controller 
,(.„.n5;v)ra 
canonical, and observer canonical forms (Section 5.7) 
A 3 A 
• Perform transformations between similar systems using transformation matrices; 
,, , , 
i 
i. 
i. 
• 
/~ 
v 
Slate Space 
and diagonalize a system matrix (Section 5.8) 
(case Study Learning Outcomes]) 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to (a) find the closed-loop transfer function that represents the 
system from input to output; (b) find a state-space representation for the closed-
loop system; (c) predict, for a simplified system model, the percent overshoot, 
235 

Chapter 5 
Reduction of Multiple Subsystems 
settling time, and peak time of the closed-loop system for a step input; (d) calculate 
the step response for the closed-loop system; and (e) for the simplified model, 
design the system gain to meet a transient response requirement. 
• Given the block diagrams for the Unmanned Free-Swimming Submersible (UFSS) 
vehicle's pitch and heading control systems on the back endpapers, you will be able 
to represent each control system in state space. 
Introduction 
We have been working with individual subsystems represented by a block with its 
input and output. More complicated systems, however, are represented by the 
interconnection of many subsystems. Since the response of a single transfer function 
can be calculated, we want to represent multiple subsystems as a single transfer 
function. We can then apply the analytical techniques of the previous chapters and 
obtain transient response information about the entire system. 
In this chapter, multiple subsystems are represented in two ways: as block 
diagrams and as signal-flow graphs. Although neither representation is limited to a 
particular analysis and design technique, block diagrams are usually used for 
frequency-domain analysis and design, and signal-flow graphs for state-space 
analysis. 
Signal-flow graphs represent transfer functions as lines, and signals as small-
circular nodes. Summing is implicit. To show why it is convenient to use signal-flow 
graphs for state-space analysis and design, consider Figure 3.10. A graphical 
representation of a system's transfer function is as simple as Figure 3.10(a). 
However, a graphical representation of a system in state space requires representa-
tion of each state variable, as in Figure 3.10(6). In that example, a single-block 
transfer function requires seven blocks and a summing junction to show the state 
variables explicitly. Thus, signal-flow graphs have advantages over block diagrams, 
such as Figure 3.10(6): They can be drawn more quickly, they are more compact, and 
they emphasize the state variables. 
We will develop techniques to reduce each representation to a single transfer 
function. Block diagram algebra will be used to reduce block diagrams and Mason's 
rule to reduce signal-flow graphs. Again, it must be emphasized that these methods 
are typically used as described. As we shall see, however, either method can be used 
for frequency-domain or state-space analysis and design. 
Block Diagrams 
As you already know, a subsystem is represented as a block with an input, an output, 
and a transfer function. Many systems are composed of multiple subsystems, as in 
Figure 5.1. When multiple subsystems are interconnected, a few more schematic 
elements must be added to the block diagram. These new elements are summing 
junctions and pickoff points. All component parts of a block diagram for a linear, 
time-invariant system are shown in Figure 5.2. The characteristic of the summing 
junction shown in Figure 5.2(c) is that the output signal, C(s), is the algebraic sum of 
the input signals, Ri(s), Rt(s% and R3(s). The figure shows three inputs, but any 

5.2 
Block Diagrams 
237 
Pressurized 
crew 
compartment 
ET liquid 
oxygen tank 
Cryogenic oxygen/hydrogen 
tanks and fuel cells (oxygen for 
crew and compartment) 
Deployable radiator panels 
Payload bay doors 
Payload bay 
Fixed 
radiator 
panels 
SRH 
propallanl 
and casing 
RGS 
oxidizer 
tank 
QMS 
fuel 
oxidizer 
tank 
lank 
SRB holddown 
posts (4) 
Vertical tail 
• Elevon rub panels 
Rudder/speed brake 
Elevens 
Space shuttle 
main engines 
OMS 
engines (2) 
RCS engines 
(38 primary, 6 vernier) 
SRB nozzle 
SRB separation motors 
FIGURE 5.1 
The space shuttle consists of multiple subsystems. Can you identify those that 
are control systems or parts of control systems? 
m 
C(s) 
Signals 
(a) 
C(s) = Rl(s) + R7f.s)-R3(s) 
Rz(s) 
Summing junction 
(c) 
R(s) 
Input 
System 
C(.v) 
Output 
m 
s) 
R(s) 
R(s) 
R(s) 
R(s) 
Pickoff point 
id) 
FIGURE 5.2 
Components of a 
block diagram for a linear, 
time-invariant system 
number can be present. A pickoff point, as shown in Figure 5.2(d), distributes the 
input signal, R(s), undiminished, to several output points. 
We will now examine some common topologies for interconnecting subsystems 
and derive the single transfer function representation for each of them. These 
common topologies will form the basis for reducing more complicated systems to a 
single block. 
Cascade Form 
Figure 5.3(a) shows an example of cascaded subsystems. Intermediate signal values 
are shown at the output of each subsystem. Each signal is derived from the product 
of the input times the transfer function. The equivalent transfer function, Ge(s), 
shown in Figure 5.3(b), is the output Laplace transform divided by the input Laplace 

238 
Chapter 5 
Reduction of Multiple Subsystems 
/?(.v) 
0,(5) 
X2(s) = 
Gt(s)R(s) 
G2(s) 
X,C0 = 
G2(5)G,(J)/?(.V) 
GM 
C(s) = 
G3(.v)G2(s)G,(s)/?(s) 
(«) 
FIGURE 5.3 
a. Cascaded 
subsystems; b. equivalent 
transfer function 
R(s) 
Gi(s)G2(s)Gl(s) 
C(s) 
(b) 
transform from Figure 5.3(a), or 
Ge(s) = 
G3(S)G2(s)G{(s) 
(5.1) 
which is the product of the subsystems' transfer functions. 
Equation (5.1) was derived under the assumption that interconnected sub-
systems do not load adjacent subsystems. That is, a subsystem's output remains the 
same whether or not the subsequent subsystem is connected. If there is a change in 
the output, the subsequent subsystem loads the previous subsystem, and the 
equivalent transfer function is not the product of the individual transfer functions. 
The network of Figure 5.4(a) demonstrates this concept. Its transfer function is 
1 
Gl{s)-ns)-—r 
(5.2) 
Similarly, the network of Figure 5.4(6) has the following transfer function: 
1 
Glis) 
= YM= 
R2C2 
U2[S) 
V,(5) 
1 
s + R2C2 
(5.3) 
FIGURE 5.4 Loading in 
cascaded systems 
G,W = 
V,(s) 
(a) 
V2(.v) 
^2(.0 = 
(b) 
V,<s){.Z) 
Ci 
VAs) 
0 ^ ) = ^ = 0 2 ^ ) 0 , ( . 5 ) 
(c) 
GJ(s)=Y^ = KG2(s)Gl(s) 
V,{s) 
(d) 

5.2 Block Diagrams 
239 
If the networks are placed in cascade, as in Figure 5.4(c), you can verify that the 
transfer function found using loop or node equations is 
G(s) = Vi(s) 
RiCiR2C2 
s* + 
1 
+ 
1 
+ • 
1 
i?l C] 
R2 C2 
^2 C\ S + 
1 
(5.4) 
R\C\R2C2 
But, using Eq. (5.1), 
1 
G{s) ^ G2{s)Gl{s) = 
R\C\R2C2 
1 
1 
S + 
1 
(5.5) 
R\Cx 
R2C2J 
RiCxR2C2 
Equations (5.4) and (5.5) are not the same: Eq. (5.4) has one more term for the 
coefficient of s in the denominator and is correct. 
One way to prevent loading is to use an amplifier between the two networks, as 
shown in Figure 5.4(d). The amplifier has a high-impedance input, so that it does not 
load the previous network. At the same time it has a low-impedance output, so that it 
looks like a pure voltage source to the subsequent network. With the amplifier 
included, the equivalent transfer function is the product of the transfer functions and 
the gain, K, of the amplifier. 
Parallel Form 
Figure 5.5 shows an example of parallel subsystems. Again, by writing the output of 
each subsystem, we can find the equivalent transfer function. Parallel subsystems 
have a common input and an output formed by the algebraic sum of the outputs from 
all of the subsystems. The equivalent transfer function, Ge(s), is the output transform 
divided by the input transform from Figure 5.5(a), or 
Ge(s) = 
±Gi(s)±G2(S)±G3(s) 
(5.6) 
which is the algebraic sum of the subsystems' transfer functions; it appears in 
Figure 5.5(b). 
' Xi(s) = R(s)G1(s) 
R(s) 
G,(s) 
G2(s) 
X2(s) = R(s)G2(s) ± 
C(s) = i+G^s) ± G2(s) ± G3{s)]R{s) 
± 1 , 
G3(s) 
X3(s) = R(s)G3(s) 
(a) 
R(s) 
±Gl(s)±G2(s)±G3(s) 
C(s) 
(b) 
FIGURE 5.5 
a. Parallel sub-
systems; b. equivalent transfer 
function 

240 
Chapter 5 
Reduction of Multiple Subsystems 
Feedback Form 
The third topology is the feedback form, which will be seen repeatedly in subsequent 
chapters. The feedback system forms the basis for our study of control systems 
engineering. In Chapter 1, we defined open-loop and closed-loop systems and 
pointed out the advantage of closed-loop, or feedback control, systems over open-
loop systems. As we move ahead, we will focus on the analysis and design of 
feedback systems. 
Let us derive the transfer function that represents the system from its input to 
its output. The typical feedback system, described in detail in Chapter 1, is shown in 
Figure 5.6(a); a simplified model is shown in Figure 5.6(b).1 Directing our attention 
to the simplified model, 
But since C{s) = E(s)G(s), 
E{s) = R(s) T C{s)H{s) 
E(s) = C(s) 
G(s) 
(5.7) 
(5.8) 
Input 
transducer 
Controller 
Plant 
R(s) 
Input 
f 
+ > m 
•* Actuating 
signal 
(error) 
G2(s) 
H2(s) 
«*— 
G3(s) 
Hffl 
C(s) 
Output 
Feedback 
(a) 
Output 
transducer 
SL££ 
Input 
_S s m -
^Actuating 
signal 
(error) 
Plant and 
controller 
G(s) 
H(s) 
c$L 
Output 
Feedback 
ib) 
FIGURE 5.6 
a. Feedback 
control system; b. simplified 
model; c. equivalent transfer 
function 
m 
Input 
G(s) 
1 ± G(s)H(s) 
C(s) 
Output 
(O 
lrThe system is said to have negative feedback if the sign at the summing junction is negative and positive 
feedback if the sign is positive. 

5.2 Block Diagrams 
241 
Substituting Eq. (5.8) into Eq. (5.7) and solving for the transfer function, C(s)/R(s) = 
Ge(s), we obtain the equivalent, or closed-loop, 
transfer function shown in 
Figure 5.6(c), 
(5.9) 
The product, G(s)H(s), in Eq. (5.9) is called the open-loop transfer function, or 
loop gain. 
So far, we have explored three different configurations for multiple subsys-
tems. For each, we found the equivalent transfer function. Since these three forms 
are combined into complex arrangements in physical systems, recognizing these 
topologies is a prerequisite to obtaining the equivalent transfer function of a 
complex system. In this section, we will reduce complex systems composed of 
multiple subsystems to single transfer functions. 
Moving Blocks to Create Familiar Forms 
Before we begin to reduce block diagrams, it must be explained that the familiar 
forms (cascade, parallel, and feedback) are not always apparent in a block diagram. 
For example, in the feedback form, if there is a pickoff point after the summing 
junction, you cannot use the feedback formula to reduce the feedback system to a 
single block. That signal disappears, and there is no place to reestablish the 
pickoff point. 
This subsection will discuss basic block moves that can be made to order to 
establish familiar forms when they almost exist. In particular, it will explain how to 
move blocks left and right past summing junctions and pickoff points. 
Figure 5.7 shows equivalent block diagrams formed when transfer functions 
are moved left or right past a summing junction, and Figure 5.8 shows equivalent 
block diagrams formed when transfer functions are moved left or right past a pickoff 
point. In the diagrams the symbol = means "equivalent to." These equivalences, 
R(s) + 
m 
G{s) 
+ x-x 
+ i 
X(s) 
C(s) 
_ 
^- — - m + / 0 \ 
+ 
i 
G{s) 
G(s) cm 
X(s) 
FIGURE 5.7 Block diagram 
algebra for summing 
junctions—equivalent forms 
for moving a block a. to the left 
past a summing junction; b. to 
the right past a summing 
junction 

242 
Chapter 5 
Reduction of Multiple Subsystems 
R(s) 
G(s) 
R(s)G(s) 
R(s) 
Vfi 
R(s) 
G(s) 
G(s) 
R(s)G(s) 
R(s) 
1 
G{s) 
R(s) 
FIGURE 5.8 Block diagram 
algebra for pickoff points-
equivalent forms for moving a 
block a. to the left past a 
pickoff point; b. to the right 
past a pickoff point 
m 
R(s)G(s) 
G(s) 
R(s)G(s) 
R(s) 
R(s)G(s) 
R(-i) 
G(s) 
G(s) 
G(s) 
R(s)G(s) 
R(s)G(s) 
R(s)G(s) 
along with the forms studied earlier in this section, can be used to reduce a block 
diagram to a single transfer function. In each case of Figures 5.7 and 5.8, the 
equivalence can be verified by tracing the signals at the input through to the output 
and recognizing that the output signals are identical. For example, in Figure 5.7(a), 
signals R(s) and X(s) are multiplied by G(s) before reaching the output. Hence, both 
block diagrams are equivalent, with C(s) = R(s)G(s) ^fX{s)G(s). In Figure 5.7(b), 
R(s) is multiplied by G(s) before reaching the output, but X(s) is not. Hence, both 
block diagrams in Figure 5.7(b) are equivalent, with C(s) = R(s)G(s) =f X(s). For 
pickoff points, similar reasoning yields similar results for the block diagrams of 
Figure 5.8(A) and (b). 
Let us now put the whole story together with examples of block diagram 
reduction. 
FIGURE 5.9 Block diagram 
for Example 5.1 
Example 5.1 
Block Diagram Reduction via Familiar Forms 
PROBLEM: Reduce the block diagram shown in Figure 5.9 to a single transfer 
function. 
R(s) 
Gx(s) 
—, \ 
+1 
7 \ _ + / v A _ , 
—T 
G2(s) 
Hx(s) 
H2(s) 
H3(s) 
—*~ G3(5) 
cm 

5.2 Block Diagrams 
243 
SOLUTION: We solve the problem by following the steps in Figure 5.10. First, the 
three summing junctions can be collapsed into a single summing junction, as shown 
in Figure 5.10(a). 
Second, recognize that the three feedback functions, Hi(s), H2(s), and H^(s), are 
connected in parallel. They are fed from a common signal source, and their outputs are 
summed. The equivalent function is Hi(s) — Hi{s) + Hs(s). Also recognize that G2(s) 
and G${s) are connected in cascade. Thus, the equivalent transfer function is the 
product, G3(s)G2(s). The results of these steps are shown in Figure 5.10(6). 
Finally, the feedback system is reduced and multiplied by Gi(s) to yield the 
equivalent transfer function shown in Figure 5.10(c). 
R(s) 
+\ -*» 
G2(s) -~ 
H{(s) 
H2(s) 
N^s) 
G3(5) 
C(s) 
(a) 
R(s) 
Gds) 
Gi(s)G2(.s) 
•- 
BX{A-H&)+H&) 
ib) 
m 
G3(s)G2(s)G}(s) 
C(s) 
1 + G2{s)G2(s)[H{{s) - H2(s) + H3(s)] 
C(s) 
(c) 
FIGURE 5.10 Steps in solving 
Example 5.1: a. Collapse sum-
ming junctions; b. form equi-
valent cascaded system in the 
forward path and equivalent 
parallel system in the feedback 
path; c. form equivalent feed-
back system and multiply by 
cascaded Gt(s) 
Example 5.2 
Block Diagram Reduction by Moving Blocks 
PROBLEM: Reduce the system shown in Figure 5.11 to a single transfer function. 
R(s) +,0^1(5) 
Gi(s) 
W + ,Ov W 
G2(s) w±/6vW 
V7(J) 
V6(s) 
lids) 
fUs) 
O&i 
as) 
w 
H-sis) 
FIGURE 5.11 
Block diagram 
for Example 5.2 

244 
Chapter 5 
Reduction of Multiple Subsystems 
SOLUTION: In this example we make use of the equivalent forms shown in 
Figures 5.7 and 5.8. First, move G2(s) to the left past the pickoff point to create 
parallel subsystems, and reduce the feedback system consisting of G3(s) and H3(s). 
This result is shown in Figure 5.12(A). 
Second, reduce the parallel pair consisting of VG2(s) and unity, and push 
Gi(s) to the right past the summing junction, creating parallel subsystems in the 
feedback. These results are shown in Figure 5.12(6). 
Bb}+/r>Mft ®m m +/Q, vm. 
*W 
vm 
Hi(s) 
V7{s) 
G2{s) 
H2(s) 
V4(s) 
1 
G2(s) 
+ i®-
G3(s) 
l+G3(s)H3(s) 
C(s) 
R^ 
+/Ov 
V ^ 
+ <gK Gl(s)G2{5) 
VA(s) 
H2(s) 
C,(5) 
tf,(s) 
Gds) + 1 
G3(s) 
1 + G3(s)H3(s) 
C(s) 
m 
R(s) + <S<5—- 
G](s)G2{s) 
V4(s) 
H2(s) 
GM +#,(*) 
U-*i 
Gfr) 
\G2(s) 
)\l + G3{s)H3(s) 
C(s) 
R(s) 
G,(i)G2(5) 
1 + G2(s)H2(s) + 0,(5)02(5)//,(5) 
V4(5) 
-+ 1 
G3(5) 
\ 
G2(5) 
){l + G3(s)H3(s)j 
C(5) 
R(s) 
G,(5)G3(5)[1 + G2(5)] 
[1 + G2(5)tf2(5) + G,(5)G2(5)//,(5)][1 + G3(5)//3(5)] 
C(s) 
FIGURE 5.12 
Steps in the block diagram reduction for Example 5.2 

5.3 
Analysis and Design of Feedback Systems 
245 
Third, collapse the summing junctions, add the two feedback elements 
together, and combine the last two cascaded blocks. Figure 5.12(c) shows these results. 
Fourth, use the feedback formula to obtain Figure 5.12(d). 
Finally, multiply the two cascaded blocks and obtain the final result, shown in 
Figure 5.12(e). 
Students who are using MATLAB should now run ch5pl in Appendix B to 
perform block diagram reduction. 
MATLAB 
Skill-Assessment Exercise 5.1 
PROBLEM: Find the equivalent transfer function, T(s) = C(s)/R(s), for the system 
shown in Figure 5.13. 
R{s) + 
-H8-
+ A 
Qs) 
FIGURE 5.13 
Block diagram for Skill-Assessment Exercise 5.1 
ANSWER: 
T(s) = 
s3 + l 
2s4 +s2+2s 
The complete solution is at www.wiley.com/college/nise. 
Trylt 5.1 
Use the following MATLAB 
and Control System Toolbox 
statements to find the closed-
loop transfer function of the 
system in Example 5.2 if all 
d{s) = 1/(5 + 1) and all 
Hi(s) = l/s. 
Gl=tf(l,[l 1]); 
G2=G1;G3=G1; 
Hl=tf(l,[l 0]); 
H2=H1;H3=H1; 
System=append... 
(G1,G2,G3,H1,H2,H3); 
i n p u t = l ; o u t p u t = 3 ; 
Q=[l 
-4 
0 
0 
0 
2 
1
-
5
0
0 
3 
2 
1 - 5 - 6 
4 
2 
0 
0 
0 
5 
2 
0 
0 
0 
6 
3 
0 
0 0]; 
T=connect(System,... 
Q, input, output); 
T=t«T); T=minreal(T) 
In this section, we examined the equivalence of several block diagram 
configurations containing signals, systems, summing junctions, and pickoff points. 
These configurations were the cascade, parallel, and feedback forms. During block 
diagram reduction, we attempt to produce these easily recognized forms and then 
reduce the block diagram to a single transfer function. In the next section, we will 
examine some applications of block diagram reduction. 
t 
5.3 Analysis and Design of Feedback 
Systems 
An immediate application of the principles of Section 5.2 is the analysis and design of 
feedback systems that reduce to second-order systems. Percent overshoot, settling 
time, peak time, and rise time can then be found from the equivalent transfer function. 

246 
Chapter 5 
Reduction of Multiple Subsystems 
/?(.v) 
K 
s(s + a) 
cm 
FIGURE 5.14 Second-order feedback 
control system 
Consider the system shown in Figure 5.14, which can model a 
control system such as the antenna azimuth position control system. For 
example, the transfer function, K/s(s + a), can model the amplifiers, 
motor, load, and gears. From Eq. (5.9), the closed-loop transfer func-
tion, T(s), for this system is 
m = 
K 
s2 + as + K 
(5.10) 
where K models the amplifier gain, that is, the ratio of the output voltage to the input 
voltage. As K varies, the poles move through the three ranges of operation of a 
second-order system: overdamped, critically damped, and underdamped. For exam-
ple, for K between 0 and a2/4, the poles of the system are real and are located at 
a 
V«2 - AK 
(5.11) 
As K increases, the poles move along the real axis, and the system remains 
overdamped until K = a2/4. At that gain, or amplification, both poles are real and 
equal, and the system is critically damped. 
For gains above a2/4, the system is underdamped, with complex poles located at 
a , . V4K - a2 
(5.12) 
Now as K increases, the real part remains constant and the imaginary part increases. 
Thus, the peak time decreases and the percent overshoot increases, while the settling 
time remains constant. 
Let us look at two examples that apply the concepts to feedback control 
systems. In the first example, we determine a system's transient response. In the 
second example, we design the gain to meet a transient response requirement. 
m +^ 
-. 
?^ 
» 
9 * 
25 
s(s + 5) 
C(s) 
FIGURE 5.15 
Feedback system for 
Example 5.3 
Example 5.3 
Finding Transient Response 
PROBLEM: For the system shown in Figure 5.15, find the peak time, 
percent overshoot, and settling time. 
SOLUTION: The closed-loop transfer function found from Eq. (5.9) is 
25 
T(s) = s2 + 5s + 25 
CO, 
w = y/75 = 5 
From Eq. (4.18), 
From Eq. (4.21), 
2£(on = 5 
Substituting Eq. (5.14) into (5.15) and solving for ; yields 
£ = 0.5 
(5.13) 
(5.14) 
(5.15) 
(5.16) 

5.3 
Analysis and Design of Feedback Systems 
247 
Using the values for £ and con along with Eqs (4.34), (4.38), and (4.42), we find 
respectively, 
T„ = 
TV 
<«\A-r 
= 0.726 second 
(o, 
%OS = e-Wx/i 3? x 100 = 16.303 
4 
7\ = 
= 1.6 seconds 
(5.17) 
(5.18) 
(5.19) 
Student s who are using MATLAB should now run ch5p2 in Appendix B. You 
will learn how to perform block diagram reduction followed by an 
evaluation of the closed-loop system's transient response by find-
ing, Tp,%OSr and Ts. Finally, you will learn how to use MATLAB to 
generate a closed-loop step response. This exercise uses MATLAB to 
do Example 5 .3 . 
MAI LAB 
MATLAB's Simulink provides an alternative method of simulating 
feedback systems to obtain the time response. Students who are 
performing the MATLAB exercises and want to explore the added 
capability of MATLAB's Simulink should now consult Appendix C. 
Example C. 3 includes a discussion about, and an example of, the use 
of Simulink to simulate feedback systems with nonlinearities . 
| [ Example 5.4 
Gain Design for Transient Response 
PRO BLEM: Design the value of gain. K, for the feedback control system of Figure 5.16 
so that the system will respond with a 10% overshoot. 
R(s) 
+ ^ , 
-nxr-
K 
s(s + 5) 
C(s) 
FIGURE 5.16 
Feedback 
system for Example 5.4 
SOLUTION: The closed-loop transfer function of the system is 
K 
T(s) = 
From Eq. (5.20), 
and 
Thus, 
s2 + 5s + K 
2^(on = 5 
con = vK 
s 
2y/K 
(5.20) 
(5.21) 
(5.22) 
(5.23) 
Since percent overshoot is a function only of £, Eq. (5.23) shows that the percent 
overshoot is a function of K. 
Simulink 
Virtual Experiment 5.1 
Position Control 
Gain Design 
Put theory into practice 
designing the position control 
gain for the Quanser Linear 
Position Servo and simulating 
its closed-loop response in 
Lab VIEW. This conceptis used, 
for instance, to control a rover 
exploring the terrain of a planet. 
Virtual experiment are found 
on WileyPlus. 

248 
Chapter 5 
Reduction of Multiple Subsystems 
A 10% overshoot implies that £ = 0.591. Substituting this value for the 
damping ratio into Eq. (5.23) and solving for K yields 
K = 17.9 
(5.24) 
Although we are able to design for percent overshoot in this problem, we 
could not have selected settling time as a design criterion because, regardless of the 
value of K, the real parts, —2.5, of the poles of Eq. (5.20) remain the same. 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 5.2 
PROBLEM: For a unity feedback control system with a forward-path transfer 
function G(s) = — 
r, design the value of a to yield a closed-loop step response 
that has 5% overshoot. 
ANSWER: 
a = 5.52 
The complete solution is at www.wiley.com/college/nise. 
Trylt5.2 
Use the following MATLAB and Control 
System Toolbox statements to find f, co,„ 
%OS, Ts, Tp, and Tr for the closed-loop unity 
feedback system described in Skill-Assessment 
Exercise 5.2. Start with a = 2 and try some 
other values. A step response for the closed-
loop system will also be produced. 
a=2; 
numg=16; 
deng=poly([0 -a]); 
G=tf(numg,deng); 
T=feedback(G, 1); 
[numt,dent]=. . . 
t f d a t a ( T , 'v'); 
wn=sqrt{dent) 3)) 
z=dent (2)/(2*wn) 
Ts=4/(z*wn) 
Tp=pi/(wn*. . . 
s q r t ( l -zA2)) 
p o s = e x p ( - z * p i . . . 
/ s q r t d -z"2))*100 
Tr=(1.76*z"3 - . . . 
0 . 4 1 7 * z A 2 + 1.039* 
z + l)/wn 
step(T) 
( 5.4 Signal-Flow Graphs 
Signal-flow graphs are an alternative to block diagrams. Unlike block diagrams, 
which consist of blocks, signals, summing junctions, and pickoff points, a signal-flow 
graph consists only of branches, which represent systems, and nodes, which represent 
signals. These elements are shown in Figure 5.17(a) and (b), respectively. A system is 
represented by a line with an arrow showing the direction of signal flow through the 
/?|(.V) 
FIGURE 5.17 
Signal-flow 
G(s) 
graph components: a. system; 
* 
b. signal; c interconnection of 
systems and signals 
(a) 
o 
Vis) 
0) 
/?2(v>0 
R^s) 
C\(s) 
O Qt.s) 
c\w 

5.4 Signal-Flow Graphs 
249 
system. Adjacent to the line we write the transfer function. A signal is a node with 
the signal's name written adjacent to the node. 
Figure 5.17(c) shows the interconnection of the systems and the signals. Each signal 
is the sum of signals flowing into it. For example, the signal V(s) = Ri(s)Gi(s)— 
R2(s)G2{s) + R3(s)G3{s). The signal C2(s) = V{s)G5(s) = R^G^s^s) 
- R2{s) 
G2(s)G5(s)+R3(s)G3(s)G5(s). 
The signal C3(s) =-V(s)G6(s) 
=-R1{s)G1(s) 
Ge {s) + R2 {s) G2 (s) G(, (s) — R3 (s) G3 (s) Ge {s). Notice that in summing negative signals 
we associate the negative sign with the system and not with a summing junction, as in 
the case of block diagrams. 
To show the parallel between block diagrams and signal-flow graphs, we will 
take some of the block diagram forms from Section 5.2 and convert them to signal-
flow graphs in Example 5.5. In each case, we will first convert the signals to nodes 
and then interconnect the nodes with system branches. In Example 5.6, we will 
convert an intricate block diagram to a signal-flow graph. 
Example 5.5 
Converting Common Block Diagrams to Signal-Flow Graphs 
PROBLEM: Convert the cascaded, parallel, and feedback forms of the block diagrams 
shown in Figures 5.3(a), 5.5(a), and 5.6(6), respectively, into signal-flow graphs. 
SOLUTION: In each case, we start by drawing the signal nodes for that system. Next 
we interconnect the signal nodes with system branches. The signal nodes for the 
cascaded, parallel, and feedback forms are shown in Figure 5.18(a), (c), and (e), 
respectively. The interconnection of the nodes with branches that represent the 
subsystems is shown in Figure 5.18(6), (d), and (/) for the cascaded, parallel, and 
feedback forms, respectively. 
/«.v)0 
O 
O 
Oa.v) 
R(s)0 
VMS) 
VAs) 
O 
V|(.v) 
o 
V2(s) 
O 
VMs) 
G{{s) 
G2(s) 
G3(s) 
R(s)0 » O—*—O » On.' 
V2(v) 
V|(.v) 
(b) 
Oa.s) 
RMQ 
O 
Els) 
Oa.v) 
R(s)0—-—O—S^—O 
£(.v 
-H(s) 
(f) 
FIGURE 5.18 Building signal-
flow graphs: a. cascaded sys-
tem nodes (from Figure 5.3(a)); 
b. cascaded system signal-flow 
graph; c. parallel system nodes 
(from Figure 5.5(a)); d. parallel 
system signal-flow graph; e. 
feedback system nodes (from 
Figure 5.6(&)); f. feedback sys-
tem signal-flow graph 

250 
Chapter 5 
Reduction of Multiple Subsystems 
Example 5.6 
Converting a Block Diagram to a Signal-Flow Graph 
PROBLEM: Convert the block diagram of Figure 5.11 to a signal-flow graph. 
SOLUTION: Begin by drawing the signal nodes, as shown in Figure 5.19(a). Next, 
interconnect the nodes, showing the direction of signal flow and identifying each 
transfer function. The result is shown in Figure 5.19(6). Notice that the negative 
signs at the summing junctions of the block diagram are represented by the 
negative transfer functions of the signal-flow graph. Finally, if desired, simplify 
the signal-flow graph to the one shown in Figure 5.19(c) by eliminating signals that 
have a single flow in and a single flow out, such as V2(s), V6(s), V7(s), and Vs(s). 
«(.v) O 
O 
Vjls) 
O 
o 
o 
O 
V4(.v) 
o 
V7(s) 
o 
o 
Vtfs) 
O C(.v) 
1 
Rm O—*-
fids) 
«*) O 
C(.v) 
-//3(5) 
(c) 
FIGURE 5.19 
Signal-flow graph development: a. signal nodes; b. signal-flow graph; 
c. simplified signal-flow graph 

5.5 Mason's Rule 
251 
Skill-Assessment Exercise 5.3 
PROBLEM: Convert the block diagram of Figure 5.13 to a signal-flow graph. 
ANSWER: The complete solution is at www.wiley.com/college/nise. 
| 
5.5 Mason's Rule 
Earlier in this chapter, we discussed how to reduce block diagrams to single transfer 
functions. Now we are ready to discuss a technique for reducing signal-flow graphs to 
single transfer functions that relate the output of a system to its input. 
The block diagram reduction technique we studied in Section 5.2 requires 
successive application of fundamental relationships in order to arrive at the system 
transfer function. On the other hand, Mason's rule for reducing a signal-flow graph 
to a single transfer function requires the application of one formula. The formula was 
derived by S. J. Mason when he related the signal-flow graph to the simultaneous 
equations that can be written from the graph (Mason, 1953). 
In general, it can be complicated to implement the formula without making 
mistakes. Specifically, the existence of what we will later call nontouching loops 
increases the complexity of the formula. However, many systems do not have non-
touching loops. For these systems, you may find Mason's rule easier to use than block 
diagram reduction. 
Mason's formula has several components that must be evaluated. First, we must 
be sure that the definitions of the components are well understood. Then we must 
exert care in evaluating the components. To that end, we discuss some basic definitions 
applicable to signal-flow graphs; then we state Mason's rule and do an example. 
Definitions 
Loop gain. The product of branch gains found by traversing a path that starts at a 
node and ends at the same node, following the direction of the signal flow, without 
passing through any other node more than once. For examples of loop gains, see 
Figure 5.20. There are four loop gains: 
1. G2(s)Hi(s) 
(5.25a) 
2. G4{s)H2{s) 
(5.25b) 
3. G4(s)G5(s)H3(s) 
(5.25c) 
4. G4(s)G(,(s)H3(s) 
(5.25d) 
R{s) O 
O o.v) 
//3(5) 
Forward-path gain. The product of gains found 
FIGURE 5.20 Signal-flow graph for demonstrating Mason's rule 
by traversing a path from the input node to the output 
node of the signal-flow graph in the direction of signal flow. Examples of forward-path 
gains are also shown in Figure 5.20. There are two forward-path gains: 
1. 
G1(s)G2(s)G3(s)G4(s)G5(s)G7(s) 
2. 
G1(s)G2(s)G3(s)G4(s)G6(s)G1(s) 
(5.26a) 
(5.26b) 
Nontouching loops. Loops that do not have any nodes in common. In Figure 5.20, 
loop G2(s)Hi(s) does not touch loops G4(s)H2(s), G4(s)G5(s)H3(s), and G4(s)G6(s)H3(s). 

252 
Chapter 5 
Reduction of Multiple Subsystems 
Nontouching-loop gain. The product of loop gains from nontouching loops 
taken two, three, four, or more at a time. In Figure 5.20 the product of loop gain 
G2{s)Hi{s) and loop gain G4(s)H2(s) is a nontouching-loop gain taken two at a time. 
In summary, all three of the nontouching-loop gains taken two at a time are 
1. [^(j)ffi(*)][G4(*)#2(*)] 
2. [G2(s)Hl(s)}[G4(s)G5(s)H3(s)] 
3. [G2{s)Hi{s)][G4{s)G6(s)H3(s)] 
(5.27a) 
(5.27b) 
(5.27c) 
The product of loop gains [G4(s)Gs(s)H3(s)][G4(s)G()(s)H3(s)] is not a nontouching-
loop gain since these two loops have nodes in common. In our example there are no 
nontouching-loop gains taken three at a time since three nontouching loops do not 
exist in the example. 
We are now ready to state Mason's rule. 
Mason's Rule 
The transfer function, C(s)/R(s), of a system represented by a signal-flow graph is 
G(s) = R(s) 
A 
(5.28) 
where 
k = number of forward paths 
Tic = the kth forward-path gain 
A = 1 - X loop gains + X nontouching-loop gains taken two at a time - % 
nontouching-loop gains taken three at a time + % nontouching-loop gains 
taken four at a time — ... 
A* = A — 2 loop gain terms in A that touch the kth forward path. In other words, A& 
is formed by eliminating from A those loop gains that touch the kth forward 
path. 
Notice the alternating signs for the components of A. The following example will 
help clarify Mason's rule. 
Example 5.7 
Transfer Function via Mason's Rule 
PROBLEM: Find the transfer function, C(s)fR(s% for the signal-flow graph in 
Figure 5.21. 
R{s) O 
Gi(s) 
FIGURE 5.21 
Signal-flow graph 
for Example 5.7 
C2{s) 
G3(s) 
G4(s) 
Gs(s) 
HM 

5.5 Mason's Rule 
253 
SOLUTION: First, identify the forward-path gains. In this example there is only 
one: 
G1(5)G2(5)G3(5)G4(5)G5(5) 
(5.29) 
Second, identify the loop gains. There are four, as follows: 
1. G2(s)Hi(s) 
(5.30a) 
2. G4(s)H2{s) 
(5.30b) 
3. G7{s)H4{s) 
(5.30c) 
4. G2(s)G2(s)G4(s)G5(s)G6(s)G7(s)GB(s) 
(5.30d) 
Third, identify the nontouching loops taken two at a time. From Eqs. (5.30) and 
Figure 5.21, we can see that loop 1 does not touch loop 2, loop 1 does not touch 
loop 3, and loop 2 does not touch loop 3. Notice that loops 1, 2, and 3 all touch 
loop 4. Thus, the combinations of nontouching loops taken two at a time are as 
follows: 
Loop 1 and loop 2 : G2(s)Hi(s)G4{s)H2(s) 
(5.31a) 
Loop land loop 3 : 02(5)//1(5)07(5)//4(5) 
(5.31b) 
Loop 2 and loop 3 : G4(s)H2{s)G7(s)H4(s) 
(5.31c) 
Finally, the nontouching loops taken three at a time are as follows: 
Loops 1, 2, and 3 : G2(5)//i(s)G4(s)H2(s)G7(s)H4(s) 
(5.32) 
Now, from Eq. (5.28) and its definitions, we form A and A*. Hence, 
A = 1 -[G2{s)Ht($) 
+ G4(s)H2(s) + G7(s)H4(s) 
+ 
G2(s)G3(s)G4(s)G5(s)G6(s)G7(s)G8(s)] 
+{G2(S)HI(S)G4(S)H2(S) 
+ G2(5)//!(5)G7(5)//4(5) 
+ 
G4(s)H2(s)G7(s)H4(s)} 
-^2(5)//^5)04(5)//2(5)07(5)//4(5)] 
(5.33) 
We form A* by eliminating from A the loop gains that touch the kth forward 
path: 
Aj = 1 - 07(5)//4(5) 
(5.34) 
Expressions (5.29), (5.33), and (5.34) are now substituted into Eq. (5.28), 
yielding the transfer function: 
G ( J ) =
 T ^ 
= [Gi(s)G2(s)G3(s)G4(s)G5(s)}[l 
- 
G7(s)H4(s)} 
Since there is only one forward path, G(s) consists of only one term, rather than a 
sum of terms, each coming from a forward path. 

254 
Chapter 5 
Reduction of Multiple Subsystems 
WileyPLUS 
dJSJ 
Control Solutions 
Skill-Assessment Exercise 5.4 
PROBLEM: Use Mason's rule to find the transfer function of the signal-flow 
diagram shown in Figure 5.19(c). Notice that this is the same system used in 
Example 5.2 to find the transfer function via block diagram reduction. 
ANSWER: 
T(s) = 
Gi(s)G3(s)[l + G2(s)] 
[1 + G2(s)H2(s) + Gi(s)G2(s)Hi{s)][l + G3(s)H3(s) 
The complete solution is at www.wiley.com/college/nise. 
( 5.6 Signal-Flow Graphs of State Equations 
State Space 
In this section, we draw signal-flow graphs from state equations. At first this process 
will help us visualize state variables. Later we will draw signal-flow graphs and then 
write alternate representations of a system in state space. 
Consider the following state and output equations: 
Xi = 2x\ - 5x2 + 3x3 + 2r 
X2 = —6x\ — 2x2 + 2*3 + Sr 
xi = x\ — 3x2 — 4x3 + 7r 
y = -4xi + 6x2 + 9x3 
(5.36a) 
(5.36b) 
(5.36c) 
(5.36d) 
First, identify three nodes to be the three state variables, X!, X2, and X3; also 
identify three nodes, placed to the left of each respective state variable, to be the 
derivatives of the state variables, as in Figure 5.22(a). Also identify a node as the 
input, r, and another node as the output, y. 
Next interconnect the state variables and their derivatives with the defining 
integration, lis, as shown in Figure 5.22(b). Then using Eqs. (5.36), feed to each node 
the indicated signals. For example, from Eq. (5.36A), X\ receives 2xi - 5x2 + 3x3 + 2r, 
as shown in Figure 5.22(c). Similarly, ±2 receives —6x1 — 2x2 + 2x3 + 5r, as shown in 
Figure 5.22(d), and x3 receives x\ - 3x2 - 4x3 + 7r, as shown in Figure 5.22(e). 
Finally, using Eq. (5.36d), the output, y, receives —4xi + 6x2 + 9x3, as shown in 
Figure 5.19(f), the final phase-variable representation, where the state variables are 
the outputs of the integrators. 
R(,v) O 
0 
sXp) 
0 
A-,(.v) 
o 
o 
.vX,(.s) 
X2(.v) 
(a) 
O 
sXAs) 
O 
XAs) 
ON.v) 
I 
«(.v)0 
O——O 
O—*—O 
O—-—O 
On*) 
.vAy.v) 
X,(.v) 
A.*2h) 
X2(s) 
-sXAs) 
x,(.v) 
m 
FIGURE 5.22 Stages of development of a signal-flow graph for the system of Eqs. (5.36): 
a. Place nodes; b. interconnect state variables and derivatives; (figure continues) 

5.6 Signal-Flow Graphs of State Equations 
255 
XAs) 
Oris) 
X,{s) On*) 
X.{s) 
O Y(s) 
FIGURE 5.22 
(Continued) c. form dxi/dt; d. form dx2/dt; e. form dx^/dt; (figure continues) 

256 
Chapter 5 
Reduction of Multiple Subsystems 
FIGURE 5.22 (Continued) f. form output (figure end) 
Skill-Assessment Exercise 5.5 
PROBLEM: Draw a signal-flow graph for the following state and output equations: 
x = 
y = [0 1 0]x 
ANSWER: The complete solution is at www.wiley.com/college/nise. 
- 2 
0 
-3 
1 
- 3 
- 4 
01 
1 
-5 
x + 
[01 
0 
1 
In the next section, the signal-flow model will help us visualize the process of 
determining alternative representations in state space of the same system. We will 
see that even though a system can be the same with respect to its input and output 
terminals, the state-space representations can be many and varied. 
| 
5.7 Alternative Representations in State Space 
Stale Space 
In Chapter 3, systems were represented in state space in phase-variable form. 
However, system modeling in state space can take on many representations other 
than the phase-variable form. Although each of these models yields the same 
output for a given input, an engineer may prefer a particular one for several 
reasons. For example, one set of state variables, with its unique representation, 
can model actual physical variables of a system, such as amplifier and filter 
outputs. 

5.7 Alternative Representations in State Space 
257 
Another motive for choosing a particular set of state variables and state-space 
model is ease of solution. As we will see, a particular choice of state variables can 
decouple the system of simultaneous differential equations. Here each equation is 
written in terms of only one state variable, and the solution is effected by solving n 
first-order differential equations individually. 
Ease of modeling is another reason for a particular choice of state variables. 
Certain choices may facilitate converting the subsystem to the state-variable 
representation by using recognizable features of the model. The engineer learns 
quickly how to write the state and output equations and draw the signal-flow graph, 
both by inspection. These converted subsystems generate the definition of the state 
variables. 
We will now look at a few representative forms and show how to generate the 
state-space representation for each. 
Cascade Form 
We have seen that systems can be represented in state space with the state 
variables chosen to be the phase variables, that is, variables that are successive 
derivatives of each other. This is by no means the only choice. Returning to the 
system of Figure 3.10(A), the transfer function can be represented alternately as 
24 
R{s) 
(s + 2){s + 3)(s + 4) 
(5.37) 
Figure 5.23 shows a block diagram representation of this system formed by 
cascading each term of Eq. (5.37). The output of each first-order system block 
has been labeled as a state variable. These state variables are not the phase variables. 
R(s) 
24 
1 
5 + 2 
X3(s) 
1 
5 + 3 
X2(s) 
1 
5 + 4 
C(s) 
Xl(s) 
FIGURE 5.23 
Representation of Figure 3.10 system as cascaded first-order systems 
We now show how the signal-flow graph can be used to obtain a state-space 
representation of this system. In order to write the state equations with our new set 
of state variables, it is helpful to draw a signal-flow graph first, using Figure 5.23 as a 
guide. The signal flow for each first-order system of Figure 5.23 can be found by 
transforming each block into an equivalent differential equation. Each first-order 
block is of the form 
1 
Cross-multiplying, we get 
Q(s) = 
Ri(s) 
{s + at) 
(s + ai)Q(s)=Ri{s) 
After taking the inverse Laplace transform, we have 
dci{t) 
Solving for dc,{t)/dt yields 
dt 
dcj(t) 
dt 
+ afrit) = n(t) 
= -aiCi(t) + ri(t) 
(5.38) 
(5.39) 
(5.40) 
(5.41) 

Chapter 5 
Reduction of Multiple Subsystems 
i 
1 
7 
tf,(.v) O—*• 
•vC,(.v) 
24 
Cjis) 
(a) 
I 
s 
-2 
1 
Yx3m ^ 
1 
5 
-3 
(b) 
1 
7¾.^ ^ 
i 
s 
-4 
C(.v) 
X,(.v) 
FIGURE 5.24 
a. First-order subsystem; b. Signal-flow graph for Figure 5.23 system 
Figure 5.24(a) shows the implementation of Eq. (5.41) as a signal-flow graph. Here 
again, a node was assumed for Q(r) at the output of an integrator, and its derivative 
was formed at the input. 
Cascading the transfer functions shown in Figure 5.24(a), we arrive at the 
system representation shown in Figure 5.24(¾).2 Now write the state equations for 
the new representation of the system. Remember that the derivative of a state 
variable will be at the input to each integrator: 
x\ = -4*i + x2 
x2 = 
-3x2 + x3 
*3 = 
—2x3 
24r 
The output equation is written by inspection from Figure 5.24(6): 
y = c(t) = xi 
(5.42a) 
(5.42b) 
(5.42c) 
(5.43) 
The state-space representation is completed by rewriting Eqs. (5.42) and (5.43) in 
vector-matrix form: 
x = 
-4 
0 
0 
1 
-3 
0 
0" 
1 
-2^ 
x + 
' 0" 
0 
24 
y = [l 
0 0]x 
(5.44a) 
(5.44b) 
Comparing Eqs. (5.44) with Figure 5.24(6), you can form a vivid picture of the 
meaning of some of the components of the state equation. For the following 
discussion, please refer back to the general form of the state and output equations, 
Eqs. (3.18) and (3.19). 
For example, the B matrix is the input matrix since it contains the terms that 
couple the input, r(t), to the system. In particular, the constant 24 appears in both the 
signal-flow graph at the input, as shown in Figure 5.24(6), and the input matrix in 
Eqs. (5.44). The C matrix is the output matrix since it contains the constant that 
couples the state variable, Xt-, to the output, c(t). Finally, the A matrix is the system 
2 Note that node X3(s) and the following node cannot be merged, or else the input to the first integrator 
would be changed by the feedback from X2(s), and the signal X3(s) would be lost. A similar argument can 
be made for X2(s) and the following node. 

5.7 Alternative Representations in State Space 
259 
matrix since it contains the terms relative to the internal system itself. In the form of 
Eqs. (5.44), the system matrix actually contains the system poles along the diagonal. 
Compare Eqs. (5.44) to the phase-variable representation in Eqs. (3.59). In that 
representation, the coefficients of the system's characteristic polynomial appeared 
along the last row, whereas in our current representation, the roots of the charac-
teristic equation, the system poles, appear along the diagonal. 
Parallel Form 
Another form that can be used to represent a system is the parallel form. This form 
leads to an A matrix that is purely diagonal, provided that no system pole is a 
repeated root of the characteristic equation. 
Whereas the previous form was arrived at by cascading the individual first-
order subsystems, the parallel form is derived from a partial-fraction expansion of 
the system transfer function. Performing a partial-fraction expansion on our exam-
ple system, we get 
24 
12 
24 
12 
£(£)_ 
R{s) 
(5 + 2)(5 + 3)(5 + 4) 
(5 + 2) 
(5 + 3 ) ^ ( 5 + 4) 
(5.45) 
Equation (5.45) represents the sum of the individual first-order subsystems. To 
arrive at a signal-flow graph, first solve for C(s), 
C(s) = R(s) 
12 
2) -R(s) 
24 
(5 + 3) + R(s) 
12 
> + 4) 
(5.46) 
and recognize that C(s) is the sum of three terms. Each term is a first-
order subsystem with R(s) as the input. Formulating this idea as a 
signal-flow graph renders the representation shown in Figure 5.25. 
Once again, we use the signal-flow graph as an aid to obtaining 
the state equations. By inspection the state variables are the outputs 
of each integrator, where the derivatives of the state variables exist at 
the integrator inputs. We write the state equations by summing the 
signals at the integrator inputs: 
A'(.v) 
X] = -2*i 
+12r 
±2 = 
—3x2 
- 2 4 r 
ir3 = 
-4.«3 + 12r 
(5.47a) 
(5.47b) 
(5.47c) 
C(.v) 
The output equation is found by summing the signals that give c(t): 
y = c(t) = xi + x2 + XT, 
In vector-matrix form, Eqs. (5.47) and (5.48) become 
FIGURE 5.25 
Signal-flow representation of 
Eq. (5.45) 
(5.48) 
x = 
-2 
0 
0 
0 
-3 
0 
01 
0 
-4 
x + 
12 
-24 
12 
(5.49) 
and 
y=[\ 
1 l]x 
(5.50) 
Thus, our third representation of the system of Figure 3.10(a) yields a diagonal 
system matrix. What is the advantage of this representation? Each equation is a 

260 
Chapter 5 
Reduction of Multiple Subsystems 
MATLAB 
first-order differential equation in only one variable. Thus, we would solve these 
equations independently. The equations are said to be decoupled. 
Students who are using MATLAB should now run ch5p3 in Appendix B. 
You will learn how to use MATLAB to convert a transfer function to 
state space in a specified form. The exercise solves the previous 
example by representing the transfer function in Eq. (5.45) by the 
state-space representation in parallel form of Eq. (5.49). 
If the denominator of the transfer function has repeated real roots, the parallel 
form can still be derived from a partial-fraction expansion. However, the system 
matrix will not be diagonal. For example, assume the system 
(5 + 3) 
which can be expanded as partial fractions: 
€($) 
2 
+ 
m 
(.+1) 2 
( 5 + 1 ) ' (5+2) 
(5.51) 
(5.52) 
Proceeding as before, the signal-flow graph for Eq. (5.52) is 
shown in Figure 5.26. The term -1/(5 + 1) was formed by creating the 
signal flow from X2(s) to C(s). Now the state and output equations can 
be written by inspection from Figure 5.26 as follows: 
x\ = 
h = 
X3 = 
(0 = 
-Xx 
Xi 
+ *2 
-x2 
1 
-~x2 
+ 2r 
- 2*3 + >-
+ *3 
(5.53a) 
(5.53b) 
(5.53c) 
(5.53d) 
or, in vector-matrix form, 
FIGURE 5.26 
Eq. (5.52) 
Signal-flow representation of 
x = 
y = 
- 1 
1 
0 
0 - 1 0 
0 
0 
- 2 
'-H 
X 
x + 
0 
2 
1 
(5.54a) 
(5.54b) 
This system matrix, although not diagonal, has the system poles along the diagonal. 
Notice the 1 off the diagonal for the case of the repeated root. The form of the system 
matrix is known as the Jordan canonical form. 
Controller Canonical Form 
Another representation that uses phase variables is called the controller canonical 
form, so named for its use in the design of controllers, which is covered in Chapter 12. 
This form is obtained from the phase-variable form simply by ordering the phase 
variables in the reverse order. For example, consider the transfer function 
G{s) = 
52 + IS + 2 
R{s) 
5 3+ 952+ 265+ 24 
(5.55) 

5.7 Alternative Representations in State Space 
261 
The phase-variable form was derived in Example 3.5 as 
Xi 
X2 
*3 
= 
-
0 
0 
-24 
y = [2 7 
1 
01 
0 
1 
-26 
-9 
1] 
'xi~ 
X2 
X3 
Xf 
X2 
m 
+ 
"0" 
0 
l 
(5.56a) 
(5.56b) 
where v = c(t). Renumbering the phase variables in reverse order yields 
X3 
X2 
Xi 
— 
0 
0 
-24 
1 
0 
-26 
0 
1 
-9 
*3 
X2 
Xi 
+ 
U 
0 
1 
y = [2 7 1 
A'3 
X2 
Xi 
(5.57a) 
(5.57b) 
Finally, rearranging Eqs. (5.57) in ascending numerical order yields the controller 
canonical form3 as 
(5.58a) 
*1 
X2 
.¾. 
= 
-9 
1 
0 
v = [l 7 
-26 -24 
0 
0 
1 
0 
2] 
Xi 
x2 
. X 3 _ 
Xi 
X2 
. X 3 . 
+ 
1 
0 
0 
(5.58b) 
Figure 5.27 shows the steps we have taken on a signal-flow graph. Notice that the 
controller canonical form is obtained simply by renumbering the phase variables in 
the opposite order. Equations (5.56) can be obtained from Figure 5.27(a), and Eqs. 
(5.58) from Figure 5.27(b). 
Notice that the phase-variable form and the controller canonical form contain 
the coefficients of the characteristic polynomial in the bottom row and in the top row, 
Trylt 5.3 
Use the following MATLAB 
and Control System Toolbox 
statements to convert the 
transfer function of Eq. (5.55) 
to the controller canonical 
state-space representation of 
Eqs. (5.58). 
numg={l 7 2]; 
deng={l 9 2 6 24]; 
[Acc,Bcc, Ccc, Dec]. . . 
=tf 2ss(nurag, deng) 
(a) 
(b) 
FIGURE 5.27 Signal-flow graphs for obtaining forms for G{s) = C(s)/R{s) = (s2 + 7s + 2)/ 
(s3 + 9s2 + 26s + 24): a. phase-variable form; b. controller canonical form 
" Students who are using MATLAB to convert from transfer functions to state space using the command 
tf2ss will notice that MATLAB reports the results in controller canonical form. 

262 
Chapter 5 
Reduction of Multiple Subsystems 
respectively. System matrices that contain the coefficients of the characteristic polyno-
mial are called companion matrices to the characteristic polynomial. The phase-variable 
and controller canonical forms result in a lower and an upper companion system matrix, 
respectively. Companion matrices can also have the coefficients of the characteristic 
polynomial in the left or right column. In the next subsection, we discuss one of these 
representations. 
Observer Canonical Form 
The observer canonical form, so named for its use in the design of observers (covered in 
Chapter 12), is a representation that yields a left companion system matrix. As an example, 
the system modeled by Eq. (5.55) will be represented in this form. Begin by dividing all 
terms in the numerator and denominator by the highest power of s, s3, and obtain 
I I I 
C(s) 
7 + ? + ^ 
R(s) 
, 
9 26 24 
1 + - + -T + -5-
(5.59) 
Cross-multiplying yields 
1 
7 
2" 
- + T + 3 
C 
C^ 
CO 
R(s) = ' 
9 26 24 
1 + - + ^ + ^ 
Combining terms of like powers of integration gives 
CM 
C(s) = - [R{s) - 9C(s)] + \ [7R(s) - 26C(s)] + i [2R(s) - 24C{s)\ 
S 
S* 
' - 
Sr 
(5.60) 
(5.61) 
or 
C(s)=-
[R(s) - 9C(s)} + - ([7R(s) - 26C(s)} + - [2R(s) - 24C(s)] 
(5.62) 
Equation (5.61) or (5.62) can be used to draw the signal-flow graph. Start with three 
integrations, as shown in Figure 5.28(a). 
Using Eq. (5.61), the first term tells us that output C(s) is formed, in part, by 
integrating [R(s) - 9C(s)]. We thus form [R(s) - 9C(s)] at the input to the integrator 
closest to the output, C(s), as shown in Figure 5.28(b). The second term tells us that the 
A'(v) O 
R(s) 
FIGURE 5.28 
Signal-flow 
graph for observer canonical 
form variables: a. planning; 
b. implementation 
-24 
(b) 
C(.v) 
a.v) 

5.7 
Alternative Representations in State Space 
2 6 3 
term [7R(s) — 26C(s)] must be integrated twice. Now form [JR{s) — 26C(s)] at the input 
to the second integrator. Finally, the last term of Eq. (5.61) says [2R(s) - 24C(s)} must be 
integrated three times. Form [2R(s) — 24C(s)] at the input to the first integrator. 
Identifying the state variables as the outputs of the integrators, we write the 
following state equations: 
k\ = —9x\-\-X2 
-\-r 
(5.63a) 
x2 = -26xi 
+ *3 + 7r 
(5.63b) 
i 3 = -24xi 
+2r 
(5.63c) 
The output equation from Figure 5.28(b) is 
y = c(t)=Xl 
(5.64) 
In vector-matrix form, Eqs. (5.63) and (5.64) become 
(5.65a) 
- 9 
1 0 
-26 0 1 
-24 
0 Oj 
x + 
V 
7 
2 
v = [l 
0 0]x 
(5.65b) 
Notice that the form of Eqs. (5.65) is similar to the phase-variable form, except that the 
coefficients of the denominator of the transfer function are in the first column, and the 
coefficients of the numerator form the input matrix, B. Also notice that the observer 
canonical form has an A matrix that is the transpose of the controller canonical form, a B 
vector that is the transpose of the controller canonical form's C vector, and a C vector 
that is the transpose of the controller canonical form's B vector. We therefore say that 
these two forms are duals. Thus, if a system is described by A, B, and C, its dual is 
described by AD = A r, BD = Cr, CD = Br. You can verify the significance of duality 
by comparing the signal-flow graphs of a system and its dual, Figures 5.27(b) and 5.28(b), 
respectively. The signal-flow graph of the dual can be obtained from that of the original 
by reversing all arrows, changing state variables to their derivatives and vice versa, and 
interchanging C(s) and R(s), thus reversing the roles of the input and the output. 
We conclude this section with an example that demonstrates the application of 
the previously discussed forms to a feedback control system. 
IVylt 5.4 
Use the following MATLAB 
and Control System Toolbox 
statements to convert the 
transfer function of Eq. (5.55) 
to the observer canonical state-
space representation of Eqs. 
(5.65). 
numg=[l 7 2]; 
deng=[l 9 26 24]; 
[Acc,Bcc,Ccc, Dec]. . . 
=tf 2ss(numg, deng); 
Aoc=transpose(Acc) 
Boc=transpose(Ccc) 
Coc=transpose(Bcc) 
Example 5.8 
State-Space Representation of Feedback Systems 
PROBLEM: Represent the feedback control system shown in Fig- 
R( > 
ure 5.29 in state space. Model the forward transfer function in 
cascade form. 
SOLUTION: First we model the forward transfer function in cascade 
form. The gain of 100, the pole at -2, and the pole at -3 are shown 
FIGURE 5.29 Feedback control system for 
cascaded in Figure 5.30(a). The zero at -5 was obtained using the 
x a m p e ' 
method for implementing zeros for a system represented in phase-variable form, as 
discussed in Section 3.5. 
Next add the feedback and input paths, as shown in Figure 5.30(Z>). Now, by 
inspection, write the state equations: 
t(S 
-
h**l 
y 
* 
100(s + 5) 
(s + 2)(s + 3) 
C(s) 
X\ = —3X] + X2 
x2 = 
-2x2 + 100(r - c) 
(5.66a) 
(5.66b) 

264 
Chapter 5 
Reduction of Multiple Subsystems 
100 
FAs) O 
» 
K(v) O 
FIGURE 5.30 
Creating a 
signal-flow graph for the 
Figure 5.29 system: a. forward 
transfer function; b. complete 
system 
C(.v) 
But, from Figure 5.30(6), 
c = 5xi + fcfe - 3xi} - 2ri + x2 
(5.67) 
Substituting Eq. (5.67) into (5.66b), we find the state equations for the system: 
x\ = 
-3x1 
+X2 
(5.68a) 
x2 = -200xi - 102x2 + lOOr 
(5.68b) 
The output equation is the same as Eq. (5.67), or 
y = c{t)=2xA+x2 
(5.69) 
In vector-matrix form 
x = 
- 3 
1 
-200 
-102 x + 
0 
100 
y = [ 2 
llx 
(5.70a) 
(5.70b) 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 5.6 
PROBLEM: Represent the feedback control system shown in Figure 5.29 in state 
space. Model the forward transfer function in controller canonical form. 
ANSWER: 
x = 
-105 
-506 
1 
0 x + 
y = [100 
500 ]x 
The complete solution is at www.wiley.com/college/nise. 

5.7 Alternative Representations in State Space 
265 
In this section, we used transfer functions and signal-flow graphs to represent 
systems in parallel, cascade, controller canonical, and observer canonical forms, in 
addition to the phase-variable form. Using the transfer function C(s)/R(s) = 
(s + 3)/[(s + 4)(s + 6)] as an example, Figure 5.31 compares the aforementioned 
forms. Notice the duality of the controller and observer canonical forms, as 
demonstrated by their respective signal-flow graphs and state equations. In the 
next section, we will explore the possibility of transforming between representations 
without using transfer functions and signal-flow graphs. 
Form 
Transfer function 
Signal-flow diagram 
State equations 
Phase 
variable 
Parallel 
Cascade 
Controller 
canonical 
Observer 
canonical 
1 
(A-2+ 10s+ 24) 
* (5 + 3) 
-1/2 
3/2 
(s + 4) 
s + 6 
1 
(5 + 3) 
(s + 4) 
(s + 6) 
I 
(s2+Ws +24) 
* (s + 3) 
1
 +
 
3 
s + g 
R(s) O 
O.v) 
x = 
-24 
FIGURE 5.31 
State-space forms for C(s)/R(s) 
= (s + 3)/[{s + 4){s + 6)]. Note: y = c(r) 
0 
1 
- 2 4 - 1 0 
>- = [3 l]x 
x = 
y= 
r-4 
0" 
0 
- 6 
I l]x 
x + 3 
2 
- 6 
1 
0 - 4 
y = [-3 l]x 
-10 -24 
1 
0 
x + 1 
uU_ 
y=U 3]x 
-10 
1 
-24 
0 
y = [\ 0]x 
x + 

Chapter 5 
Reduction of Multiple Subsystems 
Similarity Transformations 
In Section 5.7, we saw that systems can be represented with different state variables 
even though the transfer function relating the output to the input remains the same. 
The various forms of the state equations were found by manipulating the transfer 
function, drawing a signal-flow graph, and then writing the state equations from the 
signal-flow graph. These systems are called similar systems. Although their state-
space representations are different, similar systems have the same transfer function 
and hence the same poles and eigenvalues. 
We can make transformations between similar systems from one set of 
state equations to another without using the transfer function and signal-flow 
graphs. The results are presented in this section along with examples. Students 
who have not broached this subject in the past or who wish to refresh their 
memories are encouraged to study Appendix L at www.wiley.com/college/nise 
for the derivation. The result of the derivation states: A system represented in 
state space as 
x = Ax + Bu 
y = Cx + Du 
(5.71a) 
(5.71b) 
can be transformed to a similar system, 
z = P 1APz + P 1Bu 
y = CPz + Du 
(5.72a) 
(5.72b) 
where, for 2~space, 
P = [U21U22] = [Pn Pn 
Pn 
Pn. 
x = [Pn Pn\ 
Pn 
Pn. 
r ^ i 1 
= Pz 
(5.72c) 
(5.72d) 
and 
z = 
Vlx 
(5.72e) 
Thus, P is a transformation matrix whose columns are the coordinates of the basis 
vectors of the Z\Zi space expressed as linear combinations of the X\X2 space. Let us 
look at an example. 

5.8 Similarity Transformations 
267 
Example 5.9 
Similarity Transformations on State Equations 
PROBLEM: Given the system represented in state space by Eqs. (5.73), 
x = 
0 
0 
- 2 
1 
0 
- 5 
0 
1 
- 7 
x + 
0 
0 
1 
y = [\ 
0 0]x 
(5.73a) 
(5.73b) 
transform the system to a new set of state variables, z, where the new state variables 
are related to the original state variables, x, as follows: 
z\ = 2*i 
zi = 3*i + 2½ 
Z3 = Xi+ 4*2 + 5*3 
SOLUTION: Expressing Eqs. (5.74) in vector-matrix form, 
z = 
2 
3 
1 
0 0 
2 
0 
4 5 
Using Eqs. (5.72) as a guide, 
P _ 1AP = 
2 0 0 
3 2 0 
1 
4 5 
0 
1
0 
0 
0 
1 
- 2 
- 5 
- 7 
x = P - 1x 
0.5 
0 
-0.75 
0.5 
0.5 
-0.4 
0 
0 
0.2 
-1.5 
1 
0 
-1.25 0.7 
0.4 
-2.5 
0.4 -6.2 
P J B 
2 0 0 
3 2 0 
1 
4 5 
C P = [ 1 
0 0 
0.5 
0 
0 
-0.75 
0.5 0 
0.5 
-0.4 
0.2 
= [0.5 0 
0] 
Therefore, the transformed system is 
z = 
-1.5 
-1.25 
-2.55 
1 
0.7 
0.4 
0 
0.4 
-6.2 
z + 
0 
0 
5 
y = {0.5 0 0]z 
(5.74a) 
(5.74b) 
(5.74c) 
(5.75) 
(5.76) 
(5.77) 
(5.78) 
(5.79a) 
(5.79b) 
Students who are using MATLAB should now run ch5p4 in Appendix B. 
You will learn how to perform similarity transformations. This 
exercise uses MATLAB to do Example 5 . 9 . 
MATLAB 

268 
Chapter 5 
Reduction of Multiple Subsystems 
Thus far we have talked about transforming systems between basis vectors in a 
different state space. One major advantage of finding these similar systems is 
apparent in the transformation to a system that has a diagonal matrix. 
Diagonalizing a System Matrix 
In Section 5.7, we saw that the parallel form of a signal-flow graph can yield a 
diagonal system matrix. A diagonal system matrix has the advantage that each state 
equation is a function of only one state variable. Hence, each differential equation 
can be solved independently of the other equations. We say that the equations are 
decoupled. 
Rather than using partial fraction expansion and signal-flow graphs, we can 
decouple a system using matrix transformations. If we find the correct matrix, P, the 
transformed system matrix, P_1AP, will be a diagonal matrix. Thus, we are looking 
for a transformation to another state space that yields a diagonal matrix in that space. 
This new state space also has basis vectors that lie along its state variables. We give a 
special name to any vectors that are collinear with the basis vectors of the new 
system that yields a diagonal system matrix: they are called eigenvectors. Thus, the 
coordinates of the eigenvectors form the columns of the transformation matrix, P, as 
we demonstrate in Eq. L.7 in Appendix L at www.wiley.com/college/nise. 
First, let us formally define eigenvectors from another perspective and then 
show that they have the property just described. Then we will define eigenvalues. 
Finally, we will show how to diagonalize a matrix. 
Definitions 
Eigenvector. The eigenvectors of the matrix A are all vectors, x; ^ 0, which under the 
transformation A become multiples of themselves; that is, 
AXJ = A,Xi 
(5.80) 
where Vs are constants. 
Figure 5.32 shows this definition of eigenvectors. If Ax is not collinear with x 
after the transformation, as in Figure 5.32(a), x is not an eigenvector. If Ax is 
collinear with x after the transformation, as in Figure 5.32(b), x is an eigenvector. 
Eigenvalue. The eigenvalues of the matrix A are the values of A,- that satisfy 
Eq. (5.80) for * ^ 0. 
To find the eigenvectors, we rearrange Eq. (5.80). Eigenvectors, x,-, satisfy 
0 = (X«I - A)xi 
(5.81) 
FIGURE 5.32 To be an eigenvector, the transformation Ax must be collinear with x; thus, in 
(a), x is not an eigenvector; in (b), it is 

5.8 Similarity Transformations 
269 
- l 
Solving for Xj by premultiplying both sides by (A,I - A) 
yields 
v 
; 
det(A,I-A) 
Since x{ £ 0, a nonzero solution exists if 
det(A,I - A) = 0 
(5.82) 
(5.83) 
from which A/, the eigenvalues, can be found. 
We are now ready to show how to find the eigenvectors, x-,. First we find the 
eigenvalues, A/, using det(A,I — A) = 0, and then we use Eq. (5.80) to find the 
eigenvectors. 
Example 5.10 
Finding Eigenvectors 
PROBLEM: Find the eigenvectors of the matrix 
A = - 3 
1 
1 
- 3 
SOLUTION: The eigenvectors, xh satisfy Eq. (5.81). First, use det(A,I 
to find the eigenvalues, A/, for Eq. (5.81): 
det(Al - A) = 
= A2 + 6A + 8 
from which the eigenvalues are A = —2, and -4. 
Using Eq. (5.80) successively with each eigenvalue, we have 
Ax; = Ax; 
- 3 
111"*! 
1 
- 3 
x2 
A 
0 
0 
A 
-3 
1 
A + 3 
- 1 
-1 
A + 3 
i—i 
-3 
= -2 x2 
or 
—3*1 + X2 = — 2x\ 
X\ - 3X2 = -2^2 
from which x\ =x2. Thus, 
x = 
Using the other eigenvalue, —4, we have 
x = 
c 
—c 
Using Eqs. (5.88) and (5.89), one choice of eigenvectors is 
1 
1 
xi 
and X2 = 
1 
- 1 
(5.84) 
A) = 0 
(5.85) 
(5.86) 
(5.87a) 
(5.87b) 
(5.88) 
(5.89) 
(5.90) 

270 
Chapter 5 
Reduction of Multiple Subsystems 
We now show that if the eigenvectors of the matrix A are chosen as the basis 
vectors of a transformation, P, the resulting system matrix will be diagonal. Let the 
transformation matrix P consist of the eigenvectors of A, Xj. 
P = [xi, x2, x3,..., x„] 
(5.9i; 
Since Xj are eigenvectors, AXJ — X[X\, which can be written equivalently as a set of 
equations expressed by 
AP = PD 
(5.92) 
where D is a diagonal matrix consisting of Vs, the eigenvalues, along the diagonal, 
and P is as defined in Eq. (5.91). Solving Eq. (5.92) for D by premultiplying by P_1, 
we get 
D = P-!AP 
(5.93) 
which is the system matrix of Eq. (5.72). 
In summary, under the transformation P, consisting of the eigenvectors of the 
system matrix, the transformed system is diagonal, with the eigenvalues of the 
system along the diagonal. The transformed system is identical to that obtained using 
partial-fraction expansion of the transfer function with distinct real roots. 
In Example 5.10, we found eigenvectors of a second-order system. Let us 
continue with this problem and diagonalize the system matrix. 
Example 5.11 
Diagonalizing a System in State Space 
PROBLEM: Given the system of Eqs. (5.94), find the diagonal system that is 
similar. 
x = -3 
1 
1 
-3 
y = [ 2 
3]x 
(5.94a) 
(5.94b) 
SOLUTION: First find the eigenvalues and the eigenvectors. This step was per-
formed in Example 5.10. Next form the transformation matrix P, whose columns 
consist of the eigenvectors. 
P = 1 
1 
1 
- 1 
(5.95) 
Finally, form the similar system's system matrix, input matrix, and output 
matrix, respectively. 
P 1 AP = 
P_1B = 
CP = [2 3 
1/2 
1/2 
1/2 
-1/2 
-3 
1 
1 
-3 
1 
1 
1 
-1 
- 2 
0 
0 
- 4 
1/2 
1/2' 
1/2 
-1/2 
1 
1 
1 
-1 
3/2 
-1/2 
= [5 
-1 
(5.96a) 
(5.96b) 
(5.96c) 

5.8 Similarity Transformations 
271 
Substituting Eqs. (5.96) into Eqs. (5.72), we get 
z-f 
z = 
- 2 
0 
0 - 4 
3/2 
-1/2 
(5.97a) 
y = [5 -l]z 
(5.97b) 
Notice that the system matrix is diagonal, with the eigenvalues along the diagonal. 
Students who are using MATLAB should now run ch5p5 in Appendix B 
This problem, which uses MATLAB to diagonalize a system, is simi-
lar (but not identical) to Example 5.11. 
MATLAB 
Skill-Assessment Exercise 5.7 
PROBLEM: For the system represented in state space as follows: 
x + 
x = 
1 
3 
- 4 
- 6 
v = [l 4]x 
convert the system to one where the new state vector, z, is 
z = 3 
- 2 
1 
-4 
ANSWER: 
z = 
z + 
- 3 
-11 
6.5 
-8.5 
9.5 -11.5 
y = [ 0 . 8 
-1.4]z 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
Skill 
PROBLEM: For the original system of 
Assessment Exercise! 
Skill-Assessment Exercise 5.7, 
diagonal system that is similar. 
ANSWER: 
z = [-2 
Ol 
0 
- 3 z + 
[18.39] 
20 
u 
y = [-2.121 2,6 ]z 
The complete solution is at www.wiley.com/college/nise. 
>.8 J 
find the 
Trylt 5.5 
Use the following MATLAB 
and Control System Toolbox 
statements to do Skill-
Assessment Exercise 5.8. 
A=[l 3 ; - 4 -6]; 
B=[l;3]; 
C=[l 4]; 
D=0; S=ss (A, B, C, D); 
Sd=canon {S, 'modal') 

272 
Chapter 5 
Reduction of Multiple Subsystems 
FIGURE 5.33 
Alvin, a manned submersible, explored the wreckage of the Titanic with a 
tethered robot, Jason Junior. 
In this section, we learned how to move between different state-space repre-
sentations of the same system via matrix transformations rather than transfer 
function manipulation and signal-flow graphs. These different representations are 
called similar. The characteristics of similar systems are that the transfer functions 
relating the output to the input are the same, as are the eigenvalues and poles. A 
particularly useful transformation was converting a system with distinct, real 
eigenvalues to a diagonal system matrix. 
We now summarize the concepts of block diagram and signal-flow represen-
tations of systems, first through case study problems and then in a written summary. 
Our case studies include the antenna azimuth position control system and the 
Unmanned Free-Swimming Submersible vehicle (UFSS). Block diagram reduction 
is important for the analysis and design of these systems as well as the control 
systems on board Alvin (Figure 5.33), used to explore the wreckage of the Titanic 
13,000 feet under the Atlantic in July 1986 (Ballard, 1987). 
Antenna Control: Designing a Closed-Loop Response 
This chapter has shown that physical subsystems can be modeled mathematically 
with transfer functions and then interconnected to form a feedback system. The 
interconnected mathematical models can be reduced to a single transfer function 
representing the system from input to output. This transfer function, the closed-
loop transfer function, is then used to determine the system response. 
The following case study shows how to reduce the subsystems of the antenna 
azimuth position control system to a single, closed-loop transfer function in order 
to analyze and design the transient response characteristics. 

Case Studies 
273 
PROBLEM: Given the antenna azimuth position control system shown on the front 
endpapers, Configuration 1, do the following: 
a. Find the closed-loop transfer function using block diagram reduction. 
b. Represent each subsystem with a signal-flow graph and find the state-space 
representation of the closed-loop system from the signal-flow graph. 
c. Use the signal-flow graph found in b along with Mason's rule to find the closed-
loop transfer function. 
d. Replace the power amplifier with a transfer function of unity and evaluate the 
closed-loop peak time, percent overshoot, and settling time for K = 1000. 
e. For the system of d, derive the expression for the closed-loop step response of 
the system. 
f. For the simplified model of d, find the value of K that yields a 10% overshoot. 
SOLUTION: Each subsystem's transfer function was evaluated in the case study in 
Chapter 2. We first assemble them into the closed-loop, feedback control system 
block diagram shown in Figure 5.34(A). 
a. The steps taken to reduce the block diagram to a single, closed-loop transfer 
function relating the output angular displacement to the input angular displace-
ment are shown in Figure 534(a-d). In Figure 5.34(Z>), the input potentiometer 
was pushed to the right past the summing junction, creating a unity feedback 
Input 
potentiometer 
Preamplifier 
Power 
amplifier 
Motor, load, 
and gears 
9,{s) 
h 
-*<g> 
7\ 
r 
9 
K 
Vp(s) 
100 
s + 100 
1 
n 
Ea(s) 
0.2083 
5(5+1.71) 
0o(s) 
Output 
potentiometer 
(a) 
m iiS* 
—, V 
Preamplifier 
and potentiometers 
K 
n 
Vp(s) 
Power 
amplifier 
100 
5+100 
£<,W 
Motor, load, 
and gears 
0.2083 
5(5+1.71) 
eo{s) 
State Space 
(b) 
BM ^ 
tys) 
-6<V 
~yf 
6.63 K 
5(5+ 1.71)(5+ 100) 
( 
(O 
6.63 K 
53+ 101.71.?2 + 1715 + 6.63K 
\fr) 
9(>(s) 
FIGURE 5.34 Block diagram 
reduction for the antenna 
azimuth position control 
system: a. original; b. pushing 
input potentiometer to the right 
past the summing junction; 
c. showing equivalent forward 
transfer function; d. final 
closed-loop transfer function 

Chapter 5 
Reduction of Multiple Subsystems 
ftWO-* 
FIGURE 5.35 
Signal-flow graph for the antenna azimuth position control system 
system. In Figure 5.34(c), all the blocks of the forward transfer function are 
multiplied together, forming the equivalent forward transfer function. Finally, 
the feedback formula is applied, yielding the closed-loop transfer function in 
Figure 534(d). 
b. In order to obtain the signal-flow graph of each subsystem, we use the state 
equations derived in the case study of Chapter 3. The signal-flow graph for the 
power amplifier is drawn from the state equations of Eqs. (3.87) and (3.88), and the 
signal-flow graph of the motor and load is drawn from the state equation of 
Eq. (3.98). Other subsystems are pure gains. The signal-flow graph for Figure 5.34(a) 
is shown in Figure 5.35 and consists of the interconnected subsystems. 
The state equations are written from Figure 5.35. First define the state variables as 
the outputs of the integrators. Hence, the state vector is 
x = 
* 2 
(5.98) 
Using Figure 5.35, we write the state equations by inspection: 
Xl 
= 
h = 
ea = -3.18¾ 
along with the output equation, 
y = o0 
where 1/JC = 0.318. 
In vector-matrix form, 
x = 
y-
r 
o 
l 
0 
-1.71 
-3.18A: 
0 
:[0.1 0 0]X 
+x2 
-1.71¾+ 2.083efl 
-100^ + 3 1 . 8 ^ 
= O.lxi 
0 1 
2.083 
-100 
x + 
r o i 
0 
3l.SK 
0i 
(5.99a) 
(5.99b) 
(5.99c) 
(5.100) 
(5.101a) 
(5.101b) 
c. We now apply Mason's rule to Figure 5.35 to derive the closed-loop transfer 
function of the antenna azimuth position control system. First find the forward-
path gains. From Figure 5.35 there is only one forward-path gain: 
rt = (I) (^)(100) (I) (2.083) (I) (I) (0.1) = 5f^ 
(5,02) 

Case Studies 
275 
Next identify the closed-loop gains. There are three: the power amplifier loop, 
GLI(S), with ea at the output; the motor loop, GL2(s), with x2 at the output; and 
the entire system loop, GL3(s), with do at the output. 
GL1{s)=— 
(5.103a) 
GL2(s)=^^ 
(5.103b) 
GL3(s) = «(100) Q (2.083) Q 
(~) (0.1) (^) 
= = ^ - 
(5.103c) 
Only GLi(s) and GL2C0 are nontouching loops. Thus, the nontouching-loop gain is 
GL1(s)GL2(s) = ^ 
(5.104) 
Forming A and A* in Eq. (5.28), we have 
A = 1 - lGm{s) + GL2(s) + GL3(s)} + [GL1(s)GL2(s)} 
, 
100 
1.71 
6.63K 111 
/ c , n n 
= 1+ 
+ 
-f—5—+ ^ r 
(5.105) 
and 
At = 1 
(5.106) 
Substituting Eqs. (5.102), (5.105), and (5.106) into Eq. (5.28), we obtain the 
closed-loop transfer function as 
{) 
R(s) 
A 
^ + 101.71^ + 171^ + 6.63^ 
l 
} 
d. Replacing the power amplifier with unity gain and letting the preamplifier gain, 
K, in Figure 5.34(b) equal 1,000 yield a forward transfer function, G(s), of 
Using the feedback formula to evaluate the closed-loop transfer function, we 
obtain 
T(s) = --,—^t6'3 „ „ 
(5.109) 
v ' 
s2 + 1.715 + 66.3 
v 
' 
From the denominator, u>n = 8.14, £ = 0.105. Using Eqs. (4.34), (4.38), and 
(4.42), the peak time = 0.388 second, the percent overshoot = 71.77%, and the 
settling time = 4.68 seconds. 
e. The Laplace transform of the step response is found by first multiplying' 
Eq. (5.109) by 1/s, a unit-step input, and expanding into partial fractions: 
_, . 
66.3 
1 
s +1.71 
C{s) = 5(52 +1.715 + 66.3) 
5 52 + 1.715 + 66.3 
_ 1 
(5 + 0.855) + 0.106(8.097) 
~ s 
(s + 0.855)2 + (8.097)2 
(5.110) 

276 
Chapter 5 
Reduction of Multiple Subsystems 
Stale Space 
State Space 
Taking the inverse Laplace transform, we find 
c(t) = 1 - e-°-855r(cos 8.097r + 0.106 sin 8.097f) 
(5.111) 
f. For the simplified model we have 
0.0663£ 
fJfJtH^ 
G®=w^m 
(5-112) 
from which the closed-loop transfer function is calculated to be 
_ . , 
0-0663^ 
^ ) = , 2 + 1.715 + 0.0663^ 
( 5 1 1 3 ) 
From Eq. (4.39) a 10% overshoot yields £ = 0.591. Using the denominator of 
Eq. (5.113), (On = VO0663tf and 2#% = 1.71. Thus, 
t = 
. 1 , 7 1 
= 0.591 
(5.114) 
2\/0.0663A: 
; 
from which K — 31.6. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives: Referring to the antenna azimuth position control system shown on the 
front endpapers, Configuration 2, do the following: 
a. Find the closed-loop transfer function using block diagram reduction. 
b. Represent each subsystem with a signal-flow graph and find the state-space 
representation of the closed-loop system from the signal-flow graph. 
c. Use the signal-flow graph found in (b) along with Mason's rule to find the 
closed-loop transfer function. 
d. Replace the power amplifier with a transfer function of unity and evaluate the 
closed-loop percent overshoot, settling time, and peak time for K = 5. 
e. For the system used for (d), derive the expression for the closed-loop step response. 
f. For the simplified model in (d), find the value of preamplifier gain, K, to yield 
15% overshoot. 
UFSS Vehicle: Pitch-Angle Control Representation 
We return to the Unmanned Free-Swimming Submersible (UFSS) vehicle intro-
duced in the case studies in Chapter 4 (Johnson, 1980). We will represent in state 
space the pitch-angle control system that is used for depth control. 
PROBLEM: Consider the block diagram of the pitch control loop of the UFSS 
vehicle shown on the back endpapers. The pitch angle, 6, is controlled by a 
commanded pitch angle, 9e, which along with pitch-angle and pitch-rate feedback 
determines the elevator deflection, <5e, which acts through the vehicle dynamics to 
determine the pitch angle. Let K\ = K2 - 1 and do the following: 
a. Draw the signal-flow graph for each subsystem, making sure that pitch angle, 
pitch rate, and elevator deflection are represented as state variables. Then 
interconnect the subsystems. 
b. Use the signal-flow graph obtained in a to represent the pitch control loop in 
state space. 

Case Studies 
277 
5(.(s) 
Elevator 
actuator 
2 
s + 2 
S,As) 
Vehicle dynamics 
-0.125(^ + 0.435) 
(5+1.23) 
1 
s2 + 0.226s + 0.0169 
0(s) 
FIGURE 5.36 
Block diagram of the UFSS vehicle's elevator and vehicle dynamics, from 
which a signal-flow graph can be drawn 
SOLUTION: 
a. The vehicle dynamics are split into two transfer functions, from which the signal-
flow graph is drawn. Figure 5.36 shows the division along with the elevator 
actuator. Each block is drawn in phase-variable form to meet the requirement 
that particular system variables be state variables. This result is shown in 
Figure 5.37(a). The feedback paths are then added to complete the signal-
flow graph, which is shown in Figure 5.37(6). 
b. By inspection, the derivatives of state variables x\ through x4 are written as 
*i = 
x2 = -0.0169x1 
* 3 
= 
* 4 = 
2*i 
X2 
(5.115a) 
0.226*2 + 0.435*3 - 1.23*3 - 0.125*4 
(5.115b) 
-1.23*3-0.125*4 
(5.115c) 
+ 2*2 
-2*4 -20c 
(5.115d) 
Finally, the output y = x\. 
ia) 
-0.0169 
X,(.v) 
6U.v) O 
XAs) 
FIGURE 5.37 
Signal-flow 
graph representation of the 
UFSS vehicle's pitch control 
system: a. without position 
and rate feedback; b. with 
position and rate feedback. 
(Note: Explicitly required 
variables are *i = 0, xi = 
dO/dt, and.x4 = 8e.) 

278 
Chapter 5 
Reduction of Multiple Subsystems 
MATLAB 
Heading 
command 
^ + ( 5 ^ 
\ 
Heading 
gain 
- * i 
Commanded 
rudder 
Rudder 
deflection actuator 
*6 
—, 
?J ^ 
. 
y 
2 
s + 2 
Rudder 
deflection 
<5f(.v) 
Heading 
Vehicle 
(yaw) 
dynamics 
rate 
-0.125(5 + 0.437) 
(5+1.29)(5 + 0.193) 
Yaw 
rate 
sensor 
-Ktf 
\jKs) 
—*-
1 
s 
Hcadin 
</*.v) 
FIGURE 5.38 Block diagram of the heading control system for the UFSS vehicle 
In vector-matrix form the state and output equations are 
x = 
0 
1
0 
0 ' 
-0.0169 -0.226 -0.795 -0.125 
0 
0 
-1.23 -0.125 
2 
2 
0 - 2 
x + 
0 
0 
0 
- 2 
y = [l 0 0 0]x 
(5.116a) 
(5.116b) 
CHALLENGE: We now give you a problem to test your knowledge of this chapter's 
objectives. The UFSS vehicle steers via the heading control system shown in 
Figure 5.38 and repeated on the back endpapers. A heading command is the input. 
The input and feedback from the submersible's heading and yaw rate are used to 
generate a rudder command that steers the submersible (Johnson, 1980). Let K\ = 
K2 = 1 and do the following: 
a. Draw the signal-flow graph for each subsystem, making sure that heading angle, 
yaw rate, and rudder deflection are represented as state variables. Then 
interconnect the subsystems. 
b. Use the signal-flow graph obtained in a to represent the heading control loop in 
state space. 
c. Use MATLAB to represent the closed-loop UFSS heading control 
system in state space in controller canonical form. 
^ Summary ^ 
One objective of this chapter has been for you to learn how to represent multiple 
subsystems via block diagrams or signal-flow graphs. Another objective has been to 
be able to reduce either the block diagram representation or the signal-flow graph 
representation to a single transfer function. 
We saw that the block diagram of a linear, time-invariant system consisted of 
four elements: signals, systems, summing junctions, and pickoff points. These 

Review Questions 
279 
elements were assembled into three basic forms: cascade, parallel, and feedback. 
Some basic operations were then derived: moving systems across summing junctions 
and across pickoff points. 
Once we recognized the basic forms and operations, we could reduce a 
complicated block diagram to a single transfer function relating input to output. 
Then we applied the methods of Chapter 4 for analyzing and designing a second-
order system for transient behavior. We saw that adjusting the gain of a feedback 
control system gave us partial control of the transient response. 
The signal-flow representation of linear, time-invariant systems consists of two 
elements: nodes, which represent signals, and lines with arrows, which represent 
subsystems. Summing junctions and pickoff points are implicit in signal-flow graphs. 
These graphs are helpful in visualizing the meaning of the state variables. Also, they 
can be drawn first as an aid to obtaining the state equations for a system. 
Mason's rule was used to derive the system's transfer function from the signal-
flow graph. This formula replaced block diagram reduction techniques. Mason's rule 
seems complicated, but its use is simplified if there are no nontouching loops. In 
many of these cases, the transfer function can be written by inspection, with less 
labor than in the block diagram reduction technique. 
Finally, we saw that systems in state space can be represented using different 
sets of variables. In the last three chapters, we have covered phase-variable, cascade, 
parallel, controller canonical, and observer canonical forms. A particular represen-
tation may be chosen because one set of state variables has a different physical 
meaning than another set, or because of the ease with which particular state 
equations can be solved. 
In the next chapter, we discuss system stability. Without stability we cannot begin 
to design a system for the desired transient response. We will find out how to tell whether 
a system is stable and what effect parameter values have on a system's stability. 
f^ Review Questions ^ 
1. Name the four components of a block diagram for a linear, time-invariant 
system. 
2. Name three basic forms for interconnecting subsystems. 
3. For each of the forms in Question 2, state (respectively) how the equivalent 
transfer function is found. 
4. Besides knowing the basic forms as discussed in Questions 2 and 3, what other 
equivalents must you know in order to perform block diagram reduction? 
5. For a simple, second-order feedback control system of the type shown in 
Figure 5.14, describe the effect that variations of forward-path gain, K, have 
on the transient response. 
6. For a simple, second-order feedback control system of the type shown in 
Figure 5.14, describe the changes in damping ratio as the gain, K, is 
increased over the underdamped region. 
7. Name the two components of a signal-flow graph. 
8. How are summing junctions shown on a signal-flow graph? 
9. If a forward path touched all closed loops, what would be the value of A^? 
Slate Space 
10. Name five representations of systems in state space. 
^sm 

280 
Stale Space 
State Space 
mm 
State Space 
State Space 
Slate Space 
cm J 
State Space 
State Space 
State Space 
State Space 
State Space 
State Space 
Chapter 5 
Reduction of Multiple Subsystems 
11. Which two forms of the state-space representation are found using the same 
method? 
12. Which form of the state-space representation leads to a diagonal matrix? 
13. When the system matrix is diagonal, what quantities lie along the diagonal? 
14. What terms lie along the diagonal for a system represented in Jordan canonical 
form? 
15. What is the advantage of having a system represented in a form that has a 
diagonal system matrix? 
16. Give two reasons for wanting to represent a system by alternative forms. 
17. For what kind of system would you use the observer canonical form? 
18. Describe state-vector transformations from the perspective of different bases. 
19. What is the definition of an eigenvector? 
20. Based upon your definition of an eigenvector, what is an eigenvalue? 
21. What is the significance of using eigenvectors as basis vectors for a system 
transformation? 
Problems 
1. Reduce the block diagram shown in Figure P5.1 to a 
single transfer function, T(s) = C(s)/R(s) Use the 
following methods: 
a. Block diagram reduction [Section: 5.2] 
MATLAB 
b. MATLAB 
R(s) +, ^ 7 - ^ . - ¾ 
+ /Ov C(s) 
FIGURE P5.1 
2. Find the closed-loop transfer function, T(s) = 
C(s)/R(s) for the system shown in Figure P5.2, using 
block diagram reduction. [Section: 5.2] 
m_^ h 
i — * * 
" i 
G\ 
—
*
• 
Gl 
-*&* 
G3 
C(s) 
FIGURE P5.2 
3. Find the equivalent transfer function, 
wileypujs 
T(s) = C(s)/R(s), for the system shown 
fJJJgJ 
in Figure P5.3. [Section: 5.2] 
control solutions 

Problems 
281 
R(s) 
fl 
G\(s)+-
{VW-~ G2(s) - ^ 0 - * G5(s) 
G3(s) 
G4(s)—LQ?) 
G6(s) 
Gi(s) 
C(s) 
FIGURE P5.3 
4. Reduce the system shown in Figure P5.4 to a 
single transfer function, T(s) = C(s)/R(s). 
[Sec-
tion: 5.2] 
R(s) +, 
Gi(s) 
t0 
»Gtte -i{g) 
>• G2(s) 
C(s) 
G4(s) 
H(.s) 
FIGURE P5.4 
K 
+ 
GlW 
02(5) 
-*&-
i—»- G3(s) 
G4(s) 
G5(s) 
+1 ^ t/< ' 
*T 
(fc(*) -
C(5) 
FIGURE P5.5 
6. Reduce the block diagram shown in Figure P5.6 to a 
single block, T{s) = C{s)/R{s). [Section: 5.2] 
R(s) + J 
— P~l 
G\(s) 
V 
G2(s) 
G%(s) 
G5(s) 
•ST-
G3(s) 
1 ' 
G4(s) 
H& 
<W 
1 ' 
G7(*) 
(• 
C(.?) 
FIGURE P5.6 
7. Find the unity feedback system that is equivalent to 
the system shown in Figure P5.7. [Section: 5.2]. 
R(s) 
5. Find the transfer function, T(s) = C(s)/R(s), for the 
^vyj* J_ ~*^X*" 
system shown in Figure P5.5. Use the following 
methods: 
a. Block diagram reduction [Section: 5.2] 
b. MATLAB. Use the following 
MATLAB 
t r a n s f e r functions : 
^ d ^ ) 
G1(s) = l / ( s 4- 7), G2{s) = l/(s 2 + 2 s + 3), 
G3(s) = l / ( s + 4), G4(s) = l / s , 
G5{s) = 5/(8 + 7), Gels) = l / ( s 2 + 5s + 10), 
G-,{s) = 3/(s + 2), Ga(s) = l/(s + 6). 
7s 
9 
s 
2s i?t* 
+ 
-i 
.5 
4 
, 
TT* 
J 
s+1 
PW 
FIGURE P5.7 
H i n t : 
Use t h e 
append and connect 
8. Given the block diagram of a system shown in 
commands i n MATLAB's C o n t r o l System 
Figure P5.8, find the transfer function G(s) = 
Toolbox. 
&22(s)/0u(s). [Section: 5.2] 

282 
Chapter 5 
Reduction of Multiple Subsystems 
* n W + / 0 \ 
. 
*x 
Ou(s) + K 
• 
GI(-J) 
G7(5) 
-
i
. 
£M ^ 
•Qjp 
G2(s) 
G4(s) 
G3(s) 
G5(s) 
Oll(s\ 
G6(s) 
022(s) 
FIGURE P5.8 
9. Reduce the block diagram shown in Figure P5.9 
to a single transfer function, T(s) = C(s)/R(s). 
[Section: 5.2] 
R(S) +; 
Gi(s) 
G2(s) 
Gi(s) 
GA(S) 
Gsis) 
+, 
G6(s) 
Gj(s) 
C(s) 
11. For the system shown in Figure P5.ll, find the 
percent overshoot, settling time, and peak time 
for a step input if the system's response is under-
damped. (Is it? Why?) [Section: 5.3] 
R(s) + , -> E(s) 
r 1 
225 
s(s + 15) 
C(s) 
FIGURE P5.9 
FIGURE P5.11 
12. For the system shown in Figure P5.12, find 
the output, c(r), if the input, r(t), is a unit step. 
[Section: 5.3] 
10. Reduce the block diagram shown in 
wiieypms 
Figure P5.10 to a single block repre- 
d J 3 
senting the transfer function, T(s) = 
control solutions 
C{s)/R{s). 
[Section: 5.2] 
R{s) 
± / C h m 
5 
s(s + 2) 
C(s) 
FIGURE P5.12 
r 
M i ^ _ 
H3(s) 
H^s) 
Giis) t&\ 
' < $ 
A V 
G2(s) 
H2{s) 
H4(s) 
— » • G3{s) C(s) 
13. For the system shown in Figure P5.13, find the poles 
of the closed-loop transfer function, T(s) = C(s)/ 
R(s). [Section: 5.3] 
ms) -4 
-
y\ 
9 
5 
1 
s 
2 
+ /T~X 
+ f 
2s 
C(s) 
FIGURE P5.10 
FIGURE P5.13 

Problems 
283 
14. For the system of Figure P5.14, find the value of 
18. 
K that yields 10% overshoot for a step input. 
[Section: 5.3] 
For the system shown in Figure P5.18, find ¢, con, 
percent overshoot, peak time, rise time, and settling 
time. [Section: 5.3] 
m + ®— 
K 
5(5+30) 
C{s) 
FIGURE P5.14 
m \< > E(s) ^ 
38343 
s(s + 200) 
C(s) 
15. For the system shown in Figure P5.15, find K and a 
to yield a settling time of 0.15 second and a 30% 
19. 
overshoot. [Section: 5.3] 
R(s) 
+<-> E(s) 
FIG 
K 
s(s + a) 
UREP5.15 
C(s) 
FIGURE P5.18 
A motor and generator are set up to drive a load as 
shown in Figure P5.19. If the generator output 
voltage is eg(t) = K/if(t), where ifa) is the genera-
tor's field current, find the transfer function 
G(s) = 60(s)/Ei{s). For the generator, Kf = 2ft. 
For the motor, Kt = 1 N-m/A, and Kb = 1 V-s/rad. 
16. For the system of Figure P5.16, find the values of K\ 
and K2 to yield a peak time of 1.5 second and a 
settling time of 3.2 seconds for the closed-loop 
system's step response. [Section: 5.3] 
^
^
-
Kl 
+ X~>\ 
10 
s(s+2) 
K2s 
C(s) 
10 
6„\n 
f\ 
-f)4kg-m2}- 1— 
V 
=J 
4 N-m-s/rad 
FIGURE P5.19 
20. Find G{s) = E0(s)/T(s) for the system 
wiieyPLUs 
shown in Figure P5.20. 
C H S J 
Control Solutions 
FIGURE P5.16 
17. Find the following for the system shown 
W'leyPLUs 
in Figure P5.17: [Section: 5.3] 
C E 3 
a. The equivalent single block that 
Contro1 So,utions 
represents the transfer function, 
T(s) = C(s)/R(s). 
b. The damping ratio, natural frequency, percent 
overshoot, settling time, peak time, rise time, and 
damped frequency of oscillation. 
R(s) +' 
\ 1 
10 
10 
irVi . 
^ A 
/ \ 
J 
V 
1 
5+12 
20 
C(s) 
FIGURE P5.17 
FIGURE P5.20 
21. Find the transfer function G(s) = E0(s)/T(s) for the 
system shown in Figure P5.21. 

284 
Chapter 5 
Reduction of Multiple Subsystems 
\1\r> 
^ ) j | = 0 . 2 S k g ^ ) - | s 
K=5N-m/rad 
50 V 
D=2 N-m-s/rad 
El ' I '' I ' i 
50 \-+ ) h = 50 kg-m2|i 
*-<, 10 Turn pot 
-50 V 
IOJIF 
Buffer 
amplifier 
gain = l 
FIGURE P5.21 
22. Label signals and draw a signal-flow graph for each 
of the block diagrams shown in the following prob-
lems: [Section: 5.4] 
a. Problem 1 
b. Problem 3 
c. Problem 5 
23. Draw a signal-flow graph for each of the state space 
following state equations: [Section: 5.6] 
a. x = 
0 
1 0 
0 
0 1 
- 2 - 4 - 6 
1 Oil 
x + 
y = [l 
r o l o 
b. x = 
0 - 3 1 
. - 3 - 4 - 5 
y = [l 2 0]x 
c. x = 
y = [l 
7 1 0 
- 3 2 - 1 
- 1 0 2 
3 21x 
x + 
b. Cascade form 
25. Repeat Problem 24 for 
G(s) = 
State Space 
20 
5(5-2)(5 + 5)(5 + 8) 
[Section: 5.7] 
26. Using Mason's rule, find the transfer function, 
T(s) = C(s)/R(s), 
for the system represented in 
Figure P5.22. [Section: 5.5] 
« s ) 0 
G,(s) _ 
G2(s) _ 
G3(s) 
G4(5) 
-1 
FIGURE P5.22 
27. Using Mason's rule, find the transfer function, 
T(s) = C(s)/R(s), 
for the system represented by 
Figure P5.23. [Section: 5.5] 
R(s) O 
» 
C 
G2(s) 
G4(s) 
v G3(s) 
G5(s) 
3 * O 
&iW 
»30) 
FIGURE P5.23 
1 
w 
, 
-
G7(s) 
H 2W/ 
O.0 
28. Use Mason's rule to find the transfer function of 
Figure 5.13 in the text. [Section: 5.5] 
29. Use block diagram reduction to find the transfer 
function of Figure 5.21 in the text, and compare 
your answer with that obtained by Mason's rule. 
[Section: 5.5] 
30. Represent the following systems in state 
state space 
space in Jordan canonical form. Draw the 
signal-flow graphs. [Section: 5.7] 
(5+1)(5 + 2) 
24. Given the system below, draw a signal-flow state space 
graph and represent the system in state space ^ ^ ^ D 
in the following forms: [Section: 5.7] 
a. Phase-variable form 
J K £ L 
Control Solutions 
a. G{s) = 
b. G{s) = 
c. G(s) = 
(5 + 3)2(5+4) 
(*+ 2) 
(5 + 5)2(5 + 7)2 
(J+ 3) 
(5 + 2)2(5 + 4)(5 + 5) 
G(s) = 
10 
[5 + 7)(5 + 8)(5 + 9) 
31. Represent the systems below in state space state Space 
in phase-variable form. Draw the signal-flow 
^ E ^ B 
graphs. [Section: 5.7] 
wHeypms 
5 + 3 
CE3 
a. G(s) = s2 + 25 + 7 
Control Solutions 

Problems 
285 
b. G{s) = 
c. G(s) = 
s2 + 2s + 6 
53 + 5s2 + 2s + 1 
s2 + 2s2 + 7s + 1 
s4 + 3s3 + 5s2 + 6s + 4 
32. Repeat Problem 31 and represent each 
state space 
system in controller canonical and ob- 
^ E ^ P 
server canonical forms. [Section: 5.7] 
33. Represent the feedback control systems 
state space 
shown in Figure P5.24 in state space. 
^ ^ ^ D 
When possible, represent the open-loop transfer func-
tions separately in cascade and complete the feedback 
loop with the signal path from output to input. Draw 
your signal-flow graph to be in one-to-one correspon-
dence to the block diagrams (as close as possible). 
[Section: 5.7] 
*(*) + / 0 
E(s) 
50 
(s + 9)(5 + 8)(5 + 2) 
C(s\ 
(a) 
m +, 
10 
s(s2 +6s + 24) 
C(s) 
m 
R(s) 
+ / 0 N £(^) 
160 
5(5+1) 
C(s) 
(c) 
R(s) 
E(s) 
16(5 + 2) 
(.v+1)2 
C{s) 
id) 
FIGURE P5.24 
b. Represent the system in state space in any other 
form besides phase-variable. 
m 
+. 
E{s) 
10 
s(s + 1)(5 + 2) 
C(s) 
34. You are given the system shown in 
Figure P5.25. [Section: 5.7] 
a. Represent the system in state space in phase-
variable form. 
FIGURE P5.25 
35. Repeat Problem 34 for the system shown in 
Figure P5.26. [Section: 5.7] 
R(s) + 
<g>-~ 
I0(s + 2)(s + 3) 
( $ + 1 ) ( J + 4)(J + 5)(S + 6) 
Qs) 
FIGURE P5.26 
36. Use MATLAB t o s o l v e Problem 35 . 
MATLAB 
37. Represent the system shown in Figure P5.27 statespace 
in state space where x\{t), x-^it), and%4(/),as VEc^P 
shown, are among the state variables, c{t) is the output, 
and xi{t) is internal to X\{s)IX?,{s). [Section: 5.7] 
R(s) + ~ 
/:(,) 
w 
1 
5 
X4M 
1 
5 
X,(.v) 
1 
52+l 
A'|(.v) 5-1 
C(s) 
FIGURE P5.27 
State Space 
38. Consider the rotational mechanical 
system shown in Figure P5.28. 
a. Represent the system as a signal-flow graph. 
b. Represent the system in state space if the output 
is 02(/). 
2 N-m/rad 
0,0) 
I'M 0M/1 
4 N-m/rad 
1 N-m/rad 
FIGURE P5.28 
I 
39. Given a u n i t y f e e d b a c k s y s t e m w i t h 
MATLAB 
State Space 
t h e 
f o r w a r d - p a t h 
t r a n s f e r 
f u n c - 
^ Q ^ P 
t i o n 
Stale Space 
G(s) = 
7 
s(s+ 9)(s + 12; 

286 
Chapter 5 
Reduction of Multiple Subsystems 
use MATLAB to represent the closed loop 
system in state space in 
a. phase-variable form; 
b. parallel form. 
40. Consider the cascaded subsystems shown state space 
in Figure P5.29. If 0\(.v) is represented in 
^ ^ ^ B 
state space as 
wi|eyPLUS 
. 
, 
D 
CEEJ 42' 
X i = A l X l + B i r 
control Solutions 
Vj = CiXi 
and G2(s) is represented in state space as 
x2 = A2x2 + B2y! 
y2 = C2x2 
show that the entire system can be represented in state 
space as 
m 
G,W 
W 
Y(s) 
G2{s) 
Ylis) 
\
 kl 1 
= 
Ai : o 
B2Ci: A2 
y2 
0 : C2 
r xi" 
. 
X2 . 
Xl 
L
 X2 J 
+ [Bij 
0 
FIGURE P5.30 
Consider the subsystems shown in Figure statespace 
P5.31 and connected to form a feedback 
^ ^ ^ V 
system. If G(s) is represented in state space as 
xi = A1X1 + Bie 
y = C1X1 
and //2(^) is represented in state space as 
x2 = A2x2 + B2y 
P = C2x2 
show that the closed-loop system can be represented 
in state space as 
R(s) 
Gts) w m 
G2(s) 
W , 
xi 
Ai 
: 
*2 . 
B2Ci : 
y 
= 
[ Ci ; 0 
B!C2 
A2 
xi 
x2 
Xl 
X2 
+ 
Bi 
0 
FIGURE P5.29 
41. Consider the parallel subsystems shown in statespace 
Figure P5.30. If Gj (s) is represented in state 
GEc^P 
space as 
xi = A1X1 + Bir 
fi = C1X1 
and G2(s) is represented in state space as 
x2 = A2x2 + B2r 
y2 = C2x2 
show that the entire system can be represented in state 
space as 
R(s) 
+/^ a s . 
—• 
P(s) 
G(s) 
H(s) 
m^ 
FIGURE P5.31 
43. Given the system represented in state 
state space 
space as follows: [Section: 5.8] 
x = 
- 1 
- 8 
4 
- 7 
4 
7 
6 
8 
- 8 
x + 
' - 5 ' 
- 7 
5 
[ xi I 
. 
X2 . 
A, 
0 
0 
A2 _ 
r xi 1 
. 
X2 . 
+ 
[Bil 
B 2 . 
y=[-9 
- 9 
-8]x 
convert the system to one where the new state 
vector, z, is 
xi 
X2 
Z = 
- 4 
0 
- 1 
9 
- 4 
- 4 
- 3 
7 
- 9 

Problems 
287 
44. Repeat Problem 43 for the following 
system: [Section: 5.8] 
State Space 
X 
= 
-5 
9 
-9 
1 
-9 
- 1 
1* 
-9 
8 
x + 
9 
-4 
0 
y =[-2 
- 4 
1]X 
and the following state-vector transformation: 
z = 
5 
6 
6 
-4 
-7 
-5 
91 
6 
-3 
45. Diagonalize the following system: 
[Section: 5.8] 
State Space 
X 
= 
-5 
2 
0 
-5 
0 
-2 
4' 
-2 
-1 
x + [-1] 
2 
-2 
y = [ - l 
1 2]x 
46. Repeat Problem 45 for the following 
system: [Section: 5.8] 
-10 
18.25 
-7.25 
-3 
6.25 
-2.25 
7 
-11.75 
5.75 
x + 
1 
3 
2 
X 
= 
y = [ 1 
- 2 
4]x 
47. Diagonalize t h e system i n Problem 4 6 MJJJAB 
U S in g MAT LAB . 
SIB 
48. During ascent the space shuttle is steered by com-
mands generated by the computer's guidance calcula-
tions. These commands are in the form of vehicle 
attitude, attitude rates, and attitude accelerations ob-
tained through measurements made by the vehicle's 
inertial measuring unit, rate gyro assembly, and accel-
erometer assembly, respectively. The ascent digital 
autopilot uses the errors between the actual and com-
manded attitude, rates, and accelerations to gimbal the 
space shuttle main engines (called thrust vectoring) 
and the solid rocket boosters to effect the desired 
vehicle attitude. The space shuttle's attitude control 
system employs the same method in the pitch, roll, and 
yaw control systems. A simplified model of the pitch 
control system is shown in Figure P5.32.4 
a. Find the closed-loop transfer function relating 
actual pitch to commanded pitch. Assume all 
other inputs are zero. 
b. Find the closed-loop transfer function relating 
actual pitch rate to commanded pitch rate. 
Assume all other inputs are zero. 
c. Find the closed-loop transfer function relating 
actual pitch acceleration to commanded pitch 
acceleration. Assume all other inputs are zero. 
Commanded 
Commanded 
pilch 
pilch 
rale 
acceleration 
Commanded 
pitch + 
WileyPLUS 
CBS 
Control Solutions 
State Space 
®r * 
Pilch 
error 
*2 
Shuttle 
Controller 
dynamics 
Pilch 
rate 
error 
G](s) 
G2(.s) 
Pitch 
Pitch 
accelcralion 
error 
Accelerometer 
Rate gyro 
.v-
Inerlial measuring unit 
FIGURE P5.32 
Space shuttle pitch control system 
(simplified) 
State Space 
49. An AM radio modulator generates the 
product of a carrier waveform and a 
message waveform, as shown in Figure 
P5.33 (Kurland, 1971). Represent the system in state 
space if the carrier is a sinusoid of frequency co = a, and 
the message is a sinusoid of frequency co = b. Note that 
this system is nonlinear because of the multiplier. 
Antenna 
^7 
Message 
waveform 
Carrier 
waveform 
Multiplier 
FIGURE P5.33 AM modulator 
Source of background information for this problem: Rockwell 
International. 
50. A model for human eye movement consists of the 
closed-loop system shown in Figure P5.34, where an 

288 
Chapter 5 
Reduction of Multiple Subsystems 
Object 
position 
Brain 
Delay 
Nervous 
system 
Muscle 
Eye 
-lay - ^ W ^ H - 
Delay 
K\ 
K2 
s(s + a\) 
Eye 
position 
Muscle spindles position feedback 
*3 
Muscle spindles rate feedback 
K4s 
(s + C2) 
FIGURE P5.34 Feedback control system representing human 
eye movement 
object's position is the input and the eye position is 
the output. The brain sends signals to the muscles 
that move the eye. These signals consist of the 
difference between the object's position and the 
position and rate information from the eye sent 
by the muscle spindles. The eye motion is modeled 
as an inertia and viscous damping and assumes no 
elasticity (spring) {Milhorn, 1966). Assuming that 
the delays in the brain and nervous system are 
negligible, find the closed-loop transfer function 
for the eye position control. 
51. A HelpMate transport robot, shown in 
wileyPLUS 
Figure P5.35(a), is used to deliver goods 
^ V i ' J « 
in a hospital setting. The robot can de- 
control solutions 
liver food, drugs, laboratory materials, and patients' 
records {Evans, 1992). Given the simplified block 
diagram of the robot's bearing angle control system, 
as shown in Figure P5.35(6), do the following: 
Desired 
bearing 
angle 
Vr(v)+ 
Computer 
« - * 
K 
Desired 
wheel 
position + 
Motor and 
controller 
® -
s(s + 2) 
Actual 
Actual 
v , • , k*™* 
wheel 
V e h l c l e « 8 ^ 
position 
s(s + 3) 
Vis) 
(b) 
FIGURE P5.35 a. HelpMate robot used for in-hospital 
deliveries; b. simplified block diagram for bearing 
angle control 
a. Find the closed-loop transfer function. 
State Space 
b. Represent the system in state space, 
where the input is the desired bearing 
angle, the output is the actual bearing angle, and 
the actual wheel position and actual bearing 
angle are among the state variables. 
c. Simulate the closed-loop 
JUJii^ 
s y s t era u s in g MAT LAB . Obtain 
CijIV 
the unit step response for different 
values of K that yield responses from 
overdamped to underdamped to unstable. 
52. Automatically controlled load testers can be used to 
test product reliability under real-life conditions. 
The tester consists of a load frame and specimen 
as shown in Figure P5.36(a). The desired load is 
DcMred load 
F,.(s) + ^ 
(«) 
Current 
Controller 
amplifier 
Load, frame, specimen, 
load cell 
1666.67 
0.06 
i+720 
15x10* 
i'+82s2 + 4xlO% + 2xl0 7 
EM 
(b) 
FIGURE P5.36 a. Load tester, (© 1992 IEEE) b. approximate 
block diagram 

Problems 
289 
input via a voltage, et(t), to a current amplifier. The 
output load is measured via a voltage, e,(/), from a 
load cell measuring the load on the specimen. 
Figure P5.36(6) shows an approximate model 
of a load testing system without compensation 
{Bailey, 1992). 
a. Model the system in state space. 
'"'d c jp"Lfe 
b. Simulate the step response 
MATLAB 
u s i n g 
MATLAB. I s t h e r e - 
flQQ) 
sponse p r e d o m i n a n t l y first 
o r s e c o n d o r d e r ? D e s c r i b e t h e c h a r a c -
t e r i s t i c s of t h e r e s p o n s e t h a t need 
c o r r e c t i o n . 
53. Consider the F4-E aircraft of Problem 22, ^ate sPace 
Chapter 3. If the open-loop transfer func- ^ ^ ^ V 
tion relating normal acceleration, An(s), 
to the input deflection command, Sc(s), is approxi-
mated as 
A„(s) 
-272(52+ 1.9*+ 84) 
8c(s) 
(s+ 14)(s-1.8)(5+ 4.9) 
(Cavallo, 1992), find the state-space representation in 
a. Phase-variable form 
b. Controller canonical form 
c. Observer canonical form 
d. Cascade form 
e. Parallel form 
54. Find the closed-loop transfer function of the 
Unmanned Free-Swimming Submersible vehicle's 
pitch control system shown on the back endpapers 
(Johnson, 1980). 
55. Repeat Problem 54 using MATLAB. 
MATLAB 
56. Use Simulink to plot the effects 
simulink 
of nonlinearities upon the 
closed-loop step response of 
the antenna azimuth position control 
system shown on the front endpapers, Con-
figuration 1. In particular, consider 
individually each of the following 
nonlinearities: saturation (±5 volts), 
backlash (dead-bandwidth 0.15), dead-
zone (—2 to +2), as well as the linear 
response. Assume the preamplifier gain 
is 100 and the step input is 2 radians. 
57. Problem 12 in Chapter 1 describes a high-speed pro-
portional solenoid valve. A subsystem of the valve is 
the solenoid coil shown in Figure P5.37. Current 
through the coil, L, generates a magnetic field that 
produces a force to operate the valve. Figure P5.37can 
be represented as a block diagram (Vaughan, 1996) 
FIGURE P5.37 Solenoid coil circuit 
a. Derive a block diagram of a feedback system that 
represents the coil circuit, where the applied 
voltage, vg(t), is the input, the coil voltage, 
vL(t), is the error voltage, and the current, i(t), 
is the output. 
b. For the block diagram found in Part a, find the 
Laplace transform of the output current, l(s). 
c. Solve the circuit of Figure P5.37 for /(5), and 
compare to your result in Part b. 
58. Ktesibios' water clock (see Section 1.2) is probably 
the first man-made system in which feedback was 
used in a deliberate manner. Its operations are shown 
in Figure P5.38(a). The clock indicates time progres-
sively on scale D as water falls from orifice A toward 
vessel B. Clock accuracy depends mainly on water 
height hf in the water reservoir G, which must be 
maintained at a constant level hr by means of the 
conical float F that moves up or down to control the 
water inflow. Figure P5.38(6) shows a block diagram 
describing the system (Lepschy, 1992), 
Let qi(t) and q0(t) represent the input and output 
water flow, respectively, and hm the height of water 
in vessel B. Use Mason's rule to find the following 
transfer functions, assuming a and fi are constants: 
Hm(s) 
a. 
b. 
c. 
d. 
ftto 
Hf(s) 
Hr(s) 
Qi(s) 
Hr(s) 
QM 
Hr(s) 

290 
Chapter 5 
Reduction of Multiple Subsystems 
e. Using the above transfer functions, show that if 
hr(t) = constant, then q0(t) — constant and hm(t) 
increases at a constant speed. 
hf 
M? 
E 
\G 
k 
& 
^fw. 
(a) 
(b) 
FIGURE P5.38 a. Ktesibios' water clock; b. water clock block 
diagram (© 1992 IEEE) 
59. Some robotic applications can benefit from actuators 
in which load position as well as exerted force are 
controlled. Figure P5.39 shows the block diagram of 
such an actuator, where u\ and u2
 a r e voltage inputs 
to two coils, each of which controls a pneumatic 
piston, and y represents the load displacement. 
The system's output is u, the differential pressure 
acting on the load. The system also has a disturbance 
input/ext, which represents external forces that are not 
system generated, but are acting on the load. A is a 
constant (Ben-Dov, 1995). Use any method to obtain: 
a. An expression for the system's output in terms of 
the inputs U\ and u2 (Assume / e x t = 0.) 
b. An expression for the effect of/ext on the output 
u (Assume U\ and u2 = 0.) 
c. What condition on the inputs U\ and u2 will result 
inu = 0? 
Cc(.v)_-G(s) 
GJLs) 
Gn(s) 
S**n 
y 
+ 
AGv(s) 
+ 
fcx 
(Xm^H 
7N 
y*pc2 
AGv(s) 
G,(s) 
V = 11 
FIGURE P5.39 Actuator block diagram (© 1995 IEEE) 
60. Figure P5.40 shows a nonin verting operational 
amplifier. 
Rj 
R 
V 
'V. 
v'l 
?\ 
f 
A 
K, 
Rf+R, 
!' 
(«) 
(b) 
FIGURE P5.40 a. Noninverting amplifier; b. block diagram 
Assuming the operational amplifier is ideal, 
a. Verify that the system can be described by the 
following two equations: 
v0 = A(vt - v0) 
Si 
vi = Ri + 
Rf° 
b. Check that these equations can be described by 
the block diagram of Figure P5.40(6) 
c. Use Mason's rule to obtain the closed-loop sys-
Vois) 
tern transfer function 
d. Show that when A 
61. Figure P5.41 shows the diagram of an inverting 
operational amplifier. 

Problems 
291 
rAM^MA/Y 
© 
FIGURE P5.41 Inverting operational amplifier 
a. Assuming an ideal operational amplifier, use a 
similar procedure to the one outlined in Problem 
60 to find the system equations. 
b. Draw a corresponding block diagram and obtain 
Vo(s) 
the transfer function 
c. Show that when A —• oo, 
Vi(s) ' 
Vo(s) 
Vds) 
62. Figure P5.42(a) shows an ^-channel enhancement-
mode MOSFET source follower circuit. Figure 
P5.42(b) shows its small-signal equivalent (where 
Rt = Ri\\R2) (Neamen, 2001). 
a. Verify that the equations governing this circuit 
are 
Ri 
vi 
Ri + Rs 
; 
v« = vin - v0; 
v0 = 
gm{Rs\\r0)vt gs 
b. Draw a block diagram showing the relations 
between the equations. 
Vo(s) 
c. Use the block diagram in Part b to find Vi(sy 
> 
Kt 
1 
S 2 + C0Q 
>"r / l - * 3 
r, 
1 
u„ 
£ 
S+ E 
x3 •1 
1 
FIGURE P5.43 (© 1997 IEEE) 
In the figure, Kt is the spring constant of the tire, 
Mus is the wheel mass, r is the road disturbance, X\ is 
the vertical car displacement, X3 is the wheel vertical 
displacement, a>l = # - is the natural frequency of 
the unsprung system and e is a filtering parameter to 
be judiciously chosen (Lin, 1997). Find the two 
transfer functions of interest: 
a. 
b. 
R{s) 
Xi(s) 
R(s) 
64. The basic unit of skeletal and cardiac muscle cells is 
a sarcomere, which is what gives such cells a striated 
(parallel line) appearance. For example, one bicep 
cell has about 105 sarcomeres. In turn, sarcomeres 
are composed of protein complexes. Feedback 
mechanisms play an important role in sarcomeres 
and thus muscle contraction. Namely, Fenn's law 
says that the energy liberated during muscle con-
traction depends on the initial conditions and the 
load encountered. The following linearized model 
describing sarcomere contraction has been devel-
oped for cardiac muscle: 
K V:, 
(a) 
(b) 
FIGURE P5.42 a. Ann-channel enhancement-mode MOSFET 
source follower circuit; b. small-signal equivalent 
63. A car active suspension system adds an active hydrau-
lic actuator in parallel with the passive damper and 
spring to create a dynamic impedance that responds to 
road variations. The block diagram of Figure P5.43 
depicts such an actuator with closed-loop control. 
'A " 
T 
U 
.SL. 
= 
-100.2 -20.7 -30.7 
200.3" 
40 
-20.22 
49.95 526.1 
0 
10.22 -59.95 -526.1 
0 
y=[0 
1570 
0 
1570 
0 
59400] 
0 
r A ] 
1 
u 
.SL, 
r A 1 
T 
u 
[SL. 
f 208 " 
-208 
-108.8 
.-1 
u(t) 
- 6240u(t) 
where 
A = density of regulatory units with bound calcium 
and adjacent weak cross bridges (fiM) 
T = density of regulatory units with bound calcium 
and adjacent strong cross bridges (M) 
U = density of regulatory units without bound 
calcium and adjacent strong cross bridges (M) 
SL = sarcomere length (m) 

292 
Chapter 5 
Reduction of Multiple Subsystems 
The system's input is u{t) = the shortening muscle velocity 
in meters/second and the output is y ^ = muscle force 
output in Newtons (Yaniv, 2006). 
Do the following: 
a. Use MATLAB to obtain the 
Y{s) 
MATLAB 
transfer function V[s)' 
State Space 
b. Use MATLAB t o o b t a i n a p a r t i a l - 
MATLAB 
y{s) 
fraction expansion for —7—-. 
U(s) 
c. Draw a signal-flow diagram of the 
system in parallel form. 
d. Use the diagram of Part c to express the statespace 
system 
in state-variable 
form 
with ^ ^ ^ B 
decoupled equations. 
65. An electric ventricular assist device (EVAD) has 
been designed to help patients with diminished but 
still functional heart pumping action to work in 
parallel with the natural heart. The device consists 
of a brushless dc electric motor that actuates on a 
pusher plate. The plate movements help the ejec-
tion of blood in systole and sac filling in diastole. 
System dynamics during systolic mode have been 
found to be: 
x 
v 
A 
The state variables in this model are x, the pusher 
plate position, v, the pusher plate velocity, and Pao, 
the aortic blood pressure. The input to the system is 
em, the motor voltage (Tasch, 1990). 
a. Use MATLAB to find a similarity *JJJJJL 
transformation to diagonalize ( d ^ P 
the system. 
b. Use MATLAB and the obtained 
J^JliL 
similarity transformation 
^jj]^P 
of Part a to obtain a diagonalized 
expression for the system. 
66. In an experiment to measure and identify postural 
arm reflexes, subjects hold with their hands a linear 
hydraulic manipulator. A load cell is attached to the 
actuator handle to measure resulting forces. At the 
application of a force, subjects try to maintain a 
fixed posture. Figure P5.44 shows a block diagram 
for the combined arm-environment system. 
0 
0 
0 
1 
0 
-68.3 -7.2 
3.2 -0.7 
X 
V 
_*00 _ 
+ 
0 " 
425.4 
0 
Environment 
ft 
Us) 
Arm 
He(s) 
D(s) 
+ t 
H„(s) 
Xa(s) 
ffi(s) 
P*M 
*' 
FM 
Hr(s) 
Ms) 
Hacl(s) 
Fr^s) 
FIGURE P5.44 
In the diagram, Hr(s) represents the reflexive length 
and velocity feedback dynamics; Hact(s) the activa-
tion dynamics, Hi(s) the intrinsic act dynamics; 
Hh(s) the hand dynamics; He(s) the environmental 
dynamics; Xa(s) the position of the arm; Xh(s) the 
measured position of the hand; Fh(s) the measured 
interaction force applied by the hand; Fint(s) the 
intrinsic force; Frei(s) the reflexive force; A(s) the 
reflexive activation; and D(s) the external force 
perturbation (de Vlugt, 2002). 
a. Obtain a signal-flow diagram from the block 
diagram. 
b. Find Fh{s) 
D(sY 
67. Use LabVIEW's Control Design and 
Simulation Module to obtain the 
controller and the observer ca-
nonical forms for: 
State Space 
LabVIEW 
G(s) = 
s2 + 7s + 2 
s3 + 9s2 + 26s+ 24 
68. A virtual reality simulator with haptic (sense of 
touch) feedback was developed to simulate the 
control of a submarine driven through a joystick 
input. Operator haptic feedback is provided 
through joystick position constraints and simula-
tor movement (Karkoub, 
2010). Figure P5.45 
shows the block diagram of the haptic feedback 
system in which the input uh is the force exerted by 
the muscle of the human arm; and the outputs are 
ys> the position of the simulator, and y;, the posi-
tion of the joystick. 

Problems 
293 
><>,+ 
^ 
FIGURE P5.45 Copyright © 2010 Cambridge University 
Press. Reprinted with permission. 
a. Find the transfer function 
b. Find the transfer function 
Ya(s) 
Uh(s)-
Yj(s) 
Uh(s)' 
69. Some medical procedures require the insertion of a 
needle under a patient's skin using CT scan monitoring 
guidance for precision. CT scans emit radiation, posing 
some cumulative risks for medical personnel. To avoid 
this problem, aremote control robot has been developed 
{Piccin, 2009). The robot controls the needle in position 
and angle in the constraint space of a CT scan machine 
and also provides the physician with force feedback 
commensurate with the insertion opposition encoun-
tered by the type of tissue in which the needle is inserted. 
The robot has other features that give the operator the 
Slave 
manipulator 
Master 
manipulator 
similar sensations and maneuverability as if the needle 
was inserted directly. Figure P5.46 shows the block 
diagram of the force insertion mechanism, where Fh 
is the input force and Xh is the output displacement. 
Surnming junction inputs are positive unless indicated 
with a negative sign. By way of explanation, Z = imped-
ance; G = transfer 
function; C,•.— communication 
channel transfer functions; F= force; X= position. 
Subscripts h and m refer to the master manipulator. 
Subscripts s and e refer to the slave manipulator. 
a. Assuming Zh = 0, C\ = Cs, Cz = 1 + C^ and 
C4 = — Cm use Mason's Rule to show that the 
transfer function from the operators force input 
Fh to needle displacement Xh is given by 
Y(s) = Xh(s) 
Fh(s) 
Z -^2(1 
+GSCS) 
1 + GSCS + Z-\cm 
+ C2ZeGsCs) 
b. Now with Zh ^ 0 show that 
Y(s) 
Xhjs) _ 
Fh{s) 
l + Y(s)Zh 
70. A hybrid solar cell and diesel power distribution 
system has been proposed and tested (Lee, 2007). 
The system has been shown to have a very good 
uninterruptible power supply as well as line voltage 
regulation capabilities. Figure P5.47 shows a 
signal-flow diagram of the system. The output, 
VLoaa, is the voltage across the load. The two inputs 
are Icf, the reference current, and IDist, the distur-
bance representing current changes in the supply. 
a. Refer to Figure P5.47 and find the transfer func-
VLoad{s) 
tion lcf{s) 
b. Find the transfer function Vtoadis) 
iDistis) 
71. Continuous casting in steel production is essentially 
a solidification process by which molten steel is 
Lfs + R 
FIGURE P5.46 
-I 
FIGURE P5.47 

294 
Chapter 5 
Reduction of Multiple Subsystems 
solidified into a steel slab after passing through a 
mold, as shown in Figure P5.48(«). Final product 
dimensions depend mainly on the casting speed Vp 
(in m/min), and on the stopper position X(in %) that 
controls the flow of molten material into the mold 
{Kong, 1993). A simplified model of a casting system is 
shown in Figure P5.48(6) {Kong, 1993) and {Graebe, 
1995). In the model, Hm = mold level (in mm); Ht = 
assumed constant height of moltensteel in the tundish; 
Dz = mold thickness = depth of nozzle immerged into 
molten steel; and Wt=weight of molten steel in the 
tundish. 
For a specific setting let Am = 0.5 and 
Gx(s) = 
0.63 
s + 0.926 
Also assume that the valve positioning loop may be 
modeled by the following second-order transfer 
function: 
Gv(s) = 
100 
m = 
Yc{s) 
s2 + 10s + 100 
and the controller is modeled by the following 
transfer function: 
Gc(s) = 1.6(s2+ 1.255+ 0.25) 
„ LADLE ,_, 
HYDRAULIC 
UNIT 
REGULATOR 
UNIT 
SET-
POINT 
Change in casting 
speed, A Vp (s) 
Set poml 
R(s) 
— ^ 
Error 
Efs) 
Mold level Valve-position 
Linearized 
conlroller 
loop 
flow 
(« 
FIGURE P5.48 
Steel mold process: a. process (© 1993 IEEE); 
b. block diagram 
The sensitivity of the mold level sensor is p — 0.5 and 
the initial values of the system variables at t=0~ are: 
R{0~) = 0; Yc((T) = X(0~) = 41.2;AHm{Q-) = 0; 
i/m(0-) = -75;AVp(0-) = 0; and Vp{Q~) = 0. Do 
the following: 
a. Assuming vp{t) is constant [Avp=0], find the 
closed-loop transfer function T {s) = AHm{s)/ R{s). 
b. F o r r ( t ) = 5 u(t), v p ( t ) = 0.97 u(t), 
Simulink 
andffm(0~) =—75mm, use Simulink 
to simulate the system. Record the time 
and mold level (in array format) by con-
necting them to Workspace sinks, each of 
which shouldcarry the respective varia-
blename. After the simulation ends, uti-
lize MATLAB plot commands to obtain and 
edit the graph of hm(t) from t = 0 to 80 
seconds. 
72. A simplified second-order transfer function model 
for bicycle dynamics is given by 
state space 
gflO 
8{s) 
aV s + -
bh •"-I 
The input is S(s), the steering angle, and the output is 
(p{s), the tilt angle (between the floor and the bicycle 
longitudinal plane). In the model parameter a is the 
horizontal distance from the center of the back wheel 
to the bicycle center of mass; b is the horizontal 
distance between the centers of both wheels; h is 
the vertical distance from the center of mass to the 
floor; Vis the rear wheel velocity (assumed constant); 
and g is the gravity constant. It is also assumed that 
the rider remains at a fixed position with respect to 
the bicycle so that the steer axis is vertical and that all 
angle deviations are small {Astrom, 2005). 
a. Obtain a state-space representation for the bicy-
cle model in phase-variable form. 
b. Find system eigenvalues and eigenvectors. 
c. Find an appropriate similarity transformation 
matrix to diagonalize the system and obtain 
the state-space system's diagonal representation. 
73. It is shown in Figure 5.6(c) that when negative 
feedback is used, the overall transfer function for 
the system of Figure 5.6(b) is 
C(s) _ 
G{s) 
R{s) 
1 + G(s)H(s) 

Problems 
295 
Develop the block diagram of an alternative feed-
back system that will result in the same closed-loop 
transfer function, C(s)/R(s), with G(s) unchanged 
and unmoved. In addition, your new block diagram 
must have unity gain in the feedback path. You can 
add input transducers and/or controllers in the main 
forward path as required. 
DESIGN PROBLEMS 
74. The motor and load shown in Figure P5.49(a) are 
used as part of the unity feedback system shown in 
Figure P5.49(b). Find the value of the coefficient of 
viscous damping, DL, that must be used in order to 
yield a closed-loop transient response having a 
20% overshoot. 
Motor 
K,=2 N-m/A 
Kh = 2 V-s/rad 
/ a = 2kg-m2 
Da=2N-m-s/rad 
R„=2Q 
\- J /t=800kg-m2 
m+fi > £(.v) 
y 
* 
1000 
*-
Motor 
& 
load 
Q,u(s\ 
Gear 
train 
0,(5) 
Q>) 
FIGURE P5.49 
Position control: a. motor and load; b. block 
diagram 
R(s) 
£(.s) 
J<g>-^- . 
25 
.9(.9+1) 
C(s) 
(«) 
Amp 
Motor 
/?(.v) 
E(s) 
25 
.9(.9+1) 
C(S) 
K2s 
Tachometer 
(b) 
FIGURE P5.50 
a. Position control; b. position control with 
tachometer 
76. The system shown in Figure P5.51 will have its 
transient response altered by adding a tachometer. 
Design K and K^ in the system to yield a damping 
ratio of 0.69. The natural frequency of the system 
before the addition of the tachometer is 10 rad/s. 
Tachometer 
R(s) $f>,m 
•-(X) 
Pre 
K 
amplif 
-
*<< 
*vy ' 
ier 
K2s 
s(s+ I) 
-* 
1 
Power amplifier 
and motor 
C(.v) 
FIGURE P5.51 
Position control 
77. The mechanical system shown in Figure 
wiieypms 
P5.52(a) is used as part of the unity feed- 
> V J J f 
back system shown in Figure P5.52(b). 
control solutions 
Find the values of M and D to yield 20% overshoot 
and 2 seconds settling time. 
75. Assume that the motor whose transfer function is 
shown in Figure P5.50(«) is used as the forward path 
of a closed-loop, unity feedback system. 
a. Calculate the percent overshoot and settling time 
that could be expected. 
b. You want to improve the response found in Part 
a. Since the motor and the motor constants 
cannot be changed, an amplifier and a tachome-
ter (voltage generator) are inserted into the loop, 
as shown in Figure P5.50. Find the values of K^ 
and K.2 to yield a 16% overshoot and a settling 
time of 0.2 second. 
«aW Motor — N\ = 10 
N2 = 20 
Radius = 2 m 
7=lkg-m 2 
For the motor: 
Ja = 1 kg-m2 
Da = 1 N-m-s/rad 
Ra = \0. 
Kb = 1 V-s/rad 
Kt = 1 N-m/A 
fv = 1 N-s/m 
FIGURE P5.52 
a. Motor and load; (figure 
continues) 

296 
Chapter 5 
Reduction of Multiple Subsystems 
A'(.v) + 
FIGURE P5.52 (Continued) b. motor and load in feedback 
system 
78. Assume ideal operational amplifiers in the circuit of 
Figure P5.53. 
a. Show that the leftmost operational amplifier works 
as a subtracting amplifier. Namely, v\ =v0 — vin. 
b. Draw a block diagram of the system, with the 
subtracting amplifier represented with a sum-
ming junction, and the circuit of the rightmost 
operational amplifier with a transfer function in 
the forward path. Keep R as a variable. 
c. Obtain the system's closed-loop transfer function. 
d. For a unit step input, obtain the value of R that 
will result in a settling time Ts = 1 msec. 
e. Using the value of R calculated in Part d, make a 
sketch of the resulting unit step response. 
10 k 
AAA/ 
10 k 
0.1 HF 
AAV 
10 k 
10k 
R 
ANSr 
FIGURE P5.53 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
79. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses the active control of a pantograph mechanism 
for high-speed rail systems. In this problem you found a 
functional block diagram relating the output force 
(actual) to the input force (desired output). In Problem 
67, Chapter 2, you found the transfer function for the 
pantograph dynamics, that is, the transfer function 
relating the displacement of the spring that models 
the head to the applied force, or G(s) = (Yf,(s)— 
Ycat(s))/Fup(s) 
(O'Connor, 1997). We now create a 
pantograph active-control loop by adding the following 
components and following your functional block dia-
gram found in Problem 21, Chapter 1: input transducer 
(G,-(J) = 1/100), controller {Gc{s) = K), 
actuator 
(Ga(s) = 1/1000), pantograph spring (Ks = 82.3 x 
103N/m), and sensor (H0(s) = 1/100). 
a. Using the functional block diagram from your 
solution of Problem 21 in Chapter 1, and the 
pantograph dynamics, G(s), found in Problem 67, 
Chapter 2, assemble a block diagram of the 
active pantograph control system. 
b. Find the closed-loop transfer function for the 
block diagram found in Part a if K = 1000. 
c. Represent the pantograph dynamics 
statespace 
in phase-variable form and find a 
^ E ^ B 
state-space representation for the closed-loop 
system if K = 1000). 
80. Control of HIV/AIDS. Given the HIV 
state Space 
system of Problem 82 in Chapter 4 and 
repeated here for convenience (Craig, 2004): 
T r 
V 
-0.04167 
0 
-0.0058' 
0.0217 -0.24 
0.0058 
0 
5.2 
-5.2 
0 
100 -2.4 
« i 
y = [ 0 
0 1 
T r 
v 
MATLAB 
Express the system in the following forms: 
a. Phase-variable form 
b. Controller canonical form 
c. Observer canonical form 
Finally, 
d. Use MATLAB to obtain the system's 
diagonalized representation. 
81. Hybrid vehicle. Figure P5.54 shows the block dia-
gram of a possible cascade control scheme for an 
HEV driven by a dc motor (Preitl, 2007). 
Let the speed controller Gsc(s) = 100 + f, the 
torque controller and power amp 
KAGTC(S) — 
10 +1, the current sensor sensitivity Kcs = 0.5, the 
speed sensor sensitivity #55=0.0433. Also following 
the development in previous chapters g- = 1; Vtot^t — 
1 . 8 ^ = 2 ^ = ^ = 0 . 1 ^ = ^
^ 
= 0.0615: 
and pCwAv0 A = 0.6154. 
a. Substitute these values in the block diagram, and 
find the transfer function, T(s) = V(s)/Rv(s), 
using block-diagram reduction rules. [Hint: Start 

Cyber Exploration Laboratory 
297 
Ref. 
signal 
Speed 
Speed 
KA GTC(S) 
error 
controller command 
8M 
Gsds) 
Uc(s) 
Torque 
Amplifier 
controller 
output 
& power 
voltage 
amplifier 
u M 
Armature 
circuit 
Armature 
current 
Feedback 
speed signal 
Ksstys) 
» KA GTC(S) 
Feedback 
current signal 
KcsUs) 
Current sensor 
sensitivity 
h(s) 
Eb(s) 
Back cm I 
Motive 
torque 
m 
n„K, 
Speed sensor 
sensitivity 
FIGURE P5.54 
Aero-
dynamic 
drag torque 
Ti(s) 
pc'A''Z 
1£ 
Angular 
speed, 
Friction 
torque 
Tf(s) 
D = k,+ 
Vehicle 
speed, V(s) 
• 
MATLAB 
by moving the last f- block to the right past the 
pickoff point.] 
b. Develop a Simulink model for 
simulink 
the original system in Figure 
P5.54. Set the reference sig-
nal input, rv(t)=4u(t), asa 
step input with a zero initial 
value, a step time = 0 sec-
onds, and a final value of 4 volts . Use 
X-Y graphs to display (over the period 
from 0 to 8 seconds) the response of the 
following variables to the step input: 
(1) change in car speed (m/s) , (2) car 
acceleration (m/s2) , and (3) motor ar-
mature current (A) . 
To record the time and the above three 
variables (in array format), connect 
them to four Workspace sinks, each of 
which carry the respective variable 
name. After the simulation ends, uti-
lize MATLAB plot commands to obtain and 
edit the three graphs of interest. 
Cyber Exploration Laboratory 
Experiment 5.1 
Objectives To verify the equivalency of the basic forms, including cascade, 
parallel, and feedback forms. To verify the equivalency of the basic moves, including 
moving blocks past summing junctions, and moving blocks past pickoff points. 
Minimum Required Software Packages MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
1. Find the equivalent transfer function of three cascaded blocks, G\ (s) = 
-. 
s + 4 
2. Find the equivalent transfer function of three parallel blocks, G\ (s) = 
3. Find the equivalent transfer function of the negative feedback system of 
s + 1 
5 + 3 
Figure P5.55 if G(s) = s{s + 2) , and H(s) = 
m 
tjrx 
. 
-
G(s) 
H(s) 
*-
C(s) 
s + 4' 
FIGURE P5.55 

Chapter 5 
Reduction of Multiple Subsystems 
4. For the system of Prelab 3, push H(s) to the left past the summing junction and 
draw the equivalent system. 
5. For the system of Prelab 3, push H(s) to the right past the pickoff point and draw 
the equivalent system. 
Lab 
1. Using Simulink, set up the cascade system of Prelab 1 and the equivalent single 
block. Make separate plots of the step response of the cascaded system and its 
equivalent single block. Record the values of settling time and rise time for each 
step response. 
2. Using Simulink, set up the parallel system of Prelab 2 and the equivalent single block. 
Make separate plots of the step response of the parallel system and its equivalent 
single block. Record the values of settling time and rise time for each step response. 
3. Using Simulink, set up the negative feedback system of Prelab 3 and the 
equivalent single block. Make separate plots of the step response of the negative 
feedback system and its equivalent single block. Record the values of settling 
time and rise time for each step response. 
4. Using Simulink, set up the negative feedback systems of Prelabs 3,4, and 5. Make 
separate plots of the step response of each of the systems. Record the values of 
settling time and rise time for each step response. 
Postlab 
1. Using your lab data, verify the equivalent transfer function of blocks in cascade. 
2. Using your lab data, verify the equivalent transfer function of blocks in parallel. 
3. Using your lab data, verify the equivalent transfer function of negative feedback 
systems. 
4. Using your lab data, verify the moving of blocks past summing junctions and 
pickoff points. 
5. Discuss your results. Were the equivalencies verified? 
Experiment 5.2 
Objective To use the various functions within Lab VIEW'S Control Design and 
Simulation Module to implement block diagram reduction. 
Minimum Required Software Package LabVIEW with the Control Design 
Simulation Module 
Prelab Given the block diagram from Example 5.2, replace Gl5 G2, G3, Hi, H2, H3 
with the following transfer functions and obtain an equivalent transfer function. 
Gi = 
n; (¾ = ——-; G3 = 5 
; Hi = ——^; H2 = 2; #3 = 1 
5 + 10 
s + 1 
sz +4s +4 
s + 2 
Lab Use LabVIEW to implement the block diagram from Example 5.2 using the 
transfer functions given in the Prelab. 
Postlab Verify your calculations from the Prelab with that of the equivalent 
transfer function obtained with LabVIEW. 

Bibliography 
Experiment 5.3 
Objective To use the various functions within Lab VIEW'S Control Design and 
Simulation Module and the Mathematics/Polynomial palette to implement Mason's 
rule for block diagram reduction. 
Minimum Required Software Package Lab VIEW with Control Design and 
Simulation Module, Math Script RT Module, and the Mathematics/Polynomial 
palette. 
Prelab Given the block diagram created in the Prelab of Cyber Exploration 
Laboratory 5.2, use Mason's rule to obtain an equivalent transfer function. 
Lab Use Lab VIEW'S Control Design and Simulation Module as well as the 
Mathematics/Polynomial functions to implement block diagram reduction using 
Mason's rule. 
Postlab Verify your calculations from the Prelab with that of the equivalent 
transfer function obtained with Lab VIEW 
^ Bibliography^ 
Astrom, K., Klein, R. E., and Lennartsson, A. Bicycle Dynamics and Control. IEEE Control 
Systems, August 2005, pp. 26-47. 
Bailey, F. N, Cockburn, J. C, and Dee, A. Robust Control for High-Performance Materials 
Testing. IEEE Control Systems, April 1992, pp. 63-70. 
Ballard, R. D. The Discovery of the Titanic, Warner Books, New York, 1987. 
Ben-Dov, D., and Salcudean, S. E. A Force-Controlled Pneumatic Actuator. IEEE Transac-
tions on Robotics and Automation, vol. 11, 1995, pp. 906-911. 
Cavallo, A., De Maria, G., and Verde, L. Robust Flight Control Systems: A Parameter Space 
Design. Journal of Guidance, Control, and Dynamics, vol. 15, no. 5, September-October 
1992, pp. 1207-1215. 
Craig, I. K., Xia, X., and Venter, J. W., Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria, IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
de Vlugt, E., Schouten, A. C, and van derHelm, F.C.T. Adaptation of Reflexive Feedback during 
Arm Posture to Different Environments. Biological Cybernetics, vol. 87, 2002, pp. 10-26. 
Evans, J., Krishnamurthy, B., Barrows, B., Skewis, T., and Lumelsky, V Handling Real-World 
Motion Planning: A Hospital Transport Robot. IEEE Control Systems, February 1992, pp. 15-20. 
Graebe, S. F, Goodwin, G. C, and Elsley, G, Control Design and Implementation in 
Continuous Steel Casting. IEEE Control Systems, August 1995, pp. 64-71. 
Hostetter, G. H., Savant, C. J., Jr. and Stefani, R. T. Design of Feedback Control Systems. 2d ed. 
Saunders College Publishing, New York, 1989. 
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL 
Memorandum Report 4393. Naval Research Laboratory, Washington, DC, 1980. 
Karkoub, M., Her, M.-G., and Chen, J. M. Design and Control of a Haptic Interactive Motion 
Simulator for Virtual Entertainment Systems, Robonica, vol. 28, 2010, pp. 47-56. 
Kong, F , and de Keyser, R. Identification and Control of the Mould Level in a Continuous 
Casting Machine. Second IEEE Conference on Control Application, Vancouver, B.C., 1993. 
pp. 53-58. 
Kurland, M., and Papson, T. P. Analog Computer Simulation of Linear Modulation Systems. 
Transactions of the Analog/Hybrid Computer Educational Society, January 1971, pp. 9-18. 

300 
Chapter 5 
Reduction of Multiple Subsystems 
Lee, S.-R., Ko, S.-H, Dehbonei, H., Jeon, C.-H., and Kwon, O.-S, Operational Characteristics of 
PV/Diesel Hybrid Distributed Generation System Using Dual Voltage Source Inverter for 
Weak Grid, ISIS 2007 Proceedings, Eighth Symposium on Advanced Intelligent Systems. 2007. 
Lepschy, A. M., Mian, G. A., and Viaro, U. Feedback Control in Ancient Water and 
Mechanical Clocks. IEEE Transactions on Education, vol. 35,1992, pp. 3-10. 
Lin, J.-S., and Kanellakopoulos, I., Nonlinear Design of Active Suspensions. IEEE Control 
Systems, vol. 17, issue 3, June 1997, pp. 45-59. 
Mason, S. J. Feedback Theory—Some Properties of Signal-Flow Graphs. Proc. IRE, 
September 1953, pp. 1144-1156. 
Milhorn, H. T, Jr. The Application of Control Theory to Physiological Systems. W. B. 
Saunders, Philadelphia, 1966. 
Neamen, D. A. Electronic Circuit Analysis and Design. McGraw-Hill, 2d ed., 2001, p. 334. 
O'Connor, D. N., Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Piccin, O., Barbe L., Bayle B., and de Mathelin, M. A Force Feedback Teleoperated Needle 
Insertion Device for Percutaneous Procedures. Int. J. of Robotics Research, vol. 28, 2009, 
p. 1154. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE, 2007. 
Tasch, U, Koontz, J. W, Ignatoski, M. A., and Geselowitz, D. B. An Adaptive Aortic Pressure 
Observer for the Penn State Electric Ventricular Assist Device. IEEE Transactions on 
Biomedical Engineering, vol. 37, 1990, pp. 374-383. 
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New 
York, 1968. 
Vaughan, N. D., and Gamble, J. B. The Modeling and Simulation of a Proportional Solenoid Valve. 
Journal of Dynamic Systems, Measurements, and Control, vol. 118, March 1996, pp. 120-125. 
Yaniv, Y., Sivan, R., and Landesberg, A. Stability, Controllability and Observability of the 
"Four State" Model for the Sarcomeric Control of Contraction. Annals of Biomedical 
Engineering, vol. 34, 2006, pp. 778-789. 

Stability 
* 
^ Chapter Learning Outcomes J) 
After completing this chapter the student will be able to: 
• Make and interpret a basic Routh table to determine the stability of a system 
(Sections 6.1-6.2) 
• Make and interpret a Routh table where either the first element of a row is zero or an 
entire row is zero (Sections 6.3-6.4) 
• 
Use a Routh table to determine the stability of a system represented in state space 
(Section 6.5) 
^ Case Study Learning Outcomes^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to find the range of preamplifier gain to keep the system stable. 
• 
Given the block diagrams for the UFSS vehicle's pitch and heading control systems on 
the back endpapers, you will be able to determine the range of gain for stability of 
the pitch or heading control system. 
6 
State Space 
301 

Chapter 6 
Stability 
Introduction 
In Chapter 1, we saw that three requirements enter into the design of a control 
system: transient response, stability, and steady-state errors. Thus far we have 
covered transient response, which we will revisit in Chapter 8. We are now ready 
to discuss the next requirement, stability. 
Stability is the most important system specification. If a system is unstable, 
transient response and steady-state errors are moot points. An unstable system 
cannot be designed for a specific transient response or steady-state error require-
ment. What, then, is stability? There are many definitions for stability, depending 
upon the kind of system or the point of view. In this section, we limit ourselves to 
linear, time-invariant systems. 
In Section 1.5, we discussed that we can control the output of a system if the 
steady-state response consists of only the forced response. But the total response of a 
system is the sum of the forced and natural responses, or 
c(t) = cfotced(t) + ^natural (0 
(6.1) 
Using these concepts, we present the following definitions of stability, instability, and 
marginal stability: 
A linear, time-invariant system is stable if the natural response approaches zero as 
time approaches infinity. 
A linear, time-invariant system is unstable if the natural response grows without 
bound as time approaches infinity. 
A linear, time-invariant system is marginally stable if the natural response neither 
decays nor grows but remains constant or oscillates as time approaches infinity. 
Thus, the definition of stability implies that only the forced response remains as the 
natural response approaches zero. 
These definitions rely on a description of the natural response. When one is 
looking at the total response, it may be difficult to separate the natural response from 
the forced response. However, we realize that if the input is bounded and the total 
response is not approaching infinity as time approaches infinity, then the natural 
response is obviously not approaching infinity. If the input is unbounded, we see an 
unbounded total response, and we cannot arrive at any conclusion about the stability 
of the system; we cannot tell whether the total response is unbounded because the 
forced response is unbounded or because the natural response is unbounded. Thus, 
our alternate definition of stability, one that regards the total response and implies 
the first definition based upon the natural response, is this: 
A system is stable if every bounded input yields a bounded output. 
We call this statement the bounded-input, bounded-output (BIBO) definition of 
stability. 
Let us now produce an alternate definition for instability based on the total 
response rather than the natural response. We realize that if the input is bounded but 
the total response is unbounded, the system is unstable, since we can conclude that 
the natural response approaches infinity as time approaches infinity. If the input is 
unbounded, we will see an unbounded total response, and we cannot draw any 
conclusion about the stability of the system; we cannot tell whether the total 
response is unbounded because the forced response is unbounded or because the 

6.1 Introduction 
natural response is unbounded. Thus, our alternate definition of instability, one that 
regards the total response, is this: 
A system is unstable if any bounded input yields an unbounded output. 
These definitions help clarify our previous definition of marginal stability, 
which really means that the system is stable for some bounded inputs and unstable 
for others. For example, we will show that if the natural response is undamped, a 
bounded sinusoidal input of the same frequency yields a natural response of growing 
oscillations. Hence, the system appears stable for all bounded inputs except this one 
sinusoid. Thus, marginally stable systems by the natural response definitions are 
included as unstable systems under the BIBO definitions. 
Let us summarize our definitions of stability for linear, time-invariant systems. 
Using the natural response: 
1. A system is stable if the natural response approaches zero as time approaches 
infinity. 
2. A system is unstable if the natural response approaches infinity as time 
approaches infinity. 
3. A system is marginally stable if the natural response neither decays nor grows but 
remains constant or oscillates. 
Using the total response (BIBO): 
1. A system is stable if every bounded input yields a bounded output. 
2. A system is unstable if any bounded input yields an unbounded output. 
Physically, an unstable system whose natural response grows without bound 
can cause damage to the system, to adjacent property, or to human life. Many times 
systems are designed with limited stops to prevent total runaway. From the 
perspective of the time response plot of a physical system, instability is displayed 
by transients that grow without bound and, consequently, a total response that does 
not approach a steady-state value or other forced response.1 
How do we determine if a system is stable? Let us focus on the natural response 
definitions of stability. Recall from our study of system poles that poles in the left 
half-plane (lhp) yield either pure exponential decay or damped sinusoidal natural 
responses. These natural responses decay to zero as time approaches infinity. Thus, if 
the closed-loop system poles are in the left half of the plane and hence have a 
negative real part, the system is stable. That is, stable systems have closed-loop 
transfer functions with poles only in the left half-plane. 
Poles in the right half-plane (rhp) yield either pure exponentially increasing or 
exponentially increasing sinusoidal natural responses. These natural responses 
approach infinity as time approaches infinity. Thus, if the closed-loop system poles 
are in the right half of the s-plane and hence have a positive real part, the system is 
unstable. Also, poles of multiplicity greater than 1 on the imaginary axis lead to 
the sum of responses of the form At11 cos (cot + ¢), where n = 1,2,..., which also 
approaches infinity as time approaches infinity. Thus, unstable systems have closed-
loop transfer functions with at least one pole in the right half-plane and/or poles of 
multiplicity greater than 1 on the imaginary axis. 
Care must be taken here to distinguish between natural responses growing without bound and a forced 
response, such as a ramp or exponential increase, that also grows without bound. A system whose forced 
response approaches infinity is stable as long as the natural response approaches zero. 

304 
Chapter 6 
Stability 
Finally, a system that has imaginary axis poles of multiplicity 1 yields pure 
sinusoidal oscillations as a natural response. These responses neither increase nor 
decrease in amplitude. Thus, marginally stable systems have closed-loop transfer 
functions with only imaginary axis poles of multiplicity! and poles in the left half-plane. 
As an example, the unit step response of the stable system of Figure 6.1(a) is 
compared to that of the unstable system of Figure 6.1(b). The responses, also shown 
in Figure 6.1, show that while the oscillations for the stable system diminish, those for 
the unstable system increase without bound. Also notice that the stable system's 
response in this case approaches a steady-state value of unity. 
It is not always a simple matter to determine if a feedback control system is 
stable. Unfortunately, a typical problem that arises is shown in Figure 6.2. Although 
we know the poles of the forward transfer function in Figure 6.2(a), we do not know 
the location of the poles of the equivalent closed-loop system of Figure 6.2(b) 
without factoring or otherwise solving for the roots. 
However, under certain conditions, we can draw some conclusions about 
the stability of the system. First, if the closed-loop transfer function has only 
**•» J&B&, 
L_ 
3 
s(s+\)(s + 2) 
cm 
JO 
A 
X -
-x-
-2.672 
-0.164 
X -
j 1.047 
s-plane 
-j 1.047 
Stable system's 
closed-loop poles 
(not to scale) 
15 
Time (seconds) 
R(s) = ~s + ^ > E{s) 
1 
s(s+))(s + 2) 
C(s) 
Unstable system 
j 1.505 
J® 
t- x 
-3.087 
FIGURE 6.1 
Closed-loop 
poles and response: 
a. stable system; 
b. unstable system 
0.0434 
-j 1.505 I- X 
Unstable system's 
closed-loop poles 
(not to scale) 
s-plane 
0 
-1 
A/ 
/ \ / 
0 \t\l\hhf 
V \ \ \ \ 
J M y y 
Time (seconds) 
I • 
30 
I 

6.2 Routh-Hurwitz Criterion 
305 
R(s) + x-x m r 
10(5 + 2) 
s(s + 4)(5 + 6)(5 + 8)(5 + 10) 
C(s) 
(a) 
FIGURE 6.2 Common cause 
of problems in finding closed-
loop poles: a. original system; 
(b) 
b. equivalent system 
R(s) 
10(5 + 2) 
55 + 2854 + 28453 + 123252 + 19305 + 20 
C(s) 
left-half-plane poles, then the factors of the denominator of the closed-loop system 
transfer function consist of products of terms such as (s + a,-), where at is real and 
positive, or complex with a positive real part. The product of such terms is a 
polynomial with all positive coefficients.2 No term of the polynomial can be missing, 
since that would imply cancellation between positive and negative coefficients or 
imaginary axis roots in the factors, which is not the case. Thus, a sufficient condition 
for a system to be unstable is that all signs of the coefficients of the denominator of 
the closed-loop transfer function are not the same. If powers of s are missing, the 
system is either unstable or, at best, marginally stable. Unfortunately, if all coef-
ficients of the denominator are positive and not missing, we do not have definitive 
information about the system's pole locations. 
If the method described in the previous paragraph is not sufficient, then a 
computer can be used to determine the stability by calculating the root locations of 
the denominator of the closed-loop transfer function. Today some hand-held 
calculators can evaluate the roots of a polynomial. There is, however, another 
method to test for stability without having to solve for the roots of the denominator. 
We discuss this method in the next section. 
( 6.2 Routh-Hurwitz Criterion 
In this section, we learn a method that yields stability information without the need 
to solve for the closed-loop system poles. Using this method, we can tell how many 
closed-loop system poles are in the left half-plane, in the right half-plane, and on the 
;'w-axis. (Notice that we say how many, not where.) We can find the number of poles 
in each section of the s-plane, but we cannot find their coordinates. The method is 
called the Routh-Hurwitz criterion for stability (Routh, 1905). 
The method requires two steps: (1) Generate a data table called a Routh table 
and (2) interpret the Routh table to tell how many closed-loop system poles are in 
the left half-plane, the right half-plane, and on the jco-axis. You might wonder why we 
study the Routh-Hurwitz criterion when modern calculators and computers can tell 
us the exact location of system poles. The power of the method lies in design rather 
than analysis. For example, if you have an unknown parameter in the denominator of 
a transfer function, it is difficult to determine via a calculator the range of this 
parameter to yield stability. You would probably rely on trial and error to answer the 
The coefficients can also be made all negative by multiplying the polynomial by - 1 . This operation does 
not change the root location. 

306 
Chapter 6 
Stability 
R(s) 
N{s) 
a^sA + a3s3 + a2s2 + a\s + OQ 
C(s) 
FIGURE 6.3 Equivalent closed-loop transfer 
function 
stability question. We shall see later that the Routh-Hurwitz criterion can yield a 
closed-form expression for the range of the unknown parameter. 
In this section, we make and interpret a basic Routh table. In the next section, 
we consider two special cases that can arise when generating this data table. 
Generating a Basic Routh Table 
Look at the equivalent closed-loop transfer function shown in Fig-
ure 6.3. Since we are interested in the system poles, we focus our 
attention on the denominator. We first create the Routh table shown 
in Table 6.1. Begin by labeling the rows with powers of s from the 
highest power of the denominator of the closed-loop transfer func-
tion to s°. Next start with the coefficient of the highest power of s in the denominator 
and list, horizontally in the first row, every other coefficient. In the second row, list 
horizontally, starting with the next highest power of s, every coefficient that was 
skipped in the first row. 
The remaining entries are filled in as follows. Each entry is a negative determi-
nant of entries in the previous two rows divided by the entry in the first column directly 
above the calculated row. The left-hand column of the determinant is always the first 
column of the previous two rows, and the right-hand column is the elements of the 
column above and to the right. The table is complete when all of the rows are completed 
down to s°. Table 6.2 is the completed Routh table. Let us look at an example. 
TABLE 6.1 
Initial layout for Routh table 
TABLE 6.2 
Completed Routh table 
.v4 
* 
r 
.v' 
$ 
a4 
az 
a2 
a\ 
% 
0 
« 4 
«3 
a4 a2 
a3 a\ 
«3 
«3 a\ 
b\ 
b2 
ft: 
b\ b2 
d 
0 
C] 
= &i 
= C\ 
= di 
02 
fl4 do 
a3 
0 
«3 
03 0 
bi 0 
bt 
&] 0 
ci 0 
C\ 
= b, 
= 0 
= 0 
-
0 
aA 0 
a3 0 
«3 
- a3 0 
bi 0 
fel 
-
bi 0 
a o 
C\ 
= 0 
= 0 
= 0 
Example 6.1 
Creating a Routh Table 
PROBLEM: Make the Routh table for the system shown in Figure 6.4(a). 
SOLUTION: The first step is to find the equivalent closed-loop system because we 
want to test the denominator of this function, not the given forward transfer 
m 
FIGURE 6.4 
a. Feedback 
system for Example 6.1; 
b. equivalent closed-
loop system 
> «*> 
9 * 
1000 
(s + 2)(s + 3)(s + 5) 
C{s) 
R(s) 
1000 
s3+ 10s2 + 31s +1030 as) 
(a) 
(b) 

6.2 Routh-Hurwitz Criterion 
307 
TABLE 6.3 
Completed Routh table for Example 6.1 
1 
40" 
1 
1 
31 
" 1 103 
1 
1 10 
-72 
3 
-72 
= -72 
= 103 
31 
4030 
103 
1 0 
0 0 = 0 
1 0 
-72 0 
-72 
= 0 
- 1 0 
1 0 
1 
1 0 
- 72 0 
-72 
= 0 
= 0 
function, for pole location. Using the feedback formula, we obtain the equivalent 
system of Figure 6.4(b). The Routh-Hurwitz criterion will be applied to this 
denominator. First label the rows with powers of s from s3 down to s° in a vertical 
column, as shown in Table 6.3. Next form the first row of the table, using the 
coefficients of the denominator of the closed-loop transfer function. Start with 
the coefficient of the highest power and skip every other power of s. Now form the 
second row with the coefficients of the denominator skipped in the previous step. 
Subsequent rows are formed with determinants, as shown in Table 6.2. 
For convenience, any row of the Routh table can be multiplied by a positive 
constant without changing the values of the rows below. This can be proved by 
examining the expressions for the entries and verifying that any multiplicative 
constant from a previous row cancels out. In the second row of Table 6.3, for 
example, the row was multiplied by 1/10. We see later that care must be taken not to 
multiply the row by a negative constant. 
Interpreting the Basic Routh Table 
Now that we know how to generate the Routh table, let us see how to interpret it. 
The basic Routh table applies to systems with poles in the left and right half-planes. 
Systems with imaginary poles and the kind of Routh table that results will be 
discussed in the next section. Simply stated, the Routh-Hurwitz criterion declares 
that the number of roots of the polynomial that are in the right half-plane is equal to 
the number of sign changes in the first column. 
If the closed-loop transfer function has all poles in the left half of the s-plane, 
the system is stable. Thus, a system is stable if there are no sign changes in the first 
column of the Routh table. For example, Table 6.3 has two sign changes in the 
first column. The first sign change occurs from 1 in the s2 row to —72 in the s1 row. 
The second occurs from —72 in the s1 row to 103 in the s° row. Thus, the system of 
Figure 6.4 is unstable since two poles exist in the right half-plane. 
Skill-Assessment Exercise 6.1 
PROBLEM: Make a Routh table and tell how many roots of the following 
polynomial are in the right half-plane and in the left half-plane. 
P(s) = 3s1 + 9s6 + 655 + 4s4 + 7s3 + 8s2 + 2s + 6 
ANSWER: Four in the right half-plane (rhp), three in the left half-plane (lhp). 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
C3JE9 
Control Solutions 

308 
Chapter 6 
Stability 
Now that we have described how to generate and interpret a basic Routh table, 
let us look at two special cases that can arise. 
( 6.3 Routh-Hurwitz Criterion: Special Cases 
Two special cases can occur: (1) The Routh table sometimes will have a zero only in 
the first column of a row, or (2) the Routh table sometimes will have an entire row 
that consists of zeros. Let us examine the first case. 
Zero Only in the First Column 
If the first element of a row is zero, division by zero would be required to form the 
next row. To avoid this phenomenon, an epsilon, €, is assigned to replace the zero in 
the first column. The value e is then allowed to approach zero from either the 
positive or the negative side, after which the signs of the entries in the first column 
can be determined. Let us look at an example. 
Trylt6.1 
Use the following MATLAB 
statement to find the poles of 
the closed-loop transfer 
function in Eq. (6.2). 
roots([l 2 3 6 5 3]) 
Example 6.2 
Stability via Epsilon Method 
PROBLEM: Determine the stability of the closed-loop transfer function 
10 
T(s) = s5 + 2s4 + 3s3 + 6s2 + 5s + 3 
(6.2) 
SOLUTION: The solution is shown in Table 6.4. We form the Routh table by using 
the denominator of Eq. (6.2). Begin by assembling the Routh table down to the row 
where a zero appears only in the first column (the 53 row). Next replace the zero by 
a small number, e, and complete the table. To begin the interpretation, we must first 
assume a sign, positive or negative, for the quantity €. Table 6.5 shows the first 
column of Table 6.4 along with the resulting signs for choices of e positive and 
€ negative. 
TABLE 6.5 Determining signs in first column of a Routh table with 
zero as first element in a row 
TABLE 6.4 
Completed 
Example 6.2 
i 
1 
2 
.V 
•% 
€ 
6(?-7 
r 
, 
42e - 49 - 6e2 
12e - 14 
/ 
3 
Routh table for 
3 
6 
7 
— 
2 
3 
0 
0 
5 
3 
0 
0 
0 
0 
Label 
5 
s 
$ 
i 
s" 
v1 
.v° 
First column 
1 
2 
-fr € 
6<=-7 
426 - 49 - 6e2 
126 - 14 
3 
<? = + 
+ 
+ 
+ 
-
+ 
¢ = 
-
+ 
+ 
_ 
+ 
+ 
+ 

6.3 Routh-Hurwitz Criterion: Special Cases 
309 
If € is chosen positive, Table 6.5 will show a sign change from the s3 row to the 
s2 row, and there will be another sign change from the s2 row to the 51 row. Hence, 
the system is unstable and has two poles in the right half-plane. 
Alternatively, we could choose € negative. Table 6.5 would then show a 
sign change from the 54 row to the s3 row. Another sign change would occur 
from the s3 row to the s2 row. Our result would be exactly the same as that for 
a positive choice for e. Thus, the system is unstable, with two poles in the right 
half-plane. 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run ch6spl in Appendix F at www.wiley.com/college/ 
nise. You will learn how to use the Symbolic Math Toolbox to 
calculate the values of cells in a Routh table even if the table 
contains symbolic objects, such as €. You will see that the 
Symbolic Math Toolbox and MATLAB yield an alternate way to gen-
erate the Routh table for Example 6.2. 
Symbolic Math 
Another method that can be used when a zero appears only in the first column 
of a row is derived from the fact that a polynomial that has the reciprocal roots of the 
original polynomial has its roots distributed the same—right half-plane, left half-
plane, or imaginary axis—because taking the reciprocal of the root value does not 
move it to another region. Thus, if we can find the polynomial that has the reciprocal 
roots of the original, it is possible that the Routh table for the new polynomial will 
not have a zero in the first column. This method is usually computationally easier 
than the epsilon method just described. 
We now show that the polynomial we are looking for, the one with the 
reciprocal roots, is simply the original polynomial with its coefficients written in 
reverse order {Phillips, 1991). Assume the equation 
!» + «,_!*-* + 
a\S + «o — 0 
(6.3) 
If s is replaced by l/d, then d will have roots which are the reciprocal of s. Making this 
substitution in Eq. (6.3), 
2 
+fl"-'U 
/i-l 
+--- + ^(-) 
"'' ° 
(6.4) 
Factoring out (l/d)n, 
IV 1 + On-l[2 
-1 
+ -.H 
(l-«) 
+ * ( 3 
= fiJ [1 + an-i4 +••• + aid{"-l) + a0dn] = 0 
(6.5) 
Thus, the polynomial with reciprocal roots is a polynomial with the coefficients 
written in reverse order. Let us redo the previous example to show the computa-
tional advantage of this method. 

310 
Chapter 6 
Stability 
Example 6.3 
Stability via Reverse Coefficients 
PROBLEM: Determine the stability of the closed-loop transfer function 
T(s) = 
10 
s5 4- 2s4 + 3s3 + 6s2 + 5s + 3 
(6.6) 
SOLUTION: First write a polynomial that has the reciprocal roots of the denomi-
nator of Eq. (6.6). From our discussion, this polynomial is formed by writing the 
denominator of Eq. (6.6) in reverse order. Hence, 
D(s) = 355 + 5s4 + 6s3 + 3s2 + 2s + l 
(6.7) 
We form the Routh table as shown in Table 6.6 using Eq. (6.7). Since there are two 
sign changes, the system is unstable and has two right-half-plane poles. This is the 
same as the result obtained in Example 6.2. Notice that Table 6.6 does not have a 
zero in the first column. 
TABLE 6.6 Routh table for Example 6.3 
5 
S 
sA 
5 3 
,2 
•v1 
.v" 
3 
5 
4.2 
1.33 
-1.75 
1 
6 
3 
1.4 
1 
2 
1 
Entire Row is Zero 
We now look at the second special case. Sometimes while making a Routh table, we 
find that an entire row consists of zeros because there is an even polynomial that is a 
factor of the original polynomial. This case must be handled differently from the case 
of a zero in only the first column of a row. Let us look at an example that 
demonstrates how to construct and interpret the Routh table when an entire row 
of zeros is present. 
Example 6.4 
Stability via Routh Table with Row of Zeros 
PROBLEM: Determine the number of right-half-plane poles in the closed-loop 
transfer function 
T(s) = 
10 
.y5 + 7s4 + 6s3 + 42s2 + $s + 56 
(6.8) 
SOLUTION: Start by forming the Routh table for the denominator of Eq. (6.8) 
(see Table 6.7). At the second row we multiply through by 1/7 for convenience. We 
stop at the third row, since the entire row consists of zeros, and use the following 

6.3 
Routh-Hurwitz Criterion: Special Cases 
TABLE 6.7 
Routh table for Example 6.4 
311 
$ 
.v 
s2 
A"' 
•
% 
-7-
-4-
1 
1 
1 
3 
1 
3 
-e-
42" 
42" 
6 
6 
3 
8 
0 
m 
•
% 
-
% 
8 
8 
0 
0 
0 
procedure. First we return to the row immediately above the row of zeros and 
form an auxiliary polynomial, using the entries in that row as coefficients. The 
polynomial will start with the power of s in the label column and continue by 
skipping every other power of s. Thus, the polynomial formed for this example is 
P(s) = 54 + 6s2 + 8 
(6.9) 
Next we differentiate the polynomial with respect to s and obtain 
dP{s) 
ds = As" + 125 + 0 
(6.10) 
Finally, we use the coefficients of Eq. (6.10) to replace the row of zeros. Again, for 
convenience, the third row is multiplied by 1/4 after replacing the zeros. 
The remainder of the table is formed in a straightforward manner by 
following the standard form shown in Table 6.2. Table 6.7 shows that all entries 
in the first column are positive. Hence, there are no right-half-plane poles. 
ex. 
CK 
Let us look further into the case that yields an entire row of 
zeros. An entire row of zeros will appear in the Routh table when a 
purely even or purely odd polynomial is a factor of the original 
polynomial. For example, s4 + 5s2 + 7 is an even polynomial; it has 
only even powers of s. Even polynomials only have roots that are 
symmetrical about the origin.3 This symmetry can occur under three 
conditions of root position: (1) The roots are symmetrical and real, 
(2) the roots are symmetrical and imaginary, or (3) the roots are 
quadrantal. Figure 6.5 shows examples of these cases. Each case or 
combination of these cases will generate an even polynomial. 
It is this even polynomial that causes the row of zeros to 
appear. Thus, the row of zeros tells us of the existence of an even 
polynomial whose roots are symmetric about the origin. Some of 
these roots could be on the/'<y-axis. On the other hand, since jco roots 
are symmetric about the origin, if we do not have a row of zeros, we 
cannot possibly have jco roots. 
Another characteristic of the Routh table for the case in 
question is that the row previous to the row of zeros contains the even polynomial 
that is a factor of the original polynomial. Finally, everything from the row 
containing the even polynomial down to the end of the Routh table is a test of 
only the even polynomial. Let us put these facts together in an example. 
j<0k 
i-planc 
/ X c 
\C 
A: Real and symmetrical about the origin 
B: Imaginary and symmetrical about the origin 
C: Quadrantal and symmetrical about the origin 
FIGURE 6.5 
Root positions to generate even 
polynomials: A, S, C, or any combination 
" The polynomial s? + 5s3 + 7s is an example of an odd polynomial; it has only odd powers of s. Odd 
polynomials are the product of an even polynomial and an odd power of s. Thus, the constant term of an 
odd polynomial is always missing. 

312 
Chapter 6 
Stability 
Example 6.5 
Pole Distribution via Routh Table with Row of Zeros 
PROBLEM: For the transfer function 
T(s) = 
20 
s* + s1 + 12s6 + 22s5 + 39s4 + 59s3 + 48s2 + 38s + 20 
^ 1 ^ 
tell how many poles are in the right half-plane, in the left half-plane, and on the 
jco-axis. 
SOLUTION: Use the denominator of Eq. (6.11) and form the Routh table in 
Table 6.8. For convenience the s6 row is multiplied by 1/10, and the s5 row is 
multiplied by 1/20. At the s3 row we obtain a row of zeros. Moving back one row to 
s4, we extract the even polynomial, P(s), as 
P{s) = s4 + 3s2 + 2 
(6.12) 
TABLE 6.8 
Routh table for Example 6.5 
.vs 
.v7 
v6 
f 
s4 
s* 
•v1 
.v° 
-A&-
2S 
•% 
-4-
J, 
*2 
1 
1 
-1 
1 
1 
2 
3 
1 
3 
4 
-m 
m 
-& -e-
-2-
12 
22 
- 2 
3 
3 
3 
4 
0 
0 
-fr 
-w 
40-
-e-
39 
59 
1 
2 
2 
0 
0 
0 
0 
-26-
48 
38 
2 
0 
0 
0 
0 
0 
0 
20 
0 
0 
0 
0 
0 
0 
0 
0 
This polynomial will divide evenly into the denominator of Eq. (6.11) and thus is a 
factor. Taking the derivative with respect to s to obtain the coefficients that replace 
the row of zeros in the s3 row, we find 
dP(s) 
ds = 4s3 + 65 + 0 
(6.13) 
Replace the row of zeros with 4, 6, and 0 and multiply the row by 1/2 for 
convenience. Finally, continue the table to the s° row, using the standard procedure. 
How do we now interpret this Routh table? Since all entries from the even 
polynomial at the 54 row down to the s° row are a test of the even polynomial, we 
begin to draw some conclusions about the roots of the even polynomial. No sign 
changes exist from the s4 row down to the s° row. Thus, the even polynomial does 
not have right-half-plane poles. Since there are no right-half-plane poles, no left-
half-plane poles are present because of the requirement for symmetry. Hence, the 
even polynomial, Eq. (6.12), must have all four of its poles on the jco-axis. These 
results are summarized in the first column of Table 6.9. 
4 A necessary condition for stability is that the jco roots have unit multiplicity. The even polynomial must be 
checked for multiple jco roots. For this case, the existence of multiple jco roots would lead to a perfect, 
fourth-order square polynomial. Since Eq. (6.12) is not a perfect square, the four jco roots are distinct. 

6.3 Routh-Hurwitz Criterion: Special Cases 
313 
TABLE 6.9 Summary of pole locations for Example 6.5 
Location 
Right half-plane 
Left half-plane 
jiO 
Polynomial 
Even 
(fourth-order) 
0 
0 
4 
Other 
(fourth-order) 
2 
2 
0 
Total 
(eighth-order) 
2 
2 
4 
The remaining roots of the total polynomial are evaluated from the s row down 
to the s4 row. We notice two sign changes: one from the s1 row to the s row and the 
other from the s6 row to the 55 row. Thus, the other polynomial must have two roots in 
the right half-plane. These results are included in Table 6.9 under "Other". The final 
tally is the sum of roots from each component, the even polynomial and the other 
polynomial, as shown under "Total" in Table 6.9. Thus, the system has two poles in 
the right half-plane, two poles in the left half-plane, and four poles on the jco-axis; it is 
unstable because of the right-half-plane poles. 
We now summarize what we have learned about polynomials that generate entire 
rows of zeros in the Routh table. These polynomials have a purely even factor with roots 
that are symmetrical about the origin. The even polynomial appears in the Routh 
table in the row directly above the row of zeros. Every entry in the table from the even 
polynomial's row to the end of the chart applies only to the even polynomial. Therefore, 
the number of sign changes from the even polynomial to the end of the table equals the 
number of right-half-plane roots of the even polynomial. Because of the symmetry of 
roots about the origin, the even polynomial must have the same number of left-half-
plane roots as it does right-half-plane roots. Having accounted for the roots in the right 
and left half-planes, we know the remaining roots must be on the yew-axis. 
Every row in the Routh table from the beginning of the chart to the row 
containing the even polynomial applies only to the other factor of the original 
polynomial. For this factor, the number of sign changes, from the beginning of the 
table down to the even polynomial, equals the number of right-half-plane roots. 
The remaining roots are left-half-plane roots. There can be no jo) roots contained in 
the other polynomial. 
PROBLEM: Use the Routh-Hurwitz criterion to find how many poles of the 
following closed-loop system, T(s), are in the rhp, in the lhp, and on the jco-axis: 
, 
S 3 + 7 J 2 - 2 U + 10 
[S) 
s6+s5-6s4 + 0s^-s2-s + 6 
ANSWER: Two rhp, two lhp, and two jco 
The complete solution is at www.wiley.com/college/nise. 
Virtual Experiment 6.1 
Stability 
Put theory into practice and 
evaluate the stability of the 
Quanser Linear Inverted Pendu-
lum in LabVIEW. When in the 
upward balanced position, this 
system addresses the challenge of 
stabilizing a rocket during take-
off. In the downward position it 
emulates the construction 
gantry crane. 
Virtual experiments are found 
on WileyPLUS. 
Let us demonstrate the usefulness of the Routh-Hurwitz criterion with a few 
additional examples. 

314 
Chapter 6 
Stability 
| 
6.4 Routh-Hurwitz Criterion: Additional Examples 
The previous two sections have introduced the Routh-Hurwitz criterion. Now we need 
to demonstrate the method's application to a number of analysis and design problems. 
Example 6.6 
Standard Routh-Hurwitz 
PROBLEM: Find the number of poles in the left half-plane, the right half-plane, and 
on the /co-axis for the system of Figure 6.6. 
R(s) + / 0 \ E&L 
y 
200 
s(s3 + 6s2+ 11*+ 6) 
a*) 
FIGURE 6.6 Feedback 
control system for 
Example 6.6 
SOLUTION: First, find the closed-loop transfer function as 
200 
T(s) = s4 + 6s3 + lis 2 +6s + 200 
(6.14) 
The Routh table for the denominator of Eq. (6.14) is shown as Table 6.10. For 
clarity, we leave most zero cells blank. At the sl row there is a negative coefficient; 
thus, there are two sign changes. The system is unstable, since it has two right-half-
plane poles and two left-half-plane poles. The system cannot have jco poles since a 
row of zeros did not appear in the Routh table. 
TABLE 6.10 Routh table for Example 6.6 
sA 
rf» 
r 
f 
f 
-6-
46-
1 
1 
1 
-19 
20 
11 
-6- 
1 
2m 
20 
200 
The next example demonstrates the occurrence of a zero in only the first 
column of a row. 
Example 6.7 
Routh-Hurwitz with Zero in First Column 
PROBLEM: Find the number of poles in the left half-plane, the right half-plane, and 
on the y'w-axis for the system of Figure 6.7. 
FIGURE 6.7 Feedback control 
system for Example 6.7 
m^ > * & 
r 
i 
s(2s4 + 3.?3 + 2.v2 + 35 + 2) 
C(.v) 

6.4 Routh-Hurwitz Criterion: Additional Examples 
315 
SOLUTION: The closed-loop transfer function is 
T{S) * 2*5 + 3S* + 2 J 3 + 3 S 2 + 2S + 1 
( 6' 1 5 ) 
Form the Routh table shown as Table 6.11, using the denominator of Eq. (6.15). A 
zero appears in the first column of the s' row. Since the entire row is not zero, 
simply replace the zero with a small quantity, e, and continue the table. Permitting e 
to be a small, positive quantity, we find that the first term of the 52 row is negative. 
Thus, there are two sign changes, and the system is unstable, with two poles in the 
right half-plane. The remaining poles are in the left half-plane. 
TABLE 6.11 Routh table for Example 6.7 
2 
2 
2 
3 
3 
1 
•% 
6 
3 * - 4 
12c - 16 - 3e2 
9e-12 
1 
We also can use the alternative approach, where we produce a polynomial 
whose roots are the reciprocal of the original. Using the denominator of Eq. (6.15), 
we form a polynomial by writing the coefficients in reverse order, 
s5 + 2s4 + 3s3 + 2s2 +3s + 2 
(6.16) 
The Routh table for this polynomial is shown as Table 6.12. Unfortunately, in this 
case we also produce a zero only in the first column at the s~ row. However, the 
table is easier to work with than Table 6.11. Table 6.12 yields the same results as 
Table 6.11: three poles in the left half-plane and two poles in the right half-plane. 
The system is unstable. 
TABLE 6.12 Alternative Routh table for Example 6.7 
** 
1* 
s" 
-> 
r 
sl 
1 
2 
2 
-% e 
2e-4 
6 
2 
3 
2 
2 
2 
3 
2 
Students who are using MATLAB should now run ch6pl in Appendix B. 
MATLAB 
You will learn how to perform block diagram reduction to find T(s) , 
^ J H 
followed by an evaluation of the closed-loop system's poles to 
determine stability. This exercise uses MATLAB to do Example 6.7. 

316 
Chapter 6 
Stability 
In the next example, we see an entire row of zeros appear along with the 
possibility of imaginary roots. 
Trylt6.2 
Use MATLAB, The Control 
System Toolbox, and the fol-
lowing statements to find the 
closed-loop transfer function, 
T(s), for Figure 6.8 and the 
closed-loop poles. 
numg=128; 
deng=[l 3 10 24 
. . . 
48 96 128 192 0]; 
G=tf (numg, deng); 
T=feedback(G,1) 
poles=pole(T) 
Example 6.8 
Routh-Hurwitz with Row of Zeros 
PRO BLEM: Find the number of poles in the left half-plane, the right half-plane, and 
on the jco-axis for the system of Figure 6.8. Draw conclusions about the stability of 
the closed-loop system. 
R(s) t/1 7\ 
E(-s) 
128 
s(s7 + 3s6 + 10s5 + 24s4 + 48.93 + 96.v2 + 128*+ 192) 
C(s) 
FIGURE 6.8 
Feedback 
control system 
for Example 6.8 
SOLUTION: The closed-loop transfer function for the system of Figure 6.8 is 
128 
7 » = 58 + 3s7 + 10^6 + 24^5 + 48^4 + 96^3 + 12852 + 1925 + 128 
(6.17) 
Using the denominator, form the Routh table shown as Table 6.13. A row of zeros 
appears in the s5 row. Thus, the closed-loop transfer function denominator must have 
an even polynomial as a factor. Return to the 56 row and form the even polynomial: 
P(s) =s
6 + 854 + 3252 + 64 
(6.18) 
TABLE 6.13 
Routh table for Example 6.8 
1 
• * 
1 
-2" 1 
-6--6-3 
f' 
-*-§--. 1 
-3- 1 
3 
10 
2A 
8 
-½ 
8 
-©- -32- 16 
* - • 
,-40 - 5 
.24 8 
128 
Mr 
-64" 
-Qr -64 
-64 
32 
32 
32 
24 
19? 
J58~ 
-e- -e-
64 
64 
0 
Differentiate this polynomial with respect to 5 to form the coefficients that will 
replace the row of zeros: 
dP{s) 
ds = 6s5 + 32s3 + 645 + 0 
(6.19) 
Replace the row of zeros at the s5 row by the coefficients of Eq. (6.19) and multiply 
through by 1/2 for convenience. Then complete the table. 
We note that there are two sign changes from the even polynomial at the 
56 row down to the end of the table. Hence, the even polynomial has two right-half-

6.4 Routh-Hurwitz Criterion: Additional Examples 
317 
TABLE 6.14 
Summary of pole locations for Example 6.8 
Location 
Right half-plane 
Left half-plane 
jo) 
Polynomial 
Even 
(sixlh-order) 
2 
2 
2 
Other 
(second-order) 
0 
0 
Total 
(eighth-order) 
2 
4 
2 
plane poles. Because of the symmetry about the origin, the even polynomial must 
have an equal number of left-half-plane poles. Therefore, the even polynomial 
has two left-half-plane poles. Since the even polynomial is of sixth order, the two 
remaining poles must be on the jco-axis. 
There are no sign changes from the beginning of the table down to the even 
polynomial at the s6 row. Therefore, the rest of the polynomial has no right-half-
plane poles. The results are summarized in Table 6.14. The system has two poles in 
the right half-plane, four poles in the left half-plane, and two poles on the yea-axis, 
which are of unit multiplicity. The closed-loop system is unstable because of the 
right-half-plane poles. 
The Routh-Hurwitz criterion gives vivid proof that changes in the gain of a 
feedback control system result in differences in transient response because of 
changes in closed-loop pole locations. The next example demonstrates this concept. 
We will see that for control systems, such as those shown in Figure 6.9, gain variations 
can move poles from stable regions of the s-plane onto the jco-axis and then into the 
right half-plane. 
Long baseline & 
emergency beacon 
Lifting bail 
Thrusters 
Syntactic 
(1 of 7) 
flotation module 
(1200 lbs) 
Emergency ft 
flasher 
Side-scan 
transceiver array 
I of 2) 
Wiring junction box 
(lor 2) 
. Altimeter 
Telemetry housing w/lasers 
Manipulator electronics housing 
Computer housing w/gyro 
Side-scan sonar 
electronics housing 
Electronic compass 
FIGURE 6.9 Jason is an 
underwater, remote-controlled 
vehicle that has been used to 
explore the wreckage of the 
Lusitania. The manipulator 
and cameras comprise some of 
the vehicle's control systems 

318 
Chapter 6 
Stability 
Example 6.9 
Stability Design via Routh-Hurwitz 
PROBLEM: Find the range of gain, K, for the system of Figure 6.10 that will cause 
the system to be stable, unstable, and marginally stable. Assume K > 0. 
FIGURE 6.10 Feedback control 
system for Example 6.9 
R(s) 
+^ 
-. 
>flM 
9 " 
K 
s(s + 7)(5 +11) 
C(s) 
SOLUTION: First find the closed-loop transfer function as 
T ^
= s3 + l8s2 + 77s + K 
Next form the Routh table shown as Table 6.15. 
(6.20) 
TABLE 6.15 Routh table for Example 6.9 
r1 
r 
J 
/ 
1 
18 
1386 - K 
18 
K 
77 
K 
Since K is assumed positive, we see that all elements in the first column are 
always positive except the s1 row. This entry can be positive, zero, or negative, 
depending upon the value of K. If K < 1386, all terms in the first column will be 
positive, and since there are no sign changes, the system will have three poles in the 
left half-plane and be stable. 
If K > 1386, the s1 term in the first column is negative. There are two sign 
changes, indicating that the system has two right-half-plane poles and one left-
half-plane pole, which makes the system unstable. 
If K = 1386, we have an entire row of zeros, which could signify jco poles. 
Returning to the s2 row and replacing K with 1386, we form the even polynomial 
P{s) = 18s2 + 1386 
(6.21) 
Differentiating with respect to s, we have 
dP{s) 
ds = 36s + 0 
(6.22) 
Replacing the row of zeros with the coefficients of Eq. (6.22), we obtain the Routh-
Hurwitz table shown as Table 6.16 for the case of K = 1386. 
TABLE 6.16 Routh table for Example 6.9 with K = 1386 
1 
-6- 36 
1386 
77 

6.4 Routh-Hurwitz Criterion: Additional Examples 
Since there are no sign changes from the even polynomial (s2 row) down to 
the bottom of the table, the even polynomial has its two roots on the/<w-axis of unit 
multiplicity. Since there are no sign changes above the even polynomial, the 
remaining root is in the left half-plane. Therefore the system is marginally stable. 
Students who are using MATLAB should now run ch6p2 in Appendix B. 
You will learn how to set up a loop to search for the range of gain to 
yield stability. This exercise uses MATLAB to do Example 6.9. 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run ch6sp2 in Appendix F at www.wiley.com/college/ 
nise. You will learn how to use the Symbolic Math Toolbox to 
calculate the values of cells in a Routh table even if the table 
contains symbolic objects, such as a variable gain, K. You will 
see that the Symbolic Math Toolbox and MATLAB yield an alterna-
tive way to solve Example 6. 9 . 
The Routh-Hurwitz criterion is often used in limited applications to factor 
polynomials containing even factors. Let us look at an example. 
PROBLEM: Factor the polynomial 
s4 + 3s3 + 30s2 + 305 + 200 
(6.23) 
SOLUTION: Form the Routh table of Table 6.17. We find that the .91 row is a row of 
zeros. Now form the even polynomial at the s2 row: 
P(s) = s2 + 10 
(6.24) 
TABLE 6.17 
Routh table for Example 6.10 
1 
30 
200 
- 6 - 1 
M 
10 
-20- 
1 
2W 
10 
- 0 - 2 
-% 
0 
10 
This polynomial is differentiated with respect to s in order to complete the Routh 
table. However, since this polynomial is a factor of the original polynomial in Eq. 
(6.23), dividing Eq. (6.23) by (6.24) yields (s2 + 3s + 20) as the other factor. Hence, 
s4 + 3s3 + 30s2 + 305 + 200 = {s2 + 10)(52 + 35 + 20) 
= {s +/3.1623)(5 -/3.1623) 
(6.25) 
x(5 + 1.5 +/4.213)(5 + 1.5 -/4.213) 
319 
MATLAB 
Symbolic Malh 
s
4 
.v
2 
.v
1 

320 
Chapter 6 
Stability 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 6.3 
PROBLEM: For a unity feedback system with the forward transfer function 
K(s + 20) 
[S) 
s(s +2)(s + 3) 
find the range of K to make the system stable. 
ANSWER: 
0<K<2 
The complete solution is at www.wiley.com/college/nise. 
( 
6.5 Stability in State Space 
State Space 
Up to this point we have examined stability from the s-plane viewpoint. Now we look 
at stability from the perspective of state space. In Section 4.10, we mentioned that 
the values of the system's poles are equal to the eigenvalues of the system matrix, A. 
We stated that the eigenvalues of the matrix A were solutions of the equation 
det (si - A) = 0, which also yielded the poles of the transfer function. Eigenvalues 
appeared again in Section 5.8, where they were formally defined and used to 
diagonalize a matrix. Let us now formally show that the eigenvalues and the system 
poles have the same values. 
Reviewing Section 5.8, the eigenvalues of a matrix, A, are values of X that 
permit a nontrivial solution (other than 0) for x in the equation 
Ax = A.x 
(6.26) 
In order to solve for the values of X that do indeed permit a solution for x, we 
rearrange Eq. (6.26) as follows: 
or 
Solving for x yields 
or 
A.x - Ax = 0 
(XI - A)x = 0 
x = (XI-A)_10 
adj(AI-A) 
det(AI-A) 
(6.27) 
(6.28) 
(6.29) 
(6.30) 
We see that all solutions will be the null vector except for the occurrence of 
zero in the denominator. Since this is the only condition where elements of x will be 
0/0, or indeterminate, it is the only case where a nonzero solution is possible. 
The values of X are calculated by forcing the denominator to zero: 
det (XI - A) = 0 
(6.31) 

6.5 Stability in State Space 
321 
This equation determines the values of X for which a nonzero solution for x in 
Eq. (6.26) exists. In Section 5.8, we defined x as eigenvectors and the values of X as the 
eigenvalues of the matrix A. 
Let us now relate the eigenvalues of the system matrix, A, to the system's poles. 
In Chapter 3 we derived the equation of the system transfer function, Eq. (3.73), 
from the state equations. The system transfer function has det(sl - A) in the 
, - i 
denominator because of the presence of (si - A) . Thus, 
det(sl - A) = 0 
(6.32) 
is the characteristic equation for the system from which the system poles can be 
found. 
Since Eqs. (6.31) and (6.32) are identical apart from a change in variable name, 
we conclude that the eigenvalues of the matrix A are identical to the system's poles 
before cancellation of common poles and zeroes in the transfer function. Thus, we 
can determine the stability of a system represented in state space by finding the 
eigenvalues of the system matrix, A, and determining their locations on the 5-plane. 
Example 6.11 
Stability in State Space 
PROBLEM: Given the system 
X = 
y = [ 
0 
3 
2 
8 
-10 
- 5 
1 0 0]x 
1 
1 
- 2 
x + 
10 
0 
0 
(6.33a) 
(6.33b) 
find out how many poles are in the left half-plane, in the right half-plane, and on the 
jco-axis. 
SOLUTION: First form (si - A): 
0 
3 
11 
5 - 3 
- 1 1 
(sI-A)= 
0 s 0 
2 
8 
l 
= 
- 2 s - 8 - l 
(6.34) 
5 0 0 
0 
5 0 
0 
0 5 
— 
0 
2 
-10 
3 
8 
- 5 
1 
1 
- 2 
= 
5 
- 2 
10 
- 3 
5 - 8 
5 
- 1 
- 1 
5 + 2 
Now find the det(sl — A): 
det(sl - A) = 53 - 652 - 75 - 52 
Using this polynomial, form the Routh table of Table 6.18. 
TABLE 6.18 
Routh table for Example 6.11 
S 
i 
s 
(6.35) 
--6 
' 3 
1 
- 3 
- 1 
-26 
^-52-
-% 
-7 
-26 
0 

322 
Chapter 6 
Stability 
MATLAB 
Since there is one sign change in the first column, the system has one right-
half-plane pole and two left-half-plane poles. It is therefore unstable. Yet, you may 
question the possibility that if a nonminimum-phase zero cancels the unstable pole, 
the system will be stable. However, in practice, the nonminimum-phase zero or 
unstable pole will shift due to a slight change in the system's parameters. This 
change will cause the system to become unstable. 
Students who are using MATLAB should now run ch6p3 in Appendix B. 
You will learn how to determine the stability of a system repre-
sented in state space by finding the eigenvalues of the system 
matrix. This exercise uses MATLAB to do Example 6.11. 
Wileypms 
Control Solutions 
Trylt 6.3 
Use the following MATLAB 
statements to find the eigen-
values of the system described 
in Skill-Assessment 
Exercise 6.4. 
A=[2 
1 
1 
1 7 
1 
- 3 
4 
-5]; 
Eig=eig(A) 
Skill-Assessment Exercise 6.4 
PROBLEM: For the following system represented in state space, find out how many 
poles are in the left half-plane, in the right half-plane, and on the /Vy-axis. 
x = 
2 1 
1 7 
3 4 
1 
1 
-5 
x + 
0 
0 
1 
y = [0 
1 0]x 
ANSWER: Two rhp and one lhp. 
The complete solution is at www.wiley.com/college/nise. 
In this section, we have evaluated the stability of feedback control systems 
from the state-space perspective. Since the closed-loop poles and the eigenvalues of 
a system are the same, the stability requirement of a system represented in state 
space dictates that the eigenvalues cannot be in the right half of the .s-plane or be 
multiple on the yw-axis. 
We can obtain the eigenvalues from the state equations without first convert-
ing to a transfer function to find the poles: The equation det(sl - A) = 0 yields the 
eigenvalues directly. If det(sl — A), a polynomial in s, cannot be factored easily, we 
can apply the Routh-Hurwitz criterion to it to evaluate how many eigenvalues are in 
each region of the s-plane. 
We now summarize this chapter, first with case studies and then with a written 
summary. Our case studies include the antenna azimuth position control system and 
the UFSS. Stability is as important to these systems as it is to the system shown in 
Figure 6.11. 

Case Studies 
323 
FIGURE 6.11 
TheFANUC 
M-410iB™ has 4 axes of 
motion. It is seen here moving 
and stacking sacks of 
chocolate 
Case Studies 
Antenna Control: Stability Design via Gain 
This chapter has covered the elements of stability. We saw that stable systems have 
their closed-loop poles in the left half of the s-plane. As the loop gain is changed, 
the locations of the poles are also changed, creating the possibility that the poles 
can move into the right half of the s-plane, which yields instability. Proper gain 
settings are essential for the stability of closed-loop systems. The following case 
study demonstrates the proper setting of the loop gain to ensure stability. 
PROBLEM: You are given the antenna azimuth position control system shown on 
the front endpapers, Configuration 1. Find the range of preamplifier gain required 
to keep the closed-loop system stable. 
SOLUTION: The closed-loop transfer function was derived in the case studies in 
Chapter 5 as 
T, » 
6.63*: 
T{S) = 53 + 101.71^ + 171, + 6.631 
( 6 3 6 ) 
Using the denominator, create the Routh table shown as Table 6.19. The third row of 
the table shows that a row of zeros occurs UK — 2623. This value of K makes the 
system marginally stable. Therefore, there will be no sign changes in the first column 
if 0 < K < 2623. We conclude that, for stability, 0 < K < 2623. 
TABLE 6.19 
Routh table for antenna control case study 
f 
s2 
.v1 
f 
1 
101.71 
17392.41-6.63iC 
6.63/: 
171 
6.63# 
0 

324 
Chapter 6 
Stability 
CHALLENGE: We now give you a problem to test your knowledge of this chapter's 
objectives. Refer to the antenna azimuth position control system shown on the 
front endpapers, Configuration 2. Find the range of preamplifier gain required to 
keep the closed-loop system stable. 
UFSS Vehicle: Stability Design via Gain 
Design 
For this case study, we return to the UFSS vehicle and study the stability of the pitch 
H ^ ) 
control system, which is used to control depth. Specifically, we find the range of 
pitch gain that keeps the pitch control loop stable. 
PROBLEM: The pitch control loop for the UFSS vehicle {Johnson, 1980) is shown 
on the back endpapers. Let K2 = l and find the range of K\ that ensures that the 
closed-loop pitch control system is stable. 
SOLUTION: The first step is to reduce the pitch control system to a single, closed-
loop transfer function. The equivalent forward transfer function, Ge(s), is 
C M = 
0.25^(5 + 0.435) 
em 
s4 + 3.45653 + 3.45752 + 0.7195 + 0.0416 
K 
} 
With unity feedback the closed-loop transfer function, T(s), is 
r
n
= 
0.25^(5 + 0.435) 
{S) 
54 + 3.45653+3.45752 + (0.719 + 0.25^1)5+(0.0416 + 0.109^1) 
l 
' 
The denominator of Eq. (6.38) is now used to form the Routh table shown as Table 6.20. 
TABLE 6.20 Routh table for UFSS case study 
.9
4 
1 
3.457 
0.0416 + 0.109¾ 
.v
3 
3.456 
0.719 + 0.25¾ 
r 
11.228-0.25¾ 
0.144 + 0.377¾ 
j 
-0.0625/^ + 1.324¾ + 7.575 
j > 
11.228-0.25¾ 
0.144 + 0.377¾ 
Note: Some rows have been multiplied by a positive constant for convenience. 
Looking at the first column, the s4 and sr rows are positive. Thus, all elements of 
the first column must be positive for stability. For the first column of the s
2 row to be 
positive, —oo < K\ < 44.91. For the first column of the 51 row to be positive, the 
numerator must be positive, since the denominator is positive from the previous 
step. The solution to the quadratic term in the numerator yields roots of K\ = 
-4.685 and 25.87. Thus, for a positive numerator, -4.685 < K\ < 25.87. Finally, for 
the first column of the 5° row to be positive, -0.382 < K\ < oo. Using all three 
conditions, stability will be ensured if —0.382 <K\ < 25.87. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. For the UFSS vehicle (Johnson, 1980) heading control system shown on 
the back endpapers and introduced in the UFSS case study challenge in Chapter 5, 
do the following: 
MATLAB 
a. Find the range of heading gain that ensures the vehicle's stability. Let K2 = 1 
E I B 
b. Repeat Part a using MATLAB . 

Review Questions 
In our case studies, we calculated the ranges of gain to ensure stability. The student 
should be aware that although these ranges yield stability, setting gain within these 
limits may not yield the desired transient response or steady-state error character-
istics. In Chapters 9 and 11, we will explore design techniques, other than simple gain 
adjustment, that yield more flexibility in obtaining desired characteristics. 
^ Summary^ 
In this chapter, we explored the concepts of system stability from both the classical 
and the state-space viewpoints. We found that for linear systems, stability is based on 
a natural response that decays to zero as time approaches infinity. On the other hand, 
if the natural response increases without bound, the forced response is overpowered 
by the natural response, and we lose control. This condition is known as instability. A 
third possibility exists: The natural response may neither decay nor grow without 
bound but oscillate. In this case, the system is said to be marginally stable. 
We also used an alternative definition of stability when the natural response is 
not explicitly available. This definition is based on the total response and says that a 
system is stable if every bounded input yields a bounded output (BIBO) and 
unstable if any bounded input yields an unbounded output. 
Mathematically, stability for linear, time-invariant systems can be determined 
from the location of the closed-loop poles: 
• If the poles are only in the left half-plane, the system is stable. 
• If any poles are in the right half-plane, the system is unstable. 
• If the poles are on the ;*<w-axis and in the left half-plane, the system is marginally 
stable as long as the poles on the ;&>-axis are of unit multiplicity; it is unstable if 
there are any multiple jco poles. 
Unfortunately, although the open-loop poles may be known, we found that in higher-
order systems it is difficult to find the closed-loop poles without a computer program. 
The Routh-Hurwitz criterion lets us find how many poles are in each of the 
sections of the s-plane without giving us the coordinates of the poles. Just knowing 
that there are poles in the right half-plane is enough to determine that a system is 
unstable. Under certain limited conditions, when an even polynomial is present, the 
Routh table can be used to factor the system's characteristic equation. 
Obtaining stability from the state-space representation of a system is based on the 
same concept—the location of the roots of the characteristic equation. These roots are 
equivalent to the eigenvalues of the system matrix and can be found by solving 
det(sl - A) = 0. Again, the Routh-Hurwitz criterion can be applied to this polynomial. 
The point is that the state-space representation of a system need not be converted to a 
transfer function in order to investigate stability. In the next chapter, we will look at steady-
state errors, the last of three important control system requirements we emphasize. 
^ Review Questions^ 
1. What part of the output response is responsible for determining the stability of a 
linear system? 
2. What happens to the response named in Question 1 that creates instability? 

326 
Chapter 6 
Stability 
State Space 
State Space 
3. What would happen to a physical system that becomes unstable? 
4. Why are marginally stable systems considered unstable under the BIBO 
definition of stability? 
5. Where do system poles have to be to ensure that a system is not unstable? 
6. What does the Routh-Hurwitz criterion tell us? 
7. Under what conditions would the Routh-Hurwitz criterion easily tell us the 
actual location of the system's closed-loop poles? 
8. What causes a zero to show up only in the first column of the Routh table? 
9. What causes an entire row of zeros to show up in the Routh table? 
10. Why do we sometimes multiply a row of a Routh table by a positive constant? 
11. Why do we not multiply a row of a Routh table by a negative constant? 
12. If a Routh table has two sign changes above the even polynomial and five sign 
changes below the even polynomial, how many right-half-plane poles does the 
system have? 
13. Does the presence of an entire row of zeros always mean that the system has jco 
poles? 
14. If a seventh-order system has a row of zeros at the s3 row and two sign changes 
below the s4 row, how many jw poles does the system have? 
15. Is it true that the eigenvalues of the system matrix are the same as the closed-
loop poles? 
16. How do we find the eigenvalues? 
Problems 
1. Tell how many roots of the following polynomial are 
in the right half-plane, in the left half-plane, and on 
the ;'ft>-axis: [Section: 6.2] 
P(s) =s5+ 3s4 + 5s3 + 4s2 + s + 3 
2. Tell how many roots of the following polynomial are 
in the right half-plane, in the left half-plane, and on 
the jco-axis: [Section: 6.3] 
P(S) = ^ + 6s3 + 5s2 + 8s + 20 
3. Using the Routh table, tell how many 
wileyPLUs 
poles of the following function are in 
C'i J«K 
the right half-plane, in the left half- 
control solutions 
plane, and on the jco-axis: [Section: 6.3] 
T
n
= 
s_ + S 
{S) 
s5 - s4 + 4s3 - 4s2 + 3s - 2 
4. The closed-loop transfer function of a system is 
[Section: 6.3] 
T
n _ 
I +2s2 + 75 + 21 
{S) 
s5 - 2s4 + 3s3 -6s2 + 
2s-4 
Determine how many closed-loop poles lie in the right 
half-plane, in the left half-plane, and on the jco-axis. 
5. How many poles are in the right half-plane, in the 
left half-plane, and on the y'cy-axis for the open-loop 
system of Figure P6.1? [Section: 6.3] 
R(s) 
s2 + 4s - 3 
s4 + 4s2 + 8A2 + 205 +15 
C{s) 
FIGURE P6.1 
6. How many poles are in the right half-plane, the left 
half-plane, and on the jco-axis for the open-loop 
system of Figure P6.2? [Section: 6.3] 
m 
-6 
s6 + s5 - 6.y4 + 52 + s - 6 
C(s) 
FIGURE P6.2 
7. Use MATLAB to find the pole 
locations for the system of 
Problem 6 . 
MATtAB 

Problems 
327 
8. Use MATLAB and the Symbolic 
Math Toolbox to generate a 
Routh table to solve Problem 3 . 
9. Determine whether the unity feedback 
system of Figure P6.3 is stable if 
[Section: 6.2] 
symbolic Math 
1 5 
G i v e n t h e u n i t y feedback system of Figure P6.3 with 
G(s) = 
WileyPLUS 
Control Solutions 
G(s) = 
240 
[s + \)(s + 2)(s + 3)(s + 4) 
Ris) +<-> m 
G(s) 
C(s) 
FIGURE P6.3 
10. Use MATLAB t o 
find 
t h e 
pole 
MATLAB 
locations for the system of 
fl 
B 
Problem 9 . 
11. Consider the unity feedback system of Figure P6.3 
with 
GW = 
1 
4s2(s2 + V 
Using the Routh-Hurwitz criterion, find the region 
of the s-plane where the poles of the closed-loop 
system are located. [Section: 6.3] 
12. In the system of Figure P6.3, let 
G(s) = 
K(s + 2) 
s{s-l)(s + 3) 
Find the range of K for closed-loop stability. 
[Section: 6.4] 
13. Given the unity feedback system of Figure P6.3 with 
[Section: 6.3] 
G(s) = 
84 
s(s7 + 5s6 + 12s5 + 25s4 + 45s3 + 50s2 + 82s + 60) 
tell how many poles of the closed-loop transfer func-
tion lie in the right half-plane, in the left half-plane, 
and on the /a>-axis. [Section: 6.3] 
14. Using the Routh-Hurwitz criterion and the unity 
feedback system of Figure P6.3 with 
G(s) = 
1 
2s4 + 5s3 + s2 + 2s 
tell whether or not the closed-loop system is stable. 
[Section: 6.2] 
s(s6 - 2s5 - s4 + 2s3 + 4s2 - 8s - 4) 
tell how many closed-loop poles are located in the 
right half-plane, in the left half-plane, and on the jco-
axis. [Section: 6.3] 
MATLAB 
16. Repeat Problem 15 using MATLAB. 
17. Consider the following Routh table. Notice that the 
s5 row was originally all zeros. Tell how many roots 
of the original polynomial were in the right half-
plane, in the left half-plane, and on the jco-axis. 
[Section: 6.3] 
.v7 
.v6 
,5 
-v4 
if 
s2 
.v1 
.v° 
1 
1 
3 
1 
7 
-15 
- 9 
-21 
2 
2 
4 
- 1 
8 
-21 
0 
0 
-1 
- 1 
- 1 
- 3 
0 
o 
0 
0 
-2 
- 2 
0 
0 
0 
0 
0 
0 
18. For the system of Figure P6.4, tell how 
WileyPLUS 
many closed-loop poles are located in 
the right half-plane, in the left half- 
Co^oi solutions 
plane, and on the jco-axis. Notice that 
there is positive feedback. [Section: 6.3] 
R(s) + o £ ( { ) 
18 
j
5 + j4-7.r3-752-18A' 
C(s) 
FIGURE P6.4 
19. Using the Routh-Hurwitz criterion, tell how many 
closed-loop poles of the system shown in Figure P6.5 
lie in the left half-plane, in the right half-plane, and 
on the ;<w-axis. [Section: 6.3] 
m +, ->s 
, 
p 
507 
.?4+3.<r3+10s2+30s+l69 
1 
s 
C{s) 
FIGURE P6.5 

328 
Chapter 6 
Stability 
20. Determine if the unity feedback system of Figure 
P6.3 with 
G(s) = 
K{s2 + 1) 
(5 + 1)(5 + 2) 
can be unstable. [Section: 6.4] 
21. For the unity feedback system of Figure P6.3 with 
C M , 
^ 
+ 6) 
U 
5(5 + 1)(5 + 4) 
determine the range of £ to ensure stability. 
[Section: 6.4] 
22. In the system of Figure P6.3, let 
K(s - a) 
G(s) = s(s - b) 
Find the range of £ for closed-loop stability when: 
[Section: 6.4] 
a. a < 0, 
b < 0 
b. a < 0, 
b > 0 
c. a > 0, 
b < 0 
d. a > 0, 
b>Q 
WileyPLUS 
23. For the unity feedback system of 
J J J 3 3 
Figure P6.3 with 
Controi So|ulions 
G(s) = £(5 + 3)(5 + 5) 
( 5 - 2 ) ( 5 - 4 ) 
determine the range of £ for stability. [Section: 6.4] 
MATLAB 
24. Repeat Problem 2 3 using MATLAB. 
flTTVfc 
25. Use MATLAB and t h e Symbolic 
symbolic Math 
Math Toolbox t o g e n e r a t e a 
Routh t a b l e i n terms of K t o 
s o l v e Problem 2 3 . 
26. Find the range of £ for stability for the unity feed-
back system of Figure P6.3 with [Section: 6.4] 
G(5) = 
£(5 + 4)(5-4) 
(5^+3) 
27. For the unity feedback system of Figure P6.3 with 
£(5 + 1) 
find the range of £ for stability. [Section: 6.4] 
28. Find the range of gain, £, to ensure stability in the 
unity feedback system of Figure P6.3 with [Section: 
6.4] 
G(s) = £(5-2)(5 + 4)(5 + 5) 
(52 + 12) 
29. Find the range of gain, £, to ensure stability in the 
unity feedback system of Figure P6.3 with [Section: 
6.4] 
£(5 + 2) 
G(s) = [S2 + 1)(5 + 4)(5-1) 
30. Using the Routh-Hurwitz criterion, find the value of 
£ that will yield oscillations for the unity feedback 
system of Figure P6.3 with [Section: 6.4] 
K 
G(s) = (5 + 77)(5 + 27)(5 + 38) 
31. Use the Routh-Hurwitz criterion to find the range 
of £ for which the system of Figure P6.6 is stable. 
[Section: 6.4] 
R(s) + 
E(s) 
K(s2-2s + 2) 
C(s) 
1 
s2 + 2s + 4 
FIGURE P6.6 
32. Repeat Problem 31 for the system of 
WileyPLUS 
Figure P6.7. [Section: 6.4] 
djgj 
Control Solutions 
-
> EU 
9 
K{s + 2) 
s(s+ l)(s + 3) 
s + 6 
s + 7 
cm 
FIGURE P6.7 
33. Given the unity feedback system of Figure P6.3 with 
G ( J ) = 
*< J + 4> 
W 
5(5+1.2)(5 + 2) 
find the following: [Section: 6.4] 
a. The range of £ that keeps the system stable 
b. The value of £ that makes the system oscillate 
c. The frequency of oscillation when £ is set to the 
value that makes the system oscillate 

Problems 
329 
34. Repeat Problem 33 for [Section: 6.4] 
K{s-l)(s-2) 
G(s) = 5 + 2)(52+ 25+ 2) 
35. For the system shown in Figure P6.8, find the 
value of gain, K, that will make the system oscil-
late. Also, find the frequency of oscillation. 
[Section: 6.4] 
41 
a. Find the range of K for stability. 
b. Find the frequency of oscillation when the system 
is marginally stable. 
Using the Routh-Hurwitz criterion 
and 
the 
unity feedback 
system of Figure P6.3 with 
[Section: 6.4] 
G{s) = 
K 
5(5 + 1)(5 + 2)(5+5) 
mt§ 7\ ? 
K 
t<S 
»[X) 
-
1 
s(s+l)(s+3) 
s 
C{s) 
FIGURE P6.8 
WileyPLUS 
36. Given the unity feedback system of 
fTTTTTfc 
Figure P6.3 with [Section: 6.4] 
42. 
Control Solutions 
G(s) = 
Ks(s + 2) 
a. Find the range of K for stability. 
b. Find the value of K for marginal stability. 
c. Find the actual location of the closed-loop poles 
when the system is marginally stable. 
Find the range of K to keep the system shown in 
Figure P6.9 stable. [Section: 6.4] 
R(s) + 
> 2 - 45 + 8)(5 + 3) 
a. Find the range of K for stability. 
b. Find the frequency of oscillation when the system 
is marginally stable. 
MATLAB 
37. Repeat Problem 36 u s i n g MATLAB. 
38. For the unity feedback system of Figure P6.3 with 
K{s + 2) 
43. 
FIGURE P6.9 
Find the value of K in the system of 
wileypws 
Figure P6.10 that will place the closed- 
flVJili'E 
loop poles as shown. [Section: 6.4] 
control solutions 
G(s) = >2+ 1)(5+ 4)(5-1) 
R(s) 
find the range of K for which there will be only two 
closed-loop, right-half-plane poles. [Section: 6.4] 
39. For the unity feedback system of Figure P6.3 with 
[Section: 6.4] 
G(s) = 
f 
(5 + l)3(5 + 4) 
a. Find the range of K for stability. 
b. Find the frequency of oscillation when the system 
is marginally stable. 
40. Given the unity feedback system of Figure P6.3 with 
[Section: 6.4] 
G(s) = 
^0^ 
K 
C(s) 
I +¾ 
1 
JCO 
;: 
( 5 + 49)(5 2+ 4 5 + 5) 
FIGURE P6.10 
Closed-loop system with pole plot 

330 
Chapter 6 
Stability 
44. The closed-loop transfer function of a system is 
s2+KlS 
+ K2 
48. A linearized model of a torque-controlled crane 
hoisting a load with a fixed rope length is 
T(s) = s4 + K^3 + K2s2 +5s + l 
m=m=-
m 
Determine the range of K\ in order for the system to 
be stable. What is the relationship between K\ and 
K2 for stability? [Section: 6.4] 
45. For the transfer function below, find the constraints 
on K\ and K2 such that the function will have only 
two jco poles. [Section: 6.4] 
T(s) = 
Kis + K2 
s4 + Kis3 + s2 + K2s + 1 
FT(s) 
mT s2{s2 +aa>l) 
where COQ = Jj-, L = the rope length, mj = the mass 
of the car, a — the combined rope and car mass,/ r = 
the force input applied to the car, and xj = the 
resulting rope displacement {Marttinen, 1990). If 
the system is controlled in a feedback configuration 
by placing it in a loop as shown in Figure P6.ll, with 
K > 0, where will the closed-loop poles be located? 
46. The transfer function relating the output engine fan 
speed (rpm) to the input main burner fuel flow rate 
(lb/h) in a short takeoff and landing (STOL) fighter 
aircraft, ignoring the coupling between engine fan 
speed and the pitch control command, is (Schier-
man, 1992) [Section: 6.4] 
1.357 + 90,556 + 1970s5 +15,000.94 + 3120A3 - 41,300s2 - 50005 - 1840 
GW ~ <fi + 103s7 + 118056 + 40405s + 2150s4 - 896053 - 10,600s2 - 1550s - 415 4 9 . 
a. Find how many poles are in the right half-plane, 
in the left half-plane, and on the y'w-axis. 
b. Is this open-loop system stable? 
47. An interval polynomial is of the form 
P(s) = «o + a\s + &2S2 + a3,s3 + «4^4 + #5^ H 
with 
its coefficients 
belonging 
to 
intervals 
xi < cij < v,-, where Xj, y, are prescribed constants. 
Kharitonov's theorem says that an interval polyno-
mial has all its roots in the left half-plane if each one 
of the following four polynomials has its roots in the 
left half-plane {Minichelli, 1989): 
Ms) + 
m 
C(s) 
FIGURE P6.11 
The read/write head assembly arm of a computer 
hard disk drive (HDD) can be modeled as a rigid 
rotating body with inertia /¾. Its dynamics can be 
described with the transfer function 
*
»
-
$
-
-I** 
K\ (s) =XQ+ 
XIS + y2s2 + V3.S3 + x4s4 + x5s5 + y6s6 + 
where X(s) is the displacement of the read/write 
head and F(s) is the applied force (Yan, 2003). 
Show that if the HDD is controlled in the con-
figuration shown in Figure P6.ll, the arm will 
oscillate and cannot be positioned with any pre-
cision over a HDD track. Find the oscillation 
frequency. 
yxs + y2s2 
+ X3S3 + X4S4 
K2(s)=x0 
^3(5) = y0 + x\s + x2s2 + y353 
y5
s 
+yes 
50. A system is represented in state space as state space 
V 45 4 + X5S" 
x6s6 + 
K4 {s) =yo+y>iS + x2s2 + X3S3 + y4s4 + y5s5 + x^ 
-\ 
Use Kharitonov's theorem and the Routh-Hurwitz 
criterion to find if the following polynomial has any 
zeros in the right-half-plane. 
x = 
y = 
"0 
2 
1 
1 1 
1 
2 
- 4 
31 
- 4 
3 
x-t- roi 
1 
0 
Olx 
P(s) = ao + a\s + a2s2 + a^s3 
2 < a0 < 4; 
1 < a\ < 2; 4 < a2 < 6; 
« 3 - 1 
Determine how many eigenvalues are in the right 
half-plane, in the left half-plane, and on the y'w-axis. 
[Section: 6.5] 

Problems 
331 
51. UseMATLABtofind the e i g e n v a l -
ues of t h e following system: 
MATLAB 
0 1 
0 1 
-1 1 
0" 
-4 
8 
x + 
0 
0 
0 
0 
0 
3 
1 
1 
-4 
01 
3 
-5 
x + 
0 
0 
1 
State Space 
X 
= 
y = [ 0 
0 l]x 
52. The following system in state space 
represents the forward path of a unity 
feedback system. Use the Routh-
Hurwitz criterion to determine if 
the closed-loop system is stable. [Sec-
tion: 6.5] 
x = 
y = [0 1 l]x 
53. Repeat Problem 52 using 
MATLAB. 
54. A Butterworth polynomial is of the form 
Bn(s) = 1 + (-1)11 f—1 ",n>0. 
State Space 
WileyPLUS 
Control Solutions 
of gain, K, that will keep the system stable. Can the 
system ever be unstable for positive values of K7 
56. A common application of control systems is in 
regulating the temperature of a chemical process 
(Figure P6.13). The flow of a chemical reactant to a 
process is controlled by an actuator and valve. The 
reactant causes the temperature in the vat to 
change. This temperature is sensed and compared 
to a desired set-point temperature in a closed loop, 
where the flow of reactant is adjusted to yield the 
desired temperature. In Chapter 9, we will learn 
how a PID controller is used to improve the per-
formance of such process control systems. Figure 
P6.13 shows the control system prior to the addition 
of the PID controller. The PID controller is 
replaced by the shaded box with a gain of unity. 
For this system, prior to the design of the PID 
controller, find the range of amplifier gain, K, to 
keep the system stable. 
MATLAB 
Desired 
temperature 
scl point + 
W * 
I 
Actuator 
Chemical 
Future PID 
and 
heat 
controller 
Amplifier 
valve 
process 
Actual 
temperature 
s + 0.4 
0.7 
s2+ 1.75 + 0.25 
0.1 
5 + 0.1 
Temperature 
sensor 
Use the Routh-Hurwitz criteria to find the zeros of 
FIGURE P6.13 Block diagram of a chemical process control 
a Butterworth polynomial for: 
system 
a. n = 1; 
b. n=2 
DESIGN PROBLEMS 
55. A model for an airplane's pitch loop is 
shown in Figure P6.12. Find the range 
WileyPLUS 
Control Solutions 
Commanded 
pitch angle + 
Controller 
Aircraft dynamics 
K(s+l) 
(.9 + 4.85) 
s+\0 
s2 + 0.6s + 9 
Pitch atmle 
Gyro 
FIGURE P6.12 
Aircraft pitch loop model 
57. A robot arm called ISAC (Intelligent Soft Arm 
Control) can be used as part of a system to feed 
people with disabilities (see Figure P6.14(a)). The 
control system guides the spoon to the food and 
then to a position near the person's mouth. The arm 
uses a special pneumatically controlled actuator 
called a rubbertuator. Rubbertuators consist of rub-
ber tubes covered with fiber cord. The actuator 
contracts in length when pneumatic pressure is 
increased and expands in length when pressure is 
decreased. This expansion and contraction in length 
can drive a pulley or other device. A video camera 
*" 
provides the sight for the robot and the tracking 
loop {Kara, 1992). Assume the simplified block 
diagram shown in Figure P6.14(fr) for regulating 
the spoon at a distance from the mouth. Find the 
range of K for stability. (Use of a program with 
symbolic capability is recommended.) 

332 
Chapter 6 
Stability 
III 
mi(9s 
-A 
Controller 
£(5+0.01)(5+6) 
5(.v+20)(5+l00) 
Rubbertuator 
and load 
10 
52+10s+29 
HI 
a*) 
FIGURE P6.14 a. IS AC used for feeding (Courtesy of 
Kazuhiko Kawamura, Vanderbilt University.) 
b. simplified block diagram 
WileyPLUS 
Control Solutions j 
58. Often an aircraft is required to tow 
another vehicle, such as a practice 
target or glider. To stabilize the 
towed vehicle and prevent it from 
rolling, pitching, and yawing, an autopilot is built 
into the towed vehicle. Assume the block diagram 
shown in Figure P6.15 represents the autopilot roll 
control system (Cochran, 1992). Find the range of K 
to keep the roll angle stable. 
Commanded 
roll angle 
¢,-(1) + 
Compensator 
Actuator 
® -
K(5+0.6)(5+6) 
(s+0.l)(5+100) —^-
200 
,s2+12s+100 
Roll 
Actual 
dynamics roll angle 
#fe'J 
500 
4(5+6) 
FIGURE P6.15 Towed vehicle roll control 
59. Cutting forces should be kept constant during 
machining operations to prevent changes in spindle 
speeds or work position. Such changes would dete-
riorate the accuracy of the work's dimensions. A 
control system is proposed to control the cutting 
force. The plant is difficult to model, since the 
Desired 
force 
mt&) 
. 
^yy 
I 
Controller 
K 
Plant 
63X106 
(5+30)(5+140)(5 + 2.5) 
Actual 
force 
cm 
FIGURE P6.16 Cutting force control system (Reprinted with 
permission of ASME.) 
factors that affect cutting force are time varying 
and not easily predicted. However, assuming 
the simplified force control model shown in Figure 
P6.16, use the Routh-Ffurwitz criterion to find the 
range of K to keep the system stable (Rober, 1997). 
60. Transportation systems that use magnetic levitation 
can reach very high speeds, since contact friction at 
the rails is eliminated (see Figure P6.17(a)). Electro-
magnets can produce the force to elevate the vehi-
cle. Figure P6.17(6) is a simulation model of a 
control system that can be used to regulate the 
magnetic gap. In the figure, Zvin(s) represents a 
voltage proportional to the desired amount of levi-
tation, or gap. Zvout(s) represents a voltage propor-
tional to the actual amount of levitation. The plant 
models the dynamic response of the vehicle to 
A, i ^ ? ^ 
<f 
Controller 
£(5+0.8)(5+103) 
Plant 
7570 
(5+62.61)(5-62.61) 
2,.,,,,,(5) 
(b) 
FIGURE P6.17 a. A magnetic levitation transportation system 
(© Japan Air Lines/Photo Researchers); b. simplified block 
diagram (© 1998 IEEE) 

Problems 
333 
signals from the controller {Bittar, 1998). Use the 
Routh-Hurwitz criterion to find the range of gain, 
K, to keep the closed loop system stable. 
61. A transfer function from indoor radiator power, 
Q(s), to room temperature, T(s), in an 11m2 
room is 
- ZM - 
1 x l(T6j2 + 1.314 x 10"9y + 2.66 x 10"13 
Q(s) " s3 + 0.00163^2 + 5.272 x 10_7s + 3.538 x 10-11 
where Q is in watts and Tis in °C (Thomas, 2005). 
The room's temperature will be controlled by 
embedding it in a closed loop, such as that of Figure 
P6.11. Find the range of K for closed-loop stability. 
62. During vertical spindle surface grinding, adjust-
ments are made on a multi-axis computer numerical 
control (CNC) machine by measuring the applied 
force with a dynamometer and applying appropriate 
corrections. This feedback force control results in 
higher homogeneity and better tolerances in the 
resulting finished product. In a specific experiment 
with an extremely high feed rate, the transfer func-
tion from the desired depth of cut (DOC) to applied 
force was 
F(s) 
Kc 
DOC{s) 
1 + 
K< 
Kc 
1 
ms2 + bs + k 
KfTs+1 
where k = 2.1 xl04N/m, b = 0.78 Ns/m, m = 1.2x 
1(T4 Kg, Kc = 1.5 x 104 N/mm and T = 0.004 s. Kf 
is a parameter that is varied to adjust the system. 
Find the range of Kf under which the system is 
stable (Hekman, 1999). 
63. Figure P6.18 depicts the schematic diagram of a 
phase shift oscillator. 
The circuit will oscillate if it is designed to have 
poles on the y'w-axis. 
a. Show that the transfer function for the passive 
network in the circuit is given by 
V2(s) 
-1 
ViCO "-±)fr* ; 
sRC 
3 
sRC 
b. Show that the oscillator's characteristic equation 
is given by 
\-K 
* 
= 0. 
1 + 1 
sRC 
2 + 
1 
sRC 
- 3 - sRC 
where K = — 
Ri 
c. Use the Routh-Hurwitz criterion to obtain the 
oscillation 
condition 
and 
the 
oscillation 
frequency. 
64. In order to obtain a low-cost lithium-ion battery 
charger, the feedback loop of Figure P6.3 is used, 
where G(s) = Gc(s)P(s). The following transfer 
functions have been derived for G(s) (Tsang, 
2009): 
P(s) = R\R2CiC2s2 + (Ri C, + R2Ci + R2C2)s + 1 
Ct(l+R2Cz)s 
K, 
Gc(s)=Kp + -t-
FIGURE P6.18 Phase shift oscillator 
If Rt = 0,15 0;i% = 0.44(1; Ci = 7200 F; and C2 = 
170 F use the Routh-Hurwitz criteria to find the 
range of positive Kj> and Kj for which the system is 
closed-loop stable. 
65. Figure P6.19 is a simplified and linearized block 
diagram of a cascade control system, which is used 
to control water level in a steam generator of a 
nuclear power plant (Wang, 2009,). 
In this system, the level controller, G/C(s), is the 
master controller and the feed-water flow controller, 
Gpc(s) is the slave controller. Using mass balance 
equations, the water level would ordinarily be 
regarded as a simple integration process of water 
flow. In a steam generator, however, steam flow rate 
and the cooling effect of feed-water change the 
dynamics of that process. Taking the latter into 
account and ignoring the much-less pronounced 
impact of changes in steam flow rate, a first-order 
lag plus time delay is introduced into the transfer 

334 
Chapter 6 
Stability 
Set point 
_ it 
G,.v(s) 
>6& * 
1 i 
GFC (S) 
Y(s) 
Gv(.v) 
FIGURE P6.19 
Q,As) GfiAs) 
Controlled 
level 
C(s) 
function, Gfti.(s), relating the controlled level, C(s), 
to feed-water flow rate, Qw(s) as follows: 
G fw 5 
= C(s) 
Qw(s) 
s(Tis + r 
2 
2e -2S 
s{25s + 1) 
5(255+ 1)(252+ 25 + 1) 
where K-\ = 2 is the process gain, TI = 2 is the pure 
time delay, and T\ — 25 is the steam generator's 
time constant. (The expression e~TlS represents 
a time delay. This function can be represented by 
what is known as a Pade approximation. This ap-
proximation can take on many increasingly compli-
cated forms, depending upon the degree of accuracy 
required. Here we use the Pade approximation, 
e~x ss 
~, and specific numerical values for 
the considered steam generator.) 
The dynamic characteristics of the control valve 
are 
approximated 
by 
the 
transfer 
function: 
Qw(s) 
Kv 
1 
Gv(s) = 
where Kv is the 
Y(s) 
Tvs + 1 
3s + 1' 
valve gain and Tv is its time constant. 
Given that: GFC(s) = KPFC + KDFCS = 0.5 + 2s 
and GLC{$) = KpLC + KDLC S = 0.5 +KS, 
use the 
Routh-Hurwitz criterion to find the range of the 
level controller's derivative gain, KoLC = K > 0, 
that will keep the system stable. 
66. Look-ahead information can be used to automati-
cally steer a bicycle in a closed-loop configuration. 
A line is drawn in the middle of the lane to be 
followed, and an arbitrary point is chosen in the 
vehicle's longitudinal axis. A look-ahead offset is 
calculated by measuring the distance between the 
look-ahead point and the reference line and is used 
by the system to correct the vehicle's trajectory. A 
linearized model of a particular bicycle traveling on 
a straight-line path at a fixed longitudinal speed is 
V 
r 
f 
[Y,\ 
= 
11.7 
-3.5 
0 
1 
6 
-24 
1 
0 
61.6K 
66.9K 
0 
10 
7.7tf] 
8AK 
0 
0 
~V 1 
/' 
In this model, V=bicycle's 
lateral velocity, r = 
bicycle's yaw velocity, ^ = bicycle's yaw accelera-
tion, and Yg = bicycle's center of gravity coordinate 
on the y-axis. K is a controller parameter to be 
chosen by the designer (Ozgiiner, 1995). Use the 
Routh-Hurwitz citerion to find the range of K for 
which the system is closed-loop stable. 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
67. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses active control of a pantograph mechanism 
for high-speed rail systems. In Problem 79(a), Chap-
ter 5, you found the block diagram for the active 
pantograph control system. Using your solution for 
Problem 79(a) in Chapter 5 and the Routh-Hurwitz 
criterion, find the range of controller gain, K, that will 
keep the system stable (O'Connor, 1997). 
68. Control of HIV/AIDS. The HIV infection linear-
ized model developed in Problem 82, Chapter 4, can 
be shown to have the transfer function 
P(s) = 
-520s - 10.3844 
Y{s) 
Ui{s) 
s3 + 2.6817^2 + 0.11^ + 0.0126 
Desired virus 
count elianjje + '0~* G(s) 
^-H Pis) 
Virus count change. K(.v) 
FIGURE P6.20 
It is desired to develop a policy for drug delivery to 
maintain the virus count at prescribed levels. For 
the purpose of obtaining an appropriate 
ui(t), 
feedback will be used as shown in Figure P6.20 
(Craig, 2004). 

Cyber Exploration Laboratory 
335 
Ref. 
signal 
+ 
Speed 
error 
EM 
Speed 
controller 
Ks + 40 
Feedback 
speed signal 
KssGOd 
Uc(s) 
Torque 
controller 
& power 
amplifier 
>& 
IO5 + 6 
Ua(s) 
Armature 
resistance 
R„(s) 
5® 
Feedback 
current signal 
KcsUs) 
Eb(s) 
Back emf 
Current sensor 
sensitivity 
0.5 
Armature 
current 
Us) 
Speed sensor 
sensitivity 
0.0443 
FIGURE P6.21 
Motive 
torque 
T(s) 
+ 
0.6154 * 
TL(s) 
0-
Friction 
torque 
Tds) 
1 
7.2265 
0.1 
Motor 
angular 
speed 
n(S) 
0.3 
4.875 
Vehicle 
speed 
V(s) 
• 
As a first approach, consider G(s) = K, a constant 
to be selected. Use the Routh-Hurwitz criteria to 
find the range of K for which the system is closed-
loop stable. 
69. Hybrid vehicle. Figure P6.21 shows the HEV system 
presented in Chapter 5, where parameter values 
have been substituted. It is assumed here that the 
speed controller has a proportional gain, Kp, to be 
adjusted. Use the Routh-Hurwitz stability method 
to find the range of positive Kp for which the system 
is closed-loop stable (Graebe, 1995). 
Cyber Exploration Laboratory 
Experiment 6.1 
Obj ectives To verify the effect of pole location upon stability. To verify the effect 
upon stability of loop gain in a negative feedback system. 
Minimum Required Software Packages MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
1. Find the equivalent transfer function of the negative feedback system of Figure 
P6.22 if 
G(s) = 
K 
s{s + 2V 
and H(s) = 1 
2. For the system of Prelab 1, find two values of gain that will yield closed-loop, 
overdamped, second-order poles. Repeat for underdamped poles. 
3. For the system of Prelab 1, find the value of gain, K, that will make the system 
critically damped. 
«w + ^ 
. 
— V 
G(s) 
H(s) 
-^— 
cm 
FIGURE P6.22 

Chapter 6 
Stability 
4. For the system of Prelab 1, find the value of gain, K, that will make the system 
marginally stable. Also, find the frequency of oscillation at that value of K that 
makes the system marginally stable. 
5. For each of Prelab 2 through 4, plot on one graph the pole locations for each case 
and write the corresponding value of gain, K, at each pole. 
Lab 
1. Using Simulink, set up the negative feedback system of Prelab 1. Plot the step 
response of the system at each value of gain calculated to yield overdamped, 
underdamped, critically damped, and marginally stable responses. 
2. Plot the step responses for two values of gain, K, above that calculated to yield 
marginal stability. 
3. At the output of the negative feedback system, cascade the transfer function 
Set the gain, K, at a value below that calculated for marginal stability and plot the 
step response. Repeat for K calculated to yield marginal stability. 
Postlab 
1. From your plots, discuss the conditions that lead to unstable responses. 
2. Discuss the effect of gain upon the nature of the step response of a closed-loop 
system. 
Experiment 6.2 
Objective To use the Lab VIEW Control Design and Simulation Module for 
stability analysis. 
Minimum Required Software Package Lab VIEW with the Control Design 
and Simulation Module 
Prelab Select six transfer functions of various orders and use Routh-Hurwitz to 
determine their stability. 
Lab Create a LabVIEW VI that receives the order and the coefficients of the 
characteristic equation and outputs the location of the poles and information 
regarding stability. 
Postlab Verify the stability of the systems from your Prelab. 
^ Bibliography^ 
Ballard, R. D. The Riddle of the Lusitania. National Geographic, April 1994, National 
Geographic Society, Washington, D.C., 1994, pp. 68-85. 

Bibliography 
Bittar, A., and Sales, R. M. H 2 and H 2 Control for MagLev Vehicles. IEEE Control Systems, 
vol. 18, no. 4, August 1998, pp. 18-25. 
Cochran, J. E., Innocenti, M., No, T. S., and Thukral, A. Dynamics and Control of Maneuver-
able Towed Flight Vehicles. Journal of Guidance, Control, and Dynamics, vol. 15, no. 5, 
September-October 1992, pp. 1245-1252. 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria, IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
D'Azzo, X, and Houpis, C. H. Linear Control System Analysis and Design, 3d ed. McGraw-
Hill, New York, 1988. 
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989. 
Graebe, S. E, Goodwin, G. G, and Elsley, G. Control Design and Implementation in 
Continuous Steel Casting. IEEE Control Systems, August 1995, pp. 64-71. 
Hekman, K. A., and Liang, S. Y. Compliance Feedback Control for Part Parallelism 
in Grinding. International Journal of Manufacturing Technology, vol. 15, 1999, 
pp. 64-69. 
Hostetter, G. H., Savant, C. X, Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d 
ed. Saunders College Publishing, New York, 1989. 
Johnson, H., et al. Unmanned Free-Swimming Submersible (UFSS) System 
Description. 
NRL Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 
1980. 
Kara, A., Kawamura, K., Bagchi, S., and El-Gamal, M. Reflex Control of a Robotic 
Aid System to Assist the Physically Disabled. IEEE Control Systems, June 1992, 
pp. 71-77. 
Martinnen, A., Virkkunen, X, and Salminen, R. T. Control Study with Pilot Crane. IEEE 
Transactions on Education, vol. 33, no. 3, August 1990, pp. 298-305. 
Minnichelli, R. X, Anagnost, X X, and Desoer, C. A. An Elementary Proof of Kharitonov's 
Stability Theorem with Extensions. IEEE Transactions on Automatic Control, vol. 34,1989, 
pp. 995-998. 
O'Connor, D. N., Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ozgiiner, U., Unyelioglu, K. A., and Haptipoglu, C. An Analytical Study of Vehicle 
Steering Control. Proceedings of the 4th IEEE Conference Control Applications, 1995, 
pp. 125-130. 
Phillips, C. L., and Harbor, R. D. Feedback Control Systems, 2d ed. Prentice Hall, Upper 
Saddle River, NJ, 1991. 
Preitl, Z., Bauer, P., and X Bokor, X A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. 4th International Symposium on Applied Computational Intelligence and 
Informatics. IEEE. 2007. 
Rober, S. X, Shin, Y G, and Nwokah, O. D. I. A Digital Robust Controller for Cutting Force 
Control in the End Milling Process. Journal of Dynamic Systems, Measurement, and 
Control, vol. 119, June 1997, pp. 146-152. 
Routh, E. X Dynamics of a System of Rigid Bodies, 6th ed. Macmillan, London, 1905. 
Schierman, X D., and Schmidt, D. K. Analysis of Airframe and Engine Control Interactions 
and Integrated Flight/Propulsion Control. Journal of Guidance, Control, and Dynamics, 
vol. 15, no. 6, November-December 1992, pp. 1388-1396. 
Thomas, B., Soleimani-Mosheni, M., and Fahlen, P., Feed-Forward in Temperature Control of 
Buildings. Energy and Buildings, vol. 37, 2005, pp. 755-761. 
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New 
York, 1968. 

338 
Chapter 6 
Stability 
Tsang, K. M., Chan, W. L. A Simple and Low-cost Charger for Lithium-Ion Batteries. Journal 
of Power Sources, vol. 191, 2009, pp. 633-635. 
Wang, X.-K., Yang, X.-H., Liu, G., and Qian, H. Adaptive Neuro-Fuzzy Inference System PID 
controller for steam generator water level of nuclear power plant, Procedings of the Eighth 
International Conference on Machine Learning and Cybernetics, 2009, pp. 567-572. 
Yan, T., and Lin, R. Experimental Modeling and Compensation of Pivot Nonlinearly in Hard 
Disk Drives. IEEE Transactions on Magnetics, vol. 39, 2003, pp. 1064-1069. 

Steady-State Errors 
$ 7 
^Chapter Learning Outcomes^ 
After completing this chapter the student will be able to: 
• Find the steady-state error for a unity feedback system (Sections 7.1-7.2) 
• Specify a system's steady-state error performance (Section 7.3) 
• Design the gain of a closed-loop system to meet a steady-state error specification 
(Section 7.4) 
• Find the steady-state error for disturbance inputs (Section 7.5) 
• Find the steady-state error for nonunity feedback systems (Section 7.6) 
• Find the steady-state error sensitivity to parameter changes (Section 7.7) 
• Find the steady-state error for systems represented in state space (Section 7.8) 
^Case Study Learning Outcomes^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to find the preamplifier gain to meet steady-state error performance 
specifications. 
• Given a video laser disc recorder, you will be able to find the gain required to permit 
the system to record on a warped disc. 
339 

Chapter 7 
Steady-State Errors 
Introduction 
In Chapter 1, we saw that control systems analysis and design focus on three 
specifications: (1) transient response, (2) stability, and (3) steady-state errors, taking 
into account the robustness of the design along with economic and social considera-
tions. Elements of transient analysis were derived in Chapter 4 for first- and second-
order systems. These concepts are revisited in Chapter 8, where they are extended to 
higher-order systems. Stability was covered in Chapter 6, where we saw that forced 
responses were overpowered by natural responses that increase without bound if the 
system is unstable. Now we are ready to examine steady-state errors. We define the 
errors and derive methods of controlling them. As we progress, we find that control 
system design entails trade-offs between desired transient response, steady-state 
error, and the requirement that the system be stable. 
Definition and Test Inputs 
Steady-state error is the difference between the input and the output for a prescribed 
test input as t —> oo. Test inputs used for steady-state error analysis and design are 
summarized in Table 7.1. 
In order to explain how these test signals are used, let us assume a position 
control system, where the output position follows the input commanded position. 
Step inputs represent constant position and thus are useful in determining the ability 
of the control system to position itself with respect to a stationary target, such as a 
satellite in geostationary orbit (see Figure 7.1). An antenna position control is an 
example of a system that can be tested for accuracy using step inputs. 
TABLE 7.1 Test waveforms for evaluating steady-state errors of position control systems 
Waveform 
Name 
Physical 
interpretation 
Time 
function 
Lapiace 
transform 
Kt) 
Step 
Constant position 
•*• 
i 
Ramp 
Constant velocity 
rm 
Parabola 
Constant acceleration 
V 
? 

7.1 Introduction 
341 
Satellite in geostationary orbit 
Satellite orbiting at 
^ ^ 
constant velocity r~^e^ 
Accelerating ^ S ^ y * 
missile 
^ ^ ¾ ^ 
Sf 
Tracking system 
FIGURE 7.1 
Test inputs for 
steady-state error analysis and 
design vary with target type 
Ramp inputs represent constant-velocity inputs to a position control system by 
their linearly increasing amplitude. These waveforms can be used to test a system's 
ability to follow a linearly increasing input or, equivalently, to track a constant-
velocity target. For example, a position control system that tracks a satellite that 
moves across the sky at a constant angular velocity, as shown in Figure 7.1, would be 
tested with a ramp input to evaluate the steady-state error between the satellite's 
angular position and that of the control system. 
Finally, parabolas, whose second derivatives are constant, represent constant-
acceleration inputs to position control systems and can be used to represent 
accelerating targets, such as the missile in Figure 7.1, to determine the steady-state 
error performance. 
Application to Stable Systems 
Since we are concerned with the difference between the input and the output of a 
feedback control system after the steady state has been reached, our discussion is 
limited to stable systems, where the natural response approaches zero as t —> oo. 
Unstable systems represent loss of control in the steady state and are not acceptable 
for use at all. The expressions we derive to calculate the steady-state error can be 
applied erroneously to an unstable system. Thus, the engineer must check the system 
for stability while performing steady-state error analysis and design. However, in 
order to focus on the topic, we assume that all the systems in examples and problems 
in this chapter are stable. For practice, you may want to test some of the systems for 
stability. 
Evaluating Steady-State Errors 
Let us examine the concept of steady-state errors. In Figure 7.2(a) a step input and 
two possible outputs are shown. Output 1 has zero steady-state error, and output 2 
has a finite steady-state error, 62(00). A similar example is shown in Figure 7.2(6), 
where a ramp input is compared with output 1, which has zero steady-state error, and 
output 2, which has a finite steady-state error, 62(00), as measured vertically between 
the input and output 2 after the transients have died down. For the ramp input 

342 
Chapter 7 
Steady-State Errors 
T 
e2M 
Output 2 
Time 
FIGURE 7.2 Steady-state error: 
a. step input; b. ramp input 
e2(~) 
Time 
another possibility exists. If the output's slope is different from that of the input, then 
output 3, shown in Figure 1.2(b), results. Here the steady-state error is infinite as 
measured vertically between the input and output 3 after the transients have died 
down, and t approaches infinity. 
Let us now look at the error from the perspective of the most general block 
diagram. Since the error is the difference between the input and the output of a system, 
we assume a closed-loop transfer function, T(s), and form the error, E(s), by taking the 
difference between the input and the output, as shown in Figure 13(a). Here we are 
interested in the steady-state, or final, value of e(t). For unity feedback systems, E(s) 
appears as shown in Figure 1.3(b). In this chapter, we study and derive expressions for 
the steady-state error for unity feedback systems first and then expand to nonunity 
feedback systems. Before we begin our study of steady-state errors for unity feedback 
systems, let us look at the sources of the errors with which we deal. 
FIGURE 7.3 Closed-loop control 
system error: a. general 
representation; b. representation 
for unity feedback systems 
m 
T(s) 
, 
m - 2: 
*vl 
E(s) 
R(s) +, 
E(s) 
C{s) 
C(s) 
(a) 
(b) 

7.2 Steady-State Error for Unity Feedback Systems 
343 
R(s) +<: ?\ 3¾ 
K 
C(s) 
R{s) + 
E(s) 
C(s) 
(a) 
FIGURE 7.4 
System with 
a. finite steady-state error for a 
step input; b. zero steady-state 
error for step input 
Sources of Steady-State Error 
Many steady-state errors in control systems arise from nonlinear sources, such as 
backlash in gears or a motor that will not move unless the input voltage exceeds a 
threshold. Nonlinear behavior as a source of steady-state errors, although a viable 
topic for study is beyond the scope of a text on linear control systems. The steady-
state errors we study here are errors that arise from the configuration of the system 
itself and the type of applied input. 
For example, look at the system of Figure 7.4(a), where R(s) is the input, C(s) is 
the output, and E(s) = R(s) — C(s) is the error. Consider a step input. In the steady 
state, if c(i) equals r(t), e(t) will be zero. But with a pure gain, K, the error, e(t), 
cannot be zero if c(t) is to be finite and nonzero. Thus, by virtue of the configuration 
of the system (a pure gain of K in the forward path), an error must exist. If we call 
^steady-state the steady-state value of the output and <?steady-state the steady-state value of 
the error, then Csteady-state = ^steady-state, 
0 r 
-steady-state — ^ ^steady-stale 
(7.1) 
Thus, the larger the value of K, the smaller the value of esteady-state would have to be to 
yield a similar value of csteady-state- The conclusion we can draw is that with a pure gain 
in the forward path, there will always be a steady-state error for a step input. This 
error diminishes as the value of K increases. 
If the forward-path gain is replaced by an integrator, as shown in Figure 7.4(6), 
there will be zero error in the steady state for a step input. The reasoning is as 
follows: As c(t) increases, e(t) will decrease, since e(t) = r(t) — c(t). This decrease will 
continue until there is zero error, but there will still be a value for c(t) since an 
integrator can have a constant output without any input. For example, a motor can 
be represented simply as an integrator. A voltage applied to the motor will cause 
rotation. When the applied voltage is removed, the motor will stop and remain at its 
present output position. Since it does not return to its initial position, we have an 
angular displacement output without an input to the motor. Therefore, a system 
similar to Figure 7.4(b), which uses a motor in the forward path, can have zero 
steady-state error for a step input. 
We have examined two cases qualitatively to show how a system can be expected 
to exhibit various steady-state error characteristics, depending upon the system 
configuration. We now formalize the concepts and derive the relationships between 
the steady-state errors and the system configuration generating these errors. 
t 
7.2 Steady-State Error for Unity 
Feedback Systems 
Steady-state error can be calculated from a system's closed-loop transfer function, 
T(s), or the open-loop transfer function, G(s), for unity feedback systems. We begin 
by deriving the system's steady-state error in terms of the closed-loop transfer 

Chapter 7 
Steady-State Errors 
function, T(s), in order to introduce the subject and the definitions. Next we obtain 
insight into the factors affecting steady-state error by using the open-loop transfer 
function, G(s), in unity feedback systems for our calculations. Later in the chapter 
we generalize this discussion to nonunity feedback systems. 
Steady-State Error in Terms of T(s) 
Consider Figure 7.3(a). To find E(s), the error between the input, R(s), and the 
output, C(s), we write 
E(s) = R(s) - C(s) 
(7.2) 
But 
C(s) = R(s)T(s) 
(7.3) 
Substituting Eq. (7.3) into Eq. (7.2), simplifying, and solving for E(s) yields 
E(s) = R(s)[l-T(s)} 
(7.4) 
Although Eq. (7.4) allows us to solve for e(t) at any time, t, we are interested in the 
final value of the error, e(oo). Applying the final value theorem,1 which allows us to 
use the final value of e(t) without taking the inverse Laplace transform of E(s), and 
then letting t approach infinity, we obtain 
e(co) = lim e{t) = MmsE{s) 
(7.5)2 
Substituting Eq. (7.4) into Eq. (7.5) yields 
e{po) = lim sR(s)[l - T{s)} 
(7.6) 
S—too 
Let us look at an example. 
1 The final value theorem is derived from the Laplace transform of the derivative. Thus, 
n(t)) 
= rhtV'dt 
= sF(s) -/(0-) 
Jo-
As 5 -»0. 
or 
f /(r)A =/(00) -/(0-) = timsF{s) -/(0-) 
/(°°) = B»«P(*) 
s—0 
For finite steady-state errors, the final value theorem is valid only if F(s) has poles only in the left half-
plane and, at most, one pole at the origin. However, correct results that yield steady-state errors that are 
infinite can be obtained if F(s) has more than one pole at the origin (see D'Azzo andHoupis, 1988). UF(s) 
has poles in the right half-plane or poles on the imaginary axis other than at the origin, the final value 
theorem is invalid. 
2 Valid only if (1) E(s) has poles only in the left half-plane and at the origin, and (2) the closed-loop transfer 
function, T(s), is stable. Notice that by using Eq. (7.5), numerical results can be obtained for unstable 
systems. These results, however, are meaningless. 

7.2 Steady-State Error for Unity Feedback Systems 
345 
Example 7.1 
Steady-State Error in Terms of T(s) 
PROBLEM: Find the steady-state error for the system of Figure 7.3(a) if T(s) = 
5/(s2 + 7s + 10) and the input is a unit step. 
SOLUTION: From the problem statement, R(s) = 1/s and T(s) = 5/(52 + 75 +10). 
Substituting into Eq. (7.4) yields 
m= 
s2 + 75 + 5 
s(s2 + 75 + 10) 
(7.7) 
Since T(s) is stable and, subsequently, E(s) does not have right-half-plane poles or 
jco poles other than at the origin, we can apply the final value theorem. Substituting 
Eq. (7.7) into Eq. (7.5) gives e(oo) = 1/2. 
Steady-State Error in Terms of G(s) 
Many times we have the system configured as a unity feedback system with a 
forward transfer function, G(s). Although we can find the closed-loop transfer 
function, T(s), and then proceed as in the previous subsection, we find more insight 
for analysis and design by expressing the steady-state error in terms of G(s) rather 
than T(s). 
Consider the feedback control system shown in Figure 7.3(b). Since the 
feedback, H(s), equals 1, the system has unity feedback. The implication is that 
E(s) is actually the error between the input, R(s), and the output, C(s). Thus, if we 
solve for E(s), we will have an expression for the error. We will then apply the final 
value theorem, Item 11 in Table 2.2, to evaluate the steady-state error. 
Writing E(s) from Figure 7.3(b), we obtain 
E(s) = R(s) - C(s) 
C(s) = E(s)G(s) 
Finally, substituting Eq. (7.9) into Eq. (7.8) and solving for E(s) yields 
E(s) = 
R(s) 
1 + G(s) 
(7.8) 
(7.9) 
(7.10) 
We now apply the final value theorem, Eq. (7.5). At this point in a numerical 
calculation, we must check to see whether the closed-loop system is stable, using, for 
example, the Routh-Hurwitz criterion. For now, though, assume that the closed-loop 
system is stable and substitute Eq. (7.10) into Eq. (7.5), obtaining 
e(oo) = lim sR(s) 
S-M 1 + G(s) 
(7.11) 
Equation (7.11) allows us to calculate the steady-state error, ¢(00), given the 
input, R(s), and the system, G(s). We now substitute several inputs for R(s) and then 

346 
Chapter 7 
Steady-State Errors 
draw conclusions about the relationships that exist between the open-loop system, 
G(s), and the nature of the steady-state error, e(oo). 
The three test signals we use to establish specifications for a control system's 
steady-state error characteristics are shown in Table 7.1. Let us take each input and 
evaluate its effect on the steady-state error by using Eq. (7.11). 
Step Input. Using Eq. (7.11) with R(s) = 1/s, we find 
m 
e(oo) = estep(oo) = fog 1 - 
Q^ 
1 + lim G(s) 
(7.12) 
The term 
lim G(s) 
$-,0 
is the dc gain of the forward transfer function, since s, the frequency variable, is 
approaching zero. In order to have zero steady-state error, 
lim G{s) = oo 
Hence, to satisfy Eq. (7.13), G(s) must take on the following form: 
' 
sn{s+Pi){s + p2)---
(7.13) 
(7.14) 
and for the limit to be infinite, the denominator must be equal to zero as s goes to 
zero. Thus, n > 1; that is, at least one pole must be at the origin. Since division by s in 
the frequency domain is integration in the time domain (see Table 2.2, Item 10), we 
are also saying that at least one pure integration must be present in the forward path. 
The steady-state response for this case of zero steady-state error is similar to that 
shown in Figure 7.2(a), output 1. 
If there are no integrations, then n = 0. Using Eq. (7.14), we have 
r 
~. , 
ZiZ2" 
(7.15) 
which is finite and yields a finite error from Eq. (7.12). Figure 7.2(a), output 2, is an 
example of this case of finite steady-state error. 
In summary, for a step input to a unity feedback system, the steady-state error 
will be zero if there is at least one pure integration in the forward path. If there are no 
integrations, then there will be a nonzero finite error. This result is comparable to our 
qualitative discussion in Section 7.1, where we found that a pure gain yields a 
constant steady-state error for a step input, but an integrator yields zero error for the 
same type of input. We now repeat the development for a ramp input. 
Ramp Input. Using Eq. (7.11) with, R(s) = 1/s2, we obtain 
e(co) = eramp(oo) = lim <vfl _« 
\ 
lim-
1 
*-o 1 + G(s) 
s-o s + sG(s) 
lim sG(s) 
(7.16) 

7.2 Steady-State Error for Unity Feedback Systems 
347 
To have zero steady-state error for a ramp input, we must have 
limsG(.s') = oo 
s-»0 
(7.17) 
To satisfy Eq. (7.17), G(s) must take the same form as Eq. (7.14), except that n > 2. In 
other words, there must be at least two integrations in the forward path. An example of 
zero steady-state error for a ramp input is shown in Figure 7.2(b), output 1. 
If only one integration exists in the forward path, then, assuming Eq. (7.14), 
lim sG(s) = 
* - o 
pxp2 
• • • 
(7.18) 
which is finite rather than infinite. Using Eq. (7.16), we find that this configuration 
leads to a constant error, as shown in Figure 7.2(b), output 2. 
If there are no integrations in the forward path, then 
limsG(j) = 0 
s-»0 
(7.19) 
and the steady-state error would be infinite and lead to diverging ramps, as shown in 
Figure 7.2(b), output 3. Finally, we repeat the development for a parabolic input. 
Parabolic Input. Using Eq. (7.11) with R(s) = 1/s3, we obtain 
s(l/s3) 
e(oo) = eParaboia(oo) = lim . 
_,\ - lim 
5-o 1 + G(s) 
?-*o s2 + s2G(s) 
lim s2G(s) 
(7.20) 
In order to have zero steady-state error for a parabolic input, we must have 
\ims2G(s) = oc 
(7.21) 
To satisfy Eq. (7.21), G(s) must take on the same form as Eq. (7.14), except that 
n > 3. In other words, there must be at least three integrations in the forward path. 
If there are only two integrations in the forward path, then 
l i m ? G ( s ) = ^ ^ 
s-,0 
pxp2 
• • • 
(7.22) 
is finite rather than infinite. Using Eq. (7.20), we find that this configuration leads to 
a constant error. 
If there is only one or less integration in the forward path, then 
hms2G(s) = 0 
5-0 
(7.23) 
and the steady-state error is infinite. Two examples demonstrate these concepts. 
Example 7.2 
Steady-State Errors for Systems with No Integrations 
PROBLEM: Find the steady-state errors for inputs of 5u(t), 5tu(t), and 5^(0 to the 
system shown in Figure 7.5. The function u(t) is the unit step. 

348 
Chapter 7 
Steady-State Errors 
R(s) 
?)Eis)» 
120(5 + 2) 
(5 + 3)(5+4) 
cm 
SOLUTION: First we verify that the closed-loop system is indeed 
stable. For this example we leave out the details. Next, for the input 
5u(t), whose Laplace transform is 5/s, the steady-state error will be 
five times as large as that given by Eq. (7.12), or 
FIGURE 7.5 
Example 7. 
Feedback control system for 
e(oo) = esteP(oo) 
1 + lim G(s) 
1 + 20 
5_ 
21 
(7.24) 
which implies a response similar to output 2 of Figure 7.2(a). 
For the input 5tu(t), whose Laplace transform is 5/s2, the steady-state error 
will be five times as large as that given by Eq. (7.16), or 
e(oo) = eramP(oo) = -. 
lim sG(s' 
o 
v ' 
= - = 00 
(7.25) 
which implies a response similar to output 3 of Figure 1.2(b). 
For the input 5?"u(i), whose Laplace transform is 10/s3, the steady-state error 
will be 10 times as large as that given by Eq. (7.20), or 
10 
e(oo) = Cparabola(oo) = ^
£
Q
? 
10 
(7.26) 
Example 7.3 
Steady-State Errors for Systems with One Integration 
R(s) 
*$ 
>*w, 
9 
100(5 + 2)(5 + 6) 
5(5 + 3)(5 + 4) 
C(s) 
FIGURE 7.6 Feedback control system for Example 7.3 
PROBLEM: Find the steady-state errors for inputs of 5u(t), 
5tu(t), and 5f~u{t) to the system shown in Figure 7.6. The 
function u(t) is the unit step. 
SOLUTION: First verify that the closed-loop system is in-
deed stable. For this example we leave out the details. Next 
note that since there is an integration in the forward path, the 
steady-state errors for some of the input waveforms will be 
less than those found in Example 7.2. For the input 5u(t), whose Laplace transform is 
5/s, the steady-state error will be five times as large as that given by Eq. (7.12), or 
e(oo) = <?steP(oo) = —————- = - = 0 
F 
1 + hm G(s) 
oo 
(7.27) 
which implies a response similar to output 1 of Figure 7.2(a). Notice that the 
integration in the forward path yields zero error for a step input, rather than the 
finite error found in Example 7.2. 
For the input 5tu{t), whose Laplace transform is 5/s2, the steady-state error 
will be five times as large as that given by Eq. (7.16), or 
e(oo) = Cramp (oo) = lim sG(s) 
5-.0 
v ' 
5 
100 
20 
(7.28) 

7.3 Static Error Constants and System Type 
349 
which implies a response similar to output 2 of Figure 72(b). Notice that the 
integration in the forward path yields a finite error for a ramp input, rather than 
the infinite error found in Example 7.2. 
For the input, 5 ^ ( 0 , whose Laplace transform is 10/s3, the steady-state error 
will be 10 times as large as that given by Eq. (7.20), or 
e(oo) = eparabola(oo) 
10 
10 
lim 52 G(s) = — = oc 
0 
(7.29) 
Notice that the integration in the forward path does not yield any improvement in 
steady-state error over that found in Example 7.2 for a parabolic input. 
Skill-Assessment Exercise 7.1 
PROBLEM: A unity feedback system has the following forward transfer function: 
10(5 + 20)(5 + 30) 
G(s) = 5(5 + 25)(5 + 35) 
a. Find the steady-state error for the following inputs: 15«(r), 15tu(t), and 15t*u(t). 
b. Repeat for 
10(5 + 20)(5 + 30) 
G(s) = 52(5+ 25)(5+ 35)(5+ 50) 
ANSWERS: 
a. The closed-loop system is stable. For 15u(t), estep(oc) = 0; for 15tu(t), 
eramp(oo) = 2.1875; for \S{f-)u{t), eparaboia(oo) = oo. 
b. The closed-loop system is unstable. Calculations cannot be made. 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
( 
7.3 Static Error Constants and 
System Type 
We continue our focus on unity negative feedback systems and define parameters 
that we can use as steady-state error performance specifications, just as we defined 
damping ratio, natural frequency, settling time, percent overshoot, and so on as 
performance specifications for the transient response. These steady-state error 
performance specifications are called static error constants. Let us see how they 
are defined, how to calculate them, and, in the next section, how to use them for 
design. 

350 
Chapter 7 
Steady-State Errors 
Static Error Constants 
In the previous section we derived the following relationships for steady-state error. 
For a step input, u(t), 
e(oo)=e s t e p (00) = -- + 1. m 
5 - 0 G(s) 
(7.30) 
For a ramp input, tu(t), 
(7.31) 
1 » 
For a parabolic input, 
-ru(t). 
e(oo) = eparaboia(oo) = TT 
-parabola^; - l i m ^ G 
s-0 
v ' 
(7.32) 
The three terms in the denominator that are taken to the limit determine the 
steady-state error. We call these limits static error constants. Individually, their names 
are 
position constant, Kp, where 
Kp = lim G(s) 
velocity constant, Kv, where 
Kv = lim sG(s) 
acceleration constant, Ka where 
Ka = lim s2G(s) 
(7.33) 
(7.34) 
(7.35) 
As we have seen, these quantities, depending upon the form of G(s), can 
assume values of zero, finite constant, or infinity. Since the static error constant 
appears in the denominator of the steady-state error. Eqs. (7.30) through (7.32), the 
value of the steady-state error decreases as the static error constant increases. 
In Section 7.2, we evaluated the steady-state error by using the final value 
theorem. An alternate method makes use of the static error constants. A few 
examples follow. 
Example 7.4 
Steady-State Error via Static Error Constants 
PROBLEM: For each system of Figure 7.7, evaluate the static error constants and 
find the expected error for the standard step, ramp, and parabolic inputs. 

7.3 Static Error Constants and System Type 
351 
*(*) + / 0 \ E{s) 
500(5 + 2)(5 + 5) 
(s + 8)(s + 10)(.s + 12) 
(a) 
(b) 
C{s) 
R(s)+K 
—i 
y,Ejs)m 
500(5 + 2)(5 + 5)(5 + 6) 
5(5 + 8)(5+10)(5+12) 
C(s) 
R(s)+K 
-
> m^ 500(5 + 2)(5 + 4)(5 + 5)(5 + 6)(5 + 7) 
52(5 + 8)(5 + 10)(5 + 12) 
C(s) 
(c) 
FIGURE 7.7 
Feedback control systems for Example 7.4 
SOLUTION: First verify that all closed-loop systems shown are indeed stable. For 
this example we leave out the details. Next, for Figure 7.7(a), 
Kp = lim G(s) = 
5->0 
500 x 2 x 5 
8 x 10 x 12 = 5.208 
(7.36) 
Thus, for a step input, 
For a ramp input, 
For a parabolic input, 
Kv = \imsG(s) = 0 
5-»0 
Ka = \ims2G(s) = 0 
s—*Q 
e oo = 1+& 
= 0.161 
e(oo) = — = oo 
(7.37) 
(7.38) 
(7.39) 
(7.40) 
Now, for Figure 7.7(b), 
e(°°) = £~ = °° 
K„ = lim G(s) — oo 
s—»0 
,. 
^ , , 
5 0 0 x 2 x 5 x 6 
_ „.w 
&v = hmsGls) = —^—77^—:-— = 31.25 
5-0 
w 
8 x 10 x 12 
(7.41) 
(7.42) 
(7.43) 

352 
Chapter 7 
Steady-State Errors 
and 
Thus, for a step input, 
For a ramp input, 
For a parabolic input, 
K 
Finally, for Figure 7.7(c), 
Ka = \ims2G(s)=0 
(7.44) 
s—<0 
e(oo) = TTKp° 
(7l45) 
^-S-ffiHf- 1" 8 2 
(746) 
e(oo) = —- = oo 
(7.47) 
and 
Kp = lim G(s) = oo 
(7.48) 
Kv = \imsG(s) = oo 
(7.49) 
s-»0 
,. 
9~,x 
500 x 2 x 4 x 5 x 6 x 7 
„„„ 
„ MV 
*• = W G M = 
^ j ^ ^ 
= 875 
(7.50) 
Thus, for a step input, 
For a ramp input, 
For a parabolic input, 
e{oo) = iTT = 0 
(7,51) 
«(OD) = ^ - = 0 
(7.52) 
e ( 0 0 ) = ^ = 8 ^ = 1 - 1 4 x i r 3 
( ?- 5 3 ) 
MATLAB 
Students who are using MATLAB should now run ch7pl in Appendix B. 
^ 
You will learn how to test the system for stability, evaluate 
static error constants, and calculate steady-state error using 
MATLAB. This exercise applies MATLAB to solve Example 7.4 with 
System (b). 
System Type 
Let us continue to focus on a unity negative feedback system. The values of the static 
error constants, again, depend upon the form of G(s), especially the number of pure 
integrations in the forward path. Since steady-state errors are dependent upon the 

7.4 Steady-State Error Specifications 
353 
number of integrations in the forward path, we give a name to this 
R(S) + s~>.E(s) 
system attribute. Given the system in Figure 7.8, we define system 
type to be the value of n in the denominator or, equivalently, the 
number of pure integrations in the forward path. Therefore, a 
system with n = 0 is a Type 0 system. If n = 1 or n = 2, the 
corresponding system is a Type 1 or Type 2 system, respectively. 
Table 7.2 ties together the concepts of steady-state error, 
static error constants, and system type. The table shows the static error constants and 
the steady-state errors as functions of input waveform and system type. 
TABLE 7.2 Relationships between input, system type, static error constants, and steady-state errors 
K(s+zx)(s + z2) 
s"(s+P])(s-i-p2) 
C(s) 
FIGURE 7.8 Feedback control system for 
defining system type 
TypeO 
Typel 
Type 2 
Input 
Steady-state 
error formula 
Static error 
constant 
Error 
Static error 
constant 
Error 
Static error 
constant 
Error 
Step, u(t) 
Ramp, tu(t) 
Parabola, -z?u{t) 
1 
1+KP 
J_ 
Kv 
Kp = Constant 
-—— 
1 + K„ 
Kp = co 
Kv = 0 
Ka=0 
co 
Kv = Constant 
co 
Ka = 0 
1 
Kp = co 
Kv = co 
Ka = Constant 
0 
J_ 
Ka 
Skill-Assessment Exercise 7.2 
PROBLEM: A unity feedback system has the following forward transfer function: 
1000(, + 8) 
***' 
(, + 7)(5 + 9) 
a. Evaluate system type, Kp, Kv, and Ka. 
b. Use your answers to a. to find the steady-state errors for the standard step, 
ramp, and parabolic inputs. 
ANSWERS: 
a. The closed-loop system is stable. System type = Type 0. Kp = 127, Kv = 0, 
and Ka = 0. 
b. estep(oo) = 7.8 x 10"~3,eramp(oo) = co, and eparaboia(oo) = co 
The complete solution is at www.wiley.com/college/nise. 
Trylt7.1 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to find Kp, 
eslep(oo), and the closed-loop 
poles to check for stability for 
the system of Skill-Assessment 
Exercise 7.2. 
numg=1000*[l 8]; 
deng=poly([-7 -9]); 
G=tf (numg, deng); 
Kp=dcgain(G) 
estep=l/(l+Kp) 
T=feedback(G,l); 
poles=pole(T) 
In this section, we defined steady-state errors, static error constants, and system 
type. Now the specifications for a control system's steady-state errors will be 
formulated, followed by some examples. 
^ 7.4 Steady-State Error Specifications 
Static error constants can be used to specify the steady-state error characteristics of 
control systems, such as that shown in Figure 7.9. Just as damping ratio, f, settling 
time, Ts, peak time, Tp, and percent overshoot, % OS, are used as specifications for a 

354 
Chapter 7 
Steady-State Errors 
FIGURE 7.9 A robot used in the 
manufacturing of semiconductor 
random-access memories 
(RAMs) similar to those in 
personal computers. Steady-state 
error is an important design 
consideration for assembly-line 
robots. 
control system's transient response, so the position constant, Kp, velocity constant, 
Kv, and acceleration constant, Ka, can be used as specifications for a control system's 
steady-state errors. We will soon see that a wealth of information is contained within 
the specification of a static error constant. 
For example, if a control system has the specification Kv = 1000, we can draw 
several conclusions: 
1. The system is stable. 
2. The system is of Type 1, since only Type 1 systems have Kv's that are finite constants. 
Recall that Kv = 0 for Type 0 systems, whereas Kv = oc for Type 2 systems. 
3. A ramp input is the test signal. Since Kv is specified as a finite constant, and the 
steady-state error for a ramp input is inversely proportional to Kv, we know the 
test input is a ramp. 
4. The steady-state error between the input ramp and the output ramp is \/Kv per 
unit of input slope. 
Let us look at two examples that demonstrate analysis and design using static 
error constants. 
Example 7.5 
Interpreting the Steady-State Error Specification 
PROBLEM: What information is contained in the specification Kp = 1000? 
SOLUTION: The system is stable. The system is Type 0, since only a Type 0 system 
has a finite Kp. Type 1 and Type 2 systems have Kp = oo. The input test signal is a 
step, since Kp is specified. Finally, the error per unit step is 
e(oo) = iTx: = rTlooo = iom 
(7-54) 

7.4 Steady-State Error Specifications 
355 
Example 7.6 
Gain Design to Meet a Steady-State Error Specification 
PROBLEM: Given the control system in Figure 7.10, find the 
value of K so that there is 10% error in the steady state. 
SOLUTION: Since the system is Type 1, the error stated in the 
problem must apply to a ramp input; only a ramp yields a finite 
error in a Type 1 system. Thus, 
R(s) + / 0 \ £ W 
< 
— 
K(s + 5) 
s(s + 6)(s + 7)(5 + 8) 
C(s) 
Therefore, 
which yields 
e(oc) = iT = a i 
Kv = 10i = l\msG{s) = 
,K*5 
*-o 
w 
6 x 7 x 
FIGURE 7.10 
Feedback control system for 
Example 7.6 
(7.55) 
(7.56) 
# = 672 
(7.57) 
Applying the Routh-Hurwitz criterion, we see that the system is stable at this gain. 
Although this gain meets the criteria for steady-state error and stability, it 
may not yield a desirable transient response. In Chapter 9 we will design feedback 
control systems to meet all three specifications. 
Students who are using MATLAB should now run ch7 p2 in Appendix B. 
You will learn how to find the gain to meet a steady-state error 
specification using MATLAB. This exercise solves Example 7.6 
using MATLAB. 
MATLAB 
Skill-Assessment Exercise 7.3 
PROBLEM: A unity feedback system has the following forward 
transfer function: 
G(s) = 
K(s + 12) 
WileyPLUS 
Control Solutions 
(5 + 14)(5 + 18) 
Find the value of K to yield a 10% error in the steady state. 
ANSWER: K = 189 
The complete solution is at www.wiley.com/college/nise. 
Trylt 7.2 
Use MATLAB, the Control 
System Toolbox, and the 
following statements to solve 
Skill-Assessment Exercise 7.3 
and check the resulting 
system for stability. 
numg=[l 12]; 
deng=poly([-14 -18]); 
G=tf (numg, deng); 
Kpdk=dcgain(G); 
e s t e p = 0 . 1 ; 
K= (l/estep-l)/Kpdk 
T=feedback(G,l); 
poles=pole(T) 

356 
Chapter 7 
Steady-State Errors 
This example and exercise complete our discussion of unity feedback systems. In 
the remaining sections, we will deal with the steady-state errors for disturbances and 
the steady-state errors for feedback control systems in which the feedback is not unity. 
( 7.5 Steady-State Error for Disturbances 
D(s) 
m +, V(5). 
Controller 
GM - * $ -
Plant 
G2(s) 
C(s) 
Feedback control systems are used to compensate for disturbances or unwanted 
inputs that enter a system. The advantage of using feedback is that regardless of 
these disturbances, the system can be designed to follow the input with small or zero 
error, as we now demonstrate. Figure 7.11 shows a feedback 
control system with a disturbance, D(s), injected between the 
controller and the plant. We now re-derive the expression for 
steady-state error with the disturbance included. 
The transform of the output is given by 
FIGURE 7.11 
Feedback control system showing 
disturbance 
But 
C(s) = E(s)Gi(s)G2(s) + D{s)G2(s) 
C{s) = R(s) - E(s) 
Substituting Eq. (7.59) into Eq. (7.58) and solving for E(s), we obtain 
1 
_ 
G2{s) 
E(s) = l + G1{s)G2{s, -R(s) - 1+(¾ (*)<%(*; 
•D(s) 
(7.58) 
(7.59) 
(7.60) 
where we can think of 1/[1 + Gi(s)G2(s)] as a transfer function relating E(s) to R(s) 
and — Gi(s)/[1 + Gi(s)G2(s)} as a transfer function relating E(s) to D(s). 
To find the steady-state value of the error, we apply the final value theorem3 to 
Eq. (7.60) and obtain 
e(oo) = lims£(s) = l i m - — ^ , , ^ . , 
* ' 
5-o 
w 
s-»ol + Gi(s)G2(s) 
= eR(oo) +e£»(oo) 
R(s) - lim 
sG2(s) 
s-,ol + G1{s)G2(s) D(s) 
(7.61) 
where 
and 
e*(co) = 
ez>(co) = 
j
1 
= lim -—-,..^., 
R(s) 
s-+ol + Gi(s)G2{s) 
w 
sG2{s) 
The first term, e^?(oo), is the steady-state error due to R(s), which we have already 
obtained. The second term, e/j(oo), is the steady-state error due to the disturbance. 
Let us explore the conditions on ep (oo) that must exist to reduce the error due to the 
disturbance. 
At this point, we must make some assumptions about D(s), the controller, and 
the plant. First we assume a step disturbance, D(s) = 1/s. Substituting this value into 
3 Remember that the final value theorem can be applied only if the system is stable, with the roots of 
[1 + G\(s)G2{s)\ in the left-half-plane. 

7.5 Steady-State Error for Disturbances 
357 
the second term of Eq. (7.61), eo(oo), the steady-state error component due to a step 
disturbance is found to be 
eo(oo) = 
1 
lim — 
+ lim G\ (s) 
(7.62) 
This equation shows that the steady-state error produced by a step disturbance can 
be reduced by increasing the dc gain of Gi(s) or decreasing the dc gain of G2(s). 
This concept is shown in Figure 7.12, where the system of Figure 7.11 has 
been rearranged so that the disturbance, D(s), is depicted as the input and the 
error, E(s), as the output, with R(s) set equal to zero. If we want to minimize the 
steady-state value of E(s), shown as the output in Figure 7.12, we must either 
increase the dc gain of G\(s) so that a lower value of E(s) will be fed back to 
match the steady-state value of D(s), or decrease the dc value of G2(s), which 
then yields a smaller value of e(oo) as predicted by the feedback formula. 
Let us look at an example and calculate the numerical value of the 
steady-state error that results from a disturbance. 
D(.v) 
-•. 
Plant 
G2(s) 
G,W 
-E(s)^ 
•a 
Controller 
FIGURE 7.12 Figure 7.11 system 
rearranged to show disturbance as 
input and error as output, with 
R(s) = 0 
Example 7.7 
Steady-State Error Due to Step Disturbance 
PROBLEM: Find the steady-state error component due to a step disturbance for 
the system of Figure 7.13. 
R(s) 
+ * > * » . 
-
mm 
Controller 
1000 
DM 
-
%
-
G2(s) 
Plant 
1 
s{s + 25) 
m 
FIGURE 7.13 Feedback control system for Example 7.7 
SOLUTION: The system is stable. Using Figure 7.12 and Eq. (7.62), we find 
^D(OO) = 
lim 
1 
- 
, limGi(s) 
0 G2{S) 
.y-,0 
0 + 1000 
1000 
(7.63) 
The result shows that the steady-state error produced by the step disturbance is 
inversely proportional to the dc gain of Gi (•$•). The dc gain of G2(s) is infinite in this 
example. 
Virtual Experiment 7.1 
Steady-State Error 
Put theory into practice finding 
the steady-state error of the 
Quanser Rotary Servo when 
subject to an input or a 
disturbance by simulating it 
in LabVIEW. This analysis 
becomes important when 
developing controllers for 
bottle labelling machines 
or robot joint control. 
Virtual experiments are found 
on WileyPLUS. 
Skill-Assessment Exercise 7.4 
PROBLEM: Evaluate the steady-state error component due to a step disturbance 
for the system of Figure 7.14. 

358 
Chapter 7 
Steady-State Errors 
D(s) 
- . 
i 
1000 
I19\ 
*yy 
5 + 2 
5 + 4 
C(i) 
FIGURE 7.14 System for Skill-Assessment Exercise 7.4 
ANSWER: eD(oo) = -9.98 x 10"4 
The complete solution is at www.wiley.com/college/nise. 
( 7.6 Steady-State Error for Nonunity Feedback Systems 
Control systems often do not have unity feedback because of the compensation used to 
improve performance or because of the physical model for the system. The feedback 
path can be a pure gain other than unity or have some dynamic representation. 
A general feedback system, showing the input transducer, G\(s), controller and 
plant, G2(s), andfeedback, Hi(s), is shown in Figure 7.15(a). Pushing the input transducer 
m 
G,ts) 
+ / 0 , £„,(*) 
G2(s) 
C(s) 
H,(s) 
R(s) +,o,£„(.v) 
G(s) 
//(.*) 
C(s) 
R(s) + x 
x — — — • • 
G(s) 
H(s) 
-1 
m 
ifi) 
R{s) +x-x£n(.v) 
FIGURE 7.15 Forming an 
equivalent unity feedback 
system from a general nonunity 
feedback system 
G(5) 
H(s) - I 
m 
C(s) 
R(s) 
E(s) 
-
G(s) 
1 + G(.v)//(i) - G(s) 
(el 
C(s) 

7.6 Steady-State Error for Nonunity Feedback Systems 
359 
to the right past the summing junction yields the general nonunity feedback system 
shown in Figure 7.15(5), where G(s) = G] {s)G2{s) 
and 
H(s) = H^/G^ 
(s). No-
tice that unlike a unity feedback system, where H(s) = 1, the error is not the difference 
between the input and the output. For this case we call the signal at the output of the 
summing junction the actuating signal, Ea(s). If r(t) and c(t) have the same units, we can 
find the steady-state error, e(oo) = r(oo) — c(oo). The first step is to show explicitly 
E{s) = R(s) — C(s) on the block diagram. 
Take the nonunity feedback control system shown in Figure 7.15(5) and form a 
unity feedback system by adding and subtracting unity feedback paths, as shown in 
Figure 7.15(c). This step requires that input and output units be the same. Next 
combine H(s) with the negative unity feedback, as shown in Figure 7.15(d). Finally, 
combine the feedback system consisting of G(s) and [H(s) - 1], leaving an equiv-
alent forward path and a unity feedback, as shown in Figure 7.15(e). Notice that the 
final figure shows E(s) = R(s) - C(s) explicitly. 
The following example summarizes the concepts of steady-state error, system 
type, and static error constants for nonunity feedback systems. 
Example 7.8 
Steady-State Error for Nonunity Feedback Systems 
PROBLEM: For the system shown in Figure 7.16, find the system type, 
the appropriate error constant associated with the system type, and 
the steady-state error for a unit step input. Assume input and output 
units are the same. 
R(s) +i 
Ea{s)i 
100 
s(s + 10) 
C(s) 
SOLUTION: After determining that the system is indeed stable, one 
may impulsively declare the system to be Type 1. This may not be the 
case, since there is a nonunity feedback element, and the plant's 
actuating signal is not the difference between the input and the output. 
The first step in solving the problem is to convert the system of Figure 7.16 into an 
equivalent unity feedback system. Using the equivalent forward transfer function of 
Figure 7.15(c) along with 
(* + 5) 
FIGURE 7.16 Nonunity feedback control 
system for Example 7.8 
G(s) = 
100 
s{s + 10) 
and 
we find 
ffW = (s + 5) 
Ge(s) = 
G(s) 
100(.5 + 5) 
1 + G(s)H{s) - G{s) 
s3 + 15s2 - 50s - 400 
(7.64) 
(7.65) 
(7.66) 
Thus, the system is Type 0, since there are no pure integrations in Eq. (7.66). The 
appropriate static error constant is then Kp, whose value is 
Trylt 7.3 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to find 
Ge(s) in Example 7.8. 
G=zpk([],[0 -10], 100); 
H=zpk([],-5,1); 
Ge=feedback... 
(G,(H-1)); 
'Ge(s)1 
Ge=tf(Ge) 
T=feedback (Ge,l); 
'Poles of T(s)' 
pole(T) 
Kp=]imGe{s) 
= 100 x 5 
-400 
(7.67) 

360 
Chapter 7 
Steady-State Errors 
The steady-state error, e(oo), is 
e(oo) = 
1 
1 
l + Kp 
1-(5/4) = - 4 
(7.68) 
The negative value for steady-state error implies that the output step is larger 
than the input step. 
^ ( g K 
Gi(s) 
H(s) 
G2(5) 
C(s) 
To continue our discussion of steady-state error for systems with 
nonunity feedback, let us look at the general system of Figure 7.17, 
which has both a disturbance and nonunity feedback. We will derive a 
general equation for the steady-state error and then determine the 
parameters of the system in order to drive the error to zero for step 
inputs and step disturbances.4 
The steady-state error for this system, e(oo) = r(oo) — c(oo), is 
FIGURE 7.17 Nonunity feedback control system 
with disturbance 
e(oo) = HmsMCs) = lims< 
S->0 
5-»0 
G1(s)G2(s) 
l + Gi(s)G2(s)ff(s). 
G2(s) 
m 
1 + 
G1(s)G2(s)H(s) D(s) 
(7.69) 
Now limiting the discussion to step inputs and step disturbances, where 
R(s) = D(s) = 1/s, Eq. (7.69) becomes 
e(oo) = lim $£(.$) = 
s—»0 
1 -
Um[Gi(5)G2(5)] 
s—»0 
lim[l + Gi(s)G2(s)tf(s)] 
5—»0 
lim G2(s) 
s—»0 
jMa[l + Gi(s)G2{s)H{s)] 
(7.70) 
For zero error, 
g3[Gifr)(%W] 
= 1 and 
lim Gz(5) 
s—>Q 
lim[l + d(s)G2{s)H^)] 
* "" 
lim[l + G{(s)G2{s)H{s} = 0 
(7-71! 
The two equations in Eq. (7.71) can always be satisfied if (1) the system is stable, (2) 
Gi(s) is a Type 1 system, (3) G2(s) is a Type 0 system, and (4) H(s) is a Type 0 system 
with a dc gain of unity. 
To conclude this section, we discuss finding the steady-state value of the actuating 
signal, Eai(s), in Figure 7.15(a). For this task there is no restriction that the input and 
output units be the same, since we are finding the steady-state difference between 
signals at the summing junction, which do have the same units.5 The steady-state 
4 Details of the derivation are included as a problem at the end of this chapter. 
5 For clarity, steady-state error is the steady-state difference between the input and the output. Steady-
state actuating signal is the steady-state difference at the output of the summing junction. In questions 
asking for steady-state error in problems, examples, and skill-assessment exercises, it will be assumed that 
input and output units are the same. 

7.6 Steady-State Error for Nonunity Feedback Systems 
actuating signal for Figure 7.15(a) is 
€ai(oo) = lim: 
sR(s)Gi{s) 
(7.72) 
+o 1 + G2 (5)//1 (J) 
The derivation is left to the student in the problem set at the end of this chapter. 
361 
Example 7.9 
Steady-State Actuating Signal for Nonunity Feedback Systems 
PROBLEM: Find the steady-state actuating signal for the system of Figure 7.16 for a 
unit step input. Repeat for a unit ramp input. 
SOLUTION: Use Eq. (7.72) with R(s) = l/s, 
a unit step input, (?i(s) = l, 
G2{s) = 100/(5(5 + 10)], and #1(5) = 1/(5 + 5). Also, realize that eai(co) = e„(oo), 
since G\(s) = l.Thus, 
ea(oo) = lim 
, 
.„,>*{ , 
.—r- = 0 
s-»0 1 + 
100 
5(5+io);vc*+5) 
1 
(7.73) 
Now use Eq. (7.72) with R(s) = 1/s , a unit ramp input, and obtain 
ea(oo) = lim 
s—>0 
5 -r 
1 + 
100 
s(s + 10)/ V(5 + 5) 
(7.74) 
( 
[ Skill-Assessment Exercise 7.5 
) 
PROBLEM: 
a. Find the steady-state error, e(oo) = r(oo) - c(co), for a unit step in 
the nonunity feedback system of Figure 7.18. Repeat for a unit rai 
Assume input and output units are the same. 
b. Find the steady-state actuating signal, e„(oo), for a unit step input 
given the nonunity feedback system of Figure 7.18. Repeat for a 
unit ramp input. 
ANSWERS: 
a. e?sieP(oo) = 3.846 x 10 - 2;e r a m p(oo) = oo 
b. For a unit step input, efl(oo) = 3.846 x 10~2; for a unit ramp input, 
e#{o&) — oo 
The complete solution is at www.wiley.com/college/nise. 
put given 
np input. 
FIGURE 7 
forSkill-
7s W , 
y 
.18 Noi 
Assessnu 
100 
5 + 4 
1 
#+1 
mnity fe 
;nt Exerc 
WileyPLUS 
Control Solutions 
m 
^dback 
ise 7.5 
system 
In this section, we have applied steady-state error analysis to nonunity feed-
back systems. When nonunity feedback is present, the plant's actuating signal is not 

Chapter 7 
Steady-State Errors 
the actual error or difference between the input and the output. With nonunity 
feedback we may choose to (1) find the steady-state error for systems where the 
input and output units are the same or (2) find the steady-state actuating signal. 
We also derived a general expression for the steady-state error of a nonunity 
feedback system with a disturbance. We used this equation to determine the attributes 
of the subsystems so that there was zero error for step inputs and step disturbances. 
Before concluding this chapter, we will discuss a topic that is not only significant for 
steady-state errors but generally useful throughout the control systems design process. 
f 7.7 Sensitivity 
During the design process, the engineer may want to consider the extent to which 
changes in system parameters affect the behavior of a system. Ideally, parameter 
changes due to heat or other causes should not appreciably affect a system's perform-
ance. The degree to which changes in system parameters affect system transfer 
functions, and hence performance, is called sensitivity. A system with zero sensitivity 
(that is, changes in the system parameters have no effect on the transfer function) is 
ideal. The greater the sensitivity, the less desirable the effect of a parameter change. 
For example, assume the function F = K/(K + a). If K = 10 and a = 100, then 
F = 0.091. If parameter a triples to 300, then F = 0.032. We see that a fractional change 
in parameter a of (300 — 100)/100 = 2 (a 200% change), yields a change in the function 
Fof (0.032 - 0.091)/0.091 = -0.65 (-65% change). Thus, the function P has reduced 
sensitivity to changes in parameters. As we proceed, we will see that another advantage 
of feedback is that in general it affords reduced sensitivity to parameter changes. 
Based upon the previous discussion, let us formalize a definition of sensitivity: 
Sensitivity is the ratio of the fractional change in the function to the fractional change 
in the parameter as the fractional change of the parameter approaches zero. That is, 
Sp:p — Hm Fractional change in the function, F 
ATQ) Fractional change in the parameter, P 
AP/P 
— lim . 
AP^oAP/P 
., 
PAP 
= hm —— 
A/>^0 PAP 
which reduces to 
SFP = -= 
P8F 
FSP 
(7.75) 
Let us now apply the definition, first to a closed-loop transfer function and then 
to the steady-state error. 
m +/C \E(s) 
K 
s(s + a) 
C(s)t 
FIGURE 7.19 Feedback control 
system for Examples 7.10 and 7.11 
Example 7.10 
Sensitivity of a Closed-Loop Transfer Function 
PROBLEM: Given the system of Figure 7.19, calculate the sensitivity of 
the closed-loop transfer function to changes in the parameter a. How 
would you reduce the sensitivity? 

7.7 Sensitivity 
363 
SOLUTION: The closed-loop transfer function is 
T(s) = 
K 
s2 +as + K 
Using Eq. (7.75), the sensitivity is given by 
-Ks 
—as 
K 
s2 +as + K 
{s2 + as + K)2l 
s2 + as + K 
(7.76) 
(7.77) 
which is, in part, a function of the value of s. For any value of s, however, an increase 
in K reduces the sensitivity of the closed-loop transfer function to changes in the 
parameter a. 
Example 7.11 
Sensitivity of Steady-State Error with Ramp Input 
PROBLEM: For the system of Figure 7.19, find the sensitivity of the steady-state 
error to changes in parameter K and parameter a with ramp inputs. 
SOLUTION: The steady-state error for the system is 
l
a 
e{oo)=Yv = K 
The sensitivity of e(oc) to changes in parameter a is 
_a_8e__ 
= 1 
eSa 
a/K 
K 
The sensitivity of e(oo) to changes in parameter K is 
K 
e'K 
e SK 
a/K 
—a 
K2 
= - 1 
(7.78) 
(7.79) 
(7.80) 
Thus, changes in either parameter a or parameter K are directly reflected in e(oo), 
and there is no reduction or increase in sensitivity. The negative sign in Eq. (7.80) 
indicates a decrease in e(oo) for an increase in K. Both of these results could have 
been obtained directly from Eq. (7.78) since e(oo) is directly proportional to 
parameter a and inversely proportional to parameter K. 
Example 7.12 
Sensitivity of Steady-State Error with Step Input 
PROBLEM: Find the sensitivity of the steady-state error to changes in parameter K 
and parameter a for the system shown in Figure 7.20 with a step input. 

364 
Chapter 7 
Steady-State Errors 
R(s) + 
E(s) 
K 
(s + a)(s + -
C(S) 
SOLUTION: The steady-state error for this Type 0 system is 
1 
1 
e(oo) = 
ab 
FIGURE 7.20 Feedback control system for 
Example 7.12 
1+KP 
1+£ 
ab + K 
ab 
Trylt 7.4 
Use MATLAB, the Symbolic 
Math Toolbox, and the fol-
lowing statements to find Se!a 
in Example 7.12. 
syms K ab s 
G=K/((s+a)*(s+b)); 
Kp=subs (G, s,o); 
e=l/(l+Kp); 
Sea= (a/e)*dif f (e, a); 
Sea=simple (Sea); 
'Sea' 
pretty(Sea) 
The sensitivity of e(oo) to changes in parameter a is 
a 
(ab + K)b - ab2 
K 
_ a Se _ 
*~>e:a — ~ — — 
e 8a 
ab 
(ab + K)' 
Jib + K, 
The sensitivity of e(oo) to changes in parameter K is 
K Se 
K 
-ab 
ab + K 
Spir — ——— = 
-K 
e8K 
ab 
ab + K 
(ab + K)2 
ab + K 
(7.81) 
(7.82) 
(7.83) 
Equations (7.82) and (7.83) show that the sensitivity to changes in parameter K and 
parameter a is less than unity for positive a and b. Thus, feedback in this case yields 
reduced sensitivity to variations in both parameters. 
R(s) + ^ ^ E(s) 
-. 
FIGURE 7 
Exercise 
K(s + 1) 
s2 + 2s+l0 
Skil 
m. 
.21 System for Skill-Asses* 
7.6 
>ment 
l-Assessment Exercise 7.6 ] 
ft 
PROBLEM: Find the sensitivity of the steady-state error to changes in 
K for the system of Figure 7.21. 
ANSWER: * * - 
W+7K 
The complete solution is at www.wiley.com/college/nise. 
In this section, we defined sensitivity and showed that in some cases feedback 
reduces the sensitivity of a system's steady-state error to changes in system parameters. 
The concept of sensitivity can be applied to other measures of control system perform-
ance, as well; it is not limited to the sensitivity of the steady-state error performance. 
( 7.8 Steady-State Error for Systems in State Space 
Up to this point, we have evaluated the steady-state error for systems modeled as 
transfer functions. In this section, we will discuss how to evaluate the steady-state 
error for systems represented in state space. Two methods for calculating the steady-
state error will be covered: (1) analysis via final value theorem and (2) analysis via 
input substitution. We will consider these methods individually. 
Analysis via Final Value Theorem 
A single-input, single-output system represented in state space can be analyzed for 
steady-state error using the final value theorem and the closed-loop transfer 

7.8 Steady-State Error for Systems in State Space 
365 
function, Eq. (3.73), derived in terms of the state-space representation. Consider the 
closed-loop system represented in state space: 
x = Ax + Br 
y = Cx 
The Laplace transform of the error is 
E(s) = R(s) - Y(s) 
But 
Y(s)=R(s)T(s) 
(7.84a) 
(7.84b) 
(7.85) 
(7.86) 
where T(s) is the closed-loop transfer function. Substituting Eq. (7.86) into (7.85), we 
obtain 
E(s)=R(s)[l 
-T(s)} 
Using Eq. (3.73) for T(s), we find 
E(s) = 
R{s)[l-C(sI-A)-lB) 
Applying the final value theorem, we have 
limsE(s) = limsi?(s)[l - C{sl - A)_1B] 
(7.87) 
(7.88) 
(7.89) 
Let us apply the result to an example. 
Example 7.13 
Steady-State Error Using the Final Value Theorem 
PROBLEM: Evaluate the steady-state error for the system described by Eqs. (7.90) 
for unit step and unit ramp inputs. Use the final value theorem. 
A = 
-5 
0 
20 
1 0" 
- 2 
1 
-10 1 
; B = 
0 
0 
1 
C = f - 1 
1 0 
(7.90) 
SOLUTION: Substituting Eqs. (7.90) into (7.89), we obtain 
s + 4 
e(oo) = lim sR(s) 1 — 
5-*0 
Df,fs3 
+ 6s2 
= limsALs) 
-x 
-r^ 
s-*Q 
w \f + 6s2 
sJ + 6s2 + 13^ -
s3 + 6s2 + 12s + 16 
13s + 20 
20 
(7.91) 
For a unit step, R(s) = 1/s, and e(oo) = 4/5. For a unit ramp, R(s) = 1/s2, and 
e(oo) = oo. Notice that the system behaves like a Type 0 system. 
Trylt 7.5 
Use MATLAB, the Symbolic 
Math Toolbox, and the fol-
lowing statements to find the 
steady-state error for a step 
input to the system of 
Example 7.13. 
syms s 
A=[-5 1 0 
0 -2 1 
2 0 - 1 0 1]; 
B=[0;0;1]; 
C=[-l 1 0]; 
I=[l 0 0 
0 
1 0 
0 0 1]; 
E=(l/s)*[l-C* . . . 
[(s*I-A) A-1]*B]; 
%New command: 
%subs(X, o l d , new): 
t-Replace o l d i n . . . 
%X(old) with new. 
e r r o r = s u b s ( s * E , s , 0 ) 

366 
Chapter 7 
Steady-State Errors 
Analysis via Input Substitution 
Another method for steady-state analysis avoids taking the inverse of {si — A) and 
can be expanded to multiple-input, multiple-output systems; it substitutes the input 
along with an assumed solution into the state equations (Hostetter, 1989). We will 
derive the results for unit step and unit ramp inputs. 
Step Inputs, Given the state Eqs. (7.84), if the input is a unit step where r = 1, a 
steady-state solution, xss, for x, is 
Xce — v2 
= v 
(7.92) 
where Vt is constant. Also, 
Xss = 0 
(7.93) 
Substituting r = 1, a unit step, along with Eqs. (7.92) and (7.93), into Eqs. 
(7.84) yields 
0 = A V + B 
yss = CV 
where yss is the steady-state output. Solving for V yields 
V = - A ^ B 
(7.94a) 
(7.94b) 
(7.95) 
But the steady-state error is the difference between the steady-state input and the 
steady-state output. The final result for the steady-state error for a unit step input 
into a system represented in state space is 
- i i 
e(oo) = 1 - yss = 1 - CV = 1 + CA ~B 
(7.96) 
Ramp Inputs. For unit ramp inputs, r = t, a steady-state solution for x is 
Xse — 
v2t + w2 
= Vr + W 
(7.97) 
Vnt+Wa. 
where V,- and Wt are constants. Hence, 
V2 
Xec — 
= v 
(7.98) 
Vn. 

7.8 Steady-State Error for Systems in State Space 
Substituting r = t along with Eqs. (7.97) and (7.98) into Eqs. (7.84) yields 
V = A(Vf+ W)+Br 
(7.99a) 
yss = C(Vf + W) 
(7.99b) 
In order to balance Eq. (7.99a), we equate the matrix coefficients of t, AV = —B, or 
367 
V = -A _ 1B 
Equating constant terms in Eq. (7.99a), we have AW = V, or 
W = A_1V 
Substituting Eqs. (7.100) and (7.101) into (7.99b) yields 
yss = C[-A_1Br + A-^-A^B)] = -CJA^B/ + (A^ffi] 
The steady-state error is therefore 
-h 
-1\2, 
e(oo) = lim (t - yss) = lim [(1 + CA_1B)f + C(A_1)^B] 
t—'00 
t—*00 
(7.100) 
(7.101) 
(7.102) 
(7.103) 
Notice that in order to use this method, A - 1 must exist. That is, detA ^ 0. 
We now demonstrate the use of Eqs. (7.96) and (7.103) to find the steady-state 
error for step and ramp inputs. 
Example 7.14 
Steady-State Error Using Input Substitution 
PROBLEM: Evaluate the steady-state error for the system described by the three 
equations in Eq. (7.90) for unit step and unit ramp inputs. Use input substitution. 
SOLUTION: For a unit step input, the steady-state error given by Eq. (7.96) is 
e(oo) = 1 + CA_1B = 1 - 0.2 = 0.8 
(7.104) 
where C, A, and B are as follows: 
-5 
0 
20 
1 01 
- 2 
1 
-10 1_ 
; B = "°1 
0 
.1. 
A = 
For a ramp input, using Eq. (7.103), we have 
C = [-l 
1 0 
(7.105) 
- l \ 2 i 
e(oo) = [ l i m K l + C A - ^ + CtA-'rB] = lim (0.8f + 0.08) = oo 
(7.106) 
t—'DO 
/—>0O 

368 
Chapter 7 
Steady- State Errors 
WileyPLUS 
Control Solutions 
Skill-Asse isment Exercise 7.7 
PROBLEM: Find tr 3 steady-state error for a step input given the system repre-
sented in state spac e below. Calculate the steady-state error using both the final 
value theorem and input substitution methods. 
k = 
0 
1 
-3 
-6 
B = 
C = fl 
1 
ANSWER: 
eStep(oo) = r 
The complete solul on is at www.wiley.com/college/nise. 
In this chaptt r, we covered the evaluation of steady-state error for systems 
represented by transfer functions as well as systems represented in state space. For 
systems represented in state space, two methods were presented: (1) final value 
theorem and (2) input substitution. 
Case Studies 
Antenna Control: Steady-State Error Design via Gain 
This chapter showed how to find steady-state errors for step, ramp, and parabolic 
inputs to a closed-loop feedback control system. We also learned how to evaluate 
the gain to meet a steady-state error requirement. This ongoing case study uses our 
antenna azimuth position control system to summarize the concepts. 
PROBLEM: For the antenna azimuth position control system shown on the front 
endpapers, Configuration 1, 
a. Find the steady-state error in terms of gain, K, for step, ramp, and parabolic 
inputs. 
b. Find the value of gain, K, to yield a 10% error in the steady state. 
SOLUTION: 
a. The simplified block diagram for the system is shown on the front endpapers. 
The steady-state error is given by 
sR(s) 
e(oo) = l\msE(s) = lim-—^-^-
K ' 
5-0 
W 
tf-41 
+ G(s) 
(7.107) 
From the block diagram, after pushing the potentiometer to the right past the 
summing junction, the equivalent forward transfer function is 
6.63K 
K) 
5(5 + 1.71)(5 + 100) 
(7.108) 

Case Studies 
To find the steady-state error for a step input, use R(s) — 1/s along with 
Eq. (7.108), and substitute these in Eq. (7.107). The result is e(oo) = 0. 
To find the steady-state error for a ramp input, use R(s) — 1/s2 along with 
Eq. (7.108), and substitute these in Eq. (7.107). The result is e(oo) = 25.79/K. 
To find the steady-state error for a parabolic input, use R(s) = 1/s3 along with 
Eq. (7.108), and substitute these in Eq. (7.107). The result is e(oo) = oo. 
b. Since the system is Type 1, a 10% error in the steady-state must refer to a ramp 
input. This is the only input that yields a finite, nonzero error. Hence, for a unit 
m m p i n p U t ' 
' - 
(1.71)(100) 
e(oo) = o.i = -L = 
6.63# 
25.79 
K 
(7.109) 
from which K = 257.9. You should verify that the value of K is within the range of 
gains that ensures system stability. In the antenna control case study in the last 
chapter, the range of gain for stability was found to be 0 < K < 2623.29. Hence, the 
system is stable for a gain of 257.9. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives: Referring to the antenna azimuth position control system shown on the 
front endpapers, Configuration 2, do the following: 
a. Find the steady-state errors in terms of gain, K, for step, ramp, and parabolic 
inputs. 
b. Find the value of gain, K, to yield a 20% error in the steady state. 
Video Laser Disc Recorder: Steady-State Error 
Design via Gain 
As a second case study, let us look at a video laser disc focusing system for recording. 
PROBLEM: In order to record on a video laser disc, a 0.5^m laser spot must be 
focused on the recording medium to burn pits that represent the program material. 
The small laser spot requires that the focusing lens be positioned to an accuracy of 
±0.tfym.. A model of the feedback control system for the focusing lens is shown in 
Figure 7.22. 
The detector detects the distance between the focusing lens and the video disc by 
measuring the degree of focus as shown in Figure 7.23(a). Laser light reflected from 
the disc, D, is split by beam splitters B\ and Bi and focused behind aperture A. The 
f emainder is reflected by the mirror and focuses in front of aperture A. The amount 
of light of each beam that passes through the aperture depends on how far the 
beam's focal point is from the aperture. Each side of the split photodiode, P, 
measures the intensity of each beam. Thus, as the disc's distance from the recording 
Desired 
position + 
^ 
. 
Detector 
0.12 
Filter 
Kjfa + 800) 
(s + 40,000) 
Power 
amplifier 
K2 
Motor & 
lens 
AT3 
s
2 
Actual 
position 
FIGURE 7.22 Video laser disc recording: control system for focusing write beam 

370 
Chapter 7 
Steady-State Errors 
Mirror 
P, split 
photodiode 
£,,, condensing 
lens 
D-Disc 
Bx, polarizing 
beam splitter 
L}, recording 
objective lens 
Differential 
voltage 
A 
0.6 
-0.6 
^_ Distance from 
5 
nominal focus 
(*) 
FIGURE 7.23 Video disc laser recording: a. focus detector optics; b. linearized transfer 
function for focus detector 
objective lens changes, so does the focal point of each beam. As a result, the rela-
tive voltage detected by each part of the split photodiode changes. When the beam 
is out of focus, one side of the photodiode outputs a larger voltage. When the beam 
is in focus, the voltage outputs from both sides of the photodiode are equal. 
A simplified model for the detector is a straight line relating the differential voltage 
output from the two elements to the distance of the laser disc from nominal focus. A 
linearized plot of the detector input-output relationship is shown in Figure 7.23(b) 
(Isailovic, 1985). Assume that a warp on the disc yields a worst-case disturbance in the 
focus of 10r2/zm. Find the value of KiK2K3 in order to meet the focusing accuracy 
required by the system. 

Summary 
371 
SOLUTION: Since the system is Type 2, it can respond to parabolic inputs with finite 
error. We can assume that the disturbance has the same effect as an input of 
10r2/U.m. The Laplace transform of 10/2 is 20/.?3, or 20 units greater than the unit 
acceleration used to derive the general equation of the error for a parabolic input. 
Thus, e(oo) = 2QIKa. But Ka = \ims2G{s). 
s-*0 
From Figure 7.22, Ka = 0.0024KiK2K3. Also, from the problem statement, the 
error must be no greater than 0.1/xm. Hence, e(oo) = 8333.33/^1^2^3 = 0.1. Thus, 
K1K2K3 > 83333.3, and the system is stable. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives: Given the video laser disc recording system whose block diagram is 
shown in Figure 7.24, do the following: 
a. If the focusing lens needs to be positioned to an accuracy of ±0.005/xm, find the 
value of KiK2K3 if the warp on the disc yields a worst-case disturbance in the 
focus of I5t2fim. 
b. Use the Routh-Hurwitz criterion to show that the system is stable when the 
conditions of a. are met. 
c. Use MATLAB to show that the system is stable when the condi-
tions of a. are met. 
Desired 
position + ,. 
— 
1 
?\ 
9 
Detector 
0.2 
Filter 
K}(s + 600) 
(s + 20,000) 
Power 
Motor & 
amplifier 
lens 
A,clual 
K2 
*3 
5 2 
position 
MATLA& 
FIGURE 7.24 Video laser disc recording focusing system 
^ Summary^ 
This chapter covered the analysis and design of feedback control systems for steady-
state errors. The steady-state errors studied resulted strictly from the system 
configuration. On the basis of a system configuration and a group of selected 
test signals, namely steps, ramps, and parabolas, we can analyze or design for the 
system's steady-state error performance. The greater the number of pure integra-
tions a system has in the forward path, the higher the degree of accuracy, assuming 
the system is stable. 
The steady-state errors depend upon the type of test input. Applying the final 
value theorem to stable systems, the steady-state error for unit step inputs is 
•W=I+H3B 
(7U0) 
The steady-state error for ramp inputs of unit velocity is 
1 
e(oo) = IT lim.s'G(s) 
(7.111) 

Chapter 7 
Steady-State Errors 
and for parabolic inputs of unit acceleration, it is 
s—*Q 
The terms taken to the limit in Eqs. (7.110) through (7.112) are called static 
error constants. Beginning with Eq. (7.110), the terms in the denominator taken to 
the limit are called the position constant, velocity constant, and acceleration constant, 
respectively. The static error constants are the steady-state error specifications for 
control systems. By specifying a static error constant, one is stating the number of 
pure integrations in the forward path, the test signal used, and the expected steady-
state error. 
Another definition covered in this chapter was that of system type. The system 
type is the number of pure integrations in the forward path, assuming a unity 
feedback system. Increasing the system type decreases the steady-state error as long 
as the system remains stable. 
Since the steady-state error is, for the most part, inversely proportional to the 
static error constant, the larger the static error constant, the smaller the steady-state 
error. Increasing system gain increases the static error constant. Thus, in general, 
increasing system gain decreases the steady-state error as long as the system remains 
stable. 
Nonunity feedback systems were handled by deriving an equivalent unity 
feedback system whose steady-state error characteristics followed all previous 
development. The method was restricted to systems where input and output units 
are the same. 
We also saw how feedback decreases a system's steady-state error caused by 
disturbances. With feedback, the effect of a disturbance can be reduced by system 
gain adjustments. 
Finally, for systems represented in state space, we calculated the steady-state 
error using the final value theorem and input substitution methods. 
In the next chapter, we will examine the root locus, a powerful tool for the 
analysis and design of control systems. 
i 
¢^ Review Questions ^ 
1. Name two sources of steady-state errors. 
2. A position control, tracking with a constant difference in velocity, would yield 
how much position error in the steady state? 
3. Name the test inputs used to evaluate steady-state error. 
4. How many integrations in the forward path are required in order for there to be 
zero steady-state error for each of the test inputs listed in Question 3? 
5. Increasing system gain has what effect upon the steady-state error? 
6. For a step input, the steady-state error is approximately the reciprocal of the 
static error constant if what condition holds true? 
7. What is the exact relationship between the static error constants and the steady-
state errors for ramp and parabolic inputs? 
8. What information is contained in the specification Kp = 10,000? 
9. Define system type. 

Problems 
373 
10. The forward transfer function of a control system has three poles at 
- 1 , - 2 , and - 3 . What is the system type? 
11. What effect does feedback have upon disturbances? 
12. For a step input disturbance at the input to the plant, describe the effect of 
controller and plant gain upon minimizing the effect of the disturbance. 
13. Is the forward-path actuating signal the system error if the system has nonunity 
feedback? 
14. How are nonunity feedback systems analyzed and designed for steady-state 
errors? 
15. Define, in words, sensitivity and describe the goal of feedback-control-system 
engineering as it applies to sensitivity. 
16. Name two methods for calculating the steady-state error for systems represented 
in state space. 
Problems 
1. For the unity feedback system shown in 
wileyPius 
Figure P7.1, where 
¢ 3 2 3 
450(5 + 8)(5 + 12)(5 + 15) 
Conlfo1 Solutions 
Gis) = s(s + 38)(52 + 2s + 28) 
find the steady-state errors for the following test inputs: 
25w(r), 31tu{t), 47t2u(t). [Section: 7.2] 
R(s)+sc > E(s) 
G(s) 
C(s) 
FIGURE P7.1 
2. Figure P7.2 shows the ramp input r(t) and the output 
c(t) of a system. Assuming the output's steady state 
can be approximated by a ramp, find [Section: 7.1] 
a. the steady-state error; 
b. the steady-state error if the input becomes 
r(t) = tu{t). 
**• /(sec) 
FIGURE P7.2 
3. For the unity feedback system shown in Figure P7.1, 
where 
G(s) = 60(5 + 3)(5 + 4)(5 + 8) 
52(5+ 6)(5+ 17) 
find the steady-state error if the input is S0t2u(t). 
[Section: 7.2] 
4. For the system shown in Figure P7.3, what steady-
state error can be expected for the following test 
inputs: \5u(t), 15ta(f), 15t2u{t). [Section: 7.2] 
*»tf9\ + / 0 \ 
yy 
K y 
s 
45 
tfi* -
*s 
i + 3 
3 
C(s) 
FIGURE P7.3 
For the unity feedback system shown in Figure P7.1, 
where 
G(s) = 
500 
(5+ 24)(52+ 85+ 14) 
find the steady-state error for inputs of 30u(t), 10tu(t), 
and 81t2u(t). [Section: 7.3] 
6. An input of 25t3u(t) is applied to the input of a Type 
3 unity feedback system, as shown in Figure P7.1, 

374 
Chapter 7 
Steady-State Errors 
where 
G(s) = 210(5 + 4)(5 + 6)(5 + 11)(5 + 13) 
s3{s + 7)(5 + 14)(5 +19) 
Find the steady-state error in position. [Section: 7.3] 
7. The steady-state error in velocity of a 
wileyPLUS 
system is defined to be 
EVJim 
rdr _ dc" 
dt 
dt 
where r is the system input, and c is the system 
output. Find the steady-state error in velocity for an 
input of t"u(t) to a unity feedback system with a 
forward transfer function of [Section: 7.2] 
100(5+1)(5 + 2) 
{) 
52(5 + 3)(5 + 10) 
8. What is the steady-state error for a step input of 15 
units applied to the unity feedback system of Figure 
P7.1, where [Section: 7.3] 
1020(5 + 13)(5 + 26)(5 + 33) 
G{l) = 
(5 + 65)(5 + 75)(5 + 91) 
9. A system has Kp — 4. What steady-state error can be 
expected for inputs of 70u(f) and70to(f)? [Section7.3] 
10. For the unity feedback system shown in Figure P7.1, 
where [Section: 7.3] 
5000 
G{S) = 
^75) 
a. What is the expected percent overshoot for a unit 
step input? 
b. What is the settling time for a unit step input? 
c. What is the steady-state error for an input of 5w(f)? 
d. Whatisthesteady-stateerrorforaninputof5m(r)? 
e. What is the steady-state error for an input 
of5r2«(f)? 
11. Given the unity feedback system shown in Figure 
P7.1, where 
G(s) = 100500(5 + 5)(5 + 14)(5 + 23) 
s(s + 27)(5 + a)(5 + 33) 
find the value of a to yield a Kv = 25000. [Section: 7.4] 
12. For the unity feedback system of Figure 
P7.1, where 
K(5+ 2)(5+ 4)(5+ 6) 
{> 
52(5 + 5)(5 + 7) 
find the value of K to yield a static error constant of 
10,000. [Section: 7.4] 
13. For the system shown in Figure P7.4, [Section: 7.3] 
a. Find Kp, K^ and Ka. 
b. Find the steady-state error for an input of 50«(r), 
50m(0, and 50t2u(t). 
c. State the system type. 
Control Solutions 
R{s) + / 
_. ~~^. 
5 
s(s+\)(s + 2) 
(s + 3) 
C(s) 
FIGURE P7.4 
14. A Type 3 unity feedback system has r{t) — lOr3 
applied to its input. Find the steady-state position 
error for this input if the forward transfer fun ction is 
[Section: 7.3] 
_ 1030(52 + 85 + 23)(52 + 215 + U) 
{S)~ 
5^(5 + 6)(5+13) 
15. Find the system type for the system of Figure P7.5. 
[Section: 7.3] 
R(s) +x 
100(5 + 2) 
s(s + 5) 
10 
— 
1000 
s 
C(s) 
FIGURE P7.5 
16. What are the restrictions on the feedforward trans-
fer function ¢2(5) in the system of Figure P7.6 to 
obtain zero steady-state error for step iniDuts if: 
[Section: 7.3] 
a. G\(s) is a Type 0 transfer function; 
b. G\(s) is a Type 1 transfer function; 
c. Gi(s) is a Type 2 transfer function? 
WileyPLUS 
Control Solutions 
R(s) 
G2(s) 
E(s) 
G](s) ^ g ) ^ - ^ - . 
,+3) 
C(5) 
FIGURE P7.6 

Problems 
375 
17. The steady-state error is defined to be the difference in 
position between input and output as time approaches 
infinity. Let us define a steady-state velocity error, 
which is the difference in velocity between input 
and output. Derive an expression for the error in 
velocity, e(oo) = r(oo) — c(oo), and complete Table 
P7.1 for the error in velocity. [Sections: 7.2, 7.3] 
21. 
Input 
TABLE P7.1 
Step 
Ramp 
Parabola 
Type 
0 
1 
2 
WileyPLUS 
CB3J 
Control Solutions 
18. For the system shown in Figure P7.7, 
[Section: 7.4] 
a. What value of K will yield a 
steady-state error in position of 0.01 for an input 
of (1/10)/? 
b. What is the Kv for the value of K found in Part a? 
c. What is the minimum possible steady-state posi-
tion error for the input given in Part a? 
™±£ A E{s\ 
9 
* 
K(s + 7) 
s(s + 5)(s + 8)(^ +12) 
C(s) 
FIGURE P7.7 
19. Given the unity feedback system of Figure P7.1, where 
K(s + a) 
^^ 
5(5 + 2)(5+13) 
find the value of Ka so that a ramp input of slope 40 
will yield an error of 0.006 in the steady state when 
compared to the output. [Section: 7.4] 
20. Given the system of Figure P7.8, design the value of 
K so that for an input of 100fw(f), there will be a 0.01 
error in the steady state. [Section: 7.4] 
Find the value of K for the unity feedback system 
shown in Figure P7.1, where 
G(s) = £(5 + 3) 
22. 
s2(s + 7) 
if the input is 10t2u(t), and the desired steady-state 
error is 0.061 for this input. [Section: 7.4] 
The unity feedback system of Figure P7.1, where 
WileyPLUS 
G(s) = K{s2 + 35 + 30) 
5"(5 + 5) 
Control Solutions 
23. 
is to have 1/6000 error between an input of 10ta(r) 
and the output in the steady state. [Section: 7.4] 
a. Find K and n to meet the specification. 
b. What are Kp, K„ and Kal 
For the unity feedback system of Figure P7.1, where 
[Section: 7.3] 
G(s) = K{s2 + 65 + 6) 
(5 + 5)2(5 + 3) 
24. 
a. Find the system type. 
b. What error can be expected for an input of 
12w(f)? 
c. What error can be expected for an input of 
12ta(f)? 
For the unity feedback system of Figure P7.1, where 
£(5 + 13)(5+19) 
G(5) = 5(5 + 6)(5 + 9)(5 + 22) 
25. 
find the value of K to yield a steady-state error of 0.4 
for a ramp input of 27tu(t). [Section: 7.4] 
Given the unity feedback system of Figure P7.1, 
where 
G(s) = 
K{s + 6) 
(5+ 2)(52+ 105 + 29) 
R(s) 
tc 
' \ 
^ ) 
P 
H 
\ 
V 
K 
s(s+\) 
IPs 
K 
•+ 
1 
m 
26. 
find the value of K to yield a steady-state error of 
8%. [Section: 7.4] 
For the unity feedback system of Figure P7.1, where 
G » « 
K 
5(5 + 4)(5 + 8)(5 + 10) 
FIGURE P7.8 
find the minimum possible steady-state position 
error if a unit ramp is applied. What places the 
constraint upon the error? 

376 
Chapter 7 
Steady-State Errors 
27. The unity feedback system of Figure P7.1, wileypms 
where 
O E J 
Control Solutions 
G(s) = 
{s + py 
is to be designed to meet the following specifica-
tions: steady-state error for a unit step input = 0.1; 
damping ratio = 0.5; natural frequency — \/l0. Find 
K, a, and £. [Section: 7.4] 
28. A second-order, unity feedback system is to follow a 
ramp input with the following 
specifications: 
the steady-state output position shall differ from 
the input position by 0.01 of the input velocity; the 
natural frequency of the closed-loop system shall be 
10 rad/s. Find the following: 
a. The system type 
b. The exact expression for the forward-path trans-
fer function 
c. The closed-loop system's damping ratio 
29. The unity feedback system of Figure P7.1, where 
G<s) = 
K(s 
*(* + « 
is to be designed to meet the following require-
ments: The steady-state position error for a unit 
ramp input equals 1/10; the closed-loop poles will be 
located at - 1 ± ;1. Find K, a, and /3 in order to meet 
the specifications. [Section: 7.4] 
30. Given the unity feedback control system of Figure 
P7.1, where 
K ' 
s"(s + a) 
find the values of n, K, and a in order to meet 
specifications of 12% overshoot and Kv = 110. 
[Section: 7.4] 
31. Given the unity feedback control system of Figure 
P7.1, where 
find the following: [Section: 7.4] 
a. K and a to yield Kv = 1000 and a 20% overshoot 
b. K and a to yield a 1 % error in the steady state 
and a 10% overshoot 
32. Given the system in Figure P7.9, find the following: 
[Section: 7.3] 
a. The closed-loop transfer function 
b. The system type 
c. The steady-state error for an input of 5u(t) 
d. The steady-state error for an input of 5tu(t) 
e. Discuss the validity of your answers to Parts c 
and d. 
*» i<*+xx. 
k 
— r * 
i 
i' 2(i-+D 
i 
s 
1 
52(.V + 3) 
C(s) 
FIGURE P7.9 
33. Repeat Problem 32 for the system shown in Figure 
P7.10. [Section: 7.3] 
R(s) 
+/0* 
-
- > 
2 
+ x—>. 
— 
10 
.V(*+1)(J- + 3)(5' + 4 ) 
Is 
C(s) 
FIGURE P7.10 
34. For the system shown in Figure 
MATLAB 
P 7 . l l , use MATLAB t o find t h e 
following: [Section: 7.3] 
a. The system type 
b. Kp, Kv, and Ka 
c. The steady-state error for inputs of 
100u(t), 100tu(t), andl00t2uft; 
Ms) + 
(5 + 9) 
s(#+ 6)(.5+ 12)(5+ 14) 
6(s + 9)(s + 17) 
(5+12)(5 + 32)(5 + 68) 
C(s) 
13 
5 + 7 
FIGURE P7.11 
35. The system of Figure P7.12 is to have 
the 
following 
specifications: Kv = 
10; f = 0.5. Find the values of Ki and 
Kf required for the specifications of the 
system to be met. [Section: 7.4] 
WileyPLUS 
Control Solutions 

Problems 
377 
(5) + ( ®-* * -^a— 
10 
s(s+l) 
W 
K,.v 
FIGURE P7.12 
36. The transfer function from elevator deflection to 
altitude change in a Tower Trainer 60 Unmanned 
Aerial Vehicle is 
m 
P(s) = 
-34.1653 - 144.452 + 7047^ + 557.2 
55 + 13.1854 + 95.9353 + 14.6152 + 31.945 
An autopilot is built around the aircraft as shown in 
Figure P7.13, with F(s) = H{s) = 1 and 
_ 0.00842(5 + 7.895)(52 + 0.1085 + 0.3393) 
^ ~ 
(5 + 0.07895) (52 + 45 + 8) 
(Barkana, 2005). The steady-state error for a ramp 
input in this system is ess = 25. Find the slope of the 
ramp input. 
R(s) 
m +<&-
GOO 
P(s) 
as) 
His) 
FIGURE P7.13 
37. A block diagram representing the Ktesibios' water 
clock discussed in Section 1.2 is shown in Chapter 5, 
Problem 58, Figure P5.38(6) (Lepschy, 1992), 
a. Find the system's type. 
b. For hT{t) = u{t), find the steady-state value of 
e{t) = 
hr{t)-hf{t). 
38. Find the total steady-state error due to a unit step 
input and a unit step disturbance in the system of 
Figure P7.14. [Section: 7.5] 
m 
mi6?) 
* 
yy 
i 
5 + 5 -
^
-
100 
5 + 2 
m 
FIGURE P7.14 
39. Design the values of K\ and # 2 in the system of 
Figure P7.15 to meet the following specifications: 
Steady-state error component due to a unit step 
disturbance is -0.000012; steady-state error compo-
nent due to a unit ramp input is 0.003. [Section: 7.5] 
D(s) 
mt&\ 
. 
*w * 
L_ 
£,(5 +2) 
(s + 3) -4— 
*2 
s(s + 4) 
as) 
FIGURE P7.15 
40. In Figure P7.16, let G(s) = 5 and P{s) = 
7 
5 + 2 
a. Calculate the steady-state error due to a com-
3 
mand input R(s) = - with D(s) = 0. 
s 
b. Verify the r e s u l t of Part a 
Simulink 
using Simulink. 
c. Calculate the steady-state error due to a distur-
bance input D(s) = — with R(s) = 0. 
d. Verify the result of Part c 
.. .. . 
J 
Simulink 
using Simulink . 
^ E ^ P 
e. Calculate the total steady-state error due to a 
3 
command input R(s) = - and a disturbance 
D(s) = — applied simultaneously. 
f. Verify the result of Part e 
Simulink 
using Simulink. 
D(s) 
m \ 
i&h 
G(^ -2^8)+ 
P(s) 
as) 
FIGURE P7.16 
41. Derive Eq. (7.72) in the text, the final value of the 
actuating signal for nonunity feedback systems. 
[Section: 7.6] 
42. For each of the systems shown in Figure P7.17, find 
the following: [Section: 7.6] 
a. The system type 
b. The appropriate static error constant 
c. The input waveform to yield a constant error 

378 
Chapter 7 
Steady-State Errors 
d. The steady-state error for a unit input of the 
waveform found in Part c 
e. The steady-state value of the actuating signal 
R(s) + 
mi6 
— , : 
10(5+10) 
s(s + 2) 
(s + 4) 
C(s) 
System 1 
mi* 
—
i 
2\ » 
9 
* 
10(5+10) 
5(5 + 2) 
(5+1) 
C{s) 
System 2 
FIGURE P7.17 Closed-loop systems with nonunity feedback 
43. For each of the systems shown in Figure P7.18, find 
the appropriate static error constant as well as the 
steady-state error, r(oo) - c(oo), for unit step, ramp, 
and parabolic inputs. [Section: 7.6] 
R(s) 
~ * l . 
P 
5+4 
(5+3)(5+7) 
10 
C(s) 
System 1 
m 
7\ . 
O • 
5+4 
(5+3)(5+7) 
5 
10 C(s) 
<g>~ 
(J+l) 
^(5 + 2) 
C(s) 
K 
FIGURE P7.19 
45. For the system shown in Figure P7.20, [Section: 7.6] 
a. What is the system type? 
b. What is the appropriate static error constant? 
c. What is the value of the appropriate static error 
constant? 
d. What is the steady-state error for a unit step 
input? 
R(s) t& 
#(5+1) 
52(5 + 3) 
(s + 4) 
(5 + 2) 
C(5) 
M 
MATLAB 
FIGURE P7.20 
46. For the system shown in Figure 
P7.21, use MATLAB to find the 
following for 
K = 10, and 
K= 106 : [Section: 7.6] 
a. The system type 
b. Kp, Kv, a n d Ka 
c. The s t e a d y - s t a t e e r r o r for i n p u t s of 
3 0 u ( t ) , 3 0 t u ( t ) , a n d 3 0 t 2 u ( t ) 
R(s) + <8K 
#(5+1)(5 + 2) 
52(5 + 4)(5 + 5)(5 + 6) 
C(5) 
(J + 6) 
(5 + 8)(5 + 9) 
System 2 
FIGURE P7.18 
44. Given the system shown in Figure P7.19, W'leyPLUS 
find the following: [Section: 7.6] 
t M £ f 
a. The system type 
control solutions 
b. The value of K to yield 0.1% error in the steady 
state 
FIGURE P7.21 
47. A dynamic voltage restorer (DVR) is a device that is 
connected in series to a power supply. It continu-
ously monitors the voltage delivered to the load, 
and compensates voltage sags by applying the nec-
essary extra voltage to maintain the load voltage 
constant. 
In the model shown in Figure P7.22, ur represents 
the desired reference voltage, u0 is the output 

Problems 
379 
voltage, and Z/, is the load impedance. All other 
parameters are internal to the DVR (Lam, 2004). 
a. Assuming ZL = -^-, and 0 ^ 1, find the system's 
type. 
SCL 
b. Find the steady-state error to a unit step input as 
a function of ft. 
"- —^H^: 
FIGURE P7.22 DVR Model 
48. Derive Eq. (7.69) in the text. [Section: 7.6] 
49. Given the system shown in Figure P7.23, do the 
following: [Section: 7.6] 
a. Derive 
the 
expression 
for 
the 
error, 
E(s) = R(s) - C(s), in terms of R(s) and D(s). 
b. Derive the steady-state error, e(oo), if R(s) and 
D(s) are unit step functions. 
c. Determine the attributes of Gi(s), G2(s), and 
H(s) necessary for the steady-state error to 
become zero. 
•wjo, 
-
-
GM 
—»• G2(s) 
C(s) 
FIGURE P7.23 System with input and disturbance 
50. Given the system shown in Figure P7.24, find the 
sensitivity of the steady-state error to parameter a. 
Assume a step input. Plot the sensitivity as a func-
tion of parameter a. [Section: 7.7] 
*W+/$> 
-
*s 
K 
s(s+ l)(s + 4) 
(s + a) 
0 » , 
51. a. Show that the sensitivity to plant changes in the 
system of Figure P7.13 is 
-££!_ _L 
T:P~T8P~1 
+ L(s) 
where L(s) = G(s)P(s)H{s) and 
CU) 
F(s)L(s) 
T(s) = R{s) 
1+R(s)' 
T(s) 
b. Show that STP(S) + -=TT = 1 for all values of s. 
F(s) 
52. In Figure P7.13, P(s) =-, 
T(s) = 
UK 
C{s)= 
R(s) 
(s + l){s + 2)(s2 + 5s + 14)' 
and 
P8T 
•JT-.P = 7 ? T S 
= 
S2 + 55 
T8P 
s2 + 5s + W 
a. Find F(s) and G(s). 
b. Find the value of K that will result in zero steady-
state error for a unit step input. 
53. For the system shown in Figure P7.25, 
Wileypws 
find the sensitivity of the steady-state 
d J J J 
error for changes in Ki and in K2, when 
coniroi solutions 
K\ = 100 and &% = 0.1. Assume step inputs for both 
the input and the disturbance. [Section: 7.7] 
D(s) 
R(s) +, 
Ki -*&- £ 
C(s) 
s+\ 
FIGURE P7.24 
FIGURE P7.25 System with input and disturbance 
54. Given the block diagram of the active suspension 
system shown in Figure P5.43 (Lin, 1997): 
a. Find the transfer function from a road distur-
bance r to the error signal e. 
b. Use the transfer function in Part a to find the steady-
state value of e for a unit step road disturbance. 
c. Use the transfer function in Part a to find the steady-
state value of e for a unit ramp road disturbance. 
d. From your results in Parts b and c, what is the 
system's type for el 
55. For each of the following closed-loop systems, find 
the steady-state error for unit step and unit ramp 

380 
Chapter 7 
Steady-State Errors 
inputs. Use both the final value theorem and input 
substitution methods. [Section: 7.8] 
a. x = 
b. x = 
C. 
X 
-5 
- 3 
-1 
0 
-5 
-1 
-9 
1 
-3 
- 4 
-10 
1 
1 
-9 
0 
-5 
0 
-2 
-2] 
0 
- 5 J 
01 
7 
oJ 
x + 
x + 
roi 
0 
L i J 
r i i 
l 
LoJ 
n 
-11 
- 2 
- 5 x + 
[21 
3 
[5] 
r;y = [-l 
2 1 
0 Olx 
r;y = [l -2 4]x 
56. An automobile guidance system yields an actual 
output distance, X(s), for a desired input distance, 
Xe(s), as shown in Figure P7.26(a). Any difference, 
Xe(s), between the commanded distance and the 
actual distance is converted into a velocity com-
mand, Vc(s), by the controller and applied to the 
vehicle accelerator. The vehicle responds to the 
velocity command with a velocity, V(s), and a dis-
placement, X(s), is realized. The velocity control, 
G2(s), is itself a closed-loop system, as shown in 
Figure P7.26(6). Here the difference, Ve(s), between 
the commanded velocity, Vc(s), and the actual vehi-
cle velocity, V(s), drives a motor that displaces the 
automobile's accelerator by Yc(s) (Stefani, 1978). 
Find the steady-state error for the velocity control 
loop if the motor and amplifier transfer function 
Gs(s) = K/[s(s + l)]. Assume G^s) to be a first-
order system, where a maximum possible 1-foot 
displacement of the accelerator linkage yields a 
steady-state velocity of 100 miles/hour, with the 
automobile reaching 60 miles/hour in 10 seconds. 
Commanded Distance 
Velocity 
m^. .*,,.,, 
r 
um 
V,(.v) 
<*m 
VCsi 
1 
s 
Actual 
XU) 
(a) 
Accelerator 
Velocity 
Velocity Motor and 
Accelerator 
and 
Automobile 
command 
error 
amplifier 
displacement automobile 
velocity 
K,(5) 
V,-(s) 
Vels) 
G3(s) 
G&) 
V(s) 
(b) 
FIGURE P7.26 
Automobile guidance system: a. displacement 
control system; b. velocity control loop 
57. A simplified block diagram of a meter used to measure 
oxygen concentration is shown in Figure P7.27. The 
meter uses the paramagnetic properties of a stream of 
Oxygen 
concentration 
R(s) 
ti 
Body 
torque 
+ /< >sr(s)J 
Body 
displacement 
1 
Js2 + Ds 
em 
«3 
K2 
Voltage 
out 
C(.0 
FIGURE P7.27 
Block diagram of a paramagnetic oxygen 
analyzer 
oxygen. A small body is placed in a stream of oxygen 
whose concentration is R(s), and it is subjected to a 
magnetic field. The torque on the body, KiR(s), due to 
the magnetic field is a function of the concentration 
of the oxygen. The displacement of the body, 0(s), is 
detected, and a voltage, C(s), is developed propor-
tional to the displacement. This voltage is used to 
develop an electrostatic field that places a torque, 
K$C(s), on the body opposite to that developed by 
the magnetic field. When the body comes to rest, the 
output voltage represents the strength of the magnetic 
torque, which in turn is related to the concentration 
of the oxygen (Chesmond, 1982). Find the steady-
state error between the output voltage, representing 
oxygen concentration, and the input oxygen con-
centration. How would you reduce the error to zero? 
58. A space station, shown in Figure P7.28(a), will keep 
its solar arrays facing the Sun. If we assume that 
the simplified block diagram of Figure PI.28(b) 
represents the solar tracking control system that 
will be used to rotate the array via rotary joints 
called solar alpha rotary joints (Figure P7.28(c)). 
Find {Kumar, 1992) 
a. The steady-state error for step commands 
b. The steady-state error for ramp commands 
c. The steady-state error for parabolic commands 
d. The range of Kc/J to make the system stable 
Solar alpha 
rotary joint 
Z (Nadir) 
(a) 
FIGURE P7.28 A space station: a. configuration 
(© 1992 AIAA); (figure continues) 
Solar arrays 

Problems 
381 
Commanded 
joint angle 
0,1 '^®~ 
Velocity 
Gain and dynamics 
Actual 
controller 
| 
j 
joint angl 
(b) 
Bearing race and 
trundle bearings 
Inner shear 
Outer shear 
plate \ 
\ 
/ 
plate 
Motor and 
pinion 
\ 
Bull gear and 
trundle bearings 
O 
FIGURE P7.28 {Continued) b. simplified block diagram; 
c. alpha joint drive train and control system (© 1992 AIAA) 
59. A simplified model of the steering of a four-wheel 
drive vehicle is shown in Figure P7.29. 
In this block diagram, the output r is the vehicle's 
yaw rate, while 5/ and 8r are the steering angles of the 
front and rear tires respectively. In this model, 
s 
r*(s) = 300 + 0.8 
Or(s) = 
io + 1 
h3s + bi 
,Gf(s) = 
h\s + hi 
s2 4- a\s + «2 ' 
ais + a-i 
and K(s) is a controller to be designed. (Yin, 2007). 
K u(Sr)_ 
FIGURE P7.29 Steering model for a four-wheel drive vehicle 
(© 2007 IEEE) 
a. Assuming a step input for <5/, find the minimum 
system type of the controller K(s) necessary so 
that in steady-state the error as defined by the 
signal e in Figure P7.29 is zero if at all possible. 
b. Assuming a step input for 6y, find the system type 
of the controller K(s) necessary so that in steady 
state the error as defined by 6/(00) — r(oo) is zero 
if at all possible. 
DESIGN PROBLEMS 
60. The following specification applies to a position con-
trol: Kv = 10. On hand is an amplifier with a variable 
gain, K2, with which to drive a motor. Two one-turn 
pots to convert shaft position into voltage are also 
available, where ±3n volts are placed across the pots. 
A motor is available whose transfer function is 
0m(s) = 
K 
Ea{s) 
s(s + a) 
where 0m (s) is the motor armature position and Ea(s) 
is the armature voltage. The components are inter-
connected as shown in Figure P7.30. 
Pot 
Amplifier 
Motor 
Outboard 
*• 
K\ 
- n 
K2 
K| 
K 
s(s + a) 
Cis) 
Pot 
FIGURE P7.30 
Position control system 
The transfer function of the motor is found 
experimentally as follows. The motor and load are 
driven separately by applying a large, short square 
wave (a unit impulse) to the armature. An oscillo-
graph of the response shows that the motor reached 
63% of its final output value 0.5 second after appli-
cation of the impulse. Furthermore, with 10 volts dc 
applied to the armature, the constant output speed 
was 100 rad/s. Draw the completed block diagram of 
the system, specifying the transfer function of each 
component of the block diagram. 
61. A boat is circling a ship that is using a tracking radar. 
The speed of the boat is 20 knots, and it is circling 

382 
Chapter 7 
Steady-State Errors 
the ship at a distance of 1 nautical mile, as shown in 
Figure P7.31(a). A simplified model of the tracking 
system is shown in Figure P7.31 (b). Find the value of 
K so that the boat is kept in the center of the radar 
beam with no more than 0.1 degree error. 
Boat 
Boat's trajectory 
e M) + 
0..(.v) 
K 
5(5 + 4) 
ea(s) 
(b) 
FIGURE P7.31 Boat tracked by ship's radar: a. physical 
arrangement; b. block diagram of tracking system 
62. Figure P7.32 shows a simplified block diagram of a 
pilot in a loop to control the roll attitude of an Army 
UH-60A Black Hawk twin-engine helicopter with a 
single main rotor (Hess, 1993). 
a. Find the system type. 
b. The pilot's response determines Kx. Find the 
value of A'I if an appropriate static error constant 
value of 700 is required. 
c. Would a pilot whose K\ is the value found in Part 
b be hired to fly the helicopter? 
Note: In the block diagram GD(s) is a delay of about 
0.154 second and can be represented by a Pade 
approximation of GD(s) = -\s - \2>)/{s -f13). 
63. Motion control, which includes position 
wileypius 
or force control, is used in robotics and 
d 2 3 
machining. Force control requires the 
control solutions 
designer to consider two phases: contact and non-
contact motions. Figure P7.33(a) is a diagram of a 
mechanical system for force control under contact 
motion. A force command, Fcmii(s), is the input to the 
system, while the output, F(s), is the controlled 
contact force. 
In the figure a motor is used as the force actuator. 
The force output from the actuator is applied to the 
ft.*) 
Environment (DgS + Ke) 
(a) 
und<*> +< 
^ 
F(s) p-s®-
*•! 
(0K,<» 1 
K2 
1 
s 
*e*-rn e 
ft>(.s) 
1 
s 
tf(s) 
(*) 
FIGURE P7.33 
a. Force control mechanical loop under 
contact motion (© 1996 IEEE); b. block diagram 
(© 1996 IEEE) 
Commanded 
roll angle 
Central nervous system 
Neuromuscular system 
K< 
- 2 
Vestibular system 
^R>- GD(s) -|t(g)-t(g>* 
100 
s2+14s+100 
5 + 0.2 
Actual 
roll angle 
0„(v) 
(5 + 0.5)(52 + 9.55 + 78) 
FIGURE P7.32 Simplified block diagram of a pilot in a loop (© 1992 AIAA) 

Problems 
383 
object through a force sensor. A block diagram rep-
resentation of the system is shown in Figure PI.33(b). 
K2 is velocity feedback used to improve the transient 
response. The loop is actually implemented by an 
electrical loop (not shown) that controls the armature 
current of the motor to yield the desired torque at the 
output. Recall that Tm = Ktia (Ohnishi, 1996). Find 
an expression for the range of K2 to keep the steady-
state force error below 10% for ramp inputs of com-
manded force. 
64. Problem 50 in Chapter 4 describes an open-loop 
swivel controller and plant for an industrial robot. 
The transfer function for the controller and plant is 
= co0{s) = 
K 
e U 
Vi{s) 
(s + 10)(^2 + 4* + 10) 
where co0(s) is the Laplace transform of the robot's 
angular swivel velocity and Vj(s) is the input voltage 
to the controller. Assume Ge(s) is the forward 
transfer function of a velocity control loop with 
an input transducer and sensor, each represented 
by a constant gain of 3 (Schneider, 1992). 
a. Find the value of gain, K, to minimize the steady-
state error between the input commanded angu-
lar swivel velocity and the output actual angular 
swivel velocity. 
b. What is the steady-state error for the value of K 
found in Part a? 
c. For what kind of input does the design in Part a 
apply? 
65. Packet information flow in a router working under 
TCP/IP can be modeled using the linearized transfer 
function 
. 
Pis)=m= 
hil 
{) 
f(s) 
( 
2N\f 
1\ 
where 
C = link capacity (packets/second). 
N=load factor (number of TCP sessions) 
Q = expected queue length 
R = round trip time (second) 
p = probability of a packet drop 
The objective of an active queue management 
(AQM) algorithm is to automatically choose a 
packet-drop probability, p, so that the queue length 
is maintained at a desired level. This system can be 
represented by the block diagram of Figure P7.13 
with the plant model in. the P(s) block, the AQM 
algorithm in the G(s) block, and F(s) = H(s) = 1. 
Several AQM algorithms are available, but one that 
has received special attention in the literature is the 
random early detection (RED) algorithm. This al-
T IS 
gorithm can be approximated with G(s) — 
, 
s + K 
where L and K are constants (Hollot, 2001). Find the 
value of L required to obtain a 10% steady-state 
error for a unit step input when C = 3750 packets/s, 
N = 50 TCP sessions, I? = 0.1 s, and £ = 0.005. 
66. In Figure P7.16, the plant, P(s) — -3—hcr^r, repre-
sents the dynamics of a robotic manipulator joint. The 
system's output, C(s), is the joint's angular position 
(Low, 2005). The system is controlled in a closed-loop 
configuration as shown with G(s) = Kp H 
, a 
proportional-plus-integral (PI) controller to be dis-
cussed in Chapter 9. R(s) is the joint's desired angular 
position. D(s) is an external disturbance, possibly 
caused by improper dynamics modeling, Coulomb 
friction, or other external forces acting on the joint. 
a. Find the system's type. 
b. Show that for a step disturbance input, ess = 0 
when K[ ^ 0. 
c. Find the value of Kj that will result in e$$ — 5% 
for a parabolic input. 
d. Using the value of Kj found in Part c, find the 
range of KP for closed-loop stability. 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
67. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses the active control of a pantograph mecha-
nism for high-speed rail systems. In Problem 79(a), 
Chapter 5, you found the block diagram for the active 
pantograph control system. Use your solution for 
Problem 79(a) in Chapter 5 to perform steady-state 
error analysis and design as follows (O'Connor, 1997): 
a. Find the system type. 
b. Find the value of controller gain, K, that mini-
mizes the steady-state force error. 
c. What is the minimum steady-state force error? 
68. Control of HIV/AIDS. Consider the HIV infection 
model of Problem 68 in Chapter 6 and its block 
diagram in Figure P6.20 (Craig, 2004). 
a. Find the system's type if G(s) is a constant. 
b. It was shown in Problem 68, Chapter 6, that when 
G(s) = K the system will be stable when 
K < 2.04 x 10"4. What value of K will result in 
a unit step input steady-state error of 10%? 

Chapter 7 
Steady-State Errors 
e. It is suggested that to reduce the steady-state 
error the system's type should be augmented by 
making G(s) = — • Is this a wise choice? What is 
s 
the resulting stability range for K1 
69. Hybrid vehicle. Figure P7.34 shows the block diagram 
of the speed control of an HEV taken from Figure 
P5.54, and rearranged as a unity feedback system 
(Preitl, 2007). Here the system output is, C{s) = 
Kss V(s), the output voltage of the speed sensor/trans-
ducer. 
/?(*). 
E(s) GUs) UAs) 
0.11 (A+0.6) 
;(.t + O.S173) + 5 (s + 0.6)(s + 0.019 
C(s) 
FIGURE P7.34 
a. Assume the speed controller is given as 
Gsc(s) = Kpsc. Find the gain, Kpsc, that yields 
a steady-state error, eslep(oo) — \%. 
b. Now assume that in order to reduce the steady-
state errorforstepinputs,integrationis added to the 
controller yielding Gsc(s) = KPsc + (Kisc/s) = 
100+ (Klsc/s)). Find the value of the integral 
gain, Kisc, that results in a steady-state error, 
<?ramp(oo) = 2.5%. 
c. In Parts a and b, the HEV was assumed to be driven 
on level ground. Consider the case when, after 
reaching a steady-state speed with a controller 
40 
given by G^. (s) = 100 H 
»the car starts climbing 
o 
up a hill with a gradient angle, a = 5°. For small 
angles sin a = a (in radians) and, hence, when 
reflected to the motor shaft the climbing torque is: 
7\, = Fstr 
mer 
. 
mgra 
"— = — a n a = —e— 
hot 
hot 
hot 
1590 x 9.8 x 0.3 x 5 = 83.7Nm. 
4.875 x 57.3 
The block diagram in Figure P7.35 represents the con-
trol system of the HEV rearranged for Part c. 
G2(s) = Equivalent transfer function of the car 
-E(s)=-Kss V(s) 
TM) 
^ * & 
6.13x1 (r 3 
s+0.01908 
13.53 ^ 
O + 0.5) 
100J + 40 
3 (,i + 0.6) 
(j+ 0.5) 
Gj(i) = Transfer function representation 
of torque & speed controllers 
FIGURE P7.35 
In this diagram, the input is Tst(t) = 83.7^(/), corre-
sponding to a = 5°, and the output is the negative error, 
-e{t) = -c{t) = ~Kssv{t), proportional to the change 
in car speed, v(t). Find the steady-state error e(oo) due 
to a step change in the disturbance; e.g., the climbing 
torque, Tst(0 = 83.7 u{t). 
R(s) + 
G(s) 
H{s) 
FIGURE P7.36 
C(s) 
Cyber Exploration Laboratory 
Experiment 7.1 
Objective To verify the effect of input waveform, loop gain, and system type 
upon steady-state errors. 
Minimum Required Software Packages MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
1. What system types will yield zero steady-state error for step inputs? 
2. What system types will yield zero steady-state error for ramp inputs? 
3. What system types will yield infinite steady-state error for ramp inputs? 
4. What system types will yield zero steady-state error for parabolic inputs? 
5. What system types will yield infinite steady-state error for parabolic inputs? 
6. For the negative feedback system of Figure P7.36, where G(s) = 
— 
^-—-— 
—• and H(s) = 1, calculate the steady-state error 
in terms of K for the following inputs: 5u(t), 5tu(t), and 5t2u{t). 

7. Repeat Prelab 6 for G(s) = 
#(5 + 6)(5 + 8) 
8. Repeat Prelab 6 for G(s) = , 
Lab 
5(5 + 4)(5 + 7)(5 + 9)(5 + 12) 
K{s + 1)(5 + 6)(5 + 8) 
Cyber Exploration Laboratory 
and H{s) = 1. 
52(5+ 4)(5+ 7)(5+ 9)(5+ 12) and H(s) = 1. 
1. Using Simulink, set up the negative feedback system of Prelab 6. Plot on one 
graph the error signal of the system for an input of 5u(t) and K = 50, 500, 1000, 
and 5000. Repeat for inputs of 5tu(t) and 5t2u(t). 
2. Using Simulink, set up the negative feedback system of Prelab 7. Plot on one 
graph the error signal of the system for an input of 5u(t) and K = 50, 500, 1000, 
and 5000. Repeat for inputs of 5tu{t) and 5t2u(t). 
3. Using Simulink, set up the negative feedback system of Prelab 8. Plot on one 
graph the error signal of the system for an input of 5u(t) and K = 200, 400, 800, 
and 1000. Repeat for inputs of 5tu{t) and 5t2u(t). 
Postlab 
1. Use your plots from Lab 1 and compare the expected steady-state errors to those 
calculated in the Prelab. Explain the reasons for any discrepancies. 
2. Use your plots from Lab 2 and compare the expected steady-state errors to those 
calculated in the Prelab. Explain the reasons for any discrepancies. 
3. Use your plots from Lab 3 and compare the expected steady-state errors to those 
calculated in the Prelab. Explain the reasons for any discrepancies. 
Experiment 7.2 
Objective To use the LabVIEW Control Design and Simulation Module for 
analysis of steady-state performance for step and ramp inputs. 
Minimum Required Software Package Lab 
VIEW with the Control Design and Simulation Module 
Prelab You are given the model of a single joint of a 
robotic manipulator shown in Figure P7.37 (Spong, 
2005), where B is the coefficient of viscous friction, 
6d(s) is the desired angle, 6(5) is the output angle, and 
D(s) is the disturbance. We want to track the joint angle 
using a PD controller, which we will study in Chapter 9. 
Assume / = B = 1. Find the step and ramp responses of this system for the following 
combinations of PD gains {KP,KD): (16, 7), (64,15), and (144, 23). 
Lab 
1. Create a LabVIEW VI to simulate the response of this system to a step and a 
ramp inputs, under no-disturbance conditions. Use the functions available in the 
Control Design and Simulation/Control Design palette. 
2. Create a LabVIEW VI using the functions available in the Control Design and 
Simulation/Simulation palette, to track an input set-point of 10 under a disturbance 
ofD = 40. 
Postlab Compare your results with those of the Prelab. What conclusions can you 
draw from the various responses of this system to different inputs and different PD 
parameters? What is the system type? Does the steady-state behavior corroborate the 
theory you learned regarding system type and the steady-state error for various 
inputs? Explain your answer. 
D(s) 
* M 
+t(C 
V 
>\ 
. 
r 
>D controller 
Kp+ KQS 
FIGURE P 
-*<gH 
7.37 
Plant 
1 
Js2 + Bs 
0 

Chapter 7 
Steady-State Errors 
^ Bibliography ^ 
Barkana, I. Classical and Simple Adaptive Control of Nonminimum Phase Autopilot Design. 
Journal of Guidance, Control, and Dynamics, vol. 28, 2005, pp. 631-638. 
Chesmond, C. J., Control System Technology. E. Arnold, London, 1982. 
Craig, I. K., Xia, X., and Venter, J. W., Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
D'Azzo, J. J., and Houpis, C. H., Feedback Control System Analysis and Design Conventional 
and Modern, 3d ed. McGraw-Hill, New York, 1988. 
Hess, R. A., Malsbury, T., and Atencio, A., Jr. Flight Simulator Fidelity Assessment in a 
Rotorcraft Lateral Translation Maneuver. Journal of Guidance, Control, and Dynamics, 
vol. 16, no. 1, January-February 1993, pp. 79-85. 
Hollot, C. V, Misra, V, Towsley, D., and Gong, W., A Control Theoretic Analysis of RED. 
Proceedings of IEEE INFOCOM, 2001, pp. 1510-1519. 
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T Design of Feedback Control Systems, 
2d ed. Saunders College Publishing, New York, 1989. 
Isailovic, J. Videodisc and Optical Memory Systems. Prentice Hall, Upper Saddle River, NJ, 1985. 
Kumar, R. R., Cooper, P. A., and Lim, T. W. Sensitivity of Space Station Alpha Joint Robust 
Controller to Structural Modal Parameter Variations. Journal of Guidance, Control, and 
Dynamics, vol. 15, no. 6, November-December 1992, pp. 1427-1433. 
Lam, C. S., Wong, M. C, and Han, Y D. Stability Study on Dynamic Voltage Restorer (DVR). 
Power Electronics Systems and Applications, 2004; Proceedings First International Con-
ference on Power Electronics, 2004, pp. 66-71. 
Lepschy, A. M., Mian, G. A., and Viaro, U Feedback Control in Ancient Water and 
Mechanical Clocks. IEEE Transactions on Education, vol. 35, 1992, pp. 3-10. 
Lin, J.-S., and Kanellakopoulos, I. Nonlinear Design of Active Suspensions. IEEE Control 
Systems, vol. 17, issue 3, June 1997, pp. 45-59. 
Low, K. H., Wang, H., Liew, K. M., and Cai, Y. Modeling and Motion Control of Robotic Hand 
for Telemanipulation Application. International Journal of Software Engineering and 
Knowledge Engineering, vol. 15, 2005, pp. 147-152. 
O'Connor, D. N., Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, March 
1997, pp. 1-4. 
Ohnishi, K., Shibata, M., and Murakami, T. Motion Control for Advanced Mechatronics. 
IEEE/ASME 
Transactions on Mechatronics, vol. 1, no. 1, March 1996, pp. 56-67. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE, 2007. 
Schneider, R. T Pneumatic Robots Continue to Improve. Hydraulics & Pneumatics, October 
1992, pp. 38-39. 
Spong, M., Hutchinson, S., and Vidyasagar, M. Robot Modeling and Control. John Wiley & 
Sons. Hoboken, NJ, 2006. 
Stefani, R. T. Design and Simulation of an Automobile Guidance and Control System. 
Transactions, Computers in Education Division of ASEE, January 1978, pp. 1-9. 
Yin, G., Chen, N., and Li, P. Improving Handling Stability Performance of Four-Wheel 
Steering Vehicle via |i,-Synthesis Robust Control. Ieee Transactions on Vehicular Technol-
ogy, vol. 56, no. 5, 2007, pp. 2432-2439. 

Root Locus Techniques 
I 8 
^Chapter Learning Outcomes^ 
After completing this chapter the student will be able to: 
• Define a root locus (Sections 8.1-8.2) 
• State the properties of a root locus (Section 8.3) 
• Sketch a root locus (Section 8.4) 
• Find the coordinates of points on the root locus and their associated gains 
(Sections 8.5-8.6) 
• Use the root locus to design a parameter value to meet a transient response 
specification for systems of order 2 and higher (Sections 8.7-8.8) 
• Sketch the root locus for positive-feedback systems (Section 8.9) 
• Find the root sensitivity for points along the root locus (Section 8.10) 
(Case Study Learning Outcomes^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to find the preamplifier gain to meet a transient response 
specification. 
• Given the pitch or heading control system for the Unmanned Free-Swimming 
Submersible vehicle shown on the back endpapers, you will be able to plot the 
root locus and design the gain to meet a transient response specification. You will 
then be able to evaluate other performance characteristics. 
387 

388 
Chapter 8 
Root Locus Techniques 
^ 8 . 1 
Introduction 
Root locus, a graphical presentation of the closed-loop poles as a system parameter is 
varied, is a powerful method of analysis and design for stability and transient response 
(Evans, 1948; 1950). Feedback control systems are difficult to comprehend from a 
qualitative point of view, and hence they rely heavily upon mathematics. The root locus 
covered in this chapter is a graphical technique that gives us the qualitative description 
of a control system's performance that we are looking for and also serves as a powerful 
quantitative tool that yields more information than the methods already discussed. 
Up to this point, gains and other system parameters were designed to yield a 
desired transient response for only first- and second-order systems. Even though the 
root locus can be used to solve the same kind of problem, its real power lies in its 
ability to provide solutions for systems of order higher than 2. For example, under 
the right conditions, a fourth-order system's parameters can be designed to yield a 
given percent overshoot and settling time using the concepts learned in Chapter 4. 
The root locus can be used to describe qualitatively the performance of a 
system as various parameters are changed. For example, the effect of varying gain 
upon percent overshoot, settling time, and peak time can be vividly displayed. The 
qualitative description can then be verified with quantitative analysis. 
Besides transient response, the root locus also gives a graphical representation 
of a system's stability. We can clearly see ranges of stability, ranges of instability, and 
the conditions that cause a system to break into oscillation. 
Before presenting root locus, let us review two concepts that we need for the 
ensuing discussion: (1) the control system problem and (2) complex numbers and 
their representation as vectors. 
The Control System Problem 
We have previously encountered the control system problem in Chapter 6: Whereas the 
poles of the open-loop transfer function are easily found (typically, they are known by 
inspection and do not change with changes in system gain), the poles of the closed-loop 
transfer function are more difficult to find (typically, they cannot be found without factoring 
the closed-loop system's characteristic polynomial, the denominator of the closed-loop 
transfer function), and further, the closed-loop poles change with changes in system gain. 
A typical closed-loop feedback control system is shown in Figure 8.1(a). The 
open-loop transfer function was defined in Chapter 5 as KG(s)H(s). Ordinarily, we 
FIGURE 8.1 
a. Closed-loop 
system; b. equivalent transfer 
function 
Actuating 
R<s) + ^ 
- > w . 
9 
Forward 
transfer 
function 
KG(s) 
Output 
CM 
H(s) 
Feedback 
transfer 
function 
a) 
tys) 
KG(s) 
1 + KG(s)H(s) 
ib) 
C(s) 

8.1 Introduction 
389 
can determine the poles of KG(s)H(s), since these poles arise from simple cascaded 
first- or second-order subsystems. Further, variations in K do not affect the location 
of any pole of this function. On the other hand, we cannot determine the poles of 
T(s) = KG(s)/[l + KG{s)H(s)\ unless we factor the denominator. Also, the poles of 
T(s) change with K. 
Let us demonstrate. Letting 
^=fi 
(-) 
and 
-w-gg 
(3.2) 
then 
KNG(s)DH(s) 
T(s) = DG(s)DH(s) + KNG(s)NH(s) 
(8.3) 
where N and D are factored polynomials and signify numerator and denominator terms, 
respectively. We observe the following: Typically, we know the factors of the numerators 
and denominators of G(s) and H(s). Also, the zeros of T(s) consist of the zeros of G(s) 
and the poles of H(s). The poles of T(s) are not immediately known and in fact can 
change with K. For example, if G(s) = (s + l)/[s(s + 2)] and H(s) = (s + 3)/(5 + 4), 
the poles of KG(s)H(s) are 0, -2, and -4. The zeros of KG(s)H(s) are -1 and - 3. 
Now, T(s) = K{s + l)(s + 4)/[s3 + (6 + K)s2+ (8 + 4K)s + 3K]. Thus, the zeros of 
T(s) consist of the zeros of G(s) and the poles of H(s). The poles of T(s) are not 
immediately known without factoring the denominator, and they are a function of K. 
Since the system's transient response and stability are dependent upon the poles of T(s), 
we have no knowledge of the system's performance unless we factor the denominator 
for specific values of K. The root locus will be used to give us a vivid picture of the poles 
of T(s) as K varies. 
Vector Representation of Complex Numbers 
Any complex number, a + jco, described in Cartesian coordinates can be graphi-
cally represented by a vector, as shown in Figure 8.2(a). The complex number also 
can be described in polar form with magnitude M and angle 6, as MZ9. If the 
complex number is substituted into a complex function, F(s), another complex 
number will result. For example, if F(s) = (s + a), then substituting the com-
plex number s = a +jco yields F(s) = (a + a) +jco, another complex number. This 
number is shown in Figure 8.2(b). Notice that F(s) has a zero at -a. If we translate 
the vector a units to the left, as in Figure 8.2(c), we have an alternate represen-
tation of the complex number that originates at the zero of F(s) and terminates on 
the point 5 = a+jco. 
We conclude that (s + a) is a complex number and can be represented by a 
vector drawn from the zero of the function to the points. For example, (s + 7)1^5+2 is 
a complex number drawn from the zero of the function, -7, to the point s, which is 
5 +/2, as shown in Figure 8.2(d). 

Chapter 8 
Root Locus Techniques 
5-plane 
jco 
jco 
(a) 
s-plane 
jco 
A 
JCO 
•*- 
a 
(b) 
-*- a 
FIGURE 8.2 Vector 
representation of complex 
numbers: a. s = o + ja>; 
b. (s + a); c. alternate 
representation of (s + a); 
d.(s + 7)U + ; 2 
*- a 
(0 
W 
Now let us apply the concepts to a complicated function. Assume a function 
m 
F{s) = 
^ 
Q numerator's complex factors 
A , 
v 
FT denominator's complex factors 
LL\S+Pj) 
/=i 
(8.4) 
where the symbol Yl means "product," m — number of zeros, and n — number of 
poles. Each factor in the numerator and each factor in the denominator is a complex 
number that can be represented as a vector. The function defines the complex 
arithmetic to be performed in order to evaluate F(s) at any point, s. Since each com-
plex factor can be thought of as a vector, the magnitude, M, of F(s) at any point, s, is 
M = 
rr 
, «. 
flK5 + z')l 
| [ zero lengths 
f£ 
II pole lengths 
J ^ , ^ 
(8.5) 
where a zero length, | (s 4- n) \, is the magnitude of the vector drawn from the zero of F(s) 
at -zi to the point s, and a pole length, | (s + pj)\, is the magnitude of the vector drawn 
from the pole of F(s) at —pj to the point s. The angle, 0, of F(s) at any point, s, is 
(8.6) 
where a zero angle is the angle, measured from the positive extension of the real axis, 
of a vector drawn from the zero of F(s) at -z, to the point s, and a pole angle is the 
0 = J2 zero angles 
= Y,As + Zi)~ 
/=i 
- £ pole angles 
/=i 

8.1 Introduction 
391 
angle, measured from the positive extension of the real axis, of the vector drawn from 
the pole of F(s) at —m to the point s. 
As a demonstration of the above concept, consider the following example. 
Example 8.1 
Evaluation of a Complex Function via Vectors 
PROBLEM: Given 
F(s) = (s + 1) 
s{s + 2) 
(8.7) 
find F(s) at the point s = —3 +/4. 
SOLUTION: The problem is graphically depicted in Figure 8.3, where each 
vector, (s + a), of the function is shown terminating on the selected point 
s — - 3 +/4. The vector originating at the zero at —1 is 
(8.8) 
(8.9) 
(8.10) 
20Z116.60 
The vector originating at the pole at the origin is 
5Z126.9° 
The vector originating at the pole at - 2 is 
y/V7Z 104.0° 
Substituting Eqs. (8.8) through (8.10) into Eqs. (8.5) and (8.6) yields 
V20 
MZO = 5VT7 Z116.6° - 126.9° - 104.0° = 0.217Z - 114.3C 
(8.11) 
as the result for evaluating F(s) at the point - 3 +/4. 
i 
FIGURE 8.3 Vector 
representation of Eq. (8.7) 
j-plane 
Skill-Assessment Exercise 8.1 
PROBLEM: Given 
F(s) = (j+ 2)(s+ 4) 
s(s + 3)(s + 6) 
find F(s) at the point s = -7 +/9 the following ways: 
a. Directly substituting the point into F(s) 
b. Calculating the result using vectors 
ANSWER: 
-0.0339 -/0.0899 = 0.096Z - 110.7C 
The complete solution is at www.wiley.com/college/nise. 
Trylt8.1 
Use the following MATLAB 
statements to solve the 
problem given in Skill-
Assessment Exercise 8.1. 
s=-7 + 9j; 
G=(s+2)*(s+4)/... 
(s*(s+3)*(s+6)); 
Theta=(180/pi)* . . . 
angle(G) 
M=abs(G) 
We are now ready to begin our discussion of the root locus. 

Chapter 8 
Root Locus Techniques 
Defining the Root Locus 
A security camera system similar to that shown in Figure 8.4(a) can automatically 
follow a subject. The tracking system monitors pixel changes and positions the 
camera to center the changes. 
The root locus technique can be used to analyze and design the effect of loop 
gain upon the system's transient response and stability. Assume the block diagram 
representation of a tracking system as shown in Figure 8.4(b), where the closed-loop 
poles of the system change location as the gain, K, is varied. Table 8.1, which was 
formed by applying the quadratic formula to the denominator of the transfer 
function in Figure 8.4(c), shows the variation of pole location for different values 
of gain, K. The data of Table 8.1 is graphically displayed in Figure 8.5(a), which 
shows each pole and its gain. 
As the gain, K, increases in Table 8.1 and Figure 8.5(a), the closed-loop pole, 
which is at -10 for K = 0, moves toward the right, and the closed-loop pole, which is 
at 0 for K — 0, moves toward the left. They meet at -5, break away from the real axis, 
and move into the complex plane. One closed-loop pole moves upward while the 
other moves downward. We cannot tell which pole moves up or which moves down. 
In Figure 8.5(b), the individual closed-loop pole locations are removed and their 
paths are represented with solid lines. It is this representation of the paths of the 
(a) 
Subject's 
Motor 
Camera 
position 
Sensors 
Amplifier 
and camera 
position 
D\ 
. 
p 
«1 
s(s + 10) 
C{s) 
(b) 
R(s) 
K 
s2+\0s + K 
C(.v) 
where K=KXK2 
(0 
FIGURE 8.4 
a. Security cameras with auto tracking can be used to follow moving objects 
automatically; b. block diagram; c. closed-loop transfer function 

8.2 Defining the Root Locus 
393 
TABLE 8.1 
Pole location as function of gain for the 
system of Figure 8.4 
K 
0 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
Polel 
-10 
-9.47 
-8.87 
-8.16 
-7.24 
-5 
-5+/2.24 
-5+/3.16 
-5+/3.87 
-5+/4.47 
-5+/5 
Pole 2 
0 
-0.53 
-1.13 
-1.84 
-2.76 
-5 
-5-/2.24 
-5 -/3.16 
-5-/3.87 
-5-/4.47 
- 5 - / 5 
s-plane 
/ST=50X 
45 X 
40 X 
35 X 
30 X 
K=0 5 10 15 20 
X X ' X X 
)C 
25 
/0 
A 
/* 
20 15 10 5 
X X 
N X ir>» g 
-10 -9 -8 - 7 - 6 - 5 - 4 
-3 -2 -1 
30 X 
35 X 
40 X 
45 X 
K=50X 
(a) 
/1 
0 = K 
0 
-/1 
-/2 
-/3 
-/4 
-/5 
5-plane 
K = 0 5 10 15 20 
-10 -9 
-8 
-7 
tf=50 
45 
40 
35 
30 
25 
-6 
-5 
-4 
30 
35 
40 
45 
K = 50 
20 
-3 
15 
i 
-2 
10 
-1 
5 
-
/5 
/4 
./3 
/2 
/I 
0 = 
0 
-/1 
-/2 
-/3 
-/4 
-/5 
FIGURE 8.5 
a. Pole plot from Table 8.1; b. root locus 
closed-loop poles as the gain is varied that we call a root locus. For most of our work, 
the discussion will be limited to positive gain, or K > 0. 
The root locus shows the changes in the transient response as the gain, K, varies. 
First of all, the poles are real for gains less than 25. Thus, the system is overdamped. At 
a gain of 25, the poles are real and multiple and hence critically damped. For gains 
above 25, the system is underdamped. Even though these preceding conclusions were 
available through the analytical techniques covered in Chapter 4, the following 
conclusions are graphically demonstrated by the root locus. 
Directing our attention to the underdamped portion of the root locus, we see that 
regardless of the value of gain, the real parts of the complex poles are always the same. 

Chapter 8 
Root Locus Techniques 
Since the settling time is inversely proportional to the real part of the complex poles for 
this second-order system, the conclusion is that regardless of the value of gain, the settling 
time for the system remains the same under all conditions of underdamped responses. 
Also, as we increase the gain, the damping ratio diminishes, and the percent 
overshoot increases. The damped frequency of oscillation, which is equal to the 
imaginary part of the pole, also increases with an increase in gain, resulting in a 
reduction of the peak time. Finally, since the root locus never crosses over into the 
right half-plane, the system is always stable, regardless of the value of gain, and can 
never break into a sinusoidal oscillation. 
These conclusions for such a simple system may appear to be trivial. What we 
are about to see is that the analysis is applicable to systems of order higher than 2. 
For these systems, it is difficult to tie transient response characteristics to the pole 
location. The root locus will allow us to make that association and will become an 
important technique in the analysis and design of higher-order systems. 
Properties of the Root Locus 
In Section 8.2, we arrived at the root locus by factoring the second-order polynomial 
in the denominator of the transfer function. Consider what would happen if that 
polynomial were of fifth or tenth order. Without a computer, factoring the polyno-
mial would be quite a problem for numerous values of gain. 
We are about to examine the properties of the root locus. From these 
properties we will be able to make a rapid sketch of the root locus for higher-order 
systems without having to factor the denominator of the closed-loop transfer 
function. 
The properties of the root locus can be derived from the general control system 
of Figure 8.1(a). The closed-loop transfer function for the system is 
T(s) = 
KG{s) 
l + KG{s)H{s) 
(8.12) 
From Eq. (8.12), a pole, s, exists when the characteristic polynomial in the denomi-
nator becomes zero, or 
KG{s)H{s) = -1 = lZ{2k + 1)180° k = 0, ±1, ±2, ±3,... 
(8.13) 
where —1 is represented in polar form as lZ(2k + 1)180°. Alternately, a value of s is 
a closed-loop pole if 
\KG(s)H{s)\ = l 
(8.14) 
and 
ZKG{s)H(s) = (2k + l)180c 
(8.15) 
Equation (8.13) implies that if a value of 5 is substituted into the function 
KG(s)H(s), a complex number results. If the angle of the complex number is an odd 
multiple of 180°, that value of s is a system pole for some particular value of K. What 

8.3 Properties of the Root Locus 
395 
value of K1 Since the angle criterion of Eq. (8.15) is satisfied, all that remains is to 
satisfy the magnitude criterion, Eq. (8.14). Thus, 
(8.16) 
We have just found that a pole of the closed-loop system causes the angle of 
KG(s)H(s), or simply G(s)H(s) since K is a scalar, to be an odd multiple of 180°. 
Furthermore, the magnitude of KG(s)H(s) must be unity, implying that the value of Kis 
the reciprocal of the magnitude of G(s)H(s) when the pole value is substituted for s. 
Let us demonstrate this relationship for the second-order system of Figure 8.4. 
The fact that closed-loop poles exist at —9.47 and —0.53 when the gain is 5 has 
already been established in Table 8.1. For this system, 
KG(s)H{s) = 
K 
sis 
10) 
(8.17) 
Substituting the pole at -9.47 for s and 5 for K yields KG(s)H{s) = - 1 . The student 
can repeat the exercise for other points in Table 8.1 and show that each case yields 
KG{s)H(s) = - 1 . 
It is helpful to visualize graphically the meaning of Eq. (8.15). Let us apply the 
complex number concepts reviewed in Section 8.1 to the root locus of the system 
shown in Figure 8.6. For this system the open-loop transfer function is 
KG(s)H(s) = K(s + 3)(s + 4) 
(s+ !)(* +2) 
The closed-loop transfer function, T(s), is 
K(s + 3)(s + 4) 
T(s) = (1 + K)s2 + (3 + lK)s + (2 + 12#) 
(8.18) 
(8.19) 
If point s is a closed-loop system pole for some value of gain, iC, then s must 
satisfy Eqs. (8.14) and (8.15). 
R(s) 
t * 
-
7\ 
9 
-4 
-3 
-2 
K(s + 3)(* + 4) 
(s+l)(s 
+ 2) 
(a) 
C(s) 
jo 
. 
-1 
5-plane 
( b) 
FIGURE 8.6 
a. Example 
system; b. pole-zero plot 
of G(s) 

396 
Chapter 8 
Root Locus Techniques 
FIGURE 8.7 Vector representation of G(s) from Figure 8.6(a) at -2 + /3 
Consider the point —2 +/3. If this point is a closed-loop pole for some value of 
gain, then the angles of the zeros minus the angles of the poles must equal an odd 
multiple of 180°. From Figure 8.7, 
01 + #2 - 03 - 04 = 56.31° + 71.57° - 90° - 108.43° = -70.55c 
(8.20) 
/3 is not a 
Therefore, - 2 +/3 is not a point on the root locus, or alternatively, - 2 
closed-loop pole for any gain. 
If these calculations are repeated for the point —2 + ;(\/2/2), the angles do add 
up to 180°. That is, —2 +/(\/2/2) is a point on the root locus for some value of gain. 
We now proceed to evaluate that value of gain. 
From Eqs. (8.5) and (8.16), 
K = 
1 
_ 1 
TJ pole lengths 
\G(s)H(s)\ ~M~ 
nzerolengths 
(8.21) 
Looking at Figure 8.7 with the point - 2 + /3 replaced by - 2 + j(\/2/2), the gain, K, is 
calculated as 
V2 
K = UL 
3 ^ 4 
(1.22) 
LiL 
1-^2 
(2.12)(1.22) = 0.33 
(8.22) 
Thus, the point -2 + j(V2/2) is a point on the root locus for a gain of 0.33. 
We summarize what we have found as follows: Given the poles and zeros of the 
open-loop transfer function, KG(s)H(s), a point in the s-plane is on the root locus for 
a particular value of gain, K, if the angles of the zeros minus the angles of the poles, 
all drawn to the selected point on the s-plane, add up to (2k + 1)180°. Furthermore, 
gain K at that point for which the angles add up to (2k + 1)180° is found by dividing 
the product of the pole lengths by the product of the zero lengths. 

8.4 Sketching the Root Locus 
397 
Skill-Assessment Exercise 8.2 
PROBLEM: Given a unity feedback system that has the forward transfer function 
K{s + 2) 
G(s) = (s2 + 4s + 13) 
do the following: 
a. Calculate the angle of G(s) at the point (-3 + /0) by finding the algebraic sum of 
angles of the vectors drawn from the zeros and poles of G(s) to the given point. 
b. Determine if the point specified in a is on the root locus. 
c. If the point specified in a is on the root locus, find the gain, K, using the 
lengths of the vectors. 
ANSWERS: 
a. Sum of angles = 180° 
b. Point is on the root locus 
c. K = 10 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
Trylt 8.2 
Use MATLAB and the fol-
lowing statements to solve 
Skill-Assessment Exercise 
8.2. 
s = - 3 + 0 j ; 
G=(s+2)/(s*2+4*s+13); 
Theta=(180/pi)* . . . 
angle(G) 
M=abs(G); 
K=l/M 
£ 8.4 Sketching the Root Locus 
It appears from our previous discussion that the root locus can be obtained by 
sweeping through every point in the s-plane to locate those points for which the 
angles, as previously described, add up to an odd multiple of 180°. Although this task 
is tedious without the aid of a computer, the concept can be used to develop rules 
that can be used to sketch the root locus without the effort required to plot the locus. 
Once a sketch is obtained, it is possible to accurately plot just those points that are of 
interest to us for a particular problem. 
The following five rules allow us to sketch the root locus using minimal 
calculations. The rules yield a sketch that gives intuitive insight into the behavior 
of a control system. In the next section, we refine the sketch by finding actual points 
or angles on the root locus. These refinements, however, require some calculations or 
the use of computer programs, such as MATLAB. 
1. Number of branches. Each closed-loop pole moves as the gain is varied. If we 
define a branch as the path that one pole traverses, then there will be one branch 
for each closed-loop pole. Our first rule, then, defines the number of branches of 
the root locus: 
The number of branches of the root locus equals the number of closed-loop poles. 
As an example, look at Figure 8.5(6), where the two branches are shown. One 
originates at the origin, the other at -10. 
2. Symmetry. If complex closed-loop poles do not exist in conjugate pairs, the resulting 
polynomial, formed by multiplying the factors containing the closed-loop poles, 

398 
Chapter 8 
Root Locus Techniques 
*+o 
FIGURE 8.8 Poles and zeros of a general 
open-loop system with test points, Ph on the 
real axis 
would have complex coefficients. Physically realizable systems cannot have complex 
coefficients in their transfer functions. Thus, we conclude: 
The root locus is symmetrical about the real axis. 
An example of symmetry about the real axis is shown in Figure 8.5(b). 
3. Real-axis segments. Let us make use of the angle property, Eq. (8.15), of the 
points on the root locus to determine where the real-axis segments of the root 
locus exist. Figure 8.8 shows the poles and zeros of a general open-loop 
system. If an attempt is made to calculate the angular contribution of 
the poles and zeros at each point, Pi, P2, P3, and P4, along the real axis, 
we observe the following: (1) At each point the angular contribution of 
a pair of open-loop complex poles or zeros is zero, and (2) the 
contribution of the open-loop poles and open-loop zeros to the left 
of the respective point is zero. The conclusion is that the only contri-
bution to the angle at any of the points comes from the open-loop, real-
axis poles and zeros that exist to the right of the respective point. If we 
calculate the angle at each point using only the open-loop, real-axis 
poles and zeros to the right of each point, we note the following: (1) The 
angles on the real axis alternate between 0° and 180°, and (2) the angle 
is 180° for regions of the real axis that exist to the left of an odd number of poles 
and/or zeros. The following rule summarizes the findings: 
On the real axis, for K > Othe root locus exists to the left of an odd number of real-
axis, finite open-loop poles and/or finite open-loop zeros. 
Examine Figure 8.6(b). According to the rule just developed, the real-axis 
segments of the root locus are between - 1 and —2 and between - 3 and - 4 
as shown in Figure 8.9. 
4. Starting and ending points. Where does the root locus begin (zero gain) and end 
(infinite gain)? The answer to this question will enable us to expand the sketch of 
the root locus beyond the real-axis segments. Consider the closed-loop transfer 
function, T(s), described by Eq. (8.3). T(s) can now be evaluated for both large 
and small gains, K. As K approaches zero (small gain), 
T(s) 
KNG(s)DH(s) 
DG(s)D„(s) + < 
(8.23) 
From Eq. (8.23) we see that the closed-loop system poles at small gains approach 
the combined poles of G(s) and H(s). We conclude that the root locus begins at 
the poles of G(s)H(s), the open-loop transfer function. 
m 
i 
5-plane 
-»- a 
-4 
-3 
-2 
-1 
FIGURE 8.9 
Real-axis segments of the root locus for the system of Figure 8.6 

8.4 Sketching the Root Locus 
399 
At high gains, where K is approaching infinity, 
KNG{s)DH{s) 
T(s) 
€ + KNG(s)NH(s) 
(8.24) 
From Eq. (8.24) we see that the closed-loop system poles at large gains approach 
the combined zeros of G(s) and H(s). Now we conclude that the root locus ends at 
the zeros of G(s)H(s), the open-loop transfer function. 
Summarizing what we have found: 
The root locus begins at the finite and infinite poles of G(s)H(s) and ends at the 
finite and infinite zeros of G(s)H(s). 
Remember that these poles and zeros are the open-loop poles and zeros. 
In order to demonstrate this rule, look at the system in Figure 8.6(a), whose 
real-axis segments have been sketched in Figure 8.9. Using the rule just derived, 
we find that the root locus begins at the poles at - 1 and -2 and ends at the zeros at 
—3 and —4 (see Figure 8.10). Thus, the poles start out at —1 and —2 and move 
through the real-axis space between the two poles. They meet somewhere 
between the two poles and break out into the complex plane, moving as complex 
conjugates. The poles return to the real axis somewhere between the zeros at —3 
and —4, where their path is completed as they move away from each other, and 
end up, respectively, at the two zeros of the open-loop system at -3 and —4. 
5. Behavior at infinity. Consider applying Rule 4 to the following open-loop transfer 
function: 
KG(s)H(s) = 
K 
5(5 + 1)(5 + 2) 
(8.25) 
There are three finite poles, at s = 0, — 1, and - 2, and no finite zeros. 
A function can also have infinite poles and zeros. If the function approaches 
infinity as s approaches infinity, then the function has a pole at infinity. If the 
function approaches zero as s approaches infinity, then the function has a zero at 
infinity. For example, the function G(s) = s has a pole at infinity, since G(s) 
approaches infinity as s approaches infinity. On the other hand, G(s) = 1/5 has a 
zero at infinity, since G(s) approaches zero as s approaches infinity. 
Every function of s has an equal number of poles and zeros if we include the 
infinite poles and zeros as well as the finite poles and zeros. In this example, 
FIGURE 8.10 
Complete root 
locus for the system of Figure 
8.6 

400 
Chapter 8 
Root Locus Techniques 
Eq. (8.25) contains three finite poles and three infinite zeros. To illustrate, let s 
approach infinity. The open-loop transfer function becomes 
KG(s)H(s)^^ 
= 
k 
s • s • s 
(8.26) 
Each s in the denominator causes the open-loop function, KG(s)H(s), to become 
zero as that s approaches infinity. Hence, Eq. (8.26) has three zeros at infinity. 
Thus, for Eq. (8.25), the root locus begins at the finite poles of KG(s)H(s) and 
ends at the infinite zeros. The question remains: Where are the infinite zeros? We 
must know where these zeros are in order to show the locus moving from the three 
finite poles to the three infinite zeros. Rule 5 helps us locate these zeros at infinity. 
Rule 5 also helps us locate poles at infinity for functions containing more finite zeros 
than finite poles.1 
We now state Rule 5, which will tell us what the root locus looks like as it 
approaches the zeros at infinity or as it moves from the poles at infinity. The 
derivation can be found in Appendix M.l at www.wiley.com/college/nise. 
The root locus approaches straight lines as asymptotes as the locus approaches 
infinity. Further, the equation of the asymptotes is given by the real-axis intercept, aa 
and angle, 9„ as follows: 
<J„ = 
J2 finite poles - £] finite zeros 
#finite poles - #finite zeros 
(8.27) 
(8.28) 
where k = 0, ±1, ±2, ±3 and the angle is given in radians with respect to the positive 
extension of the real axis. 
Notice that the running index, k, in Eq. (8.28) yields a multiplicity of lines that 
account for the many branches of a root locus that approach infinity. Let us 
demonstrate the concepts with an example. 
Example 8.2 
Sketching a Root Locus with Asymptotes 
PROBLEM: Sketch the root locus for the system shown in Figure 8.11. 
R<s) 
+ ^ 
"V. ?\ 
9 " 
K(s + 3) 
5(5+1)(S+ 2)(5+4) 
C(s) 
FIGURE 8.11 
System for Example 8.2. 
1 Physical systems, however, have more finite poles than finite zeros, since the implied differentiation 
yields infinite output for discontinuous input functions, such as step inputs. 

8.4 Sketching the Root Locus 
401 
SOLUTION: Let us begin by calculating the asymptotes. Using Eq. (8.27), the real-
axis intercept is evaluated as 
On 
= ( _ 1 - 2 - 4 ) - ( - 3 ) _ 
4 
4 - 1 
3 
The angles of the lines that intersect at -4/3, given by Eq. (8.28), are 
Qu= 
(2k + l)n 
#finite poles - #finite zeros 
= TT/3 
forA; = 0 
= 7t 
for k = 1 
= 5TT/3 
for A: = 2 
(8.29) 
(8.30a) 
(8.30b) 
(8.30c) 
(8.30d) 
If the value for k continued to increase, the angles would begin to repeat. The 
number of lines obtained equals the difference between the number of finite poles 
and the number of finite zeros. 
Rule 4 states that the locus begins at the open-loop poles and ends at the 
open-loop zeros. For the example there are more open-loop poles than open-loop 
zeros. Thus, there must be zeros at infinity. The asymptotes tell us how we get to 
these zeros at infinity. 
Figure 8.12 shows the complete root locus as well as the asymptotes that were 
just calculated. Notice that we have made use of all the rules learned so far. The 
real-axis segments lie to the left of an odd number of poles and/or zeros. The locus 
starts at the open-loop poles and ends at the open-loop zeros. For the example 
there is only one open-loop finite zero and three infinite zeros. Rule 5, then, tells us 
that the three zeros at infinity are at the ends of the asymptotes. 
5-plane 
FIGURE 8.12 
Root locus and 
asymptotes for the system of 
Figure 8.11 

402 
Chapter 8 
Root Locus Techniques 
PROBLEM: Sketch the root locus and its asymptotes for a unity feedback system 
that has the forward transfer function 
v ' 
(5 + 2)(5 + 4)(5 + 6) 
ANSWER: The complete solution is at www.wiIey.com/college/nise. 
( 8.5 Refining the Sketch 
The rules covered in the previous section permit us to sketch a root locus rapidly. If we 
want more detail, we must be able to accurately find important points on the root locus 
along with their associated gain. Points on the real axis where the root locus enters or 
leaves the complex plane—real-axis breakaway and break-in points—and the/w-axis 
crossings are candidates. We can also derive a better picture of the root locus by finding 
the angles of departure and arrival from complex poles and zeros, respectively. 
In this section, we discuss the calculations required to obtain specific points on 
the root locus. Some of these calculations can be made using the basic root locus 
relationship that the sum of the zero angles minus the sum of the pole angles equals 
an odd multiple of 180°, and the gain at a point on the root locus is found as the ratio 
of (1) the product of pole lengths drawn to that point to (2) the product of zero 
lengths drawn to that point. We have yet to address how to implement this task. In 
the past, an inexpensive tool called a Spirule 
added the angles together rapidly 
and then quickly multiplied and divided the lengths to obtain the gain. Today we can 
rely on hand-held or programmable calculators as well as personal computers. 
Students pursuing MATLAB will learn how to apply it to the root locus at the 
end of Section 8.6. Other alternatives are discussed in Appendix H.2 at www.wiley. 
com/college/nise. The discussion can be adapted to programmable hand-held calcu-
lators. All readers are encouraged to select a computational aid at this point. Root 
locus calculations can be labor intensive if hand calculations are used. 
We now discuss how to refine our root locus sketch by calculating real-axis 
breakaway and break-in points,/w-axis crossings, angles of departure from complex 
poles, and angles of arrival to complex zeros. We conclude by showing how to find 
accurately any point on the root locus and calculate the gain. 
Real-Axis Breakaway and Break-In Points 
Numerous root loci appear to break away from the real axis as the system poles 
move from the real axis to the complex plane. At other times the loci appear to 
return to the real axis as a pair of complex poles becomes real. We illustrate this in 
Figure 8.13. This locus is sketched using the first four rules: (1) number of branches, 
(2) symmetry, (3) real-axis segments, and (4) starting and ending points. The figure 
shows a root locus leaving the real axis between —1 and -2 and returning to the real 
axis between +3 and +5. The point where the locus leaves the real axis, -o\, is called 
the breakaway point, and the point where the locus returns to the real axis, 02, is 
called the break-in point. 

8.5 Refining the Sketch 
403 
.?-pIane 
FIGURE 8.13 Root locus example showing real-axis breakaway (-o\) and break-in 
points {02) 
At the breakaway or break-in point, the branches of the root locus form an 
angle of 180° jn with the real axis, where n is the number of closed-loop poles arriving 
at or departing from the single breakaway or break-in point on the real axis (Kuo, 
1991). Thus, for the two poles shown in Figure 8.13, the branches at the breakaway 
point form 90° angles with the real axis. 
We now show how to find the breakaway and break-in points. As the two 
closed-loop poles, which are at —1 and —2 when K = 0, move toward each other, the 
gain increases from a value of zero. We conclude that the gain must be maximum 
along the real axis at the point where the breakaway occurs, somewhere between —1 
and -2. Naturally, the gain increases above this value as the poles move into the 
complex plane. We conclude that the breakaway point occurs at a point of maximum 
gain on the real axis between the open-loop poles. 
Now let us turn our attention to the break-in point somewhere between -1-3 
and +5 on the real axis. When the closed-loop complex pair returns to the real axis, 
the gain will continue to increase to infinity as the closed-loop poles move toward 
the open-loop zeros. It must be true, then, that the gain at the break-in point is the 
minimum gain found along the real axis between the two zeros. 
The sketch in Figure 8.14 shows the variation of real-axis gain. The breakaway 
point is found at the maximum gain between —1 and —2, and the break-in point is 
found at the minimum gain between +3 and +5. 
There are three methods for finding the points at which the root locus breaks 
away from and breaks into the real axis. The first method is to maximize and 
minimize the gain, K, using differential calculus. For all points on the root locus, 
Eq. (8.13) yields 
K = - _J 
G(s)H(s) 
(8.3i; 

404 
Chapter 8 
Root Locus Techniques 
FIGURE 8.14 
Variation of 
gain along the real axis for the 
root locus of Figure 8.13 
-3 
-2 -o\ -1 
3 (72 
For points along the real-axis segment of the root locus where breakaway and break-
in points could exist, s — a. Hence, along the real axis Eq. (8.31) becomes 
K = -
This equation then represents a curve of K versus a similar to that shown in Figure 8.14. 
Hence, if we differentiate Eq. (8.32) with respect to a and set the derivative equal to 
zero, we can find the points of maximum and minimum gain and hence the breakaway 
and break-in points. Let us demonstrate. 
Example 8.3 
Breakaway and Break-in Points via Differentiation 
PROBLEM: Find the breakaway and break-in points for the root locus of Figure 8.13, 
using differential calculus. 
SOLUTION: Using the open-loop poles and zeros, we represent the open-loop 
system whose root locus is shown in Figure 8.13 as follows: 
K{s-3){s- 
5) 
K{s2 -8s + 15) 
KG(s)H{s) = 
(8.33) 
(s + l){s + 2) 
(s2 + 3s + 2) 
But for all points along the root locus, KG(s)H(s) = —1, and along the real axis, 
s = a. Hence, 
K{a2 - 8a + 15) 
Solving for K, we find 
(0-2+3(7 + 2) 
K = -(o2 + 3a + 2) 
-1 
(8.34) 
(8.35) 
(0-2-8(7 + 15) 
Differentiating K with respect to a and setting the derivative equal to zero yields 
^ _ ( l l o - 2 - 2 6 o - 6 1 ) 
da 
= 0 
(8.36) 
(a2 - 8o + 15)2 
Solving for a, we find a = -1.45 and 3.82, which are the breakaway and break-in points. 

8.5 Refining the Sketch 
405 
The second method is a variation on the differential calculus method. Called 
the transition method, it eliminates the step of differentiation (Franklin, 1991). This 
method, derived in Appendix M.2 at www.wiley.com/college/nise, is now stated: 
Breakaway and break-in points satisfy the relationship 
m 
, 
n 
-i 
^ a + Zi ^cr + Pi 
where zi andp{ are the negative of the zero and pole values, respectively, ofG(s)H(s). 
Solving Eq. (8.37) for a, the real-axis values that minimize or maximize K, yields 
the breakaway and break-in points without differentiating. Let us look at an 
example. 
PROBLEM: Repeat Example 8.3 without differentiating. 
SOLUTION: Using Eq. (8.37), 
^ 3 + ^ 5 = ^ 1 + ^ 2 
<838> 
Simplifying, 
llo-2 - 26a - 61 = 0 
(8.39) 
Hence, a = -1.45 and 3.82, which agrees with Example 8.3. 
For the third method, the root locus program discussed in Appendix H.2 at www 
.wiley.com/college/nise can be used to find the breakaway and break-in points. Simply 
use the program to search for the point of maximum gain between —1 and —2 and to 
search for the point of minimum gain between +3 and +5. Table 8.2 shows the results 
of the search. The locus leaves the axis at —1.45, the point of maximum gain between 
—1 and -2, and reenters the real axis at +3.8, the point of minimum gain between +3 
and +5. These results are the same as those obtained using the first two methods. 
MATLAB also has the capability of finding breakaway and break-in points. 
The/'&rAxis Crossings 
We now further refine the root locus by finding the imaginary-axis crossings. The 
importance of the jco-axis crossings should be readily apparent. Looking at Fig-
ure 8.12, we see that the system's poles are in the left half-plane up to a particular 
value of gain. Above this value of gain, two of the closed-loop system's poles move 
into the right half-plane, signifying that the system is unstable. Theyw-axis crossing is 
a point on the root locus that separates the stable operation of the system from the 
unstable operation. The value of co at the axis crossing yields the frequency of 
oscillation, while the gain at the jco-axis crossing yields, for this example, the 
maximum positive gain for system stability. We should note here that other examples 

406 
Chapter 8 
Root Locus Techniques 
TABLE 8.2 
Data for breakaway and break-in points for the root locus of Figure 8.13 
Comment 
Real-axis value 
-1.41 
-1.42 
-1.43 
-1.44 
-1.45 
-1.46 
3.3 
3.4 
3.5 
3.6 
3.7 
3.8 
3.9 
Gain 
0.008557 
0.008585 
0.008605 
0.008617 
0.008623 
0.008622 
44.686 
37.125 
33.000 
30.667 
29.440 
29.000 
29.202 
Max. gain: breakaway 
Min. gain: break-in 
illustrate instability at small values of gain and stability at large values of gain. These 
systems have a root locus starting in the right-half-plane (unstable at small values of 
gain) and ending in the left-half-plane (stable for high values of gain). 
To find the;'o)-axis crossing, we can use the Routh-Hurwitz criterion, covered in 
Chapter 6, as follows: Forcing a row of zeros in the Routh table will yield the gain; 
going back one row to the even polynomial equation and solving for the roots yields 
the frequency at the imaginary-axis crossing. 
Example 8.5 
Frequency and Gain at Imaginary-Axis Crossing 
PROBLEM: For the system of Figure 8.11, find the frequency and gain, K, for which 
the root locus crosses the imaginary axis. For what range of K is the system stable? 
SOLUTION: The closed-loop transfer function for the system of Figure 8.11 is 
T(s) = s4 + 753 + 1452 + (8 + K)s + 3K 
(8.40) 
Using the denominator and simplifying some of the entries by multiplying any row 
by a constant, we obtain the Routh array shown in Table 8.3. 
A complete row of zeros yields the possibility for imaginary axis roots. For 
positive values of gain, those for which the root locus is plotted, only the s1 row can 
yield a row of zeros. Thus, 
-K2 - 65K + 720 = 0 
(8.41) 
From this equation K is evaluated as 
K = 9.65 
(8.42) 

8.5 Refining the Sketch 
407 
TABLE 8.3 Routh table for Eq. (8.40) 
s
4 
1 
14 
3K 
53 
7 
8 + K 
s
2 
90 -K 
21K 
s
l 
-K2 - 65K + 720 
90 -K 
s° 
21K 
Forming the even polynomial by using the s2 row with K — 9.65, we obtain 
(90 - K)s2 + 21K = 80.35s2 + 202.7 = 0 
(8.43) 
and s is found to be equal to ±;'1.59. Thus the root locus crosses the /&>-axis at 
±/1.59 at a gain of 9.65. We conclude that the system is stable for 0 < K < 9.65. 
Another method for finding the /co-axis crossing (or any point on the root 
locus, for that matter) uses the fact that at the /<w-axis crossing, the sum of angles 
from the finite open-loop poles and zeros must add to (2k + 1)180°. Thus, we can 
search /©-axis until we find the point that meets this angle condition. A computer 
program, such as the root locus program discussed in Appendix H.2 at www.wiley 
.com/college/nise or MATLAB, can be used for this purpose. Subsequent exam-
ples in this chapter use this method to determine the jco-axis crossing. 
Angles of Departure and Arrival 
In this subsection, we further refine our sketch of the root locus by finding angles 
of departure and arrival from complex poles and zeros. Consider Figure 8.15, 
which shows the open-loop poles and zeros, some of which are complex. The root 
locus starts at the open-loop poles and ends at the open-loop zeros. In order to 
sketch the root locus more accurately, we want to calculate the root locus 
departure angle from the complex poles and the arrival angle to the complex 
zeros. 
If we assume a point on the root locus e close to a complex pole, the sum of 
angles drawn from all finite poles and zeros to this point is an odd multiple of 180°. 
Except for the pole that is e close to the point, we assume all angles drawn from all 
other poles and zeros are drawn directly to the pole that is near the point. Thus, the 
only unknown angle in the sum is the angle drawn from the pole that is e close. We 
can solve for this unknown angle, which is also the angle of departure from this 
complex pole. Hence, from Figure 8.15(a), 
-01 + 02 + 03 - 04 - 95 + 06 = {2k + 1) 180° 
(8.44a) 
or 
0i = 02 + 03 - 04 - 05 + 06 - (2k + 1)180° 
(8.44b) 
If we assume a point on the root locus e close to a complex zero, the sum of 
angles drawn from all finite poles and zeros to this point is an odd multiple of 180°. 
Except for the zero that is e close to the point, we can assume all angles drawn from 
all other poles and zeros are drawn directly to the zero that is near the point. Thus, 

Chapter 8 
Root Locus Techniques 
0) 
s-plane 
-%*%+% -ft,-e5+e6 = (2k+ i)i8o 
s-plane 
- 0 , + 02 + ¾ - f t , - % + 06 = (2-¾ +1)180 
FIGURE 8.15 Open-loop poles and zeros and calculation of a. angle of departure; b. angle of 
arrival 
the only unknown angle in the sum is the angle drawn from the zero that is e close. 
We can solve for this unknown angle, which is also the angle of arrival to this 
complex zero. Hence, from Figure 8.15(6), 
or 
-01 + 02 + #3 - 0A - 05 + 06 = (2k + l)180c 
e2 = e1-o3 + e4 + e5-e6 + (2k + i)i80° 
(8.45a) 
(8.45b) 
Let us look at an example. 

8.5 Refining the Sketch 
409 
Example 8.6 
Angle of Departure from a Complex Pole 
PROBLEM: Given the unity feedback system of Figure 8.16, find the angle of 
departure from the complex poles and sketch the root locus. 
m + 
K(s + 2) 
(s + 3)(sz + 2s + 2) 
C(s) 
FIGURE 8.16 
Unity feedback 
system with complex poles 
SOLUTION: Using the poles and zeros of G(s) = (s + 2)/[(s 4- 3)(s2 + 25 + 2)] as 
plotted in Figure 8.17, we calculate the sum of angles drawn to a point € close to the 
complex pole, — 1 +/1, in the second quadrant. Thus, 
-1 
-0i - 6»2 + 93 - 6>4 = -#i - 90° + tan-1 ( - ) - tan-1 [-)= 
180 
.-1 
(8.46) 
fromwhich#= —251.6° — 108.4°. A sketch of the root locus is shown in Figure 8.17. 
Notice how the departure angle from the complex poles helps us to refine the 
shape. 
J CO 
2 
\ \ 
1 
\\ Angle of 
\\ departure 
V^1 
r3 
- i 
-%¾ 
-
-
;4 
;3 
/2 
fl 
0 
-J2 
-/3 
-)4 
s-plane 
FIGURE 8.17 
Root locus for 
system of Figure 8.16 showing 
angle of departure 

Chapter 8 
Root Locus Techniques 
Plotting and Calibrating the Root Locus 
Once we sketch the root locus using the rules from Section 8.4, we may want to 
accurately locate points on the root locus as well as find their associated gain. For 
example, we might want to know the exact coordinates of the root locus as it crosses 
the radial line representing 20% overshoot. Further, we also may want the value of 
gain at that point. 
Consider the root locus shown in Figure 8.12. Let us assume we want to find the 
exact point at which the locus crosses the 0.45 damping ratio line and the gain at that 
point. Figure 8.18 shows the system's open-loop poles and zeros along with the £ — 
0.45 line. If a few test points along the t, = 0.45 line are selected, we can evaluate 
their angular sum and locate that point where the angles add up to an odd multiple of 
180°. It is at this point that the root locus exists. Equation (8.20) can then be used to 
evaluate the gain, K, at that point. 
Selecting the point at radius 2 (r = 2) on the £ = 0.45 line, we add the angles of 
the zeros and subtract the angles of the poles, obtaining 
-01 - 0 3 - 0 4 - 0 5 = -251.5° 
(8.47) 
Since the sum is not equal to an odd multiple of 180°, the point at radius = 2 is not on 
the root locus. Proceeding similarly for the points at radius = 1.5, 1, 0.747, and 0.5, 
we obtain the table shown in Figure 8.18. This table lists the points, giving their 
radius, r, and the sum of angles indicated by the symbol Z. From the table we see that 
the point at radius 0.747 is on the root locus, since the angles add up to —180°. Using 
Eq. (8.21), the gain, K, at this point is 
K = \A\\C\\D\\E\ 
\B\ 
= 1.71 
(8.48) 
In summary, we search a given line for the point yielding a summation of angles 
(zero angles-pole angles) equal to an odd multiple of 180°. We conclude that the point 
is on the root locus. The gain at that point is then found by multiplying the pole 
lengths drawn to that point and dividing by the product of the zero lengths drawn to 
that point. A computer program, such as that discussed in Appendix H.2 at www. 
wiley.com/college/nise or MATLAB, can be used. 
£ = 0.45 
.f-plane 
Radius 
0.5 
0.747 
1.0 
1.5 
2.0 
Angle 
z. 
(degrees) 
-158.4 
-180.0 
-199.9 
-230.4 
-251.5 
v
^
^
l 
, 
FIGURE 8.18 
Finding and calibrating exact points on the root locus of Figure 8.12 

8.6 An Example 
411 
Skill-Assessment Exercise 8.4 
PROBLEM: Given a unity feedback system that has the forward transfer function 
K(s + 2) 
G^ 
= {s2-4s + 13) 
do the following: 
a. Sketch the root locus. 
b. Find the imaginary-axis crossing. 
c. Find the gain, K, at the jco-axis crossing. 
d. Find the break-in point. 
e. Find the angle of departure from the complex poles. 
ANSWERS: 
a. See solution at www.wiley.com/college/nise. 
b. s = ±;V2l 
c. 2C = 4 
d. Break-in point = —7 
e. Angle of departure = —233.1° 
The complete solution is at www.wiley.com/college/nise. 
| 
8.6 An Example 
We now review the rules for sketching and finding points on the root locus, as well as 
present an example. The root locus is the path of the closed-loop poles of a system as 
a parameter of the system is varied. Each point on the root locus satisfies the angle 
condition, ZG(s)H(s) = (2& + 1)180°. Using this relationship, rules for sketching 
and finding points on the root locus were developed and are now summarized: 
Basic Rules for Sketching the Root Locus 
Number of branches The number of branches of the root locus equals the number of 
closed-loop poles. 
Symmetry The root locus is symmetrical about the real axis. 
Real-axis segments On the real axis, for K > 0 the root locus exists to the left of an 
odd number of real-axis, finite open-loop poles and/or finite open-loop zeros. 
Starting and ending points The root locus begins at the finite and infinite poles of 
G(s)H(s) and ends at the finite and infinite zeros of G(s)H(s). 
Behavior at infinity The root locus approaches straight lines as asymptotes as the 
locus approaches infinity. Further, the equations of the asymptotes are given by 

412 
Chapter 8 
Root Locus Techniques 
the real-axis intercept and angle in radians as follows: 
J2 finite poles — J2 finite zeros 
#finite poles - #finite zeros 
(8.49) 
(2k + l)ir 
#finite poles — #finite zeros 
(8.50) 
where fc = 0,±l, ±2, ±3,.... 
Additional Rules for Refining the Sketch 
Real-axis breakaway and break-in points The root locus breaks away from the real 
axis at a point where the gain is maximum and breaks into the real axis at a point 
where the gain is minimum. 
Calculation of jco-axis crossings The root locus crosses the ;'&>-axis at the point 
where Z G(s)H(s) = (2k + 1)180°. Routh-Hurwitz or a search of the ;'w-axis for 
(2k + 1)180° can be used to find the /Vw-axis crossing. 
Angles of departure and arrival The root locus departs from complex, open-loop 
poles and arrives at complex, open-loop zeros at angles that can be calculated as 
follows. Assume a point e close to the complex pole or zero. Add all angles drawn 
from all open-loop poles and zeros to this point. The sum equals (2k + 1)180°. The 
only unknown angle is that drawn from the € close pole or zero, since the vectors 
drawn from all other poles and zeros can be considered drawn to the complex pole 
or zero that is e close to the point. Solving for the unknown angle yields the angle 
of departure or arrival. 
Plotting and calibrating the root locus All points on the root locus satisfy the 
relationship ZG(s)H(s) = (2k + 1)180°. The gain, K, at any point on the root 
locus is given by 
K = 
1 
_ 1 
[ ] f m i t e P o l e lengths 
\G(s)H(s)\ ~M~ 
n f i n i te zero lengths 
(8.51) 
Let us now look at a summary example. 
Example 8.7 
Sketching a Root Locus and Finding Critical Points 
PROBLEM: Sketch the root locus for the system shown in Figure 8.19(a) and find 
the following: 
a. The exact point and gain where the locus crosses the 0.45 damping ratio line 
b. The exact point and gain where the locus crosses the /a>-axis 
c. The breakaway point on the real axis 
d. The range of K within which the system is stable 

8.6 An Example 
413 
m 
?(9) r 
*(X) 
I 
K(s2 - 4s + 20) 
(,v + 2)(s + 4) 
C(s) 
(a) 
C = 0.45 
FIGURE 8.19 
a. System for Example 8.7; b. root locus sketch. 
SOLUTION: The problem solution is shown, in part, in Figure 8.19(6). First sketch 
the root locus. Using Rule 3, the real-axis segment is found to be between -2 and 
-4. Rule 4 tells us that the root locus starts at the open-loop poles and ends at the 
open-loop zeros. These two rules alone give us the general shape of the root locus. 
a. To find the exact point where the locus crosses the £ = 0.45 line, we can use 
the root locus program discussed in Appendix H.2 at www.wiley.com/college/ 
nise to search along the line 
0 = 180° - cos"1 0.45 = 116.7° 
(8.52) 
for the point where the angles add up to an odd multiple of 180°. Searching in 
polar coordinates, we find that the root locus crosses the £ = 0.45 line at 
3.4 Z 116.7° with a gain, K, of 0.417. 
b. To find the exact point where the locus crosses the /&>-axis, use the root locus 
program to search along the line 
0 = 90° 
(8.53) 

414 
Chapter 8 
Root Locus Techniques 
MATLAB 
for the point where the angles add up to an odd multiple of 180°. Searching in 
polar coordinates, we find that the root locus crosses the/<y-axis at ±/3.9 with 
a gain of K = 1.5. 
c. To find the breakaway point, use the root locus program to search the real 
axis between —2 and -4 for the point that yields maximum gain. Naturally, all 
points will have the sum of their angles equal to an odd multiple of 180°. A 
maximum gain of 0.0248 is found at the point -2.88. Therefore, the break-
away point is between the open-loop poles on the real axis at -2.88. 
d. From the answer to b, the system is stable for K between 0 and 1.5. 
Students who are using MATLAB should now run ch8pl in Appendix B. 
You will learn how to use MATLAB to plot and title a root locus, 
overlay constant £ and con curves, zoom into and zoom out from a 
root locus, and interact with the root locus to find critical 
points as well as gains at those points. This exercise solves 
Example 8.7 using MATLAB. 
WileyPLUS 
Control Solutions 
Ttylt 8.3 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to plot the 
root locus for Skill-
Assessment Exercise 8.5. 
Solve the remaining parts of 
the problem by clicking on 
the appropriate points on the 
plotted root locus. 
numg=poly([2 4]); 
deng=[l 
6 25]; 
G=tf(numg, deng) 
rlocus(G) 
z=0.5 
s g r i d ( z , 0) 
Skill-Assessment Exercise 8.5 
PROBLEM: Given a unity feedback system that has the forward transfer function 
K(s-2)(s-4) 
G(s) = (s2 + 6s + 25) 
do the following: 
a. Sketch the root locus. 
b. Find the imaginary-axis crossing. 
c. Find the gain, K, at the /o>-axis crossing. 
d. Find the break-in point. 
e. Find the point where the locus crosses the 0.5 damping ratio line. 
f. Find the gain at the point where the locus crosses the 0.5 damping ratio line. 
g. Find the range of gain, K, for which the system is stable. 
ANSWERS: 
a. See solution at www.wiley.com/college/nise. 
b. s = ±/4.06 
c. K = l 
d. Break-in point = +2.89 
e. 5 = -2.42+/4.18 
f. K = 0.108 
g.K<\ 
The complete solution is at www.wiley.com/college/nise. 

8.7 Transient Response Design via Gain Adjustment 
415 
I 
8.7 Transient Response Design via Gain 
Adjustment 
Now that we know how to sketch a root locus, we show how to use it for the design of 
transient response. In the last section we found that the root locus crossed the 0.45 
damping ratio line with a gain of 0.417. Does this mean that the system will respond 
with 20.5% overshoot, the equivalent to a damping ratio of 0.45? It must be 
emphasized that the formulas describing percent overshoot, settling time, and 
peak time were derived only for a system with two closed-loop complex poles 
and no closed-loop zeros. The effect of additional poles and zeros and the conditions 
for justifying an approximation of a two-pole system were discussed in Sections 4.7 
and 4.8 and apply here to closed-loop systems and their root loci. The conditions 
justifying a second-order approximation are restated here: 
1. Higher-order poles are much farther into the left half of the s-plane than the 
dominant second-order pair of poles. The response that results from a higher-
order pole does not appreciably change the transient response expected from the 
dominant second-order poles. 
2. Closed-loop zeros near the closed-loop second-order pole pair are nearly can-
celed by the close proximity of higher-order closed-loop poles. 
3. Closed-loop zeros not canceled by the close proximity of higher-order closed-loop 
poles are far removed from the closed-loop second-order pole pair. 
The first condition as it applies to the root locus is shown graphically in Figure 
8.20(A) and (b). Figure 8.20(6) would yield a much better second-order approxima-
tion than Figure 8.20(a), since closed-loop pole p3 is farther from the dominant, 
closed-loop second-order pair, p^ and p2. 
The second condition is shown graphically in Figure 8.20(c) and (d). 
Figure 8.20(d) would yield a much better second-order approximation than 
Figure 8.20(c), since closed-loop pole p3 is closer to canceling the closed-loop zero. 
(0 
.y-plane 
s-plane Pi 
n 
FIGURE 8.20 
Making second-order approximations 
0 
a 
—x—• 
x—O • x »|«»—»- a 
P3 
x Open-loop pole 
x Closed-loop pole 
O Closed-loop zero 
id) 

416 
Chapter 8 
Root Locus Techniques 
Summarizing the design procedure for higher-order systems, we arrive at the 
following: 
1. Sketch the root locus for the given system. 
2. Assume the system is a second-order system without any zeros and then find the 
gain to meet the transient response specification. 
3. Justify your second-order assumption by finding the location of all higher-order 
poles and evaluating the fact that they are much farther from the/'w-axis than the 
dominant second-order pair. As a rule of thumb, this textbook assumes a factor of 
five times farther. Also, verify that closed-loop zeros are approximately canceled 
by higher-order poles. If closed-loop zeros are not canceled by higher-order 
closed-loop poles, be sure that the zero is far removed from the dominant second-
order pole pair to yield approximately the same response obtained without the 
finite zero. 
4. If the assumptions cannot be justified, your solution will have to be simulated in 
order to be sure it meets the transient response specification. It is a good idea to 
simulate all solutions, anyway. 
We now look at a design example to show how to make a second-order 
approximation and then verify whether or not the approximation is valid. 
Mi$ > m , 
g 
* 
K(s + 1.5) 
*(.$+!)(.?+10) 
C(s) 
FIGURE 8.21 
System for Example 8.8 
Example 8.8 
Third-Order System Gain Design 
PROBLEM: Consider the system shown in Figure 8.21. Design the 
value of gain, K, to yield 1.52% overshoot. Also estimate the 
settling time, peak time, and steady-state error. 
SOLUTION: The root locus is shown in Figure 8.22. Notice that this 
is a third-order system with one zero. Breakaway points on the real 
m 
£ = 0.8 
s-plane 
1.19 +./0.90, K =12.79 
-0.87 +/).66, K= 7.36 
-10 
-9 
X = Closed-loop pole 
X = Open-loop pole 
FIGURE 8.22 
Root locus for Example 8.8 

8.7 Transient Response Design via Gain Adjustment 
417 
axis can occur between 0 and —1 and between —1.5 and -10, where the gain 
reaches a peak. Using the root locus program and searching in these regions for 
the peaks in gain, breakaway points are found at —0.62 with a gain of 2.511 and at 
—4.4 with a gain of 28.89. A break-in point on the real axis can occur between 
—1.5 and —10, where the gain reaches a local minimum. Using the root locus 
program and searching in these regions for the local minimum gain, a break-in 
point is found at -2.8 with a gain of 27.91. 
Next assume that the system can be approximated by a second-order, under-
damped system without any zeros. A 1.52% overshoot corresponds to a damping 
ratio of 0.8. Sketch this damping ratio line on the root locus, as shown in Figure 8.22. 
Use the root locus program to search along the 0.8 damping ratio line for the 
point where the angles from the open-loop poles and zeros add up to an odd multiple of 
180°. This is the point where the root locus crosses the 0.8 damping ratio or 1.52 percent 
overshoot line. Three points satisfy this criterion: —0.87 ± /0.66, — 1.19 ± /0.90, and 
-4.6 ±j 3.45 with respective gains of 7.36,12.79, and 39.64. For each point the settling 
time and peak time are evaluated using 
Ts = ^ - 
(8.54) 
where p% is the real part of the closed-loop pole, and also using 
r» = 
J = 
(8.55) 
CO >nVl-? 
where con \ / l — f2 is the imaginary part of the closed-loop pole. 
To test our assumption of a second-order system, we must calculate the 
location of the third pole. Using the root locus program, search along the negative 
extension of the real axis between the zero at -1.5 and the pole at -10 for points 
that match the value of gain found at the second-order dominant poles. For each of 
the three crossings of the 0.8 damping ratio line, the third closed-loop pole is at 
—9.25, -8.6, and —1.8, respectively. The results are summarized in Table 8.4. 
Finally, let us examine the steady-state error produced in each case. Note that 
we have little control over the steady-state error at this point. When the gain is set 
to meet the transient response, we have also designed the steady-state error. For 
the example, the steady-state error specification is given by Kv and is calculated as 
*-53*°M=§§ 
(a56) 
The results for each case are shown in Table 8.4. 
How valid are the second-order assumptions? From Table 8.4, Cases 1 and 2 
yield third closed-loop poles that are relatively far from the closed-loop zero. For 
these two cases there is no pole-zero cancellation, and a second-order system 
TABLE 8.4 Characteristics of the system of Example 8.8 
Closed-loop 
Closed-loop 
Third 
Settling 
Peak 
Case 
poles 
zero 
Gain 
closed-loop pole 
time 
time 
Kv 
1 
-0.87 ±/0.66 
-1.5+/0 
7.36 
-9.25 
4.60 
4.76 
1.1 
2 
-1.19 ±/0.90 
-1.5+/0 
12.79 
-8.61 
3.36 
3.49 
1.9 
3 
-4.60+/3.45 
-1.5+/0 
39.64 
-1.80 
0.87 
0.91 
5.9 

418 
Chapter 8 
Root Locus Techniques 
Case 2 response 
Case 3 response 
— Third-order, K = 12.79 
Second-order, K = 12.79 
— Third-order, A-= 39.64 
_ 
Second-order, K= 39.64 
0 0.5 
1 
1.5 
2 2.5 
3 3.5 
4 4.5 
5 
Time (seconds) 
(«) 
FIGURE 8.23 Second- and third-order responses for Example 8.8: a. Case 2; b. Case 3 
0 0.5 
1 1.5 
2 2.5 3 3.5 4 4.5 5 
Time (seconds) 
MATLAB 
approximation is not valid. In Case 3, the third closed-loop pole and the closed-loop 
zero are relatively close to each other, and a second-order system approximation 
can be considered valid. In order to show this, let us make a partial-fraction 
expansion of the closed-loop step response of Case 3 and see that the amplitude of 
the exponential decay is much less than the amplitude of the underdamped 
sinusoid. The closed-loop step response, 03(5), formed from the closed-loop poles 
and zeros of Case 3 is 
C3(s) 
= 
39.64(5 + 1.5) 
s(s + 1.8)(5 + 4.6+/3.45)(5 + 4.6 - /3.45) 
39.64(5 + 1.5) 
5(5+ 1.8)(52+ 9.25+ 33.06) 
1 
0.3 
1.3(5 + 4.6) + 1.6(3.45) 
5 
5(5 + 18) 
(5 + 4.6)2+3.452 
(8.57) 
Thus, the amplitude of the exponential decay from the third pole is 0.3, and the 
amplitude of the underdamped response from the dominant poles is 
\/l.3 2 + 1.62 = 2.06. Hence, the dominant pole response is 6.9 times as large as 
the nondominant exponential response, and we assume that a second-order 
approximation is valid. 
Using a simulation program, we obtain Figure 8.23, which shows comparisons 
of step responses for the problem we have just solved. Cases 2 and 3 are plotted for 
both the third-order response and a second-order response, assuming just the 
dominant pair of poles calculated in the design problem. Again, the second-order 
approximation was justified for Case 3, where there is a small difference in percent 
overshoot. The second-order approximation is not valid for Case 2. Other than the 
excess overshoot, Case 3 responses are similar. 
Students who are using MATLAB should now run ch8p2 in Appendix B. 
You will learn how to use MATLAB to enter a value of percent 
overshoot from the keyboard. MATLAB will then draw the root locus 
and overlay the percent overshoot line requested. You will then 
interact with MATLAB and select the point of intersection of the 

8.8 Generalized Root Locus 
419 
root locus with the requested percent overshoot line. MATLAB 
will respondwith the value of gain, all closed-looppoles at that 
gain, and a closed-loop step response plot corresponding to the 
selected point. This exercise solves Example 8 . 8 using MATLAB. 
Students who are using MATLAB may want to explore the SISO Design 
Tool described in Appendix E at www.wiley.com/college/nise. The 
SISO Design Tool is a convenient and intuitive way to obtain, view, 
and interact with a system's root locus . Section D. 7 describes the 
advantages of using the tool, while Section D.8 describes how to 
use it. For practice, you may want to apply the SISO Design Tool to 
some of the problems at the end of this chapter. 
Skill-Assessment Exercise 8.6 
PROBLEM: Given a unity feedback system that has the forward-path transfer 
function 
G(s) = {s + 2)(s + 4)(s + 6) 
do the following: 
a. Sketch the root locus. 
b. Using a second-order approximation, design the value of K to yield 10% 
overshoot for a unit-step input. 
c. Estimate the settling time, peak time, rise time, and steady-state error for the 
value of K designed in (b). 
(I. Determine the validity of your second-order approximation. 
ANSWERS: 
a. See solution located at www.wiley.com/college/nise. 
b. K = 45.55 
c. Ts = 1.97 s, Tp = 1.13.9, Tr = 0.53s, and estep(oo) = 0.51 
d. Second-order approximation is not valid. 
The complete solution is located at www.wiley.com/college/nise. 
Gui Tool 
£ 8.8 Generalized Root Locus 
Up to this point we have always drawn the root locus as a function of the forward-
path gain, K. The control system designer must often know how the closed-loop 
poles change as a function of another parameter. For example, in Figure 8.24, the 
parameter of interest is the open-loop pole at -p^. How can we obtain a root locus 
for variations of the value of p^. 

420 
Chapter 8 
Root Locus Techniques 
If the function KG(s)H(s) is formed as 
KG{s)H{s) = 
10 
[s + 
2){s+Pl) 
(8.58) 
«W *K 
V. ^ 
^ 
, 
10 
(s + 2)(s + /?,) 
C(5) 
FIGURE 8.24 System requiring a root locus 
calibrated with p1 as a parameter 
the problem is that pj is not a multiplying factor of the function, as the 
gain, K, was in all of the previous problems. The solution to this 
dilemma is to create an equivalent system where px appears as the 
forward-path gain. Since the closed-loop transfer function's denomi-
nator is 1 + KG(s)H(s), we effectively want to create an equivalent 
system whose denominator is 1 + 
p1G(s)H(s). 
For the system of Figure 8.24, the closed-loop transfer function is 
m-,. 5ffL,-.,.,. .^,, 
(8.59) 
1 + KG(s)H(s) 
s2 + (p1 + 2)s + 2Pl + 10 
Isolating p l 5 we have 
T(s) = 
10 
(8.60) 
$2+25 + 1 0 + ^ ( 5 + 2) 
Converting the denominator to the form [1 +plG(s)H(s)] 
by dividing numerator 
and denominator by the term not included with p1, s2 + 2s + 10, we obtain 
10 
rw = 
s2 + 2s + 10 
1 
Pi(* + 2) 
52 + 25 + 10 
Conceptually, Eq. (8.61) implies that we have a system for which 
Pi (s + 2) 
KG(s)H(s) 
= 52 + 2s + 10 
(8.61] 
(8.62) 
The root locus can now be sketched as a function of ph assuming the open-loop 
system of Eq. (8.62). The final result is shown in Figure 8.25. 
5-plane 
-10 
FIGURE 8.25 Root locus for 
the system of Figure 8.24, with 
px as a parameter 

8.9 Root Locus for Positive-Feedback Systems 
421 
Skill-Assessment Exercise 8.7 
PROBLEM: Sketch the root locus for variations in the value of pti for a unity 
feedback system that has the following forward transfer function: 
G(s) = 
100 
WileyPLUS 
C33SJ 
Control Solutions 
s{s+Pi) 
ANSWER: The complete solution is at www.wiley.com/college/nise. 
In this section, we learned to plot the root locus as a function of any system 
parameter. In the next section we will learn how to plot root loci for positive-
feedback systems. 
( 
8.9 
Root Locus for Positive-Feedback 
Systems 
The properties of the root locus were derived from the system of Figure 
8.1. This is a negative-feedback system because of the negative summing 
of the feedback signal to the input signal. The properties of the root locus 
change dramatically if the feedback signal is added to the input rather 
than subtracted. A positive-feedback system can be thought of as a 
negative-feedback system with a negative value of H(s). Using this 
concept, we find that the transfer function for the positive-feedback 
system shown in Figure 8.26 is 
T(s) = 
KG{s) 
1 - KG(s)H{s) 
R(s) 
KG(s) 
C(s) 
His) 
FIGURE8.26 Positive-feedback system 
(8.63) 
We now retrace the development of the root locus for the denominator of 
Eq. (8.63). Obviously, a pole, s, exists when 
KG(s)H(s) = 1 = 1Z^360° k = 0, ±1, ±2, ±3,... 
(8.64) 
Therefore, the root locus for positive-feedback systems consists of all points on the 
s-plane where the angle of KG(s)H(s) = k360°. How does this relationship change 
the rules for sketching the root locus presented in Section 8.4? 
1. Number of branches. The same arguments as for negative feedback apply to this 
rule. There is no change. 
2. Symmetry. The same arguments as for negative feedback apply to this rule. There 
is no change. 
3. Real-axis segments. The development in Section 8.4 for the real-axis segments 
led to the fact that the angles of G(s)H(s) along the real axis added up to either an 
odd multiple of 180° or a multiple of 360°. Thus, for positive-feedback systems the 

Chapter 8 
Root Locus Techniques 
root locus exists on the real axis along sections where the locus for negative-
feedback systems does not exist. The rule follows: 
Real-axis segments: On the real axis, the root locus for positive-feedback 
systems 
exists to the left of an even number of real-axis, finite open-loop poles and/or finite 
open-loop zeros. 
The change in the rule is the word even; for negative-feedback systems the locus 
existed to the left of an odd number of real-axis, finite open-loop poles and/or 
zeros. 
4. Starting and ending points. You will find no change in the development in Section 
8.4 if Eq. (8.63) is used instead of Eq. (8.12). Therefore, we have the following 
rule. 
Starting and ending points: The root locus for positive-feedback systems begins at 
the finite and infinite poles of G(s)H(s) and ends at the finite and infinite zeros of 
G(s)H(s). 
5. Behavior at infinity. The changes in the development of the asymptotes begin at 
Eq. (M.4) in Appendix M at www.wiley.com/college/nise since positive-feedback 
systems follow the relationship in Eq. (8.64). That change yields a different slope 
for the asymptotes. The value of the real-axis intercept for the asymptotes 
remains unchanged. The student is encouraged to go through the development 
in detail and show that the behavior at infinity for positive-feedback systems is 
given by the following rule: 
The root locus approaches straight lines as asymptotes as the locus approaches 
infinity. Further, the equations of the asymptotes for positive-feedback systems are 
given by the real-axis intercept, aa, and angle, 9a, as follows: 
^2 finite poles — J2 finite zeros 
# finite poles - # finite zeros 
# finite poles — # finite zeros 
where k — 0, ± 1 , ± 2 , ± 3 , . . . , and the angle is given in radians with respect to 
the positive extension of the real axis. 
The change we see is that the numerator of Eq. (8.66) is k2rr instead of 
{2k + 1)TT. 
What about other calculations? The imaginary-axis crossing can be found using 
the root locus program. In a search of the/w-axis, you are looking for the point where 
the angles add up to a multiple of 360° instead of an odd multiple of 180°. The 
breakaway points are found by looking for the maximum value of K. The break-in 
points are found by looking for the minimum value of K. 
When we were discussing negative-feedback systems, we always made the root 
locus plot for positive values of gain. Since positive-feedback systems can also be 
thought of as negative-feedback systems with negative gain, the rules developed in 
this section apply equally to negative-feedback systems with negative gain. Let us 
look at an example. 
(8.65) 

8.9 Root Locus for Positive-Feedback Systems 
423 
Example 8.9 
Root Locus for a Positive-Feedback System 
PROBLEM: Sketch the root locus as a function of negative gain, K, for the system 
shown in Figure 8.11. 
SOLUTION: The equivalent positive-feedback system found by pushing — 1, asso-
ciated with K, to the right past the pickoff point is shown in Figure 8.27(a). 
R(s) + 
K(s + 3) 
s(s+ l)(s + 2){s + 4) 
-1 
C(s) 
(a) 
jo.) 
s-plane 
j 
i 
i 
•*- a 
1 
2 
3 
(b) 
Therefore, as the gain of the equivalent system goes through positive values of K, 
the root locus will be equivalent to that generated by the gain, K, of the original 
system in Figure 8.11 as it goes through negative values. 
The root locus exists on the real axis to the left of an even number of real, 
finite open-loop poles and/or zeros. Therefore, the locus exists on the entire 
positive extension of the real axis, between —1 and —2 and between —3 and 
—4. Using Eq. (8.27), the aa intercept is found to be 
( - 1 - 2 - 4 ) - ( - 3 ) = 
4 
4 - 1 
3 
a„ = 
(8.67) 
The angles of the lines that intersect at —4/3 are given by 
0u_ 
kin 
# finite poles — # finite zeros 
= 0 
for£ = 0 
= 2ar/3 
forfc=l 
= 4TT/3 
for& = 2 
The final root locus sketch is shown in Figure 827(b) 
(8.68a) 
(8.68b) 
(8.68c) 
(8.68d) 
FIGURE 8.27 
a. Equivalent 
positive-feedback system for 
Example 8.9; b. root locus 

424 
Chapter 8 
Root Locus Techniques 
Skill-Assessment Exercise 8.8 
PROBLEM: Sketch the root locus for the positive-feedback system whose forward 
transfer function is 
G(s) = 
K{s + 4) 
{s + l)(s + 2){s + 3) 
The system has unity feedback. 
ANSWER: The complete solution is at www.wiley.com/college/nise. 
( 8.10 Pole Sensitivity 
The root locus is a plot of the closed-loop poles as a system parameter is varied. 
Typically, that system parameter is gain. Any change in the parameter changes the 
closed-loop poles and, subsequently, the performance of the system. Many times the 
parameter changes against our wishes, due to heat or other environmental condi-
tions. We would like to find out the extent to which changes in parameter values 
affect the performance of our system. 
The root locus exhibits a nonlinear relationship between gain and pole 
location. Along some sections of the root locus, (1) very small changes in gain 
yield very large changes in pole location and hence performance; along other 
sections of the root locus, (2) very large changes in gain yield very small changes 
in pole location. In the first case we say that the system has a high sensitivity to 
changes in gain. In the second case, the system has a low sensitivity to changes in 
gain. We prefer systems with low sensitivity to changes in gain. 
In Section 7.7, we defined sensitivity as the ratio of the fractional change in a 
function to the fractional change in a parameter as the change in the parameter 
approaches zero. Applying the same definition to the closed-loop poles of a system 
that vary with a parameter, we define root sensitivity as the ratio of the fractional 
change in a closed-loop pole to the fractional change in a system parameter, such as 
gain. Using Eq. (7.75), we calculate the sensitivity of a closed-loop pole, s, to gain, K: 
Sx-K — — 
K 8s 
s8K 
(8.69) 
where s is the current pole location, and K is the current gain. Using Eq. (8.69) and 
converting the partials to finite increments, the actual change in the closed-loop 
poles can be approximated as 
As = s{Ss:K AK 
K 
(8.70) 
where As is the change in pole location, and AK/K is the fractional change in the 
gain, K. Let us demonstrate with an example. We begin with the characteristic 
equation from which 8s/8K can be found. Then, using Eq. (8.69) with the current 
closed-loop pole, s, and its associated gain, K, we can find the sensitivity. 

8.10 Pole Sensitivity 
425 
Example 8.10 
Root Sensitivity of a Closed-Loop System to Gain Variations 
PROBLEM: Find the root sensitivity of the system in Figure 8.4 at s = —9.47 and 
- 5 + /5. Also calculate the change in the pole location for a 10% change in K. 
SOLUTION: The system's characteristic equation, found from the closed-loop 
transfer function denominator, is s2 + 10s + K = 0. Differentiating with respect 
to K, we have 
2 ^ + 1 0 - ^ + 1 = 0 
. 
(8.71) 
8K 
from which 
8s 
8K 
- 1 
8K 
2s + 10 
Substituting Eq. (8.72) into Eq. (8.69), the sensitivity is found to be 
SS-.K — 
K 
- 1 
72s+ 10 
(8.72) 
(8.73) 
For s = -9.47, Table 8.1 shows K = 5. Substituting these values into Eq. (8.73) 
yields SS:K — -0.059. The change in the pole location for a 10% change in K can be 
found using Eq. (8.70), with s = -9.47, AK/K = 0.1, and SS:K = -0.059. Hence, 
As = 0.056, or the pole will move to the right by 0.056 units for a 10% change in K. 
For £ = - 5 +/5, Table 8.1 shows K — 50. Substituting these values into Eq. 
(8.73) yields 5,JC = 1/(1 +/1) = (1/V2)Z - 45°. The change in the pole location for 
a 10% change in K can be found using Eq. (8.70), with s = - 5 +/5, AK/K = 0.1, 
and SS:K = (l/\/2)Z — 45°. Hence, As = - / 5 , or the pole will move vertically by 0.5 
unit for a 10% change in K. 
In summary, then, at K = 5,SS:K = -0.059. At K = 50, SS:K = {l/y/2)Z - 45°. 
Comparing magnitudes, we conclude that the root locus is less sensitive to changes in 
gain at the lower value of K. Notice that root sensitivity is a complex quantity 
possessing both the magnitude and direction information from which the change in 
poles can be calculated. 
Skill-Assessment Exercise 8.9 
PROBLEM: A negative unity feedback system has the forward transfer function 
G(s) = ^
l 
w 
s(s + 2) 
If K is set to 20, find the changes in closed-loop pole location for a 5% change in K. 
ANSWER: For the closed-loop pole at -21.05, As = -0.9975; for the closed-loop 
pole at -0.95, As = -0.0025. 
WileyPLUS 
CJJSJ 
Control Solutions 
The complete solution is at www.wiley.com/college/nise. 

426 
Chapter 8 
Root Locus Techniques 
Case Studies 
Antenna Control: Transient Design via Gain 
The main thrust of this chapter is to demonstrate design of higher-order systems 
(higher than two) through gain adjustment. Specifically, we are interested in 
determining the value of gain required to meet transient response requirements, 
such as percent overshoot, settling time, and peak time. The following case study 
emphasizes this design procedure, using the root locus. 
PROBLEM: Given the antenna azimuth position control system shown on the front 
endpapers, Configuration 1, find the preamplifier gain required for 25% overshoot. 
SOLUTION: The block diagramfor the system was derived in the Case Studies sectionin 
Chapter 5 and is shown in Figure 5.34(c), where G{s) = 6.63K/[s(s + 1.71)(5 + 100)]. 
First a sketch of the root locus is made to orient the designer. The real-axis 
segments are between the origin and -1.71 and from —100 to infinity. The locus 
begins at the open-loop poles, which are all on the real axis at the origin, -1.71, and 
-100. The locus then moves toward the zeros at infinity by following asymptotes 
that, from Eqs. (8.27) and (8.28), intersect the real axis at -33.9 at angles of 60°, 
180°, and —60°. A portion of the root locus is shown in Figure 8.28. 
£=0.404 
Additional 
open-loop pole 
at-100 
FIGURE 8.28 Portion of the 
root locus for the antenna 
control system 
i-plane 
-4 
-2 
From Eq. (4.39), 25% overshoot corresponds to a damping ratio of 0.404. Now 
draw a radial line from the origin at an angle of cos-1 £ = 113.8. The intersection of 
this line with the root locus locates the system's dominant, second-order closed-
loop poles. Using the root locus program discussed in Appendix H.2 at www.wiley 
.com/college/nise to search the radial line for 180° yields the closed-loop dominant 
poles as 2.063 Z113.80 = -0.833 ±,/1.888. The gain value yields 6.63^ = 425.7, 
from which K = 64.21. 

Case Studies 
427 
Checking our second-order assumption, the third pole must be to the left of 
the open-loop pole at —100 and is thus greater than five times the real part of 
the dominant pole pair, which is -0.833. The second-order approximation is 
thus valid. 
The computer simulation of the closed-loop system's step response in 
Figure 8.29 shows that the design requirement of 25% overshoot is met. 
4 
5 
6 
7 
8 
9 
Time (seconds) 
FIGURE 8.29 Step response of the gain-adjusted antenna control system 
10 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. Referring to the antenna azimuth position control system shown on the 
front endpapers, Configuration 2, do the following: 
a. Find the preamplifier gain, K, required for an 8-second settling time. 
b. Repeat, u s i n g MATLAB. 
MATLA8 
UFSS Vehicle: Transient Design via Gain 
In this case study, we apply the root locus to the UFSS vehicle pitch control loop. 
The pitch control loop is shown with both rate and position feedback on the back 
endpapers. In the example that follows, we plot the root locus without the rate 
feedback and then with the rate feedback. We will see the stabilizing effect that rate 
feedback has upon the system. 
PROBLEM: Consider the block diagram of the pitch control loop for the UFSS 
vehicle shown on the back endpapers (Johnson, 1980). 
a. If K2 = 0 (no rate feedback), plot the root locus for the system as a function of 
pitch gain, K\, and estimate the settling time and peak time of the closed-loop 
response with 20% overshoot. 
b. Let K2 = K\ (add rate feedback) and repeat a. 
Design 
• >• 

428 
Chapter 8 
Root Locus Techniques 
SOLUTION: 
a. Letting K2 = 0, the open-loop transfer function is 
0.25^1(5 + 0.435) 
G(s)H(s) = [S + 1.23)(5 + 2)(52 + 0.2265 + 0.0169) 
(8.74) 
from which the root locus is plotted in Figure 8.30. Searching along the 20% 
overshoot line evaluated from Eq. (4.39), we find the dominant second-order 
poles to be -0.202 ±/0.394 with a gain of K = 0.25/^ = 0.706, or Ki = 2.824. 
20% 
-3 
-2 
X = Closed-loop pole 
X = Open-loop pole 
-0.202 + ./0.394 
-X 
X^-—O 
FIGURE 8.30 
Root locus of pitch control loop without rate feedback, UFSS vehicle 
From the real part of the dominant pole, the settling time is estimated to be 
Ts = 4/0.202 = 19.8 seconds. From the imaginary part of the dominant pole, the 
peak time is estimated to be Tp = TF/0.394 = 7.97 seconds. Since our estimates 
are based upon a second-order assumption, we now test our assumption by 
finding the third closed-loop pole location between -0.435 and -1.23 and the 
fourth closed-loop pole location between —2 and infinity. Searching each of 
these regions for a gain of K = 0.706, we find the third and fourth poles at 
—0.784 and —2.27, respectively. The third pole, at -0.784, may not be close 
enough to the zero at -0.435, and thus the system should be simulated. The 
fourth pole, at -2.27, is 11 times as far from the imaginary axis as the dominant 
poles and thus meets the requirement of at least five times the real part of the 
dominant poles. 
A computer simulation of the step response for the system, which is shown 
in Figure 8.31, shows a 29% overshoot above a final value of 0.88, approximately 
20-second settling time, and a peak time of approximately 7.5 seconds. 

Case Studies 
429 
1.2 
1.0 
0.8 
0.6 
0.4 
0.2 
-
Final value / 
N. 
V 
/ 
y 
i 
i 
i 
i 
1 
. 
J 
L .... 
1 
w 
9 
12 
15 
Time (seconds) 
18 
21 
24 
FIGURE 8.31 Computer 
simulation of step response of 
pitch control loop without rate 
feedback, UFSS vehicle 
b. Adding rate feedback by letting K2 = K\ in the pitch control system shown on 
the back endpapers, we proceed to find the new open-loop transfer function. 
Pushing —K\ to the right past the summing junction, dividing the pitch rate 
sensor by ~Kt, and combining the two resulting feedback paths obtaining 
(5 + 1) give us the following open-loop transfer function: 
G(s)H(s) = 
0.25Kj{s + 0.435)(5 + 1) 
[s + 1.23)(^ + 2)(52 + 0.2265 + 0.0169) 
(8.75) 
Notice that the addition of rate feedback adds a zero to the open-loop transfer 
function. The resulting root locus is shown in Figure 8.32. Notice that this root 
locus, unlike the root locus in a, is stable for all values of gain, since the locus 
does not enter the right half of the 5-plane for any value of positive gain, 
-1.024 +j 1.998 
AT=5.17; AT] =20. 
X = Closed-loop pole 
X = Open-loop pole 
.v-plane 
FIGURE 8 3 2 
Root locus of 
pitch control loop with rate 
feedback, UFSS vehicle 

430 
Chapter 8 
Root Locus Techniques 
FIGURE 8.33 Computer 
simulation of step response 
of pitch control loop with rate 
feedback, UFSS vehicle 
1.0 
0.8 
0.6 
0.4 
0.2 
Final value 
• J — * • 
4 
6 
Time (seconds) 
10 
MATLAB 
K = 0,25¾. Also notice that the intersection with the 20% overshoot line is 
much farther from the imaginary axis than is the case without rate feedback, 
resulting in a faster response time for the system. 
The root locus intersects the 20% overshoot line at -1.024 ±/1.998 with a 
gain of K = 0.25K\ = 5.17, or K\ = 20.68. Using the real and imaginary parts of 
the dominant pole location, the settling time is predicted to be Ts = 4/1.024 = 
3.9 seconds, and the peak time is estimated to be Tp — #/1.998 = 1.57 seconds. 
The new estimates show considerable improvement in the transient response as 
compared to the system without the rate feedback. 
Now we test our second-order approximation by finding the location of the 
third and fourth poles between -0.435 and —1. Searching this region for a gain 
of K = 5.17, we locate the third and fourth poles at approximately -0.5 and 
-0.91. Since the zero at -1 is a zero of H(s), the student can verify that this zero 
is not a zero of the closed-loop transfer function. Thus, although there may be 
pole-zero cancellation between the closed-loop pole at —0.5 and the closed-
loop zero at -0.435, there is no closed-loop zero to cancel the closed-loop pole 
at -0.91.2 Our second-order approximation is not valid. 
A computer simulation of the system with rate feedback is shown in 
Figure 8.33. Although the response shows that our second-order approximation 
is invalid, it still represents a considerable improvement in performance over 
the system without rate feedback; the percent overshoot is small, and the 
settling time is about 6 seconds instead of about 20 seconds. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. For the UFSS vehicle (Johnson, 1980) heading control system shown on the 
back endpapers, and introduced in the case study challenge in Chapter 5, do the 
following: 
a. Let K2 — K\ and find the value of K\ that yields 10% overshoot. 
b. Repeat, using MATLAB. 
2 The zero at - 1 shown on the root locus plot of Figure 8.32 is an open-loop zero since it comes from the 
numerator of H(s). 

Summary 
We have concluded the chapter with two case studies showing the use and 
application of the root locus. We have seen how to plot a root locus and estimate 
the transient response by making a second-order approximation. We saw that the 
second-order approximation held when rate feedback was not used for the UFSS. 
When rate feedback was used, an open-loop zero from H(s) was introduced. Since it 
was not a closed-loop zero, there was no pole-zero cancellation, and a second-order 
approximation could not be justified. In this case, however, the transient response 
with rate feedback did represent an improvement in transient response over the 
system without rate feedback. In subsequent chapters we will see why rate feedback 
yields an improvement. We will also see other methods of improving the transient 
response. 
^ Summary^ 
In this chapter, we examined the root locus, a powerful tool for the analysis and design 
of control systems. The root locus empowers us with qualitative and quantitative 
information about the stability and transient response of feedback control systems. 
The root locus allows us to find the poles of the closed-loop system by starting from the 
open-loop system's poles and zeros. It is basically a graphical root-solving technique. 
We looked at ways to sketch the root locus rapidly, even for higher-order 
systems. The sketch gave us qualitative information about changes in the transient 
response as parameters were varied. From the locus we were able to determine 
whether a system was unstable for any range of gain. 
Next we developed the criterion for determining whether a point in the s-plane 
was on the root locus: The angles from the open-loop zeros, minus the angles from the 
open-loop poles drawn to the point in the .s-plane, add up to an odd multiple of 180°. 
The computer program discussed in Appendix G.2 at www.wiley.com/college/ 
nise helps us to search rapidly for points on the root locus. This program allows us to 
find points and gains to meet certain transient response specifications as long as we 
are able to justify a second-order assumption for higher-order systems. Other 
computer programs, such as MATLAB, plot the root locus and allow the user to 
interact with the display to determine transient response specifications and system 
parameters. 
Our method of design in this chapter is gain adjustment. We are limited to 
transient responses governed by the poles on the root locus. Transient responses 
represented by pole locations outside of the root locus cannot be obtained by a 
simple gain adjustment. Further, once the transient response has been established, 
the gain is set, and so is the steady-state error performance. In other words, by a 
simple gain adjustment, we have to trade off between a specified transient response 
and a specified steady-state error. Transient response and steady-state error cannot 
be designed independently with a simple gain adjustment. 
We also learned how to plot the root locus against system parameters other 
than gain. In order to make this root locus plot, we must first convert the closed-loop 
transfer function into an equivalent transfer function that has the desired system 
parameter in the same position as the gain. The chapter discussion concluded with 
positive-feedback systems and how to plot the root loci for these systems. 
The next chapter extends the concept of the root locus to the design of 
compensation networks. These networks have as an advantage the separate design 
of transient performance and steady-state error performance. 

432 
Chapter 8 
Root Locus Techniques 
f^ Review Questions ] J 
1. What is a root locus? 
2. Describe two ways of obtaining the root locus. 
3. If KG(s)H(s) = 5Z1800, for what value of gain is s a point on the root locus? 
4. Do the zeros of a system change with a change in gain? 
5. Where are the zeros of the closed-loop transfer function? 
6. What are two ways to find where the root locus crosses the imaginary axis? 
7. How can you tell from the root locus if a system is unstable? 
8. How can you tell from the root locus if the settling time does not change over a 
region of gain? 
9. How can you tell from the root locus that the natural frequency does not change 
over a region of gain? 
10. How would you determine whether or not a root locus plot crossed the real axis? 
11. Describe the conditions that must exist for all closed-loop poles and zeros in 
order to make a second-order approximation. 
12. What rules for plotting the root locus are the same whether the system is a 
positive- or a negative-feedback system? 
13. Briefly describe how the zeros of the open-loop system affect the root locus and 
the transient response. 
Problems 
1. For each of the root loci shown in Figure P8.1, tell 
whether or not the sketch can be a root locus. If the 
sketch cannot be a root locus, explain why. Give all 
reasons. [Section: 8.4] 
s-plane 
(«) 
*~8 
JO) 
k 
-X-O 
s-plane 
- X 
- 5 
id) 
X s-plane 
JO) 
j-plane 
-*—X-
tg) 
s-plane 
FIGURE P8.1 

Problems 
433 
2. Sketch the general shape of the root 
wileypws 
locus for each of the open-loop pole- 
tfMll^ 
zero plots shown in Figure P8.2. 
control solutions 
[Section: 8.4] 
Jta 
-x 
x-
j-plane 
/o 
3! 5-plane 
jco 
j; s-plane 
—O 
O 
(¢) 
jo) 
)[ s-plane 
p 
jco 
X X 
X X 
s^A&ne. 
O—O 
splane 
—*—x—- a 
if) 
FIGURE P8.2 
3. Sketch the root locus for the unity feedback system 
shown in Figure P8.3 for the following transfer 
functions: [Section: 8.4] 
K(s + 2){s + 6) 
a. G(s) = 
b. G(s) = 
c. G(s) = 
s2 
d. G(s) = 
s2 + 8s + 25 
K{s2 + 4) 
(*2 + l) 
K{s2 + 1) 
K 
{s + lY(s + 4) 
m 
G(s) 
cm 
4. Let 
FIGURE P8.3 
G(s)=-> (5 + 6) 
in Figure P8.3. [Section: 8.5] 
a. Plot the root locus. 
b. Write an expression for the closed-loop transfer 
function at the point where the three closed-loop 
poles meet. 
5. Let 
^ ) = ,2 + 2, + 2 
with K> 0 in Figure P8.3. [Sections: 8.5, 8.9] 
a. Find the range of K for closed-loop stability. 
b. Sketch the system's root locus. 
c. Find the position of the closed-loop poles when 
K = 1 and K = 2. 
6. For the open-loop pole-zero plot shown in Figure 
P8.4, sketch the root locus and find the break-in 
point. [Section: 8.5] 
jo) 
i 
s-plane 
-o-
-3 
• o 
-2 
-1 
-fl 
FIGURE P8.4 
7. Sketch the root locus of the unity feedback system 
shown in Figure P8.3, where 
K(s + 3)(s + 5) 
° « - ( , + 1)(,-7) 
and find the break-in and breakaway points. [Sec-
tion: 8.5] 

434 
Chapter 8 
Root Locus Techniques 
8. The characteristic polynomial of a feedback control 
system, which is the denominator of the closed-loop 
transfer 
function, 
is 
given 
by 
. 3 + 2.2+ 
{20K + 7). + 100K. Sketch the root locus for this 
system. [Section: 8.8] 
9. Figure P8.5 shows open-loop poles and zeros. There 
are two possibilities for the sketch of the root locus. 
Sketch each of the two possibilities. Be aware that 
only one can be the real locus for specific open-loop 
pole and zero values. [Section: 8.4] 
13. For each system shown in Figure P8.6, make an 
accurate plot of the root locus and find the follow-
ing: [Section: 8.5] 
a. The breakaway and break-in points 
b. The range of K to keep the system stable 
c. The value of K that yields a stable system with 
critically damped second-order poles 
d. The value of K that yields a stable system with a 
pair of second-order poles that have a damping 
ratio of 0.707 
- O 
X-
.v-plane 
FIGURE P8.5 
10. Plot the root locus for the unity feedback system 
shown in Figure P8.3, where 
G(s) = K(s + 2)(s2 + 4) 
(' +5)(s-3) 
For what range of K will the poles be in the right 
half-plane? [Section: 8.5] 
11. For the unity feedback system shown in 
wiieypws 
Figure P8.3, where 
d J J J 
Control Solutions 
«,* 
W - 9 ) 
sketch the root locus and tell for what values of K 
the system is stable and unstable. [Section: 8.5] 
12. Sketch the root locus for the unity feedback system 
shown in Figure P8.3, where 
G W - - ^ 
2) 
. + 3)(. + 4) 
Give the values for all critical points of interest. Is 
the system ever unstable? If so, for what range of Kl 
[Section: 8.5] 
R(s) 
+/r 
B(s) 
t(c 
?\ 
* 
9 
A 
9 
K(s + 2)(s + 1) 
(s-2)(s-\) 
System 1 
K(s + 2)(s+l) 
(s2-2s 
+ 2) 
Qs) 
C{s) 
System 2 
FIGURE P8.6 
14. Sketch the root locus and find the range of K for 
stability for the unity feedback system shown in Figure 
P8.3 for the following conditions: [Section: 8.5] 
K{s2 + 1) 
a. G{s) = 
b. G(s) = 
( . - 1 ) ( 5 + 2 ) ( . 
K{s2-2s + 2) 
s(s + l)(s + 2) 
3) 
15. For the unity feedback system of Figure 
P8.3, where 
G(s) = 
K(s + 3) 
WileyPLUS 
CJJSJ 
Control Solutions 
(.2+2)(.-2)(5 + 5) 
sketch the root locus and find the range of K such 
that there will be only two right-half-plane poles for 
the closed-loop system. [Section: 8.5] 
16. For the unity feedback system of Figure P8.3, where 
G(.) = 
K 
.(. + 6)(. + 9) 
plot the root locus and calibrate your plot for gain. Find 
all the critical points, such as breakaways, asymptotes, 
/w-axis crossing, and so forth. [Section: 8.5] 

Problems 
435 
17. Given the unity feedback system of Figure P8.3, 
make an accurate plot of the root locus for the 
following: 
K(s2 -2s+ 
2) 
a. G(s) = 
b. G(s) = 
(s + l)(s + 2) 
K(s-l){s-2) 
(s + l){s + 2) 
Calibrate the gain for at least four points for each case. 
Also find the breakaway points, the jco-axis crossing, 
and the range of gain for stability for each case. Find the 
angles of arrival for Part a. [Section: 8.5] 
18. Given the root locus shown in Figure P8.7, [Section: 
8.5] 
a. Find the value of gain that will make the system 
marginally stable. 
b. Find the value of gain for which the closed-loop 
transfer function will have a pole on the real axis 
a t - 5 . 
19. Given the unity feedback system of Figure P8.3, 
where 
G(s) = 
K(s + 1) 
s(s + 2)(s + 3){s + 4) 
do the following: [Section: 8.5] 
a. Sketch the root locus. 
b. Find the asymptotes. 
c. Find the value of gain that will make the system 
marginally stable. 
d. Find the value of gain for which the closed-loop 
transfer function will have a pole on the real axis 
at -0.5. 
20. For the unity feedback system of Figure 
wileyPLUs 
PS.3, where 
>'i'iU*--» 
Control Solutions 
{) 
s(s + 3)(s + 6) 
find the values of or and K that will yield a second-
order closed-loop pair of poles at - 1 ±/100. 
[Section: 8.5] 
21. For the unity feedback system of Figure P8.3, where 
K(s - l){s - 2) 
G{s) = 
s(s+i: 
sketch the root locus and find the following: 
[Section: 8.5] 
a. The breakaway and break-in points 
b. The jco-axis crossing 
c. The range of gain to keep the system stable 
d. The value of K to yield a stable system with 
second-order complex poles, with a damping 
ratio of 0.5 
22. For the unity feedback system shown in Figure P8.3, 
where 
G(s) = 
K(s + 10)(s + 20) 
(s + 30) (s2 -20s + 200) 
do the following: [Section: 8.7] 
a. Sketch the root locus. 
b. Find the range of gain, K, that makes the system 
stable. 
c. Find the value of K that yields a damping ratio of 
0.707 for the system's closed-loop dominant poles. 
d. Find the value of K that yields closed-loop criti-
cally damped dominant poles. 
23. For the system of Figure P8.8(a), 
wileypws 
sketch the root locus and find the 
a'.'j J f 
following: [Section: 8.7] 
Control Solutions 
a. Asymptotes 
b. Breakaway points 
c. The range of K for stability 
d. The value of K to yield a 0.7 damping ratio for the 
dominant second-order pair 
To improve stability, we desire the root locus to 
cross the jco-axis at ;5.5. To accomplish this, the 
open-loop function is cascaded with a zero, as 
shown in Figure P8.8(b). 

436 
Chapter 8 
Root Locus Techniques 
—. 
R(s) + -r 
* A / 
^ 
1 
^ 
/s: 
Cs + l)(.v + 2)(.5 + 3)(s + 4) 
<«) 
iT(s + a) 
(s + \)(s + 2)(s + 3){s + 4) 
C(s)t 
m_ 
(b) 
FIGURE P8.8 
e. Find the value of a and sketch the new root locus. 
f. Repeat Part c for the new locus. 
g. Compare the results of Part c and Part f. What 
improvement in transient response do you 
notice? 
24. Sketch the root locus for the positive-feedback 
system shown in Figure P8.9. [Section: 8.9] 
R(s) + 
K 
i(5+l) 
C{s) 
FIGURE P8.9 
25. Root loci are usually plotted for variations in the 
gain. Sometimes we are interested in the variation 
of the closed-loop poles as other parameters are 
changed. For the system shown in Figure P8.10, 
sketch the root locus as a is varied. [Section: 8.8] 
R(s)+t 
?\ 
» 
9 
i 
s(s + a) 
C(s) 
FIGURE P8.10 
26. Given the unity feedback system shown in Figure 
P8.3. where 
G(s) 
K 
(5 + 1)(5 + 2)(5 + 3) 
do the following problem parts by first making a 
second-order approximation. After you are finished 
with all of the parts, justify your second-order 
approximation. [Section: 8.7] 
a. Sketch the root locus. 
b. Find K for 20% overshoot. 
c. For K found in Part b, what is the settling time, 
and what is the peak time? 
d. Find the locations of higher-order poles for K 
found in Part b. 
e. Find the range of K for stability. 
27. For the unity feedback system shown in Figure P8.3, 
where 
G(s) = 
K(s2 - 2s + 2) 
^ + 2)(5 + 4)(5 + 5)(5 + 6) 
do the following: [Section: 8.7] 
a. Sketch the root locus. 
b. Find the asymptotes. 
c. Find the range of gain, K, that makes the system 
stable. 
d. Find the breakaway points. 
e. Find the value of K that yields a closed-loop step 
response with 25% overshoot. 
f. Find the location of higher-order closed-loop 
poles when the system is operating with 25% 
overshoot. 
g. Discuss the validity of your second-order 
approximation. 
h. Use MATLAB to obtain the 
MATLAB 
closed-loop step re- 
C L U ^ P 
sponse to validate or refute your 
second-order approximation. 
28. The unity feedback system shown in Figure P8.3, where 
#(5 + 2)(5 + 3) 
G(s) = 
5(5 + 1) 
is to be designed for minimum damping ratio. Find 
the following: [Section: 8.7] 
a. The value of K that will yield minimum damping 
ratio 
b. The estimated percent overshoot for that case 
c. The estimated settling time and peak time for 
that case 
d. The justification of a second-order approxima-
tion (discuss) 
e. The expected steady-state error for a unit ramp 
input for the case of minimum damping ratio 

Problems 
437 
29. For the unity feedback system shown in Figure P8.3, 
where 
G(s) = 
£(5 + 2) 
5(5 + 6)(5 + 10) 
find £ to yield closed-loop complex poles with a 
damping ratio of 0.55. Does your solution require a 
justification of a second-order approximation? 
Explain. [Section: 8.7] 
34-
30. For the unity feedback system shown in 
wileyPLUS 
Figure P8.3, where 
a V J J f 
f[(v _|_ QJ) 
Control Solutions 
d. Select interactively the point where 
the root locus crosses the 10% over-
shoot line, and respond with the gain 
at that point as well as all of the 
closed-loop poles at that gain. 
e. Generate the step response at the gain 
for 10% overshoot. 
For the unity feedback system shown in 
wiieypius 
Figure 8.3, where 
MVi^4¾ 
G(s) = 
£(52 + 45 + 5) 
Control Solutions 
G(s) = 5(5 + 1)(5 + 10) 
find the value of a so that the system will have a 
settling time of 4 seconds for large values of £. 
Sketch the resulting root locus. [Section: 8.8] 
31. For the unity feedback system shown in Figure 8.3, 
where 
G(s) = 
£(5 + 6) 
>2 + 105 + 26)(5 + l)z(5 + a) 
design £ and a so that the dominant complex poles 
of the closed-loop function have a damping ratio of 
0.45 and a natural frequency of 9/8 rad/s. 
32. For the unity feedback system shown in Figure 8.3, 
where 
G(s) = 
K 
5(5 + 3)(5+4)(5 + 8) 
>2 + 2 5 + 5)(5+ 3)(5+ 4) 
35. 
do the following: [Section: 8.7] 
a. Find the gain, K, to yield a 1-second peak time if 
one assumes a second-order approximation. 
b. Check the accuracy of the 
^TL^g 
second-order approximation 
^ j ^ ^ ) 
using MATLAB to simulate the system. 
For the unity feedback system shown in Figure P8.3, 
where 
G{s) = 
£(5 + 2)(5+3) 
(52 + 25 + 2)(5 + 4)(5 + 5)(5 + 6) 
do the following: [Section: 8.7] 
a. Sketch the root locus. 
b. Find the value of £ that will yield a 10% 
overshoot. 
36. 
c. Locate all nondominant poles. What can you say 
about the second-order approximation that led 
to your answer in Part b? 
d. Find the range of £ that yields a stable system. 
33. Repeat Problem 32 using MATLAB. 
MATLAB 
Use one program to do the dyjJP 
following: 
a. Display a root locus and pause. 
b. Draw a close-up of the root locus where 
the axes go from —2 to 0 on the real axis 
and —2 to 2 on the imaginary axis. 
c. Overlay the 10% overshoot line on the 
close-up root locus. 
do the following: [Section: 8.7] 
a. Sketch the root locus. 
b. Find the /w-axis crossing and the gain, £, at the 
crossing. 
c. Find all breakaway and break-in points. 
d. Find angles of departure from the complex poles. 
c. Find the gain, K, to yield a damping ratio of 0.3 
for the closed-loop dominant poles. 
Repeat Parts a through c and e of Problem 35 for 
[Section: 8.7] 
£(5 + 8) 
G(s) = 5(5 + 2)(5 + 4)(5 + 6) 
37. For the unity feedback system shown in Figure P8.3, 
where 
G(5) = 
K 
(5 + 3)(52+45 + 5) 
do the following: [Section: 8.7] 
a. Find the location of the closed-loop dominant poles 
if the system is operating with 15% overshoot. 
b. Find the gain for Part a. 

438 
Chapter 8 
Root Locus Techniques 
c. Find all other closed-loop poles. 
d. Evaluate the accuracy of your second-order 
approximation. 
38. For the system shown in Figure P8.ll, do the fol-
lowing: [Section: 8.7] 
?\ 
9 
K 
(5 + 2)(5 + 3) 
s 2-45 + 8 
(52 + 25 + 5) 
C{s) 
FIGURE P8.11 
a. Sketch the root locus. 
b. Find the /aj-axis crossing and the gain, K, at the 
crossing. 
c. Find the real-axis breakaway to two-decimal-
place accuracy. 
d. Find angles of arrival to the complex zeros. 
e. Find the closed-loop zeros. 
f. Find the gain, K, for a closed-loop step response 
with 30% overshoot. 
g. Discuss the validity of your 
second-order 
approximation. 
39. Sketch the root locus for the system of Figure P8.12 
and find the following: [Section: 8.7] 
R(s) + < g > -
K 
s(s + 3)(5 + 7)(5 + I 
C(s) 
(5 + 30) 
(52 + 205 + 200) 
FIGURE P8.12 
a. The range of gain to yield stability 
b. The value of gain that will yield a damping ratio 
of 0.707 for the system's dominant poles 
c. The value of gain that will yield closed-loop poles 
that are critically damped 
40. Repeat Problem 3 9 using MATLAB. 
MAi|AB 
The program will do the follow-
ing in one program: 
a. Display a root locus and pause. 
b. Display a close-up of the root locus 
where the axes go from — 2 to 2 on the 
real axis and —2 to 2 on the imaginary 
axis . 
c. Overlay the 0.707 damping ratio line 
on the close-up root locus. 
d. Allow you to select interactively the 
point where the root locus crosses the 
0.707 damping ratio line, and respond by 
displaying the gain at that point as 
well as all of the closed-loop poles 
at that gain. The program will then al-
low you to select interactively the 
imaginary-axis crossing and respond 
with a display of the gain at that point 
as well as all of the closed-loop poles 
at that gain. Finally, the program will 
repeat the evaluation for critically 
damped dominant closed-loop poles. 
e. Generate the step response at the gain 
for 0.707 damping ratio. 
41. Given the unity feedback system shown 
wileyPLus 
in Figure P8.3, where 
Q2SZ9 
Control Solutions 
K{s + z) 
G(s) = s2(s + 20) 
do the following: [Section: 8.7] 
a. If z = 6, find K so that the damped frequency of 
oscillation of the transient response is 10 rad/s. 
b. For the system of Part a, what static error con-
stant (finite) can be specified? What is its value? 
c. The system is to be redesigned by changing the 
values of z and K. If the new specifications are 
%OS = 4.32% and Ts = 0.4 s, find the new val-
ues of z and K. 
42. Given the unity feedback system shown in Figure 
P8.3, where 
G(s) = 
K 
[s + l)(s + 3)(s + 6Y 
find the following: [Section: 8.7] 
a. The value of gain, K, that will yield a settling time 
of 4 seconds 
b. The value of gain, K, that will yield a critically 
damped system 

Problems 
439 
43. Let 
G(s) 
K(s-1) 
(5 + 2)(5 + 3) 
in Figure P8.3. [Section: 8.7]. 
a. Find the range of K for closed-loop stability. 
b. Plot the root locus for K > 0. 
c. Plot the root locus for K < 0. 
d. Assuming a step input, what value of K will result 
in the smallest attainable settling time? 
e. Calculate the system's ess for a unit step 
input assuming the value of K obtained in Part d. 
f. Make an approximate hand sketch of the unit 
step response of the system if K has the value 
obtained in Part d. 
44. Given the unity feedback system shown in Figure 
P8.3, where 
G(s) = 
K 
5(5+1)(5 + 5) 
evaluate the pole sensitivity of the closed-loop 
system if the second-order, underdamped closed-
loop poles are set for [Section: 8.10] 
a. £ = 0.591 
b. ¢ = 0.456 
c. Which of the two previous cases has more desir-
able sensitivity? 
45. Figure P8.13(a) shows a robot equipped to per-
form arc welding. A similar device can be con-
figured as a six-degrees-of-freedom industrial 
robot that can transfer objects according to a 
desired program. Assume the block diagram of 
the swing motion system shown in Figure P8.13(b). 
If K = 64,510, make a second-order approxima-
tion and estimate the following (Hardy, 1967): 
a. Damping ratio 
b. Percent overshoot 
c. Natural frequency 
d. Settling time 
e. Peak time 
What can you say about your original second-order 
approximation? 
46. During ascent, the automatic steering program 
aboard the space shuttle provides the interface 
Input 
position + , 
^-( 
—. /0 
^ 
i 
Load 
actuator 
K 
s2 + Is + 1220 
Network 
0.00076.? 
.? + 0.06 
Tachometer 
0.02,5 
\>silion fecdbac 
signal 
1 
5 
S2 
Ram 
position 
(b) 
FIGURE P8.13 
a. Robot equipped to perform arc welding; 
b. block diagram for swing motion system 
between the low-rate processing of guidance (com-
mands) and the high-rate processing of flight con-
trol (steering in response to the commands). The 
function performed is basically that of smoothing. A 
simplified representation of a maneuver smoother 
linearized for coplanar maneuvers is shown in Fig-
ure P8.14. Here 6CB(S) is the commanded body 
angle as calculated by guidance, and 6CB(S) is the 
desired body angle sent to flight control after 
smoothing.3 Using the methods of Section 8.8, do 
the following: 
3 Source: Rockwell International. 

440 
Chapter 8 
Root Locus Techniques 
fltB(-v) 
K, 
—i 
® -
<?DB<>) 
FIGURE P8.14 Block diagram of smoother 
a. Sketch a root locus where the roots vary as a 
function of K3. 
b. Locate the closed-loop zeros. 
c. Repeat Parts a and b for a root locus sketched as 
a function of K2. 
47. Repeat Problem 3 but sketch your root loci for 
negative values of K. [Section: 8.9] 
48. Large structures in space, such as the space station, 
have to be stabilized against unwanted vibration. 
One method is to use an active vibration absorber to 
control the structure, as shown in Figure P8.15(a) 
(Bruner, 1992). Assuming that all values except the 
mass of the active vibration absorber are known and 
are equal to unity, do the following: 
-HWH 
Plant 
M 
Active 
vibration 
absorber 
-wv-
D, 
Mr 
% 
xc - xa 
x 
(a) 
Input force 
F(s) + 
Structure 
Output structure 
acceleration 
"2 
Xr( ?)= Xa(s)-X(s 
,2 
I 
C(s) 
Active vibration absorber 
m 
FIGURE P8.15 
a. Active vibration absorber (© 1992 AIAA); 
b. control system block diagram 
a. Obtain G{s) and H(s) = Hi{s)Hz(s) in the block 
diagram representation of the system of Figure 
8.15(6), which shows that the active vibration 
absorber acts as a feedback element to control 
the structure. (Hint: Think of Kc and Dc as 
producing inputs to the structure.) 
b. Find the steady-state position of the structure for 
a force disturbance input. 
c. Sketch the root locus for the system as a function 
of active vibration absorber mass, Mc. 
49. Figure P8.16 shows the block diagram of the closed-
loop control of the linearized magnetic levitation 
system described in Chapter 2, Problem 58. (Galvao, 
2003). 
/?(s) if 
+ 
7) 
9 
am 
A 
S2-T}2 
cm 
FIGURE P8.16 Linearized magnetic levitation system block 
diaoram 
diagram 
Assuming A = 1300 and rj = 860, draw the root locus 
and find the range of K for closed-loop stability when: 
a. G(s) = K; 
K{s + 200) 
b. G(s) = s + 1000 
50. The simplified transfer function model from steer-
ing angle S(s) to tilt angle (p(s) in a bicycle is 
given by 
G(s) = <p(s) _ aV s + 
V 
bhsi_l 
h 
In this model, h represents the vertical distance from 
the center of mass to the floor, so it can be readily 
verified that the model is open-loop unstable. 
(Astrom, 2005). Assume that for a specific bicycle, 
a = 0.6 m, b = 1.5 m, h = 0.8 m, and g = 9.8 m/sec. 
In order to stabilize the bicycle, it is assumed that the 
bicycle is placed in the closed-loop configuration 
shown in Figure P8.3 and that the only available 
control variable is ¥, the rear wheel velocity. 
a. Find the range of V for closed-loop stability. 
b. Explain why the methods presented in this chap-
ter cannot be used to obtain the root locus. 
c. Use MATLAB t o o b t a i n t h e 
MATLAR 
system's r o o t l o c u s . 

Problems 
441 
51. A technique to control the steering of a vehicle that 
follows a line located in the middle of a lane is to 
define a look-ahead point and measure vehicle 
deviations with respect to the point. A linearized 
model for such a vehicle is 
V 
' v~ 
r 
* 
L**J 
— 
an 
«21 
0 
1 
«12 
«22 
1 
0 
-bxK 
-b2K 
0 
u 
biK-
tf 
b2K 
d 
0 
0 . 
where V = vehicle's lateral velocity, r = vehicle's yaw 
velocity, i/r = vehicle's yaw position, and Yg = the 
.y-axis coordinate of the vehicle's center of gravity. K 
is a parameter to be varied depending upon trajectory 
changes. In a specific vehicle traveling at a speed of 
U — — lOm/sec, the parameters are flu = -11.6842, 
fli2 = 6.7632, by = -61.5789, a2l = -3.5143, «22 = 
24.0257, and b2 = 66.8571. d = 5 m is the look-ahead 
distance (Unyelioglu, 1997). Assuming the vehicle will 
be controlled in closed loop: 
a. Find the system's characteristic equation as a 
function of K. 
b. Find the system's root locus as K is varied. 
c. Using the root locus found in Part b, show that 
the system will be unstable for all values K. 
52. It is known that mammals have hormonal regulation 
mechanisms that help maintain almost constant 
calcium plasma levels (0.08-0.1 g/L in dairy 
cows). This control is necessary to maintain healthy 
functions, as calcium is responsible for diverse phys-
iological functions, such as bone formation, intra-
cellular communications, and blood clotting. It has 
been postulated that the mechanism of calcium 
control resembles that of a PI (proportional-plus-
integral) controller. PI controllers (discussed in 
detail in Chapter 9) are placed in cascade with 
the plant and used to improve steady-state error. 
Assume that the PI controller has the form Gc(s) = 
Kp + -^- 
where Kp and Ki are constants. Also 
assume that the mammal's system accumulates 
calcium in an integrator-like fashion, namely 
P(s) = —, where V is the plasma volume. The 
s 
closed-loop model is similar to that of Figure 
P8.3, where G(s) = Gc{s)P{s) (Khammash, 2004). 
a. Sketch the system's root locus as a function of 
Kp, assuming K[ > 0 is constant. 
b. Sketch the system's root locus as a function of Kj, 
assuming Kp > 0 is constant. 
53. Problem 65 in Chapter 7 introduced the model of a 
TCP/IP router whose packet-drop probability is 
controlled by using a random early detection 
(RED) algorithm (Hollot, 2001). Using Figure 
P8.3 as a model, a specific router queue's open-
loop transfer function is 
7031250Le-a2* 
W ~ (5+ 0.667) (5+ 5) (5+ 50) 
The function e~02s represents delay. To apply the root 
locus method, the delay function must be replaced 
with a rational function approximation. A first-order 
Pade approximation can be used for this purpose. 
Let e~sD « 1 — Ds. Using this approximation, plot 
the root locus of the system as a function of L. 
54. For the dynamic voltage restorer (DVR) discussed 
in Problem 47, Chapter 7, do the following: 
a. When ZL = -^-, a pure capacitance, the system 
is more inclined toward instability. Find the sys-
tem's characteristic equation for this case. 
b. Using the characteristic equation found in 
Part a, sketch the root locus of the system as a 
function of CL- Let L = 7.6 mH, C = 11 uF, or = 
26.4, p = l,Km 
= 25, Kv = 15, KT = 0.09565, 
and r = 2 ms {Lam, 2004). 
55. The closed-loop vehicle response in stopping a train 
depends on the train's dynamics and the driver, who 
is an integral part of the feedback loop. In Figure 
P8.3, let the input be R(s) = vr the reference veloc-
ity, and the output C(s) = v, the actual vehicle 
velocity. (Yamazaki, 2008) shows that such dynam-
ics can be modeled by G(s) — Gd{s)Gt(s) where 
_ L 
Gd(s) =h (1+-) "—j-
S+2 
represents the driver dynamics with h, K, and L 
parameters particular to each individual driver. We 
assume here that /1 = 0.003 and L — l. The train 
dynamics are given by 
G M = 
kbfKp 
tK) 
M(l+ke)s{TS 
+ l) 
where M = 8000 kg, the vehicle mass; ke = 0.1 the iner-
tialcoefficient;^ = 142.5, the brake gain; Kp =47.5, 
the pressure gain; r = 1.2 sec, a time constant; and 
/ = 0.24, the normal friction coefficient. 
a. Make a root locus plot of the system as a function 
of the driver parameter K. 
b. Discuss why this model may not be an accurate 
description of a real driver-train situation. 

442 
Chapter 8 
Root Locus Techniques 
56. Voltage droop control is a technique in which loads 
are driven at lower voltages than those provided by 
the source. In general, the voltage is decreased as 
current demand increases in the load. The advan-
tage of voltage droop is that it results in lower 
sensitivity to load current variations. 
Voltage droop can be applied to the power dis-
tribution of several generators and loads linked 
through a dc bus. In (Karlsson, 2003) generators 
and loads are driven by 3-phase ac power, so they 
are interfaced to the bus through ac/dc converters. 
Since each one of the loads works independently, a 
feedback system shown in Figure P8.17 is used in 
each to respond equally to bus voltage variations. 
Given that Cs = Cr = 8,000 //JF, Lcabie = 50 /xH, Rcahie — 
0.06 a, Zr = Rr=5 CI, w/p = 200 rad/s, Gconv(s) = l, 
Vdc.ref=750 V, and Pref-ext=^ do the following: 
a. If Zreq is the parallel combination of Rr and Cn 
and Gconv(s) = 1, find 
Gis) = YM = J^L 
b. Write a MATLAB M-f ile to plot 
J^IIM 
and copy the full root locus 
C L U ^ P 
for that system, then zoom-in the lo-
cus by setting the x-axis (real-axis) 
limits to -150 to 0 and the y-axis 
(imaginary-axis) limits to —150 to 
150. Copy that plot, too, and find 
and record the following: 
(1) The gain, K, at which the system 
would 
have 
complex-conjugate 
closed-loop dominant poles with a 
damping ratio f = 0 . 707 
(2) The coordinates of the correspond-
ing point selected on the root-locus 
(3) The values of all closed-loop poles 
at that gain 
(4) The output voltage vs(t) 
for a step 
input voltage vdc_ref (t) =750 u(t) 
volts 
c. Plot that step response and use MATLAB 
Characteristics tool (in the graph 
window) to note on the curve the fol-
lowing parameters: 
(1) The actual percent overshoot and 
the corresponding peak time, Tp 
(2) The rise time, Tr, and the settling 
time, Ts 
(3) The final steady-state value in 
volts 
DESIGN PROBLEMS 
57. A disk drive is a position control system in which a 
read/write head is positioned over a magnetic disk. 
The system responds to a command from a com-
puter to position itself at a particular track on the 
disk. A physical representation of the system and a 
block diagram are shown in Figure P8.18. 
a. Find K to yield a settling time of 0.1 second. 
b. What is the resulting percent overshoot? 
c. What is the range of K that keeps the system stable? 
K/<-,</(*) +,o, EM • 
K 
GAs) 
''rcl-CX^ 
Vs(s) 
+ , 
'wrfW 
Vs.,ris) 
•9 
Av,w,-(.v) 
V 
/s(.v) 
1 
AraWe + Av<7 
-> 
1 
sCs 
Gc0mm 
H(s) 
»b 
s+0) 
FIGURE P8.17 (© 2003 IEEE) 
V, (s) 

Problems 
443 
Actual position. .\/[(t) 
Desired position, .\/)(/) 
« ± t ^ 
Controller 
K 
(s + 500)(s + 800) 
Motor and load 
20,000 
s(s + 100) 
Xr\{s ) 
m 
FIGURE P8.18 Disk drive: a. physical representation; 
b. block diagram 
58. A simplified block diagram of a human 
wileypms 
pupil servomechanism is shown in Figure ftVi'J4»< 
P8.19. The term e~018s represents a time control solutions 
delay. This function can be approximated by what is 
known as a Pade approximation. This approximation 
can take on many increasingly complicated forms, 
depending upon the degree of accuracy required. If 
we use the Pade approximation 
-, 
1 
e 
= 
=r 
r 
1 + * + 2! 
,-0.18s 
61.73 
J2 + 11.11s+ 61.73 
Since the retinal light flux is a function of the 
opening of the iris, oscillations in the amount of 
retinal light flux imply oscillations of the iris (Guy, 
1976). Find the following: 
a. The value of K that will yield oscillations 
b. The frequency of these oscillations 
c. The settling time for the iris if K is such that the 
eye is operating with 20% overshoot 
External 
lighL 
flllX 
+ A~X 
jgriM&S 
(.v + 10)3 
Retinal 
light 
r'fux 
FIGURE P8.19 
Simplified block diagram of pupil 
servomechanism 
59. An active suspension system for AMTRAK trains 
has been proposed. The system uses a pneumatic 
actuator in parallel with the passive suspension sys-
tem, as shown in Figure P8.20. The force of the 
actuator subtracts from the force applied by the 
ground, as represented by displacement, yg{t). Ac-
celeration is sensed by an accelerometer, and signals 
proportional to acceleration and velocity are fed 
back to the force actuator. The transfer function 
relating acceleration to ground displacement is 
s2(Ds + K) 
Ym(s) = 
Yg(s) 
(Ca + M)s2 + (C„ + D)s + K 
Assuming that M = 1 and D = K = C„ = 2, do the 
following (Cho, 1985): 
a. Sketch a root locus for this system as Ca varies 
from zero to infinity. 
b. Find the value of Ca that would yield a damping 
ratio of 0.69 for the closed-loop poles. 
Accelerometer 
v/„(f) 
VMW 
'//////////A 
FIGURE P8.20 
Active suspension system (Reprinted with 
permission of ASME) 
60. The pitch stabilization loop for an F4-E military 
aircraft is shown in Figure P8.21. <Scom is the elevator 

444 
Chapter 8 
Root Locus Techniques 
Pitch 
command 
m+fi* -
\ 
KX 
i6* -
K 
K2 
FIGURE P8 21 ¥4 
SemM 
Aircraft 
dynamic. 
G2(s) 
-E pitch stal )ilizatio 
Pitch 
sw 
nloot 
1 
s 
8{s) 
and canard input deflection command to create a 
pitch rate (see Problem 22, Chapter 3). If 
-508(5 + 1.6) 
G2(s) = (5 + 14)(5-1.8)(5 + 4.9) 
do the following (Cavallo, 1992): 
a. Sketch the root locus of the inner loop. 
b. Find the range of K2 to keep the inner loop stable 
with just pitch-rate feedback. 
c. Find the value of K2 that places the inner-loop 
poles to yield a damping ratio of 0.5. 
d. For your answer to Part c, find the range of #1 
that keeps the system stable. 
e. Find the value of K\ that yields closed-loop poles 
with a damping ratio of 0.45. 
61. Accurate pointing of spacecraft is 
wileyPLUs 
required for communication and 
EViiH^ 
mapping. Attitude control can be 
control solutions 
implemented by exchanging angular momentum 
between the body of the spacecraft and an onboard 
momentum wheel. The block diagram for the pitch 
axis attitude control is shown in Figure P8.22, where 
0c(s) is a commanded pitch angle and 9(s) is the 
actual pitch angle of the spacecraft. The compensa-
tor, which improves pointing accuracy, provides a 
commanded momentum, Hc{s), to the momentum 
wheel assembly. The spacecraft momentum, Hsys(s), 
is an additional input to the momentum wheel. This 
body momentum is given by 
hSyS(t) = 
hO(t)+K(t) 
where /2 is the spacecraft moment of inertia about 
the pitch axis and hw(t) is the momentum of the 
wheel. The total torque output from the momentum 
wheel, Tw, as shown in Figure P8.22, is 
Tw{t) = hsys{t) ~ K{t) + MO 
If T = 23 seconds and /2 = 9631 in-lb-s2, do the 
following {Piper, 1992): 
a. Sketch the root locus for the pitch axis control 
system. 
b. Find the value of K to yield a closed-loop step 
response with 25% overshoot. 
c. Evaluate the accuracy of any second-order ap-
proximations that were made. 
62. During combustion in such devices as gas turbines and 
jet engines, acoustic waves are generated. These pres-
sure waves can lead to excessive noise as well as 
mechanical failure. Active control is proposed to 
reduce this thermoacoustic effect. Specifically, a mi-
crophone is used as a sensor to read the sound waves, 
while a loudspeaker is used as an actuator to set up 
opposing pressure waves to reduce the effect. A 
proposed diagram showing the microphone and loud-
speaker positioned in the combustion chamber is 
Pitch 
command 
Compensator 
ecU) + 
••®— 
+ ,. 
ATCs+O.Ol) 
H$yS{s) Momentum 
Disturbance 
wheel 
7V/ = 0 
Pitch 
pjtch 
assembly 
, 
dynamics 
output 
/'V^< --K>, 
1 
Tw(s) - + } 
Hw(s) 
J_ 
V 2 
is) 
FIGURE P8.22 
Pitch axis attitude control system utilizing momentum wheel 

Problems 
445 
Premixed flame 
lot jet diffusion flame 
Desired microphone 
output = 0 
» * 
Controller 
Loudspeaker Combustor Microphone Microphone 
output 
K 
G\(s) 
GAs) 
CffiW 
(b) 
FIGURE P8.23 
a. Combustor with microphone and loudspeaker ( © 1995 IEEE); b. block diagram ( © 1995 IEEE) 
shown in Figure P8.23(a). A simplified block dia-
gram of the active control system is shown in 
Figure P8.23(fr). The transfer functions are dependent 
upon microphone and loudspeaker placement and 
parameters as well as flame placement and parame-
ters. The forward-path transfer function is of the form 
G(s) = KG1(s)Gc(s)Gm(s) 
_ 
K (s + Zf) (s2 + 2K2(Qis + col) 
(s + Pf) {s2 - l ^ s + o)2) (s2 + 2£>«2S + &>|) 
where the values for three configurations (A, B, 
and C) are given in the following table for Part b 
{Annaswamy, 1995). 
B 
z/ 
Pf 
0)z 
1 
W\ 
0>1 
8 8 § 
4500 
0.5 
995 
0.3 
3500 
1500 
1000 
0.45 
4500 
-0.5 
995 
0.3 
3500 
1500 
1000 
-0.45 
4500 
-0.5 
995 
0.3 
3500 
Po(s) 
TR(S) 
where P0( 
nower froi 
a. Draw the root locus for each configuration. 
b. For those configurations where stable regions of 
operation are possible, evaluate the range of 
gain, K, for stability. 
63. Wind turbines, such as the one shown in Figure 
P8.24(a), are becoming popular as a way of generating 
electricity. Feedback control loops are designed to 
control the output power of the turbine, given an 
input power demand. Blade-pitch control may be 
used as part of the control loop for a constant-speed, 
pitch-controlled wind turbine, as shown in Figure 
P8.24(fr). The drivetrain, consisting of the windmill 
rotor, gearbox, and electric generator (see Figure 
P8.24(c)), is part of the control loop. The torque 
created by the wind drives the rotor. The windmill 
rotor is connected to the generator through a gearbox. 
The transfer function of the drivetrain is 
= Gdl(s) 
3.92KLSsKHssKGN2s 
{N2KHSS(JRS2 
+ KLSs)(JGS2[TelS + 1] 
+ KGs) + JRS2KLSS[{JGS2 
+ KHSS) 
{Tds + l) + KGs]} 
where P0{s) is the Laplace transform of the output 
power from the generator and TR(S) is the Laplace 

4 4 6 
Chapter 8 
Root Locus Techniques 
Windspeed 
disturbance 
Control surface 
aerodynamics 
Power 
demand 
_ i i ( Q U ~ P o w e r 
U^-tJ 
Sjr 
controller 
_Y 
Pitch 
demand 
t 
Applied 
moment 
Pitch 
actuator 
,+V 
-1H8H-, 
Disturbance 
moment p ; ^ 
angle 
I 
Pitch 
inertia 
Rotor gust 
sensitivity 
Rotor pitch _^/V\ 
sensitivity 
K y 
Shaft 
torque 
I Drivetrain 
Electrical 
power 
Power 
transducer 
m 
Low-speed shaft 
stiffness 
Kiss 
High-speed shaft 
stiffness KJJSS 
Rotor 
inertia JR 
Gearbox 
Inertia/o. Generator gain KQ, 
Time constant xe{ 
Ratio A' 
(c) 
FIGURE P8.24 
a. Wind turbines generating electricity near Palm Springs, California b. control loop for a constant-speed 
pitch-controlled wind turbine ( © 1998 IEEE); c. drivetrain ( © 1998 IEEE) 

Problems 
447 
transform of the input torque on the rotor. Substituting 
typical numerical values into the transfer function 
yields 
TR(S) = G(i,(s) 
(3.92)(12.6 x 106)(301 x 103){68S)N2s 
~ {N2(301 x 103)(190,120^2 + 12.6 x 106) 
x (3.852[20 x KT35 + 1] + 6685) 
+ 190,12052(12.6xl06) 
x [(3.852 + 301 x 103) 
x (20 xl0~35 + 1) + 6685]} 
(Anderson, 1998). Do the following for the drive-
train dynamics, making use of any computational 
aids at your disposal: 
a. Sketch a root locus that shows the pole locations 
of Gdt(s) for different values of gear ratio, N. 
b. Find the value of N that yields a pair of complex 
poles of Gdt(s) with a damping ratio of 0.5. 
64. A hard disk drive (HDD) arm has an open-loop 
unstable transfer function, 
m 
Fls) 
It? 
where X(s) is arm displacement and F(s) is the applied 
force (Yan, 2003). Assume the arm has an inertia of 
lb = 3 x 10 kg-m2 and that a lead controller, Gc(s) 
(used to improve transient response and discussed in 
Chapter 9), is placed in cascade to yield 
ww=^=¾¾¾ 
as in Figure P8.3. 
a. Plot the root locus of the system as a function 
of K. 
b. Find the value of K that will result in dominant 
complex conjugate poles with a £ = 0.7 damping 
factor. 
65. A robotic manipulator together with a cascade PI 
controller (used to improve steady-state response 
and discussed in Chapter 9) has a transfer function 
(Low, 2005) 
G(s) = 
KA 
48,500 
' + 5 I 52 + 2.895 
Assume the robot's joint will be controlled in the 
configuration shown in Figure P8.3. 
a. Find the value of Ki that will result in ess = 2% 
for a parabolic input. 
b. Using the value of iC/ found in Part a, plot the 
root locus of the system as a function of Kp, 
c. Find the value of Kp that will result in a real pole 
at - 1 . Find the location of the other two poles. 
66. An active system for the elimina- Gui Tool 
tion of floor vibrations due to gclljf 
human presence is presented in 
(Nyawako, 
2009). The system consists of 
a sensor that measures the floor's verti-
cal acceleration and an actuator that 
changes the floor characteristics. The 
open-loop transmission of the partic-
ular setup used can be described by 
G(s) = KGa(s)F(s)Gm(s), 
where the actua-
tor's transfer function is 
, . 
10.26 
G^s> - s2 + 11.3is +127.9 
The floor's dynamic charactristics can be 
modeled by 
F(s) = s2 +0.2287s+817.3 
The sensor's transfer function is 
s 
Gm(s) = 
5.181s+22.18 
and K is the gain of the controller. The 
system operations can be describedby the 
unity-gain feedback loop of Figure P8 .3 . 
a. Use MATLAB's SISO Design Tool to obtain 
the root locus of the system in terms 
of K. 
b. Find the range of K for closed-loop 
stability. 
c. Find, if possible, a value of K that 
will yield a closed-loop overdamped 
response. 
67. Many implantable medical devices such as pace-
makers, retinal implants, deep brain stimulators, and 
spinal cord stimulators are powered by an in-body 
battery that can be charged through a trans-
cutaneous inductive device. Optimal battery charge 
can be obtained when the out-of-body charging 
circuit is in resonance with the implanted charging 
circuit (Baker, 2007). Under certain conditions, the 
coupling of both resonant circuits can be modeled 
by the feedback system in Figure P8.3 where 
G(s) = 
^ 
-2 
(5 2+2^„5 + 0>2) 

448 
Chapter 8 
Root Locus Techniques 
The gain K is related to the magnetic coupling 
between the external and in-body circuits. K may 
vary due to positioning, skin conditions, and other 
variations. For this problem let £ = 0.5 and con = 1. 
a. Find the range of K for closed-loop stability. 
b. Draw the corresponding root locus. 
68. It is important to precisely 
J^!!£fL 
control the amount of organic Viil^P 
fertilizer applied to a specific 
GuiTool 
crop area in order to provide 
MAUiM 
specific nutrient quantities and to 
avoid unnecessary environmental pollu-
tion. A precise delivery liquid manure 
machine has been developed for this pur-
pose (Saeys, 
2008). The system consists of 
a pressurized tank, a valve, and a rheo-
logical flow sensor. After simplifica-
tion, the system can be modeled as a 
closed-loop negative-feedback system 
with a forward-path transfer function 
2057.38K(s2 - 120s + 4800) 
^ ~ s(s+13.17)(s2 +120s+ 4800) 
consisting of an electrohydraulic sys-
tem in cascade with the gain of the manure 
flow valve and a variable gain, K. The 
feedback path is comprised of 
10(s2 - 4s+ 5.333) 
H(s) = > + 10)(s2 + 4s + 5.333; 
a. Use the SISO Design Tool in MATLAB to 
obtain the root locus of the system. 
b. Use the SISO Design Tool to find the 
range of Kfor closed-loop stability. 
c. Find the value of ffthat will result in 
the smallest settling time for this 
system. 
d. Calculate the expected settling time 
for a step input with the value of K 
obtained in Part c. 
e. Check your result through a step-
response simulation. 
69. Harmonic drives are very popular 
MATLAB 
for use in robotic manipulators ^ Q Q ) 
due to their low backlash, high 
torque transmission, and compact size 
{Spong, 
2006) . The problem of joint flex-
ibility is sometimes a limiting factor in 
achieving good performance. Consider 
that the idealized model representing 
joint flexibility is shown in Figure 
P8.25. The input to the drive is from an 
actuator and is applied at $m. The output 
is connected to a load at 02 . The spring 
represents the joint flexibility and Bm 
and Bi represent the viscous damping of 
the actuator and load, respectively. Now 
we insert the device into the feedback 
loop shown in Figure P8.26. The first 
block in the f orwardpath is a PD control-
ler, which we will study in the next chap-
ter . The PD controller is used to improve 
transient response performance. 
FIGURE P8.25 Idealized model representing joint flexibility 
(Reprinted with permission of John Wiley & Sons, Inc.) 
Kp + Kos 
k * 
k 
Pi(s) 
^0, 
FIGURE P8.26 Joint flexibility model inserted in feedback 
loop. (Reprinted with permission of John Wiley & Sons, Inc.) 
Use MATLAB to find the gain KD to yield 
an approximate 5% overshoot in the step 
response given the following parame-
ters: Ja=10; B2=l; £=100; Jm=2; Bm=0.5; 
--= 0.25;pj(s) = Jjs2 + Bjs + k; and pm(s) = 
Jms2+ Bms + k 
70. Using LabVIEW, the Control Design LabviEW 
and Simulation Module, and the ^ O ^ ) 
MathScript RT Module, open and 
customize the Interactive Root Locus VI 
from the Examples to implement the sys-
tem of Problem 69. Select the parameter 
KD to meet the requirement of Problem 
69 by varying the location of the closed-
loop poles on the root locus. Be sure 

Problems 
449 
your front panel shows the following: (1) 
open-loop transfer function, (2) closed-
loop transfer function, (3) root locus, 
(4) list of closed-loop poles, and (5) 
step response. 
71. An automatic regulator is used 
MATLAB 
to control the field current of 
C M ^ P 
a three-phase synchronous ma-
chine with identical symmetrical arma-
ture windings 
{Stapleton, 
1964) . The 
purpose of the regulator is to maintain 
the system voltage constant within cer-
tain limits. The transfer function of 
the synchronous machine is 
r f«\- M f ) - 
M{s - Zl){s - z2) 
sm[ ] 
APm(s) 
(s-Pl)(s-p2)(s-p3) 
which relates the variation of rotor an-
gle, A5(s), to the change in the synchro-
nous machine's shaft power, APm(s). The 
closed-loop system is shown in Figure 
P8.3, where G(s) = KGc(s)Gsm(s) and K is a 
gain to be adjusted. The regulator's 
transfer function, Gc(s) , is given by: 
Gc(s)= 
e
T 
Te 
Assume the following parameter values: 
fi = 4,M= 0.117, Te = 0.5,31,2 = -0.071 ± J6.25, 
p1 = -0.047,andp 2 i 3 = -0.262 ± j 5 . 1 , 
and do the following: 
Write a MATLAB M-f ile to plot the root 
locus for the system and to find the 
following: 
a. The gain K at which the system becomes 
marginally stable 
b. The closed-loop poles, p, and transfer 
function, T(s), corresponding to a 16% 
overshoot 
c. The coordinates of the point selected 
on the root-locus corresponding to 16% 
overshoot 
d. A simulation of the unit-step response 
of the closed-loop system correspond-
ing to your 16% overshoot design. Note 
in your simulation the following val-
ues: (1) actual percent overshoot, (2) 
corresponding peak time, Tpr (2) rise 
time, rr, (3) settling time, Tsr and (4) 
final steady-state value. 
b. Assume a second-order approximation and find 
the gain, K, to yield a closed-loop step response 
that has 38% overshoot. 
c. Estimate settling time and peak time for the 
response designed in Part b. 
d. Discuss the validity of your 
second-order 
approximation. 
e. Use MATLAB to p l o t the c l o s e d - 
t,AT1AD 
c 
MATLAB 
loop step response for the 
ATT^fc 
value of K found in Part b. Com- 
^lil^P 
pare the plot to predicted values found 
in Parts b and c. 
The amount of RTIs delivered to the patient will 
automatically be calculated by embedding the pa-
tient in the control loop as G(s) shown in Figure 
P6.20 (Craig, 2004). 
a. In the simplest case, G(s) = K, with K > 0. Note 
that this effectively creates a positive-feedback 
loop because the negative sign in the numerator of 
P(s) cancels out with the negative-feedback sign 
in the summing junction. Use positive-feedback 
rules to plot the root locus of the system. 
b. Now assume G(s) = —K with K > 0. The system 
is now a negative-feedback system. Use negative-
feed-back rules to draw the root locus. Show that 
in this case the system will be closed-loop stable 
for all K>Q, 
74. Hybrid vehicle. In c h a p t e r 7, 
MATLAB 
Figure 
P7.34 
shows 
the 
( 3 9 
block diagram of t h e speed c o n t r o l of 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
72. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses the active control of a pantograph mecha-
nism for high-speed rail systems. In Problem 79, 
Chapter 5, you found the block diagram for the active 
pantograph control system. Use your block diagram to 
do the following (O'Connor, 1997): 
a. Sketch the root locus. 
73. Control of HIV/AIDS. In the linearized model of 
Chapter 6, Problem 68, where virus levels are con-
trolled by means of RTIs, the open-loop plant 
transfer function was shown to be 
- 
y(*) _ 
-52Qs - 10.3844 
^ ~ UAs) ~ s3 + 2.6817^2 + 0.115 + 0.0126 

450 
Chapter 8 
Root Locus Techniques 
an HEV rearranged as a unity feedback 
system {Preitl, 
2007). 
Let the transfer function of the speed 
controller be 
K Psc 
K-i 
Ki 
Gsc{s) = KPsc + - ^ = 
a. Assume first that the speed controller 
is configured as a proportional con-
troller (KIsc = 0 and Gsc{s) = KPsc). Cal-
culate the forward-path open-loop 
poles . Now use MATLAB to plot the sys-
tem's root locus and find the gain, KPsc 
that yields a critically damped 
closed-loop response. Finally, plot 
the time-domain response, c(t), for 
a unit-step input using MATLAB. Note 
on the curve the rise time, Tr, and 
settling time, Ts. 
b. Now add an integral gain, KIsc, to the 
controller, such that KIsc/KPsc 
= OA. 
Use MATLAB to plot the root locus and 
find the proportional gain, KPsc, that 
could lead to a closed-loop unit-step 
response with 10% overshoot. Plot c (t) 
using MATLAB and note on the curve the 
peak time, Tp, and settling time, Ts. 
Does the response obtained resemble a 
second-order underdamped response? 
Cyber Exploration Laboratory 
Experiment 8.1 
Objective To verify the effect of open-loop poles and zeros upon the shape of the 
root locus. To verify the root locus as a tool for estimating the effect of open-loop 
gain upon the transient response of closed-loop systems. 
Minimum Required Software Packages MATLAB and the Control System 
Toolbox 
Prelab 
1. Sketch two possibilities for the root locus of a unity negative-feedback system 
with the open-loop pole-zero configuration shown in Figure P8.27. 
O 
FIGUREP8.27 
K{s +1.5) 
2. If the open-loop system of Prelab 1 is G(s) = -, 
' CN, ' ' nX, estimate the 
s(s + 0.5)(5 + 10) 
percent overshoot at the following values of gain, K: 20, 50, 85, 200, and 700. 
Lab 
1. Using Matlab's SISO Design Tool, set up a negative unity feedback system with 
G(s)= 
* ( S + 6 ) 
5(5 + 0.5)(5 + 10) to produce a root locus. For convenience, set up the zero 

Cyber Exploration Laboratory 
at —6 using SISO Design Tool's compensator function by simply dragging a zero 
to -6 on the resulting root locus. Print the root locus for the zero at —6. Move the 
zero to the following locations and print out a root locus at each location: —2, 
-1.5, -1.37, and -1.2. 
2. Using Matlab's SISO Design Tool, set up a negative unity feedback system with 
K{s +1.5) 
451 
G(s) = 
to produce a root locus. Open the LTI Viewer for SISO 
s(s + 0.5){s + 10) 
Design Tool to show step responses. Using the values of K specified in Prelab 2, 
record the percent overshoot and settling time and print the root loci and step 
response for each value of K. 
Postlab 
1. Discuss your findings from Prelab 1 and Lab 1. What conclusions can you draw? 
2. Make a table comparing percent overshoot and settling time from your calcula-
tions in Prelab 2 and your experimental values found in Lab 2. Discuss the 
reasons for any discrepancies. What conclusions can you draw? 
Experiment 8.2 
Objective To use MATLAB to design the gain of a controller via root locus. 
Minimum Required Software Package MATLAB with the Control Sys-
tems Toolbox. 
Prelab The open-loop system dynamics model for the NASA eight-axis 
Advanced Research Manipulator II (ARM II) electromechanical shoulder joint/ 
link, actuated by an armature-controlled dc servomotor is shown in Figure P8.28. 
The ARM II shoulder joint constant parameters are Ka = 12, L = 0.006 H, R = 1.4 O, 
Kb = 0.00867, n = 200, Km = 4.375, J=Jm+JL/n2, 
D = D,„ + DJn2, JL = 1,DL = 0.5, 
Jm = 0.00844, and Dm = 0.00013(Craig, 2005), (Nyzen, 1999), (Williams, 1994). 
a. Obtain the equivalent open-loop transfer function, G(s) = 
. 
Vref{s) 
b. The loop is to be closed by cascading a controller, Gc(s) = KDs + Kp, with G(s) in 
the forward 
path 
forming 
an equivalent forward-transfer 
function, 
Ge(s) = Gc(s)G(s). Parameters of Gc(s) will be used to design a desired transient 
performance. The input to the closed-loop system is a voltage, V/(s), representing 
the desired angular displacement of the robotic joint with a ratio of 1 volt equals 
1 radian. The output of the closed-loop system is the actual angular displacement 
of the joint, 0L(s). An encoder in the feedback path, Ke, converts the actual joint 
displacement to a voltage with a ratio of 1 radian equals 1 volt. Draw the closed-
loop system showing all transfer functions. 
c. Find the closed-loop transfer function. 
«v, 
Amp 
K, 
+j^A 
1 
Armature circui 
& 
motor dynamics 
K 
(Ls + R)(Js + D) 
I 
Kh 
ack en 
Gears & 
ntegrator 
m 
s 
if 
FIGURE P8.28 
Open-loop model for ARM 11 

452 
Chapter 8 
Root Locus Techniques 
Lab Let —- = 4 and use MATLAB to design the value of KD to yield a step 
response with a maximum percent overshoot of 0.2%. 
Postlab 
1. Discuss the success of your design. 
2. Is the steady-state error what you would expect? Give reasons for your answer. 
Experiment 8.3 
Objective 
To use Lab VIEW to design the gain of a controller via root locus. 
Minimum Required Software Package 
LabVIEW with the Control Design 
and Simulation Module, and the MathScript RT Module. 
Prelab 
Complete the Prelab to Experiment 8.2 if you have not already done so. 
Lab 
Let —— = 4. Use LabVIEW to open and customize the Interactive Root 
Locus VI from the Examples in order to implement a design of KD to yield a step 
response with a maximum percent overshoot of 0.2%. Use a hybrid graphical/ 
MathScript approach. 
Postlab 
1. Discuss the success of your design. 
2. Is the steady-state error what you would expect? Give reasons for your answer. 
£ Bibliography]) 
Anderson, C. G., Richon, J.-B., and Campbell, T. J. An Aerodynamic Moment-Controlled 
Surface for Gust Load Alleviation on Wind Turbine Rotors. IEEE Transactions on Control 
System Technology, vol. 6, no. 5, September 1998, pp. 577-595. 
Annaswamy, A. M., and Ghonien, A. F. Active Control in Combustion Systems. IEEE Control 
Systems, December 1995, pp. 49-63. 
Astrom, K., Klein, R. E., and Lennartsson, A. Bicycle Dynamics and Control. IEEE Control 
Systems, August 2005, pp. 26-47. 
Baker, M. W, and Sarpeshkar, R. Feedback Analysis and Design of RF Power Links for Low-
Power Bionic Systems. IEEE Transactions on Biomedical, Circuits and Systems, vol. 1,2007, 
pp. 28-38. 
Bruner, A. M., Belvin, W K., Horta, L. G, and Juang, J. Active Vibration Absorber for the CSI 
Evolutionary Model: Design and Experimental Results. Journal of Guidance, Control, and 
Dynamics, vol. 15, no. 5, September-October 1992, pp. 1253-1257. 
Cavallo, A., De Maria, G, and Verde, L. Robust Flight Control Systems: A Parameter Space 
Design. Journal of Guidance, Control, and Dynamics, vol. 15, no. 5, September-October 
1992, pp. 1207-1215. 
Cho, D, and Hedrick, J. K. Pneumatic Actuators for Vehicle Active Suspension Applications. 
Journal of Dynamic Systems, Measurement, and Control, March 1985, pp. 67-72. 
Craig, I. K., Xia, X., and Venter, J. W., Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 

Bibliography 
Craig, J. J, Introduction to Robotics. Mechanics and Control, 3d ed. Prentice Hall, Upper 
Saddle River, NJ, 2005. 
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA., 1989. 
Evans, W. R. Control System Synthesis by Root Locus Method. AIEE Transactions, vol. 69, 
1950, pp. 66-69. 
Evans, W. R. Graphical Analysis of Control Systems. AIEE Transactions, vol. 67, 1948, pp. 
547-551. 
Franklin, G. F, Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems, 2d 
ed. Addison-Wesley, Reading, MA., 1991. 
Galvao, K. H. R., Yoneyama, X, and de Araiijo, F M. U. A Simple Technique for Identifying a 
Linearized Model for a Didactic Magnetic Levitation System. IEEE Transactions on 
Education, vol. 46, no. 1, February 2003, pp. 22-25. 
Guy, W-, The Human Pupil Servomechanism. Computers in Education Division of ASEE, 
Application Note No. 45, 1976. 
Hardy, H. L. Multi-Loop Servo Controls Programmed Robot. Instruments and Control 
Systems, June 1967, pp. 105-111. 
Hollot, C. V., Misra, V., Towsley, D., and Gong, W. A Control Theoretic Analysis of RED. 
Proceedings of IEEE INFOCOM, 2001, pp. 1510-1519. 
Johnson, H., et al. Unmanned Free-Swimming Submersible(UFSS) System Description. NRL 
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980. 
Karlsson, P., and Svesson, J. DC Bus Voltage Control for a Distributed Power System, IEEE 
Trans, on Power Electronics, vol. 18, no. 6, 2003, pp. 1405-1412. 
Khammash, M., and El-Samad, H. Systems Biology: From Physiology to Gene Regulation. 
IEEE Control Systems, August 2004, pp. 62-76. 
Kuo, B. C. Automatic Control Systems, 6th ed. Prentice Hall, Upper Saddle River, NJ, 1991. 
Lam, C S., Wong, M. G, and Han, Y. D. Stability Study on Dynamic Voltage Restorer (DVR). 
Power Electronics Systems and Applications 2004; Proceedings of the First International 
Conference on Power Electronics, 2004, pp. 66-71. 
Low, K. H., Wang, H., Liew, K. M., and Cai, Y Modeling and Motion Control of Robotic Hand 
for Telemanipulation Application. International Journal of Software Engineering and 
Knowledge Engineering, vol. 15, 2005, pp. 147-152. 
Nyawako, D , and Reynolds, P. Response-Dependent Velocity Feedback Control for Mitiga-
tion of Human-Induced Floor Vibrations, Smart Materials and Structures, vol. 18, IOP 
Publishing Ltd., UK, 2009, pp. 1-13. 
Nyzen, R. J. Analysis and Control of an Eight-Degree-of-Freedom Manipulator, Ohio Uni-
versity Masters Thesis, Mechanical Engineering, Dr. Robert L. Williams II, advisor, August 
1999. 
O'Connor, D. N , Eppinger, S. D , Seering, W P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1^. 
Piper, G. E., and Kwatny, H. G. Complicated Dynamics in Spacecraft Attitude Control 
Systems. Journal of Guidance, Control, and Dynamics, vol. 15, no. 4, July-August 1992, pp. 
825-831. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE, 2007. 
Saeys, W, Deblander, X, Ramon, H., and Anthonis, J. High-Performance Flow Control 
for Site-Specific Application of Liquid Manure, Biosystems Engineering, vol. 99, 2008, 
pp. 22-34. 
Spong, M., Hutchinson, S., and Vidyasagar, M. Robot Modeling and Control. John Wiley & 
Sons, Hoboken, NJ, 2006. 

Chapter 8 
Root Locus Techniques 
Stapleton, C.A. Root-Locus Study of Synchronous-Machine Regulation. IEE Proceedings, 
vol. I l l , issue 4, 1964, pp. 761-768. 
Unyelioglu, K. A., Hatopoglu, C, and Ozgiiner, U. Design and Stability Analysis of a Lane 
Following Controller. IEEE Transactions on Control Systems Technology, vol. 5,1997, pp. 
127-134. 
Williams, R. L. II. Local Performance Optimization for a Class of Redundant Eight-Degree-
of-Freedom Manipulators. NASA Technical Paper 3417, NASA Langley Research Center, 
Hampton VA, March 1994. 
Yamazaki, H., Marumo, Y, Iizuka, Y, and Tsunashima, H. Driver Model Simulation for 
Railway Brake Systems, Fourth IET Int. Conf. on Railway Condition Monitoring, 2008. 
Yan, T, and Lin, R. Experimental Modeling and Compensation of Pivot Nonlinearity in Hard 
Disk Drives. IEEE Transactions on Magnetics, vol. 39, 2003, pp. 1064-1069. 

Design via Root Locus 
I 9 
£ Chapter Learning Outcomes J 
After completing this chapter the student will be able to: 
• Use the root locus to design cascade compensators to improve the steady-state error 
(Sections 9.1-9.2) 
• Use the root locus to design cascade compensators to improve the transient 
response (Section 9.3) 
• Use the root locus to design cascade compensators to improve both the steady-state 
error and the transient response (Section 9.4) 
• Use the root locus to design feedback compensators to improve the transient 
response (Section 9.5) 
• Realize the designed compensators physically (Section 9.6) 
(case Study Learning Outcomes^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to design a cascade compensator to meet transient response and 
steady-state error specifications. 
• Given the pitch or heading control system for the UFSS vehicle shown on the back 
endpapers, you will be able to design a cascade or feedback compensator to meet 
transient response specifications. 
455 

Chapter 9 
Design via Root Locus 
Introduction 
In Chapter 8, we saw that the root locus graphically displayed both transient response 
and stability information. The locus can be sketched quickly to get a general idea of the 
changes in transient response generated by changes in gain. Specific points on the 
locus also can be found accurately to give quantitative design information. 
The root locus typically allows us to choose the proper loop gain to meet a 
transient response specification. As the gain is varied, we move through different 
regions of response. Setting the gain at a particular value yields the transient 
response dictated by the poles at that point on the root locus. Thus, we are limited 
to those responses that exist along the root locus. 
Improving Transient Response 
Flexibility in the design of a desired transient response can be increased if we can 
design for transient responses that are not on the root locus. Figure 9.1(a) illustrates 
the concept. Assume that the desired transient response, defined by percent over-
shoot and settling time, is represented by point B. Unfortunately, on the current root 
locus at the specified percent overshoot, we only can obtain the settling time 
represented by point A after a simple gain adjustment. Thus, our goal is to speed 
up the response at A to that of B, without affecting the percent overshoot. This 
increase in speed cannot be accomplished by a simple gain adjustment, since point B 
does not lie on the root locus. Figure 9.1(b) illustrates the improvement in the 
transient response we seek: The faster response has the same percent overshoot as 
the slower response. 
X = Closed-loop pole 
X = Open-loop pole 
s-plane 
X X X -
(a) 
Poles at B 
Poles at A 
FIGURE 9.1 
a. Sample root 
locus, showing possible design 
point via gain adjustment (A) 
and desired design point that 
cannot be met via simple gain 
adjustment (B); b. responses 
from poles at A and B 

9.1 Introduction 
One way to solve our problem is to replace the existing system with a system 
whose root locus intersects the desired design point, B. Unfortunately, this replace-
ment is expensive and counterproductive. Most systems are chosen for character-
istics other than transient response. For example, an elevator cage and motor are 
chosen for speed and power. Components chosen for their transient response may 
not necessarily meet, for example, power requirements. 
Rather than change the existing system, we augment, or compensate, the 
system with additional poles and zeros, so that the compensated system has a root 
locus that goes through the desired pole location for some value of gain. One of the 
advantages of compensating a system in this way is that additional poles and zeros 
can be added at the low-power end of the system before the plant. Addition of 
compensating poles and zeros need not interfere with the power output require-
ments of the system or present additional load or design problems. The compensat-
ing poles and zeros can be generated with a passive or an active network. 
A possible disadvantage of compensating a system with additional open-loop 
poles and zeros is that the system order can increase, with a subsequent effect on the 
desired response. In Chapters 4 and 8, we discussed the effect of additional closed-
loop poles and zeros on the transient response. At the beginning of the design 
process discussed in this chapter, we determine the proper location of additional 
open-loop poles and zeros to yield the desired second-order closed-loop poles. 
However, we do not know the location of the higher-order closed-loop poles until the 
end of the design. Thus, we should evaluate the transient response through simula-
tion after the design is complete to be sure the requirements have been met. 
In Chapter 12, when we discuss state-space design, the disadvantage of finding 
the location of higher-order closed-loop poles after the design will be eliminated by 
techniques that allow the designer to specify and design the location of all the closed-
loop poles at the beginning of the design process. 
One method of compensating for transient response that will be discussed later 
is to insert a differentiator in the forward path in parallel with the gain. We can 
visualize the operation of the differentiator with the following example. Assuming a 
position control with a step input, we note that the error undergoes an initial large 
change. Differentiating this rapid change yields a large signal that drives the plant. 
The output from the differentiator is much larger than the output from the pure gain. 
This large, initial input to the plant produces a faster response. As the error 
approaches its final value, its derivative approaches zero, and the output from 
the differentiator becomes negligible compared to the output from the gain. 
Improving Steady-State Error 
Compensators are not only used to improve the transient response of a system; they 
are also used independently to improve the steady-state error characteristics. 
Previously, when the system gain was adjusted to meet the transient response 
specification, steady-state error performance deteriorated, since both the transient 
response and the static error constant were related to the gain. The higher the gain, 
the smaller the steady-state error, but the larger the percent overshoot. On the other 
hand, reducing gain to reduce overshoot increased the steady-state error. If we use 
dynamic compensators, compensating networks can be designed that will allow us to 
meet transient and steady-state error specifications simultaneously.1 We no longer 
The word dynamic describes compensators with noninstantaneous transient response. The transfer 
functions of such compensators are functions of the Laplace variable, s, rather than pure gain. 

Chapter 9 
Design via Root Locus 
Cascade 
compensator 
m+>6d 
* 
yy 
I 
am 
Original 
controller 
G2{s) 
Plant 
G3(s) 
m 
(a) 
FIGURE 9.2 
Compensation 
techniques: a. cascade; 
b. feedback 
m tM 
. 
—i 
Original 
controller 
C,(s) 
Plant 
Gz(s) 
Feedback 
compensator 
ffJsrl 
C(s) 
(b) 
need to compromise between transient response and steady-state error, as long as 
the system operates in its linear range. 
In Chapter 7, we learned that steady-state error can be improved by adding an 
open-loop pole at the origin in the forward path, thus increasing the system type and 
driving the associated steady-state error to zero. This additional pole at the origin 
requires an integrator for its realization. 
In summary, then, transient response is improved with the addition of differ-
entiation, and steady-state error is improved with the addition of integration in the 
forward path. 
Configurations 
Two configurations of compensation are covered in this chapter: cascade compen-
sation and feedback compensation. These methods are modeled in Figure 9.2. With 
cascade compensation, the compensating network, Gi(s), is placed at the low-power 
end of the forward path in cascade with the plant. If feedback compensation is used, 
the compensator, H[(s), is placed in the feedback path. Both methods change the 
open-loop poles and zeros, thereby creating a new root locus that goes through the 
desired closed-loop pole location. 
Compensators 
Compensators that use pure integration for improving steady-state error or pure 
differentiation for improving transient response are defined as ideal compensators. 
Ideal compensators must be implemented with active networks, which, in the case of 
electric networks, require the use of active amplifiers and possible additional power 
sources. An advantage of ideal integral compensators is that steady-state error is 
reduced to zero. Electromechanical ideal compensators, such as tachometers, are 
often used to improve transient response, since they can be conveniently interfaced 
with the plant. 
Other design techniques that preclude the use of active devices for compen-
sation can be adopted. These compensators, which can be implemented with passive 
elements such as resistors and capacitors, do not use pure integration and differen-
tiation and are not ideal compensators. Advantages of passive networks are that they 

9.2 Improving Steady-State Error via Cascade Compensation 
are less expensive and do not require additional power sources for their operation. 
Their disadvantage is that the steady-state error is not driven to zero in cases where 
ideal compensators yield zero error. 
Thus, the choice between an active or a passive compensator revolves around 
cost, weight, desired performance, transfer function, and the interface between the 
compensator and other hardware. In Sections 9.2, 9.3, and 9.4, we first discuss 
cascade compensator design using ideal compensation and follow with cascade 
compensation using compensators that are not implemented with pure integration 
and differentiation. 
(9.2 Improving Steady-State Error 
via Cascade Compensation 
In this section, we discuss two ways to improve the steady-state error of a feedback 
control system using cascade compensation. One objective of this design is to 
improve the steady-state error without appreciably affecting the transient response. 
The first technique is ideal integral compensation, which uses a pure integrator 
to place an open-loop, forward-path pole at the origin, thus increasing the system 
type and reducing the error to zero. The second technique does not use pure 
integration. This compensation technique places the pole near the origin, and 
although it does not drive the steady-state error to zero, it does yield a measurable 
reduction in steady-state error. 
While the first technique reduces the steady-state error to zero, the compen-
sator must be implemented with active networks, such as amplifiers. The second 
technique, although it does not reduce the error to zero, does have the advantage 
that it can be implemented with a less expensive passive network that does not 
require additional power sources. 
The names associated with the compensators come either from the method of 
implementing the compensator or from the compensator's characteristics. Systems 
that feed the error forward to the plant are called proportional control systems. 
Systems that feed the integral of the error to the plant are called integral control 
systems. Finally, systems that feed the derivative of the error to the plant are called 
derivative control systems. Thus, in this section we call the ideal integral compensator 
a proportional-plus-integral (PI) controller, since the implementation, as we will see, 
consists of feeding the error (proportional) plus the integral of the error forward to 
the plant. The second technique uses what we call a lag compensator. The name of 
this compensator comes from its frequency response characteristics, which will be 
discussed in Chapter 11. Thus, we use the name PI controller interchangeably with 
ideal integral compensator, and we use the name lag compensator when the cascade 
compensator does not employ pure integration. 
Ideal Integral Compensation (PI) 
Steady-state error can be improved by placing an open-loop pole at the origin, 
because this increases the system type by one. For example, a Type 0 system 
responding to a step input with a finite error responds with zero error if the system 
type is increased by one. Active circuits can be used to place poles at the origin. Later 
in this chapter, we show how to build an integrator with active electronic circuits. 
To see how to improve the steady-state error without affecting the transient 
response, look at Figure 9.3(a). Here we have a system operating with a desirable 

Chapter 9 
Design via Root Locus 
Gain 
Plant 
mi(9) -
yy 
T 
K 
G{s) 
C(s) 
R(s) + fi 
mY 
Compensator 
3K 
\ 
K 
— » > 
Plant 
G(s) 
C(s) 
s-plane 
9,-0 2-^3 = (2^+1)180° 
(a) 
-e]-e2-e3- 
0^(2^+1)180° 
Compensator 
Plant 
I* § K ^ 
G(s) 
C(s) 
- 0 , - 0 2 - ^ 3 - Qpc + 9zc = &k + 5)180° 
m 
FIGURE 9.3 Pole at A is a. on the root locus without compensator; b. not on the root locus with 
compensator pole added; c, approximately on the root locus with compensator pole and zero 
added 
transient response generated by the closed-loop poles at A If we add a pole at the 
origin to increase the system type, the angular contribution of the open-loop poles at 
point A is no longer 180°, and the root locus no longer goes through point A, as 
shown in Figure 9.3(6). 
To solve the problem, we also add a zero close to the pole at the origin, as shown 
in Figure 9.3(c). Now the angular contribution of the compensator zero and compen-
sator pole cancel out, point A is still on the root locus, and the system type has been 
increased. Furthermore, the required gain at the dominant pole is about the same as 

9.2 Improving Steady-State Error via Cascade Compensation 
461 
before compensation, since the ratio of lengths from the compensator pole and the 
compensator zero is approximately unity. Thus, we have improved the steady-state 
error without appreciably affecting the transient response. A compensator with a pole 
at the origin and a zero close to the pole is called an ideal integral compensator. 
In the example that follows, we demonstrate the effect of ideal integral compen-
sation. An open-loop pole will be placed at the origin to increase the system type and 
drive the steady-state error to zero. An open-loop zero will be placed very close to the 
open-loop pole at the origin so that the original closed-loop poles on the original root 
locus still remain at approximately the same points on the compensated root locus. 
Example 9.1 
Effect of an Ideal Integral Compensator 
PROBLEM: Given the system of Figure 9.4(a), operating with a damping ratio of 
0.174, show that the addition of the ideal integral compensator shown in Figure 9.4(b) 
reduces the steady-state error to zero for a step input without appreciably affecting 
transient response. The compensating network is chosen with a pole at the origin 
to increase the system type and a zero at -0.1, close to the compensator pole, so that 
the angular contribution of the compensator evaluated at the original, dominant, 
second-order poles is approximately zero. Thus, the original, dominant, second-order 
closed-loop poles are still approximately on the new root locus. 
SOLUTION: We first analyze the uncompensated system and determine the loca-
tion of the dominant, second-order poles. Next we evaluate the uncompensated 
steady-state error for a unit step input. The root locus for the uncompensated 
system is shown in Figure 9.5. 
A damping ratio of 0.174 is represented by a radial line drawn on the s-plane at 
100.02°. Searching along this line with the root locus program discussed in Appendix 
H at www.wiley.com/college/nise, we find that the dominant poles are 0.694 ± /3.926 
for a gain, K, of 164.6. Now look for the third pole on the root locus beyond —10 on 
the real axis. Using the root locus program and searching for the same gain as that of 
the dominant pair, K = 164.6, we find that the third pole is approximately at -11.61. 
This gain yields Kp = 8.23. Hence, the steady-state error is 
e(oo) = 
1 
1+KD 
1 + 8.23 = 0.108 
(9.1) 
m+*r 
-1 
x m, 
y 
Gain 
K 
Plant 
1 
(s+l)(s+2)(s+l0) 
C(s) 
ia) 
R(s) t(9\ E{s\ 
Compensator 
K(s+0A) 
s 
—^-
Plant 
1 
(5+1)(S+2)(A+10) 
C(sj 
(b) 
FIGURE 9.4 Closed-loop 
system for Example 9.1: 
a. before compensation; 
b. after ideal integral 
compensation 

462 
Chapter 9 
Design via Root Locus 
¢- = 0.174 
-0.694+y'3.926 
AT =164.6 
• ^ - K 
*-
-11.61 
-10 
- 6 
X = Closed-loop pole 
X = Open-loop pole 
-4 
s-plane 
100.02° 1_ 
FIGURE 9.5 Root locus for uncompensated system of Figure 9.4(A) 
Adding an ideal integral compensator with a zero at —0.1, as shown in Figure 
9.4(b), we obtain the root locus shown in Figure 9.6. The dominant second-order 
poles, the third pole beyond —10, and the gain are approximately the same as for 
the uncompensated system. Another section of the compensated root locus is 
between the origin and —0.1. Searching this region for the same gain at the 
dominant pair, K ~ 158.2, the fourth closed-loop pole is found at -0.0902, close 
C = 0.174 
-0.678 +./3.837 
K= 158.2 
-o< 
x-
-11.55 
-10 
- 6 
-4 
X = Closed-loop pole 
X = Open-loop pole 
Fourth closed-loop 
•I -j2 
pole at - 0.0902 
-./4 
FIGURE 9.6 
Root locus for compensated system of Figure 9.4(b) 

9.2 Improving Steady-State Error via Cascade Compensation 
463 
Ideal integral 
compensated 
Uncompensated 
10 
Time (seconds) 
15 
20 
FIGURE 9.7 Ideal integral 
compensated system response 
and the uncompensated system 
response of Example 9.1 
enough to the zero to cause pole-zero cancellation. Thus, the compensated 
system's closed-loop poles and gain are approximately the same as the un-
compensated system's closed-loop poles and gain, which indicates that the 
transient response of the compensated system is about the same as the un-
compensated system. However, the compensated system, with its pole at the 
origin, is a Type 1 system; unlike the uncompensated system, it will respond to a 
step input with zero error. 
Figure 9.7 compares the uncompensated response with the ideal integral 
compensated response. The step response of the ideal integral compensated system 
approaches unity in the steady state, while the uncompensated system approaches 
0.892. Thus, the ideal integral compensated system responds with zero steady-state 
error. The transient response of both the uncompensated and the ideal integral 
compensated systems is the same up to approximately 3 seconds. After that time the 
integrator in the compensator, shown in Figure 9.4(b), slowly compensates for the 
error until zero error is finally reached. The simulation shows that it takes 18 seconds 
for the compensated system to reach to within ±2% of the final value of unity, while 
the uncompensated system takes about 6 seconds to settle to within ±2% of its final 
value of 0.892. The compensation at first may appear to yield deterioration in the 
settling time. However, notice that the compensated system reaches the un-
compensated system's final value in about the same time. The remaining time is 
used to improve the steady-state error over that of the uncompensated system. 
A method of implementing an ideal integral compensator is shown in Figure 9.8. 
The compensating network precedes G(s) and is an ideal integral compensator since 
Kils 
Gc(s)=Ki+ 
— = 
(9.2) 
Integral (I) 
FIGURE 9.8 PI controller 

464 
Chapter 9 
Design via Root Locus 
The value of the zero can be adjusted by varying K%/Kh In this implementation, the 
error and the integral of the error are fed forward to the plant, G(s). Since Figure 9.8 
has both proportional and integral control, the ideal integral controller, or compen-
sator, is given the alternate name PI controller. Later in the chapter we will see how to 
implement each block, K\ and K%{a, 
Lag Compensation 
Ideal integral compensation, with its pole on the origin, requires an active integrator. 
If we use passive networks, the pole and zero are moved to the left, close to the 
origin, as shown in Figure 9.9(c). One may guess that this placement of the pole, 
although it does not increase the system type, does yield an improvement in the static 
error constant over an uncompensated system. Without loss of generality, we 
demonstrate that this improvement is indeed realized for a Type 1 system. 
Assume the uncompensated system shown in Figure 9.9(a). The static error 
constant, KVo, for the system is 
Kvo = Kzizi 
P1P2 • • • 
(9.3) 
Assuming the lag compensator shown in Figure 9.9(6) and (c), the new static error 
constant is 
KyN — (KziZ2---)(zc) 
iP\P2'")iPc) 
(9.4) 
What is the effect on the transient response? Figure 9.10 shows the effect on the 
root locus of adding the lag compensator. The uncompensated system's root locus is 
shown in Figure 9.10(a), where point P is assumed to be the dominant pole. If the lag 
compensator pole and zero are close together, the angular contribution of the 
R(s) + ^ h E(S) . 
9 
Gain 
K 
Plant 
(s + z,)(s + z2) • • • 
s(s + p{)(s + p2) - - • 
C(s) 
««) 
t f 
% 1 
>) m, 
y 
Compensator 
K(s + zc) 
(s + pc) 
Plant 
(S + 2,)(5 + Z2)' • ' 
s(s + p,)(i + p2) • • • 
cm 
(b) 
Gc(s) = 
(s + pc) 
j«> 
-O-x-
~Zc ~Pc 
s-plane 
FIGURE 9.9 
a. Type 1 uncompensated system; b. Type 1 compensated system; c compensator 
pole-zero plot 

9.2 Improving Steady-State Error via Cascade Compensation 
jco 
jco 
(a) 
(b) 
FIGURE 9.10 
Root locus: a. before lag compensation; b. after lag compensation 
compensator to point P is approximately zero degrees. Thus, in Figure 9.10(6), where 
the compensator has been added, point P is still at approximately the same location 
on the compensated root locus. 
What is the effect on the required gain, Kl After inserting the compensator, we 
find that K is virtually the same for the uncompensated and compensated systems, 
since the lengths of the vectors drawn from the lag compensator are approximately 
equal and all other vectors have not changed appreciably. 
Now, what improvement can we expect in the steady-state error? Since we 
established that the gain, K, is about the same for the uncompensated and compen-
sated systems, we can substitute Eq. (9.3) into (9.4) and obtain 
KVN=KVo^>KVo 
(9.5) 
Equation (9.5) shows that the improvement in the compensated system's Kv 
over the uncompensated system's Kv is equal to the ratio of the magnitude of the 
compensator zero to the compensator pole. In order to keep the transient response 
unchanged, we know the compensator pole and zero must be close to each other. 
The only way the ratio of zc to pc can be large in order to yield an appreciable 
improvement in steady-state error and simultaneously have the compensator's 
pole and zero close to each other to minimize the angular contribution is to place 
the compensator's pole-zero pair close to the origin. For example, the ratio of zc to 
pc can be equal to 10 if the pole is at -0.001 and the zero is at -0.01. Thus, the ratio 
is 10, yet the pole and zero are very close, and the angular contribution of the 
compensator is small. 
In conclusion, although the ideal compensator drives the steady-state error 
to zero, a lag compensator with a pole that is not at the origin will improve the 
static error constant by a factor equal to zc/pc- There also will be a minimal effect 
upon the transient response if the pole-zero pair of the compensator is placed 
close to the origin. Later in the chapter we show circuit configurations for the lag 
compensator. These circuit configurations can be obtained with passive networks 
and thus do not require the active amplifiers and possible additional power 
supplies that are required by the ideal integral (PI) compensator. In the following 
example we design a lag compensator to yield a specified improvement in steady-
state error. 

466 
Chapter 9 
Design via Root Locus 
Example 9.2 
Lag Compensator Design 
PROBLEM: Compensate the system of Figure 9.4(a), whose root locus is shown in 
Figure 9.5, to improve the steady-state error by a factor of 10 if the system is 
operating with a damping ratio of 0.174. 
SOLUTION: The uncompensated system error from Example 9.1 was 0.108 with 
Kp = 8.23. A tenfold improvement means a steady-state error of 
e(oo)=5^? = 0.0108 
Since 
e(oo) = 
1 
= 0.0108 
1+KP 
rearranging and solving for the required Kp yields 
1 - <?(oo) 
1 - 0.0108 
Kp = 
e oo 
0.0108 
= 91.59 
(9.6) 
(9.7) 
(9.8) 
The improvement in Kp from the uncompensated system to the compensated 
system is the required ratio of the compensator zero to the compensator pole, or 
Zc 
Pc 
PN 
Po 
91.59 
8.23 = 11.13 
Arbitrarily selecting 
we use Eq. (9.9) and find 
p c = 0.01 
zc = 11.13pc« 0.111 
(9.9) 
(9.10) 
(9.11] 
Let us now compare the compensated system, shown in Figure 9.11, with the 
uncompensated system. First sketch the root locus of the compensated system, as 
shown in Figure 9.12. Next search along the £ = 0.174 line for a multiple of 180° and 
find that the second-order dominant poles are at —0.678 ±/3.836 with a gain, K, of 
158.1, The third and fourth closed-loop poles are at -11.55 and -0.101, respec-
tively, and are found by searching the real axis for a gain equal to that of the 
dominant poles. All transient and steady-state results for both the uncompensated 
and the compensated systems are shown in Table 9.1. 
The fourth pole of the compensated system cancels its zero. This leaves the 
remaining three closed-loop poles of the compensated system very close in value to 
the three closed-loop poles of the uncompensated system. Hence, the transient 
FIGURE 9.11 Compensated 
system for Example 9.2 
R(s) +/9\£(*L 
•tx y 
' 
Compensator 
£¢¢ + 8.111) 
(s + 0.01) 
Plant 
1 
(5+!)(.?+ 2)(.v+10) 
C{s) 

9.2 
Improving Steady-State Error via Cascade Compensation 
4 6 7 
/» 
C= 0.174 
0.678 +./3.836! 
AT= 158.1 
— X 
* -
-11.55 
-10 
- 6 
X = Closed-loop pole 
X = Open-loop pole 
-4 
Compensator pole 
at -0.01 
.„ Fourth closed-loop 
"** pole at -0.101 
-/4 
response of both systems is approximately the same, as is the system gain, but notice 
that the steady-state error of the compensated system is 1/9.818 that of the un-
compensated system and is close to the design specification of a tenfold improvement. 
Figure 9.13 shows the effect of the lag compensator in the time domain. Even 
though the transient responses of the uncompensated and lag-compensated sys-
tems are the same, the lag-compensated system exhibits less steady-state error by 
approaching unity more closely than the uncompensated system. 
We now examine another design possibility for the lag compensator and 
compare the response to Figure 9.13. Let us assume a lag compensator whose pole 
and zero are 10 times as close to the origin as in the previous design. The results are 
compared in Figure 9.14. Even though both responses will eventually reach 
approximately the same steady-state value, the lag compensator previously de-
signed, Gc(s) = (s + 0.111)/(s + 0.01), approaches the final value faster than the 
proposed lag compensator, Gc(s) = (s + 0.0111)/(5 + 0.001). We can explain this 
phenomenon as follows. From Table 9.1, the previously designed lag compensator 
TABLE 9.1 Predicted characteristics of uncompensated and lag-compensated systems for 
Example 9.2 
Parameter 
Plant and compensator 
K 
*P 
e(oo) 
Dominant second-order poles 
Third pole 
Fourth pole 
Zero 
Uncompensated 
K 
(s + l)(s + 2)(s + l0) 
164.6 
8.23 
0.108 
-0.694+)3.926 
-11.61 
None 
None 
Lag-compensated 
K{s + 0.111) 
{S + 1)(5 + 2)(.5 +10)(5+ 0.01) 
158.1 
87.75 
0.011 
-0.678+/3.836 
-11.55 
-0.101 
-0.111 
FIGURE 9.12 Root locus for 
compensated system of 
Figure 9.11 
Trylt 9.1 
Use the following MATLAB 
and Control System Toolbox 
statements to reproduce 
Figure 9.13. 
Gu=zpk([], . . . 
[-1 -2 -10], 164. 6); 
Gc=zpk([-0.111], . . . 
[-0.01],1); 
Gce=Gu*Gc; 
Tu=f eedback (Gu, 1); 
Tc=feedback(Gce, 1); 
step(Tu) 
hold 
step(Tc) 

468 
Chapter 9 
Design via Root Locus 
FIGURE 9.13 Step responses 
of uncompensated and 
lag-compensated systems for 
Example 9.2 
FIG U R E 9.14 Step responses 
of the system for Example 9.2 
using different lag 
compensators 
Lag-compensated 
Uncompensated 
10 
15 
Time (seconds) 
20 
GM = 
(J + 0.111) 
(j+ 0.01) 
GJs) = (^ + 0.0111) 
(5- +0.001) 
10 
15 
Time (seconds) 
20 
has a fourth closed-loop pole at -0.101. Using the same analysis for the new lag 
compensator with its open-loop pole 10 times as close to the imaginary axis, we 
find its fourth closed-loop pole at -0.01, Thus, the new lag compensator has a 
closed-loop pole closer to the imaginary axis than the original lag compensator. 
This pole at —0.01 will produce a longer transient response than the original pole 
at -0.101, and the steady-state value will not be reached as quickly. 
WileyPLUS 
OJEJ 
Control Solutions 
Skill-Assessment Exercise 9.1 
PROBLEM: A unity feedback system with the forward transfer function 
G(s) = -r-^— 
is operating with a closed-loop step response that has 15% overshoot. Do the 
following: 
a. Evaluate the steady-state error for a unit ramp input. 
b. Design a lag compensator to improve the steady-state error by a factor of 20. 

9.3 Improving Transient Response via Cascade Compensation 
469 
c. Evaluate the steady-state error for a unit ramp input to your compensated 
system. 
d. Evaluate how much improvement in steady-state error was realized. 
ANSWERS: 
a. eramp(co) = 0.1527 
b'G^s)=sTm 
c. eramp(oo) - 0.0078 
d. 19.58 times improvement 
The complete solution is at www.wiley.com/college/nise. 
(
9.3 
Improving Transient Response 
via Cascade Compensation 
Since we have solved the problem of improving the steady-state error without 
affecting the transient response, let us now improve the transient response itself. In 
this section, we discuss two ways to improve the transient response of a feedback 
control system by using cascade compensation. Typically, the objective is to design a 
response that has a desirable percent overshoot and a shorter settling time than the 
uncompensated system. 
The first technique we will discuss is ideal derivative compensation. With ideal 
derivative compensation, a pure differentiator is added to the forward path of the 
feedback control system. We will see that the result of adding differentiation is the 
addition of a zero to the forward-path transfer function. This type of compensation 
requires an active network for its realization. Further, differentiation is a noisy 
process; although the level of the noise is low, the frequency of the noise is high 
compared to the signal. Thus, differentiating high-frequency noise yields a large, 
unwanted signal. 
The second technique does not use pure differentiation. Instead, it approx-
imates differentiation with a passive network by adding a zero and a more distant 
pole to the forward-path transfer function. The zero approximates pure differentia-
tion as described previously. 
As with compensation to improve steady-state error, we introduce names 
associated with the implementation of the compensators. We call an ideal deriva-
tive compensator a proportional-plus-derivative 
(PD) controller, since the imple-
mentation, as we will see, consists of feeding the error (proportional) plus 
the derivative of the error forward to the plant. The second technique uses a 
passive network called a lead compensator. As with the lag compensator, the name 
comes from its frequency response, which is discussed in Chapter 11. Thus, we use 
the name PD controller interchangeably with ideal derivative compensator, and 
we use the name lead compensator when the cascade compensator does not employ 
pure differentiation. 

Chapter 9 
Design via Root Locus 
Ideal Derivative Compensation (PD) 
The transient response of a system can be selected by choosing an appropriate 
closed-loop pole location on the s-plane. If this point is on the root locus, then a 
simple gain adjustment is all that is required in order to meet the transient response 
specification. If the closed-loop pole location is not on the root locus, then the root 
locus must be reshaped so that the compensated (new) root locus goes through the 
selected closed-loop pole location. In order to accomplish the latter task, poles and 
zeros can be added in the forward path to produce a new open-loop function whose 
root locus goes through the design point on the .y-plane. One way to speed up the 
original system that generally works is to add a single zero to the forward path. 
This zero can be represented by a compensator whose transfer function is 
Gc{s) =s + zc 
(9.12) 
This function, the sum of a differentiator and a pure gain, is called an ideal derivative, 
or PD controller. Judicious choice of the position of the compensator zero can 
quicken the response over the uncompensated system. In summary, transient 
responses unattainable by a simple gain adjustment can be obtained by augmenting 
the system's poles and zeros with an ideal derivative compensator. 
We now show that ideal derivative compensation speeds up the response of a 
system. Several simple examples are shown in Figure 9.15, where the uncompensated 
system of Figure 9.15(a), operating with a damping ratio of 0.4, becomes a compensated 
system by the addition of a compensating zero at —2, —3, and -4 in Figures 9.15(6), (c), 
and (d), respectively. In each design, the zero is moved to a different position, and the 
root locus is shown. For each compensated case, the dominant, second-order poles are 
farther out along the 0.4 damping ratio line than the uncompensated system. 
Each of the compensated cases has dominant poles with the same damping 
ratio as the uncompensated case. Thus, we predict that the percent overshoot will be 
the same for each case. 
Also, the compensated, dominant, closed-loop poles have more negative real 
parts than the uncompensated, dominant, closed-loop poles. Hence, we predict that 
the settling times for the compensated cases will be shorter than for the 
% = 0.4 
-0.939+./2.151 
K = 23.12 
Third 
pole 
-x- 1—x-
' 
X» 
-6 
-5 
-4 
-3 
-2 
X = Closed-loop pole 
X = Open-loop pole 
(a) 
£ = 0.4 
-3 +,/6.874 
AT = 51.25 
-X-
-6 
-5 
-4 
-5 
-2 
-1 
X = Closed-loop pole 
X = Open-loop pole 
(b) 
9.15 Using ideal derivative compensation: a. uncompensated; b. compensator zero at -2; (figure continues) 

9.3 Improving Transient Response via Cascade Compensation 
471 
C= 0.4 
-2.437 +/5.583 
K= 35.34 
-6 
-5 
-4 
-3 
X = Closed-loop pole 
X = Open-loop pole 
-6 
-5 
-4 
-3 
X = Closed-loop pole 
X = Open-loop pole 
(c) 
id) 
FIGURE 9.15 
(Continued) c. compensator zero at - 3 ; d. compensator zero at - 4 . 
uncompensated case. The compensated, dominant, closed-loop poles with the more 
negative real parts will have the shorter settling times. The system in Figure 9.15(b) 
will have the shortest settling time. 
All of the compensated systems will have smaller peak times than the 
uncompensated system, since the imaginary parts of the compensated systems 
are larger. The system of Figure 9.15(b) will have the smallest peak time. 
Also notice that as the zero is placed farther from the dominant poles, 
the closed-loop, compensated dominant poles move closer to the origin and 
to the uncompensated, dominant closed-loop poles. Table 9.2 summarizes the 
TABLE 9.2 
Predicted characteristics for the systems of Figure 9.15 
Plant and compensator 
Dom, 
K 
< 
0>n 
%OS 
T.s 
TP 
KP 
e(oo) 
Third 
Zero 
poles 
pole 
Comments 
Uncompensated 
K 
(s+l)(s 
+ 2)(s + 5) 
-0.939 ±/2.151 
23.72 
0.4 
2.347 
25.38 
4.26 
1.46 
2.372 
0.297 
-6.123 
None 
Second-order 
approx. OK 
Compensation b 
K(s + 2) 
(3+1)(5 
- 3 ±/6 
51.25 
0.4 
7.5 
25.38 
1.33 
0.46 
10.25 
0.089 
None 
None 
Pure 
+ 2)(.9 + 5) 
874 
second-order 
Compensation c 
K(s + 3) 
(s +l)(s + 2)(s + 5) 
-2.437 ±/5.583 
35.34 
0.4 
6.091 
25.38 
1.64 
0.56 
10.6 
0.086 
-3.127 
- 3 
Second-order 
approx. OK 
Compensation d 
K(s + 4) 
(s + l)(s + 2)(s + 5) 
-1.869 ±/4.282 
20.76 
0.4 
4.673 
25.38 
2.14 
0.733 
8.304 
0.107 
-4.262 
- 4 
Second-order 
approx. OK 

472 
Chapter 9 
Design via Root Locus 
FIGURE 9.16 
Uncompensated 
system and ideal derivative 
compensation solutions from 
Table 9.2 
results obtained from the root locus of each of the design cases shown in 
Figure 9.15. 
In summary, although compensation methods c and d yield slower responses 
than method b, the addition of ideal derivative compensation shortened the response 
time in each case while keeping the percent overshoot the same. This change can best 
be seen in the settling time and peak time, where there is at least a doubling of speed 
across all of the cases of compensation. An added benefit is the improvement in the 
steady-state error, even though lag compensation was not used. Here the steady-state 
error of the compensated system is at least one-third that of the uncompensated 
system, as seen by e(oo) and Kp. All systems in Table 9.2 are Type 0, and some steady-
state error is expected. The reader must not assume that, in general, improvement in 
transient response always yields an improvement in steady-state error. 
The time response of each case in Table 9.2 is shown in Figure 9.16. We see that 
the compensated responses are faster and exhibit less error than the uncompensated 
response. 
Now that we have seen what ideal derivative compensation can do, we are 
ready to design our own ideal derivative compensator to meet a transient response 
specification. Basically, we will evaluate the sum of angles from the open-loop poles 
and zeros to a design point that is the closed-loop pole that yields the desired 
transient response. The difference between 180° and the calculated angle must be the 
angular contribution of the compensator zero. Trigonometry is then used to locate 
the position of the zero to yield the required difference in angle. 
Ideal Derivative Compensator Design 
PROBLEM: Given the system of Figure 9.17, design an ideal derivative compen-
sator to yield a 16% overshoot, with a threefold reduction in settling time. 
SOLUTION: Let us first evaluate the performance of the un-
*- compensated system operating with 16% overshoot. The root locus 
for the uncompensated system is shown in Figure 9.18. Since 16% 
overshoot is equivalent to £ = 0.504, we search along that damping 
FIGURE 9.17 Feedback control system for 
ratio line for an odd multiple of 180° and find that the dominant, 
Example 9.3 
second-order pair of poles is at -1,205 ±/2.064. Thus, the settling 
1.25 - 
/ 
* ^ * ' \ S ' 
/ 
1.00 
0.75 
0.50 
0.25 
- il 
/ 
^**v. >s 
L/ 
i 
i 
i 
_ 
1.5 
3.0 
Time (seconds) 
4.5 
m +, 
E{s) 
K 
s(s + 4)(5 + 6) 

9.3 Improving Transient Response via Cascade Compensation 
473 
£ = 0.504 
-1.205+72.064 
K = 43.35 
-7.59 -7 
-6 
-5 
- 4 
-3 
-2 
X = Closed-loop pole 
X = Open-loop pole 
\ 
FIGURE 9.18 
Root locus for uncompensated system shown in Figure 9.17 
s-plane 
120.26° 
time of the uncompensated system is 
T , = ;o)„ 1.205 
= 3.320 
(9.13) 
Since our evaluation of percent overshoot and settling time is based upon a 
second-order approximation, we must check the assumption by finding the third 
pole and justifying the second-order approximation. Searching beyond -6 on 
the real axis for a gain equal to the gain of the dominant, second-order pair, 
43.35, we find a third pole at —7.59, which is over six times as far from the /Vw-axis 
as the dominant, second-order pair. We conclude that our approximation is 
valid. The transient and steady-state error characteristics of the uncompensated 
system are summarized in Table 9.3. 
Virtual Experiment 9.1 
PD Controller Design 
Put theory into practice and 
use root-locus to design a PD 
controller for the QuanserBall 
and Beam using Lab VIEW. 
The Ball and Beam is an un-
stable system, similar to exo-
thermic chemical processes 
that have to be stabilized to 
avoid overheating. 
Virtual experiments are found 
on WileyPLUS. 
TABLE 9.3 Uncompensated and compensated system characteristic of Example 9.3 
Plant and compensator 
Dominant poles 
K 
% 
(On 
%OS 
Ts 
% 
Kv 
e(oo) 
Third pole 
Zero 
Comments 
Uncompensated 
K 
s{s + 4){s + 6) 
-1.205 ±/2.064 
43.35 
0.504 
2.39 
16 
3.320 
1.522 
1.806 
0.554 
-7.591 
None 
Second-order 
approx. OK 
Simulation 
14.8 
3.6 
1.7 
Compensated 
K(s + 3.006) 
s(s + 4)(s + 6) 
-3.613 ±/6.193 
47.45 
0.504 
7.17 
16 
1.107 
0.507 
5.94 
0.168 
-2.775 
-3.006 
Pole-zero 
not canceling 
Simulation 
11.8 
1.2 
0.5 

474 
Chapter 9 
Design via Root Locus 
C = 0.504 
-3.613+J6.193 
FIGURE 9.19 
Compensated 
dominant pole superimposed 
over the uncompensated root 
locus for Example 9.3 
-X-
—X-
-7.59-7 -6 
-5 -4 
-3 
-2 
X = Closed-loop pole 
X = Open-loop pole 
Uncompensated 
dominant pole 
-1.205 +,/2.064 
Now we proceed to compensate the system. First we find the location of the 
compensated system's dominant poles. In order to have a threefold reduction in the 
settling time, the compensated system's settling time will be one-third of Eq. (9.13). 
The new settling time will be 1.107. Therefore, the real part of the compensated 
system's dominant, second-order pole is 
r , 
1.107 = 3.613 
(9.14) 
Figure 9.19 shows the designed dominant, second-order pole, with a real part equal 
to -3.613 and an imaginary part of 
o)d = 3.613 tan(180° - 120.26°) = 6.193 
(9.15; 
Next we design the location of the compensator zero. Input the uncompensated 
system's poles and zeros in the root locus program as well as the design point 
-3.613 ±/6.193 as a test point. The result is the sum of the angles to the design 
point of all the poles and zeros of the compensated system except for those of 
the compensator zero itself. The difference between the result obtained and 
180° is the angular contribution required of the compensator zero. Using the 
open-loop poles shown in Figure 9.19 and the test point, -3.613 +/6.193, which 
is the desired dominant second-order pole, we obtain the sum of the angles as 
—275.6°. Hence, the angular contribution required from the compensator zero 
for the test point to be on the root locus is +275.6° — 180° = 95.6°. The geom-
etry is shown in Figure 9.20, where we now must solve for —a, the location of 
the compensator zero. 
From the figure, 
6.193 
3.613 -
= tan(180° - 95.6°) 
(9.16) 
Thus, a = 3.006. The complete root locus for the compensated system is shown in 
Figure 9.21. 
Table 9.3 summarizes the results for both the uncompensated system and the 
compensated system. For the uncompensated system, the estimate of the transient 

-7 
-6 
-5 
X = Closed-loop pole 
X = Open-loop pole 
475 
Uncompensated 
dominant pole -1-205+/2.064 
FIGURE 9.20 
Evaluating the 
location of the compensating 
zero for Example 9.3 
response is accurate since the third pole is at least five times the real part of the 
dominant, second-order pair. The second-order approximation for the compen-
sated system, however, may be invalid because there is no approximate closed-
loop third-pole and zero cancellation between the closed-loop pole at -2.775 and 
the closed-loop zero at -3.006. A simulation or a partial-fraction expansion of the 
closed-loop response to compare the residue of the pole at -2.775 to the residues 
of the dominant poles at -3.613 ±/"6.193 is required. The results of a simulation 
are shown in the table's second column for the uncompensated system and the 
fourth column for the compensated system. The simulation results can be 
obtained using MATLAB (discussed at the end of this example) or a program 
C = 0.504 
-3.613+/6.193 
K = 47.45 
-7 
-6 
-5 
X = Closed-loop pole 
X = Open-loop pole 
120.26° 
-+- a 
FIGURE 9.21 
Root locus for 
the compensated system of 
Example 9.3 

476 
Chapter 9 
Design via Root Locus 
Compensated 
Uncompensated 
MATLAB 
FIGURE 9.22 Uncompensated 
and compensated system step 
responses of Example 9.3 
1.5 
2.0 
2.5 
Time (seconds) 
like the state-space step-response program described in Appendix H.l at www. 
wiley.com/college/nise. The percent overshoot differs by 3% between the un-
compensated and compensated systems, while there is approximately a threefold 
improvement in speed as evaluated from the settling time. 
The final results are displayed in Figure 9.22, which compares the un-
compensated system and the faster compensated system. 
Students who are using MATLAB should now run ch9pl in Appendix B . 
MATLAB will be used to design a PD controller. You will input the 
desiredpercent overshoot from the keyboard. MATLAB will plot the 
root locus of the uncompensated system and the percent overshoot 
line. You will interactively select the gain, after which MATLAB 
will display the performance characteristics of the un-
compensated system and plot its step response . Using these char-
acteristics, you will input the desired settling time. MATLAB 
will design the PD controller, enumerate its performance char-
acteristics, andplot a step response . This exercise solves Exam-
ple 9 . 3 using MATLAB . 
R(s) +, 
K2s 
0__ 
K{ - £ ® — G(s) 
FIGURE 9.23 PD controller 
Cis) 
Once we decide on the location of the compensating zero, 
how do we implement the ideal derivative, or PD controller? The 
ideal integral compensator that improved steady-state error was 
implemented with a proportional-plus-integral (PI) controller. 
The ideal derivative compensator used to improve the transient 
response is implemented with a proportional-plus-derivative 
(PD) controller. For example, in Figure 9.23 the transfer function 
of the controller is 
Gc(s) = K2s^Kl 
= K2[s 
* i 
K2 
(9.17) 
Hence, K1/K2 is chosen to equal the negative of the compensator zero, and K2 is 
chosen to contribute to the required loop-gain value. Later in the chapter, we will 
study circuits that can be used to approximate differentiation and produce gain. 
While the ideal derivative compensator can improve the transient response of 
the system, it has two drawbacks. First, it requires an active circuit to perform the 

9.3 Improving Transient Response via Cascade Compensation 
477 
differentiation. Second, as previously mentioned, differentiation is a noisy process: 
The level of the noise is low, but the frequency of the noise is high compared to the 
signal. Differentiation of high frequencies can lead to large unwanted signals or 
saturation of amplifiers and other components. The lead compensator is a passive 
network used to overcome the disadvantages of ideal differentiation and still retain 
the ability to improve the transient response. 
Lead Compensation 
Just as the active ideal integral compensator can be approximated with a passive lag 
network, an active ideal derivative compensator can be approximated with a passive 
lead compensator. When passive networks are used, a single zero cannot be 
produced; rather, a compensator zero and a pole result. However, if the pole is 
farther from the imaginary axis than the zero, the angular contribution of the 
compensator is still positive and thus approximates an equivalent single zero. In 
other words, the angular contribution of the compensator pole subtracts from the 
angular contribution of the zero but does not preclude the use of the compensator to 
improve transient response, since the net angular contribution is positive, just as for a 
single PD controller zero. 
The advantages of a passive lead network over an active PD controller are that 
(1) no additional power supplies are required and (2) noise due to differentiation is 
reduced. The disadvantage is that the additional pole does not reduce the number of 
branches of the root locus that cross the imaginary axis into the right-half-plane, 
while the addition of the single zero of the PD controller tends to reduce the number 
of branches of the root locus that cross into the right half-plane. 
Let us first look at the concept behind lead compensation. If we select a desired 
dominant, second-order pole on the s-plane, the sum of the angles from the 
uncompensated system's poles and zeros to the design point can be found. The 
difference between 180° and the sum of the angles must be the angular contribution 
required of the compensator. 
For example, looking at Figure 9.24, we see that 
02 - 0i - 03 - 04 + 05 = (2k + l)180c 
(9.18) 
where (0? - 0i) = 0c is the angular contribution of the lead compensator. From 
Figure 9.24 we see that 0C is the angle of a ray extending from the design point and 
intersecting the real axis at the pole value and zero value of the compensator. Now 
visualize this ray rotating about the desired closed-loop pole location and 
Desired pole 
location 
JO) 
i 
5-plane 
FIGURE 9.24 
Geometry of lead compensation 
Trylt 9.2 
Use MATLAB, the Control Sys-
tem Toobox, and the following 
steps to use SISOTOOL to per-
form the design of Example 9.3. 
1. Type SISOTOOL in the 
MATLAB Command 
Window. 
2. Select Import in the File 
menu of the SISO Design 
for SISO Design Task 
Window. 
3. In the Data field for G, type 
zpk([],[0,-4,-6),1) 
and hit ENTER on the 
keyboard. Click OK. 
4. On the Edit menu choose 
SISO Tool Preferences . . . 
and select Zero/pole/gain: 
under the Options tab. 
Click OK. 
5. Right-click on the root locus 
white space and choose De-
sign Requirements/New... 
6. Choose Percent overshoot 
and type in 16. Click OK. 
7. Right-click on the root locus 
white space and choose De-
sign Requirements/New. . . 
8. Choose Settling time and 
click OK. 
9. Drag the settling time ver-
tical line to the intersection 
of the root locus and 16% 
overshoot radial line. 
10. Read the settling time at 
the bottom of the window. 
11. Drag the settling time ver-
tical line to a settling time 
that is 1/3 of the value 
found in Step 9. 
12. Click on a red zero icon in the 
menu bar. Place the zero on 
the root locus real axis by 
clicking again on the real axis. 
13. Left-click on the real-axis 
zero and drag it along the 
real axis until the root locus 
intersects the settling time 
and percent overshoot lines. 
14. Drag a red square along the 
root locus until it is at the 
intersection of the root lo-
cus, settling time line, and 
the percent overshoot line. 
15. Click the Compensator Ed-
itor tab of the Control and 
Estimation Tools Manager 
window to see the resulting 
compensator, including the 
gain. 

478 
Chapter 9 
Design via Root Locus 
FIGURE 9.25 Three of the 
infinite possible lead 
compensator solutions 
5-plane 
intersecting the real axis at the compensator pole and zero, as illustrated in Figure 
9.25. We realize that an infinite number of lead compensators could be used to meet 
the transient response requirement. 
How do the possible lead compensators differ? The differences are in the 
values of static error constants, the gain required to reach the design point on the 
compensated root locus, the difficulty in justifying a second-order approximation 
when the design is complete, and the ensuing transient response. 
For design, we arbitrarily select either a lead compensator pole or zero and find 
the angular contribution at the design point of this pole or zero along with the system's 
open-loop poles and zeros. The difference between this angle and 180° is the required 
contribution of the remaining compensator pole or zero. Let us look at an example. 
Example 9.4 
Lead Compensator Design 
PROBLEM: Design three lead compensators for the system of Figure 9.17 that will 
reduce the settling time by a factor of 2 while maintaining 30% overshoot. Compare 
the system characteristics between the three designs. 
£=0.358 
Desired 
compensated 
dominant pole 
-2.014 +./5.252 
Uncompensated 
dominant pole 
-1.007+72.627 
K=63.21 
-*-
5-plane 
110.98° 
-7 
-6 
-5 
-4 
-3 
X = Closed-loop pole 
X = Open-loop pole 
FIGURE 9.26 
Lead compensator design, showing evaluation 
of uncompensated and compensated dominant poles for 
Example 9.4 
SOLUTION: First determine the characteristics of the 
uncompensated system operating at 30% overshoot to 
see what the uncompensated settling time is. Since 30% 
overshoot is equivalent to a damping ratio of 0.358, we 
search along the £ = 0.358 line for the uncompensated 
dominant poles on the root locus, as shown in Figure 
9.26. From the pole's real part, we calculate the un-
compensated settling time as r4. = 4/1.007 = 3.972 
seconds. The remaining characteristics of the un-
compensated system are summarized in Table 9.4. 
Next we find the design point. A twofold reduc-
tion in settling time yields Ts = 3.972/2 = 1.986 sec-
onds, from which the real part of the desired pole 
location is — #% = - 4 / ¾ = -2.014. The imaginary 
part is (od = -2.014 tan(110.98°) = 5.252. 
We continue by designing the lead compensator. 
Arbitrarily assume a compensator zero at -5 on the 
real axis as a possible solution. Using the root locus 
program, sum the angles from both this zero and the 

9.3 Improving Transient Response via Cascade Compensation 
479 
TABLE 9.4 
Comparison of lead compensation designs for Example 9.4 
Uncompensated 
Compensation a 
Compensation b 
Compensation c 
Plant and 
compensator 
Dominant poles 
K 
K 
Q}„ 
%OS* 
T/ 
Tp 
Kv 
e(oo) 
Other poles 
Zero 
Comments 
K 
K(s + 5) 
K{s + 4) 
K(s + 2) 
5(5 + 4)(5 + 6) 
s(5 + 4)(5+ 6)(^+ 42.96) 
.v(.v + 4)(5 + 6)(5 + 20.09) 
s{s + 4)(5 + 6)(5 + 8.97V 
-1.007+/2.627 
63.21 
0.358 
2.813 
30 (28) 
3.972 (4) 
1.196(1.3) 
2.634 
0.380 
-7.986 
None 
Second-order 
approx. OK 
-2.014+/5.252 
1423 
0.358 
5.625 
30 (30.7) 
1.986(2) 
0.598 (0.6) 
6.9 
0.145 
-43.8,-5.134 
- 5 
Second-order 
approx. OK 
-2.014+/5.252 
698.1 
0.358 
5.625 
30 (28.2) 
1.986 (2) 
0.598 (0.6) 
5.791 
0.173 
-22.06 
None 
Second-order 
approx. OK 
-2.014+/5.252 
345.6 
0.358 
5.625 
30 (14.5) 
1.986(1.7) 
0.598 (0.7) 
3.21 
0.312 
-13.3,-1.642 
- 2 
No pole-zero 
cancellation 
Desired 
compensated 
dominant pole 
--1/5.252 
Simulation results are shown in parentheses. 
uncompensated system's poles and zeros, using the design point as a test point. The 
resulting angle is —172.69°. The difference between this angle and 180° is the angular 
contribution required from the compensator pole in order to place the design point on 
the root locus. Hence, an angular contribution of -7.31° is required from the 
compensator pole. 
The geometry shown in Figure 9.27 is used to calculate the location of the 
compensator pole. From the figure, 
pc - 2.014 = tan 7.3V 
from which the compensator pole is found to be 
pc = 42.96 
The compensated system root locus is sketched in Figure 9.28. 
(9.20) 
-j\. 
-2.014 
X = Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
FIGURE 9.27 5-plane picture 
used to calculate the location 
of the compensator pole for 
Example 9.4 
X X 
-42.96 
^*o-x-
-6 
-5 -4 
i 
X = Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
A-plane 
FIGURE 9.28 
Compensated 
system root locus 

480 
Chapter 9 
Design via Root Locus 
In order to justify our estimates of percent overshoot and settling time, we 
must show that the second-order approximation is valid. To perform this validity 
check, we search for the third and fourth closed-loop poles found beyond -42.96 
and between —5 and -6 in Figure 9.28. Searching these regions for the gain equal to 
that of the compensated dominant pole, 1423, we find that the third and fourth 
poles are at -43.8 and -5.134, respectively. Since -43.8 is more than 20 times the 
real part of the dominant pole, the effect of the third closed-loop pole is negligible. 
Since the closed-loop pole at -5.134 is close to the zero at —5, we have pole-zero 
cancellation, and the second-order approximation is valid. 
All results for this design and two other designs, which place the compensator 
zero arbitrarily at —2 and —4 and follow similar design techniques, are summarized 
in Table 9.4. Each design should be verified by a simulation, which could consist of 
using MATLAB (discussed at the end of this example) or the state-space model 
and the step-response program discussed in Appendix H.l at www.wiley.com/ 
college/nise. We have performed a simulation for this design problem, and the 
results are shown by parenthetical entries next to the estimated values in the table. 
The only design that disagrees with the simulation is the case where the compen-
sator zero is at —2. For this case the closed-loop pole and zero do not cancel. 
A sketch of the root locus, which you should generate, shows why the effect of 
the zero is pronounced, causing the response to be different from that predicted. 
Placing the zero to the right of the pole at —4 creates a portion of the root locus that 
is between the origin and the zero. In other words, there is a closed-loop pole closer 
to the origin than the dominant poles, with little chance of pole-zero cancellation 
except at high gain. Thus, a quick sketch of the root locus gives us information from 
which we can make better design decisions. For this example, we want to place the 
zero on, or to the left of, the pole at —4, which gives a better chance for pole-zero 
cancellation and for a higher-order pole that is to the left of the dominant poles and 
subsequently faster. This is verified by the fact that our results show good second-
order approximations for the cases where the zero was placed at -4 and -5. Again, 
decisions about where to place the zero are based on simple rules of thumb and 
must be verified by simulations at the end of the design. 
Let us now summarize the results shown in Table 9.4. First we notice 
differences in the following: 
1. The position of the arbitrarily selected zero 
2. The amount of improvement in the steady-state error 
3. The amount of required gain, K 
4. The position of the third and fourth poles and their relative effect upon the 
second-order approximation. This effect is measured by their distance from the 
dominant poles or the degree of cancellation with the closed-loop zero. 
Once a simulation verifies desired performance, the choice of compensation 
can be based upon the amount of gain required or the improvement in steady-state 
error that can be obtained without a lag compensator. 
The results of Table 9.4 are supported by simulations of the step response, 
shown in Figure 9.29 for the uncompensated system and the three lead compensa-
tion solutions. 
Students who are using MATLAB should now run ch9p2 in Appendix B. 
MATLAB will be used to design a lead compensator . You will input 
the desired percent overshoot from the keyboard. MATLAB 

9.3 Improving Transient Response via Cascade Compensation 
Compensation a, b 
r Compensation c 
Uncompensated 
2 
3 
Time (seconds) 
FIGURE 9.29 
Uncompensated 
system and lead compensation 
responses for Example 9.4 
will plot the root locus of the uncompensated system and the 
percent overshoot line . You will interactively select the gain, 
after which MATLAB will display the performance characteris-
tics of the uncompensated system and plot its step response. 
Using these characteristics,you will input the desired set-
tling time and a zero value for the lead compensator .You will 
then interactively select a value for the compensator pole. 
MATLAB will respond with a root locus.You can then continue 
selecting pole values until the root locus goes through the 
desired point.MATLAB will display the lead compensator,enu-
merate its performance characteristics,and plot a step re-
sponse. This exercise solves Example 9.4 using MATLAB. 
Skill-Assessment Exercise 9.2 J 
PROBLEM: A unity feedback system with the forward transfer function 
K 
G(s) = s{s + 7) 
is operating with a closed-loop step response that has 15% overshoot. Do the 
following: 
a. Evaluate the settling time. 
b. Design a lead compensator to decrease the settling time by three times. 
Choose the compensator's zero to be at —10. 
ANSWERS: 
a. 7\ = 1.143 s 
b. Gitaii(s) = 
10 
K = 476.3 
s + 25.52' 
The complete solution is at www.wiley.com/college/nise. 

482 
Chapter 9 
Design via Root Locus 
^ 9 . 4 
Improving Steady-State Error and Transient Response 
We now combine the design techniques covered in Sections 9.2 and 9.3 to obtain 
improvement in steady-state error and transient response independently. Basically, 
we first improve the transient response by using the methods of Section 9.3. Then we 
improve the steady-state error of this compensated system by applying the methods 
of Section 9.2. A disadvantage of this approach is the slight decrease in the speed of 
the response when the steady-state error is improved. 
As an alternative, we can improve the steady-state error first and then follow 
with the design to improve the transient response. A disadvantage of this approach is 
that the improvement in transient response in some cases yields deterioration in the 
improvement of the steady-state error, which was designed first. In other cases, 
the improvement in transient response yields further improvement in steady-state 
errors. Thus, a system can be overdesigned with respect to steady-state errors. 
Overdesign is usually not a problem unless it affects cost or produces other design 
problems. In this textbook, we first design for transient response and then design for 
steady-state error. 
The design can use either active or passive compensators, as previously 
described. If we design an active PD controller followed by an active PI controller, 
the resulting compensator is called a proportional-plus-integral-plus-derivative 
(PID) controller. If we first design a passive lead compensator and then design a 
passive lag compensator, the resulting compensator is called a lag-lead compensator. 
PID Controller Design 
A PID controller is shown in Figure 9.30. Its transfer function is 
r>f\ 
V ^ K l ^ v 
KlS + K2 + K3s2 
Gc{s) aJEj + — + K3s = 
s 
s 
K\ 
K2 
K3[sl + -^s + -^ 
Ki 
K-. 
(9.21) 
which has two zeros plus a pole at the origin. One zero and the pole at the origin can 
be designed as the ideal integral compensator; the other zero can be designed as the 
ideal derivative compensator. 
The design technique, which is demonstrated in Example 9.5, consists of the 
following steps: 
1. Evaluate the performance of the uncompensated system to determine how much 
improvement in transient response is required. 
2. Design the PD controller to meet the transient response specifications. The 
design includes the zero location and the loop gain. 
FIGURE 9.30 
PID controller 
m +/c> 
"09 " 
K2s 
s 
£j 
\ -*®-
G(s) 
C(s) 

9.4 Improving Steady-State Error and Transient Response 
483 
3. Simulate the system to be sure all requirements have been met. 
4. Redesign if the simulation shows that requirements have not been met. 
5. Design the PI controller to yield the required steady-state error. 
6. Determine the gains, K\, K2, and K3, in Figure 9.30. 
7. Simulate the system to be sure all requirements have been met. 
8. Redesign if simulation shows that requirements have not been met. 
Example 9.5 
PID Controller Design 
PROBLEM: Given the system of Figure 9.31, design a PID 
controller so that the system can operate with a peak time 
that is two-thirds that of the uncompensated system at 20% 
overshoot and with zero steady-state error for a step input. 
SOLUTION: Note that our solution follows the eight-step pro-
cedure described earlier. 
R(s) + d 
E(s) 
K(s + 
(s+ 3)(s + 6)(5+10) 
C(s) 
FIGURE 9.31 Uncompensated feedback control 
system for Example 9.5 
Step 1 Let us first evaluate the uncompensated system operating at 20% over-
shoot. Searching along the 20% overshoot line (£ = 0.456) in Figure 9.32, 
we find the dominant poles to be —5.415 ±/10.57 with a gain of 121.5. A 
third pole, which exists at -8.169, is found by searching the region 
( = 0.456 
-5.415+/10.57 
£=121.5 
10 ^iP 
^T^r1—* 
r 
~6" ,V ~3 
-8.169 
-5.5 
-4.6 
X = Closed-loop pole 
X = Open-loop pole 
FIGURE 9.32 
Root locus for the uncompensated system of Example 9.5 

484 
Chapter 9 
Design via Root Locus 
TABLE 9.5 Predicted characteristics of uncompensated, PD-, and PID-compensated systems of Example 9.5 
Plant and compensator 
Dominant poles 
K 
% 
CO,, 
%OS 
Ts 
1 
Kp 
e(oo) 
Other poles 
Zeros 
Comments 
Uncompensated 
K{s + 8) 
(5 + 3)(5 + 6)(5 + 10) 
-5.415+/10.57 
121.5 
0.456 
11.88 
20 
0.739 
0.297 
5.4 
0.156 
-8.169 
- 8 
Second-order 
approx. OK 
PD-compensated 
K(s + 8)(5 + 55.92) 
(5 + 3)(5 + 6)(5 + 10) 
-8.13 +/15.87 
5.34 
0.456 
17.83 
20 
0.492 
0.198 
13.27 
0.070 
-8.079 
- 8 , -55.92 
Second-order 
approx. OK 
PID-compensated 
£(5 + 8)(5 + 55.92)(5 + 0.5) 
(5 + 3)(5 + 6)(5 + 10)5 
-7.516+/14.67 
4.6 
0.456 
16.49 
20 
0.532 
0.214 
00 
0 
-8.099, -0.468 
- 8 , -55.92, -0.5 
Zeros at -55.92 
and -0.5 not canceled 
PD-compensaled 
dominant pole 
Step 2 
between - 8 and -10 for a gain equivalent to that at the dominant poles. The 
complete performance of the uncompensated system is shown in the first 
column of Table 9.5, where we compare the calculated values to those 
obtained through simulation (Figure 9.35). We estimate that the un-
compensated system has a peak time of 0.297 second at 20% overshoot. 
To compensate the system to reduce the peak time to two-thirds of that of the 
uncompensated system, we must first find the compensated system's domi-
nant pole location. The imaginary part of the compensated dominant pole is 
1 p 
= 15.87 
(2/3)(0.297) 
Thus, the real part of the compensated dominant pole is 
= -8.13 
a = 
0)d 
(9.22) 
(9.23) 
X = Closed-loop pole 
Note: This figure is not drawn to scale. 
FIGURE 9.33 
Calculating the 
PD compensator zero for 
Example 9.5 
tanll7.13c 
Next we design the compensator. Using the geometry shown in Figure 9.33, 
we calculate the compensating zero's location. Using the root locus program, 
we find the sum of angles from the uncompensated system's poles and zeros to 
the desired compensated dominant pole to be -198.37°. Thus, the contribution 
required from the compensator zero is 198.37° - 180° = 18.37°. Assume that 
the compensator zero is located at — zc, as shown in Figure 9.33. Since 
! X , V 
- 
(9.24) 
Zc - 8.13 = tan 18.37° 
then 
Zc = 55.92 
(9.25) 
Thus, the PD controller is 
GPD(S) = (5 + 55.92) 
(9.26) 

9.4 Improving Steady-State Error and Transient Response 
485 
£=0.456 
.5-pIane 
X= Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
FIGURE 9.34 Root locus for PD-compensated system of Example 9.5 
The complete root locus for the PD-compensated system is sketched in 
Figure 9.34. Using a root locus program, the gain at the designpoint is 5.34. 
Complete specifications for ideal derivative compensation are shown in 
the third column of Table 9.5. 
Steps 3 and 4 We simulate the PD-compensated system, as shown in Figure 9.35. 
We see the reduction in peak time and the improvement in steady-state 
error over the uncompensated system. 
After we design the PD controller, we design the ideal integral compen-
sator to reduce the steady-state error to zero for a step input. Any ideal 
integral compensator zero will work, as long as the zero is placed close to 
the origin. Choosing the ideal integral compensator to be 
Step 5 
GafA = 5 + 0.5 
(9.27) 
PD 
Uncompensated 
0.8 
1.2 
Time (seconds) 
1.6 
2.0 
FIGURE 9.35 Step responses 
for uncompensated, PD-
compensated, and PID-
compensated systems of 
Example 9.5 

486 
Chapter 9 
Design via Root Locus 
JO) 
C= 0.456 
PID-compensated 
dominant pole 
s-plane 
X = Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
FIGURE 9.36 
Root locus for PID-compensated system of Example 9.5 
we sketch the root locus for the PID-compensated system, as shown in 
Figure 9.36. Searching the 0.456 damping ratio line, we find the dominant, 
second-order poles to be —7.516 ±/14.67, with an associated gain of 4.6. 
The remaining characteristics for the PID-compensated system are 
summarized in the fourth column of Table 9.5. 
Step 6 Now we determine the gains, K\,K2, and K&, in Figure 9.30. From Eqs. 
(9.26) and (9.27), the product of the gain and the PID controller is 
GPID(S) 
= K(s + 55.92) (s + 0.5) 
4.6(5 + 55.92) (s + 0.5) 
4.6(5-2 + 56.42s + 27.96) 
(9.28) 
Matching Eqs. (9.21) and (9.28), Kx = 259.5, K2 = 128.6, and K3 = 4.6 
Steps 7 and 8 Returning to Figure 9.35, we summarize the results of our design. PD 
compensation improved the transient response by decreasing the time re-
quired to reach the first peak as well as yielding some improvement in the 
steady-state error. The complete PID controller further improved the steady-
state error without appreciably changing the transient response designed with 
the PD controller. As we have mentioned before, the PID controller exhibits a 
slower response, reaching the final value of unity at approximately 3 seconds. If 
this is undesirable, the speed of the system must be increased by redesigning 
the ideal derivative compensator or moving the PI controller zero farther from 
the origin. Simulation plays an important role in this type of design since our 
derived equation for settling time is not applicable for this part of the response, 
where there is a slow correction of the steady-state error. 

9.4 Improving Steady-State Error and Transient Response 
Lag-Lead Compensator Design 
In the previous example, we serially combined the concepts of ideal derivative and 
ideal integral compensation to arrive at the design of a PID controller that improved 
both the transient response and the steady-state error performance. In the next 
example, we improve both transient response and the steady-state error by using a 
lead compensator and a lag compensator rather than the ideal PID. Our compensa-
tor is called a lag-lead compensator. 
We first design the lead compensator to improve the transient response. Next 
we evaluate the improvement in steady-state error still required. Finally, we design 
the lag compensator to meet the steady-state error requirement. Later in the chapter 
we show circuit designs for the passive network. The following steps summarize the 
design procedure: 
1. Evaluate the performance of the uncompensated system to determine how much 
improvement in transient response is required. 
2. Design the lead compensator to meet the transient response specifications. The 
design includes the zero location, pole location, and the loop gain. 
3. Simulate the system to be sure all requirements have been met. 
4. Redesign if the simulation shows that requirements have not been met. 
5. Evaluate the steady-state error performance for the lead-compensated system to 
determine how much more improvement in steady-state error is required. 
6. Design the lag compensator to yield the required steady-state error. 
7. Simulate the system to be sure all requirements have been met. 
8. Redesign if the simulation shows that requirements have not been met. 
Lag-Lead Compensator Design 
PROBLEM: Design a lag-lead compensator for the system of Fig-
ure 9.37 so that the system will operate with 20% overshoot and a 
™$ 
twofold reduction in settling time. Further, the compensated system 
will exhibit a tenfold improvement in steady-state error for a ramp 
input. 
FIGURE 9.37 Uncompensated system for 
SOLUTION: Again, our solution follows the steps just described. 
Example 9.6 
Step 1 First we evaluate the performance of the uncompensated sys-
tem. Searching along the 20% overshoot line (£ = 0.456) in 
Figure 9.38, we find the dominant poles at — 1.794 ± /3.501, with a gain of 192.1. 
The performance of the uncompensated system is summarized in Table 9.6. 
Step 2 
Next we begin the lead compensator design by selecting the location of the 
compensated system's dominant poles. In order to realize a twofold reduction 
in settling time, the real part of the dominant pole must be increased by a factor 
of 2, since the settling time is inversely proportional to the real part. Thus, 
-roin = -2(1.794) = -3.588 
(9.29) 
The imaginary part of the design point is 
cod = ta)n tan 117.13° = 3.588 tan 117.13° = 7.003 
(9.30) 
K 
s{s + 6){s + \0) 
C(s) 

488 
Chapter 9 
Design via Root Locus 
£= 0.456 
-1.794+./3.501 
K= 192.1 
| 
-11 -10 -9 
-I 
FIGURE 9.38 Root locus for 
-12.41 
uncompensated system of 
X = Closed-loop pole 
Example 9.6 
X = Open-loop pole 
-7 
-6 
-5 
-4 
Uncompensated dominant pole 
s-plane 
117.13° 
Now we design the lead compensator. Arbitrarily select a location 
for the lead compensator zero. For this example, we select the location of 
the compensator zero coincident with the open-loop pole at —6. This 
choice will eliminate a zero and leave the lead-compensated system with 
three poles, the same number that the uncompensated system has. 
We complete the design by finding the location of the compensator 
pole. Using the root locus program, sum the angles to the design point from 
the uncompensated system's poles and zeros and the compensator zero 
and get -164.65°. The difference between 180° and this quantity is the 
angular contribution required from the compensator pole, or —15.35°. 
Using the geometry shown in Figure 9.39, 
7.003 
= tan 15.35c 
(931) 
pc - 3.588 
from which the location of the compensator pole, pe, is found to be -29.1. 
TABLE 9.6 Predicted characteristics of uncompensated, lead-compensated, and lag-lead-compensated systems of 
Example 9.6 
Uncompensated 
Lead-compensated 
Lag-lead-compensated 
Plant and compensator 
Dominant poles 
K 
%os ' 
Ts 
T 
Kv 
e(oo) 
Third pole 
Zero 
Comments 
K 
5(5 + 6)(5 + 10) 
-1.794 ±;3.501 
192.1 
0.456 
3.934 
20 
2.230 
0.897 
3.202 
0.312 
-12.41 
None 
Second-order approx. OK 
K 
5(5+10)(5 + 29.1) 
-3.588 ±/7.003 
1977 
0.456 
7.869 
20 
1.115 
0.449 
6.794 
0.147 
-31.92 
None 
Second-order approx. OK 
K{s + 0.04713) 
5(5+10)(5 + 29.1)(5 + 0.01) 
-3.574 ±/6.976 
1971 
0.456 
7.838 
20 
1.119 
0.450 
31.92 
0.0313 
-31.91, -0.0474 
-0.04713 
Second-order approx. OK 

9.4 Improving Steady-State Error and Transient Response 
jco 
- /7.003 
s-plane 
489 
-Pc 
-3-
X = Closed-loop pole 
X = Open-loop pole 
FIGURE 9.39 
Evaluating the compensator pole for Example 9.6 
The complete root locus for the lead-compensated system is sketched 
in Figure 9.40. The gain setting at the design point is found to be 1977. 
Steps 3 and 4 Check the design with a simulation. (The result for the lead-
compensated system is shown in Figure 9.42 and is satisfactory.) 
Step 5 Continue by designing the lag compensator to improve the steady-state 
error. Since the uncompensated system's open-loop transfer function is 
G(s) = 
192.1 
5(5 + 6)(5 + 10) 
(9.32) 
the static error constant, Kw which is inversely proportional to the steady-
state error, is 3.201. Since the open-loop transfer function of the lead-
compensated system is 
GLC(s) = 
1977 
5(5 + 10)(5+29.1) 
(9.33) 
the static error constant, Kw which is inversely proportional to the steady-
state error, is 6.794. Thus, the addition of lead compensation has improved 
the steady-state error by a factor of 2.122. Since the requirements of the 
problem specified a tenfold improvement, the lag compensator must be 
designed to improve the steady-state error by a factor of 4.713 (10/2.122 = 
4.713) over the lead-compensated system. 
£= 0.456 
5-plane 
-3.588 +)7.003 )\ Compensated dominant pole 
A: =1977 
-* 
• X 'X 
• 
> 
' 
1 
' 
• X ' 
,, 
-33f -30 -27 -24 -21 -18 -15 -12 
-9 
-6 
-31.91 
X = Closed-loop pole 
X = Open-loop pole 
FIGURE 9.40 
Root locus for lead-compensated system of Example 9.6 
* - < 7 

490 
Chapter 9 
Design via Root Locus 
C = 0.456 
-3.574 +./6.976 
£=1971 
-29.1 
-31.91 
-10 
X = Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
FIGURE 9.41 Root locus for lag-lead-compensated system of Example 9.6 
Step 6 We arbitrarily choose the lag compensator pole at 0.01, which then places 
the lag compensator zero at 0.04713, yielding 
Step 7 
Clag(s) = 
{s + 0.04713) 
(5 + 0.01) 
(9.34) 
as the lag compensator. The lag-lead-compensated system's open-loop 
transfer function is 
GxLc(-y) = 
K{s + 0.04713) 
s(s + 10)(^ + 29.1)(^ + 0.01) 
(9.35) 
where the uncompensated system pole at - 6 canceled the lead compen-
sator zero at —6. By drawing the complete root locus for the lag-lead-
compensated system and by searching along the 0.456 damping ratio line, 
we find the dominant, closed-loop poles to be at —3.574 ±/6.976, with a 
gain of 1971. The lag-lead-compensated root locus is shown in Figure 9.41. 
A summary of our design is shown in Table 9.6. Notice that the 
lag-lead compensation has indeed increased the speed of the system, as 
witnessed by the settling time or the peak time. The steady-state error 
for a ramp input has also decreased by about 10 times, as seen 
from e(oc). 
The final proof of our designs is shown by the simulations of Figures 9.42 
and 9.43. The improvement in the transient response is shown in Figure 
9.42, where we see the peak time occurring sooner in the lag-lead-
compensated system. Improvement in the steady-state error for a ramp 
input is seen in Figure 9.43, where each step of our design yields more 
improvement. The improvement for the lead-compensated system is 
shown in Figure 9.43(a), and the final improvement due to the addition 
of the lag is shown in Figure 9.43(5). 

9.4 Improving Steady-State Error and Transient Response 
Lead- and lag-lead-compensated 
Uncompensated 
491 
2 
3 
4 
5 
Time (seconds) 
FIGURE 9.42 
Improvement in 
step response for lag-lead-
compensated system of 
Example 9.6 
2 
3 
4 
Time (seconds) 
(a) 
2 
3 
Time (seconds) 
(b) 
FIGURE 9.43 
Improvement 
in ramp response error for 
the system of Example 9.6: 
a. lead-compensated; 
b. lag-lead-compensated 
In the previous example, we canceled the system pole at —6 with the lead 
compensator zero. The design technique is the same if you place the lead compen-
sator zero at a different location. Placing a zero at a different location and not 
canceling the open-loop pole yields a system with one more pole than the example. 
This increased complexity could make it more difficult to justify a second-order 
approximation. In any case, simulations should be used at each step to verify 
performance. 

Chapter 9 
Design via Root Locus 
Notch Filter 
If a plant, such as a mechanical system, has high-frequency vibration modes, then a 
desired closed-loop response may be difficult to obtain. These high-frequency 
vibration modes can be modeled as part of the plant's transfer function by pairs 
of complex poles near the imaginary axis. In a closed-loop configuration, these poles 
can move closer to the imaginary axis or even cross into the right half-plane, as 
shown in Figure 9.44(a). Instability or high-frequency oscillations superimposed 
over the desired response can result (see Figure 9.44(b)). 
One way of eliminating the high-frequency oscillations is to cascade a notch 
filter2 with the plant (Kuo, 1995), as shown in Figure 9.44(c). The notch filter has 
FIGURE 9.44 a. Root locus before cascading notch filter; b. typical closed-loop step response before cascading notch filter; c. pole-
zero plot of a notch filter; d. root locus after cascading notch filter; (figure continues) 
2 The name of this filter comes from the shape of its magnitude frequency response characteristics, which 
shows a dip near the damped frequency of the high-frequency poles. Magnitude frequency response is 
discussed in Chapter 10. 

9.4 Improving Steady-State Error and Transient Response 
493 
Time 
m 
FIGURE 9.44 (Continued) 
e. closed-loop step response 
after cascading notch filter 
zeros close to the low-damping-ratio poles of the plant as well as two real poles. 
Figure 9.44(d) shows that the root locus branch from the high-frequency poles now 
goes a short distance from the high-frequency pole to the notch filter's zero. The 
high-frequency response will now be negligible because of the pole-zero cancellation 
(see Figure 9.44(e)). Other cascade compensators can now be designed to yield a 
desired response. The notch filter will be applied to Progressive Analysis and Design 
Problem 55 near the end of this chapter. 
Skill-Assessment Exercise 9.3 
PROBLEM: A unity feedback system with forward transfer function 
is operating with a closed-loop step response that has 20% overshoot. Do the 
following: 
a. Evaluate the settling time. 
b. Evaluate the steady-state error for a unit ramp input. 
c. Design a lag-lead compensator to decrease the settling time by 2 times and 
decrease the steady-state error for a unit ramp input by 10 times. Place the 
lead zero at - 3 . 
ANSWERS: 
a. Ts = 1.143 s 
b- eramp(oo) = 0.1189 
c. Gc(s) = (s + 3)(* +0.092) 
K = 205.4 
(s + 9.61)(^ + 0.01)' 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
Before concluding this section, let us briefly summarize our discussion of 
cascade compensation. In Sections 9.2,9.3, and 9.4, we used cascade compensators to 
improve transient response and steady-state error. Table 9.7 itemizes the types, 
functions, and characteristics of these compensators. 

494 
Chapter 9 
Design via Root Locus 
TABLE 9.7 Types of cascade compensators 
Function 
Compensator 
Transfer function 
Characteristics 
Improve steady-state error 
PI 
K S + Zc 
Improve steady-state error 
K S + gc 
Improve transient response 
K(s + Zc) 
Improve transient response 
Lead 
K s + zc 
S+Pc 
Improve steady-state error and 
transient response 
PID 
K 
(S + Zteg){s + Ziead) 
Improve steady-state error and 
transient response 
Lag-lead 
K 
(•f+PlaJ^+Aead) 
1. Increases system type. 
2. Error becomes zero. 
3. Zero at -zc is small and negative. 
4. Active circuits are required to implement. 
1. Error is improved but not driven to zero. 
2. Pole at — pc is small and negative. 
3. Zero at -zc is close to, and to the left of, the 
pole at -pc. 
4. Active circuits are not required to implement. 
1. Zero at —zc is selected to put design point on 
root locus. 
2. Active circuits are required to implement. 
3. Can cause noise and saturation; implement 
with rate feedback or with a pole (lead). 
1. Zero at -zc and pole at — pc are selected to put 
design point on root locus. 
2. Pole at —pc is more negative than zero at — zc-
3. Active circuits are not required to implement. 
1. Lag zero at -zi a g and pole at origin improve 
steady-state error. 
2. Lead zero at —ziead improves transient 
response. 
3. Lag zero at —ziag is close to. and to the left of, 
the origin. 
4. Lead zero at -ziead is selected to put design 
point on root locus. 
5. Active circuits required to implement. 
6. Can cause noise and saturation; implement 
with rate feedback or with an additional pole. 
1. Lag pole at -/?lag and lag zero at -zi a g are used 
to improve steady-state error. 
2. Lead pole at -picad and lead zero at -ziead are 
used to improve transient response. 
3. Lag pole at —p[ag is small and negative. 
4. Lag zero at -z l a g is close to, and to the left of, 
lag pole at -/?iag. 
5. Lead zero at -ziead and lead pole at -p\ca(i are 
selected to put design point on root locus. 
6. Lead pole at -pica(i is more negative than lead 
zero at -ziead-
7. Active circuits are not required to implement. 

9.5 Feedback Compensation 
495 
^ 9.5 Feedback Compensation 
In Section 9.4, we used cascade compensation as a way to improve transient response 
and steady-state response independently. Cascading a compensator with the plant is 
not the only way to reshape the root locus to intersect the closed-loop s-plane poles 
that yield a desired transient response. Transfer functions designed to be placed in a 
feedback path can also reshape the root locus. Figure 9.45 is a generic configuration 
showing a compensator, Hc(s), placed in the minor loop of a feedback control 
system. Other configurations arise if we consider K unity, G2{s) unity, or both unity. 
The design procedures for feedback compensation can be more complicated 
than for cascade compensation. On the other hand, feedback compensation can yield 
faster responses. Thus, the engineer has the luxury of designing faster responses into 
portions of a control loop in order to provide isolation. For example, the transient 
response of the ailerons and rudder control systems of an aircraft can be designed 
separately to be fast in order to reduce the effect of their dynamic response on the 
steering control loop. Feedback compensation can be used in cases where noise 
problems preclude the use of cascade compensation. Also, feedback compensation 
may not require additional amplification, since the signal passing through the 
compensator originates at the high-level output of the forward path and is delivered 
to a low-level input in the forward path. For example, let K and G2(s) in Figure 9.45 be 
unity. The input to the feedback compensator, KfHc(s), is from the high-level output of 
Gi (s), while the output of KfHc(s) is one of the low-level inputs into K^. Thus, there is a 
reduction in level through KfHc(s), and amplification is usually not required. 
A popular feedback compensator is a rate sensor that acts as a differentiator. In 
aircraft and ship applications, the rate sensor can be a rate gyro that responds with an 
output voltage proportional to the input angular velocity. In many other systems this 
rate sensor is implemented with a tachometer. A tachometer is a voltage generator 
that yields a voltage output proportional to input rotational speed. This compensator 
can easily be geared to the position output of a system. Figure 9.46 is a position 
m +, <g)— 
K 
- £ 0 -
0,(4-) 
Minor loop 
Major loop 
KfHc(s) 
G2(.v) 
C(s) 
FIGURE 9.45 
Generic control 
system with feedback 
compensation. 
Inertia 
Motor 
/ 
Tachometer -
Output 
potentiometer 
FIGURE 9.46 
A position 
control system that uses a 
Input 
tachometer as a differentiator 
potentiometer 
i n t h e feedback path. Can you 
see the similarity between this 
system and the schematic on 
the front endpapers? 

496 
Chapter 9 
Design via Root Locus 
?,(*) 
Krs 
VM 
(a) 
R(s) + ® -
K, 
G,(s) 
C(s) 
Tachometer 
Kts 
(b) 
FIGURE 9.47 
a. Transfer function of a tachometer; b. tachometer feed-back compensation 
R(s) +, . ( g ) — * KK\Gx(s)G2{s) 
KfHc(s) + KG2(s) 
KGM 
control system showing the gearing of the tachometer to the motor. You can see the 
input and output potentiometers as well as the motor and inertial load. The block 
diagram representation of a tachometer is shown in Figure 9.47(a), and its typical 
position within a control loop is shown in Figure 9.47(6). 
While this section shows methods for designing systems using rate feedback, it 
also sets the stage for compensation techniques in Chapter 12, where not only rate but 
all states including position will be fed back for proper control system performance. 
We now discuss design procedures. Typically, the design of feedback compen-
sation consists of finding the gains, such as K, K\, and Kf in Figure 9.45, after 
establishing a dynamic form for Hc(s). There are two approaches. The first is similar 
to cascade compensation. Assume a typical feedback system, where G{s) is the 
forward path and H{s) is the feedback. Now consider that a root locus is plotted from 
G(s)H(s). With cascade compensation we added poles and zeros to G(s). With 
feedback compensation, poles and zeros are added via H(s). 
With the second approach, we design a specified performance for the minor 
loop, shown in Figure 9.45, followed by a design of the major loop. Thus, the minor 
loop, such as ailerons on an aircraft, can be designed with its own performance 
specifications and operate within the major loop. 
C(s) 
FIGURE 9.48 
Equivalent block 
diagram of Figure 9.45 
Approach 1 
The first approach consists of reducing Figure 9.45 to Figure 9.48 by pushing K 
to the right past the summing junction, pushing G2(s) to the left past the pickoff 
point, and then adding the two feedback paths. Figure 9.48 shows that the loop 
gain, G(s)H(s), is 
G(s)H(s) = 
KlG,(s)[KfHc(s)+KG2(s)} 
Without feedback, KfHc(s), the loop gain is 
G{s)H{s) = KKlG1{s)G2(s) 
(9.36) 
(9.37) 
Thus, the effect of adding feedback is to replace the poles and zeros of G2(s) with the 
poles and zeros of [KfHc(s) -i-KG2(s)]. Hence, this method is similar to cascade 
compensation in that we add new poles and zeros via H(s) to reshape the root locus 
to go through the design point. However, one must remember that zeros of the 
equivalent feedback shown in Figure 9.48, H(s) = [KfHc{s) +KG2(s)]/KG2(s), are 
not closed-loop zeros. 

9.5 Feedback Compensation 
497 
For example, if Gz(s) = 1 and the minor-loop feedback, KfHc(s), is a rate 
sensor, KfHc{s) — KfS, then from Eq. (9.36) the loop gain is 
G(s)H(s) = KfKiG^fs 
+ ^-
(9.38) 
Thus, a zero at -K/Kf 
is added to the existing open-loop poles and zeros. This zero 
reshapes the root locus to go through the desired design point. A final adjustment of 
the gain, K±, yields the desired response. Again, you should verify that this zero is not 
a closed-loop zero. Let us look at a numerical example. 
Example 9.7 
Compensating Zero via Rate Feedback 
PROBLEM: Given the system of Figure 9.49(a), design rate feedback compensa-
tion, as shown in Figure 9.49(6), to reduce the settling time by a factor of 4 while 
continuing to operate the system with 20% overshoot. 
SOLUTION: First design a PD compensator. For the uncompensated system, search 
along the 20% overshoot line (£ = 0.456) and find that the dominant poles are at 
-1.809 ±;3.531, as shown in Figure 9.50. The estimated specifications for the 
m + ^ m 
"09 * 
-A 
A'I 
s(s + 5){s + 15) 
C(s) 
(a) 
R(s) + 
s(s + 5)(s+l 
(5 + 5)(5+15) 
C(s) 
KrS 
20% OS 
(b) 
R(s) 
v<Cx 
s(s + 5)(-
s(s + 5)(J + 15) 
C(s) 
Kfhi) 
m 
m 
t^m 
»{X) 
" 
1 
* i 
s[s2 + 20s + (75 + KxKf)] 
C(s) 
W) 
FIGURE 9.49 
a. System for Example 9.7; b. system with rate 
feedback compensation; c. equivalent compensated system; 
FIGURE 9.50 Root locus for uncompensated system of 
d. equivalent compensated system showing unity feedback 
Example 9.7 

498 
Chapter 9 
Design via Root Locus 
1.2 -
1.0 -
0.8 - 
I 
«j 
/ 
0.6 - 
I 
0.4 - 
I 
0.2 - 
/ 
0 - Z 
1 
1 
1 
1 
1 
1—+. 
0 
0.5 
1.0 
1.5 
2.0 
2.5 
3.0 
Time (seconds) 
FIGURE 9.51 
Step response for uncompensated system of Example 9.7 
uncompensated system are shown in Table 9.8, and the step response is shown in 
Figure 9.51. The settling time is 2.21 seconds and must be reduced by a factor of 4 
to 0.55 second. 
Next determine the location of the dominant poles for the compensated 
system. To achieve a fourfold decrease in the settling time, the real part of the pole 
must be increased by a factor of 4. Thus, the compensated pole has a real part of 
4(-1.809) = -7.236. The imaginary part is then 
o)d = -7.236 tan 117.13° = 14.12 
(9.39) 
where 117.13° is the angle of the 20% overshoot line. 
TABLE 9.8 Predicted characteristics of uncompensated and compensated systems of Example 9.7 
Uncompensated 
Compensated 
Plant and compensator 
Feedback 
Dominant poles 
* i 
S 
con 
%OS 
Ts 
T 
1 p 
Kv 
e(oo) (ramp) 
Other poles 
Zero 
Comments 
A ] 
s{s + 5){s + \5) 
1 
-1.809 ±;3.531 
257.8 
0.456 
3.97 
20 
2.21 
0.89 
3.44 
0.29 
-16.4 
None 
Second-order approx. OK 
A ] 
s(s + 5)(s + 15) 
0.185(5 + 5.42) 
-7.236 ±;14.12 
1388 
0.456 
15.87 
20 
0.55 
0.22 
4.18 
0.24 
-5.53 
None 
Simulate 

9.5 Feedback Compensation 
499 
Using 
the 
compensated 
dominant 
pole 
position 
of 
-7.236 ±/14.12, we sum the angles from the uncompensated sys-
tem's poles and obtain —277.33°. This angle requires a compensator 
zero contribution of +97.33° to yield 180° at the design point. The 
geometry shown in Figure 9.52 leads to the calculation of the 
compensator's zero location. Hence, 
14.12 
7.236 - zc = tan(180° - 97.33°; 
(9.40) 
from which zc = 5.42. 
The root locus for the equivalent compensated system of Figure 
9.49(c) is shown in Figure 9.53. The gain at the design point, which is 
KiKf from Figure 9.49(c), is found to be 256.7. Since Kf is the 
reciprocal of the compensator zero, Kf = 0.185. Thus, K\ = 1388. 
In order to evaluate the steady-state error characteristic, Kv is 
found from Figure 9.49(d) to be 
Kv = 
Ki 
75 + K\Kf 
= 4.18 
(9.41) 
Predicted performance for the compensated system is shown in 
Table 9.8. Notice that the higher-order pole is not far enough away 
from the dominant poles and thus cannot be neglected. Further, from 
Figure 9.49(d), we see that the closed-loop transfer function is 
T(s) = 
G(s) 
# 1 
1 + G{s)H{s) 
s3 + 20^2 + (75 + Ki Kf)s + K\ 
(9.42) 
Thus, as predicted, the open-loop zero is not a closed-loop zero, and 
there is no pole-zero cancellation. Hence, the design must be checked 
by simulation. 
The results of the simulation are shown in Figure 9.54 and show 
an over-damped response with a settling time of 0.75 second, com-
pared to the uncompensated system's settling time of approximately 
0.5 
0 
0 
0.5 
2.5 
3.0 
1.0 
1.5 
2.0 
Time (seconds) 
FIGURE 9.54 
Step response for the compensated system of Example 9.7 
J CO 
¥• 
97.33' 
/14.12 
s-plane 
-7.236 -¾ 
Compensator 
zero 
x ~ Closed-loop pole 
FIGURE 9.52 
Finding the compensator zero 
in Example 9.7 
£ = 0.456 
-7.236+yl4.12 
A:, = 1388 
•
*
—
-
-20 
-10 
X = Closed-loop pole 
X = Open-loop pole 
~j™ 
FIGURE 9.53 Root locus for the 
compensated system of Example 9.7 

500 
Chapter 9 
Design via Root Locus 
2.2 seconds. Although not meeting the design requirements, the response still 
represents an improvement over the uncompensated system of Figure 9.51. 
Typically, less overshoot is acceptable. The system should be redesigned for 
further reduction in settling time. 
You may want to do Problem 8 at the end of this chapter, where you can 
repeat this example using PD cascade compensation. You will see that the 
compensator zero for cascade compensation is a closed-loop zero, yielding the 
possibility of pole-zero cancellation. However, PD compensation is usually noisy 
and not always practical. 
Approach 2 
The second approach allows us to use feedback compensation to design a minor 
loop's transient response separately from the closed-loop system response. In the 
case of an aircraft, the minor loop may control the position of the aerosurfaces, while 
the entire closed-loop system may control the entire aircraft's pitch angle. 
We will see that the minor loop of Figure 9.45 basically represents a forward-
path transfer function whose poles can be adjusted with the minor-loop gain. These 
poles then become the open-loop poles for the entire control system. In other words, 
rather than reshaping the root locus with additional poles and zeros, as in cascade 
compensation, we can actually change the plant's poles through a gain adjustment. 
Finally, the closed-loop poles are set by the loop gain, as in cascade compensation. 
Example 9.8 
Minor-Loop Feedback Compensation 
PROBLEM: For the system of Figure 9.55(a), design minor-loop feedback com-
pensation, as shown in Figure 9.55(6), to yield a damping ratio of 0.8 for the minor 
loop and a damping ratio of 0.6 for the closed-loop system. 
R(s) + - o , E(s) 
K 
s(s+ S)(s+15) 
as) 
(a) 
R{s) + *<g>— 
K,s 
(b) 
FIGURE 9.55 
a. Uncompensated system and b. feedback-compensated system for 
Example 9.8 

9.5 
Feedback Compensation 
501 
SOLUTION: The minor loop is defined as the loop containing the plant, 
1 /[s(s + 5)(s +15)], and the feedback compensator, KfS. The value of K« will be 
adjusted to set the location of the minor-loop poles, and then K will be adjusted to 
yield the desired closed-loop response. 
The transfer function of the minor loop, GMLi(S), is 
GML(S) = 
1 
s[S2 + 20s + (75 + Kf) 
(9.43) 
The poles of GML(S) c a n De found analytically or via the root locus. The root locus 
for the minor loop, where Kfs/[s(s + 5)(s + 15)] is the open-loop transfer function, 
is shown in Figure 9.56. Since the zero at the origin comes from the feedback 
transfer function of the minor loop, this zero is not a zero of the closed-loop transfer 
function of the minor loop. Hence, the pole at the origin appears to remain 
stationary, and there is no pole-zero cancellation at the origin. Eq. (9.43) also 
shows this phenomenon. We see a stationary pole at the origin and two complex 
poles that change with gain. Notice that the compensator gain, K$ varies the 
natural frequency, con, of the minor-loop poles as seen from Eq. (9.43). Since the 
real parts of the complex poles are constant at $con = —10, the damping ratio must 
also be varying to keep 2^con = 20, a constant. Drawing the f = 0.8 line in Figure 
9.56 yields the complex poles at —10 ±/7.5. The gain, Kf, which equals 81.25, places 
the minor-loop poles in a position to meet the specifications. The poles just found, 
-10 ±;7.5, as well as the pole at the origin (Eq. (9.43)), act as open-loop poles that 
generate a root locus for variations of the gain, K. 
The final root locus for the system is shown in Figure 9.57. The £ = 0.6 
damping ratio line is drawn and searched. The closed-loop complex poles are found 
to be -4.535 ±/6.046, with a required gain of 624.3. A third pole is at -10.93. 
J& 
£ = 0.8 
-10+y7.5 
^ = 81.25 
-X— 
-20 
-15 
-
./20 -
/10 -
s-plane 
-i 
»» a 
10 
-5 
0 
-/10 " 
10 
20 
-/2() -
X = Closed-loop pole (minor loop) 
X = Open-loop pole 
FIGURE 9.56 
Root locus for 
minor loop of Example 9.8 
Virtual Experiment 9.2 
Improving Transient 
Response and 
Steady-State Error 
Using Rate Feedback 
and PD Control 
Put theory into practice and 
design a compensator in 
Lab VIEW that controls the 
ball position in the Quanser 
Magnetic Levitation system. 
Magnetic Levitation 
technology is used for modern 
transportation systems that 
suspend, such as the high 
speed Magnetic Levitation 
train. 
1 
Virtual experiments are found 
on WileyPLUS. 

502 
Chapter 9 
Design via Root Locus 
FIGURE 9.57 Root locus for 
closed-loop system of 
Example 9.8 
X= Closed-loop pole 
X= Open-loop pole 
The results are summarized in Table 9.9. We see that the compensated system, 
although having the same damping ratio as the uncompensated system, is much 
faster and also has a smaller steady-state error. The results, however, are predicted 
results and must be simulated to verify percent overshoot, settling time, and peak 
time, since the third pole is not far enough from the dominant poles. The step 
response is shown in Figure 9.58 and closely matches the predicted performance. 
TABLE 9.9 Predicted characteristics of the uncompensated and compensated systems of 
Example 9.8 
Plant and compensator 
Feedback 
Dominant poles 
K 
* 
(Si„ 
%OS 
n 
?P 
Kv 
e(oc)(ramp) 
Other poles 
Zero 
Comments 
Uncompensated 
Kx 
5(5 + 5)(5 + 15) 
1 
-1.997+/2.662 
177.3 
0.6 
3.328 
9.48 
2 
1.18 
2.364 
0.423 
-16 
None 
Second-order approx. OK 
Compensated 
K 
s{s2 + 205 + 156.25) 
1 
-4.535 +/6.046 
624.3 
0.6 
7.558 
9.48 
0.882 
0.52 
3.996 
0.25 
-10.93 
None 
Simulate 

9.6 Physical Realization of Compensation 
503 
0 
0.2 
0.4 
0.6 
0.8 
Time (seconds) 
FIGURE 9.58 
Step response simulation for Example 9.8 
Skill-Assessment Exercise 9.4 
PROBLEM: For the system of Figure 9.59, design minor-loop rate feedback com-
pensation to yield a damping ratio of 0.7 for the minor loop's dominant poles and a 
damping ratio of 0.5 for the closed-loop system's dominant poles. 
/?(*) + 
l 
s(s + 7)0? + 10) 
C(s) 
FIGURE 9.59 
System for Skill-Assessment Exercise 9.4 
ANSWER: The system is configured similar to Figure 9.55(6) with Kf = 77.42 and 
K = 6263. 
The complete solution is at www.wiley.com/college/nise. 
Our discussion of compensation methods is now complete. We studied both 
cascade and feedback compensation and compared and contrasted them. We are now 
ready to show how to physically realize the controllers and compensators we designed. 
I 
9.6 Physical Realization of 
Compensation 
In this chapter, we derived compensation to improve transient response and steady-
state error in feedback control systems. Transfer functions of compensators used in 
cascade with the plant or in the feedback path were derived. These compensators 
were defined by their pole-zero configurations. They were either active PI, PD, or 
PID controllers or passive lag, lead, or lag-lead compensators. In this section, we 
show how to implement the active controllers and the passive compensators. 

504 
Chapter 9 
Design via Root Locus 
Active-Circuit Realization 
In Chapter 2, we derived 
V0(s) 
Z2(s) 
Vi(s) 
Zi(s) 
(9.44) 
as the transfer function of an inverting operational amplifier whose 
configuration is repeated here in Figure 9.60. By judicious choice of Zi(s) 
and Z2(s), this circuit can be used as a building block to implement the 
compensators and controllers, such as PID controllers, discussed in this 
chapter. Table 9.10 summarizes the realization of PI, PD, and PID 
FIGURE 9.60 
Operational amplifier 
controllers as well as lag, lead, and lag-lead compensators using opera-
configured for transfer function realization 
t l 0 n a l amplifiers. You can verify the table by using the methods of 
Chapter 2 to find the impedances. 
TABLE 9.10 
Active realization of controllers and compensators, using an operational amplifier 
Function 
Zx(s) 
Zrh) 
Ge(s) = - Z2(.v) 
Z,(*) 
Gain 
Integration 
Differentiation 
PI controller 
PD controller 
PID controller 
Lag compensation 
Lead compensation 
"AMr-
c 
H^ 
«1 
c 
«1 
c, 
-1(-
c, 
^V\A^ 
I 
LJWV1 
* 2 
JWr-
c 
•A/VV-
R2 
C 
R2 
R2 
C2 
-AMHf-
*2 
R2 
uWvJ 
_ ^ 2 
i 
RC 
s 
-RCs 
R2{
S + ltc) 
/?1 
5 
-R2C[s 
+ RiC 
1 
R) 
C2J 
s 
1 ' 
C\ v 
R\C\ 
a 
RiC2/ 
where R2C2 > Rid 
1 
Cj \ 
RiCi 
a,/., 
i 
where i?iCi > R2C2 

9.6 Physical Realization of Compensation 
505 
Lag compensator 
A2C2 > A] C] 
Lead compensator 
A3C3 > A4C4 
FIGURE 9.61 
Lag-lead compensator implemented with operational amplifiers 
Other compensators can be realized by cascading compensators shown in the 
table. For example, a lag-lead compensator can be formed by cascading the lag 
compensator with the lead compensator, as shown in Figure 9.61. As an example, let 
us implement one of the controllers we designed earlier in the chapter. 
Example 9.9 
implementing a PID Controller 
PROBLEM: Implement the PID controller of Example 9.5. 
SOLUTION: The transfer function of the PID controller is 
G c W = (s + 55.92)(, + 0.5) 
which can be put in the form 
GJs) = s + 56.42 + 27.96 
(9.45) 
(9.46) 
Comparing the PID controller in Table 9.10 with Eq. (9.46), we obtain the following 
three relationships: 
RiCy = 1 
and 
RiC2 
= 27.96 
(9.47) 
(9.48) 
(9.49) 
Since there are four unknowns and three equations, we 
arbitrarily select a practical value for one of the elements. Selecting 
Ct = 0.1 /xF, the remaining values are found to be R\ = 357.65 kft, 
R2 = 178,891 kft, and Ci = 5.59/xF. 
The complete circuit is shown in Figure 9.62, where the 
circuit element values have been rounded off. 
179 kQ 
0.1 MF 
358 kH 
FIGURE 9.62 
PID controller 

506 
Chapter 9 
Design via Root Locus 
Passive-Circuit Realization 
Lag, lead, and lag-lead compensators can also be implemented with passive net-
works. Table 9.11 summarizes the networks and their transfer functions. The transfer 
functions can be derived with the methods of Chapter 2. 
The lag-lead transfer function can be put in the following form: 
Ge(s) = 
54 
S+T 
s + 1 
a 
s+r2 
(9.50) 
where a < 1. Thus, the terms with Ti form the lead compensator, and the terms with T2 
form the lag compensator. Equation (9.50) shows a restriction inherent in using this 
passive realization. We see that the ratio of the lead compensator zero to the lead 
compensator pole must be the same as the ratio of the lag compensator pole to the lag 
compensator zero. In Chapter 11 we design a lag-lead compensator with this restriction. 
A lag-lead compensator without this restriction can be realized with an active 
network as previously shown or with passive networks by cascading the lead and lag 
networks shown in Table 9.11. Remember, though, that the two networks must be 
isolated to ensure that one network does not load the other. If the networks load 
each other, the transfer function will not be the product of the individual transfer 
functions. A possible realization using the passive networks uses an operational 
amplifier to provide isolation. The circuit is shown in Figure 9.63. Example 9.10 
demonstrates the design of a passive compensator. 
TABLE 9.11 
Passive realization of compensators 
Function 
Network 
Transfer function, 
Lag compensation 
* 2 
R2 
_ 
c m_-
Ri 
s + RoC 
R1+R2 
1 
(Ri+R2)C 
Lead compensation 
y,<t) 
A1, 
If 
*2<>v(,(r) 
s + RiC 
1 
1 
S + R~^C + R^C 
Lag-lead compensation 
s + RiC, 
s + R2C2 
+ 
1 
1 
RxCi 
R2C2 
R2CJ 
R^R2CiC2 
s + 
1 

9.6 Physical Realization of Compensation 
507 
Isolation 
gain = -1 
Lead 
FIGURE 9.63 Lag-lead 
compensator implemented 
with cascaded lag and lead 
networks with isolation 
Example 9.10 
Realizing a Lead Compensator 
PROBLEM: Realize the lead compensator designed in Example 9.4 (Compensator b). 
SOLUTION: The transfer function of the lead compensator is 
5 + 4 
Gc(s) = 
20.09 
(9.51) 
Comparing the transfer function of a lead network shown in Table 9.11 with 
Eq. (9.51), we obtain the following two relationships: 
' 
= 4 
(9.52) 
R^C 
and 
1 
RXC 
R2C = 20.09 
(9.53) 
Hence, i^C = 0.25, andi^C = 0.0622. Since there are three network elements and 
two equations, we may select one of the element values arbitrarily. Letting 
C = 1 /xF, then R^ = 250 kO and /¾ = 62.2 kft. 
Skill-Assessment Exercise 9.5 
PROBLEM: Implement the compensators shown in a. and b. below. Choose a 
passive realization if possible. 
(5 + 0.1)(5 + 5) 
a. Gc(s) — 
b. Gc(s) = 
ANSWERS: 
(5 + 0.1)(5 + 2) 
[s + 0.01)(5 + 20) 
a. Gc(s) is a PID controller and thus requires active realization. Use Figure 9.60 
with the PID controller circuits shown in Table 9.10. One possible set of 
approximate component values is 
WileyPLUS 
CHJJ 
Control Solutions 
d = 10 fiF, 
C2 = 100 fiF, 
2?i = 20 M l 
/¾ = 100 ka 

508 
Chapter 9 
Design via Root Locus 
b. Gc(s) is a lag-lead compensator that can be implemented with a passive 
network because the ratio of the lead pole to zero is the inverse of the ratio of 
the lag pole to zero. Use the lag-lead compensator circuit shown in Table 9.11. 
One possible set of approximate component values is 
Ci = 100 /*F, C2 = 900 fiF, i?i = 100 kH, R2 = 560 Cl 
The complete solution is at www.wiley.com.college/nise. 
Antenna Control: Lag-Lead Compensation 
For the antenna azimuth position control system case study in Chapter 8, we 
obtained a 25% overshoot using a simple gain adjustment. Once this percent 
overshoot was obtained, the settling time was determined. If we try to improve the 
settling time by increasing the gain, the percent overshoot also increases. In this 
section, we continue with the antenna azimuth position control by designing a 
cascade compensator that yields 25% overshoot at a reduced settling time. Further, 
we effect an improvement in the steady-state error performance of the system. 
PROBLEM: Given the antenna azimuth position control system shown on the front 
endpapers, Configuration 1, design cascade compensation to meet the following 
requirements: (1) 25% overshoot, (2) 2-second settling time, and (3) Kv = 20. 
SOLUTION: For the case study in Chapter 8, a preamplifier gain of 64.21 yielded 25 % 
overshoot, with the dominant, second-order poles at -0.833 ±/1.888. The settling 
time is thus 4/£<y„ = 4/.833 = 4.8 seconds. The open-loop function for the system as 
derived in the case study in Chapter 5 is G(s) — 6.63K/[s(s + 1.71)(51 + 100)]. Hence 
Kv = 6.63X7(1.71 x 100) = 2.49. Comparing these values to this example's problem 
statement, we want to improve the settling time by a factor of 2.4, and we want 
approximately an eightfold improvement in Kv. 
Lead compensator design to improve transient response: First locate the 
dominant second-order pole. To obtain a settling time, Ts, of 2 seconds and a 
percent overshoot of 25%, the real part of the dominant second-order pole should 
be at -4/Ts = -2. Locating the pole on the 113.83° line (£ = 0.404, corresponding 
to 25% overshoot) yields an imaginary part of 4.529 (see Figure 9.64). 
Second, assume a lead compensator zero and find the compensator pole. 
Assuming a compensator zero at -2, along with the uncompensated system's 
open-loop poles and zeros, use the root locus program in Appendix H.2 at www 
.wiley.com/college/nise to find that there is an angular contribution of -120.14° at 
the design point of -2 ±/4.529. Therefore, the compensator's pole must contribute 
120.14° - 180° = -59.86° for the design point to be on the compensated system's 
root locus. The geometry is shown in Figure 9.64. To calculate the compensator 
pole, we use 4.529/(pc -2) = tan 59.86° or pc = 4.63. 

Case Studies 
509 
C = 0.404 
J(o 
s-plane 
-100 
-Pc 
-2 -1.71 
X = Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
FIGURE 9.64 Locating 
compensator pole 
Now determine the gain. Using the lead-compensated system's open-loop 
function, 
6.63K(s + 2) 
<m= 
(9.54) 
5(5 + 1.71)(^ + 100)(5 + 4.63) 
and the design point - 2 +/4.529 as the test point in the root locus program, the 
gain, 6.63iC, is found to be 2549. 
Lag compensator design to improve the steady-state error: Kv for the lead-
compensated system is found using Eq. (9.54). Hence, 
Kv = 
2549(2) 
(1.71)(100)(4.63) = 6.44 
(9.55) 
Since we want Kv = 20, the amount of improvement required over the lead-
compensated system is 20/6.44 = 3.1. Choosepc = -0.01 and calculate zc = 0.031, 
which is 3.1 times larger. 
Determine gain: The complete lag-lead-compensated open-loop function, 
GLLC(S), 
is 
GLLC(s) = 
6.63^(5 + 2)(5 + 0.031) 
s{s + .01)(5 + 1.71)(5 + 4.63)(5 + 100) 
(9.56) 
Using the root locus program in Appendix H.2 at www.wiley.com/college/nise and 
the poles and zeros of Eq. (9.56), search along the 25% overshoot line (113.83°) for 
the design point. This point has moved slightly with the addition of the lag 
compensator to —1.99+/4.51. The gain at this point equals 2533, which is 
6.63K. Solving for K yields K = 382.1. 
Realization of the compensator: A realization of the lag-lead compensator is 
shown in Figure 9.63. From Table 9.11 the lag portion has the following transfer 
function: 
Giag(s) = 
gg 
Rl+R2 
5 + 
5 + 
R2C 
1 
R2 
(5 + 0.031) 
R1+R2 
(5+ 0.01) 
(9.57) 
(Ri+R2)C 

Chapter 9 
Design via Root Locus 
10 MQ 
6.8 MQ 
8.4 kQ 
AAA—r^VW 
FIGURE 9.65 
Realization of lag-lead compensator 
Selecting C = 10 /xF, we find R2 = 3.2 MH and i?i = 6.8 MIL 
From Table 9.11 the lead compensator portion has the following transfer 
function: 
1 
Glead(s) — 
RiC 
s + 
+ 
1 
(* + 2) 
+ 4.63) 
(9.58) 
RiC 
R2C 
Selecting C = 10 ftF, we find i?i = 50 kft and R2 = 38 kft. 
The total loop gain required by the system is 2533. Hence, 
6.63^ 
Ri 
R1+R2 = 2533 
(9.59) 
where K is the gain of the preamplifier, and R%/(Ri + R2) is the gain of the lag 
portion. Using the values of i?i and R2 found during the realization of the lag 
portion, we find K = 1194. 
The final circuit is shown in Figure 9.65, where the preamplifier is implemented 
with an operational amplifier whose feedback and input resistor ratio approxi-
mately equals 1194, the required preamplifier gain. The preamplifier isolates the 
lag and lead portions of the compensator. 
Summary of the design results: Using Eq. (9.56) along with K = 382.1 yields the 
compensated value of K# Thus, 
Kv = Urn sGLLC{s) = 
2533 (2) (0.031; 
* - * ) 
(0.01)(1.71)(4.63)(100) = 19.84 
(9.60) 
which is an improvement over the gain-compensated system in the case study of 
Chapter 8, where Kv = 2.49. This value is calculated from the uncompensated G(s) 
by letting K = 64.21, as found in the Case Study of Chapter 8. 
Finally, checking the second-order approximation via simulation, we see in 
Figure 9.66 the actual transient response. Compare this to the gain-compensated 
system response of Figure 8.29 to see the improvement effected by cascade 
compensation over simple gain adjustment. The gain-compensated system yielded 
25%, with a settling time of about 4 seconds. The lag-lead-compensated system 
yields 28% overshoot, with a settling time of about 2 seconds. If the results are not 
adequate for the application, the system should be redesigned to reduce the 
percent overshoot. 

Case Studies 
511 
0 
2 
4 
6 
8 
10 
Time (seconds) 
FIGURE 9.66 
Step response of lag-lead-compensated antenna control 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. You are given the antenna azimuth position control system shown on 
the front endpapers, Configuration 2. In the challenge in Chapter 8, you were asked 
to design, via gain adjustment, an 8-second settling time. 
a. For your solution to the challenge in Chapter 8, evaluate the percent overshoot 
and the value of the appropriate static error constant. 
b. Design a cascade compensator to reduce the percent overshoot by a factor of 4 
and the settling time by a factor of 2. Also, improve the appropriate static error 
constant by a factor of 2. 
c. Repeat Part b using MATLAB. 
UFSS Vehicle: Lead and Feedback Compensation 
As a final look at this case study, we redesign the pitch control loop for the UFSS 
vehicle. For the case study in Chapter 8, we saw that rate feedback improved the 
transient response. In this chapter's case study, we replace the rate feedback with a 
cascade compensator. 
PROBLEM: Given the pitch control loop without rate feedback (Ki = 0) for the 
UFSS vehicle shown on the back endpapers, design a compensator to yield 20% 
overshoot and a settling time of 4 seconds (Johnson, 1980). 
SOLUTION: First determine the location of the dominant closed-loop poles. Using 
the required 20% overshoot and a 4-second settling time, a second-order approxi-
mation shows the dominant closed-loop poles are located at —1 ±/1.951. From the 
uncompensated system analyzed in the Chapter 8 case study, the estimated settling 
time was 19.8 seconds for dominant closed-loop poles of -0.202 ±/0.394. Hence, a 
lead compensator is required to speed up the system. 
Arbitrarily assume a lead compensator zero at - 1 . Using the root locus program in 
Appendix H.2 at www.wiley.com/college/nise, we find that this compensator zero, 
along with the open-loop poles and zeros of the system, yields an angular contribu-
tion at the design point, -1 + /1.951, of—178.92°. The difference between this angle 
and 180°, or -1.08°, is the angular contribution required from the compensator pole. 
MATLAB 

5 1 2 
Chapter 9 
Design via Root Locus 
Using the geometry shown in Figure 9.67, where — pc is the 
compensator pole location, we find that 
1.951 = tan 1.08° 
(9.61) 
from which pc = 104.5. The compensated open-loop transfer func-
tion is thus 
G(s) = 
0.25#I(J +0.435) (5 + 1) 
(5 + 1.23)(5 + 2)(52 + 0.2265 + 0.0169)(5 + 104.5) 
where the compensator is 
& + 1) 
(9.62) 
(5 + 104.5) 
(9.63) 
X = Closed-loop pole 
X = Open-loop pole 
Note: This figure is not drawn to scale. 
Gc(s) 
= 
FIG U R E 9.6 7 
Locating compensator 
P°le 
Using all poles and zeros shown in Eq. (9.62), the root locus program shows that 
a gain of 516.5 is required at the design point, —1 ±/1.951. The root locus of the 
compensated system is shown in Figure 9.68. 
A test of the second-order approximation shows three more closed-loop poles at 
—0.5, —0.9, and —104.5. Since the open-loop zeros are at -0.435 and - 1 , simulation 
is required to see if there is effectively closed-loop pole-zero cancellation with the 
closed-loop poles at —0.5 and —0.9, respectively. Further, the closed-loop pole at 
-104.5 is more than five times the real part of the dominant closed-loop pole, 
—1 ±/1.951, and its effect on the transient response is therefore negligible. 
The step response of the closed-loop system is shown in Figure 9.69, where we 
see a 26% overshoot and a settling time of about 4.5 seconds. Comparing this 
J CO 
Additional 
open-loop pole 
at-104.5 
- 1 
X » ( " X 
-3 
-2 
°r@ 
./3 
./2 
n 
-n 
-/2 
5-plane 
- ! — * • a 
1.2 
1.0 
0.8 
0.6 
0.4 
0.2 
0 
0 
2 
4 
6 
8 
Time (seconds) 
FIGURE 9.69 Step response of lead-compensated UFSS 
FIGURE 9.68 Root locus for lead-compensated system 
vehicle 
10 
-;3 

Summary 
513 
response with Figure 8.31, the response of the uncompensated system, we see 
considerable improvement in the settling time and steady-state error. However, 
the transient response performance does not meet the design requirements. Thus, 
a redesign of the system to reduce the percent overshoot is suggested if required 
by the application. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. The heading control system for the UFSS vehicle is shown on the back 
endpapers. The minor loop contains the rudder and vehicle dynamics, and the 
major loop relates output and input heading {Johnson, 1980). 
a. Find the values of K\ and K2 so that the minor-loop dominant poles have a 
damping ratio of 0.6 and the major-loop dominant poles have a damping ratio 
of 0.5. 
MATLAB 
b. Repeat, u s i n g MATLAB. 
flTTH 
^ Summary ]J 
In this chapter, we learned how to design a system to meet transient and steady-state 
specifications. These design techniques overcame limitations in the design method-
ology covered in Chapter 8, whereby a transient response could be created only if the 
poles generating that response were on the root locus. Subsequent gain adjustment 
yielded the desired response. Since this value of gain dictated the amount of steady-
state error in the response, a trade-off was required between the desired transient 
response and the desired steady-state error. 
Cascade or feedback compensation is used to overcome the disadvantages of 
gain adjustment as a compensating technique. In this chapter, we saw that the 
transient response and the steady-state error can be designed separately from each 
other. No longer was a trade-off between these two specifications required. Further, 
we were able to design for a transient response that was not represented on the 
original root locus. 
The transient response design technique covered in this chapter is based upon 
reshaping the root locus to go through a desired transient response point, followed 
by a gain adjustment. Typically, the resulting gain is much higher than the original if 
the compensated system response is faster than the uncompensated response. 
The root locus is reshaped by adding additional poles and zeros via a cascade or 
feedback compensator. The additional poles and zeros must be checked to see that 
any second-order approximations used in the design are valid. All poles besides the 
dominant second-order pair must yield a response that is much faster than the 
designed response. Thus, nondominant poles must be at least five times as far from 
the imaginary axis as the dominant pair. Further, any zeros of the system must be 
close to a nondominant pole for pole-zero cancellation, or far from the dominant 
pole pair. The resulting system can then be approximated by two dominant poles. 
The steady-state response design technique is based upon placing a pole on or 
near the origin in order to increase or nearly increase the system type, and then 
placing a zero near this pole so that the effect upon the transient response is 
negligible. However, final reduction of steady-state error occurs with a long-time 

Chapter 9 
Design via Root Locus 
constant. The same arguments about other poles yielding fast responses and about 
zeros being cancelled in order to validate a second-order approximation also hold 
true for this technique. If the second-order approximations cannot be justified, then 
a simulation is required to make sure the design is within tolerance. 
Steady-state design compensators are implemented via PI controllers or lag 
compensators. PI controllers add a pole at the origin, thereby increasing the system 
type. Lag compensators, usually implemented with passive networks, place the pole 
off the origin but near it. Both methods add a zero very close to the pole in order not 
to affect the transient response. 
The transient response design compensators are implemented through PD 
controllers or lead compensators. PD controllers add a zero to compensate the 
transient response; they are considered ideal. Lead compensators, on the other hand, 
are not ideal since they add a pole along with the zero. Lead compensators are 
usually passive networks. 
We can correct both transient response and steady-state error with a PID or 
lag-lead compensator. Both of these are simply combinations of the previously 
described compensators. Table 9.7 summarized the types of cascade compensators. 
Feedback compensation can also be used to improve the transient response. 
Here the compensator is placed in the feedback path. The feedback gain is used to 
change the compensator zero or the system's open-loop poles, giving the designer a 
wide choice of various root loci. The system gain is then varied to move along the 
selected root locus to the design point. An advantage of feedback compensation is 
the ability to design a fast response into a subsystem independently of the system's 
total response. 
In the next chapter, we look at another method of design, frequency response, 
which is an alternate method to the root locus. 
^ Review Questions^ 
1. Briefly distinguish between the design techniques in Chapter 8 and Chapter 9. 
2. Name two major advantages of the design techniques of Chapter 9 over the 
design techniques of Chapter 8. 
3. What kind of compensation improves the steady-state error? 
4. What kind of compensation improves transient response? 
5. What kind of compensation improves both steady-state error and transient 
response? 
6. Cascade compensation to improve the steady-state error is based upon what 
pole-zero placement of the compensator? Also, state the reasons for this 
placement. 
7. Cascade compensation to improve the transient response is based upon what 
pole-zero placement of the compensator? Also, state the reasons for this 
placement. 
8. What difference on the s-plane is noted between using a PD controller or using a 
lead network to improve the transient response? 
9. In order to speed up a system without changing the percent overshoot, where 
must the compensated system's poles on the s-plane be located in comparison to 
the uncompensated system's poles? 

Problems 
515 
10. Why is there more improvement in steady-state error if a PI controller is used 
instead of a lag network? 
11. When compensating for steady-state error, what effect is sometimes noted in the 
transient response? 
12. A lag compensator with the zero 25 times as far from the imaginary axis as the 
compensator pole will yield approximately how much improvement in steady-
state error? 
13. If the zero of a feedback compensator is at —3 and a closed-loop system pole is at 
-3.001, can you say there will be pole-zero cancellation? Why? 
14. Name two advantages of feedback compensation. 
Problems 
1. Design a PI controller to drive the 
step response error to zero for 
the unity feedback system shown 
in Figure P9.1, where 
WileyPLUS 
dJEJ 
Control Solutions 
G(s) = 
K 
(5+1)(5 + 3)(5-1-10) 
The system operates with a damping ratio of 0.5. 
Compare the specifications of the uncompensated 
and compensated systems. [Section: 9.2] 
R(s) +,<-
_ j 
7) E{s) 
G{s) 
C(s) 
FIGURE P9.1 
2. Consider the unity feedback system shown in Figure 
P9.1, where 
G(s) = 
K 
5(5 + 3)(5 + 6) 
a. Design a PI controller to drive the ramp response 
error to zero for any K that yields stability. 
[Section: 9.2] 
b. Use MATLAB to simulate your 
JJJJJJL 
design for K—l. 
Show both 
S U B 
the input ramp and the out-
put response on the same plot. 
3. The unity feedback system shown in Figure P9.1 with 
G{S) 
= (5 + 2)(5 + 3)(5 + 7) 
is operating with 10% overshoot. [Section: 9.2] 
a. What is the value of the appropriate static error 
constant? 
b. Find the transfer function of a lag network so that 
the appropriate static error constant equals 4 
without appreciably changing the dominant 
poles of the uncompensated system. 
c. Use MATLAB or any other computer JJJJiJIL 
program to simulate the system ^Eil^P 
to see the effect of your compensator. 
4. Repeat 
Problem 
3 
[Section: 9.2] 
for 
G{s) = 
K 
5(5+ 3)(5+ 7)' 
5. Consider the unity feedback system shown in Figure 
P9.1 with 
G(s) = 
K 
;5 + 3)(5 + 5)(5 + 7) 
a. Design a compensator that will yield Kp — 20 
without appreciably changing the dominant pole 
location that yields a 10% overshoot for the 
uncompensated system. [Section: 9.2] 
b. Use MATLAB or any other computer J^JiJL 
program to simulate the un- Vul^P 
compensated and compensated systems . 
c. Use MATLAB or any other computer JJSJJJJL 
program to determine how much ^Eu^P 
time it takes the slow response of the 
lag compensator to bring the output to 
within 2 % of its final compensated value. 
WileyPLUS 
6. The unity feedback system shown Figure 
MHI.TJA 
Control Solutions 
P9.1 with 
G(5) = [5 + 2)(5 + 3)(5+5) 

Chapter 9 
Design via Root Locus 
is operating with a dominant-pole damping ratio 
of 0.707. Design a PD controller so that the 
settling time is reduced by a factor of 2. Compare 
the transient and steady-state performance of 
the uncompensated and compensated systems. 
Describe any problems with your design. 
[Section: 9.3] 
7. Redo Problem 6 using MATLAB in 
MATLAB 
the following way: 
flKulV 
a. MATLAB will generate the root locus 
for the uncompensated system along 
with the 0.707 damping ratio line. 
You will interactively select the op-
erating point. MATLAB will then in-
form you of the coordinates of the 
operating point, the gain at the oper-
ating point, as well as the estimated 
%OS, Tsr TP,S, conr and Kp represented by 
a second-order approximation at the 
operating point. 
b. MATLAB will display the step response 
of the uncompensated system. 
c. Without further input,MATLAB will 
calculate the compensated design 
point and will then ask you to input 
a value for the PD compensator zero 
from the keyboard. MATLAB will re-
spond with a plot of the root locus 
showing the compensated design point. 
MATLAB will then allow you to keep 
changing the PD compensator value 
from the keyboard until a root locus 
is plotted that goes through the de-
sign point. 
d. For the compensated system, MATLAB will 
inform you of the coordinates of the 
operating point, the gain at the operat-
ing point,as well as the estimated 
%OS, Ts, Tp/.£, <w„, and Kp represented by 
a second-order approximation at the 
operating point. 
e. MATLAB will then display the step 
response of the compensated system. 
8. Design a PD controller for the system shown in 
Figure P9.2 to reduce the settling time by a factor of 
4 while continuing to operate the system with 20% 
overshoot. Compare your performance to that ob-
tained in Example 9.7. 
m 
?\ 1 
9 
K 
s(s+ 10)(.v + 20) 
C(s) 
FIGURE P9.2 
9. Consider the unity feedback system shown in Figure 
P9.1 with [Section: 9.3] 
G(s) = 
K 
(, + 4)3 
a. Find the location of the dominant poles to yield a 
1.6 second settling time and an overshoot of 25%. 
b. If a compensator with a zero at —1 is used to 
achieve the conditions of Part a, what must the 
angular contribution of the compensator pole be? 
c. Find the location of the compensator pole. 
d. Find the gain required to meet the requirements 
stated in Part a. 
e. Find the location of other closed-loop poles for 
the compensated system. 
f. Discuss the validity of your second-order 
approximation. 
g. Use MATLAB or any other computer ^ ^ L 
program to simulate the compen- Ciil^P 
sated system to check your design . 
10. The unity feedback system shown in 
wileypms 
Figure P9.1 with 
dS> 
Y 
Control Solutions 
is to be designed for a settling time of 1.667 seconds 
and a 16.3% overshoot. If the compensator zero is 
placed at - 1 , do the following: [Section: 9.3] 
a. Find the coordinates of the dominant poles. 
b. Find the compensator pole. 
c. Find the system gain. 
d. Find the location of all nondominant poles. 
e. Estimate the accuracy of your second-order 
approximation. 
f. Evaluate the steady-state error characteristics. 
g. Use MATLAB or any other computer 
J^^L 
program to simulate the system ViU^P 
and evaluate the actual tran-
sient response characteristics for a 
step input. 

Problems 
517 
of the operating point,the gain at 
the operating point,as well as the 
estimated %0S, Ts, Tp, £, <D„, and Kp rep-
resented by a second-order approxima-
tion at the operating point. 
e. MATLAB will then display the step re-
sponse of the compensated system. 
f. Change the compensator's zero location 
a few times and collect data on the com-
pensated system to see if any other 
choices of compensator zero yield 
advantages over the original design. 
13. Consider the unity feedback system of Figure P9.1 
with 
5(5 + 20)(^ + 40) 
11. Given the unity feedback system of Figure P9.1, 
with 
V ' 
(5 + 3)(5 + 4)(5 + 7)(5 + 9) 
do the following: [Section: 9.3] 
a. Sketch the root locus. 
b. Find the coordinates of the dominant poles for 
which £ = 0.8. 
c. Find the gain for which t, — 0.8. 
d. If the system is to be cascade-compensated so 
that T$ = 1 second and £ = 0.8, find the compen-
sator pole if the compensator zero is at —4.5. 
e. Discuss the validity of your 
second-order 
approximation. 
f. Use MATLAB or any other computer iJJJJJL 
program to simulate the compen- ClU^P 
sated and uncompensated systems and 
compare the results to those expected. 
12. Redo Problem 11 using MATLAB in 
^ARAB 
the following way: 
^ul^P 
a. MATLAB will generate the root locus for 
the uncompensated system along with the 
0 . 8 damping ratio line. You will inter-
actively select the operating point. 
MATLAB will then inform you of the coor-
dinates of the operating point, the gain 
at the operating point, as well as the 
estimated %OS,Ts,Tp,t;,(onr 
and Kp repre-
sented by a second-order approximation 
at the operating point. 
b. MATLAB will display the step response 
of the uncompensated system. 
c. Without further input, MATLAB will 
calculate the compensated design 
point and will then ask you to input a 
value for the lead compensator pole 
from the keyboard. MATLAB will respond 
with a plot of the root locus showing 
the compensated design point. MATLAB 
will then allow you to keep changing the 
lead compensator pole value from the 
keyboard until a root locus is plotted 
that goes through the design point. 
d. For the compensated system, MATLAB 
will inform you of the coordinates 
The system is operating at 20% overshoot. Design a 
compensator to decrease the settling time by a 
factor of 2 without affecting the percent overshoot 
and do the following: [Section: 9.3] 
a. Evaluate the uncompensated system's dominant 
poles, gain, and settling time. 
b. Evaluate the compensated system's dominant 
poles and settling time. 
c. Evaluate the compensator's pole and zero. Find 
the required gain. 
d. Use MATLAB or any other computer iJJJi^ 
program to simulate the compen- V L H ^ P 
sated and uncompensated 
systems' step response. 
c. Use MATLAB or any other computer ^^IJ^L 
program to simulate both the un- Vid^P 
compensated and compensated systems to 
see the effect of your compensator. 
14. The unity feedback system shown in Figure P9.1 with 
v ' 
(5+ 15)(52+ 65+ 13) 
is operating with 30% overshoot. [Section: 9.3] 
a. Find the transfer function of a cascade compen-
sator, the system gain, and the dominant pole 
location that will cut the settling time in half if 
the compensator zero is at —7. 
b. Find other poles and zeros and discuss your 
second-order approximation. 

518 
Chapter 9 
Design via Root Locus 
15. For the unity feedback system of Figure P9.1 with 
K 
18. Consider the unity feedback system of Figure P9.1, 
with 
G(s) = s{s + l)(s2 + 105 + 26) 
do the following: [Section: 9.3] 
a. Find the settling time for the system if it is 
operating with 15% overshoot. 
I). Find the zero of a compensator and the gain, K, 
so that the settling time is 7 seconds. Assume that 
the pole of the compensator is located at -15. 
c. Use MATLAB or any other computer JJJ1JL 
program to simulate the system's Vid^P 
step response to test the compensator. 
16. A unity feedback control system has 
wiieypws 
the following forward transfer tunc- 
^ 
J J J 
tion: [Section: 9.3] 
control solutions 
[S) 
s*(s + 4)(5 + 12) 
a. Design a lead compensator to yield a closed-loop 
step response with 20.5% overshoot and a set-
tling time of 3 seconds. Be sure to specify the 
value of K. 
b. Is your second-order approximation valid? 
c. Use MATLAB or any o t h e r computer JJJJJL 
program to simulate and compare ^Bui^P 
t h e t r a n s i e n t response of the compen-
s a t e d system t o t h e p r e d i c t e d t r a n s i e n t 
r e s p o n s e . 
17. For the unity feedback system of Figure P9.1, with 
K 
G(s) = [s2 + 20s + 101)(5 + 20) 
the damping ratio for the dominant poles is to be 
0.4, and the settling time is to be 0.5 second. [Sec-
tion: 9.3] 
a. Find the coordinates of the dominant poles. 
b. Find the location of the compensator zero if the 
compensator pole is at -15. 
c. Find the required system gain. 
d. Compare the performance of the uncompensated 
and compensated systems. 
e. Use MATLAB or any other computer MATLAB 
program to simulate the system 
to check your design. Redesign 
if necessary. 
G(s} = 
K 
(s +3)(s + 5) 
a. Show that the system cannot operate with a 
settling time of 2/3 second and a percent over-
shoot of 1.5 % with a simple gain adjustment. 
b. Design a lead compensator so that the system 
meets the transient response characteristics of 
Part a. Specify the compensator's pole, zero, and 
the required gain. 
19. Given the unity feedback system of Figure P9.1 with 
G(s) = 
K 
[5 + 2)(5 + 4)(5 + 6)(5 + 8) 
Find the transfer function of a lag-lead compensator 
that will yield a settling time 0.5 second shorter than 
that of the uncompensated system, with a damping 
ratio of 0.5, and improve the steady-state error by a 
factor of 30. The compensator zero is at - 5 . Also, 
find the compensated system's gain. Justify any 
second-order approximations or verify the design 
through simulation. [Section: 9.4] 
20. Redo Problem 19 u s i n g a l a g - l e a d 
MATLAB 
compensator 
and MATLAB in the 
S i J j P 
following way: 
a. MATLAB w i l l generate the root locus for 
the uncompensated system along with the 
0 . 5 damping-ratio l i n e . You w i l l i n t e r -
a c t i v e l y s e l e c t t h e operating p o i n t . 
MATLAB w i l l then proceed t o inform you 
of the coordinates of the 
o p e r a t i n g 
p o i n t , t h e gain a t the operating p o i n t , 
as well as t h e estimated %OS, Ts, Tp,%, co„, 
and Kp represented by a second-order ap-
proximation a t t h e o p e r a t i n g p o i n t . 
b. MATLAB w i l l d i s p l a y t h e s t e p r e s p o n s e 
of t h e uncompensated system. 
c. Without 
f u r t h e r 
i n p u t , 
MATLAB w i l l 
c a l c u l a t e t h e compensated design p o i n t 
and w i l l then ask you to input a value for 
the lead compensator p o l e from t h e key-
board. MATLAB w i l l respond with a p l o t 
of t h e r o o t locus showing t h e compen-
s a t e d design p o i n t . MATLAB w i l l then 
allow you t o keep changing the lead com-
p e n s a t o r p o l e value from the keyboard 

Problems 
519 
until a root locus is plotted that goes 
through the design point. 
d. For the compensated system, MATLAB 
will inform you of the coordinates of 
the operating point, the gain at the op-
erating point, as well as the estimated 
%0S, Ts, Tpr£,coni and Kp represented by a 
second-order approximation at the op-
erating point. 
e. MATLAB will then display the step re-
sponse of the compensated system. 
f. Change the compensator's zero location 
a few times and collect data on the com-
pensated system to see if any other 
choices of the compensator zero yield 
advantages over the original design. 
g. Using the steady-state error of the un-
compensated system, add a lag compensa-
tor to yield an improvement of 30 times 
over the uncompensated system's steady-
state error, with minimal effect on the 
designed transient response. Have MAT-
LAB plot the step response. Try several 
values for the lag compensator's pole and 
see the effect on the step response. 
21. Given the uncompensated unity feedback system of 
Figure P9.1, with 
G{s) = 
K 
s(s + l)(s + 3) 
do the following: [Section: 9.4] 
a. Design a compensator to yield the following 
specifications: settling time = 2.86 seconds; per-
cent overshoot = 4.32%; the steady-state error is 
to be improved by a factor of 2 over the un-
compensated system. 
b. Compare the transient and steady-state error 
specifications of the uncompensated and com-
pensated systems. 
c. Compare the gains of the uncompensated and 
compensated systems. 
d. Discuss the validity of your second-order 
approximation. 
e. Use MATLAB or any other computer 
MATLAB 
program to simulate the un- Cul^P 
compensated and compensated systems 
and verify the s p e c i f i c a t i o n s . 
22. For the unity feedback system given in 
wileyPLUS 
Figure P9.1 with 
I M i f 
„ 
Control Solutions 
G® = 4s+ 5)(s+ 11) 
do the following: [Section: 9.4] 
a. Find the gain, K, for the uncompensated system 
to operate with 30% overshoot. 
b. Find the peak time and Kv for the uncompensated 
system. 
c. Design a lag-lead compensator to decrease the 
peak time by a factor of 2, decrease the percent 
overshoot by a factor of 2, and improve the 
steady-state error by a factor of 30. Specify all 
poles, zeros, and gains. 
23. The unity feedback system shown in Figure P9.1 
with 
G{s) = 
K 
{s2 + 4s + 8)(J + 10) 
is to be designed to meet the following specifications: 
Overshoot: Less than 25% 
Settling time: Less than 1 second 
Kp = 10 
Do the following: [Section: 9.4] 
a. Evaluate the performance of the uncompensated 
system operating at 10% overshoot. 
b. Design a passive compensator to meet the de-
sired specifications. 
C. Use MATLAB to simulate the 
MATLAB 
compensated system. Com- 
^^I^P 
pare the response with the desired 
specifications . 
24. Consider the unity feedback system in Figure P9.1, 
with 
G(s) = 
K 
[s + 2){s + 4) 
The system is operated with 4,32% overshoot. In 
order to improve the steady-state error, Kp is to be 
increased by at least a factor of 5. A lag compensa-
tor of the form 
GM = 
(5 + 0.5] 
(5 + o.r 
is to be used. [Section: 9.4] 

520 
Chapter 9 
Design via Root Locus 
a. Find the gain required for both the compensated 
and the uncompensated systems. 
b. Find the value of Kp for both the compensated 
and the uncompensated systems. 
c. Estimate the percent overshoot and settling time 
for both the compensated and the uncompensated 
systems. 
d. Discuss the validity of the second-order approxi-
mation used for your results in Part c. 
e. Use MATLAB or any other computer J^i^L 
program to simulate the step C M V 
response for the uncompensated and 
compensated systems. What do you no-
tice about the compensated system's 
response? 
f. Design a lead compensator that will correct the 
objection you notice in Part e. 
25. For the unity feedback system in Figure P9.1, with 
G{s) = 
K 
(j+ !)(* +4) 
design a PID controller that will yield a peak time of 
1.047 seconds and a damping ratio of 0.8, with zero 
error for a step input. [Section: 9.4] 
26. For the unity feedback system in Figure P9.1, with 
G(s) = 
K 
WileyPLUS 
(s + 4)(s + 6)(s + 10) 
© E E J 
Control Solutions 
do the following: 
a. Design a controller that will yield no more than 
25% overshoot and no more than a 2-second 
settling time for a step input and zero steady-
state error for step and ramp inputs. 
b. Use MATLAB and verify your 
WLA& 
design. 
ff39 
27. Redo Problem 2 6 using MATLAB in 
JJ^i£L 
the following way: 
VliUP 
a. MATLAB will ask for the desired per-
cent over shoot, settling time, and PI 
compensator zero. 
b. MATLAB will design the PD controller's 
zero. 
c. MATLAB will display the root locus of 
the PID-compensated system with the 
desired percent overshoot line. 
d. The user will interactively select 
the intersection of the root locus 
and the desired percent over shoot 
line . 
e. MATLAB will display the gain and tran-
sient response characteristics of the 
PID-compensated system. 
f. MATLAB will display the step response 
of the PID-compensated system. 
g. MATLAB will display the ramp response 
of the PID-compensated system. 
28. If the system of Figure P9.3 operates with a damp-
ing ratio of 0.517 for the dominant second-order 
poles, find the location of all closed-loop poles and 
zeros. 
R(s) + , 7) 
K 
(s2 + 2s + 0.25) 
(5 + 3) 
(5 + 2) 
C(5) 
FIGURE P9.3 
29. For the unity feedback system in Figure P9.1, with 
G{S) 
= s(s + 2)(s +4)(s + 6) 
do the following: [Section: 9.5] 
a. Design rate feedback to yield a step response 
with no more than 15% overshoot and no 
more than 3 seconds settling time. Use 
Approach 1.. 
b. Use MATLAB and s i m u l a t e your 
,V,ATLA5 
compensated system. 
30. Given the system of Figure P9.4: [Section: 9.5] 
m 
+, 1QS . 
(X) " 
K 
^
-
* l 
s(s + 4)(s + 9) 
s + a 
C(s) 
FIGURE P9.4 
a. Design the value of K\, as well as a in the feedback 
path of the minor loop, to yield a settling time of 1 
second with 5% overshoot for the step response. 
b. Design the value of K to yield a major-loop 
response with 10% overshoot for a step input. 

Problems 
521 
MATLAB 
c. Use MATLAB or any other computer MATLAB 
program to simulate the step re-
sponse to the entire closed-
loop system. 
d. Add a PI compensator to reduce 
the major-loop steady-state 
error to zero and simulate the step 
response using MATLAB or any other 
computer program. 
31. Identify and realize the following controllers with 
operational amplifiers. [Section: 9.6] 
s + 0.01 
a. 
s 
b. 5 + 2 
32. Identify and realize the following 
compensators with passive net-
works. [Section: 9.6] 
5 + 0.1 
WileyPLUS 
CESJ 
Control Solutions 
a. 
b. 
c. 
5 + 0.01 
5 + 2 
5 + 5 
5 + 0.1 
5 + 0.01/ \s + 10 
5 + 1 
33. Repeat Problem 32 using operational amplifiers. 
[Section: 9.6] 
DESIGN PROBLEMS 
34. The room temperature of an 11 m2 room is to be 
controlled by varying the power of an indoor radia-
tor. For this specific room the open-loop transfer 
function from radiator power, Q(s), to temperature, 
T(s), is (Thomas, 2005) 
T(s) 
(1 x l ( r V + (1.314 x 10"9)5 + (2.66 x 10-13) 
G(s) = Q{s) 53 + 0.00163^2 + (5.272 x l(T7).s + (3.538 x 10-11) 
The system is assumed to be in the closed-loop 
configuration shown in Figure P9.1. 
a. For a unit step input, calculate the steady-state 
error of the system. 
b. Try using the procedure of Section 9.2 to design a PI 
controller to obtain zero steady-state error for step 
inputs without appreciably changing the transient 
response. Then explain why it is not possible to do so. 
c. Design a PI controller of the form Gc(s) = 
that will reduce the step-response error 
to zero while not changing significantly the tran-
sient response. (Hint: Place the zero of the 
compensator in a position where the closed-
loop poles of the uncompensated root locus 
will not be affected significantly.) 
d. Use Simulink to s i m u l a t e t h e 
sjrnulink 
systems of P a r t s b and c and to 
^ E 9 P 
v e r i f y t h e c o r r e c t n e s s of your design 
in P a r t c. 
35. Figure P9.5 shows a two-tank system. The liquid inflow 
to the upper tank can be controlled using a valve and is 
represented by F0. The upper tank's outflow equals the 
lower tank's inflow and is represented by /¾. The 
outflow of the lower tank is F2. The objective of 
the design is to control the liquid level, y(f), in the 
lower tank. The open-loop transmission for this system 
Y(s) 
a2ai 
is F0(s) 
52 + («i + a4)s + a\a<\ (Romagnoli, 2006). 
The system will be controlled in a loop analogous to 
that of Figure P9.1, where the lower liquid level will be 
measured and compared to a set point. The resulting 
error will be fed to a controller, which in turn will open 
or close the valve feeding the upper tank. 
a. Assumingai = 0.04. a2 = 0.0187, a$ = 1, and04 = 
0.227, design a lag compensator to obtain a step-
response steady-state error of 10% without affecting 
the system's transient response appreciably. 
Verify your design through 
MAUAB 
MATLAB simulations . 
b. 
FIGURE P9.5 
36. Figure P9.6(a) shows a heat-exchanger process 
whose purpose is to maintain the temperature of 
a liquid at a prescribed temperature. 
The temperature is measured using a sensor and a 
transmitter, TT 22, that sends the measurement to a 

522 
Chapter 9 
Design via Root Locus 
Process 
fluid 
Condensate 
return 
(«) 
Compensator 
Valve 
TSPts) + 
Gc(s) 
Gv{s) 
Sensor 
H{s) 
Steam 
T® 
Heat exchanger 
G,h) 
T(s) 
(b) 
FIGURE P9.6 
a. Heat-exchanger process (Reprinted with permission of John Wiley & Sons, Inc.); b. block diagram 
corresponding controller, TC 22, that compares the 
actual temperature with a desired temperature set 
point, SP. The controller automatically opens or closes 
a valve to allow or prevent the flow of steam to change 
the temperature in the tank. The corresponding block 
diagram for this system is shown in Figure P9.6(b) 
(Smith 2002). Assume the following transfer functions: 
Gv(*) = 0.02 
As + 1'' <*(*) = 
70 
50s + 1' H(s) = 
I 
125 + 1 
a. Assuming Gc(s) = K, find the value of K that will 
result in a dominant pole with i; — 0.7. Obtain the 
corresponding Ts. 
b. Design a PD controller to obtain the same damping 
factor as Part a but with a settling time 20% smaller. 
c. Verify your results through 
'V'ATLAB 
MATLAB simulation. 
37. Repeat Problem 36, Parts b and c, using a lead 
compensator. 
38. a. Find the transfer function of a motor whose torque-
speed curve and load are given in Figure P9.7. 
Torque 
0.5 N-m 
Motor 
*- RPM 
10 
5 kg-m2 
1 N-m-s/rad — 
FIGURE P9.7 
b. Design a tachometer compensator to yield a 
damping ratio of 0.5 for a position control 

Problems 
523 
employing a power amplifier of gain 1 and a 
preamplifier of gain 5000. 
c. Compare the transient and steady-state charac-
teristics of the uncompensated system and the 
compensated system. 
WileyPLUS 
39. You are given the motor whose transfer 
dHljJ'A 
Control Solutions 
function is shown in Figure P9.8(a). 
EJs) 
25 
.5(5+1) 
e„is) 
40. A position control is to be designed with a 20% 
overshoot and a settling time of 2 seconds. You 
have on hand an amplifier and a power amplifier 
whose cascaded transfer function is Ki/(s + 20) 
with which to drive the motor. Two 10-turn pots 
are available to convert shaft position into volt-
age. A voltage of ±5TZ volts is placed across the 
pots. A dc motor whose transfer function is of the 
form 
K 
(«) 
mtfi 
- i 
>«•>, 
9 
Amplifier 
*J - t ® -
Motor 
25 
s(s+ 1) 
Tachometer 
Kfs 
cm 
-
(b) 
FIGURE P9.8 
a. If this motor were the forward transfer function of a 
unity feedback system, calculate the percent over-
shoot and settling time that could be expected. 
b. You want to improve the closed-loop response. 
Since the motor constants cannot be changed and 
you cannot use a different motor, an amplifier 
and tachometer are inserted into the loop as 
shown in Figure P9.8(6). Find the values of Kx 
and Kf to yield a percent overshoot of 25% and a 
settling time of 0.2 second. 
c. Evaluate the steady-state error specifications for 
both the uncompensated and the compensated 
systems. 
0o(s) _ 
Ea(s) 
s{s + a) 
is also available. The transfer function of the 
motor is found experimentally as follows. The 
motor and geared load are driven open-loop by 
applying a large, short, rectangular pulse to the 
armature. An oscillo-gram of the response shows 
that the motor reached 63% of its final output 
value at 1/2 second after the application of the 
pulse. Further, with a constant 10 volts dc applied 
to the armature, the constant output speed was 
100 rad/s. 
a. Draw a complete block diagram of the system, 
specifying the transfer function of each compo-
nent when the system is operating with 20% 
overshoot. 
b. What will the steady-state error be for a unit 
ramp input? 
c. Determine the transient response characteristics. 
d. If tachometer feedback is used around the motor, 
as shown in Figure P9.9, find the tachometer and 
the amplifier gain to meet the original specifica-
tions. Summarize the transient and steady-state 
characteristics. 
Amplifier 
rt(.v) 
Pot 
7) 
y-
*. 
-J/S*— 
y 
Power 
amp 
Tach 
— » • 
omete 
Kf 
Motor 
r 
C(5) 
FIGURE P9.9 

524 
Chapter 9 
Design via Root Locus 
41. A position control is to be designed with a 10% over-
shoot, a settling time of 1 second, and Kv = 1000. You 
have on hand an amplifier and a power amplifier 
whose cascaded transfer function is K-[/(s + 40) 
with which to drive the motor. Two 10-turn pots are 
available to convert shaft position into voltage. A 
voltage of ±207T volts is placed across the pots. A dc 
motor whose transfer function is of the form 
e0{s) _ 
K 
Ea(s) 
s(s + a) 
is also available. The following data are observed from 
a dynamometer test at 50 V. At 25 N-m of torque, the 
motor turns at 1433 rpm. At 75 N-m of torque, the 
motor turns at 478 rpm. The speed measured at the load 
is 0.1 that of the motor. The equivalent inertia, includ-
ing the load, at the motor armature is 100 kg-m2, and 
the equivalent viscous damping, including the load, at 
the motor armature is 50 N-m-s/rad. 
a. Draw a complete block diagram of the system, 
specifying 
the transfer function 
of each 
component. 
b. Design a passive compensator to meet the re-
quirements in the problem statement. 
c. Draw the schematic of the compensator showing 
all component values. Use an operational ampli-
fier for isolation where necessary. 
d. Use MATLAB or any other computer JJJjJJL 
program to simulate your system Vul^P 
and show that all requirements have been 
met. 
42. Given the system shown in Figure P9.10, find the 
values of K and Kf so that the closed-loop dominant 
poles will have a damping ratio of 0.5 and the under-
damped poles of the minor loop will have a damping 
ratio of 0.8. 
Power amplifier 
and 
Amplifier 
PIar* 
-¾ « « . 
V 
1 
K 
- i t 
( 
1 
s+t)2(s + 5 
Tachometer 
Kfs 
) 
CM 
•< 
FIGURE P9.10 
43. Given the system in Figure P9.ll, find the values of 
K and KfSO that the closed-loop system will have a 
4.32% overshoot and the minor loop will have 
a damping ratio of 0.8. Compare the expected 
performance of the system without tachometer 
compensation to the expected performance with 
tachometer compensation. 
Power amplifier 
and 
Amplifier 
plant 
y. 
/C(v> 
K 
+ X" 
I 
(s+!)(.? +5)(.s+10) 
Tachometer 
Kt* 
C(.v) 
FIGURE P9.11 
44. In Problem 57 of Chapter 8, a head-position con-
trol system for a floppy disk drive was designed to 
yield a settling time of 0.1 second through gain 
adjustment alone. Design a lead compensator to 
decrease the settling time to 0.05 second without 
changing the percent overshoot. Also, find the 
required loop gain. 
45. Consider the temperature control system 
wileypuis 
for a chemical process shown in Figure 
^ViJ« 
P9.12. The uncompensated system is op- c°ntfo1 solutions 
erating with a rise time approximately the same as a 
second-order system with a peak time of 16 seconds and 
5% overshoot. There is also considerable steady-state 
error. Design a PID controller so that the compensated 
system will have a rise time approximately equivalent 
to a second-order system with a peak time of 8 seconds 
and 5% overshoot, and zero steady-state error for a 
step input. 
46. Steam-driven power generators rotate at a 
constant speed via a governor that maintains con-
stant steam pressure in the turbine. In addition, 
automatic generation control (AGC) or load 
frequency control (LFC) is added to ensure reli-
ability and consistency despite load variations 
or other disturbances that can affect the distribu-
tion line frequency output. A specific turbine-
governor system can be described only using 
the block diagram of Figure P9.1 in which 
G{s) = Gc(s)Gg{s)G,(s)Gm{s)i 
where 
(Khoda-
bakhshian, 2005) 

Problems 
525 
Desired 
temperature 
set point 
+
^ 
-. y 
PID 
controller 
Gc(s) 
Amplifier 
K 
—
*
• 
Actuator 
and 
valve 
1 
j + 0.4 
0.5 
5 + 0.f 
—
*
• 
Chemical 
heat 
process 
0.7 
s2+ Us + 0.25 
temperature 
Temperature sensor 
FIGURE P9.12 
Chemical process temperature control system 
Gg(s) = 
G,(s) = 
1 
0.2s 
1 
is the governor's transfer function 
is the turbine transfer function 
0.5s + 1 
G,„(s) = — 
— represents the machine and load 
10s + 0.8 t m n s f e r functions 
Gc(s) is the LFC compensation to be designed 
a. Assuming Gc(s) = K, find the value of K that will 
result in a dominant pole with £ = 0.7. Obtain the 
corresponding Ts. 
b. Design a PID controller to obtain the same 
damping factor as in Part a, but with a settling 
time of 2 seconds and zero steady-state error to 
step input commands. 
c. Verify your results using a 
MA.LAB 
MATLAB simuation. 
47. Repeat Problem 46 using a lag-lead compensator 
instead of a PID controller. Design for a steady-
state error of 1% for a step input command. 
48. Digital versatile disc (DVD) players incorporate 
several control systems for their operations. The 
control tasks include (1) keeping the laser beam 
focused on the disc surface, (2) fast track selection, 
(3) disc rotation speed control, and (4) following a 
track accurately. In order to follow a track, the 
pickup-head radial position is controlled via a volt-
age that operates a voice coil embedded in a magnet 
configuration. For a specific DVD player, the trans-
fer function is given by 
Vis) 
0.63 
0.36 ;s + 
305.4 
305.4' 
, 
0.04 
248.2 
248.22 
where x{t) = radial pickup position and v{t) = the 
coil input voltage (Bittanti, 2002). 
a. Assume that the system will be controlled in a 
closed-loop configuration, such as the one shown 
in Figure P9.1. Assuming that the plant, P(s), is 
cascaded with a proportional compensator, 
Gc(s) = K, plot the root locus of the system. 
b. Repeat Part a using MATLAB if 
J^JiJL 
your root locus plot was ere- ^j^^P 
ated by any other tool. 
c. Find the range of K for closed-loop stability, the 
resulting damping factor range, and the smallest 
settling time. 
d. Design a notch filter compensator so that the sys-
tem's dominant poles have a damping factor of f = 
0.7 with a closed-loop settling time of 0.1 second. 
e. Simulate the system's step 
MATLAB 
r e s p o n s e f o r P a r t c u s i n g 
flEd^P 
MATLAB. 
f. Add a PI compensator to the system to achieve 
zero steady-state error for a step input without 
appreciably affecting the transient response 
achieved in Part b. 
g. Simulate the system's step 
^ ^ ! L 
response for Part e using 
^^j^P 
MATLAB. 
49. A coordinate measuring machine (CMM) measures 
coordinates on three-dimensional objects. The ac-
curacy of CMMs is affected by temperature changes 
as well as by mechanical resonances due to joint 
elasticity. These resonances are more pronounced 
when the machine has to go over abrupt changes of 
dimension, such as sharp corners at high speed. 
Each of the machine links can be controlled in a 
closed-loop configuration, such as the one shown in 

5 2 6 
Chapter 9 
Design via Root Locus 
Compensator 
Xrcl (v) + 
Plant 
574.98 
5(52 + 14.24.5 + 3447.91) 
A'(.s) 
Tachometer generator 
0.04665(52+1.155 + 0.33) •* 
FIGURE P9.13 
Figure P9.13 for a specific machine with prismatic 
(sliding) links. In the figure, Xref(.s) is the com-
manded position and X(s) is the actual position. 
The minor loop uses a tachometer generator to 
obtain the joint speed, while the main loop controls 
the joint's position (Ozel, 2003). 
a. Find the value of K that will result in a minor 
loop with £ = 0.5. 
b. Use a notch filter compensator, Gc(s), for the 
external loop so that it results in a closed-loop 
damping factor of f = 0.7 with Ts « 4 seconds. 
c. Use MATLAB to simulate the 
^ARAB 
compensated system's closed- 
( d ^ P 
loop step response. 
50. Magnetic levitation systems are now used to elevate 
and propel trains along tracks. A diagram of a 
demonstration magnetic levitation system is shown 
in Figure P9.14(a). Action between a permanent 
magnet attached to the Ping-Pong ball, the object to 
be levitated, and an electromagnet provides the lift. 
The amount of elevation can be controlled through 
Va applied to the electromagnet as shown in Figure 
P9.14(a). The elevation is controlled by using a 
photo-detector pair to detect the elevation of the 
Ping-Pong ball. Assume that the elevation control 
system is represented by Figure P9.14(b) and do the 
following (Cho, 1993): 
a. Design a compensator, Gc(s), to yield a settling 
time of 0.1 second or less if the step response is to 
have no more than 1% overshoot. Specify the 
compensator's poles, zeros, and gain. 
b. Cascade another compensator to minimize the 
steady-state error and have the total settling time 
Electromagnet 
Photo j * 
emitter B?T / \ * . 
1 v0 
Amplifier 
circuit 
Photodetector 
Analog 
I/O 
board 
Control 
computer 
V 
" Permanent magnet 
>v Ping-Pong ball 
wvwwwvw 
Datum line 
(a) 
FIGURE P9.14 
a. Magnetic levitation system ( © 1993 IEEE); (figure 
continues) 

Problems 
527 
Stated M 
10 
Compensator 
Plant 
- - 1 
GM 
V,(.s 
Vjsi 
10s 
(s2-4551)(.v + 286) 
%a . . ! < • * > 
Photocell 
(*) 
FIGURE P9.14 
(Continued) b. block diagram 
not exceed 0.5 second. This compensator should 
not appreciably affect the transient response 
designed in Part a. Specify the poles and zeros 
of this compensator. 
c. Use MATLAB or any other computer JJ^JiJL 
program to simulate the system ^Kul^P 
to check your design. 
51. The transfer function for an AFTI/F-16 aircraft 
relating angle of attack, a(t), to elevator deflection, 
8e(t), is given by 
G(s) = a(s) 
= 0.072 
(s + 23){s2 + 0.05s + 0.04) 
(s - 0.7)(^ + 1.7)(J2 + 0.085 + 0.04) 
Assume the block diagram shown in Figure P9.15 
for controlling the angle of attack, a, and do the 
following (Monahemi, 1992): 
a. Find the range of K for stability. 
b. Plot or sketch a root locus. 
c. Design a cascade compensator to yield zero 
steady-state error, a settling time of about 0.05 
second, and a percent overshoot not greater than 
20%. 
d. Use MATLAB or any other computer 
MATLAB 
program to simulate the system 
to check your design. 
Commanded 
angle erf 
attack 
a,is) 
+xr 
Controller 
K 
Aircraft 
G{s) 
Actual 
angle of 
attack 
a(.v) 
FIGURE P9.15 Simplified block diagram for angle of attack 
control 
52. Figure P9.16 is a simplified block diagram of a self-
guiding vehicle's bearing angle control. Design a 
lead compensator to yield a closed-loop step re-
sponse with 10% overshoot and a settling time of 1.5 
seconds. 
53. An X-4 quadrotor flyer is designed as a small-sized 
unmanned autonomous vehicle (UAV) that flies 
mainly indoors and can help in search and recogni-
zance missions. To minimize mechanical problems 
and for simplicity, this aircraft uses fixed pitch rotors 
with specially designed blades. Therefore, for thrust 
it is necessary to add a fifth propeller. A simplified 
design of the thrust control design can be modeled 
Desired 
bearing angle £6^ -
, 
Controller 
K 
—*-
Steering 
50 
v2+10s + 50 
Vehicle 
dynamics 
1 
s(s + 5) 
Actual 
bearing angle 
FIGURE P9.16 Simplified block diagram of a self-guiding vehicle's bearing angle control 

528 
Chapter 9 
Design via Root Locus 
as in Figure 9.1 with G(s) = Gc(s)P(s) where 
represents the dynamics of the thruster rotor gain, 
the motor, and the battery dynamics. Initially, the 
system is designed using a proportional compensa-
tor given by Gc(s) = 3 (Pounds, 2009). 
a. Calculate the resulting steady-state error for a 
unit step input. 
b. Design a lag compensator to yield half the 
steady-state error of the proportional compensa-
tor, without appreciably affecting the system's 
transient response. 
c. Use MATLAB to simulate the 
JiStiL 
original design and the 
^j^^P 
lag compensated design. Verify your 
results . 
54. Problem 8.56 described an ac/dc conversion and 
power distribution system for which droop control 
is implemented through the use of a proportional 
controller to stabilize the dc-bus voltage. For sim-
plification, a system with only one source converter 
and one load converter was considered. The param-
eters and design considerations presented in that 
problem, along with some solution results, allow us 
to represent the block-diagram of that system as 
shown in the Figure P9.17. 
y./.-ww^' + Q 
/ f' ( < lJ C (J/'",,,'f'> 
125(*2+1225s+ 2530000) 
'*''» 
i f 
C' 
(J
3 +1225s2 + 5030000* + 62500000) 
//(.0 
V'*-'/'(-v) I 200 I 
« + 200 
FIGURE P9.17 
Here Gc(s) is the transfer function of the controller, 
Gp(s) represents the forward path of the controlled 
plant (a conversion and power distribution unit), 
and if(s) is the transfer function of the feedback 
low-pass filter (Karlsson, 2003). 
Prepare a table, such as Table 9.5, where the 
first column, headed Uncompensated, is filled in 
with your results from the proportional design of 
Problem 
8.56, 
assuming 
an 
input 
step, 
Vdc-ref{t) = 750 ll(t). 
Follow Steps 2-8 as described in Section 9.4 
(Example 9.5), to design a proportional-plus-
integral-plus-derivative (PID) controller so that the 
system can operate with a percent overshoot <4.4 %, 
a peak time 20% smaller than that of the un-
compensated system, and zero steady-state error, 
eystep(oc) = 0. Fill in the remaining two columns of 
your table, PD-compensated and PID-compensated. 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
55. High-speed rail pantograph. Problem 21 in Chap-
ter 1 discusses the active control of a pantograph 
mechanism for high-speed rail systems. In Problem 
79(Z>), Chapter 5, you found the block diagram for 
the active pantograph control system. In Chapter 8, 
Problem 72, you designed the gain to yield a closed-
loop step response with 38% overshoot. A plot of 
the step response should have shown a settling time 
greater than 0.5 second as well as a high-frequency 
oscillation superimposed over the step response 
(O'Conner, 1997). We want to reduce the settling 
time to about 0.3 second, reduce the step response 
steady-state error to zero, and eliminate the high-
frequency oscillation. Away of eliminating the high-
frequency oscillation is to cascade a notch filter with 
the plant. Using the notch filter, 
^ , x 
s2 + 16s + 9200 
Gn(s) = 
=— 
(5 + 60)2 
do the following: 
a. Design a PD controller to yield a settling time of 
approximately 0.3 second with no more then 
60% overshoot. 
b. Add a PI controller to yield zero steady-state 
error for step inputs. 
c. Use MATLAB t o p l o t t h e PID/ 
^ S J i L 
notch-compensated c l o s e d - 
ViiISP 
loop s t e p r e s p o n s e . 
56. Control of HIV/AIDS. It was shown in Chapter 6, 
Problem 68, that when the virus levels in an HIV/ 
AIDS patient are controlled using RTIs the linear-
ized plant model is 
_ Y{s) _ 
-520s - 10.3844 
^ ~ This) ~ s3 + 2.6817^2 + 0.11s + 0.0126 

Problems 
529 
Assume that the system is embedded in a configu-
ration, such as the one shown in Figure P9.1, where 
G(s) = Gc(s) P(s). Here, Gc(s) is a cascade compen-
sator. For simplicity in this problem, choose the dc 
gain of Gc(s) less than zero to obtain a negative-
feedback system (the negative signs of Gc(s) and 
P(s) cancel out) (Craig, I. K., 2004). 
a. Consider the uncompensated 
system 
with 
Gc(s) = -K. Find the value of K that will place 
all closed-loop poles on the real axis. 
b. Use MATLAB to simulate the unit MATLAB 
step response of the gain-corn- ^jjJJB 
pensated system. Note the %OS and the Ts 
from the simulation. 
c. Design a PI compensator so that the steady-state 
error for step inputs is zero. Choose a gain value 
to make all poles real. 
d. UseMATLAB to simulate the design ^ R A B 
in Part c for a unit step input. 
C L I ^ P 
Compare the simulation t o Part b . 
57. Hybrid vehicle. In the previous chapter, we used 
the root locus to design a proportional controller 
for the speed control of an HEV. We rearranged 
the block diagram to be a unity feedback system, 
as shown in the block diagram of Figure P7.34 
(Preitl, 2007). The plant and compensator re-
sulted in 
G(s) = 
K{s + 0.60) 
[5 + 0.5858)(5 + 0.0163) 
and we found that ^ = 0 . 7 8 resulted in a critically 
damped system. 
a. Use this design to itemize the performance 
specifications by filling in a table, similar to 
Table 9.5, under the column 
Uncompensated. 
Take advantage of the results from Chapter 8 
or use MATLAB to find the entries. Plot c{t) 
for r ( 0 = 4 u{t) volts. 
b. Now assume t h a t t h e system 
J^12^ 
s p e c i f i c a t i o n s 
r e q u i r e 
( d ^ P 
zero 
s t e a d y - s t a t e 
e r r o r 
for 
s t e p 
i n p u t s , a s t e a d y - s t a t e e r r o r for ramp 
inputs < 2 %, a %OS < 4 . 32%, anda s e t t l i n g 
time 
<4 
s e c . 
I t 
should be 
evident 
t h a t t h i s i s not accomplishedwith a p r o -
p o r t i o n a l c o n t r o l l e r . Thus, s t a r t by 
designing a PI c o n t r o l l e r t o meet the 
requirements. 
If necessary add a PD 
mode t o get a PID c o n t r o l l e r . Simulate 
your f i n a l design using MATLAB. F i l l in 
t h e r e s u l t s of t h i s design in t h e second 
column of your t a b l e with t h e heading 
Compensated. 
c. Now note the following limitations of linear 
control system modeling: 
(1) No limit is set on system variables. For 
example, vehicle acceleration as well as mo-
tor and power amplifier current, torque or 
power do not have upper limits. 
(2) It is assumed that to improve the speed of 
response in Part b, we could place the PI 
controller's zero on top of the pole closest 
to the origin. Realistically, such pole-zero 
cancellation is not always possible to 
maintain. 
If you do not expand your 
Simulink 
model beyond the described 
W 
limitations if required for accu-
racy, unrealistic response charac-
teristics, such as rise and settling 
times could result. Look at your 
design results including response 
curves. Are they realistic? If not, 
revise your Simulink model,which 
you developed for Problem 5.81,as 
follows: 
i. Represent the motor armature as a 
first-order system with a unity 
steady-state gain and a time con-
stant of 50 ms,which avoids the 
creation of internal algebraic 
closed-loops and shouldhavenegli-
gible effect on system response; 
ii. Add a saturation element at the out-
put of the motor armature and set it 
to an upper limit of 250 A/ 
iii. Use the following PI settings . The 
PI settings of the speed controller 
are P = 61 and 1 = 0.795. The PI set-
tings of the torque controller are 
P=10 and 1 = 6; 
iv. Run the modified model and comment 
on the graphs obtained for motor 
current, car acceleration, and 
speed. 

530 
Chapter 9 
Design via Root Locus 
Experiment 9.1 
Objectives To perform a trade-off study for lead compensation. To design a PI 
controller and see its effect upon steady-state error. 
Minimum Required Software Packages MATLAB, and the Control Sys-
tem Toolbox 
Prelab 
1. How many lead compensator designs will meet the transient response specifica-
tions of a system? 
2. What differences do the lead compensators of Prelab 1 make? 
3. Design a lead compensator for a unity negative feedback system with a forward 
transfer function of G(s) = — 
— to meet the following specifications: 
v ' 
s(s + 3)(s + 6) 
5 
F 
percent overshoot = 20%; settling time = 2 seconds. Specify the required gain, 
K. Estimate the validity of the second-order approximation. 
4. What is the total angular contribution of the lead compensator of Prelab 3? 
5. Determine the pole and zero of two more lead compensators that will meet the 
requirements of Prelab 3. 
6. What is the expected steady-state error for a step input for each of the lead-
compensated systems? 
7. What is the expected steady-state error for a ramp input for each of the lead-
compensated systems? 
8. Select one of the lead compensator designs and specify a PI controller that can be 
cascaded with the lead compensator that will produce a system with zero steady-
state error for both step and ramp inputs. 
Lab 
1. Using the SISO Design Tool, create the design in Prelab 3 and plot the root locus, 
step response, and ramp response. Take data to determine the percent overshoot, 
settling time, and step and ramp steady-state errors. Record the gain, K. 
2. Repeat Lab 1 for each of the designs in Prelab 5. 
3. For the design selected in Prelab 8, use the SISO Design Tool and insert the PI 
controller. Plot the step response and measure the percent overshoot, settling 
time, and steady-state error. Also, plot the ramp response for the design and 
measure the steady-state error. 
4. Plot the step and ramp responses for two more values of the PI controller zero. 
Postlab 
1. Make a table showing calculated and actual values for percent overshoot, settling 
time, gain, K, steady-state error for step inputs, and steady-state error for ramp 
inputs. Use the three systems without the PI controller and the single system with 
the PI controller from Lab 3. 
2. Itemize the benefits of each system without the PI controller. 
3. Choose a final design and discuss the reasons for your choice. 

Bibliography 
Experiment 9.2 
Objective 
To design a PID controller via Lab VIEW 
Minimum Required Software Packages 
Lab VIEW with the Control De-
sign and Simulation Module 
Prelab 
1. Perform Cyber Exploration Laboratory Experiment 8.3. 
2. Use the system described in Cyber Exploration Laboratory Experiment 8.3 and 
replace the controller described there, Gc(s) = KDS + Kp, with a PID controller. 
3. Design the controller to meet the following requirements: (1) shorten the settling 
time found in the design of Cyber Exploration Laboratory Experiment 8.3 to less 
than 1 sec, and (2) limit the percent overshoot to no more than 5%. 
4. Design a Lab VIEW VI to test your design. The front panel inputs will be the PID 
gains and the numerator and denominator of the plant. The indicators will be the 
transfer functions of the plant, PID controller, and closed-loop system. Finally, 
provide an indicator for the step-response graph. 
Lab 
Run your LabVIEW VI and obtain the step response of the closed-loop 
system. 
Postlab 
Compare the transient and steady-state error performance between the 
closed-loop step responses of Cyber Exploration Laboratory Experiment 8.3 and 
this experiment. 
^ Bibliography^ 
Bittanti, S., Dell'Orto, R, Di Carlo, A., and Savaresi, S. M. Notch Filtering and Multirate 
Control for Radial Tracking in High Speed DVD-Players. IEEE Transactions on Consumer 
Electronics, vol. 48, 2002, pp. 56-62. 
Budak, A. Passive and Active Network Analysis and Synthesis. Houghton Mifflin, Boston, 
MA, 1974. 
Cho, D., Kato, Y., and Spilman, D. Sliding Mode and Classical Controllers in Magnetic 
Levitation Systems. IEEE Control Systems, February 1993, pp. 42-48. 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004. pp. 65-73. 
Craig, J. J. Introduction to Robotics. Mechanics and Control, 3d ed. Prentice Hall, Upper 
Saddle River, NJ, 2005. 
DAzzo, J. J., and Houpis, C. H. Feedback Control System Analysis and Synthesis, 2d ed. 
McGraw-Hill, New York, 1966. 
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989. 
Hostetter, G. H., Savant, C. X, Jr., and Stefani, R. T. Design of Feedback Control Systems, 
2d ed. Saunders College Publishing, New York, 1989. 
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL 
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980. 
Karlsson, P., and Svensson, J. DC Bus Voltage Control for a Distributed Power System, IEEE 
Trans, on Power Electronics, vol. 18, no. 6, 2003, pp. 1405-1412. 

532 
Chapter 9 
Design via Root Locus 
Khodabakhshian, A., and Golbon, N. Design of a New Load Frequency PID Controller Using 
QFT. Proceedings of the 13th Mediterranean Conference on Control and Automation, 2005, 
pp. 970-975. 
Kuo, B. C. Automatic Control Systems, 7th ed. Prentice Hall, Upper Saddle River, NJ, 1995. 
Monahemi, M. M., Barlow, J. B., and O'Leary, D. P. Design of Reduced-Order Observers with 
Precise Loop Transfer Recovery. Journal of Guidance, Control, and Dynamics, vol. 15, no. 6, 
November-December 1992, pp. 1320-1326. 
O'Connor, D. N., Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Ozel, T. Precision Tracking Control of a Horizontal Arm Coordinate Measuring Machine. 
Proceedings of the IEEE Conference on Control Applications, 2003, pp. 103-108. 
Pounds, P. E. I., Mahony, R. E., and Corke, P. L; Design of a Static Thruster for Microair 
Vehicle Rotorcraft. Journal of Aerospace Engineering, vol. 22, no. 1, 2009, pp. 85-94. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE. 2007. 
Romagnoli, J. A., and Palazoglu, A. Introduction to Process Control. CRC Press, Boca Raton, 
FL, 2006. 
Smith, C. A. Automated Continuous Process Control. Wiley, New York, 2002. 
Thomas, B., Soleimani-Mosheni, M., and Fahlen, P. Feed-forward in Temperature Control of 
Buildings. Energy and Buildings, vol. 37, 2005, pp. 755-761. 
Van de Vegte, X Feedback Control Systems, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 

Frequency Response Tech 
^ Chapter Learning Outcomes^ 
After completing this chapter the student will be able to: 
• Define and plot the frequency response of a system (Section 10.1) 
• Plot asymptotic approximations to the frequency response of a system (Section 10.2) 
• Sketch a Nyquist diagram (Section 10.3-10.4) 
• Use the Nyquist criterion to determine the stability of a system (Section 10.5) 
• Find stability and gain and phase margins using Nyquist diagrams and Bode plots 
(Sections 10.6-10.7) 
• Find the bandwidth, peak magnitude, and peak frequency of a closed-loop fre-
quency response given the closed-loop time response parameters of peak time, 
settling time, and percent overshoot (Section 10.8) 
• Find the closed-loop frequency response given the open-loop frequency response 
(Section 10.9) 
• Find the closed-loop time response parameters of peak time, settling time, and 
percent overshoot given the open-loop frequency response (Section 10.10) 
^Case Study Learning Outcomes J 
You will be able to demonstrate your knowledge of the chapter objectives with a case 
study as follows: 
• Given the antenna azimuth position control system shown on the front endpapers 
and using frequency response methods, you will be able to find the range of gain, K, 
533 

534 
Chapter 10 
Frequency Response Techniques 
for stability. You will also be able to find percent overshoot, settling time, peak time, 
and rise time, given K. 
( 10.1 Introduction 
The root locus method for transient design, steady-state design, and stability was 
covered in Chapters 8 and 9. In Chapter 8, we covered the simple case of design 
through gain adjustment, where a trade-off was made between a desired transient 
response and a desired steady-state error. In Chapter 9, the need for this trade-off 
was eliminated by using compensation networks so that transient and steady-state 
errors could be separately specified and designed. Further, a desired transient 
response no longer had to be on the original system's root locus. 
This chapter and Chapter 11 present the design of feedback control systems 
through gain adjustment and compensation networks from another perspective— 
that of frequency response. The results of frequency response compensation tech-
niques are not new or different from the results of root locus techniques. 
Frequency response methods, developed by Nyquist and Bode in the 1930s, are 
older than the root locus method, which was discovered by Evans in 1948 (Nyquist, 
1932; Bode, 1945). The older method, which is covered in this chapter, is not as 
intuitive as the root locus. However, frequency response yields a new vantage point 
from which to view feedback control systems. This technique has distinct advantages 
in the following situations: 
1. When modeling transfer functions from physical data, as shown in Figure 10.1 
2. When designing lead compensators to meet a steady-state error requirement and 
a transient response requirement 
3. When finding the stability of nonlinear systems 
4. In settling ambiguities when sketching a root locus 
FIGURE 10.1 National 
Instruments PXI, Compact 
RIO, Compact DAQ, and USB 
hardware plantforms (shown 
from left to right) couple with 
NI Lab VIEW software to 
provide stimulus and acquire 
signals from physical systems. 
NI Lab VIEW can then be used 
to analyze data, determine the 
mathematical model, and 
prototype and deploy a 
controller for the 
physical system (Courtesy National 
Instruments ©2010). 

10.1 Introduction 
535 
We first discuss the concept of frequency response, define frequency response, 
derive analytical expressions for the frequency response, plot the frequency re-
sponse, develop ways of sketching the frequency response, and then apply the 
concept to control system analysis and design. 
The Concept of Frequency Response 
In the steady state, sinusoidal inputs to a linear system generate sinusoidal responses 
of the same frequency. Even though these responses are of the same frequency as the 
input, they differ in amplitude and phase angle from the input. These differences are 
functions of frequency. 
Before defining frequency response, let us look at a convenient representation 
of sinusoids. Sinusoids can be represented as complex numbers called phasors. The 
magnitude of the complex number is the amplitude of the sinusoid, and the angle of 
the complex number is the phase angle of the sinusoid. Thus, M\ cos (tot + ¢{) can be 
represented as MiZ0j where the frequency, &>, is implicit. 
Since a system causes both the amplitude and phase angle of the input to be 
changed, we can think of the system itself as represented by a complex number, 
defined so that the product of the input phasor and the system function yields the 
phasor representation of the output. 
Consider the mechanical system of Figure 10.2(a). If the input force, /(7), is 
sinusoidal, the steady-state output response, x(t), of the system is also sinusoidal and at 
the same frequency as the input. In Figure 10.2(6) the input and output sinusoids are 
represented by complex numbers, or phasors, Mi(to)Z^ (to) and M0 (to)Ztj)0 (to), respec-
tively. Here the M's are the amplitudes of the sinusoids, and the 0's are the phase angles 
Spring 
x (r) =M0 cos(co + 0„) 
Mass 
•J[t) = Mj COS((OM- 0,) 
Viscous damper 
la) 
Mj&Zijft 
MifQ)/.<p{a>) MM^M 
(b) 
*» t 
Output 
FIGURE 10.2 
Sinusoidal 
frequency response: a. system; 
b. transfer function; c. input and 
output waveforms 

Chapter 10 
Frequency Response Techniques 
of the sinusoids as shown in Figure 10.2(c). Assume that the system is represented by the 
complex number, M(w)Z0(a>). The output steady-state sinusoid is found by multiplying 
the complex number representation of the input by the complex number representation 
of the system. Thus, the steady-state output sinusoid is 
M0(co)Zfa{co) = Mi(co)M(a>)Z[Pi{a>) + #(<*>)] 
(10.1) 
From Eq. (10.1) we see that the system function is given by 
and 
¢(0)) = ^(0))-^(0)) 
(10.3) 
Equations (10.2) and (10.3) form our definition of frequency response. We call M(o)) 
the magnitude frequency response and ¢(0)) the phase frequency response. The 
combination of the magnitude and phase frequency responses is called the frequency 
response and is M(a>)Z0(a>). 
In other words, we define the magnitude frequency response to be the ratio of 
the output sinusoid's magnitude to the input sinusoid's magnitude. We define the 
phase response to be the difference in phase angle between the output and the input 
sinusoids. Both responses are a function of frequency and apply only to the steady-
state sinusoidal response of the system. 
Analytical Expressions for Frequency Response 
Now that we have defined frequency response, let us obtain the analytical expression 
for it (Nilsson, 1990). Later in the chapter, we will use this analytical expression to 
determine stability, transient response, and steady-state error. Figure 10.3 shows a 
system, G(s), with the Laplace transform of a general sinusoid, r(t) = A cos o)t 4-
B sin cot = V A2 + B2 cos [o)t - tan- ] (B/A)] as the input. We can represent the input 
as a phasor in three ways: (1) in polar form, MjZfa, where M,- = y A2 + B2 
and 0, = -tan~ 1 (B/A); (2) in rectangular form, A — jB; and (3) using Euler's 
formula, M/e^'. 
We now solve for the forced response portion of C(s), from which we evaluate 
the frequency response. From Figure 10.3, 
_. 
As + Be* -,. . 
Mn ., 
c<*> = ( ? w j G ( s ) 
(10'4) 
We separate the forced solution from the transient solution by performing a partial-
fraction expansion on Eq. (10.4). Thus, 
C(,)=, 
ASlB<0.,G(s) 
<*+**-/«) 
(105) 
K 
K 
= 
—I 
— + Partial fraction terms from G(s) 
S + JO) 
S — ]0) 

10.1 
Introduction 
537 
where 
As + Ba, 
S-jCO 
K2=A± 
+ Ba> 
= -(A +jB)G(-ja>) = -Mie-faMce-if* 
*-*-& 
2 
2 
(10.6a) 
_MJMG 
iiMa) 
" 
2 
s+yw 
S—>+j(t) 
= i (A - jB)G(jco) = -Miet&Mae^*3 
(10.6b) 
For Eqs. (10.6), 2£| is the complex conjugate of j&j,, 
MG = |G(/w)| 
0G = angle of G(/W) 
(10.7) 
(10.8) 
The steady-state response is that portion of the partial-fraction expansion that 
comes from the input waveform's poles, or just the first two terms of Eq. (10.5). 
Hence, the sinusoidal steady-state output, Css(s), is 
s + jco s — jco 
Substituting Eqs. (10.6) into Eq. (10.9), we obtain 
(10.9) 
MiMG 
f(Mn) 
MjMG^^n) 
CWW = 
__ 
2 
+ 
S + JCO 
S — JO) 
Taking the inverse Laplace transformation, we obtain 
'p-i{ut+4>i+4>G) 4- pJ(a)l+'i>i+<t>G) 
c(t)=MiMG' 
(10.10) 
(10.11) 
= M-MG COS (cot + ¢1 + <f>G) 
which can be represented in phasor form as M0/.<j)0 = (MIZ0 1)(MG/0G)» where 
MG^QG 
ls t n e frequency response function. But from Eqs. (10.7) and (10.8), 
MG^4>G = G(jco). In other words, the frequency response of a system whose transfer 
function is G(s) is 
G(jco) = G(s)\ 
S-*]CO 
(10.12) 
Plotting Frequency Response 
G(jco) = MG{W) < 0G(W) c a n De plotted in several ways; two of them are (1) as a 
function of frequency, with separate magnitude and phase plots; and (2) as a polar plot, 
where the phasor length is the magnitude and the phasor angle is the phase. When 
plotting separate magnitude and phase plots, the magnitude curve can be plotted in 

538 
Chapter 10 
Frequency Response Techniques 
decibels (dB) vs. logw, where dB = 20 log M.1 The phase curve is plotted as phase 
angle vs. log co. The motivation for these plots is shown in Section 10.2. 
Using the concepts covered in Section 8.1, data for the plots also can be 
obtained using vectors on the s-plane drawn from the poles and zeros of G{s) to the 
imaginary axis. Here the magnitude response at a particular frequency is the product 
of the vector lengths from the zeros of G(s) divided by the product of the vector 
lengths from the poles of G(s) drawn to points on the imaginary axis. The phase 
response is the sum of the angles from the zeros of G(s) minus the sum of the angles 
from the poles of G(s) drawn to points on the imaginary axis. Performing this 
operation for successive points along the imaginary axis yields the data for the 
frequency response. Remember, each point is equivalent to substituting that point, 
s = jcoi, into G(s) and evaluating its value. 
The plots also can be made from a computer program that calculates the frequency 
response. For example, the root locus program discussed in Appendix H at www.wiley. 
com/college/nise can be used with test points that are on the imaginary axis. The 
calculated K value at each frequency is the reciprocal of the scaled magnitude response, 
and the calculated angle is, directly, the phase angle response at that frequency. 
The following example demonstrates how to obtain an analytical expression 
for frequency response and make a plot of the result. 
Frequency Response from The Transfer Function 
PROBLEM: Find the analytical expression for the magnitude frequency response 
and the phase frequency response for a system G(s) = l/(s + 2). Also, plot both the 
separate magnitude and phase diagrams and the polar plot. 
-6 
-12 
1° ~24 
o 
N 
-30 
-36 
-42 
0.1 
1 
10 
100 
Frequency (rad/s) 
0 
-10 
~ -20 
1 -30 
$? -40 
f 
-50 
| 
-60 
* -70 
-80 
-90 
0.1 
1 
10 
100 
Frequency (rad/s) 
FIGURE 10.4 Frequency response plots for G(s) = l/(s + 2): separate magnitude and phase 
diagrams. 
-"v v 
\ 
s s 
'Throughout this book, "log" is used to mean logio, or logarithm to the base 10. 

10.1 Introduction 
SOLUTION: First substitute s = jco in the system function and obtain 
G(jeo) = I/(jco + 2) = (2 — jco)/(o)2 + 4). The magnitude of this complex number, 
\G(ja>)\ — M(co) = 1/yj(a)2 +4), is the magnitude frequency response. The phase 
angle of G(jco), ¢(0)) = —tan" 1(co/2), is the phase frequency response. 
G(jco) can be plotted in two ways: (1) in separate magnitude and phase plots 
and (2) in a polar plot. Figure 10.4 shows separate magnitude and phase diagrams, 
where the magnitude diagram is 20 log M(co) = 20 log (1/Vco2 + 4) vs. logco, 
and the phase diagram is ¢(0)) = —tan-: (co/2) vs. log co. The polar plot, shown in 
Figure 10.5, is a plot of M(a>) < 0(o>) = \fy/a?- + 4 < -\ssrx{mJ2) for different co. 
Re G 
(0= 
03 = 
1 
1 
1 
1 
1 
1 
1 
' 
1- 
\ 
ft 
0r/s 
0 oor/s 0.05 
0.1 
0.15 
0.2 
0.25 
0.3 
0.35 
0.4 
0.45 
0.5 
Note: r/s = rad/s 
FIGURE 10.5 Frequency response plot for G(s) = l/(s + 2): polar plot 
In the previous example, we plotted the separate magnitude and phase re-
sponses, as well as the polar plot, using the mathematical expression for the frequency 
response. Either of these frequency response presentations can also be obtained from 
the other. You should practice this conversion by looking at Figure 10.4 and obtaining 
Figure 10.5 using successive points. For example, at a frequency of 1 rad/s in Fig-
ure 10.4, the magnitude is approximately -7 dB, or 10_7/,2° = 0.447. The phase plot at 
1 rad/s tells us that the phase is about —26°. Thus, on the polar plot a point of radius 
0.447 at an angle of —26° is plotted and identified as 1 rad/s. Continuing in like manner 
for other frequencies in Figure 10.4, you can obtain Figure 10.5. 
Similarly, Figure 10.4 can be obtained from Figure 10.5 by selecting a sequence 
of points in Figure 10.5 and translating them to separate magnitude and phase values. 
For example, drawing a vector from the origin to the point at 2 rad/s in Figure 10.5, 
we see that the magnitude is 20 log 0.35 = —9.12dB and the phase angle is about 
-45°. The magnitude and phase angle are then plotted at 2 rad/s in Figure 10.4 on the 
separate magnitude and phase curves. 
PROBLEM: 
a. Find analytical expressions for the magnitude and phase responses of 
G{S) 
= (s + 2)(s + 4) 

540 
Chapter 10 
Frequency Response Techniques 
b. Make plots of the log-magnitude and the phase, using log-frequency in rad/s 
as the ordinate. 
c. Make a polar plot of the frequency response. 
ANSWERS: 
a. M(co) = 
for co < VS : $(co) = -arctanf 
~), for 
, fa _™a\2 4-(6,^2 
\$-co2J 
CO > V8 : 0(eo) = -
(8 - co2y + (6a>) 
( 6co 
% + arctan -
b. See the answer at www.wiley.com/college/nise. 
c. See the answer at www.wiley.com/college/nise. 
The complete solution is at www.wiley.com/college/nise. 
In this section, we defined frequency response and saw how to obtain an 
analytical expression for the frequency response of a system simply by substituting 
s =jco into G(s). We also saw how to make a plot of G(Jco). The next section shows 
how to approximate the magnitude and phase plots in order to sketch them 
rapidly. 
£ 10.2 Asymptotic Approximations: Bode Plots 
The log-magnitude and phase frequency response curves as functions of log co are 
called Bode plots or Bode diagrams. Sketching Bode plots can be simplified because 
they can be approximated as a sequence of straight lines. Straight-line approxima-
tions simplify the evaluation of the magnitude and phase frequency response. 
Consider the following transfer function: 
G(s) = g ( ' + *i)(' + *2)"-(* + gfc) 
( 1 ( n 3 ) 
sm(s + 
pl)(s+p2)---(s+ptt) 
The magnitude frequency response is the product of the magnitude frequency 
responses of each term, or 
\G(jco)\= *K, + *i)ll(J + *2)l--^ + ^)1 
l*1l(* + Pl)ll(* +P2)\"'\(3+Pn)\ 
(10.14) 
S—*)(J) 
Thus, if we know the magnitude response of each pole and zero term, we can find the 
total magnitude response. The process can be simplified by working with the 
logarithm of the magnitude since the zero terms' magnitude responses would be 
added and the pole terms' magnitude responses subtracted, rather than, respectively, 
multiplied or divided, to yield the logarithm of the total magnitude response. 
Converting the magnitude response into dB, we obtain 
201og|G0^)|=201og# + 201og|(s + Zi)|+201og|(s + Z2)| 
+ ----20^1^1-20^1(5+^)1----1,^ 

10.2 Asymptotic Approximations: Bode Plots 
Thus, if we knew the response of each term, the algebraic sum would yield the total 
response in dB. Further, if we could make an approximation of each term that would 
consist only of straight lines, graphical addition of terms would be greatly simplified. 
Before proceeding, let us look at the phase response. From Eq. (10.13), the 
phase frequency response is the sum of the phase frequency response curves of the 
zero terms minus the sum of the phase frequency response curves of the pole terms. 
Again, since the phase response is the sum of individual terms, straight-line 
approximations to these individual responses simplify graphical addition. 
Let us now show how to approximate the frequency response of simple pole 
and zero terms by straight-line approximations. Later we show how to combine these 
responses to sketch the frequency response of more complicated functions. In 
subsequent sections, after a discussion of the Nyquist stability criterion, we learn 
how to use the Bode plots for the analysis and design of stability and transient 
response. 
Bode Plots for G(s) = (s + a) 
Consider a function, G(s) = (s + a), for which we want to sketch separate logarith-
mic magnitude and phase response plots. Letting s = jco, we have 
G{j(o) = {jeo + a) = a(j- + l) 
(10.16) 
At low frequencies when co approaches zero, 
G(ja>) » a 
(10.17) 
The magnitude response in dB is 
20 log M = 20 log a 
(10.18) 
where M = \G(Jco)\ and is a constant. Eq. (10.18) is shown plotted in Figure 10.6(a) 
from co = 0.01a to a. 
At high frequencies where co > a, Eq. (10.16) becomes 
G(jco) « aO— j = a (-) Z 90° = coZ90° 
(10.19) 
The magnitude response in dB is 
20 log M = 20 log a + 20 log - = 20 log co 
(10.20) 
where a < co < oo. Notice from the middle term that the high-frequency approxi-
mation is equal to the low-frequency approximation when co = a, and increases 
for co > a. 
If we plot dB, 20 log M, against logco, Eq. (10.20) becomes a straight line: 
y = 20x 
(10.21) 
where y = 20 log M, and x = log co. The line has a slope of 20 when plotted as dB vs. 
logco. 
Since each doubling of frequency causes 20 log co to increase by 6 dB, the line 
rises at an equivalent slope of 6 dB/octave, where an octave is a doubling of 
frequency. This rise begins at co = a, where the low-frequency approximation equals 
the high-frequency approximation. 

542 
Chapter 10 
Frequency Response Techniques 
42+ 20 log a 
36+ 20 log a 
30+ 20 log a 
* 24 + 20 log a 
o 18 + 201oga 
12 + 201oga 
6 + 201oga 
20 log a 
/ 
ye 
Slope = 
— 
IK 
6 dB/octave 
20 dB/decade 
/ 
y' 
0.01« 
0.1a 
10a 
100a 
Frequency (rad/s) 
90 
75 
1 60 
3 45 
1 30 
0-. 
15 
0 
' 
Slope - 45°/decade 
0.01a 
0.1a 
a 
Frequency (rad/s) 
(b) 
FIGURE 10.6 Bode plots of (s + a): a. magnitude plot; b. phase plot 
I0a 
100a 
We call the straight-line approximations asymptotes. The low-frequency ap-
proximation is called the low-frequency asymptote, and the high-frequency approxi-
mation is called the high-frequency asymptote. The frequency, «, is called the break 
frequency because it is the break between the low- and the high-frequency 
asymptotes. 
Many times it is convenient to draw the line over a decade rather than an 
octave, where a decade is 10 times the initial frequency. Over one decade, 20 log a> 
increases by 20 dB. Thus, a slope of 6 dB/octave is equivalent to a slope of 20 dB/ 
decade. The plot is shown in Figure 10.6(A) from co = 0.01« to 100«. 
Let us now turn to the phase response, which can be drawn as follows. At the 
break frequency, a, Eq. (10.16) shows the phase to be 45°. At low frequencies, 
Eq. (10.17) shows that the phase is 0°. At high frequencies, Eq. (10.19) shows that the 
phase is 90°. To draw the curve, start one decade (1/10) below the break frequency, 
0.1«, with 0° phase, and draw a line of slope +45° /decade passing through 45° at the 
break frequency and continuing to 90° one decade above the break frequency, 10«. 
The resulting phase diagram is shown in Figure 10.6(6). 
It is often convenient to normalize the magnitude and scale the frequency so 
that the log-magnitude plot will be 0 dB at a break frequency of unity. Normalizing 
and scaling helps in the following applications: 
1. When comparing different first- or second-order frequency response plots, each 
plot will have the same low-frequency asymptote after normalization and the 
same break frequency after scaling. 

10.2 Asymptotic Approximations: Bode Plots 
2. When sketching the frequency response of a function such as Eq. (10.13), each 
factor in the numerator and denominator will have the same low-frequency 
asymptote after normalization. This common low-frequency asymptote makes it 
easier to add components to obtain the Bode plot. 
To normalize (s + a), we factor out the quantity a and form a[(s/a) + \]. The 
frequency is scaled by defining a new frequency variable, s\ = s/a. 
Then 
the magnitude is divided by the quantity a to yield 0 dB at the break frequency. 
Hence, the normalized and scaled function is (si -f 1). To obtain the original 
frequency response, the magnitude and frequency are multiplied by the quantity a. 
We now use the concepts of normalization and scaling to compare the asymptotic 
approximation to the actual magnitude and phase plot for (s + a). Table 10.1 shows the 
comparison for the normalized and scaled frequency response of (s + a). Notice that 
the actual magnitude curve is never greater than 3.01 dB from the asymptotes. This 
maximum difference occurs at the break frequency. The maximum difference for the 
phase curve is 5.71°, which occurs at the decades above and below the break frequency. 
For convenience, the data in Table 10.1 is plotted in Figures 10.7 and 10.8. 
We now find the Bode plots for other common transfer functions. 
TABLE 10.1 Asymptotic and actual normalized and scaled frequency response data 
for (s + a) 
^ H f ™y 
20 log ^(dB) 
Phase (degrees) 
a 
a 
(rad/s) 
0.01 
0.02 
0.04 
0.06 
0.08 
0.1 
0.2 
0.4 
0.6 
0.8 
1 
2 
4 
6 
8 
10 
20 
40 
60 
80 
100 
Asymptotic 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
6 
12 
15.56 
18 
20 
26.02 
32.04 
35.56 
38.06 
40 
Actual 
0.00 
0.00 
0.01 
0.02 
0.03 
0.04 
0.17 
0.64 
1.34 
2.15 
3.01 
6.99 
12.30 
15.68 
18.13 
20.04 
26.03 
32.04 
35.56 
38.06 
40.00 
Asymptotic 
0.00 
0.00 
0.00 
0.00 
0.00 
0.00 
13.55 
27.09 
35.02 
40.64 
45.00 
58.55 
72.09 
80.02 
85.64 
90.00 
90.00 
90.00 
90.00 
90.00 
90.00 
Actual 
0.57 
1.15 
2.29 
3.43 
4.57 
5.71 
11.31 
21.80 
30.96 
38.66 
45.00 
63.43 
75.96 
80.54 
82.87 
84.29 
87.14 
88.57 
89.05 
89.28 
89.43 

544 
Chapter 10 
Frequency Response Techniques 
20 
18 
14 
12 
"a io 
o 
<N 
g 
Actual 
y 
\
/
/ 
xx 
/ / 
' / 
/ 
N Asymptotic 
/ 
approximation 
0.1 
10 
Frequency 
a 
FIGURE 10.7 Asymptotic and actual normalized and scaled magnitude response of (s + a) 
90 
70 
60 
& 5 0 
40 
30 
20 
10 
A /y 
/ 
A 
'/ 
< 
^-
J 
/
* 
/ r 
/ 
" • Actual 
\ 
\ 
Asymptotic approximation 
0.01 
10 
100 
Frequency f r a d / s ) 
FIGURE 10.8 Asymptotic and actual normalized and scaled phase response of (5 + a) 
Bode Plots for G(s) - 1 / ( 5 + 0 ) 
Let us find the Bode plots for the transfer function 
G(s) = 
1 
1 
s + a 
a(S-+l 
(10.22) 

10.2 Asymptotic Approximations: Bode Plots 
545 
This function has a low-frequency asymptote of 20 log (1 /a), which is found by 
letting the frequency, s, approach zero. The Bode plot is constant until the break 
frequency, a rad/s, is reached. The plot is then approximated by the high-frequency 
asymptote found by letting s approach oo. Thus, at high frequencies 
1 
G(jco) = 
1 
« -
->]0) 
a 
= §Z - 90° = - Z - 90c 
_ 
co 
or, in dB, 
1 
201ogM = 20log - - 20log - = -201ogw 
a 
a 
(10.23) 
(10.24) 
Notice from the middle term that the high-frequency approximation equals the low-
frequency approximation when co = a, and decreases for co > a. This result is similar 
to Eq. (10.20), except the slope is negative rather than positive. The Bode log-
magnitude diagram will decrease at a rate of 20 dB/decade rather than increase at a 
rate of 20 dB/decade after the break frequency. 
The phase plot is the negative of the previous example since the function is the 
inverse. The phase begins at 0° and reaches -90° at high frequencies, going through 
-45° at the break frequency. Both the Bode normalized and scaled log-magnitude 
and phase plot are shown in Figure 10.9(d). 
Bode Plots for G(s)=s 
Our next function, G(s) = s, has only a high-frequency asymptote. Letting s = jco, 
the magnitude is 20 logo), which is the same as Eq. (10.20). Hence, the Bode 
magnitude plot is a straight line drawn with a +20 dB/decade slope passing through 
zero dB when co — \. The phase plot, which is a constant +90°, is shown with the 
magnitude plot in Figure 10.9(A). 
Bode Plots for G(s) = 1/5 
The frequency response of the inverse of the preceding function, G(s) = 1/s, is 
shown in Figure 10.9(b) and is a straight line with a -20 dB/decade slope passing 
through zero dB at co = 1. The Bode phase plot is equal to a constant —90°. 
We have covered four functions that have first-order polynomials in s in the 
numerator or denominator. Before proceeding to second-order polynomials, let us 
40 
^ 
20 
g> 
0 
5 
-20 
« 
-40 
1 1 1 III 
—--' 
4 — ,—-1 
•\ 
' 
• — 
1 III 
•• J 
+1 
0.01 
0.1 
1 
10 
Frequency (rad/s) 
s 
40 
M 
20 
S 
0 
8 "20 
-40 
100 
—j ~--.. 
-G(s)=: 
i 
[j| 
~- •-» -
1 lllllll 
-6 db/octave = 
-20 dB/decade 
— --
— •H 
Tffi 
0.01 
0.1 
1 
10 
Frequency (rad/s) 
100 
§ 
90 
| 
45 
3 
0 
| 
-45 
5 -90 
.G(s) 
III 
I 
\ i i mi 
|v 
1 ; 
| , 
l
 
:i 
|i' 
IN 
mi 
lii 
| | ; i 
I'-
ll 
Hi 
| ! ' i 
i: . 
| 
90 
g» 
45 
3 
0 
5¾ -45 
| 
-90 
am-
1 
1 
!| 
III 
1)1 
•j] 
1 
1 
'III 
III 
r 1 
llll 
llll II 
:l|l 
llll 
0.01 
0.1 
1 
10 
Frequency (rad/s) 
(a) 
100 
0.01 
0.1 
1 
Frequency (rad/s) 
m 
10 
100 
FIGURE 10.9 Normalized and 
scaled Bode plots for 
a. C(s) = s; 
b. G{s) = 1/s; 
(figure continues) 

546 
Chapter 10 
Frequency Response Techniques 
I 
40 
20 
0 
- 2 0 
- 4 0 
1 M M ! 
nil 
~rfj 
III 
1 I 
TTJj 
rr 
III 
• — - • -
-
_I_LUIJ1 
1 LI II 
0.01 
0.1 
1 
10 
100 
Frequency ( r a d / s ) 
a 
90 
45 
0 
- 4 5 
- 9 0 
i 11 nun 
. 
G(s) = (s + al-
ii 
r 
-
-1 
•I 
mm 
_ - — • -- -
+45°/aecad 
||| 
[1 
' 
B 
|i 
ijjl 
ill 
]i 
iil 
llll 
0.01 
0.1 
10 
100 
Frequency ( r a d / s ) 
a 
40 
20 
0 
-20 
-40 
1 
G ( J ) = T ^ 
(s+a> 
T|j 
|j| 
in 
III 
||| 
II 
llllllll 
1 II 
-6 dB/octave = 
•« - - -H4I 
1 
m 
0.01 
0.1 
1 
10 
100 
Frequency r r a H / ^ 
a 
90 
45 
0 
- 4 5 
-90 
G(s) = T-^-
(s+a) 
----JJ 
n ; jj 
llll 
fimi 111 
i 
i [i 
•
| 
1 ill 
0.01 
0.1 
10 
100 
Frequency 
(rnAk) 
id) 
FIGURE 10.9 
(Continued) 
c. G(s) = (s + a); 
d.G(s) = !/(* +a) 
look at an example of drawing the Bode plots for a function that consists of the 
product of first-order polynomials in the numerator and denominator. The plots will 
be made by adding together the individual frequency response curves. 
Example 10.2 
Bode Plots for Ratio of First-Order Factors 
C(s) PROBLEM: Draw the Bode plots for the system shown in Figure 10.10, where 
G{s) = K(s + 3)/[s{s + l){s + 2)]. 
FIGURE 10.10 Closed-loop 
unity feedback system 
SOLUTION: We 
will make 
a 
Bode 
plot 
for 
the 
open-loop 
function 
G{s) = K(s + 3)/[s{s + l)(s + 2)]. The Bode plot is the sum of the Bode plots for 
each first-order term. Thus, it is convenient to use the normalized plot for each of 
these terms so that the low-frequency asymptote of each term, except the pole at the 
origin, is at 0 dB, making it easier to add the components of the Bode plot. We rewrite 
G(s) showing each term normalized to a low-frequency gain of unity. Hence, 
G(s) = ,(,+1)(1+1) 
(10.25) 
Now determine that the break frequencies are at 1, 2, and 3. The magnitude plot 
should begin a decade below the lowest break frequency and extend a decade above 
the highest break frequency. Hence, we choose 0.1 radian to 100 radians, or three 
decades, as the extent of our plot. 
At co = 0.1 the low-frequency value of the function is found from Eq. (10.25) using 
the low-frequency values for all of the {(s/a) + 1] terms, (that is, s = 0) and the actual 
value for the s term in the denominator. Thus, G(/0.1) « \ K/0.1 = 15 K. The effect of 
K is to move the magnitude curve up (increasing K) or down (decreasing K) by the 
amount of 20 log K. K has no effect upon the phase curve. If we choose K = 1, the 
magnitude plot can be denormalized later for any value of K that is calculated or known. 

10.2 Asymptotic Approximations: Bode Plots 
547 
40 
20 
§ 
° 
J? -20 
o 
S 
-40 
-60 
3 
2s 
1 
{5+1) 
-2C 
(H 
dB/dec (-6 
20d 
dB/oc 
B/dec (6 dB/oct) 
o3 
___ H 
0.1 
10 
100 
Frequency (rad/s) 
(a) 
40 
20 
* ° 
S-2D 
o 
N 
-40 
-60 
-20 dB/dec (-6 dB/o =t) 
^ ^ M, 
^ 
.__- 40 dB/dec (- 12dB/oct)_ 
_ 
N | 
0.1 
10 
100 
Frequency (rad/s) 
(b) 
Figure 10.11(a) shows each component of the Bode log-magnitude frequency 
response. Summing the components yields the composite plot shown in Fig-
ure 10.11(6). The results are summarized in Table 10.2, which can be used to 
obtain the slopes. Each pole and zero is itemized in the first column. Reading across 
the table shows its contribution at each frequency. The last row is the sum of the 
slopes and correlates with Figure 10.11(6). The Bode magnitude plot for K = 1 
starts at co = 0.1 with a value of 20 log 15 = 23.52 dB, and decreases immediately at a 
rate of -20 dB/decade, due to the 5 term in the denominator. At co = 1, the (^-(-1) 
term in the denominator begins its 20 dB/decade downward slope and causes an 
additional 20 dB/decade negative slope, or a total of —40 dB/decade. At co — 2, the 
term \{s/2) + 1] begins its -20 dB/decade slope, adding yet another -20 dB/decade 
to the resultant plot, or a total of -60 dB/decade slope that continues until co = 3. 
At this frequency, the [{s/3) +1] term in the numerator begins its positive 
TABLE 10.2 Bode magnitude plot: slope contribution from each pole and zero in 
Example 10.2 
Description 
Pole at 0 
Pole a t - 1 
Pole at - 2 
Zero at - 3 
Total slope (dB/dec) 
0.1 (Start: 
Pole at 0) 
-20 
0 
(J 
0 
-20 
Frequency (rad/s) 
1 (Start: 
Pole at -1) 
-20 
-20 
0 
0 
-40 
2 (Start: 
Pole at -2) 
-20 
-20 
-20 
0 
-60 
3 (Start-
Zero at -3) 
-20 
-20 
-20 
20 
-40 
FIGURE 10.11 
Bode log-magnitude plot for 
Example 10.2: 
a. components; 
b. composite 

548 
Chapter 10 
Frequency Response Techniques 
20 dB/decade slope. The resultant magnitude plot, therefore, changes from a slope 
of -60 dB/decade to -40 dB/decade at co = 3, and continues at that slope since 
there are no other break frequencies. 
The slopes are easily drawn by sketching straight-line segments decreasing by 
20 dB over a decade. For example, the initial -20 dB/decade slope is drawn from 
23.52dBata; = 0.1, to 3.52 dB (a 20 dB decrease) at m = 1. The-40 dB/decade slope 
starting at m = 1 is drawn by sketching a line segment from 3.52 dB at co = 1, to 
-36.48 dB (a 40 dB decrease) at co — 10, and using only the portion from co = 1 to 
0) = 2. The next slope of —60 dB/decade is drawn by first sketching a line segment 
from <w = 2toa> = 20(l decade) that drops down by 60 dB, and using only that 
portion of the line from o) = 2 to co = 3. The final slope is drawn by sketching a line 
segment from w = 3 to o) = 30 (1 decade) that drops by 40 dB. This slope continues to 
the end of the plot. 
Phase is handled similarly. However, the existence of breaks a decade below 
and a decade above the break frequency requires a little more bookkeeping. 
Table 10.3 shows the starting and stopping frequencies of the 45°/decade slope for 
TABLE 10.3 Bode phase plot: slope contribution from each pole and zero in Example 10.2 
Description 
Pole at -1 
Pole at -2 
Zero at —3 
Total slope (deg/dec) 
0.1 (Start: 
Pole at -1) 
-45 
-45 
0.2 (Start: 
Pole at -2) 
-45 
-45 
-90 
Frequency (rad/s) 
0.3 (Start: 
Pole at -3) 
-45 
-45 
45 
-45 
0 (End: 
Pole at -1) 
0 
-45 
45 
0 
20 (End: 
Pole at -2) 
0 
45 
45 
30 (End: 
Zero at —3) 
0 
0 
90 
45 
0 
-45 
-90 
-135 
-180 
1 
(5+1) 
3 
2.? 
(H 
-457dec 
""""n 
(H 
45°/ 
0.1 
10 
100 
Frequency (rad/s) 
(«) 
FIGURE 10.12 
Bode phase 
plot for Example 10.2: 
a. components; 
b. composite 
-90 
-135 
-180 
-225 
-270 
-315 
-360 
\~7 
-457dec 
_c 
r-7 V 
07de 
*= 
c 
~ — i 
457de<^ 
A V 
57de 
0.1 
10 
100 
Frequency (rad/s) 
if>) 

10.2 Asymptotic Approximations: Bode Plots 
each of the poles and zeros. For example, reading across for the pole at —2, we see 
that the -45° slope starts at a frequency of 0.2 and ends at 20. Filling in the rows for 
each pole and then summing the columns yields the slope portrait of the resulting 
phase plot. Looking at the row marked Total slope, we see that the phase plot will 
have a slope of —45°/decade from a frequency of 0.1 to 0.2. The slope will then 
increase to -90°/decade from 0.2 to 0.3. The slope will return to —45°/decade from 
0.3 to 10 rad/s. A slope of 0 ensues from 10 to 20 rad/s, followed by a slope of 
+45°/decade from 20 to 30 rad/s. Finally, from 30 rad/s to infinity, the slope is 
0°/decade. 
The resulting component and composite phase plots are shown in Fig-
ure 10.12. Since the pole at the origin yields a constant -90° phase shift, the 
plot begins at —90° and follows the slope portrait just described. 
Bode Plots for G(s) = s2 + 2$a)ns + co2
n 
Now that we have covered Bode plots for first-order systems, we turn to the Bode 
log-magnitude and phase plots for second-order polynomials in s. The second-order 
polynomial is of the form 
G(s) = s2 + 2l;a>ns + co2
n = to2
n(^ + 2 £ — + 1 ] 
(10.26) 
Unlike the first-order frequency response approximation, the difference between 
the asymptotic approximation and the actual frequency response can be great for 
some values of £. A correction to the Bode diagrams can be made to improve the 
accuracy. We first derive the asymptotic approximation and then show the difference 
between the asymptotic approximation and the actual frequency response curves. 
At low frequencies, Eq. (10.26) becomes 
G(s) w col = ulZ0° 
(10.27) 
The magnitude, M, in dB at low frequencies therefore is 
20 log M = 20 log | G O ) | = 20 log co2
n 
(10.28) 
At high frequencies, 
G{s) « s2 
(10.29) 
or 
G(jto) » -co2 = co2Z\80° 
(10.30) 
The log-magnitude is 
20logM = 20log \G(ja>)\ = 20log co2 = 40logco 
(10.31) 
Equation (10.31) is a straight line with twice the slope of a first-order term (Eq. 
(10.20)). Its slope is 12 dB/octave, or 40 dB/decade. 

550 
Chapter 10 
Frequency Response Techniques 
120 
80 
40 
0 
-40 
-120 
Slope = 12 dB/octave 
= 40 dB/decade 
FIGURE 10.13 
Bode asymptotes for 
normalized and scaled 
G(s) =s2+ 2t(ons + o?n: 
a. magnitude; b. phase 
0.01 
0.1 
1 
0)/0),, 
(a) 
10 
100 
180 
135 
90 
45 
0 
-45 
-90 
Slope = 90°/decade 
0.01 
0.1 
1 
0)/0)n 
(b) 
10 
100 
The low-frequency asymptote (Eq. (10.27)) and the high-frequency asymptote 
(Eq. (10.31)) are equal when co = con. Thus, con is the break frequency for the second-
order polynomial. 
For convenience in representing systems with different con, we normalize and 
scale our findings before drawing the asymptotes. Using the normalized and scaled 
term of Eq. (10.26), we normalize the magnitude, dividing by to2, and scale the 
frequency, dividing by to„. Thus, we plot G(s{)/co2
n=s\+2t;si+\, 
where 
S] — s/a)n. G(s\) has a low-frequency asymptote at 0 dB and a break frequency of 
1 rad/s. Figure 10.13(a) shows the asymptotes for the normalized and scaled magnitude 
plot. 
We now draw the phase plot. It is 0° at low frequencies (Eq. (10.27)) and 180° at 
high frequencies (Eq. (10.30)). To find the phase at the natural frequency, first 
evaluate G(Jco): 
G{jco) = s2 + 2^tons + CO 
n \$—>ja> = {co2, - co2) + j2;conco 
(10.32) 
Then find the function value at the natural frequency by substituting co = con. Since 
the result is |2|to|, the phase at the natural frequency is +90°. Figure 10.13(5) shows 
the phase plotted with frequency scaled by con. The phase plot increases at a rate of 
90°/decade from 0.1 to 10 and passes through 90° at 1. 
Corrections to Second-Order Bode Plots 
Let us now examine the error between the actual response and the asymptotic 
approximation of the second-order polynomial. Whereas the first-order polynomial 
has a disparity of no more than 3.01 dB magnitude and 5.71° phase, the second-order 
function may have a greater disparity, which depends upon the value of f. 

10.2 Asymptotic Approximations: Bode Plots 
551 
From Eq. (10.32), the actual magnitude and phase for G(s) = s2 + 2t;a>ns + a?n 
are, respectively, 
(10.33) 
M^sjicol-CDlf 
+ 
WcOnCof 
Phase = tan ' ~4——T» 
co
l
n - col 
(10.34) 
These relationships are tabulated in Table 10.4 for a range of values of £ and plotted in 
Figures 10.14 and 10.15 along with the asymptotic approximations for normalized 
TABLE 10.4 Data for normalized and scaled log-magnitude and phase plots for (s2 + 2£cons + to2). Mag = 20 Iog(M/ft>2,] 
Freq. 
CO 
co„ 
0.10 
0.20 
0.30 
0.40 
0.50 
0.60 
0.70 
0.80 
0.90 
1.00 
1.10 
1.20 
1.30 
1.40 
1.50 
1.60 
1.70 
1.80 
1.90 
2.00 
3.00 
4.00 
5.00 
6.00 
7.00 
8.00 
9.00 
10.00 
Mag (dB) 
¢ = 0.1 
-0.09 
-0.35 
-0.80 
-1.48 
-2.42 
-3.73 
-5.53 
-8.09 
-11.64 
-13.98 
-10.34 
-6.00 
-2.65 
0.00 
2.18 
4.04 
5.67 
7.12 
8.42 
9.62 
18.09 
23.53 
27.61 
30.89 
33.63 
35.99 
38.06 
39.91 
Phase (deg) 
¢ = 0.1 
1.16 
2.39 
3.77 
5.44 
7.59 
10.62 
15.35 
23.96 
43.45 
90.00 
133.67 
151.39 
159.35 
163.74 
166.50 
168.41 
169.80 
170.87 
171.72 
172.41 
175.71 
176.95 
177.61 
178.04 
178.33 
178.55 
178.71 
178.84 
Mag (dB) 
¢ = 0.2 
-0.08 
-0.32 
-0.74 
-1.36 
-2.20 
-3.30 
-4.70 
-6.35 
-7.81 
-7.96 
-6.24 
-3.73 
-1.27 
0.92 
2.84 
4.54 
6.06 
7.43 
8.69 
9.84 
18.16 
23.57 
27.63 
30.90 
33.64 
36.00 
38.07 
39.92 
Phase (deg) 
¢ = 0.2 
2.31 
4.76 
7.51 
10.78 
14.93 
20.56 
28.77 
41.63 
62.18 
90.00 
115.51 
132.51 
143.00 
149.74 
154.36 
157.69 
160.21 
162.18 
163.77 
165.07 
171.47 
173.91 
175.24 
176.08 
176.66 
177.09 
177.42 
177.69 
Mag (dB) 
¢ = 0.3 
-0.07 
-0.29 
-0.65 
-1.17 
-1.85 
-2.68 
-3.60 
-4.44 
-4.85 
-4.44 
-3.19 
-1.48 
0.35 
2.11 
3.75 
5.26 
6.64 
7.91 
9.09 
10.19 
18.28 
23.63 
27.67 
30.93 
33.66 
36.01 
38.08 
39.93 
Phase (deg) 
¢ = 0.3 
3.47 
7.13 
11.19 
15.95 
21.80 
29.36 
39.47 
53.13 
70.62 
90.00 
107.65 
121.43 
131.50 
138.81 
144.25 
148.39 
151.65 
154.26 
156.41 
158.20 
167.32 
170.91 
172.87 
174.13 
175.00 
175.64 
176.14 
176.53 
(table continues) 

552 
Chapter 10 
Frequency Response Techniques 
TABLE 10.4 Data for normalized and scaled log-magnitude and phase plots for (s2 + 2t;cons + afy. Mag = 20 log(M/a>l) 
(Continued) 
Freq. 
CO 
0.10 
0.20 
0.30 
0.40 
0.50 
0.60 
0.70 
0.80 
0.90 
1.00 
1.10 
1.20 
1.30 
1.40 
1.50 
1.60 
1.70 
1.80 
1.90 
2.00 
3.00 
4.00 
5.00 
6.00 
7.00 
8.00 
9.00 
10.00 
Mag (dB) 
¢ = 0.5 
-0.04 
-0.17 
-0.37 
-0.63 
-0.90 
-1.14 
-1.25 
-1.14 
-0.73 
0.00 
0.98 
2.13 
3.36 
4.60 
5.81 
6.98 
8.10 
9.17 
10.18 
11.14 
18.63 
23.82 
27.79 
31.01 
33.72 
36.06 
38.12 
39.96 
Phase (deg) 
¢ = 0.5 
5.77 
11.77 
18.25 
25.46 
33.69 
43.15 
53.92 
65.77 
78.08 
90.00 
100.81 
110.14 
117.96 
124.44 
129.81 
134.27 
138.03 
141.22 
143.95 
146.31 
159.44 
165.07 
168.23 
170.27 
171.70 
172.76 
173.58 
174.23 
Mag (dB) 
¢ = 0.7 
0.00 
0.00 
0.02 
0.08 
0.22 
0.47 
0.87 
1.41 
2.11 
2.92 
3.83 
4.79 
5.78 
6.78 
7.76 
8.72 
9.66 
10.56 
11.43 
12.26 
19.12 
24.09 
27.96 
31.12 
33.80 
36.12 
38.17 
40.00 
Phase (deg) 
¢ = 0.7 
8.05 
16.26 
24.78 
33.69 
43.03 
52.70 
62.51 
72.18 
81.42 
90.00 
97.77 
104.68 
110.76 
116.10 
120.76 
124.85 
128.45 
131.63 
134.46 
136.97 
152.30 
159.53 
163.74 
166.50 
168.46 
169.92 
171.05 
171.95 
Mag (dB) 
¢ = 0.1 
0.09 
0.34 
0.75 
1.29 
1.94 
2.67 
3.46 
4.30 
5.15 
6.02 
6.89 
7.75 
8.60 
9.43 
10.24 
11.03 
11.80 
12.55 
13.27 
13.98 
20.00 
24.61 
28.30 
31.36 
33.98 
36.26 
38.28 
40.09 
Phase (deg) 
¢ = 0 1 
11.42 
22.62 
33.40 
43.60 
53.13 
61.93 
69.98 
77.32 
83.97 
90.00 
95.45 
100.39 
104.86 
108.92 
112.62 
115.99 
119.07 
121.89 
124.48 
126.87 
143.13 
151.93 
157.38 
161.08 
163.74 
165.75 
167.32 
168.58 
magnitude and scaled frequency. In Figure 10.14, which is normalized to the square of the 
naturai frequency, the normalized log-magnitude at the scaled natural frequency is 
+20 log 2£. The student should verify that the actual magnitude at the unsealed natural 
frequency is +20 log 2^co2
n. Table 10.4 and Figures 10.14 and 10.15 can be used to improve 
accuracy when drawing Bode plots. For example, a magnitude correction of +20 log 2¢ 
can be made at the natural, or break, frequency on the Bode asymptotic plot. 
Bode Plots for G(s) = 1/(s2 + 2^con5 + o>2
n) 
Bode plots for G(s) = l/(s2 + 2$tons+ to2
n) can be derived similarly to those for 
G(s) = s2 + 2;a)ns -\-co2
n. We find that the magnitude curve breaks at the natural 
frequency and decreases at a rate of -40 dB/decade. The phase plot is 0° at low 

10.2 Asymptotic Approximations: Bode Plots 
553 
FIGURE 10.14 Normalized and scaled log-magnitude response for (s2 + 2£a)ns + co2) 
g> 100 
FIGURE 10.15 Scaled phase response for (s2 + 2t;tons + orn 
frequencies. At Q.lco,, it begins a decrease of —90°/decade and continues until 
co = lOoto, where it levels off at -180°. 
The exact frequency response also follows the same derivation as that of 
G(s) = s2 + 2i;cons + co\. The results are summarized in Table 10.5, as well as Fig-
ures 10.16 and 10.17. The exact magnitude is the reciprocal of Eq. (10.33), and the 
exact phase is the negative of Eq. (10.34). The normalized magnitude at the scaled 
natural frequency is -20 log 2^, which can be used as a correction at the break 
frequency on the Bode asymptotic plot. 

554 
Chapter 10 
Frequency Response Techniques 
TABLE 10.5 Data for normalized and scaled log-magnitude and phase plots for 1/(52 + 2t;cons + a>2
n). Mag = 20 \og(M/a>l) 
Freq. 
CO 
co„ 
0.10 
0.20 
0.30 
0.40 
0.50 
0.60 
0.70 
0.80 
0.90 
1.00 
1.10 
1.20 
1.30 
1.40 
1.50 
1.60 
1.70 
1.80 
1.90 
2.00 
3.00 
4.00 
5.00 
6.00 
7.00 
8.00 
9.00 
10.00 
Mag (dB) 
£ = 0.1 
0.09 
0.35 
0.80 
1.48 
2.42 
3.73 
5.53 
8.09 
11.64 
13.98 
10.34 
6.00 
2.65 
0.00 
-2.18 
-4.04 
-5.67 
-7.12 
-8.42 
-9.62 
-18.09 
-23.53 
-27.61 
-30.89 
-33.63 
-35.99 
-38.06 
-39.91 
Phase (deg) 
£ = 0.1 
-1.16 
-2.39 
-3.77 
-5.44 
-7.59 
-10.62 
-15.35 
-23.96 
-43.45 
-90.00 
-133.67 
-151.39 
-159.35 
-163.74 
-166.50 
-168.41 
-169.80 
-170.87 
-171.72 
-172.41 
-175.71 
-176.95 
-177.61 
-178.04 
-178.33 
-178.55 
-178.71 
-178.84 
Mag (dB) 
£ = 0.2 
0.08 
0.32 
0.74 
1.36 
2.20 
3.30 
4.70 
6.35 
7.81 
7.96 
6.24 
3.73 
1.27 
-0.92 
-2.84 
-4.54 
-6.06 
-7.43 
-8.69 
-9.84 
-18.16 
-23.57 
-27.63 
-30.90 
-33.64 
-36.00 
-38.07 
-39.92 
Phase (deg) 
£ = 0.2 
-2.31 
-4.76 
-7.51 
-10.78 
-14.93 
-20.56 
-28.77 
-41.63 
-62.18 
-90.00 
-115.51 
-132.51 
-143.00 
-149.74 
-154.36 
-157.69 
-160.21 
-162.18 
-163.77 
-165.07 
-171.47 
-173.91 
-175.24 
-176.08 
-176.66 
-177.09 
-177.42 
-177.69 
Mag (dB) 
£ = 0.3 
0.07 
0.29 
0.65 
1.17 
1.85 
2.68 
3.60 
4.44 
4.85 
4.44 
3.19 
1.48 
-0.35 
-2.11 
-3.75 
-5.26 
-6.64 
-7.91 
-9.09 
-10.19 
-18.28 
-23.63 
-27.67 
-30.93 
-33.66 
-36.01 
-38.08 
-39.93 
Phase (deg) 
£ = 0.3 
-3.47 
-7.13 
-11.19 
-15.95 
-21.80 
-29.36 
-39.47 
-53.13 
-70.62 
-90.00 
-107.65 
-121.43 
-131.50 
-138.81 
-144.25 
-148.39 
-151.65 
-154.26 
-156.41 
-158.20 
-167.32 
-170.91 
-172.87 
-174.13 
-175.00 
-175.64 
-176.14 
-176.53 
(table continues) 

10.2 Asymptotic Approximations: Bode Plots 
555 
TABLE 10.5 Data for normalized and scaled log-magnitude and phase plots for l/(s2 + 2$co„s + es?). Mag = 20 \og(M/a)2
n) 
{Continued) 
Freq. 
0)„ 
0.10 
0.20 
0.30 
0.40 
0.50 
0.60 
0.70 
0.80 
0.90 
1.00 
1.10 
1.20 
1.30 
1.40 
1.50 
1.60 
1.70 
1.80 
1.90 
2.00 
3.00 
4.00 
5.00 
6.00 
7.00 
8.00 
9.00 
10.00 
Mag (dB) 
£ = 0.5 
0.04 
0.17 
0.37 
0.63 
0.90 
1.14 
1.25 
1.14 
0.73 
0.00 
-0.98 
-2.13 
-3.36 
-4.60 
-5.81 
-6.98 
-8.10 
-9.17 
-10.18 
-11.14 
-18.63 
-23.82 
-27.79 
-31.01 
-33.72 
-36.06 
-38.12 
-39.96 
Phase (deg) 
£ = 0.5 
-5.77 
-11.77 
-18.25 
-25.46 
-33.69 
-43.15 
-53.92 
-65.77 
-78.08 
-90.00 
-100.81 
-110.14 
-117.96 
-124.44 
-129.81 
-134.27 
-138.03 
-141.22 
-143.95 
-146.31 
-159.44 
-165.07 
-168.23 
-170.27 
-171.70 
-172.76 
-173.58 
-174.23 
Mag (dB) 
£ = 0.7 
0.00 
0.00 
-0.02 
-0.08 
-0.22 
-0.47 
-0.87 
-1.41 
-2.11 
-2.92 
-3.93 
-4.79 
-5.78 
-6.78 
-7.76 
-8.72 
-9.66 
-10.56 
-11.43 
-12.26 
-19.12 
-24.09 
-27.96 
-31.12 
-33.80 
-36.12 
-38.17 
-40.00 
Phase (deg) 
£ = 0.7 
-8.05 
-16.26 
-24.78 
-33.69 
-43.03 
-52.70 
-62.51 
-72.18 
-81.42 
-90.00 
-97.77 
-104.68 
-110.76 
-116.10 
-120.76 
-124.85 
-128.45 
-131.63 
-134.46 
-136.97 
-152.30 
-159.53 
-163.74 
-166.50 
-168.46 
-169.92 
-171.05 
-171.95 
Mag (dB) 
£ = 0.1 
-0.09 
-0.34 
-0.75 
-1.29 
-1.94 
-2.67 
-3.46 
-4.30 
-5.15 
-6.02 
-6.89 
-7.75 
-8.60 
-9.43 
-10.24 
-11.03 
-11.80 
-12.55 
-13.27 
-13.98 
-20.00 
-24.61 
-28.30 
-31.36 
-33.98 
-36.26 
-38.28 
-40.09 
Phase (dej 
£ = 0.1 
-11.42 
-22.62 
-33.40 
-43.60 
-53.13 
-61.93 
-69.98 
-77.32 
-83.97 
-90.00 
-95.45 
-100.39 
-104.86 
-108.92 
-112.62 
-115.99 
-119.07 
-121.89 
-124.48 
-126.87 
-143.13 
-151.93 
-157.38 
-161.08 
-163.74 
-165.75 
-167.32 
-168.58 

556 
Chapter 10 
Frequency Response Techniques 
20 
10 
-10 
8 -20 
-30 
-40 
-50 
1 
1 
Low-frequency 
asymptote 
/ 
^ 
\ 
\ 
1 
/ 
\ 
\ 
s 
\ 
^ T ^ - 0 . 3 
v\^°j 
Wo.7 
\\i \1 
H gh-frequency 
asymptote 
k ^ 
0.1 
1 
cola,, 
10 
FIGURE 10.16 Normalized and scaled log-magnitude response for l/{s2 + 2$co„s + a%) 
-20 
I _ 
-100 
-120 
-140 
FIGURE 10.17 Scaled phase response for 1/(52 + 2%®n$ + aft 
Let us now look at an example of drawing Bode plots for transfer functions that 
contain second-order factors. 
Example 10.3 
Bode Plots for Ratio of First- and Second-Order Factors 
PROBLEM: Draw the Bode log-magnitude and phase plots of G(s) for the unity 
feedback system shown in Figure 10.10, where G(s) = (s + 3)/[(s + 2)(52 + Is + 25)]. 

10.2 Asymptotic Approximations: Bode Plots 
557 
10 
-10 
-20 
-30 
-40 
-50 
50 
20 dB/dec 
1 
M 
IS-
( 
\ 
i\ 
i ^ 
f*l) 
' » • 0 
i 
^-40 dB/dec 
% \ 
1 
V 
25 25 «
\ 
^ -
0.01 
0.1 
10 
100 
Frequency (rad/s) 
(a) 
-10 
-20 
-30 
-40 
-50 
-60 
-70 
0 dB/dec / 
: > s 
—i 
Correctior 
^v 
\ 
10 dB/dec 
0.01 
0.1 
1 
Frequency (rad/s) 
(*) 
100 
SOLUTION: We first convert G(s) to show the normalized components that have 
unity low-frequency gain. The second-order term is normalized by factoring out GJ|, 
forming 
Thus, 
cot 
2K 
, 
0)„ 
<m= 
h> 
H 
(2)(25) 
(1+1 
s2 
2 
, 
50/^ 
,fs2 
2 
(2 + 1 ) 25 + 2T + 1 
(10.35) 
(10.36) 
The Bode log-magnitude diagram is shown in Figure 10.18(£>) and is the sum 
of the individual first- and second-order terms of G(s) shown in Figure 10.18(A). We 
solve this problem by adding the slopes of these component parts, beginning and 
ending at the appropriate frequencies. The results are summarized in Table 10.6, 
which can be used to obtain the slopes. The low-frequency value for G(s), found by 
FIGURE 10.18 
Bode magnitude plot for 
G(s) = (s + 3)/ 
[{s + 2)(52 +25 + 25)]: 
a. components; 
b. composite 
TABLE 10.6 Magnitude diagram slopes for Example 10.3 
Description 
Pole at - 2 
Zero at —3 
con = 5 
Total slope (dB/dec) 
0.01 
(Start: 
Plot) 
0 
0 
0 
0 
Frequency (rad/s) 
2 
(Start: 
Pole at -2) 
-20 
0 
0 
-20 
3 
(Start: 
Zero at -3) 
-20 
20 
0 
0 
5 
(Start: 
(on = 5) 
-20 
20 
-40 
-40 

558 
Chapter 10 
Frequency Response Techniques 
letting 5 = 0, is 3/50, or -24.44 dB. The Bode magnitude plot starts out at this 
value and continues until the first break frequency at 2 rad/s. Here the pole at - 2 
yields a -20 dB/decade slope downward until the next break at 3 rad/s. The zero 
at - 3 causes an upward slope of +20 dB/decade, which, when added to the 
previous —20 dB/decade curve, gives a net slope of 0. At a frequency of 5 rad/s, 
the second-order term initiates a -40 dB/decade downward slope, which con-
tinues to infinity. 
The correction to the log-magnitude curve due to the underdamped second-
order term can be found by plotting a point -20 log 2£ above the asymptotes at the 
natural frequency. Since £ = 0.2 for the second-order term in the denominator of 
G(s), the correction is 7.96 dB. Points close to the natural frequency can be 
corrected by taking the values from the curves of Figure 10.16. 
TABLE 10.7 Phase diagram slopes for Example 10.3 
Description 
Pole at - 2 
Zero at - 3 
co„ = 5 
Total slope (dB/dec) 
0.2 
(Start: 
Pole at -
-45 
-45 
2) 
0.3 
(Start: 
Zero at -
-45 
45 
0 
3) 
Frequency (rad/s) 
0.5 
(Start: 
(o„ at —5) 
-45 
45 
-90 
-90 
20 
(End: 
Pole at -
0 
45 
-90 
-45 
2) 
30 
(End: 
Zero at -3) 
0 
-90 
-90 
50 
(End: 
(o„ =5) 
0 
0 
Xi 
90 
45 
0 
-45 
-90 
FIGURE 10.19 Bode phase 
plot for G(s) = (5 + 3)/ 
[(i + 2)(s2+ 25+ 25)]: 
a. components; 
b. composite 
J -135 
-180 
-225 
0 
0 
-45 
f 
-90 
1 
| - 1 3 5 
I -180 
-225 
-270 
45°/<ter 
(H 
457dec 
-90°/dec 
i 
2; 
23 
50 
1 
•(* *. ? 
.SLI'J 
fi 
|| 
01 
0.1 
10 
100 
Frequency (rad/s) 
(«) 
-315 
-45° dec 
-90' /de c 
1 
-457d 
y~ 
ec 
-90°/dec 
S ll 
0.01 
0.1 
1 
Frequency (rad/s) 
(b) 
10 
100 

10.3 
Introduction to the Nyquist Criterion 
5 5 9 
We now turn to the phase plot. Table 10.7 is formed to determine the 
progression of slopes on the phase diagram. The first-order pole at -2 yields a 
phase angle that starts at 0° and ends at -90° via a -45°/decade slope starting a 
decade below its break frequency and ending a decade above its break frequency. 
The first-order zero yields a phase angle that starts at 0° and ends at +90° via a 
+45°/decade slope starting a decade below its break frequency and ending a 
decade above its break frequency. The second-order poles yield a phase angle that 
starts at 0° and ends at -180° via a —90°/decade slope starting a decade below their 
natural frequency (con = 5) and ending a decade above their natural frequency. The 
slopes, shown in Figure 10.19(a), are summed over each frequency range, and the 
final Bode phase plot is shown in Figure 10.19(6). 
Students who are using MATLAB should now run chlOpl in Appendix B. 
You will learn how to use MATLAB to make Bode plots and list the 
pointsontheplots.ThisexercisesolvesExamplelO.3usingMATLAB. 
MATLAB 
Skill-Assessment Exercise 10.2 
PROBLEM: Draw the Bode log-magnitude and phase plots for the system shown in 
Figure 10.10, where 
WileyPLUS 
G(S) - 
{s+20) 
cm 
U 
(, + 1)(, + 7)(, + 50) 
coZSons 
ANSWER: The complete solution is at www.wiley.com/college/nise. 
Trylt 10.1 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to obtain the 
Bode plots for the system of 
Skill-Assessment Exercise 10.2 
G=zpk ([-20],[-1,-7, . . . 
- 5 0 ] , 1) 
bode (G);grid on 
After the Bode plots appear, 
click on the curve and drag to 
read the coordinates. 
In this section, we learned how to construct Bode log-magnitude and Bode 
phase plots. The Bode plots are separate magnitude and phase frequency response 
curves for a system, G(s). In the next section, we develop the Nyquist criterion for 
stability, which makes use of the frequency response of a system. The Bode plots can 
then be used to determine the stability of a system. 
I 
10.3 Introduction to the Nyquist 
Criterion 
The Nyquist criterion relates the stability of a closed-loop system to the open-loop 
frequency response and open-loop pole location. Thus, knowledge of the open-
loop system's frequency response yields information about the stability of the 
closed-loop system. This concept is similar to the root locus, where we began 
with information about the open-loop system, its poles and zeros, and developed 
transient and stability information about the closed-loop system. 

Chapter 10 
Frequency Response Techniques 
Although the Nyquist criterion will yield stability information at first, we will 
extend the concept to transient response and steady-state errors. Thus, frequency 
response techniques are an alternate approach to the root locus. 
Derivation of the Nyquist Criterion 
Consider the system of Figure 10.20. The Nyquist criterion can tell us how many closed-
loop poles are in the right half-plane. Before deriving the criterion, let us establish four 
important concepts that will be used during the derivation: (1) the relationship between 
the poles of 1 + G{s)H(s) and the poles of G(s)H(s); (2) the relationship between the 
zeros of 1 + G(s)H(s) and the poles of the closed-loop transfer function, T(s); (3) the 
concept of mapping points; and (4) the concept of mapping contours. 
Letting 
„ 
G{s) = 7^ 
(10.37a) 
H(s) = 
DH 
we find 
G(s)H(s) = NGNH 
DGD 
H 
1 + G{s)H{s) = 1 + NGNH 
DGDH + NGNH 
DGDH 
DGDH 
T{s) = 
G(s) 
NGD 
H 
l + G{s)H(s) 
DGDH + NGNH 
(10.37b) 
(10.38a) 
(10.38b) 
(10.38c) 
From Eqs. (10.38), we conclude that (1) the poles of I + G(s)H(s) are the same as the 
poles of G(s)H{s), the open-loop system, and (2) the zeros ofl + G(s)H{s)are the 
same as the poles of T{s), the closed-loop system. 
Next, let us define the term mapping. If we take a complex number on the s-plane 
and substitute it into a function, F(s), another complex number results. This process is 
called mapping. For example, substituting s — 4 +j3 into the function (s2 + 2s +1) 
yieldsl6 +;30. We say that 4 + /3 maps into 16 + /30 through thefunction (s
2 + 2s + 1). 
Finally, we discuss the concept of mapping contours. Consider the collection of 
points, called a contour, shown in Figure 10.21 as contour A. Also, assume that 
F(s) = 
(s - Z]){s - Z2) • • • 
(s -Pi)(s 
-p2) 
• • • 
(10.39) 
Contour A can be mapped through F(s) into contour B by substituting each point 
of contour A into the function F(s) and plotting the resulting complex numbers. 
For example, point Q in Figure 10.21 maps into point Q through the function F(s). 
jco 
0 
5-plane A 
Contour A 
F(s) 
FIGURE 10.21 
Mapping contour A through function F(s) to contour B 

10.3 
Introduction to the Nyquist Criterion 
561 
Contour A 
i-plane 
Contour B 
a —+~F(s) = (s-z{) 
*-Re 
R=V 
Contour A 
.s-plane 
f-plane 
a -+• F{s) = 
] 
is-px) 
- R e 
R=~ 
\R 
v 
o 
Contour B 
Contour A 
i-plane 
F-plane 
Contour B 
<J —*~ F(s) = (s - z\) 
•-Re 
R = V 
Contour A 
s-plane 
Contour B 
F(s) = 
Contour A 
s-plane 
F(s) = 
FIGURE 10.22 Examples of 
contour mapping 
The vector approach to performing the calculation, covered in Section 8.1, can 
be used as an alternative. Some examples of contour mapping are shown in Fig-
ure 10.22 for some simple F(s). The mapping of each point is defined by complex 
arithmetic, where the resulting complex number, R, is evaluated from the complex 
numbers represented by V, as shown in the last column of Figure 10.22. You should 
verify that if we assume a clockwise direction for mapping the points on contour A, 
then contour B maps in a clockwise direction if F(s) in Figure 10.22 has just zeros or 
has just poles that are not encircled by the contour. The contour B maps in a 
counterclockwise direction if F(s) has just poles that are encircled by the contour. 
Also, you should verify that if the pole or zero of F(s) is enclosed by contour A, the 

562 
Chapter 10 
Frequency Response Techniques 
5-plane 
FIGURE 10.23 
Vector 
representation of mapping 
I + G//-plane 
F(s) = l + G(s)H(s) 
Contour A 
FIGURE 10.24 
Contour 
enclosing right half-plane to 
determine stability 
Contour B 
mapping encircles the origin. In the last case of Figure 10.22, the pole and zero 
rotation cancel, and the mapping does not encircle the origin. 
Let us now begin the derivation of the Nyquist criterion for stability. We show 
that a unique relationship exists between the number of poles of F(s) contained 
inside contour A, the number of zeros of F(s) contained inside contour A, and the 
number of counterclockwise encirclements of the origin for the mapping of contour 
B. We then show how this interrelationship can be used to determine the stability of 
closed-loop systems. This method of determining stability is called the Nyquist 
criterion. 
Let us first assume that F(s) = 1 + G(s)H(s), with the picture of the poles and 
zeros of 1 + G(s)H(s) 
as shown in Figure 10.23 near contour A. Hence, 
R = ^1^2)/(^3^4^5). As each point Q of the contour A is substituted into 
1 + G(s)H(s), a mapped point results on contour B. Assuming that F{s) = 1 + 
G(s)H(s) has two zeros and three poles, each parenthetical term of Eq. (10.39) is a 
vector in Figure 10.23. As we move around contour A in a clockwise direction, each 
vector of Eq. (10.39) that lies inside contour A will appear to undergo a complete 
rotation, or a change in angle of 360°. On the other hand, each vector drawn from the 
poles and zeros of 1 + G(s)H(s) that exist outside contour A will appear to oscillate 
and return to its previous position, undergoing a net angular change of 0°. 
Each pole or zero factor of 1 + G(s)H(s) whose vector undergoes a complete 
rotation around contour A must yield a change of 360° in the resultant, R, or a 
complete rotation of the mapping of contour B. If we move in a clockwise direction 
along contour A, each zero inside contour A yields a rotation in the clockwise 
direction, while each pole inside contour A yields a rotation in the counterclockwise 
direction since poles are in the denominator of Eq. (10.39). 
Thus, N = P - Z, where N equals the number of counterclockwise rotations of 
contour B about the origin; P equals the number of poles of 1 + G(s)H(s) inside 
contour A, and Z equals the number of zeros of 1 + G(s)H(s) inside contour A. 
Since the poles shown in Figure 10.23 are poles of 1 + G(s)H(s), we know from 
Eqs. (10.38) that they are also the poles of G(s)H(s) and are known. But since the zeros 
shown in Figure 10.23 are the zeros of 1 + G(s)H(s), we know from Eqs. (10.38) 
that they are also the poles of the closed-loop system and are not known. Thus, P equals 
the number of enclosed open-loop poles, and Z equals the number of enclosed closed-
loop poles. Hence, N = P - Z,or alternately, Z = P - N, tells us that the number of 
closed-loop poles inside the contour (which is the same as the zeros inside the contour) 
equals the number of open-loop poles of G(s)H(s) inside the contour minus the 
number of counterclockwise rotations of the mapping about the origin. 
If we extend the contour to include the entire right half-plane, as shown in 
Figure 10.24, we can count the number of right-half-plane, closed-loop poles inside 
contour A and determine a system's stability. Since we can count the number of open-
loop poles, P, inside the contour, which are the same as the right-half-plane poles of 
G(s)H(s), the only problem remaining is how to obtain the mapping and find N. 

10.3 
Introduction to the Nyquist Criterion 
5 6 3 
Since all of the poles and zeros of G(s)H(s) are known, what if we map through 
G(s)H(s) instead of 1 + G(s)H(s)? The resulting contour is the same as a mapping 
through 1 + G(s)H(s), except that it is translated one unit to the left; thus, we count 
rotations about - 1 instead of rotations about the origin. Hence, the final statement 
of the Nyquist stability criterion is as follows: 
If a contour, A, that encircles the entire right half-plane is mapped through 
G(s)H(s), then the number of closed-loop poles, Z, in the right half-plane equals 
the number of open-loop poles, P, that are in the right half-plane minus the number 
of counterclockwise revolutions, N, around - 1 of the mapping; that is, Z = P — N. 
The mapping is called the Nyquist diagram, or Nyquist plot, of G(s)H(s). 
We can now see why this method is classified as a frequency response technique. 
Around contour A in Figure 10.24, the mapping of the points on they'w-axis through the 
function G(s)H(s) is the same as substituting 5 = jco into G(s)H(s) to form the 
frequency response function G(Jco)H(jco). We are thus finding the frequency response 
of G(s)H(s) over that part of contour A on the positive/w-axis. In other words, part of 
the Nyquist diagram is the polar plot of the frequency response of G(s)H(s). 
Applying the Nyquist Criterion to Determine Stability 
Before describing how to sketch a Nyquist diagram, let us look at some typical 
examples that use the Nyquist criterion to determine the stability of a system. These 
examples give us a perspective prior to engaging in the details of mapping. Fig-
ure 10.25(a) shows a contour A that does not enclose closed-loop poles, that is, the 
zeros of 1 + G(s)H(s). The contour thus maps through G(s)H(s) into a Nyquist 
diagram that does not encircle - 1 . Hence, P = 0, N = 0, and Z = P - N = 0. Since 
Z is the number of closed-loop poles inside contour A, which encircles the right 
half-plane, this system has no right-half-plane poles and is stable. 
On the other hand, Figure 10.25(b) shows a contour A that, while it does not 
enclose open-loop poles, does generate two clockwise encirclements of —1. Thus, 
P = 0, N — - 2 , and the system is unstable; it has two closed-loop poles in the right 
half-plane since Z = P — N = 2. The two closed-loop poles are shown inside contour 
J 
I 
s-plane 
o 
o 
CO 
^y v. 
) 
/ 
Im 
GH-plane 
- O- -»- G(s)H(s) 
-1 
•*- Re 
GH-plme 
Test radius 
o- -*- G(s)H(s) 
(b) 
*- Re 
O = zeros of 1 + G(s)H(s) 
= poles of closed-loop system 
Location not known 
X = poles of 1 + G(s)H(s) 
= poles of G{s)H(s) 
Location is known 
FIGURE 10.25 
Mapping 
examples: a. Contour does not 
enclose closed-loop poles; 
b. contour does enclose closed-
loop poles 

564 
Chapter 10 
Frequency Response Techniques 
A in Figure 10.25(b) as zeros of 1 + G(s)H(s). You should keep in mind that the 
existence of these poles is not known a priori. 
In this example, notice that clockwise encirclements imply a negative value for N. 
The number of encirclements can be determined by drawing a test radius from —1 in 
any convenient direction and counting the number of times the Nyquist diagram 
crosses the test radius. Counterclockwise crossings are positive, and clockwise cross-
ings are negative. For example, in Figure 10.25(6), contour B crosses the test radius 
twice in a clockwise direction. Hence, there are -2 encirclements of the point —1. 
Before applying the Nyquist criterion to other examples in order to determine 
a system's stability, we must first gain experience in sketching Nyquist diagrams. The 
next section covers the development of this skill. 
( 
10.4 Sketching the Nyquist Diagram 
FIGURE 10.26 
a. Turbine and generator; 
b. block diagram of 
speed control system 
for Example 10.4 
The contour that encloses the right half-plane can be mapped through the function 
G(s)H(s) by substituting points along the contour into G(s)H(s). The points along 
the positive extension of the imaginary axis yield the polar frequency response of 
G(s)H(s). Approximations can be made to G(s)H(s) for points around the infinite 
semicircle by assuming that the vectors originate at the origin. Thus, their length is 
infinite, and their angles are easily evaluated. 
However, most of the time a simple sketch of the Nyquist diagram is all that is 
needed. A sketch can be obtained rapidly by looking at the vectors of G(s)H(s) and 
their motion along the contour. In the examples that follow, we stress this rapid 
method for sketching the Nyquist diagram. However, the examples also include 
analytical expressions for G(s)H(s) for each section of the contour to aid you in 
determining the shape of the Nyquist diagram. 
Example 10.4 J | 
Sketching a Nyquist Diagram 
PROBLEM: Speed controls find wide application throughout industry and the 
home. Figure 10.26(A) shows one application: output frequency control of electrical 
\J. (] 
1 
Valve 
actu ator 
H) 
Controller 
Generator 
^ ™r 
Sensor 
Frequency or speed 
measurements 
Desired speed 
or frequency 
(a) 
Amplifier, 
valve actuator, and 
„ 
, 
steam valve 
,. 
speed + ^ 
*Q 
?\E<s>. 
9 
100 
(s+10) 
pressure 
Turbine 
1 
(s + 3) 
Torque 
Generator 
5 
0 + 1 ) 
speeil 
m 

10.4 Sketching the Nyquist Diagram 
565 
power from a turbine and generator pair. By regulating the speed, the control 
system ensures that the generated frequency remains within tolerance. Deviations 
from the desired speed are sensed, and a steam valve is changed to compensate for 
the speed error. The system block diagram is shown in Figure 10.26(6). Sketch the 
Nyquist diagram for the system of Figure 10.26. 
SOLUTION: Conceptually, the Nyquist diagram is plotted by substituting the points 
of the contour shown in Figure 10.27(a) into G(s) = 500/[(s + l){s + 3)(A- + 10)]. 
This process is equivalent to performing complex arithmetic using the vectors of 
G(s) drawn to the points of the contour as shown in Figure 10.27(a) and (6). Each 
pole and zero term of G(s) shown in Figure 10.26(6) is a vector in Figure 10.27(a) 
and (b). The resultant vector, R, found at any point along the contour is in general 
the product of the zero vectors divided by the product of the pole vectors (see 
Figure 10.27(c)). Thus, the magnitude of the resultant is the product of the zero 
lengths divided by the product of the pole lengths, and the angle of the resultant is 
the sum of the zero angles minus the sum of the pole angles. 
As we move in a clockwise direction around the contour from point A to 
point C in Figure 10.27(a), the resultant angle goes from 0° to - 3 x 90° = -270°, or 
from A' to C in Figure 10.27(c). Since the angles emanate from poles in the 
denominator of G(s), the rotation or increase in angle is really a decrease in angle 
s-plane 
jco 
-10 
V\ 
s-plane 
Vy 
-3 
r 
-i 
V 
A 
D^y 
m 
(O 
FIGURE 10.27 Vector 
evaluation of the Nyquist 
diagram for Example 10.4: 
a. vectors on contour at low 
frequency; 
b. vectors on contour 
around infinity; 
c. Nyquist diagram 

Chapter 10 
Frequency Response Techniques 
of the function G(s); the poles gain 270° in a counterclockwise direction, which 
explains why the function loses 270°. 
While the resultant moves from A' to C' in Figure 10.27(c), its magnitude 
changes as the product of the zero lengths divided by the product of the pole lengths. 
Thus, the resultant goes from a finite value at zero frequency (at point A of Figure 
10.27(A), there are three finite pole lengths) to zero magnitude at infinite frequency at 
point C (at point C of Figure 10.27(A), there are three infinite pole lengths). 
The mapping from point A to point C can also be explained analytically. From 
A to C the collection of points along the contour is imaginary. Hence, from A to C, 
G{s) = G(jco), or from Figure 10.26(b), 
= (-140,2+ 30)+y(43a,-aP) 
(10-40) 
re 
\ 
5 0° 
Gijco) = (s + 1){S + 3)(5 + 10) 
Multiplying the numerator and denominator by the complex conjugate of the 
denominator, we obtain 
= ^ ( - 1 4 ^ + 30)-7(430,-^) 
(-14o,2 + 30)2 + (43o,-o,3)2 
At zero frequency, Gijco) = 500/30 = 50/3. Thus, the Nyquist diagram starts at 
50/3 at an angle of 0°. As co increases the real part remains positive, and the 
imaginary part remains negative. At co = -y/30/14, the real part becomes negative. 
At co = -\A3, the Nyquist diagram crosses the negative real axis since the imaginary 
term goes to zero. The real value at the axis crossing, point Q in Figure 10.27(c), 
found by substituting into Eq. (10.41), is -0.874. Continuing toward co = oo, the 
real part is negative, and the imaginary part is positive. At infinite frequency 
Gijco) 5¾ 500//a,3, or approximately zero at 90°. 
Around the infinite semicircle from point C to point D shown in Figure 10.27(5), 
the vectors rotate clockwise, each by 180°. Hence, the resultant undergoes a counter-
clockwise rotation of 3 x 180°, starting at point C and ending at point D' of 
Figure 10.27(c). Analytically, we can see this by assuming that around the infinite 
semicircle, the vectors originate approximately at the origin and have infinite length. 
For any point on the s-plane, the value of G(s) can be found by representing each 
complex number in polar form, as follows: 
G^ 
= (^-^^-0(^-3^-0(^-10^-10) 
( 1°' 4 2 ) 
where 2?_, is the magnitude of the complex number (^ + 1), and 9--, is the angle of 
the complex number (s + i). Around the infinite semicircle, all R-t are infinite, and 
we can use our assumption to approximate the angles as if the vectors originated at 
the origin. Thus, around the infinite semicircle, 
°W= 0^(9-, f?-, + a-ro)
 = 0^-( g- +^ + ^
 
(1°-
43) 
At point C in Figure 10.27(6), the angles are all 90°. Hence, the resultant is 0Z - 270°, 
shown as point C in Figure 10.27(c). Similarly, at point D, G{s) = 0Z + 270° and 
maps into point D'. You can select intermediate points to verify the spiral whose 
radius vector approaches zero at the origin, as shown in Figure 10.27(c). 
The negative imaginary axis can be mapped by realizing that the real part of 
G(jco)H(jco) is always an even function, whereas the imaginary part of G(ja))H(jco) 
is an odd function. That is, the real part will not change sign when negative values of 

10.4 Sketching the Nyquist Diagram 
567 
co are used, whereas the imaginary part will change sign. Thus, the mapping of the 
negative imaginary axis is a mirror image of the mapping of the positive imaginary 
axis. The mapping of the section of the contour from points D to A is drawn as a 
mirror image about the real axis of the mapping of points A to C. 
In the previous example, there were no open-loop poles situated along the 
contour enclosing the right half-plane. If such poles exist, then a detour around the 
poles on the contour is required; otherwise, the mapping would go to infinity in an 
undetermined way, without angular information. Subsequently, a complete sketch of 
the Nyquist diagram could not be made, and the number of encirclements of —1 
could not be found. 
Let us assume a G(s)H(s) = N(s)/sD(s) where D(s) has imaginary roots. The s 
term in the denominator and the imaginary roots of D(s) are poles of G(s)H(s) that 
lie on the contour, as shown in Figure 10.28(a). To sketch the Nyquist diagram, the 
contour must detour around each open-loop pole lying on its path. The detour can be 
to the right of the pole, as shown in Figure 10.28(6), which makes it clear that each 
pole's vector rotates through +180° as we move around the contour near that pole. 
This knowledge of the angular rotation of the poles on the contour permits us to 
complete the Nyquist diagram. Of course, our detour must carry us only an infini-
tesimal distance into the right half-plane, or else some closed-loop, right-half-plane 
poles will be excluded in the count. 
We can also detour to the left of the open-loop poles. In this case, each pole 
rotates through an angle of -180° as we detour around it. Again, the detour must be 
infinitesimally small, or else we might include some left-half-plane poles in the 
count. Let us look at an example. 
5-plane 
s-plane 
s-plane 
»- o-
— o 
FIGURE 10.28 
Detouring 
around open-loop poles: 
a. poles on contour; 
b. detour right; 
c detour left 
Example 10.5 
Nyquist Diagram for Open-Loop Function with Poles on Contour 
PROBLEM: Sketch the Nyquist diagram of the unity feedback system of Fig-
ure 10.10, where G{s) = {s + 2)/s2. 
SOLUTION: The system's two poles at the origin are on the contour and must be 
bypassed, as shown in Figure 10.29(a). The mapping starts at point A and continues 
in a clockwise direction. Points A, B, C, D, E, and F of Figure 10.29(a) map 
respectively into points A', B\ C, D, E!, andF' of Figure 10.29(6). 
At point A, the two open-loop poles at the origin contribute 2 x 90° = 180°, 
and the zero contributes 0°. The total angle at point A is thus -180°. Close to the 
origin, the function is infinite in magnitude because of the close proximity to the 

568 
Chapter 10 
Frequency Response Techniques 
Test radius 
GH-plane 
Two poles 
FIGURE 10.29 a. Contour for Example 10.5; b. Nyquist diagram for Example 10.5 
two open-loop poles. Thus, point A maps into point A', located at infinity at an 
angle of-180°. 
Moving from point A to point B along the contour yields a net change in angle 
of +90° from the zero alone. The angles of the poles remain the same. Thus, the 
mapping changes by +90° in the counterclockwise direction. The mapped vector 
goes from -180° aXA' to - 90° atS'. At the same time, the magnitude changes 
from infinity to zero since at point B there is one infinite length from the zero 
divided by two infinite lengths from the poles. 
Alternately, the frequency response can be determined analytically from 
G(jco) — (2 +;'&>)/(—<y2), considering co going from 0 to oo. At low frequencies, 
G(jco) « 2/(-o)z), or oo Z180°. At high frequencies, G(jco) «//(-»), or 0Z - 90°. 
Also, the real and imaginary parts are always negative. 
As we travel along the contour BCD, the function magnitude stays at zero 
(one infinite zero length divided by two infinite pole lengths). As the vectors move 
through BCD, the zero's vector and the two poles' vectors undergo changes of 
-180° each. Thus, the mapped vector undergoes a net change of +180°, which is the 
angular change of the zero minus the sum of the angular changes of the poles 
{-180 - [2(-180)] = +180}. The mapping is shown as B' C' D', where the resultant 
vector changes by +180° with a magnitude of e that approaches zero. 
From the analytical point of view, 
^-pfife) 
(ia44) 
anywhere on the s-plane where i?_2Z0_2 is the vector from the zero at -2 to any 
point on the s-plane, and ROZ8Q is the vector from a pole at the origin to any point 
on the s-plane. Around the infinite semicircle, all J?_,- = oo, and all angles can be 
approximated as if the vectors originated at the origin. Thus at point B, G(s) = 
0Z - 90° since all 0_f = 90° in Eq. (10.44). At point C, all R-t = oo, and all 0_f- = 0° 
in Eq. (10.44). Thus, G(s) = 0Z0°. At point D, all /?_, = oo, and all 0_* = -90° in 
Eq. (10.44). Thus, G(s) = 0Z90°. 
The mapping of the section of the contour from D to E is a mirror image of 
the mapping of A to B. The result is D' to E'. 
Finally, over the section EFA, the resultant magnitude approaches infinity. 
The angle of the zero does not change, but each pole changes by +180°. This 
change yields a change in the function of -2 x 180° = -360°. Thus, the mapping 
from E'toA' is shown as infinite in length and rotating -360°. Analytically, 
we can use Eq. (10.44) for the points along the contour EFA. At E, 

10.5 Stability via the Nyquist Diagram 
569 
G(s) = (2Z0°)/[(eZ - 90°)(eZ - 90°)] = 00ZI8O0. At F, G{s) = (2Z0°)/[(<FZ0°) 
(eZO0)] = ooZ0°. At A, G{s) = (2Z0°)/[(6Z90o)(<=Z90°)] = ooZ - 180°. 
The Nyquist diagram is now complete, and a test radius drawn from - 1 in 
Figure 10.29(6) shows one counterclockwise revolution, and one clockwise revo-
lution, yielding zero encirclements. 
Students who a r e u s i n g MATLAB should now run chl0p2 in Appendix B. 
You w i l l l e a r n how t o use MATLAB t o make a Nyquist p l o t and l i s t t h e 
p o i n t s on t h e p l o t . You w i l l a l s o l e a r n how t o s p e c i f y a range for 
frequency. This e x e r c i s e s o l v e s Example 10.5 u s i n g MATLAB. 
PROBLEM: Sketch the Nyquist diagram for the system shown in Figure 10.10 where 
G{S) 
= (. + 2)(5 + 4) 
Compare your sketch with the polar plot in Skill-Assessment Exercise 10.1(c). 
ANSWER: The complete solution is located at www.wiley.com/college/nise. 
In this section, we learned how to sketch a Nyquist diagram. We saw how to 
calculate the value of the intersection of the Nyquist diagram with the negative real 
axis. This intersection is important in determining the number of encirclements of 
—1. Also, we showed how to sketch the Nyquist diagram when open-loop poles exist 
on the contour; this case required detours around the poles. In the next section, we 
apply the Nyquist criterion to determine the stability of feedback control systems. 
( 1 0 . 5 
Stability via the Nyquist Diagram 
We now use the Nyquist diagram to determine a system's stability, using the simple 
equation Z = P — N. The values of P, the number of open-loop poles of G(s)H(s) 
enclosed by the contour, and N, the number of encirclements the Nyquist diagram 
makes about — 1, are used to determine Z, the number of right-half-plane poles of 
the closed-loop system. 
If the closed-loop system has a variable gain in the loop, one question we would 
like to ask is, "For what range of gain is the system stable?" This question, previously 
answered by the root locus method and the Routh-Hurwitz criterion, is now answered 
via the Nyquist criterion. The general approach is to set the loop gain equal to unity 
and draw the Nyquist diagram. Since gain is simply a multiplying factor, the effect of 
the gain is to multiply the resultant by a constant anywhere along the Nyquist diagram. 
For example, consider Figure 10.30, which summarizes the Nyquist approach 
for a system with variable gain, K. As the gain is varied, we can visualize the Nyquist 
diagram in Figure 10.30(c) expanding (increased gain) or shrinking (decreased gain) 
like a balloon. This motion could move the Nyquist diagram past the —1 point, 
changing the stability picture. For this system, since P = 2, the critical point must be 
encircled by the Nyquist diagram to yield N = 2 and a stable system. A reduction in 
MATLAB 

570 
Chapter 10 
Frequency Response Techniques 
m +, > « * , 
K(s + 3)(s + 5) 
(5-2)(5-4) 
Qs) 
(a) 
FIGURE 10.30 
Demonstrating 
Nyquist stability: a. system; 
b. contour; c. Nyquist diagram 
5-plane 
(O = 
\\f 
-1.33 I 
Im 
1 
K 
c \ 
B' / 
GH-p\ane 
1 
A'i 15 
J 8 
Re 
ib) 
(c) 
Trylt 10.2 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to plot the 
Nyquist diagram of the system 
shown in Figure 10.30(a). 
G=zpk([-3,-5], . . . 
[2,4],1) 
nyquiSt(G) 
After the Nyquist diagram 
appears, click on the curve and 
drag to read the coordinates. 
gain would place the critical point outside the Nyquist diagram where N = 0, 
yielding Z = 2, an unstable system. 
From another perspective we can think of the Nyquist diagram as remaining 
stationary and the —1 point moving along the real axis. In order to do this, we set the 
gain to unity and position the critical point at — 1/K rather than —1. Thus, the critical 
point appears to move closer to the origin as K increases. 
Finally, if the Nyquist diagram intersects the real axis at —1, then G(jco)H(jco) — 
—1. From root locus concepts, when G(s)H(s) = —1, the variable s is a closed-loop 
pole of the system. Thus, the frequency at which the Nyquist diagram intersects —1 is 
the same frequency at which the root locus crosses the /co-axis. Hence, the system is 
marginally stable if the Nyquist diagram intersects the real axis at —1. 
In summary, then, if the open-loop system contains a variable gain, K, set K = 
1 and sketch the Nyquist diagram. Consider the critical point to be at -1/K rather 
than at - 1 . Adjust the value of K to yield stability, based upon the Nyquist criterion. 
Example 10.6 
Range of Gain for Stability via The Nyquist Criterion 
PROBLEM: For the 
unity 
feedback 
system 
of 
Figure 
10.10, where 
G{s) = K/[s(s + 3)(^ + 5)], find the range of gain, K, for stability, instability, and 
the value of gain for marginal stability. For marginal stability also find the 
frequency of oscillation. Use the Nyquist criterion. 
SOLUTION: First set K = 1 and sketch the Nyquist diagram for the system, using 
the contour shown in Figure 10.31(a). For all points on the imaginary axis, 
GUco)H(jco) = 
K 
5(5 + 3)(5 + 5) 
-8o)2 - ;'(15&> - co3 
K=1_64o;4 + w2(15-ft>2; 
(10.45) 
At co = 0, G{jco)H{jco) = -0.0356 -/00. 

10.5 Stability via the Nyquist Diagram 
571 
Im 
• • 
<T 
* 
(0 = 0 -
Gtf-plane I 
-l - O.OOX3/Vy' 
« = +« 
£»=-<« 
flj = 0'•+ 
(ft) 
Next find the point where the Nyquist diagram intersects the negative real 
axis. Setting the imaginary part of Eq. (10.45) equal to zero, we find co = vT5. 
Substituting this value of co back into Eq. (10.45) yields the real part of -0.0083. 
Finally, at co = oo, G(jco)H{jco) = G(s)H(s)\sHoo = l/(yoo)3 = 0Z - 270°. 
From the contour of Figure 10.31(a), P = 0; for stability N must then be 
equal to zero. From Figure 10.31(^), the system is stable if the critical point lies 
outside the contour (N = 0), so that Z = P — N = 0. Thus, K can be increased by 
1/0.0083 = 120.5 before the Nyquist diagram encircles — 1. Hence, for stability, 
K < 120.5. For marginal stability K = 120.5. At this gain the Nyquist diagram 
intersects — 1, and the frequency of oscillation is \/l5rad/s. 
FIGURE 10.31 
a. Contour for Example 10.6; 
b. Nyquist diagram 
Now that we have used the Nyquist diagram to determine stability, we can 
develop a simplified approach that uses only the mapping of the positive /co-axis. 
Stability via Mapping Only the Positiveyw-Axis 
Once the stability of a system is determined by the Nyquist criterion, continued 
evaluation of the system can be simplified by using just the mapping of the positive 
/co-axis. This concept plays a major role in the next two sections, where we discuss 
stability margin and the implementation of the Nyquist criterion with Bode plots. 
Consider the system shown in Figure 10.32, which is stable at low values of gain 
and unstable at high values of gain. Since the contour does not encircle open-loop 
s-plane 
Root locus 
Contour 
Im 
G//-plane , e 
-
\ 
> 
> 
N 
> 
Re 
FIGURE 10.32 
a. Contour and root locus of 
system that is stable for small 
gain and unstable for large gain; 
b. Nyquist diagram 

572 
Chapter 10 
Frequency Response Techniques 
jco 
Im 
(a) 
(b) 
FIGURE 10.33 
a. Contour and root locus of system that is unstable for small gain and stable for 
large gain; b. Nyquist diagram 
poles, the Nyquist criterion tells us that we must have no encirclements of —1 for the 
system to be stable. We can see from the Nyquist diagram that the encirclements of 
the critical point can be determined from the mapping of the positive/w-axis alone. If 
the gain is small, the mapping will pass to the right of —1, and the system will be 
stable. If the gain is high, the mapping will pass to the left of —1, and the system will 
be unstable. Thus, this system is stable for the range of loop gain, K, that ensures that 
the open-loop magnitude is less than unity at that frequency where the phase angle is 
180° (or, equivalently, —180°). This statement is thus an alternative to the Nyquist 
criterion for this system. 
Now consider the system shown in Figure 10.33, which is unstable at low values 
of gain and stable at high values of gain. Since the contour encloses two open-loop 
poles, two counterclockwise encirclements of the critical point are required for 
stability. Thus, for this case the system is stable if the open-loop magnitude is greater 
than unity at that frequency where the phase angle is 180° (or, equivalently, —180°). 
In summary, first determine stability from the Nyquist criterion and the 
Nyquist diagram. Next interpret the Nyquist criterion and determine whether the 
mapping of just the positive imaginary axis should have a gain of less than or greater 
than unity at 180°. If the Nyquist diagram crosses ±180° at multiple frequencies, 
determine the interpretation from the Nyquist criterion. 
Stability Design via Mapping Positive /co-Axis 
PROBLEM: Find the range of gain for stability and instability, and the gain for 
marginal stability, for the unity feedback system shown in Figure 10.10, where 
G(s) = K/[(s2 + 2s + 2)(s + 2)]. For marginal stability find the radian frequency of 
oscillation. Use the Nyquist criterion and the mapping of only the positive 
imaginary axis. 
SOLUTION: Since the open-loop poles are only in the left-half-plane, the Nyquist 
criterion tells us that we want no encirclements of -1 for stability. Hence, a gain 
less than unity at ±180° is required. Begin by letting K = 1 and draw the portion 
of the contour along the positive imaginary axis as shown in Figure 10.34(A). In 

jco 
10.5 Stability via the Nyquist Diagram 
Im 
573 
s-plane 
-2 
i 
X 
i 
-1 
X 
B 
Contour 
<*r~" 
n 
A 
,. 
G#-plane 
1 
20/-N 
<»=w/ 
B' 
•" 
1 
4 
/
" 
Re 
(a) 
(b) 
FIGURE 10.34 
a. Portion of contour to be mapped for Example 10.7; b. Nyquist diagram of 
mapping of positive imaginary axis 
Figure 10.34(6), the intersection with the negative real axis is found by letting 
5 = jco in G(s)H(s), setting the imaginary part equal to zero to find the frequency, 
and then substituting the frequency into the real part of G(jco)H{jco). Thus, for 
any point on the positive imaginary axis, 
G(jco)H(jco) = 
s—>ja> 
[s2+2s + 2){s + 2) 
4(1 - co2) -jco{6- co2) 
16(1 - co2)2 + co2{6 - co2)2 
(10.46) 
Setting the imaginary part equal to zero, we find co = \/6. Substituting this value 
back into Eq. (10.46) yields the real part, -(1/20) = (1/20)Z180°. 
This closed-loop system is stable if the magnitude of the frequency response is 
less than unity at 180°. Hence, the system is stable for K < 20, unstable for K > 20, 
and marginally stable for K = 20. When the system is marginally stable, the radian 
frequency of oscillation is \/6. 
Skill-Assessment Exercise 10.4 
PROBLEM: For the system shown in Figure 10.10, where 
G(i,) = (5 + 2)(5 + 4)(^ + 6) 
do the following: 
a. Plot the Nyquist diagram. 
b. Use your Nyquist diagram to find the range of gain, K, for stability. 
ANSWERS: 
a. See the answer at www.wiley.com/college/nise. 
b. Stable for K < 480 
WileyPLUS 
Control Solutions 
The complete solution is at www.wiley.com/college/nise. 

Chapter 10 
Frequency Response Techniques 
Gain Margin and Phase Margin via 
the Nyquist Diagram 
Now that we know how to sketch and interpret a Nyquist diagram to determine a 
closed-loop system's stability, let us extend our discussion to concepts that will 
eventually lead us to the design of transient response characteristics via frequency 
response techniques. 
Using the Nyquist diagram, we define two quantitative measures of how stable 
a system is. These quantities are called gain margin and phase margin. Systems with 
greater gain and phase margins can withstand greater changes in system parameters 
before becoming unstable. In a sense, gain and phase margins can be qualitatively 
related to the root locus, in that systems whose poles are farther from the imaginary 
axis have a greater degree of stability. 
In the last section, we discussed stability from the point of view of gain at 180° 
phase shift. This concept leads to the following definitions of gain margin and phase 
margin: 
Gain margin, GM. The gain margin is the change in open-loop gain, expressed in 
decibels (dB), required at 180° of phase shift to make the closed-loop system 
unstable. 
Phase margin, ¢^. The phase margin is the change in open-loop phase shift required 
at unity gain to make the closed-loop system unstable. 
These two definitions are shown graphically on the Nyquist diagram in Figure 10.35. 
Assume a system that is stable if there are no encirclements of —1. Using 
Figure 10.35, let us focus on the definition of gain margin. Here a gain difference 
between the Nyquist diagram's crossing of the real axis at — \/a and the - 1 critical 
point determines the proximity of the system to instability. Thus, if the gain of the 
system were multiplied by a units, the Nyquist diagram would intersect the critical 
point. We then say that the gain margin is a units, or, expressed in dB, GM = 20 log a. 
Notice that the gain margin is the reciprocal of the real-axis crossing expressed in dB. 
lm 
GW-plane 
Nyquist 
, diagram 
•Mi/* 
i 
\ - . 
i 
\ 
• - . 
i 
i \ 
v\ 
Gain difference \ 
before instability 
Unit circle 
\ 
\ 
\ 
Phase difference 
before instability 
^. 
Gain margin = GM = 20 log a 
Phase margin = $ M = « 
FIGURE 10.35 Nyquist diagram showing gain and phase margins 

10.6 Gain Margin and Phase Margin via the Nyquist Diagram 
575 
In Figure 10.35, we also see the phase margin graphically displayed. At point 
Q', where the gain is unity, a represents the system's proximity to instability. That is, 
at unity gain, if a phase shift of a degrees occurs, the system becomes unstable. 
Hence, the amount of phase margin is a. Later in the chapter, we show that phase 
margin can be related to the damping ratio. Thus, we will be able to relate 
frequency response characteristics to transient response characteristics as well 
as stability. We will also show that the calculations of gain and phase margins are 
more convenient if Bode plots are used rather than a Nyquist diagram, such as that 
shown in Figure 10.35. 
For now let us look at an example that shows the calculation of the gain and 
phase margins. 
Example 10.8 
Finding Gain and Phase Margins 
PROBLEM: Find the gain and phase margin for the system of Example 10.7 if 
K = 6. 
SOLUTION: To find the gain margin, first find the frequency where the Nyquist 
diagram crosses the negative real axis. Finding G(jco)H(jco), we have 
G(jco)H(jco) 
= 
•ya 
[s2+2s + 2)(5 + 2) 
6[4(1 - co2) - j(o{6 - co2)] 
1 6 ( 1 - ^ + 0)2(6-0)2)2 
(10.47) 
The Nyquist diagram crosses the real axis at a frequency of V6 rad/s. The real part 
is calculated to be —0.3. Thus, the gain can be increased by (1/0.3) = 3.33 before 
the real part becomes —1. Hence, the gain margin is 
GM = 20 log 3.33 = 10.45 dB 
(10.48) 
To find the phase margin, find the frequency in Eq. (10.47) for which the 
magnitude is unity. As the problem stands, this calculation requires computational 
tools, such as a function solver or the program described in Appendix H.2. Later in 
the chapter we will simplify the process by using Bode plots. Eq. (10.47) has unity gain 
at a frequency of 1.253 rad/s. At this frequency, the phase angle is -112.3°. The 
difference between this angle and -180° is 67.7°, which is the phase margin. 
Students who are using MATLAB should now run chl0p3 in Appendix B. 
You will learn how to use MATLAB to find gain margin, phase 
margin, zero dB frequency, and 180° frequency. This exercise 
solves Example 10.8 using MATLAB. 
MATLAB's LTI Viewer, with the Nyquist diagram selected, is an-
other method that may be used to find gain margin, phase margin, 
zero dB frequency, and 180° frequency. You are encouraged to 
study Appendix E, at www.wiley.com/college/nise, which con-
tains a tutorial on the LTI Viewer as well as some examples. 
Example E. 2 solves Example 10.8 using the LTI Viewer. 
MATLAB 
Gui Tool 

576 
Chapter 10 
Frequency Response Techniques 
Trylt 10.3 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to find the 
gain and phase margins of 
G(s)H(s) = 100/[(s+2) 
(5+4)(^+6)] using the Nyquist 
diagram. 
G=zpk([ ],[ -2,-4,-6],100) 
nyquist(G) 
After the Nyquist diagram 
appears: 
1. Right-click in the graph 
area. 
2. Select Characteristics. 
3. Select All Stability 
Margins. 
4. Let the mouse rest on the 
margin points to read the 
gain and phase margins. 
Skill-Assessment Exercise 10.5 
PROBLEM: Find the gain margin and the 180° frequency for the 
problem in Skill-Assessment Exercise 10.4 if K = 100. 
ANSWERS: Gain margin = 13.62 dB; 180° frequency = 6.63 rad/s 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
dJSJ 
Control Solutions 
In this section, we defined gain margin and phase margin and calculated them 
via the Nyquist diagram. In the next section, we show how to use Bode diagrams to 
implement the stability calculations performed in Sections 10.5 and 10.6 using the 
Nyquist diagram. We will see that the Bode plots reduce the time and simplify the 
calculations required to obtain results. 
I 
10.7 Stability, Gain Margin, and Phase Margin via 
Bode Plots 
In this section, we determine stability, gain and phase margins, and the range of gain 
required for stability. All of these topics were covered previously in this chapter, using 
Nyquist diagrams as the tool. Now we use Bode plots to determine these character-
istics. Bode plots are subsets of the complete Nyquist diagram but in another form. 
They are a viable alternative to Nyquist plots, since they are easily drawn without the 
aid of the computational devices or long calculations required for the Nyquist diagram 
and root locus. You should remember that all calculations applied to stability were 
derived from and based upon the Nyquist stability criterion. The Bode plots are an 
alternate way of visualizing and implementing the theoretical concepts. 
Determining Stability 
Let us look at an example and determine the stability of a system, implementing the 
Nyquist stability criterion using Bode plots. We will draw a Bode log-magnitude plot 
and then determine the value of gain that ensures that the magnitude is less than 
0 dB (unity gain) at that frequency where the phase is ±180°. 

10.7 Stability, Gain Margin, and Phase Margin via Bode Plots 
577 
Example 10.9 
Range of Gain for Stability via Bode Plots 
PROBLEM: Use Bode plots to determine the range of K within which the unity 
feedback system shown in Figure 10.10is stable. Let G(s) = K/[(s + 2){s + A)(s + 5)]. 
SOLUTION: Since this system has all of its open-loop poles in the left-half-plane, 
the open-loop system is stable. Hence, from the discussion of Section 10.5, the 
closed-loop system will be stable if the frequency response has a gain less than unity 
when the phase is 180°. 
Begin by sketching the Bode magnitude and phase diagrams shown in Figure 
10.36. In Section 10.2, we summed normalized plots of each factor of G(s) to create 
the Bode plot. We saw that at each break frequency, the slope of the resultant Bode 
plot changed by an amount equal to the new slope that was added. Table 10.6 
demonstrates this observation. In this example, we use this fact to draw the Bode 
plots faster by avoiding the sketching of the response of each term. 
The low-frequency gain of G(s)H(s) is found by setting 5 to zero. Thus, the 
Bode magnitude plot starts at AT/40. For convenience, let K = 40 so that the log-
magnitude plot starts at 0 dB. At each break frequency, 2,4, and 5, a 20 dB/decade 
increase in negative slope is drawn, yielding the log-magnitude plot shown in 
Figure 10.36. 
The phase diagram begins at 0° until a decade below the first break frequency 
of 2 rad/s. At 0.2 rad/s the curve decreases at a rate of — 457decade, decreasing an 
additional 45°/decade at each subsequent frequency (0.4 and 0.5 rad/s) a decade 
below each break. At a decade above each break frequency, the slopes are reduced 
by 45°/decade at each frequency. 
o 
-20 
-40 
-60 
(N 
-80 
-100 
-120 
1 A 
--20dB/dt 
-i. 
——, 
c 
UdJ 
7?n. 
1/ -
i/dec 
\ 
> 
\ 
\ 
" ' -60 dB/ 
;j[ 
0.01 
0.1 
1 
Frequency (rad/s) 
10 
100 
/ 
-457de c 
90°/ 
7 
/ / 
de 
K-"^ ^ \ 
S \ 
sj 
s \ 
\ 
1357de 
-¾¾ 
?0°A A 
C 
lec 
\ 
-A 
s 
57dec 
fllll 
^ 5 
? 
a 
-90 
60 
0J S -135 
u 
I 
-180 
-225 
-270 
0.01 
0.1 
1 
10 
100 
Frequency (rad/s) 
FIGURE 10.36 Bode log-magnitude and phase diagrams for the system of Example 10.9 

578 
Chapter 10 
Frequency Response Techniques 
MATLAB 
The Nyquist criterion for this example tells us that we want zero encir-
clements of —1 for stability. Thus, we recognize that the Bode log-magnitude 
plot must be less than unity when the Bode phase plot is 180°. Accordingly, 
we see that at a frequency of 7 rad/s, when the phase plot is -180°, the 
magnitude plot is —20 dB. Therefore, an increase in gain of +20 dB is possible 
before the system becomes unstable. Since the gain plot was scaled for a gain of 
40, +20 dB (a gain of 10) represents the required increase in gain above 40. 
Hence, the gain for instability is 40 x 10 = 400. The final result is 0 < K < 400 
for stability. 
This result, obtained by approximating the frequency response by Bode 
asymptotes, can be compared to the result obtained from the actual frequency 
response, which yields a gain of 378 at a frequency of 6.16 rad/s. 
Students who are using MATLAB should now run chl 0p4 in Appendix B. 
You will learn how to use MATLAB to find the range of gain for 
stability via frequency response methods . This exercise solves 
Example 10. 9 using MATLAB. 
Evaluating Gain and Phase Margins 
Next we show how to evaluate the gain and phase margins by using Bode plots 
(Figure 10.37). The gain margin is found by using the phase plot to find the 
frequency, cocM, where the phase angle is 180°. At this frequency, we look at 
the magnitude plot to determine the gain margin, GM, which is the gain required 
to raise the magnitude curve to 0 dB. To illustrate, in the previous example with 
K = 40, the gain margin was found to be 20 dB. 
The phase margin is found by using the magnitude curve to find the frequency, 
Mow, where the gain is 0 dB. On the phase curve at that frequency, the phase margin, 
(f)M, is the difference between the phase value and 180°. 
urn) 
OdB 
180° 
Phase (degrees) 
- log a 
FIGURE 10.37 Gain and phase margins on the Bode diagrams 

10.7 Stability, Gain Margin, and Phase Margin via Bode Plots 
579 
Example 10.10 
Gain and Phase Margins from Bode Plots 
PROBLEM: If K = 200 in the system of Example 10.9, find the gain margin and the 
phase margin. 
SOLUTION: The Bode plot in Figure 10.36 is scaled to a gain of 40. If K = 200 (five 
times as great), the magnitude plot would be 20 log 5 = 13.98 dB higher. 
To find the gain margin, look at the phase plot and find the frequency where the 
phase is 180°. At this frequency, determine from the magnitude plot how much the gain 
can be increased before reaching 0 dB. In Figure 10.36, the phase angle is 180° at 
approximately 7 rad/s. On the magnitude plot, the gain is -20 + 13.98 = -6.02 dB. 
Thus, the gain margin is 6.02 dB. 
To find the phase margin, we look on the magnitude plot for the frequency 
where the gain is 0 dB. At this frequency, we look on the phase plot to find the 
difference between the phase and 180°. This difference is the phase margin. Again, 
remembering that the magnitude plot of Figure 10.36 is 13.98 dB lower than the 
actual plot, the 0 dB crossing (-13.98 dB for the normalized plot shown in Fig-
ure 10.36) occurs at 5.5 rad/s. At this frequency the phase angle is —165°. Thus, the 
phase margin is -165° - (-180°) = 15°. 
MATLAB's LTI Viewer, with Bode plots selected, is another method 
that may be used to find gain margin, phase margin, zero dB 
frequency, and 180° frequency. You are encouraged to study 
AppendixEatwww.wiley.com/college/nise, which contains a tu-
torial on the LTI Viewer as well as some examples. Example E.3 
solves Example 10.10 using the LTI Viewer. 
Gui Tool 
•dUIB 
Skill-Assessment Exercise 10.6 
PROBLEM: For the system shown in Figure 10.10, where 
G(lS) = (5 + 5)(5 + 20)(5 + 50) 
do the following: 
a. Draw the Bode log-magnitude and phase plots. 
b. Find the range of K for stability from your Bode plots. 
c. Evaluate gain margin, phase margin, zero dB frequency, and 180° frequency 
from your Bode plots for K -10,000. 
ANSWERS: 
a. See the answer at www.wiley.com/college/nise. 
b. K< 96,270 
c. Gain margin=19.67 dB, phase margin=92.9°, zero dB frequency = 7.74 rad/s, 
and 180° frequency = 36.7 rad/s 
The complete solution is at www.wiley.com/college/nise. 
TVylt 10.4 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to solve 
Skill-Assessment Exercise 
10.6(c) using Bode plots. 
G=zpk([], . . . 
[ - 5 , - 2 0 , - 5 0 ] , 10000) 
bode(G) 
g r i d on 
After the Bode plot appears: 
1. Right-click in the graph 
area. 
2. Select Characteristics. 
3. Select All Stability 
Margins. 
4. Let the mouse rest on the 
margin points to read the 
gain and phase margins. 

580 
Chapter 10 
Frequency Response Techniques 
I 
R(s) + , 
We have seen that the open-loop frequency response curves can be used not 
only to determine whether a system is stable but to calculate the range of loop gain 
that will ensure stability. We have also seen how to calculate the gain margin and the 
phase margin from the Bode diagrams. 
Is it then possible to parallel the root locus technique and analyze and design 
systems for transient response using frequency response methods? We will begin to 
explore the answer in the next section. 
10.8 Relation Between Closed-Loop Transient and 
Closed-Loop Frequency Responses 
Damping Ratio and Closed-Loop Frequency Response 
In this section, we will show that a relationship exists between a system's transient 
response and its closed-loop frequency response. In particular, consider the second-
order feedback control system of Figure 10.38, which we have been using 
c($^ 
since Chapter 4, where we derived relationships between the closed-loop 
transient response and the poles of the closed-loop transfer function, 
E(s) 
s(s + 2£(Dtt) 
FIGURE 10.38 Second-order closed-loop 
system 
R(s) = T(s) = 
cot 
s2 + 2£(ons + a% 
(10.49) 
We now derive relationships between the transient response of Eq. (10.49) and 
characteristics of its frequency response. We define these characteristics and relate 
them to damping ratio, natural frequency, settling time, peak time, and rise time. In 
Section 10.10, we will show how to use the frequency response of the open-loop 
transfer function 
G(s) = 
cot 
s(s + 2;con) 
(10.50) 
shown in Figure 10.38, to obtain the same transient response characteristics. 
Let us now find the frequency response of Eq. (10.49), define characteristics of 
this response, and relate these characteristics to the transient response. Substituting 
s=jco into Eq. (10.49), we evaluate the magnitude of the closed-loop frequency 
response as 
M = \T(ja>)\ = 
to: 
(aft-co2)2 +4$2co2co2 
(10.51) 
A representative sketch of the log plot of Eq. (10.51) is shown in Figure 10.39. 
We now show that a relationship exists between the peak value of the closed-
loop magnitude response and the damping ratio. Squaring Eq. (10.51), differentiat-
ing with respect to co2, and setting the derivative equal to zero yields the maximum 
value of M, Mp, where 
(10.52) 

10.8 Relation Between Closed-Loop Transient and Closed-Loop Frequency Responses 
581 
-20 
logfflp logOBW 
Log-frequency (rad/s) 
at a frequency, (op, of 
(On 
= 
= w n V/l-2C 2 
(10.53) 
Since £ is related to percent overshoot, we can plot Mp vs. percent overshoot. The 
result is shown in Figure 10.40. 
Equation (10.52) shows that the maximum magnitude on the frequency 
response curve is directly related to the damping ratio and, hence, the percent 
overshoot. Also notice from Eq. (10.53) that the peak frequency, cop, is not the 
natural frequency. However, for low values of damping ratio, we can assume that the 
peak occurs at the natural frequency. Finally, notice that there will not be a peak at 
frequencies above zero if £ > 0.707. This limiting value of £ for peaking on the 
magnitude response curve should not be confused with overshoot on the step 
response, where there is overshoot for 0 < £ < 1. 
Response Speed and Closed-Loop Frequency Response 
Another relationship between the frequency response and time response is between 
the speed of the time response (as measured by settling time, peak time, and rise 
time) and the bandwidth of the closed-loop frequency response, which is defined 
here as the frequency, G>BW> at which the magnitude response curve is 3 dB down 
from its value at zero frequency (see Figure 10.39). 
30 
40 
50 
Percent overshoot 
70 
FIGURE 10.39 Representative 
log-magnitude plot of 
Eq. (10.51) 
FIGURE 10.40 Closed-loop 
frequency response peak vs. 
percent overshoot for a two-
pole system 

Chapter 10 
Frequency Response Techniques 
The bandwidth of a two-pole system can be found by finding that frequency for 
which M = \j\fl 
(that is, - 3 dB) in Eq.(10.51). The derivation is left as an exercise 
for the student. The result is 
ft>BW ~-= w«y(i--2£2) + V4£4-4£2+2 
(10.54) 
To relate &>Bw to settling time, we substitute con = 4/T5£ into Eq. (10.54) and obtain 
-4c2+2 
(10.55) 
Similarly, since, con — 7t/{Tpyi 
— £2), 
^ 
= rvT?^ ( 1" 2 f l + v ^ -4f2 + 2 
(10.56) 
To relate the bandwidth to rise time, Tr, we use Figure 4.16, knowing the desired £ and Tr. 
For example, assume £ = 0.4 and Tr = 0.2 second. Using Figure 4.16, the ordinate 
Trco„ = 1.463, from which con = 1.463/0.2 = 7.315 rad/s. Using Eq. (10.54), wBw = 
10.05 rad/s. Normalized plots of Eqs. (10.55) and (10.56) and the relationship between 
bandwidth normalized by rise time and damping ratio are shown in Figure 10.41. 
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Damping ratio 
(a) 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Damping ratio 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Damping ratio 
(c) 
FIGURE 10.41 Normalized bandwidth vs. damping ratio for a. settling time; b. peak time; 
c. rise time 

10.9 Relation Between Closed- and Open-Loop Frequency Responses 
583 
Skill-Assessment Exercise 10.7 
PROBLEM: Find the closed-loop bandwidth required for 20% overshoot and 
2-seconds settling time. 
ANSWER: wBw = 5.79rad/s 
The complete solution is at www.wiley.com/college/nise. 
In this section, we related the closed-loop transient response to the closed-loop 
frequency response via bandwidth. We continue by relating the closed-loop fre-
quency response to the open-loop frequency response and explaining the impetus. 
( 
10.9 Relation Between Closed- and 
Open-Loop Frequency Responses 
At this point, we do not have an easy way of finding the closed-loop frequency response 
from which we could determine Mp and thus the transient response.2 As we have seen, 
we are equipped to rapidly sketch the open-loop frequency response but not the closed-
loop frequency response. However, if the open-loop response is related to the closed-
loop response, we can combine the ease of sketching the open-loop response with the 
transient response information contained in the closed-loop response. 
Constant M Circles and Constant N Circles 
Consider a unity feedback system whose closed-loop transfer function is 
r«=r?§b 
(10-57) 
The frequency response of this closed-loop function is 
Since G(jco) is a complex number, let G(ja>) = P{co) +jQ(co) mEq. (10.58), which yields 
P(co)+jQ(co) 
iUC0) 
[(P(a>) + 1)+/G(a>)] 
[W^} 
Therefore, 
M' = yr\jco)\^r^ 
•• 
r ;;;; 
: 
uo.60) 
Eq. (10.60) can be put into the form 
[(P(co) + 1)2 + Q2(co)} 
M2 \2 
„-, 
M2 
i +<22 = — p 
r 
(10-61) 
M2~lJ 
* 
(M2-l)2 
K 
' 
2 At the end of this subsection, we will see how to use MATLAB to obtain closed-loop frequency 
responses. 

584 
Chapter 10 
Frequency Response Techniques 
M = 0.7 
*- Re 
-4 
-3 
-2 
FIGURE 10.42 Constant M circles 
which is the equation of a circle of radius M/(M2 - 1) centered at [—M2/(M2 - 1 ) , 0 ] . 
These circles, shown plotted in Figure 10.42 for various values of M, are called constant 
M circles and are the locus of the closed-loop magnitude frequency response for unity 
feedback systems. Thus, if the polar frequency response of an open-loop function, 
G(s), is plotted and superimposed on top of the constant M circles, the closed-loop 
magnitude frequency response is determined by each intersection of this polar plot 
with the constant M circles. 
Before demonstrating the use of the constant M circles with an example, let us 
go through a similar development for the closed-loop phase plot, the constant 
N circles. From Eq. (10.59), the phase angle, 0, of the closed-loop response is 
1 G H 
-1 
tan - x ~£-4 - tan 
] 
P(co) 
Q(°>) 
P(co) + 1 
— tan - l 
Pico) 
P{a>) + 1 
(10.62) 
1 + QHf 
(2(0)) 
P(m) \P(o>) + 1 
after using tan (a - 0) = (tana - tan £)/(1 -I- tan a tan )3). Dropping the func-
tional notation, 
tan 4> = N = 
Q 
pZ + P+Q7 
Equation (10.63) can be put into the form of a circle, 
+ 
Q-
1 \ 2 _N2 + 
2N/ 
AN2 
(10.63) 
(10.64) 

10.9 Relation Between Closed- and Open-Loop Frequency Responses 
Im 
G-plane 
585 
-3 
FIGURE 10.43 
-2 
-1 
Constant N circles 
which is plotted in Figure 10.43 for various values of N. The circles of this plot are 
called constant N circles. Superimposing a unity feedback, open-loop frequency 
response over the constant N circles yields the closed-loop phase response of the 
system. Let us now look at an example of the use of the constant M and N circles. 
Example 10.11 
Closed-Loop Frequency Response from Open-Loop Frequency Response 
PROBLEM: Find the closed-loop frequency response of the unity feedback system 
shown in Figure 10.10, where G(s) = 50/[s(s+ 3)(s+ 6)], using the constant M 
circles, N circles, and the open-loop polar frequency response curve. 
SOLUTION: First evaluate the open-loop frequency function and make a polar 
frequency response plot superimposed over the constant M and N circles. The 

586 
Chapter 10 
Frequency Response Techniques 
-3 
o)= 0.81 
-
4
-
3
-
2
-
1
0 
1 
2 
FIGURE 10.44 Nyquist diagram for Example 10.11 and constant M and N circles 
open-loop frequency function is 
G(jco) = 
50 
-9a)2 + j{lSco - cov 
(10.65) 
from which the magnitude, \G(jco)\, and phase, ZG(jco), can be found and plotted. 
The polar plot of the open-loop frequency response (Nyquist diagram) is shown 
superimposed over the M and N circles in Figure 10.44. 
FIGURE 10.45 
Closed-loop 
frequency response for 
Example 10.11 
(0=2.5 

10.9 Relation Between Closed- and Open-Loop Frequency Responses 
587 
The closed-loop magnitude frequency response can now be obtained by 
finding the intersection of each point of the Nyquist plot with the M circles, while 
the closed-loop phase response can be obtained by finding the intersection of each 
point of the Nyquist plot with the N circles. The result is shown in Figure 10.45.3 
Students who are usingMATLAB should now run chl0p5 in Appendix B. 
You will learn how to use MATLAB to find the closed-loop frequency 
response. This exercise solves Example 10.11 using MATLAB. 
Nichols Charts 
A disadvantage of using the M and N circles is that changes of gain in the open-loop 
transfer function, G(s), cannot be handled easily. For example, in the Bode plot, a 
gain change is handled by moving the Bode magnitude curve up or down an amount 
equal to the gain change in dB. Since the M and N circles are not dB plots, changes in 
gain require each point of G(jco) to be multiplied in length by the increase or 
decrease in gain. 
Another presentation of the M and N circles, called a Nichols chart, displays 
the constant M circles in dB, so that changes in gain are as simple to handle as in the 
Bode plot. A Nichols chart is shown in Figure 10.46. The chart is a plot of open-loop 
magnitude in dB vs. open-loop phase angle in degrees. Every point on the M circles 
can be transferred to the Nichols chart. Each point on the constant M circles is 
represented by magnitude and angle (polar coordinates). Converting the magnitude 
to dB, we can transfer the point to the Nichols chart, using the polar coordinates with 
magnitude in dB plotted as the ordinate, and the phase angle plotted as the abscissa. 
Similarly, the TV circles also can be transferred to the Nichols chart. 
-280 
-260 
-240 
-220 
-200 
-180 
-160 -140 
-120 
-100 
-80 
Phase (degrees) 
FIGURE 10.46 Nichols chart 
3 You are cautioned not to use the closed-loop polar plot for the Nyquist criterion. The closed-loop 
frequency response, however, can be used to determine the closed-loop transient response, as discussed in 
Section 10.8. 

588 
Chapter 10 
Frequency Response Techniques 
FIGURE 10.47 Nichols chart 
with frequency response for 
G{s) = K/[s(s + l){s + 2)} 
superimoposed. Values for 
K = 1 and K = 3.16 are shown 
MATLAB 
Gui Tool 
25 
20 
15 
a io - - - - * = 
-5 
-10 
-15 
-355° 
L-340°* 
.-320°' 
-300° 
t 
-280° 
! 
! 
i 
""^-^U-^T^ 
11 
[ 
J ^^"*\ 
. ^ ^ - . - 1 . 4 - 7 ^ -
( /7><ti\W^ 
/ 
/ \ / 
— 7 
0--260 5-240° 
vT2s?^ * >^ 
^y5=pslli 
»=•1 /l.p 
35^551¾¾ 
TSr v 
•»1*1 \ ._ 
-220°-200°-180°-l60° 140° 
^
$ 
/A 
_2()° 
.0.707 
& U C -
V--T 
-60° 
A——fiA^" 
~ T 
T \ 
\ | -80° 
-i20°-mo°-gn° 
-280 
-260 
-240 
-220 
-200 
-180 
-160 
-140 
-120 
-100 
-I 
Phase (degrees) 
For example, assume the function 
G(s) = 
K 
s{s + l){s + 2) 
(10.66) 
Superimposing the frequency response of G(s) on the Nichols chart by plotting 
magnitude in dB vs. phase angle for a range of frequencies from 0.1 to 1 rad/s, we 
obtain the plot in Figure 10.47 for K = 1. If the gain is increased by 10 dB, simply 
raise the curve for K = 1 by 10 dB and obtain the curve for K = 3.16(10 dB). The 
intersection of the plots of G(jco) with the Nichols chart yields the frequency 
response of the closed-loop system. 
Students who are using MATLAB should now run chl0p6 in Appendix B. 
You will learn how to use MATLAB to make a Nichols plot. This exer-
cise makes a Nichols plot of G(s) = l/[s(s+ l)(s + 2)] using MATLAB. 
MATLAB's LTI Viewer is an alternative method of obtaining the Nichols 
chart. You are encouraged to study Appendix E at www.wiley.com/ 
college/nise, which contains a tutorial on the LTI Viewer as well 
as some examples. Example E. 4 shows how to obtain Figure 10.47 using 
the LTI Viewer. 
Trylt 10.5 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to make a 
Nichols chart of the system 
given in Skill-Assessment 
Exercise 10.8 
G=zpk ( [ ] , . . . 
[-5,-20,-501,8000) 
nichols(G) 
grid on 
Skill-Assessment Exercise 10.8 
PROBLEM: Given the system shown in Figure 10.10, where 
8000 
G{s) = (5 + 5)(5 + 20)(5 + 50) 
WileyPLUS 
Control Solutions 
plot the closed-loop log-magnitude and phase frequency response plots using the 
following methods: 
a. M and TV circles 
b. Nichols chart 
ANSWER: The complete solution is at www.wiley.com/college/nise. 

10.10 Relation Between Closed-Loop Transient and Open-Loop Frequency Responses 
589 
[
10.10 Relation Between Closed-Loop 
Transient and Open-Loop 
Frequency Responses 
Damping Ratio From M Circles 
We can use the results of Example 10.11 to estimate the transient response 
characteristics of the system. We can find the peak of the closed-loop frequency 
response by finding the maximum M curve tangent to the open-loop frequency 
response. Then we can find the damping ratio, f, and subsequently the percent 
overshoot, via Eq. (10.52). The following example demonstrates the use of the 
open-loop frequency response and the M circles to find the damping ratio or, 
equivalently, the percent overshoot. 
Percent Overshoot from Open-Loop Frequency Response 
PROBLEM: Find the damping ratio and the percent overshoot expected from the 
system of Example 10.11, using the open-loop frequency response and the M circles. 
SOLUTION: Equation (10.52) shows that there is a unique relationship between the 
closed-loop system's damping ratio and the peak value, MP, of the closed-loop 
system's magnitude frequency plot. From Figure 10.44, we see that the Nyquist 
diagram is tangent to the 1.8 M circle. We see that this is the maximum value for the 
closed-loop frequency response. Thus, Mp = 1.8. 
We can solve for f by rearranging Eq. (10.52) into the following form: 
C 4-C 2 + (1/4M^) = 0 
(10.67) 
Since Mp = 1.8, then £ = 0.29 and 0.96. From Eq. (10.53), a damping ratio larger 
than 0.707 yields no peak above zero frequency. Thus, we select f = 0.29, which is 
equivalent to 38.6% overshoot. Care must be taken, however, to be sure we can 
make a second-order approximation when associating the value of percent over-
shoot to the value of £. A computer simulation of the step response shows 36% 
overshoot. 
So far in this section, we have tied together the system's transient response 
and the peak value of the closed-loop frequency response as obtained from the 
open-loop frequency response. We used the Nyquist plots and the M and N circles to 
obtain the closed-loop transient response. Another association exists between the 
open-loop frequency response and the closed-loop transient response that is easily 
implemented with the Bode plots, which are easier to draw than the Nyquist plots. 
Damping Ratio from Phase Margin 
Let us now derive the relationship between the phase margin and the damping ratio. 
This relationship will enable us to evaluate the percent overshoot from the phase 
margin found from the open-loop frequency response. 

590 
Chapter 10 
Frequency Response Techniques 
Consider a unity feedback system whose open-loop function 
G(s) = 
at 
s(s + 2¾¾¾) 
yields the typical second-order, closed-loop transfer function 
T(s) = 
0),, 
s2 + 2^cons + co2 
(10.68) 
(10.69) 
In order to evaluate the phase margin, we first find the frequency for which 
\G(ja>)\ = 1. Hence, 
,.,2 
\G(jco)\ = — co2 + j2£io„co\ 
The frequency, co\, that satisfies Eq. (10.70) is 
1 
0)1 = (On y -2£2 + v/l+4£ 4' 
The phase angle of G(jco) at this frequency is 
ZG(jco) = -90 - t a n - 1 - ^ -
(10.70) 
(10.71) 
= -90 - tan - l 
-2c2 + v^p+T 
~2£ 
(10.72) 
The difference between the angle of Eq. (10.72) and -180° is the phase margin, <f>M. Thus, 
<E>M = 90 - tan - l 
-2c2 + x/TTip 
2C 
= tan - 1 
n 
J-2? + VlV^ 
(10.73) 
Equation (10.73), plotted in Figure 10.48, shows the relationship between phase 
margin and damping ratio. 
FIGURE 10.48 Phase margin 
vs. damping ratio 
0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 
Damping ratio 

10.10 Relation Between Closed-Loop Transient and Open-Loop Frequency Responses 
591 
-280 -260 -240 -220 -200 -180 -160 -140 -120 -100 
Open-loop phase (degrees) 
-80 
FIGURE 10.49 Open-loop 
gain vs. open-loop phase angle 
for —3 dB closed-loop gain 
As an example, Eq. (10.53) tells us that there is no peak frequency if £ = 0.707. 
Hence, there is no peak to the closed-loop magnitude frequency response curve for 
this value of damping ratio and larger. Thus, from Figure 10.48, a phase margin of 
65.52°(£ = 0.707) or larger is required from the open-loop frequency response to 
ensure there is no peaking in the closed-loop frequency response. 
Response Speed from Open-Loop Frequency Response 
Equations (10.55) and (10.56) relate the closed-loop bandwidth to the desired 
settling or peak time and the damping ratio. We now show that the closed-loop 
bandwidth can be estimated from the open-loop frequency response. From the 
Nichols chart in Figure 10.46, we see the relationship between the open-loop gain 
and the closed-loop gain. The M = 0.707(-3 dB) curve, replotted in Figure 10.49 for 
clarity, shows the open-loop gain when the closed-loop gain is —3 dB, which typically 
occurs at &>BW if the low-frequency closed-loop gain is 0 dB. We can approximate 
Figure 10.49 by saying that the closed-loop bandwidth, O>BW (the frequency at which 
the closed-loop magnitude response is -3dB), equals the frequency at which the 
open-loop magnitude response is between —6 and —7.5 dB if the open-loop phase 
response is between —135° and —225°. Then, using a second-order system approxi-
mation, Eqs. (10.55) and (10.56) can be used, along with the desired damping ratio, £, 
to find settling time and peak time, respectively. Let us look at an example. 
Example 10.13 
Settling and Peak Times from Open-Loop Frequency Response 
PROBLEM: Given the system of Figure 10.50(a) and the Bode diagrams of Figure 
10.50(6), estimate the settling time and peak time. 
SOLUTION: Using Figure 10.50(6), we estimate the closed-loop bandwidth by 
finding the frequency where the open-loop magnitude response is in the range of 
- 6 to —7.5 dB if the phase response is in the range of —135° to —225°. Since Figure 
10.50(6) shows - 6 to —7.5 dB at approximately 3.7 rad/s with a phase response in 
the stated region, O>BW — 3.7 rad/s. 
Next find f via the phase margin. From Figure 10.50(6), the phase margin is 
found by first finding the frequency at which the magnitude plot is 0 dB. At this 
frequency, 2.2 rad/s, the phase is about -145°. Hence, the phase margin is 
approximately (-145° - (-180°)) = 35°. Using Figure 10.48, £ = 0.32. Finally, 
using Eqs. (10.55) and (10.56), with the values of WBW and £ just found, Ts = 4.86 

592 
Chapter 10 
Frequency Response Techniques 
seconds and Tp = 129 seconds. Checking the analysis with a computer simulation 
shows Ts = 5.5 seconds, and Tp = 1.43 seconds. 
/?(*)+, 
10 
6 
2 
-2 
5 
-6 
g1 -10 
o 
-14 
-18 
-22 
-26 
-30 
-100 
-120 
^ 
-140 
M -160 
u 
1 "
18° 
I -200 
-220 
-240 
->EW 
r 
50 
sis + 3)(.s + 6) 
cm 
(a) 
2 
3 
4 
Frequency (rad/s) 
ib) 
FIGURE 10.50 
a. Block diagram; b. Bode diagrams for system of Example 10.13 
—-____ 
--—-~-^_ 
^ 
1 
2 
3 
4
5
6
7
8
9 
10 
Frequency (rad/s) 
~ ~ ~ ~ — ^ ^ - _ _ 
7 
8 
9 
10 
Skill-Assessment Exercise 10.9 
PROBLEM: Using the open-loop frequency response for the system in Fig-
ure 10.10, where 
G(s) = 
100 
s(s + 5) 
estimate the percent overshoot, settling time, and peak time for the closed-loop 
step response. 
ANSWER: %OS = 44%, T, = 1.64s, and 7> = 0.33 s 
The complete solution is at www.wiley.com/college/nise. 

( 
10.11 Steady-State Error Characteristics from Frequency Response 
10.11 Steady-State Error Characteristics 
from Frequency Response 
593 
In this section, we show how to use Bode diagrams to find the values of the static 
error constants for equivalent unity feedback systems: Kp for a Type 0 system, Kv for 
a Type 1 system, and Ka for a Type 2 system. The results will be obtained from 
urmormalized and unsealed Bode log-magnitude plots. 
Position Constant 
To find Kp, consider the following Type 0 system: 
G(s) = K /=i 
m 
n (*+/>/) 
/=i 
(10.74) 
A typical unnormalized and unsealed Bode log-magnitude plot is shown in 
Figure 10.51(a). The initial value is 
20 log M = 20 log K i=l 
m 
i=\ 
(10.75) 
20 log M 
20 log K 
± 
+- (0 
20 logm 
20 log K 
n 
<°on/>, 
1=1 
-40 dB/dec 
COQ 
(c) 
FIGURE 10.51 Typical unnormalized and unsealed Bode log-magnitude plots showing the 
value of static error constants: a. Type 0; b. Type 1; c. Type 2 

594 
Chapter 10 
Frequency Response Techniques 
But for this system 
Kp = K'il- 
(10.76) 
UPi 
which is the same as the value of the low-frequency axis. Thus, for an unnormalized 
and unsealed Bode log-magnitude plot, the low-frequency magnitude is 20 log Kp for 
a Type 0 system. 
Velocity Constant 
To find Kv for a Type 1 system, consider the following open-loop transfer function of 
a Type 1 system: 
G(s) = K-^ 
(10.77) 
sY[(s+Pi) 
/=i 
A typical unnormalized and unsealed Bode log-magnitude diagram is shown in 
Figure 10.51(6) for this Type 1 system. The Bode plot starts at 
n 
UZi 
20 log M = 20 log K - ¾ — 
(10.78) 
o)0 fl Pi 
/=i 
The initial -20 dB/decade slope can be thought of as originating from a function, 
n 
IPs 
G'(s)=K^— 
(10.79) 
sfiPi 
/=i 
G'(s) intersects the frequency axis when 
n 
UZi 
OJ = K ' ^ — 
(10.80) 
tlto 
/=i 
But for the original system (Eq. (10.77)), 
n 
UZi 
KV = K^- 
(10.81) 
ITA-
/=I 
which is the same as the frequency-axis intercept, Eq. (10.80). Thus, we can find Kv 
by extending the initial -20 dB/decade slope to the frequency axis on an unnor-
malized and unsealed Bode diagram. The intersection with the frequency axis is K+ 

10.11 Steady-State Error Characteristics from Frequency Response 
595 
Acceleration Constant 
To find Ka for a Type 2 system, consider the following: 
n (s+zd 
G(s) = K 
/ = l 
s2U(s+Pi] 
/=1 
(10.82) 
A typical unnormalized and unsealed Bode plot for a Type 2 system is shown in 
Figure 10.51(c). The Bode plot starts at 
20 log M = 20 logiC 
11¾ 
/=i 
in 
<4tlPi 
/=I 
(10.83) 
The initial -40 dB/decade slope can be thought of as coming from a function, 
Uzi 
G'(s)=K 
/=i 
s2YlPi 
/=i 
(10.84) 
G'{s) intersects the frequency axis when 
K 
11¾ 
/=i 
\ a 
UPi 
(10.85) 
But for the original system (Eq. (10.82)), 
Ka=K 
IlZi 
/ = 1 
m 
/ = 1 
(10.86) 
Thus, the initial -40 dB/decade slope intersects the frequency axis at \fKa. 
Example 10.14 
Static Error Constants from Bode Plots 
PROBLEM: For each unnormalized and unsealed Bode log-magnitude plot shown 
in Figure 10.52, 
a. Find the system type. 
b. Find the value of the appropriate static error constant. 

596 
Chapter 10 
Frequency Response Techniques 
30 
25 
s
2 0 
o 15 
o 
04 10 
H 
\ 
/ 
-20 dB/dec' 
•" 
/ n 
0.1 
15 
0 
-5 
s - 2 5 
3 
-65 
-85 
-105 
0.1 
1 
Frequency (rad/s) 
(a) 
10 
—i 0 dB/de 
- ¾ ¾ 
Zen > dB crossin R 
-40dB/dec~~ 
-20 dB/dec 
1 
Frequency (rad/s) 
(A) 
60 
40 
20 
f ° 
o 
^ -20 
-40 
-60 
0.1 
1 
Frequency (rad/s) 
(c) 
FIGURE 10.52 
Bode log-magnitude plots for Example 10.14 
10 
~~"~~~-
.0 dB/de 
dB cross ingH 
^. -40 dB/dec 
- -
10 
SOLUTION: Figure 10.52(A) is a Type 0 system since the initial slope is zero. The 
value of Kp is given by the low-frequency asymptote value. Thus, 20 log Kp = 25, or 
Kp = 17.78. 
Figure 10.52(b) is a Type 1 system since the initial slope is -20 dB/decade. The 
value of Kv is the value of the frequency that the initial slope intersects at the zero 
dB crossing of the frequency axis. Hence, Kv = 0.55. 
Figure 10.52(c) is a Type 2 system since the initial slope is -40 dB/decade. The 
value of \/K^ is the value of the frequency that the initial slope intersects at the zero 
dB crossing of the frequency axis. Hence, Ka = 32 = 9. 

10.12 Systems with Time Delay 
597 
( 
([ Skill-Assessment Exercise 10.10 J 
) 
PROBLEM: Find the static error constants for a stable unity feedback system whose 
open-loop transfer function has the Bode magnitude plot shown in Figure 10.53. 
100 
OO 
M 50 
o 
0 
0. 
FIGURE 
ANSWEF 
The con 
31 
0.1 
l 
10 
100 
1000 
Frequency (rad/s) 
10.53 Bode log-magnitude plot for Skill-Assessment Exercise 10.10 
S: Kp = oo, Kv = co, Ka = 90.25 
aplete solution is www.wiley.com/college/nise. 
^ 10.12 Systems with Time Delay 
Time delay occurs in control systems when there is a delay between the com-
manded response and the start of the output response. For example, consider a 
heating system that operates by heating water for pipeline distribution to radiators 
at distant locations. Since the hot water must flow through the line, the radiators 
will not begin to get hot until after a specified time delay. In other words, the time 
between the command for more heat and the commencement of the rise in 
temperature at a distant location along the pipeline is the time delay. Notice 
that this is not the same as the transient response or the time it takes the 
temperature to rise to the desired level. During the time delay, nothing is occurring 
at the output. 
Modeling Time Delay 
Assume that an input, R(s), to a system, G(s), yields an output, C(s). If another 
system, G'(s), delays the output by T seconds, the output response is c(t - T). From 
Table 2.2, Item 5, the Laplace transform of c(t - T) is e~sTC(s). Thus, for the system 
without delay, C(s) = R{s)G{s), and for the system with delay, e~sTC(s) = R(s)G'(s). 
Dividing these two equations, G'(s)/G(s) — e~sT. Thus, a system with time delay T 
can be represented in terms of an equivalent system without time delay as follows: 
G'{s) = e-sTG{s) 
(10.87) 

598 
Chapter 10 
Frequency Response Techniques 
M(dB) 
OdB 
Gain plot 
Phase (degrees) 
180° 
- log co 
>- log co 
Phase plot without delay 
Phase plot with delay 
FIGURE 10.54 
Effect of delay upon frequency response 
The effect of introducing time delay into a system can also be seen from the 
perspective of the frequency response by substituting 51 = jco in Eq. (10.87). Hence, 
G'{jco) = e-i<°TG{jto) = \G(jco)\Z{-coT+ ZG(jco)} 
(10.88) 
In other words, the time delay does not affect the magnitude frequency response 
curve of G(jco), but it does subtract a linearly increasing phase shift, coT, from the 
phase frequency response plot of Gijco). 
The typical effect of adding time delay can be seen in Figure 10.54. Assume that 
the gain and phase margins as well as the gain- and phase-margin frequencies shown 
in the figure apply to the system without delay. From the figure, we see that the 
reduction in phase shift caused by the delay reduces the phase margin. Using a 
second-order approximation, this reduction in phase margin yields a reduced 
damping ratio for the closed-loop system and a more oscillatory response. The 
reduction of phase also leads to a reduced gain-margin frequency. From the 
magnitude curve, we can see that a reduced gain-margin frequency leads to reduced 
gain margin, thus moving the system closer to instability. 
An example of plotting frequency response curves for systems with delay follows. 
Example 10.15 
Frequency Response Plots of a System with Time Delay 
PROBLEM: Plot the frequency response for the system G{s) = K/[s(s + l)(s + 10)] 
if there is a time delay of 1 second through the system. Use the Bode plots. 
SOLUTION: Since the magnitude curve is not affected by the delay, it can be plotted 
by the methods previously covered in the chapter and is shown in Figure 10.55(a) 
for # = 1. 
The phase plot, however, is affected by the delay. Figure 10.55(6) shows the 
result. First draw the phase plot for the delay, e~,u>T = 1 Z - coT = 1 Z - co, since 
T — 1 from the problem statement. Next draw the phase plot of the system, G(jco), 

10.12 Systems with Time Delay 
599 
0 
-20 
^ 0 
-60 
«n 
0.01 
0.1 
10 
Frequency (rad/s) 
(a) 
0 
-200 
^00 
-600 
-800 
Time delaj 
' ^otal 
1 1 1 
\ 
0.01 
0.1 
10 
Frequency (rad/s) 
FIGURE 10.55 
Frequency 
response plots for G(s) = 
K/[s(s + l)(s + 10)] with a 
delay of 1 second and K — 1: 
a. magnitude plot; b. phase plot 
using the methods previously covered. Finally, add the two phase curves together 
to obtain the total phase response for e~i0>1G(jco). Be sure to use consistent units 
for the phase angles of G(Ja>) and the delay; either degrees or radians. 
Notice that the delay yields a decreased phase margin, since at any frequency 
the phase angle is more negative. Using a second-order approximation, this 
decrease in phase margin implies a lower damping ratio and a more oscillatory 
response for the closed-loop system. 
Further, there is a decrease in the gain-margin frequency. On the magnitude 
curve, note that a reduction in the gain-margin frequency shows up as reduced gain 
margin, thus moving the system closer to instability. 
Students who are using MATLAB should now run chl0p7 in Appendix B. 
You will learn how to use MATLAB to include time delay on Bode plots . 
You will also use MATLAB to make multiple plots on one graph and label 
the plots . This exercise solves Example 10.15 using MATLAB. 
MATLAB 
Let us now use the results of Example 10.15 to design stability and analyze transient 
response and compare the results to the system without time delay. 
Example 10.16 
Range of Gain for Stability for System with Time Delay 
PROBLEM: The open-loop system with time delay in Example 10.15 is used in a 
unity feedback configuration. Do the following: 
a. Find the range of gain, K, to yield stability. Use Bode plots and frequency 
response techniques. 
b. Repeat Part a for the system without time delay. 

Chapter 10 
Frequency Response Techniques 
SOLUTION: 
a. From Figure 10.55, the phase angle is -180° at a frequency of 0.81 rad/s for 
the system with time delay, marked "Total" on the phase plot. At this 
frequency, the magnitude curve is at -20.39 dB. Thus, K can be raised 
from its current value of unity to I02a39/20 = 10.46. Hence, the system is 
stable for 0 < K < 10.46. 
b. If we use the phase curve without delay, marked "System," —180° occurs at a 
frequency of 3.16 rad/s, and K can be raised 40.84 dB or 110.2. Thus, without 
delay the system is stable for 0 < K < 110.2, an order of magnitude larger. 
Percent Overshoot for System with Time Delay 
PROBLEM: The open-loop system with time delay in Example 10.15 is used in a 
unity feedback configuration. Do the following: 
a. Estimate the percent overshoot if K = 5. Use Bode plots and frequency 
response techniques. 
b. Repeat Part a for the system without time delay. 
SOLUTION: 
a. Since K = 5, the magnitude curve of Figure 10.55 is raised by 13.98 dB. The 
zero dB crossing then occurs at a frequency of 0.47 rad/s with a phase angle of 
—145°, as seen from the phase plot marked "Total." Therefore, the phase 
margin is (-145° — (—180°)) = 35°. Assuming a second-order approximation 
and using Eq. (10.73) or Figure 10.48, we find £ = 0.33. From Eq. (4.38), 
%OS = 33%. The time response, Figure 10.56(a), shows a 38% overshoot 
instead of the predicted 33%. Notice the time delay at the start of the curve. 
b. The zero dB crossing occurs at a frequency of 0.47 rad/s with a phase angle of 
-118°, as seen from the phase plot marked "System." Therefore, the phase 
1.4 
1.2 
1.0 
8 0.8 
0.6 
0.4 
FIGURE 10.56 
Stepresponse 
for closed-loop system with 
o 
G(s) =5/[s(s +1)(5 +10)]: 
a. with a 1-second delay; 
(figure continues) 
15 
20 
Time (seconds) 

10.12 Systems with Time Delay 
601 
• 
1.2 
1.0 
0.8 
* 
0.6 
0.4 
0.2 
0 
( 
^
^
-
- 
• 
—
— 
X 
/ 
- 
/ 
/ 
i 
i 
i 
i 
i 
, 
2 
4 
6 
8 
10 
Time (seconds) 
(b) 
margin is (-118° - (-180°)) = 62°. Assuming a second-order approxima-
tion and using Eq. (10.73) or Figure 10.48, we find f = 0.64. From Eq. (4.38), 
%OS = 7.3%. The time response is shown in Figure 10.56(6). Notice that 
the system without delay has less overshoot and a smaller settling time. 
FIGURE 10.56 
(Continued) 
b. without delay 
M 
[ Skill-Assessment Exercise 10.11 J 
PROBLEM: For the system shown in Figure 10.10, where 
G(s)~ 
10 
G{S} 
s(s + l) 
find the phase margin if there is a delay in the forward path of 
a. 0 s 
b. 0.1 s 
c. 3 s 
ANSWERS: 
a. 18.0° 
b. 0.35° 
c. -151.41° 
The complete solution is at www.wiley.com/college/nise. 
WileyPLUS 
Control Solutions 
Trylt 10.6 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to solve Skill-
Assessment Exercise 10.11. For 
each part of the problem let d = 
the specified delay. 
G=zpk([] ,[0,-1] ,10) 
d=0 
[numGd,denGd]=pade. . . 
(d,12) 
Gd=tf(numGd,denGd) 
Ge=G*Gd 
bode(Ge) 
g r i d on 
After the Bode diagrams 
appear: 
1. Right-click in the graph 
area. 
2. Select Characteristics. 
3. Select AH Stability 
Margins. 
4. Let the mouse rest on the 
margin point on the phase 
plot to read the phase 
margin. 

602 
Chapter 10 
Frequency Response Techniques 
In summary, then, systems with time delay can be handled using previously 
described frequency response techniques if the phase response is adjusted to reflect 
the time delay. Typically, time delay reduces gain and phase margins, resulting in 
increased percent overshoot or instability in the closed-loop response. 
^ 10.13 Obtaining Transfer Functions Experimentally 
In Chapter 4, we discussed how to obtain the transfer function of a system through 
step-response testing. In this section, we show how to obtain the transfer function 
using sinusoidal frequency response data. 
The analytical determination of a system's transfer function can be difficult. 
Individual component values may not be known, or the internal configuration of the 
system may not be accessible. In such cases, the frequency response of the system, from 
input to output, can be obtained experimentally and used to determine the transfer 
function. To obtain a frequency response plot experimentally, we use a sinusoidal force 
or signal generator at the input to the system and measure the output steady-state 
sinusoid amplitude and phase angle (see Figure 10.2). Repeating this process at a 
number of frequencies yields data for a frequency response plot. Referring to 
Figure 10.2(6), the amplitude response is M(co) = M0(a>)/Mj(<o), and the phase 
response is ¢(0)) = 4>0(co) — ¢1((0). Once the frequency response is obtained, the 
transfer function of the system can be estimated from the break frequencies and 
slopes. Frequency response methods can yield a more refined estimate of the transfer 
function than the transient response techniques covered in Chapter 4. 
Bode plots are a convenient presentation of the frequency response data for 
the purpose of estimating the transfer function. These plots allow parts of the 
transfer function to be determined and extracted, leading the way to further 
refinements to find the remaining parts of the transfer function. 
Although experience and intuition are invaluable in the process, the following 
steps are still offered as a guideline: 
1. Look at the Bode magnitude and phase plots and estimate the pole-zero 
configuration of the system. Look at the initial slope on the magnitude plot to 
determine system type. Look at phase excursions to get an idea of the difference 
between the number of poles and the number of zeros. 
2. See if portions of the magnitude and phase curves represent obvious first- or 
second-order pole or zero frequency response plots. 
3. See if there is any telltale peaking or depressions in the magnitude response plot 
that indicate an underdamped second-order pole or zero, respectively. 
4. If any pole or zero responses can be identified, overlay appropriate ±20 or 
±40 dB/decade lines on the magnitude curve or ±45°/decade lines on the phase 
curve and estimate the break frequencies. For second-order poles or zeros, estimate the 
damping ratio and natural frequency from the standard curves given in Section 10.2. 
5. Form a transfer function of unity gain using the poles and zeros found. Obtain the 
frequency response of this transfer function and subtract this response from the 
previous frequency response (Franklin, 1991). You now have a frequency re-
sponse of reduced complexity from which to begin the process again to extract 
more of the system's poles and zeros. A computer program such as MATLAB is of 
invaluable help for this step. 
Let us demonstrate. 

10.13 Obtaining Transfer Functions Experimentally 
603 
Example 10.18 
Transfer Function from Bode Plots 
PROBLEM: Find the transfer function of the subsystem whose Bode plots are 
shown in Figure 10.57. 
^ 
-50 
oo 
° 
-100 
10 
100 
1000 
Frequency (rad/s) 
\ 
V 
_ 
-50 
I -100 
I -150 
a -2oo 
CM 
-250 
-300 
I 
10 
100 
Frequency (rad/s) 
FIGURE 10.57 Bode plots for subsystem with undetermined transfer function 
1000 
SOLUTION: Let us first extract the underdamped poles that we suspect, based on the 
peaking in the magnitude curve. We estimate the natural frequency to be near the peak 
frequency, or approximately 5 rad/s. From Figure 10.57, we see a peak of about 6.5 dB, 
which translates into a damping ratio of about £ = 0.24 using Eq. (10.52). The unity gain 
second-order function is thus Gi(s) = a%/(s2 + 2t;cons + afy = 25/(52 + 2.4s + 25). 
The frequency response plot of this function is made and subtracted from the previous 
Bode plots to yield the response in Figure 10.58. 
Overlaying a -20dB/decade line on the magnitude response and a 
—45°/decade line on the phase response, we detect a final pole. From the 
phase response, we estimate the break frequency at 90 rad/s. Subtracting 
the response of G2(s) = 90/(5 + 90) from the previous response yields the 
response in Figure 10.59. 
Figure 10.59 has a magnitude and phase curve similar to that generated by a 
lag function. We draw a -20 dB/decade line and fit it to the curves. The break 
frequencies are read from the figure as 9 and 30 rad/s. A unity gain transfer function 
containing a pole at - 9 and a zero at -30 is G%(s) = 0.3(5 + 30)/(5 + 9). Upon 
subtraction of G\(s)Gi(s)G3(s), we find the magnitude frequency response flat ±1 
dB and the phase response flat at —3° ± 5°. We thus conclude that we are finished 
extracting dynamic transfer functions. The low-frequency, or dc, value of the 
original curve is -19 dB, or 0.11. Our estimate of the subsystem's transfer function 

604 
Chapter 10 
Frequency Response Techniques 
-20 
-25 
-30 
-35 
^ 0 
^15 
-50 
10 
100 
Frequency (rad/s) 
1000 
-20 
^to 
-60 
^ 
cu -80 
-100 
1 
10 
100 
Frequency (rad/s) 
FIGURE 10.58 Original Bode plots minus response of Gi(s) = 25/(s2 + 2.4s + 25) 
is G(s) = 0.11Gi{s)G2(s)G3(s), or 
25 
1000 
-18 
-20 
-22 
-24 
-26 
-28 
-30 
-32 
G(s) = 0.11 
= 74.25 
90-
1 
s2 + 2.4s + 25j\ 
s + 90 
5 + 30 
(5 + 9)(^ + 90)(^2 + 2.4* + 25) 
0.3 5 + 30 
5 + 9 
10 
100 
(10.89) 
\ 
s 
v \ \ 
1000 
Frequency (rad/s) 
-5 -
^ \ 
\ 
' 
/ / 
^ 
^.----
I -lo 
% 
\t 
D 
— ID 
«• 
-20 
a 
£ 
-25 
-30 
-35 
1 
10 
100 
1000 
Frequency (rad/s) 
FIGURE 10.59 
Original Bode plot minus response of Gx(s)G2{s) = [25/(s2 + 2.4s + 25)] 
[90/(5 + 90)] 

10.13 Obtaining Transfer Functions Experimentally 
605 
It is interesting to note that the original curve was obtained from the function 
5 + 20 
G{s) = 70 (5 + 7)(5 + 70)(52 + 2s + 25) 
(10.90) 
Students who are usingMATLAB should now run chl0p8 in Appendix B. You 
will learn how to use MATLAB to subtract Bode plots for the purpose 
of estimating transfer functions through sinusoidal testing. 
This exercise solves a portion of Example 10.18 usingMATLAB. 
MATLAB 
Skill-Assessment Exercise 10.12 
PROBLEM: Estimate G(s), whose Bode log-magnitude and phase plots are shown 
in Figure 10.60. 
ANSWER: G(s) = 30(5 + 5) 
s(s + 20) 
The complete solution is at www.wiley.com/college/nise. 
69 
10 
0 
10 
20 
30 
10 
100 
1000 
Frequency (rad/s) 
-45 
-50 
_ 
-55 
8" 
-60 
| 
-65 
3 
-70 
1 
-75 
TO 
£ 
-80 
-85 
-90 
-95 
1 
10 
100 
Frequency (rad/s) 
FIGURE 10.60 Bode plots for Skill-Assessment Exercise 10.12 
^ 
y U* 
N \ 
----^^ 
1000 
In this chapter, we derived the relationships between time response perform-
ance and the frequency responses of the open- and closed-loop systems. The 
methods derived, although yielding a different perspective, are simply alternatives 
to the root locus and steady-state error analyses previously covered. 

606 
Chapter 10 
Frequency Response Techniques 
Design 
Case Study 
Antenna Control: Stability Design and Transient Performance 
Our ongoing antenna position control system serves now as an example that summarizes 
the major objectives of the chapter. The case study demonstrates the use of frequency 
response methods to find the range of gain for stability and to design a value of gain to 
meet a percent overshoot requirement for the closed-loop step response. 
PROBLEM: Given the antenna azimuth position control system shown on the front 
endpapers, Configuration 1, use frequency response techniques to find the following: 
a. The range of preamplifier gain, K, required for stability 
b. Percent overshoot if the preamplifier gain is set to 30 
e. The estimated settling time 
d. The estimated peak time 
e. The estimated rise time 
SOLUTION: Using the block diagram (Configuration 1) shown on the front end-
papers and performing block diagram reduction yields the loop gain, G(s)H(s), as 
G(s)H(s) = 
6.63K 
0.0388tf 
^ + 1.71)(5 + 100) 
§(*+A(*Z+i) 
1.71 
AlOO 
) 
(10.91) 
Letting K — 1, we have the magnitude and phase frequency response plots shown 
in Figure 10.61. 
-20 
-40 
-60 
-80 
-100 
-120 
-140 
-160 
0.1 
10 
Frequency (rad/s) 
100 
1000 
FIGURE 10.61 
Open-loop 
frequency response plots for 
the antenna control system 
-100 
-120 
-140 
-160 
-180 
-200 
-220 
-240 
-260 
-280 
0.1 
10 
Frequency (rad/s) 
100 
1000 

Summary 
607 
a. In order to find the range of K for stability, we notice from Figure 10.61 that the 
phase response is -180° at co = 13.1 rad/s. At this frequency, the magnitude plot 
is -68.41 dB. The gain, K, can be raised by 68.41 dB. Thus, K = 2633 will cause 
the system to be marginally stable. Hence, the system is stable if 0 < K < 2633. 
b. To find the percent overshoot if K = 30, we first make a second-order approxi-
mation and assume that the second-order transient response equations relating 
percent overshoot, damping ratio, and phase margin are true for this system. In 
other words, we assume that Eq. (10.73), which relates damping ratio to phase 
margin, is valid. If K — 30, the magnitude curve of Figure 10.61 is moved up by 
20 log 30 = 29.54 dB. Therefore, the adjusted magnitude curve goes through 
zero dB at co = 1. At this frequency, the phase angle is -120.9°, yielding a phase 
margin of 59.1°. Using Eq. (10.73) or Figure 10.48, f = 0.6, or 9.48% overshoot. 
A computer simulation shows 10%. 
c. To estimate the settling time, we make a second-order approximation and use 
Eq. (10.55). Since K = 30 (29.54 dB), the open-loop magnitude response is 
—7 dB when the normalized magnitude response of Figure 10.61 is -36.54 dB. 
Thus, the estimated bandwidth is 1.8 rad/s. Using Eq. (10.55), Ts = 4.25 seconds. 
A computer simulation shows a settling time of about 4.4 seconds. 
d. Using the estimated bandwidth found in c. along with Eq. (10.56), and the 
damping ratio found in a. we estimate the peak time to be 2.5 seconds. A 
computer simulation shows a peak time of 2.8 seconds. 
e. To estimate the rise time, we use Figure 4.16 and find that the normalized rise 
time for a damping ratio of 0.6 is 1.854. Using Eq. (10.54), the estimated 
bandwidth found in c, and £ = 0.6, we find con = 1.57. Using the normalized rise 
time and con, we find TT — 1.854/1.57 = 1.18 seconds. A simulation shows a rise 
time of 1.2 seconds. 
CHALLENGE: You are now given a problem to test your knowledge of this chapter's 
objectives. You are given the antenna azimuth position control system shown on 
the front endpapers, Configuration 3. Record the block diagram parameters in the 
table shown on the front endpapers for Configuration 3 for use in subsequent case 
study challenge problems. Using frequency response methods, do the following: 
a. Find the range of gain for stability. 
b. Find the percent overshoot for a step input if the gain, K, equals 3. 
MATLAB 
C Repeat P a r t s a. a n d b . u s i n g MATLAB. 
flTTB 
£ Summary^ 
Frequency response methods are an alternative to the root locus for analyzing and 
designing feedback control systems. Frequency response techniques can be used 
more effectively than transient response to model physical systems in the laboratory. 
On the other hand, the root locus is more directly related to the time response. 
The input to a physical system can be sinusoidally varying with known 
frequency, amplitude, and phase angle. The system's output, which is also sinusoidal 

Chapter 10 
Frequency Response Techniques 
in the steady state, can then be measured for amplitude and phase angle at different 
frequencies. From this data the magnitude frequency response of the system, which 
is the ratio of the output amplitude to the input amplitude, can be plotted and used in 
place of an analytically obtained magnitude frequency response. Similarly, we can 
obtain the phase response by finding the difference between the output phase angle 
and the input phase angle at different frequencies. 
The frequency response of a system can be represented either as a polar plot or 
as separate magnitude and phase diagrams. As a polar plot, the magnitude response 
is the length of a vector drawn from the origin to a point on the curve, whereas the 
phase response is the angle of that vector. In the polar plot, frequency is implicit and 
is represented by each point on the polar curve. The polar plot of G(s)H(s) is known 
as a Nyquist diagram. 
Separate magnitude and phase diagrams, sometimes referred to as Bode plots, 
present the data with frequency explicitly enumerated along the abscissa. The 
magnitude curve can be a plot of log-magnitude versus log-frequency. The other 
graph is a plot of phase angle versus log-frequency. An advantage of Bode plots over 
the Nyquist diagram is that they can easily be drawn using asymptotic approxima-
tions to the actual curve. 
The Nyquist criterion sets forth the theoretical foundation from which the 
frequency response can be used to determine a system's stability. Using the Nyquist 
criterion and Nyquist diagram, or the Nyquist criterion and Bode plots, we can 
determine a system's stability. 
Frequency response methods give us not only stability information but also 
transient response information. By defining such frequency response quantities as 
gain margin and phase margin, the transient response can be analyzed or designed. 
Gain margin is the amount that the gain of a system can be increased before 
instability occurs if the phase angle is constant at 180°. Phase margin is the amount 
that the phase angle can be changed before instability occurs if the gain is held at 
unity. 
While the open-loop frequency response leads to the results for stability and 
transient response just described, other design tools relate the closed-loop frequency 
response peak and bandwidth to the transient response. Since the closed-loop 
response is not as easy to obtain as the open-loop response because of the 
unavailability of the closed-loop poles, we use graphical aids in order to obtain 
the closed-loop frequency response from the open-loop frequency response. These 
graphical aids are the M and N circles and the Nichols chart. By superimposing the 
open-loop frequency response over the M and N circles or the Nichols chart, we are 
able to obtain the closed-loop frequency response and then analyze and design for 
transient response. 
Today, with the availability of computers and appropriate software, frequency 
response plots can be obtained without relying on the graphical techniques described 
in this chapter. The program used for the root locus calculations and described in 
Appendix H.2 is one such program. MATLAB is another. 
We concluded the chapter discussion by showing how to obtain a reasonable 
estimate of a transfer function using its frequency response, which can be obtained 
experimentally. Obtaining transfer functions this way yields more accuracy than 
transient response testing. 
This chapter primarily has examined analysis of feedback control systems via 
frequency response techniques. We developed the relationships between frequency 
response and both stability and transient response. In the next chapter, we apply the 
concepts to the design of feedback control systems, using the Bode plots. 

Review Questions 
609 
£ Review Questions J | 
1. Name four advantages of frequency response techniques over the root locus. 
2. Define frequency response as applied to a physical system. 
3. Name two ways to plot the frequency response. 
4. Briefly describe how to obtain the frequency response analytically. 
5. Define Bode plots. 
6. Each pole of a system contributes how much of a slope to the Bode magnitude 
plot? 
7. A system with only four poles and no zeros would exhibit what value of slope at 
high frequencies in a Bode magnitude plot? 
8. A system with four poles and two zeros would exhibit what value of slope at high 
frequencies in a Bode magnitude plot? 
9. Describe the asymptotic phase response of a system with a single pole at - 2 . 
10. What is the major difference between Bode magnitude plots for first-order 
systems and for second-order systems? 
11. For a system with three poles at - 4 , what is the maximum difference between the 
asymptotic approximation and the actual magnitude response? 
12. Briefly state the Nyquist criterion. 
13. What does the Nyquist criterion tell us? 
14. What is a Nyquist diagram? 
15. Why is the Nyquist criterion called a frequency response method? 
16. When sketching a Nyquist diagram, what must be done with open-loop poles on 
the imaginary axis? 
17. What simplification to the Nyquist criterion can we usually make for systems 
that are open-loop stable? 
18. What simplification to the Nyquist criterion can we usually make for systems 
that are open-loop unstable? 
19. Define gain margin. 
20. Define phase margin. 
21. Name two different frequency response characteristics that can be used to 
determine a system's transient response. 
22. Name three different methods of finding the closed-loop frequency response 
from the open-loop transfer function. 
23. Briefly explain how to find the static error constant from the Bode magnitude 
plot. 
24. Describe the change in the open-loop frequency response magnitude plot if time 
delay is added to the plant. 
25. If the phase response of a pure time delay were plotted on a linear phase versus 
linear frequency plot, what would be the shape of the curve? 
26. When successively extracting component transfer functions from experimental 
frequency response data, how do you know when you are finished? 

610 
Chapter 10 
Frequency Response Techniques 
Problems 
1. Find analytical expressions for the 
magnitude and phase response for 
each G(s) below. [Section: 10.1] 
a. G(s) = 
l 
WileyPLUS 
Control Solutions 
b. G(s) = 
c. G(s) = 
s(s + 2){s + 4) 
(s + 2){s + 4) 
(5 + 3)(5 + 5) 
s(s + 2){s + 4) 
2. For each function in Problem 1, make a plot of the 
log-magnitude and the phase, using log-frequency in 
rad/s as the ordinate. Do not use asymptotic ap-
proximations. [Section: 10.1] 
3. For each function in Problem 1, make a polar plot of 
the frequency response. [Section: 10.1] 
4. For each function in Problem 1, sketch the Bode 
asymptotic magnitude and asymptotic phase plots. 
Compare your results with your answers to Problem 1. 
[Section: 10.2] 
5. Sketch the Nyquist diagram for each of the systems 
in Figure P10.1. [Section: 10.4] 
6. Draw the polar plot from the separate 
magnitude and phase curves shown in 
Figure P10.2. [Section: 10.1] 
WileyPLUS 
CUE! 
Control Solutions 
*(S)+/C* E(s) 
*w * 
50 
s(s + 3)(s + 6) 
C(s) 
System 1 
. 
50 
J 2 C ? + 1 ) 
(s + 4) 
C(s) 
System 2 
m±£ ?) 
1 
20 
s(s+ 1) 
(* + 3) 
(s + 4) 
C(s) 
R(s)+/<^ 
E(s) 
— r 
System 3 
100(5 + 5) 
it?+ 3)(5-2+ 4) 
C(s) 
System 4 
FIGURE P10.1 
-10 
1° -20 
o 
-30 
0.1 
10 
Frequency (rad/s) 
100 
-50 
100 
150 
0.1 
1 
10 
Frequency (rad/s) 
FIGURE PI 0.2 
100 

Problems 
611 
7. Draw the separate magnitude and phase curves from 
the polar plot shown in Figure P10.3. [Section: 10.1] 
8 
§ 
4 
2 
0 
-2 
-4 
-6 
x 10-3 
i 
10 
7S 
6/ 
5 
A 
3 s 
i 
i 
2 
i 
i 
/a)=l 
-
-
-
/ -
-
-
-A 
-2 
2 
4 
Real axis 
8 
10 
xlO'* 
FIGURE P10.3 
8. Write a program in MATLAB that 
JJ^iL 
will do the following: 
VlillP 
a. Plot the Nyquist diagram of a system 
b. Display the real-axis crossing value 
and frequency 
Apply your program to a unity feedback system with 
G(s) = (s2 + 6s + 100)(^2 + 4s + 25) 
*(')+ /Ov 
. 
—, 
K(s2-4s+U) 
(s + 2)(s + 4) 
1 
s 
C(.s) 
System 2 
R(s) + AGN 
—,, 
(s-2) 
is +¾ 
GM 
WileyPLUS 
dp 
Control Solutions 
9. Using the Nyquist criterion, find out whether each 
system of Problem 5 is stable. [Section: 10.3J 
10. Using the Nyquist criterion, find the range 
wileypms 
of K for stability for each of the systems in 
> V W 
Figure P10.4. [Section: 10.3] 
control solutions 
*®+/ps 
-. 
K 
(5 + 2) 
1 
(s + 4)(.v + 6) 
C(s) 
r*— 
System 3 
FIGURE P10.4 
(Continued) 
11. For each system of Problem 10, find the 
gain margin and phase margin if the 
value of K in each part of Problem 10 is 
[Section: 10.6] 
a. # = 1000 
b. K = 100 
c. # = 0.1 
12. Write a program in MATLAB that will J^[iJL 
do the following: 
fl^IB 
a. Allow a value of gain, K, to be entered 
from the keyboard 
b. Display the Bode plots of a system for 
the entered value of K 
c. Calculate and display the gain and 
phase margin for the entered value 
of K 
Test your program on a unity feedback 
system with G(s) = K/[s(s + 3)(s + 12)]. 
13. Use MATLAB's LTI Viewer to find 
JJ2L 
the gain margin, phase margin, 
MfllJIM 
zero dB frequency, and 180° frequency for 
a unity feedback system with 
G(s) = 
8000 
> + 6)(s + 20)(s + 35) 
System 1 
FIGURE P10.4 
(figure continues) 
Use the following methods : 
a. The Nyquist diagram 
b. Bode plots 

612 
Chapter 10 
Frequency Response Techniques 
14. Derive Eq. (10.54), the closed-loop bandwidth in 
terms of £ and u>n of a two-pole system. [Section: 
10.8] 
15. For each closed-loop system with the 
wileypius 
following performance characteristics, 
> V W 
find 
the 
closed-loop 
bandwidth: 
control solutions 
[Section: 10.8] 
a. f = 0.2, Ts = 3 seconds 
b. t = 0.2, Tp = 3 seconds 
c. Ts = 4 seconds, Tp ~2 seconds 
d. C = 0-3, 7V = 4 seconds 
16. Consider the unity feedback system of 
wileypms 
Figure 10.10. For each G(s) that follows, 
6 1 3 9 
use the M and N circles to make a plot of 
Contro1 solutions 21. 
the closed-loop frequency response: 
[Section: 10.9] 
10 
c. Calculate and display the peak mag-
nitude, frequency of the peak magni-
tude, and bandwidth for the closed-
loop frequency response and the 
entered value of K 
Test your program on the system of Figure 
P10.5 for K = 40. 
m ,Y "1 p. 
K(s + 5) 
s(s2 + 4s + 25) 
C(s) 
a. G{s) = 
b. G(s) = 
c. G(s) = 
5(5 + 1)(5 + 2) 
1000 
(^ + 3)(5 + 4)(5 + 5)(5 + 6) 
50(5 + 3) 
5(5 + 2)(5 + 4) 
17. Repeat Problem 16, using the Nichols chart in place 
of the M and N circles. [Section: 10.9] 
18. Using the results of Problem 16, estimate the 
percent overshoot that can be expected in the 
step response for each system shown. [Section: 
10.10] 
19. Use the results of Problem 17 to estimate the 
percent overshoot if the gain term in the numer-
ator of the forward path of each part of the 
problem is respectively changed as follows: 
[Section: 10.10] 
a. From 10 to 30 
b. From 1000 to 2500 
c. From 50 to 75 
20. Write a program in MATLAB that will JjJJlJL 
do the following: 
ViJ^P 
a. Allow a value of gain, K, to be entered 
from the keyboard 
b. Display the closed-loop magnitude and 
phase frequency response plots of a 
unity feedback system with an open-
loop transfer function, KG(s) 
FIGURE P10.5 
Use MATLAB' s LTI Viewer with 
QuiTo0' 
the Nichols plot to find the 
WilljP 
gain margin, phase margin, zero dB fre-
quency, and 180° frequency for a unity 
feedback system with the forward-path 
transfer function 
G(s) = 
5(s+6) 
s(s2 + 4s + 15) 
22. Write a program in MATLAB that will MATLAB 
do the following: 
ViJ^P 
a. Make a Nichols plot of an open-loop 
transfer function 
b. Allow the user to read the Nichols 
plot display and enter the value 
of Mp 
c. Make closed-loop magnitude and phase 
plots 
d. Display the expected values of percent 
overshoot, settling time, and peak 
time 
e. Plot the closed-loop step response 
Test your program on a unity feedback 
system with the forward-path transfer 
function 
G(s) = 
5(s + e) 
s(sz + 4s + 15) 
23. 
and explain any discrepancies. 
Using Bode plots, estimate the transient response 
of the systems in Figure P10.6. [Section: 10.10] 

Problems 
613 
RW + f?\ 
-. 
lOOC.v + 2) 
s(s+l)(s + 4) 
C(s) 
System 1 
R(s) + (CXEif) 
— . 
50(5 + 3)(s + 5) 
s{s + 2)(s + 4)(s + 6) 
C(*) 
System 2 
FIGURE P10.6 
24. For the system of Figure P10.5, do the following: 
[Section: 10.10] 
a. Plot the Bode magnitude and phase plots. 
b. Assuming a second-order approximation, esti-
mate the transient response of the system if 
K = 40. 
e, 
MATLAB 
Use MATLAB or any other program 
to check your assumptions by sim-
ulating the step response of the system. 
25. The Bode plots for a plant, G(s), used 
W'leyPLUs 
in a unity feedback system are shown in 
Figure P10.7. Do the following: 
control solutions 
a. Find the gain margin, phase margin, zero dB 
frequency, 180° frequency, and the closed-loop 
bandwidth. 
b. Use your results in Part a to estimate the damp-
ing ratio, percent overshoot, settling time, and 
peak time. 
26. Write a program in MATLAB that 
MATLAB 
will use an open-loop transfer 
fluI^B 
function, 
G(s) , 
to do the 
following: 
a. Make a Bode plot 
b. Use frequency response methods to 
estimate the percent overshoot, set-
tling time, and peak time 
c. Plot the closed-loop step response 
Test your program by comparing the re-
sults to those obtained for the systems 
of Problem 23. 
27. The open-loop frequency response shown in Figure 
P10.8 was experimentally obtained from a unity 
feedback system. Estimate the percent overshoot 
and steady-state error of the closed-loop system. 
[Sections: 10.10, 10.11] 
00 
40 
20 
0 
-20 
0 
-40 
-60 
-80 
-100 
C 
-50 
M 
- 1 0 0 
a 
-150 
3 
1 -200 
-C 
a. 
-250 
-300 
0.1 
^ \ ^ 
.1 
1 
10 
100 
Frequency (rad/s) 
10 
100 
Frequency (rad/s) 
FIGURE P10.7 

614 
Chapter 10 
Frequency Response Techniques 
40 
20 
§ 
0 
J
3 -20 
° 
-40 
-60 
-80 
'-
0.01 
-80 
-100 
-120 
? -140 
8 -160 
on 
f 
-180 
| 
-200 
K -220 
-240 
-260 
-280 0.01 
0.1 
1 
Frequency (rad/s) 
10 
100 
\ 
\ , 
\ 
v> 
0.1 
1 
Frequency (rad/s) 
FIGURE P10.8 
10 
100 
28. Consider the system in Figure P10.9. [Section: 10.12] 
*(*)+/< 
- r 
Delay 
100 
(s + 5)(5 + 10) 
cm 
30. 
and a delay of 0.5 second, find the range of gain, 
K, to yield stability. Use Bode plots and fre-
quency response techniques. [Section: 10.12] 
Given a unity feedback system with the forward-
path transfer function 
FIGURE P10.9 
a. Find the phase margin if the system is stable for 
time delays of 0, 0.1, 0.2, 0.5, and 1 second. 
b. Find the gain margin if the system is stable for 
each of the time delays given in Part a. 
c. For what time delays mentioned in Part a is the 
system stable? 
d. For each time delay that makes the system un-
stable, how much reduction in gain is required for 
the system to be stable? 
29. Given a unity feedback system with the 
wHeyPtus 
forward-path transfer function 
Control Solutions 
U 
(5+1)(5 + 3)(5 + 6) 
G{s) = 
K 
^(5 + 3)(5 + 12) 
31 
32. 
and a delay of 0.5 second, make a second-order 
approximation and estimate the percent overshoot 
if K = 40. Use Bode plots and frequency response 
techniques. [Section: 10.12] 
Use the MATLAB function pade (T, n) 
MATLAB 
to model the delay in Problem 30. 
^ES^to 
Obtain the u n i t s t e p response and 
e v a l u a t e your second-order approximation 
in Problem 30. 
For the Bode plots shown in Figure PIO.IO, deter-
mine the transfer function by hand or via MATLAB. 
[Section: 10.13] 

Problems 
615 
60 
40 
20 
0 
-20 
-40 
60 
0.01 
1 
Frequency (rad/s) 
10 
100 
-100 
§ 
-120 
-140 
-160 
-U 
i - -
0.01 
0.1 
1 
Frequency (rad/s) 
FIGURE P10.10 
10 
100 
33. Repeat Problem 32 for the Bode plots shown in 
Figure P10.ll. [Section: 10.13] 
34. An overhead crane consists of a horizontally 
moving trolley of mass mr dragging a load of 
mass mc, which dangles from its bottom surface 
at the end of a rope of fixed length, L. The 
position of the trolley is controlled in the feed-
back configuration shown in Figure 10.20. Here, 
10 
5 
0 
-5 
10 
15 
/ ' 
S 
0.1 
10 
Frequency (rad/s) 
50 
-50 
-100 
-150 
-200 
\ V 
0.1 
100 
Frequency (rad/s) 
FIGURE P10.11 

616 
Chapter 10 
Frequency Response Techniques 
G(s) 
KP{s),H = l,and 
XT(s) 
1 
P(s) = FT (S) 
rriT s2 (s2 + acol) 
The input is fj{t), the input force applied to the 
trolley. The output is Xj{t), the trolley displacement. 
Also, coo = \IY aQd a = (mL mj)jm.T (Marttinen, 
1990) Make a qualitative Bode plot of the system 
assuming a > 1. 
35. A room's temperature can be controlled by varying 
the radiator power. In a specific room, the transfer 
function from indoor radiator power, Q, to room 
temperature, Tin °C is (Thomas, 2005) 
m = m 
\-6\<.2 
-9> 
(1 x 10-°)s2 + (1.314 x 1 ( T > + (2.66 x 10 
k-13> 
• » — 1 1 > 
s3 + 0.00163 s2 + (5.272 x 10~> + (3.538 x 10 
The system is controlled in the closed-loop configura-
tion shown in Figure 10.20 with G(s) = KP{s), H = 1. 
a. Draw the corresponding Nyquist diagram for 
K = l. 
b. Obtain the gain and phase margins. 
c. Find the range of K for the closed-loop stability. 
Compare your result with that of Problem 61, 
Chapter 6. 
36. The open-loop dynamics from dc voltage armature 
to angular position of a robotic manipulator joint is 
given by P(s) = / ^ ° ^ (Low, 2005). 
a. Draw by hand a Bode plot using asymptotic 
approximations for magnitude and phase. 
b. Use MATLAB to plot the exact 
JJ^iJL 
Bode plot and compare with 
CJ^JP 
your sketch from Part a. 
37. Problem 49, Chapter 8 discusses a magnetic levita-
tion system with a plant transfer function P(s) = 
~ (Galvao, 2003). Assume that the plant is 
s2 -8602 
F 
in cascade with an M(s) and that the system will be 
controlled by the loop shown in Figure 10.20, where 
G(s) = M(s)P(s) and H = 1. For each M(s) that 
follows, draw the Nyquist diagram when K = 1, 
and find the range of closed-loop stability for 
# > 0 . 
a. M(s) = -K 
b.M(s) = -K{S 
200) 
s + 1000 
c. Compare your results with those obtained in 
Problem 49, Chapter 8. 
38. The simplified and linearized model for the transfer 
function of a certain bicycle from steer angle (5) to 
roll angle (cp) is given by (Astrom, 2005) 
P(s) = <p{s) = l0(s + 25) 
8{s) 
s2 + 25 
Assume the rider can be represented by a gain K, 
and that the closed-loop system is shown in Figure 
10.20 with G(s) = KP(s) and H = 1. Use the 
Nyquist stability criterion to find the range of K 
for closed-loop stability. 
39. The control of the radial pickup position of a digital 
versatile disk (DVD) was discussed in Problem 48, 
Chapter 9. There, the open-loop transfer function 
from coil input voltage to radial pickup position was 
given as (Bittanti, 2002) 
m = 
0.63 
0.36 
305.4 
305.4' 
, 0.04 
1 +7rr77izs + 
248.2 
248.2' 
Assume the plant is in cascade with a controller, 
0.5(^ + 1.63) 
M{s) = 5(5 + 0.27) 
and in the closed-loop configuration shown in 
Figure 10.20, where G(s) = M(s)P(s) and H = 1. 
Do the following: 
a. Draw the open-loop frequency response in a 
Nichols chart. 
b. Predict the system's response to a unit step input. 
Calculate the %OS, cfinal, and Ts. 
c. Verify the results of Part b 
MATLAB 
using MATLAB s i m u l a t i o n s . 
4 E 3 9 
40. The Soft Arm, used to feed people with disabilities, 
was discussed in Problem 57 in Chapter 6. Assuming 
the system block diagram shown in Figure P10.12, 
use frequency response techniques to determine the 
following (Kara, 1992): 
a. Gain margin, phase margin, zero dB frequency, 
and 180° frequency 
b. Is the system stable? Why? 

Problems 
617 
Desired 
spoon 
position 
His) + 
Controller 
Robot arm 
Actual 
spoon 
~*l . 
1000(5 + 0.01)(5 + 6) 
5(5 + 20)(5+100) 
—
»
• 
10 
s2+105 + 29 
C(.v) 
FIGURE P10.12 
Soft Arm position control system block diagram 
Desired 
position 
Controller 
Motor and load 
i<g^ 
100,000 
(5 + 500)(5 + 800) 
20,000 
5(5+100) 
FIGURE P10.13 Floppy disk drive block diagram 
Actual 
position 
Xds) 
41. A floppy disk drive was discussed in 
wileypms 
Problem 57 in Chapter 8. Assuming 
d E J 
the system block diagram shown in 
control solutions 
Figure P10.13, use frequency response techniques to 
determine the following: 
a. Gain margin, phase margin, zero dB frequency, 
180° frequency, and closed-loop bandwidth 
b. Percent overshoot, settling time, and peak time 
c. Use MATLAB to simulate the 
MATLAB 
closed-loop step response 
^Km^P 
and compare the results to those ob-
tained in Part b. 
42. Industrial robots, such as that shown in Figure 
P10.14, require accurate models for design of high 
performance. Many transfer function models for 
industrial robots assume interconnected rigid bod-
ies with the drive-torque source modeled as a pure 
gain, or first-order system. Since the motions asso-
ciated with the robot are connected to the drives 
through flexible linkages rather than rigid linkages, 
past modeling does not explain the resonances 
observed. An accurate, small-motion, linearized 
model has been developed that takes into consider-
ation the flexible drive. The transfer function 
G(s) = 999.12 
(s2 + 8.94^ + 44.72; 
[s + 20.7)(^2 + 34.8585 + 60.1' 
relates the angular velocity of the robot base to 
electrical current commands (Good, 1985). Make a 
Bode plot of the frequency response and identify 
the resonant frequencies. 
FIGURE P10.14 
memory units I 
© Corbis). 
Robot performing construction of computer 
£) Michael Rosenfield/Science Faction/ 
43. The charge-coupled device (CCD) that is used in 
video movie cameras to convert images into elec-
trical signals can be used as part of an automatic 
focusing system in cameras. Automatic focusing can 
be implemented by focusing the center of the image 
on a charge-coupled device array through two 
lenses. The separation of the two images on the 
CCD is related to the focus. The camera senses the 
separation, and a computer drives the lens and 

618 
Chapter 10 
Frequency Response Techniques 
(«) 
Desired 
lens 
position+ 
^ 
-
Computer and CCD 
system 
m^K •X Eis) 
r 
—*-
Amplifier 
(b) 
10 
s(s + 2)(5 + 10) 
— * • 
Motor and load 
C(s) 
Actual 
position 
(c) 
FIGURE P10.15 
a. A cutaway view of a digital camera showing parts of the CCD automatic focusing system (© Stephen Sweet/ 
iStockphoto); b. functional block diagram; c. block diagram 
focuses the image. The automatic focus system is a 
position control, where the desired position of the 
lens is an input selected by pointing the camera at 
the subject. The output is the actual position of 
the lens. The camera in Figure PI0.15(a) uses a 
CCD automatic focusing system. Figure P10.15(b) 
shows the automatic focusing feature represented as 
a position control system. Assuming the simplified 
model shown in Figure P10.15(c), draw the Bode 
plots and estimate the percent overshoot for a 
step input. 
44. A ship's roll can be stabilized with a control system. 
A voltage applied to the fins' actuators creates a roll 
torque that is applied to the ship. The ship, in 
response to the roll torque, yields a roll angle. 
Assuming the block diagram for the roll control 
system shown in Figure P10.16, determine the gain 
and phase margins for the system. 
Desired 
Roll 
angle, 6d{s) + s~ •^ error. 9,.(s) 
9 
Transducer 
5 
Voltage 
Fin 
actuator 
0.5 
s + 4 
Torque 
Ship 
roll 
dynamics 
9 
s2 + 0.9s + 9 
Actual 
roll 
angle, 6>,(.s) 
FIGURE PI 0.16 Block diagram of a ship's roll-stabilizing system 

Problems 
619 
45. The linearized model of a particular network link 
working under TCP/IP and controlled using a random 
early detection (RED) algorithm can be described 
by Figure 10.20 where G(s) = M(s)P{s), H = 1, and 
(Hollot, 2001) 
.,, , 
0.005L 
140625c -o.i? 
(5 + 2.67)(5+10) 
a. Plot the Nichols chart for L = 1. Is the system 
closed-loop stable? 
b. Find the range of L for closed-loop stability. 
c. Use the Nichols chart to predict % OS and Ts for 
L = 0.95. Make a hand sketch of the expected 
unit step response. 
d. Verify P a r t c with a Simulink 
Sjmulmk 
u n i t step response simulation. 
^Ei^V 
46. In the TCP/IP network link of Problem 45, let 
L — 0.8, but assume that the amount of delay is 
an unknown variable. 
a. Plot the Nyquist diagram of the system for zero 
delay, and obtain the phase margin. 
b. Find the maximum delay allowed for closed-loop 
stability. 
47. Thermal flutter of the Hubble Space Telescope 
(HST) produces errors for the pointing control sys-
tem. Thermal flutter of the solar arrays occurs when 
the spacecraft passes from sunlight to darkness and 
when the spacecraft is in daylight. In passing from 
daylight to darkness, an end-to-end bending oscilla-
tion of frequency f\ rad/s is experienced. Such oscil-
lations interfere with the pointing control system of 
the HST. A filter with the transfer function 
Gf(s) = 1.96(52 + 5 + 0.25){s2 + 1,26s + 9.87) 
>2 + 0.015^ + 0.57)(^2 + 0.0835 + 17.2) 
is proposed to be placed in cascade with the PID 
controller to reduce the bending (Wie, 1992). 
a. Obtain the frequency response of the filter and 
estimate the bending frequencies that will be 
reduced. 
b. Explain why this filter will reduce the bending 
oscillations if these oscillations are thought to be 
disturbances at the output of the control system. 
48. An experimental holographic media storage system 
uses a flexible photopolymer disk. During rotation, 
the disk tilts, making information retrieval difficult. A 
system that compensates for the tilt has been devel-
oped. For this, a laser beam is focused on the disk 
surface and disk variations are measured through 
reflection. A mirror is in turn adjusted to align with 
the disk and makes information retrieval possible. The 
system can be represented by a unity feedback system 
in which a controller with transfer function 
Gc(s) = 
and a plant 
P(s) = 
78.575(5 + 436)2 
(5 + 132)(5 + 8030) 
1.163 x 108 
53 + 962.552 + 5.958 x 1055 + 1.16 x 108 
form an open loop transmission L(s) = Gc(s)P(s) 
(Kim, 2009). 
a. Use MATLAB to obtain the 
JiS^L. 
system' s Nyquist dia- 
^j^^P 
gram. Find out if the system is stable. 
b. Find the system' s phase margin. 
c. Use the value of phase margin obtained 
in b. to calculate the expected sys-
tem's overshoot to a step input. 
d. Simulate the system's response to a 
unit step input and verify the %OS cal-
culated in c. 
49. The design of cruise control systems in heavy vehicles 
such as big rigs is especially challenging due to the 
extreme variations in payload. A typical frequency 
response for the transfer function from fuel mass flow 
to vehicle speed is shown in Figure PI0.17. 
10-2 
10° 
f(Hz) 
FIGURE P10.17 
UP 

620 
Chapter 10 
Frequency Response Techniques 
This response includes the dynamics of the 
engine, the gear box, the propulsion shaft, the dif-
ferential, the drive shafts, the chassis, the payload, 
and tire dynamics. Assume that the system is con-
trolled in a closed-loop, unity-feedback loop using a 
proportional compensator (van der Zalm, 2008). 
a. Make a plot of the Nyquist diagram that corre-
sponds to the Bode plot of Figure P10.17. 
b. Assuming there are no open-loop poles in the 
right half-plane, find out if the system is closed-
loop stable when the proportional gain K — 1. 
C. Find the range of positive K for which the system 
is closed-loop stable. 
50. Use LabVIEW with t h e Control 
ubviEW 
Design and Simulation Mod- 
^K£flP 
u l e , and MathScript RT Module 
MATLAB 
and modify t h e CDEx Nyquist 
A n a l y s i s . v i 
t o 
obtain 
t h e 
range of K for s t a b i l i t y using the Nyquist 
p l o t for any system you e n t e r . In a d d i t i o n , 
design a LabVIEW VI t h a t w i l l accept as an 
input the polynomial numerator and poly-
nomial denominator of an open-loop t r a n s -
fer function and obtain a Nyquist p l o t 
for a value of K = 10, 000. Your VI w i l l 
a l s o d i s p l a y t h e following as generated 
from the Nyquist p l o t : 
(1) gain margin, 
(2) phase margin, (3) zero dB frequency, 
and (4) 180 degrees frequency. Use the 
system and r e s u l t s of 
Skill-Assessment 
Exercise 10.6 to t e s t your V i s . 
51. Use LabVIEW with t h e Control 
J j ^ ^ 
Design and Simulation Mod- 
^ K £ ^ P 
u l e , and MathScript RT Module 
M A ^ 
to b u i l d a VI t h a t w i l l accept 
W d V 
an open-loop t r a n s f e r function, p l o t t h e 
Bode diagram, and p l o t the c l o s e d - l o o p 
s t e p response. Your VI w i l l a l s o u s e t h e 
CD Parametric Time Response . v i to d i s p l a y 
(1) r i s e time, (2) peak time, (3) s e t t l i n g 
time, (4) p e r c e n t overshoot, (5) s t e a d y -
s t a t e v a l u e , and (6) peak v a l u e . Use t h e 
system i n Skill-Assessment E x e r c i s e 10 . 9 
t o t e s t your VI. Compare t h e r e s u l t s ob-
t a i n e d from your VI with those obtained in 
Skill-Assessment E x e r c i s e 1 0 . 9 . 
52. The block diagram of a cascade 
MATLAB 
system used to c o n t r o l water 
d U d ^ P 
l e v e l in a steam g e n e r a t o r of a n u c l e a r 
power p l a n t 
{Wang, 2009) 
was p r e s e n t e d 
in Figure P . 6 . 1 9 . In t h a t system, 
the 
l e v e l c o n t r o l l e r , GLC (s) , i s the m a s t e r 
c o n t r o l l e r and t h e feed-water flow con-
t r o l l e r , GFC (s) , i s t h e s l a v e c o n t r o l l e r . 
Consider t h a t t h e inner feedback loop i s 
r e p l a c e d b y i t s e q u i v a l e n t t r a n s f e r func-
t i o n , Gm (s) . 
Using numerical v a l u e s i n (Wang, 
2009) 
and (Bhambhani, 
2008) t h e t r a n s f e r func-
t i o n s w i t h a 1 second pure d e l a y a r e : 
Gfw(s) = 
Gwx(s) = 
2 e 
2-e 
5 ( 7 i 5 + l ) 
5(255 + 1)' 
(45 + 1) 
3(3.3335 + 1)' 
GLC(s) = KPLC + KDLCS = 1.5(105 +1). 
Use MATLAB or any o t h e r program t o : 
a. Obtain Bode magnitude and phase p l o t s 
for t h i s system u s i n g a 
f i f t h - o r d e r 
Pade approximation ( a v a i l a b l e i n MAT-
LAB) . Note on t h e s e p l o t s , i f a p p l i c a -
b l e , t h e gain and phase margins . 
b. P l o t t h e response of the system, c ( t ) , t o 
a u n i t s t e p input, r ( t ) = u(t) . Note on 
t h e c ( t ) curve t h e r i s e time, Tr, t h e s e t -
t l i n g time, Ts, t h e f i n a l value of t h e 
output, and, if a p p l i c a b l e , t h e percent 
overshoot, %OS, and mid peak time, Tp. 
c. Repeat t h e above two s t e p s for a pure 
d e l a y of 1.5 s e c o n d s . 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
53. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses active control of a pantograph mechanism 
for high-speed rail systems. In Problem79(a), Chapter 
5, you found the block diagram for the active panto-
graph control system. In Chapter 8, Problem 72, you 
designed the gain to yield a closed-loop step response 
with30% overshoot. A plot of the step response should 
have shown a settling time greater than 0.5 second as 
well as a high-frequency oscillation superimposed 
over the step response. In Chapter 9, Problem 55, 
we reduced the settling time to about 0.3 second, re-
duced the step response steady-state error to zero, and 
eliminated the high-frequency oscillations by using a 
notch filter (O'Connor, 1997). Using the equivalent 
forward transfer function found in Chapter 5 cascaded 

Cyber Exploration Laboratory 
621 
with the notch filter specified in Chapter 9, do the 
following using frequency response techniques: 
a. Plot the Bode plots for a total equivalent gain of 
1 and find the gain margin, phase margin, and 
180° frequency. 
b. Find the range of K for stability. 
c. Compare your answer to Part b with your answer 
to Problem 67, Chapter 6. Explain any differences. 
54. Control of HIV/AIDS. The linearized model for an 
HIV/AIDS patient treated with RTIs was obtained 
in Chapter 6 as {Craig, 2004); 
Y(s) 
-520s - 10.3844 
m= U\ {s) 
s* + 2.681752 + 0.11« + 0.0126 
a. Consider this plant in the feedback configuration 
in Figure 10.20 with G{s) = P{s) and H{s) = 1. 
Obtain the Nyquist diagram. Evaluate the sys-
tem for closed-loop stability. 
b. Consider this plant in the feedback configuration 
in Figure 10.20 with G(s) = -P{s) and H(s) = 1. 
Obtain the Nyquist diagram. Evaluate the system 
for closed-loop stability. Obtain the gain and 
phase margins. 
55. Hybrid vehicle. In Problem 8.74 
MAOAB 
we used MATLAB to plot the 
S Q 9 
root locus for the speed con-
trol of an HEV rearranged as a unity-
feedback system, as shown in Figure 
P7.34 (Preitl, 
2007). The plant and com-
pensator were given by 
£(5+0.6) 
and we found that K — 0.78, resulted in a 
critically damped system. 
a. Use MATLAB or any other program to plot 
i. The Bode magnitude and phase plots 
for that system, and 
ii. The response of the system, c(t), to 
a step input, r(t) = 4 u(t) . Note on 
the c(t) curve the rise time, Tr, and 
settling time, Tsf as well as the 
final value of the output. 
b. Now add an integral gain to the con-
troller, such that the plant and com-
pensator transfer function becomes 
G(s) = 
K1(s + Zc)(s+ 0.6) 
s(s+ 0.5858)(5+0.0163; 
K, 
G(s) = [s+ 0.5858)(5+0.0163) 
where ^=0.78 andZc=—=-= 0.4 . Use MAT-
LAB or any other program to do the 
following: 
i. Plot the Bode magnitude and phase 
plots for this case. 
ii. Obtain the response of the system to 
a step input, r(t) 
= 4 u(t). 
Plot 
c(t) and note on it the rise time, 
Tr, percent overshoot, %OS, peak 
time, Tp, and settling time, Ts. 
c. Does the response obtained in a. or b. 
resemble a second-order overdamped, 
critically damped, or underdamped re-
sponse? Explain. 
Cyber Exploration Laboratory 
Experiment 10.1 
Objective To examine the relationships between open-loop frequency response 
and stability, open-loop frequency response and closed-loop transient response, and 
the effect of additional closed-loop poles and zeros upon the ability to predict 
closed-loop transient response 
Minimum Required Software Packages MATLAB, and the Control 
System Toolbox 
Prelab 
1. Sketch the Nyquist diagram for a unity negative feedback system with a forward 
is 
transfer function of G(s) = —. -^-. 
—-. From your Nyquist plot, determine 
the range of gain, K, for stability. 

622 
Chapter 10 
Frequency Response Techniques 
2. Find the phase margins required for second-order closed-loop step responses 
with the following percent overshoots: 5%, 10%, 20%, 30%. 
Lab 
1. Using the SISO Design Tool, produce the following plots simultaneously for the 
system of Prelab 1: root locus, Nyquist diagram, and step response. Make plots for 
the following values of K: 50,100, the value for marginal stability found in Prelab 
1, and a value above that found for marginal stability. Use the zoom tools when 
required to produce an illustrative plot. Finally, change the gain by grabbing and 
moving the closed-loop poles along the root locus and note the changes in the 
Nyquist diagram and step response. 
2. Using the SISO Design Tool, produce Bode plots and closed-loop step responses 
for a unity negative feedback system with a forward transfer function of 
G(s) — 
?- Produce these plots for each value of phase margin found 
.9(.9 + 10)^ 
in Prelab 2. Adjust the gain to arrive at the desired phase margin by grabbing the 
Bode magnitude curve and moving it up or down. Observe the effects, if any, 
upon the Bode phase plot. For each case, record the value of gain and the 
location of the closed-loop poles. 
3. Repeat Lab 2 for G(s) = 
7^. 
S[S T tUJ 
Postlab 
1. Make a table showing calculated and actual values for the range of gain for 
stability as found in Prelab 1 and Lab 1. 
2. Make a table from the data obtained in Lab 2 itemizing phase margin, percent 
overshoot, and the location of the closed-loop poles. 
3. Make a table from the data obtained in Lab 3 itemizing phase margin, percent 
overshoot, and the location of the closed-loop poles. 
4. For each Postlab task 1 to 3, explain any discrepancies between the actual values 
obtained and those expected. 
Experiment 10.2 
Objective To use LabVIEW and Nichols charts to determine the closed-loop 
time response performance. 
Minimum Required Software Packages LabVIEW, Control Design and 
Simulation Module, MathScript RT Module, and MATLAB 
Prelab 
1. Assume a unity-feedback system with a forward-path transfer function, 
G(s) = -j-—FT- Use MATLAB or any method to determine gain and phase 
margins. In addition, find the percent overshoot, settling time, and peak time of 
the closed-loop step response. 
2. Design a LabVIEW VI that will create a Nichols chart. Adjust the Nichols chart's 
scale to estimate gain and phase margins. Then, prompt the user to enter the values of 

Bibliography 
623 
gain and phase margin found from the Nichols chart. In response, your VI will produce 
the percent overshoot, settling time, and peak time of the closed-loop step response. 
Lab Run your VI for the system given in the Prelab. Test your VI with other 
systems of your choice. 
Postlab 
Compare the closed-loop performance calculated in the Prelab with 
those produced by your VI. 
^ Bibliography ^ 
Astrom, K., Klein, R. E., and Lennartsson, A. Bicycle Dynamics and Control. IEEE Control 
System, August 2005, pp. 26-47. 
Bhambhani, V., and Chen, Yq. Experimental Study of Fractional Order Proportional Integral 
(FOPI) Controller for Water Level Control. 47th IEEE Conference on Decision and 
Control, 2008, pp. 1791-1796. 
Bittanti, S., Dell'Orto, E, DiCarlo, A., and Savaresi, S. M., Notch Filtering and Multirate 
Control for Radial Tracking in High Speed DVD-Players. IEEE Transactions on Consumer 
Electronics, vol. 48. 2002, pp. 56-62. 
Bode, H. W. Network Analysis and Feedback Amplifier Design. Van Nostrand, Princeton, NJ, 
1945. 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989. 
Franklin, G., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems, 
2d ed. Addison-Wesley, Reading, MA, 1991. 
Galvao, R. K. H., Yoneyama, T, and de Araiijo, F M. U. A Simple Technique for Identifying a 
Linearized Model for a Didactic Magnetic Levitation System. IEEE Transactions on 
Education, vol. 46, no. 1, February 2003, pp. 22-25. 
Good, M. G, Sweet, L. M., and Strobel, K. L. Dynamic Models for Control System Design of 
Integrated Robot and Drive Systems. Journal of Dynamic Systems, Measurement, and 
Control, March 1985, pp. 53-59. 
Hollot, C. V, Misra, V, Towsley, D., and Gong, W A Control Theoretic Analysis of RED. 
Proceedings of IEEE INFOCOM, 2001, pp. 1510-1519. 
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T. Design of Feedback Control Systems, 
2d ed. Saunders College Publishing, New York, 1989. 
Kara, A., Kawamura, K., Bagchi, S., and El-Gamal, M. Reflex Control of a Robotic Aid 
System to Assist the Physically Disabled. IEEE Control Systems, June 1992, pp. 71-77. 
Kim, S.-H., Kim, J. H., Yang, J., Yang, H , Park, J.-Y, and Park, Y-P. Tilt Detection and Servo 
Control Method for the Holographic Data Storage System. Microsyst Technol, vol. 15,2009. 
pp. 1695-1700. 
Kuo, B. C. Automatic Control Systems, 5th ed. Prentice Hall, Upper Saddle River, NJ, 1987. 
Kuo. F F Network Analysis and Synthesis. Wiley, New York, 1966. 
Low, K. H., Wang, H., Liew, K. M., and Cai, Y. Modeling and Motion Control of Robotic Hand 
for Telemanipulation Application. International Journal of Software Engineering and 
Knowledge Engineering, vol. 15, 2005, pp. 147-152. 
Marttinen, A., Virkkunen, J., and Salminen, R. T Control Study with Pilot Crane. IEEE 
Transactions on Education, vol. 33, no. 3, August 1990, pp. 298-305. 

Chapter 10 
Frequency Response Techniques 
Nilsson, J. W. Electric Circuits, 3d ed. Addison-Wesley, Reading, MA, 1990. 
Nyquist, H. Regeneration Theory. Bell Systems Technical Journal, January 1932, pp. 126-147. 
O'Connor, D. R, Eppinger, S. D., Seering, W. P., and Worrnly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE. 2007. 
Thomas, B., Soleimani-Mosheni, M., and Fahlen, P. Feed-forward in Temperature Control of 
Buildings. Energy and Buildings, vol. 37, 2005, pp. 755-761. 
Van der Zalm, G., Huisman, R., Steinbuch, M., and Veldpaus, F. Frequency Domain Approach 
for the Design of Heavy-Duty Vehicle Speed Controllers. Int. J. Heavy Vehicle Systems, 
vol. 15, no. 1, 2008. pp. 107-123. 
Wang, X.-K., Yang, X.-H., Liu, G., and Qian, H. Adaptive Neuro-Fuzzy Inference System PID 
controller for steam generator water level of nuclear power plant, Proceedings of the Eighth 
International Conference on Machine Learning and Cybernetics, 2009, pp. 567-572. 
Wie, B. Experimental Demonstration to a Classical Approach to Flexible Structure Control. 
Journal of Guidance, Control, and Dynamics, November-December 1992, pp. 1327-1333. 

Design via Frequency Response 
^Chapter 
Learning Outcomes^ 
After completing this chapter the student will be able to: 
• Use frequency response techniques to adjust the gain to meet a transient response 
specification (Sections 11.1-11.2) 
• Use frequency response techniques to design cascade compensators to improve the 
steady-state error (Section 11.3) 
• Use frequency response techniques to design cascade compensators to improve the 
transient response (Section 11.4) 
• Use frequency response techniques to design cascade compensators to improve 
both the steady-state error and the transient response (Section 11.5) 
^Case Study Learning Outcomes^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to use frequency response techniques to design the gain to meet a 
transient response specification. 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to use frequency response techniques to design a cascade 
compensator to meet both transient and steady-state error specifications. 
625 

626 
Chapter 11 
Design via Frequency Response 
^11.1 
Introduction 
In Chapter 8, we designed the transient response of a control system by adjusting the 
gain along the root locus. The design process consisted of finding the transient 
response specification on the root locus, setting the gain accordingly, and settling for 
the resulting steady-state error. The disadvantage of design by gain adjustment is 
that only the transient response and steady-state error represented by points along 
the root locus are available. 
In order to meet transient response specifications represented by points not on 
the root locus and, independently, steady-state error requirements, we designed 
cascade compensators in Chapter 9. In this chapter, we use Bode plots to parallel the 
root locus design process from Chapters 8 and 9. 
Let us begin by drawing some general comparisons between root locus and 
frequency response design. 
Stability and transient response design via gain adjustment. Frequency response 
design methods, unlike root locus methods, can be implemented conveniently 
without a computer or other tool except for testing the design. We can easily 
draw Bode plots using asymptotic approximations and read the gain from the plots. 
Root locus requires repeated trials to find the desired design point from which the 
gain can be obtained. For example, in designing gain to meet a percent overshoot 
requirement, root locus requires the search of a radial line for the point where the 
open-loop transfer function yields an angle of 180°. To evaluate the range of gain for 
stability, root locus requires a search of the /w-axis for 180°. Of course, if one uses a 
computer program, such as MATLAB, the computational disadvantage of root locus 
vanishes. 
Transient response design via cascade compensation. Frequency response 
methods are not as intuitive as the root locus, and it is something of an art to 
design cascade compensation with the methods of this chapter. With root locus, we 
can identify a specific point as having a desired transient response characteristic. We 
can then design cascade compensation to operate at that point and meet the 
transient response specifications. In Chapter 10, we learned that phase margin is 
related to percent overshoot (Eq. (10.73)) and bandwidth is related to both damping 
ratio and settling time or peak time (Eqs. (10.55) and (10.56)). These equations are 
rather complicated. When we design cascade compensation using frequency re-
sponse methods to improve the transient response, we strive to reshape the open-
loop transfer function's frequency response to meet both the phase-margin require-
ment (percent overshoot) and the bandwidth requirement (settling or peak time). 
There is no easy way to relate all the requirements prior to the reshaping task. Thus, 
the reshaping of the open-loop transfer function's frequency response can lead to 
several trials until all transient response requirements are met. 
Steady-state error design via cascade compensation. An advantage of using 
frequency design techniques is the ability to design derivative compensation, such as 
lead compensation, to speed up the system and at the same time build in a desired 
steady-state error requirement that can be met by the lead compensator alone. 
Recall that in using root locus there are an infinite number of possible solutions to 
the design of a lead compensator. One of the differences between these solutions is 
the steady-state error. We must make numerous tries to arrive at the solution that 
yields the required steady-state error performance. With frequency response tech-
niques, we build the steady-state error requirement right into the design of the lead 
compensator. 

11.2 Transient Response via Gain Adjustment 
You are encouraged to reflect on the advantages and disadvantages of root 
locus and frequency response techniques as you progress through this chapter. Let us 
take a closer look at frequency response design. 
When designing via frequency response methods, we use the concepts of 
stability, transient response, and steady-state error that we learned in Chapter 10. 
First, the Nyquist criterion tells us how to determine if a system is stable. Typically, an 
open-loop stable system is stable in closed-loop if the open-loop magnitude fre-
quency response has a gain of less than 0 dB at the frequency where the phase 
frequency response is 180°. Second, percent overshoot is reduced by increasing the 
phase margin, and the speed of the response is increased by increasing the 
bandwidth. Finally, steady-state error is improved by increasing the low-frequency 
magnitude responses, even if the high-frequency magnitude response is attenuated. 
These, then, are the basic facts underlying our design for stability, transient 
response, and steady-state error using frequency response methods, where the 
Nyquist criterion and the Nyquist diagram compose the underlying theory behind 
the design process. Thus, even though we use the Bode plots for ease in obtaining the 
frequency response, the design process can be verified with the Nyquist diagram 
when questions arise about interpreting the Bode plots. In particular, when the 
structure of the system is changed with additional compensator poles and zeros, the 
Nyquist diagram can offer a valuable perspective. 
The emphasis in this chapter is on the design of lag, lead, and lag-lead 
compensation. General design concepts are presented first, followed by step-by-
step procedures. These procedures are only suggestions, and you are encouraged to 
develop other procedures to arrive at the same goals. Although the concepts in general 
apply to the design of PI, PD, and PID controllers, in the interest of brevity, detailed 
procedures and examples will not be presented. You are encouraged to extrapolate the 
concepts and designs covered and apply them to problems involving PI, PD, and PID 
compensation presented at the end of this chapter. Finally, the compensators devel-
oped in this chapter can be implemented with the realizations discussed in Section 9.6. 
(
11.2 Transient Response via Gain 
Adjustment 
Let us begin our discussion of design via frequency response methods by discussing 
the link between phase margin, transient response, and gain. In Section 10.10, the 
relationship between damping ratio (equivalently percent overshoot) and phase 
margin was derived for G(s) = cofjsis + 2%co„). Thus, if we can vary the phase 
margin, we can vary the percent overshoot. Looking at Figure 11.1, we see that 
if we desire a phase margin, $^, represented by CD, we would have to raise the 
magnitude curve by AB. Thus, a simple gain adjustment can be used to design phase 
margin and, hence, percent overshoot. 
We now outline a procedure by which we can determine the gain to meet a 
percent overshoot requirement using the open-loop frequency response and assum-
ing dominant second-order closed-loop poles. 
Design Procedure 
1. Draw the Bode magnitude and phase plots for a convenient value of gain. 
2. Using Eqs. (4.39) and (10.73), determine the required phase margin from the 
percent overshoot. 

628 
Chapter 11 
Design via Frequency Response 
M(dB) 
\ 
A 
Required 
increase in gain 
Phase (degrees) 
i. 
*M 
«**« 
1 D 
\ 
logo 
log (o 
-180 
FIGURE 11.1 Bode plots showing gain adjustment for a desired phase margin 
3. Find the frequency, w$M, on the Bode phase diagram that yields the desired phase 
margin, CD, as shown on Figure 11.1. 
4. Change the gain by an amount AB to force the magnitude curve to go through 
0 dB at co<&M. The amount of gain adjustment is the additional gain needed to 
produce the required phase margin. 
We now look at an example of designing the gain of a third-order system for 
percent overshoot. 
Design 
Example 11.1 
Transient Response Design via Gain Adjustment 
PROBLEM: For the position control system shown in Figure 11.2, find the value of 
preamplifier gain, K, to yield a 9.5% overshoot in the transient response for a step 
input. Use only frequency response methods. 
SOLUTION: We will now follow the previously described gain adjustment design 
procedure. 
1. Choose K = 3.6 to start the magnitude plot at 0 dB at m = 0.1 in Figure 11.3. 
2. Using Eq. (4.39), a 9.5% overshoot implies f = 0.6 for the closed-loop dominant 
poles. Equation (10.73) yields a 59.2° phase margin for a damping ratio of 0.6. 
Desired 
position 
ff(.v) 
Preamplifier 
- * » * 
K 
Power 
amplifier 
100 
(s +• 100) 
Motor 
and 
load 
1 
(s + 36) 
Shall 
velocity 
1 
s 
Shalt 
position 
cm 
FIGURE 11.2 
System for Example 11.1 

11.2 Transient Response via Gain Adjustment 
629 
o 
-10 
-20 
§ 
-30 
f -40 
a -so 
-60 
-70 
^^^^-
^ * 
HFTI 
lagnitude after 
H yr 
1^ 
^ 
gain adjustmen 
1 1 I I I 
^ 
0.1 
10 
100 
Frequency (rad/s) 
\ \ 
V s s 
SJ 
-100 
I -120 
8 
g> -140 
• ~160 
I -180 
-200 
-220 
0.1 
1 
10 
100 
Frequency (rad/s) 
FIGURE 11.3 
Bode magnitude and phase plots for Example 11.1 
3. Locate on the phase plot the frequency that yields a 59.2° phase margin. This 
frequency is found where the phase angle is the difference between —180° and 
59.2°, or -120.8°. The value of the phase-margin frequency is 14.8 rad/s. 
4. At a frequency of 14.8 rad/s on the magnitude plot, the gain is found to be —44.2 dB. 
This magnitude has to be raised to 0 dB to yield the required phase margin. Since 
the log-magnitude plot was drawn for K = 3.6, a 44.2 dB increase, or K = 3.6 x 
162.2 = 583.9, would yield the required phase margin for 9.48% overshoot. 
The gain-adjusted open-loop transfer function is 
58,390 
G(s) = 
(11.1) 
^ + 36)(^+100) 
Table 11.1 summarizes a computer simulation of the gain-compensated system. 
TABLE 11.1 Characteristic of gain-compensated system of Example 11.1 
Parameter 
Proposed specification 
Actual value 
Phase margin 
Phase-margin frequency 
Percent overshoot 
Peak time 
59.2° 
9.5 
16.22 
59.2° 
14.8 rad/s 
10 
0.18 second 
Students who are using MATLAB should now run chllpl in Appendix B. 
You will learn how to use MATLAB to design a gain to meet a percent 
overshoot specification using Bode plots. This exercise solves 
Example 11.1 using MATLAB. 
MATLAB 

630 
Chapter 11 
Design via Frequency Response 
Skill-Assessment Exercise 11.1 
WileyPLUS 
Control Solutions 
Trylt 11.1 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to solve 
Skill-Assessment Exercise 
11.1. 
pos=20 
z=(-log(pos/100))/. . . 
(sqrt(piA2+... 
log(pos/100)A2)) 
Pm=atan(2*z/... 
(sqrt(-2*z"2+... 
sqrt(l+4*zM))))* . . . 
(180/pi) 
G=zpk([],... 
[0.-50,-120],1) 
sisotool 
PROBLEM: For a unity feedback system with a forward transfer function 
G ( 5 ) = ^(5 + 50)(5 + 120) 
use frequency response techniques to find the value of gain, K, to yield a closed-
loop step response with 20% overshoot. 
ANSWER: K = 194,200 
The complete solution is located at www.wiley.com/college/nise. 
In the SISOTOOL Window: 
1. Select Import. . . in the File menu. 
2. Click on G in the System Data Window and click Browse . . . 
3. In the Model Import Window select radio button Workspace and select G in 
Available Models. Click Import, then Close. 
4. Click Ok in the System Data Window. 
5. Right-click in the Bode graph area and be sure all selections under Show are 
checked. 
6. Grab the stability margin point in the magnitude diagram and raise the 
magnitude curve until the phase curve shows the phase margin calculated by 
the program and shown in the MATLAB Command Window as Pm. 
7. Right-click in the Bode plot area, select Edit Compensator . . . and read the 
gain under Compensator in the resulting window. 
In this section, we paralleled our work in Chapter 8 with a discussion of 
transient response design through gain adjustment. In the next three sections, we 
parallel the root locus compensator design in Chapter 9 and discuss the design of lag, 
lead, and lag-lead compensation via Bode diagrams. 
^ 11.3 Lag Compensation 
In Chapter 9, we used the root locus to design lag networks and PI controllers. Recall 
that these compensators permitted us to design for steady-state error without 
appreciably affecting the transient response. In this section, we provide a parallel 
development using the Bode diagrams. 
Visualizing Lag Compensation 
The function of the lag compensator as seen on Bode diagrams is to (1) improve the 
static error constant by increasing only the low-frequency gain without any resulting 
instability, and (2) increase the phase margin of the system to yield the desired 
transient response. These concepts are illustrated in Figure 11.4. 
The uncompensated system is unstable since the gain at 180° is greater than 
0 dB. The lag compensator, while not changing the low-frequency gain, does reduce 

11.3 Lag Compensation 
Jtf(dB) 
Uncompensated system 
Compensated system 
Lag compensator 
Phase (degrees) 
Phase-marg 
Lag compensa 
Uncompensated system 
n frequency 
Desired phase 
-180 
FIGURE 11.4 
Visualizing lag compensation 
log co 
log co 
the high-frequency gain.1 Thus, the low-frequency gain of the system can be made 
high to yield a large Kv without creating instability. This stabilizing effect of the lag 
network comes about because the gain at 180° of phase is reduced below 0 dB. 
Through judicious design, the magnitude curve can be reshaped, as shown in Figure 
11.4, to go through 0 dB at the desired phase margin. Thus, both Kv and the desired 
transient response can be obtained. We now enumerate a design procedure. 
Design Procedure 
1. Set the gain, K, to the value that satisfies the steady-state error specification and 
plot the Bode magnitude and phase diagrams for this value of gain. 
2. Find the frequency where the phase margin is 5° to 12° greater than the phase 
margin that yields the desired transient response (Ogata, 1990). This step com-
pensates for the fact that the phase of the lag compensator may still contribute 
anywhere from —5° to - 12° of phase at the phase-margin frequency. 
3. Select a lag compensator whose magnitude response yields a composite Bode 
magnitude diagram that goes through 0 dB at the frequency found in Step 2 as 
follows: Draw the compensator's high-frequency asymptote to yield 0 dB for the 
compensated system at the frequency found in Step 2. Thus, if the gain at the 
frequency found in Step 2 is 20 log KPM, then the compensator's high-frequency 
asymptote will be set at -20 log KPM', select the upper break frequency to be 
1 decade below the frequency found in Step 2;2 select the low-frequency asymp-
tote to be at 0 dB; connect the compensator's high- and low-frequency asymptotes 
with a —20 dB/decade line to locate the lower break frequency. 
4. Reset the system gain, K, to compensate for any attenuation in the lag network in 
order to keep the static error constant the same as that found in Step 1. 
The name lag compensator comes from the fact that the typical phase angle response for the 
compensator, as shown in Figure 11.4, is always negative, or lagging in phase angle. 
2 This value of break frequency ensures that there will be only -5° to - 12° phase contribution from the 
compensator at the frequency found in Step 2. 

632 
Chapter 11 
Design via Frequency Response 
20 
18 
16 
14 
* 1 2 
g>l0 
8 
6 
4 
2 
0 
\ \ \ 
\ 
s 
• 
0.001 
0.01 
0.1 
1 
Frequency (rad/s) 
10 
100 
- 1 0 
g -20 
- 3 0 
- 4 0 
-50 
FIGURE 11.5 Frequency response 
plots of a lag compensator, 
Gc{s) = (s+ 0.1)/(5+ 0.01) 
- 6 0 
_^ 
N \ 
\ 
-
\ 
/ 
/ 
/ 
7 
/ 
/ 
Range of frequencies 
/ 
of the phase m 
--/-
/ 
or the desigi 
argin 
0.001 
0.01 
0.1 
Frequency (rad/s) 
10 
100 
From these steps, you see that we are relying upon the initial gain setting to 
meet the steady-state requirements and then relying upon the lag compensator's 
-20 dB/decade slope to meet the transient response requirement by setting the 0 dB 
crossing of the magnitude plot. 
The transfer function of the lag compensator is 
(11.2) 
Gc(s >-'
+? 
s + ^z 
ocT 
where a > 1. 
Figure 11.5 shows the frequency response curves for the lag compensator. The 
range of high frequencies shown in the phase plot is where we will design our phase 
margin. This region is after the second break frequency of the lag compensator, 
where we can rely on the attenuation characteristics of the lag network to reduce the 
total open-loop gain to unity at the phase-margin frequency. Further, in this region 
the phase response of the compensator will have minimal effect on our design of the 
phase margin. Since there is still some effect, approximately 5° to 12°, we will add 
this amount to our phase margin to compensate for the phase response of the lag 
compensator (see Step 2). 
Example 11.2 
Lag Compensation Design 
PROBLEM: Given the system of Figure 11.2, use Bode diagrams to design a lag 
compensator to yield a tenfold improvement in steady-state error over the gain-
compensated system while keeping the percent overshoot at 9.5%. 
SOLUTION: We will follow the previously described lag compensation design 
procedure. 

11.3 
Lag Compensation 
6 3 3 
84 
72 
60 
48 
36 
24 
12 
0 
-12 
-24 
-36 
-48 
-60 
"•"••-.s^ 
" Lag co mpensator 
_JJncompensaiea system 
"^-^ 
0.01 
0.1 
1 
Frequency (rad/s) 
10 
100 
-50 
-100 
-150 
-200 
-250 
J-M-r+H 
1— 
Lag compensator 
I N I 
1 
Uncompensated system 
4rtfflK 
Lag-compensated H 
system 
^ 
^ S N S 
0.01 
0.1 
1 
10 
100 
Frequency (rad/s) 
FIGURE 11.6 
Bode plots for Example 11.2. 
1. From Example 11.1 a gain, K, of 583.9 yields a 9.5% overshoot. Thus, for this 
system, Kv = 16.22. For a tenfold improvement in steady-state error, Kv must 
increase by a factor of 10, or Kv = 162.2. Therefore, the value of K in Figure 11.2 
equals 5839, and the open-loop transfer function is 
583,900 
° W = 5(.+ 36)(5+ 100) 
( 1 1 3 ) 
The Bode plots for K = 5839 are shown in Figure 11.6. 
2. The phase margin required for a 9.5% overshoot (£ = 0.6) isfoundfromEq. (10.73) 
to be 59.2°. We increase this value of phase margin by 10° to 69.2° in order to 
compensate for the phase angle contribution of the lag compensator. Now find the 
frequency where the phase margin is 69.2°. This frequency occurs at a phase angle 
of -180° + 69.2° = -110.8° and is 9.8 rad/s. At this frequency, the magnitude plot 
must go through 0 dB. The magnitude at 9.8 rad/s is now +24 dB (exact, that 
is, nonasymptotic). Thus, the lag compensator must provide -24 dB attenuation 
at 9.8 rad/s. 
3.&4. We now design the compensator. First draw the high-frequency asymptote 
at —24 dB. Arbitrarily select the higher break frequency to be about one decade 
below the phase-margin frequency, or 0.98 rad/s. Starting at the intersection of 
this frequency with the lag compensator's high-frequency asymptote, draw a 
—20 dB/decade line until 0 dB is reached. The compensator must have a dc gain 
of unity to retain the value of Kv that we have already designed by setting 
K = 5839. The lower break frequency is found to be 0.062 rad/s. Hence, the lag 
compensator's transfer function is 
_ , . 
0.063(5 + 0.98) 
... .. 
Gcis)= 
(, + 0.062) 
( 1 L 4 ) 
where the gain of the compensator is 0.063 to yield a dc gain of unity. 

634 
Chapter 11 
Design via Frequency Response 
The compensated system's forward transfer function is thus 
^ . , ^ , , 
36,786(^ + 0.98) 
M„ ^ 
G W G ' ( ' ) = s(s + 36)(, + 100)(, + 0.062) 
<"-5> 
The characteristics of the compensated system, found from a simulation and exact 
frequency response plots, are summarized in Table 11.2. 
TABLE 11.2 
Characteristics of the lag-compensated system of Example 11.2 
Parameter 
Proposed specification 
Actual value 
Kv 
162.2 
161.5 
Phase margin 
59.2° 
62° 
Phase-margin frequency 
— 
11 rad/s 
Percent overshoot 
9.5 
10 
Peak time 
— 
0.25 second 
MATLAB 
Students who are using MATLAB should now run chl lp2 in Appendix B. 
You will learn how to use MATLAB to design a lag compensator. You 
will enter the value of gain to meet the steady-state error 
requirement as well as the desired percent overshoot. MATLAB 
then designs a lag compensator using Bode plots, evaluates Kv, 
and generates a closed-loop step response. This exercise solves 
Example 11.2 using MATLAB. 
Skill-Assessment Exercise 11.2 
PROBLEM: Design a lag compensator for the system in Skill-Assessment Exercise 
11.1 that will improve the steady-state error tenfold, while still operating with 20% 
overshoot. 
ANSWER: 
, _ 0.0691(6- + 2.04) 
1,942,000 
<n*W- 
(5 + 0.141) 
' ^
-
^ 
+ 50)(5 + 120) 
The complete solution is at www.wiley.com/college/nise. 
Trylt 11.2 
Use MATLAB, the Control System Toolbox, and the following statements to solve Skill-
Assessment Exercise 11.2. 
pos=20 
Ts=0.2 
z= (-log (pos/100))/(sqrt (piA2+log (pos/100) "2)) 
Pm=atan (2*z/(sqrt (-2*zA2+sqrt (1+4* zM))))*(180/pi) 
Wbw=(4/(Ts*z))*sqrt ((l-2*zA2) +sqrt (4*zA4-4*zA2+2)) 
K=1942000 
G=zpk([ ], [0,-50,-120], K) 
s isotoo 1 (G, 1) 
(2*3® continues) 

11.4 
Lead Compensation 
{TryIt Continued) 
When the SISO Design for SISO Design Task Window appears: 
1. Right-click on the Bode plot area and select Grid. 
2. Note the phase margin shown in the MATLAB Command Window. 
3. Using the Bode phase plot, estimate the frequency at which the phase margin from Step 2 occurs. 
4. On the SISO Design for SISO Design Task Window toolbar, click on the red zero. 
5. Place the zero of the compensator by clicking on the gain plot at a frequency that is 1/10 that 
found in Step 3. 
6. On the SISO Design for SISO Design Task Window toolbar, click on the red pole. 
7. Place the pole of the compensator by clicking on the gain plot to the left of the compensator zero. 
8. Grab the pole with the mouse and move it until the phase plot shows a P.M. equal to that found in 
Step 2. 
9. Right-click in the Bode plot area and select Edit Compensator... 
10. Read the lag compensator in the Control and Estimation Tools Manager Window. 
In this section, we showed how to design a lag compensator to improve the steady-
state error while keeping the transient response relatively unaffected. We next 
discuss how to improve the transient response using frequency response methods. 
£ 11.4 Lead Compensation 
For second-order systems, we derived the relationship between phase margin and 
percent overshoot as well as the relationship between closed-loop bandwidth and 
other time-domain specifications, such as settling time, peak time, and rise time. 
When we designed the lag network to improve the steady-state error, we wanted a 
minimal effect on the phase diagram in order to yield an imperceptible change in the 
transient response. However, in designing lead compensators via Bode plots, we 
want to change the phase diagram, increasing the phase margin to reduce the percent 
overshoot, and increasing the gain crossover to realize a faster transient response. 
Visualizing Lead Compensation 
The lead compensator increases the bandwidth by increasing the gain crossover 
frequency. At the same time, the phase diagram is raised at higher frequencies. The 
result is a larger phase margin and a higher phase-marginfrequency. In the time domain, 
lowerpercent overshoots (larger phase margins) with smaller peak times (higher phase-
margin frequencies) are the results. The concepts are shown in Figure 11.7. 
The uncompensated system has a small phase margin (B) and a low phase-
margin frequency (A). Using a phase lead compensator, the phase angle plot 
(compensated system) is raised for higher frequencies.3 At the same time, the gain 
crossover frequency in the magnitude plot is increased from A rad/s to C rad/s. These 
effects yield a larger phase margin (D), a higher phase-margin frequency (C), and a 
larger bandwidth. 
One advantage of the frequency response technique over the root locus is that 
we can implement a steady-state error requirement and then design a transient 
response. This specification of transient response with the constraint of a steady-
state error is easier to implement with the frequency response technique than with 
the root locus. Notice that the initial slope, which determines the steady-state error, 
is not affected by the design for the transient response. 
The name lead compensator comes from the fact that the typical phase angle response shown in Figure 
11.7 is always positive, or leading in phase angle. 

636 
Chapter 11 
Design via Frequency Response 
MfdB) 
Phase (degrees) 
0 
Compensator 
Compensated 
C 
system 
*- logo 
Uncompensated 
system 
Compensator 
Compensated 
system 
Uncompensated 
system 
-270 
FIGURE 11.7 Visualizing lead compensation 
Lead Compensator Frequency Response 
Let us first look at the frequency response characteristics of a lead network and 
derive some valuable relationships that will help us in the design process. Figure 11.8 
shows plots of the lead network 
(11.6) 
for various values of fi, where fi < 1. Notice that the peaks of the phase curve vary in 
maximum angle and in the frequency at which the maximum occurs. The dc gain of the 
compensator is set to unity with the coefficient 1/fi, in order not to change the dc gain 
designed for the static error constant when the compensator is inserted into the system. 
In order to design a lead compensator and change both the phase margin and 
phase-margin frequency, it is helpful to have an analytical expression for the 
maximum value of phase and the frequency at which the maximum value of phase 
occurs, as shown in Figure 11.8. 
From Eq. (11.6) the phase angle of the lead compensator, <$>c 
<pc = tarT^coT — tan-1 cofiT 
Differentiating with respect to co, we obtain 
d$c= 
T 
0T 
dco 
IS 
l + (a>Ty l + (copTy 
(11.7) 
(11.8) 
Setting Eq. (11.8) equal to zero, we find that the frequency, a>max, at which the 
maximum phase angle, 0max, occurs is 
(Drnax — TVP 
(11.9) 

11.4 Lead Compensation 
637 
20 
18 
16 
14 
5 12 
j? 10 
6 
4 
2 
0 
/ > . 
,^y 
**€H 
-^*ffr 
i i i ! 
^ ^ -
p - C i 
.„**• 
^ 
/3=0.2 
"/3=0.3" 
/3=0.4 
• " " £ = 0.5 
0.1 
10 
100 
60 
50 
40 
30 
20 
10 
0 ^½ 
d*j 
^=1 
^ 
L<* 1 
/ 
.,^ 
a£ 
/3=0 
/
" 
\
^
-
A 
) 
Jj= 
t'**iz?A 
"*~ 
P=05^ 
3= 
).3 
).2 
^, 
\
N 
S v 
pp::: 
0.1 
1 
10 
100 
COT 
FIGURE 11.8 Frequencyresponseofaleadcompensator,G c(j) = [l/0][(s + 1 / T ) / ( J + 1//S7*)] 
Substituting E q . (11.9) into E q . (11.6) with s — jcomax, 
£; y<^max 
(11.10) 
Making use of tan(0! — <p2) — (tan^ -tan0 2)/(l + tan^1tan02)> the maximum 
phase shift of the compensator, 0max, is 
, 1 - j S 
. 
- 1 1 - ) 3 
4™ = tan V? = sm TT^ 
(11.11) 
and the compensator's magnitude at comax is 
\Gc(jcomax)\ = - = 
(11.12) 
We are now ready to enumerate a design procedure. 
Design Procedure 
1. Find the closed-loop bandwidth required to meet the settling time, peak time, 
or rise time requirement (see Eqs. (10.54) through (10.56)). 
2. Since the lead compensator has negligible effect at low frequencies, set the 
gain, K, of the uncompensated system to the value that satisfies the steady-
state error requirement. 

638 
Chapter 11 
Design via Frequency Response 
3. Plot the Bode magnitude and phase diagrams for this value of gain and 
determine the uncompensated system's phase margin. 
4. Find the phase margin to meet the damping ratio or percent overshoot require-
ment. Then evaluate the additional phase contribution required from the 
compensator.4 
5. Determine the value of p (see Eqs. (11.6) and (11.11)) from the lead compen-
sator's required phase contribution. 
6. Determine the compensator's magnitude at the peak of the phase curve 
(Eq. (11.12)). 
7. Determine the new phase-margin frequency by finding where the un-
compensated system's magnitude curve is the negative of the lead compensa-
tor's magnitude at the peak of the compensator's phase curve. 
8. Design the lead compensator's break frequencies, using Eqs. (11.6) and (11.9) 
to find Tand the break frequencies. 
9. Reset the system gain to compensate for the lead compensator's gain. 
10. Check the bandwidth to be sure the speed requirement in Step 1 has been met. 
11. Simulate to be sure all requirements are met. 
12. Redesign if necessary to meet requirements. 
From these steps, we see that we are increasing both the amount of phase 
margin (improving percent overshoot) and the gain crossover frequency (increasing 
the speed). Now that we have enumerated a procedure with which we can design a 
lead compensator to improve the transient response, let us demonstrate. 
Lead Compensation Design 
PROBLEM: Given the system of Figure 11.2, design a lead compensator to yield a 
20% overshoot and Kv = 40, with a peak time of 0.1 second. 
SOLUTION: The uncompensated system is G(s) = 100K/[s(s + 36) (.s + 100)]. We 
will follow the outlined procedure. 
1. We first look at the closed-loop bandwidth needed to meet the speed 
requirement imposed by Tp = 0.1 second. From Eq. (10.56), with Tp = 0.1 
second and £ = 0.456 (i.e., 20% overshoot), a closed-loop bandwidth of 46.6 
rad/s is required. 
2. In order to meet the specification of Kv = 40, K must be set at 1440, yielding 
G(s) = 144,000/ [s(s + 36)(s + 100)]. 
3. The uncompensated system's frequency response plots for K = 1440 are 
shown in Figure 11.9. 
4. A 20% overshoot implies a phase margin of 48.1°. The uncompensated 
system with K = 1440 has a phase margin of 34° at a phase-margin frequency 
4 We know that the phase-margin frequency will be increased after the insertion of the compensator. At 
this new phase-margin frequency, the system's phase will be smaller than originally estimated, as seen by 
comparing points B and D in Figure 11.7. Hence, an additional phase should be added to that provided by 
the lead compensator to correct for the phase reduction caused by the original system. 

11.4 Lead Compensation 
639 
36 
24 
12 
-12 
-24 
-36 
45 
0 
-45 
-90 
-135 
-180 
-225 
-270 
I ncom 
V 
pen 
sten 
^ 
satt 
s 
d 
s N 
X 
Compensated system 
v\ 
\ 
\ 
1 
10 
Frequency (rad/sec) 
100 
1000 
Uncompen sated 
system 
Lead compensator 
Compensated 
*sw^ sy! tern 
1 
10 
100 
Frequency (rad/sec) 
FIGURE 11.9 
Bode plots for lead compensation in Example 11.3 
1000 
of 29.6. To increase the phase margin, we insert a lead network that adds enough 
phase to yield a 48.1° phase margin. Since we know that the lead network will 
also increase the phase-margin frequency, we add a correction factor to 
compensate for the lower uncompensated system's phase angle at this higher 
phase-margin frequency. Since we do not know the higher phase-margin 
frequency, we assume a correction factor of 10°. Thus, the total phase contri-
bution required from the compensator is 48.1° — 34° + 10° = 24.1°. In sum-
mary, our compensated system should have a phase margin of 48.1° with a 
bandwidth of 46.6 rad/s. If the system's characteristics are not acceptable after 
the design, then a redesign with a different correction factor may be necessary. 
5. Using Eq. (11.11), p = 0.42 for 0max = 24.1°. 
6. From Eq. (11.12), the lead compensator's magnitude is 3.76 dB at comax. 
7. If we select comax to be the new phase-margin frequency, the uncompensated 
system's magnitude at this frequency must be —3.76 dB to yield a 0 dB 
crossover at comax for the compensated system. The uncompensated system 
passes through —3.76 dB at comiiX = 39 rad/s. This frequency is thus the new 
phase-margin frequency. 
8. We now find the lead compensator's break frequencies. From Eq. (11.9), 
1/T = 25.3 and 1/0T = 60.2. 
9. Hence, the compensator is given by 
1 
1 
S+T = 2.38 5 + 25.3 
s + 60.2 
(11.13) 

640 
Chapter 11 
Design via Frequency Response 
MATLAB 
where 2.38 is the gain required to keep the dc gain of the compensator at unity 
so that Kv = 40 after the compensator is inserted. 
The final, compensated open-loop transfer function is then 
Gc(s)G(s) = 
342,600(^ + 25.3) 
4 ? + 36)(5 +100)(s+ 60.2) 
(11.14) 
10. From Figure 11.9, the lead-compensated open-loop magnitude response is 
- 7 dB at approximately 68.8 rad/s. Thus, we estimate the closed-loop 
bandwidth to be 68.8 rad/s. Since this bandwidth exceeds the requirement 
of 46.6 rad/s, we assume the peak time specification is met. This conclusion 
about the peak time is based upon a second-order and asymptotic approxi-
mation that will be checked via simulation. 
11. Figure 11.9 summarizes the design and shows the effect of the compensation. 
Final results, obtained from a simulation and the actual (nonasymptotic) 
frequency response, are shown in Table 11.3. Notice the increase in phase 
margin, phase-margin frequency, and closed-loop bandwidth after the lead 
compensator was added to the gain-adjusted system. The peak time and the 
steady-state error requirements have been met, although the phase margin is 
less than that proposed and the percent overshoot is 2.6% larger than proposed. 
Finally, if the performance is not acceptable, a redesign is necessary. 
TABLE 11.3 Characteristic of the lead-compensated system of Example 11.3 
Parameter 
Kv 
Phase margin 
Phase-margin frequency 
Closed-loop bandwidth 
Percent overshoot 
Peak time 
Proposed 
specification 
40 
48.1° 
— 
46.6 rad/s 
20 
0.1 second 
Actual gain-
compensated 
value 
40 
3+ 
29.6 rad/s 
50 rad/s 
37 
0.1 second 
Actual lead* 
compensated 
value 
40 
45.5° 
39 rad/s 
68.8 rad/s 
22.6 
0.075 second 
Students who are using MATLAB should now run chllp3 in Appendix B. 
You will learn how to use MATLAB to design a lead compensator . You 
will enter the desired percent overshoot, peak time, and Kv. 
MATLAB then designs a lead compensator using Bode plots, eval-
uates Kv, and generates a closed-loop step response. This exer-
cise solves Example 11.3 using MATLAB. 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 11.3 
PROBLEM: Design a lead compensator for the system in Skill-Assessment Exer-
cise 11.1 to meet the following specifications: %OS = 20%, Ts — 0.2 s and 
Kv = 50. 

11.5 Lag-Lead Compensa tion 
641 
ANSWER: 
Q
^ , 2-27(^ + 33.2). 
30^000 
uimtW 
(5 + 75.4) ' 
{) 
s(s + 50)(s + l20) 
The complete solution is at www.wiley.com/college/nise. 
( 
Ttylt 11.3 
Use MATLAB, the Control System Toolbox, and the following statements to solve Skill-Assessment Exercise 11.3. 
pos=20 
Ts=0.2 
z=(-log(pos/100))/(sqrt (pi"2+log (pos/100) A2)) 
Pm=atan(2*z/(sqrt(-2*zA2+sqrt(l+4*zA4))))*(180/pi) 
Wbw=(4/(Ts*z))*sqrt((l-2*zA2)+sqrt(4*zA4-4*zA2+2)) 
K=50*50*120 
G=zpk([], [0,-50,-120],K) 
sisotool(G,1) 
When the SISO Design for SISO Design Task Window appears: 
1. Right-click on the Bode plot area and select Grid. 
2. Note the phase margin and bandwidth shown in the MATLAB Command Window. 
3. On the SISO Design for SISO Design Task Window toolbar, click on the red pole. 
4. Place the pole of the compensator by clicking on the gain plot at a frequency that is to the right of the desired bandwidth found in Step 2. 
5. On the SISO Design for SISO Design Task Window toolbar, click on the red zero. 
6. Place the zero of the compensator by clicking on the gain plot to the left of the desired bandwidth. 
7. Reshape the Bode plots: alternately grab the pole and the zero with the mouse and alternately move them along the phase plot until the 
phase plot show a P.M. equal to that found in Step 2 and a phase-margin frequency close to the bandwidth found in Step 2. 
8. Right-click in the Bode plot area and select Edit Compensator . . . 
9. Read the lead compensator in the Control and Estimation Tools Manager Window. 
Keep in mind that the previous examples were designs for third-order systems 
and must be simulated to ensure the desired transient results. In the next section, we 
look at lag-lead compensation to improve steady-state error and transient response. 
^ 11.5 Lag-Lead Compensation 
In Section 9.4, using root locus, we designed lag-lead compensation to improve the 
transient response and steady-state error. Figure 11.10 is an example of a system to 
which lag-lead compensation can be applied. In this section we repeat the design, 
using frequency response techniques. One method is to design the lag compensation 
to lower the high-frequency gain, stabilize the system, and improve the steady-state 
error and then design a lead compensator to meet the phase-margin requirements. 
Let us look at another method. 
Section 9.6 describes a passive lag-lead network that can be used in place of 
separate lag and lead networks. It may be more economical to use a single, passive 
network that performs both tasks, since the buffer amplifier that separates the lag 
network from the lead network may be eliminated. In this section, we emphasize lag-
lead design, using a single, passive lag-lead network. 
The transfer function of a single, passive lag-lead network is 
Gc(s) = GissSd(s)GLsig(s) = 
( 
1 \ 
S+Tl 
1 
(11.15) 

642 
Chapter 11 
Design via Frequency Response 
(a) 
(*) 
FIGURE 11.10 
a. The National Advanced Driving Simulator at the University of Iowa; b. test driving the simulator with its 
realistic graphics (Katharina Bosse/laif/Redux Pictures.) 
where y > 1. The first term in parentheses produces the lead compensation, and the 
second term in parentheses produces the lag compensation. The constraint that we 
must follow here is that the single value y replaces the quantity a for the lag network 
in Eq. (11.2) and the quantity ft for the lead network in Eq. (11.6). For our design, a 
and f3 must be reciprocals of each other. An example of the frequency response of 
the passive lag-lead is shown in Figure 11.11. 
We are now ready to enumerate a design procedure. 
o 
- 5 
-10 
* - M 
-25 
- 3 0 
-35 
X: 
•
\ 
:• \ / = 1 
>:;^S 
NN3Q 
\40X 
5 U V 
0 v 
X* 
<N "
•
•
^ 
•
"
•
^ 
11 
Asy 
III! 
J 
mpiotes tor 
y=10 
-v> 
= 2 
: : ^ 
< 
y, 
/ 
* 
> * 
$ 
'/ 
/
^ 
,.¾ 
/ 
0.001 
0.01 
0.1 
1 
Frequency (rad/s) 
10 
100 
0.001 
0.01 
0.1 
1 
Frequency (rad/s) 
FIGURE 11.11 Sample frequency response curves for a lag-lead compensator, Gc{s) = [(s + l)(s + 0.1)]/ Gr+y)(*+^i 

11.5 Lag-Lead Compensation 
643 
Design Procedure 
1. Using a second-order approximation, find the closed-loop bandwidth required 
to meet the settling time, peak time, or rise time requirement (see Eqs. (10.55) 
and (10.56)). 
2. Set the gain, K, to the value required by the steady-state error specification. 
3. Plot the Bode magnitude and phase diagrams for this value of gain. 
4. Using a second-order approximation, calculate the phase margin to meet the 
damping ratio or percent overshoot requirement, using Eq. (10.73). 
5. Select a new phase-margin frequency near <WBW-
6. At the new phase-margin frequency, determine the additional amount of phase 
lead required to meet the phase-margin requirement. Add a small contribution 
that will be required after the addition of the lag compensator. 
7. Design the lag compensator by selecting the higher break frequency one 
decade below the new phase-margin frequency. The design of the lag compen-
sator is not critical, and any design for the proper phase margin will be 
relegated to the lead compensator. The lag compensator simply provides 
stabilization of the system with the gain required for the steady-state error 
specification. Find the value of y from the lead compensator's requirements. 
Using the phase required from the lead compensator, the phase response curve 
of Figure 11.8 can be used to find the value of y = 1//3. This value, along with 
the previously found lag's upper break frequency, allows us to find the lag's 
lower break frequency. 
8. Design the lead compensator. Using the value of y from the lag compensator 
design and the value assumed for the new phase-margin frequency, find the 
lower and upper break frequency for the lead compensator, using Eq. (11.9) 
and solving for T. 
9. Check the bandwidth to be sure the speed requirement in Step 1 has been met. 
10. Redesign if phase-margin or transient specifications are not met, as shown by 
analysis or simulation. 
Let us demonstrate the procedure with an example. 
Lag-Lead Compensation Design 
PROBLEM: Given a unity feedback system where G(s) = K/[s(s+ l)(s+ 4)], 
design a passive lag-lead compensator using Bode diagrams to yield a 13.25% 
overshoot, a peak time of 2 seconds, and Kv = 12. 
SOLUTION: We will follow the steps previously mentioned in this section for lag-
lead design. 
1. The bandwidth required for a 2-seconds peak time is 2.29 rad/s. 
2. In order to meet the steady-state error requirement, Kv = 12, the value of K is 48. 
3. The Bode plots for the uncompensated system with K — 48 are shown in Figure 
11.12. We can see that the system is unstable. 
4. The required phase margin to yield a 13.25% overshoot is 55°. 

Chapter 11 
Design via Frequency Response 
72 
60 
48 
36 
24 
12 
0 
-12 
-24 
-36 
-48 
-60 
compensator 
i 
i 
f Uncompensated 
system 
1 system 
•v Lag-lead-compensated 
system 
.01 
0.1 
1 
Frequency (rad/s) 
10 
100 
00 
100 
50 
0 
-50 
-100 
I -150 
£ 
-200 
-250 
-300 
0.01 
0.1 
1 
10 
Frequency (rad/s) 
FIGURE 11.12 Bode plots for lag-lead compensation in Example 11.4 
Uncort ipensj 
III 
I
I
I 
Lag-lead compensato 
tted system 
I L = = 
Lag-compensated 
system 
- Lag-1 ^ad-compe 
system 
nsat ed 
100 
5. Let us select co = 1.8 rad/s as the new phase-margin frequency. 
6. At this frequency, the uncompensated phase is -176° and would require, if we 
add a -5° contribution from the lag compensator, a 56° contribution from the 
lead portion of the compensator. 
7. The design of the lag compensator is next. The lag compensator allows us 
to keep the gain of 48 required for Kv = 12 and not have to lower the gain 
to stabilize the system. As long as the lag compensator stabilizes the system, 
the design parameters are not critical since the phase margin will be designed 
with the lead compensator. Thus, choose the lag compensator so that its 
phase response will have minimal effect at the new phase-margin frequency. 
Let us choose the lag compensator's higher break frequency to be 1 decade 
below the new phase-margin frequency, at 0.18 rad/s. Since we need to add 56° 
of phase shift with the lead compensator at co = 1.8 rad/s, we estimate 
from Figure 11.8 that, if y- 10.6 (since y = 1/0, 0 = 0.094), we can obtain 
about 56° of phase shift from the lead compensator. Thus with y = 10.6 and a 
new phase-margin frequency of co = 1.8 rad/s, the transfer function of the lag 
compensator is 
Glag(s) = 
" 
YTI) 
1 
{s + 0.183) 
10.6 (5 + 0.0172) 
(11.16) 

11.5 Lag-Lead Compensation 
645 
where the gain term, 1/y, keeps the dc gain of the lag compensator at 0 dB. The 
lag-compensated system's open-loop transfer function is 
4.53(. + 0.183) 
Ulag-comp[S)~s(s 
+ l)(s + 4)(s +0.0112) 
[Li-U) 
8. Now we design the lead compensator. At w = 1.8, the lag-compensated system 
has a phase angle of 180°. Using the values of o)max = 1.8 and ft = 0.094, Eq. 
(11.9) yields the lower break, 1/T\ = 0.56 rad/s. The higher break is then 
1/fiTi = 5.96rad/s. The lead compensator is 
2% 
The lag-lead-compensated system's open-loop transfer function is 
C 
M 
48(. + 0.183)(. + 0.56) 
^lag-lead-comp[5) - ^ 
+ ^ 
+ ^ 
+ Q # ( ) 1 7 2 ) ( J + g %
) 
^
-
^ 
9. Now check the bandwidth. The closed-loop bandwidth is equal to that frequency 
where the open-loop magnitude response is approximately —7 dB. From Figure 
11.12, the magnitude is —7 dB at approximately 3 rad/s. This bandwidth exceeds 
that required to meet the peak time requirement. 
The design is now checked with a simulation to obtain actual performance 
values. Table 11.4 summarizes the system's characteristics. The peak time 
requirement is also met. Again, if the requirements were not met, a redesign 
would be necessary. 
TABLE 11.4 Characteristics of gain-compensated system of Example 11.4 
Parameter 
Proposed specification 
Actual value 
Kv 
12 
12 
Phase margin 
55° 
59.3° 
Phase-margin frequency 
— 
1.63 rad/s 
Closed-loop bandwidth 
2.29 rad/s 
3 rad/s 
Percent overshoot 
13.25 
10.2 
Peak time 
2.0 seconds 
1.61 seconds 
Students who are usingMATLAB should now run chllp4 in Appendix B. 
You will learn how to useMATLAB to design a lag-lead compensator. 
You will enter the desired percent overshoot, peak time, and Kv. 
MATLAB then designs a lag-lead compensator using Bode plots, 
evaluates Kvr and generates a closed-loop step response. This 
exercise solves Example 11.4 usingMATLAB. 
MATLAB 
For a final example, we include the design of a lag-lead compensator using a 
Nichols chart. Recall from Chapter 10 that the Nichols chart contains a presentation of 
both the open-loop frequency response and the closed-loop frequency response. The 
axes of the Nichols chart are the open-loop magnitude and phase (y and x axis, 
respectively). The open-loop frequency response is plotted using the coordinates 
of the Nichols chart at each frequency. The open-loop plot is overlaying a grid that 
yields the closed-loop magnitude and phase. Thus, we have a presentation of both the 

646 
Chapter 11 
Design via Frequency Response 
open- and closed-loop responses. Thus, a design can be implemented that reshapes the 
Nichols plot to meet both open- and closed-loop frequency specifications. 
From a Nichols chart, we can see simultaneously the following frequency res-
ponse specifications that are used to design a desired time response: (1) phase margin, 
(2) gain margin, (3) closed-loop bandwidth, and (4) closed-loop peak amplitude. 
In the following example, we first specify the following: (1) maximum allowable 
percent overshoot, (2) maximum allowable peak time, and (3) minimum allowable 
static error constant. We first design the lead compensator to meet the transient 
requirements followed by the lag compensator design to meet the steady-state error 
requirement. Although calculations could be made by hand, we will use MATLAB 
and SISOTOOL to make and shape the Nichols plot. 
Let us first outline the steps that we will take in the example: 
1. Calculate the damping ratio from the percent overshoot requirement using 
Eq. (4.39) 
2. Calculate the peak amplitude, Mp, of the closed-loop response using 
Eq. (10.52) and the damping ratio found in (1). 
3. Calculate the minimum closed-loop bandwidth to meet the peak time require-
ment using Eq. (10.56), with peak time and the damping ratio from (1). 
4. Plot the open-loop response on the Nichols chart. 
5. Raise the open-loop gain until the open-loop plot is tangent to the required 
closed-loop magnitude curve, yielding the proper Mp. 
6. Place the lead zero at this point of tangency and the lead pole at a higher 
frequency. Zeros and poles are added in SISOTOOL by clicking either one on 
the tool bar and then clicking the position on the open-loop frequency response 
curve where you desire to add the zero or pole. 
7. Adjust the positions of the lead zero and pole until the open-loop frequency 
response plot is tangent to the same Mp curve, but at the approximate 
frequency found in (3). This yields the proper closed-loop peak and proper 
bandwidth to yield the desired percent overshoot and peak time, respectively. 
8. Evaluate the open-loop transfer function, which is the product of the plant and 
the lead compensator, and determine the static error constant. 
9. If the static error constant is lower than required, a lag compensator must now 
be designed. Determine how much improvement in the static error constant is 
required. 
10. Recalling that the lag pole is at a frequency below that of the lag zero, place a lag 
pole and zero at frequencies below the lead compensator and adjust to yield the 
desired improvement in static error constant. As an example, recall from Eq. (9.5) 
thattheimprovementinstaticerrorconstantforaTypelsystemisequaltotheratio 
of the lag zero value divided by the lag pole value. Readjust the gain if necessary. 
Example 11.5 
Lag-Lead Design Using the Nichols Chart, MATLAB, and SISOTOOL 
PROBLEM: Design a lag-lead compensator for the plant, G(s) — —, 
jr-, 
77^, 
& 
5(5 + 5)(5 + 10) 
Kmrm 
to meet the following requirements: (1) a maximum of 20% overshoot, (2) a peak 
time of no more than 0.5 seconds, (3) a static error constant of no less than 6. 
MATLAB 

11.5 Lag-Lead Compensation 
647 
SISO Design for SISO Design Task 
Efc 
£ * 
Yjew 
Designs 
analysis 
loob 
Window 
Help 
X 
O J<. SL ^ \m% ® I up 
Open-Loop Nichols Editor tor Open Loop 1 (OL1) 
-270 
EdSed Gain 
G.M.: 14 d8 @ 7.07 rad/sec 
P.M.: 48.2 deg e 2.58 rad/sec 
Stable loop 
-180 
Open-toop Phase (deg) 
FIGURE 11.13 Nichols chart 
after gain adjustment 
SOLUTION: We follow the steps enumerated immediately above, 
1. Using Eq. (4.39), f = 0.456 for 20% overshoot. 
2. Using Eq. (10.52), Mp = 1.23 = 1.81 dB for f = 0.456. 
3. Using Eq. (10.56), wBw = 9.3 r/s for £ = 0.456 and Tp = 0.5. 
4. Plot the open-loop frequency response curve on the Nichols chart for K = 1. 
5. Raise the open-loop frequency response curve until it is tangent to the closed-
loop peak of 1.81 dB curve as shown in Figure 11.13. The frequency at the 
tangent point is approximately 3 r/s, which can be found by letting your mouse 
rest on the point of tangency. On the menu bar, select Designs/Edit Com-
pensator . . . and find the gain added to the plant. Thus, the plant is now 
G(s) = —; 
-TT-. -rrr. The gain-adjusted closed-loop step response is 
shown in Figure 11.14. Notice that the peak time is about 1 second and 
must be decreased. 
6. Place the lead zero at this point of tangency and the lead pole at a higher 
frequency. 
7. Adjust the positions of the lead zero and pole until the open-loop frequency 
response plot is tangent to the same Mp curve, but at the approximate 
frequency found in 3. 
8. Checking Designs/Edit Compensator . . . shows 
1286(^ + 1.4) 
G(s)Giead(s) = 5(5 + 5)(5 + 10)(5 + 12) , which yields a Kv = 3. 

648 
Chapter 11 
Design via Frequency Response 
i Design Task 
na\% 
LTI Viewer 
FIGURE 11.14 Gain-adjusted closed-loop step response 
SISO Desitm for SISO Design Task 
Efe 
gift 
»CW Besigns Analysis Ioob Wnkm 
Help 
1¾ X O £ £ -¾ 
tf 
Open-loop WichoB Editor for Open Loop 1 {0L1) 
FIGURE 11.15 Nichols chart after lag-lead compensation 

11.5 Lag-Lead Compensation 
649 
LTI Viewer for SISO Design Task 
Bte E * 
iSWow 
Help 
D a l ^ ^ i s 
\2 
- 
0.8 
1 
0.6 
0.4 
02 
• 
J 
0 
1 
2 
LTI Viewer 
*mmmmam» I 
Step Response 
3 
4 
Time (sec) 
o 
is! S3 
-j 
5 
6 
0Rear-r»ne Update 
FIGURE 11.16 Lag-lead compensated closed-loop step response 
9. We now add lag compensation to improve the static error constant by at least 2. 
10. Now add a lag pole at -0.004 and a lag zero at -0.008. Readjust the gain to 
yield the same tangency as after the insertion of the lead. The final forward 
*u* t 
A* 
fc-r*^ 
<\r 
i\ 
1381(5 + 1.4)(5 + 0.008) 
path „ found to be G(.)GIead(,)Glag(,) = s{s+ 5){s+ 
m
s 
+ 12){s+ 
om4y 
The final Nichols chart is shown in Figure 11.15 and the compensated time 
response is shown in Figure 11.16. Notice that the time response has the 
expected slow climb to the final value that is typical of lag compensation. If 
your design requirements require a faster climb to the final response, then 
redesign the system with a larger bandwidth or attempt a design only with 
lead compensation. A problem at the end of the chapter provides the 
opportunity for practice. 
Skill-Assessment Exercise 11.4 
PROBLEM: Design a lag-lead compensator for a unity feedback system with the 
forward-path transfer function 
G(s) = 
K 
s{s + 8){s + 30) 
to meet the following specifications: %OS = 10%, Tp = 0.6 s, and Kv = 10. Use 
frequency response techniques. 

650 
Chapter 11 
Design via Frequency Response 
ANSWER: G^S) = 0 . 4 5 6 g ± » G^(s) 
= M s j g g , K = 2400. 
The complete solution is at www.wiley.com/college/nise. 
Case Studies 
Our ongoing antenna azimuth position control system serves now as an 
example to summarize the major objectives of the chapter. The following cases 
demonstrate the use of frequency response methods to (1) design a value of gain 
to meet a percent overshoot requirement for the closed-loop step response 
and (2) design cascade compensation to meet both transient and steady-state 
error requirements. 
Antenna Control: Gain Design 
PROBLEM: Given the antenna azimuth position control system shown on the front 
endpapers, Configuration 1, use frequency response techniques to do the following: 
a. Find the preamplifier gain required for a closed-loop response of 20% over-
shoot for a step input. 
b. Estimate the settling time. 
SOLUTION: The block diagram for the control system is shown on the inside front 
cover (Configuration 1). The loop gain, after block diagram reduction, is 
G(s) = 
6.63K 
0.0388K 
5(5+1.71)(5 + 100) 
JJ^+{\1 
100 + 1 
(11.20) 
Letting K = 1, the magnitude and phase frequency response plots are shown in 
Figure 10.61. 
a. To find K to yield a 20% overshoot, we first make a second-order approximation 
and assume that the second-order transient response equations relating percent 
overshoot, damping ratio, and phase margin are true for this system. Thus, a 
20% overshoot implies a damping ratio of 0.456. Using Eq. (10.73), this 
damping ratio implies a phase margin of 48.1°. The phase angle should therefore 
be (-180° + 48.1°) = -131.9°. The phase angle is -131.9° at m = 1.49rad/s, 
where the gain is -34.1 dB. Thus K = 34.1 dB = 50.7 for a 20% overshoot. Since 
the system is third-order, the second-order approximation should be checked. A 
computer simulation shows a 20% overshoot for the step response. 
b. Adjusting the magnitude plot of Figure 10.61 for K = 50.7, we find —7 dB at 
co = 2.5 rad/s, which yields a closed-loop bandwidth of 2.5 rad/s. Using 
Eq. (10.55) with £ = 0.456 and wBw = 2.5, we find Ts = 4.63 seconds. A compu-
ter simulation shows a settling time of approximately 5 seconds. 

Case Studies 
CHALLENGE: We now give you a problem to test your knowledge of this chapter's 
objectives. You are given the antenna azimuth position control system shown on 
the inside front cover (Configuration 3). Using frequency response methods do the 
following: 
a. Find the value of K to yield 25% overshoot for a step input. 
b. Repeat Part a using MATLAB. 
Antenna Control: Cascade Compensation Design 
PROBLEM: Given the antenna azimuth position control system block diagram 
shown on the front endpapers, Configuration 1, use frequency response techniques 
and design cascade compensation for a closed-loop response of 20% overshoot for 
a step input, a fivefold improvement in steady-state error over the gain-compen-
sated system operating at 20% overshoot, and a settling time of 3.5 seconds. 
SOLUTION: Following the lag-lead design procedure, we first determine the value 
of gain, K, required to meet the steady-state error requirement. 
1. Using Eq. (10.55) with £ = 0.456, and Ts = 3.5 seconds, the required bandwidth 
is 3.3 rad/s. 
2. From the preceding case study, the gain-compensated system's open-loop 
transfer function was, for K = 50.7, 
rf\m\- 
663K 
- 
3 3 6 1 4 
G{s)H{s) - ^ 
+ i
n ^ 
+ 10Q) - s{s - ln){s 
- 10[)) 
(11.21) 
This function yields Kv = 1.97. If K = 254, then Kv = 9.85, a fivefold 
improvement. 
3. The frequency response curves of Figure 10.61, which are plotted for K = X, will 
be used for the solution. 
4. Using a second-order approximation, a 20% overshoot requires a phase margin 
of 48.1°. 
5. Select co = 3 rad/s to be the new phase-margin frequency. 
6. The phase angle at the selected phase-margin frequency is -152°. This is a phase 
margin of 28°. Allowing for a 5° contribution from the lag compensator, the lead 
compensator must contribute (48.1° - 28° + 5°) = 25.1°. 
7. The design of the lag compensator now follows. Choose the lag compensator upper 
break one decade below the new phase-margin frequency, or 0.3 rad/s. Figure 11.8 
says that we can obtain 25.1° phase shift from the lead if p = 0.4 or y = 1/fi = 2.5. 
Thus, the lower break for the lag is at 1/()/7/) = 0.3/2.5 = 0.12 rad/s. 
Hence, 
8. Finally, design the lead compensator. Using Eq. (11.9), we have 
7/ = — ? _ = —^= = 0.527 
(11.23) 
wmaxv^ 
3N/04 
Therefore the lead compensator lower break frequency is 1/7/ = 1.9 
rad/s, and the upper break frequency is 1/(/37/) = 4.75 rad/s. Thus, the 

652 
Chapter 11 
Design via Frequency Response 
MATLAB 
lag-lead-compensated forward path is 
r 
M - 
(6.63)(254)(. + 0.3)(5 + 1.9) 
triag-lead-compW - ^ 
+ 1.71)(, + 100)(, + 0.12)(. + 4.75) 
^
^ 
9. A plot of the open-loop frequency response for the lag-lead-compensated 
system shows —7 dB at 5.3 rad/s. Thus, the bandwidth meets the design 
requirements for settling time. A simulation of the compensated system shows 
a 20% overshoot and a settling time of approximately 3.2 seconds, compared to 
a 20% overshoot for the uncompensated system and a settling time of approxi-
mately 5 seconds. Kv for the compensated system is 9.85 compared to the 
uncompensated system value of 1.97. 
CHALLENGE: We now give you a problem to test your knowledge of this chapter's 
objectives. You are given the antenna azimuth position control system shown on 
the front endpapers (Configuration 3). Using frequency response methods, do the 
following: 
a. Design a lag-lead compensator to yield a 15% overshoot and Kv = 20. In order 
to speed up the system, the compensated system's phase-margin frequency will 
be set to 4.6 times the phase-margin frequency of the uncompensated system. 
b. Repeat Part a using MATLAB. 
^ Summary J | 
This chapter covered the design of feedback control systems using frequency 
response techniques. We learned how to design by gain adjustment as well as 
cascaded lag, lead, and lag-lead compensation. Time response characteristics 
were related to the phase margin, phase-margin frequency, and bandwidth. 
Design by gain adjustment consisted of adjusting the gain to meet a phase-
margin specification. We located the phase-margin frequency and adjusted the gain 
to 0 dB. 
A lag compensator is basically a low-pass filter. The low-frequency gain can be 
raised to improve the steady-state error, and the high-frequency gain is reduced to 
yield stability. Lag compensation consists of setting the gain to meet the steady-state 
error requirement and then reducing the high-frequency gain to create stability and 
meet the phase-margin requirement for the transient response. 
A lead compensator is basically a high-pass filter. The lead compensator increases 
the high-frequency gain while keeping the low-frequency gain the same. Thus, the 
steady-state error can be designed first. At the same time, the lead compensator 
increases the phase angle at high frequencies. The effect is to produce a faster, stable 
system since the uncompensated phase margin now occurs at a higher frequency. 
A lag-lead compensator combines the advantages of both the lag and the lead 
compensator. First, the lag compensator is designed to yield the proper steady-state 
error with improved stability. Next, the lead compensator is designed to speed up the 
transient response. If a single network is used as the lag-lead, additional design 

Problems 
considerations are applied so that the ratio of the lag zero to the lag pole is the same 
as the ratio of the lead pole to the lead zero. 
In the next chapter, we return to state space and develop methods to design 
desired transient and steady-state error characteristics. 
£ Review Questions ^ 
1. What major advantage does compensator design by frequency response have 
over root locus design? 
2. How is gain adjustment related to the transient response on the Bode diagrams? 
3. Briefly explain how a lag network allows the low-frequency gain to be increased 
to improve steady-state error without having the system become unstable. 
4. From the Bode plot perspective, briefly explain how the lag network does not 
appreciably affect the speed of the transient response. 
5. Why is the phase margin increased above that desired when designing a lag 
compensator? 
6. Compare the following for uncompensated and lag-compensated systems de-
signed to yield the same transient response: low-frequency gain, phase-margin 
frequency, gain curve value around the phase-margin frequency, and phase curve 
values around the phase-margin frequency. 
7. From the Bode diagram viewpoint, briefly explain how a lead network increases 
the speed of the transient response. 
8. Based upon your answer to Question 7, explain why lead networks do not cause 
instability. 
9. Why is a correction factor added to the phase margin required to meet the 
transient response? 
10. When designing a lag-lead network, what difference is there in the design of the 
lag portion as compared to a separate lag compensator? 
1. Design the value of gain, K, for a gain margin o 
10 dB in the unity feedback system of Figure P l l . l t 
[Section: 11.2] 
FIGURE P11.1 
2. For each of the systems in Problem 1., design 
the gain, K, for a phase margin of 40°. [Section: 
11.2] 
3. Given the unity feedback system of Figure PI 1.1, 
use frequency response methods to determine 
the value of gain, K, to yield a step response with 
a 20% overshoot if [Section: 11.2] 
m +, 
G(s) 
C(s) 
a. G{s) = 
K 
(5 + 4)(5 + 10)(5 + 15) 
b. G(s) = 
K 
5(5 + 4)(5 + 10) 
c. G(s) = 
K(s + 2) 
5(5 + 4)(5 + 6)(5+10) 

654 
Chapter 11 
Design via Frequency Response 
a. G(s) = 
K 
s(s 
b. G(s) = 
8)(^ + 15) 
K(s + 4) 
c. G(s) = 
5(5 + 8)(5 + 10)(5 + 15) 
K{s + 2)(s + l) 
5(5 + 6)(5 + 8)(5 + 10)(5 + 15) 
4. Given the unity feedback system of Figure PI 1.1 
with 
G(s) = 
K(5+ 20)(5+ 25) 
5(5 + 6)(5 + 9)(5 + 14) 
do the following: [Section: 11.2] 
a. Use frequency response methods to determine 
the value of gain, K, to yield a step response with 
a 15% overshoot. Make any required second-
order approximations. 
b. Use MATLAB or any other com- 
MATLAB 
puter program to test your 
Vul^P 
second-order approximation 
by simulating the system for your 
designed value of K. 
5. The unity feedback system of 
J S S * 
Figure Pll.l with 
dJEit 
Control Solutions 
CM- 
K 
5(5 + 7) 
is operating with 15% overshoot. Using frequency 
response techniques, design a compensator to yield 
Kv = 50 with the phase-margin frequency and phase 
margin remaining approximately the same as in the 
uncompensated system. [Section: 11.3] 
6. Given the unity feedback system of Figure Pll.l 
with 
£(5 + 10)(5 + 11) 
{) 
5(5 + 3)(5 + 6)(5 + 9) 
do the following: [Section: 11.3] 
a. Use frequency response methods to design a lag 
compensator to yield Kv — 1000 and 15% over-
shoot for the step response. Make any required 
second-order approximations. 
b. Use MATLAB or any o t h e r com- 
MATLAB 
puter program to t e s t your 
^yl^P 
second-order approximation by 
simulating the system for your de-
signed value of Kand lag compensator. 
7. The unity feedback system shown in Figure Pll.l 
with 
G ( j ) = (5 + 2)(5 + 5)(5 + 7) 
is operating with 15% overshoot. Using frequency 
response methods, design a compensator to yield 
a five-fold improvement in steady-state error with-
out appreciably changing the transient response. 
[Section: 11.3] 
8. Design a lag compensator so that the system of 
Figure Pll.l where 
G(s) = 
K(s + 4) 
(5 + 2)(5 + 6)(5 + 8) 
operates with a 45° phase margin and a static error 
constant of 100. [Section: 11.3] 
9. Design a PI controller for the system of Figure 11.2 
that will yield zero steady-state error for a ramp 
input and a 9.48% overshoot for a step input. 
[Section: 11.3] 
10. For the system of Problem 6, do the following: 
[Section: 11.3] 
a. Use frequency response methods to find the gain, 
K, required to yield about 15% overshoot. Make 
any required second-order approximations. 
b. Use frequency response methods to design a PI 
compensator to yield zero steady-state error for a 
ramp input without appreciably changing the 
transient response characteristics designed in 
Part a. 
c. Use MATLAB or any other compu- JJJJiiL 
ter program to test your second- VUL^P 
order approximation by simulating the 
system for your designed value of if and 
PI compensator. 
11. Write a MATLAB program that will J^JiJL 
design a PI controller assuming a Vul^P 
second-order approximation as follows: 
a. Allow the user to input from the key-
board the desired percent overshoot 
b. Design a PI controller and gain to yield 
zero steady-state error for a closed-
loop step response as well as meet the 
percent overshoot specification 
c. Display the compensated closed-loop 
step response 

Problems 
655 
Test your program on 
G(s) = 
K 
(s + 5)(s + 10) 
and 25% o v e r s h o o t . 
12. Design a compensator for the unity 
' ^ l 
feedback system of Figure Pll.l with 
Control Solutions 
G(s) = 
K 
5(5 + 3)(5 + 15)(5 + 20) 
to yield a Kv = 4 and a phase margin of 40°. 
[Section: 11.4] 
13. Consider the unity feedback system of Figure Pll.l 
with 
K 
G(s) = 5(5 + 5)(5 + 20) 
The uncompensated system has about 55% over-
shoot and a peak time of 0.5 second when Kv = 10. 
Do the following: [Section: 11.4] 
a. Use frequency response methods to design a lead 
compensator to reduce the percent overshoot to 
10%, while keeping the peak time and steady-
state error about the same or less. Make any 
required second-order approximations. 
b. Use MATLAB or any o t h e r compu- JJ^JiiL 
t e r 
program 
to 
t e s t 
your ^Kiil^P 
s e c o n d - o r d e r approximation by simu-
l a t i n g t h e system for your designed 
v a l u e of K. 
14. The unity feedback system of Figure Pll.l with 
[ ' 
(5 + 2)(5 + 6)(5 + 10) 
is operating with 20% overshoot. [Section: 11.4] 
a. Find the settling time. 
b. Find Kp. 
c. Find the phase margin and the phase-margin 
frequency. 
d. Using frequency response techniques, design a 
compensator that will yield a threefold improve-
ment in Kp and a twofold reduction in settling 
time while keeping the overshoot at 20%. 
WileyPLUS 
15. Repeat the design of Example 11.3 
ffTTTZfe 
in the text using a PD controller. 
, , 
r r i 
. 
.,., ,1 
Control Solutions 
[Section: 11.4] 
16. Repeat Problem 13 using a P D compensator. 
[Section: 11.4] 
17. Write a MATLAB program that will 
MATLAB 
design a lead compensator assum- V M L ^ P 
ing 
second-order 
approximations 
as 
follows : 
a. Allow the user to input from the key-
board the desired percent overshoot, 
peak time, and gain required to meet a 
steady-state error specification 
b. Display the gain-compensatedBodeplot 
c. Calculate the required phase margin 
and bandwidth 
d. Display the pole, zero, and gain of the 
lead compensator 
c. Display the compensated Bode plot 
f. Output the step response of the lead-
compensated 
system 
to 
test 
your 
second-order approximation 
Test your program on a unity feedback 
system where 
JCfr + 1) 
s(s + 2)(s+6) 
and the following specifications are to 
be met: percent overshoot = 10%, peak 
time = 0 .1 second, and Kv = 30 . 
18. Repeat Problem 17 for a PD 
MATLAB 
c o n troiler. 
^(^ii^P 
19. Use frequency response methods to design a lag-
lead compensator for a unity feedback system 
where [Section: 11.4] 
{> 
5(5 + 5)(5+15) 
and the following specifications are to be met: 
percent overshoot = 15%, settling time = 0.1 sec-
ond, and Kv = 1000. 
20. Write a MATLAB program that will 
MATLAB 
design a lag-lead compensator ^Kiil^P 
assuming second-order approximations 
as follows: [ Section: 11.5] 
a. Allow the user to input from the key-
board the desired percent overshoot, 
settling time, and gain required to 
meet a steady-state error specification 
b. Display the gain-compensated Bode 
plot 

656 
Chapter 11 
Design via Frequency Response 
Commanded 
roll angle 
i®— 
—11 
Compensator 
K 
Actuator 
200 
s2+Us+100 
Roll dynamics 
500 
s(s + 6) 
Actual 
roll angle 
#W 
FIGURE P11.2 Towed-vehicle roll control 
c. Calculate the required phase margin 
and bandwidth 
d. Display the poles, zeros, and the gain 
of the lag-lead compensator 
e. Display the lag-lead-compensated Bode 
plot 
f. Display the step response of the lag-
lead compensated system to test your 
second-order approximation 
Use your program to do Problem 19. 
21. Given a unity feedback system with 
3 
WileyPLUS 
G(S) =s(s + 2)ts + 5) 
I333 
S{S + Z){S-bD) 
control Solutions 
design a PID controller to yield zero steady-state 
error for a ramp input, as well as a 20% overshoot, 
and a peak time less than 2 seconds for a step input. 
Use only frequency response methods. [Section: 11.5] 
22. A u n i t y feedback system has 
MATLAB 
I \ — 
G{S)~ 
s(s + 3)(5+ 6) 
If this system has an associated 0 . 5 sec-
ond delay, use MATLAB to design the value 
of K for 20% overshoot. Make any neces-
sary second-order approximations, but 
test your assumptions by simulating 
your design. The delay can be repre-
sented by cascading the MATLAB function 
pade (T,n) with G(s) , where Tis the delay 
in seconds and n is the order of the Pade 
approximation (use 5). Write the program 
to do the following: 
a. Accept your value of percent overshoot 
from the keyboard 
b. Display the Bode plot for K= 1 
c. Calculate the required phase margin 
and find the phase-margin frequency 
and the magnitude at the phase-margin 
frequency 
d. Calculate and display the value of K 
DESIGN PROBLEMS 
23. Aircraft are sometimes used to tow other vehicles. 
A roll control system for such an aircraft was dis-
cussed in Problem 58 in Chapter 6. If Figure PI 1.2 
represents the roll control system, use only fre-
quency response techniques to do the following 
(Cochran, 1992): 
a. Find the value of gain, K, to yield a closed-loop 
step response with 10% overshoot. 
b. Estimate peak time and settling time using the 
gain-compensated frequency response. 
c. Use MATLAB to simulate your 
MATLAB 
system. Compare the results of C L U ^ P 
the simulation with the re-
quirements in Part a and your estima-
tion of performance in Part b. 
24. The model for a specific linearized TCP/IP com-
puter network queue working under a random 
early detection (RED) algorithm has been modeled 
using the block diagram of Figure PI 1.1, where 
G{s) = M(s)P(s), with 
M(s) = 
and 
0.005L 
s + 0.005 
P(s) = 
140,625e -0.1s 
(5 + 2.67)(^ + 10) 
Also, L is a parameter to be varied (Hollot, 2001). 
a. Adjust L to obtain a 15% overshoot in the 
transient response for step inputs. 
b. Verify Part a with a Simulink ^"j^< 
unit step response simulation. ^ » * ^ ^ 
25. An electric ventricular assist device (EVAD) that 
helps pump blood concurrently to a defective natu-
ral heart in sick patients can be shown to have a 
transfer function 
Pao(s) 
1361 
G{s) = Em(s) 
s2 + 695 + 70.85 

Problems 
657 
The input, Em(s), is the motor's armature voltage, 
and the output is Pao(s), the aortic blood pressure 
(Tasch, 1990). The EVAD will be controlled in the 
closed-loop configuration shown in Figure PI 1.1. 
a. Design a phase lag compensator to achieve a 
tenfold improvement in the steady-state error to 
step inputs without appreciably affecting the 
transient response of the uncompensated system. 
b. Use MATLAB to simulate the 
MARAB 
uncompensated and compensated ( d J P 
systems for a unit step input. 
26. A Tower Trainer 60 Unmanned Aerial Vehicle has a 
transfer function 
where 8e(s) is the elevator angle and h(s) is the 
change in altitude (Barkana, 2005). 
a. Assuming the airplane is controlled in the closed-
loop 
configuration 
of 
Figure 
PI 1.1 
with 
G{s) = KP(s), find the value of K that will result 
in a 30° phase margin. 
b. For the value of K calculated in Part a, obtain the 
corresponding gain margin. 
c. Obtain estimates for the system's %OS and 
settling times Ts for step inputs. 
d. Simulate t h e s t e p r e s p o n s e of 
MATLAB 
t h e system u s i n g MATLAB. 
P(s) = Se(s) 
-34.1653 - 144.%2 + 70475 
557.2 
s5 + 13.1854 + 95.9353 + 14.6152 + 31.945 
e. Explain the simulation results and discuss any 
inaccuracies in the estimates obtained in Part c. 
27. Self-guided vehicles, such as that shown in Figure 
P11.3(a), are used in factories to transport products 
from station to station. One method of construction 
Desired 
bearing 
angle m-
Computer 
K 
Desired 
wheel 
position 
\ p-* 
Motor and 
controller 
5 
s(s + 2) 
Actual 
wheel 
position 
Vehicle 
1 
s(s + 3) 
Actual 
bearing 
angle 
m 
FIGURE P11.3 
a. Automated guided carts in the final assembly area of lithium-ion batteries for Chevrolet Volt™ 
electric vehicles (Rebecca Cook/Rueters/©Corbis); b. simplified block diagram of a guided cart 

658 
Chapter 11 
Design via Frequency Response 
Desired 
roll 
a"g , e 
+/OV 
-
- . 
Amplifier 
K 
Motor 
1 
Aileron 
torque 
FIGURE P11.4 
Aircraft 
10 
s + 5 
Roll 
rale 
1 
5 
Actual 
roll 
angle 
is to embed a wire in the floor to provide guidance. 
Another method is to use an onboard computer and 
a laser scanning device. Bar-coded reflective devices 
at known locations allow the system to determine 
the vehicle's angular position. This system allows 
the vehicle to travel anywhere, including between 
buildings (Stefanides, 1987). Figure PI 1.3(6) shows a 
simplified block diagram of the vehicle's bearing con-
trol system. For 11% overshoot, K is set equal to 2. 
Design a lag compensator using frequency response 
techniques to improve the steady-state error by a 
factor of 30 over that of the uncompensated system. 
28. An aircraft roll control system is shown in Figure 
PI 1.4. The torque on the aileron generates a roll rate. 
The resulting roll angle is then controlled through a 
feedback system as shown. Design a lead compensa-
tor for a 60° phase margin and Kv = 5. 
29. The transfer function from applied force to arm 
displacement for the arm of a hard disk drive has 
been identified as 
x _ X{s) _ 3.3333 x 104 
U{S} ~ F(s) ~ 
? 
The position of the arm will be controlled using the 
feedback loop shown in Figure Pll.l (Yan, 2003). 
a. Design a lead compensator to achieve closed-loop 
stability with a transient response of 16% over-
shoot and a settling time of 2 msec for a step input. 
MATLAB 
b. Verify your design through 
MATLAB simulations. 
30. A pitch axis attitude control system 
gfljfgE 
utilizing a momentum wheel was the sub- 
" ' ' • " 
ject of Problem 61 in Chapter 8. In that Contro1 Solu,ions 
problem, the compensator is shown as a PI compen-
sator. We want to replace the PI compensator with a 
lag-lead compensator to improve both transient and 
steady-state error performance. The block diagram 
for the pitch axis attitude control is shown in Figure 
P11.5, where 6c(s) is a commanded pitch angle and 
9(s) is the actual pitch angle of the spacecraft. If r = 
23 seconds and Iz = 963 1 in-lb-s2, do the following 
(Piper, 1992): 
a. Design a lag-lead compensator and find Gc(s) 
and K to yield a system with the following 
performance specifications: percent overshoot = 
20%, settling time = 10 seconds, Kv = 200. Make 
any required second-order approximations. 
b. Use MATLAB or any other compu- ^JJATLA8 
ter program to test your second- 
^EJ^B 
order approximation by simulating 
the system for your designed value 
of Kand lag-lead compensator. 
31. For the heat exchange system described in Problem 
36, Chapter 9 (Smith, 2002): 
Pitch 
command 
//svs(.v) 
Disturbance 
Momentum 
^,/ = ^ 
Pitch 
dynamic 
output 
FIGURE P11.5 

Problems 
659 
a. Design a passive lag-lead compensator 
to 
achieve 5% steady-state error with a transient 
response of 10% overshoot and a settling time of 
60 seconds for step inputs. 
MATLAB 
b. Use MATLAB to simulate and 
verify your design. 
32. Active front steering is used in front-steering four-
wheel cars to control the yaw rate of the vehicle as a 
function of changes in wheel-steering commands. 
For a certain car, and under certain conditions, it has 
been shown that the transfer function from steering 
wheel angle to yaw rate is given by {Zhang, 2008): 
P(s) = 28.4s + 119.7 
s2 + 7.155 + 14.7 
The system is controlled in a unity-feedback 
configuration. 
a. Use the Nichols chart and follow the procedure 
of Example 11.5 to design a lag-lead compensa-
tor such that the system has zero steady-state 
error for a step input. The bandwidth of the 
closed-loop system must be COB = 10 rad/sec. 
Let the open-loop magnitude response peak be 
less than 1 dB and the steady-state error constant 
Kv = 20. 
b. Relax the bandwidth requirement to cog > 10 
rad/sec. Design the system for a steady-state 
error of zero for a step input. Let the open-
loop magnitude response peak be less than 
1 dB and Kv = 20 using only a lead compensator. 
c. Simulate the step response of 
MATLAB 
b o th designs using MAT LAB . 
( Q B 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
33. High-speed rail pantograph. Problem 21 in Chap-
ter 1 discusses active control of a pantograph mech-
anism for high-speed rail systems. In Problem 79(a), 
Chapter 5, you found the block diagram for the 
active pantograph control system. In Chapter 8, 
Problem 72, you designed the gain to yield a 
closed-loop step response with 38% overshoot. A 
plot of the step response should have shown a 
settling time greater than 0.5 second as well as a 
high-frequency oscillation superimposed over the 
step response. In Chapter 9, Problem 55, we reduced 
the settling time to about 0.3 second, reduced the 
step response steady-state error to zero, and 
eliminated the high-frequency oscillations using a 
notch filter (O'Connor, 1997). Using the equivalent 
forward transfer function found in Chapter 5 
cascaded with the notch filter specified in Chapter 9, 
design, using frequency response techniques, a 
lag-lead compensator to meet the 
following 
specifications: 
a. At least 35° phase margin 
b. A maximum of 10% steady-state error for the 
closed-loop step response 
c. At least 35 rad/s bandwidth 
34. Control of HIV/AIDS. In Chapter 6, the model for 
an HIV/AIDS patient treated with RTIs was linear-
ized and shown to be 
P(s) = Y(s) 
-520s - 10.3844 
[/1(5) 
53 + 2.681752 + 0.115 + 0.0126 
-520(5 + 0.02) 
" (5 + 2.2644)(52 + 0.045 + 0.0048) 
It is assumed here that the patient will be treated 
and monitored using the closed-loop configuration 
shown in Figure Pll.l Since the plant has a negative 
dc gain, assume for 
simplicity that 
G{s) — 
Gc(s) P(s) and Gc(0) < 0. Assume also that the 
specifications for the design are (1) zero steady-
state error for step inputs, (2) overdamped time-
domain response, and (3) settling time Ts os 100 
days (Craig, 2004). 
a. The 
overdamped 
specification 
requires 
a 
<&M ~ 90°. Find the corresponding bandwidth 
required to satisfy the settling time requirement. 
b. The zero steady-state error specification implies 
that the open-loop transfer function must be 
augmented to Type 1. The —0.02 zero of the 
plant adds too much phase lead at low frequen-
cies, and the complex conjugate poles, if left 
uncompensated within the loop, result in un-
desired oscillations in the time domain. Thus, 
as an initial approach to compensation for this 
system we can try 
G, 5 
= 
-K(s2 + 0.04s + 0.0048) 
s{s + 0.02) 
For K = 1, make a Bode plot of the resulting system. 
Obtain the value of K necessary to achieve the 
design demands. Check for closed-loop stability. 

660 
Chapter 11 
Design via Frequency Response 
c. Simulate the unit step res- 
MATLAB 
ponse of the system using MAT- ^ ^ J ^ ) 
LAB. Adjust K to achieve the 
desired response. 
35. Hybrid vehicle. In Part b of Problem 10.55 we used a 
proportional-plus-integral (PI) speed controller 
that resulted in an overshoot of 20% and a settling 
time, Ts = 3.92 seconds (Preitl, 2007). 
a. Now assume that the system specifications re-
quire a steady-state error of zero for a step input, 
a ramp input steady-state error <2%, a %OS 
< 4.32%, and a settling time < 4 seconds. One 
way to achieve these requirements is to cancel 
the Pi-controller's zero, Z/, with the real pole of 
the uncompensated system closest to the origin 
(located at —0.0163). Assuming exact cancella-
tion is possible, the plant and controller transfer 
function becomes 
G(5) = K(s + 0.6) 
s(s + 0.5858) 
Design the system to meet the requirements. You 
may use the following steps: 
i. Set the gain, K, to the value required by the 
steady-state error specifications. Plot the 
Bode magnitude and phase diagrams. 
Calculate the required phase margin to meet 
the damping ratio or equivalently the %OS 
requirement, using Eq. (10.73). If the phase 
margin found from the Bode plot obtained in 
Step i is greater than the required value, 
simulate the system to check whether the 
ii. 
settling time is less than 4 seconds and 
whether the requirement of a %OS < 4.32% 
has been met. Redesign if the simulation 
shows that the %OS and/or the steady-state 
error requirements have not been met. If all 
requirements are met, you have completed the 
design. 
b. In most cases, perfect pole-zero cancellation is 
not possible. Assume that you want to check 
what happens if the Pi-controller's zero changes 
by ± 20%, e.g., if Z/ moves to: 
or to 
Case 1:-0.01304 
Case 2: -0.01956. 
The plant and controller transfer function in 
these cases will be, respectively: 
Case 1: G(s) = 
Case 2: G(s) = 
£(s + 0.6)(.y+ 0.01304) 
5(5 + 0.0163)(5 + 0.5858) 
£(5 + 0.6)(5 + 0.01956) 
5(5 + 0.0163)(5 + 0.5858) 
Set K in each case to the value required by the 
steady-state error specifications and plot the Bode 
magnitude and phase diagrams. Simulate the closed-
loop step response for each of the three locations of 
Zf. pole/zero cancellation, Case 1, and Case 2, given 
in the problem. 
Do the responses obtained resemble a second-
order overdamped, critically damped, or under-
damped response? Is there a need to add a deriva-
tive mode? 
Cyber Exploration Laboratory 
Experiment 11.1 
Objectives 
To design a PID controller using MATLAB's SISO Design Tool. To 
see the effect of a PI and a PD controller on the magnitude and phase responses at 
each step of the design of a PID controller. 
Minimum Required Software Packages 
MATLAB, and the Control 
System Toolbox 
Prelab 
1. What is the phase margin required for 12% overshoot? 
2. What is the bandwidth required for 12% overshoot and a peak time of 2 seconds? 

Bibliography 
3. Given a unity feedback system with G(s) = — 
—, 
—, what is the gain, K, 
s(s + l)(s + 4) 
& 
required to yield the phase margin found in Prelab 1? What is the phase-margin 
frequency? 
4. Design a PI controller to yield a phase margin 5° more than that found in Prelab 1. 
5. Complete the design of a PID controller for the system of Prelab 3. 
Lab 
1. Using MATLAB's SISO Design Tool, set up the system of Prelab 3 and display 
the open-loop Bode plots and the closed-loop step response. 
2. Drag the Bode magnitude plot in a vertical direction until the phase margin found 
in Prelab 1 is obtained. Record the gain K, the phase margin, the phase-margin 
frequency, the percent overshoot, and the peak time. Move the magnitude curve 
up and down and note the effect upon the phase curve, the phase margin, and the 
phase-margin frequency. 
3. Design the PI controller by adding a pole at the origin and a zero one decade below 
the phase-margin frequency found in Lab 2. Readjust the gain to yield a phase 
margin 5° higher than that found in Prelab 1. Record the gain K, the phase margin, 
the phase-margin frequency, the percent overshoot, and the peak time. Move the 
zero back and forth in the vicinity of its current location and note the effect on the 
magnitude and phase curve. Move the magnitude curve up and down and note its 
effect on the phase curve, the phase margin, and the phase-margin frequency. 
4. Design the PD portion of the PID controller by first adjusting the magnitude 
curve to yield a phase-margin frequency slightly below the bandwidth calculated 
in Prelab 2. Add a zero to the system and move it until you obtain the phase 
margin calculated in Prelab 1. Move the zero and note its effect. Move the 
magnitude curve and note its effect. 
Postlab 
1. Compare the Prelab PID design with that obtained via the SISO Design Tool. In 
particular, compare the gain K, the phase margin, the phase-margin frequency, 
the percent overshoot, and the peak time. 
2. For the uncompensated system, describe the effect of changing gain on the phase 
curve, the phase margin, and the phase-margin frequency. 
3. For the PI-compensated system, describe the effect of changing gain on the phase 
curve, the phase margin, and the phase-margin frequency. Repeat for changes in 
the zero location. 
4. For the PID-compensated system, describe the effect of changing gain on the 
phase curve, the phase margin, and the phase-margin frequency. Repeat for 
changes in the PD zero location. 
J Bibliography J 
Barkana, I. Classical and Simple Adaptive Control of Nonminimum Phase Autopilot Design. 
Journal of Guidance, Control, and Dynamics, vol. 28, 2005, pp. 631-638. 
Cochran, J. E., Innocenti, M., No, T. S., and Thukral, A. Dynamics and Control of Maneuver-
able Towed Flight Vehicles. Journal of Guidance, Control, and Dynamics, vol. 15, no. 5, 
September-October 1992, pp. 1245-1252. 

Chapter 11 
Design via Frequency Response 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
D'Azzo, J. X, and Houpis, C. H. Feedback Control System Analysis and Synthesis, 2d ed. 
McGraw-Hill, New York, 1966. 
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989. 
Flower, T. L., and Son, M. Motor Drive Mechanics and Control Electronics for a High 
Performance Plotter. HP Journal, November 1981, pp. 12-15. 
Hollot, C. V, Misra, V., Towsley, D., and Gong, W. A Control Theoretic Analysis of RED. 
Proceedings of IEEE INFOCOM, 2001, pp. 1510-1519. 
Hostetter, G. H., Savant, C. J., and Stefani, R. T. Design of Feedback Control Systems, 2d ed. 
Saunders College Publishing, New York, 1989. 
Kuo, B. C. Automatic Control Systems, 5th ed. Prentice Hall, Upper Saddle River, NJ, 1987. 
O'Connor, D. N, Eppinger, S. D., Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Phillips, C. L., and Harbor, R. D. Feedback Control Systems. Prentice Hall, Upper Saddle 
River, NJ, 1988. 
Piper, G. E., and Kwatny, H. G. Complicated Dynamics in Spacecraft Attitude Control 
Systems. Journal of Guidance, Control, and Dynamics, vol. 15, no. 4, July-August 1992, 
pp. 825-831. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth Jnternational Symposium on Applied Computational Inteligence 
and Informatics. IEEE, 2007. 
Raven, F. H. Automatic Control Engineering, 4th ed. McGraw-Hill, New York, 1987. 
Smith, C. A. Automated Continuous Process Control. Wiley, New York, 2002. 
Stefanides, E. J. Self-Guided Vehicles Upgrade Materials Handling. Design News, 7, 
December 1987, pp. 80-81. 
Tasch, U, Koontz, J. W, Ignatoski, M. A., and Geselowitz, D. B. An Adaptive Aortic Pressure 
Observer for the Penn State Electric Ventricular Assist Device. IEEE Transactions on 
Biomedical Engineering, vol. 37, 1990, pp. 374-383. 
Yan, X, and Lin, R. Experimental Modeling and Compensation of Pivot Nonlinearity in Hard 
Disk Drives. IEEE Transactions on Magnetics, vol. 39, 2003, pp. 1064-1069. 
Zhang, J.-Y, Kim, J.-W., Lee, K.-B., and Kim, Y.-B. Development of an Active Front Steering 
(AFS) System With QFT Control. International Journal of Automotiv Technology, vol. 9, 
no. 6, 2008, pp. 695-702. 

Design via State Space 
This chapter covers only state-space methods. 
^Chapter Learning Outcomes J ) 
After completing this chapter the student will be able to-. 
• Design a state-feedback controller using pole placement for systems represented in 
phase-variable form to meet transient response specifications (Sections 12.1-12.2) 
• Determine if a system is controllable (Section 12.3) 
• Design a state-feedback controller using pole placement for systems not repre-
sented in phase-variable form to meet transient response specifications 
(Section 12.4) 
• Design a state-feedback observer using pole placement for systems represented in 
observer canonical form (Section 12.5) 
• Determine if a system is observable (Section 12.6) 
• Design a state-feedback observer using pole placement for systems not represented 
in observer canonical form (Section 12.7) 
• Design steady-state error characteristics for systems represented in state space 
(Section 12.8 
12 
State Space 
mm 

664 
Chapter 12 
Design via State Space 
^Case Study Learning Outcomes^ 
You will be able to demonstrate your knowledge of the chapter objectives with case 
studies as follows: 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to specify all closed-loop poles and then design a state-feedback 
controller to meet transient response specifications. 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to design an observer to estimate the states. 
• Given the antenna azimuth position control system shown on the front endpapers, 
you will be able to combine the controller and observer designs into a viable 
compensator for the system. 
£12.1 Introduction 
Chapter 3 introduced the concepts of state-space analysis and system modeling. We 
showed that state-space methods, like transform methods, are simply tools for 
analyzing and designing feedback control systems. However, state-space techniques 
can be applied to a wider class of systems than transform methods. Systems with 
nonhnearities, such as that shown in Figure 12.1, and multiple-input, multiple-output 
systems are just two of the candidates for the state-space approach. In this book, 
however, we apply the approach only to linear systems. 
In Chapters 9 and 11, we applied frequency domain methods to system design. 
The basic design technique is to create a compensator in cascade with the plant or in 
FIGURE 12.1 A robot in a hospital 
pharmacy selects medications by bar 
code 

12.2 Controller Design 
the feedback path that has the correct additional poles and zeros to yield a desired 
transient response and steady-state error. 
One of the drawbacks of frequency domain methods of design, using either 
root locus or frequency response techniques, is that after designing the location of 
the dominant second-order pair of poles, we keep our fingers crossed, hoping that 
the higher-order poles do not affect the second-order approximation. What we 
would like to be able to do is specify all closed-loop poles of the higher-order system. 
Frequency domain methods of design do not allow us to specify all poles in systems 
of order higher than 2 because they do not allow for a sufficient number of unknown 
parameters to place all of the closed-loop poles uniquely. One gain to adjust, or 
compensator pole and zero to select, does not yield a sufficient number of parame-
ters to place all the closed-loop poles at desired locations. Remember, to place 
n unknown quantities, you need n adjustable parameters. State-space methods solve 
this problem by introducing into the system (1) other adjustable parameters and 
(2) the technique for finding these parameter values, so that we can properly place all 
poles of the closed-loop system.1 
On the other hand, state-space methods do not allow the specification of 
closed-loop zero locations, which frequency domain methods do allow through 
placement of the lead compensator zero. This is a disadvantage of state-space 
methods, since the location of the zero does affect the transient response. Also, a 
state-space design may prove to be very sensitive to parameter changes. 
Finally, there is a wide range of computational support for state-space methods; 
many software packages support the matrix algebra required by the design process. 
However, as mentioned before, the advantages of computer support are balanced by 
the loss of graphic insight into a design problem that the frequency domain methods 
yield. 
This chapter should be considered only an introduction to state-space design; 
we introduce one state-space design technique and apply it only to linear systems. 
Advanced study is required to apply state-space techniques to the design of systems 
beyond the scope of this textbook. 
^ 1 2 . 2 
Controller Design 
This section shows how to introduce additional parameters into a system so that we 
can control the location of all closed-loop poles. An nth-order feedback control 
system has an «th-order closed-loop characteristic equation of the form 
sn + an-isn-1 + • • • + a\s + ao = 0 
(12.1) 
Since the coefficient of the highest power of s is unity, there are n coefficients whose 
values determine the system's closed-loop pole locations. Thus, if we can introduce 
n adjustable parameters into the system and relate them to the coefficients in 
Eq. (12.1), all of the poles of the closed-loop system can be set to any desired 
location. 
This is an advantage as long as we know where to place the higher-order poles, which is not always the 
case. One course of action is to place the higher-order poles far from the dominant second-order poles or 
near a closed-loop zero to keep the second-order system design valid. Another approach is to use optimal 
control concepts, which are beyond the scope of this text. 

666 
Chapter 12 
Design via State Space 
Topology for Pole Placement 
In order to lay the groundwork for the approach, consider a plant represented in 
state space by 
x = Ax + BH 
y = Cx 
(12.2a) 
(12.2b) 
and shown pictorially in Figure 12.2(a), where light lines are scalars and the heavy 
lines are vectors. 
In a typical feedback control system, the output, y, is fed back to the summing 
junction. It is now that the topology of the design changes. Instead of feeding back y, 
what if we feed back all of the state variables? If each state variable is fed back to the 
control, u, through a gain, kh there would be n gains, k& that could be adjusted to 
yield the required closed-loop pole values. The feedback through the gains, kh is 
represented in Figure 12.2(b) by the feedback vector -K. 
The state equations for the closed-loop system of Figure 12.2(6) can be written 
by inspection as 
x = Ax + Bu = Ax + B(-Kx + r) = (A - BK)x + Br 
y = Cx 
(12.3a) 
(12.3b) 
Before continuing, you should have a good idea of how the feedback system of 
Figure 12.2(6) is actually implemented. As an example, assume a plant signal-flow 
graph in phase-variable form, as shown in Figure 12.3(a). Each state variable is then 
fed back to the plant's input, u, through a gain, kt, as shown in Figure 12.3(6). 
Although we will cover other representations later in the chapter, the phase-variable 
+ x^ 
+ i 
y, 
x 
i 
I 
A 
X 
C 
y 
(a) 
FIGURE 12.2 
a. State-space 
representation of a plant; b. plant 
with state-variable feedback 
r 
tf 
"v2 
^ 
" * 
9 
B 
£& 
+i 
?^ *» 
P 
i 
A 
-K 
X 
C 
>' 
m 

12.2 Controller Design 
667 
o—» 
-k, 
FIGURE 12.3 
a. Phase-
variable representation for 
plant; b. plant with state-
variable feedback 
form, with its typical lower companion system matrix, or the controller canonical 
form, with its typical upper companion system matrix, yields the simplest evaluation 
of the feedback gains. In the ensuing discussion, we use the phase-variable form to 
develop and demonstrate the concepts. End-of-chapter problems will give you an 
opportunity to develop and test the concepts for the controller canonical form. 
The design of state-variable feedback for closed-loop pole placement consists 
of equating the characteristic equation of a closed-loop system, such as that shown in 
Figure 12.3(6), to a desired characteristic equation and then finding the values of the 
feedback gains, fc,-. 
If a plant like that shown in Figure 123(a) is of high order and not represented 
in phase-variable or controller canonical form, the solution for the fc/s can be 
intricate. Thus, it is advisable to transform the system to either of these forms, design 
the &,'s, and then transform the system back to its original representation. We 
perform this conversion in Section 12.4, where we develop a method for performing 
the transformations. Until then, let us direct our attention to plants represented in 
phase-variable form. 

Chapter 12 
Design via State Space 
Pole Placement for Plants in Phase-Variable Form 
To apply pole-placement methodology to plants represented in phase-variable form, 
we take the following steps: 
1. Represent the plant in phase-variable form. 
2. Feed back each phase variable to the input of the plant through a gain, kt. 
3. Find the characteristic equation for the closed-loop system represented in Step 2. 
4. Decide upon all closed-loop pole locations and determine an equivalent charac-
teristic equation. 
5. Equate like coefficients of the characteristic equations from Steps 3 and 4 and 
solve for kt. 
Following these steps, the phase-variable representation of the plant is given by 
Eq. (12.2), with 
A = 
0 1 
0 
-&H-1 
-
; B = 
roi 
0 
.1. 
(12.4) 
(12.5) 
C = [C] c2 
••• c„] 
The characteristic equation of the plant is thus 
sn + an-isn~l + • • • + a\s + a0 = 0 
Now form the closed-loop system by feeding back each state variable to u, forming 
u = -Kx 
(12.6) 
where 
K=[h 
k2 
••• k„] 
(12.7) 
The k/s are the phase variables' feedback gains. 
Using Eq. (12.3a) with Eqs. (12.4) and (12.7), the system matrix, A - BK, for 
the closed-loop system is 
A - B K = 
_-(ao + fci) ~{a\+k2) 
-(a2 + k3) 
-(an-i 
+ k„) 
(12.8) 
Since Eq. (12.8) is in phase-variable form, the characteristic equation of the closed-
loop system can be written by inspection as 
detfal - (A - BK)) = sn + (a„_, + kuV'1 
+ (««-2 + fc„-iK~2 
+ ---(^1 + ^ + ( ^ 0 + ^1)=0 
(12.9) 
Notice the relationship between Eqs. (12.5) and (12.9). For plants represented in 
phase-variable form, we can write by inspection the closed-loop characteristic 
equation from the open-loop characteristic equation by adding the appropriate kt 
to each coefficient. 

12.2 Controller Design 
669 
Now assume that the desired characteristic equation for proper pole place-
ment is 
M - l 
Sn + Cln-is"'1 + dn-2S Ji-2 
+ d2s2 + dis + d0 = 0 
(12.10) 
where the d/s are the desired coefficients. Equating Eqs. (12.9) and (12.10), we 
obtain 
from which 
di = at + ki+i i = 0, 1, 2,..., n - 1 
ki+\ =4i- 
Qi 
(12.11) 
(12.12) 
Now that we have found the denominator of the closed-loop transfer function, 
let us find the numerator. For systems represented in phase-variable form, we 
learned that the numerator polynomial is formed from the coefficients of the output 
coupling matrix, C. Since Figures 12.3(A) and (b) are both in phase-variable form 
and have the same output coupling matrix, we conclude that the numerators of their 
transfer functions are the same. Let us look at a design example. 
Example 12.1 
Controller Design for Phase-Variable Form 
PROBLEM: 
Given the plant 
G(s) = 
20(5 + 5) 
5(5 + 1)(^ + 4) 
(12.13) 
design the phase-variable feedback gains to yield 9.5% overshoot and a settling 
time of 0.74 second. 
SOLUTION: We begin by calculating the desired closed-loop characteristic equa-
tion. Using the transient response requirements, the closed-loop poles are 
-5.4 + /7.2. Since the system is third-order, we must select another closed-loop 
pole. The closed-loop system will have a zero at —5, the same as the open-loop 
system. We could select the third closed-loop pole to cancel the closed-loop zero. 
However, to demonstrate the effect of the third pole and the design process, 
including the need for simulation, let us choose -5.1 as the location of the third 
closed-loop pole. 
Now draw the signal-flow diagram for the plant. The result is shown in 
Figure 12.4(a). Next feed back all state variables to the control, w, through gains %, 
as shown in Figure 12.4(b). 
Writing the closed-loop system's state equations from Figure 12.4(6), we have 
x = 
y = [ 
0 
0 
- * 1 
100 
1 
0 
-(4+ *2) 
20 0]x 
0 
1 
-(5 + ^ ) . 
x + 
0 
0 
1 
(12.14a) 
;i2.14b) 

670 
Chapter 12 
Design via State Space 
-4 
(a) 
FIGURE 12.4 
a. Phase-variable 
representation for plant of 
Example 12.1; b. plant with 
state-variable feedback 
Comparing Eqs. (12.14) to Eqs. (12.3), we identify the closed-loop system 
matrix as 
A - B K 
0 
1 
0 
0 
0 
1 
-h 
-(4+ *2) ~(5 + /c3; 
To find the closed-loop system's characteristic equation, form 
det(sl - (A - BK)) =s3 + (5 + k3)s2 + (4 + k2)s + kx = 0 
This equation must match the desired characteristic equation, 
s3 + 15.9s2 + 136.085 + 413.1 = 0 
(12.15) 
:12.16) 
(12.17) 
formed from the poles -5.4 + /7.2, -5.4 - /7.2, and -5.1, which were previously 
determined. 
Equating the coefficients of Eqs. (12.16) and (12.17), we obtain 
ki = 413.1; k2 = 132.08; k3 = 10.9 
(12.18) 

12.2 Controller Design 
671 
0.30 -
0.25 -
0.20 -
° 
0.15 -
0.10 -
0.05 -
1.0 
Time (seconds) 
1.5 
2.0 
FIGURE 12.5 Simulation of 
closed-loop system of 
Example 12.1 
Finally, the zero term of the closed-loop transfer function is the same as the 
zero term of the open-loop system, or (5 + 5). 
Using Eqs. (12.14), we obtain the following state-space representation of the 
closed-loop system: 
x = 
0 
0 
-413.1 
1 
0 
-136.08 
0 
1 
-15.9 
x + 
0 
0 
1 
y = (100 20 0]x 
The transfer function is 
(12.19a) 
(12.19b) 
T(s) = 
20(^ + 5) 
53 + 15.9^2 + 136.085 + 413.1 
(12.20) 
Figure 12.5, a simulation of the closed-loop system, shows 11.5% overshoot 
and a settling time of 0.8 second. A redesign with the third pole canceling the zero 
at —5 will yield performance equal to the requirements. 
Since the steady-state response approaches 0.24 instead of unity, there is a 
large steady-state error. Design techniques to reduce this error are discussed in 
Section 12.8. 
Students who are using MATLAB should now run chl2pl in Appendix B. 
You will learn how to use MATLAB to design a controller for phase 
variables using pole placement. MATLAB will plot the step re-
sponse of the designed system. This exercise solves Example 12 .1 
using MATLAB. 
MATLAB 

672 
Chapter 12 
Design via State Space 
WileyPLUS 
Conlrol Solutions 
Tryltl2.1 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to solve for 
the phase-variable feedback 
gains to place the poles of the 
system in Skill-Assessment 
Exercise 12.1 at 
- 3 + /5, - 3 - y'5. and -10. 
A=[0 1 0 
0 0 1 
0 - 3 6 - 1 5 ] 
B=[0;0;1] 
poles=[ _3+5j, . . . 
- 3 - 5 j , - 1 0 ] 
K=acker(A,B,poles) 
Skill-Assessment Exercise 12.1 
PROBLEMS: For the plant 
100(5 + 10) 
G« = 5(5 + 3)(5+12) 
represented in the state space in phase-variable form by 
x = Ax -j-Bu — 
"0 
1 
0 
0 
0 
1 
0 
-36 
-15 
v = Cx=[1000 
100 0]x 
x + 
design the phase-variable feedback gains to yield 5% overshoot and a peak time of 
0.3 second. 
ANSWER: 
K = [2094 373.1 
14.97] 
The complete solution is located at www.wiley.com/college/nise. 
In this section, we showed how to design feedback gains for plants represented 
in phase-variable form in order to place all of the closed-loop system's poles at 
desired locations on the 5-plane. On the surface, it appears that the method should 
always work for any system. However, this is not the case. The conditions that must 
exist in order to uniquely place the closed-loop poles where we want them is the 
topic of the next section. 
¢12.3 Controllability 
Consider the parallel form shown in Figure 12.6(A). To control the pole location of 
the closed-loop system, we are saying implicitly that the control signal, u, can control 
the behavior of each state variable in x. If any one of the state variables cannot be 
controlled by the control u, then we cannot place the poles of the system where we 
desire. For example, in Figure 12.6(b), if Xi were not controllable by the control 
signal and if x1 also exhibited an unstable response due to a nonzero initial condition, 
there would be no way to effect a state-feedback design to stabilize 3¾ Xi would 
perform in its own way regardless of the control signal, u. Thus, in some systems, a 
state-feedback design is not possible. 
We now make the following definition based upon the previous discussion: 
If an input to a system can be found that takes every state variable from a desired 
initial state to a desired final state, the system is said to be controllable; otherwise, 
the system is uncontrollable. 
Pole placement is a viable design technique only for systems that are controllable. 
This section shows how to determine, a priori, whether pole placement is a viable 
design technique for a controller. 

12.3 Controllability 
673 
FIGURE 12.6 Comparison of 
a. controllable and b. un-
controllable systems 
Controllability by Inspection 
We can explore controllability from another viewpoint: that of the state equation 
itself. When the system matrix is diagonal, as it is for the parallel form, it is apparent 
whether or not the system is controllable. For example, the state equation for 
Figure 12.6(a) is 
x = 
-at 
0 
0 
0 
-at 
0 
0 
0 
- f l 3 
x + 
1 
1 
_1_ 
or 
X\ = — a\X\ 
+ u 
(12.21) 
(12.22a) 
x2 = 
-dlXi 
+ M 
(12.22b) 
x3 -
-a3x3 + u 
(12.22c) 

674 
Chapter 12 
Design via State Space 
Since each of Eqs. (12.22) is independent and decoupled from the rest, the control u 
affects each of the state variables. This is controllability from another perspective. 
Now let us look at the state equations for the system of Figure 12.6(6): 
x = 
-fl4 
0 
0 
0 
- « 5 
0 
0 
0 
- 0 6 . 
x + 
0 
1 
1_ 
(12.23) 
X\ = —«4*i 
(12.24a) 
x2 = 
«5*2 
(12.24b) 
* 3 
= 
-a6x3 + u 
(12.24c) 
From the state equations in (12.23) or (12.24), we see that state variable Xi is not 
controlled by the control u. Thus, the system is said to be uncontrollable. 
In summary, a system with distinct eigenvalues and a diagonal system matrix is 
controllable if the input coupling matrix B does not have any rows that are zero. 
The Controllability Matrix 
Tests for controllability that we have so far explored cannot be used for representa-
tions of the system other than the diagonal or parallel form with distinct eigenvalues. 
The problem of visualizing controllability gets more complicated if the system has 
multiple poles, even though it is represented in parallel form. Further, one cannot 
always determine controllability by inspection for systems that are not represented 
in parallel form. In other forms, the existence of paths from the input to the state 
variables is not a criterion for controllability since the equations are not decoupled. 
In order to be able to determine controllability or, alternatively, to design state 
feedback for a plant under any representation or choice of state variables, a matrix 
can be derived that must have a particular property if all state variables are to be 
controlled by the plant input, u. We now state the requirement for controllability, 
including the form, property, and name of this matrix.2 
An nth-order plant whose state equation is 
x = Ax + Bu 
is completely controllable3 if the matrix 
CM = [B AB A2B 
An !B 
(12.25) 
(12.26) 
is of rank n, where CM is called the controllability matrix.4 As an example, let us 
choose a system represented in parallel form with multiple roots. 
2 See the work listed in the Bibliography by Ogata (1990: 699-702) for the derivation. 
3 Completely controllable means that all state variables are controllable. This textbook uses controllable to 
mean completely controllable. 
4 See Appendix G at www.wiley.com/college/nise for the definition of rank. For single-input systems, 
instead of specifying rank n, we can say that CM must be nonsingular, possess an inverse, or have linearly 
independent rows and columns. 

12.3 Controllability 
675 
Example 12.2 
Controllability via the Controllability Matrix 
PROBLEM: Given the system of Figure 12.7, represented by a signal-flow diagram, 
determine its controllability. 
FIGURE 12.7 System for Example 12.2 
SOLUTION: The state equation for the system written from the signal-flow diagram is 
x - As 
liu - 
0 
i 
(>%-}n 
(12.27) 
- 1 
0 
0 
1 
- 1 
0 
0' 
0 
-2_ 
x + 
0 
1 
1 
At first it would appear that the system is not controllable because of the zero in the 
B matrix. Remember, though, that this configuration leads to uncontrollability only 
if the poles are real and distinct. In this case, we have multiple poles at —1. 
The controllability matrix is 
CM = B AB A2B 
2 B 1 _ 
0 
1 
1 
1 
- 1 
- 2 
- 2 
1 
4_ 
(12.28) 
The rank of CM equals the number of linearly independent rows or columns. The 
rank can be found by finding the highest-order square submatrix that is non-
singular. The determinant of CM = -1- Since the determinant is not zero, the 3 x 3 
matrix is nonsingular, and the rank of CM is 3. We conclude that the system is 
controllable since the rank of CM equals the system order. Thus, the poles of the 
system can be placed using state-variable feedback design. 
Students who are usingMATLAB should now run chl2p2 in Appendix B. 
You will learn how to use MATLAB to test a system for controlla-
bility. This exercise solves Example 12.2 usingMATLAB. 
MATLAB 
In the previous example, we found that even though an element of the input 
coupling matrix was zero, the system was controllable. If we look at Figure 12.7, we 
can see why. In this figure, all of the state variables are driven by the input u. 
On the other hand, if we disconnect the input at either dx\jdt, dx2/dt, or 
dxi/dt, at least one state variable would not be controllable. To see the effect, let us 

Chapter 12 
Design via State Space 
Trylt 12.2 
Use MATLAB, the Control 
System Toolbox, and the 
following statements to solve 
Skill-Assessment Exercise 12.2. 
A=[-l 1 2 
0 - 1 5 
0 3-4] 
B=[2;l;l] 
Cm=ctrb(A,B) 
Rank=rank(Cm) 
disconnect the input at dxijdt. This causes the B matrix to become 
B = 
(12.29) 
We can see that the system is now uncontrollable, since x\ and x2 are no longer controlled 
by the input. This conclusion is borne out by the controllability matrix, which is now 
CM = B AB A2B 
2ul 
-
0 
0 
1 
0 
0 
- 2 
0 
0 
4_ 
(12.30) 
Not only is the determinant of this matrix equal to zero, but so is the determinant of 
any 2 x 2 submatrix. Thus, the rank of Eq. (12.30) is 1. The system is uncontrollable 
because the rank of CM is 1, which is less than the order, 3, of the system. 
Skill-Assessment Exercise 12.2 
PROBLEM: Determine whether the system 
x = Ax + Bu = 
-1 
1 
0 - 1 
0 
3 
2 
5 
-4_ 
x + 
2 
1 
1_ 
is controllable. 
ANSWER: Controllable 
The complete solution is located at www.wiley.com/college/nise. 
In summary, then, pole-placement design through state-variable feedback is 
simplified by using the phase-variable form for the plant's state equations. However, 
controllability, the ability for pole-placement design to succeed, can be visualized 
best in the parallel form, where the system matrix is diagonal with distinct roots. In 
any event, the controllability matrix will always tell the designer whether the 
implementation is viable for state-feedback design. 
The next section shows how to design state-variable feedback for systems not 
represented in phase-variable form. We use the controllability matrix as a tool for 
transforming a system to phase-variable form for the design of state-variable feedback. 
^ 12.4 Alternative Approaches to Controller Design 
Section 12.2 showed how to design state-variable feedback to yield desired closed-
loop poles. We demonstrated this method using systems represented in phase-
variable form and saw how simple it was to calculate the feedback gains. Many 
times the physics of the problem requires feedback from state variables that are not 
phase variables. For these systems we have some choices for a design methodology. 

12.4 Alternative Approaches to Controller Design 
677 
The first method consists of matching the coefficients of det(.sl — (A — BK)) 
with the coefficients of the desired characteristic equation, which is the same method 
we used for systems represented in phase variables. This technique, in general, leads 
to difficult calculations of the feedback gains, especially for higher-order systems not 
represented with phase variables. Let us illustrate this technique with an example. 
Example 12.3 
Controller Design by Matching Coefficients 
PROBLEM: Given a plant, Y(s)/U{s) = 10/[(s + l)(s + 2)], design state feedback 
for the plant represented in cascade form to yield a 15% overshoot with a settling 
time of 0.5 second. 
SOLUTION: The signal-flow diagram for the plant in cascade form is shown in 
Figure 12.8(a). Figure 12.8(b) shows the system with state feedback added. Writing 
the state equations from Figure 12.8(6), we have 
X = 
-2 
1 
x + 0 
1 r 
y= [10 0]x 
where the characteristic equation is 
s2 + ( k2 + 3)s + (2/¾ + i d + ; -) = = 0 
(12.31a) 
(12.31b) 
(12.32) 
Using the transient response requirements stated in the problem, we obtain the 
desired characteristic equation 
s2 + 16s + 239.5 = 0 
(12.33) 
Equating the middle coefficients of Eqs. (12.32) and (12.33), we find k2 = 13. 
Equating the last coefficients of these equations along with the result for k2 yields 
yfci = 211.5. 
»0-
10 
-O.V 
-1 
-2 
FIGURE 12.8 a. Signal-flow 
graph in cascade form for 
G(s) = 10/[(s+l){s + 2)}; 
b. system with state feedback 
added 

678 
Chapter 12 
Design via State Space 
The second method consists of transforming the system to phase variables, 
designing the feedback gains, and transforming the designed system back to its 
original state-variable representation.5 This method requires that we first develop 
the transformation between a system and its representation in phase-variable form. 
Assume a plant not represented in phase-variable form, 
z = Az + Bw 
v = Cz 
whose controllability matrix is 
CMz = [B AB 
A 2B---A n _ 1B 
(12.34a) 
(12.34b) 
(12.35) 
Assume that the system can be transformed into the phase-variable (x) representa-
tion with the transformation 
z = Px 
Substituting this transformation into Eqs. (12.34), we get 
x = P ' A P X + P ^ B M 
y = CPx 
whose controllability matrix is 
CMx = [P-2B 
(P"1AP)(P-1B) 
(P-IAP)2(P"1B) 
• • • 
= [P_1B 
(P"1AP)(P-1B) 
(P- 1AP)(P- 1AP)(P _ 1B 
(P-1AP)(P-1AP) 
••• 
(P-1AP)(P~1B)] 
(12.36) 
(12.37a) 
(12.37b) 
(p-i A Py*-i( P-i B)] 
i 
••• 
( P - ] A P ) 
= P 1 [ B 
AB 
A2B 
XnlB 
Substituting Eq. (12.35) into (12.38) and solving for P, we obtain 
P — CMZC 
-l 
Mx 
(12.38) 
(12.39) 
Thus, the transformation matrix, P, can be found from the two controllability 
matrices. 
After transforming the system to phase variables, we design the feedback gains 
as in Section 12.2. Hence, including both feedback and input, u — —Kxx + r, Eqs. 
(12.37) becomes 
x = P-*APX - P ! B K x x + P_1Br 
= (P_1AP - P ^ B K ^ x + P - 1Br 
y = CPx 
(12.40a) 
(12.40b) 
Since this equation is in phase-variable form, the zeros of this closed-loop system are 
determined from the polynomial formed from the elements of CP, as explained in 
Section 12.2. 
5 See the discussions of Ackermann's formula in Franklin (1994) and Ogata (1990), listed in the 
Bibliography. 

12.4 Alternative Approaches to Controller Design 
679 
Using x = P *z, we transform Eqs. (12.40) from phase variables back to the 
original representation and get 
z = Az - BKXP xz + Br = (A - SKxP"1 )z + Br 
(12.41a) 
y = Cz 
(12.41b) 
Comparing Eqs. (12.41) with (12.3), the state variable feedback gain, Kz, for the 
original system is 
K, = KXP - l 
(12.42) 
The transfer function of this closed-loop system is the same as the transfer function 
for Eqs. (12.40), since Eqs. (12.40) and (12.41) represent the same system. Thus, the 
zeros of the closed-loop transfer function are the same as the zeros of the un-
compensated plant, based upon the development in Section 12.2. Let us demonstrate 
with a design example. 
Example 12.4 
Controller Design by Transformation 
PROBLEM: Design a state-variable feedback controller to yield a 20.8% overshoot 
and a settling time of 4 seconds for a plant, 
(5 + 4) 
G ( 5 ) 
(s + l)(s + 2)(5 + 5) 
that is represented in cascade form as shown in Figure 12.9. 
(12.43) 
SOLUTION: First find the state equations and the controllability matrix. The state 
equations written from Figure 12.9 are 
-5 
0 
0 
1 
-2 
0 
0 
1 
- 1 
z + 
"0" 
0 
1 
z = A,z + Bzu 
y = C zZ=[-l 
1 0]Z 
from which the controllability matrix is evaluated as 
[0 
0 
1 
C M Z = [ B Z 
A 2B Z 
A*BZ] = 
0 
1 
-3 
1 -1 
1 
Since the determinant of CMZ is — 1, the system is controllable. 
(12.44a) 
(12.44b) 
(12.45) 
FIGURE 12.9 
Signal-flow 
graph for plant of Example 
12.4 

Chapter 12 
Design via State Space 
We now convert the system to phase variables by first finding the character-
istic equation and using this equation to write the phase-variable form. The 
characteristic equation, det(sl - Az), is 
det(sl - Az) = s3 + 8s2 + 17s + 10 = 0 
(12.46) 
Using the coefficients of Eq. (12.46) and our knowledge of the phase-variable form, 
we write the phase-variable representation of the system as 
x = Axx + Bxw = 
y = [4 1 0]x 
0 
0 
10 
1 
0 
-17 
01 
1 
-8_ 
x + 
[01 
0 
1_ 
(12.47a) 
(12.47b) 
The output equation was written using the coefficients of the numerator of 
Eq. (12.43), since the transfer function must be the same for the two representa-
tions. The controllability matrix, CMX> for the phase-variable system is 
'Mx 
Bx AXBX A..BX 
0 
0 
1 
0 
1 
-8 
11 
- 8 
47 _ 
(12.48) 
Using Eq. (12.39), we can now calculate the transformation matrix between the two 
systems as 
P = CMzCMx = 
r i 
5 
10 
0 
1 
7 
01 
0 
1_ 
(12.49) 
We now design the controller using the phase-variable representation and then 
use Eq. (12.49) to transform the design back to the original representation. For a 
20.8% overshoot and a settling time of 4 seconds, a factor of the characteristic 
equation of the designed closed-loop system is 52 + 2s + 5. Since the closed-loop zero 
will be at s = —4, we choose the third closed-loop pole to cancel the closed-loop zero. 
Hence, the total characteristic equation of the desired closed-loop system is 
D(s) = (s + 4){s2 + 25 4- 5) = s3 + 6s2 + 1¾ + 20 = 0 
(12.50) 
The state equations for the phase-variable form with state-variable feedback are 
x = (Ax - BxKx)x = 
_-(10 + fciJ -(17 + ¾) -(8 + fesJ. 
v = [4 1 0]x 
The characteristic equation for Eqs. (12.51) is 
(12.51a) 
(12.51b) 
det(.sl - (Ax - BXKX)) = s3 + {8 + k3x)s2 + (17 + k2x)s + (10 + kXx) 
( 1 2 5 2 ) 
= 0 
Comparing Eq. (12.50) with (12.52), we see that 
Kx = [/ci.r k2x k3x} = [10 - 4 
- 2 
(12.53) 

12.4 Alternative Approaches to Controller Design 
681 
FIGURE 12.10 Designed 
system with state-variable 
feedback for Example 12.4 
Using Eqs. (12.42) and (12.49), we can transform the controller back to the original 
system as 
K2 = KXP-1 = [-2Q 
10 
- 2 ] 
(12.54) 
The final closed-loop system with state-variable feedback is shown in Figure 12,10, 
with the input applied as shown. 
Let us now verify our design. The state equations for the designed system 
shown in Figure 12.10 with input r are 
z = (A z-B 2K z)z + Bz/- = 
-5 
0 
20 
1 0 
-2 1 
-10 1 
z + 
0 
0 
1 
(12.55a) 
j , = C z z = [ - l 
1 0]z 
(12.55b) 
Using Eq. (3.73) to find the closed-loop transfer function, we obtain 
(s + 4) 
1 
T(s) = s3 + 6s2 + 13s + 20 
5-2+2^ + 5 
(12.56) 
The requirements for our design have been met. 
Students who are using MATLAB should now run chl2p3 in Appendix B. 
MATLAB 
You will learn how to use MATLAB to design a controller for a plant 
^ 
not represented in phase-variable form. You will see that MATLAB 
does not require transformation to phase-variable form. This 
exercise solves Example 12.4 using MATLAB. 
Skill-Assessment Exercise 12.3 
PROBLEM: Design a linear state-feedback controller to yield 20% overshoot and a 
settling time of 2 seconds for a plant, 
m= 
(s + 6) 
[s + 9)(s + 8)(^ + 7) 
WileyPLUS 
CZZ29 
Control Solutions 

682 
Chapter 12 
Design via State Space 
that is represented in state space in cascade form 
z = Az 4- Bw = 
[-7 
1 
0" 
0 
- 8 
1 
0 
0 
- 9 j 
by 
z + 
ro" 
0 
ij 
u 
y=Cz 
= [-l 
1 0]z 
ANSWER: 
K2 = [-40.23 62.24 
-14] 
The complete solution is located at www.wiley.com/college/nise. 
In this section, we saw how to design state-variable feedback for plants not 
represented in phase-variable form. Using controllability matrices, we were able to 
transform a plant to phase-variable form, design the controller, and finally transform the 
controller design back to the plant's original representation. The design of the controller 
relies on the availability of the states for feedback. In the next section, we discuss the 
design of state-variable feedback when some or all of the states are not available. 
( 12.5 Observer Design 
Controller design relies upon access to the state variables for feedback through 
adjustable gains. This access can be provided by hardware. For example, gyros can 
measure position and velocity on a space vehicle. Sometimes it is impractical to use this 
hardware for reasons of cost, accuracy, or availability. For example, in powered flight of 
space vehicles, inertial measuring units can be used to calculate the acceleration. 
However, their alignment deteriorates with time; thus, other means of measuring 
acceleration may be desirable (Rockwell International, 1984). In other applications, 
some of the state variables may not be available at all, or it is too costly to measure them 
or send them to the controller. If the state variables are not available because of system 
configuration or cost, it is possible to estimate the states. Estimated states, rather than 
actual states, are then fed to the controller. One scheme is shown in Figure 12.11(A). 
An observer, sometimes called an estimator, is used to calculate state variables that are 
not accessible from the plant. Here the observer is a model of the plant. 
Let us look at the disadvantages of such a configuration. Assume a plant, 
x = Ax + Bit 
y = Cx 
and an observer, 
x = Ax + Bw 
y = Cx 
Subtracting Eqs. (12.58) from (12.57), we obtain 
x — x = A(x — x) 
y - y = C(x - x) 
(12.57a) 
(12.57b) 
(12.58a) 
(12.58b) 
(12.59a) 
(12.59b) 

12.5 
Observer Design 
6 8 3 
r = 0 + 
+ j i 
Plant 
Observer 
Controller 
Plant 
output, 
y 
Estimated 
output, 
y 
r = 0 + 
+,. 
Estimated 
states, 
x 
Plant 
Plant 
output, 
y 
Observer 
Controller 
(a) 
m 
Estimated 
states, 
x 
Estimated 
Plant 
output, 
output, 
To controller 
(c) 
Estimated 
error 
output 
FIGURE 12.11 
State-feedback 
design using an observer to 
estimate unavailable state 
variables: a. open-loop ob-
server; b. closed-loop observer; 
c exploded view of a closed-
loop observer, showing feed-
back arrangement to reduce 
state-variable estimation error 
Thus, the dynamics of the difference between the actual and estimated states is 
unforced, and if the plant is stable, this difference, due to differences in initial state 
vectors, approaches zero. However, the speed of convergence between the actual 
state and the estimated state is the same as the transient response of the plant since 
the characteristic equation for Eq. (12.59a) is the same as that for Eq. (12.57a). 
Since the convergence is too slow, we seek a way to speed up the observer and 
make its response time much faster than that of the controlled closed-loop system, so 
that, effectively, the controller will receive the estimated states instantaneously. 
To increase the speed of convergence between the actual and estimated states, 
we use feedback, shown conceptually in Figure 12.11(6) and in more detail in 
Figure 12.11(c). The error between the outputs of the plant and the observer is fed 
back to the derivatives of the observer's states. The system corrects to drive this error 
to zero. With feedback we can design a desired transient response into the observer 
that is much quicker than that of the plant or controlled closed-loop system. 
When we implemented the controller, we found that the phase-variable or 
controller canonical form yielded an easy solution for the controller gains. In 
designing an observer, it is the observer canonical form that yields the easy solution 
for the observer gains. Figure 12.12(a) shows an example of a third-order plant 
represented in observer canonical form. In Figure 12.12(6), the plant is configured as 
an observer with the addition of feedback, as previously described. 
The design of the observer is separate from the design of the controller. Similar 
to the design of the controller vector, K, the design of the observer consists of 

684 
Chapter 12 
Design via State Space 
FIGURE 12.12 Third-order observer 
in observer canonical form: 
a. before the addition of 
feedback; b. after the addition 
of feedback 
evaluating the constant vector, L, so that the transient response of the observer is 
faster than the response of the controlled loop in order to yield a rapidly updated 
estimate of the state vector. We now derive the design methodology. 
We will first find the state equations for the error between the actual state 
vector and the estimated state vector, (x - x). Then we will find the characteristic 
equation for the error system and evaluate the required L to meet a rapid transient 
response for the observer. 
Writing the state equations of the observer from Figure 12.11(c), we have 
x = Ax 4- Bw + L(y - y) 
y = Cx 
But the state equations for the plant are 
x = Ax + Bu 
y = Cx 
(12.60a) 
(12.60b) 
(12.61a) 
(12.61b) 

12.5 Observer Design 
685 
Subtracting Eqs. (12.60) from (12.61), we obtain 
(x - x) = A(x - x) - L(v - y) 
(y-y) = C(x-x) 
(12.62a) 
(12.62b) 
where x - x is the error between the actual state vector and the estimated state 
vector, and v - y is the error between the actual output and the estimated out-put. 
Substituting the output equation into the state equation, we obtain the state 
equation for the error between the estimated state vector and the actual state vector: 
(x-x) = (A-LC)(x-x) 
(y-y) = C(x-x) 
Letting ex = (x - x), we have 
ex = (A - LC)e* 
(12.63a) 
(12.63b) 
(12.64a) 
y -1 = Ce, 
(12.64b) 
Equation (12.64a) is unforced. If the eigenvalues are all negative, the estimated 
state vector error, ex, will decay to zero. The design then consists of solving for the 
values of L to yield a desired characteristic equation or response for Eqs. (12.64). The 
characteristic equation is found from Eqs. (12.64) to be 
dotptl - (A - LC)] = 0 
(12.65) 
Now we select the eigenvalues of the observer to yield stability and a desired 
transient response that is faster than the controlled closed-loop response. These 
eigenvalues determine a characteristic equation that we set equal to Eq. (12.65) to 
solve for L. 
Let us demonstrate the procedure for an nth-order plant represented in 
observer canonical form. We first evaluate A — LC. The form of A, L, and C can 
be derived by extrapolating the form of these matrices from a third-order plant, 
which you can derive from Figure 12.12. Thus, 
A-LC = 
r-%-1 i o 
-an-2 
0 1 
-m 
o o 
. -flo 
0 0 
"-(««-1 +/i) 
-(an-2 + h) 
-(ai +/„-i) 
. -(«o + /«) 
0 
••• 
01 
0 
••• 
0 
0 
••• 
1 
0 
••• 
0. 
' 
1 0 
0
-
0 
0 
1 0 - - - 0 
0 0 
0 - - - 1 
0 0 
0 - • 0 
h 1 
h 
4-1 
In J 
-] 
J 
1 0 
0 0 
0] 
(12.66) 

Chapter 12 
Design via State Space 
The characteristic equation for A - LC is 
.^ + ( ^ - 1 + / 0 ^ ^ + ( ^ - 2 + / 2 ^ - 2 
+ («0 + In) = 0 
(«1 +/„-i)5 
(12.67) 
Notice the relationship between Eq. (12.67) and the characteristic equation, 
detfjJ - A) = 0, for the plant, which is 
^ + ^ - 1 ^ - ^ ^ - 2 ^ - 2 
+ a\s + OQ = 0 
(12.68) 
Thus, if desired, Eq. (12.67) can be written by inspection if the plant is represented in 
observer canonical form. We now equate Eq. (12.67) with the desired closed-loop 
observer characteristic equation, which is chosen on the basis of a desired transient 
response. Assume the desired characteristic equation is 
s" + 4 - 1 ^ - 1 + dn-2s"-2 + • • • + du + do = 0 
(12.69) 
We can now solve for the /,'s by equating the coefficients of Eqs. (12.67) and (12.69): 
l, = d„-i - an_i 
/ = 1, 2,..., n 
(12.70) 
Let us demonstrate the design of an observer using the observer canonical form. In 
subsequent sections we will show how to design the observer for other than observer 
canonical form. 
Example 12.5 
Observer Design for Observer Canonical Form 
PROBLEM: Design an observer for the plant 
G(s) = 
4) 
5 + 4 
(s + 1) {s + 2) (s + 5) 
s3 + 852 + 175 + 10 
(12.71) 
which is represented in observer canonical form. The observer will respond 10 times 
faster than the controlled loop designed in Example 12.4. 
SOLUTION: 
1. First represent the estimated plant in observer canonical form. The result is 
shown in Figure 12.13(a). 
2. Now form the difference between the plant's actual output, y, and the observer's 
estimated output, y, and add the feedback paths from this difference to the 
derivative of each state variable. The result is shown in Figure 12.13(6). 
3. Next find the characteristic polynomial. The state equations for the estimated 
plant shown in Figure 12.13(a) are 
x = Ax + Bw = 
j> = C x = [ l 
0 0]x 
-8 
1 0 
-17 0 1 
-10 0 0 
x + 
0 
1 
4 
(12.72a) 
(12.72b) 

12.5 Observer Design 
687 
FIGURE 12.13 
a. Signal-flow graph of a system using observer canonical form variables; b. additional feedback to 
create observer 
From Eqs. (12.64) and (12.66), the observer error is 
ex = (A - LC)ex = 
Using Eq. (12.65), we obtain the characteristic polynomial 
-(8 + /1) 1 0 
-(17+ /2) 0 1 
[-(10 + /3) 0 oj 
s3 + (8 + h)s2 + (17 + i2)s + (lo + /3; 
(12.73) 
(12.74) 
4. Now evaluate the desired polynomial, set the coefficients equal to those of 
Eq. (12.74), and solve for the gains, /,•. From Eq. (12.50), the closed-loop 
controlled system has dominant second-order poles at -1 ±;2. To make our 
observer 10 times faster, we design the observer poles to be at -10 ±/20. We 

688 
Chapter 12 
Design via State Space 
O.i 
0.2 
Time (seconds) 
(a) 
0.3 
FIGURE 12.14 
Simulation showing 
response of observer: a. closed-loop; 
b. open-loop with observer gains 
disconnected 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
-0.1 
-0.2 h 
-0.3 
-0.4 
-0.5 
0 
0.1 
0.2 
Time (seconds) 
(b) 
select the third pole to be 10 times the real part of the dominant second-order 
poles, or —100. Hence, the desired characteristic polynomial is 
(s + 100) (s2 + 20s + 500) = s3 + 120? + 2500s + 50,000 
(12.75) 
Equating Eqs. (12.74) and (12.75), we find h = 112, h = 2483, and /3 = 49,990. 
A simulation of the observer with an input of r(t) = 100? is shown in 
Figure 12.14. The initial conditions of the plant were all zero, and the initial 
condition of X\ was 0.5. 
Since the dominant pole of the observer is -10 ±/20, the expected settling 
time should be about 0.4 second. It is interesting to note the slower response in 
Figure 12.14(b), where the observer gains are disconnected, and the observer is 
simply a copy of the plant with a different initial condition. 
MATLAB 
Students who are using MATLAB should now run chl2p4 inAppendixB. 
You will learn how to use MATLAB to design an observer using pole 
placement. This exercise solves Example 12.5 using MATLAB. 

12.6 
Observability 
6 8 9 
Skill-Assessment Exercise 12.4 
PROBLEM: Design an observer for the plant 
G(s) = 
&±S 
U 
(5 + 7)(5 + 8)(5 + 9) 
whose estimated plant is represented in state space in observer canonical form as 
WileyPLUS 
CJJEJ 
Control Solutions 
x = Ax + Bw = 
-24 1 0 
-191 0 1 
-504 0 0 
y = C x = ! i 
0 0]x 
The observer will respond 10 times faster than the controlled loop designed in Skill-
Assessment Exercise 12.3. 
ANSWER: L = [216 9730 383, 696]T, where T signifies vector transpose 
The complete solution is located at www.wiley.com/college/nise. 
Trylt 12.3 
Use MATLAB, the Control 
System Toolbox, and the 
following statements to solve 
Skill-Assessment Exercise 12.4. 
A=[-24 1 0 
-191 0 1 
-504 0 0] 
C=[l 0 0] 
pos=20 
Ts=2 
z=(-log(pos/100)) I. . . 
( s q r t ( p i A 2 +. . . 
log(pos/100) "2)); 
wn=4/(z*Ts); 
r = r o o t s ([1, 2* z*wn, . . . 
wn"2]); 
poles=10*[r' 10* . . . 
r e a l ( r ( l ) ) ] 
l=acker (A', C, p o l e s ) ' 
In this section, we designed an observer in observer canonical form that uses 
the output of a system to estimate the state variables. In the next section, we examine 
the conditions under which an observer cannot be designed. 
( 
12.6 Observability 
Recall that the ability to control all of the state variables is a requirement for the 
design of a controller. State-variable feedback gains cannot be designed if any state 
variable is uncontrollable. Uncontrollabihty can be viewed best with diagonalized 
systems. The signal-flow graph showed clearly that the uncontrollable state variable 
was not connected to the control signal of the system. 
A similar concept governs our ability to create a design for an observer. 
Specifically, we are using the output of a system to deduce the state variables. If any 
state variable has no effect upon the output, then we cannot evaluate this state 
variable by observing the output. 
The ability to observe a state variable from the output is best seen from the 
diagonalized system. Figure 12.15(a) shows a system where each state variable can 
be observed at the output since each is connected to the output. Figure 12.15(6) is 
an example of a system where all state variables cannot be observed at the output. 
Here X\ is not connected to the output and could not be estimated from a 
measurement of the output. We now make the following definition based upon 
the previous discussion: 
If the initial-state vector, x(/0), can be found from u(t) and y(t) measured over a 
finite interval of time from t0, the system is said to be observable; otherwise the 
system is said to be unobservable. 

690 
Chapter 12 
Design via State Space 
FIGURE 12.15 Comparison of 
a. observable, and b. unobservable 
systems 
Simply stated, observability is the ability to deduce the state variables from a 
knowledge of the input, u{t), and the output, y(t). Pole placement for an observer is a 
viable design technique only for systems that are observable. This section shows how 
to determine, a priori, whether or not pole placement is a viable design technique for 
an observer. 
Observability by Inspection 
We can also explore observability from the output equation of a diagonalized 
system. The output equation for the diagonalized system of Figure 12.15(a) is 
y = Cx=[l 
1 l]x 
(12.76) 
On the other hand, the output equation for the unobservable system of Figure 12.15(Z?) is 
v = Cx=[0 
1 l]x 
(12.77) 
Notice that the first column of Eq. (12.77) is zero. For systems represented in parallel 
form with distinct eigenvalues, if any column of the output coupling matrix is zero, the 
diagonal system is not observable. 

12.6 
Observability 
691 
The Observability Matrix 
Again, as for controllability, systems represented in other than diagonahzed form 
cannot be reliably evaluated for observability by inspection. In order to determine 
observability for systems under any representation or choice of state variables, a 
matrix can be derived that must have a particular property if all state variables are to 
be observed at the output. We now state the requirements for observability, 
including the form, property, and name of this matrix. 
An nth-order plant whose state and output equations are, respectively, 
x = Ax 
y = Cx 
Bu 
is completely observable6 if the matrix 
O M = 
r c "l 
CA 
CA""1. 
(12.78a) 
(12.78b) 
(12.79) 
is of rank n, where OM is called the observability matrix.7 
The following two examples illustrate the use of the observability matrix. 
Example 12.6 
Observability via the Observability Matrix 
PROBLEM: Determine if the system of Figure 12.16 is observable. 
SOLUTION: The state and output equations for the system are 
x = Ax + Bw = 
j/ = C x = [ 0 
5 
l]x 
0 
0 
- 4 
1 
0 
- 3 
0 
1 
-2 
x + 
0 
0 
1 
FIGURE 12.16 System of Example 12.6 
(12.80a) 
(12.80b) 
6 Completely observable means that all state variables are observable. This textbook uses observable to 
mean completely observable. 
7 See Ogata {1990: 706-708) for a derivation. 

692 
Chapter 12 
Design via State Space 
Thus, the observability matrix, OM, is 
O M = 
c 
CA 
CA2 
= 
0 
- 4 
-12 
5 
- 3 
-13 
1 
3 
- 9 
(12.81) 
Since the determinant of OM equals —344, OM is of full rank equal to 3. The 
system is thus observable. 
You might have been misled and concluded by inspection that the system is 
unobservable because the state variable xx is not fed directly to the output. 
Remember that conclusions about observability by inspection are valid only for 
diagonalized systems that have distinct eigenvalues. 
MATLAB 
Students who are using MATLAB should now run chl2p5 in Appendix B. 
A 
You will learn how to use MATLAB to test a system for observabil-
ity. This exercise solves Example 12.6 using MATLAB. 
Example 12.7 
Unobservability via the Observability Matrix 
PROBLEM: Determine whether the system of Figure 12.17 is observable. 
FIGURE 12.17 
System of Example 12.7 
SOLUTION: The state and output equations for the system are 
x = Ax + Bw = 
0 
1 
[-5 
-21/4 J 
y = Cx=[5 4]x 
The observability matrix, OM, for this system is 
O M = 
C 
CA 
5 
4 
-20 
-16 
(12.82a) 
(12.82b) 
(12.83) 

12.7 Alternative Approaches to Observer Design 
693 
The determinant for this observability matrix equals 0. Thus, the observability 
matrix does not have full rank, and the system is not observable. 
Again, you might conclude by inspection that the system is observable 
because all states feed the output. Remember that observability by inspection 
is valid only for a diagonalized representation of a system with distinct 
eigenvalues. 
Skill-Assessment Exercise 12.5 
PROBLEM: Determine whether the system 
x = Ax + Bu = 
-2 
-1 
-3 
0 -2 
1 
-7 
-8 
-9 
y = C x = [ 4 
6 8]x 
x + 
is observable. 
ANSWER: Observable 
The complete solution is located at www.wiley.com/college/nise. 
Trylt 12.4 
Use MATLAB, the Control 
System Toolbox, and the 
following statements to solve 
Skill-Assessment Exercise 12.5. 
A = [-2 - 1 -3 
0 - 2 
1 
-7 -8 -9] 
C=[4 6 8] 
Om=obsv(A, C) 
Rank=rank(Om) 
Now that we have discussed observability and the observability matrix, we are 
ready to talk about the design of an observer for a plant not represented in observer 
canonical form. 
( 
12.7 Alternative Approaches 
to Observer Design 
Earlier in the chapter, we discussed how to design controllers for systems not 
represented in phase-variable form. One method is to match the coefficients of 
det[sl - (A - BK)] with the coefficients of the desired characteristic polynomial. 
This method can yield difficult calculations for higher-order systems. Another 
method is to transform the plant to phase-variable form, design the controller, 
and transfer the design back to its original representation. The transformations were 
derived from the controllability matrix. 
In this section, we use a similar idea for the design of observers not re-
presented in observer canonical form. One method is to match the coefficients of 
det^I — (A — LC)] with the coefficients of the desired characteristic polynomial. 
Again, this method can yield difficult calculations for higher-order systems. 
Another method is first to transform the plant to observer canonical form so that 
the design equations are simple, then perform the design in observer canonical 
form, and finally transform the design back to the original representation. 
Let us pursue this second method. First we will derive the transformation 
between a system representation and its representation in observer canonical form. 

Chapter 12 
Design via State Space 
Assume a plant not represented in observer canonical form, 
z = Az + Bw 
y = Cz 
whose observability matrix is 
C 
CA 
CA2 
(12.84a) 
(12.84b) 
OMZ 
(12.85) 
CA""2 
CA"-1 
Now assume that the system can be transformed to the observer canonical 
form, x, with the transformation 
z = Px 
(12.86) 
Substituting Eq. (12.86) into Eqs. (12.84) and premultiplying the state equation by 
P_1, we find that the state equations in observer canonical form are 
x = P 1APx + P1Bw 
y = CPx 
whose observability matrix, OMX, is 
CP 
CP(P1AP) 
CP(P1AP)(P~1AP) 
(12.87a) 
(12.87b) 
O Mx = 
-1 
P) 
(P_1AP)_ 
= 
r c i 
CA 
CA2 
.CA"-1. 
p 
(12.88) 
_CP(P-1AP)(P-1AP) 
Substituting Eq. (12.85) into (12.88) and solving for P, we obtain 
P — °Mz OMX 
(12.89) 
Thus, the transformation, P, can be found from the two observability matrices. 
After transforming the plant to observer canonical form, we design the feed-
back gains, Lx, as in Section 12.5. Using the matrices from Eqs. (12.87) and the form 
suggested by Eqs. (12.64), we have 
»-i 
ex = (P'AP - LxCP)e, 
v - y = CPex 
(12.90a) 
(12.90b) 
Since x = P_1z, and x = P 1f, then ex = x - x = P 1ez. Substituting ex = P lex into 
Eqs. (12.90) transforms Eqs. (12.90) back to the original representation. The result is 
ez = (A - PLxC)ez 
y - y = Cez 
(12.91a) 
(12.91b) 

12.7 Alternative Approaches to Observer Design 
695 
Comparing Eq. (12.91a) to (12.64a), we see that the observer gain vector is 
Lz = LPX 
(12.92) 
We now demonstrate the design of an observer for a plant not represented in 
observer canonical form. The first example uses transformations to and from observer 
canonical form. The second example matches coefficients without the transformation. 
This method, however, can become difficult if the system order is high. 
Example 12.8 
Observer Design by Transformation 
PROBLEM: Design an observer for the plant 
1 
G(s) = {s + l)(s + 2){s + 5) 
(12.93) 
represented in cascade form. The closed-loop performance of the observer is 
governed by the characteristic polynomial used in Example 12.5: s5 + 120s2+ 
2500^ + 50,000. 
SOLUTION: First represent the plant in its original cascade form. 
z = Az + B« = 
y = Cz = [l 
0 0]z 
The observability matrix, OMZ, is 
- 5 
0 
0 
1 
- 2 
0 
0] 
1 
- 1 
z + 
roi 
0 
_i_ 
o Mz = 
c 
CA 
CA2 
1 
- 5 
25 
0 
1 
- 7 
0 
0 
1 
(12.94a) 
(12.94b) 
(12.95) 
whose determinant equals 1. Hence, the plant is observable. 
The characteristic equation for the plant is 
det(sl - A) = s3 + 8s2 + 17s + 10 = 0 
(12.96) 
We can use the coefficients of this characteristic polynomial to form the observer 
canonical form: 
x = Axx 4- BXM 
y = cxx 
(12.97a) 
(12.97b) 
where 
- 8 
-17 
-10 
1 
0 
0 
0 
1 
0 
C« = [l 
0 0 
(12.98) 

Chapter 12 
Design via State Space 
The observability matrix for the observer canonical form is 
OMX = 
cx " 
^-x"x 
C*< 
= 
r i 
-8 
47 
0 0 
1 0 
-8 1 
(12.99) 
We now design the observer for the observer canonical form. First form 
(Ax — LxCxJ, 
-8 
1 0" 
-17 0 1 
-10 0 0j 
- pi] 
k 
. / 3 . 
JL/x^-'\ — 
whose characteristic polynomial is 
1 
0 01 = 
-(8 + /0 
1 0' 
- ( 1 7 + /2) 
0 1 
-(IO + /3) 0 0 
(12.100) 
det[jl - (A, - LXCX)] = s3 + (8 + h)s2 + (17 + h)s + (10 + /3) 
(12.101) 
Equating this polynomial to the desired closed-loop observer characteristic 
equation, s3 + 120s2 + 2500s + 50,000, we find 
U = 
112 
2483 
49,990 
(12.102) 
Now transform the design back to the original representation. Using 
Eq. (12.89), the transformation matrix is 
P = 0 * * 0 » 
Transforming Lx to the original representation, we obtain 
1 
-3 
1 
0 
1 
-1 
ol 
0 
1 
(12.103) 
U = PL, = 
112 
2147 
47,619 
(12.104) 
The final configuration is shown in Figure 12.18. 
A simulation of the observer is shown in Figure 12.19(a). To demonstrate the 
effect of the observer design, Figure 12.19(6) shows the reduced speed if the 
observer is simply a copy of the plant and all observer feedback paths are 
disconnected. 
Students who are using MATLAB should now run chl2p6 in Appendix B. 
You will learn how to use MATLAB to design an observer for a plant 
not represented in observer canonical form. You will see that 
MATLAB does not require transformation to observer canonical 
form. This exercise solves Example 12.8 using MATLAB. 

12.7 Alternative Approaches to Observer Design 
697 
11 
T 1 
1 
1 
s 
1 
-1 
1 
s 
1 
\ 
_1 
0.6 
0.4 
0.2 
* 
0 
-0.2 
-0.4 
-0.6 
i 
_ y 
-
) 
i 
0.6 
0.4 
0.2 
* 
0 
-0.2 
-0.4 
( 
V 
y 
j 
Plant 
1 
1 
S 
1 
5 
1 
xy^VT^r 
- 2 
- 5 
1 
1 
s
i
s 
1 
V 
1 ^2 
\ 
/ ' 
( 
\ - 2 
\ 5 
^Sj? 
2,147 
.
/ 
47,619 
Observer 
1 
2 
Time (seconds) 
(a) 
i 
i 
1 
2 
Time (seconds) 
(b) 
T 1 
-1 
J 
J e-
3 
i 
t, 
3 
FIGURE 12.18 
Observer 
design 
FIGURE 12.19 
Observer 
design step response 
simulation: a. closed-loop 
observer; b. open-loop 
observer with observer gains 
disconnected 

698 
Chapter 12 
Design via State Space 
Example 12.9 
Observer Design by Matching Coefficients 
PROBLEM: A time-scaled model for the body's blood glucose level is shown in Eq. 
(12.105). The output is the deviation in glucose concentration from its mean value 
in mg/100 ml, and the input is the intravenous glucose injection rate in g/kg/hr 
(Milhorn, 1966). 
G(s) = 
407(^ + 0.916) 
> + 1.27)(5 + 2.69) 
(12.105) 
Design an observer for the phase variables with a transient response described by 
$ = 0.7 and con = 100. 
SOLUTION: We can first model the plant in phase-variable form. The result is 
shown in Figure 12.20(a). 
For the plant, 
A = 
0 
1 
-3.42 
-3.96 
C = [372.81 407" 
(12.106) 
-3.42 
407 
FIGURE 12.20 
a. Plant; 
b. designed observer for 
Example 12.9 
— O J 

12.7 Alternative Approaches to Observer Design 
699 
Calculation of the observability matrix, OM = [ C CA ]T, shows that the plant is 
observable and we can proceed with the design. Next find the characteristic 
equation of the observer. First we have 
A - L C = 
'372.81 407 
0 
1 
h 
-3.42 -3.96 
/ 2 j 
-372.81/1 
(l-407/i) 
[-(3.42+ 372.81/2) -(3.96 + 407/2) J 
,., 2 1 0 7 ) 
Now evaluate det[XI - (A - LC)] = 0 in order to obtain the characteristic equation: 
, f (k + 372.81/0 
-(l-407/i) 
1 
det[,I - (A - LC)] = det ^ 
+ ^ 
^ + j % + 
^ 
= k2 + (3.96 + 372.81/i + 407/2)X + (3.42 + 84.39/i + 372.81¾) 
= 0 
(12.108) 
From the problem statement, we want £ = 0.7 and con = 100. Thus, 
X2 + U0X + 10,000 = 0 
(12.109) 
Comparing the coefficients of Eqs. (12.108) and (12.109), we find the values l\ and 
l2 to be -38.397 and 35.506, respectively. Using Eq. (12.60), where 
A = 
L = 
0 
1 
-3.42 
-3.96 
-38.397 
35.506 
B 
C = [372.81 4071; 
(12.110) 
the observer is implemented and shown in Figure 12.20(b). 
Skill-Assessment Exercise 12.6 
PROBLEM: Design an observer for the plant 
1 
G(s) = 
whose estimated plant is represented in state space in cascade form as 
z = Az + Bw = 
-7 
1 
0 
0 -8 
1 
0 
0 
-9 
y =Cx= [1 0 0]z 
z + 
The closed-loop step response of the observer is to have 10% overshoot with a 0.1 
second settling time. 
WileyPLUS 
CJHJ 
Control Solutions 

700 
Chapter 12 
Design via State Space 
Lz = 
456 
" 
28,640 
1.54 x 106 _ 
The complete solution is located at www.wiley.com/college/nise. 
Now that we have explored transient response design using state-space 
techniques, let us turn to the design of steady-state error characteristics. 
£ 12.8 Steady-State Error Design via Integral Control 
In Section 7.8, we discussed how to analyze systems represented in state space for 
steady-state error. In this section, we discuss how to design systems represented in 
state space for steady-state error. 
Consider Figure 12.21. The previously designed controller discussed in Section 
12.2 is shown inside the dashed box. A feedback path from the output has been 
added to form the error, e, which is fed forward to the controlled plant via an 
integrator. The integrator increases the system type and reduces the previous finite 
error to zero. We will now derive the form of the state equations for the system of 
Figure 12.21 and then use that form to design a controller. Thus, we will be able to 
design a system for zero steady-state error for a step input as well as design the 
desired transient response. 
An additional state variable, x^, has been added at the output of the leftmost 
integrator. The error is the derivative of this variable. Now, from Figure 12.21, 
XN = r - Cx 
Writing the state equations from Figure 12.21, we have 
x = Ax + Bw 
XN = —Cx + r 
y = Cx 
(12.111) 
(12.112a) 
(12.112b) 
(12.112c) 
FIGURE 12.21 Integral control 
for steady-state error design 
-&&-* 
B 
-K 

12.8 Steady-State Error Design via Integral Control 
701 
Eqs. (12.112) can be written as augmented vectors and matrices. Hence, 
x 
A 
0 
- C 
0 
x 
lxN J + 
U + 
y = [C 
0] 
x 
XN 
But 
X 
XN 
u = -Kx + KSXN = - [ K 
-Ke 
Substituting Eq. (12.114) into (12.113a) and simplifying, we obtain 
(12.113a) 
(12.113b) 
(12.114) 
(12.115a) 
(12.115b) 
Thus, the system type has been increased, and we can use the characteristic equation 
associated with Eq. (12.115a) to design K and Ke to yield the desired transient 
response. Realize, we now have an additional pole to place. The effect on the 
transient response of any closed-loop zeros in the final design must also be taken into 
consideration. One possible assumption is that the closed-loop zeros will be the same 
as those of the open-loop plant. This assumption, which of course must be checked, 
suggests placing higher-order poles at the closed-loop zero locations. Let us dem-
onstrate with an example. 
X 1 
XN . = f(A-BK) 
BKe] 
- C 
0 
r x 
+ [°1 
1 r 
y=[C 
0] r x 1 
XN 
Example 12.10 
Design of Integral Control 
PROBLEM: Consider the plant of Eqs. (12.116): 
0 
1 
- 3 
- 5 
y-41 0]x 
x = 
(12.116a) 
(12.116b) 
a. Design a controller without integral control to yield a 10% overshoot and a 
settling time of 0.5 second. Evaluate the steady-state error for a unit step 
input. 
b. Repeat the design of (a) using integral control. Evaluate the steady-state 
error for a unit step input. 
SOLUTION: 
a. Using the requirements for settling time and percent overshoot, we find that 
the desired characteristic polynomial is 
52 + 165 + 183.1 
(12.117) 

702 
Chapter 12 
Design via State Space 
Since the plant is represented in phase-variable form, the characteristic polyno-
mial for the controlled plant with state-variable feedback is 
s2 + (5 + k2)s + (3 + kl) 
(12.118) 
Equating the coefficients of Eqs. (12.117) and (12.118), we have 
K=[h 
k2} = [180.1 11] 
(12.119) 
From Eqs. (12.3), the controlled plant with state-variable feedback represented in 
phase-variable form is 
x = (A - BK)x + Br = 
0 
1 
-183.1 -16 
(12.120a) 
y = Cx = [l 0]x 
(12.120b) 
Using Eq. (7.96), we find that the steady-state error for a step input is 
e(oo) = 1 + C(A-BK)_1B 
0 
1 
_-183.1 
-16 
= 0.995 
= 1 + 11 0 
-
! T 
(12.121) 
b. We now use Eqs. (12.115) to represent the integral-controlled plant as 
follows: 
pr 
X2 
.%. 
= 17 I 
r o 
.-3 
1 " 
-5 J 
[1 
[01 
.1. 
0] 
[h k2 
0 
-(3 + fci) 
- 1 
1 
0 " 
-(5 +£2) 
Ke 
0 
0 
M 1 
x2 
XN 
+ 
[0 
0 
1 
= [1 
0 
0 
x\ 
x2 
XN 
[0" 
.ij Ke 
0 
\ Xi " 
x2 
_XN_ 
+ 
[01 
0 
.1. 
(12.122a) 
(12.122b) 
Using Eq. (3.73) and the plant of Eqs. (12.116), we find that the transfer 
function of the plant is G(s) = l/(s2 + 5s + 3). The desired characteristic polyno-
mial for the closed-loop integral-controlled system is shown in Eq. (12.117). Since 
the plant has no zeros, we assume no zeros for the closed-loop system and augment 
Eq. (12.117) with a third pole, (s + 100), which has a real part greater than five 
times that of the desired dominant second-order poles. The desired third-order 
closed-loop system characteristic polynomial is 
(s + 100)(^2 + 16s + 183.1) = s3 + 116s2 + 1783.1s + 18,310 
The characteristic polynomial for the system of Eqs. (12.112) is 
(12.123) 
s3 + (5 + k2)s2 + (3 + ki)s + Ke 
(12.124) 

12.8 Steady-State Error Design via Integral Control 
Matching coefficients from Eqs. (12.123) and (12.124), we obtain 
(12.125a) 
703 
fci = 1780.1 
^2 = 111 
ke = 18,310 
(12.125b) 
(12.125c) 
Substituting these values into Eqs. (12.122) yields this closed-loop integral-
controlled system: 
X2 
UJVJ 
0 
1 
0 
-1783.1 -116 18,310 
-
1
0 
0 
"Xi ' 
x2 
.XN. 
+ 
"0" 
0 
.lj 
y = [ l 
0 0] 
x\ 
x2 
xN 
(12.126a) 
(12.126b) 
In order to check our assumption for the zero, we now apply Eq. (3.73) to 
Eqs. (12.126) and find the closed-loop transfer function to be 
T(s) = 
18,310 
s3 + U6s2 + 1783.1*+ 18,310 
(12.127) 
Since the transfer function matches our design, we have the desired transient 
response. 
Now let us find the steady-state error for a unit step input. Applying 
Eq. (7.96) to Eqs. (12.126), we obtain 
e(oo) = l + [l 0 0] 
Thus, the system behaves like a Type 1 system. 
0 
1 
0 
-1783.1 -116 18,310 
-
1
0 
0 
1 _1 "0" 
0 
1 
= 0 
(12.128) 
0 
-7 
1 
- 9 j x + r° 
i 
Skill-Assessment Exercise 12.7 
PROBLEM: Design an integral controller for the plant 
\ 0 
x = 
- 7 
-
v = [4 l]x 
to yield a step response with 10% overshoot, a peak time of 2 seconds, and zero 
steady-state error. 
ANSWER: K = [2.21 -2.7], Ke = 3.79 
The complete solution is located at www.wiley.com/college/nise. 

704 
Chapter 12 
Design via State Space 
Now that we have designed controllers and observers for transient response 
and steady-state error, we summarize the chapter with a case study demonstrating 
the design process. 
Design 
Case Study 
Antenna Control: Design of Controller and Observer 
In this case study, we use our ongoing antenna azimuth position control system to 
demonstrate the combined design of a controller and an observer. We will assume 
that the states are not available and must be estimated from the output. The block 
diagram of the original system is shown on the front endpapers, Configuration 1. 
Arbitrarily setting the preamplifier gain to 200 and removing the existing feedback, 
the forward transfer function is simplified to that shown in Figure 12.22. 
(/(*•) = E(s) 
1325 
s(s+\.7\)(s+ 100) 
Y(s) = 0„(.v) 
FIGURE 12.22 Simplified block diagram of antenna control system shown on the front 
endpapers (Configuration 1) with K = 200 
The case study will specify a transient response for the system and a faster 
transient response for the observer. The final design configuration will consist of 
the plant, the observer, and the controller, as shown conceptually in Figure 12.23. 
The design of the observer and the controller will be separate. 
Plant 
r = 0 + ^ 
M 
B 
+ 
U 
B 
7\ 
9 
+ x~ 
+ 
X 
X 
/ 
A 
Observer 
/ 
A 
L 
Controllei 
-K 
3 £ 
X 
s 
J 
C 
c 
^ f y * - 
y 
1 V 
ye 
FIGURE 12.23 Conceptual state-space design configuration, showing plant, observer, and 
controller 

Case Study 
705 
PROBLEM: Using the simplified block diagram of the plant for the antenna 
azimuth position control system shown in Figure 12.22, design a controller to yield 
a 10% overshoot and a settling time of 1 second. Place the third pole 10 times as 
far from the imaginary axis as the second-order dominant pair. 
Assume that the state variables of the plant are not accessible and design an 
observer to estimate the states. The desired transient response for the observer is a 
10% overshoot and a natural frequency 10 times as great as the system response 
above. As in the case of the controller, place the third pole 10 times as far from the 
imaginary axis as the observer's dominant second-order pair. 
SOLUTION: Controller Design: We first design the controller by finding the desired 
characteristic equation. A 10% overshoot and a settling time of 1 second yield 
£ = 0.591 and con — 6.77. Thus, the characteristic equation for the dominant poles is 
s2 + 8s + 45.8 = 0, where the dominant poles are located at -4 ±/5.46. The third 
pole will be 10 times as far from the imaginary axis, or at —40. Hence, the desired 
characteristic equation for the closed-loop system is 
(s2 + 8s + 45.8)(5 + 40) = s3 + 48s2 + 365.85 + 1832 = 0 
(12.129) 
Next we find the actual characteristic equation of the closed-loop system. The 
first step is to model the closed-loop system in state space and then find its 
characteristic equation. From Figure 12.22, the transfer function of the plant is 
G(s) = 
1325 
1325 
(12.130) 
s(s + 1.71)(5 + 100) 
s{s2 + 101.715 + 171) 
Using phase variables, this transfer function is converted to the signal-flow graph 
shown in Figure 12.24, and the state equations are written as follows: 
x = 
0 
1 
0 
0 
0 -171 
0 
1 
-101.71 
x + 
0" 
0 
1 
u = Ax + Bw 
(12.131a) 
y = [1325 0 0]x = Cx 
(12.131b) 
We now pause in our design to evaluate the controllability of the system. The 
controllability matrix, CM, is 
0 
0 
1 
0 
1 
-101.71 
(12.132) 
1 -101.71 10,173.92 
C M = [ B 
AB A2B 
The determinant of CM is - 1 ; thus, the system is controllable. 
l 
l 
1 
7 
s 
O 
«• 
O 
" 
O 
"
—
O 
* 
O 
325 
-o 
FIGURE 12.24 
Signal-flow graph for 
G(s) = 1325/ [s(s2 + 101.71s + 171)] 

706 
Chapter 12 
Design via State Space 
FIGURE 12.25 Plant with state-variable feedback for controller design 
Continuing with the design of the controller, we show the controller's configu-
ration with the feedback from all state variables in Figure 12.25. We now find the 
characteristic equation of the system of Figure 12.25. From Eq. (12.7) and Eq. 
(12.131a), the system matrix, A — BK, is 
A - B K = 
0 
1 
0 
0 
0 
1 
[-ki 
-(171 + ¾) 
-(101.71+¾)] 
(12.133) 
Thus, the closed-loop system's characteristic equation is 
det[sl - (A - BK)] = s3 + (101.71 + k3)s2 + (171 + k2)s + % = 0 
(12.134) 
Matching the coefficients of Eq. (12.129) with those of Eq. (12.134), we evaluate 
the fc/s as follows: 
ki = 1832 
k2 = 194.8 
h = -53.71 
(12.135a) 
(12.135b) 
(12.135c) 
Observer Design: Before designing the observer, we test the system for observability. 
Using the A and C matrices from Eqs. (12.131), the observability matrix, OM, is 
O M = 
c 
CA 
CA2 
= 
1325 
0 
0 
0 
1325 
0 
0 
0 
1325 
(12.136) 
The determinant of OM is 13253. Thus, OM is of rank 3, and the system is observable. 
We now proceed to design the observer. Since the order of the system is not high, we 
will design the observer directly without first converting to observer canonical form. 
From Eq. (12.64a) we need first to find A - LC. A and C from Eqs. (12.131) along with 
L = 
(12.137) 

Case Study 
707 
are used to evaluate A — LC as follows: 
[-1325/i 
1 
0 
1 
A - L C = 
-1325/2 
0 
1 
(12.138) 
-1325/3 
-171 -101.71 _ 
The characteristic equation for the observer is now evaluated as 
detpd - (A - LC)] = A3 + (132¾ + 101.71)A2 
+ (134,800/i + 1325/2 + 171) A 
+ (226,600/i + 134,800/2 + 1325/3) 
= 0 
(12.139) 
From the problem statement, the poles of the observer are to be placed to 
yield a 10% overshoot and a natural frequency 10 times that of the system's 
dominant pair of poles. Thus, the observer's dominant poles yield [s2 + (2 x 0.591 
x 67.7)5 + 67.72] = (s2 + 80s + 4583). The real part of the roots of this polynomial 
is —40. The third pole is then placed 10 times farther from the imaginary axis at 
-400. The composite characteristic equation for the observer is 
{s2 + 805 + 4583)(5 + 400) = s3 + 480s2 + 36,5805 + 1,833,000 = 0 
(12.140) 
Matching coefficients from Eqs. (12.139) and (12.140), we solve for the observer 
gains: 
/i = 0.286 
(12.141a) 
h = -1-57 
(12.141b) 
h = 1494 
(12.141c) 
Figure 12.26, which follows the general configuration of Figure 12.23, shows the 
completed design, including the controller and the observer. 
Observer 
/ , = 1494 
FIGURE 12.26 
Completed state-
space design for the antenna 
azimuth position control 
system, showing controller 
and observer 

Chapter 12 
Design via State Space 
0 
0.2 0.4 
0.6 
0.8 
1 
1.2 
1.4 
1.6 
1.8 
2.0 
Time (seconds) 
(a) 
FIGURE 12.27 Designed response 
of antenna azimuth position 
control system: a. impulse 
response—plant and observer 
with the same initial conditions, 
x\ (0) = x\ (0) = 0; b. portion of 
impulse response—plant and 
observer with different initial 
conditions, 1¾ (0) = 0.006 for the 
plant, x\ (0) = 0 for the observer 
0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 
Time (seconds) 
(b) 
0.1 
The results of the design are shown in Figure 12.27. Figure 12.27(a) shows the 
impulse response of the closed-loop system without any difference between the 
plant and its modeling as an observer. The undershoot and settling time approxi-
mately meet the requirements set forth in the problem statement of 10% and 
1 second, respectively. In Figure 12.27(b), we see the response designed into 
the observer. An initial condition of 0.006 was given to X\ in the plant to make 
the modeling of the plant and observer different. Notice that the observer's 
response follows the plant's response by the time 0.06 second is reached. 
CHALLENGE: You are now given a case study to test your knowledge of this 
chapter's objectives: You are given the antenna azimuth position control system 
shown on the front endpapers, Configuration 3. If the preamplifier gain K = 20, do 
the following: 
a. Design a controller to yield 15% overshoot and a settling time of 2 seconds. 
Place the third pole 10 times as far from the imaginary axis as the second-order 
dominant pole pair. Use physical variables as follows: power amplifier output, 
motor angular velocity, and motor displacement. 
b. Redraw the schematic shown on the front endpapers, showing a tachometer that 
yields rate feedback along with any added gains or attenuators required to 
implement the state-variable feedback gains. 

Summary 
709 
c. Assume that the tachometer is not available to provide rate feedback. Design an 
observer to estimate the physical variables' states. The observer will respond 
with 10% overshoot and a natural frequency 10 times as great as the system 
response. Place the observer's third pole 10 times as far from the imaginary axis 
as the observer's dominant second-order pole pair. 
d. Redraw the schematic on the front endpapers, showing the implementation of 
the controller and the observer. 
e. Repeat P a r t s a and c u s i n g MATLAB. 
^ Summary^ 
This chapter has followed the path established by Chapters 9 and 11—control system 
design. Chapter 9 used root locus techniques to design a control system with a 
desired transient response. Sinusoidal frequency response techniques for design 
were covered in Chapter 11, and in this chapter we used state-space design 
techniques. 
State-space design consists of specifying the system's desired pole locations 
and then designing a controller consisting of state-variable feedback gains to meet 
these requirements. If the state variables are not available, an observer is designed to 
emulate the plant and provide estimated state variables. 
Controller design consists of feeding back the state variables to the input, u, 
of the system through specified gains. The values of these gains are found 
by matching the coefficients of the system's characteristic equation with the 
coefficients of the desired characteristic equation. In some cases the control 
signal, u, cannot affect one or more state variables. We call such a system 
uncontrollable. For this system, a total design is not possible. Using the controlla-
bility matrix, a designer can tell whether or not a system is controllable prior to 
the design. 
Observer design consists of feeding back the error between the actual output 
and the estimated output. This error is fed back through specified gains to the 
derivatives of the estimated state variables. The values of these gains are also found 
by matching the coefficients of the observer's characteristic equation with the 
coefficients of the desired characteristic equation. The response of the observer 
is designed to be faster than that of the controller, so the estimated state variables 
effectively appear instantaneously at the controller. For some systems, the state 
variables cannot be deduced from the output of the system, as is required by the 
observer. We call such systems unobservable. Using the observability matrix, the 
designer can tell whether or not a system is observable. Observers can be designed 
only for observable systems. 
Finally, we discussed ways of improving the steady-state error performance of 
systems represented in state space. The addition of an integration before the 
controlled plant yields improvement in the steady-state error. In this chapter, 
this additional integration was incorporated into the controller design. 
Three advantages of state-space design are apparent. First, in contrast to the 
root locus method, all pole locations can be specified to ensure a negligible effect of 
MATLAB 
«
1
» 

Chapter 12 
Design via State Space 
the nondominant poles upon the transient response. With the root locus, we were 
forced to justify an assumption that the nondominant poles did not appreciably 
affect the transient response. We were not always able to do so. Second, with the use 
of an observer, we are no longer forced to acquire the actual system variables for 
feedback. The advantage here is that sometimes the variables cannot be physically 
accessed, or it may be too expensive to provide that access. Finally, the methods 
shown lend themselves to design automation using the digital computer. 
A disadvantage of the design methods covered in this chapter is the designer's 
inability to design the location of open- or closed-loop zeros that may affect the 
transient response. In root locus or frequency response design, the zeros of the lag or 
lead compensator can be specified. Another disadvantage of state-space methods 
concerns the designer's ability to relate all pole locations to the desired response; this 
relationship is not always apparent. Also, once the design is completed, we may not 
be satisfied with the sensitivity to parameter changes. 
Finally, as previously discussed, state-space techniques do not satisfy our 
intuition as much as root locus techniques, where the effect of parameter changes 
can be immediately seen as changes in closed-loop pole locations. 
In the next chapter we return to the frequency domain and design digital 
systems using gain adjustment and cascade compensation. 
(^ Review Questions ^ 
1. Briefly describe an advantage that state-space techniques have over root locus 
techniques in the placement of closed-loop poles for transient response design. 
2. Briefly describe the design procedure for a controller. 
3. Different signal-flow graphs can represent the same system. Which form facili-
tates the calculation of the variable gains during controller design? 
4. In order to effect a complete controller design, a system must be controllable. 
Describe the physical meaning of controllability. 
5. Under what conditions can inspection of the signal-flow graph of a system yield 
immediate determination of controllability? 
6. In order to determine controllability mathematically, the controllability matrix 
is formed, and its rank evaluated. What is the final step in determining 
controllability if the controllability matrix is a square matrix? 
7. What is an observer? 
8. Under what conditions would you use an observer in your state-space design of a 
control system? 
9. Briefly describe the configuration of an observer. 
10. What plant representation lends itself to easier design of an observer? 
11. Briefly describe the design technique for an observer, given the configuration 
you described in Question 9. 
12. Compare the major difference in the transient response of an observer to that of 
a controller. Why does this difference exist? 
13. From what equation do we find the characteristic equation of the controller-
compensated system? 
14. From what equation do we find the characteristic equation of the observer? 

Problems 
15. In order to effect a complete observer design, a system must be observable. 
Describe the physical meaning of observability. 
16. Under what conditions can inspection of the signal-flow graph of a system yield 
immediate determination of observability? 
17. In order to determine observability mathematically, the observability matrix is 
formed and its rank evaluated. What is the final step in determining observ-
ability if the observability matrix is a square matrix? 
Problems 
1. Consider the following open-loop transfer func-
tions, where G(s) = Y(s)/U(s), 
Y(s) is the Laplace 
transform of the output, and U(s) is the Laplace 
transform of the input control signal: 
i. G(s) = 
ii. G(s) = 
iii. G(s) = 
iv. G{s) = 
(* + 3) 
5 + 4)2 
s 
(s 
5)(s + l) 
20s(s + 7) 
(5 + 3)(5 + 7)(5 + 9) 
30(5 + 2)(5 + 3) 
(5 + 4)(5 + 5)(5 + 6) 
v. G(s) = 
85 + 15 
(52+ 45+ 10)(52+35+ 12) 
For each of these transfer functions, do the follow-
ing: [Section: 12.2] 
a. Draw the signal-flow graph in phase-variable 
form. 
b. Add state-variable feedback to the signal-flow 
graph. 
c. For each closed-loop signal-flow graph, write the 
state equations. 
d. Write, by inspection, the closed-loop transfer 
function, T(s), for your closed-loop signal-flow 
graphs. 
e. Verify your answers for T(s) by finding the 
closed-loop transfer functions from the state 
equations and Eq. (3.73). 
2. The following open-loop transfer 
wileypius 
functions can be represented by 
> Y i ' i « 
signal-flow graphs in cascade form. 
control solutions 
i. G(s) = 30(5 + 2)(5 + 7) 
5(5 + 3)(5 + 5) 
.. 
5(5 2+35+ 7) 
n * ° ^ 
(5 + 2)(5
2 + 25 +10) 
For each, do the following: [Section: 12.4] 
a. Draw the signal-flow graph and show the state-
variable feedback. 
b. Find the closed-loop transfer function with state-
variable feedback. 
3. The following open-loop transfer functions can be 
represented by signal-flow graphs in parallel form. 
i i . 
G{s) = 
G(s) = 
50(52 + 75 + 25) 
5(5 + 10)(5 + 20) 
50(5 + 3)(5 + 4) 
(5 + 5)(5 + 6)(5 + 7) 
For each, do the following: [Section: 12.4] 
a. Draw the signal-flow graph and show the state-
variable feedback. 
b. Find the closed-loop transfer function with state-
variable feedback. 
4. Given the following open-loop plant, [Section: 12.2] 
20 
G(s) = 5 + 2)(5+4)(5 + 8) 
design a controller to yield a 15% overshoot and a 
settling time of 0.75 second. Place the third pole 10 
times as far from the imaginary axis as the dominant 
pole pair. Use the phase variables for state-variable 
feedback. 
5. Section 12.2 showed that controller design is easier 
to implement if the uncompensated system is rep-
resented in phase-variable form with its typical 
lower companion matrix. We alluded to the fact 
that the design can just as easily progress using the 
controller canonical form with its upper companion 
matrix. [Section: 12.2] 

712 
Chapter 12 
Design via State Space 
-1 
FIGURE P12.1 
a. Redo the general controller design covered in 
Section 12.2, assuming that the plant is repre-
sented in controller canonical form rather than 
phase-variable form. 
b. Apply your derivation to Example 12.1 if the 
uncompensated plant is represented in controller 
canonical form. 
6. Given the following open-loop plant: 
[Section: 12.2] 
WileyPLUS 
Control Solutions 
G(s) = 100(^ + 2)(5 + 20) 
(5 + 1)(5 + 3)(5 + 4) 
design a controller to yield 15% overshoot with a 
peak time of 0.5 second. Use the controller canoni-
cal form for state-variable feedback. 
7. Given the following open-loop plant: [Section: 12.2] 
G{s) = 
20(5 + 2) 
5(5 + 5)(5 + 7) 
design a controller to yield a 10% overshoot and a 
settling time of 2 seconds. Place the third pole 10 times 
as far from the imaginary axis as the dominant pole pair. 
Use the phase variables for state-variable feedback. 
8. Repeat Problem 4 assuming that the plant is repre-
sented in the cascade form. Do not convert to phase-
variable form. [Section: 12.4] 
9. Repeat Problem 7 assuming that the plant is repre-
sented in the parallel form. Do not convert to phase-
variable form. [Section: 12.4] 
10. 
11. 
12. 
13. 
MATLAB 
14. 
Given the plant shown in Figure P12.1, 
wileypius 
what relationship exists between b\ and 
aVJUK 
b2 to make the system uncontrollable? 
control solutions 
[Section: 12.3] 
For each of the plants represented by signal-
flow graphs in Figure P12.2, determine the con-
trollability. If the controllability can be determined 
by inspection, state that it can and then verify your 
conclusions 
using the 
controllability 
matrix. 
[Section: 12.3] 
Use MATLAB to determine the 
controllability of the systems 
of Figure P12 .2 (d) and (f) . 
In Section 12.4, we discussed how to design a con-
troller for systems not represented in phase-variable 
form with its typical lower companion matrix. We 
described how to convert the system to phase-
variable form, design the controller, and convert 
back to the original representation. This technique 
can be applied just as easily if the original represen-
tation is converted to controller canonical form with 
its typical upper companion matrix. Redo Example 
12.4 in the text by designing the controller after 
converting the uncompensated plant to controller 
canonical form. [Section: 12.4] 
Consider the following transfer function: 
G(s) = 
(5 + 6) 
(5 + 3)(5 + 8)(5 + 10) 
If the system is represented in cascade form, as 
shown in Figure P12.3, design a controller to yield 

Problems 
713 
FIGURE P12.2 
a closed-loop response of 10% overshoot with a 
16. Repeat Problem 14 assuming that the plant is rep-
settling time of 1 second. Design the controller 
resented in parallel form. [Section: 12.4] 
by first transforming the plant to phase variables. 
1 7. ^ 
open-loop system of Problem 14 
wileypms 
[Section: 12.4] 
i s represented as shown in Figure P12.4. 
JWiM-l 
15. Use MATLAB t o d e s i g n t h e 
MATLAB 
^ ^ 6 0 U t P u t °f e a c n block 
Control Solutions 
c o n t r o l l e r gains for the 
tf^Tlfe 
's a s s'g n ed t o be a state variable, 
system given i n Problem 14 . 
design the controller gains for feedback from these 
state variables. [Section: 12.4] 
tm 
i 
5 + 1 0 
Z3(5) 
] 
5 + 8 
Z2(5) 
5 + 6 
5 + 3 
K(.v) 
FIGURE P12.3 

U(s] 
Chapter 12 
Design via State Space 
Z-it*) 
1 
5 + 3 
5 + 6 
5 + 8 
Zo(.v) 
5+10 
K(.s) = Z|(.s) 
FIGURE P12.4 
18. If an open-loop plant, 
G(s) = 
100 
s(s + 5){s + 9) 
is represented in parallel form, design a controller 
to yield a closed-loop response of 15% overshoot 
and a peak time of 0.2 second. Design the controller 
by first transforming the plant to controller canoni-
cal form. [Section: 12.4] 
19. For a specific individual, the 
linear time-invariant model of 
the 
hypothalamic-pituitary-
adrenal axis of the endocrine system with 
five state variables has been found to be 
(Kyrylov, 
2005) 
MATLAB 
Xi 
x2 
x3 
X4 
.X5_ 
— 
r _ -0.014 
0.023 
0.134 
0 
. 
0 
X 
rxn 
m 
*3 
X4 
LX5. 
+ 
C 
-0.023 
0.67 
0 
0 
0 
0 
0 
LOJ 
do 
-1.4 
-0.023 
-0.67 
0.06 
0.0017 
0 
0 
0.38 
-0.06 
0 
0 
0 
0.003264 
0 
-0.001 
The 
state-variable 
definitions 
were 
given in Problem 25, Chapter 3 . 
a. Use MATLAB to determine if the system 
is controllable. 
b. Use MATLAB to express the matrices A 
and B in phase-variable form. 
20. Consider the plant 
G(s) = 
1 
s(s + 3)(s + l) 
whose state variables are not available. Design an 
observer for the observer canonical variables to 
yield a transient response described by £ = 0.4 
and con = 75. Place the third pole 10 times farther 
from the imaginary axis than the dominant poles. 
[Section: 12.5] 
21. Design an observer for the plant 
C( ) - 
1 0 
W 
(s + 3)(s + 7){s + 15) 
operating with 10% overshoot and 2 seconds peak 
time. Design the observer to respond 10 times as fast 
as the plant. Place the observer third pole 20 times 
as far from the imaginary axis as the observer 
dominant poles. Assume the plant is represented 
in observer canonical form. [Section: 12.5] 
22. Repeat Problem 20 assuming that the plant is rep-
resented in phase-variable form. Do not convert to 
observer canonical form. [Section: 12.7] 
23. Consider the plant 
wileyPLus 
(, + 2) 
CUE* 
G(s) = 7—^-=-, 
^r 
Control Solutions 
w 
(s + 5)(s + 9) 
whose phase variables are not available. Design an 
observer for the phase variables with a transient 
response described by £ = 0.6 and co„ — 120. Do not 
convert to observer canonical form. [Section: 12.7] 
24. Determine whether or not each of the systems 
shown in Figure P12.2 is observable. [Section: 12.6] 
25. Use MATLAB to determine the 
observability of the systems 
of Figure P12.2 (a) and (f) . 
26. Given the plant of Figure P12.5, what relationship 
must exist between C\ and c2 in order for the system 
to be unobservable? [Section: 12.6] 
MATLAB 
- 1 
FIGURE P12.5 

Problems 
715 
27. Design an observer for the plant 
1 
G(s) = 
MATLAB 
(.S+ 5)(.5+ 13)(.5+ 20) 
represented in cascade form. Transform the plant to 
observer canonical form for the design. Then trans-
form the design back to cascade form. The charac-
teristic polynomial for the observer is to be 
s3 + 60052 + 40,000s + 1,500,000. 
28. Use MATLAB to design the 
observer gains for the system 
given in Problem 27. 
29. Repeat Problem 27 assuming that the plant is rep-
resented in parallel form. [Section: 12.7] 
30. Design an observer for 
r , x = 
50 
U 
(s + 3)(s + 6){s + 9) 
represented in phase-variable form with a desired 
performance of 10% overshoot and a settling time 
of 0.5 second. The observer will be 10 times as fast as 
the plant, and the observer's nondominant pole will 
be 10 times as far from the imaginary axis as the 
observer's dominant poles. Design the observer 
by first converting to observer canonical form. 
[Section: 12.7] 
31. Observability and controllability properties depend 
on the state-space representation chosen for a given 
system. In general, observability and controllability 
are affected when pole-zero cancellations are pres-
ent in the transfer function. Consider the following 
two systems with representations: 
xt = A(-x/ = B/r 
y = Qx/; 
Ai = 
A2 = 
" 0 
-2 
r o 
0 
L-6 
11 
-3 
1 
C 
-11 
; B1 = 
°1 
) 
1 
-6. 
[01 
1 ; C1 = 
; B 2 = r°i 
0 
i 
C2 = [6 2 0 
a. Show that 
both 
systems have the 
same 
Y(s) 
transfer function G,(s) = —j-~ after pole-zero 
R(s) 
cancellations. 
b. Evaluate the observability of both systems. 
32. Given the plant 
wileypws 
x = 
- 1 
1 
0 
2 x + 
u; 
v = [l 
llx 
Control Solutions 
design an integral controller to yield a 10% over-
shoot, 0.5-second settling time, and zero steady-
state error for a step input. [Section: 12.8] 
33. Repeat Problem 32 for the following plant: 
[Section: 12.8] 
x = 
-2 
1 
0 
- 5 
u; y=[l 
l]x 
DESIGN PROBLEMS 
34. A magnetic levitation system is described in Problem 
50 in Chapter 9 (Cho,1993). Remove the photocell in 
Figure P9.14(Z?) and design a controller for phase 
variables to yield a step response with 5% overshoot 
and a settling time of 0.5 second. 
35. Problem 24 in Chapter 3 introduced the model for 
patients treated under a regimen of a single day of 
Glargine insulin {Tarin, 2005). The model to find the 
response for a specific patient to medication can be 
expressed in phase-variable form with 
A = 
B = 
0 
1 
0 
0 
0 
1 
-501.6 x 10"6 
-128.8 x 10-3 
-854 x 10"3 
1] 
0 ; 
C = [ 0 . 7 8 x l 0 - 4 
41.4 x 10-4 
0.01 ]; 
0 
D = 0 
The state variables will take on a different signifi-
cance in this expression, but the input and the 
output remain the same. Recall that u = external 
insulin flow, and v = plasma insulin concentration. 
a. Obtain a state-feedback gain matrix so that the 
closed-loop system will have two of its poles 
placed at -1/15 and the third pole at -1/2. 
b. Use MATLAB to verify that the 
MATLAB 
poles appear at the positions 
specified in Part a. 
36. Figure PI 2.6 shows a continuous stirred tank reactor 
in which an aqueous solution of sodium acetate 
(CH3COONa) is neutralized in the mixing tank 
with hydrochloric acid (HC1) to maintain a particu-
lar pH in the mixing tank. 
The amount of acid in the mix is controlled by 
varying the rotational speed of a feeding peristaltic 
pump. A nominal linearized transfer 
function 
from HC1 flowrate to pH has been shown to be 

716 
Chapter 12 
Design via State Space 
r 
> 
Liquid tank 
Inlet stream 
J 
PH 
measurement 
Control acid stream 
Control 
signal 
o 
Peristaltic 
pump 
Liquid pump 
FIGURE P12.6 
Mixing tank 
( © 2000 IEEE) 
Acid tank 
(Tadeo, 2000) 
-0.9580 x 10"4s - 0.01197 x 10-4 
G(s) = s3 + 0.525052 + 0.012655 + 0.000078 
a. Write the system in state-space phase-variable form. 
b. Use state-feedback methods to design a matrix K 
that will yield an overdamped output pH re-
sponse with a settling time of Ts « 5 min for a 
step input change in pH. 
c. Simulate the step response 
...,..„ 
F 
c 
MATLAB 
of the resulting closed-loop ^TT^fc 
system using MATLAB. 
37. In the dc-dc converter of Problem 67, Chapter 4 
(Van Dijk, 1995) with L = 6 mH, C = 1 mF, R = 
100 fl, a 50% PWM duty cycle, and assuming the 
system's output is the voltage across the capacitor, 
the model can be expressed as 
uc 
y=[Q 
1 
0 
-83.33 
500 
-10 
k 
J L
McJ 
166.67 
0 
E, 
Uc. 
a. Find the system's transfer function. 
b. Express the system's state equations in phase-
variable form. 
c. Find a set of state-feedback gains to obtain 20% 
overshoot and a settling time of 0.5 second in the 
phase-variable system. 
d. Obtain the corresponding set of state-feedback 
gains in the original system. 
e. Verify that the set of gains in Part d places the 
closed-loop poles at the desired positions. 
MATLAB 
f. Simulate the unit step 
response of the system using 
MATLAB. 
38. a. Design an observer for the dc-dc converter of 
Problem 37. The observer should have time 
constants 10 times smaller than those of the 
original system. 
b. Simulate your system and 
simulink 
observer for a unit step input 
using Simulink. Assume that 
the initial conditions for the original 
2 
system are 1(0) = 1 
The observer 
should 
have 
initial 
conditions 
4(0) = 0 
39. a. Design an observer for the neutralization system 
using the continuous stirred tank reactor of 

Problems 
717 
b. 
Problem 36. The observer should have time 
constants 10 times smaller than those of the 
original system. Assume that the original state 
variables are those obtained in the phase-
variable representation. 
_,. 
, . 
. 
, 
Simulink 
Simulate your system and 
observer for a unit step in-
put using Simulink. Assume that the ini-
tial conditions for the original system 
"-1 
The observer should 
are x(0) = -10 
3 
have initial conditions x(0) = 
40. The conceptual block diagram of a gas-fired heater 
is shown in Figure P12.7. The commanded fuel 
pressure is proportional to the desired temperature. 
The difference between the commanded fuel pres-
sure and a measured pressure related to the output 
temperature is used to actuate a valve and release 
fuel to the heater. The rate of fuel flow determines 
the temperature. When the output temperature 
equals the equivalent commanded temperature as 
determined by the commanded fuel pressure, the 
fuel flow is stopped and the heater shuts off (Tyner, 
1968). 
If the transfer function of the heater, GH(s), is 
GH(s) = 
1 
degrees F 
(5 + 0.4)(^ + 0.8) 
ft3/min 
and the transfer function of the fuel valve, Gv(s), is 
5 
ft3/min 
Gv{s) = 
Simulink 
s-\-5 
psi 
replace the temperature feedback path with a 
phase-variable controller that yields a 5% over-
shoot and a settling time of 10 minutes. Also, 
design an observer that will respond 10 times 
faster than the system but with the same percent 
overshoot. 
41. a. Redesign the dc-dc converter system of Problem 
37 to include integral control. 
b. Simulate your system for a 
step input using Simulink 
and verify that the specifi-
cations are met. Inparticular, verify 
that the system has zero steady-state 
error. 
42. The floppy disk drive of Problem 57 
W'leyPLus 
in Chapter 8 is to be redesigned 
^VJilf 
using state-variable feedback. The 
control solutions 
controller is replaced by a unity dc gain amplifier, 
G„(s) = 800/(^ + 800). The plant, Gp(s) = 20,000/ 
[s(s + 100)], is in cascade with the amplifier. 
a. Design a controller to yield 10% overshoot and a 
settling time of 0.05 second. Assume that the 
state variables are the output position, output 
velocity, and amplifier output. 
b. Evaluate the steady-state error and redesign 
the system with an integral controller to re-
duce the steady-state error to zero. (Use of a 
program with symbolic capability is highly 
recommended.) 
c. Simulate the step response 
for both the controller-
compensated and integral 
controller-compensated systems . 
Use MATLAB or any othei- computer 
program. 
MATLAB 
Commanded 
fuel 
pressure 
16 
-
Fuel 
pressure 
error 
Fuel 
valve 
" 
III 
rate 
Temperature 
se nsor and ga n 
Heater 
Temperature 
FIGURE P12.7 
Block diagram of a gas-fired heater 

718 
Chapter 12 
Design via State Space 
MATLAB 
43. Given the angle of attack 
control system for the AFTI/ 
F-16 aircraft shown in Figure 
P9.15 (Monahemi, 
1992), 
use MATLAB to 
design a controller for the plant to 
yield 10% overshoot with a settling 
time of 0 . 5 second. Assume that the phase 
variables are accessible. Have the pro-
gram display the step response of the 
compensated system. 
44. For the angle of attack, control 
MATLAB 
system of Problem 43, use MATLAB 
to design an observer for the 
phase variables that is 15 times faster 
than the controller designed system. 
45. For the angle of attack control system of Problem 
43, do the following: 
a. Design an integral control using phase variables 
to reduce the steady-state error to zero. (Use of a 
program with symbolic capability is highly 
recommended.) 
b. Use MATLAB t o o b t a i n t h e s t e p 
MATLAB 
r e s p o n s e . 
where the state variable vector is given by 
46. The use of feedback control to vary the pitch angle 
in the blades of a variable speed wind turbine allows 
power generation optimization under variable wind 
conditions (Liu, 2008). At a specific operating point, 
it is possible to linearize turbine models. For exam-
ple, the model of a three-blade turbine with a 15 m 
radius working in 12 m/s wind-speed and generating 
220 V can be expressed as: 
x = 
+ 
-5 
0 
-10.5229 
0 
0 
51 
0 
0 
0 
0 
u 
0 
0 
-1066.67 
993.804 
0 
0 
1 
-3.38028 
3.125 
0 
0 
0 
23.5107 
-23.5107 
10 
0 
0 
0 
0 
-10 
I I 
(0,,. 
S"i 
Here, ft = pitch angle of the wind turbine blades, 
£ — relative angle of the secondary shaft, cog = 
generator speed, and cogm — generator measure-
ment speed. The system input is u, the pitch angle 
reference, and the output is y, the active power 
generated. 
a. Find a state feedback vector gain such that the 
system responds with a 10% overshoot and a 
settling time of 2 seconds for a step input. 
MATLAB 
b. Use MATLAB to verify the 
operation of the 
system 
under s t a t e feedback. 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
47. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses active control of a pantograph mechanism 
for high-speed rail systems (O'Connor, 1997). In 
Problem 79(a), Chapter 5, you found the block dia-
gram for the active pantograph control system. For 
the open-loop portion of the pantograph system 
modeled in Chapter 5, do the following: 
a. Design a controller to yield 20% overshoot and a 
1-second settling time. 
b. Repeat Part a with a zero steady-state error. 
48. Control of HIV/AIDS. The linearized model of HIV 
infection when RTIs are used for treatment was 
introduced in Chapter 4 and repeated here for 
convenience (Craig, 2004): 
T 
A.* 
T 
v 
-0.04167 
0 
-0.0058 
0.0217 -0.24 0.0058 
0 
100 
-2.4 
T 
r 
v 
5.2 
-5.2 
0 
U\ 
y = [0 0 1] 
y = 0 0 0 1.223,-clO5 O F 
T 
r 
v 

Cyber Exploration Laboratory 
719 
ehU) 
u,U) 
50 i* 
««(0 
20 
5 + 20 
W 
2 
+-
T{t) 
0.03787 
7-,-(0 
•8f-*® 
* 
7/(0 
'/«(0 
FIGURE P12.8 
7.226 S 
mm 
O.I 
£0(0 1' 
0.06154 
W) 
T represents the number of healthy T-cells, V the 
number of infected cells, and v the number of free 
viruses. 
a. Design a state-feedback scheme to obtain 
(1) zero steady-state error for step inputs 
(2) 10% overshoot 
(3) a settling time of approximately 100 days 
(Hint: the system's transfer function has an open-
loop zero at approximately —0.02. Use one of the 
poles in the desired closed-loop-pole polynomial to 
eliminate this zero. Place the higher-order pole 6.25 
times further than the dominant pair.) 
b. Simulate the unit step 
response of your design 
using Simulink. 
49. Hybrid vehicle. In Problem 3.32, we introduced the 
idea that when an electric motor is the sole motive 
force provider for a hybrid electric vehicle (HEV), 
the forward paths of all HEV topologies are simi-
lar. It was noted that, in general, the forward path 
of an HEV cruise control system can be repre-
sented by a block diagram similar to that of Figure 
P3.19 (Preitl, 2007). The diagram is shown in 
Figure P12.8, with the parameters substituted by 
their numerical values from Problem 6.69; the 
motor armature represented as a first-order system 
Simulink 
with a unity steady-state gain and a time constant 
of 50 ms; and the power amplifier gain set to 50. 
Whereas the state variables remain as the motor 
angular speed, co(t), and armature current, Ia{t), we 
assume now that we have only one input variable, 
uc(t), the command voltage from the electronic 
control unit, and one output variable, car speed, 
v = rco/iiot = 0.06154a>. The change in the load 
torque, Tc(t), is represented as an internal feed-
back proportional to m(t), 
Looking at the diagram, the state equations may 
be written as: 
-20 
-40 
0.2491 
-0.0191 
y{t) = v(t) = [0 0.05154] 
la 
0) w 
V 
CO . 
+ • o i 
.1000. 
Uc(t) 
a. Design an integral controller for %OS < 4.32%, a 
settling time, Ts< 4.4 sec, and a zero steady-state 
error for a step input (Hint: To account for the effect 
of the integral controller on the transient response, 
use Ts = 4 seconds in your calculation of the value 
of the natural frequency, con, of the required domi-
nant poles). 
b. Use MATLAB to verify that the 
MATLAB 
design requirements are met. 
Cyber Exploration Laboratory 
Experiment 12.1 
Objective 
To simulate a system that has been designed for transient response via 
a state-space controller and observer. 

Chapter 12 
Design via State Space 
Minimum Required Software Packages MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
1. This experiment is based upon your design of a controller and observer 
as specified in the Case Study Challenge problem in Chapter 12. Once you 
have completed the controller and observer design in that problem, go on to 
Prelab 2. 
2. What is the controller gain vector for your design of the system specified in the 
Case Study Challenge problem in Chapter 12? 
3. What is the observer gain vector for your design of the system specified in the 
Case Study Challenge problem in Chapter 12? 
4. Draw a Simulink diagram to simulate the system. Show the system, the controller, 
and the observer using the physical variables specified in the Case Study 
Challenge problem in Chapter 12. 
Lab 
1. Using Simulink and your diagram from Prelab 4, produce the Simulink diagram 
from which you can simulate the response. 
2. Produce response plots of the system and the observer for a step input. 
3. Measure the percent overshoot and the settling time for both plots. 
Postlab 
1. Make a table showing the design specifications and the simulation results for 
percent overshoot and settling time. 
2. Compare the design specifications with the simulation results for both the system 
response and the observer response. Explain any discrepancies. 
3. Describe any problems you had implementing your design. 
Experiment 12.2 
Objective To use Lab VIEW to design a controller and observer 
Minimum Required Software Packages Lab VIEW, the Control Design 
and Simulation Module, and the MathScript RT Module. 
Prelab Design a Lab VIEW VI that will design the controller and observer for the 
Antenna Control Case Study in this chapter. Your VI will have the following inputs: 
phase-variable form of the plant, the controller poles, and the observer poles to meet 
the requirements. Your indicators will display the following: the phase-variable 
equation of the plant, whether or not the system is controllable, the observer 
canonical equation of the observer, whether or not the system is observable, the 
gains for the controller, and the gains for the observer. Also provide the impulse 
response and initial response curves shown in Figure 12.27. In addition, provide 
similar response curves for the state variables. 

Bibliography 
Lab Run your VI and collect the data from which to compare the results of the 
case study with those found from your VI. 
Postlab Compare and summarize the results found from your VI with those of the 
Chapter 12 Antenna Control Case Study. 
^ Bibliography J 
Cho, D., Kato, Y., and Spilman, D. Sliding Mode and Classical Controllers in Magnetic 
Levitation Systems. IEEE Control Systems, February 1993, pp. 42-48. 
Craig, I. K, Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
D'Azzo, J. J., and Houpis, C. H. Linear Control System Analysis and Design: Conventional and 
Modem, 3d ed. McGraw-Hill, New York, 1988. 
Franklin, G. F, Powell, J. D, and Emami-Naeini, A. Feedback Control of Dynamic Systems, 
3d ed. Addison-Wesley, Reading, MA, 1994. 
Hostetter, G. H, Savant, C. J. Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed. 
Saunders College Publishing, New York, 1989. 
Kailath, T. Linear Systems. Prentice Hall, Upper Saddle River, NJ, 1980. 
Kyrylov, V., Severyanova, L. A., and Vieira, A. Modeling Robust Oscillatory Behavior of the 
Hypothalamic-Pituitary-Adrenal Axis. IEEE Transactions on Biomedical 
Engineering, 
vol. 52, no. 12, 2005, pp. 1977-1983. 
Liu, J.-H., Xu, D.-R, and Yang, X.-Y Multi-Objective Power Control of a Variable Speed Wind 
Turbine Based on Theory. Proceedings of the Seventh International Conference on Machine 
Learning and Cybernetics, July 2008, pp. 2036-2041. 
Luenberger, D. G. Observing the State of a Linear System. IEEE Transactions on Military 
Electronics, vol. MIL-8, April 1964, pp. 74-80. 
Milhorn, H. T. Jr., The Application of Control Theory to Physiological Systems. W. B. 
Saunders, Philadelphia, 1966. 
Monahemi, M. M, Barlow, J. B, and O'Leary, D. P. Design of Reduced-Order Observers with 
Precise Loop Transfer Recovery. Journal of Guidance, Control, and Dynamics, vol. 15, no. 6, 
November-December 1992, pp. 1320-1326. 
O' Connor, D. N, Eppinger, S. D., Seering, W P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. 1-4. 
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990. 
Ogata, K. State Space Analysis of Control Systems. Prentice Hall, Upper Saddle River, NJ, 
1967. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence 
and Informatics. IEEE, 2007. 
Rockwell International. Space Shuttle Transportation System. 1984 (press information). 
Shinners, S. M. Modern Control System Theory and Design. Wiley, New York, 1992. 
Sinha, N. K. Control Systems. Holt, Rinehart & Winston, New York, 1986. 
Tadeo, F, Perez Lopez, O, and Alvarez, T, Control of Neutralization Processes by Robust 
Loop-shaping. IEEE Transactions on Control Systems Technology, vol. 8, no. 2, 2000, 
pp. 236-246. 

Chapter 12 
Design via State Space 
Tarin, G, Teufel, E., Pico, I, Bondia, J., and Pfleiderer, H. J. Comprehensive Pharmacokinetic 
Model of Insulin Glargine and Other Insulin Formulations. IEEE Transactions on Bio-
medical Engineering, vol. 52, no. 12, 2005, pp. 1994-2005. 
Timothy, L. K, and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New 
York, 1968. 
Tyner, M., and May, F. P. Process Engineering Control. Ronald Press, New York, 1968. 
Van Dijk, E., Spruijt, J. R, O' Sullivan, D. M., and Klaasens, J. B. PWM-Switch Modeling of 
DC-DC Converters. IEEE Transactions on Power Electronics, vol. 10, 1995, pp. 659-665. 

Digital Control Systems 
^Chapter 
Learning Outcomes^ 
After completing this chapter the student will be able to: 
• Model the digital computer in a feedback system (Sections 13.1-13.2) 
• Find z- and inverse z-transforms of time and Laplace functions (Section 13.3) 
• Find sampled-data transfer functions (Section 13.4) 
• Reduce an interconnection of sampled-data transfer functions to a single sampled-
data transfer function (Section 13.5) 
• Determine whether a sampled-data system is stable and determine sampling rates 
for stability (Section 13.6) 
• Design digital systems to meet steady-state error specification (Section 13.7) 
• Design digital systems to meet transient response specifications using gain adjust-
ment (Sections 13.8-13.9) 
• Design cascade compensation for digital systems (Sections 13.10-13.11) 
^ Case Study Learning Outcomes ^ 
You will be able to demonstrate your knowledge of the chapter objectives with a case 
study as follows: 
• Given the analog antenna azimuth position control system shown on the front 
endpapers and in Figure 13.1(a), you will be able to convert the system to a digital 
system as shown in Figure 13.1(6) and then design the gain to meet a transient 
response specification. 
723 

724 
Chapter 13 
Digital Control Systems 
FIGURE 13.1 Conversion of antenna azimuth position control system from a. analog control 
to b. digital control 
• Given the digital antenna azimuth position control system shown in Figure 13.1(6), 
you will be able to design a digital cascade compensator to improve the transient 
response. 
^13.1 
Introduction 
This chapter is an introduction to digital control systems and will cover only 
frequency-domain analysis and design. You are encouraged to pursue the study 
of state-space techniques in an advanced course in sampled-data control systems. In 
this chapter, we introduce analysis and design of stability, steady-state error, and 
transient response for computer-controlled systems. 
With the development of the minicomputer in the mid-1960s and the micro-
computer in the mid-1970s, physical systems need no longer be controlled by 
expensive mainframe computers. For example, milling operations that required 
mainframe computers in the past can now be controlled by a personal computer. 
The digital computer can perform two functions: (1) supervisory—external to 
the feedback loop; and (2) control—internal to the feedback loop. Examples of 

13.1 Introduction 
725 
supervisory functions consist of scheduling tasks, monitoring parameters and var-
iables for out-of-range values, or initiating safety shutdown. Control functions are of 
primary interest to us, since a computer that performs within the feedback loop 
replaces the methods of compensation heretofore discussed. Examples of control 
functions are lead and lag compensation. 
Transfer functions, representing compensators built with analog components, 
are now replaced with a digital computer that performs calculations that emulate the 
physical compensator. What advantages are there to replacing analog components 
with a digital computer? 
Advantages of Digital Computers 
The use of digital computers in the loop yields the following advantages over analog 
systems: (1) reduced cost, (2) flexibility in response to design changes, and (3) noise 
immunity. Modern control systems require control of numerous loops at the same 
time—pressure, position, velocity, and tension, for example. In the steel industry, a 
single digital computer can replace numerous analog controllers with a subsequent 
reduction in cost. Where analog controllers implied numerous adjustments and 
resulting hardware, digital systems are now installed. Banks of equipment, meters, 
and knobs are replaced with computer terminals, where information about settings 
and performance is obtained through menus and screen displays. Digital computers 
in the loop can yield a degree of flexibility in response to changes in design. Any 
changes or modifications that are required in the future can be implemented with 
simple software changes rather than expensive hardware modifications. Finally, 
digital systems exhibit more noise immunity than analog systems by virtue of the 
methods of implementation. 
Where then is the computer placed in the loop? Remember that the digital 
computer is controlling numerous loops; thus, its position in the loop depends upon 
the function it performs. Typically, the computer replaces the cascade compensator 
and is thus positioned at the place shown in Figure 13.2(a). 
The signals r, e,/, and c shown in Figure 13.2(a) can take on two forms: digital or 
analog. Up to this point we have used analog signals exclusively. Digital signals, 
which consist of a sequence of binary numbers, can be found in loops containing 
digital computers. 
~X e 
, 
Digital 
computer 
/, 
Plant 
c 
(a) 
r tf 
- i 
7) 
9 
A/D 
Digital 
computer 
D/A 
Plant 
c 
(b) 
FIGURE 13.2 
a. Placement of the digital computer within the loop; b. detailed block diagram 
showing placement of A/D and D/A converters 

726 
Chapter 13 
Digital Control Systems 
r / 
Most significant bit 
lv 
FIGURE 13.3 
Dij 
-o o— 
-a o— 
oil 
»ital-to-ana 
l 
2 
4 
log conv( 
+f\? 
Y$ 
;rter 
, output 
Loops containing both analog and digital signals must provide a means for 
conversion from one form to the other as required by each subsystem. A device that 
converts analog signals to digital signals is called an analog-to-digital (A/D) converter. 
Conversely, a device that converts digital signals to analog signals is called a digital-to-
analog (D/A) converter. For example, in Figure 13.2(b), if the plant output, c, and the 
system input, r, are analog signals, then an analog-to-digital converter must be provided 
at the input to the digital computer. Also, if the plant input,/, is an analog signal, then a 
digital-to-analog converter must be provided at the output of the digital computer. 
Digital-to-Analog Conversion 
Digital-to-analog conversion is simple and effectively instan-
taneous. Properly weighted voltages are summed together to 
yield the analog output. For example, in Figure 13.3, three 
weighted voltages are summed. The three-bit binary code is 
represented by the switches. Thus, if the binary number is 
IIO2, the center and bottom switches are on, and the analog 
output is 6 volts. In actual use, the switches are electronic and 
are set by the input binary code. 
Analog-to-Digital Conversion 
Analog-to-digital conversion, on the other hand, is a two-step 
process and is not instantaneous. There is a delay between the 
input analog voltage and the output digital word. In an analog-to-digital converter, 
the analog signal is first converted to a sampled signal and then converted to a 
sequence of binary numbers, the digital signal. 
The sampling rate must be at least twice the bandwidth of the signal, or else there 
will be distortion. This minimum sampling frequency is called the Nyquist sampling rate.1 
In Figure 13.4(a), we start with the analog signal. In Figure 13.4(b), we see the 
analog signal sampled at periodic intervals and held over the sampling interval by a 
device called a zero-order sample-and-hold (z.o.h.) that yields a staircase approxi-
mation to the analog signal. Higher-order holds, such as a first-order hold, generate 
more complex and more accurate waveshapes between samples. For example, a first-
order hold generates a ramp between the samples. Samples are held before being 
digitized because the analog-to-digital converter converts the voltage to a digital 
number via a digital counter, which takes time to reach the correct digital number. 
Hence, the constant analog voltage must be present during the conversion process. 
After sampling and holding, the analog-to-digital converter converts the 
sample to a digital number (as shown in Figure 13.4(c)), which is arrived at in 
the following manner. The dynamic range of the analog signal's voltage is divided 
into discrete levels, and each level is assigned a digital number. For example, in 
Figure 13.4(6), the analog signal is divided into eight levels. A three-bit digital 
number can represent each of the eight levels as shown in the figure. Thus, the 
difference between quantization levels is M/8 volts, where M is the maximum analog 
voltage. In general, for any system, this difference is M/2" volts, where n is the 
number of binary bits used for the analog-to-digital conversion. 
Looking at Figure 13.4(b), we can see that there will be an associated error for 
each digitized analog value except the voltages at the boundaries such as M/8 and 
2M/8. We call this error the quantization error. Assuming that the quantization 
process rounds off the analog voltage to the next higher or lower level, the maximum 
1 See Ogata (1987:170-177) for a detailed discussion. 

13.2 Modeling the Digital Computer 
727 
0 I 
2 
3 
4 
Time (seconds) 
2 
3 
4 
5 
Time (seconds) 
m 
Digital number 
000 
100 
J 
: 
i 
\ 
_ — o! o; c 
| 
e 
1
2 
3 
4 
5 
Time (seconds) 
m 
value of the quantization error is 1/2 the difference between quantization levels in 
the range of analog voltages from 0 to 15M/16. In general, for any system using 
roundoff, the quantization error will be (l/2)(M/2") = M/2n+1. 
We have now covered the basic concepts of digital systems. We found out why 
they are used, where the digital computer is placed in the loop, and how to convert 
between analog and digital signals. Since the computer can replace the compensator, 
we have to realize that the computer is working with a quantized amplitude 
representation of the analog signal formed from values of the analog signal at 
discrete intervals of time. Ignoring the quantization error, we see that the computer 
performs just as the compensator does, except that signals pass through the 
computer only at the sampled intervals of time. We will find that the sampling of 
data has an unusual effect upon the performance of a closed-loop feedback system, 
since stability and transient response are now dependent upon the sampling rate; if it 
is too slow, the system can be unstable since the values are not being updated rapidly 
enough. If we are to analyze and design feedback control systems with digital 
computers in the loop, we must be able to model the digital computer and associated 
digital-to-analog and analog-to-digital converters. The modeling of the digital 
computer along with associated converters is covered in the next section. 
( 1 3 . 2 
Modeling the Digital Computer 
If we think about it, the form of the signals in a loop is not as important as what 
happens to them. For example, if analog-to-digital conversion could happen instan-
taneously, and time samples occurred at intervals of time that approached zero, there 
would be no need to differentiate between the digital signals and the analog signals. 
Thus, previous analysis and design techniques would be valid regardless of the 
presence of the digital computer. 
FIGURE 13.4 
Steps in analog-
to-digital conversion: a. analog 
signal; b. analog signal after 
sample-and-hold; c. conversion 
of samples to digital numbers 

728 
Chapter 13 
Digital Control Systems 
The fact that signals are sampled at specified intervals and held causes the 
system performance to change with changes in sampling rate. Basically, then, the 
computer's effect upon the signal comes from this sampling and holding. Thus, in 
order to model digital control systems, we must come up with a mathematical 
representation of this sample-and-hold process. 
Modeling the Sampler 
Our objective at this point is to derive a mathematical model for the digital computer 
as represented by a sampler and zero-order hold. Our goal is to represent the 
computer as a transfer function similar to that for any subsystem. When signals are 
sampled, however, the Laplace transform that we have dealt with becomes a bit 
unwieldy. The Laplace transform can be replaced by another related transform 
called the z-transform. The z-transform will arise naturally from our development of 
the mathematical representation of the computer. 
Consider the models for sampling shown in Figure 13.5. The model in Figure 
13.5(a) is a switch turning on and off at a uniform sampling rate. In Figure 13.5(6), 
sampling can also be considered to be the product of the time waveform to be 
sampled,/(r), and a sampling function, s{t). \is{t) is a sequence of pulses of width 7V, 
constant amplitude, and uniform rate as shown, the sampled output, f*Tw(t), will 
consist of a sequence of sections of /(f) at regular intervals. This view is equivalent to 
the switch model of Figure 13.5(a). 
We can now write the time equation of the sampled waveform, ft 
(t). Using 
the model shown in Figure 13.5(6), we have 
00 
TTVW = /('M0 =/(0 £ 
u(t - kT) - u(t -kT- 
Tw) 
(13.1) 
k=—oo 
where k is an integer between —oo and +oo, Tis the period of the pulse train, and TV 
is the pulse width. 
FIGURE 13.5 Two views of 
uniform-rate sampling: 
a. switch opening and closing; 
b. product of time waveform 
and sampling waveform 
Pulse width = Tw 
+- t 
M 
. \ 
/ 
/
\ 
4,« 
/TV«> 
a 
*- r 
T IT 3T 
Pulse width = Tw 
s(.t) 
sit) 
Pulse width = T, w 
T IT 3T 
(b) 

13.2 Modeling the Digital Computer 
729 
Since Eq. (13.1) is the product of two time functions, taking the Laplace 
transform in order to find a transfer function is not simple. A simplification can be 
made if we assume that the pulse width, TV, is small in comparison to the period, T, 
such that f(t) can be considered constant during the sampling interval. Over the 
sampling interval, then,/(f) — f(kT). Hence, 
/rw(0 = E f(kT)lu(* - kT) - u(t -kT- 
7»] 
(13.2) 
fc=—CO 
for small 7V. 
Equation (13.2) can be further simplified through insight provided by the 
Laplace transform. Taking the Laplace transform of Eq. (13.2), we have 
T„-kTs 
7-kTs-Ty/s 
**7vM = E 
KkT) 
k=—co 
Replacing e~TwS with its series expansion, we obtain 
= E KkT) 
k=-oo 
1 _ 
e-Tw* ,-kTs 
(13.3) 
*r„(') = E f(kT>> 
/:=—oo 
For small 7V, Eq. (13.4) becomes 
1 - H-(T2-]j 
s 
,-kTs 
(13.4) 
k=—oo 
Tws 
,-kTs = £ f{kT)Twe 
k=—oo 
-kTs 
Finally, converting back to the time domain, we have 
oo 
f*Tw(t) = Tw 
Y^f(kT)§(f-kT) 
(13.5) 
(13.6) 
k=—oo 
where S(t — kT) are Dirac delta functions. 
Thus, the result of sampling with rectangular pulses can be thought of as a 
series of delta functions whose area is the product of the rectangular pulse width and 
the amplitude of the sampled waveform, or Twf{kT). 
Equation (13.6) is portrayed in Figure 13.6. The sampler is divided into two 
parts: (1) an ideal sampler described by the portion of Eq. (13.6) that is not 
dependent upon the sampling waveform characteristics, 
r(t)j2f(kT)s(t-kT) 
k=-oo 
(13.7) 
and (2) the portion dependent upon the sampling waveform's characteristics, Tw-
Modeling the Zero-Order Hold 
The final step in modeling the digital computer is modeling the zero-order hold that 
follows the sampler. Figure 13.7 summarizes the function of the zero-order hold, 
Ideal 
sampler 
m <s fm 
o-
= '±AkT)S(t-kT) 
fkm 
= 
TwZMT)S(t-kT) 
FIGURE 13.6 
Model of 
sampling with a uniform 
rectangular pulse train 

730 
Chapter 13 
Digital Control Systems 
Ideal sampler 
m 
</ o f*m 
Hold 
/„« 
FIGURE 13.7 Ideal sampling 
and the zero-order hold 
t AkT)S{t-kT) 
which is to hold the last sampled value of f(t). If we assume an ideal sampler 
(equivalent to setting 7V = 1), then /*(r) is represented by a sequence of delta 
functions. The zero-order hold yields a staircase approximation to f(t). Hence, the 
output from the hold is a sequence of step functions whose amplitude is f(t) at the 
sampling instant, orf(kT). We have previously seen that the transfer function of any 
linear system is identical to the Laplace transform of the impulse response since the 
Laplace transform of a unit impulse or delta function input is unity. Since a single 
impulse from the sampler yields a step over the sampling interval, the Laplace 
transform of this step, G/,(s), which is the impulse response of the zero-order hold, is 
the transfer function of the zero-order hold. Using an impulse at zero time, the 
transform of the resulting step that starts at t = 0 and ends at t = T is 
Gh(s) = 1-e 
-Ts 
(13.8) 
In a physical system, samples of the input time waveform, /(kT), are held over 
the sampling interval. We can see from Eq. (13.8) that the hold circuit integrates the 
input and holds its value over the sampling interval. Since the area under the delta 
functions coming from the ideal sampler is f(kT), we can then integrate the ideal 
sampled waveform and obtain the same result as for the physical system. In other 
words, if the ideal sampled signal, f*{t), is followed by a hold, we can use the ideal 
sampled waveform as the input, rather than 
f*Tw{t). 
In this section, we modeled the digital computer by cascading two elements: 
(1) an ideal sampler and (2) a zero-order hold. Together, the model is known as a 
zero-order sample-and-hold. The ideal sampler is modeled by Eq. (13.7), and the 
zero-order hold is modeled by Eq. (13.8). In the next section, we start to create a 
transform approach to digital systems by introducing the z-transform. 
( 
13.3 The z-Transform 
The effect of sampling within a system is pronounced. Whereas the stability and 
transient response of analog systems depend upon gain and component values, 
sampled-data system stability and transient response also depend upon sampling 
rate. Our goal is to develop a transform that contains the information of sampling 
from which sampled-data systems can be modeled with transfer functions, analyzed, 
and designed with the ease and insight we enjoyed with the Laplace transform. We 
now develop such a transform and use the information from the last section to obtain 
sampled-data transfer functions for physical systems. 

13.3 The z-Transform 
731 
Equation (13.7) is the ideal sampled waveform. Taking the Laplace transform 
of this sampled time waveform, we obtain 
r® = £/(*?> 
- * 7 A -
k=0 
Now, letting z = els, Eq. (13.9) can be written as 
F(z) = 1£f(kT)z -* 
(13.9) 
(13.10) 
Equation (13.10) defines the z-transform. That is, an F{z) can be transformed 
to f(kT), or an f(kT) can be transformed to F(z). Alternately, we can write 
f{kT)±=_F{z) 
(13.11) 
Paralleling the development of the Laplace transform, we can form a table relating 
f(kT), the value of the sampled time function at the sampling instants, to F(z). Let 
us look at an example. 
Example 13.1 
z-Transform of a Time Function 
PROBLEM: Find the z-transform of a sampled unit ramp. 
SOLUTION: For a unit ramp, f{kT) = kT. Hence the ideal sampled step can be 
written from Eq. (13.7) as 
Taking the Laplace transform, we obtain 
oo 
F*(s) = Yl kTe~kTs 
k=0 
Converting to the z-transform by letting e~kTs = z~k, we have 
F(z) = J2 kTz~k = T J2 kt~k = T{z~l + 2z~2 
3z - 3 
•) 
(13.12) 
(13.13) 
(13.14) 
Equation (13.14) can be converted to a closed form by forming the series for zF(z) 
and subtracting F(z). Multiplying Eq. (13.14) by z, we get 
zi7(z) = r(l+2z- 1+3z~ 2 + ---) 
Subtracting Eq. (13.14) from Eq. (13.15), we obtain 
zF(z) - F(z) = (Z - l)F(z) = r(l + z-1 + z-2 + 
But 
1 
1-z -1 = l + z_1 +z~z + z .-3 
(13.15) 
(13.16) 
(13.17) 

732 
Chapter 13 
Digital Control Systems 
Symbolic Math 
which can be verified by performing the indicated division. Substituting Eq. (13.17) 
into (13.16) and solving for F(z) yields 
F(z) = T 
z-iy 
(13.18) 
as the z-transform of f(kT) = kT. 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run chl3spl in Appendix F located at www.wiley.com/ 
college/nise. You will learn how to find the z-transform of time 
functions. Example 13.1 will be solved using MATLAB and the 
Symbolic Math Toolbox. 
The example demonstrates that any function of s, F*(s), that represents a 
sampled time waveform can be transformed into a function of z, F(z). The final 
result, F(z) = Tz/(z -1)2, is in a closed form, unlike F*(s). If this is the case for 
numerous other sampled time waveforms, then we have the convenient transform 
that we were looking for. In a similar way, ^-transforms for other waveforms can be 
obtained that parallel the table of Laplace transforms in Chapter 2. A partial table of 
z-transforms is shown in Table 13.1, and a partial table of z-transform theorems is 
TABLE 13.1 Partial table of z- and ^-transforms 
1. 
2. 
3. 
4. 
5. 
6 
7. 
8. 
9. 
/(') 
u® 
t 
f 
e-at 
fg-w 
sin cot 
cos cot 
e_fl'sin cot 
e_f"cos cot 
F(s) 
1 
s 
1 
S2 
sn+\ 
1 
s + a 
n\ 
(s + aT+* 
0) 
s2 + co2 
s 
S2 + C02 
CO 
(s + a)2 + co2 
s + a 
F(z) 
f(kT) 
z 
z~] 
u(kT) 
Tz 
kT 
(z -1)2 
dn 
lim(-l)"-f-
a-^ir 
; dan 
z 
z - e-"T 
z 
z - e-aT 
d" 
(-If 4½ 
v 
' da" 
z 
z - e~aT 
z sin coT 
z2 - 2z cos coT + 1 
{kTf 
e-akT 
(kT)ne-akT 
sin cokT 
Z(Z~ COS (oT) 
rnsmlcT 
z2 — IzcoscoT + 1 
ze~aTsin coT 
„-**rsin,„fcr 
z2 - 2ze-"TcoscoT + e-2"7 
z2-ze~aT 
cos coT 
P-"kTc^(likT 
(S + 0^+0)2 
z2 - 2ze-"T cos coT + e~2aT 

13.3 The z-Transform 
733 
TABLE 13.2 z-transform theorems 
1. 
2. 
3. 
4, 
5. 
6. 
7. 
Theorem 
z{af{t)} = aF{z) 
z{h(t)+f2(t)} = Fx(z) + 
z{e-aTf(t)} 
= F(eaTz) 
z{f(t-nT)} 
= z-"F(z) 
z{tfm-TZ
dF
df 
/(0) = lim F(z) 
f(oo) = 
lim(l-Z-l)F(z) 
Fi(z) 
Name 
Linearity theorem 
Linearity theorem 
Complex differentiation 
Real translation 
Complex differentiation 
Initial value theorem 
Final value theorem 
Note: kT may be substituted for t in the table. 
shown in Table 13.2. For functions not in the table, we must perform an inverse 
Z-transform calculation similar to the inverse Laplace transform by partial-fraction 
expansion. Let us now see how we can work in the reverse direction and find the time 
function from its z-transform. 
The Inverse z-Transform 
Two methods for finding the inverse z-transform (the sampled time function from its 
z-transform) will be described: (1) partial-fraction expansion and (2) the power 
series method. Regardless of the method used, remember that since the z-transform 
came from the sampled waveform, the inverse z-transform will yield only the values 
of the time function at the sampling instants. Keep this in mind as we proceed, 
because even as we obtain closed-form time functions as results, they are valid only 
at sampling instants. 
Inverse z-Transforms via Partial-Fraction Expansion Recall that the Laplace trans-
form consists of a partial fraction that yields a sum of terms leading to exponentials, 
that is, A/(s + a). Taking this lead and looking at Table 13.1, we find that sampled 
exponential time functions are related to their z-transforms as follows: 
e-^^^r 
(13.19) 
We thus predict that a partial-fraction expansion should be of the following form: 
F(Z) = - ^ - + - 5 i ~ + ... 
(13.20) 
Z - Zl 
Z - Z2 
Since our partial-fraction expansion of F(s) did not contain terms with s in the 
numerator of the partial fractions, we first form F(z)/z to eliminate the z terms in 
the numerator, perform a partial-fraction expansion of F(z)/z-, and finally 
multiply the result by z to replace the z's in the numerator. An example follows. 
Example 13.2 
Inverse z-Transform via Partial-Fraction Expansion 
PROBLEM: Given the function in Eq. (13.21), find the sampled time function. 

734 
Chapter 13 
Digital Control Systems 
Symbolic Math 
SOLUTION: Begin by dividing Eq. (13.21) by z and performing a partial-fraction 
expansion. 
Hz) 
0.5 
A 
+ 
B 
-2.5 
+ 
2.5 
z 
(z - 0.5)(z - 0.7) 
z - 0.5 
z - 0.7 
z - 0.5 
z - 0.7 
Next, multiply through by z. 
0.5z 
-2.5z 
2.5z 
F(z) = [z -0.5)(^-0.7) 
z-0.5 
z-0.7 
(13.22) 
;i3.23) 
Using Table 13.1, we find the inverse z-transform of each partial fraction. Hence, 
the value of the time function at the sampling instants is 
f(kT) = -2.5(0.5)* + 2.5(0.7)* 
(13.24) 
Also, from Eqs. (13.7) and (13.24), the ideal sampled time function is 
OO 
PC 
f*(t) = ] T f{kT)8{t -kT) = ]T [-2-5(0.5)* + 2.5(0.7)*]5(f - kT) 
(13.25) 
k=-c 
lc=—oc 
If we substitute k = 0,1,2, and 3, we can find the first four samples of the ideal 
sampled time waveform. Hence, 
f*{t) = 08(t) + 0.5<5(r - T) + 0.65(^ - 2T) + 0.5458{t - 3T) 
(13.26) 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run chl3sp2 in Appendix F located at www.wiley.com/ 
college/nise . You will learn how to find the inverse z-transf orm 
of sampled time functions. Example 13.2 will be solved using 
MATLAB and the Symbolic Math Toolbox. 
Inverse z-Transf orm via the Power Series Method The values of the sampled time 
waveform can also be found directly from F{z). Although this method does not yield 
closed-form expressions for f{kT), it can be used for plotting. The method consists of 
performing the indicated division, which yields a power series for F(z). The power 
series can then be easily transformed into F*(s) and f*(t). 
Example 13.3 
Inverse z-Transform via Power Series 
PROBLEM: Given the function in Eq. (13.21), find the sampled time function. 
SOLUTION: Begin by converting the numerator and denominator of F{z) to 
polynomials in z. 
m= 
0.5z 
0.5z 
[z -0.5)(z-0.7) 
z2-1.2z + 0.35 
(13.27) 

13.4 Transfer Functions 
735 
Now perform the indicated division. 
0 . 5 ^ + 0 . 6 ^ + 0.5452-3 
z2-1.2z + 0.35)0.5z 
0.5Z-0.6 + 0.175Z-1 
0.6-0.175Z-1 
0.6-0.720^+0.21 
0.545Z-1 - 0.21 
Using the numerator and the definition of z, we obtain 
F*(s) = 03e-Ts + 0.6<T27* + QM5e~m + • • • 
from which 
f*{t) = 0.5S(t -T) + 0.68{t - IT) + 0.545S(r -37) + ---
(13.28) 
(13.29) 
(13.30) 
You should compare Eq. (13.30) with Eq. (13.26), the result obtained via 
partial expansion. 
Skill-Assessment Exercise 13.1 
PROBLEM: Derive the z-transform for fit) = sin cot u(t). 
1 - 2z-1cos(ft>7j + z~2 
The complete solution is located at www.wiley.com/college/nise. 
wileyPLUS 
Control Solutions 
PROBLEM: Find f(kT) if F(z) = 
Skill-Assessment Exercise 13.2 
z(z + l)(z + 2) 
(z-0.5)(z-0.7)(z-0.9)' 
68.875(0.9)* 
The complete solution is located at www.wiley.com/college/nise. 
ANSWER: f(kT) = 46.875(0.5)* - 114.75(0.7)* 
^ 13.4 Transfer Functions 
Now that we have established the z-transform, let us apply it to physical systems by 
finding transfer functions of sampled-data systems. Consider the continuous system 
shown in Figure 13.8 (a). If the input is sampled as shown in Figure 13.8(6), the output is 
still a continuous signal. If, however, we are satisfied with finding the output at the 
sampling instants and not in between, the representation of the sampled-data system 

736 
Chapter 13 
Digital Control Systems 
R(s) 
G(s) 
(«) 
R(S) ^ /
c 
R IM 
o 
G(s) 
(b) 
C(s) 
C(s) 
FIGURE 13.8 
Sampled-data 
systems: a. continuous; 
b. sampled input; c. sampled 
input and output 
-^/o^^ G(s) 
C(s) 
O 
C*(s) 
(c) 
Note: Phantom sampler is shown in color. 
can be greatly simplified. Our assumption is visually described in Figure 13.8(c), where 
the output is conceptually sampled in synchronization with the input by a phantom 
sampler. Using the concept described in Figure 13.8(c), we derive the pulse transfer 
function of G(s). 
Derivation of the Pulse Transfer Function 
Using Eq. (13.7), we find that the sampled input, r*(f), to the system of Figure 13.8(c) is 
r*(t) = Y,r(nT)8(t-nT) 
(13.31) 
n=0 
which is a sum of impulses. Since the impulse response of a system, G(s), is g(t), we 
can write the time output of G(s) as the sum of impulse responses generated by the 
input, Eq. (13.31). Thus, 
c(0 = £r(/iT)g(r-nr) 
(13.32) 
n=0 
From Eq. (13.10), 
C(z) = J^c(kT)z -k 
(13.33) 
k=Q 
Using Eq. (13.32) with t = kT,we 
obtain 
oc 
c{kT) = 
Yjr{nT)g{kT-nT) 
n=0 
Substituting Eq. (13.34) into Eq. (13.33), we obtain 
DO 
OO 
-k 
(13.34) 
(13.35) 
*=o «=o 

13.4 Transfer Functions 
737 
Letting m — k — n, we find 
c w = £ 
Y,
r^
nT^
mT)
z~
(m+n) 
oc 
oo 
w+rt=0 «=0 
= 
{f^g(mT)z-m\\f2r(nT)z-n 
(13.36) 
,w=0 
n=0 
where the lower limit, m + n, was changed to m. The reasoning is that m + n = 0 
yields negative values of m for all n > 0. But, since g(mT) = 0 for all m < 0, m is not 
less than zero. Alternately, g(t) = 0 for t < 0. Thus, n = 0 in the first sum's lower limit. 
Using the definition of the z-transform, Eq. (13.36) becomes 
C(z) = Y,8{mT)z-mY,r{nT)z-n 
= 
G(z)R(z) 
m=0 
n=0 
(13.37) 
Equation (13.37) is a very important result, since it shows that the transform of the 
sampled output is the product of the transforms of the sampled input and the pulse 
transfer function of the system. Remember that although the output of the system is 
a continuous function, we had to make an assumption of a sampled output (phantom 
sampler) in order to arrive at the compact result of Eq. (13.37). 
One way of finding the pulse transfer function, G(z), is to start with G(s), find 
g(t), and then use Table 13.1 to find G(z). Let us look at an example. 
Example 13.4 
Converting G^(s) in Cascade with z.o.h. to G(z) 
PROBLEM: Given a z.o.h. in cascade with G\ {s) = {s + 2)/(s + 1) or 
1 - e~Ts {s + 2) 
G(*) = 
ft+i: 
(13.38) 
find the sampled-data transfer function, G(z), if the sampling time, T, is 0.5 second. 
SOLUTION: Equation (13.38) represents a common occurrence in digital control 
systems, namely a transfer function in cascade with a zero-order hold. Specifically, 
Gi(s) = (s + 2)/(s 4-1) is in cascade with a zero-order hold, (1 - e~Ts)/s. We can 
formulate a general solution to this type of problem by moving the s in the 
denominator of the zero-order hold to G\{s), yielding 
G{s) = 
{l-e-T*)^-
from which 
G(z) = (1 - 
z'^z Gi(s)\ 
z - \ 
(Gi(s) 
(13.39) 
(13.40) 
Thus, begin the solution by finding the impulse response (inverse Laplace trans-
form) of Gi(s)/s. Hence, 
G2(s) = Gib) 
5 + 2 
B 
sis 
_A 
l) ~ 7 + s +1 
l 
s + l 
(13.41) 

738 
Chapter 13 
Digital Control Systems 
Trylt 13.1 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to find 
G\ (s) in Example 13.4 given 
G(z) in Eq. (13.46) 
num=0.213; 
den=0.607; 
k=l; 
T=0 . 5; 
Gz=zpk(num,den,K,T) 
Gs=d2c(Gz, ,zoh' ) 
MATLAB 
Symbolic Math 
Taking the inverse Laplace transform, we get 
g2(t)=2-e-< 
from which 
g2(kT) = 
2-e-kt 
Using Table 13.1, we find 
2z 
z 
G2(z) = z-l 
z—e -T 
Substituting T = 0.5 yields 
G^s)) 
2Z 
G2(z) = z 
From Eq. (13.40), 
z2 - 0.213z 
z-l 
z- 0.607 {z-l)(z~ 0.607) 
, . z-l 
z - 0.213 
G(z)= 
G2(z) = 
(13.42) 
(13.43) 
(13.44) 
(13.45) 
(13.46) 
z 
z - 0.607 
Students who are using MATLAB shouldnow run chl3pl in Appendix B. You 
will learn how to use MATLAB to convert G± (s) in cascade with a zero-
order hold to G(z). This exercise solves Example 13.4 using MATLAB. 
Students who are performing the MATLAB exercises and want to 
explore the added capability of MATLAB's Symbolic Math Toolbox 
should now run chl3sp3 in Appendix F located at www.wiley.com/ 
college/nise. MATLAB's Symbolic Math Toolbox yields an alterna-
tive method of finding the z-transform of a transfer function in 
cascade with a zero-order hold. Example 13 .4 will be solved using 
MATLAB and the Symbolic Math Toolbox with a method that follows 
closely the hand calculation shown in that example. 
MATLA8 
MATLAB 
MATLAB 
Students who are using MATLAB should now run chl3p2 in Appendix B. 
You will learn how to use MATLAB to convert G(s) toG(z) whenG(s) is 
not in cascade with a zero-order hold. This is the same as finding 
the z-transform of G(s) 
. 
Students who are using MATLAB shouldnow run chl3p3 in Appendix B. 
You will learn how to create digital transfer functions directly. 
Students who are using MATLAB should now run chl 3p4 in Appendix B. 
You will learn how to useMATLAB to convert G(z) to G(s) when G(s) is 
not in cascade with a zero-order hold. This is the same as finding 
the Laplace transform of G(z) . 
Trylt 13.2 
Use MATLAB, the Control 
System Toolbox, and the fol-
lowing statements to solve 
Skill-Assessment Exercise 13.3. 
Gs=zpk([],-4, 8) 
Gz=c2d(Gs, 0.25,'zoh') 
Skill-Assessment Exercise 13.3 
PROBLEM: Find G(z) for G(s) = 8/(s + 4) in cascade with a zero-
order sample and hold. The sampling period is 0.25 second. 
ANSWER: G(z) = 1.264/(z - 0.3679) 
The complete solution is located at www.wiley.com/college/nise. 
WileyPtUS 
Control Solutions 

13.5 Block Diagram Reduction 
739 
The major discovery in this section is that once the pulse transfer function, G(z), 
of a system is obtained, the transform of the sampled output response, C(z), for a given 
sampled input can be evaluated using the relationship C(z) — R(z)G(z). Finally, the 
time function can be found by taking the inverse ^-transform, as covered in Section 
13.3. In the next section, we look at block diagram reduction for digital systems. 
£ 13.5 Block Diagram Reduction 
Up to this point, we have defined the z-transform and the sampled-data system 
transfer function and have shown how to obtain the sampled response. Basically, we 
are paralleling our discussions of the Laplace transform in Chapters 2 and 4. We now 
draw a parallel with some of the objectives of Chapter 5, namely block diagram 
reduction. Our objective here is to be able to find the closed-loop sampled-data 
transfer function of an arrangement of subsystems that have a computer in the loop. 
When manipulating block diagrams for sampled-data systems, you must be careful 
to remember the definition of the sampled-data system transfer function (derived in the 
last section) to avoid mistakes. For example, z{Gi(s)G2{s)} ^ Gi(z)G2(z), 
where 
z{G\ (s)G2(s)} denotes the z-transform. The s-domain functions have to be multiplied 
together before taking the z-transform. In the ensuing discussion, we use the notation 
G{G2{s) to denote a single function that is G\(s)G2{s) after evaluating the product. 
Hence, z{Gi(S)G2(s)} 
= z{G1G2(s)} 
= GlG2{z) * 
Gl(z)G2(z). 
Let us look at the sampled-data systems shown in Figure 13.9. The sampled-
data systems are shown under the column marked s. Their z-transforms are shown 
under the column marked z. The standard system that we derived earlier is shown in 
Figure 13.9(a), where the transform of the output, C(z), is equal to R(z)G(z). This 
system forms the basis for the other entries in Figure 13.9. 
In Figure 13.9(6), there is no sampler between G\ (s) and G2 [s). Thus, we can think of 
a single function, G] (s)G2{s), denoted G\G%{$\ existing between the two samplers and 
yielding a single transfer function, as shown in Figure 13.9(a). Hence, the pulse transfer 
function is z{GiG2 (5)} = GiG2{z). The transform of the output, C(z) = 
R{z)GiG2{z). 
In Figure 13.9(c), we have the cascaded two subsystems of the type shown in Figure 
13.9(a). For this case, then, the z-transform is the product of the two z-transforms, or 
G2{z)G\(z). Hence the transform of the output C(z) = R(z)G2{z)G\ 
(z). 
flfeWff
0_Jg(^ 
R(s) 
c < ^ / o ^ 
Gx(s) /?(*)G,(s) . / " _ [/?(*)G,(s)]* | — 1 C(s) _/ _ C*(s) 
—O O 
• 
•• Gds) — ^ O Q 
» 
R(z) 
R(z) 
R(z) 
RGx(z) 
G{z) 
G2G\{z) 
G2(z)G](z) 
G2(z) 
C(z) 
C(z) 
C(z) 
C(z) 
(d) 
FIGURE 13.9 Sampled-data 
systems and their z-transforms 

740 
Chapter 13 
Digital Control Systems 
Finally, in Figure 13.9(d), we see that the continuous signal entering the 
sampler is R(s)Gi(s). Thus, the model is the same as Figure 13.9(a) with R(s) 
replaced by R(s)Gi(s), and G2(s) in Figure 13.9(d) replacing G(s) in Figure 13.9(a). 
The z-transform of the input to G2(s) is z{R(s)G1(s)} = z{i?Gi(s)} = RGi(z). The 
pulse transfer function for the system G2(s) is G2(z). Hence, the output 
C(z) = RG1{z)G2(z). 
Using the basic forms shown in Figure 13.9, we can now find the z-transform of 
feedback control systems. We have shown that any system, G(s), with sampled input 
and sampled output, such as that shown in Figure 13.9(a), can be represented as a 
sampled-data transfer function, G(z). Thus, we want to perform block diagram 
manipulations that result in subsystems, as well as the entire feedback system, that 
have sampled inputs and sampled outputs. Then we can make the transformation to 
sampled-data transfer functions. An example follows. 
Example 13.5 
Pulse Transfer Function of a Feedback System 
PROBLEM: Find the z-transform of the system shown in Figure 13.10(a). 
SOLUTION: The objective of the problem is to proceed in an orderly fashion, 
starting with the block diagram of Figure 13.10(a) and reducing it to the one shown 
in Figure 13.10(/). 
One operation we can always perform is to place a phantom sampler at the 
output of any subsystem that has a sampled input, provided that the nature of the 
signal sent to any other subsystem is not changed. For example in Figure 13.10(6), 
phantom sampler 54 can be added. The justification for this, of course, is that the 
R(s) + 
< / O 
51 
G(s) 
C(s) 
His) 
(«) 
a.s)sS QC*^), 
R{s}rS-R*(s) 
+ 
o 
* 
FIGURE 13.10 
Steps in block 
diagram reduction of a 
sampled-data system 
(figure continues) 
-0 
S3 
<mms) o ,v 
< / < 
si 
O 
G(s) 
c{S)^y 
c*(S) 
SA 
SI 
Note: Phantom samplers are shown in color. 

13.5 Block Diagram Reduction 
741 
R(z) + 
G(z) 
C(z) 
GH(z) 
id) 
R(z) 
1 + GH(z) 
G(z) C(z) 
R(z) 
(e) 
G(z) 
1 + GH(z) 
(/) 
C(z) 
output of a sampled-data system can only be found at the sampling instants 
anyway, and the signal is not an input to any other block. 
Another operation that can be performed is to add phantom samplers 52 and 
53 at the input to a summing junction whose output is sampled. The justification for 
this operation is that the sampled sum is equivalent to the sum of the sampled 
inputs, provided, of course, that all samplers are synchronized. 
Next, move sampler 51 and G(s) to the right past the pickoff point, as shown 
in Figure 13.10(c). The motivation for this move is to yield a sampler at the input of 
G(s)H(s) to match Figure 13.9(b). Also, G(s) with sampler 51 at the input and 
sampler 54 at the output matches Figure 13.9(a). The closed-loop system now has a 
sampled input and a sampled output. 
G(s)H(s) with samplers 51 and 53 becomes GH(z), and G(s) with samplers 51 
and 54 becomes G(z), as shown in Figure 13.10(d). Also, converting R*(s) to R(z) 
and C*(s) to C(z), we now have the system represented totally in the z-domain. 
The equations derived in Chapter 5 for transfer functions represented with 
the Laplace transform can be used for sampled-data transfer functions with only a 
change in variables from 5 to z. Thus, using the feedback formula, we obtain the first 
block of Figure 13.10(e). Finally, multiplication of the cascaded sampled-data 
systems yields the final result shown in Figure 13.10(f). 
FIGURE 13.10 (Continued) 
Skill-Assessment Exercise 13.4 
PROBLEM: Find T(z) = C(z)/R(z) 
for the system shown in Figure 13.11. 
R(s) 
T 6 
S £K/O— 
—^ 
C(s) 
FIGURE 13.11 Digital system 
for Skill-Assessment Exercise 
13.4 
ANSWER: T(z) = 
GiG2(z] 
l + HG1G2(z) 
The complete solution is located at www.wiley.com/college/nise. 

742 
Chapter 13 
Digital Control Systems 
This section paralleled Chapter 5 by showing how to obtain the closed-loop, 
sampled-data transfer function for a collection of subsystems. The next section 
parallels the discussion of stability in Chapter 6. 
¢13.6 Stability 
The glaring difference between analog feedback control systems and digital feed-
back control systems, such as the one shown in Figure 13.12, is the effect that the 
sampling rate has on the transient response. Changes in sampling rate not only 
change the nature of the response from overdamped to underdamped, but also can 
turn a stable system into an unstable one. As we proceed with our discussion, these 
effects will become apparent. You are encouraged to be on the lookout. 
We now discuss the stability of digital systems from two perspectives: 
(1) z-piane and (2) s-plane. We will see that the Routh-Hurwitz criterion can be 
used only if we perform our analysis and design on the s-plane. 
Digital System Stability via the z-Plane 
In the 5-plane, the region of stability is the left half-plane. If the transfer function, G(s), 
is transformed into a sampled-data transfer function, G(z), the region of stability on the 
z-plane can be evaluated from the definition, z — eTs. Letting s = m +jto, we obtain 
-. _ 
£Ts _ 
eT(a+ja)) 
_ 
eaTe'}u>T 
= eaT (cos coT + j sin coT) 
= eaTZa>T 
(13.47) 
since (cos coT +;' sin coT) = IZ. coT. 
Each region of the s-plane can be mapped into a corresponding region on the 
z-plane (see Figure 13.13). Points that have positive values of a are in the right half 
FIGURE 13.12 A lathe using digital numerical control (© David J. Green—Industry/Alamy) 

13.6 Stability 
743 
*-plane 
*-Re 
FIGURE 13.13 
Mapping 
regions of the s-plane onto the 
z-plane 
of the i'-plane, region C. From Eq. (13.47), the magnitudes of the mapped points are 
eaT > 1. Thus points in the right half of the s-plane map into points outside the unit 
circle on the z-plane. 
Points on the yw-axis, region B, have zero values of a and yield points on the 
z-plane with magnitude — 1, the unit circle. Hence, points on the /<w-axis in the 
5-plane map into points on the unit circle on the z-plane. 
Finally, points on the s-plane that yield negative values of a a(left-half-plane 
roots, region A) map into the inside of the unit circle on the z-plane. 
Thus, a digital control system is (1) stable if all poles of the closed-loop transfer 
function, T(z), are inside the unit circle on the z-plane, (2) unstable if any pole is 
outside the unit circle and/or there are poles of multiplicity greater than one on the 
unit circle, and (3) marginally stable if poles of multiplicity one are on the unit circle 
and all other poles are inside the unit circle. Let us look at an example. 
Example 13.6 
Modeling and Stability 
PROBLEM: The missile shown in Figure 13.14(a) can be aerodynamically controlled 
by torques created by the deflection of control surfaces on the missile's body. The 
commands to deflect these control surfaces come from a computer that uses tracking 
data along with programmed guidance equations to determine whether the missile is 
on track. The information from the guidance equations is used to develop flight-
control commands for the missile. A simplified model is shown in Figure 13.14(6). 
Here the computer performs the function of controller by using tracking information 
to develop input commands to the missile. An accelerometer in the missile detects the 
actual acceleration, which is fed back to the computer. Find the closed-loop digital 
transfer function for this system and determine if the system is stable for K = 20 and 
K = 100 with a sampling interval of T = 0.1 second. 
SOLUTION: The input to the control system is an acceleration command developed 
by the computer. The computer can be modeled by a sample-and-hold. The s-plane 
model is shown in Figure 13.14(c). The first step in finding the z-plane model is to 
find G(z), the forward-path transfer function. From Figure 13.14(c) or (d), 
t f r ) - 1 - * " " * * , 
(13.48) 
s 
s(s + a) 
v 
' 

744 
Chapter 13 
Digital Control Systems 
Control 
surfaces 
Fraeking 
data 
A/D —»- Computer 
11 
—^- D/A 
Amplifier 
K 
A/D 
—1» 
Airframe 
dynamics 
Missile 
acceleration 
Acceleration 
S a mP l e 
command 
Hold 
</&i<gh— i-e -Ts 
Airframe 
Amplifier 
dynamics 
M i s s i l e 
acceleration 
A' 
27 
s(s + 27) 
Sample 
-oV 
(c) 
FIGURE 13.14 Finding stability 
of a missile control system: 
a. missile; b. conceptual block 
diagram; c. block diagram; 
d. block diagram with 
equivalent single sampler 
command 
tfc 
— 
Sample 
y U 
U 
•" 
Hold 
\-e-Ts 
s 
Amplifier 
K 
Airframe 
dynamics 
27 
s(s + 27) 
acceleration 
id) 
where a = 27. The z-transform, G(z), is (1 - z~l)z{Ka/[s2(s 
+ a)]}. 
The term Ka/[s2(s -+- a)] is first expanded by partial fractions, after which we 
find the z-transform of each term from Table 13.1. Hence, 
Thus, 
Ka 
s2(s + a) 
= Kz s2(s + a 
Tz 
z/a 
^ 2 
s 
s + a) 
z/a 
1 
( z _ l ) 2 
z - l ' z - e - ° r 
Tz 
(1 - e-"r)z 
( z - l ) 2 
fl(z-l)(z-e-flT) 
G(z) = K 
T(z - e-aT) 
-{z-l) 1-e -aT 
(z-l)(z-e-°T) 
(13.49) 
(13.50) 

13.6 Stability 
745 
Letting T = 0.1 and a = 27, we have 
K(0.0655z +0.02783) 
O W - 
(Z-1)(,-0.0672) 
(13"51) 
Finally, we find the closed-loop transfer function, r(z), for a unity feedback system: 
T(T)= 
gS*j 
*(0.0655z + 0.02783) 
W 
1 + G(z) 
z2 + (0.0655A: -1.0672)^ + (0.02783^ + 0.0672) 
l 
' 
; 
The stability of the system is found by finding the roots of the denominator. 
For K = 20, the roots of the denominator are 0.12 ± /0.78. The system is thus stable 
for K = 20, since the poles are inside the unit circle. For K = 100, the poles are at 
-0.58 and -4.9. Since one of the poles is outside the unit circle, the system is 
unstable for K = 100. 
Students who are using MATLAB should now run chl3p5 in Appendix B. 
You will learn how to use MATLAB to determine the range of K for 
stability in a digital system. This exercise solves Example 13.6 
using MATLAB. 
MATLAB 
In the case of continuous systems, the determination of stability hinges upon 
our ability to determine whether the roots of the denominator of the closed-loop 
transfer function are in the stable region of the s-plane. The problem for high-order 
systems is complicated by the fact that the closed-loop transfer function denomina-
tor is in polynomial form, not factored form. The same problem surfaces with closed-
loop sampled-data transfer functions. 
Tabular methods for determining stability, such as the Routh-Hurwitz method 
used for higher-order continuous systems, exist for sampled-data systems. These 
methods, which are not covered in this introductory chapter to digital control systems, 
can be used to determine stability in higher-order digital systems. If you wish to go 
further into the area of digital system stability, you are encouraged to look at Raible's 
tabular method or Jury's stability test for determining the number of a sampled-data 
system's closed-loop poles that exist outside the unit circle and thus indicate instability.2 
The following example demonstrates the effect of sampling rate on the stability 
of a closed-loop feedback control system. All parameters are constant except for the 
sampling interval, T. We will see that varying T will lead us through regions of 
stability and instability just as though we were varying the forward-path gain, K. 
Example 13.7 
Range of rfor Stability 
PROBLEM: Determine the range of sampling interval, T, that will make the system 
shown in Figure 13.15 stable, and the range that will make it unstable. 
SOLUTION: Since H(s) = 1, the z-transform of the closed-loop system, T(z), is 
found from Figure 13.10 to be 
^ = 1 ¾ 
(13-53) 
'• A discussion of Raible's tabular method and Jury's stability test can be found in Kuo (1980:278-286). 

746 
Chapter 13 
Digital Control Systems 
FIGURE 13.15 Digital system 
for Example 13.7 
m+< 
s 5—a o-* 
r 
T 
Hold 
1 - . - " 
s 
Plant 
10 
i + 1 
cm 
To find G(z), first find the partial-fraction expansion of G(s). 
1 - e~Ts 
G(s) = 10 , * 
v 
s(s + l) 
Taking the z-transform, we obtain 
= 1 0 ^ - ^ 6 - J T T ) 
<13-54) 
G(z) = lQ(z-l) 
z - 1 
z — e~T = 10 (1-e ~T\ 
- 
e-T> 
z-e 
Substituting Eq. (13.55) into (13.53) yields 
10(1 -e~T) 
T(z) = z-(lle-T--lO) 
(13.55) 
(13.56) 
The pole of Eq. (13.56), (lie"-7" — 10), monotonically decreases from +1 to -1 for 
0 < T < 0.2. For 0.2 < T < oo, (ll<rr - 10) monotonically decreases from -1 to 
—10. Thus, the pole of T(z) will be inside the unit circle, and the system will be 
stable if 0 < T < 0.2. In terms of frequency, where / = 1/7, the system will be 
stable as long as the sampling frequency is 1/0.2 = 5 hertz or greater. 
We now have found, via the z-plane, that sampled systems are stable if their 
poles are inside the unit circle. Unfortunately, this stability criterion precludes the 
use of the Routh-Hurwitz criterion, which detects roots in the right half-plane rather 
than outside the unit circle. However, another method exists that allows us to use the 
familiar s-plane and the Routh-Hurwitz criterion to determine the stability of a 
sampled system. Let us introduce this topic. 
Bilinear Transformations 
Bilinear transformations give us the ability to apply our s-plane analysis and design 
techniques to digital systems. We can analyze and design on the s-plane as we have 
done in Chapters 8 and 9 and then, using these transformations, convert the results to 
a digital system that contains the same properties. Let us look further into this topic. 
We can consider z — eT& and its inverse, s = (l/T) In z, as the exact transfor-
mations between z and s. Thus, if we have G(z) and substitute z = eTs, we obtain 
G(eTs) as the result of converting to s. Similarly, if we have G(s) and substitute 
5 = (l/7)ln z, we obtain G((l/7)ln z) as the result of converting to z. Unfortunately, 
both transformations yield transcendental functions, which we of course take care of 
through the rather complicated z-transform. 
What we would like is a simple transformation that would yield linear 
arguments when transforming in both directions (bilinear) through direct substitu-
tion and without the complicated z-transform. 
Bilinear transformations of the form 
z -
as + b 
cs-\-d 
(13.57) 

13.6 Stability 
and its inverse, 
s = 
-dz + b 
cz — a 
(13.58) 
have been derived to yield linear variables in s and z. Different values of a, b, c, and d 
have been derived for particular applications and yield various degrees of accuracy 
when comparing properties of the continuous and sampled functions. 
For example, in the next subsection we will see that a particular choice 
of coefficients will take points on the unit circle and map them into points on 
the /<w-axis. Points outside the unit circle will be mapped into the right half-plane, and 
points inside the unit circle will be mapped into the left half-plane. Thus, we will be 
able to make a simple transformation from the z-plane to the 5-plane and obtain 
stability information about the digital system by working in the 5-plane. 
Since the transformations are not exact, only the property for which they are 
designed can be relied upon. For the stability transformation just discussed, we 
cannot expect the resulting G(s) to have the same transient response as G(z). 
Another transformation will be covered that will retain that property. 
Digital System Stability via the s-Plane 
In this subsection, we look at a bilinear transformation that maps ;'<w-axis points on 
the 5-plane to unit-circle points on the z-plane. Further, the transformation maps 
right-half-plane points on the 5-plane to points outside the unit circle on the £-plane. 
Finally, the transformation maps left-half-plane points on the 5-plane to points 
inside the unit circle on the z-plane. Thus, we are able to transform the denominator 
of the pulsed transfer function, D(z), to the denominator of a continuous transfer 
function, D(s), and use the Routh-Hurwitz criterion to determine stability. 
The bilinear transformation 
and its inverse 
s -
z 
z + l 
z - \ 
5 + 1 
5 - 1 
(13.59) 
(13.60) 
perform the required transformation (Kuo, 1995). We can show this fact as follows: 
Letting s = a+ jco and substituting into Eq. (13.60), 
{a+ 1)+jco 
z = 
from which 
a - 1) + jco 
yJ{a + l)2+co2 
a-V 
W 
Thus, 
\z\ < 1 when a < 0 
\z\ > 1 when a > 0 
:i3.6i) 
(13.62) 
(13.63a) 
(13.63b) 

748 
Chapter 13 
Digital Control Systems 
and 
\z\ = 1 when a = 0 
(13.63c) 
Let us look at an example that shows how the stability of sampled systems can be 
found using this bilinear transformation and the Routh-Hurwit criterion. 
Example 13.8 
Stability via Routh-Hurwitz 
PROBLEM: Given T(z) = N{z)/D(z), where D(z) = z3 - z2 - 0.2z + 0.1, use the 
Routh-Hurwitz criterion to find the number of z-plane poles of T(z) inside, outside, 
and on the unit circle. Is the system stable? 
SOLUTION: Substitute Eq. (13.60) into D{z) = 0 and obtain3 
53 - 1¾2 - 45s - 17 = 0 
(13.64) 
The Routh table for Eq. (13.64), Table 13.3, shows one root in the right-half-
plane and two roots in the left-half-plane. Hence, T(z) has one pole outside the unit 
circle, no poles on the unit circle, and two poles inside the unit circle. The system is 
unstable because of the pole outside the unit circle. 
TABLE 13.3 Routh table for Example 13.8 
1 
19 
-45.89 
-17 
-45 
-17 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 13.5 
PROBLEM: Determine the range of sampling interval, T, that will make the system 
shown in Figure 13.16 stable. 
Hold 
Plant 
m + AT* r/„ 
. 
*V. r 
T 
l-e~Ts 
s 
— * » 
20 
5 + 5 
m 
FIGURE 13.16 Digital system 
for Skill-Assessment 
Exercise 13.5 
ANSWER: 0 < T < 0.1022 second 
The complete solution is located at www.wiley.com/college/nise. 
3 Symbolic math software, such as MATLAB's Symbolic Math Toolbox, is recommended to reduce the 
labor required to perform the transformation. 

13.7 Steady-State Errors 
749 
PROBLEM: Given T(z) = N(z)/D(z), where D{z) = z3 - z2 - 0.5z + 0.3, use the 
Routh-Hurwitz criterion to find the number of z-plane poles of T(z) inside, outside, 
and on the unit circle. Is the system stable? 
ANSWER: T(z) has one pole outside the unit circle, no poles on the unit circle, and 
two poles inside the unit circle. The system is unstable. 
The complete solution is located at www.wiley.com/college/nise. 
In this section, we covered the concepts of stability for digital systems. Both 
z- and s-plane perspectives were discussed. Using a bilinear transformation, we are 
able to use the Routh-Hurwitz criterion to determine stability. 
The highlight of the section is that sampling rate (along with system parame-
ters, such as gain and component values) helps to determine or destroy the stability 
of a digital system. In general, if the sampling rate is too slow, the closed-loop digital 
system will be unstable. We now move from stability to steady-state errors, paral-
leling our previous discussion of steady-state errors in analog systems. 
f 
13.7 Steady-State Errors 
We now examine the effect of sampling upon the steady-state error for digital systems. 
Any general conclusion about the steady-state error is difficult because of the 
dependence of those conclusions upon the placement of the sampler in the loop. 
Remember that the position of the sampler could change the open-loop transfer 
function. In the discussion of analog systems, there was only one open-loop transfer 
function, G(s), upon which the general theory of steady-state error was based and from 
which came the standard definitions of static error constants. For digital systems, 
however, the placement of the sampler changes the open-loop transfer function and 
thus precludes any general conclusions. In this section, we assume the typical place-
ment of the sampler after the error and in the position of the cascade controller, and we 
derive our conclusions accordingly about the steady-state error of digital systems. 
Consider the digital system in Figure 13.17(a), where the digital computer is 
represented by the sampler and zero-order hold. The transfer function of the plant is 
represented by Gi(s) and the transfer function of the z.o.h. by (1 - e~Ts)/s. Letting G(s) 
equal the product of the z.o.h. and G\ (s), and using the block diagram reduction techniques 
for sampled-data systems, we can find the sampled error, E* (s) = E{z). Adding synchro-
nous samplers at the input and the feedback, we obtain Figure 13.17(6). Pushing G{s) 
and its input sampler to the right past the pickoff point yields Figure 13.17(c). Using 
Figure 13.9(a), we can convert each block to its z-transform, resulting in Figure 13.17(^/). 
From this figure, E(z) = R{z) - E(z)G(z), or 
^)=1¾ 
(
13-
65> 
The final value theorem for discrete signals states that 
e*{oo)=\im{l-Z-1)E{z) 
z-*\ 
(13.66) 

750 
Chapter 13 
Digital Control Systems 
T 
T 
1 - e~Ts 
s 
—»-
GM 
cid 
(a.) 
'<">• ^ o ^ ^ { g ) ^ c / « 
.£*(.?) 
T 
T 
G(s) 
-O 
(b) 
^k/o^L 
£*(*) 
-o 
G(s) -o 
</c^H 
C(.v) 
c.(w 
/ 0 d i ) r 
r 
m 
FIGURE 13.17 
a. Digital 
feedback control system for 
evaluation of steady-state errors; 
b. phantom samplers added; 
c. pushing G(s) and its samplers 
to the right past the pickoff 
point; d, z-transform 
equivalent system 
*fc) +fi 
— 
7) 
y 
E(z) 
G(z) 
C(r.) 
Qz) 
id) 
Note: Phantom samplers are shown in color. 
where e*(oo) is the final sampled value of e(t), or (alternatively) the final value of 
e(kT)4 
Using the final value theorem on Eq. (13.65), we find that the sampled steady-
state error, e*(oo), for unity negative-feedback systems is 
e*(oo) = lim(l - z-l)E(z) = Hm(l - z~l) 
r ^ L 
z-ii 
z~*i 
l + y-r(z) 
(13.67) 
Equation (13.67) must now be evaluated for each input: step, ramp, and parabola. 
Unit Step Input 
For a unit step input, R(s) = l/s. From Table 13.1, 
*(*) = 
- 1 
Substituting Eq. (13.68) into Eq. (13.67), we have 
1 
e*(oo) = 
I+ \im G{z) 
S-+1 
(13.68) 
(13.69) 
4 See Ogam (1987: 59) for a derivation. 

13.7 Steady-State Errors 
751 
Defining the static error constant, Kp, as 
we rewrite Eq. (13.69) as 
Kp=limG(z) 
(13.70) 
(13.tr 
Unit Ramp Input 
For a unit ramp input, R(z) = Tz/{z - 1 ) - Following the procedure for the step 
input, you can derive the fact that 
e*(oo) = 
& 
(13.72) 
where 
Kv = 
Lim(z-l)G(z) 
1 z-»l 
(13.73) 
Unit Parabolic Input 
For a unit parabolic input, R{z) = T2z/{z + l)/[2(z - 1)3]. Similarly, 
e*(oo) = Ka 
where 
Ka=±]im(z-l)2G(z) 
T z—i 
(13.74) 
[13.75) 
Summary of Steady-State Errors 
The equations developed above for e*(oo), Kp, Kv, and Ka are similar to the 
equations developed for analog systems. Whereas multiple pole placement at the 
origin of the .y-plane reduced steady-state errors to zero in the analog case, we can 
see that multiple pole placement at z = 1 reduces the steady-state error to zero for 
digital systems of the type discussed in this section. This conclusion makes sense 
when one considers that s = 0 maps into z = 1 under z = eTs. 
For example, for a step input, we see that if G(z) in Eq. (13.69) has one pole at 
z = 1, the limit will become infinite, and the steady-state error will reduce to zero. 
For a ramp input, if G(z) in Eq. (13.73) has two poles at z = 1, the limit will 
become infinite, and the error will reduce to zero. 
Similar conclusions can be drawn for the parabolic input and Eq. (13.75). Here, 
G(z) needs three poles at z = 1 in order for the steady-state error to be zero. Let us 
look at an example. 

752 
Chapter 13 
Digital Control Systems 
MATLAB 
Example 13.9 
Finding Steady-State Error 
PROBLEM: For step, ramp, and parabolic inputs, find the steady-state error for the 
feedback control system shown in Figure 13.17(a) if 
SOLUTION: First find G(s), the product of the z.o.h. and the plant. 
"1 
1 
1 
^ - ¾ ¾ ^ ^ 
^ + 1 
(13.77) 
The z-transform is then 
¢ ( 2 ) = 1 0 ( 1 - ^ 1 ) 
T 
Tz 
= 10 z - 1 
z-lf 
z-l 
- 1 + * - 1 
+ -0~T 
z-e 
-T 
For a step input, 
Kp = lim G(z) = oo; e*(oo) = 
For a ramp input, 
K 
For a parabolic input, 
* - i 
l + K. = 0 
/Cv = ilim(z-l)G(z) = 10; e*(oo) = ^ = 0.1 
K, 
1 
1 
(13.78) 
(13.79) 
(13.80) 
(13.81) 
K a ~ l i m ( z - l ) 2 G ( z ) = 0 ; 
e*(oo)=-±- = oc 
You will notice that the answers obtained are the same as the results obtained 
for the analog system. However, since stability depends upon the sampling interval, 
be sure to check the stability of the system after a sampling interval is established 
before making steady-state error calculations. 
Students who are using MATLAB should now run chl3p6 in Appendix B. 
You will learn how to use MATLAB to determine Kp, Kv, and Ka in a 
digital system as well as check the stability. This exercise 
solves Example 13.9 using MATLAB. 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 13.7 
PROBLEM: For step, ramp, and parabolic inputs, find the steady-state error for the 
feedback control system shown in Figure 13.17(a) if 
20(5 + 3) 
G l ( i ) = (, + 4)(, + 5) 
Let T = 0.1 second. Repeat for T = 0.5 second. 
ANSWER: Fori = 0.1second,Kp = 3, Kv = 0,and#fl = 0;for7/ = 0.5second,the 
system is unstable. 
The complete solution is located at www.wiley.com/college/nise. 

13.8 Transient Response on the z-Plane 
753 
In this section, we discussed and evaluated the steady-state error of digital 
systems for step, ramp, and parabolic inputs. The equations for steady-state error 
parallel those for analog systems. Even the definitions of the static error constants 
were similar. Poles at the origin of the s-plane for analog systems were replaced with 
poles at +1 on the z -plane to improve the steady-state error. We continue our 
parallel discussion by moving into a discussion of transient response and the root 
locus for digital systems. 
^ 13.8 Transient Response on the /-Plane 
Recall that for analog systems a transient response requirement was specified by 
selecting a closed-loop, s-plane pole. In Chapter 8, the closed-loop pole was on the 
existing root locus, and the design consisted of a simple gain adjustment. If the 
closed-loop pole was not on the existing root locus, then a cascade compensator was 
designed to reshape the original root locus to go through the desired closed-loop 
pole. A gain adjustment then completed the design. 
In the next two sections, we want to parallel the described analog methods and 
apply similar techniques to digital systems. For this introductory chapter, we will 
parallel the discussion through design via gain adjustment. The design of compen-
sation is left to you to pursue in an advanced course. 
Chapter 4 established the relationships between transient response and the 
5-plane. We saw that vertical lines on the s-plane were lines of constant settling time, 
horizontal lines were lines of constant peak time, and radial lines were lines of 
constant percent overshoot. In order to draw equivalent conclusions on the z-plane, 
we now map those lines through z = esT. 
The vertical lines on the s-plane are lines of constant settling time and are 
characterized by the equation s — a\ + joy, where the real part, o\ = —4/Ts, is constant 
and is in the left-half-plane for stability. Substituting this into z — esT, we obtain 
z = e<nTeJ0T 
= riei<oT 
( 1 3 8 2) 
Equation (13.82) denotes concentric circles of radius rx. If o\ is positive, the circle has 
a larger radius than the unit circle. On the other hand, if a\ is negative, the circle has a 
smaller radius than the unit circle. The circles of constant settling time, normalized to 
the sampling interval, are shown in Figure 13.18 with radius eaxT = e~4^T^T\ 
Also, 
Ts/T = -4/ln(r), where r is the radius of the circle of constant settling time. 
The horizontal lines are lines of constant peak time. The lines are characterized 
by the equation s = 0 + jco\, where the imaginary part, co\ =TZ/TP, 
is constant. 
Substituting this into z = esT, we obtain 
z = eoTemT 
= e°Tej8x 
( 1 3 8 3 ) 
Equation (13.83) represents radial lines at an angle of 9\.\fa is negative, that section 
of the radial line lies inside the unit circle. If a is positive, that section of the radial 
line lies outside the unit circle. The lines of constant peak time normalized to the 
sampling interval are shown in Figure 13.18. The angle of each radial line is 
coiT = 0i = 7t/(Tp/T), 
from which Tp/T = n/di. 
Finally, we map the radial lines of the s-plane onto the z-plane. Remember, 
these radial lines are lines of constant percent overshoot on the s-plane. From Figure 
13.19, these radial lines are represented by 
°- = -tan(sin-V) = - 
* _ 
(13.84) 

754 
Chapter 13 
Digital Control Systems 
FIGURE 13.18 Constant 
damping ratio, normalized 
settling time, and normalized 
peak time plots on the z-plane 
Hence, 
s = a +jco = -co-
C 
+ ja> 
yfi-f 
Transforming Eq. (13.85) to the z-plane yields 
Z = esT = e^&^e** 
= eT^W 1^ 1) ZcoT 
[13.85) 
(13.86) 
Constant percent 
overshoot line 
s= a + jco 
FIGURE 13.19 
Thes-plane 
sketch of constant percent 
overshoot line 
i-plane 

13.9 Gain Design on the z-Plane 
755 
Thus, given a desired damping ratio, £, Eq. (13.86) can be plotted on the z-plane 
through a range of a>Tas shown in Figure 13.18. These curves can then be used as 
constant percent overshoot curves on the z-plane. 
This section has set the stage for the analysis and design of transient 
response for digital systems. In the next section, we apply the results to digital 
systems using the root locus. 
m + 
( 
13.9 Gain Design on the z-Plane 
In this section, we plot root loci and determine the gain required for stability 
as well as the gain required to meet a transient response requirement. Since 
the open-loop and closed-loop transfer functions for the generic digital 
system shown in Figure 13.20 are identical to the continuous system except 
for a change in variables from s to z, we can use the same rules for plotting a 
root locus. 
However, from our previous discussion, the region of stability on the 
z-plane is within the unit circle and not the left half-plane. Thus, in order to 
determine stability, we must search for the intersection of the root locus with the unit 
circle rather than the imaginary axis. 
In the last section, we derived the curves of constant settling time, peak time, 
and damping ratio. In order to design a digital system for transient response, we find 
the intersection of the root locus with the appropriate curves as they appear on the z-
plane in Figure 13.18. Let us look at the following example. 
*<& 
G(z) 
C(z) 
H(z) 
FIGURE 13.20 
Generic digital feedback 
control system 
Example 13.10 
Stability Design via Root Locus 
PROBLEM: Sketch the root locus for the system shown in Figure 13.21. Also, 
determine the range of gain, K, for stability from the root locus plot. 
m it>) 
*Vy 
1 
K(z+l) 
(2-1 )(z-0.5) 
C(z) 
FIGURE 13.21 Digital 
feedback control for 
Example 13.10 
SOLUTION: Treat the system as if z were s, and sketch the root locus. The result is 
shown in Figure 13.22. Using the root locus program discussed in Appendix H.2 at 
www.wiley.com/college/nise, search along the unit circle for 180°. Identification of 
the gain, K, at this point yields the range of gain for stability. Using the program, we 
find that the intersection of the root locus with the unit circle is 1Z60°. The gain at 
this point is 0.5. Hence, the range of gain for stability is 0 < K < 0.5. 
Students who are using MATLAB should now run chl3p7 in Appendix B . 
You will learn how to use MATLAB to plot a root locus on the z-plane 
as well as superimpose the unit circle. You will learn how to 
select interactively the intersection of the root locus and the 
unit circle to obtain the value of gain for stability. This 
exercise solves Example 13.10 using MATLAB. 
MATLAB 

756 
Chapter 13 
Digital Control Systems 
2-plane 
1.50 
Unit circle 
Root locus 
3.00 
Re 
-3.00 -
FIGURE 13.22 
Root locus for the system of Figure 13.21 
In the next example, we design the value of gain, K, in Figure 13.21 to meet a 
transient response specification. The problem is handled similarly to the analog system 
design, where we found the gain at the point where the root locus crossed the specified 
damping ratio, settling time, or peak time curve. In digital systems, these curves are as 
shown in Figure 13.18. In summary, then, draw the root locus of the digital system and 
superimpose the curves of Figure 13.18. Then find out where the root locus intersects the 
desired damping ratio, settling time, or peak time curve and evaluate the gain at that 
point. In order to simplify the calculations and obtain more accurate results, draw a radial 
line through the point where the root locus intersects the appropriate curve. Measure the 
angle of this line and use the root locus program in Appendix H.2 at www.wiley.com/ 
college/nise to search along this radial line for the point of intersection with the root locus. 
Example 13.11 
Transient Response Design via Gain Adjustment 
PROBLEM: For the system of Figure 13.21, find the value of gain, K, to yield a 
damping ratio of 0.7. 
SOLUTION: Figure 13.23 shows the constant damping ratio curves superimposed 
over the root locus for the system as determined from the last example. Draw a 
radial line from the origin to the intersection of the root locus with the 0.7 damping 
ratio curve (a 16.62° line). The root locus program discussed in Appendix H.2 at 
www.wiley.com/college/nise can now be used to obtain the gain by searching along 
a 16.62° line for 180°, the intersection with the root locus. The results of the 
program show that the gain, K, is 0.0627 at 0.719 +/0.215, the point where the 0.7 
damping ratio curve intersects the root locus. 

13.9 Gain Design on the z-PIane 
757 
Root locus 
«•» Re 
FIGURE 13.23 
Root locus for 
the system of Figure 13.21 with 
constant 0.7 damping ratio 
curve 
We can now check our design by finding the unit sampled step response of the 
system of Figure 13.21. Using our design, K = 0.0627, along with R(z) = z/(z - 1), 
a sampled step input, we find the sampled output to be 
R(z)G{z) 
0.0627z2 + 0.0627z 
C(z) = 1 + G{z) 
z3 - 2.4373z2 + 2z- 
0.5627 
(13.87) 
Performmg the indicated division, we obtain the output valid at the sampling 
instants, as shown in Figure 13.24. Since the overshoot is approximately 5%, the 
requirement of a 0.7 damping ratio has been met. You should remember, however, 
that the plot is valid only at integer values of the sampling instants. 
Students who are using MATLAB should now run chl3p8 in Appendix B. 
You will learn how to use MATLAB to plot a root locus on the z-planeas 
well as superimpose a grid of damping ratio curves . You will learn 
how to obtain the gain and a closed-loop step response of a digital 
system after interactively selecting the operating point on the 
root locus. This exercise solves Example 13.11 using MATLAB. 
10 
12 
Sampling instant 
Note: Valid only at integer values of sampling instant 
MATLAB 
FIGURE 13.24 
Sampled step 
response of the system of 
Figure 13.21 with K = 0.0627 

758 
Chapter 13 
Digital Control Systems 
Trylt 13.3 
Use MATLAB, the Control System 
Toolbox, and the following statements 
to solve Skill-Assessment Exercise 
13.8. 
Gz=zpk(-0.5,[0.2 5,0.75], . . . 
1, []) 
r l o c u s (Gz) 
z g r i d ( 0 . 5 , [ ]) 
[K, p] = rlocfind (Gz) 
Note: When the root locus appears, 
click on the intersection of the 0.5 
damping ratio curve and the root locus 
to calculate the gain. 
Skill-Assessment Exercise 13.8 
PROBLEM: For the system of Figure 13.20 where H(z) = 1 and 
K(z +0.5) 
{Z) 
(z-0.25)(z-0.75) 
find the value of gain, K, to yield a damping ratio of 0.5. 
ANSWER: 
K = 0.31 
The complete solution is at www.wiley.com/college/nise. 
Simulink 
Gui Toi 
MATLAB's Simulink provides an alternative method of simulating 
digital systems to obtain the time response. Students who are 
performing the MATLAB exercises and want to explore the added 
capability of Simulink should now consult Appendix C, MATLAB's 
Simulink Tutorial. Example C . 4 in the tutorial shows how to use 
Simulink to simulate digital systems. 
MATLAB's LTI Viewer provides another method of simulating digital 
systems to obtain the time response. Students who are performing 
the MATLAB exercises and want to explore the added capability of 
MATLAB's LTI Viewer should now consult Appendix E at www.wiley. 
com/college/nise, which contains a tutorial on the LTI Viewer as 
well as some examples. One of the illustrative examples, Example 
E. 5, finds the closed-loop step response of a digital system using 
the LTI Viewer. 
In this section, we used the root locus and gain adjustment to design the 
transient response of a digital system. This method suffers the same drawbacks as 
when it was applied to analog systems; namely, if the root locus does not intersect a 
desired design point, then a simple gain adjustment will not accomplish the design 
objective. Techniques to design compensation for digital systems can then be 
applied. 
( 
13.10 Cascade Compensation via the s-Plane 
In previous sections of this chapter, we analyzed and designed digital systems 
directly in the z-domain up to and including design via gain adjustment. We are 
now ready to design digital compensators, such as those covered in Chapters 9 and 
11. Rather than continuing on this path of design directly in the z-domain, we depart 
by covering analysis and design techniques that allow us to make use of previous 
chapters by designing on the s-plane and then transforming our s-plane design to a 

13.10 Cascade Compensation via the s-Plane 
759 
digital implementation. We covered one aspect of s-plane analysis in Section 13.6, 
where we used a bilinear transformation to analyze stability. We now continue with 
s-plane analysis and design by applying it to cascade compensator design. Direct 
design of compensators on the z-plane is left for a dedicated course in digital control 
systems. 
Cascade Compensation 
In order to perform design in the s-plane and then convert the continuous 
compensator to a digital compensator, we need a bilinear transformation that 
will preserve, at the sampling instants, the response of the continuous compen-
sator. The bilinear transformation covered in Section 13.6 will not meet that 
requirement. A bilinear transformation that can be performed with hand 
calculations and yields a digital transfer function whose output response at 
the sampling instants is approximately the same as the equivalent analog 
transfer function is called the Tustin transformation. 
This transformation is 
used to transform the continuous compensator, Gc(s), to the digital compensa-
tor, Gc{z). The Tustin transformation is given by5 
(13.88) 
and its inverse by 
(13.89) 
As the sampling interval, T, gets smaller (higher sampling rate), the 
designed digital compensator's output yields a closer match to the analog 
compensator. If the sampling rate is not high enough, there is a discrepancy 
at higher frequencies between the digital and analog filters' frequency responses. 
Methods are available to correct the discrepancy, but they are beyond the scope 
of our discussion. The interested reader should investigate the topic of prewarp-
ing, covered in books dedicated to digital control and listed in the Bibliography 
at the end of this chapter. 
Astrom and Wittenmark {1984) have developed a guideline for selecting the 
sampling interval, T. Their conclusion is that the value of Tin seconds should be in 
the range 0.15/co^M to 0.5/co^M, where a><pM is the zero dB frequency (rad/s) of the 
magnitude frequency response curve for the cascaded analog compensator and 
plant. 
In the following example, we will design a compensator, Gc(s), to meet the 
required performance specifications. We will then use the Tustin transformation to 
obtain the model for an equivalent digital controller. In the next section, we will 
show how to implement the digital controller. 
5 See Ogata (1987: 315-318) for a derivation. 

7 6 0 
Chapter 13 
Digital Control Systems 
Example 13.12 
Digital Cascade Compensator Design 
PROBLEM: For the digital control system of Figure 13.25(a), where 
Gp{s)~ 
s(s + 6)(s + 10) 
(13.90) 
design a digital lead compensator, Gc{z), as shown in Figure 13.25(c), so that the 
system will operate with 20% overshoot and a settling time of 1.1 seconds. Create 
your design in the ^-domain and transform the compensator to the z-domain. 
Digital 
controller 
Plant 
m + 
Ms) 
£ 0 = * A/D 
Digital 
computer 
D/A 
GM 
C(s) 
compensator 
Plant 
R(s) + 7) m* 
P 
Gc(s) 
Gp(s) 
C(s) 
m 
Digital 
lead 
compensator 
Plant with 
sample-and-hold 
m + 7) £(z). 
P 
GM 
Gpiz) 
m 
(c) 
FIGURE 13.25 
a. Digital control system showing the digital computer performing compen-
sation; b. continuous system used for design; c. transformed digital system 
SOLUTION: Using Figure 13.25(6), design a lead compensator using the techniques 
described in Chapter 9 or 11. The design was created as part of Example 9.6, where 
we found that the lead compensator was 
Gc(s) = 1977'(s + 6) 
(s + 29.1) 
(13.91) 

13.10 Cascade Compensation via the s-Plane 
761 
Using Eqs. (13.90) and (13.91), we find that the zero dB frequency, a>$M, for 
Gp(s)Gc(s) is 5.8 rad/s. Using the guideline described by Astrom and Wittenmark 
{1984), the lowest value of T should be in the range 0,15/6¾ = 0.026 to 0.5/w<j>M = 
0.086 second. Let us use T = 0.01 second. 
Substituting Eq. (13.88) into Eq. (13.91) with T = 0.01 second yields 
Gc(z) = 1778z -1674 
z - 0.746 
(13.92) 
The z-transform of the plant and zero-order hold, found by the method discussed in 
Section 13.4 with T = 0.01 second, is 
GP{z) = (1.602 x lO'V) + (6.156 x 10~7z) + (1.478 x 10~7) 
z3 - 2.847z2 + 2.699^ - 0.8521 
(13.93) 
The time response in Figure 13.26 (T = 0.01 s) shows that the compensated 
closed-loop system meets the transient response requirements. The figure also 
shows the response for a compensator designed with sampling times at the 
extremes of Astrom and Wittenmark's guideline. 
Students who are usingMATLAB should now run chl3p9 in Appendix B. 
You will learn how to use MATLAB to design a digital lead compen-
sator using the Tustin transformation. This exercise solves 
Example 13.12 usingMATLAB. 
MATLAB 
Time (seconds) 
Note: Valid only at integer values of sampling instant 
FIGURE 13.26 
Closed-loop response for the compensated system of Example 13.12 
showing effect of three different sampling frequencies 

762 
Chapter 13 
Digital Control Systems 
WileyPLUS 
Control Solutions 
Skill-Assessment Exercise 13.9 
PROBLEM: In Example 11.3, a lead compensator was designed for a unity feed-
back system whose plant was 
G(s) = 
WOK 
s{s + 36){s + 100) 
The design specifications were as follows: percent overshoot = 20%, peak time 
0.1 second, and Kv = 40. In order to meet the requirements, the design yielded 
K = 1440 and a lead compensator, 
Ge{s) = 2.38 ^ + 25.3 
s + 60.2 
If the system is to be computer controlled, find the digital controller, Gc(z). 
7 - 0 975 
ANSWER: GAz) = 2.34 
nnA„ 
, T = 0.001 second 
Z — 0.9416 
The complete solution is at www.wiley.com/college/nise. 
Now that we have learned how to design a digital cascade compensator, Gc(z), 
the next section will teach us how to use the digital computer to implement it. 
( 
13.11 Implementing the Digital Compensator 
The controller, Gc(z), can be implemented directly via calculations within the digital 
computer in the forward path as shown in Figure 13.27. Let us now derive a 
numerical algorithm that the computer can use to emulate the compensator. We 
will find an expression for the computer's sampled output, x*(t), whose transforms 
are shown in Figure 13.27 as X{z). We will see that this expression can be used to 
program the digital computer to emulate the compensator. 
Consider a second-order compensator, Gc(z), 
Gc(z) = X{z) 
E{z) 
Q3Z3 + a2z2 a\z + «o 
b2z2 + b\z + b0 
(13.94) 
Cross-multiplying, 
{b2z2 + bxz + b0)X(z) = («3z3 + a2z2 + fliz + a0)E(z) 
(13.95) 
Solving for the term with the highest power of z operating on the output, X(z), 
b2z2X{z) = (a3z3 + a2z2 + mz + a0)E(z) - {bxz + b0)X{z) 
(13.96) 
FIGURE 13.27 Block diagram 
showing computer emulation 
of a digital compensator 
emu 
E(z) 
Computer 
lating compensator 
Gc(z) 
X(z) 
Plant with 
sample-and-hold 
G(z) 
Clzl 

13.11 Implementing the Digital Compensator 
763 
e*(t) 
\ 
Delay 
Tseconds 
e-it-T) „ 
' 
Delay 
Tseconds 
e-{t-2D 
«2 
a, 
ao 
b2 
+ ' 
">\ 
. ^ 
9 .fvv -
b2 
**(') 
Delay 
Tseconds 
% 
x'U-T) 
Delay 
Tseconds 
^ 
x*(t-2T) 
FIGURE 13.28 Flowchart for a 
second-order digital 
compensator (Reprinted with 
permission of John Wiley & 
Sons, Inc.) 
Dividing by the coefficient of X{z) on the left-hand side of Eq. (13.96) yields 
X{z) = a3 
£ 2 , £i_ -i 
b2 
b2 
%-> 
*<-' 
l ^ -
1 + l ^ X{z) 
(13.97) 
Finally, taking the inverse z-transform, 
-f/(^n+f/(^f/(t-T)^{t~2T) 
-^x*(t-T)-^x*{t-2T) 
D2 
b2 
(13.98) 
We can see from this equation that the present sample of the compensator output, 
x*(t), is a function of future (e*(f + T)) present (e*(t)) and past (e*(t-T)) 
and 
e*(t — 2T)) samples of e(t), along with past values of the output, x*(t — T) and 
x*(t — 2T). Obviously, if we are to physically realize this compensator, the output 
sample cannot be dependent upon future values of the input. Hence, to be 
physically realizable, «3 must equal zero for the future value of e{t) to be zero. 
We conclude that the numerator of the compensator's transfer function must be 
of equal or lower order than the denominator in order that the compensator be 
physically realizable. 
Now assume that a3 does indeed equal zero. Equation (13.98) now becomes 
*W-5'M+!*» 
bo 
T)+^-e*{t- 
2T) - ^-x*(t - 7 ) - -^x*(t - 27) 
b2 
kt 
bi 
(13.99) 
Hence, the output sample is a function of current and past input samples of the input 
as well as past samples of the output. Figure 13.28 shows the flowchart of the 
compensator from which a program can be written for the digital computer.6 The 
figure shows that the compensator can be implemented by storing several successive 
values of the input and output. The output is then formed by a weighted linear 
combination of these stored variables. Let us now look at a numerical example. 
6 For an excellent discussion on basic flowcharts to represent digital compensators, including the 
representation shown in Figure 13.28 and alternative flowcharts with half as many delays, see Chassaing 
(1999, pp. 135-143). 

764 
Chapter 13 
Digital Control Systems 
Example 13.13 
Digital Cascade Compensator Implementation 
PROBLEM: Develop a flowchart for the digital compensator defined by Eq. (13.100). 
X{z) 
z + 0.5 
Gc{z) = E(z) 
z2-0.5z 
+ 0.7 
SOLUTION: Cross-multiply and obtain 
{z2 - 0.5z + 0.7)X{z) = (z + 0.5)E(z) 
Solve for the highest power of z operating on the output, X(z), 
z2X(z) = (z + 0.5)E(z) - (-0.5z + 0.7)X{z) 
Solving for X(z) on the left-hand side, 
X{z) = (z~l + 0.5Z-2)E(Z) - (-0.5Z"1 +0.7z-2)X(z) 
(13.100) 
(13.101) 
(13.102) 
(13.103) 
Implementing Eq. (13.103) with the flowchart of Figure 13.29 completes the design. 
FIGURE 13.29 Flowchart to 
implement Gc(z) = z2 - 0.5z + 0.7 
(Reprinted with permission of 
John Wiley & Sons, Inc.) 
e*{i) 
Delay 
Tseconds 
e*(t-T) 
Delay 
Tseconds 
e*(t-2T) 
0.5 
X*(t) 
V -
-0.5 
0.7 
X* 
Delay 
T seconds 
t-T) 
Delay 
Tseconds 
x*{t-2T) 
Skill-Assessment Exercise 13.10 
PROBLEM: Draw a flowchart from which the compensator 
1899z2 - 376U + 1861 
C^Z'~ 
z2-1.908z +0.9075 
can be programmed if the sampling interval is 0.1 second. 
ANSWER: The complete solution is at www.wiley.com/college/nise. 

Case Studies 
765 
In this section, we learned how to implement a digital compensator. The 
resulting flowchart can serve as the design of a digital computer program for the 
computer in the loop. The design consists of delays that can be thought of as storage 
for each sampled value of input and output. The stored values are weighted and 
added. The engineer then can implement the design with a computer program. 
In the next section, we will put together the concepts of this chapter as we apply 
the principles of digital control system design to our antenna azimuth control system. 
Case Studies 
Antenna Control: Transient Design via Gain 
We now demonstrate the objectives of this chapter by turning to our ongoing 
antenna azimuth position control system. We will show where the computer is 
inserted in the loop, model the system, and design the gain to meet a transient 
response requirement. Later, we will design a digital cascade compensator. 
The computer will perform two functions in the loop. First, the computer will be 
used as the input device. It will receive digital signals from the keyboard in the form of 
commands, and digital signals from the output for closed-loop control. The keyboard 
will replace the input potentiometer, and an analog-to-digital (A/D) converter along 
with a unity gain feedback transducer will replace the output potentiometer. 
Figure 13.30(A) shows the original analog system, and Figure 13.30(6) shows 
the system with the computer in the loop. Here the computer is receiving digital 
signals from two sources: (1) the input via the keyboard or other tracking commands 
and (2) the output via an A/D converter. The plant is receiving signals from the digital 
computer via a digital-to-analog (D/A) converter and the sample-and-hold. 
Figure 13.30(6) shows some simplifying assumptions we have made. The 
power amplifier's pole is assumed to be far enough away from the motor's pole that 
we can represent the power amplifier as a pure gain equal to its dc gain of unity. 
Also, we have absorbed any preamplifier and potentiometer gain in the computer 
and its associated D/A converter. 
PROBLEM: Design the gain for the antenna azimuth position control system 
shown in Figure 13.30(6) to yield a closed-loop damping ratio of 0.5. Assume a 
sampling interval of T = 0.1 second. 
H*S* -
-3 
Pot 
0.64 
Preamj 
K 
Power 
amp 
100 
s+100 
Motor & loac 
—*-
2.083 
5(5+1.71) —^ 
Gears 
0.1 
e„^ 
(a) 
Computer 
&D/A 
Power 
amp 
Motor & load 
Gears 
AID 
+ (<?\ 
1 
Sample-and-
hold 
»• 
1 
2.083 
5(5+1.71) 
0.1 
% 
(b) 
Design 
FIGURE 13.30 
Antenna 
control system: a. analog 
implementation; b. digital 
implementation 

Chapter 13 
Digital Control Systems 
SOLUTION: Modeling the System: Our first objective is to model the system in the 
z-domain. The forward transfer function, G(s), which includes the sample-and-
hold, power amplifier, motor and load, and the gears, is 
G(s) = 1 - erTs 0.2083 
0.2083 ( 1 - e 7V 
s 
s(s + a) 
where a = 1.71, and T = 0.1. 
Since the z-transform of (1 — e~Ts) is (1 - z~r 
z-transform of a/[s2 (s + a)] is 
(13.104) 
s2(s + a) 
and, from Example 13.6, the 
s2 0 + a] 
Tz 
{l-e-al)z 
(z-1) 2 
a{z-l){z-e-aT) 
(13.105) 
the z-transform of the plant, G(z), is 
_, , 
0.2083.. 
_! 
a 
0.2083 
a" 
s2(s-{ 
aT - ( 1 - e-aT] \z + [(1 - e-aT) - aTe~aT] 
(13.106) 
(13.107) 
(z-l)(z-e-"T) 
Substituting the values for a and T, we obtain 
_ 9.846 x 10~4(z + 0.945) 
W ~ 
( z - l ) ( z - 0.843) 
Figure 13.31 shows the computer and plant as part of the digital feedback control 
system. 
Designing for Transient Response: Now that the modeling in the z-domain is 
complete, we can begin to design the system for the required transient response. We 
superimpose the root locus over the constant damping ratio curves in the z-plane, 
as shown in Figure 13.32. A line drawn from the origin to the intersection forms an 
8.58° angle. Searching along this line for 180°, we find the intersection to be 
(0.915 +/0.138), with a loop gain, 9.846 x 10"4#, of 0.0135. Hence, K = 13.71. 
Checking the design by finding the unit sampled step response of the closed-loop 
system yields the plot of Figure 13.33, which exhibits 20% overshoot (£ = 0.456). 
CHALLENGE: We now give you a case study to test your knowledge of this chapter's 
objectives: You are given the antenna azimuth position control system shown on 
the front endpapers, Configuration 2. Do the following: 
a. Convert the system into a digital system with T — 0.1 second. For the purposes 
of the conversion, assume that the potentiometers are replaced with unity gain 
transducers. Neglect power amplifier dynamics. 
b. Design the gain, K, for 16.3% overshoot. 
c. For your designed value of gain, find the steady-state error for a unit ramp input. 
d. Repeat Part b using MATLAB. 
Computer 
Plant = G(z) 
R(z) 
FIGURE 13.31 
Analog 
antenna azimuth position 
control system converted to a 
digital system 
<&~ 
9.846 x 10-4^ + 0.945) 
(z-l)(z-0.843) 
C(-) 

Case Studies 
767 
-0.2 -
-0.4 -
-0.6 -
0 
3 
4 
5 
6 
Time (seconds) 
Note: Valid only at integer values of sampling instant 
FIGURE 13.33 Sampled step response of the antenna 
azimuth position control system 
FIGURE 13.32 Root locus superimposed over constant 
damping ratio curve 
Antenna Control: Digital Cascade Compensator Design 
PROBLEM: Design a digital lead compensator to reduce the settling time by a 
factor of 2.5 from that obtained for the antenna azimuth control system in the 
previous Case Study problem in this chapter. 
SOLUTION: Figure 13.34 shows a simplified block diagram of the continuous 
system, neglecting power amplifier dynamics and assuming that the potentiometers 
are replaced with unity gain transducers as previously explained. 
We begin with an s-plane design. From Figure 13.33, the settling time is about 5 
seconds. Thus, our design requirements are a settling time of 2 seconds and a 
damping ratio of 0.5. The natural frequency is con = 4/(£T5) = 4rad/s. The com-
pensated dominant poles are located at — £a>„ ± jcon\/l — £2 = —2 ±/3.464. 
Designing a lead compensator zero to cancel the plant pole on the s-plane at 
—1.71 yields a lead compensator pole at - 4 . Hence the lead compensator is 
given by 
Gc(s) = 
1.71 
s + 4 
(13.108) 
Lead compensator 
Plant 
0,(.v) + <gH-
KGc(s) 
0.2083 
5(5+1.71) 
M 
FIGURE 13.34 
Simplified 
block diagram of antenna 
azimuth control system 

768 
Chapter 13 
Digital Control Systems 
Using root locus to evaluate the gain, K, at the design point yields 0.2083.K = 16, 
or K = 76.81. 
We now select an appropriate sampling frequency as described in Section 13.10. 
Using the cascaded compensator, 
76.81(. + 1.71) 
and plant, 
KGc{s) = 
GM = 
(. + 4) 
0.2083 
(13.109) 
(13.110) 
(13.111; 
. ( . + 1.71) 
the equivalent forward-path transfer function, Gc(s) = KGc(s)Gp(s), 
is 
Ge(s) = 
- ^ -
. ( . + 4) 
The magnitude frequency response of Eq. (13.111) is 0 dB at 3.1 rad/s. Thus, from 
Section 13.10, the value of the sampling interval, T, should be in the range 0.15/CD$M = 
0.05 to 0.5/&>4>M = 0.16 second. Let us choose a smaller value, say T = 0.025 second. 
Substituting Eq. (13.88) into Eq. (13.111), where T = 0.025, yields the digital 
compensator 
In order to simulate the digital system, we calculate the z-transform of the plant in 
Figure 13.34 in cascade with a zero-order sample-and-hold. The z-transform of the 
sampled plant is evaluated by the method discussed in Section 13.4 using 
T = 0.025. The result is 
i-5 
GP(z) = 6.418 x lQ-°z + 6.327 x 10 
z 2-1.958* + 0.9582 
-5 
(13.113) 
The step response in Figure 13.35 shows approximately 20% overshoot and a 
settling time of 2.1 seconds for the closed-loop digital system. 
FIGURE 13.35 Closed-loop 
digital step response for 
antenna control system with 
a lead compensator 
0 
0.5 
1 
1.5 
2 
2.5 
3 
Time (seconds) 
Note: Valid only at integer values of sampling instant 

Summary 
769 
e<m 
' 
Delay 
0.025 second 
e (M) 025) 
74.72 
-71.59 
+ 1 
T^yr 
-0.9048 
, *t*-
x-it) 
\ 
' 
Delay 
0.025 second 
).025) 
FIGURE 13.36 Flowchart for 
digital lead compensator. 
(Reprinted with permission of 
John Wiley & Sons, Inc.) 
We conclude the design by obtaining a flowchart for the digital compensator. Using 
Eq. (13.112), where we define KGc(z) = X(z)/E(z), and cross-multiplying yields 
(z - 0.9048)X(z) = (74.72z - 71.59)E(z) 
Solving for the highest power of z operating on X(z), 
zX{z) = (74.72z - 71.59)£(z) + 0.9048X(z) 
Solving for X(z), 
X{z) = (74.72 - 71.59^-1)^) + 0.9048^¾^ 
Implementing Eq. (13.116) as a flowchart yields Figure 13.36. 
(13.114) 
(13.115) 
(13.116) 
CHALLENGE: You are now given a case study to test your knowledge of this 
chapter's objectives. You are given the antenna azimuth position control system 
shown on the front endpapers, Configuration 2. Replace the potentiometers with 
unity gain transducers, neglect power amplifier dynamics, and do the following: 
a. Design a digital lead compensator to yield 10% overshoot with a 1-second peak 
time. Design in the s-plane and use the Tustin transformation to specify and 
implement a digital compensator. Choose an appropriate sampling interval. 
b. Draw a flowchart for your digital lead compensator. 
C. Repeat P a r t a u s i n g MATLAB. 
MATLAB 
^ Summary j | 
In this chapter, we covered the design of digital systems using classical methods. 
State-space techniques were not covered. However, you are encouraged to pursue 
this topic in a course dedicated to sampled-data control systems. 
We looked at the advantages of digital control systems. These systems can 
control numerous loops at reduced cost. System modifications can be implemented 
with software changes rather than hardware changes. 
Typically, the digital computer is placed in the forward path preceding the plant. 
Digital-to-analog and analog-to-digital conversion is required within the system to 
ensure compatibility of the analog and digital signals throughout the system. The 
digital computer in the loop is modeled as a sample-and-hold network along with any 
compensation that it performs. 
Throughout the chapter, we saw direct parallels to the methods used for 
5-plane analysis of transients, steady-state errors, and the stability of analog systems. 

Chapter 13 
Digital Control Systems 
The parallel is made possible by the z-transform, which replaces the Laplace 
transform as the transform of choice for analyzing sampled-data systems. The 
z-transform allows us to represent sampled waveforms at the sampling instants. 
We can handle sampled systems as easily as continuous systems, including block 
diagram reduction, since both signals and systems can be represented in the 
z-domain and manipulated algebraically. Complex systems can be reduced to a 
single block through techniques that parallel those used with the s-plane. Time 
responses can be obtained through division of the numerator by the denominator 
without the partial-fraction expansion required in the ^-domain. 
Digital systems analysis parallels the s-plane techniques in the area of stability. 
The unit circle becomes the boundary of stability, replacing the imaginary axis. 
We also found that the concepts of root locus and transient response are easily 
carried into the z-plane. The rules for sketching the root locus do not change. We can 
map points on the s-plane into points on the z-plane and attach transient response 
characteristics to the points. Evaluating a sampled-data system shows that the 
sampling rate, in addition to gain and load, determines the transient response. 
Cascade compensators also can be designed for digital systems. One method is 
to first design the compensator on the s-plane or via frequency response techniques 
described in Chapters 9 and 11, respectively. Then the resulting design is transformed 
to a digital compensator using the Tustin transformation. Designing cascade com-
pensation directly on the z-plane is an alternative method that can be used. 
However, these techniques are beyond the scope of this book. 
This introductory control systems course is now complete. You have learned 
how to analyze and design linear control systems using frequency-domain and state-
space techniques. This course is only a beginning. You may consider furthering your 
study of control systems by taking advanced courses in digital, nonlinear, and 
optimal control, where you will learn new techniques for analyzing and designing 
classes of systems not covered in this book. We hope we have whetted your appetite 
to continue your education in control systems engineering. 
^Review Questions ^ 
1. Name two functions that the digital computer can perform when used with 
feedback control systems. 
2. Name three advantages of using digital computers in the loop. 
3. Name two important considerations in analog-to-digital conversion that yield 
errors. 
4. Of what does the block diagram model for a computer consist? 
5. What is the z-transform? 
6. What does the inverse z-transform of a time waveform actually yield? 
7. Name two methods of finding the inverse z-transform. 
8. What method for finding the inverse z-transform yields a closed-form expression 
for the time function? 
9. What method for finding the inverse z-transform immediately yields the values 
of the time waveform at the sampling instants? 
10. In order to find the z-transform of a G(s), what must be true of the input and the 
output? 
11. If input R(z) to system G{z) yields output C(z), what is the nature of c(r)? 

Problems 
771 
12. If a time waveform, c(t), at the output of system G(z) is plotted using the inverse 
z-transform, and a typical second-order response with damping ratio = 0.5 
results, can we say that the system is stable? 
13. What must exist in order for cascaded sampled-data systems to be represented 
by the product of their pulse transfer functions, G(z)? 
14. Where is the region for stability on the z-plane? 
15. What methods for finding the stability of digital systems can replace the Routh-
Hurwitz criterion for analog systems? 
16. To drive steady-state errors in analog systems to zero, a pole can be placed at the 
origin of the 5-plane. Where on the z-plane should a pole be placed to drive the 
steady-state error of a sampled system to zero? 
17. How do the rules for sketching the root locus on the z-plane differ from those for 
sketching the root locus on the 5-plane? 
18. Given a point on the z-plane, how can one determine the associated percent 
overshoot, settling time, and peak time? 
19. Given a desired percent overshoot and settling time, how can one tell which 
point on the z-plane is the design point? 
20. Describe how digital compensators can be designed on the 5-plane. 
21. What characteristic is common between a cascade compensator designed on the 
5-plane and the digital compensator to which it is converted? 
Problems 
+ z'2 + z - 3 
1. Derive the z-transforms for the time functions listed 
below. Do not use any z-transform tables. Use the 
plan/(f) -+ f*(t) -+ F*(s) -+ F{z), followed by con-
verting F(z) into closed form making use of the 
fact that 1 / ( 1 - ^ ) = 1 + ^ - 1 
Assume ideal sampling. [Section: 13.3] 
a. e-alu(t) 
b. u(t) 
c. 
t2e-alu(i) 
d. cos cot u{t) 
2. Repeat all parts of Problem 1 
using MATLAB and MATLAB's 
Symbolic Math Toolbox. 
3. For each F(z), find f{kT) using partial-fraction 
expansion. [Section: 13.3] 
z(z + 3)(z + 5) 
Symbolic Math 
a. F(z) = 
b. F{Z) = 
c F(z) = 
(z-0.4)(z-0.6)(z-0.8) 
(z + 0.2)(z + 0.4) 
(z-0.1)(z-0.5)(z-0.9) 
(z + l)(z + 0.3)(z + 0.4) 
z(z-0.2)(z-0.5)(z-0.7) 
4. Repeat a l l p a r t s of Problem 3 
symbolicMaih 
using MATLAB and MATLAB's Sym- 
V L W 
b o l i c Math Toolbox. 
5. For each F(z) in Problem 3, do the following: 
[Section: 13.3] 
a. Find f(kT) using the power series expansion. 
b. Check your results against your answers from 
Problem 3. 
6. Using partial-fraction expansion and 
^MJJ/-% 
Table 13.1, find the z-transform for each 
' i T 
G(s) shown below if T = 0.5 second. 
[Section: 13.3] 
(s + 4) 
a. 
b. 
c. 
d. 
G(s) = 
G(s) = 
G(s) = 
G(s) = 
(s + 2){s + 5) 
(J+ 1)(J+ 2) 
5(5 + 3)(5 + 4) 
20 
{s + 3)(52 + 65 
15 
25) 
5(5+ 1)(52+ 105 +81; 

772 
Chapter 13 
Digital Control Systems 
7. Repeat a l l p a r t s of Problem 6 
symbolic Math 
us ing MATLAB and MATLAB's Syra- 
^HflM 
b o l i c Math Toolbox. 
8. Find G{z) = C(z)/R(z) 
for each of the block dia-
grams shown in Figure P13.1 if T = 0.3 second. 
[Section: 13.4] 
9. Find T(z) = C(z)/R(z) 
for each of the systems 
shown in Figure P13.2. [Section: 13.5] 
10. Find Ciz) in general terms for the digital system 
shown in Figure P13.3. [Section: 13.5] 
11. Find the closed-loop transfer function, 
T(z) = 
C(z)/R[z), 
for the system shown in Figure P13.4. 
[Section: 13.5] 
12. Given the system in Figure P13.5, 
wileypms 
find the range of sampling interval, 
> V W 
T, that will keep the system stable. 
control solutions 
[Section: 13.6] 
O 
Hold 
>0 
s(s + 5) 
m 
(a) 
O 
Hold 
20 
s(s + 5) 
(s + 3) 
as) 
(b) 
O * - 
Hold 
20 
s(s + 5) 
O - 
Hold 
(c) 
FIGURE P13.1 
^ K / O ^ 
o o— G2(s) 
as) 
R(s) + 
(a) 
FIGURE P13.2 
^ ¾ ¾ ^ &M - ^ O O G2(S) 
G&) 
H,{s) — Q ,v 
T 
H2(s) 
FIGURE P13.3 
(J+ 3) 
as) 
&-*• 
0,0) 
G2(s) 
H(s) 
lb) 
O * - 
GJs) 
as) 
H2(s) 
as) 
2 
-f 
T 
s 
2 
1 
s+1) 
1 
as) 
FIGURE P13.4 

Problems 
773 
r 
r 
Hold 
1 
< s + l ) 
C(s) 
FIGURE P13.5 
13. Write a MATLAB program that can 
MATLAB 
be used to find the range of sam- 
dlu^P 
pling time, T, for stability. The pro-
gram will be used for systems of the type 
represented in Figure P13.6 and should 
meet the following requirements: 
a. MATLAB will convert Gx(s) 
cascaded 
with a sample-and-hold to G{z) . 
b. The program will calculate the z-plane 
roots of the closed-loop system for a 
range of Tand determine the value of T, 
if any, below which the system will be 
stable. MATLAB will display this value 
of Talong with the z-plane poles of the 
closed-loop transfer function. 
R(s) +, 
i 
Sample-
and-hold 
C,(.v) 
C(s) 
FIGURE P13.6 
Test the program on 
10(s 
Gi(s) = 
7) 
> + l ) ( s + 3)(s+4)(s + 5; 
14. Find the range of gain, K, to make the system shown 
in Figure PI3.7 stable. [Section: 13.6] 
mf< 
Y. f 
T=0.2 
Hold 
3K 
s(s + 4) 
C(s) 
FIGURE P13.7 
15. Find the static error constants and the 
steady-state error for each of the digital 
systems shown in Figure PI3.8 if the 
inputs are [Section: 13.7] 
a. u(f) 
b. tu{t) 
1 
2 
m*< 
m[Z V 
T = 0.5 
Hold 
1 
s + 2 
C(s) 
System I 
r r=o.i 
Hold 
20 
s(s + 2) 
as) 
System 2 
R(z)+< 
- ? 
T=0.5 
1.28 
z - 0.37 
C(z) 
System 3 
?) 
fc 
f 
T=Q.l 
0.13(z+l) 
(z-DU-0.74) 
az) 
R(z)+, 
System 4 
FIGURE P13.8 
16. Write a MATLAB program that can be 
MATLAB 
used to find Kpl Kv, and Ka for dig- 
flUB 
ital systems. The program will be used 
for systems of the type represented in 
Figure P13 . 6 . Test your program for 
G(z) = 0.04406Z3 - 0.03624Z2 - 0.03284z + 0.02857 
z4 -3.394z3 + 4.2 9z2 - 2.393z+ 0.4 966 
where G(z) 
is the pulse transfer func-
tion for G(i)(s) in cascade with the z .o.h. 
and T = 0.1 second. 
c. 7 ¼ ) 
WileyPLUS 
(¾ 
control solutions 17. For the digital system shown in Figure P13.6, where 
Gx (s) = K/[{s + 1) x (s + 4)], find the value of K to 
yield a 16.3% overshoot. Also find the range of K 
for stability. Let 7/ = 0.1 second. [Section: 13.9] 
18. Use Simulink to simulate the step Simulink 
response for the system of Prob- ^ 0 1 _ J 
lem 17. Set the value of gain, K, to that 
designed in Probleml7 for 16.3% overshoot. 

774 
Chapter 13 
Digital Control Systems 
19. Use MATLAB's LTI Viewer to deter- JjuITo0' 
mine the peak time and settling 
^
1
^ 
time of the closed-loop step response 
for System 4 in Figure P13 . 8 
20. Write a MATLAB program that can be 
MATLAB 
used to design the gain of a digi- V L U ^ P 
tal control system to meet a percent over-
shoot requirement. The program will be 
used for systems of the type represented 
in Figure Pi3.6 and meet the following 
requirements: 
a. The user will input the desired per-
cent overshoot. 
b. MATLAB will convert G1(s) 
cascaded 
with the sample-and-hold to G(z) . 
c. MATLAB will display the root locus on 
the z-plane along with an overlay of 
the percent overshoot curve. 
d. The user will click with the mouse at 
the intersection of the root locus and 
percent overshoot overlay and MATLAB 
will respond with the value of gain 
followed by a display of the step 
response of the closed-loop system. 
Apply your program to Problem 17 and 
compare results. 
21. For the digital system shown in Figure PI3.6, where 
Gi(s) = K/[s(s +1)], find the value of K to yield a 
peak time of 2 seconds if the sampling interval, T, is 
0.1 second. Also, find the range of K for stability. 
[Section: 13.9] 
22. For the digital system shown in Figure 
wileypius 
P13.6, 
where' 
Gi(s) = K/[s(s + 1) 
WMH9 
(5 + 3)], find the value of K to yield a 
control solutions 
20% 
overshoot if the sampling interval, T, is 
0.1 second. Also, find the range of K for stability. 
[Section: 13.9] 
23. For the digital system shown in Figure P13.6, where 
Gi{s) = K(s + 2) + [$($ + 1)(5 + 3)], find the value 
of K to yield a settling time of 15 seconds if 
the sampling interval, T, is 1 second. Also, find 
the range of K for stability. [Section: 13.9] 
24. A PID controller was designed in Example 9.5 for a 
continuous system with unity feedback. The sys-
tem's plant was 
The designed PID controller was 
GAs) = 4.6 (5 + 55.92)(5 + 0.5) 
Find the digital transfer function, Gc(z), of the PID 
controller in order for the system to be computer 
controlled if the sampling interval, T, is 0.01 second. 
[Section: 13.10] 
25. A continuous unity feedback system has 
wileyPLUs 
a forward transfer function of 
Control Solutions 
G W 
= 5(5 + 5)(5 + 8) 
The system is to be computer controlled with the 
following specifications: 
Percent overshoot: 10% 
Settling time: 2 seconds 
Sampling interval: 0:01 second 
Design a lead compensator for the digital system to 
meet the specifications. [Section: 13.10] 
26. Repeat Problem 25 u s i n g MATLAB. 
MATLAB 
DESIGN PROBLEMS 
27. a. Convert the heading control for the UFSS vehi-
cle shown on the back endpapers (Johnson, 1980) 
into a digitally controlled system. 
b. Find the closed-loop pulse transfer function, 
7/(4, if T - 0.1 second. 
c. Find the range of heading gain to keep the digital 
system stable. 
28. A robot equipped to perform arc welding was dis-
cussed in Problem 45, Chapter 8. The robot was 
compensated by feeding back pressure and velocity 
signals as shown in Figure P8.13(Z>). Eliminating 
these feedback paths yields the block diagram shown 
in Figure PI3.9 (Hardy, 1967). 
G(s) = 
(5 + 8) 
;5 + 3)(5 + 6)(5 + 10) 
FIGURE P13.9 Simplified block diagram for robot swing 
motion 
a. Convert the robot to a digital control system. Use 
a sampling time of 0.1 second. 
b. Sketch the root locus. 

Problems 
775 
c. Find the range of gain, K, to keep the digital 
system stable. 
d. Repeat a l l previous p a r t s using 
MATLAB 
MAT LAB . 
K Q P 
29. The floppy disk drive of Problem 57, Chapter 8 is to 
be digitally controlled. If the analog system is as 
shown in Figure P13.10, do the following: 
Desired 
position 
M o t o r a n d , o a c 
x,,is) 1(9) 
. 
*Vy L_ 
20,000 
s(s + 100) 
Actual 
position 
YM 
FIGURE P13.10 
Simplified block diagram of a floppy 
disk drive 
a. Convert the disk drive to a digital system. Use a 
sampling time of 0.01 second. 
b. Find the range of digital controller gain to keep 
the system stable. 
c. Find the value of digital controller gain to yield 
15% overshoot for a digital step response. 
d. Repeat all previous parts and J^Ji^L 
obtain the step response for CiilSP 
Part c using MATLAB. 
30. Scanning probe microscopes are used to visualize 
samples in the sub-micron dimensional range. They 
typically use a silica-based probe to physically track 
the sample topography to create a viable image. 
However, these devices are very sensitive to exter-
nal disturbance and vibrations. An approach called 
inherent disturbance suppression tries to alleviate 
the disturbance problem through the addition of a 
laser interferometer that is used to measure the 
probe-sample interaction and compensate for un-
desired probe movements. The technique was 
implemented in a tapping mode atomic force mi-
croscope measuring single DNA molecules. It was 
shown that for a significant range of frequencies the 
open-loop transmission from the probe's voltage 
input to probe's displacement is (Sparks, 2006) 
Gi(s) = 
20000 
Assuming the probe is digitally controlled in a loop, 
as shown in Figure P13.6, calculate the sampling 
period range that will result in a stable closed-loop 
system. 
31. Problem 35, Chapter 9 described a two-tank system 
where the objective was to maintain a constant 
liquid level in one of the tanks via control of an 
inflow valve. Assume for this problem that the 
transfer function relating liquid-level output, Y(s), 
to flow rate input Fe(s), for the lower tank is 
(Romagnoli, 2006) 
Y(s) 
0.0187 
G(s) = Fe(s) 
0.237^ + 0.00908 
Assume that the system will be controlled in closed 
loop by means of a digital computer system with a 
sample period T = 1 second, as shown in Figure 
P13.6, with Gi(s) = KG(s). Use the bilinear trans-
formation and the Routh-Hurwitz method to find 
the range of K that will result in a stable closed-
loop system. 
32. Assume that the two-tank system of Problem 31 is 
controlled by a digital computer in the configuration 
of Figure P13.6, where Gi (s) = KG(s). If a sampling 
period of T = 1 second is used, do the following 
(Romagnoli, 2006). 
a. Use MATLAB t o draw t h e r o o t 
_MATLAB 
l o c u s . 
C u l ^ P 
b. Find the value of K that will result in a stable 
system with a damping factor of £ = 0.7. 
c. Use the root locus of Part b to predict the step-
response settling time, Ts, and peak time, Tp. 
d. Calculate the final value of the closed-loop sys-
tem to a unit step input. 
e. Obtain the step response of 
simulink 
the system using Simulink. 
V E 9 P 
Verify the predictions you made in 
Parts c and d. 
33. In Problem 48, Chapter 9, and Problem 39, Chapter 
10, we considered the radial pickup position control 
of a DVD player. A controller was designed and 
placed in cascade with the plant in a unit feedback 
configuration to stabilize the system. The controller 
was given by 
0.5(, + 1.63) 
M[S) 
45 + 0.27) 
and the plant by (Bittanti, 2002) 
P(s) = 
0.63 
0.36 
305.4 
305.4' 
, 
0.04 
1 + ^ 7 7 ^ + 
248.2 
248.22 

776 
Chapter 13 
Digital Control Systems 
It is desired to replace the continuous system by an 
equivalent discrete system without appreciably af-
fecting the system performance. 
a. Find an appropriate sampling frequency for the 
discretization. 
b. Using the chosen sampling frequency, translate 
the continuous compensator into a discrete 
compensator. 
c. Use Simulink to simulate the 
simulink 
continuous and discrete sys-
tems on the same graph. 
Assume a unit step input. Are there 
significant differences in the sys-
tem's performance? 
34. In Problem 25, Chapter 11, we discussed an EVAD, 
a device that works in parallel with the human heart 
to help pump blood in patients with cardiac condi-
tions. The device has a transfer function 
G(s) = Pao{s) 
1361 
Em(s) 
s2 +69s+ 70.85 
where Em(s) is the motor's armature voltage, and 
Pao(s) is the aortic blood pressure (Tasch, 1990). 
Using continuous techniques, a cascaded compen-
sator is designed in a unity feedback configuration 
with a transfer function 
0 ^ - f l ) 
* " W 
s + 0.05 
Selecting to control the device using a microcon-
troller, a discrete equivalent has to be found for 
Gc(s). Do the following. 
a. Find an appropriate sampling frequency for the 
discretization. 
b. Translate the continuous compensator into a 
discrete compensator using the sampling fre-
quency found in Part a. 
c. Use Simulink to simulate the 
sjmuhnk 
continuous and discrete sys- 
V 3 ^ P 
terns on the same graph for a unit step 
input. There should be little differ-
ence between the compensated continu-
ous and discrete systems. 
35. In Problem 46, Chapter 9, a steam-driven turbine-
governor system was implemented by a unity feed-
back system with a forward-path transfer function 
(Khodabakhshian, 2005) 
r ( , 
K 
1 ' 
(s+ 0.08)(J+ 2)(5 +5) 
a. Use a sampling period of T = 0.5 s and find a 
discrete equivalent for this system. 
b. Use MATLAB t o draw t h e r o o t 
tmm 
l o c u s . 
W 1 J P 
c. Find the value of K that will result in a stable 
system with a damping factor of £ = 0.7. 
d. Use the root locus found in Part a to predict the 
step-response settling time, Ts, and peak time, Tp. 
e. Calculate the final value of the closed-loop sys-
tem unit step response. 
f. Obtain the step response of 
Simulink 
the system using Simulink. 
^ E ^ P 
Verify the predictions you made in 
Parts c and d. 
36. If you have not already done so, do 
wileypms 
Problem 45 in Chapter 9. In this prob- 
G Z 2 9 
lem, you design a PID controller for a 
Conlro1 solutions 
temperature control system. Digitize your PID de-
sign and draw a flowchart from which the PID 
controller can be implemented. 
37. Discrete time controlled systems can exhibit unique 
characteristics not available in continuous control-
lers. For example, assuming a specific input and 
some conditions, it is possible to design a system 
to achieve steady state within one single time sam-
ple without overshoot. This scheme is well known 
and referred to as deadbeat control. We illustrate 
deadbeat control design with a simple example. For 
a more comprehensive treatment see (Ogata, 1987). 
Assume in Figure 13.25(a) that Gp(s) = 
-. 
The purpose of the design will be to find a compen-
sator, Gc(z), such that for a step input the system 
achieves steady state within one sample. We start by 
translating the system into the discrete domain to 
obtain the equivalent of Figure 13.25(c). The pulse 
(1 - e-T)z~x 
is found 
transfer function, Gp(z) = , 
, -
1 — e~l z 
using Eq. (13.40), since it is assumed that the com-
pensator will be followed by a zero-order hold. In 
Figure 13.25(c), the closed-loop transfer function is 
. 
, C(z) 
- , , 
Gc(z)Gp(z) 
, . 
given by -£-% = T(z) = ; , X ,JX rx» or> solving 
R{z) 
1 + Gc(z)Gp(z) 
for the compensator, we get Gc(z) = 
1 
T(z) 
GJz) 1 - T(Zy 
The desired system output is a unit step delayed by one 
1 
Since 
unit sample. Thus, C(z) = 
TZ 1 
z-\ 
z-l 

Problems 
777 
the input is a unit step, R(z) — 
-; the desired 
z — 1 
closed-loop transfer function is —j4- = T(z) = z~\ 
and the resulting compensator, found by direct sub-
stitution, is given by Gc(z) =- 
zf 
^ -
Assume now that the plant is given by Gp(s) = |, 
and a sampling period of 7=0.05 second is used. 
a. Design a deadbeat compensator to reach steady 
state within one time sample for a step input. 
b. Calculate the resulting steady-state error for a 
unit-slope ramp input. 
c. Simulate your system using 
Simulink 
SIMULINK. (Hint: Fo 11 owing 
K
B 
Figure 13.25, the forward path will 
consist of the cascading of Gc(z), 
a 
zero-order hold, and Gp{s) . ) Show 
that the system reaches steady state 
after one sample. Also verify your 
steady-state error ramp result. 
38. Given 
LabViEW 
G(s) = 
s+4 
Use the LabVIEW Control Design and Simu-
lation Module to (1) convert G(s) 
to a 
digital transfer function using a sam-
pling rate of 0.25 second; and (2) plot 
the step responses of the discrete and 
the continuous transfer functions. 
39. Given 
LabVIEW 
K(z + 0.5) 
G(z) = 
>-0.25)(z- 0.75; 
Use t h e LabVIEW Control Design 
^ATJAB 
and Simulation Module and t h e 
^Cd^P 
MathScript RT Module t o (1) o b t a i n t h e 
v a l u e of .FCthat w i l l y i e l d a damping r a t i o 
of 0 . 5 for t h e c l o s e d - l o o p system in F i g -
ure 13.20, where H(z)=l; 
and (2) d i s p l a y 
t h e s t e p r e s p o n s e of t h e c l o s e d - l o o p s y s -
tem i n F i g u r e 13.20 where H(z) = 1 . Com-
p a r e your r e s u l t s with t h o s e of S k i l l -
Assessment E x e r c i s e 1 3 . 8 . 
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS 
40. High-speed rail pantograph. Problem 21 in Chapter 1 
discusses active control of a pantograph mechanism 
for high-speed rail systems (O'Connor, 1997). In 
Problem 79(a), Chapter 5, you found the block dia-
gram for the active pantograph control system. In 
Chapter 9, you designed a PID controller to yield a 
settling time of 0.3 second with zero steady-state 
error. Assuming that the active control system is to 
be computer controlled, do the following: 
a. Convert the PID controller designed in Problem 
55, Chapter 9, to a digital controller by specifying 
its sampled transfer function, Gc(z). Assume that 
the potentiometers are replaced by a keyboard, 
A/D converters, and unity gain transducers. 
b. Draw a flowchart from which the PID controller 
can be implemented. 
c. Use MATLAB t o s i m u l a t e t h e s t e p 
J^^L 
response of the d i g i t a l a c t i v e CuI^P 
c o n t r o l system. 
41. Control of HIV/AIDS. In Chapter 11, a continuous 
cascaded compensator for a unity feedback system 
was designed for the treatment of the HIV-infected 
patient treated with RTIs (Craig, 2004). The transfer 
function of the designed compensator was 
GAs) = - 2 x IP" V 
+ 0.04s + 0.0048) 
s(s + 0.02) 
The linearized plant was given by 
Y(s) 
-520s - 10.3844 
P(s) = Ui (s) 
s3 + 2.6817^2 + 0.11s + 0.0126 
The compensated system is overdamped with an 
approximate settling time of 100 seconds. This system 
must be discretized for practical reasons: (1) HIV 
patient cannot be monitored continuously and (2) 
medicine dosage cannot be adjusted continuously. 
a. Show that a reasonable sampling period for this 
system is T = 8 days (medicine dosage will be 
updated on a weekly basis). 
b. Use Tustin's method and T = 8 days to find a 
discrete equivalent to GC(S). 
C, Use Simulink to simulate the 
Simulink 
continuous and discrete com- 
^ E ^ P 
pensated systems for a unit step in-
put. Plot both responses on the same 
graph. 
42. Hybrid vehicle. In Problem 7.69 (Figure 
"*TL^_ 
P7.34), the block diagram of a cascade 
C u l ^ P 
scheme for the speed control of an HEV (Preitl, 
2007) was represented as a unity feedback system. 

778 
Chapter 13 
Digital Control Systems 
In that diagram the output of the system is the speed 
transducer's output voltage, C(s) — KssV(s). In 
Part b of Problem 11.35, where a compensator 
was designed for this problem, we discussed the 
feasibility of achieving full pole-zero cancellation 
when we place a PI speed controller's zero, Z/, on 
top of the uncompensated system's real pole, closest 
to the origin (located at -0.0163). Noting that 
perfect pole-zero cancellation may not be main-
tained, we studied a case, in which the Pi-controller's 
zero changed by +20%, moving to -0.01304. In 
that case, the transfer function of the plant with 
a PI speed controller, which has a proportional 
gain = K, was given by: 
G(s) = ir(s + 0.6)(.y +0.01304) 
s(j+ 0.0163)(s+ 0.5858) 
Assuming that Gi(s) in Figure P13.6 equals the 
transfer function, G(s), given above for the vehicle 
with the speed controller: 
a. Develop a MATLAB M-f ile that would al-
low you to do the following: [Hint: 
Refer to the M-files you developed 
for Problems 13 and 20 of this chapter] 
(1) Convert Gx{s) cascaded with a sam-
ple-and-hold to 
G(z); 
(2) Search over the range 0 < T < 5 sec-
onds for the largest sampling pe-
riod Tmax below which the system is 
stable.Calculatethez-planeroots 
of the closed-loop system for the 
whole range of the sampling time, 
T. Subsequently set T= 0.75Tma>:; 
(3) Design the gain of a digital control 
system to meet a percent overshoot 
requirement, %OS, allowingtheuser 
to input the value of the desired 
%OS and the value of the PI speed 
controller's proportional gain, K; 
(4) Plot the step response of that dig-
ital system (in per unit, p. u., 
vs. time in seconds) 
b. Run the M-f ile you developed in Part a 
and enter the values of the desired 
percent overshoot, % O S = 0 , and the PI 
speed controller's proportional gain, 
iC=61; 
c. Select a point in the graphics window 
displaying the root locus, such that 
all poles of the closed-loop transfer 
function, 
Tzl 
are inside the unit 
circle . 
d. Write the sampled-data transfer func-
tions obtained, Gz and Tz, indicating 
the corresponding value of the sam-
pling time, T, and all poles, r, of 
the closed-loop transfer function, Tz; 
e. Plot the step response of that digital 
system (in per unit, p. u., vs. time in 
seconds) noting the following charac-
teristics: final value, rise time, and 
settling time. 
Cyber Exploration Laboratory 
Experiment 13.1 
Objective To design the gain of a digital control system to meet a transient 
response requirement; to simulate a digital control system to test a design; to see the 
effect of sampling rate upon the time response of a digital system. 
Minimum Required Software Packages MATLAB, Simulink, and the 
Control System Toolbox 
Prelab 
1. Given the antenna azimuth control system shown on the front endpapers, use 
Configuration 2 to find the discrete transfer function of the plant. Neglect the 
dynamics of the power amplifier and include the preamplifier, motor, gears, and 
load. Assume a zero-order hold and a sampling interval of 0.01 second. 

Cyber Exploration Laboratory 
2. Using the digital plant found in Prelab 1, find the preamplifier gain required for a 
closed-loop digital system response with 10% overshoot and a sampling interval 
of 0.01 second. What is the peak time? 
3. Given the antenna azimuth control system shown on the front endpapers, use 
Configuration 2 to find the preamplifier gain required for the continuous system 
to yield a closed-loop step response with 10% overshoot. Consider the open-loop 
system to be the preamplifier, motor, gears, and load. Neglect the dynamics of the 
power amplifier. 
Lab 
1. Verify your value of preamplifier gain found in Prelab 2 using the SISO Design 
Tool to generate the root locus for the digital open-loop transfer function found in 
Prelab 1. Use the Design Constraints capability to generate the 10% overshoot 
curve and place your closed-loop poles at this boundary. Obtain a plot of the root 
locus and the design boundary. Record the value of gain for 10% overshoot. Also, 
obtain a plot of the closed-loop step response using the LTI Viewer and record 
the values of percent overshoot and peak time. Use the same tool to find the 
range of gain for stability. 
2. Using Simulink set up the closed-loop digital system whose plant was found 
in Prelab 1. Make two diagrams: one with the digital transfer function for the 
plant and another using the continuous transfer function for the plant 
preceded by a zero-order sample-and-hold. Use the same step input for 
both diagrams and obtain the step response of each. Measure the percent 
overshoot and peak time. 
3. Using Simulink, set up both the digital and continuous systems calculated in 
Prelabs 2 and Prelab 3, respectively, to yield 10% overshoot. Build the digital 
system with a sample-and-hold rather than the z-transform function. Plot the step 
response of each system and record the percent overshoot and the peak time. 
4. For one of the digital systems built in Lab 2, vary the sampling interval and record 
the responses for a few values of sampling interval above 0.01 second. Record 
sampling interval, percent overshoot, and peak time. Also, find the value of 
sampling interval that makes the system unstable. 
Postlab 
1. Make a table containing the percent overshoot, peak time, and gain for each of 
the following closed-loop responses: the digital system using the SISO Design 
Tool; the digital system using Simulink and the digital transfer functions; the 
digital system using Simulink and the continuous transfer functions with the zero-
order sample-and-hold; and the continuous system using Simulink. 
2. Using the data from Lab 4, make a table containing sampling interval, percent 
overshoot, and peak time. Also, state the sampling interval that makes the system 
unstable. 
3. Compare the responses of all of the digital systems with a sampling interval of 
0.01 second and the continuous system. Explain any discrepancies. 
4. Compare the responses of the digital system at different sampling intervals with 
the continuous system. Explain the differences. 
5. Draw some conclusions about the effect of sampling. 

Chapter 13 
Digital Control Systems 
Experiment 13.2 
Objective To use the various functions from the Lab VIEW Control Design and 
Simulation Module for the analysis of digital control systems. 
Minimum Required Software Packages LabVIEW with the Control De-
sign and Simulation Module and the MathScript RT Module; MATLAB with the 
Control Systems Toolbox. 
Prelab You are given Figure P8.28 and the parameters listed in the Prelab of 
Cyber Exploration Laboratory Experiment 8.2 for the open-loop NASA eight-axis 
ARMII (Advanced Research Manipulator II) electromechanical shoulder joint/ 
link, actuated by an armature-controlled dc servomotor. 
1. Obtain the open-loop transfer function of the shoulder joint/link, G(s) = T.L , ,, 
VrefiS) 
or use your calculation from Cyber Exploration Laboratory Experiment 8.2. 
2. Use MATLAB and design a digital compensator to yield a closed-loop response 
with zero steady-state error and a damping ratio of 0.7. If you already have 
performed Cyber Exploration Laboratory Experiment 8.2, modify your M-file 
from that experiment. Test your design using MATLAB. 
Lab Simulate your Prelab design using a Simulation Loop from the LabVIEW 
Control Design and Simulation Module. Plot the step response of two loops as 
follows: (1) a unity feedback with the forward path consisting of the continuous 
system transfer function preceded by a zero-order hold, and (2) a unity feedback 
with the forward path consisting of the equivalent discrete transfer function of your 
compensator in cascade with the open-loop plant. 
Postlab Compare the results obtained with those from your prelab MATLAB 
program. Comment on time-performance specifications. 
f^ Bibliography^ 
Astrom, K. I , and Wittenmark, B. Computer Controlled Systems. Prentice Hall, Upper Saddle 
River, NJ, 1984. 
Bittanti, S., Dell'Orto, E, Di Carlo, A., and Savaresi, S. M. Notch Filtering and Multirate 
Control for Radial Tracking in High Speed DVD-Players. IEEE Transactions on Consumer 
Electronics, vol. 48, 2002, pp. 56-62. 
Boyd, M., and Yingst, J. C. PC-Based Operator Control Station Simplifies Process, Saves 
Time. Chilton's I & CS, September 1988, pp. 99-101. 
Chassaing, R. Digital Signal Processing. Wiley, New York, 1999. 
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical 
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, 
vol. 47, no. 1, February 2004, pp. 65-73. 
Craig, J. J. Introduction to Robotics. Mechanics and Control, 3d ed. Prentice Hall, Upper 
Saddle River, NJ, 2005. 
Hardy, H. L. Multi-Loop Servo Controls Programmed Robot. Instruments and Control 
Systems, June 1967, pp. 105-111. 
Hostetter, G. H. Digital Control System Design. Holt, Rinehart & Winston, New York, 1988. 
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL 
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980. 

Bibliography 
Katz, P. Digital Control Using Microprocessors. Prentice Hall, Upper Saddle River, NJ, 1981. 
Khodabakhshian, A., and Golbon, N. Design of a New Load Frequency PID Controller Using 
QFT. Proceedings of the 13th Mediterranean Conference on Control and Automation, 2005, 
pp. 970-975. 
Kuo, B. C. Automatic Control Systems, 7th ed. Prentice Hall, Upper Saddle River, NJ, 1995. 
Kuo, B. C. Digital Control Systems. Holt, Rinehart & Winston, New York, 1980. 
Nyzen, R. J. Analysis and Control of an Eight-Degree-of-Freedom 
Manipulator, Ohio 
University Masters Thesis, Mechanical Engineering, Dr. Robert L. Williams II, Advisor, 
August 1999. 
O'Connor, D. N., Eppinger, S. D , Seering, W. P., and Wormly, D. N. Active Control of a High-
Speed Pantograph. Journal of Dynamic Systems, Measurements, and Control, vol. 119, 
March 1997, pp. l-A. 
Ogata, K. Discrete-Time Control Systems. Prentice Hall, Upper Saddle River, NJ, 1987. 
Phillips, C. L., and Nagle, H. X, Jr., Digital Control System Analysis and Design. Prentice Hall, 
Upper Saddle River, NJ, 1984. 
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in 
Hybrid Vehicles. 4th International Symposium on Applied Computational Intelligence and 
Informatics. IEEE, 2007. 
Romagnoli, J. A., and Palazoglu, A. Introduction to Process Control. CRC Press, Boca Raton, 
FL, 2006. 
Smith, C. L. Digital Computer Process Control. Intext Educational Publishers, NY, 1972. 
Sparks, A. W, and Manalis, S. R. Atomic Force Microscopy with Inherent Disturbance 
Suppression for Nanostructure Imaging. Nanotechnology, vol. 17, 2006, pp. 1574-1579. 
Tasch, U, Koontz, J. W, Ignatoski, M. A., and Geselowitz, D. B. An Adaptive Aortic Pressure 
Observer for the Penn State Electric Ventricular Assist Device. IEEE Transactions on 
Biomedical Engineering, vol. 37,1990, pp. 374-383. 
Tou, J. Digital and Sampled-Data Control Systems. McGraw-Hill, New York, 1959. 
Williams, R. L. II. Local Performance Optimization for a Class of Redundant Eight-Degree-
of-Freedom Manipulators. NASA Technical Paper 3417, NASA Langley Research Center, 
Hampton VA, March 1994. 


Appendix A: List of Symbols 
%OS 
Percent overshoot 
A 
Ampere — uni t of electrical current 
A 
System matrix for state-space representation 
am 
Motor time constant 
B 
Mechanical rotational coefficient of viscous friction in N-m-s/rad 
B 
Input matrix for state-space representation 
C 
Electrical capacitance in farads 
C 
Output matrix for state-space representation 
C(s) 
Laplace transform of the output of a system 
c(t) 
Output of a system 
CM 
Controllability matrix 
D 
Mechanical rotational coefficient of viscous friction in N-m-s/rad 
D 
Feedforward matrix for state-space representation 
Da 
Motor armature coefficient of viscous damping in N-m-s/rad 
D„, 
Total coefficient of viscous friction at the armature of a motor, including 
armature coefficient of viscous friction and reflected load coefficient of 
viscous friction in N-m-s/rad 
E 
Energy 
E(s) 
Laplace transform of the error 
e(t) 
Error; electrical voltage 
Ea(s) 
Laplace transform of the motor armature input voltage; Laplace transform of the 
actuating signal 
ea{t) 
Motor armature input voltage; actuating signal 
F 
Farad—unit of electrical capacitance 
F(s) 
Laplace transform of / (/) 
/(/) 
Mechanical force in newtons; general time function 
/v 
Mechanical translational coefficient of viscous friction 
g 
Acceleration due to gravity 
G 
Electrical conductance in mhos 
G(s) 
Forward-path transfer function 
Gc(s) 
Compensator transfer function 
Gc(z) 
Sampled transfer function for a compensator 
GM 
Gain margin 
Gp(z) 
Sampled transfer function for a plant 

784 
Appendix A: List of Symbols 
H 
H(s) 
I 
m 
J 
J a 
hn 
K 
K 
k 
Ka 
Kb 
m 
kg 
kg-m2 
Henry—unit of electrical inductance 
Feedback-path transfer function 
Identity matrix 
Electrical current in amperes 
Moment of inertia in kg-m2 
Motor armature moment of inertia in kg-m2 
Total moment of inertia at the armature of a motor, including armature moment 
of inertia and reflected load moment of inertia in kg-m2 
Controller gain matrix 
Mechanical translational spring constant in N/m or rotational spring constant in 
N-m/rad; amplifier gain; residue 
Controller feedback gain; running index 
Acceleration constant 
Back emf constant in V/rad/s 
Feedback gain 
Kilogram = newt on seconds2/meter—unit of mass 
Kilogram meters2 = newton-meters seconds2/radian—unit of moment of inertia 
Km 
Motor gain 
Kp 
Position constant 
K, 
Motor torque constant relating developed torque to armature current in N-m/A 
Kv 
Velocity constant 
L 
Electrical inductance in henries 
L 
Observer gain matrix 
/ 
Observer feedback gain 
M 
Mass in kilograms; slope of the root locus asymptotes 
m 
Meter—unit of mechanical translational displacement 
M((o) 
Magnitude of a sinusoidal response 
m/s 
Meters/second—unit of mechanical translational velocity 
Mp 
Peak magnitude of the sinusoidal magnitude response 
N 
Newton—unit of mechanical translational force in kilogram meters/second2 
N-s/m 
Newton-seconds/meter—unit of mechanical translational coefficient of viscous 
friction 
n 
System type 
N/m 
Newton/meter—unit of mechanical translational spring constant 
N-m 
Newton-meter—unit of mechanical torque 
N-m-s/ 
Newton-meter-seconds/radian—unit of mechanical rotational coefficient of 
rad 
viscous friction 
N-m/A 
Newton-meter/ampere—unit of motor torque constant 
N-m/rad 
Newton-meter/radian—unit of mechanical rotational spring constant 
O M 
Observability matrix 
P 
Similarity transformation matrix 
pc 
Compensator pole 
Q 
Coulomb—unit of electrical charge 
q(t) 
Electrical charge in coulombs 

Appendix A: List of Symbols 
785 
R 
Electrical resistance in ohms 
R(s) 
Laplace transform of the input to a system 
r 
Nonlinear electrical resistance 
r(t) 
Input to a system 
Ra 
Motor armature resistance in ohms 
rad 
Radian—unit of angular displacement 
rad/s 
Radian/second—unit of angular velocity 
s 
Second—unit of time 
s 
Complex variable for the Laplace transform 
Sp:p 
Sensitivity of F to a fractional change in P 
T 
Time constant; sampling interval for digital signals 
T(s) 
Closed-loop transfer function; Laplace transform of mechanical torque 
T(t) 
Mechanical torque in N-m 
Tm(t) 
Torque at the armature developed by a motor in N-m 
Tm(s) 
Laplace transform of the torque at the armature developed by a motor 
Tp 
Peak time in seconds 
Tr 
Rise time in seconds 
Ts 
Settling time in seconds 
Tw 
Pulse width in seconds 
u 
Input or control vector for state-space representation 
u 
Input control signal for state-space representation 
u(t) 
Unit step input 
V-s/rad 
Volt-seconds/radian—unit of motor back emf constant 
v(t) 
Mechanical translation velocity in m/s; electrical voltage 
vb(t) 
Motor back emf in volts 
ve(t) 
Error voltage 
vp(t) 
Power amplifier input in volts 
x 
State vector for state-space representation 
x(t) 
Mechanical translation displacement in meters; a state variable 
x 
Time derivative of a state variable 
x 
Time derivative of the state vector 
y 
Output vector for state-space representation 
y(i) 
Output scalar for state-space representation 
z 
Complex variable for the z-transform 
zc 
Compensator zero 
a 
Pole-scaling factor for a lag compensator, where a > 1; angle of attack 
/6 
Pole-scaling factor for a lead compensator, where fi < 1 
y 
Pole-scaling factor for a lag-lead compensator, where y > 1 
S 
Thrust angle 
f 
Damping ratio 
9 
Angle of a vector with the positive extension of the real axis 
0(t) 
Angular displacement 
6a 
Angle of a root locus asymptote with the positive extension of the real axis 

786 
Appendix A: List of Symbols 
6C 
Angular contribution of a compensator on the s-plane 
9m(t) 
Angular displacement of the armature of a motor 
X. 
Eigenvalue of a square matrix 
a 
Real part of the Laplace transform variable, s 
oa 
Real-axis intercept of the root locus asymptotes 
4>M 
Phase margin 
¢(0 
State transition matrix 
0 
Sinusoidal phase angle; body angle 
4>c 
Sinusoidal phase angle of a compensator 
Qmax 
Maximum sinusoidal phase angle 
n 
Ohm—unit of electrical resistance 
W 
Mho—unit of electrical conductance 
to 
Imaginary part of the Laplace transform variable, s 
co(t) 
Angular velocity in rad/s 
<WBW 
Bandwidth in rad/s 
cod 
Damped frequency of oscillation in rad/s 
mp¥ 
Phase-margin frequency in radians 
COGM 
Gain-margin frequency in radians 
co„ 
Natural frequency in rad/s 
cop 
Peak-magnitude frequency of the magnitude frequency response in rad/s 

Appendix B: MATLAB Tutorial 
£ B . 1 
Introduction 
MATLAB is a high-level technical computing environment suitable for solving 
scientific and engineering problems. When used with routines from its companion 
software, the Control System Toolbox, MATLAB can be used to analyze and design 
control systems problems such as those covered in this textbook. MATLAB and the 
Control System Toolbox are commercial software products available from The 
Math-Works, Inc., 3 Apple Hill Drive, Natick, MA 01760-2098. Phone: (508) 647-
7000. Email: info@mathworks.com. URL: www.mathworks.com. 
The MATLAB examples in this tutorial consist of solved problems that 
demonstrate the application of MATLAB to the analysis and design of control 
systems. Many problems were taken from examples in the text (identified with a 
MATLAB icon) that were solved without MATLAB. A Command Summary at the 
end of this appendix lists key MATLAB statements and their descriptions. 
The code in this tutorial is also available in the Control Systems Engineering 
Toolbox folder at www.wiley.com/college/nise and at www.mathworks.com/matlab-
central/fileexchange. You should have MATLAB Version 7.9 (R2009b) and the 
Control System Toolbox Version 8.4 installed on your machine to execute this 
appendix's code in the Control Systems Engineering Toolbox Version 6. 
To run the M-files, first be sure the files are either added to the search path in 
Set Path . . . under the File menu or appear in the Current Folder window, which is 
part of the MATLAB window. To see the computer responses after installing the M-
files, run each problem by typing the M-file name, such as ch2pl, after the prompt 
(>>) in the Command Window. You may also run the files by right-clicking the file 
name, if it appears in the Current Folder window, and select Run File. 
To view all or part of the M-file in the Command Window, enter "type <file 
name>" or "help <file name>," respectively, after the prompt. You may also view 
and make changes to the M-file by double-clicking the file in the Current Folder 
window. This action brings up the editor. After editing, be sure to save the revised 
file before executing. 
If you do not have the Control Systems Engineering Toolbox M-files, you can 
create your own M-files by typing the code for each problem in this appendix into a 
separate M-file (there is no need to type the final pause statement or comments), and 
naming each M-file with a .m extension, as in ch2pl.m. You can also type the code for 
more than one problem into an M-file, including the pause command, and name the 
M-file with the .m extension. You can then call the file from the Command Window, 
and continue past the pause statements to the next problem by pressing any key. 

788 
Appendix B: MATLAB Tutorial 
By its nature, this appendix cannot cover all the background and details 
necessary for a complete understanding of MATLAB. For further details, you 
are referred to other sources, including MATLAB reference manuals and instruc-
tions specific to your particular computer. The bibliography at the end of this 
appendix provides a partial listing of references. This appendix should give you 
enough information to be able to apply MATLAB to the analysis and design 
problems covered in this book. 
The code contained in this appendix and in the Control Systems Engineering 
Toolbox was developed on a PC using MATLAB Version 7.9 and the Control System 
Toolbox Version 8.4. The code will also run on workstations that support MATLAB. 
Consult the MATLAB Installation Guide for your platform for minimum system 
hardware requirements. 
( B . 2 
MATLAB Examples 
Chapter 2: Modeling in the Frequency Domain 
ch2p1 Bit strings will be used to identify parts of this tutorial on the computer 
output. Bit strings are represented by the text enclosed in apostrophes, such as 'ab'. 
Comments begin with % and are ignored by MATLAB. Numbers are entered 
without any other characters. Arithmetic can be performed using the proper 
arithmetic operator. Numbers can be assigned using a left-hand argument and an 
equals sign. Finally, we can find the magnitude and angle of a complex number, Q 
using abs (Q) and angle (Q), respectively. 
'(ch2pl)' 
'How are you?' 
-3.96 
-4 + 7i 
-5-6j 
(-4+7i) + (-5-6i; 
(-4+7j)*(-5-6j) 
M=5 
N=6 
P=M+N 
Q=3+4j 
MagQ=abs(Q) 
ThetaQ=(180/pil 
pause 
*angle(Q) 
% Display label. 
% Display string. 
% Display scalar number -3. 96. 
% Display complex number -4+7i . 
% Display complex number -5-6 j . 
% Add two complex numbers and 
% display sum. 
% Multiply two complex numbers and 
% display product. 
% Assign 5 to M and display. 
% Assign 6 to N and display. 
% Assign M+N to P and display. 
% Define complex number, Q. 
% Find magnitude of Q. 
% Find the angle of Q in degrees . 
ch2p2 Polynomials in s can be represented as row vectors containing the coef-
ficients. Thus Pi—s3 + Is2 - 3s + 23 can be represented by the vector shown below 
with elements separated by a space or comma. Bit strings can be used to identify 
each section of this tutorial. 
'(ch2p2)' 
Pl=[l 7 -3 23] 
pause 
% Display label. 
% Store polynomial sA3 + 7sA2 -3s + 
% 23 as PI and display. 

B.2 MATLAB Examples 
789 
ch2p3 Running the previous statements causes MATLAB to display the results. 
Ending the command with a semicolon suppresses the display. Typing an expression 
without a left-hand assignment and without a semicolon causes the expression to be 
evaluated and the result displayed. Enter P2 in the MATLAB Command Window 
after execution. 
'(ch2p3)' 
% Display l a b e l . 
P2 =[3 5 7 8 ] ; 
% Assign 3s A3 + 5sA2 +7s + 8 t o P2 
% w i t h o u t d i s p l a y i n g . 
3*5 
% E v a l u a t e 3*5 and d i s p l a y r e s u l t . 
pause 
ch2p4 An F(s) in factored form can be represented in polynomial form. Thus P3 = 
(s + 2) (s + 5) (s + 6) can be transformed into a polynomial using po 1 y (V), where V 
is a row vector containing the roots of the polynomial and poly (V) forms the 
coefficients of the polynomial. 
'(ch2p4) ( 
% Display l a b e l . 
P3=poly ([-2 -5 -6]) 
% S t o r e polynomial 
% (s+2)(s+5)(s+6)as P3 and 
% d i s p l a y t h e c o e f f i c i e n t s 
pause 
ch2p5 We can find roots of polynomials using the roots (V) command. The 
roots are returned as a column vector. For example, find the roots of 
5J4 + 7s3 + 9s2-3s + 2 = 0. 
r(ch2p5)' 
% Display l a b e l . 
P4=[5 7 9 - 3 2] 
% Form 5s A4+7s A3+9s A2-3s+2 and 
% d i s p l a y . 
r o o t s P 4 = r o o t s ( P 4 ) 
% Find r o o t s of 5s A4+7s A3+9s A2 
%-3s+2, 
% assign to rootsP4, and display. 
pause 
ch2p6 Polynomials can be multiplied together using the conv(a,b) command 
(standing for convolve). Thus, P5 = (s3 + Is2 + 10? + 9)(/ - 3s3 + 6s2 + 2s + 1) is 
generated as follows: 
•(ch2p6)» 
% Display l a b e l . 
P5=conv([l 7 10 9],[1 -3 6 2 1]) 
% Form (s A3+7s A2+10s+9)(s A4-
% 3s A3 + 6s A2+2s + l ) , a s s i g n t o P5, 
% and d i s p l a y . 
pause 
ch2p7 The partial-fraction expansion for F(s) = b(s)/a(s) can be found using the 
[K, p, k] = residue (b, a) command (K = residue; p = roots of denominator; k = 
direct quotient, which is found by dividing polynomials prior to performing a partial-
fraction expansion). We expand F(s) = {Is2 + 95 + ll)/[s{s + 7)(s2 + 10s + 100)] 
as an example. Using the results from MATLAB yields: F(s) = [(0.2554 -
0.3382/) / (s + 5.0000 - 8.6603¾)] + [(0.2554 + 0.3382/) / (s + 5.0000 + 8.6603/)] -
[0.5280/ (5 + 7)] + [0.0171/5]. 

790 
Appendix B: MATLAB Tutorial 
*(ch2p7)' 
% Display label. 
numf>[7 9 12] 
% Define numerator of F (s) . 
denf=conv(poly([0 -7]) ,[1 10 100]) ; 
% Define denominator of F (s) . 
[K, p, k]=residue (numf, denf) 
% Find residues and assign to K; 
% find roots of denominator and 
% assign to p; find 
% constant and assign to k. 
pause 
ch2p8 (Example 2.3) Let us do Example 2.3 in the book using MATLAB. 
'(ch2p8) Example 2 . 3 ' 
% Display label. 
numy=32; 
% Define numerator. 
deny=poly ([0 -4 -8]) ; 
% Define denominator. 
[r,p, k]=residue (numy, deny) 
% Calculate residues, poles, and 
% d i r e c t quotient. 
pause 
ch2p9 Creating Transfer Functions 
Vector Method, Polynomial Form 
A transfer function can be expressed as a numerator polynomial divided by a 
denominator polynomial, that is, F(s) = N(s)/D(s). The numerator, N(s), is repre-
sented by a row vector, numf, that contains the coefficients of N(s). Similarly, the 
denominator, D(s), is represented by a row vector, denf, that contains the coef-
ficients of D(s). We form F(s) with the command, F=tf (numf, denf). F is called a 
linear time-invariant (LTI) object. This object, or transfer function, can be used as an 
entity in other operations, such as addition or multiplication. We demonstrate with 
F(s) = 150(.s2 + 2s + 7)/[s{s2 + 5s + 4)]. Notice after executing the t f command, 
MATLAB prints the transfer function. 
Vector Method, Factored Form We also can create LTI transfer functions if 
the numerator and denominator are expressed in factored form. We do this by 
using row vectors containing the roots of the numerator and denominator. Thus 
G(s) = K*N(s)/D(s) can be expressed as an LTI object using the command, 
G=zpk (numg,deng,K), where numg is a row vector containing the roots of 
N(s) and deng is a row vector containing the roots of D(s). The expression zpk 
stands for zeros (roots of the numerator), poles (roots of the denominator), and gain, 
K. We demonstrate with G(s) = 20(5 + 2)(s + 4)/[(s + 7){s + 8)(s + 9)]. Notice after 
executing the zpk command, MATLAB prints the transfer function. 
Rational Expression in s Method, Polynomial Form (Requires Control System 
Toolbox 8.4) This method allows you to type the transfer function as you normally 
would write it. The statement s=tf ('s' ) must precede the transfer function if you 
wish to create an LTI transfer function in polynomial form equivalent to using 
F=tf(numf,denf). 
Rational Expression in s Method, Factored Form (Requires Control System Toolbox 
8.4) This method allows you to type the transfer function as you normally would 
write it. The statement s=zpk ('s' ) must precede the transfer function if you 
wish to create an LTI transfer function in factored form equivalent to using 
G=zpk(numg,deng,K). 

B.2 MATLAB Examples 
For both rational expression methods the transfer function can be typed in any 
form regardless of whether s=tf('s' ) ors=zpk('s' ) is used. The difference is in 
the created LTI transfer function. We use the same examples above to demonstrate 
the rational expression in s methods. 
'(ch2p9)' 
% Display label. 
'Vector Method, Polynomial Form' 
% Display label. 
numf=150*[l 2 7] 
% Store 150 (sA2+2s+7) in numf and 
% display. 
denf=[l 5 4 0] 
% Store s (s + l)(s+4) in denf and 
% display. 
'F(s)' 
% Display label. 
F=tf {numf, denf) 
%FormF(s) and display. 
clear 
% Clear previous variables from 
% workspace. 
'Vector Method, Factored Form' 
% Display label. 
numg=[-2 -4] 
% Store (s+2)(s+4) in numg and 
% display. 
deng=[-7 -8 -9] 
% Store (s+7)(s+8)(s + 9) in deng 
% and display. 
K=20 
% Define K. 
'G(s)' 
% Display label. 
G=zpk (numg, deng, K) 
%FormG(s) and display. 
clear 
% Clear previous variables from 
% workspace. 
'Rational Expression Method, Polynomial Form' 
% Display label. 
s=tf ('s') 
% Define 's ' as an LTI object in 
% polynomial form. 
F=150*(sA2+2*s+7) /[s*(sA2+. . . 
% Form F (s) as an LTI transfer 
5*s+4)] 
% function in polynomial form. 
G=20*(s+2)*(s+4) /[ (s+7)*. . . 
% FormG(s) as anLTI transfer 
(s+8)*(s + 9)] 
% function in polynomial form. 
clear 
% Clear previous variables from 
% workspace. 
'Rational Expression Method, Factored Form' 
% Display label. 
s=zpk {' s') 
% Define 's ' as an LTI object in 
% factored form. 
F=150*(sA2+2*s+7)/[s*( 5^2 + 5*3 + 4)] 
% Form F (s) as an LTI transfer 
% function in factored form. 
G=20*(s+2)*(s+4) /[(s+7)*(s + 8)*(s + 9)] 
IFormG(s) as an LTI transfer 
% function in factored form. 
pause 
ch2p10 Transfer function numerator and denominator vectors can be converted 
between polynomial form containing the coefficients and factored form containing the 
roots. The MATLAB function, t f 2 zp (numt f, den t f), converts the numerator and 
denominator from coefficients to roots. The results are in the form of column vectors. 
We demonstrate this with F(s) = (10s2 + 4Qs + 60)/03 + 4*2 + 5^ + 7). The MAT-
LAB function, zp2tf (numzp, denzp, K), converts the numerator and denomina-
tor from roots to coefficients. The arguments numzp and denzp must be column 

792 
Appendix B: MATLAB Tutorial 
vectors. In the demonstration that follows, apostrophes signify transpose. We demon-
strate the conversion from roots to coefficients 
with G(s) = 10(5 + 2) 
(s + 4)/[s(s + 3)(s + 5)]. 
'(ch2pl0)' 
% Display label. 
'Coefficients for F(s)' 
% Display label. 
numf tf=[10 40 60] 
% Form numerator of F (s) = 
% (10sA2+40s+60)/(sA3+4sA2+5s 
%+7) . 
denftf=[l 4 5 7] 
% Form denominator of F (s) = 
% (10sA2+40s+60)/(sA3+4sA2+5s 
%+7) . 
'Roots for F(s)' 
% Display label. 
[numf zp, denf zp]=tf2zp (numftf ,denftf) 
% Convert F(s) to factored form. 
'Roots for G(s)' 
% Display label. 
numgzp=[_2-4] 
% Form numerator of 
K=10 
%G(s)=10(s + 2) (s + 4)/[s(s+ 3) 
% (3+51]. 
dengzp=[0 -3 -5] 
% Form denominator of 
%G(s)=10(s + 2) (s + 4)/[s(s+3) (s+5)] . 
'Coefficients for G (s)' 
% Display label. 
[numgtf, dengtf] = zp2tf (numgzp', dengzp', K) 
% Convert G (s) to polynomial form. 
pause 
ch2p11 LTI models can also be converted between polynomial and factored forms. 
MATLAB commands tf and zpk are also used for the conversion between LTI 
models. If a transfer function, Fzpk(s), is expressed as factors in the numerator and 
denominator, then tf (Fzpk) converts Fzpk{s) to a transfer function expressed 
as coefficients in the numerator and denominator. Similarly, if a transfer function, 
Ftf(s), is expressed as coefficients in the numerator and denominator, then 
zpk(Ftf) converts Ftf(s) to a transfer function expressed as factors in the 
numerator and denominator. The following example demonstrates the concepts. 
• ( c h 2 p l l ) ' 
% Display l a b e l . 
' F z p k l ( s ) ' 
% Display l a b e l . 
Fzpkl=zpk([-2 -4],[0 -3 -5], 10) 
% Form Fzpkl (s) = 
% 10(s+2)(s + 4 ) / [ s ( s + 3 ) ( s + 5)]. 
• F t f l ' 
% Display l a b e l . 
F t f l = t f (Fzpkl) 
% Convert Fzpkl (s) to 
% c o e f f i c i e n t s form. 
' F t f 2 ' 
% Display l a b e l . 
Ftf 2=tf ([10 40 60],[1 4 5 7]) 
% Form Ftf 2 (s) = 
% ( 1 0 s A 2 + 4 0 s + 6 0 ) / ( s A 3 + 4 s A 2 + 5 s 
%+7). 
'Fzpk2' 
% Display l a b e l . 
Fzpk2=zpk(Ftf2) 
% Convert Ftf2 (s) t o 
% f a c t o r e d form. 
pause 
ch2p12 Functions of time can be easily plotted using MATLAB's plot (X, Y, S), 
where X is the independent variable, Y is the dependent variable, and S is a character 
string describing the plots color, marker, and line characteristic. Type HELP PLOT in 

B.2 MATLAB Examples 
793 
the Command Window to see a list of choices for S. Multiple plots also can be 
obtained using plot 
(XI, Yl, S1,X2, Y2, S2, X3, Y3, S3, . . . ). In the 
following example we plot on the same graph sin(5£) in red and cos(5/) in green 
for t = 0 to 10 seconds in 0.01 second increments. Time is specified as t = s t a r t : 
increment: final. 
' (ch2pl2)' 
t=0:0.01:10; 
fl=cos(5*t) ; 
f2=sin(5*t) ; 
plot(t,fl,»r',t,f2,,g') 
pause 
% Display label. 
% Specify time range and increment 
% Specify f 1 to be cos (5t) . 
% Specify f2 to be sin (5t) . 
% Plot f 1 in red and f 2 in green . 
Chapter 3: Modeling in the Time Domain 
ch3p1 The square system matrix, A = 
0 
1 0 
0 
0 
1 
-9 -8 -7 
is written with a space or 
comma separating the elements of each row. The next row is indicated with a 
semicolon or carriage return. The entire matrix is then enclosed in a pair of square 
brackets. 
'(ch3pl)' 
A=[0 10;0 0 1; -9-8 -7] 
'or' 
A=[0 1 0 
0 0 1 
-9-8 -7] 
pause 
% Display label 
% Represent A. 
% Represent A. 
ch3 p2 A row vector, such as the output matrix C, can be represented with elements 
separated by spaces or commas and enclosed in square brackets. A column vector, 
such as input matrix B, can be written as elements separated by semicolons or 
carriage returns, or as the transpose (') of a row vector. 
'(ch3p2)' 
C=[2 3 4] 
B=[7;8;9] 
'or' 
B=[7 
% Display label. 
% Represent row vector C. 
% Represent column vector B . 
% Represent column vector B. 
9] 
' o r ' 
B=[7 8 9]' 
pause 
% Represent column v e c t o r B, 
ch3p3 The state-space representation consists of specifying the A, B, C, and D 
matrices followed by the creation of an LTI state-space object using the MATLAB 
command, ss(A,B,C,D). Hence, for the matrices in (ch3pl) and (ch3p2), the state-
space representation would be: 

Appendix B: MATLAB Tutorial 
•(ch3p3)' 
A=[0 10;0 0 lf-9 -8 -7] 
B=[7;8;9] ; 
C=[2 3 4] ; 
D=0; 
F=ss (A,B,C,D) 
% Display label. 
% Represent A. 
% Represent column vector B. 
% Represent row vector C. 
% Represent D. 
% Create an LTI object and display. 
ch3p4 (Example 3.4) Transfer functions represented either by numerator and 
denominator or an LTI object can be converted to state space. For numerator and 
denominator representation, the conversion can be implemented using [A, B, C, D] 
=tf2ss (num, den). The A matrix is returned in a form called the controller 
canonical form, which will be explained in Chapter 5 in the text. To obtain the phase-
variable form, [Ap, Bp, Cp, Dp], we perform the following operations: Ap=inv (P) 
*A*P; Bp=inv (P) *B; Cp=C*P, Dp=D, where P is a matrix with l's along the anti-
diagonal and 0's elsewhere. These transformations will be explained in Chapter 5. 
The command inv (X) finds the inverse of a square matrix. The symbol * signifies 
multiplication. For systems represented as LTI objects, the command ss (F), where 
F is an LTI transfer-function object, can be used to convert F to a state-space object. 
Let us look at Example 3.4 in the text. For the numerator-denominator representa-
tion, notice that the MATLAB response associates the gain, 24, with the vector C 
rather than the vector B as in the example in the text. Both representations are 
equivalent. For the LTI transfer-function object, the conversion to state space does 
not yield the phase-variable form. The result is a balanced model that improves the 
accuracy of calculating eigenvalues, which are covered in Chapter 4. Since ss (F) 
does not yield familiar forms of the state equations (nor is it possible to easily 
convert to familiar forms), we will have limited use for that transformation at this 
time. 
' (ch3p4) Example 3.4' 
% Display label. 
'Numerator-denominator representation conversion' 
% Display label. 
'Controller canonical form' 
num=2 4; 
den=[l 9 26 24]; 
[A, B, C, D]=tf 2ss (num, den] 
'Phase-variable form' 
P=[0 0 1/0 1 0;1 0 0]; 
Ap=inv(P)*A*P 
Bp=inv(P)*B 
Cp=C*P 
Dp=D 
'LTI object representation' 
T=tf(num, den) 
Tss=ss(T) 
pause 
% Display label. 
% Define numerator of 
%G(s)=C(s)/R(s) . 
% Define denominator of G (s) . 
% Convert G(s) to controller 
% canonical form, store matrices 
% A, B, C, D, and display. 
% Display label. 
% Form transformation matrix. 
% Form A matrix, phase-variable 
% form. 
% FormBvector, phase-variable 
% form. 
% FormCvector, phase-variable 
% form. 
% Form D phase-variable form. 
% Display label. 
% Represent T (s) =24/ (sA3+9sA2 + 
% 26s+24) as an LTI transfer-
% function object. 
% Convert T (s) to state space. 

B.2 MATLAB Examples 
795 
ch3p5 State-space representations can be converted to transfer functions repre-
sented by a numerator and a denominator using [num,den]=ss2tf (A,B,C,D, 
iu), where iu is the input number for multiple-input systems. For single-input, 
single-output systems iu=l. For an LTI state-space system, Tss, the conversion can 
be implemented using Ttf=tf (Tss) to yield the transfer function in polynomial 
form or Tzpk=zpk (Tss) to yield the transfer function in factored form. For 
example, the transfer function represented by the matrices described in (ch3p3) 
can be found as follows: 
' (ch3p5)' 
'NonLTI' 
A=[0 1 0;0 0 1,--9 -8 -7]; 
B=[7;8;9]; 
C=[2 3 4] 
D=0; 
'Ttf (s)' 
[num, den]=ss2tf (A,B,C,D, 1) 
'LTI' 
Tss=ss(A,B,C,D) 
'Polynomial form, T t f ( s ) ' 
T t f = t f ( T s s ) 
' F a c t o r e d form, Tzpk(s)' 
Tzpk=zpk(Tss) 
pause 
Display label. 
Display label. 
Represent A. 
Represent B. 
Represent C . 
Represent D. 
Display label. 
Convert state-space 
representation to a 
transfer function represented as 
a numerator and denominator in 
polynomial form, G (s)=num/den, 
and display num and den . 
Display label. 
Form LTI state-space model. 
Display label. 
Transform from state space to 
transfer function in polynomial 
form. 
Display label. 
Transform from state space to 
transfer function in factored 
form. 
Chapter 4: Time Response 
ch4p1 (Example 4.6) We can use MATLAB to calculate characteristics of a second-
order system, such as damping ratio, £; natural frequency, con; percent overshoot, % OS 
(pos); settling time, Ts; and peak time, Tp. Let us look at Example 4.6 in the text. 
' (ch4pl) Example 4 . 6 ' 
pl=[l 3 + 7*i]; 
p2=[l 3-7*i]; 
d e n g = c o n v ( p i , p 2 ) ; 
omegan=sqrt(deng(3)/deng(1)) 
zeta= (deng (2) /deng (1))/ (2*omegan) 
Ts=4/ (zeta*omegan) 
% Display label. 
% Define polynomial containing 
% first pole. 
% Define polynomial containing 
% second pole . 
% Multiply the two polynomials to 
% find the 2nd order polynomial, 
% asA2+bs+c. 
% Calculate the natural frequency, 
% sqrt(c/a) . 
% Calculate damping ratio, 
% ((b/a)/2*wn). 
% Calculate settling time, 
% (4/z*wn) . 

796 
Appendix B: MATLAB Tutorial 
Tp=pi/ (omegan*sqrt (1 - z e t a A 2 ) ) 
% C a l c u l a t e peak t i m e , 
%pi/wn*sqrt (1 -z A2) . 
pos=100*exp ( - z e t a * p i / s q r t (1 - z e t a A 2 ) ) 
% Calculate percent overshoot 
% (100*eA(-z*pi/sqrt(l-zA2) ) . 
pause 
ch4p2 (Example 4.8) We can use MATLAB to obtain system step responses. These 
responses are particularly valuable when the system is not a pure two-pole system and 
has additional poles or zeros. We can obtain a plot of the step response of a transfer 
function, T(s) =num/den, using the command step (T), where T is an LTI transfer-
function object. Multiple plots also can be obtained using step (Tl, T2, . . .) 
Information about the plots obtained with step (T) can be found by left-
clicking the mouse on the curve. You can find the curve's label as well as the 
coordinates of the point on which you clicked. Right-clicking away from a curve 
brings up a menu. From this menu you can select (1) system responses to be 
displayed and (2) response characteristics to be displayed, such as peak response. 
When selected, a dot appears on the curve at the appropriate point. Let your mouse 
rest on the point to read the value of the characteristic. You may also select (3) 
choice for grid on or off, (4) choice to normalize the curve, and (5) properties, such as 
labels, limits, units, style, and characteristics. 
If we add the left-hand side, [y, t]=step (T), we create vectors containing the 
plot's points, where y is the output vector and t is the time vector. For this case, a plot 
is not made until the plot (t,y) command is given, where we assume we want to 
plot the output (y) versus time (t). We can label the plot, the x-axis, and the y-axis 
with t i t l e ('ab' ) , xlabel Cab' ) , and ylabel ('ab' ), respectively. The 
command elf clears the graph prior to plotting. Finally, text can be placed anywhere 
on the graph using the command text (X, Y,' text' ), where (X, Y) are the graph 
coordinates where ' text' will be displayed. Let us look at Example 4.8 in the text. 
1 (ch4p2) Example 4.8' 
'Test Run' 
elf 
numtl=[24.542]; 
dentl=[l 4 24.542]; 
*T1(s)' 
Tl=tf(numtl,dentl) 
step(Tl) 
title ('Test Run of Tl(s)' 
pause 
'Complete Run' 
[yl,tl]=step(TD; 
numt2=[245.42]; 
pl=[l 10]; 
p2=[l 4 24.542]; 
dent2=conv(pi,p2); 
•T2(s)' 
T2=tf(numt2,dent2) 
% Display label. 
% Display label. 
% Clear graph. 
% Define numerator of Tl. 
% Define denominator of Tl. 
% Display label. 
% Create and display Tl (s) . 
% Run a demonstration step response 
%plot 
% Add title to graph. 
% Display label. 
% Run step response of Tl and 
% collect points . 
% Define numerator of T2 . 
% Define (s+10) in denominator 
%of T2. 
% Define (sA2+4s+24.542) in 
% denominator of T2. 
%Multiply (s + 10) (sA2+4s+24.542) 
% for denominator of T2 . 
% Display label. 
% Create and display T2 . 

B.2 MATLAB Examples 
797 
[y2,t2]=step(T2) ; 
numt3=[73.626]; 
p3=[l 3]; 
dent3=conv(p3,p2); 
' T 3 ( s ) ' 
T3=tf(numt3,dent3) 
[y3,t3]=step(T3) ; 
elf 
p l o t ( t l , y l , t 2 , y 2 , t 3 , y 3 ) 
t i t l e ('Step Responses of Tl (s) ,T2 
xlabel ('Time (seconds)') 
ylabel ('Normalized Response') 
text(0.7,0.7,'c3(t)') 
text(0.7,l.l,'c2(t)') 
text(0.5,1.3,'cl (t)') 
pause 
step(Tl,T2,T3) 
% Run step response of T2 and 
% collect points . 
% Define numerator of T3. 
% Define (s + 3) in denominator 
%of T3. 
%Multiply (s+3)(sA2+4s+24.542) 
% for denominator of T3 . 
% Display label. 
% Create and display T3 . 
% Run step response of T3 and 
% collect points . 
% Clear graph. 
% Plot acquired points with all 
% three plots on one graph. 
;s) , andT3 (s)') 
% Add title to graph. 
% Add time axis label. 
% Add response axis label. 
% Label step response of Tl. 
% Label step response of T2 . 
% Label step response of T3 . 
title ('Step Responses of Tl(s 
pause 
% Use alternate method of plotting 
% step responses . 
T2(s) , andT3(s)') 
% Add title to graph. 
ch4p3 We also can plot the step response of systems represented in state space using the 
s tep (T, t) command. Here T is any LTI object and t=a: b: c is the range for the time 
axis, where a is the initial time, b is the time step size, and c is the final time. For example, 
t=0 :1:10 means time from 0 to 10 seconds in steps of 1 second. The t field is optional. 
Finally, in this example we introduce the command grid on, which superimposes a grid 
over the step response. Place the grid on command after the step (T, t) command. 
'(ch4p3)' 
elf 
A=[0 10,-0 0 l;-24 -26 -9], 
B=[0;0;1]; 
C=[2 7 1]; 
D=0; 
T=ss(A,B,C,D) 
t=0:0.1:10; 
step(T,t) 
grid on 
pause 
Display label. 
Clear graph. 
Generate A matrix. 
Generate B vector . 
Generate C vector. 
Generate D. 
Generate LTI object, T, instate 
space and display. 
Define range of time for plot. 
Plot step response for given 
range of time. 
Turn grid on for plot. 
ch4p4 (Antenna Control Case Study) We now use MATLAB to plot the step 
response requested in the Antenna Control Case Study. 
;ch4p4) Antenna Control Case Study' 
elf 
% Display label. 
% Clear graph. 

798 
Appendix B: MATLAB Tutorial 
numg=20.83; 
deng=[l 101.71 171]; 
' G ( s ) ' 
G=tf(numg,deng) 
step(G) ; 
title ('Angular Velocity Response' 
pause 
% Define numerator of G (s) . 
% Define denominator of G (s) . 
% Display label. 
% Form and display transfer 
% Function G (s) . 
% Generate step response. 
% Add title. 
ch4p5 (UFSS Case Study) As a final example, let us use MATLAB to do the UFSS 
Case Study in the text {Johnson, 1980). We introduce table lookup to find the rise 
time. Using the i n t e r p l ( y , t , y l ) command, we set up a table of values of 
amplitude, y, and time, t, from the step response and look for the value of time for 
which the amplitude is y l = 0.1 and 0.9. We also generate time response data over a 
defined range of time using t = a : b : c followed by [ y, t ] = s t e p (G, t ) . Here G is an 
LTI transfer-function object and t is the range for the time axis, where a is the initial 
time, b is the time step size, and c is the final time; y is the output. 
' (ch4p5) UFSS Case Study' 
elf 
'(a)' 
numg=0.0169; 
deng=(l 0.22 6 0.0169]; 
'G(s)' 
G=tf(numg,deng) 
omegan=sqrt(deng(3) ) 
zeta=deng(2)I(2*omegan) 
Ts=4/ (zeta*omegan) 
Tp=pi/(omegan*sqrt(l-zetaA2)) 
pos=exp/(-zeta*pi/sqrt(l-zetaA2 
t=0:0.1:35; 
[y,t]=step(G,t); 
Tlow=interpl(y,t,0.1); 
T h i = i n t e r p l ( y , t , 0 . 9 ) ; 
Tr=Thi-Tlow 
'(b)' 
numc=0.125*[l 0.435]; 
denc=conv(poly ([0 -1.23]) ,[1 0.226 
[K,p, k]=residue (numc,denc) 
' (d)' 
numg=0.125*[l 0.435]; 
deng=conv([l 1.23],[1 0.226 0.0169] 
'G(s)' 
G=tf(numg,deng) 
% Display label. 
% Clear graph . 
% Display label. 
% Define numerator of 2nd order 
% approximation of G(s). 
% Define 2nd order term of 
% denominator of G(s). 
% Display label. 
% Create and display G (s) . 
% Find natural frequency. 
% Find damping ratio. 
% Find settling time. 
% Find peak time. 
! )*100 
% Find percent overshoot. 
% Limit time to find rise time . t=0 
% to 35 in steps of 0 .1. 
% Generate and save points of step 
% response over defined range oft. 
% Search table for time when 
% y=0.1*finalvalue. 
% Search table for 
% time=0.9*finalvalue. 
% Calculate rise time . 
% Display label. 
% Define numerator of C (s) . 
0.0169]) ; 
% Define denominator of C (s) . 
% Find partial-fraction expansion 
% Display label. 
% Define numerator of G (s) . 
i ; 
% Define denominator of G (s) . 
% Display label. 
% Create and display G (s) . 

B.2 MATLAB Examples 
[y,t]=step(G); 
plot(t,y) 
title ('Pitch Angle Response ') 
xlabel ('Time (seconds)') 
ylabel ('Pitch Angle (radians)') 
pause 
Chapter 5: Reduction of Multiple Subsystems 
ch5p1 (UFSS Pitch Control System) 
MATLAB can be used for block diagram 
reduction. Three methods are available: (1) Solution via Series, Parallel, & Feedback 
Commands, (2) Solution via Algebraic Operations, and (3) Solution via Append & 
Connect Commands. Let us look at each of these methods. 
1. Solution via Series, Parallel, & Feedback Commands 
The closed-loop transfer function is obtained using the following commands 
successively, where the arguments are LTI objects: s e r i e s (G1,G2) for a 
cascade connection of G\(s); and G2(s); p a r a l l e l (Gl, G2) for a parallel 
connection of Gi(s) and G2(s); feedback (G, H, sign) for a closed-loop con-
nection with G(s) as the forward path, H(s) as the feedback, and sign is - 1 for 
negative-feedback systems or +1 for positive-feedback systems. The sign is 
optional for negative-feedback systems. 
2. Solution via Algebraic Operations 
Another approach is to use arithmetic operations successively on LTI transfer 
functions as follows: G2*G1 for a cascade connection of Gi(.v) and G2(s); G1+G2 
for a parallel connection of G\(s) and G2(s); G/ (1+G*H) for a closed-loop 
negative-feedback connection with G(s) as the forward path and H(s) as the 
feedback; G/ (1-G*H) for positive-feedback systems. When using division we 
follow with the function m i n r e a l ( s y s ) 
to cancel common terms in the 
numerator and denominator. 
3. Solution via Append & Connect Commands 
The last method, which defines the topology of the system, may be used 
effectively for complicated systems. First, the subsystems are defined. Second, 
the subsystems are appended, or gathered, into a multiple-input/multiple-output 
system. Think of this system as a single system with an input for each of the 
subsystems and an output for each of the subsystems. Next, the external inputs 
and outputs are specified. Finally, the subsystems are interconnected. Let us 
elaborate on each of these steps. 
The subsystems are defined by creating LTI transfer functions for each. The 
subsystems are appended 
using the command 
G=append(Gl,G2,G3, 
G4, 
Gn), where the Gi are the LTI transfer functions of the subsystems 
and G is the appended system. Each subsystem is now identified by a number 
based upon its position in the append argument. For example, G3 is 3, based on 
the fact that it is the third subsystem in the append argument (not the fact that we 
write it as G3). 
Now that we have created an appended system, we form the arguments 
required to interconnect their inputs and outputs to form our system. The first 
step identifies which subsystems have the external input signal and which 
subsystems have the external output signal. For example, we use i n p u t s = 
[ 1 5 6] and outputs=[3 4] to define the external inputs to be the inputs of 
% Generate complete step response 
% and collect points . 
% Plot points . 
% Add title. 
% label time axis . 
% Label y-axis . 

800 
Appendix B: MATLAB Tutorial 
subsystems 1,5, and 6 and the external outputs to be the outputs of subsystems 3 
and 4. For single-input/single-output systems, these definitions use scalar quanti-
ties. Thus inputs=5, outputs=8 define the input to subsystem 5 as the external 
input and the output of subsystem 8 as the external output. 
At this point we tell the program how all of the subsystems are interconnected. 
We form a Q matrix that has a row for each subsystem whose input comes from 
another subsystem's output. The first column contains the subsystem's number. 
Subsequent columns contain the numbers of the subsystems from which the 
inputs come. Thus, a typical row might be as follows: [3 6 -7], or subsystem 3's 
input is formed from the sum of the output of subsystem 6 and the negative of the 
output of subsystem 7. 
Finally, all of the interconnection arguments are used in the connect (G Q 
inputs, outputs) command, where all of the arguments have been previously 
defined. 
Let us demonstrate the three methods for finding the total transfer 
function by looking at the back endpapers and finding the closed-loop 
transfer function of the pitch control loop for the UFSS with Kt = K% — I 
{Johnson, 1980). The last method using append and connect requires that all 
subsystems be proper (the order of the numerator cannot be greater than the 
order of the denominator). The pitch rate sensor violates this requirement. 
Thus, for the third method, we perform some block diagram maneuvers by 
pushing the pitch rate sensor to the left past the summing junction and 
combining the resulting blocks with the pitch gain and the elevator actuator. 
These changes are reflected in the program. You should verify all computer 
results with hand calculations. 
' (ch5pl) UFSS Pitch Control System' 
' & Feedback Commands ' 
'Solution via Series, Parallel' 
numgl=[-l]; 
dengl=[l]; 
numg2=[0 2]; 
deng2=[l 2]; 
numg3=-0.125*[l 0.435]; 
deng3=conv([l 1.231,11 0.226 0.0169]] 
numhl=[-l 0]; 
denhl=[0 1]; 
Gl=tf(numgl,dengl); 
G2=tf(numg2,deng2) ; 
G3=tf(numg3,deng3); 
Hl=tf (numhl,denhl); 
G4=series(G2,G3); 
G5=feedback(G4,Hl); 
Ge=series(G1,G5); 
% Display labels . 
% Define numerator of Gl (s) . 
% Define denominator of Gl (s) . 
% Define numerator of G2 (s) . 
% Define denominator of G2 (s) . 
% Define numerator of G3 (s) . 
% Define denominator of G3 (s) . 
% Define numerator of Hi (s) . 
% Define denominator of Hi (s) . 
% Create LTI transfer function, 
% Gl(s) . 
% Create LTI transfer function, 
%G2(s) . 
% Create LTI transfer function, 
%G3(s) . 
% Create LTI transfer function, 
%Hl(s) . 
% Calculate product of elevator 
% and vehicle dynamics. 
% Calculate close-loop transfer 
% function of inner loop. 
% Multiply inner-loop transfer 
% function and pitch gain. 

B.2 MATLAB Examples 
801 
'T(s) via Series, Parallel, & Feedback Commands' 
% Display label. 
T=feedback (Ge, 1) 
% Find closed-loop transfer 
% function . 
' Solution via Algebraic Operations' 
% Display label. 
clear 
% Clear session. 
numgl=[-l]; 
% Define numerator of Gl (s) . 
dengl=[l]; 
% Define denominator of Gl (s) . 
numg2=[0 2]; 
% Define numerator of G2 (s) . 
deng2=[l 2]; 
% Define denominator of G2 (s) . 
numg3=-0.125*[l 0.435]; 
% Define numerator of G3 (s) . 
deng3 = conv([l 1.23],[1 0.226 0.0169]) ; 
% Define denominator of G3 (s) . 
numhl=[-l 0]; 
denhl=[0 1]; 
Gl=tf (numgl,dengl) 
G2=tf (numg2,deng2) 
G3=tf (numg3,deng3) 
Hl=tf (numhl,denhl) 
G4=G3*G2; 
G5=G4/(1+G4*H1); 
G5=minreal(G5); 
Ge=G5*Gl; 
'T(s) via Algebraic Operations' 
T=Ge/(l+Ge); 
T=minreal(T) 
' Solution via Append & Connect Commands' 
% Display label. 
'Gl(s) = (-Kl)*(l/(-K2s) )=l/s' 
numgl = [1]; 
% Define numerator of HI (s) . 
% Define denominator of HI (s) . 
% Create LTI transfer function, Gl (s). 
% Create LTI transfer function, G2 (s). 
% Create LTI transfer function, G3 (s). 
% Create LTI transfer function, Hi (s). 
% Calculate product of elevator and 
% vehicle 
% dynamics . 
% Calculate closed-loop transfer 
% function of inner loop. 
% Cancel common terms . 
% Multiply inner-loop transfer 
% functions . 
% Display label. 
% Find closed-loop transfer function. 
% Cancel common terms . 
dengl=[l 0]; 
Gl=tf(numgl,dengl) 
'G2(s) = (-K2s)*(2/(s+2)r 
numg2=[-2 0]; 
deng2=[l 2]; 
G2=tf(numg2,deng2) 
'G3(s)=-0.125(s+0.435)/( (s + 1.23) 
% Display label. 
% Define numerator of Gl (s) . 
% Define denominator of Gl (s) . 
% Create LTI transfer function, 
% Gl (s)=pitchgain* 
% 1 (1/Pitch rate sensor) . 
% Display label. 
% Define numerator of G2 (s) . 
% Define denominator of G2 (s) . 
% Create LTI transfer function, 
% G2 (s) =pitch rate sensor* vehicle 
% dynamics . 
!sA2+0.226s+0.0169))' 
% Display label. 
% Define numerator of G3 (s) . 
numg3=-0.125*[l 0.435]; 
deng3=conv ([1 1.23],[1 0.226 0.0169]); 
% Define denominator of G3 (s) . 
G3=tf (numg3,deng3); 
% Create LTI transfer function, 
% G3 (s) =vehicle dynamics . 
System=append (Gl, G2, G3) ; 
% Gather all subsystems. 
input=l; 
% Input is at first subsystem, 

802 
Appendix B: MATLAB Tutorial 
output=3; 
Q=[l -3 0 
2 1-3 
3 2 0]; 
T=connect(System,Q,input,output) 
' T (s) via Append & Connect Commands' 
T=tf(T); 
T=minreal(T) 
pause 
%Gl(s) . 
% Output is output of third 
% subsystem, G3(s) . 
% Subsystem 1, Gl(s) , gets its 
% input from the negative of the 
% output of subsystem 3, G3 (s) . 
% Subsystem 2, G2(s), gets its 
% input from subsystem 1, Gl (s) , 
% and the negative of the output 
% of subsystem 3, G3(s) . 
% Subsystem 3, G3 (s), gets its 
% input from subsystem 2, G2 (s) . 
% Connect the subsystems . 
% Display label. 
% Create LTI closed-loop transfer 
% function. 
% Cancel common terms . 
ch5p2 (Example 5.3) We can use MATLAB to calculate the closed-loop character-
istics of a second-order system, such as damping ratio, f; natural frequency, &>„; 
percent overshoot, %OS (pos); settling time, Ts; and peak time, Tp. The command 
[numt, dent] =tf data (T,'v') extracts the numerator and denominator of T(s) 
for a single-input/single-output system from which the calculations are based. The 
argument 'v' returns the numerator and denominator as simple row vectors. Omit-
ting ' v' would return the numerator and denominator as cell arrays requiring more 
steps to obtain the row vectors. We end by generating a plot of the closed-loop step 
response. Let us look at Example 5.3 in the text. 
'(ch5p2) Example 5 . 3 ' 
numg=[25]; 
deng=poly([0 -5]) ; 
' G ( s ) ' 
G=tf(numg,deng) 
' T ( s ) ' 
T=feedback(G,l) 
[numt, d e n t ] = t f d a t a (T, 'v') ; 
wn=sgrt(dent(3)) 
z=dent(2)/ (2*wn) 
Ts=4/ (z*wn) 
Tp=pi/ (wn*sqrt (1-2^2) ) 
pos=exp (-z*pi/sqrt (l-zA2) ) *100 
step(T) 
pause 
% Display label. 
% Define numerator of G (s) . 
% Define denominator of G (s) . 
% Display label. 
% Create and display G (s) . 
% Display label. 
% FindT(s) . 
% Extract numerator & denominator 
% ofT(s) . 
% Find natural frequency. 
% Find damping ratio . 
% Find settling time. 
% Find peak time. 
% Find percent 
overshoot. 
% Generate step response . 
ch5p3 MATLAB can be used to convert transfer functions to state space in a 
specified form. The command [Ace Bcc Ccc Dcc]!=tf2ss (num, den) can be used 
to convert r(.s)=num/den into controller canonical form with matrices and vectors 
Ace, Bcc, Ccc, and Dec. We can then form an LTI state-space object using 
Scc=ss (Ace, Bcc, Ccc, Dec). This object can then be converted into parallel 

B.2 MATLAB Examples 
803 
form using Sp=canon ( S e c / t y p e ' ), where type=modal yields the parallel 
form. Another choice, not used here, is type=companion, which yields a right 
companion system matrix. Transformation matrices can be used to convert to other 
representations. As an example, let us convert C(s)/R(s) = 24/[(s + 2)(s + 3)(s + 4)] 
into a parallel representation in state space, as is done in Section 5.7—Parallel Form. 
Notice that the product of values in the B and C vectors yields the same product as 
the results in Eqs. (5.49) and (5.50). Thus, the two solutions are the same, but the 
state variables are ordered differently, and the gains are split between the B and C 
vectors. We can also extract the system matrices from the LTI object using [A, B, c, 
D]=ssdata (S), where S is a state-space LTI object and A, B, c, D, are its 
associated matrices and vectors. 
'(ch5p3)' 
numt=2 4; 
dent=poly ([-2 -3 -4]) ; 
'T(s)' 
T=tf(numt,dent) 
[Ace Bcc Ccc Dcc]=tf 2ss (numt, dent) 
Scc=ss(Ace,Bcc,Ccc,Dec); 
Sp=canon (Sec, 'modal') ; 
'Controller Canonical Form' 
[Ace, Bcc, Ccc, Dcc]=ssdata (Seel 
'Parallel Form' 
[Ap,Bp, Cp, Dp]=ssdata (Sp) 
pause 
% Display label. 
% Define numerator of T (s) . 
% Define denominator of T (s) . 
% Display label. 
% Create and display T (s) . 
% Convert T (s) to controller 
% canonical form. 
% Create LTI controller canonical 
% state-space object. 
% Convert controller canonical form 
% to parallel form. 
% Display label. 
% Extract and display controller 
% canonical form matrices . 
% Display label. 
% Extract and display parallel form 
% matrices . 
ch5p4 (Example 5.9) 
We can use MATLAB to perform similarity transformations 
to obtain other forms. Let us look at Example 5.9 in the text. 
' (ch5p4) Example 5. 9' 
Pinv=[2 0 0; 3 2 0/ 14 5]; 
P=inv(Pinv) 
' O r i g i n a l ' 
Ax=[0 1 0 ; 0 0 1 ; - 2 - 5 -7] 
Bx=[0 0 1] 
Cx=[l 0 0] 
'Transformed' 
Az=Pinv*Ax*P 
Bz=Pinv*Bx 
Cz=Cx*P 
pause 
% Display l a b e l . 
% Define P i n v e r s e . 
% C a l c u l a t e P. 
% Display l a b e l . 
% Define o r i g i n a l A. 
% Define o r i g i n a l B. 
% Define o r i g i n a l C . 
% Display l a b e l . 
% C a l c u l a t e new A. 
% C a l c u l a t e new B. 
% C a l c u l a t e new C. 
ch5p5 Using MATLAB's [P, d]=eig (A) command, where the columns of P are 
the eigenvectors of A and the diagonal elements of d are the eigenvalues of A, we can 
find the eigenvectors of the system matrix and then proceed to diagonalize the 
system. We can also use canon (S,' modal' ) to diagonalize an LTI object, S, 
represented in state space. 

804 
Appendix B: MATLAB Tutorial 
' ( c h 5 p 5 ) ' 
A=[3 1 5; 4 -2 7; 2 3 1], 
B=[l;2;3]; 
C=[2 4 6]; 
[P,d]=eig(A) 
'Via Transformation' 
Adt=inv(P)*A*P 
Bdt=inv(P)*B 
Cdt=C*P 
'Via Canon Command' 
S=ss(A,B,C, 0) 
Sp=canon (S, 'modal') 
pause 
Display label. 
Define original A. 
Define original B. 
Define original C. 
Generate transformation matrix, 
P, and eigenvalues, d. 
Display label. 
Calculate diagonal system A. 
Calculate diagonal systemB. 
Calculate diagonal system C. 
Display label. 
Create state-space LTI object 
for original system. 
Calculate diagonal system via 
canon command. 
Chapter 6: Stability 
ch6p1 (Example 6.7) MATLAB can solve for the poles of a transfer function in 
order to determine stability. To solve for the poles of T(s) use the pole(T) 
command. Let us look at Example 6.7 in the text. 
' ( c h 6 p l ) Example 6.1' 
numg=1; 
deng=conv ([1 0],[2 3 2 3 2]) 
G=tf(numg,deng) ; 
' T ( s ) ' 
T=feedback(G,l) 
poles=pole(T] 
pause 
% Display label. 
% Define numerator of G (s) . 
% Define denominator of G (s) . 
% CreateG(s) object. 
% Display label. 
% Calculate closed-loop T (s) 
% object. 
% Negative feedback is default 
% when there is no sign parameter. 
% Find poles of T (s) . 
ch6p2 (Example 6.9) We can use MATLAB to find the range of gain for stability 
by generating a loop, changing gain, and finding at what gain we obtain right-half-
plane poles. 
* (ch6p2) Example 6.9' 
K=[l: 1:2000]; 
for n = l : l e n g t h (K) ; 
dent=[l 18 77K{n)]; 
p o l e s = r o o t s ( d e n t ) ; 
r = r e a l ( p o l e s ) ; 
i f max (r) > = 0, 
p o l e s 
Display l a b e l . 
Define range of K from 1 t o 2000 
i n s t e p s of 1. 
Set up length of DO LOOP to equal 
number of K values to be tested. 
Define the denominator of T (s) 
for the nth value of K. 
Find the poles for the nth value 
of K. 
Forma vector containing the real 
parts of the poles for K (n) . 
Test poles found for the nth 
value of K for a real value > 0 . 
Display first pole values where 
there is a real part > 0 . 

B.2 MATLAB Examples 
805 
K=K(n) 
break 
end 
end 
pause 
% Display c o r r e s p o n d i n g v a l u e of K. 
% Stop loop i f rhp p o l e s a r e found. 
% End i f . 
% End f o r . 
ch6p3 (Example 6.11) We can use MATLAB to determine the stability of a system 
represented in state space by using the command eig (A) to find the eigenvalues of 
the system matrix, A. Let us apply the concept to Example 6.11 in the text. 
' (ch6p3) Example 6.11' 
A=[0 3 1;2 8 1;-10 -5 -2] 
eigenvalues=eig(A) 
pause 
% Display label. 
% Define system matrix, A. 
% Find eigenvalues . 
Chapter 7: Steady-State Errors 
ch7p1 (Example 7.4, sys. b) Static error constants are found using lim snG(s) as 
s —• 0. Once the static error constant is found, we can evaluate the steady-state 
error. To evaluate the static error constant we can use the command dcgain 
(G), which evaluates G(s) at s = 0. Let us look at Example 7.4, system (b), in the 
text. 
' (ch7pl) Example 7.4, sys.b' 
numg=500*poly([-2 -5 -6]) ; 
deng=poly([0 -8 -10 -12]) ; 
G=tf(numg,deng); 
'Check Stability' 
T=feedback(G,l); 
poles=pole(T) 
'Step Input' 
Kp=dcgain(G) 
ess=l/(l+Kp) 
'Ramp Input' 
numsg=conv([l 0],numg) ; 
densg=poly ([0 -8 -10 -12]) ; 
sG=tf(numsg,densg); 
sG=minreal(sG); 
Kv=dcgain(sG) 
ess=l/Kv 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
'Parabolic Input' 
nums2g=conv ([1 0 0],numg) , 
dens2g=poly([0 -8 -10-12]; 
s2G=tf(nums2g,dens2g); 
s2G=minreal(s2G); 
Ka=dcgain(s2G) 
ess=l/Ka 
pause 
Display label 
Define numerator of G (s) . 
Define denominator of G(s) . 
FormG(s) 
Display label. 
FormT(s) 
Display closed-loop poles. 
Display label. 
Evaluate Kp=numg/deng for s=0 . 
Evaluate ess for step input. 
Display label. 
Define numerator of sG (s) . 
Define denominator of sG (s) . 
Create sG (s) . 
Cancel common 's' in 
numerator(numsg) and 
denominator(densg). 
Evaluate Kv=sG(s) fors=0. 
Evaluate steady-state error for 
ramp input. 
Display label. 
Define numerator of sA2G (s) . 
Define denominator of sA2G (s) . 
Create sA2G(s) . 
Cancel common 's' in 
numerator(nums2g) and 
denominator(dens2g). 
Evaluate Ka=sA2G(s) f or s=0 . 
Evaluate steady-state error for 
parabolic input. 

806 
Appendix B: MATLAB Tutorial 
ch7p2 (Example 7.6) 
We can use MATLAB to evaluate the gain, K, required to 
meet a steady-state error specification. Let us look at Example 7.6 in the text. 
'(ch7p2) Example 7.6 ' 
numgdK=[l 5]; 
dengdK=poly ([0 -6-7 -8]) ; 
GdK=tf(numgdK,dengdK); 
numgkv=conv ([1 0], numgdK) 
dengkv=dengdK; 
GKv=tf(numgkv,dengkv); 
GKv=minreal(GKv); 
KvdK=dcgain(GKv) 
ess=0.1 
K=l/ (ess*KvdK) 
'Check Stability' 
T=feedback (K*GdK, 1) ; 
poles=pole(T) 
pause 
Display label. 
Define numerator of G (s) /K. 
Define denominator of G (s) /K. 
Create G(s) /K. 
Define numerator of sG (s) /K. 
Define denominator of sG (s) /K. 
Create sG(s) /K. 
Cancel common 's' in numerator 
and denominator of sG (s) /K. 
Evaluate (Kv/K)=(numgkv/dengkv) 
for s=0. 
Enumerate steady-state error. 
Solve for K. 
Display label. 
ForraT (s) . 
Display closed-loop poles . 
Chapter 8: Root Locus Techniques 
ch8p1 (Example 8.7) 
MATLAB allows root loci to be plotted with the 
r l o c u s (GH) command, where G ^ / ^ s ^ n u m g h / d e n g h and GH is an LTI trans-
fer-function object. Points on the root locus can be selected interactively using the 
[K/p]=rlocfind(GH) command. MATLAB then yields the gain (K) at that point 
as well as all other poles (p) that have that gain. We can zoom in and out of the root 
locus by changing the range of axis values using the command a x i s ([xmin, xmax, 
ymin, ymax]). The root locus can be drawn over a grid that shows constant damping 
ratio (z) and constant natural frequency (wn) curves using the s g r i d (z,wn) 
command. To plot multiple £ and con curves, use z=zmin: z s t e p : zmax and 
wn=wnmin: w n - s t e p : wnmax to specify ranges of values. 
' (ch8pl) Example 8.7' 
elf 
numgh=[l -4 20]; 
dengh=poly([-2 -4]); 
*G(s)H(s)' 
GH=tf(numgh,dengh) 
rlocus(GH) 
z=0.2:0.05:0.5; 
wn=0:l:10; 
sgrid(z,wn) 
title ('Root Locus') 
pause 
rlocus(GH) 
axis ([-3 1 -4 4]) 
title ('Close-up') 
% Display label. 
% Clear graph on screen. 
% Define numerator of G (s) H (s) . 
% Define denominator of G (s) H (s) . 
% Display label. 
% Create G (s)H(s) and display. 
% Draw root locus . 
% Define damping ratio values : 0.2 
% to 0 . 5 in steps of 0 . 05 . 
% Define natural f reguency values : 
% 0 to 10 in steps of 1. 
% Generate damping ratio and 
% natural f reguency grid lines for 
% root locus . 
% Define title for root locus . 
% Draw close-up root locus . 
% Define range on axes for root 
% locus close-up view. 
% Define title for close-up root 
% locus . 

B.2 M ATLAB Examples 
807 
z=0. 45; 
% Define damping r a t i o l i n e for 
% o v e r l a y on c l o s e - u p r o o t l o c u s . 
wn=0; 
% Suppress n a t u r a l frequency 
% o v e r l a y c u r v e s . 
s g r i d (z,wn) 
% Overlay damping r a t i o curve on 
% c l o s e - u p r o o t locus . 
for k = l : 3 
% Loop allows 3 p o i n t s t o be 
% s e l e c t e d as per Example 8.7, 
%(z=0.45, j w c r o s s i n g , b r e a k a w a y ) . 
[K, p]=rlocf ind(GH) 
% Generate g a i n , K, and c l o s e d - l o o p 
% p o l e s , p , for p o i n t s e l e c t e d 
% i n t e r a c t i v e l y on t h e r o o t locus . 
end 
% End l o o p . 
pause 
ch8p2 (Example 8.8) We can couple the design of gain on the root locus with a 
step-response simulation for the gain selected. We introduce the command r locus 
(G, K), which allows us to specify the range of gain, K, for plotting the root locus. This 
command will help us smooth the usual root locus plot by equivalently specifying 
more points via the argument, K. Notice that the first root locus plotted without the 
argument K is not smooth. We also introduce the command x=input (' prompt' ), 
which allows keyboard entry of a value for x in response to a prompt. We apply this 
command to enter the desired percent overshoot. We also add a variables value to 
the title of the root locus and step-response plots by inserting another field in the title 
command and use num2 s t r (value) to convert value from a number to a character 
string for display. Let us apply the concepts to Example 8.8 in the text. 
' (ch8p2) Example 8.8' 
% Display label. 
clear 
% Clear variables from workspace. 
elf 
% Clear graph on screen . 
numg=[l 1.5]; 
% Define numerator of G (s) . 
deng=poly ([0 -1 -10]) ; 
% Define denominator of G (s) . 
'G(s)' 
% Display label. 
G=tf (numg,deng) 
% Create and display G (s) . 
rlocus (G) 
% Draw root locus (H(s)=l). 
title ('Original Root Locus') 
% Add title. 
pause 
K=0 .005; 
% Specify range of gain to smooth 
% root locus . 
rlocus (G, K) 
% Draw smoothed root locus 
% (H(s)=l) . 
title ('Smoothed Root Locus') 
% Add title. 
pos=input ('Type %OS') ; 
% Input desired percent overshoot 
% from the keyboard. 
z=-log(pos/100) /sqrt(piA2+[log(pos/100)]A2) 
% Calculate damping ratio. 
sgrid (z, 0) 
% Overlay desired damping ratio 
% line on root locus . 
title (['Root Locus with', num2str (pos) ,'% overshoot line']) 
% Define title for root locus 
% showing percent overshoot used. 
[K,p]=rlocfind (G) 
% Generate gain, K, and closed-
% loop poles, p, for point selected 
% interactively on the root locus . 

808 
Appendix B: MATLAB Tutorial 
pause 
'T(s)' 
% Display label 
T= feedback (K*G, 1) 
% Find closed-loop transfer 
% function 
% with selected K and display. 
step(T) 
% Generate closed-loop step 
% response for point select on 
% root locus. 
title (['Step Response for K= ', num2str (K) ]) 
% Give step response a title which 
% includes the value of K. 
pause 
Chapter 9: Design Via Root Locus 
ch9p1 (Example 9.3) We can use MATLAB to design PD controllers. The program 
allows us to input a desired percent overshoot via the keyboard. MATLAB then 
produces a root locus for the uncompensated system with an overlay of the percent 
overshoot line. We interactively select the intersection of the root locus and the desired 
percent overshoot line to set the gain. MATLAB outputs an estimate of the un-
compensated system's performance specifications and a step response of the un-
compensated system for us to determine the required settling time. After we input 
the settling time through the keyboard, MATLAB designs the PD controller and 
produces a root locus of the PD compensated system from which we can interactively 
select the gain. Finally, MATLAB produces an estimate of the PD compensated 
system's performance specifications and a step response of the PD compensated system. 
1 (ch9pl) Example 9.3' 
% Display label. 
elf 
% Clear graph on screen. 
'Uncompensated System' 
% Display label. 
numg=l; 
% Generate numerator of G (s) . 
deng=poly ([0 -4 -6]) ; 
% Generate denominator of G (s) . 
'G(s)' 
% Display label. 
G=tf (numg, deng) 
% Create and display G (s) . 
pos=input ('Type desired percent overshoot') ; 
% Input desired percent overshoot. 
z-log(pos/100)/sqrt(pi A2+[log(pos/100)] A2) ; 
% Calculate damping r a t i o . 
rlocus (G) 
% Plot uncompensated root locus . 
sgrid (z, 0) 
% Overlay desired percent 
% overshoot l i n e . 
t i t l e (['Uncompensated Root Locus with', num2str (pos) , . . . 
Overshoot Line']) 
% Title uncompensated root locus. 
[K,p]=rlocfind(G) ; 
% Generate gain, K, and closed-loop 
% poles, p, for point selected 
% interactively on the root locus . 
'Closed-loop poles=' 
% Display label. 
p 
% Display closed-loop poles . 
f=input ('Give pole number that is operating point') ; 
% Choose uncompensated system 
% dominant pole . 
'Summary of estimated specifications for selected point on' 
'uncompensated root locus' 
% Display label. 
operatingpoint=p (f) 
% Display uncompensated dominant 
% pole. 

B.2 MATLAB Exampl 
gain=K 
% Display uncompensated gain • 
estimated_settling_time=4/abs(real(p(f))) 
% Display uncompensated settling 
% time. 
estimated_peak_time=pi/abs(imag(p(f))) 
% Display uncompensated peak time. 
estimated_percent_overshoot=pos 
% Display uncompensated percent 
% overshoot. 
estimated_damping_ratio=z 
% Display uncompensated damping 
% ratio. 
estimated_natural_frequency=sqrt(real(p(f))A2+imag(p(f))A2) 
% Display uncompensated natural 
% frequency. 
numkv=conv ([1 0],numg) ; 
% Set up numerator to evaluate Kv. 
denkv=deng; 
% Set up denominator to evaluate Kv. 
sG=tf(numkv,denkv); 
% CreatesG(s) . 
sG=minreal (sG) ; 
% Cancel common poles and zeros. 
Kv=dcgain (K*sG) 
% Display uncompensated Kv. 
ess=l/Kv 
% Display uncompensated 
% steady-state 
% error for unit ramp input. 
'T(s)' 
% Display label. 
T=feedback(K*G,1) 
% Find uncompensated T (s) . 
step (T) 
% Plot step response of 
% uncompensated system. 
title (['Uncompensated System Step Response with ', num2str (pos) , . . . 
'% Overshoot']) 
% Add title to uncompensated step 
% response. 
'Press any key to go to PD compensation' 
% Display label. 
pause 
'Compensated system' 
% Display label. 
Ts=input ('Type Desired Settling Time ') ; 
% Input desired settling time from 
% the keyboard. 
wn=4/ (Ts*z) ; 
% Calculate natural frequency. 
desired_pole=(-z*wn) + (wn*sqrt(l-zA2)*i) ; 
% Calculate desired dominant pole 
% location. 
angle_at_desired_pole=(180/pi)*. . . 
angle(polyval(numg,desired_pole)/polyval(deng,desired_pole)); 
% Calculate angular contribution 
% to desired pole without PD 
% compensator. 
PD_angle=180-angle_at_desired_pole; 
% Calculate required angular 
% contribution from PD 
% compensator. 
zc=((imag(desired_pole)/tan(PD_angle*pi/180))... 
_real (desired_pole) ) / 
% Calculate PD zero location. 
'PD'Compensator' 
% Display label. 
numc=[l zc]; 
% Calculate numerator of Gc (s) . 
denc=[0 1]; 
% Calculate numerator of Gc (s) . 
'Gc(s)' 
% Display label. 

810 
Appendix B: MATLAB Tutorial 
Gc=tf (numc,denc) 
% C r e a t e and d i s p l a y Gc (s) . 
' G ( s ) G c ( s ) ' 
% Display l a b e l . 
Ge=G*Gc 
% Cascade G(s) andGc(s) . 
rlocus (Ge, 0: 0 . 005 :100) 
% Plot root locus of PD compensated 
% system. 
sgrid (z, 0) 
% Overlay desired percent 
% overshoot line . 
title (['PD Compensated Root Locus with ', num2str (pos) , . . . 
' % Overshoot Line']) 
% Add title to PD compensated root 
% locus . 
[K,p]=rlocf ind (Ge) ; 
% Generate gain, K, and closed-loop 
% poles, p, for point selected 
% interactively on the root locus . 
'Closed-loop poles=' 
% Display label. 
p 
% Display PD compensated systems' 
% closed-loop poles . 
f=input ('Give pole number that is operating point') ; 
% Choose PD compensated system 
% dominant pole . 
'Summary of estimated specifications for selected point on PD' 
'compensated root locus' 
% Display label. 
operatingpoint=p (f) 
% Display PD compensated dominant 
%pole. 
gain=K 
% Display PD compensated gain . 
estimated_settling_time=4/abs(real(p(f))) 
% Display PD compensated settling 
% time. 
estimated_peak_time=pi/abs(imag(p(f))) 
% Display PD compensated peak time. 
estimated_percent_overshoot=pos 
% Display PD compensated percent 
% overshoot. 
estimated_damping_ratio=z 
% Display PD compensated damping 
% ratio. 
estimated_natural_frequency=sqrt(real(p(f))A2+imag(p(f))A2 
% Display PD compensated natural 
% frequency. 
s=tf ([1 0], 1) ; 
% Created transfer function, 's' . 
sGe=s*Ge; 
% Create sGe (s) . 
sGe=minreal (sGe) ; 
% Cancel common poles and zeros . 
Kv=dcgain (K*sGe) 
% Display compensated Kv. 
ess=l/Kv 
% Display compensated 
% steady-state error for 
% unit ramp input. 
'T(s)' 
% Display label. 
T=feedback (K*Ge, 1) 
% Create and display PD compensated 
%T(s) . 
' Press any key to continue and obtain the PD compensated step' 
'response' 
% Display label. 
pause 
step(T) 
% Plot step response for PD 
% compensated system. 
title ([' PD Compensated System Step Response with '. . . 
num2str (pos) , '% Overshoot']) 
% Add title to step response 
% of PD compensated system. 
pause 

B.2 MATLAB Examples 
ch9p2 (Example 9.4) We can use MATLAB to design a lead compensator. The 
program allows us to input a desired percent overshoot via the keyboard. 
MATLAB then produces a root locus for the uncompensated system with an 
overlay of the percent overshoot line. We interactively select the intersection of 
the root locus and the desired percent overshoot line to set the gain. MATLAB 
outputs an estimate of the uncompensated system's performance specifications 
and a step response of the uncompensated system for us to determine the required 
settling time. Next we input the settling time and the lead compensator zero 
through the keyboard. At this point we take a different approach from that of the 
previous example. Rather than letting MATLAB calculate the lead compensator 
pole directly, MATLAB produces a root locus for every interactive guess of a lead 
compensator pole. Each root locus contains the desired damping ratio and natural 
frequency curves. When our guess is correct, the root locus, the damping ratio line, 
and the natural frequency curve will intersect. We then interactively select this 
point of intersection to input the gain. Finally, MATLAB produces an estimate of 
the lead-compensated system's performance specifications and a step response of 
the lead-compensated system. 
'(ch9p2) Example 9.4' 
% Display label. 
Clf 
% Clear graph on screen . 
'Uncompensated System' 
% Display label. 
numg=l; 
% Generate numerator of G {s) . 
deng=poly ([0 -4 -6]) ; 
% Generate denominator of G (s) . 
'G(s)' 
% Display label. 
G=tf (numg, deng) 
% Create and display G (s) . 
pos=input ('Type desired percent overshoot') ; 
% Input desired percent overshoot. 
z=-log(pos/100) / s q r t (piA2+[log (pos/100) ]A2) ; 
% Calculate damping r a t i o . 
rlocus (G) 
% Plot uncompensated root locus . 
sgrid(z, 0) 
% Overlay desired percent 
% overshoot l i n e . 
t i t l e (['Uncompensated Root Locus with ', num2str (pos), . . . 
'% Overshoot Line']) 
% Title uncompensated root locus . 
[K,p]=rlocf ind (G) ; 
% Generate gain, K, and closed-loop 
% poles, p, for point selected 
% interactively on the root locus. 
'Closed-loop poles=' 
% Display label. 
p 
% Display closed-loop poles . 
f=input ('Give pole number that i s operating point') ; 
% Choose uncompensated system 
% dominant pole . 
'Summary of estimated specifications for selected point on' 
'uncompensated root locus' 
% Display label. 
operatingpoint=p (f) 
% Display uncompensated dominant 
%pole. 
gain=K 
% Display uncompensated gain. 
estimated_settling_time=4/abs(real(p(f))) 
% Display uncompensated s e t t l i n g 
% time. 
estimated_peak_time=pi/abs(imag(p(f))) 
% Display uncompensated peak time. 
estimated_percent_overshoot=pos 
% Display uncompensated percent 
% overshoot. 

812 
Appendix B: MATLAB Tutorial 
numkv=conv ([1 0], numg) ; 
denkv=deng; 
sG=tf(numkv,denkv); 
sG=minreal(sG); 
Kv=dcgain(K*sG) 
ess=l/Kv 
'T(s)' 
T=feedback(K*G,l) 
step(T) 
estimated_damping_ratio=z 
% Display uncompensated damping 
% r a t i o . 
estimated_natural_frequency=sqrt(real(p(f)) A2+imag(p(f)) A2 
% Display uncompensated natural 
% frequency. 
% Set up numerator to evaluate Kv. 
% Set up denominator to evaluate Kv. 
% Create sG(s) . 
% Cancel common poles and zeros. 
% Display uncompensated Kv. 
% Display uncompensated 
% steady-state error for 
% unit ramp input. 
% Display label. 
% Create and display T(s) . 
% Plot step response of 
% uncompensated system. 
title ([['Uncompensated System Step Response with ', . . . 
num2str (pos), '% Overshoot']) 
% Add title to uncompensated step 
% response. 
' Press any key to go to lead compensation' 
% Display label. 
pause 
Ts=input ('Type Desired Settling Time') ; 
% Input desired settling time . 
b=input ('Type Lead Compensator Zero, (s+b) . b= ') ; 
% Input lead compensator zero . 
done=l; 
% Set loop flag. 
while done==l 
% Start loop for trying lead 
% compensator pole. 
a=input ('Enter a Test Lead Compensator Pole, (s+a) . a= ') ; 
% Enter test lead compensator pole. 
% Generate numerator of Gc (s) G(s) . 
% Generate denominator 
% of Gc(s)G(s) . 
% Create Ge (s)=Gc(s)G(s) . 
% Evaluate desired natural 
% frequency. 
% Clear graph on screen. 
% Plot compensated root locus with 
% test lead compensator pole . 
% Change lead-compensated 
% root locus axes. 
% Overlay grid on lead-compensated 
% root locus . 
title (['Lead-Compensated Root Locus with', num2str (pos) , . . . 
% Overshoot Line, Lead Pole at', . . . 
num2str (-a) , 'andRequired Wn']) 
% Add title to lead-compensated 
% root locus . 
['Are you done? (y=0,n=l)'); 
% Set loop flag. 
% End loop for trying compensator 
% pole. 
[K,p]=rlocfind (Ge) ; 
% Generate gain, K, and closed-loop 
% poles, p, for point selected 
numge=conv (numg,[l b]) ; 
denge=conv ([1 a], deng); 
Ge=tf(numge,denge); 
wn=4/(Ts*z); 
elf 
rlocus(Ge) 
axis ([-10,10,-10,10]) 
sgrid(z,wn) 
done=input 
end 

B.2 M A T L A B Examples 
813 
% interactively on the root locus . 
'Gc(s)' 
% Display label. 
Gc=tf ([lb],[la]) 
% Display lead compensator. 
'Gc(s)G(s)' 
% Display label. 
Ge 
% Display Gc (s)G (s) . 
'Closed-loop poles= ' 
% Display label. 
p 
% Display lead-compensated 
% system's 
% closed-loop poles. 
f=input ('Give pole number that is operating point') ; 
% Choose lead-compensated system 
% dominant pole. 
' Summary of estimated specifications for selected point on lead' 
' compensated root locus' 
% Display label. 
operatingpoint=p (f) 
% Display lead-compensated 
% dominant pole . 
gain=K 
% Display lead-compensated gain. 
estimated_settling_time=4/abs(real(p(f))) 
% Display lead-compensated 
% settling time. 
estimated_peak_time=pi/abs(imag(p(f))) 
% Display lead-compensated 
% peak time. 
estimated_percent_overshoot=pos % Display lead-compensated 
% percent overshoot. 
estimated_damping_ratio=z 
% Display lead-compensated 
% damping ratio. 
estimated_natural_frequency=sqrt(real(p(f))A2+imag(p(f))A2) 
% Display lead-compensated 
% natural frequency. 
s=tf ([1 0],1); 
% Create transfer Function, 's' . 
sGe=s*Ge; 
% Create sGe (s) to evaluate Kv. 
sGe=minreal (sGe); 
% Cancel common poles and zeros . 
Kv=dcgain (K*sGe) 
% Display lead-compensated Kv. 
ess=l/Kv 
% Display lead-compensated steady-
% state error for unit ramp input. 
'T(s)' 
% Display label. 
t=f eedback (K*Ge, 1) 
% Create and display lead-
% compensated T (s) . 
'Press any key to continue and obtain the lead-compensated step' 
'response' 
% Display label. 
pause 
step(T) 
% Plot step response for lead 
% compensated system. 
title (['Lead-Compensated System Step Response with ', . . . 
num2str (pos), '% Overshoot']) 
% Add title to step response 
% of lead-compensated system. 
pause 
Chapter 10: Frequency Response Techniques 
ch10p1 (Example 10.3) We can use MATLAB to make Bode plots using bode (G), 
where G/( s )=numg/deng and G is an LTI transfer-function object. Information about 
the plots obtained with bode (G) can be found by left-clicking the mouse on the curve. 
You can find the curve's label, as well as the coordinates of the point on which you 
clicked. Right-clicking away from a curve brings up a menu if the icons on the menu 

814 
Appendix B: MATLAB Tutorial 
bar are deselected. From this menu you can select (1) system responses to be displayed 
and (2) characteristics, such as peak response. When selected, a dot appears on the 
curve at the appropriate point. Let your mouse rest on the point to read the value of the 
characteristic. You may also select (3) which curves to view, (4) choice for grid on or 
off, (5) returning to full view after zooming, and (6) properties, such as labels, limits, 
units, style, and characteristics. We can obtain points on the plot using [mag, p h a s e , 
w]=bode(G), where magnitude, phase, and frequency are stored in mag, p h a s e , and 
w, respectively. Magnitude and phase are stored as 3-D arrays. We use mag ( : , : ) ' , 
phase ( : , : ) ' to convert the arrays to column vectors, where the apostrophe signifies 
matrix transpose. Let us look at Example 10.3 in the text. 
' (chlOpl) Example 1 0 . 3 ' 
e l f 
numg=[l 31; 
deng=conv ([1 2],[1 2 25]) ; 
'G(s)' 
G=tf (numg,deng) 
bode(G) 
grid on 
% Display label. 
% Clear graph on screen. 
% Define numerator of G (s) . 
% Define denominator of G (s) 
% Display label. 
% Create and display G (s) . 
% Make a Bode plot. 
% Turn on grid for Bode plot. 
title ('Open-Loop Frequency Response') 
% Adda title to the Bode plot. 
% Store points on the Bode plot. 
:) )',phase(:, : ) ' , w] 
% List points on Bode plot with 
% magnitude in dB. 
[mag, phase, w]=bode (G) 
points=[20*logl0 (mag 
pause 
ch10p2 (Example 10.5) We can use MATLAB to make Nyquist diagrams using 
n y q u i s t (G), where G{s) =numg/deng and G is an LTI transfer-function object. 
Information about the plots obtained with n y q u i s t (G) can be found by left-
clicking the mouse on the curve. You can find the curves label, as well as the 
coordinates of the point on which you clicked and the frequency. Right-clicking away 
from a curve brings up a menu if the icons on the menu bar are deselected. From this 
menu you can select (1) system responses to be displayed and (2) characteristics, 
such as peak response. When selected, a dot appears on the curve at the appropriate 
point. Let your mouse rest on the point to read the value of the characteristic. You 
may also select (3) whether or not to show negative frequencies, (4) choice for grid 
on or off, (5) choice for zooming to (-1,0), (6) returning to full view after zooming, 
and (7) properties, such as labels, limits, units, style, and characteristics. We can 
obtain points on the plot by using [re, im, w]=nyquist (G), where the real part, 
imaginary part, and frequency are stored in r e , im, and w, respectively, and r e and 
im are 3-D arrays. We can specify a range of w by using [ r e , im]=nyquist (G, w). 
We use re (:, : ) ' , and im (:, : ) ' to convert the arrays to column vectors. Let us 
look at Example 10.5 in the text. 
' (chl0p2) Example 10.5' 
elf 
numg=[l 2]; 
deng=[l 0 0]; 
'G(s)' 
G=tf(numg,deng) 
nyquist(G) 
% Display label. 
% Clear graph on screen. 
% Define numerator of G (s) 
% Define denominator of G 
% Display label. 
% Create and display G (s) 
% Make a Nyquist diagram. 

B.2 MATLAB Examples 
815 
grid on 
% Turn on grid for Nyquist diagram. 
title ('Open-Loop Frequency Response') 
% Add a title to the Nyquist 
% diagram. 
% Let 0 <w< 10 in steps of 0 . 5 . 
% Get Nyquist diagram points for a 
% range of w. 
% List specified range of points 
% in Nyquist diagram. 
w = 0 : 0 . 5 : 1 0 ; 
[re, im]=nyquist (G, w) ; 
p o i n t s = [ r e (:, : ) ' , i m ( : , : ) ' , w'] 
pause 
ch10p3 (Example 10.8) We can use MATLAB to find gain margin (Gm), phase 
margin (Pm), the gain margin frequency, where the phase plot goes through 
180 degrees (Wcg), and the phase-margin frequency, where the magnitude plot 
goes through zero dB (Wcp). To find these quantities we use [Gm, Pm, Wcg, Wcp]= 
margin (G), where G(.s)=numg/deng and G is an LTI transfer-function object. 
Let us look at Example 10.8 in the text. 
'(chl0p3) Example 1 0 . 8 ' 
e l f 
numg=6; 
deng=conv([12],[l 2 2]); 
' G ( s ) ' 
G=tf(numg,deng) 
nyquist(G) 
g r i d on 
% Display l a b e l . 
% Clear graph on s c r e e n . 
% Define numerator of G (s) . 
% Define denominator of G (s) . 
% Display l a b e l . 
% Create and d i s p l a y G (s) . 
% Make a Nyquist diagram. 
% Turn on g r i d for t h e Nyquist 
% diagram. 
t i t l e ('Open-Loop Frequency Response') 
% Add a t i t l e t o t h e Nyquist 
% diagram. 
[Gm, Pm, Wcg, Wcp]=margin (G) ; 
% Find margins and margin 
% f r e q u e n c i e s . 
'Gm(dB); Pm(deg.) ; 180 deg. f r e q . ( r / s ) ; 0 dB f r e q . 
( r / s ) ' 
% Display l a b e l . 
margins=(20*logl0 (Gm) , Pm, Wcg, Wcp] 
% Display margin d a t a . 
pause 
ch10p4 (Example 10.9) We can use MATLAB to determine the range of K for 
stability using frequency response methods. Let us look at Example 10.9 in the 
text. 
' (chl0p4) Example 10.9' 
numg=l; 
deng=poly ([-2 -4 -5]) ; 
'G(s)' 
G=tf(numg,deng) 
[Gm, Pm, Wcg, Wcp]=margin (G) ; 
K=Gm 
pause 
% Display l a b e l . 
% Define numerator of G (s) . 
% Define denominator of G (s] 
% Display l a b e l . 
% Create and d i s p l a y G (s) . 
% Find margins and margin 
% f r e q u e n c i e s . 
% Display K f o r s t a b i l i t y . 
ch10p5 (Example 10.11) We can use MATLAB to find the closed-loop frequency 
response. Let us look at Example 10.11 in the text. 

816 
Appendix B: MATLAB Tutorial 
' (chl0p5) Example 10.11* 
elf 
numg=50; 
deng=poly([0 -3 -6]) ; 
'G(s)' 
G=tf(numg,deng) 
'T(s)' 
T=feedback(G,l) 
bode(T) 
grid on 
% Display label. 
% Clear graph on screen. 
% Define numerator of G(s) . 
% Define denominator of G (s) . 
% Display label. 
% Create and display G (s) . 
% Display label. 
% Find and display closed-loop 
% transfer function. 
% Make a Bode plot. 
% Turn on the grid for the plots. 
title ('Closed-Loop Frequency Response' 
% Add a title to the Bode plot. 
pause 
nyquist(T) 
% Make a Nyquist diagram. 
title ('Closed-Loop Frequency Response') 
% Add a title to the Nyquist 
% diagram. 
pause 
ch*IOp6 We can use MATLAB to plot Nichols charts using n i c h o l s (G), where 
G (s) =numg/deng and G is an LTI transfer-function object. The Nichols grid can be 
added using the n g r i d command after the n i c h o l s (G) command. Information 
about the plots obtained with n i c h o l s (G) can be found by left-clicking the mouse 
on the curve. You can find the curve's label, as well as the coordinates of the point on 
which you clicked and the frequency. Right-clicking away from a curve brings up a 
menu if the icons on the menu bar are deselected. From this menu you can select (1) 
system responses to be displayed and (2) characteristics, such as peak response. 
When selected, a dot appears on the curve at the appropriate point. Let your mouse 
rest on the point to read the value of the characteristic. You may also select (3) 
choice for grid on or off, (4) returning to full view after zooming, and (5) properties, 
such as labels, limits, units, style, and characteristics. Let us make a Nichols chart of 
G(s) = l/[s(s + l){s + 2)). 
'(chl0p6)' 
elf 
numg=l; 
deng=poly([0 -1 -23j 
'GUI' 
G=tf(numg,deng) 
nichols(G) 
ngrid 
pause 
% Display label. 
% Clear graph on screen . 
% Define numerator of G (s) 
% Define denominator of G 
% Display label. 
% Create and display G (s) , 
% Make a Nichols p l o t . 
% Add Nichols grid. 
ch10p7 (Example 10.15) We can use MATLAB and frequency response methods 
to include time delay in the loop. Time delay is represented by [numd, dend]=pade 
(T, n ) , where T is the delay time in seconds and n is the order. Larger values of n 
give better approximations to the delay, Gd(s)=numd/dend. Since we are plotting 
multiple plots, we first collect the data for the Bode plots by using [mag, phase] 
=bode (G, w), where w is specified as a range of frequencies. We then use the generic 
plotting command. Also notice the commands used to label the axes and the plots on 
the Bode plot (see the MATLAB instruction manual for details). Let us look at 
Example 10.15 in the text. 

B.2 M ATLAB Examples 
817 
r(chl0p7) Example 10.15' 
% Display label. 
elf 
% Clear graph on screen. 
hold off 
% Turn graph hold of f. 
numg=l; 
% Define numerator of G (s) . 
deng=poly ([0 -1 -10]) ; 
% Define denominator of G (s) . 
'G(s)' 
% Display label. 
G=tf (numg, deng) 
% Create and display G (s) . 
w=0.01:0.1:10; 
% Let 0.01<w<10 in steps of 0.1. 
[magg,phaseg]=bode (G,w); 
% Collect Bode data for G (s) . 
[numd, dend]=pade (1,6); 
% Represent the delay. 
Gd=tf (numd, dend) ; 
% Create and display the delay, 
%Gd(s) . 
[magd,phased]=bode (Gd, w) ; 
% Collect Bode data for Gd (s) . 
Ge=Gd*G; 
% Form Gd (s) G (s) . 
[mage,phasee]=bode (Ge,w) ; 
% Collect Bode data for Gd (s) G (s) . 
subplot (2,1,1) 
% Subdivide plot area for plot 1. 
semilogx (w, 20 *logl0 (mage (:,:))) % Plot magnitude response. 
grid on 
% Turn on grid for magnitude plot. 
axis ([0.01,10, -80,20]); 
% Limit Bode plot axes. 
title ('Magnitude Response with Delay') 
% Add title to magnitude response. 
xlabel ('Freguency (rad/s)') 
% Label x-axis of magnitude 
% response. 
ylabel ('201og M') 
% Label y-axis of magnitude 
% response. 
subplot (2,1,2) 
% Subdivide plot area for plot 2. 
semilogx (w,phaseg (:, :) , w, phased (:, :) , w, phasee (:, :)) 
% Plot phase response for G (s) , 
% Gd(s) , andG (s) Gd(s) on one 
% graph . 
grid on 
% Turn on grid for phase plot. 
axis ([0.01,10,-900, 0]) ; 
% Limit Bode plot axes. 
title ('Phase Response with Delay') 
% Add title to phase response. 
xlabel ('Freguency (rad/s)') 
% Label x-axis of phase response. 
ylabel ('Phase (degrees)') 
% Label y-axis of phase response . 
text (1.5, -50, 'Time Delay') 
% Label time delay curve. 
text (4,-150, 'System') 
% Label system curve. 
text(2.7,-300,'Total') 
% Label total curve. 
pause 
ch10p8 (Example 10.18) We can use MATLAB and frequency response methods 
to determine experimentally a transfer function from frequency response data. By 
determining simple component transfer functions and then successively subtracting 
their frequency response, we can approximate the complete transfer function. Let us 
look at Example 10.18 in the text and use MATLAB for a portion of the problem. You 
can complete the program for practice. For this problem we generate the original 
frequency response plot via a transfer function. Normally, the data for the original 
frequency response plot would be tabular, and the program would begin at the step 
[M0, P0]=bode (G0,w) where the tabular data is generated. In other words, in a real 
application, the data would consist of column vectors M0, P0, and w'. 
' (chl0p8) Example 10.18' 
% Display label. 
elf 
% Clear graph on screen. 

818 
Appendix B: MATLAB Tutorial 
hold off 
% Turn graph hold of f. 
% Generate the experimental Bode plots for G0(s) =numgO/dengO, that 
% is, M0,P0. 
% Define numerator of GO (s) . 
% Partially define denominator of 
%G0(s) . 
% Complete the denominator of 
%G0(s) . 
% Create GO (s) . 
% Let Kw<1000 in steps of 0 . 5 . 
% Generate the tabular data. 
% Convert magnitude data to dB. 
% Generate a Bode plot. 
% Turn on grid for Bode plot. 
% Add title. 
% Clear graph. 
numg0=70*[120]; 
dengO=conv([l 7],[1 2 25]) ; 
dengO=conv (dengO,[l 70]) ; 
G0=tf(numgO,dengO); 
w=l:0.5:1000; 
[MO, P0]=bode(G0,w) ; 
[20*logl0(M0(:, :) ) ' , P 0 ( : , :)',w']; 
bode(GO,w) 
grid on 
t i t l e ('Experimental') 
pause 
elf 
% Estimate a component part of the transfer function as 
% Gl (s)=25/ (sA2+2*0.22*5s+5A2) and subtract it from the experimental 
% frequency response 
numgl=5A2; 
dengl=[l 2*0.22*5 5A2]; 
'First estimate' 
Gl=tf(numgl,dengl) 
[Ml,Pl]=bode(Gl,w) ; 
M2=20*loglO(MO(:, 
% Define numerator of Gl (s) . 
% Define denominator of Gl (s) . 
% Display label. 
% Create and display Gl (s) . 
% Generate Bode data for Gl (s) . 
:,:)); 
% Subtract Bode magnitude data of 
% Gl from original magnitude data. 
% Subtract Bode phase data of Gl 
% from original phase data. 
% Divide plot area in two for 
% magnitude plot. 
% Plot magnitude response after 
% subtracting. 
% Turn on grid for magnitude plot. 
% Add x-axis label. 
% Add y-axis label. 
% Divide plot area in two for phase 
%plot. 
% Plot the phase response after 
% subtracting. 
% Turn on grid for phase plot. 
2 + 2*0.22*5s+5A2)') 
% Add title. 
xlabel ('Frequency (rad/sec)') 
% Add x-axis label. 
ylabel ('Phase deg') 
% Add y-axis label. 
'This completes a portion of Example 10.18.' 
' The student should continue the program for practice.' 
pause 
Chapter 11: Design Via Frequency Response 
ch11 p1 (Example 11.1) We can design via gain adjustment on the Bode plot using 
MATLAB. You will input the desired percent overshoot from the keyboard. 
MATLAB will calculate the required phase margin and then search the Bode 
-20*loglO(Ml 
P2=P0(:, :)-Pl (:,:) ; 
subplot(2,1,1) 
semilogx(w(:,:),M2) 
grid on 
xlabel ('Frequency (rad/sec)') 
ylabel ('Gain dB') 
subplot(2,1,2) 
semilogx(w,P2) 
grid on 
t i t l e ('Experimental Minus 25/ (s' 

B.2 MATLAB Examples 
819 
plot for that phase margin. The magnitude at the phase-margin frequency is the 
reciprocal of the required gain. MATLAB will then plot a step response for that gain. 
Let us look at Example 11.1 in the text. 
' ( c h l l p l ) Example 11.1 • 
% Display l a b e l . 
e l f 
% Clear graph on s c r e e n . 
numg=[100]; 
% Define numerator of G (s) . 
deng=poly ([0 -36 -100]); 
% Define denominator of G (s) . 
G=tf (numg, deng) 
% Create and d i s p l a y G (s) . 
pos=input (fType%OS'); 
% Input d e s i r e d p e r c e n t o v e r s h o o t . 
z = ( - l o g ( p o s / 1 0 0 ) ) / ( s q r t ( p i A 2 + l o g ( p o s / 1 0 0 ) A 2 ) ) ; 
% C a l c u l a t e r e q u i r e d damping r a t i o . 
Pm=atan(2*z/ ( s q r t (-2*z A2+sqrt (l+4*z A4) ) ) )*(180/pi) ; 
% C a l c u l a t e r e q u i r e d phase margin. 
w=0. 0 1 : 0 . 01:1000,- 
% Set range of frequency from 0.01 
% t o 1000 in s t e p s of 0 . 0 1 . 
[M, P]=bode(G,w) ; 
% Get Bode d a t a . 
Ph=-180+Pm; 
% C a l c u l a t e r e q u i r e d phase a n g l e . 
for k = l : 1: l e n g t h (P) ; 
% Search Bode d a t a for r e q u i r e d 
% phase a n g l e . 
i f P (k) -Ph <=0; 
% If r e q u i r e d phase angle i s found, 
% f i n d t h e v a l u e of 
M=M(k) ; 
% magnitude a t t h e same frequency. 
'Required K' 
% Display l a b e l . 
K=l/M 
% C a l c u l a t e t h e r e q u i r e d g a i n . 
break 
% Stop t h e l o o p . 
end 
% End if. 
end 
% End f o r . 
T=feedback(K*G,l) ; 
%FindT(s) u s i n g t h e c a l c u l a t e d K. 
step(T) 
% Generate a s t e p r e s p o n s e . 
t i t l e (['Closed-Loop Step Response for K= ',num2str (K)]) 
% Add t i t l e t o s t e p r e s p o n s e . 
pause 
ch11 p2 (Example 11.2) Let us use MATLAB to design a lag compensator. The 
program solves Example 11.2 in the text and follows the same design technique 
demonstrated in that example. You will input the value of gain to meet the steady-
state error requirement followed by the desired percent overshoot. MATLAB 
then designs a lag compensator, evaluates Kv, and generates a closed-loop step 
response. 
' ( c h l l p 2 ) Example 1 1 . 2 ' 
% Display l a b e l . 
e l f 
% Clear graph on s c r e e n . 
K=input ('Type value of K t o meet s t e a d y - s t a t e e r r o r r e q u i r e m e n t ' ) ; 
% Input K. 
pos=input ('Type %OS ') ; 
% Input d e s i r e d p e r c e n t o v e r s h o o t . 
numg=[100*K]; 
% Define numerator of G (s) . 
deng=poly ([0 -36 -100]) ; 
% Define denominator of G (s) . 
' G (s)' 
% Display l a b e l . 
G=tf (numg, deng) 
% Create and d i s p l a y G (s) . 
z = ( - l o g ( p o s / 1 0 0 ) ) 
I(sqrt(piA2+log(pos/100)A2)); 
% C a l c u l a t e r e q u i r e d damping 
% r a t i o . 
Pm=atan (2*z/ ( s q r t (-2*z A2+sqrt (l+4*z A4) ) ) ) *(180/pi)+10; 

820 
Appendix B: MATLAB Tutorial 
w=0.01:0.01:100; 
[M, P]=bode(G,w) ; 
Ph=-180+Pm; 
for k = l : l : l e n g t h ( P ) ; 
i f P ( k ) - P h < = 0 ; 
M=M(k) / 
wf=w(k); 
break 
end 
end 
wh=wf/10; 
wl=(wh/M); 
numc=[l wh]; 
denc=[l wl]; 
Kc=wl/wh; 
'Lag compensator' 
Kc 
'Gc(s)' 
Gc=tf(Kc*numc,dene) 
'Gc(s)G(s)" 
GcG=Gc*G 
s=tf ([1 OLD? 
sGcG=s*GcG; 
sGcG=minreal(sGcG); 
Kv=dcgain(sGcG) 
T=feedback(GcG,1); 
step(T) 
title ('Closed-Loop Step Response 
pause 
% C a l c u l a t e r e g u i red phase margin. 
% Set range of f reguency from 0 . 01 
% t o 1000 in s t e p s of 0 . 0 1 . 
% Get Bode d a t a . 
% C a l c u l a t e r e g u i r e d p h a s e a n g l e . 
% Search Bode d a t a for r e g u i r e d 
% phase a n g l e . 
% If r e g u i r e d p h a s e angle i s found, 
% f i n d t h e v a l u e of 
% magnitude a t t h e same f reguency. 
% At t h i s f reguency t h e magnitude 
% p l o t must go through 0 dB. 
% Stop t h e l o o p . 
% End i f . 
% End f o r . 
% C a l c u l a t e t h e h i g h - f r e g u e n c y 
% b r e a k of t h e l a g compensator. 
% C a l c u l a t e t h e low-freguency 
% b r e a k of t h e l a g compensator; 
% found from l a g compensator, 
% Gc(s)=Kc(s+wh)I(s+wl) , high & low 
% freguency gain r e g u i r e m e n t s . 
l A t l o w w , g a i n = l . Thus, 
%Kc*wh/wl = l . At high w, gain=l/M. 
% Thus Kc=l/M. Hence 
% Kc=wl/wh=l/M, or wl=wh/M. 
% Generate numerator of l a g 
% compensator, Gc(s) . 
% Generate denominator of l a g 
% compensator, Gc(s) . 
% Generate K for Gc (s) . 
% Display l a b e l . 
% Display l a g compensator K. 
% Display l a b e l . 
% Create and d i s p l a y Gc (s) . 
% Display l a b e l . 
% Create and d i s p l a y Gc (s) G (s) . 
% C r e a t e t r a n s f e r f u n c t i o n / s ' . 
% C r e a t e sGc(s) G(s) . 
% Cancel common terms . 
% E v a l u a t e Kv. 
% Create T (s) . 
% Generate a c l o s e d - l o o p , l a g -
% compensated s t e p r e s p o n s e . 
for Lag-Compensated System') 
% Add t i t l e t o s t e p response . 
ch11p3 (Example 11.3) Let us use MATLAB to design a lead compensator. The 
program solves Example 11.3 in the text and follows the same design technique 
demonstrated in that example. You will enter desired percent overshoot, peak time, 
and Kv. MATLAB then designs the lead compensator using Bode plots, calculates 
Kv, and plots a closed-loop step response. 

B.2 MATLAB ExampI 
• (chllp3) Example 1 1 . 3 ' 
pos=input ('Type%OS ' ) ; 
Tp=input ('Type peak time ' ) ; 
Kv=input ('Type value of Kv ' 
numg=[100]; 
deng=poly ([0 -36 -100]) ; 
G=tf(numg,deng); 
s = t f ( [ 1 0 ] , l ) ; 
sG=s*G; 
sG=minreal (sG); 
K=dcgain(Kv/sG); 
' G ( s ) » 
G=zpk(K*G) 
% Display l a b e l . 
% I n p u t d e s i r e d p e r c e n t o v e r s h o o t . 
% Input d e s i r e d peak time . 
% Input Kv. 
% Define numerator of G(s) . 
% Define denominator of G (s) . 
% Create G (s) . 
% Create transfer function, 's' . 
% Create sG(s) . 
% Cancel common factors . 
% Solve for K. 
% Display label. 
% Put K into G (s) , convert to 
% factored form, and display. 
z=(-log(pos/100))/(sqrt(piA2+log(pos/100)"2)); 
% Calculate required damping 
% ratio. 
Pm=atan(2*z/(sqrt(-2*zA2+sqrt(1+4*zA4) ) ) )*(180/pi); 
% Calculate required phase margin. 
wn=pi/ (Tp*sqrt (l-zA2) ) ; 
wBW=wn*sqrt((l-2*zA2)+sqrt(4*zA4 
w=0.01:0.5:1000; 
[M,P]=bode(G,w) ; 
[Gm, Pm,Wcg, Wcp]=margin (G) ; 
Pmreq=atan (2*z/ (sqrt (-2*z' 
)1 
Pmreqc=Pmreq+10; 
Pc=Pmreqc-Pm; 
% Calculate required natural 
% frequency. 
4*zA2+2)); 
% Determine required bandwidth. 
% Set range of frequency from 0 . i 
% to 1000 in steps of 0 . 5 
% Get Bode data. 
% Find current phase margin. 
2+sqrt(l + 4*zA4)) ) )*(180/pi); 
% Calculate required phase margin . 
% Add a correction factor of 10 
% degrees . 
% Calculate phase contribution 
% required from lead compensator . 
% Design lead compensator 
beta=(l-sin(Pc*pi/180))/(1+sin(Pc*pi/180)); 
% Find compensator beta. 
magpc=l/sqrt(beta); 
for k=l: 1: length (M) ; 
if M(k)-(l/magpc) <=0, 
wmax=w (k); 
break 
end 
% Calculate lead compensator zero, 
zc=wmax*sqrt(beta); 
pc=zc/beta; 
Kc=l/beta; 
% Find compensator peak magnitude. 
% Find frequency at which 
% uncompensated system has a 
% magnitude of 1/magpc. 
% This frequency will be the new 
% phase margin frequency. 
% Look for peak magnitude. 
% This is the frequency at the 
% peakmagnitude. 
% Stop the loop, 
% Sad if. 
% End for. 
pole, and gain. 
% Calculate the lead compensators' 
% low break frequency. 
% Calculate the lead compensators' 
% high break frequency. 
% Calculate the lead compensators' 

822 
Appendix B: MATLAB Tutorial 
% gain. 
% Display label. 
% Create Gc(s) . 
% Convert Gc (s) to factored form 
% and display. 
% Display label. 
% Form Ge (s)=Gc(s)G(s). 
% Create sGe(s) . 
% Cancel common factors. 
% Calculate Kv. 
%FindT(s) . 
% Generate closed-loop, lead-
% compensated step response . 
t i t l e ('Lead-Compensated Step Response') 
% Add t i t l e to lead-compensated 
% step response. 
pause 
ch11p4 (Example 11.4) Let us use MATLAB to design a lag-lead compensator. 
The program solves Example 11.4 in the text and follows the same design technique 
demonstrated in that example. You will enter desired percent overshoot, peak time, 
and Ky. MATLAB then designs the lag-lead compensator using Bode plots, calcu-
lates Kv, and plots a closed-loop step response. 
' G c ( s ) ' 
Gc=tf (Kc*[l zc],[lpc]) 
Gc=zpk(Gc) 
rGe(s)=G(s)Gc(s)' 
Ge=G*Gc 
sGe=s*Ge; 
sGe=minreal(sGe); 
Kv=dcgain(sGe) 
T=feedback(Ge,1); 
step(T) 
' (chllp4) Example 11.4' 
pos=input ('Type %0S ') ; 
Tp=input ('Type peak time ') ; 
Kv=input ('Type value of Kv ') 
numg=[ 1] ; 
deng=poly ([0 -1 -4]) ; 
G=tf(numg,deng); 
s=tf ([1 01,1); 
sG=s*G; 
sG=minreal(sG); 
K=dcgain(Kv/sG); 
'G(s)' 
G=tf(K*numg,deng); 
G=zpk(G) 
z=(-log(pos/100))/(sqrt(pi 
Pmreq=atan(2*z/ (sqrt (-2*zA 
wn=pi/(Tp*sqrt(l-zA2)); 
wBW=wn*sqrt ( (l-2*zA2)+sqrt 
wpm=0.8*wBW; 
[M, P]=bode (G,wpm) ; 
Pmreqc=Pmreq-(180+P)+5; 
beta=(1-sin(Pmreqc*pi/180) 
% Display label. 
% Input desired percent overshoot. 
% Input desired peak time. 
; 
% Input desired Kv. 
% Define numerator of G (s) . 
% Define denominator of G (s) . 
% Create G (s) without K. 
% Create transfer function,'s' . 
% Create sG(s) . 
% Cancel common factors . 
% Solve for K. 
% Display label. 
% Put K into G(s) . 
% Convert G (s) to factored form and 
% display. 
"2 + log(pos/100) A2) ) ; 
% Calculate required damping ratio. 
2 + sqrt(l+4*zA4))) )*(180/pi); 
% Calculate required phase margin. 
% Calculate required natural 
% frequency. 
(4*zA4-4*zA2+2) ) ; 
% Determine required bandwidth. 
% Choose new phase-margin 
% frequency. 
% Get Bode data. 
% Find phase contribution required 
% from lead compensator 
% with additional 5 degrees . 
) I(1+sin(Pmreqc*pi/180)); 

B.2 MATLAB Examples 
823 
zclag=wpm/10; 
pclag=zclag*beta; 
Kclag=beta; 
'Lag compensator, Glag(s)r 
Glag=tf (Kclag*[lzclag],[lpclag]) ; 
Glag=zpk(Glag) 
zclead=wpm*sqrt(beta) ; 
pclead=zclead/beta; 
Kclead=l/beta; 
% Find beta. 
% Design lag compensator zero, pole, 
% and gain. 
% Calculate zero of lag compensator. 
% Calculate pole of lag compensator. 
% Calculate gain of lag compensator. 
% Display label. 
% Create lag compensator. 
% Convert Glag (s) to factored form 
% and display. 
% Design lead compensator zero, 
%pole, and gain. 
% Calculate zero of lead 
% compensator. 
% Calculate pole of lead 
% compensator. 
% Calculate gain of lead 
% compensator. 
% Display label. 
'Lag-Lead Compensated Ge (s) 
Ge=G*Glag*Glead 
sGe=s*Ge; 
sGe=minreal(sGe); 
Kv=dcgain(sGe) 
T=feedback(Ge, 1) ; 
step(T) 
'Lead compensator' 
Glead=tf (Kclead*[l zclead],[l pclead]) ; 
% Create lead compensator. 
Glead=zpk(Glead) 
% Convert Glead(s) to factored form 
% and display. 
% Display label. 
% Create compensated system, 
%Ge(s)=G(s) Glag(s) Glead(s) . 
% Create sGe (s) . 
% Cancel common factors . 
% Calculate Kv 
% FindT(s) . 
% Generate closed-loop, lag-lead-
% compensated step response. 
title ('Lag-Lead-Compensated Step Response') 
% Add title to lag-lead-
% compensated 
% step response. 
pause 
Chapter 12: Design via State Space 
ch12p1 (Example 12.1) We can use MATLAB to design controller gains using 
pole placement. You will enter the desired percent overshoot and settling time. We 
introduce the following commands: [num, den]=ord2 (wn, z), which produces a 
second-order system, given the natural frequency (wn) and the damping ratio (z). 
Then we use the denominator (den) to specify the dominant poles; and K=acker 
(A, B, -poles), which calculates controller gains from the system matrix (A), the 
input matrix (B), the desired poles (poles). Let us look at Example 12.1 in the 
text. 
' (chl2pl) Example 12.1' 
elf 
numg=20*[l 5]; 
deng=poly ([0 -1 -4]) ; 
'Uncompensated G (s)' 
G=tf(numg,deng) 
% Display label. 
% Clear graph on screen. 
% Define numerator of G (s) . 
% Define denominator of G (s! 
% Display label. 
% Create and display G (s) . 

Appendix B: M A T L A B Tutorial 
pos=input ('Type desired %0S ') ; 
% Input desired percent overshoot. 
Ts=input ('Type desired settling time ') ; 
% Input desired settling time. 
z=(-log(pos/100)) I(sqrt(pi"2+log(pos/100)*2) J; 
% Calculate required damping ratio. 
wn=4 / (z *Ts) ; 
% Calculate required natural 
% frequency. 
[num,den]=ord2 (wn, z) ; 
% Produce a second-order system 
% that meets the transient response 
% requirements . 
r=roots (den) ; 
% Use denominator to specify 
% dominant poles . 
poles=[r(l) r(2) -5.1]; 
% Specifypole placement for all 
% poles . 
characteristiceqdesired=poly(poles) 
% Form desired characteristic 
% polynomial for display. 
[Ac Be Cc Dc]=tf2ss (numg, deng) ; 
% Find controller canonical form 
% of state-space representation 
% of G(s) . 
P=[0 0 1;0 1 0/1 0 0]; 
% Transformation matrix for 
% controller canonical to phase-
% variable form. 
Ap=inv(P)*Ac*P; 
% Transform Ac to phase-variable 
% form. 
Bp=inv (P) *Bc/ 
% Transform Be to phase-variable 
% form. 
Cp=Cc*P; 
% Transform Cc to phase-variable 
% form. 
Dp=Dc; 
% Transform Dc to phase-variable 
% form. 
Kp=acker (Ap,Bp, poles) 
% Calculate controller gains in 
% phase-variable form. 
Apnew=Ap-Bp*Kp; 
% Form compensated A matrix. 
Bpnew=Bp/ 
% Form compensated B matrix. 
Cpnew=Cp/ 
% Form compensated C matrix. 
Dpnew=Dp/ 
% Form compensated D matrix. 
[numt, dent]=ss2tf (Apnew, Bpnew, Cpnew, Dpnew) / 
% Form T (s) numerator and 
% denominator. 
'T(s)' 
% Display label. 
T=tf (numt, dent) 
% Create and display T (s) . 
poles=roots (dent) 
% Display poles of T (s) . 
Tss=ss (Apnew, Bpnew, Cpnew, Dpnew) % Create and display Tss, an LTI 
% state-space object. 
step (Tss) 
% Produce compensated step 
% response. 
title ('Compensated Step Response') 
% Add title to compensated step 
% response. 
pause 
ch12p2 (Example 12.2) We can test controllability by using the MATLAB 
command Cm=c t rb (A, B) to find the controllability matrix given the system matrix 

B.2 MATLAB Examples 
825 
(A) and the input matrix (B). This command is followed by rank (Cm) to test the 
rank of the controllability matrix (Cm). Let us apply the commands to Example 12.2. 
' (chl2p2) Example 1 2 . 2 ' 
A=[~l 1 0;0 - 1 0;0 0-2] 
B=[0/1;1] 
Cm=ctrb(A,B) 
Rank=rank(Cm) 
pause 
% Display label. 
% Define compensated A matrix. 
% Define compensatedBmatrix. 
% Calculate controllability 
% matrix. 
% Find rank of controllability 
% matrix . 
ch12p3 (Example 12.4) 
If we design controller gains using MATLAB, we do 
not have to convert to phase-variable form. MATLAB will give us the controller 
gains for any state-space representation we input. Let us look at Example 12.4 in 
the text. 
• (chl2p3) Example 12.4' 
elf 
A=[-5 1 0;0 -2 1;0 0 -1]; 
B=[0;0;1]; 
C=[-l 1 0]; 
D=0; 
pos=input ('Type desired %OS ' ) ; 
% Display label. 
% Clear graph on screen . 
% Define system matrix A. 
% Define input matrix B. 
% Define output matrix C. 
% Define matrix D. 
% Input desired percent overshoot. 
Ts=input ('Type desired settling time ') 
% Input desired settling time. 
z=(-log(pos/100))/(sqrt(pi"2+log(pos/100)A2) ) ; 
% Calculate required damping ratio. 
wn=4/(z*Ts); 
[num, den]=ord2 (wn, z) ; 
r = r o o t s ( d e n ) ; 
p o l e s = [ r ( l ) r ( 2 ) -4]; 
K=acker(A,B,poles) 
Anew=A-B*K; 
Bnew=B; 
Cnew=C; 
Dnew=D; 
Tss=ss(Anew,Bnew,Cnew,Dnew); 
'T(s)' 
T=tf(Tss); 
T=minreal (T) 
poles=pole (T) 
step(Tss) 
title ('Compensated Step Response' 
pause 
% Calculate required natural 
% frequency. 
% Produce a second-order system 
% that meets the transient 
% requirements . 
% Use denominator to specify 
% dominant poles . 
% Specify pole placement for all 
% poles . 
% Calculate controller gains. 
% Form compensated A matrix. 
% Form compensated B matrix. 
% Form compensated C matrix. 
% Form compensated D matrix. 
% FormLTI state-space object. 
% Display label. 
% Create T (s) . 
% Cancel common terms and display 
%T(s) . 
% Display poles of T (s) . 
% Produce compensated step 
% response . 
% Add title to compensated step 
% response. 

826 
Appendix B: MATLAB Tutorial 
ch12p4 (Example 12.5) We can design observer gains by using the command 
l=acker (A' , C , p o l e s ) ' . Notice we use the transpose of the system matrix 
(A) and output matrix (C) along with the desired poles (poles). Let us look at 
Example 12.5 in the text. 
• (chl2p4) Example 12.5* 
numg=[l 4]; 
deng=poly([-l -2 -5]) ; 
' G ( s ) » 
G=tf(numg,deng) 
[Ac,Bc,Cc,Dc]=tf2ss (numg,deng) ; 
Ao=Ac' ; 
Bo=Cc*; 
Co=Bc'; 
Do=Dc; 
r=roots([l 2 5]) 
poles=10*[r' 10*real(r(l) )] 
lp=acker (Ao', Co',poles)' 
pause 
Display label. 
; Define numerator of G (s) . 
; Define denominator of G (s) . 
Display label. 
Create and display G (s) . 
; Transform G (s) to controller 
; canonical form in state space. 
TransformAc to observer 
canonical form. 
Transform Be to observer 
canonical form. 
Transform Cc to observer 
canonical form. 
Transform Dc to observer 
canonical form. 
Find the controller-compensated 
system poles . 
Make observer poles lOx bigger. 
Find the observer gains in 
observer canonical form. 
ch12p5 (Example 12.6) We can test observability using the MATLAB command 
Om=obsv(A,C) to find the observability matrix given the system matrix (A) and 
the output matrix (C). This command is followed by rank (Om) to test the rank of 
the observabihty matrix (Om). Let us apply the commands to Example 12.6. 
'(chl2p5) Example 12.6' 
A=[0 10,-0 0 1,-4 -3-2] 
C=[0 5 1] 
Om=obsv(A,C) 
Rank=rank(Om) 
pause 
% Display label. 
% Define compensated A matrix. 
% Define compensatedCmatrix. 
% Form observability matrix. 
% Find rank of observability 
% matrix. 
ch12p6 (Example 12.8) We can design observer gains using the command 
l=acker(A' , C , poles)' without transforming to observer canonical form. 
Let us look at Example 12.8 in the text. 
' (chl2p6) Example 12.8' 
A=[-5 1 0;0 -2 1;0 0 -1]; 
B=[0;0;1]; 
C=[l 0 0]; 
D=0; 
poles=roots ([1 120 2500 50000]; 
l=acker (A', C', poles)' 
pause 
% Display label. 
% Define system matrix A. 
% Define input matrix B. 
% Define output matrix C. 
% Define matrix D. 
% Specify pole placement for all 
% poles . 
% Calculate observer gains . 

B.2 MATLAB Examples 
827 
Chapter 13: Digital Control Systems 
ch13p1 (Example 13.4) We can convert Gi(s) in cascade with a zero-order hold 
(z.o.h.) to G(z) using MATLAB's G=c2d (Gl, T,' zoh' ) command, where Gl is an 
LTI continuous-system object and G is an LTI sampled-system object. T is the 
sampling interval and ' zoh' is a method of transformation that assumes G±{s) in 
cascade with a z.o.h. We simply put Gi{s) into the command (the z.o.h. is automati-
cally taken care of) and the command returns G(z). Let us apply the concept to 
Example 13.4. You will enter T through the keyboard. 
r ( c h l 3 p l ) Example 1 3 . 4 ' 
T=input ('Type T ') ; 
numgls=[l 2]; 
dengls=[l 1]; 
' G l ( s ) ' 
Gl=tf(numgls,dengls) 
'G(z)' 
G=c2d(Gl,T,*zoh') 
pause 
% Display l a b e l . 
% Input sampling i n t e r v a l . 
% Define numerator of Gl (s) . 
% Define denominator of Gl (s) . 
% D i s p l a y l a b e l . 
% Create Gl(s) and d i s p l a y . 
% Display l a b e l . 
% Convert Gl (s) i n cascade with 
% z . o . h . t o G (z) and d i s p l a y . 
ch13p2 We also can use MATLAB to convert G(s) to G(z) when G(s) is not in 
cascade with a z.o.h. The command H=c2d (F, T,' zoh') transforms F(s) in cascade 
with a z.o.h. to #(z), where i/(z) = ({z - I)/z)*z{F(s)/s}. If weletF(.y) = sG(s), the. 
command 
solves 
for 
H(z), 
where 
H(z) = ((z - l)/z)*z{G(s)}. 
Hence, 
z{G(s)} = (z/[z - l])*H(z). In summary, input F(s) = sG{s), and multiply the result 
of H=c2d (F, T,' zoh' ) by (z/[z - 1]). This process is equivalent to finding the z-
transform. We convert G(s) = (s + 3)/(52 + 6s +13) into G(z). You will enter T, the 
sampling interval, through the keyboard. T is used to form H{z). We use an 
unspecified sampling interval, T=[ ], to form z/(z - 1). 
' ( c h l 3 p 2 ) ' 
T=input ('Type T ') ; 
numgs=[l 3]; 
dengs=[l 6 13]; 
'G(s)' 
Gs=tf(numgs,dengs) 
Fs=Gs*tf ([1 0],1) 
Fs=minreal(Fs)/ 
Hz=c2d(Fs,T,'zoh') ; 
Gz=Hz*tf ([1 0],[1-1],[]) 
'G(z)' 
Gz=minreal(Gz) 
pause 
% Display label. 
% Input sampling interval. 
% Define numerator of G (s) . 
% Define denominator of G (s) . 
% Display label. 
% Create and display G (s) . 
% Create F(s)=sG(s) . 
% Cancel common poles and zeros . 
% Convert F(s) toH(z) assuming 
% z.o.h. 
%FormG(z)=H(z)*z/(z-l) . 
% Display label. 
% Cancel common poles and zeros . 
ch13p3 Creating Digital Transfer Functions Directly Vector Method, Polynomial 
Form 
A digital transfer function can be expressed as a numerator polynomial divided by a 
denominator polynomial, that is, F(z) = N{z)/D(z). The numerator, N(z), is repre-
sented by a vector, numf, that contains the coefficients of N(z). Similarly, the 
denominator, D(z), is represented by a vector, denf, that contains the coefficients 
of D(z). We form F(z) with the command, F=tf (numf, denf, T), where T is the 
sampling interval. F is called a linear time-invariant (LTI) object. This object, or 

Appendix B: MATLAB Tutorial 
transfer function, can be used as an entity in other operations, such as addition or 
multiplication. We demonstrate with F{z) = I50{z2 + 2Z + 7)/(z2 - 0.3z + 0.02). We 
use an unspecified sampling interval, T=[ ]. Notice after executing the t f command, 
MATLAB prints the transfer function. 
Vector Method, Factored Form 
We also can create digital LTI transfer functions if the numerator and denominator 
are expressed in factored form. We do this by using vectors containing the roots of 
the numerator and denominator. Thus, G(s) = K*N(z)/D(z) can be expressed as an 
LTI object using the command, G=zpk (numg,deng, K,T), where numg is a vector 
containing the roots of N(z), deng is a vector containing the roots of D(z), K is the 
gain, and T is the sampling interval. The expression zpk stands for zeros (roots of the 
numerator), poles (roots of the denominator), and gain, K. We demonstrate with 
G(z) = 20(z + 2)(z + 4)/{(z - 0.5)(z - 0.7)(z - 0.8)] and an unspecified sampling 
interval. Notice after executing the zpk command, MATLAB prints the transfer 
function. 
Rational Expression in z Method, Polynomial Form (Requires Control System 
Toolbox 8.4) 
This method allows you to type the transfer function as you normally would write it. 
The statement z=t f (' z' ) must precede the transfer function if you wish to create a 
digital LTI transfer function in polynomial form equivalent to using G=tf (numg, 
deng,T). 
Rational Expression in z Method, Factored Form (Requires Control System 
Toolbox 8.4) 
This method allows you to type the transfer function as you normally would write 
it. The statement z=zpk('z' ) must precede the transfer function if you wish to 
create a digital LTI transfer function in factored form equivalent to using G=zpk 
(numg, —deng,K, T). 
For both rational expression methods the transfer function can be typed in any 
form regardless of whether z=tf('z') or z=zpk('z') is used. The difference is in 
the created digital LTI transfer function. We use the same examples above to 
demonstrate the rational expression in z methods. 
'(chl3p3)' 
'Vector Method, Polynomial Form' 
numf=150*[l 2 7] 
denf=[l -0.3 0.02] 
•F(2)' 
F=tf (numf,denf,[]) 
clear 
'Vector Method, Factored Form' 
numg=[~2 -4] 
deng=[0.5 0.70.8] 
K=20 
% Display label. 
% Display label. 
% Store 150 (z~2+2z+7) innumf and 
% display. 
% Store (zA2-0.3z + 0.02) in denf and 
% display. 
% Display label. 
%FormF(z) and display. 
% Clear previous variables from 
% workspace. 
% Display label. 
% Store (s+2) (s+4) in numg and 
% display. 
% Store (s-0.5) (s-0.7) (s-0.8) in 
% deng and display. 
% Define K. 

B.2 M A T L A B Examples 
829 
'G(z)' 
% Display label. 
G=zpk (numg, deng,K,[ ]) 
%FormG(z) and display, 
clear 
% Clear previous variables from 
% workspace . 
'Rational Expression Method, Polynomial Form' 
% Display label. 
z=tf ('z') 
% Define z as an LTI object in 
% polynomial form. 
F=150*(zA2+2*z+7)/(zA2-0.3*z+0.02) 
% Form F (z) as an LTI transfer 
% function in polynomial form. 
G=20*(z+2)*(z+4)/[(z-0.5)*(z-0.7)*(z-0.8)] 
% Form G (z) as an LTI t r a n s f e r 
% f u n c t i o n i n polynomial form. 
c l e a r 
% Clear p r e v i o u s v a r i a b l e s from 
% workspace. 
' R a t i o n a l Expression Method, F a c t o r e d Form' 
% Display l a b e l . 
z=zpk (' z') 
% Define z as an LTI o b j e c t i n 
% f a c t o r e d form. 
F=150*(zA2+2*z+7) / (z A2-0.3*z+0.02) 
%FormF(z) as an LTI t r a n s f e r 
% f u n c t i o n i n f a c t o r e d form. 
G=20*(z+2)*(z + 4) /[ ( z - 0 . 5 ) * ( z - 0 . 7 ) * ( z - 0 . 8 ) ] 
% Form G(z) as an LTI t r a n s f e r 
% f u n c t i o n i n f a c t o r e d form. 
pause 
ch13p4 We also can use MATLAB to convert G(z) to G(s) when G(s) is not in 
cascade with a z.o.h. First, we create a sampled LTI transfer function, 
as discussed in ch!3p3. The command F=d2c (H, fzoh') transforms H(z) to 
F(s) in cascade with a z.o.h., where H(z) — {{z — l)/z)z{F{s)fs}. If we consider 
F(s) = sG(s), the command solves for sG(s) given H(z). Finally, sG(s)/s = G(s) 
yields the final result. In summary, form H(z), where H(z) = ((z - 
l)/z)G{z). 
Use F=d2c (H,'zohf) to find F(s) = sG{s). Divide the result by s and obtain 
G(s). We convert G{z) = z/(z — 0.3) into G(s). You will enter T, the sampling 
interval, through the keyboard. 
' ( c h l 3 p 4 ) ' 
T=input ('Type T ') ; 
numgz=[l 0]; 
dengz=[l - • 3]; 
' G ( z ) ' 
Gz=tf(numgz,dengz, T) 
Hz=Gz*tf ([1 -1],[1 0],T) / 
Hz=minreal(Hz); 
Fs=d2c(Hz,'zoh') ; 
Gs=Fs*tf (1,[1 0]) ; 
' G ( s ) ' 
Gs=minreal(Gs) 
pause 
% Display l a b e l . 
% Input sampling i n t e r v a l . 
% Define numerator of G (z) . 
% Define denominator of G (z) . 
% Display l a b e l . 
% C r e a t e and d i s p l a y G (z) . 
% Create H(z) = ( (z-1) /z)*G (z) . 
% Cancel common poles and zeros . 
% Convert fromH(z) to F(s)=sG(s) . 
% Create G(s)=F(s) (1/s) . 
% Display label. 
% Cancel common poles and zeros . 
ch13p5 (Example 13.6) We can use MATLAB to find the gain for stability. Let us 
look at Example 13.6 in the text. 

830 
Appendix B: MATLAB Tutorial 
' (chl3p5) Example 13.6» 
numgas=27; 
dengas=[l 27 0]; 
•Ga(s)' 
Ga=tf(numgas,dengas). 
'G(z)' 
Gz=c2d(Ga,0.1,'zoh') 
for K=l:0.1:50; 
Tz=feedback(K*Gz, 1) ; 
r=pole(Tz); 
rm=max(abs(r)); 
if rm>=l, 
break; 
end; 
end; 
K 
r 
rm 
pause 
Display label. 
Define numerator of Ga (s) . 
Define denominator of Ga (s) . 
Display label. 
Create and display Ga (s) . 
Display label. 
FindG(z) assuming Ga (s) in 
cascade with z .o.h. and display. 
Set range of K to look for 
stability. 
FindT (z) . 
Get poles for this value of K. 
Find pole with maximum absolute 
value for this value of K. 
See if pole is outside unit 
circle. 
Stop if pole is found outside 
unit circle. 
End if. 
End for. 
Display K value . 
Display closed-loop poles for 
this value of K. 
Display absolute value of pole . 
ch13p6 (Example 13.9) We can use MATLAB's command dcgain (Gz) to find 
steady-state errors. The command evaluates the dc gain of Gz, a digital LTI transfer 
function object, by evaluating Gz at z = 1. We use the dc gain to evaluate, Kp, Kv, 
and Ka. Let us look at Example 13.9 in the text. You will input T, the sampling 
interval, through the keyboard to test stability. 
' (chl3p6) Example 13 . 9' 
T=input ('Type T ') ; 
numgls=[10]; 
dengls=poly([0 -1]) ; 
'Gl(s)' 
Gls=tf(numgls,dengls) 
'G(z)' 
Gz=c2d(Gls,T,'zoh') 
'T(z)' 
Tz=feedback(Gz, 1) 
'Closed-Loop z-Plane Poles' 
r=pole(Tz) 
M=abs(r) 
pause 
Kp=dcgain(Gz) 
GzKv=Gz*(l/T)*tf ([1-1],[10], T) 
GzKv=mineral(GzKv,0.00001) 
Kv=dcgain(GzKv) 
% Display label. 
% Input sampling interval. 
% Define numerator of Gl (s) . 
% Define denominator of Gl (s) . 
% Display label. 
% Create and display Gl (s) . 
% Display label. 
% Convert Gl (s) and z . o. h . to G (z) 
% and display. 
% Display label. 
% Create and display T (z) . 
% Display label. 
% Check stability. 
% Display magnitude of roots . 
% Calculate Kp. 
%MultiplyG(z) by(l/T)*(z-l) . 
% Also, divide G (z) by z , which 
% makes transfer function proper 
% and yields same Kv. 
% Cancel common poles and zeros . 
% Calculate Kv. 

B.2 MATLAB Examples 
GzKa=Gz*(l/TA2)*tf ([1-2 1],[100],T) ; % Multiply G (z) by (1/TA2) (z-1) "2. 
% Also, divide G (z)by zA2 , which 
GzKa=minreal (GzKa, 0 . 00001 ." 
Ka=dcgain(GzKa) 
pause 
% makes the transfer function 
% proper and yields the same Ka. 
% Cancel common poles and zeros . 
% Calculate Ka. 
ch13p7 (Example 13.10) We now use the root locus to find the gain for stability. First, 
we create a digital LTI transfer-function object for G(z) = N(z)/D(z), 
with an un-
specified sampling interval. The LTI object is created using t f (numgz,dengz,[ ]), 
where numgz represents N(z), dengz represents D(z), and[ ] indicates an unspecified 
sampling interval. MATLAB produces a z-plane root locus along with the unit circle 
superimposed using the command, z g r i d ([],[]). We then interactively select the 
intersection of the root locus and the unit circle. MATLAB responds with the value of gain 
and the closed-loop poles. Let us look at Example 13.10. 
' (chl3p7) Example 13.10' 
elf 
numgz=[ll]; 
dengz=poly ([1 0.5]) ; 
'G(z)' 
Gz=tf (numgz, dengz,[ ]) 
rlocus(Gz) 
zgrid ([],[]) 
title (['z-Plane Root Locus']) 
[K,p]=rlocfind(Gz) 
pause 
% Display label. 
% Clear graph. 
% Define numerator of G (z) . 
% Define denominator of G (z) . 
% Display label. 
% Create and display G (z) . 
% Plot root locus . 
% Add unit circle to root locus . 
% Add title to root locus . 
% Allows input of K by selecting 
% point on graphic . 
ch13p8 (Example 13.11) We now use the root locus to find the gain to meet a 
transient response requirement. After MATLAB produces a z-plane root locus, along 
with damping ratio curves superimposed using the command zgrid, we interactively 
select the desired operating point at a damping ratio of 0.7, thus determining the gain. 
MATLAB responds with a gain value as well as the step response of the closed-loop 
sampled system using s t e p (Tz), where Tz is a digital LTI transfer-function object. 
Let us look at Example 13.11. 
'(chl3p8) Example 13.11' 
elf 
numgz=[l 1]; 
dengz=poly ([1 0.5]); 
' G ( z ) ' 
Gz=tf (numgz, dengz,[ ]) 
rlocus(Gz) 
axis ([0,1,-1,1]) 
zgrid 
t i t l e ([' z-Plane Root Locus']) 
[K,p]=rlocfind(Gz) 
'T(z)' 
Tz=feedback(K*Gz,1) 
Display label. 
Clear graph. 
Define numerator of G (z) . 
Define denominator of G (z) . 
Display label. 
Create and display G (z) . 
Plot root locus . 
Create close-up view . 
Add damping ratio curves to root 
locus . 
Add title to root locus . 
Allows input of K by selecting 
point on graphic . 
Display label. 
FindT(z) . 

832 
Appendix B: MATLAB Tutorial 
step (Tz) 
% Find step response of gain-
% compensated system. 
title (['Gain Compensated Step Response']) 
% Add title to step response of 
% gain-compensated system. 
pause 
ch13p9 (Example 13.12) 
Let us now use MATLAB to design a digital lead 
compensator. The s-plane design was performed in Example 9.6. Here we convert 
the design to the z-plane and run a digital simulation of the step response. 
Conversion of the s-plane lead compensator, Gc(s)=numgcs/dengcs, to the 
z-plane compensator, Gc(z)=numgcz/dengcz, is accomplished using the Gcz= 
c2d (numgcs, dengcs, T,' t u s t i n ' ) command to perform a Tustin transforma-
tion, where T=sampling interval, which for this example is 1/300. This exercise solves 
Example 13.12 using MATLAB. 
' (chl3p9) Example 13.12' 
% Display label. 
elf 
% Clear graph. 
T=0.01 
% Define sampling interval. 
numgcs=1977 *[16]; 
% Define numerator of Gc (s) . 
dengcs=[l 29 .1]; 
% Define denominator of Gc (s) . 
'Gc(s) in polynomial form' 
% Print label. 
Gcs=tf (numgcs, dengcs) 
% Create Gc (s) in polynomial form 
% and display. 
'Gc(s) in polynomial form' 
% Display label. 
Gcszpk=zpk (Gcs) 
% Create Gc(s) in factored form 
% and display. 
'Gc (z) in polynomial form via Tustin Transformation' 
% Display label. 
Gcz=c2d(Gcs,T, 'tustin') 
%FormGc(z) via Tustin 
% transformation. 
'Gc (z) in factored formvia Tustin Transformation' 
% Display label. 
Gczzpk=zpk (Gcz) 
%ShowGc(z) in factored form. 
numgps=l 
% Define numerator of Gp (s) . 
dengps=poly ([0 -6 -10]) ; 
% Define denominator of Gp (s) . 
'Gp(s) in polynomial form' 
% Display label. 
Gps=tf (numgps,dengps) 
% Create Gp(s) in polynomial form 
% and display. 
'Gp(s) in factored form' 
% Display label. 
Gpszpk=zpk (Gps) 
% Create Gp(s) in factored form 
% and display. 
'Gp(z) in polynomial form' 
% Display label. 
Gpz=c2d (Gps, T,' zoh') 
%FormGp(z) via zoh trans formation. 
'Gp(z) in factored form' 
% Display label. 
Gpzzpk=zpk (Gpz) 
%FormGp(z) in factored form. 
Gez=Gcz*Gpz 
% ForraGe (z) = Gc (z) Gp (z) . 
*Ge (z) =Gc(z) Gp (z) in factored form' % Display label. 
Gezzpk=zpk(Gez) 
%FormGe(z) in factored form 
% and display. 
'z-1' 
% Display label. 
zml=tf ([1-1],1,T) 
% Form z-1. 
zmlGez=mineral(zml*Gez,0.00001); % Cancel common factors . 

B.3 Command Summary 
833 
' (z-1) Ge (z) for finding steady-state error' 
% Display label. 
zmlGezzpk=zpk(zmlGez) 
%Form& display(z-1)Ge(z) in 
% factored form. 
Kv=(l/T)*dcgain(zmlGez) 
%FindKv. 
'T(z)=Ge(z) / (1+Ge(z) )' 
% Display label. 
Tz=feedback(Gez,1) 
% Find closed-loop 
% transfer function, T(z) 
step (Tz, 0:T:2) 
% Find step reponse. 
title ('Closed-Loop Digital Lead Compensated Step Response') 
% Add title to step response . 
| 
B.3 Command Summary 
abs(x) 
acker(A,B,poles) 
angle(x) 
atan(x) 
axis ([xmin,xmax, ymin, ymax]) 
bode(G,w) 
break 
c2d(G,T,'tustin') 
c2d(G,T,'zoh') 
canon (S, 'modal') 
clear 
elf 
conv ([a b c d],[e f gh]) 
ctrb(A,B) 
d2c(G/'zoh') 
degain(G) 
eig(A) 
end 
exp(a) 
feedback(G,H,sign) 
grid on 
hold off 
imag(P) 
input ('str') 
interpl (x,y,xl] 
inv(P) 
length(P) 
log(x) 
Obtain absolute value of x. 
Find gains for pole placement. 
Compute the angle of x in radians. 
Compute arctan(#). 
Define range on axes of a plot. 
Make a Bode plot of transfer function G(s) over a range of frequencies, co. 
Field co is optional. 
Exit loop. 
Convert G(s) to G(z) using the Tustin transformation. Tis the sampling interval. 
Convert G(s) in cascade with a zero-order hold to G(z). Tis the sampling interval. 
Convert an LTI state-space object, S, to parallel form. 
Clear variables from workspace. 
Clear current figure. 
Multiply (as2 + bs2 + cs + d) by (es3 + fs2 +gs + h). 
Find controllability matrix. 
Convert G(z) to G(s) in cascade with a zero-order hold. 
Find dc gain for G(s) (that is, s = 0), or G(z) (that is, z = 1). 
Find eigenvalues of matrix A. 
End the loop. 
Obtain ea. 
Find T(s) = G(s)/[1 ± G(s)H(s)}. Sign = - 1 or is optional for negative feedback 
systems. 
Sign = +1 for positive feedback systems. 
Put grid lines on a graph. 
Turn off graph hold; start new graph. 
Form a matrix of the imaginary parts of the components of matrix P. 
Permit variable values to be entered from the keyboard with prompt s t r . 
Perform table lookup by finding the value of y at the value of x = x\. 
Find the inverse of matrix P. 
Obtain dimension of vector P. 
Compute natural log of x. 

834 
Appendix B: MATLAB Tutorial 
loglO(x) 
margin <G) 
max(P) 
minreal(G,tol) 
ngrid 
nichols(G,w) 
nyquist(G,w) 
obsv(A.C) 
ord2(wn,z) 
pade(T,n) 
pause 
plot (tl,yl,t2,y2,t3,y3; 
pole(G) 
poly ([-a -b -c]) 
polyval(P,a) 
rank(A) 
real(P) 
residue(numf,denf) 
rlocfind(GH) 
rlocus(GH,K) 
roots(P) 
semilogx(w, PI) 
series(G1,G2) 
sgrid(z,wn) 
sin(x) 
sqrt(a) 
ss2tf (A,B,C,D,1) 
ss{A,B,C,D) 
ss (G) 
ssdata(S) 
step(Gl,G2, . . Gn,t) 
subplot(xyz) 
tan(x) 
text (a,b,'str') 
tf2ss(numg, deng) 
Compute log to the base 10 of x. 
Find gain and phase margins, and gain and phase margin frequencies of transfer 
function, G{s). 
Return [Gain margin, Phase margin, 180° frequency, 0 dB frequency]. 
Find the maximum component of P. 
Cancel common factors from transfer function G(s) within tolerance, tol. 
If' t o l ' field is blank, a default value is used. 
Superimpose grid over a Nichols plot. 
Make a Nichols plot of transfer function G(s) over a range of frequencies, co. 
Field co is optional. 
Make a Nyquist diagram of transfer function G(s) over a range of frequencies, co. 
Field co is optional. 
Find observability matrix. 
Create a second-order system, G(s) = l/[s2 + 2£cons + col). 
Obtain nth order Pade approximation for delay, T. 
Pause program until any key is pressed. 
Plot y\ versus t\,yl versus <2, and y3 versus r3 on the same graph. 
Find poles of LTI transfer function object, G(s). 
Form polynomial (s + a)(s + b)(s + c). 
Find polynomial P(s) evaluated at a, that is, P(a). 
Find rank of matrix A. 
Form a matrix of the real parts of the components of matrix P. 
Find residues of F(s) = numf/denf. 
Allow interactive selection of points on a root locus plot for loop gain, G(s)H(s). 
Return value for K and all closed-loop poles at that K. 
Plot root locus for loop gain, G(s)H(s), over a range of gain, K. The K field is optional. 
Find roots of polynomial, P. 
Make a semilog plot of P| versus log10(w). 
FmdGi{s)G2(s). 
Overlay z(f) and wn(o)„) grid lines on a root locus. 
Find sin(x). 
Compute \/a. 
Convert a state-space representation to a transfer function. Return [num, den]. 
Create an LTI state-space object, S. 
Convert an LTI transfer function object, G(s), to an LTI state-space object. 
Extract A, B, C, and D matrices from LTI state-space object, 5. 
Plot step responses of G\ (s) through Gn(s) on one graph over a range of time, t. 
Field t is optional as are fields Gi through Gn. 
Divide plotting area into an x by y grid with z as the window number for the current 
plot. 
Find tangent of x radians. 
Put s t r on graph at graph coordinates, x = a, y = b. 
Convert G(s) = numg/deng to state space in controller canonical form. 
Return [A, B,c,D]. 

Bibliography 
835 
tf2zp(numg,deng) 
tf(numg,deng,T) 
tf (G) 
tfdata (G,'v') 
title ('str') 
xlabel ('str') 
ylabel ('str') 
zgrid 
zgrid ([],[]) 
zp2tf ([-a-b]*,[~c-d]', K) 
zpk(numg,deng,K,T) 
zpk(G) 
Convert G(s) = numg/deng in polynomial form to factored form. 
Return [zeros, p o l e s , gains]. 
Create an LTI transfer function, G(s) = numg/deng, in polynomial form. 
Tis the sampling interval and should be used only if G is a sampled transfer function. 
Convert an LTI transfer function, G(s), to polynomial form. 
Extract numerator and denominator of an LTI transfer function, G(s), and convert 
values to a vector. Return [num, den]. 
Put title s t r on graph. 
Put label s t r on x axis of graph. 
Put label s t r o n y axis of graph. 
Superimpose z (f) and wn (co,,) grid curves on a 
z-plane root locus. 
Superimpose the unit circle on a z-plane root locus. 
Convert F(s) = K(s + a)(s + b)/(s + c)(s + d) to polynomial form. 
Return [num, den]. 
Create an LTI transfer function, G(s) = numg/deng, in factored form. 
Tis the sampling interval and should be used only if G is a sampled transfer function. 
Convert an LTI transfer function, G(s), to factored form. 
£ Bibliography ) 
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFFS) System Description. NRL 
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980. 
The MathWorks. Control System Toolbox™ 8 Getting Started Guide. The MathWorks, Natick, 
MA. 2000-2009. 
The MathWorks. Control System Toolbox™ 8 User's Guide. The MathWorks, Natick, MA. 
2001-2009. 
The MathWorks. MATLABJfc 7 Getting Started Guide. The MathWorks. Natick, MA. 1984-
2009. 
The MathWorks. MATLAB'® 7 Graphics. The MathWorks. Natick, MA. 1984-2009. 
The MathWorks. MATLAB® 
7 Mathematics. The MathWorks. Natick, MA. 1984-2009. 
The MathWorks. MATLAB® 7 Programming Fundamentals. The MathWorks. Natick, MA. 
1984-2009. 
The MathWorks. Simulink® 7 Getting Started Guide. The MathWorks. Natick, MA. 1990-
2009. 
The MathWorks. Simulink!® 7 User's Guide. The MathWorks. Natick, MA. 1990-2009. 

Appendix C: MATLAB's 
Simulink Tutorial 
Introduction 
Readers who are studying MATLAB may want to explore the functionality and 
convenience of MATLAB's Simulink. Before proceeding, the reader should have 
studied Appendix B, the MATLAB Tutorial, including Section B.l, which is 
applicable to this appendix. 
MATLAB's Simulink Version 7.4 and MATLAB Version 7.9(R2009b) are 
required in order to use Simulink. 
The models described in this appendix, which are available at www.wiley.com/ 
college/nise, were developed on a PC using MATLAB Version 7.9 and Simulink 
Version 7.4. The code will also run on workstations that support MATLAB. Consult 
the MATLAB Installation Guide for your platform for minimum system hardware 
requirements. 
Simulink is used to simulate systems. It uses a graphical user interface (GUI) 
for you to interact with blocks that represent subsystems. You can position the 
blocks, resize the blocks, label the blocks, specify block parameters, and interconnect 
blocks to form complete systems from which simulations can be run. 
Simulink has block libraries from which subsystems, sources (that is, function 
generators), and sinks (that is, scopes) can be copied. Subsystem blocks are available 
for representing linear, nonlinear, and discrete systems. LTI objects can be generated 
if the Control System Toolbox is installed. 
Help is available on the menu bar of the MATLAB Window. Under Help 
select Product Help. When the help screen is available, choose Simulink under the 
Contents tab. Help is also available for each block in the block library and is accessed 
either by right-clicking a block's icon in the Simulink Library Browser and selecting 
Help for . . . or by double-clicking the block's icon and then clicking the Help 
button. Finally, screen tips are available for some toolbar buttons. Let your mouse's 
pointer rest on the button for a few seconds to see the explanation. 
Using Simulink 
The following summarize the steps to take to use Simulink. Section C.3 will present 
four examples that demonstrate and clarify these steps. 

C.l 
Using Simulink 
837 
MATUSB 7.9:o (R2009&J 
Fjle Edit 
Debug Desktop 
v\/i 
rix 
•QC9U 
B # &\ 
: Shortcuts g ] How to Add gp Whaf s New 
I i* » 3imulin)c 
•3 
MATLAB 
• 
Toolboxes 
> 
Simulink 
• 
1¾¾ Shortcuts 
Web 
1 
Get Product Trials 
Check for Updates 
^ j Preferences... 
[§| Find Files... 
<0 Help 
V Demos 
Command History 
1 3 Current Folder 
Workspace 
IH1 File Exchange 
1¾- Editor 
0 | Path 
B 
View Start Button Configuration I 
FIGURE C.I 
MATLAB Window showing how to access Simulink. The Simulink Library 
Browser button is shown circled. 
1. Access Simulink The Simulink Library Browser, from where we begin Simulink, 
is accessed by typing simulink in the MATLAB Command Window or by clicking 
on the Simulink Library Browser button on the toolbar, shown circled in 
Figure C.l. 
In response, MATLAB displays the Simulink Library Browser shown in Figure 
C.2(a). We now create an untitled window, Figure C.2(b), by clicking on the 
Create a new model button (shown circled in Figure C.2(a)) on the toolbar of the 
Simulink Library Browser. You will build your system in this window. Existing 
models may be opened by clicking on the Open a model button on the Simulink 
Library Browser toolbar. This button is immediately to the right of the Create a 
new model button. Existing models may also be opened by selecting the Current 
Folder from the Command Window Start menu or the tab on the left side of the 
Command Window as shown in Figure C.l, selecting your file names, and then 
dragging them to the MATLAB Command Window. 
2. Select blocks Figure C.2(a) shows the Simulink Library Browser from which all 
blocks can be accessed. The left-hand side of the browser shows major libraries, 
such as Simulink, as well as underlying block libraries, such as Continuous. The 

Appendix C 
MATLAB's Simulink Tutorial 
Libraries 
[ 3 Simulink 
| 
r-Commonly Used Blocks 
}-• Continuous 
j-Discontinuities 
j 
^Discrete 
I 
;• Logic and Bit Operations 
i 
j - Lookup Tables 
|—Math Operations 
I-Model Verification 
!•- Model-Wide Utilities 
! -Ports & Subsystems 
j- Signal Attributes 
r-Signal Routing 
(-Sinks 
I-Sources 
i 
j-User-Defined Functions 
i 
(3 Additional Math & Disc... 
;-1¾ Control System Toolbox 
a g j Real-Time Workshop 
B - W Simscape 
IB-53 Simulink 3D Animation 
1-¾ Simulink Control Design 
i ) - S Simulink Extras 
M 
Stateflow 
Library: Simulink | JSearch Results: (none) 
Most Frequently Used Blocks 
Continuous 
Commonly 
Used Blocks 
IIS 
+ -
Discontinuities 
Logic and Bit 
Operations 
Math 
Operations 
Model-Wde 
Utilities 
t«»? 
Signal 
't-wnt 
Attributes 
* t \ 
Sinks 
User-Defined 
Functions 
Discrete 
Lookup Tables 
Model 
Verification 
Ports & 
Subsystems 
Signal Routing 
Sources 
Additional Math 
& Discrete 
Showing: Simulink 
(«) 
He 
Edit Hew Simulation Format Tools Q/jp 
D | 0 ? H 
% % e ! > <=*> -if i £5 <: 
|UJ0 
|Nom>al 
T J | g 
igj (?) 
M 
Start simulation 
Stop simulation 
Ready 
"'•Qde45 
(/') 
FIGURE C.2 
a. Simulink Library Browser window showing the Create a new model button 
encircled b. resulting untitled model window 
right-hand side of Figure C2(a) also shows the underlying block libraries. To 
reveal a block library's underlying blocks, select the block library on the left-hand 
side or double-click the block library on the right-hand side. As an example, the 
Continuous library blocks under the Simulink major library are shown exposed in 
Figure C3(a). Figures C3(b) and C.3(c) show some of the Sources and Sinks 
library blocks, respectively. 
Another approach to revealing the Simulink block library is to type open__ 
system ('simulink.mdl') in the MATLAB Command Window. The window shown 
in Figure C.4 is the result. Double-clicking any of the libraries in Figure C.4 

C.2 Using Simulink 
839 
File 
Edit 
View 
Help 
G * 
* 
Enter search term S«fK 
Libraries 
(it-g| Simulink 
i 
H Commonly Used Blocks 
[ Continuous 
j 
j - Discontinuities 
'•• Discrete 
j- Logic and Bit Operations 
!• Lookup Tables 
j - Math Operations 
j- Model Verification 
j -Model-Wide Utilities 
[Ports & Subsystems 
:- Signal Attributes 
i Signal Routing 
|- Sinks 
i- Sources 
j- User-Defined Functions 
ffi Additional Math & Disc 
S Control System Toolbox 
ffl-S Real-Time Workshop 
®~M Simscape 
ill S | Simulink 3D Animation 
I" JS Simulink Control Design 
IB-SI Simulink Extras 
Stateflow 
Showing: Simulink/Continuous 
Library Simulink/Continuous j Search Results: (none) 
Most Frequently Used Blocks 
Derivative 
PID Controller 
(2DOF) 
Transport Delay 
Zero-Pole 
> 
• 
x-=A**eu 
y"0x«u 
Integrator 
State-Space 
Variable Time 
Delay 
PID Controller 
Transfer Fen 
Vanable 
Transport Delay 
(a) 
mm 
File 
Edit 
View 
Help 
a ; 
-B ; Enter search term E* 
Libraries 
8-18 Simulink 
! 
i™ Commonly Used Blocks 
i 
{-• Continuous 
i 
f- Discontinuities 
i 
- Discrete 
I 
-Logic and Bit Operations 
I Lookup Tables 
j 
j - Math Operations 
j- Model Verification 
! 
[-Model-Wide Utilities 
i" Ports & Subsystems 
| 
j-Signal Attributes 
r Signal Routing 
i 
h Sinks 
j- User-Defined Functions 
B Additional Math & Disc... 
H Control System Toolbox 
Jjf Real-Time Workshop 
S j Simscape 
S) Simulink 3D Animation 
WK Simulink Control Design 
Bl Simulink Extras 
M Stateflow 
Library: Simuhnk/Sources 
Band-Limited 
Search Results, (none) : Most Frequently Used Blocks 
Showing: Simulink/Sources 
Constant 
'234 
L Digital Clock 
JUl 
From 
Workspace 
Pulse 
Generator 
Repeating 
Sequence 
[•«•*» Signal Builder 
Step 
0 
E 
Chirp Signal 
Counter Free-
Running 
Enumerated 
Constant 
Ground 
Ramp 
Repeating Seq-
uence Inlerpo.. 
Signal 
Generator 
Uniform Rando-
m Number 
Clock 
Iwififcisutt From File 
Counter 
Limited 
( 1 >ln1 
H 
Random 
Number 
hh 
Repeating 
Sequence Stair 
Sine Wave 
FIGURE C.3 Simulink block libraries: a. Continuous systems b. Sources (figure continues) 

840 
Appendix C 
MATL AB 's Simulink Tutorial 
FIGURE C.3 (Continued) 
c. Sinks 
reveals an individual window containing that library's blocks, equivalent to the 
right-hand side of the Simulink Library Browser as shown in the examples of 
Figure C.3. 
3. Assemble and label subsystems Drag required subsystems (blocks) to your 
model window from the browser, such as those shown in Figure C.3. Also, 
you may access the blocks by double-clicking the libraries shown in Figure 
C.4. You can position, resize, and rename the blocks. To position, drag with 
the mouse; to resize, click on the subsystem and drag the handles; to rename, click 
on the existing name, select the existing text, and type the new name. The text can 
also be repositioned to the top of the block by holding the mouse down and 
dragging the text. 
4. Interconnect subsystems and label signals Position the pointer on the small arrow 
on the side of a subsystem, press the mouse button, and drag the resulting cross-
hair pointer to the small arrow of the next subsystem. A line will be drawn 
between the two subsystems. Blocks may also be interconnected by single-
clicking the first block followed by single-clicking the second block while holding 
down the control key. You can move line segments by positioning the pointer on 
the line, pressing the mouse button, and dragging the resulting four-arrow pointer. 
Branches to line segments can be drawn by positioning the pointer where you 
want to create a line segment, holding down the mouse's right button, and 
dragging the resulting cross hairs. A new line segment will form. Signals can 
be labeled by double-clicking the line and typing into the resulting box. Finally, 
labels can be placed anywhere by double-clicking and typing into the resulting box. 

C.3 Examples 
841 
I . Library: simulink 
file Edit View Format Help 
Sources 
Math 
Operations 
Bbcksetsft 
Toolboxes 
fe 3¾ *g 
*Ewn 
Sinks 
Continuous 
Discrete 
Discontinuities 
Signal 
Routing 
Signal 
Attributes 
II " 
y * * * 
Misc 
Logicand Bit 
Operations 
Lookup 
Tables 
User-Defined 
Functions 
Model 
Verification 
Ports & 
Subsystems 
Model-Wide 
Utilities 
J 
D t f f M 
Simulink Block Library 7.4 
Copyright (<£ 1990-2009 
The Math Works, Inc. 
Commonly 
Used Blocks 
Memorial Man 
& Discrete 
FIGURE C.4 Simulink Block 
Library window 
5. Choose parameters for the subsystems Double-click a subsystem in your model 
window and type in the desired parameters. Some explanations are provided in the 
Block Parameters window. Press the Help button in the Block Parameters window 
for more details. The parameters can be read later without opening the block. Let 
your mouse's pointer rest on the block for a few seconds, and a screen tip will appear, 
identifying the block and listing its parameters. The information displayed in the 
screen tip first must be selected in the Block Data Tips Options in the model 
window's View menu. Explore other options by right-clicking on a block. 
6. Choose parameters for the simulation Select Configuration parameters . . . un-
der the Simulation menu in your model window to set additional parameters, such 
as simulation time. Press the Help button in the Configuration parameters 
window for more details. 
7. Start the simulation Make your model window the active window. Double-click 
the Scope block (typically, the scope is used to view the simulation results) to 
display the Scope window. Select Start under the Simulation menu in your model 
window or click on the Start simulation icon on the toolbar of your model window 
as shown in Figure C2(b). Clicking the Stop simulation icon will stop the 
simulation before completion. 
8. Interact with the plot In the Scope window, using the toolbar buttons, you can 
zoom in and out, change axes ranges, save axis settings, and print the plot. Right-
clicking on the Scope window brings up other choices. 
9. Save your model Saving your model, by choosing Save under the File menu, 
creates a file with an .mdl extension, which is required. 
^C.3 
Examples 
This section will present four examples of the use of Simulink to simulate linear, 
nonlinear, and digital systems. Examples will show the Simulink block diagrams as 
well as explain the settings of parameters for the blocks. Finally, the results of the 
simulations will be shown. 

842 
Appendix C 
MATLAB's Simulink Tutorial 
Example C.I 
Simulation of Linear Systems 
Our first example develops a simulation of three linear systems to compare their 
step responses. In particular, we solve Example 4.8 and reproduce the responses 
shown in Figure 4.24. Figure C.5 shows a Simulink block diagram formed by 
following Steps 1 through 5 in Section C.2 as follows: 
Ffe 
Edit 
View 
D | G ? H 
X ^ 
<p =£ t I O* ,G I • 
« 3 
Normal 
mi 
1 volts 
Gain 
245.42 
s+10 
Transfer Fen T2a 
73.626 
s+3 
1 
52+45+24.542 
Transfer Fen T1 
1 
s2+4s+24.542 
Transfer Fen T2t 
—• 
1 
52+45+24.542 
CI 
C2 
C3 
t i • 
Mux 
1 1 
Scope 
Transfer Fen T3a 
Transfer Fen T3b 
Example C.1: Simulation to reproduce Figure 4.24 in Example 4.8 
Ready 
1100% 
bde45 
/A 
FIGURE C.5 Simulink block diagram for Example C.l 
Access Simulink; select, assemble, and label subsystems The source is a 
1-volt step input, obtained by dragging the Step block from the Simulink Library 
Browser under Sources to your model window. 
The first system, Tl, consists of two blocks, Gain and Transfer Fen. Gain is 
obtained by dragging the Gain block from the Simulink Library Browser under 
Math Operations to your model window. Transfer function, Tl, is obtained by 
dragging the Transfer Fen block from the Simulink Library Browser under 
Continuous to your model window. Systems T2 and T3 are created similarly. 
The three output signals, CI, C2, and C3, are multiplexed for display into the 
single input of a scope. The Mux (multiplexer) is obtained by dragging the Mux 
block from the Simulink Library Browser under Signal Routing to your model 
window. 
The sink is a scope, obtained by dragging the Scope block from the Simulink 
Library Browser under Sinks to your model window. 

C.3 Examples 
843 
Alternatively, all blocks can be dragged from the Library: simulink window 
shown in Figure C.4. The Mux can be found under Signal Routing in the Library: 
simulink window. 
The labels for the blocks can be changed to those shown in Figure C.5 by 
following Step 3 in Section C.2. 
Interconnect subsystems and label signals Follow Step 4 to interconnect the 
subsystems and label the signals. You must set the mux's parameters before the 
wiring can be completed. See the next paragraph. 
Choose parameters for the subsystems Let us now set the parameters of each 
block using Step 5. The Block Parameters window for each block is accessed by 
double-clicking the block on your model window. Figure C.6 shows the Block 
Parameters windows for the 1 volt step input, gain, transfer function 1, and mux. Set 
the parameters to the required values as shown. 
MM&\Mmim^m Sep u 3®02 
>i< 
Step 
Output a step. 
Parameters 
Step time: 
0 
Initial value: 
Final value: 
Sample time: 
0 
0 
Interpret vector parameters as 1-0 
0 
Enable zero-crossing detection 
nn 
Cancel 
Help 
(a) 
FIGURE C.6 Block parameters windows for a. 1 volt step source; (figure continues) 

844 
Appendix C 
M ATLAB's Simulink Tutorial 
Function Block Parameters: Gain 
Sement-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K). 
Main 
Attributes 
Parameter Attributes 
24.542 
Multiplication: Sement-wise(K.*u) 
Sample time (-1 for inherited): 
-1 
Apply 
(*) 
Function Block Parameters: Transfer Fc'ft'TT 
Transfer Fen 
The numerator coefficient can be a vector or matrix expression. The denominator 
coefficient must be a vector. The output width equals the number of rows in the 
numerator coefficient You should specify the coefficients in descending order of powers 
ofs. 
Parameters 
Numerator coefficients: 
Denominator coeffitients: 
114 24.542] 
Absolute tolerance: 
auto 
State Name: (e.g.,'position') 
(c) 
FIGURE C.6 b. gain; c. transfer function 1; (figure continues) 

C.3 
Examples 
845 
: Q Function Block Parameters: Mux 
Multiplex scalar or vector 
Parameters 
o 
ion: bar 
Apply 
id) 
FIGURE C.6 [Continued) d. mux 
The scope requires further explanation. Double-clicking the Scope block in your 
model window accesses the scope's display, Figure CJ(a). 
Clicking the Parameters icon on the Scope window toolbar, shown in Figure CI (a), 
accesses the 'Scope' parameters window as shown in Figure C.7(6). The 'Scope' 
parameters window contains two tabs, General and Data history, as shown in 
Figure C.7(b) and (c), respectively. 
"SiiiSS*-/ jlSlftUi-dSJiat© 
J General 
Axes 
Data history 
Number of axes: 
Time range: 
Tick labels: 
Sampling 
Tip: try right clicking on axes 
1 
auto 
bottom axis only 
| | 
Decimation 
,v 1 
OK 
Cancel 
3] floating scope 
Help 
Apply 
(b) 
FIGURE C.7 Windows for the scope: a. Scope; b. 'Scope' parameters, General tab; (figure continues) 

Appendix C 
MATLAB's Simulink Tutorial 
Ht3^ :^MJs^ig 
Genera! 
Data history 
Tip: try right clicking on axes 
0 Limit data points to last: 
Q Save data to workspace 
Variable name: 
Format: 
5000 
ScopeData 
Array 
OK 
Cancel 
Help 
Apply 
Y-min: 
Y~max: 
Title ('%<SignalLabel>' replaced by signal name): 
OK 
Cancel 
Apply 
(d) 
(c) 
FIGURE C.7 (Continued) c. 'Scope' parameters, Data history tab: d. 'Scope' properties: axis 1 
Finally, right-clicking in the plotting area in the Scope window and selecting 
Axis properties . . . reveals the 'Scope' properties: axis 1 window, Figure CJ(d). 
We now can set the display parameters, such as amplitude range. 
Choose parameters for the simulation Follow Step 6 to set simulation parame-
ters. Figure C.8 shows the resulting Configuration Parameters window. Among 
other parameters, the simulation start and stop times can be set. 
FIGURE C.8 
Configuration 
Parameters window for 
Solver tab 
Select 
Data Import^xport 
OpdmCation 
0 Diagnostics 
j-SampleTme 
j - Data Validity 
|- Type Conversion 
r ConnectivitY 
-Compatibility 
'—Model 
Referencing 
— Saving 
•--Hardware Implementation 
-Model Referencing 
3-Simulabon Target 
h Symbols 
-Custom Code 
Simulation Ome 
Stoptime: 3 
Solve options 
TVpei 
Max step sire: |«Jto_ 
Mnstepsne: 
jauto 
T v j Solver: 
iOde-15 (Dormand-Prince) 
j Relative tolerance: |"le-3 
Absolute tolerance: 
le-6 
$ 
Into! step she: ;auto 
Shape preservation: (DsaWe all 
:s 
Nunber of consecutive mm steps: 
Tasking and sample erne options 
Tadong mode foe periockcsample times: 
• 
AutomabcaBy hande rate transtbon for data transfer 
• 
Hgher prtontv value indicates higher task prionty 
Zero<rossng options 
Zero-crossing control: ,Use local settings 
Time 
tolerance: 
[l0"12fl*eps 
Number of consecutive rem crossngs: 
fvl Algorithm: 
.Honadaptrve 
;a 
Signal threshold: auto 
] [~SreT 

C.3 Examples 
Start the simulation Now run the simulation by following Step 7. Figure C.9 shows 
the result in the Scope window. Plots are color coded in the order in which they 
appear at the mux input as follows: yellow, magenta, cyan, red, green, and dark 
blue. If the mux has more inputs, the colors recycle. 
Interact with the plot The toolbar of the Scope window shown in Figure C.9 has 
several buttons that can be used to interact with the plot. Let us summarize the 
function and operation of each, starting with the left-most button: 
Button 1 executes a plot print. 
Button 2 has already been explained and is used to set scope parameters. 
Button 3 permits zooming into the plot in both the x and v directions. Press the 
button and drag a rectangle over the portion of the curve you want to 
expand. 
Button 4 allows zooming in the x direction only. Drag a horizontal line over the 
plot covering the extent of x you want to expand. 
Button 5 allows zooming in the v direction only. Drag a vertical line over the plot 
covering the range of y you want to expand. 
Button 6 autoscales axis for use after zooming. 
Button 7 saves current axis settings. 
Button 8 restores saved axis settings. 
FIGURE C.9 Scope window after Example C. 1 simulation stops 

Appendix C 
MATLAB's Simulink Tutorial 
Button 9 toggles floating scope. It must be turned off to use zooming. See 
documentation for use of floating scopes. 
Button 10 toggles lock for current axis selection. 
Button 11 allows selection of signals to view when using floating scope. 
Effect of Amplifier Saturation on Motor's Load Angular Velocity 
This example, which generated Figure 4.29 in the text, shows the use of Simulink to 
simulate the effect of saturation nonlinearity on an open-loop system. Figure CIO 
shows a Simulink block diagram formed by following Steps 1 through 5 in Section 
C.2 above. 
Saturation nonlinearity is an additional block that we have not used before. 
Saturation is obtained by dragging to your model window the Saturation block in 
the Simulink Library Browser window under Discontinuities as shown in Figure 
C.ll(fl) and setting its parameters to those shown in Figure Cll(b). 
Now run the simulation by making your model window active and selecting 
Start under the Simulation menu of your model window or clicking on the Start 
simulation button on your model window toolbar. Figure C.12 shows the result in 
the Scope window. 
FIGURE C.10 Simulink block diagram for Example C.2 

C.3 Examples 
849 
File Edit View 
0 G* * : Enter search term 
Lbraries 
> S j Simulink 
-Commonly Used Blocks 
-Continuous 
j - Discrete 
r Logic and Bit Operations 
r Lookup Tables 
:- Math Operations 
r Model Verification 
'-Model-Wide Utilities 
j - Ports & Subsystems 
[-•Signal Attributes 
;-Signal Routing 
| Sinks 
j - Sources 
r User-Defined Functions 
IB Additional Math & Disc. 
H Control System Toolbox 
H Real-Time Workshop 
H 
Simscape 
£ j Simulink 3D Animation 
H Simulink Control Design 
H Simulink Extras 
H 
Stateflow 
Hn 
Library: Simulink/Discontinuities i Search Results: (none) j 
Most 
m 
» 1 / 
X I 
Backlash 
Dead Zone 
Dynamic 
Coulomb & Vi-
scous Friction 
Hit Crossing 
) y t- i 
Saturation 
Rate Limiter 
Dynamic 
Saturation 
Dynamic 
'7 I. 
H 
>J2L 
Dead Zone 
Quantizer 
Relay 
Wrap To Zero 
(a) 
L J Function Block Parameters: Saturation ±5 volts 
Main 
Signal Attributes 
Upper limit: 
Lower limi 
-5 
0 Treat as gain when linearizing 
0 Enable zero-crossing detection 
Sample time (-1 for riherited); 
-1 
(b) 
FIGURE C.11 a. Simulink library for nonlinearities; b. parameter settings for saturation 

850 
Appendix C 
MATLAB's Simulink Tutorial 
FIGURE C.12 Scope window after simulation of Example C.2 stops. The lower curve is the 
output with saturation 
Simulating Feedback Systems 
Simulink can be used for the simulation of feedback systems. Figure C. 13(a) is an 
example of a feedback system with saturation. 
In this example, we have added a feedback path (see Step 4 in Section C.2) 
and a summing junction, which is obtained by dragging the Sum block from the 
Simulink Library Browser, contained in the Math Operations library, to your 
model window. The Function Block Parameters: Sum window, Figure C.13(£>), 
shows the parameter settings for the summer. You can set the shape as well as set 
the plus and minus inputs. In the list of signs, the "|"symbol signifies a space. We 
place it at the beginning to start the signs at "nine o'clock," conforming to our 
standard symbol, rather than at "12 o'clock." The result of the simulation is shown 
in Figure C.14. 

C.3 Examples 
851 
R apcex3 
File Edit View Simulation Format Tools Help 
- n x 
D 
43 =£ ^ 
Q l • 
10 
Normal 
"HI 
Step 
10 volts 
- • 1 0 0 
Gain 
s+1.71 
Saturation 
±5 volts 
Motof, load, 
Sgeais 
Example C.3: Simulation of a feedbadt system with a nonlinearity 
(a) 
Function Block Parameters: Sum 
Add or subtract inputs, Specify one 1 
a) string containing + or - for each input port, | for spacer between ports (e.g. + + H 
b} scalar, >= 1, specifies the number of input ports to be summed, 
When there is only one input port, add or subtract elements over i 
specified dimension 
or one 
Main 
Signal Attributes 
Icon shape: 
List of signs: 
round 
v> 
Sample time (-1 for inherited): 
-1 
(b) 
FIGURE C.13 a. Simulation block diagram for a feedback system with saturation; b. block 
parameter window for the summer 

852 
Appendix C 
MATLAB's Simulink Tutorial 
FIGURE C.14 Simulation output for Example C.3 
This example demonstrates two methods of generating digital systems via Simulink 
for the purpose of simulation, as shown in Figure C.15. 
The first approach uses a linear transfer function cascaded with a Zero-Order 
Hold block obtained from the Simulink Library Browser under the Discrete block 
library, shown on the right-hand side of Figure C.16. The second method uses a 
discrete transfer function also obtained from the Simulink Library Browser under 
the Discrete block library. The remainder of the block diagram was obtained by 
methods previously described. 

C.3 Examples 
853 
f 
\T., apcex4_6 
1 Fife Edit View 
Simulation Farmat look 
Help 
|D|G*H#|&%©|<=»={>iM:QC:|^ • f" 
I [ Normal 
"" "> 
. q x 
H 
IReady 
Sum1 
Step 
wf ^ V 
i 
Su 
i 
m2 
.n V 
L 
Z€ 
J
1-
aro-Ord 
Hold 
er 
s+2 
s+1 
Transfer Fen 
2-0.214 
z-0.607 
Discrete 
Transfer Fen 
» 
Scope 
Example C.4: Simulation of digital systems 
100% 
bde4 
/A 
FIGURE C.15 Simulink block diagram for simulating digital systems two ways 
? aimtehjda-^IBa^T 
— 
1 
JLQ 
File 
Edit 
View 
Help 
0 
Q& -e 
:[Enter search term 
M f | 
[ j f 
Libraries 
L| H Simulink 
I- Commonly Used Blocks 
I Continuous 
j - Discontinuities 
- Discrete 
Logic and Bit Operations 
-Lookup Tables 
- Math Operations 
Model Verification 
- Model-Wide Utilities 
- Ports & Subsystems 
Signal Artnbutes 
^ Signal Routing 
-Sinks 
Sources 
j - User-Defined Functions 
] i Additional Math & Disc... 
j - f i j Control System Toolbox 
f S I Real-Time Workshop 
& M Simscape 
E ] 5 j Simulink 3D Animation 
Simulink Control Design 
Simulink Extras 
Staleflow 
Library: Simulink/Discrete 
Search Results: (none) II Most Frequently Used Blocks j 
Differ ence 
ran 
1 ±23 I 
0 
0 05z 
z-0 95 
JK. 
Discrete FIR 
Filter 
Discrete PID 
Controller 
Discrete State-
Space 
Discrete Zero-
Pole 
First-Order 
Hold 
Memory 
Transfer Fen 
First Order 
Transfer Fen 
Real Zero 
Zero-Order 
Hold 
ito.sr1 
s 
JoclayJ. 
1-0.75 
z-0.95 
Discrete 
Derivative 
Discrete Filter 
Discrete PtD C-
ontroller (2D... 
> 
1 
Discrete 
Transfer Fen 
Discrete-Time 
Integrator 
Integer Delay 
Tapped Delay 
Transfer Fen 
Lead or Lag 
Unit Delay 
Showing: Simulink/Discrete 
FIGURE C.16 Simulink library of discrete blocks 

854 
Appendix C 
MATLAB's Simulink Tutorial 
Zero-Order Hold 
Zero-order hold. 
Parameters 
Sample time (-1 for inherited]: 
0.5 
OK 
Lanee I 
Help 
Apply 
(a) 
Discrete Transfer Fen 
Implement a z-transform transfer function. Spedfy the numerator and denominator coeffidents in descending powers of z. 
The order of the denominator must be greater than or equal to the order of the numerator. 
The numerator coeffidents must either be a scalar bO or a vector |b0 b 1 b2...]. The denominator coeffidents must either be 
a scalar aO or a vector [aO at a2...]. 
Main 
Data Types | State Attributes 
Numerator coeffidents: 
Denominator coeffidents: 
Initial states: 
Sample time {-1 for inherited): 
[1 -0.214] 
[1 -0.607] 
0.5 
LJ" Optimize by skipping divide by leading denominator coeffident (aO) 
00 
FIGURE C.I 7 Function Block parameter windows for: a. Zero-Order Hold block; b. Discrete Transfer Fen block 
The block parameters for the Zero-Order Hold and Discrete Transfer Fen 
blocks are set as shown in Figures C. 17(A) and (6), respectively. 
Select Configuration parameters . . . under the Simulation menu in your 
model window and set the simulation stop time to 4 seconds, the type to fixed-
step, and the solver to ode4 (Runge-Kutta). The result of the simulation is shown in 
Figure C.18. 

Summary 
FIGURE C18 
Outputs of the digital systems 
{^Summary J | 
This appendix explained Simulink, its advantages, and how to use it. Examples were 
taken from Chapters 4. 5, and 13 and demonstrated the use of Simulink for 
simulating linear, nonlinear, and digital systems. 
The objective of this appendix was to familiarize you with the subject and get 
you started using Simulink. There are many blocks, parameters, and preferences that 
could not be covered in this short appendix. You are encouraged to explore and 
expand your use of Simulinkby using the on-screen help that was explained earlier. 
The references in the Bibliography of this appendix also provide an opportunity to 
learn more about Simulink. 

856 
Appendix C 
MATLAB'sSinrulink Tutorial 
^ Bibliography J) 
The MathWorks. Control System Toolbox ™ 8 Getting Started Guide. The MathWorks. Natick, 
MA. 2000-2009. 
The MathWorks. Control System Toolbox ™ 8 User's Guide. The MathWorks. Natick, MA. 
2001-2009. 
The MathWorks. MATLAB® 
7 Getting Started Guide. The MathWorks. Natick, MA. 1984-
2009. 
The MathWorks. MATLAB® 
7 Graphics. The MathWorks. Natick, MA. 1984-2009. 
The MathWorks. MATLAB® 
7 Mathematics. The MathWorks. Natick, MA. 1984-2009. 
The MathWorks. MATLAB® 
7 Programming Fundamentals. The MathWorks. Natick, MA. 
1984-2009. 
The MathWorks. Simulin^ 
7 Getting Started Guide. The MathWorks. Natick, MA. 1990-
2009. 
The MathWorks. Simulink® 7 User's Guide. The MathWorks. Natick, MA. 1990-2009. 

Appendix D: LabVIEW™1 Tutorial 
^ D . 1 
Introduction 
LabVIEW is a programming environment that is presented here as an alternative to 
MATLAB. Although not necessary, the reader is encouraged to become acquainted 
with MATLAB before proceeding, since familiarity with MATLAB can enhance the 
understanding of the relationship between textual (MATLAB) and graphical (Lab-
VIEW) programming languages and extend the functionality of LabVIEW. In this 
tutorial, we will show how to use LabVIEW to (1) analyze and design control 
systems, and (2) simulate control systems. This appendix was developed using 
LabVIEW 2009. 
LabVIEW is a graphical programming environment that produces virtual 
instruments (VI's). A VI is a pictorial reproduction of a hardware instrument on 
your computer screen, such as an oscilloscope or waveform generator. The VI can 
consist of various controls and indicators, which become inputs and outputs, 
respectively, to your program. Underlying each control and indicator is an associated 
block of code that defines its operation. The LabVIEW model thus consists of two 
windows: (1) Front Panel, which is a replica of the hardware front panel showing the 
controls and indicators, and (2) Block Diagram, which contains the underlying code 
for the controls and indicators on the Front Panel. 
Associated with the Front Panel window is a Controls palette window 
containing numerous icons representing controls and indicators. The icons can 
be dragged onto a Front Panel window to create that control or indicator. 
Simultaneously, the associated code block is formed on the Block Diagram 
window. 
Alternately, the block diagram can be formed first, and then the front 
panel is created from the block diagram. Associated with the Block Diagram 
window is a Functions palette window containing numerous icons representing a 
wide range of functions. Icons can be dragged onto a Block Diagram window to 
create that code block. 
For example, Figure D.l(a) is the front panel of a signal generator. The 
generator consists of a control to select the signal type and a waveform graph 
that shows the output waveform. Figure D.l(b) shows the underlying code, which is 
contained in the code blocks. Here, the signal type selector is a control, while the 
waveform graph is an indicator. Later we will show how to make connections to 
other VI's. The palette windows for the front panel and block diagram are shown 
respectively in Figures D.l(c) and (d). 
1 LabVIEW is a registered trademark, of National Instruments Corporation. 

8 5 8 
Appendix D 
LabVIEW Tutorial 
i'nillffllfiiit'illllii 
Edit Vie.v Project Operate Tools 
W Help 
S
S 
[ " 1 [ f ] 1 ¾ P * o W I 3 ^ (^PtApplicationFort 
Waveform Graph 
(b) 
FIGURE D.1 A LabVIEW function generator VI: a. Front Panel window; b. Block Diagram 
window; (figure continues) 
| 
D.2 Control Systems Analysis, Design, and Simulation 
LabVIEW can be used as an alternative to or in conjunction with MATLAB to analyze, 
design, simulate, build, and deploy control systems. In addition to LabVIEW, you will 
need the LabVIEW Control Design and Simulation Module. Finally, as an option that 
will be explained later, you may want to install the MathScript RT Module. 
Analysis and design can be thought of as similar to writing MATLAB code, 
while simulation can be thought of as similar to Simulink. In LabVIEW, analysis and 
design, as opposed to simulation, are handled from different subpalettes of the 
Functions window's Control Design and Simulation palette. See Figure D.l(rf). 
Analysis and design, and simulation will typically begin with the Block Diagram 
window, where icons representing code blocks will be interconnected. Parameters 

D.3 Using LabVIEW 
859 
• 
Modern 
• 
System 
• 
Classic 
• 
Express 
;j • 
Control Design & Simulabon 
• 
.NET & ActiveX 
• 
Signal Processing 
• 
Addons 
• 
User Controls 
Select a Control... 
Q» Search | g^ View j 
• 
Programming 
• 
Measurement I/O 
• 
Instrument I/O 
Vision and Motion 
Mathematics 
Signal Processing 
Data Communication 
Connectivity 
• 
Con trol Design & Simula bon 
• 
Express 
• 
Addons 
• 
Favorites 
• 
User Libraries 
Select a VI... 
(c) 
(d) 
FIGURE D.1 {Continued) c. Controls palette; d. Functions palette 
used by the code can be conveniently selected, changed, and passed to the code 
through VI controls on the Front Panel window created from the code icons. Any 
results, such as time response, can be displayed through VI indicators on the Front 
Panel window created from the code icons. 
( D . 3 
Using LabVIEW 
The following steps start you on your way to using LabVIEW for control systems 
analysis, design, and simulation. These steps will be illustrated in the examples that 
follow. 
1. Start LabVIEW LabVIEW starts with the Getting Started window shown in 
Figure D.2, where you can select a New file or Open an existing file. You may also 
select various resources. Selecting Blank VI under the New label or New VI under 
the File menu brings up the Front Panel and Block Diagram windows shown in 
Figure D.l. If necessary, a window can be opened from the Window tab on the 
menu bar of the Front Panel and Block Diagram. 
Right-click the Block Diagram window to bring up the Functions palette and 
click the thumb tack in the upper left-hand corner to dock the window. Repeat for 
the Front Panel window to access the Controls palette. 

Appendix D 
LabVIEW Tutorial 
> Gettinp, Started 
Empty Project 
VI from Template, 
Latest from ni.com 
Technical Content 
Open 
Figure D_l.vi 
Browse... 
Discussion Forums 
labVTHV Help 
list of AS New Features 
0 ^ Find Examples... 
FIGURE D.2 LabVIEW's Getting Started window 
2. Select blocks Make the Block Diagram window active, or access it from Window 
on the menu bar. Right-click the Block Diagram window or use the View menu to 
bring up the Functions palette. Expand the palette window by clicking the double-
up arrows at the bottom. At the top of the palette window click View, and select 
View This Palette As/Category (Icons and Text) to add a text description below 
each icon. For control systems analysis, design, and simulation, expand Control 
Design & Simulation in the Functions palette by clicking the arrow to the left of 
this category. 
If you are performing a simulation click the subpalette Simulation. If you are 
performing control system analysis or design, click the subpalette Control Design. 
An arrow in the upper-right corner of a subpalette indicates additional underlying 
palettes or blocks. 
If the name of the icon is incomplete, resting the mouse over the icon will bring 
up its complete identification. To obtain detailed help about an icon, right-click 
the icon and select Help. 
3. Move blocks to the block diagram window To move the icon to the Block 
Diagram, left-click the mouse to attach the icon (some icons take a little time to 
complete this operation). When the pointer turns into a hand, click the spot on the 
Block Diagram where you want to place the icon. 
4. Obtain information about the block You will now want to obtain information 
about how to interconnect the block to other blocks and pass parameters to the 
block as well as other characteristics about the block. Select the yellow question 
mark at the right of the Block Diagram toolbar to turn on the Context Help 
window. This window will provide help about a particular icon if you rest your 

D.3 Using LabVIEW 
mouse over that icon. Additional help is available under the Help menu on the 
Block Diagram menu bar. Finally, right-click the icon to bring up a menu with 
additional choices, such as Properties, if any. In particular, you will use this menu 
to create the block's front panel's controls and indicators. This front panel will be 
your interface with the block to choose parameters and see responses. 
5. Interconnect and label blocks Once blocks are placed on the Block Diagram 
they can be moved about by clicking on them or dragging your mouse across 
several or them to establish a selection pattern. After the selection pattern has 
been established, depress the mouse left button and drag to a new location. To 
delete a block, select the block and press the Delete button. 
The context help for the block includes a description of the block's terminals. 
Let your mouse rest on a terminal until the mouse pointer turns into a spool of 
wire. Click the terminal and then move the mouse to the next icon's terminal 
where you want to make the connection. Click the destination terminal to 
complete the wiring. Notice that the terminal in the Context Help window blinks 
when your mouse resides above that terminal on the block, ensuring that you are 
on the correct terminal. If you make an error in wiring, click on the wire and press 
the Delete button or right-click the wire and select Delete Wire Branch. 
Block labels can be displayed or hidden. Right-click on the block to bring up 
the pop-up menu and check or uncheck Visible Items/Label to display or hide, 
respectively, the label. Double-clicking on the label above some blocks will allow 
you to select and change the text. One click of the mouse on the label will place a 
selection pattern around the label and allow you to hold down the left key of the 
mouse and move the label to a different location. 
6. Create the interface to your block You will now want to create the interface to 
your block in order to control or select functions, specify parameters, or view 
responses. This interface will be accessed via the Front Panel window. Right-click 
a terminal on a block for which you want to create an interface. On the pop-up 
menu, choose Create/Control to be able to interact with the block or Create/ 
Indicator to view a response or setting. 
7. Set the controls Switch to the Front Panel window and set your controls. For 
example, enter parameter values, select functions, etc. If you want to change 
values and at some future time return to the current values, click on Edit on the 
Block Diagram menu bar and select Make Current Values Default. To return to 
the default values in the future, click on Edit on the Block Diagram menu bar and 
select Reinitialize Values to Default. 
8. Run the program Click on the arrow at the left of the toolbar on either the Block 
diagram or Front Panel window to run the program. The program can be run 
continuously by clicking the curved arrow button on the toolbar second from the 
left. Continuously running your program permits changing functions and param-
eter values during execution. 
In order to identify the buttons, let your mouse rest on a button to bring up a 
context menu. Stop your simulation by pressing the red-dot button, third from the 
left. If you are performing control systems analysis and design, another way to 
continuously run the program is to place a While Loop around your block 
diagram. The loop is available in the Functions palette at Express/Execution 
Control/While Loop. This loop also places a Stop button on the Front Panel. The 
program executes until you press the stop button. In lieu of the Stop button, any 
true/false Boolean can be wired to the condition block (red dot) created inside the 
While Loop. 

Appendix D 
LabVIEW Tutorial 
If you are performing simulation, you can use a Simulation Loop available in 
the Functions palette at Control Design and Simulation/Simulation/Simulation 
Loop. Place the Simulation Loop around your simulation block diagram by 
dragging the mouse. Right-click on the Simulation Loop outline and choose 
Configure Simulation Parameters . . . to determine the parameters for executing 
the simulation. The Front Panel indicators and controls are also configurable. 
Right-click on the indicator or control and select Properties. 
( D.4 Analysis and Design Examples 
In this section, we will present some examples showing the use of LabVIEW for the 
analysis and design of control systems. In the next section, examples of the use of 
LabVIEW for simulation will be presented. 
Analysis and design examples use icons selected from the Control Design 
subpalette under the Control Design and Simulation palette. In the next section 
showing examples of simulation, we will use icons taken from the Simulation 
subpalette under the Control Design and Simulation palette. 
Trylt D.l 
numg=100; 
deng=[l 2 100]; 
'G(s)' 
G=tf(numg,deng) 
step(G); 
title ('Angular Velocity' 
Example D.1 
Open-Loop Step Response 
Analysis and design usually begins by selecting icons from the Control Design 
subpalette and dragging them to the Block Diagram window. The icons represent 
blocks of code and the cascading of code blocks can be thought of as a sequence of lines 
of code. Thus, an advantage of LabVIEW over MATLAB is that the programmer 
does not need to memorize coding language. For example, consider the MATLAB 
code shown in Trylt D.l that produces the step response of G(s) = 100/(52 + 2s + 100): 
This step response can be produced in LabVIEW without knowing any 
coding language. We now demonstrate by following each step of Section D.3: 
1. Start LabVIEW Start LabVIEW and select Blank VI from the window shown 
in Figure D.2. 
2. Select blocks From the Functions palette, select the blocks shown in Figure 
D.30) and (b). 
3. Move/blocks to the Block Diagram window Drag your icons one at a time to 
the Block Diagram window, Figure D.4. 
4. Obtain information about the block Right-click each of the blocks and be sure 
the first two items under Visible Items are checked. Look at the CD Construct 
Transfer Function Model.vi. A Polymorphic VI Selector is shown at the bottom. 
Click the selector to bring up the menu. Select SISO. This block effectively creates 
the transfer function shown in the first four steps of the MATLAB code in Trylt D. 1. 
Repeat for the CD Draw Transfer Function Equation.vi and select TF from 
the Polymorphic VI Selector. This block will write the transfer function 
symbolically in the display. Your selection from the polymorphic vi selector 
should match the format of the transfer function created by the CD Construct 
Transfer Function Model.vi. 

D.4 
Analysis and Design Examples 
Instrument I/O 
Data Communication 
Connectivity 
Control Design 
L Model Construction 
CD Construct,. CD Construct... 
CD Draw Stat. 
CD Write Mod.,. 
CDDravyZer... CD Read Mod. 
• Express 
fv) 
(a) 
Functions 
Mi 
Programming 
Instrument I/O 
Vision and Motion 
Connectivity 
Control Design & Simulation 
L Control Design 
L rime Response 
| > 
SigManip 
Exec Control 
Ariih&Cpmpar 
• 
Addons 
• 
Favorites 
• 
User Libraries 
Select a VI. 
(b) 
FIGURE D.3 
Selecting a. CD Construct . . . and CD Draw . . . ; b. CD Step Response . . . 
Repeat for the CD Step Response.vi. and select TF from the Polymorphic VI 
Selector. This block will collect the data for the step response and permit 
plotting the data. This block effectively creates the last two commands of the 
MATLAB code shown in Try It D.l. 
5. Interconnect and label blocks You should now have the Block Diagram 
window shown in Figure D.4. Interconnect the code blocks. Click on the 
question mark on the right side of the toolbar to bring up the context menu. 
As your mouse passes above an icon, its context menu appears, showing the 
terminals. See Figure D.5. Interconnect the terminals by letting the mouse rest 
on a terminal until it becomes a spool of wire. 

864 
Appendix D 
Lab VIEW Tutorial 
Example 1 .vi Block Diagram ' 
- O X 
CDConstaict Transfer Function Model.vi 
CD Step Response.vi 
" S 3 
m 
S3 
, ^ r ( 
TF " 
CD Draw Transfer Function Equation.vi 
3 ? 
tm 
<J 
M 
FIGURE 0.4 
Block Diagram window 
|Transfer Function Model] 
CD Construct Transfer Function Model.vi 
CD Step Response.vi 
Delay 
error in (no error; 
Creates a transfer function representation of a system using the 
Sampling Time (s), Numerator, Denominator, and Delay. This 
VI also produces a transfer function model which specifies the data in 
symbolic form. You must manually select the polymorphic instance to 
FIGURE D.5 Context Help for CD Construct Transfer Function Model.vi 
Click on the terminal and then click on the destination terminal. The two 
terminals will appear as wired together. Continue wiring terminals until you 
have the Block Diagram window shown in Figure D.6. Mid-wire connections as 
shown can be made by letting your mouse rest at the connection point until it 
becomes a spool of wire. 
6. Create the interface to your block You will now want to create the interface to 
specify parameters and view responses. This step will create the interface that 
will be accessed on the Front Panel window. The interfaces we will create are: 
• CD Construct Transfer Function Modekvi input parameter controls. Right-click 
on the numerator terminal shown in Figure D.5 and select Create/Control. 
Repeat for the denominator. 

D.4 Analysis and Design Examples 
865 
& Example 1.vi Block Diagram 
Fjle §dit Vjew Project 
Operate Tods 
H 
W M o t 
13pt Application Font 
\ . \ S t H I ^ H 
^ 
CD Construct Transfer Function Mode), vi 
CD Step Response. vi 
CD Draw Transfer Function Equation.vi 
FIGURE D.6 Interconnected blocks 
CD Step Response.vi response plot indicator. Right-click on the Step Response 
Graph terminal and select Create/Indicator. 
CD Draw Transfer Function Equation.vi symbolic transfer function indicator. 
Right-click on the Equation terminal and select Create/Indicator. Your Block 
Diagram should now look similar to Figure D.7(a). 
As an option, you can create transfer functions using a MathScript block if the 
MathScript RT Module is installed. This option is generally compatible with 
MATLAB's M-file code statements for creating your transfer function. Interfaces 
are then created to pass parameters to and from the M-file code. You should be 
familiar with MATLAB to use this option. The MathScript block is found in the 
Programming/Structures/MathScript palette. You create M-file code inside the 
MathScript block. Input and output interfaces are created and named identically 
> Example 1.vi Block Diagram 
Fie Bit Jfiew Project Operate Tools Jg 
IJ31 ® j |Sjgj IkiiffM V1391 App^fo"Font 
i -• j flg^ll -00-- j [¢5 
Numerator 
Step Response Graph 
CD Construct Transfer Function Model, vi 
CD Step Response, vi 
(a) 
FIGURE D.7 Block Diagram window: a. with Control Design blocks and interfaces; 
(figure continues) 

866 
Appendix D 
LabVIEW Tutorial 
FIGURE D.7 (Continued) b. with MathScript block 
to those within the M-file code. However, when using MathScript, you must 
create controls first on the Front Panel, rather than the Block Diagram. For 
example, to create the numeric interfaces for K, a, and b, right-click the Front 
Panel to produce the Controls palette. From this palette, produce each numeric 
control from Modern/Numeric/Numeric Control. The resulting controls are 
shown in Figure D.8(b). These interfaces are then wired to the appropriate 
terminals on the Block Diagram. Your Block Diagram should now look similar 
to Figure D.7(6). 
On the Block Diagram window menu bar, select Window/Show Front Panel. 
You will see the Front Panel shown in Figure D.8 created by your interfaces. You 
can double-click the labels above your interfaces either in the Front Panel 
window or the Block Diagram window to change the label to be more descrip-
tive of your project. 
7. Set the controls Using the Front Panel window, enter polynomial coefficients 
for the numerator and denominator in ascending order—lowest to highest. The 
selector to the left of the numerator and denominator shows the power of s for 
FIGURE D.8 Front Panel: a. for 
Block Diagram shown in 
Figure D.7(a); (figure continues) 
I ' •'. 
. 
3 
s 
* 
t 
• 
m 
a 

D.4 Analysis and Design Examples 
FIGURE D.8 (Continued) 
b. for Block Diagram shown in 
Figure DJ(b) 
the left-most coefficient. Increasing the counter allows entry of higher-order coeffi-
cients not visible originally. To make all coefficients of a polynomial visible, let the 
mouse move on the right-hand edge of the polynomial indicator until the pointer 
becomes a double arrow and blue dots appear at the left and right edges of the entire 
polynomial indicator. You can then drag the right blue dot to expose more cells. 
Familiarize yourself with the choices on the menu bar as well as those on the 
pop-up menus created when you right-click on any indicator or control. For 
example, under the Edit menu, among other choices, you can Make Current 
Values Default or Reinitialize Values to Default. Right-clicking the indicators 
or controls brings up a menu from which, among other choices, Properties can be 
selected to configure the indicator or control as desired. 
8. Run the program Figure D.9 shows Example D.l after execution. The figure 
shows the values entered, the equation, and the step response. Execution 
was initiated by clicking the arrow at the left of the toolbar. 
FIGURE D.9 Front Panel after 
execution: a. for block 
diagram in Figure 7(a); 
(figure continues) 

868 
Appendix D 
LabVIEW Tutorial 
** Example 1 with WathScript.vi Front Panel '" 
FIGURE D.9 
(Continued) 
b. for block diagram in 
Figure 1(b) 
The program can run continuously by clicking the curved arrows on the 
toolbar. Now, change values; hit the Enter key and see the results immediately 
displayed. Stop the program execution by clicking on the red hexagon on the 
toolbar. Another way of continuously running the program is to place a While 
Loop around the block diagram as shown in Figure D.lQ(a). The loop is accessed 
from Functions/Express/Execution Control as shown in Figure D.10(b). After 
** Example 1 v/ith While I oop.vi Block Diagram 
f > 
&tt 59ew Pjoject Operate Toots ffihdow a * 
^]#i • / N f f j B y g ^ i^**>«*•"fa* Hfs^i3£^[^iKiiBQi-
Numef atof 
Step Response Graph 
CD Construct Transfer Function Model.vi 
CD Step Response, vl 
CD Draw Transfer Function Equation, vi 
m 
T F - | 
<J 
• 
Measurement I/O 
• 
Instrument I/O 
• 
Vision and Motion 
> 
Signal Processing 
• 
Data Communication 
• 
Connectivity 
• 
Control Design a SimiJaSon 
• 
SgnaExpress 
• 
Express 
Case Structure 
Time Delay 
BapsedTme 
• 
Favorites 
• 
User Libraries 
SetectaVI... 
(b) 
FIGURE D.10 a. Block diagram with While Loop; b. Functions palette showing While Loop location 

D.4 Analysis and Design Examples 
869 
selecting the While Loop, drag the cursor across the block diagram to create 
the continuous loop. A stop button will appear on the block diagram as well as 
on the Front Panel. At the lower right is a Loop Interation icon, which can be 
used to control the While Loop. The reader should consult the on-line 
documentation for further information. 
Example D.2 
Closed-Loop Step Response 
In this example, we show how to display the step response of a unity-feedback 
system. For variety, we represent the open-loop system as a ratio of zeros over poles 
II • 
Data Communication 
• 
Connectivity 
• 
Con trol Design & Simula Bon 
L Control Design 
L Model Construction 
3 £ 
TSfi 
CD Construct... CD Construct 
CD Construct.. CD Construct 
33E 
3 E 
m. 
CD Construct.. CD Construct... 
CDDrawStat. 
w 
3 E 
CDDrawTra... 
CDDrawZer... 
CD Read Mod.. 
CD Write Mod... 
• 
SignaExpress 
• 
Express 
• 
Favorites 
• 
User Libraries 
Select a VI... 
(a) 
I • 
Signal Processing 
• 
Data Communication 
• 
Connectivity 
• 
Control Design & Simulation 
L Control Design 
L Model Interconnection 
3 E 
$ > 
3 E 
£> 
$ > 
CD Add Mode... CD Subtract... CD Multiply M... 
-rfiL. 
$ > 
as 
HjG] 
I E 
CDDivideMo... CDHorizontal... CD Vertical C... 
| • 
Express 
• 
Addons 
• 
Favorites 
1 • 
User Libraries 
Select a VI. 
(b) 
FIGURE D.11 a. Obtaining zero-pole-gain transfer function from the Functions palette; b. Obtaining Feedback 
interconnection from Functions palette 

870 
Appendix D 
LabVIEW Tutorial 
with a multiplying gain, analogous to MATLAB's zpk function. In the previous 
example, we represented the system as a ratio of polynomials, analogous to 
MATLAB's tf function. 
1. Select blocks The zero-pole-gain transfer function is obtained from the 
Functions palette as shown in Figure D.ll(a). We place this transfer function 
in the forward path of a unity-feedback system by following its block with a 
Feedback block obtained from the Functions palette as shown in Figure D.ll(b). 
> Closed-Loop Step Response.VJ Block Diagram 
fO @l : . r f i l l ^ S M t f l a t I ISptApttationFont 
M I I I E H I ^ * 
1 I J I 
.1 ..:. ~ ' 
-~? • - . 
- . : 
\ 
1(1111^111- I' 
. • 
•' ' 
I — . 
unit,in .,n 
Open -loop Zeros 
Oosed'tQop Step Response Graph 
<1 
IS 
(a) 
FIGURE D.12 a. Block Diagram for Example D.2; b. R-ont Panel for Example D.2 

D.4 Analysis and Design Examples 
If the Model 2 input to the Feedback block is left unconnected, then a unity-
feedback interconnection is assumed. Other options for interconnection, such 
as parallel and series, are shown on the palette of Figure D.ll(6). 
Interconnect and label blocks Producing the closed-loop step response is 
similar to Example D.l, except the step-response blocks are placed at the output 
of the Feedback block. The equation writer is wired to the system output as in 
Example D.l. All data types must be compatible and are shown selected with the 
pull-down menu at the base of the blocks. If you select Automatic in the pull-down 
menu, LabVIEW will select the correct form for you as you connect the blocks. 
The final Block Diagram and Front Panel for this example are shown in 
Figure D.12 (a) and (b), respectively. Notice that you enter open-loop poles, zeros, 
and gain on the Front Panel in place of polynomial open-loop numerator and 
denominator coefficients. 
Example D.3 
Root Locus Analysis and Design 
We can obtain root locus plots by adding the Root Locus block 
obtained from the Functions palette as shown in Figure D.13. 
The Root locus block is connected to the output of the open-
loop system and a Root Locus Graph indicator is formed at the 
output of the Root Locus block. The resultant Block Diagram 
and Front Panel are shown in Figure D.l4(a) and (b) 
respectively. 
Figure D.13 shows other characteristic blocks that can be 
added. For example, closed-loop poles and zeros, as well as 
damping ratio and natural frequency, can be displayed. 
• 
Measurement I/O 
• 
Instrument I/O 
• 
Vision and Motion 
• 
Mathematics 
• 
Data Communication 
• 
Connectivity 
•*" Control Design & Simula Bon 
L Control Design 
• 
Express 
• 
Addons 
• 
Favorites 
> User Libraries 
SelectaVI... 
FIGURE D.13 Functions palette showing location 
of Root Locus block 

872 
Appendix D 
LabVIEW Tutorial 
CD'Root locus, vi 
U
S 
Root loos &aph 
Openioop Zoos 
£S 
(a) 
(b) 
FIGURE D.14 Windows showing root locus analysis: a. Block Diagram; b. Front Panel 

D.4 Analysis and Design Examples 
873 
Example D.4 
Open- and Closed-Loop Sinusoidal Frequency Analysis and Design 
We can obtain open- and closed-loop sinusoidal frequency response curves by 
replacing the Root Locus block with the Bode block to yield the open-loop 
frequency response. A copy of the Bode block can be added at the output of 
the Feedback block to obtain the closed-loop frequency response. Figure D.15 
shows where to obtain the Bode block. 
Figure D.16 shows the Block Diagram and Front Panel with open- and closed-
loop Bode analysis. In order to display the plots, the indicators shown at the outputs 
of the Bode blocks were created. 
Figure D.15 shows other alternatives for frequency response analysis. For 
example, in addition to the Bode plots, you can create an indicator telling you the 
gain and phase margins by using the Gain and Phase Margin block. Figure D.17 
shows that result. 
Finally, if you need to use Nyquist or Nichols charts, the associated blocks are 
shown in Figure D.15 and can replace the Bode blocks. 
¢ ^ Search | glVrew ) f p 
• 
Programming 
• 
Measurement I/O 
• 
Instalment I/O 
• 
Vision and Motion 
> 
Mathematics 
• 
Signal Processing 
• 
Data Communication 
• 
Connectivity 
• 
Control Design & Simulation 
L Control Design 
.frequency R> 
F T O 
fe 
vCD Bode.viy 
CD Singular V... CD All Margin... 
Ho> 
CD Evaluate... CDBandwidt.. CDGetFrequ. 
• 
SignalExpress 
• 
Express 
• 
Favorites 
• 
User Libraries 
SelectaVI... 
FIGURE D.15 Functions window showing frequency response blocks, such as Bode, 
Nyquist, Nichols, and Gain and Phase Margin blocks 

874 
Appendix D 
LabVIEW Tutorial 
(a) 
-;«-
[ 3 -
! 1; 
:,. • 
j ! 
1, j 
|„ 
i, ' 
S^_l 
1 • 
10* ja>> 
1 
13 
»9 
(b) 
FIGURE D.16 Bode analysis via LabVIEW: a. Block Diagram; b. From Panel 

DA Analysis and Design Examples 
875 
[ Bode Analysis andOesign with Additional Analysis.* Block 
file 
Edit 
View 
Project 
Operate 
lools 
Window 
Help 
"" I » 1 H W J j M J M & S k j 
[20DiADolicaiion F o m l ' l l M f s n i S H l f ^ l 
Open-Loop Poles 
Openkoop Gain 
CD Construe! Zero-Pole-Gain Model-vi 
CD Gain and Phase Marginvi 
Open-Loop Bode Magnitude 
Open-Loop Bode Phase 
Gain and Phase Margins 
Open-Loop Equation 
(«) 
3 
I Bode Analysis and Desert with Additn«ial AratysKvi from Panel * 
£i|e Edil View Project 
Operate lools Itfindow 
Help 
[¢1¾ ® [ l T | r ^ A o o [ t a t f e | F o r * H j ^ l i ^ - | ; 3 i - ] ! f t ' n 
-F 
. - . 
. in ' 
. 
YOCufB J A J j 
•' 
1 
4.7893 
) 
56403 
p>nw Mtrgm 
FIGURE D.17 Bode analysis with gain and phase margin: a. Block Diagram; b. Front Panel 

876 
Appendix D 
Lab VIEW Tutorial 
( 
D.5 Simulation Examples 
Whereas the Lab VIEW block sequence for design and analysis is analogous to 
following the code statement sequence in a MATLAB M-file, the Lab VIEW block 
sequence for simulation is analogous to following the block sequence of a Simulink 
diagram. 
In this section, we show examples of simulation using LabVIEW For control 
system simulation, icons for the block diagram are taken from the Simulation 
subpalette under the Control Design and Simulation palette. Our examples will 
parallel the examples shown in Appendix C which uses Simulink. 
Simulation of Linear Systems 
Create Block Diagram and Front Panel 
Figure D.18 shows the Block Diagram 
and Front Panel for simulating a linear system. The simulation reproduces 
Example C.l in Appendix C, which uses Simulink. Blocks are selected from the 
Simulation subpalette under the Control Design and Simulation palette and must 
be placed within the Simulation Loop obtained from Functions/Control Design 
and Simulation/Simulation/Simulation Loop. We now enumerate the detailed steps 
required to create the Block Diagram and Front Panel: 
1. Transfer functions are obtained from Functions/Control Design and Simulation/ 
Simulation/Continuous Linear Systems/Transfer Function. Right-click on each 
transfer function and select Configuration to enter the parameter values shown 
in Figure D.18(#) or equivalently in Figure C.5 
2. The gain block is obtained from Functions/Control Design and Simulation/ 
Simulation/Signal Arithmetic/Gain. Right-click on the gain block and select 
Configuration to enter the parameter value. 
(a) 
FIGURE D.18 Simulation of linear systems: a. Block Diagram; (figure continues) 

D.5 Simulation Examples 
E ) 
i " " 
""•'.. ' 
"~~" 
" 1 S 3 
(ft) 
FIGURE D.18 (Continued) b. Front Panel 
3. The step-input block is obtained from Functions/Control Design and Simula-
tion/Simulation/Signal Generation/Step Signal. Right-click on the gain block 
and select Configuration to enter the parameter value. 
4. In order to display the three step-response curves simultaneously, we use a Build 
Array block obtained from Functions/Programming/Array/Build Array. 
Drag the bottom of the icon to expose the correct number of inputs three 
for this case). 
5. To create the display, we use the Simulation Time Waveform block obtained 
from Functions/Control Design and Simulation/Simulation/Graph Utilities/ 
Simtime Waveform. Right-click the output of the Simtime Waveform block 
and select Create/Indicator to produce the Waveform Chart icon and the 
Front Panel display. 
Configure simulation loop Finally, set the simulation parameters by right-clicking 
the Simulation Loop and selecting Configure Simulation Parameters . . . Set the 
parameters as shown in Figure D.19. 
Configure graph parameters On the Front Panel, right-click the graph and select 
Properties to configure graph parameters if required. Select the legend and expand 
it vertically to expose all three plot identities. The titles in the legend can be 
changed to reflect meaningful labels for the plots. 
Run the simulation Perform the simulation by clicking the arrow at the extreme 
left of the toolbar on the Front Panel window. You can erase curves between trials 
by right-clicking the display and selecting Data Operations/Clear Chart. 

878 
Appendix D 
LabVIEW Tutorial 
laamim^Mtmnn*™^ 
• 
E 
Simula bon Parameters 
Simulation Time 
Initial Time (s) 
Solver Method 
00E Solver 
[Runge-Kutta 4 
RrtalTime(s) 
DNan/Inf Check 
Continuous Time Step and Tolerance 
to 
0.01 
Mawnum Step Size (s) 
ilE-10 
0.001 
j 
'lE-7 
Discrete Time Step 
Discrete Step Size (s) 
fo.i 
'm 
0 Auto Discrete Time 
OK 
*" Configure Simulation Parameters 
(a) 
Simulation Parameters | Timing Parameters 
Enable Synchronized Timing 
0 Synchronize Loop to Timing Source 
Timing Source 
Source type 
Source name 
1kHz 
Loop Timing Attributes 
Period 
Offset/Phase 
Deadline 
• 
Auto Period 
Priority 
[too 
1 
Timeout (ms) 
Processor Assignment 
Mode 
j Automatic 
v 1 
1 kHz <resetat structure start> 
1MHz <reset at structu/e Mart 
51 - ' B n ;e to Scan EhtfM 
Other <defined by source name or terminal > 
OX 
Cancel 
m 
FIGURE D.19 Configuring the Simulation Loop parameters: a. Simulation parameters; b. Timing parameters 
Example D.6 
Effect of Amplifier Saturation on Motor's Load Angular Velocity 
Create Block Diagram and Front Panel The Block Diagram and Front Panel for 
simulating a dc motor with and without saturation are shown in Figure D.20. The 
Saturation block is obtained from Control Design & Simulation/Simulation/Non-
liner Systems/Saturation. 
Satuabon 
Transfer Kntbon 
1ST 
avtia&onTWWavpform IWBv^c^Oyti 
Transfer Function 2 
(a) 
FIGURE D.20 Simulation of a dc motor with and without saturation: a. Block Diagram; (figure continues) 

D.5 
Simulation Examples 
879 
FIGURE D.20 
(Continued) 
b. Front Panel 
-
Format il Plots 
Scales 
Documentation I Data Binding 
Simulation Time (X-Axis) 
Name Simulation Time 
0 Show scale label 
0 Show scale 
• Log 
O Inverted 
• 
Expand digital buses 
—Scale Style and Colors 
l~1 Autoscale 
10 
Maximum 
Scaling Factors 
Offset 
1 
Grid Style and Colors 
I Major tick 
| Minor tick 
| Marker text 
O Ignore waveform time stamp on x-axes 
jT Major grid 
T Minor grid 
>^<, 
OK 
Cancel 
Help 
FIGURE D.21 Chart 
Properties: Waveform Chart 
Window 

880 
Appendix D 
LabVIEW Tutorial 
Configure simulation loop Configure the simulation loop as shown in figure D.19, 
except change the Final Time (s) in Figure D. 19(a) to 10. 
Configure graph parameters 
On the Front Panel, right click the graph and select 
Properties to configure graph parameters. Select the Scales tab and enter 10 in the 
Maximum box as shown in Figure D.21. Select the legend and expand it vertically to 
expose both plot identities. The titles in the legend can be changed to reflect 
meaningful labels for the plots. 
Run the simulation Perform the simulation by clicking the arrow at the extreme 
left of the toolbar on the Front Panel window. You can erase curves between trials 
by right-clicking the display and selecting Data Operations/Clear Chart. 
Simulating Feedback Systems 
Create Block Diagram and Front Panel The Block Diagram and Front Panel for 
simulating feedback systems is shown in Figure D.22. The Summation block is ob-
tained from Control Design & Simulation/Simulation/Signal Arithmetic/Summation. 
Configure Summation and other blocks 
Right-click the Summation block and 
select Configuration . .. Repeat for other blocks. 
Configure simulation loop Configure the simulation loop as shown in Figure 
D.19, except change the Final Time (s) in Figure D.19(a) to 10. 
Configure graph parameters 
On the Front Panel, right click the graph and select 
Properties to configure graph parameters. Select the Scales tab and enter 10 in the 
Maximum box as shown in Figure D.21. 
FIGURE D.22 Simulation of feedback systems: a. Block Diagram; (figure continues) 

D.5 Simulation Examples 
FIGURE D.22 (Continued) b. Front Panel 
Run the simulation Perform the simulation by clicking the arrow at the extreme 
left of the toolbar on the Front Panel window. You can erase curves between trials 
by right-clicking the display and selecting Data Operations/Clear Chart. 
Simulating Digital Systems with the Simulation Palette 
Digital systems, such as Example C.4 in Appendix C, can be simulated using 
LabVIEW. However, there are restrictions on the transfer functions used in the 
simulation. LabVIEW requires that all inputs to the transfer functions be present at 
the beginning of the simulation or else a cycle error will result. Unfortunately, this 
requirement limits the use of transfer functions to those with a denominator of 
higher order than the numerator. Under these conditions, the reader is advised to 
use either MATLAB or the Control Design palette rather than the Simulation 
palette of the Control Design & Simulation function. 
Our first digital example will simulate a digital feedback system using the 
Simulation palette with proper transfer functions. The next example will simulate 
Example C4 in Appendix C, which does not have proper transfer functions, using 
Lab VIEW'S Control Design palette. 
Create Block Diagram and Front Panel The Block Diagram and Front Panel for 
simulating digital systems is shown in Figure D.23. The Discrete Zero-Order Hold 
block is obtained from Control Design & Simulation/Simulation/Discrete Linear 
Systems/Discrete Zero-Order Hold. The Discrete Transfer Function is obtained 

882 
Appendix D 
LabVIEW Tutorial 
Simulating Digital Closed loop Systems.vi Block Diagram ' 
Fie B*t Wew Project 
Operate Tools JMndow fcjeip 
O i # | W p J l i l F f l J g i l w l t f | r > [TJotApptcattonFont 
1
^
^
^
^
(
¾
¾ 
j? 
Id 
p5SPf 
.. 
Dsaete Zero-Order Hold Transfer Function 
Bucd Array 
SmJation Time Waveform 
Discrete Transfer Function 
;i-MH*+0,WS 
W*Y«form Chart 
HE: 
<I 
I ] 
i>] ra 
(«) 
FIGURE D.23 Simulation of digital systems with Simulation palette: a. Block Diagram; 
b. front Panel 
from Control Design & Simulation/Simulation/Discrete Linear Systems/Discrete 
Transfer Function. 
Configure Discrete Zero-Order Hold and other blocks Right click the Discrete 
Zero-Order Hold block and select Configuration . . . Set the sample period to 0.5 
second. Configure the transfer functions as shown on the Block Diagram. Con-
figure the Step Signal to be a unit step. 
Configure simulation loop Configure the simulation loop as shown in Figure D.19. 

D.5 Simulation Examples 
Configure graph parameters 
On the Front Panel, right click the graph and select 
Properties to configure graph parameters. Select the Scales tab and enter three in 
the Maximum box for both the x-and y-axes as shown in Figure D.21. Select the 
legend and expand it vertically to expose both plot identities. The titles in the 
legend can be changed to reflect meaningful labels for the plots. 
Run the simulation 
Perform the simulation by clicking the arrow at the extreme 
left of the toolbar on the Front Panel window. You can erase curves between trials 
by right-clicking the display and selecting Data Operations/Clear Chart. 
The simulation shows the difference in responses obtained by (1) modeling 
the digital system as a zero-order hold cascaded with a linear system (Plot 0), or (2) 
modeling the system with a digital transfer function (Plot 1). 
Example D.9 
Simulating Digital Systems with the Control Design Palette 
In order to avoid cycle errors in Lab VIEW, we use the Control Design palette when 
we have transfer functions for which the numerator and denominator are of the 
same order. This example reproduces Simulink Example C.4. 
Create Block Diagram and Front Panel The Block Diagram and Front Panel for 
this example are shown in Figure D.24. Wire the blocks as shown. 
aM*jtmnCTitifiMitfai*aMB.-ta 0i 
M^tjjijl 
Eat »ew 6o)«t 
Operate lot* 
ffindro 
a * 
[frig] ["llflfgJI'wI^lJhaP'^'^f"'' 
1-jd^lfS^ll^lM 
Numerator Continuous 
Step Response of Continuous and Discrete 
(a) 
FIGURE D.24 Simulation of digital systems with the Control Design palette: a. Block 
Diagram; (figure continues) 

884 
Appendix D 
Lab VIEW Tutorial 
(b) 
FIGURE D.24 (Continued) b. Front Pane) 
Most of the blocks were previously discussed in Example D.l and D.2. Digital 
transfer functions are created using the same blocks as continuous systems, but with 
a nonzero Sampling Time(s) input. 
The CD Convert Continuous to Discrete.vi, is obtained from Functions/ 
Control Design & Simulation/Control Design/Model Conversion/CD Convert 
Continuous to Discrete.vi. 
The Build Array is obtained from Functions/Programming/Array/Build 
Array. Expand the Build Array block to show two inputs. 
Configure parameters for Build Array Right-click on Build Array and select 
Concatenate Inputs. Right-click again on Build Array and select Create/Indicator. 
Right-click the indicator on the front panel and select Replace. Using the 
resulting palettes as shown in Figure D.25, select the XY Graph. 
On the front panel expand the legend to show two graphs. Title the legend 
components as shown. Change the x- and y-axes' starting and ending points as 
desired by right-clicking the graph and selecting Properties. In the Properties 
window, select Scales and enter the desired information. 
Right-click the graph on the front panel and select Data Operations and 
make your current values the default. Also, right-click again and choose to 
reinitialize to your default values. You may also choose to clear the current 
plot. 

Summary 
885 
FIGURE D.25 Choosing XYGraph 
Configure parameters for CD Convert Continuous to Discrete.vi 
Right-click and 
create a control for Sample Time(s), Numerator, and Denominator as described in 
Example D.l. Set the values as shown on the Front Panel. 
Configure parameters for CD Construct Transfer Function Model.vi as a discrete 
model Right-click and create a control for Sample Time(s), Numerator, and 
Denominator as described in Example 1. Set the values as shown on the Front Panel. 
Configure parameters for all CD Draw Transfer Function Equation.vi 
Right-
click and create a control for Equation as described in Example D.l. Set the values 
as shown on the Front Panel. 
Run simulation 
See Example D.l for a description. The results are shown in 
Figure D.24(b). 
^ Summary ^ 
This appendix presented Lab VIEW as an alternative to MATLAB for analysis, 
design, and simulation. Our discussion was divided into analysis and design, and 
simulation. 

886 
Appendix D 
LabVIEW Tutorial 
Analysis and design is performed by interconnecting code blocks, which is 
analogous to writing in-line code for MATLAB M-files. Since the LabVIEW code 
blocks are represented by icons, an advantage of using LabVIEW is that you do not 
have to know specific code statements. 
Simulation is performed by interconnecting code blocks and is analogous to 
Simulink flow diagrams. 
LabVIEW has more extensive applications than those covered here. You can 
create virtual instruments on your computer monitor that can operate external 
hardware and transmit and receive telemetric data. It is left to the interested reader 
to pursue these advanced topics. 
£ Bibliography]) 
National Instruments. Getting Started with LabVIEW. National Instruments, Austin, TX. 
2003-2007. 
National Instruments. LabVIEW Fundamentals. National Instruments, Austin, TX. 2003-
2007. 
National Instruments. LabVIEW™ Control Design User Manual. National Instruments, 
Austin, TX. 2004-2008. 
National Instruments. Introduction to LabVIEW in 3 Hours for Control Design and Simu-
lation. National Instruments Course Notes, Austin, TX. 

Glossary 
Acceleration constant lim^G^) 
s—*0 
Actuating signal The signal that drives the controller. If this signal is the difference 
between the input and output, it is called the error. 
Analog-to-digital converter A device that converts analog signals to digital signals. 
Armature The rotating member of a dc motor through which a current flows. 
Back emf The voltage across the armature of a motor. 
Bandwidth The frequency at which the magnitude frequency response is —3 dB 
below the magnitude at zero frequency. 
Basis Linearly independent vectors that define a space. 
Bilinear transformation A mapping of the complex plane where one point, s, is 
mapped into another point, z, through z = (as + b)/(cs + d). 
Block diagram A representation of the interconnection of subsystems that form a 
system. In a linear system, the block diagram consists of blocks representing 
subsystems, arrows representing signals, summing junctions, and pickoff points. 
Bode diagram (plot) A sinusoidal frequency response plot where the magnitude 
response is plotted separately from the phase response. The magnitude plot is dB 
versus log w, and the phase plot is phase versus log w. In control systems, the Bode 
plot is usually made for the open-loop transfer function. Bode plots can also be 
drawn as straight-line approximations. 
Branches Lines that represent subsystems in a signal-flow graph. 
Break frequency A frequency where the Bode magnitude plot changes slope. 
Breakaway point A point on the real axis of the s-plane where the root locus leaves 
the real axis and enters the complex plane. 
Break-in point A point on the real axis of the s-plane where the root locus enters the 
real axis from the complex plane. 
Characteristic equation The equation formed by setting the characteristic polyno-
mial to zero. 

Glossary 
Characteristic polynomial The denominator of a transfer function. Equivalently, 
the unforced differential equation, where the differential operators are replaced 
by s or X. 
Classical approach to control systems See frequency domain techniques. 
Closed-loop system A system that monitors its output and corrects for disturbances. 
It is characterized by feedback paths from the output. 
Closed-loop transfer function For a generic feedback system with G(s) in the 
forward path and H(s) in the feedback path, the closed-loop transfer function, 
T(s), is G(s)/[1 ± G(s)H(s)\, where the + is for negative feedback, and the - is for 
positive feedback. 
Compensation The addition of a transfer function in the forward path or feedback 
path for the purpose of improving the transient or steady-state performance of a 
control system. 
Compensator A subsystem inserted into the forward or feedback path for the 
purpose of improving the transient response or steady-state error. 
Constant M circles The locus of constant, closed-loop magnitude frequency re-
sponse for unity feedback systems. It allows the closed-loop magnitude frequency 
response to be determined from the open-loop magnitude frequency response. 
Constant TV circles The locus of constant, closed-loop phase frequency response for 
unity feedback systems. It allows the closed-loop phase frequency response to be 
determined from the open-loop phase frequency response. 
Controllability A property of a system by which an input can be found that 
takes every state variable from a desired initial state to a desired final state in 
finite time. 
Controlled variable The output of a plant or process that the system is controlling 
for the purpose of desired transient response, stability, and steady-state error 
characteristics. 
Controller The subsystem that generates the input to the plant or process. 
Critically damped response The step response of a second-order system with a given 
natural frequency that is characterized by no overshoot and a rise time that is faster 
than any possible overdamped response with the same natural frequency. 
Damped frequency of oscillation The sinusoidal frequency of oscillation of an 
underdamped response. 
Damping ratio The ratio of the exponential decay frequency to the natural 
frequency. 
Decade Frequencies that are separated by a factor of 10. 
Decibel (dB) The decibel is defined as 10 logPo, where PQ is the power gain of a 
signal. Equivalently, the decibel is also 20 logVc, where VG is the voltage gain of a 
signal. 
Decoupled system A state-space representation in which each state equation is a 
function of only one state variable. Hence, each differential equation can be solved 
independently of the other equations. 

Glossary 
Digital compensator A sampled transfer function used to improve the response of 
computer-controlled feedback systems. The transfer function can be emulated by a 
digital computer in the loop. 
Digital-to-analog converter A device that converts digital signals to analog signals. 
Disturbance An unwanted signal that corrupts the input or output of a plant or 
process. 
Dominant poles The poles that predominantly generate the transient response. 
Eigenvalues Any value, kt, that satisfies AXj = %iX\ for X| ^ 0. Hence, any value, A,-, 
that makes Xj an eigenvector under the transformation A. 
Eigenvector Any vector that is collinear with a new basis vector after a similarity 
transformation to a diagonal system. 
Electric circuit analog An electrical network whose variables and parameters are 
analogous to another physical system. The electric circuit analog can be used to solve 
for variables of the other physical system. 
Electrical admittance The inverse of electrical impedance. The ratio of the Laplace 
transform of the current to the Laplace transform of the voltage. 
Electrical impedance The ratio of the Laplace transform of the voltage to the 
Laplace transform of the current. 
Equilibrium The steady-state solution characterized by a constant position or 
oscillation. 
Error The difference between the input and the output of a system. 
Euler's approximation A method of integration where the area to be integrated is 
approximated as a sequence of rectangles. 
Feedback A path through which a signal flows back to a previous signal in the 
forward path in order to be added or subtracted. 
Feedback compensator A subsystem placed in a feedback path for the purpose of 
improving the performance of a closed-loop system. 
Forced response For linear systems, that part of the total response function due to 
the input. It is typically of the same form as the input and its derivatives. 
Forward-path gain The product of gains found by traversing a path that follows the 
direction of signal flow from the input node to the output node of a signal-flow 
graph. 
Frequency domain techniques A method of analyzing and designing linear control 
systems by using transfer functions and the Laplace transform as well as frequency 
response techniques. 
Frequency response techniques A method of analyzing and designing control 
systems by using the sinusoidal frequency response characteristics of a system. 
Gain The ratio of output to input; usually used to describe the amplification in the 
steady state of the magnitude of sinusoidal inputs, including dc. 
Gain margin The amount of additional open-loop gain, expressed in decibels (dB), 
required at 180° of phase shift to make the closed-loop system unstable. 

Glossary 
Gain-margin frequency The frequency at which the phase frequency response plot 
equals 180°. It is the frequency at which the gain margin is measured. 
Homogeneous solution See natural response. 
Ideal derivative compensator See proportional-plus-derivative controller. 
Ideal integral compensator See proportional-plus-integral controller. 
Instability The characteristic of a system defined by a natural response that grows 
without bounds as time approaches infinity. 
Kirchhoff 's law The sum of voltages around a closed loop equals zero. Also, the sum 
of currents at a node equals zero. 
Lag compensator A transfer function, characterized by a pole on the negative real 
axis close to the origin and a zero close and to the left of the pole, that is used for 
the purpose of improving the steady-state error of a closed-loop system. 
Lag-lead compensator A transfer function, characterized by a pole-zero configura-
tion that is the combination of a lag and a lead compensator, that is used for the 
purpose of improving both the transient response and the steady-state error of a 
closed-loop system. 
Laplace transformation A transformation that transforms linear differential equa-
tions into algebraic expressions. The transformation is especially useful for model-
ing, analyzing, and designing control systems as well as solving linear differential 
equations. 
Lead compensator A transfer function, characterized by a zero on the negative real 
axis and a pole to the left of the zero, that is used for the purpose of improving the 
transient response of a closed-loop system. 
Linear combination A linear combination of n variables, Xi, for i = 1 to n, given by 
the following sum, S: 
S = KnXn + Kn-\Xn-\ + •••-!- K\X\ 
where each Kj is a constant. 
Linear independence The variables x/, for i = 1 to n, are said to be linearly 
independent if their linear combination, 5, equals zero only if every K[ = 0 
and no xt = 0. Alternatively, if the x/'s are linearly independent, then Knx„ + 
Kn-\xn-\ H 
h K\x\ = 0 cannot be solved for any % Thus, no x^ can be expressed 
as a linear combination of the other xfs. 
Linear system A system possessing the properties of superposition and 
homogeneity. 
Linearization The process of approximating a nonlinear differential equation with a 
linear differential equation valid for small excursions about equilibrium. 
Loop gain For a signal-flow graph, the product of branch gains found by traversing a 
path that starts at a node and ends at the same node without passing through any 
other node more than once, and following the direction of the signal flow. 
Major-loop compensation A method of feedback compensation that adds a com-
pensating zero to the open-loop transfer function for the purpose of improving the 
transient response of the closed-loop system. 

Glossary 
Marginal stability The characteristic of a system defined by a natural response that 
neither decays nor grows, but remains constant or oscillates as time approaches 
infinity as long as the input is not of the same form as the system's natural response. 
Mason's rule A formula from which the transfer function of a system consisting of 
the interconnection of multiple subsystems can be found. 
Mechanical rotational impedance The ratio of the Laplace transform of the torque 
to the Laplace transform of the angular displacement. 
Mechanical translational impedance The ratio of the Laplace transform of the force 
to the Laplace transform of the linear displacement. 
Minor-loop compensation A method of feedback compensation that changes the 
poles of a forward-path transfer function for the purpose of improving the transient 
response of the closed-loop system. 
Modern approach to control systems See state-space representation. 
Natural frequency The frequency of oscillation of a system if all the damping is 
removed. 
Natural response That part of the total response function due to the system and the 
way the system acquires or dissipates energy. 
Negative feedback The case where a feedback signal is subtracted from a previous 
signal in the forward path. 
Newton's law The sum of forces equals zero. Alternatively, after bringing the ma 
force to the other side of the equality, the sum of forces equals the product of mass 
and acceleration. 
Nichols chart The locus of constant closed-loop magnitude and closed-loop phase 
frequency responses for unity feedback systems plotted on the open-loop dB versus 
phase-angle plane. It allows the closed-loop frequency response to be determined 
from the open-loop frequency response. 
Nodes Points in a signal-flow diagram that represent signals. 
No-load speed The speed produced by a motor with constant input voltage when the 
torque at the armature is reduced to zero. 
Nonminimum-phase system A system whose transfer function has zeros in the right 
half-plane. The step response is characterized by an initial reversal in direction. 
Nontouching-loop gain The product of loop gains from nontouching loops taken 
two, three, four, and so on at a time. 
Nontouching loops Loops that do not have any nodes in common. 
Notch filter A filter whose magnitude frequency response dips at a particular 
sinusoidal frequency. On the s-plane, it is characterized by a pair of complex zeros 
near the imaginary axis. 
Nyquist criterion If a contour, A, that encircles the entire right half-plane is mapped 
through G(s)H(s), then the number of closed-loop poles, Z, in the right half-plane 
equals the number of open-loop poles, P, that are in the right half-plane minus the 
number of counterclockwise revolutions, N, around — 1, of the mapping; that is, 
Z — P-N. 
The mapping is called the Nyquist diagram of G(s)H(s). 

892 
Glossary 
Nyquist diagram (plot) A polar frequency response plot made for the open-loop 
transfer function. 
Nyquist sampling rate The minimum frequency at which an analog signal should be 
sampled for correct reconstruction. This frequency is twice the bandwidth of the 
analog signal. 
Observability A property of a system by which an initial state vector, x(to), can be 
found from u(t) and y(t) measured over a finite interval of time from to. Simply 
stated, observability is the property by which the state variables can be estimated 
from a knowledge of the input, u(t), and output, y(t). 
Observer A system configuration from which inaccessible states can be estimated. 
Octave Frequencies that are separated by a factor of two. 
Ohm's law For dc circuits the ratio of voltage to current is a constant called 
resistance. 
Open-loop system A system that does not monitor its output nor correct for 
disturbances. 
Open-loop transfer function For a generic feedback system with G(s) in the forward 
path and H(s) in the feedback path, the open-loop transfer function is the product of 
the forward-path transfer function and the feedback transfer function, or G(s)H(s). 
Operational amplifier An amplifier—characterized by a very high input impedance, 
a very low output impedance, and a high gain—that can be used to implement the 
transfer function of a compensator. 
Output equation For linear systems, the equation that expresses the output vari-
ables of a system as linear combinations of the state variables. 
Overdamped response A step response of a second-order system that is character-
ized by no overshoot. 
Partial-fraction expansion A mathematical equation where a fraction with n factors 
in its denominator is represented as the sum of simpler fractions. 
Particular solution See forced response. 
Passive network A physical network that only stores or dissipates energy. No energy 
is produced by the network. 
Peak time, Tp The time required for the underdamped step response to reach the 
first, or maximum, peak. 
Percent overshoot, %OS The amount that the underdamped step response over-
shoots the steady-state, or final, value at the peak time, expressed as a percentage of 
the steady-state value. 
Phase margin The amount of additional open-loop phase shift required at unity gain 
to make the closed-loop system unstable. 
Phase-margin frequency The frequency at which the magnitude frequency response 
plot equals zero dB. It is the frequency at which the phase margin is measured. 
Phase variables State variables such that each subsequent state variable is the 
derivative of the previous state variable. 

Glossary 
Phasor A rotating vector that represents a sinusoid of the form A cos((ot + ¢). 
Pickoff point A block diagram symbol that shows the distribution of one signal to 
multiple subsystems. 
Plant or process The subsystem whose output is being controlled by the system. 
Poles (1) The values of the Laplace transform variable, s, that cause the transfer 
function to become infinite; and (2) any roots of factors of the characteristic 
equation in the denominator that are common to the numerator of the transfer 
function. 
Position constant lim G(s) 
s—»0 
Positive feedback The case where a feedback signal is added to a previous signal in 
the forward path. 
Proportional-plus-derivative (PD) controller A controller that feeds forward to the 
plant a proportion of the actuating signal plus its derivative for the purpose of 
improving the transient response of a closed-loop system. 
Proportional-plus-integral (PI) controller A controller that feeds forward to the 
plant a proportion of the actuating signal plus its integral for the purpose of 
improving the steady-state error of a closed-loop system. 
Proportional-plus-integral-plus-derivative (PED) controller A controller that feeds 
forward to the plant a proportion of the actuating signal plus its integral plus its 
derivative for the purpose of improving the transient response and steady-state error 
of a closed-loop system. 
Quantization error For linear systems, the error associated with the digitizing of 
signals as a result of the finite difference between quantization levels. 
Raible's tabular method A tabular method for determining the stability of digital 
systems that parallels the Routh-Hurwitz method for analog signals. 
Rate gyro A device that responds to an angular position input with an output 
voltage proportional to angular velocity. 
Residue The constants in the numerators of the terms in a partial-fraction 
expansion. 
Rise time, Tr The time required for the step response to go from 0.1 of the final 
value to 0.9 of the final value. 
Root locus The locus of closed-loop poles as a system parameter is varied. Typically, 
the parameter is gain. The locus is obtained from the open-loop poles and zeros. 
Routh-Hurwitz criterion A method for determining how many roots of a polyno-
mial in s are in the right half of the s-plane, the left half of the s-plane, and on the 
imaginary axis. Except in some special cases, the Routh-Hurwitz criterion does not 
yield the coordinates of the roots. 
Sensitivity The fractional change in a system characteristic for a fractional change in 
a system parameter. 
Settling time, Ts The amount of time required for the step response to reach and 
stay within ±2% of the steady-state value. Strictly speaking, this is the definition of 

894 
Glossary 
the 2% settling time. Other percentages, for example 5%, also can be used. This 
book uses the 2% settling time. 
Signal-flow graph A representation of the interconnection of subsystems that form 
a system. It consists of nodes representing signals and lines representing subsystems. 
Similarity transformation A transformation from one state-space representation to 
another state-space representation. Although the state variables are different, each 
representation is a valid description of the same system and the relationship between 
the input and the output. 
Stability That characteristic of a system defined by a natural response that decays to 
zero as time approaches infinity. 
Stall torque The torque produced at the armature when a motor's speed is reduced 
to zero under a condition of constant input voltage. 
State equations A set of n simultaneous, first-order differential equations with n 
variables, where the n variables to be solved are the state variables. 
State space The n-dimensional space whose axes are the state variables. 
State-space representation A mathematical model for a system that consists of 
simultaneous, first-order differential equations and an output equation. 
State-transition matrix The matrix that performs a transformation on x(0), taking x 
from the initial state, x(0), to the state x(t) at any time, t > 0. 
State variables The smallest set of linearly independent system variables 
such that the values of the members of the set at time to along with known 
forcing functions completely determine the value of all system variables for all 
t>tQ. 
State vector A vector whose elements are the state variables. 
Static error constants The collection of position constant, velocity constant, and 
acceleration constant. 
Steady-state error The difference between the input and the output of a system after 
the natural response has decayed to zero. 
Steady-state response See forced response. 
Subsystem A system that is a portion of a larger system. 
Summing junction A block diagram symbol that shows the algebraic summation of 
two or more signals. 
System type The number of pure integrations in the forward path of a unity 
feedback system. 
System variables Any variable that responds to an input or initial conditions in a 
system. 
Tachometer A voltage generator that yields a voltage output proportional to 
rotational input speed. 
Time constant The time for e~al to decay to 37% of its original value at t = 0. 
Time-domain representation See state-space representation. 

Glossary 
Torque-speed curve The plot that relates a motor's torque to its speed at a constant 
input voltage. 
Transducer A device that converts a signal from one form to another, for example 
from a mechanical displacement to an electrical voltage. 
Transfer function The ratio of the Laplace transform of the output of a system to the 
Laplace transform of the input. 
Transient response That part of the response curve due to the system and the way 
the system acquires or dissipates energy. In stable systems it is the part of the 
response plot prior to the steady-state response. 
Tustin transformation A bilinear transformation that converts transfer functions 
from continuous to sampled and vice versa. The important characteristic of the 
Tustin transformation is that both transfer functions yield the same output response 
at the sampling instants. 
Type See system type. 
Undamped response The step response of a second-order system that is character-
ized by a pure oscillation. 
Underdamped response The step response of a second-order system that is charac-
terized by overshoot. 
Velocity constant limsG(,s) 
5-»0 
z-transformation A transformation related to the Laplace transformation that is 
used for the representation, analysis, and design of sampled signals and systems. 
Zero-input response That part of the response that depends upon only the initial 
state vector and not the input. 
Zero-order sample-and-hold (z.o.h.) A device that yields a staircase approximation 
to the analog signal. 
Zeros (1) Those values of the Laplace transform variable, s, that cause the transfer 
function to become zero; and (2) any roots of factors of the numerator that are 
common to the characteristic equation in the denominator of the transfer function. 
Zero-state response That part of the response that depends upon only the input and 
not the initial state vector. 


to Selected Problems 
Chapter 1 
2 
/2 
8 
19. c. x(t) = - - e~4t ( - cos 3f + — sin 3/ 
20. b. *(*) 
Chapter 2 
3. 
7. 
8. 
16. 
1tf 
33. 
3r1 
43. 
b. x(t) 
Y(s) 
X(s) 
Sx 
a. 
V# 
b. 
^ 
Vi(s 
Us) 
m 
T(s) 
92(s) 
Ea(s) 
= -e~l + 9te~c + 5e"2f 
_15 
2f 
3 
18 
26 
10 
65 
53 + 452 + 65 + 8 
53 + 352 + 55 + 1 
f 1 1 ^ + 12^ + 18* = 
dr2 
dt 
) 
1 
) 
5 + 2 
') 
52+25 + 2 
+ / - : 
cos 3/ 
df 
) 
54 + 253 + 352 + 35 + 2 
3 
2052 +135 + 4 
1 
13052 + 4005 + 55 
0.0833 
s(s + 0.75) 
2 
1 • . 
-—sm3r 
65 
3/(0 
897 

898 
Answers to Selected Problems 
Chapter 3 
1. X = 
y=[0 
0 1] 
11 
3 
2 
3 
1 
3 
K 
+ 
2 
3 
1 
3 
1 
L3J 
Vi 
L 'V J 
Note: L\ is left-most inductor in Figure P3.1 i 
11. a. x = 
in the text. 
0 
1 
0 
0 
0 
0 
-13 
-5 
0 
0 
1 
0 
0 
1 
-1 
-5 
x + 
0 
0 
0 
LU 
r(t) 
c(f) = [10 8 0 
0]J 
14. a. Y(s) 
10 
R{s) 
s* + 5s2 + 2s + 3 
19. x = 
D eq 
J eq 
1 
KbN2 
0 
TW] 
JeqN2 
0 
0 
o J£ 
L LaNx 
La\ 
0>L 
la 
+ 
0 
0 
J. 
lLaJ 
y 
Chapter 4 
U**{t)=\ 
0 W ° 
1 -
0)L 
,-0.5/ COS /19 
1 
——/ - arctan 
2 
20. a. £ = 0.375; con = 4 rad/s; 7, = 2.67 s; 7> = 
23. a. 5 = -6.67+/9.88 
35. s = -5.79, -1.21 
36. a. s3 ~ 8s2 - lis + 8 = 0 b. s = 
40.y(f) = ! - | r 5 ' 
43. 
"p = 0.847 s; %OS = 28.06 
* « = 
9.11,0.534,-1.64 
1.0455e-°-20871' - 0.045545e-47913' 
0.21822<r°-20871f - 0.21822e~4-7913' 
-0.21822e-°-20871f + 0.21822e~4-7913' -0.045545e-a20871' + 1.0455g-4J913r 

x(t) = 
Answers to Selected Problems 
1.0455e-°-20871f - 0.045545<r4-7913' 1 
-0.21822e-°-20871< + 0.21822e"4-7913r 
y(t) = 0.60911e-°-20871f + 0.39089e-47913' 
73. D = 0.143 N-m-s/rad 
76. R = 912(1 
899 
Chapter 5 
f 
\ 
6 
q 
26. 
27. 
28. 
C{s) 
R(s) 
C{s) 
R(s) 
C(s) 
R{s) 
C(s) 
R(s) 
C{s) 
R{s) 
C(s) 
R(s) 
C(s) 
R(s) 
G3(G!G2 + 1) 
1 + Gitfi 
G1G2 + G3 
1 + G3H + GiG2H + G2G4 
GiG5 
1 4- G1G2 + G1G3G4G5 + G1G3G5G6G7 + G1G5G8 
G4G6 + G2G5G6 + G3G5G6 
1 + G6 + GiG2 + G1G3 + GiG2G6+ 
G1G3G6 + G4G6G7 + G2G5G6G7 + G3G5G6G7 
G1G2G3G4 
2 + G2G3G4 + 2G3G4 + 2G4 
GiG6G7(G2 + G3)(G4 + G5) 
1 - G6G7H3(G2 + G3){G4 + G5) - G6HX - G7H2 + 
GeGjHtfy 
s3 + l 
30. b. x = 
2s4 + s2 + 2s 
- 5 
1 
0 
0 - 5 
0 
0 
0 - 7 
y-
0
0
0
-
7 
-i * -^ -
x + 
' « 
37. x = 
0 
- 1 
0 
1 0 0 
0 1 0 
0 0 1 
1 - 1 0 
0. 
c=\-l 
1 0 0]x 
73. DL = 3560 N-m-s/rad 
x + 
r(t) 
Chapter 6 
1. 2 rhp, 3 lhp, 0 jco 
3. 3 rhp, 2 lhp, 0 jco 

Answers to Selected Problems 
4. 1 rhp, 0 lhp, 4 jeo 
5. 0 rhp, 2 lhp, 2 jco 
9. Unstable 
17. 1 rhp, 2 lhp, 4 /&> 
23. £ > I 
X < -1 
39. a. -4 < £ < 20.41; b. 1.36rad/s 
41. a. 0 < K < 19.69; b. K = 19.69; c * = ± /1.118, -4.5, -3.5 
42. - ? < £ < 0 
Chapter 7 
4. esteP(oo) = 0; eramp(oo) = 127.5; eparaboia(oo) = oo 
7. e(oo) = 0.9 
10. a. %OS = 14.01; b. Ts = 0.107 sec; 
c. esteP(oo) = 0; 
d. eramp(oo) = 0.075; e. eparaboia (oo) = oo 
13. a. Kp = -, Kv = 0, Ka = 0; b. e(oo) = 37.5, oo, oo, respectively; 
c. Type 0 
20. £ = 110,000 
27. p = 1, K = 1.16, a = 7.76, or $ = - 1 , K = 5.16, a = 1.74 
31. a. K = 831,744, a = 831.744 
35. Ki = 125,000, # 2 = 0.016 
41. a. Step: e(oo) = 1.098; ramp: e(oo) = oo 
Chapter 8 
16. Breakaway point = -2.333; asymptotes: aa— -5; /w-axis crossing = ± /7.35 
19. b. Asymptotes: aa = -~; 
c. K = 140.8; d. K = 13.12 
20. K = 9997; a = 7 
23. a. aa = --; 
b. s = -1.38, -3.62; c. 0 < K < 126; d. K = 10.3 
26. b. K = 9.4; c. Ts = 4.62 s, Tp = 1.86 s; d, 5 = -4.27; 
e. 0 < K < 60 
30, a = 9 
39. a. 0 < K < 4366; b. K = 827.2; c. K = 527.6 
42. a. £ = 170.1; b. iC = 16.95 
Chapter 9 
1. Gc(s) = : ^ ± 5 i 
K ~ 72.23 for both cases; KPo = 2.44; #PA, = oo; 
%OS0 = %OSN = 16.3; 
TS0 = TSN = 2.65 s 

Answers to Selected Problems 
901 
9. a. s = -2.5 + /5.67; b. Angle = -59.27°; 
c. 5 = -5.87 
d. K = 225.79; e. s = -11.59, -1.36 
10. a. s = -2.4 ± y'4.16; b. s = -6.06; 
c. # = 29.12; 
d. s = -1.263; 
f. Ka = 4.8 
14. a. Gc(5) = 
- - ¾ # = 5452; dominant poles = -4.13 ± /10.78 
w 
5 + 37.42' 
F 
y 
24. a. Kuc = 10; tfc = 9.95; 
b. KPuc = 1.25; 
KPc = 6.22; 
c. %OS M C = %OSc = 4.32; 
d. Uncompensated: exact second-order system, approximation OK; 
compensated: closed-loop pole at —0.3, closed-loop zero at —0.5, simulate 
e. Approach to final value longer than settling time of uncompensated system 
f n 
ts 
404.1(5 + 0.5)(^ + 4) 
. . . 
. 
f« G\ i r(5) = 
— 
7T7 
T-TTT 
^TT^TT yields approximately a 5 times 
L L C W 
(5 + 2)(5 + 4)(5 + 0.1)(5 + 28.36) y 
F F 
' 
improvement in speed. 
28. Poles = -0.747 + ; 1.237, -2.51 ; zeros-none 
Chapter 10 
10. System 1: 0 < K < 490.2; System 2: 0 < K < 1.4; System 3: 1 < K < oo 
(Answers are from exact frequency response) 
11. a. System 1: GM — -6.38 dB; ¢ ^ = —20.3° (Answers are from exact frequency 
response) 
15. c. G>BW = 2.29 rad/s 
23. System 2: Ts = 2.23 sec, Tp = 0.476 s, %05 = 42.62 (Answers are from exact 
frequency response) 
44. GM = 1.17 dB, &M = 6.01° (Answers are from exact frequency response) 
Chapter 11 
1. a. K = 2113 (Answer is from exact frequency response) 
2. a. K = 2365 (Answer is from exact frequency response) 
3. a. K = 575 (Answer is from exact frequency response) 
(Answer is from exact frequency response) 
2 1 . Gc{s) = (' + °ml' 
+ 2-16\K- 
25.189 
5 
(Answer is from exact frequency response) 
Chapter 12 
5 + 3 
1. d. For function i: T(s) = 
52 + (^2+8)5+(^,+16) 

Answers to Selected Problems 
, , - . . 
t. 
. « , * 
6.25 
27.5 
71.25 
. 
200^+75 + 25) 
3. b. For function i: G(s) = 
— -\ 
—, 
T(s) = -7-=-*—*—; 
-
w 
J 
5 + 10 ^ + 20 
w 
4^3 + as2 + fe + c 
where a = (25A:3 - 110Jfe2 + 285&i + 120) 
b = (750k3 - 2200A:2 + 2850&1 + 800) 
c = 5000fc3 
andC = [l 1 1]; B = [71.25 -27.5 6.25]T was used 
11. a. Uncontrollable; b. Controllable; c. Controllable 
14. K = [92.35 36.78 -7] for a characteristic polynomial of 
(s + 6)(52 + 85 + 45.78) = 53 + 1452 + 93.785 + 274.7 
23... X. = I -671.19 1472.4}T for a characteristic polynomial of s2 + 1445 + 14,400 
Chapter 13 
3. a. f(kT) = 229.5(0.4)* - 504(0.6)* + 275.5(0.8)* 
6.c.G(Z) = 0.395 
( Z + 0' 2 2 3 1> 
8. b. G{z) = 0.0517 
9. a. T(z) = 
z - 0.2231) {z2 + 0.1857z + 0.04979) 
z2 +2.2699^ + 0.2995 
(z-l)(z-0.2231)(z- 0.4065) 
G1(z)G2(z) 
l + G1(z)G2H(z) 
14.0<K< 
15.76 
17. K = 14.18 for 16.3% of overshoot; 0 < K < 109.28 for stability 
15. a. Kp = -, e*(oo) = -; 
Kv = 0, e*(oo) = oo; Ka = 0, e*(oo) = oo 

Credits 
Figure and Photo Credits 
Figures, photos, Case Studies, Examples, 
and Problems in Chapters 4,5,6,8,9,13, 
Appendix 
B, and rear endpapers: 
Adapted from Johnson, H., et al. 
Unmanned Free-Swimming Submersible 
(UFSS) System Description, NRL Mem-
orandum Report 4393 (Washington, 
D.C.: Naval Research Laboratory, 1980). 
MATLAB screen shots in Appendixes C 
and E were reprinted with permission 
from The MathWorks. 
Chapter 1 
1.3: (a): © Bettman/Corbis; (b): ART on 
FILE/© Corbis. 1.4: © Hank Morgan/ 
Rainbow/PNI. L5b: Pioneer Electronics 
(USA), Inc. 1.7: © Donald Swartz/ 
iStockphoto. 1.8: © 
Peter Menzel. 
P1.3: Adapted from Ayers, J. Taking 
the Mystery Out of Winder Controls, 
Motion System Design, April 1988. Pen-
ton Media, Inc. P1.5: Jenkins, H. E.; 
Kurfess, T. R.; and Ludwick, S. J. Deter-
mination of a Dynamic Grinding Model, 
Journal of Dynamic Systems, Measure-
ments and Control, vol. 119, June 1997, p. 
290. 1997 ASME. Reprinted with per-
mission of ASME. P1.6: Vaughan, N. D., 
and Gamble, J. B. The Modeling and 
Simulation of a Proportional Solenoid 
Valve, Journal of Dynamic 
Systems, 
Measurements and Control, vol. 118, 
March 1996, p. 121. 1996 ASME. 
Reprinted with permission of ASME. 
P1.7(a), (b), (c): Reprinted figure with 
permission from Bechhofer, J., Feedback 
for Physicists: A Tutuorial Essay on Con-
trol, Reviews of Modern Physics, pp. 77, 
783, 2005. Copyright (2007) by the 
American Physical Society. P1.8: D. A. 
Weinstein/Custom Medical Stock Photo. 
Pl.ll: O'Connor, D. N; Eppinger, S. D.; 
Seering, W P.; and Wormly, D. N. Active 
Control of a High-Speed Pantograph, 
Journal of Dynamic Systems, Measure-
ments and Control, vol. 119, March 1997, 
p. 2. 1997 ASME. Reprinted with per-
mission of ASME. P1.12, P1.13: Mark 
Looper, www.Altfuels.org.; P1.14: Rob-
ert Bosch GmbH, Bosch 
Automotive 
Handbook, 7th ed., Wiley UK. 
Chapter 2 
2.34: © Debra Lex. 2.51: Adapted from 
Milsum, J. H. Biological Control Systems 
Analysis 
(New York: McGraw-Hill, 
1966), p. 182. © 1966 McGraw-Hill, 
Inc. Used with permission of the pub-
lisher. P2.36: Lin Jung-Shan, Kanellako-
poulos Ioannis. Nonlinear Design of 
Active Suspensions, IEEE Control Sys-
tems Magazine, vol. 17, no. 3. June 1997, 
pp. 45-49. Fig. 1, p. 46. P2.37: Marttinen 
A., Virkkunen J., Salminen R. T. Control 
Study with Pilot Crane, IEEE Trans, on 
Education, vol. 33, No. 3, August 1990. 
Fig. 2, p. 300. P2.38: Wang J. Z., Tie B., 
Welkowitz W, Semmlow J. L., Kostis 
J. B. Modeling Sound Generation in Ste-
nosed Coronary Arteries, IEEE Trans, on 
Biomedical Engineering, vol. 37, no. 11, 
November 1990. P2.39(a): From O'Con-
nor, D. N; Eppinger, S. D.; Seering, W P.; 
and Wormly, D. N. Active Control of a 
High-Speed Pantograph, Journal of Dy-
namic Systems, Measurements and Con-
trol, vol. 119, March 1997, p. 2. 1997 
ASME. Reprinted with permission of 
ASME. P2.39(b): Adapted from O'Con-
nor, D. N.; Eppinger, S. D.; Seering, W. P.; 
and Wormly, D. N. Active Control of a 
High-Speed Pantograph, Journal of Dy-
namic Systems, Measurement and Con-
trol, vol. 119, March 1997, p. 3. 1997 
ASME. Reprinted with permission of 
ASME. P2.40: Craig, I. K., Xia, X., and 
Venter, J. W Introducing HIV/AIDS Ed-
ucation into the Electrical Engineering 
Curriculum at the University of Pretoria. 
IEEE Trans, on Education, vol. 47, no. 1, 
February 2004, pp. 65-73. P2.41: Robert 
Bosch GmbH, Bosch Automotive Hand-
book, 7th ed., Wiley UK. 
Chapter 3 
3.13: Bruce Frisch/S.S./Photo Research-
ers. P3.14(a), (b): Hong, X; Tan, X.; Pine-
tte, B.; Weiss, R.; and Riseman, E. M. 
Image-Based Homing, IEEE 
Control 
Systems, Feb. 1992, pp. 38-45. © 1992 
IEEE. P3.1S(a), (b): Adapted from 
Cavallo, A.; De Maria, G; and Verde, 
L. Robust Flight Control Systems: A 
Parameter Space Design, Journal of 
Guidance, Control, and Dynamics, vol. 
15, no. 5, September-October, 1992, 
pp. 1210-1211. 1992 AIAA. Reprinted 
by permission of the American Institute 
of Aeronautics and Astronautics, Inc. 
P3.16: Adapted from Chiu, D. K., and 
Lee, S. Design and Experimentation of a 
Jump Impact Controller, IEEE Control 
Systems, June 1997, Fig. 1, p. 99. 1997 
IEEE. 
Reprinted 
with 
permission. 
P3.17: Liceaga-Castro, E., vander Molen 
G. M. Submarine H°° Depth Control 
Under Wave Disturbances, IEEE Trans. 
on Control Systems Technology, vol. 3, 
no. 3, 1995. Fig. 1, p. 339. P3.18: Li, S., 
Jarvis, A. J., Leedal, D. T, Are Response 
Function Representations of the Global 
Carbon Cycle Ever Interpretable?, Tel-
lus vol. 61B, Wiley UK. P3.19: Preitl, Z., 
Bauer, P., Bokor, J., A Simple Control 
Solution for Traction Motor Used in 
Hybrid Vehicles, 4th International Sym-
posium on Applied Computational in-
telligence and Informantics, 2007. 4th 
International Symposium on Applied 
Computational Intelligence and Infor-
matics, IEEE, 2007, Fig. 8, p. 2. P3.31(c): 
(table) Craig, I. K., Xia, X., and Venter, 
J. W Introducing HIV/AIDS Education 
903 

904 
Credits 
into the Electrical Engineering Cur-
riculum at the University of Pretoria. 
IEEE Trans, on Education, vol. 47, no. 1, 
February 2004, pp. 65-73. Table II, p. 67. 
Chapter 4 
422: Yoshikazu Tsuno/AFP/Getty Im-
ages, Inc. 4.27: Adapted from Dorf, R. 
C. Introduction to Electric Circuits, 2nd 
ed. (New York: John Wiley & Sons, 1989, 
1993), p. 583. © 1989,1993 John Wiley & 
Sons. Reprinted by permission of the 
publisher. 4.33: Courtesy of Naval Re-
search Laboratory. P4.ll: Courtesy of 
Pacific Robotics, Inc. P4.12: Borovic B., 
Liu A. Q., Popa D., Lewis F. L. Open-loop 
versus closed-loop control of 
MEMS 
devices: choices and issues. J. Micromech. 
Microeng. vol. 15, 2005. Fig. 4, p. 1919. 
P4.14: DiBona G. F. Physiology in Per-
spective: The Wisdom of the Body. Neural 
Control of the Kidney, Am. J. Physiol. 
Regul. Integr. Comp. Physiol, vol. 289, 
2005. Fig. 6, p. R639. Used with permis-
sion. P4.24: From Manring, N. D., and 
Johnson, R. E. Modeling and Designing 
a Variable Displacement Open-Loop 
Pump, Journal of Dynamic Systems, Mea-
surement and Control, vol. 118, June 1996, 
p. 268.1996 ASME. Reprinted with per-
mission of ASME. 
Chapter 5 
5.1: NASA-Houston. 533: © Rob Cata-
nach, Woods Hole Oceanographic Insti-
tution. P532: Tanis, D. Space Shuttle 
GN&C Operations Manual (Downey, 
CA: Rockwell International), August 
1988. P535(a): Courtesy 
of 
Hank 
Morgan/Rainbow/ PNI. P5.36(a): Bailey, 
F. N; Cockburn, J. C; and Dee, A. Robust 
Control for High-Performance Materials 
Testing, IEEE Control Systems, April 
1992, p. 63. © 1992 IEEE. P5.38: Lepschy 
A. M., Mian G A., Viaro U. Feedback 
Control in Ancient Water and Mechani-
cal Clocks, IEEE Trans, on Education, 
vol. 35, 1992. Figs. 1 and 2, p. 4. P5.39: 
Ben-Dov D., Salcudean S. E. A Force-
Controlled Pneumatic Actuator, IEEE 
Trans, on Robotics and 
Automation, 
vol. 11, 1995. Fig. 6, p. 909. P5.43: Lin 
Jung-Shan, 
Kanellakopoulos 
Ioannis. 
Nonlinear Design of Active Suspensions, 
IEEE Control Systems Magazine, vol. 17, 
no. 3. June 1997, pp. 45-49. Fig. 3, p. 48. 
P5.44: de Vlugt, Schouten A. G, van der 
Helm F. C. T. Adaptation of reflexive 
feedback during arm posture to different 
environments, Biol. Cybern. vol. 87,2002. 
Fig. Al, p. 24. by P5.45: Karkoub, M., 
Her, M-G, Chen, J.M., Design and Con-
trol of a Haptic Interactive Motion, 
Robotica vol. 28, 2008. Copyright © 
2010 
Cambridge 
University 
Press. 
Reprinted with permission. P5.46: Piccin, 
O., Barbe, L., Bayle, B., de Mathelin, M., 
Gangi, A., A Force Teleoperated Needle 
Insertion Device Percutaneous Proce-
dures, International Journal of Robotics 
Research, vol. 28, 2009. Reprinted with 
permission 
from 
Sage 
Publications. 
P5.47: Lee, S.R., Ko, S., Dehbonei, H., 
Jeon, C.H., Kwon, O.S., Operational 
Characteristics of PV/Diesel Hybrid Dis-
tributed Generation System Using Dual 
Voltage Source Inverter for Weak Grid, 
ISIS 2007 Proceedings, 8th Symposium on 
Advanced Int. Sys. 2007. P5.48: Kong, E, 
de Keyser, R., Identification and Control 
of the Mold Level in a Continuous Cast-
ing Machine, 2nd IEEE Conference on 
Control Applications. Vancouver, B.C., 
1993. Fig. 1, p. 53, pp. 53-58. 
Chapter 6 
6.9: Courtesy of Woods Hole Oceano-
graphic Institution. 6.11: Courtesy of 
FANUC 
Robotics 
North 
America, 
Inc. P6.14(a): Courtesy of Kazuhiko 
Kawamura, 
Vanderbilt 
University. 
P6.16: From Rober, S. X; Shin, Y. C; 
and Nwokah, O. D. I. A Digital Robust 
Controller for Cutting Force Control 
in the End Milling Process, Journal of 
Dynamic 
Systems, Measurement 
and 
Control, vol. 119, June 1997, p. 147. 
1997 ASME. Reprinted with permission 
of ASME. P6.17(a): © Japan Air Lines/ 
Photo Researchers. P6.17(b): Adapted 
from Bittar, A., and Sales, R. M. H2 and 
Hoo Control for MagLev Vehicles, IEEE 
Control Systems, vol. 18, no. 4, August 
1998, Equations 7, 8, and Table 2 on 
pp. 20-21. © 1998 IEEE. Reprinted 
with permission. 
Chapter 7 
7.9: Chuck O'Rear/Westlight/Corbis Im-
ages. 7.23(a): Isailovic, J., Videodisc and 
Optical Memory Technologies, © 1985, 
p. 77. Reprinted by permission of Pear-
son Education, Inc., Upper Saddle 
River, N.J. P7.22: Lam C. S., Wong M. 
C, Han Y D. Stability Study on Dynamic 
Voltage Restorer (DVR) Power Elec-
tronics Systems and Applications 2004, 
Proceedings First International Confer-
ence on Power Electronics 2004. Fig. 7, 
p. 68. P7.28(a), (c): From Kumar, R. R.; 
Cooper, P. A.; and Lim, T. W Sensitivity 
of Space Station Alpha Joint Robust 
Controller to Structural Modal Parame-
ter Variations, Journal of 
Guidance, 
Control, and Dynamics, vol. 15, no. 6, 
Nov/Dec 1992, pp. 1427-1428. © 1992 
AIAA. Reprinted by permission of the 
American Institute of Aeronautics and 
Astronautics, Inc. P7.29: Yin, G, Chen, 
N, Li, P., Improving Handling Stability 
Performance of Four-Wheel Steering 
Vehicle via |x-Synthesis Robust Control, 
IEEE Transactions on Vehicular Tech-
nology vol. 56, no. 5,2007. Fig. 2, p. 2434. 
pp. 2432-2439 © 2007 IEEE. Reprinted 
with permission. P7.32: Hess, R. A.; 
Malsbury, T; and Atencio, A., Jr. Flight 
Simulator Fidelity Assessment in a 
Rotorcraft Lateral Translation Maneu-
ver, Journal of Guidance, Control, and 
Dynamics, vol. 16, no. 1 Jan/Feb 1993, p. 
80. © 1992 AIAA. Reprinted by permis-
sion of the American Institute of Aero-
nautics and Astronautics, Inc. P733(a), 
(b): Ohnishi, K.; Shibata, M.; and Mura-
kami, T. Motion Control for Advanced 
Mechatronics, IEEE/ASME 
Transac-
tions on Mechatronics, vol. 1, no. 1, 
March 1996, (a): Fig. 14, p. 62, (b): Fig. 
16, p. 62. © 1996 IEEE. Reprinted with 
permission. 
Chapter 8 
8.4(a): Largeformat 4x5/iStockphoto. 
P8.13: Tony Dejak/©AP/Wide World 
Photos. North America, Inc. P8.13(b): 
Adapted from Hardy, H. L. Multi-
Loop 
Servo 
Controls 
Programmed 
Robot, Instruments and Control Systems, 
June 1967, p. 105. P8.14: GNC FSSR 
FC Ascent, vol. 1, June 30,1985 (Downey, 

Credits 
905 
CA: Rockwell International). P8.15(a): 
Bruner, A. M.; Belvin, W. K.; Horta, 
L. G.; and Juang, J. Active Vibration 
Absorber for the CSI Evolutionary 
Model: Design and Experimental Re-
sults, Journal of Guidance, Control, and 
Dynamics, vol. 15, no. 5, Sept/Oct 1992, 
p. 1254. © 1992 AIAA. Reprinted by 
permission of the American Institute of 
Aeronautics and Astronautics, Inc. P8.17: 
Karlsson, P., and Svensson, J. DC Bus 
Voltage Control for a Distributed Power 
System, IEEE Trans. Power Electronics, 
vol. 18, no. 6, 2003. Fig. 4, p. 1406. pp. 
1405-1412. (c) 2003 IEEE. P8.20: Cho, 
D., and Hedrick, J. K. Pneumatic Actua-
tors for Vehicle Active Suspension Appli-
cations, ASME 
Journal of 
Dynamic 
Systems, 
Measurement 
and 
Control, 
March 1985, p. 68, Fig. 4. Reprinted 
with permission of ASME. P8.23(a), 
(b): Adapted from Annaswamy, A. M., 
and Ghonien, A. F. Active Control in 
Combustion Systems, IEEE Control Sys-
tems, December 1995, p. 50,51, and 59. © 
1995 IEEE. Reprinted with permission. 
P8.24(a): © Hammondovi/iStockphoto. 
P8.24(b), (c): Adapted from Anderson, 
C G; Richon, J.-B.; and Campbell, T. J. 
An Aerodynamic Moment-Controlled 
Surface for Gust Load Alleviation on 
Wind Turbine Rotors, IEEE Transactions 
on Control System Technology, vol. 6, no. 
5, September 1998, pp. 577-595. © 1998 
IEEE. P8.25: Reproduced by permission 
of M. Spong et al., Robot Modeling and 
Control. John Wiley & Sons. Hoboken, 
NJ, 2006. Fig. 6.20, p. 221. Reprinted with 
permission of John Wiley & Sons, Inc. 
P8.26: Reproduced by permission of 
M. Spong et al., Robot Modeling and 
Control. John Wiley & Sons. Hoboken, 
NJ, 2006. Fig 6.22, pg 223. 
Chapter 9 
9.46: Photo by Mark E. Van Dusen. 
P9.5: Romagnoli, J. A., and Palazoglu, 
A. Introduction to Process Control, CRC 
Press, Boca Raton, 2006. p. 44, Fig. 3.4. 
P9.6: Smith, C. A. Automated Continuous 
Process Control. John Wiley & Sons, New 
York,NY,2002.p.l28,Fig.6-l.l.P9.14(a): 
Cho, D; Kato, Y; and Spilman, D. Sliding 
Mode and 
Classical 
Controllers in 
Magnetic Levitation Systems, IEEE Con-
trol Systems,Feb. 1993,p.43,Fig. 1. © 1993 
IEEE. Reprinted with permission. 
Chapter 10 
10.1: Courtesy National Instruments 
Corporation © 2010 P10.14: © Michael 
Rosenfield/ Science Faction/©Corbis. 
P10.15(a): © Stephen Sweet/iStock-
photo. P10.17: Van der Zalm, G, Huis-
man, G, Steinbuch, M., Veldpaus, F, 
Frequency Doman Approach for the 
Design of Heavy-Duty Vehicle Speed 
Controllers, International Journal of 
Heavy Vehicle Systems vol 15, no. 1. 
Chapter 11 
11.10(a), 
(b): Katharina 
Bosse/laif/ 
Redux 
Pictures. P11.3(a): Rebecca 
Cook/Rueters/© Corbis. 
Chapter 12 
12.1: Robin Nelson/Zuma Press. P12.6: 
Tadeo F, Perez, Loepez O., and Alvarez 
T Control of Neutralization Processes 
by Robust Loopsharing. IEEE Trans. 
on Cont. Syst. Tech., vol. 8, no. 2, 2000. 
Fig. 2, p. 239. 
Chapter 13 
13.12: © David J. Green—Industry/ 
Alamy 13.28: Adapted from Chassaing, 
R. Digital Signal Processing (New York: 
John Wiley & Sons, Inc, 1999), p. 137. © 
1999 John Wiley & Sons, Inc. Reprinted 
with permission of John Wiley & Sons, 
Inc. 13,29: Adapted from Chassaing, R. 
Digital Signal Processing (New York: 
John Wiley & Sons, Inc., 1999), p. 137. 
© 
1999 John Wiley & Sons, Inc. 
Reprinted with permission of John 
Wiley & Sons, Inc. 13.36: Adapted 
from Chassaing, R. Digital Signal Proc-
essing (New York: John Wiley & Sons, 
Inc, 1999), p. 137. © 1999 John Wiley & 
Sons, Inc. Reprinted with permission of 
John Wiley & Sons, Inc. 
Figure Caption Sources 
Back Cover: cover photo caption from 
Dennis 
Hong/Virginia 
Polytechnic 
Institute. 1.3(b): The World of Otis, 
1991, p. 2, and Tell Me About Eleva-
tors, 1991, pp. 20-25, United Technol-
ogies Otis Elevator Company. © 1991 
Otis Elevator Company. 1.8: Overbye, 
D. The Big Ear, OMNI, Dec. 1990, pp. 
41^8. 5.33: Ballard, R. D. The Discov-
ery of the Titanic (New York: Warner 
Books, Inc., 1987). 6.9: Ballard, R. D. 
The Riddle of the Lusitania, National 
Geographic, April 1994, pp. 68-85. 6.11: 
FANTJC Robotics North America, Inc., 
7.9: Bylinski, G. Silicon Valley High 
Tech: Window to the Future (Hong 
Kong: 
Intercontinental 
Publishing 
Corp., Ltd., 1985). 10.1: National Instru-
ments Corporation 
Trademarks 
AMTRAK is a registered trademark of 
National Railroad Passenger Corpora-
tion. Adobe and Acrobat are trade-
marks of Adobe Systems, Inc. which 
may be registered in some jurisdictions. 
FANTJC is a registered trademark of 
FANUC, Ltd. Microsoft, Visual Basic, 
and PowerPoint are registered trade-
marks of Microsoft Corporation. Quick-
Basic is a trademark of 
Microsoft 
Corporation. MATLAB and SIMU-
LINK are registered trademarks of The 
MathWorks, Inc. The Control System 
Toolbox, LTI Viewer, Root Locus Design 
GUI, Symbolic Math Toolbox, and Math-
Works are trademarks of the MathWorks, 
Inc. Intelligent Soft-Arm Control (ISAC) 
is a trademark of the Intelligent Robotics 
Lab, Vanderbilt University. HelpMate is 
a trade-mark of HelpMate Robotics, Inc. 
Lab VIEW is a registered trademark of 
National Instruments Corporation. Seg-
way is a registered trademark of Segway, 
Inc. in the United States and/or other 
countries. Chevrolet Volt is a trademark 
of General Motors LLC. Virtual plant 
simulations pictured and referred to 
herein are trademarks or registered 
trademarks of Quanser Inc. and/or its 
affiliates. © 2010 Quanser Inc. All rights 
reserved. Quanser virtual plant simula-
tions pictured and referred to herein may 
be subject to change without notice. 


Index 
Abscissa of convergence, 35n 
Absorption, 146-148 
Acceleration constant, 595 
Achouayb, K., 115 
Ackerman's formula, 678 
Acoustic waves, 444 
Active-circuit realization, of compensation, 504 
Active queue management (AQM) algorithm, 
383 
Active suspension system, 291,379,443 
Active vibration absorber, 440 
Actuating signal, 9 
Actuator block diagram, 290 
Admittance, 54 
AFTI/F-16 aircraft 
attack control system, 718 
bearing angle control, 527 
Aggarwal, J. K., 115 
AIDS. See HIV/AIDS 
Aircraft attitude, 24 
Aircraft longitudinal dynamics, 153 
Aircraft roll control system, 658 
Alertness monitoring, 27 
Alvarez, X, 721 
Alvin, 272 
Amplifier saturation, 88 
load angular velocity response and, 197 
Amplifier saturation simulation, with Lab VIEW program, 
878-880 
Amplifiers 
operational, 58-61 
transfer functions and, 94 
Amplitudes, 164 
AMTRAK train active suspension system, 443 
Anagnost, J. J., 337 
Analogs 
explanation of, 84-85 
parallel, 86-87 
series, 85-86 
Analog-to-digital control conversion, 726-727 
antenna azimuth for, 724 
steps to, 727 
Analysis 
of control systems, 10-15,18-19 
via input substitution, 366-367 
Anderson, C. G., 447,452 
Anesthesia regulation, 26,221 
Angles of departure/arrival 
from complex pole, 409 
in root locus sketching, 407-409 
Angular displacement, in lossless gears, 75 
Angular velocity, 82 
Annaswamy, A. M., 445,452 
Antenna azimuth, 12 
analog- to-digital control conversion for, 724 
block diagram for, 18 
position control system, 13-15,208 
Antenna azimuth position control, state-space design for, 708 
Antenna control, 94 
cascade compensation and, 650-651 
closed-loop response design for, 272-276 
controller/observer design and, 704-709 
digital cascade compensator design and, 767-769 
gain design and, 650-651 
lag-lead compensation and, 508-511 
open-loop response and, 207-208 
root locus for, 426 
stability design/transient performance and, 606-607 
stability design via gain, 323-325 
state-space representation and, 144 
steady-state errors and, 368-371 
transient design via gain and, 426-427,765-767 
Aquifer system model, 147 
Aquifers, 147-148 
Aragula, S., 223 
Arc welding robot, 439 
Armature, 80 
Armature circuit, 16,80 
907 

908 
Index 
Armature resistance, 81 
Armature voltage, 80 
torque-speed curve with, 82 
Artificial heart, open-loop transfer function, 223 
Ashkenas, I., 233 
Assembly-line robots, steady-state errors and, 354 
Astrom, K., 299,452,616,623,759,780 
Asymptotes 
break frequency, 542 
high-frequency, 542 
low-frequency, 542 
root locus sketching with, 400-402 
Asymptotic approximations, 540-559 
Atencio, A., Jr., 386 
Atracurium, 221 
Automated guided carts, for Chevrolet Volt electric vehicles, 
657 
Automatic generation control (AGC), 524 
Automobile guidance system, 380 
Ayers, J., 25,31 
Back electromotive force, 80 
Backlash, 74,88 
Backlash effect, on load angular displacement response, 199 
Bagchi, S., 337,623 
Bahill,A.T.,31 
Bailey, F. R, 289,299 
Ball-drop experiment, 155 
Ballard, R. D., 289,336 
Bandwidth, 581 
Baratta, R. V, 234 
Barkana, I., 377,386,661 
Barlow, J. B., 532,721 
Barrows, B., 299 
Bathtub water level, 25 
Bechhoefer, X, 27,31 
Behavior at infinity, root locus sketching and, 399-402 
Bell Telephone Laboratories, 5 
Belvin,W.K.,452 
Ben-Dov, D., 290,299 
Bennett, S., 4n, 31 
Benningfield, L. M., 116 
Bessemer, Henry, 5 
Bicycle dynamics, 295 
Bilinear transformations, in digital control systems, 746-747 
Biological system, 95-97 
Bittanti, S., 525,531,616,623,775,780 
Bittar, A., 333,337 
Black Hawk (UH-60A) helicopter, 382 
Block diagram(s), 17-18 
of multiple subsystems, 236-237 
Block diagram reduction, 18 
digital control systems and, 739-742 
by moving blocks, 243-245 
of sampled-data systems, 740-741 
via familiar forms, 242-243 
Block diagram window, in Lab VIEW program, 
862-868 
Block parameters, in MATLAB Simulink program, 843-845 
Blood vessel blockages, 108 
Bode, H.W., 5 
Bode plots 
of (s+a), 542 
for G(s) = (s+a), 541-544 
for G(s) = 1/s, 545-546 
for G(s) = l/(s2 + 2 ^ 
+ &>2T|), 552-556 
for gain adjustment, 628 
gain margin/phase margin from, 579 
for G(s) = s, 545 
for G(s) = s2 + 2£<o^s +w2-n, 549-550 
for lead compensation, 639 
range of gain for stability via, 577-578 
for ratio of first-order factors, 546-549,556-559 
for ratio of second-order factors, 550-552,556-559 
static error constants from, 595-596 
transfer function from, 603-605 
Bona, B. E., 160,233,300,337,722 
Bondia, X, 160,722 
Borovic, B., 221,232 
Bottom-up design, 22 
Bounded input, 302 
Bounded-input bounded-output (BIBO), 302-303 
Boutayeb,A., 115 
Boyd, M., 780 
Branches, root locus sketching and, 397 
Breakaway points 
explanation of, 402-404,412 
using differential calculus to find, 404 
without differentiation, 405-406 
Break frequency, 542 
Break-in points 
explanation of, 402^04,412 
using differential calculus to find, 404 
without differentiation, 405-406 
Bruner, A. M., 440,452 
Budak, A., 531 
Butterworth polynomial, 331 
Cai, Y., 386,453,623 
Campbell, T. X, 452 
Cancellation, pole-zero, 195 
Cannon, R.H., Jr., 31,115 
Canonical form 
controller, 260-262 
Jordan,260 
observer, 262-263 
Capacitors, 130 
Carlson, L. E., 115,159 
Cascade compensation 
antenna control and, 650-651 

Index 
909 
in digital control systems, 759 
steady-state error design via, 626 
steady-state errors via, 459-469 
transient response improvement via, 469-481 
Cascade compensation via s-plane, digital control systems 
and, 758-762 
Cascade compensators, 494 
Cascaded interconnections, 34 
Cascaded subsystems, 238 
Cascaded systems, load in, 238 
Cascade form 
of multiple subsystems, 237-239 
of state space, 257-259 
Cascade PI controller, robotic manipulator with, 447 
Catenary, pantograph and, 110 
Cavallo, A., 153,159,289,299,452 
Cereijo, M. R., 159 
Characterizing response, from damping ratio, 176 
Charge-coupled device, in digital camera, 617-618 
Chassaing, R., 763n, 780 
Chebyshev, P.L., 5 
Chemical process, temperature control system, 525 
Chesmond, C. J., 380,386 
Chetouani, A., 115 
Chevrolet Volt electric vehicles, automated guided carts for, 
657 
Chignola, R., 109,115 
Chiu, D. K., 153,159 
Cho, D., 153,452,531,715,721 
Circuit, transformed, 49 
Classical technique, 118. See also Frequency-domain 
technique 
Cleveland, J. P., 233 
Clifford, William Kingdon, 5 
Closed-loop frequency responses, closed-loop transient 
responses and, 580-583 
Closed-loop/open-loop frequency responses, relation 
between, 583-588 
Closed-loop polar plot, 587n 
Closed-loop poles, 303-305,388-389,392,415,418, 
424,461 
Closed-loop response design, for antenna control, 
272-276 
Closed-loop step response, with Lab VIEW program, 869-871 
Closed-loop system, 9,162 
block diagram of, 8 
error, 342 
for ideal integral compensator, 461 
root sensitivity of, 425 
Closed-loop transfer function, sensitivity of, 362-363 
Closed-loop transient responses 
closed-loop frequency responses and, 580-583 
open-loop frequency responses and, 589-592 
Closed-loop vehicle response, for train stopping, 441 
Cochin,!., 115,159 
Cochran, J. E., 332,337,661 
Cockburn, J. C, 288,299 
Coefficient of viscous friction, 62,70 
Combustor, with microphone/loudspeaker, 445 
Companion matrices, 262 
Compensated system, root locus for, 462 
Compensating zero, via rate feedback, 497-500 
Compensation 
active-circuit realization of, 504 
physical realization of, 503-508 
techniques, 458 
Compensator, 9 
passive realization of, 506 
root locus with, 460 
root locus without, 460 
Completely controllable, 674n 
Completely observable, 691 n 
Complex circuits 
via mesh analysis, 51-52 
via nodal analysis, 54-56 
Complex numbers, vector representation of, 389-391 
Complex pole, angle of departure/arrival from, 409 
Component design, transient response through, 
185-186 
Component responses, of three-pole system, 188 
Computer-aided design, 20-21 
Computer-controlled systems, 9-10 
Computer hard disk drive, 10 
Computer simulation, of step responses, 429 
Conductance, 54n 
Conservation, flow for, 148 
Constant-acceleration inputs, 341 
Constant command, 18 
Constant M circles, 583-584,586 
Constant N circles, 583,585,586 
Constant-velocity inputs, 341 
Continuous casting, in steel production, 294 
Continuous stirred tank reactor, 715 
Contours, 560-563 
Control design palette, in LabVIEW program, 883-885 
Controllability, 672-676 
by inspection, 673-674 
via controllability matrix, 675-676 
Controllability matrix, 674 
controllability via, 675-676 
Controlled variable, 34 
Controller canonical form, of state space, 260-262 
Controller design, 665-672 
alternative approaches to, 676-682 
by matching coefficients, 677 
for phase-variable form, 669-671 
by transformation, 679-681 
Controller/observer design, antenna control and, 
704-709 
Control system problem, for root locus, 388-389 

910 
Index 
Control systems. See also Feedback control systems; specific 
control systems 
advantages, 3-4 
analysis of, 10-15,18-19 
components, 2 
configurations of, 7-10 
derivative, 459 
description of, 2 
design, 18-19 
digital computers in, 6 
engineering, 21-22 
history of, 4-7 
integral, 459 
prevalence of, 23 
proportional, 459 
schematic for, 16-17 
test waveforms, 19 
theory, 5 
twentieth-century developments, 5 
Control systems analysis, with Lab VIEW program, 858-859 
Control System Toolbox, 157,228,248,297,335,384, 
450-451,530-531,621,660,778-779 
Convolution integral, 203 
Cook, P. A., 115 
Cooper, P. A., 386 
Coordinate measuring machine, 525-526 
Coulomb friction, 65n 
Craig, I. K., 31,110,115,156,159,228,232,299,337,383,386, 
452,529,531,621,623,659,662,718,721,777,780 
Cramer's rule, 53 
Crane loading, 107 
Crawshaw, L. I., 32 
Critically damped response, 171-172 
Critical points, root locus sketching and, 412^414 
Crosslapper, 224 
Cubitt, William, 5 
Cutaneous rabbit, 28 
Cutting force control system, 332 
D 'Alembert's principle, 17 
D'Ambrosia, R. D., 234 
Damped frequency of oscillation, 182 
Damper, mass and, 125 
Damping, 81 
Damping frequency, exponential, 182 
Damping ratio 
characterizing response from, 176 
definition of, 174 
natural frequency and, 208 
v. percent overshoot, 180 
from phase margin, 589-591 
v. rise time, 182 
of second-order system, 173-175 
second-order underdamped responses for, 178 
Dancer, 25 
Davis, S. A., 115 
D'Azzo, J. X, 31,337,386,531,662,721 
Dc-dc converter, 225 
Dc motor, 79 
driving rotational mechanical load, 81 
load and, 83-84 
Dc servomotor, load and, 152 
Deadzone effect, on load angular displacement response, 198 
Decay frequency, exponential, 174 
de Araujo, F. M., 116,453,623 
Decoupled equations, 292 
Decoupled variables, 125 
Dee, A., 288,299 
Deflection response, of fluid-filled catheter, 222 
Degrees of freedom, 65 
in rotational systems, 70 
De Keyser, R., 299 
Dell'Orto, R, 531,623,780 
De Maria, G., 153,159,299,452 
Dependent source, electrical network with, 128-130 
Derivative compensation, ideal, 470-477 
Derivative control systems, 459 
Design 
computer-aided, 20-21 
with LabVIEW program, 858-859 
objectives, 10-15 
theory, 5 
Design process 
flowchart of, 15 
steps of, 15-20 
Design via frequency response, with MATLAB program, 818-
823 
Design via root locus, with MATLAB, 808-813 
Design via state space, with MATLAB program, 
823-826 
Desoer, C. A., 337 
de Vlugt, E., 292,299 
Destination shaft, 76 
Diabetes population model, 105 
Diagonalizing 
system in state space, 270-271 
system matrix, 268 
DiBona, G. E, 222,232 
Di Carlo, A., 531,623,780 
Differential calculus, 404 
Diesel power distribution system, hybrid solar cell and, 294 
Differential equation 
coefficients, 5 
Laplace transform solution of, 39-40 
linearization of, 91-92 
single loop via, 48-49 
transfer function for, 45 
Digital camera, charge-coupled device in, 617-618 
Digital cascade compensator design, 760-761 
antenna control and, 767-769 

Index 
911 
Digital compensator, implementing, 762-765 
Digital computers 
advantages, 725-726 
in control systems, 6 
modeling, 727-730 
placement within loop, 725 
Digital control systems, 723-725 
bilinear transformations in, 746-747 
block diagram reduction and, 739-742 
cascade compensation in, 759 
cascade compensation via s-plane and, 758-762 
digital system stability in, 742-749 
gain design on z-plane and, 755-758 
with MATLAB program, 827-833 
with MATLAB Simulink program, 852-855 
stability design via root locus in, 755-756 
steady-state errors and, 749-753 
transfer functions of, 735-739 
transient response design via gain adjustment and, 756-757 
transient response on z-plane, 753-755 
z-transform and, 730-735 
Digital feedback control system 
steady-state errors for, 750 
unit parabolic input for, 751 
unit ramp input for, 751 
unit step input for, 750-751 
Digital numerical control, lathe with, 742 
Digital system simulation, with LabVIEW program, 881-885 
Digital system stability 
digital control systems in, 742-749 
via Routh-Hurwitz, 748 
via 5-plane, 747-748 
via z-plane, 742-743 
Digital-to-analog conversion, 729 
Digital versatile disc players, 525 
Dirac delta functions, 729 
Disk drive arm, 447 
Disk drive position control system, 442 
Distributed parameter, 71n 
Disturbances, steady-state errors for, 356-358 
DoebelimE. 0.,31,115 
Dominant-pole argument, 223 
Dorf, R. C, 31,115,193,232,337,453,531,623,662 
Drebbel, Cornelis, 4 
Driving simulator, 642 
DVD player, 7 
Drug absorption, 146-148 
D'Souza,A.F.,26,31,115 
Duals, 263 
Dynamic voltage restorer (DVR), 378,441 
Dynamometer, 26 
Dynamometer test, 81,82 
Economics, as design consideration, 12 
ECU. See Electronic control unit 
Edelstein-Keshet, L , 108,109,115 
Eigenvalues, 268 
poles and, 200-202 
transfer function poles and, 200-202 
Eigenvector, 268,269 
Ekeberg, 6., 159 
Electrical constants, of motor transfer function, 
82 
Electrical network 
branch currents in, 126 
with dependent source, 128-130 
representation of, 126-127 
transfer function, 46-61 
Electrical to mechanical systems analogies, 62 
Electric circuit analogs, 84-87 
Electric network, 28 
Electric ventricular assist device (EVAD), 292,776 
Electromagnetic systems, 79-84 
Electromechanical system transfer functions, 
75-80 
Electronic control unit (ECU), 30 
Elevator response, 2 
Elevators, 3 
El-Gamal, M., 337,623 
Elkins,J.A.,U5,159 
El-Samad, H., 453 
Emami-Naeini, A., 31,115,159,232,453,623,721 
Energy storage elements, 126 
Enzyme breakdown, 107 
Eppinger, S. D., 32,116,160,233,300,337,386,453,532,624, 
662,721,781 
Epsilon method, stability vi, 308-309 
Equations of motion, 63,71 
by inspection, 67-68,72-73 
Equilibrium, 89 
Errors, 9. See also Steady-state errors 
Estimator, 682 
EVAD. See Electric ventricular assist device 
Evans, X, 288,299 
Evans, Walter, 5 
Existing transient response, 10 
Exponential damping frequency, 182 
Exponential decay frequency, 174 
Exponential frequency, 167 
Exponential response, 164 
Exponential time constant, 174 
F4-E military aircraft 
pitch stabilization loop, 444 
steering control, 153 
Factoring, via Routh-Hurwitz, 319 
Fagergren, A., 155,159 
Fahlen, P., 337,624 
FANUC M-410iB robot, 323 
Feedback amplifier analysis, 5 

912 
Index 
Feedback compensation, 495-503 
approach 1,496-500 
approach 2,500-503 
generic control system, 495 
minor-loop, 500-503 
Feedback control systems, 9,240. See also Control systems; 
specific control systems 
analysis/design of, 245-246 
for ideal derivative compensation, 472 
with MATLAB Simulink program, 850-852 
Feedback form, of multiple subsystems, 240-241 
Feedback path, 9 
Feedback system simulation, with Lab VIEW program, 880-
881 
Fenn's law, 291 
Fertilizer applicator, 448 
Final value theorem, steady-state errors using, 365 
Finances, of control systems, 12 
First-order system, 166-168 
poles of, 163 
unit step and, 166 
zeros of, 163 
First-order transfer functions via testing, 167 
Fission reaction, 25 
Fixed field, 80 
Floor vibration eliminator, 447 
Floppy disk drive, block diagram, 617 
Flower, T. L., 662 
Flow for conservation, 148 
Fluid-filled catheter, deflection response, 222 
Flyball speed governor, 5 
Force-displacement, 62 
Forced response, 11,162,164 
Force-velocity, 62 
Foroni, R. I., 115 
Forssberg, H., 159 
Forward-path gain, 251 
Forward-path transfer function, 445 
Forward transfer function, 339. See also Open-loop transfer 
function 
Frankle,J.T.,32 
Franklin, G. E, 31,115,159,231,453,623,721 
Free-body diagram, 63 
transformed, 63 
Free viruses, 110 
Frequency, exponential, 167 
Frequency domain modeling, with MATLAB program, 788-
793 
Frequency-domain technique, 118. See also Classical 
technique 
Frequency/gain, at imaginary-axis crossing, 406-407 
Frequency response 
analytical expressions for, 536-537 
concept of, 535-536 
lead compensator, 636-637 
with MATLAB program, 813-818 
sinusoidal, 535 
steady-state errors from, 593-597 
techniques, 533-608 
from transfer function, 538-539 
Frequency response design methods 
antenna control and, 650-652 
lag compensation and, 630-635 
lag-lead compensation and, 641-650 
lead compensation and, 635-641 
overview of, 627 
root locus and, 626 
transient response via gain adjustment and, 627-630 
Frequency response plots, 537-538 
of time delay systems, 598-599 
Friction, 65n 
Fuel-cell power plants, 6 
Functional block diagram, 14 
drawing of, 16 
Functions, linearizing, 90 
G(s), steady state error as, 345-348 
Gain-adjusted antenna control system, step responses of, 427 
Gain adjustment 
bode plots for, 628 
stability/transient response design via, 626 
transient response design via, 415-419,626 
transient response via, 627-630 
Gain design 
antenna control and, 650-651 
for transient response, 247-248 
Gain design on z-plane, digital control systems and, 755-758 
Gain margin/phase margin 
from Bode plots, 579 
evaluating, 578 
via Nyquist diagram, 574-576 
Galvaeo, R.K.H., 115,453,616,623 
Gamble, J.B., 26,32,300 
Gas-fired heater, block diagram, 717 
Gauthier, M., 234 
Gear backlash, 88 
Gear driven rotational systems, 75 
Gear systems, 74-78 
with loss, 77-78 
motion equation for, 77 
schematic, 74 
Gear train, 77 
Geselowitz, D. B., 300,662,781 
Ghonien, A. F., 452 
Gillard, D., 234 
Glantz, A. S., 222,232 
Global carbon cycle, schematic description of, 155 
Golbon, N., 532,781 
Gompertz growth model, 109 
Gong, W, 386,453,623,662 

Index 
913 
Good, M. C, 233, 623 
Graham, D., 233 
Graphical user interface (GUI), 196 
Griggs, G. E., 115,159 
Graphical user interface (GUI), 20,21 
Grinder system, 26 
GUI. See Graphical user interface 
Guy, W., 453 
Gyro systems, 151 
Hacisalihzade, S. S., 32 
Hammel, H. T., 32 
Han, Y. D., 386,453 
Harbor, R. D., 337,662 
Hardy, H. L., 439,453,774,780 
Harmonic drives, robotic manipulator with, 448 
Hatopoglu, C, 454 
Head, 147 
Heat-exchanger process, 521-522 
Hedrick, J. K., 452 
Hekman, K. A., 333,337 
Heller, H. G, 32 
HelpMate transport robot, 288-289 
Hess, R. A., 382,386 
High-frequency asymptotes, 542 
High-speed proportional solenoid valve, 26 
High-speed rail pantograph control problem, 28-29,109-110, 
155-156,227,296-297,334,383,449,528,620-621,659, 
718,777 
HIV/AIDS control system problem, 29,110-111,156, 
227-228,297,334-335,383,449-450,528-529, 621,659, 
718-719,777 
Hogan, B. X, 32 
Hold 
zero-order, 728 
zero-order sample-and-, 726,730,737-738 
Hollot, C. V., 386,441,453,623,662 
Home entertainment systems, 6 
Homogeneity, 88 
Hong, X, 152,160 
Horizontal canards, 153 
Hormonal regulation mechanisms, 441 
Horta, L. G, 452 
Hospital pharmacy robot, 664 
Hostetter, G. H., 32,299,337,386,531,623,662,720,780 
Houpis, G H., 31,337,386,531,662,720 
Hsu, J.C., 115 
Hubble Space Telescope (HST), 619 
Human eye movement, 288 
Human growth population, 108 
Human leg, transfer function of, 95-96 
Human postural dynamics, 107 
Human response, to visual cue, 220 
Hybrid solar cell, diesel power distribution system and, 
294 
Hybrid vehicle control problem, 29,111-112,156-157,228, 
297-298,335,384,529,621,660,719,777-778 
Hydraulic actuator, 26 
Hydraulic circuits, 227 
Hydraulic pumps, 227 
diagram of, 227 
Hypothalamic-pituitary-adrenal axis, linear 
time-invariant model of, 154 
ICE. See Internal combustion engine 
Ideal compensators, 458 
Ideal derivative compensation, 469,470-480 
design, 472-476 
feedback control system for, 472 
predicted characteristics for, 471 
root locus for, 473,475 
uncompensated/compensated system, 472-473 
Ideal integral compensated system response, uncompensated 
system response and, 463 
Ideal integral compensator, 459,461 
closed-loop system for, 461 
effect of, 461 
implementing, 463 
Ideal sampling, zero-order hold and, 730 
Identity matrix, 139 
Ignatoski, M. A., 300,622,781 
Imaginary-axis crossing, frequency/gain at, 406-407 
Impedance for mechanical components, 64 
Impedance relationships, 48 
Impedance rotational relationships, 70 
Impedance translational relationships, 62 
Implantable medical devices, with in-body batteries, 447 
Impulse, 18,19 
In-body batteries, implantable medical devices with, 447 
Inductors, 130 
Industrial robots, 200-221,617. See also Robots 
Inertia, 17,70,81 
moment of, 70 
Inherent disturbance suppression, 775 
Inigo, R. M , 160 
Initial conditions, 45 
Inner ear hair cell transducers, 105 
Innocenti, M., 337,661 
Input, 2 
Input potentiometer, 94 
Input signals 
root locus and, 421 
test of, 18 
Input substitution 
analysis via, 366-367 
steady-state errors using, 367 
Input transducer, 8 
Insect flight dynamics, 225 
Inspection, mesh equations via, 56-57 
Instability, 11,302,303-304. See also Stability 

914 
Index 
Insulin concentration-time evolution, 153-154 
Integral control 
design, 701-703 
steady-state error design via, 700-704 
systems, 459 
Intelligent Soft Arm Control (ISAC), 331,332 
Interconnection of subsystems, block diagram of, 34 
Internal combustion engine (ICE), 29 
Inverse Laplace transform, 35,36,166 
Inverse z-transform 
via partial-fraction expansion, 733-734 
via power series method, 734 
Inverting operational amplifier, 58 
circuit, 59 
schematic, 58 
lonescu, C, 233 
Ionic polymer-metal composite, 225 
ISAC. See Intelligent Soft Arm Control 
Isailovic, X, 386 
Isoflurane, 221 
Jannett, T. C, 221,233 
Jason, 317 
Jason Junior, 272 
Jenkins, H. E., 26,32 
Johansson, R., 116 
Johnson, H., 233,289,299,337,453,531,780,800,835 
Johnson, R. E., 227,233 
Joint flexibility, model representing, 448 
Jordan canonical form, 260 
Juang, J., 452 
Jury's stability test, 745 
/co-axis crossings, root locus sketching and, 405-407 
Kailath,T., 35,116,160,721 
Kandel, A., 160 
Kanellakopoulos, I., 107,116,291,300,386 
Kara, A., 337,616,623 
Kato, Y., 531,721 
Katz, P., 781 
Kawamura, K., 332,337,623 
Kermurjian, A , 116 
Kesson, M., 116 
Khaminash, M., 453 
Kharitonov's theorem, 330 
Khodabakhshian, A., 524,532,776 
Kirchhoffs current law, 17,47,84 
Kirchhoff's nodal equations. See Nodal equations 
Kirchhoffs voltage law, 17 
Klaasens,J.B.,234,722 
Klapper, J., 32 
Klein, R. E., 299,452,623 
Knight, B., 234 
Koontz, J. W., 300,662,781 
Kostis, J. B., 109,116 
Krishnamurthy, B., 299 
Ktesibios' water clock, 4,290 
Kumar, R. R., 380,386 
Kuo, B. C, 233,453,532,623,662,745n, 781 
Kuo, F. E, 116,623 
Kurfess, T. R., 26,32 
Kurland, M., 287,299 
Kwatny, H. G., 453,662 
Kyrylov, V, 154,160,714,721 
LabVIEW program, 21 
amplifier saturation simulation with, 878-880 
analysis examples with, 862-875 
block diagram window in, 862-868 
closed-loop step response with, 869-871 
control design palette in, 883-885 
control systems analysis with, 858-859 
design examples with, 862-875 
design with, 858-859 
digital system simulation with, 881-885 
feedback system simulation with, 880-881 
linear systems simulation with, 876-878 
open-loop/closed-loop sinusoidal frequency analysis/design 
with, 873-875 
open-loop step response with, 862-869 
root locus analysis/design with, 871-872 
simulation palette in, 881-882 
simulation with, 858-859 
using, 859-862 
Lag compensation, 464-469,630-635 
design procedure, 631-634 
root locus and, 465 
type 1 systems, 464 
visualizing, 630-631 
Lag compensator, 459 
design, 466-468 
Lag-lead compensation, 641-643 
antenna control and, 508-511 
design procedure, 643-646 
using Nichols chart, 646-649 
Lag-lead compensator, 487 
design, 487-491 
ramp response error for, 491 
root locus for, 488,489,490 
Lago, G, 116 
Lam, C. S., 379,386,453 
Landesberg, A., 300 
Laplace transform, 17,35-36 
definition of, 35 
of differential equation, 39-40 
inverse, 35,36 
review, 35-44 
of state-transition matrix, 203-204 
state-transition matrix via, 206-207 
table, 36 

Index 
915 
theorems, 37 
of time function, 35-36 
Laplace transformed circuit, 49 
Laplace transform solution, 200-202 
of state equations, 198-202 
Lathe, with digital numerical control, 742 
Lead compensation, 477-481 
Bode plots for, 639 
design, 478-481,637-640 
geometry of, 477 
possible solutions, 478 
visualizing, 635-636 
Lead compensator, 469 
frequency response, 636-637 
realization, 507 
Ledgerwood, B. K., 115 
Lee, Edmund, 4 
Lee, S., 153,159 
Lennartsson, A., 299,452,623 
Leo, D. J., 233 
Lepschy, A. M., 289,300,377,386 
Lewis, F. L., 222,232 
Liang, S. Y., 337 
Liceage-Castro, E., 154,160 
Liew, K. M., 386,453,623 
Lim, T. W., 386 
Lin, J.-S., 107,116,291,300,379,386 
Lin, R., 338,454,662 
Linear combination, 121 
Linear control systems analysis, 5 
Linear independence 
explanation of, 123 
state variables and, 123-124 
Linear systems, 88 
Linear system simulation 
with Lab VIEW program, 876-878 
with MATLAB Simulink program, 842-848 
Linear time-invariant differential equation, 17 
Linear time-invariant model, of hypothalamic-pituitary-
adrenal axis, 154 
Linear voltage differential transformer (LVDT), 26,223 
Linearity, 88 
Linearization, 89-97 
about a point, 89 
of differential equations, 91-92 
of function, 90 
state-space representation and, 141-143 
Linearized magnetic levitation system block, 440 
Linearly dependent motions, 65 
Linearly increasing command, 19 
Linearly independent, 122 
state variables, 124-125 
Linkens, D. A., 221,233 
Liquid-level control, 4 
Lithium-ion battery charger, 333 
Liu, A. Q., 222, 232 
Load 
in cascaded systems, 238 
dc motor and, 83-84 
dc servomotor and, 152 
motor and, 95,144-145 
tester, 289 
Load angular displacement response 
backlash effect on, 199 
deadzone effect on, 198 
Load angular velocity response, amplifier saturation and, 197 
Log-magnitude plots, 541-542,551-552,576-577 
Longitudinal flight model linearization, 224 
Look-ahead offset, 334 
Loop analysis. See Mesh analysis 
Loop gain, 241,251 
Loops 
major, 496 
minor, 495,496 
nontouching, 251 
Lordi, N. G., 160 
Lossless gears, 75 
angular displacement in, 75 
system with, 76-77 
Low back pain, motor trunk patterns and, 223 
Low, K. H., 386,453,616,623 
Low-frequency asymptotes, 550 
LTI Viewer, 217,229,230,575,579 
Ludwick, S. X, 26,32 
Luenberger, D. G., 721 
Lumelsky, V, 299 
Lumped parameter, 71 n 
Lusitania, 317 
Lyapunov, Alexandr Michailovich, 5 
Mablekos,VE.,116 
Magnetic levitation transportation system, 332,526-527 
Magnitude frequency response, 536 
Magnitude plots, 537 
Magnusson, M., 116 
Mallavarapu, K., 225,233 
Malsbury, T., 386 
Malthus, Thomas, 108 
Manned submersible, 272 
Manring, N. D., 227,233 
Mapping contour, 560-561 
Mapping only positive /Va-axis, stability via, 571-573 
Marginally stable systems, 303,304 
Marginal stability, 302 
Martin, R. H., Jr., 32 
Marttinen, A , 108,116,330,337,616,623 
Mason, S. J., 251,300 
Mason's rule 
multiple subsystems and, 251-254 
transfer function via, 252-253 

916 
Index 
Mass, 62,64 
damper and, 125 
Matching coefficients, controller design by, 677 
Mathematical models, 17-18 
from physical system schematics, 34 
Math Works Inc., 20 
MATLAB program, 20-21 
command summary for, 833-835 
design via frequency response with, 818-823 
design via root locus with, 808-813 
design via state space with, 823-826 
digital control systems with, 827-833 
examples, 788-833 
frequency domain modeling with, 788-793 
frequency response techniques with, 813-818 
M-files with, 787 
multiple subsystems with, 799-804 
root locus with, 806-808 
stability with, 804-805 
time domain modeling with, 793-795 
time response with, 795-799 
using, 787 
MATLAB Simulink program 
accessing, 837 
block parameters in, 843-845 
creating new model with, 838 
digital control systems with, 852-855 
examples, 841-855 
feedback systems with, 850-852 
libraries, 838-841 
linear system simulation with, 842-848 
saturation nonlinearity with, 848-850 
simulation parameters in, 846-847 
using, 836-841 
Matrices 
companion, 262 
controllability, 674-676 
observability, 691-693 
state-transition, 203,204,206-207 
system, 268,270-271 
transformation, 266,268,270,272 
Maxwell, James Clerk, 5 
May, F. P., 722 
Mayr, O., 4n, 32 
McRuer, D., 224,233 
Mechanical constants, 81 
Mechanical displacement, 62 
Mechanical system 
into parallel analog, 87 
into series analog, 86 
Mechanical system transfer functions 
rotational, 69-74 
translational, 61-69 
Meier, R., 32 
MEMS (Micro Electromechanical System), 221 
Mendoza, C, 116 
Mesh, 48-49 
Mesh analysis 
complex circuits via, 51-52 
single loop via, 48-50 
Mesh equations, via inspection, 56-57 
Meyer, A. U, 116 
M-files, with MATLAB program, 787 
Mian, G. A., 290,300,386 
Michaelis-Menten equations, 107 
Micro Optical Electromechanical Systems (MOEMS), 
221 
Milhorn, H. T, Jr., 288,300,721 
Milsum,J.H.,105,116 
Minnichelli, R. X, 300,337 
Minor loop, 495,496 
Minor-loop feedback compensation, 500-503 
root locus for, 502 
step response simulation for, 503 
Minorsky, Nicholas, 5 
Misra, V., 386,453,623,662 
Missile control system 
modeling of, 743-745 
stability of, 743-745 
Missile steering control, 152 
MOEMS. See Micro Optical Electromechanical Systems 
Monahemi, M. M., 532,721 
Moment of inertia, 70 
Momentum wheel, pitch axis attitude control system with, 
444 
Motion equation, for gear systems, 77 
Motors 
explanation of, 79-80 
transfer functions and, 95-96 
Motor, load and, 95,144-145 
Motorcycle radio volume, 25 
Motor dead zone, 88 
Motor transfer function, electrical constants of, 82 
Motor trunk patterns, low back pain and, 223 
Mott,C.,27,32 
Multiple loops, 52-53 
Multiple nodes, 54 
with current sources, 55-56 
Multiple root of multiplicity, 40 
Multiple subsystems. See also Subsystems 
background on, 236 
block diagrams of, 236-237 
cascade form of, 237-239 
feedback form of, 240-241 
Mason's rule, 251-254 
with MATLAB program, 799-804 
parallel form of, 239 
signal-flow graphs of, 248-251 
similarity transformations, 266-277 
in space shuttle, 237 

Index 
917 
Multiplicity, 40 
Murakami, X, 386 
Muscle relaxation, 221 
Nafion sheet, 225 
Nagle,H.T.,233,781 
Nakamura, M., 223,233 
Nano-positioning device, 223 
NASA flight simulator robot arm, 79 
Nashner, L. M., 221,233 
National Instruments PXI, 534 
Natural frequency 
damping ratio and, 208 
of general second-order system, 172 
Natural period, 174 
Natural response, 11,162,164 
n-channel enhancement-mode MOSFET Source Follower 
circuit, 280-281 
Neamen,D.A.,291,300 
Negative feedback, 240n 
Negative-feedback systems, 421 
Negative step response, of pitch control, 212 
Network theory, 127 
Newbury, K., 233 
Newton's laws, 17,63 
Nichols charts, 587-588 
lag-lead compensation design using, 646-649 
Nieuwland, J., 32 
Nilsson,J.W.,116,624 
No, T. S., 337,661 
No-load speed, 82 
Nodal analysis 
complex circuits via, 54-56 
simple circuits via, 50-51 
Nodal equations 
form of, 56 
method to write, 54,55 
Nodes, of signal-flow graphs, 248-249 
No integration systems, steady state error for, 347-348 
Noload speed, 82 
Noninverting operational amplifier, 59-60 
circuit, 60 
schematic, 60 
Nonlinear electrical network, 92-93 
Nonlinearities, 88-89 
physical, 88 
time response and, 196-198 
Nonlinear systems, 88 
representation of, 142-143 
Nonlinear translational mechanical system, 143 
Nonminimum-phase electric circuit, 193 
Nonminimum-phase system 
step responses of, 192,194 
transfer function of, 192-194 
Nontouching loops, 251-252 
Nonunity feedback systems 
steady-state actuating signal for, 361 
steady-state errors for, 358-362 
Norton's theorem, 55 
Notch filter, 492-494 
root locus for, 492-493 
Novosad, J. P., 32 
nth-order differential equations 
converted to n simultaneous first-order differential 
equations, 120 
explanation of, 17-18 
Nwokah, O.D.I., 321 
Nuclear power generating plant, 25 
Nuclear reactor, 25 
Nyquist, H, 5 
Nyquist criterion, 559-576 
derivation of, 560-563 
range of gain for stability via, 570-571 
stability determination with, 563-564 
Nyquist diagram 
gain margin/phase margin via, 574-576 
for open-loop function, 567-569 
sketching, 564-569 
stability via, 569-573 
Nyquist sampling rate, 726 
Observability, 689-693 
by inspection, 690 
via observability matrix, 691-692 
Observability matrix, 691 
observability via, 691-692 
unobservability via, 692-693 
Observer, 682 
Observer canonical form 
observer design for, 686-688 
of state space, 262-265 
Observer design, 682-689 
alternative approaches, 693-700 
by matching coefficients, 697-699 
for observer canonical form, 686-688 
by transformation, 695-697 
O'Connor, D. N, 28,32,109,116,160,227,233,296,300,334,337, 
383,386,449,453,528,532,620,624,659,662,718,777,781 
Octave, 541 
Ogata, K., 32,116,233,532,624,662,674n, 678n, 691n, 721, ' 
726n, 750n, 759n, 781 
Ohnishi, K., 383,386 
O'Leary, D. P., 532,721 
OMS. See Orbital maneuvering system 
One integration systems, steady state error for, 348-349 
Open-loop/closed-loop sinusoidal frequency analysis/design, 
with Lab VIEW program, 873-875 
Open-loop frequency responses 
closed-loop transient responses and, 589-592 
response speed from, 591-592 

918 
Index 
Open-loop function, Nyquist diagram for, 567-569 
Open-loop pitch response, UFSS and, 207-208 
Open-loop poles, 381-382,385,391,399-400,441 
Open-loop response, antenna control and, 207-208 
Open-loop step response, with LabVIEW program, 862-869 
Open-loop systems, 8-9 
block diagram of, 8 
Open-loop transfer function, 241 
for artificial heart, 223 
Operational amplifier, 58,193 
schematic of, 58 
Optical disk recording system, 6 
Orbital maneuvering system (OMS), 6 
Oscillations 
damped, 14-15,174 
damped frequency of, 170 
O'Sullivan, D. M., 234,722 
Output, 2 
Output engine fan speed, 330 
Output equation, 121,123 
Output potentiometer, 94 
Output response, 162 
Output transducer, 9 
Overdamped behavior, 213 
Overdamped response, 170,172 
Overshoot, 178,410,416-417, 600-601 
ozel, T., 526,532 
ozgiiner, U., 337,454 
Packet information flow, 383 
Pade approximation, 334,382 
Palazoglu, A., 532 
Pantograph, catenary and, 110 
Pantograph head displacement, 110 
Papin, Denis, 4 
Papson, T. P., 299 
Parabolic inputs, 19 
steady state error and, 347 
Parallel analog, 86-87 
development of, 87 
mechanical system converted into, 87 
parameters for, 87 
Parallel form 
of multiple subsystems, 239 
of state space, 259-260 
Parallel hybrid-electric vehicle, 29-30 
Parallel subsystems, 238 
Paramagnetic oxygen analyzer, 380 
Partial-fraction expansion, 37-44 
inverse z-transform via, 733-734 
Particular solutions, 11,162n 
Passive-circuit realization, 506-507 
PD controllers. See Proportional-plus-derivative controllers 
Peak time, 178 
evaluation of, 179 
lines of constant, 183 
from pole location, 184 
from transfer function, 181-182 
Pendulum, simple, 142 
Percent overshoot, 178 
v. damping ratio, 180 
evaluation of, 180 
lines of constant, 183 
from pole location, 184 
for time delay systems, 600-601 
from transfer function, 181-182 
Performance, 2 
Perez Lopez, O., 721 
Pfleiderer, H. X, 160,722 
Pharmaceutical drug absorption, 146-147 
Pharmaceutical drug-level concentrations, 146 
Phase frequency response, 536 
Phase margin, damping ratio from, 589-591 
Phase shift oscillator, 333 
Phase-variable representation 
controller design for, 669-671 
for plant, 667 
Phase variables, 133 
block diagram of, 135 
choice, 133 
Phasors, 535 
Philco Technological Center, 160 
Phillips, C. L., 233,337,662,781 
Philon of Byzantium, 4 
pH processes, modeling/control of, 224 
Phugoid mode, 224 
Physical system, transform requirements into, 16 
Physical system schematics, mathematical models from, 34 
Pickoff points, 236 
Pico, J., 160,722 
PI controllers. See Proportional-plus-integral controllers 
PID controllers. See Proportional-plus-integral-
plus-derivative controllers 
Piecewise linear systems, 104 
Pinette, B., 152,160 
Pioneer Electronics, Inc., 7 
Piper, G. E., 444,453,662 
Pitch angle control representation, in UFSS, 276-277 
Pitch axis attitude control system, momentum wheel with, 444 
Pitch control loop 
root locus of, 428 
for UFSS vehicle, 211 
Pitch control loop without rate feedback, step responses, 429 
Pitch control loop with rate feedback, step responses of, 430 
Pitch control system 
negative step response of, 212 
for space shuttle, 287-288 
Pitch gain, 324 
Pitch stabilization loop, of F4-E military aircraft, 444 
Plant 

Index 
919 
phase-variable representation for, 667 
pole placement for, 668-669 
state-space representation of, 666 
with state-variable feedback, 706 
Plate dispenser, 105 
Polar plot, 587n 
Pole(s), 162-163 
eigenvalues and, 200-202 
evaluating response with, 165 
of first-order system, 163 
imaginary part of, 214 
real part of, 214 
of transfer function, 163 
underdamped response using, 171 
Pole distribution, via Routh table with row of zeros, 312-313 
Pole location 
peak time from, 184 
percent overshoot from, 184 
for plant, 668-669 
for root locus, 393 
settling time from, 184 
topology for, 666 
Pole plot, for underdamped second-order system, 182 
Pole sensitivity, root locus and, 424-425 
Pole-zero plot, 164 
Popa, D., 232 
Position constant, 593-594 
Position control system, 12,34 
antenna azimuth, 13-15,208 
response of, 14 
tachometer as, 495 
Positive-feedback systems, root locus for, 421-424 
Postural arm reflexes, 292-293 
Potentiometer, 9,24 
Powell, J. D., 31,115,159,232,453,623,721 
Power amplifier, 94,144 
Power series method, inverse z-transform via, 734 
Preamp, 94 
Precision grip dynamics, 155 
Prewarping, 759 
Process control industry, 6 
Processes, 2,8 
Prochazka, A., 234 
Proportional control system, 459 
Proportional-plus-derivative (PD) controllers, 469 
Proportional-plus-integral (PI) controllers, 459,464 
Proportional-plus-integral-plus-derivative (PID) controllers, 
5 
characteristics of, 484 
design, 482^186 
implementing, 505 
root locus for, 483 
Pulse transfer function 
derivation of, 736-737 
of feedback system, 740-741 
Pupil dilation, 26-27 
Pythagorean theorem, 182 
Qualitative analysis and design, 162 
Qualitative method, 162 
Quantization error, 726 
Quarter-car model, for suspension design, 107 
Radio antenna, 12 
Raible's tabular method, 745 
Ramp, 19 
Ramp input 
steady state error and, 346-347 
steady-state error and, 341,342 
Ramp response error, for lag-lead compensator, 491 
Random-access memory (RAM), 354 
Random early detection (RED) algorithm, 383,441,656 
Range of gain for stability 
for time delay systems, 599-600 
via Bode plots, 577-578 
via Nyquist criterion, 570-571 
Range of sampling interval, for stability, 745-746 
Rate feedback, compensating zero via, 497-500 
Raven, F. H., 116,662 
RCS. See Reaction control system 
Reaction control system (RCS), 6 
Read/write head displacement, 330 
Real-axis breakaway, root locus sketching and, 402^405 
Real-axis break-in points, root locus sketching and, 402-405 
Real-axis pole, transient response and, 165 
Real-axis segments, root locus sketching and, 398 
Realization 
active-circuit, 404-405 
of lag-lead compensator, 509 
passive-circuit, 506-507 
Reciprocal, of time constant, 167 
Reference, 8 
Reference input, 34 
Remote-controlled robot, 3 
Residues, 195 
Resistance, 49 
Resistor, 47 
Response, exponential, 164 
Response speed, from open-loop frequency response, 591-592 
Retinal light flux, 443 
Reverse coefficients, stability via, 310 
Richon, J.-B., 452 
Riedel, S. A., 116 
Riegelman, S., 160 
Riseman, E. M., 152,160 
Rise time, 167,178 
v. damping ratio, 182 
evaluation of, 181-183 
from transfer function, 181-182 
Rober, S. 1,332,337 

920 
Index 
Robotic manipulator 
with cascade PI controller, 447 
harmonic drives with, 448 
target environment and, 153 
Robots, 3. See also specific robots 
arc welding, 439 
assembly-line, 354 
FANUCM-410iB,323 
hospital pharmacy, 664 
industrial, 220,617 
input commands to, 187 
leg of, 142 
remote-controlled, 3 
with television imaging system, 152 
transport, 288-289 
vacuum, 220 
walking, 141 
Robust design, 12 
Rockwell International, 6,30,691 
Romagnoli, J. A., 532,775,781 
Room temperature control, 521 
Root locus, 5 
for antenna control, 426 
for compensated system, 462 
with compensator, 460 
without compensator, 460 
control problem for, 388-389 
definition, 388,392-394 
design via, 455-459 
from general control system, 394 
generalized, 419-421 
for ideal derivative compensation, 473,475 
lag compensation and, 465 
for lag-lead compensator, 488,489,490 
with MATLAB program, 806-808 
for minor-loop feedback compensation, 502 
for notch filter, 492-493 
for PID controllers, 483 
of pitch control loop, 428 
plotting/calibrating, 410 
pole location for, 393 
pole plot for, 393 
pole sensitivity and, 424-425 
for positive-feedback systems, 421-424 
properties of, 394-397 
sample, 456 
for security camera system, 392-393 
starting/ending points and, 398-399 
for uncompensated system, 462 
vector representation of complex numbers and, 389-391 
Root locus analysis/design, with LabVIEW program, 871-872 
Root locus sketching 
angles of departure/arrival in, 407-409 
with asymptotes, 400-402 
behavior at infinity, 399^02 
branches and,397 
critical points and, 412-414 
;'w-axis crossings and, 405-407 
real-axis breakaway and, 402-405 
real-axis break-in points and, 402-405 
real-axis segments and, 398 
refining, 402-411 
rules for, 411-412 
symmetry and, 397-398 
Root sensitivity, of closed-loop system, 425 
Roots of denominator of F(s) 
complex or imaginary, 41-44 
real and distinct, 38-40 
real and repeated, 40-41 
Rotational mechanical impedances, 76 
Rotational mechanical load, DC motor driving, 81 
Rotational mechanical system transfer functions, 69-74 
Rotational systems 
degrees of freedom in, 70 
driven by gears, 75 
Rotor, 80 
Routh, Edward John, 5 
Routh-Hurwitz criterion 
digital system stability via, 748 
examples of, 314-320 
factoring via, 319 
special cases of, 308-313 
of stability, 305-308 
with zero in first column, 314-315 
Routh table 
generating, 306-307 
interpreting, 307 
pole distribution via, 312-313 
with row of zeros, 312-313,316-317 
stability via, 310-311 
zero in, 308-311 
.Rover, 3 
Rubbertuators, 331 
Running resistances, 111 
Safety valve, 4 
Salapaka, M. V., 223,233 
Salapaka, S., 233 
Salcudean, S. E., 290,299 
Sales, R.M., 337 
Salminen, R. T., 108,116,337,623 
Sampled-data system. See Digital control systems 
Sampled-data systems 
block diagram reduction of, 740-741 
transfer functions and, 735-739 
z-transform and, 739 
Sampler, modeling, 728-729 
Sarcomere, 292 
Saturation nonlinearity, with MATLAB Simulink program, 
848-850 

Index 
921 
Savant, C. J., Jr., 32,299,337,386,531,623,662,721 
Savaresi, S. M, 531,623,780 
Sawusch, M. R., 233 
Scanning probe microscope, 775 
Schematic, for control system, 16-17 
Schierman, J. D., 330,337 
Schmidt, D. K., 337 
Schneider, R. T„ 220,233,383,386 
Schnell, S., 116 
Schouten, A. C, 292,299 
Sebastian, A., 233 
Second-order step response approximation, 195 
Second-order step response components, 170 
Second-order system damping cases, step responses for, 
172 
Second-order systems, 169-177 
damping ratio of, 173-175 
natural frequency of, 172 
Second-order transfer functions, via testing, 186 
Second-order underdamped responses 
for damping ratio values, 178 
specifications, 178 
Second-order underdamped systems, step responses of, 184 
Security camera system, root locus for, 392-393 
Seering, W. P., 28,32,110,116,160,233,300,337,386,453, 
532,624,662,721,781 
Segway personal transporter, 27 
Self-guiding vehicle, bearing angle control of, 527 
Semmlow,J.L.,109,116 
Sensitivity 
of closed-loop transfer function, 362-363 
steady-state errors and, 362-364 
Sensor, 9 
Serial hybrid-electric vehicle, 29 
Series analog, 85-86 
mechanical system converted into, 86 
Series RLC electrical network, 49 
Settling time, 167,178 
lines of constant, 183 
from pole location, 184 
from transfer function, 181-182 
Severyanova, L. A., 160,721 
Shaw, D. A., 32 
Shibata, M., 386 
Shin, Y. C, 337 
Shinners, S. M., 721 
Ship roll axis, 212 
Ship stability, 5 
Ship steering, 5 
Shortening muscle velocity, 292 
Short period mode, 224 
Signal-flow graphs 
components, 248 
converting block diagrams to, 249-250 
development stages of, 254 
of multiple subsystems, 248-251 
of state equations, 254-256 
Similarity transformations 
of multiple subsystems, 266-277 
on state equations, 267 
Simple circuits 
via nodal analysis, 50-51 
via voltage division, 51 
Simulation, with LabVIEW program, 858-859 
Simulation palette, in LabVIEW program, 881-882 
Simulation parameters, in MATLAB Simulink program, 
846-847 
Simulink (MATLAB), 190,196,199,225,228,247,297, 335, 
384,720-721,758,787-835 
Single loop 
via differential equation, 48-49 
via mesh analysis, 48-50 
via transform methods, 50 
Single node, 50-51 
Sinha, N. K., 721 
Sinusoidal frequency analysis, 5 
Sinusoidal inputs, 19 
SISO Design Tool, 20 
Sivan, R., 300 
Skewis, T, 299 
Smith, C. A., 532,662 
Smith, C. L., 781 
Smoother, block diagram, 440 
Soft Arm, 616 
Solar alpha rotary joints, 380 
Solar arrays, in space station, 380 
Soleimani-Mosheni, M., 337,624 
Solenoid coil circuit, 289 
Solomonow, M., 234 
Son, M., 662 
Source shaft, 76 
Space shuttle, 6 
automatic steering program, 
439 
main engine controller, 10 
multiple subsystems in, 237 
pitch control system, 287-288 
Space station 
solar arrays, 380 
vibration stabilization, 440 
Sparks, A. W„ 775,781 
Speed control, 4-5 
Sperry Gyroscope Company, 5 
Spilman, D., 531,721 
5-plane, digital system stability via, 747-748 
s-plane mapping, onto z-plane, 743 
Split-power hybrid-electric vehicle, 30 
Spring constant, 62,70 
Spruijt, J. N., 234,722 
Squid jet locomotion, 109 

922 
Index 
Stability, 11 
closed-loop poles/response in, 304-305 
definition, 302 
determining, 576 
evaluation of, 303 
with MATL AB program, 804-805 
Maxwell's criterion of, 5 
of missile control system, 743-745 
range of sampling interval for, 745-746 
Routh-Hurwitz criterion of, 305-308 
in state space, 320-323 
via epsilon method, 308-309 
via mapping only positive /w-axis, 571-573 
via Nyquist diagram, 569-573 
via reverse coefficients, 310 
via Routh-Hurwitz criterion, 318-319 
via Routh table, 310-311 
Stability design/transient performance, antenna control and, 
606-607 
Stability design via gain 
in antenna control, 323-324 
inUFSS,324 
Stability design via root locus, in digital control systems, 755-
756 
Stability/transient response design, via gain adjustment, 626 
Stable systems, steady-state error and, 341 
Stall torque, 82 
State equations, 122,123,124 
Laplace transform solution of, 198-202 
signal-flow graphs of, 254-256 
similarity transformations on, 267 
State-feedback design, 683 
State solutions, time domain solution of, 
203-212 
State space, 123 
alternative representations in, 256-265 
cascade form of, 257-259 
controller canonical form of, 260-262 
diagonalizing system in, 270-271 
graphic representation of, 123 
observer canonical form of, 262-265 
parallel form of, 259-260 
stability in, 320-323 
transfer function conversion to, 132-138 
State space conversion, to transfer function, 
139-141 
State-space design, 663-665 
for antenna azimuth position control, 708 
State-space representation, 18,117 
advantages of, 119 
antenna control and, 144 
application of, 124-132 
computer simulation and, 149 
general, 123-124 
linearization and, 141-143 
of plant, 666 
to transfer function, 140 
State-transition matrix, 203 
Laplace transform of, 203-204 
via Laplace transform, 206-207 
State-variable feedback, plant with, 706 
State variables, 123 
linearly independent, 124-125 
minimum number of, 125-126 
State vector, 123 
graphic representation of, 123 
Static error constants, 349-350,464 
from Bode plots, 595-596 
steady-state error via, 350-352 
Steady-state actuating signal, for nonunity feedback systems, 
361 
Steady-state error design 
via cascade compensation, 626 
via integral control, 700-704 
Steady-state errors, 2,15,19. See also Errors 
antenna control and, 368-371 
assembly-line robots and, 354 
definition, 340 
digital control systems and, 749-753 
digital feedback control system for, 
750 
for disturbances, 356-358 
evaluating, 341-342 
finding, 752 
from frequency response, 593-597 
improving, 457-458,482-494 
with MATLAB program, 805-806 
for no integration systems, 347-348 
for nonunity feedback systems, 358-362 
for one integration systems, 348-349 
parabolic input and, 347 
ramp input and, 341,342,346-347 
sensitivity of, 362-364 
sources of, 343 
specifications, 353-356 
stable systems and, 341 
from step disturbances, 357 
step input and, 346 
for systems in state space, 364-367 
system type and, 352-353 
in terms of G(s), 345-348 
in terms of 7/(s), 344-345 
test inputs, 340-341 
test waveforms for, 340 
transient response, 19,482-494 
for unity feedback systems, 343-349 
using final value theorem, 365 
using input substitution, 367 
via cascade compensation, 459-469 
via static error constants, 350-352 

Index 
923 
Steady-state response, 11 
Steady-state velocity error, 375 
Steam-driven power generators, 524 
Steam generator, water level control in, 333 
Steam pressure control, 4 
Steel production, continuous casting in, 294 
Steering control, of F4-E military aircraft, 153 
Stefani, R. T., 32,220,233,299,337,380,386,531, 
623,662,721 
Stefanides, E. J., 662 
Step, 19 
Step disturbances, steady-state errors from, 357 
Step input, steady state error and, 346 
Step responses 
computer simulation of, 429 
of gain-adjusted antenna control system, 427 
of nonminimum-phase network, 194 
of nonminimum-phase system, 192 
of pitch control loop without rate feedback, 
429 
of pitch control loop with rate feedback, 430 
for second-order system damping cases, 172 
of second-order underdamped systems, 184 
of three-pole systems, 189 
for transfer functions, 190 
Step response simulation, for minor-loop feedback 
compensation, 503 
•s-transform, table of, 732 
Strobel, K. L., 221,623 
Student population control system, 25 
Submarine autopilot, 154 
Subsystems, 2. See also Multiple subsystems 
Summers, T. A., 233 
Summing admittances, 56,86 
Summing impedances, 56,57 
Summing junctions, 8 
block diagram for, 241 
Summing torques, of pendulum, 142 
Summing voltages, 57 
Sun, M., 225,233 
Superposition, 88 
Susceptance, 54n 
Suspension design, for quarter-car model, 107 
Sweet, L. M., 233,623 
Symbolic Math Toolbox, 21 
Symbols list, 783 
Symmetry, root locus sketching and, 397-398 
System matrix, diagonalizing a, 268 
System representation, block diagram of, 34 
System response, 162-163 
with additional poles, 186-190 
from transfer function, 46 
with zeros, 191-196 
Systems in state space, steady-state errors for, 
364-367 
System step response test, laboratory results of, 168 
System type, steady-state errors and, 352-353 
System variable, 123 
T(s), steady state error as, 344-345 
Tabular method (Raible), 745 
Tachometer 
as position control system, 495 
transfer function of, 496 
Tadeo, E, 721 
Tanis, D., 287 
Tan, X., 152,160 
Tarin, C, 153,160,715,722 
Tactile feedback suit, 27-28 
Target environment, robotic manipulator and, 
153 
Tasch, U, 292,300,776,781 
Taylor series, 58,59,80,142 
Television imaging system, robot with, 152 
Temperature control system, 4,24 
chemical process, 525 
Testing 
first-order transfer functions via, 167-168 
second-order transfer functions via, 186 
Test inputs, for steady-state error, 340-341 
Test waveforms, 19 
for steady-state error, 340 
Teufel, E., 160,722 
Theophylline concentration, 221 
Thermistor, 9 
Thermostat, 6 
Third-order observer, 684 
Third-order system gain design, 416^-19 
system characteristics, 417-418 
Thomas, B., 333,337,532,616,624 
Three-loop electrical network, 56 
Three-mode controllers. See PID (proportional-plus-integral-
plus-derivative) controllers 
Three-pole systems 
comparing responses of, 189-190 
component responses of, 188 
step responses of, 189 
Thrust vectoring, 287 
Thukral, A., 337,661 
Tie, B., 109,116 
Time constant, 166-167 
exponential, 174 
reciprocal of, 167 
Time delay systems, 597-602 
frequency response plots of, 598-599 
percent overshoot for, 600-601 
range of gain for stability for, 599-600 
Time domain modeling, 117-122 
with MATLAB program, 793-795 
of state solutions, 203-212 

924 
Index 
Time function 
Laplace transform of, 35-36 
z-transform of, 731-732 
Time response 
with MATLAB program, 795-799 
nonlinearities and, 196-198 
Time-varying systems, 118 
Timothy, L. K., 160,233,300,337,722 
Titanic, 272 
Top-down design, 22 
Torque, of motor, 80 
Torque-angular displacement, 70 
Torque-angular velocity, 70 
Torque equivalent mechanical loading, 80 
Torque-speed curve, 82,83 
with armature voltage, 82 
Total response, 11 
Tou,J.,781 
Towed vehicle roll control, 332 
Tower Trainer 60 Unmanned Aerial Vehicle, 657 
Towsley, D., 386,453,623,662 
Tracking radar, 382 
Train stopping, closed-loop vehicle response for, 441 
Transducer 
inner ear hair cell, 105 
input, 8 
output, 9 
Transfer function(s), 17 
block diagram of, 45 
from Bode plots, 603-605 
decomposing, 136,137 
for differential equation, 45 
of digital control systems, 735-739 
electrical network, 47-61 
experimentally obtaining, 602-605 
frequency response from, 538-539 
of human leg, 95-96 
matrix, 139 
nonminimum-phase system of, 192-194 
peak time from, 181-182 
percent overshoot from, 181-182 
poles of, 163 
rise time from, 181-182 
sampled-data systems and, 735-739 
second-order approximation, 190 
settling time from, 181-182 
state space conversion to, 140 
state-space representation to, 140 
step responses for, 190 
system response from, 46 
of translational mechanical system, 61-69 
via Mason's rule, 252-253 
zeros of, 163 
Transfer function conversion 
with constant term in numerator, 134-135 
with polynomial in numerator, 136-137 
to state space, 132-138 
Transfer function poles, eigenvalues and, 200-202 
Transformation 
controller design by, 679-681 
observer design by, 695-697 
Transformation matrix, 266,268,270,272 
Transformations 
bilinear, 746-747 
to canonical form, 260-263 
controller design by, 678-681 
observer design by, 693-697 
similarity, 266-270 
Transformed circuit, 49 
Transformed free-body diagram, 63 
Transform methods, single loop via, 50 
Transform of the response, 177 
Transient response, 2,10 
through component design, 185-186 
desired, 10 
gain design for, 247-248 
improving, 456-457 
modeling, 19 
real-axis pole and, 165 
steady-state errors and, 19,482-494 
via gain adjustment, 627-630 
Transient response design, via gain adjustment, 415-419,626 
Transient response design via gain adjustment 
antenna control and, 426-427,765-767 
digital control systems and, 756-757 
UFSS and, 427-430 
Transient response improvement, via cascade compensation, 
469^181 
Transient response modeling steady-state error, 19 
Transient response on z-plane, digital control systems and, 
753-755 
Transition method, 303 
Translational mechanical system 
representation of, 130-131 
transfer functions, 61-69 
Transpose, 128 
A Treatise on the Stability of a Given State of Motion (Routh), 5 
Trylt, 40-43,46,57,72,138,141,186,190,191,195,202,245, 
248,261,263,271,308,316,322,353,355,359,364,365, 
391,397,414,467,477,559,570,576,579,588,601,630, 
634,641,672,676,689,693,738,758 
Tumor cell growth model, 109 
Turnbull, G. A., 32 
Tustin transformation, 759 
Twizell, E. H., 115 
Two degrees of freedom translational mechanical system, 
65-66 
Two-lop electrical network, 52-53 
Two-pole system, zeros and, 191 
Two-tank liquid control system, 521 

index 
925 
Tyberg, V. X, 232 
Tyner, M., 722 
UFSS. See Unmanned Free-Swimming Submersible 
UNAIDS, 32 
Unbounded input, 302 
Uncompensated/compensated system, of ideal derivative 
compensation, 472-473 
Uncompensated system 
ideal derivative compensation and, 472 
root locus for, 462 
Uncompensated system response, ideal integral compensated 
system response and, 463 
Uncontrollable system, 673 
Undamped response, 171,172 
Undamped second-order systems, 177-186 
Undamped sinusoidal oscillations, 213 
Underdamped curve, 174 
Underdamped response, 170,172 
using poles, 171 
Underdamped second-order system, pole plot for, 182 
Underwater remote-controlled vehicle, 317 
Uniform-rate sampling, 728 
Uniform rectangular pulse train, 729 
Unit multiplicity, 312n 
Unit parabolic input, for digital feedback control system, 
751 
Unit ramp input, for digital feedback control system, 751 
Unit step, first-order system and, 166 
Unit step input, for digital feedback control system, 750-751 
Unity feedback systems 
forming an equivalent, 358 
steady state error for, 343-349 
Unity gain, 9 
Unmanned autonomous vehicle, 527-528 
Unmanned Free-Swimming Submersible (UFSS), 
162,272 
lead/feedback compensation in, 511-513 
open-loop pitch response and, 207-208 
pitch angle control representation, 276-277 
pitch control loop for, 211 
stability design via gain in, 324 
transient design via gain and, 427-430 
Unobservability, via observability matrix, 692-693 
Unstable systems, 303. See also Stability 
Unyelioglu, K. A., 337,454 
Vacuum robot, 220 
van der Helm, F C. T., 292,299 
van der Molen, G. M., 154,160 
Van de Vegte, J., 532 
Van Dijk, E., 225,234,722 
Van Valkenburg, M. E., 116 
Variable speed wind turbine, feedback control, 718 
Vaughan, N. D., 26,32,289,300 
Vector-matrix form, 127 
Vector representation, of complex numbers, 389-391 
Vectors 
evaluation of complex function via, 391 
Laplace transform of, 139n 
state, 123 
Vehicle steering control model, 441 
Velocity, 374 
Velocity constant, 594 
Vertical spindle surface grinding, 333 
Venter, J. W., 31,110,115,159,232,299,337,386,455,531, 
623,662,721,789 
Verde, L., 153,159,299,452 
Vertical risers, 4 
Viaro, U, 290,300,386 
Vibration stabilization, in space station, 440 
Video disc laser recording, 370 
Vidyasagar, M., 116,386,453 
Vieira, A., 160,721 
Virkkunen, 1,108,116,337,623 
Virtual Experiment, 65,83,142,166,182,247,313,357, 
473,501 
Virtual reality simulator, 293 
Viscous damper, 64,125 
Viscous damping, 17 
Visual cue, human response to, 220 
Voltage-charge, 48 
Voltage-current, 48 
Voltage-dependent current source, 128 
Voltage division, simple circuits via, 51 
Voltage droop control, 442 
Walking robots. See Robots 
Wang, H., 386,453,623 
Wang, J. Z., 109,116 
Water clock, 4 
Water level control, in steam generator, 333 
Watt, James, 5 
Waveforms, 19 
Weiss, R., 152,160 
Welkowitz, W, 109,116 
Wie, B., 624 
Winders, 25 
Windmill speed control, 4-5 
Wind turbines, 446 
Wittenmark, B., 759,780 
Wolfson, P., 233 
Wong, M. C, 386,453 
Woods Hole Oceanographic Institution, 317 
Wormly, D. N., 28,32,110,116,160,233,300,337,386,453, 
532,624,662,721 
Xia, X., 31,110,115,159,232,299,337,386,452,531,623,662, 
721,780 
Xiong, Y., 233 

926 
Index 
Yan, T., 330,338,447,454,662 
Yaniv, Y., 292,300 
Yingst, J. C, 780 
Yoneyama, T., 116,453,623 
Zbinden, A. M., 32 
Zedka, M., 223,234 
Zero(s), 162-163 
entire row is, 310-311 
in first column, 308-309,314-315 
of first-order system, 163 
in Routh table, 308-311 
system response with, 191-196 
of transfer function, 163 
two-pole system and, 191 
Zero-input response, 203 
Zero-order hold 
ideal sampling and, 730 
modeling, 729-730 
Zero-order sample-and-hold, 726, 
730 
Zero-state response, 203,214 
Zhou, B. H., 221,234 
z-plane 
digital system stability via, 742-743 
s-plane mapping onto, 743 
z-transform, 728,730-735 
digital control systems and, 730-735 
sampled-data systems and, 739 
table of, 732 
theorems, 733 
of time function, 731-732 

Unmanned Free-Swimming 
Submersible Vehicle 
Pitch Control System 
Pitch 
command 
W * < 
Pitch gain 
<)-J -Ki 
i 
Commanded 
elevator 
deflection 
•Xtf* *-W -
V 
Elevator 
actuator 
i + 2 
Elevator 
deflection 
Vehicle 
dynamics 
$.(*) 
-0.125(5+0.435) 
(s+[.23){s2+0.226s+0.0\69) 
Pitch rate 
sensor 
A.2» 
Pitch 
«M 
Heading Control System 
Heading 
command 
Vc<*) + 
Heading 
gain 
Commanded 
rudder 
Rudder 
Rudder 
deflection 
actuator 
deflection 
Vehicle 
dynamics 
Heading 
(yaw) 
rate 
-0.125(5 + 0.437) 
(.9+1.29)(5 + 0.193) 
Yaw 

Modeling 
Vols) 
Z2(s) 
Vi(s) 
Zi(») 
(2.97); 
V0(s) 
Zl(s) + Z2(s) 
°1 = 1 = ^- 
(2.133); 
/ 
Number of teeth of 
V 2 
gear on destination shaft 
Number of teeth of 
V gear on source shaft 
/ 
ft,, fr) 
£„(*) 
K,/(RaJm) 
U> 
S + T-ID 
K,Kh 
Vi(s) 
Ziis) 
Tt 
e2 
Ni 
(see after 2.138) 
(2.153) 
KL=Tsm 
( 2 1 6 2 ) . 
^
= _ ^ L _ 
"•a 
^a 
^) no-load 
(2.163) 
^ ) = - ^ | = C(5l-A)- 1B + D 
(3.73) 
Time Response 
Tr = — 
(4.9); 
Ts = - 
(4.10) 
a 
a 
G(s) 
(4.22) 
s2 + 2t;co„s + col 
%OS = e - t ^ / V ^ ) x 100 (4.38) 
-ln(%O5/100) 
£ = 
r„ = 
^2 + In2 (%OS/100) 
(4.39) 
tfcVT^? 
(4.34); 
£ = — 
(4.42) 
%<®n 
Steady-State Error 
(2.104) 
(2.135) 
e(oo) = esicp(oc) = l + l t a G W ( " 0 ) i 
K* = K ° « 
(733) 
4 - 0 
(?(oo) = eramp(oo) = r 
- ^ - (7.31); 
Kv = \imsG(s) 
(7.34) 
hm.yG(.s) 
4-.0 
e(cc) = eparaboia(oo) = I - ^ M ( 7 . 3 2 ) ; ^ - J n p K * ) (7.35) 
Root Locus 
lKG{s)H{s) = - 1 = 1/(2* + 1)180° (8.13) 
_ J2 finite poles - £] finite zeros 
# finite poles - # finite zeros 
(2*+l)7T 
(8.27) 
(8.28) 
# finite poles — # finite zeros 
9 = J2 finite zero angles - £ finite pole angles 
K _ 
1 
j , 11 finite pole lengths 
|G(j)ff(j)| 
M 
n ^111^ zero lengths 
[ 
' 
Frequency Response 
l 
(10.52); 
<0p=<ony/\-2& 
(10.53) 
Mp = 
fflBW = <o„J{\ - 2<2) + v/4^ - 4?2 + 2 (10.54) 
#M = tan - l 
2f 
= tan 
-2?2 + 0 + 4C4 
2v^ 
1 + , 
TV? 
(11.9); 
|GC(M 
(10.73) 
(11.11) 
(11.12) 
C 
CA 
CAn~ 
State Space 
CM = [B AB A2B ••• A'^B] 
(12.26) 
x = (A - BK)x + Br; y = Cx (12.3); O M = 
ex = (A-LC)e x; 
y-y 
= Ccx 
(12.64) 
Digital Control 
e"(oo) = lim(l - z~] )E{z) 
(13.66) 
£ p = limG(z) 
(13.70); 
Kv =-\\m(z 
- l)G(z) 
(13.73) 
(12.79) 
4-.0 
Ka=~\im(z-lfG(z) 
(13.75) 
l 
z—l 


