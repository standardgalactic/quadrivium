Muhammad Usman
Vallipuram Muthukkumarasamy
Xin-Wen Wu
Surraya Khanum
Mobile Agent-Based 
Anomaly Detection and 
Verification System for 
Smart Home Sensor 
Networks

Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home
Sensor Networks

Muhammad Usman
Vallipuram Muthukkumarasamy
Xin-Wen Wu
• Surraya Khanum
Mobile Agent-Based
Anomaly Detection
and Veriﬁcation System
for Smart Home
Sensor Networks
123

Muhammad Usman
Department of Computer Sciences
Quaid-I-Azam University
Islamabad
Pakistan
Vallipuram Muthukkumarasamy
School of Information and Communication
Technology
Grifﬁth University
Gold Coast, QLD
Australia
Xin-Wen Wu
School of Information and Communication
Technology
Grifﬁth University
Gold Coast, QLD
Australia
Surraya Khanum
Department of Computer Sciences
Quaid-I-Azam University
Islamabad
Pakistan
ISBN 978-981-10-7466-0
ISBN 978-981-10-7467-7
(eBook)
https://doi.org/10.1007/978-981-10-7467-7
Library of Congress Control Number: 2017962994
© Springer Nature Singapore Pte Ltd. 2018
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part
of the material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations,
recitation, broadcasting, reproduction on microﬁlms or in any other physical way, and transmission
or information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar
methodology now known or hereafter developed.
The use of general descriptive names, registered names, trademarks, service marks, etc. in this
publication does not imply, even in the absence of a speciﬁc statement, that such names are exempt from
the relevant protective laws and regulations and therefore free for general use.
The publisher, the authors and the editors are safe to assume that the advice and information in this
book are believed to be true and accurate at the date of publication. Neither the publisher nor the
authors or the editors give a warranty, express or implied, with respect to the material contained herein or
for any errors or omissions that may have been made. The publisher remains neutral with regard to
jurisdictional claims in published maps and institutional afﬁliations.
Printed on acid-free paper
This Springer imprint is published by Springer Nature
The registered company is Springer Nature Singapore Pte Ltd.
The registered company address is: 152 Beach Road, #21-01/04 Gateway East, Singapore 189721, Singapore

Dedicated to the research community…

Preface
The rapid technological developments in microelectronics and associated tech-
nologies have realized contemporary networking and computing paradigm, viz.
shared sensor networks. This paradigm primarily relies on tiny sensor nodes, as key
building blocks, to form a number of applications such as smart transport system,
smart home, smart cities, smart irrigation system, and infrastructure and environment
monitoring. The tiny sensor nodes, in the above-cited application domains, are
vulnerable to in situ attacks, errors, and faults. On the similar account, the data sent
by tiny nodes in the form of sensor readings is susceptible to transit attacks and
errors. A multi-aspect and comprehensive anomaly detection and veriﬁcation system
is, therefore, desired to aptly identify anomalies (or abnormalities) and convey this
information to a central node. The system is known as abnormality identiﬁcation and
conﬁrmation system in the subsequent discussion. The contemporary abnormality
identiﬁcation systems are unable to accurately detect the causes of abnormalities.
The solitary focus of existing systems is on the identiﬁcation of abnormalities. To
determine the root causes of abnormalities is imperative to remove them.
This book has elucidated an on-the-spot conﬁrmation service for sensor net-
works, which leverages from the mobile agent technology to ascertain the root
cause of abnormalities. A detailed system, which is not only able to detect
abnormalities but can also identify the root cause of abnormalities, is introduced for
smart home sensor networks. The system empowers mobile agents to employ data
which is received through a synchronized resource management technique to carry
out the in situ analysis of susceptible nodes. The synchronized resource manage-
ment technique allows tiny nodes to share statuses of their resources with related
cluster leader nodes for better network resource administration. Moreover, the key
proposition of the work presented in this book is to use the information received
through the synchronized resource management technique to identify numerous
kinds of resource-consumption status-related abnormalities. Another key aim of the
presented system is to maximize the usage of received synchronized resource
management technique-based observations for abnormality identiﬁcation. In this
account, the statistical relationships between varied features of interest are exploited
to identify abnormalities which occur due to faults on nodes and exhaustion of
vii

resource and denial-of-sleep attacks. The system employs the data received from
synchronized resource management technique-based observations using mobile
agents to verify the root causes of abnormalities.
The frequent transmissions of mobile agents cannot be performed due to the fact
that transmission is an energy-expensive operation as compared to processing
operation. To solve this problem, two methods, namely weighted-sum optimization
and 2-sigma, are presented. The nature of the proposed effective mobile agent
transmission methods is generic. The proposed methods, therefore, can also be
employed by other mobile agent-enabled applications for wireless sensor networks.
This book has also introduced a mobile agent-enabled method that performs
abnormality identiﬁcation and conﬁrmation using cross-layer features. It employs
fuzzy logic and cross-layer optimization techniques to identify cross-layer abnor-
malities and optimize mobile agent transmission. A regions computation technique
is presented, which employs statistical methods to facilitate decision making about
mobile agent transmission and abnormality identiﬁcation. A cross-layer rule-base,
based on the fuzzy logic, is presented along with algorithmic speciﬁcations to
identify abnormalities and to facilitate transmissions of mobile agents after taking
into account the communication link states.
A non-validated system design may adversely affect the resources of a wireless
sensor network or even it may go into a standstill state. Therefore, this study
extends the theory of Petri net to the formal characterization and investigation of an
abnormality identiﬁcation and conﬁrmation system which employs mobile agent
technology in tiny resource-constrained sensor networks. Formal deﬁnitions, of the
presented system, using standard Petri net, are elucidated to formalize and verify the
behavioral characteristics and also ﬂow of the work of the presented methods.
A Generalized Stochastic Petri net (GSPN) model is formulated to study the
time-based conduct of the presented system in an immensely non-deterministic
communication environment of wireless sensor networks. The formal behavior is
then veriﬁed by experiments that are carried out on a real test bed. The performance
of the proposed methods is thoroughly analyzed through theoretical analyses,
experimentation on a real test bed, extensive simulations, and comparisons with
related schemes. The results indicate the abilities of the proposed methods to detect
different nature of abnormalities with high accuracies and increase network lifetime
by optimizing mobile agent transmission in addition to effectively identifying the
sources of abnormalities.
This book has focused on a single node mobile agent itinerary model. In future
work, the proposed work could be extended to a multi-node mobile agent itinerary
model in large-scale networks. Another possible extension could be the exploitation
of higher-order joins to detect more complex natures of abnormalities.
Islamabad, Pakistan
Muhammad Usman
Gold Coast, QLD, Australia
Vallipuram Muthukkumarasamy
Gold Coast, QLD, Australia
Xin-Wen Wu
Islamabad, Pakistan
Surraya Khanum
viii
Preface

Acknowledgements
The work elucidated in this text is based on the study carried out by the lead author
under the supervision of co-authors Prof. Vallipuram Muthukkumarasamy and Dr.
Xin-Wen Wu. Ms. Surraya Khanum has been involved in reﬁning and improvement
in certain aspects of the research work.
Authors are deeply indebted to Associate Professor Farooq Ahmed, a former
colleague of the lead author, for introducing him to a rich body of knowledge,
namely Petri net theory, which ultimately stimulated authors to explore structural
and system-speciﬁc behavioral properties of the elucidated methods.
Authors acknowledge the generous ﬁnancial support provided by Grifﬁth
University to fully fund this research study and to provide several travel grants to
present and publish ﬁndings in multiple conferences and also publish in several
top-tier journals. Authors would also like to thank Mrs. Robynee Barnes and others
of GELI for their help in improving the presentation of this book.
Authors are also indebted to current and past members of the Network Security
Research Group, Grifﬁth University, for their criticism and suggestions which have
helped authors to improve the quality of the work presented in this text.
ix

Contents
1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.1
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.1.1
Wireless Sensor Networks . . . . . . . . . . . . . . . . . . . . . . .
1
1.1.2
Agents in Sensor Networks . . . . . . . . . . . . . . . . . . . . . .
3
1.2
Motivation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.3
Problem Domain . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.4
Book Organization
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
References
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.1
Sensor Network Security
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
2.2
Abnormality Identiﬁcation
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
2.2.1
Statistical Schemes . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
2.2.2
Artiﬁcial Intelligence and Agent-Based Schemes
. . . . . .
19
2.2.3
Learning Schemes
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
2.2.4
Other Schemes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28
2.3
Security of Agents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
2.3.1
Securing Agents on Middleware
. . . . . . . . . . . . . . . . . .
33
2.3.2
Other Approaches . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34
2.4
Formal Modeling and Analysis . . . . . . . . . . . . . . . . . . . . . . . . .
35
2.5
Limitations
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36
2.6
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
2.7
Bibliographic Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
References
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
3
Abnormality Identiﬁcation and Conﬁrmation System
. . . . . . . . . . .
45
3.1
Introduction
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
3.2
Terminologies and Formal Deﬁnitions
. . . . . . . . . . . . . . . . . . .
45
3.3
Network Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
46
3.4
Architecture of Abnormality Identiﬁcation and Conﬁrmation
Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
xi

3.4.1
Abnormality Identiﬁcation and Conﬁrmation
Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
3.5
Algorithms and Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
50
3.5.1
Features Collection by the Cluster Member Node . . . . . .
52
3.5.2
Abnormality Identiﬁcation by the Cluster Leader
Node . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53
3.5.3
Anomalous Node Conﬁrmation . . . . . . . . . . . . . . . . . . . .
54
3.5.4
Status Update on the Cluster Leader Mote . . . . . . . . . . .
55
3.5.5
Update of Status on Base Station . . . . . . . . . . . . . . . . . .
56
3.5.6
Complexity Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . .
56
3.6
Formal Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
3.7
Uniﬁed GSPN Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
3.8
Time-Based Behavior Validation . . . . . . . . . . . . . . . . . . . . . . . .
71
3.9
Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
3.10
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76
3.11
Bibliographic Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76
Appendix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
80
4
First-Order Abnormalities: Agent Transmission Optimization
. . . .
81
4.1
Introduction
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
4.2
Algorithms and Analysis
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
4.2.1
First-Order Abnormality Identiﬁcation
by the Cluster Leader Mote . . . . . . . . . . . . . . . . . . . . . .
82
4.2.2
2-Sigma Optimization by the Cluster Leader Mote . . . . .
84
4.2.3
Weighted-Sum Optimization
. . . . . . . . . . . . . . . . . . . . .
86
4.2.4
Complexity Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . .
89
4.3
Formal Modeling and Analysis . . . . . . . . . . . . . . . . . . . . . . . . .
91
4.3.1
Model Formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
4.3.2
Formal Characterization and Analysis
. . . . . . . . . . . . . .
92
4.4
Performance Evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
4.4.1
Simulation Study
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
4.4.2
Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
102
4.4.3
Comparative Study and Discussion
. . . . . . . . . . . . . . . .
105
4.5
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
107
4.6
Bibliographic Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
107
References
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
108
5
Cross-Layer Identiﬁcation and Transmission of Agent Using
Fuzzy Logic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
5.1
Introduction
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
5.2
Network Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
110
5.3
Cross-Layer Abnormality Identiﬁcation Module Architecture . . .
111
5.4
The Proposed Scheme
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
112
xii
Contents

5.4.1
Cross-Layer Feature Set
. . . . . . . . . . . . . . . . . . . . . . . .
112
5.4.2
Regions Computation
. . . . . . . . . . . . . . . . . . . . . . . . . .
113
5.4.3
Cross-Layer Rule-Base
. . . . . . . . . . . . . . . . . . . . . . . . .
115
5.5
Algorithm and Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
116
5.5.1
Complexity Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . .
117
5.6
Formal Modeling and Analysis . . . . . . . . . . . . . . . . . . . . . . . . .
118
5.7
Performance Evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
120
5.8
Discussion
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
125
5.9
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
126
5.10
Bibliographic Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
127
References
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
127
6
Conclusions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
129
6.1
Book Outlook . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
129
6.2
Limitations
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
132
6.3
Further Research . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
133
References
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
134
Appendix A: Reachability Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
Bibliography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
139
Contents
xiii

About the Authors
Dr. Muhammad Usman received his Ph.D. from the School of Information and
Communication Technology, Grifﬁth University, Australia. He has obtained
Juniper Networks, USA, certiﬁcations as an Internet specialist and Internet asso-
ciate in enterprise routing and switching. He is a member of the Network Security
Research Group and the Institute for Integrated and Intelligent Systems (IIIS),
Grifﬁth University, Australia. He is also a member of the Computer Science
Teacher Association endorsed by the Association for Computing Machinery
(ACM), USA. He is currently associated with the Department of Computer
Sciences, Quaid-I-Azam University, Pakistan, as an Assistant Professor. His current
research interests are security and privacy, cloud computing, Internet of things,
distributed systems, and modeling and analysis. He has published over twenty-ﬁve
research papers for international journals and conferences including prestigious
journals such as IEEE Transactions on Consumer Electronics. He has been a
recipient of several honors, awards, and grants throughout his industrial and aca-
demic career.
Dr. Vallipuram Muthukkumarasamy obtained his B.Sc. in Engineering from the
University of Peradeniya, Sri Lanka, and his Ph.D. from Cambridge University,
England. He is currently attached to the School of Information and Communication
Technology, Grifﬁth University, Australia, as an Associate Professor. His current
research areas include the investigation of security issues in wireless networks,
sensor networks, trust management in mobile ad hoc networks (MANETs), key
establishment protocols and medical sensors. He currently heads the Network
Security Research Group at the Institute for Integrated and Intelligent Systems at
Grifﬁth University. Also providing leadership with regard to innovative learning
and teaching practices, he has received a number of best teacher awards.
Dr. Xin-Wen Wu received his Ph.D. from the Chinese Academy of Sciences,
Beijing. He has worked in the University of California, San Diego (as a postdoc-
toral researcher), the Chinese Academy of Sciences, and the University of
Melbourne (as a research fellow). He was also afﬁliated with the University of
Ballarat, Australia. He joined Grifﬁth University, Australia, in 2010 as a faculty
xv

member at the School of Information and Communication Technology. His
research interests include cyber security and data privacy, applied cryptography,
coding techniques, and information theory and its applications. He has published
extensively in these areas, including 3 books and over 80 research papers in leading
journals of IEEE, Springer, and Elsevier, in addition to proceedings of international
conferences. He is a senior member of IEEE.
Ms. Surraya Khanum received her M.S. (Computer Science) from International
Islamic University, Islamabad, Pakistan. She has been associated with Grifﬁth
University, Australia, as a visiting research associate. She has also worked as a
Lecturer at King Khalid University, Saudi Arabia, and as a Visiting Lecturer at
Department of Computer Sciences, Quaid-I-Azam University, Pakistan. She has
published numerous research papers, predominantly in the domains of mobile
agent-based distributed systems and intrusion detection systems.
xvi
About the Authors

Acronyms
AA
Anomaly veriﬁcation Agent
ADM
Anomaly Detection Module
ADVM
Anomaly Detection and Veriﬁcation Module
AIS
Artiﬁcial Immune System
ARIMA
Auto Regressive Integrated Moving Average
ART
Adaptive Resonance Theory
AU
Aggregation Unit
BS
Base Station
BY
BatterY status
CAP
Contention Access Period
CFP
Contention Free Period
CLN
Cluster Leader Node
CRC
Cyclic Redundancy Check
CRM
Coordinated Resource Management
CU
Coordination Unit
DoS
Denial of Service
DTQ
Data Transmission Quality
DWT
Discrete Wavelet Transform
ECG
ElectroCardioGram
EEPROM
Electrically Erasable Programmable Read-Only Memory
EM
Expectation Maximization
GA
Genetic Algorithm
GEP
Gene Expression Programming
GPS
Global Positioning System
GSPN
Generalized Stochastic Petri Net
GTS
Guaranteed Time Slots
HMM
Hidden Markov Model
IDS
Intrusion Detection System
LEACH
Low-Energy Adaptive Clustering Hierarchy
LIFO
Last In First Out
xvii

LQI
Link Quality Indicator
MA
Mobile Agent
MAC
Medium Access Control
MAS
Mobile Agent Server
MAW
Mobile Agent Watermarking
NA
Nodal Agent
PAN
Personal Area Network
PCA
Principal Component Analysis
PER
Packet Error Rate
PHY
PHYsical layer
PN
Petri Net
RAM
Random Access Memory
RERR
Route ERRor
RF
Radio Frequency
ROC
Receiver Operating Characteristic
ROM
Read-Only Memory
RSSI
Received Signal Strength Indicator
RTS
Ready To Send
SA
Static Agent
S-MAC
Sensor-Medium Access Control
SR
Sensor Reading
SSH
Secure SHell protocol
SVM
Support Vector Machine
TDMA
Time Division Multiple Access
UoD
Universe of Discourse
VNL
Victim Node List
WSN
Wireless Sensor Network
xviii
Acronyms

Notations
Table 1 Notations and their deﬁnitions
Notation
Deﬁnition
a to f
User set adjustment parameters
a to f 
Variables to compute domains of fuzzy numbers
A
Anomalous fuzzy number
Al
r and Ar
r
Left and right bounds of the anomalous region
AA
Anomaly veriﬁcation agent
AO
Anomalous observations
AS
Action set
Arep
Application repository
Adata
Application data
Aunt
Aggregation unit
Bl
c
Battery current level
Bl
t
Battery threshold level
BA
Anomalous behavior
BTg
Tolerated category 1 behavior
BTd
Tolerated category 2 behavior
BTf
Tolerated category 3 behavior
Beh
msnq behavior
CU
Coordination unit
clnq
qth cluster leader node
dag
Aggregated sensed data
dal
Anomaly alarm
da
i g
ith Aggregated sensed data
da
i l
ith anomaly alarm
E
Edges denoting communication links
(continued)
xix

(continued)
Notation
Deﬁnition
f
Received packet count
fi
ith feature
F
Set of arcs
a to f
User-deﬁned adjustment variables
a to f
User-deﬁned adjustment variables
Table 2 Notations and their deﬁnitions
Notation
Deﬁnition
Fq
Collection of values of features of qth node
FS
Features of interest
FS1
Features ‚, /, and v
FS2
Features i and f
G
A graph denoting a smart home sensor network
h
Number of historical observations used to compute agent transmission score
Hð:Þ
Inhibition function
Ið:Þ
Input function
msnq
qth cluster member node
m fq
fx
Value of a ﬁxed value feature
m fq
rg
Value of a continuous random variable feature
Mj
jth marking state
M
0
j
A marking state other than j
M0
Initial marking state
N
Normal fuzzy number
Nð‚; iÞ
First-order join for in situ fault or attack
Nði; vÞ
First-order join for resource exhaustion attack
Nð/; vÞ
First-order join for fault on node and attack on resource node
Nð/; iÞ
First-order join for faulty node
Nðf ; iÞ
First-order join for denial-of-sleep attack and faulty node
O þ ð:Þ
Output function
Oj
jth observation
pi
ith place
P
Set of places
P fq
fx
Normal proﬁle value of a ﬁxed value feature
Plb
rg
Lower bound of a continuous random variable feature
Pub
rg
Upper bound of a continuous random variable feature
Prfq
Normal proﬁle bound of qth node
R
In situ veriﬁcation result
(continued)
xx
Notations

(continued)
Notation
Deﬁnition
RP
Repository
RS
Resource status
RMðM0Þ
Reachable marking from initial state
sl and sr
Left- and right-side standard deviation values
St
AA
Anomaly veriﬁcation agent transmission score
Smsnq
Historical observation score to transmit anomaly veriﬁcation agent
Smsnq
Segment of the stack memory of msnq
Sagntq
Segment of the stack memory of agntq
ti
ith transition
T
Tolerance fuzzy number
T
Set of transitions
Tlb
i
Start time of a timeslot
Tub
i
Finish time of a timeslot
TFq
ar
Function to compute time of arrival of Fq
TWR
ar
Time of arrival of a watermarked result
TR
Trust value
TarðFqÞ
Function to compute time of arrival of Fq
V
Vertices denoting nodes
V1
The laptop-class node (top-level node)
V2
Cluster leader node (intermediate-level node)
V3
Cluster member node (leaf-level node)
WR
Watermark
W(.)
Rate or weight for timed or immediate transitions
Pð:Þ
Priority function
a1
Weighting factor for tolerated instance of fi
a2
Weighting factor for anomalous instance of fi
r
Firing sequence
Table 3 Notations and their deﬁnitions
Notation
Deﬁnition
‚
Minimum to maximum bounds to sensor reading
i
Time interval
/
Values of entitled actions by cluster member node
v
Resource status of cluster member node
j
Anomaly detection action
s
Tuning action
w; f; d; g
Thresholds for agent transmission
Notations
xxi

Chapter 1
Introduction
A fundamental feature of resource-limited wireless sensor networks (WSNs) which
distinguishes them from traditional networking paradigms is their data-centric
nature. Reliable data reception is of paramount importance in order to accomplish
application-speciﬁc tasks in WSNs. The classical approach for abnormality identi-
ﬁcation is to detect abnormalities in received data at a central or distributed loca-
tions in a network. This approach is, however, unable to identify the root cause of
abnormalities, that is, if abnormalities are occurred on-the-spot or in transmission.
The work elucidated in this book has introduced an innovative approach to conﬁrm
the root cause of abnormalities by employing mobile agents (or merely agents for
brevity). The detailed abnormality identiﬁcation and conﬁrmation system along with
its underlying methods is designed, evaluated, and analyzed throughout this book.
1.1
Overview
1.1.1
Wireless Sensor Networks
Wireless sensor networks (sensor networks for brevity) are formed of numerous tiny
nodes (or motes) [1]. A mote typically has one or more sensors (i.e., transducers)
andanalog-to-digitalconverters.Thetransducersperiodicallyorcontinuouslysensea
physical phenomenon (depending upon application requirements) and convert phys-
ical or environmental parameters into electrical signals. This signal is then passed
through a conditioning phase which performs various functions such as ﬁltering and
analog-to-digital conversion. The digital signal is then used by a tiny processor for
application-speciﬁc processing. Sensed data is typically forwarded to a base station, a
central authority, through a multihop or single-hop communication link. A user (or a
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7_1
1

2
1
Introduction
system administrator) can then retrieve and analyze received sensed data through a
user application.
Recent advancements in the domain of information technology have enhanced
the use of sensor networks in several application domains such as smart irrigation
systems, health monitoring, smart home, smart cities, smart transport systems, and
industrialmonitoringandprocesscontrol[2].Theseapplicationsarebrieﬂydiscussed
below.
Smart home: Tiny sensors are used for smoke detection, automated doors and win-
dows, motion detection, automatic air condition switches, and many such purposes in
a smart home environment. These sensing devices form a smart home senor network
which is managed locally or remotely through a smart phone or computing device
application.
Built infrastructure monitoring: Frequent physical inspections and monitoring of
a built infrastructure are not possible due to the growth in the numbers of construction
of buildings, bridges, and other mechanical or civil structures in recent years. Sensors
are, therefore, deployed for structural health monitoring, damage detection, and even
for an automated control of structures.
Health monitoring: Advancements in healthcare facilities including medicines have
caused a rapid decrease in morbidity rates in recent years. This has resulted in an
increase in an aging population. The implanted, wearable, and ambient monitoring
sensors form a class of sensor networks, namely body area networks, to offer health
monitoring services for the elderly.
Industrial monitoring and process control: Increasing a productivity and safety
of manufacturing plants and staff are growing requirements for many large-scale
organizations. Tiny sensors are used for industrial automation, process control, and
manufacturing monitoring to meet productivity and safety requirements.
Smart cities: Sensor networks are one of the essential constituent technologies of
smart cities. Sensors can be used to monitor trafﬁc, street lights, environment, trans-
portation, water consumption, electricity consumption, and gas consumption in smart
cities.
Sensor networks offer a unique and coherent amalgamation of distributed sens-
ing, processing, and communication capabilities. This characteristic distinguishes
sensor networks from the rest of the networks. Some other distinguishing features of
sensor networks are discussed below. Mote, fundamental building blocks of sensor
networks, has low battery power, small memory, low computational capacity, and
limited communication range. Sensor networks have different deployment types such
as ﬂat or cluster-based and ﬁxed or mobile deployment. The nature of motes with
respect to resources in sensor networks is either a homogeneous or heterogeneous.
Motes interact with their environment in order to sense and report a physical phe-
nomenon to a cluster leader or base station. The data trafﬁc pattern of sensor networks
is, therefore, different from traditional networks. Sensor networks may have bursty
data trafﬁc patterns in some applications, that is, motes detect an event such as ﬁre

1.1 Overview
3
and then continuously track and report it to a central node [3]. Alternatively, in some
applications such as built infrastructure monitoring, motes may periodically report
the status of a structure to a central node [4]. Other distinguishing features of sen-
sor networks include an application-orientated nature, the absence of network-wide
global identities, and the data-centric nature of networks. These unique characteris-
tics demand a carefully articulated design of the sensor network application in order
to effectively achieve application-speciﬁc goals.
1.1.2
Agents in Sensor Networks
A software agent is typically composed of data and code [5]. It can roam among
different motes in order to perform its designated task. An agent works autonomously,
and it may communicate with other agents and entities such as other motes, cluster
leaders, and a base station in a network. There are two types of agents, namely weak
and strong with respect to mobility [6]. In the case of weak mobility, only states of
code and data are maintained, that is, a new execution of an agent starts on the next
mote. On the other hand, in the case of strong mobility, the state of the execution
of an agent is halted at a random point in time on a mote and then continues it on
the next mote. The execution of agent resumes from the state it was stopped on the
previous mote. Note that in the case of strong mobility, data, execution state (i.e.,
status of stack and program counter), and code are all transmitted from one mote to
another mote.
Sensor networks have been traditionally based on a client-server computing
model. In this computing model, motes gather sensed data from a physical phe-
nomenon and transmit it to a corresponding cluster leader or base station depending
upon the network topology. Sensor networks, however, typically have a low network
bandwidth, which can cause congestion or a bottleneck problem at cluster leader or
base station motes. In order to solve such problems, Qi et al. [7] suggested the use
of agents for multiresolutional data integration in resource-limited networks.
Over the years, agents have been successfully employed in sensor networks in
order to perform a number of tasks, for instance, parallelism, code and data dissem-
ination, localization, fusion of distributed data, collaborative signal and information
processing, and security services [5, 7]. A few prominent beneﬁts of agents are given
below [8]. (i) They can take computing operations to the sources of data instead of
anticipating transfer of raw data over unreliable links. This can decrease the costs of
energy which are otherwise incurred. (ii) Agents reduce network latency. (iii) Agents
are autonomous entities, as they are able to perform asynchronous operations. This
feature enables the initiator motes of agents to perform other operations. (iv) Finally,
agents add the properties of fault tolerance and robustness in a system.
Despite several advantages, there are a few challenges which should be considered
before deploying agents in sensor networks. The key challenges are controlling com-
munication cost, the size of the agent, and the inter-mote movement of the agents.
Transmission is an expensive operation as compared to a processing operation. A

4
1
Introduction
transmission of a single bit costs as much energy as is consumed by an execution of
800–1000 instructions [9]. The size of agents may affect both energy and memory
resources. Agents, therefore, should be efﬁciently programmed in order to minimize
their impact on the memory of a sensor mote. Memory techniques such as virtual
memory, stack, and last in, ﬁrst out (LIFO) may be adopted in order to accommodate
a large-sized agent or multiple agents on a single mote. An inter-mote agent move-
ment may pose security threats. Therefore, an appropriate security mechanism must
be incorporated in order to secure agents against antagonist motes and legitimate
motes against adversary agents.
1.2
Motivation
Over the course of the last decade, sensing technology has appeared as a promi-
nent research domain in information technology, largely due to its popularity among
numerous applications. This fact has motivated the research community to design
innovative solutions for sensor networks. The work carried out in this study is an
attempt to design, evaluate, and analyze a robust system with its underlying meth-
ods for sensor networks. The nature of the presented system is generic, so that it
can be deployed on most of the periodically sensed data transmitting applications.
The proposed system and underlying methods are, however, tailor-made for the two
applications, namely built environment monitoring [10] and smart home sensor net-
work [11].
In a built environment monitoring application, motes are deployed on multiple
buildings in order to monitor usages of water, electricity, gas, and also emissions
of carbon dioxide (CO2). Motes transmit sensor readings to their respective cluster
leaders after a speciﬁed interval of time. Cluster leaders then forward aggregated data
to a base station. A user can make decisions by performing an analysis on received
data. On the other hand, as discussed in the previous section, motes such as gas
sensors and temperature sensors sense their environment and transmit readings to
a central node in a sensor network. Sensed data, at a central node, is then used to
know the current state of a sensed phenomenon and to take appropriate action(s), if
required. A typical smart home sensor network is depicted in Fig.1.1.
In both of the above-stated practical applications, low resource motes are des-
ignated to perform a sensing task and then to report that sensed data to respective
resource-rich cluster leaders or a base station mote. The desired performance of both
motivatingapplicationsislargelyreliantoncorrectnessofvaluesoftheobtainedread-
ings at a central supervisory mote. Motes along with their transmitted sensor readings
are, however, susceptible to both types of abnormalities, that is, in situ (on-the-spot)
and in transit (in transmission). These abnormalities can be caused by numerous fac-
tors such as errors, attacks, and faults. Application-speciﬁc goals of a sensor network
cannot be achieved without timely detecting inconsistencies in received sensed data.
This study, therefore, has presented an abnormality identiﬁcation and conﬁrmation
system which not only can detect abnormalities with high accuracy, but also can ver-

1.2 Motivation
5
Fig. 1.1 Smart home sensor network
ify the source of abnormalities to effectively counter them. The proposed system has
exploited a heterogeneous nature of devices in sensor networks. The system is set up
that most of the abnormality identiﬁcation and on-the-spot conﬁrmation processing
are performed by resource-rich motes.
1.3
Problem Domain
Abnormality identiﬁcation systems are typically deployed to ﬁnd abnormal and
infrequent patterns in network data [12]. Over recent years, the research domain
of the abnormality identiﬁcation in resource-constrained networks has fascinated
the research community [13–16], mainly because of its signiﬁcance to provide key
services such as secure working of a network, event reporting, and data reliability.
This study, however, has focused on the two main services, namely fault detection
and intrusion detection.
A well-equipped and well-designed abnormality identiﬁcation and conﬁrmation
system must be capable of identifying the root causes of occurrence of abnormalities
after their detection in order to effectively mitigate them. Nevertheless, the existing
schemes are only designed to detect abnormalities [13–16], which severely limits
their effectiveness. The identiﬁcation of sources of abnormalities can be carried out
throughon-the-spotconﬁrmationofasusceptiblemote.Theon-the-spotconﬁrmation
of a susceptible mote can be typically carried out by the physical conﬁrmation of

6
1
Introduction
a malicious mote. However, recurrent physical accesses to motes are not always
possible, especially when they are positioned on hazardous terrains or within the
premises of privately owned buildings and infrastructures. The approach of a physical
diagnosis is also time-consuming.
This study has, therefore, introduced an automated and efﬁcient service to per-
form on-the-spot conﬁrmation of the mistrustful behavior of a mote using agents. A
detailed system, with underlying methods, is designed. The system uses information
received through a synchronized resource management scheme to detect different
natures of abnormalities. The synchronized resource management scheme facilitates
the sharing of resource status by motes with their cluster leaders for better resource
management. An operating system for sensor networks, namely TinyOS, facilitates
the synchronized resource management mechanism, also known as the Coordinated
Resource Management (CRM) mechanism, by means of low-level interfaces in order
to administer and share state of the hardware of a mote over the network [17, 18]. This
study has employed synchronized resource management scheme-based information
to detect different nature of abnormalities such as those triggered by anomalous
sensor reading values and memory and battery statuses of motes. The statistical rela-
tionship among features of the synchronized resource management scheme-based
observations is investigated to identify more complex nature of abnormalities such
as produced by resource exhaustion and denial-of-sleep attacks, and mote faults. The
synchronized resource management scheme-based observations are further used by
agents to conﬁrm the cause of abnormalities.
The cautious transmission of agents is desired in sensor networks because of the
resource-limited characteristics of tiny motes (as discussed in previous section). In
order to carefully but effectively transmit agents, the two methods, namely 2-sigma
and weighted-sum optimization, are elucidated. This study has also presented a cross-
layer scheme which can discover cross-layer abnormalities and can also effectively
transmit agents after consulting the current state of a communication link. An under-
lying regions computation method is presented in order to deﬁne different regions
over a cross-layer feature space to facilitate the processes of agent transmission and
detection of abnormalities. A corresponding cross-layer fuzzy logic rule-base is for-
mulated, and algorithmic speciﬁcations are presented for agent transmission and
detection of cross-layer abnormalities.
The completeness and correctness are key properties that need to be veriﬁed
before the deployment of a system. A system, without its validation, may go into
a halt state or it may not be able to satisfy the user requirements. Formal methods
and formal modeling languages, such as Petri nets, specify formal deﬁnitions and
facilitate the veriﬁcation of large and complex systems [19]. This study, therefore,
extends the Petri net theory to address and formally verify the algorithmic properties
of the system. Furthermore, not considering the effect of temporal behavior of the
time-sensitive abnormality identiﬁcation and identiﬁcation systems may reduce their
utility after their deployment. Therefore, the Petri net model veriﬁcation is performed
to formulate a Generalized Stochastic Petri net (GSPN) model to examine time-
based conduct of the presented system. This process has also helped in enabling the
system to detect temporal abnormalities which are caused because of late arrivals

1.3 Problem Domain
7
of data packets containing on-the-spot conﬁrmation results and values of features.
The theoretical analyses, simulations, experiments on a real test bed, and comparison
with related schemes are performed to thoroughly examine the performance of the
methods in different settings.
1.4
Book Organization
This chapter has dealt with an overview of sensor networks, agents, motivating appli-
cations, and the problem domain for the study. The book is structured as described
below. Chapter 2 overviews related work, identiﬁes limitations in works presented in
the related literature, and highlights the context of this study. Chapter 3 presents the
network model, an architecture of abnormality identiﬁcation and conﬁrmation mod-
ule, and algorithmic speciﬁcations of the presented system. Chapter 3 also details
the formal speciﬁcations, formal characterization and analysis, temporal behavior
modeling, and temporal behavior validation of the system through implementation
on a real test bed. Chapter 4 explains the methods for the ﬁrst-order abnormalities
and agent transmission optimization. The formal speciﬁcations and veriﬁcation of
the methods, simulation and implementation results, and ﬁndings of a comparative
study are also discussed. Chapter 5 elaborates on the fuzzy logic-based cross-layer
system along with its theoretical and implementation results. Chapter 6 concludes
the key ﬁndings and outlines the future directions of this study.
References
1. F. Li, J. Luo, W. Wang, Y. He, Autonomous deployment for load balancing k-surface coverage
in sensor networks. IEEE Trans. Wirel. Commun. 14(1), 279–293 (2015)
2. B. Fateh, M. Govindarasu, Joint scheduling of tasks and messages for energy minimization in
interference-aware real-time sensor networks. IEEE Trans. Mob. Comput. 14(1), 86–98 (2015)
3. M.A. Serna, A. Bermudez, R. Casado, Hull-based approximation to forest ﬁres with distributed
wireless sensor networks, Melbourne, Australia (2013), pp. 265–270
4. L. Lin, C. Yang, K.J. Wong, H. Yan, J. Shen, S.J. Phee, An energy efﬁcient mac protocol for
multi-hop swallowable body sensor networks. Sensors 14(10), 19457–19476 (2014)
5. M. Dong, K. Ota, L.T. Yang, S. Chang, H. Zhu, Z. Zhou, Mobile agent-based energy-aware
and user-centric data collection in wireless sensor networks. Comput. Netw. 74, 58–70 (2014)
6. A. Fuggetta, G.P. Picco, G. Vigna, Understanding code mobility. IEEE Trans. Softw. Eng.
24(5), 342–361 (1998)
7. H. Qi, S.S. Iyengar, K. Chakrabarty, Multiresolution data integration using mobile agents in
distributed sensor networks. IEEE Trans. Syst. Man Cybern. Part C Appl. Rev. 31(3), 383–391
(2001)
8. D.B. Lange, M. Oshima, Dispatch your agents; shut off your machine. Commun. ACM 42(3),
88–89 (1999)
9. S. Khan, A.-S.K. Pathan, N.A. Alrajeh, Wireless Sensor Networks: Current Status and Future
Trends, 1st edn. (CRC Press Inc., Boca Raton, FL, USA, 2012)
10. E.U. Gaura, J. Brusey, R. Wilins, Barnham J., Wireless sensing for the built environment:
enabling innovation towards greener, healthier homes, United Kingdom (2011), pp. 1–6

8
1
Introduction
11. Y. Xue, X. Chang, S. Zhong, Y. Zhuang, An efﬁcient energy hole alleviating algorithm for
wireless sensor networks. IEEE Trans. Consum. Electron. 60(3), 347–355 (2014)
12. S. Han, M. Xie, B. Tian, S. Parvin, Anomaly detection in wireless sensor networks: a survey.
J. Netw. Comput. Appl. 34(4), 1302–1325 (2011)
13. C. O’Reilly, A. Gluhak, M.A. Imran, S. Rajasegarar, Anomaly detection in wireless sensor
networks in a non-stationary environment. IEEE Commun. Surv. Tutor. 16(3), 1413–1432
(2014)
14. M. Moshtaghi, C. Leckie, S. Karunasekera, S. Rajasegarar, An adaptive elliptical anomaly
detection model for wireless sensor networks. Comput. Netw. 64, 195–207 (2014a)
15. H. Kumarage, I. Khalil, Z. Tari, A. Zomaya, Distributed anomaly detection for industrial
wireless sensor networks based on fuzzy data modelling. J. Parallel Distrib. Comput. 73(6),
790–806 (2013a)
16. M. Xie, J. Hu, S. Han, H.-H. Chen, Scalable hypergrid k-nn-based online anomaly detection
in wireless sensor networks. IEEE Trans. Parallel Distrib. Syst. 24(8), 1661–1670 (2013a)
17. J. Waterman, G.W. Challen, M. Welsh, Peloton: Coordinated resource management for sensor
networks, Switzerland (2009), pp. 1–5
18. P. Levis, S. Madden, J. Polastre, R. Szewczyk, K. Whitehouse, A. Woo, D. Gay, J. Hill,
M. Welsh, E. Brewer, D. Culler, Tinyos: an operating system for sensor networks, in Ambient
Intelligence, ed. by W. Weber, J.M. Rabaey, E. Aarts (Springer, Berlin, 2005), pp. 115–148
19. F. Ahmad, I. Fakhir, S.A. Khan, Y.D. Khan, Petri net-based modeling and control of the multi-
elevator systems. Neural Comput. Appl. 24(7–8), 1601–1612 (2014)

Chapter 2
Background
A number of novel threats have been developed for low resource networks because
of advancements in technology and innovations in attack techniques in the recent
years. Prevention-based methods alone, therefore, may not offer a comprehensive
security and fault detection solution for sensor networks. Aptly formed detection-
based methods can supplement prevention-based methods to provide more robust
security mechanisms. Abnormality identiﬁcation is a detection-based method that is
employed for providing a security service, namely intrusion identiﬁcation. It may
also be employed in other application domains such as object tracking and fault
detection [1]. A key focus of this study is to design and analyze a system which can
detect abnormalities that are typically originated due to faults and intrusions on tiny
nodes and the data transmitted by them.
This chapter reviews related previous studies in order to underline their limi-
tations and highlight the research context of this study. Attack types and sensor
network security mechanisms are brieﬂy reviewed ﬁrst to highlight the position of
detection of abnormality mechanisms in the sensor network defense. The abnormal-
ity identiﬁcation preliminaries and the types of abnormalities in sensor networks
are then discussed. An objective of this study is to design, evaluate, and analyze a
system to detect and verify abnormalities in sensor networks. Different abnormality
identiﬁcation schemes for sensor networks are, therefore, reviewed and critically
analyzed. The related previous studies which employ agents in abnormality identi-
ﬁcation applications for sensor networks are also reviewed. A critical review on the
related research on the cross-layer abnormality identiﬁcation, security of agents, and
formal modeling and veriﬁcation is also presented toward the end of this chapter in
order to set the research context of this study.
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7_2
9

10
2
Background
2.1
Sensor Network Security
As discussed in the preceding chapter, the nature of sensor networks is different
from that of traditional computer networks. One of the foremost distinguishing char-
acteristics is the limited resources of sensor networks. Abnormality identiﬁcation
is a well-studied domain in traditional wireless and wired networks, but because
of the distinctive nature of sensor networks, these methods may not be suitable for
resource-limited networks. Another key characteristic which needs to be considered
while articulating an abnormality identiﬁcation system for sensor networks is their
wireless communication channels. Sensor networks typically operate on a broadcast
communication mode, which makes them susceptible to a variety of attacks. Sensor
networks may also adopt a point-to-point communication mode based on application
requirements. Continuous surveillance of sensor nodes in applications where they
are deployed on difﬁcult terrains is not feasible in order to protect them from physi-
cal attacks. Sensor nodes are typically deployed in a large scale. As a consequence,
it is not adequate to design a centralized security or fault detection mechanism. A
decentralized and collaborative security mechanism is, therefore, more suitable for
sensor networks in such cases.
Sensornetworksmaysufferfromabnormalitiesduetoattacks,faults,anderrors[2,
3]. The attack-based threats for sensor networks are classiﬁed into three categories,
namely Insider versus outsider, Active versus passive, and Laptop-class versus mote-
class attacks [4].
Insider versus outsider attacks: The former type of attacks are performed by
legitimate nodes, whereas latter attacks are initiated by external nodes.
Active versus passive attacks: In active attacks, an adversary node modiﬁes or
fabricates a network trafﬁc, whereas in passive attacks it just monitors or eavesdrops
transmitting data packets.
Laptop-class versus mote-class attacks: In laptop-class attacks, an antagonist
usesamorepowerfuldevicesuchasalaptop-classdevicetocarryoutattacks,whereas
nodes with similar capabilities to victim nodes are used to launch mote-class attacks.
In another threat classiﬁcation, Zia and Zomaya [5] introduced four threat classes,
namely interruption, interception, modiﬁcation, and fabrication of Fleeger [6] in
sensor networks.
Interruption: A communication link between two or more nodes is lost in an
interruption threat. Examples can be node capture and jamming attacks.
Interception: A whole network or a part of a network compromises by an antag-
onist node. For example, node capture, denial-of-sleep, resource exhaustion, black
hole, and sinkhole attacks.
Modiﬁcation: An antagonist node captures and modiﬁes data in a modiﬁcation
threat. Example attacks are denial of service (DoS) and ﬂooding attacks.
Fabrication: In this class of threats, an adversary node injects false data in a
network trafﬁc. A simple example of fabrication threats can be a sybil attack.
There are a number of measures which can be taken to secure sensor networks
from vulnerabilities and attacks. Some of the key security services are secure local-

2.1 Sensor Network Security
11
ization and data aggregation, secure auditing, cryptography, key management, secure
routing, access control, and abnormality identiﬁcation. A choice of a security ser-
vice mainly emerges from security requirements and available resources of network.
Ngai [7] classiﬁes security measures in three broad categories, namely protect, detect,
and react.
Protect: This network defense approach is based on biometrics, ﬁrewalls, and
cryptographic techniques.
Detect: The security services like intrusion and abnormality identiﬁcation belong
to the detect class of defense mechanisms. The study focuses on identiﬁcation and
conﬁrmation of sources of abnormalities which are caused by attacks and faults on
sensor nodes and their transmitted data.
React: This type of sensor network defense mechanism usually functions after
detection of attacks or faults in a network. It can be based on action(s) such as
decrement in trust count of a node, announcement of a node as a malicious or faulty,
minimizing communication with suspicious nodes, and disconnecting a node from
rest of the network.
Intrusions are activities which are carried out by antagonists to distract the normal
functionality of a node or network. A software system, namely intrusion detection
system (IDS), is employed to identify abnormalities. The prevalent IDS systems
can be classiﬁed on the basis of detection methodology, detection approach, and
detection location. The IDS can be categorized into three broad classes with respect
to the detection methodologies, namely protocol state analysis, misuse detection,
and abnormality identiﬁcation [8].
Stateful protocol analysis: The priori proﬁles of the normal activities of the
entities of a system are compared with that of real events in the process of stateful
protocol analysis to identify abnormalities. This IDS methodology is not commonly
used in sensor networks.
Misuse detection: This methodology works on the basis of priori assumptions,
experiences, knowledge, and information. It is also called rule-based IDS. In a misuse
detection method, signatures of known intrusions are matched with the current events
of the system to detect intrusion activities. This method is simple and useful for
detecting known attacks, but it cannot identify novel attacks.
Abnormality Identiﬁcation: This methodology creates a normal proﬁle of a
subject on the basis of its usual activities. After that, the normal proﬁle is compared
with the current activities of the system. Signiﬁcant deviation from normal activities
is considered as an intrusion. This method can detect novel attacks, but it is complex
and resource hungry. One of the focuses of this study is to detect abnormalities
by optimally utilizing the resources of sensor networks. There are two types of
abnormality identiﬁcation proﬁles, namely dynamic and static. The dynamic one is
automatically updated with the observance of new incidents. On the contrary, the
static one is typically established by a user and has constant behavior deﬁnition.
Deﬁning a comprehensive proﬁle that has all normal activities is not a trivial job
in sensor networks. In numerous applications, normal behavior constantly evolves.
It is, thus, a challenging task to deﬁne a usual behavior notion of a system. The

12
2
Background
speciﬁcations of an application should be considered while designing an abnormality
identiﬁcation system.
The IDS can be deployed either at a host or network level [9]. A host-based
IDS focuses on detecting misuse or abnormal use of the resources of node such as
battery, processor, and memory. On the contrary, a network-focused IDS focuses
on detecting interferences and abnormalities in network trafﬁc. Sometimes both
deployment types are used in conjunction with each other and known as hybrid
IDS. The detection location of an IDS can be either centralized or distributed. In a
case of a centralized detection location, an abnormality identiﬁcation module (AIM)
is installed on a central node, whereas ADMs are installed on several distributed
nodes in the case of a distributed detection type. The work presented in this study
employs static detection methodology, a hybrid detection approach, and a distributed
location to identify different nature of abnormalities. The problem domain of this
study, as a research map, is depicted in Fig.2.1.
Data, network, and node are three key types of abnormalities that are prevalent
in sensor networks [10]. The data abnormalities are associated with data which are
collected by a single or numerous sensors in a sensor mode. Sensor readings, which
are accumulated within a certain location, typically show similarity and consistency.
A discrepancy in the accumulated data is considered as data abnormality. There may
be numerous causes for data abnormalities for instance diverse nature of attacks,
Sensor Network Security
Prevention (Static)
Non-Prevention (Dynamic) - Intrusion Detection System
Authentication
Biometrics Encryption 
Techniques
Firewalls
Detection Methodology
Detection Approach
Detection Location
Misuse Detection Anomaly Detection Host-Based Network-Based
Centralized Distributed
Static Profile Dynamic Profile
Hybrid
Mobile Agent-Based Systems
Mobile Agent-Based Anomaly Detection System
Legends
Gray Text: Other Domains
BlackText: Related Domains
Towards Related Domains
Towards Other Domains
Stateful Protocol Analysis
Fig. 2.1 Research map

2.1 Sensor Network Security
13
Table 2.1 Abnormalities and their potential reasons: Republished with permission of Taylor and
Francis Group LLC Books, from Security for Multihop Wireless Networks, Muhammad Usman,
Vallipuram Muthukkumarasamy, Xin-Wen Wu, and Surraya Khanum, edited by Shaﬁullah Khan
and Jaime Lloret Mauri, 2014; permission conveyed through Copyright Clearance Center, Inc.
Abnormality
Potential reasons
Data
Different nature of attacks, errors, abrupt mote restarts,
abnormal events, non-synchronizations, and faults of
hardware/software
Node
Degradation of resources, mote restarts and failure,
malfunctioning, and physical threats
Network
Connectivity loss, recurrent connectivity, loops in routing,
network elements failures, and transmission storms
errors, mote restart, non-synchronization, and software or hardware errors. Data
abnormalities are classiﬁed into temporal, spatial, and spatiotemporal abnormali-
ties. Physical attacks, node failures, and node malfunctioning are usual causes of node
abnormalities. Motes are imitated by cloning in physical attacks. Node abnormalities
include resource degradation, node failures, and node resets. Network abnormalities
are instigated because of the jamming attack, that is, interference or non-availability
in the communication frequency, faults in network-wide elements such as gateways,
sensor mote failures. Network abnormalities occur due to exploiting limitations in
routing protocols [9]. A complete connectivity loss, loop in routing, recurrent con-
nectivity, and transmission storm abnormalities are also known as network abnor-
malities. The summary of the types of abnormalities and their potential reasons is
given in Table2.1 [10].
2.2
Abnormality Identiﬁcation
The research community has examined and employed numerous techniques and
methods from several disciplines such as statistics, artiﬁcial intelligence, machine
learning, data mining, and also from other domains, to design and develop schemes
to identify abnormalities. The literature of abnormality identiﬁcation is, therefore,
classiﬁed into four classes, namely statistical, artiﬁcial intelligence and agent-based,
learning, and other schemes in this section for a critical review purpose. The repre-
sentative schemes of each class are discussed in this section. It is pertinent to mention
that some schemes may belong to more than one category. They are, however, classi-
ﬁed into those classes which are more relevant. Figure2.2 [11] illustrates a high-level
abnormality identiﬁcation taxonomy in sensor networks.

14
2
Background
Anomaly Detection
Parametric
Markov Process Model
Time Series Model
Regression Analysis
Statistical Schemes
Non-Parametric
Graph Theory
Fuzzy Logic
Other Schemes
Miscellaneous schemes
Subjective Logic
Artificial Neural Network
Genetic Algorithm
Game Theory
Intelligent Agent Schemes
Artificial Immune System
Supervised
Unsupervised
Learning Schemes
Semi Suervised
Cross-Layer
Mobile Agent
Fig. 2.2 A taxonomy: Republished with permission of Taylor and Francis Group LLC Books, from
Security for Multihop Wireless Networks, Muhammad Usman, Vallipuram Muthukkumarasamy,
Xin-Wen Wu, and Surraya Khanum, edited by Shaﬁullah Khan and Jaime Lloret Mauri, 2014;
permission conveyed through Copyright Clearance Center, Inc.
2.2.1
Statistical Schemes
Statistical abnormality identiﬁcation schemes are classical techniques. In a statistical
model, relationships among variables are characterized through mathematical rela-
tions. This kind of model should hold either of two properties, namely randomness
or systematic variation. A classical division of statistical techniques is parametric
versus nonparametric [1].
2.2.1.1
Parametric Schemes
This kind of techniques relies on a supposition that the underlying data distribution
information is known. Another imperative assumption about parametric schemes is
normally distributed data. This kind of techniques requires change in parameters after
certain period of time. This class may be divided as: Gaussian and non-Gaussian.
Gaussian Schemes: Gaussian (bell shape or normal) distribution of variables is
presumed in the model. An ecological application-focused abnormality identiﬁcation
method is presented to identify incidents and deduce absent readings in data [12].
The fundamental concept of the technique is to identify spatiotemporal association
among sensed readings. The technique employs previous knowledge of sensed data
to identify abnormalities, as each mote matches its present and past observations with
adjoining motes. A fundamental shortcoming of the technique is its sole focus on
uni-dimensional abnormalities which occurs because of spatiotemporal data abnor-
malities.
A scheme presented by Wu et al. [13] determines abnormalities in two dimensions.
It ﬁrst discovers anomalous sensors and then identiﬁes the boundaries of events. The
scheme recognizes spatially associated abnormalities by matching median value with

2.2 Abnormality Identiﬁcation
15
each observation that is obtained from the neighbor motes. The fundamental concept
is to deploy algorithm on every mote to identify abnormal readings along the bound-
aries of events. Abnormal signals and readings, showing occurrence of an incident,
may not be differentiated in the scheme. Furthermore, mote which observes same
type of incidents should spatially be associated. Therefore, the authors presented two
algorithms to identify anomalous motes and detect boundaries of events.
In former algorithm, every mote computes differences between own readings and
their median with that of neighbor motes. A mote is declared as abnormal if the
deviation is large. The latter algorithm computes two zones for each sensor node.
The deviations are then individually computed by employing the former algorithm.
If median value of single zone is ominously diverse than other mote, the mote is
announced as abnormal. The scheme employs a receiver operating characteristic
(ROC) analysis to adaptively calculate the values of thresholds. The ROC is a graph-
ical plot which is typically used to show the performance of a binary classiﬁer [14].
The computation of ROC values is an energy consuming process. Therefore, this
approach is not useful for resource-limited motes.
Non-Gaussian Schemes: The distribution of data is not normal in such schemes.
Jun and colleagues studied a non-Gaussian abnormality identiﬁcation scheme which
can detect spatiotemporal abnormalities [15]. Abnormalities are presumed as non-
correlated with respect to space and time. Abnormalities are characterized as per
impulsive noise behavior having distribution, namely Symmetric α-Stable (SαS).
Each cluster member mote carries out local abnormality identiﬁcation and corrects
temporally abnormal data which are then transmitted to the respective cluster chief
nodes. The cluster chief node then receives that data and further discovers and cor-
rects spatial abnormalities in data. This abnormality identiﬁcation scheme offers two
beneﬁts: (i) a communication cost decrease and (ii) an increase in the quality of
accumulated data. In spite of these beneﬁts, the distribution, namely SαS might not
be suitable for networks because of their dynamic nature of topology.
2.2.1.2
Nonparametric Schemes
These schemes have no presumptions about data distribution [16]. These schemes
are, therefore, more suited to sensor networks with dynamic topology. Nonpara-
metric schemes characteristically use one of two methods, namely Histogram and
Kernel functions [16]. The former provides a probability distribution within a speciﬁc
range [17]. A histogram is typically composed of rectangular bars. The tallness of a
bar is directly proportional to data frequency in a deﬁned range. Histogram represents
continuous type of data, not like bar graphs which plot categorical data. A scheme
was presented by Xie et al. for hierarchical networks [18]. Their scheme constructs
histograms in both an online and a distributed fashion. The new histogram estimate
errors are theoretically studied and optimum parameter values are derived for abnor-
mality identiﬁcation. A main ﬂaw of the scheme is, however, its consideration of
only univariate data.

16
2
Background
Alternatively, kernel function-based approaches have been studied in the non-
parametric class of statistical abnormality identiﬁcation in the literature. Kernel, a
weighting function, is employed for the estimation of the probability density func-
tions of random variables for abnormality identiﬁcation [19]. A number of kernel
function-baseddetectiontechniqueshavebeenstudiedovertherecentyears.Palpanas
et al. [20] presented a technique which needs no advance distribution information
of sensed data. Every mote locally identiﬁes abnormalities by using an estimator,
namely kernel density. The sensed data is abnormal if it is outside user-deﬁned limits
on a node in question. A basic limitation of this technique is its only suitability for
univariate data.
Subramaniam and colleagues [21] furthered Palpanas et al. [20] work. Their
scheme is meant for abnormality identiﬁcation in multidimensional data. The scheme
has two approaches to identify global abnormalities. In the former approach, every
mote identiﬁes local abnormalities, as suggested by Palpanas et al. [20]. An abnor-
mality report is then forwarded by a sensor node to its parent node in order to detect
further abnormalities. This process continues till the sink mote identiﬁes global
abnormalities. On the other hand, in the latter approach, each mote identiﬁes global
abnormalities by employing estimator at global level. The empirical evaluation of the
scheme demonstrates that it can identify abnormalities with high accuracy. However,
this scheme is not able to identify spatial abnormalities.
2.2.1.3
Markov Process Model
The Markov process model is one such approach for abnormality identiﬁcation in
which a model of data can be either parametric or nonparametric. The kind of model
treats incidents as state variables and uses a matrix, namely transition matrix to
characterize the transition frequencies that occurs among states [22]. The abnormal
conduct is then identiﬁed by matching input and output among two consecutive
states. This method is essentially suitable for sequential schemes. A type of the
Markov process model, namely Hidden Markov Model (HMM) is also employed in
statistical abnormality identiﬁcation. In HMM, transitions and associated states are
veiled and merely the productions are observable [23]. A typical HMM is illustrated
in Fig.2.3 [11].
Paschalidis et al. [24] have presented an identiﬁcation method which can discover
both time-based and spatial abnormalities. The method uses tree indexed Markov
chains in order to formalize a spatial architecture. The temporal values are replaced
with integers on the vertices of the trees in the Markov chains. Large deviations from
previous abnormality free traces are then considered as abnormalities. The method
uses decision rules in order to differentiate between usual and abnormal activity. This
estimate takes to the discovery of both temporal and spatial abnormalities. However,
this is not feasible in some applications to deﬁne a comprehensive usual behavior of
motes because of the vibrant nature of the network behavior.
Gaoandcolleagues[25]presentedanindirectassociation-basedabnormalityiden-
tiﬁcation method. Their work relies on a theory that an indirect association among

2.2 Abnormality Identiﬁcation
17
Visible
 states
Invisible
  states
Fig. 2.3 A typical HMM:
Republished with permission of Taylor and Francis Group LLC
Books, from Security for Multihop Wireless Networks, Muhammad Usman, Vallipuram Muthukku-
marasamy, Xin-Wen Wu, and Surraya Khanum, edited by Shaﬁullah Khan and Jaime Lloret Mauri,
2014; permission conveyed through Copyright Clearance Center, Inc.
several attributes of data may be used to formulate the routine behavior of a node.
The Markov chain is then employed for calculating a state-transition probability
matrix which is employed to identify abnormalities. This method is proﬁcient for
simultaneous identiﬁcation of multiple types of abnormalities, but it causes a sub-
stantial computational overhead, which is not appropriate for resource-constrained
networks.
Zheng et al. [26] presented a sequential technique for mobile nodes. The technique
relies on a multiscale examination of the network trafﬁc. The authors claim that the
time duration length of capturing data trafﬁc may affect the abnormality identiﬁcation
outcomes. The examination of data in various timescales is, therefore, important.
A method, namely discrete wavelet transform (DWT), is used for multiscale data
study. It may also be employed for the decorrelation of probabilistic procedures. A
stochastic model is designed to enhance the detection rate. An algorithm, namely
expectationmaximization(EM),hasbeenemployedtocomputetheparametervalues.
The algorithm also identiﬁes variations in the predicted model by examining the score
of variation. The score of variation is calculated as entropy among current and past
values. The abnormalities are then identiﬁed by discovering changes in the score
of variation. This procedure is appropriate for discovering timescale abnormalities
in the data, but this is energy-rich approach due to the large amount of processing
involved in the abnormality identiﬁcation process.
2.2.1.4
Time Series Model
This is a non-random ordered arrangement of data. Dissimilar to other statistical
techniques, the time series model works on basic supposition that the consecutive
measurements are collected after equal breaks of time [27]. The time series study
has typically two aims, namely (i) identifying the conduct of a model that is based on

18
2
Background
the arrangement of measurements and (ii) predicting the future conduct of a model.
Singh and colleagues [28] discussed a scheme which works on an assumption that the
variables used for abnormality identiﬁcation should be integers that are nonnegative.
The model is employed for forecasting static time series. The values of mean and
variance remain static over the passage of time in the model.
The model has two algorithms. The initial algorithm amends the abnormal data of
every mote at the base station or sink mote by employing predicted values. The ﬁnal
algorithm is then used for abnormality identiﬁcation in mote data having 95% value
of the conﬁdence interval. A high-level pseudocode of the algorithms is given in
Algorithms 2.1 and 2.2. In this scheme, the abnormality identiﬁcation is performed
in a noncooperative manner. This technique has two fundamental weaknesses. First,
the forecast of the stationary behavior over the time series is not suitable for sensor
networks, as typically they have dynamic topology. Second, the temporal and con-
textual internode relationship is not considered, which may make the abnormality
identiﬁcation procedure more strong.
Chuah and Fu [29] presented an abnormality identiﬁcation scheme by employ-
ing time series examination in an ECG application. In the method, physiological
motes are positioned to observe numerous physiological actions like heartbeats and
pulse rate of senior citizens. Sensor nodes transmit data periodically through wireless
link with a computer which employs an adaptive window-based discord discovery
(AWDD) technique for detecting anomalous pulse rates and heartbeats. The anoma-
lous data is then transmitted to a distant station where a doctor can identify diseases
in order to take adequate remedial actions, if required. The method, however, does
not consider synchronization between transmitted and received sensed data.
Algorithm 2.1 Determining reasonable model and forecasting
1: Find prevalent structure of autocorrelation
2: Calculate AR(p), order p is determined using AIC criterion
3: Calculate step 2 residual MA(q) through mandate of q
4: Carry out examination of residual
5: Forecast upcoming measurements and remove abnormalities
Algorithm 2.2 Abnormality identiﬁcation
1: Identify 95% of the conﬁdence interval (μ ± 1.96σ) where μ is predicted and σ denotes standard
error values
2: Conﬁrm null hypothesis
3: Accept/ ignore values using step 2
//Rejection shows abnormal value

2.2 Abnormality Identiﬁcation
19
2.2.1.5
Regression Analysis
This is a statistical procedure which is used to ﬁnd the relationship among multiple
variables. A regression analysis is typically performed to identify the underlying
effect of single (dependent) variable on next (independent) variable(s) [30]. These
variables may be either associated or non-associated. Curiac et al. presented an
auto regression-based malicious node detection scheme [31]. The scheme deploys
detectors which are positioned at the central node to screen observations of member
nodes. The present and past observations are then matched by using autoregressive
predictors for abnormality identiﬁcation. The difference of the present value from
a user-deﬁned bound is treated as abnormal that results in the initiation of a block,
namely decision block. The block then handles the malicious mote. This scheme is
beneﬁcial in predicting association between diverse variables, but the collection of
an appropriate forecast measure is not a trivial task.
Kim and colleagues [32] presented a nonparametric regression abnormality iden-
tiﬁcation scheme for heterogeneous sensor networks. The ofﬁce room is deliberated
as a use case, wherein abnormal everyday incidents are forecasted by using the
combination of regression analysis and Bayesian network. The scheme learns the
usual conduct of motes and assesses the extent of abnormality. The analysis of the
proposed scheme was performed in an ofﬁce room. The experiment location was
furnished with motion and light detectors in order to accumulate sensed data with
no or small advance information. The abnormalities were then discovered on the
collected data by using the bound value which was derived during the learning stage.
This method is modest yet useful for only smaller networks.
2.2.2
Artiﬁcial Intelligence and Agent-Based Schemes
Artiﬁcial intelligence is a discipline of designing and studying intelligent agents.
Intelligent agents are entities which perceive events from their surroundings and take
appropriate action(s), if required, in order to enhance the success likelihood of a sys-
tem. The objective of the intelligent agent-based schemes is to mimic human intellect
in tiny motes to perform numerous tasks [33]. Intelligent agent-based abnormality
identiﬁcation schemes have been mainly proposed in the domains, namely Artiﬁcial
Neural Network, Artiﬁcial Immune System, Genetic Algorithm, Game Theory, and
Agent.
2.2.2.1
Artiﬁcial Neural Networks
Adaptive resonance theory (ART) learns new knowledge without forgetting previ-
ously obtained knowledge [34]. ART has a chronological learning ability. ART is
typically capable of updating existing labels, or it can create a novel class for fresh
observations if they do not ﬁt to the prevalent data classes. A typical ART is made

20
2
Background
Wij
p
F1
F2
Fig. 2.4 An ART neural network: Republished with permission of Taylor and Francis Group LLC
Books, from Security for Multihop Wireless Networks, Muhammad Usman, Vallipuram Muthukku-
marasamy, Xin-Wen Wu, and Surraya Khanum, edited by Shaﬁullah Khan and Jaime Lloret Mauri,
2014; permission conveyed through Copyright Clearance Center, Inc.
up of two ﬁelds, namely comparison, denoted by F1, and recognition, represented
by F2, having n and m neurons, correspondingly, where n denotes features and m
represents categories. The links between the layers F1 and F2 have variable weights
which are denoted by Wij. A sensitivity threshold or vigilance aspect ρ assesses the
similarity between the provided input and learned classes. A classical generalized
high-level structure of ART is drawn in Fig.2.4 [11].
Walchli et al. [35] proposed an abnormality identiﬁcation technique for discov-
ering abnormalities in signals using the Fuzzy ART neural network, viz. ART neu-
ral. The technique employs fuzzy ART to compute, categorize, and compress the
sensed observations by employing time series examination. This technique is able
to update prevalent label classes, though it is resource-extensive, particularly pro-
cessing and memory expensive. Yuan et al. [36] designed and analyzed a fuzzy
ART-based method in order to predict missing observations in sensor networks.
Their proposed imputation technique considers the spatiotemporal information of
network. The scheme is reliant on a supposition that the nodes in network are highly
linked with respect to space and time. Pearson correlation coefﬁcients and R-squared
values are then employed for conﬁrmation of the space association. An improved
algorithm is employed to predict the absent data. The scheme is simple yet effec-
tive, but only focus on spatial and temporal abnormalities. Moreover, the usage of
processing-intensive fuzzy ART only discovers single kind of abnormalities that
might not be appropriate resource-constrained networks.
2.2.2.2
Artiﬁcial Immune System
The artiﬁcial immune system (AIS) is an adaptive technique which is inspired by
theoretical immunology [37]. The usage of AIS for the abnormality identiﬁcation in
sensor networks is a relatively fresh method. Fu et al. [38] presented a biologically

2.2 Abnormality Identiﬁcation
21
inspired abnormality identiﬁcation model for layered networks. The model combines
the beneﬁts of fuzzy and AIS theory. The method has three components, namely co-
simulation, global recognition, and sensing of local danger. In the situation of an
antagonistic mote launching a hazard, the motes in the locality of enemy mote sense
the hazard to send an indication to the coordinator of personal area network (PAN)
which works as a choice maker. The choice maker broadcasts a danger area according
to the obtained danger signals. The decision maker begins and preserves a pool of
receptors. The pool of receptors produces antibodies on the basis of the antigens.
The principle of negative selection is then employed to discover abnormalities in the
trafﬁc. The technique employs parameters of PHY and MAC layers for abnormality
identiﬁcation. The model is adaptable and ﬂexible, but it is resource-expensive and
it might not be able of differentiating among abnormalities occur due to faults and
attacks.
Salmon et al. [39] designed a danger theory immune-inspired technique for abnor-
mality identiﬁcation. The fundamental concept of the work is to employ Dendritic
Cell Algorithm (DCA) for abnormality identiﬁcation. This scheme has four phases,
namely collection, analysis, decision, and reaction. The researchers associated mul-
tiple computational elements into their immune-stimulated counterparts. Mapping
between the computational and biological elements is given in Table2.2 [11]. In the
initial phase, antigens and signals are saved. An investigation is then carried out in
the second phase to produce output signals which discover the development state
of the Dendritic Cells (DC). DCs perform the classiﬁcation as usual or abnormal
and identify their grade of abnormality in the next phase. In the terminal phase, T
and B cells are activated in order to tackle the abnormal mote. This technique mim-
ics immune system of human beings, and it has the ability of self-protection, but
the conﬁrmation of the qualities and quantities of antigens and antibodies is further
required. More work is also needed to assess the performance of the scheme against
multiple natures of abnormalities.
Table 2.2 Mapping between computational and biological elements: Republished with permis-
sion of Taylor and Francis Group LLC Books, from Security for Multihop Wireless Networks,
Muhammad Usman, Vallipuram Muthukkumarasamy, Xin-Wen Wu, and Surraya Khanum, edited
by Shaﬁullah Khan and Jaime Lloret Mauri, 2014; permission conveyed through Copyright Clear-
ance Center, Inc.
Computational elements
Biological elements
Attack
Pathogen
Sensor mote
Tissue
coverage of mote
Danger area
Abnormality identity knowledge
Antigens
Decision manager element in sensor lymph
lymph node
Abnormality identiﬁcation manager and
context manager element
Dendritic cells
Abnormality countermeasure element
T and B cells
Countermeasure initiated by network
protection system
Antibody

22
2
Background
2.2.2.3
Genetic Algorithm
Genetic algorithms (GAs) were designed to imitate the natural evolution processes in
order to solve computational problems [40]. A GA-based abnormality identiﬁcation
technique was presented by Khanna et al. [41]. The technique uses information of
packet, status of battery, utilization of data, and quality of service (QoS) orthodoxy
parameters for abnormality identiﬁcation. Sensor nodes are categorized as cluster
head, inter-cluster routers, common sensor nodes, and inactive nodes (sleep state).
The leader mote uses a GA-based competing ﬁtness function for optimally selecting
cluster heads or inter-cluster routers that works as local observing motes. The native
observingmotesobservetheactionsoftheirneighbormotesusingdiverseparameters,
namely modiﬁcation or dropping of packets, value of signal strength , rate of packet
transmission, delay in response, and fake transmissions from conceded motes. The
technique optimizes previous abnormality identiﬁcation methodologies in terms of
detection capability. Nevertheless, the scalability of the technique necessitates the
further validation.
Gene expression programming (GEP) mimics organic progression for program-
ming. A GEP-oriented abnormality identiﬁcation technique, in which a GEP forecast
model for data trafﬁc was used for time series study of the usual data trafﬁc was pre-
sented by Gao et al. [42]. The abnormality identiﬁcation technique is composed of 5
tuples: (Pm, Fs, M , F, Op), where Pm denotes the parameter set, Fs represents the set
of function, M shows the set of variables, F illustrates the function for ﬁtness, and Op
is a set for operation. The set of parameter is reliant on the size of population, Psize.
The gene can possess either tail T or head H if the following relation is fulﬁlled.
Gene =
⎧
⎪⎪⎨
⎪⎪⎩
H,
T,
H = h,
T = h −1
(2.1)
In the above equation, H is a component quantity of h and T is a component
quantity of h + 1. The function set, Fs, has simple operators, i.e., −, +, ∗, and ÷.
The set for variable, M , has two factors, namely trafﬁc length, i, and time, t. The
ﬁtness can be obtained from the resultant relation.
Fn = R2 = 1 −SSE/SST
(2.2)
where the symbols SST and SSE are total of square and total of square of error of the
overall variable set, correspondingly. The ﬁtness function, F, relies on R-Squared
that yields the square value of the coefﬁcient of the Pearson product correlation.
A GEP-based abnormality identiﬁcation algorithm is given in Algorithm 2.3. This
technique enhances the efﬁcacy of conventional time series methods by removing
the requirement of advance information about data trafﬁc characteristics. However,

2.2 Abnormality Identiﬁcation
23
the depletion of energy of such a rigorous procedure might have an adversarial effect
on the low resources of motes.
Algorithm 2.3 Gene expression programming
Input: Dataset Mt, here the data length is i
Output: correlation coefﬁcient, relative error, and Time series mode
1: On the basis of i, convert data into i + 1 time series data
2: Initialize population using Genes which are progressed by abnormality identiﬁcation procedure
3: Assess ﬁtness of individuals
4: Stop as soon as maximum threshold is obtained, else continue
5: Select best
6: Carry out each operation
7: Goto Step 3
2.2.2.4
Game Theory
The abnormality identiﬁcation procedure is modeled as a game among an abnormal-
ity identiﬁcation module and an adversary in the game theory. One such model was
studied by Agha et al. [43]. The factors for risk such as previous conduct of adver-
sary and types of recognized attacks are known in this technique, and abnormality
identiﬁcation is carried out using these factors. An opponent may have three choices,
namely attack on group, no attack on group, and attack on additional group in a ﬁxed
cluster scenario. On the contrary, the identiﬁcation module has two response types,
viz. protect group or protect a different group. This produces a 2∗3 matrix among two
players. Increasing the turnover of every player, that is, obtaining the Nash equilib-
rium in the game, is a stimulating. It is also not constantly likely to enlist all possible
positions of a system because of the active type of network topology.
Reddy [44] designed a mechanism which employs a zero-sum game for abnormal-
ity identiﬁcation in transmitting data trail. Consider a network group having seven
motes in a transmitting trail of two motes. Further assume that two out of those
seven nodes are malicious. Furthermore, there is a non-malicious node among two
abnormal motes. Let σ be the proportion of motes which are arbitrarily selected as
examination points and ℏis the dedicated acknowledgment facts in trail of packets.
The likelihood of identifying an antagonist mote, Pd, can then be computed as
Pd = Py = 1 −Pack
(2.3)
where Py is the probability of packets that are dropped from acknowledgment facts
and Pack is the probability of acknowledgments at a foundation mote from acknowl-
edgment facts. The Pack can be computed as

24
2
Background
Pack =
n

i=1
Pem(i)
(2.4)
where Pem(i) is anomalous motes packets probability. The packets probability among
selected check points may be computed from the following relations.
P(m,n) = Pack −Pack(n)
(2.5)
P(m,n) =
n

j=1
Pack(j) −
m

j=1
Pack(j)
(2.6)
Employing 2.3 to 2.6, the number of abnormal motes in a particular path may be
computed from the following relation.
xCPack = (x!)/((Pack!) ∗(x −Pack)!) = Pd
(2.7)
This technique is useful in the determination of a doubtful mote which is origin of
abnormalities in network trafﬁc. The technique is reliant on a game, namely cooper-
ative zero-sum. An adequate choice and localization of a non-malicious mote among
two or more antagonist motes is, however, not a trivial task without advance knowl-
edge of the present network state. Furthermore, due to the cooperative approach, the
inclusion of even only one opponent may spoil the entire procedure of the identiﬁ-
cation of an abnormal mote.
2.2.2.5
Agent
Agents are intelligent software entities which roam over the network to perform their
designated jobs. The works carried out by Ketel [45], Pugliese and colleagues [46],
Eludiora and colleagues [47], and Khanum and colleagues [48] have been chosen
in this study to compare the multi-aspect performance of studied abnormality iden-
tiﬁcation and conﬁrmation system with these schemes. The rationale of choosing
these schemes is similarity of the research domain, that is, employing the agent
technology for abnormality/ intrusion/ attack detection in sensor networks. How-
ever, the work presented in this study has not only extended the role of agents to
ﬁne-grained description of the conﬁrmation of abnormalities, but has also detected
different types of abnormalities with high accuracies. The details of the working of
the related schemes are provided below.
Krugel and Toth [49] conducted one of the pioneer studies which employed agents
for abnormality identiﬁcation. In their scheme, agents are dispatched as guards to
carry out arbitrary sampling. If abnormality is found in an arbitrary inspection of a
componentofanetwork,thenacompleteidentiﬁcationisstarted.Thisworkdecreases
the cost related to the transmission and receipt of agents to every mote, but in non-
appearance of guards, motes are susceptible to attacks.

2.2 Abnormality Identiﬁcation
25
Ketel [45] presented an architecture which employs the agent technology for a
distributed abnormality identiﬁcation. The technique uses several static and agents,
namely Agents (MA), Static Agents (SA), and Nodal Agent (NA) to detect abnormali-
ties. The structure has Mobile Agent Server (MAS) and Victim Node List (VNL). SAs
are positioned on every cluster leader node. An SA transmits a message to an MAS
after detecting an abnormal activity on a mote. MAS transmits an MA to monitor a
node after detecting a threat. MAs are classiﬁed as thin and thick agents. The for-
mer and latter are associated with the resource-constrained and resource-rich motes,
correspondingly. NAs are located on the observing motes in order to identify local
abnormalities. Lastly, VNL has a list of victim motes at every cluster leader mote.
VNL is accountable for issuing the route map of an MA. The conﬁguration of several
elements or agents on motes enhances the abnormality identiﬁcation system cost.
Pugliese and colleagues [46] presented a rule-based technique for identifying
network-layer abnormalities by employing agents. The essence of weak process
model (WPM) is used to decrease the reachability rules. The attack model is cat-
egorized into high and low attack classes. The researchers have, however, merely
reported initial implementation outcomes. A comprehensive performance is needed
in order to conﬁrm its utility for resource-limited sensor networks.
Eludiora and colleagues [47] presented an identiﬁcation scheme in which motes
directly interact with leader node rather than cluster leaders. The agents are used
by leader nodes to interact with each other. A designated role of the agents is to
wander between multiple motes and leader nodes to carry out the job of abnormality
identiﬁcation. The scheme is based on two algorithms, one each for data analysis
and abnormality identiﬁcation. The ﬁrst algorithm detects denial of service (DoS)
threats and thus appraises the status of a mote. On the contrary, the next algorithm
computes the failure probability of a leader node to discover the abnormality. The
scheme is designed for the networks where motes and base stations have only one
hop distance. The one hop communication decreases consumption of energy, but it
can cause a communication bottleneck on leader node. This tactic is not suitable
for large networks and it only focuses on the DoS attacks which are other major
limitations of the scheme.
A hierarchical abnormality identiﬁcation system for sensor network has been
designed by Khanum and colleagues [48]. The scheme employs three agents, namely
Management,Analyzer,andCoordinating.Theﬁrstismobile,wheresecondandthird
are static agents in nature. Motes are positioned in a clustered topology. Abnormal-
ity identiﬁcation architectures are installed on each cluster leader node. Abnormal-
ities are discovered at two levels, i.e., network and node. The cluster leaders detect
network-wide abnormalities, whereas node-wide abnormalities are discovered by
the Analyzer agents. Khanum et al. [48] has presented an abnormality identiﬁcation
architecture at a high level, since they have not provided any internal details about
the abnormality identiﬁcation technique. The cost that is related with the wandering
of agents is not analyzed.

26
2
Background
2.2.3
Learning Schemes
Learning algorithms enable computer and associated devices to learn from past obser-
vations to make decisions [50]. The learning process is typically based on extracting
valuable patterns of data and forecasting on fresh data on the basis of the previously
obtained knowledge [51]. Sensor nodes may be skilled by employing one among
three algorithms, namely supervised, semi-supervised, and unsupervised learning
to set normal behavior at deployment time. The selection of an algorithm can be
made due to a number of factors such as availability of resources, network size, and
abnormality identiﬁcation method.
2.2.3.1
Supervised Learning
This techniques tags a training set using a pair (feature, label), represented as (ai,
bi),...,(an, bn), here i = 1 to n. The goal of the approach is to tag each instance of
features of fresh input data. This class can be considered as a regression function
or classiﬁer. The supervised learning is a regression problem if c ∈R and if c is
based on “real” values, whereas it is a classiﬁcation problem if c is based on “whole”
values [52]. The likelihood of data classiﬁcation is high and provides more accurate
outcomes, but this is a time taking and energy extensive approach. Moreover, this is
not always likely to receive a tagged dataset.
A key model from this class is known as support vector machine (SVM), which is
a non-probabilistic binary and linear classiﬁer which generates a hyperplane which
divides data in dual classes by having a maximum likely distance. The vectors which
lie near to the separating lines are the main point of interests. Figure2.5 [11] repre-
sents a linear SVM graph which classiﬁes a data set into two categories in a two-
dimensional plane. SVM-based distributed abnormality identiﬁcation scheme was
presented by Rajasegarar and colleagues [53]. In the technique, local quarter spheres
are calculated by each child mote and then they are transmitted to the respective
parent motes. The respective parents are accountable for the local abnormality iden-
tiﬁcation. Parent motes compute the universal radius using the obtained value of
native radii. The parent motes then transmit the universal radius to all offspring in
order to identify the universal abnormalities in their vicinities. This technique is able
to discover both native and universal abnormalities, but the calculation of only quar-
ter sphere might error some key information that may be employed for abnormality
identiﬁcation.
Xiao et al. [54] designed a Nave Bayes algorithm to discover abnormal motes in a
network. The classiﬁer, viz., Bayes presumes the occurrence of particular parameters
from a class (usual or abnormal), which is unconnected to the occurrence of other
parametersinaparticularclass.Abnormalconductofamoteisdiscoveredbyemploy-
ing numerous parameters such as energy consumption, interaction. The experiment
results demonstrate that the Nave Bayes classiﬁer provides a higher identiﬁcation

2.2 Abnormality Identiﬁcation
27
Fig. 2.5 SVM in
two-dimensional horizon:
Republished with permission
of Taylor and Francis Group
LLC Books, from Security
for Multihop Wireless
Networks, Muhammad
Usman, Vallipuram
Muthukkumarasamy,
Xin-Wen Wu, and Surraya
Khanum, edited by
Shaﬁullah Khan and Jaime
Lloret Mauri, 2014;
permission conveyed
through Copyright Clearance
Center, Inc.
x
y
a
b
Legends
Class A
Class B
rate and less false positive rate. Nonetheless, the researchers have not analyzed the
characteristic shortcomings of the methodology in this technique.
2.2.3.2
Semi-supervised Learning
This learning technique employs large unlabeled data along with small labeled data
in order to form a robust classiﬁer [55]. This technique is particularly beneﬁcial
in health and bioengineering domains where labeled data is not easily available
because of high labeling cost of data. This cost is high because of the involvement of
the human expertise. This technique is not typically employed in sensor networks for
abnormality identiﬁcation due to trouble in getting training data which encompasses
all likelihoods of usual and abnormal conduct of a mote or network in advance.
2.2.3.3
Unsupervised Learning
These schemes use a non-labeled data set with features (ai,...,an) for building clas-
siﬁers. This scheme needs a threshold or certain criterian to identify abnormalities
in a data set. The choice of an adequate threshold is a difﬁcult task particularly in
dynamic sensor network applications where a state of the usual conduct of the sys-
tem keeps changing. A approach method of this class is clustering of measurements
and then identiﬁcation of abnormalities using distance from boundary or centroid
of the cluster. This technique is apt for such applications where training data is not
available.
In K-means clustering k-means of every cluster is computed [56]. These centroids
are then linked with a training set. Next, every individual datum is linked with the
nearest mean. As a consequence, each individual point is associated with one of the
centroids. An abnormality identiﬁcation technique, using k-means clustering, was

28
2
Background
presented by Rajasegara et al. [57]. In the technique, every mote gathers local data
in order to create a normal proﬁle. These normal proﬁles are then transmitted to
associated cluster leader. The cluster leaders collect local data and create a universal
normal proﬁle which is transmitted to all sensor nodes in their proximities. The pro-
cess of abnormality identiﬁcation is carried out using universal proﬁle. The k-means
technique is employed to improve the process of clustering. This technique involves a
noteworthy communication burden, as cluster leader motes transmit universal proﬁle
to every member mote.
Xie and colleagues [58] presented an abnormality identiﬁcation technique which
employs an unsupervised learning method, namely Principal Component Analysis
(PCA) which is a mathematical procedure which changes the associated variables into
non-correlated variables using orthogonal transformations. The transformed vari-
ables are called as principal components (PC). The technique employs a distance-
oriented method for decreasing feature size from multivariate to univariate in order to
enhance the abnormality identiﬁcation procedure. An error coefﬁcient is presented to
consider the information loss that is caused during the conversion process. This tech-
nique has signiﬁcantly reduced the training burden, but it suffers from the additional
conversion cost.
An ellipsoidal neighborhood outlier (abnormality) factor for distributed abnor-
mality identiﬁcation was designed by Rajasegarar and colleagues [59]. The scheme
presents a distributed abnormality identiﬁcation architecture which employs sev-
eral hyperellipsoidal clusters to model the data of each sensor node in the network.
A method for the computation of a difference score among internode hyperellip-
soidal models is presented. The experimental results demonstrate a reduction in the
communication overhead as compared to the centralized schemes. In another study,
Rajasegarar et al. [60] presented a distributed hyperspherical cluster-based algorithm.
The algorithm minimizes the communication overhead by merging different clusters
and transmitting a compact description to other nodes for abnormality identiﬁca-
tion. The objective of the scheme is to detect global abnormalities at node level.
These schemes are, however, susceptible to a collusion attack, in which antagonist
nodes can collude to compromise the reliability of the computed hyperellipsoidal
and hyperspherical models which are used for the abnormality identiﬁcation.
2.2.4
Other Schemes
There are several other abnormality identiﬁcation schemes in the literature which
may not belong to any of the above-mentioned classes. This section reviews such
few related schemes.

2.2 Abnormality Identiﬁcation
29
2.2.4.1
Graph Theory
Graph theory has also been employed for abnormality identiﬁcation in addition to
other purposes such as aggregation of sensor readings as suggested by Bokareva
et al. [61]. Ngai et al. [62, 63] presented novel algorithms for the detection of an
abnormal mote by employing the graph theory. The scheme has two steps. Initially, a
base station collects a list of doubtful motes. Finally, it set the precise location of the
abnormal mote by using a graph, namely network ﬂow. This scheme is helpful for
the identiﬁcation of the conspiring motes. A voting scheme is employed in order to
announce a suspicious mote as abnormal or usual because of their past conduct. This
tactic is beneﬁcial in identifying node abnormalities, but it is a resource-expensive
approach, especially in the worst case scenario, i.e., when an abnormality stays at
the width or breadth end of a graph.
Ho and colleagues [64] designed a detection method which incorporates group
information aspect before the positioning of a network. The identiﬁcation is then
performed at mote level after they receive a demand from their adjoining sensor
to transmit a message. Every group is recognized using its exclusive deployment
location. A mote, in every group, is positioned on the (a, b) location that may be
computed from the following relation.
f (a, b) = 1/(2πσ 2)e((a−ag)2+(b−bg)2)/2σ 2
(2.8)
In the above relation, (a, b) is the location of a sensor mote in a group and (ag, bg)
represents the placement position of g. The notation σ denotes the standard deviation.
If i mote, a group gi member, gets a demand from an adjoining mote j, then i
conﬁrms that the distance among the group and adjoining mote is less than a pre-
speciﬁed distance. If the distance is less, then j is treated as a genuine mote. Else, it
is considered as an abnormal mote. This technique is beneﬁcial in the identiﬁcation
of abnormalities that occurs due to replica motes. The efﬁciency of this technique is,
however, highly dependent on the correct positioning and advance knowledge of the
conduct of the network that might not always be possible.
2.2.4.2
Subjective Logic
Yuan et al. [65] modeled a subjective logic grounded abnormality identiﬁcation
framework. It is appropriate for those cases where ambiguity and partial knowledge
is required. The framework has two algorithms. The initial algorithm combines the
adjoining motes judgment in order to select the fate of a sensor mote as either usual or
abnormal. However, this technique has three shortcomings. (i) The decision-making
procedure may also involve abnormal motes, which may disturb the abnormality
identiﬁcation procedure. (ii) This procedure cannot distinguish between abnormal
and usual data. (iii) A bound for the locality is ﬁxed as 0.5 that might not be appro-
priate in every situation. To address these limitations, the researchers extended the

30
2
Background
concept and suggested the next algorithm that has the following reﬁnements in the
abnormality identiﬁcation procedure. (i) The elimination of the judgment of a doubt-
ful mote. (ii) The spatial correlation between data is used to discriminate between the
abnormal and usual data. (iii) The past information is taken into account to weigh the
belief of adjoining motes. In spite of enhancement in the abnormality identiﬁcation
procedure, the consideration of past data may need more memory space. Moreover,
the deliberation of the time-based correlation may further enhance the strength of
the framework.
2.2.4.3
Fuzzy Logic
Fuzzy logic is a class of many-valued logic which can handle imprecise data for
the approximate reasoning unlike the traditional crisp logic which is meant for ﬁxed
reasoning. The received sensor readings at a cluster leader node or a base station
are often imprecise, even if they are located within close proximity to each other.
This may affect the accuracy of the decisions which are made by cluster leaders
or a base station. Fuzzy logic is, therefore, employed in abnormality identiﬁcation
applications in sensor networks to improve their performance.
Chi and Cho [66] designed a fuzzy logic-oriented abnormality identiﬁcation tech-
nique in order to integrate a security mechanism into a routing protocol, namely
directed diffusion. Several routing parameters like energy level of mote, error rate,
rate of message transmission, and neighbor motes list are used to construct the rules
for abnormality identiﬁcation. This scheme, however, only focuses on the detection
and prevention of the attacks. Furthermore, it is only suitable for directed diffusion-
based senor networks.
PonoMarchuk and Seo [67] proposed a technique which is based on two lev-
els of detection. First, an abnormality identiﬁcation module monitors and identiﬁes
abnormalities on the packet inter-arrival time and packet reception rate, based on
the user-deﬁned threshold values. Second, composite rules, which consider both
features for abnormality identiﬁcation purposes, are employed for abnormality iden-
tiﬁcation. The experimental results, based on a simulation study, show the capability
of the technique to detect abnormalities with a high detection rate. This technique,
however, needs the user knowledge in order to set the values of the thresholds in the
ﬁrst stage and the values of the parameters in the second stage. Furthermore, uniﬁed
optimization of the threshold and parameter values are also not investigated.
Linda and colleagues [68] examined the role of fuzzy logic in abnormality iden-
tiﬁcation for the security of embedded sensor networks. The scheme presents an
algorithm which formulates a rule-base on the basis of fuzzy logic to model the nor-
mal behavior. The rules are generated from an incoming stream of data packets by
employing a clustering algorithm. This authors, however, have not analyzed compu-
tational and memory overheads of the presented method. This does not establish its
suitability for extremely low resource embedded sensor networks.
In another study, Kumarage et al. [69] presented an abnormality identiﬁcation
scheme which employs a fuzzy data modeling approach. The scheme performs par-

2.2 Abnormality Identiﬁcation
31
titioning, by employing the fuzzy c-means clustering, of the sensed data which is
transmitted by the industrial sensor nodes. The abnormality identiﬁcation is then
carried out in a nonparametric and non-probabilistic fashion by the means of fuzzy
membership functions. Adaptive thresholds are computed for the abnormality identi-
ﬁcation. The scheme achieves high accuracy as compared to competing schemes. An
iterative process of the computation of a threshold value, however, is not an efﬁcient
approach for resource-constrained sensor networks.
A more sophisticated abnormality identiﬁcation model was designed and analyzed
by Moshtaghi et al. [70]. The model introduces a new mechanism to estimate the
parameters of Takagi-Sugeno fuzzy logic methodology. An incremental approach is
adopted for the computation of an inverse of the covariance matrix and a weighted
sample mean in order to construct the fuzzy rule-base which evolves with the passage
of time. The constructed rule-base is then employed for the abnormality identiﬁcation
process. This scheme is, however, not suitable for those sensor networks which have
a dynamic behavior.
2.2.4.4
Cross-Layer Abnormality Identiﬁcation
Two or more features from different layers of an Open System Interconnection (OSI)
model are employed for the abnormality identiﬁcation in the cross-layer abnormality
identiﬁcation models. Over the years, the community has presented a number of such
abnormality identiﬁcation methods for sensor networks [71–75]. One such approach
was presented by Onat and colleagues [67] where every mote preserves a proﬁle
of its adjoining motes. The proﬁle has two features, namely rate of packet arrival
and received power average. This technique is, however, not capable of detecting
more sophisticated abnormalities due to the trivial nature of the underlying detection
method.
Bhuse [72], in his PhD dissertation, investigated the use of multiple layer features,
namely physical (PHY), Media Access Control (MAC), network, and application for
the abnormality identiﬁcation. In PHY layer, the Received Signal Strength Indica-
tor (RSSI) value is employed for abnormality identiﬁcation. The neighboring motes
RSSI value is computed and a noteworthy nonconformity from that base value is
treated as an abnormality. In MAC layer, S-MAC and TDMA protocols are employed
for the abnormality identiﬁcation. In these protocols, slots of time are assigned to
motes for communication. The interaction outside an allocated slot indicates an intru-
sion activity. In network layer, a protocol is proposed which uses forwarding tables
that are created by the protocols for the abnormality identiﬁcation procedure. This
procedure needs the incorporation of high-level knowledge in tables in order to for-
mulate abnormality detection tables (ADTs). Abnormalities are then identiﬁed using
ADTs. In application layer, a time for round trip is treated as an abnormality identiﬁ-
cation feature. Boubiche et al. [73] presented a technique for layer-wise abnormality
identiﬁcation. A common feature of the above-mentioned schemes is their capability
to detect the layer-wise abnormalities in the respective layers.

32
2
Background
Becker and colleagues [74] employed multiple learning algorithms such as k-
Nearest Neighbors, Support Vector Machines, Bayes Classiﬁer, Neural Network
using multiple features from different layers. An experiment study illustrates that
the naive approaches, for example, Bayes classiﬁer and decision tree serve improved
performance in contrast with the other techniques. In the experimentation setup,
several features are employed for the abnormality identiﬁcation. The performance of
this abnormality identiﬁcation technique is, however, heavily reliant on the selection
of appropriate features. A fundamental method of using several features might not
be adequate for resource-limited motes.
More recently, Dai and colleagues [75] presented a multivariate classiﬁcation
method for the identiﬁcation of abnormal motes in large networks. The detection
process is based on the multivariate classiﬁcation technique. The multivariate tech-
nique excerpts the preferences of a mote related to the malicious behavior. It then
creates a sample space for all motes which are the network constituents. This is fol-
lowed by the detection of anomalous motes using given criteria. The experimental
outcomes show that a false detection rate is less than 0.5%. In spite of having low
rate of false detection, the effectiveness of this technique depends on identiﬁcation
criteria. The choice of appropriate identiﬁcation criteria is not a trivial job in certain
sensor network applications, particularly where motes have a vibrant behavior.
2.2.4.5
Other Schemes
Li et al. [76] presented a quantitative approach for the identiﬁcation of anomalous
motes. The approach is based on the data transmission quality (DTQ) function. A
sensor network is separated into multiple groups. Every mote keeps a DTQ table of
its adjoining motes. The DTQ function is provided in the subsequent relation.
DTQ = kD/E × (STB())/(P())
(2.9)
In the above relation, k is an integer which is greater than 0 and D/E represents the
packets count that are communicated in a unit energy. The notation STB() represents
a factor for the stability of data dispatch, and P() is the likelihood of effectively
communicated data packets. The DTQ function value stays static or varies efﬁciently
for usual motes and changes for anomalous motes. The concluding fate of a mote as
usual or abnormal is deﬁned using voting between members of the group. The voting
technique is, however, vulnerable to the conspiring threats.
Krontiris and colleagues [77] designed a novice abnormality identiﬁcation
approach. In the method, selected motes, namely watchdog motes, carries out the
job of observing the neighboring motes. The watchdog motes are selected as per
the following criteria. Assume a situation, where mote A has a communication con-
nection with mote B. Then mote A and other motes which are located inside the
juncture of the radio range of mote A and mote B may work as regulator. A regula-
tor mote observes adjoining motes as per the following mechanism. (i) If a speciﬁc
mote drops n data packets in t time, a triggered is then triggered by a regulator

2.2 Abnormality Identiﬁcation
33
mote. (ii) In a particular location, if regulator motes trigger alarms, then the doubtful
mote is broadcasted as an abnormal mote. This method is simple, but vulnerable
to high false positive rate. Moreover, voting requirement by half of the motes in
order to announce a doubtful mote as an abnormal mote might not be appropri-
ate for few sensor network applications, especially where high rate of detection is
required.
Krishnamachari and colleagues [78] presented a distribution algorithm for the
detection of environmental events of interest. The algorithm explicitly takes into
account the possibility of the faults in sensor measurements for detecting these faults.
The performance of the proposed algorithm has been analyzed through simulation
studyandanalysis.Theoutcomesindicatethatthemethodcandetect85to95%faults.
Lazarevice et al. [79] has conducted a detailed comparative study to identify different
kind of network intrusions. A number of abnormality identiﬁcation techniques and
their extended works have been evaluated on the DAPRA data set. The results indicate
superior performance of some schemes as compared to other schemes.
This section has ﬁrst discussed the statistical abnormality identiﬁcation schemes.
A number of related schemes, which use artiﬁcial intelligence, agent technology,
machine learning, fuzzy logic, and several other methods for abnormality identiﬁca-
tion, are then critically reviewed. The security of agent will be reviewed in the next
section, as our proposed abnormality identiﬁcation and conﬁrmation system rely on
the agent technology for the conﬁrmation of abnormalities.
2.3
Security of Agents
A key challenge in agent-enabled applications is to secure agents from antagonist
nodes. This is a non-trivial task due to the complete control of a host node on an
agent during its execution.
2.3.1
Securing Agents on Middleware
A networking system, in general, and sensor network, in particular, can be catego-
rized into three layers, namely application, middleware, and hardware from the view-
point of layered architecture. The security on these systems can be deployed on any
of these layers [80]. A number of middleware architectures have been designed and
studied in the literature which integrated security at middleware of agent applications
[80–84]. These architectures facilitate easy modiﬁcation or even complete removal
of the applications without interfering in the security mechanisms of the tiny sensor
nodes.

34
2
Background
2.3.2
Other Approaches
Over the years, some studies have also been conducted in other types of networks in
order to secure agents from antagonists. Some of the few prominent schemes from
the literature are reviewed below [85–89].
One of the pioneer works, about the identiﬁcation of the manipulation attack
against the agents, was carried out by Vigna [85]. In the work, agents can grab traces
of the execution of the instructions which are executed by a malicious node during
the execution of an agent on that node. The traces are logs of the actions which
are performed by agents. Each node saves traces of the execution of agents and
then transmits the hash of those traces in order to save the network bandwidth. A
parent node of an agent can then verify the integrity of the execution of an agent
by re-executing it and matching the traces. This solution, however, demands high
computational and memory resources to compute hash values and store traces. This
solution is, therefore, not feasible for low resource sensor networks.
Zhang et al. [86] designed a secure integrated scheme for agents and Web services.
The scheme offers an authentication protocol which does not require a username–
password pair for authentication, due to the fact that this kind of authentication is
infeasible for agents. The presented protocol, therefore, relies on an identity-based
public key management algorithm. An analysis carried out by the authors shows that
the scheme can simplify the key management process. This scheme is, however, only
focused on Web services.
A study on securing agents with designated hosts was conducted by Mu et al. [87].
In the presented model, a parent node of an agent selects a destination node for
that agent and then performs an authentication with the node. This approach avoids
the misuse and non-repudiation problems. The model is theoretically veriﬁed in the
electronic commerce settings. This scheme, however, needs a full scale experimental
analysis to be deemed as effective for the intended purpose.
In another work, Malik et al. [88] designed a secure transfer procedure for agents
among agencies (i.e., agent-host nodes). Mobile-C is a multi-agent platform which
supports C and C++ static and agents. In the proposal, all agents are authenticated by
a trusted third party, a system administrator in this case. The design of the framework
is inspired from the Secure Shell (SHH) protocol. The transmitter and receiver nodes
authenticate each other using public key cryptography before the transmission and
reception of an agent. The receiver node also veriﬁes the integrity of the received
agent. A turnaround time for agents is evaluated in different scenarios. The authors,
however, have not performed any attack-analysis in order to show the usefulness of
the cryptographic methods to secure agents.
More recently, Esparza and colleagues [89] employed watermarking and ﬁnger-
printing approaches for the detection of an agent manipulation attack. The presented
approach, namely agent watermarking (MAW), enables an agent parent node to con-
ﬁrm the execution integrity of the agent on the basis of the inserted watermark. The
authors further presented a technique to detect and punish an antagonist node by
using a trusted third party. The usability of the schemes is demonstrated through a

2.3 Security of Agents
35
proof-of-concept and an extensive performance evaluation. The target of the MAW
is traditional networks, but we have extended this approach in networks because the
size of a watermark can be varied in order to enable MAW to work in low resource
sensor networks.
2.4
Formal Modeling and Analysis
A badly designed agent-enabled system can go into a static state, or it may even badly
affect the restricted resources of motes by not performing its intended functional-
ity. Formal modeling is, therefore, typically employed in order to address formal
descriptions and veriﬁcation of the correctness of large systems [90]. The process of
formal modeling and analysis also removes inconsistencies from the overall system
design. It also ensures the completeness of a system design by the identiﬁcation of
missing or invalid requirements. The missing requirements can then be included in
the system design or invalid requirements can be improved to obtain a better overall
design. Over the course of recent years, formal modeling has been a well-studied
procedure of the validation of the system behavior prior to its implementation. In
the last decade, the community of researchers has carried out numerous studies to
formally verify wireless communication systems [91–93]. Similarly, some attempts
have also been carried out to formally characterize protocols [94–96].
Veriﬁcation of algorithms, protocols, or even systems can also be useful in creat-
ing their best designs for resource-constrained sensor networks. Numerous studies
have performed to formally prove the security procedures for sensor networks along
similar lines. Law and colleagues [97] formally modeled and analyzed a distributed
key management architecture for sensor networks, which has two interconnected
supervised and unsupervised security kingdoms. A tool, namely CoProve is used to
conﬁrm the correctness of the presented protocols. The speciﬁcations of protocols
are fed as input. A working example situation of the system is then studied to assess
the performance of the protocols. In a PhD work, Werner [98] applied formalism for
checking of energy consumption models by motes in already deﬁned settings. This
method, however, may not be adequate for stochastic systems.
The Automated Validation of Internet Security Protocols and Applications
(AVISPA) is also studied in the literature [99]. It presents a formalism to provide the
speciﬁcation of security protocols. Over the years, the tools like Co- Prove, AVISPA,
and brute-force algorithms have been used for validation of security protocols. How-
ever, the Petri net theory is a mathematical modeling language. The mathematical
foundations of Petri net theory give sturdy guarantee on descriptions, modeling,
and veriﬁcations of qualitative and quantitative properties of systems [100]. Despite
having enriched properties for modeling and veriﬁcation, the Petri net theory has
not been extensively studied in sensor network security literature in general, and
abnormality identiﬁcation schemes in particular. Over the course of the last decade,
a few notable security solutions have been formally modeled and veriﬁed using the

36
2
Background
Petri net theory in sensor networks [101–104]. These studies, however, have several
limitations which are discussed below.
In 2009, He et al. [101] employed Petri nets to design and formally verify an
enhanced secure localization scheme for sensor networks. Both localization and
attack driven models are constructed using the Petri net theory. A state equation
technique is then employed to perform a reachability analysis. A state equation-
based analysis demonstrates that only the secure states are reachable in the system
design. The authors have, however, not conducted a thorough behavior analysis of the
security protocol. Furthermore, the formal models have not been validated through
simulation or real implementation.
Rodriguez et al. [102] exploited the dynamic characteristics of the Petri net the-
ory, namely synchronization and concurrency in order to model and formally verify
an encryption scheme for sensor networks. The communication system is modeled
through standard Petri nets. An elliptic curve-based cryptography protocol is then
modeled and illustrated using place and transition invariants. The authors have only
derived the reachability set to analyze the behavior of the presented cryptographic
protocol. Furthermore, the constructed model is trivial and it is incapable of estimat-
ing temporal behavior of the protocol, which is an important performance metric for
any security protocol.
Tseng et al. [103] veriﬁed a robust self certiﬁcate-based user authentication
scheme for sensor networks by using the Petri net theory. A security analysis of
an authentication scheme is performed after the construction of a standard Petri net
model. The Petri net model is simulated on HPSim in order to verify the reacha-
bility of different states from the root state. An extensive analysis of the behavioral
properties is, however, not conducted to estimate the aptness of the authentication
scheme.
More recently, Sbai and Escheikh [104] employed Petri nets for the veriﬁcation of
an encryption scheme in sensor networks. A Petri net model of the encryption scheme
is constructed through Promela, a modeling language. The correctness properties are
thenformulatedthroughlineartemporallogic.Adedicatedmodelcheckertool,SPIN,
is used to validate the correctness of the encryption scheme. Like other schemes, this
work is also focused on only limited aspects of the behavior analysis of an encryption
scheme.
2.5
Limitations
A well-designed abnormality identiﬁcation mechanism can detect an inconsistent,
a malfunctioning, or a troublesome node which may disrupt the usual working of a
sensor network. Designing an adequate abnormality identiﬁcation system is a tough
task considering the unique characteristics of sensor networks. One key design con-
sideration, while articulating an abnormality identiﬁcation mechanism for sensor
networks, is the placement of abnormality identiﬁcation modules in the network.

2.5 Limitations
37
Traditionally, centralized or distributed design choices have been used for the posi-
tioning of abnormality identiﬁcation modules.
Another key design choice is to discover abnormalities with minimum energy
cost. The main focus of the existing schemes is, therefore, on articulating the light
weight abnormality identiﬁcation methods along with an acceptable rate of detection.
This method might extend the lifetime of a network. However, this might not be
capable to identify the sophisticated nature of abnormalities in a timely manner.
The failure of identifying such abnormalities might have the worst effect on the
functionality and lifetime of the network. Thus, there must be a balance among
making an abnormality identiﬁcation mechanism lightweight and its ability to detect
sophisticated abnormalities.
A literature survey, performed throughout this chapter, has shown that the majority
of the prevalent abnormality identiﬁcation schemes have merely focused on the
identiﬁcation of abnormalities [10, 12, 15, 18–21, 105]. It is, however, imperative
to discover the origin of abnormalities for their effective mitigation, which is to
our knowledge not considered in the existing literature. This book has, therefore,
presented an agent-enabled abnormality identiﬁcation system that not only identiﬁes
different types of abnormalities, but also offers a service for on-the-spot conﬁrmation
of abnormal motes by using agents.
The survey of literature also reveals that agents are employed in different roles
in existing abnormality identiﬁcation schemes [45, 47, 48]. However, a common
limitation of these techniques is their non-consideration of infrastructure and com-
munication costs which are linked with agents. The work presented in this study has,
therefore, considered these factors and deployed abnormality identiﬁcation modules
on resource-rich cluster leader nodes and also presented methods for the optimization
of agent transmission.
Securing agents from antagonists have not been studied extensively in the sensor
network literature. This is, in fact, explored more in the literature related to tradi-
tional networks. The focus of the schemes in traditional networks is, however, only
on a security performance. These schemes may not be readily applied because of
their limited resources. Therefore, this study has extended the MAW approach [89]
to sensor networks by making necessary amendments to secure agents from agent
execution integrity attacks.
A few schemes in the literature have considered the detection of abnormalities at
different layers of an OSI model [72, 75]. These schemes, however, have not con-
sidered a cross-layer optimization in a Zigbee-IEEE 802.15.4 standard to detect the
different nature of abnormalities. This study has considered a cross-layer approach,
not only for the abnormality identiﬁcation, but also for the effective transmission of
agents after taking into account the current state of the communication link. Fuzzy
logic is further used to improve the performance of the proposed method.
The review of related works also shows that many schemes are merely designed
and their detailed analyses have not been performed in order to validate their apt-
ness. Absence of the detailed analyses highlights a key point, that is, whether those
schemes are adequate for resource-limited networks. In this view, the performance

38
2
Background
of the methods presented in this study is thoroughly investigated through theoretical
analyses, experiments on a real test bed, and extensive simulations.
2.6
Summary
This chapter has ﬁrst provided a background on the sensor network security in order
to highlight the problem domain of this study. Schemes from the abnormality iden-
tiﬁcation literature are then critically reviewed. This is followed by a discussion on
agent security, where a middleware architecture is presented to integrate the secu-
rity in agent-based resource-constrained network applications in a middleware layer.
A brief overview of the literature on the formal modeling and analysis is also pre-
sented and limitations in the existing related schemes have been highlighted to set
the research context of this study.
In the next chapter, the abnormality identiﬁcation and conﬁrmation system has
been elucidated.
2.7
Bibliographic Notes
The types of anomalies, discussed in Sect.2.1, were ﬁrst introduced by [10] and
subsequently discussed with associated concepts in [11]. The taxonomy of schemes,
focused on abnormality identiﬁcation, and subsequent discussion on these schemes
and their limitations were ﬁrst provided in [11].
References
1. Y. Zhang, N. Meratnia, P. Havinga, Outlier detection techniques for wireless sensor networks:
a survey. IEEE Commun. Surv. Tutor. 12(2), 159–170 (2010)
2. A. Perrig, J. Stankovic, D. Wagner, Security in wireless sensor networks. Wirel. Sensor Netw.
Commun. ACM 47(6), 53–57 (2004)
3. K. Marzullo, Failures of continuous-valued sensors. ACM Trans. Comput. Syst. (TOCS) 8(4),
284–304 (1990)
4. T.G. Roosta, Attacks and defenses of ubiquitous sensor networks. Ph.D. thesis, University of
California, Berkeley, 2008
5. T. Zia, A. Zomaya, Security issues in wireless sensor networks, in Proceedings of the Inter-
national Conference on Systems and Networks Communication (2006), p. 40
6. C.P. ﬂeeger, Security in Computing (Prentice Hall Professional Technical Reference, Prentice
Hall PTR, New Jersey, 2003)
7. E.C.H. Ngai, Intrusion detection for wireless sensor networks, in PhD Term 2 Paper (Depart-
ment of computer Science and Engineering, The Chinese University of Hong Kong, 2005),
pp. 6–20

References
39
8. K. Scarfone, P. Mell, Guide to intrusion detection and prevention systems (idps) (Computer
Security Division, Information Technology Laboratory, National Institute of Standards and
Technology, 2007), pp. 1–127
9. I. Butun, S.D. Morgera, R. Sankar, A survey of intrusion detection systems in wireless sensor
networks. IEEE Commun. Surv. Tutor. 16(1), 266–282 (2014)
10. R.Jurdak,X.R.Wang,O.rObst,P.Valencia,Wirelesssensornetworkanomalies:diagnosisand
detection strategies, in Intelligence-Based Systems Engineering, vol. 10, Intelligent Systems
Reference Library (Springer, Berlin, 2011), pp. 309–325
11. M. Usman, V. Muthukkumarsamy, X.-W. Wu, S. Khanum, Anomaly detection in wireless
sensor network: challenges and future trends, in Security for Multihop Wireless Networks
Edition (Auerbach publications Taylor and Francis Group, USA, 2014a)
12. L.M.A. Bettencourt, A.A. Hagberg, L.B. Larkey, Separating the wheat from the chaff: prac-
tical anomaly detection schemes in ecological applications of distributed sensor networks, in
Distributed Computing in Sensor Systems (Springer, Berlin, 2007), pp. 223–239
13. W. Wu, X. Cheng, M. Ding, K. Xing, F. Liu, P. Deng, Localized outlying and boundary data
detection in sensor networks. IEEE Trans. Knowl. Data Eng. 19(8), 1145–1157 (2007)
14. H.A. Guvenir, M. Kurtcephe, Ranking instances by maximizing the area under roc curve.
IEEE Trans. Knowl. Data Eng. 25(10), 2356–2366 (2013)
15. M.C. Jun, H. Jeong, C.-C.J. Kuo, Distributed spatio-temporal outlier detection in sensor
networks, in Proceedings of the SPIE, vol. 5819 (2005), pp. 273–284
16. V. Chandola, A.M Banerjee, V. Kumar, Anomaly detection: a survey. ACM Comput. Surv.
41(3), 1–58 (2009)
17. A. Gibson, Exposure and Understanding the Histogram (Peachpit press, Prentice Hall Pro-
fessional Technical Reference, Berkeley, 2011)
18. M. Xie, J. Hu, B. Tian, Histogram-based online anomaly detection in hierarchical wireless
sensor networks, in IEEE 11th International Conference on Trust, Security and Privacy in
Computing and Communications (TrustCom) (2012), pp. 751–759
19. B. Miladinovic, Kernel Density Estimation of Reliability with Applications to Extreme Value
Distribution (BiblioBazaar, 2011)
20. T. Palpanas, D. Papadopoulos, V. Kalogeraki, D. Gunopulos, Distributed deviation detection
in sensor networks. SIGMOD Rec. 32(4), 77–82 (2003)
21. S. Subramaniam, T. Palpanas, D. Papadopoulos, V. Kalogeraki, D. Gunopulos, Online outlier
detectioninsensordatausingnon-parametricmodels,inProceedingsofthe32ndInternational
Conference on Very Large Data Bases (2006), pp. 187–198
22. N. Marchenko, C. Bettstetter, Cooperative arq with relay selection: an analytical framework
using semi-markov processes. IEEE Trans. Veh. Technol. 63(1), 178–190 (2014)
23. Y. Xie, J. Hu, Y. Xiang, S. Yu, S. Tang, Y. Wang, Modeling oscillation behavior of network
trafﬁc by nested hidden markov model with variable state-duration. IEEE Trans. Parallel
Distrib. Syst. 24(9), 1807–1817 (2013b)
24. I.C. Paschalidis, Y. Chen, Anomaly detection in sensor networks based on large deviations
of markov chain models, in 47th IEEE Conference on Decision and Control (2008), pp.
2338–2343
25. Y. Gao, C. Chen, J. Bu, W. Dong, D. He, Icad: indirect correlation based anomaly detection
in dynamic wsns, in IEEE Wireless Communications and Networking Conference (2011), pp.
647–652
26. S. Zheng, J.S.A. Baras, S. Zheng, J.S. Baras, Sequential anomaly detection in wireless sensor
networks and effects of long-range dependent data. Spec. IWSM Issue Seq. Anal. 31(1),
458–480 (2012)
27. W. Kim, T. He, D. Wang, C. Cao, S. Liang, Assessment of long-term sensor radiometric
degradation using time series analysis. IEEE Trans. Geosci. Remote Sens. 52(5), 2960–2976
(2014)
28. A.K. Singh, B. Giridhar, P.S. Mandal, Fixing data anomalies with prediction based algorithm
in wireless sensor networks, in 7th IEEE Conference on Wireless Communication and Sensor
Networks, Panna, India, 5–9 Dec (2011), p. 6

40
2
Background
29. M.C. Chuah, F. Fu, Ecg anomaly detection via time series analysis, in Frontiers of High
Performance Computing and Networking ISPA 2007 Workshops. Lecture Notes in Computer
Science, vol. 4743 (Springer, Berlin, 2007), pp. 123–135
30. A.K.M.E. Saleh, M. Arashi, S.M.M. Tabatabaey, Statistical Inference for Models with Multi-
variate t-Distributed Errors (Wiley, USA, 2014)
31. D.-I. Curiac, O. Banias, F. Dragan, C. Volosencu, O. Dranga, Malicious node detection in
wirelesssensornetworksusinganautoregressiontechnique,inThirdInternationalConference
on Networking and Services (2007), pp. 83–83
32. S.Y. Kim, M. Imada, M. Ohta, Detecting anomalous events in ubiquitous sensor environments
using bayesian networks and nonparametric regression, in 21st International Conference on
Advanced Information Networking and Applications (2007), pp. 236–243
33. S.J. Russell, P. Norvig, Artiﬁcial Intelligence: A Modern Approach, 3rd edn. (Pearson Edu-
cation, USA, 2009)
34. T. Trappenberg, Artiﬁcial Intelligence: A Modern Approach, 2nd edn. (Oxford University
Press, Great Britain, 2010)
35. M. Walchli, T. Braun, Efﬁcient signal processing and anomaly detection in wireless sensor
networks, in Applications of Evolutionary Computing. Lecture Notes in Computer Science
(Springer, Berlin Heidelberg, 2009), pp. 81–86
36. Y.Y. Li, L.E. Parker, Classiﬁcation with missing data in a wireless sensor network, in IEEE
Southeastcon (2008), pp. 533–538
37. J. Timmis, P. Andrews, E. Hart, On artiﬁcial immune systems and swarm intelligence. Swarm
Intell. 4(4), 247–273 (2010)
38. R. Fu, K. Zheng, T. LU, D. Zhang, Y. Yang, Biologically inspired anomaly detection for
hierarchical wireless sensor networks. J. Netw. 7(8), 1214–1219 (2012)
39. H. Salmon, C.M.D. Farias, P. Loureiro, L. Pirmez, S. Rossetto, P.D.A. Rodrigues, R. Pirmez,
F. Delicato, L.F.R. Carmo, Intrusion detection system for wireless sensor networks using
danger theory immune-inspired techniques. Int. J. Wireless Inf. Netw. 20(1), 39–66 (2013)
40. O. Roeva, Genetic Algorithms in Applications, 1st edn. (InTech, Croatia, 2012)
41. R. Khanna, H. Liu, H.-H. Chen, Reduced complexity intrusion detection in sensor networks
using genetic algorithm, in IEEE International Conference on Communications (2009), pp.
1–5
42. H.L. Gao, G. Chen, W. Guo, A gep-based anomaly detection scheme in wireless sensor
networks, in International Conference on Computational Science and Engineering, CSE 2009,
vol. 2 (2009), pp. 817–822
43. A. Agah, S.K. Das, K. Basu, M. Asadi, Intrusion detection in sensor networks: a non-
cooperative game approach, in Proceedings of the Third IEEE International Symposium on
Network Computing and Applications, NCA (2004), pp. 343–346
44. Y.B. Reddy, A game theory approach to detect malicious nodes in wireless sensor networks, in
Third International Conference on Sensor Technologies and Applications (2009), pp. 462–468
45. M. Ketel, Applying the mobile agent paradigm to distributed intrusion detection in wireless
sensor networks, in 40th Southeastern Symposium on System Theory (2008), pp. 74–78
46. M. Pugliese, A. Giani, F. Santucci, Weak process models for attack detection in a clustered
sensor network using mobile agents, in Sensor Systems and Software, vol. 24, Lecture Notes of
the Institute for Computer Sciences, Social Informatics and Telecommunications Engineering,
ed. by S. Hailes, S. Sicari, G. Roussos (Springer, Berlin, 2010), pp. 33–50
47. S.I. Eludiora, O.O. Abiona, A.O. Oluwatope, S.A. Bello, M.L. Sanni, D.O. Ayanda, C.E.
Onime, E.R. Adagunodo, L.O. Kehinde, A distributed intrusion detection scheme for wireless
sensor networks, in IEEE International Conference on Electro/Information Technology (EIT)
(2011), pp. 1–5
48. S. Khanum, M. Usman, A. Alwabel, Mobile agent based hierarchical intrusion detection
system in wireless sensor networks. Int. J. Comput. Sci. Issues (IJCSI) 9(3), 101–108 (2012)
49. C. Krugel, T. Toth, Applying mobile agent technology to intrusion detection, in ICSE Work-
shop on Software Engineering and Mobility (2001), pp. 1–5

References
41
50. T. Bokareva, N. Bulusu, S. Jha, Learning sensor data characteristics in unknown environments,
in Proceedings of the Third Annual International Conference on Mobile and Ubiquitous
Systems: Networking Services (2006), pp. 1–8
51. K.P. Murphy, Machine Learning: A Probabilistic Perspective, 1st edn. (MIT Press, USA,
2012)
52. X. Zhu, Semi-supervised learning with graphs. Ph.D. thesis, Carnegie Mellon University,
2005
53. S. Rajasegarar, C. Leckie, M. Palaniswami, J.C. Bezdek, Quarter sphere based distributed
anomaly detection in wireless sensor networks, in IEEE International Conference on Com-
munications (2007), pp. 3864–3869
54. Z. Xiao, C. Liu, C. Chen, An anomaly detection scheme based on machine learning for wsn, in
1st International Conference on Information Science and Engineering (2009), pp. 3959–3962
55. T.H. Lim, Detecting anomalies in wireless sensor networks. Ph.D. thesis, Department of
Computer Science, University of York, 2010
56. C. Boutsidis, M. Magdon-Ismail, Deterministic feature selection for k-means clustering. IEEE
Trans. Inf. Theory 59(9), 6099–6110 (2013)
57. S. Rajasegarar, C. Leckie, M. Palaniswami, J.C. Bezdek, Distributed anomaly detection in
wireless sensor networks, in 10th IEEE Singapore International Conference on Communica-
tion systems (2006), pp. 1–5
58. M. Xie, S. Han, B. Tian, Highly efﬁcient distance-based anomaly detection through univariate
with pca in wireless sensor networks, in 10th IEEE International Conference on Trust, Security
and Privacy in Computing and Communications (TrustCom) (2011), pp. 564–571
59. S. Rajasegarar, A. Gluhak, M.A. Imran, M. Nati, M. Moshtaghi, C. Leckie, M. Palaniswami,
Ellipsoidal neighbourhood outlier factor for distributed anomaly detection in resource con-
strained networks. Pattern Recogn. 47(9), 2867–2879 (2014a)
60. S. Rajasegarar, C. Leckie, M. Palaniswami, Hyperspherical cluster based distributed anomaly
detection in wireless sensor networks. J. Parallel Distrib. Comput. 74(1), 1833–1847 (2014b)
61. T. Bokareva, N. Bulusu, S. Jha, Graph theory based aggregation of sensor readings in wireless
sensor networks, in Proceedings of the 33rd IEEE Conference on Local Computer Networks
(LCN) (2008), pp. 514–515
62. E.C.-H. Ngai, J. Liu, M.R. Lyu, On the intruder detection for sinkhole attack in wireless
sensor networks, in IEEE International Conference on Communications, vol. 8 (2006), pp.
3383–3389
63. E.C.-H. Ngai, J. Liu, M.R. Lyu, An efﬁcient intruder detection algorithm against sinkhole
attacks in wireless sensor networks. Comput. Commun. 30(11–12), 2353–2364 (2007)
64. J.-W. Ho, D. Liu, M. Wright, S.K. Das, Distributed detection of replica node attacks with
group deployment knowledge in wireless sensor networks. Ad Hoc Netw. 7(8), 1476–1488
(2009)
65. J. Yuan, H. Zhou, H. Chen, Subjective logic-based anomaly detection framework in wireless
sensor networks. Int. J. Distrib. Sens. Netw. 2012(2012), 13 (2011)
66. S.H. Chi, T.H. Cho, Fuzzy logic anomaly detection scheme for directed diffusion based sensor
networks, in Fuzzy Systems and Knowledge Discovery, vol. 4223, Lecture Notes in Computer
Science, ed. by L. Wang, L. Jiao, G. Shi, X. Li, J. Liu (Springer, Berlin, 2006), pp. 725–734
67. Y. Ponomarchuk, D.W. Seo, Intrusion detection based on trafﬁc analysis and fuzzy inference
system in wireless sensor networks. J. Converg. 1(1), 35–42 (2010)
68. O. Linda, M. Manic, T. Vollmer, J. Wright, Fuzzy logic based anomaly detection for embedded
network security cyber sensor, in IEEE Symposium on Computational Intelligence in Cyber
Security (CICS) (2011), pp. 202–209
69. H. Kumarage, I. Khalil, Z. Tari, A. Zomaya, Distributed anomaly detection for industrial
wireless sensor networks based on fuzzy data modelling. J. Parallel Distrib. Comput. 73(6),
790–806 (2013b)
70. M. Moshtaghi, J. Bezdek, C. Leckie, S. Karunasekera, M. Palaniswami, Evolving fuzzy rules
for anomaly detection in data streams. IEEE Trans. Fuzzy Syst. PP(99), 1 (2014b)

42
2
Background
71. I. Onat, A. Miri, An intrusion detection system for wireless sensor networks, in Proceed-
ings of IEEE International Conference on Wireless And Mobile Computing, Networking And
Communications, vol. 3 (2005), pp. 253–259
72. V.S. Bhuse, Lightweight intrusion detection: a second line of defense for unguarded wireless
sensor networks. Ph.D. thesis, Department of Computer Science, Western Michigan Univer-
sity, 2007
73. D.E. Boubiche, Z. Bilami, Cross layer intrusion detection system for wireless sensor network.
Int. J. Netw. Secur. Appl. (IJNSA) 4(2), 35–52 (2012)
74. M. Becker, M. Drozda, S. Schaust, S. Bohlmann, H. Szczerbicka, On classiﬁcation approaches
for misbehavior detection in wireless sensor networks, J. Comp. 4(5) 357–365 (2009)
75. H. Dai, H. Liu, Z. Jia, T. Chen, A multivariate classiﬁcation algorithm for malicious node
detection in large-scale wsns, in Proceedings of IEEE 11th International Conference on Trust,
Security and Privacy in Computing and Communications (TrustCom) (2012), pp. 239–245
76. T. Li, M. Song, M. Alam, Compromised sensor nodes detection: a quantitative approach, in
Proceedings of 28th International Conference on Distributed Computing Systems Workshops
(2008), pp. 352–357
77. I. Krontiris, T. Dimitriou, F.C. Freiling, Towards intrusion detection in wireless sensor net-
works, in Proceedings of 13th European Wireless Conference (2007), p. 7
78. B. Krishnamachari, I. Iyengar, Distributed bayesian algorithms for fault-tolerant event region
detection in wireless sensor networks. IEEE Trans. Comput. 3, 241–250 (2004)
79. A. Lazarevic, A. Ozgur, L. Ertoz, J. Srivastava, V. Kumar, A comparative study of anomaly
detection schemes in network intrusion detection, in Proceedings of the Third SIAM Interna-
tional Conference on Data Mining (2003), pp. 1–8
80. M. Usman, V. Muthukkumarasamy, X.-W. Wu, S. Khanum, Securing mobile agent based
wireless sensor network applications on middleware, in International Symposium on Com-
munications and Information Technologies (ISCIT) (2012), pp. 707–712
81. Y.M. Kwon, S. Sundresh, K.L Mechitov, G. Agha, Actornet: an actor platform for wireless
sensor networks, in Proceedings of the Fifth International Joint Conference on Autonomous
Agents and Multiagent Systems (2006), pp. 1297–1300
82. C.-L. Fok, G.-C.n Roman, C. Lu, Agilla: a mobile agent middleware for self-adaptive wireless
sensor networks. ACM Trans. Auton. Adapt. Syst. 4(3), 16:1–16:26 (2009)
83. F. Aiello, G. Fortino, R. Gravina, A. Guerrieri, Maps: a mobile agent platform for java sun
spots, in Proceeding of the Third International Workshop on Agent Technology for Sensor
Networks (2009), p. 8
84. C. Muldoon, G.M.P. OHare, R. Collier, M.J. OGrady, Agent factory micro edition: a frame-
work for ambient applications, in Computational Science, ed. by V.N. Alexandrov, G.D. van
Albada, P.M.A. Sloot, J. Dongarra. Lecture Notes in Computer Science, vol. 3993 (Springer,
Berlin, 2006), pp. 727–734
85. G. Vigna, Cryptographic traces for mobile agents, in Mobile Agents and Security (1998), pp.
137–153
86. J. Zhang, Y. Wang, V. Varadharajan, A new security scheme for integration of mobile agents
and web services, in Second International Conference on Internet and Web Applications and
Services (2007), p. 43
87. Y. Mu, R.H. Deng, M. Zhang, Q. Zhang, Secure mobile agents with designated hosts, in
Proceedings of IEEE Third International Conference on Network and System Security (2009),
pp. 286–293
88. N.S. Malik, D. Ko, H.H. Cheng, A secure migration process for mobile agents. Softw. Pract.
Exp. 41(1), 87–101 (2011)
89. O. Esparza, J.L. Munoz, J. Tomas-Builart, M. Soriano, An infrastructure for detecting and
punishing malicious hosts using mobile agent watermarking. Wireless Commun. Mob. Com-
put. 11(11), 1446–1462 (2011)
90. M. Usman, V. Muthukkumarasamy, X.-W. Wu, Formal veriﬁcation of mobile agent based
anomaly detection in wireless sensor networks, in Proceedings of IEEE 38th Conference on
Local Computer Networks Workshops (LCN Workshops) (2013), pp. 1001–1009

References
43
91. S. Nanz, C. Hankin, A framework for security analysis of mobile wireless networks. Theoret.
Comput. Sci. 367(1–2), 203–227 (2006)
92. N. Mezzetti, D. Sangiorgi, Towards a calculus for wireless systems. Electron. Notes Theor.
Comput. Sci. 158(1), 331–353 (2006)
93. M. Merro, F. Ballardin, E. Sibilio, A timed calculus for wireless systems. Theoret. Comput.
Sci. 412(47), 6585–6611 (2011)
94. J. Godskesen, A calculus for mobile ad hoc networks, In Coordination Models and Languages
(Springer, Berlin Heidelberg 2007), pp. 132–150
95. M. Merro, An observational theory for mobile ad hoc networks. Inf. Comput. 207(2), 194–208
(2007)
96. A. Singh, C.R. Ramakrishnan, S. Smolka, A process calculus for mobile ad hoc networks, in
Coordination Models and Languages, vol. 5052, Lecture Notes in Computer Science, ed. by
D. Lea, G. Zavattaro (Springer, Berlin Heidelberg, 2008), pp. 296–314
97. Y.W. Law, R. Corin, S. Etalle, P.H. Hartel, A formally veriﬁed decentralized key management
architecture for wireless sensor networks, in Personal Wireless Communications, vol. 2775,
Lecture Notes in Computer Science, ed. by M. Conti, S. Giordano, E. Gregori, S. Olariu
(Springer, Berlin, 2003), pp. 27–39
98. F. Werner, Applied formal methods in wireless sensor networks. Ph.D. thesis, Faculty of
Computer Science, Karlsruhe Institute of Technology, 2009
99. A. Armando, D. Basin, Y. Boichut, Y. Chevalier, L. Compagna, J. Cuellar, P. Drielsma,
P. Heam, O. Kouchnarenko, J. Mantovani, S. Modersheim, D. Oheimb, M. Rusinowitch,
J. Santiago, L. Turuani, M. Vigano, L. Vigneron, The avispa tool for the automated validation
of internet security protocols and applications, in Computer Aided Veriﬁcation, ed. by D. Lea,
G. Zavattaro (Springer, Berlin, 2005), pp. 281–285
100. T. Murata, Petri nets: properties, analysis and applications. Proc. IEEE 77(4), 541–580 (1989)
101. D. He, L. Cui, H. Huang, M. Ma, Design and veriﬁcation of enhanced secure localization
scheme in wireless sensor networks. IEEE Trans. Parallel Distrib. Syst. 20(7), 1050–1058
(2009)
102. H. Rodriguez, R. Carvajal, B. Ontiveros, I. Soto, R. Carrasco, Using petri net for modeling
and analysis of an encryption scheme for wireless sensor networks, in Petri Nets Applications,
ed. by P. Pawlewski (InTech, Croatia, 2010)
103. H.-R. Tseng, R.-H. Jan, W. Yang, A robust user authentication scheme with self-certiﬁcates
for wireless sensor networks. Secur. Commun. Netw. 4(8), 815–824 (2011)
104. Z. Sbai, M. Escheikh, Model checking techniques for verication of an encryption scheme
for wireless sensor networks, in Proceeding of the International Conference on Information
Processing and Wireless Systems (2012), p. 6
105. Z. Bankovic, J.C. Vallejo, P. Malagon, A. Araujo, J.M. Moya, Eliminating routing protocol
anomalies in wireless sensor networks using ai techniques, in Proceedings of the 3rd ACM
Workshop on Artiﬁcial Intelligence and Security (2010), pp. 8–13

Chapter 3
Abnormality Identiﬁcation and Conﬁrmation
System
3.1
Introduction
Abnormalities can severely disrupt the performance of a sensor network application.
In a worst-case scenario, abnormalities caused by attacks or faults can completely halt
thefunctioningofasensornetworkapplication.Thetimelydetectionofabnormalities
and then identiﬁcation of the source of abnormalities are, therefore, imperative for
their effective mitigation. This chapter has introduced an abnormality identiﬁcation
and conﬁrmation system which can not only timely detect the different nature of
abnormalities, but also effectively identify the source of abnormalities.
This chapter is structured as follows: A few formal deﬁnitions and terminolo-
gies are discussed in Sect.3.2. The network model is drawn in Sect.3.3. The internal
structural details of the presented system are described in Sect.3.4. The algorithmic
speciﬁcations of the system and their complexity analysis are presented in Sect.3.5.
The model formulation and its formal analysis are carried out in Sect.3.6. The exten-
sion of the model is made by deﬁning a related Generalized Stochastic Petri net model
in Sect.3.7 to formalize the time-based characteristics of the presented system. The
time-based conduct validation of the system through experimentation on a real test
bed is performed in Sect.3.8. The key results of the work are presented in Sect.3.9.
Finally, the conclusion is drawn in Sect.3.10.
3.2
Terminologies and Formal Deﬁnitions
All symbolism is locally deﬁned at the time of their ﬁrst use, and a list of key notations
is provided in Appendix A for reference. The readers are referred to the study [12] for
the deﬁnition of Petri and Generalized Stochastic Petri nets. The formal deﬁnitions
of behavioral and structural properties, namely reachability, safeness, boundedness,
liveness, and deadlock are given in [1, 2].
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7_3
45

46
3
Abnormality Identiﬁcation and Conﬁrmation System
3.3
Network Model
The structure of the network is presumed to be a clustered network with hierarchy.
A rth cluster Cr is formed by the collection of s number of motes, msn, at the lowest
level, namely leaf level, such that Cr = {msni|1, , s}. Let msnq represent the node
of interest from the cluster Cr. The symbol MSN represents all member nodes in the
network. The cluster leader nodes (CLNs) are in-charge nodes of their proximities,
and they are equipped with more resources as compared to other ordinary member
nodes. The Ξ number of CLNs is linked with a node, namely base station (BS), which
is chief of the network and responsible to operate application and handle received
data. A generic formation of the network model is illustrated in Fig.3.1 [3]. The
general network functionality has following characteristics:
• The interaction between constituents of the network is non-deterministic due to
several aspects such as channel errors and environmental inﬂuence [4].
• The CLNs keep track of the statuses of the resources of the member nodes
through the synchronized resource management technique which is facilitated
by TinyOS [5].
• The agents, namely abnormality agents (AAs), have watermark embedded in their
codes. Thus, they are safe from attacks [6]. The key steps of the algorithm used
in this study are following: (i) Select p and q as numbers, namely prime numbers,
where p × q = N, (ii) insert N in graph G, (iii) generate watermark W to create
G, (iv) embed W in the original code O to generate Oo code so that if the given
    Cluster Member Node
Cluster Leader Node
Base Station
Mobile Agent
Communication Link
Fig. 3.1 Network model: c⃝Academy Publisher, reprinted from M. Usman, V. Muthukkumarsamy,
and X.-W. Wu. A resource-efﬁcient system for detection and veriﬁcation of anomalies using mobile
agents in wireless sensor networks. Journal of Networks, 9(12):3427–3444, 2014

3.3 Network Model
47
input I, the recognizer R is able to extract W and N (v) employ tamperprooﬁng to
avoid the removal of W (generating O1), (vi) employ obfuscation to make analysis
difﬁcult (generating O2), at this stage, R and W becomes R 0 and W 0, (vii) extract
R
′ and distribute code O3, (viii) the attacker can generate O4 by modifying O3,
and (ix) ﬁnally, the cluster leader node can then verify the originality of the code
by applying R
′ to O4 in the case of an attack.
• The movement of AA is restricted among only cluster leader and member nodes
for optimum utilization of energy resources.
• All leaf nodes are assumed to be susceptible to different nature of abnormalities.
The other entities in the network are considered as secure.
• The bootstrap values of all member nodes are kept within [0,1], a closed interval.
These values vary at run time due to the dynamic changes in the behavior of nodes.
3.4
Architecture of Abnormality Identiﬁcation and
Conﬁrmation Module
The description of the composition of abnormality identiﬁcation and conﬁrmation
module (ADVM) is elucidated below.
3.4.1
Abnormality Identiﬁcation and Conﬁrmation Module
Every cluster leader node is set up with its own ADVM which accomplishes several
imperative tasks such as detection of abnormalities, transmission of agents, and
transmission optimization of agents. The ADVM is made up of three sub-modules,
namely coordination unit, abnormality agent, and repository Fig.3.2 [3] depicts the
deployment of ADVMs on several cluster leader nodes.
Coordination Unit: This is a main component of ADVM. It facilitates coordina-
tion among internal elements of ADVM and detection of abnormalities coordination
with the BS node. The element CU fetches readings from inbound data trafﬁc to
carry out abnormality identiﬁcation. The legitimate reading is transmitted to Aggre-
gation Unit (AU) which aggregates sensed data and periodically transmits them to
BS. Conversely, that is, in the case of anomalous data, CU is entitled to initiate the
following actions: (i) Transmit abnormality agent to perform on-the-spot conﬁrma-
tion of suspicious node, (ii) trigger an alarm to the BS node, (iii) declare the cluster
member node as faulty or antagonist, and (iv) reduce interaction with the doubtful
node.
Abnormality Agent: It is a tiny piece of code which is made up of four fragments,
namely identity, data, code, and itinerary. Every agent possesses an inimitable iden-
tity. The agent itinerary is based on the target node address. The code fragment is
composed of on-the-spot conﬁrmation procedure code. The data fragment contains

48
3
Abnormality Identiﬁcation and Conﬁrmation System
 Anomaly Detection and 
   Verification Module
Coordination Unit
Repository
Anomaly Agent
Aggregation Unit
Data Flow
Location of Module
Communication Link
Cluster n
Cluster 3
Cluster 2
Cluster 1
Cluster Member Node
Cluster Leader Node
Fig. 3.2 A depiction of the deployment of ADVM on the cluster leader nodes:
c⃝Academy
Publisher, reprinted from M. Usman, V. Muthukkumarsamy, and X.-W. Wu. A resource-efﬁcient
system for detection and veriﬁcation of anomalies using mobile agents in wireless sensor networks.
Journal of Networks, 9(12):3427–3444, 2014
Identity Itinerary
Code
Data
Anomaly Agent_A
Cluster_1 Member Node_1
for (k =1, i = 1 to S_msnq[i] = )  do
CMP (S_msnq [i], S_agntq [k])
if (CMP (S_msnq [i], S_agntq [k]) = = 
TRUE then
i++, k++
R          0
else
R           1
end if
end for
SR
BY
MS
15.21 85.21 91.0
14.91 85.17 92.0
Fig. 3.3 The depiction of the internal composition of an abnormality agent: c⃝Academy Publisher,
reprinted from M. Usman, V. Muthukkumarsamy, and X.-W. Wu. A resource-efﬁcient system for
detection and veriﬁcation of anomalies using mobile agents in wireless sensor networks. Journal of
Networks, 9(12):3427–3444, 2014
values of previous data packets that are employed for on-the-spot conﬁrmation of
suspicious node. Fig.3.3 [3] shows the composition of an abnormality agent.

3.4 Architecture of Abnormality Identiﬁcation and Conﬁrmation Module
49
CU can activate an agent for on-the-spot conﬁrmation of the doubtful node
after the identiﬁcation of abnormalities in received data packets. The following cases
may occur as a consequence of the agent transmission: (i) the correct execution of
an agent on a doubtful node and communication of on-the-spot conﬁrmation result
to a cluster leader node, (ii) transfer of agent to doubtful node is endangered to
the attack, namely agent-execution manipulation, and (iii) the doubtful node may
escape the examination of an agent and as a result it may not transmit back any
outcome to the cluster leader node. For the case (i), the agent will transfer the required
values of the data to the cluster leader node. For the case of (ii), the mechanisms
for the protection of agent-execution integrity may be integrated to secure from the
execution-manipulation attack [7]. For the case (iii), if the doubtful node prohibits
the examination of the agent, and no outcome is transmitted to the cluster leader
node, this will prove abnormal status of node, that is the eventual aim of transmitting
that agent.
Repository: It is denoted by RP, and it can store the values of features of interest
of the normal proﬁle and other associated data as ﬁve tuples. These ﬁve tuples then
facilitate the procedures of identiﬁcation of abnormalities and transmission of agents.
The composition of repository is conceived as an addition to the preliminary concept
stated in [8]. The tuples can be formally deﬁned as shown below.
RP = ⟨msnid
q , RS, FS, AO, AS⟩
(3.1)
In Eq.(3.1), msnid
q is a column vector that keeps the identities of nodes which are
members of a particular cluster. The tuple, RS, stores statuses of the resources of
nodes. Every member node has several resources, for instance, memory and battery.
The values of these resources are kept in the memory in the form of an m × n
matrix; here m represents strength of member nodes in terms of numbers and n
denotes resources. The FS tuple, on the other hand, stores values of features. The
single value of FS, for nodes with similar responsibilities in the cluster, is stored on
the cluster leader node for the optimum utilization of its memory. If the sufﬁcient
memory space is available, then different values of FS can be stored to facilitate
high level of security. The fundamental structure of FS is shown below.
FS = ⟨λ, j, ϕ, υ, f ⟩
(3.2)
In Eq.3.2, λ outlines the minimum to maximum boundaries of the values of the
sensor reading. For instance, λ can keep values in the range of 16−34 ◦C to set the
usual behavior of a member node of the cluster. The j feature represents the time
interval, which is used to observe the actions of the member node for a speciﬁc
duration of time. This activity saves record of the usual behavior of the member node
in connection with other factors such as sensor reading and resource status. The ϕ
feature keeps the values for the actions which are entitled such as sleeping, wake-up,
sensing, and transmission of sensed data values, which are performed by the member

50
3
Abnormality Identiﬁcation and Conﬁrmation System
nodes. The f and υ features represent count of the received packets and status of
member node resources, respectively.
The AO tupleisaw×nmatrix.Thismatrixsaveswabnormalobservations,which
stores the computed values of thresholds that are used to optimize the transmission
of abnormality agents. The optimization of agent transmission method is described
in the next chapter (see Sects.4.2.2 and 4.2.3). The structure of the AO is expressed
below.
AO = FS
′
(3.3)
The FS
′ feature stores values of λ
′, j
′, ϕ
′, υ
′, and f
′, the notation λ
′ denotes
the abnormal values of sensor readings, the j
′ feature represents the unusual actions
which are performed by the member node, the ϕ
′ feature denotes actions performed
by the member node but they are unauthorized, and the f
′ feature represents the
unusual frequency of the received data packets.
The AS tuple represents the values of the set of actions that aids the functionality
of the abnormality identiﬁcation procedure. The AS tuple is made up of two action
classes, viz. κ and τ.
AS = ⟨κ, τ⟩
(3.4)
In Eq.(3.4), κ represents the actions related to the abnormality identiﬁcation
procedure. Subsequently, the ADVM transmits the usual reading to a unit, namely
aggregation unit. If the received observation is anomalous, then an abnormality agent
would be transmitted by the detection module. Alternatively, it may take diverse
action(s): (i) declaring the relevant member node as faulty of anomalous to other
member nodes within that cluster, transmitting an alarm to the chief node, i.e., BS,
and reducing the interaction with the doubtful node. The τ tuple denotes tuning
actions such as changes in the limits of the zones, namely normal, tolerated, and
anomalous. It is stated that the κ action is automatically executed by ADVM after
the receipt of every observation, on the other hand, the τ action can be started by a
user from the BS node. Tables3.1 [3] and 3.2 [3] present descriptions of the set of
actions. Similarly, Figs.3.4 [3] and 3.5 [3] illustrate ﬂows of the actions. Note that
the detection part of the sample set of actions and corresponding ﬂow of those actions
are based on the ﬁrst-order abnormalities detection algorithm which is presented in
Sect.4.2.1.
3.5
Algorithms and Analysis
The trustworthiness of the sensor network applications is mainly reliant on the accu-
rately received data. However, data packets, communicated by the cluster member
nodes, are vulnerable to attacks and faults. A resilient abnormality identiﬁcation sys-
tem, therefore, must be capable of detecting the origin of abnormalities along with the
detection of abnormalities before taking ﬁtting actions against the antagonist cluster
member node. The system, described in this book, can discover abnormalities and

3.5 Algorithms and Analysis
51
Table 3.1 κ actions deﬁnitions: c⃝Academy Publisher, reprinted from M. Usman, V. Muthukku-
marsamy, and X.-W. Wu. A resource-efﬁcient system for detection and veriﬁcation of anomalies
using mobile agents in wireless sensor networks. Journal of Networks, 9(12):3427–3444, 2014
State
Description
A
Carry out identiﬁcation of abnormalities procedure on the basis of the ﬁrst-order bounds
B
Transmit aggregated data to the related unit, i.e., aggregation unit
C
Cluster leader node veriﬁes the member node behavior to facilitate the communication
of the agent
D
Forward an agent to the member node for on-the-spot conﬁrmation of the node
E
Reduce the interaction with the cluster member node
F
Communicate status of faulty node to other leader nodes
G
Transmit an alarm to BS regarding the malicious cluster member node
Table 3.2 τ actions deﬁnitions: c⃝Academy Publisher, reprinted from M. Usman, V. Muthukku-
marsamy, and X.-W. Wu. A resource-efﬁcient system for detection and veriﬁcation of anomalies
using mobile agents in wireless sensor networks. Journal of Networks, 9(12):3427–3444, 2014
State
Description
H
Update bounds of the normal zone of FS
I
Update bounds of the tolerance zone of FS
J
Update abnormality identiﬁcation bounds of the λ and j features
K
Update abnormality identiﬁcation bounds of the j and υ features
L
Update abnormality identiﬁcation bounds of the ϕ and υ features
M
Update abnormality identiﬁcation bounds of the ϕ and j features
N
Update abnormality identiﬁcation bounds of the F and j features
A
B
C
D
E
F
G
Fig. 3.4 Flow of states of κ actions:
c⃝Academy Publisher, reprinted from M. Usman,
V. Muthukkumarsamy, and X.-W. Wu. A resource-efﬁcient system for detection and veriﬁcation of
anomalies using mobile agents in wireless sensor networks. Journal of Networks, 9(12):3427–3444,
2014
then it is capable of using those values for on-the-spot conﬁrmation of the doubtful
cluster member nodes by using abnormality identiﬁcation. This section elucidates
algorithmic speciﬁcations of the system.

52
3
Abnormality Identiﬁcation and Conﬁrmation System
H
I
J
K
L
M
N
Fig. 3.5 Flow of states of τ actions:
c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. A resource-efﬁcient system for detection and veriﬁcation of
anomalies using mobile agents in wireless sensor networks. Journal of Networks, 9(12):3427–3444,
2014
Algorithm 3.1 Collection of the values of features by a cluster member node
Input: Bl
t
Output: Fq
1: At t time
2: if Bl
c ≥Bl
t then
//conﬁrm the status of battery
3:
while i ≤j do
4:
Clct ( Fq[i] )
//accumulate the ith feature values of the ith cluster member node
5:
S_msnq[i] ←Fq[i]
//save ith segment value in the stack
6:
Fq ←Fq + Fq[i]
//combine values before dispatch
7:
i ←i + 1
8:
end while
9:
TRNSMT Fq to clnq
//dispatch data packet, Fq, to clnq
10:
go to sleep mode
11: else
12:
msnq fails to wake up
13: end if
3.5.1
Features Collection by the Cluster Member Node
A node in question, namely msnq, awakens at t time to verify the status of the
battery. If Bl
c, the current level of battery of msnq, is higher than the already deﬁned
threshold, Bl
t , then it accumulates values for v features. The value of v is 3, and
Fq = {MS, BY, SR}, where MS, SR, and BY denote memory status, sensor reading,
and battery status, respectively. The msnq node stores the values of Fq in its stack
memory segment after the concatenation of the values to facilitate the on-the-spot
conﬁrmation procedure. Then stored values are communicated to, clnq, the related
cluster leader node, for more processing. The msnq node moves into the sleep state
after performing its assigned job. This procedure is performed periodically according
the requirements of the application speciﬁcations. The pseudocode of this procedure
is provided in Algorithm 3.1 [9].

3.5 Algorithms and Analysis
53
3.5.2
Abnormality Identiﬁcation by the Cluster Leader Node
A cluster leader node, clnq, obtains the data trafﬁc, from the msnq, based on the
values of features, that is, Fq = {MS, BY, SR}, inside the speciﬁed timeslot, that is,
T lb
i
≤Tar(Fq) := T
Fq
ar ≤T ub
i
, where T lb
i
represents the initial time, T ub
i
denotes the
end time, and Tar(Fq) a function that calculates the time of arrival, T
Fq
ar , of Fq. The
IEEE standard, namely 802.15.4, categorizes the timeline of communication into
two approaches, viz. Contention-Free Period (CFP) and Contention Access Period
(CAP) [10]. In the former approach, msnq attains the timeslot which is guaranteed
to interact with the clnq. The abnormality identiﬁcation algorithm uses the CFP
approach for obtaining the values of Fq. The msnq node is assumed as abnormal if
the received values of Fq are outside of the designated timeslot. A classic example
situation is shown in Fig.3.6 [9], wherein the clnq node receives the values of Fq
outside of the designated timeslot. Therefore, in such cases, the msnq node must be
treated as abnormal. In the situation, if the values of Fq are not received by the clnq
node from the msnq node within the designated timeslot, then it sends the agent, AA,
to the msnq node to carry out on-the-spot conﬁrmation of its antagonist behavior. The
agent transmits old values of Fq to verify the msnq node is behaving abnormally or if
theabnormalityhasoccurredduringthecommunicationofthevaluesof Fq amongthe
msnq and clnq nodes. In this situation, the clnq node also decreases the trust counter
of the msnq node by a ς factor (which is a system administrator speciﬁed number) and
transfers dal
i to BS, which is an alarm. In the situation, when the node, namely clnq
obtains the values of Fq inside the designated timeslot, it carries out the identiﬁcation
of abnormalities procedure by matching the Fq values with that of the related normal
proﬁle bounds, Pr fq = {(SRlb, SRub), (MSlb, MSub), (BY lb, BY ub)}, to identify
t2
t3
Allocated slot t
Unallocated slot t'
Flow of transmission towards the cln q
t0 =T i
lb
t1 =T i
ub
Data packet containing Fq
Fig. 3.6 A classic example situation of time-based abnormality: c⃝Academy Publisher, reprinted
from M. Usman, V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced
mobile agent-enabled anomaly detection in resource constrained networks. Journal of Networks,
10(6):353–368, 2015

54
3
Abnormality Identiﬁcation and Conﬁrmation System
Algorithm 3.2 Abnormality detection by the cluster leader node
Input: Fq, Pr fq, T R
Output: SR, dal
i , dag
i , AA, T R
1: if T lb
i
≤Tar(Fq) := T Fq
ar ≤T ub
i
then
//check Fq is received inside designated timeslot
2:
C H K(Fq, Pr fq)
//perform abnormality identiﬁcation
3:
if C H K = = T RU E then
4:
A_unt ←SR
//save reading to aggregation unit
5:
T RN SMT dag
i
to BS
//dispatch accumulated data toe BS after T ub
i
6:
break
7:
else
8:
T RN SMT dal
i
to BS
//trigger abnormality alarm to BS
9:
T RN SMT AA to msnq
//transmit abnormality agent to msnq
10:
if T R > 0 then
//check level of trust
11:
Decr T R by ς
//decrement the level of trust
12:
end if
13:
end if
14: else
15:
T RN SMT dal
i
to BS
//trigger abnormality alert to BS
16:
T RN SMT AA to msnq
//transmit abnormality agent to msnq
17:
if T R > 0 then
//check level of trust
18:
Decr T R by ς
//decrease the level of trust
19:
end if
20: end if
the abnormalities. If the matching result is correct, then the values of SR are accu-
mulated by A_unt within a designated interval of time prior to dispatch to BS. In the
contrary, if the clnq node identiﬁes an abnormal reading, then it transmits an agent
for on-the-spot conﬁrmation of the antagonist actions of the msnq node, triggers an
alarm, dal
i , to BS, and also reduces the count of trust by the ς value. The pseudocode
for the procedure of the abnormality detection is given in Algorithm 3.2 [9].
3.5.3
Anomalous Node Conﬁrmation
A node, namely msnq, which is a cluster member node, receives AA. It then inserts
the abnormalities detection related data values into the stack segment of the memory,
denoted by S_msnq. This is the part of the node memory which is reserved for on-
the-spot conﬁrmation of the origin of abnormalities procedure. The AA carries out
this procedure by matching the MS, SR, and BY values of the stack segment of the
memory of the mote and the values that are brought by the agent. If the results are
correct, then the value 0, normal rank of the mote, is saved.
If even not a single value is matched, then the value 1, showing the mote status as
under on-the-spot attack or fault, is saved. The either form of the results is forwarded
to the related cluster leader mote. It is pertinent to observe that if the presented system
is only positioned for those abnormalities which happen due to errors or faults, the

3.5 Algorithms and Analysis
55
Algorithm 3.3 Anomalous mote conﬁrmation
Input: AA, readings of SR, BY, MS saved in S_msnq
Output: W R
1: msnq obtains AA
//msnq receives abnormality agent
2: PU SH AA in S_agntq
//abnormality agent saves in the dedicated space of memory
3: for (k = 1, i = 1 to S_msnq[i] = ϵ) do
4:
C M P (S_msnq[i], S_agntq[k])
//contrast past saved values of parameters with those
values which are carried by the abnormality agent
5:
if (C M P (S_msnq[i], S_agntq[k])) = = T RU E then
6:
i + +, k + +
7:
R ←0
//save “0” result, showing no abnormalities
8:
else
9:
R ←1
//save “1” result, representing abnormalities
10:
end if
11: end for
12: W M A(R) := W R
//abnormality agent integrate watermark in outcome
13: T RN SMT W R to clnq
//dispatch the watermarked outcome to clnq
value of R will be directly communicated to the related cluster leader mote. On the
contrary, if the presented system is also positioned for other types of abnormalities
occur due to attacks, the agent is designated to include a watermark in the result. This
approach prevents result from the manipulation attack. The insertion of watermark
in result, however, increases transmission and communication costs of on-the-spot
conﬁrmation procedure. The overhead of the watermarking is examined in Sect.3.8.
The pseudocode of this procedure is provided in Algorithm 3.3 [9].
3.5.4
Status Update on the Cluster Leader Mote
A mote, clnq, gets W R, the watermark inserted result, inside the speciﬁed time limit
and disintegrates the result and watermark. If the obtained result shows the antagonist
status of the member mote, then the cluster leader mote reduces the value of trust of
a doubtful mote by ς factor and transmits an alert to BS to update the status of mote.
On the contrary, if the obtained notiﬁcation is “0”, then the member mote is treated
as trouble-free mote and the leader mote takes no action against the member mote. If
no result, regarding on-the-spot conﬁrmation, is received by the leader mote inside
the speciﬁed time limit, it reduces the value of trust of the member mote and sends
an alert to BS.
It is imperative to note that leader mote would broadcast an alert and reduce
the value of trust in situations such as after discovery of abnormalities and after
obtaining on-the-spot conﬁrmation results. If on-the-spot conﬁrmation procedure
is not successful and BS is not communicated with the abnormality identiﬁcation
result, then a system administrator may have no information about the detection of
abnormality. The pseudocode of is listed in Algorithm 3.4 [9].

56
3
Abnormality Identiﬁcation and Conﬁrmation System
Algorithm 3.4 Update of status on the cluster leader mote
Input: W R, T R
Output: T R, dal
j
1: if T lb
j
≤Tar(W R) := T W R
ar
≤T ub
j
then
//check conﬁrmation outcome obtained inside the
designated timeslot
2:
RmW(W R) := R
//separate watermark from outcome
3:
if R = = 1 ∧T R > 0 then
//check conﬁrmation outcome and values of trust
4:
Decr T R by ς
//decrease the value of trust
5:
T RAN SMT dal
j to BS
//dispatch alert
6:
else
7:
break
8:
end if
9: else
10:
if T R > 0 then
11:
Decr T R by ς
//decrease the value or trust
12:
T RAN SMT dal
j to BS
//dispatch alert
13:
end if
14: end if
Algorithm 3.5 Status update on the base station mote
Input: dag
i
∧dal
i
∨dal
j
Output: update A_rep, update Adata
1: if BS mote receives dal
i
∨dal
j then
//obtained packet is an alert
2:
update Arep
//repository of application update
3:
break
4: else if BS mote receives dag
i
then
//aggregated data inside the obtained packet
5:
update A_data
//application data update
6: else
7:
break
8: end if
3.5.5
Update of Status on Base Station
A mote, namely BS, obtains either the abnormality alarm, denoted by dal
j or dal
i , or the
data which is aggregated, represented by dag
i , from the leader mote. For the former,
BS triggers a message for user to inform about antagonist status of the member mote.
For the latter, BS stores the accumulated data for further analysis. The pseudocode
is listed in Algorithm 3.5 [9].
3.5.6
Complexity Analysis
The space and time complexities of the proposed algorithms are analyzed in this
section.

3.5 Algorithms and Analysis
57
Theorem 3.1 The space complexity for (i) the procedure for the collection of the
values of features by msnq has upper bound by l[a]; (ii) the procedure of abnormality
identiﬁcation on clnq is Ca + l[b]; (iii) the procedure of on-the-spot conﬁrmation
of msnq is l[c]; (iv) the procedure of update of status on clnq is l[d]; and (v) the
procedure of update of status on BS is l[e].
Proof (i). Let FS1 = {λ, ϕ, υ} represent the features of interest values that are calcu-
lated on msnq and then employed by AA for on-the-spot conﬁrmation procedure. The
notation l[a] represents the stack memory length which stores the values of features
and msnq[x] denotes the stack memory length, where msnq[x] > l[a]. Assuming
a as values of maximum number of features that are collected by msnq, the space
complexity has upper bound as l[a].
(ii).Let Fq ={SR; MS; BY}bethevaluesofthefeatureswhicharereceivedbythe
clnq. Let Pr fq = {(SRlb, SRub)(MSlb, MSub), (BY lb, BY ub)} be the corresponding
bounds to perform the abnormality identiﬁcation on features. Thus, the space of
memory consumed by b features, which belong to Fq, becomes l[b]. The clnq takes
constant memory spaces C1, C2, C3, and C4 to store the values of the bounds for the
abnormality identiﬁcation, aggregated sensed data (dag
i ) allocated timeslot values
(T lb
i
and T ub
i
), and the trust value (T R) of the msnq, respectively. The abnormality
conﬁrmation agent consumes C5 and C6 spaces of memory to save data and code
of the abnormality conﬁrmation agent, correspondingly, where space of memory
reserved for data also stores the values of identity and itinerary of the abnormality
conﬁrmation agent (AA). Therefore, the overall space of memory consumed by the
abnormality identiﬁcation procedure is 6
a=1 Ca + l[b].
(iii). Let msnq[y] assume as the stack memory length of msnq which accommo-
dates the procedure of on-the-spot conﬁrmation. The mote msnq[y] must fulﬁll the
following two conditions: (a) msnq[y] > l[b] and (b) msnq[y] > C6, where C7 =
C5
 C6. This implies that the msnq memory must facilitate the accumulated Fq
values, and the data and code of AA for on-the-spot conﬁrmation procedure. Let l[c]
be an upper bound of total Fq memory for both C6 and l[b], the space complexity
for on-the-spot conﬁrmation of msnq is l[c].
(iv). The clnq takes constant memory spaces C4, C8, and C10 to store the trust
value (T R) allocated timeslot values (T lb
i ), and T ub
i
, and in situ conﬁrmation result
value (W R). These memory spaces must hold the relation C10 > C8 > C4, as C10
holds the watermarked on-the-spot conﬁrmation result (W R) which takes more space
as compared to T lb
i
and T ub
i
values (stored by C8 memory space) and the T R value
(stored by C4 memory space). Thus, considering l[d] as the upper bound of the
combined C4, C8, and C10 spaces, the space complexity of the algorithm of the
status update on the clnq is l[d].
(v). The BS mote takes C11 memory space to store received abnormality alarm,
dal
i
or dal
i , from the clnq. Similarly, the memory space C12 is taken by the BS mote
to store the received aggregated data (dal
j ). Considering l[e] = C11
 C12, the space
complexity for the status update on the BS is l[e]4.
Theorem 3.2 The time complexity for (i) The procedure for the collection of the
values of features by msnq is O(l); (ii) the procedure of abnormality identiﬁcation

58
3
Abnormality Identiﬁcation and Conﬁrmation System
on clnq is U; (iii) the procedure of on-the-spot conﬁrmation of msnq is O(m); (iv)
the procedure of update of status on clnq is constant time V ; and (v) the procedure
of update of status on BS is constant time W.
Proof (i). Time complexity for procedure of collection of features is primarily depen-
dent on FS1 = {λ, ϕ, υ}; here FS1 = {ι, f } is calculated on clnq after obtaining FS1
values from msnq. Let msnq takes l time to accumulate values of FS1 from its prox-
imity and save them. The mote msnq consumes U1, a constant time, to communicate
Fq values to clnq. Taking the case of upper bound, the features collection procedure
has O(l) time complexity.
(ii). The clnq takes constant time U2 to get the featuresFq from msnq, U3
time to check the condition T lb
i
≤Tar(Fq) := T
Fq
ar ≤T ub
i
, that is, Fq received
within the allocated timeslot, and U4 time to perform the abnormality identiﬁcation,
C H K(Fq, Pr fq). The clnq consumes U5 time to aggregate the sensor reading, U6
time to check the trust value consumes, U7 time to decrement the trust value, U8 time
for the abnormality conﬁrmation agent dispatch to msnq; here msnq is antagonist
in such situations. The clnq consumes U9 time to transmit abnormality alarm, dal
i ,
to the BS mote. Thus, considering  = 9
i=2

i, the algorithm for the abnormality
identiﬁcation procedure runs in a constant time U.
(iii). The mote msnq receives AA and transmits on-the-spot conﬁrmation result
to clnq in U10 to U11 times. The mote msnq takes U12 time to add a watermark in on-
the-spot conﬁrmation result. The mote msnq takes m time to carry out the operation
of comparison among the values of Smsnq and Sagntq. Thus, by taking the upper limit
on time consumed by the procedure of comparison, the complexity of on-the-spot
conﬁrmation procedure is O(m).
(iv). The clnq takes constant V1 time to check conﬁrmation result within the
allocated timeslot values. It takes constant time V2 to remove the watermark from
the received result, V3 to check the conﬁrmation result, V4 to check trust value, V5
to decrement the trust value, and V6 to transmit an abnormality alarm to BS. Thus,
considering V = 6
i=1 Vi, the algorithm for the status update procedure on the clnq
runs in a constant time V .
(v). The BS mote consumes constant time W1 to receive an abnormality alarm, dal
i
or dal
j , from the clnq. Similarly, the BS mote consumes time W2 to store the received
aggregated data, dal
j . Thus, considering W = W1 + W2, the algorithm for the status
update procedure on the BS mote runs in a constant time W.
3.6
Formal Model
The above-cited algorithmic speciﬁcations are primarily transformed into associated
Petri net modules. Subsequently, an integration, viz. bottom-up is performed to val-
idate a uniﬁed model that speciﬁes the formalization of the properties of the system.
This procedure is initiated by a reﬁned mapping between algorithmic speciﬁcations
and Petri net modules. In this course of events, both on-the-spot and during the

3.6 Formal Model
59
transmission abnormal states of the member motes are also considered. The states,
namely the wakeup by mote, threshold level, and other are formalized using places,
which are represented by p, whereas transitions which are denoted by t are used to
formalize different actions, such as activation of mote, check of battery level.
The ﬁrst algorithmic description shows the procedure of collection of Fq by msnq.
The formal procedure description is provided next.
Net module 1: (Collection of features by msnq). The features collection net module,
(PN1), is a 5-tuple net: PN1 = (P1, T1, F1, W1, (M0)1), where P1 = {p1, p2,
p3, p4} and T1 = {t1, t2, t3, t4, t5} are non-empty, ﬁnite, and disjoint sets of places
and transitions, correspondingly. F1 = {(p1, t1), (t1, p2), (p2, t2), (p2, t3), (p2, t4),
(t2, p3), (t3, p3), (t4, p3), (p3, t5), (t5, p4)}. W1(p1, t1) = W1(t1, p2) = W1(p2, t2)
= W1(p2, t3) = W1(p2, t4) = W1(t2, p3) = W1(t3, p3) = W1(t4, p3) = 1, W1(p3, t5) =
W1(t5, p4) = 3, and (M0)1 = p1.
The formal description of the identiﬁcation of the abnormalities is provided below.
Net module 2: (Abnormality identiﬁcation by the clnq). The abnormality identiﬁ-
cation net module, (PN2), is a 5-tuple net: PN2 = (P2, T2, F2, W2, (M0)2), where
P2 = {p5, p6, p7, p8, p9, p10} and T2 = {t6, t7, t8, t9, t10, t11, t12, t13} are non-empty,
ﬁnite, and disjoint sets of places and transitions, correspondingly. F2 = {(p5, t6),
(t6, p6), (p6, t7), (p6, t8), (p6, t9), (t7, p7), (t7, p8), (t8, p7), (t8, p8), (t9, p7), (t9, p8),
(p7, t10), (p8, t11), (t10, p9), (t11, p10), (p9, t12), (p10, t13)}. W2(p5, t6) = W2(t6, p6) =
W2(p8, t11) = W2(t11, p10) = W2(p10, t13) = 3, W2(p6, t7) = W2(p6, t8) = W2(p6, t9)
= W2(t7, p7) = W2(t7, p8) = W2(t8, p7) = W2(t8, p8) = W2(t9, p7) = W2(t9, p8) =
W2(p7, t10) = W2(t10, p9) = W2(p9, t12) = 1, and (M0)2 = 3p5.
The on-the-spot conﬁrmation procedure which is carried out on msnq is formal-
ized next.
Net module 3: (Anomalous mote, msnq, conﬁrmation). The abnormal mote conﬁr-
mation net module 3, (PN3), is a 5-tuple net: PN3 = (P3, T3, F3, W3, (M0)3), where
P3 = {p11, p12, p13} and T3 = {t14, t15, t16, t17, t18} are non-empty, ﬁnite, and disjoint
sets of places and transitions, correspondingly. F3 = {(p11, t14), (t14, p12), (p12, t15),
(p12, t16), (p12, t17), (t15, p13), (t16, p13), (t17, p13), (p13, t18)}. W3(p11, t14) =
W3(t14, p12) = 3, W3(p12, t15) = W3(p12, t16) = W3(p12, t17) = W3(t15, p13) =
W3(t16, p13) = W3(t17, p13) = W3(p13, t18) = 1, and (M0)3 = 3p11.
The next procedure elucidates msnq status update on clnq after the on-the-spot
conﬁrmation procedure. The formal description is provided next.
Net module 4: (Update of status on clnq). The update of status on the cluster leader
mote net module, (PN4), is a 5-tuple net: PN4 = (P4, T4, F4, W4, (M0)4), where
P4 = {p14, p15, p16, p17} and T4 = {t19, t20} are non-empty, ﬁnite, and disjoint
sets of places and transitions, correspondingly. F4 = {(p14, t19), (t19, p15), (p15, t20),
(t20, p16), (t20, p17)}. W4(p14, t19) = W4(t19, p15) = W4(p15, t20) = W4(t20, p16) =
W4(t20, p17) = 1 and (M0)4 = p14.
Last but not least, ﬁfth and ﬁnal algorithmic description elucidates the procedure
of on-the-spot conﬁrmation result and handling of aggregated data by BS.
Net module 5: (Update of status on BS). The update of status on BS net module,
(PN5), is a 5-tuple net: PN5 = (P5, T5, F5, W5, (M0)5), where P5 = {p18, p19, p20}

60
3
Abnormality Identiﬁcation and Conﬁrmation System
and T5 = {t21, t22, t23} are non-empty, ﬁnite, and disjoint sets of places and transi-
tions, correspondingly. F5 = {(p18, t22), (t21, p19), (t22, p19), (p19, t23), (t23, p20)}.
W5(p18, t22) = W5(t21, p19) = W5(t22, p19) = W5(p19, t23) = W5(t23, p20) = 1 and
(M0)5 = p18.
Once we formally describe the distinct net modules, the subsequent stage is to
systematically build a uniﬁed model to portray the complete ﬂow of the work of the
system. The uniﬁed model ought to fulﬁll all algorithmic stipulations of the system.
This stage is imperative because each net module might formalize a correct and stable
conduct, but joining of last transitions or places of preceding net module might not
be suitable with initial transitions or places of following modules. Consequently,
to retain the consistent model, the prior and posterior conditions of every net are
considered in the formation of the overall model, else, the absent transitions or
places might bring the system into standstill state, or individual modules might stay
disconnected.
To formulate the uniﬁed model, net modules are integrated in transition-place
or place-transition connection method. Moreover, arcs from places to transitions
and vice versa are presented as F6 = {(t5, p5), (t12, p18), (t13, p11), (t18, p14),
(p16, t21)}. Then associated weights are speciﬁed as W6(t5, p5) = W6(t13, p11) =
3 and W6(t12, p18) = W6(t18, p14) = W6(p16, t21) = 1. This demonstrates within uni-
ﬁed model, a rudimentary weight of each link is set as 1 or 3 other than those states
which model the procedure of the identiﬁcation of abnormalities and their weights
which are computed by executions of the relations g1, g2, g3, g4, and g5. It is perti-
nent to observe that the above-speciﬁed ﬁve relations are primary fragments of the
abnormality detection presented in Sect.3.5.
The ﬁrst relation, namely g1, veriﬁes the current level of battery, Bl
c, of the cluster
member mote, msnq. The msnq mote may begin its work if Bl
c is equivalent or larger
than the already deﬁned level of threshold, Bl
t . If Bl
c of msnq is lower than Bl
t , then
msnq is treated as dead or malfunctioning. This relation is speciﬁed below.
g1 = f (Bl
c, Bl
t ) =
1,
Bl
c ≥Bl
t ,
0,
Otherwise.
(3.5)
The second relation, g2, conﬁrms a packet, which possesses the Fq values, is
collected inside a speciﬁed timeslot, T l
t1, or not. This relations is described as
g2 = f (T lb
i , T
Fq
ar , T ub
i
) =

k,
T lb
i
≤T
Fq
ar ≤T ub
i
,
0,
Otherwise.
(3.6)
The notation T
Fq
ar denotes an arrival time of packet having features readings. The
symbolism T lb
i
and symbolism T ub
i
represent initial and ﬁnal times of the allocated
timeslot to collect Fq, correspondingly. The notation k denotes features of the usual
behaviorproﬁleofmsnq,inthiscasek =3.Ifapacketisobtainedinsidethedesignated
timeslot, then k features are used for the identiﬁcation of abnormalities.

3.6 Formal Model
61
Subsequently, the identiﬁcation of abnormalities procedure is performed as per
nature of features. A related relation among g3 and g4 is processed for the features
with ﬁxed and bounded value bounds, correspondingly. The features having ﬁxed
values, for instance, memory status of msnq, are discrete in nature because they are
based on discrete values, for example, 89% and 86%. On the contrary, the features
with bounded values, for instance battery status and sensor reading, are modeled
as continuous random variables and they are based on real values. These kind of
parameters have lower and upper limit values to outline the usual behavior of msnq.
g3 = f (Plb
rg, m
fq
rg, Pub
rg ) =

1,
Plb
rg ≤m
fq
rg ≤Pub
rg ,
0,
Otherwise.
(3.7)
g4 = f (m
fq
f x, P
fq
f x) =

1,
m
fq
f x = P
fq
f x,
0,
Otherwise.
(3.8)
The notation m
fq
rg represents a bounded-feature value which is obtained from
msnq. Correspondingly, Plb
rg and Pub
rg denote minimum and maximum limits, in order
to specify the usual conduct of msnq with regard to m
fq
rg. The symbol m
fq
f x represents
received ﬁxed-feature value, and P
fq
f x denotes associated value of the normal proﬁle.
Lastly, the last relation, g5, veriﬁes the well-timed receipt of on-the-spot conﬁrmation
result.
g5 = f (T lb
j , T W R
ar
, T ub
j ) =
1,
T lb
j
≤T W R
ar
≤T ub
j ,
0,
Otherwise.
(3.9)
The symbolization T W R
ar
represents the arrival time of watermarked on-the-
spot conﬁrmation result, W R. The notations T lb
j
and T ub
j
show initial and end
times of a timeslot which is designated to collect on-the-spot conﬁrmation result,
correspondingly.
The descriptions of transitions and places of the uniﬁed model are provided in
Table3.3 [9], and the uniﬁed model is drawn in Fig.3.7. States are shown by small
circles in Fig.3.7 [9]. On the contrary, transitions are represented by tiny dark rect-
angles. A tiny dark circle, known as token, in p1, represents the start state of the
modeled behavior of the system. Transfer (ﬁring) of single token from initial to suc-
ceeding place represents the variation in a state within the system. The model is
stated below.
Uniﬁed model The uniﬁed model, PN, is a 5-tuple net: PN = (P, T , F, W, M0),
where P = 5
i=1 Pi, T = 5
i=1 Ti, F = 6
i=1 Fi, W = 1 ∀arcs except W(p3, t5)
= W(t5, p4) = W(t5, p5) = W(t6, p6) = W(p8, t11) = W(t11, p10) = W(p10, t13)
= W(t13, p11) = W(p11, t14) = W(t14, p12) = 3, W(p1, t19) = g1, W(p5, t6) = g2,
W(p6, t7) = g3, W(p6, t8) = g3, W(p6, t9) = g4, W(p14, t19) = g5, and M0 = p1.
p1 grasps a token when the working of the system is initiated as a ﬁrst work cycle.
Tokens, in the net module 1, remain equivalent to the quantity of parameters in nor-
mal proﬁle. The tokens are three in number. Then the movement of these tokens will

62
3
Abnormality Identiﬁcation and Conﬁrmation System
Table 3.3 Descriptions of places and transitions: c⃝Academy Publisher, reprinted from M. Usman,
V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-
enabled anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368,
2015
Place Description
Transition
Description
p1
msnq wakes up
t1
msnq checks the battery level
p2
msnq is prepared to accumulate the
values of features
t2
The msnq accumulates the SR values
p3
The collected values of features are
stored
t3
msnq accumulated the MS value
p4
msnq goes into the sleep mode
t4
msnq collects the value of BY
p5
clnq is ready to receive Fq
t5
msnq transmits the accumulated Fq
values
p6
clnq is prepared to carry out the
abnormality identiﬁcation
t6
clnq waits for T ub
i
to receive Fq
p7
clnq is ready to aggregate the data
t7
clnq checks the SR value for
(SRlb, SRub)
p8
clnq is prepared in decrementing a
count of trust
t8
clnq checks MS value for
(MSlb, MSub)
p9
clnq is prepared to communicate
aggregated data
t9
clnq checks BY value for
(BY lb, BY ub)
p10
clnq is ready to transmit AA
t10
clnq aggregates the sensed data
p11
msnq is ready to receive the AA
t11
clnq is prepared in decrementing a
count of trust
p12
AA is prepared to compare data for
on-the-spot conﬁrmation
t12
clnq transmits the aggregated data
p13
AA is prepared to communicate
on-the-spot conﬁrmation result after
the insertion of watermark
t13
clnq transmits AA to msnq
p14
clnq is prepared to get on-the-spot
conﬁrmation result
t14
msnq receives AA
p15
clnq is prepared to check on-the-spot
conﬁrmation result
t15
AA compares SR with already saved
values
p16
An alarm is transmitted to BS by
clnq
t16
AA compares the values of MS with
already saved values
p17
Status result saved by clnq
t17
AA compares BY with previously
stored values
p18
BS is prepared to receive the
accumulated data
t18
AA transmits the watermarked
on-the-spot conﬁrmation result to
clnq
p19
BS is ready to analyze the data
t19
clnq waits for T ub
j
time to obtain
on-the-spot conﬁrmation result
p20
BS is prepared to obtain the
application data
t20
clnq veriﬁes the result
t21
BS gets an alarm
t22
BS gets aggregated data
t23
BS updates repository

3.6 Formal Model
63
Fig. 3.7 The uniﬁed Petri net model:
c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled
anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015

64
3
Abnormality Identiﬁcation and Conﬁrmation System
represent the present states of the behavior of the system. The subsequent functional
description articulates the procedure of abnormality identiﬁcation that is carried out
by clnq. The clnq mote obtains the Fq values from msnq and carries out the abnor-
mality identiﬁcation procedure. Then three tokens in p5 are accumulated in the net
module 2. These tokens are consequential of the ﬁring of t5, representing the com-
munication of the aggregated values of Fq. These tokens are then amalgamated at p7,
representing accumulation of sensor readings at clnq. On the contrary, three tokens
remain at p8 and afterward, each token denoting a single feature value. Subsequently,
msnq gets an agent that carries out on-the-spot conﬁrmation procedure.
Firing of t12, denoting the communication of accumulated data, transfers a token
into p11, that is the initial place of the net module 5 (i.e., the procedure of the update
of status on BS). On the contrary, the ﬁring of t13, representing the communication of
agent, produces three tokens into p11. These three tokens, each of them representing
single feature values, are amalgamated at p13, denoting the prepared to communicate
an agent to clnq state. The ﬁring of t18 produces a token in p14, denoting ready to
receive M A from msnq state.
A token is received by p18, as a consequence of the ﬁring of t12, representing the
communication of accumulated data to BS. The aggregated data are then prepared
to be saved and examined by the user. Otherwise, the ﬁring of t21 produces a token
in p19 to save and examine an obtained alarm by the user.
The behavioral properties, namely boundedness and liveness, of the proposed sys-
tem are characterized and veriﬁed below. The boundedness expresses the maximum
possible number of tokens within the system, i.e., the maximum possible processes
can be possessed by the system at a state. Alternatively, the property of liveness repre-
sents the system has no deadlock. The ﬂow of work and reachability of the abnormal
states in the uniﬁed model are also studied below. Figure3.8 [9], illustrating the
reachability tree, formalizes the overall ﬂow of the work of the system.
Theorem 3.3 The PN, uniﬁed model, is 3-bounded.
Proof For all p ∈P and M(p) = 1 apart from Pe = {p4, p5, p6, p8, p10, p11, p12},
which has three tokens. The corresponding transitions are Te = {t5, t6, t7, t8, t9, t11,
t13, t14}, Pe ⊂P, and Te ⊂T . This permits the autonomous handling of each feature
for the procedure of abnormality identiﬁcation. There are three features that move
over explicit places of the system; therefore, PN is 3-bounded.
Theorem 3.4 Every transition in PN is live at level 4 other than Tl transitions that
are provisionally live at level 0.
Proof For all t ∈T , the liveness level is 4 apart from Tl, that is live at 0 level
iff the output of conditions g1, g3, g4, g5 ̸= 1 and g2 ̸= k, where Tl ⊂T and Tl =
{t1, t6, t7, t8, t9, t19}. This property holds given that the condition-based weighted arcs
exist which input those transitions that formalize the procedure of abnormality iden-
tiﬁcation. The arc conditions that possess certain weights and associated transitions
are (g1, t1), (g2, t6), (g3, t7), (g2, t6), (g3, t8), (g4, t9), and (g5, t19).

3.6 Formal Model
65
Fig. 3.8 The reachability tree:
c⃝Academy Publisher, reprinted from M. Usman, V. Muthukku-
marsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled anomaly
detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015
Theorem 3.5 A number of net modules, 4
i=1 PNi, are executable in a sequence,
where PN5 is sequentially executed after PN2 and PN4 to formulate the overall
ﬂow of the work of the system.
Proof PN1 performs the procedure of the collection of the Fq values by reachable
markings M0[t1⟩M1[t2⟩M2[t5⟩
M5, M0[t1⟩M1[t2⟩M2[t5⟩
M6, M0[t1⟩M1[t3⟩M3[t5⟩

M7, M0[t1⟩M1[t3⟩M3[t5⟩
M8, M0[t1⟩M1[t4⟩M4[t5⟩
M9, and M0[t1⟩M1[t4⟩M4[t5⟩

M10, as shown in Fig.3.8, where
M(·) and
M(·) represent the ﬁnal and all other states,

66
3
Abnormality Identiﬁcation and Conﬁrmation System
correspondingly. The ﬁnal states denote the sleep status of msnq, subsequent to the
communication of Fq next to their accumulation. Subsequently, only the instance
of sensor reading is discussed, which is easy to encompass to other features. The
procedure of the abnormality identiﬁcation is carried out after the procedure of the
collection of Fq values by the subsequent reachable marking sequences: M6[t6⟩
M11[t7⟩M14[t10⟩M20[t12⟩
M26 and M6[t6⟩M11[t7⟩M15[t11⟩M21[t13⟩
M27, here ear-
lier marking represents the communicated of accumulated data, dag
i , whereas the
ﬁnal marking denotes the communication of agent to msnq. Correspondingly, on-
the-spot conﬁrmation procedure is performed by M27[t14⟩M33[t15⟩M39[t18⟩
M44
marking, that is followed by M44[t19⟩M47[t20⟩
M51and M44[t19⟩M47[t20⟩
M50 mark-
ings for saving result of on-the-spot conﬁrmation, R, on clnq and communication of
accumulated data, dag
i , or watermark inserted conﬁrmation result, W R, to BS, corre-
spondingly. The earlier module is completed, whereas the last module has subsequent
M51[t21⟩M56[t23⟩
M59 marking. This implies that the 4
i=1 PNi modules execute
in a sequence. A uniquely reachable M26[t22⟩M32[t23⟩
M38 marking is joined after
the M6[t6⟩M11[t7⟩M14[t10⟩M20[t12⟩
M26 marking, which is a accessible marking of
PN2. Therefore, PN5 executes sequentially to PN4 and PN2, as shown in Fig.3.8,
denoting a reachability tree.
Theorem 3.6 The procedure of abnormality identiﬁcation for each feature can be
executed in parallel to each other.
Proof The proof for this theorem is a direct consequence for the proof of Theorem 1.
Let the situation when a model is 3-bounded. In such a situation, a token in p2, denot-
ing the M1 state, empowers Tq = {t1, t2, ..., tv} transition set for associated feature set
Fq = { f s1, f s1, ..., f sv}. This conﬁrms an independent and parallel execution of the
procedure of abnormality identiﬁcation for every feature. This is obvious through a
pattern that the M1[t2⟩M2[t5⟩M6[t6⟩M11[t7⟩M15[t11⟩M21[t13⟩M27[t14⟩M33[t15⟩
M39[t18⟩M44[t19⟩M47[t20⟩M51[t21⟩M56[t23⟩
M59, M1[t3⟩M3[t5⟩M8[t6⟩M12[t8⟩
M17[t11⟩M23[t13⟩M29[t14⟩M35[t16⟩M41[t18⟩M45[t19⟩M48[t20⟩M53[t21⟩M57[t23⟩

M60, and M1[t4⟩M4[t5⟩M10[t6⟩M13[t9⟩M19[t11⟩M25[t13⟩M31[t14⟩M37[t16⟩M43[t18⟩
M46[t19⟩M49[t20⟩M55[t21⟩M55[t23⟩
M61 markings are accessible to represent the
sovereign management of features, viz. battery status, memory status, and sensor
reading, as illustrated in Fig.3.8.
The accessibility of the states: M
′
j ∈RM(M0), which denotes the procedure of
the abnormality identiﬁcation, is veriﬁed subsequently.
Theorem 3.7 The abnormality identiﬁcation states, that is, M j[ti⟩M
′
j, are only
reachable when the system is abnormality free, where M j = M0, M
′
j = (M1), (M11,
M12, M13), (M14, M15), (M16, M17), (M18, M19), (M47, M48, M49), and ti = t1, t6,
t7, t8, t9, t19 for associated accessible markings.
Proof M1, a marking, is accessible iff W(p1, t1) = 1 in the uniﬁed model. If imple-
mentation of the relation g1 produces a number except 1, then msnq is assumed as

3.6 Formal Model
67
abnormal because of either or faulty status. Therefore, M1 is not accessible in such
situations. Correspondingly, the M11, M12, and M13 markings are reachable through
the marking sequences M0[t1⟩M1[t2⟩M2[t5⟩M6[t6⟩M11, M0[t1⟩M1[t3⟩M3[t5⟩
M8[t6⟩M12, and M0[t1⟩M1[t4⟩M4[t5⟩M10[t6⟩M13 markings, correspondingly, iff
W(p5, t6) = k, that is obtained through the relation g2. Otherwise, if W(p5, t6) ̸= k,
then these states are not accessible, representing the abnormal conduct of msnq. Next,
t7, t8, and t9 transitions are ﬁred to reach (M14, M15), (M16, M17), and (M18, M19)
markings, correspondingly. The relation g3 speciﬁes the weights of arcs of the t7
and t8 markings for the (M14, M15) and (M16, M17) markings, correspondingly. By
the same token, the relation g4 speciﬁes the weight of the arc of the t9 transition
for the (M18, M19) markings. The result, except 1 relation, makes states inaccess-
ible, denoting the abnormal values of usual behavior proﬁle parameters of msnq. If
the outcome of the g5 ̸= relation execution is 1, then the states M47, M48, and M49
become inaccessible because of discrepancy among the tokens and weights of arcs
in the inbound place of arcs, namely transition-place.
The proof supports the argument the abnormal states are inaccessible in the model
and merely those states are accessible that show the usual behavior of msnq. There-
fore, the uniﬁed model is proﬁcient in identifying different types of abnormalities
that are occurred due to faulty feature values and also due to time-based abnormal-
ities that caused because of the late arrivals of on-the-spot conﬁrmation results and
observations.
An imperative inference of the uniﬁed model is joining of small but signiﬁcant
descriptions in the speciﬁcations of algorithms of the primary design of the system.
The enhanced procedure of features collection (i.e., Algorithm 3.1) sets the member
mote into sleep mode when it ﬁnishes its allocated job. This modiﬁcation, in the
initial functional description, avoids the needless consumption of energy. An addi-
tional important modiﬁcation is made in the procedure of abnormality identiﬁcation
(i.e., Algorithm 3.2), here clnq waits for the assigned slot of time to get Fq. This
aspect permits the system to be able to identify time-based abnormalities which
occurred because of the non-arrival or late arrival of Fq at clnq.
3.7
Uniﬁed GSPN Model
The ﬁtting time-based conduct of an identiﬁcation system is important to identify
and conﬁrm the origin of abnormalities in a timely fashion. There exist two impor-
tant procedures which need the time-based conduct study: (i) the joint procedure
of collection of feature values on msnq and their receipt by clnq; this is denoted
as α procedure in subsequent discussion and (ii) the joint procedure of abnormal-
ity identiﬁcation, agent dispatch, on-the-spot conﬁrmation, and conﬁrmation result
receipt on clnq are denoted as β procedure in subsequent discussion. The analysis of
the time-based behavior of the system is carried out in non-deterministic interaction
setting of sensor networks that is typically occurred due to channel faults, trafﬁc

68
3
Abnormality Identiﬁcation and Conﬁrmation System
features, and environmental factors. The uniﬁed model is converted into associated
uniﬁed GSPN model.
The strategy deﬁnitions of model are reliant on rates, transition categories, mem-
ory deﬁnitions, and server semantics. The transitions are assumed as immediate other
than those that are part of the calculation of α and β procedures. The immediate tran-
sition weight is set as 1; on the other hand, the timed transition rate is adjustable as
per the computation carried out by them. The timed transition rates are deﬁned on
the basis of MICAz mote resource capability [11].
The individual ﬁring semantic is adopted for timed transitions, wherein a single
token stays in the inbound place till the expiry of timer. The processing of the system
is executed in a sequence. Thus, solitary server deﬁnitions are selected for every
transition, other than (t2, t3, t4), (t7, t8, t9), and (t15, t16, t17) transitions, because
these transitions have k-server deﬁnitions because of parallel computation in the
model. It is evident k = 3, i.e., there are three features for abnormality identiﬁcation.
Moreover, the policy of age memory is assumed for all transitions because of the
involvement of the continuous operations. On the basis of the above-cited semantics,
the formalization of the model is provided next.
Uniﬁed GSPN model: GSPN is an 8-tuple net: GSPN = (P, T , (·), I −(·), O+(·),
H(·), W(·), M0), where P = 5
i=1 Pi, T = 5
i=1 Ti, I −(·) ∪O+(·) = F = 6
i=1 Fi.
The ﬂow of the work of the beneath Petri net executes sequentially, and there is no
inhibition arc. Thus, (·) = ∅and H(·) = ∅. The time transitions weight W(·) = t1
= t2 = t3 = t4 = 0.25ms, t5 = 6ms, t7 = t8 = t9 = t11 = t15 = t16 = t17 = 1ms, t13 = t14 =
15ms, t18 = 1ms. Lastly, the ﬁrst marking M0 = p1.
The time-based conduct of the procedures, namely α and β, is examined below
through the above-cited model. The time consumed by α is calculated as
α = αt
1 + αt
2 + αt
3
(3.10)
Thesymbolαt
1 representsthetimeconsumedbytheprocedureoftheaccumulation
of Fq values (denoted by the t1 to t4 transitions in the model). The αt
2 notation denotes
the time consumed by Fq to reach to clnq from msnq (formalized by the t5 transition).
Lastly, the notation αt
3 represents the deferment of the receipt of Fq on clnq because
of environmental aspects, channel faults, and trafﬁc features. The deferment happens
on the transmission link that is formalized by the arc, viz. (t5, p5). The consumption
of time by β can be computed from the subsequent formula.
β =
6

i=1
βt
i
(3.11)
The symbol βt
1 represents the total time consumed by the procedure of the abnor-
mality identiﬁcation carried out by clnq (denoted by the transitions, viz. t7, t8, t9,
and t11 in the uniﬁed GSPN model), the notation βt
2 denotes the communication
time consumed by the agent for roaming from clnq to msnq (represented by the t13
transition), the symbol βt
3 denotes the time consumed by the agent to carry out the

3.7 Uniﬁed GSPN Model
69
job of on-the-spot conﬁrmation on msnq (represented by the t14 to t17 transitions),
and the symbol βt
4 represents the time consumed by on-the-spot conﬁrmation result
receipt on clnq (represented by the t18 transition). The symbols βt
5 and βt
6 represent
the deferment aspects for the receipt of the agent on msnq and on-the-spot conﬁr-
mation result on clnq, correspondingly. The βt
5 and βt
6 factors happen at links that
are formalized by the (t13, p11) and (t18, p14) arcs, correspondingly.
The deferment aspects αt
3, βt
5, and βt
6 are treated within the [0,1] closed interval
for the study; here 0 denotes none delay (i.e., denoting the lower-fault-susceptible
transmission link) and 1 represents the 100% deferment (i.e., denoting the higher-
fault-susceptible transmission link). Moreover, the deferment aspects possess expo-
nential distributions, that is in line with needs of Petri net-based formal modeling of
the probabilistic procedures [12]. The tiny motes, that is, msnq and clnq, are treated
10 m apart for theoretical analysis and conforming trials.
Mainly, a sensitivity study on αt
3, βt
5, and βt
6 delay aspects was performed. To
complete this job, the α3 procedure was randomized on the [0,1] closed interval.
This produced the outcome that consumption of time by a procedure, viz. α in
lower-fault-susceptible transmission link remained 6.99 ms. In contrast, a solitary
α procedure took 8.00 ms time in the transmission link, which delays transmission
of messages between msnq clnq up to 100%. The model outcomes of the time-
based conduct of the procedure, viz. α are given in the higher part of Fig.3.9 [9].
The associated statistics which contain standard deviation (σ), mean (μ), minimum
(Min), and maximum (Max) values of the outcomes are shown in Table3.4 [9].
5
6
7
8
9
10
200
400
600
800
1000
Time (ms)
Iterations
5
6
7
8
9
10
200
400
600
800
1000
Time (ms)
Iterations
Unified GSPN Model
Implementation
Fig. 3.9 The time-based conduct of the α procedure:
c⃝Academy Publisher, reprinted from
M. Usman, V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile
agent-enabledanomalydetectioninresourceconstrainednetworks.JournalofNetworks,10(6):353–
368, 2015

70
3
Abnormality Identiﬁcation and Conﬁrmation System
Table 3.4 The α procedure statistics: c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled
anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015
Model
μ
σ
Min
Max
Uniﬁed GSPN model
7.35
0.273
6.99
8.00
Implementation
7.86
0.274
7.50
8.50
Unified GSPN Model
Implementation
0
20
40
60
80
100
200
400
600
800
1000
Time (ms)
Iterations
0
20
40
60
80
100
200
400
600
800
1000
Time (ms)
Iterations
Fig. 3.10 The time-based conduct of the β procedure:
c⃝Academy Publisher, reprinted from
M. Usman, V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile
agent-enabledanomalydetectioninresourceconstrainednetworks.JournalofNetworks,10(6):353–
368, 2015
Table 3.5 The β procedure statistics: c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled
anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015
Model
μ
σ
Min
Max
Uniﬁed GSPN model
49.30
7.88
38.96
69.92
Implementation
51.24
8.54
39.76
71.35
Subsequently, the procedures, viz. βt
5 and β
t
6, were randomized over the [0,1]
closed interval to study the time-based conduct of the procedure, viz. β. In such
a situation, the β procedure consumed 38.96 ms and 69.92 ms for the lower and
higher-fault-susceptible transmission links, correspondingly. The model outcomes
are given in the higher part of Fig.3.10 [9], and the associated statistics are provided
in Table3.5 [9].

3.8 Time-Based Behavior Validation
71
3.8
Time-Based Behavior Validation
The time-based conduct is corroborated by the implementation of algorithms on
TinyOS, working on resource constrained MICAz motes, that are equipped with the
Atmel ATmega128L microcontroller [11]. The moderately higher data transmitter
radio of above-cited mote can transfer data at transfer rate of 250 kb/s. MICAz has 4
kb and 128 KB of EEPROM and program ﬂash memory, correspondingly. The mote
may be furnished with a supplementary 512-kb serial ﬂash memory that is capable
of holding over 100,000 measurements.
The topology of the network is based on two accessible MICAz motes that were
positioned to carry out experiments. This topology of network is adequate for the
corroboration of the time-based conduct of the procedures, viz. α and β because of
the reason that these procedures are carried out by communication and processing
between clnq and msnq. Thus, one accessible mote was positioned as clnq; on the
other hand, the second was positioned as msnq. It is imperative to indicate that the
outcomes acquired from the topology of network may be generalized by assuming
the transmission link between clnq and msnq as a unit constituent of the over the
network interaction.
The agent was coded, having 762 bytes of size including data and code. The
802.15.4 and Zigbee amenable MICAz motes can only sent 127 bytes (i.e., payload
has 102 and header has 25 bytes) in one data packet [8]. Thus, the agent was divided
into eight data packets on the mote that transmits the agent and congregated as an
agent on the mote that receives the agent to perform its allocated job. The size of
header was ﬁxed as 25 bytes for all packets, where the size of the payload for initial
seven packets was set as 102 bytes and for the ﬁnal data packet was set as 48 bytes.
Correspondingly, the each data packet size that had the Fq values was ﬁxed as 31
bytes (i.e., payload has 6 and header has 25 bytes). The on-the-spot conﬁrmation
result data packet size was ﬁxed as 27 bytes (i.e., payload has 2 and header has 27
bytes). Moreover, the deferment aspect was introduced in the experiments through
exponential distribution to imitate the delay that has non-deterministic occurrence
in the networks.
Five scenarios were studied to comprehensively examine the time-based conduct
of the system. The initial two scenarios were developed for the conﬁrmation of the
time-based conduct outcomes of procedures, viz. α and β acquired by formalization
performed in Sect.3.7. The third situation was developed to examine the overhead
effect on the time-based conduct of the system that was occurred due to securing
the agent by inserting watermark and also by enabling the agent to insert watermark
in on-the-spot conﬁrmation outcomes. The ﬁnal two situations were developed for
supplementary analysis of the time-based conduct of the system.
Situation 1: The development of the procedure, viz. α was carried out to conﬁrm
the outcomes received by the procedure, viz. α formalized in Sect.3.7. The outcomes
discovered that the time consumed by the procedure, viz. α as compared to the uni-
ﬁed GSPN model was somewhat higher, that is, among 7.50 ms and 8.50 ms for lower
fault-prone and higher fault-prone transmission links, correspondingly. These out-

72
3
Abnormality Identiﬁcation and Conﬁrmation System
comes are given in the lower part of Fig.3.9 [3] and the associated numbers are pro-
vided in Table3.4 [3]. It is evident from Table3.4 the initial and ﬁnal limit variances
among formal model and development outcomes for the procedure, viz. α are merely
0.51 and 0.50 ms, correspondingly. This difference is insigniﬁcant, and it may have
caused because of the ecological effects, namely humidity, temperature, etc.
Situation 2: The development of the procedure, viz. β was performed to conﬁrm
the outcomes attained through the procedure, viz. β formalized in Sect.3.7. In this
situation, the on-the-spot conﬁrmation outcomes were communicated to clnq without
inserting watermark. In reality, this situation is valid once the system is conﬁgured for
the identiﬁcation and conﬁrmation of the abnormalities occurred due to only on-the-
spot on during the transmission faults or errors. The time consumed by the procedure,
viz. β was among 39.76 and 71.35 ms in the experiments, as compared to the formal
model, it was among 38.96 and 69.92 ms, as depicted in Fig.3.10. The associated
numbers are shown in Table3.5 [9]. Time taken by a procedure, viz. β is minimal
to carry out the jobs of the abnormality identiﬁcation, on-the-spot conﬁrmation, and
on-the-spot conﬁrmation result receipt on clnq, that is 10 m apart from msnq.
Situation 3: Then, in the procedure, viz. β, the agent was developed to insert
watermarks in on-the-spot conﬁrmation outcomes that were sent to clnq by the agent
of msnq. In this situation, the Radix-k encoding is employed to insert the watermark
in the data and code of the agent [6] to safeguard agent from on-the-spot or in
transmission attacks. This situation, in reality, is valid when system is proﬁcient in
the identiﬁcation and conﬁrmation of the abnormalities also occurred due to on-the-
spot and in transmission attacks. In this situation, the agent size was increased up to
977 bytes that was initially 762 bytes because of its supplementary ability of inserting
watermark in on-the-spot conﬁrmation outcome. The overhead of around 25% was
occurred due to insertion of a watermark in the agent. Therefore, the overall size of the
agent was 1220 bytes. The agent was divided into 12 data packets for transmission by
following the standard, namely Zigbee/802.15.4. The initial 11 data packets had the
size of 127 bytes. However, the last packet size remained 123 bytes. In this situation,
the on-the-spot conﬁrmation outcome size was 127 bytes.
The trials outcome, in such situations, show the time consumption for situation
where the abnormality agent was watermark secured and capable of inserting the
watermark in on-the-spot conﬁrmation outcome was 61.71 ms and 113.83 for lower
and higher-error-susceptible communication links. In contrast, in the case of the
usual abnormality agent, the time taken was 39.76 and 71.35 ms for lower and
higher-error-susceptible communication links, correspondingly. This indicates the
burden of time consumption was 62.68 and 64.37% in contrast to β procedure with
usual abnormality agent (i.e., Case 2). The outcomes are given in Fig.3.11 [9], and
associated numbers are provided in Table3.6 [9].
Situation 4: In this situation, the distance among msnq and clnq was random-
ized from 3 to 15 m by keeping the other conﬁgurations intact. The distance was
randomized to examine the consequence of the distance on on-the-spot conﬁrmation
procedure that is carried out by the agent. The outcomes illustrate the time taken
remained among 61.20 and 61.94 ms if the distance varied among 3 and 15 m,

3.8 Time-Based Behavior Validation
73
0
20
40
60
80
100
200
400
600
800
1000
Time (ms)
Iterations
40
60
80
100
120
140
200
400
600
800
1000
Time (ms)
Iterations
 process with secure anomaly agent
 process with normal anomaly agent
Fig. 3.11 The β procedure with the normal and secure abnormality agent: c⃝Academy Publisher,
reprinted from M. Usman, V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of
enhanced mobile agent-enabled anomaly detection in resource constrained networks. Journal of
Networks, 10(6):353–368, 2015
Table 3.6 The β procedure statistics: c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled
anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015
Model
μ
σ
Min
Max
β procedure with secure
abnormality agent
80.81
13.69
61.71
113.83
β procedure with normal
abnormality agent
51.24
8.54
39.76
71.35
correspondingly, for the lower-fault-susceptible transmission link. Correspondingly,
consumption of time remained among 112.50 and 115.04 ms for the higher-fault-
susceptible transmission link if the distance varied among 3 and 15 m, correspond-
ingly. These outcomes show that an surge in the value of distance among msnq
and clnq has minor effect on the time-based conduct of the procedure, viz. β. These
outcomes are shown in Fig.3.12 and the associated statistics are given in Table3.7 [9]
Situation 5: The procedure, viz. β was developed, and its time-based conduct
was examined for both continuously and periodic data communicating applications.
The conduct of a ﬁre-tracking network was studied for the former case, where msnq
transmits sensed data continuously to associated clnq after the identiﬁcation of an
unusual event [13]. Such an application, the memory, viz. serial ﬂash, was employed
to save Fq values that were used by the agent to carry out the job of on-the-spot
conﬁrmation on msnq. On the contrary, in the latter applications, conduct of a built

74
3
Abnormality Identiﬁcation and Conﬁrmation System
0 100200300400500600700800900
1000
Iterations
4
6
8
10
12
14
Distance (m)
0
20
40
60
80
100
120
Time (ms)
Fig.3.12 Theβ procedurewithadistancefactor: c⃝AcademyPublisher,reprintedfromM.Usman,
V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-
enabled anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368,
2015
Table 3.7 The statistics of the β procedure with the distance factor: c⃝Academy Publisher,
reprinted from M. Usman, V. Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation
of enhanced mobile agent-enabled anomaly detection in resource constrained networks. Journal of
Networks, 10(6):353–368, 2015
Distance (m)
μ
σ
Min
Max
3
80.10
13.34
61.20
112.50
6
80.42
13.47
61.24
112.75
9
80.73
13.61
61.66
113.71
12
81.04
13.81
61.90
113.95
15
81.66
14.30
61.94
115.04
infrastructure observing network, wherein msnq intermittently communicates data
to the associated clnq [14], was examined.
It was found, in the experiments, that the continuously transmitting data appli-
cation unavoidably saves additional observations prior to the receipt of the agent
to carry out the job of the on-the-spot conﬁrmation on msnq. Thus, the agent was
supposed to devote more time to carry out the job of on-the-spot conﬁrmation for
this type of applications. This surges total time of procedure, viz. β. The experiment
outcomes show the time consumed by the procedure, viz. β was among 73.29 and
104.25 ms for continuous application in contrast to 39.76 and 71.35 ms for periodic
application. Moreover, it was noted msnq saved 10 additional values of observations
for the job of on-the-spot conﬁrmation prior to the receipt of the agent.
This has not only enhanced the consumption of time by the job of on-the-spot
conﬁrmation from 3.79 to 37.9 ms, but also took additional memory of 60 bytes to
save the values of 10 observations. This outcome infers that on-the-spot conﬁrmation
procedure is more suitable to periodically data transmitting applications because of

3.8 Time-Based Behavior Validation
75
Continous application
Periodic applicaiton
50
60
70
80
90
100
110
200
400
600
800
1000
Time (ms)
Iterations
40
50
60
70
80
90
200
400
600
800
1000
Time (ms)
Iterations
Fig. 3.13 Continuous vs periodic application: c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled
anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015
Table 3.8 Statistics of applications:
c⃝Academy Publisher, reprinted from M. Usman, V.
Muthukkumarsamy, and X.-W. Wu. Speciﬁcation and validation of enhanced mobile agent-enabled
anomaly detection in resource constrained networks. Journal of Networks, 10(6):353–368, 2015
Model
μ
σ
Min
Max
Continuous application
83.63
7.88
73.29
104.25
Periodic application
51.24
8.54
39.76
71.35
less consumption of memory and time. The time-based conduct outcomes are given
in Fig.3.13 [9], and the associated statistics summary is shown in Table3.8 [9]. The
further results of the usage of memory are listed in Sects.4.4.2.1 and 5.7 in the
following chapter.
3.9
Discussion
The main conclusions of the theoretical investigation and experiment outcomes are
listed below.
• The structure of the proposed system is comprehensive and correct.
• The proposed system has the ability to identify the time-based abnormalities along
with performing on-the-spot conﬁrmation and identiﬁcation of abnormalities in
the data that are received from member motes.
• The proposed system has adequate time-based conduct in a highly non-
deterministic transmission environment.

76
3
Abnormality Identiﬁcation and Conﬁrmation System
• The proposed system consumes 64.37% more time to carry out the job of on-
the-spot conﬁrmation when it is conﬁgured for identiﬁcation and conﬁrmation of
abnormalities that are occurred due to attacks, dissimilar to situation when the
network is conﬁgured only for abnormalities that are occurred due to errors or
faults.
• The randomization in near distance has a minor effect on time-based conduct of
system. This infers the system is appropriate for smart home, built infrastructure
monitoring, and other such applications, where sensor motes are typically posi-
tioned in a comparatively adjacent proximity.
• The system is highly suitable for periodic data sending applications in comparison
to continuous data sending applications.
3.10
Summary
This chapter has presented a detailed agent-enabled abnormality identiﬁcation and
conﬁrmation system in order to address the research questions 1 and 2 and also to
satisfy the corresponding requirements 1 and 2. The architecture of the abnormality
identiﬁcation and conﬁrmation module has been presented in detail. The algorith-
mic speciﬁcations of the proposed system for the network entities such as cluster
member, cluster leader, and base station motes have also been elucidated. The space
and time complexity analyses were performed to analyze the performance of the
proposed algorithms. A uniﬁed formal model of the system was formulated to char-
acterize and study its properties. The uniﬁed formal model was then extended into
a uniﬁed GSPN model to characterize the time-based conduct of the system. The
time-based conduct of the system was then conﬁrmed through implementation on
the real test bed in a number of scenarios. The theoretical analyses and experiment
outcomes have advocated the capability of the system to detect behavioral abnormal-
ities occurred due to faulty values of features and time-based conduct abnormalities
occurred due to the deferred arrivals of observations and on-the-spot conﬁrmation
outcomes at the cluster leader motes. The results have also demonstrated the apt-
ness of the time-based conduct of the system in a communication environment that
is non-deterministic. The experimental results also endorsed the fact the system is
more adequate for periodic data sending applications like smart home sensor net-
works in comparison with the continuously data transmitting applications such as
the ﬁre-tracking applications.
3.11
Bibliographic Notes
The idea of the resource-efﬁcient abnormality identiﬁcation and conﬁrmation sys-
tem was ﬁrst introduced in [15, 16]. It was then discussed in detail and thoroughly
analyzed in [3]. The formal modeling, veriﬁcation, and analyses have been carried
out in [9].

Appendix
77
Appendix
Quantiﬁed Operations
This appendix quantiﬁes the individual operations involved in α and β processes
discussed in Sect.3.7, Chap.3. First, Tables3.9 and 3.10 are presented, which quan-
tiﬁes the operations of α process, reported in Fig.3.9. Then, Tables3.11 and 3.12
are presented, which quantiﬁes the operations of β process reported in Fig.3.10.
Tables3.9, 3.10, 3.11, and 3.12 are given on the following pages.
Table 3.9 Quantiﬁcation of
the operations of the alpha
process (Uniﬁed GSPN
Model) results reported in
Fig.3.9
Iterations
αt
1
αt
2
αt
3
1
1.5
5.5
0.98
2
1.5
5.5
0.95
3
1.5
5.5
1.00
4
1.5
5.5
0.00
5
1.5
5.5
0.52
6
1.5
5.5
0.33
1
1.5
5.5
0.71
8
1.5
5.5
0.15
9
1.5
5.5
1.00
10
1.5
5.5
0.75
11
1.5
5.5
0.93
12
1.5
5.5
0.28
13
1.5
5.5
0.44
14
1.5
5.5
0.65
15
1.5
5.5
0.59
16
1.5
5.5
0.24
17
1.5
5.5
0.66
18
1.5
5.5
0.74
19
1.5
5.5
0.14
20
1.5
5.5
0.00

78
3
Abnormality Identiﬁcation and Conﬁrmation System
Table 3.10 Quantiﬁcation of the operations of the alpha process (Implementation) results reported
in Fig.3.9
Iterations
αt
1
αt
2
αt
3
1
1.75
5.75
0.54
2
1.75
5.75
0.57
3
1.75
5.75
1.95
4
1.75
5.75
0.00
5
1.75
5.75
0.52
6
1.75
5.75
1.00
1
1.75
5.75
0.71
8
1.75
5.75
0.54
9
1.75
5.75
1.00
10
1.75
5.75
0.00
11
1.75
5.75
0.73
12
1.75
5.75
0.88
13
1.75
5.75
0.44
14
1.75
5.75
0.65
15
1.75
5.75
0.57
16
1.75
5.75
0.74
17
1.75
5.75
0.65
18
1.75
5.75
0.65
19
1.75
5.75
0.14
20
1.75
5.75
0.85
Table 3.11 Quantiﬁcation of the operations of the β process (Uniﬁed GSPN Model) results reported
in Fig.3.10
Iterations
β1
β2
β3
β4
β5
β36
1
4.2
30.35
3.5
0.81
18.50
0.32
2
4.2
30.35
3.5
0.81
23.20
0.32
3
4.2
30.35
3.5
0.81
1.77
0.32
4
4.2
30.35
3.5
0.81
23.67
0.32
5
4.2
30.35
3.5
0.81
12.01
0.32
6
4.2
30.35
3.5
0.81
0.00
0.32
7
4.2
30.35
3.5
0.81
4.18
0.32
8
4.2
30.35
3.5
0.81
9.72
0.32
9
4.2
30.35
3.5
0.81
26.71
0.32
(continued)

Appendix
79
Table 3.11 (continued)
Iterations
β1
β2
β3
β4
β5
β36
10
4.2
30.35
3.5
0.81
27.28
0.32
11
4.2
30.35
3.5
0.81
2.22
0.32
12
4.2
30.35
3.5
0.81
27.74
0.32
13
4.2
30.35
3.5
0.81
26.68
0.32
14
4.2
30.35
3.5
0.81
8.26
0.32
15
4.2
30.35
3.5
0.81
17.87
0.32
16
4.2
30.35
3.5
0.81
1.99
0.32
1
4.2
30.35
3.5
0.81
30.35
0.32
18
4.2
30.35
3.5
0.81
23.81
0.32
19
4.2
30.35
3.5
0.81
17.53
0.32
20
4.2
30.35
3.5
0.81
18.50
0.32
Table 3.12 Quantiﬁcation of the operations of the β process (Implementation) results reported in
Fig.3.10
Iterations
β1
β2
β3
β4
β5
β36
1
4.3
30.28
3.79
0.86
15.90
0.17
2
4.3
30.28
3.79
0.86
22.72
0.14
3
4.3
30.28
3.79
0.86
3.62
0.85
4
4.3
30.28
3.79
0.86
1.83
0.41
5
4.3
30.28
3.79
0.86
3.33
0.19
6
4.3
30.28
3.79
0.86
5.55
0.04
7
4.3
30.28
3.79
0.86
4.39
0.43
8
4.3
30.28
3.79
0.86
24.92
0.34
9
4.3
30.28
3.79
0.86
0.03
0.00
10
4.3
30.28
3.79
0.86
11.06
0.47
11
4.3
30.28
3.79
0.86
2.34
0.81
12
4.3
30.28
3.79
0.86
19.86
0.24
13
4.3
30.28
3.79
0.86
2.41.90
0.00
14
4.3
30.28
3.79
0.86
8.77
0.020
15
4.3
30.28
3.79
0.86
30.78
0.85
16
4.3
30.28
3.79
0.86
5.65
0.64
17
4.3
30.28
3.79
0.86
0.64
0.86
18
4.3
30.28
3.79
0.86
3.14
0.28
19
4.3
30.28
3.79
0.86
6.49
0.24
20
4.3
30.28
3.79
0.86
3.08
0.09

80
3
Abnormality Identiﬁcation and Conﬁrmation System
References
1. F. Ahmad, S.A. Khan, Speciﬁcation and veriﬁcation of safety properties along a crossing region
in a railway network control. Appl. Math. Model. 37(7), 5162–5170 (2013)
2. J.L. Peterson, Petri Net Theory and the Modeling of Systems, 1st edn. (Prentice Hall, Englewood
Clis, N. J., USA, 1981)
3. M. Usman, V. Muthukkumarsamy, X.-W. Wu, A resource-efﬁcient system for detection and
veriﬁcation of anomalies using mobile agents in wireless sensor networks. J. Netw. 9(12),
3427–3444 (2014)
4. J.C. Dagher, M.W. Marcellin, M.A. Neifeld, A theory for maximizing the lifetime of sensor
networks. IEEE Trans. Commun. 55(2), 323–332 (2007)
5. J. Waterman, G.W. Challen, M. Welsh, Peloton: Coordinated resource management for sensor
networks, (Switzerland, 2009), pp. 1–5
6. O. Esparza, J.L. Munoz, J. Tomas-Builart, M. Soriano, An infrastructure for detecting and
punishing malicious hosts using mobile agent watermarking. Wirel. Commun. Mob. Comput.
11(11), 1446–1462 (2011)
7. C. Muldoon, G.M.P. OHare, R. Collier, M.J. OGrady, Agent factory micro edition: a framework
for ambient applications, in Computational Science, ed. by V.N. Alexandrov, G.D. van Albada,
P.M.A. Sloot, J. Dongarra. Lecture Notes in Computer Science, vol. 3993 (Springer Berlin
Heidelberg, 2006), pp. 727–734
8. D.E. Denning, An intrusion-detection model. IEEE Trans. Softw. Eng. SE-13(2), 222–232
(1987)
9. M. Usman, V. Muthukkumarsamy, X.-W. Wu, Speciﬁcation and validation of enhanced mobile
agent-enabled anomaly detection in resource constrained networks. J. Netw. 10(6), 353–368
(2015)
10. Part 15.4: Wireless Medium Access (MAC) and, Physical Layer (PHY) specications for low-
rate wireless Personal Area Network (LR-WPANs). IEEE Std. 802(15), 4 (2006)
11. J. Polastre, R.Szewczyk, C. Sharp, D. Culler, The mote revolution: low power wireless sensor
network devices, in Proceeding of the Hot Chips (2004)
12. A.M. Marsan, G. Conte, G. Balbo, A class of generalized stochastic petri nets for the perfor-
mance evaluation of multiprocessor systems. ACM Trans. Comput. Syst. 2(2), 93–122 (1984)
13. C.Lino,C.T.Calafate,A.Diaz-Ramirez,P.Manzoni,J.-C.Cano,Studyingthefeasibilityofieee
802.15.4 based wsns for gas and re tracking applications through simulation, in Proceedings
of the 36th IEEE Conference on Local Computer Networks (LCN), (2011), pp. 875–881
14. E.U. Gaura, J. Brusey, R. Wilins, J. Barnham, in Wireless sensing for the built environment:
enabling innovation towards greener, healthier homes (United Kingdom, 2011), pp. 1–6
15. M. Usman, V. Muthukkumarsamy, X.-W. Wu, S. Khanum, Wireless smart home sensor net-
works: mobile agent based anomaly detection, in Proceedings of the 9th IEEE International
Conference on Ubiquitous Intelligence Computing and 9th International Conference on Auto-
nomic Trusted Computing (UIC/ATC), Sept 2012, pp. 322–329
16. M. Usman, Agent-enabled anomaly detection in resource constrained wireless sensor networks,
in Proceedings of the 15th IEEE International Symposium on A World of Wireless, Mobile and
Multimedia Networks (WoWMoM), June 2014, pp. 1–2

Chapter 4
First-Order Abnormalities: Agent
Transmission Optimization
4.1
Introduction
The system, presented in the preceding chapter, is not only able to identify different
types of abnormalities, but also empowers agents to use the synchronized resource
management scheme information to carry out on-the-spot diagnosis of the member
motes to discover the origin of abnormalities. This chapter introduces a method
which exploits the statistical association among different features of the synchronized
resource management scheme-based observations to discover a number of ﬁrst-order
abnormalities that are occurred due to denial-of-sleep attacks, battery exhaustion
attacks, and faulty motes. The constrained energy resources of networks demand
careful communication of agents. Therefore, two novel methods, namely 2-sigma
and weighted sum, for abnormality conﬁrmation agent transmission optimization
are presented in this chapter.
This structure of this chapter is described below. Section4.2 presents algorithms
of the proposed methods along with their complexity analysis. The formal mod-
eling and analysis of the proposed methods is carried out in Sect.4.3. The details
of the simulation setup, corresponding results and analysis, implementation results,
and comparative study are discussed in Sect.4.4. Lastly, Sect.4.5. recapitulates the
contributions of this chapter.
4.2
Algorithms and Analysis
This section elucidates the algorithmic speciﬁcations of the ﬁrst-order abnormality
identiﬁcation, 2-sigma, and weighted-sum optimization methods.
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7_4
81

82
4
First-Order Abnormalities: Agent Transmission Optimization
4.2.1
First-Order Abnormality Identiﬁcation by the Cluster
Leader Mote
One of the key goals of this work is to maximize the use of received synchronized
resource management scheme-based observation, O j, values and computed infor-
mation of FS2 = {j, f } for the abnormality identiﬁcation process, where O j = FS1
= {λ, ϕ, ν}. To this end, the statistical associations between FS = {λ, ϕ, ν, j, f }
features have been exploited to identify certain nature of group abnormalities that
are occurred by on-the-spot attacks or faults, resource exhaustion attacks, denial-of-
sleep attacks, and faults on motes. The ﬁrst-order join is speciﬁed as two-dimensional
linkage between two features by setting bounds of every feature to calculate normal
proﬁle region. A ﬁrst-order join among λ and j features has been established to detect
abnormalities caused by on-the-spot faults or attacks. The sign of such abnormalities
on clnq is receiving of faulty sensor reading values outside the allocated timeslots.
The combined usual region for j and λ features can be derived by (4.1)
N(λ, j) =
 λ f l
λil
 j f l
jil
f (λ, j) dj dλ
(4.1)
where notation N represents the usual zone in relation to λ and j features, and
subscripts il shows start and f l denotes ﬁnish boundary of the particular feature.
The subsequent join is made up by combining features, namely j and ν, to discover
abnormalities occurred due to the attack, viz. resource exhaustion. The sign of these
abnormalities is an unforeseen increase in the consumption of resources in regard to
the timeslot. The usual region of an attack, viz. resource exhaustion, is calculated by
(4.2).
N(j, ν) =
 j f l
jil
 ν f l
νil
f (j, ν) dν dj
(4.2)
The succeeding two joins are (ϕ, j) and (ϕ, ν) which discover abnormalities that
caused because of faults or attacks on the resources of a mote. In such situations,
the signs are unfamiliar consumption of resources during the execution of usual jobs
and unapproved activities executed by the mote in regard to time. Usual boundaries
for joins (ϕ, j) and (ϕ, ν) are computed by (4.3) and (4.4).
N(ϕ, j) =
ϕ f l

ϕil
 j f l
jil
f (ϕ, j) dj
(4.3)
N(ϕ, ν) =
ϕ f l

ϕil
 ν f l
νil
f (ϕ, ν) dν
(4.4)
Lastly, a join is formed between features, viz. f and j, to discover the abnormal-
ities occurred due to an attack, viz. denial-of-sleep and defective mote. The sign for

4.2 Algorithms and Analysis
83
Table 4.1 Joins, associated abnormalities, and their details: c⃝Academy Publisher, reprinted from
Usman et al. [1]
Join
Abnormalities
Description
N(λ, j)
On-the-spot attack or fault
Abnormal sensed data in regard to time
N(j, ν)
Resource exhaustion attack
The unexpected rise in the consumption
of battery in regard to time
N(ϕ, j)
Faulty mote
The unapproved actions performed by the
tiny mote in regard to time
N(ϕ, ν)
Fault on a mote, attack on the resources
of a mote
The excessive battery consumption while
carrying out usual jobs
N( f , j)
Denial-of-sleep attack, faulty mote
The monotonous communication of
packets in regard to time
these abnormalities at the leader mote of the cluster is the incorrect count of packet.
The usual boundary for the join is derived by (4.5).
N( f, j) =
f f l

fil
 j f l
jil
f ( f, j) dj
(4.5)
The above-mentioned joins, associated abnormalities, and their details are given
in Table4.1 [1].
To discover the abnormalities, clnq obtains O j from msnq. The unit, namely coor-
dination, then excerpts the FS1 = {λ, ϕ, ν} values from obtained O j to carry out the
abnormality identiﬁcation procedure by employing joins. If msnq is observed as nor-
mal after receiving O j, then sensed data is aggregated by (A_unt). On the contrary,
if msnq is observed as abnormal, then the abnormality identiﬁcation algorithm ini-
tiates the optimization of the (abnormality) agent transmission process (i.e., Phase 2
of either Algorithms 4.2 or 4.3 as speciﬁed by the system administrator). Phase 2
of Algorithm 4.3 yields msnq behavior (Beh) as abnormal (B A), tolerated category
1 (BTη), tolerated category 2 (BTγ), or tolerated category 3 (BTζ). For abnormal
conduct, the abnormality identiﬁcation and conﬁrmation module sends the agent to
msnq to carry out on-the-spot conﬁrmation. On the contrary, for the categories, viz.
1, 2, and 3, the abnormality identiﬁcation and conﬁrmation module broadcasts msnq
as abnormal to other member motes and leader motes, reduces the interaction with
msnq, and issues an alarm to BS, correspondingly. Phase 2 of Algorithm 4.2, on the
contrary to Phase 2 of Algorithm 4.3, performs the abnormality agent transmission
optimization process and takes adequate action by itself; that is, it does not return any
value to Algorithm 4.1 and rest of the processing is performed by Phase 2 of Algo-
rithm 4.2 by itself. The abnormality identiﬁcation procedure pseudocode is provided
in Algorithm 4.1 [1].

84
4
First-Order Abnormalities: Agent Transmission Optimization
Algorithm 4.1 First-order abnormality identiﬁcation by the cluster leader mote
Input: O j
Output: AA, store dag, transmit dal
i , announce msnq as anomalous, minimize communication
with msnq
1: clnq receives O j from msnq
2: CU extract FS1 = {λ, ϕ, ν} from O j
3: Compute FS2 = { j, f }
4: CHK (Ano
f ) =
 λ f l
λil
 j f l
jil
f (λ, j) dj dλ
∧N(j, ν) =
 j f l
jil
 ν f l
νil
f (j, ν) dν dj
∧N(ϕ, ν) = ϕ f l
ϕil
 ν f l
νil
f (ϕ, ν) dν
∧N(ϕ, j) = ϕ f l
ϕil
 j f l
jil
f (ϕ, j) dj
∧N( f, j) =  f f l
fil
 j f l
jil
f ( f, j) dj
//perform ﬁrst-order abnormality identiﬁcation
5: if CHK (Ano
f ) == T RU E then
6:
A_unt ←SR
//aggregate sensed data in aggregation unit
7: else
8:
CALL Beh = AAO(FS)
//invoke Phase 2 of Algorithm 4.3
9:
if CHK (Beh = B A) == T RU E then
//msnq behavior found as anomalous
10:
TRNSMT AA to msnq
//transmit abnormality agent to the msnq
11:
else if CHK (Beh = BTη) == T RU E then
//msnq behavior found as BTη tolerated
12:
A_unt ←SR ∧CU announce the msnq as anomalous to msns and other clns
13:
else if CHK (Beh = BTγ) == T RU E then
//msnq behavior found as BTγ tolerated
14:
A_unt ←SR ∧CU reduces the interaction with msnq
15:
else if CHK (Beh = BTζ) == T RU E then
//msnq behavior found as BTζ tolerated
16:
A_unt ←SR ∧CU transmits dal
i
to BS
17:
end if
18: end if
4.2.2
2-Sigma Optimization by the Cluster Leader Mote
Abnormality agent should not be spontaneously communicated on the network
because of the costly transmission operation. The curtailment of the agent trans-
mission, however, should be carefully designed so that it should not disturb the
performance of the identiﬁcation and conﬁrmation system. The 2-sigma technique
uses two standard deviations in order to outline a curtailment region on probability
distributions of parameters in feature set, FS. An observation which stays between
ﬁrst and second deviations (i.e., 1σ < FS ≤2σ or −1σ > FS ≥−2σ) is treated
as tolerated, and the one which stays outside the two deviations (i.e., FS > 2σ or
FS < −2σ) is considered as appropriate to send the abnormality agent to carry out
the job of on-the-spot conﬁrmation of msnq. In the situation of the usual observation,
the value of the SR is accumulated by the aggregation unit. On the contrary, the value
of trust of msnq is decremented in the case if the observation lies in the tolerance zone.
The abnormality agent is triggered to carry out the job of on-the-spot conﬁrmation
of msnq once the trust level of the msnq reaches the lower bound, that is, 0. Setting
up a tolerance zone results in the fewer communications of agents that decreases the
consumption of energy by both the msnq and clnq motes; hence, the overall lifetime

4.2 Algorithms and Analysis
85
Algorithm 4.2 2-sigma optimization
Input: FS
Output: −1σ, −2σ, 1σ, 2σ for all fi ∈FS
Phase 1: Compute zones (FS)
1: At tk time
2: for each fi ∈FS do
3:
Compute −1σ, 1σ, −2σ, 2σ
//compute values of threshold
4:
Compute (N z) = −1σ ≤fi ≤1σ
//compute normal zone (N z)
5:
Compute (T z) = 1σ < fi ≤2σ ∧−1σ > fi ≥−2σ
//compute tolerance zone (T z)
6:
Compute (Az) = fi > 2σ ∧fi < −2σ
//compute anomalous zone (Az)
7: end for
Input: FS
Output: SR, dal
i , AA
Phase 2: 2-Sigma transmission optimization (FS)
1: for FS do
2:
if −1σ ≤FS ≤1σ then
//check for normal behavior
3:
Beh ←BN
4:
Goto 13
5:
else if 1σ < FS ≤2σ ∧−1σ > FS ≥−2σ then
//check for tolerated behavior
6:
Beh ←BT
7:
Goto 15
8:
else
//FS > 2σ ∧FS < −2σ implies that the behavior is anomalous
9:
Beh ←B A
10:
Goto 22
11:
end if
12: end for
13: A_unt ←SR
//aggregate sensed data in the aggregation unit
14: Goto 24
15: if T R > 0 then
//check the trust value
16:
Decr T R by ς
//decrement the trust value
17: else
18:
T RN SMT dal
i
to BS
//send abnormality alert to BS
19:
T RN SMT AA to msnq
//send abnormality agent to msnq
20:
Goto 24
21: end if
22: T RN SMT dal
i
to BS
//send abnormality alert to BS
23: T RN SMT AA to msnq
//send abnormality agent to msnq
24: break
of the sensor network increases. A conceptual view of the 2-sigma method is depicted
in Fig.4.1 [2]. The 2-sigma agent transmission optimization procedure pseudocode
is given in Algorithm 4.2 [2].

86
4
First-Order Abnormalities: Agent Transmission Optimization
Fig. 4.1 Visualization of the
2-sigma method: c⃝2012
IEEE. Reprinted, with
permission, from Usman
et al. [2]
Normal observation
Tolerated observation
Anomalous observation
1σ
2σ
-1σ
-2σ
4.2.3
Weighted-Sum Optimization
The abnormality identiﬁcation and conﬁrmation module may bear the anomalous
conduct of msnq to optimize the agent communication for on-the-spot conﬁrmation
procedure. An essential approach for the optimization of agent communication can
be to carry out the analysis of every feature, fi, to check its existence in the usual (i.e.,
−1σ ≤fi ≤1σ), tolerated (i.e., 1σ < fi ≤2σ O R −1σ > fi ≥−2σ), or abnormal
(i.e., fi > 2σ O R fi < −2σ) zones (as detailed in Sect.5.2.2). The transmission
of agent can then be restricted for the zone, viz. tolerance and transmitted only for
the abnormal region. This tactic, however, may not treat the previous conduct of the
mote and send the agent simply on the basis of the existence of existing abnormal
observation (i.e., due to the temporary anomalous behavior), and it might result
in unnecessary broadcast of the agent. Thus, the agent communication procedure
shouldconsidertheweightedsumofthehistoricalinstancesandexistingobservations
for more robust abnormality agent transmission decision making. The historical
observation score, Smsnq, of the msnq can be computed from the Eq.(4.6).
Smsnq = α1(Ωi1
h ) + α2(Ωi2
h )
(4.6)
In the above equation, α1 and α2 are the weighting inﬂuences for tolerated and
abnormal occurrences of fi, correspondingly. The weighting inﬂuences α2 > α1 and
α1 + α2 = 1. The weighting factor α2 is allocated with a larger value because of the
reason that it is related with abnormal occurrences of fi. In (4.6), Smsnq possesses
value in [0, 1] unit interval, and it is derived as a function of two key factors:
• Ωi1: fi number of occurrences from h past measurements that observe the condition
1σ < fi ≤2σ or 1 σ > fi ≥−2σ.
• Ωi2: fi number of occurrences from h past observations that observe the condition
fi > 2σ or fi < −2σ.

4.2 Algorithms and Analysis
87
It is evident from above-cited descriptions that the factors, viz. Ωi1 + Ωi2 = h.
To optimize weighting factors’ values, viz. α1 and α2, the term α1 + α2 = 1 can
be adjusted as α2 = 1 −α1, h can be set as c constant, and Ωi1 + Ωi2 = h can be
adjusted as Ωi2 = c −Ωi1. Consequently, (4.6) can be amended as shown below.
Smsnq = α1(Ωi1
c ) + α2(c −Ωi1
c
)
(4.7)
Since α1 +α2 = 1 and α2 > α1, thus α1 ∈[0, 0.5). In the succeeding discussion,
the window extent of the past observations is set as c, here c = 10. This process is
simple to generalize. This shows that Ωi1 ∈[1, 10], here Ωi1 = 1 denotes there is
only solitary measurement in h which occurs in a zone, viz. tolerance, whereas Ωi1
= 10 represents there are all previous measurements in a zone, viz. tolerance, and
none measurement in a zone, viz. anomalous.
The statistical mean values of objective functions are selected and associated mean
value of initial parameters (i.e., α1 and β1) that are linked with the tolerated occur-
rences of fi is identiﬁed to optimize parameters. The high value of initial parameters
is not selected because of the reason that the succeeding parameters (i.e., α2 and β2)
possess high primacy because of their linkage with the abnormal occurrences of fi.
The subsequent objective function, which is obtained from (4.7), is deﬁned to
optimize the parameters α1 and α2 to the extend that Smsnq obtains the mean value,
where x and w denote Ωi1 and α1, correspondingly.
f (w, x) = (1 −w) + (2w −1) x
10
(4.8)
Assume x ∈[1, 10] and w ∈[0, 0.5) due to the reasons that α1 ∈[0, 0.5)
and Ωi1 ∈[1, 10]. This provides the f (w, x) = 0.47 mean value of the objective
function. The associated w value, which produces objective function f (w, x) mean
value, stays in the limit [0.35, 0.47], having deviation 0.005 on either sides of value.
The mean of bound produces 0.415 ≈0.42 that is taken as an optimal w value for
above-cited situation. Figure4.2 [1] shows a three-dimensional vision of the f (w, x)
objective function.
The optimum α1 = 0.42 value is obtained from above-cited process. By the
implication of the relation α2 = 1 −α1, the value for α2 may be inferred as 0.58.
The concluding score for the transmission of an agent can be computed from (4.9).
St
AA = Smsnq
2
+ β1u + β2v
(4.9)
where the β1 and β2 parameters are weighting inﬂuences for the recent observation
that stay in the zones, viz. 1σ < fi ≤2σ O R −1σ > fi ≥−2σ, and fi > 2σ O R
fi < −2σ, correspondingly. It is imperative to observe that the weighting inﬂuencing
sets {α1, α2} and {β1, β2} are autonomous and possess no relation. The weighting
inﬂuences β2 > β1 and β1 + β2 = 1. The weighting inﬂuence β2 possesses the large
value as it is linked with the present abnormal occurrence of fi.

88
4
First-Order Abnormalities: Agent Transmission Optimization
0
0.1
0.2
0.3
0.4
0.5
0
5
10
0
0.2
0.4
0.6
0.8
1
Fig. 4.2 Visualization of the objective function f (w, x):
c⃝Academy Publisher, reprinted from
Usman et al. [1]
In (4.9), the notation St
AA possesses number in [0, 1] unit interval and it is com-
puted as a three-parameter function, viz. Smsnq, u, and v. The Smsnq is derived from
(4.10), where the deﬁnitions of u and v are elucidated next.
• u = 1, iff present fi’s occurrence fulﬁlls the 1σ < fi ≤2σ or −1σ > fi ≥−2 σ
condition, else u = 0.
• v = 1, iff present fi’s occurrence fulﬁlls the fi > 2σ O R fi < −2σ condition, else
v = 0.
The association among u and v parameters is described as v = 1 −u. The weight-
ing inﬂuences equality β1 + β2 = 1 can be reordered as β2 = 1 −β1. Consequently,
(4.9) may be rearranged as given below.
St
AA = Smsnq
2
+ 1 + 2β1u −β1 −u
(4.10)
Since β1 + β2 = 1 and β2 > β1, thus β1 ∈[0, 0.5) and Smsnq ∈[0, 1]. The
subsequent objective function, which is computed from (4.10), is deﬁned to enhance
the β1 and β2 parameters to the extent that St
AA attains the mean value, where y and
z denote β1 and St
AA, correspondingly.
f (y, z) =
 z
2 + 1 −y,
u = 0,
z
2 + y,
u = 1.
(4.11)
To calculate the objective function f (y, z) mean value, assume z ∈[0, 1) and
y ∈[0, 0.5) and equivalent to Smsnq ∈[0, 1] and β1 ∈[0, 0.5), correspondingly.

4.2 Algorithms and Analysis
89
The f (y, z) objective function may has two situations, namely situation 1: u = 0
and situation 2: u = 1. The situation 1 has the minimum (min) (1), maximum (max)
(1.01), and mean (1.0049) values. On the contrary, the situation 2 has min (0), max
(0.99), and mean (0.5048) values. The associated y value of both situations stays
in the bound [0.2401, 0.2499]. The interval mean produces 0.245 ≈0.25 that is
considered as an optimal parameter y value.
On the basis of the calculation of the f (y, z) objective function, the optimized
β1 = 0.25 value is derived. Again by the implication of the relation β2 = 1 −β1, the
β2 value is acquired as 0.75.
The computed value of agent transmission, St
AA, must be larger than already set
threshold ψ to send an agent, where ψ ∈(0, 1). It is imperative to observe that the
terminating upper limit level of total score of agent dispatch, St
AA, is ﬁxed as 1.
Nonetheless, this would not change decision of agent dispatch, because any value
higher than ψ is considered as reasonable for the communication of agent. More-
over, if the score of agent dispatch is below than ψ, the abnormality identiﬁcation
and conﬁrmation module may take other usual actions, for instance, reducing the
interaction with msnq, announcing msnq as abnormal to other leader motes and
member motes, and transmitting an alarm to BS for tolerated categories, viz. 1, 2,
and 3, correspondingly (as discussed in Sect.4.2.1). This tactic initiates less frequent
communications of agents which decreases consumption of energy and enhances
total lifetime of the network. The pseudocode of the procedure of the optimization
of agent transmission is provided in Algorithm 4.3 [1]. Observe that Algorithm 4.3
(Phase 1) is executed only when the system is deployed and on every occasion when
tuning action (denoted by τ and discussed in Sect.3.4.1) is carried out by the user; on
the contrary, Phase 2 is computed by the abnormality identiﬁcation and conﬁrmation
module for every received abnormal observation.
4.2.4
Complexity Analysis
The space and time complexity of the algorithms is discussed below.
Theorem 4.1 The space complexity for (i) the procedure for the abnormality iden-
tiﬁcation on clnq is Cn + l[n] and (ii) the procedure for the optimization of the
abnormality agent transmission on clnq is constant Cv.
Proof (i) Assume FS2 = {j, f } be the numbers which are computed on clnq after
obtaining the O j observation, where O j possesses FS1 values. Therefore, FS =
FS1 ∪FS2 = {λ, ϕ, υ, j, f }. FS2 consumes l[ j] memory space. The entire space
consumed by n FS features thus becomes l[n] = l[ j] ∪l[m]; here, l[ j] < l[m]. The
clnq mote consumes constant spaces, viz. C1, C2, and C3, to save values of thresholds
for joins, combined value, and outcome of the optimization of the transmission of
agent procedure, correspondingly. The agent takes C4 and C5 spaces to save data
and code, correspondingly. Therefore, the entire memory space consumed by the
abnormality identiﬁcation procedure is ∪5
n=1Cn + l[n].

90
4
First-Order Abnormalities: Agent Transmission Optimization
Algorithm 4.3 Weighted sum optimization
Input: FS
Output: −1σ, −2σ, 1σ, 2σ for all fi ∈FS
Phase 1: Compute zones (FS)
1: At tk time
2: for each fi ∈FS do
3:
Compute −1σ, 1σ, −2σ, 2σ
//compute values of threshold
4:
Compute (N z) = -1 σ ≤fi ≤1 σ
//compute normal zone (N z)
5:
Compute (T z) = 1 σ < fi ≤2 σ ∧-1 σ > fi ≥-2 σ
//compute tolerance zone (T z)
6:
Update (Az) = fi > 2σ ∧fi < −2σ
//compute anomalous zone (Az)
7: end for
Input: FS
Output: Beh
Phase 2: Weighted sum transmission optimization (FS)
1: for each fi ∈FS do
2:
Compute Smsnq = α1( Ωi1
w ) + α2( Ωi2
w )
//compute the historical observation score Smsnq
3:
Compute St
AA =
Smsnq
2
+ β1y + β2z
//compute the abnormality agent transmission score
St
AA
4:
if St
AA ≥ψ then
//check for the anomalous behavior
5:
Beh ←B A
6:
break
7:
else if St
AA < ψ∧≥ζ then
//check for the BTζ tolerated behavior
8:
Beh ←BTζ
9:
break
10:
else if St
AA < ζ ∧≥γ then
//check for the BTγ tolerated behavior
11:
Beh ←BTγ
12:
break
13:
else if St
AA < γ∧≥η then
//check for the BTη tolerated behavior
14:
Beh ←BTη
15:
break
16:
else
//St
AA < η implies that the behavior is normal
17:
Beh ←BN
18:
end if
19: end for
20: return Beh to Algorithm 4.1.
(ii) The clnq takes constant memory spaces C7, C8, C9, and C10 to save weighting
factors α1, α2, β1, and β2 values, correspondingly. The memory spaces C11 and C12
are consumed by clnq to save fi instances values from w past tolerated and abnor-
mal observations. Correspondingly, clnq consumes C13 space to save the tolerated
or abnormal occurrence value of the present-obtained observation. The C14, C15,
C16, and C17 memory spaces are consumed by clnq to save the score of the past
observations of msnq, the score of agent transmission, the value of the threshold for
the agent transmission, and the conduct status of msnq, correspondingly. Assuming
Cv = ∪17
v=7Cv, the complexity of procedure of dispatch of agent is constant Cv.
Theorem 4.2 (i) the abnormality identiﬁcation procedure on clnq executes in
constant D time for usual measurements and it has the O(n) time complexity for

4.2 Algorithms and Analysis
91
abnormal observations and (ii) for the optimization of transmission of agent proce-
dure on clnq is O(y).
Proof (i) The clnq consumes the constant time D2 to receive the observation from
msnq, D3 time to retrieve FS1 values, and D4 time to calculate the FS2 values. To
accumulate sensor reading, msnq takes the D5 time to send the outcome to BS for
further examination. clnq consumes D6 time to carry out the abnormality identiﬁ-
cation procedure by employing the joins and allocating the appropriate behavior to
msnq the value of that is obtained after the calculation carried out by the procedure
of optimization of transmission of agent, where D6 > D5. clnq takes D7 time for
the transmission of agent to msnq; msnq is abnormal in such a situation. There-
fore, assuming D = 7
i=2 Di, the procedure of the identiﬁcation of abnormality
executes in D constant time. Furthermore, Algorithm 4.2 calls the phase, viz. agent
transmission optimization for abnormal observations that has the time complexity of
O(n).
(ii) clnq consumes y time to examine multiple zones for n features to categorize
as usual, tolerated, or abnormal to carry out the optimization of agent dispatch pro-
cedure. By taking the upper limit case, time complexity for optimization of dispatch
of agent procedure becomes O(y).
4.3
Formal Modeling and Analysis
This section ﬁrst addresses the individual formal speciﬁcations of the algorithmic
speciﬁcations presented in this chapter. This is followed by the uniﬁed model formu-
lation. Finally, the behavioral and structural properties are formulated and analyzed.
4.3.1
Model Formulation
The ﬁrst algorithmic speciﬁcation elucidates the method for the ﬁrst-order abnor-
mality identiﬁcation by the clnq. The formal speciﬁcation of the method is shown
below.
Net module FO: The ﬁrst-order abnormality identiﬁcation module, (PNFO), is
a 5-tuple net: PNFO = (PFO, TFO, FFO, WFO, (M0)FO), where PFO = {p21, p22,
p23, p41} and TFO = {t24, t25,..., t31, t47,..., t51} are non-empty, ﬁnite, and disjoint sets
of places and transitions, correspondingly. FFO = {(p21, t24), (p21, t25), (p21, t26),
(p21, t27), (p21, t28), (t24, p22), (t25, p22), (t26, p22), (t27, p22), (t28, p22), (t24, p23),
(t25, p23), (t26, p23), (t27, p23), (t28, p23), (p22, t29), (p23, t30), (p23, t30), (p41, t47),
(p41, t48), (p41, t49), (p41, t50), (p41, t51)} is set of arcs, WFO = 1 is weight for all
arcs, and (M0)FO = p21 denotes solitary token in the initial place.

92
4
First-Order Abnormalities: Agent Transmission Optimization
Theexecutionoftheﬁrst-orderabnormalityidentiﬁcationalgorithmisfollowedby
the invocation of the 2-sigma abnormality agent transmission optimization method,
which is formally characterized next.
Net module 2S: The 2-sigma optimization module, (PN2S), is a 5-tuple net: PN2S
= (P2S, T2S, F2S, W2S, (M0)2S), where P2S = {p24, p25,..., p29} and TFO = {t32, t33,...,
t38} are non-empty, ﬁnite, and disjoint sets of places and transitions, correspondingly.
FFO = {(p24, t32), (t32, p25), (t32, p26), (p25, t33), (p26, t34), (t34, p27), (t34, p28), (p27,
t35), (p27, t36), (p28, t37), (t37, p29), (p29, t38)} is set of arcs, W2S = 1 is weight for
all arcs, and (M0)2S = p24 denotes solitary token in the initial place of PN2S.
Alternatively, depending upon the requirements of the user, the execution of the
ﬁrst-order abnormality identiﬁcation algorithm can be followed by the invocation of
the weighted-sum abnormality agent transmission optimization method, which can
be formally deﬁned as given below.
Net module WS: The weighted-sum optimization module, (PNW S), is a 5-tuple
net: PNW S = (PW S, TW S, FW S, WW S, (M0)W S), where PW S = {p30, p31,..., p40} and
TW S = {t39, t40,..., t46} are non-empty, ﬁnite, and disjoint sets of places and transitions,
correspondingly. FW S = {(p30, t39), (p30, t40), (t39, p31), (t40, p31), (p31, t41), (t41,
p32), (t41, p33), (p32, t46), (p33, t42), (t42, p34), (t42, p35), (p34, t46), (p35, t43), (t43,
p36), (t43, p37), (p36, t46), (p37, t44), (t44, p38), (t44, p39), (p38, t46), (p39, t45), (t45,
p40), (p40, t46)} is set of arcs, WW S = 1 is weight for all arcs, and (M0)W S = p21
denotes solitary token in the initial place of PNW S.
In order to formulate the uniﬁed model, the modules are joined in the transition-
place manner. In this process, the following additional arcs have been introduced:
Fa = {(t30, p30), (t31, p24) (t46, p41)}. The corresponding weights are deﬁned as
Wa(t30, p30) = Wa(t31, p24) = Wa(t46, p41) = 1. The resultant uniﬁed model, (PNu),
is depicted in Fig.4.3 and formally described below.
Uniﬁed model The (PNu), a uniﬁed PN model, is a 5-tuple net: PNu = (Pu, Tu,
Fu, Wu, (Mu)0), where Pu = {PFO, P2S, PW S} and Tu = {TFO, T2S, TW S} are non-
empty, ﬁnite, and disjoint sets of places and transitions, correspondingly. Similarly,
Fu = {FFO, F2S, FW S, Fa} and Wu = 1 is weight for all arcs including additional
arcs. Finally, (M0)u = p21.
4.3.2
Formal Characterization and Analysis
On the basis of the formal speciﬁcations stated above, the behavioral properties,
namely safeness and liveness of the proposed algorithmic speciﬁcations, can be
formally veriﬁed as shown below.
Theorem 4.3 The model, PNu, is safe.
Proof For all p ∈Pu, M(p) = 1. Although ﬁring of the transitions t24, t25, t26, t27,
and t28 yields 5 tokens in the place p22 or p23, these tokens, however, merge together
and ﬂow as a single token in the rest of the net. This yields that the uniﬁed Petri net
model, PNu, is safe.

4.3 Formal Modeling and Analysis
93
Fig. 4.3 The uniﬁed formal model

94
4
First-Order Abnormalities: Agent Transmission Optimization
Theorem 4.4 The uniﬁed Petri net model, PNu, is level 4 live.
Proof The terminal transitions t29, t33. t35, t36, t38, and {t47, t48, t49, t50} are level 4
live as there are ﬁring sequences for all these transitions. The ﬁring sequence for the
transition t29 is {t24, t25, t26, t27, t28} →t29. Then, the ﬁring sequence for the transition
t33 is {t24, t25, t26, t27, t28} →t31 →t32 →t33. Similarly, the ﬁring sequence for the
transitions t35 and t36 is {t24, t25, t26, t27, t28} →→t31 →t32 →t34 which then leads
to either t35 or t36 depending on the state of the system. Next, the ﬁring sequence for
the transition t38 is {t24, t25, t26, t27, t28} →→t31 →t32 →t34 →t37 →t38. The
ﬁring sequence for the set of transitions {t47, t48, t49, t50} is t1 →{t24, t25, t26, t27,
t28} →t30 →{t39, t40} →{{t41, t46}, {t41, t42, t46}, {t41, t42, t43, t46}, {t41, t42, t43, t44,
t46}, {t41, t42, t43, t44, t45, t46}} →{t47, t48, t49, t50}. Finally, the ﬁring sequence for the
transition t29 can also achieved as t1 →{t24, t25, t26, t27, t28} →t30 →{t39, t40} →
{{t41, t46}, {t41, t42, t46}, {t41, t42, t43, t46}, {t41, t42, t43, t44, t46}, {t41, t42, t43, t44, t45,
t46}} →t51 →t29. Thus, PNu is level 4 live, that is, no deadlock exists in the model,
PNu.
4.4
Performance Evaluation
The temporal behavior of the abnormality identiﬁcation and conﬁrmation system has
been thoroughly investigated through implementation on a small-scale real test bed
in the previous chapter. A simulation study has been carried out and elucidated to
analyze the conduct of the system in a large-scale network. The proposed algorithms
have also been implemented on a real mote to measure their consumption of memory,
consumption of energy, and processing time. Finally, the comparison of the system
has been made with a few recent competing schemes.
4.4.1
Simulation Study
In the simulation study, the ﬁrst-order abnormality identiﬁcation algorithm was
employed for identifying abnormalities. Similarly, the 2-sigma and weighted-sum
algorithms were employed for abnormality agent transmission optimization. The
simulation scenarios have been developed to analyze the system performance, in
discrete event and object-oriented environment that emulates events in a sequential
order [3]. The environment of simulation was based on the following setup.

4.4 Performance Evaluation
95
4.4.1.1
Simulation Setup
• Network model: The horizon of simulation had the Wd × Lg square meter area.
k motes were arbitrarily positions in multiple simulation scenarios. The BS was
positioned at (a, b) location.
• Motemodel:ThestandardcapabilityofresourcesofMICAzwasemployed[4].The
ﬂash data logger, SRAM, and program memories were set as MFL ASH, MSRAM,
and MP, correspondingly. The overall mote energy was set as NE at the start
of network lifetime. Energy consumption, by a mote during the sleep state, was
supposed as NEslp.
• Mote categorization: The scenario of smart home scenario was assumed to study
the consumption of energy. The motes were characterized as non-security and
security motes. In practice, the non-security sensors may include temperature,
humidity, and pressure sensors, whereas the light and motion detectors may be
considered as security sensors. A limit, σ, was ﬁxed for security motes, whereas
a comparatively lenient limit, 2σ, was ﬁxed for the non-security sensors.
• Model for dissipation of communication energy: A common model was employed
for energy consumption [5]. The following relations were employed to evaluate
the dissipation of energy by radio hardware to send l-bits on d distance.
ET x(l, d) = ET x−elec(l) + ET x−amp(l, d)
(4.12)
PU(u) =
lEelec + lϵ f sd2 d < d0,
lEelec + lϵmpd4 d ≥d0
(4.13)
Correspondingly, to get l-bits, the consumption of energy was evaluated from the
relation.
ERx(l) = ERx−elec(l) + lEelec
(4.14)
where Eelec denotes the electronic energy dissipation which has multiple aspects
such as ﬁltering, digital coding, modulation, and spread of signals. Correspond-
ingly, ϵ f sd2 and ϵmpd4 are the energies of ampliﬁer that relies on multiple aspects,
viz. distance among receivers and senders and acceptable bit-fault rate. It is imper-
ative to note that Eelec is equal to (ET x + EDA) for cluster leader motes and ET x
for cluster member motes for communication; here, ET x represents the transmis-
sion energy and EDA denotes the energy of data accumulation. On the contrary,
the Eelec values were equal to ERx for leader and member motes while getting
packets.
• Network lifetime: An approach, viz. “ﬁrst mote die” approach, was employed for
analysis [6].
• Propagation model: The d2 (free space, fs) and d4 (multipath fading, mp)
power loss models were employed as propagation models [5]. If distances among
receivers and senders were less than d0 threshold, then fs, otherwise mp model,
was employed.

96
4
First-Order Abnormalities: Agent Transmission Optimization
• Trafﬁc model: The cluster member motes were set to periodically transmit sensed
data. The cluster member motes sent sensed data after each t seconds. The sent
sensed data had Pkt size, having both payload and header. The payload of usual
packet, shown in Fig.4.4 [1], had FS1 values that were sent by cluster member
motes. The features, viz. υ, T , and λ, were assumed as continuous variables in
analysis; on the contrary, F and ϕ were treated as discrete variables.
• Cluster formation: The groups (clusters) were made by employing LEACH, a
famous cluster creation algorithm [5]. The scenarios were based on heterogeneous
motes (in terms of resource capability), and LEACH facilitates such motes to create
the cluster-oriented topology.
• Abnormality agent: The developed agent size was 762 bytes (having itinerary, data,
code, and identity). An agent is not dispatched as solitary packet due to its larger
size. Thus, the agent was divided into several frames according to the speciﬁcation
of 802.15.4 standard [7]. The maximum allowed frame limit is 127 bytes (i.e., with
the payload and header sizes of 102 and 25 bytes, correspondingly) on the basis of
802.15.4 speciﬁcations. Thus, the agent was divided into eight data packets. The
size of header was ﬁxed as 25 × 8 = 200 bytes. On the contrary, the size of the
payload of initial seven data packets was 102 × 7 = 714 bytes, and for ﬁnal packet,
48 × 1 = 48 bytes. The total size of initial seven packets, by employing the ((header
size × number of packet) + (payload × size number of packets)) formula, was (25
× 7) + (102 × 7) = 175 + 714 = 889 bytes. Correspondingly, the ﬁnal packet size
was (1 × 25) + (1 × 48) = 25 + 48 = 73 bytes. Therefore, the agent size was 962
bytes after its division. The packet size, which takes the outcome of on-the-spot
conﬁrmation procedure, was 27 bytes (i.e., 2 and 25 payload and header sizes), as
that packet just transmits the outcome of the conﬁrmation procedure as either 0”
or 1 denoting ‘usual” or abnormal status, correspondingly. The structure of data
packets of agent and conﬁrmation procedure is shown in Figs.4.5, 4.6, and 4.7 [1].
• Anomalous trafﬁc: The 25% anomalous trafﬁc was randomly generated by abnor-
mal motes in the simulation horizon. The usual and abnormal trafﬁcs of data were
accumulated and afterward employed for computing ﬁrst-order bounds.
• Thresholds for agent transmission optimization: The six-sigma rule-based values,
viz. −2σ, −1σ, 1σ, and 2σ, were employed to optimize transmission of agent [8].
The weighting factors values were ﬁxed as α1, α2, β1, and β2. The agent trans-
mission threshold was set as ψ; on the contrary, the zones for tolerance were set
as T olη, T olγ, and T olζ.
• Iterations: The reported outcomes are based on 30 iterations of the simulated
experiments.
The subsequent seeds were employed to form simulation cases: k = 30 −150,
Wd = 100, Lg = 100, a, b = 50, ET x, ERX = 50 × 10−9 Joules, ϵmp = 1.3 × 10−3
× 10−12 Joules/bit/m4, ϵ f s = 10 × 10−12 Joules/bit/m2, EDA = 5 × 10−9
Joules/bit/signal, Mp = 128 kb, MSRAM = 4 kb, M f lash = 512 kb, NE = 1e4 nJ,
t = 0.1, Pkt = 31 bytes, NEslp = 1 nJ/t, −1σ to 1σ = 0.68, −2σ to 2σ = 0.95, λ
= 13 ◦C to 39 ◦C, T = 0–1, 2–3, 4–5s, ϕ = 1 for allowed job carried out and 0 for
not-allowed job carried out, υ = 100% (i.e., full battery) →0% (i.e., empty battery),

4.4 Performance Evaluation
97
Frame Control 
Sequence Number
Address Information
f1 
f2 
f3 
Frequency Check Sequence
31 Bytes
2 Bytes
1 Byte
20 Bytes
6 Bytes
2 Bytes
Fig. 4.4 Usual data packet: c⃝Academy Publisher, reprinted from Usman et al. [1]
Frame Control Sequence Number
Address Information
Frequency Check Sequence
73 Bytes
2 Bytes
1 Byte
20 Bytes
48 Bytes
2 Bytes
Mobile Agent Paylod
Fig. 4.5 Agent data packets (excluding last packet): c⃝Academy Publisher, reprinted from Usman
et al. [1]
Frame Control Sequence Number
Address Information
Frequency Check Sequence
127 Bytes
2 Bytes
1 Byte
20 Bytes
102 Bytes
2 Bytes
Mobile Agent Paylod
Fig. 4.6 Last data packet of agent: c⃝Academy Publisher, reprinted from Usman et al. [1]
Frame Control Sequence Number
Address Information
Frequency Check Sequence
27 Bytes
2 Bytes
1 Byte
20 Bytes
2 Bytes
2 Bytes
Verification Result
Fig. 4.7 On-the-spot conﬁrmation outcome data packet:
c⃝Academy Publisher, reprinted from
Usman et al. [1]
F = 1 for every timely obtained and 0 for each deferred obtained packet, h = 10, α1
= 0.42, α2 = 0.58, β1 = 0.25, β2 = 0.75, η = 0.50, ψ = 0.55, ζ = 0.40, and γ = 0.45.
4.4.1.2
Results and Analysis
The comprehensive performance of the abnormality identiﬁcation and conﬁrmation
system was measured in regard to the subsequent performance measures:
• Rate of abnormality detection: This measure provides the percentage of the abnor-
malities identiﬁed from total abnormalities.
• Estimation of Energy consumption: The consumption of energy is assessed for
both usual and abnormal network trafﬁcs. This facilitates to measure the effect of
employing agents for on-the-spot conﬁrmation on the energy level of a mote with
limited resources.

98
4
First-Order Abnormalities: Agent Transmission Optimization
• Number of transmitted agents: This measure assists in computing the number of
agents that are sent with employing and without employing optimization of agent
communication procedure.
The initial group of experiments was carried out to measure the rate of detection
of ﬁrst-order abnormalities that occurred due to on-the-spot faults (see N(λ, T )
join, as described in Sect.4.2.1). In this group of experiments, member motes of
cluster uninterruptedly sent FS1 values in place of periodic communications to the
corresponding leader motes of clusters. The produced network trafﬁc was comprised
of 5000 packets that were sent by thirty member motes to their respective leader
motes. In such a situation, the abnormality identiﬁcation and conﬁrmation module
discovered 99% of the abnormalities. For network trafﬁc having 7000, 9000, 11000,
and13000measurementssentby60,90,120,and150membermotes,theabnormality
identiﬁcation rates were 98.80%, 98.40%, 98.20%, and 98%, correspondingly. The
trials’ outcomes illustrate the identiﬁcation rate of abnormalities occurred due to on
the spot faults remained in the limit between 98 and 99%.
The second and next abnormalities are associated with consumption of resources
by member motes. A resource exhaustion attack was performed on the member
motes, in which member motes sent low-value status of battery rather than values
that are expected residual battery values (see second join N(T , υ), as elucidated in
Sect.4.2.1). The total rate of detection of abnormalities occurs due to exhaustion
of resource attack randomized among 98.60 and 99%. The rates of detection for
5000, 7000, 9000, 11000, and 13000 observations remained 99%, 98.80%, 98.80%,
98.60%, and 98.60%, correspondingly. Then, the abnormality identiﬁcation and con-
ﬁrmation modules on the leader motes were conﬁgured to identify the abnormalities
occurred due to faulty motes (see third N(ϕ, υ), as described in Sect.4.2.1). In these
trials, the energy stock of defective member motes consumed rapidly because of
the unapproved activities carried out by the motes. As a result, the motes sent low-
level status of battery in place of expected values to the related leader motes. In this
group of experiments, the rates of detection were 98.2%, 98.80%, 99%, 97.80%, and
98.80% for 5000, 7000, 9000, 11000, and 13000 observations, correspondingly.
Then, the case of faulty motes was investigated (see fourth join N(ϕ, T ), as
described in Sect.4.2.1), wherein defective member motes sent abnormal values of
the allowed activities in regard to time duration. In such situations, the abnormality
identiﬁcation and conﬁrmation modules, positioned on every leader mote of the
cluster, spotted 98.2%, 98.80%, 99.2%, 98%, and 98.80% abnormalities for 5000,
7000, 9000, 11000, and 13000 observations, correspondingly. Lastly, the denial-
of-sleep attack situations were introduced (see ﬁfth join N(F, T ), as elucidated in
Sect.4.2.1). In these situations, the member motes of clusters unremittingly sent
observations other than intermittent communications. In this group of trails, the
rates of detection for 5000, 7000, 9000, 11000, and 13000 observations were 98%,
98.60%, 99%, 97.80%, and 98.80%, correspondingly. In all above-cited situations,
agents were able to recognize the origin of abnormalities which have caused on
the spot or in transmission. The plot revealed in Fig. 4.8 [1] gives the abnormality

4.4 Performance Evaluation
99
Fig. 4.8 Rate of detecting
ﬁrst-order abnormalities: c⃝
Academy Publisher,
reprinted from Usman et al.
[1]
90
92
94
96
98
100
5000
7000
9000
11000
13000
Detection rate (%)
Data packets
N(λ, T)
N(T, φ)
N(υ, φ)
N(υ, T)
N(F, T)
Fig. 4.9 Energy
consumption by transmission
of packets: c⃝Academy
Publisher, reprinted from
Usman et al. [1]
0
0.5
1
1.5
2
5000
7000
9000
11000
13000
Energy dissipation (J)
Data packets
Anomalous Etx
Normal Etx
identiﬁcation outcomes. It is evident that the accuracy of detection is higher for every
join as it remained among 97.80 and 99.20%.
Next, the consumption of energy in situations, i.e., usual and abnormal packets
are sent in variable mote density situations, is examined. The usual data trafﬁc had
packets that were sent from member motes to their respective leader motes of the
clusters. On the contrary, the abnormal trafﬁc had packets of agents that were sent
from leader motes to the doubtful member motes for on-the-spot conﬁrmation and
outcomes of on-the-spot conﬁrmation procedures that were sent back to leader motes
of the clusters. It is obvious from Fig.4.9 [1] that the line that represents the con-
sumption of energy by transmission of 5000, 7000, 9000, 11000, and 13000 usual
packets that were sent by 30, 60, 90, 120, and 150 member motes to corresponding
leader motes has a stable evolution in positive path beside x-axis. This illustrates the
steady surge in consumption of energy as statistic of packets rises in network trafﬁc,
whereas the consumption of energy by abnormal trafﬁc of the network which has
agents and on-the-spot conﬁrmation packets incline to change and has a moderately
non-stable evolution. This is because of the randomization in the detection accuracy
of related leader motes of the clusters and also variations involved in underlying
abnormal trafﬁc.

100
4
First-Order Abnormalities: Agent Transmission Optimization
Fig. 4.10 Energy
consumption by receiving
packets: c⃝Academy
Publisher, reprinted from
Usman et al. [1]
0
0.5
1
1.5
2
5000
7000
9000
11000
13000
Energy dissipation (J)
Data packets
Anomalous Erx
Normal Erx
The energy consumption cost of receiving packets is studied next. Figure4.10 [1]
shows the consumption of energy outcomes for receiving both usual and abnormal
packets. The consumption of energy due to the reception of packets trails the similar
tendency as displayed by the packets sent with a somewhat minor cost. The trafﬁc,
having 5000–7000 packets, instigated the consumption of 0.0686–0.177J energy
for sending and 0.0682–0.176J energy for getting the usual trafﬁc. Likewise, for
sending and getting abnormal trafﬁc, the consumed energy by network was 0.517–
1.592J and 0.51215–1.591 J, correspondingly. The moderately low consumption
of energy during getting data trafﬁc is because of the reason the communication
procedureincludesdistanceinﬂuencealongwiththestaticquantityofenergyspentby
transceiver for dispatch of data. An imperative fact that is clear from Figs.4.9 and 5.10
is variance in scale of consumption of energy by usual trafﬁc with abnormal trafﬁc.
This variance of consumption of energy scale is due to the additional trafﬁc sent on
the network as agents and on-the-spot conﬁrmation outcome packets for the situation
of abnormal trafﬁc. The resource-wealthy group head motes can effortlessly manage
such an overhead. Though, the resource-constrained member motes may rapidly
consume their energy that promotes the usage of optimization of agent transmission
procedure to save the energy resources of resource-constrained motes.
The abnormality identiﬁcation and conﬁrmation modules, positioned on clus-
ter leader motes, sent 1240, 1770, 2140, 2570, and 3249 agents subsequent to the
identiﬁcation of same number of abnormalities by not using optimization of agent
transmission procedure in the trafﬁc having 5000, 7000, 9000, 11000, and 13000
data packets, correspondingly. As cited above, this rapidly consumed energy bud-
get of resource-constrained cluster member motes. The proposed abnormality agent
transmission optimization methods (i.e., Algorithms 4.2 and 4.3) were, therefore,
employed. As a result, the transmissions of agents were decreased to 818, 1204, 1477,
1825, and 2177in the case of 2-sigma optimization method (i.e., Algorithm 4.2). On
the other hand, the transmissions of agents were decreased to 600, 993, 1080, 1513,
and 1560in the case of the weighted-sum optimization method (i.e., Algorithm 4.3).
These results are shown in Fig.4.11 [1]. This decreased the consumption of energy by
both reception and transmission abnormal trafﬁcs on the network to around 29–34%

4.4 Performance Evaluation
101
Fig. 4.11 Optimization of
agent transmission: c⃝
Academy Publisher,
reprinted from Usman et al.
[1]
0
1000
2000
3000
4000
5000
5000
7000
9000
11000
13000
Anomaly agents
Data packets
Transmission without optimization
Transmission with 2-sigma
Transmission with weighted sum
Fig. 4.12 Consumption of
energy by transmission of
agent: c⃝Academy
Publisher, reprinted from
Usman et al. [1]
0
0.5
1
1.5
2
2.5
3
30
60
90
120
150
Energy dissipation (J)
Sensor nodes
Anomalous Etx without optimization
Anomalous Etx with 2-sigma
Anomalous Etx with weighted sum
Normal Etx
Fig. 4.13 Consumption of
energy by receiving agent:
c⃝Academy Publisher,
reprinted from Usman et al.
[1]
0
0.5
1
1.5
2
2.5
3
30
60
90
120
150
Energy dissipation (J)
Sensor nodes
Anomalous Erx without optimization
Anomalous Erx with 2-sigma
Anomalous Erx with weighted sum
Normal Erx
for the situation of the usage of 2-sigma optimization procedure. The reduction of
the energy dissipation was even higher in the case of the weighted-sum optimization
method, that is, down to around 42–52%, as depicted in Figs.4.12 [1] and 4.13 [1].
The above-mentioned analysis reveals that the abnormality identiﬁcation and con-
ﬁrmation system is not merely able to identify ﬁrst-order abnormalities with higher
rate of detection but also able to effectively carry out on-the-spot conﬁrmation job on

102
4
First-Order Abnormalities: Agent Transmission Optimization
suspicious motes. Moreover, the optimization of agent transmission procedure that
considers both previous and present observations to enhance the procedure of agent
transmission can extend the lifetime of the network l by approximately 42–52%.
Correspondingly, the optimization of agent transmission procedure that outlines the
restriction zones on the probability distribution of features extends the lifetime of
the network approximately 29–34%.
As indicated by the simulation results, most of the network energy is consumed
by transmission and reception of agents in the functioning of the abnormality iden-
tiﬁcation and conﬁrmation system. This study has proposed two methods, namely
2-sigma and weighted-sum optimization, to optimize the agent transmission. How-
ever, because of the inherent characteristics of the agent-enabled tiny sensor mote
networks,ifourproposedsystemisdeployedonhomogeneousnetworkswithbattery-
operated mote, then transmissions and receptions of agents will result in quick deple-
tion of battery resources of certain cluster leaders and some of their member motes.
This may result in re-clustering of the network, which is an energy-consuming pro-
cess. The re-clustering of a network is also not suitable due to the sensed data stored
for on-the-spot conﬁrmation purposes. The transmission of this data from one cluster
leader mote to another cluster leader mote will also consume energy, and the old data
may not remain suitable for on-the-spot conﬁrmation procedure. Thus, the system is
better suited for heterogeneous sensor networks.
4.4.2
Implementation
The algorithms have been implemented on MICAz [4], having TinyOS 2.1.1 [9], to
study their effect on low resources of real sensor motes. MICAz has a microproces-
sor (ATmega128L). The conﬁguration EEPROM, data logger, and ﬂash memories
of MICAz have 4, 512, and 128 kb storage memories, correspondingly. The algo-
rithms are developed using nesC [10] that is employed for developing applications
in TinyOS. The aim of development is estimation of consumption of energy and
memory resources with processing time consumed by algorithms. It is pertinent to
note that the worst situation, that is, all relations within the algorithms were ﬁnished
in order to measure the effect of algorithms on resources of MICAz. Moreover, only
those algorithms, of the system, are implemented which execute either on cluster
member motes or on cluster leader motes.
4.4.2.1
Memory Consumption
The nesC produces a report for consumption of memory by programs in the phase
of compilation. The report shows the statuses of ROM and RAM of MICAz in
bytes. The overall consumption of memory (i.e., ROM and RAM together) by Algo-
rithms 4.1, 4.2, 4.3, and 4.4 were 1567, 2132, 3130, and 1124 bytes, correspondingly.
This outcome shows that the consumption of memory by Algorithms 4.2 and 4.3 is

4.4 Performance Evaluation
103
more than Algorithms 4.1 and 4.4 due because of the former algorithms include
the processing, transmission, and reception of agent. Algorithms 4.2 and 4.4 run on
resource-wealthy leader motes of the clusters. Therefore, the high consumption of
memory may be achieved by such motes. The running of Algorithms 4.1 and 4.3, on
member motes of the clusters, takes 1567 and 3130 bytes memory, correspondingly,
that may be accommodated by MICAz memory subsystem. Moreover, the running
of Algorithm 4.3 is infrequent; that is, it runs only when a doubtful cluster member
mote is identiﬁed within the cluster and the leader mote of the cluster transmits an
agent for on-the-spot conﬁrmation of the doubtful cluster member mote after the
consideration of the optimization of agent transmission procedure.
It is pertinent to note that the abnormality agent inhabits the memory of the cluster
member mote for a limited amount of time. Per se, an agent is removed that clears
engaged space of the memory as early as it sends on-the-spot conﬁrmation outcome
to the leader mote of the cluster. Thus, the effect of agent on the memory of the
member mote of the cluster is for relatively short term.
The memory consumption by Algorithms 4.1, 4.2, and 4.3 was 2559, 1066, and
1206 bytes, correspondingly. This shows that the abnormality identiﬁcation with the
ﬁrst-order joins (i.e., Algorithm 4.1) consumes more memory as compared to the
abnormality identiﬁcation on individual features (i.e., Algorithm 4.2). Similarly, 2-
sigma method for optimization of agent transmission (i.e., Algorithm 4.2) consumes
less memory as compared to the weighted-sum method (i.e., Algorithm 4.3). This
indicates that although the weighted-sum method is more efﬁcient as it causes less
frequent abnormality agent transmission, it consumes more resources during execu-
tion of the algorithm. The memory consumption outcomes are given in Table4.2 [1].
4.4.2.2
Processing Time
The processing times for Algorithms 4.1, 4.2, 4.3, and 4.4 were 6.93, 32.51, 7.65,
and 4.01 ms, correspondingly. Algorithms 4.2 and 4.3 carry out the task of the
identiﬁcation of abnormality, on-the-spot conﬁrmation, and their total spent time
was 40.16 ms. Algorithms 4.2 and 4.3 consumed large amount of processing time in
Table 4.2 Memory consumption: c⃝Academy Publisher, reprinted from Usman et al. [15]
Algorithm
RAM
Rom
4.1
29
1538
4.2
41
2091
4.3
59
3071
4.4
23
1101
5.1
50
2509
5.2
22
1044
5.3
24
1182

104
4
First-Order Abnormalities: Agent Transmission Optimization
Table 4.3 Processing time and energy consumption: c⃝Academy Publisher, reprinted from Usman
et al. [15]
Algorithm
Processing time (ms)
Energy consumption (µJ)
4.1
6.93
55.60
4.2
32.51
3647.12
4.3
7.65
1570.96
4.4
4.01
39.73
5.1
37.25
4039.91
5.2
3.97
38.67
5.3
4.13
40.02
comparison to Algorithms 4.1 and 4.4 because of the immersion abnormality agent
processing. This processing time result is in line with theoretical outcomes illustrated
in Sect.3.5.6.
The processing times for Algorithms 4.1, 4.2, and 4.3 were 37.25. 3.97, and
4.13 ms, correspondingly. This shows that the combined elapsed time for the ﬁrst-
order abnormality identiﬁcation (i.e., Algorithm 4.1) and on-the-spot conﬁrmation
procedure (i.e., Algorithm 4.3) was 44.9 ms. If a cluster leader mote also employs the
procedure of optimization of agent transmission, then the overall process consumes
48.87 ms time in the case of the 2-sigma method (i.e., Algorithm 4.2) and 49.03 ms in
the case of the weighted-sum method (i.e., Algorithm 4.3), which are quite efﬁcient.
These results are shown in Table4.3 [1].
4.4.2.3
Energy Consumption
The procedure of collection of features by the cluster member mote (i.e., Algo-
rithm 4.1) consumed 55.60 µJ of energy in each iteration. Algorithms 4.2 and 4.4
consumed 3647.12 µJ and 39.73 µJ of energy, correspondingly. These algorithms,
however, run on resource-wealthy cluster leader motes that can manage such a con-
sumption of energy. The dissipation of energy by Algorithm 4.3 was 1570.96 µJ.
Nevertheless, this energy is merely spent by doubtful cluster member mote for on
the spot conﬁrmation procedure. Similarly, Algorithms 4.1, 5.2, and 5.3 consumed
4039.91, 38.67, and 40.02 µJ energy. Algorithm 4.1 consumed higher amount of
energy as it involves the transmission of the abnormality agent. This energy con-
sumption is, however, manageable by resource-rich cluster leader motes. The energy
consumption results are provided in Table4.3 [1].

4.4 Performance Evaluation
105
4.4.3
Comparative Study and Discussion
The abnormality identiﬁcation and conﬁrmation system is contrasted with three
relatively latest associated techniques presented by Ketel [11], Eludiora and col-
leagues [12], and Khanum and colleagues [13]. As discussed in Sect.2.2.2.5, these
schemes have been chosen due to the similarity of the use of agent technology for
abnormality/intrusion/attack identiﬁcation in networks. It is pertinent to mention
that the job of the abnormality conﬁrmation agent in abnormality identiﬁcation and
conﬁrmation system is to verify that the abnormalities are caused on the spot or
in transition unlike the work presented by Wagner [14] which assumes a secure
link among a sensor mote and BS. Therefore, no comparison of our work can be
made with this secure aggregation technique. However, our abnormality identiﬁca-
tion and conﬁrmation system can be used in conjunction with the Wagner’s approach
to achieve more reliable functionality of sensor networks. It is pertinent to note that
the primary contribution of this study is not to improve the detection accuracy, but
to identify abnormalities caused due to the different nature of faults and attacks, in
addition to on-the-spot conﬁrmation of doubtful motes and optimization of agent
dispatch. However, a fuzzy logic-established cross-layer abnormality identiﬁcation
technique has been presented in Chap.5 which increases the detection accuracy and
that work has been compared with the related abnormality identiﬁcation schemes
(see Sect.5.7).
The comparison has been made in the following six aspects: (i) role of the agent,
(ii) nature of identiﬁed abnormalities, (iii) agents per mote, (iv) identiﬁcation time
complexity, (v) homogeneous or heterogeneous nature of sensor network, and (vi)
agent dispatch optimization. In the system, the agents are mobile and solitary agent
per mote is sent for on-the-spot conﬁrmation of the doubtful conduct of a cluster
member mote by using the resources of the mote. On the other hand, the scheme
presented by Ketel [11] employs three agents, namely static, mobile, and nodal
agents, for the abnormality identiﬁcation procedure. The technique put forwarded
by Eludiora et al. [12] employs an agent for the inter-BS regulatory interaction.
Correspondingly,theworkbyKhanumandcolleagues[13]employstwostaticagents,
namely management and coordination, and an agent that is mobile and employed
to perform the abnormality identiﬁcation procedure. Both Khanum et al. [13] and
Ketel [11] used three agents for abnormality identiﬁcation. The usage of numerous
agents not only surges the cost of computation, but it also needs added calculation
for inter-agent interaction. The usage of numerous agents also surges the interaction
and computation workload of a network.
An imperative variance among the system and other techniques is communication
of an agent by a speciﬁc kind of mote. In the system, an agent is only sent by resource
wide motes (i.e., by cluster leader motes) and obtained by cluster member motes in
comparison to other techniques, where agents are sent by all motes. This method
of other techniques can rapidly consume the resources of energy of member motes.
In contrast, the member motes in the system obtain the agent only for on-the-spot
conﬁrmation procedure (i.e., not very frequently). This tactic puts the minimum

106
4
First-Order Abnormalities: Agent Transmission Optimization
load on the resource-constrained member motes. Moreover, the system does not
facilitate the movement of agent among cluster member motes (i.e., among non-
cluster leader motes inside or outside). This policy successfully uses total resources
of network without refuting the job of the agent in the abnormality identiﬁcation and
conﬁrmation system.
The abnormalities identiﬁed in the studies carried out by Ketel [11] and Eludiora
and colleagues [12] are DoS attack-based and mote abnormalities, correspondingly.
The technique studied by Khanum et al [13] only identiﬁes reading abnormalities. In
contrast, the system can discover numerous natures of ﬁrst-order abnormalities that
are produced by denial-of-sleep threat, exhaustion of battery, and other attacks. The
complexity of detection of the technique put forwarded by Ketel [11] cannot be com-
puted, because it is a high-level technique and no implementation (or algorithmic)
descriptions of the abnormality identiﬁcation procedure are given. The abnormal-
ity identiﬁcation complexity of Eludiora et al. [12] technique is O(n2) [12]. The
technique by Khanum et al. [13] and system discovers abnormalities within O(n)
time. Moreover, the system is appropriate for networks with heterogeneous nature
of motes.
Moreover, not any among existing techniques has solved the problem of opti-
mization of agent transmission [11–13]. The system improves the procedure of agent
transmission by taking into account the past and present occurrences of the abnormal
observations. A comparative summary of the techniques is given in Table4.4 [1].
Table 4.4 Comparison summary: c⃝Academy Publisher, reprinted from Usman et al. [15]
Technique/system
Agent role
Abnormalities
Agents/mote
Complexity of
detection
Ketel [11]
Abnormality
information
collection
Mote
abnormalities
through
neighbor
monitoring
3
Not applicable
Eludiora et al. [12]
Inter-BS control
communication
Abnormalities
caused by DoS
attack
1
O(n2)
Khanum et al. [13]
Local
abnormality
Sensor reading
abnormalities
3
O(n)
The system
On-the-spot
conﬁrmation
Denial-of-sleep
and resource
exhaustion
attacks along
with mote faults
1
O(n)

4.5 Summary
107
4.5
Summary
The algorithm, presented in this chapter, maximizes the use of synchronized resource
management scheme-based observations and deﬁnes an association among features
of interest to detect abnormalities occur due to on-the-spot attacks or faults, resource
exhaustion attacks, attacks on the resources of motes, and denial-of-sleep attacks.
This chapter has also addressed the third research question and satisﬁed the corre-
spondingthirdrequirement byproposingtwomethods, namely2-sigmaandweighted
sum, for abnormality conﬁrmation agent transmission optimization. The former
method deﬁnes the curtailment regions on underlying probability distributions to cur-
tail transmission of abnormality conﬁrmation agents, whereas in the latter method,
the cluster leader mote considers both the current and anomalous behaviors of the
cluster member sensor motes in order to compute the abnormality conﬁrmation agent
transmission score and consequently transmitting abnormality conﬁrmation agents
to carry out the job of on-the-spot conﬁrmation.
The performance of the algorithms has been thoroughly investigated in terms
of a complexity analysis, formal modeling and analysis, a simulation study, imple-
mentation on a real mote, and a comparison study. The outcomes have indicated
that the ﬁrst-order abnormality identiﬁcation algorithm can discover the occurrence
of numerous ﬁrst order abnormalities because of the denial-of-sleep attack, resource
exhaustion attack, and errors on motes with the accuracy between 97.80 and 99.20%.
Similarly, the 2-sigma and weighted-sum abnormality conﬁrmation agent transmis-
sion optimization algorithms reduced the abnormality conﬁrmation agent transmis-
sion overhead by as much as 29–34% and 42–52%, correspondingly, unlike related
schemes which have not considered the optimization of agent transmission [11–13].
The implementation on a real mote advocated the suitability of the algorithms for
low-resource sensor motes. Finally, the comparative study has demonstrated that
the system can detect denial-of-sleep and resource exhaustion attacks and errors on
motes with detection complexity O(n), dissimilar to related techniques presented
by Eludiora et al. [12] and Khanum et al. [13] which can detect DoS attack and
sensor reading abnormalities with the detection complexity of O(n2) and O(n),
correspondingly.
A scheme for cross-layer abnormality identiﬁcation and abnormality conﬁrmation
optimization has been introduced in the next chapter.
4.6
Bibliographic Notes
The notion of the ﬁrst-order anomalies was elucidated in [1]. The concept of 2-
sigma optimization was presented in [2]. The idea of weighted-sum optimization

108
4
First-Order Abnormalities: Agent Transmission Optimization
method was introduced in [1]. The simulation study results and analyses were initially
reported in [1].
References
1. M. Usman, V. Muthukkumarsamy, X.-W. Wu, A resource-efﬁcient system for detection and
veriﬁcation of anomalies using mobile agents in wireless sensor networks. J. Netw. 9(12),
3427–3444 (2014b)
2. M. Usman, V. Muthukkumarsamy, X.-W. Wu, S. Khanum, Wireless smart home sensor net-
works: mobile agent based anomaly detection, in Proceedings of the 9th IEEE International
Conference on Ubiquitous Intelligence Computing and 9th International Conference on Auto-
nomic Trusted Computing (UIC/ATC), September 2012, pp. 322–329
3. A. Varga, The omnet++ discrete event simulation system, in Proceeding of the European
Simulation Multiconference (2001), p. 7
4. J. Polastre, R. Szewczyk, C. Sharp, D. Culler, The mote revolution: low power wireless sensor
network devices, in Proceeding of the Hot Chips (2004)
5. W.B. Hinzelman, A.P. Chandrakasan, H. Balakrishnan, An application-specic protocol archi-
tecture for wireless microsensor networks. IEEE Trans. Wirel. Commun. 1(4), 660–670 (2002)
6. J.C. Dagher, M.W. Marcellin, M.A. Neifeld, A theory for maximizing the lifetime of sensor
networks. IEEE Trans. Commun. 55(2), 323–332 (2007)
7. Part 15.4: Wireless Medium Access (MAC) and 2006 Physical Layer (PHY) specications for
low-rate wireless Personal Area Network (LR-WPANs), IEEE Std. 802.15.4
8. D.H. Stamatis, Six Sigma and Beyond: Statistics and Probability, vol. III (CRC Press, USA,
2002)
9. P. Levis, S. Madden, J. Polastre, R. Szewczyk, K. Whitehouse, A. Woo, D. Gay, J. Hill, M.
Welsh, E. Brewer, D. Culler, Tinyos: an operating system for sensor networks, in Ambient
Intelligence, ed. by W. Weber, J. Rabaey, E. Aarts (Springer, Berlin Heidelberg, 2005), pp.
115–148
10. D. Gay, P. Levis, R. Von Behren, M. Welsh, E. Brewer, D. Culler, The nesc language: a holistic
approach to networked embedded systems, in Proceedings of the ACM SIGPLAN Conference
on Programming Language Design and Implementation (2003), pp. 1–11
11. M. Ketel, Applying the mobile agent paradigm to distributed intrusion detection in wireless
sensor networks, in 40th Southeastern Symposium on System Theory, March 2008, pp. 74–78
12. S.I. Eludiora, O.O. Abiona, A.O. Oluwatope, S.A. Bello, M.L. Sanni, D.O. Ayanda, C.E.
Onime, E.R. Adagunodo, L.O. Kehinde. A distributed intrusion detection scheme for wireless
sensor networks, in IEEE International Conference on Electro/Information Technology (EIT),
May 2011, pp. 1–5
13. S. Khanum, M. Usman, A. Alwabel, Mobile agent based hierarchical intrusion detection system
in wireless sensor networks. Int. J. Comput. Sci. Issues (IJCSI) 9(3), 101–108 (2012)
14. D. Wagner, Resilient aggregation in sensor networks, in Proceedings of the 2nd ACM Workshop
on Security of Ad Hoc and Sensor Networks (2004), pp. 78–87
15. M. Usman, V. Muthukkumarsamy, X.-W. Wu, Speciﬁcation and validation of enhanced mobile
agent-enabled anomaly detection in resource constrained networks. J. Netw. 10(6), 353–368
(2015a)

Chapter 5
Cross-Layer Identiﬁcation and Transmission
of Agent Using Fuzzy Logic
5.1
Introduction
As highlighted in the preceding chapters, the motes and their transmitted data are sus-
ceptible to on-the-spot and in transmission abnormalities. An agent-enabled abnor-
mality identiﬁcation technique in such scenarios not only identiﬁes abnormalities
in a smart home, but also provides a mechanized service to conﬁrm the origin of
abnormalities prior to informing an administrator regarding the abnormalities. The
community of researchers has also studied other roles of agents in the abnormality
identiﬁcation applications for sensor networks [1–3]. These roles include arbitrary
specimencollectionofnetworktrafﬁcanddistributionofnetworkmanagementstatis-
tics. Previous studies, however, do not take into account the state of the connection
among interaction motes prior to the dispatch of agents. A low-quality state of com-
munication link might initiate faults in code or data of agent during communication
that might eventually disturb its allocated functionality.
The past agent-enabled abnormality identiﬁcation techniques have identiﬁed crisp
data boundaries to illustrate the motes behavior [1–3]. This may trigger needless
alarms in cases when received data values stay closer to the boundaries of the normal
proﬁle. For instance, take an example of the smart home situation, where a mote
is nominated to detect and transmit the apartment temperature. The usual conduct
of the mote is bounded with the [14 ◦C, 21 ◦C] closed interval. In this situation,
any value near to 14 ◦C or 21 ◦C, such as 13.9 ◦C or 21.2 ◦C, will trigger a needless
alarm for a user. Fuzzy logic may be helpful in such cases to set soft limits for
related choice making [4]. An abnormality identiﬁcation technique, that embodies
the conduct of motes merely using fuzzy logic, is incapable to deliberate randomness
of underlying data to deﬁne usual conduct of motes. Moreover, the existing agent-
enabled abnormality identiﬁcation techniques have also not taken into account the
state of the communication link for both the abnormality identiﬁcation and agent
transmission [1–3].
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7_5
109

110
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
To tackle the above-cited shortcomings, this chapter has presented an agent-
enabled cross-layer abnormality identiﬁcation technique. The presented technique
relies on statistical processes that take into account the stochastic inconsistency in
the data to identify three zones, viz. usual, tolerance, and abnormal, on a feature
space that is formed on cross-layer features. The usual zone describes usual con-
duct of a mote. The tolerance zone is identiﬁed to handle measurements that lie
near to the usual zone. The technique reduces trust count of a mote if a measure-
ment from mote stays inside the tolerance zone, and the administrator will merely be
informed when the level of trust decreases under an already deﬁned bound. The agent
is sent for on-the-spot conﬁrmation of the mote to conﬁrm the origin of abnormali-
ties, only if a measurement stays in the abnormal zone or trust value approaches the
minor limit. The lenient bounds between the abnormal and tolerance zones and fuzzy
logic-enabled rule-base are formulated to identify cross-layer abnormalities and to
efﬁciently send agents. The presented technique is applied on mote-based test bed,
and experiment outcomes show its capability to identify cross-layer abnormalities
having higher accuracy and increase the life of network.
5.2
Network Model
The network is supposed to be a digraph that is described as G = (V, E), here V
denotes vertices (i.e., motes) and E represents edges (i.e., interaction channels) in
smart home. Motes V = 3
i=1 Vi form smart home, here V1 is a top-level mote that
could be a desktop or a laptop; it acts as a network chief, and interconnected with
m resource-extensive cluster leader motes, i.e., V2 = v1, v2, ..., vm. The motes V3 =
m
j=1 V3 j form m clusters, here V3 j = v j, s j1, s j2, ..., s jk. The notation V3 j represents
the jth cluster inside a network, v j denotes the cluster leader mote in that particular
cluster, and k represents member motes within that cluster. The mote sets cardinality
should hold the relation |V1| ≤|V2| ≤|V3| to create a hierarchical smart home sensor
network, where V1, V2, and V3 are the upper, middle, and leaf (lower) level motes,
correspondingly.
The motes that belong to the mote types, namely V2 and V3 are IEEE 802.15.4-
compliant MICAz sensors. V2 kind of motes are resource-extensive, as they have
supplementary memory and possess continued supply of power. In contrast, the
motes, viz. V3 have minimal battery and memory assets. These motes are positioned
to sense their vicinity, save the observations and status of battery in memory for on
the spot conﬁrmation procedure, and then send those observations to the associated
V2 type mote. The V2 kind of motes identify cross-layer abnormalities on the obtained
packets and send agents for on-the-spot conﬁrmation of the mote after taking into
account the state of the communication link.

5.3 Cross-Layer Abnormality Identiﬁcation Module Architecture
111
5.3
Cross-Layer Abnormality Identiﬁcation Module
Architecture
Every V2 typemoteis armedwithacross-layer abnormalityidentiﬁcationmodulethat
identiﬁescross-layerabnormalitiesandalsodoesthejoboftransmissionofagentafter
taking into account the state of the communication channel. Cross-layer abnormality
identiﬁcationmodulehasthreeelements,viz.expert(cross-layer)system,controlling
unit, and mobile agent, as shown in Fig.5.1 [5].
Controlling unit works as a controller within intra-module and among inter-
module elements to support the abnormality identiﬁcation and agent transmission
procedures. Controlling unit gets packets from V3 motes and forwards those pack-
ets to an element, namely cross-layer expert system, that carries out the jobs of
abnormality identiﬁcation and agent transmission, and transmits back the outcome
of controlling unit. The typical sensed data, that is, without abnormality, is sent to
aggregation unit, that saves it for a predetermined amount of time before sending
it to V1 mote for the next necessary action. If the measurement is found abnormal,
controlling unit transmits an agent to perform on-the-spot conﬁrmation of V3 mote
to discover the origin of the abnormalities.
The agent employs received values of past packets to perform the job of
on-the-spot conﬁrmation on V3 mote. The agent then carries out a comparison among
saved data of the sensed readings and battery status with that of data carried by agent
to execute the job of on-the-spot conﬁrmation. If data is matched, then V3 mote is
assumed to be abnormality free. Else, the abnormal position of the mote is commu-
Cross-layer crisp observations
             from V3 nodes
Inference 
Scheme
tin
U
n
oita
g
er
g
g
A
Cross-Layer
Rule-Base
n
oita
cifiz
z
u
F
n
oita
cifiz
z
u
fe
D
Cross-layer expert system
Mobile
Agent
Controlling
Unit
Cross-layer anomaly detection module
Coordination 
with V2 nodes
To V1
node
To V3
nodes
Fig. 5.1 Cross-layer abnormality identiﬁcation module architecture:
c⃝2015 IEEE. Reprinted,
with permission, from Usman et al. [5]

112
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
nicated to the associated V2 mote. For more description of on-the-spot conﬁrmation
procedure, readers are referred to Sect.3.5.3.
A fuzzy scheme fuzziﬁes data of crisp nature into corresponding fuzzy values and
computes them by employing a rules set to get fuzzy nature of data [6]. Then fuzzy
data is converted back to get a single (crisp) outcome that initiates the already deﬁned
action execution. The expert system then gets cross-layer (crisp) features data from
coordinatorandfuzziﬁesdatabyemployingfunctions,namelymembershipfunctions
discussed in Sect.5.4.2. The fuzziﬁed data is then employed for the decision making
regarding agent transmission and cross-layer abnormality identiﬁcation, as illustrated
in Sect.5.4.3. Lastly, the unit, viz. defuzziﬁcation defuzziﬁes the output by using a
method, namely maximum, that is, by choosing the data value that has the highest
membership value.
5.4
The Proposed Scheme
This section ﬁrst discusses cross-layer feature set which is employed for abnormality
identiﬁcation and abnormality conﬁrmation agent transmission decision making.
This is followed by an elucidation of the regions computation method. Finally, the
initial arrangement of the cross-layer rule-base is elucidated in detail.
5.4.1
Cross-Layer Feature Set
The conduct of V3, that is, IEEE 802.15.4-acquiescent MICAz, mote is formalized
by features of mote and communication link. The values of the mote features are sent
by V3 motes to their associated V2 motes. Other features comprises of Battery Status
(BS) and Sensor Reading (SR). The SR might comprise of observations of motion,
temperature, and pressure detection sensors.
The state of communication channel is formalized on the basis of three commu-
nication link features, viz. Received Signal Strength Indicator (RSSI), Packet Error
Rate (PER), and Link Quality Indicator (LQI) for making decisions on agent trans-
mission and abnormality identiﬁcation. The communication link features’ values are
obtained by V2 mote from obtained data of V3 mote. The (MICAz) mote works on
2.4 GHZ radio frequency [7]. Its data rate is 250 Kbps, and range of adaptive trans-
mission power is −25 ∼0 dBm. The transceiver chip (CC2420 RF) calculates the
values of average correlation (CORR) and RSSI of every obtained data packet to
calculate the value of LQI feature. The CORR value provides the raw information of
communication link inside the [8, 9] closed interval, where 50 denotes the worst and
110 represents the best case values. This research has treated LQI = CORR to cal-
culate the value of LQI as suggested by Tang et al. [7]. This indicates that the motes
necessitate not to carry out any added calculation in order to calculate the RSSI and
LQI values to make agent transmission and abnormality identiﬁcation decisions.

5.4 The Proposed Scheme
113
The PER values are imperative for the accurate execution of on-the-spot conﬁr-
mation procedure, because the SR and BS values acquired from received packets are
employed by the conﬁrmation procedure. The ignorance of errors in obtained packet
may result in incorrect outcome of on the spot conﬁrmation procedure. Hence, only
those data packets that clear the 16-bit CRC are assumed to be collected [7]. The
value of PER is calculated as count of collected packets over entire sent packets.
5.4.2
Regions Computation
The restricted energy resource of motes requires cautious transmission of agents to
perform the function of on-the-spot conﬁrmation. Therefore, the cross-layer abnor-
mality identiﬁcation module divides the feature space of each feature of V3 motes
into three zones, viz. usual, tolerance, and abnormal. The usual zone sets the usual
conduct of motes. If values of features of collected packets are not inside the usual
zone, however, in its vicinity, then it might not be adequate to instantly send an agent
to perform on-the-spot conﬁrmation procedure because of energy expensive trans-
mission operation [10]. The abnormality identiﬁcation module treats this zone as a
tolerance zone and decreases the value of trust of V3 mote after getting the packets
having measurements in tolerance zone. An agent is sent when V2 mote loses trust on
V3 mote to some extent. Packets that have measurements outer than tolerance zone
are considered as abnormal by the abnormality identiﬁcation module, and an agent
is instantly sent to perform its allocated job. The procedure for zones computation is
illustrated below.
Formally, consider X be a Universe of Discourse (UoD), denoting feature space
of one V3 mote feature, here X = {N, T, A}. The (fuzzy) numbers, namely N, T , and
A represent usual, tolerance, and abnormal zones, correspondingly in X UoD. The
fuzzy number domains are outlined below.
N = [c∗, d∗]
T = [a∗, c∗]  [d∗, f ∗]
A = [−∞, b∗]  [e∗, +∞]
In the above deﬁnitions, a∗= a ± sl, b∗= b ± Al
r, c∗= c ± (s/√n)l, d∗=
d ± (s/√n)r, e∗= e ± Ar
r, and f ∗= f ± sr, and the parameters a∗to f ∗must
follow the association f ∗≥e∗≥d∗≥c∗≥b∗≥a∗to outline the fuzzy numbers
domains. The notation s denotes the standard deviation of n trial measurements that
are employed to calculate the zones. The symbol Ar represents the abnormal zone
limit. The superscripts r and l do not show the power, in fact these are right-side and
left-side parameters values on horizontal axis.The left parameter number is computed
by the subtraction operation, whereas the right parameter number is calculated by the
addition operation of the statistic (computed by a statistical process) from or to the
value of mean. The a to f variables are custom tuning variables that are employed
to tune parameter values to update the calculated zones. The adjustment variable
values are not dependent on the parameter values that are computed using statistical
methods.

114
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
The limit values of domains are computed by performing the statistical calcula-
tions on n sampled measurements. The usual zone that is outlined by N is calculated
using standard deviation of the mean value of n measurements, i.e., s/√n. Then the
left and right sides of the mean (x) along the x-axis are bounded by the values c∗=
c ± (s/√n)l and d∗= d ± (s/√n)r, respectively, to outline the usual conduct of V3
mote.
Correspondingly, the limits of the tolerance zone, outlined by T , are calculated by
computation of s on n measurements. On the basis of this calculation, the limits [d∗
= d ± (s/√n)r, f ∗= f ± sr] and [a∗= a ± sl, c∗= c ± (s/√n)l] outline the right
and left tolerance zones, correspondingly. Lastly, the abnormal region is computed
using the following relation.
Al
r = (s/√n)l + sl/2
(5.1)
Ar
r = (s/√n)r + sr/2
(5.2)
Above relations outline the upper limit abnormal zone and lower limit of right abnor-
mal zones, correspondingly. The limits [e∗= e ± Ar
r, +∞) and (−∞, b∗= b ± Al
r]
outline the right and left abnormal zones domains, correspondingly, on the basis of
above-cited calculations, as illustrated in Fig.5.2 [5].
The membership function for N can be computed as
MN(x) =
1,
c∗< x < d∗
0,
x ≤c∗, x ≤d∗
(5.3)
Similarly, the membership function for T is deﬁned as
MT (x) =
⎧
⎪⎪⎨
⎪⎪⎩
1,
x = c∗, x = d∗
(x −a∗)/(c∗−a∗),
a∗≤x ≤c∗
( f ∗−x)/( f ∗−d∗),
d∗≤x ≤f ∗
0,
x < a∗, x > f ∗, c∗< x < d∗
(5.4)
Fig. 5.2 Membership
functions: c⃝2015 IEEE.
Reprinted, with permission,
from Usman et al. [5]

5.4 The Proposed Scheme
115
Lastly, the membership function for A is calculated by
MA(x) =
⎧
⎪⎪⎨
⎪⎪⎩
1,
x < a∗, x > f ∗
(b∗−x)/(b∗−a∗),
a∗≤x ≤b∗
(x −e∗)/( f ∗−e∗),
e∗≤x ≤f ∗
0,
b∗< x < e∗
(5.5)
The N, T , and A fuzzy number membership functions are illustrated in Fig.5.2.
The N is based on membership function with crisp values. Note that this is a distinct
situation of membership functions. The design characteristics are selected to enable
the system to decrease trust count of V3 mote immediately after falling of cross-
layer measurements in zones computed by T , though values are nearer to frontier of
N. An example is provided below to show the calculation of parameter values and
subsequently outline the zones.
Example 1 Let, for instance, a situation where a V3 mote senses its vicinity and
intelligence the readings of temperature to corresponding V2 mote. Consider X be a
UoD for temperature readings, n = 51, x = 21.11, s = 3.47, and a to f = 0. This
infers s/√n = 0.47. Therefore, the usual zone can outlined as [c∗= c ± (s/√n)l =
19.62, d∗= d ± (s/√n)r = 20.58]. Next, the tolerance zones are demarked as [a∗=
a ± sl = 16.71, c∗= c ± (s/√n)l] = 19.62] and [d∗= d ± (s/√n)r = 20.58, f ∗=
f ± sr = 23.49]. Lastly, the abnormal zones are calculated as (−∞, b∗= b ± Al
r =
18.17] and [e∗= e ± Ar
r = 22.03, ∞). Tuning variable values (i.e., a to f ) are ﬁxed
as 0. However, an administrator can set numbers to recompute the calculated zones
in practice. Moreover, membership values could be allocated by employing relations
(5.3) to (5.5).
5.4.3
Cross-Layer Rule-Base
The system rule-base has cross-layer features’ rules that execute the obtained network
trafﬁc for decision making about agent transmission and abnormality identiﬁcation.
The rule-base is comprises of IF antecedent(s), THEN consequent(s) rules, here
antecedents are based on ﬁve input linguistic (i.e., cross-layer features) variables,
viz. Battery Status (BS), Sensor Reading (SR), Packet Error Rate (P E R), Received
Signal Strength Indicator (RSSI), and Link Quality Indicator (LQI). These vari-
ables are associated with a logical operator: AN D. Every input linguistic variable
comprises of three values, namely A, T , and N, in its term-set. It is important to
observe that the term-set scale may be adjusted according to the choice of user to
adjust the system performance.
Theresultant(i.e.,theoutputlinguisticvariablerepresentedby D)hasthreevalues,
viz. D1, D2, and D3, where D1 represents the outcome of the accumulated data for
situation where obtained data is usual, D2 decrements the value of trust, and ﬁnally,
D3 transmits the agent to carry out on-the-spot conﬁrmation. The D1, D2, and D3
decisions are based on triangular-shaped functions that are deﬁned by three values

116
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
Table 5.1 Cross-layer rule-base: c⃝2015 IEEE. Reprinted, with permission, from Usman et al. [5]
Rule no.
SR
BS
LQI
RSSI
PER
D
1
NSR
NBS
NLQI
NRSSI
NPE R
D1
2
TSR
NBS
NLQI
NRSSI
NPE R
D2
3
ASR
NBS
NLQI
NRSSI
NPE R
D3
4
NSR
TBS
NLQI
NRSSI
NPE R
D2
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
242
TSR
ABS
ALQI
ARSSI
APE R
D3
243
ASR
ABS
ALQI
ARSSI
APE R
D3
(tr, tm, tl), where tr, tm, and tl are the right, middle, and left values on horizontal
axis. The decision variable parameters have following values: D1 = (0, 0.2, 0.4), D2
= (0.3, 0.5, 0.7), and D3 = (0.6, 0.8, 1). A key design aspect of rule-base is rules
perform the D3 action in the case when merely solitary feature value is abnormal.
The initial rule syntax, as an example, is shown below.
(SR = NSR) ∧(BS = NBS) ∧(LQI = NLQI) ∧(RSSI = NRSSI) ∧(P E R =
NP E R) →D = D1
Conceptually,intheancestorsegmentoftheabove-citedrule,the NSR, NBS, NLQI,
NRSSI, and NP E R are the values possessed by input linguistic variables, namely SR,
BS, LQI, RSSI, and P E R, correspondingly. Consequent resultant segment facil-
itates accumulation of data. Input linguistic variables are 5in presented techniques
and every variable could possess 3 values. Therefore, entire rules, with every likely
combination, are 243. The generic rule-base structure is provided in Table5.1 [5].
5.5
Algorithm and Analysis
Thealgorithmexecuteson V2 motes,thatareresourcerich,afterreceivingthenetwork
trafﬁc from V3 motes. The algorithm comprises of two procedures, viz. Initialization
and Main. The former is accountable for the calculation of the zones. It is initially run
at the system deployment time and thereafter runs only if user aims to recalculate the
zones and rule-base update. It takes the sampled measurement values and value of
n variable as input to calculate x, (s/√n)l, (s/√n)r, sl, sr, Al
r, and Ar
r parameters.
The zone is then determined using these numbers, and membership functions are
computed by using relations (6.3) to (6.5). A user-set empirical rule-base is produced
next to running initial phase.
The later procedure carries out the tasks of agent transmission and abnormality
identiﬁcation by using the rule-base. The phase runs after obtaining each packet
value from V3 motes. In this stage, the abnormality identiﬁcation module fetches the

5.5 Algorithm and Analysis
117
crisp values of features, viz. BS, SR, RSSI, and LQI, from the obtained packets
and also calculates the P E R value. Then, these numbers are fuzziﬁed by employing
membership functions that are outlined in (6.3) to (6.5), and further executed by the
rule-base. Next, the process of defuzziﬁcation of (decision) variable is carried out by
employing the maximum method, to perform actions, viz. accumulation of reading,
decrease in the value of trust of V3 mote, or agent transmission. The procedure
pseudocode is described Algorithm 5.1 [5].
Algorithm 5.1 Cross-Layer Abnormality Identiﬁcation and Agent Transmission
Initialization Procedure
Require: n sampled measurements, n value
Ensure: Membership functions
1: for SR, BS, LQI, RSSI, P E R do
2:
Calculate: Eset = { E(1), E(2), E(3), E(4), E(5), E(6), E(7)} {//E(1) = x, E(2) = sl,
E(3) = sr, E(4) = (s/√n)l, E(5) = (s/√n)r E(6) = Al
r, E(7) = Ar
r}
3:
Est Reg(Eset) {//Compute zones for every feature}
4:
Construct Meb MN(x), MT (x), MA(x) {//Build membership functions of every feature}
5: end for
Main procedure
Require: Dat Pkt, RlBs {//data packet and cross-layer rule-base}
Ensure: Accumulate SR and save SR BS LQI, RSSI, P E R, NewTrust, or transmit M A
1: for each Dat Pkt do
2:
GetVal(SR, BS LQI, RSSI, P E R)
3:
Fuzzify: Fuzzset = { f uzz(SR), f uzz(BS), f uzz(LQI), f uzz(RSSI), f uzz(P E R)}
{//using (6.3) to (6.5) for every feature}
4:
for Fuzzset = { f uzz(SR), f uzz(BS), f uzz(LQI), f uzz(RSSI), f uzz(P E R)} do
5:
Eval RlBs(Fuzzset) {//Evaluate rule-base}
6:
end for
7:
Def uzzDes(D1, D2, D3) {// Defuzzify decision}
8:
if D == D1 then {//checking decision}
9:
Agg(SR)∧Str(SR, BS, LQI, RSSI, P E R) {//accumulate SR and save values for every
feature}
10:
else if D == D2 then {//checking decision}
11:
DecrTrst(Tr) {Decrease trust value}
12:
else
13:
Trnsmt M A {Send agent}
14:
end if
15: end for
5.5.1
Complexity Analysis
This part of the chapter provides the space and time complexities of the algorithm.
Theorem 5.1 (i) The space complexity for Procedure 1 of the algorithm is nl[i] and
(ii) Procedure is nl[ j].

118
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
Proof (i) V2 mote takes constant memory spaces C33 to C39 for storing E(1) to
E(7) values, respectively, for a cross-layer feature. Similarly, the V2 type mote takes
memory space C40 to store the values of an estimated region and C41 space to store
the values of a constructed membership function of the feature. Considering l[i] as
the total memory space taken by a single cross-layer feature to execute Phase 1 (i.e.,
Initialization Procedure) of Algorithm 5.1, the memory space taken by n features is
nl[i].
(ii) The V2 type mote takes constant space C42 to store the value of a cross-layer
feature to perform an abnormality identiﬁcation and abnormality conﬁrmation agent
transmission decision. The V2 type mote takes memory spaces C43, C44, C45 to store
a fuzziﬁed value, relevant rules in the rule-base, and a dufuzziﬁed decision of a cross-
layer feature. Let l[ ja] = C42, C31, C44, C45 be the memory space taken by a single
cross-layer feature, then the total memory space taken by n features is nl[ ja]. The V2
type mote further takes C2, C4, C5, and C6 memory spaces to store aggregate sensed
data, trust values, and code and data of abnormality conﬁrmation agent, respectively.
Let l[ jb] = C2, C4, C5, and C6. Thus, considering nl[ j] = l[ ja] + l[ jb], the memory
space taken by Phase 2 (i.e., Main procedure) of Algorithm 5.1 is nl[ j].
Theorem 5.2 The cost of computation of (i) Procedure 1 is O(n) and (ii) Procedure
2 is O(n2).
Proof (i) The procedure of calculating the statistical parameter values, zone compu-
tation, and calculation of membership functions consumes constant time for every
job for n features. Therefore, taking n(1 + 1 + 1) as overall complexity, the cost is
O(n).
(ii) Procedure 2 consumes constant time in order to carry out every jobs, viz.
receiving cross-layer feature values from obtained packets, defuzziﬁcation, fuzziﬁ-
cation, and decision making on n number of features jobs. Finally, time n consumed
by Procedure 2 to execute n rules. Therefore, the computation complexity is O(n2).
Observe that O(n2) represents a larger complexity than O(n) in the proof of
Theorem 5.1 due to the reason that the Procedure 2 involves the execution of rule-
base, that is a processing intensive task in comparison with other jobs within the
algorithm.
5.6
Formal Modeling and Analysis
The algorithmic speciﬁcations of the proposed cross-layer abnormality identiﬁcation
and abnormality conﬁrmation agent transmission algorithm are ﬁrst formally deﬁned
in this section. The functionality of the algorithm is then formally characterized and
analyzed. Cross-layer model: The uniﬁed Petri net model, (PNc), is a 5-tuple net:
PNc = (Pc, Tc, Fc, Wc, (Mc)0), where Pc = p42, p42, ..., p51 and Tc = t52, t53, ...,
t67 are non-empty, ﬁnite, and disjoint sets of places and transitions, respectively.
Fc = (p42, t52), (p42, t53), (p42, t54), (p42, t55), (p42, t56), (p42, t57), (p52, t43), (p53,

5.6 Formal Modeling and Analysis
119
t44), (p54, t45), (p55, t46), (p56, t4), (p57, t48), (p43, t58), (p44, t59), (p45, t60), (p46, t61),
(p47, t62), (p48, t63), (t58, p49), (t59, p49), (t60, p49), (t61, p49), (t62, p49), (t63, p49),
(p49, t64), (t64, p50), (p50, t65), (t65, p51), (p51, t66), (p51, t67). The weight for all arcs
is 1 except the weight of the arc (p50, t65) which is determined through the execution
of the function g6, that is, Wc((p50, t65) = g6. Finally, (Mc)0 = p42.
The above deﬁnition formally deﬁnes the cross-layer abnormality identiﬁcation
and abnormality conﬁrmation agent transmission method, and the corresponding
formal model is depicted in Fig.5.3. The reachability tree for Petri net model PNc
is elucidated in Appendix C. The place p42 possess solitary token while receiving a
data packet, Dat Pkt, from the V3 type mote, which enables transitions t52 to t57 to
ﬁre the token. The transitions t52 to t57 model the process of obtaining the cross-layer
feature values from obtained Dat Pkt. The ﬁring of the token from the place p42
yields one token in each of the places p43 to p48 and enables transitions t58 to t63
which model the fuzziﬁcation process of cross-layer features. The ﬁring of tokens
from the places p43 to p48 then yields six token at the place p49. The six tokens
merge into a single token, which ﬂows through the rest of the model to formulate the
workﬂow of the algorithm. The merged token in the place p49 enables the transition
t64 which denotes the execution of the rule-base. The ﬁne-grained mapping of the
Fig. 5.3 Conﬁguration panel GUI:
c⃝2015 IEEE. Reprinted, with permission, from Usman
et al. [5]

120
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
cross-layer rule-base is carried out in the Petri net model depicted in the dotted line
inset in Fig.5.3, where transitions t1
64 t243
64 represent rules in the rule-base.
The ﬁring of the token from the place p49 yields a token in the place p50 which
enables the transition t65, denoting the process of the defuzziﬁcation of the decision.
The ﬁring of the token from the place p50 is, however, determined by the execution
of the condition g6, which models the decision defuzziﬁcation process along with
the transition t65. The decision D1 or D2 yields single token into the ﬁnal place, that
is p51. In contrast, in the case of abnormal values of features, the outcome “0” of the
condition g6 will assign “0” weight to arc (p50, t65). This means the abnormal state
is not reachable in the cross-layer formal model. The condition g6 is shown below.
g6(x) =
1,
D = D1 or D2
0,
D = D3
(5.6)
On the basis of the above deﬁnition and discussion, the following results can be
derived.
Theorem 5.3 The PNc is 6-bounded.
Proof For all p ∈PNc, M(p) = 1. The ﬁring of the token from the place p42,
however, yields one token each in places p43 to p48. This means PNc has six tokens
at a time. Though those tokens merge at the place p49 to constitute the rest of the
workﬂow of the PNc, the full number of obtained tokens in PNc is 6. Thus, PNc is
6-bounded.
Theorem 5.4 Transitions in PNc are live at level 4 other than the t65 transition that
is provisionally live at 0 level.
Proof For all t ∈T , the liveness level is 4 other than t65, which is live at 0 level iff
the condition g6 output is 6 = 1. This implies that PNc goes into the deadlock state
only when abnormalities are found in the cross-layer features. This result is valid till
the weighted arc that are based on condition exists, that is (g6, t65), which inputs the
transition which models the defuzziﬁcation process after performing the cross-layer
abnormality identiﬁcation process.
5.7
Performance Evaluation
The performance is assessed with regards consumption of memory and energy, detec-
tion accuracy, and estimation of processing time.
The algorithms are programmed on two MICAz and solitary laptop mote-based
testbed,denotingaminimumfunctionalsmarthomeasPOC,thatis,proofofconcept.
A mote was positions as V3 mote that was answerable to sense its vicinity and
sending the readings of temperature to V2 mote. The V2 mote was accountable for
abnormality identiﬁcation, accumulation and then communication of accumulated

5.7 Performance Evaluation
121
data to V1 mote, and transmission of agent to V3 mote for on-the-spot conﬁrmation
procedure. An application was programmed to control the abnormality identiﬁcation
system.
The application has ﬁve working layers. The lower most layer (i.e., layer 5) carries
out main tasks such as vicinity temperature sensing and on-the-spot conﬁrmation on
V3 mote, the agent transmission and abnormality identiﬁcation on V2 mote, and zones
calculation and zone update on V1 mote. The next layer, that is, layer 4 takes care of
storage job through the network. On V3 mote, it saved status of battery and sensed
readings, that are employed by agent for on-the-spot conﬁrmation procedure. Layer
4 also preserves the accumulated data, rule-base, and trust count on V2 mote. In the
end, on V1 mote, the abnormality identiﬁcation outcomes that are sent by V2 mote
and an update regarding mote identities are also saved by layer 4.
Layer 3 handles communication interfaces of motes and carries out the following
important jobs: (i) the communication of sensor reading from V3 to V2 motes, (ii) the
abnormality identiﬁcation message and accumulated data communication from V2
to V1 motes, (iii) the communication of agents for on-the-spot conﬁrmation from V2
to V3 motes, and (iv) ﬁnally, the communication of on-the-spot conﬁrmation result
from V3 to V2 motes. The upper layer, that is, layer 2 fetches the data from collected
packets and forwards them to the next upper layer, that is, layer 5, to carry out its
designated tasks. Layer 2 also generates data packets and hands over them to next
upper layer, that is, layer 3 for packet transmission. In the end, the topmost layer,
that is, layer 1 offers GUIs to handle and supervise the abnormality identiﬁcation
system.
Software application has two modules, viz. conﬁguration and report panels.
Observe that because of the modular method, the accessible choices of parameter
selection on module graphical user interfaces (GUIs) could be changed or new mod-
ules may be integrated according to user choice. Conﬁguration panel GUI is based
on three constituents, viz. (i) mote conﬁguration, (ii) regions (zones) computation,
and (iii) rules deﬁnition. Initial constituent is accountable for identifying class of
motes, namely pressure, temperature, and motion, and also setting motes’ identities
and their locations in smart home. The constituent provides a facility to increment or
decrement the trust level for a certain mote. It empowers users to look a house plan
to identify the position of motes in the network. The second constituent facilitates
user to calculate or tune the parameter values to deﬁne zones. The third and ﬁnal
constituent provides a facility to set fuzzy rules. GUI module, namely conﬁguration
panel, is depicted in Fig.5.3 [5].
Report Panel module offers a service to retrieve an abnormalities report. The
report could be produced in regard to the network component identity, identity of
room, and type of mote for particular duration of time and date. Three abnormality
observations, in the inverse sequential order, are shown inside the window of report
panel. Report may be watched through Detailed View option button. Report panel
GUI is depicted in Fig.5.4 [5].
The network trafﬁc of 1000 rounds transmitted from V3 to V2 mote was sampled
to calculate zones and conﬁguring expert systems for experiments. The BS, LQI,
SR, and RSSI feature values of every packet were stored, whereas the PER values

122
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
Fig. 5.4 Report panel GUI: c⃝2015 IEEE. Reprinted, with permission, from Usman et al. [5]
were calculated for each ﬁve packets. The measurements of link and mote features
are shown in Figs.5.5 and 5.6 [5], correspondingly, and statistics of measurements
are plotted in Table5.2 [5].
The n parameter value was ﬁxed as 50. As a result, the values shown in Table5.3
[5] were acquired to set the zones for trials. The 10% arbitrarily produced abnormal
trafﬁc was integrated in data. Rule-base was formed by employing conﬁguration
panel. The decrease in the trust count was ﬁxed as 0.33 for measurements in the
tolerance zone. The agent was communicated in only those cases where the value of
trust was 0. The value of trust was reset as 1 every time it touched 0 for the sake of
trials. In practice, though, the algorithm must transmit an alarm as early as the value
of trust value will touch the lower limit.
The trials were also carried out with a well-known algorithm, namely decision
tree to offer the baseline results. The decision tree detection accuracies were 98.8%
for SR, 98.5% for BS, 98.7% for LQI, 98.4% for RSSI, and 98.7% for P E R.
In contrast, the accuracy was stable at around 100% for the presented algorithms.
These results are depicted in Fig.5.7 [5]. The presented algorithm, however, needs
the domain knowledge to adequately deﬁne rule-base to identify abnormalities with
higher accuracy.

5.7 Performance Evaluation
123
0
10
20
30
40
50
200
400
600
800
1000
Temperature (oC)
Iterations
45
50
55
60
65
200
400
600
800
1000
Energy consumption (μJ)
Iterations
Fig. 5.5 Mote features: c⃝2015 IEEE. Reprinted, with permission, from Usman et al. [5]
-85
-80
-75
-70
-65
200
400
600
800
1000
RSSI (dBm)
Iterations
90
95
100
105
110
115
120
200
400
600
800
1000
LQI
Iterations
-0.02
-0.01
0
0.01
0.02
40
80
120
160
200
PER
Iterations
Fig. 5.6 Features of link: c⃝2015 IEEE. Reprinted, with permission, from Usman et al. [5]

124
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
Table 5.2 Sampled cross-layer data statistics: c⃝2015 IEEE. Reprinted, with permission, from
Usman et al. [5]
Feature category
Feature
Mean
Standard deviation
mote
SR
20.08
1.43
mote
BS
53.70
0.50
Link
RSSI
−76.65
0.33
Link
LQI
106.75
1.28
Link
P E R
0.0033
0.001
Table 5.3 Cross-layer expert system parameters: c⃝2015 IEEE. Reprinted, with permission, from
Usman et al. [5]
Features
a∗
b∗
c∗
d∗
e∗
f ∗
SR
18.65
19.26
19.88
20.28
20.90
21.51
BS
53.20
53.41
53.63
53.77
53.99
54.20
RSSI
−76.98
−76.83
−76.70
−76.60
−76.46
−76.32
LQI
105.47
106.02
106.57
106.93
107.48
108.03
P E R
0.0020
0.0024
0.0029
0.0031
0.0036
0.0040
Fig. 5.7 Detection
accuracy: c⃝2015 IEEE.
Reprinted, with permission,
from Usman et al. [5]
96
98
100
102
104
SR
BS
PER
LQI
RSSI
Detection accuracy (%)
Cross-layer features
Proposed scheme
Decision tree
The trials were conducted by using cross-layer technique (i.e., the presented tech-
nique) and by without using cross-layer technique (i.e., the prevailing techniques) for
the consumption of energy estimation by agent transmission procedure [1–3]. For the
existing techniques (i.e., without taking into account the state of the communication
for the decision of agent transmission), the expenditure of energy for the transmission
of agent was among 3764.32 J for 200 to 18821.60 J for 1000 packets. In contrast,
for the presented technique case, the dissipation of energy was among 1613.28J for
200 to 10217.44J for 1000 packets, as given in Fig.5.8 [5]. The outcomes of trials
show the presented technique could save 42.85 to 54.29% J energy in comparison to
prevalent techniques that do not take into account state of communication channel
prior to agents dispatch.

5.7 Performance Evaluation
125
Fig. 5.8 Consumption of
energy: c⃝2015 IEEE.
Reprinted, with permission,
from Usman et al. [5]
0
5000
10000
15000
20000
200
400
600
800
1000
Energy consumption (μJ)
Data packets
Proposed scheme
Existing schemes
Table 5.4 Memory, processing, time, and consumption of energy outcomes: c⃝2015 IEEE.
Reprinted, with permission, from Usman et al. [5]
Procedure
RAM (bytes)
ROM (bytes)
Processing time
(ms)
Consumption of
energy(µJ)
Phase 1
81
4013
12.73
113.12
Phase 2
1439
73303
282.86
2554.76
The outcomes for implementation of algorithm for usage of memory, consumption
of energy, and processing time are summarized in Table5.4. These outcomes yield
two ﬁndings: (i) the procedure is adequate for constrained resource motes and (ii)
the outcomes of implementation are in line with the theoretical outcomes described
in Sect.5.5.1.
To further establish the effectiveness of the proposed abnormality identiﬁcation
and conﬁrmation system, the results have been compared with the two approaches
[11]. The ﬁrst approach employs linear programming-based hyperellipsoidal formu-
lation. The second approach, on the contrary, employs hypersphere to capture the
usual behavior in higher dimensional space. The results of CESVM and QSSVM
show that these approaches can achieve the best detection performance of 99.32 and
80%, respectively. In contrast, the detection accuracy of our proposed scheme was
steady at 100%.
5.8
Discussion
The main points from the experiments are as follows. Firstly, the domain expertise is
needed to adequately setup the abnormality identiﬁcation system. A simple training
or a user manual may be required to enable users to operate the developed application
software in real world settings. The user can then manage the performance of the
system using conﬁguration and report panels.

126
5
Cross-Layer Identiﬁcation and Transmission of Agent Using Fuzzy Logic
The technique can discover cross-layer abnormalities caused in features, namely
SR, BY, LQI, RSSI, and P E R with high accuracy. The technique employs statis-
tical procedures to deﬁne abnormal, tolerated, and usual regions using fuzzy logic
to discover cross-layer abnormalities and optimize abnormality conﬁrmation agent
transmission. This approach has resulted in high-detection accuracy (i.e., up to
100%), and it can save 54.29–42.85% energy resources in comparison to the other
techniques [1–3] that do not take into account the state of the communication link
for the dispatch of abnormality conﬁrmation agent.
It is pertinent to observe that the non-consideration of the poor communication
link-state may result in non-reliable transmission of the abnormality identiﬁcation
agent. In such situations, abnormality identiﬁcation system must be able to use other
measures for instance updating a user regarding abnormalities. The related schemes
have not considered this key factor [1–3]. On the contrary, the scheme presented in
this chapter empowers the cross-layer abnormality identiﬁcation module to facili-
tate other jobs like updating the user regarding abnormalities in the situations when
abnormality conﬁrmation agent cannot be reliably transmitted due to poor commu-
nication link-state. This advocates that the proposed scheme offers more reliable and
energy efﬁcient service to transmit abnormality conﬁrmation agents to carry out their
designated task.
5.9
Summary
Arobust abnormalityidentiﬁcationsystemis indispensablefor smart homes toupdate
users in a timely way regarding abnormalities occur due to errors in transmission,
attacks, or mote faults. This chapter has discussed the design and implementation
rationales of an innovative cross-layer abnormality identiﬁcation technique for smart
homes in order to address the ﬁrst and third research questions and also to satisfy
the corresponding ﬁrst and third requirements. The technique uses simple but effec-
tive statistical processes with fuzzy logic to identify cross-layer abnormalities. The
technique also provides the service to dispatch abnormality conﬁrmation agents after
taking into account the state of the communication link.
The technique has been implemented on real mote-based test bed. The detec-
tion accuracy results of the proposed scheme have been compared with crisp-logic
classiﬁcation algorithm. The outcomes show the detection accuracy of the proposed
scheme which was steady at 100%. In contrast, the detection accuracies of the crisp-
logic case were 98.8% for SR, 98.5% for BY, 98.7% for LQI, 98.4% for RSSI, and
98.7% for P E R. The results also show capability of the proposed scheme to save
the energy consumed by the dispatch of the abnormality conﬁrmation agent in poor
state of the communication link situations as high as 42.85 to 54.29% in contrast
to the other techniques. A software application has been programmed to control the
abnormality identiﬁcation system in smart home that allows users to improve the
functioning of the technique.

5.10 Bibliographic Notes
127
5.10
Bibliographic Notes
The method for cross-layer abnormality identiﬁcation and transmission of agent
transmission optimization using fuzzy logic was presented in [5]. The implementa-
tion and theoretical analysis results were reported in [5].
References
1. M. Ketel, Applying the mobile agent paradigm to distributed intrusion detection in wireless
sensor networks, in 40th Southeastern Symposium on System Theory, pp. 74–78, March 2008
2. M. Pugliese, A. Giani, F. Santucci, Weak process models for attack detection in a clustered
sensor network using mobile agents, in Sensor Systems and Software, vol. 24, ed. by S. Hailes,
S. Sicari, G. Roussos. Lecture Notes of the Institute for Computer Sciences, Social Informatics
and Telecommunications Engineering, (Springer, Berlin, 2010), pp. 33–50
3. S. Khanum, M. Usman, A. Alwabel, Mobile agent based hierarchical intrusion detection system
in wireless sensor networks. Int. J. Comput. Sci. Issues (IJCSI) 9(3), 101–108 (2012)
4. K. Kapitanova, S.H. Son, K.D. Kang, Using fuzzy logic for robust event detection in wireless
sensor networks. Ad Hoc Netw. 10(4), 709–722 (2012)
5. M. Usman, V. Muthukkumarsamy, X.-W. Wu, Mobile agent-based cross-layer anomaly detec-
tion in smart home sensor networks using fuzzy logic. IEEE Trans. Consum. Electron. 61(2),
197–205, 2015b
6. R. Alsaqour, M. Abdelhaq, R. Saeed, M. Uddin, O. Alsukour, M. Al-Hubaishi, M. Alahdal,
Dynamic packet beaconing for gpsr mobile ad hoc position-based routing protocol using fuzzy
logic. J. Netw. Comput. Appl. 47, 32 (2015)
7. L. Tang, K.C. Wang, F. Huang, Y. Gu, Channel characterization and link quality assessment of
ieee 802.15.4-compliant radio for factory environments. IEEE Trans. Ind. Inform. 3(2), 99–110
(2007)
8. D.-I. Curiac, O. Banias, F. Dragan, C. Volosencu, O. Dranga, Malicious node detection in
wireless sensor networks using an autoregression technique, in Third International Conference
on Networking and Services, pp. 83–83, June 2007
9. S. Nanz, C. Hankin, A framework for security analysis of mobile wireless networks. Theor.
Comput. Sci. 367(1–2), 203–227 (2006)
10. M. Moshtaghi, C. Leckie, S. Karunasekera, S. Rajasegarar, An adaptive elliptical anomaly
detection model for wireless sensor networks. Comput. Netw. 64, 195–207, 2014a
11. S. Rajasegarar, C. Leckie, J.C. Bezdek, M. Palaniswami, Centered hyperspherical and hyper-
ellipsoidal one-class support vector machines for anomaly detection in sensor networks. IEEE
Trans. Inf. Forensics Secur. 5(3), 518–533 (2010)

Chapter 6
Conclusions
The number of state-of-the-art sensor network applications has been increasing with
the passage of time due to advancements in the broader ﬁeld of the information tech-
nology. This has increased the demand of the design and development of innovative
services to cater for the unique requirements of the sensor network applications. This
book has elucidated a novel service for on-the-spot conﬁrmation of suspicious mali-
cious motes to discover the origin of abnormalities in sensor network applications,
for example, smart home and built infrastructure monitoring. The identiﬁcation of the
source of abnormalities is imperative in order to timely and effectively mitigate them.
The internal structure and details of the abnormality identiﬁcation and conﬁrmation
system, along with a number of related methods for the abnormality identiﬁcation
and agent transmission optimization, have been introduced throughout this text.
In order to conclude the discussion on the work presented in this text, this chapter
ﬁrstoutlinestheworkpresentedinthisbook.Thelimitationsofthediscussedmethods
and corresponding precautionary measures are discussed next. Finally, a discussion
on the possible avenues for future research is provided.
6.1
Book Outlook
To offer a big picture of the abnormality identiﬁcation schemes in the literature, a
taxonomy has been formulated in Chap.2, refer to Sects.2.1 and 2.2 [1]. This process
has not only provided the big picture of the literature, but also helped in the identiﬁ-
cation of the problem domain. More speciﬁcally, related literature was analyzed and
broadly classiﬁed into statistical, artiﬁcial intelligence and agent-enabled, machine
learning, and other schemes. The related literature of the agents security and formal
modeling and analysis has also been reviewed to set the research context.
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7_6
129

130
6
Conclusions
An agent-enabled abnormality identiﬁcation and conﬁrmation system, with its
internal architecture and algorithmic speciﬁcations, has been introduced in Chap.3,
refer to Sects.3.4 and 3.5 [5–7]. The algorithmic speciﬁcations include features col-
lection by cluster member mote, abnormality identiﬁcation by cluster leader mote,
anomalous mote conﬁrmation, and update of status on the leader mote and BS. The
system has been designed to not only detect abnormalities which occur due to the
erroneous values of the synchronized resource management technique-based features
and temporal abnormalities that are occurred due to the arrival delay of measure-
ments, but also to perform on-the-spot conﬁrmation of the member motes using the
information accumulated by the synchronized resource management technique.
The on-the-spot conﬁrmation procedure is, however, time-sensitive. To examine
the temporal conduct of the system, the formalization of individual functionalities has
been, therefore, performed using formalism of Petri nets in Chap.3, refer to Sects.3.6,
3.7, and 3.8 [2]. The bottom-up amalgamation of the individual net components (i.e.,
each algorithmic speciﬁcation) was then performed to make a uniﬁed model that
embodies the conduct characteristics like liveness and boundedness, and also the
global workﬂow of the system. The analysis has shown that the design of the system
is deadlock free and correct in order to complete its designated tasks, as there was
no deadlock state in the model, which can halt the system, and the tokens were
able to successfully reach the terminal states, denoting the correctness of the model.
The standard model was prolonged into an equivalent high category Generalized
Stochastic model to characterize and examine the time-based conduct of the system
in an extremely non-deterministic interaction environment of the sensor networks.
The Generalized Stochastic Petri Net-based conduct of the system was then endorsed
viaexperimentsperformedonatestbedcomposedofresource-limitedMICAzmotes.
A number of case scenarios have been experimented to systematically study the
time-based conduct of the system. The outcomes have demonstrated that the system
consumes 64.36% more time to carry out the job of on-the-spot conﬁrmation when
system is also conﬁgured for the identiﬁcation and conﬁrmation of the abnormalities
occur due to attacks, dissimilar to when it is conﬁgured only for the abnormalities
occur due to errors or faults. The additional time is taken due to the overhead involved
to secure the abnormality conﬁrmation agent by employing the water marking tech-
nique. The impact of the change in the distance on the temporal behavior of the
system has also been studied. The results have indicated that the change in the close
proximity has minimum effect on the time-based conduct of the system. This shows
that the system is largely adequate for sensor applications, viz. smart home and built
infrastructure monitoring where motes are typically conﬁgured in close vicinity from
each other.
The results have also indicated that the system is more adequate to periodically
data sending applications as compared to continuous data sending applications, as
continuous data sending applications store more number of observations for on the
spot conﬁrmation procedure. As a consequence, the abnormality conﬁrmation agent
requires more resources and time to carry out the job of on-the-spot conﬁrmation
in continuously data sending applications as compared to periodically data sending
applications.

6.1 Book Outlook
131
A method for detecting ﬁrst-order abnormalities in the synchronized resource
management technique-based observations has been elucidated in Chap.4, refer to
Sect.4.2.1 [2]. The method has exploited statistical association among features of
normal proﬁle to identify numerous kinds of abnormalities such as occurred due to
on-the-spot attacks or faults, exhaustion of resource threats, faulty motes, attacks on
the resources of motes, and denial-of-sleep attacks. The results have shown that the
method can identify ﬁrst-order abnormalities with a detection accuracy of between
97.80 and 99.20%. It has also been observed that the method can detect more types
of abnormalities which occur due to denial-of-sleep threat, exhaustion of resource
threat, and mote faults with O(n) detection complexity, unlike related techniques
presented by Eludiora and colleagues [3] and Khanum and colleagues [4] which can
detect DoS attack and sensor reading abnormalities with the detection complexity of
O(n2) and O(n), respectively.
Two methods for the optimization of dispatch of agents were also elucidated in
Chap.4, refer to Sects.4.2.2 and 4.2.3, to extend network lifetime. The ﬁrst method,
namely two-sigma, employed two standard deviations in order to outline curtailment
zones on probability distributions of the normal proﬁle features to optimize transmis-
sion of agents [5, 6]. On the other hand, the second method, namely weighted sum
optimization, incorporated the previous and present conducts of the mote to optimize
dispatch of agent procedure to enhance the network lifetime [7]. The experiment
outcomes have shown that the 2-sigma and weighted sum abnormality conﬁrma-
tion agent transmission optimization methods reduced the abnormality conﬁrmation
agent transmission overhead by as much as 29% −34% and 42% −52%, respec-
tively, unlike related schemes [3, 4, 8] which have overlooked the optimization of
abnormality conﬁrmation agent dispatch.
A fuzzy logic-oriented cross-layer abnormality identiﬁcation and agent transmis-
sion optimization scheme has been elucidated in Chap.5, refer to Sects.5.3, 5.4, and
5.5 [9]. The main characteristics of the method are as follows: (i) a zone calcula-
tion technique, on the basis of statistical processes, was presented to deﬁne multiple
zones for making decisions regarding abnormality identiﬁcation and agent dispatch,
(ii) a fuzzy logic-oriented rule-base was formulated and an associated method was
studied to identify the cross-layer abnormalities and dispatch an agent after taking
into account the state of communication channel, and (iii) ﬁnally, the techniques
were deployed on mote-based test bed with a developed application to assess its
performance in smart home.
The outcomes have indicated the detection accuracy of the proposed scheme was
steady at 100%. On the contrary, the identiﬁcation accuracies of crisp logic, a baseline
situation, were 98.8% for SR, 98.5% for BY, 98.7% for LQI, 98.4% for RSSI, and
98.7% for P E R. The experiments have also shown the ability of the technique to
save energy consumed by the abnormality conﬁrmation agent dispatch in poor state
situations of communication link as high as 42.85 to 54.29% in contrast to the related
schemes [4, 8, 10], that do not take into account the state of the communication link
for the dispatch of abnormality conﬁrmation agent.
In summary, this book has elucidated an agent-enabled abnormality identiﬁcation
and conﬁrmation system for sensor networks. The system, in addition to detecting

132
6
Conclusions
different types of abnormalities, offers a novel service to discover the origin of
abnormalities after their identiﬁcation. The temporal behavior of the system has
been thoroughly investigated to establish its aptness for applications, namely smart
home sensor network and built infrastructure monitoring. A number of methods,
namely two-sigma and weighted sum optimization, have been designed and analyzed
to effectively transmit agents in order to increase the network longevity. An agent-
enabled cross-layer abnormality identiﬁcation and conﬁrmation scheme has been
elucidated, which is capable to identify cross-layer abnormalities and effectively
dispatch agent after taking into account the state of communication link.
6.2
Limitations
The agent-enabled abnormality identiﬁcation and conﬁrmation system and related
methods, which are presented in this text, can detect different kinds of abnormalities
with high accuracy, optimize agent transmission using a number of methods, and
perform on-the-spot diagnosis of motes to identify the origin of abnormalities. The
system and associated methods, however, have a few limitations which may affect
their performance in certain situations. In most of the situations, some precautionary
measurescanbetakentoeitherentirelynegateorminimizethateffect.Thelimitations
with corresponding precautionary measures are discussed below.
The system is designed for cluster-based sensor networks. The abnormality iden-
tiﬁcation module is designed to be conﬁgured on resource-redundant cluster leader
motes. At the time of abnormality identiﬁcation application deployment, the system
administrator must consider the size of clusters in the network. Cluster leader motes
should have enough memory to accommodate different normal proﬁles of cluster
member motes. In some applications, such as smart home sensor networks, different
sensors with similar roles in the network can be grouped together to have a single
normal proﬁle to optimize consumption of memory.
The transmission of agents in a network can cause the communication bottleneck
at cluster leader motes. This can change the temporal behavior of on-the-spot conﬁr-
mation procedure. It is, therefore, recommended that the system administrator must
perform a worst case temporal behavior analysis at the time of abnormality identiﬁ-
cation application deployment. That is, transmit agents to all cluster member sensor
motes and then compute the time taken from the agent transmissions to on-the-spot
conﬁrmation results arrival at cluster leader motes. The computed time then must be
integrated into on-the-spot conﬁrmation decision making process to accommodate
the presence of a particular number of motes at certain positions within a cluster.
Another potential limitation of the elucidated abnormality identiﬁcation and con-
ﬁrmation system, like other cluster-based applications, is the possibility of the failure
of a cluster leader mote. It is, therefore, imperative that the cluster leader mote must
share the abnormality identiﬁcation and conﬁrmation related information with other

6.2 Limitations
133
trusted motes to avoid any such failure. The frequency of the information sharing,
however, must be carefully set by considering the available memory and energy
resources of the sensor network.
6.3
Further Research
The work carried out in this study can be extended in a number of directions.
On-the-spot conﬁrmation using multihop agent itinerary: This study has focused
on a single mote agent itinerary model, that is, a agent can only traverse from a cluster
leader mote to a cluster member mote and vice versa. Although single mote agent
itinerary is suitable for cluster-based applications, viz. smart home and built infras-
tructure monitoring sensor networks, it may not be suitable for large sensor networks.
The new algorithms and protocols, therefore, could be designed to effectively per-
form on-the-spot conﬁrmation of motes which are away from the base station. The
energy consumption by the process of the agent transmission over a multihop link
must be carefully analyzed while designing new algorithms.
Higher-order abnormality identiﬁcation: This study has considered abnormali-
ties in the synchronized resource management technique-based individual features,
and their ﬁrst-order joins to detect abnormalities caused by erroneous values of fea-
tures, mote faults and attacks, resource exhaustion attacks, attacks on the resources of
motes, and denial-of-sleep attacks. Another possible extension could be the exploita-
tion of high-order joins. This may result in detection of more complex and different
natures of abnormalities. The system designer, however, must consider the suitability
of the computational complexity of the detection mechanism for low resource sensor
networks while designing a high-order joins algorithm.
Contextual and spatiotemporal abnormality identiﬁcation: Another interesting
future work direction could be the construction of different normal proﬁles for mul-
tiple kinds of motes within a sensor network. For instance, in a smart home, different
normal devices in regards to their role and hardware capability should have different
normal proﬁles. Not only the contextual information of sensors, but also the spa-
tiotemporal correlation (if any) can be integrated in the normal proﬁle of motes for
the robust abnormality identiﬁcation. The resultant abnormality identiﬁcation mech-
anism, however, should satisfy the hardware constraints of multiple sensors within
the network.
Mobile sensor networks and cyber-physical systems: The feasibility of utilizing
elucidated abnormality identiﬁcation and on-the-spot conﬁrmation system for mobile
sensor networks and cyber-physical systems can also be investigated as a future
work. An interesting research direction could be prediction of itinerary of an agent

134
6
Conclusions
in a mobile wireless sensor network by considering the past movement of motes
within the network. Similarly, the stochastic model of the system may be extended
to cyber-physical systems to verify the aptness of the system.
References
1. M. Usman, V. Muthukkumarsamy, X.-W. Wu, S. Khanum, Anomaly Detection in Wireless
Sensor Network: Challenges and Future Trends (Auerbach publications Taylor and Francis
Group, USA, in security for multihop wireless networks edition, 2014)
2. M. Usman, V. Muthukkumarsamy, X.-W. Wu, Speciﬁcation and validation of enhanced mobile
agent-enabled anomaly detection in resource constrained networks. J. Netw. 10(6), 353–368
(2015)
3. S.I. Eludiora, O.O. Abiona, A.O. Oluwatope, S.A. Bello, M.L. Sanni, D.O. Ayanda, C.E.
Onime, E.R. Adagunodo, L.O. Kehinde, A distributed intrusion detection scheme for wireless
sensor networks, in IEEE International Conference on Electro/Information Technology (EIT)
(2011), pp. 1–5
4. S. Khanum, M. Usman, A. Alwabel, Mobile agent based hierarchical intrusion detection system
in wireless sensor networks. Int. J. Comput. Sci. Issues (IJCSI) 9(3), 101–108 (2012)
5. M. Usman, V. Muthukkumarsamy, X.W. Wu, S. Khanum, Wireless smart home sensor net-
works: mobile agent based anomaly detection, in Proceedings of the 9th IEEE International
Conference on Ubiquitous Intelligence Computing and 9th International Conference on Auto-
nomic Trusted Computing (UIC/ATC) (2012), pp. 322–329
6. M. Usman, Agent-enabled anomaly detection in resource constrained wireless sensor networks,
in Proceedings of the 15th IEEE International Symposium on A World of Wireless, Mobile and
Multimedia Networks (WoWMoM) (2014), pp. 1–2
7. M. Usman, V. Muthukkumarsamy, X.-W. Wu, A resource-efﬁcient system for detection and
veriﬁcation of anomalies using mobile agents in wireless sensor networks. J. Netw. 9(12),
3427–3444 (2014)
8. M. Ketel, Applying the mobile agent paradigm to distributed intrusion detection in wireless
sensor networks, in 40th Southeastern Symposium on System Theory (2008), pp. 74–78
9. M. Usman, V. Muthukkumarsamy, X.-W. Wu, Mobile agent-based cross-layer anomaly detec-
tion in smart home sensor networks using fuzzy logic. IEEE Trans. Consum. Electron. 61(2),
197–205 (2015)
10. M. Pugliese, A. Giani, F. Santucci, Weak process models for attack detection in a clustered
sensor network using mobile agents, in Sensor Systems and Software, vol. 24, Lecture Notes of
the Institute for Computer Sciences, Social Informatics and Telecommunications Engineering,
ed. by S. Hailes, S. Sicari, G. Roussos (Springer, Heidelberg, 2010), pp. 33–50

Appendix A
Reachability Trees
The reachability trees for the Petri net models, namely uniﬁed formal model (refer to
Chap.4, Sect.4.3) and cross-layer model (refer to Chap.5, Sect.5.6), are elucidated
in this appendix. FigureA.1 depicts the reachability tree for the uniﬁed Petri net
model, PNu. The Petri net model PNu executes the ﬁrst-order anomaly detection
by the cluster leader nodes through the reachable markings M62[t24, t25, t26, t27, t28⟩

M63 and M62[t24, t25, t26, t27, t28⟩
M64, where
M(·) and
M(·) denote the non-terminal
and terminal states, respectively. The non-terminal state denotes the state where the
cluster leader node invokes a relevant algorithm for the anomaly veriﬁcation agent
transmission optimization. The terminal state, on the other hand, denotes the state
where the cluster leader node aggregates the sensed data.
The Petri net model PNu then executes the 2-sigma anomaly veriﬁcation agent
transmission optimization algorithm through the markings M62[t24, t25, t26, t27, t28⟩
M63 [t31⟩M66 [t32⟩
M68, M62[t24, t25, t26, t27, t28⟩M63 [t31⟩M66 [t32⟩M69 [t34⟩
M72,
and M62[t24, t25, t26, t27, t28⟩M63 [t31⟩M66 [t32⟩M69 [t34⟩M73 [t37⟩
M76. The state

M68 denotes the normal behavior of msnq,
M72 represents the state of checking the
trust value of the cluster member node, and 
M76 shows the state where the cluster
leader node transmits the anomaly veriﬁcation agent and anomaly alarm to the cluster
member node and the base station, respectively.
Alternatively, the Petri net model PNu executes the weighted-sum optimization
algorithm through the markings M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67
[t41⟩M70 [t46⟩
M82,M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67 [t41⟩M70 [t46⟩
M83 [t51⟩
M64, M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67 [t41⟩M71 [t42⟩
M74 [t46⟩
M82, M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67 [t41⟩M71 [t42⟩M74
[t46⟩M83 [t51⟩
M64, M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67 [t41⟩M71 [t42⟩
M75 [t43⟩M77 [t46⟩
M82, M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67 [t41⟩M71
[t42⟩M75 [t43⟩M77 [t46⟩M83 [t51⟩
M64, M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩
M67 [t41⟩M71 [t42⟩M75 [t43⟩M78 [t44⟩M79 [t46⟩
M82, M62 [t24, t25, t26, t27, t28⟩M63
[t30⟩M65[t39, t40⟩M67 [t41⟩M71 [t42⟩M75 [t43⟩M78 [t44⟩M79 [t46⟩M83 [t51⟩
M64,
M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩M67 [t41⟩M71 [t42⟩M75 [t43⟩M78
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7
135

136
Appendix A: Reachability Trees
M62
M63
M64
Terminal
M66
M65
M68
M69
M76
Terminal
Terminal
M67
M70
M71
t24,  t25,  t26,  t27,  t28  
t24,  t25,  t26,  t27,  t28  
t30  
t31  
t32  
t32  
t41  
t41  
t39,  t40  
t37  
M83
M72
M73
Terminal
t34  
t34  
t51  
M74
M75
t42  
t42  
M77
M78
t43  
t43  
M79
M80
t44  
t44  
t46  
M81
t45  
t46  
t46  
t46  
M82
Terminal
t46  t46  
t46  t46  
t46  t46  
Fig. A.1 Reachability tree for Petri net model P Nu
[t44⟩M80 [t45⟩M81 [t46⟩
M82, and M62 [t24, t25, t26, t27, t28⟩M63 [t30⟩M65[t39, t40⟩
M67 [t41⟩M71 [t42⟩M75 [t43⟩M78 [t44⟩M80 [t45⟩M81 [t46⟩M83 [t51⟩
M64 to optimize
anomaly veriﬁcation agent transmission.
The cross-layer Petri net model PNc, shown in Fig.A.2, executes the cross-layer
anomaly detection and anomaly veriﬁcation agent transmission optimization algo-
rithm through the markings M84 [t52, t53, t54, t55, t56, t57⟩M85, M86, M87, M88, M89,
M90 [t58, t59, t60, t61, t62, t63⟩M91 [t1
64, t2
64, ..., t243
64 ⟩M93 [t65⟩
M92 and M84 [t52, t53,
t54, t55, t56, t57⟩M85, M86, M87, M88, M89, M90 [t58, t59, t60, t61, t62, t63⟩M91 [t1
64, t2
64,
..., t243
64 ⟩M93 [t65⟩
M94, where
M92 and
M94 are terminal states which show states of
the cluster leader node to aggregate sensed data and decrement the trust value of the
cluster member node, respectively.

Appendix A: Reachability Trees
137
Fig. A.2 Reachability tree
for Petri net model PNc
M84
M85
M 88
Terminal
t 52  
M 86
M 87
M 89
M90
M 91
t 53  
t 54  
t 55  t 56  
t 57  
t 58  
t 59  t 60  t 61  t 62  t 63  
M 93
t1 64, 
M92
Terminal
M 94
t 65  
t 65  
t2 64, ...., t 243 64 

Bibliography
B. Sundararaman, U. Buy, A.D. Kshemkalyani, Clock synchronization for wireless sensor networks:
a survey. Ad Hoc Netw. 3(1), 281–323 (2005)
Y. Gu, T. He, Dynamic switching-based data forwarding for low-duty-cycle wireless sensor net-
works. IEEE Trans. Mobile Comput. 10(12), 1741–1754 (2011)
© Springer Nature Singapore Pte Ltd. 2018
M. Usman et al., Mobile Agent-Based Anomaly Detection
and Veriﬁcation System for Smart Home Sensor Networks,
https://doi.org/10.1007/978-981-10-7467-7
139

