
Confident Coding

Confident Coding
Master the fundamentals of code and supercharge your
career
Rob Percival

Publisher’s note
Every possible effort has been made to ensure that the information contained in this book is
accurate at the time of going to press, and the publishers and author cannot accept responsibility
for any errors or omissions, however caused. No responsibility for loss or damage occasioned to
any person acting, or refraining from action, as a result of the material in this publication can be
accepted by the editor, the publisher or the author.
First published in Great Britain and the United States in 2017 by Kogan Page Limited Apart from any
fair dealing for the purposes of research or private study, or criticism or review, as permitted under
the Copyright, Designs and Patents Act 1988, this publication may only be reproduced, stored or
transmitted, in any form or by any means, with the prior permission in writing of the publishers, or in
the case of reprographic reproduction in accordance with the terms and licences issued by the CLA.
Enquiries concerning reproduction outside these terms should be sent to the publishers at the
undermentioned addresses: 2nd Floor, 45 Gee Street London
EC1V 3RS
United Kingdom
c/o Martin P Hill Consulting

122 W 27th Street
New York, NY 10001
USA
4737/23 Ansari Road Daryaganj
New Delhi 110002
India
© Rob Percival 2017
The right of Rob Percival to be identified as the author of this work has been asserted by her in
accordance with the Copyright, Designs and Patents Act 1988.
ISBN   978 0 7494 7963 3
E-ISBN  978 0 7494 7988 6
Typeset by Integra Software Services, Pondicherry Print production managed by Jellyfish Printed
and bound in Great Britain by CPI Group (UK) Ltd, Croydon CR0 4YY

CONTENTS
Cover
Title Page
Copyright
Contents
Introduction
PART ONE Why coding?
01 Why coding is important and what it can do for you
Becoming more efficient
Communicating with technical people
Understanding how software works
Knowing what it takes
Building your own website or app
Building a web presence
Starting your own business
Taking on extra responsibilities within your current role
Aim to stop ‘selling your time’
Combine coding with your professional expertise
Coding is fun
Coding and specific industries
Summary
02 What coding is
What is coding?
Let’s write some code
Why are there so many programming languages?
Summary
PART TWO Languages
03 HTML
What is HTML?
Why learn HTML?
Formatting text

HTML lists
Images
Forms
Tables
Links
HTML entities
iFrames
HTML project: putting it all together
Summary
Further learning
04 CSS
What is CSS?
Why learn CSS?
What does CSS look like?
What is internal CSS?
Classes and IDs
Divs
Fonts
Styling text
Aligning text
CSS project: clone a website
Summary
Further learning
05 JavaScript
What is JavaScript?
Why learn JavaScript?
Internal JavaScript
Changing styles with JavaScript
Getting some information from the user
If statements
Updating website content
Loops
Generating random numbers
JavaScript project: guessing game
Summary
Further learning
06 Python

What is Python?
Why learn Python?
What will this chapter cover?
How do we get started with Python?
‘Hello World’ with Python
Variables in Python
Lists
For loops
While loops
If statements
Regular expressions
Splitting strings into lists
Getting the contents of a web page
Python project: extracting data from a web page
Summary
Further learning
PART THREE In practice
07 Website development
Why build a website?
How do websites work?
What is a domain name, and how do I get one?
What is web hosting, and how do I get it?
Content management systems
Self-coding your site
Website development project: build a website
Summary
Further learning
08 Building an app for iPhone or iPad
What is an app?
Getting started: downloading Xcode
Adding labels to our app
Adding a text field
Adding buttons
Running some code
Interacting with the user interface
Making buttons interactive
Variable types in Swift
Building an app for iPhone or iPad project: currency converter app

Summary
Further learning
09 Building an app for Android
Downloading and setting up Android studio
Running your first Android app
Adding text and buttons
Making the app interactive
Making a toast
Building an app for Android project: cat years app
Summary
Further learning
10 Debugging
Why learn debugging?
How to write code that requires minimal debugging
Debugging HTML and CSS
Debugging JavaScript
Debugging Swift in Xcode
Debugging Java in Android studio
Summary
PART FOUR Future-proofing your career with coding
11 Using coding to enhance your career
Creating an app for your business
Starting a blog
Finding tasks that can be automated
Using Python to extract email addresses from a website
Automation on MacOS
Automation on Windows
Summary
12 Coding and entrepreneurship
What’s coding got to do with entrepreneurship?
Getting ideas
Products vs services
Your unique selling point
Validating your idea

Creating a minimum viable product
How much to charge?
Do things that don’t scale
Summary
13 Pursuing coding further to become a developer
Should you become a full-time coder?
What languages should you learn?
Web development
App development
Getting freelance jobs
Expanding your online presence
Writing a software developer CV
The interview
Summary
Conclusion
Index
Backcover

Introduction
In June 2016, Fast Company published an article explaining ‘Why coding is still the most important job
skill of the future’. The research firm Burning Glass found that jobs requiring coding skills pay, on
average, $22,000 more, and that half of all jobs with salaries over $58,000 require some coding skills.
Moreover, half of all programming opportunities were in industries outside of technology, including
finance, manufacturing and healthcare.
The acquiring of the kinds of specialist skills that could boost salaries and advance careers used to
involve at least a degree, if not years of study as part of a PhD or MBA. But today the proliferation of
online courses and coding bootcamps has made the acquisition of coding skills highly feasible for anyone
with a computer and internet connection.
As computers become smarter, and able to drive cars, write news stories and balance businesses’
books single-handedly, there will be an ever greater need for people that know how to write the code that
commands the machines.
Learning to code also has the extra benefit of not only making a candidate more employable, but also
giving them the freedom of starting their own business or creating a side income from making websites
and apps.
In this book we will look in detail at both the ‘why’ and the ‘how’ of learning to code: after looking at
the benefits that programming knowledge brings, we will dive right in learning HTML, the language of all
websites. We will then look at a range of other programming languages, and even see how to build native
apps for iPhones and Android devices. Finally, we will apply the skills in step-by-step guides to
entrepreneurship, building your own websites and apps, increasing your everyday efficiency and even
seeing how you might become a full-time software developer.
Even if you have no plans to change careers, we will see how you can use coding skills to make
yourself and your colleagues more efficient, creating shortcuts to complete tasks faster, provide quicker
feedback and serve your customers and clients better.
My hope for you in reading this book is that you will become fully digitally literate. Some readers may
go on to create businesses, some may build apps to help them in their current job, and some might
communicate more effectively with the IT guys at the office. But all will have a greater understanding of
how coding underpins every interaction we have with our computers, our phones and our smart devices.
The lines of code that you write will enable you to better harness the technology that you use every day.

Who am I?
I would like to take a moment to tell you how learning to code has changed my life. I studied Mathematics
at university, and went on to become a teacher in a secondary school in London. I very much enjoyed the
teaching, but I suspected it might not be what I wanted to do for my whole life, so in the evenings and
weekends I started to build websites.
I had done a little coding as a kid, trying to replicate my favourite computer games on a BBC Micro,
but I was certainly no Mark Zuckerberg or Bill Gates. I would simply have an idea for a website, and
using Google figure out how to put it together. This method of learning was free and fairly effective, but it
did mean that I often went down long, unnecessary detours until I discovered that there was a much better
way of doing things.
My first website was HomesExchange.org, a site that allowed people to swap homes for a couple of
weeks to save accommodation costs. Unfortunately, I hadn’t realized that the domain name
HomesExchange.org could also be interpreted as HomeSexChange.org. After a few unsavoury support
requests, I decided the business was unlikely to go very far!
I built several more sites, most of which came to nothing, until one day I came up with the idea of an
eco-friendly web hosting service, to allow people to host their websites and emails in an environmentally
friendly way. This was an example of scratching my own itch, as I had looked for such a service myself
for my own sites, and the existing options were generally very expensive and didn’t have as many features
as the big web hosts like GoDaddy and 123-reg.
The service, ecowebhosting.co.uk, turned out to be something that a lot of people wanted, and it started
to grow quite naturally, as people discovered the website through Google and word-of-mouth. As the site
grew in popularity, I added features and automated processes that I had to do several times a day, learning
the coding required as I went.
In 2012 I quit my teaching job in order to focus on Eco Web Hosting and some other projects full time. I
quickly discovered that working freelance is not quite as ‘freeing’ as I thought, as I always had several
activities going on at once. I liked having a range of reliable income (through the web hosting), new
projects (mostly freelance websites and apps through local contacts) and starting new businesses when I
had the latest ‘great’ idea. But I was also struggling to cope with so many competing calls for my
attention.
In January 2014 I started to build an online course to teach people how to build websites. I had noticed
that online video courses were becoming popular, and thought that with a combination of my coding
knowledge, teaching skills and entrepreneurial experience I might be able to offer a fun, practical and
project-based approach to learning to code. That course, The Complete Web Developer Course, went on
to be one of the best-selling courses of all time, and I followed it up with The Complete iOS Developer
Course, for iPhone apps, and The Complete Android Developer Course, for Android apps.
Through my courses, I have now taught over half a million people how to code, and I daily appreciate
the scale that the internet can provide, with one person being able to help so many others. The courses
have also brought me financial freedom, and a strong desire to continue helping others find the joy that
coding brings me, as well as the many opportunities that learning to code brings.

Steve Jobs famously said, ‘I think everybody in this country should learn how to program a computer
because it teaches you how to think.’ That is a final, and essential, benefit – learning code forces you to
approach problems logically and analytically, asking the right questions and testing your solutions to see
if they work. And that is a skill that will benefit you in all aspects of your life.

More online
From time to time in the book I’ll be pointing you to supporting material I’ve put online. Here’s how to get
it.
1. In the book each online resource is keyed with the letters CC and a number – like this: 
2. Go to koganpage.com/cc
3. There you’ll see a ‘View resources’ button.
4. The button takes you to a PDF, ‘Online material’.
5. The PDF gives you the corresponding URL for each CC number.

How to use this book
This book is designed to be as practical and hands-on as possible. You’ll get the most out of it by actively
taking part and following every instruction and activity online as we go. There are three different kinds of
features in this book to help you learn coding: questions, practice exercises and challenges. The quick
questions are designed to help you memorize key pieces of information, the practice exercises make sure
that your new skills are honed and developed, and the challenges stretch you to deeper learning. As the
book progresses, you’ll find that there are fewer quick questions but more and more challenges. I hope
you enjoy the journey!

PART ONE
Why coding?

01
Why coding is important and what it can do for
you
We’ve already seen several reasons why learning to code is important: it can increase your salary, widen
your future career choices and be a springboard into self-employment and entrepreneurship. It will also
help you navigate the increasingly automated future of smart assistants, self-driving cars and virtual
reality.
In this chapter we will look at some more specific things you can do with coding right now, many of
which we will expand on through the course of this book.

Becoming more effcient
Almost all jobs today require a fair bit of time working with a computer. You likely have to do a range of
similar tasks each day, including working with email, creating and managing documents, and searching the
web. Almost all of these tasks can be made more efficient with a strong knowledge of how the software
and operating system you are using works.
Initially, simply using keyboard shortcuts will likely save you several minutes each day, and more
importantly will start you thinking about how the software you are using works, and how your workflow
could be improved. Services such as text expansion and If This Then That, which we will be covering in
detail later on, can save you a huge amount of time, as well as helping you do a better job. Imagine being
able to automatically email your colleagues with a summary of the effectiveness of your weekly
newsletter. Or completely automating the process of turning your weekly sales report into a live webpage
that your colleagues can view any time.
Learning to code will allow you to do all this and much more, doing a better job in less time.

Communicating with technical people
Regardless of your current fluency with technology, it is likely that you need to communicate with
technical people fairly regularly about things that you don’t entirely understand. Whether it is trying to get
some content added to the company website, getting some software installed on your computer or
removing the tweet you accidentally posted on the company account, greater technical knowledge can
make every aspect of those conversations much more straightforward.
As well as becoming more familiar with the terminology that technical people use (which really isn’t
as complicated or mysterious as it seems), you will know the fundamental nature of how computer
systems work and fit together. This means that every time you come across a new system, or piece of
software, you will be able to zero in on the key functions and properties, enabling you to get to grips with
how it works, and discuss it confidently.
Being secure in your ability to deal with computers and software will dramatically improve both your
productivity and your speed with which you can get things done when working with technical staff in your
company.

Understanding how software works
One of the primary reasons programming is being taught to young children is because of the speed with
which the world of software develops. Our current primary computing device, the smartphone, has only
been around in its current form for 10 years. Who knows what devices we will be using 5, 10 or 20 years
from now? Teaching children to code teaches them the fundamentals of how software works, which are
not likely to change any time soon. This will enable them to quickly adapt to new operating systems,
different programs or apps, and new devices.
The same is true for adults – learning how computers work gives you the power to absorb new
software and hardware into your workflow, making you more adaptable and essentially future-proofing
your career.

Knowing what it takes
Further to understanding how software works, learning to code gives you an awareness of what is
involved in building a webform, or adding a feature to an app. It is likely at some point in your career that
you will need to work directly with coders to add features to the company website, customize the
software you use every day, or even to create a new app from scratch.
If you aren’t aware of what is necessary to build a website, app or individual feature, you are open to
either overpaying for what you are getting, or not getting exactly what you wanted. Knowing what it takes
to write some code gives you power in negotiations and while managing a project, as well as the ability
to get the job done quickly and to budget.

Building your own website or app
Before the internet, if you wanted to share an idea, product or service with the world, there were
significant obstacles to overcome. You would have had to publish information in a newspaper or book, or
sell directly through shops. The web changed all that, and now you can build a website in a matter of
hours which is immediately accessible to the 3 billion people currently online. The only obstacle is
learning to code.
To me that is a hugely exciting concept – coding enables you to build the equivalent of a worldwide
shopfront with nothing but a laptop and a (free) text editor. No more bricks and mortar required.
We’ll look at several different ways to build your own website and app (and why you might want to)
throughout this book.

Building a web presence
Eighty per cent of employers Google job applicants before inviting them for interview. Take a moment to
search your own name and see what comes up. Is it what you would want a potential employer to see?
Creating a blog, portfolio site, or a simple site for a project you’ve undertaken or ebook you have written
enables you to control what your future boss sees, and helps you stand out as an applicant.
A web presence matters and learning to control yours will put you ahead of 95 per cent of the
population. We will cover the whys and hows of the creation of blogs and portfolio sites later on in this
book.

Starting your own business
‘Technical cofounders’, ie people who want to start a business, and have coding skills, are so highly in
demand that whole websites have been dedicated to the task, and the search phrase ‘find a technical
cofounder’ has 3.2 million results on Google.
Coding skills enable you to start any business you like, but they also enable you to partner with people
and provide the technical expertise that all new companies need. Whether or not you want to start a
company today, knowing that the opportunity is always there is incredibly exciting, and we will look at
the process in some detail later in this book. What entrepreneurial opportunities could learning to code
bring you?

Taking on extra responsibilities within your current role
In many jobs there is not an obvious process for advancement. Or perhaps there is a process but it is a
slow one, and you are looking for opportunities to speed up your next promotion. It can be difficult to
simply ‘do your job better’, or find other ways to stand out from the crowd.
Learning to code gives you the ability to, for example, build an app that makes something that you and
your colleagues do regularly easier or more effective. You could create a webpage that helps people to
arrange car sharing, or if you are a lawyer you could build an app to allow clients to instantly view the
status of their case, and be automatically alerted to any updates. Or you could simply take responsibility
for your area of the company website, making sure it is up to date and perhaps introducing tools and
features that become popular with your customers or clients.
Doing things like this might sound extraneous or unnecessary, but they will get you noticed, and can be
the beginning of something big. Even if they are not, you will learn a huge amount building your idea, and
make lots of mistakes, which, with any luck, you won’t make next time round.

Aim to stop ‘selling your time’
Through employment, most of us earn our income by selling our time. If you love your job, that’s a
perfectly reasonable arrangement, but for many of us the opportunity to ‘scale up’ what we do would be
welcome. Learning to code can provide that opportunity.
If you are a teacher, create a website teaching people your subject, and sell advertising space. If you
are an artist, create an app showcasing your work and selling prints. If you are an accountant, create a tool
that simplifies your workflow and offer it to others for a small fee. I will take you step by step through the
process of creating something that people want later in the book, but start thinking about it now and jotting
down ideas whenever you can.

Combine coding with your professional expertise
Most full-time coders have only ever worked as developers. If you have a different professional
background, combining that with coding can create something close to magic.
For me, it was the combination of coding and teaching that worked so well, but for you it might be
coding and law, coding and accountancy, or coding and yoga (we’ll see an example for that later on).
Being an expert in a separate field lets you know what people like you want, what problems they have,
and gives you insight into how those problems might be solved. Learning to code gives you the tools to
actually solve them.

Coding is fun
Coding can be a huge amount of fun, and very satisfying as you overcome problems and complete
challenges. You may feel that you are not learning anything new in your day-to-day role, and learning to
code gives you that buzz of acquiring new skills and understanding that you may not have felt since school
or university.
If you enjoy problem solving and creating things, you will likely find great enjoyment in completing a
project, fixing bugs and creating websites and apps. Crafting lines of code to get a computer to do your
bidding is addictive in itself, and a wonderful break from the stress of everyday life.

Coding and specific industries
Hopefully the above has given you ideas of how you could use coding skills in your current role, but if not
here are a few concrete examples of how programming could improve your prospects in specific
industries.

Law
Technology is becoming increasingly central in every industry. Knowing how to code as a lawyer or
accountant gives you an edge with technical clients, enabling you to speak their language and see more
clearly where they are coming from. Not only that, but technology often pushes the law forward, forcing it
to adapt to new possibilities and unforeseen situations. A sound grasp of the technologies themselves is a
huge advantage in a fast-changing legal landscape.
Legal practices also increasingly rely on technologies such as apps and websites for everyday office
tasks, and the ability to streamline these processes can make you far more effective and efficient. You may
also be able to please your clients better: the legal process can often seem slow and frustrating to both
individuals and companies. Creating tools for them to see both what is happening and what they need to
do in real time could set your practice apart.

Sales and marketing
Sales and marketing have been absolutely transformed by technology. The ability of marketers to measure
the effect of their campaigns has changed the landscape entirely, and being comfortable with the latest
technologies can set individual marketers and salespeople apart. Whether that’s through being able to
write, edit and debug the HTML for your email marketing campaigns or automating repetitive tasks to free
up you and your teammates’ time to develop innovative new ideas.
Even working with ‘old media’ can be made vastly more efficient and effective when combined with
technology, and if the tool doesn’t exist for you to properly manage your latest campaign, coding skills
give you the power to create it.

Banking
It goes without saying that technology is at the centre of banking today. Machines can make trades far
quicker than humans can, and consumers are increasingly interacting with their banks online and through
apps. Whatever your position in the banking sector, understanding the tools that you and your colleagues
use every day enables you to use them more effectively.
If you spend all day in Excel creating financial models, learning to code can not only help with the
process of finding bugs in your formulas and check your results, but can also give you more powerful
techniques to automate processes you are currently doing by hand.

Trade industries
While the actual processes of building houses and fixing boilers are still the role of humans, a strong
grasp of technology can still give people working in trade industries an edge. Customer service is an
important aspect of any tradesperson’s role, and being able to swiftly reply to queries, arrange
appointments automatically, and manage invoicing and payments efficiently will not only save time but
result in a much happier customer base, and more repeat business.
As with other sectors, if you create a tool that solves a problem for you, it is very likely others will be
interested in using it too, and you will be perfectly placed to market your product or service to people in
your industry.

Creative industries
As a photographer, graphic artist or other creative professional, it is likely that you are already focused
on technology, and are an advanced user of a range of complex software. But it is also likely that you find
yourself doing the same processes repeatedly: exporting to various file types and sizes, applying filters,
tweaking colour values and much more. Being able to automate some of these processes can both make
you more efficient and give your output a more consistent style.
It is also inevitable that you will work with developers, perhaps to create your own portfolio site, or
working together on a particular project. Being able to communicate effectively with them is crucial for a
job to go well, and once you get to the level that you can build your own websites or apps, you can offer a
more complete service to your clients.

Retail and service
The retail and service industries are all about providing a great experience for your customers. That often
means providing a great digital experience, which is more efficient for both the organization and the end-
user. Having command of that technology and being able to create and customize features for your users,
is highly attractive to employers, and enables you to do a better job day-to-day.

Summary
These are just some of the very practical ways that learning to code can improve your prospects, make
you more valuable as an employee and give your opportunities for greater freedom and career
advancement. As Jason Calacanis, CEO of Mahalo and founder of the start-up showcase LAUNCH
conference says, ‘An employee who understands how to code is valued at about $500,000 to $1 million
toward the total acquisition price.’ That’s a lot of value to create by learning a new skill.
We will look in more detail at all of these opportunities later in this book, once we have learned the
coding languages that they require. Before that, however, we will spend a little time demystifying coding.
We will learn what exactly coding is, why there are so many coding languages and which ones you should
learn. We’ll also see how both the internet and offline apps function, and familiarize you with the basic
terminology that you will come across in this book (and in all those conversations with technical people
that you are about to have).
On a final, more general note, I have found that learning to code gives people a great feeling of
empowerment. Having the ability to create digital products such as apps and websites is something very
few people can do, and brings so much potential into your life. It has completely changed my life, and it
can do the same for you.

02
What coding is
For people who haven’t programmed before, coding can feel like a mysterious art. The mythical ‘coder’
is someone who (usually while wearing headphones and listening to electronic music) can coax a
computer into doing their bidding, but really, the whole process is much more straightforward than that.
In this chapter, we will find out what programming is and write a few simple lines of code to get us
started. We’ll also look at the different types of software we can produce with code, including websites,
mobile apps and programs for desktop computers. Finally, we will learn some general coding processes
that will stand you in good stead before we tackle our first coding language, HTML, in the next section.

What is coding?
Put simply, coding is the process of writing lines of instructions that make a computer (or tablet, or phone,
or watch) do something. But it’s a little more complicated than that, so let’s cover a little bit of
background.
The fundamental electrical component that allows a computer to do what it does is the transistor – a
tiny piece of electronics that can either be on (ie allow electricity to pass through) or off (electricity
cannot pass through). Current computer processors have around 2 billion transistors, which can turn on
and off around 3 billion times every second. (Incidentally, Homo sapiens has 100 billion neurons which
can turn on and off about 1,000 times a second, so we’re getting quite close to being able to simulate the
power of a human brain.)
What this means is that computers ‘think’ in a series of 1s and 0s, with 1 meaning ‘on’, or true, and 0
meaning ‘off’, or false. In the very early days of computing, the only way to communicate with a computer
was to enter streams of 1s and 0s, but this of course wasn’t very practical. So gradually computer
‘languages’ were developed, which allowed people to give the computer instructions in a more
convenient way.
A computer language is much like a human language such as English or Spanish, in the sense that each
language has specific commands (words) and syntax (punctuation), so both the human and the computer
can understand it. However, a key difference between computer languages and human languages is that
computer languages are absolutely precise and unambiguous. If you spell a command incorrectly, or forget
a semicolon, it is likely that your whole code will fail. Unlike a human conversation, computers are
extremely fussy about both spelling and punctuation.
The big advantage of this unambiguity is that you can be certain that if you get your code right the
computer will do exactly what you want. Unlike human conversation, which can often result in unexpected
outcomes, computers will always do exactly what is commanded of them, whether you like it or not.

But I can control a computer without coding
You might be thinking, ‘but I can do everything I need to with my computer and phone without needing to
code.’ In the last 30 years or so highly user-friendly operating systems such as Windows and MacOS (and
Android and iOS on mobile devices) have meant that we no longer have to write code to control a
computer. Advanced Graphical User Interfaces (GUIs) have been developed so that anyone could
approach a computer or phone and start using it straight away. This has been a great leap forward in
usability, but it also means that many people aren’t aware of the power that they have at their fingertips if
they go beyond the everyday software like Word and Chrome.
Every piece of software you use has been written, in code, by someone or, more likely, a group of
people. Every time you issue an instruction to Siri, or enter a web address in a browser, a few (or a few
thousand) lines of code are executed to answer your question or load a website. There is no magic behind
this, it is simply the hard graft of thousands of developers and billions of transistors doing what they are
told.
Learning to code gives you complete power over these transistors – you can bend them to your will by
creating your own software, or automating processes to save you hours every day. Coding is very much
like a super-power, in that it enables you to use equipment you already have in a whole new way.

Let’s write some code
Enough 
theory. 
Let’s 
do 
some 
practice. 
In 
your 
browser, 
go 
to 
the 
web 
address
https://repl.it/languages/python3. This website allows us to write code in a computer language called
Python (named after Monty Python – we’ll see more about individual coding languages later in this
chapter). It will then compile the code for us (essentially, turn it into 0s and 1s so that the computer can
understand it), and then display the output for us to see.
In the main window, type the following code:
Now press the ‘run’ button to compile and run your code.
You should see the phrase ‘Hello World’ appear in the black box of the right of the screen. Success! Now
try misspelling ‘print’ or removing one of the brackets. If you run the code now, you will get an error,
something like:
This should give you an idea of how precise you need to be – the computer won’t make a ‘best guess’
about what you meant; if you get your code even slightly wrong, nothing will happen at all. Let that be
your first lesson!
Let’s try something a little more complicated. Have a look at the following code, and try to predict
what it will do:
Now delete your print statement and replace it with the above code. If you get an error, check the code
you have entered very carefully – you need to copy the code exactly.
Note: the print command is indented using the tab key. If you type the first line correctly and then
press enter, the website should know that you want to indent the second line, so will do it for you
automatically. If it doesn’t, press the tab key on your computer to indent it.
Did it do what you expected? The ‘for’ command begins something called a ‘loop’, which executes a
chunk of code several times. The x is a variable, which represents a value, in this case a number. The
‘range(1, 11)’ part runs the loop with x being 1, 2, 3, … up to 10 (perhaps surprisingly, the 11 is not
included in this command). Finally, the ‘print(x)’ part prints the value of the variable x. So the output is
simple the numbers 1 to 10.

Challenge 1
Can you change the above code so it prints the numbers 10 to 20?
Solution: You should have changed the code to this:
If you did that, congratulations!
Printing the numbers from 1 to 10 might seem a long way off from building the next Uber or Snapchat,
but it’s where all coders begin, and the same principles apply even when building complex software or
speech recognition systems.

Why are there so many programming languages?
A common question for new coders is what programming language to learn, which leads to the question of
why there are so many. With human languages, the many languages we have developed over many
thousands of years within different geographical communities. With computer languages, their
development was more deliberate, which means that the different languages are designed for different
purposes. You don’t need to become an expert in every language, and some great coders really only know
one language well, but you should be aware of the different contexts that languages operate.
We will cover this in more detail later on, but for now there are broadly three types of software that
you will create with code. The first we will call apps. Apps have their code stored on a device (usually a
computer, phone or tablet), and primarily run on that device. An app might be Excel, or a mail client, or a
browser like Firefox. It could be a game like Angry Birds, or utility such as the Notes app on your phone.
Apps are what most people mean when they talk about software, and they are the simplest to understand.
Next we have the code that displays a website. This is generally not stored on your machine, and is
downloaded afresh every time you load the website. The browser (itself an app, such as Chrome, Safari
or Firefox), downloads and processes the code to show you the website. This is known as client-side
code because it is processed on the client computer or phone, ie your device.
Finally, we have code that runs on a server, or server-side code. A server is like a very powerful
computer that is always connected to the internet. Your email is stored on a server, as is your Twitter feed
and the current state of your Words With Friends games. When you log into a website, you send the
username and password to the server, which then runs some server-side code to check if the login details
are right, and if so returns the appropriate page. If not, it will give you an error message.
For each of these three types of software there are a range of languages we can use. Please don’t feel
you have to know the names of all of these languages; you will become more familiar with most of them
as you go through this book, but it is useful to be aware of the most popular languages in each category.

Languages for building apps
Apps are generally designed for one particular platform. That platform might be Windows, or MacOS, or
Linux for desktops and laptops, or iOS (for iPhones and iPads) and Android (for Android phones and
tablets). There are other platforms but these are by far the most popular.
The mobile platforms each have languages that they are designed for. iOS development was
traditionally done in a language called Objective-C, but in 2014 Apple introduced a new language called
Swift, which is becoming more popular, and is what we use in this book. For Android, a language called
Java (note Java is not related to JavaScript) is used by default. It is possible to use other languages, but
not recommended for beginners.
On Windows, most programs are written in C++, which is related to Objective-C (both are derived
from an early programming language simply known as C). Some apps are written using a platform called
.NET, which mostly uses a language called C#, another variant of C. There are a greater range of other
development tools and languages for Windows than there are for the mobile platforms. You can use Java
and Python, among other languages, to build Windows programs.
On MacOS, as with iOS, the default languages are Objective-C and Swift. Because of its open nature,
you can use almost any language, including Java, Python, and two other popular languages, Perl and Ruby,
to build Linux applications.
Because most new developers are keen to make mobile apps, we will be focusing on Android and iOS
development (so Java and Swift) in this book, but it is relatively easy to move from those to other
languages if you wish.

Client-side languages
If you are building websites, there are three core languages that you will need to control how the site
looks and behaves. The first is HTML, or Hypertext Markup Language, which is what controls the content
of a site. The second is CSS, or Cascading Style Sheets, which determines the styles, such as fonts,
colours and layouts. The third is JavaScript, which allows your website to be dynamic, and change the
content and styles based on user interaction. These three languages are inescapable in client-side, or
‘front-end’, development, and they are the three languages that we will start with in this book.

Server-side languages
By far the most popular language for website server-side (also known as ‘backend’) code is PHP, short
for Hypertext Preprocessor. This currently powers around 80 per cent of websites, but there are other
options. Python, is also used, as is a language called Ruby. You can also use Perl, Java and even Swift to
write server software.
Phew! That’s a lot of languages, and as I say, you don’t need to remember all these names. If you are
still wondering which language to learn, it depends on what you want to do. If you want to build websites,
HTML, CSS and JavaScript are crucial. For the backend, I would recommend Python first (as it is a very
easy language to learn), and PHP if you find it necessary. If you want to learn mobile development, Swift
for iOS and Java for Android are your best bets.
If you have no idea what you want to do with coding at this point, simply follow along with the book
and I’ll teach you a range of languages so you can choose where you want to focus your attention when
you have finished.

Summary
Now that you have a good overview of what coding is for and the range of different languages and
platforms available it’s time to get started.
In the next section we will be looking at the three main languages for front-end web development,
HTML, CSS and JavaScript, and one for the backend, Python. This will give you a great grounding in a
range of different programming styles and techniques, and give you the power to create and manage your
own websites.

PART TWO
Languages

03
HTML
In this chapter, we’ll start our coding journey by looking at HTML, the language of the web. By the end of
the chapter, you will know:
what HTML is and where it is used;
how to update and maintain simple websites;
how to edit HTML in a text editor, and see the results immediately in a browser; and
how to use basic HTML elements, including:
– paragraphs and headers
– lists and images
– forms and tables.

What is HTML?
HTML stands for Hypertext Markup Language, and it is the language that all websites are written in.
Hypertext describes the fact that an HTML page can contain links to other HTML pages, which was one
of the founding principles behind the web.
HTML was created by Tim Berners-Lee in the late 1980s as he was developing what is now known as
the internet. He created it as a way of organizing his own notes, but soon wanted to share his documents
with others. As the web grew, Berners-Lee’s language worked so well that others adopted it for adding
formatting to text, forms, images, and of course links.
One aspect behind the success of HTML (as with all the languages in this book) is that Berners-Lee
made it freely available for anyone to use. It is this freedom that allowed the web to grow so fast, and
allows anyone today to use the same tools as professionals at no cost whatsoever. Thank you Tim!

Why learn HTML?
Strictly speaking, HTML is not a coding language, but a markup language. This means that with HTML
you can change the content and layout of a website, but you are limited in terms of interactivity with users
(so you couldn’t build Twitter with just HTML).
This makes HTML a great place to start your coding journey because it is fairly easy to understand, and
you can apply the skills you learn straight away by building simple websites, or making changes to
websites you own or manage. If you find an error on the company website, you can just fix it yourself,
without having to bother the IT department.
Later on in this book we will see how to combine HTML with JavaScript to start building interactivity
into your pages.

What software do I need?
For this whole book, you only need to download one piece of software, and that is a text editor. This
allows you to create and edit code in any programming language.
You can use any text editor you like, but I would recommend downloading Brackets from
www.brackets.io. It is free and open-source, and can be downloaded on Windows, Mac and Linux. It will
automatically highlight and indent your code, making writing HTML a much more pleasant experience.
Note: You probably don’t need the Extract software that comes bundled with Brackets, so click the
‘Download Brackets Without Extract’ link.
3.1

I’ve downloaded Brackets – what now?
Once you have installed Brackets, you will be presented with this screen (3.2):
3.2
Brackets creates an HTML file called index.html, which we will use to become familiar with the basics
of HTML before we start writing our own code.
You can see what this HTML file looks like in your browser by clicking File → Live Preview. This
will open up the HTML file in your default browser, which will look something like this (3.3):
3.3
While coding, I always recommend having the text editor (Brackets) and your browser open at the same

time, taking up half the screen each, so resize your windows to look like this (3.4):
3.4
Now for the fun part – try removing the ‘!’ at the end of ‘This is your guide!’ in the Brackets window on
the right. You should see the page on the left update immediately, like this (3.5):
3.5
Well done, that was your first HTML edit. Feel free to spend a couple of minutes experimenting with
changing the code on the right, to see what effect that has on the webpage itself on the left (don’t worry if
you mess anything up – you can always use ctrl-z (or cmd-z on a Mac) to undo your changes).
That was fun – but what is HTML exactly?
Now it’s time to look in more detail at the HTML code and what it is doing. All the HTML commands
come inside angled brackets (< and >), and they tell the browser how to format and display the HTML
document. Everything inside the angled brackets is known as a tag. Let’s look in more detail at the default

HTML document created for us by Brackets (3.6):
3.6
The code starts with the line:
This is a standard command that tells the browser that this is an HTML document, and to process it
accordingly. We put that at the beginning of every HTML document we create.
Then we have the <html> tag. This indicates the start of our html code. Ifyou scroll down to the bottom
of the document you will see a matching </html> tag. The / here means ‘end of’, so </html> means that the
html section of our code has ended.
Next comes <head>. This is the ‘header’ of our HTML document, and contains information about the
document such as its title, a description and the character set (a name for the collection of letters, numbers
and symbols that we are using, in this case UTF-8). It also contains a link to a style sheet, which we’ll be
looking at in the next chapter.

Quick question: Where does the <head> section end?
Answer: Where it says </head>
After the header section, we have the <body> tag, which indicates the beginning of the main section of our
HTML. This is where we will put all the content for our webpage. Inside this section are a number of
different tags, which we will be looking at in more detail shortly. Two key tags are:
<h1> – this is a major heading. You can see in the browser window that this text is big and bold. There
are a number of different heading sizes, which you can use by changing h1 to h2, h3 etc.
Quick question: Experiment with changing the <h1> tag to other heading sizes. How many different
heading sizes are there?
Answer: 6 (h7, h8 etc just display as normal text)
<p> – this is a paragraph tag, and is used to contain normal text. Successive paragraphs are separated
by a small gap on the webpage.
And that’s it. Other than learning new tags, that is everything you need to know about how an HTML page
works. We start by defining the document as an HTML file with <!DOCTYPE html> then we enclose our
HTML in <html> and </html> tags. Within those tags we have two sections: <head>, which contains
information about the webpage such as its title and description, and <body>, which contains the content of
the page.
Now that we know how an HTML page works, we’re going to build our own from scratch.

Challenge 1: Your first webpage
The best way to learn to code is by doing, so you are now going to create your own webpage from
scratch. Have a final glance over the code in Brackets to remember the key details and then press ctrl-A
(cmd-A on a Mac) to select it all, and then press delete to clear the file.
Now for the challenge. From memory, if possible, create an HTML document with a title of ‘My first
webpage’ (you don’t need to give it a description, or define the character set), and content of ‘Hello
World!’ inside paragraph tags. Good luck!
When you have finished, you can copy your code into 
 to see if you got it right!
Your final webpage should look something like this (3.7):
3.7


Practice exercises
1 Add the missing opening and closing tags to correct the HTML here: 
2 Create a header and paragraph tags here: 
3 Create three different types of header tag here: 

Formatting text
Now that you know how a basic HTML page works, we’re going to look at some specific tags that we can
use to customize the way our page appears. Let’s start with text formatting.
Try 
typing 
the 
following 
code 
under 
the 
‘Hello 
World’ 
paragraph 
in 
Brackets: 
The strong tag makes the text appear bold.
Question: Move the strong tags around so that only the word ‘text’ is in bold.
Answer: <p>This <strong>text</strong> will be bold Now add a new paragraph using this code: 
The ‘em’ tag is short for emphasis, and makes text appear italic.
This can act as a handy reference for basic formatting HTML tags.
Note – you might want to save that code as a separate file on your computer called formatting.html so
you can refer back to it later.
Question: Experiment by adding paragraphs which contain <sup>, <sub> and <del> tags. What
effect do these have on your text?
Answer: <sup> makes text superscript (ie appearing above the normal text), <sub> is subscript (ie
appearing below the normal text) and <del> has a strikethrough effect.
You should end up with a webpage that looks something like this (3.8): 3.8


Practice exercise
1 Add formatting to the text here: 

HTML lists
We are now going to look at a number of more advanced HTML tags, starting with lists. Clear the contents
of the <body> tag of your HTML document, and type the following code into it: 
The <ul> tag is short for ‘unordered list’, and the <li> tags are ‘list items’. This creates a bullet point list
that looks like this:
Red
Yellow
Blue
Question: Try changing ‘ul’ to ‘ol’ in the above code. What effect does this have? What do you think
‘ol’ stands for?
Answer: ol stands for ‘ordered list’ and makes the list appear numbered, like this:
1 Red
2 Yellow
3 Blue
<ul> and <ol> tags are useful ways of displaying lists of information. See them in action in the great ‘List
of lists of lists’ Wikipedia page at https://en.wikipedia.org/wiki/List_of_lists_of_lists.

Side note – viewing the HTML of any website
In your browser, try loading https://en.wikipedia.org/wiki/List_of_lists_of_lists. Then right click on the
website and select ‘View Page Source’ or similar. You’ll likely see something like this (3.9): 3.9
This might look like mostly gobbledygook but if you look closely you’ll see some of the HTML elements
we have talked about: <html>, <head>, <title> etc. If you scroll down, you’ll see a collection of <ul>
elements with <li>. Try to match these up with the content of the page itself. Viewing them side by side
gives us this (3.10): 3.10
You should be able to see how the <ul> and <li> elements in the code on the right match up with the
various lists in the page itself on the left.
Try doing this with a few other websites to get an idea of how HTML code relates to a website itself.
www.example.com is a nice simple one to start with, but you can try any website you like. (Warning: the
code for www.google.com is not recommended at this point – check it out and you’ll see why!)

Images
Adding images to webpages is very simple, and it introduces us to a new HTML concept – attributes.
These are bits of information added to a tag that give the browser more information on how to display it.
For example, to display an image, we would use something like this: 
The <img> tag is short for image, and the ‘src’ part inside is short for source. Essentially we are telling
the browser where to get the image file from to display it. Notice also that <img> is a self-closing tag –
we don’t need a </img> tag to end it – it ends itself.
Question: Try putting the code <img src=“image.jpg”> into your HTML file. What happens, and why?
Answer: You’ll likely get a broken image symbol. This is because the ‘image. jpg’ file doesn’t exist, so
the browser can’t display it.
Try replacing the above code with this:
As long as you have internet access and there aren’t any typos in your code, you should now see this
(3.11): 3.11
Congratulations, you’ve just added an image to your webpage. The http:// at the beginning of the link
means we are getting the image from the internet, so we don’t even need to save it to our computer.
We can customize the image further by adding height and width attributes. Try putting this code into
Brackets: 
This will give you something like this (3.12):
3.12

The star image is now 300 pixels wide and 400 pixels high.
Question: What code would display the image ‘sun.png’ with a height and width of 200 pixels?
Answer: <img src=“sun.png” height=200 width=200>


Practice exercise
1 Add and resize an image here: 
Now that you are familiar with attributes and self-closing tags, we’ll move on to a more complicated and
powerful aspect of HTML – forms.

Forms
Forms are all over the web, and they are a simple but effective way to make your website interactive and
allow your users to enter information.

Text boxes
Text boxes allow the user to enter some text, such as a username or a password.
Start by entering the code below and seeing what you get:
Try typing some text into the box. It should look like this (3.13): 3.13
Question: What is the name and value of the attribute in this input tag?
Answer: The name of the attribute is ‘type’ and its value is ‘text’.
This gives you a simple text input that the user can click on and type some text into. You could use this to
allow the user to enter their email address on a sign-up page, for example.
Question: What happens when you change the input type to ‘password’?
Answer: Try the code <input type=“password”>. It looks the same, but when the user types in the box,
their input is hidden. Perfect for passwords!

Checkboxes
We can add several other form element types using the input tag. Try adding this code: 
This gives you a small box that the user can tick if they want to select an option.


Practice exercise
Add code to display three checkboxes giving the user the option to choose their favourite colour
from ‘red’, ‘blue’ and ‘green’.
Your code should look something like this: 
3.14

Radio buttons
Notice that with checkboxes you can choose more than one of them if you want to. If, instead, you only
want your users to select one option (if they are choosing a clothing size for example), you can use the
radio input type: 
If you try out that code, you’ll see that you can only select one of the options. Also, once you have
selected an option, you cannot deselect it – so you have to choose one and only one of the options.


Practice exercise
For each of the following, state whether you would use a checkbox or a radio button:
1 Asking a user whether they want to subscribe to a newsletter.
2 Asking a user whether they prefer tea or coffee.
3 Asking a user what countries they have travelled to from a list.
Answers
1 Checkbox – they can select or deselect the box as they wish.
2 Radio – they should only be able to select one option.
3 Checkbox – they can then select as many as they want to (or none).

Drop-down menus
If you want to create a drop-down list where the user can select from a range of options, you can use the
select element. It looks like this: 
Try this out in your text editor – you should see something like this (3.15): 3.15
This code is a little more complicated then the input elements, but still fairly straightforward. The
<select> tag introduces the drop-down menu, and then we add an <option> tag for each of the options
within the drop-down.
Question: What does the </option> tag do?
Answer: It signals the end of that option, ready for us to add another one, or use </select> to end the
drop-down menu.

Text areas
What if you want to allow a user to enter some text, but need them to have more than a little box? That’s
where text areas come in. You add them likethis: 
Try it out, and you’ll see a larger box where you can add multiline text. Unlike inputs, text area tags are
not self-closing, so you need to add a </textarea> afterwards to end the element.


Practice exercise
Change the width and height of a text area using the cols and rows attributes. Create a text area that
is about half the height and width of your browser window.
After 
a 
bit 
of 
experimentation, 
your 
code 
should 
look 
something 
like: 
This will give you a text area that looks like this (3.16): 3.16

Buttons
Every form needs a submit button. You can add one by using the input type ‘submit’, like this: 
That gives you a simple submit button with the word ‘Submit’. If you want to change the text on the button,
you can add a value attribute, like this: 
This is as far as we are going to go with forms at this point (but we will see them again in Chapter 6).
They are a very simple way to allow interaction with your users, and if you are creating or editing
websites, you will likely come across them before long.

Challenge 2
You know now all the basic form elements, so try creating a simple sign-up form that allows the user to
enter an email address, password, and perhaps a gender (or favourite ice cream flavour). Don’t forget the
submit button.


Practice exercise
The HTML for this form is broken – can you fix it?

Tables
Tables are a great way of displaying information to the user – essentially they look like spreadsheets, with
different content in each cell. To create a table, use the following code: 
The <table> tag is pretty self-explanatory – it indicates that we want to display a table. <tr> is short for
‘table row’, and defines the beginning of a new row in our table. <th> is short for ‘table header’, so each
of these is a one-column header for our table.
After the table headers, we use </tr> to signify the end of the first row, and another <tr> to start a new
row. <td> is short for ‘table data’ and is how we refer to the content of a cell in our table. Each row
should have the same number of columns (in this case 3).
Try typing that into your text editor and seeing how it looks. You should see something like this (3.17):
3.17
You can see that the table cells are nicely lined up with each other, and that the table headers are in bold.
Voila – our first table!
Question: Add three more rows to your table representing three members of your family or friends.
Answer: Your HTML should look something like this:

We can customize our tables in a number of ways. Firstly, we can change the width of the columns just
like we did with images earlier: 

3.18
Notice that when we do this the table headers are centred, but the table data is left-aligned.
We can also add a border around the table cells by adding the attribute border=1 to the table element
(3.19): 3.19


Challenge 3
Create a table with ‘First Name’ and ‘Surname’ as two separate table head labels and your actual first
name and surname in separate table data cells in the table body: 

Links
As I mentioned at the beginning of this chapter, the ‘H’ in HTML stands for Hypertext, which refers to
HTML’s ability to link to other webpages. We use links in our HTML documents like this: 
The ‘a’ element is actually short for ‘anchor’, because links were originally used to link from one part of
the page to another part, the location of which was defined by an ‘anchor’ (we’ll see how to do that
shortly). ‘href’ is short for hypertext reference, and is essentially the page that we want to link to. The
‘Search The Web’ text that appears inside the ‘a’ element is the text that the user will click on to go to the
new page.
Try this out, and you’ll see your text is underlined and blue, and when you click on it you are taken to
www.google.com (3.20): 3.20
(You can click the back button in your browser to go back to your webpage.) Question: What happens
when you add target=_blank as an attribute to the <a> element?
Answer: Your code should look like this:
<a href=“http://www.google.com” target=_blank>Search The Web</a> When you click on the link you
should find that it opens the link in a new tab or browser window.
Anchor links (ie links within a webpage) work slightly differently. Firstly, add several paragraphs of text
to your page so that the page is taller than your browser window, and you have to scroll to get to the
bottom. I use www.lipsum.com/feed/html to generate Latin text for this purpose (3.21): 3.21

Now, give the last paragraph on the page an id attribute, like this: 
(We’ll be seeing a lot more of the id attribute in the CSS chapter.) Finally, change the code for the link at
the top to look like this:
The # (hash) symbol tells the browser that instead of jumping to another page, it should look for an id tag
of ‘last’ in the current page and jump there.
Try it out. You should find when you click on the link it jumps to the bottom of the page.


Practice exercise
1 Practise creating links in the exercise at 

HTML entities
Sometimes you might want to use symbols in your web pages, such as the copyright symbol ©, the euro
symbol € or even a smiley face . This can be done by using 
HTML entities, or special codes that
browsers display as the required symbols. So to display a smiley face, we use: 
Try it out in Brackets (3.22):
3.22
The & tells the browser that we are about to enter an HTML entity, and the # indicates we are going to
describe the entity by its code number. The code number for a smiley face is 9786, and then we use a
semicolon to complete the HTML entity.
Some symbols can be displayed using a code number and also a code name, so: 
will both display the copyright symbol ©.
You 
can 
see 
a 
list 
of 
some 
of 
the 
most 
common 
HTML 
entities 
at
www.w3schools.com/html/html_entities.asp

Challenge 4
Try using HTML entities to add currency symbols here: 

iFrames
This is the final bit of HTML we will be learning in this chapter, so congratulations for making it this far.
Soon we’ll be seeing how to add some style to our webpages using CSS.
iFrames allow us to include the content of another webpage in our own. So for example, we could
include 
the 
Google 
homepage 
in 
our 
webpage 
using 
this 
code: 
3.23
Try changing www.example.com to other websites that you visit, such as bbc.co.uk. Note that some
popular websites, such as google.com and face-book.com, don’t allow their websites to be displayed in
iFrames.
Question: Can you add some attributes to the <iframe> element to make the iFrame box as wide and
tall as your browser window?
Answer: Just add width and height attributes as we did with images:
This will give you something like this (3.24): 3.24

One particularly handy use of iFrames is to include media such as YouTube videos in your webpages. To
do this:
Go to youtube.com and click on any video you like.
Scroll down and click on the Share button (underneath the red Subscribe button).
Click on Embed.
Copy the code to your clipboard (ctrl-c or cmd-c on a Mac) and then paste it into your webpage. You
should end up with something like this (3.25):
3.25
The code is a simple iFrame with a width and a height, but also has the attributes frameborder=“0”,
which turns off the iFrame border, and allow-fullscreen, which is a YouTube-specific attribute that, as
you might have guessed, allows the user to make the video full screen.


Practice exercise
1 Try adding an iFrame to include any website you like here: 

HTML project: putting it all together
Congratulations! You have now learned the basics of HTML. It’s time to put your newfound knowledge
into practice by creating a single webpage containing as many of the elements in this chapter as possible.
Pick a topic– something you are interested in, and then create your page by adding a title, header tags,
images, lists, a form, an iFrame and all the other elements we have covered.
Once you’re done, go to http://codepen.io/pen/?editors=1000 and paste your code in. You should see
your webpage at the bottom of the screen, and you can click Save to get a URL that you can share on
social media. Tweet it to @techedrob and I’ll give you some feedback!
As an example, I’ve created a webpage around one of my favourite topics: space. You can see it at
www.completewebdevelopercourse.com/content/1-html/1.17.html

Summary
As we have learned, HTML forms the basis of every webpage. You have now learned how to create and
edit all the foundational HTML elements, so you should be able to create a basic webpage, or edit an
existing one.
The next step on our coding journey is to learn how to style our HTML pages – adding colour, changing
sizes, adjusting text formatting and a lot more. We do that using CSS, or Cascading Style Sheets, and that’s
what we’ll be looking at in the next chapter.

Further learning
At this point of the book, I would recommend going on to learn CSS and JavaScript before investigating
HTML further. However, if you have got the HTML bug, feel free to check out these resources to dive
deeper into how the language works and what you can do with it:
www.codecademy.com/courses/web-beginner-en-HZA3b/0/1 – interactive coding exercises for
HTML.
www.w3schools.com/html/ – free HTML tutorials.
http://learn.shayhowe.com/html-css/ – great site for learning HTML and CSS.
https://play.google.com/store/apps/details?id=com.sololearn.htmltrial&hl=en – free Android app for
learning HTML.
https://itunes.apple.com/gb/app/learn-html-fundamentals/id933957050?mt=8 – free iPhone and iPad
app for learning HTML.

04
CSS
Now that you have covered HTML, which allows you to create different types of elements on a webpage,
in this chapter you’ll learn how to style those elements using CSS. Then, in the next chapter, we’ll be
making the elements interactive using JavaScript.
In this chapter we’ll cover:
what CSS is and how it is used;
how to refer to elements using classes and IDs;
using DIVs to break up our webpages; and
how to use CSS to adjust the following:
– borders and positioning
– colours and fonts
– text and link formatting.

What is CSS?
HTML allows us to add elements to our webpages, but it does not easily allow us to adjust their position,
colour, font or style in general.
CSS was introduced by Håkon Wium Lie, a colleague of Berners-Lee, in 1994. The main idea is to
keep the styling information separate from the content of the page, so it’s easy to adjust the style without
affecting the content. In fact, you can completely change the look and layout of a webpage by just changing
the CSS, without editing the HTML at all.
CSS stands for Cascading Style Sheets – the ‘cascading’ part refers to the way the browser decides
which style ‘rule’ should apply to an element when there are multiple, conflicting rules. For example, if
one style sheet says a <p> element should be blue, and another says it should be red, we need to have a
consistent way to know what colour the <p> element should actually be. We’ll see several examples of
this later on.

Why learn CSS?
Learning HTML without CSS is a bit like learning to paint in black and white: you can draw anything you
like, but you are missing out on a world of colour. CSS allows us to design our websites to look unique,
friendly and pretty. It will allow you to customize the look of any website you want to build or maintain.
From a coding point of view, CSS’s use of classes and IDs (we’ll see what they are very soon) is
fundamental to JavaScript, and will teach you how we can use a single line of code to affect the look of a
number of different elements. CSS is still pretty simple, but is slightly more complex than HTML to get
your head around, so it’s the perfect second language to learn as you develop your coding skills.

What does CSS look like?
Enough introduction! Let’s see some CSS in action. First off, add a paragraph to an empty webpage
containing the words: ‘I love HTML.’
Note – head to the beginning of the HTML chapter if you need a reminder on how to set up your text
editor, browser and a basic webpage.
Your code should look like this:
Now add a ‘style’ attribute, with a value of ‘color:blue’ so it looks like this:
Through the wonder of CSS, you’ll see that the text turns blue. Try experimenting with other colours.
Note to my British readers: you will have to use American spelling I’m afraid, colour:blue will not
work.
The ‘color:blue’ part is the CSS, and is a single CSS rule which applies to that particular <p> element.
Adding CSS using a ‘style’ attribute is known as inline CSS, as it is in line with the HTML.


Practice exercises
Try turning the text in this paragraph red using inline CSS: 
There is a problem with inline CSS though – if we want to make the text of every paragraph red, we have
to add a style attribute to each paragraph. This is messy, and if we suddenly want to change the colour of
all our paragraphs to green, we will have to update each one individually.
Fortunately, there is a solution to this problem, and it is called internal CSS.

What is internal CSS?
Internal CSS is when we include all the CSS together at the beginning of our HTML document (we will
meet the third and final type of CSS, external CSS, at the end of the chapter). It looks like this (4.1):
4.1
Look carefully at the <head>section of our webpage – it contains a new element, <style>, which contains
our CSS. The contents of the <style> section are:
Essentially this means ‘find all the <p> elements and change the text colour to blue’. The curly brackets {
and } contain all the rules that we want to apply to our p elements (the semicolon signals the end of a
rule). Now if we want to change all our paragraphs from blue to green we can do so just by changing the
CSS – we don’t have to go anywhere near the HTML.


Practice exercises
1 Try adding a second paragraph contain the text ‘I love CSS!’. You should see that both
paragraphs are blue. Then change the CSS to make them both green.
Your code should be something like this (4.2):
4.2
2 Change the styling in this webpage from inline to internal CSS: 
3 CSS is not limited to p tags. Add an <h1> element to your webpage and use internal CSS to
make the text yellow.
Your code should look something like this (4.3):
4.3


Classes and IDs
What if we wanted some paragraph tags to be blue and others red? We need a way to select elements
more precisely than just by their type. We do this using classes and IDs.

Classes
Adding a class attribute to an element is simple – change the code for the first paragraph to: 
We have now applied the class ‘blue’ to that paragraph. Now add the following code to the style section
of your webpage: 
Note: the . before ‘blue’ tells the browser that we are looking for a class. A period, or full stop, is
shorthand for class in CSS.
You should now find that the first paragraph is blue, and the second is green.
Try adding the class= “blue” attribute to the h1 element. You’ll see that the ‘My first webpage’
becomes blue as well. Classes allow us to provide specific CSS rules to as many elements as we like,
and to elements of any type.
Note that the paragraph with class ‘blue’ actually has two style rules applied to it. The p rule tells it
to be green, and the .blue rule tells it to be blue. As CSS states that the most ‘specific’ rule should win
out, rules defined by classes or IDs will always trump those applied to element types. So the
paragraph ends up blue, not green. This is the ‘cascading’ part of Cascading Style Sheets in action.

IDs
IDs are very similar to classes, but they should only be applied to one element on a webpage. They are
designed for elements that will only appear once, such as a header, footer or title.
We add them in exactly the same way as with classes, so try changing the ‘I love CSS!’ paragraph to
have an ID of ‘pink’: 
Now add the following CSS to the style section:
Note: here we use a hash symbol, #, to represent an ID. So in CSS, . is short for class and # is short for
ID.
You’ll notice that the ‘pink’ rule and the ‘p’ rule both apply to the ‘I love CSS!’ paragraph, but the ID
rule wins out. Rules relating to IDs and classes will always trump those related to element types.


Practice exercise
1 Add internal CSS to the webpage to make the first paragraph red and the second paragraph
blue using classes and IDs: 
We can now select elements by either their type, or their class or ID. We have only learned one CSS rule
though, which is how to change the colour of text. Before we look at other rules, we’ll quickly see how
we can use the <div>element to break up our code into different sections.

Divs
Div is short for ‘division’ and allows us to divide our code into different sections. This means we can
style each section differently if we want to. Remove all the code from the body of your page and replace
it with this: 
The result should look like this (4.4): 4.4
Question: Why is the text for both paragraphs now green?
Answer: We have removed the class and ID from the paragraphs, so now the only rule that applies to
them is the color: green rule. Therefore they are both green.
It might not look like the divs are doing very much, but they actually give us a lot of control over our
design when we start applying styles to them. Let’s start by giving them a background colour.

Background colours
We’ll now look at a range of different CSS styles that we can use. Remove all the CSS code from the style
tag and replace it with the following: 
This gives both divs a background colour of grey (4.5): 4.5
Note: The div stretches all the way across the browser window by default.


Practice exercise
1 Use classes to give the first div a background colour of red and the second one a background
colour of blue.
Don’t forget the . before the class name!

Colour codes
So far we’ve only used names to describe colours. As you can imagine, we usually want to be more
precise than that, and we do that using colour codes, which are like HTML entities for colours, with each
code representing a particular colour. Try these rules: 
The hash symbol # tells the browser that we are going to use a number to represent the colour, and then
we use a six-digit alphanumeric code (a code containing letters and numbers) for the colours that we
want, in this case purple and orange.
You don’t have to memorize all the codes – you can use a website like http://html-color-codes.info/ to
work out the colour code for the colour that you want to use.


Practice exercise
1 Update the styling for the paragraphs to the appropriate colour, using HTML colour codes: 

Changing sizes
We can use the width and height rules to change the width and height of our div. Try replacing the CSS
code on your page with: 
Your page should look like this (4.6): 4.6
Note that we can apply as many CSS rules to each element as we want. With CSS, we have to add units to
our widths and heights, so 200px means ‘200 pixels’ and ‘50%’ means ‘50% of the containing element’,
in this case the <body> element.

Positioning with floats
So far we’ve seen how to use CSS to adjust colours and sizes, but we can also use CSS to affect layout.
Up until now, all our elements have appeared below each other, but we can change that using floats. Try
adding this CSS rule to the .divA rules: 
Your page should now look like this (4.7): 4.7
Notice what has happened: divA is now ‘floated’ on the right of the page, and divB is in line with it on the
left. Try making the following changes:
1 Adding float: left to the .divB rules.
2 Changing the width of divB to 20%.
3 Adding a paragraph after divB with the content ‘This is some text’.
Can you explain the resulting layout? It should look like this (4.8): 4.8

We now have a three-column layout, with the red div on the right, the blue on the left, and everything else
in the middle. Floats are an extremely useful way to arrange divs or other elements to the left or right of
each other.


Practice exercise
1 Update the internal CSS on this web page to make #left float left and #right float right: 

Layout with positions
Sometimes we want to be even more precise with our layouts than floats can allow, and we do that with
positioning. If we want to move the position of, say, div A, relative to where it would otherwise be, we
can add the following CSS rules: 
This will move it 50 pixels down and 100 pixels to the right (4.9): 4.9
Try experimenting with different values of ‘top’ and ‘left’.
Question: How do negative values (eg -50px) of ‘top’ and ‘left’ affect the position of the div?
Answer: They move it upwards and to the left.
So using position: relative will move the element relative to where it would otherwise be. Try adding: 
to the divA rules. What effect does that have? It actually removes the div from the flow of the page, so the
other elements ignore its existence. This can be useful if you want to position an element relative to the
page, rather than relative to other elements. You can still use ‘top’ and ‘left’ to move absolutely
positioned objects around (4.10): 4.10



Practice exercise
1 Update the internal CSS to give the #home div an absolute position of 10 pixels right and 10
pixels down and the #next div a relative position of 50 pixels right and 10 pixels up: 

Margins
Margins give an alternative, and in some ways simpler, way to position elements. To see it in action,
remove all the floating and positioning rules from divA and divB and add the rule below to divA: 
This gives a 20-pixel margin around the red div, which looks like this (4.11): 4.11
We can also set the top, bottom, left and right margins individually – try adding these rules to divB: 
This effectively moves the blue div 50px down and 100px to the right (4.12).
4.12


Practice exercise
1 Give the div with the ID box a margin of 10 pixels at the top, 15 pixels on either side and 20
pixels on the bottom setting each margin individually (eg margin-top) 
Margins are a great way to move objects around and leave a gap where the object would have been. In a
similar way, we can use padding to add a margin inside the element.

Padding
In both the red and blue divs, there is no padding around the text inside the div. Usually it’s prettier to
leave a gap between the text and the edge of the div, and we do that using padding. Try adding this rule to
divA: 
This adds 10 pixels of padding inside the red square (4.13): 4.13
Curiously, this moves the text downwards more than it does move it to the right. This is because of a
default margin built into the <p> element.

Challenge 1
Remove the margin from the p element by adding a CSS rule margin:0.
Answer: Your code should look like this (4.14): 4.14
Adding the code to set the margin for all <p> elements to 0 corrects the problem, and the padding is now
10 pixels all the way around the red square.
Try experimenting with padding-top, padding-bottom etc with divB to see what effect they have.
Padding is a great way to add a little space with in your elements, to give your content room to breathe.


Practice exercise
1 Style the #box div to have padding of 15px on the top, right, bottom and left sides with as few
commands as you can: 

Borders
Adding borders to your elements is a simple way to separate different parts of your webpage. Borders
can make a complex page much more readable, and are a good way to bring in a little graphical flair
without using images.
Let’s remove everything from our webpage except the red div and its contents (4.15): 4.15
To add a border to the red div, just add the following style: 
This has this effect (4.16):
4.16
Note that this style is a little different to the others we have seen so far, in that it includes three values:
5px: this is the width of the border.
solid: this is the border type. You can experiment with different border types, such as dotted, dashed,

groove and ridge. You’ll likely use solid most of the time though.
grey: this is the border colour. You can use any colour you like, or HTML colour codes such as
#47D812.

Challenge 2
Create a 10 pixel dashed border in pink around divA. Your code should look like this: 
And in action (4.17):
4.17
Borders can get pretty garish, so keep them simple.

Rounded corners
Related to borders are rounded corners. These were added in CSS 3, the latest version of the CSS
language. To add them, we use the border-radius property. Try replacing the border style for divA to: 
4.18
Now we have an attractive rounded rectangle (4.18). You can adjust the border-radius value to anything
you like to increase the roundedness, but 5–10 pixels is usually about right for most situations.
Question: What happens when you set the border-radius to 50%? Why?
Answer: We get a circle.
We get a circle because the radius of the curved edge is equal to half the width of the div (ie 100 pixels in
this case). That means there is no room left for any straight edges – the whole of the border is rounded,
and thus we are left with a circle.
Note that the rounded corner is only applied to the background and not the content – you would have to
add some padding to the div to position the text completely inside the circle.


Practice exercise
Practise adding a simple border and rounded corners to two divs here: 

Fonts
Just like with a standard Word document, we can change the fonts used on our webpage. So far, we have
displayed all text in the browser’s default font (in Chrome’s case this is a version of Times New Roman).
To keep our webpage simple, remove the red div and its styles, and add a paragraph which says ‘This
is some text.’ (Or something more creative if you fancy.) Your page should now look like this (4.19): 4.19
Now add the following style:
This changes the text to the browser’s default sans serif font.
Sans serif means without serifs, ie without decorative lines or ‘ticks’ at the end of each letter. Sans
serif fonts are usually seen as more modern and cleaner than serif fonts.
Note: we have applied the font-family property to the body, not the paragraph element. This means
that all text on the page will be affected, which is usually what we want, as most web pages use just
one font.

Fancier fonts
We don’t have to limit ourselves to the default serif and sans serif fonts, we can use any font we like.
However, if our website is popular, it will be accessed from a range of different devices, which may not
have the font that we want to use installed. In this case, we can set up a list of fonts, and the webpage will
use the first one that is available.
For example, try this style:
If you’re accessing the site on a computer, you will likely see the text in the Comic Sans font.
However, if that font isn’t available on a user’s device, it will fall back to the device’s default
‘cursive’ (ie handwriting-style) font, and if that is not available it will use the default sans serif font.
A nice example of this is the ‘Better Helvetica’ CSS trick at https://css-tricks.com/snippets/css/better-
helvetica/: 
Helvetica Neue is a font known for being modern, simple and stylish, but only Apple devices make it
available as a default. This CSS style will select that font if it is available, but offers a range of fallbacks
to pick the ‘prettiest’ version of the font available as you can see on the right (4.20): 4.20
It is generally recommended to stick to ‘web safe fonts’ if you want to be confident that all your users will
see the font that you intend. To get a list of these fonts, just type ‘web safe fonts’ into your favourite search
engine.


Practice exercise
Create some text using the Georgia web safe font with a fallback of serif: 

Styling text
We can do a lot more with text than just set the font – we can make text bold, italic, underlined, and a lot
more. To make our paragraph text bold, we just use: 
See this in action (4.21):
4.21
What if we wanted to make one or two words within our sentence bold? To do that, we’ll need to
introduce a new element called span. In itself, this element does nothing, but it allows us to style
individual 
parts 
of 
an 
element. 
Try 
replacing 
the 
paragraph 
HTML 
with: 
The span element in itself doesn’t affect the style of the text at all (4.22): 4.22

However, it does allow us to apply a style only to the contents of the span: 
Remember #bold means ‘apply these CSS rules to the element with an ID of bold’.
Now only the word bold is in bold (4.23): 4.23
Similarly, we can use a second span to add some italicized text. Change the HTML to read: 
Then apply this CSS rule to the italic span: 
Your code output should look like this (4.24): 4.24

Challenge 3
The CSS rule to underline text is text-decoration: underline. Add the words ‘and this is underlined’ to
the paragraph, and set up a span and a CSS style to underline the last word.
Your HTML should look like this:
And your CSS should have this rule:
The final outcome should look like this (4.25): 4.25
You can of course combine these styles to have bold and underlined text, and there are other text styling
options – you can see more of them at www.w3schools.com/css/css_text.asp


Practice exercise
1 Use CSS to make some text bold and italic: 

Aligning text
Just like in a word processor, you can use CSS to align text left, right or justified (so that the words
spread out to fill the space available). To do this, just add the following style: 
Applying this to a simple paragraph looks like this (4.26): 4.26
To set the text to be aligned to the left, use: 
This is the default, so you don’t usually need to use it. For justified, just use: 
Note that you’ll need to have enough text to go over the end of the line to see this in action. Using some
Latin text from ipsum.com as we did before, the result is (4.27): 4.27
You can see that the spaces between the words are different on each line, which makes the ends of the
lines line up nicely. This works well with long pieces of text such as blog articles, but not so well with
general website content, so use sparingly.


Practice exercise
Practise setting text to be justified here: 

Styling links
Links can be styled like any other HTML element, but there are a couple of settings that you’ll likely want
to use specifically with links.
The first is to remove the underlining of links – this has become unfashionable in recent years, with
links usually being identified using colour. To remove the underline from a link, just use the style:
More interestingly, we can also use what are known as pseudo classes to style what a link looks like
when it is hovered over by the user. To do this, use:
Combining these two commands gives us a link that is not underlined, and turns green when you hover
over it (4.28):
4.28
A pseudo class is so named because is not a ‘real’ class in that it doesn’t refer directly to an element, but
to a particular state of that element, in this case the hover state. So it’s not a normal class that we define,
but a particular ‘state’, such as when a link is hovered over, or if the element is the first one in a list. If
you 
want 
to 
learn 
more 
about 
pseudo 
classes 
you 
can 
do 
so 
at
www.w3schools.com/css/css_pseudo_classes.asp.

Open in a new tab
This is not strictly a CSS command, but while we are styling links, having the option to open a link in a
new tab or browser window can be very handy. We can do this by adding target= _“blank” to the link,
like this:


Practice exercise
Practise styling links and opening them in new tabs: 

CSS project: clone a website
A great way to practice CSS is to clone a website that you like the look of. You could start with something
fairly simple, like www.google.com, and move on to something a little more complicated, such as
bbc.co.uk/news. Pick any site you like, and try to create an accurate copy of it. It’s not an easy task (and it
will probably involve plenty of googling), but you’ll learn a huge amount in the process.
When you’re done, paste your code into a site like codepen.com, and share the link with me on Twitter
(@techedrob). I look forward to seeing what you can create.

Summary
Congratulations, you now know the basics of CSS. You know how to add a range of styles, layouts and
formatting to a website, and combined with the HTML skills you learned in the previous chapter, you
should be able to design pretty much any website you like.
Having covered HTML (for content) and CSS (for style and layout), we will now be moving on to
learning JavaScript, for interactivity. JavaScript will allow you to add a huge amount of power to your
webpages, allowing the user to interact with them just like they would an app or piece of software.
JavaScript is a whole new world of coding, so let’s get started.

Further learning
As before, I’d advise moving on to JavaScript for now, but if you’ve got the CSS bug, these further
learning links will help you learn more about cascading style sheets.
www.codecademy.com/courses/css-coding-with-style/0/1 – interactive CSS coding lessons.
www.w3schools.com/css/ – CSS tutorials from W3Schools.
http://learnlayout.com – create great flexible layouts with CSS.
https://play.google.com/store/apps/details?id=com.sololearn.csstrial&hl=en – Android app to teach
you CSS.
https://itunes.apple.com/gb/app/learn-css/id953955717?mt=8 – iPhone and iPad app to teach you
CSS.

05
JavaScript
We’ve now looked at HTML for content, and CSS for style and layout. It’s time to bring in the third piece
of the puzzle, JavaScript, which allows for interaction with the user. Unlike HTML and CSS, JavaScript
is a ‘full’ programming language in the sense that we can use it to run computer programs: pieces of
software that can do pretty much anything the coder wants.
In this chapter, we’ll cover:
what JavaScript is and how it is used;
how to use JavaScript to create an interactive webpage;
running JavaScript in response to a user action such as a click; and
how to use JavaScript to:
– change the content and style of web pages
– use programming fundamentals such as loops and if statements
– generate random numbers
– create a ‘higher or lower’ guessing game.

What is JavaScript?
JavaScript is our first ‘proper’ coding language. It allows us to use programming tools such as loops,
variables and if statements (we’ll find out what these are shortly). It can be used for a whole range of
tasks, from making a piece of text disappear when we click on it to creating full apps, such as the Google
Docs suite of office applications.
Any website that provides interactivity without reloading the page uses JavaScript.
JavaScript was created in 10 days in May 1995 by Brendan Eich, working at Netscape, one of the first
browsers. It was originally called Mocha, and then Livescript. Interestingly, it has nothing to do with the
Java programming language beyond the name. Netscape was given permission from Sun (who owned the
Java language) to use the name JavaScript, primarily as a marketing technique, as Java was a very
popular language at the time.
JavaScript has gone through many iterations and developments, but the latest standard version (which
we will learn here) is supported in all browsers, on both desktop and mobile platforms.
One important aspect of JavaScript is that it runs on the user’s computer, rather than a server. This
makes it what is known as a client-side language. Therefore to do anything requiring a server, such as
send an email, or signing up a user to your new social network, you’ll need to use a server-side language
such as Python, which we will learn in the next chapter.
5.1

Why learn JavaScript?
If you’re not convinced already, the benefits of learning JavaScript are many. Primarily, it is our first
‘proper’ programming language, allowing us to develop full, interactive apps and websites, rather than
just create layouts and static web pages.
It’s also very similar to a number of other languages, so once you learn JavaScript, you’ll be able to get
started with any other language much more quickly.
As JavaScript works in all browsers, you don’t need to download any extra software to get started with
it. And it uses classes and IDs, just like CSS, so it’s strongly linked to what you have already learned.
It’s a simple language to get started with, but as with CSS is hugely powerful, and so is a great first
coding language to learn.

What does JavaScript look like?
JavaScript is very simple to get started with. To begin, go back to a basic HTML page in your text editor,
and add a button using this code:
It should look like this (I’ve zoomed in on the button to make it clearer) (5.2):
5.2
Of course, when you click the button, nothing happens. Let’s change that with some JavaScript magic.
Change the button code to the following:
(Make sure you get the right type of quotation marks – we need ‘ on the outside and “ on the inside.)
When you click the button, you should now see this (5.3):
5.3

Hurrah, you’ve run your first piece of JavaScript! The onclick attribute allows us to write some
JavaScript which will be run when the button is clicked. The actual JavaScript we are running is:
The alert command means ‘create a popup window with a message for the user’, and that message is
contained within the single quote marks, ie Hello there!. In JavaScript a command is usually followed by
parentheses, or brackets, containing information for the command. In this case, the information is the text
to be displayed in the popup.


Practice exercise
1 Change the code so that instead of alerting Hello there! it alerts Hello and then your name.
Your code should look something like this:
Running JavaScript like this is known as inline JavaScript, just like inline CSS as we saw at the
beginning of the previous chapter.

Internal JavaScript
Running JavaScript like this is much like running CSS using the style attribute – it works, but it’s messy,
and is a frustrating experience if you are trying to write more than a simple alert command.
Just like CSS, we can separate out our JavaScript from our HTML using internal JavaScript. With
CSS we used <style>tags, and with JavaScript we use <script>tags. Those tags can go in the header of
our HTML page, but we’ll be putting them at the end of the page. This is generally good practice, as it
makes sure all the elements of the page have been created by the browser before we try and run
JavaScript on them.
To create some JavaScript which alerts Hello there! when the page is loaded, add this code to your
HTML page, just before the </body> tag: 
You’ll now see the alert popup when the page is loaded (you might need to refresh the page to see this
effect), like this (5.4): 5.4

Internal JavaScript – responding to a click
When we used inline JavaScript, it was obvious which element was going to trigger the JavaScript,
because the onclick attribute was within that element. So how do we associate our internal JavaScript
with the button? The answer is the same as with CSS – we use IDs.

Challenge 1
Remove the onclick attribute from the button, and give it an ID of ‘click-me’.
Your button code should now look like this:
Now, to make something happen when that button is clicked, put the following code between the
<script>tags: 
This is perhaps the most complex code we have seen so far, but it’s fairly straightforward when you break
it down.
First, ‘document’ refers to the HTML page itself, telling the browser that we will be looking for
something within the page.
Next getElementById(“click-me”) does exactly what it says – it gets an element by its ID, in this case
the ID is ‘click-me’.
The ‘onclick = function()’ part means we are setting the onclick attribute of our element equal to a
function (a function is just a chunk of code that does something). The empty parentheses just mean that we
are not passing any values to that function.
The { and }, known as curly brackets, contain the code for the function. Curly brackets are the standard
way in JavaScript and many other languages to contain code for functions.
Finally, within the curly brackets we have our familiar alert(“Hello there!”) which displays the alert.
All together in plain English, the code means:

Take the HTML page and find within it an element with an ID of ‘click-me’.
Then alter that element so that when the user clicks on it it will display an alert with a text of ‘Hello there!’. Simple!
You may want to re-read the above paragraphs a couple of times to get everything clear, and then try this
challenge.

Challenge 2
Remove the button and script tags from the page (so you are starting with a blank HTML document). Then
add a link (not a button) with the text ‘Who am I?’ and add JavaScript so that when the link is clicked it
alerts your name. (You will need to choose an ID for your link.) Your code should look like this:
And in action (5.5):
5.5


Practice exercise
Add JavaScript to popup Button Clicked! when the button is clicked on the page: 

Changing styles with JavaScript
As well as displaying alerts, we can change styles with JavaScript as well. Let’s add a paragraph of text
to our page with an ID of ‘text’ and change the link text to ‘Turn text red’: 
Now, change the alert(“Rob”) line to the following: 
Here, we’re getting the element with ID ‘text’, then getting its colour, and setting it equal to red. Try it out,
and you should find the text goes red when you click the ‘Turn text red’ link.
We can adjust any style this way, so try to make the following happen when the link is clicked:


Practice exercises
1 Make the text blue.
2 Underline the text (you’ll need to use textDecoration instead of text-decoration).
3 Make the text size 20px and right aligned.
Answers
1 document.getElementById(“text”).style.color = “blue”
2 document.getElementById(“text”).style.textDecoration = “underline”
3 Here you’ll need two lines of code:
document.getElementById(“text”).style.fontSize =“20px”
document.getElementById(“text”).style.textAlign = “right”

Getting some information from the user
Now that we know how to respond to a click with alerts and style changes, let’s get a little more
information from the user with a text box.

Challenge 3
Remove your link and JavaScript, and add a text field (input), along with a button that says ‘Submit’. Set
up the button so that when it is clicked the page alerts ‘Clicked!’.
Your code should look something like this:
And in action (5.6):
5.6
Tip: Whenever you are writing some new JavaScript, it’s a good idea to set up a simple page like this
to make sure everything is ‘wired up’ and working correctly. Otherwise you can spend a lot of time
debugging your code before realizing you forgot to capitalize the ‘I’ in getElementById!
Now let’s change the code so that instead of alerting ‘Clicked!’ it alerts whatever the user has typed in
the box. First, let’s give the text input an ID, like this: 
Next, 
change 
the 
alert(“Clicked!”) 
line 
in 
the 
JavaScript 
to 
this: 
Can you see what is going on here? We are now alerting the value of the element with ID ‘my-input’
within the document, or HTML page.
Try it out. You should find whatever you type in the box is alerted (5.7): 5.7

Now we are getting some real interaction, so it’s time to learn a couple of fundamental programming
concepts. The first is an ‘if statement’.

If statements
If statements are absolutely fundamental to programming. They instruct the program to do something only
if a condition is met. This might be logging into your favourite website – ‘if the username and password
match an entry in the database, log the user in’. Or it might be one of the rules in a game – ‘if Mario
touches the bomb, kill Mario’.
Here we will set up a simple password system to see if the user knows the password. First, add the text
‘What is the password?’ before the input (5.8): 5.8
Now we need to test what the user enters to see if it matches a pre-defined password. Let’s set the
password to ‘coding’. We can then replace the alert… line in our JavaScript to this: 
If you look carefully at the code, you should be able to see what is going on. We start with the ‘if’
keyword, and then we have our condition in parentheses. The condition here is that the value in the text
box must be equal to the word coding. If that is the case the system will alert ‘You got it!’. If not, it will
do nothing.
Notice the double equals == here. In JavaScript (and almost all programming languages), we use a
single equals to set something equal to something else, like when we set the onclick attribute equal to the
function in the screenshot above. We use a double equals to test if something is equal to something else.
It’s a distinction you’ll need to get used to, and your code will behave very strangely if (when!) you get it
the wrong way round.
Try it out! Does it work as expected? (5.9.)
5.9

What if the user gets the password wrong? Doing nothing is not a great feature – it would be better to tell
the user that they have got it wrong. We can do that using the else keyword. Add the following just after
the final } in the above code: 
Now if you get the password wrong you’ll see this (5.10): 5.10

Challenge 4
After removing all the code from your webpage, create a game where the user has to guess your favourite
number. Add an if statement to tell them whether they got it right or not.
The 
code 
should 
have 
been 
fairly 
similar 
to 
our 
password 
example: 
And in action (5.11):
5.11


Practice exercises
1 Update the value of x so the if statement gives the output x is less than five: 

Updating website content
Before we learn the second fundamental programming concept (loops), let’s see how to update website
content with JavaScript. So far, we’ve only used alerts to display information to the user. Alerts are
useful, but they are rather distracting; often it is better to just display the answer on the page itself. Let’s
find out how.

Challenge 5
Remove all the code from your webpage. Then add in an empty paragraph with an ID of ‘my-paragraph’
and a button which, when you click it, alerts ‘That was easy’.
This should have been a doddle by now. A testament to the power of repetition!
And in action (5.12):
5.12
Now we’re going to change the code so that it adds some content to the empty paragraph when the button
is 
clicked. 
Replace 
alert(“That 
was 
easy”) 
with 
this 
code: 
You should now see the text appear when you click the button (5.13): 5.13

We can now interact with the user in a more natural way, so let’s try a challenge involving an if statement.

Challenge 6
Set up a webpage with the text ‘What is your name?’, a text input and a Submit button. Then when the user
enters their name, add the text ‘Hello [name]!’ to a blank element on the page.
Note: for this challenge you will need to combine their name with your own text. You can do that like
this: 
The + symbol concatenates, or joins together, the Hello, the value of the text box, and the !.
Your code should look like this:
And in action (5.14):
5.14

Loops
Loops are a way of repeating the same action again and again. Twitter uses loops to display a timeline of
tweets, and Google uses them to display your search results. It’s fair to say software as we know it
wouldn’t exist without loops.
Before we start, remove all the code from your page, and replace it with an empty div with an ID of
‘numbers’.
We’re going to create a simple loop to display the numbers 1 to 50 on our page. To do this we will
need a variable to keep track of the number that we are on as we go through the loop. A variable is just a
container for a number or some text, and we create one with the keyword var.
This creates a variable called ‘number’ and sets its value to 1. The loop then works like this: 
The ‘while’ keyword here means ‘keep doing this code as long as this condition is true’. The condition is
that the variable number has to be less than or equal to 50. Then, within the curly brackets (‘the loop’),
we add the current number, wrapped in <p>tags, to the content of the numbers div (that’s what the +=
does). Finally, we add 1 to number, and repeat the loop until number is bigger than 50.
You might want to read that through a couple of times, and of course try it out for yourself. When you do
you should see this (5.15): 5.15
The list on the left goes all the way down to 50.


Practice exercises
Change the above code so that it displays:
1 All the even numbers up to 100.
2 The three times table, up to 30.
3 A countdown from 10 to 0.
Answers:
1 Just change the first line in the loop to: var number = 2
and the while statement to: while (number <= 100) and the last line to: number =
number + 2
That will generate all the even numbers from 2 to 100.
2 Now change the first line to: var number = 3
and the while statement to: while (number <= 30) and the last line to: number = number
+ 3
Voila, the three times table!
3 For this challenge, change the first line to: var number = 10
and the while statement to: while (number >= 0) and the last line to: number = number −
1
You then have a countdown from 10 to 0.

For loops
There is a second type of loop that you should be aware of. So far we have focused on while loops, but
there are also for loops, which do the same thing but are structured slightly differently. A for loop looks
like this: 
Unlike a while loop, in a for loop all the information about the for loop is contained in a single line. In
this case the counter variable is called i (a commonly used letter in for loops), and it starts at 1, increases
by 1 each time and continues until i is no longer equal to or less than 50. The effect is exactly the same as
with while loops – which you use depends on context and personal preference. For what it’s worth, I
generally prefer while loops as I find they are more flexible.

Generating random numbers
We’re close to being able to make a simple guessing game with JavaScript, but to do that we’ll need to be
able to generate a random number. We can do that using this function: 
If you try this out using something like: 
You’ll see it generates a random decimal number between 0 and 1 (5.16): 5.16
For our guessing game we need a random whole number between 1 and 10. To do that we use this
function: 
This isn’t as impenetrable as it looks! The ‘* 10’ means ‘multiply by 10’ so we now have a random
number between 0 and 10. The Math.floor part ‘floors’ the number by removing everything after the
decimal point (so 6.74628748 would become 6). This gives us a random number between 0 and 9, so we
add 1 to it to get a number between 1 and 10.
Try 
it 
out 
by 
changing 
your 
code 
in 
the 
above 
page 
to: 


Practice exercises
Generate a random whole number between:
1 1 and 5
2 11 and 20
3 0 and 100
Answers:
1 Math.floor((Math.random() * 5)) + 1
2 Math.floor((Math.random() * 10)) + 10
3 Math.floor((Math.random() * 100))

JavaScript project: guessing game
Using variable, loops and if statements, you have the power to make a whole range of apps, websites and
games. We’re going to be working on a simple guessing game, where you have to guess the number that
the computer has chosen.
The concept is pretty simple – when we load the page, the user will be asked to guess a random number
between 1 and 10. If they get it wrong, they will be told whether they were too high or too low. If they get
it right, they will be told so and given the chance to play again.
This challenge will involve putting together almost everything we’ve learned so far – interacting with
elements, changing styles, variables and if statements. You are welcome to stop reading now and attempt
the challenge, but I would advise working it through in stages, which we will do using mini-challenges.
The process would be similar to designing any website or app – start with the user interface, and then
add the interactions gradually, checking that everything is working as you go.


Part 1: Create the user interface (a title (use an h1 element),
instructions, a text input and a submit button)
There are many possible layouts, but mine is fairly simple.
5.17


Part 2: Basic interactivity (display the number that the user has entered)
Add in IDs for the elements and an empty paragraph, and fill it with the user’s guess when they press the
button: 
5.18


Part 3: Add in the random number generator and check the user’s guess
against that number, displaying an appropriate message
We 
don’t 
need 
to 
change 
the 
HTML 
at 
all 
now 
– 
it’s 
all 
in 
the 
JavaScript: 
We have one slightly new construction here: else if. This allows you to test another if statement if the first
one turns out to be false. Then we have a final else at the end, which will be processed if the first two
statements are false. If the guess is not higher or lower than the number, it must be the right answer!
Try it out (5.19):
5.19


Part 4: Change the colour of the text of the text depending on whether
the answer is correct (green for yes, red for no) and give the option to
play again
We use the following to change the text colour: 
To ‘play again’ we can just reload the page. We can do that with an empty link (<a href=“”>) so let’s add
that to the success message.
Here we go (5.20):
5.20
That’s it. You’ve made a fully functional, interactive game using HTML, CSS and JavaScript –
congratulations!

Summary
This is of course just the beginning of what JavaScript is capable of, and if you want to experiment further
there are a lot of options. Try thinking of simple games that you could recreate in JavaScript, such as
simulating a coin toss, hangman, or even something like Snake from the old Nokia phones. There are
numerous tutorials and guides online – just Google what you want to do followed by the words
‘JavaScript tutorial’ and you’ll probably find something relevant!
Now that we’ve covered HTML for website content, CSS for style and layout, and JavaScript for
interaction, we’ll be looking at our first server-side language, Python.
Python is a simple and clean language, and similar to JavaScript in many ways. We’ll see how we can
build more complex structures with it, and make more sophisticated programs.
There’s a lot to learn, and a lot of fun to be had too. Without further ado, let’s jump in and see what we
can achieve with Python.

Further learning
If you want to dip your toe a little deeper into the world of JavaScript, you can use these links to
experiment further and learn more:
www.codecademy.com/learn/javascript – interactive JavaScript lessons.
www.w3schools.com/JS/ – free JavaScript tutorials.
www.learn-js.org – free interactive JavaScript tutorials.
https://play.google.com/store/apps/details?id=com.sololearn.javascript&hl=en_GB – learn JavaScript
on Android.
https://itunes.apple.com/gb/app/learn-javascript/id952738987?mt=8 – learn JavaScript on iPhone or
iPad.

06
Python
At the risk of boring you silly, let’s quickly recap what we’ve learned so far. We started off looking at
HTML, which allowed us to add content to webpages. Then we learned CSS, which we could use
alongside the HTML to add styles and customize the layout of our webpage. Next, we saw how we could
use JavaScript, our first ‘proper’ programming language, to make our pages interactive and allow the user
to do something on our page and get a response.
So what’s missing in our coding armoury? Well, so far everything we are doing happens completely in
the user’s browser. To be able to build software that allows users to communicate with each other, we
need something called a server. A server is essentially a computer that is always on and always
connected to the internet. Our computer can then contact that server to download information, save some
content on the server (such as our latest tweet) or send data (such as an email) to another computer.
6.1
Therefore to be able to build truly powerful websites and apps, we need to write code that can run on a
server. Although it is possible to use JavaScript on a server, it is more common to use other languages
such as PHP or Python.
Here we are going to use Python, for several reasons:
Python is a simple and straightforward language, even more so than JavaScript;
Python can be used to build software on almost any platform, from servers to Raspberry Pi’s, enabling
you to build anything from websites to robots; and
Python can be used to automate daily tasks, such as getting information from websites or automatically
renaming your files (we’ll see how to do that later in this chapter).

What is Python?
Python was developed in the late 1980s by Guido Van Rossum in the Netherlands. Van Rossum named the
language after Monty Python, being a big fan of their Flying Circus.
Van Rossum is still actively involved in the development of the language, and as such has been given
the title Benevolent Dictator For Life (BDFL) by the Python community.
Since its birth it has gone through a number of versions, and is currently at version 3. It is used widely
to build both web-based and desktop applications, as well as on Internet Of Things devices such as the
Arduino. This makes it an extremely powerful and flexible language to learn.

Why learn Python?
I don’t want to build robots, do I really need to learn another language?
If you are not looking for a career in coding, you might be wondering if it’s worth learning a second
language after JavaScript. The answer is, of course, yes, but why?
Learning two languages allows you to see what languages have in common (and what they don’t). Once
you know how to create a loop in two languages, you’ll be much clearer on what the critical parts of a
loop are. The same is true with if statements and variables. Every language has its own idiosyncrasies,
and if you only learn one language you won’t have much insight into what they are.
So stick with me – even if you’re not convinced that learning two languages is useful, if you ever have
to extract, for example, all the email addresses from a webpage, Python can do that for you (and we’ll see
how at the end of the chapter).

What will this chapter cover?
As usual, we’ll go through the whole process of running some Python, building up our skills and then
practising with a few projects and exercises.
We’ll also be working towards a big project, where we’ll attempt some ‘website scraping’ – collecting
data such as names and email address from a webpage. This will be your toughest challenge yet.
Specifically, we’ll cover:
what Python is and how to use it;
using variables, loops and if statements in Python;
more advanced features such as Lists and Regular Expressions; and
extracting data from webpages.

How do we get started with Python?
Unfortunately, Python is not quite as easy to get started with as HTML, CSS or JavaScript, as it does not
run on a browser. To try it out, you have two choices – the easy way or the hard way.

The easy way
There are a number of Python interpreters that will process Python code for you on the web. In this
chapter I will be using https://repl.it/languages/python3, and my advice to you would be to do the same. It
requires no installation or setup, and you can get started right away. There are a number of other websites
you can try which do the same thing, such as www.tutorialspoint.com/execute_python_online.php and
www.skulpt.org.

The hard way
Another option is to install Python on your computer and run it directly from there. This has the advantage
of not requiring an internet connection, and allows you to try out a full installation of Python, but it does
require some trickier setup. I would recommend against this method unless you are a fairly advanced
computer user.
If you’d like to try this way, you can download Python at www.python.org/downloads/ (choose the
latest version 3 available). You only need to do this on Windows – most OSX and Linux machines come
with Python built in.
Once Python is installed, you will need to create a text file called, for example, mypython.py. You can
do that in your text editor using File → Save As.
You will then need to open up a command line window, which you can do by typing cmd in the search
box on Windows, or opening the Terminal app in OSX.
You can then run the Python script using the command:
This will then display the output of your script. You can also just type:
to be able to run individual Python commands.
If you have problems with this method, there are a number of online guides to help you getting started
with Python, or you can just use the easy way recommended above.

‘Hello World’ with Python
Now that we are up and running with Python, let’s run a basic script. If you are using the easy method,
when you go to https://repl.it/languages/python3 you should see this screen (6.2):
6.2
Here, you can enter your Python code on the left and click the ‘run’ button to see the output in the box on
the right. If you make something you are particularly proud of, you can share or save your work too.
Our first Python script will simply output the words ‘Hello World’. To do that, enter this code on the
left and click the ‘run’ button.
This will give you this output (6.3):
6.3
So what does ‘print’ do? Unlike JavaScript, with Python we don’t have a webpage to interact with, or to
‘alert’ our information to the user. Instead, we have something called the console. This is used in most
programming languages (there is actually one in JavaScript as well) and it’s a space for developers to

view the output of their code.
The console is often used when debugging, to allow us to check the values of variables for example,
and we’ll be using it here to see what our program is doing.
So print(“Hello World”) prints the words ‘Hello World’ to the console, ie the black box on the right.
Simple as that!

Variables in Python
In JavaScript we used ‘var’ to create a variable. In Python we just define the variable like this:
This will create a variable called ‘name’ with a value of ‘Rob’.

Challenge 1
Create a variable with a value of your name and then print it to the console.
Solution: Your code should look like this:
Notice that we use print(name), not print(“name”), because ‘name’ is a variable name, not a value.
6.4
We can combine strings with a +, just like in JavaScript. Try changing your code to output ‘Hello’
followed by your name (6.5):
6.5

Boolean variables
Like many other languages, JavaScript includes Boolean Variables. Named after George Boole, an
English mathematician who specialized in logic, they can only take the values True or False.
You might want to use them to check if a user is logged in, for example. You would create the variable
in the normal way:
You could then use if statements, covered later on in the chapter, to test whether or not the user is logged
in.

Lists
Lists are similar to variables but they allow us to store many values in one object. When you are viewing
your inbox, for example, your email app can’t create a differently named variable to contain the content
for each email. Instead, programmers use Lists. Lists are also known as arrays in other languages.
To create a List containing the names of the members of your family, you would use code like this:
The square brackets ([ and ]) define a List, and then we separate the different members, or elements of the
List with commas.
We can then print the whole List using:
and if we want to access a particular element within the List we use the square brackets again:
Note that the numbering for the List elements starts at 0, so names[2] would return ‘Tommy’. This is easy
for new programmers to forget, and a common mistake is to think that names[3] returns the third element
in the List, when it is in fact the fourth.
The number of an element is known as its index.
To see all this in action (6.6):
6.6


Practice exercises
1 If I create a List using the following code:
what would be returned by: flavours[3]
flavours[4]
flavours[0]
flavours[1] + “and” + flavours[2]
Answers:
Mint Choc Chip
Nothing (this would give an error in your code) Strawberry
Chocolate and Vanilla

Manipulating Lists
When working with Lists, we often need to change values for elements, add elements on to the end, or
remove elements. We can do all of these easily in Python.
To 
change 
an 
element’s 
value, 
just 
adjust 
it 
in 
the 
usual 
way, 
for 
example: 
To remove an element from an List by its value, use .remove: 
Or to remove an element by its index, use .pop: 
To insert a value at a particular point in the List, we can use .insert, like this: 


Practice exercise
1 What command (or commands) would be required to turn the List:
into:
Answers: 

For loops
In the JavaScript chapter we used loops to repeat a chunk of code several times. We can do the same thing
in Python, but it looks a little different: 
Let’s see this in action (6.7): 6.7
Hopefully this makes sense – range(0, 3) means loop through the whole numbers from 0 up to (but not
including) 3. The : defines the beginning of the content of the loop and then x is printed each time the loop
runs.
In JavaScript we used { and } to define our loop content. Here there is only a : – it is the indentation
that sets the limits for the loop content.
Try some loops out for yourself:


Practice exercise
Use loops to display:
1 The 3 times table up to 30.
2 The 5 times table up to 100.
3 The number sequence 5, 4, 3, 2, 1.
Answers:
1
for x in range(0, 11): print(3*x)
2
for x in range(0, 21): print(5*x)
3
for x in range(0, 5): print(5 − x)

For loops and lists
For loops in Python were really designed for looping through Lists. Say, for example, we had a List
defined like this: 
We could display all the elements in the ages List like this: 
6.8
After a year we may need to add one to all of these ages. We could do it manually, but it would be much
neater to do it with a loop. To do this we need to know the index of each item in the array (remember the
index of the first item in the array is 0, the second is 1, etc).
We can’t get that with our current for loop, so we need a different approach. Instead of looping through
the array, we loop through the indexes, starting at 0, and going up to one less than the number of items in
the List. We can get the number of items in the List, or the length of the list, using the len command: 
In our case, this returns 4 (6.9): 6.9
So we can use a range to loop through the List indexes. Remember that range(0, 10) loops through the
numbers 0 to 9, so range(0, len(ages)) will loop through each of the List indexes.
Finally then we can solve the problem of adding 1 to each value in the list: 

This code loops through the numbers 0, 1, 2 and 3, and then adds 1 to the List values in each case. You
can see the result on the right below, as each of the values is increased by 1 (6.10).
6.10


Practice exercises
1 Create a List containing any five numbers, and then loop through the array, doubling each
number. Finally print the output to the console.
Answer:
6.11
2 Create a List containing four names. Loop through the List, printing ‘Hello [name]’ to the
console each time.
Answer:
6.12


While loops
Just like in JavaScript, in Python we can use while loops as well as for loops. They work like this: 
We start off by setting the variable ‘i’ to 0, and then as with JavaScript we keep going as long as i is less
than 10, adding one to i each time the loop is processed. The output is the numbers 0 to 9, as you can see
below (6.13): 6.13

Challenge 1
Use a while loop to display a ‘countdown’ from 10 to 0.
This one just requires a bit of tweaking to the above example – start off by setting i to 10, and then
change the while condition and the final instruction so that i decreases by one each time, until i is 0.
And here it is in action (6.14):
6.14
As in the practice exercise, create a list containing four names. We’re now going to use a while loop to
complete the challenge. Loop through the List, printing ‘Hello [name]’ to the console each time.
This time we are using a while loop to cycle through the contents of a List. The process is fairly
straightforward, setting i to 0 initially and then keeping going as long as i is less than the length of the
array. Here is the code: 
6.15


If statements
If statements work in much the same way as with JavaScript. Say a user is playing your game and you
want 
to 
test 
if 
their 
score 
is 
greater 
than 
100, 
you 
would 
then 
use 
this 
code: 
6.16
Try changing the value of ‘score’ to see how this affects the output.
We can add an ‘else’ option as well, to run some code if the statement is not true: 
6.17
In some cases, we might want to check for two conditions to be true at once, such as the score being over
100 and the playing time being over, say, 60 seconds. We can do that using the and operator, which

allows us to check for both conditions being true: 
6.18
Note: you can use the or operator in the same way, to check for one of two (or more) conditions being
true.
We can also test for a variable being equal to another using == (as with JavaScript): 
6.19
We can also use != (an exclamation mark followed by an equals sign) to test whether two variables are
different.
Finally, we can use the ‘elif’ command to look for other conditions. Elif is short for ‘else if’ and
allows us to combine a number of if statements. This code looks for ‘rob’ and then ‘kirsten’ as usernames:

6.20


Practice exercises
1 Create variables called ‘username’ and ‘password’, and check for four different options:
• Username and password correct.
• Username correct and password wrong.
• Username wrong and password correct.
• Both username and password wrong.
Give the user an appropriate error message in each case.
We complete this challenge with a set of nested if statements.
6.21
2 Use a combination of a for loop and an if statement to loop through the array [8, 3, 5, 7, 0, 13,
20] and print all the values greater than 7.
This time we have an if statement inside a for loop – it’s a fairly simple setup:

6.22

Challenge 2
This is a hard one. Loop through the array [7, 3, 4, 3, 8, 2, 1, 1, 2, 7, 8], printing each unique number only
once. This is harder than it seems, and will require you to create an array of the numbers you have already
printed. Feel free to glance at the solution below if you need some inspiration. Good luck!
Solution:
This is definitely the most complex code we’re written so far. For each of the numbers in the List, the
code loops through an ‘alreadyPrintedNumbers’ List to see if that number has already been printed. If it
hasn’t, the code prints the number and adds it to the ‘alreadyPrintedNumbers’ List.
Well done if you solved this one. It wasn’t easy.
6.23

Regular expressions
Regular expressions are a little tricky to get to grips with, but they are an extremely powerful way of
processing text. At the end of this chapter we will be using them to get some data from a webpage and
then process it to collect all the email addresses.
Regular expressions allow you to search through a string and extract a particular piece of information,
or substring.
Regular expressions are our first example of code that requires a Python module – that is, an extra set
of functions that extend Python’s standard functionality.
To import the regular expressions Python module you use the code:
Simple!
Now let’s see it in action. Suppose you wanted to extract the name Rob from the string ‘My Name is
Rob.’. With regular expressions, you could do it like this: 
We start by importing the re module, and then creating our string. The next line is where the magic
happens – we use the re.search function to search the string, and then we use the regular expression ‘is
(.*).’ to find what we need. This expression essentially means ‘return the text after “is” and before “.”’.
Finally, result.group(1) gives us the text that we need. Let’s see it in action (6.24): 6.24

Challenge 3
Use regular expressions to extract the word ‘quick’ from the string ‘The quick brown fox’.
Solution:
The following code will do the trick:
Note that you could use several different strings in the regular expression. For example, ‘b’ and ‘ brown
fox’ would both work after the (.*). Try them out! (6.25.) 6.25

Splitting strings into lists
We’re getting close to being able to complete the web scraping challenge for this section. What if we had
multiple bits of text that we wanted to extract from a string? For example, say we had the string
‘Rob,Kirsten,Tommy,Ralphie’ and wanted to extract each of the names.
It is possible to do this with regular expressions, but we’ll use a different method – splitting the string
into a List.
We do this with the command string.split(“,”), with the “,” being the character we want to split the
string up with.
So to split our string we would do this:
Note: we don’t need ‘import re’ for this as we are not using regular expressions.
The result is a List containing the four names (6.26):
6.26

Challenge 4
Take the HTML ‘<li>John</li> <li>Paul</li> <li>George</li> <li>Ringo</li>’, and split it up into the
individual list items.
Solution:
Here we can use the space between each list item to split the string, so this code will do the trick: 
See it in action (6.27):
6.27
Note: we can also use just string.split() to split a string by the space character.

Challenge 5
Use regular expressions to extract and print the names from the HTML code in Chapter 1.
Once we have obtained our List, we can loop through the items, and use re.search to extract just the
names: 
This gives us the four names (6.28):
6.28

Getting the contents of a web page
We’re very close now to being able to complete our web scraping project. The one other skill we need is
to be able to get the content of a web page. This will allow us to get some data to work with to extract the
information we need, such as a collection of email addresses.
To do this, we’ll need to use a new Python processor, as repl.it doesn’t support getting the contents of a
web page. We’ll be using trinket.io, as it supports all the features we need.
Go to https://trinket.io, scroll down a little and you’ll see something like this box (6.29): 6.29
This is our, hopefully quite familiar, Python editor. If you click the ‘play’ button, you’ll see some circles
and text – the output of this code.
We won’t be needing that though, so remove all the text in the editor and enter the code below: 
This code imports the urllib.request module, which allows us to get the contents of a URL (web address).
Then we ‘request’ the contents of www.example.com, and finally we print the output to the console.
If all goes well you should see the HTML of www.example.com in the trinket.io window (6.30): 6.30
That’s it. You can now get the contents of any web address just by changing the URL in the code above.
Try any web address you like (the source code for www.google.com will likely make your head spin).

Python project: extracting data from a web page
Hurrah! We’re finally able to complete the final project, which is to take the contents of a web page and
extract the data we need. You could use this to extract all the reviews of a place on tripadvisor.com,
collate all the email addresses from a website, or gather together all the recipes from a food website.
To keep things simple, we’re going to use the data at robpercival.co.uk/ sampledata.html. This is a
simple table containing some names, addresses, email addresses and phone numbers.
The challenge, and this is a big one, is to use the skills you learned in this chapter to extract the data
from the table. You should create four Lists, one for each of the data columns (name, address, email and
phone number).
You’ll need to look at the code of the website (you can do that by right-clicking on the page and
selecting View Page Source or similar). I won’t give you any more hints, but if you get stuck just glance at
the solution below.
Good luck!

Solution
Did you manage it? I hope so. Here I’m going to work through the solution to show you how I would have
solved it.
First, we need to get the contents of the URL. We can do that using code similar to the URL-reading
process that we just learned: 
This gives us the HTML of the webpage (6.31):
6.31
You can see that the data is contained in HTML (you may want to brush up on the tables section from the
HTML chapter if it’s unfamiliar). The HTML chunk for each row looks like this: 
To get the data we need, we are going to need to split up each of the rows. We can do that using
string.split, like this: 
6.32

We now have a List containing the HTML for each row. If you look carefully at the HTML code, you’ll
see that the line breaks have been replaced with \n – this is a standard way of representing a line break in
a string, both in Python and other programming languages.
Next then, we need to split up each row. To do that, we’ll loop through rowList, and split it using the
‘\n’ symbol: 
We now have each row as its own List (6.33):
6.33
Our final step then is to extract the data that we need. We’ll do this using re.search: 

(Don’t forget the import re!)
In the last three lines, we test to see if there is a <td>in the line of HTML (because we are only
interested in the data items, which are the lines with a <td>in them), and if there is we extract the data
using re.search.
This gives the following output (6.34):
6.34
All of the data is now presented, but we want it organized into separate Lists, so we’ll need to create our
Lists 
and 
add 
to 
each 
list 
at 
the 
appropriate 
time: 

This new code uses a counter variable i, and depending on the value of i adds the data to the appropriate
list. If you now scroll through the output you’ll see all the data collected together (6.35): 6.35
We’ve done it. Congratulations if you managed to do all of that yourself – it was not a simple problem.

For this challenge we had to use a range of programming techniques such as loops and if statements, as
well as Lists and variables. We also imported two Python modules and used regular expressions to
extract data from a website. Not bad!

Summary
We are now going to apply the skills we have learned in the world of Web and app development.
However, if you want to spend more time with Python, there are plenty of free resources available, some
of which are listed below.

Further learning
www.codecademy.com/courses/introduction-to-python-6WeG3/ – interactive Python lessons.
www.tutorialspoint.com/python/ – free Python tutorials.
https://play.google.com/store/apps/details?id=com.sololearn.python&hl=en_GB – Android app for
learning Python.
https://itunes.apple.com/gb/app/learn-python-pro/id953972812?mt=8 – iPhone and iPad app for
learning Python.

PART THREE
In practice

07
Website development
Our first look at coding in practice will be to learn how we can build and share a website with the world.
A website is probably the simplest thing you can build with code, and yet it can be hugely powerful. The
potential to create something in a few minutes that anyone in the world can access is quite intoxicating –
yet if you’ve worked through the previous chapters in this book you already know how to do just that.
We’ll start by seeing how the coding world has transitioned from software that runs on a ‘local’
computer (ie the machine sitting on your desk or lap) to websites, which primarily run on a ‘remote’
computer, connected to your PC or phone via the internet.
Next, we’ll consider the reasons why a non-web developer might want to build a website, whether it’s
for career advancement, pleasure or creating an online presence.
We’ll then look at three options for creating a website: using a service such as Weebly or Squarespace,
hosting your own using a Content Management System such as Wordpress, and finally coding the site
yourself from scratch. You’ll learn the advantages and disadvantages of all three, and find out which
option to use depending on the nature of the site you want to build.
Finally, we’ll look at one of the most popular frameworks for building great looking sites, Bootstrap,
and in the closing project for this section we’ll make a simple website of your choice.
By the end of this section, you will be familiar with the different ways that you can create and host
websites, and be ready to build one for any project or business that you want to start.

Why build a website?
A hundred years ago, if you wanted to start a business, you would likely have needed a great deal of
capital. At the least you would have needed premises to sell your goods, staff to make your product or
financing for raw materials.
All that has changed in the last 20 years, where some of the most valuable businesses in the world exist
purely online, and were created by individuals with almost zero initial costs. Learning to code gives you
the power to put any idea you have into action while investing no more than your time and the price of a
few cups of coffee. You don’t even need to ask anyone for permission!
But even if you don’t want to start a business, there are many other reasons you might want to build
your own website.
A blog is a great way to build a name for yourself online. You can share your love of dogs, your
horticultural knowledge, or even document the process of learning to code. Write well and you can create
a community of like-minded individuals, and you never know what opportunities might come out of that.
If there is an online task that you do regularly, you might well be able to automate it with a website, and
if other people do similar tasks, you can share your tools with them. The web scraping code we learned in
the Python chapter, for example, could be used to check when prices on Amazon are updated. You could
then allow your users to check the prices of particular products, and email them when they go below a
particular threshold.
We will look at ways to build specific types of sites later on in the book, but for now it would be worth
having a particular website in mind that you would like to build. It doesn’t have to be a world-changing
idea, just a particular idea that will help you apply what you learn in this chapter.
Take a few moments now and jot down this idea. Then, as you are reading through this chapter, think
about how the different approaches could work with that idea, and which you would choose. If you really
want to solidify your learning, create that website when you’ve got to the end of the chapter.

How do websites work?
The BBC Micro computer I grew up with in the early 90s was a stand-alone machine. You could add
programs (software) to it via tapes and discs, but all the code was run completely on the device itself.
As the internet grew and became faster, it began to be feasible for the code for programs (now called
websites) to be stored on powerful computers called servers which would then be transferred to the
user’s computer and displayed in a special piece of software called a browser. Initially most of these
websites were static, displaying information coded using HTML and CSS.
Gradually websites became more interactive, and rather than displaying static content they allowed
users to post updates, send email or even watch video. These type of sites were initially known as
‘webapps’, although the word has mostly gone out of usage nowadays, becoming synonymous with
websites themselves. Most of the actual running of the webapp is done on the server, and the browser just
displays the output (a list of the user’s emails, or pictures of the user’s cat for example).
The great advantage of working in this way is speed of development. On my BBC Microcomputer, if I
wanted an updated piece of software I had to go and get the disc for it, and put it in my machine. Now,
conversely, if Google want to update the Gmail interface, or if you want to edit your blog, a quick change
on the server and the website is updated immediately for all its users around the world.
Even traditional desktop software such as word processors and image editors are starting to find homes
on the web and some computers, such as Chromebooks, are little more than browsers and an internet
connection.
So how do we take advantage of this phenomenon? We know how to write HTML code, now we need
to know how to share our code with the world. It’s actually pretty simple, and requires two things: a
domain name, and some web hosting.

What is a domain name, and how do I get one?
A domain name is simply a web address, like facebook.com or bbc.co.uk. Each country’s domain names
are managed by a central ‘registrar’, and domain names can be bought from a number of different
providers.
When you buy a domain name, you’re actually just renting it, with the average cost being around £10
per year. Once you have bought it, you have the right to renew it each year, but if you leave it unrenewed,
it will eventually return to the public ‘pot’ and someone else can buy it.
A quick web search for ‘buy domain name’ will turn up several results, so do a bit of research and
choose a provider that suits you. Ideally check reviews and don’t decide completely on price – a cheap
domain name might come with nasty fees, for example to transfer it elsewhere.
Choosing a domain name can be difficult, as most of the good ones are already gone. Domain names are
very much a matter of personal preference, but I would recommend the following:
Get a .com or a country-specific domain (like .co.uk) if at all possible. Even if it is not an ideal
domain name, it will likely be more memorable and trustworthy than a more obscure extension such as
.boats or .black).
Make it easy to type. Avoid mis-spellings like Xpress (unless they are part of your brand of course!).
Use keywords. If you want to rank highly in search engines, putting your search terms in your domain
name is a great start. If you are starting a blog about cocker spaniels for example,
cockerspanielsblog.com wouldn’t be a bad choice (and at the time of writing this book, is available!).
If you’re struggling to find ideas, these sites might help:
www.domainsbot.com/ – will search a range domain domains and tell you which are available.
www.namemesh.com/ – will combine two or three words and show you a range of available domain
names.
www.panabee.com/ – will suggest company names and domain names based on your keywords.
Once you have decided on a domain name, you can purchase it (I’d probably start with just one year,
unless you’re feeling confident!) with your chosen provider, and move on to the second requirement: web
hosting.

What is web hosting, and how do I get it?
When a user visits your website, the files are downloaded from a server and displayed in the user’s
browser. If you have a more advanced site that allows interaction with the user (such as a login or search
box), the server will also run the code to provide the user with the data they need. You may also use other
features associated with a domain name, such as personalized email addresses. Web hosting is the server
space and computational power that manages all of this for you.
There are several different options of web hosting, depending on how much you want to pay, ease of
use, and how much control you want over the content and layout of your site. We will look at the two main
options for those starting out: website builders and shared hosting.

Website builders
Website builders are the simplest and quickest way to get a website up and running. Once you sign up
with a company, you can choose from a range of templates and styles, and edit your site in a drag-and-
drop interface.
Website builders range from $7 to $20 per month, depending on features, and some even give you the
ability to create an online store, blog or portfolio site in just a few clicks.
However, there are a few major drawbacks to using these sites. First, you don’t own your content. If
you decide you want to move to another provider (perhaps because you need a feature that your chosen
website builder doesn’t support), you will have to recreate your website from scratch. Also, your ability
to customize your website is often limited to what the website builder provides – you don’t have the
freedom to write your own code to make your site do exactly what you want. And as a coder, you’ll
definitely want that freedom.
For those reasons, website builders are great for getting a site up and running very quickly, but I
wouldn’t recommend them for a serious site that you want to own and customize to your heart’s content.
That method is what we will be focusing on for the rest of this section.
Nonetheless, if you’d like to try a website builder, some of the most popular providers are:
www.weebly.com/
www.wix.com/
www.squarespace.com/
www.shopify.com/

Shared hosting
If you’re just starting out with a small site, and want more freedom and ownership than website builders
provide, shared hosting is probably the best solution for you. To have a website, you need a hosting
account with a provider to contain your website files, emails and databases. Shared hosting is when
several different hosting accounts are stored on a single server. This is a very efficient way of hosting
websites, and as a result it is extremely cheap. Expect to pay around $4–10 per month for a hosting
package.
The big advantage of shared hosting over website builders is that you completely own your content –
you can download your site from the server and switch to another provider if you wish. You also have
complete control of the code for your site, so what your site can do is limited only by your imagination.
As with domain names, a quick web search for ‘web hosting’ will turn up a huge range of websites, and
the choice can be confusing. Here are a few tips to help you choose the right provider:
Test out their support. Send them a couple of quick questions before you sign up, such as ‘How many
email addresses do I get with the Starter package’, and see how quickly they come back to you.
Check reviews on sites like trustpilot.com.
Know your needs – if you’re planning on building a small site, you likely will need something like
this:
– 500MB webspace (this is hard drive space to store your website files)
– 1GB bandwidth (this is the amount of content that is transferred from the server to your users’
computers)
– 1–5 email addresses
– a database
– one-click-installs for commonly used software such as Wordpress (we’ll learn about Wordpress in
a moment).
Avoid going on price alone – you will almost certainly need some support, and you’ll want fast,
reliable hardware. You’re unlikely to get those with the cheapest providers.
A final thought – you will likely be able to buy a domain name and web hosting from the same provider.
This can be very convenient as you will have everything in one place. However, some people like to use
different providers so that if they have problems with the web host, for example, that does not affect their
domain names. It’s a personal decision, but I would recommend using different providers to avoid having
all your eggs in one basket.

I’ve got my web hosting, now what?
Hopefully by now you’re clear on what you need, and perhaps have even purchased a domain name and
set up your web hosting. What now?
First, it’s worth checking if your web hosting provider has any getting started guides. These will
introduce you to their control panel, and show you how to do basic things such as setting up email
addresses and uploading files. The instructions for this will vary between providers, so I won’t go
through those here.
Once you have your web hosting, however, you have two main options for getting your site up and
running: hand-coding or using a content management system.

Content management systems
A content management system (CMS) is a piece of software that you install on your web hosting to allow
you to customize and manage your website. It’s a bit like having a website builder, but you still own all of
the content.
By far the most popular content management system is Wordpress. It was developed as a blogging
platform in 2003, but now forms the CMS for over 25 per cent of all websites – that’s a lot of websites.
Because it is so widely used, Wordpress has a huge range of themes and plugins available for it, many
of them free. It’s also completely free and open source, and you can edit the code of your site as much as
you need to. I’ve built many Wordpress sites myself, and would thoroughly recommend it to build almost
any site.

Getting started with Wordpress
There is not room in this book for a full Wordpress tutorial, but the following steps should be enough to
get you started.
1. One click install
Your web hosting provider should have an icon in your control panel which will allow you to install
Wordpress very easily. If you can’t find it, contact them and ask for instructions.
Once Wordpress is installed, you’ll be taken to the Wordpress Dashboard. This is where you can create
and edit pages for your site, as well as write blog posts, if you are using your site as a blog. You can also
manage every other aspect of your site from here. Try clicking around the left-hand menu, and you’ll
quickly see how to make changes and add and manage website content.
If you hover over the ‘home’ icon in the top left of the screen and click ‘Visit Site’ you’ll see the default
website that you have created. It will look something like this (7.1):
7.1
Nothing much to look at right now. So probably the first change you will want to make is to install a theme
to improve the look of your site.
2. Choosing a theme
Wordpress has a huge range of free themes available. You can view and search them within your
dashboard by clicking Appearance → Themes → Add New. When you find one you like, just click Install
and then Activate, and then reload your site to see the theme in action. Note that your site probably won’t
look exactly like the theme image – you’ll have to add the content, and perhaps change some settings in the
Customiser menu (Appearance → Customise).
Sometimes, however, a free theme won’t provide the quality look you are going for. In that case, it’s
well worth considering purchasing a premium theme. Generally, premium themes offer a better, more
flexible design, as well as direct support if you have any problems with the theme. For $30–60, it can be
a very sensible investment. Some of the most popular sites for finding premium themes are:

https://themeforest.net/category/wordpress
www.themecircle.net/
www.templatemonster.com/wordpress-themes.php
www.elegantthemes.com/
Once you have installed your theme and are happy with it, check out the Customiser to make it look
perfect for your site, and then start adding content.
3. Using plugins
Another great advantage of using Wordpress is that if there is any extra functionality you want for your
site, there is almost certainly a plugin available to do it, and most of them are completely free.
You can add a new plugin by clicking Plugins → Add New and search for a plugin that does what you
want. The plugin search doesn’t always return the best results, so I normally do a Google search for
‘Wordpress plugin [what I want the plugin to do]’, and once I have chosen a plugin I search for it by name
in the Dashboard.
Plugins allow you to add simple things such as contact forms and Google maps to your sites, as well as
transforming your site into a social network, or an ecommerce platform, so they are well worth
investigating.

Self-coding your site
You might be wondering why I’ve left the option of building a website from scratch until last, especially
in a book such as this. It’s simply because if you want to get a website up and running quickly, usually the
best way to do that is to use some kind of CMS, such as Wordpress.
Having said that, if you want to avoid the setup and complications that come with a CMS you might
well want to build your site from scratch. This will give you complete control over the site content, as
well as teaching you how websites function from the ground up.
So here we’ll start by uploading a very simple site, adding some HTML to it, and finally we’ll see how
to use a framework such as Bootstrap to make our website look great on a range of screen sizes (this is
known as building a responsive website).

Editing the index.html file for your site
Your web hosting control panel should include a File Manager, allowing you to access and edit your files.
Access the File Manager, and find a folder with a name like ‘public_html’. This is where your website
files should be stored (if you have problems finding the folder, contact your web hosting provider).
Once you have found the public website folder, look for a file called index.html. If it’s not there, create
it in the File Manager. Then edit it (again, you should be able to do this in the File Manager).
Add the following code:
Then save the file and open up your domain name in a browser. You should see something like this (7.2):
7.2
Hurrah! Your HTML page is now available for all the world to see. Of course, you can now use any of the
HTML, CSS and JavaScript that you have learned and put it in that file to customize your webpage.

Using FTP to manage your website files
You might be thinking that building a complex site by typing code into a File Manager would be a bit of a
hassle, and you’d be quite right. Every time you want to edit your site, you’d have to log in to your control
panel, open the File Manager, find the file, open the edit window and get to work.
A better way to interact with your files is via FTP, or File Transfer Protocol. FTP allows you to
connect to your website files and upload, download and edit files directly. It’s much more convenient than
using a File Manager.
You should be able to get your FTP settings from your web hosting provider, and once you have them,
all you need is an FTP program. There are several free options, including:
https://filezilla-project.org/ – Windows, Mac and Linux.
www.smartftp.com/ – Windows only.
www.coreftp.com/ – Windows only.
https://cyberduck.io/ – Mac only.
However, my FTP program of choice is FireFTP, which is an addon for the Mozilla Firefox browser. It
works on any platform, and is very easy to use. To get it, you’ll need to first download Firefox at
www.firefox.com and then download FireFTP from http://fireftp.net/
Once those are installed, you’ll need to enter your FTP login details, click OK and then click Connect.
If all goes well (and you can contact your web hosting provider if it doesn’t) you’ll see a list of the files
on your server, and you can navigate to the public_html folder to see your website files.
Once you see the index.html file, you can right-click on it and select ‘Open’ to edit it directly in your
text editor.
Alternatively, you can download it to your computer, edit it there, and then upload it again when you
are finished.

Using a web framework
You have probably noticed that the websites we’ve built so far have not been beautiful. We focused
primarily on the content, and let the browser choose how to display it. This leaves us with webpages that
are functional, but look like they were built in the 90s.
If you are a great designer, you can customize the look of your site to your heart’s content. However, for
most of us, a quick solution to this is to use a web framework, which is essentially a collection of CSS
and JavaScript which make our websites look better.
Frameworks also allow our website to be responsive, that is to adjust itself to display differently on
different screen sizes and devices. This is very important as over half of all web browsing is now done
from mobile devices. We’ll see how that works in a moment.
There are a number of frameworks available, including:
http://foundation.zurb.com/
http://firezenk.github.io/zimit/
http://ink.sapo.pt/
www.99lime.com/elements/
Feel free to check out the sites to see what they offer, but we’ll be focusing on the most popular web
framework, Bootstrap.
Bootstrap was built by two Twitter employees, but has since taken on a life of its own, with over 15
per cent of the top million websites currently using it. You can see it in action at http://getbootstrap.com.
Setup instructions for bootstrap are at http://getbootstrap.com/getting-started/, but the quickest way to
get started is to copy the code at http://robpercival.co.uk/bootstrap.html into your index.html file and see
it in action.
The demo page looks like this (7.3):
7.3

Rather nicer than our plain HTML pages. All of the standard HTML features such as forms, buttons and
even plain text look more attractive and are easier to work with than before.
If you look through the HTML of the page, you’ll see that there are links to the Bootstrap CSS in the
header, and then some JavaScript at the bottom of the code, which is what creates the look and layout of
the page.
How about the responsiveness? Try changing the width of your browser window, and you’ll see that the
content automatically adjusts, like this (7.4):
7.4
This works using breakpoints: the site detects the width of the user’s screen and displays the content
appropriately.
There is a huge amount you can do with Bootstrap, and there is not the space to cover it here, but the
main website http://getbootstrap.com has a huge range of examples and guides to get you started.
If you want to learn bootstrap, my advice is simply to start building a site with it and use the docs to
figure it out as you go along.

Website development project: build a website
That brings us to the end of this section, and there’s a pretty obvious challenge for you – build a website.
Whether it be a Wordpress blog documenting your love for My Little Ponies, a Weebly shop selling your
homemade trinkets or a self-coded Facebook killer, build something and share it with the world.
Whether or not your site is successful is not the point here – the purpose of the challenge is to turn a
goal into a reality, and learn about how websites work while you’re doing it.
Good luck, and send me the results of your hard work on Twitter at @techedrob. I look forward to
seeing what you create!

Summary
In this chapter our aim was to go from some knowledge of HTML, CSS and JavaScript, and see how we
can go from that to creating and sharing a real website with the world. We considered several reasons you
might want to build a site, and how websites are different to software. Then we learned about domain
names and web hosting, and the different ways you can get your website live. Finally, we saw how we
can use CMSs such as Wordpress and frameworks like Bootstrap to get great looking, responsive
websites up and running fast.
We’re now going to move away from websites and see how we can use our coding skills to build apps
for mobile devices, starting with iPhones and iPads. It’s a very different process to working with
websites, but many of the principles are the same. Apps represent a whole new way to get our content in
the hands of users, and it’s pretty simple to get started, so let’s go!

Further learning
As well as the recommendations from the previous chapters to learn HTML, CSS, JavaScript and Python,
there are holistic courses available to teach you every aspect of web development.
www.udemy.com/the-complete-web-developer-course-2/ – The Complete Web Developer Course (by
myself) uses projects and real-life exercises to teach every aspect of web development.
www.open.ac.uk/courses/modules/tt284 – Open University course covering the foundations of web
technologies and developing applications.
www.theodinproject.com/courses/web-development-101 – A free and open-source online course in
web development.

08
Building an app for iPhone or iPad
Now that you have seen how to build and host complete websites, we are going to learn how to build
apps that can run natively on the iPhone and iPad. Barely a week goes by without a news story of the
latest app craze that is sweeping the nation (at the time of writing it’s Pokemon Go), and the exciting thing
for coders is that quite often successful apps are built by individuals or small groups rather than big
companies.
Moreover, the best apps often do one thing very well – they don’t need to be hugely complex. For
example, Pocket, developed by Nate Weiner in 2007 after teaching himself to code, lets people save
articles on the web to read later. It now has over 22 million users and has raised over $7.5million in
investment.
In this section, we’ll see how to make a basic currency converter iPhone app and run it on a simulator
within your computer. We’ll add user interface elements like labels and buttons, and write some code in
Swift, the Apple-designed language used for iPhone app development.
A word of warning – the software required to create iPhone apps can only be run on a Mac, so if you
don’t have one you’ll need to get hold of one to start building iPhone apps. I’d recommend borrowing a
Macbook from a friend if you can for a week or so, and if you enjoy the app-making process consider
investing in an Apple laptop yourself. Alternatively, you can jump to the next section, Android app
development, which can be done on any platform – Windows, Mac or Linux.

What is an app?
This may seem like a rather stupid question, but it’s worth being clear how an app is different to a
website. As we’ve seen, a website is stored on a server, and is then downloaded by your computer or
phone and displayed in a browser. An app is different, in that the code for the app is stored on your
device, meaning that it can run completely offline.
Having said that, apps often have an online component, enabling them to provide services such as
messaging or getting information like weather updates.
So while websites are stored on servers and are downloaded to the users’ device, apps are stored on
the device themselves. This is close to the original software model where all our software was stored
locally on our computer.
In this section we’ll be making apps for iOS, which is the Operating System that runs on iPhones and
iPads.

Getting started: downloading Xcode
Making an app is often seen as a mysterious process that only expert coders can do, but it’s actually very
simple. All you need to build an iPhone (or iPad) app is a Mac, and a copy of Xcode, a free piece of
software made by Apple.
To download Xcode, go to https://developer.apple.com/download/. You’ll need to create an Apple
developer account if you don’t already have one, but this is completely free and only requires you to enter
your email address and a few other details.
Once you’ve logged on, download the latest version of Xcode. It’s a big file (around 4GB), so
depending on your internet connection you might want to go and have a cup of tea while you wait.
When it’s downloaded, simply click on the downloaded file to start the installation process. This
normally takes several minutes, and when it’s done you should be presented with a startup screen (if you
don’t see a screen that asks you choose a template for your app, open up the Xcode application and click
File → New → Project in the menu at the top left of the screen).

The app setup process
We will now be presented with four screens, which allow us to choose various options for our app. In the
first screen (above), we get to pick from several templates for our app. Make sure iOS is selected
underneath ‘Choose a template for your new project’ and then select ‘Single View Application’. This will
create an app with a single blank page (known in app development as a ‘view’) for us to edit.
You can see several other app templates, such as Game and Master-Detail Application. Feel free to try
them out and run them to see what they do, but we’ll be sticking with the Single View Application here.
Click Next, and you’ll see the options screen:
First, fill in the Product Name – you can put anything you like here, but I’d recommend something like
‘Demo App’.
Under Organization Name, you can put either your company or your own name.
The Organization Identifier is like a domain name in reverse – choose something like com.yourname.
The name and identifier are only used if you submit your app to the app store, so you can really choose
anything you want at this point.
All the other settings can be left to their defaults. We’re using the Swift language and developing for an
iPhone.
Click Next and you’ll be asked where to save your project, so choose a suitable location, such as your
Documents folder, and click Create.
After a few moments, you’ll see the Xcode interface, and your app will have been created –
congratulations!

The Xcode interface
This is our basic Xcode screen, and it’s worth taking a few moments to familiarize yourself with it.
Underneath the usual File, Edit… menu we have the top bar, with a ‘Play’ button at the top left, which
will allow us to run our app. Give it a try. After 30 seconds or so, you should see a small blank screen
pop up. Not the most exciting app in the world – it’s just a blank screen – but it’s a start. This is the
simulator, which enables us to try out our app without a real iPhone.
You can actually use it just like an iPhone – try clicking Hardware → Home, and you’ll see the familiar
iPhone home screen and you can interact with it just as you would a normal phone. Have a play around
with it, and then come back to the tour.
At the right of the top bar there are several buttons which we can use to customize the interface:
The interlinked circles button displays the Assistant Editor, which gives us two editing windows to
work with (this will be very useful later on).
The three blue rectangles on the right allow us to toggle the left, bottom and right panes. Try them out!
The double arrow displays the Version editor, which we won’t be using here.
On to the main part of the screen:
The left pane shows a list of the files that make up our app. We’ll be looking at those in more detail
shortly.
The central window is where we’ll be doing most of our work. At the moment it is displaying some
settings for our app, but we’ll also use it to edit files and drag and drop buttons and labels on to our
app.
The right pane is context-sensitive: it displays different information depending on what we have
selected. At the moment we don’t have anything selected, so it doesn’t display anything, but we will be
using it a lot as we create our user interface.
Finally, if you ran the app in the simulator, you’ll see the console at the bottom of the screen, and it may
have some information about your app in it.
This is where we will see error messages and debugging information – it can be very useful.
That’s it. You’re now familiar with the Xcode interface, and we can start building our app.

Adding labels to our app
Xcode has a wonderfully simple drag and drop system to add user-interface elements to our apps. We’ll
start by adding some text, in the form of labels.
In the left pane, select Main Storyboard. You may need to use pinch-to-zoom or click the -/+ buttons to
be able to see the whole rectangle on the right.
The View Controller rectangle represents our iPhone app screen, and is currently blank. Click on it,
and you’ll see the screen change to include more settings and control options.
At the bottom right of the screen, you’ll now see the Object Library, which gives a list of objects that
you can drag into your app. In the ‘Filter’ box, type ‘label’, and then drag the label into the iPhone screen
in the central pane.
As you drag it around, you’ll see dotted-blue guidelines appear, which help you position your label.
Try to position it in the centre of the screen, as in the screenshot.
Now you’ve done that, let’s run the app (the Play button in the top left, or cmd-R) and see how it looks.
You should see something like this (8.1):
8.1

Your first non-blank iPhone app, congratulations!
(Notice that the label is not centred despite using the blue dotted lines. This is because the iPhone running
in the simulator is different to the iPhone in the central pane. In my case the simulator is running an iPhone
SE, and the central pane shows an iPhone 6S, which is bigger. Feel free to click on the ‘iPhone SE’ button
to change the simulator device, or the ‘View as: iPhone 6s’ button to change the device shown in the
central pane. I will use iPhone 6S for both of these from now on to keep things simple.)

Customizing the label
Now that you have added your label, make sure it is selected and then take a look at the context-sensitive
right pane. It gives a list of drop-downs including text, colour and font. Most of the options are fairly self-
explanatory, so try clicking on them and have a play around to see what they do.


Practice exercises
See if you can make your label say ‘Hello World’ in pink with a green shadow.

Adding a text field
Buttons are great for displaying text for the user, but they are not very interactive. To get some information
from our users, we need something like a Text Field. Add one in the same way you added the Label.
This creates a grey text field with the default iOS stylings. Run the app and click in the text box, and
you should be able to enter some text (8.2):
8.2
As with labels, you can customize your text field by resizing it and using the context pane on the right.

Challenge 1
Try creating this app layout (8.3):
8.3
Solution: The label is just the default size and font, and the two text boxes are aligned underneath it. You
can use the ‘Placeholder’ setting to enter the Username and Password text within the text fields.

Adding buttons
The final user-interface element that we will add will be a button. You should be able to guess how to do
this by now!

Challenge 2
Add a button, change the text to ‘Sign In’ and position it beneath the Password text field.

Running some code
That’s as far as we’re going to go with user interface elements. Now we’re going to write some Swift
code that will be processed when the app is run.
To do this, click on the ViewController.swift file in the left pane. You’ll now see a page that contains
some standard code for the ViewController. swift file.
The lines you’ll see with // at the beginning are comments – these are notes for coders to read that are
not part of the app code. They are very useful for keeping track of what certain parts of your code do (and
for leaving yourself messages and reminders as you build the app).
The ‘import UIKit’ command imports the UIKit module, which allows us to interact with the User
Interface (UI).
The following line defines the ViewController class, which is essentially a chunk of code that we can
use to control the view, or in other words to customize our app screen.
The ‘override fun viewDidLoad()’ line defines a function (also known as a method) which will be
called when the app loads. This is where we will put any code that we want to run when the app is
loaded.
‘super.viewDidLoad()’ 
runs 
some 
default 
commands 
to 
set 
up 
the 
view, 
and
‘didReceiveMemoryWarning’ is a method used if we have problems with memory. We will not be
working with that method as we are building relatively simple apps here.
To write your first piece of Swift code, move the cursor underneath the ‘super.viewDidLoad()’ code
and write the following:
Run the app and see if you can spot what happened. You may have spotted that nothing happened on the
app itself, but in the bottom pane in Xcode the words ‘Hello World’ appeared (8.4):
8.4
That is what the print command does – it displays output in the console so we can see what our program
is doing.
This is fairly useful, but really we want to use our app to display something to the user, so to do that
we’ll need to interact with the user interface.

Interacting with the user interface
Now we are going to use code to edit the user interface (UI). Specifically, we are going to update the
main label to read ‘Hello Rob’ instead of ‘Hello World’.
To change the user interface (UI) using code, we need to create what is known as an Outlet. This is
essentially a variable that we can use to refer to, for example, a label or a button. To do that, first click on
the interlinked circles button in the top right of the screen to bring up the assistant editor.
Then, in the assistant editor window click the icon with the four linked squares and select Recent Files →
Main Storyboard to see the Storyboard, or screen layout.
Finally, you might want to click the box with right hand line button at the bottom of the assistant editor
window to hide the View Controller Scene list. Your Xcode screen should now look like this (8.5):
8.5
Now comes the tricky bit. Move the mouse to the ‘Please sign in’ label, press ctrl and hold on your
keyboard, and then drag the mouse over to the ViewController.Swift file, just underneath where it says

‘class ViewController’. If all goes well you should see a window with ‘connection’, ‘object’, ‘name’,
‘type’ and ‘storage’ options pop up.
This allows you to create an outlet for the label. Type ‘label’ into the Name field (you can use a
different name if you like) and click Connect. This will add the line:
to your ViewController.swift file, which will allow you to use the ‘label’ variable to refer to the label.
Now we just need to add our code to update the label text. Underneath your ‘print’ statement, add this
Swift code:
As you might guess, this updates the label text to the string ‘Hello Rob’. Run the app and check it out. You
should see this (8.6):
8.6
Hurrah! We have interaction between our code and our UI. Our next challenge is to make the button do
something, so that the user can instruct the app to take some action.

Making buttons interactive
Now we will change our app so that when the user taps the ‘Sign in’ button, the words ‘sign in’ are
printed to the console.
This process is similar to updating the label, but this time we will create an Action rather than an
Outlet. In Xcode, ctrl-drag the button to just underneath the ‘class ViewController’ code, just as before.
You should see the ‘connection’, ‘object’, ‘name’, ‘type’ and ‘storage’ popup again.
This time, click on ‘Outlet’ and change the option to ‘Action’. Then in the Name box type
buttonClicked. Click Connect and the following code will be created:
This is a function, or method that will be called when the button is clicked.

Challenge 3
Add some code to your app so that the words ‘sign in’ are printed to the console when the button is
tapped.
Solution: Inside the buttonClicked method, just add the code:
So the whole function looks like this:
Now run the app and tap the button, and you should find that it works as expected.

Challenge 4
Create a new app with a label that is initially empty and a single button that says ‘Click Me’. Then, when
the button is clicked change the label text to ‘Hi there!’
Solution: First click File → New → Project to create a new project and use the same settings as
before. Then add a label, double click on it and press backspace to delete the text. Then add the button.
Create an Outlet for the label and an Action for the button by ctrl-dragging in the same way we did
previously. Finally, add the code:
to the buttonClicked() method. This should give you the following (8.7):
8.7
Run it on the simulator and the app should say ‘Hi there!’ when the button is tapped.

Challenge 5
Add a text field to your app with placeholder text ‘What is your name?’. Then change the code so that
when the user taps the button the label text becomes ‘Hello [user’s name]!’.
Hint: You’ll need to create an Outlet for the text field, and get the text field’s value. You’ll also need to
append that to ‘Hello’ to create the required string. The process for getting the text field’s value is the
same as for labels, and appending works the same way as in JavaScript. Xcode will give you an error
message at some point – use the automatic ‘fix it’ command to fix the error.
Solution: Add the text field and create an Outlet for it by ctrl-dragging. I’ll call it textField but you can
use any variable name. Then just change the line:
To
This sets the label text to a new string, equal to ‘Hello [user’s name]!’. The whole app should look like
this (8.8):
8.8
You are probably wondering why we need an ! after textField.text. Swift has a variable type known as an
‘optional’, which is a variable which could contain a null value. For example, if I created a variable like
this:
This would create a variable called ‘number’ which would be an integer, but because I haven’t set a
value for it yet it has a ‘null value’ and is an optional. If I try to use it while it has a null this will cause
my app to crash.

If you want to use an optional in your code you have to put an exclamation mark after it, which
essentially tells the device that you are sure that it does have a value, and it is OK to use it. This is what
we are doing here – putting the ! after textField.text states that we know it has a value (even if that value
is an empty string) and that the app won’t crash.
Optionals are quite fiddly and I wouldn’t worry too much about fully understanding them at this point,
but 
if 
you 
want 
to 
read 
more 
about 
them 
there 
is 
a 
great 
blog 
post 
by
www.gyanaranjan.com/2015/10/what-are-optionals-in-swift.html.

Variable types in Swift
We are almost ready to build our currency converter app, but we need to learn a little about variable types
in Swift. In the JavaScript and Python sections we learned about several variable types, including strings,
numbers and Boolean (true or false) variables. Swift is what is known as a ‘strongly typed’ language,
meaning that when a variable is used in a function, that variable has to be of the correct type or the app
will crash.
For example, in this code:
we get an error, because number is defined to be a string, and we cannot multiply strings by integers
(whole numbers). To fix that, we can use the Int command to convert number to an integer:
This code now works. Note that we need to put an ! after Int(number) because there is a chance that the
conversion will not work. For example, in this code:
we would get a crash, because Swift would not be able to convert the string ‘rob’ to a number.
Finally, if we wanted to multiply a number by a decimal we would need to convert it into a ‘float’ (ie a
‘floating point’ number, or a decimal). We would do that using this code:
Feel free to play with these commands to get to grips with them. In fact, Xcode has a great mode called
‘Playgrounds’ where you can type in code and see the output straight away, which is perfect for
experimentation like this. To create a new playground, click File → New → Playground in Xcode and
start typing some code.
Note: If you test out these lines of code in an Xcode playground, you will likely get a warning that ‘The
variable was never mutated: consider changing var to let’. This is because as well as using var to create a
variable in Swift, we can use let to create a constant (ie a variable that doesn’t change). This is preferred
by Xcode, so if you have a variable that doesn’t change value, like number in the above examples, you
should define it using let rather than var.

Building an app for iPhone or iPad project: currency
converter app
We’ve now gone on a tour of Xcode and seen how to add labels, buttons and text fields to our app. We’ve
also written some Swift code and created Outlets and Actions to make our app interactive. Finally, we
saw some of the intricacies of the Swift language, including optionals and its strongly typed nature.
We’re now going to put all this together by building a currency converter app, and of course I’m going
to set this to you as a challenge. Essentially the app should ask the user for an amount in one currency and
then convert it to another, displaying the result on the screen. Simple. I’m going to use British Pounds to
US Dollars, which at the time of writing has a conversion rate of 1.31, but you can use any currencies you
like. Good luck!

Currency converter app: solution
Start by creating a new project in Xcode (File → New → Project) and entering the default settings.
Then create the user interface: drag in a label for the app title, a text field, a button, and then a second
label for the result. The result should look something like this (8.9):
8.9
Note the result label is currently blank – we’ll add the value with code when the user taps the button.
The next step is to create Outlets for the label and the label and the text field, and an Action for the
button. Do this in the usual way, but ctrl-dragging, until your code looks like this:

Finally, we will add the code to the buttonClicked() method to do the calculation and display the result to
the user. First, we get the contents of the text field (notice that I’m using let rather than var as this value
will not change):
Then we convert that to a Float so we can do multiplication with it (don’t forget to add the ! as the result
will be an optional):
Next we do the multiplication:
Then we convert that to a Float so we can do multiplication with it:
Finally, we update the label to give the result we need (note we need to convert amountInDollars back to
a string here):
Putting it all together, your app should look like this (8.10):
8.10

Now run the app, and check that it works. If you’ve set up everything correctly, you should be able to
enter an amount and the app will convert it to the new currency (8.11):
8.11
Hurrah! All seems to be well, but there is one small problem – if the user doesn’t enter a number into the
app, it will crash. Try entering ‘two’ or any string and you’ll see the error. This is because the Float
command fails as Swift cannot convert ‘two’ into a number. To get around this we can use an if statement:

This is quite a neat solution – the first line now tests to see if the conversion is possible, and if it is,
proceeds to show the result. If it isn’t, it displays a friendly error message.

Summary
We’ve covered a lot of ground in this section. Hopefully you now feel reasonably familiar with Xcode,
and you understand the basics of how apps are made. You have seen how the user interface interacts with
the code of the app to create a working app which gives the user some information.

Further learning
In the next chapter, we are going to see how you can build apps for the other major mobile platform,
Android. However, if you want to double down on learning iOS app development, you can try some of
these links:
www.udemy.com/complete-ios-10-developer-course/ – my online course in iOS app development.
www.appcoda.com/ios-programming-course/ – free iOS development tutorials
https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099 – popular Stanford iOS
coding course – a little outdated, but good quality and free.
www.coursera.org/specializations/app-development – Swift-based iOS development courses.
www.udacity.com/course/ios-developer-nanodegree--nd003?v=ios1 – iOS developer course created
by AT&T, Lyft and Google.

09
Building an app for Android
With over 85 per cent of the smartphone market (as of 2016), Android is by far the biggest mobile
platform. It is also the one that requires the least investment, as apps can be built using Windows, Mac or
Linux. In this chapter we’ll go through the process of creating a simple Android app, much in the same
way we did with the iPhone app in the previous chapter.
While iOS development uses Apple’s own language, Swift, Android development uses Java (a very
different language to JavaScript, used primarily in web development). Java is a great language to learn as
it is used in a huge range of platforms, including web apps, Windows and Mac programs, scientific
applications and Internet Of Things devices.
We will start by downloading Android Studio, which is the equivalent of Xcode for Android
development. It is built by Google, is completely free, and is the only software you need to make Android
apps. It’s not quite as user-friendly as Xcode, and can be quite slow, but it is also more flexible, and has
features such as Instant Run, which allow you to test run your apps on the simulator without recompiling
them.
Once we’ve downloaded Android Studio, we’ll take a tour of the interface and run a Hello World app.
Then we’ll add labels and buttons, build in some interactivity and finally make a simple app called Cat
Years.
Without further ado then, let’s get started.

Downloading and setting up Android studio
The main Android developer site is at developer.android.com – it is well worth clicking through and
reading some of the introductory guides to learn about Android features and style guides for developers.
Once you’ve done that, you can download Android Studio at developer.android.com/studio.
On that page click the big green download button, agree to the Terms and Conditions and you’re good
to go. It installs like any other piece of software, and since Android Studio 2.2 you no longer need to
download Java separately (which makes life much easier!).
Once you have installed Android Studio, run it and you’ll likely be prompted to install various updates.
My advice would be to choose all the default options, keep pressing Next and let the software do its thing.
After a few minutes you should see the ‘welcome to Android Studio’ screen.
Click ‘Start a new Android Studio project’ and you’ll see the ‘Configure Your New Project’ screen:
The ‘Application name’ can be anything you like – try something like ‘My First App’.
The ‘Company Domain’ is similar to a normal domain name, such as google.com, but you don’t have to
actually own the domain name. So you could use rob.percival.com, or yourcompanyname.com. It
doesn’t matter what you use now, but if you submit your app to Google Play, the Company Domain
will become part of the unique Package ID for your app, so you might want to use something that
represents your name or your company name.
You can change the Project location if you wish, or leave it as the default – this is where the project
files will be stored.
Click Next and you’ll see the ‘Form Factors’ screen, where you can choose which devices your app will
support, including phones, tablets, Android Wear, TV and more.
We are only covering Phone and Tablet in this introduction, so make sure only that option is selected
for now. You’ll notice that you can choose the oldest version of Android you would like to support. The
older version you choose, the more devices you will be able to support, but you will lose access to some
of the latest features.
My advice would be to choose the default version (in my case Ice Cream Sandwich) – this usually
provides a good balance of modern features and large device support.
Next, you’ll see this screen with a range of activity icons, which allows you to choose a ‘default
activity’. An ‘activity’ in Android development is a single screen within our app. It is like a page on a
website, so within a single app we might have a login activity, an activity which shows a list of users and
perhaps a settings activity.
Here we have several activity templates that we can choose from, which are useful in a number of
cases, but we’ll start with the simplest (and default) – the Empty Activity. Select that one and click Next.
This takes us to the last setup screen. Here we just choose the name of our initial activity, the default
being Main Activity. I would recommend leaving this as the default and clicking Finish.
And you’re done. After a few seconds to create your app, you should see the main Android Studio
interface.

It doesn’t look particularly friendly, but we can break it down into three main parts:
The top bar has the usual save, open, copy, paste menu options, as well as the green ‘play’ triangle
which you will use to run your app.
The left pane shows the file structure within your app.
The main window shows the contents of the file we are currently editing, in this case the MainActivity
Java file.
The other buttons and menus we can ignore for now – we’ll use some of them later but most you will only
need if you’re doing some advanced Android app development.
That’s the setup complete – before we start customizing our app we’ll quickly run through the process
of running an app on an Android Virtual Device (AVD).

Running your first Android app
Running your app is simple – just press the green ‘play’ button in the top menu bar.
You’ll be prompted to create a Virtual Device, and you can choose from a selection of different phones
and tablets. You can choose whichever one you like – I will stick with the default, the Nexus 5.
Next, you can choose to install any version of Android on your virtual device.
Unless you particularly want a particular version, I would recommend using the default, in my case
Lollipop.
Finally, you can give your device a name, and choose some advanced options, such as whether the
device starts in portrait or landscape orientation. I would recommend keeping to the default options for
now.
Congratulations, you’re done! Select that device, click Run and the device will start up and eventually
(after around 2–5 minutes depending on your machine) display your app in the Android Emulator.
You’ve run your first Android app but, of course, it doesn’t do much yet, so let’s see how to customize
the UI (user interface) of our app.

Adding text and buttons
We’ll be writing some Java shortly, but first let’s see how to add text and buttons to our apps. Just above
the main editing window, you should see two tabs: activity_main.xml and MainActivity.java.
Click the activity_main.xml tab and you should see a screen showing the layout of the app. Click on the
Hello World text and you see something like this (9.1):
9.1
This window is divided into four main areas:
The Palette in the top left has a long list of elements that you can add to your app, such as Buttons,
CheckBoxes and Switches.
The Component Tree in the bottom left shows all the elements that have already been added to your
app, and how they are related to each other (in our case, we have a single TextView, which is inside
the activity_main layout).
The main editing window shows a preview of your app, and allows you to drag elements around the
screen.
The Properties window shows the properties of the currently selected element (in this case the Hello
World text).
Spend a few minutes experimenting with adding different widgets to the screen, changing their properties
and moving them around.

Challenge 1
Try to recreate this layout (9.2):
9.2
Solution:
Firstly, take the ‘Hello World’ textView and drag it into the centre of the screen – you should see a blue
layout guide appear to show you that it is correctly centred. In the Properties window change the ‘text’
field from ‘Hello World’ to ‘My Great App’. Then, in the textAppearance drop-down menu, select
AppCompat.Large. Your text label should now display as in the picture above.
To add the button, find Button in the Palette and drag it on to the screen, centred and slightly underneath

the textView. Change the text to ‘Click Me!’ in the ‘text’ field of the button Properties.
That’s it. Feel free to experiment further with changing colours, trying different layouts etc. If an option
isn’t visible in the Properties window, click the ‘View all properties’ link to view all the available
options. You can customize pretty much anything there.

Making the app interactive
If you run the app again (it should be much quicker this time!) you’ll see the layout appear on the virtual
device screen, but if you click the button, you’ll notice that nothing happens. Just like with iOS
development, we need to write some code to make the button do something, but the process is a little
different.
Before we write any code, with Android development we need to set the ‘onClick’ property for the
button to tell the app the name of the ‘method’ that we want to run when the button is clicked. A method is
essentially the same as a function – a chunk of code that we can run by referring to its name.
To set this up, click on the button and type ‘buttonClicked’ in the onClick field. Now we need to write
the buttonClicked method.
We do this in the MainActivity.java file, so click on the MainActivity. java tab above the editing
window. In that file you’ll see the following code:
This is Java, and we’ll run through it line by line. Don’t aim for a complete understanding of every aspect
of the code at this point – that will come later. For now, just make sure you have a fair overview of what
each part of the code is doing. You can always Google particular keywords if you would like more
information.
The first line defines the name of the package, or app – in my case:
The ‘import’ lines bring in various ‘libraries’, which allow you to work with specific features, such as
textViews, buttons, log files or even GPS. These two default lines give us the default code required to run
our activity any use the Android OS (operating system).
Next, we’re creating a ‘class’ called ‘MainActivity’. A class is a collection of methods (chunks of
code that serve a particular function) and variables. This particular class will control the Main Activity.
As we only have one activity in our app, this class essentially controls our whole app.
The class is ‘public’, which means it can be accessed from anywhere in the app (and, potentially, by
other apps as well). It ‘extends’ the ‘AppCompatActivity’ class, which is a default class that contains a
collection of methods that we can use with our activity.

Next, we build a method called ‘onCreate’. This method is a default one, which is run when the activity
is ‘created’, ie when the app is run. This is a ‘protected’ method, meaning that it can be accessed from
anywhere in the app, but not by other apps.
The ‘void’ in this line means that the method doesn’t return anything. To understand what this means,
imagine a method called ‘plus’ which adds two numbers together. For that method to work, you would
need to pass two numbers to the method, and then it would return the total of those two numbers. The
onCreate method runs some code, but doesn’t return anything, which is confirmed by the ‘void’ in the
method definition.
The ‘super.onCreate(savedInstanceState);’ line runs all the default code needed when the app is run.
The savedInstanceState contains the previous state of the app, and in some circumstances can be used to
return the app to that state (for example, returning the user to an email that they were previously writing in
the app).
Finally, ‘setContentView(R.layout.activity_main);’ establishes that we want to use activity_main to
define our layout, or ‘ContentView’. This will display the user interface layout that we have created.
Phew! There is a lot of theory there, and don’t worry at this point if not everything is completely clear
– it will make much more sense as you start to build more apps. For now a broad understanding is all that
is needed.

Writing the code for the button
Just underneath the ‘public class MainActivity…’ line, write the following code:
This creates a public method (‘public’) which doesn’t return anything (‘void’) called buttonClicked. This
method will be run when our button is clicked. The curly braces ({ and }) contain the code for our
method.
The ‘View view’ part is a little more complicated, so read carefully. Firstly, a ‘view’ is anything that
appears on the screen (so buttons, textViews etc are all ‘views’).
Secondly, to create a variable in Java, we start with the variable type, and then use the name that we
want the variable to be called. So if we want to create a string called ‘name’ we would type:
If we wanted to create an integer called ‘number’ we would type
Here we are creating a variable called ‘view’ which is of a type ‘View’. We need this because when the
button is clicked, it runs the buttonClicked method, and it sends some information about itself to that
method. That information is stored in this variable ‘view’, which is of a type of View.
You might want to read that last paragraph a couple of times. Hopefully that makes sense, but if not
don’t worry, it will become clearer as we carry on.
When you have finished writing the code, you will see a blue callout pointing to the word View (9.3):
9.3
This is because to use the variable type ‘View’ we need to add the ‘View’ class to our app. To do that,
press alt-enter which the blue callout is shown. The callout will then disappear and ‘View’ will turn
black (9.4):
9.4

If you click the small ‘+’ next to ‘import …’ near the top of the code window, you will see that we now
have the View class added to our project:

Making a toast
OK. We have now created the method that will run when the button is clicked. Don’t worry – we’re
nearly done. We now just need to write some code inside that method. We’re going to create what is
known as a ‘toast’ – a small piece of text that will display at the bottom of the phone screen for a small
period of time. (It is called a ‘toast’ because it pops up like toast from a toaster.)
To do that, add the following code to the buttonClicked method:
Hint: when you start typing ‘Toast’, you will see a drop-down like this (9.5):
9.5
Press Enter when ‘Create a new Toast’ is selected, and it will auto-fill most of the code for you. Nice!
This code creates a new toast with the text ‘Hi there!’. LENGTH_SHORT refers to the amount of time
the toast stays on the screen (you can change it to LENGTH_LONG if you want the toast to stay there
longer).
Note: What is ‘this’? The ‘this’ in the toast command refers to the activity that we are currently in, ie
MainActivity. This is the context that the toast will appear in.
We’re finally done. Your finished code should look like this:

Now run the app, and click the button. If you’ve done everything correctly, you will see the ‘Hi there!’
message appear at the bottom of the screen like this (9.6):
9.6
Congratulations! That wasn’t easy but what we have done is quite advanced – we have created a method
called ‘buttonClicked’ and linked that method to the button that we added to the user interface. Then we
added code to that method to display the ‘Hi there’ text as a toast on the user’s screen. Not bad!

Allowing the user to enter some text
So far, all our interactivity goes one way. We don’t have any way to get any information from the user, so
let’s add that functionality to our app.
In Android Studio, go back to the activity_main.xml tab, and in the Palette scroll down until you see
‘Text Fields’. There are a number of different types of text field that we can add, which are used for
specific data-types. So if you use the ‘Phone’ type, for example, a specific keyboard will appear to make
it easier for the user to enter a phone number. For now, we will just use the ‘Plain Text’ text field.
Note: a text field in Android development is called an ‘EditText’. We will use that in our Java code
later on.
Drag the button downwards on the phone screen layout to make space for the text field, and then drag in
a Plain Text text field, so your layout looks like this (9.7):
9.7

Click on the text field and you’ll see a set of properties and drop-downs:
ID
Layout_width
Layout_height
inputType
hint
style
singleline
selectAllOnFocus
text

text
contentDescription
textAppearance
The two particularly useful fields here are ‘hint’ and ‘text’. ‘text’ gives a default value to display in the
text field, and ‘hint’ gives an instruction to the user, such as ‘enter your email address’.
We are going to use this text field to get the user’s name, so remove ‘Name’ from the ‘text’ field and
enter ‘What is your name?’ into the ‘hint’ field.
When you run the app, you’ll see this layout (9.8):
9.8

If you tap on the ‘What is your name?’ text view, you will be able to enter your name (the hint disappears
when you start typing).
Note: you might want to change the width of your text view. I usually make my text-views full width,
which you can do by changing the ‘layout_ width’ property to ‘match_parent’.
We’re nearly ready to write some code. We will need to be able to refer to this text view in our code,
so we need to know its ID. In the properties, you’ll see it has the default ID of editText. You can change
this to anything you like – in this case I would use something like ‘nameEditText’.

Accessing the entered text
Now all that remains is to get the value of the text that the user has entered in our code. Our aim here is to
change the content of the Toast so that instead of saying ‘Hi there!’ it says ‘Hi Rob’ (if the user has entered
Rob as their name, of course).
So, click on the MainActivity.java tab, and enter the following code just above the Toast command:
There’s quite a lot going on here. First, we’re creating a variable of a type EditText called nameEditText.
We will use this to refer to our text view.
Ignoring the (EditText) for a moment, the findViewById method finds a view by its ID, and we give it
the ID of our text view, which is stored in Resources (‘R’).
What about that strange (EditText)? Remember that everything that appears on the screen is a ‘view’.
This applies to text views (EditTexts) as well. The findViewById method returns a generic ‘view’, but
we know that it is really an EditText, so we use (EditText) to ‘cast’, or convert, the view into an EditText.
Makes sense? You might want to read that paragraph again just to be sure.
Now we have a variable we can use to refer to our text view. The next step is to get the value of the
text view, which we’ll store in a string called ‘name’:
The ‘String name’ part creates a string variable called ‘name’, and then we use getText() to get the text the
user entered into the text field, and finally we use toString() to convert it to a string. So far so good!
Finally, we need to change the code for the Toast to say hi to our user:
Here we have changed “Hi there” to “Hi” + name. The ‘+’ combines the two strings, so if the user enters
‘Helen’ as their name, “Hi” + name. will be equal to ‘Hi Helen’.
That’s it. Your code should now look like this:

Run the app, enter your name and click the button. If everything has gone well you should see something
like this (9.9):
9.9

Well done! You now have an app which can collect some data from the user, process it and display it back
to the user as a toast. This is the fundamental basis for all user-interaction within apps. Give yourself a
pat on the back!

Building an app for Android project: cat years app
Now it’s time for you to put everything you have learnt into action. They say that a cat year is equivalent
to around seven human years, and we are going to use this fact to build a simple app to allow a user to
enter their cat’s age, and we will show them the equivalent human age in a Toast. Simple, right?
As with the Currency Converter app in the iOS chapter, you will need to convert the user’s entered data
from a string into an integer, and then multiply it by seven, and then convert it back to a string to display
the new value to the user. I’m going to leave that to you to figure out (using Google is very much allowed,
and positively encouraged).
That’s it – start from scratch and create a new project. Good luck!

Solution
The setup process for the app is very similar to the previous app – choose all the same options except the
app title, which can be anything you like. I called mine Cat Years.
Once the app is ready, start by creating the user interface. I have used a very similar layout to our
previous app.
I have changed the text of the TextView to ‘Cat Years’, and changed the ‘hint’ of the EditText to ‘How
old is your cat?’. I also changed the type of the EditText to ‘number’ – bonus points if you did that. I
changed the EditText’s ID to catAgeEditText.
Next, I changed the button text to ‘Show Age In Cat Years’ and I used an onClick method name of
showCatAge, which is a little more descriptive than ‘buttonClicked’ as we used before.
Now over to the code itself. In MainActivity.java, I started by creating the method ‘showCatAge’
which will be run when the button is clicked:
Next, I added a line to create a variable called ageEditText to refer to our text field:
Next I needed to get the value of the field, convert it to an integer, multiply it by 7 and then convert it back
to a string. You likely needed to do some googling to figure out how to do this part – if you managed it,
congratulations!
Hopefully it’s fairly clear what is going on. The first line gets the value entered into ageEditText, the next
line converts it to an integer using the method Integer.parseInt. The next line creates a new integer,
catAgeInt, which is equal to the previous value multiplied by 7. The final line converts this back to a
string using the method Integer.toString.
Finally, I used a Toast command to display the age to the user:
This time we use two ‘+’s, as we have some text both before and after the catAgeString.
That’s it. Your final complete code should look like this:

When you run the app and enter an age you should see the result pop up!

Summary
Congratulations! You’ve built your first complete Android app, and are well on the way to building any
app you want. As with most app development, the most difficult hurdle is getting started, which you have
already overcome. Well done!
If you want to get further into app development, the single best thing you can do is to pick an app idea
and make it. It doesn’t have to be a world-beating idea, a simple app like a to do list app or an egg timer
would be fine for your first app. Every time you need to do something you haven’t done before, just
search the web for what it is you’re trying to do and you’ll likely find someone who has struggled before
you, and someone else who has given them the answer (usually on stackoverflow.com).
If you would like a more structured course to follow to master Android development to master Android
development, search ‘Rob Percival Android’ to check out my Android Developer Course.
Now that you have learned the basics of web, iOS and Android development, we are going to dive into
an all-important topic: debugging. Bugs are something that you’ll come up against constantly when you’re
building a website or app (and usually after you’ve ‘finished’ it as well). We’ll look at some methods of
squashing bugs, working out what is causing the problem, searching the web for answers and posting
questions online if you can’t find a solution.
For now though, give yourself a pat on the back, have a cup of tea and a break, and take a moment to
dream of all those great Android apps you could build.

Further learning
Here are a few larger courses if you want to learn Android app development in more detail:
www.udemy.com/complete-android-n-developer-course/ – my online Android course, covering all
aspects of Android development.
https://developer.android.com/training/basics/firstapp/index.html – official Google training materials
in Android development.
www.coursera.org/specializations/android-app-development – range of beginner and advanced
Android courses.
www.udacity.com/course/developing-android-apps--ud853 – free And roid course, created by
Google.

10
Debugging
If you’re reading this far in, you should now have some experience in coding in a range of different
platforms and languages. Within web development, you’ve coded in HTML, CSS and JavaScript, using a
text editor and a browser to run your code. You’ve coded in Python using the online compiler at
https://repl.it/languages/python. You’ve also built an iPhone app using Swift and Xcode (if you have
access to a Mac) and an Android app using Java and Android Studio.
One thing you’ll likely have come across on all of these platforms, and in all of these languages, is
bugs. A bug occurs when any piece of code doesn’t run as intended. They vary considerably in severity,
from a bug which stops your code running at all (such as forgetting the semicolon at the end of a line in
Java), to a CSS issue which causes your website logo to display a little lower down than you’d like it.
In this section we’ll start by considering why you might want to learn debugging even if you are not
planning to take your coding career any further. Next we’ll look at some standard debugging processes
(and how you can apply some of them to non-coding related problems in your work or life in general).
Finally, we’ll look at some specific debugging tools and techniques for the platforms that we’ve covered
so far: web (HTML, CSS and JavaScript), iOS (Swift and Xcode) and Android (Java and Android
Studio).

Why learn debugging?
Debugging is not just about fixing errors, it’s about making your code better. And this has applications in
all aspects of life. If your job involves teaching, learning how the recipients of your knowledge find your
style is crucial to improving. If you do a lot of number crunching, a small tweak in your Excel formulas
could speed up the whole process dramatically (or make you less likely to make a mistake).
What I find particularly useful about debugging is that the exact same techniques can be applied to
almost anything you do in life, to make you more effective and efficient. Once you start looking at your
code, working out where it is going wrong and fixing it, you won’t be able to help applying similar
techniques to your life as a whole. It’s like a coding-based self-improvement program!

Why do I spend so much time debugging?
One question that plagues new coders is why they spend so much time fixing problems in their code. Most
people hope that because they have a clear idea in their head about how their code should work, that will
automatically transfer itself to your computer screen and everything will run as intended.
The reality is rather different. As you write more and more code, you’ll realize that debugging is
actually a major part of the app-or website-building process, and this is fine. Computers are fickle beasts,
and us mere mortals are not used to interacting with machines that require absolute precision, and will
punish you relentlessly by running your code exactly as you wrote it.
So debugging is a (big) part of the process. But that doesn’t mean that isn’t frustrating and we shouldn’t
try to avoid it as much as possible. So let’s start by seeing how we can write code that requires minimal
debugging.

How to write code that requires minimal debugging
Step 0: Write good code
Good, clean code can save a huge amount of time in the long run. When you want to build an app or add a
new feature to your website, the temptation is often to write your code as quickly as possible and to have
the attitude that, as long as it works, it is good enough. This approach is perfectly reasonable when you’re
learning or for small personal projects, but in my experience it almost always costs you more time than it
saves you. Taking an extra five minutes properly writing your code in the first place can save you hours of
debugging further down the line.
Compare these two JavaScript functions, which determine whether a number is prime or not. (A prime
number has precisely 2 factors, 1 and itself. For example, 2, 3, 5, 7, 11 etc.)
Both functions work perfectly well (the logic is identical for both), but the second function has numerous
advantages over the first:
It is well spaced out. Most programming languages don’t require line breaks, but including them makes
the code much easier to read.
It has meaningful variable names. Try to avoid using variable names such as ‘x’ or ‘number’, and
instead give your variables easy to recognize names.
It has comments. All programming languages have a way to add human-readable comments, and you

should use them whenever possible to explain what your code is doing.
You might feel that in an example like this it doesn’t make too much difference whether you use comments,
spacing and meaningful variable names, but when your code starts to expand to hundreds of lines (which
it will if you are building cool things!), you’ll appreciate getting into this habit with all code you write.
Another advantage of coding this way is that it forces you to slow down, making it much less likely that
you will miss a crucial semicolon, or miss-spell a function name.
One other trick as you are writing your code is to check it as regularly as possible. This means running
your app, or loading your website, and making sure it is behaving as expected so far. As a general guide,
if I haven’t checked code that I have been writing for over 10 minutes, I start to get a little nervous and
look for a good place to stop and check that everything is OK.
The precise timings will depend on the project and your personality, but my advice, particularly in the
early stages, is to run your code as often as you can. If you do get an error when you run it, you will have
a smaller number of changes since you did the last check, so the debugging process will be much simpler.
If you don’t, you’ll feel encouraged and confident that everything is going well.
Great! Now that we are writing good code, let’s consider some of the standard questions we have to
ask ourselves when we are debugging. These are the most important questions in this whole chapter, and
perhaps in the whole of coding itself – if you can answer them, you can fix any problem.

Step 1: The three questions
When a new coder finds that some code they have written doesn’t work, they often feel frustrated, not sure
where to look to fix the problem, and as a result they often blame themselves (‘I’ll never be able to do
this’) or the machine itself (‘stupid computer’). This is perfectly natural, and all coders have experienced
this emotion many times.
The difference between experienced and novice coders, however, is that the experienced coder knows
that this has happened many times before, that it doesn’t mean he or she is an idiot, and that it can likely
be fixed using the same process they use every time.
So what is this process? The first question to ask is a painfully obvious one: What makes you say your
code isn’t working?
The answer to this question might be frustratingly self-evident: ‘My code won’t compile!’; ‘My
website won’t display properly’; ‘The button doesn’t do anything when I press it!’
But forcing yourself to answer this question is harder than you think. If you have an error message, pay
careful attention to it – what is it saying? Error messages can often be obscure, but you should be able to
extract some meaning from it. It will also often tell you the exact line that the error occurred, which is a
great starting point. And ‘googling the error message’ is a perfectly reasonable (and common) thing to do
as a coder!
If you don’t have an error message, this can be trickier, but you should at the least clarify exactly what
the problem is. Evolving your thinking from ‘My website won’t display properly’ to ‘My logo is
appearing at the bottom of the screen, but I want it at the top’ is a big step forward. With layout issues in
particular, dealing with problems one at a time is crucial – it’s easy to get overwhelmed, but breaking the
issues down into individual errors and getting them clear in your head will make fixing them much easier.
Now that you (hopefully) have a clear understanding of what exactly is not behaving as expected, it’s
time to move on to question 2: How is your code supposed to work?
Again, answering this question might be frustrating – you only wrote the code five minutes ago, you
know how it’s supposed to work. – but all too often running through the part of the code that seems to be
causing the problem is all that is needed to fix the issue.
With the logo issue, for example, you would likely go to the CSS that controls the position of the logo.
Thinking through the CSS commands you have written, how should the logo display? Are there any
conflicting lines of CSS that could be changing its position unexpectedly?
If a button is not responding, mentally work through the process that is supposed to happen when the
button is clicked. Is the button correctly connected to the function you have written for it? Could there be
an error in that function? Does the function actually display a result, or does it just do some calculations
without changing the UI at all?
Ninety per cent of code errors should be fixed by now, if you have carefully asked yourself those two
questions. If you’re not done yet, though, it’s time for question 3: What tweaks can you make to clarify
what your code is doing?
If you have well-written, clearly commented code, it should be fairly obvious what your code is up to
at any point. However, even good code can contain mistakes, and our final trick is to play with some

variables, or add small lines of code, to see what effect that has on how the app runs or the website
displays.
Going back to the logo example, you could try experimenting with some values – does changing the
margin-top value move the logo down as you might expect? If not, why not? If you really can’t find the
error you can always remove all the CSS code except the lines that should be controlling the logo’s
location. If it then displays correctly, add them back in gradually until the problem recurs. Bingo – you
have found the problem.
With our problematic button, try using a ‘print’ command (more on those shortly) to display the value of
a variable to make sure it is what you think it is. You could even just use something like:
to make sure a certain chunk of code is being executed at all. The code removal process can be useful
here as well – try removing all the button execution code apart from a print statement. If the print doesn’t
happen, then there is a problem in the connection between the button and the code. If it does, add the code
in gradually until it stops behaving as you would expect. Then you know where the error is.
Ninety-five per cent of the time your error should now be fixed – the process of defining the problem,
explaining to yourself how your code works, and tweaking values/using print statements is the standard
process that you should go through each time.
Incidentally, this is exactly the procedure you can often apply to real-life difficulties. Defining the
problem is often the hardest part of making a certain process more efficient, or even figuring out why you
are unlucky in love. Then, explaining to yourself what you are currently doing and why is probably enough
for you to see where you are going wrong. If not, experiment with changing small things and see if that
improves the situation.
What if you still have a bug though? Sometimes we simply can’t fix a problem ourselves, and need to
resort to outside help. Fortunately, because we have clearly defined the problem, and have a strong
understanding of what our code is supposed to do, we should be able to search for, and ask for, help
effectively.

Step 2: Searching for help
If you’ve got this far in this book, you’ve almost certainly done some debugging yourself and, in the
process of googling for an answer, you’ve likely come across stackoverflow.com. Stack Overflow is a
simple idea – people post questions and other people answer them – but it has proved extremely popular,
and combined with a strong search engine, the answer to a huge range of common programming questions
is at your fingertips.
But what to search for? As I’ve mentioned, if you have a particular error message, simply googling that
is a good first step. If not, you’ll need to think more carefully about what to search for.
As a starting point, I would always include the name of the programming language and/or platform in
your search. A search for ‘how do I change the colour of text’ could apply to a huge range of different
pieces of software, so add ‘HTML’, ‘CSS’, ‘JavaScript’ or ‘Swift’ at the end to get to your answer much
more quickly.
With Android development, I find it is often worth adding both ‘Java’ and ‘Android’ to the search term,
as Java is used in a range of different devices, and is not just for Android apps.
If you are using a specific development environment, such as Xcode or Android Studio, it can be useful
to add this to your search as well. If nothing else, including ‘Xcode’ in a ‘Swift’ search makes it less
likely that your results will include articles about Taylor Swift!
Beyond that, as with any web search, try to be concise and unambiguous (this should come naturally
after asking the three questions).
Here are some bad search queries. Try to think of better alternatives:
How do I make text bigger?’
Swift blank screen on app launch’
No sound in android app’
Image won’t display in website’
Some better alternatives might be:
CSS how to change text size’
Xcode Swift [give error message here]’
Java Android how to play sound’
HTML how to display image’
Note that with the last two, instead of searching for the error, I am looking for instructions or code for
how to do what I am trying to do. I might then copy and paste the code I find into my app or website to see
if that works. If it does, I can compare it to my code to see what is wrong. If it doesn’t, I can be fairly sure
that the code itself is not the problem, and that the issue lies elsewhere.
A quick caveat on copying and pasting code that you’ve found on the internet – this is a risky thing to
do. At the very least you should make sure that you understand how the code works, but also bear in mind
that it could have been written for an older version of your programming environment (Swift in particular

is updated regularly), or possibly even for a different setup that you are using. In short, only copy and
paste short chunks of code that you understand and could debug yourself if necessary.
OK, so we’ve asked ourselves the questions, we’ve searched online, and we’ve come up with nothing.
It’s time for the programmer’s last resort: to ask for help.

Step 3: Asking for help
Programmers are a pretty helpful bunch, and are more willing than most to help out in exchange for some
internet points, or just a public thank you. However, they don’t like being asked vague questions or
questions that have already been answered elsewhere.
If you are on some kind of programming course where you can ask questions, that is obviously a good
place to start. When you ask your questions there, make sure you give all the information that someone
could need to solve your problem. However, avoid pasting all your code, giving the error message and
asking what is wrong. This is very time consuming to debug!
Instead, answer the three questions above, telling your potential helpers what you are trying to do, what
result you are getting, what debugging you have done, and the few lines of code that you have isolated that
are causing the problem.
If you don’t have access to that sort of forum, stackoverflow.com is probably the best place to ask
questions. There is a very helpful guide to asking good questions at http://stackoverflow.com/help/how-
to-ask. If you ask your question well, I find you’ll normally have some useful responses within an hour.
Not bad!
It goes without saying that when you have an answer to your question, you should always offer a quick
‘thank you’ (or, on Stack Overflow, ‘accept’ the correct answer). And when you’re further down the line,
consider answering some questions yourself to help others get started.
We have now gone through the whole debugging process (the latter stages of which, incidentally, is
pretty much identical to the ‘How do I…’ process, if you’re trying to learn how to do something you
haven’t done before). We’ll now look at specific debugging tools for the different languages we have
covered. These can save you a lot of time, and make the whole process much smoother.

Debugging HTML and CSS
The single most useful tool to most web developers are the Developer Tools, which are included with
most browsers. Here we’ll look at the Chrome Developer Tools, which I personally think are the most
comprehensive. To access them in Chrome, click View → Developer → Developer Tools.
10.1
A window will appear at the bottom of the screen – click on the Elements tab and you’ll see the HTML of
the page you’re on and a summary of the CSS styles on the right.
Different sections of the HTML are usually hidden behind ‘…’s – just click on the … to view them.
You can also click the button in the top left of the window to select any element on the page and view the
HTML and CSS related to it. Try it out – it’s pretty cool.
You can even edit the HTML of the page by double-clicking on it, which can be very useful for
debugging individual elements (or changing the headline on cnn.com and impressing your colleagues!).
Note this only edits the version stored on your computer, not the live version on CNN’s servers.
A particularly useful CSS trick is to enable and disable individual styles (10.2):
10.2
Just hover over the style and click the blue tick to disable it. You can also change the values of styles, just
as you can with the HTML.
Once you’ve finished playing with the Elements tab, click on Console. We will be using this more in

the JavaScript debugging section, but here it is useful for seeing any errors in the page.
You will also see other major HTML errors here, but if you want to check your HTML in more detail,
you can use an HTML Validator, such as https://validator.w3.org/. This will tell you if your page has, for
example, unclosed HTML tags, or options for elements that are no longer supported.
This can be very useful, but don’t necessarily expect your code to have no errors whatsoever. At the
time of writing, www.bbc.co.uk/ had over 100 errors!
When it comes to CSS, http://csslint.net/ is an extremely powerful tool. It will not only show you CSS
errors, but also conflicts, where two different styles are conflicting with each other, and also advise you
on how your CSS could be better.

Debugging JavaScript
As with HTML and CSS, your main tool with debugging Javscript are the browser Developer Tools,
specifically the Console. Not only will that show you any JavaScript errors, but you can also use it to find
out values of variables, or whether certain chunks of code are being run.
Try running this JavaScript on a webpage and looking at the results in the console:
You should see something like this (10.3):
10.3
The console.log command allows us to print something in the console, which is an extremely powerful
debugging tool.
Beyond the console, www.jslint.com/ is similar to CSS Lint, and will show you a range of errors and
warning messages.

Debugging Swift in Xcode
Xcode, like most integrated development environments (IDEs), has a range of debugging features. The
first is inline error messages. It is pretty clear when there is a syntax error, although the error messages
themselves can be a challenge to decipher.
If you run some code that causes your app to crash, you’ll often see a very unfriendly (and not
particularly helpful) ‘terminating with uncaught exception of type NSException’ message (10.4):
10.4
However, scroll up in the console and you’ll usually find something useful; in this case I am attempting to
print an array value that doesn’t exist (10.5):
10.5
Xcode’s equivalent of console.log in JavaScript is the ‘print’ function, which works like this:
As with console.log, it allows you to display variable values, or verify that a specific chunk of code is
being run. If the console is not visible, you can make it appear by clicking at the top right of the Xcode

window.

Debugging Java in Android studio
Android Studio’s debugging tools are similar to Xcode’s. There is automated error checking, to show you
syntax errors and warnings (10.6):
10.6
You do need to look quite carefully as the red wiggly underscore is often not immediately obvious. There
is also a red line on the right hand side of the editing window, and if you hover over either the underscore
or the line, you’ll be given the error message (10.7):
10.7
If you run some code which has errors in it, you’ll see errors appear in the logs as with Xcode. There is
also the facility to write messages in the logs, similar to console.log and print. To do that, use the Log
command, like this:
Each log command has a title (in this case ‘Message’) and content (‘The log command was run’). The ‘i’
in Log.i is short for information, and the command allows you to use different letters for different log
types, the most common of which are:
D – Debug.
I – Info.
W – Warning.
E – Error.

Summary
We have now gone through all the major debugging techniques, and seen a range of tools to debug code on
a variety of platforms. We’ve also seen how to write good code, to minimize the amount of time we spend
debugging.
Debugging is a necessary process for any programmer, but done right it can be a learning experience in
itself. The most important thing is to approach debugging calmly and methodically, and try to avoid letting
the bugs stress you out!
We’ve also glimpsed how we might apply the debugging methods to life in general, and work tasks in
particular. Take a few moments now to approach some of the aspects of your job or life that are currently
problematic or inefficient. Ask yourself the three questions and see what difference it makes. I think you’ll
be pleasantly surprised!
This concludes the ‘In Practice’ section, in which we have seen how you can apply the coding skills
you learned in the previous section to build real websites and apps. We are now going to see how you can
further use your coding skills to future-proof your career, starting with using coding to enhance your
career prospects.

PART FOUR
Future-proofing your career with coding

11
Using coding to enhance your career
So far, we have spent most of this book learning to build websites and apps. I hope you have enjoyed
learning these skills, but it is likely that you still have your day job, and might be wondering how knowing
how to code might benefit you within your current role. This is what we will be considering in this
chapter, and by the end of it you should have at least one way in which you can future-proof your career
using your newfound talents.
Many employers are desperate for increased digital literacy among their staff. We live in a world
dominated by software, but only a minority understand how it works. This has created a skills gap in
which companies in all sectors are increasingly desperate to employ highly technical candidates. This
means that even if you don’t intend to change careers, completing coding-related projects and activities is
a great boost for your employability and gives potential employers reasons to hire you. You should
always put your coding skills on your CV, stating what languages you have knowledge of, how you are
able to put them into practice, what level you are at, and listing any websites, apps or projects you have
worked on. Discussing your coding achievements can also be an excellent way to impress at an interview
if you’re looking for a brand new job. If you want to stand out in your current role, mentioning your
abilities to your manager during a catch-up or offering your coding skills to a project will help you
succeed at making an impression.
All of the suggestions in this chapter will boost your career prospects by developing and demonstrating
your technical abilities. Not all of the suggestions in this chapter will necessarily apply to your role or
sector, but you’ll be surprised how far a little creative thinking (combined with the coding skills you have
learned so far) can take you.
We will start by considering whether you could create an app for the company you work for, and what
that app might look like. Next we’ll look at the process of starting a blog, and why it is likely you would
benefit from having one, regardless of the industry you are working in. Then we’ll look at a number of
ways you can automate or streamline processes in your daily workflow, using tools such as If This Then
That, Text Expansion, AppleScript and Powershell.

Creating an app for your business
Regardless of the type of company you work for, it is likely that there is a process that could be done
better if there was an app created specifically for it. As a teacher, I created a simple app to manage house
points. Staff could give students a house point instantly, and students could see straight away which house
had the most points. What app could you build that would make you or your colleague’s work lives
better? (Note – you could probably build a website to do the same job, but I find people get rather more
excited about apps than websites!)
Building an app for your company is a great way to learn the complete app development cycle without
having to come up with a ground-breaking idea. You can be sure that at least someone will use your app,
and with any luck you’ll get some kudos for creating it. You might even find yourself becoming the digital
guru in your office!
Simple app ideas might include:
An ‘onboarding’ app that tells new employees basic information about how things work at your office.
An ‘important information’ app containing useful phone numbers, email addresses and other
information that all employees would find handy.
An app that displays information about the business, such as sales figures, circulation or progress
towards certain goals.
The most important thing about your first business-focused app (as with any app) is to keep it simple.
Make sure it does one thing well rather than trying to solve all the problems your company has in one go.
To give a real-life example, John Williams is a fireman based in the United Kingdom. He realized that
in the training of his colleagues there were various tests that needed to be completed, but no centralized
system keeping track of who had successfully completed each test. Moreover, fire stations in different
districts used different processes. He created a system for his district so that someone could not only take
the tests online, but a supervisor could keep track of which tests each of the firemen had passed, and thus
knew when to put them forward for the official exam.
Since creating the app, John has been approached by a number of nearby districts to use the app
themselves. It’s early days yet, but it could become a very useful teaching and learning tool, used by fire
stations throughout the United Kingdom.
Creating an app for yourself or your colleagues allows you to ‘scratch your own itch’, ie solve a
problem that you know exists for at least a small number of people because you have that problem
yourself. You’ll also get quick feedback (good and bad!) from your colleagues, and there is always the
possibility your app will grow into something bigger than you could imagine.

Starting a blog
In the world of Facebook and Twitter, writing a blog might feel a little old fashioned. You can certainly
develop a following on social media (and we’ll look at how to do that more effectively later in this
chapter), but running your own blog has a few unique advantages. Firstly, the sheer fact that setting up a
blog is more difficult than creating a Facebook or Twitter account shows that you are serious. It is a way
of telling the world that you have something to say, and that you are dedicated enough to regularly create
content that people enjoy.
Secondly, as it is your blog, you have complete control over your content. You are not limited as you
are with social networks in how content will be displayed, or who can view it.
Thirdly, and most importantly, there is the google effect. Increasingly, regardless of your industry,
potential employers will use search engines to find out about job applicants. If you run and update a blog
that will almost certainly become the top search result when people search for you. That’s a pretty
impressive thing for a potential employer to see.
Fourth, owning your domain name is increasingly useful. As we have seen, a domain name is a web
address, like google.com. Owning robpercival.co.uk has been very useful for me, and I would thoroughly
recommend that you stop reading right now and try to purchase your name. If you have a common name,
you might need to try alternative domain extensions such as .me, or .blog, or you can get creative like the
blogger John Gruber did when he set up his blog at daringfireball.com (which you’ll hear more detail
about later in this chapter).
Fifth, you can use your blog to build a community and position yourself as an authority figure. If you
write useful and challenging content, you will start to build a following of like-minded people who are
interested in what you do. By encouraging them to post comments on your articles, you can get to know
these people, and form a community with you at the centre. This is a very powerful thing, and a whole
range of opportunities might develop from it.
Finally, once you have built up an audience, if you wish you can monetize the blog itself, by offering
subscriptions for special content, recommending products, or just using the platform to launch your next
big business idea.
There are countless other benefits from writing a blog. You will be forced to write clearly and
coherently, expressing your ideas eloquently and in an entertaining way. This is a rare and valuable skill
across all industries. It will clarify your thinking and your ideas. It will build your confidence as you
write more and your audience grows. It can help bring attention to causes that you care about, and even
change public policy. It will bring in new experiences, with new people, and develop your technical and
marketing skills. And, of course, you will help people by sharing your knowledge, experiences or simply
entertaining them.

Choosing a topic
At this point, you’re probably thinking ‘I don’t have anything to write about.’ That’s not true. You may not
feel particularly unique, but you are the only person in the world with your set of experiences, skills and
hobbies. I would be very surprised if there wasn’t something that you care about, know more about than
most people, and would like to share with the world.
If you’re not sure what you might write about, grab a pen and a blank piece of paper. Write down 20
topics that you are interested in. These might be hobbies, styles of music or art, regions of the world,
sport, issues related to your job, charitable or political causes, technology, or anything else. Think about
which topics you would be keen to write about, and which you might be in a particularly good position to
discuss. The best blog writing is informed and passionate, but those who set up successful blogs are
rarely great authorities on their subject. They are just normal people who commit to creating quality
content regularly.
If you’re still not sure what you might write about, you might just choose to be very honest about your
job, sharing what it is like day to day to be an accountant, teacher or airline pilot. Or you could take up a
completely new hobby or learn something new and blog about the process. You could even blog about
learning to code!
Like starting a business, starting a blog is a little nerve-racking, and requires a leap of confidence to
take the first step, but it is incredibly rewarding, and you never know where it might lead.

Blogging success stories
The cause
There are endless stories of people who have achieved great things through writing blogs. One
particularly impressive tale is that of Martha Payne, a nine-year-old from Scotland who created the
‘Never Seconds’ blog at http://neverseconds.blogspot.co.uk/, writing about the poor quality of her school
dinners. Within three months the blog had come to the attention of the national media, and the local
authorities quickly started to improve the food at their schools. Martha raised over £100,000 for school
children in Malawi, won The Observer Food Blog Of the Year award, and went on to publish a book
about her experiences. (Book publishing is a common outcome of writing a popular blog, so if that’s
something that’s on your bucket list, there’s yet another reason to give it a go.)
The hobby that became a full-time job
John Gruber was a software developer from Philadelphia, who launched his Daring Fireball blog in
2002. He writes about whatever interests him, which is primarily Apple-related topics, software
development and user interfaces. He is known for writing passionately and clearly, with strong opinions.
The popularity of the blog grew gradually until 2010, when one particular post about third-party
applications for building iPhone apps was mentioned by Steve Jobs in an email to a user. This
controversial topic was covered by the media, and brought Daring Fireball to a massive new level of
popularity.
The blog became Gruber’s full-time job in 2006, with income coming from sponsorship,
advertisements and affiliate links. Affiliate links are links that go to particular products, and when the
user buys those or similar products after clicking the link the publisher (in this case Gruber) gets a fixed
amount, or a percentage of the purchase. We will talk more about affiliate links later in this section.
Gruber now also runs The Talk Show podcast and has speaking engagements around the world. Like
publishing a book, if you have ever wanted to be a professional public speaker, starting a blog is a great
first step.
Gruber’s story shows that while writing a blog can be slow progress (it took him four years for it to
produce a full-time income), you don’t need any special authority, experience or insider-knowledge to be
successful. He was ‘just another’ software developer that shared his opinions in a way that completely
changed his life.
Muddy stilettos
Blogs don’t have to offer incisive opinion or shocking truth – they can just be fun. Hero Brown launched
http://muddystilettos.co.uk/ in 2011 to help people in Buckinghamshire UK find the best places to dine
and shop. By November 2012, the blog had become Brown’s full-time job, and has since spread to
providing fun first-hand information about restaurants, hotels and country life in nine counties.
These are just three examples of successful blogs, but there are many more. Mr Cassidy shares what his
six year olds get up to at http://mscassidysclass.edublogs.org/. Mr J. Brown blogs about Yoga at
www.jbrownyoga.com/, and is building an online workshop on the success of his writing. Mark Lee blogs

about accounting at http://marksaccjokes.blogspot.co.uk/, his blog forming the basis of his consultancy
and public-speaking business.
Whatever you want to achieve with your career, starting a blog is a great way to begin.

How to start a blog
Creating a blog is much like building any other website, so for buying domain names, getting web hosting
and other general topics, I will refer you back to Chapter 7. The main decision you will need to make for
your blog is what platform to use. As with web development, there are a selection of blogging platforms
that you can use, including wordpress.com, tumblr.com and blogger.com. All of these will allow you to
set your blog up quickly, but have the major disadvantage that you do not completely own your content. If
you want to move to a different provider, this can be very difficult. You might also be limited to what
features you can have, or what styles, layouts and website structures you can use.
My advice would be to use a self-hosted platform, and by far the most common platform for bloggers is
Wordpress. (Note Wordpress.com is essentially a hosted version of Wordpress – they offer broadly the
same features but with a self-hosted setup you have much greater control over your site.) For advice on
setting up a hosting for your Wordpress website, see Chapter 7. Once you have set up the hosting, your
hosting provider can guide you how to install Wordpress and the whole process, from buying a domain
name to seeing your site live, shouldn’t take more than a few hours (and most of that time will be waiting
for the website to become live).
While it is possible to create a blog without any coding skills, you will be able to use your HTML and
CSS experience to customize the look and feel of your site, rather than relying on the default look of
available themes. You can also use JavaScript and other languages to customize the behaviour of your site
and add specific functionality, such as a sign-up form or calendar.
I hope by now you are seriously thinking about starting a blog, but if you are not quite ready for that yet
there are a number of other ways you can use coding to enhance your career prospects, or just to do your
current job more efficiently. We’ll start by looking at ways that we can automate or speed up tasks using
code.

Finding tasks that can be automated
In almost every job there is a part of the workflow that can be done more efficiently. If your job is
marketing, you may well end up posting the same thing to Twitter, Facebook, and perhaps other social
networks. If you write lots of emails, you might find that you type the same phrases, sentences or
paragraphs over and over. In researching a book, you might want to collect email addresses from a
number of websites. You may need to rename a large number of files. Or you may have a list of files, and
need to search through them for specific words. We’ll see how to automate each of these tasks, and look at
more general use-cases for the tools that we create.

If This Then That
If This Then That (https://ifttt.com/) is a web service that allows you to connect a huge range of other
apps and automate various processes. Each process is known as an ‘applet’, and range from ‘save all
photos I am tagged in on Facebook to Dropbox’ to ‘send me an email when it’s going to rain’. But there
are a range of more useful applets, in particular ‘Post your tweets to Facebook when you use a specific
hashtag’ 
(https://ifttt.com/applets/112202p-post-your-tweets-to-facebook-when-you-use-a-specific-
hashtag). This solves our first problem, and if managing social media accounts is part of your job, this can
save a huge amount of time.
You might even find tasks that you don’t currently do, but could be done automatically and benefit your
business. If you use Mailchimp to send newsletters for example, you can automatically share the latest
newsletters’ performance with your colleagues via email, Slack and a Google Spreadsheet
(https://ifttt.com/applets/DHFQvPEj-share-newsletter-performance-with-the-team).
While not coding as such, using IFTTT forces you to think through the conditions that you want to cause
your applet to run, and exactly what output you want, and so it involves many of the same challenges.
More importantly, it can make your life a lot easier, and dramatically increase your productivity, so take a
little time to look at the applets available, and think about how you could apply them in your current role.

Text expansion
A lot of jobs require you to write similar phrases and sentences frequently, often many times a day. At the
very least you might need to type your email address, phone number or home address pretty regularly.
Text expansion allows you to assign shortcodes to any text, so you might assign ‘wyt’ to ‘What do you
think?’.
In some text expansion apps, you can even use shortcodes to insert images, or press buttons like Tab or
Enter. You can use this to log into a site with just a shortcode, by instructing the shortcode to insert your
email address, then ‘press’ the Tab key to move you to your password field, insert your password, and
then press Tab to move to the Login button and then press Enter to log in.
How much time this will save depends on your role, but there are few people that wouldn’t benefit
from setting up a few basic phrases.
Text expansion on MacOS
Text expansion is actually built into MacOS, so you don’t need to download any extra software, unless
you want advanced features. To access it, click the Apple icon in the top left of the screen and then select
System Preferences and Keyboard. Select the ‘Text’ tab and you’ll see the Keyboard Shortcuts window.
Just use the + button to add new shortcodes and you’re done!
Text expansion on Windows
There is no built-in text expansion utility for Windows, but Phrase Express (www.phraseexpress.com)
has a free edition for personal use and Word Expander (www.wordexpander.net/) is completely free.
If you want to investigate more advanced features, the full versions of Phrase Express, as well as the
cross-platform Text Expander (https://text-expander.com/) are both excellent places to start. Like with
IfTTT, while text expansion is not coding as such it still requires you to think carefully about how you
want the app to behave, and if you use some of the advanced features it can get pretty complex. Give it a
try now, and see how much time you can save.

Using Python to extract email addresses from a website
The process of extracting information from websites automatically is known as ‘scraping’, and is widely
used in Python. It can save a lot of time when researching the web if you want to, for example, gather a
collection of email addresses or the titles of a range of books or blog posts. Python is great for this sort of
thing, and I have included below a simple web scraper, which ‘crawls’ the web, starting from a certain
page. Crawling is the process of downloading a number of different webpages, by looking for links on the
original page. In this case, we start with www.ecowebhosting.co.uk; look for all the links on that page,
download the content from each of those pages, and then search for email addresses on that page.
It uses Beautiful Soup (www.crummy.com/software/BeautifulSoup/), a Python library designed to make
website scraping easier.
The code is a slightly edited version of http://scraping.pro/simple-email-crawler-python/. It is well
commented, and uses rather more advanced Python than we have seen so far, so I won’t go through it line
by line, but if you have some ideas of how you could use web scraping in your job, you should be able to
figure out how it works using the comments. You can then customize it to your precise needs.



Automation on MacOS
If there is a task on your computer that you do regularly, such as exporting video files, or saving
Photoshop files in specific resolutions, it’s likely that you can automate it. Here we will see how to do
that on both MacOS and Windows.
All Mac computers come with AppleScript built in. This is a special programming language that you
can use to open apps, click menu items, type text and a lot more. To begin with AppleScript, use cmd-
space to open Spotlight and type in ‘Script Editor’. This will open the MacOS AppleScript Editor.
This is a simple program that allows you to create and edit AppleScripts. To give an example of how
AppleScript works, here is a script that bulk-renames a set of files.
The code comes from https://gist.github.com/oliveratgithub/b9030365c9ae483984ea, and as before is
well commented (comments in AppleScript being with ‘--’) so just read through to see how it works:


To try the script out, copy and paste it into the Script Editor, and click File → Export. Change the File
Format to Application and call the app ‘Bulk
Renamer’.
You can then run the app and the renaming will take place. If there are any repetitive tasks that are part
of your regular workflow, see if you could write an AppleScript app to automate the process.

Automation on Windows
The equivalent to AppleScript on Windows is PowerShell. Powershell 5.0 is included with Windows 10,
so let’s use it to see how we could search through a collection of files looking for a particular snippet of
text.
To open Powershell, just type ‘Powershell’ into the search bar at the bottom left of the screen.
The code below comes from http://www.adminarsenal.com/admin-arsenalblog/powershell-searching-
through-files-for-matching-strings/, and again should be fairly self-explanatory (comments in powershell
start with ‘#’).
As with MacOS, if you regularly complete repetitive tasks on a Windows machine, take some time to
consider if writing a Powershell script would make you more efficient.

Summary
In this chapter have a seen a range of ways that you can use coding to enhance your career prospects.
You’ve considered building an app for your company, starting a blog, and using a variety of tools to make
your work-flow more automated and efficient. I hope you’ve taken away at least one of these ideas and
used it to improve your work life.
We’re now going to take the next step – to consider how you might use your coding skills to launch a
product or a business. This could be as simple as creating and selling a digital product such as an ebook
or video course, or building the next big social network. I’ll lead you through the process from idea-
creation to marketing and growing the business.

12
Coding and entrepreneurship
One of the most exciting things about learning to code is that it enables you to create your own business,
product or service, and allow people around the world to access it immediately. This is something that
has only been possible in the last 20 years or so, and has brought the cost of starting a business down to
close to zero.
We’ve already seen how to create and host a website, and how to build apps for Android and iOS. In
this section I will walk you through the process of starting an online business using your newfound skills.
As always, this section is practical, so keep a pen and paper handy to jot down ideas and business plans
as you read through this chapter.
Aim to come up with and test at least one business idea by the end of the section. You might not become
the next Mark Zuckerberg or Bill Gates, but at the least you should be able to build a second income
stream, and you’ll certainly have a lot of fun, and learn a great deal, along the way.
We will begin by seeing how you can generate business ideas, and where the best ideas come from.
We’ll then go on to see how you can validate and hone your ideas, making sure that the one you choose is
most likely to succeed. Finally we’ll look at creating your initial product, getting it to customers, and
pricing.

What’s coding got to do with entrepreneurship?
Many of the examples and suggestions below have little to do with coding, so you might be wondering
why you would need to code at all to start a business. The answer is of course that you can start a
business without learning to code, but being able to code makes the whole process so much easier.
Not only do you have a better understanding of how the websites and services you are using function,
enabling you to use them more effectively, but if you cannot code you will constantly come up against
frustrating challenges. If your business needs a website, you can just create it rather than paying someone
else, or paying for a hosted service. If your business needs an app, or a mailing list, or an automated
process, you can just build it, which is extremely liberating.
Even if you decide not to build your own website or app, knowing the basics of coding means you’ll be
able to communicate effectively with whomever is doing so, resulting in a much better, and likely cheaper,
outcome.

Getting ideas
Every great business starts with an idea. Ideas can come from anywhere, but in my experience the most
reliably successful way to choose an idea is to choose a niche that you are already familiar with. Scratch
your own itch is a phrase we have seen before, and if something is a pain-point for you, it likely is for a
number of other people as well.
For example, if you are a yoga instructor and find it difficult to get clients because there is no central
portal where people can search for and rate different yoga instructors, perhaps creating that portal would
be a good idea.
Or perhaps you are a plumber who finds the process of invoicing and arranging payments from your
clients a hassle. Would an automated service, specifically designed for plumbers, be useful to you? If so,
it would likely be useful to many others as well.
Don’t worry about a niche appearing too small – once you have developed ‘traction’ (ie a number of
people are actively using your service), there are almost always possibilities for expanding into related
fields. The yoga portal could grow to support any sporting activity, and the plumbing invoicing service
could be applied to a range of domains.
Hopefully a few ideas are already popping into your head, so let’s take a moment to choose ideas even
more effectively. While it is important (although not crucial) that you have some special knowledge or
experience in the business niche, there are two other factors that will substantially affect your chances of
success.
The first is whether you have particular skills that will help you be able to succeed with a particular
idea where others would not. You should ask yourself what special skills do I have that mean that I can
build this business better than anyone else? By this I don’t mean that you must have finely honed
business instincts, but that your capabilities match those required for that particular business. If your idea
is going to require a lot of public speaking, and the thought of doing that terrifies you, you might not be
best placed to run that business. If you are particularly creative, look for business ideas that will allow
you to use your creativity. If you enjoy working with numbers, look for ideas where numbers are critical
to its success.
The second factor is what you enjoy doing. Usually people enjoy what they are good at, so often the
two overlap, but not always. I love singing and playing the guitar, but I’m yet to make a career out of it.
But you are much more likely to succeed if you actually enjoy the tasks that will be required of you to
create and grow that particular idea. So for each idea, imagine yourself going ahead with it and actually
doing the day-to-day activities. Do they seem fun to you? If so, you’ll be much more likely to make a
success of the business.
I often think of these three factors as a Venn diagram, in which the perfect business idea for you lies in
the centre, at the overlap of your skills, experiences and what you enjoy doing (12.1).
12.1

Take a few minutes now to think about business ideas based on your own personal experience – they
could relate to your job, hobbies or any aspect of your life. Brainstorm as many ideas as possible – aim
for at least 20. Most ideas will appear crazy, ridiculous or impossible at first, but get them down anyway
as crazy ideas can often be the seed of a very sensible business.


Startup story
Alice Hall was 27 in 2012, and was struggling to pay her bills. On a whim, she bought £90 of
dresses and resold them online. They sold quickly, and she used the profits to buy £180 of dresses.
Again, they sold well, and she carried on buying and selling dresses until she was ready to create
her own website, pinkboutique.co.uk. As of June 2016, the business has a turnover of £7 million,
selling 2,000 dresses a day all round the world. You don’t need extensive business experience or a
big upfront investment to build a successful business, you just need to start.

Products vs services
It is important to draw a distinction between product-and service-based businesses, as both have quite
specific advantages and disadvantages.
A service-based business might be a web hosting company, or a platform for finding good cleaners.
Google, Facebook and Vodafone are service-based businesses. Services have the huge advantage of the
potential for recurring revenue. This is when a customer pays a regular fee for an ongoing service.
Having recurring revenue is extremely powerful because you can rely on a certain amount coming in each
month. And as your user base grows, it naturally adds to your income for the long term. Of course, you
need to provide value for your users for as long as they are paying you, but if you can do that a recurring
revenue stream is a boon for any business.
A product-based business might be an ebook, a video course, or reselling dresses. Apple, John Lewis
and L’Oréal are primarily product-based businesses. They can be easier to set up, because you don’t need
to create a complex service for your users. It is also potentially easier to differentiate yourself from
competitors, especially if you are the only business that sells your particular product. However, recurring
revenue is less likely with a product-based business, and you will need to continually create new
products to bring in new income.
Both types of business can be successful, but it is worth being clear what type your idea is. Take a few
minutes to divide the ideas you wrote down into product and service businesses, and think about the
potential for recurring revenue, or how you will grow the business by creating new products.

Some example ideas
If you’re still short of ideas, remember that your first business is unlikely to be your most successful. In
the early stages, the important thing is to try something. You will make mistakes, and there is only so much
you can learn from books, so it’s best to get out there and start making those mistakes now. Even if your
business is not successful, you will have learned a huge amount, about coding, marketing and how to make
something people love.
So here are a few simple ideas for your very first business that almost anyone can try. Each of them
will require you to test the market, create a product or service, and then actively promote it – the three
core skills of starting any business.
An ebook
I’m not suggesting you should write a great novel, but creating an ebook is much the same process as
starting a business. Choosing a subject, you should look at something that you could write confidently and
competently about, and ideally take a unique angle on. It doesn’t have to be a masterpiece, but should
provide useful information that people are actively looking for. You can publish an ebook for free on
Amazon.
A video course
Various websites now allow you to upload and sell video courses, including udemy.com, stackskills.com
and videodirect.amazon.com. As with ebooks, choose a topic that there is a market for, and that you
could teach well.
A Wordpress plugin or theme
We have already seen that Wordpress powers 25 per cent of the web. Therefore there is a huge potential
market for addons and extras. There are also well-established platforms for providing your products
directly to Wordpress users. Themes are available at wordpress.org/themes/, and if you have a good eye
you could easily create a popular theme. While all the themes on that page are free, you could charge for
extra features, or sell your themes directly on sites like themeforest.com.
Wordpress plugins (wordpress.org/plugins/) add extra functionality to Wordpress, and you can find
plugins that do almost anything, from speeding up your website to creating a new social network. As with
themes, create a plugin that offers a new feature, or has better integration or a smoother user interface than
the existing options.

Your unique selling point
It is important to establish your unique selling point, or USP, for your business idea. This is the one
reason that people should choose your product or service rather than anyone else’s. It might be because
the product itself is higher quality, or faster, or better looking. Or your service might have some unique
features that aren’t available anywhere else. Or it might be something tangential to the main business, such
as customer service.
For each of the business ideas you’ve written down so far, write down what the USP would be. If you
can’t think of one, it’s likely that that idea will not go far.

When should you start your business?
At the beginning of my business career I used what I call the scatter-gun approach. I would have what I
thought was a fantastic idea (or at least convince myself that I could build a better website, or a better
business, than an existing company). I would say ‘If only my business could be 1% the size of [insert big
company here], I’d be sorted.’ I would then run off and build the website, only to find out that getting
customers was harder than I thought, or the service wasn’t as popular as I’d hoped. I would then get
another fantastic idea and move on to that one.
The downside of this approach is that you will inevitably spend a lot of time on businesses that end up
unsuccessful. Having said that, I learned a lot (and made a lot of mistakes) with those businesses, and
when eventually I hit upon an idea that was successful, I was able to apply the lessons I’d learned and not
make those mistakes again.
In short, there is nothing wrong with just going on there and creating the website or product that you are
thinking about, and seeing what happens. However, there is a smarter way that will help you establish
whether your idea is a good one before going to the trouble of actually building it.

Validating your idea
How do you know if your idea is a good one? This is often a very difficult question to answer but there
are a few general techniques you can use.
Firstly, don’t listen to your friends and family, unless they have particular skills or experience in your
niche. Friends and family generally want you to be happy, and will be keen to encourage you on your new
mission, and as a result are not a reliable guide as to whether the idea is a good one or not. Discuss it
with them by all means, but ‘all my friends said it is a great idea’ is not a good enough reason to start.
A good place to begin is to look for potential competitors. Go to Google and enter the keywords that
you would expect your future customers to enter if they were looking for your product or service. In our
examples above, ‘find a yoga instructor’ or ‘invoicing for plumbers’ would be a good start. See what is
available already, and take some time to analyse how good these products or services are.
Don’t be disheartened if the brilliant idea you had already exists. That just means there is a market for
it. It’s very unlikely that you’ll come up with a completely new idea – the real challenge is to execute your
idea better than anyone else. When you analyse the existing businesses, try and get clear in your mind
what you could do better. What is the crux of your idea that makes it better than the competition? Perhaps
they have poor websites, or bad customer service, or odd pricing.
At the same time, what can you learn from your competitors? What are they doing well that you could
incorporate into your business? Don’t be afraid to steal great ideas!
What if you don’t find any competitors? It could of course mean that you have come up with a genuinely
new idea, but not necessarily. It may well mean that there simply isn’t a market for your idea, or that
people have tried and failed (or that you are searching with the wrong keywords).
Once you have done your competitor research, you should have a fairly clear idea of what makes your
business unique, and better than the competition. So now it’s time to build it, right? Not yet. First you need
to reach some potential customers and talk to them about whether they would want your product or
service.
At this point, you can hopefully see another benefit of having a blog, or some sort of online following.
If these people were your target market, you could contact them individually or collectively to get their
feedback.
If you don’t have easy access to potential customers or users, the process will be a little harder, but not
impossible. If you are targeting a specific niche, find out where these people are (both in real life and
virtually). Find a few in your local area and offer to buy them a coffee or lunch in exchange for feedback
on your idea. If there are forums or Facebook groups dedicated to people in your niche, post there.
Face-to-face feedback is particularly valuable, as internet comments can tend towards the flippant and
critical. When you are speaking to clients, if at all possible try to get a firm commitment. If you ask
‘would you use this’, they will almost certainly say yes, for the same reason friends and family want to
support you. Asking ‘how much would you pay for this’ is often more revealing. You could even ask them
for a payment then and there (refundable if they are not happy with the product), to establish just how keen
they are.
What if you don’t have a specific niche, or you have no way of getting in touch with potential

customers? One great solution is to create a simple ‘Coming Soon’ website, and ask people to sign up to
your newsletter if they are interested. Include the key features of the product and a rough date when you
plan to launch, and perhaps some screenshots if you have any. You could do this with a Wordpress theme,
using a service such as mailchimp.com to manage the email sign-ups.
Once you have built your site, tell your friends and family about it and ask them to share it. You could
even run a small ad campaign to drive traffic to the site – spending £100 on Google or Facebook ads
could be money well spent if it saves you hours building a website no-one wants.
The crucial thing at each stage is to evaluate your idea objectively. Don’t be put off if one person tells
you it will never work, but at the same time it’s likely not wise to ‘keep the faith’ in the face of
overwhelming evidence that there is not a market for your product, or that market is currently served very
well by existing businesses.

Creating a minimum viable product
All right, so you are convinced that there is a target market for your product or service, and that you are
able to create something better than anything that currently exists? Great. It’s time to get to work!
The phrase ‘minimum viable product’ (MVP) neatly expresses the idea that you should build the
smallest thing that you can that will satisfy your customers. It is tempting for budding entrepreneurs to feel
that their website or app has to do everything – it has to have more features, be better looking, and be
easier to use than anything else available. Sometimes this is true, but in most cases it’s more important to
do one thing extremely well, than it is to do everything your customers need.
Google is a classic example. Their homepage had (and, largely, still has) a simple search box and two
buttons. The one thing they did really well was help people find the information they were looking for.
Not all businesses can be quite that minimal, but when designing your product you should try to establish
what the one thing is that your business does better than anyone else, and focus on that.
The big advantage of the MVP approach is that you can get something in the hands of your users as
early as possible. As they say in Silicon Valley, if you are not embarrassed about your product at launch,
you launched too late. This is not to say that you should release a half-baked product, but you should focus
on releasing as early as possible, rather than adding extra features. That way, you can get feedback from
real users from the beginning, meaning that you’ll be adding features that they actually want, rather than
ones you think they want.

How much to charge?
Pricing is often a very difficult subject for entrepreneurs, and of course the best thing to do varies
dramatically depending on what you are providing, and to whom.
The best piece of advice I’ve ever heard on how much to charge is don’t compete on price. This
doesn’t mean that you shouldn’t make your pricing competitive, but if your USP is ‘we are cheaper’, that
will likely not be enough in itself to make your business take off.
The simplest way to choose your pricing is to charge a similar amount to your competitors. Charging
less will not necessarily help you grow as much as you might think. Firstly, if people think of your
business as the cheaper option, it might be difficult to convince them that you are also better. Secondly, if
you charge less you will inevitably attract the sort of customer that is relatively price-sensitive. They will
then be more likely to leave if a cheaper (or even free) service becomes available. Ideally, you want
people to use your business because you offer something better than they can get elsewhere – that way you
will build a loyal base of users who love your product.

Do things that don’t scale
In today’s relatively mature business environment, it can be difficult to see how you can compete with big
businesses, who can devote much more time and money to creating a great product. The first answer to
this is to focus on a niche that is too small for big businesses to be interested in. The second is to ‘do
things that don’t scale’; that is, spend time making your customers happy in a way that would be
impossible in a large business.
In my company Eco Web Hosting, the apparent USP was that the hosting was environmentally friendly.
But when I asked people what they liked most about the company, what they usually said was the service.
Because I ran the company myself and provided all the support, they were always dealing with the person
who knew exactly how the website worked, who was the one who would fix all the problems, and who
could make decisions about special discounts or extra services. This is something that big hosting
companies with their first-line, second-line and third-line support departments, couldn’t match.


Start-up story
In the summer of 2008, Joe Gebbia and Brian Chesky, couldn’t pay their high San Francisco rent.
They decided to rent out three air mattresses on their floor and serve breakfast. Three people
showed up, paying $80 each. They thought this might be a big idea, so they built a website allowing
people to share their spare rooms. The company got two bookings after their initial ‘big launch’,
and made around $800 per month for several months.
The founders realized that most people judged the properties on the photos, and most of the
photos on the website were not great. So they bought a fancy camera, and visited individual houses
that were listed on the site, offering to take photos for them for free. This took a lot of time and
effort, but slowly they started to grow, eventually becoming the multibillion dollar company that
Airbnb is today.
Taking photos of their users’ rooms is obviously something that they wouldn’t be able to do at
scale, but in the short term it made all the difference. Is there something you could do to make your
business or service stand out, even if it wouldn’t scale?

Summary
I hope by now that you’ve identified the best idea from the list that you wrote at the beginning of this
chapter, and that you are looking forward to testing it out and creating your MVP. Starting a business is
one of the most exciting things you can do, and will teach you a huge amount about the world, and
yourself.
We are now going to move on to see how you might proceed if you wanted to pursue coding further and
actually become a web or app developer. Even if you’re not planning on a career change, I would
recommend reading this final chapter, as we will also cover how to earn a side income from coding by
freelancing. This is something anyone can do, regardless of your current role and, like starting a company,
is a great way to improve both your coding and business skills.

13
Pursuing coding further to become a developer
Having considered how you can use your newfound coding skills to advance your career, and start your
own business, we will now look at becoming a professional developer. Full-time coders are highly
sought-after, well remunerated and have the flexibility of working in a range of industries solving a
variety of problems. It is also a career that you can ‘dip your toe into’ by freelancing or completing small
projects at the same time as your main career.
We’ll start by establishing whether a career in coding is right for you, and then go on to see how you
can get into the sector. We’ll look at what languages and platforms to learn, how to build a portfolio and
what you should have on your CV. Finally we’ll look at applying for both freelance and full-time jobs.
A summary of this chapter would simply be to get experience of as much as you can. Apply for some
freelance jobs, learn a range of languages, and practise by building real apps and websites. Not only will
you learn fastest this way, but you’ll build a portfolio quickly, and find out which aspects of the work you
enjoy, and which you don’t.

Should you become a full-time coder?
As I’ve mentioned, becoming a developer is for many a great career choice. Coders are well paid, often
have a fair amount of freedom within their role, and spend their days solving problems. If that sounds like
something you would enjoy, read on!
Of course, as with any career, coding has its downsides. You’ll start at the bottom, and while your
income will by no means be meagre, it will take a few years before you can command the top salaries.
The work can also be stressful, as managers might not have a strong grasp of the difficulties of the
problems they are asking you to solve. Deadlines can be tight, and hours long, depending on the company
you work for.
Broadly speaking, there are two main career paths for a coder. You could simply get better and better at
your craft, working at a higher level solving more difficult problems. If, while reading this book, you have
found yourself researching some of the finer points of the languages we have covered, and trying to
establish how they work, this will likely be a great route for you. The best coders can earn great salaries,
and will often be headhunted to join new startups, with potentially lucrative stock options.
The other option is to take the more management-focused route. After several years coding, you might
find that your time is better spent training or managing others, and gradually you will do less programming
and more working with people. This path is perhaps better suited to those who enjoy coding, but also
appreciate working with people and having more control over the direction of a project.
Of course, only you can decide if a career as a developer is for you, but fortunately it is very easy to try
out coding as a career by doing small projects and freelance work. Before we see how to get freelance
gigs, let’s take a moment to think about what languages and platforms you should focus on.

What languages should you learn?
If you have gone through all the exercises in this book, you will already be familiar with a range of
languages. For front-end web development (that is, code to create and manipulate web pages), we have
learned HTML, CSS and JavaScript. We learned Python for back-end, or server-side, development. For
apps, we covered Swift for iOS apps, and Java for Android. We even looked briefly at AppleScript and
Powershell for automation. That’s not a bad selection!
My hope from having covered all of these is that you should have some idea of which type of
development you prefer. You might want to be a jack-of-all-trades, and build both apps and websites, in
which case you should simply learn what you need to build your next project.

Web development
If you want to focus on web development, which is probably the most broad area in terms of sheer
numbers of jobs and projects available, there are a couple more languages I would recommend
investigating. The first is PHP, which is the most widely used server-side language (80 per cent of
websites use PHP at the time of writing). It is what Wordpress is written in, and is an extremely quick
way to build a simple site.
The second is MySQL, which is a database language. We haven’t discussed databases yet in this book,
but they are a critical component of most websites and apps, and they are used to store data, such as
usernames, passwords and user content. The most typical simple website would use HTML, CSS and
JavaScript on the front-end, and PHP and MySQL on the back-end. As a result, a rudimentary knowledge
of PHP and MySQL is a necessity for any web developer.
There are of course a whole range of further languages and frameworks you can learn for web
development. jQuery is a commonly used JavaScript library that makes working with JavaScript a lot
easier. If you enjoyed the Python section, you should look at Django, a popular framework for building
websites with Python. Ruby is another server-side language that is increasing in popularity.
Beyond these basics, my advice would very much be to learn languages and platforms as needed –
build websites for yourself and others, and as you develop the need for a new feature or structure, search
the web and see what you find. Let the tools fit the project, not the other way around.

App development
If you want to build apps, your choices are a little more restricted, and although there are other options
available, unless you have strong reason to do so I would advise sticking with the languages and IDEs
(Integrated Development Environments) covered in this book. That is Swift and Xcode for iOS
development, and Java and Android Studio for Android.
These are the most straightforward, and most documented, ways to build apps for iOS and Android, so
becoming an expert in those languages and IDEs would be strongly advised if you want to build apps.
If you’re not sure which direction you would like to go in, just keep an open mind and keep building
things. It is likely that you will develop a preference for, or get offered a job in, one particular platform
and set of languages, but if that hasn’t happened yet don’t worry about it – just keep on learning.

Getting freelance jobs
One of the great advantages of coding as a career choice is that you can start to earn money from it straight
away as a freelancer. Even if you have relatively little coding experience, you should be able to find jobs
that suit your level. Of course, never claim to be able to complete a job that you won’t be able to, but at
the same time don’t underestimate yourself. Be confident when looking for freelance work, and commit to
doing a great job for your client.
When you are just setting out on a freelance career, there is one important thing to remember: in the
early days, you are not primarily there to earn money. This may sound strange, but it’s true: your primary
goals should be to learn your craft and build a portfolio. Those two things are far more valuable than
whatever you might earn from a freelance gig, so think of any money you earn as a bonus.
Think of getting freelance work as a free Coding MBA. Instead of paying tens of thousands of pounds
for lectures on business techniques and writing essays, you are learning a craft and getting practical
business experience for free. Any money you receive in the early months is icing on the cake.
This is important to remember because without a substantial portfolio and significant experience you
will likely not be able to charge a great deal for your work. So be prepared to put the hours in now,
knowing that the big rewards will come later.
With any work you do, make sure to get a review from the client, ideally on a central platform such as
LinkedIn.com, as references are extremely useful for getting both freelance and full-time work later on. A
lesser-known but very powerful place to put reviews is Google Maps – if you set up your business as a
local one (using your home address is fine, but you could also use the address of a local shared working
space if you ask their permission), you can ask your clients to post reviews there.
Not many developers do this, so when people do local searches for web and app developers, it is
likely with just a small number of five-star reviews you could be the top result.
There are two primary ways to get freelance work – locally, or in-person, and using freelance
websites.

Getting local freelance jobs
The obvious place to begin looking for local work is with your current social circle. Think about
colleagues, friends and family – do any of them have a website that needs updating, or an app idea they
would like to build? At this point you may offer to work for free, or in exchange for co-ownership of the
website or app, but don’t be afraid of charging a fair price if you do a job for a profit-making business.
Another good place to find work is in local meet-ups – go to meetup.com and see what is available in
your local area. Most towns and cities have a number of weekly networking events – if yours doesn’t
perhaps you could set one up. When you go along, be friendly and helpful (and don’t be afraid to
introduce yourself as a developer!). It is likely some work will come your way, for which you should
certainly charge. Do a great job for a good price and don’t be surprised when others start seeking you out.

Getting freelance work online
Local freelance jobs are a great place to start, but the market can be limited and highly competitive.
Fortunately, there are a number of websites such as upwork.com or freelancer.com where you can bid for
freelance jobs all round the world.
The competition is strong, and it may take a few attempts before you get your first paid gig, but
remember that you have a few crucial advantages over the more experienced developers on those sites:
You’re primarily there to learn. Your first job may take you three hours and earn you $10, but that’s
fine because you will have learned a great deal about communicating with clients, fixing website code
and bidding for a project. Not only that, but you will have earned your first five-star review (a proud
moment, I can tell you!)
You can take your time. Most developers on those sites post generic bids on a large number of
projects. You’re still learning, so you can take your time and post a thoughtful, relevant bid that shows
that you’ve actually read the details of the post. Believe me, bids like that are few and far between.
You can use geography to your advantage. If you live in the United States or Europe, make the most of
this by offering to speak to the client on the phone, and using polished English when bidding and
replying to messages. By doing this, you’ll stand out from the competition.
You can go the extra mile. As you’re there to learn, you can do more than what the client asked for
without worrying about the extra time spent. If you’re setting up Wordpress, install a caching plugin for
them to speed up their site. If you’re making a webform, use some custom CSS to make it beautiful.
Reply quickly and thoroughly to all their questions, and earn their gratitude.
I’ll say it again – you will earn money here, but that is your secondary goal. Primarily, you’re here to
learn how to do freelance web development, and build up your online portfolio and positive reviews.

Pick a freelance site, and stick with it
The hardest part of getting your first gig will be overcoming your lack of positive reviews. For that
reason, I’d advise picking one freelance site and sticking with it, at least for now. You can join another
later, but once you’ve got three five-star reviews on freelancer.com, you’ll find it much easier to find
work there than you will with an empty profile on elance.com.
We won’t go into the strengths and weaknesses of each freelance site, as these can change dramatically
over time. I’d simply advise that you check out a few of them and pick whichever site you like the look of.
Check that you can receive funds in your country and that you are happy with their payment terms, and sign
up – don’t waste a lot of time going through all the sites. I’ve had the most experience with
freelancer.com, so I’m going to focus on that site, but the others all work in a similar way.
Here’s my list of sites you should check out:
upwork.com
freelancer.com
peopleperhour.com
guru.com
craigslist.com
A 
really 
useful 
comparison 
of 
these 
and 
other 
sites 
is 
available 
online 
at
www.freshbooks.com/blog/2013/01/16/freelance-jobs. It’s focused on writing rather than web
development but the same principles apply.

Creating your profile
Once you’ve picked which site you want to work with, you need to sign up and create your profile. When
you create your profile, use the following tips:
Use your real identity. You’ll want all the parts of your online presence to tie together, so use your
real name, upload a photo and talk about yourself.
Be honest. Don’t claim to have skills you don’t have. At this stage ‘Proficient in HTML, CSS and
JavaScript’ would suffice, and you can then add further skills as needed.
Link to your Twitter feed. If the freelance site allows, put in a link to your Twitter feed – this will add
authority to your profile and reassure prospective clients that you are a genuine developer. If you don’t
have a Twitter account, set one up – in the early days it will increase clients’ confidence in you, and as
your community and following grow it can be a source of work in itself.
Complete the exams. Most freelance sites have ‘exams’ that you can take both in language (English
being the most useful) and various coding languages. They usually cost around $50, but are worth it to
get you off the ground when you don’t have any reviews.

Bidding for gigs
Initially, look for small, relatively straightforward gigs, with a maximum of $50. Updating websites,
fixing broken layouts and adding small features are all common requests. Bid on as many projects as you
can, bearing the following in mind:
Keep your bid low. Remember you’re here to learn and build your reputation. Keep your bid low,
especially when you have zero reviews. This will get you gigs more quickly and you can increase your
price as you go.
Explain why your bid is low. You don’t need to tell the client that you are learning, but you might want
to say that you are bidding low in order to get your first reviews on this site. They will see that you
have no reviews, and referring to it yourself will show that you understand their concern and have
made a low bid as a result.
Don’t take on big jobs. You’re still learning, so avoid big or technically advanced jobs. Feel free to
take on jobs slightly above your current skill level, as long as you’re confident you can learn what will
be required, but the last thing you want is a bad review and a disgruntled client.
Clarify the job. It’s essential that you’re clear on what is required, and that it has been objectively
stated on the freelance site messaging system. That way, if there is any disagreement, you can refer
back to what the job was originally set out to be. Ambiguous language or general aims (such as ‘build
me a site’) are a recipe for disaster.
Agree on payment structure. Even with small projects, it’s important to make it clear when payment
will be due. I would advise not to start work until a milestone is created (ie the buyer has made a
downpayment, which is held by the freelancer site until the job is finished). That way, if there are any
disagreements, it is up to the freelancer site to establish whether the work has been done and release
the payment.
Be wary of buyers with no reviews. Buyers have reviews too, and if a buyer has no reviews, be
careful. They may well be reliable, but they may not be – in this case it is particularly important to
make sure the requirements of the job are clear, and that a milestone is paid before you start work.
Why not get started now? Take a couple of hours and create a profile on the freelance site of your choice.
Start bidding on simple projects, making sure to keep your price low and your communication fast and
clear. I wouldn’t be surprised if you had your first gig by the end of the day. Good luck!

Building a portfolio
As a developer, your portfolio website will likely be more important than your CV. Your site should make
clear what your strengths are as a developer, and showcase some of your best work. It should make
potential clients and employers excited to work with you.
Your website should reflect your style and personality, so if possible create it from scratch. If you
prefer, however, there are a range of Wordpress themes that you can use to create a great-looking
portfolio quickly. It is important that your portfolio site looks good, so I would advise spending $50 or so
on a theme from templatemonster.com or themeforest.com. They both have Wordpress portfolio sections at
https://themeforest.net/category/wordpress/creative/portfolio and www.templatemonster.com/ portfolio-
wordpress-themes.
Take some time to browse some of the best developers’ portfolio sites, and include their best features.
Project Stories are particularly useful to potential clients and employers. In a Project Story you explain
the clients’ needs, how you met them, and what technologies you used to achieve their goals. Combined
with a screenshot or a link to the project itself, and a testimonial from the client, this can be a very
powerful way to show your level of experience and competence, as well as your ability to explain your
work clearly.
Take time over your portfolio site, and make sure there is room to expand it as you learn new skills and
complete new projects. It will hopefully be your standard bearer for many years to come, so it’s worth
getting it right.

Expanding your online presence
It is very likely that potential employers will search your name on Google, so it is important that your
online presence is cohesive and impressive. We have talked at length about having a blog, and also
tending to your Twitter feed and portfolio. But there are other things you can do to boost your online
image.

Keep your LinkedIn profile up to date
LinkedIn.com is by far the biggest professional social network. You should have a LinkedIn page, and it
should reflect the jobs you are applying for. Soall the above advice applies: express your experience and
roles concisely and keep everything up to date. Include links to the projects you have worked on and
testimonials.

Have a Github page
Github is a very popular site for storing code, usually for open source applications. If you build tools,
such as a JavaScript image slider, or simple apps such as an iPhone calculator, put them on your Github
page. Not only will it help other people but it will give you another place to show your talents and
experience.
You might also want to consider contributing to open source projects. Anyone can do this, and it is a
great way to give back to the community that likely produced a lot of the free tools you have used so far to
build websites and apps. However, you need to be sure that you know what you are doing if you
contribute to projects – contributing poorly written or buggy code will not make you any friends within
the community.

Writing a software developer CV
The process of writing a CV for a software developer is much the same as for other industries: keep it
concise, honest, relevant and don’t belittle your achievements. If you are looking at a career change into
coding, you might be wondering how much of your previous work to include, and how to ‘talk up’ your
relative lack of development experience.
My advice would be to include each of your roles (ideally leave no gaps in your timeline), but don’t go
into detail of what the work involved. If you want to get work as a developer, you should focus on what
you have done to develop your new skills, and the portfolio of work you have developed. As with your
portfolio, clarify what particular languages and environments you are familiar with, as evidenced by the
projects you have worked on.
It is likely that some people that read your CV will not be technical, and will instead be looking for
keywords such as JavaScript or PHP, so make sure you include all relevant skill areas explicitly. The
word ‘relevant’ there is important – be aware of the job you are applying for and tailor your list of skills
accordingly. A complete laundry list of every language you’ve ever worked with is not required!
A great technique here is to state what you like and dislike about the tools you have used – this shows
that you understand them well enough to be familiar with their foibles. You can do this in a ‘summary’
section, which also includes a statement about your overall level of experience, and also some of the
personal projects you have worked on. This will show that you have a genuine interest in programming,
and also give you something interesting to talk about in the interview.
As always, be honest – don’t claim to have years of coding experience if you don’t, but do make clear
that you are a fast learner and you have achieved a lot in the short time you have been coding. If you are
applying for appropriate jobs (ie entry-level coding positions), your employer won’t expect a huge
amount of experience or a degree in computer science, but they will want to see that you have the basic
technical skills they are looking for, and that you are genuinely interested in what you do.

The interview
As with CVs, all the standard interview advice applies here: be personable and interested in your
interviewers, and have a strong knowledge of the company and the role you are applying for. As well as
this, read your CV thoroughly and write down at least 20 questions that you might be asked about what
you’ve written (if you can’t think of 20, ask a friend or family member). Write down great answers to
these questions, and read them out loud several times. This will help you give confident, fluent answers to
questions that are bound to come your way.
Your interviewers will likely be a technical manager (your future boss), fellow coders (your future
colleagues) and possibly a non-technical HR representative. Imagine the interview from their perspective
– they would likely rather be doing something else, so try to be upbeat and enthusiastic, and talk
confidently about the interesting side projects you mentioned on your CV.
Keeping up to date with industry news is also a great way to show that you are genuinely interested in
programming, and gives you something of substance to talk about instead of small talk.

Summary
The process described in this chapter – that of building a portfolio, working on freelance jobs, writing
your CV and attending interviews, to finally landing a programming job is not a quick one. I would allow
at least a year. But remember you’ll learn a huge amount along the way, and gain technical and personal
skills that will be useful regardless of whether you become a full-time developer or not.

Conclusion
If you’ve made it to the end of this book, congratulations! You’ve learned at least six programming
languages, and considered a wide range of ways you can use your skills in your current role, and to
develop your employability and create a side income.
More importantly, I hope you now feel comfortable with the technology you use every day: with an
understanding of how the apps and websites you use function, you will be able to use them in more
advanced ways to work more effectively and even start creating your own.
So, what now? In the latter chapters of this book I outlined several opportunities that learning to code
brings you. I hope that you have already starting taking on some of those opportunities, but just in case, I
would like to recap some of the primary next steps. You should aim to choose between two and five of
these to ensure that your development continues, and you get the most out of reading this book.

Work better
Write down a list of ways that you could work more efficiently or effectively using some of the
technologies we have covered. Think about repetitive tasks that you do regularly that could be automated,
reports that you could produce more regularly or even in real time, or ways of speeding up research tasks.
Consider using services like If This Then That, text expansion and AppleScript or PowerShell to speed
up your workflow.
Alternatively, consider how your office or work environment could be made better for you and your
colleagues. Perhaps an automatic email requesting feedback on recent changes, or just asking how happy
staff are in their roles. Could technology make communication more effective in your company or
department, or is there an app or website you could create to serve your customers better?
Using your coding skills to work better is a great way to provide more value for your employer and
your customers, which will inevitably benefit you as your colleagues notice what you have achieved.

Build a website or app
Creating small tools to work better is a great start to profit from your newfound skills, but if you are
looking for a bigger project, create a complete website or app. The website might be a blog which as we
have seen builds up your online presence, generates a community and challenges you to write regularly.
Alternatively, you might see a need for a particular community that you are part of to have an online
space, or have an idea for a tool or service that would help you in your job or hobby that others might be
interested in. Whatever it is, build it and see what happens - you never know what can come from creating
something new.

Become an entrepreneur
Coding skills are unrivalled in their capacity to allow you to start your own business, whatever your idea.
Reread chapter 12 if this is something you’re interested in, as it guides you through coming up with an
idea, finding out whether it is something people want and building it.
Remember, you don’t need to feel you are building the next Facebook – just find a niche where you can
provide a simple product or service that is better than what is currently available. The long term plan can
come later. Building a business online is the best way I know to teach yourself entrepreneurship, and in
the process find out more about yourself, and of course upgrade your coding skills.

Become a developer
If you are considering a full career change, go back to Chapter 13 to find out if being a full-time
developer is for you. Remember you can dip your toe in the water by finding freelance work, especially
by attending networking events in your local area and finding people who need apps or websites built.
At the same time, building a portfolio site and enhancing your online presence will be useful regardless
of whether or not you become a full-time developer.

Learn more
For most people, the best way to learn to code, once you have covered the basics, is to build things, and
figure out what you need as you go along. However, if you prefer a more structured approach there are a
range of online courses which range from free to a few hundred dollars, covering pretty much any aspect
of coding.
Courses I recommend can be found at the end of the web, iOS and Android development chapters. For
more general courses, or courses on different topics, you can try the following:
udemy.com – a huge range of courses on all topics, rated, and often heavily discounted.
codecademy.com – interactive coding courses, many free, on web development and related topics.
codeschool.com – 65 high quality video courses for $29 per month.
You could also search for coding bootcamps in your local area if you would rather have in-person
training, although these tend to be rather more expensive.
Whatever you do, I hope this book has inspired you to take full advantage of your newfound technical
skills. Coding experience remains rare and highly sought-after in all professions, and gives the freedom of
building your own digital products, creating new income streams and perhaps even starting your own
business.
Learning to code changed my life in ways I never anticipated, and I have no doubt it will do the same
for you too.

INDEX
accounting blog 218
Airbnb 236
Amazon, publishing and selling on 231
Android 16, 19
Android apps see app building (for Android) Android Developer Course 3
Android Studio 177–79, 239
Apache 84
app, definition 18, 157–58
app building
building your own 9
creating an app for your business 214–15
development languages 19, 238, 239–40
opportunities for 250
solving a problem for yourself and colleagues 214–15
text expansion apps 220–21
app building (for Android) 177–95, 239
accessing the entered text 190–92
adding text and buttons 180–82
allowing the user to enter some text 187–89
debugging Java in Android Studio 208
downloading and setting up Android Studio 177–79
further learning 3, 195
making a toast 185–92
making the app interactive 182–85
online course 3
project: cat years app 192–95
running your first Android app 179
writing Java code 182–87
writing the code for a button 184–85
app building (for iPhone or iPad) 157–75, 239
adding a text field 162–63 adding buttons 163
adding labels 160–62
app setup process 158–59
customizing labels 161–62
debugging Swift in Xcode 206–07
downloading Xcode 158
getting started 158–60
interacting with the user interface (UI) 164–66

making buttons interactive 166–69
online learning resources 3, 174–75
project: currency converter app 170–74
requirements for 157, 158
running some code 163–64
Swift code 163–66
user interface elements 160–63
variable types in Swift 169–70
Xcode interface 159–60
AppleScript 223–25
applets 219–20
Arduino 110
arrays see Lists
automating tasks 219–20
on MacOS 223–25
on Windows 225–26
backend languages 20 see also server-side languages
background colours (CSS) 60–61
banking, relevance of coding skills 13
Beautiful Soup 221–23
Berners-Lee, Tim 23
blogging
affiliate links 217
blogging platforms 218–19
book publishing as a result of 217
building a following 216
choosing a topic 216–17
how to start a blog 218–19
monetizing a blog 216, 217
opportunities from 144, 145
owning a domain name 215
public speaking and 217, 218
starting a blog 215
success stories 217–18
see also Wordpress
book publishing, as a result of blogging 217
Boole, George 114
Boolean variables 114–15
Bootstrap web framework 153–54
borders (CSS) 68–71
Brackets text editor 24–30
Brown, Hero 218

browsers 18, 144–45
bugs see debugging
business
importance of web presence 143–44
starting your own see entrepreneurship
business-focused app 214–15
C# language 19
C++ language 19
Calacanis, Jason 14
career advancement
and coding skills 1–2
automating tasks 219–20
automation on MacOS 223–25
automation on Windows 225–26
benefits of learning to code 10
blogging 215–19
creating an app for your business 214–15
demand for coding skills 1, 10, 14, 213
future-proofing your career 8, 213
text expansion 220–21
using coding skills 213–26
web scraping using Python 221–23
Cascading Style Sheets see CSS
cat years app for Android 192–95
checkboxes (HTML) 36–38
Chesky, Brian 236
children, teaching to code 8
Chrome Developer Tools 204–06
Chromebooks 145
classroom blog 218
client-side code 18
client-side languages 20, 84
coding
what it is 15–16
behind user-friendly software 16
practice examples in Python 16–18
coding skills
and career advancement 1–2
becoming more efficient 7–8
benefits and opportunities 7–14
building a web presence 9–10
building your own website or app 9

combining with your expertise 11
communicating with technical people 8
demand for 1, 10, 14, 213
in banking 13
in creative industries 13
in sales and marketing 12
in the legal profession 12
in the retail sector 14
in the service sector 14
in trade industries 13
knowing what it takes to write code 9
learning more 3, 251
opportunities arising from 249–51
relevance in specific industries 12–14
satisfaction and enjoyment from using 11–12
understanding how software works 8
value of 14
why learning to code is important 7–14
colour codes (CSS) 61
commands (words) of computer languages 15–16
The Complete Android Developer Course 3
The Complete iOS Developer Course 3
The Complete Web Developer Course 3
computer languages
development of 15–16
see also programming languages
console 113
content management systems (CMS) 148–50, 151
creative industries, relevance of coding skills 13
CSS (Cascading Style Sheets) 20, 53–81, 84
background colours 60–61
borders 68–71
changing sizes 61–62
class attributes of elements 57–58
colour codes 61
debugging 204–06
Divs 59–71
floats 62–64
fonts 71–74
hover over links 79–80
IDs 58–59
inline CSS 54–55
internal CSS 55–57

layout with floats 62–64
layout with positions 64–65
margins 65–67
open in a new tab 80
padding around content 67–68
positioning 64–65
project: clone a website 81
pseudo classes 79–80
reasons for learning 54
rounded corners for borders 70–71
styling links 79–80
text alignment 77–80
text styles 74–77
what it is 53
what it is used for 53–54
what it looks like 54–55
currency converter app (iPhone or iPad) 170–74
CV for a software developer 245–46
Daring Fireball blog 217
database language, MySQL 84, 239
debugging 197–209
asking for help 204
CSS 204–06
definition of a bug 197
Developer Tools 204–06
error messages 200–01
HTML 204–06
Java in Android Studio 208
JavaScript 206
making things work better 197–98
questions to ask when code doesn’t work 200–02
reasons for learning 197–98
searching for help 202–03
Swift in Xcode 206–07
time spent on 198
writing code that requires minimal debugging 198–204
writing good code 198–200
Xcode 206–07
developer see software developer
Developer Tools 204–06
Django 239
domain name, owning 145–46, 148, 215

drop-down menus (HTML) 38–39
ebooks, creation and publishing 231
Eco Web Hosting 2–3, 235
Eich, Brendan 83
else keyword 93–95
email 19
employment
aim to stop ‘selling your time’ 11
opportunities to ‘scale up’ what you do 11
see also software developer
entrepreneurship
aim to stop ‘selling your time’ 11
and coding 227–36
approach to starting businesses 232
creating a minimum viable product (MVP) 234
do things that don’t scale 235, 236
ebook creation and publishing 231
example business ideas 230–31
finding a niche 235
getting business ideas 228–29
how coding can help start a business 227–28
how much to charge 235
launching your product 234
opportunities from learning to code 250
opportunities to ‘scale up’ what you do 11
pricing your product 235
products vs services 230–31
starting your own business 10
startup story, Airbnb 236
startup story, Alice Hall 229
unique selling point (USP) for your business 231, 235
validating your idea 232–34
video course creation and sales 231
when to start your business 232
Wordpress plugin or theme creation 231, 234
Excel 13
expertise, combining with coding 11
Firefox browser 152
FireFTP 152
floats (CSS) 62–64
fonts (CSS) 71–74

web safe fonts 73–74
forms (HTML) 35–41
freelance career 2–3
bidding for gigs 243–44
building your portfolio 240, 244–45
client reviews 240
creating your online profile 242–43
expanding your online presence 245
getting freelance jobs 240–45
getting freelance work online 241–45
getting local freelance jobs 241
learning your craft 240
networking events 241
portfolio website 244–45
freelancer websites 241–45
front-end development 20 see also client-side development
FTP (File Transfer Protocol) 152
FTP programs 152
future-proofing your career 8, 213
Gebbia, Joe 236
Github 245
Google 234
Google Android Studio 177–79
Google Docs 83
Google effect 215
Google Gmail 145
Google Maps, reviews on 240
Google Play 178
Googling your own name 9–10
Graphical User Interfaces (GUIs) 16
Gruber, John 217–18
Hall, Alice 229
hover over links (CSS) 79–80
HTML (Hypertext Markup Language) 20, 23–52, 84
as a markup language 24
attributes 33–35
Brackets text editor 24–30
checkboxes 36–38
creating a webpage 28–30
creation and development 23
debugging 204–06

drop-down menus 38–39
formatting text 30–31
forms 35–41
further learning 52
how a basic HTML page works 24–30
HTML entities 47–48
iFrames 49–51
images 33–35
links 45–47
lists 31–33
media, including 49–51
project: creating a webpage 51
radio buttons 37–38
reasons for learning 24–30
software required 24–30
submit buttons 40–41
symbols 47–48
tables 41–45
tags 27–28
text areas in forms 39–40
text boxes 35–36
text editor software 24
videos, including 49–51
viewing the HTML of any website 32–33
what it is 23, 24
what it is used for 24
IDEs (Integrated Development Environments) 206, 239
if statements (JavaScript) 92–95
if statements (Python) 115, 124–29
If This Then That 7, 219–20
iFrames (HTML) 49–51
images (HTML) 33–35
internet, development of 23
Internet of Things 110
interviews for software developer jobs 246–47
iOS 16, 19
iOS app development see app building (for iPhone or iPad) iOS Developer Course 3
iPhone or iPad apps see app building (for iPhone or iPad) Java 19, 20, 178
debugging in Android Studio 208
uses for 177, 239
see also app building (for Android) JavaScript 20, 83–107
benefits of learning 84

changing styles with 89–90
debugging 206
development of 83–84
else keyword 93–95
for loops 100–01
further learning 106–07
getting some information from the user 90–92
IDs 87–89
if statements 92–95
inline JavaScript 86
internal JavaScript 86–89
jQuery 84, 239
loops 98–101
project: guessing game 102–06
random number generation 101–02
updating website content 95–98
what it is 83–84
what it is used for 83–84
what it looks like 84–86
while loops 98–100
writing good code 198–200
job applications, use of Google by employers 9–10
job development, benefits of learning to code 10
Jobs, Steve 3, 217
jQuery 84, 239
languages see programming languages
legal profession, relevance of coding skills 12
Lie, Håkon Wium 53
LinkedIn.com 240
keeping your profile up to date 245
links (HTML) 45–47
Linux platform 19
lists (HTML) 31–33
Lists (Python) 115–17, 119–22
Livescript 83
loops (JavaScript) 98–101
loops (Python) 118–24
MacOS 16, 19
automation 223–25
text expansion 220
Mahalo 14

Mailchimp 220
margins (CSS) 65–67
marketing and sales, relevance of coding skills 12
minimum viable product (MVP) 234
mobile platforms, development languages 19
Mocha 83
modules (Python) 130–31
Muddy stilettos blog 218
MySQL database language 84, 239
.NET platform 19
Netscape 83
networking events 241
Never Seconds blog 217
newsletters 220
Objective-C 19
open source projects, contributing to 245
operating systems, user-friendliness 16
opportunities from learning to code 249–51
padding around content (CSS) 67–68
Payne, Martha 217
Perl language 19, 20
PHP (Hypertext Preprocessor) server-side language 20, 84, 109, 239
Phrase Express 221
platforms, types of 19
Pocket 157
portfolio website 244–45
positioning (CSS) 64–65
Powershell 225–26
professional expertise, combining with coding 11
professional social network, LinkedIn.com 240, 245
programming languages
development of 15–16
types of software to create code for 18–19
what languages to learn 18–20, 238–40
why there are so many 18–20
see also specific languages
Project Stories on your portfolio site 244
public speaking, blogging and 217, 218
Python 19, 20, 84, 109–40
and Django 239
Boolean variables 114–15

console 113
extracting email addresses from a website 221–23
for loops 118–22
further learning 140
getting started (easy way) 111
getting started (hard way) 111–12
getting the contents of a web page 133–35
if statements 115, 124–29
Lists 115–17, 119–22
splitting strings into 131–33
modules 130–31
option to install on your computer 111–12
practice examples 16–18
project: extracting data from a website 135–40
Python interpreters 111, 133–35
reasons for learning 110
regular expressions 130–31
running a basic script 112–13
splitting strings into Lists 131–33
substrings 130
trinket.io 133–35
variables 113–15
web scraping 110, 133–40, 144, 221–23
what it is 110
what it is used for 109–10
while loops 122–24
radio buttons (HTML) 37–38
random number generation (JavaScript) 101–02
regular expressions (Python) 130–31
retail sector, relevance of coding skills 14
Ruby server-side language 91, 20, 239
sales and marketing, relevance of coding skills 12
server-side languages 19, 20, 84, 239
servers 144–45
writing code to run on 109
service sector, relevance of coding skills 14
shared hosting 147–48
Shopify 147
skills gap 213
social media
automating tasks 219–20

LinkedIn.com 240, 245
software
languages to use for different types 18–19
types of 18–19
understanding how it works 8
software developer
as a career 250
as a full-time job 237–47
career paths 238
contributing to open source projects 245
deciding if it is the career for you 237–38
deciding what languages to learn 238–40
expanding your online presence 245
freelance career 240–45
have a Github page 245
job interviews 246–47
keep your LinkedIn profile up to date 245
writing a software developer CV 245–46
Squarespace 147
Stack Overflow 202, 204
strings, splitting into Lists (Python) 131–33
submit buttons (HTML) 40–41
Swift 19, 20, 163–66, 239
debugging in Xcode 206–07
variable types 169–70
see also app building (for iPhone or iPad) symbols (HTML) 47–48
syntax (punctuation) of computer languages 15–16
tables (HTML) 41–45
technical confounders, demand for 10
technical people, communicating with 8
text alignment (CSS) 77–80
text boxes (HTML) 35–36
text editor software 24
Text Expander 221
text expansion 7
apps 220
on MacOS 220
on Windows 221
text styles (CSS) 74–77
text styles (JavaScript) 89–90
The Talk Show podcast 217
toast (Android) 185–92

trade industries, relevance of coding skills 13
transistors 15, 16
trinket.io (Python processor) 133–35
Twitter account 19, 243
unique selling point (USP) for your business 231, 235
user-friendly operating systems 16
users, getting information from (JavaScript) 90–92
Van Rossum, Guido 110
video courses, creation and sales 231
videos, including in your web pages 49–51
web crawling 221–23
Web Developer Course 3
web development languages 238–39
web frameworks 152–54
web hosting 146–48
web pages
getting the contents of (Python) 133–35
including videos and other media 49–51
web presence
building 9–10
Googling your own name 9–10
web scraping (Python) 110, 133–40, 144, 221–23
webapps 144–45
WebGL 84
website builders 146–47
website development 143–55
building your own website 9, 154
client-side code 18
content see HTML
content management systems (CMS) 148–50, 151
domain names 145–46, 148
editing the index.html file for your site 151–52
further learning 155
how websites work 144–45
importance of web presence for businesses 143–44
interactivity see JavaScript
online courses 155
opportunities for 250
project: build a website 154
reasons for building a website 143–44
self-coding your site 151–55

shared hosting 147–48
style and layout see CSS (Cascading Style Sheets) updating content (JavaScript) 95–98
using a web framework 152–54
using FTP to manage your website files 152
web hosting 146–48
website builders 146–47
Wordpress 148, 149–50, 151
websites, extracting data from see web scraping
Weebly 147
Weiner, Nate 157
Williams, John 214–15
Windows 16, 19
automation 225–26
development tools and languages 19
text expansion 221
Wix.com 147
Wordpress 148, 151, 218, 242
getting started 149–50
Wordpress plugins 150
creation 231, 234
Wordpress themes 150, 244
creation 231, 234
working better using coding skills 249
Xcode 239
debugging 206–07
see also app building (for iPhone or iPad) yoga blog 218
YouTube videos, including in your web pages 49–51

“If you want to teach yourself one of the most important skills of
the future, read this book.
It makes understanding coding easy and is a brilliant jumping-off point for anyone to build a more
exciting and sustainable career.”
Tricia Kelleher, Head of the Stephen Perse Foundation
Confident Coding is the book for you if you want to master the fundamentals of coding and kick-
start your career. Coding is one of the most in-demand skills on the job market, and grasping the
basics can advance your creative potential and make you stand out from the crowd.
Rob Percival gives you a step-by-step learning guide to HTML, CSS, JavaScript, Python, building
iPhone apps, building Android apps and debugging. After reading this book and honing your skills
with its online exercises, you will be able to code in each of these languages, build your own
website, build your own app and have the confidence to supercharge your employability.
If you want to impress employers, the ability to code can give you the edge over the competition and
prove that you’re ready to take on the challenges of the digital world.
If you are a self-employed entrepreneur, being able to create your own website or app can grant you
valuable freedom and revolutionize your business. Learning to code doesn’t have to be scary or
intimidating. Confident Coding shows you how to master the essentials and take your career to new
heights.
Rob Percival is a web developer and entrepreneur who has taught over 500,000 students how to
code through his online courses on Udemy. His courses have been translated into five languages and
have taught people all around the world to become proficient and confident web developers.
KoganPage

London

New York

New Delhi
www.koganpage.com

