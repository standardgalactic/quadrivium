
Getting Started with Nano
Server
5SBOTGPSNZPVS%BUBDFOUFSJOUPIFBEMFTTTFSWFSTXJUI
.JDSPTPGU`/BOP4FSWFS
Charbel Nemnom
BIRMINGHAM - MUMBAI

Getting Started with Nano Server
Copyright Â© 2017 Packt Publishing
All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or
transmitted in any form or by any means, without the prior written permission of the
publisher, except in the case of brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this book to ensure the accuracy of the
information presented. However, the information contained in this book is sold without
warranty, either express or implied. Neither the author, nor Packt Publishing, and its
dealers and distributors will be held liable for any damages caused or alleged to be caused
directly or indirectly by this book.
Packt Publishing has endeavored to provide trademark information about all of the
companies and products mentioned in this book by the appropriate use of capitals.
However, Packt Publishing cannot guarantee the accuracy of this information.
First published: June 2017
Production reference: 1280617
1VCMJTIFECZ1BDLU1VCMJTIJOH-UE
-JWFSZ1MBDF
-JWFSZ4USFFU
#JSNJOHIBN
#1#6,
ISBN 978-1-78217-522-3
XXXQBDLUQVCDPN

Credits
Author
Charbel Nemnom
Copy Editor
Safis Editing
Reviewers
Patrick Lownds
Aleksandar Nikolic
Project Coordinator
Shweta H Birwatkar
Commissioning Editor
Kunal Parikh
Proofreader
Safis Editing
Acquisition Editor
Rahul Nair
Indexer
Mariammal Chettiyar
Content Development Editor
Mamata Walkar
Graphics
Kirk D'Penha
Technical Editor
Varsha Shivhare
Production Coordinator
Nilesh Mohite
â€ƒ

About the Author
Charbel Nemnom is a Microsoft Most Valuable Professional (MVP) for Cloud and
datacenter management and technical evangelist with 5nine Software and Unidesk
Corporation. Charbel has extensive infrastructure expertise and a vast knowledge of a
variety of Microsoft technologies. He has over 15 years of professional experience in the IT
field and guides technical teams to optimize the performance of mission-critical enterprise
systems. He has worked as a system and network engineer, senior consultant, and regional
technical manager and has a history of successful enterprise projects in the IT, banks,
education, and publishing sectors. He works as a virtualization consultant and cloud
architect in the MENA region. He authored Getting Started with Nano Server, co-authored
Windows Server 2016 Hyper-V Cookbook Second Edition, and reviewed Hyper-V Best Practices
books (all by Packt Publishing).
Charbel also runs his blog at charbelnemnom.com where he blogs often about software -
defined Datacenter and Cloud computing.
Charbel is Microsoft, Cisco, and VMware certified and holds the following credentials:
VCA-DCV, MCP, MCSA, MCTS, MCITP, MCS, MCSE, CCNP, ITILÂ® and PMPÂ®. You can
also follow him on Twitter !$IBSCFM/FNOPN and like his Facebook page
!$IBSCFM/FNOPN.71.
Books donâ€™t write, edit, and publish themselves. I would like to say a big thank you to my
family and friends for their support and patience while I was busier than usual the last one
year and a half, and for always supporting the crazy things I want to do. They are the
reason that I can fulfill my dream and follow my passion.
Of course, the book wouldnâ€™t be possible at all without the Packt Publishing team for
supporting all the authors and reviewers during this project. I want to say a big thank you
to the Acquisition Editor Rahul Nair, Content Development Editor Mamata Walkar and
Mehvash Fatima, the Project Coordinator Shweta Birwatkar, and the Technical Editor
Varsha Shivhare.

A big thank you to the Technical Reviewers and fellow MVPs Patrick Lownds from United
Kingdom and Aleksandar Nikolic from Serbia, who offered great feedback, comments, and
support through the course of this project. I would also like to thank a dear friend, Marco
Brodkorb, from Germany. Thank you, guys!
Finally, I want to thank the Microsoft product group individually and give them the credit
they deserve for helping me make this book as good as possible (if Iâ€™ve missed anyone, Iâ€™m
truly sorry): Ben Armstrong, Sarah Cooley, Steven Ekren, Claus Joergensen, Cosmos
Darwin, Elden Christensen, Subhasish Bhattacharya, Andrew Mason, Anders Ravnholt,
Dan Harman, Refaat Issa, Venkat Yalla, Chris Van Wesep, Sarah Blodgett, Sue Hartford,
Samuel Li, Rajani Janaki Ram, Rochak Mittal, Aditi Gangwar, Neela Syam Kolli, Shon Shah,
Sneha Agrawal, Swapnil Sumbe, Manish Jha, Gautam Deora, Mahesh Narayanan, Krati
Jain, Ravi Chivukula, Nirbhay Singh, Ashish Mehndi, Nipun Arora, and Schumann Ge.

About the Reviewers
Patrick Lownds is a master-level solution architect at Hewlett Packard Enterprise's (HPE)
Pointnext, COE, in the Hybrid IT practice and is based in London, UK.
Patrick is also a current Microsoft Most Valuable Professional (MVP) for Cloud and
Datacenter Management (CDM) and has worked in the IT industry since 1988 on various
technologies, including Windows Server Hyper-V, System Center, Windows Azure Pack,
and Microsoft Azure. In his current role, he works mainly with the most recent versions of
Windows Server, System Center, Azure, and Azure Stack, and has participated in the
Windows Server 2016, System Center 2016, and Microsoft Azure stack's early adoption
program.
Patrick has previously contributed to Mastering Hyper-V Deployment, Microsoft Private Cloud
Computing, and Windows Server 2012 Hyper-V Installation and Configuration Guide, all of
which were published by Wiley and Sybex and Windows Server 2016 Hyper-V Cookbook by
Packt.
He is a community blogger for HPE and tweets in his spare time--his Twitter handle is
!QBUSJDLMPXOET.
When not consulting, speaking, or writing, he can be most often found on a rugby pitch
teaching contact rugby to children of various ages.
Aleksandar Nikolic is a Microsoft Most Valuable Professional (MVP) for Cloud and
Datacenter Management and Microsoft Azure, a co-founder of PowerShellMagazine.com,
and the community manager of PowerShell.com. Aleksandar has more than 17 years of
experience as a system administrator. He also delivers PowerShell and Azure training
courses around the world and is a frequent speaker at IT conferences.

www.PacktPub.com
For support files and downloads related to your book, please visit XXX1BDLU1VCDPN.
Did you know that Packt offers eBook versions of every book published, with PDF and
ePub files available? You can upgrade to the eBook version at XXX1BDLU1VCDPNand as a
print book customer, you are entitled to a discount on the eBook copy. Get in touch with us
at TFSWJDF!QBDLUQVCDPN for more details.
At XXX1BDLU1VCDPN, you can also read a collection of free technical articles, sign up for a
range of free newsletters and receive exclusive discounts and offers on Packt books and
eBooks.
IUUQTXXXQBDLUQVCDPNNBQU
Get the most in-demand software skills with Mapt. Mapt gives you full access to all Packt
books and video courses, as well as industry-leading tools to help you plan your personal
development and advance your career.
Why subscribe?
Fully searchable across every book published by Packt
Copy and paste, print, and bookmark content
On demand and accessible via a web browser

Customer Feedback
Thanks for purchasing this Packt book. At Packt, quality is at the heart of our editorial
process. To help us improve, please leave us an honest review on this book's Amazon page
at IUUQTXXXBNB[PODPNEQ.
If you'd like to join our team of regular reviewers, you can e-mail us at
DVTUPNFSSFWJFXT!QBDLUQVCDPN. We award our regular reviewers with free eBooks and
videos in exchange for their valuable feedback. Help us be relentless in improving our
products!

Table of Contents
Preface
1
Chapter 1: Introduction to Nano Server
7
The story behind Nano Server
7
Business impact
8
Infrastructure impact
8
Security impact
8
The journey to Nano Server
9
Server Core
9
Cloud journey
11
Nano Server - management
14
What makes Nano Server unique?
15
Nano Server improvements
16
Servicing improvements
16
Security improvements
18
Resource utilization improvements
18
Deployment improvements
19
Summary
20
Chapter 2: Getting Started with Nano Server
21
Getting started with Nano Server
22
Nano Server quick start
22
Nano Server customizations
23
Nano Server roles and features
24
Building and customizing a Nano Server image using Windows
PowerShell
26
Advanced settings
29
Adding packages
31
Building and customizing a Nano Server image using Nano Server
image builder
31
Customizing a Nano Server image using DISM
39
Customizing a Nano image using unattend.xml file
39
Injecting unattend.xml into VHD(X)
41
Optional customizations
42
Set computer name
42
Run commands on first boot
43

[ ii ]
Domain join
45
Emergency management services
47
Installing agents and tools
48
Summary
49
Chapter 3: Deploying Nano Server in a Virtual Machine and on Physical
Hardware
50
Nano Server roles and features
50
Deploying Nano Server in a VM
54
Required parameters
55
Optional parameters
56
Deploying Nano Server VM in Hyper-V
59
Hyper-V Manager
59
PowerShell
67
Deploying Nano Server on a physical machine
69
Dual-boot a Nano Server VHD or VHD(X)
69
PxE-boot a bare-metal machine and install Nano Server from WDS using
a VHD, VHD(X), or WIM file
78
Preparing the environment
79
Active Directory Domain Services (ADDS, DNS, DHCP)
80
Creating a custom Nano Server VHD(X) image
80
Creating a custom Nano Server WIM image
81
Installing and Configuring the WDS Role
83
Booting a bare-metal machine into WinPE and deploying Nano Server
using a .wim file
95
Prerequisites
96
Setting up the WinPE environment
96
Deployment from WinPE with network and without WDS
97
Creating a custom WinPE boot image that has PowerShell enabled
97
Creating a WinPE ISO image
102
Creating a WinPE bootable USB thumb drive
103
Deploying Nano Server in Microsoft Azure
104
Requirements
105
Creating Nano Server in Azure
106
Summary
110
Chapter 4: Deploying Hyper-V Cluster on Nano Server
111
Nano Server as a compute cluster
112
Deploying a Nano Server as a Hyper-V cluster
112
Deploying a Nano Server as compute host
114
Acquiring the ISO image of Windows Server 2016 Datacenter edition
115
Creating the new Nano Server images
115
Copying the new Nano Server images to the host machines
118
Rebooting into the new Nano Server image
119

[ iii ]
Connecting and managing Nano Servers from a management machine
121
Configuring the network
123
Creating and configuring a Hyper-V cluster
130
Nano Server as a storage cluster
139
Deploying storage spaces direct on top of Nano Server
141
Creating and deploying Nano Server images
143
Configuring the network
144
Creating and configuring Storage Spaces Direct
147
Summary
155
Chapter 5: Deploying, Managing, and Monitoring Nano Server with
System Center 2016
156
Deploying Nano Server with system center virtual machine manager
2016
157
VMM bare-metal deployment
157
Preparing a Nano Server VHD(X) for a physical machine
157
VMM VM template deployment
170
Preparing a Nano Server VHD for a virtual machine
171
Managing Nano Server with system center virtual machine manager
2016
175
Installing the virtual machine manager agent on Nano Server
175
Managing network teaming on Nano Server
178
Monitoring Nano Server with System Center operations manager 2016
183
Installing the operations manager agent on Nano Server
184
Uninstalling the operations manager agent from Nano Server
191
Summary
191
Chapter 6: Managing Nano Server with Windows PowerShell and
Windows PowerShell DSC
193
Remote server graphical tools
194
Server Manager
194
Hyper-V Manager
196
Microsoft Management Console
197
Managing Nano Server with PowerShell
198
Managing Nano Server with PowerShell DSC
203
Creating a Nano Server image for PowerShell DSC
204
Creating Nano virtual machines
205
Importing the DSC xNetworking module
206
Push DSC configuration
207
Managing Nano Server Security Settings with PowerShell DSC
211
Summary
219

[ iv ]
Chapter 7: Managing Nano Server with Third-Party Tools
220
Nano Server administration using 5nine Manager
221
Creating and managing Nano Server failover clusters with 5nine
Manager
232
Creating a cluster
233
Validating a cluster
234
Configuring live migration settings
237
Viewing the cluster summary
237
Managing cluster nodes
238
Managing clustered VMs
239
Host Load Balancing
240
Clustered virtual machine security
241
Summary
242
Chapter 8: Running Windows Server Containers and Hyper-V
Containers on Nano Server
243
Container overview
243
Container benefits
244
What is a container?
245
Containers versus virtual machines
246
Windows Server containers and Hyper-V containers
248
What is Docker?
251
Running Windows containers on Nano Server
251
Creating a Nano Server image for Windows Server containers
252
Creating a Nano Server VM for Windows Server containers
253
Creating a remote PowerShell session
254
Installing Docker
254
Installing base container images
255
Managing container networking
257
Managing container storage
260
Managing Docker on Nano Server
262
Creating a Windows Server container
264
Creating a Nano Server image for Hyper-V containers
268
Creating a Nano Server VM for Hyper-V containers
270
Creating a Hyper-V container
271
Converting a Windows Server container to a Hyper-V container
273
Summary
275
Chapter 9: Troubleshooting Nano Server
277
Nano recovery console
278
Setting network configurations using the Nano Server recovery console
281

[ v ]
Emergency management services
286
Enabling EMS
287
Enabling EMS using PowerShell
287
Enabling EMS using DISM
288
Windows EMS in a virtual machine
288
Troubleshooting Nano Server VM using EMS
293
Windows EMS on a physical machine
300
Enabling a virtual serial port
301
Enabling the EMS Port in ROM-Based Setup Utility (RBSU)
302
Enabling Windows EMS in the bootloader of the Nano Server OS
304
Using PuTTY to establish an SSH connection to the iLO IP address
305
Using Windows EMS functionality to perform basic support administrative tasks
309
Kernel debugging
311
Installing WinDbg from Windows SDK
313
Debugging Nano Server using WinDbg
314
Setup and boot event collection (SBEC)
317
SBEC requirements
319
Installing the collector computer
319
Creating the Active.xml configuration file
323
Configuring the target and collector computer
326
Configuring Nano Server as a target computer
326
Configuring the collector computer
329
Analyzing and reading diagnostic messages
329
Enabling access to Nano Server event logs
330
Summary
334
Chapter 10: Running Other Workloads on the Nano Server
335
Running DNS on Nano Server
336
Running IIS on Nano Server
339
Installing and managing Windows Defender on Nano Server
346
Managing the Local Administrator's Passwords on Nano Server
351
Prerequisites
352
Installation
352
Using MPIO on Nano Server
359
Using Windows Update on Nano Server
361
Update Out of Box (OOB) drivers for Nano Server
373
The future of Nano Server
376
Summary
378
Index
379

Preface
Thank you for purchasing Getting Started with Nano Server. The book you are holding is the
result of 15 years of experience in the IT world and over 17 years of Windows Server
experience that started with Windows Server 2000, moved on to Windows Server 2012 R2
and now, includes Windows Server 2016 and Nano Server. Modern data centers need a
highly optimized server platform to run infrastructure services, distributed cloud-based
applications, and containers apps based on the microservice architecture.
Nano Server is the first operating system released by Microsoft that was designed to deploy
less on your servers, have less that you have to patch and reboot, and have fewer
components that you actually need on your servers. Nano Server is a much scale down
version of Windows Server that was built for higher density and more efficient OS resource
utilization. Now moving to the cloud journey with Microsoft Azure, large server
installations that have a lot of things installed require patching and rebooting, which
interrupts service delivery. Nano Server is a deep refactoring initially focused on the
CloudOS infrastructure and born-in-the-cloud applications; these applications were written
with cloud patterns that allow you to run on top of Nano Server, and most importantly,
highly optimized base OS images for Nano containers, so you can create containerized
applications that are much smaller, more manageable, and easily shareable across different
environments.
Our aim in this book is to provide you with the information you need to be immediately
effective in deploying, managing, and administering Nano Server environments.
We hope that you get as much from reading this book as we did from writing it. Please be
sure to post any questions, comments, or suggestions you may have about the book on the
online author forum. Your feedback is important to us, in order to develop the best books
possible in the future.
What this book covers
$IBQUFS, Introduction to Nano Server, covers why Microsoft developed Nano Server and
why we need a server that is optimized for the cloud for running the fabric for born-in-the-
cloud applications and for running Windows Server and Hyper-V containers. Nano Server
is a different approach for Microsoft and for everyone; it comes from a historical position
that started with Server Core in Windows Server 2008. Itâ€™s completely a new headless
operating system.

Preface
[ 2 ]
$IBQUFS, Getting Started with Nano Server, focuses on how to get started with Nano Server.
It covers how to add roles and features and how to create and customize a Nano image
using a single line of PowerShell. This chapter also covers how to build and customize a
Nano image using Nano Server Image Builder, the new graphical user interface-based
wizard; and finally, we show you how to customize a Nano image using DISM.
$IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical Hardware, Covers how
to create Nano Server images using Hyper-V Manager and Windows PowerShell. We also
discuss the four deployment options for Nano Server on a bare-metal physical machine
using WinPE and WDS; and lastly, we cover how to deploy a Nano Server VM in Microsoft
Azure.
$IBQUFS, Deploying Hyper-V Cluster on Nano Server, covers the steps needed to deploy
Nano Server as compute, storage, and a hyper-converged cluster using Storage Spaces
Direct (S2D) technology. There is also an introductory overview of running Nano Server as
a compute and storage cluster in this chapter.
$IBQUFS, Deploying, Managing, and Monitoring Nano Server with System Center 2016, focuses
on how to manage and monitor Nano Server using System Center Virtual Machine
Manager and System Center Operations Manager 2016. We show you how to deploy Nano
Server using VMM as a Hyper-V host using bare-metal deployment, and as a virtual
machine using VM templates. Lastly, we show you how you can push the Operations
Manager agent to Nano Server using the operations console with Windows PowerShell.
$IBQUFS, Managing Nano Server with Windows PowerShell and Windows PowerShell DSC,
covers how to effectively manage a Nano Server installation using remote server graphic
tools, Windows PowerShell remoting, and PowerShell Desired State Configuration (DSC).
$IBQUFS, Managing Nano Server with Third-Party Tools, focuses on how to administer Nano
Server using 5nine Manager from 5nine Software, and we show you how to create and
manage a Nano Server Failover cluster.
$IBQUFS, Running Windows Server Containers and Hyper-V Containers on Nano Server,
focuses on Windows containers and how they can change the way we deploy applications.
We also cover the benefits of using containers and how they can integrate with Dev and
Ops team to accelerate application delivery. Finally, we show you how to deploy and run
Windows Server and a Hyper-V container on top of Nano Server using a Nano base OS
image running IIS.

Preface
[ 3 ]
$IBQUFS, Troubleshooting Nano Server, demonstrates how to troubleshoot a Nano Server
installation using the Nano recovery console, Emergency Management Services (EMS),
kernel debugging, and Setup and Boot Event Collection (SBEC), which is a new feature of
Windows Server 2016. Lastly, we show you how to retrieve and read Nano Server Windows
event logs and display them in a nicely formatted HTML report.
$IBQUFS, Running Other Workloads on the Nano Server, covers how to run DNS and IIS on
Nano Server. We also cover additional updates and tools that will help you streamline your
experience using Nano Server. Finally, we discuss the future of Nano Server and Windows
Server.
What you need for this book
To follow along on with this book, you need Windows Server 2016 ISO media, including
System Center 2016 Virtual Machine Manager and System Center 2016 Operations
Manager. We strongly believe in learning by doing; therefore, we encourage you to try out
all of the technologies and principles covered in this book. You don't need a huge server.
For most topics, you could use a single machine with Windows Server 2016 installed, 16 GB
of memory, and by enabling Hyper-V nested virtualization, you could enable a few virtual
machines to run concurrently. Ideally, having at least two physical workstations or servers
will help you with the high availability clustering concepts. With Windows 10, the Hyper-V
client is included in the box, so even without any kind of real server, it is possible to explore
all the features introduced in Nano Server.
Who this book is for
This book is intended for anyone who wants to learn and master Nano Server and take
advantage of all exciting new features that Windows Server 2016 has to offer. If you have
basic knowledge of Windows Server and virtualization, it will be helpful, but it's not a
requirement. If you are an architect, a consultant, a system administrator, or really anyone
who just wants more knowledge about Nano Server, this book is for you as well.
Please note that in some chapters we go into advanced topics that may seem over your
head. In those cases, don't worry. Focus on the preceding elements that you understand
better and implement and practice them to nurture your understanding. Then, when you
feel ready, come back to the more advanced topics and read them multiple times. Repetition
is the key. The more you repeat, the more you understand.

Preface
[ 4 ]
Conventions
In this book, you will find a number of text styles that distinguish between different kinds
of information. Here are some examples of these styles and an explanation of their meaning.
Code words in text, database table names, folder names, filenames, file extensions,
pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We are
copying /BOP4FSWFS folder from the mounted ISO image into $=/BOP4FSWFS locally."
A block of code is set as follows:
*NQPSU.PEVMF$=/BOP4FSWFS=
/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSBUPSQTE7FSCPTF
Any command-line input or output is written as follows:
CDEFEJUFYFTFU`\EFGBVMU^aEFTDSJQUJPO`8JOEPXT/BOP4FSWFSa
New terms and important words are shown in bold. Words that you see on the screen, for
example, in menus or dialog boxes, appear in the text like this: "Right Click your WDS
server in the Windows Deployment Services console and select Configure Server."
Warnings or important notes appear in a box like this.
Tips and tricks appear like this.
Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this
book-what you liked or disliked. Reader feedback is important for us as it helps us develop
titles that you will really get the most out of.
To send us general feedback, simply e-mail GFFECBDL!QBDLUQVCDPN, and mention the
book's title in the subject of your message.
If there is a topic that you have expertise in and you are interested in either writing or
contributing to a book, see our author guide at XXXQBDLUQVCDPNBVUIPST.

Preface
[ 5 ]
Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you
to get the most from your purchase.
Downloading the example code
You can download the example code files for this book from your account at IUUQXXXQ
BDLUQVCDPN. If you purchased this book elsewhere, you can visit IUUQXXXQBDLUQVCD
PNTVQQPSUand register to have the files e-mailed directly to you.
You can download the code files by following these steps:
Log in or register to our website using your e-mail address and password.
1.
Hover the mouse pointer on the SUPPORT tab at the top.
2.
Click on Code Downloads & Errata.
3.
Enter the name of the book in the Search box.
4.
Select the book for which you're looking to download the code files.
5.
Choose from the drop-down menu where you purchased this book from.
6.
Click on Code Download.
7.
Once the file is downloaded, please make sure that you unzip or extract the folder using the
latest version of:
WinRAR / 7-Zip for Windows
Zipeg / iZip / UnRarX for Mac
7-Zip / PeaZip for Linux
The code bundle for the book is also hosted on GitHub at IUUQTHJUIVCDPN1BDLU1VCM
JTIJOH(FUUJOH4UBSUFEXJUI/BOP4FSWFS. We also have other code bundles from our
rich catalog of books and videos available at IUUQTHJUIVCDPN1BDLU1VCMJTIJOH.
Check them out!
Downloading the color images of this book
We also provide you with a PDF file that has color images of the screenshots/diagrams used
in this book. The color images will help you better understand the changes in the output.
You can download this file from
IUUQTXXXQBDLUQVCDPNTJUFTEFGBVMUGJMFTEPXOMPBET(FUUJOH4UBSUFEXJUI/BOP4F
SWFS@$PMPS*NBHFTQEG.

Preface
[ 6 ]
Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do
happen. If you find a mistake in one of our books-maybe a mistake in the text or the code-
we would be grateful if you could report this to us. By doing so, you can save other readers
from frustration and help us improve subsequent versions of this book. If you find any
errata, please report them by visiting IUUQXXXQBDLUQVCDPNTVCNJUFSSBUB, selecting
your book, clicking on the Errata Submission Form link, and entering the details of your
errata. Once your errata are verified, your submission will be accepted and the errata will
be uploaded to our website or added to any list of existing errata under the Errata section of
that title.
To view the previously submitted errata, go to IUUQTXXXQBDLUQVCDPNCPPLTDPOUFO
UTVQQPSUand enter the name of the book in the search field. The required information will
appear under the Errata section.
Piracy
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At
Packt, we take the protection of our copyright and licenses very seriously. If you come
across any illegal copies of our works in any form on the Internet, please provide us with
the location address or website name immediately so that we can pursue a remedy.
Please contact us at DPQZSJHIU!QBDLUQVCDPN with a link to the suspected pirated
material.
We appreciate your help in protecting our authors and our ability to bring you valuable
content.
Questions
If you have a problem with any aspect of this book, you can contact us at
RVFTUJPOT!QBDLUQVCDPN, and we will do our best to address the problem.

1
Introduction to Nano Server
Nano Server is a new headless, 64-bit only, deployment option in Windows Server 2016 that
has been optimized for data centers and for next-generation, distributed applications. Nano
Server is the future of Windows Server; it is similar to Windows Server in Server Core
mode, but significantly smaller, has no local logon capability, and only supports 64-bit
applications, tools, and agents. It takes up far less disk space, sets up significantly faster,
and requires far fewer updates and restarts much faster than Server with Desktop
Experience.
In this chapter, we will cover the following topics:
The story behind Nano Server
The journey to Nano Server
What makes Nano Server unique?
Nano Server improvements
The story behind Nano Server
Microsoft has done a great job with Nano Server. Nano Sever was announced in April 2015
and shipped with the release of Windows Server 2016 in October 2016. But before we start
to dive deeply into Nano Server, we would like to share with you a little background 
behind why Microsoft developed Nano Server:
IUUQCMPHTUFDIOFUDPNCXJOEPXTTFSWFSBSDIJWFNJDSPTPGUBOOPVOD
FTOBOPTFSWFSGPSNPEFSOBQQTBOEDMPVEBTQY.

Introduction to Nano Server
[ 8 ]
Business impact
Microsoft is always listening to customer's feedback, and one constant feedback was server
reboots are impacting my business, because, when you reboot a server, you need to plan
ahead of time and schedule a maintenance window in order to avoid downtime. The next
piece of feedback was, why do I have to reboot a server because of a patch to a certain
component that I never use on my server? And if a reboot is required, the systems need to
be back in service as soon as possible. The constant feedback was, we just want the
components needed to accomplish our goals and nothing more.
Infrastructure impact
The size of server images have increased over time; large server images take a long time to
deploy and configure, especially when you work with virtual machines.
Storing and maintaining virtual machine templates requires too much disk space, when it
comes to mobility by moving virtual machines around using live migration. Thus, it will
require a lot of network bandwidth as well.
With full blown server images, the infrastructure requires too many resources; if the
operating system consumes fewer resources, you can increase virtual machines' density,
and with higher VM density, you can lower the cost and increase efficiency in your
environment.
Security impact
IT security is no longer just about protecting your computers and minimizing potential
downtime and lost productivity. It's about protecting your valuable business data, your
customers' personal details, and your company's reputation. We saw the headlines in the
last couple of years about online attacks and credit card numbers being stolen. There was a
40% increase in the number of large companies targeted by cyber-attacks in 2014, as
criminals hijack infrastructures and attack from within, according to the largest
cybersecurity companies research; a cyberattack has even caused confirmed physical
damage for the second time ever. As an example, a hacker was able to remotely control a
vehicle and shut it down. Security has become a number one priority in every firm today.

Introduction to Nano Server
[ 9 ]
We can no longer afford the security risks of the install everything, everywhere approach.
Basically, having a large server installation that has a lot of things installed, that you don't
necessarily really need, opens you up to more of these attacks. The less you have installed
on your server, the less ports you have to open. This in turn reduces the ways a hacker can
try to attack your systems. So that's really sort of the area that Microsoft took the lead on
and created the genesis of Nano Server.
The journey to Nano Server
Now going back, let's tell the story from the beginning. Starting with the Windows NT and
3.1 days, after Windows Server came Windows NT and really, what Microsoft did at that
time was they took the client and installed everything on it. All the roles and features were
in the box. You could just deploy what you wanted and you were up and running. In fact,
Mark Russinovich (CTO of Microsoft Azure), claimed that he discovered the registry key
that will allow you to convert your client OS into a Server. That approach continues
through Windows Server 2003 when they started to separate some of the roles and features.
Server Core
The big change occurred in Windows Server 2008 and Microsoft introduced Windows
Server Core as an installation option. This was really the first step toward having to deploy 
less on your servers, have less that you have to patch and reboot, and have fewer
components that you don't necessary need on your servers. What I mean by the installation
option is, when you first start installing the operating system, you have the option to choose
between Server Core or Server with Desktop Experience installation.
Once you deploy Server Core or Server with Desktop Experience, then you can start adding
roles and features that you want to run on top as shown in Figure 1, small boxes on top.

Introduction to Nano Server
[ 10 ]
For Windows Server 2008 and Windows Server 2008 R2, the choice between Server Core
and a full installation had to be made at installation time and couldn't be changed without
reinstalling the OS:
(KIWTG9KPFQYU069KPFQYU5GTXGT4LQWTPG[KOCIGUQWTEG/KETQUQHV
However, with Windows Server 2012 and 2012 R2, Microsoft has offered the installation
options in a way that you can start by deploying Server Core. Then there is a package that
you can add to move up to Full Server or you can install a Full Server and then remove the
server graphic shell and Graphical Management Tools and Infrastructure and convert
back down to Server Core is as showing in Figure 2. In other words, the graphical shell and
the management infrastructure are features that can be added and removed at any time,
requiring only a reboot, making it easy to switch between the Server Core and Full Server
with GUI. Microsoft also introduced the minimal Server interface so you can actually
uninstall Internet Explorer and &YQMPSFFYF and have just Microsoft Management
Console ( MMC) and Server Manager, which results in less patching. The Minimal Server
Interface has fewer benefits than Server Core but it does provide a nice middle-ground
versus Server with Desktop Experience:

Introduction to Nano Server
[ 11 ]
(KIWTG4GOQXKPIVJGITCRJKECNOCPCIGOGPVVQQNUKP9KPFQYU5GTXGT4
Cloud journey
Now moving to the cloud journey with Microsoft Azure, a large server installation that has
a lot of things installed, requires patching, and reboots which interrupt service delivery.
Azure doesn't use live migration and doesn't use failover clustering. When they have to
take down a host in an Azure data center, it does require the virtual machine to be taken
down and restarted as well. So, with a large number of servers and large OS resource
consumption, it generates a lot of Cost of goods sold (COGS) for them. COGS are the direct
costs attributable to the production of the services sold by Microsoft Azure. Thus, by
provisioning, large host images compete for the network resources. As mentioned in the
Business impact section earlier in this chapter, deploying all those hosts and then re-
imaging all of them when a new patch comes out, requires a lot of network bandwidth.
Many service providers (not only Microsoft Azure) are over provisioning their network so
that they can have enough capacity for live migration or for re-provisioning servers.

Introduction to Nano Server
[ 12 ]
Back in October 2014, Microsoft released the first version of their Cloud-in-box solution
called Cloud Platform System (CPS) which is running on top of Windows Server Core,
System Center, and Windows Azure Pack. To build a CPS system, requires a lot of time;
installing all that software takes a lot of time and patching impacts the network allocation.
Since a CPS system is an on-premises solution, it does use live migration for the virtual
machines. So, with fully loaded CPS 4 racks, configuration would support up to 8,000
virtual machines. So, if each VM is configured with 2 GB of RAM, then you need 16 TB to
live migrate over all the networks. Thus, we conclude that you need to have enough
capacity to handle that network traffic instead of using it for the business itself. I am not
saying that the configuration isn't optimized in CPS in a live migration sense, but they are
using live migration over Server Message Block (SMB) protocol directly to offload the 
network traffic to Remote Direct Memory Access (RDMA) NICs, which is really fast.
However, it still takes time to migrate 16 TB of information, and as mentioned earlier,
server reboots result in service disruption. The reboot for the compute Hyper-V host in CPS
takes around 2 minutes, and the storage host takes around 5 minutes to complete.
Microsoft determined from both Azure and building up the CPS solution that they need a
server configuration which is optimized for the cloud and also something that will benefit
all their customers, whether you are deploying a cloud configuration in your data center or
you are using just Windows Server as your virtualization platform or leveraging the public
cloud that's running on top of Windows Server.
The next step in the journey is Nano Server, a new headless, 64-bit only, deployment option
for Windows Server, as you can see in Figure 3. It's a little different from Windows Server
2012 R2 in Figure 1. Nano Servers start following the Server Core pattern as a separate
installation option. Therefore you can install Nano Server and then there is sub-set of roles
and features that you can add on top. The installation options that we have in Windows
Server 2016 are Nano Server, Server Core, and Server with a Desktop Experience.
Microsoft made a significant change in Windows Server 2016 where you cannot move 
between different installation options anymore as in Windows Server 2012 R2, just because
of some of the changes they had to make in order to implement Nano Server and Server
with a Desktop Experience:

Introduction to Nano Server
[ 13 ]
(KIWTG0CPQ5GTXGTLQWTPG[KOCIGUQWTEG/KETQUQHV
Nano Server is deep refactoring initially focused on the CloudOS infrastructure. With Nano
Server, you can deploy Hyper-V hosts as a compute platform. You can deploy a scale-out
file server as storage nodes and clusters, so that you can do clustered storage servers or
clustered Hyper-V hosts and do live migration across nodes. The Nano Server team is
continuously working on supporting born-in-the cloud applications; those applications
were written with cloud patterns which allow you to run on top of Nano Server. Nano
Server can be installed on your physical machines, or it can be installed as a guest virtual
machine, and it will also serve as the base OS for Hyper-V containers. Please refer to
$IBQUFS, Running Windows Server Containers and Hyper-V Containers on Nano Server, for
more details about Windows Server containers and Hyper-V containers running on top of
Nano Server.

Introduction to Nano Server
[ 14 ]
Nano Server is a separate installation option. It's a self-contained operating system that has
everything you need. The major difference between Nano Server and Server Core is that
none of the roles or features are available in the image same as we get in Server Core and
Full Server. The side by side store is when you go to add or install additional roles and
features with Windows Server; it never prompts you for the media, as the binary data that
is required already exists on your hard disk within the OS. However, in Nano Server, all the
infrastructure roles (Hyper-V, storage, clustering, DNS, IIS, and so on) live in a series of
separate packages, so you have to add them to the image. In this case, your base Nano
Server image will always stay very small. As you start adding roles and features to Nano
Server, each role becomes an additional package, as the Hyper-V role for example which
only requires the Nano Server base OS, so it will always be small and tight. If you are
adding another role that requires a 500 MB file, that will be another 500 MB file to be added
to the Nano Server image as a separate package. Nano Server has full driver support, so any
driver that works for Windows Server 2016, will work with Nano Server as well.
As of the first release of Nano Server 2016, these are the key roles and features supported to
run on Nano Server:
Hyper-V, clustering, storage, DNS, IIS, DCB, PowerShell DSC, shielded VMs,
Windows defender, and software inventory logging
Core CLR, ASP.NET 5, and PaaSv2
Windows Server containers and Hyper-V containers
System Center Virtual Machine Manager (SCVMM) and System Center
Operations Manager (SCOM)
Nano Server - management
Without a GUI, it's not easy to carry out the daily management and maintenance of Nano
Server. In fact, all the existing graphical tools, such as Hyper-V Manager, failover cluster
manager, Server Manager, registry editor, file explorer, disk and device manager, server
configuration, computer management, users and groups are compatible to manage Nano
Server remotely.

Introduction to Nano Server
[ 15 ]
The Nano Server deployment option of Windows comes with full PowerShell remoting
support. The purpose of the core PowerShell engine is to manage Nano Server instances at
scale. PowerShell remoting includes WMI, Windows Server cmdlets (network, storage,
Hyper-V, and so on.), PowerShell Desired State Configuration (DSC), remote file transfer,
remote script authoring, and debugging. PowerShell relies on the .NET Framework; as you
may have noticed Nano Server is a small and tiny OS and only has the Core Common
Language Runtime (CLR). The Core CLR is a tiny subset of the .NET Framework; the
PowerShell team went ahead and refactored PowerShell to run on Core CLR, which was a
huge effort. The good news is that PowerShell users probably will not miss the most
important features. It has full language compatibility and supports PowerShell remoting, so
you can use the most popular remote commands, such as *OWPLF$PNNBOE, /FX
144FTTJPO, &OUFS144FTTJPO, and so on.
The PowerShell Core is available in every image of Nano Server; it's not an optional
package. Each Nano Server image contains, by default, Core CLR that takes up 45 MB of
space; PowerShell itself takes about 8 MB of space, and there is 2 MB available for two built-
in modules. Remoting is turned on by default, so a Nano Server installation will be always
ready to be remoted into and be managed remotely.
What makes Nano Server unique?
One of the unique capabilities of Nano Server is the ability to be deployed as a massively
scaled down version of the server OS. Microsoft dabbled with this idea in Windows Server
2008 when they introduced Server Core, but Nano Servers are substantially smaller than
Server Core deployments.
How is this possible?
No GUI, no notepad, and no DNEFYF window.
The OS has been stripped of everything that is not needed in a cloud
environment; in particular the UI stack, the x86 subsystem (WOW64), and
unnecessary APIs.
Nano Server does not include MSI as an installation technology due to
dependencies and the open-ended nature of MSI custom actions. Microsoft
introduced the Windows Server App (WSA) instead, which is an installer
framework designed to install and service applications safely and reliably, using
a declarative manifest. WSA does not support custom actions, so will not have
the reliability and uninstall issues of MSI.

Introduction to Nano Server
[ 16 ]
Minimal packages and features in the base image. The Nano Server team have
stripped down this OS to a minimal set of APIs and features. You will probably
find some of your utilities missing here, but that's ok because it similarly has
another and probably better API that accomplishes the same functionality.
Basically, Microsoft is producing an OS that does not try to support legacy systems.
However, the DevOps mindset is far more effective at managing server cattle versus pets,
which is an analogy made by Jeffery Snover (Microsoft technical fellow, lead architect for
Cloud and Enterprise Group and PowerShell architect).
At this scale, we don't have the time or resources to be accessing our instances via a remote
desktop and clicking buttons or dragging windows. If one server becomes sick, we put it
out of its misery quickly and replace it and be up and running in a couple of seconds. The
idea behind Nano Server is to eliminate the need to sit in front of a server forever. UIs do
not belong on servers.
Nano is a lightweight server OS and made to be accessed and managed remotely.
Nano Server improvements
Microsoft has published several numbers and preliminary results for Nano Server around
servicing, security, resource utilization and deployment improvements, compared to Server
Core and Server with Desktop Experience deployment. In this section, we will highlight the
improvements based on those results for you to understand the benefits on what Nano
Server brings to your environment.
Servicing improvements
The numbers shown in Figure 4 are based on analysis done by Microsoft for all Windows
patches that were released in 2014. These numbers fall under three categories as the
following:
Important bulletins
Critical bulletins
Reboots required

Introduction to Nano Server
[ 17 ]
If you had Nano Server installation options available in 2014, Nano Server had nine
important bulletins versus Server Core which had 23 and Server with Desktop Experience
that had 26. The interesting one is critical bulletins; Nano Server had two versus Server
Core that had eight and Server with Desktop Experience 23. The critical bulletin is a security
fix for something that Microsoft has found that people are trying to exploit. This is rated as
critical and must be deployed as quickly as possible. So, for the entire year, Nano Server
had only two of those critical updates. However, the important bulletins help in overall
quality of the system. For Nano Server, there were three reboots required for the entire year,
Microsoft is working hard to bring the reboot number from three to only two; Server Core
had six and Server with Desktop Experience had 11. Thus for 11 months, you had to reboot
your servers because of patches that were applicable to them, whereas for Nano Server, you
had to reboot only thrice. Here you can see the uptime benefits of deploying Nano Server:
(KIWTG0CPQ5GTXGTUGTXKEKPIKORTQXGOGPVUKOCIGUQWTEG/KETQUQHV

Introduction to Nano Server
[ 18 ]
Security improvements
Now moving to the security improvements, we are comparing Nano Server with Server
Core. As shown in Figure 5 for drivers loaded, we have 73 for Nano and Server Core has 98,
Microsoft did not change a lot in the driver's space. However, for services running, they
made some significant improvements. In this area, Nano Server had 28 services running
versus Server Core which had 47, little less than half. As for ports open, Nano Server was
almost a third less compared to Server Core; Nano Server had 12 versus Server Core which
had 30. This is the exposure on your network in ways that things can be attacked;
vulnerability might be exposed in your systems. The drivers loaded are the hardware
drivers and the drivers loaded by the system:
(KIWTG0CPQ5GTXGTUGEWTKV[KORTQXGOGPVUKOCIGUQWTEG/KETQUQHV
Resource utilization improvements
As for the resource utilization side, the process count, as shown in Figure 6, Nano Server
had 21 versus Server Core that had 26; there has not been too much work done in this area.
The boot I/O is a good change here where Nano Server has 108 MB versus Server Core's 306
MB, so 198 MB less of things loading during the boot process and I/O on the disk, that helps
speed-up the boot time. Considering the kernel memory in use, Nano Server had 61 MB
versus Server Core that had 139 MB, so more resources are available for other things
running on your servers:

Introduction to Nano Server
[ 19 ]
(KIWTG0CPQ5GTXGTTGUQWTEGWVKNK\CVKQPKORTQXGOGPVUKOCIGUQWTEG/KETQUQHV
Deployment improvements
Finally, the deployment improvements are shown in Figure 7. For setup time, Nano Server
takes just 35 seconds compared with almost 5 minutes for Server Core. This is a huge
improvement here. You will see where these 35 seconds came from in $IBQUFS, Deploying
Nano Server in a Virtual Machine and on Physical Hardware. You don't have to actually use
Windows setup. Basically, you copy an image that you already created an unattended file
for; that 35 seconds setup includes the time to create the unattended file. As for physical
deployment using commodity hardware 100 MB switch with Windows Deployment Server
(WDS) and PXE boot, Nano Server was fully provisioned in 3 minutes, whereas Server Core
using the exact same configuration just switching to a Server Core image was 19 minutes.
This is quite an improvement. The setup time is a one-time operation typically; the reboot
time took only 15 seconds using the same hardware with spindle disks. The reboot times
might vary based on your hardware especially with SSDs. This is quite impressive.
For the disk footprint, Nano Server is 460 MB; that's why it can boot and deploy so quickly,
whereas Server Core is almost 5.42 GB. This is assuming you did not add any extra
packages; as an example, with the Hyper-V (compute) package, the image will be under 460
MB, because Hyper-V is such a small footprint of hypervisor.

Introduction to Nano Server
[ 20 ]
As for VHD size, there is a little bit of overhead here. When you are running in a virtual
machine, as you can see, Windows Server Core went up from almost 5.42 GB to a little over
6 GB, and Nano Server goes from 460 MB to 480 MB:
(KIWTG0CPQ5GTXGTFGRNQ[OGPVKORTQXGOGPVUKOCIGUQWTEG/KETQUQHV
Summary
In this chapter, we covered why Microsoft developed Nano Server, and why we need a
server that is optimized for the cloud for running the fabric. For born-in-the-cloud
applications, for running Hyper-V containers and Windows Server containers, it's a
different approach for Microsoft and for everyone actually; it's one that's coming from a
position historically starting with Server Core in Windows Server 2008 and going forward.
It's a completely new, headless operating system.
Continue now to $IBQUFS, Getting Started with Nano Server, to learn more about how to get
started with Nano Server.

2
Getting Started with Nano
Server
As we discussed in $IBQUFS, Introduction to Nano Server, Nano Server has absolutely no
local GUI and it takes up far less disk space. Server roles and optional features exist outside
of Nano Server, and we refer to them as packages. Those packages can be added to Nano
Server image on demand. Microsoft developed Nano Server with just enough OS. In other
words, it's only the OS and the components of the OS that we need for the function which is
required, and nothing more. With Nano Server, the 400 MB base image basically holds
Windows Management Instrumentation (WMI), reverse forwarders for application
compatibility, and a PowerShell core. Nano Server installation will always be ready to be
remoted into and can be managed remotely using remote PowerShell, or with any standard
Remote Server Administration Tools (RSAT) GUIs such as Hyper-V Manager, failover
cluster manager, and Server Manager. If any additional roles and features are needed, we
can have them actually installed online with a package management (BLB0OF(FU)
provider, we can inject them at image creation as well, or we can copy them over a running
Nano Server and install them using the DISM tool or Nano Server PowerShell module.
Nano Server is fully supported using the same drivers that exist in the Server Core
installation of Windows Server 2016.
The main key roles and features for Nano Server are:
Hyper-V compute role, storage (Scale-out File Serve, Storage Spaces Direct,
Storage Replica), and failover clustering
Born-in-the-cloud application is the modern-day web server for Core CLR,
ASP.NET 5, Node.js, and PaaS v2
Base operating system for Windows Server containers and Hyper-V containers

Getting Started with Nano Server
[ 22 ]
In this chapter, we will cover the following topics:
Getting started with Nano Server
Building and customizing a Nano Server image using Windows PowerShell
Building and customizing a Nano Server image using Nano Server image builder
Customizing a Nano Server image using DISM
Getting started with Nano Server
Unlike the other installation options, whether in Server with Desktop Experience or Server
Core, as shown in Figure 1, Nano Server basically exists in the folder of the ISO image on the
media, and we need to add the package for the role and feature that we need. For example,
if we need to make Nano Server a compute host (Hyper-V), we need to add a compute
package using DISM or PowerShell. We will cover the syntax in a bit:
(KIWTG0CPQ5GTXGT9KPFQYU5GTXGTOGFKC
Nano Server quick start
Microsoft provided two of the main scripts on the Nano Server image itself. When you go to
the /BOP4FSWFS folder on the ISO media, you will find /BOP4FSWFSXJN which is a file-
based disk image format that will help you to deploy the Nano Server operating system. In
addition, you will find a very small text file called 3FBE.F which actually tells you this: For
detailed information on deploying and managing Nano Server, please go to this link: IUUQ
XXXBLBNTOBOPTFSWFS.

Getting Started with Nano Server
[ 23 ]
Under the /BOP4FSWFS*NBHF(FOFSBUPS folder, you will find one script and one
PowerShell module, as shown in Figure 2:
(KIWTG0CPQ5GTXGT+OCIGIGPGTCVQTCPF2QYGT5JGNNOQFWNG
You can use these scripts to generate, build, and customize a Nano Server image for:
A physical machine
A virtual machine
The good news is that Microsoft made it easy to build your Nano Server image in such a
way that you can write a single PowerShell command. That's all you need to build your
Nano Server image from scratch. You can specify the package(s) that you need to be
included as part of the image. You can add the computer name, administrator password,
and IP address.
This single PowerShell command will take care of the customization to build the image that
fits your environment.
Nano Server customizations
You can customize Nano Server using the /BOP4FSWFS*NBHF(FOFSBUPS PowerShell
module or using the DISM tool. Microsoft divides the customizations into required and
optional packages, as shown here:

Getting Started with Nano Server
[ 24 ]
With the SFRVJSFE parameters, you can set the following:
Adding the right set of drivers. Microsoft has the OEM drivers package. If you
want to host Nano Server on a physical machine, the OEM package contains the
inbox drivers that are used to ship with Server Core. Microsoft packaged these
for convenience purposes, so you can test Nano Server without having to bump
into situations where you have to download a driver or find the right driver for
your machine. Alternatively, you can use the guest drivers if you want to host
Nano Server in a virtual machine.
Adding the required roles and features. You can create a Nano Server image
without adding any role or feature, but ideally you want to run Nano Server for a
purpose, whether it's a storage host, compute host, or you want to run, for
example, ASP.NET applications on top of Nano Server.
Set the Administrator password which is required. If you don't specify a
computer name, the Operating System will generate a random computer name
during setup for you.
The last one is converting WIM to VHD(X), which is required if you want to use
Nano Server in a VM. However, there is a way to apply the WIM image as it is,
without conversion to the physical hardware. We will cover that in $IBQUFS,
Deploying Nano Server in a Virtual Machine and on Physical Hardware.
With the PQUJPOBM parameters, you can set the following:
Add computer name
Add the IP address, DNS, and gateway
Join Nano Server to the domain
Set dual boot with CDECPPU more on that in $IBQUFS, Deploying Nano Server in a
Virtual Machine and on Physical Hardware
Enable Emergency Management Services (EMS): more on that at the end of this
chapter
Add packages: see further for more information
Nano Server roles and features
The /BOP4FSWFS folder in the ISO image has a packages sub-folder, as shown in the
following Figure 3:

Getting Started with Nano Server
[ 25 ]
(KIWTG0CPQ5GTXGT4QNGUCPF(GCVWTGU
Role or feature:
Hyper-V role
Failover clustering
File Server role and other storage components
Container host
DNS server
IIS Server
Windows defender antimalware, including a default signature file

Getting Started with Nano Server
[ 26 ]
The following packages are supported to work on Nano Server, based on the GA version of
Windows Server 2016:
.JDSPTPGU/BOP4FSWFS$PNQVUF1BDLBHF
.JDSPTPGU/BOP4FSWFS$POUBJOFST1BDLBHF
.JDSPTPGU/BOP4FSWFS%$#1BDLBHF
.JDSPTPGU/BOP4FSWFS%FGFOEFS1BDLBHF
.JDSPTPGU/BOP4FSWFS%/41BDLBHF
.JDSPTPGU/BOP4FSWFS%4$1BDLBHF
.JDSPTPGU/BOP4FSWFS'BJMPWFS$MVTUFS1BDLBHF
.JDSPTPGU/BOP4FSWFS(VFTU1BDLBHF
.JDSPTPGU/BOP4FSWFS)PTU1BDLBHFDBC
.JDSPTPGU/BOP4FSWFS**41BDLBHF
.JDSPTPGU/BOP4FSWFS0&.%SJWFST1BDLBHF
.JDSPTPGU8JOEPXT4FSWFS4$7..$PNQVUF1BDLBHF
.JDSPTPGU8JOEPXT4FSWFS4$7..1BDLBHF
.JDSPTPGU/BOP4FSWFS4FDVSF4UBSUVQ1BDLBHFDBC
.JDSPTPGU/BOP4FSWFS4IJFMEFE7.1BDLBHFDBC
.JDSPTPGU/BOP4FSWFS4PGUXBSF*OWFOUPSZ-PHHJOH1BDLBHFDBC
.JDSPTPGU/BOP4FSWFS4UPSBHF1BDLBHF
Building and customizing a Nano Server
image using Windows PowerShell
First, you need to mount Windows Server 2016 ISO media on any Windows 10 or Windows
Server 2016 machine.
Assuming the drive letter for the mounted image is E:
Run the following PowerShell cmdlet:
$PQZ&=/BOP4FSWFS$=/BOP4FSWFS3FDVSTF
We are copying the /BOP4FSWFS folder from the mounted ISO image into $=/BOP4FSWFS
locally.

Getting Started with Nano Server
[ 27 ]
Import the /BOP4FSWFS*NBHF(FOFSBUPSQTE PowerShell module by running the
following command:
*NQPSU.PEVMF$=/BOP4FSWFS=
/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSBUPSQTE7FSCPTF
(KIWTG0CPQ5GTXGT+ORQTV2QYGT5JGNN/QFWNG
After importing the new PowerShell module using the 7FSCPTF parameter, you will
notice we have in fact imported three commands: /FX/BOP4FSWFS*NBHF, (FU
/BOP4FSWFS1BDLBHFT, and &EJU/BOP4FSWFS*NBHF:
The /FX/BOP4FSWFS*NBHF creates a new Nano Server image.
The &EJU/BOP4FSWFS*NBHF makes changes to an existing image that you
already built. For example, you have created an image that has the Hyper-V
compute package and you have been using it for a while. Now, if you decide that
you want to add the clustering role, then you can edit the image to add the
clustering package instead of creating a new one.
The (FU/BOP4FSWFS1BDLBHFT lists all supported packages on the media.
To generate a VHD(X) from /BOP4FSWFS8*. by using the /FX/BOP4FSWFS*NBHF
function, open Windows PowerShell as Administrator and run the following:
$E$=/BOP4FSWFS
1BTTXPSE3FBE)PTU1SPNQU1MFBTFTQFDJGZMPDBM"ENJOJTUSBUPS
QBTTXPSE"T4FDVSF4USJOH
/FX/BOP4FSWFS*NBHF.FEJB1BUI&A
#BTF1BUI$=/BOP4FSWFS=A
5BSHFU1BUI$=/BOP4FSWFS=/BOP4FSWFSWIEYA
%FQMPZNFOU5ZQF(VFTUA
&EJUJPO%BUBDFOUFSA
$PNQVUFS/BNF/"/0A
"ENJOJTUSBUPS1BTTXPSE1BTTXPSEA
*OUFSGBDF/BNF0S*OEFY&UIFSOFUA

Getting Started with Nano Server
[ 28 ]
*QW"EESFTTA
*QW4VCOFU.BTLA
*QW%OTA
*QW(BUFXBZA
&OBCMF3FNPUF.BOBHFNFOU1PSUA
7FSCPTF
Let's dive into the parameters that we used in this example:
.FEJB1BUI : This is the root of the DVD drive or the ISO image (& in my case),
where your media is.
#BTF1BUI: This is the MPDBM folder on your machine that you specify where the
command is going to keep a copy of the Nano Server binaries. In other words,
next time you use the command to create a Nano Server image, you don't have to
use .FEJB1BUI anymore. You can just use #BTF1BUI, because it already has a
copy of the binaries, so you will save the copy time.
5BSHFU1BUI: This is the location path where you want to generate your final
image. You can specify any folder you want, but make sure you specify the
extension you want. In this example, we specified VHDX, because that was what
I wanted. You can specify VHD, VHDX, or WIM as well.
%FQMPZNFOU5ZQF: This is a very important parameter when you are generating
a Nano image. This will be guest or host, depending on whether you want to
deploy a virtual machine or a physical Nano Server. In this example, we specified
guest; you can consider the guest the same as integration services in Hyper-V.
Integration Services (also called integration services) are the set of synthetic
drivers which allow a virtual machine to communicate with the host operating
system.
&EJUJPO: This parameter helps you to choose a 4UBOEBSE or %BUBDFOUFS
edition. For more information about pricing and licensing for Windows Server
2016, please check the following link: IUUQTXXXNJDSPTPGUDPNFOVTDMPV
EQMBUGPSNXJOEPXTTFSWFSQSJDJOH.
$PNQVUFS/BNF: This is the name of the Nano Server computer.

Getting Started with Nano Server
[ 29 ]
"ENJOJTUSBUPS1BTTXPSE: This is the local Admin password (the one we
specified at the beginning of the script).
*OUFSGBDF/BNF0S*OEFY: This parameter helps you to change the IP settings of
a network adapter; you'll need to use this parameter in conjunction with the
following IP parameters. The first NIC adapter will always be named Ethernet.
*QW"EESFTT, *QW4VCOFU.BTL, *QW%OT, *QW(BUFXBZ: are self-
explanatory and enable the setting of static addresses; if you don't specify these
parameters, Nano Server will look for the DHCP server on the network.
&OBCMF3FNPUF.BOBHFNFOU1PSU: This parameter opens port 5985 for inbound
TCP connections for Windows Remote Management (WinRM) to manage Nano
Server across different subnets.
After running the previous script, you will get a Nano Server VHDX image with just
enough OS, without any role or feature added.
If you created a VHDX Nano image and you want to use this image in Hyper-V, please
make sure to choose generation 2 virtual machine (this is very important). VHDX means
generation 2, in this case, for Nano Server and VHD means generation 1. More on this in
$IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical Hardware.
You can download the previous script /FX/BOP4FSWFS*NBHF, which is a
companion for this book.
Advanced settings
The /FX/BOP4FSWFS*NBHF supports an extended set of advanced parameters as well:
.BY4J[F: If you need larger images, you can supply .BY4J[F to create a
larger, dynamically expanding VHD(X) (that is, .BY4J[F 100 GB). If you don't
use this parameter, the default disk size is 4 GB.
-PH1BUI: This parameter sets the location where you want to save the logs
created while building the Nano image.
&OBCMF3FNPUF.BOBHFNFOU1PSU: If you need to open port  for inbound
TCP traffic to connect using WinRM from a different subnet.
.FSHF1BUI: If you need to embed your own script or binaries into the Nano
Server image, you can supply .FSHF1BUI to copy a file or a directory into the
root of the image (that is, .FSHF1BUI=UPPMT).

Getting Started with Nano Server
[ 30 ]
&OBCMF&.4: This enables EMS and boot EMS on the image. See $IBQUFS,
Running Other Workloads on the Nano Server, for more information.
&.41PSU: This is the port on which to enable the EMS. The default is .
&.4#BVE3BUF: This is the baud rate to use for EMS. The default is  bps.
%PNBJO/BNF: This joins the image to the specified domain performing an offline
join. For more information, see the domain join in $IBQUFS, Deploying Nano
Server in a Virtual Machine and on Physical Hardware.
3FVTF%PNBJO/PEF: When joining a domain, reuse a node with the same name if
it exists already in the domain.
4FSWJDJOH1BDLBHF1BUI: With this parameter, you can add servicing packages
that you download from the Microsoft update catalog (multiple packages are
possible at once, added as a comma separated list; these packages should be
extracted from NTV to DBC format).
4FUVQ$PNQMFUF$PNNBOE: With this parameter, you can add custom
commands as part of TFUVQDPNQMFUFDNE. See Customizing a Nano Server Image
Using DISM in this chapter for more information.
6OBUUFOE1BUI: With this parameter, you can add the location of your own
custom VOBUUFOEYNM file. See Customizing a Nano Server Image Using DISM in
this chapter for more information.
1BDLBHF: This is the specific parameter that adds the packages that don't have a
specific parameter. See the Adding Packages section in this chapter for more
information.
0&.%SJWFST: This is the specific parameter that adds the OEM drivers package.
These drivers are the same set of drivers that exist in Server Core, which includes
a variety of network and storage controller drivers.
4FUVQ6*: This parameter is brought about the same way as with the packages
choice. This is used internally by the Nano Server image builder, and the
recommended method is still to use the 1BDLBHF parameter (see Building and
customizing a Nano Server image using Nano Server image builder section for more
information).

Getting Started with Nano Server
[ 31 ]
Adding packages
For adding packages, you can use the following package switches which are supported
with the /FX/BOP4FSWFS*NBHF command:
4UPSBHF: This allows you to add the File Server role and other storage
components
$PNQVUF: This allows you to add the compute (Hyper-V) role
%FGFOEFS: This allows you to add the Windows defender feature
$MVTUFSJOH: This allows you to add the clustering role
$POUBJOFST: This allows you to add the containers role (see $IBQUFS,
Running Windows Server Containers and Hyper-V Containers on Nano Server)
The list of packages supported on Nano Server will keep growing over time. Therefore,
instead of adding a new switch for each package, the Nano Server team has added a new
parameter 1BDLBHF that supports a comma separated list of all the packages that you
want to include.
If you want to add the Hyper-V server role, failover clustering, and the storage role, you can
use the 1BDLBHF parameter as shown in the example covered earlier, followed by the
name of each package, as shown in the following example:
1BDLBHF.JDSPTPGU/BOP4FSWFS$PNQVUF1BDLBHF.JDSPTPGU
/BOP4FSWFS'BJMPWFS$MVTUFS1BDLBHF.JDSPTPGU/BOP4FSWFS
4UPSBHF1BDLBHF
Building and customizing a Nano Server
image using Nano Server image builder
The Nano Server image builder is a new GUI-based wizard which helps you create a
custom Nano Server image and bootable USB media. The Nano Server image builder is
based on the inputs you provide; it generates images for deployment and it also creates
reusable PowerShell scripts that allow you to automate the image creation process.
To create a Nano Server image using the Nano Server image builder, there are three
resources you must have ready. These resources include:
Windows Assessment and Deployment Kit (ADK) (IUUQTEFWFMPQFSNJDSP
TPGUDPNFOVTXJOEPXTIBSEXBSFXJOEPXTBTTFTTNFOUEFQMPZNFOULJU)

Getting Started with Nano Server
[ 32 ]
Nano Server image builder (IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFU
BJMTBTQYJE)
Windows Server 2016 ISO file (IUUQTXXXNJDSPTPGUDPNFOVTFWBMDFOUFS
FWBMVBUFXJOEPXTTFSWFS)
From the machine that you will use to create the Nano Server image using the Nano Server
image builder, you need to install the Windows ADK.
Launch Nano Server image builder and select the preferred method of creating the image,
as shown in Figure 5:
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT

Getting Started with Nano Server
[ 33 ]
Make sure you have already downloaded Windows Server 2016 ISO; you can extract the
media to a folder on your local machine or mount the ISO, click on Create a new Nano
Server image, specify the location of the Windows Server media as shown in Figure 6, and
then click Next:
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT%TGCVGC0CPQ5GTXGTKOCIG
Accept the License Agreement, click Next, and then choose your deployment type:
Virtual machine images can be WIE or WIEY
Physical machine images can be WIE, WIEY, or XJN

Getting Started with Nano Server
[ 34 ]
In this example, we will select a virtual machine image, as shown in Figure 7:
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT5GNGEVFGRNQ[OGPVV[RG
Click Next twice. Select the Nano Server Edition (Standard or Datacenter) and the
components that you want to include, as shown in Figure 8. In my case, I'll use it as a
Hyper-V, file server, and failover clustering service, so I've selected those roles. Including
Windows PowerShell Desired State Configuration (DSC) is useful too (as you do need
some way to configure the OS after it is installed), and having some sort of anti-malware is
recommended too, so include Windows Server Antimalware for defender. Beyond that, it
depends on what you want the Nano Server to do:

Getting Started with Nano Server
[ 35 ]
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT5GNGEVQRVKQPCNRCEMCIGU
Click Next; here you can add additional drivers provided by the OEM vendor if you are
creating a Nano image for a physical machine. In my case, the virtual machine integration
components for Hyper-V have been selected automatically, which enables VMs to have a
more consistent state and enables the guest to use synthetic devices.

Getting Started with Nano Server
[ 36 ]
Click Next; in the Destination machine information you need to give the computer name,
local Administrator password, and the preferred time zone, as shown in Figure 9:
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT&GUVKPCVKQPOCEJKPGKPHQTOCVKQP
Click Next; you can enter a domain name to use as an existing active directory account, or
you can provision a computer account metadata CMPC file.
Click Next; in the Set network you can enable remote PowerShell management from all
subnets, enable VLAN ID, and configure network settings (DHCP or static), as shown in
Figure 10:

Getting Started with Nano Server
[ 37 ]
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT5GVPGVYQTM
Click Next. You can proceed and select Create basic Nano Server image or Continue to
configure advanced settings. Advanced settings options are: add servicing update
packages, embed files and commands to run when setup completes, enable Emergency
Management Services, enable support for development scenarios, and debugging methods.

Getting Started with Nano Server
[ 38 ]
In this example, we will create a basic Nano Server image. When ready, click Create and the
image creation will start. In my case, the image creation completed in 2 minutes and 25
seconds, as shown in Figure 11, but this depends on your machine speed. As mentioned
earlier, you can also copy the PowerShell command and use it later to automate the image
creation process:
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT%TGCVKPI0CPQ5GTXGTKOCIGaNG

Getting Started with Nano Server
[ 39 ]
Customizing a Nano Server image using
DISM
DISM is the tool of choice for adding packages in online and offline modes. The following
example uses the offline version of DISM to add a package:
%JTN"EE1BDLBHF1BDLBHF1BUI=QBDLBHFT=QBDLBHF 
%JTN"EE1BDLBHF1BDLBHF1BUI=QBDLBHFT=FOVT=QBDLBHF 
For each package you want to add, you must run two DISM commands,
one for the package path in the 1BDLBHFT folder, as shown in Figure 3
earlier. But underneath that, you will find another folder called FO64 or
whatever localization you have bought from Microsoft. In my example
here, we are using FO64 for English-United States; GS#& is for French-
Belgium, and so on.
Customizing a Nano image using unattend.xml
file
To customize Nano Server using DISM so you can manage it remotely, you need to set an 
administrator password.
The simplest way is using an VOBUUFOEYNM file, as shown in the following example:
YNMWFSTJPO		FODPEJOH	VUG	 
VOBUUFOEYNMOTVSOTDIFNBTNJDSPTPGUDPNVOBUUFOE
YNMOTXDNIUUQTDIFNBTNJDSPTPGUDPN8.*$POGJH4UBUF
YNMOTYTJIUUQXXXXPSH9.-4DIFNBJOTUBODF 
TFUUJOHTQBTTPGGMJOF4FSWJDJOH 
DPNQPOFOUOBNF.JDSPTPGU8JOEPXT4IFMM4FUVQ
QSPDFTTPS"SDIJUFDUVSFBNEQVCMJD,FZ5PLFOCGBEF
MBOHVBHFOFVUSBMWFSTJPO4DPQFOPO4Y4 
$PNQVUFS/BNF /BOP4FSWFS$PNQVUFS/BNF 
DPNQPOFOU 
TFUUJOHT 
TFUUJOHTQBTTPPCF4ZTUFN 
DPNQPOFOUOBNF.JDSPTPGU8JOEPXT4IFMM4FUVQ
QSPDFTTPS"SDIJUFDUVSFBNEQVCMJD,FZ5PLFOCGBEF
MBOHVBHFOFVUSBMWFSTJPO4DPQFOPO4Y4 

Getting Started with Nano Server
[ 40 ]
6TFS"DDPVOUT 
"ENJOJTUSBUPS1BTTXPSE 
7BMVF 1BTTXSE7BMVF 
1MBJO5FYU USVF1MBJO5FYU 
"ENJOJTUSBUPS1BTTXPSE 
6TFS"DDPVOUT 
5JNF;POF 3PNBODF4UBOEBSE5JNF5JNF;POF 
DPNQPOFOU 
TFUUJOHT 
TFUUJOHTQBTTTQFDJBMJ[F 
DPNQPOFOUOBNF.JDSPTPGU8JOEPXT4IFMM4FUVQ
QSPDFTTPS"SDIJUFDUVSFBNEQVCMJD,FZ5PLFOCGBEF
MBOHVBHFOFVUSBMWFSTJPO4DPQFOPO4Y4 
3FHJTUFSFE0XOFS .Z5FBN3FHJTUFSFE0XOFS 
3FHJTUFSFE0SHBOJ[BUJPO .Z$PSQPSBUJPO3FHJTUFSFE0SHBOJ[BUJPO 
DPNQPOFOU 
TFUUJOHT 
VOBUUFOE 
In this sample, the VOBUUFOEYNM file does not add the Nano Server to a domain.
Therefore, you should use it if you want to run the Nano Server as a standalone machine or
if you want to wait and join it later to a domain. The values for $PNQVUFS/BNF and
"ENJOJTUSBUPS1BTTXPSE are merely examples.
Please note that by using VOBUUFOEYNM you can also include domain join
information. We will get into that in a bit.
The VOBUUFOEYNM file must be placed under the $=8JOEPXT=QBOUIFS folder in the
Nano Server image.
You can download a sample of VOBUUFOEYNM file for standalone and
domain joined as a companion to this book.

Getting Started with Nano Server
[ 41 ]
Injecting unattend.xml into VHD(X)
After creating the VOBUUFOEYNM file which includes your customized settings, we need to
inject it into the image.
To create a VHD(X) image, please refer to the Building and customizing a
Nano Server image Using Windows PowerShell and Building and customizing a
Nano Server image using Nano Server Image Builder sections covered earlier.
Injecting the VOBUUFOEYNM into a VHD(X) basically involves mounting the image first.
There are four steps involved to inject the VOBUUFOEYNM file, as follow:
Before we inject the VOBUUFOEYNM file, we should create a NPVOU directory.
1.
From an elevated command prompt, run the following command:
EJTN.PVOU*NBHF*NBHF'JMF=/BOP4FSWFSWIEY*OEFY
.PVOU%JS=NPVOUEJS
Please update the extension of the image VHD(X) according to the image created
earlier.
Apply the VOBUUFOEYNM file that you already created and customized by
2.
running the following command:
EJTNJNBHF=NPVOUEJS"QQMZ6OBUUFOE=VOBUUFOEYNM
Create a 1BOUIFS folder under $=8JOEPXT= (this folder is used by Windows
3.
systems for storing files during setup). Copy the VOBUUFOEYNM file to it using
the following two commands:
NE=NPVOUEJS=XJOEPXT=QBOUIFS
DPQZ=VOBUUFOEYNM=NPVOUEJS=XJOEPXT=QBOUIFS

Getting Started with Nano Server
[ 42 ]
What this does is basically, when the image is booting, the offline servicing section
of the VOBUUFOEYNM file will execute without any reboot. However, with
PPCF4ZTUFN and TQFDJBMJ[F, the content of those two sections of the
VOBUUFOEYNM will execute on boot, so as the Nano Server boots, they will
execute.
Unmount the VHD with DPNNJU which is very important to keep these changes
4.
by running the following command:
EJTN6ONPVOU*NBHF.PVOU%JS=NPVOUEJS$PNNJU
We would prefer to use Windows PowerShell that we covered earlier to create and
customize a Nano image using the Nano PowerShell module.
Optional customizations
There are other optional customizations that can be used with DISM to further customize
Nano Server for your environment, which include:
Set computer name
Run commands on first boot, for example, set a static IP address
Domain join
Enabling Emergency Management Services (EMS)
Installing agents and tools
We will get into each of the previous optional settings in more detail.
Set computer name
To set the computer name, the simplest way is with an VOBUUFOEYNM file, as shown in
Figure 12:

Getting Started with Nano Server
[ 43 ]
(KIWTG0CPQ5GTXGTEQORWVGTPCOGWPCVVGPFZON
You need to place VOBUUFOEYNM inside the $=8JOEPXT=1BOUIFS folder as discussed
earlier.
Run commands on first boot
4FUVQ$PNQMFUFDNE is a command file that, if found on boot by Windows under this
location ($=8JOEPXT=4FUVQ=4DSJQUT=), will be executed once and then never again,
even if it's still in the same location afterward.

Getting Started with Nano Server
[ 44 ]
In the following example, we are setting a static IP address using command prompt. The
trick here is that we are executing a PowerShell command by adding 1PXFS4IFMMFYF in
the DNE file. Because there is no PowerShell environment here, we follow this by adding 
DPNNBOE and everything after that is a single command placed between quotation marks.
It's very important for the command to be a single line, because every 1PXFS4IFMMFYF has
its own environment. Therefore, we put everything related to setting the static IP address
into one PowerShell command.
Create a 4FUVQ$PNQMFUFDNE file and copy the following command:
QPXFSTIFMMFYFDPNNBOE*NQPSU.PEVMF
$=XJOEPXT=TZTUFN=XJOEPXTQPXFSTIFMM=W=.PEVMFT=.JDSPTPGU1PXFS4IFMM6UJ
MJUZ=.JDSPTPGU1PXFS4IFMM6UJMJUZQTE*NQPSU.PEVMF
$=XJOEPXT=TZTUFN=8JOEPXT1PXFS4IFMM=W=.PEVMFT=/FU"EBQUFS=/FU"EBQUFSQT
EJGB
(FU/FU"EBQUFS/BNF&UIFSOFUJGBMJBTOFUTIJOUFSGBDFJQTFU
BEESFTTJGBTUBUJD
In the previous example, we imported the module that is responsible for the utility module
called (.JDSPTPGU1PXFS4IFMM6UJMJUZQTE), and then we imported another module
called /FU"EBQUFSQTE, because we are using (FU/FU"EBQUFS including the JGBMJBT
parameter. Then we specified OFUTIJOUFSGBDFJQ and finally, we set the static IP
address .
This is a very nice trick for setting once at Windows boot only.
Another command could be running a scheduling task, for example where you can create a
scheduling task and add it to the 4FUVQ$PNQMFUFDNE file as well, so it would be an
excellent idea to use any one-time operation that you want to setup on first boot with
4FUVQ$PNQMFUFDNE.
To copy 4FUVQ$PNQMFUFDNE into the Server VHD(X) image, you need to use the following
DISM commands:
From an elevated command prompt, run the following command:
EJTN.PVOU*NBHF*NBHF'JMF=/BOP4FSWFSWIEY*OEFY
.PVOU%JS=NPVOUEJS
Create the 4FUVQ and 4DSJQUT folders and then copy in the 4FUVQDPNQMFUFDNE file:
NE=NPVOUEJS=8JOEPXT=4FUVQ
NE=NPVOUEJS=8JOEPXT=4FUVQ=4DSJQUT
DPQZ=4FUVQ$PNQMFUFDNE=NPVOUEJS=8JOEPXT=4FUVQ=4DSJQUT

Getting Started with Nano Server
[ 45 ]
Finally, unmount the VHD(X) image by running the following command:
EJTN6ONPVOU*NBHF.PVOU%JS=NPVOUEJS$PNNJU
Domain join
You can also join Nano Server to a domain using the EKPJOFYF command line.
We have two ways of doing that:
The first option is a blob-based domain join. It means that you should generate a
blob from a domain joined machine located in the same domain, and then copy
that blob over to Nano Server. Then, apply that blob to the image in offline or
online mode.
To harvest a data blob from a domain machine that is already
running Windows Server 2016, from an elevated command
prompt, run the following command:
EKPJOFYFQSPWJTJPOEPNBJOEPNBJOOBNF NBDIJOF
NBDIJOFOBNF TBWFGJMF=PEKCMPC
Next, we need to copy that harvest data blob PEKCMPC  into the Nano Server
machine using PowerShell remoting, and then join it to the domain by running
the following command:
4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP4FSWFS $SFEFOUJBM
_="ENJOJTUSBUPS
$PQZ*UFN5P4FTTJPO4FTTJPO1BUI	$=PEKCMPC	%FTUJOBUJPO
$=3FDVSTF7FSCPTF
4FTTJPO]&OUFS144FTTJPO
EKPJOSFRVFTUPEKMPBEGJMF$=PEKCMPCXJOEPXTQBUID=XJOEPXT
MPDBMPT
TIVUEPXOSU
&YJU144FTTJPO

Getting Started with Nano Server
[ 46 ]
The second option is to generate a blob on a machine that is joined to the same
domain as well, and then open that CMPC file PEKCMPC  that you generated and
copy its content inside the VOBUUFOEYNM file under the "DDPVOU%BUB  section,
as shown in Figure 13. Then, use that VOBUUFOEYNM file to apply the domain join
on boot in the Nano Server image.
To harvest a data blob from a domain machine that is already
running Windows Server 2016, we need to use the same step as
described previously with EKPJOFYF command:
(KIWTG0CPQ5GTXGTFQOCKPLQKPWPCVVGPFZON
Add the contents of the PEKCMPC file to the VOBUUFOEYNM file
Inject the VOBUUFOEYNM file into the Nano Server image as discussed earlier
If you have multiple Nano Servers that you want to join to the domain,
you should generate one blob for each Nano machine, because the blob
has computer name information. If you specify a blob using the
VOBUUFOEYNM file as shown in Figure 13, you cannot specify a computer
name in the VOBUUFOEYNM file as well. This will contradict, as the blob
already holds the computer name when you are generating it from the
EKPJOFYF.

Getting Started with Nano Server
[ 47 ]
Emergency management services
Since things don't always go as we planned, Microsoft added Emergency Management
Services (EMS) to Nano Server.
Emergency Management Services (EMS) is a feature that offers remote management and
system recovery options when other server administrative options are not possible. It is also
needed for headless systems in which there is no GUI available, as in the case of Nano
Server.
The communication works through the System Administration Channel (SAC) feature of
Windows Server. The SAC channel offers several administrative features, such as enabling a
Windows DNEFYF channel for Windows CLI access, listing processes running on the
system, obtaining IP address information, retrieving server hardware information, and
rebooting the server, to name just a few. Another important feature of the SAC channel is
the ability to watch the boot and install progress of the server. See the TechNet article on
EMS and SAC at UFDIOFUNJDSPTPGUDPNFOVTMJCSBSZDD
WXTBTQY for 
more information.
PuTTY is one of the tools that can be used in this case. The good news is that network and
server vendors such as HPE and Dell EMC sometimes use redirect. So, they use EMS over
TCP/IP to redirect serial ports to the network card called Virtual Serial Port (VSP). Thus, if
you have a baseboard management port in your server, such as ILO or iDRAC, you can
access a Nano Server machine over EMS in this way.
See $IBQUFS, Troubleshooting Nano Server, for a walkthrough example that uses Windows
EMS to manage HPE ProLiant servers.
If you want to use EMS, you can enable it in your boot configuration using CDFEJU. You can
set EMS to on and then specify the port that you will communicate on, followed by the
&.4#"6%3"5& as well, which typically is .
From an elevated command prompt, run the following:
CDEFEJUFNT\(6*%GPS/BOP4FSWFSCPPUPQUJPO^0/
CDEFEJUFNTTFUUJOHT&.41035QPSU &.4#"6%3"5&

Getting Started with Nano Server
[ 48 ]
Installing agents and tools
Microsoft does not support MSI in Nano Server. There is a reason for this. Firstly, MSI is
built primarily for local installation, so remote installation can be problematic. Secondly,
when you uninstall software that was installed using MSI, there is never a guarantee that
everything will be cleaned up after the process is completed. A complete uninstall means all
the registry entries they have and all the files that we ever put on disk should have been
cleaned up. This has never been a guarantee with MSI in the past. Thirdly, MSI is being
used to create custom scripts. In other words, people who use the feature to merely write
scripts and deploy them to their system make things even worse when they come back and
uninstall things afterward. All of this jeopardizes the reliability and stability of the system.
With these drawbacks and the fact that MSI relies on a large chunk of .NET Framework
which is not supported on Nano Server, Microsoft made the conscious decision to not
include MSI support in Nano Server. Instead, they created a new installer based on
xFormat. It is the format used by the Windows Store for all Windows Store apps, whether 
modern or legacy, and the Windows Server App (WSA) installer, which is not just for
Nano Server but for all Windows Server 2016. WSA is important as it is the officially
supported Server Installer going forward and is the only installer available on Nano Server.
WSA promises a complete and clean uninstall and never leaves the system in an unreliable
or unstable state.
With WSA, you can package apps so that you have a declarative, intent-based installer.
Examples of the tools and agents that can be installed using the new xFormat installer
include System Center Virtual Machine Manager, System Center Operations Manager, and
System Center Configuration Manager. These agents, whether they're Microsoft or non-
Microsoft, and all the ISV vendors who are writing antivirus software, database software
and so on, will use the new installer to install their tools and apps on it. Since it's a headless
environment, the tool could be fully remoteable, in which case you can use everything you
want either through PowerShell remoting or through a GUI outside, but it will run against
the Nano Server as a server.

Getting Started with Nano Server
[ 49 ]
Summary
In this chapter, we discussed how to get started with Nano Server, covering how to add
roles and features, and how you can create and customize a Nano image using a single line
of PowerShell. We also discussed how to build and customize a Nano image using Nano
Server image builder, the new GUI-based wizard, and finally we showed you how to
customize a Nano image using the DISM tool.
Continue now to $IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical
Hardware, to learn more about how to deploy Nano Server in your environment.

3
Deploying Nano Server in a
Virtual Machine and on Physical
Hardware
In $IBQUFS, Getting Started with Nano Server, we talked about how to get started with
Nano Server and explored all the requirements to create and customize a Nano Server
image using Windows PowerShell, Nano Server image builder, and the DISM tool.
In this chapter, we will deploy Nano Server and cover the following topics:
Nano Server roles and features
Deploying Nano Server in a virtual machine
Deploying Nano Server on a physical machine
Deploying Nano Server in Microsoft Azure
Nano Server roles and features
In this section, we will dive deeply into covering all the roles and features that are part of
Nano Server in Windows Server 2016. In the table, you can see the various roles and
features, and the deployment type (physical or virtual machine), including a short
description that will help you to choose the right role for your environment:

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 51 ]

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 52 ]
Following is the description for each role:
$PNQVUF1BDLBHF: It is the Hyper-V role which is applicable primarily for
physical machines, however starting with Windows Server 2016 and Windows 10
build 10565 and later, Microsoft introduced Nested Virtualization where you can
leverage this feature and host Nano Server with the compute role in a virtual
machine.
'BJMPWFS$MVTUFS1BDLBHF: It is a straightforward role. It can be used with
Hyper-V or with file servers. The cluster role works either if Nano Server is
hosted in a VM or on a physical machine.
4UPSBHF1BDLBHF: It will add the necessary file server services and other
storage components, such as scale-out File Servers, storage spaces direct, and
storage replica.
This package is only available for the datacenter edition of Nano
Server. However, the Storage and failover clustering packages contain
all the storage features in this first release. If you install failover
clustering you'll have Storage Spaces Direct, but you won't be able to
use it in the Standard edition as it calls licensing APIs and will not run,
you'll only be able to use traditional clustering.
Containers-Package: It will add the container role to turn Nano Server into a
container host. Thus, you can start deploying Windows Server containers and
Hyper-V Containers on top of Nano Server. For more information about
Windows Server and Hyper-V containers, see $IBQUFS, Running Windows Server
Containers and Hyper-V Containers on Nano Server.
DNS-Package: It will add the DNS server on top of Nano Server. The DNS can
run both on a physical and a virtual machine. However, there are some catches,
which we will cover in $IBQUFS, Running Other Workloads on the Nano Server.
IIS-Package: It will add the necessary binaries to run IIS and certain features of
that service. The IIS role can also run on a physical and a virtual machine.
However, not all features are supported. See $IBQUFS, Running Other
Workloads on the Nano Server, for more information.
Defender-Package: It is the Antivirus and the optional threat protection package
that works in a VM or on a physical machine. See $IBQUFS, Running Other
Workloads on the Nano Server, for more information.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 53 ]
OEM-Drivers-Package: It is a collection of all the inbox drivers that Microsoft
shipped with Server Core 2016, it makes testing Nano Server a lot easier, of
course for optimization you would absolutely want to just pick the drivers that
you need for Nano Server and nothing more, but this is a convenience feature
more than anything else, which contains most of the common hardware drivers
that used to ship with Server Core for use on physical machines with Nano
installations.
SCVMM-Package: System Center Virtual Machine Manager (SCVMM) works
on both physical and virtual machines, the VMM agent can be added into the
Nano Server image to help manage, monitor, and deploy VM templates. Please
note that System Center Operations Manager (SCOM) is also supported on
Nano Server. However, the SCOM agent is deployed in a different way. See
$IBQUFS, Deploying, Managing, and Monitoring Nano Server with System Center
2016 for more information.
DSC-Package: It works on both physical and virtual machines, the PowerShell
Desired State Configuration (DSC) tool makes it possible to apply a
configuration to a Nano Server, for example by using a single script you can
adapt to simultaneously configure large numbers of Nano Servers.
DCB-Package: Datacenter Bridging (DCB) provides hardware-based bandwidth 
allocation to a specific type of network traffic and enhances Ethernet transport
reliability with the use of priority-based flow control. Hardware-based
bandwidth allocation is essential if traffic bypasses the operating system and is
offloaded to a converged network adapter. DCB is supported over Internet Small
Computer System Interface (ISCSI), Remote Direct Memory Access (RDMA),
over converged Ethernet (RoCE), or Fiber Channel over Ethernet (FCoE).
Priority-based flow control is essential if the upper layer protocol, such as Fiber
Channel, assumes a lossless underlying transport. It is very important to enable
DCB with RDMA over Converged Ethernet. In this way, if you are using Nano
Server as a storage fabric, the storage traffic will have the right priority,
preventing packet loss.
The shielded VM-Package: It is the host guardian that provides everything
necessary to provision shielded virtual machines. Note that this package is only
available in the datacenter edition of Nano Server.
Secure startup-Package: It includes support for BitLocker, Trusted Platform
Module (TPM), volume encryption, platform identification, cryptography
providers, and other functionality related to secure startup which is a
prerequisite for Shielded VMs.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 54 ]
Software inventory logging-Package: It is a feature that helps server
administrators to retrieve a list of the Microsoft software installed on their
servers. Note that the Software Inventory Logging (SIL) package in Nano Server
is agent only, not the aggregator. More information can be found here: IUUQTU
FDIOFUNJDSPTPGUDPNFOVTMJCSBSZEO
WXTBTQY.
There are some additional roles and features that don't come in a package, but are certainly
important, such as MPIO, NIC teaming, and using an SSH provider.
Deploying Nano Server in a VM
Before we deploy Nano Server in a virtual machine, we need to create a Nano Server image.
You can do this using PowerShell or using Nano Server image builder. In this chapter, we
will use Windows PowerShell. For a more thorough explanation of deployment and 
configuration options for Nano Server, see $IBQUFS, Getting Started with Nano Server.
First, you need to have a Windows Server 2016 or Windows 10 machine. Upon doing so,
you'll have to create a folder on the machine that you can use to store the items to be used
for the Nano Server creation process. For instance, you might create a folder named
$=/BOP4FSWFS. After creating this folder, there are four resources you must have saved to
that folder. These resources are:
/BOP4FSWFS*NBHF(FOFSBUPS1PXFS4IFMM module
$POWFSU8JOEPXT*NBHFQT script
/BOP4FSWFSXJN file
Windows Server 2016 ISO file
In fact, all these resources are included in Windows Server 2016 ISO media in the
/BOP4FSWFS folder, you can mount the ISO image and copy the required components, then
verify all are in the correct folder.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 55 ]
Next, open Windows PowerShell and import the /BOP4FSWFS*NBHF(FOFSBUPSQTE
module using the following command (see Figure 1):
Import-Module "C:\NanoServer\
NanoServerImageGenerator\NanoServerImageGenerator.psd1" -Verbose
(KIWTG+ORQTV0CPQ5GTXGT2QYGT5JGNNOQFWNG
When doing so, you can start creating the image using the /FX/BOP4FSWFS*NBHF cmdlet,
but you must specify a few parameters to use within the Nano Server that you are creating.
These parameters are divided into required and optional.
Required parameters
.FEJB1BUI: The root of the DVD drive contains the mounted ISO file that you
are using.
#BTF1BUI: The base path is a local folder on your machine that you specify
where the command will keep a copy of the required Nano Server files and
packages. This is very helpful, so next time you run /FX/BOP4FSWFS*NBHF, you
no longer have to specify the .FEJB1BUI and instead you can just specify the
#BTF1BUI and avoid the time of the copy operation.
5BSHFU1BUI: The target path is the path where you want to save your specialized
Nano Server image, so that could be a folder where you actually keep, for
example, your 7)%
9/8*. files, you can name them anything that is descriptive.
If you are creating a 7)%
9 image, you need to make sure that you specify the
extension you want to use, 7)%9 or 7)%, more on this later.
"ENJOJTUSBUPS1BTTXPSE: The password to be used for the built-in local
Administrator account.
%FQMPZNFOU5ZQF: This will be (VFTU or )PTU, depending on whether you want
to deploy a virtual machine or physical Nano Server.
&EJUJPO: This parameter helps you to choose between standard or datacenter
edition.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 56 ]
Optional parameters
$PNQVUFS/BNF: The Nano Server computer name, this is going to be the machine
name of either the VM or physical machine.
1BDLBHF: The packages parameter supports a comma separated list of all
packages that you wish to install into the Nano Server. You can find a list of
available packages on the mounted ISO image in the /BOP4FSWFS\1BDLBHFT
folder.
*OUFSGBDF/BNF0S*OEFY: The alias name of the Ethernet adapter inside Nano
Server. The first NIC adapter will always be named Ethernet.
*1W"EESFTT: This sets the given IPv4 static address that you want to assign on
the interface specified by the *OUFSGBDF/BNF0S*OEFY parameter.
*1W4VCOFU.BTL: This sets the given IPv4 subnet mask that you want to assign
on the interface specified by the *OUFSGBDF/BNF0S*OEFY parameter.
*1W%OT: This sets the given IPv4 DNS Server (can be multiple DNS servers) on
the interface specified by the *OUFSGBDF/BNF0S*OEFY parameter.
*1W(BUFXBZ: This sets the given IPv4 default gateway that you want to assign
on the interface specified by the *OUFSGBDF/BNF0S*OEFY parameter.
*1W"EESFTT: This sets the given IPv6 static address that you want to assign on
the interface specified by the *OUFSGBDF/BNF0S*OEFY parameter.
*1W%OT: This sets the given IPv6 DNS Server on the interface specified by the
*OUFSGBDF/BNF0S*OEFY parameter.
%PNBJO/BNF: The domain name that Nano Server will be a member of.
3FVTF%PNBJO/PEF: When joining a domain, reuse a node with the same name if
it exists already in the domain.
%PNBJO#MPC1BUI: This parameter lets you join the image to the domain as
specified in the given domain blob. For more information, see the domain join in
this chapter.
4UPSBHF: This parameter will add the storage package.
$PNQVUF: This parameter will add the Hyper-V role.
%FGFOEFS: This parameter will add the anti-malware package.
$MVTUFSJOH: This parameter will add the failover clustering role.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 57 ]
$POUBJOFST: This allows you to add the containers role. See $IBQUFS, Running
Windows Server Containers and Hyper-V Containers on Nano Server for more
information.
0&.%SJWFST: This is used to add the OEM Drivers package useful for physical
machine deployment. Those drivers are the same set of drivers that exist in
Server Core.
%SJWFS1BUI: If you need additional drivers or a specific set of drivers, you can
add them with this parameter. This is useful when you are deploying Nano
Server to a bare-metal machine. The drivers can be obtained from your favorite
OEM vendor. The path should contain the drivers in JOG format.
The drivers need to be signed otherwise the command will fail.
$PQZ1BU: This parameter specifies the additional EJSFDUPSZ path on the
computer where you create the image. This directory including the files in it will
be added to the SPPU of the Nano Server image.
-PH1BUI: This sets the location where you want to save the logs created while
building the image. The default path is the current folder from where you are
creating the image (that is, $=/BOP4FSWFS=-PHT).
.BY4J[F: If you need larger images, you can supply - .BY4J[F to create a larger,
dynamically expanding VHD(X). If you don't use this parameter, the default disk
size is 4 GB.
0GGMJOF4DSJQU"SHVNFOU: This accepts a hash table of arguments when you
want to add a customer script.
0GGMJOF4DSJQU1BUI: This accepts an array of paths to PowerShell scripts, with
the possibility to pass arguments through the 0GGMJOF4DSJQU"SHVNFOU
parameter.
&OBCMF3FNPUF.BOBHFNFOU1PSU: This parameter will open port  for
inbound TCP traffic to connect and manage Nano Server using WinRM from a
different subnet.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 58 ]
&OBCMF&.4: This enables Emergency Management Services (EMS) and BootEMS
on the image. See $IBQUFS, Running Other Workloads on the Nano Server, for 
more information.
&.41PSU: This is the port on which to enable the EMS. The default is .
&.4#BVE3BUF: This is the baud rate to use for EMS. The default is  bps.
%FCVH.FUIPE: With this parameter, you will enable kernel debugging on the
target Nano image with the specified method. You can use a Serial Port, TCP/IP
network, Firewire or USB. See $IBQUFS, Running Other Workloads on the Nano
Server, for more information.
%FWFMPQNFOU: This is used to perform tests on Nano Server, which allows
unsigned drivers, copy debugger binaries, and more. Not used in production.
4FSWJDJOH1BDLBHF1BUI: This parameter helps you to add servicing stack and
cumulative updates that you download from the Microsoft Update catalog
(multiple packages are possible).
4FUVQ$PNQMFUF command : With this parameter, you can add custom
commands as part of TFUVQDPNQMFUFDNE. See $IBQUFS, Getting Started with
Nano Server, Customizing a Nano Server Image Using section DISM for more
information.
6OBUUFOE1BUI: With this parameter, you can add the location of your own,
custom, VOBUUFOEYNM file. See $IBQUFS, Getting Started with Nano Server,
Customizing a Nano Server Image Using DISM section for more information.
*OUFSOBM: This is something specific for Microsoft, and not to be used in
production.
4FUVQ6*: This parameter is about same way as with the 1BDLBHF parameter.
This is used internally by the Nano Server image builder, and the recommended
method is still to use the 1BDLBHF parameter covered earlier. See $IBQUFS,
Getting Started with Nano Server, Building and customizing a Nano Server image using
Nano Server image builder section for more information.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 59 ]
Upon completing these procedures, you've created the Nano Server image VHDX ready to
be deployed on Hyper-V (see Figure 2):
(KIWTG6JG0CPQ5GTXGT8*&ETGCVGFYKVJVJGUETKRV
Once the 7)%9 file is created, you can simply copy the 7)%9 file to Hyper-V server and
create a new virtual machine. Please note that the VM must be a generation 2 VM 7)%9
image means generation 2 in this case for Nano Server and VHD means generation 1.
However, this rule does not apply for Server with Desktop Experience and Server Core,
VHDX can be generation 1 or generation 2.
Deploying Nano Server VM in Hyper-V
In this section, we will deploy Nano Server in a virtual machine. In order to do so, you have
two options, either you can use Hyper-V Manager or PowerShell, we will cover both
options.
Hyper-V Manager
Launch Hyper-V Manager and navigate to New|Virtual Machine.
1.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 60 ]
In the New Virtual Machine Wizard, choose a name, for example
2.
/BOP4FSWFS7. (see Figure 3):
(KIWTG6JG0CPQ5GTXGT8/ETGCVKQPYKVJ*[RGT8/CPCIGT

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 61 ]
Make sure you choose Generation 2 virtual machine; this is very important (see
3.
Figure 4):
(KIWTG6JG0CPQ5GTXGTIGPGTCVKQP8/ETGCVKQPYKVJ*[RGT8/CPCIGT

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 62 ]
Next, assign the amount of startup memory for this VM (see Figure 5):
4.
(KIWTG#UUKIP5VCTVWROGOQT[HQT0CPQ5GTXGT8/YKVJ*[RGT8/CPCIGT

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 63 ]
Next, connect Nano Server VM to the appropriate virtual switch (see Figure 6):
5.
(KIWTG%QPPGEV0CPQ5GTXGT8/VQVJGXKTVWCNUYKVEJYKVJ*[RGT8/CPCIGT

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 64 ]
Next, attach the Nano Server VHD(X) image file which we created earlier (see
6.
Figure 7):
(KIWTG#VVCEJ0CPQ5GTXGT8*&:YKVJ*[RGT8/CPCIGT
Click Next|Finish.
7.
Connect to the virtual machine using Hyper-V Manager and click Start.
8.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 65 ]
Wait a couple of seconds and you will see the Nano recovery console (see Figure
9.
8):
(KIWTG0CPQ5GTXGTNQIKPUETGGPKP*[RGT8/CPCIGT

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 66 ]
Enter the administrator password you specified when creating the image, and
10.
press Enter to log onto Nano Server (see Figure 9):
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNG
The recovery console will open showing you basic information, you can use the
11.
IP address assigned to start managing Nano Server remotely using Windows
PowerShell, more on this in $IBQUFS, Managing Nano Server with Windows
PowerShell and Windows PowerShell DSC .
See also $IBQUFS, Troubleshooting Nano Server, for more information about the recovery
console.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 67 ]
PowerShell
We strongly encourage you to use PowerShell if you are not doing so already, please
remember Nano Server has been optimized for large deployment whether on-premises or in
the public cloud, you will soon find out it's more convenient to use PowerShell instead of
clicking next, or finish.
In this step, we will create a Nano Server VM using Windows PowerShell. First, we need to
define some variables:
7BSJBCMFT
W4XJUDI/BNF/"5@W4XJUDI
*OTUBMM3PPU$=/BOP4FSWFS
7./BNF/BOP4FSWFS7.
/BOP4FSWFS*NBHF$=/BOP4FSWFS=/BOP4FSWFS7.WIEY
$SFBUFBOFX7)%
9GJMF
/FX7)%1BUI
*OTUBMM3PPU=7./BNF=/BOP4FSWFS7.@%WIEY
4J[F#ZUFT(#%ZOBNJD]0VU/VMM
$SFBUF/BOP4FSWFS7.
/FX7.7)%1BUI/BOP4FSWFS*NBHF(FOFSBUJPO.FNPSZ4UBSUVQ#ZUFT(#
/BNF7./BNF1BUI*OTUBMM3PPU4XJUDI/BNFW4XJUDI/BNF]0VU/VMM
4FUW$16DPVOUUP
4FU7.1SPDFTTPS7./BNF7./BNF$PVOU
4FU"VUPNBUJD4UPQ"DUJPOBOE"VUPNBUJD4UBSU"DUJPO
4FU7.7./BNF7./BNF"VUPNBUJD4UPQ"DUJPO4IVU%PXO
"VUPNBUJD4UBSU"DUJPO4UBSU*G3VOOJOH
3FOBNFW/*$"EBQUFSOBNFUP.(.5
3FOBNF7./FUXPSL"EBQUFS7./BNF7./BNF/FX/BNF.(.5
4FUW/*$%FWJDF/BNJOHUP0O
4FU7./FUXPSL"EBQUFS7./BNF7./BNF/BNF.(.5%FWJDF/BNJOH0O
"EEBEEJUJPOBM4$4*$POUSPMMFSBOEBUUBDIUIFOFX7)%
9
"EE7.4DTJ$POUSPMMFS7./BNF7./BNF
"EE7.)BSE%JTL%SJWF7./BNF7./BNF$POUSPMMFS5ZQF4$4*
$POUSPMMFS/VNCFS$POUSPMMFS-PDBUJPO1BUI
*OTUBMM3PPU
=7./BNF=/BOP4FSWFS7.@%WIEY
4UBSU/BOP4FSWFS7.
4UBSU7./BNF7./BNF]0VU/VMM
(FU7./BNF7./BNF

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 68 ]
Upon running this script, you've created and hosted a new Nano Server VM on Hyper-V in
just a couple of seconds (see Figure 10):
(KIWTG%TGCVG0CPQ5GTXGT8/WUKPI2QYGT5JGNN
All scripts provided in this chapter are accompanied with this book.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 69 ]
Deploying Nano Server on a physical
machine
There are actually a few ways to deploy Nano Server to a physical bare-metal machine, you
can use one of the following options. Deploying Nano Server on a physical machine:
Dual-boot a Nano Server VHD or VHD(X).
PxE-boot a bare-metal machine and install Nano Server from WDS using a VHD
or VHD(X).
PxE-boot a bare-metal machine and install Nano Server from WDS using a WIM
file.
Booting a bare-metal machine into WinPE and deploying Nano Server using a
WIM file.
Regardless of the deployment method used, the default Nano Server image that ships with
Windows Server 2016 requires customization. Customizations include adding Nano Server
packages based on the role the server will play in the environment, the addition of boot
critical drivers, and an 6OBUUFOEYNM file to complete the setup. This chapter covers the
most common deployment scenarios.
Dual-boot a Nano Server VHD or VHD(X)
The easiest way to have multiple Windows versions available on the same machine is to
place some of them into VHD(X)s, and then you can boot an OS directly from a VHD(X).
This way of deployment is assuming that you already have a physical machine with
existing Windows OS installed, it's not a bare-metal deployment, we will get into that in a
bit.
To quickly deploy Nano Server on a physical computer, you need to have a generalized
Nano Server VHD or VHDX image ready.
We will create a new VHDX image using PowerShell; The computer name will be /"/0
)7. The deployment type is )PTU for physical machine, we will have the OEM drivers
installed for most common hardware including the drivers provided by the hardware
vendor by using the %SJWFS1BUI parameter. We will add .JDSPTPGU/BOP4FSWFS
4FDVSF4UBSUVQ1BDLBHF for UEFI boot. We will add the compute package for Hyper-V,
as well as clustering, storage features, and enabling Remote Management across subnets.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 70 ]
Open Windows PowerShell as administrator and run the following command:
*NQPSU/BOP4FSWFS*NBHF(FOFSBUPSQTE1PXFS4IFMMNPEVMF
*NQPSU.PEVMF
$=/BOP4FSWFS=/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSBUPSQTE
7FSCPTF
&OUFS"ENJOJTUSBUPS1BTTXPSE
1BTTXPSE3FBE)PTU1SPNQU1MFBTFTQFDJGZMPDBM"ENJOJTUSBUPS
QBTTXPSE"T4FDVSF4USJOH
4FSWJDJOH6QEBUF1BDLBHFT
4FSWJDJOH1BDLBHF!
$=/BOP4FSWFS=6QEBUFT=8JOEPXT,#YDBC
$=/BOP4FSWFS=6QEBUFT=8JOEPXT,#YDBC

$SFBUF/FX/BOP4FSWFS*NBHF
/FX/BOP4FSWFS*NBHF#BTF1BUI$=/BOP4FSWFS=A
5BSHFU1BUI$=/BOP4FSWFS=/BOP4FSWFSWIEYA
$PNQVUFS/BNF/"/0)7A
"ENJOJTUSBUPS1BTTXPSE1BTTXPSEA
%FQMPZNFOU5ZQF)PTUA
&EJUJPO%BUBDFOUFSA
0&.%SJWFSTA
%SJWFS1BUI$=/BOP4FSWFS=)1&%SJWFSTA
$PNQVUFA
$MVTUFSJOHA
4UPSBHFA
1BDLBHF.JDSPTPGU/BOP4FSWFS4FDVSF4UBSUVQ1BDLBHFA
&OBCMF3FNPUF.BOBHFNFOU1PSUA
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHFA
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYFT8&VSPQF4UBOEBSE5JNF	
If the physical server uses BIOS instead of UEFI, then make sure to change
/BOP4FSWFSWIEY to /BOP4FSWFSWIE and remove .JDSPTPGU
/BOP4FSWFS4FDVSF4UBSUVQ1BDLBHF.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 71 ]
If you noticed in the script above, we eliminated the .FEJB1BUI parameter and just used
the #BTF1BUI, this will save us two steps. The first one is copying from the ISO image to
the local folder, and the second one is converting the WIM image to VHD because we did
that in the previous section, and since the physical computer in this example does support
UEFI, we created the image as VHDX.
Copy the VHDX that this script creates to the physical computer, either manually
1.
or with PowerShell. In this example, we will use the new feature which was
introduced in PowerShell V5.0 (copying files from one machine to another
through 5P4FTTJPO and 'SPN4FTTJPO parameters). Please note that Windows
Management Framework (WMF) version 5.0 is required to be installed on the
target machine if it's running an OS earlier than Windows Server 2016 or
Windows 10 for the following command to work (see Figure 11):
Log in as an administrator on the physical server where you want to run the
2.
Nano Server:
JQ
T/FX144FTTJPO$PNQVUFS/BNFJQ$SFEFOUJBM
_="ENJOJTUSBUPS
$PQZ*UFN5P4FTTJPOT1BUI=/BOP4FSWFSWIEY%FTUJOBUJPO
D=
(KIWTG%QR[KPI0CPQ5GTXGTKOCIGWUKPI2QYGT5JGNN

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 72 ]
Configure the physical machine to boot from this new VHDX. To do that, follow
3.
these steps:
We need to add an entry to the boot database using CDECPPU, but
1.
before we add this entry, let's look at the current boot database by
running bcdedit (see Figure 12):
(KIWTG$EFGFKVQWVRWVQPRJ[UKECNOCEJKPG
As you can see, we have a single entry as identifier called \DVSSFOU^.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 73 ]
Next, we need to add a new entry to the BCD store, so in addition to
2.
the current operating system, which in this example is listed as
Windows Server 2016, we would like to add another boot entry. In
order to do that we need to use the CDECPPU command.
On the target server, mount the VHDX that we copied in an earlier
3.
step, and configure it to boot from this new VHDX. To do that, follow
these steps:
/BOP4FSWFS7)%*NBHF
/BOP*NBHF$=/BOP4FSWFSWIEY
.PVOUUIF7)%*NBHF
.PVOU%JTL*NBHF/BOP*NBHF7FSCPTF
(FUUIF%SJWF-FUUFSPGUIF7)%JNBHF

(FU%JTL*NBHFb*NBHF1BUI/BOP*NBHF](FU%JTL]
(FU1BSUJUJPO](FU7PMVNF%SJWF-FUUFS
In this example, the VHDX is mounded on the &=ESJWF as shown in Figure 13:
(KIWTG/QWPV0CPQ5GTXGT8*&:KOCIGQPRJ[UKECNOCEJKPG
Run CDECPPUF=XJOEPXTW.
4.
If CDECPPUFYF worked correctly, you should see the following message:
#PPUGJMFTTVDDFTTGVMMZDSFBUFE
Dismount the VHDX by running: %JTNPVOU%JTL*NBHF/BOP*NBHF verify
5.
the new boot entry in the BCD store by running CDEFEJUFYF. You should see a
new Windows boot loader entry with the device setting pointing to Nano Server
VHD(X) file. In our example, WIE<$>=/BOP4FSWFSWIEY.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 74 ]
As you can see in Figure 14, CDECPPU has updated all boot files (such as
6.
CPPUNHS), and took the bcd template from the Nano image you want to boot
from, stamped it into the BCD store, and updated the device paths. Now, you
will know for sure that the path is correct, the entry is correct, and the binaries
have supported versions:
(KIWTG0CPQ5GTXGT8*&:$QQVNQCFGT$%&5VQTG

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 75 ]
You could possibly accomplish something similar with the CDEFEJU
command, but with CDEFEJU you would need to manually set the VHD path,
which is easy to get wrong. If you are not careful while copying different
entries, you will end up booting the OS with an incorrect boot configuration.
On top of that, CDEFEJU will not update the binaries, which could result in an
unsupported configuration. As best practice, please use CDECPPU.
Since we already have Windows Server 2016 installed on the same physical
7.
machine, we now have two entries with the same name in Windows boot
manager (Windows Server 2016). However, CDECPPU set Nano Server as default
boot. You can easily change the description by running the following command:
bcdedit.exe /set "{default}" description "Windows Nano Server
2016
You could also enable the EMS in the new boot entry. See $IBQUFS,
8.
Troubleshooting Nano Server, for more information. Assuming the identifier string
of the newly added boot loader is \EFGBVMU^, run the following commands:
bcdedit.exe /set "{default}" bootems on
bcdedit.exe /set "{default}" ems on
You can verify the boot entry in the BCD store again by running, CDEFEJUFYF
9.
(see Figure 15):
(KIWTG0CPQ5GTXGT8*&:$QQVNQCFGT$%&5VQTG

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 76 ]
Reboot the physical machine now. You should see two boot entries. The Nano
10.
Server image should appear first in the Windows Boot Manager as 8JOEPXT
/BOP4FSWFS<&.4&OBCMFE> (see Figure 16):
(KIWTG0CPQ5GTXGTDQQVRTQEGUUQPRJ[UKECNOCEJKPG
Wait for a couple of seconds until Nano Server boots and then log onto the
11.
recovery console, as shown in Figure 17 using the user name (in this case:
"ENJOJTUSBUPS) and the password you supplied while creating the Nano Server
image.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 77 ]
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGNQIKPUETGGP
In our example here, we have DHCP server deployed on the network. You can
12.
get the IP address and use PowerShell remoting to connect to and start managing
the physical Nano machine (see Figure 18), more on this in $IBQUFS, Managing
Nano Server with Windows PowerShell and Windows PowerShell DSC.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 78 ]
You can also manage Nano Server from different network subnets, as a
requirement, the remote management port switch was enabled as part of
creating the image.
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNG0GVYQTMCFCRVGTUGVVKPIU
PxE-boot a bare-metal machine and install Nano
Server from WDS using a VHD, VHD(X), or WIM
file
Deploying Nano Server using WDS can be accomplished using a Nano Server image in
VHD, VHD(X), or WIM format that contains customizations including Nano Server
packages and drivers, prior to adding the image to the WDS server.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 79 ]
This section describes using Microsoft WDS to perform a bare-metal deployment of Nano
Server. For instructions on how to create and modify a VHD image, please refer to the
section titled Creating a custom Nano Server VHD(X) image and for instructions on how to
create and modify WIM files, please refer to the section titled Creating a custom Nano Server
WIM image. The Nano Server WIM, VHD, or VHDX file can be added to the WDS server
using the same steps described here.
In this section, we will configure the WDS environment for automated deployments using
two VOBUUFOEYNM files. The first one is for automating the WinPE phase of setup using a
client VOBUUFOEYNM file. The second one is automating the remainder of the deployment
using an image VOBUUFOEYNM file. This section covers both files.
Preparing the environment
But before we get to building the actual deployment, we need to install all the pre-
requisites:
Active Directory Domain Services (ADDS, DNS, DHCP)
1.
Prepare the Nano Server VHD Image
2.
Install and configure the WDS Role
3.
In addition to the components listed above, the following components are also required for
a successful deployment and management of Nano Server:
Microsoft Windows Server 2016 ISO Media
Windows 10 assessment and deployment kit
Required hardware drivers from the OEM vendor
The ADK contains deployment tools such as the Deployment Imaging Servicing and
Management (DISM) command-line tool, DISM PowerShell cmdlets, Windows System
Image Manager (SIM), and so on. Windows SIM is a GUI-based utility used to create and
modify VOBUUFOEYNM files. The ADK is as a free download from the Microsoft download
site. Windows PowerShell or DISM is required to perform offline image customization such
as adding Windows features and for platform driver injection.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 80 ]
ADK 10 provides support for Windows 10 and Windows Server 2016 image and is available
for download at IUUQHPNJDSPTPGUDPNGXMJOLQ-JOL*E.
Previous versions of the ADK are not compatible with Nano Server.
Active Directory Domain Services (ADDS, DNS, DHCP)
This chapter assumes the reader is familiar with Active Directory, DNS and DHCP. we
don't have to cover how to install AD, DHCP and DNS. For more information, consult the
Active Directory Domain Services guide at IUUQTUFDIOFUNJDSPTPGUDPNFOVTMJCS
BSZEEBTQY, the DNS at IUUQTUFDIOFUNJDSPTPGUDPNFOVTMJCSBSZDD

WXTBTQYand the dynamic host configuration protocol at IUUQTUFDIOFUN
JDSPTPGUDPNFOVTMJCSBSZEE
WXTBTQY.
Creating a custom Nano Server VHD(X) image
We will create a new VHD image using PowerShell; The computer name will be /"/0
)7, we will have the OEM drivers and custom drivers added to the image using (
%SJWFS1BUI) parameter for physical machines deployment, we will add the compute role
for Hyper-V, as well as clustering, storage feature, and enable remote management port,
and finally we will add it to the domain.
You need to run this script from a computer running Windows Server 2016 or Windows 10
that is already a domain joined to the same domain, thus the computer account for Nano
Server will be created in Active Directory. This process is known as offline domain join:
*NQPSU/BOP4FSWFS*NBHF(FOFSBUPSQTE1PXFS4IFMMNPEVMF*NQPSU
.PEVMF$=/BOP4FSWFS=/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSBUPS
QTE7FSCPTF&OUFS"ENJOJTUSBUPS1BTTXPSE1BTTXPSE3FBE)PTU
1SPNQU1MFBTFTQFDJGZMPDBM"ENJOJTUSBUPSQBTTXPSE"T4FDVSF4USJOH
4FSWJDJOH6QEBUF1BDLBHFT4FSWJDJOH1BDLBHF!
$=/BOP4FSWFS=6QEBUFT=8JOEPXT,#YDBC
$=/BOP4FSWFS=6QEBUFT=8JOEPXT,#YDBC$SFBUF/FX
/BOP4FSWFS*NBHF/FX/BOP4FSWFS*NBHF#BTF1BUI$=/BOP4FSWFS=A
5BSHFU1BUI$=/BOP4FSWFS=/"/0)7WIEA
$PNQVUFS/BNF/"/0)7A
"ENJOJTUSBUPS1BTTXPSE1BTTXPSEA
%FQMPZNFOU5ZQF)PTUA
&EJUJPO%BUBDFOUFSA
%PNBJO/BNF7*35-"#A

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 81 ]
0&.%SJWFSTA
%SJWFS1BUI$=/BOP4FSWFS=)1&%SJWFSTA
$PNQVUFA
$MVTUFSJOHA
4UPSBHFA
&OBCMF3FNPUF.BOBHFNFOU1PSUA
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHFA
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYFT8
&VSPQF4UBOEBSE5JNF	
If your system supports EFI, please make sure to change the image file format to VHD(X).
Look in active directory, and see the computer account for Nano Server is auto-created.
Creating a custom Nano Server WIM image
This section describes the process of customizing a Nano Server WIM image. The
deployment scenarios which support the use of WIM images are:
Deploying from a WDS server (covered in this section).
WinPE boot environment (covered in subsequent section).
Please refer to the specific deployment section for any special configuration steps related to
that particular scenario.
Before starting, please be sure to perform the steps described in the Prerequisites section
covered earlier.
The WIM image contains two separate editions:
Windows Server 2016 4&37&345"/%"3%/"/0
Windows Server 2016 4&37&3%"5"$&/5&3/"/0
You have to decide which edition of Nano Server to use prior to creating a customized
image. The edition is specified during image creation using the parameter, &EJUJPO,
followed by standard or datacenter:
Open an administrative PowerShell session on your management machine, and
1.
change the directory to the location of the Nano Server image. In our example, it
is $=/BOP4FSWFS.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 82 ]
Import the /BOP4FSWFS*NBHF(FOFSBUPSQTE file into the PowerShell session
2.
using the following command:
*NQPSU
.PEVMF$=/BOP4FSWFS=/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSB
UPSQTE7FSCPTF
The next step is to determine which Nano Server packages to add to the image.
3.
For a complete list of packages, please refer to the section titled Nano Server Roles
and Features covered at the beginning of this Chapter. In this example, Nano
Server will be installed on a bare-metal server targeted to run Hyper-V, we will
specify a hostname of /"/0)7, enable the remote management port, and
enable EMS functionality. Finally, we will add the following packages and
drivers to the image:
Compute
Failover clustering
OEM driver package
Hardware vendor drivers (that is HPE, Dell EMC, Cisco and so on)
The following is the command that will be used to create our custom WIM image:
4.
4FSWJDJOH6QEBUF1BDLBHFT4FSWJDJOH1BDLBHF!
$=/BOP4FSWFS=6QEBUFT=8JOEPXT,#YDBC
$=/BOP4FSWFS=6QEBUFT=8JOEPXT,#YDBC$SFBUF
/FX/BOP4FSWFS*NBHF/FX/BOP4FSWFS*NBHF#BTF1BUI$=/BOP4FSWFS=A
5BSHFU1BUI$=/BOP4FSWFS=/"/0)7XJNA
$PNQVUFS/BNF/"/0)7A
"ENJOJTUSBUPS1BTTXPSE1BTTXPSEA
%FQMPZNFOU5ZQF)PTUA
&EJUJPO%BUBDFOUFSA
0&.%SJWFSTA
%SJWFS1BUI$=/BOP4FSWFS=)1&
%SJWFSTA
$PNQVUFA
$MVTUFSJOHA
&OBCMF3FNPUF.BOBHFNFOU1PSUA
&OBCMF&.4A

4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHFA
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYF
T8&VSPQF4UBOEBSE5JNF	

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 83 ]
For UEFI secure boot support add QBDLBHF.JDSPTPGU/BOP4FSWFS4FDVSF4UBSUVQ
1BDLBHF.
The next step is to create an VOBUUFOEYNM file to complete the deployment. It is
5.
recommended that you use Windows System Image Manager (WSIM) to
customize the XML for your environment. For more information on WSIM,
please refer to the Microsoft article at, IUUQUFDIOFUNJDSPTPGUDPNFOVTM
JCSBSZDD
WXTBTQY.
In the companion of this book, we've included unattend XML sample files for BIOS based
servers as well as UEFI based servers and for Nano Server image customization. Use the
appropriate version in the following step.
After creating or modifying the example unattend file, apply the VOBUUFOEYNM
6.
file by editing the offline image as follows:
&EJU/BOP4FSWFS*NBHF#BTF1BUID=/BOP4FSWFS=
5BSHFU1BUID=/BOP4FSWFS=/"/0)7XJN
6OBUUFOE1BUI$=/BOP4FSWFS=6OBUUFOEYNM
If the target image has been already booted, the requested changes will not be applied using
the 6OBUUFOE1BUI parameter.
The image now is ready for deployment using WDS.
7.
Installing and Configuring the WDS Role
The process described in this section configures the WDS environment for automated
deployments using the client unattend file. The VOBUUFOEYNM file is associated with a pre-
staged device for customizing the WinPE phase of setup.
However, the previous unattend file that we add it using &EJU/BOP4FSWFS*NBHF, is
associated with the image for automating post-WinPE stages of setup and is usually
referred to as the image unattend file.
You might need to update the unattend XML files provided with this book to match your
environment.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 84 ]
This section also describes the process for injecting out-of-the-box drivers into the
CPPUXJN file used for WDS deployments:
Install Windows Deployment Service from Server Manager or using PowerShell:
1.
*OTUBMM8JOEPXT'FBUVSF/BNF8%4*ODMVEF"MM4VC'FBUVSF
*ODMVEF.BOBHFNFOU5PPMTWFSCPTF
Configure Windows Deployment Service from the Tools menu in Server
2.
Manager.
Right-click your WDS server in the Windows Deployment Services console and
3.
select Configure Server (see Figure 19):
(KIWTG%QPaIWTG9KPFQYU&GRNQ[OGPV5GTXKEG

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 85 ]
In the Windows Deployment Services Configuration Wizard, click Next, and
4.
then select Integrated with Active Directory in the Install Options page (see
Figure 20):
(KIWTG%QPaIWTG9KPFQYUFGRNQ[OGPV5GTXKEGKPVGITCVGFYKVJ#&

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 86 ]
Select the default in the Remote Installation Folder Location and the Proxy DHCP
5.
Server pages. In the PxE Server initial Settings, select Respond to all client
computers (known and unknown) (see Figure 21):
(KIWTG%QPaIWTG9KPFQYU&GRNQ[OGPV5GTXKEG4GURQPFVQCNNENKGPVU

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 87 ]
Once the server is configured, Right-click on Boot Images and select Add Boot
6.
Image. Select CPPUXJN from the "Sources" folder on your media disk or ISO file,
and select the defaults for the rest of the wizard (see Figure 22):
(KIWTG#FFDQQVKOCIGDQQVYKOKP9&5

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 88 ]
Right-click on Install Images and select Add Install Image. In the image group
7.
page, create an image group named Nano Server Image (see Figure 23):
(KIWTG#FF0CPQ5GTXGTKOCIGDQQVYKOKP9&5

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 89 ]
In the Image File page, select Nano Server VHD(X) or the Nano Server WIM file
8.
that you've prepared at the beginning of this section (see Figure 24):
(KIWTG#FFKPI0CPQ5GTXGT9+/KOCIGKP9&5

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 90 ]
Click Open and Next to continue (see Figure 25). Select the image(s) you wish to
9.
add to the WDS server:
(KIWTG#FFKPI0CPQ5GTXGT9+/KOCIGKP9&5
Click Next to continue.
10.
Click Next and then Finish to complete the operation.
11.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 91 ]
The image should be added to the Nano Server Image folder on the WDS server
11.
(see Figure 26):
(KIWTG0CPQ5GTXGTUWEEGUUHWNN[CFFGFVQVJG9&5UGTXGT
After adding Nano Server image to the WDS server, the next step is to associate
13.
the VOBUUFOEYNM file to the image in order to automate the installation:
First, be sure a Nano Server WIM or VHD(X) image exists on the WDS
1.
server.
Next, be sure the VOBUUFOEYNM file already exists on the server.
2.
In the WDS Management Console, in the right pane, right-click the
3.
WDS Server Name and select Properties.
Select Client tab and select Enable unattended installation, select the
4.
corresponding architecture, for UEFI systems you need to select x64
(UEFI) architecture and for BIOS Systems you need to select x64
architecture, then click Browse to select VOBUUFOEYNM file. In this
example the image file is located at,
E=3FNPUF*OTUBMM=8ET$MJFOU6OBUUFOE=/BOP#*04$MJFOU6OBUUF
OE8%4YNM (see Figure 27).
Click Open and then click OK to continue.
5.
Click Apply and OK to complete the operation.
6.
This completes the process for configuring a Nano Server image for
7.
automated deployments.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 92 ]
If a change has been made to the unattend file in the future, you need to repeat the steps
above to reapply the unattend file to the install image. This is necessary because WDS
imports the VOBUUFOEYNM file into the folder structure of the associated image on the WDS
server. For instance, in our example above, the /BOP4FSWFS6OBUUFOEYNM file is copied to
the following location: %=3FNPUF*OTUBMM=*NBHFT=/BOP
4FSWFS=/BOP4FSWFS$PNQVUF=6OBUUFOE=:
(KIWTG9&55GTXGT%NKGPVKOCIGRTQRGTVKGU

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 93 ]
In some situations, it may be necessary to add out-of-the-box drivers for boot-
14.
critical devices because they are not included as part of Windows Server 2016
media. In our example, it's HPE dynamic smart array B120i controller.
Logon to the WDS server and open the WDS Management Console.
15.
Copy the B120i driver to a folder located on the WDS server.
16.
Locate the desired CPPUXJN file from the list of boot images.
17.
Right-click the image and select the Export Image option.
18.
Export the image to a folder on the WDS server and give it a name such as
19.
E=JNBHFT=$VTUPN#PPUXJN.
Open a ADK or CMD shell to the folder containing the exported image.
20.
Create a mount folder for the image, NLEJSE=JNBHFT=NPVOU.
21.
Mount index 2 of the image by using the following command:
22.
Dism.exe /mount-wim /wimfile:d:\images\CustomBoot.wim /index:2
/mountdir:d:\images\mount
Add the B120i driver to the image using the following command:
23.
Dism.exe /image:d:\images\mount /add-driver
/driver:d:\Images\B120i\hpsa2.inf
Ensure there were no errors. Unmount the image and save the changes using the
24.
following command:
Dism.exe /unmount-wim /mountdir:d:\images\mount /commit
Add the custom image back to the WDS server. You can replace an existing
25.
image, or create a new one. In this example, we'll create a new CPPUXJN file. In
the WDS Management Console, right-click Boot Images folder and select Add
Boot Image.
Follow the prompts to import the image from E=JNBHFT=$VTUPN#PPUXJN.
26.
A new boot image should exist on the WDS server.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 94 ]
You can now PXE boot your physical machine and install that customized image of Nano
Server with Hyper-V and failover clustering enabled (see Figure 28):
(KIWTG+PUVCNNKPI0CPQ5GTXGTWUKPI9&5

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 95 ]
The rest of the deployment should be automated. At the end of setup, the Nano Recovery
Console login screen should appear, similar to Figure 29:
(KIWTG0CPQ4GEQXGT[%QPUQNGNQIKPUETGGP
Booting a bare-metal machine into WinPE and
deploying Nano Server using a .wim file
One of the deployment methods for Nano Server is deploying a WIM image to disk from a
WinPE boot environment. There are multiple options available for booting into WinPE such
as:
Deployment from WinPE ISO image using Baseboard Management Controller
(BMC)
Deployment from WinPE USB thumb drive

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 96 ]
Deployment from WinPE PXE boot
Deployment from WinPE with network and without WDS
This chapter covers the last scenario, deployment from WinPE with network and without
WDS. You can choose the method best for your environment. But before doing so, we need
to create a WinPE bootable image.
The following points will be covered in this section:
Prerequisites
Setting up WinPE environment
Deployment from WinPE with network and without WDS
Creating custom WinPE boot image that has PowerShell enabled
Creating a WinPE ISO image
Creating a WinPE bootable USB thumb drive
Prerequisites
Before starting, be sure to perform the steps described in the previous section titled
Preparing the environment. In addition, be sure to complete all desired customizations to
Nano Server VHD(X) image as described in the section titled, Creating a Custom Nano Server
VHD(X) Image.
Setting up the WinPE environment
The Windows Assessment and Deployment Kit (Windows ADK) includes a batch file that
creates an environment for working with WinPE images. This batch file requires two
arguments. The first one is the architecture type of the target image, and since Nano Server
is 64-bit, we will use BNE. The second argument is, the working folder. In our example,
the location for the WinPE folder is E=5FNQ1&\.
In the Deployment and Tools CMD session, change directories to $=1SPHSBN
1.
'JMFT
Y=8JOEPXT,JUT=="TTFTTNFOUBOE%FQMPZNFOU
,JU=8JOEPXT1SFJOTUBMMBUJPO&OWJSPONFOU=.
Run the DPQZQFDNE file with the appropriate arguments as the following:
2.
copype.cmd amd64 d:\TempPE\

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 97 ]
This command creates the specified directory for you. Ensure there were no
3.
errors during this operation.
Included in the files copied is a CPPUXJN file that we will be modifying. The
4.
CPPUXJN image is located at %=5FNQ1&=NFEJB=TPVSDFT=CPPUXJN.
The CPPUXJN file will be used in the subsequent section Deployment from WinPE
5.
with network and without WDS.
If it is necessary to inject specific boot-critical drivers in your custom WinPE CPPUXJN
image, please check with your preferred hardware vendor to get those drivers before you
continue with the remaining steps.
Please refer to the previous section where we showed you how to inject HPE dynamic smart
array B120i controller to Windows CPPUXJN image.
At this time, you could create a bootable copy of WinPE that would be able to boot the
physical hardware and present you with access to both the network and storage devices.
But the goal here is to automate the deployment of Nano Server without WDS, so we will
perform a few more steps.
Deployment from WinPE with network and without WDS
The process of installing Nano Server using WinPE can be automated through scripting
instead of manual installation.
In this example, we will show you how to deploy Nano Server from WinPE which involves
PXE booting and automating Nano Server deployment.
This example is fully automated through PowerShell, so you can PXE boot your servers
without WDS and have WinPE complete the installation with no human interaction. This
process requires to have a DHCP server deployed in your environment to PXE boot.
$SFBUJOHBDVTUPN8JO1&CPPUJNBHFUIBUIBT1PXFS4IFMMFOBCMFE
The Windows Assessment and Deployment Kit (Windows ADK) includes a XJOQFXJN
image that creates an environment for working with WinPE images. The WIM file is really a
specialized archive that holds all of the files for the Windows operating system. The first is
the architecture type of the target image. Thus, we will use BNE for Nano Server:

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 98 ]
First we'll store the location of the PowerShell packages to be installed and the
1.
location for the temporary Windows PE media in two PowerShell variables
named 8JO"%, and 8JO1&5FNQ. Open Windows PowerShell and run the
following:
8JO"%,$=1SPHSBN'JMFT
Y=8JOEPXT,JUT=="TTFTTNFOUBOE
%FQMPZNFOU,JU=8JOEPXT1SFJOTUBMMBUJPO
&OWJSPONFOU=BNE=8JO1&@0$T
8JO1&5FNQ%=5FNQ1&
In order to modify CPPUXJN image, we need to mount it to make it available to
2.
the system. The following DISM command mounts the file. This will open the
WIM file for editing. It will extract the structure to a target folder where we can
add files and content:
.PVOU8JOEPXT*NBHF*NBHF1BUI
8JO1&5FNQ=.FEJB=4PVSDFT=CPPUXJN*OEFY1BUI
8JO1&5FNQ=.PVOU
At this point, we need to add a PowerShell package to the WIM file to enhance its
3.
capabilities, because it is so much easier to script in PowerShell. The list of all
packages (OCS files) can be found in the 8JO1&@0$4 folder.
To do this, we use the "EE8JOEPXT1BDLBHF cmdlet. The following
commands demonstrate how to install the six optional PowerShell
components to extend WMI capability in a Windows PE environment that
are required for this example. You will notice that there are two CAB files per
component--the component and its associated language pack. Both are
required to be installed. Additionally, the added components often need to
be added in a specific sequence. The following list follows the prescribed
sequence:
$"#GJMFT!
8JO"%,=8JO1&8.*DBC8JO"%,=FOVT=8JO1&
8.*@FOVTDBC8JO"%,=8JO1&/FU'9DBC8JO"%,=FOVT=8JO1&
/FU'9@FOVTDBC8JO"%,=8JO1&4DSJQUJOHDBC8JO"%,=FO
VT=8JO1&4DSJQUJOH@FOVTDBC8JO"%,=8JO1&
1PXFS4IFMMDBC8JO"%,=FOVT=8JO1&1PXFS4IFMM@FO
VTDBC8JO"%,=8JO1&4UPSBHF8.*DBC8JO"%,=FOVT=8JO1&
4UPSBHF8.*@FOVTDBC8JO"%,=8JO1&
%JTN$NEMFUTDBC8JO"%,=FOVT=8JO1&%JTN$NEMFUT@FO
VTDBC'PSFBDI
$"#GJMFJO$"#GJMFT\"EE8JOEPXT1BDLBHF
1BDLBHF1BUI$"#'JMF1BUI8JO1F5FNQ=.PVOU*HOPSF$IFDL^

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 99 ]
Next, we need to modify 4UBSUOFUDNE in WinPE to connect to a network share
4.
that contains the fully automated scripts including the VHD(X) created in the
section titled, Creating a Custom Nano Server VHD(X) Image.
Open 4UBSUOFUDNE with your favorite editor (/PUFQBE in this example):
5.
/PUFQBE8JO1&5FNQ=.PVOU=8JOEPXT=4ZTUFN=4UBSUOFUDNE
And then add the following commands (see Figure 30):
6.
/FUVTF4==*1 =5FNQ1&6TFSVTFSOBNF QXE 
1PXFS4IFMM4FU&YFDVUJPO1PMJDZ#ZQBTT'PSDF
1PXFS4IFMM4=/BOP4FSWFS#*04%FQMPZNFOU8JUIPVU8%4QT
FYJU
(KIWTG5VCTVPGVEOFEWUVQOK\GF
During your initial testing and debugging of your scripts, you may want to
remove the exit command at the end of 4UBSUOFUDNE. This allows you to
manipulate your scripts within WinPE. Please note that the exit command will
cause WinPE to automatically reboot the system when it's completed.
Exit notepad and save 4UBSUOFUDNE.
7.
Dismount the Windows image by running the following command:
8.
%JTNPVOU8JOEPXT*NBHFQBUI8JO1&5FNQ=.PVOUTBWF

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 100 ]
Copy /BOP4FSWFS#*04%FQMPZNFOU8JUIPVU8%4QT and Nano Server
9.
VHD(X) image to the 5FNQ1& shared folder on your network.
We provided the scripts for both BIOS and UEFI mode deployment
accompanied with this chapter.
The TempPE shared folder will look similar to Figure 31:
10.
(KIWTG6GOR2'5JCTGF(QNFGTEQPVGPV
The final step is to decide which WinPE boot method to use. You can boot from
11.
WinPE ISO image or WinPE USB thumb drive, please refer to the section titled
Creating WinPE ISO image or Creating WinPE bootable USB thumb drive. You need
to use the customized WinPE boot image which we edited in this section. In our
example, it's located at %=5FNQ1&=.FEJB=CPPUXJN.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 101 ]
PXE boot your physical machine and observe hands-off Nano Server deployment
12.
(see Figure 32):
(KIWTG2:'$QQV2J[UKECN/CEJKPG

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 102 ]
The rest of the deployment is automated. At the end of setup, the system will
13.
reboot and Nano recovery console login screen should appear similar to Figure
33:
(KIWTG9KP2'EQORNGVGF0CPQ5GTXGTTGEQXGT[EQPUQNG
Creating a WinPE ISO image
This step is only required if you will be booting WinPE from an ISO image, such as booting
from the BMC port such as HPE iLO IRC or integrated Dell Remote Access Controller
(iDRAC). Otherwise, skip to Creating WinPE bootable USB thumb drive section.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 103 ]
The ADK ships with a batch file that creates an ISO image from the contents of the
E=XJOQF@BNE=NFEJB folder. The script name is .BLF8JO1&.FEJBDNE and is located
at, $=1SPHSBN'JMFT
Y=8JOEPXT,JUT=="TTFTTNFOUBOE%FQMPZNFOU
,JU=8JOEPXT1SFJOTUBMMBUJPO&OWJSPONFOU.
First, make sure your running a ADK CMD session with elevated privileges.
1.
Change directories to the folder containing .BLF8JO1&.FEJBDNE
2.
$=1SPHSBN'JMFT
Y=8JOEPXT,JUT=="TTFTTNFOUBOE
%FQMPZNFOU,JU=8JOEPXT1SFJOTUBMMBUJPO&OWJSPONFOU=.
Make sure the destination folder exists before running the script. For example,
3.
NLEJSE=5FNQ1&=JTP.
Run the command, .BLF8JO1&.FEJBDNEJTPE=5FNQ1&
4.
E=5FNQ1&=JTP=OBOPTFSWFS@XJOQFJTP.
If the operation was successful, you can go back to the previous section titled,
5.
Deployment from the network using WinPE without WDS, and PXE boot your
physical machine from that ISO file.
Creating a WinPE bootable USB thumb drive
This step is only required if you will be deploying Nano Server from a USB thumb drive.
The process for creating a USB bootable WinPE image is nearly identical to creating a
bootable ISO image described in the previous section.
The ADK ships with a batch file that creates a bootable USB WinPE environment using the
contents of the E=5FNQ1&=NFEJB folder which the case in our example.
The script name is .BLF8JO1&.FEJBDNE and is located at, $=1SPHSBN'JMFT

Y=8JOEPXT,JUT=="TTFTTNFOUBOE%FQMPZNFOU,JU=8JOEPXT
1SFJOTUBMMBUJPO&OWJSPONFOU:
First, make sure your deployment and imaging tool shell is running with
1.
elevated privileges.
Change folders to the folder containing .BLF8JO1&.FEJBDNE.
2.
Insert the USB thumb drive in your computer and be sure Windows assigns it a
3.
drive letter and the drive partition style is MBR. If there is no drive letter
assigned, format the USB drive as FAT32 and assign it one. Make a note of the
drive letter. For this example, we will assume the USB drive letter is '.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 104 ]
Run the command, .BLF8JO1&.FEJBDNEVGEE=5FNQ1&'
2.
If the operation was successful, the USB drive is ready.
3.
Safely eject the USB drive from your computer and boot your physical machine.
4.
Deploying Nano Server in Microsoft Azure
The last deployment option for Nano Server is Microsoft Azure. As of today, there are two
methods to do so, you can create Nano Server VM using the Nano Server image from the
Azure gallery, or bring your own Nano Server to Azure.
When bringing your Nano Server VHD image to Azure simply use the
parameters %FQMPZNFOU5ZQF(VFTU and -&OBCMF3FNPUF.BOBHFNFOU
when building the image on-premises before you send the VHD to
Microsoft Azure.
For more information on how to upload your own VHD, please check
here: IUUQTB[VSFNJDSPTPGUDPNFOVTEPDVNFOUBUJPOBSUJDMFT
WJSUVBMNBDIJOFTDSFBUFVQMPBEWIEXJOEPXTTFSWFS.
In this example, we will show you how to deploy Nano Server using Azure helper
PowerShell module which is developed by the Nano Server team, however, you can deploy
the same through Azure marketplace at IUUQTQPSUBMB[VSFDPNas shown in Figure 34:
(KIWTG#\WTG/CTMGVRNCEG9KPFQYU5GTXGT0CPQ5GTXGT

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 105 ]
Requirements
We have three requirements to deploy Nano Server in Azure:
Download and extract the zip file for Nano Server Azure Helper PowerShell module at
IUUQTNTEOTIBSFECMPCDPSFXJOEPXTOFUNFEJB/BOP4FSWFS"[VSF)FMQFS@
[JQ.
The Azure Helper module requires Azure Resource Manager (AzureRM) cmdlets to be 
installed on your management computer.
In order to do so, please open an elevated Windows PowerShell or Windows PowerShell
ISE, and run the following command to install Azure resource manager PowerShell module
(see Figure 35):
Install-Module AzureRM -Verbose
(KIWTG+PUVCNN#\WTG4GUQWTEG/CPCIGT2QYGT5JGNN/QFWNG
Finally, we need an active Azure subscription.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 106 ]
Creating Nano Server in Azure
Browse to the local folder where you extracted the Azure Helper module and
1.
import it (see Figure 36):
(KIWTG+ORQTV0CPQ5GTXGT#\WTGJGNRGT
Make sure "[VSF3. module is imported and then log in to your Azure account
2.
by running the following command (see Figure 37):
(KIWTG.QIKPVQ#\WTG4/

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 107 ]
Run the following commands to create a resource group and a key vault, if you
3.
haven't already (see Figure 38). In our example, we chose 8FTU&VSPQF because
this is the closest Azure datacenter to us:
/FX"[VSF3N3FTPVSDF(SPVQ/BNF/BOP3FTPVSDF(SPVQ-PDBUJPO	8FTU
&VSPQF	
/FX"[VSF3N,FZ7BVMU7BVMU/BNF/BOP4FSWFS7BVMU
3FTPVSDF(SPVQ/BNF/BOP3FTPVSDF(SPVQ-PDBUJPO	8FTU&VSPQF	
&OBCMFE'PS%FQMPZNFOU
(KIWTG0GY#\WTG4GUQWTEG/CPCIGT)TQWR

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 108 ]
We are ready now to create a Nano Server VM. In the same PowerShell window
4.
run the following commands, you will be prompted for an administrator
password:
4FU"[VSFMPDBUJPOMPDBUJPO	8FTU&VSPQF	(FU/BOPJNBHF4,6
GPSBOPGGFS/BOP*NBHF4LV(FU"[VSF3N7.*NBHF4LV
-PDBUJPOMPDBUJPO1VCMJTIFS/BNF.JDSPTPGU8JOEPXT4FSWFS
0GGFS8JOEPXT4FSWFS]8IFSF0CKFDU\@4LVTMJLF/BOP^
$SFBUF/FX/BOP"[VSF7./FX/BOP4FSWFS"[VSF7.-PDBUJPO	8FTU
&VSPQF	b7./BNF/BOP"[VSF7."ENJO6TFSOBNF/BOP"ENJO
7BVMU/BNF/BOP4FSWFS7BVMU
3FTPVSDF(SPVQ/BNF/BOP3FTPVSDF(SPVQ
4UPSBHF"DDPVOU/BNFOBOPB[VSFTUPSBHFBDD
*NBHF4LV/BOP*NBHF4LV4LVT7FSCPTF
If you switch to Azure portal at IUUQTQPSUBMB[VSFDPN, you can see the VM
5.
Status is Creating (see Figure 39):
(KIWTG0GY#\WTG0CPQ8/#\WTG2QTVCN
Wait until the VM is completely provisioned.
6.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 109 ]
To establish a secure PowerShell remote session to Nano Server VM in Azure,
7.
you need to note the FQDN string from DNS settings by running the following
command:
(FU"[VSF3N1VCMJD*Q"EESFTT3FTPVSDF(SPVQ/BNF
/BOP3FTPVSDF(SPVQ
Observe the output of this cmdlet and copy the FQDN string, under DNS
8.
settings. It will look something like:
OBOPB[VSFWNXFTUFVSPQFDMPVEBQQB[VSFDPN, it might be different in
your environment.
Use the FQDN noted in the previous step and establish a secure session
9.
connection by running the following command (see Figure 40):
You will be prompted for the administrator password.
10.
&OUFS144FTTJPO$POOFDUJPO6SJ
IUUQTOBOPB[VSFWNXFTUFVSPQFDMPVEBQQB[VSFDPN
$SFEFOUJBM/BOP"ENJO
(KIWTG%QPPGEVVQ0CPQ5GTXGT8/KP#\WTG
As you can see, we were able to deploy and access a Nano Server VM in Microsoft Azure
from a local machine.
If you want to access the same Nano VM in Azure from another
management machine, you need to export the certificate from the original
machine and import it to another one, the steps are documented at the
following link: IUUQCMPHTUFDIOFUDPNCOBOPTFSWFSBSDIJWF
OBOPTFSWFSJBBTJNBHFJOUIFB[VSFHBMMFSZBTQY.

Deploying Nano Server in a Virtual Machine and on Physical Hardware
[ 110 ]
Summary
In this chapter, we discussed the current roles and features which are available for Nano
Server in Windows Server 2016, we covered how to create a Nano Server VHD(X) image,
then we showed you how to deploy that image in a virtual machine using Hyper-V
Manager and Windows PowerShell, and lastly, we discussed the four deployment options
for Nano Server on a physical machine using WinPE and WDS.
Nano Server can also be deployed in Microsoft Azure. You can use the Azure helper
PowerShell module to automate the deployment, or you can deploy the same through
Azure marketplace.
Continue now to $IBQUFS, Deploying Hyper-V Cluster on Nano Server, to learn more about
how to deploy Nano Server with compute and storage roles for a clustered environment.

4
Deploying Hyper-V Cluster on
Nano Server
In $IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical Hardware, we
covered how to create Nano Server images, then we showed you how to deploy the image
in a virtual machine using Hyper-V Manager and in Windows PowerShell. We also
discussed the deployment options for Nano Server on a bare-metal machine using WinPE
and WDS, and lastly we covered how to deploy Nano Server in Microsoft Azure.
As discussed earlier in this book, Nano Server was created to serve as cloud fabric and
infrastructure for Hyper-V storage, clustering and networking, which is our focus in this
chapter, and it was also designed to be a deployment option for cloud application
(platform-as-a-service v2 and ASPT.NET v5 applications).
This chapter will give you both a specific standalone example of how to deploy Nano
Server as a compute cluster and storage using a hyperconverged solution with Storage
Spaces Direct (S2D), and an introductory overview of the following topics:
Nano Server as a compute cluster
Nano Server as a storage cluster
In this chapter, we will also be focusing heavily on Windows PowerShell to build and
deploy Nano Server as a compute and storage cluster.

Deploying Hyper-V Cluster on Nano Server
[ 112 ]
Nano Server as a compute cluster
Hyper-V roles are one of the common workloads we expect most people will run on Nano
Server. The compute role is the Hyper-V role which is applicable primarily for physical
machines however, starting with Windows Server 2016, Microsoft introduced nested
virtualization where we can leverage this feature and host Nano Server with compute role
in a virtual machine. Nested virtualization was primarily enabled for Hyper-V containers.
For more information about Windows containers and Hyper-V containers, please refer to
$IBQUFS, Running Windows Server Containers and Hyper-V Containers on Nano Server.
The storage and the cluster role work both whether Nano Server is hosted in a VM or on a
physical machine.
As discussed in $IBQUFS, Managing Nano Server with Windows PowerShell and Windows
PowerShell DSC, Nano Server management must be done remotely; in other words, you
should be using management tools such as System Center Virtual Machine Manager
(SCVMM), Windows PowerShell, and Remote Server Administration Toolkit (RSAT)
from your management PC, because you cannot log in into Nano Server directly and do the
configuration locally. Moreover, the management PC must run the same build as Nano
Server; you cannot manage Nano Server with an older version of Hyper-V Manager or
FCM, or an older version of PowerShell.
Deploying a Nano Server as a Hyper-V cluster
As we expect Hyper-V to become an important role for Nano Server, it's very important to
deploy Hyper-V as a highly available role. The good news is that failover clustering works
the same as on any Windows Server (Server with Desktop Experience, Server Core, and free
Hyper-V Server).
Concisely, failover cluster is a group of independent servers that work together to increase
the availability, and scalability of clustered roles (formerly called clustered applications
such as virtual machines, SQL databases, and services). You need to make sure you have
redundant hardware deployed everywhere to avoid a single point of failure, including
storage, network adapters, switches, servers, and applications.

Deploying Hyper-V Cluster on Nano Server
[ 113 ]
The clustered servers (called nodes) are connected by physical (Ethernet) cables and by
software. Shared storage must be accessible by all nodes at the same time. If one or more of
the cluster nodes fail, other nodes begin to provide the service (a process known as
failover), as shown in Figure 1:
(KIWTG(CKNQXGTENWUVGTKPI(CKNQXGTRTQEGUU
In addition, the clustered roles are proactively monitored to verify that they are working
properly (a process known as heartbeat). If they are not working, they are restarted or
moved to another node. Failover clusters also offer Cluster Shared Volume (CSV)
functionality that gives a consistent, distributed namespace that clustered roles such as
applications, SQL databases, and virtual machines can use to access shared storage from all
nodes. When an unplanned failover happens, the users experience a minimum disruption
in service; however, with certain applications, such as virtual machines, if we have planned
maintenance, we can move those VMs between hosts with no downtime (a process called
live migration).
Failover clusters can be managed by using the FCM console and the failover clustering
PowerShell cmdlets. You can also use the tools in file and storage services to manage file
shares on file server clusters.

Deploying Hyper-V Cluster on Nano Server
[ 114 ]
For more information about whatâ€™s new in failover clustering in Windows
Server 2016, please check the following article:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTXJOEPXTTFSWFSEPDTDPNQVU
FGBJMPWFSDMVTUFSJOHXIBUTOFXGBJMPWFSDMVTUFSJOHXJOEPXTTF
SWFS
The following information will be needed as input to configure and manage the Nano
cluster system:
Nano Server names: You should be familiar with your organization's naming
policies for computers, and each will need to have a unique server name
Domain name: You will be joining Nano computers to your domain, and you
will need to specify the domain name
Administrator password: The domain account must have Administrator
privileges on all Nano nodes
Network configurations:
DHCP: You should be familiar with your organization's IP address
distribution policies for computers.
Top of rack switch make/model.
Network adapter make/model. Are you using RDMA adapters?
There are two types of RDMA protocols; note which type your
RDMA adapter is (RoCEv2 or iWarp).
VLAN ID to be used for the network interfaces used by the
Management OS including live migration, backup, cluster, and
storage networks.
This section includes instructions to install and configure the components of a Hyper-V
cluster using Windows Server 2016 and Nano Server.
The act of deploying a Hyper-V cluster system can be divided into three high-level phases:
Deploying a Nano Server as compute host
Configuring the network
Creating and configuring a Hyper-V cluster
Deploying a Nano Server as compute host
Nano Server as a compute is used to host virtual machines on top of Hyper-V, either in
clusters or not.

Deploying Hyper-V Cluster on Nano Server
[ 115 ]
This process includes the following tasks:
Acquiring the ISO image of Windows Server 2016 Datacenter edition.
1.
Creating the new Nano Server images.
2.
Copying the new Nano Server images to the host machines.
3.
Rebooting into the new Nano Server image.
4.
Connecting and managing Nano Servers from the management machine.
5.
"DRVJSJOHUIF*40JNBHFPG8JOEPXT4FSWFS%BUBDFOUFSFEJUJPO
You can download a copy of the Windows Server 2016 Datacenter ISO from TechNet
evaluation center (IUUQTXXXNJDSPTPGUDPNFOVTFWBMDFOUFSFWBMVBUFXJOEPXTT
FSWFS) for your image creation and note the path.
$SFBUJOHUIFOFX/BOP4FSWFSJNBHFT
This section describes how to create the Nano Server VHD(X) file to be used on physical
machines using the pre-installed device drivers. We need to create a VHD(X) that includes
the OEM drivers, and failover clustering features including SCVMM packages, and enables
remote management and emergency management services. If you have drivers that are
recommended by your hardware vendor, it is simplest to inject the network drivers into the
image; you can do this by using the %SJWFST1BUI parameter and adding the drivers to the
image. If your deployment is using an RDMA adapter and datacenter bridging, then make
sure to include .JDSPTPGU/BOP4FSWFS%$#1BDLBHF in the PowerShell command string
below, so the DCB package is included in the example.
If you are going to manage the servers with System Center and you add .JDSPTPGU
/BOP4FSWFS4$7..$PNQVUF1BDLBHF, then do not use the $PNQVUF option for the
Hyper-V role, because this server will be managed by VMM and already has the compute
option.
Itâ€™s very important also to add the SCVMM packages in the right order or
the deployment will fail.

Deploying Hyper-V Cluster on Nano Server
[ 116 ]
The following steps will illustrate this process:
On the management machine, mount the Windows Server 2016 *40. To mount
1.
the ISO, in File Explorer, select and right click on ISO, then choose Mount. Once
the mounted drive is opened, navigate to the
=/BOP4FSWFS=/BOP4FSWFS*NBHF(FOFSBUPS directory and copy the contents to
a MPDBM directory to your desired working folder on your management machine
where you want to create and store your new Nano Server images. The drive
mounted in this example is &=.
Start an elevated Windows PowerShell console, then change the directory to the
2.
folder in which you've copied the contents in step 1 and then import the Nano
Server PowerShell module by using the following command:
*NQPSU.PEVMF/BOP4FSWFS*NBHF(FOFSBUPSQTE7FSCPTF
You will see the following screen (see Figure 2):
(KIWTG+ORQTVKPI0CPQ2QYGT5JGNNOQFWNG
Copy the network drivers that are recommended by your favorite hardware
3.
vendor to a directory and note the path. The example in the next step will use the
following:
%=/BOP4FSWFS=)1/BOP

Deploying Hyper-V Cluster on Nano Server
[ 117 ]
In this step, you will create a unique image for each Nano host machine. We need
4.
four images, one for each physical host for the Hyper-V cluster setup, so we will
create a VHDX for a physical machine that includes the SCVMM and DCB
packages by running the following script on the management machine which is a
member of the same domain where Nano Server will be deployed. The script will
prompt you for an administrator password for the new VHDX.
Type carefully and note your password for later use. You will use this password later to log
in to the Nano Server Recovery Console.
It is strongly recommended to download and install the latest updates.
Windows updates can be added to the Nano Server image in pre-
deployment fashion or post-deployment. See $IBQUFS, Running Other
Workloads on Nano Server, for more information.
In the following example, we downloaded Windows updates manually from the Microsoft
update catalog and added them to the image:
8JOEPXT4FSWFS*40*NBHF
.FEJB4FSWFS*40$=/BOP4FSWFS=8JOEPXT4FSWFS*40.PVOUUIF*40
*NBHF.PVOU%JTL*NBHF4FSWFS*40(FUUIF%SJWF-FUUFSPGUIFEJTL*40
JNBHF%7%%SJWF-FUUFS
(FU%JTL*NBHF4FSWFS*40](FU7PMVNF%SJWF-FUUFS
*NQPSU/BOP4FSWFS*NBHF(FOFSBUPSQTE1PXFS4IFMMNPEVMF*NQPSU
.PEVMF$=/BOP4FSWFS=/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSBUPSQTE
7FSCPTF&OUFS"ENJOJTUSBUPS1BTTXPSE1BTTXPSE3FBE)PTU1SPNQU1MFBTF
TQFDJGZMPDBM"ENJOJTUSBUPSQBTTXPSE"T4FDVSF4USJOH%PNBJO
/BNFNZ%PNBJO'2%/`7*35-"#a4FSWJDJOH6QEBUF1BDLBHFT4FSWJDJOH1BDLBHF!
$=/BOP4FSWFS=6QEBUFT=4FSWJDJOH4UBDL
6QEBUF=8JOEPXT,#YNTV$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXT,#YNTV/BOP1BDLBHFT/BOP1BDLBHF!
.JDSPTPGU/BOP4FSWFS%$#1BDLBHF.JDSPTPGU/BOP4FSWFS
4$7..1BDLBHF.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF]'PS&BDI
0CKFDU\/FX/BOP4FSWFS*NBHF.FEJB1BUI
%7%%SJWF-FUUFS=A
#BTF1BUI$=/BOP4FSWFS=A
5BSHFU1BUI$=/BOP4FSWFS=/"/0437)7@WIEYA
.BY4J[F(#A
%FQMPZNFOU5ZQF)PTUA
&EJUJPO%BUBDFOUFSA
$PNQVUFS/BNF/"/0437)7@A
"ENJOJTUSBUPS1BTTXPSE1BTTXPSEA
%PNBJO/BNFNZ%PNBJO'2%/A
3FVTF%PNBJO/PEFA
$MVTUFSJOHA
1BDLBHF/BOP1BDLBHFA
%SJWFST1BUI%=/BOP4FSWFS=)1/BOPA

Deploying Hyper-V Cluster on Nano Server
[ 118 ]
0&.%SJWFSTA
&OBCMF3FNPUF.BOBHFNFOU1PSUA
&OBCMF&.4A
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHFA
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYFT8
&VSPQF4UBOEBSE5JNF	
^%JTNPVOU8JOEPXT4FSWFS*40*NBHF%JTNPVOU%JTL*NBHF4FSWFS*40
Once you've completed this task, you should have four VHDXes, as shown in Figure 3, for
each of the four Hyper-V cluster systems that you are provisioning. If the server uses BIOS
to boot instead of UEFI, then you need to change the previous script from /"/0437
)7@7)%9UP/"/0437)7@7)%:
(KIWTG0CPQ5GTXGT*[RGT8KOCIGU
$PQZJOHUIFOFX/BOP4FSWFSJNBHFTUPUIFIPTUNBDIJOFT
Copy the VHDX files that you created earlier to each respective host machine and configure
each machine to boot from the new VHDX by performing the following steps.
The tasks described in this example assume that the servers will be used for Hyper-V
cluster, the nodes are booted into an existing Windows Server operating system, and they
are accessible to the network. We are using dual-boot from VHDX:
Log in as administrator on the Host machines that will be part of the Hyper-V
1.
cluster system.
Mount the VHDX. If you are using Windows Explorer, the mount is carried out
2.
by right-clicking on the VHDX file and mount. In this example, it is mounted
under &=

Deploying Hyper-V Cluster on Nano Server
[ 119 ]
Open Windows PowerShell as administrator and change the prompt to the
3.
8JOEPXT directory of the mounted VHDX. In this example, the command would
be as follows:
DEF=8JOEPXT
Enable booting to the VHDX by running the following command:
4.
#DECPPUFYFF=8JOEPXT
Unmount the VHDX. If you are using Windows Explorer, the unmount is carried
5.
out by right-clicking on the drive letter, and selecting eject. This step is very
important. The system may have issues booting if you don't unmount the VHDX.
Repeat the steps described in steps 1-5 on each physical machine.
6.
3FCPPUJOHJOUPUIFOFX/BOP4FSWFSJNBHF
Perform the following steps:
Reboot the host machines. They will automatically boot into the new Nano
1.
Server.
After the host machines are booted, log into the Nano recovery console. You will
2.
need to enter "ENJOJTUSBUPS for the username and the password you specified
earlier when creating the image. You can also specify the domain name and login
with a user who is a member of the administrators group.
Note the IP address of each Nano Server. You will use these IP addresses in the
3.
networking section (more on that in a bit).

Deploying Hyper-V Cluster on Nano Server
[ 120 ]
You can get the IP address from the DHCP server if you have DHCP deployed in
4.
your environment, or you can select Networking in the Nano recovery console
and press Enter. Select the network adapter that is being used to connect to the
system to manage it and then press Enter. Note your IPv4 address, as shown in
Figure 4, for later use:
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGPGVYQTMCFCRVGTUGVVKPIU

Deploying Hyper-V Cluster on Nano Server
[ 121 ]
$POOFDUJOHBOENBOBHJOH/BOP4FSWFSTGSPNBNBOBHFNFOUNBDIJOF
Perform the following steps:
Connect to and manage Nano Servers from a management machine that has the
1.
same build of Windows Server 2016 and RSAT installed.
Launch Hyper-V Manager on the management machine and add the four Nano
2.
Servers, as shown in Figure 5, and make sure you can connect to each Nano host:
(KIWTG*[RGT8/CPCIGTEQPUQNG0CPQ5GTXGTU
You can also use PowerShell remoting by using either the Nano Server name or
3.
the IP address that you acquired from the recovery console in the earlier step.

Deploying Hyper-V Cluster on Nano Server
[ 122 ]
Open Windows PowerShell on the management machine and run the following
4.
commands. You will be prompted for a password; enter the local administrator
password you specified when creating the Nano Server images:
4FUJUFNXTNBOMPDBMIPTU=DMJFOU=USVTUFEIPTUT7BMVF/"/0437
'PSDF/BOP4FSWFS/"/0437)7$SFE(FU
$SFEFOUJBM_="ENJOJTUSBUPS&OUFS144FTTJPO$PNQVUFS/BNF
/BOP4FSWFS$SFEFOUJBM$SFE4FU-PDBUJPO$=(FU$PNQVUFS*OGP
XYPTTM
After you enter the credentials, (see Figure 6):
5.
(KIWTG0CPQ5GTXGT2QYGT5JGNN4GOQVG5GUUKQP
Managing a Hyper-V cluster system including cluster and virtualization components often
means using a domain account that is a member of the Administrators group on each node:
From the management machine, open the Windows PowerShell console and run
1.
the following commands to add your domain account(s) in the administrators
local security group simultaneously on all four nodes.
Please update the domain account and password according to your environment:
2.
$SFE/FXPCKFDUUZQFOBNF4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
BSHVNFOUMJTU="ENJOJTUSBUPS
$POWFSU5P4FDVSF4USJOH184
"T1MBJO5FYU'PSDF/PEFT/"/0437)7/"/0437)7/"/0437
)7/"/0437)7*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM
$SFE4DSJQU#MPDL\/FUMPDBMHSPVQ"ENJOJTUSBUPST7*35=$MVTUFS.HNU
BEE
^

Deploying Hyper-V Cluster on Nano Server
[ 123 ]
Configuring the network
The following example assumes that you already have dual RDMA NIC ports in each node.
The Hyper-V virtual switch must be deployed with RDMA-enabled host virtual NICs. In
Windows Server 2016, separate NICs are no longer needed for RDMA. The Converged NIC
feature is a feature that allows the virtual NICs on the host (vNICs) to expose RDMA to the
host management OS and share the bandwidth of the NICs between the RDMA traffic and
the VM and other TCP/UDP traffic in a fair and manageable manner.
The diagram in Figure 7 illustrates the software architecture changes in Windows Server
2016:
(KIWTG%QPXGTIGF0+%YKVJ4&/#GPCDNGFJQUVX0+%UKOCIGUQWTEG/KETQUQHV

Deploying Hyper-V Cluster on Nano Server
[ 124 ]
The configuration for this example is based on a network adapter that implements RDMA
using RoCEv2 from Mellanox. Network QoS for this type of RDMA requires that the Top of
Rack (TOR) switches have specific capabilities set called Data Center Bridging (DCB) for
the network ports that the physical NICs are connected to.
While DCB is not needed for Internet Wide Area RDMA Protocol (iWARP) networks,
testing has found that all Ethernet-based RDMA technologies work better with DCB.
Because of this, you should consider using DCB even for iWARP RDMA deployments as
well.
DCB is used to mean all four of the following technologies:
Priority-based Flow Control (PFC), standardized in IEEE 802.1 Qbb
Enhanced Transmission Selection (ETS), standardized in IEEE 802.1 Qaz
Congestion notification, standardized in IEEE 802.1 Qau
Data Center Bridging Capabilities Exchange Protocol (DCBX)
In summary, Windows Server is only interested in the first two technologies of DCB, PFC,
and ETS.
For more information about Quality of Service (QoS) and DCB, please
refer to the following article:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTOFUXPSLCCBTQY
Perform the following steps from a management machine using a PowerShell remote
session and the *OWPLF$PNNBOE cmdlet to connect and configure the network adapter for
each Nano Server:
Set a network QoS policy for SMB, which is the protocol that the software-
1.
defined storage system uses, including live migration and other SMB types of
traffic. This example assumes that the virtual machine storage will be live on
storage spaces direct in a separate cluster (disaggregated or converged model):
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE
4DSJQU#MPDL\/FX/FU2PT1PMJDZ4.#
/FU%JSFDU1PSU.BUDI$POEJUJPO1SJPSJUZ7BMVF"DUJPO^

Deploying Hyper-V Cluster on Nano Server
[ 125 ]
The output should look something like this (see Figure 8):
2.
(KIWTG0GY0GV3Q52QNKE[
Turn on flow control for SMB using the following command:
3.
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE
4DSJQU#MPDL\&OBCMF/FU2PT'MPX$POUSPM1SJPSJUZ^
Make sure flow control is off for other type of traffic using the following
4.
command:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL\
%JTBCMF/FU2PT'MPX$POUSPM1SJPSJUZ^
Apply the network QoS policy to all NICRDMA adapters. In this example, we
5.
have only two RDMA NICs on each Nano host; you can use the wildcard
character  for the /BNF, as shown in the following example:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL\
(FU/FU"EBQUFS2PT/BNF]&OBCMF/FU"EBQUFS2PT
^
Create a 5SBGGJD class and give the SMB 50% of the bandwidth minimum. The
6.
name of the class will be SMB as shown in the following example:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL\/FX
/FU2PT5SBGGJD$MBTT4.#1SJPSJUZ#BOEXJEUI1FSDFOUBHF
"MHPSJUIN&54^
In this example, the SMB traffic has 50% of the bandwidth at least and the other traffic will
share the remaining 50%.
Priority Flow Control (PFC) must also be configured on Top of Rack
switches; more on that in a bit.

Deploying Hyper-V Cluster on Nano Server
[ 126 ]
The following is a sample of configuring DCB and PFC on the Cisco Nexus 3172 switch
series. In this example, we will use the following VLANs:
VLAN VLAN name
VLAN description
10
MGMT_OS
Management OS
11
SMB
SMB dedicated network
12
Live migration Hyper-V live migration
13
Backup
Backup and replication
14
CSV
Cluster communication
(MPCBM$JTDP4XJUDITFUUJOHT
TXJUDIDPOGJHVSFUFSNJOBM
TXJUDI
DPOGJHDMBTTNBQUZQFRPTNBUDIBMM3%."
TXJUDI
DPOGJHDNBQRPTNBUDIDPT
TXJUDI
DPOGJHDNBQRPTFYJU
TXJUDI
DPOGJHDMBTTNBQUZQFRVFVJOH3%."
TXJUDI
DPOGJHDNBQRVFNBUDIRPTHSPVQ
TXJUDI
DPOGJHDNBQRVFFYJU
TXJUDI
DPOGJHQPMJDZNBQUZQFRPT204@."3,*/(
TXJUDI
DPOGJHQNBQRPTDMBTT3%."
TXJUDI
DPOGJHQNBQDRPTTFURPTHSPVQ
TXJUDI
DPOGJHQNBQDRPTDMBTTDMBTTEFGBVMU
TXJUDI
DPOGJHQNBQDRPTFYJU
TXJUDI
DPOGJHQNBQRPTFYJU
TXJUDI
DPOGJHQPMJDZNBQUZQFRVFVJOH
204@26&6&*/(
TXJUDI
DPOGJHQNBQRFVFDMBTTUZQFRVFVJOH3%."
TXJUDI
DPOGJHQNBQDRFVFCBOEXJEUIQFSDFOU
TXJUDI
DPOGJHQNBQDRFVFDMBTTUZQFRVFVJOH
DMBTTEFGBVMU
TXJUDI
DPOGJHQNBQDRFVFFYJU
TXJUDI
DPOGJHQNBQRFVFFYJU
TXJUDI
DPOGJHQPMJDZNBQUZQFRVFVJOH
*/165@26&6*/(
TXJUDI
DPOGJHQNBQRFVFDMBTTUZQFRVFVJOH3%."
TXJUDI
DPOGJHQNBQDRFVFQBVTFCVGGFSTJ[F
QBVTFUISFTIPMESFTVNFUISFTIPME

TXJUDI
DPOGJHQNBQDRFVFDMBTTUZQFRVFVJOH
DMBTTEFGBVMU
TXJUDI
DPOGJHQNBQDRFVFFYJU
TXJUDI
DPOGJHDMBTTNBQUZQFOFUXPSLRPT3%."
TXJUDI
DPOGJHDNBQORPTNBUDIRPTHSPVQ

Deploying Hyper-V Cluster on Nano Server
[ 127 ]
TXJUDI
DPOGJHDNBQORPTFYJU
TXJUDI
DPOGJHQPMJDZNBQUZQFOFUXPSLRPT
204@/&5803,
TXJUDI
DPOGJHQNBQORPTDMBTTUZQFOFUXPSLRPT
3%."
TXJUDI
DPOGJHQNBQORPTDNUV
TXJUDI
DPOGJHQNBQORPTDQBVTFOPESPQ
TXJUDI
DPOGJHQNBQORPTDDMBTTUZQFOFUXPSLRPT
DMBTTEFGBVMU
TXJUDI
DPOGJHQNBQORPTDNUV
TXJUDI
DPOGJHQNBQORPTDFYJU
TXJUDI
DPOGJHQNBQORPTQPMJDZNBQUZQFOFUXPSL
RPTKVNCPRVFVJOH
TXJUDI
DPOGJHQNBQORPTDMBTTUZQFOFUXPSLRPT
DMBTTEFGBVMU
TXJUDI
DPOGJHQNBQORPTDNUV
TXJUDI
DPOGJHQNBQORPTDFYJU
TXJUDI
DPOGJHQNBQORPTFYJU
TXJUDI
DPOGJHDPQZSVOOJOHDPOGJHTUBSUVQDPO
The buffer sizes differ from the Nexus switch in the canonical configuration.
The canonical buffer sizes are: pause buffer-size , pause-threshold ,
resume-threshold :
*OEJWJEVBM$JTDPTXJUDIJOUFSGBDFDPOGJHVSBUJPOTXJUDIDPOGJHVSF
UFSNJOBMTXJUDI
DPOGJHJOUFSGBDF&UIFSOFUTXJUDI
DPOGJHJGQSJPSJUZ
GMPXDPOUSPMNPEFPOTXJUDI
DPOGJHJGTXJUDIQPSUNPEF
USVOLTXJUDI
DPOGJHJGTXJUDIQPSUUSVOLOBUJWFWMBOTXJUDI
DPOGJH
JGTXJUDIQPSUUSVOLBMMPXFEWMBOTXJUDI
DPOGJHJGTQBOOJOHUSFF
QPSUUZQFFEHFUSVOL
Create the Hyper-V virtual Switch Embedded Teaming (SET) which is
7.
connected to both physical NIC adapters, and enable RDMA vNIC.
SET is an alternative NIC Teaming solution in Windows Server 2016 that can be
8.
used for Hyper-V deployments with or without a Software-Defined Networking
(SDN) stack. SET is only supported in Nano Server; however, LBFO teaming
solution is not supported in Nano.
For more information about SET, please refer to the following articles:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTMJCSBSZNUB
TQY
IUUQTDIBSCFMOFNOPNDPNEFQMPZJOHTXJUDIFNC
FEEFEUFBNJOHTFUPOIZQFSWVTJOHQPXFSTIFMMETDQPX
FSTIFMMETDIZQFSW

Deploying Hyper-V Cluster on Nano Server
[ 128 ]
Before creating the virtual switch, you need to find the physical network
9.
adapter's names on the host by running the following command:
(FU/FU"EBQUFS]'5/BNF*OUFSGBDF%FTDSJQUJPO4UBUVT-JOL4QFFE
Once you have figured out the names of the NICs, you can then create the Hyper-
10.
V virtual switch by running the following command from the management
machine. You may notice a message that your PowerShell session lost connection.
This is expected and your session will reconnect:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\/FX7.4XJUDI/BNF4&5W4XJUDI/FU"EBQUFS/BNF
&UIFSOFU&UIFSOFU&OBCMF&NCFEEFE5FBNJOHUSVF^
Add host vNICs to the virtual switch. This configures a vNIC from the virtual
11.
switch that we just created in step 12. As shown in the following example, we will
add five host vNICs for SMB multichannel, live migration, cluster, and backup.
The host management vNIC is automatically created in Step 12 when we create
the 4&5 virtual switch:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\"EE7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI/BNF4.#@
NBOBHFNFOU04"EE7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI/BNF
4.#@NBOBHFNFOU04"EE7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI
/BNF-JWF.JHSBUJPONBOBHFNFOU04"EE7./FUXPSL"EBQUFS4XJUDI/BNF
4&5W4XJUDI/BNF$MVTUFSNBOBHFNFOU04"EE7./FUXPSL"EBQUFS
4XJUDI/BNF4&5W4XJUDI/BNF#BDLVQNBOBHFNFOU04
^
Next, we need to set the IP address for each host vNIC accordingly. The
12.
following script will automate the IP address assignment on all nodes:
/VNCFSPG/PEFJOUIF)ZQFS7$MVTUFS4FSWFS$PVOU4.#@
BOE4.#@/FUXPSL*%GPSOPEFT4.#@*%#BDLVQ
/FUXPSL*%GPSOPEFT#BDLVQ@*%4UBSU*1BEESFTTGPS
OPEFT#BDLVQ@/FUXPSL4.#@/FUXPSL'PS
JJ
MF4FSWFS$PVOUJ
\4.#@*14.#@*%4.#@/FUXPSL#BDLVQ@*1#BDLVQ@*%#BDLVQ@/FUX
PSL*OWPLF$PNNBOE$PNQVUFS/BNF/"/0437)7J$SFEFOUJBM$SFE
4DSJQU#MPDL\
1BSBN
4.#@/FUXPSL4.#@*%4.#@*1#BDLVQ@*1
/FX/FU*1"EESFTT*OUFSGBDF"MJBTW&UIFSOFU
4.#@
*1"EESFTT4.#@*11SFGJY-FOHUI`a
5ZQF6OJDBTU4.#@/FUXPSL4.#@*14.#@*14.#@*%4.#@/FUXPSL
/FX/FU*1"EESFTT*OUFSGBDF"MJBTW&UIFSOFU
4.#@
*1"EESFTT4.#@*11SFGJY-FOHUI`a5ZQF6OJDBTU/FX/FU*1"EESFTT

Deploying Hyper-V Cluster on Nano Server
[ 129 ]
*OUFSGBDF"MJBTW&UIFSOFU
#BDLVQ*1"EESFTT#BDLVQ@*1
1SFGJY-FOHUI`a5ZQF6OJDBTU
^
"SHVNFOU-JTU4.#@/FUXPSL4.#@*%4.#@*1#BDLVQ@*1#BDLVQ@/FUX
PSL4.#@/FUXPSL4.#@/FUXPSL^
If you noticed in the script above, we did not set the IP address for live migration
13.
and cluster networks; in fact, they'll work out of the box due to IPv6 APIPA.
Additionally, it's even a little faster as there is no NetBIOS involved for IPv6;
however, NetBIOS is recommended to be disabled when using IPv4 for live
migration, CSV, and cluster networks. As for SMB multichannel, both vNICs can
be on the same subnet (VLAN ID 11) as well; this is a new enhancement in
Windows Server 2016 failover clustering.
Next, we need to disable DNS registration for storage, cluster, backup, and live
14.
migration network adapters, except for host management vNIC, by running the
following commands:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE
4DSJQU#MPDL\(FU%OT$MJFOU]8IFSF0CKFDU\@*OUFSGBDF"MJBT
OFW&UIFSOFU
4&5W4XJUDI^]4FU%/4$MJFOU
3FHJTUFS5IJT$POOFDUJPOT"EESFTT'BMTF^
Next, we need to configure the host vNICs to use a different VLAN. Please make
15.
sure the VLANs are also defined on your Top of Rack switches:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\4FU7./FUXPSL"EBQUFS7MBO7./FUXPSL"EBQUFS/BNF4.#@7MBO*E
"DDFTT.BOBHFNFOU044FU7./FUXPSL"EBQUFS7MBO
7./FUXPSL"EBQUFS/BNF4.#@7MBO*E"DDFTT.BOBHFNFOU044FU
7./FUXPSL"EBQUFS7MBO7./FUXPSL"EBQUFS/BNF-JWF.JHSBUJPO
7MBO*E"DDFTT.BOBHFNFOU044FU7./FUXPSL"EBQUFS7MBO
7./FUXPSL"EBQUFS/BNF#BDLVQ7MBO*E"DDFTT
.BOBHFNFOU044FU7./FUXPSL"EBQUFS7MBO7./FUXPSL"EBQUFS/BNF
$MVTUFS7MBO*E"DDFTT.BOBHFNFOU04^

Deploying Hyper-V Cluster on Nano Server
[ 130 ]
You can also verify the VLANID is set by running the following command:
16.
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\
(FU7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI.BOBHFNFOU04](FU
7./FUXPSL"EBQUFS7MBO
^
Please make sure to also disable and enable each host vNIC adapter by running
17.
the following commands so that the VLANs are active:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\%JTBCMF/FU"EBQUFSW&UIFSOFU
4.#@W&UIFSOFU

4.#@W&UIFSOFU
-JWF.JHSBUJPOW&UIFSOFU

#BDLVQW&UIFSOFU
$MVTUFS$POGJSNGBMTF&OBCMF
/FU"EBQUFSW&UIFSOFU
4.#@W&UIFSOFU
4.#@W&UIFSOFU

-JWF.JHSBUJPOW&UIFSOFU
#BDLVQW&UIFSOFU
$MVTUFS^
In the final step, we need to enable RDMA on the host vNIC adapters by running
18.
the following command from the management machine:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\&OBCMF/FU"EBQUFS3%."W&UIFSOFU
4.#@W&UIFSOFU

4.#@W&UIFSOFU
-JWF.JHSBUJPOW&UIFSOFU
#BDLVQ
^
Creating and configuring a Hyper-V cluster
Configuring a Hyper-V cluster in Windows Server 2016 includes the following steps:
First, we will run the cluster validation tool to ensure that the Nano nodes are
1.
configured correctly to create a Hyper-V cluster. The cluster validation runs to
test and verify that the configuration appears suitable to successfully function as
a failover cluster.
Use the following PowerShell command to confirm a set of servers for use as a
Hyper-V cluster:
/PEFT/"/0437)7/"/0437)7/"/0437)7/"/0437
)75FTU$MVTUFS/PEF/PEFT*ODMVEF*OWFOUPSZ/FUXPSL4ZTUFN
$POGJHVSBUJPO7FSCPTF

Deploying Hyper-V Cluster on Nano Server
[ 131 ]
The output report should look something like this (see Figure 9):
(KIWTG(CKNQXGTENWUVGTXCNKFCVKQPTGRQTV
In the PowerShell example above, we removed the storage option from the cluster
validation test, because we will store the VM on a S2D cluster over SMB (more on that in the
next section).
In the second step, we will create a Hyper-V cluster with four nodes that you
2.
have confirmed for cluster creation in Step 1 by using the following PowerShell
command:
The /P4UPSBHF parameter is important to be added to the cmdlet,
because will use Storage Spaces Direct for shared storage.
In the following command, the $MVTUFS/BNF placeholder should be replaced
3.
with a NetBIOS name that is unique and 15 characters or less. If you donâ€™t have a
DHCP server in your environment, then add the 4UBUJD"EESFTT parameter
with the appropriate IP address:
/FX$MVTUFS/BNF/"/0)7$-6/PEF/PEFT/P4UPSBHF
4UBUJD"EESFTT
*HOPSF/FUXPSL7FSCPTF

Deploying Hyper-V Cluster on Nano Server
[ 132 ]
After running the previous command, you will receive a warning message which
4.
states that 5IFSFXFSFJTTVFTXIJMFDSFBUJOHUIFDMVTUFSFESPMF
UIBUNBZQSFWFOUJUGSPNTUBSUJOH.
You can safely ignore this warning. This warning is due to no disks being
available for the cluster quorum. It's recommended that a file share witness or
cloud witness is configured after creating the cluster. We will configure a cloud
witness in the next step.
In this step, we will configure the cloud witness. In Windows Server 2016,
5.
Microsoft introduced a new type of failover cluster witness besides disk witness
and file share witness called cloud witness. Cloud witness leverages Microsoft
Azure's blob storage to read and write to a blob file. Cloud witness will be used
as an arbitration point in case of split-brain resolution.
The requirement for cloud witness is to have an active Azure subscription.
6.
In your Azure subscription, you need to create a storage account; for this
7.
purpose, we've created a storage account named OBOPIWDMPVEXJUOFTT, and the
resource group named /"/0)73(, as shown in Figure 10:
(KIWTG%NQWFYKVPGUU

Deploying Hyper-V Cluster on Nano Server
[ 133 ]
A storage account gets two access keys and two connection strings. The reason for
this is that you can regenerate the keys, and have your workloads use the other
key without having any downtime for your workload.
The storage account can be used for multiple clusters as well. In fact, we will use
the same storage account to configure the Storage Spaces Direct cluster in the next
section.
In Azure, the work is done. The rest will happen on-premises. We'll configure the
8.
cluster with the cloud witness by running the following PowerShell one-liner.
Please update the "DDFTT,FZ parameter with your key accordingly:
4FU$MVTUFS2VPSVNb$MVTUFS/"/0)7
$-6b$MPVE8JUOFTTb"DDPVOU/BNFOBOPIWDMPVEXJUOFTTb"DDFTT,FZ"DDFTT
,FZ 
You can also set the cluster quorum using failover Cluster Manager from the
9.
management machine, as shown in Figure 11:
(KIWTG%QPaIWTGENQWFYKVPGUUKPHCKNQXGTENWUVGTOCPCIGT

Deploying Hyper-V Cluster on Nano Server
[ 134 ]
Once you're done, you can check the cluster quorum by running the following
10.
(FU$MVTUFS2VPSVN command:
(FU$MVTUFS2VPSVNb$MVTUFS/"/0)7$-6
(KIWTG)GV%NWUVGT3WQTWO1WVRWV
In this step, we will set the cluster memory dump to active. In Windows Server
11.
2016, Microsoft added a new option for creating memory dumps when a system
failure occurs. The new option is called Active memory dump.
It's recommended to set the Hyper-V host to Active memory dump instead of
Automatic memory dump, which is the default setting, because today we can find
on the market large memory servers with 256 GB to 1 TB of RAM and even more.
And for troubleshooting issues with the Hyper-V hosts, we usually do not need
the part of the RAM that is assigned to the virtual machines.
This option is not strictly for Nano Server, but because we cannot configure the settings
using the graphical user interface, as shown in Figure 13:

Deploying Hyper-V Cluster on Nano Server
[ 135 ]
(KIWTG#EVKXGOGOQT[FWOR
Therefore, we need to set it in the registry on each Nano node by running the following
PowerShell command:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL\
$POGJHVSF"DUJWFNFNPSZEVNQ4FU
*UFN1SPQFSUZb1BUI),-.=4ZTUFN=$VSSFOU$POUSPM4FU=$POUSPM=$SBTI$POUSPMb/BNF$S
BTI%VNQ&OBCMFEbWBMVF/FX
*UFN1SPQFSUZb1BUI),-.=4ZTUFN=$VSSFOU$POUSPM4FU=$POUSPM=$SBTI$POUSPM
/BNF'JMUFS1BHFT7BMVF$SBTI%VNQ&OBCMFE"VUPNBUJDNFNPSZEVNQ

Deploying Hyper-V Cluster on Nano Server
[ 136 ]

EFGBVMU$SBTI%VNQ&OBCMFE$PNQMFUFNFNPSZEVNQ$SBTI%VNQ&OBCMFE
BOE'JMUFS1BHFT"DUJWFNFNPSZEVNQ(FU
*UFN1SPQFSUZb1BUI),-.=4ZTUFN=$VSSFOU$POUSPM4FU=$POUSPM=$SBTI$POUSPM^
When you edit the registry to change this setting, a reboot is needed for the
12.
change to take effect.
In the final step, we will rename the cluster network names to match the function
13.
and update the cluster network roles. But before doing so, letâ€™s look at the current
cluster networks using failover cluster manager (see Figure 14):
(KIWTG%NWUVGT0GVYQTMU(CKNQXGTENWUVGTOCPCIGT

Deploying Hyper-V Cluster on Nano Server
[ 137 ]
From the management machine, run the following script to update the cluster
14.
networks. Please update the IP addresses and names according to your
environment:
6QEBUF$MVTUFS/FUXPSL/BNFTUP.BUDI'VODUJPOBOE6QEBUF$MVTUFS
/FUXPSL3PMFT$MVTUFS/"/0)7$-6(FU$MVTUFS/FUXPSL
$MVTUFS$MVTUFS]'PSNBU-JTU3FOBNF.BOBHFNFOU04/FUXPSLBOE
&OBCMFGPSDMJFOUBOEDMVTUFSDPNNVOJDBUJPO
(FU$MVTUFS/FUXPSL
$MVTUFS$MVTUFS]8IFSF0CKFDU\@"EESFTTFR^OBNF
.BOBHFNFOU04
(FU$MVTUFS/FUXPSL$MVTUFS$MVTUFS
/BNF.BOBHFNFOU043PMF3FOBNF-JWF.JHSBUJPO/FUXPSLBOE
&OBCMFGPS$MVTUFS$PNNVOJDBUJPOPOMZ
(FU$MVTUFS/FUXPSL
$MVTUFS$MVTUFS]8IFSF0CKFDU\@"EESFTTFR^OBNF
-JWF.JHSBUJPO
(FU$MVTUFS/FUXPSL$MVTUFS$MVTUFS
/BNF-JWF.JHSBUJPO3PMF3FOBNF4.#/FUXPSLBOE%JTBCMFGPS
$MVTUFS$PNNVOJDBUJPO
(FU$MVTUFS/FUXPSL$MVTUFS$MVTUFS]8IFSF
0CKFDU\@"EESFTTFR^OBNF4.#@"@#
(FU
$MVTUFS/FUXPSL$MVTUFS$MVTUFS/BNF4.#@"@#3PMF3FOBNF
#BDLVQ/FUXPSLBOE%JTBCMFGPS$MVTUFS$PNNVOJDBUJPO
(FU
$MVTUFS/FUXPSL$MVTUFS$MVTUFS]8IFSF0CKFDU\@"EESFTT
FR^OBNF#BDLVQ
(FU$MVTUFS/FUXPSL$MVTUFS$MVTUFS
/BNF#BDLVQ3PMF$POGJHVSF-JWF.JHSBUJPO/FUXPSLT(FU
$MVTUFS3FTPVSDF5ZQF$MVTUFS$MVTUFS/BNF7JSUVBM.BDIJOF]4FU
$MVTUFS1BSBNFUFS/BNF.JHSBUJPO&YDMVEF/FUXPSLT
7BMVF
<4USJOH>+PJO

(FU$MVTUFS/FUXPSL$MVTUFS$MVTUFS]8IFSF
0CKFDU\@/BNFOF-JWF.JHSBUJPO^*%

Deploying Hyper-V Cluster on Nano Server
[ 138 ]
Once you run this script, you can check Networks in failover cluster manager, as
15.
shown in Figure 15:
(KIWTG%NWUVGT0GVYQTMU4GPCOGF(CKNQXGT%NWUVGT/CPCIGT
Once Nano Server as compute cluster has been created, you can start deploying clustered
virtual machines; please refer to the next section for a sample deployment.

Deploying Hyper-V Cluster on Nano Server
[ 139 ]
Nano Server as a storage cluster
As mentioned at the beginning of this chapter, Nano Server can also be used as a storage
system. In Windows Server 2016, Microsoft added a new type of storage called S2D. S2D
enables the building of highly available storage systems with local attached disks, and
without the need for any external SAS fabric (that is, shared JBODs or enclosures).This is a
significant step forward for Microsoft in Windows Server 2016 SDS which reduces
hardware and operation costs.
In Windows Server 2016, S2D delivers us two deployment models: private cloud hyper-
converged, where S2D and the hypervisor (Hyper-V) run on the same set of hardware, or
private cloud storage, where Storage Spaces Direct is disaggregated called converged
(separate storage cluster) from the hypervisor. The hyper-converged deployment groups
compute and storage together. This simplifies the deployment model, while compute and
storage are scaled at the same time. A private cloud storage deployment separates the
compute and storage resources. This deployment model (see Figure 16) enables us to scale
compute and storage independently for larger scale-out deployments and avoids
overprovisioning:
(KIWTG5VQTCIG5&EJQKEGKOCIGUQWTEG/KETQUQHV

Deploying Hyper-V Cluster on Nano Server
[ 140 ]
This section gives the instructions to create a hyper-converged solution using S2D on top of
Nano Server in Windows Server 2016. Please note that the disaggregated, (separate storage
cluster) deployment is identically the same as the hyperconverged modell; the only
difference is the way you present the VM storage to the hypervisor. In the hyperconverged
deployment, the virtual machine's files are stored on clustered shared volume ReFS File
System ($47'4@3&'4), however, in a disaggregated model, the VM storage is presented
through scale-out File Server (file share) on top of the Clustered Shared Volume ReFS File
System ($47'4@3&'4); over SMB3 network fabric. Once S2D is configured and the storage
is available, configuring and provisioning Hyper-V is the same process and uses the same
tools that you would use with any other Hyper-V deployment on a failover cluster.
In Windows Server 2016, S2D can be deployed by using from two nodes up to sixteen
nodes. This is the minimum and maximum limit based on your fault tolerance
requirements, and what Microsoft supports. If you choose to deploy S2D with two Nodes
only, you will be limited to one failure, either drive or server, but not both, and the volume
will be limited to mirror volume (two-way mirroring) resiliency. Mirroring is like
distributed, software-defined RAID-1. It offers the fastest possible reads/writes, but isn't
very capacity efficient, because you're effectively keeping full extra copies of everything. If
you choose to deploy S2D with three Nodes, you will have the choice to increase the
number of failures from one to two; in other words, you will ensure that all data remains
safe and continuously accessible in the unlikely event that two drives fail simultaneously, or
that two nodes go down simultaneously, or one drive fails and one node goes down. With
the three nodes deployment choice, you will also be limited to mirror volume (three-way
mirroring) resiliency.
The ideal deployment is to start with four nodes; this deployment gives you the choice to
use mirroring and parity encoding at the same time, which can be referred to as mixed
resiliency, or multi-resiliency, or is sometimes called hybrid volume resiliency. This
deployment also gives you the choice to increase the number of failures from one to two
simultaneously (two drives, or two nodes, or one drive and one node). S2D needs at least
four servers to enable parity resiliency. Unlike mirroring, parity is like distributed,
software-defined RAID-5 or RAID-6. And since the same volume can be part mirror and
part parity, Resilient File System (ReFS) will automatically move data back and forth
between these tiers in real time, depending on what's hot and what's cold.

Deploying Hyper-V Cluster on Nano Server
[ 141 ]
ReFS is a new filesystem which was introduced in Windows Server 2012 and was designed
to overcome issues that had become significant over the years since NTFS was conceived. In
Windows Server 2016, Microsoft enhanced ReFS and it is now the preferred file system
deployment for Storage Spaces Direct. This updated version offers many new capabilities
for private cloud workloads, such as data integrity, resiliency to corruption and availability,
and speed and efficiency.
Mirroring volume offers faster access to data, but is not very space-efficient. On the other
hand, parity volume encoding incurs some computation time and cost to encode/decode
data, but is far more space-efficient. This multi-resiliency volume gives the best of both
worlds - fast, cheap writes of hot data, and better efficiency for cooler data.
S2D offers three volumes of resiliency type: Mirroring (two-way mirroring and three-way
mirroring), dual parity (often called erasure coding), or a mix of the two (often called multi-
resilient volume or MRV).
Please note that mirror volumes is faster than any other type of resiliency.
Microsoft coupled ReFS in Windows Server 2016 with the S2D scenario. They recommend
running ReFS on S2D and Storage Spaces, and NTFS elsewhere; therefore, the story behind
ReFS is the following technologies used together: ReFS, S2D, Storage Spaces, Multi-
Resiliency Volume, and the S2D cache.
Finally, you can refer to the S2D calculator at IUUQBLBNTTEDBMD, which will help you
to efficiently size your storage deployment.
Deploying storage spaces direct on top of Nano
Server
As we expect Hyper-V to become an important role for Nano Server, we would also expect
that Nano Server will play a vital role as a software-defined storage host as well. The good
news is that S2D works the same as on any Windows Server (Server with Desktop
Experience, Server Core and Nano Server).
For more information about Storage Spaces Direct in Windows Server 2016, please check
the following article:
IUUQTEPDTNJDSPTPGUDPNFOVTXJOEPXTTFSWFSTUPSBHFTUPSBHFTQBDFTTUPSB
HFTQBDFTEJSFDUPWFSWJFX.

Deploying Hyper-V Cluster on Nano Server
[ 142 ]
This section includes instructions on how to install and configure the components of
Storage Spaces Direct in a hyper-converged model using Windows Server 2016 on top of
four Nano Servers. The hardware we are using in this example is the following:
4 HP DL380 Gen 9, 2 X E5-2690v3, 256 GB Memory, 2 X 120 GB SATA SSD
RAID-1 for the OS, 4X2 TB SATA HDD 7.2K RPM, 4X960 GB SATA SSD. HPE
H240 12 GB 2-ports smart HBA, and two dual-port 10/25 GBE network interface
controllers (NICs): HPE 10/25 GB/s 2-port 640 SFP28 Ethernet adapter and the
HPE 10/25 GB/s 2-port 640 FLR-SFP28 Ethernet adapter. Both adapters are based
on the Mellanox connect-XÂ®-4 Lx 10/25 GBE controller (top of rack switch Cisco
Nexus 3172 PQ-XLBIOS: version 3.4.0).
As you can see from this list, we have two Mellanox connect-XÂ®-4 NICs (dual port, 10/25
GB). Both dual NICs support RDMA. However, in this example, the first Mellanox NIC will
be used for normal management and VM traffic (management traffic includes live
migration, backup, cluster, and OS management). We will use the second Mellanox NIC for
the storage traffic.
Since we have four physical NICs, it's better to keep two standalone NICs for RDMA and
use the other two for SET virtual switch. There are other reasons to do so, for example, if
you plan to use SDN on top of S2D in the future. With this setup, storage NICs will be
transparent and not managed by network controller, making it much easier to integrate
both features. However, if you have only two physical NICs, then virtual RDMA (vRDMA),
with management, cluster, SMB1, and SMB2 vNICs is the way to go, as we did in the
Deploying Nano Server as a Hyper-V cluster section.
A question that you may ask is, how can we limit S2D SMB traffic on a specific NIC, since
all traffic is considered as SMB? By default, SMB-multichannel (S2D) will automatically
select only the RDMA adapters for SMB traffic, therefore if you need to force S2D traffic
over dedicated NICs, then do not enable RDMA on the vNICs which are created on top of
SET virtual switch. You need to enable RDMA only on the other two physical NICs. In
Windows Server 2016, we don't have a network constraint feature for S2D as we have with
storage replica. Storage replica is out of the scope of this book.
The act of deploying a hyper-converged system can be divided into three high-level phases:
Creating and deploying Nano Server images
Configuring the network
Creating and configuring S2D

Deploying Hyper-V Cluster on Nano Server
[ 143 ]
Since most of the steps are covered in the Deploying Nano Server as a Hyper-V cluster section
at the beginning of this chapter, we will refer to them while deploying the hyper-converged
system to minimize repetitive tasks - at the same time, we will highlight the new steps
about configuring S2D. Please refer also to the information section at the beginning that we
need as input as well.
Creating and deploying Nano Server images
This section describes how to create the Nano Server VHD(X) file to be used on physical
machines using the pre-installed device drivers. We need to create a VHD(X) that includes
the OEM drivers, storage, and failover clustering features including SCVMM packages, and
that enables remote management and emergency management services.
Nano Server on a bare-metal (physical machine) can be deployed using multiple options;
please refer to $IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical
Hardware, for the complete details. In this guide, we will use the boot from VHDX option.
Please refer to the Deploying Nano Server as compute host section at the beginning of this
chapter for more information.
The following steps will illustrate the OS deployment process:
In the first step, you will create a unique image for each Nano storage host. We
1.
need four images one for each physical machine in the hyper-converged system,
so we will create a VHDX for a physical machine that includes the SCVMM and
DCB packages by running the following script on the management machine
which is a member of the same domain where the Nano Server will be deployed.
The script will prompt you for an administrator password for the new VHDX
(type carefully and note your password for later use; you will use this password
later to log in to the new Nano Servers):
&YBNQMFEFGJOJUJPOPGWBSJBCMFBOEWBMVFTGPSIZQFSDPOWFSHFE
4%*NQPSU/BOP4FSWFS*NBHF(FOFSBUPSQTE1PXFS4IFMMNPEVMF*NQPSU
.PEVMF$=/BOP4FSWFS=/BOP4FSWFS*NBHF(FOFSBUPS=/BOP4FSWFS*NBHF(FOFSB
UPSQTE7FSCPTF&OUFS"ENJOJTUSBUPS1BTTXPSE1BTTXPSE3FBE)PTU
1SPNQU1MFBTFTQFDJGZMPDBM"ENJOJTUSBUPSQBTTXPSE"T4FDVSF4USJOH
%PNBJO/BNFNZ%PNBJO'2%/`7*35-"#a4FSWJDJOH6QEBUF
1BDLBHFT4FSWJDJOH1BDLBHF!
$=/BOP4FSWFS=6QEBUFT=4FSWJDJOH4UBDL
6QEBUF=8JOEPXT,#YNTV
$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF6QEBUF=8JOEPXT,#
YNTV/BOP1BDLBHFT/BOP1BDLBHF!
.JDSPTPGU/BOP4FSWFS%$#1BDLBHF.JDSPTPGU
/BOP4FSWFS4$7..1BDLBHF.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF

Deploying Hyper-V Cluster on Nano Server
[ 144 ]
1BDLBHF]'PS&BDI0CKFDU\/FX/BOP4FSWFS*NBHF
#BTF1BUI$=/BOP4FSWFS=A
5BSHFU1BUI$=/BOP4FSWFS=/"/04374%@WIEYA
.BY4J[F(#A
%FQMPZNFOU5ZQF)PTUA
&EJUJPO%BUBDFOUFSA
$PNQVUFS/BNF/"/04374%@A
"ENJOJTUSBUPS1BTTXPSE1BTTXPSEA
%PNBJO/BNFNZ%PNBJO'2%/A
3FVTF%PNBJO/PEFA
4UPSBHFA
$MVTUFSJOHA
1BDLBHF/BOP1BDLBHFA
0&.%SJWFSTA
%SJWFST1BUI%=/BOP4FSWFS=)1/BOPA
&OBCMF3FNPUF.BOBHFNFOU1PSUA
&OBCMF&.4A

4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHFA
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYFT
8&VSPQF4UBOEBSE5JNF	
^
We have included a 4UPSBHF parameter in the image.
Copy the VHDX files that you created in Step 1 to each respective machine and
2.
configure each host machine to boot from the new VHDX. Please refer to the
Creating the new Nano Server images section in this chapter for the complete details.
Reboot the host machines. They will automatically boot into the new Nano
3.
Server. After the host machines are booted, log into the Nano Recovery Console,
and note the IP address of each Nano Server. You will use these IP addresses to
connect to Nano Server and configure the network in the next section.
Configuring the network
The following example assumes that you already have two dual RDMA NIC ports in each
node. As mentioned earlier, the Hyper-V virtual switch must be deployed in SET with
RDMA-enabled host virtual NICs.

Deploying Hyper-V Cluster on Nano Server
[ 145 ]
The configuration for this example is based on a network adapter that implements RDMA
using RoCEv2 from Mellanox. Network QoS for this type of RDMA requires that the Top of
Rack switches have a specific capabilities set called Data Center Bridging (DCB) and PFC
enabled.
Open Windows PowerShell on the management machine and run the following commands
using *OWPLF$PNNBOE to connect and configure the network on each Nano Server:
Set a network QoS policy for SMB, which is the protocol that the software-
1.
defined storage system uses:
$SFE/FXPCKFDUUZQFOBNF4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
BSHVNFOUMJTU="ENJOJTUSBUPS
$POWFSU5P4FDVSF4USJOH184
"T1MBJO5FYU'PSDF/PEFT/"/04374%/"/04374%/"/0437
4%/"/04374%*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT
$SFEFOUJBM$SFE4DSJQU#MPDL\/FX/FU2PT1PMJDZ4.#
/FU%JSFDU1PSU.BUDI$POEJUJPO1SJPSJUZ7BMVF"DUJPO^
Turn on flow control for SMB:
2.
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL\
&OBCMF/FU2PT'MPX$POUSPM1SJPSJUZ^
Make sure the flow control is off for other traffic:
3.
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE
4DSJQU#MPDL\%JTBCMF/FU2PT'MPX$POUSPM1SJPSJUZ^
In this step, we will apply the network QoS policy to the target RDMA adapters.
4.
Use the name of the target adapters as shown in the following example. And
since we will use one port from each Mellanox card for fault tolerance, we will
apply the Network QoS respectively on each NIC interface on a different card.
Please make sure to update the NIC names based on your environment:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\
&OBCMF/FU"EBQUFS2P4/BNF)1&4'1&OBCMF/FU"EBQUFS2P4
/BNF)1&'-34'1^

Deploying Hyper-V Cluster on Nano Server
[ 146 ]
In this step, we will create a Traffic class and give SMB 50% of the bandwidth
5.
minimum. In this example, the SMB traffic (live migration, backup, and so on)
has 50% of the bandwidth at least and the VM traffic will share the remaining
50%:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\/FX/FU2PT5SBGGJD$MBTT4.#1SJPSJUZ#BOEXJEUI1FSDFOUBHF
"MHPSJUIN&54^
Please make sure to configure Priority Flow Control (PFC) and Datacenter
6.
Bridging (DCB) on the physical TOR switches; please refer to the example
covered in Step 9 on deploying Nano as a compute cluster, Configure the Network
section.
In this step, we will create the Hyper-V virtual SET which is connected to both
7.
physical NIC adapters, and enable RDMA vNIC. We will select one NIC from
each of the dual Mellanox adapters for fault tolerance:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\/FX7.4XJUDI/BNF4&5W4XJUDI/FU"EBQUFS/BNF
)1&4'1)1&'-34'1&OBCMF&NCFEEFE5FBNJOHUSVF^
While creating the vSwitch, you may notice a message that your PowerShell
session lost connection. This is expected and your session will reconnect.
In this step, we will add host vNICs to the SET switch. This configures a virtual
8.
NIC (vNIC) from the virtual switch that you just configured in Step 6 for the
management OS to use. As shown in the following example, we will add three
host vNICs for live migration, cluster, and backup. The host management vNIC is
automatically added when we create the SET virtual switch. As for SMB traffic,
we will use the two remaining physical NIC ports:
*OWPLF$PNNBOE$PNQVUFS/BNF/PEFT$SFEFOUJBM$SFE4DSJQU#MPDL
\"EE7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI/BNF-JWF.JHSBUJPO
NBOBHFNFOU04"EE7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI/BNF
$MVTUFSNBOBHFNFOU04"EE7./FUXPSL"EBQUFS4XJUDI/BNF4&5W4XJUDI/BNF
#BDLVQNBOBHFNFOU04
^

Deploying Hyper-V Cluster on Nano Server
[ 147 ]
Next, we need to set the IP address for each host vNIC accordingly. The
9.
following script will automate the IP address assignment on all nodes including
the SMB NICs:
/VNCFSPG/PEFTJO4%IZQFSDPOWFSHFE$MVTUFS4FSWFS$PVOU
4.#@BOE4.#@/FUXPSL*%GPSOPEFT4.#@*%#BDLVQ
/FUXPSL*%GPSOPEFT#BDLVQ@*%4UBSU*1BEESFTTGPS
OPEFT#BDLVQ@/FUXPSL4.#@/FUXPSL'PS
JJMF4FSWFS$PVOU
J\4.#@*14.#@*%4.#@/FUXPSL#BDLVQ@*1#BDLVQ@*%#BDLVQ@/FU
XPSL*OWPLF$PNNBOE$PNQVUFS/BNF/"/04374%J$SFEFOUJBM$SFE
4DSJQU#MPDL\1BSBN
4.#@/FUXPSL4.#@*%4.#@*1#BDLVQ@*1
/FX/FU*1"EESFTT*OUFSGBDF"MJBT)1&4'1*1"EESFTT4.#@*1
1SFGJY-FOHUI`a
5ZQF6OJDBTU4.#@/FUXPSL4.#@*14.#@*14.#@*%4.#@/FUXPSL/FX
/FU*1"EESFTT*OUFSGBDF"MJBT)1&'-34'1*1"EESFTT4.#@*1
1SFGJY-FOHUI`a5ZQF6OJDBTU/FX/FU*1"EESFTT
*OUFSGBDF"MJBTW&UIFSOFU
#BDLVQ*1"EESFTT#BDLVQ@*1
1SFGJY-FOHUI`a5ZQF6OJDBTU
^
"SHVNFOU-JTU4.#@/FUXPSL4.#@*%4.#@*1#BDLVQ@*1#BDLVQ@/FUXPSL
4.#@/FUXPSL4.#@/FUXPSL^
Please update the interface alias names and IP addresses based on your
10.
environment.
In the final step, we need to disable DNS registration for storage, cluster, backup,
11.
and live migration network adapters; we need also to configure the host vNICs
and pNICs to use a different VLAN and enable RDMA on each one. Please make
sure the VLANs are also defined on top of rack switches. Please refer to the
example in step 15 through step 19 on deploying Nano Server as Hyper-V cluster
Configure the Network section.
Creating and configuring Storage Spaces Direct
Configuring S2D in Windows Server 2016 includes the following steps:
In this step, we will run the cluster validation tool to ensure that the Nano nodes
1.
are configured correctly to create the hyper-converged cluster using S2D:
5FTU4%IZQFSDPOWFSHFEDMVTUFS/PEFT/"/0437
4%/"/04374%/"/04374%/"/04374%5FTU
$MVTUFS/PEF/PEFT*ODMVEF*OWFOUPSZ/FUXPSL4ZTUFN
$POGJHVSBUJPO`4UPSBHF4QBDFT%JSFDUa7FSCPTF

Deploying Hyper-V Cluster on Nano Server
[ 148 ]
The output report should look something like this (see Figure 17):
(KIWTG(CKNQXGTENWUVGTXCNKFCVKQPTGRQTV
In this step, we will create the S2D cluster with four nodes using the following
2.
PowerShell command.
It is important to add the /P4UPSBHF parameter to the cmdlet, otherwise the disks may be
automatically added to the cluster and they will not be included in the S2D storage pool:
/FX$MVTUFS/BNF/"/04%$-6/PEF/PEFT/P4UPSBHF
4UBUJD"EESFTT*HOPSF/FUXPSL
7FSCPTF
In this step, we will configure the cloud witness. We will use the same Azure
3.
storage account OBOPIWDMPVEXJUOFTT that we created in step 3 of the, Creating
and configuring a Hyper-V cluster section. Please update the "DDFTT,FZ
parameter with your key accordingly:
4FU$MVTUFS2VPSVNb$MVTUFS/"/04%$-6b$MPVE8JUOFTTb"DDPVOU/BNF
OBOPIWDMPVEXJUOFTTb"DDFTT,FZ"DDFTT,FZ 
Please refer to step 11 of the Creating and configuring a Hyper-V cluster section to set
4.
the cluster memory dump to Active memory dump.

Deploying Hyper-V Cluster on Nano Server
[ 149 ]
Please refer to step 14 of the Creating and configuring a Hyper-V Cluster section to
5.
rename the cluster network names to match the function, and update the cluster
network roles.
After we create the cluster, we will enable the cluster storage Spaces Direct,
6.
which will put the storage system into the S2D mode and do the following
automatically:
Create a pool: Creates a single large pool.
Configure S2D cache: If you are using multiple device types (NVMe,
SSD, or HDD), the fastest are automatically used as a cache. Each faster
device binds dynamically to several slower devices, to accelerate I/O
for consistent low latency. These devices do not contribute to the
overall capacity, since everything stored in cache is also stored
elsewhere. It's strongly recommend to have a minimum of two cache
drives to preserve performance if one cache drive fails.
If you are using one medium type only (that is, SSD,
HDD, or NVMe), you can disable the autoconfiguration
of the S2D cache by adding the "VUP$POGJH
parameter to the &OBCMF$MVTUFS4% cmdlet; in this
case, the Software Storage Bus cache will not be active
and you need to configure it manually. Please note that
S2D uses a combination of bus type and media type to
find cache devices. You cannot use devices partially for
cache and the rest for capacity. The fastest devices will
be either cache or capacity.
Tiers: S2D automatically created two storage tiers (known as
resiliency) a mirror tier and a parity tier. The parity tier is called
capacity and the mirror tier is called performance. The &OBCMF
$MVTUFS4% command analyzes the devices and configures each tier
with the mix of device types and resiliency, in other words, the storage
tier details depend on the storage devices in the system, and thus vary
from system to system.
Based on the storage that we have in each node, this results in 8.0 TB of HDDs and 3.8 TB of
SSDs per node without fault tolerance. If you used the auto-configuration mode when
enabling S2D cluster, all the SSDs will be consumed as cache and they will not contribute to
storage in the traditional sense. The storage pool will only have four disks x 4 nodes x 2 TB
HDD (32 TB) of total, physical RAW capacity you can use.

Deploying Hyper-V Cluster on Nano Server
[ 150 ]
In this example, the usable capacity based on four nodes, two simultaneous hardware
failures, and all SSDs will be used for cache only this results in 16 TB of usable capacity
across the entire storage system.
If we use all the pool's space, we could create four volumes, each with 4 TB (4 TB x 8 TB = 32
TB). The consequence, which you should be aware of, is that if you experience a drive
failure, Storage Spaces will not be able to do an immediate and in-place repair, meaning it
will successfully repair only after you have replaced the physical failed device. If, instead,
we reserve at least 2 TB of free space in the pool, then S2D will be able to restore resiliency
immediately after drives fail, even before they are replaced.
However, and based on this example, Microsoft recommend setting aside 4 TB for in-place
recovery (leaving two drives' worth, but it's just a recommendation). This value is based on
your chosen fault tolerance; in this example, it's two and the largest drive is 2 TB.
At certain scales, they may recommend more, because repairs are constrained to happen on
the local node. The 4 TB value above includes this consideration. Please note that this is a
recommended reserve and is not enforced; if you don't have enough, repairs should simply
wait for the replacement drive to complete.
In this example, if we create four volumes, each with 3.5 TB instead of 4 TB, they'll occupy 7
TB of footprint on the disk each (4 TB x 7 TB = 28 TB) RAW after reserve. This will leave 4
TB for in-place repair. This results in 14 TB of usable capacity across the entire storage
system.
From the management machine, open Windows PowerShell and enable S2D by running the
following command:
&OBCMF4UPSBHF4QBDFT%JSFDU$MVTUFS/"/04%$-6&OBCMF
$MVTUFS4UPSBHF4QBDFT%JSFDU$JN4FTTJPO$MVTUFS
You can also use the node name instead of the cluster name when enabling
S2D using the previous command.
With the two storage tiers automatically created by S2D, you can now create the following
volumes:
Mirror WPMVNFT (performance)
Parity volumes (capacity)
Multi-resilient volumes (Performance, and capacity)

Deploying Hyper-V Cluster on Nano Server
[ 151 ]
But before creating the volumes, let's check the supported storage size for each tier
(performance, capacity) by running the following commands:
(FU4UPSBHF5JFS4VQQPSUFE4J[F'SJFOEMZ/BNF1FSGPSNBODF$JN4FTTJPO$MVTUFS
]4FMFDU!\M5JFS4J[F.JO
(#F\@5JFS4J[F.JO(#^^!\M1FSGPSNBODF5JFS4J
[F.BY
5#F\@5JFS4J[F.BY5#^^!\M5JFS4J[F%JWJTPS
(#F\@5JFS4J[F
%JWJTPS(#^^(FU4UPSBHF5JFS4VQQPSUFE4J[F'SJFOEMZ/BNF$BQBDJUZ
$JN4FTTJPO$MVTUFS
]4FMFDU!\M5JFS4J[F.JO
(#F\@5JFS4J[F.JO(#^^!\M$BQBDJUZ5JFS4J[F.
BY
5#F\@5JFS4J[F.BY5#^^!\M5JFS4J[F%JWJTPS
(#F\@5JFS4J[F%JW
JTPS(#^^
The output will look something like this (see Figure 18):
(KIWTG5VQTCIG6KGT5WRRQTVGF5K\G
In this example, we have 0 TB of size on the performance (mirror) tier and around 18 TB of
size on the capacity (parity) tier. We will keep 4 TB as reserve for immediate and in-place
repair.
If you have four servers, you will experience more consistent performance
with eight total volumes than with seven or nine. This allows the cluster to
distribute volume ownership (one server handles metadata orchestration
for each volume) evenly among servers.

Deploying Hyper-V Cluster on Nano Server
[ 152 ]
In this example, since we have four nodes, we will create four capacity (parity) volumes,
one volume per node.
From the management machine, open Windows PowerShell and run the following script:
$SFBUFGPVS$BQBDJUZ7PMVNFT5#FBDI/PEFT/"/04374%/"/0437
4%/"/04374%/"/04374%'PSFBDI
/PEFJO/PEFT\/FX7PMVNF
$JN4FTTJPO/PEF4UPSBHF1PPM'SJFOEMZ/BNF4%'SJFOEMZ/BNF/PEF
'JMF4ZTUFN$47'4@3&'44UPSBHF5JFS'SJFOEMZ/BNF$BQBDJUZ4UPSBHF5JFS4J[FT5#^
You can inspect the four volumes created above by the running the following command:
*OTQFDUUIFWPMVNFT(FU7JSUVBM%JTL$JN4FTTJPO$MVTUFS](FU
4UPSBHF5JFS]'5'SJFOEMZ/BNF3FTJMJFODZ4FUUJOH/BNF.FEJB5ZQF!\M4J[F
5#F
\@4J[F5#^^BVUPTJ[F
In this step, we will rename the volumes to their friendly names and distribute
1.
the volumes across all nodes.
Open Windows PowerShell from the management machine and run the
2.
following commands:
3FOBNF7PMVNFGSJFOEMZOBNFTBOENPVOUQPJOUT
BDDPSEJOHMZ$47'4(FU$MVTUFS4IBSFE7PMVNF
$MVTUFS$MVTUFS'PSFBDI
7PMJO$47'4
\*G
7PM4IBSFE7PMVNF*OGP'SJFOEMZ7PMVNF/BNFNBUDI	7PMVNF=E	\
*G
7PM/BNFNBUDI	=

=	\
.BUDI4USNBUDIFT<>NPVOUQPJOU
WPM4IBSFE7PMVNF*OGP'SJFOEMZ7P
MVNF/BNFSFQMBDF	$		$	WPM/BNF.BUDI4US
0XOFS/PEF
WPM0XOFS/PEF/BNF3FOBNF*UFN
1BUI==0XOFS/PEF=NPVOUQPJOU/FX/BNF.BUDI4US^
^
^%JTUSJCVUFUIF7PMVNFTBDSPTTUIFGPVS
OPEFT'PSFBDI
/PEFJO/PEFT\(FU$MVTUFS4IBSFE7PMVNF
$MVTUFS$MVTUFS$MVTUFS/PEF].PWF$MVTUFS4IBSFE7PMVNF/PEF/PEF^

Deploying Hyper-V Cluster on Nano Server
[ 153 ]
The result in failover cluster manager and in the file system will look something like this
(see Figure 19):
(KIWTG(CKNQXGT%NWUVGT/CPCIGT8KTVWCN&KUMU
In the final step, we will deploy a virtual machine on the nodes of the hyper-
3.
converged S2D cluster.
In this example, the virtual machine's VHDX files are stored on the clustered
4.
Shared Volume ReFS File System namespace just like clustered VMs on failover
clusters. The storage cluster path is $=$MVTUFS4UPSBHF=.
You may use Windows PowerShell, Hyper-V Manager, or failover cluster
5.
manager tools to manage the storage and virtual machines, including System
Center VMM.

Deploying Hyper-V Cluster on Nano Server
[ 154 ]
Open Windows PowerShell from the management machine and run the
6.
following script to create a clustered VM on top of the hyperconverged S2D
cluster:
$SFBUFGPVS$MVTUFSFE7.TPOIZQFSDPOWFSHFE4%
DMVTUFSW4XJUDI/BNF4&5W4XJUDI$MVTUFS/"/04%
$-6]'PS&BDI0CKFDU\/FX7.$PNQVUFS/BNF/"/04374%@
/BNF%&.07.@.FNPSZ4UBSUVQ#ZUFT.#
7)%1BUI$=$MVTUFS4UPSBHF=W%JTL@=%&.07.@=%&.07.@WIEY
4XJUDI/BNFW4XJUDI/BNF1BUI$=$MVTUFS4UPSBHF=W%JTL@=
(FOFSBUJPO4FU7.$PNQVUFS/BNF/"/04374%@/BNF%&.07.@
1SPDFTTPS$PVOU3FOBNF7.OFUXPSLJOUFSGBDF(FU
7./FUXPSL"EBQUFS$PNQVUFS/BNF/"/04374%@7./BNF%&.0
7.@]3FOBNF7./FUXPSL"EBQUFS/FX/BNFWN/*$.BLFUIF7.
IJHIMZBWBJMBCMF"EE$MVTUFS7JSUVBM.BDIJOF3PMF$MVTUFS$MVTUFS
7./BNF%&.07.@4UBSU$MVTUFSFE7.$MVTUFSFE7.(FU
$MVTUFS3FTPVSDF$MVTUFS$MVTUFS/BNF]8IFSF\@3FTPVSDF5ZQF
FR7JSUVBM.BDIJOFBOE@4UBUFFR0GGMJOF^4UBSU
$MVTUFS3FTPVSDF$MVTUFS$MVTUFS/BNF$MVTUFSFE7.^
The result in failover cluster manager will look something like this (see Figure 20):
(KIWTG(CKNQXGTENWUVGTOCPCIGTXKTVWCNOCEJKPGU

Deploying Hyper-V Cluster on Nano Server
[ 155 ]
Summary
In this chapter, we covered the required steps needed to deploy Nano Server as a compute,
storage, and hyperconverged cluster using S2D technology, and an introductory overview
of the following topics:
Nano Server as a compute cluster
Nano Server as a storage cluster
As discussed earlier in this chapter, Nano Server was created to serve as cloud fabric and
infrastructure for a software-defined datacenter (Hyper-V, storage, clustering, and
networking).
Continue now to $IBQUFS, Deploying, Managing, and Monitoring Nano Server with System
Center 2016, to learn more about how to manage and monitor Nano Server with System
Center 2016 Virtual Machine Manager and System Center 2016 Operations Manager.

5
Deploying, Managing, and
Monitoring Nano Server with
System Center 2016
In $IBQUFS, Deploying Hyper-V Cluster on Nano Server, we covered how to create a Hyper-
V cluster on top of a Nano Server installation and we also covered Hyper-converged
deployment with Nano Server and Storage Spaces Direct.
As discussed in this book, there are a variety of ways you can deploy and manage a Nano
Server installation. However, System Center 2016 plays a vital role in deploying, managing,
and monitoring a large Nano Server deployment at scale.
In this chapter, we will cover the following topics:
Deploying Nano Server with System Center Virtual Machine Manager 2016
Managing Nano Server with System Center Virtual Machine Manager 2016
Monitoring Nano Server with System Center Virtual Machine Manager 2016

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 157 ]
Deploying Nano Server with system center
virtual machine manager 2016
If you are familiar with System Center Virtual Machine Manager (SCVMM) deployment
methods, Nano Server deployment is mainly the same compared to Server with Desktop
Experience and Server Core. The user experience with Nano Server using the SCVMM
console is completely the same, except for bare-metal (physical machine) and server-based
VM domain join deployment. The virtual hard disk VHD(X) you want to use for the
physical computer profiles will be a Nano Server VHD(X) including SCVMM packages.
In this section, we will cover how to deploy Nano Server as a Hyper-V host in VMM using
bare-metal deployment, and we will also cover how to deploy domain-join Nano Server as
a virtual machine using VM templates.
VMM bare-metal deployment
The procedures in this section describe how to use VMM to discover physical computers on
the network, automatically install Nano Server, and provision the computers into managed
Hyper-V hosts or host clusters.
This section will also describe how to create a Nano Server VHD(X) image for bare-metal
deployment using the pre-installed device drivers. We need to create a VHD(X) that
includes the OEM drivers, storage, and failover clustering features, including SCVMM
packages, and enable remote management and emergency management services. If your
hardware needs a specific set of drivers that are not included in the OEM drivers (for
example to boot or connect to a network), then you need to use the %SJWFST1BUI
parameter and add the needed drivers to the image.
Preparing a Nano Server VHD(X) for a physical machine
Before you start deploying Nano Server to a bare-metal machine, you need to make sure the
following packages are added to the Nano Server image that we will use in the steps that
follow.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 158 ]
The packages are listed in the following order:
Adding the SCVMM package, .JDSPTPGU/BOP4FSWFS4$7..1BDLBHF, will
1.
ensure that the VMM agent is part of the image.
Adding the SCVMM compute package, .JDSPTPGU/BOP4FSWFS4$7..
2.
$PNQVUF1BDLBHF, will ensure that the image has the Hyper-V role enabled and
you can manage the physical host using SCVMM.
For the File Server role, use 4UPSBHF along with .JDSPTPGU/BOP4FSWFS
3.
4$7..1BDLBHF.
For the clustering feature, use $MVTUFSJOH along with .JDSPTPGU
4.
/BOP4FSWFS4$7..1BDLBHF.
For the Hyper-Converged model, use 4UPSBHF and $MVTUFSJOH along with
5.
.JDSPTPGU/BOP4FSWFS4$7..1BDLBHF and .JDSPTPGU/BOP4FSWFS
4$7..$PNQVUF1BDLBHF.
.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF: Includes services
for monitoring a Hyper-V host using SCVMM .JDSPTPGU/BOP4FSWFS
4$7..1BDLBHF: Includes services for monitoring a physical or virtual
machine using SCVMM
If you install .JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF, then do not use the 
$PNQVUF parameter for the Hyper-V role, because this server will be managed by VMM and
already has the compute option added by the SCVMM compute package.
It's very important to add the packages in the right order as shown in the example below or
the deployment will fail.
The following steps will illustrate this process:
Mount the Windows Server 2016 ISO medium on your machine. In this example,
1.
it's mounted under the ) drive.
Start Windows PowerShell as an administrator, and run the following script to
2.
create a VHD for physical machine deployment that includes the SCVMM
packages. You will be prompted for an administrator password:
SFHJPOWBSJBCMFT$PNQVUFS/BNF	/"/0437)7	4UBHJOHQBUI
GPSOFX/BOPJNBHF4UBHJOH1BUI	$=	1BUIUP8JOEPXT4FSWFS
*40GJMF.FEJB1BUI	)=	%SJWFS1BUI	$=/BOP4FSWFS=)1&
%SJWFST	1BUI+PJO1BUI1BUI4UBHJOH1BUI
$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU1SPNQU1MFBTFTQFDJGZ
MPDBM"ENJOJTUSBUPSQBTTXPSE"T4FDVSF4USJOHFOESFHJPOSFHJPO
$PQZTPVSDFGJMFTJG
OPU
5FTU1BUI4UBHJOH1BUI\

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 159 ]
NLEJS4UBHJOH1BUI
^JG
OPU
5FTU1BUI1BUI\
/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI
$IJME1BUI/BOP4FSWFS3FTPMWF$PQZ*UFN
1BUI/BOP4FSWFS4PVSDF1BUI%FTUJOBUJPO4UBHJOH1BUI3FDVSTF^
FOESFHJPOSFHJPO(FOFSBUF/BOP*NBHF*NQPSU.PEVMF/BNF
+PJO
1BUI1BUI1BUI$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF
4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXT
LCYNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXTLCYNTV	
/BOP4FSWFS*NBHF1BSBNFUFST!\
$PNQVUFS/BNF$PNQVUFS/BNF.FEJB1BUI.FEJB1BUI#BTF1BUI

+PJO1BUI1BUI1BUI$IJME1BUI$PNQVUFS/BNF
WIEGPS#*04BOEWIEYGPS6&'*TZTUFN5BSHFU1BUI+PJO
1BUI1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIE	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE$MVTUFSJOHUSVF1BDLBHF
	.JDSPTPGU/BOP4FSWFS4UPSBHF1BDLBHF		.JDSPTPGU/BOP4FSWFS
4$7..1BDLBHF		.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF	
0&.%SJWFSTUSVF%SJWFS1BUI%SJWFS1BUI
&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF&OBCMF&.4USVF
%FQMPZNFOU5ZQF	)PTU	&EJUJPO	%BUBDFOUFS	
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHF1BUI^
/FX/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFST
7FSCPTFFOESFHJPO
The previous script will create a VHD image file using the Windows Server 2016 ISO
mounted as )= drive. When creating the VHD, it uses a folder called /BOP4FSWFS located
on the root $ drive. The 7)% file is placed under the same folder and called /"/0437)7.
In this example, the computer name is set to /"/0437)7 including the OEM drivers and
external drivers for HPE ProLiant servers. If the server uses UEFI to boot instead of BIOS,
then you need to change /"/0437)7WIE to /"/0437)7WIEY. We enabled the
remote management port and EMS. Finally, we added the latest Windows Server updates.
If you forgot to add the SCVMM packages while creating the Nano Server
image, you can add them later using online or offline methods. More on
that in the next section.
Copy the VHD image to the 7.. library.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 160 ]
Add a Preboot Execution Environment (PXE) Server to the VMM fabric by carrying out the
following steps:
Click Fabric|Servers|Add|Add Resources|PXE Server.
1.
In Computer name specify the PXE server name as shown in Figure 1.
2.
Add the credentials for an account that has local administrator permissions on
3.
the WDS server.
In the Jobs view verify that the job status is Completed successfully. Verify that
4.
the PXE server is added in Fabric| Servers|PXE Servers|Home|Show|Fabric
Resources|PXE Servers. The agent status should be Responding.
PXE is a specification that defines how a client-server environment boots
from network software on a client. It needs standard network protocols,
such as DHCP and TFTP. In this example, we will use Windows
Deployment Services (WDS): a server technology made by Microsoft for
the network-based installation of Windows operating systems.
(KIWTG#FFKPI2:'5GTXGTKPXKTVWCNOCEJKPGOCPCIGT

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 161 ]
When you install Windows deployment services you should install both the deployment
server and transport server options. You don't need to add any images to WDS. During host
deployment, VMM uses the virtual hard disk that we've created earlier and is stored in the
7.. library. In addition, you don't need to configure any settings on the PXE Response tab.
VMM offers its own PXE provider.
The PXE (WDS) server must be in the same subnet as the physical Nano Servers that you
want to provision.
When you add a PXE server into VMM, you must specify an account that has local
administrator permissions on the PXE (WDS) server. You can enter a user name and
password or specify a run as account predefined in VMM.
If your new physical server needs special drivers, your Windows Server image may not
include those drivers, the bare-metal deployment will fail due to not being able to connect
to the network since the WinPE image does not include those drivers; therefore you need to
inject them manually and then update the 8JO1& file in VMM by carrying out the following
steps:
Copy the #PPUXJN file from the WDS server from the following location:
1.
&=3FNPUF*OTUBMM=%$.HS=#PPU=8*OEPXT=*NBHFT (your setup probably has
another drive letter).
See $IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical
2.
Hardware, the Installing and Configuring the WDS Role section, on how to mount
the #PPUXJN file, add the custom drivers, then unmount the image using the
DISM tool.
Copy the updated #PPUXJN file to VMM and update the WinPE image by
3.
running the following command:
1VCMJTI4$8JOEPXT1&1BUI%=#PPUXJN

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 162 ]
Create a physical computer profile using the VHD generated earlier by carrying out the
following steps:
Click Library|Home|Create|Physical Computer Profile.
1.
In the New Physical Computer Profiles Wizard|Profile Description, type in a
2.
name and description and select VM host.
In OS Image|Virtual hard disk file|Browse, click the generalized Nano Server
3.
VHD that you added to the 7.. library share as shown in Figure 2:
(KIWTG6JGYK\CTFHQTETGCVKPICRJ[UKECNEQORWVGTRTQaNGHQT0CPQ5GTXGT

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 163 ]
If you are using VHDX for UEFI systems, and you are wondering why the image
4.
is not shown when you browse to choose a VHD, then you need to make sure
that you specify and label the OS image in 7.. library as Windows Server 2016
(standard or datacenter).
In Hardware Configuration|Management NIC select the network adapter you'll
5.
use to communicate with VMM and whether to use DHCP or a static address.
In Disk and Partitions, specify the partitioning scheme for the first disk. In this
6.
example, we are using MBR because the physical computer profile is BIOS. You
can use GPT for UEFI systems.
In OS Configuration specify the domain that the Nano physical computer should
7.
join including Run As account. Specify the credentials for the local administrator
account.
Click through to complete the wizard. You've now constructed a physical
8.
computer profile that you can use to deploy Nano Server on a bare-metal
machine.
Once the physical computer profile is created and the PXE Server is added, you can now
provision the bare-metal machine into a managed Nano Hyper-V host by carrying out the
following steps:
In the Add Resource Wizard|Resource location, select Physical computers to be
1.
provisioned as virtual machine hosts.
Click Fabric Servers|Home|Add|Add Resources|Hyper-V Hosts and Clusters.
2.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 164 ]
In Credentials and Protocol select Run As account with permissions to access the
3.
Baseboard Management Controller (BMC) of your server (please refer to your
hardware vendor). In the Protocol list, click the out-of-band management
protocol that your BMCs use as shown in Figure 3:
(KIWTG6JGYK\CTFHQTCFFKPITGUQWTEG%TGFGPVKCNUCPF2TQVQEQN

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 165 ]
In Discovery Scope, specify the IP address scope that includes the IP addresses of
4.
the BMCs as shown in Figure 4. You can enter a single IP address, an IP subnet, or
an IP address range. Select Skip deep discovery:
(KIWTG6JGYK\CTFHQTCFFKPITGUQWTEG&KUEQXGT[5EQRG

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 166 ]
In Provisioning Options, click a host group for new Nano host(s) in this example
5.
the host group is named Nano. Select the physical computer profile that we
created earlier as shown in Figure 5:
(KIWTG6JGYK\CTFHQTCFFKPITGUQWTEG2TQXKUKQPKPI1RVKQPU

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 167 ]
In Deployment Customization, enter the Computer Name and Network
6.
Adapters details as shown in Figure 6:
(KIWTG6JGYK\CTFHQTCFFKPITGUQWTEG&GRNQ[OGPV%WUVQOK\CVKQP

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 168 ]
Click Next to complete the wizard. In Summary, confirm the settings as shown in
7.
Figure 7, and then click Finish to deploy the new Nano Server on a physical
machine and bring it under VMM management:
(KIWTG6JGYK\CTFHQTCFFKPITGUQWTEG5WOOCT[

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 169 ]
Deploying Nano Server on a bare-metal machine can take a while, as long as
8.
15-25 minutes on some hardware. Behind the scenes, VMM will power/reboot the
physical machine and wait to PXE boot, then it will format and create partition
disks, transfer the Nano VHD(X) image to the physical host, then convert the
dynamic VHD(X) to fixed VHD(X) and join it to the domain as shown in Figure 8:
(KIWTG6JGYK\CTFHQTCFFKPITGUQWTEG5WOOCT[
You can also view the job named $SFBUFBOFXIPTUGSPNQIZTJDBM
9.
NBDIJOF in VMM Jobs view to inspect the complete deployment details (see
Figure 9):

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 170 ]
(KIWTG6JKUKUJQY[QWTDCTGOGVCN0CPQ5GTXGTFGRNQ[OGPVLQDUJQWNFNQQM
To confirm that the host was added in VMM, click Fabric|Servers|All Hosts|
10.
host group, and verify that the new Nano host appears in the group.
VMM VM template deployment
The procedures in this section describe how to use SCVMM to deploy a Nano Server-based
VM domain joined using VMM VM templates on top of a Windows Server 2016 Hyper-V
host managed by SCVMM 2016 with update rollup 2.
This section will also describe how to create the Nano Server 7)%
9 file to be used with
VM templates using the pre-installed guest drivers. First, we need to create a VHD(X)
image with the deployment type as Guest, including the container package and SCVMM
packages, and enable the remote management port.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 171 ]
Preparing a Nano Server VHD for a virtual machine
When you start planning to deploy Nano Server-based virtual machines, you need to make
sure the following packages are added into the Nano Server image that we will use in the
steps that follow.
Follow the steps mentioned below to create a VHD(X) image for a virtual machine:
Mount the Windows Server 2016 ISO medium on your machine. In this example,
1.
it's mounted in the ) drive.
Start Windows PowerShell as an administrator, and run the following script to
2.
create a VHD(X) for virtual machine deployment that includes the SCVMM
packages. You will be prompted for an administrator password:
SFHJPOWBSJBCMFT$PNQVUFS/BNF	/"/07.	4UBHJOHQBUIGPS
OFX/BOPJNBHF4UBHJOH1BUI	$=	1BUIUP8JOEPXT4FSWFS
*40GJMF.FEJB1BUI	)=	1BUI+PJO1BUI1BUI4UBHJOH1BUI
$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU1SPNQU1MFBTFTQFDJGZ
MPDBM"ENJOJTUSBUPSQBTTXPSE"T4FDVSF4USJOHFOESFHJPOSFHJPO
$PQZTPVSDFGJMFTJG
OPU
5FTU1BUI4UBHJOH1BUI\
NLEJS4UBHJOH1BUI
^JG
OPU
5FTU1BUI1BUI\
/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI
$IJME1BUI/BOP4FSWFS3FTPMWF$PQZ*UFN
1BUI/BOP4FSWFS4PVSDF1BUI%FTUJOBUJPO4UBHJOH1BUI3FDVSTF^
FOESFHJPOSFHJPO(FOFSBUF/BOP*NBHF*NQPSU.PEVMF/BNF
+PJO
1BUI1BUI1BUI$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF
4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXT
LCYNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXTLCYNTV	
/BOP4FSWFS*NBHF1BSBNFUFST!\
$PNQVUFS/BNF$PNQVUFS/BNF.FEJB1BUI.FEJB1BUI#BTF1BUI

+PJO1BUI1BUI1BUI$IJME1BUI$PNQVUFS/BNF
WIEGPS(FO7.BOEWIEYGPS(FO7.5BSHFU1BUI+PJO
1BUI1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIEY	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE$POUBJOFSTUSVF1BDLBHF
	.JDSPTPGU/BOP4FSWFS4$7..1BDLBHF		.JDSPTPGU/BOP4FSWFS
4$7..$PNQVUF1BDLBHF	&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF
%FQMPZNFOU5ZQF	(VFTU	&EJUJPO	4UBOEBSE	
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHF1BUI^
/FX/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFSTFOESFHJPO

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 172 ]
The previous script will create a VHDX image file using the Windows Server 2016 ISO
mounted as )= drive. When creating the image, it uses a folder called /BOP4FSWFS located
on the SPPU $ drive. The file is placed in the same folder called /"/07.. In this example,
the computer name is set to /"/07. and includes guest drivers. We will deploy a
generation 2 virtual machine; for this reason we created the image as VHDX. We enabled
the remote management port, and finally we added the latest Windows Server updates.
We also added the SCVMM package, .JDSPTPGU/BOP4FSWFS4$7..1BDLBHF, to ensure
that the VMM agent is available as part of an image, so you can manage the VM using
VMM.
The SCVMM compute package, .JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF, will
ensure that the image has the Hyper-V role enabled, so you can use Hyper-V nested
virtualization.
The container package, .JDSPTPGU/BOP4FSWFS$POUBJOFST1BDLBHF will ensure that
the image has the container role so you can deploy Windows Server containers and Hyper-
V Containers; more on that in $IBQUFS, Running Windows Server Containers and Hyper-V
Containers on Nano Server.
Once the image is created, you need to copy it to VMM and refresh the library.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 173 ]
In virtual machine manager console, you need to create a new virtual machine template and
use the VHD(X) created earlier. Click through the wizard; in the Configure Operating
System page, please give the other information as needed and make sure you select the
checkbox next to Nano Server-based VM deployment as shown in Figure 10. This will
make sure Nano VM will join the domain during the deployment:
(KIWTG6JGYK\CTFHQT%TGCVKPI8/6GORNCVG%QPaIWTGQRGTCVKPIU[UVGO

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 174 ]
With the VM template ready, you can start deploying Nano VMs in same way as if you
were deploying Server with desktop experience or Server Core. The deployment will take a
couple of minutes since the VHD(X) image is very small. Behind the scenes, VMM will
create an offline domain join object (#MPC) for Nano VM and then apply that object to the
Nano image in offline mode. When the virtual machine boots up for the first time, it picks
the offline setting and joins the domain automatically as shown in Figure 11:
(KIWTG0CPQ5GTXGTDCUGF8/FGRNQ[OGPVCPFFQOCKPLQKPGF

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 175 ]
Managing Nano Server with system center
virtual machine manager 2016
Managing Nano Server using virtual machine manager is like managing any other
installation of Hyper-V Server with Desktop Experience, Server Core, and free Hyper-V
Server. However, there are some key differences in how you install VMM agent on Nano
Server.
In this section, we will discuss the available options for how to install the VMM agent; we
will also discuss how to manage network teaming on Nano Server.
Installing the virtual machine manager agent on
Nano Server
There are three methods available for installing the VMM agent on Nano Servers:
Nano Server Image Builder is a UI tool that will help you to build an installation image that
you can use to deploy Nano Server for either Windows Server 2016 datacenter or Standard
editions. The wizard creates an installation image starting with a standard source image
without any role, and then you can customize it for your deployment; in this case you will
add the VMM package as part of your image creation (pre-deployment option).
As shown in Figure 12, the wizard will also help you to create a USB bootable medium to
install Nano Server on a machine ready for reimaging. This wizard will package your Nano
Server information with the drivers and packages you have selected and create a single
partition so you can easily install it on your server.
See $IBQUFS, Getting Started with Nano Server, for more information about Nano Server
image builder:

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 176 ]
(KIWTG0CPQ5GTXGTKOCIGDWKNFGT
The second method is manual agent installation, so users can run the PowerShell script as
described at the beginning of this chapter to include the SCVMM package while creating
the VHD(X) image, which is the recommended way. However, you might also need to
install the VMM agent online (while Nano Server is running). To do so, follow these steps:
Copy the 4$7..1BDLBHFT folder from the installation medium locally to the
1.
running Nano Server (for example, to $=WNNQBDLBHFT) using the following
commands:
/BOP*1`a$SFE(FU
$SFEFOUJBM%PNBJO=4VQFS/BOP4FTTJPO/FX144FTTJPO
$PNQVUFS/BNF/BOP*1$SFEFOUJBM$SFE$PQZ*UFN
1BUI&=WNNQBDLBHFT%FTUJOBUJPO$=WNNQBDLBHFT5P4FTTJPO4FTTJPO

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 177 ]
Use remote PowerShell to connect to a Nano Server-based host, and add the
2.
SCVMM packages using the following commands:
To install .JDSPTPGU/BOP4FSWFS4$7..1BDLBHF use the
following command:
EJTNPOMJOF"EEQBDLBHF
1BDLBHF1BUI$=WNNQBDLBHFT=FO64=.JDSPTPGU/BOP4FSWFS
4$7..1BDLBHF@FOVTDBC
EJTNPOMJOF"EEQBDLBHF
1BDLBHF1BUI$=WNNQBDLBHFT=.JDSPTPGU/BOP4FSWFS4$7..
1BDLBHFDBC
To install .JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF use the
following command:
EJTNPOMJOF"EEQBDLBHF1BDLBHF1BUI$=WNNQBDLBHFT=FO
64=.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF1BDLBHF@FOVTDBC
EJTNPOMJOF"EEQBDLBHF
1BDLBHF1BUI$=WNNQBDLBHFT=.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF
1BDLBHFDBC
To confirm that the SCVMM packages and the associated language packs are
installed correctly on Nano Server, you can use the following command:
EJTNPOMJOFHFUQBDLBHFT
Once the SCVMM packages are installed on a running Nano Server, you need to restart the
server.
In this example, we are using system center virtual machine manager 2016 update rollup 2.
If you are familiar with system center updates, Microsoft regularly releases update rollups
every quarter or so. As of this writing, it's not possible to update the Nano Host agents
directly from VMM console; in other words, there is currently no push-based installation of
VMM agents. The update for the VMM agent will be pushed as part of the Nano ongoing
cadence updates.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 178 ]
The third method is using Nano Server PowerShell package management. The Nano Server
package provider is part of the package management (aka OneGet) PowerShell module.
More information on OneGet can be found at IUUQXXXPOFHFUPSH.
A package management provider is an online repository supported by Microsoft. It requires
that Nano Server has access to the Internet.
To install Nano Server packages from the online package repository by using the Nano
Server package provider, please carry out the following. In this example, we are interested
in installing the SCVMM packages only (you can install any package you want):
7BSJBCMFT/BOP*14FTTJPO/FX144FTTJPO
$PNQVUFS/BNF/BOP*1DSFEFOUJBM%PNBJO=4VQFS/BOPSFHJPO*OTUBMM
/BOP4FSWFS3PMFTBOE'FBUVSFT4FTTJPO]&OUFS144FTTJPO4FU-PDBUJPO
%PXOMPBE/BOP4FSWFS1BDLBHFNPEVMF4FU143FQPTJUPSZ/BNF	14(BMMFSZ	
*OTUBMMBUJPO1PMJDZ5SVTUFE*OTUBMM.PEVMF/BNF/BOP4FSWFS1BDLBHF
.JOJNVN7FSTJPO*NQPSU1BDLBHF1SPWJEFS/BOP4FSWFS1BDLBHF7FSCPTF
'JOEBMMBWBJMBCMFPOMJOF/BOPQBDLBHFT
FOVT-BOHVBHF'JOE1BDLBHF
1SPWJEFS/BNF/BOP4FSWFS1BDLBHFDVMUVSFFOVT'JMUFS4$7..1BDLBHFT'JOE
1BDLBHF1SPWJEFS/BNF/BOP4FSWFS1BDLBHFDVMUVSFFOVT]8IFSF0CKFDU\@/BNF
MJLF4$7..^*OTUBMM4$7..QBDLBHFUIBUEFQFOETPOPUIFSQBDLBHFT
XJUIBTJOHMFDPNNBOE*OUIJTDBTFUIFEFQFOEFODZQBDLBHFTXJMMCF
JOTUBMMFEBTXFMM.JDSPTPGU/BOP4FSWFS4$7..1BDLBHF.JDSPTPGU
/BOP4FSWFS$PNQVUF1BDLBHF.JDSPTPGU/BOP4FSWFS4$7..$PNQVUF
1BDLBHF'JOE/BOP4FSWFS1BDLBHFTDWNNDPNQVUF]JOTUBMMQBDLBHF
'PSDF]'PSNBU5BCMF"VUP4J[F4FBSDIGPSBMM8JOEPXT1BDLBHFTJOTUBMMFE
POUIFMPDBMNBDIJOF(FU1BDLBHF1SPWJEFS/BNF/BOP4FSWFS1BDLBHF
%JTQMBZ$VMUVSF]'PSNBU5BCMF"VUP4J[F3FTUBSU$PNQVUFSFOESFHJPO
Once the SCVMM packages are added to the image using one of the methods described
previously. You can then add Nano Server to VMM using Add resource wizard in the same
way that you add a regular Windows server. For more information, please check the Add
Windows servers as Hyper-V hosts or clusters in the VMM compute fabric topic on
TechNet:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTTZTUFNDFOUFSEPDTWNNNBOBHFNBOBHFDPN
QVUFBEEFYJTUJOHTFSWFST.
Managing network teaming on Nano Server
In Windows Server 2016, Microsoft introduced a new type of networking teaming solution
called Switch Embedded Teaming (SET) that is virtualization aware.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 179 ]
If you have deployed LBFO teaming solutions in Windows Server 2012/R2, SET is different
from LBFO:
SET needs to have the Hyper-V role enabled, because it's embedded into the
Hyper-V virtual switch, which leads to a couple of results. Firstly, you don't have
any team interfaces on the host anymore, you won't be able to build anything
extra on top of it, you can't set a property on the team because it's part of the
virtual switch, and thus all the properties are set directly on the Hyper-V virtual
switch.
SET is targeted to support Software-Defined Networking (SDN) switch
capabilities.
SET is specifically integrated with converged RDMA vNIC and SDN-QoS, and
it's only supported in Nano Server; however, the LBFO teaming solution is not
supported in Nano Server.
For more information about SET, you can read the NIC teaming Deployment guide for
Windows Server 2016 which can be downloaded from the TechNet gallery:
IUUQTHBMMFSZUFDIOFUNJDSPTPGUDPN8JOEPXT4FSWFSDC
This guide has authoritative content on SET and is updated regularly.
In the following procedures, we will show you how to create SET in SCVMM and deploy it
on Nano Server, assuming you have a good understanding about the network fabric in
VMM (logical network, VM networks, uplink port profile, logical switch, and IP address
pool).
For more information about managing VMM network resources, please check the following
article:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTTZTUFNDFOUFSEPDTWNNNBOBHFNBOBHJOHO
FUXPSLSFTPVSDFTXJUIWNN.
Open VMM console and follow these steps:
Navigate to the Fabric workspace, right click on Logical Switches, and select
1.
Create Logical Switch.
At the General page, as shown in Figure 13, you can select Embedded Team in
2.
Uplink mode. Click Next:

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 180 ]
(KIWTG6JGYK\CTFHQTETGCVKPINQIKECNUYKVEJKP8//7RNKPMOQFG
At the Settings page, leave Minimum bandwidth mode at the default: Weight.
3.
Click Next.
On the Extensions page, click Next.
4.
On the Virtual Port page, click Add and specify the port classifications for virtual
5.
ports that will be part of this logical switch.
At the Uplinks page, add an existing uplink port profile or create a new one.
6.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 181 ]
One of the newest features in virtual machine manager 2016 is the ability to add virtual
network adapters directly in the Logical switch wizard as shown in Figure 14. In this way,
when you apply the logical switch to Nano Server as a Hyper-V host, the vNICs on the host
partition will be created automatically instead of our creating them manually as we used to
do in VMM 2012/R2:
(KIWTG6JGYK\CTFHQTETGCVKPINQIKECNUYKVEJKP8//7RNKPMU

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 182 ]
Once the logical switch is created, you can start deploying it by going to the properties of
the Nano Hyper-V host: Virtual Switches|New Virtual Switch|New Logical Switch.
Choose the embedded team logical switch that you just created as shown in Figure 15, and
then click OK:
(KIWTG&GRNQ[UYKVEJGODGFFGFVGCOKPIKP8//
Once the logical switch is created successfully, you can use PowerShell remoting and verify
that SET is created successfully on Nano Server by running the following command:
(FU
7.4XJUDI]'-/BNF&YUFOTJPOT#BOEXJEUI3FTFSWBUJPO.PEF1BDLFU%JSDU&OBCMFE&NCF
EEFE5FBNJOH&OBCMFE*PW&OBCMFE4XJUDI5ZQF"MMPX.BOBHFNFOU04/FU"EBQUFS*OUFSG
BDF%FTDSJQUJPO

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 183 ]
The &NCFEEFE5FBNJOH&OBCMFE property is set to 5SVF as shown in Figure 16:
(KIWTG'ODGFFGFVGCOKPIKUGPCDNGF
Monitoring Nano Server with System Center
operations manager 2016
With system center 2016 operations manager you can now monitor Nano Server
installations in a similar way to monitoring any other installation of Windows Server 2016
(Server with Desktop Experience, Server Core and Nano Server) by installing the operations
manager agent. However, there are some key differences in how you install the agent on a
Nano Server that we will cover in this section.
With SCOM 2016, you can monitor the basic operations of Nano Server by using the
Windows Server 2016 operating system management pack.
Please note that Nano Server monitoring is supported only by SCOM 2016.
You can also monitor a Nano Server running the following workloads:
Nano Server base OS
Failover clusters including Nano Server cluster disk health, Nano Server cluster
shared volume health, Nano Server cluster disk capacity, Nano Server cluster
shared volume disk capacity, and Nano Server duplicated cluster disk
Domain Name System (DNS) server
Internet Information Services (IIS) server

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 184 ]
You can download management packs for Windows Server 2016 including Nano support,
from the following links:
Windows Server 2016 OS: IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUB
JMTBTQYJE
Windows Failover cluster: IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUB
JMTBTQYJE
DNS server: IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQYJE

IIS server: IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQYJE

The audit agent for sending and collecting security event logs is also supported on the
monitored Nano Server. In Windows Server 2016, Microsoft added support for Audit
Collection Services; the Audit Agent can send and collect security event logs, so allACS
features will work fine as they used to work with full servers.
For more information about collecting security events using audit collection services in
operations manager, please check the following article:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTTZTUFNDFOUFSEPDTPNEFQMPZIPXUPJOTU
BMMBOBVEJUDPMMFDUJPOTFSWJDFTBDTDPMMFDUPSBOEEBUBCBTF.
Installing the operations manager agent on Nano
Server
Patching and life cycle management for Nano agents is supported from SCOM 2016 RTM
onwards. You will not need additional management packs for this. The user can update the
Nano agent from a patched management server, or you can download Nano updates and
install them locally by running the update PowerShell script (more on that in a bit).
Active directory integration is not supported for Nano agents. In other
words, you cannot enable SCOM agents to query for secondary
management servers/groups in the event a primary management server
failed. Active directory integration is only supported for Server with
desktop experience and Server Core.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 185 ]
The operations manager agent depends on the reverse forwarders package, which is now
included by default in every Nano image.
Reverse Forwarders is a new technology that enables a subset of desktop Win32 binaries to
run on Nano Server without recompilation.
Follow the instructions described at the beginning of this chapter on creating and installing
Nano Server on either a physical or virtual machine.
Before you start deploying the SCOM agent, you need to make sure you join Nano Server to
the same domain as the operations manager management Server.
There are two methods available for installing the operations manager agent on Nano
Servers:
Push-based installation of SCOM agents. The discovery wizard from the
operations console can be used to find Nano Servers and install the agent. SCOM
2016 can now automatically discover Nano Server, Server with Desktop
Experience, or Server Core of Windows Server 2016. Right now, we have two
versions of the agent, one is for the Server with Desktop Experience, Server Core,
and the second one is specifically tailored for Nano Server, the pushed-based
agent installation option is going to identify the right agent to be installed
seamlessly.
The process of installing the agent using the discovery wizard is straight forward by using
Device Management|Computer and Device Management Wizard from the operations
manager console as shown in Figure 17:

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 186 ]
(KIWTG6JGFKUEQXGT[YK\CTF%QORWVGTCPFFGXKEGOCPCIGOGPV
After a couple of minutes deploying the SCOM agent, Nano Server(s) will report their
health state in the agent-managed console.
Microsoft is also offering a manual agent installation method for Nano, so the users can run
a PowerShell script to remotely install the SCOM agent on Nano Server.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 187 ]
The following procedure is for PowerShell-based agent installation only.
Log in to the operations manager management server, open the Windows
1.
PowerShell console, and navigate to the following path:
$E$=1SPHSBN'JMFT=.JDSPTPGU4ZTUFN$FOUFS=0QFSBUJPOT
.BOBHFS=4FSWFS="HFOU.BOBHFNFOU=/BOP=/BOP4FSWFS
Run the following script to install the agent manually on Nano Server, which is a
2.
member of the same domain.
*OTUBMM/BOP4FSWFS4$0.
"HFOU=*OTUBMM/BOP4FSWFS4DPN"HFOU0OMJOFQT
.BOBHFNFOU4FSWFS'2%/4$0.7*35-"#
.BOBHFNFOU(SPVQ/BNF4$0./BOP4FSWFS'2%//"/07.0.7*35-"#
#JOBSZ'PMEFS=
Please adjust the management server FQDN, management group, and the Nano Server
name to match your environment.
If the installation succeeded, you will see the *OTUBMMBUJPOTVDDFTTGVM message as
shown in Figure 18:
(KIWTG+PUVCNNKPIVJG5%1/CIGPVOCPWCNN[QP0CPQ5GTXGT

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 188 ]
Switch back to the operations manager console, open the Pending Management
3.
section of the administration pane, and then approve the Nano Server for
management as shown in Figure 19:
(KIWTG#RRTQXG0CPQ5GTXGT/CPWCNCIGPVKPUVCNN

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 189 ]
If Nano Server did not show up under Pending Management after installing the
4.
agent manually, then check the SCOM Settings section in the Administration
pane and make sure you select Review new manual agent installations in
pending management view as shown in Figure 20:
(KIWTG#RRTQXG0CPQ5GTXGT/CPWCNCIGPVKPUVCNN
Once you approve the manual agent installation, open the Agent Managed list in
5.
the Device Management section of the Operations Manager Console
Administration pane, and verify the Health State as shown in Figure 21:

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 190 ]
(KIWTG*GCNVJUVCVG#IGPVOCPCIGF
Once Nano Server is reported as Healthy, you can start monitoring it as you
6.
would monitor any Windows Server instance. Figure 22, shows an example of a
critical error detected on Nano Server:
(KIWTG6JGJGCNVJGZRNQTGT%TKVKECNGTTQT

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 191 ]
Microsoft system center 2016 operations manager nano agent Update
Rollups (UR) will be uploaded separately from SCOM 2016 UR. At the
time of writing, you can download the system center 2016 operations
manager nano agent $"# file for UR2 from the following link:
IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQYJE.
Uninstalling the operations manager agent from
Nano Server
Follow the instructions if you want to remove the operations manager agent from your
Nano Server.
Open an elevated PowerShell console on the operations manager management server, and
navigate to the following path:
DE$=1SPHSBN'JMFT=.JDSPTPGU4ZTUFN$FOUFS=0QFSBUJPOT
.BOBHFS=4FSWFS="HFOU.BOBHFNFOU=/BOP=/BOP4FSWFS
Run the following command to remove the SCOM agent manually using PowerShell.
6OJOTUBMM/BOP4FSWFS4$0.
"HFOU=6OJOTUBMM/BOP4FSWFS4DPN"HFOU0OMJOFQT
.BOBHFNFOU4FSWFS'2%/4$0.7*35-"#.BOBHFNFOU(SPVQ/BNF4$0.
/BOP4FSWFS'2%//"/07.0.7*35-"#
The management server FQDN, management group, and Nano Server
name to match your environment.
Summary
In this chapter, we discussed how to manage and monitor Nano Server using system center
virtual machine manager and system center operations manager 2016.
We started by deploying Nano Server using VMM as a Hyper-V host using a bare-metal
deployment, and then we deployed Nano Server as a virtual machine using VM templates.

Deploying, Managing, and Monitoring Nano Server with System Center 2016
[ 192 ]
We covered the available options on how to install the VMM agent; we also discussed how
to manage and deploy network teaming on Nano Server using SET.
Deploying the SCOM agent is a bit different from VMM; with SCOM, we can push the
agent to Nano Server in an automated fashion using the operations console or with
PowerShell. However, in VMM we can add the SCVMM packages through the offline
method (while creating the image) which is the recommended way. You can also add the
packages online (while Nano Server is running), but, for either choice, it's a manual
installation.
System center 2016 Data Protection Manager (DPM) is not supported on Nano Server. In
other words, you cannot back up virtual machines running on top of Nano Server as a
Hyper-V host.
Continue now to $IBQUFS, Managing Nano Server with Windows PowerShell and Windows
PowerShell DSC, to learn more about how to manage Nano Server using remote server GUI
tools: Windows PowerShell and Windows PowerShell DSC.

6
Managing Nano Server with
Windows PowerShell and
Windows PowerShell DSC
In $IBQUFS, Deploying, Managing, and Monitoring Nano Server with System Center 2016, we
talked about how to deploy, manage, and monitor Nano Server using System Center 2016
Virtual Machine Manager (SCVMM) and System Center 2016 Operations Manager
(SCOM).
One of the biggest fears of IT professionals that we heard a lot is, how will we manage a
headless server without a local User Interface (UI); there is no remote desktop. Fortunately,
it's not that difficult! You need to change your mindset from how you used to manage a
traditional Windows Server in the past. In fact, Microsoft is laying the foundation of the
future of Windows Server by introducing Nano Server. It is very important to keep in mind
that Nano Server and Server Core is the future of Windows Server, so by embracing and
investing the time in learning Nano Server will make your journey easier and take your
organization to a complete new level.
There are a variety of ways you can manage Nano Server installation. PowerShell already
become the foundation for many higher-level technologies, including PowerShell Desired
State Configuration (DSC), and much more. PowerShell is everywhere now!

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 194 ]
In this chapter, we will show you how to effectively manage Nano Server instance with:
Remote server graphical tools
Managing Nano Server with PowerShell
Managing Nano Server with PowerShell DSC
Managing Nano Server security settings with PowerShell DSC
Remote server graphical tools
Without the Graphical User Interface (GUI), it's not easy to carry out the daily
management and maintenance of Windows Server. For this reason, Microsoft integrated
Nano Server with all the existing graphical tools that you are familiar with such as Hyper-V
Manager, failover cluster manager, Server Manager, registry editor, file explorer, disk and
device manager, Server configuration, computer management, users and groups console,
and so on. All these tools and consoles are compatible for managing Nano Server remotely.
The GUI is always the easiest to use.
In this section, we will discuss how to access and set the most common configurations in
Nano Server with remote graphical tools.
Server Manager
Before we start managing Nano Server, we need to obtain the IP address or the computer
name of the Nano Server to connect to and remotely manage a Nano instance, either on a
physical or virtual machine.
Login to your management machine and make sure you have installed the latest Remote
Server Administration Tools (RSAT) for Windows Server 2016 or Windows 10.
You can download the latest RSAT tools from the following link:
IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQYJE.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 195 ]
Launch Server Manager as shown in Figure 1, and add the Nano Server(s) that you would
like to manage:
(KIWTG/CPCIKPI0CPQ5GTXGTWUKPI5GTXGT/CPCIGT
You can refresh the view and browse all events and services you expect to see.
We want to point out that Best Practices Analyzer (BPA) is not supported in Nano Server.
BPA is completely cmdlets-based and written in C# back during the days of PowerShell 2.0.
It is also statically using some .NET XML library code that was not part of .NET framework
at that time. So, do not expect to see best practices analyzer in Server Manager for Nano
Server.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 196 ]
Hyper-V Manager
The next console that you probably want to access is Hyper-V Manager, right click on Nano
Server name in Server Manager and select Hyper-V Manager.
Hyper-V Manager console will launch as shown in Figure 2 with full support as you expect
when managing Windows Server 2016 Hyper-V, free Hyper-V Server, Server Core and
Nano Server with Hyper-V role:
(KIWTG/CPCIKPI0CPQ5GTXGTWUKPI*[RGT8/CPCIGT

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 197 ]
Microsoft Management Console
You can use the Microsoft Management Console (MMC) to manage Nano Server as well:
From the command-line type NNDFYF
From the File menu, Click Add/Remove Snap-in... and then select Computer
Management and click on Add
Choose Another computer and add the IP address or the computer name of your
Nano Server machine. Click on Ok
As shown in Figure 3, you can expand system tools and check the tools that you are familiar
with like Event Viewer, Local Users, Groups, Shares, and Services. Please note that some
of these MMC tools such as Task Scheduler and Disk Management cannot be used against
Nano Server. Also, for certain tools, you need to open some ports in Windows Firewall:
(KIWTG/CPCIKPI0CPQ5GTXGTWUKPI/KETQUQHVOCPCIGOGPVEQPUQNG

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 198 ]
Managing Nano Server with PowerShell
For most IT administrators, the graphical user interface is the easiest to use. But on the other
hand, PowerShell allows for a fast and an automated process.
That's why in Windows Server 2016, the Nano Server deployment option of Windows
Server comes with full PowerShell remoting support. The purpose of the core PowerShell
engine is to manage Nano Server instances at scale. PowerShell remoting includes DSC,
Windows Server cmdlets (network, storage, Hyper-V, and so on), remote file transfer,
remote script authoring and debugging, and PowerShell Web access.
As discussed in $IBQUFS, Introduction to Nano Server, Nano Server is deep refactoring
initially focused on the cloud infrastructure roles (compute, storage, network) and born in
the cloud applications. The model for Nano Server is to start small and then add only the
features and components that you will use.
Some of the new features in Windows PowerShell version 5.1 on Nano Server support the
following:
Copying files via PowerShell sessions
Remote file editing in PowerShell ISE
Interactive script debugging over PowerShell session
Remote script debugging within PowerShell ISE
Remote host process connects and debug
PowerShell version 5.1 is available in different editions which denote varying feature sets
and platform compatibility. Desktop edition targeting Server with Desktop Experience,
Server Core and Windows 10, Core Edition targeting Nano Server and Windows IoT.
You can find a list of Windows PowerShell features not available yet in Nano Server here: I
UUQTEPDTNJDSPTPGUDPNFOVTXJOEPXTTFSWFSHFUTUBSUFEQPXFSTIFMMPOOBO
PTFSWFS.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 199 ]
As Nano Server is still evolving, we will see what the next cadence update will bring for
unavailable PowerShell features.
If you want to manage your Nano Server, you can use PowerShell remoting or, if your
Nano Server instance is running in a virtual machine, you can also use PowerShell Direct;
more on that at the end of this section.
In order to manage a Nano Server installation using PowerShell remoting, carry out the
following steps:
You may need to start the WinRM service on your management machine to
1.
enable remote connections. From the PowerShell console type the following
command:
 net start WinRM
If you want to manage Nano Server in a workgroup environment, open
2.
PowerShell console, and type the following command, substituting server name
or IP with the correct value. Using your machine-name is the easiest to use, but if
your device is not uniquely named on your network, you can use the IP address
instead:
Set-Item
 WSMan:\localhost\Client\TrustedHosts -
 Value "servername or IP"
If you want to connect multiple devices, you can use a comma and quotation
3.
marks to separate each device:
Set-Item
 WSMan:\localhost\Client\TrustedHosts -
 Value "servername or IP, servername or IP"
You can also set it to allow connection to a specific network subnet using the
4.
following command:
Set-Item
 WSMan:\localhost\Client\TrustedHosts -Value
 10.10.100.*

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 200 ]
To test Windows PowerShell remoting against Nano Server and check if it's
5.
working, you can use the following command:
Test-WSMan -ComputerName " servername or IP" -
 Credential servername\Administrator -
 Authentication Negotiate
You can now start an interactive session with Nano Server. Open an elevated
6.
PowerShell console and type the following command:
 Enter-PSSession -ComputerName "servername
     or IP" -Credential servername\Administrator
In the following example, we will create two virtual machines on Nano Server Hyper-V
host using PowerShell remoting. From your management machine, open an elevated
PowerShell console or PowerShell Scripting Environment (PSE), and run the following
script (make sure to update the variables to match your environment):
SFHJPO7BSJBCMFT/BOP437	/"/0437)7	$SFE(FU
$SFEFOUJBM%FNP=4VQFS/BOP4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP437
$SFEFOUJBM$SFE$JN4FTJPO/FX$JN4FTTJPO$PNQVUFS/BNF/BOP437
$SFEFOUJBM$SFE7.5FNQMBUF1BUI	$=5FNQ	W4XJUDI	&YU@W4XJUDI	7./BNF	
%FNP7.	FOESFHJPO$PQZJOH7.5FNQMBUFGSPNUIFNBOBHFNFOUNBDIJOFUP
/BOP4FSWFS(FU$IJME*UFN1BUI7.5FNQMBUF1BUIGJMUFS7)%9SFDVSTF]$PQZ
*UFN5P4FTTJPO4FTTJPO%FTUJOBUJPO%=]'PS&BDI0CKFDU\/FX7.
$JN4FTTJPO$JN4FTJPO/BNF7./BNF@7)%1BUI%=7./BNF@WIEY
.FNPSZ4UBSUVQ#ZUFT(#A4XJUDI/BNFW4XJUDI(FOFSBUJPO4UBSU7.
$JN4FTTJPO$JN4FTJPO7./BNF7./BNF@1BTTUISV
^
In this script, we are creating a PowerShell session and a CIM session to Nano Server. A
CIM session is a client-side object representing a connection to a local computer or a remote
computer.
Then we are copying VM templates from the management machine to Nano Server over
PowerShell remoting. When the copy is completed, we are creating two virtual machines as
generation 2 and finally starting them.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 201 ]
After a couple of seconds, you can launch Hyper-V Manager console and see the new VMs
running on Nano Server host as shown in Figure 4:
(KIWTG%TGCVKPIXKTVWCNOCEJKPGUQP0CPQ5GTXGTJQUVWUKPI2QYGT5JGNNTGOQVKPI
If you have installed Nano Server in a virtual machine running on a Hyper-V host, you can
use PowerShell Direct to connect directly from your Hyper-V host to your Nano Server VM
without any network connection by using the following command:
Enter-PSSession -VMName <VMName> -
 Credential.\Administrator
So, instead of specifying the computer name, we specified the VM Name. PowerShell Direct
is so powerful; it's one of my favorite features, as you can configure a bunch of VMs from
scratch in just a couple of seconds, without any network connection.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 202 ]
Moreover, if you have Nano Server running as a Hyper-V host, as shown in the example
earlier, you could first use PowerShell remoting to connect to Nano Server from your
management machine, and then leverage PowerShell Direct to manage your virtual
machines running on top of Nano Server. In this example, we used two PowerShell
technologies (PS remoting and PS Direct). This is so powerful and opens many possibilities
to effectively manage Nano Server.
To do that, you can use the following command:
SFHJPO7BSJBCMFT/BOP437	/"/0437)7	/BOP4FSWFSOBNFPS*1
BEESFTT%PNBJO$SFE(FU$SFEFOUJBM%FNP=4VQFS/BOP7.-PDBM$SFE(FU
$SFEFOUJBM_="ENJOJTUSBUPS4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP437
$SFEFOUJBM%PNBJO$SFEFOESFHJPO*OWPLF$PNNBOE4FTTJPO4FTTJPO
4DSJQU#MPDL\
(FU7.*OWPLF$PNNBOE7./BNF
(FU7./BNF
$SFEFOUJBM6TJOH7.-PDBM$SFE4DSJQU#MPDL\
IPTUOBNF5[VUJMH^
^
In this script, we have created a PowerShell session in the Nano Server physical host, and
then we used PowerShell Direct to list all VMs, including their hostnames and time zone.
The result is shown in Figure 5:
(KIWTG0GUVGF2QYGT5JGNNTGOQVKPI

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 203 ]
Managing Nano Server with PowerShell DSC
As discussed in the previous section, most of the Windows PowerShell cmdlets that you are
familiar with can establish a remote connectivity and manage a Nano Server instance.
The usage for Nano is different, depending on if it's virtualized or not. Nano as a VM is
meant to be just an engine; it might live for 10 seconds or 10 days, it is just a part of a huge
application platform (the purpose is to execute apps on servers). But when running Nano
on a physical machine, it is basically a cloud infrastructure (Hyper-V, storage, clustering)
and nothing else. Nano is double-edged with dual purpose.
Nano Server was designed for high density deployment. Imagine trying to manage 1,000
Nano Servers using GUI-based tools. These tools might be fine for managing a relatively
small number of servers, but are simply not practical for managing large-scale
deployments. Nano Server is not really meant to be managed by a domain when running
virtualized, it is designed to be a workhorse, managed by PowerShell DSC.
Microsoft clearly stated that its preferred management tool is Windows PowerShell.
DSC is a Windows PowerShell management platform that allows you to automate the
deployment and configuration of software services and the environment in which these
services run. DSC has many applications. These include, but are not limited to:
Deploying and removing roles and features
Deploying and managing configuration data
Deploying software
Managing registry settings, files, and directories
Starting and stopping services
Preventing configuration drift
Discovering configuration states
In short, DSC is how you configure servers. This means that DSC provides definitions and
descriptions of the desired end states configurations are declared. When DSC runs, it
ensures that the end state matches the state defined by the DSC configuration so, if the
configuration drifts on any server, DSC will make sure to bring it back to the desired state.
Furthermore, the DSC engine, also known as the Local Configuration Manager (LCM),
continues to ensure that the end states match the state declared by the DSC configuration:
configurations are idempotent.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 204 ]
Best of all, because DSC is Windows PowerShell-based, it can scale to manage
configurations for as many servers as is necessary. Remember, Nano Server was designed to
be treated as cattle and not as a pet. The good news is, PowerShell DSC works on Nano
Server as well. However, the following DSC features are not currently available on Nano:
Decrypting MOF documents with encrypted password(s)
Pull Server--you cannot currently set up a pull server on Nano Server
And the following DSC features are currently available on Nano Server:
Both push and pull DSC modes are supported on Nano Server
All DSC cmdlets that exist on a full version of Windows Server
MOF encryption
Event logging
Azure automation DSC reporting
For the updated DSC features that are available on Nano Server, please check the following
article:
IUUQTNTEONJDSPTPGUDPNFOVTQPXFSTIFMMETDOBOPETD.
The following section demonstrates how to use PowerShell DSC to remotely manage Nano
Server. This example uses the xNetworking (IUUQTHJUIVCDPN1PXFS4IFMMY/FUXPSLJ
OH) PowerShell DSC module to set and manage built-in Windows firewall rules.
Creating a Nano Server image for PowerShell
DSC
Before getting into how to use DSC to configure a Nano Server, you must create a Nano
Server image that includes the .JDSPTPGU/BOP4FSWFS%4$1BDLBHF package.
DSC on Nano Server is an optional package that is available in the /BOP4FSWFS=1BDLBHFT
folder of the Windows Server 2016 media. The package can be added when you create a
VHD(X) for a Nano Server by specifying .JDSPTPGU/BOP4FSWFS%4$1BDLBHF as the
value of the QBDLBHFT parameter of the /FX/BOP4FSWFS*NBHF function, or by using
/BOP4FSWFS1BDLBHF provider online post deployment.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 205 ]
In the following example, we are creating five virtual machines; the script would look like
the following:
SFHJPOWBSJBCMFT4UBHJOHQBUIGPSOFX/BOPJNBHF4UBHJOH1BUI	$=	
1BUIUP8JOEPXT4FSWFS*40GJMF.FEJB1BUI	)=	1BUI+PJO1BUI
1BUI4UBHJOH1BUI$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU1SPNQU1MFBTF
TQFDJGZMPDBM"ENJOJTUSBUPSQBTTXPSE"T4FDVSF4USJOHFOESFHJPOSFHJPO
$PQZTPVSDFGJMFTJG
OPU
5FTU1BUI4UBHJOH1BUI\
NLEJS4UBHJOH1BUI
^JG
OPU
5FTU1BUI1BUI\
/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI$IJME1BUI/BOP4FSWFS
3FTPMWF$PQZ*UFN1BUI/BOP4FSWFS4PVSDF1BUI%FTUJOBUJPO4UBHJOH1BUI
3FDVSTF^FOESFHJPOSFHJPO(FOFSBUF/BOP*NBHF*NQPSU.PEVMF/BNF
+PJO
1BUI1BUI1BUI$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF
4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXTLC
YNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF6QEBUF=8JOEPXT
LCYNTV	]'PS&BDI0CKFDU\
$PNQVUFS/BNF/"/07.0.@/BOP4FSWFS*NBHF1BSBNFUFST!\
$PNQVUFS/BNF$PNQVUFS/BNF.FEJB1BUI.FEJB1BUI#BTF1BUI
+PJO
1BUI1BUI1BUI$IJME1BUI$PNQVUFS/BNF
WIEGPS(FO7.BOEWIEYGPS(FO7.5BSHFU1BUI+PJO1BUI
1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIEY	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE$POUBJOFSTUSVF1BDLBHF
	.JDSPTPGU/BOP4FSWFS%4$1BDLBHF	&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF
%FQMPZNFOU5ZQF	(VFTU	&EJUJPO	4UBOEBSE	4FSWJDJOH1BDLBHF1BUI
4FSWJDJOH1BDLBHF1BUI^
/FX/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFST^FOESFHJPO
Creating Nano virtual machines
Once the Virtual Hard Disks (VHDX) are created, you can simply copy them to your
Hyper-V server and create a new virtual machine. It's worth noting that the VM must be a
generation 2 VM, because you cannot attach a 7)%9 file to a generation 1 VM in the case of
Nano Server.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 206 ]
To automate this process, you can run the following PowerShell script on your Hyper-V
server:
SFHJPODSFBUF/"/07*356"-."$)*/&4
WBSJBCMFTW4XJUDI/BNFW4XJUDI*OTUBMM3PPU%=)ZQFS
7FOESFHJPO]'PS&BDI0CKFDU\/FX7)%1BUI
*OTUBMM3PPU=/"/07.
0.@=/BOP4FSWFS@%WIEY4J[F#ZUFT(#%ZOBNJD/FX7.
7)%1BUI
*OTUBMM3PPU=/"/07.0.@=/"/07.0.@WIEY(FOFSBUJPO
.FNPSZ4UBSUVQ#ZUFT(#/BNF/"/07.0.@1BUI*OTUBMM3PPU
4XJUDI/BNFW4XJUDI/BNF4FU7.1SPDFTTPS7./BNF/"/07.0.@$PVOU4FU
7.7./BNF/"/07.0.@"VUPNBUJD4UPQ"DUJPO4IVU%PXO
"VUPNBUJD4UBSU"DUJPO4UBSU*G3VOOJOH&OBCMF7.*OUFHSBUJPO4FSWJDF/"/07.
0.@/BNF(VFTU4FSWJDF*OUFSGBDF3FOBNF7./FUXPSL"EBQUFS
7./BNF/"/07.0.@/FX/BNF.(.54FU7./FUXPSL"EBQUFS7./BNF/"/07.
0.@/BNF.(.5%FWJDF/BNJOH0O"EE7.4DTJ$POUSPMMFS7./BNF/"/07.
0.@"EE7.)BSE%JTL%SJWF7./BNF/"/07.0.@$POUSPMMFS5ZQF4$4*
$POUSPMMFS/VNCFS$POUSPMMFS-PDBUJPO1BUI
*OTUBMM3PPU=/"/07.
0.@=/BOP4FSWFS@%WIEY4UBSU7./BNF/"/07.0.@]0VU/VMM^
Importing the DSC xNetworking module
In this step, we will download and import the Y/FUXPSLJOH module, which is a part of the
DSC Resource Kit developed by the PowerShell Team. The Y/FUXPSLJOH module contains
the following DSC resources:
Y'JSFXBMM: Sets a node's firewall rules
Y*1"EESFTT: Sets a node's IP address(s)
Y%OT4FSWFS"EESFTT: Sets a node's DNS server address(s)
Y%OT$POOFDUJPO4VGGJY: Sets a node's network interface connection-specific
DNS suffix
Y%FGBVMU(BUFXBZ"EESFTT: Sets a node's default gateway address
Y/FU$POOFDUJPO1SPGJMF: Sets a node's connection profile
Y%IDQ$MJFOU: Enables or disables DHCP on a network interface
Y3PVUF: Sets static routes on a node
Y/FU#*04: Enables or disables NetBIOS on a network interface
Y/FUXPSL5FBN: Sets up network teams on a node
Y/FUXPSL5FBN*OUFSGBDF: Adds network interfaces to a network team

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 207 ]
Y)PTUT'JMF: Adds, edits or removes entries from the hosts file on a node
Y/FU"EBQUFS#JOEJOH: Binds or unbinds transport or filters to a network
interface
Y%OT$MJFOU(MPCBM4FUUJOH: Configures DNS client global settings
Y/FU"EBQUFS3%.": Enables or disables RDMA on a network adapter
You can choose any resource from the previous list to configure a node's IP Address, DNS
Server Address, Firewall rules, Network Team and so on.
We need to download and install the Y/FUXPSLJOH module on all Nano Servers, so open an
elevated PowerShell console on your Hyper-V server and run the following script to
automate this process:
SFHJPOWBSJBCMFT-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH
4USJOH	1!TTXSE	"T1MBJO5FYU'PSDF-PDBM$SFE/FX
0CKFDU4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
	="ENJOJTUSBUPS	-PDB
M1BTTXPSEFOESFHJPO%PXOMPBEBOE4BWFY/FUXPSLJOHNPEVMFMPDBMMZGSPN
14(BMMFSZ4FU143FQPTJUPSZ/BNF	14(BMMFSZ	
*OTUBMMBUJPO1PMJDZ5SVTUFE4BWF.PEVMF/BNFY/FUXPSLJOH1BUI$=/BOP4FSWFS
$PQZBOEJOTUBMMY/FUXPSLJOHNPEVMFPOBMM/BOP4FSWFST]'PS&BDI
0CKFDU\
4/FX144FTTJPO7./BNF/"/07.0.@$SFEFOUJBM-PDBM$SFE$PQZ
*UFN1BUI$=/BOP4FSWFS=Y/FUXPSLJOH5P4FTTJPO4%FTUJOBUJPO	$=1SPHSBN
'JMFT=8JOEPXT1PXFS4IFMM=.PEVMFT	3FDVSTF'PSDF*OWPLF$PNNBOE
4FTTJPO44DSJQU#MPDL\*NQPSU.PEVMF/BNFY/FUXPSLJOH7FSCPTF^
^
In the first part of this script, we downloaded the Y/FUXPSLJOH module from PowerShell
gallery locally, and then we copied it through a PowerShell remote session and PowerShell
Direct to all Nano Servers, instead of downloading the same module five times, and finally
we imported it. PowerShell Direct is so powerful.
Push DSC configuration
Before we push the DSC configuration and set the firewall rules, the first step is to create a
configuration file known as an MOF file. We generate the MOF file by using a Windows
PowerShell script. The second step in the configuration process is to use the MOF file to
configure the target Nano Server.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 208 ]
In an instance where you want to use DSC to enable built-in firewall rules onto the Nano
Server, the first thing you will have to do is to write a PowerShell script that will create the
required MOF file. Such a script might look as shown following:
7BSJBCMFT5BSHFU/PEF	/"/07.0.		/"/07.0.		/"/07.
0.		/"/07.0.		/"/07.0.	$POGJHVSBUJPOY'JSFXBMM$MJFOU\
*NQPSUJOHUIFY/FUXPSLJOH%4$.PEVMF*NQPSU%TD3FTPVSDF
.PEVMF/BNFY/FUXPSLJOH-JTUPG/BOPNBDIJOFXIJDIOFFETUPCF
DPOGJHVSFE/PEF5BSHFU/PEF\
&OBCMF#VJMUJO*$.1W*OY'JSFXBMM'JSFXBMM*$.1*O\
/BNF	'14*$.1&32*O	&OTVSF	1SFTFOU	&OBCMFE	5SVF	
"DUJPO	"MMPX	1SPGJMF	"OZ	^
&OBCMF#VJMUJO*$.1W*OY'JSFXBMM'JSFXBMM*$.1*O\
/BNF	'14*$.1&32*O	&OTVSF	1SFTFOU	&OBCMFE	5SVF	
"DUJPO	"MMPX	1SPGJMF	"OZ	^
&OBCMF#VJMUJO'JMFBOE1SJOUFS4IBSJOH
4.#*O
Y'JSFXBMM'JSFXBMM4.#*O\
/BNF	'144.#*O5$1	&OTVSF	1SFTFOU	&OBCMFE	5SVF	
"DUJPO	"MMPX	1SPGJMF	"OZ	^
&OBCMF#VJMUJO)ZQFS73FQMJDB)551-JTUFOFS
5$1*O
Y'JSFXBMM'JSFXBMM)73)551*O\
/BNF	7*35)73)551-*O5$1/P4DPQF	&OTVSF	1SFTFOU	
&OBCMFE	5SVF	"DUJPO	"MMPX	1SPGJMF
	%PNBJO		1SJWBUF	
^
&OBCMF#VJMUJO)ZQFS73FQMJDB)5514-JTUFOFS
5$1*O
Y'JSFXBMM'JSFXBMM)73)5514*O\
/BNF	7*35)73)5514-*O5$1/P4DPQF	&OTVSF	1SFTFOU	
&OBCMFE	5SVF	"DUJPO	"MMPX	1SPGJMF
	%PNBJO		1SJWBUF	
^
^
^$PNQJMFUIF.0'GJMFY'JSFXBMM$MJFOU
In this block of code, we've created a configuration. The configuration is a built-in function,
so you must give the configuration a name. In this case, we decided to name it
Y'JSFXBMM$MJFOU. The actual configuration details are enclosed in a series of braces.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 209 ]
In the first line of code, we specified the target Nano Servers that we need to configure.
Please note that you can also use an IP address rather than a node name. The script works
with both server names and IP addresses.
The second line of code within my configuration uses the *NQPSU%TD3FTPVSDF cmdlet
followed by the Y/FUXPSLJOH module name. This is necessary to import the various
configuration items that DSC will use. The next line of code is /PEF followed by a variable
named 5BSHFU/PEF. In this case, we have added multiple Nano Server names into that
variable. The main reason why we did this was to demonstrate the resulting MOF file will
be server-specific. Hence, each Nano Server that you want to configure will usually need its
own MOF file.
The next set of brackets defines the code that will be specific to the specified node. In this
case, we are calling a built-in custom DSC resource called Y'JSFXBMM. The Y'JSFXBMM line
includes 'JSFXBMM*$.1*O. 'JSFXBMM*$.1*O is just a name that we made up, and is
useful in more complex scripts because of the way it allows you to call individual script
sections. In this example, we are targeting five different built-in firewall rules. Please note
that you can also add new firewall rules.
The next five lines of text are self-explanatory. First, we specified the built-in name for the
firewall rule that we want to enable on the target server; the name is very important here. In
this example, the name '14*$.1&32*O is corresponding to file and printer sharing
(&DIP3FRVFTU*$.1W*O). Next is to ensure the specified rule is 1SFTFOU, and it's
enabled 5SVF, the action is "MMPX, and the firewall profile is set to "OZ. For the Hyper-V
Replica rule, we targeted the %PNBJO and 1SJWBUF firewall profiles only.
The very last line of the script is Y'JSFXBMM$MJFOU. Remember, the name
Y'JSFXBMM$MJFOU was assigned to the Configuration function at the beginning of the
script. The Y'JSFXBMM$MJFOU command at the end of the script calls this function, thereby
generating all the MOF files.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 210 ]
The first thing you'll have to do is open a Windows PowerShell window and execute the
configuration script. This causes Windows to create five MOF files based on this example
(see Figure 6):
(KIWTG2QYGT5JGNN&5%%TGCVKPI/1(aNGU
Now you must use the MOF files to configure your Nano Servers. You can do this by using
these four lines of code:
7BSJBCMFT-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH4USJOH	1!TTXSE	
"T1MBJO5FYU'PSDF-PDBM$SFE/FX
0CKFDU4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
="ENJOJTUSBUPS-PDB
M1BTTXPSE5BSHFU/PEF	/"/07.0.		/"/07.0.		/"/07.
0.		/"/07.0.		/"/07.0.	1VTI%4$$POGJHVSBUJPO4UBSU
%TD$POGJHVSBUJPO1BUI=Y'JSFXBMM$MJFOU7FSCPTF8BJU
$PNQVUFS/BNF5BSHFU/PEFDSFEFOUJBM-PDBM$SFE'PSDF
The first and second line of code simply retrieves a set of credentials and converts the
password to secure string, storing it in a variable named -PDBM$SFE. In the third line of
code, we specified the target Nano Servers that we need to configure. In this example, we
will push the configuration to five nano machines simultaneously, so we put the server
names in a variable named 5BSHFU/PEF.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 211 ]
The fourth line of code performs the actual configuration. For example, when we ran the
script as shown in Figure 6, the script created five MOF files named /"/07.0.NPG,
/"/07.0.NPG, /"/07.0.NPG, /"/07.0.NPG, and /"/07.0.NPG.
These files are located in the same folder where we ran the script in the previous step.
Therefore, we had to use the path for the configuration files when pushing the
configuration (see Figure 7):
(KIWTG2WUJ&5%(KTGYCNNTWNGEQPaIWTCVKQP0CPQ5GTXGTU
The DSC management platform makes it possible to apply a configuration to any Windows
Server, including Nano Server. Even though this probably seems like a lot of work for such
a simple configuration, the script can be modified to simultaneously configure large
numbers of servers.
Managing Nano Server Security Settings
with PowerShell DSC
As discussed in the previous sections, we can completely manage and configure Nano
Server installation with Windows PowerShell and PowerShell DSC.
One of the things that makes Nano Server so interesting is that it takes up far less disk
space, installs significantly faster, and needs far fewer updates and restarts compared to
Server with Desktop Experience and Server Core. The image size for Server with Desktop
Experience is around 11 GB, for Server Core it's 6 GB and for Nano Server it's 480 MB
without any role or feature. To achieve this speed and small physical footprint, Nano Server
has the smallest number of inbox components. Thus, group policy and the associated
Group Policy Management Console (GPMC), and Local Policy Editor (LPEdit) tools are
not present on Nano Server. Even when domain joined, Nano Server will not consume and
endorse group policy settings. This is to be expected because those tools are graphical
components and Nano Server is headless and designed to be remotely managed.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 212 ]
This raises many questions around Nano Server group policy support. Many people
including myself have invested a lot of resources for servers hardening with group policy,
and many businesses have an investment in group policy, so not having Nano Servers
accept it could cause slow adoption. What is the solution then?
DSC is the replacement for group policy, it provides better semantics for server scenarios,
according to Mr. Jeffrey Snover (PowerShell inventor).
Group policy is very well suited to client scenarios, which is why you noticed a big set of
new group policies for Windows 10.
In Windows Server 2016, Microsoft included four new PowerShell cmdlets to help manage
security policy settings. While they are present on every installation option of Windows
Server 2016, these are mostly useful on Nano Server because Nano Server does not support
group policy. Please note that these cmdlets are used for managing local policy only.
You can access these cmdlets by running the following command (see Figure 8):
(FU$PNNBOE.PEVMF4FDVSJUZ$NEMFUT
(KIWTG.QECN5GEWTKV[%OFNGVUKP0CPQ5GTXGT
These security settings include two different kinds of files:
*/': This file contains security policy template settings. The */' files can be
generated with #BDLVQ4FDVSJUZ1PMJDZ cmdlet on Server with Desktop
Experience or Server Core installation.
$47: This file contains advanced audit settings. The $47 files can be generated
with #BDLVQ"VEJU1PMJDZ cmdlet on Server with Desktop Experience or Server
Core installation.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 213 ]
Once you have generated the */' file and the $47 file, then you can remotely invoke
both the advanced audit and security template settings to your Nano Server installation by
running the following command:
*NQPSU.PEVMF4FDVSJUZ$NEMFUT
3FQMBDFUIFWBSJBCMFTXJUIUIFQBUIUPUIF*/'BOE$47GJMFT
4FD*OG$=/BOP=4FD*OG=(QU5NQMJOG
"VEJU$TW$=/BOP="VEJU=BVEJUDTW
3FTUPSF4FDVSJUZ1PMJDZ1BUITFD*OG
3FTUPSF"VEJU1PMJDZ1BUIBVEJU$TW
Microsoft also released (13FHJTUSZ1PMJDZ cmdlets, which will deal with 10- files
containing registry policy settings (IUUQTNTEONJDSPTPGUDPNFOVTMJCSBSZXJOEPX
TEFTLUPQBB
WWTBTQY).
The 10- files can be generated from your existing Group Policy Objects (GPO) backups,
or they can be generated with &YQPSU(13FHJTUSZ1PMJDZ cmdlet.
10- files will have either -PDBM.BDIJOF or -PDBM6TFS registry key settings, which
must be specified to the *NQPSU(13FHJTUSZ1PMJDZ and &YQPSU(13FHJTUSZ1PMJDZ
cmdlets; more on that shortly. However, for Nano Server, all relevant security settings will
be -PDBM.BDIJOF only.
The (13FHJTUSZ1PMJDZ can be installed from PowerShell gallery by running the following
commands:
*OTUBMM.PEVMF/BNF(13FHJTUSZ1PMJDZ
Once you installed the module, you can start importing and exporting 10-, */', and
$47 files to Nano Server; you can also start applying security settings to Nano Server.
A sample configuration is shown following, you can download the current Security
Baselines for Windows Server 2016 (IUUQTDEQQBDLUQVCDPNCXQBENJOQPTU
QIQQPTUBDUJPOFEJU) and extract the JOG, DTW, and QPM containing the desired
security settings from the exported GPO.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 214 ]
Once you extracted the 8JOEPXT34BOE4FSWFS4FDVSJUZ#BTFMJOF[JQ
file onto the Windows Server you wish to manage, there will be several GPOs in the (10T
folder, as shown in Figure 9:
(KIWTG5GEWTKV[DCUGNKPGUHQT9KPFQYU5GTXGT
Open the (10T folder, and then from the GPO you wish to import, browse to:
%PNBJO4ZTWPM=(10=.BDIJOF
If there is a 10- file in the root of this folder as shown in Figure 10, then you can remotely
invoke the registry values in that 10- file into the registry of the targeted Nano Server:
(KIWTG4GIKUVT[21.aNG9KPFQYU5GTXGTUGEWTKV[DCUGNKPGU

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 215 ]
To import and apply the registry settings, open a remote PowerShell session onto Nano
Server and run the following commands:
*NQPSU.PEVMF(Q3FHJTUSZ1PMJDZ
3FQMBDFUIJTTUSJOHXJUIUIFQBUIUPUIFQPMGJMF
(QP1PM	$=/BOP4FSWFS=(10T=\###""%
"%##&"%^=%PNBJO4ZTWPM=(10=.BDIJOF=SFHJTUSZQPM	
*NQPSU(13FHJTUSZ1PMJDZ1BUI(QP1PM-PDBM.BDIJOF
For some GPOs, there might also be advanced "VEJU or security template 4FD&EJU files in
the same folder under the following path (see Figure 11):
(KIWTG#FXCPEGF#WFKVCPFUGEWTKV[VGORNCVGU9KPFQYU5GTXGTUGEWTKV[DCUGNKPGU
You can also remotely invoke both the advanced audit and security template settings to
Nano Server installation, as explained at the beginning of this section.
The security and registry cmdlets were designed to manage local policy. However, in the
real world, no-one will deploy one or two Nano Servers. Nano Server was designed for
high-density deployment; it's not practical for managing large-scale deployments.
For this reason, Microsoft released three new DSC resources building upon the previously
released security and registry cmdlets for applying security settings on Nano Server by
using PowerShell DSC.
First, we need to download and install these resources on all targeted Nano Servers, so open
an elevated PowerShell console on your Hyper-V server and run the following script to
automate this process:
SFHJPOWBSJBCMFT
-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH4USJOH	1!TTXSE	"T1MBJO5FYU
'PSDF
-PDBM$SFE/FX0CKFDU4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM

	="ENJOJTUSBUPS	-PDBM1BTTXPSE
FOESFHJPO

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 216 ]
%PXOMPBEBOE4BWF4FDVSJUZ1PMJDZ%4$SFTPVSDFMPDBMMZGSPN14(BMMFSZ
4FU143FQPTJUPSZ/BNF	14(BMMFSZ	*OTUBMMBUJPO1PMJDZ5SVTUFE
4BWF.PEVMF/BNF4FDVSJUZ1PMJDZ%TD"VEJU1PMJDZ%TD(Q3FHJTUSZ1PMJDZ
1BUI$=/BOP4FSWFS
$PQZBOEJOTUBMM4FDVSJUZ1PMJDZ%4$SFTPVSDFUPBMM/BOP4FSWFST
]'PS&BDI0CKFDU\
4/FX144FTTJPO7./BNF/"/07.0.@$SFEFOUJBM-PDBM$SFE
$PQZ*UFN1BUI$=/BOP4FSWFS=4FDVSJUZ1PMJDZ%TD5P4FTTJPO4
%FTUJOBUJPO	$=1SPHSBN'JMFT=8JOEPXT1PXFS4IFMM=.PEVMFT	3FDVSTF'PSDF
$PQZ*UFN1BUI$=/BOP4FSWFS="VEJU1PMJDZ%TD5P4FTTJPO4
%FTUJOBUJPO	$=1SPHSBN'JMFT=8JOEPXT1PXFS4IFMM=.PEVMFT	3FDVSTF'PSDF
$PQZ*UFN1BUI$=/BOP4FSWFS=(Q3FHJTUSZ1PMJDZ5P4FTTJPO4
%FTUJOBUJPO	$=1SPHSBN'JMFT=8JOEPXT1PXFS4IFMM=.PEVMFT	3FDVSTF'PSDF
*OWPLF$PNNBOE4FTTJPO44DSJQU#MPDL\*NQPSU.PEVMF
/BNF4FDVSJUZ1PMJDZ%TD"VEJU1PMJDZ%TD(Q3FHJTUSZ1PMJDZ7FSCPTF^
^
In the first part of this script, we downloaded the three modules from PowerShell gallery
locally, and then we copied them through a PowerShell remote session and PowerShell
Direct to all Nano Servers, instead of downloading them multiple times, and finally we
imported the three modules.
Second, you need to get the extracted JOG, DTW, and QPM files, as shown earlier, then
simply pass the files into the new DSC resources and push the configuration onto your
Nano Servers. A practical example could be updating Nano Servers using Windows Server
Update Service (WSUS). What you could do is create a group policy on your active
directory (Server with Desktop Experience or Server Core), then backup this policy and
extract the SFHJTUSZQPM file as demonstrated earlier; then follow the following script to
push the configuration: this will set the registry keys to all your Nano Servers to have it use
your exiting WSUS Server.
We strongly recommend a stage test deployment before you push any
security settings in production!
Such a script might look like this:
7BSJBCMFT
-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH4USJOH	1!TTXSE	"T1MBJO5FYU
'PSDF
-PDBM$SFE/FX0CKFDU
5ZQF/BNF4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM"SHVNFOU-JTU

	="ENJOJTUSBUPS	-PDBM1BTTXPSE
5BSHFU/PEF	/"/07.0.		/"/07.0.		/"/07.0.		/"/07.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 217 ]
0.		/"/07.0.	
$POGJHVSBUJPO4FDVSJUZ#BTFMJOF
\
*NQPSUJOHUISFF%4$.PEVMFT
*NQPSU%TD3FTPVSDF
.PEVMF/BNF"VEJU1PMJDZ%TD4FDVSJUZ1PMJDZ%4$(Q3FHJTUSZ1PMJDZ
-JTUPG/BOPNBDIJOFXIJDIOFFETUPCFDPOGJHVSFE
/PEF5BSHFU/PEF
\
4FDVSJUZ5FNQMBUF4FDVSJUZ#BTFMJOF*OG
\
1BUI$=/BOP4FSWFS=(10=(QU5NQMJOG
*T4JOHMF*OTUBODF:FT
^
"VEJU1PMJDZ$TW4FDVSJUZ#BTFMJOF$TW
\
*T4JOHMF*OTUBODF:FT
$TW1BUI$=/BOP4FSWFS=(10=BVEJUDTW
^
3FHJTUSZ1PMJDZ4FDVSJUZ#BTFMJOF(QP
\
1BUI$=/BOP4FSWFS=(10=SFHJTUSZQPM
^
^
^
$PNQJMFUIF.0'GJMF
4FDVSJUZ#BTFMJOF
1VTI%4$$POGJHVSBUJPO
4UBSU%TD$POGJHVSBUJPO1BUI=4FDVSJUZ#BTFMJOF7FSCPTF8BJU
$PNQVUFS/BNF5BSHFU/PEFDSFEFOUJBM-PDBM$SFE'PSDF
In this block of code, we've created a .0' configuration file. The configuration is a built-in
function; you must give the configuration a name. In this case, we decided to name it
4FDVSJUZ#BTFMJOF. The actual configuration details are enclosed in a series of braces.
In the first line of code, we specified the target Nano Servers that we need to configure.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 218 ]
The second line of code within my configuration uses the *NQPSU%TD3FTPVSDF cmdlet
followed by three modules: "VEJU1PMJDZ%TD, 4FDVSJUZ1PMJDZ%4$, and
(Q3FHJTUSZ1PMJDZ. This is necessary to import the various configuration items that DSC
will use. The next line of code is: /PEF followed by a variable named 5BSHFU/PEF. In this
case, we have added multiple Nano Server names into that variable.
The next set of brackets defines the code that will be specific to the specified node. In this
case, we are calling a built-in custom DSC resource called 4FDVSJUZ5FNQMBUF. The
4FDVSJUZ5FNQMBUF line includes 4FDVSJUZ#BTFMJOF*OG This is just a name that we
chose.
The next line of text is self-explanatory. First, we specified the path for the JOG file. The
next line of text we specified the *T4JOHMF*OTUBODF. What *T4JOHMF*OTUBODF means is
it ensures that a configuration can set the security policy for a target node only once. The
*T4JOHMF*OTUBODF is limited to a single value :FT, by using a 7BMVF.BQ.
We repeated the same process for the "VEJU1PMJDZ$TW and 3FHJTUSZ1PMJDZ custom DSC
resources. However, we did not specify Single-Instance for the 3FHJTUSZ1PMJDZ, because
you can reapply the registry settings more than once.
Before the last line of the script is 4FDVSJUZ#BTFMJOF. The 4FDVSJUZ#BTFMJOF command
calls the $POGJHVSBUJPO4FDVSJUZ#BTFMJOF function, thereby generating all the MOF
files.
The last line of the script is 4UBSU%TD$POGJHVSBUJPO; this will push the configuration to
all targeted Nano Servers and apply the desired security settings.
All the codes provided in this chapter and other chapters are a companion
to this book.

Managing Nano Server with Windows PowerShell and Windows PowerShell DSC
[ 219 ]
Summary
In this chapter, we discussed how to manage a Nano Server installation using remote server
graphic tools, Windows PowerShell remoting, and PowerShell DSC.
As you have seen in this chapter, Microsoft invested heavily to bring PowerShell support
onto Nano Server. PowerShell relies on the .NET Framework; as you noticed, Nano Server
is a small OS and only has the Core of Common Language Runtime (CLR). The Core CLR
is a tiny subset of the .NET Framework, but the PowerShell team went ahead and actually
refactored all PowerShell to run on Core CLR, which was a huge effort. The good news is
that PowerShell users will probably not miss any of the most important features. It has full
language compatibility and supports PowerShell remoting, so you can use any of the most
popular remote commands such as *OWPLF$PNNBOE, /FX144FTTJPO, &OUFS
144FTTJPO, and so on.
Each Nano Server image contains by default Core CLR which is 45 MB of space; PowerShell
itself takes up about 8 MB of space and there is 2 MB for the two built-in modules.
PowerShell remoting is turned on by default, so a Nano Server installation will always be
ready to be remoted into and be managed remotely.
If you are reading this chapter by Fall 2017, Microsoft is working on a new Management
GUI tool focused on on-premises, disconnected server deployment. The upcoming solution
is replacing the previous Server Management Tools (SMT) preview service in Azure,
which is being retired on June 30, 2017. Stay tuned!
Continue now to $IBQUFS, Managing Nano Server with Third-Party Tools, to learn more
about how to manage Nano Server using 5nine Manager powered by 5nine software.

7
Managing Nano Server with
Third-Party Tools
In $IBQUFS, Managing Nano Server with Windows PowerShell and Windows PowerShell DSC,
we talked about how to effectively manage Nano Server installations with remote server
graphic tools, Windows PowerShell, and PowerShell Desired State Configuration (DSC).
The common question that we keep hearing is, How will admins be able to efficiently
operate the next generation of datacenters built on top of Nano Servers? Windows
PowerShell and DSC will be a popular choice; however they will require intermediate
learning skills which challenge many users. As mentioned in the previous chapter, one of
the biggest fears of IT professionals that we hear a lot is how to manage a headless server
without a GUI. Fortunately, with 5nine Manager (IUUQXXXOJOFDPNOJOFNBOBHFS
GPSIZQFSWQSPEVDUBTQY) you can get a full user-friendly management UI to remotely
deploy, configure, manage, and optimize a Nano Server installation.
In this chapter, we will show you how to manage Nano Server with 5nine Manager and
cover the following topics:
Nano Server administration using 5nine Manager
Creating and managing Nano Server failover clusters with 5nine Manager

Managing Nano Server with Third-Party Tools
[ 221 ]
Nano Server administration using 5nine
Manager
5nine Manager from 5nine software (IUUQXXXOJOFDPN) provides a centralized and
easy-to-use graphical user interface. It allows administrators to create, manage, and monitor
their Nano Server clusters, hosts, and VMs, in the same way as a traditional Hyper-V
infrastructure.
At the time of writing, the current version of 5nine Manager is V9.4. The minimum
supported version to manage Nano Server is V9.3 and later. You can download a trial
version from the following link:
IUUQTXXXOJOFDPNOJOFNBOBHFSGPSIZQFSWQSPEVDUBTQY.
Assuming you have installed 5nine Manager in your environment, open the console and
add the desired Nano Server that you want to administer.
As shown in Figure 1, we can specify the Name, IP Address, or use Active Directory to
discover Nano Hyper-V hosts:
(KIWTGPKPG/CPCIGTCFFKPIPCPQJQUVU

Managing Nano Server with Third-Party Tools
[ 222 ]
When you click on Active Directory, you can select the desired Nano host that you want to
manage (see Figure 2):
(KIWTGPKPG/CPCIGTCFF0CPQJQUVU#EVKXG&KTGEVQT[
The 5nine Manager console allows you to navigate and view summarized information at
the datacenter, cluster, host, or virtual machine level. It integrates almost a dozen separate
interfaces similar to what you would find in Windows Server or System Center to simplify
management for new or experienced Hyper-V users.

Managing Nano Server with Third-Party Tools
[ 223 ]
The Summary tab, as shown in Figure 3, pulls together all the critical data you need about
your Nano Server clusters, hosts, and VMs. You will see VM health, critical resources, disk
utilization, and any recent alarms:
(KIWTGPKPG/CPCIGT5WOOCT[VCDKPHQTOCVKQP
The Hyper-V Manager tab will allow you to manage all your virtual machines running
Nano Server along with every other supported OS. In Figure 4, you can see a Nano Server
VM being selected, allowing the user to perform traditional actions, such as starting or
stopping a VM, along with some more advanced controls, such as checkpoints, exports,
cloning, live migration, configuring, and monitoring VM replication. The display is
customizable so you can filter the list to show Nano Server VMs with attributes that you are
interested in, including the IP Address of the VM:

Managing Nano Server with Third-Party Tools
[ 224 ]
(KIWTGPKPG/CPCIGT*[RGT8/CPCIGTVCDKPHQTOCVKQP
The Virtual Network Manager is used to manage external, internal, and private Nano
Server virtual networks. Figure 5 shows a user remotely managing several different types of
network:
(KIWTGPKPG/CPCIGT8KTVWCN0GVYQTM/CPCIGTVCDKPHQTOCVKQP
To help you maintain a healthy Nano Server environment, 5nine Manager will also let you
monitor and optimize your configuration. There are numerous troubleshooting and logging
tools built-in, and most management tasks can be simplified through wizards.

Managing Nano Server with Third-Party Tools
[ 225 ]
In Figure 6, a new virtual machine being created on a Nano Server Hyper-V host:
(KIWTGPKPG/CPCIGTETGCVGXKTVWCNOCEJKPGYK\CTF
In the Specify Generation page as shown in Figure 7, you can specify a desired VM
generation and the virtual machine version that will be deployed on a Nano Server host:

Managing Nano Server with Third-Party Tools
[ 226 ]
(KIWTGPKPG/CPCIGT%TGCVG8KTVWCN/CEJKPG9K\CTF5RGEKaPI8/IGPGTCVKQP
In earlier releases of Hyper-V, whenever you upgrade your host to a new
release, the moment Hyper-V sees your virtual machines the configuration
version will be upgraded automatically behind the scenes.
This behavior has been changed in Windows Server 2016 Hyper-V including Nano Server.
When you import a virtual machine, Hyper-V will not automatically upgrade your virtual
machine version. Upgrading a virtual machine configuration version is a manual operation
that is separate from upgrading the host. This gives you the flexibility to move individual
virtual machines back to Windows Server 2012 R2 Hyper-V if needed.

Managing Nano Server with Third-Party Tools
[ 227 ]
As a reference, version 5.0 is the configuration version of Windows Server 2012 R2. Version
2.1 was for Windows Server 2008 R2 SP1. The configuration version was always there for 
internal usage based on the functionality and not on the release, and it was not displayed to
users. In Windows Server 2016 Hyper-V, the default VM version is 8.0.
The Summary page as shown in Figure 8, will display all the Nano Server settings that will
be applied to this VM:
(KIWTGPKPG/CPCIGT%TGCVG8KTVWCN/CEJKPGYK\CTF5WOOCT[

Managing Nano Server with Third-Party Tools
[ 228 ]
The 5nine Manager Monitor tab displays real-time and historical data about key
performance metrics for Nano Server hosts and virtual machines. This includes CPU (%),
memory (%), disk I/O (%), and network traffic (kbps), along with detailed data about cluster
disk usage. In Figure 9, is an example of a Nano Server host, along with predictive
utilization trend lines.
(KIWTGPKPG/CPCIGT/QPKVQTVCD
Monitoring and history are available on a per-cluster-node level.

Managing Nano Server with Third-Party Tools
[ 229 ]
It is also possible to set custom alert thresholds from the Options on the View Menu. These
thresholds allow you to set certain resource utilization limits for warnings and email alerts
as shown in Figure 10. If one of these metrics is exceeded, you will be notified about the
issue:
(KIWTGPKPG/CPCIGTUGVVKPIEWUVQOCNGTVVJTGUJQNFU
Any individual resource can be ignored if desired and there is also the ability to exclude
any host or VM from being monitored at all. 5nine Manager also monitors the health of
your disks, as shown in Figure 11, so you have enough storage capacity, notifying you if you
are running low on space for your Nano Server virtual machines:

Managing Nano Server with Third-Party Tools
[ 230 ]
(KIWTGPKPG/CPCIGTOQPKVQTFKUMCNNQECVGFURCEG
5nine Manager's Capacity Planning tab, as shown in Figure 12, collects data from key
performance indicators the Nano Server hosts and virtual machines, including CPU,
memory, disk, and network utilization:
(KIWTGPKPG/CPCIGT%CRCEKV[2NCPPKPIVCD

Managing Nano Server with Third-Party Tools
[ 231 ]
After 5nine has monitored these metrics for a period of time, it uses predictive analytics to
estimate the rate of utilization and when each resource will be fully consumed. This allows
you to proactively make hardware acquisition requests, eliminating a lot of the guesswork.
This solution lets you understand future needs to allow your infrastructure to grow at the
optimal pace, and ensuring you do not get surprised when you are suddenly out of
capacity.
The 5nine Manager System Status Report tab is used to dynamically create a report of each
Nano Server host and the VMs running on it. After selecting key report information, the
graphical report will inventory the configuration and settings of each component. This data
can be saved and exported in several different file types, helping those with compliance 
reporting needs. In Figure 13, you can see an example of the useful data:
(KIWTGPKPG/CPCIGT5[UVGO5VCVWU4GRQTVVCD

Managing Nano Server with Third-Party Tools
[ 232 ]
5nine Manager also makes troubleshooting easy by integrating dozens of cluster, host, and
virtual machine logs into the console. It is easy to filter and view different event information
to help identify the source of your issues. See Figure 14:
(KIWTGPKPG/CPCIGT*[RGT8.QIUVCD
Creating and managing Nano Server failover
clusters with 5nine Manager
5nine Manager provides you with standard failover cluster operations, allowing you to
create, validate, and configure a highly-available Nano Server infrastructure. The cluster
best practice analyzer is even integrated into the process so you can ensure the highest
uptime possible for your Nano Server virtual machines.
In this section, we will show you how to create and manage a Nano Server failover cluster
with 5nine Manager.

Managing Nano Server with Third-Party Tools
[ 233 ]
Creating a cluster
5nine Manager lets you discover hosts and create a failover cluster. It will allow you to
specify nodes, run cluster Validation, provide a client access point, and then create the
cluster as shown in Figure 15:
(KIWTG%TGCVGENWUVGTYK\CTF

Managing Nano Server with Third-Party Tools
[ 234 ]
Validating a cluster
Failover cluster validation is an essential task in all deployments as it is required for your
cluster to be supported by Microsoft. With 5nine Manager, you can test the health of your
cluster during configuration, or afterwards as a troubleshooting tool. You can granularly
select the different tests to run as shown in Figure 16, and see the same graphical report you
are familiar with:
(KIWTGPKPG/CPCIGT8CNKFCVG%NWUVGT%QPaIWTCVKQP
Review the cluster validation report and click Next.

Managing Nano Server with Third-Party Tools
[ 235 ]
Specify the cluster Access Point name and add the static IP address as shown in Figure 17:
(KIWTG%TGCVKPI0CPQ%NWUVGTYK\CTF

Managing Nano Server with Third-Party Tools
[ 236 ]
Click Next. Review the summary and click Finish (see Figure 18):
(KIWTG%TGCVKPI0CPQENWUVGTUWOOCT[

Managing Nano Server with Third-Party Tools
[ 237 ]
Configuring live migration settings
It is important to have a dedicated network for live migration to ensure that its traffic does
not interfere with cluster heartbeats or other important traffic. With 5nine Manager you can
specify the number of simultaneous live migrations and storage live migrations, and even
copy those settings to the other cluster nodes. It is a best practice to configure all your
clusters nodes the same way so that a VM operates the same, regardless of which host it is
running on (see Figure 19):
(KIWTG%QPaIWTKPINKXGOKITCVKQPUGVVKPIU
Viewing the cluster summary
5nine Manager has a summary dashboard that centrally reports the health of the cluster and
its virtual machines. It quickly identifies nodes or VMs with problems, and lists any alerts
from its resources. This Summary dashboard can also be refocused at the datacenter,
cluster, host, and VM level for more refined results (see Figure 20):

Managing Nano Server with Third-Party Tools
[ 238 ]
(KIWTG%NWUVGTUWOOCT[
Managing cluster nodes
With 5nine Manager, you can manage and configure your virtual disk and network
settings. You can also perform standard maintenance tasks, such as to Pause and Resume a
cluster node as shown in Figure 21, which will live-migrate VMs to other nodes as it
evacuates a node to prepare for maintenance. A key point to mention is, when you let the
cluster automatically choose nodes for placement (the best possible node), it will move the
VMs to the node(s) with the most free memory. A list of active and failed cluster tasks is
also displayed through the interface:
(KIWTG2CWUKPICENWUVGTPQFG

Managing Nano Server with Third-Party Tools
[ 239 ]
Managing clustered VMs
You can manage any type of virtual machine that is supported by Hyper-V, including
Windows Server, Hyper-V Server, Windows, Linux, UNIX, and Windows Server 2016 Nano
Server. 5nine Manager lets you centrally manage all your virtual machines, including the
latest performance and security features for virtualization. The full GUI console even runs
on all versions of Windows Server, including the otherwise GUI-less Windows Server Core
and Hyper-V Server.
You can also Set IP address for Nano virtual machines, which makes remote network
configuration much easier (see Figure 22):
(KIWTG5GV+2CFFTGUUQPC0CPQ5GTXGTJQUV

Managing Nano Server with Third-Party Tools
[ 240 ]
Host Load Balancing
5nine Manager allows you to group cluster nodes and hosts that will load-balance VMs. It
live-migrates the VMs between hosts when customizable thresholds are exceeded. This type
of dynamic optimization ensures that a single host does not get overloaded, providing
higher-availability and greater performance for the virtual machines (see Figure 23):
(KIWTG*QUVF[PCOKEQRVKOK\CVKQP
Failover clustering should be an integral part of your virtualized Nano Server
infrastructure, and 5nine Manager provides a way to centrally manage all your clustered
VMs.

Managing Nano Server with Third-Party Tools
[ 241 ]
Finally, you can also Add Hyper-V Replica Broker for the Nano cluster (see Figure 24):
(KIWTG#FFKPI*[RGT8TGRNKECDTQMGT
Clustered virtual machine security
In a physical environment, it is easy to install and manage agents on every server through
endpoint protection. However, virtualized environments need to manage security
differently from traditional data centers because virtual machines, disks, and networks can
be dynamic and constantly changing. It's usually impractical to install security agents inside
every VM. 5nine Cloud Security from 5nine Software provides the only agentless antivirus,
firewall, and intrusion detection solution for Windows Server Hyper-V with protection
from Bitdefender, Kaspersky labs, or ThreatTrack. This security software filters traffic going
into and out of the VMs through an extension of the Hyper-V virtual switch, which
provides protection at the host level and before the threat even reaches the VM. This means
security is centrally managed and the user never has to worry about updating or scanning
the guest OS, regardless of whether the VM is running Nano Server, Windows Server,
Windows Client, or Linux.
The antivirus functionality in 5nine Cloud Security is not supported for
Nano Server-based Hyper-V hosts.
Get more information about 5nine Cloud security at:
IUUQXXXOJOFDPNOJOFTFDVSJUZGPSIZQFSWQSPEVDUBTQY.

Managing Nano Server with Third-Party Tools
[ 242 ]
Summary
In this chapter, we discussed how to administer Nano Server using 5nine Manager from
5nine Software (IUUQXXXOJOFDPN) and we showed you how to create and manage a
Nano Server failover cluster.
Continue now to $IBQUFS, Running Windows Server Containers and Hyper-V Containers on
Nano Server, to learn more about Windows Server and Hyper-V Containers, and understand
why Nano Server is a great platform for modern applications.

8
Running Windows Server
Containers and Hyper-V
Containers on Nano Server
When it comes to applications, historically IT administrators have deployed with a 1:1
application to server ratio. When the business needed a new application, it was deployed
onto a newly provisioned physical system, to ensure no conflicts with existing applications
and workloads. This resulted in a large number of physical servers, all with very low
utilization.
Fast forward to a more modern datacenter today, where virtual machines are now
prevalent, and you'll find significantly higher consolidation ratios, much greater utilization
and significantly accelerated app deployment speeds as administrators deploy applications
in minutes, compared to hours, days, or weeks in a purely physical datacenter.
There is however, a new and increasingly popular way to build, ship, deploy, and
instantiate applications. Containers can further accelerate application deployment and
streamline the way IT operations and development teams collaborate to deliver applications
to the business.
In this chapter, we will talk about Windows containers, show you how to run containers on
Nano Server, and we will cover the following topics:
Container overview
Windows Server containers and Hyper-V containers
Running Windows containers on Nano Server

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 244 ]
Container overview
Containers are an operating system-level isolation method for running multiple
applications on a single control host. With developers building, and then packaging their
applications into containers, and providing them to IT to run on a standardized platform, it
reduces the overall effort to deploy applications, and can streamline the whole dev and test
cycle, ultimately reducing costs. As containers can run on a host OS, which itself could be a
physical or virtual machine, it provides IT with flexibility, and the opportunity to drive an
increased level of server consolidation, all while keeping a level of isolation that allows
many containers to share the same host operating system.
Container benefits
Applications are fueling the innovation in today's cloud-mobile world, and developers hold
the keys to the power of those applications. The more streamlined and efficient the process
for developers to build and deliver their applications, the faster more powerful applications
can reach the business. This however, has to apply to both the developers and IT, who hold
the keys when it comes to the infrastructure that the applications will run on.
For developers, containers unlock huge gains in productivity, and freedom; the ability to
build an application, package it within a container, and deploy it, knowing that, wherever
you deploy that container, it will run without modification, whether that is on-premise, in a
service provider's datacenter, or in the public cloud using services such as Microsoft Azure.
These containers don't have to be deployed independently - developers can model complex
multi-tier applications, with each tier packaged within a container. This powerful
abstraction of microservice architectures provides developers with incredible potential to
deliver applications more rapidly than ever before. They can't however, do it without
operations IT team support.
On the operations side, the Ops team benefit considerably from being able to gain ever
higher levels of consolidation for applications and workloads than even virtualization could
provide, and in addition they can put in place a platform that can rapidly scale up and
down to meet the changing needs of the business. This standardized platform is easier to
manage, yet provides developers with a consistent environment into which they can simply
provide their app, and hit run.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 245 ]
This integration across development and operations is what's becoming known in the
industry as DevOps. DevOps aims to integrate people, processes, and tools to streamline
the application development and deployment life cycle. Ops can focus on providing a
standardized infrastructure and a set of resources that can be consumed by the
development teams, and developers can focus on designing, building, packaging, and
testing their applications, using the platform that IT provides.
What is a container?
Now that we understand a little more about why containers are important to both
operations and developers, it's important to understand just what a container is.
As shown in Figure 1, at the base we have a server. This could be physical, or a virtual
machine, and at this stage it doesn't matter. On that server is a host operating system, which
has container support within the kernel:
(KIWTG%QPVCKPGTQXGTXKGY
If you think about an application, each app tends to have its own dependencies. This could
include software, such as services, or libraries, or it could have hardware dependencies,
such as CPU, memory, or storage. The container engine that exists within the host OS is
essentially a lightweight virtualization mechanism that isolates these dependencies on an
application basis, by packaging them into containers.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 246 ]
These containers run as isolated processes in the user space, on the host operating system,
sharing the kernel with other containers. These containers can also be created instantly,
which unlocks rapid scale-up and scale-down scenarios in response to changes in demand
from the business.
There are a number of reasons why containers are attractive for developers and IT:
Fast iteration: Containers allow for rapid iteration through the development
process both because they are lightweight and because of the way the application
is packaged with its dependencies.
Defined state separation: Changes to the container don't affect other containers.
Resource controls: You can constrain the resources used by a container. This
ensures that a container gets resources such as CPU, RAM, and network
bandwidth as specified and does not affect the performance of other containers
running on the same host, because effectively a container can use what it needs if
resources are not restrained. These resources are set at container runtime
creation.
Immutability: Changes made within one container won't affect containers
running on the same host.
Rapid deployment: Since containers are lightweight in terms of resources, they
are easy to move, copy, and share. This enables rapid application deployment.
Containers versus virtual machines
If you think about a virtual machine as shown in Figure 2, each VM typically includes the
app itself, the required binaries, libraries, and a guest OS, which may consist of multiple
GBs of data. This runs on top of a hypervisor, and consumes a slice of resources from the
underlying host operating system. One advantage of the virtualization approach is that the
virtual machines can have different guest operating systems from one another, and from the
host operating system, which provides considerable flexibility and high utilization. In
addition, virtual machines can be flexibly migrated from one host to another, preserving
state, and supplying administrators with considerable flexibility, especially in scenarios
such as resource optimization and maintenance:

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 247 ]
(KIWTG8KTVWCNOCEJKPGQXGTXKGY
Virtual machines also offer very high levels of isolation, both for resources and security, for
key virtualized workloads.
However, you can achieve a best-of-both worlds approach, thus you can deploy containers
inside virtual machines as shown in Figure 3:
(KIWTG%QPVCKPGTQXGTXKGYTWPPKPIKPCXKTVWCNOCEJKPG

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 248 ]
Containers run on a host OS, but that host OS doesn't need to be a physical host. So, by
running containers in virtual machines, you can deploy multiple, different VM operating
systems, and inside, deploy multiple containers within those guest operating systems.
In this case, you would need fewer VMs to support a larger number of apps and fewer VMs
would result in a reduction in resource consumption.
Each VM would support multiple isolated apps, albeit sharing the same guest operating
system for the base image, but increasing overall density. This provides IT with
considerable flexibility, as running containers inside VMs enables features such as live
migration to increase service availability and host maintenance.
Windows Server containers and Hyper-V
containers
Windows Server containers are isolated behind their own network compartment. This can
be allocated a NAT DHCP or Static IP. Each container has an independent session
namespace, which helps to provide isolation and security. The kernel object namespace is
isolated per container, but it is shared with the same host operating system. The server that
runs Windows Server container could be a physical or virtual machine.
Each container also has access to certain CPU and memory resources, along with storage
and network capacity: these are controlled at runtime by the administrator, and this ensures
a predictable and guaranteed control over processes.
As shown in Figure 4, there are two containers sharing a number of libraries. These
packages also depend on a base OS image that describes the underlying operating system,
such as Server Core, which has a large number of APIs that Windows supports, such as
.NET, IIS, and so on.
Nano Server is also another base OS image; however, this has a much smaller surface,
which will target apps that have been written from the ground up, with the cloud in mind;
these are known as born-in-the-cloud applications:

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 249 ]
(KIWTG9KPFQYU5GTXGTEQPVCKPGTU
The first challenge is, not enough isolation because the isolation is in user-mode,
meaning a shared kernel. In a single environment where applications can be
trusted this is not a problem, but in a multi-tenant or hosted environment, a
malicious tenant may try to use the shared kernel to attack other containers.
The second challenge is a dependency on the host OS version including the patch
level, which may or may not cause problems; if a bad patch is deployed to the
host, this could break the application running in the container.
Hyper-V containers have a slightly different approach to containerization. As shown in
Figure 5, to create further isolation, each Hyper-V container has its own copy of the
Windows kernel guest OS running in an optimized virtual machine, which is a key
requirement for strong isolation.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 250 ]
Hyper-V is used for CPU, memory, and IO isolation (network and storage), which delivers
the same level of isolation found in traditional VMs. Similar to VMs, the host only exposes a
small, constrained interface to the container for the communication and sharing of host
resources. This very limited sharing means Hyper-V containers have slightly less efficiency
in terms of start-up times and density than Windows Server containers, but they have the
isolation required to allow untrusted and hostile multi-tenant applications to run on the
same host:
(KIWTG*[RGT8EQPVCKPGTU
Besides the optimizations to the OS that result from it being fully aware that it's in a
container and not in a physical machine, Hyper-V containers will be deployed using Docker
Engine (more on Docker in the following section) and can use the exact same packages that
run in Windows Server containers. Thus, the trade-off between the level of isolation and
efficiency and agility is a deploy-time decision, and not a development-time decision. The
administrator of the host will decide whether to run the container in isolated mode or not.
Windows Server and Hyper-V containers will both take advantage of the smaller
installation options, for Windows Server 2016: Server Core and the new deployment option
Nano Server. Nano Server is a highly-optimized, headless deployment option for Windows
Server that runs at a fraction of the Windows Server footprint and is ideal for cloud services.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 251 ]
What is Docker?
At a high level, Docker is an open source engine that automates the deployment of any
application as a portable, self-sufficient container that can run almost anywhere. Docker is a
management framework with a great set of management tools to manage the containers on
whatever platform you are using.
In June 2014, Microsoft Azure added support for Docker containers on Linux VMs, enabling
the broad ecosystem of Dockerized Linux applications to run within Azure's industry-
leading cloud.
In October 2014, Microsoft and Docker Inc. jointly announced bringing the Windows Server
ecosystem to the Docker community, through investments in Windows Server 2016, open-
source development of the Docker Engine for Windows Server, Azure support for the
Docker open orchestration APIs, and the federation of Docker Hub images into the Azure
gallery and portal.
Windows containers can run in your private Datacenter, in a hosted service provider, or in
any public cloud provider, and of course, Microsoft Azure.
Running Windows containers on Nano
Server
Before we show you how to run Windows containers on Nano Server, we will discuss and
explain the terminology that we will use in the subsequent sections:
The host operating system that will run containers is called the container host.
The containers could be either Windows Server containers or Hyper-V
containers.
Windows Server containers could be based on Server Core or Nano Server, which
run without hypervisor dependency. Windows Server containers share the same
kernel with the host, as well as each other.
Hyper-V containers could also be based on Server Core or Nano Server, which
run inside a special optimized virtual machine and require Hyper-V to be
enabled on the container host operating system.
The following section will describe the deployment process for how to run Windows Server
containers and Hyper-V containers on top of Nano Server, and then we will look at how to
convert Windows Server containers to Hyper-V containers.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 252 ]
Creating a Nano Server image for Windows
Server containers
The following section will detail the deployment of a very basic Nano Server configuration.
For a more thorough explanation of deployment and configuration options for Nano Server,
see $IBQUFS, Getting Started with Nano Server.
Follow the steps mentioned to create a VHD(X) image for Nano Server to be used as a
container host so we can run Windows Server containers:
Mount the Windows Server 2016 ISO medium on your machine. In this example,
1.
it's mounted on the ) drive.
Start Windows PowerShell as an administrator, and run the following script to
2.
create a VHD(X) for virtual machine deployment that includes the $POUBJOFS
package. You will be prompted for an administrator password:
SFHJPOWBSJBCMFT$PNQVUFS/BNF/"/07.$3)0454UBHJOHQBUIGPS
OFX/BOPJNBHF4UBHJOH1BUI$=1BUIUP8JOEPXT4FSWFS*40
GJMF.FEJB1BUI)=1BUI+PJO1BUI1BUI4UBHJOH1BUI
$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU1SPNQU	1MFBTFTQFDJGZMPDBM
"ENJOJTUSBUPSQBTTXPSE	"T4FDVSF4USJOHFOESFHJPOSFHJPO$PQZTPVSDF
GJMFTJG
OPU
5FTU1BUI1BUI4UBHJOH1BUI\NLEJS
1BUI4UBHJOH1BUI^JG
OPU
5FTU1BUI1BUI1BUI
\/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI
$IJME1BUI/BOP4FSWFS3FTPMWF$PQZ*UFN1BUI/BOP4FSWFS4PVSDF1BUI
%FTUJOBUJPO4UBHJOH1BUI3FDVSTF^FOESFHJPOSFHJPO(FOFSBUF/BOP
*NBHF*NQPSU.PEVMF/BNF
+PJO1BUI1BUI1BUI
$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXT
,#YNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXT,#
YNTV	/BOP4FSWFS*NBHF1BSBNFUFST!\$PNQVUFS/BNF$PNQVUFS/BNF
.FEJB1BUI.FEJB1BUI#BTF1BUI
+PJO1BUI1BUI1BUI
$IJME1BUI$PNQVUFS/BNF
WIEGPS#*04BOEWIEYGPS6&'*TZTUFN5BSHFU1BUI+PJO1BUI
1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIEY	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE$POUBJOFSTUSVF
&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF&OBCMF&.4USVF%FQMPZNFOU5ZQF
	(VFTU	&EJUJPO	%BUBDFOUFS	.BY4J[F(#4FSWJDJOH1BDLBHF1BUI
4FSWJDJOH1BDLBHF1BUI^/FX
/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFSTFOESFHJPO

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 253 ]
The previous script will create a VHDX image file using Windows Server 2016 ISO mounted
as the )= drive. When creating the image, it uses a folder called /BOP4FSWFS found on the
root $ drive. The file is placed under the same folder called /"/07.$3)045. In this
example, the computer name is set to /"/07.$3)045 and includes (VFTU drivers. We will
deploy a generation 2 virtual machine, thus we created the image as VHDX.
We added the container package, which will ensure that the image has the container feature
enabled so you can deploy Windows Server containers on top of Nano Server running as a
container host.
We also enabled the remote management port, and finally we added the latest Windows
Server updates to the image.
The critical updates are required in order for the Windows Container
feature to function properly.
Creating a Nano Server VM for Windows Server
containers
Once the image is created, you need to create a virtual machine from this VHD(X).
The following is a quick PowerShell script that will create a Nano VM for you:
WBSJBCMFTW4XJUDI/BNF&YU@W4XJUDI*OTUBMM3PPU%=7.T=/"/07.
$3)0457./BNF/"/07.$3)045BENJO1BTTXPSE1!TTXSEMPDBM$SFEOFX
PCKFDUUZQFOBNF4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBMA
BSHVNFOUMJTU"ENJOJTUSBUPS
$POWFSU5P
4FDVSF4USJOHBENJO1BTTXPSE"T1MBJO5FYU
'PSDF*1(8*1%/4*1$SFBUF
7./FX7)%1BUI
*OTUBMM3PPU=/"/07.$3)045@%WIEY4J[F#ZUFT(#
%ZOBNJD/FX7.7)%1BUI
*OTUBMM3PPU=/"/07.$3)045WIEY(FOFSBUJPO
.FNPSZ4UBSUVQ#ZUFT(#A
/BNF7./BNF1BUI*OTUBMM3PPU4XJUDI/BNFW4XJUDI/BNF4FU7..FNPSZ
7./BNF7./BNF%ZOBNJD.FNPSZ&OBCMFEGBMTF4FU7.1SPDFTTPS7./BNF7./BNF
$PVOU4FU7.7./BNF7./BNF"VUPNBUJD4UPQ"DUJPO4IVU%PXO
"VUPNBUJD4UBSU"DUJPO4UBSU*G3VOOJOH&OBCMF7.*OUFHSBUJPO4FSWJDF7./BNF
/BNF(VFTU4FSWJDF*OUFSGBDF3FOBNF7./FUXPSL"EBQUFS7./BNF7./BNF
/FX/BNFWN/*$.(54FU7./FUXPSL"EBQUFS7./BNF7./BNF/BNFWN/*$.(5
%FWJDF/BNJOH0O"EE7.4DTJ$POUSPMMFS7./BNF7./BNF"EE7.)BSE%JTL%SJWF
7./BNF7./BNF$POUSPMMFS5ZQF4$4*$POUSPMMFS/VNCFS$POUSPMMFS-PDBUJPO
1BUI
*OTUBMM3PPU=/"/07.$3)045@%WIEY4UBSU7./BNF7./BNF]0VU/VMM

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 254 ]
8BJUGPS7.UPSFTQPOE8BJU7./BNF7./BNF'PS)FBSUCFBU4FU/"/07.*1
BEESFTTTUBUJDBMMZVTJOH1PXFS4IFMM%JSFDU*OWPLF$PNNBOE7./BNF7./BNF
$SFEFOUJBMMPDBM$SFE4DSJQU#MPDL\
/FX/FU*1"EESFTT*OUFSGBDF"MJBT&UIFSOFU*1"EESFTT6TJOH*1
1SFGJY-FOHUI		5ZQF6OJDBTU%FGBVMU(BUFXBZ6TJOH(8*14FU
%OT$MJFOU4FSWFS"EESFTT*OUFSGBDF"MJBT&UIFSOFU4FSWFS"EESFTT6TJOH%/4*1
*OJUJBMJ[FOFXEBUBESJWFUPTUPSFEPDLFSJNBHFT(FU%JTL]8IFSF
0CKFDU\@1BSUJUJPO4UZMFFR3"8^]*OJUJBMJ[F%JTL1BTT5ISV]A
/FX1BSUJUJPO%SJWF-FUUFS%6TF.BYJNVN4J[F]'PSNBU7PMVNF
"MMPDBUJPO6OJU4J[F,#'JMF4ZTUFN/5'4/FX'JMF4ZTUFN-BCFM$POUBJOFS*NBHFT
$POGJSNGBMTF^
The previous script will create a NanoServer as generation 2 VM, then will start the VM and
wait for it to respond by using the 8BJU7.DNEMFU, and finally we set a static IP address
and initialize a new data volume inside Nano VM using PowerShell Direct.
Creating a remote PowerShell session
Because Nano Server does not have an interactive log-on nor remote desktop capabilities,
all management will be completed from a remote system using Windows PowerShell.
Since we did not add Nano Server to the domain, we need to add the Nano Server system to
trusted hosts on our management machine so we can manage it remotely:
Replace the IP Address with the IP Address of your Nano Server:
1.
4FU*UFN84.BO=MPDBMIPTU=$MJFOU=5SVTUFE)PTUT
'PSDF
Create a remote PowerShell session by running the following command:
2.
/BOP*1/BOP$SFE(FU$SFEFOUJBM
_="ENJOJTUSBUPS4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP*1
$SFEFOUJBM/BOP$SFE
Installing Docker
Docker is needed to work with Windows containers. The Docker installer for Windows is
now available in an online package repository. It can be found and installed using the
Docker provider of the package management (a.k.a. OneGet) PowerShell module. The
provider needs to be installed before we start using it.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 255 ]
The following PowerShell cmdlets can be used to install the provider.
Open a remote PowerShell session on Nano Server. This assumes that you have
1.
already completed the steps described earlier:
4FTTJPO]&OUFS144FTTJPO
Run the following command within the remote PowerShell session to install the
2.
Docker provider PowerShell module to the Nano machine:
*OTUBMM.PEVMF/BNF%PDLFS.TGU1SPWJEFS3FQPTJUPSZ14(BMMFSZ
'PSDF
Run the following command within the remote PowerShell session to install the
3.
latest version of Docker using the OneGet to Nano machine:
*OTUBMM1BDLBHF/BNFEPDLFS1SPWJEFS/BNF%PDLFS.TGU1SPWJEFS
When the installation is completed, reboot the Nano Server machine.
4.
3FTUBSU$PNQVUFS'PSDF
Installing base container images
The base OS images are used as the base for any Windows Server or Hyper-V container and
their characteristics are described as follows:
Container images are a read-only template used to start and create a container.
These templates contain applications, dependencies, and instructions.
These images can comprise multiple layers (that is you have a base OS image,
and then you might have another layer on top of it for your web application).
The layers are shared between containers. As an example: let's say you have
deployed a base OS image named CBTF, the base OS image could be Server
Core or Nano Server, then you installed Web Server onto it, and then you capture
and create a new container image named XFC which contains, for example, an
IIS server that you just installed. Then, you may redeploy XFC to new
containers named "QQJNBHF and "QQJNBHF: these new container images
have their own applications (that is HTML or PHP), but they share the same web
server image, XFC and have a common base OS image, CBTF.
The images might have process execution instructions known as bootstrapping
(that is, every time you start a container based on a certain image, you can start a
specific process).

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 256 ]
The images can be stored and retrieved from a container image repository (that
is, a public repository such as Docker Hub).
If you are planning to use only Windows Server containers, the base OS image must match
the container host operating system. In other words, if the container host OS is Nano Server
as described in this chapter, then you can only run Nano containers. So, if you try to create a
Server Core container on top of a Nano Server container host, you will encounter an error
that states: The operating system of the container does not match the operating system of
the host.
However, you can create containers based on a Server Core OS image, if you are planning
to use only a Hyper-V container and have a Hyper-V hypervisor enabled on your Nano
Server container host (more on that in the Creating a Hyper-V Container section).
The following steps will show you how to pull a Nano Server base OS image:
Open a remote PowerShell session on Nano Server. This assumes that you
1.
already completed the steps described earlier:
4FTTJPO]&OUFS144FTTJPO
To download and install the latest Windows Nano Server base image on top of
2.
Nano Server container host, run the following command:
%PDLFSQVMMNJDSPTPGUOBOPTFSWFS
To see the list of images that you have on that container host, run the following
3.
command:
%PDLFSJNBHFT
As shown in Figure 6, we have just one base OS image (Nano Server) that we
downloaded in step 2:
(KIWTG0CPQ5GTXGTDCUG15KOCIG

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 257 ]
The container images downloaded or created will be stored on the container host
4.
in the following default location:
$=1SPHSBN%BUB=.JDSPTPGU=%PDLFS=
It's also recommended you change the default image location path from drive $
5.
to another drive (more on that in the Create Hyper-V Container section).
Managing container networking
If you think about a Hyper-V host, we typically install several virtual machines on that host
and each VM has its own IP address. The VM typically will have exposed the IP address as
an endpoint like a physical system. If you want to access a resource that is being hosted on
that VM, we used to access that VM directly. However, Windows containers support five
different networking modes as follows:
Network Address Translation (NAT)
Transparent
l2bridge
l2tunnel
Overlay
For more information about the different container networking options,
check the following article: IUUQTEPDTNJDSPTPGUDPNFOVTWJSUVB
MJ[BUJPOXJOEPXTDPOUBJOFSTNBOBHFDPOUBJOFSTDPOUBJOFSOFUXPSL
JOH.
For the remainder of this chapter, we will use the NAT networking option, as this is the
commonly used scenario. With containers, we have a large density capability, we can
literally deploy 1,000 containers on a single host. So rather than giving each container a
publicly accessible IP address, we can put the container endpoint behind NAT. The
container Nano host might have an IP address that is publicly available; however, the
container itself has a non-routable IP address. When you want to access an application
within the container, we will access the container host and then build port mapping
between the external port on the host and the internal port on the container application. For
example, the external and internal ports may be mapped (, , and ).

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 258 ]
By default, when you install the Docker package on the container host, the Windows
Docker Engine creates a default NAT network named OBU with the IP prefix
. If you want to create a NAT network with a specific IP prefix, then you
could do one of the following two things by changing the options in the Docker config
EBFNPOKTPO file located at $=1SPHSBN%BUB=%PDLFS=DPOGJH=EBFNPOKTPO. You need
to create that file if it does not already exist (more on that in a bit):
Use the GJYFEDJES*11SFGJY .BTL option, which will create the
default NAT network with the IP prefix and match specified.
Or else we can use the CSJEHFOPOF option, which will not create a
default network; a user can create a user-defined network with any driver using
the EPDLFSOFUXPSLDSFBUFEcommand.
Before changing either of the previous configuration options, the Docker service must first
be stopped on the container host and any pre-existing NAT networks need to be deleted.
Open a remote PowerShell session on Nano Server:
1.
4FTTJPO]&OUFS144FTTJPO
You can check the current container NAT network subnet on the host by running
2.
the following command:
(FU$POUBJOFS/FUXPSL
As shown in Figure 7, the current container network subnet is
:
(KIWTG%QPVCKPGT0GVYQTM1XGTXKGY
We will change the container network subnet by running the following
3.
commands:
4UPQ4FSWJDFEPDLFS(FU$POUBJOFS/FUXPSL]3FNPWF
$POUBJOFS/FUXPSL'PSDF

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 259 ]
Next, we need to create a EBFNPOKTPO file at
4.
$=1SPHSBN%BUB=EPDLFS=DPOGJH=EBFNPOKTPO on the Nano Server container
host. Run the following command:
/FXJUFN5ZQF'JMF$=1SPHSBN%BUB=EPDLFS=DPOGJH=EBFNPOKTPO
Run the following command to edit the EBFNPOKTPO file and add the desired
5.
network subnet:
"EE$POUFOU	$=QSPHSBNEBUB=EPDLFS=DPOGJH=EBFNPOKTPO		\GJYFE
DJES^
Start the Docker service by running the following command:
6.
4UBSU4FSWJDFEPDLFS
Check the container NAT network again by running (FU$POUBJOFS/FUXPSL
7.
and confirm that the new NAT subnet is created (see Figure 8):
(KIWTG%TGCVG0GYEQPVCKPGTPGVYQTM
By default, the container endpoints will be connected to the default OBU network.
8.
To access applications running inside a container connected to a NAT network, we need to
create port mappings between the container Nano host and the container endpoint.
Please note that port mappings must be specified at container creation
time or while the container is in a 45011&% state.
In the following example, we will create a static mapping between port  of the
container host and port  of the container endpoint (more on that in the Create Windows
Server Container section):
%PDLFSSVOJUQNJDSPTPGUOBOPTFSWFS

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 260 ]
Managing container storage
We discussed in the Installing base container images section how to install a container image.
Container images are not designed for persistent data, because containers, by default, use a
temporary scratch space on the container host's system drive media for storage during only
the lifetime of the running container. So, if you put your database there and you stop or
delete the container, the database is gone. It is possible to move the container scratch space
location to a different drive (more on that in the Create Hyper-V Container section at the end
of this chapter).
Container images are also not a good place to store secret data, because if you put any
sensitive data on the container image and then you push that image to Docker Hub, then
everybody can pull that image off and get access to the secrets.
A good option for container storage is volumes. Volumes are persistent storage for
containers; you can map volumes into containers. You can enable read-only or read/write
on a volume. And the most important aspect is that multiple containers running on the
same container host can access the same location at the same time. Microsoft has just
announced that you can also do network storage via SMB shares and access it through the
container's network.
The following steps will show you how to use volumes by mapping a folder named
$POUBJOFS%BUB on the container host to a running container:
Create a folder on the container Nano host by running the following command:
1.
/FX*UFN1BUI%=/BNF$POUBJOFS%BUB*UFN5ZQF%JSFDUPSZ
In this example, we will place a text file inside that folder for demo purposes. You
2.
can place anything you want:
/FX*UFN1BUI%=$POUBJOFS%BUB=/BNFEBUBCBTFUYU
*UFN5ZQF'JMF
When you create a container, you need to add the parameter (W) for volume
3.
mapping to the command (EPDLFSSVO) followed by the location of the folder on
the container host and the location path inside the container. The command will
look like this:
%PDLFSSVOJUWE=$POUBJOFS%BUBD=EBUB
NJDSPTPGUOBOPTFSWFSQPXFSTIFMM

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 261 ]
In this example, we created a new Nano container and ran PowerShell in an interactive
session. While in the container, you can see the %BUB folder is showing inside the container,
and the text file that we created on the container host named EBUBCBTFUYU is visible as
well (see Figure 9):
(KIWTG7UKPIXQNWOGUKPCEQPVCKPGT
When the container starts-up, it sees an extra folder on the $ drive called EBUB. That folder
is directly mapped to the container host, so anything you write to that folder shows on the
container host (%=$POUBJOFS%BUB) in this example and vice versa. So, when that
container is stopped and removed, all the data changes made in the container are still
available on the container host's volume. This is the best approach for storing databases that
support running SQL Server inside a container.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 262 ]
Managing Docker on Nano Server
Before we start creating Windows Server or Hyper-V containers, we need to manage
Docker on Nano Server from a remote management system using the Docker command-line
interface. This is because PowerShell Remoting, including PowerShell ISE, currently cannot 
redirect the teletype (TTY) terminal output of an interactive container shell to the initial
client's prompt (see Figure 10).The interactive container command is dPDLFSSVOJU:
(KIWTG4WPPKPIVJG&QEMGTEQOOCPFNKPGKPCTGOQVGUGUUKQP
Please note that you can also manage containers with Docker PowerShell as an alternative
to the Docker command-line interface (Docker), or alongside it. However, the PowerShell
module is currently still in alpha status and is likely to change rapidly.
For more information about Docker-PowerShell module, please check the following
repository: IUUQTHJUIVCDPN.JDSPTPGU%PDLFS1PXFS4IFMM.
For the remainder of this chapter, we will use the Docker command-line interface natively
to manage Windows containers on top of Nano Server.
The following steps can be used to prepare a Nano container host for Docker remote
management:
Open a remote PowerShell session on Nano Server:
1.
4FTTJPO]&OUFS144FTTJPO
Create a firewall rule on the Nano container host for the Docker remote
2.
connection. We will use port  for an unsecure connection:
/FX/FU'JSFXBMM3VMF%JTQMBZ/BNF	%PDLFS*OCPVOE	/BNF%PDLFS
EBFNPO1SPGJMF"OZ%JSFDUJPO*OCPVOE"DUJPO"MMPX1SPUPDPM
5$1-PDBM1PSU%FTDSJQUJPO*OCPVOESVMFGPS%PDLFS
EBFNPOUPBMMPXUIF%PDLFS&OHJOFUPBDDFQUJODPNJOH
DPOOFDUJPOTPWFS<5$1>

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 263 ]
Please note that it is NOT recommended to use an unsecure connection in
production. For more information on securing this connection over TCP
port  (Docker TLS), see IUUQTEPDTNJDSPTPGUDPNFOVTWJSUV
BMJ[BUJPOXJOEPXTDPOUBJOFSTNBOBHFNFOUNBOBHF@SFNPUFIPTU.
Next, we need to configure the Docker Engine to accept an incoming connection
3.
over TCP port . But first, we need to create a EBFNPOKTPO file at
$=1SPHSBN%BUB=EPDLFS=DPOGJH=EBFNPOKTPO on the Nano Server container
host. You can skip this step if you already created a EBFNPOKTPO file in an
earlier step:
/FXJUFN5ZQF'JMF$=1SPHSBN%BUB=EPDLFS=DPOGJH=EBFNPOKTPO
Next, run the following command to add connection configuration to the
4.
EBFNPOKTPO file that we just created in the previous step. This configures the
Docker Engine to accept incoming connections over TCP port . (See Figure
11). You can add more than one configuration option to the EBFNPOKTPO file,
but you need to make sure to separate them with commas:
"EE$POUFOU	$=QSPHSBNEBUB=EPDLFS=DPOGJH=EBFNPOKTPO		\
IPTUT<UDQOQJQF>^	
$BU1BUI	$=QSPHSBNEBUB=EPDLFS=DPOGJH=EBFNPOKTPO	
(KIWTG#FFKPICEQPPGEVKQPVQFCGOQPLUQPaNG
Finally, we will restart the Docker service on the Nano Server container host by
5.
running the following command:
3FTUBSU4FSWJDFEPDLFS
On the remote management system where you will be working, we need to
6.
download the Docker client by running the following command:
*OWPLF
8FC3FRVFTUIUUQTEPXOMPBEEPDLFSDPNDPNQPOFOUTFOHJOFXJOEPXT
TFSWFSDTEPDLFS[JQ0VU'JMFFOW5&.1=EPDLFS[JQ
6TF#BTJD1BSTJOH

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 264 ]
Next, we need to extract the compressed package that we downloaded in the
7.
previous step by running the following command:
&YQBOE"SDIJWF1BUIFOW5&.1=EPDLFS[JQ%FTUJOBUJPO1BUI
FOW1SPHSBN'JMFT
Run the following command to add the Docker directory (client) to the system
8.
path. This will enforce the path setting even after the system is rebooted:
<&OWJSPONFOU>4FU&OWJSPONFOU7BSJBCMF
1BUIFOW1BUI
$=1SPHSBN'JMFT=%PDLFS
<&OWJSPONFOU7BSJBCMF5BSHFU>.BDIJOF
Once completed, the Nano container host can be accessed and managed remotely.
9.
We will create an environmental variable named %0$,&3@)045 on the
management system that will ease the interaction with the Nano container host
so we can run Docker command-line remotely.
The following is the PowerShell command that can be used for this purpose:
Replace the IP address with the IP address of your Nano Server:
1.
FOW%0$,&3@)045UDQ
Once the variable is set as described in the previous step, you can start running
2.
the Docker command-line directly from your management system as shown in
Figure 12:
(KIWTG4WPPKPIVJG&QEMGTEQOOCPFNKPGNQECNN[CICKPUVVJG0CPQEQPVCKPGTJQUV
Creating a Windows Server container
Before starting to create Windows containers (either a Server container or a Hyper-V
container), we need a base OS image. As mentioned earlier, base OS images are available
with either Server Core or Nano Server as the container operating system.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 265 ]
You can also create and build your own container images and upload them to Docker Hub;
see the article at: IUUQTEPDTEPDLFSDPNFOHJOFHFUTUBSUFETUFQ@GPVS for more
information.
In this example, we will pull, from Docker Hub, a Nano Server-based OS image with the IIS
role enabled.
The following steps are performed from the management system:
You can search the available images on Docker Hub by running the following
1.
command followed by a filter value (that is, IIS):
%PDLFSTFBSDI**4
Next, we will pull the image named DPCSBOBOPJJT it by running the
2.
following command:
%PDLFSQVMMDPCSBOBOPJJT
Once the base image is downloaded, you can confirm by running the following
3.
command (see Figure 13):
%PDLFSJNBHFT
(KIWTG&QEMGTKOCIGUCXCKNCDNGQP0CPQCEQPVCKPGTJQUV
To create a Windows Server container based on this image, run the following
4.
command (EPDLFSSVOEU means that the detached containers can be started
and will run in the background):
%PDLFSSVOEUQDPCSBOBOPJJT

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 266 ]
To check if the container is created and running, you can run the following
5.
command (see Figure 14):
%PDLFSQT
(KIWTG9KPFQYU5GTXGTEQPVCKPGTTWPPKPIQP0CPQEQPVCKPGTJQUV
To see all containers available on the container host regardless of whether they
6.
are running or not, you can run:
%PDLFSQTB
To stop a container, you can run Docker stop followed by the container ID:
7.
%PDLFSTUPQDEDBF
To start a container, you can run Docker start followed by the container ID:
8.
%PDLFSTUBSUDEDBF
For all the available Docker command-lines, type EPDLFSIFMQ.
9.
For more information on a specific command, type EPDLFS$0.."/%IFMQ
10.
(see Figure 15):
(KIWTG&QEMGT%1//#0&*GNR

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 267 ]
On your management machine, open your favorite web browser and type the IP
11.
address of the container host followed by the TCP port () that we specified
in step 4. (See Figure 16):
(KIWTG++5TWPPKPIKPC0CPQEQPVCKPGT
As you can see, the container host will translate port 8082 from the external IP
 to the container endpoint on port 80, the IIS welcome page is
launched, and this confirms that IIS is running inside a Nano container.
To run a command in a running container, run the following command (see
12.
Figure 17):
%PDLFSFYFDJUDEDBFJQDPOGJH

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 268 ]
We ran the command FYFD in an interactive mode using the JU parameter, followed by
the container ID and the JQDPOGJH command.
In this example, the IP address of the Nano container is :
(KIWTG8KGYKPIVJG0CPQEQPVCKPGT+2CFFTGUU
Creating a Nano Server image for Hyper-V
containers
To run Hyper-V containers, the Hyper-V role is required to be enabled on a Nano Server
container host. If the container Nano host is itself a Hyper-V virtual machine as described in
the following example, then nested virtualization should be enabled before adding the
Hyper-V role.
Follow the steps to create a VHD(X) image for Nano Server to be used as a container host,
so we can run Hyper-V containers alongside Windows Server containers:
Mount the Windows Server 2016 ISO medium on your machine. In this example,
1.
it's mounted on the ) drive.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 269 ]
Start Windows PowerShell as an administrator, and run the following script to
2.
create a VHD(X) for virtual machine deployment that includes the $POUBJOFS
and $PNQVUF packages. You will be prompted for an administrator password:
SFHJPOWBSJBCMFT$PNQVUFS/BNF/"/07.$37)0454UBHJOHQBUI
GPSOFX/BOPJNBHF4UBHJOH1BUI$=1BUIUP8JOEPXT4FSWFS
*40GJMF.FEJB1BUI)=1BUI+PJO1BUI1BUI4UBHJOH1BUI
$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU1SPNQU	1MFBTFTQFDJGZ
MPDBM"ENJOJTUSBUPSQBTTXPSE	"T4FDVSF4USJOHFOESFHJPOSFHJPO
$PQZTPVSDFGJMFTJG
OPU
5FTU1BUI1BUI4UBHJOH1BUI\
NLEJS1BUI4UBHJOH1BUI
^JG
OPU
5FTU1BUI1BUI1BUI\
/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI
$IJME1BUI/BOP4FSWFS3FTPMWF$PQZ*UFN
1BUI/BOP4FSWFS4PVSDF1BUI%FTUJOBUJPO4UBHJOH1BUI3FDVSTF^
FOESFHJPOSFHJPO(FOFSBUF/BOP*NBHF*NQPSU.PEVMF/BNF
+PJO
1BUI1BUI1BUI$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF
4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXT
LCYNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXTLCYNTV	
/BOP4FSWFS*NBHF1BSBNFUFST!\
$PNQVUFS/BNF$PNQVUFS/BNF.FEJB1BUI.FEJB1BUI#BTF1BUI

+PJO1BUI1BUI1BUI$IJME1BUI$PNQVUFS/BNF
WIEGPS#*04BOEWIEYGPS6&'*TZTUFN5BSHFU1BUI+PJO
1BUI1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIEY	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE$PNQVUFUSVF$POUBJOFST
USVF&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF&OBCMF&.4USVF
%FQMPZNFOU5ZQF	(VFTU	&EJUJPO	%BUBDFOUFS	.BY4J[F(#
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHF1BUI^
/FX/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFSTFOESFHJP
The previous script will create a VHDX image file using the Windows Server 2016 ISO
mounted on the )= drive. When creating the image, it uses a folder called /BOP4FSWFS
found on the SPPU$ drive. The file is placed in the same folder called /"/07.$37)045. In
this example, the computer name is set to /"/07.$37)045 and includes (VFTU drivers.
We will deploy a generation 2 virtual machine, thus we created the image as VHDX.
We added both the container and compute packages; this will ensure that the image has the
container feature enabled so you can deploy Windows Server and Hyper-V containers. We
also enabled the remote management port, and finally we added the latest Windows Server
updates to the image.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 270 ]
The critical updates are required in order for the Windows Container
feature to function properly.
Creating a Nano Server VM for Hyper-V
containers
Once the image is created, you need to create a virtual machine from this VHD(X).
The following is a quick PowerShell script that will create a Nano VM and enable nested
virtualization for you:
7BSJBCMFTW4XJUDI/BNF&YU@W4XJUDI*OTUBMM3PPU%=7.T=/"/07.
$3)0457./BNF/"/07.$37)045BENJO1BTTXPSE1!TTXSEMPDBM$SFEOFX
PCKFDUUZQFOBNF4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBMA
BSHVNFOUMJTU"ENJOJTUSBUPS
$POWFSU5P
4FDVSF4USJOHBENJO1BTTXPSE"T1MBJO5FYU
'PSDF*1(8*1%/4*1$SFBUF
7./FX7)%1BUI
*OTUBMM3PPU=/"/07.$37)045@%WIEY4J[F#ZUFT(#
%ZOBNJD/FX7.7)%1BUI
*OTUBMM3PPU=/"/07.$37)045WIEY(FOFSBUJPO
.FNPSZ4UBSUVQ#ZUFT(#A
/BNF7./BNF1BUI*OTUBMM3PPU4XJUDI/BNFW4XJUDI/BNF%JTBCMF
EZOBNJDNFNPSZGPSOFTUFEWJSUVBMJ[BUJPO4FU7..FNPSZ7./BNF7./BNF
%ZOBNJD.FNPSZ&OBCMFEGBMTF$POGJHVSFWJSUVBMQSPDFTTPSGPSOFTUFE
WJSUVBMJ[BUJPO4FU7.1SPDFTTPS7./BNF7./BNF$PVOU
&YQPTF7JSUVBMJ[BUJPO&YUFOTJPOTUSVF&OBCMFNBDBEESFTTTQPPGJOHBOEEFWJDF
OBNJOH3FOBNF7./FUXPSL"EBQUFS7./BNF7./BNF/FX/BNFWN/*$.(54FU
7./FUXPSL"EBQUFS7./BNF7./BNF/BNFWN/*$.(5%FWJDF/BNJOH0O
.BD"EESFTT4QPPGJOH0O"EE7.4DTJ$POUSPMMFS7./BNF7./BNF"EE7.)BSE%JTL%SJWF
7./BNF7./BNF$POUSPMMFS5ZQF4$4*$POUSPMMFS/VNCFS$POUSPMMFS-PDBUJPO
1BUI
*OTUBMM3PPU=/"/07.$37)045@%WIEY4FU7.7./BNF7./BNF
"VUPNBUJD4UPQ"DUJPO4IVU%PXO"VUPNBUJD4UBSU"DUJPO4UBSU*G3VOOJOH&OBCMF
7.*OUFHSBUJPO4FSWJDF7./BNF/BNF(VFTU4FSWJDF*OUFSGBDF4UBSU7.
/BNF7./BNF]0VU/VMM8BJUGPS7.UPSFTQPOE8BJU7./BNF7./BNF
'PS)FBSUCFBU4FU/"/07.*1BEESFTTTUBUJDBMMZVTJOH1PXFS4IFMM
%JSFDU*OWPLF$PNNBOE7./BNF7./BNF$SFEFOUJBMMPDBM$SFE4DSJQU#MPDL\/FX
/FU*1"EESFTT*OUFSGBDF"MJBT&UIFSOFU*1"EESFTT6TJOH*11SFGJY-FOHUI		
5ZQF6OJDBTU%FGBVMU(BUFXBZ6TJOH(8*14FU%OT$MJFOU4FSWFS"EESFTT
*OUFSGBDF"MJBT&UIFSOFU4FSWFS"EESFTT6TJOH%/4*1
*OJUJBMJ[FOFXEBUBESJWFUPTUPSFEPDLFSJNBHFT(FU%JTL]8IFSF
0CKFDU\@1BSUJUJPO4UZMFFR3"8^]*OJUJBMJ[F%JTL1BTT5ISV]A
/FX1BSUJUJPO%SJWF-FUUFS%6TF.BYJNVN4J[F]'PSNBU7PMVNF
"MMPDBUJPO6OJU4J[F,#'JMF4ZTUFN/5'4/FX'JMF4ZTUFN-BCFM$POUBJOFS*NBHFT
$POGJSNGBMTF^

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 271 ]
The previous script will create a Nano Server generation 2 VM. We disabled dynamic
memory, and we enabled nested virtualization and MAC address spoofing. Then we start
the VM and wait for it to respond by using the 8BJU7. cmdlet; and finally we set a static
IP address and initialize a new data volume inside Nano VM using PowerShell Direct.
Creating a Hyper-V container
Managing Hyper-V containers with Docker is almost identical to managing Windows
Server containers. For more details, please refer to the sections entitled Installing Docker,
Managing container networking, and Managing Docker on Nano Server.
In the following example, we will download a Windows Server Core base OS image with
the IIS role enabled, and then we will run Hyper-V containers on top of the Nano Server
container host.
Before you proceed, please make sure to complete the steps described earlier:
In this step, we will change the Docker images and the scratch space location on
1.
the container host. First, we need to create a EBFNPOKTPO file at
$=1SPHSBN%BUB=EPDLFS=DPOGJH=EBFNPOKTPO on the Nano Server container
host. You can skip this step if you already created this file in an earlier step. Run
the following command:
/FXJUFN5ZQF'JMF$=1SPHSBN%BUB=EPDLFS=DPOGJH=EBFNPOKTPO
Run the following command to edit the EBFNPOKTPO file and add the desired
2.
container scratch space location. In this example, we have added the following
three configuration options:
"EE$POUFOU	$=QSPHSBNEBUB=EPDLFS=DPOGJH=EBFNPOKTPO		\
IPTUT<UDQOQJQF>GJYFE
DJESHSBQI%==1SPHSBN%BUB==%PDLFS^	
Start the Docker service by running the following command:
3.
4UBSU4FSWJDFEPDLFS
Download the Windows Server Core (IIS) image from Docker Hub by running
4.
the following command:
%PDLFSQVMMNJDSPTPGUJJT

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 272 ]
Once the base image is downloaded, you can confirm it by running the following
5.
command (see Figure 18):
%PDLFSJNBHFT
(KIWTG9KPFQYU5GTXGT%QTGDCUG15KOCIGYKVJ++5
It's very important to note that the Nano Server base OS image is much smaller in
6.
size than the Server Core image (see Figure 19):
(KIWTG5GTXGT%QTGKOCIGXGTUWU0CPQ5GTXGTKOCIG
To create a Hyper-V container with the Docker command-line, the 
7.
JTPMBUJPOIZQFSW parameter must be used as shown in the following example:
EPDLFSSVOEUQJTPMBUJPOIZQFSWNJDSPTPGUJJTEPDLFSSVO
EUQJTPMBUJPOIZQFSWNJDSPTPGUJJT
You might notice that creating a Hyper-V container for the first time can take a bit longer
than a Windows Server container and this is expected because of the isolation around the
hypervisor. You might also note that starting and stopping a Hyper-V container is also
slower than a Windows Server container.
If you don't specify the JTPMBUJPOIZQFSW parameter, the container will be created as a
Windows Server container by default.
In the previous example, we created two Hyper-V containers and mapped each one to a
different TCP port:
On the container Nano host, the virtual machine work process (vmwp) is visible
1.
and the Hyper-V container is running in a specialized virtual machine that is
encapsulating the running container and protecting the running processes from
the container host operating system (see Figure 20):

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 273 ]
(KIWTG8KTVWCNOCEJKPGYQTMRTQEGUUHQTC*[RGT8EQPVCKPGT
With Hyper-V containers, you can run multiple container instances concurrently
2.
on a container host; however, each container runs inside a special optimized
virtual machine. This gives kernel level isolation between each Hyper-V container
and the container host.
You can use the 5FTU$POOFDUJPO cmdlet from your management machine to
3.
check if the containers running on the container Nano host are responding
through the external IP address with their specified TCP port (see Figure 21):
(KIWTG6GUKPIEQPPGEVKQPQWVRWVHQTTWPPKPIEQPVCKPGTU
Converting a Windows Server container to a
Hyper-V container
You can take any Windows Server container, develop it up, make sure it's working as
expected, and then convert it to a Hyper-V container.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 274 ]
So, if you are developer and you are building an application, you can package it and deploy
it as Windows Server container in a test environment probably, and then convert it to a
Hyper-V container and run it in a more isolated environment. In this case, you don't have to
change your application.
In the following example, we will demonstrate how to convert a Windows Server container
to a Hyper-V container running on top of a Nano Server container host:
To find out what runtime or isolation technology you are using for those
1.
containers, you can add the parameter GJMUFS to the EPDLFSQT command to
list and filter by the isolation technology of the running containers. You can add
the (B) parameter to the same command to check whether all the existing
containers are running or not.
In this example, we have three containers running; two of them are Hyper-V
2.
containers and the third one is a Windows Server container (see Figure 22):
%PDLFSQTbbGJMUFSJTPMBUJPOIZQFSW%PDLFSQTbbGJMUFS
JTPMBUJPOQSPDFTT
(KIWTG(KNVGTTWPPKPI*[RGT8CPF9KPFQYU5GTXGTEQPVCKPGTU
The (process) isolation is the default for Windows Server containers, and the (hyperv)
isolation is for Hyper-V containers.
The default isolation on Windows server operating systems is (process). Please note that the
default and only supported isolation on a Windows 10 client operating system is (hyperv).
An attempt to start a container on a client operating system with (JTPMBUJPOQSPDFTT)
will fail.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 275 ]
To convert a Windows Server container to a Hyper-V container, you need first to stop the
container, then capture the current state that is creating a new image from the container's
changes, and finally start the container with the isolation technology as hyperv (see Figure
23).
In this example, the container ID that we will convert is GDBBD:
%PDLFSTUPQGDBBD%PDLFSDPNNJUbbBVUIPS$IBSCFM/FNOPN
GDBBDOBOPIWDUO$/%PDLFSJNBHFT%PDLFSSVObOBNF
DPOWFSU@XTDUO@IWDUOEUQJTPMBUJPOIZQFSWOBOPIWDUO$/
(KIWTG%QPXGTVKPIC9KPFQYU5GTXGTEQPVCKPGTVQC*[RGT8EQPVCKPGT
Summary
In this chapter, we discussed Windows containers and how they can change the way we
deploy applications. We also talked about container benefits and how they can integrate
across Dev and Ops teams to accelerate application delivery.
Finally, we showed you how to deploy and run a Windows Server container and a Hyper-V
container on top of Nano Server using Nano base OS and Server Core images running IIS.
It's worth noting that not all web applications will run on Nano Server. IIS version 10
running on Nano Server targets applications developed and based on ASP.NET Core, so the
full .NET Framework will not run. Applications written in Java and PHP will run with IIS
on Nano.

Running Windows Server Containers and Hyper-V Containers on Nano Server
[ 276 ]
Microsoft is working on reducing the size of the Nano base OS image footprint on disk by
50% and even more by the time you read this. This has two benefits: firstly, it will speed up
the start-up time of containers, and secondly, it will minimize the bandwidth needed when
you pull the image from Docker Hub. Please check $IBQUFS, Running Other Workloads on
the Nano Server, for more information about the future of Nano Server.
Microsoft is also working on bringing a new type of Linux container that can run on
Windows Server 2016. The new type of Linux containers will use Hyper-V containers
technology, because for now, Linux containers can run on Linux operating systems and
Windows containers can only run on Windows host operating systems. Thus, by using
Hyper-V containers isolation technology, we can run Linux containers alongside with
Windows containers on the same container host.
Continue now to $IBQUFS, Troubleshooting Nano Server, to learn more about how to
troubleshoot a Nano Server installation running on a physical and virtual machine.

9
Troubleshooting Nano Server
In $IBQUFS, Running Windows Server Containers and Hyper-V Containers on Nano Server, we
talked about how to run Nano containers and Hyper-V containers on top of a Nano Server
container host.
One of the most frequent questions that we hear a lot is, how do we troubleshoot a headless
server without logging into it? There is no support for a remote desktop to administer and
troubleshoot the system. Whether we like it or not, sometimes things go wrong and we
need to troubleshoot. We already saw in $IBQUFS, Managing Nano Server with Windows
PowerShell and Windows PowerShell DSC, how to do things remotely. We also discussed that,
as long as you can connect to the server through the various methods, you can do your
troubleshooting with PowerShell or with the remote management consoles. However,
sometimes even that isn't possible and you find yourself in a situation where the server
does not boot correctly or is completely stuck. Here you need to troubleshoot and resolve
the problem.

Troubleshooting Nano Server
[ 278 ]
In this chapter, we will show you how to effectively troubleshoot a Nano Server installation
with:
Nano recovery console
Emergency management services
Kernel debugging
Setup and boot event collection
Enabling access to Nano Server event logs
Nano recovery console
You read in earlier chapters about all the benefits of Nano Server, such as performance, less
disk footprint, less patches, security, and so on. But without the GUI, it's not easy to
troubleshoot a Nano Server.
This is why in Windows Server 2016, the Nano Server deployment option of Windows
Server comes with full Nano Server recovery console support. The purpose of the recovery
console is to provide direct local access to a Nano Server operating system in order to re-
establish remote network connectivity. The Nano recovery console does not provide you,
command-line access nor PowerShell access locally. However, it does provide you with the
ability to fix whatever might be causing remote management not to work. In this case, you
can use the recovery console to fix your issues and get remote connectivity again. With the
recovery console, you can configure networking, and Firewall rules, and reset the Windows
remote management (WinRM) service, which is required for PowerShell remoting.
The recovery console is the default interactive console on every Nano Server installation.
Just log in with local access using the administrator and password you supplied while
creating the Nano Server image and the menu will be loaded.

Troubleshooting Nano Server
[ 279 ]
When you log on to Nano Server interactively either in a virtual or physical machine, the
recovery console looks as shown in Figure 1:
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGNQIQP9KPFQY

Troubleshooting Nano Server
[ 280 ]
After you logon, you will see a screen that displays server information as shown in Figure 2:
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGJQOGRCIG
You will be able to see the domain (or workgroup), version of the OS, the local date and
time, Networking, inbound Firewall rules, outbound Firewall rules, WinRM, and the VM
host (if Nano Server is running a Hyper-V host). More importantly you can use the
following options:
Select  /FUXPSLJOH (by using the Tab key), scroll down with the arrow keys to
select *OCPVOE'JSFXBMM3VMFT, 0VUCPVOE'JSFXBMM3VMFT or 8JO3. and
press Enter.

Troubleshooting Nano Server
[ 281 ]
The Nano Server team has added the following capabilities that you can manage through
the Nano Server recovery console:
View computer name
View domain/workgroup
Logon/log out
Shutdown/restart
Enable/disable NIC
View IPv4/IPv6 address
Set IPv4/IPv6 address
View gateway
Set gateway IP address
View routing table
View primary/secondary DNS
View MAC address
View network driver name
View network driver date
View network driver version
View network driver provider
View network driver installation date
Set Firewall rules (enable/disable)
Reset WinRM service
Setting network configurations using the Nano
Server recovery console
In this section, you will see how to set basic networking configurations in Nano Server
without PowerShell or advanced command-lines.

Troubleshooting Nano Server
[ 282 ]
To manage Nano Server installation using the recovery console, carry out the following
steps:
Select >Networking by pressing the Tab key, and on the Network settings page,
1.
list all your network cards; you can select which NIC you want to view or
configure (see Figure 3):
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGPGVYQTMCFCRVGTUGVVKPIU
Here you will see that:
By pressing F4, you can toggle the state (disable/enable) for a specific NIC
By pressing F10, you can see the routing table, and by pressing F10 again, you can
add a static route, or press Delete to delete the route
By pressing F11, you can toggle the DHCP state for IPv4, and by pressing Enter,
you can set/update the NIC *1W address for a particular NIC

Troubleshooting Nano Server
[ 283 ]
By pressing F12, you can toggle the DHCP State for IPv6, and by pressing Enter,
you can set/update the NIC *1W address for a particular NIC
You can go back to the main recovery console page by pressing the Esc key
Select >Inbound Firewall Rules on the main recovery console page, and on the
2.
Firewall Rules page, you can view all the inbound rules (see Figure 4):
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGKPDQWPF(KTGYCNNTWNGU
By pressing Enter on any inbound rule, you can view all the details for a
particular Firewall rule
By pressing F4, you can toggle the state (disable/enable) for a particular Firewall
rule
You can go back to the Inbound Firewall Rules page by pressing Esc key

Troubleshooting Nano Server
[ 284 ]
Select >Outbound Firewall Rules on the main recovery console page, and on the
3.
Firewall Rules page, you can view all the outbound rules (see Figure 5):
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGQWVDQWPF(KTGYCNNTWNGU
By pressing Enter on any outbound rule, you can view all of its details for a
particular Firewall rule.
By pressing F4, you can toggle the state (disable/enable)
You can go back to the outbound Firewall rules page by pressing the Esc key
It is not possible to create a Firewall rule through the Nano Server
recovery console. The entire idea of the console is to fix connectivity issues
(inbound/outbound) if something went wrong. The moment you have
restored connectivity; you should use remote management tools such as
PowerShell remoting to create your desired firewall rules or do other
tasks.

Troubleshooting Nano Server
[ 285 ]
Select  8JO3. on the main recovery console. The only option here is to press
4.
Enter to reset the WinRM service (see Figure 6). If the WinRM service is not
running, it will start, and the service startup type will be set to automatic:
(KIWTG0CPQ5GTXGTTGEQXGT[EQPUQNGTGUGV9KP4/
You can go back to the main recovery console page by pressing the Esc key, if you
5.
want to restart the Nano Server, you can press (Ctrl+F6) or shutdown (Ctrl+F12) if
needed.
The Nano Server recovery console is completely different from 4DPOGJH in Server Core;
there is no command-line shell nor server configuration running in the background.

Troubleshooting Nano Server
[ 286 ]
The recovery console is divided into two parts: the frontend and backend:
The frontend uses the usual Windows console API. The console used isn't really
the full Windows console due to current renderer limitations in the Nano Server
environment (no background colors, and so on).
The backend almost exclusively uses WMI to manage the local Nano machine,
with a few data points pulled from the registry where they weren't available from
the WMI interface.
Emergency management services
Emergency Management Services (EMS) is a feature that provides remote management
and system recovery options when other server administrative options are not available. It
is also required for headless systems in which there is no GUI available, as in the case of
Nano Server.
EMS works through the Special Administration Console (SAC) feature of Windows
Server. The SAC channel provides a number of administrative features such as enabling the
Windows command prompt (DNEFYF) channel for Windows CLI access, listing processes
currently running on the system, obtaining IP address information, retrieving server
hardware information, and rebooting the server, to name just a few. Another important
feature of the SAC channel is the ability to monitor the boot and install progress of the
server. For more information on EMS and SAC see the TechNet article at:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTMJCSBSZDD
WXTBTQY.
PuTTY is an SSH and telnet client and it is one of the tools that can be used to access EMS
using a serial port. The good news is, network software and server vendors such as HPE,
Dell EMC, or Cisco sometimes use EMS over TCP/IP to redirect the serial port to the
network card by virtualizing the serial port. Thus, if you have a baseboard management
port in your server such as iLO or iDRAC, you can actually access a Nano Server machine
over EMS in this way. Please refer to the section entitled Windows EMS in a Physical Machine
in this chapter to learn more about the Virtual Serial Port (VSP) using HPE ProLiant
Server.

Troubleshooting Nano Server
[ 287 ]
Enabling EMS
In most installations, EMS is enabled by default, but in Nano Server this must be enabled
when creating the image so you can use it when needed.
First you need to create a Nano Server image. See $IBQUFS, Deploying Nano Server in a
Virtual Machine and on Physical Hardware, for more details.
There are a couple of ways to enable EMS on Nano Server. We can use Windows
PowerShell or DISM combined with Bcdedit.
Enabling EMS using PowerShell
To enable EMS using PowerShell, we need to use the /FX/BOP4FSWFS*NBHF command
when creating the image or after the image is created by using the &EJU
/BOP4FSWFS*NBHF command included in the Nano Server PowerShell module.
The following is an example of both methods:
/FX/BOP4FSWFS*NBHF
.FEJB1BUINFEJBQBUI 
#BTF1BUI=#BTFGPMEFS
5BSHFU1BUI=/BOP4FSWFS&.4WIE
&OBCMF&.4
&.41PSU
&.4#BVE3BUF
&EJU/BOP4FSWFS*NBHF
#BTF1BUI=#BTFGPMEFS
5BSHFU1BUI=/BOP4FSWFS&.4WIE
&OBCMF&.4
&.41PSU
&.4#BVE3BUF
In the previous example, we enabled EMS over serial port COM 3 with a baud rate of 
bps. We choose the speed baud rate , because it's the default speed used by any
terminal client such as PuTTY, or HyperTerminal. If you don't include those parameters, the
default port for EMS is COM 1 and the speed is 115200 bps.

Troubleshooting Nano Server
[ 288 ]
Enabling EMS using DISM
You can also use the DISM command-line tool to enable EMS in the image by running the 
following commands:
%JTN.PVOU*NBHF*NBHF'JMF=/BOP4FSWFSXJN*OEFY
.PVOU%JS=NPVOUEJS
#DEFEJUTUPSF=NPVOUEJS=CPPU=CDEFNT\EFGBVMU^PO
#DEFEJUTUPSF=NPVOUEJS=CPPU=CDEFNTTFUUJOHT&.41035
&.4#"6%3"5&
%JTN=EJTN6ONPVOU*NBHF.PVOU%JS=NPVOUEJS$PNNJU
In the previous example, we mounted a Nano Server image toward a directory called
NPVOUEJS using index , because /BOP4FSWFSXJN holds two Windows images:
*OEFY: Windows Server 2016 4&37&345"/%"3%/"/0
*OEFY: Windows Server 2016 4&37&3%"5"$&/5&3/"/0
Then you can use the #DEFEJU tool, the boot configuration data editor, toward the mounted
directory and then enable EMS. You can configure further EMS settings over serial QPSU
with a baud speed rate of  bps. Finally, you should commit the changes by using DISM
followed by the $PNNJU switch.
Windows EMS in a virtual machine
To use Windows EMS in a virtual machine, you need to use a generation 1 VM, because we
need on use the emulated virtual COM Port. In generation 2 virtual machines, there are no
COM ports by default. However, we can change this in PowerShell which needs further
configuration; we will get into that in a bit.
Assuming you are using a generation 1 VM for Nano Server, the virtual COM port will
communicate with the Nano Server VM through a named pipe.
A named pipe is an option that connects the virtual serial port to a Windows named pipe on
the host operating system or another computer on the network.
A named pipes is a portion of memory that can be used by one process to pass information
to another process, so that the output for one is the input for another. The second process
can be local or remote.

Troubleshooting Nano Server
[ 289 ]
Additional information about named pipe is available at: IUUQTNTEONJDSPTPGUDPNFO
VTMJCSBSZBB74BTQY.
First, we need to create a named pipe under the VM settings as shown in Figure 7:
(KIWTG'PCDNKPI8KTVWCN%1/RQTV0CPQ5GTXGT)GP8/UGVVKPIU

Troubleshooting Nano Server
[ 290 ]
You do not need to have network connectivity to the VM to use EMS. You
need to make sure to leave the &.41PSU to the default port , because
generation 1 or generation 2 virtual machines have only two virtual COM
ports, COM 1 and COM 2.
In the previous example, we called the named pipe /BOP&.4, you can name it whatever you
want, then you can connect to that Named pipe ===QJQF=/BOP&.4 using a terminal
emulation program such as PuTTY for example; we will get into that in a bit.
You can also create a named pipe using PowerShell by running the following command:
)ZQFS74FSWFS)7)045
/BOP4FSWFS7./"/07.
7.(FU7.$PNQVUFS/BNF)ZQFS74FSWFS/BNF/BOP4FSWFS7.
7.$PN1PSU
7.]4FU7.$PN1PSU1BUI	===QJQF=/BOP&.4	/VNCFS1BTTUISV
If you want to use Windows EMS with generation 2 VMs, please carry out the following
steps:
The VM settings for a typical generation 2 virtual machine do not show a COM port (see
Figure 8):

Troubleshooting Nano Server
[ 291 ]
(KIWTG0CPQ5GTXGT)GP8/UGVVKPIU
That is simply because the VM Settings in Hyper-V Manager will never show COM ports
regardless of whether they are present or not in a generation 2 VM.
Let's run the following command in Windows PowerShell:
(FU7.$PN1PSU7./BNF7./BNF 

Troubleshooting Nano Server
[ 292 ]
In PowerShell, we can see two COM ports for a generation 2 VM (see Figure 9):
(KIWTG8KTVWCN%1/RQTV0CPQ5GTXGT)GP8/UGVVKPIU
If you want to use kernel debugging with a Gen 2 VM there is a trade-off that you want to
pay attention to. Secure boot is enabled by default for all Gen 2 virtual machines. However,
secure boot and kernel debugging are incompatible together. Hence, if you need to use
kernel debugging with Windows EMS, you need to disable secure boot in the firmware
settings while the VM is off.
In this example, we will disable secure boot and set a pipe path for the COM 1 port by
running the following commands (see Figure 10):
4UPQ7.7./BNF/"/0437)7
4FU7.'JSNXBSF7./BNF/"/0437)7&OBCMF4FDVSF#PPU0GG
4FU7.$PN1PSU7./BNF/"/0437)71BUI	===QJQF=/BOP&.4	/VNCFS
(FU7.$PN1PSU7./BNF/"/0437)74UBSU7.7./BNF/"/0437)71BTTUISV
(KIWTG'PCDNKPI8KTVWCN%1/2QTV0CPQ5GTXGT)GP8/

Troubleshooting Nano Server
[ 293 ]
Troubleshooting Nano Server VM using EMS
We assume you downloaded PuTTY (IUUQTXXXDIJBSLHSFFOFOEPSHVL_THUBUIBN
QVUUZMBUFTUIUNM). Launch it and access Nano VM using the named pipe that we
created earlier, as shown in Figure 11:
(KIWTG#EEGUUKPI0CPQ5GTXGT8/WUKPI'/5

Troubleshooting Nano Server
[ 294 ]
Type the named pipe in the Serial line field and set the speed accordingly, then click Open
and press Enter. Recall that if you enabled EMS without setting the speed, the default is
.
As shown in Figure 12, we are in an emergency console session:
(KIWTG.QIKPVQ0CPQ5GTXGT8/WUKPI'/5

Troubleshooting Nano Server
[ 295 ]
You can type a question mark  or IFMQ to get all the commands available as shown in
Figure 13:
(KIWTG'OGTIGPE[OCPCIGOGPVUGTXKEGEQPUQNGJGNREQOOCPFU
To create a command channel, type DNE. A new channel will be created.

Troubleshooting Nano Server
[ 296 ]
You can enter that channel as shown in Figure 14 by typing: DITJ where  is the
channel number associated with $NE. In this example, the channel number is :
(KIWTG'OGTIGPE[OCPCIGOGPV5GTXKEGEJCPPGNETGCVKQP

Troubleshooting Nano Server
[ 297 ]
Press Enter twice to authenticate using the same credentials that you used when creating a
Nano Server image (see Figure 15):
(KIWTG'OGTIGPE[OCPCIGOGPVUGTXKEGEJCPPGNCWVJGPVKECVKQP

Troubleshooting Nano Server
[ 298 ]
After authenticating, you are in the Windows command prompt (DNE) where you can start
doing your normal troubleshooting as shown in Figure 16:
(KIWTG'OGTIGPE[OCPCIGOGPVUGTXKEGEOFYKPFQY
The greatest feature about SAC and cmd channel is PowerShell support; you can use
Windows PowerShell (CoreCLR) through the EMS console as well.

Troubleshooting Nano Server
[ 299 ]
In the command prompt window, type 1PXFS4IFMM; Windows PowerShell will launch as
shown in Figure 17:
(KIWTG7UKPI2QYGT5JGNNQXGTC9KPFQYU'/55GUUKQPYKVJ0CPQ5GTXGT
To get all the available PowerShell cmdlets, run the following command:
(FU$PNNBOE]NFBTVSF
We have  PowerShell cmdlets available (see Figure 18):
(KIWTG2QYGT5JGNNEOFNGVUQXGTC9KPFQYU'/5UGUUKQPYKVJ0CPQ5GTXGT
In the following example, we will change the IP address of Nano Server through a
Windows EMS session.
While the EMS session is still open, type the following commands to update the IP address
of Nano Server (see Figure 19):
(FU/FU*1"EESFTT
*OUFSGBDF"MJBT&UIFSOFU]4FMFDU*OUFSGBDF"MJBT*1"EESFTT
3FNPWF/FU*1"EESFTT*OUFSGBDF"MJBT&UIFSOFU$POGJSN'BMTF

Troubleshooting Nano Server
[ 300 ]
/FX/FU*1"EESFTT*OUFSGBDF"MJBT&UIFSOFU
*1"EESFTT1SFGJY-FOHUI		5ZQF6OJDBTU]0VU/VMM
(FU/FU*1"EESFTT
*OUFSGBDF"MJBT&UIFSOFU]4FMFDU*OUFSGBDF"MJBT*1"EESFTT
(KIWTG%JCPIKPI+2#FFTGUUQXGTC9KPFQYU'/5UGUUKQPQP0CPQ5GTXGT
Windows EMS on a physical machine
In this section, we will demonstrate the experience of using Windows EMS to troubleshoot
Nano Server installed on an HPE ProLiant server. Please note that this operation is possible
with other servers as well; please check with your OEM vendor.
Using Windows EMS to manage an HPE ProLiant server involves the following:
Enabling virtual serial port
Enabling the EMS port in ROM-based setup utility
Enabling Windows EMS in the bootloader of Nano Server OS
Using PuTTY or a similar terminal emulation program to establish an SSH
connection to the ProLiant iLO IP address
Using Windows EMS functionality to perform basic support administrative tasks

Troubleshooting Nano Server
[ 301 ]
Enabling a virtual serial port
HPE Integrated Lights-Out 3/4 (iLO 3 and 4) allows administrators to manage their servers
remotely using a variety of connection methods including a Web browser, telnet, SSH, and
PowerShell. This section focuses on enabling a VSP for use with SSH.
To enable a VSP on the server:
Connect to the iLO IRC using a web browser (IUUQ*1BEESFTTPGUIF
1.
J-0 ).
Logon to the iLO using the appropriate iLO credentials.
2.
Power on the server.
3.
Press the F9 function key when displayed to enter system utilities.
4.
For HPE ProLiant Gen8 (BIOS) systems:
Locate the 7JSUVBM4FSJBM1PSU option using the following path, 4ZTUFN
1.
0QUJPOT 4FSJBM1PSU0QUJPOT 7JSUVBM4FSJBM1PSU.
Hit the Enter key to select from a list of options. For the purpose of this example,
2.
we'll select $0. as shown in Figure 20:
(KIWTG'PCDNKPIXKTVWCNUGTKCNRQTVQP*2')GPU[UVGOU

Troubleshooting Nano Server
[ 302 ]
A reboot is required for the change to take effect. Hit Esc three times to get back
3.
to Setup Utility and then F10 to save and reboot the system.
If you have HPE Gen9 systems, please carry out the following steps, otherwise skip to the
section titled Enabling the EMS Port in ROM-Based Setup Utility (RBSU).
For HPE ProLiant Gen9 systems:
Locate the 7JSUVBM4FSJBM1PSU option using the following path, 4ZTUFN
1.
$POGJHVSBUJPO -> #*041MBUGPSN$POGJHVSBUJPO
3#46 -> 4ZTUFN
%FGBVMU0QUJPOT -> 4FSJBM1PSU0QUJPOT -> 7JSUVBM4FSJBM1PSU.
Hit the Enter key to select from a list of options. For the purposes of this example,
2.
we'll select $0..
Hit F10 to confirm and save the change.
3.
A reboot is required for the change to take effect. Hit the Esc key until you are
4.
back to the System Utilities screen.
Scroll down and select 3FCPPUUIF4ZTUFN.
5.
The ProLiant VSP is now enabled. The next step is to enable the EMS console on the server.
&OBCMJOHUIF&.41PSUJO30.#BTFE4FUVQ6UJMJUZ
3#46
The HPE ProLiant EMS Console option configures the ACPI serial port to redirect output to
the Windows EMS console.
To enable the EMS console on the server:
Connect to the iLO IRC using a web browser (IUUQ*1BEESFTTPGUIF
1.
J-0 ).
Logon to the iLO using the appropriate iLO credentials.
2.
Power on the server.
3.
Press the F9 function key when displayed to enter System Utilities.
4.
For HPE ProLiant Gen8 (BIOS) systems:
Locate the Virtual Serial Port option using the following path, #*044FSJBM
1.
$POTPMFBOE&.4 &.4$POTPMF.
Hit the Enter key to select from a list of options. Note: Be sure to select the COM
2.
port that matches the VSP COM port configured previously. For the purpose of
this example, we'll select $0. as shown in Figure 21:

Troubleshooting Nano Server
[ 303 ]
(KIWTG'PCDNKPI'/5%QPUQNGQP*2')GPU[UVGOU
A reboot is required for the change to take effect. Hit the Esc key twice and F10 to
3.
save and reboot the system.
If you have Gen9 systems, please carry out the following steps, otherwise skip to the section
entitled Enabling Windows EMS in the bootloader of the Nano Server OS.
For HPE ProLiant Gen9 systems:
Locate the Virtual Serial Port option using the following path, 4ZTUFN
1.
$POGJHVSBUJPO -> #*041MBUGPSN$POGJHVSBUJPO
3#46) -> #*044FSJBM
$POTPMFBOE&.4 -> &.4$POTPMF.
Hit the Enter key to select from a list of options. It is important to be sure to select
2.
the COM port that matches the VSP COM port configured previously. For the
purpose of this example, we'll select COM 2.
Hit F10 to confirm and save the change.
3.
A reboot is required for the change to take effect. Hit the ESC key until you are
4.
back to the System Utilities screen. Scroll down and select Reboot the System.

Troubleshooting Nano Server
[ 304 ]
Enabling Windows EMS in the bootloader of the Nano
Server OS
This section describes how to enable Windows EMS in the bootloader of the Nano Server
operating system using the #DEFEJU tool.
We need to enable and set the EMS port and baud rate in the boot database, but before
doing that, let's look at the current boot database by running bcdedit at the command
prompt as shown in Figure 22:
(KIWTG$EFGFKVDQQVEQPaIWTCVKQPFCVC
As you can see, the VHD image that we have deployed on the physical server has EMS
enabled but the port and the baud rate are not set.
Recall, from the previous section, that we enabled EMS and the Virtual Serial Port (VSP) in
HPE RBSU and we selected COM 2.

Troubleshooting Nano Server
[ 305 ]
We need to set the EMS to port 2 as well in the default bootloader and we will set the baud
rate to  bps.
Type the following commands at the command prompt:
CDEFEJUFNT\EFGBVMU^0/
CDEFEJUFNTTFUUJOHT&.41035&.4#"6%3"5&
Using PuTTY to establish an SSH connection to the iLO
IP address
This section describes how to establish an SSH connection to the Proliant iLO IP address,
and logging in using Windows EMS and open a SAC channel. The following prerequisites
must be met to continue:
The OS boot loader entry associated with Nano Server is configured for EMS as
described in the previous section
The ProLiant server VSP is enabled as described in the previous section
The ProLiant server EMS console is enabled as described in the previous section
A terminal emulator program such as PuTTY is installed on your management
station
Here are the steps for connecting using VSP:
Open a PuTTY session using QVUUZFYF.
1.
In the Host Name box in the Session category, enter the IP address or FQDN of
2.
the iLO.
Choose SSH as the connection type and ensure the Port is set to .
3.

Troubleshooting Nano Server
[ 306 ]
Optional: Add a friendly name in the Saved Sessions box and click the Save
4.
button to save it for future use (see Figure 23):
(KIWTG7UKPI2W66;VQQRGP55*UGUUKQPVQ*2'K.1852
Click the Open button to establish a connection to the iLO.
5.
If this is the first time a connection has been made to the ILO VSP from this
6.
computer, you may receive a PuTTY Security Alert pop-up. This is normal when
using a SSH connection. Go ahead and click the :FT button to continue.
At the login prompt, enter an iLO user name and password.
7.

Troubleshooting Nano Server
[ 307 ]
After a successful login, you should see the following prompt,  IQJ-0 .
8.
Type 741 and hit Return to open a VSP session.
9.
If the connection is successful, you should now have an active VSP session (see
10.
Figure 24):
(KIWTG*2'K.1852NQIQPUETGGP
If the connection failed, double-check the VSP configuration following the steps
11.
provided earlier.
Once you have established a VSP session, your cursor may appear to be frozen
12.
and you are unable to interact with the server. This might be normal depending
on the state of the server. With the connection still active, reboot the server.

Troubleshooting Nano Server
[ 308 ]
Once the server is rebooted, you should start seeing output to the VSP interface,
13.
specifically system POST information. If you can see the system POST
information displayed to the VSP session, as shown in Figure 25, the VSP is
configured correctly:
(KIWTG2156KPHQTOCVKQPFKURNC[GFVQVJG852UGUUKQPQH*2'2TQ.KCPV5GTXGT
To disconnect a session, follow the instructions on the screen in the VSP
session as shown in Figure 24. Type the key combination, Shift+Esc+9 (The
number 9 on the main keyboard, not on the keypad or F9) to exit the
session and go back to the  IQJ-0  prompt. Type &YJU to completely
exit the SSH connection.
If the VSP was working up until Nano Server boots and then ceases, it means that EMS is
not enabled in the BCD store of the operating system. If this is the case, then one or more
configuration steps failed or were skipped. You will need to retrace the steps to figure out
exactly where things went wrong.

Troubleshooting Nano Server
[ 309 ]
Using Windows EMS functionality to perform basic
support administrative tasks
This section describes how to use the Windows EMS and SAC channel to perform basic
administration for Nano Server.
If VSP and Windows EMS are configured correctly, you should see output in the VSP
session (see Figure 26):
(KIWTG852UGUUKQPHQT*2'2TQ.KCPV5GTXGTEQPPGEVGFVQ9KPFQYU'/5

Troubleshooting Nano Server
[ 310 ]
Type IFMQ in the window to obtain a list of useful commands. Most noteworthy are:
*: to obtain IP address information
JE: to list OS details
U: to obtain a list of running processes
SFTUBSU: to reboot the OS
TIVUEPXO: to initiate a shutdown of the OS
DNE: to initiate a text-based logon to the OS
You can log on to the OS through the VSP channel using the credentials specified while
creating a Nano Server image file. To do so, follow these steps:
Type DNE followed by the Enter key at the SAC prompt. You should see a
1.
message indicating a new channel has been created and the channel name. Most
likely, the channel name is $NE.
Type DI followed by Enter to see a list of available channels.
2.
Find the channel number associated with the CMD channel created previously
3.
and type DITJ followed by the Enter key twice, where  is the channel
number associated with $NE.
You should be prompted with a login screen. Enter the username, password, and
4.
domain (if the server is domain-joined) of an administrative account on Nano
Server.
You should now see a $=8JOEPXT=TZTUFN prompt.
5.
Through the local Windows VSP session, several commands are available for interacting
with the OS. For example:
JQDPOGJHFYF : To display IP configuration
1PXFSTIFMMFYF : To switch to a PowerShell session instead of the command-
line

Troubleshooting Nano Server
[ 311 ]
Type the following command while in a PowerShell session, to obtain OS information as
shown in Figure 27:
(FU$PNQVUFS*OGPXYPTTM
(KIWTG1DVCKP15KPHQTOCVKQPWUKPI2QYGT5JGNNQXGT9KPFQYU'/5CPF852UGUUKQP
The VSP and EMS are great for monitoring the OS installation, obtaining the IP address,
troubleshooting, and performing other support administrative tasks.
Kernel debugging
Kernel debugging is also a possibility with Nano Server. A Nano Server image supports
kernel debugging through different methods. However, there is an extra step that you want
to be aware of when using kernel debugging with Nano Server virtual machines. You need
to include the $PNQVUF package and the corresponding PowerShell modules in the Nano
image.
There are four methods to do kernel debugging with Nano Server. You can use either a
serial port, a TCP/IP network, Firewire (IEEE1349), or USB.
To do so, we need to use the /FX/BOP4FSWFS*NBHF command when creating the image or
after the image is created by using the &EJU/BOP4FSWFS*NBHF command included in the
Nano Server PowerShell module.
Please see $IBQUFS, Deploying Nano Server in a Virtual Machine and on Physical Hardware,
for more details.

Troubleshooting Nano Server
[ 312 ]
The following is an example for each method:
Serial Port
/FX/BOP4FSWFS*NBHF.FEJB1BUI==1BUI5P.FEJB#BTF1BUI=#BTF1BUI
5BSHFU1BUI=1BUI5P7)%%FCVH.FUIPE4FSJBM%FCVH$0.1PSU
%FCVH#BVE3BUF
&EJU/BOP4FSWFS*NBHF#BTF1BUI=5BSHFU1BUI=/BOP4FSWFSWIEY
%FCVH.FUIPE4FSJBM%FCVH$0.1PSU%FCVH#BVE3BUF
In the previous example, we configured kernel debugging over serial port 1 with a baud
rate of  bps. We choose the speed baud rate , because it's the default speed used
by any terminal client such as PuTTY or HyperTerminal. If you did not set the debug COM
port and the baud rate, the defaults are port 2 and 115200 bps. However, if you plan on
using EMS and kernel debugging, then you need to use a different port number, because
they cannot coexist on the same port.
TCP/IP Network
/FX/BOP4FSWFS*NBHF.FEJB1BUI==1BUI5P.FEJB#BTF1BUI=#BTF1BUI
5BSHFU1BUI=1BUI5P7)%%FCVH.FUIPE/FU%FCVH3FNPUF*1
%FCVH1PSU
&EJU/BOP4FSWFS*NBHF#BTF1BUI=5BSHFU1BUI=/BOP4FSWFSWIEY
%FCVH.FUIPE/FU%FCVH3FNPUF*1%FCVH1PSU
In the previous example, we configured kernel debugging to be used by a specific computer
IP address  over port . Please note that the port you specify should be
greater than 49152. This cmdlet will generate an encryption key in a file alongside the
resulting VHD(X), which is needed for communication over the port. Alternatively, you can
specify your own key with the %FCVH,FZLFZ  parameter.
Firewire (IEEE 1394)
/FX/BOP4FSWFS*NBHF.FEJB1BUI==1BUI5P.FEJB#BTF1BUI=#BTF1BUI
5BSHFU1BUI=1BUI5P7)%%FCVH.FUIPE%FCVH$IBOOFM
&EJU/BOP4FSWFS*NBHF#BTF1BUI=5BSHFU1BUI=/BOP4FSWFSWIEY
%FCVH.FUIPE%FCVH$IBOOFM

Troubleshooting Nano Server
[ 313 ]
If you plan to use this method, be aware that the parameter %FCVH$IBOOFM is mandatory.
USB
/FX/BOP4FSWFS*NBHF.FEJB1BUI==1BUI5P.FEJB#BTF1BUI=#BTF1BUI
5BSHFU1BUI=1BUI5P7)%%FCVH.FUIPE64#%FCVH5BSHFU/BNFOBOP 
&EJU/BOP4FSWFS*NBHF#BTF1BUI=5BSHFU1BUI=/BOP4FSWFSWIE
%FCVH.FUIPE64#%FCVH5BSHFU/BNF,FSOFM%FCVHHJOH64#/BOP
The name behind the %FCVH5BSHFU/BNFOBNF  parameter is the one
you are going to use when connecting through a remote debugger.
Installing WinDbg from Windows SDK
If you just need debugging tools for Windows 10, you can download Windows SDK from
the following link:
IUUQTHPNJDSPTPGUDPNGXMJOLMJOLJE.
You do not need the Windows 10 Assessment and Deployment Kit (ADK) or Visual Studio;
you can install the debugging tools as a standalone component from Windows SDK.

Troubleshooting Nano Server
[ 314 ]
In the installation wizard, select Debugging Tools for Windows, and deselect all other
components as shown in Figure 28:
(KIWTG+PUVCNNKPI&GDWIIKPI6QQNUHQT9KPFQYUHTQO9KPFQYU5&-
Debugging Nano Server using WinDbg
After installing Windows SDK, open 8JO%CHFYF from the following location:
$=1SPHSBN'JMFT
Y=8JOEPXT,JUT==%FCVHHFST=Y=XJOECHFYF

Troubleshooting Nano Server
[ 315 ]
Press Ctrl+K to open kernel debugging and connect to the name pipe of Nano Server as
shown in Figure 29:
(KIWTG9KP&DIMGTPGNFGDWIIKPIQXGTPCOGFRKRG

Troubleshooting Nano Server
[ 316 ]
At this point you can break in using Ctrl+Break as for normal kernel debugging processes
(see Figure 30):
(KIWTG9KP&DIMGTPGNFGDWIIKPIEQPPGEVGFVQ0CPQ5GTXGT
You can also use WinDbg with the command-line for live kernel-mode debugging as
mentioned in the following article:
IUUQTNTEONJDSPTPGUDPNFOVTMJCSBSZXJOEPXTIBSEXBSFGG
WWTB
TQY.
To debug services in Nano Server, you need to first start kernel debugging on Nano Server.
Here is the link for kernel-mode debugging on Windows:
IUUQTNTEONJDSPTPGUDPNFOVTMJCSBSZXJOEPXTIBSEXBSFII
WWTB
TQY.

Troubleshooting Nano Server
[ 317 ]
There are two options to debugging a service in Nano Server:
You can use the TYFME debugger command to break when the service module is
loaded: IUUQTNTEONJDSPTPGUDPNFOVTMJCSBSZXJOEPXTIBSEXBSFGG

WWTBTQY
You can configure the service to start with a console debugger, (that is OUTEFYF,
attached in Nano Server). See this link: IUUQTTVQQPSUNJDSPTPGUDPNFOVT
LCCPPLNBSL using OUTEFYF instead of XJOECHFYF, and to control
user-mode debugger from kernel debugger, check here: IUUQTNTEONJDSPTPG
UDPNFOVTMJCSBSZXJOEPXTIBSEXBSFGG
WWTBTQY
Setup and boot event collection (SBEC)
In this section, we will dive into Setup and Boot Event Collection (SBEC) which is a new
feature introduced in Windows Server 2016. This feature is designed to help you to collect
events and troubleshoot a headless machine-like Nano Server either locally or in a remote
datacenter where you don't have access to it. SBEC allows you to remotely view the setup
and boot event off-box; in other words, before the OS even boots. This feature will stream
all events off during the boot and setup process to a collector machine in your environment
and save them into an ETL file.
You can watch the events in real time, as it's going through the setup and boot process, and
watch all the events that are coming in. Thus, you can see any failures that might occur.
That's useful, especially when it comes to troubleshooting problems that occur during the
boot process.
We want to emphasize that this service is not for Nano Server only. It's possible to use this
feature with Server Core and Server with Desktop Experience as well.

Troubleshooting Nano Server
[ 318 ]
To remotely collect ETW messages from physical or virtual machines, you should deploy a
collector computer on your network as shown in Figure 31:
(KIWTG5GVWRCPFDQQVGXGPVEQNNGEVQTFKCITCOKOCIGUQWTEG/KETQUQHV
Here are a few of the setup and boot events you can monitor with the Setup and boot event
collection service:
Loading kernel modules and drivers
Enumeration of devices and initialization of their drivers (including devices such
as CPU type)
Verification and mounting of file systems
Starting executable files
Starting and completion of system updates
The points when the system becomes available for logon, establishes connection
with a domain controller, completion of service starts, and network shares are
available

Troubleshooting Nano Server
[ 319 ]
SBEC requirements
If the target computer (Nano Server) is running in a virtual machine, the VM must be
hosted on Windows Server 2016 Hyper-V or Windows 10 as a virtualization host.
The collector computer must be running Windows Server 2016 (it can be either Server with
Desktop Experience or Server Core), and the target computer must be running either
Windows 10 or Windows Server 2016 including Nano Server.
The following combinations of a virtualized collector computer and target computer are
known to work with SBEC:
Virtualization host
Collector virtual machine Target virtual machine
Windows 8.1
YES
YES
Windows 10
YES
YES
Windows Server 2016
YES
YES
Windows Server 2012 R2 YES
NO
The SBEC service also works for physical machines.
Installing the collector computer
As mentioned earlier, the event collector service is available as an optional feature in
Windows Server 2016. You can install the SBEC service using %*4.FYF from the
command-line or using Windows PowerShell.
Here is the command to install the service either way:
EJTNPOMJOFFOBCMFGFBUVSFGFBUVSFOBNF4FUVQ"OE#PPU&WFOU$PMMFDUJPO
*OTUBMM8JOEPXT'FBUVSF/BNF4FUVQBOE#PPU&WFOU$PMMFDUJPO7FSCPTF

Troubleshooting Nano Server
[ 320 ]
You can also install the Setup and Boot Event Collection service with the Add Roles and
Features Wizard in Server Manager as shown in Figure 32:
(KIWTG+PUVCNNKPI5GVWRCPF$QQV'XGPV%QNNGEVQT5GTXKEGWUKPI5GTXGT/CPCIGT

Troubleshooting Nano Server
[ 321 ]
When the feature is installed, it creates a service called BootEventCollector (see Figure 33):
(KIWTG$QQV'XGPV%QNNGEVQTUGTXKEGFGVCKNU

Troubleshooting Nano Server
[ 322 ]
After installing the Setup and Boot Event Collector service, you can confirm if the installation
succeeded and the service status by running the following command (see Figure 34):
(FU4FSWJDF%JTQMBZ/BNFCPPU
(KIWTG5GVWRCPF$QQV'XGPV%QNNGEVQT5GTXKEG5VCVWU
The boot event collector service should be running. It runs under the Network Service
Account and creates an empty configuration file called "DUJWFYNM.
When you enable this service, you will find three XML configuration files created and
stored on the collector computer under the following location:
$=1SPHSBN%BUB=.JDSPTPGU=#PPU&WFOU$PMMFDUPS=$POGJH
Here is a brief description of each configuration file:
"DUJWFYNM: This file contains the current active configuration of the collector
service. Right after installation, this file has the same contents as &NQUZYNM.
When you set a new collector configuration you save it to this file. Please refer to
the section entitled Creating the Active.xml configuration file
&NQUZYNM: This file contains the minimum configuration elements needed with
their default values set. It does not enable any collection; it only allows the
collector service to start in an idle mode
&YBNQMFYNM: This file provides examples and explanations of the possible
configuration elements

Troubleshooting Nano Server
[ 323 ]
There are several details to keep in mind when creating the "DUJWFYNM configuration file:
The target computer, which is Nano Server. You can use its IPv4 address, a MAC
address, or a SMBIOS GUID. Keep these factors in mind when choosing the
address to use (more on that in the next section)
The IPv4 address works best with static assignment of the IP addresses. Kernel
Debug Network Adapter (KDNET) absolutely needs the DHCP, the target
computer requires DHCP enabled. You can reserve the IP and MAC address
through DHCP server for static assignment.
A MAC address or SMBIOS GUID is convenient when they are known in
advance but the IP addresses are assigned dynamically.
IPv6 addresses are not supported by the EVENT-NET protocol.
It is possible to specify multiple ways to identify the computer. For example, if
the physical hardware is about to be replaced, you can enter both the old and the
new MAC addresses, and either will be accepted.
The encryption key used for the communication with the collector computer.
The name of the target computer (Nano Server). You can use the IP address, host
name, or any other name as the computer name.
The name of the ETL file to use including its size.
Creating the Active.xml configuration file
On the collector computer, open an elevated Windows PowerShell console and
1.
change the directory to
$=1SPHSBN%BUB=.JDSPTPGU=#PPU&WFOU$PMMFDUPS=$POGJH
Type OPUFQBE=/FX"DUJWF$POGJHYNM and then press Enter. An empty file
2.
will open in Notepad.
Copy the following example configuration into Notepad and save the file (see
3.
Figure 35):

Troubleshooting Nano Server
[ 324 ]
The /FX"DUJWF$POGJHYNM file used in this example accompanies this
book, you can download it.
(KIWTG%TGCVKPIVJG0GY#EVKXG%QPaIZONWUKPI0QVGRCF
As noted in the previous configuration file, you need to specify the collector port
4.
value, the recommended range is (50000-50039); next you need to specify the size
of each ETL file (that is 10 MB) including the maximum number of ETL files to be
created (that is 10 MB). Then you need to enter the details for each target
computer separately under the UBSHFU  element. Please adjust the IPv4
addresses, MAC, and computer values based on your environment, and finally
save the file and close Notepad.
Switch back to Windows PowerShell and apply the new configuration by
5.
running the following command:
SFTVMU
(FU$POUFOU=/FX"DUJWF$POGJHYNM]4FU4CFD"DUJWF$POGJH
SFTVMU

Troubleshooting Nano Server
[ 325 ]
The output should return the success value equal to 5SVF as shown in Figure 36:
(KIWTG#RRN[KPIVJGPGYEQPaIWTCVKQPaNG
The previous command will apply the new configuration file automatically and update the
collector service without needing a restart. You can always restart the service yourself with
one of the following commands:
Windows PowerShell:
3FTUBSU4FSWJDF#PPU&WFOU$PMMFDUPS
Command-line:
TDTUPQ#PPU&WFOU$PMMFDUPSTDTUBSU#PPU&WFOU$PMMFDUPS
You can perform a validity check on the configuration file by running the
following command (see Figure 37):
CFWUDPMFYFDPOGJH=/FX"DUJWF$POGJHYNMDIFDL0OMZ
(KIWTG8CNKFCVKPIVJGPGY:/.EQPaIWTCVKQPaNGYKVJ$QQV'XGPV%QNNGEVQT
You should not see any error or warning when validating the XML configuration file.

Troubleshooting Nano Server
[ 326 ]
Configuring the target and collector computer
The target computer, which will be the Nano Server in this example, will push the messages
to the collector machine.
You need to configure two items to collect setup and boot events:
On target computers that will send the events (that is, the Nano Server whose
1.
setup and boot you want to monitor), enable ,%/&5&7&/5/&5 transport and
enable the forwarding of events.
On the collector computer specify which computers to accept events from and
2.
where to save them.
Configuring Nano Server as a target computer
The following steps will describe how to set up Nano Server as a target computer:
First, you need to create a Nano Server image. See $IBQUFS, Deploying Nano
1.
Server in a Virtual Machine and on Physical Hardware, for more details. If you
already have Nano Server deployed in your environment, please skip to step 3.
Next, you need to add "VUP-PHHFS registry keys to enable sending diagnostic
2.
messages. To do this, you need to mount the Nano Server VHD image created in
step 1, then load the registry hive, and update the registry. In this example, the
Nano Server image is stored in the %= drive. Your path might be different; you
need to adjust the following steps accordingly:
On the collector computer, copy the
1.
$=8JOEPXT=4ZTUFN=8JOEPXT1PXFS4IFMM=W=.PEVMFT=#PPU
&WFOU$PMMFDUPS folder and paste it into the
$=8JOEPXT=4ZTUFN=8JOEPXT1PXFS4IFMM=W=.PEVMFT
directory on the computer you are using to modify the Nano Server
VHD image.
On the computer that you are using to modify the Nano Server image,
2.
start a Windows PowerShell console as Administrator and run the
following command:
*NQPSU.PEVMF#PPU&WFOU$PMMFDUPS7FSCPTF

Troubleshooting Nano Server
[ 327 ]
Enable "VUP-PHHFS by updating the Nano Server VHD registry as
3.
shown in Figure 38. To do this, run the following command:
&OBCMF4CFD"VUP-PHHFS1BUI%=/"/07.$3)045WIE
7FSCPTF
(KIWTG'PCDNKPI#WVQ.QIIGTKP0CPQ5GTXGTWUKPI9KPFQYU2QYGT5JGNN
If you already have Nano Server deployed either physically or virtually in your
3.
environment, you could use the following PowerShell command to enable SBEC
"VUP-PHHFS instead of mounting the Nano Server VHD as described in step 2:
/BOP*1
/BOP$SFE(FU$SFEFOUJBM_="ENJOJTUSBUPS
&OBCMF4CFD"VUP-PHHFS$PNQVUFS/BNF/BOP*1$SFEFOUJBM
/BOP$SFE7FSCPTF
Finally, we need to update the BCD settings in the Nano Server image to enable
4.
the Events flag and set the collector computer to ensure diagnostic events are sent
to the right collector machine. Note carefully the collector computer's IPv4
address, TCP port, and encryption key that you configured in the collector's
"DUJWF9.- file as described in the section entitled Creating the Active.xml
configuration file.
Again, if you already have Nano Server deployed in your environment,
please skip to step 5.

Troubleshooting Nano Server
[ 328 ]
On the computer that you are using to modify the Nano Server image, run
the following command in a Windows PowerShell console as Administrator
(see Figure 39):
&OBCMF4CFD#DE1BUI%=/"/07.$3)045WIE$PMMFDUPS*Q
$PMMFDUPS1PSU,FZBCDE7FSCPTF
(KIWTG7RFCVKPI$%&UGVVKPIUKP0CPQ5GTXGTWUKPI9KPFQYU2QYGT5JGNN
You need to run the previous command on each Nano Server image on which you want to
enable the Events flag and set the collector computer.
You can also use the following PowerShell command to set the BCD settings in
5.
Nano Server without mounting the VHD image:
/BOP*1
/BOP$SFE(FU$SFEFOUJBM_="ENJOJTUSBUPS
&OBCMF4CFD#DE$PNQVUFS/BNF/BOP*1$PMMFDUPS*Q
$PMMFDUPS1PSU,FZFGHI$SFEFOUJBM/BOP$SFE
7FSCPTF
You can only mount and update the BCD settings for the Nano Server
VHD image as described earlier. Recall that VHD for Nano image means
generation 1 VM (BIOS).
There is a known issue when you try to update the BCD settings for Nano Server with a
VHDX image. Recall that VHDX for Nano image means generation 2 VM (UEFI).
Alternatively, you can always use PowerShell remoting to set the BCD settings for Nano
Server either deployed in a virtual machine (Gen 1/Gen 2) or in a physical machine.
However, if you want to enable and update the BCD settings for a Nano Server Gen 2 VM,
you need to disable secure boot under Security in the VM settings first, and then use
PowerShell remoting to update the BCD settings. When the secure boot policy is enabled,
an error will occur if you attempt to modify the debugger settings. The value is protected by
the secure boot policy and cannot be modified or deleted.

Troubleshooting Nano Server
[ 329 ]
Configuring the collector computer
The last step is to update the collector computer to receive events sent by the Nano Server
computer by adding either the IPv4 address, or the MAC address of the Nano Server to the
configuration file /FX"DUJWF$POGJHYNM on the collector computer. See the section titled
Creating the Active.xml configuration file for more details.
Analyzing and reading diagnostic messages
Once the valid configuration file is saved on the collector computer and a target computer is
configured, as soon as the target computer is restarted the connection to the collector is
made and events will be collected and saved to the following path (see Figure 40):
$=1SPHSBN%BUB=.JDSPTPGU=#PPU&WFOU$PMMFDUPS=&UM
(KIWTG%QNNGEVGF'6.aNGU
Then you can use any tool that can read an ETL file to read the diagnostic messages that are
sent to the collector computer. Such tools are:
Event viewer
Message analyzer (IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQ
YJE)
Wevtutil (IUUQTUFDIOFUNJDSPTPGUDPNFOVTMJCSBSZDDBTQY)
Windows PowerShell (FU8JO&WFOU (IUUQTNTEONJDSPTPGUDPNQPXFSTIF
MMSFGFSFODFNJDSPTPGUQPXFSTIFMMEJBHOPTUJDT(FU8JO&WFOU)

Troubleshooting Nano Server
[ 330 ]
The following is an example of reading the ETL log file using the (FU8JO&WFOU cmdlet
(see Figure 41):
(FU8JO&WFOU1BUI	=/"/0$3)045@FUM	0MEFTU]8IFSF0CKFDU
\@-FWFM%JTQMBZ/BNFFR&SSPS^]4PSU0CKFDU1SPQFSUZ5JNF$SFBUFE
%FTDFOEJOH]4FMFDU0CKFDU'JSTU]'PSNBUMJTU
(KIWTG4GCFKPI'6.aNGHTQOCP'69GXGPVVTCEGNQIWUKPI)GV9KP'XGPVEOFNGV
This command gets the three newest events in the log. It uses the (FU8JO&WFOU cmdlet to
get all the events from the ETL file. It pipes the event to the 8IFSF0CKFDU cmdlet, which
filters the event &SSPS log results. Then, it pipes the events to the 4PSU0CKFDU cmdlet,
which sorts them in descending order by the value of the 5JNF$SFBUFE property. Then, it
pipes the sorted events to the 4FMFDU0CKFDU cmdlet to select the three newest events.
Finally, it uses the 'PSNBU-JTU cmdlet to format the output of the command as a list of
properties in which each property is displayed on a separate line.
Enabling access to Nano Server event logs
In the last section on troubleshooting a Nano Server installation, we will dive into how to
enable and access Nano Server event logs.

Troubleshooting Nano Server
[ 331 ]
To access the Event Logs on Nano Server that are located under the following path:
$=8JOEPXT=TZTUFN=XJOFWU=-PHT, you need to enable the following Windows
firewall rules on Nano Server:
Windows management instrumentation (DCOM-In)
Windows management instrumentation (WMI-In)
Windows management instrumentation (WMI-Out)
On your management machine, open an elevated PowerShell console, and create a new
PowerShell remoting session to the Nano Server. If you still have your PowerShell prompt
open from the previous section, you can use the existing 4FTTJPO variable:
/BOP*1
/BOP$SFE(FU$SFEFOUJBM_="ENJOJTUSBUPS
4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP*1$SFEFOUJBM/BOP$SFE
Next, run the following command to enable the three firewall rules mentioned previously:
*OWPLF$PNNBOE4FTTJPO4FTTJPO4DSJQU#MPDL\
(FU/FU'JSFXBMM3VMF/BNF8.*31$44*O5$1]&OBCMF/FU'JSFXBMM3VMF
1BTT5ISV]'PSNBU-JTU%JTQMBZ/BNF&OBCMFE
(FU/FU'JSFXBMM3VMF/BNF8.*8*/.(.5*O5$1]&OBCMF/FU'JSFXBMM3VMF
1BTT5ISV]'PSNBU-JTU%JTQMBZ/BNF&OBCMFE
(FU/FU'JSFXBMM3VMF/BNF8.*8*/.(.50VU5$1]&OBCMF/FU'JSFXBMM3VMF
1BTT5ISV]'PSNBU-JTU%JTQMBZ/BNF&OBCMFE
^

Troubleshooting Nano Server
[ 332 ]
You should get the following output back showing that all three firewall rules are now
&OBCMFE. (See Figure 42):
(KIWTG'PCDNKPI(KTGYCNNTWNGUKP0CPQ5GTXGTWUKPI9KPFQYU2QYGT5JGNNTGOQVKPI
Once you have enabled the three firewall rules, you will be able to retrieve Nano Server
event log entries by running the following PowerShell script (see Figure 43):
(KIWTG4GVTKGXKPI0CPQ5GTXGTGXGPVNQIUWUKPI9KPFQYU2QYGT5JGNNTGOQVKPI
<$NEMFU#JOEJOH
>QBSBN
<1BSBNFUFS
.BOEBUPSZ)FMQ.FTTBHF	/BOP4FSWFS/BNFPS*1"EESFTT	>
<7BMJEBUF/PU/VMM0S&NQUZ
><4USJOH>/BOP4FSWFS

Troubleshooting Nano Server
[ 333 ]
<1BSBNFUFS
.BOEBUPSZ)FMQ.FTTBHF	&OUFSUIFVTFSOBNFXJUI
"ENJOJTUSBUPS1SJWJMFHFT	><7BMJEBUF/PU/VMM0S&NQUZ
>
<4USJOH>6TFSOBNF<1BSBNFUFS
.BOEBUPSZ)FMQ.FTTBHF	-PH'JMF
"QQMJDBUJPO4ZTUFN4FDVSJUZ	><7BMJEBUF/PU/VMM0S&NQUZ
>
<7BMJEBUF4FU
	"QQMJDBUJPO		4ZTUFN		4FDVSJUZ	><4USJOH>-PH'JMF
<1BSBNFUFS
.BOEBUPSZ)FMQ.FTTBHF	-BTU/VNCFSPG%BZT	>
<7BMJEBUF/PU/VMM0S&NQUZ
><4USJOH>%BZTIFBE	TUZMF 
#0%:\GPOUGBNJMZ7FSEBOBCBDLHSPVOEDPMPSMJHIUCMVF^
5"#-&\CPSEFSXJEUIQYCPSEFSTUZMFTPMJECPSEFSDPMPS
CMBDLCPSEFSDPMMBQTF
DPMMBQTF^
5)\GPOUTJ[FFNCPSEFSXJEUIQYQBEEJOHQYCPSEFSTUZMF
TPMJECPSEFSDPMPSCMBDLCBDLHSPVOEDPMPS''$$$$^
5%\CPSEFSXJEUIQYQBEEJOHQYCPSEFSTUZMFTPMJECPSEFSDPMPS
CMBDLCBDLHSPVOEDPMPSZFMMPX^
TUZMF 	IFBEFS	DFOUFS ) /BOP4FSWFS&WFOU-PHT
3FTVMUT) DFOUFS 	1SPNQUJOHUIF%PNBJOOBNF8SJUF7FSCPTF&OUFS
UIFEPNBJOOBNF<4USJOH>%PNBJO/BNF3FBE)PTU1SPNQU&OUFSEPNBJOOBNF
,FFQFNQUZJG/BOP4FSWFSJTOPUEPNBJOKPJOFE'PSNBUUJOHUIF
$SFEFOUJBMT6TFSOBNFCBTFEPOJGUIF	%PNBJO/BNF	1BSBNFUFSXBTVTFEPS
OPU*G
%PNBJO/BNF
\
$SFET6TFSOBNF%PNBJO/BNF=6TFSOBNF^*G
%PNBJO/BNF
\
$SFET6TFSOBNF_=6TFSOBNF^1SPNQUJOHUIFVTFSOBNF
QBTTXPSE8SJUF7FSCPTF&OUFSUIF1BTTXPSEGPS
6TFSOBNF$SFET1BTTXPSE3FBE)PTU1SPNQU&OUFSUIF1BTTXPSEGPS
6TFSOBNF"T4FDVSF4USJOH$SFBUJOHB14$SFEFOUJBM0CKFDUUPMPHJOUP
UIF/BOP4FSWFS8SJUF7FSCPTF$SFBUJOH14$SFEFOUJBM0CKFDU$SFET/FX
0CKFDU5ZQF/BNF4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
"SHVNFOU-JTU
$SFET6TFSOBNF$SFET1BTTXPSE3FUSJFWJOHBOESFUVSOJOH
CBDLUIF-PH&OUSJFTGSPNUIF-PH'JMFQBTTFEJOGSPNUIF	-PH'JMF	
1BSBNFUFS8SJUF7FSCPTF3FUSJFWJOHUIF-PH&OUSJFT(FU8NJ0CKFDU
$PNQVUFS/BNF/BOP4FSWFS$MBTT8JO@/5-PH&WFOU
'JMUFS

MPHGJMF	-PH'JMF	A
"/%
5JNF8SJUUFO
 	
<4ZTUFN.BOBHFNFOU.BOBHFNFOU%BUF5JNF$POWFSUFS>5P%.5'%BUF5JNF

HF
UEBUF"EE%BZT
%BZT	A
$SFEFOUJBM$SFET]$POWFSU5P)5.-IFBEIFBECPEZIFBEFS]0VU
'JMF/BOP-PH3FQPSUIUN8SJUF7FSCPTF-PHT3FUSJFWFE$PNQMFUFE8SJUF
7FSCPTF0QFOJOHUIFMPHTSFQPSU=/BOP-PH3FQPSUIUN
In the previous example, we retrieved the entries from the last, one day in the system log.

Troubleshooting Nano Server
[ 334 ]
The following screenshot shows the output in the HTML file that is created after running
the script, the report is saved in the current directory where the script is running (see Figure
44):
(KIWTG0CPQ5GTXGTGXGPVNQIU*6/.TGRQTV
Summary
In this chapter, we discussed how to troubleshoot a Nano Server installation using the Nano
recovery console, Emergency Management Services (EMS), kernel debugging, and Setup
and Boot Event Collection (SBEC), which is a new feature introduced in Windows Server
2016.
SBEC allows you to remotely view debug errors, events from your deployment process, the
bootloader, OS, and services. It will help you to troubleshoot issues without interactive
login or physical access and it works on both physical and virtual machines. It requires a
little additional infrastructure and can be set up using PowerShell; you can access data in
real time and it can be correlated with other diagnostic data to identify problems faster.
In the last section of this chapter, we covered how to retrieve and read Nano Server
Windows event logs and display them in a nicely formatted HTML report.
Continue now to $IBQUFS, Running Other Workloads on the Nano Server, to learn more
about what other roles and features can run on Nano Server, and what Microsoft is
planning for the next release of Nano Server.

10
Running Other Workloads on
the Nano Server
In $IBQUFS, Troubleshooting Nano Server, we talked about how to troubleshoot a Nano
Server installation with Nano recovery console, emergency management services, kernel
debugging, setup, and boot event collection including how to collect Nano Server event logs
from a remote machine.
In this chapter, we will look at how to run other workloads on Nano Server and cover the
following topics:
Running DNS on Nano Server.
Running IIS on Nano Server.
Installing and managing Windows Defender on Nano Server.
Managing a local administrator's passwords on Nano Server.
Using MPIO on Nano Server.
Using Windows Update on Nano Server.
Update Out of Box (OOB) drivers for Nano Server.
The future of Nano Server.

Running Other Workloads on the Nano Server
[ 336 ]
Running DNS on Nano Server
As discussed in earlier chapters of this book, Microsoft added DNS support for Nano
Server. This support brings a convenient choice to run core infrastructure services on top of
Nano Server which increase security and minimize disk footprint. So, instead of having a 12
GB image to run only Domain Name System (DNS) on Server with Desktop Experience
and 7 GB for Server Core, you can use Nano Server with less than 1 GB of disk space and
achieve the same thing.
The following section will detail the deployment of a very basic Nano Server configuration.
For a more thorough explanation of deployment and configuration options, please check
$IBQUFS, Getting Started with Nano Server.
Follow the following steps to create a VHD(X) image for Nano Server to be used as a DNS
server so we can run Domain Name System (DNS) on top of Nano Server:
Mount Windows Server 2016 ISO media on your machine. In this example, it's
1.
mounted on the ) drive.
Start Windows PowerShell as administrator on your management machine which
2.
is a member of the same domain where you intend to deploy Nano Server, and
then run the following script to create a VHD(X) for virtual machine deployment
that includes the DNS package, .JDSPTPGU/BOP4FSWFS%/41BDLBHF. You
will be prompted for an administrator password:
SFHJPOWBSJBCMFT$PNQVUFS/BNF/"/07.%/44UBHJOHQBUIGPSOFX
/BOPJNBHF4UBHJOH1BUI$=1BUIUP8JOEPXT4FSWFS*40
GJMF.FEJB1BUI)=%PNBJO7*35-"#1BUI+PJO1BUI
1BUI4UBHJOH1BUI$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU
1SPNQU	1MFBTFTQFDJGZMPDBM"ENJOJTUSBUPSQBTTXPSE	
"T4FDVSF4USJOHFOESFHJPOSFHJPO$PQZTPVSDFGJMFTJG
OPU
5FTU1BUI
1BUI4UBHJOH1BUI\NLEJS1BUI4UBHJOH1BUI^JG
OPU
5FTU1BUI
1BUI1BUI\/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI
$IJME1BUI/BOP4FSWFS3FTPMWF$PQZ*UFN1BUI/BOP4FSWFS4PVSDF1BUI
%FTUJOBUJPO4UBHJOH1BUI3FDVSTF^FOESFHJPOSFHJPO(FOFSBUF/BOP
*NBHF*NQPSU.PEVMF/BNF
+PJO1BUI1BUI1BUI
$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXT
,#YNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXT,#
YNTV	/BOP4FSWFS*NBHF1BSBNFUFST!\$PNQVUFS/BNF$PNQVUFS/BNF
.FEJB1BUI.FEJB1BUI#BTF1BUI
+PJO1BUI1BUI1BUI
$IJME1BUI$PNQVUFS/BNF
WIEGPS#*04BOEWIEYGPS6&'*TZTUFN5BSHFU1BUI+PJO1BUI
1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIEY	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE1BDLBHF	.JDSPTPGU/BOP4FSWFS

Running Other Workloads on the Nano Server
[ 337 ]
%/41BDLBHF	%PNBJO/BNF%PNBJO3FVTF%PNBJO/PEFUSVF
&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF&OBCMF&.4USVF%FQMPZNFOU5ZQF
	(VFTU	&EJUJPO	4UBOEBSE	.BY4J[F(#*OUFSGBDF/BNF0S*OEFY
	&UIFSOFU	*QW"EESFTT		*QW4VCOFU.BTL
		*QW(BUFXBZ		*QW%OT		
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYFT8&VSPQF4UBOEBSE5JNF	
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHF1BUI^/FX
/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFSTFOESFHJPO
This script will create a VHDX image file using Windows Server 2016 ISO mounted as )=
drive. When creating the image, it uses a folder called /BOP4FSWFS found on the root $
drive. The file is placed in the same folder, called /"/07.%/4. In this example, the
computer name is set to /"/07.%/4 and includes (VFTU drivers. We will deploy a
generation 2 virtual machine, for this reason we created the image as VHDX.
We added the DNS package, this will ensure that the image has the DNS role installed so
you can run Domain Name System on Nano Server. This script will also perform an offline
domain join for the image, and if the same computer name does exist in the domain, it will
reuse it.
We also enabled remote management port so we can manage Nano Server using
PowerShell Remoting across different network subnets, we enabled Emergency
Management Services (EMS), and added the IP address statically, DNS and Gateway.
Finally, we set the time zone to W. Europe Standard Time by using the
4FUVQ$PNQMFUF$PNNBOE parameter and added the latest Windows Server updates to the
image.
Once the image is created, you need to create a virtual machine from this VHD(X), and
connect to it using the Hyper-V connect option. There are several options to deploy Nano
Server as a virtual machine, you can use Hyper-V Manager, System Center Virtual
Machine Manager, or Failover Cluster Manager. In this example, we will use the following
PowerShell script to automate this process:
WBSJBCMFTW4XJUDI/BNF&YU@W4XJUDI*OTUBMM3PPU%=7.T=/"/07.
%/47.1BUI%=7.T7./BNF/"/07.
%/4/BOP4FSWFS*NBHF$=/BOP4FSWFS=/"/07.%/4WIEYSFHJPO$SFBUF7.
EJSFDUPSZJG
OPU
5FTU1BUI1BUI*OTUBMM3PPU\
NLEJS1BUI7.1BUI/BNF7./BNF^FOESFHJPOSFHJPODPQZ/BOP*NBHFJG

OPU
5FTU1BUI1BUI
*OTUBMM3PPU=/"/07.%/4WIEY\$PQZ*UFN
1BUI/BOP4FSWFS*NBHF%FTUJOBUJPO*OTUBMM3PPU'PSDF^FOESFHJPOSFHJPO$SFBUF
7./FX7)%1BUI
*OTUBMM3PPU=/"/07.%/4@%WIEY4J[F#ZUFT(#
%ZOBNJD/FX7.7)%1BUI
*OTUBMM3PPU=/"/07.%/4WIEY(FOFSBUJPO
.FNPSZ4UBSUVQ#ZUFT(#A
/BNF7./BNF1BUI*OTUBMM3PPU4XJUDI/BNFW4XJUDI/BNF4FU7..FNPSZ

Running Other Workloads on the Nano Server
[ 338 ]
7./BNF7./BNF%ZOBNJD.FNPSZ&OBCMFEGBMTF4FU7.1SPDFTTPS7./BNF7./BNF
$PVOU4FU7.7./BNF7./BNF"VUPNBUJD4UPQ"DUJPO4IVU%PXO
"VUPNBUJD4UBSU"DUJPO4UBSU*G3VOOJOH&OBCMF7.*OUFHSBUJPO4FSWJDF7./BNF
/BNF(VFTU4FSWJDF*OUFSGBDF3FOBNF7./FUXPSL"EBQUFS7./BNF7./BNF
/FX/BNFWN/*$.(54FU7./FUXPSL"EBQUFS7./BNF7./BNF/BNFWN/*$.(5
%FWJDF/BNJOH0O"EE7.4DTJ$POUSPMMFS7./BNF7./BNF"EE7.)BSE%JTL%SJWF
7./BNF7./BNF$POUSPMMFS5ZQF4$4*$POUSPMMFS/VNCFS$POUSPMMFS-PDBUJPO
1BUI
*OTUBMM3PPU=/"/07.%/4@%WIEY4UBSU7./BNF7./BNF]0VU
/VMMFOSFHJPO
When deploying the DNS Server package to Nano Server, all PowerShell cmdlets are
available locally. But before starting to manage DNS Server, you need to enable the DNS
feature on Nano Server, because adding only the package to the image isn't enough.
To do so, you need to connect to Nano Server using PowerShell remoting and enable the
DNS feature by using the following commands (see Figure 1):
/BOP*1/BOP$SFE(FU$SFEFOUJBM_="ENJOJTUSBUPS4FTTJPO/FX
144FTTJPO$PNQVUFS/BNF/BOP*1$SFEFOUJBM/BOP$SFE
4FTTJPO]&OUFS144FTTJPO&OBCMF8JOEPXT0QUJPOBM'FBUVSF0OMJOF
'FBUVSF/BNF%/44FSWFS'VMM3PMF7FSCPTF(FU4FSWJDFEOT
(FU$PNNBOE
.PEVMF%OT4FSWFS$PVOU&YJU144FTTJPO
(KIWTG4WPPKPI&055GTXGTQP0CPQ5GTXGT
This server is now ready to run as DNS Server.

Running Other Workloads on the Nano Server
[ 339 ]
You can use PowerShell to remotely manage DNS using the %OT4FSWFS module which
contains 134 cmdlets in Windows Server 2016, and you can, of course, use the DNS Server
MMC console. You can do that by simply connecting remotely from your management 
machine with Remote Server Administration Tools (RSAT) enabled (see Figure 2):
(KIWTG%QPPGEVKPIVQ0CPQ5GTXGTWUKPI&05%QPUQNG
Running IIS on Nano Server
With the release of Windows Server 2016, Microsoft announced that IIS 10 is also available
as a role on Nano Server. With smaller memory and dramatically smaller disk footprint,
web workloads are particularly suited to running on Nano Server, especially for high
density web hosting.

Running Other Workloads on the Nano Server
[ 340 ]
Please note that not all Web Applications will run on Nano Server. IIS
version 10 running on Nano Server targets applications developed based
on ASP.NET Core, so full .NET Framework will not run. Applications
written in Java and PHP will run with IIS 10 on Nano.
Mount Windows Server 2016 ISO media on your machine. In this example, it's mounted on
the 'H' drive.There are many options, approaches, and methods to install IIS on Nano
Server. You could use the Nano Server Package provider of the package management (a.k.a
OneGet) PowerShell module and install the IIS role online, you can also use Nano Server
Image Builder (IB). In this example, we will use the following PowerShell script to create a
Nano image and add the IIS package to the image in offline mode (this is the recommended
way according to Microsoft documentation).
Start Windows PowerShell as administrator on your management machine, and
1.
then run the following script to create a VHD(X) for virtual machine deployment
that includes the IIS package .JDSPTPGU/BOP4FSWFS**41BDLBHF. You will
be prompted for an administrator password:
SFHJPOWBSJBCMFT$PNQVUFS/BNF/"/07.**44UBHJOHQBUIGPSOFX
/BOPJNBHF4UBHJOH1BUI$=1BUIUP8JOEPXT4FSWFS*40
GJMF.FEJB1BUI)=1BUI+PJO1BUI1BUI4UBHJOH1BUI
$IJME1BUI/BOP4FSWFS1BTTXPSE3FBE)PTU1SPNQU	1MFBTFTQFDJGZMPDBM
"ENJOJTUSBUPSQBTTXPSE	"T4FDVSF4USJOHFOESFHJPOSFHJPO$PQZTPVSDF
GJMFTJG
OPU
5FTU1BUI1BUI4UBHJOH1BUI\NLEJS
1BUI4UBHJOH1BUI^JG
OPU
5FTU1BUI1BUI1BUI
\/BOP4FSWFS4PVSDF1BUI+PJO1BUI1BUI.FEJB1BUI
$IJME1BUI/BOP4FSWFS3FTPMWF$PQZ*UFN1BUI/BOP4FSWFS4PVSDF1BUI
%FTUJOBUJPO4UBHJOH1BUI3FDVSTF^FOESFHJPOSFHJPO(FOFSBUF/BOP
*NBHF*NQPSU.PEVMF/BNF
+PJO1BUI1BUI1BUI
$IJME1BUI/BOP4FSWFS*NBHF(FOFSBUPS7FSCPTF4FSWJDJOH1BDLBHF1BUI!
	$=/BOP4FSWFS=6QEBUFT=4FSWJDJOHTUBDLVQEBUF=8JOEPXT
,#YNTV		$=/BOP4FSWFS=6QEBUFT=$VNVMBUJWF
6QEBUF=8JOEPXT,#
YNTV	/BOP4FSWFS*NBHF1BSBNFUFST!\$PNQVUFS/BNF$PNQVUFS/BNF
.FEJB1BUI.FEJB1BUI#BTF1BUI
+PJO1BUI1BUI1BUI
$IJME1BUI$PNQVUFS/BNF
WIEGPS#*04BOEWIEYGPS6&'*TZTUFN5BSHFU1BUI+PJO1BUI
1BUI1BUI$IJME1BUI
$PNQVUFS/BNF	WIEY	
"ENJOJTUSBUPS1BTTXPSE1BTTXPSE1BDLBHF	.JDSPTPGU/BOP4FSWFS
**41BDLBHF	&OBCMF3FNPUF.BOBHFNFOU1PSUUSVF&OBCMF&.4USVF
%FQMPZNFOU5ZQF	(VFTU	&EJUJPO	4UBOEBSE	.BY4J[F(#
4FUVQ$PNQMFUF$PNNBOE
	U[VUJMFYFT8&VSPQF4UBOEBSE5JNF	
4FSWJDJOH1BDLBHF1BUI4FSWJDJOH1BDLBHF1BUI^/FX
/BOP4FSWFS*NBHF!/BOP4FSWFS*NBHF1BSBNFUFSTFOESFHJPO

Running Other Workloads on the Nano Server
[ 341 ]
This script will create a VHDX image file using Windows Server 2016 ISO mounted as )=
drive. When creating the image, it uses a folder called /BOP4FSWFS found on the root $
drive. The file is placed in the same folder, called /"/07.**4. In this example, the
computer name is set to /"/07.**4 and includes (VFTU drivers. We will deploy a
generation 2 virtual machine, for this reason we created the image as VHDX.
We added the IIS package, this will ensure that the image has the IIS role installed so we
can host and run web services on Nano Server.
We also enabled Remote Management Port so we can manage Nano Server using
PowerShell Remoting across different network subnets and we enabled Emergency
Management Services. Finally, we set the time zone to W. Europe Standard Time by using
the 4FUVQ$PNQMFUF$PNNBOE parameter and added the latest Windows Server updates to
the image.
Once the image is created, you need to create a virtual machine from this VHD(X), please
refer to the section titled Running DNS on Nano Server and see the example on how to
automate the VM deployment using Windows PowerShell.
As soon as Nano Server with IIS is deployed, you can check if the default IIS page will
launch by typing it's IP address in your favorite browser (see Figure 3):
(KIWTG$TQYUKPI++5QP0CPQ5GTXGT

Running Other Workloads on the Nano Server
[ 342 ]
As with any IIS installation on Windows Server (Server with Desktop Experience or Server
Core), there are certain IIS sub-features enabled by default and some other features not
enabled by default. As of this writing, the following set of IIS sub-features are enabled by
default on Nano Server:
IIS Sub-Features enabled by default
Feature name
Default document
IIS-Default document
Directory browsing
IIS-Directory browsing
HTTP errors
IIS-Http errors
Static content
IIS-Static content
HTTP logging
IIS-Http logging
Static content compression
IIS-Http compression Static
Request filtering
IIS-Request filtering
IIS Administration module for Windows PowerShell --
The following set of IIS sub-features are not enabled by default on Nano Server:
IIS Features available are not enabled by
default
Feature name
HTTP redirection
IIS-Http redirect
Custom logging
IIS-Custom logging
Request monitor
IIS-Request monitor
Tracing
IIS-Http tracing
Dynamic content compression
IIS-Http compression dynamic
Basic authentication
IIS-Basic authentication
Client certificate mapping authentication
IIS-IIS certificate mapping authentication
Digest authentication
IIS-Digest authentication
IIS client certificate mapping authentication
IIS-Client certificate mapping authentication
IP and domain restrictions
IIS-IP security
URL authorization
IIS-URL authorization

Running Other Workloads on the Nano Server
[ 343 ]
Windows authentication
IIS-Windows authentication
Application initialization
IIS-ApplicationInit
CGI
IIS-CGI
ISAPI extensions
IIS-ISAPI extensions
ISAPI filters
IIS-ISAPI filter
Server-side includes
IIS-Server side includes
Web Socket protocol
IIS-Web sockets
To enable or disable any of the IIS sub-features, you can use either PowerShell or DISM to
accomplish this. Please refer to the table above to get the corresponding feature name. For
example, to install the application initialization feature on Nano Server, you need to use
PowerShell remoting, and then run the following commands.
In this example, we will show you how to do the same using PowerShell and DISM:
$POOFDUJOHUP/BOP4FSWFSVTJOH1PXFS4IFMM
SFNPUJOH/BOP*1/BOP$SFE(FU
$SFEFOUJBM_="ENJOJTUSBUPS4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP*1
$SFEFOUJBM/BOP$SFE4FTTJPO]&OUFS144FTTJPO&OBCMF**4"QQMJDBUJPO*OJU
VTJOH1PXFS4IFMM&OBCMF8JOEPXT0QUJPOBM'FBUVSF0OMJOF'FBUVSF/BNF**4
"QQMJDBUJPO*OJU"MM%JTBCMF**4"QQMJDBUJPO*OJUVTJOH1PXFS4IFMM%JTBCMF
8JOEPXT0QUJPOBM'FBUVSF0OMJOF'FBUVSF/BNF**4"QQMJDBUJPO*OJU&OBCMF**4
"QQMJDBUJPO*OJUVTJOH%*4.EJTN&OBCMF'FBUVSFPOMJOFGFBUVSFOBNF**4
"QQMJDBUJPO*OJUBMM%JTBCMF**4"QQMJDBUJPO*OJUVTJOH%*4.EJTN%JTBCMF
'FBUVSFPOMJOFGFBUVSFOBNF**4"QQMJDBUJPO*OJU&YJU144FTTJPO

Running Other Workloads on the Nano Server
[ 344 ]
As for IIS management experience, PowerShell is front and center of the Nano Server
management. This means you will be able to manage IIS on Nano using the new **4
"ENJOJTUSBUJPO module for Windows PowerShell which includes 31 cmdlets (see Figure
4):
(KIWTG++5#FOKPKUVTCVKQP2QYGT5JGNNEOFNGVU
In addition to PowerShell (IIS Administration) module, you can use the BQQDNEFYF to
manage IIS remotely on Nano Server. "QQ$NEFYF is located in the
$=8JOEPXT=4ZTUFN=JOFUTSW=EJSFDUPSZ. Because it is not a path of the Environment
Variables default PATH, you need to use the full path to the executable when executing
commands. Alternatively, you can manually add the JOFUTSW directory to the path on your
management machine so that you can access "QQ$NEFYF directly from any location.

Running Other Workloads on the Nano Server
[ 345 ]
The IIS Manager console is not available as an option to manage Nano Server remotely,
because of the missing API dependencies. However, Microsoft published an article on how
to install and add all the required components to enable a web-based management UI for
IIS administration on Nano Server.
IUUQTCMPHTJJTOFUBENJOBQJNJDSPTPGUJJTBENJOJTUSBUJPOPOOBOPTFSWFS.
Creating a website on Nano Server is very easy, you can run the following PowerShell
command to create a new site:
/FX*UFN1BUI$=JOFUQVC=XXXSPPU=/BNF/BOP8FC4JUF*UFN5ZQF%JSFDUPSZ/FX
**44JUF/BNF/BOP8FC4JUF#JOEJOH*OGPSNBUJPO/BOP8FC4JUF
1IZTJDBM1BUI$=JOFUQVC=XXXSPPU=/BOP8FC4JUF(FU**44JUF/BNF/BOP8FC4JUF
You can change the background image of the default IIS website by running the following
command (see Figure 5):
/BOP*1/BOP$SFE(FU$SFEFOUJBM_="ENJOJTUSBUPS4FTTJPO/FX
144FTTJPO$PNQVUFS/BNF/BOP*1$SFEFOUJBM/BOP$SFE$PQZ*UFN
5P4FTTJPO4FTTJPO1BUI$=/BOP4FSWFS=JJTTUBSUQOH
%FTUJOBUJPO$=JOFUQVC=XXXSPPU='PSDF
(KIWTG%TGCVKPICYGDUKVGQP0CPQ5GTXGT

Running Other Workloads on the Nano Server
[ 346 ]
Installing and managing Windows Defender
on Nano Server
Nano Server 2016 does not come with an Antivirus client by default in contrast to Server
with Desktop Experience and Server Core which both come with Windows Defender
installed.
Nano Server also uses Windows Defender, however, it's a more lightweight version
compared to other versions of Windows.
As we have seen in this book, all the roles and features for Nano Server come as additional
packages that can be added on demand.
There are many different options that you can use to install Windows Defender on Nano
Server. You could use the /FX/BOP4FSWFS*NBHF cmdlet to create a Nano Server image
and add the Defender package as part of the image in offline mode. You could also use
Nano Server Image Builder. In this example, we will use Nano Server Package provider of
the Package Management (a.k.a OneGet) and install the Defender feature in online mode.
Once the Nano image is created, you need to create a virtual machine from this VHD(X),
please refer to the section titled Running DNS on Nano Server and see the example on how to
automate the VM deployment using Windows PowerShell. This example also assumes that
Nano Server is reachable over the network and has internet access.
First, you need to connect to Nano Server using PowerShell Remoting and install the
Windows Defender package. The following is an example on how to use PowerShell to
install the Windows Defender package using Nano Server Package provider:
/BOP*1/BOP$SFE(FU$SFEFOUJBM_="ENJOJTUSBUPS4FTTJPO/FX
144FTTJPO$PNQVUFS/BNF/BOP*1$SFEFOUJBM/BOP$SFE4FTTJPO]&OUFS
144FTTJPO*OTUBMM1BDLBHF1SPWJEFS/BOP4FSWFS1BDLBHF*NQPSU
1BDLBHF1SPWJEFS/BOP4FSWFS1BDLBHF'JOE/BOP4FSWFS1BDLBHF
/BNF%FGFOEFS*OTUBMM/BOP4FSWFS1BDLBHF/BNF.JDSPTPGU/BOP4FSWFS%FGFOEFS
1BDLBHF'PSDF
Once the Defender package is installed, you need to restart Nano Server using the
3FTUBSU$PNQVUFS cmdlet, and then login again to update the virus definition file.
Please note that when deploying the Defender package, all the management tasks are
performed from Windows PowerShell by using the Defender PowerShell Module.

Running Other Workloads on the Nano Server
[ 347 ]
The following is an example on how to use Windows PowerShell and command-line tool to
manage and update the Antivirus signatures.
After connecting to Nano Server using PowerShell remoting, you can run the following
commands (see Figure 6):
*NQPSU.PEVMFEFGFOEFS(FU$PNNBOE.PEVMFEFGFOEFS
(KIWTG9KPFQYU&GHGPFGT2QYGT5JGNN/QFWNG
It's recommended to update the AV signature first by using the 6QEBUF.Q4JHOBUVSF
cmdlet, and then run a full system scan by using 4UBSU.Q4DBODNEMFU.
6QEBUF.Q4JHOBUVSF6QEBUF4PVSDF.JDSPTPGU6QEBUF4FSWFS7FSCPTF4UBSU.Q4DBO
4DBO5ZQF'VMM4DBO(FU.Q$PNQVUFS4UBUVT
The 6QEBUF.Q4JHOBUVSF cmdlet will use the Microsoft update server over the internet to
update the AV signature.
If you are using Nano Server as a Hyper-V host, it's recommended to exclude certain
processes, files, and folders from the Defender default scan.

Running Other Workloads on the Nano Server
[ 348 ]
These exclusions are made based on the Hyper-V file locations. The default location for
VM configuration files is, $=1SPHSBN%BUB=.JDSPTPGU=8JOEPXT=)ZQFS7, and for
virtual hard disks is, $=6TFST=1VCMJD=%PDVNFOUT=)ZQFS7=7JSUVBM)BSE%JTLT.
You might also need to exclude the cluster storage location $=$MVTUFS4UPSBHF if you are
using failover clustering. Take a note of the current files and folder locations in your
environment.
In this example, the following list of processes, files, and folder will be excluded from
Windows Defender running on Nano Server:
%=7.T
WIEY and WIE
7NNTFYF, 7NDPNQVUFFYF, and 7NXQFYF
While you are still connecting to the Nano Server PowerShell session, run the following
commands (see Figure 7):
"EE.Q1SFGFSFODF&YDMVTJPO&YUFOTJPOWIEYWIE"EE.Q1SFGFSFODF
&YDMVTJPO1BUI%=7.T"EE.Q1SFGFSFODF
&YDMVTJPO1SPDFTT7NNTFYF7NXQFYF7NDPNQVUFFYF(FU
.Q1SFGFSFODF]'5&YDMVTJPO&YUFOTJPO&YDMVTJPO1BUI&YDMVTJPO1SPDFTT"VUP4J[F
(KIWTG9KPFQYU&GHGPFGT'ZENWUKQP

Running Other Workloads on the Nano Server
[ 349 ]
In some environments, Nano Server is deployed via a disconnected method without
internet access, however, your company policy dictates that you still need to update the AV
signature. In this case, you must download the AV signature files and then use a local or
centralized UNC share to update and push the AV signature version on each Nano Server.
This sounds like a manual approach; however, you can automate this option by using a
daily single scheduled task that can pull the AV signature files from a central share location,
and then update the signature version in an automated fashion.
The following example will show you how to download and update the AV signature in an
offline or disconnected environment.
First, we need to download the AV signature files using the following PowerShell
command (see Figure 8):
EFTUJOBUJPO1BUI%="74JHOBUVSFTSFHJPODSFBUFEFTUJOBUJPOQBUIJG
EPFTOPUFYJTUJG
OPU
5FTU1BUI1BUIEFTUJOBUJPO1BUI\
NLEJS1BUIEFTUJOBUJPO1BUI^FOESFHJPOSFHJPO8JOEPXT%FGFOEFS%FGJOJUJPOT
63-Y4IUUQHPNJDSPTPGUDPNGXMJOL-JOL*%DMDJEYBSDIY
Y%EFTUJOBUJPO1BUI=NQBN
GFFYFY4IUUQHPNJDSPTPGUDPNGXMJOL-JOL*EY%EFTUJO
BUJPO1BUI=NQBN
EFYFY4IUUQHPNJDSPTPGUDPNGXMJOL-JOL*%BSDIYOSJUS
VFY%EFTUJOBUJPO1BUI=OJT@GVMMFYFFOESFHJPOSFHJPO%PXOMPBE
8JOEPXT%FGFOEFS%FGJOJUJPOT8FC$MJFOU/FX
0CKFDU4ZTUFN/FU8FC$MJFOU8FC$MJFOU%PXOMPBE'JMF
Y4Y%8FC$MJFOU
%PXOMPBE'JMF
Y4Y%8FC$MJFOU%PXOMPBE'JMF
Y4Y%FOESFHJPO
(KIWTG&QYPNQCF9KPFQYU&GHGPFGT#85KIPCVWTG(KNGU

Running Other Workloads on the Nano Server
[ 350 ]
The second command is to update the AV signature version on Nano Server using the
.1$NE3VOFYF command-line instead of using 6QEBUF.Q4JHOBUVSF6QEBUF4PVSDF
'JMF4IBSFT. This is the recommended approach suggested by Microsoft specifically for
Windows Defender running on Nano Server.
Please note that every time you want to update the AV signature, you want to browse to
$=1SPHSBN'JMF=8JOEPXT%FGFOEFS and then run the .1$NE3VOFYF command-line
tool from there. To work around this issue, you can create a new alias in PowerShell to
speed up the process (more on that in a bit).
Before we update the Windows Defender definition, you can check the existing AV version
installed by running the following command (see Figure 9):
(FU
.Q$PNQVUFS4UBUVT]'-".&OHJOF7FSTJPO".1SPEVDU7FSTJPOA"OUJTQZXBSF&OBCMFE"OU
JTQZXBSF4JHOBUVSF-BTU6QEBUFEA"OUJTQZXBSF4JHOBUVSF7FSTJPO"OUJWJSVT&OBCMFE
A"OUJWJSVT4JHOBUVSF-BTU6QEBUFE"OUJWJSVT4JHOBUVSF7FSTJPO
(KIWTG9KPFQYU&GHGPFGT#85KIPCVWTG8GTUKQP
To update the AV signature version, run the following command:
/FX"MJBT.Q$NE$=QSPHSBNGJMFT=XJOEPXTEFGFOEFS=.Q$NE3VOFYF.Q$NE
4JHOBUVSF6QEBUF1BUI%="74JHOBUVSFT
As shown in Figure 10, the AV signature version was updated from  to
:

Running Other Workloads on the Nano Server
[ 351 ]
(KIWTG7RFCVG9KPFQYU&GHGPFGT#85KIPCVWTG8GTUKQP
Managing the Local Administrator's
Passwords on Nano Server
As we covered in $IBQUFS, Managing Nano Server with Windows PowerShell and Windows
PowerShell DSC, the Group Policy and the associated Group Policy Management Console
(GPMC) tools are not present on Nano Server, even when the domain is joined, because
Nano Server will not consume and endorse Group Policy settings. This is expected because
those tools are graphical components and Nano Server is headless and designed to be
remotely managed. A question that you find yourself asking is, how am I going to manage a
local administrator's password for high density Nano Server deployment?
The good news is that Microsoft brought the implementation of the Local Administrator
Password Solution (LAPS) client for Nano Server, so that managing the local
administrator's passwords will be possible as well. For more information about LAPS,
please check the following article:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTNUBTQY
In summary, LAPS is a free Microsoft product that enables client and server machines to
automatically change the passwords on local accounts and store those passwords as
attributes of the computer objects in Active Directory.

Running Other Workloads on the Nano Server
[ 352 ]
In this section, we will discuss and show you how to implement and manage Local
Administrator's Passwords on Nano Server using the LAPS solution.
Prerequisites
The following prerequisites must be met to use LAPS on Nano Server:
LAPS Client for Nano is only supported for Nano Server and it is not designed to
run on any other version of Windows.
LAPS Client for Nano depends on PowerShell DSC because LAPS is a
client/server tool that runs as a Group Policy client-side extension on your
computers. But since Group Policy is not supported on Nano Server, you need to
make sure that Microsoft-NanoServer-DSC-Package is added to the image. For
more information, please check $IBQUFS, Managing Nano Server with Windows
PowerShell and Windows PowerShell DSC, about how to manage Nano Server with
Windows PowerShell DSC.
LAPS Client for Nano also depends on Active Directory. You need to make sure
that all Nano Servers that you want to manage using LAPS are joined to the
domain. Please check $IBQUFS, Getting Started with Nano Server.
As for the classic LAPS Client for Windows Server, the LAPS Client for Nano also
requires AD permissions delegation (more on that in a bit).
Installation
This example assumes that you already have a couple of Nano Servers deployed in your
environment that include the DSC package.
First, we need to download -"14/BOP%4$ module from PowerShell gallery, and then
install it on all Nano Servers that you want to manage with LAPS.
Open an elevated PowerShell console on your management machine and then run the
following script to automate this process:
SFHJPOWBSJBCMFTVQEBUFUIFQBTTXPSE-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH
4USJOH	1!TTXSE	"T1MBJO5FYU'PSDF-PDBM$SFE/FX
0CKFDU4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
	="ENJOJTUSBUPS	-PDBM1BT
TXPSEFOESFHJPO%PXOMPBEBOE*OTUBMM-"14/BOP%4$NPEVMFMPDBMMZGSPN
14(BMMFSZ4FU143FQPTJUPSZ/BNF	14(BMMFSZ	*OTUBMMBUJPO1PMJDZ5SVTUFE*OTUBMM
.PEVMF/BNF-"14/BOP%4$'PSDF$PQZBOEJOTUBMM-"14/BOP%4$NPEVMFPO
BMM/BOP4FSWFST4PVSDF	$=1SPHSBN
'JMFT=8JOEPXT1PXFS4IFMM=.PEVMFT=-"14/BOP%4$	%FTUJOBUJPO	$=1SPHSBN

Running Other Workloads on the Nano Server
[ 353 ]
'JMFT=8JOEPXT1PXFS4IFMM=.PEVMFT	]'PS&BDI0CKFDU\
4/FX144FTTJPO7./BNF/"/07.0.@$SFEFOUJBM-PDBM$SFE$PQZ*UFN
1BUI4PVSDF5P4FTTJPO4%FTUJOBUJPO%FTUJOBUJPO3FDVSTF'PSDF*OWPLF
$PNNBOE4FTTJPO44DSJQU#MPDL\*NQPSU.PEVMF/BNF-"14/BOP%4$7FSCPTF^
^
In the first part of this script, we downloaded and installed -"14/BOP%4$ module from
PowerShell gallery locally, and then we copied it through PowerShell remote session and
PowerShell Direct to all Nano Servers instead of downloading the same module five times,
and finally we imported it. PowerShell Direct is so powerful.
When the -"14/BOP%4$ module is installed on all Nano Servers, we move onto creating
configuration data in the registry. By default, Microsoft shipped a sample configuration and
installation files within the DSC module that you can use or modify if necessary to match
your environment (see Figure 11):
(KIWTG.#250CPQ&5%%QPaIWTCVKQPCPF+PUVCNNCVKQP(KNGU
You need to create the corresponding MOF file(s) before you push or pull the
configuration and update the registry on each Nano Server.
In this example, we've updated the -"14/BOP%4$$POGJHQT file to match
our environment where we want to configure the registry for LAPS on five
different Nano Servers.
The -"14/BOP%4$$POGJHQT and -"14/BOP%4$*OTUBMMQT
files used in this example are companion accompanied with this chapter,
you can download and use them for your convenience.

Running Other Workloads on the Nano Server
[ 354 ]
Open Windows PowerShell on your management machine, browse to the folder
where you saved the -"14/BOP%4$$POGJHQT script, and run the following
commands (see Figure 12):
$POGJH/PEF	/"/07.0.		/"/07.0.		/"/07.0.		/"/07.
0.		/"/07.0.	=-"14/BOP%4$$POGJHQT
$POGJH/PEF$POGJH/PEF
(KIWTG.#250CPQ&5%4GIKUVT[%QPaIWTCVKQP%TGCVKPI/1((KNGU
Now you must use the MOF files created in the previous step to update the registry on your
Nano Servers. You can do this by using the following four lines of code:
SFHJPOWBSJBCMFTVQEBUFUIFQBTTXPSE-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH
4USJOH	1!TTXSE	"T1MBJO5FYU'PSDF-PDBM$SFE/FX
0CKFDU4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
="ENJOJTUSBUPS-PDBM1BT
TXPSEFOESFHJPO1VTI%4$$POGJHVSBUJPO4UBSU%TD$POGJHVSBUJPO
1BUI=-"14@/BOP@$POGJH7FSCPTF8BJU$PNQVUFS/BNF$POGJH/PEF
$SFEFOUJBM-PDBM$SFE'PSDF

Running Other Workloads on the Nano Server
[ 355 ]
After the configuration is applied, you should see the configuration created in registry on
all Nano Servers as shown in Figure 13:
(KIWTG.#250CPQ4GIKUVT[%QPaIWTCVKQP
Next, we move on to installing the LAPS client on all Nano Servers.
In this example, we've updated the -"14/BOP%4$*OTUBMMQT file to match
our environment where we want to install the LAPS client on five different Nano
Servers.

Running Other Workloads on the Nano Server
[ 356 ]
Open Windows PowerShell on your management machine, browse to the folder
where you saved -"14/BOP%4$*OTUBMMQT script, and run the following
commands (see Figure 14):
      .\LAPS.Nano.DSC.Install.ps1-ConfigNode$ConfigNode
(KIWTG.#250CPQ&5%%NKGPV+PUVCNNCVKQP%TGCVKPI/1((KNGU
Now you must use the MOF files created in the previous step to install the LAPS client
service on all Nano Servers. You can do this by using the following four lines of code:
SFHJPOWBSJBCMFTVQEBUFUIFQBTTXPSE-PDBM1BTTXPSE$POWFSU5P4FDVSF4USJOH
4USJOH	1!TTXSE	"T1MBJO5FYU'PSDF-PDBM$SFE/FX
0CKFDU4ZTUFN.BOBHFNFOU"VUPNBUJPO14$SFEFOUJBM
="ENJOJTUSBUPS-PDBM1BT
TXPSEFOESFHJPO1VTI%4$$POGJHVSBUJPO4UBSU%TD$POGJHVSBUJPO
1BUI=-"14@/BOP@$POGJH7FSCPTF8BJU$PNQVUFS/BNF$POGJH/PEF
$SFEFOUJBM-PDBM$SFE'PSDF

Running Other Workloads on the Nano Server
[ 357 ]
After the installation is performed, you should see the -"14/BOP service installed and
running on all Nano Servers as shown in Figure 15:
(KIWTG.#250CPQ%NKGPV5GTXKEG
In the last step, you need to configure LAPS in your environment and extend the AD
schema and delegate permissions:
You can download LAPS from the following link which is at version 6.2 as of this
1.
writing:
IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQYJE.
Install LAPS management tools on a member server in your domain
2.
environment. If you want to use LAPS for Nano Server only, then you don't need
to install GPO Editor templates, because LAPS for Nano does not use GPO at all.
Run 6QEBUF"EN1XE"%4DIFNB from PowerShell to extend AD schema as shown
3.
in Figure 16:
(KIWTG/QFKH[KPIVJG#&UEJGOCHQT.#25

Running Other Workloads on the Nano Server
[ 358 ]
To delegate computer permission to write a password on your Nano clients, you
4.
use the 4FU"EN1XE$PNQVUFS4FMG1FSNJTTJPO cmdlet to apply them to the
Active Directory organizational unit (OU) objects which contain your LAPS
client Nano Servers. Applying the permissions to the OUs causes them to be
inherited by all the subordinate objects in those OUs, including other OUs. Please
note that you must repeat this command with the name of every OU having the
computer objects of LAPS Nano clients, unless the OU is subordinate to another
OU that you have already configured. In this example, we will delegate the write
password permission for the OU named Nano. The PowerShell will look like this
(Figure 17):
     Set-AdmPwdComputerSelfPermission-Identity:NANO
(KIWTG&GNGICVG17YTKVGRGTOKUUKQP
Wait some time and then check the password of a managed administrator
5.
account on Nano machines reported to AD using the LAPS UI tool as shown in
Figure 18:

Running Other Workloads on the Nano Server
[ 359 ]
(KIWTG&GNGICVG17YTKVGRGTOKUUKQP
Using MPIO on Nano Server
Multipath I/O (MPIO) is a fault-tolerance and performance-enhancement technique that
defines more than one physical path between the CPU in a computer system and its mass-
storage devices through the buses, controllers, switches, and bridge devices connecting
them. If one or more of these components fails, causing the path to fail, the multipath I/O
logic uses an alternate path for I/O so that applications can still access their data.
In $IBQUFS, Deploying Hyper-V Cluster on Nano Server, we covered how to deploy Nano
Server in Hyper-Converged model using S2D. However, MPIO is not supported with S2D.
In other words, there should be no MPIO on your S2D system because S2D is all single
connection non-shared.
For more information about multipath I/O in Windows Server, please check the following
article: IUUQTUFDIOFUNJDSPTPGUDPNMJCSBSZDDBTQY.

Running Other Workloads on the Nano Server
[ 360 ]
In some scenarios, you need to connect Nano Server to iSCSI, Fiber Channel, and Serial
Attached Storage (SAS) SAN by establishing multiple sessions or connections to the
storage array. In this case, MPIO is supported and can be enabled on Nano Server to
leverage fault-tolerance and performance-enhancement provided by the storage fabric
component.
In this section, we will show you how you can use MPIO on Nano Server to support these
type of scenarios. But before you enable MPIO, there are some differences that you want to
be aware of compared to Server with Desktop Experience, and Server Core, such as:
The Microsoft DSM is only supported on Nano Server
The Load Balancing Policy is chosen dynamically and cannot be modified
For more information about MPIO policies, please check the following article:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTMJCSBSZEE
WXTBTQ
Y
The Load Balancing policy for Nano Server has the following characteristics:
RoundRobin (active/active) Default
LeastBlocks - SAS HDD
RoundRobin with Subset - ALUA
Path states (active/passive) for ALUA arrays are picked up from the target array
Storage devices are claimed by bus type (that is Fibre Channel, iSCSI, or SAS).
When MPIO is installed on Nano Server, disks are still exposed as duplicates (one
available per path) until MPIO is configured to claim and manage the disks.
Microsoft published a sample script on how to claim or unclaim disks for MPIO
at the following link:
IUUQTUFDIOFUNJDSPTPGUDPNFOVTXJOEPXTTFSWFSEPDTHFUTUBS
UFENQJPPOOBOPTFSWFS.
iSCSI boot is not supported
Enabling MPIO needs to be done after you have deployed Nano Server. As we have done
multiple times through the course of this book, you are simply going to use PowerShell
remoting or PowerShell Direct to connect to Nano Server and then run the following
command:
&OBCMF8JOEPXT0QUJPOBM'FBUVSF0OMJOF'FBUVSF/BNF.VMUJ1BUI*0

Running Other Workloads on the Nano Server
[ 361 ]
Or you can use Server Manager to connect to Nano Server and enable Multipath I/O in the
Add Roles and Features Wizard as shown in Figure 19:
(KIWTG'PCDNKPI/WNVKRCVJ+1WUKPI5GTXGT/CPCIGT
Using Windows Update on Nano Server
In Windows Server 2016 including Nano Server, Microsoft simplified and streamlined
Windows updates and patching process which will help in reducing operating expenses
costs by delivering:
Predicable monthly update cadence you can plan for
Fewer updates to manage

Running Other Workloads on the Nano Server
[ 362 ]
Cumulative updates that have everything you need
Proactive notification of updates before they cause downtime
Simplified test matrix and streamlined verification process
In summary, you can build a simple update maintenance plan that will consist of: one
update, once a month and that's it.
Updating Nano Server is slightly different than updating any other version of Windows.
Basically, there are different options that you can choose from to update your Nano
environment. In this section, we will touch on each one so you can choose the best option
that suits your environment:
Apply the cumulative update into a new Nano image:
1.
As we have done multiple times through the course of this book, you can
simply integrate the latest update directly when creating the image so that it's
fully patched on first boot. You should download the latest Servicing Stack
Update (SSU) and the latest Cumulative Update (CU) from the Microsoft
Update Catalog and then install the Servicing Stack Update first as a
prerequisite, and then install the Cumulative Update. The order is very
important.
As of this writing, the latest Servicing Stack Update can be downloaded from
the following link:
IUUQDBUBMPHVQEBUFNJDSPTPGUDPNWTJUF4FBSDIBTQYR,#
The latest Cumulative Update can be downloaded from the following link:
IUUQDBUBMPHVQEBUFNJDSPTPGUDPNWTJUF4FBSDIBTQYR,#

After downloading the NTV files from the Microsoft Update Catalog, save
them to a network share or local directory, and then use the /FX
/BOP4FSWFS*NBHF cmdlet followed by the 4FSWJDJOH1BDLBHF1BUI
parameter to integrate the latest update as part of the image. Remember, you
need to specify the Servicing Stack Update NTV file first, and then the
Cumulative Update NTV file.

Running Other Workloads on the Nano Server
[ 363 ]
The PowerShell command will look like the following, make sure to add the
other parameters as needed, please check $IBQUFS, Deploying Nano Server in
a Virtual Machine and on Physical Hardware, for the complete list of the
required and optional parameters:
New-NanoServerImage-
ServicingPackagePath'C:\NanoServer\Windows10.0-KB4013418-
x64.msu','C:\NanoServer\Windows10.0-KB4023680-x64.msu'
Apply the cumulative update into an existing Nano image:
2.
In this option, you can apply the latest update directly into your existing
Nano Server image that you have built previously, so that Nano machines
created using this image are fully patched on first boot.
After downloading the NTV files from the Microsoft Update Catalog, save
them to a network share or local directory, and then use the &EJU
/BOP4FSWFS*NBHF cmdlet followed by the 4FSWJDJOH1BDLBHF1BUI
parameter to integrate the latest update as part of the existing image.
The PowerShell command will look like the following, make sure to add the
other parameters as needed:
Edit-NanoServerImage-
ServicingPackagePath'C:\NanoServer\Windows10.0-KB4013418-
x64.msu','C:\NanoServer\Windows10.0-KB4023680-x64.msu'-
TargetPathC:\NanoServer.wim
Apply the cumulative update to an existing offline VHD(X):
3.
In this option, you can apply the latest update directly into your existing
virtual hard disk Nano image either in VHD or VHDX format. You need to
make sure the virtual hard disk is not in use by either shutting down the VM
or unmounting the virtual hard disk file. After downloading the NTV files
from the Microsoft update catalog, save them to a network share or local
directory, and then use the following PowerShell commands:
.PVOU8JOEPXT*NBHF*NBHF1BUI$=/BOP4FSWFSWIEY
1BUI$=.PVOU%JS*OEFY"EE8JOEPXT1BDLBHF1BUI$=.PVOU%JS
1BDLBHF1BUI$=/BOP6QEBUFT%JTNPVOU8JOEPXT*NBHF
1BUI$=.PVOU%JS4BWF

Running Other Workloads on the Nano Server
[ 364 ]
The first command will mount the VHDX file and use a mounting directory
called .PVOU%JS. The second command will add all Windows Updates that
are located under $=/BOP6QEBUFT to the mounting directory, and the final
command will dismount and save the changes to the image.
Apply the cumulative update to a running Nano Server:
4.
In this option, you can apply the latest update directly to a running Nano
Server either in a virtual machine or physical host. After downloading the
NTV files from the Microsoft Update Catalog, save them to a local directory
on your management machine such as $=4FSWJDJOH1BDLBHFT.
Then use &YQBOEFYF utility to extract the DBC files from the NTV files into
separate directories.
Open Windows PowerShell and run the following command to extract the
DBC files (see Figure 20):
&YQBOEFYF=8JOEPXT,#YNTV
'=&YQBOEFYF=8JOEPXT,#YNTV'=
(KIWTG'ZRCPF9KPFQYU7RFCVGUECD(KNGU

Running Other Workloads on the Nano Server
[ 365 ]
Finally, you need to copy the DBC files to Nano Server. If you're applying a servicing stack
update, please make sure to restart the server after applying the servicing stack update
before applying the latest cumulative update.
Open Windows PowerShell and run the following commands:
6QEBUFUIF*1BEESFTTBDDPSEJOHUPZPVS
FOWJSPONFOU/BOP*14FTTJPO/FX144FTTJPO
$PNQVUFS/BNF/BOP*1$SFEFOUJBM"ENJOJTUSBUPS$PQZ*UFN5P4FTTJPO4FTTJPO
1BUI$=4FSWJDJOH1BDLBHFT=%FTUJOBUJPO$=3FDVSTF'PSDF4FTTJPO]&OUFS
144FTTJPO4FU-PDBUJPO$="QQMZUIF4FSWJDJOH4UBDL6QEBUFGJSTUBOEUIFO
SFTUBSU"EE8JOEPXT1BDLBHF0OMJOF
1BDLBHF1BUI$=4FSWJDJOH1BDLBHFT=8JOEPXT,#YDBC3FTUBSU
$PNQVUFSFYJU"GUFSSFTUBSUJOHBQQMZUIF$VNVMBUJWF6QEBUFBOEUIFO
SFTUBSU4FTTJPO/FX144FTTJPO$PNQVUFS/BNF/BOP*1$SFEFOUJBM
"ENJOJTUSBUPS4FTTJPO]&OUFS144FTTJPO4FU-PDBUJPO$="EE8JOEPXT1BDLBHF
0OMJOF1BDLBHF1BUI$=4FSWJDJOH1BDLBHFT=8JOEPXT,#
YDBC3FTUBSU$PNQVUFSFYJU
To confirm that all updates are installed successfully, you can connect to Nano Server and
then run (FU8JOEPXT1BDLBHF cmdlet as shown in Figure 21:
6QEBUFUIF*1BEESFTTBDDPSEJOHMZ/BOP*14FTTJPO/FX
144FTTJPO$PNQVUFS/BNF/BOP*1$SFEFOUJBM"ENJOJTUSBUPS4FTTJPO]&OUFS
144FTTJPO4FU-PDBUJPO$=(FUBMJTUPGJOTUBMMFEVQEBUFT(FU8JOEPXT1BDLBHF
0OMJOF]8IFSF0CKFDU\@3FMFBTF5ZQFNBUDI6QEBUF^
(KIWTG8GTKH[KPUVCNNGF9KPFQYU7RFCVGU

Running Other Workloads on the Nano Server
[ 366 ]
Download and install the cumulative update to a running Nano Server:
5.
In this option, you can apply the latest update directly to a running Nano
Server either in a virtual machine or physical host without downloading the
NTV files separately from the Microsoft Update Catalog. You can use the
Windows Update WMI provider to download and install Windows updates
while Nano Server is running.
Connect to a running Nano Server machine using PowerShell remoting, and
run the following commands:
6QEBUFUIF*1BEESFTT
BDDPSEJOHMZ/BOP*14FTTJPO/FX144FTTJPO
$PNQVUFS/BNF/BOP*1$SFEFOUJBM"ENJOJTUSBUPS4FTTJPO]&OUFS
144FTTJPO4FU-PDBUJPO$=
Scanning for available updates (see Figure 22):
$JN4FTT/FX$JN*OTUBODF
/BNFTQBDFSPPU.JDSPTPGU8JOEPXT8JOEPXT6QEBUF
$MBTT/BNF.4'5@860QFSBUJPOT4FTTJPO4DBO3FTVMUT$JN4FTT]*OWPLF
$JN.FUIPE.FUIPE/BNF4DBO'PS6QEBUFT
"SHVNFOUT!\4FBSDI$SJUFSJB*T*OTUBMMFE0OMJOF4DBOUSVF^4DB
O3FTVMUT6QEBUFT

Running Other Workloads on the Nano Server
[ 367 ]
(KIWTG5ECPPKPIHQTCXCKNCDNGWRFCVGU9/+RTQXKFGT
Installing all available updates (see Figure 23):
$JN4FTT/FX$JN*OTUBODF
/BNFTQBDFSPPU.JDSPTPGU8JOEPXT8JOEPXT6QEBUF
$MBTT/BNF.4'5@860QFSBUJPOT4FTTJPO*OWPLF$JN.FUIPE
*OQVU0CKFDU$JN4FTT.FUIPE/BNF"QQMZ"QQMJDBCMF6QEBUFT3FTUBSU
$PNQVUFSFYJU
(KIWTG+PUVCNNKPICNNCXCKNCDNGWRFCVGU9/+RTQXKFGT

Running Other Workloads on the Nano Server
[ 368 ]
After applying the updates, you might want to check whether they are installed
(see Figure 24):
(FU8JOEPXT1BDLBHF0OMJOF]8IFSF0CKFDU\@3FMFBTF5ZQF
NBUDI6QEBUF^
(KIWTG%JGEMKPIKPUVCNNGFWRFCVGU
Using Windows Server Update Services to update Nano Server:
6.
In this option, you can leverage your existing Windows Server Update
Services (WSUS) in your environment to update Nano Server. As we
discussed earlier, Nano Server does not support group policy, hence you
cannot use the Group Policy Management console to apply WSUS policy on
Nano Server. The alternate way is to manually modify WSUS registry entries
for Windows Update. For more information about configuring Automatic
Updates using Registry Editor, please check the following article:
IUUQTNTEONJDSPTPGUDPNFOVTMJCSBSZEE
WXTBTQY
You can use the Registry Editor to connect to Nano Server by using the
Connect Network Registry MMC and update the registry entries as shown in
Figure 25 and in Figure 26.

Running Other Workloads on the Nano Server
[ 369 ]
Nano Server is only concerned with the following four registry keys:
864FSWFS:
),&:@-0$"-@."$)*/&=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6
QEBUF
864UBUVT4FSWFS:
),&:@-0$"-@."$)*/&=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6
QEBUF
(KIWTG4GIKUVT[MG[UHQT9KPFQYU7RFCVG

Running Other Workloads on the Nano Server
[ 370 ]
6TF864FSWFS:
),&:@-0$"-@."$)*/&=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6
QEBUF="6
"60QUJPOT:
),&:@-0$"-@."$)*/&=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6
QEBUF="6
(KIWTG4GIKUVT[MG[UHQT#WVQOCVKE7RFCVGEQPaIWTCVKQPQRVKQPU
You can also use Windows PowerShell and Windows PowerShell DSC to automate and
create the same registry keys for a large number of Nano Servers.

Running Other Workloads on the Nano Server
[ 371 ]
The following commands will help you to create the necessary registry keys using
PowerShell (if it does not already exist):
/FX*UFN1BUI),-.
=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT/BNF8JOEPXT6QEBUF/FX*UFN1SPQFSUZ
1BUI),-.
=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6QEBUF/BNF864FSWFS
1SPQFSUZ5ZQF4USJOH7BMVFIUUQ/FX*UFN1SPQFSUZ1BUI),-.
=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6QEBUF/BNF864UBUVT4FSWFS
1SPQFSUZ5ZQF4USJOH7BMVFIUUQ/FX*UFN1BUI),-.
=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6QEBUF/BNF"6/FX*UFN1SPQFSUZ
1BUI),-.
=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6QEBUF="6/BNF6TF864FSWFS
1SPQFSUZ5ZQF%8PSE7BMVF/FX*UFN1SPQFSUZ1BUI),-.
=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=8JOEPXT6QEBUF="6/BNF"60QUJPOT
1SPQFSUZ5ZQF%8PSE7BMVF
To confirm that all registry keys are created successfully, you can run the following
command (see Figure 27):
(FU$IJME*UFN1BUI3FHJTUSZ),-.=4PGUXBSF=1PMJDJFT=.JDSPTPGU=8JOEPXT=
3FDVSTF]8IFSF0CKFDU\@/BNFNBUDI8JOEPXT6QEBUF^
(KIWTG$TQYUKPITGIKUVT[MG[UHQT9KPFQYU7RFCVGU

Running Other Workloads on the Nano Server
[ 372 ]
Using a Scheduled Task to Update Nano Server:
7.
Updating Nano Server using Task Scheduler is possible, if you want to
automate this process, you need to create and register a scheduled task for
each Nano Server to check for new Windows updates on a regular basis. The
PowerShell command for a registered scheduled task will look like this:
"DUJPO/FX4DIFEVMFE5BTL"DUJPO&YFDVUF1PXFS4IFMMFYF
"SHVNFOU\
GJMF$=/BOP4FSWFS=/BOP4FSWFS6QEBUFQT^USJHHFS/FX
4DIFEVMFE5BTL5SJHHFS8FFLMZ"U".
%BZT0G8FFL'SJEBZ6TFS%PNBJO="ENJO6TFS3FHJTUFS4DIFEVMFE5BTL
5BTL/BNF/BOP4FSWFS6QEBUF5SJHHFSUSJHHFS6TFS6TFS
"DUJPO"DUJPO
The scheduled task above will trigger Nano Server to execute a specified PowerShell script
to run every Friday at 1.00 AM.
To view the list of scheduled jobs, use the (FU4DIFEVMFE5BTL cmdlet. And to remove a
scheduled job, use the 6OSFHJTUFS4DIFEVMFE5BTL cmdlet.
Using System Center Virtual Machine Manager to update Nano Server:
8.
If you have a System Center Virtual Machine Manager instance deployed in
your environment, you can use SCVMM and WSUS server to update Nano
Server deployment. Please refer to the following article to learn more about
setting up update servers in the System Center 2016 - Virtual Machine
Manager (SCVMM) fabric.
IUUQTEPDTNJDSPTPGUDPNFOVTTZTUFNDFOUFSWNNVQEBUFTF
SWFS

Running Other Workloads on the Nano Server
[ 373 ]
Using Cluster-Aware Updating to update Nano Server:
9.
Cluster-Aware Updating (CAU) is also supported on Nano Server. However,
the self-updating mode is not available for Nano. In other words, you can use
a CAU server to update the cluster nodes, but you cannot schedule CAU to
run on a specified date and time in self-updating mode. There are some
points that you want to be aware of to make sure CAU runs successfully such
as:
Make sure your system running CAU is Windows Server 2016 and
you have the components to fully manage your Nano nodes from
that server. This includes the Cluster management modules on
your Nano Server, and the cluster management tools on your CAU
server.
The orchestration of the updating must be from the external server.
The CAU orchestrator runs .NET Framework and Nano doesn't
support that version of .NET.
Update Out of Box (OOB) drivers for Nano
Server
For certain system components, there may be a need to update the inbox version of the
Nano Server driver to the most up-to-date. This will apply only for physical host
deployment.

Running Other Workloads on the Nano Server
[ 374 ]
The following PowerShell command can be used to retrieve a list of all driver versions
currently installed on the local system (see Figure 28):
(FU1OQ%FWJDF]4FMFDU0CKFDU/BNF!\M	%SJWFS7FSTJPO	F\
(FU
1OQ%FWJDF1SPQFSUZ*OTUBODF*E@*OTUBODF*E
,FZ/BNF	%&71,&:@%FWJDF@%SJWFS7FSTJPO	%BUB^^6OJRVF
(KIWTG4GVTKGXGCNKUVQHCNNFTKXGTXGTUKQPU
To update the Out of Box (OOB) drivers for Nano Server, you need to obtain the right
driver version from your favourite hardware vendor first, and then you need to login to
Nano Server using PowerShell remote session and use the QOQVUJMFYF command. You
can install the drivers individually or all of them. For example, assuming the driver pack is
located at $=)1&411 (in this example), you can install all of them with the
following command:
QOQVUJMFYFBEEESJWFSD
=)1&411=JOGTVCEJSTJOTUBMM
This command will recursively install all the drivers automatically for you.

Running Other Workloads on the Nano Server
[ 375 ]
If you want to install just a single driver, use the following command instead:
QOQVUJMFYFBEEESJWFSD
=)1&411=ESJWFS =GJMFOBNFJOG JOTUBMM
In this example, we will install all the drivers as shown in Figure 29 and then reboot the
system.
(KIWTG+PUVCNNKPI1'/FTKXGTUHQT0CPQ5GTXGT

Running Other Workloads on the Nano Server
[ 376 ]
The future of Nano Server
The future of Nano Server is all about containers. In the next release of Windows Server and
beyond, Microsoft will optimize Nano Server image for containers. The uncompressed
Nano container image in Windows Server 2016 is about 1 GB in size, this includes
components not relevant for containers such as components needed for physical and virtual
machines. Microsoft is significantly working on reducing the size of the image on disk by
50% and even more by the time you read this. This has two benefits. Firstly, it will speed up
the start-up time of containers, and secondly, will minimize the bandwidth needed when
you pull the image from Docker Hub (repository). All the components not relevant for
containers and modern application development will be removed from the image. The
optional components will be delivered as layers. Let's say, you need to pull a Nano
optimized container image, and if you want .NET Core, you need to pull .NET as a layer on
top of the image, and if you want PowerShell, you need to pull PowerShell as layer on top
as well, so on and so forth.
For more information about Windows containers, please check $IBQUFS, Running
Windows Server Containers and Hyper-V Containers on Nano Serve.
In the future release of Windows Server, Microsoft is also bringing the Windows insiders
program to Windows Server like in Windows 10. If you are familiar with the Windows 10
flights model (weekly update), Windows Server will follow the same method. This will help
provide access to frequent and regular builds of Windows Server to anyone in the world.
This will also mean that you can download Windows Server ISOs from the insider portal
and pull the container images from the Docker Hub as well.

Running Other Workloads on the Nano Server
[ 377 ]
Windows Server will also move to Windows Server as a Service model, this new model
works as semi-annual channel (pilot) and the semi-annual channel (broad). The pilot means
that new features will be introduced followed by feedback from users and a stabilization
period, however, the broad means that it's broadly declared after receiving feedback from
the pilot phase, the broad release is stable for production deployment, so no new features
will be added, and Microsoft will only release bug fixes. These changes attempt to realign
Windows 10 and Windows Server with the new model of big features delivered twice a
year in March and September. However, the Long-Term Servicing Channel (LTSC) for
Windows 10 and Windows Server will remain identical to old versions of Windows where
users receive security updates and bug fixes every month but no new features and
enhancements will be installed. The next LTSC of Windows Server will be released on a
typical release schedule (2-3 years). The minimum length of servicing lifetime for LTSC is 10
years (5 years mainstream support + 5 years extended support) or up to 16 years if you
purchased premium assurance. As of this writing, if you require to receive all the new
features of the next release of Windows Server, you should switch from LTSC to semi-
annual channel by performing a fresh installation (No in-place upgrade), or if you are using
failover clustering, you could move from LTSC to SAC by performing a cluster operating
system rolling upgrade without any downtime.
Nano Server moving forward will be specifically used for container-optimized runtime. In
the next release of Windows Server, Microsoft is intending to deprecate the host and guest
VMs functionality in Nano Server, and focus exclusively on getting the container
technology as small as possible by removing the host and virtual machine dependencies
from the image. In other words, Nano Server will not be supported to run on physical and
virtual machines. As an aside, the focus on containers was very well-received by many
customers since the GA release of Windows Server 2016 in October 2016.

Running Other Workloads on the Nano Server
[ 378 ]
The infrastructure roles for Nano Server in Windows Server 2016 will
remain fully supported as of today, because Nano Server was released
under CBB servicing model (now is called Semi-annual Channel), that
means the first Nano Server release (Version 1607) was released back in
October 2016 it is still supported until spring 2018. You can still use Nano
Server for physical host, virtual machine deployment as well as for
containers. In fact, most of the topics and examples covered in this book
will work the same whether you are using Server Core or Server with
Desktop Experience.
Microsoft is also working on optimizing Windows Server Core for cloud host (physical
machine) deployment which is the backbone for Azure (public cloud) and for Azure Stack
(hybrid cloud). Windows Server Core will be also used as container hosts to run Nano
container images as well as for Software-defined Datacenter (SDDC) hosts.
Summary
In the last chapter of this book, we discussed how to run DNS and IIS on Nano Server. We
also covered additional updates and tools that will help you streamline your experience by
using Nano Server.
Finally, we discussed the future of Nano Server including Windows Server moving
forward.
We hope this book has been informative for you, and we would like to thank you for
reading.

Index
.
.wim file
   Nano Server, deploying  
5
5nine Cloud security
   URL  
5nine Manager
   cluster nodes, managing  
   cluster summary, viewing  
   cluster, creating  
   cluster, validating  , , 
   clustered virtual machine security, managing  
   clustered VMs, managing  
   host, load balancing  , 
   live migration settings, configuring  
   Nano Server failover clusters, creating  
   Nano Server failover clusters, managing  
   URL  , 
   used, for Nano Server administration  , ,
, , , , , , 
A
Active Directory Domain Services (ADDS)
   reference  
Active.xml configuration file
   creating  , 
Audit Collection Services
   about  
   reference  
Azure Resource Manager (AzureRM)  
B
Baseboard Management Controller (BMC)  , 
Bcdedit tool  
Best Practices Analyzer (BPA)  
born-in-the-cloud applications  
C
Cloud Platform System (CPS)  
Cluster Shared Volume (CSV)  
Cluster-Aware Updating (CAU)  
collector computer
   configuring  , 
   installing  , , , 
Common Language Runtime (CLR)  
container host  
container networking
   reference  
containers
   about  
   benefits  , 
   overview  
   versus virtual machines  , 
Cost of goods sold (COGS)  
Cumulative Update (CU)  
D
Data Center Bridging (DCB)  , , , 
Deployment Imaging Servicing and Management
(DISM)
   about  
   EMS, enabling  
   Nano image, customizing with unattend.xml file 

   Nano Server image, customizing  
   optional customization  
   unattend.xml, injecting into VHD(X)  , 
Desired State Configuration (DSC)  , , , 
diagnostic messages
   analyzing  , 
   reading  , 
DISM, optional settings

[ 380 ]
   agents, installing  
   commands, executing on boot  , , 
   computer name, setting  
   domain join, using  , 
   Emergency Management Services (EMS)  
   tools, installing  
DNS server
   URL  
Docker Hub
   reference  
Docker-PowerShell module
   URL  
Docker
   about  
   installing  
   managing, on Nano Server  
Dockerized Linux applications  
Domain Name System (DNS)
   about  
   executing, on Nano Server  , 
   reference  
E
Emergency Management Services (EMS)  , ,
, 
   about  
   enabling  
   enabling, with DISM  
   enabling, with PowerShell  
   reference  
event logs
   access, enabling  , , 
F
failover clustering
   reference  
failover clusters
   creating, with 5nine Manager  
   managing, with 5nine Manager  
Fiber Channel over Ethernet (FCoE)  
Full Server  
G
Get-WinEvent
   URL  
Graphical User Interface (GUI)  
Group Policy Management Console (GPMC)  ,

Group Policy Objects (GPO)  
H
Hyper-V cluster
   configuring  , , 
   creating  , , 
   Nano Server, deploying  , , 
   Nano Server, deploying as compute host  
   network, configuring  , , , 
Hyper-V containers
   about  , 
   creating  , 
   Nano Server image, creating  
   Nano Server VM, creating  
   Windows Server containers, converting  ,
, 
Hyper-V
   Hyper-V Manager, launching  , , , , 
   Nano Server VM, deploying  
   PowerShell, using  , 
I
Image Builder (IB)  
integrated Dell Remote Access Controller (iDRAC) 

Integrated Lights-Out 3/4 (iLO 3 and 4)  
Internet Information Services (IIS)
   about  
   executing, on Nano Server  , , , ,

   reference  
Internet Small Computer System Interface (ISCSI) 

K
Kernel Debug Network Adapter (KDNET)  
kernel debugging
   about  , 
   Nano Server, debugging with WinDbg  , ,

   references  
   WinDbg, installing from Windows SDK  

[ 381 ]
L
Local Administrator Password Solution (LAPS)
   about  
   installation  , , , 
   prerequisites  
   reference  
   URL  
   used, for managing local administrator's
passwords  
Local Configuration Manager (LCM)  
Local Policy Editor (LPEdit)  
M
message analyzer
   URL  
Microsoft Azure
   Nano Server, creating  , , , 
   Nano Server, deploying  
   requisites  
   URL  
Microsoft Management Console (MMC)  , 
Minimal Server Interface  
multipath I/O (MPIO)
   reference  , 
   using, on Nano Server  
N
named pipe
   about  
   reference  
Nano Server Azure Helper PowerShell module
   URL  
Nano Server image
   advanced settings  
   building, with Nano Server image builder  , ,
, , , 
   building, with Windows PowerShell  , , 
   creating, for PowerShell DSC  
   customizing, with DISM  
   customizing, with Nano Server image builder  ,
, , , , 
   customizing, with Windows PowerShell  , ,

   Nano virtual machines, creating  
   packages, adding  
Nano Server VM
   deploying, in Hyper-V  
   reference  
   troubleshooting, with EMS  , , , 
Nano Server, as compute host
   deploying  
   ISO image of Windows Server 2016 Datacenter
edition, acquiring  
   Nano Server images, copying to host machines 

   Nano Server images, creating  , 
   Nano Server, managing from management
machine  
   Nano Servers, connecting from management
machine  
   rebooting, into Nano Server image  
Nano Server, as storage cluster
   deploying  , , 
   storage spaces, deploying  , 
Nano Server
   business impact  
   capabilities  
   cloud journey  
   customizations  , 
   deploying, as compute cluster  
   deploying, as Hyper-V cluster  
   deploying, in Microsoft Azure  
   deploying, in VM  , 
   deploying, on physical machine  
   deployment improvements  
   features  
   future  
   history  , 
   improvements  
   infrastructure impact  
   installation  
   management  
   managing, with PowerShell  , , , ,

   managing, with PowerShell DSC  
   reference  
   resource utilization improvements  
   roles  
   roles and features  

[ 382 ]
   security impact  
   security improvements  
   Server Core  
   servicing improvements  
   starting  
   URL  
Nano virtual machines
   creating  
Network Address Translation (NAT)  
network teaming
   managing, on Nano Server  , , 
O
OneGet
   URL  
operations manager agent
   installing, on Nano Server  , , , 
   uninstalling, from Nano Server  
optional parameters, for Nano Server deployment
on VM
   Clustering  
   Compute  
   ComputerName  
   Containers  
   CopyPat  
   DebugMethod  
   Defender  
   Development  
   DomainBlobPath  
   DomainName  
   DriverPath  
   EMSBaudRate  
   EMSPort  
   EnableEMS  
   EnableRemoteManagementPort  
   InterfaceNameOrIndex  
   Internal  
   IPv4Address  
   IPv4Dns  
   IPv4Gateway  
   IPv4SubnetMask  
   IPv6Address  
   IPv6Dns  
   LogPath  
   MaxSize  
   OEMDrivers  
   OfflineScriptArgument  
   OfflineScriptPath  
   Package  
   ReuseDomainNode  
   ServicingPackagePath  
   SetupComplete command  
   SetupUI  
   Storage  
   UnattendPath  
organizational unit (OU)  
Out of Box (OOB) drivers
   updating, for Nano Server  , 
P
physical machine
   bare-metal machine, booting into WinPE  
   bare-metal machine, PxE-booting  
   Nano Server VHD/VHD(X), dual booting  , ,
, , , , , 
   Nano Server, deploying on  
   Nano Server, deploying with .wim file  
   Nano Server, installing from WDS  
   Windows EMS, using  
PowerShell DSC
   configuration, pushing  , , , 
   Nano Server image, creating  
   Nano Server, managing  
   Security Settings, managing  , , , ,
, 
   xNetworking module, importing  , 
PowerShell Scripting Environment (PSE)  
PowerShell
   EMS, enabling  
   Nano Server, managing  , , , ,

   URL  
   using  , 
Preboot Execution Environment (PXE)  
Priority Flow Control (PFC)  , 
PuTTY
   URL  
   used, for establishing SSH connection to iLO IP
address  , , 

[ 383 ]
Q
Quality of Service (QoS)
   reference  
R
recovery console
   about  , 
   backend  
   frontend  
   network configurations, setting  , , ,
, 
Registry Editor
   reference  
registry policy settings
   URL  
Remote Direct Memory Access (RDMA)  , 
Remote Server Administration Tools (RSAT)
   about  , , , 
   URL  
remote server graphical tools
   Hyper-V Manager, accessing  
   Microsoft Management Console  
   Server Manager  , 
remote server GUI tools  
required parameters, for Nano Server deployment
on VM
   AdministratorPassword  
   BasePath  
   DeploymentType  
   Edition  
   MediaPath  
   TargetPath  
Resilient File System (ReFS)  
roles and features, Nano Server
   about  
   Compute-Package  
   Containers-Package  
   DCB-Package  
   Defender-Package  
   DNS-Package  
   DSC-Package  
   FailoverCluster-Package  
   IIS-Package  
   OEM-Drivers-Package  
   SCVMM-Package  
   Secure startup-Package  
   shielded VM-Package  
   software inventory logging-Package  
   Storage-Package  
ROM-Based Setup Utility (RBSU)
   EMS Port, enabling  
S
S2D calculator
   URL  
Security Settings
   managing, with PowerShell DSC  , , ,
, , 
Serial Attached Storage (SAS)  
Server Core  , 
Server Message Block (SMB)  
Servicing Stack Update (SSU)
   about  
   URL  
Setup and Boot Event Collection (SBEC)
   about  , 
   Active.xml configuration file, creating  , 
   collector computer, configuring  
   collector computer, installing  , , , 
   diagnostic messages, analyzing  , 
   diagnostic messages, reading  , 
   requisites  
   target computer, configuring  
Software Inventory Logging (SIL) package  
Software-defined Datacenter (SDDC)  
Software-Defined Networking (SDN)  , 
Special Administration Console (SAC)
   about  
   reference  
Storage Spaces Direct (S2D)
   about  , 
   reference  
storage spaces
   deploying, on Nano Server  , 
   Nano Server images, creating  , 
   Nano Server images, deploying  , 
   network, configuring  
   pool, creating  
   S2D cache, configuring  

[ 384 ]
   Storage Spaces Direct, configuring  , ,
, 
   Storage Spaces Direct, creating  , , ,

   tiers, creating  
Switch Embedded Teaming (SET)
   about  , 
   reference  , 
System Administration Channel (SAC)
   about  
   reference  
System Center Operations Manager (SCOM)  ,

System Center operations manager 2016
   Nano Server, monitoring  
   operations manager agent, installing on Nano
Server  , , , 
   operations manager agent, uninstalling from
Nano Server  
System Center Virtual Machine Manager (SCVMM)
2016
   about  , , 
   Nano Server, deploying  
   Nano Server, managing  
   network teaming, managing on Nano Server 
, , 
   reference  
   virtual machine manager agent, installing  ,
, 
   VMM bare-metal deployment  
   VMM VM template deployment  
System Image Manager (SIM)  
T
target computer
   configuring  
   Nano Server, configuring as  , , 
TCP port 2376 connection
   reference  
teletype (TTY) terminal output  
Trusted Platform Module (TPM)  
U
unattend.xml file
   injecting, in VHD(X)  , 
   Nano image, customizing  
Update Rollups (UR)
   reference  
User Interface (UI)  
V
VHD(X)
   unattend.xml file, injecting  , 
Virtual Hard Disks (VHDX)  
virtual machine manager agent
   installing, on Nano Server  , , 
   reference  
virtual machine work process (vmwp)  
virtual machines
   Nano Server, deploying  , 
   versus containers  , , 
   Windows EMS, using  , 
virtual serial port
   about  , 
   EMS Port, enabling ROM-Based Setup Utility
(RBSU)  
   enabling  
VMM bare-metal deployment
   about  
   Nano Server VHD(X), preparing for physical
machine  , , , , , , ,

VMM network resources
   reference  
VMM VM template deployment
   about  
   Nano Server VHD, preparing for virtual machine 
, , 
W
Wevtutil
   URL  
WinDbg
   installing, from Windows SDK  
   Nano Server, debugging  , , 
Windows Assessment and Deployment Kit (ADK)
   URL  
Windows Defender
   installing, on Nano Server  , , , 
   managing, on Nano Server  , , , 

Windows Deployment Services (WDS)
   about  
   Active Directory Domain Services (ADDS),
installing  
   custom Nano Server VHD(X) image, creating  ,
, 
   custom Nano Server WIM image, creating  
   DHCP, installing  
   DNS, installing  
   environment, preparing  , 
   Nano Server, installing with VHD  
   Nano Server, installing with VHD(X)  
   Nano Server, installing with WIM file  
   WDS Role, configuring  , , , , , ,
, 
   WDS Role, installing  , , , , , , ,

Windows EMS
   enabling, in bootloader of Nano Server Os  
   Nano Server VM, troubleshooting  , , ,

   on physical machine  
   PuTTY, used for establishing SSH connection to
iLO IP address  , , 
   used, for performing support administrative tasks 
, 
   using, in virtual machine  , , 
   virtual serial port, enabling  
Windows Failover cluster
   URL  
Windows Management Framework (WMF)  
Windows Management Instrumentation (WMI)  
Windows PowerShell
   Nano Server image, building  , , 
   Nano Server image, customizing  , , 
Windows Remote Management (WinRM)  
Windows SDK
   URL  
Windows Server 2016
   URL, for pricing  
Windows Server App (WSA)  
Windows Server containers
   about  , 
   base container images, installing  , 
   container networking, managing  , , 
   container storage, managing  , 
   converting, to Hyper-V container  , , 
   creating  , , 
   Docker  
   Docker, installing  
   Docker, managing on Nano Server  , ,

   executing, on Nano Server  
   Nano Server image, creating  , 
   Nano Server VM, creating  
   remote PowerShell session, creating  
Windows Server Update Service (WSUS)  ,

Windows System Image Manager (WSIM)
   about  
   reference  
Windows Update
   using, on Nano Server  , , , , ,

WinPE
   bare-metal machine, booting  , 
   bootable USB thumb drive, creating  
   custom WinPE boot image, creating with
PowerShell enabled  , , , 
   deploying, with network  
   deploying, without WDS  
   environment, setting up  , 
   ISO image, creating  
   prerequisites  
X
xNetworking
   URL  

