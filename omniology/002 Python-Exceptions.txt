©2019 MathByte Academy

What are exceptions?
à exceptions are objects
à when an exception is raised
à trigger a special execution propagation workflow
à exception handling
à if current call does not handle exception it is propagated up to caller
à call stack trace is maintained
à documents origin of exception
à every call in the stack 
à they are instances of some class
©2019 MathByte Academy

Call Stack
à call function_1
à calls function_2
à calls function_3
function_1
function_1
function_2
function_1
function_2
function_3
Call Stack
©2019 MathByte Academy

Exception Propagation
function_1
function_2
function_3
exception is raised in function_3
if unhandled, propagates to function_2
if unhandled, propagates to function_1
if unhandled, program terminates
à stack trace will contain information describing this call stack ©2019 MathByte Academy

Exception Handling
exceptions are not necessarily fatal, i.e. do not necessarily result in program termination
à we can handle exceptions as they occur
à do something and let program continue running "normally"
à do something and let original exception propagate
à do something and raise a different exception
à try
à except
à finally
à else
(compound statement)
©2019 MathByte Academy

What are exceptions used for?
à exceptions are not necessarily errors
à indicate some sort of anomalous behavior
à sometimes not even that
consider StopIteration exception raised by iterators
after all we would expect this to happen à not really anomalous!
©2019 MathByte Academy

Two main categories of exceptions
à compilation exceptions
à execution exceptions
(e.g. SyntaxError)
(e.g. ValueError, KeyError, StopIteration)
Python's built-in exception classes use inheritance to form a class hierarchy
base exception for every exception in Python
à BaseException
à but do not inherit from this one
©2019 MathByte Academy

Python's Exception Hierarchy
à see https://docs.python.org/3/library/exceptions.html#bltin-exceptions for full list
BaseException
SystemExit
KeyboardInterrupt
GeneratorExit
Exception
(raised on sys.exit())
(raised on Ctrl-C for example)
(raised when generator or coroutine is closed)
à everything else!
©2019 MathByte Academy

Python's Exception Hierarchy
à most of the time any exception we work with inherits from Exception
direct subclasses of Exception include:
•
ArithmeticError
•
AttributeError
•
LookupError
•
SyntaxError
•
RuntimeError
•
TypeError
•
ValueError
•
FloatingPointError
•
ZeroDivisionError
•
IndexError
•
Key Error
and more…
exception objects are instances of these classes
©2019 MathByte Academy

Python's Exception Hierarchy
when exceptions inherit from other exceptions:
Exception
LookupError
IndexError
an IndexError exception IS-A LookupError exception
a LookupError exception IS-A Exception exception
an IndexError exception IS-A Exception exception
à if we catch a LookupError exception
à it will also catch an IndexError exception
à if we catch an Exception exception
à it will also catch any subclass of Exception
à broad catch – usually bad practice
©2019 MathByte Academy

Basic Exception Handling
the try statement is used to for exception handling
à multi-part statement
à basic:
try:
…
except ValueError:
…
à get a handle to exception object in except clause:
try:
…
except ValueError as ex:
…
à we'll come back to the try statement
©2019 MathByte Academy

Coding
©2019 MathByte Academy

