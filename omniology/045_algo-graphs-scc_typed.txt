Graph	  Primi*ves	  
An	  O(m+n)	  Algorithm	  
for	  Compu*ng	  Strong	  
Components	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Strongly	  Connected	  Components	  
Formal	  Deﬁni*on	  :	  the	  
strongly	  connected	  
components	  (SCCs)	  of	  a	  
directed	  graph	  G	  are	  the	  
equivalence	  classes	  of	  the	  
rela*on	  
u<-­‐>v	  <==>	  there	  exists	  a	  path	  u-­‐>v	  
	  and	  a	  path	  v-­‐>u	  in	  G	  
	  
You	  check	  :	  <-­‐>	  is	  an	  equivalence	   	  
	  
	  rela*on	  

Tim	  Roughgarden	  
Why	  Depth-­‐First	  Search?	  

Tim	  Roughgarden	  
Theorem	  :	  can	  compute	  SCCs	  in	  O(m+n)	  *me.	  
	  
Algorithm	  :	  (given	  directed	  graph	  G)	  
	  
1.  Let	  Grev	  =	  G	  with	  all	  arcs	  reversed	  
2.  Run	  DFS-­‐Loop	  on	  Grev	  
	  Let	  f(v)	  =	  “ﬁnishing	  *me”	  of	  each	  v	  in	  V	  
1.  Run	  DFS-­‐Loop	  on	  G	  
	  processing	  nodes	  in	  decreasing	  order	  of	  ﬁnishing	  *mes	  
[	  SCCs	  =	  nodes	  with	  the	  same	  “leader”	  ]	  
Kosaraju’s	  Two-­‐Pass	  Algorithm	  
Goal	  :	  compute	  “magical	  
ordering”	  of	  nodes	  
Goal	  :	  discover	  the	  SCCs	  
one-­‐by-­‐one	  

Tim	  Roughgarden	  
DFS-­‐Loop	  
DFS-­‐Loop	  (graph	  G)	  
Global	  variable	  t	  =	  0	  
[#	  of	  nodes	  processed	  so	  far]	  
Global	  variable	  s	  =	  NULL	  
[current	  source	  vertex]	  
Assume	  nodes	  labeled	  1	  to	  n	  
For	  i	  =	  n	  down	  to	  1	  
	  	  	  	  	  	  	  	  if	  i	  not	  yet	  explored	  
	  	  	  	  	  	  	  	  
	  s	  :=	  i	  
	  	  	  	  	  	  	  	  
	  DFS(G,i)	  
For	  ﬁnishing	  
*mes	  in	  1st	  
pass	  
For	  leaders	  
in	  2nd	  pass	  
DFS	  (graph	  G,	  node	  i)	  
-­‐-­‐	  mark	  i	  as	  explored	  
-­‐-­‐	  set	  leader(i)	  :=	  node	  s	  
-­‐-­‐	  for	  each	  arc	  (i,j)	  in	  G	  :	  
	  -­‐-­‐	  if	  j	  not	  yet	  explored	  
	  	  	  	  	  	  -­‐-­‐	  DFS(G,j)	  
-­‐-­‐	  t++	  
-­‐-­‐	  set	  f(i)	  :=	  t	  
For	  rest	  of	  
DFS-­‐Loop	  
i’s	  ﬁnishing	  
*me	  

9,8,7,6,5,4,3,2,1	  
1,7,4,9,6,3,8,2,5	  
1,7,9,6,8,2,5,3,4	  
7,3,1,8,2,5,9,4,6	  
Only	  one	  of	  the	  following	  is	  a	  possible	  set	  of	  ﬁnishing	  *mes	  for	  
the	  nodes	  1,2,3,…,9,	  respec*vely,	  when	  the	  DFS-­‐Loop	  subrou*ne	  
is	  executed	  on	  the	  graph	  below.	  	  Which	  is	  it?	  

Example	  (2nd	  Pass)	  
Running	  Time	  :	  	  	  2*DFS	  	  =	  O(m+n)	  
Leader	  =	  9	  
Leader	  =	  6	  
Leader	  =	  4	  

