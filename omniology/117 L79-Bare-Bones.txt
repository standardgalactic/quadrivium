Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
Bare Bones Arduino 
Throughout this course, you have been learning about peripherals like sensors and input/
output devices, as well as techniques for building simple hardware/software systems. 
I thought it would be a good idea to shift our attention brieﬂy to the Arduino itself, and 
examine the minimal hardware that is still useful. The objective is to build a “bare bones” 
Arduino on a breadboard, understand the basic principles under which the fundamental 
components work, and use our new skills to make our our Arduino clones! In a separate 
lecture, I will even show you how to create a professionally made printed circuit board on 
which you can solder the components of your Arduino close, at a fraction of the cost of an 
Arduino Uno. 
Being able to make your own Arduinos is useful from both a cost and practicality 
perspective. Say, for example, that you want to create a monitoring system for your home 
which includes 10 Arduino modules with sensors and some kind of wireless communication 
capability to a base station (also an Arduino). If you use the cheapest oﬃcial Arduino, the 
Uno, you will need at least $300 just for that. The Uno also contains component that you 
don’t need for your project, like the USB interface, the various headers, even the LEDs are 
not really needed (plus they consume power). You could build an Arduino clone with exactly 
the components you need for less than $10. 
Let’s see how. 
The Arduino minimal system 
At the very least, a functional Arduino system needs: 
• The micro-controller IC 
• A 5V power source 
• A clock signal 
That’s about it. The micro-controller comes packaged in a single IC, and we can plug it 
straight in the breadboard. We only have to setup the circuitry for the power source and the 
clock signal. 
Let’s look at the components. 
!
$1

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
Bare bones Arduino components 
These are the parts you will need and the role they play in the system you are building: 
 
Power circuit 
Let’s start from the beginning, the power supply circuit. Note 
that you can actually skip this step if you decide to use a 
breadboard power supply. You can get these boards for 
around 1 dollar, so they don’t add much to the cost, but they 
are bulky.  
Instead, I assemble a power supply by using a 7805 power 
regulator and two 10μF (the “μ” is often written as “u”, they 
mean the same thing). 
The power regulator is a silicon device that takes 
in a wide range of input voltages, and outputs 5V 
plus heat.  
You can see the role of each pin in the diagram on 
the left.  
!
Part
Role
One Atmega 328P
The brain. When you order this part, ensure 
that it is already loaded with the Arduino 
bootloader.
16MHz crystal oscillator
Part of the clock signal circuit
2 x 22 pF capacitors
Part of the clock signal circuit
2 x 10 uF capacitors  
Part of the power supply circuit
One 7805 Voltage regulator
Part of the power supply circuit
One LED
Part of the power supply circuit
One 220Ω resistor
Part of the power supply circuit
One push button
Allows to reset the Atmega
A breadboard and wires
To mount the components
A power supply that can provide at least 9V 
power, or a battery pack with 6 AA batteries 
(my preference)
To provide power to the power circuit
$2

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
And here’s one in real life:  
 
 
!
 
 !
!
!
The capacitors are connected between the In-Common and Out-Common pins, and both 
are electrolytic and polarized, so be careful how you connect them. The pin marked as “-“ 
should be connected to the middle pin of the regulator (common).  
The In-Common capacitor is there to smoothen the voltage that is coming from the external 
power supply (the transformer that you plug into the electrical wall socket). 
The Out-Common capacitor is there to help supply current when there is a spike in 
demand. It’s the same reason we use a 
capacitor in the servo motor lecture. 
In the breadboard schematic, notice how the 
two capacitors have their negative pins 
connected to the common pin of the regulator. 
The ﬁrst two pins of the regulator are 
connected to the ﬁrst two columns of the 
breadboard. This is where you need to connect 
the external power.  
The second and third pins of the regulator are 
connected to the positive and ground rail of 
the breadboard. This is where the Atmega will 
get its power from. 
!
$3
Attach a heat sink if you 
will be driving a large 
load.
IN
OUT,5V
Common
A 10μF capacitor.

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
Add the Atmega and reset button 
The next step is to mount the Atmega IC on the breadboard, connect the power and ground 
to it, and add the reset button. 
Keep the IC pinout diagram handy (this diagram taken from arduino.cc). 
And here is the breadboard diagram: 
$4

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
Plug the IC into the breadboad. Start by connecting pins 7, 8, 20, 21, and 22. Pins 8 and 22 
should go to the ground rail, and the rest to 5V (always conﬁrm with the IC pinout!). 
Next, plug the reset button next the Atmega, on the side with the small depression on its 
case (which signiﬁes pin number 1 on the IC). Connect one pin of the button to pin 1 on the 
IC (reset), and the other to the ground rail via a 10KΩ pull-down resistor. 
Let’s add the clock signal circuit next. 
Clock signal circuit 
The clock circuit is based on a crystal oscillator. It works in tandem with two small ceramic 
capacitors, and the manufacturer speciﬁes their capacitance in the oscillator’s data sheet. 
In most cases, when you buy the crystal, it will come with these capacitors. If your crystal 
didn’t, you can either buy them from eBay (these are very common), or use capacitors with 
a close enough value. The manufacturer’s capacitance value conﬁgure the oscillator to 
produce a clock signal very close to 16MHz. If you use diﬀerent capacitors, your clock will 
be oﬀ. If you are not running a sketch that depends on accurate timing, this should not be a 
big problem. 
Here’s the breadboard schematic with the oscillator and its capacitors added. 
As per the IC pinout schematic, the crystal is connected to pins 9 and 10 (TOSC1 and 
TOSC2). The two capacitors are connected in series.  
$5

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
Add a power LED indicator 
Your barebones Arduino is ready to turn on. A nice feature is the addition of an LED so that 
we have visual conﬁrmation that power is provided. Often, when people build gadgets 
powered by a battery, this LED is left out to reduce current draw (you will save around 
15mA). For now, let’s add it, you can alway remove it later. 
Add an LED via a 220Ω protective resistor directly onto the 5V and GND rails of the 
breadboard, like this: 
!
Test out your creation 
To make sure this newly born Arduino works, let’s run a simple sketch on it. How about the 
blinking LED? 
This breadboard Arduino can’t communicate with your computer because it lacks the USB 
interface. So, the easiest way to ﬂash it with a sketch is to remove the Atmega from the 
breadboard, and plug it into an Arduino Uno (or an Arduino board with an Atmega328p on 
it). Take care not to mix the two Atmegas, the one from the breadboard and the one from 
the Uno! 
$6

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
In the Uno, use a small ﬂat screwdriver to gently lift the IC from its socket. Then pop the 
breadboard Atmega in the socket, make sure it is secure, and plug the Uno to your 
computer. 
Start the Arduino IDE, open the 
Blinking LED sketch and upload it to 
the Arduino. When the upload is 
complete, and you can see the 
build-in LED (the one that is 
connected to pin 13) blinking, 
unplug the Uno from your computer 
and remove the Atmega from it. 
Plug the original Atmega back into 
the Uno’s socket (so you don’t 
forget later) and the breadboard, 
just programmed, Atmega back in 
its breadboard.  
Before applying power, you need to connect an LED to digital pin 13. Have a look at the 
Atmega’s pinout diagram, and you will notice that Arduino digital pin 13 is actually pin 19 on 
the Atmega.  
So, go ahead, plug in an LED with its resistor to pin 19. You now have this circuit: 
$7

Peter Dalmaris
Bare Bones Arduino
Arduino Step by Step
Time to add power to the mix. Connect your battery pack or power supply to the ﬁrst and 
second columns of the breadboard (careful of the polarity!).  
The power indicator LED should be on, and the the Arduino digital pin 13 (Atmega pin 19) 
LED should start blinking! 
LED not blinking? There a few things to check with your multimeter.  
If the power indicator LED is not on, you may have a problem with the battery pack or 
external power supply. Use the multimeter to ensure that these power sources actually 
provide a voltage about 9V.  
There could also be an error in your wiring, so double check that. Measure the voltage in 
the breadboard power rail, it should be 5V or a little less than that. 
Wrap it up 
As you can see, creating your own Arduino is an almost trivial task. The awesome value that 
the Arduino has brought to the world is the bootloader, the libraries and the IDE, which all 
together make prototyping quick and easy. 
In a separate lecture, I’ll show you how to create your own Arduino PCB so that your 
prototypes become more permanent.
$8

