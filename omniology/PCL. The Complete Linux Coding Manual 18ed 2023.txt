QPopercut
www.pclpublications.com
100% INDEPENDENT

The Complete 
Manual Series
Available on ■ i Readlij
The Complete
Android
User Manual
* The Complete 
Black & White 
Photography
The Complete
Build Your 
Own PC
Manual
Learn how to build a new computer
—
The Complete
Internet
Security
Manual
Master security and stay safe online
CAMERAS
The Complete
Canon
Camera Manual
The Complete
* The Complete
Chromebook
User Manual
Master your Chromebook and 
Google's Chrome OS
■I^^FOR ALL COM PUTERS & MOBI LES £ 
The Complete
Google
User Manual
& Python
Manual
. MastefC+-r& Python'1 .. 
tty tn es'Sontial coding guidef 
■fr 
■ .
UPDATED FOR ALL iPAD MODELS
The Complete 
iPad 
&iPadOS^ 
User Manual
Master your iPad and iPadOS 16
The Complete
Home
Networking
Manual
The Complete
Instagram
g User.'
OVER 
460
Essential step-by-step guides to 
mastering Instagram
The Complete
Windows 11
User Manual
The essential step-by-step manual 
to mastering Microsoft's 
Windows 11 operating system
860
* The Complete 
iPhone 
&iOS®r
User Manual
Master your iPhone and iOS 16
For a full list of titles available visit:
www.pclpublications.com

The Complete
Linux
Coding Manual
Linux is everywhere. It powers the Internet as the main operating 
system behind the Web's servers, it powers spacecraft, it's the 
operating system for the fastest supercomputers in the world and it's 
used in smart TVs and mobile devices. Why? Because it's ultra stable, 
lightning fast and completely free of charge.
However, there's more to Linux than simply being a free to use 
operating system. Its unique configuration allows the user to 
customise and personalise the OS into any form they wish. A Linux 
user can change their OS look and feel from one day to the next, 
install thousands of freely available apps and programs and take 
back control of their computer.
Linux is about freedom. Freedom from the walled-garden approach of 
other restrictive operating systems, freedom to choose what you want 
on your computer, freedom to alter it and use it how you please. It's a 
worldwide community of likeminded users, all striving to get the best 
development from this incredible OS.
With this book, you too can become a part of the open community of 
Linux users. The tutorials within these pages will help you get to grips 
with Linux, show you how it works, what you can do with it and how 
you can code with it to take your Linux experience to even greater 
heights. Discover Linux. Discover freedom.
S Papercut
www.pclpublications.com

Contents
Contents
( 6 ) Say Hello to Linux 
X
8 Why Linux?
10 The Best Linux Distributions
12 Equipment You Will Need
14 Desktop Environments
16 Which Distro?
18 Getting Started with Linux
20 Creating a Linux Installer on Windows
22 
Installing Linux on a PC
24 
Installing a Virtual Environment
26 Installing Linux in a Virtual Environment
28) Getting to Know Linux X
30 
Introduction to the Cinnamon Menu
32 
Navigating the Cinnamon Desktop
34 
10 Things to do After Installing Linux Mint
36 
Did you Know...Apollo 11
38 Creating Users
40 Customising the Desktop
42 Becoming Anonymous Online
Using the Terminal
46 
Basics of the Terminal
48 
Update Mint via the Terminal
50 
Install Apps via the Terminal - Part 1
52 
Install Apps via the Terminal - Part 2
54 Did you Know...Linux Kernel 0.01
56 Creating a File Using the Terminal
58 Creating and Removing Directories
60 Fun Things to do in the Terminal
62 More Fun Things to do in the Terminal
64 Linux Tips and Tricks
66 Did you Know...Linux and the Big Bang
68 Creating Bash Scripts- Part 1
70 
Creating Bash Scripts-Part 2
72 
Creating Bash Scripts-Part 3
74 Creating Bash Scripts - Part 4
76 Creating Bash Scripts-Part 5
78 Pi x Linux = The Perfect Combination
80 Command Line Quick Reference
82 
A-Z of Linux Commands
84 Did you Know...Good enough for NASA
86) Python on Linux
88 
Why Python?
90 
How to Set Up Python in Linux
92 Starting Python for the First Time
94 
Your First Code
96 Saving and Executing Your Code
98 Executing Code from the Terminal
100 Did you Know...Space Invaders
Linux Coding & Programming

102 Numbers and Expressions
104 Using Comments
106 Working with Variables
108 User Input
110 Creating Functions
112 Conditions and Loops
114 Python Modules
116 Did you Know...Debugging
118) C++ on Linux 
X
120 Why C++?
122 Your First C++Program
124 Structure of a C++Program
126 Compile and Execute
128 Did you Know...Virus!
130 Using Comments
132 Variables
134 Data Types
136 Strings
138 C++ Maths
140 User Interaction
142 Didyou Know...The Hobbit
144 Common Coding Mistakes
Linux Coding & Programming
5

Index
Say Hello 
to Linux
How did you know so much 
about computers?'
I didn't, it was the first one."
Admiral Crace Hopper (pioneer programmer) 
when interviewed by David Letterman
Linux Coding & Programming

Say Hello to Linux
Why Linux? What is it? Where do I get it? 
Why are there so many different versions 
of it? Most beginners ask these, and many 
more, questions when starting out. It's 
true that Linux is an incredibly versatile 
and powerful operating system but 
where do you start? Thankfully, you can 
find the answers in this section.
There is so much you can do with Linux 
but you need to know where to start; 
we're here to help you out. In this section 
you can learn what Linux is, what a distro 
is and what a desktop environment is. 
You can also begin to explore how Linux 
works and how it can work for you.
8 
Why Linux?
10 The Best Linux Distributions
12 
Equipment You Will Need
14 Desktop Environments
16 Which Distro?
Linux Coding & Programming

Say Hello to Linux
Why Linux?
For many of its users, Linux means freedom. Freedom from the walled garden 
approach of other operating systems, freedom to change and use the OS as you please 
and freedom from any form of licensing or payment. There's a lot more to Linux than 
you may think though.
FREE AND OPEN
Linux is a Fantastic Fit For those who want something diFFerent. The eFFiciency oF the system, the availability oF applications and 
stability are just a Few good reasons.
The First thing you need to know is that there is no such operating 
system called Linux. Linux is in fact the operating system kernel, the 
core component of an OS. When talking about Linux what we, and 
others, are referring to are one of the many distributions, or distros, 
that use the Linux kernel. No doubt you've heard of at least one of 
the current popular distros: Ubuntu, Linux Mint, Fedora, openSUSE, 
Debian, Raspbian, the list goes on. Each one of these distros offer 
something a little different for the user. While each has the Linux 
kernel at its core, they provide the user with a different looking 
desktop environment, different preloaded applications, different 
ways in which to update the system and get more apps installed 
and a slightly different look and feel throughout the entire system. 
However, at the centre lies Linux, which is why we say Linux.
Linux works considerably differently to Windows or macOS. It’s free 
fora start: free to download, free to install on as many computers 
as you like, free to use for an unlimited amount of time and free to 
upgrade and extend with, equally, free programsand applications. 
This free to use element is one of the biggest draws for the 
developer. While a Windows license can cost up to £100, and a Mac 
considerably more, a user, be they a developer, gamer or someone 
who wants to put an older computer to use, can quickly download a 
distro and get to work in a matter of minutes.
Alongside the free to use aspect comes a level of freedom to 
customise and mould the system to your own uses. Each of the 
available distros available on the Internet have a certain 'spin',
Linux is a great operating system on which to start coding.
Linux Coding & Programming

There are thousands of free packages available 
for programmers under Linux.
Each distro offers something unique to the user 
but all have Linux at the core.
in that some offer increased security, a fancy looking desktop, 
a gaming specific spin, or something directed toward students. 
This extensibility makes Linux a more desirable platform to use, 
as you can quickly mould the system into a development base, 
including many different kinds of IDEs for the likes of Python, web 
development, C++, Java and so on; or create a base for online 
anonymity, perhaps as a Minecraft server, media centre and 
much more.
Another remarkable advantage for those looking to learn how 
to code, is that Linux comes with most of the popular coding 
environments built in. Both Python and C++ are preinstalled in a 
high percentage of Linux distros available, which means you can 
start to program almost as soon as you install the system and boot it 
up for the first time.
Generally speaking, Linux doesn't take upas many system resources 
as Windows or macOS; by system resources we mean memory, hard 
drive space and CPU load. The Linux code has been streamlined 
and is free from third-party 'bloatware' which hogs those systems 
resources. A more efficient system of course means more available 
resources for the coding and testing environment and the programs 
you eventually create. Less use of resources also means you can 
use Linux on older hardware that would normally struggle or even 
refuse to run the latest versions of Windows or macOS; so rather than 
throwing away an old computer, it can be reused with a Linux distro.
It's not all about C++, Python or any of the other more popular 
programming languages though. Using the command line of 
Linux, also called the Terminal, you're able to create Shell scripts, 
which are programs that are designed to run from the command 
line and made up of scripting languages. They are used mainly to 
automate tasks or offer the user some form of input and output for 
a certain operation.
Finally, although there are many more advantages we can list, there 
are thousands and thousands of free programs and apps available 
that cover nearly every aspect of computing. Known as packages, 
there are (at the time of writing) over 8,700 specific programming 
applications just on Linux Mint alone and an incredible 62,000+ 
overall packages catering for everything from Amateur Radio to 
WWW tools.
Linux then, is a great resource and environment for programming 
in. It's perfectly suited for developers and is continually improving 
and evolving. If you’re serious about getting into coding, oryou just 
want to try something new, give Linux a try and see how it works 
for you.
A Linux programming environment can be as simple or as complex as you need it to be.
MdchineFunclion *HF
while (IMBB->succ empty!))
H ledHeigirig. erase! HBB);
void BranchFolder::Re«ovoDeadBlock(HachineBasicBlock "MSB) { 
assetl(MB8-»pied empty!) "HBB must be dead!');
OEBUGIdbgs!I « "XnRemoving MBB: ' « 'HBB);
BranchFolding.cpp + (~/dovelopmont/projocts/llvm/lib/CodoGen) - YAVIDE
l/c/GUtetadata.cpp > l/c/codeben.cpp > 1/c/LlveKanqefcdit.cpp > 1/F/FuzzerMutate.cpp > l/L/Liburiver.cpp > l/c/Machineinstr.cpp ...>
BrancnFoiderPass
5cope*>qetNonLexical8lockFile5cope();
BuilliiiGCs.cpp 
CalcSpiI(Weight
■eturn I !- InlinedLexicalScopeMap.endlI ? &I->second : nuKptr:
I Functions)
Cntica(AntiDepBreaker.h
HLI »n
Opt im xetnpOof xRl nrk I
RaplacoTaHWithR
join -HachlneLooplntoi1
KFlleScopel):
Machineloop "Otdloo
roptevelioop
IntrlnslcLowerlnq.cpp
terator end(>
runonHachlneFunction (••
HBFW.appei
Itunctionsl
AggressiveAntxDepBreaker. 
Allocationorder.cpp
BranchFolderPass-' I 
Ineabersl
ID
pr-.ntBiockFreqi 
setBlockHeq i
ExpandlSelPseudos.cpp 
ExpandPostRAPseudos.cpp
De let. IDeddLdlies. cpp 
DFAPacketizer.cpp 
OwarfEHPrcparc.cpp 
Ea! lyl TCunver siuti. cpp 
EdgeBundles.cpp
.— changcloopFor 
f void chanqeTopieve
HLoca (Scope "Scope ■ OL->getScope!), 
it ((Scope)
TailHergeBlocks-u hint ’ 
TryTat 1 MergoRI -wks' m.„ -1 
sctCoeraontoilrdgcWeight:
Analysis.cpp 
AntiDepBreaker.h 
AtomicExpandPass.cpp 
BasicTargetTransfonsI 
BranchFolding.cpp
CallingConvlower.cpp
CodeGen.cpp
fifMet arista, rpp 
GGMctadataPrintcr.cpp 
GCRootLowerlng.cpp 
firstrategy.rpp 
GlobalHcrgc.cpp 
IfConverslon.cpp 
Tmpl1citNul1 Checks.cpp 
InlincSpillcr.cpp 
Interferencecache.cpp
actScope(Scope): 
nlinedScopotScope, IA);
BranchFoldertbool defaatt£
CoeputcSjricT.il (s' .■ - >q - J 
C f ealeCowcit’ai lOril vBljck' 
HoistComontode'H.ch.n.iui
OptinizeBlock'Ha 
OptiniccB'enchcs
switch (FlagEnableTailMerge) { 
case cl:;BOU UNSET: EnableTailHerge 
case cl::B0U_TRUE: EnableTailHerge - true: break 
case cl::BOU FALSE: EnableTailHerge - false; bre;
MF->erase(MBB);
FuncletHenbership.eraselMBB): 
if (HLI)
HLI-
Linux Coding & Programming

Say Hello to Linux
The Best Linux 
Distributions
There are lots of versions of Linux available, known as Distributions. Each has a 
different ethos and approach. Here are five great distributions to try and where you 
can get them.
GOING LINUX
The installation process for most distributions is similar. You download a disk image from the website and burn it to an optical disk or 
create a USB Flash Drive installer. Just be careful to get the right distribution for your hardware and read the instructions carefully.
LINUX MINT
By far the most popular Linux distro (distribution) is Linux Mint. 
Mint began life back in 2006, as an alternative to the then most 
popular distro, Ubuntu. Although based on Ubuntu's Long Term 
Support build, Linux Mint took a different direction and offered 
the user a better overall experience.
Linux Mint has three main desktop versions available with 
each new version of the core OS it releases. This may sound 
confusing at first but it's quite simple. Currently, Linux Mint 
uses the Cinnamon Desktop Environment as its flagship model; 
there's MATE and Xfce models available too.
Cinnamon is a graphically rich desktop environment, MATE uses 
less fancy graphics, and is more stable on a wider variety of 
desktop systems, and Xfce is an extremely streamlined desktop 
environment that's built for speed and ultimate stability.
Throughout this title we’ll be using the Cinnamon version; 
however, you can try out any of the other desktop environments 
as you wish. In fact, it's recommended that you do spend some 
time trying different environments, and even different distros, 
to see which suits you and your computer best.
www.linuxmint.com
The second most popular distro available is Ubuntu, which 
is an ancient African word meaning 'humanity to others'. 
Ubuntu's popularity has fluctuated over its fourteen year life. 
At one time, it was easily the most used Linux-based operating 
system in the world but some wrong choices along the way 
with regards to its presentation, and some unfavourable, 
controversial elements involving privacy, sadly saw it topple 
from the number one spot.
That said, Ubuntu has since made amends and is slowing 
crawling its way back up the Linux leader board. The latest 
versions of the OS use the GNOME 3 desktop environment, an 
impressive environment, although it can be a little confusing 
for former Windows users and is a little heavy on system 
resources, especially if you're planning on installing iton an 
older computer.
Ubuntu, for all its faults, is a good Linux distro to start 
experimenting with. It's a clean interface, easy to use and install 
and offers the user a complete Linux experience.
www.ubuntu.com
Linux Coding & Programming

The Best Linux Distributions
ARCH
Arch is one of longest running Linux 
distributions and forms the basis of 
many other versions of Linux. Why install 
Mint or Ubuntu when you can install 
Arch? Many users do exactly that but it's 
not ideal for beginners. Ubuntu and Mint 
both offer an easier installation path and 
come with software packages to help 
you get started.
Arch on the other hand, is a more
Arch is a distro for when you're more 
experienced with Linux. You start with 
nothing but the command line and from 
there you have to manually partition your 
hard drive, set where the installation 
files go, create a user, set the OS locale 
and finally install a desktop environment 
along with the apps you want.
The advantage though, for all this hard 
work, is a distro that you have created. This
'bare bones’ affair. Arch is committed to free software and 
its repositories contain over 50,000 apps to install, including 
multiple different Desktop environments, and use as you would 
with any other distro.
means your Arch distro won’t come with all the unnecessary filesand 
apps that others have preinstalled; it’s custom made for you, by you.
wwwarchlinux.org
RASPBERRY PI DESKTOP
OPENSUSE
No doubt you've heard of the Raspberry Pi. It's hard not to have, 
as this remarkable, tiny computer has taken the technology 
world by storm for the last six years since it was introduced.
There are several aspects to the Raspberry Pi that make it 
such a sought after piece of the computing world. For one 
it's cheap, costing around £25 for what is essentially a fully 
working computer. It's small, measuring not much bigger than 
a credit card. You can build electronics with it, using a fully 
programmable interface; and it comes with Raspbian, its own 
custom-made, Debian-based operating system that includes an 
office suite alongside many different programming languages 
and educational resources.
Raspbian is exclusive to the Pi hardware, since the Raspberry 
Pi uses an ARM processor to power it. However, the Raspberry 
Pi Foundation has since released a PC version of Raspbian: 
Raspberry Pi Desktop.
Most Linux distributions fall into two camps. There are ones 
with the latest features and technology like Ubuntu and 
Mint and those with few new features but rock solid reliability, 
like Debian.
Just like the Pi version, Raspberry Pi Desktop comes with the 
all the coding, educational and other apps you will ever need. 
It's quick, stable and works superbly. If you're interested in 
stretching your Linux experience, then this is certainly one of 
the top distros to consider.
www.raspberrypi.org/downloads/raspberry-pi-desktop
Meanwhile, openSUSE attempts to cover both bases. 
OpenSUSE Leap is the rock solid system. It's developed openly 
by a community along with SUSE employees, who develop 
an enterprise-level operating system, SUSE; this powers the 
London Stock Exchange amongst other things. It is designed 
for mission critical environments where 'there is no scope 
for instability'. If you find all that too sensible, openSUSE 
Tumbleweed is a rolling release with all the latest features, and 
the occasional crash.
openSUSE is a highly respected Linux distribution and many 
of its core contributors work on the Linux Kernel, LibreOffice, 
Gnome and other key Linux areas. In short, openSUSE is where 
you'll find the pros hanging out.
www.openSUSE.org
Linux Coding & Programming

Say Hello to Linux
Equipment You 
Will Need
The system requirements for successfully installing Linux Mint on to a PC are 
surprisingly low, so even a computer that's several years old will happily run this distro. 
However, it's worth checking you have everything in place before proceeding.
MINTY INGREDIENTS
Before we start working our way through this book, here's what you need to install and run Linux Mint. You have several 
choices available, so take your time and see which works best for you.
SYSTEM REQUIREMENTS
USB INSTALLATION
The minimum system requirements for Linux Mint are 
as follows:
CPU-700MHz
RAM/Memory-512MB
Hard Drive space - 9GB (20GB recommended)
Display-1024 x 768 resolution
Obviously the better the system you have, the better the 
experience will be and quicker too.
You can install Linux Mint onto your computer via USB or DVD. 
We look into each a little later on but if you're already familiar 
with the process, or thinking of USB and just gathering the 
hardware you need, then you’re going to 
need a minimum 4GB USB flash drive 
to store the Linux Mint ISO.
DVD INSTALLATION
DVD installation of 
Linux Mint simply 
requires a blank 
DVD-R disc. Of 
course, you also 
need an optical 
drive (a DVD Writer 
drive) before you're 
able to transfer or 
burn the ISO image 
to the disc.
Linux Coding & Programming

Equipment You Will Need
VIRTUAL ENVIRONMENT
Installation to a virtual environment is a favourite method of testing and using Linux distros. Linux Mint works exceedingly well 
when used in a virtual environment but more on that later. There are many different virtual environment apps available; however, 
VirtualBox, from Oracle, is one of the easiest to into. You can find the latest version atwww.virtualbox.org.
^/VirtualBox
MAC HARDWARE
It goes without saying really, that an Internet connection is vital for 
making sure that Linux Mint is up to date with the latest updates and 
patches, as well as the installation of further software. Although you 
don't need an Internet connection to use Linux Mint, you'll miss out on 
a world of free software available for the distro.
INTERNET CONNECTION
MacBook Pro
Although Linux Mint can be installed 
onto a Mac, there's a school of 
thought that recommends Mac 
owners use a virtual environment, 
such asVirtualbox or Parallels; 
and why not, macOS is already a 
splendid operating system. If you're 
wanting to breathe new life into an 
older Mac, make sure it's an Intel 
CPU model and not the Power PC 
models. Beware though, it's not as 
pain free as installing on to a PC.
Linux Coding & Programming

Say Hello to Linux
Desktop Environments
Linux Mint comes in several different versions, or flavours: Cinnamon, MATE and Xfce; 
there are 32-bit and 64-bit versions of these too. What does it all mean though and 
which version should you choose for your installation?
WHICH MINT?
A Desktop Environment is the graphical interface which you use to interact with the core Linux system. Just as the graphical 
desktop for Windows 10 is also called Fluent Design.
Linux Mint offers the user a choice of versions of the distro: 
Cinnamon, MATE and Xfce. While that may sound a little confusing 
for the newcomer, essentially each of the versions available contains 
the same core Linux structure and kernel, the kernel is the core of 
the operating system, that handles all the instructions between the 
software and hardware.
Each version is simply a different desktop environment, the 
Graphical User Interface (GUI) that you use to interact with the 
operating system. Each of the desktop environments uses different 
apps to access or use the system, such as the file manager to browse 
the operating system's file structure or the way it launches other 
apps. Again though, the core available productivity, video and 
graphic suites are the same, and function in the same way.
Why bother then with a different desktop environment? Simply put, it's 
down to personal taste. Some users prefer MATE, as MATE is a fork of 
the classic GNOME 2 environment and is a little more menu-centric 
and performs well on older computers. Others prefer Cinnamon, which 
is a more modern environment that works better on recent hardware 
and features some cutting edge desktop code. Xfce, on the other 
hand, is a lightweight desktop environment that works well on older 
hardware due to its extremely low use of the available system resources.
In short, Cinnamon is the flagship desktop environment for Linux 
Mint. MATE is more compatible with a wider variety of hardware. 
Where Windows, for example, only offers one desktop environment 
to work in, Linux offers many. Linux Mint has therefore opted to 
bring the user a wealth of choice.
Linux Coding & Programming

Desktop Environments
A DASH OF CINNAMON
Cinnamon has many benefits beyond its look and feel, although they are important factors. Here, we outline a couple of
features to help you decide if it's the DE for you.
FAB FEATURE 1
It performs excellently on more modern systems but is a lot more 
stable than it used to be, and not quite the resource hog it once 
was. Therefore, don't be put off Cinnamon if you're using an older 
computer to install and test Linux Mint.
FAB FEATURE 2
Cinnamon features configurable Hot Corners, where each corner of 
the desktop can be clicked to perform a certain task, such as display 
the Workspaces, Show all Windows or Run a Command. The Hot 
Corners are an excellent way to switch between different views and 
help make the desktop a more efficient environment.
BEST MATE
MATE is a simple to use and intuitive DE that's fast and stable. In comparison to Cinnamon it looks a little antiquated but that's 
only on the surface. There's plenty to like with MATE.
FAB FEATURE 1
MATE is an excellent desktop environment for older computers. It 
works better with a larger number of hardware components that 
Cinnamon generally does but is also just as capable of delivering a 
great looking desktop as well as advanced customisations.
FAB FEATURE 2
Due to its highly configurable nature, MATE can be customised to a 
fine degree. There are plenty of options available to the user who 
demands a little more from theirdesktop environment, including 
Compiz Settings, where you're able to configure all manner of 
desktop effects, even a 3D desktop cube.
CHOLESTEROL FREE DESKTOP
Xfce started life as the Common Desktop Environment (CDE) in 1996. Since then it's changed name a few times and is now 
simply Xfce, with the nickname ‘Cholesterol Free Desktop Environment'.
FAB FEATURE 1
Xfce really is a quick desktop and brings out the best in Linux as a 
fast operating system. In fact, it's taken us to this point from the 
top of the page to install it onto a new computer; a few hundred 
words written and we're using a brand new OS. Not bad.
FAB FEATURE 2
Just because it's quick and lightweight doesn't mean Linux Mint 
Xfce isn’t a complete desktop operating system. Just like the other 
environments on offer, you get the latest Firefox, Libreoffice, VLC, 
Gimp, chat apps and even a bit torrent client.
Linux Coding & Programming

Say Hello to Linux
Which Distro?
Up to now we've looked mainly at Linux Mint but there are other Linux distributions 
out there to try. In truth there are thousands of Linux distros available to download 
and install, so which one should you decide on to use?
DISTRO HOPPING
Distro hopping is a term used by the community for people who never 
stick to a single distribution. Instead, they hop from one to the other 
and back again, testing each, using them, then moving on to another 
ora newly released distro.
There's nothing wrong with distro hopping, as it's a good way to get to 
grips with what's out there and discover the elements of one distro 
over another that may or may not appeal to your tastes. The problem 
of course is which one do you use overall?
While distro hopping is a good thing, it’s not exactly a stable way to 
enjoy Linux and get the most from it. We're not saying you should stick 
to one distro and never look elsewhere, as you would be missing a lot 
of great content out there, but instead we recommend you find a 
handful and slowly progress through them based on your increasing 
Linux skills.
For example, Linux Mint is an ideal starting place. It's an easy to install 
and use distro, has all the software you would normally use on a 
day-to-day basis already installed out-of-the-box and gently eases you 
into the unique world of Linux and how it works and performs.
Ubuntu offers much the same experience but it does this in a slightly 
different way. There's generally less preinstalled with Ubuntu than 
with Linux Mint, so you would need to manually install it yourself. 
Another point worth considering is the sheer volume of content and 
help pages dedicated to Ubuntu users when using Linux. If you get 
stuck, you're never too far from a solution to the problem.
Moving on, as you begin to grow more confident with Linux, you may 
test out the likes of openSUSE, Fedora or Debian. These are all 
excellent distros and each offers the user a slightly different 
perspective on how the system runs. Some are more demanding, in 
terms of Linux skills, than others, but essentially they each have some 
valuable lessons to learn for the user.
You may find yourself moving to a particular distro because it offers 
something radically different from the norm. Tails Linux, for example, 
is a distro that's designed purely for online anonymity. It contains 
complex and military grade encryption tools as well as toolsand 
browsers designed to help you browse the web without ever being 
detected, traced or monitored. Kali Linux is designed for security 
professionalsand contains many different kinds of ethical hacking
0K/1024M]
GBOFH 
Antihat Guest33764 MaxxRamm
PID USER 
PRI 
HI VIRT 
RES 
SHR S CPUX MEMX
880 menog 
20 
0 2350H 416M 
189M S 0.0 10.8
876 menog 
20 
0 2350M 
416M 
109M S 0.0 10.8
875 menog 
20 
0 2350M 416M 
109M S 0.0 10.8
862 menog 
21 
1 2350M 416M 
109M S 0.0 10.8
861 menog 
20 
0 2350M 416M 
109M S 0.0 10.8
850 menog 
20 
0 2350M 416M 
109M S 0.0 10.8
847 menog 
20 
0 2350M 416M 
109M S 0.0 10.8
846 menog 
20 
0 1653M 
184M 86564 S 1.9 4.8
883 menog 
20 
0 1653M 
184H 86564 S 0.0 4.8
870 menog 
20 
0 1653M 
184M 86564 S 0.0 4.8
869 menog 
20 
0 1653M 
184M 86564 S 0.0 4.8
FlHelp F2Setup F3SearchF4FilterF5SortedF6CollapF7Hice
TIME
*
 
0:00.00
0:00.08
0:60.00
0:00.00
- Zusr/lib/firefox/firefox
- Zusr/lib/firefox/firefox
- Zusr/lib/firefox/firefox
- /usr/lib/firefox/firefox
- /usr/lib/firefox/firefox
- /usr/lib/firefox/firefox
- /usr/lib/firefox/firefox
- /usr/lib/firefox/plugin-container -greom
Gguapo 
Beowulf
Osatan 
catface
♦Cogi tabundus
♦evilbot
♦Meow 
__desu__ 
Abyss 
ack 
an0ndawg_
Guest8563 
menog
Hex 
mickers
ColMustard 
Hydra 
MoarLeax
crazy 
Klaatu 
moonrocks
dafuq_ 
kod 
Hr.Snowman
DangerM 
kosmos 
mushi
Diablo 
kullen 
nitewGlf
Dzl 
Laris 
nullsign
fourteen 
lazarus 
oftenB34gl3
-FSHice ♦FGKill
I— /usr/lib/firefox/plugin-container -gr 
L- /usr/lib/firefox/plugin-container -gr 
|— /usr/lib/firefox/plugin-container -gr 
FIGQuit
Irssi: 
■ 
: Total of 68 nicks 5 ops, 0 halfops,
Channel Sr created Thu Feb 19 02:14:01 2015
prap 
r0073d 
ranbo2 
S01dierF8rever 
scriptkiddolan 
Semtex 
someone25572 
storm 
target.
taru
3 voices, 60 normal
Typhon 
U0d4 
uze 
VladRex 
xAcex 
zippy
MOC [play] - ScHoolboy Q - Setbacks (Full Mixtape)-p1o iM BiXQ.mp3
: Irssi: Join to ■ was synced in 2 secs
: HEROP? webircGAN-ph2.d5s.Irlkto.IP 
Ihackers
: Beowulf BeowulfGAH-108.jhd.If3eba.IP
: ....hie zombieGAN-7i5.t2g.8evj6k.IP
: Enlgmls7 klr40AN-j95.r0o.cmptnf.IP 
Ithackers
H /home /menog /Music |-
-jPlayl istj-
ScHoolboy 0 - Setbacks (Full Mixtape)-plo_i
Enlgmls7 hi guys
Enlgmls7 anyone can explain me how i can write a malware?
0 guapo hi 
menog hello!
0 guapo what’S a malware?
(28:69; (menog(>Iirw)3 (6:anonops532vcpz6z/#hackers(‘Cnrtz)l
Hhackers Q
menog@nilzomania:~
tmenogGniIzomania "1$ screenfetch
> ScHoolboy Q - Setbacks (Full Mixtape)-plo_iM_BiXQ.mp3 
01:23 65:46 (67:091 48kHz 125kbps (STEREO!
(NEXT]
001:07:09H
menog@nilzomania:-
menogGniIzomania
menog 
Desktop
-♦oooooo^: 
‘/:-:++oooo>:
Desktop
0 MptU
’ /♦♦♦OOOOOOOOOOOOO/' , 
./000S5SS0
*
*05555550+'  
.oossssso-'‘'/OSSSSSS’
menogftn i1zoman i a
OS: Arch Linux
Kernel: X86.64 Linux 4.18.4-1-ARCH
Uptime: 17m
Packages: 481
Shell: bash 4.4.12
Resolution: 1366x768
UM: i3
CPU: Intel Celeron 1087U 0 2x 1.5GHz (Se.O’CI
GPU: intel
RAH 589MiB / 3842MiB
xresources.back
-05555550.
/0S5SSSSSS/ 
/ossssso+Z:-
tmenogGniIzomania ~J$ scrot /home/menog/Pictures/m.png
Linux Coding & Programming

Q Which Distro?
tools preinstalled, that a user can run for penetration testing against 
their network. There was once even a Hannah Montana Linux 
distribution but the less we talk about that the better. The point being, 
there's a distro out there for you.
Needless to say, once you've mastered Linux to a relatively high degree, 
probably a power user ability, then you will want to expand your skills 
and begin to build your own Linux distro based on Arch, Debian or one 
of the many other distros available. Doing so involves a lot of command 
line knowledge, as well as knowledge on how the Linux system works 
and interacts with the hardware in the computer. You will need to 
partition your own hard drive, install a desktop environment and 
eventually install the appsand programs you want. Doing so takes 
time and again there area lot of skills you're going to need to learn.
Eventually you can consider yourself a technical Linux user but never 
consider yourself an expert, after all we're always learning something 
new. You can build your own distro from scratch, help other Linux 
users out with problems, maybe even contribute to the improvement 
of a distro during its testing phase or build. Where next then?
Oddly enough, most higher-end technical users find themselves 
back at square one, using a distro like Linux Mint. The main reason is 
usually because it's an easy option, and it's a stable environment. 
Just because you know the system inside and out, doesn't mean 
you always want to be fixing potential issues. Most of us would 
prefer the easy life, especially where technology is concerned, so 
the logical choice would be to choose a distro that's simple, yet 
still powerful enough to do everything you want it to do, hence 
Linux Mint.
However, in the end, if s purely down to choice, your own personal 
choice. You may find that after going through the tutorials in this title 
you don't like Linux Mint or the Cinnamon desktop. Fine, you may 
prefer Ubuntu, Debian or openSUSE: that’s the beauty of Linux. The 
freedom to change whatyou want, to distro hop from one to another 
without being penalised by cost or lack of access.
The answer to the question, which distro is: any which one you like! It 
can be as complex or easy as you need it to be, as long as it does what 
you want it to do, then if s perfect.
Linux Coding & Programming

; Index J
Getting Started 
with Linux
"In real open source, you have the right to 
control your own destiny."
-Linus Torvalds (developer of the Linux kernel)
Linux Coding & Programming

Getting Started with Linux
It's all fine and well talking about how 
good Linux is but how do you get it on 
your computer? Installing Linux is 
remarkably simple but there are several 
options available to you. This section 
looks into how you can download the 
Linux ISO, install it on a PC as your main 
operating system and even how to install 
a virtual environment.
With a virtual environment you can run 
Linux while still using your main operating 
system, be that Windows or macOS. 
Intrigued? Read on and find out more.
20 Creating a Linux Installer on Windows
22 
Installing Linux on a PC
24 
Installing a Virtual Environment
26 Installing Linux in a Virtual Environment
Linux Coding & Programming

Getting Started with Linux
Creating a Linux
Installer on Windows
You need to transfer the downloaded Linux ISO to either a DVD ora USB key before 
being able to install it onto a computer. This will be a live environment, which allows 
you to test the OS prior to installation, but first you need to create the bootable media.
DVD BOOTABLE MEDIA
We're using a Windows 10 PC here to transfer the ISO to a DVD. If you're using a version of Windows from 7 onward the 
process is extremely easy.
STEP1 
a
First locate the ISO image of Linux you've already 
downloaded. You can usually find it in the
Downloads folder in Windows 7, 8.1 and 10 computers, unless you 
specified a different location when saving it.
Name
Quick access
J linuxmint-19.1-cinnamon-64bit
Dropbox (Team BDM)
On eDrive
□ This PC
(5 CD Drive (E) Hi Suite
Network
STEP 3
Right-click the Linux ISO and from the menu select 
Burn Disc Image. Depending on the speed of the PC, 
it may take a few seconds before anything happens. Don't worry too 
much, unless it takes more than a minute, in which case it might be 
worth restarting your PC and trying again. With luck, the Windows 
Disc Image Burner should launch.
-cinnamon-64bit
Mount
Burn disc image
□ Scan with Windows Defender.., 
lr? Share
Open with
|2 Open with WinRAR 
Add to archive...
STEP 2
Next insert a recordable DVD disc into your 
computer's optical drive. After a few seconds, while 
the disc is read, Windows displays a pop-up message asking you 
what to do with the newly inserted disc. Ignore this, as we're going 
to use the built-in image burning function.
STEP 4
With the Windows Disc Image Burner dialogue box 
open, click on the 'Verify disc after burning' tick 
box, then the Burn button. The process should take a few minutes, 
depending on the speed of your PC's optical drive. Once it's 
complete it runs through the verification stage and when done the 
optical drive should auto-eject the disc for you.
Windows Disc Image Burner 
X
Disc image file: linuxmint-19.1-cinnamon-64bit.iso
Disc burner:
Status
Burning disc image to recordable disc...
Linux Coding & Programming

Creating a Linux Installer on Windows
USB BOOTABLE MEDIA
USB media is faster than a DVD and often more convenient, as most modern PCs don't have an optical drive installed. The 
process of transferring the image is easy but you need a third-party app first and a USB flash drive of 4GB or more.
STEP1
First open 
up a web 
browser and go to www. 
rufus.akeo.ie/. Scroll 
down the page a little and 
you come to a Download 
heading, under which 
is the latest version of 
Rufus. Left click the link to 
start the download.
0 Rufus 3.0.1304 
- 
X
Drive Properties -----------------------------------
Device
Ubuntu 18.04 ITS amd64 (G:) [8GB1
Boot selection
ubuntu-18.04-desktop-amd64.iso ~v| (7) |~ SELECT
Partition scheme 
Target system
MBR 
_____ vj BI0S or UEFI 
v
v Show advanced drive properties
Format Options ------------------------------------
Volume label
[ Ubuntu 18.04 LTS amd64 ~
File system 
C luster size
FAT32 (Default) 
4096 bytes (Default) v
v Show advanced format options
Status -------------------------------------------------
STEP 4
READY
When you're ready, click on the Start button at the 
bottom of the Rufus app. This may open up another 
dialogue box asking you to download and use a new version of 
SysLinux. SysLinux is a selection of boot loaders, used to allow a 
modern PC to access and boot from a USB flash drive. It is necessary, 
so if asked click on 'Yes' to continue.
This image uses Syslinux 6.03/20151222 but this application only 
includes the installation files for Syslinux 6.03/2014-10-06.
As new versions of Syslinux are not compatible with one another, and it 
wouldn't be possible for Rufus to include them all, two additional files 
must be downloaded from the Internet ('Idlinux.sys' and 'Idlinux.bss'): 
- Select ‘Yes' to connect to the Internet and download these files 
- Select 'No' to cancel the operation
Note: The files will be downloaded in the current application directory 
and will be reused automatically if present.
1 device found
| START ] CLOSE
Yes 
No
STEP 2
Double­
click 
the downloaded Rufus 
executable and click Yes 
to the Windows security 
question and Yes to 
checking for updates. 
With Rufus launched 
it should have already 
identified your inserted 
USB flash drive; if not, just 
remove and reinsert.
Rufus 3.4.1430 
- 
X
Drive Properties ------------------------------------
Linux Mint 19.1 Cinnamon 64-bit (F:) [4.1GB]
Boot selection
Disk or ISO image (Please select) 
v j @ I SELECT
Partition scheme 
Target system
MBR 
BIOS (or UEFI-CSM)
v Show advanced drive properties
Format Options -------------------------------------
Volume label
Linux Mint 19.1 Cinnamon 64-bit
File system 
Cluster size
FAT32 
4096 bytes (Default)
v Show advanced format options
Status ---------------------------------------------------
READY
STEP 5
a
The next step asks which image mode you want 
the Linux ISO to be written to the USB flash drive 
in. Both methods work for different situations but generally, the 
recommended ISO Image Mode is the more popular. Make sure this 
mode is preselected and click OK to continue, followed by OK again 
to confirm the action.
STEP 3
© Q S ffl
I device found
ISOHybrid image detected
zjjRfc, The image you have selected is an 'ISOHybrid' image. This means it can be 
written either in ISO Image (file copy) mode or DD Image (disk image) mode. 
Rufus recommends using ISO Image mode, so that you always have full 
access to the drive after writing it.
However, if you encounter issues during boot, you can try writing this image 
again in DD Image mode.
Please select the mode that you want to use to write this image:
(•) Write in ISO Image mode (Recommended)
O Write in DD Image mode
OK 
Cancel
At first glance the Rufus interface can look a little 
confusing but don't worry, it's really quite simple. 
To begin with, click on the SELECT button next to the 'Disk or ISO 
Image (Please select)’ pull-down menu. This launches a Windows 
Explorer window where you can locate and select the Linux ISO.
STEP 6
A
The Linux 
ISO is now 
transferred to the USB 
flash drive. The process 
shouldn't take too long, 
again depending on the 
speed of the USB device 
and the PC. You may find 
Rufus auto-opens the USB 
drive in Windows Explorer 
during the process; don't 
worry you can minimise or 
close it if you want. When 
the process is complete, 
click on the Close button.
7 Rufus 3.4.1430 
- 
X
Drive Properties ------------------------------------
Linux Mint 19.1 Cinnamon 64-bit (F:) [4.1GB]
Boot selection
linuxmint-19.1-cinnamon-64bit.iso 
(•/) SELECT
Partition scheme 
Target system
MBR 
- BIOS or UEFI 
vj
v Show advanced drive properties
Format Options -------------------------------------
Volume label
| Linux Mint 19.1 Cinnamon 64-bit
File system 
Cluster size
FAT32 
v| 4096 bytes (Default) vl
v Show advanced format options
Status ---------------------------------------------------
READY
© © S H 
| START ] CLOSE
Jsing image: linuxmint-19.1-cinnamon-64bit.iso
Linux Coding & Programming

Getting Started with Linux
Installing Linux on a PC
Most Linux distros come as a Live Environment. This means you can boot into an actual, 
fully-working distro straight from the DVD or USB that you just created. Let's see how 
that works and how you go about installing Linux from there.
UEFI BIOS
The Unified Extensible Firmware Interface (UEFI) is used to identify hardware and protect a PC during its boot-up process. It 
replaces the traditional BIOS but can cause issues when installing Linux.
STEP1
Insert your DVD or USB flash drive into your PC and, 
if you haven't already, shutdown Windows. In this 
instance we're using the USB boot media but the process is virtually 
identical. Start the PC and when prompted press the appropriate 
keys to enter the BIOS orSETUP, which could for example be: F2, 
Del or even F12.
STEP 3
Ji
With UEFI turned to Legacy mode, there are now 
two ways of booting into the Live Environment. The 
first is via the BIOS you're already in. Locate the Boot Sequence and 
change the first boot device from its original setting, usually Internal 
HDD or similar, to: USB Storage Device for the USB media option, or 
DVD Drive for the DVD media option.
♦ Award Modular BIOS vG.BBPG, An Energy Star Ally 
•^Copyright (0) 1984-99, Award Software, Inc.
BIH1M/BIMZM BIOS U1.3
Main Processor : PENTIUM II 91BMHz
Memory Testing : 131B7ZK OK * 1BZ4K Shared Memory
Award Plug and Play BIOS Extension vl.BA
Copyright (C) 1999, Award Software, Inc.
Trend ChipAwayUirus(R) On Guard Uer 1.64
ERA POLLUTION PREVENTER
Phoenix - AwardBlOS CMOS Setup Utility 
Advanced BIOS Features
Hyper-Threading Techno logy(Enabled 1 
Quick Power On Self Test [Enabled! 
First Boot Device [USB-HDDJ 
Second Boot Device [HDD-9]
Item Help
Meriu Level ►
iect Your Root 
ice Priority
inira boot uevice 
Boot Other Device 
Boot Up Floppy Se 
Security Option 
OS Select For DRA
First Boot Device
HDD-3 
......... [ 1
ZIP100 
......... [ 1
USB-FDD 
......... [ ]
Card Reader ......... I 1
USB-CDROM 
......... [ 1
USB-HDD 
  [i]
LAN 
......... [ ]
Disabled 
......... 1 1
!
U:Move ENTER:Accept ESC:Abort
STEP 2 j
There are different versions of a UEFI BIOS, so 
covering them all would be impossible. WhatyouTe 
looking for is a section that details the Boot Sequence or Boot 
Mode. Here you have the option to turn off UEFI and choose Legacy 
or disable Secure Booting. Most distros work with UEFI but it can be 
a tricky process to enable it to boot.
STEP 4 
a
Alternatively use the Boot Option Menu. With this 
option you can press F12 (orsomething similar) to 
display a list of boot media options; from there, you can choose the 
appropriate boot media. Either way, you can now Save and Exit the 
BIOS by navigating to the Save & Exit option and choosing ’Save 
Changes and Exit’.
Linux Coding & Programming

Installing Linux on a PC
INSTALLING LINUX
Once the Live Environment has booted, you see the option to install the distro to your computer. Have a look around and when 
you're ready, look For the Install option on the desktop.
STEP1
Providing you're connected to the internet (if not, 
then do so now) and you're in the Live Environment, 
start the installation process by double-clicking on the Install Linux 
Mint icon on the desktop. Other distros display their own name, of 
course, but the process is the same. Click Continue when you're ready.
STEP 4
Before the installation process begins, you're asked 
if the choice you made regarding the erasure of the 
hard drive is correct. This is your last chance to back out. If you're 
certain you don't mind wiping everything and starting again with 
Linux Mint, click Continue. If you need to backup your files remove 
the Linux disc/USB, reboot, backup and start again.
STEP 2
While the installation process is very similar across 
most Linux distros, some offer different questions 
during the installation. Generally, the questions aren't too difficult, 
nothing very technical, but some such as'Installing third-party 
software...' can be confusing. In this case you can click Continue but 
if you're unsure, have an Internet-connected device available to ask
STEPS
Eventually you are asked to set up your Linux 
username and password. Enteryour Name to begin 
with, then the Computer Name, which is the name it is identified 
on the network as. Next choose a Username, followed by a good 
Password. You can tick the Login Automatically option but leave the 
Encrypt Home Folder option for now.
any questions.
STEP 3
When installing a new operating system it's 
recommended that you wipe the old OS, replacing it 
with the new. When you reach this stage of the installation process, 
ensure the 'Erase disk and install Linux...' option is selected. NOTE: 
This completely wipes Windows 10 from your computer, so make 
sure you have backups of all your personal files and data.
STEP 6 
A
The installation process can be quick, and there may 
be more questions to answer, or it may simply start 
installing Linux based on your previous answers. Either way, you 
end up being asked to Continue Testing the Live Environment or 
Restarting to use the newly installed OS. If you're ready to use Linux, 
then click Restart Now.
Linux Coding & Programming

Getting Started with Linux
Installing a Virtual 
Environment
A Virtual Environment is a simulated computer system. Using a Virtual Machine, you 
can mimic a standard PC and install an entire operating system to it without affecting 
the one installed on your computer. It's a great way to test and use Linux, while still 
having Windows 10 as your main OS.
GOING VIRTUAL
Using a Virtual Machine (VM) takes resources from your computer: memory, hard drive space, processor usage and so on. 
Make sure you have enough of each before commencing.
STEP1
We're using VirtualBox in this instance, as it’s one of 
the easiest virtual environments to get to grips with. 
Enterwww.virtualbox.org and click on ‘Download VirtualBox'. This 
takes you to the main download page. Locate the correct host for 
your system: Windows or Mac, the Host being the current installed 
operating system, and click the link to begin the download.
STEP 3 
a
With the correct packages downloaded, and before 
you install anything, you need to make sure that the 
computer you're using is able to host a VM. To do this, reboot the 
computerand enter the BIOS. When the computer starts up, press 
the Del, F2 or whichever key is necessary to Enter Setup.
VirtualBox
Download 
VirtualBox
>Award Modular BIOS v6.00PG, An Energy Star Ally 
■^Copyright (C) 1984-99, Award Software, Inc.
BIM1M/BIMZM BIOS U1.3
Main Processor : PENTIUM II 910MHz
Memory Testing : 13107ZK OK + 10Z4K Shared Memory
Award Plug and Play BIOS Extension vl.0A
Copyright (C) 1999, Award Software, Inc.
Trend ChipAwayUirus(R) On Guard Uer 1.64
ERA POLLUTION PREVENTER
STEP 2
________ J
Next, while still at the VirtualBox download page, 
locate the VirtualBox Extension Pack link. The
STEP 4
a
Extension Pack supports USB devices as well as numerous other 
extras that can help make the VM environment a more accurate 
emulation of a Teal' computer.
Each BIOS is laid out differently and it's very difficult 
to assess where to look in each personal example. 
However, as a general rule of thumb, you're looking for Intel 
Virtualisation Technology, or simply Virtualisation, found usually 
within the Advanced section of the BIOS. When you've located it, 
Enable it, save the settings, exit the BIOS and reboot the computer.
VirtualBox
Download VirtualBox
2‘
Linux Coding & Programming

Installing a Virtual Environment
STEP 5 
______ J
With the computer back up and running, locate 
the downloaded main VirtualBox application and
STEP 8 
_______J
When installing VirtualBox your network connection 
is disabled for a very brief period. This is due to
VirtualBox creating a linked, virtual network connection so that 
any VM installed is able to access the Internet, and your home
double-click to begin the installation process. Click Next to continue, 
when you're ready.
STEP 6
The default installation location of VirtualBox 
should satisfy most users but if you have any special 
location requirements click on the ’Browse' button and change the 
install folder. Then, make sure that all the icons in the VirtualBox 
feature tree are selected, i.e. none of them have a red X next to 
them. Click Next to move on.
STEP 9
You'll probably be asked by Windows to accept a 
security notification. Click Yes for this and you may 
encounter a dialogue box asking you to trust the installation from 
Oracle; again, click yes and accept the installation of the VirtualBox 
application. When it's complete, click finish to start VirtualBox.
Oracle VM VirtualBox 6.0.2 Setup
Custom Setup
Select the way you want features to be installed.
Click on the icons in the tree below to change the way features will be installed.
VirtualBox Application |
...i__J y VirtualBox USB Support 
(j....;___jy| VirtualBoxNetworking
__Jjd VirtualBox Bridgei 
| VirtualBox Host-C
.....j—j^J VirtualBox Python 2.x Sl
Grade VM VirtualBox 6.0.2 
application.
This feature requires 98MB on your 
hard drive. It has 3 of 3 
subfeatures selected. The 
subfeatures require 64KB on your...
J§l OracleVM VirtualBox 6.0.2 Setup
Oracle VM VirtualBox 6.0.2 
installation is complete.
Click the Finish button to exit toe Setup Wizard.
0 Start Grade VM VirtualBox 6.0.2 after installation
STEP 7
This section can be left alone to the defaults, should 
you wish. It simply makes life a little easier when 
dealing with VMs, especially when dealing with downloaded VMs, 
which you may encounter in the future. Again, clicking Next moves 
you on to the next stage.
STEP 10 
A
Oracle VM VirtualBox 6.0.2 Setup
Custom Setup
Select the way you want features to be installed.
With VirtualBox up and running you can now 
install the VirtualBox Extension Pack. Locate the 
downloaded add-on and double-click. There may be a short pause 
while VirtualBox analyses the pack butyou eventually receive a 
message to install it; obviously click Install to begin the process, scroll 
down the next screen to accept the agreement and click I Agree.
A VirtualBox - Question
Please choose from the options below:
0 Create start menu entries
0 Create a shortcut on the desktop
0 Create a shortcut in the Quick Launch Bar
0 Register file assodations
The Oracle VM VirtualBox Extension Pack has been
'WtF successfully downloaded from https://
download. virtualbox. orq/virtualbox/6.0.2/
Grade VM VirtualBox Extension Pack-6.0.Z.vbox-extpack 
and saved locally as C:\Users\david\.VirtualBox
\Oracle_VH_VirtualBox_Extension_Pack-6.0.2.vbox- 
extpack.
Do you wish to install this extension pack?
Install 
Cancel
Linux Coding & Programming

Getting Started with Linux
Installing Linux in a 
Virtual Environment
With Oracle's VirtualBox now up and running, the next task is to create the Virtual 
Machine (VM) environment into which you install Linux. This process won't affect your 
currently installed operating system, which is why a VM is a great choice.
CREATING THE VM
There are plenty of options to choose from when creating a VM. For now though, let's set up a VM adequate to run Mint 
Cinnamon and perform well.
STEP 1
________.J
With VirtualBox open, click on the New icon in the 
top right of the app. This opens the new VM Wizard.
STEP 3
Machine Help
Oracle VM VirtualBox Manager
The next section defines the amount of system 
memory, or RAM, the VM has allocated. Remember 
this amount is taken from the available memory installed on your 
computer, so don't give the VM too much. For example, we have 
8GB of memory installed and we're giving 2GB to the VM. When 
you're ready, click Next to continue.
Welcome to VirtualBox!
The left part of this window is a list of all virtual machines on your computer. The list is empty now
because you haven't created any virtual machines yet.
In order to create a new virtual machine, press the New button in the 
main tool bar located at the top of the window.
You can press the Fl key to get instant help, or visit 
www.virtualbox.org for the latest information and news.
STEP 2
In the box next to Name, type Linux Mint and 
VirtualBox should automatically choose Linux as 
the Type and Ubuntu (64-bit) as the Version; if not then use the 
drop-down boxes to select the correct settings (remember Mint 
mainstream is based on Ubuntu). Click Next when you're ready 
to proceed.
STEP 4 
_______ a
This section is where you start to create the virtual 
hard disk that the VM uses to install Mint on to.
The default option, 'Create a virtual hard disk now’, is the one we're 
using. Click Create to move on.
Q S hz-
Q Detafc ® Snapshots (2)
New Settings Dis-cartf Start
Name and operating system
it. the name you choose will be used throughout VirtualBox to 
identify this machine.
ory: 2048 MB
r: 
Floppy, Optical, Hard Disk
on: VT-x/AMD-V, Nested Paging, KVM
Linux Mint Cinnamon
Name: | Linux Mint|
Type: Linux
Version: ubuntu (6-4-bit)
30 
Disabled 
Disabled
2i
Linux Coding & Programming

Installing Linux in a Virtual Environment
STEP 5
The pop-up window that appears after clicking 
Create is asking you what type of virtual hard disk 
you want to create. We're going to use the default VDI (VirtualBox 
Disk Image) in this case, as the others are often used to move VMs 
from one VM application to the next. Make sure VDI is selected and 
click Next.
STEP 8 J
After clicking Create the initial setup of the VM 
is complete; you should now be looking at the 
newly created VM within the VirtualBox application. Before you 
begin though, click the Settings button and within the General 
section click the Advanced tab. Using the pull-down menus, choose 
'Bidirectional' for both Shared Clipboard and Drag'n'Drop.
STEP 6
The question of whether to opt for Dynamically 
or Fixed sized virtual hard disks may come across 
as being somewhat confusing to the newcomer. A Dynamically 
Allocated virtual hard disk is a more flexible storage management 
option and won't take up much space within your physical hard disk 
to begin with. Ensure Dynamically Allocated is selected and click Next.
STEP 9
Follow that by clicking on the System section, 
then the Processor tab. Depending on your CPU, 
allocate as many cores as you can without detriment to your host 
system; we've opted for two CPUs. Now click on the Display section, 
slide the Video Memory up to the maximum and tick 'Enable 3D 
Acceleration'. Click OK to commit the new settings.
STEP 7
The virtual hard disk is a single folder, up to the size 
you state in this section. Ensure the location of the 
virtual hard disk, on your computer, has enough free space available. 
For example, we've used a bigger storage option on our D:\ drive, 
named it Linux Mint and allocated 25.50GB of space to the virtual 
hard disk.
STEP 10 
A
Click on the Start button and use the explorer 
button (a folder with a green arrow) in the 'Select 
Start-up Disk' window to locate the downloaded ISO of Mint; then 
click Start to boot the VM with the Linux Mint Live Environment. You 
can now install Linux as per the standard PC installation requirements.
Linux Coding & Programming

Index^)
Getting to 
Know Linux
“Anyone can build a fast 
processor. The trick is to 
build a fast system."
- Seymour Cray (Electrical Engineer, and 
designer/founder of Cray Supercomputers)
Linux Coding & Programming

Q Getting to Know Linux
We've used Linux Mint as a guideline 
here, as it's an easy to use distro and 
perfect for former Windows users. 
It's also one of the most developed 
and well documented Linux distros 
as well as having some fantastic 
configuration options.
In this section, we introduce the Linux 
Mint Cinnamon Menu and Desktop 
Environment, how it works and what 
you can do to customise it. Want to 
create another user or even discover 
how to become anonymous online? 
Then read on.
30 
Introduction to the Cinnamon Menu
32 
Navigating the Cinnamon Desktop
34 
10 Things to do After Installing Linux Mint
36 Did You Know...Apollo 11
38 Creating Users
40 Customising the Desktop
42 Becoming Anonymous Online
Linux Coding & Programming

&
Getting to Know Linux
Introduction to the 
Cinnamon Menu
Now that you have Linux installed it's time to have a good look around. First though, if 
you're using Virtualbox you'll have a notification regarding Software Rendering; here's 
how to fix it.
CINNAMON VIRTUALBOX FIX
You've already looked at some list functions, using .insert, .remove, and .pop but there are also functions that can be applied 
to strings.
STEP1 
a
Before we begin, we're assuming you're having this 
issue within Virtualbox. The Software Rendering 
message appears in the top right of the desktop. To fix this, click 
on Devices in the Virtualbox window, followed by Insert Guest 
Additions CD Image.
STEP 3 
a
After a moment or two you're automatically 
dropped into a command line view, called the 
Terminal in Linux. This details the installation of the new VirtualBox 
drivers, removing any old drivers it has detected, and installing the 
latest versions. It won’t take long and when it's done you will be 
asked to hit Return to exit the Terminal.
Terminal 
— + x
File Edit View Search Terminal Help
Verifying archive integrity... All good.
Uncompressing VirtualBox 5.1.20 Guest Additions for Linux.....................
VirtualBox Guest Additions installer
Removing installed version 5.1.16 of VirtualBox Guest Additions...
Copying additional installer modules ...
Installing additional modules ...
vboxadd.sh: Starting the VirtualBox Guest Additions.
Press Return to close this window...
STEP 2 
a
The Guest Additions CD contains drivers for 
Virtualbox, including the virtual video hardware. 
When it’s loaded in, you get a 'software needs running' notification 
box with two options, Cancel and Run. Click the Run button and 
enter your Linux user password.
STEP 4
The Virtualbox Additions CD icon is on the desktop, 
so right-click it and then scroll down the menu to 
click Eject. You can now restart Linux Mint by clicking the Menu, the 
bottom icon in the strip to the left, then the Restart button. This 
reboots Mint and the problem is fixed.
Linux Coding & Programming

Introduction to the Cinnamon Menu
CINNAMON ON THE MENU
Now the Software Rending issue for Virtalbox users is out of the way, let’s take a look at the Mint Menu and how it all works. 
Remember, this is just for Mint Cinnamon, other distros look and behave differently.
STEP1
First off, you may have already noticed the Welcome 
Screen that pops up when you login to Linux Mint. 
Take a moment to browse through the options, read the First Steps 
option and so on. When you're done, click the X in the top right 
corner of the window to close it.
STEP 4
Open up the Menu again but this time hover 
the mouse pointer over Graphics, then click on 
GNU Image Manipulation Program. GIMP is a powerful image 
manipulation app that's probably as effective as Adobe's Photoshop 
but requires a little more work to get the results you want. It's 
certainty worth taking the time to master, though.
STEP 2
You've already used the Mint Menu to reboot 
the system and when you first used the Live 
Environment. This time, click the Menu button and hover over 
the Office entry in the middle column. This changes the icons 
represented in the right-hand column, detailing what apps are 
installed under that section.
STEPS
If you’re looking fora particular function or app, 
such as setting up a printer, click on the Search box 
at the top of the Menu box. Start typing the app or function you 
want, such as printers, and the Mint Menu displays the relevant 
options below. This works with most modern Linux menus, 
regardless of the distro.
STEP 3
Launching any of the apps from the Menu is as 
simple as finding one and clicking it. For example, 
under the Office section, click on LibreOffice Writer. Writer is the 
preinstalled word processor for Linux Mint. It opens and saves as 
Microsoft Word and functions in almost the same way.
STEP 6 
A
Hover over any of the apps listed on the right-hand 
column and right-click, to be presented with a list of 
options: Add to Panel, Add to Desktop, Add to Favouritesand Uninstall. 
Most of these options are obvious in their use. Add to Favourites 
though places the app in the left-hand, quick-access column.
Linux Coding & Programming

&
Getting to Know Linux
Navigating the
Cinnamon Desktop
Each desktop environment behaves differently to that of the next. Some DEs offer 
widgets that can be customised and placed on the desktop, others instead opt for a 
clean, sharp look to keep everything running as fast as possible. Let's see what the 
Cinnamon desktop has to offer.
A TOUCH OF SPICE
The Cinnamon desktop environment is a great blend of style and performance. There's lots to like about it, which is why it’s 
such a popular DE.
STEP1
Begin exploring the Cinnamon desktop by double­
clicking the Computer icon. This brings up Nemo, 
the file manager used in Cinnamon. The Computer icon opens up 
the root level file system, with access and views to the optical drive 
(if you have one installed), hard drive and core Linux file system.
STEP 3
Nemo has many different features, views and 
ways so that you can view and manipulate filesand 
folders. For example, if you have any images in the Pictures folder, 
you can select the icon zoom level for the images by using the slider 
located in the bottom right of Nemo, labelled Adjust Zoom Level.
STEP 2 
a
The Linux file system can appear confusing to 
a former Windows user, so until you're a little 
more knowledgeable on how it all works, we'd recommend you 
concentrate on the Home icon on the desktop instead. In here is 
everything relating to your user account: where you store Pictures, 
Videos, Music, Documents, Downloaded items etc.
STEP 4
Just like any good file manager, if you right-click 
any of the files or folders within you get a wealth of 
options. In the case of Cinnamon, the defaults allow you to play or 
view a file depending on what type of file it is and copy, cut, delete, 
compress, rename, send via email and view its properties.
Linux Coding & Programming

(^Navigating the Cinnamon Desktop
STEP 5
At the bottom of the desktop there's the Panel.
We've already looked at one section of the Panel, 
the Menu. If you right-click anywhere on the Panel, other than on a 
Panel app, you see a menu allowing you to edit, add and set up the 
Panel in a different way.
STEP 8 
A
From that desktop right-click, context menu, select 
Customise, followed by the Desktop Settings link at 
the bottom of the newly opened window. This opens a new window 
where you're able to edit which desktop icons are present. If you're 
using a setup with multiple monitors attached, you can also choose 
which monitor displays which icons.
+ Add applets to the panel
(5 Panel settings
Themes
% System Settings
Troubleshoot
Modify panel
Panel edit mode
STEP 6
For example, if you click the option Modify Panel, 
you can remove, move, remove the Panel, add a 
new one and dear it of any Applets that are currently present. An 
Applet, by the way, is an app that's designed to work and fit into the 
Cinnamon Panel.
STEP 9 
a
Click on the Menu and type system settings and 
open the resulting icon. This takes you to the 
System Settings options. From here you're able to control and edit 
the way Linux Mint Cinnamon looksand works as well add new 
users, manage the firewall and enable accessibility options.
Themes
% System Settings
Troubleshoot 
►
Modify panel 
▼
— Remove panel
+ Add panel
❖ Move panel
Iq Copy applet configuration
□ Paste applet configuration
Clear all applets
STEP 7
If you right-click anywhere on the Cinnamon 
desktop you see a set of options that allows you to 
further add to, edit or view the desktop content differently. It's very 
similar to that of Windows, which is why Mint is a good choice for 
ex-Windows users.
STEP 10 
A
In short, Linux Mint Cinnamon can be configured 
to look quite extraordinary. There are many 
examples available of how good it can get and what can be 
achieved. You can go as complex or as simple as you want, adding 
different component and animations or just keeping it plain and 
easy to read.
Linux Coding & Programming
3

A!
Getting to Know Linux
10 Things to do After 
Installing Linux Mint
Linux Mint is a polished distro out of the box but, as with most Linux distros, there are 
some tweaks that can be applied to improve the way it works. Although these are Mint­
specific tweaks, most can be applied to other distros.
LINUX TWEAKS
Some of these post-installation actions are highly recommended, while others are just handy additionsand simply tweak the 
system or add a customisation.
STEP1 
a
The first, and most important, post-installation 
action is to update the system. Click on the shield 
icon in the Panel, found at the bottom right of the desktop next to 
the time and date. This launches the Update Manager.
STEP 3
Click the OK button and you can see a couple of 
updates ready for installation. Before you update 
though, click on the blue bar OK button to switch to a Local Mirror. 
This opens the Software Sources option. In the Mirrors section, click 
on the Main and Base drop-down menus and select a serverclosest 
to your current location.
STEP 2
Linux Mint offers the user a three level policy 
approach to updates: Don't Break My Computer, 
Optimise Stability and Security and Always Update Everything. 
The recommended option is the Optimise Stability and Security, 
which only updates safe, essential patches that won't impact critical 
elements of the core OS. Read through the descriptions but choose
the middle, and recommended option.
STEP 4
Click the Update the Cache button and close the 
Software Sources window. Back in the Update 
Manager, click on the Install Updates icon and enter your password. 
The updates automatically apply themselves and relaunch Update 
Manager, this time with a lot more updates. Again, click Install 
Updates, OK any messages and wait for them to finish.
Linux Coding & Programming

Q 10 Things to do After Installing Linux Mint
STEP 5
The updates are graded by level, 1 being a low 
level update, level 5 being a dangerous one. Stick 
to level 3 updates, is our advice; and click Replace for any messages 
regarding overwriting a configuration file. With regards to the 
Software Rendering issue and lack of drivers for non-VirtualBox 
users, click the Menu and type 'driver' into the search box.
STEP 8 
A
When asked to accept the changes, enter Y and also 
when asked to configure libdvd. Make sure OK is 
highlighted and press Enter, then Yes to any further questions. Next 
up, still in theTerminal, enter: cat /proc/sys/vm/swappiness; 
the result should be 60. If your computer has less than 4GB of RAM/ 
memory, then enter: gksudo xed /etc/sysctl. conf.
STEP 6
Click the Driver Manager app that appears as a 
result of the search and enter your password. Mint 
takes a moment to analyse what's available and presents you with 
a selection of potential drivers based on your detected hardware. 
Those with graphical problems, such as Software Rendering, should 
opt to use the latest, recommended Graphics driver.
STEP 9
This tweak helps speed up systems with less than 
4GB RAM/memory. Scroll down to the bottom of 
the file you just opened and add the following new lines:
# Decrease swap usage to a more reasonable level 
vm.swappiness=10
Click File > Save, then File > Quit. Reboot Linux Mint and you should
STEP 7
At this point you'll probably need to restart Linux 
Mint, so do that now. After a reboot click the Menu 
button again, followed by theTerminal. The Terminal icon is found in 
the left-hand column, above the Files icon. With the Terminal open, 
enter: sudo apt-get install libdvd-pkg, press Enterand 
type in your password. This enables encrypted DVD playback.
david@david-mint ~
File Edit View Search Terminal Help
|david@david-mint> sudo apt-get install libdvd-pkg 
[sudo] password for david:
STEP 10 
A
Security is always a concern in this modern digital 
age. While Linux Mint is a secure system, it's 
advisable to always try and improve it. Click the Menu button and 
search for Firewall; click the Firewall Configuration icon and enter 
your password. In the Firewall window, click the Status slider to On.
Linux Coding & Programming
I5

Getting to Know Linux
Apollo 11
DID YOU KNOW...
July 20th 1969 
is remembered 
as a turning point in human history, when 
mankind first stepped on the moon. The 
software that helped the crew make 
that pivotal voyage didn't even exist 
at the time and had to be developed 
from scratch. Using a new method of 
storing programs called Rope Memory, 
the engineers at MIT Instrumentation 
Laboratory populated the memory with a 
special version of assembly.
Incredibly, that code is freely available 
to view on GitHub. Uploaded by a 
researcher in 2003, you can view the code 
by visiting www.github.com/chrislgarry/ 
Apollo-11/. Look out for code snippets, 
such as Burn_Baby_Burn, in particular line 
925 with the comment "Goodbye. Come 
again soon."

Did You Know...
One giant leap for 
mankind, and coding.

Getting to Know Linux
Creating Users
When you first install Linux Mint it is configured for use with a single user. While 
sharing a user account with the entire family is fine, there may come a time when you 
need to create separate users with their own unique Home folders.
NEW USERS
Having different users means each user has access to his or hers own areas on the system. Documents, pictures, videos and so 
on are separate, as with multiple users on other operating systems.
STEP1
Click on the Linux Mint Menu and type 'users' to 
begin searching for the relevant console. From the 
search results, choose Users and Groups and enter your password. 
The Users and Groups console is quite basic looking, and thankfully 
easy to use. At first, you can just see your own username from when 
you installed Linux Mint.
STEP 3
Enter the new user’s Full Name, followed by the 
Username they need when logging into Linux Mint. 
Make sure the username is all in lower case, a-z and 0-9 characters 
only. You can have full stops, underscores or hyphens if you wish. 
Click the Add button when you're ready to continue.
STEP 2 
_______J
To add a new user, click the Add button at the 
bottom of the console. There are two types of
STEP 4 
_ ____J
user you can create, Standard and Administrator. Unless the new
The new user appears in the list of current Linux 
Mint users, in alphabetical order. At present, there's
no password set so click the user in the list of current users, then
user has need to install new apps or access parts of the file system
beyond their Home folder, then opt for the Standard account type. 
Otherwise, use the Administrator account type.
click the No Password Set option under the user's username.
Linux Coding & Programming

Creating Users
STEP 5 
_______J
You can now enter a password for the new user 
or click the curled arrow at the end of the New
STEP 7 
_______J
Password text box to generate a password for you, as well as 
displaying it. Naturally, it's a good idea to come up with as strong a 
password as possible. When you're done, click the Change button.
Once logged in the new user is required to set up 
their own desktop wallpaper, icons, Panel, Menu
and so on. Depending on what Account Type you set up forthem, 
Standard or Administrator, they won't be able to install any new 
apps. This screenshot is from a Standard user account type.
bdm@david-Mint: -
File Edit View Search Terminal Help
bdm@david-Mint: $ sudo apt-get install plank 
[sudo] password for bdm:
Sorry, user bdm is not allowed to execute '/usr/bin/apt-get install plank' as ro 
ot on david-Mint.home.
bdm@david-Mint: $ |
STEP 6
You can close the Users and Groups console window 
now, as the new userhas been created. If you click 
the Mint Menu, followed by Logout, you are presented with the 
Mint Login Manager. The new user is now present in the list of 
currently available users. Click on him/her to log them in.
STEP 8 
A
You can create as many new accounts as you 
need and you're able to switch between them 
when required. It's best to have just one account that's capable of 
installing new software, that way you can keep track of what's on 
your system.
COMMAND LINE ACCOUNTS
Just as you'd expect, you can also create a new user within the command Line. Open up a Terminal session under the main 
(yours) Administrator account.
STEP1
The process for adding a new user from the 
command line is relatively simple. To begin with, 
type: 
where RitSW/KlTirt is
the new user's login name. You're then asked to create a new
password for the user, along with their full name and other details. 
Click y to confirm the details and create the user account.
$ sudo adduser jim
Adding user 'jim' ...
Adding new group 'jim' (1002) ...
Adding new user jim' (1002) with group ’jim' ...
Creating home directory '/home/jim' ...
Copying files from ’/etc/skel' ...
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Changing the user information for jim
Enter the new value, or press ENTER for the default
Full Name []: Jim Gale
Room Number []:
Work Phone []:
Home Phone []:
Other []:
STEP 2
You can check the details and account type for 
F the new user from within the Users and Groups 
console. If you want to delete a user from Mint, you can either 
enter: 
in the Terminal or click the
Isudo deluser <username>|
Delete button in Users and Groups.
Linux Coding & Programming

Getting to Know Linux
Customising the Desktop
Customising the operating system desktop is one way to make it your own: a 
personalised workspace that is there to help you work, inspire you or feature the 
company logo. Whatever your reasons for having your own desktop, here's how it's done.
YOUR DESKTOP
Linux is probably one of the customisable operating systems there is. With just a Few tweaks, one or two extras installed and 
some imagination, you can create something incredible.
STEP1
The First aspect oF desktop customisation is to 
change the wallpaper. Right-click the desktop and 
choose Change Desktop Background. This opens the Backgrounds 
app in Linux Mint; remember, other distros may present their 
background, wallpaper selection tools diFFerently.
STEP 3
You just need to click the available images, From any 
oF the locations provided to have them install as the 
desktop wallpaper. Incidentally, iFyou have images stored in another 
location on your system or network, you can add them by clicking on 
the Plus symbol at the bottom oF the Backgrounds console, using 
the File manager to locate them.
STEP 2
More recent versions oF Linux Mint display available 
backgrounds depending on the version the user is 
running. You normally get three categories Followed by a Fourth, 
Pictures, which is separated From the others. The Pictures option 
is diFFerent because it reads the image content From the Pictures 
Folder in your Home area.
Backgrounds
H Settings
STEP 4 
a
By clicking on the Settings tab you can, instead, 
play numerous images as a slideshow or change the 
aspect oF the wallpapers to a variety oF choices.
Linux Coding & Programming

(^Customising the Desktop
STEP 5
If none of the available wallpapers take your 
fancy, open a browser and search for the type of 
background image you prefer. When you've found the image you 
want as the desktop wallpaper, right-click it and choose Set As 
Desktop Background from the list of options. When the Set Desktop 
Background console open, click the Set Desktop Background button.
STEP 8 
A
Themes allows you to change the way certain 
aspects of the Mint desktop look: Window 
Borders, Icons, Controls, Mouse Pointerand Desktop. In the 
Settings tab you can extend the options with a few on/off slider 
buttons, too.
STEP 6
Click the Menu button and search for’desktop' 
and click the Desktop Settings result. The Desktop 
console allows you to pick the layout, desktop icons and options 
for multi-monitor support you want. You can experiment with the 
options for the best setup, according to your personal tastes.
STEP 9
If you click on the Add/remove button in the centre 
of the three available options, you can choose the 
default view from a number of preinstalled themes. Click the theme 
you want, then click the Install (downward-pointing arrow) button 
to enable it.
Click back on Themes, then Desktop and you can 
locate the newly installed theme and apply to your 
desktop. Any installed Themes can also be uninstalled via the Add/ 
Remove button. It's worth spending some time personalising your 
desktop how you want it and there are some incredible themes
STEP 7
In addition to changing the desktop wallpaper, 
and how the icons are displayed, you can also alter 
the overall theme for Linux Mint. From the Mint Menu, search for 
'themes' and click the Themes app as it appears in the search results.
STEP 10
available too.
Linux Coding & Programming

Getting to Know Linux
Becoming
Anonymous Online
The digital age has led to many great advances in communications; however, it has 
also brought on a new age of spying and snooping. Most of us are no strangers to the 
frequent news stories of governments, secret organisations and underground hackers 
breaking our privacy but how can you combat this?
ANONYMITY WITH MINT
While it's virtually impossible to become totally anonymous online, you can take measures to ensure our privacy is at its best.
STEP1
Starting with the basics, use HTTPS instead of the 
standard HTTP when browsing. This means that 
anything that's transmitted over HTTPS is secure (hence the S part 
at the end) and encrypted.
STEP 3
Although using Google may seem like the obvious 
choice fora modern Internet search, the company 
does track all searches made by an individual. Instead, consider an 
alternative search engine, such as DuckDuckGo, a search engine that 
doesn't store personal data or track you.
STEP 2 
a
When you're browsing, consider using the Incognito 
or Private browsing modes available in a browser. 
This disables your web history and web cache, allowing you to 
browse without the details being stored for later scrutiny by 
someone else. However, it doesn’t stop any data or search tracking.
STEP 4
If you're regularly on the Internet then consider 
installing some of the browser plug-ins that 
enhance your privacy. For example, for Firefox, use Ghostery, 
NoScript and Adblock Plus to block trackers, adverts and other data 
mining techniques.
e * a os
•» U ■»»
« fe
Linux Coding & Programming

{^Becoming Anonymous Online
VPNS AND TOR
The previous steps can aid your online privacy but to really become anonymous you need a Virtual Private Network and Tor.
STEP1
A VPN is a remote server, or cluster of servers, that 
establishes a connection with your computer. The 
end result is thatyour computer's identity on the Internet is hidden 
behind the VPN remote server; so you could live in the UK but have 
an IP address (the computer online identity) belonging to Iceland.
HowMJfl works?
STEP 4
When the download has finished, drop into the 
Terminal and enter the Downloads folder, cd 
Downloads/. Enter Is to check the tar.xzTor file is present, then 
ententar -xf tor-browser-linux64-8.0.4_en-US.tar. 
xz (Tor is updated regularly, so if your version is different press Tab 
to autocomplete the tor-browser- filename). When the files are 
unpacked, use cd tor-browser_en-US/ to enter the new folder.
I
david@david-Mint: ~/Downloads/tor-browseren-US 
File Edit View Search Terminal Help
david@david-Mint:-/Downloads$ Is
david@david-Mint:~/Downl.oads$ tar -xf tor-browser-linux64-8.0.4 en-US.tar.xz 
david@david-Mint:~/Downloads$ Is
tor-browser_en-US tor-browser-linux64-8.e.4_en-US.tar.xz
david@david-Mint:~/Downl.oads$ cd tor-browser en-US/
david@david-Mint:~/Downloads/tor-browser_en-US$ Is
Browser start-tor-browser.desktop
david@david-Mint:~/Downloads/tor-browser_en-US$
Corporate Hackers Government
STEP 2
Most good VPNs charge a monthly or annual fee 
but it's worth the expense. We use CyberGhost, 
www.cyberghostvpn.com, which offers VPN connections for 
Windows, Mac, Mint (as well as other Linux distros), Android and 
iOS devices. Details for each OS can be found at www.support. 
cyberghostvpn.com/hc/en-us/articles/213190329-Read-me-first-.
STEP 5
A quick Is reveals a couple of entries: a folder called 
Browserand a file called 'start-tor-browser.desktop'. 
To start the Tor setup, type ./start-tor-browser.desktop. 
This command launches the Tor setup, where you are offered two 
options: Connect or Configure. For most users, the Connect option 
will suffice. Click Connect when you're ready.
Connect to Tor
Tdrl Browser
Click “Connect
*
 to connect to Tor.
Click ‘Configure’ to adjust network settings if you are in a country that censors Tor (such as Egypt, China, Turkey) 
or if you are connecting from a private network that requires a proxy.
Connect 
Configure
STEP 3
Another option is to use Tor. Tor is an open network 
that you can attach to that hides your IP address 
behind countless nodes around the world. It's available for Windows, 
Mac and Linux computersand is very easy to install and use. Start 
by navigating to www.torproject.org/download/download-easy. 
html.en and clicking on the Download Linux 64-bit button.
STEP 6 
A
After the connection is established, the Tor Browser 
launches. This is a customised version of Firefox 
and from here you can securely browse the Internet without fear of 
being viewed or tracked. Mixing both a VPN and Tor makes for an 
extremely secure and private connection to the online world.
Explore. Privately.
Linux Coding & Programming
I3

/\ Index
44
Linux Coding & Programming

Using the Terminal
"Linux: the 0| 
system with 
Command Li
- Anonymous (Posted on comp, 
software.testing)
The Linux command line, the Terminal, 
is an incredibly powerful environment. 
From it, you can bring the OS to its 
knees, or update it to something 
spectacular. You can hack into remote 
computers, look at an animated 
ASCII camp fire, install new apps and 
programs, watch Star Wars played out 
from a server in the Netherlands, and 
code intricate automated scripts.
In this section you will explore the 
intricacies of the Terminal, and how it 
works with Linux. You will learn how to 
manipulate the Linux file system from 
the Terminal, and you will discover 
some odd, but fun things you can do in 
the Terminal.
The Terminal rules supreme in the world 
of Linux. Learn how it works, and you 
can access all that power.
46 
Basics of the Terminal
48 
Update Mint via the Terminal
50 
Install Apps via the Terminal - Part 1
52 
Install Apps via the Terminal - Part 2
54 
Did You Know...Linux Kernel 0.01
56 Creating a File Using the Terminal
58 Creating and Removing Directories
60 Fun Things to do in the Terminal
62 More Fun Things to do in the Terminal
64 Linux Tips and Tricks
66 
Did You Know...Linux and the Big Bang
68 Creating Bash Scripts- Parts 1 - 5
78 Pi x Linux = The Perfect Combination
80 Command Line Quick Reference
82 A-Z of Linux Commands
84 
Did You Know...Good enough for NASA
Linux Coding & Programming
45

Using the Terminal
Basics of the Terminal
Most operating systems use two kinds of interface, the GUI, which is the desktop 
that Windows, macOS and Linux Mint boot into and the command line. While modern 
operating systems shy away from the command line, Mint uses the Terminal to give the 
user greater control of the system.
TAKING COMMAND
The command line, or Terminal, is an extremely powerful interface. Everything you can do on the desktop can be done within 
the Terminal. Let's start by seeing how it works.
STEP1 
______ J
The Terminal can be accessed by either clicking on 
the Terminal icon on the Panel, located between 
the Firefox and files icons or launched by opening the Menu and 
selecting it from the left-hand quick launch strip.
STEP 3 
A
What you currently see in the Terminal is your login 
name followed by the name of the computer; as you 
named it during setup when you first installed Mint. The line then 
ends with the current folder name; at first this isjust a tilde which 
means your Home folder.
U_________________ ll
u
All Applications
Accessibility
□
U Accessories
£ Account details
ffl
Graphics
H Applets
■■■
V Internet
Archive Manager
□
■= Office
Hb Backgrounds
► | Sound & Video
O Backup Tool
X Universal Access
Q Bluetooth
A
Q Administration 
rs _
x® Calculator
STEP 2
The Terminal gives you access to the Linux Mint 
Shell, called Bash, which gives you access to the 
underlying operating system. Everything in Mint, including the 
desktop and GUI, is a module running from the command line.
ldavid@david-mint - $ pwd 
/home/david 
david@david*mint - $
STEP 4
The flashing cursor at the very end of the line is 
where your text-based commands are entered. You 
can begin to experiment with a simple command, Print Working 
Directory (pwd), which outputs the current folderyou're in to the 
screen. Type pwd and press Enter.
david@david-mint ~
File Edit View Search Terminal Help
46
Linux Coding & Programming

(Basics of the Terminal
STEP 5
All the commands you enter work in the same 
manner: you enter the command, include any 
parameters to extend the use of the command and press Enter to 
execute the command line you've entered. Type into the Terminal: 
uname -a and press Enter. This displays some system information 
regarding Mint.
david@dav>d-mint -
Hie Edit View Search Terminal Help
'davidedavid-aint S pwd
david@david-nint - s uname -a
Linux david-mnt 4.4.8-53-generic #74-Ubuntu SMP Fri Dec 2 15:59:18 UTC 2816 X8664 x8664 x8664 GNU/Linux 
davidtedavid-aint - I
STEP 8 
A
View and Search options let you alter the sizing of 
the Terminal window and of course search within 
the Terminal for any particular key words.
STEP 6 
a
Before we get into entering commands, let's take 
a moment to see what menus the Terminal has to 
offer. The File menu option allows you to open a new Terminal, 
create a new profile, where you can alter the size, colours and 
behaviour of the Terminal, add a new tab, and close all current 
active Terminal sessions.
STEP 9 
a
The Terminal entry extends the profile editing and 
sizing and allows you to alter the character encoding. 
Interestingly, you can also set it to a Read Only mode, which stops you 
from entering any commands into the Terminal; this is good for when 
you need to permanently display the Terminal contents.
david@david-mint
File Edit View Search
Change Profile
Set Character Encoding
Reset
Reset and Clear
1.80x24
2.80x43
3.132x24
4.132x43
david@david-mint ~
STEP 7
The Edit option lets you copy and paste commands 
to and from the Terminal and othersources; handy 
for when you want to copy a very long and complex command from a 
web page. It also allows you to edit the current profile preferences.
STEP 10 
A
Finally, the Help option displays the help contents 
and version number of the Terminal, or to be 
more precise, GNOME Terminal; we'll simply refer to it as Terminal in 
future. The Contents are worth having a quick read through, to help 
familiarise yourself with how the Terminal works.
Linux Coding & Programming
47

Using the Terminal
Update Mint via 
the Terminal
Up to now you've been using the shield icon to launch Mint Update Manager in order 
to update the system and upgrade the currently installed apps, tools and other 
elements. However, you can also accomplish a complete system update and upgrade 
from the Terminal.
USING APT-GET
To update and upgrade via the Terminal you use the APT (Advanced Packaging Tool) command. It's a powerful command and 
combines different elements depending on its use.
STEP1 
______ J
Start by opening a new Terminal or if you already 
have one opened clear its contents with the clear
STEP 3 
_______J
Apt-get is used to update and upgrade the 
software in Mint, as well as Ubuntu and other
command. This starts you off with a clean slate on which to work.
Debian-based distros. Using the Update element retrieves 
new package listsand updates the list of source files. Upgrade 
downloads and performs an upgrade to the latest versions of those 
files. To start the entire Upgrade and Update process, enter: sudo 
apt-get update, followed by your password.
STEP 2 
_______J
Enter: apt-get into the Terminal. This brings up a 
list of the most used apt-get commands, along with
STEP 4
a brief description of what the command does. It’s worth having a 
look at, even if it doesn't make a huge amount of sense at this time.
Notice now the addition of the sudo command. The 
sudo command once meant Super User Do; these 
days it's more acceptable as Substitute User Do. It means that the 
administrative user (Super User) uses APT (Advanced Packaging 
Tool) to Get any Updates. Now try this: sudo apt-get upgrade.
david@david-mint -
File Edit View Search Terminal Help
|david$david-mint ~ s apt-get
apt 1.2.19 (amd64)
Usage: apt-get [options] command
apt-get [options] install|remove pkgl [pkg2 ...]
apt-get [options] source pkgl [pkg2 ...] 
apt-get is a command line interface for retrieval of packages 
and information about them from authenticated sources and 
for installation, upgrade and removal of packages together 
with their dependencies.
Most used commands:
update - Retrieve new lists of packages
upgrade - Perform an upgrade
install - Install new packages (pkg is libc6 not libc6.deb)
remove - Remove packages
purge - Remove packages and config files
autoremove - Remove all unused packages automatically 
dist-upgrade - Distribution upgrade, see apt-get(8) 
dselect-upgrade - Follow dselect selections
build-dep - Configure build-dependencies for source packages 
clean - Erase downloaded archive files 
autoclean - Erase old downloaded archive files
check - Verify that there are no broken dependencies 
source - Download source archives
download - Download the binary package into the current directory
david@david-mint ~
File Edit View Search Terminal Help
ldavid@david-mint - S sudo apt-get upgrade
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... Done
The following packages were automatically installed and are no longer required:
libgkeyfilel.0-cil libgnome-keyringl.0-cil libmono-accessibility4.0-cil libmono-data-tds4.0- 
libmono-ldap4.0-cil libmono-sqlite4.0-cil libmono-system-componentmodel-dataannotations4.0-c 
libmono-system-data4.0-cil libmono-system-design4.0-cil libmono-system-enterpriseservices4.0 
libmono-system-ldap4.0-cil libmono-system-numerics4.0-cil
libmono-system-runtime-serialization-formatters-soap4.0-cil
libmono- system- runtime-serialization4.0-cil libmono-system-servicemodel-internals©.0-cil
libmono-system-transactions4.0-cil libmono- system-web-applicationservices4.0-cil
libmono-system-web-services4.0-cil libmono-system-web4.0-cil libmono-system-windows-forms4.0 
libmono-system-xml-linq4.0-cil libmono-webbrowser4.0-cil libnotify0.4-cil libsdl2-2.0-0 libs 
Use 'sudo apt autoremove' to remove them.
The following packages will be upgraded:
apt apt-transport-https apt-utils cifs-utils girl.2-gtk-3.0 grub-common grub-pc grub-pc-bin 
grub2-common libapt-inst2.0 libapt-pkg5.0 libgail-3-0 libgtk-3-0 libgtk-3-bin libgtk-3-commo 
linux-libc-dev thermaid
17 to upgrade, 0 to newly install, 0 to remove and 0 not to upgrade. 
Need to get 9,255 kB of archives.
After this operation, 36.9 kB of additional disk space will be used. 
Do you want to continue? [Y/n] I
48
Linux Coding & Programming

Q Update Mint via the Terminal
STEP 5 J
Depending on the state of your updates, if you 
have any waiting to be installed, you might be 
asked if you want to apply the results of the sudo apt-get 
upgrade command. You can press y to accept and continue. What's 
happening here is that apt-get has some updated software to apply 
to Mint, and you're okaying the action.
STEP 7
Essentially, that's it, your system is now up to date 
according to the available list of packages from the 
apt-get update command. You can run through the process one 
more time, just to check if everything went okay. To recap, enter: 
sudo apt-get update, press Enter, then type: sudo apt-get 
upgrade and press Enter.
david@david-mint - 
- + x
File Edit View Search Terminal Help
Leaving 'diversion of /usr/sbin/update-icon-caches to /usr/sbin/update-icon-caches.gtk2 by libgtk-3-bin'
Leaving 'diversion of /usr/share/man/manS/update-icon-caches.S.gz to /usr/share/man/manSZupdate-icon-cach 
es.gtk2.8.gz by libgtk-3-bin'
Unpacking libgtk-3-bin (3.18.9-lubuntu3.3) over (3.18.9-lubuntu3.2) ...
Preparing to unpack .../linux-iibc-dev_4.4.8-75.96 amd64.deb ...
Unpacking Tinux-libc-dev:amd64 (4.4.0-75.96) over (4.4.8-67.88) ...
Preparing to unpack .../thermaid 1.5-2ubuntu4_amd64.deb ...
Unpacking thermald (1.5-2ubuntu4) over (1.5-2ubuntu3) ...
Processing triggers for man-db (2.7.5-1) ...
Processing triggers for dbus (1.18.6-lubuntu3.3) ...
Processing triggers for ureadahead (6.188.8-19) ...
Processing triggers for systemd (229-4ubuntul6) ...
Setting up apt-utils (1.2.28) ...
Setting up grub-common (2.82~beta2-36ubuntu3.9) ...
update-rc.d: warning: start and stop actions are no longer supported; falling back to defaults
Setting up grub2-common (2.82~beta2-36ubuntu3.9) ...
Setting up grub-pc-bin (2.62~beta2-36ubuntu3.9) ...
Setting up grub-pc (2.82~beta2-36ubuntu3.9) ...
Installing for i386-pc platform.
Installation finished. No error reported.
Generating grub configuration file ...
Warning: Setting GRUB TIMEOUT to a non-zero value when GRUB HIDDEN TIMEOUT is set is no longer supported.
Found Linux image: /boot/vmlinuz-4.4.6-53-generic
Found inltrd image: /boot/initrd.img-4.4.0-53-generic
Found men>test86+ image: Zboot/memtest86+.elf
Found memtest86+ image: /boot/memtest86+.bin 
done
Setting up libgail-3-8:amd64 (3.18.9-lubuntu3.3) ...
Setting up apt-transport-https (1.2.28) ...
Setting up cifs-utils (2:6.4-lubuntul.1) ...
Setting up girl.2-gtk-3.8:amd64 (3.18.9-lubuntu3.3) ...
Setting up libgtk-3-bin (3.18.9-lubuntu3■3) ..._______________________________________________________
david@david-mint ~
File Edit View Search Terminal Help
ldavid@david-mint - $ sudo apt-get update
Hit:l http://archive.canonical.com/ubuntu xenial InRelease
lGet:2 http://security.ubuntu.com/ubuntu xenial-security InRelease [162 kB]
Hit:3 http://archive.ubuntu.com/ubuntu xenial InRelease
Ign:4 http://www.mirrorservice.org/sites/packages.linuxmint.com/packages serena InRel 
Get:5 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [192 kB]
Hit:6 http://www.mirrorservice.org/sites/packages.linuxmint.com/packages serena Relea 
Get:7 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [162 kB] 
Fetched 306 kB in 0s (1,096 kB/s)
Reading package lists... Done
david@david-mint S sudo apt-get upgrade
Reading package lists... Done
Building dependency tree
Reading state information... Done
{Calculating upgrade... Done
The following packages were automatically installed and are no longer required: 
libgkeyfilel.O-cil libgnome-keyringl.0-cil libmono-accessibility4.0-cil libmono-dat 
libmono-ldap4.0-cil libmono-sqlite4.0-cil libmono-system-componentmodel-dataannotat 
libmono-system-data4.0-cil libmono-system-design4.0-cil libmono-system-enterprisese 
Iibmono-system-ldap4.0-cil libmono-system-numerics4.0-cil 
libmono-system-runtime-serialization-formatters-soap4.0-cil
Iibmono-system-runtime-serialization4.0-cil libmono-system-servicemodel-internals©. 
libmono- system-1ransactions4.0-cil Iibmono-system-web-applicationservices4.0-cil 
libmono-system-web-services4.0-cil libmono-system-web4.0-cil libmono-system-windows
STEP 6 
______ J
There's likely to be a long list of what seems 
gibberish now filling your Terminal window
but don't worry. The files necessary for the upgrade have been 
downloaded, prepared, unpacked, processed, installed and set up 
correctly. There's a lot going on when you perform an upgrade, even 
with the smallest package.
Unpacking libgtk-3-bin (3.18.9-lubuntu3.3) over (3.18.9-lubuntu3.2) ...
Preparing to unpack .../Linux-libc-dev_4.4.0-75.96_amd64.deb ...
Unpacking linux-libc-dev:amd64 (4.4.0-75.96) over (4.4.0-67.88) ...
Preparing to unpack .../thermaid 1.5-2ubuntu4amd64.deb ...
Unpacking thermaid (1.5-2ubuntu4) over (1.5-2ubuntu3) ...
Processing triggers for man-db (2.7.5-1) ...
Processing triggers for dbus (1.10.6-lubuntu3.3) ...
Processing triggers for ureadahead (0.100.0-19) ...
Processing triggers for systemd (229-4ubuntul6) ...
Setting up apt-utils (1.2.20) ...
Setting up grub-common (2.02~beta2-36ubuntu3.9) ...
update-rc.d: warning: start and stop actions are no longer supported; falling ba
Setting up grub2-common (2.02~beta2-36ubuntu3.9) ...
Setting up grub-pc-bin (2.02~beta2-36ubuntu3.9) ...
Setting up grub-pc (2.02~beta2-36ubuntu3.9) ...
Installing for i386-pc platform.
Installation finished. No error reported.
Generating grub configuration file ...
Warning: Setting GRUB TIMEOUT to a non-zero value when GRUB HIDDEN TIMEOUT is se
Found linux image: /boot/vmlinuz-4.4.0-53-generic
Found initrd image: /boot/initrd.img-4.4.0-53-generic
Found memtest86+ image: /boot/memtest86+.elf
Found memtest86+ image: /boot/memtest86+.bin 
done
Setting up libgail-3-0:amd64 (3.18.9-lubuntu3.3) ...
Setting up apt-transport-https (1.2.20) ...
Setting up cifs-utils (2:6.4-lubuntul.1) ...
STEP 8 
a
Interestingly, Linux Mint, among other distros, 
offers you the ability to chain several commands 
together. In this example, therefore, we can use sudo apt-get 
update && sudo apt-get upgrade. The double ampersand is 
what combines the commands and works perfectly, providing the 
preceding command went without a hitch. It's recommended to 
start any session with the update and upgrade combo.
david@david-mint ~
File Edit View Search Terminal Help
david@david-mint - s sudo apt-get update && sudo apt-get upgrade
Hit:l http://archive.canonical.com/ubuntu xenial InRelease
Hit:2 http://archive.ubuntu.com/ubuntu xenial InRelease
Ign:3 http://www.mirrorservice.org/sites/packages.linuxmint.com/packages serena InRe 
Get:4 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [162 kB]
Hit:5 http://www.mirrorservice.org/sites/packages.linuxmint.corn/packages serena Rele;
Get:6 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [162 kB] 
Get:8 http://security.ubuntu.com/ubuntu xenial-security InRelease [162 kB] 
Fetched 306 kB in 0s (595 kB/s)
Reading package lists... Done
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... Done
The following packages were automatically installed and are no longer required: 
libgkeyfilel.0-cil libgnome-keyringl.0-cil libmono-accessibility4.0-cil libmono-da 
libmono-ldap4.0-cil libmono-sqlite4.0-cil libmono-system-componentmodel-dataannota 
libmono-system-data4.0-cil libmono-system-design4.0-cil libmono-system-enterprises) 
libmono-system-ldap4.0-cil libmono-system-numerics4.0-cil 
libmono-system-runtime-serialization-formatters-soap4.0-cil 
libmono-system-runtime-serialization4.0-cil libmono-system-servicemodel-internals© 
libmono-system-transactions4.0-cil libmono- system-web-applicationservices4.0-cil 
libmono-svstem-web-services4.0-cil libmono-svstem-web4.0-cil libmono-svstem-window:
TERMINAL VS UPDATE MANAGER?
Why use the Terminal to update and upgrade over the Update 
Manager, regardless of the distro youTe using? Some users 
greatly prefer using the Terminal to update their Linux systems 
and accompanying apps, in the belief that it’s better. However, 
that’s not often the case.
Using the Terminal, apt-get upgrade, doesn't handle changing 
dependencies between versions of packages, so if a package 
has its dependent files changed from one version to another, 
then the upgrade is held back.
The Update Manager, or Software Manager (depending on the 
distro), often phasesitsupdatesand marks those packages 
with changed dependencies for updating. However, and this is 
where Linux can often get confusing, sometimes it doesn't.
It all boils down to the developer of the package being 
updated and the way the package is held in the distro's 
repositories and whether the update is classified as stable 
or not. In essence, from the point of view of the user, if you 
update and upgrade using both the Terminal and the Update 
Manager regularly, then you will be as up to date as possible, 
and get the essential and necessary stable versions of the 
packages and core software. If you're looking for cutting edge 
package updates, then it's best to opt fora rolling release 
distro instead.
Linux Coding & Programming
49

Using the Terminal
Install Apps via the 
Terminal-Part 1
There are different ways to install apps and programs on Linux. You can opt for the 
graphical route, using a Software Manager, or you can use the Terminal. Often, the 
Terminal provides better control over the software being installed and sometimes, you 
have no choice in the matter.
COMMAND LINE INSTALLS
Installing an app with the Terminal may require some nifty keyboard work but you get a better sense of what's being installed 
and where.
STEP1
Installing apps form the Terminal is often relatively 
simple. First though, you need to make sure that 
the system is up to date. To do this open up the Terminal and enter: 
sudo apt-get update && sudo apt-get upgrade. Enter 
your password and accept any necessary updates.
STEP 3 
A
You need to enter y to confirm the installation, 
which takes up around 5.5MB of storage in the 
system. Once Stella is installed, you can see again that Mint has 
automatically created the Games category in the Menu as well as 
the app shortcut.
david@david-mint -
File Edit View Search Terminal Help
ldavid@david-mint - $ sudo apt-get update && sudo apt-get upgrade
Hit:l http://archive.canonical.com/ubuntu xenial InRelease
Ign:2 http://www.mirrorservice.org/sites/packages.linuxmint.com/packages serena InRelease
Hit:3 http://archive.ubuntu.com/ubuntu xenial InRelease
Hit:4 http://www.mirrorservice.org/sites/packages.linuxmint.com/packages serena Release
Get:5 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [102 kB]
Get:6 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [102 kB]
Get:8 http://security.ubuntu.com/ubuntu xenial-security InRelease [102 kB]
Fetched 306 kB in 0s (582 kB/s)
Reading package lists... Done
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... Done
0 to upgrade, 0 to newly install, 0 to remove and 0 not to upgrade.
david@david-mint S |
STEP 2 
a
Just as you've seen, sudo apt-get update/upgrade 
and so on are designed to upgrade the software 
that's already installed on the system. How do you install more apps 
though? It just so happens that it’s extraordinarily simple. First you 
need an app to install, so let's use Stella again. Enter: sudo apt- 
get install Stella.
STEP 4
Sometimes, when installing software, you need to 
add the app's Repository. The repository, or repo, 
is simply the remote server location where the software is held, 
along with all its dependencies (the vital libraries and such it needs 
to function). Start by typing in this: sudo add-apt-repository 
ppa:peterlevi/ppa. Press Enter when asked to and add the PPA 
(Personal Package Archive).
50
Linux Coding & Programming

Q Install Apps via the Terminal - Part 1
STEP 5
This adds the repo for the app Variety Wallpaper 
Changer, an Ubuntu-based app that works in Mint 
and changes the wallpaper automatically. Now that the repo is added, 
enter: sudo apt-get update, to update the new information and 
add the contents of the repo to the package database.
STEP 6 J
Now to install Variety, enter: sudo apt-get 
install variety. Press y to confirm and accept 
the installation, and to continue with the install. Once installed, you 
can type variety into the Terminal to run the app.
selecting previously unseiecteo package Iiogexiv2-2:amab4.
(Reading database ... 365690 files and directories currently installed.)
Preparing to unpack .../libgexiv2-2_0.16.8-1 amd64.deb ...
Unpacking Iibgexiv2-2:amd64 (6.10.8-1) ...
Selecting previously unselected package girl.2-gexiv2-0.10:amd64.
Preparing to unpack .../girl.2-gexiv2-0.10 0.10.8-1 amd64.deb ...
Unpacking girl.2-gexiv2-0.10:amd64 (0.10.8-1) ...
Selecting previously unselected package variety.
Preparing to unpack .../variety 0.7.0-git201809151602.8eff230-ppa768~ubuntul8.04 
.lall.deb ...
Unpacking variety (0.7.0-git201809151602.8eff230~ppa768~ubuntul8.04.1) ...
Processing triggers for mime-support (3.60ubuntul) ...
Processing triggers for desktop-file-utils (0.23+linuxmint4) ...
Setting up Iibgexiv2-2:amd64 (0.10.8-1) ...
Processing triggers for libc-bin (2.27-3ubuntul) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
Processing triggers for gnome-menus (3.13.3-llubuntul.l) ...
Processing triggers for hicolor-icon-theme (0.17-2) ...
Setting up girl.2-gexiv2-0.10:amd64 (0.10.8-1) ...
Setting up variety (0.7.0-git201809151602.8eff230~ppa768-ubuntul8.04.1) ...
david@david-Mint
david@david-Mint:
david@david-Hint:~$ variety
REMOVING APPS
In addition to installing apps, the apt command can also be used to remove any apps and helps keep the system tidy and free 
up resources.
STEP1
To uninstall, or remove, the Variety app enter the 
following: sudo apt-get remove variety. 
Entery to continue with the uninstall of the app; notice also that 
you're informed of how much space you’re freeing up on the hard 
drive as a result of removing the app.
STEP 3
When you remove apps from the system you're 
be informed that some packages that were 
automatically installed are no longer required. You already saw in 
the previous tutorial, that you can tidy things up with the following 
command: sudo apt-get autoremove, followed by pressing y 
to accept the process.
david@david-mint -
File Edit View Search Terminal Help
|david@david-mint -- s sudo apt-get remove variety
Reading package lists... Done
Building dependency tree
iReading state information... Done
The following packages were automatically installed and are no longer requ 
libboost-pythonl.58.0 python-pyexiv2 variety-slideshow
Use ’sudo apt autoremove' to remove them.
The following packages will be REMOVED
variety
0 to upgrade, 0 to newly install, 1 to remove and 0 not to upgrade.
After this operation, 2,442 kB disk space will be freed.
jDo you want to continue? [Y/n]
STEP 2
While the ‘apt-get remove' command uninstallsan 
app, it doesn't get rid of the extra clutter that comes 
with an app, such as configuration and library files. To completely 
remove the clutter, enter: sudo apt-get purge variety.
david@david-mint ~
File Edit View Search Terminal Help
|david@david-mint $ sudo apt-get purge variety
Reading package lists... Done
Building dependency tree
Reading state information... Done
Package ‘variety’ is not installed, so not removed
IThe following packages were automatically installed and are no longer requirei 
libboost-pythonl.58.0 python-pyexiv2 variety-slideshow
Use ‘sudo apt autoremove' to remove them.
0 to upgrade, 0 to newly install, 0 to remove and 0 not to upgrade.
david@david-mint - $ 1
STEP 4 
a
Finally, to tidy up all the non-used packages in 
the system, and to remove elements that the 
autoremove command didn't, you can enter: sudo apt-get 
autoclean.These last few steps are vital for keeping your Linux 
Mint setup in good working orderand to trim off the unnecessary 
excess caused by installations and upgrades.
david@david-mint -
File Edit View Search Terminal Help
|david@david-mint -- s sudo apt-get autoclean
Reading package lists... Done
Building dependency tree
Reading state information... Done
david@david-mint S |
Linux Coding & Programming
51

Using the Terminal
Install Apps via the
Terminal-Part 2
Most of the time you'll get to install apps from the Terminal using the standard apt- 
get command. However, sometimes an app demands a little more work. This means 
installing an app from its source code, which isn't as scary as it first sounds.
FROM THE SOURCE
The commands you'll need to become familiar with here are Configure, Make and Install. You'll find a lot of apps use installing 
from source, so it's certainly a skill worth investing time in.
STEP1 
a
Source code files for Linux usually come in the form 
of .TAR.GZ or .TAR.BZ2. Both are compressed files 
holding all the core files needed to 'make' the app. Start off this 
tutorial by creating a new folder in Home: mkdir Vim.
STEP 3 
a
The wget command retrieves content from the 
internet, in this case the .BZ2 file for Vim. To check 
the file was downloaded successfully, enter: Is. According to Mint's 
file system colour key, the compressed file should be displayed in red.
david@david-
File Edit View Search Terminal Help
davldedavld-mlnt -/vim
|david@david-niint ~ $ mkdir Vim 
david@david-mint - $ |
davldedavid-aint vim » wget ftp://ftp.vtn.Org/pub/via/unix/viB-7.4.tar.bz2
--7017-04-26 09:51-40-- ftp-//ftp via nrg/piib/vim/unix/vim-7 4.tar.h72
•> 'vim-7.4.tar.bzZ’
Resolving ftp.vim.org (ftp.vim.org)... 2001:67c:6ec:221:145:22O:21:40. 145.220.21.40 
Connecting to ftp.vin.org (ftp.vm.org)|2001:67c:6ec:221:145:220:21:40|:21... connected. 
Logging in as anonymous ... Logged in!
—» SYST ... done. 
—» PWD ... done.
I—> TYPE I ... done. —> CWD (1) /pub/via/unix ... done.
—» SIZE vin 7.4.tor.bz2 ... 9043207
—> epsv ... done. —> RblK vim-7.4.tar.bzz ... done.
vim 7.4.tar.bz2 
100M-——————————- — 
....................... >1 
9.39H 7.02HB/S in 1.3s
2017-04-26 09:51:42 (7.02 M8/s) - 'vim-7.4.tar.bz2' saved [9043297]
STEP 2 
a
Vim, by the way, is an advanced text editor which 
we'll use as an example to install. Enter the new 
folder, cd Vim, then from within the new Vim folder, enter the 
following command into the Terminal: wget ftp://ftp.vim. 
org/pub/vim/unix/vim-7.4.tar.bz2.
david@david-mint -/Vim
|david$david-mint - s cd Vim
davidgdavid-mint - Viz s wget ftp://ftp.vim.Org/pub/vim/unix/vim-7.4.tar.bz2
- -2017-04-26 09:51:40-- ftp: //ftp.vim. org/pub/viia/unix/vim- 7.4.tar.bz2
■> 'vim-7.4.tar.bz2'
Resolving ftp.vim.org (ftp.vim.org)... 2001:67c:6ec:221:145:220:21:40, 145.220.21.40
Connecting to ftp.vim.org (ftp.vim.org)|2001:67c:6ec:221:145:220:21:40|:21... connected.
Logging in as anonymous ... Logged in!
—> SYST ... done. 
—> PWD ... done.
=> TYPE I ... done. => CWD (1) /pub/via/unix ... done.
—> SIZE vim-7.4.tar.bz2 ... 9843297
-=> EPSV ... done. —> RETR vim-7.4.tar.bz2 ... done.
Length: 9843297 (9.4H) (unauthoritative)
vim-7.4.tar.bz2 
109%[ 
............................................. 1 
9.39H 7.82KB/S in 1.3s
2017-04-26 09:51:42 (7.02 MB/s) - 'vim-7.4.tar.bz2’ saved [9843297]
david@david-mint -/Vim S
STEP 4
We need to uncompress the contents of the file 
now, so enter: tar -xf vim-7.4, tar. bz2 into 
the Terminal. Note: you can type in tar -xf v and press the Tab 
key to auto-fill the remaining file name.
52
Linux Coding & Programming

Q Install Apps via the Terminal - Part 2
STEP 5
If you enter Is again, you'll notice that a new 
folder has been created: vim74; in light blue text 
representing a folder in Mint. It's always handy to create root folders 
for the main app, then as you upgrade apps through this method 
the individual versions will each have their own folder.
STEP 8 
A
You may need to keep installing new dependencies, 
depending on the app. After each new dependency 
is installed, re-run ./configure and when it doesn't report back 
with an error you can continue to the next stage of the installation. 
Note: you may need to search online for some error messages.
david@david-mir
File Edit View Search Terminal Help
david@david-mint -/Vim/vim74
File Edit View Search Terminal Help
ldavid@david-mint ~/Vim s Is 
vim74 vim-7.4. ar.bz2 
david@david-mint ~/Vim s |
checking 
checking 
checking 
checking 
checking 
checking 
checking 
Ichecking
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking 
checking
checking 
checking 
checking
--disable-gpm argument... no
for gpm... no
--disable-sysmouse argument... no 
for sysmouse... no 
for FD CLOEXEC... yes 
for rename... yes 
for sysctl... not usable 
for sysinfo... yes 
for sysinfo.mem unit... yes 
for sysconf... yes 
size of int... 4 
size of long... 8 
size of time t... 8 
size of off t... 8
uint32 t is 32 bits... ok
whether memmove handles overlaps... yes
for xpg4 setrunelocale in -lxpg4... no
how to run man with a section nr... man -s
--disable-nls argument... no
for msgfmt... msgfmt
for NLS... gettextO works
for bindtextdomaincodeset... yes
dlfcn.h presence... yes
for dlfcn.h... yes
for diopen()... no
for dlopenl) in -Idl... yes
STEP 6
Type in cd vim74 to enter the folder, and Is again 
to view its contents. There will likely be a fair number 
of files present; most are the app's core files, while others will be 
labelled README or INSTALL. It's always wise to read these files first 
as they provide valuable information regarding the installation.
STEP 9
With a successful . /configure, the system will 
create a Makefile. This needs to be ’made' by 
entering: make into the Terminal. This may take a while, depending 
on the size of the app.
david@david-mint -/Vim/vim74
File Edit View Search Terminal Help
davidQdavid-mint ~/vim/vim74 $ make
Starting make in the src directory.
If there are problems, cd to the src directory and run make there 
cd src && make first 
makell]: Entering directory •/home/david/Vim/vim74/src■ 
mkdir objects
|CC="gcc -Iproto -DHAVECONFIGH -I/usr/local/include ■ srcdir=. sh ./osdef.sh
gcc -c -I. -Iproto -DHAVECONFIGH -I/usr/local/include -g -02 -U FORTIFY_SOURCE -D FORTIFY_SOURCE=1 
cts/buffer.o buffer.c
'gcc -c -I. -Iproto -DHAVECONFIGH -I/usr/local/include -g -02 -UFORTIFYSOURCE -D FORTIFYSOURCE-1 
cts/blowfish.o blowfish.c
gcc -C -I. -Iproto -DHAVE CONFIG H -I/usr/local/include -g -02 -U F0RTIFY_S0URCE -D FORTIFY_SOURCE-1 
cts/charset.o charset.c
STEP 7
The first part of the installation requires you to enter 
./configure. The ./configure command will check 
your system for any missing dependencies associated with the app. If 
you received an error regarding a C Compiler, then enter: sudo apt- 
get install build-essential. The third-party app Ncurses 
was recorded as missing. We need to install that with: sudo apt- 
get install libncurses5-dev libncursesw5-dev.
checking for tqetent in -Itermlib
no terminal library found
checking for tgetentO... configure: error: NOT FOUND!
You need to install a terminal library, for example ncurses.
davidgdavid-mint
>iai74 s sudo apt-get install libncurses5-dev libncurseswS-dev
Building dependency tree
Reading state infomation... Done 
libtinfo-dev
Suggested packages:
The following NEW packages will be installed 
libncurses5-dev libncurseswS-dev libtinfo-dev
Need to get 450 kB of archives.
After this operation, 2,642 kB of additional disk space will be used.
Do you want to continue? (Y/nJ y
Get:l http://archive.ubuntu.com/ubuntu xenial/iaain amd64 libtinfo-dev amd64 6.0+29168213-lubuntul 177.4 kB)
Get:2 http://archive.ubuntu.com/ubuntu xenial/main amd64 libncurses5-dev amd64 6.0+28168213-lubuntul [175 kB]
Get:3 http://archive.ubuntu.com/ubuntu xenial/iaain amd64 libncurseswS-dev amd64 6.0+20160213-lubuntul (198 kB) 
Fetched 450 kR in As (3.720 kR/s)
STEP 10
Finally, you need to enter: sudo make install 
into the Terminal. This will install the app, and 
make it ready for use in the system. When complete you can execute 
the app, in this case by entering vim into the Terminal or searching 
for it via the Dash.
Linux Coding & Programming 53

Ul 1UU1U1
101 0011
/\ Using the Terminal
(order: 5, 128 bytes)
01
www.bdmpublications.com
restore... done.
exception support... done.
local APIC! 
save and 
SIND FPU
Kernel command line: block2mtd.block2mtd=/dev/hda2,131072,rootfs root=/dev/mtdbl 
ockO rootfstype=jffs2 init=/etc/premit noinitrd console=ttyO console=ttySO,384 
00n8 reboot=bios 
Found and enabled 
Enabling fast FPU : 
Enabling unmasked ! 
Initializing CPU#O 
PID hash table entries: 32 
Detected 1991.657 MHz processor.
Console: colour VGA+ 80x25
console [ttyO] enabled
console [ttySO] enabled
Dentry cache hash table entries: 1024 (order: 0, 4096 bytes)
Inode-cache hash table entries: 1024 (order: 0, 4096 bytes)
Memory: 5112k/8128k available (1497k kernel code, 2624k reserved, 597k data, 196 
k init, Ok highmem) 
virtual kernel memory layout:
fixmap
0xfffb9000 - OxfffffOOO
( 280 kB)
vmalloc
OxclOOOOOO - 0xfffb7000
(1007 MB)
lowmem
Ox c0000000 - 0xc07f0000
( 
7 MB)
.init
0xc0313000 - 0xc0344000
( 196 kB)
.data
0xc027653c - 0xc030bcfc
( 597 kB)
.text
OxcOlOOOOO - 0xc027653c
(1497 kB)
Checking if this processor honours the WP bit even in supervisor mode...Ok.
Calibrating delay using timer specific routine.. 4047.64 BogoMIPS (Ipj=20238210)
DO

1 100101
Did You Know
0011
Linux Kernel 0.01 j
00
01
www.bdmpublications.com
OxbGOOO
OxcOOOO
queue) J, 
Hopefully this will be a rather complete VT102 implementation.
101
00
01
001101 00 01 1
01 1001
console.c
This module implements the console i.<j functions
NOTE!!! We sometimes disable and enable interrupts for a short while 
(to put a word in video IO), but this will work even for keyboard 
interrupts. We know interrupts aren’t enabled when getting a keyboard 
interrupt, as we use trap-gates. Hopefully all is well.
♦include 
♦include 
♦include 
♦include
♦define
♦define
♦define
♦define
♦define
<linux/sched.h>
<linux/tty.h>
<asm/io.h>
<asm/ system. h>
SCREEN_START 
SCREEN_END 
LINES 25 
COLUMNS 80 
NPAR 16
extern void keyboard interrupt(void) ;
static unsigned 
static unsigned 
static unsigned 
static unsigned 
static unsigned 
static unsigned 
static unsigned 
static unsigned 
static unsigned 
static unsigned
long origin=SCREEN_START;
long scr_end=SCREEN_START+LINES*COLUMNS‘2;
long pos;
long x,y;
long top=0,bottom=LINES;
long lines=LINES,columns=COLUMNS;
long state=0;
long npar,par[NPAR];
long ques=0;
char attr=0x07;
0
0
DID YOU KNOW... that the first Linux kernel 
programmed by Linus Torvalds, 
only occupied 65KB of memory? And that since version 0.01 
the Linux kernel now boasts over 18 million lines of code. Not 
bad for a university project that now runs the New York Stock 
Exchange, and powers the US Department of Defence's fleet of 
nuclear submarines.

Using the Terminal
Creating a File Using 
the Terminal
Using the Terminal, youTe able to create folders, files and even execute Linux Mint 
apps. In truth, if you didn't have the GUI at hand, you could still accomplish the same 
from the Terminal.
MORE TERMINAL WORK
Creating content using the Terminal isn’t quite as strenuous as it may first appear. Yes, the Terminal can look a daunting place 
for the newcomer, but once mastered it's really quite intuitive.
STEP1 
______ J
Open up the Terminal, and make sure you're in the 
Home folder. If not use the cd ~ command to return 
you to the Home folder from wherever you're currently located.
david@david-mint -
File Edit View Search Terminal Help
STEP 3
Your command line should change to the Test folder 
and if you enter Is (List folder contents) there’ll 
be nothing within the folder; as you've just created it. The mkdir 
command is fairly self explanatory: Make Directory followed by the 
name of yourchoosing.
ldavid@david-mint - $ cd - 
david@david-mint - S |
david@david-mint -/Test
File Edit View Search Terminal Help
ldavid@david-mint - S mkdir Test 
david@david-mint - $ cd Test 
david@david-mint -/Test S Is 
david@david-mint -/Test S
STEP 2 
a
Let's start by creating a new folder within Home, 
and call it Test. The command you'll need is 
mkdi r Test. Press Enter to create the folder when you've typed 
in the command, then cd Test and press Enter. This will Change 
Directory (hence CD) to the newly created Test folder.
STEP 4
To create an empty text file, called Test.txt, enter 
in the Terminal: touch Test .txt. You can then 
use Is to view the new file in the folder. Touch is a standard Linux 
command that allows the creation of files without the need to open 
a text editor, save the file, then close the editor.
david@david-mint -/Test
File Edit View Search Terminal Help
ldavid@david-mint - s mkdir Test 
davidfadavid-mint s cd Test 
david@david-mint -/Test S |
david@david-mint -/Test
File Edit View Search Terminal Help
ldavid@david-mint 
S mkdir Test
david@david-mint 
$ cd Test
david@david-mint 
/Test $ Is
david@david-mint 
-/Test S touch Test.txt
david@david-mint 
- 'Test S Is
Test.txt 
david@david-mint -/Test S
56
Linux Coding & Programming

(^Creating a File Using the Terminal
STEP 5
Let's say you now wanted to create a text file, we’ll 
call itTest2.txt, complete with some content. To do 
> Test2. txt. This will create the file Test2.txt and
STEP 8
A
so, enter: cat
put the Terminal into an editing mode.
Xed is a GUI app, and you can enter text and save 
the file, or any file, accordingly by using the app's 
main window, and the File > Save, or File > Save As functions from 
its top menu bar options.
david@davi
File Edit View Search Terminal Help
Test2.txt (-/Test)
Edit View Search Tools Documents Help
david@david-mint - s mkdir Test 
david@david-mint - $ cd Test 
david@david-mint -/Test S Is 
Idavid@david-mint -/Test s touch Test.txt 
david@david-mint -/Test S Is 
Test.txt
david@david-mint -/Test S cat > Test2.txt
+1 New
(J Open...
ai Save
Pj Save As...
G1 Revert
15 Print Preview
*5? Print..
Ctrl+N
Ctrl+O
X IP 6
Ctrl+S
Shrft+Ctrl+S
Shift+Ctrl+P
Ctrl+P
Ctrl+W
mg the Cat command from the Terminal. Cool, isn't it.
X Close
B< Quit
Ctrl+Q
STEP 6
You'll notice that the cursor is flashing below the 
cat > Test2 .txt command, without the usual 
prompt. This editing mode will allow you enter the text that the file 
will contain. Enter some text, then press Ctrl+D to exit and write the 
contents to the file.
STEP 9
If, however, you prefer to remain working in the 
Terminal to edit/save/create files, you can use 
Nano. Nano is a simple Terminal-based text editor. To try it with 
the example, enter: nano Test2. txt. There's a menu along the 
bottom of the screen. To exit and save any content in Nano, press 
Ctrl+Xand follow the on-screen instructions.
david@david-mint -/Test
File Edit View Search Terminal Help
ldavid@david-mint - $ mkdir Test 
david@david-mint S cd Test 
david@david-mint -/Test S Is 
david@david-mint -/Test S touch Test.txt 
davidiedavid-mint -/Test S Is 
Test.txt
david@david-mint -.Test s cat > Test2.txt 
This is text entered using the Cat command from the Terminal. Cool, isn't it. Pressing Ctrl+D now... 
david@david-mint -/Test S
david@david-mint -/Test
File Edit View Search Terminal Help 
GNU nano 2.5.3 
File: Test2.txt
jjhis is text entered using the Cat command from the Terminal. Cool, isn't it. Pressing Ctrl+D now...
STEP 7
STEP 10
We've used the Terminal to launch a Mint app, 
Xed, but any app can be launched from within the 
Terminal. For example, try: firefox, and press Enter. Close Firefox 
to return to the Terminal. Providing you know the name of the app, 
it can run from the Terminal. Additionally, entering firefox& opens
Of course you don't always have to use the Terminal 
to enter text into a file. Mint comes with a text 
editor called Xed, which is similar to Windows' Notepad. To view the 
previously created file in Xed, type into the Terminal: xed Test2. 
txt, and press Enter.
Linux Coding & Programming
57

Using the Terminal
Creating and 
Removing Directories
As with creating files in the Terminal, you can also create and delete directories, or 
folders if you prefer. Directories form the structure of your file system, without logical 
directories the filing system would be in utter chaos.
MANAGING FOLDERS
Learning how to create and delete folders in the Terminal is an important Mint, and indeed Linux overall, skill to master. Here's 
the basics for you to try out.
STEP1
a
With the Terminal open enter cd ~ to make sure 
you're in your own Home directory. Now enter Is 
to view the current folders you have housed in the Home directory. 
You'll notice that folders are labelled in Mint in cyan (light blue). 
Let's start by creating a new directory. Enter: mkdi r testdi r.
STEP 3
david@david-mint ~
File Edit View Search Terminal Help
If you were to enter the command again, mkdir 
testdi r, you'll receive a message stating: mkdi r: 
cannot create directory ‘testdir’: File exists.lt 
goes without saying then, that you're only able to have one uniquely 
named directory within the current directory. However, as Linux is 
case-sensitive, you can have Testdir, TestDir, testDirand so on.
|david@david-mint - $ cd -
jdavid@david-mint - S Is
Desktop Documents Downloads Fonts mapfile Music Pictures Public Templates Test Videos Vim 
davidiedavid-mint s mkdir testdir 
|david@david-mint - s |
david@david-mint -
File Edit View Search Terminal Help
|david@david-mint - s cd -
david@david-mint - $ Is
Desktop Documents Downloads Fonts mapfile Music Pictures Public Templates Test Videos Vim 
davidedavid-mint - S mkdir testdir 
david@david-mint - $ Is
Desktop Documents Downloads Fonts mapfile Music Pictures Public Templates Test testdir Videos Vim 
davidQdavid-mint - S mkdir testdir 
mkdir: cannot create directory ‘testdir’: File exists 
david$david-mint I |
STEP 2
If you now enter Is again, you'll see that the new 
directory, testdir, has been created alongside the 
other directories in the Home area. Obviously the command mkdir 
is what creates the directory, and no doubt you've already guessed 
it stands for Make Directory.
File Edit View Search Terminal Help
david@david-mint -
david^david-mint - 
david@david-mint - 
Desktop Documents Downloads 
david@david-mint - S
STEP 4
You can create directories within directories you've 
already created. For example, enter the testdir 
directory with cd testdir/followed by Is to list the folder structure. 
Naturally there's nothing present, asyou'vejust created the directory. 
Now drop back to Home with cd ~, and enter mkdi r testdi r/ 
reports. Go back to the testdir, cd testdir/, and Is again.
david@david-mint -/testdir
File Edit View Search Terminal Help
ldavid@david-mint - S cd testdir/ 
david@david-mint /testdir S Is 
david@david-mint -/testdir $ cd - 
david@david-mint 
s mkdir testdir/reports
david@david-mint 
$ cd testdir/
david@david-mint -/testdir $ Is 
reports
david@david-mint -/testdir $
58
www.pclpublications.com

(^Creating and Removing Directories
STEP 5
The command to create directories is quite logical, 
therefore. You'll create the directory, and any sub­
directories within. However, what if you want to create a directory 
and a sub-directory in a single command? Make sure you're at Home 
(cd ~) and enter:mkdir -p Temp/finances. Now, cd Temp/, and 
Is to list the new directory.
STEP 8
A
Now that we've created some directories, let’s see 
about removing them. Start by entering the testdir 
directory and listing its contents: cd testdir/, then Is. The previously 
created reports sub-directory is present. One way to remove it is to 
enter: rmdir reports, then Is again to confirm it's not there.
david@david-mint -/Temp
File Edit View Search Terminal Help
david@david-mint -/testdir
File Edit View Search Terminal Help
david@david-mint - s mkdir -p Temp/finances 
david@david-mint - S cd Temp/ 
david@david-mint -/Temp s Is 
finances
david@david-mint -/Temp s |
ldavid@david-mint 
david@david
*mint
 
reports 
david@david-mint 
david@david-mint 
david@david-mint
- s cd testdir/
-/testdir $ Is
-/testdir s rmdir
-/testdir $ Is
-/testdir $
reports
STEP 6
The -p option is what enables the mkdir command 
to create the sub-directory as well as the parent 
directory. In Linux, commands always follow the same structure: 
Command, Option, and Argument. In the previous step example, 
command (mkdir), option (-p), and argument (Temp/finances).
STEP 9
a
A quick warning: removing a directory in the 
Terminal doesn't place it in the Mint Rubbish Bin, via 
Nemo file manager. The same goes for any files, too. If you remove a 
directory from the Terminal command then it's gone for good.
File Edit View Search Terminal Help
david@david-mint - S mkdir -p Temp/finances|
STEP 7
If you want to drill down into the various options 
available for the mkdir command, you can enter 
mkdir --help into the Terminal. This will provide a quick help 
guide detailing the options and how the command structure works.
david@david-mint -
File Edit View Search Terminal Help
!david@david-mint - s mkdir --help
Usage: mkdir [OPTION]... DIRECTORY...
Create the DIRECTORY(ies), if they do not already exist.
Mandatory arguments to long options are mandatory for short options too.
- 
m, --mode=MODE set file mode (as in chmod), not a=rwx - umask
- 
p, --parents 
no error if existing, make parent directories as needed
- 
v, --verbose print a message for each created directory
- 
Z 
set SELinux security context of each created directory
to the default type
- -context[=CTX] like -Z, or if CTX is specified then set the SELinux 
or SMACK security context to CTX
- -help display this help and exit
- -version output version information and exit
GNU coreutils online help: <http://ww.gnu.org/software/coreutils/>
Full documentation at: <http://ww.gnu.org/software/coreutils/mkdir> 
or available locally via: info '(coreutils) mkdir invocation' 
david@david-mint - $ |
STEP 10 
A
Rrndir will only remove empty directories, to 
remove directories containing sub-directories, or 
even files, you'll need to use the rm command with the -R option. 
For example, on the Temp/finance directories, use rm -R Temp. 
A quick Is reveals that the parent folder and all of its contents are 
removed. Careful when using this command.
david@david-mint -
File Edit View Search Terminal Help
Idavidgdavid-mint - $ Is
Desktop Documents Downloads Fonts mapfile Music Pictures Public iHffi Templates Test 
davidgdavid-mint S rm -R Temp 
david@david-mint - j Is
Desktop Documents Downloads Fonts mapfile Music Pictures Public Templates Test testd: 
david@david-mint S |
www.pclpublications.com
59

Using the Terminal
Fun Things to do 
in the Terminal
Despite the seriousness of an operating system, the Linux community are certainly no 
strangers to a bit of fun. The developers over the years have created and inserted all 
manner of fun and odd elements into the Terminal.
TERMINAL FUN
You'll be working exclusively in the Terminal for these next two sections, so start warming up your fingers. After all, all work 
and no play... as the saying goes.
STEP1 
A
The first command we're going to use is si, it's 
not installed by default so enter: sudo apt-get 
install si. The command can be run with si and when executed 
will display a Steam Locomotive travelling across the screen (hence 
'si'). Entering LS, note the uppercase, also works.
STEP 3
If you've ever fancied having the computer read a 
random fortune out to you, then you're in luck. Most 
distros require you to install the fortune app, however Linux Mint 
differs somewhat by having it already pre-loaded. All you need to do 
is enter the command fortune into the Terminal, and enjoy.
david@david-mint ~
File Edit View Search Terminal Help
ldavid@david-mint - $ fortune
|You are destined to become the commandant of the fighting men of the 
department of transportation.
david@david-mint ~ S |
STEP 2 
a
Fans of Star Wars even get a fix when it comes to 
the Terminal. By linking to a remote server via the 
telnet command, you can watch Episode IV: A New Hope being 
played out, albeit in ASCII. To view this spectacle, enter: telnet 
towel.blinkenlights.nl.
STEP 4
The rev command is certainly interesting, and at 
first what seems a quite useless addition to the 
OS. However, it can be used to create some seemingly unbreakable 
passwords. Enter: rev, now type some text, when you press Enter 
next, everything you typed in will be reversed. Press Ctrl+C to exit.
david@david-mint ~
file Edit View Search Terminal Help
|david@david-mint - S rev
This is reversed text. Great for creating passwords with! 
!htiw sdrowssap gnitaerc rof taerG .txet desrever si sihT 
r"Cdavid@david-mint $ |
60
Linux Coding & Programming

Q Fun Things to do in the Terminal
STEP 5
If you're stuck trying to work out all the possible 
factors forany particular number, simply enter 
factor followed by the number. For example, factor 7 doesn't 
offer much output, whereas factor 60 displays more.
STEP 8 
A
If you really want to expand the whole cow thing, 
for whatever reason, then pipe the fortune 
command through it, with: fortune I cowsay; and for the 
graphical cow equivalent: fortune I xcowsay. Plus, there's 
always cowthink. Try: cowthink ...This book is awesome.
STEP 6
There's a fine line between the rather cool and 
really-quite-weird. Having an ASCII cow repeat text 
to you could potentially fall in the latter. Enter cowsay followed 
by any text you want, such as: cowsay Linux Mint is ace!. 
In fact, you can even output the Is command through the cow, by 
entering: Is I cowsay.
STEP 9
The command toilet doesn't inspire much 
confidence, we'll admit. However, it's not as bad as 
it first sounds. Start by installing it with: sudo apt-get install 
toilet. Then when installed, type something along the lines of: 
toilet David. Or perhaps list the contents of the current folder 
through it, with: Is I toilet.
david@david-mint ~
Ale Edit View Search Terminal Help
david@david-mint -
ldavid@david-mint - s cowsay Linux Mint is ace!
File Edit View Search Terminal Help
< Linux Mint is ace! >
david@david-mint - $ I
)\/\
w |
II
s | cowsay
david@david-mint - s toilet David
mmmm 
" 
#
# 
"m mmm 
m 
m 
mmm 
mmm#
# 
# " 
# 
"m 
m" 
# 
#" "#
# 
# m“"H# 
#m# 
# 
# 
#
I #mmm“ "mm"# 
# mm#mm "#m##
/ Desktop Documents Downloads Music \ 
| Pictures Public Templates Test Videos | 
\ Vim /
ldavid@david-mint - S |
)\/\ 
w |
II
Idavid@david-mint -
STEP 7
To further the cow element, there's even a graphical, 
i.e. non-Terminal, cow available. Install it with: 
sudo apt-get install xcowsay, then when it's installed enter 
something similar to cowsay, such as: xcowsay BDM Publications.
STEP 10 
A
Expanding the toilet command, you can actually 
generate some decent looking graphics through 
it. For example, try this: toilet -f monol2 -F metal David. 
You can entertoilet --help, fora list of the command line 
arguments to expand further.
Linux Coding & Programming 61

Using the Terminal
More Fun Things to 
do in the Terminal
If the previous list of fun, and quite bizarre, things to do in the Terminal has you 
wanting more, you're in luck. We've put together another batch of some useful, and 
some not so useful, commands for you to try out.
MORE FUN, YAY
Since the Terminal session is already open, and your keyboard digits are nicely warmed up, here are another two pages of 
Terminal nonsense.
STEP1 
a
Remember the old ZX Spectrum days of computing, 
when you could type in 10 print "Hello", 20 goto 10 
and Hello would list down the screen? Well, in Linux Mint you can do 
the same. Simply enter yes followed by some text, i.e. yes Linux 
is ace. It'll keep going until you press Ctrl+C.
Ale Edit View Search Terminal Help
File Edit
View Search Terminal
Help
david@david-Mint: -
david@david-Mint: S yes Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
Linux is ace!
davidfftdovid-Bint s sudo opt get install one 
Reading package lists... Done 
Building dependency tree
Reading state information... Done
The following NEW packages will be installed
6 to upgrade, 1 to newly install, 0 to remove and 0 not to upgrade.
Need to get 35.7 kB of archives.
After this operation, 147 kB of additional disk space will be used.
Get:l http://archive.ubuntu.com/ubuntu xenial/universe amd64 oneko amd64 
fetched 35./ kB in Bs (/34 kB/s)
^Selecting previously unselected package oneko.
Preparing to unpack .../oneko 1.2.sakura.6-llamd64.deb ...
Unpacking oneko (1.2.sakura.6-ll) ...
Processing triggers for man-db (2.7.5-1) ...
Processing triggers for bamfdaemon (0.5.3-bzr0+16.04.20160824-0ubuntul)
Rebuilding /usr/share/applications/bamf-2.index...
Processing triggers for desktop-file-utils (6.22-lubuntu5.1) ...
Processing triggers for gnome-menus (3.13.3-6ubuntu3.1) ...
[Processing triggers for mime-support (3.59ubuntul) ...
(Setting up oneko (1.2.sakura.6-ll) ... 
Idavldmdavid-mlnl - s uneku 
□
1.2.sakura.6-ll
STEP 3
Having a little white cat chase your mouse pointer 
around the desktop may sound like a terrible waste 
of time. Oddly though, it isn't. Enter: sudo apt-get install 
oneko, then type oneko to have the cat appear. Move your 'mouse' 
cursor around the screen and the cat will chase it. Use Ctrl+C to
exit the action.
STEP 2 
a
The Matrix was one of the most graphically copied 
films ever released; there's even a version of the 
Matrix code available for Linux Mint. Install it with: sudo apt-get 
install cmatrix. When it's done enter: cmatrix and follow 
the white rabbit, Neo. Unlike the real Matrix though, you can press 
Ctrl+C to exit.
STEP 4
This entry is a little more serious than the previous.
It's called the Fork Bomb and what it does, basically, 
is continually replicate itself until it has used up all the available 
system resources, thus causing your computer to crash. You don't 
have to try it but it's interesting nonetheless. Simply enter: (){ 
: I :& }: and be prepared to reboot.
62
Linux Coding & Programming

More Fun Things to do in the Terminal
STEP 5
Stringing several commandsand piping them 
through other commands is what makes scripting 
such a powerful element to an OS. Using the while command, for 
example, together with toilet, can yield some impressive results. 
Enter:while true; do echo “$(date ‘+%D %T’ I toilet 
-f term -F border —metal)”; sleep 1; done.
STEP 8 
A
Used as a music demo from the old Amiga and
DOS days, the bb command reminds us of getting 
hold of three and a half inch floppies crammed with all manner of 
demoscene goodies. We've already installed bb from the previous 
step, so just enter bb. Follow the on-screen instructions, and turn up 
yourvolume.
STEP 6 
a
Talking computers were the craze of the 80s, enter: 
espeak “Hello, this is Linux Mint” 
to have the computer repeat the text inside the quotes to you. 
Make sure your volume is turned up, and try the following: Is > 
folders.txt && espeak -f folders, txt. This will have Mint 
read back the contents of the Is command.
STEP 9
This entry is in two parts. First you need to get 
hold of the necessary packages: sudo apt- 
get install libcurses-perl. When that's done enter: cd 
Downloads/ && wget http://search.cpan.org/CPAN/ 
authors/id/K/KB/KBAUCOM/Term-Animation-2.4.tar.gz 
&& tar -xf Term-Animation-2.4.tar.gz && cd Term- 
Animation-2. 4/.Themperl Makefile.PL && make && make 
test && sudo make install.
STEP 7
A roaring ASCII fire isn't the most useful command 
to have at your disposal, but it’s fun. Install it with: 
sudo apt-get install libaa-bin, then when installed use: 
aafire. It's not exactly warming but you get the idea. To expand 
the above, enter: sudo apt-get install bb caca-utils, 
then, cacafire.
STEP 10 -J
With that little lot done, onto the next. Enter: cd 
.. && wget http://www.robobunny.com/ 
projects/asciiquarium/asciiquarium.tar.gz && tar 
-xf asciiquarium.tar.gz && cd asciiquarium_l.1/ 
&& chmod +x asciiquarium. Providing all went well, enter ./ 
ascii qua ri urn and enjoy your very own ASCII-based aquarium.
Linux Coding & Programming 63

Using the Terminal
Linux Tipsand Tricks
As you've seen, the Linux Terminal is quite an exceptional environment. With a Few 
extra apps installed, and a smidgen of command knowledge, incredible, and often 
quite strange, things can be accomplished.
TAKING COMMAND
There are countless Linux tips, secrets, hacks and tricks out there. Some are very old, originating from Linux's Unix heritage, 
while others are recent additions to Linux lore. Here's our favourite ten tips and tricks.
EASTER EGGS
Emacs, the text editor, is a great piece of 
software, however, did you know it also 
contains a hidden Easter Egg? With Emacs installed (sudo apt-get 
install emacs25), drop to a Terminal session and enter:
emacs -batch -I dunnet
Dunnet is a text adventure written by Ron Schnell in 1982, and 
hidden in Emacs since 1994.
david@david-Mint:~ 
<•- O
File Edit View Search Terminal Help
david@david-Mint: $ emacs -batch -I dunnet
Loading 00debian-vars...
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...
Loading debian-ispell...
Loading /var/cache/dictionaries-common/emacsen-ispell-default.el (source)...
Loading /var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...
Dead end
You are at a dead end of a dirt road. The road goes to the east.
In the distance you can see that it will eventually fork off. The 
trees here are very tall royal palms, and they are spaced equidistant 
from each other.
There is a shovel here.
>get shovel
Taken.
>1
TERMINAL BROWSING
Ever fancied being able to 
browse the Internet from 
the Terminal? While not particularly useful, it is quite a fascinating 
thing to behold. To do so, enter:
sudo apt-get install elinks
elinks
Enter the website you want to visit.
MOON BUGGY 
a
Based on the classic 1982 arcade game, 
Moon Patrol, Moon Buggy appeared on 
the home computers of 1985 amid much praise. It's a cracking Atari 
game, and it's available in the Linux Terminal by entering:
sudo apt-get install moon-buggy
Then:
moon-buggy 
Enjoy.
Moon-Buggy version 1.0.51, Copyright 2004 Jochen Voss <voss@seehuhn.de^ 
Moon-Buggy comes with ABSOLUTELY NO WARRANTY; for details type 'w'. 
This is free software, and you are welcome to redistribute it 
undei certain conditions; type ’c‘ for details.
MH MH 00000 
00000 NN N
H M M M 0 
00 
ONN N
MMMMO 
00 
ONN N
MMHO 
00 
ONNN
M HO 00 ONNN 
M M 00000 
00000 N NN
BBBBBB U U GGGGG GGGGG Y 1 
0 DU UG GG GYY 
RRRRRR U 
II G 
G 
Y Y
B B U U G GGG G GGG Y 
B BU 
UG 
GG 
GY
ODDODD UUUUU GGGGG GGGGG YY
LET IT SNOW 
A
Snowing in the Terminal console isn't 
something you come across every day. If 
you're interested, however, enter:
wget https://gist.githubusercontent com/sontek/ 
1505483/raw/7d024716ea57e69fb52632fee09f42 
753361c4a2/snowjob.sh
chmod +x snowjob.sh
./snowjob.sh
64
Linux Coding & Programming

Q Linux Tips and Tricks
MEMORY HOGS 
_______________J
Linux, simply enter:
If you need to see what appsare 
consuming the most memory on
ps aux I sort -rnk 4
Back in the days of dial-up connections, the online world 
was made up of Bulletin Board Systems. These remote 
servers provided hang-outs for users to chat, swap code, play games 
and more. Using telnet in Linux, we can still connect to some active 
BBSes:
This sorts the output by system memory use.
File Edit View Search Terminal Help
david@david-Mint: '/Downloads
david@david-Mint: -•/DownloadsS ps aux | sort -rnk 4
davld
1617 2. 7 6.4 2450020 130700 ?
si
12:31
2:17 cinnamon --replace
root
946 6. 4 4.5 490820 92688 tty7
Ssl+ 12:31
0:21 /usr/lib/xorq/Xorq -core :0 -seat seat© -auth
/var/run/lightdm/root/:0 -nolisten tcp vt7 -novtswitch
d b vid
1778 0 0 2.9 735064 59968 ?
SI
12:31
0:00 mintupdate 
.
david
1667 6 0 2.5 877384 52968 7
SI
12:31
0:02 nemo-desktop
david
1/31 e 0 2.4 6b9288 49124 t
SI
12:31
0:00 cinnamon - sc reensa ve r
david
15550 0 6 1.7 589160 36296 7
Ssl
13:52
0:01 /usr/lib/gnome-terminal/gnome-terminal-server 1
david
1676 0 0 1.6 647812 33788 ?
SI
12:31
0:00 nm-applet
david
975 0 0 1.5 562908 31248 ?
Ssl
12:31
0:01 cinnamon session session cinnamon
david
1841 0 0 1.5 249436 31888 7
SI
12:32
0:00 /usr/bin/python3 /usr/share/system-config-pri
nter/applet.py
david
1629 0. 8 1.5 433088 31088 7
SI
12:31
0:00 bluebe r ry-obex-agent
david
1479 0. 0 1.5 766192 31256 7
SI
12:31
0:00 /usr/lib/gnome-online-accounts/goa-daemon
root
330 0. 0 1.4 109004 29444 7
5<s
12:31
0:O0 /lib/systemd/systemd-journald
david
1671 0. 0 1.4 408832 29356 7
SI
12:31
0:00 /usr/bin/python3 /us r/bin/cinnamon- killer-dae
1614 0. 0 1.4 183356 28892 7
12:31
0:00 /usr/bi n/pythnn3 /usr/hi n/c innamnn-1aunrher
david
1153 0. 0 1.3 480788 27680 7
SI
12:31
0:00 /us r/lib/x86_64-linux-gnu/cinnaroon- settings -d
aemon/csd-backg rot■nd
david
1120 0. 0 1.2 504844 26388 7
SI
12:31
6:00 /us r/lib/x86_64-linux-gnu/cinnamon•settings -d
aemon/csd-power
david
1130 O. 0 1.1 447156 22836 7
si
12:31
0:00 /usr/lib/x86_64-linux-gnu/cinnamon- settings-d
aemon/csd-keyboard
1129 6. 
csd-orint-nc
0 1.1 445368 23132 7
si
12:31
0:00 /us i /lib/x86_64 • linux-gnu/iiiiiidinoii -se Llings-d
telnet battlestarbbs.dyndns.org
There are countless operational BBSes available, check out https:// 
www.telnetbbsguide.com/bbs/list/detail/, for more.
b 6 
& 
6
<A Over 450 Doors to play
43 Message Nets & Newsgroups
U M 19 inter-BBS League Networks
47 CD-ROMS online to download
r.Log in 
6
telnet://battestarbbs.dyndns.org 
nNew user 
6
http://hattlestarhbs.dyndns.nrg 
nGuest account 
6
f.Email the sysopt. 
'.Disconnect 
6
SYSOP HaRK i
mark6147e@yahoo.com
SHREDDER
A
When you delete a file, there's a chance of 
someone with the right software being able 
to retrieve it. However, to securely and permanently delete a file, 
use Shred:
DIRECTORY TREES 
_________________ J
single command, you can use:
If you want to create an entire 
directory (or folder) tree with a
shred -zvu NAMEOFFILE.txt
Replace NAMEOFFILE with the name of the file to delete.
mkdir -p New-Dir/
{subfolderl,subfolder/,subfolder3,subfolder4}
This createsa New-Dirwith foursub folders within.
david@>david-Mint: -/Downloads
File Edit View Search Terminal Help
david@david-Mint:-/Downloads! Is
snowjob.sh TopSecretFile.txt vim74
david@david-Mint:-/Downloads! shred -zvu TopSecretFile.txt
shred: TopSecretFile.txt: removing
shred: TopSecretFile.txt: renamed to 00000000000000000
shred: TopSecretFile.txt: removed
david@david-Mint: Downloads! |
david@david-Mint: -/New-Dir
File Edit View Search Terminal Help
david@david-Mint:$ mkdir -p New-Dir/{subfolderl,subfolder2,subfolder3,subfolder 
david@david-Mint:~$ cd New-Dir/ 
david@david-Mint:-/New-Dir$ Is 
subfolderl subfolderZ subfolder3 subfolder4 
david@david-Mint:-/New-Dir!
ASCII ART
a
ASCII art can be quite striking when applied to 
some images. However, it's often difficult to 
get just right. You can create some great ASCII art from the images 
you have by using img2txt:
FORGOTTEN COMMANDS
It's not easy trying 
to remember all the
available Linux commands. Thankfully, we can use apropos to help 
us. Simply use it, along with a description of the command:
img2txt NAMEOFIMAGEFILE.png
Replace NAMEOFIMAGEFILE 
with the actual name of the 
image file on your system. If 
img2txt install installed, use: 
sudo apt-get install 
caca-utils.
apropos “copy files”
apropos “rename files”
david@david-Mint: -
File Edit View Search Terminal Help
david@david-Mint: $ apropos "copy files"
cp (1) 
- copy files and directories
cpio (1) 
- copy files to and from archives
install (1) 
- copy files and set attributes
david@david-Mint:-! apropos "rename files"
rename.ul (1) 
- rename files
zipnote (1) 
- write the comments in zipfile to stdout, edit comments and rename
david@david-Mint:-S |
Linux Coding & Programming 65

Using the Terminal
Linux and the
Big Bang
Linux is colliding particles, so we can 
understand how the universe works.
www.bdmpublications.com

Did You Know...
DID YOU KNOW...
that Linux is at the heart of the 
science behind the Large Hadron 
Collider? Using a combination 
of Red Hat Linux and CentOS 
(an ultra-stable distro built from 
the Red Hat core) as the base 
distributions of choice, scientists, 
developers and engineers have 
created SL-Scientific Linux.
Using SL as the base, the clever 
people at CERN have developed 
several different versions of their 
own custom Linux distro to help 
with all aspects of the LHC. Most 
notable is SLC, or Scientific Linux 
CERN, also known as CERN6. 
According to reports, there are 
over 36,000 systems running SL, 
and over 15,000 running SLC.
67

Using the Terminal
Creating Bash Scripts 
- Part 1
Eventually, as you advance with Linux Mint, you'll want to start creating your own 
automated tasks and programs. These are essentially scripts, Bash Shell scripts 
to be exact, and they work in the same way as a DOS Batch file does, or any other 
programming language.
GET SCRIPTING
A Bash script is simply a series of commands that Mint will run through to complete a certain task. They can be simple or 
remarkably complex, it all depends on the situation.
STEP1
You'll be working within the Terminal and with a 
text editor throughout the coming pages. There 
are alternatives to the text editor, which we’ll look at in a moment 
but for the sake of ease, we'll be doing our examples in Xed. Before 
you begin, however, run through the customary update check: sudo 
apt-get update && sudo apt-get upgrade.
davii
File Edit View Search Terminal Help
ldavid(&david-mint - $ sudo apt-get update && sudo apt-get upgr 
[sudo] password for david:
Hit:1 http://ppa.launchpad.net/openshot.developers/ppa/ubuntu 
Hit:2 http://ppa.launchpad.net/peterlevi/ppa/ubuntu xenial In 
Hit:3 http://archive.canonical.com/ubuntu xenial InRelease 
Hit:4 http://ppa.launchpad.net/thomas-schiex/blender/ubuntu x 
Hit:5 http://archive.ubuntu.com/ubuntu xenial InRelease
Ign:6 http://www.mirrorservice.org/sites/packages.linuxmint.c 
Get:7 http://archive.ubuntu.com/ubuntu xenial-updates InRelea 
Hit:8 http://ppa.launchpad.net/wine/wine-builds/ubuntu xenial 
Hit:9 http://www.mirrorservice.org/sites/packages.linuxmint.c 
Hit:10 http://repository.spotify.com stable InRelease
STEP 3
To begin with, and before you start to write any 
scripts, you need to create a folder where you can 
put all our scripts into. Start with mkdir scripts, and enter the 
folder cd scripts/. This will be our working folder and from here 
you can create sub-folders if you want of each script you create.
davic
File Edit View Search Terminal Help
david@david-mint - s mkdir scripts 
david@david-mint - $ cd scripts/ 
david@david-mint -/scripts 5 |
STEP 2
There are several text editors we can use to create 
a Bash script: Xed, Vi, Nano, Vim, GNU Emacs and 
so on. In the end it all comes down to personal preference. Our 
use of Xed is purely due to making it easier to read the script in the 
screenshots you see below.
STEP 4 
a
Windows userswill be aware that in order for a 
batch file to work, as in be executed and follow the 
programming within it, it needs to have a .BAT file extension. Linux 
is an extension-less operating system but the convention is to give 
scripts a .sh extension.
|david@david-mint -/scripts S Is 
scriptl.sh script2.sh script3 
david@david-mint -/scripts S |
File Edit View Search Terminal Help
sh script4.sh
davii
68
Linux Coding & Programming

Q Creating Bash Scripts - Part 1
STEP 5 
______ J
Let's start with a simple script to output something 
to the Terminal. Enter xed helloworld. sh.
This will launch Xed and create a file called helloworld.sh. In Xed, 
enter the following: #!/bin/bash, then on a new line: echo 
Hello World!.
STEP 8 -J
When you enter Is again, you can see that the 
helloworld.sh script has now turned from being 
white to green, meaning that it's now an executable file. To run 
the script, in other words make it do the things you've typed into it, 
enter: ./helloworld.sh.
STEP 6
The #!/bin/bash line tells the system what Shell 
you're going to be using, in this case Bash. The hash 
(#) denotes a comment line, one that is ignored by the system, the 
exclamation mark (!) means that the comment is bypassed and will 
force the script to execute the line as a command. This is also known 
as a Hash-Bang.
STEP 9 j,
Although it’s not terribly exciting, the words ’Hello 
World!' should now be displayed in the Terminal. 
The echo command is responsible for outputting the words after 
it in the Terminal, as we move on you can make the echo command 
output to other sources.
*helloworld.s
File Edit View Search Tools Documents Help
o o □» ~ 
| x o 6 o. a
|_ | * *helloworld.sh  X
*h<i
File Edit View Search Tools Documents Help
*30 Di »» »* X iP 6 Q. 9,
B *helloworld.sh X
#! /bin/bash
echo Hello World! This is my first script in Linux Mil
#!/bin/bash
echo Hello World!
File Edit
david@da 
david@da 
hellowor 
david@da 
david@da 
hellowor 
david@da 
Hello Wc 
david@da
STEP 7
You can save this file, clicking File > Save, and exit 
back to the Terminal. Entering Is, will reveal the 
script in the folder. To make any script executable, and able to 
run, you need to modify its permissions. Do this with chmod +x 
helloworld. sh. You need to do this with every script you create.
STEP 10 -J
Think of echo as the old BASIC Print command. It 
displays either text, numbers or any variables that 
are stored in the system, such as the current system date. Try this 
example:echo Hello World! Today is $(date +%A).The 
$ (da te +%A) is calling the system variable that stores the current day 
of the week.
davi
File Edit View Search Terminal Help
|david@david-mint -/scripts $ xed helloworld.sh 
david@david-mint -/scripts $ Is 
helloworld.sh
david@david-mint -/scripts S chmod +x helloworld.sh 
david@david-mint -/scripts S |
Linux Coding & Programming 69

Using the Terminal
Creating Bash Scripts 
- Part 2
Previously we looked at creating your first Bash script, Hello World, and adding a 
system variable. Now you can expand these and see what you can do when you start to 
play around with creating your own unique variables.
VARIABLES
Just as in every other programming language a Bash script can store and call certain variables from the system, either generic 
or user created.
STEP1 
a
Let's start by creating a new script called hello.sh; 
xed hello.sh. In it enter: #!/bin/bash, then, 
echo Hello $1. Save the file and exit Xed. Back in the Terminal 
make the script executable with: chmod +x hello.sh.
STEP 3 
a
The output now will be Hello David. This is because 
Bash automatically assigns variables for the user, 
which are then held and passed to the script. So the variable 
'$1' now holds ’David'. You can change the variable by entering 
something different: ./hello.sh Mint.
STEP 2
As the script is now executable, run it with . / 
hello.sh. Now, as you probably expected a simple 
'Hello' is displayed in the Terminal. However, if you then issue the 
command with a variable, it begins to get interesting. For example, 
try ./hello.sh David.
STEP 4
You can even rename variables. Modify the hello, 
sh script with the following: firstname=$l, 
surname=$2, echo Hello Sfirstname Ssurname. Putting 
each statement on a new line. Save the script and exit back into 
the Terminal.
david@davh
File Edit View Search Terminal Help
File Edit View Search Tools Documents Help
e Oj ** - | X (P 6 Q. &
|david@david-mint -/scripts S ./hello.sh
Hello
david@david-mint -/scripts s ./hello.sh David
Hello David
david@david-mint -/scripts s |
a *hello.sh  x
#!/bin/bash
firstname=$l
surname=$2
echo Hello Sfirstname $surname|
70
Linux Coding & Programming

Q Creating Bash Scripts - Part 2
STEP 5
When you run the script now you can use two 
custom variables: ./hello, sh David Hayward. 
Naturally change the two variables with your own name; unless 
you're also called David Hayward. At the moment we're just printing 
the contents, so let's expand the two-variable use a little.
STEP 8 
A
Let's expand things further. Create a new script 
called greetings. sh. Enter the scripting as below 
in the screenshot, save it and make it executable with the chmod 
command. You can see that there are a few new additions to the 
script now.
d
File Edit View Search Terminal Help
david@david-mint -/scripts S ./hello.sh David Haywarc
Hello David Hayward
david@david-mint -/scripts S ./hello.sh Linux Mint
Hello Linux Mint
david@david-mint -/scripts s
greetings.sh
File Edit View Search Tools Documents Help
o o - x ip e <19.
9 greetings.sh x
#!/bin/bash
echo -n "Hello, what is your name? " 
read firstname
echo -n "Thank you, and what is your surname? " 
read surname 
clear
echo Hello $firstname $surname, how are you today?
STEP 6
Create a new script called addition. sh, using 
the same format as the hello.sh script, but 
changing the variable names. Here we've added firstnumber and 
secondnumber, and used the echo command to output some 
simple arithmetic by placing an integer expression, echo The sum 
is $(($firstnumber+$secondnumber)). Save the script, and 
make it executable (chmod +x addition, sh).
addition.sh
File Edit View Search Tools Documents Help
+n 6 
** ** x iP 6 
<=k &
davic
File Edit View Search Terminal Help
david@david-mint -/scripts s ./addition.sh 1 2
The sum is 3
david@david-mint -/scripts S ./addition.sh 34 45
The sum is 79
david@david-mint -/scripts S ./addition.sh 65756 1456
(The sum is 67212
david@david-mint -/scripts s ./multiplication.sh 2 8
The sum is 16
david@david-mint -/scripts $
STEP 9
We've added a -n to the echo command here 
which will leave the cursor on the same line as the 
question, instead of a new line. The read command stores the 
users’ input as the variables firstname and surname, to then read 
back later in the last echo line. And the clear command clears 
the screen.
dav
File Edit View Search Terminal Help
Hello David Hayward, how are you today? 
david@david-mint -/scripts s
9 addition.sh X
#!/bin/bash
firstnumber=$l
secondnumber=$2
echo The sum is $(($firstnumber+$secondnumber))
STEP 7
When you now run the addition.sh script we can 
enter two numbers: ./addition. sh 1 2. The 
result will hopefully be 3, with the Terminal displaying 'The sum 
is 3'. Try it with a few different numbers and see what happens. 
See also if you can alter the script and rename it do multiplication, 
and subtraction.
STEP 10 -J
As a final addition, let's include the date variable 
we used in the last section. Amend the last line 
of the script to read: echo Hello Jfirstname Ssurname, how 
are you on this fine $(date +%A)?. The output should 
display the current day of the week, calling it from a system variable.
greetings.sh
File Edit View Search Tools Documents Help
f] 6 
- X IP 6 
0. 9.
9 greetings.sh X
#!/bin/bash
echo -n “Hello, what is your name? "
read firstname
echo -n "Thank you, and what is your surname? " 
read surname
clear
echo Hello $firstname ^surname, how are you on this fine $(dat
Linux Coding & Programming
71

Using the Terminal
Creating Bash Scripts 
- Part 3
In the previous pages we looked at some very basic Bash scripting, which involved 
outputting text to the screen, getting a user's input, storing it and outputting that to 
the screen; as well as including a system variable using the Date command. Now let's 
combine what you've achieved so far and introduce Loops.
IF, THEN, ELSE
With most programming structures there will come a time where you need to loop through the commands you've entered to 
create better functionality, and ultimately a better program.
STEP1
Let’s look at the If, Then and Else statements now, 
which when executed correctly, compare a set of 
instructions and simply workout that IF something is present, THEN 
do something, ELSE do something different. Create a new script 
called greeting2. sh and enter the text in the screenshot below 
into it.
STEP 3 
a
The next line, ELSE, is what happens if the variable 
doesn't equal 'David'. In this case it simply outputs 
to the screen the now familiar ’Hello...'. The last line, the Fl 
statement, is the command that will end the loop. If you have an If 
command without a Fi command, then you get an error.
david@david
File Edit View Search Terminal Help
Hello Pink Floyd, how are you on this fine Wednesday? 
david@david-mint -/scripts S
STEP 2 
a
Greeting2.sh is a copy of greeting.sh but with a 
slight difference. Here we've added a loop starting 
at the if statement. This means, IF the variable entered is equal to 
David the next line, THEN, is the reaction to what happens, in this 
case it will output to the screen 'Awesome name,' followed by the 
variable (which is David).
david@davi
File Edit View Search Terminal Help
[Awesome name, David
david@david-mint -/scripts $ |
STEP 4
You can obviously play around with the script a 
little, changing the name variable that triggers a 
response; or maybe even issuing a response where the first name 
and surname variables match a specific variable.
72
Linux Coding & Programming
*greetings.sl
File Edit View Search Tools Documents Help
+n 6 
** ** x ig 6 
&
9 *greetings.sh x
#!/bin/bash
echo -n Hello, what is your name? 
read firstname
echo -n "Thank you, and what is your surname? " 
read surname 
clear 
if [ "$firstname = "David" ]

Q Creating Bash Scripts - Part 3
MORE LOOPING
You can loop over data using the FOR, WHILE and UNTIL statements. These can be handy if you're batch naming, copying or 
running a script where a counter is needed.
STEP1 
a
Create a new script called count. sh. Enter the 
text in the screenshot below, save it and make it 
executable. This creates the variable 'count' which at the beginning 
of the script equals zero. Then start the WHILE loop, which WHILE 
count is less than (the LT part) 100 will print the current value of 
count in the echo command.
STEP 4
The UNTIL loop works much the same way as the 
WHILE loop only, more often than not, in reverse. 
So our counting to a hundred, using UNTIL, would be: until 
[ Scount -gt 100 ]; do. The difference being, UNTIL count is 
greater than (the gt part) one hundred, keep on looping.
3 *count.sh x
#!/bin/bash
until [ $count -gt 190 ]; do 
echo Scount 
let count=count+l
done
II
*count.sh (
File Edit View Search Tools Documents Help
0 6 
«■' »» X IP 6 Q, 9.
STEP 2 
a
Executing the count.sh script will result in the 
numbers 0 to 99 listing down the Terminal screen; 
when it reaches 100 the script will end. Modifying the script with the 
FOR statement, makes it work in much the same way. To use it in our 
script, enter the text from the screenshot into the count.sh script.
STEP 5
You're not limited to numbers zero to one hundred. 
You can, within the loop, have whatever set of 
commandsyou like and execute them as many times as you want 
the loop to run for. Renaming a million files, creating fifty folders 
etc. For example, this script will create ten folders named folderl 
through to folderl 0 using the FOR loop.
*count.sh
File Edit View Search Tools Documents Help
0 6 Di 
X 0 C 9.
9 *countsh  x
*count.sh
File Edit View Search Tools Documents Help
3 6 Di 
X £> 6 
9 9
9 *countsh X
#! /bin/bash
for count in {0..1600..2};do
echo Scount
let count=count+l 
done
#!/bin/bash
for count in {0..100}; do 
echo Scount 
let count=count+l 
done
I
STEP 3
The addition we have here is: for count in 
{0. . 100}; do. Which means: FOR the variable 
'count' IN the numbers from zero to one hundred, then start the 
loop. The rest of the script is the same. Run this script, and the same 
output should appear in the Terminal.
9 *count.sh  X
#! /bin/bash
for count in {0..1O0}; do 
echo $count
Let count=count+l
done
STEP 6 
a
Using the FOR statement once more, we can 
execute the counting sequence by manipulating the 
{0..100} part. This section of the code actually means {START.END.. 
INCREMENT}, if there's no increment then it'sjust a single digit up to 
the END. For example, we could get the loops to count up to 1000 in 
two's with: for count in {0. .1000. .2}; do.
Linux Coding & Programming 73

Using the Terminal
Creating Bash Scripts 
- Part 4
You've encountered user interaction with your scripts, asking what the user's name 
is and so on. You've also looked at creating loops within the script to either count or 
simply do something several times. Let's combine and expand some more.
CHOICES AND LOOPS
Let's bring in another command, CHOICE, along with some nested IF and ELSE statements. Start by creating a new script called 
mychoice. sh.
STEP 1
The mychoice.sh script 
is beginning to look a 
lot more complex. What 
we have here is a list 
of four choices, with 
three possible options. 
The options: Mint, Is, 
and Awesome will be 
displayed if the user 
presses the correct 
option key. If not, then 
the menu will reappear, 
the fourth choice.
mycho
File Edit View Search Tools Documents Help
XI <3 Oj 
x iP 6
S mychoice.sh x
#! /bin/bash
ichoice=4
•cho "3. Awesome"
echo -n "Please choose an option (1, 2 or 3) "
while [ (choice -eq 4 ]; do
read choice
if [ (choice -eq 1 ] ; then 
echo 'You have chosen: Mint'
else
if [ (choice -eq 2 ] ; then 
echo "You have chosen: Is"
else
if [ (choice -eq 3 ] ; then
echo You have chosen: Awesome" 
else
echo "Please make a choice between 1 to 3"
echo 1. Mint"
echo 2. Is"
echo -n "Please choose an option (1, 2 or 3) 
choice=4
STEP 3
You can, of course, increase the number of choices 
but you need to make sure that you match the 
number of choices to the number of IF statements. The script can 
quickly become a very busy screen to look at. This lengthy script 
is another way of displaying a menu, this time with a fancy colour 
scheme too.
STEP 2
If you follow the script through you soon get the 
hang of what's going on, based on what we've 
already covered. WHILE, IF, and ELSE, with the Fl closing loop 
statement will run through the optionsand bring you back to the 
start if you pick the wrong option.
david@david-mint -/scripts
File Edit View Search Terminal Help
B/bin/bash
E=‘echo -e';e='echo -en';trap "R;extt" 2
ESC»S< Se "\e")
TPUT(){ Se -\e[$£lJ;S{2}H-;}
CLEAR(){ Se '\ec';}
CIVISOt Se "\e[?25l":}
ORAW(){ $e •\e
*?\e(8";}
WRITE(){
MARK(){ Se "\e[7n";} 
unharkoi Se "\e[27n";} 
R(){ CLEAR ;stty sane;Se "\ec\e[37;44n\e(
HEAD(){ DRAW 
for each tn S(seq 1 13):do 
SE " x 
x*
done 
WRITE;MARK;TPUT 1 S 
SE "BASH SELECTION MENU 
"fUNMARK;)
1=0; CLEAR; CIVIS;NULL=/dev/null
FOOT(){ HARK;TPUT 13 S 
prtntf "ENTER • SF1 FCT.NFXT 
"zllNHARK;}
ARROW(){ read -s -n3 key 2>/dev/null >12 
if [( Skey = SESC(A ]);then echo up;ft 
tf [[ Skey = $ESC[B ]];then echo dn;ft;}
M0(){ TPUT 4 20; Se "Login Info";}
Hl(){ TPUT 5 20; Se "Network";}
M2(){ TPUT 6 20; Se "Disk";}
M3(){ TPUT 7 20; Se "Routing';}
M4(){ TPUT 8 20; Se "Tine";}
M5(){ TPUT 9 20; Se "ABOUT ';}
M6(){ TPUT 10 20; $e "EXIT ";}
LH=6
MENU(){ for each tn S(seq 0 $LM);do MS(each};done;}
POS(){ tf ([ Scur .. up ]];then ((t--));ft 
tf (f $cur == dn ]):then <(i«));fl 
tf [[ St -It 0 ]];then l=SLH;ft 
tf [[ St gt SLM ]];then t=O;ft;} 
REFRESH(){ after=S((Ul)); before=$«i-l» 
tr [[ sberore -it o ]];then berore=siM;ft 
tf [{ Safter -gt SLM ]];then after=O;fl 
If [[ $j -It St ]];then UNMARK;H$before;else UNMARK;HSafter;fl 
tf ll Safter -eq n ]] jj [ Shefnre -eq $1M ];then 
UNMARK; HSbefore; HSafter;ft;j=$t;UNHARK;HSbefore;MSafter;}
INIT(){ R;HEAO;FOOT;HENU;}
SC(){ REFRESH;MARK;SS;$b;cur= ARROW ;}
ES(){ MARK;Se "enter = naln menu ";Sb;read;INlT;);INIT 
while [[ *$O
*
 1= " ' ]]; do case St tn
0) S=HO;SC;tf [[ Scur «. ”' ]];then R;$e "\n$(w 
)\n';ES;ft;;
1) S=H1;SC;lf [( Scur — "' ]]:then R;$e "\nS(tfconftg )\n";FS;fi::
2) S=M2;SC;tf [[ Scur = “' jj;then R;Se "\nS(df -h 
)\n";ES;ft;;
3) S=H3;SC;tf [[ Scur =. "  ]];then R;$e "\nS(route -n )\n';ES;ft;;
*
4) S=M4;SC;lf [[ Scur == 
]];then R;Se "\nS(date 
)\n";ES;ft;;
5) S=H5;SC;tf [[ scur == "" ]j;then K;Se "\nS(Se by 01o)\n";ES;ft;;
6) S=M6;SC;tf [[ Scur “' ]];then R;extt 0;fi;; 
esac;POS;done
ldavid@david-mint -/scripts $ ./mychoice.sh 
1. Mint 
2. Is 
3. Awesome
IPlease choose an option (1, 2 or 3) 1
You have chosen: Mint 
davidQdavid-mint -/scripts $ ./mychoice.sh 
1. Mint 
2. Is 
3. Awesome
IPlease choose an option (1, 2 or 3) 2
You have chosen: Is 
david@david-mint -/scripts S ./mychoice.sh 
1. Mint 
2. Is 
3. Awesome
Please choose an option (1, 2 or 3) 3
You have chosen: Awesome 
david@david-mint -/scripts $ ./mychoice.sh 
1. Mint 
2. Is 
3. Awesome
STEP 4
a
You can use the 
arrow keys and Enter 
in the menu setup in the script. Each 
choice is an external command that 
feeds back various information. Play 
around with the commandsand 
choices, and see whatyou can come 
up with. It's a bit beyond what we've 
looked at but it gives a good idea of 
what can be achieved.
Network 
Disk 
Routing 
Time 
ABOUT 
EXIT
74
Linux Coding & Programming

Q Creating Bash Scripts - Part 4
CREATING A BACKUP TASK SCRIPT
One of the most well used examples of Bash scripting is the creation of a backup routine, one that automates the task as well 
as adding some customisations along the way.
STEP1 
a
Avery basic backup script would look something 
along the lines of: #!/bin/bash, then, 
tar cvfz ~/backups/my-backup.tgz -/Documents/.This 
will create a compressed file backup of the -/Documents folder, 
with everything in it, and put it in a folder called /backups with the 
name my-backup.tgz.
STEP 4
Once the -/backups folder is created, we can now 
create a new subfolder within it based on the
Time Stamp variables you set up at the beginning. Add mkdir -p 
$dest/”$day Smonth Syear”. It's in here thatyou put the 
backup file relevant to that day/month/year.
a backupl.sh x
#!/bin/bash
clear
# 
Time stamp
day=$(date +%A)
month=$(date +%B) 
year=$(date +%Y)
# 
Folders 
dest=~/backups 
sauce=~/Documents
if [ -d $dest ]; then
echo "Backup folder exists"
else
echo "Backup folder does not exist! I'm now creating it...''; (mkdir -p $dest) 
echo
read -p Press any key to continue. -nl -s
mkdir -p $dest/ $day $month $year"
STEP 2 
a
While perfectly fine, we can make the simple script 
a tot more interactive. Let's begin with defining 
some variables. Enter the text in the screenshot into a new backup, 
sh script. Notice that we've misspelt 'source' as 'sauce', this is 
because there's already a built-in command called 'source' hence the 
different spelling on our part.
STEP 5 
ji
With everything in place, you can now enter the 
actual backup routine, based on the Tar command 
from Step 5. Combined with the variables, you have: tar cvfz 
$dest/”$day $month $year”/DocumentsBackup.tgz 
$sauce. In the screenshot, we added a handy "Now backing up..." 
echo command.
E9 backupl.sh X
#!/bin/bash
clear
# Time stamp 
day=$(date +%A) 
month=$(date +%B) 
year=$(date +%Y)
# Folders 
dest=~/backups 
sauce=~/Documents
E9 backupl .sh X
#!/bin/bash
clear
# 
Time stamp
day=$(date +%A)
month=$(date +%B)
year=$(date +%Y)
# 
Folders
!dest=~/backups
sauce=~/Documents
if [ -d Sdest ]; then
echo “Backup folder exists"
else
echo Backup folder does not exist! I'm now creating it..."; (mkdir -p Sdest)
read -p "Press any key to continue., -nl -s
mkdir -p Sdest/Sday Smooth Syear
echo "Now backing up. Please wait..."
tar cvfz Sdest/ Sday Smonth Syear /DocumentsBackup.tgz Ssauce
STEP 3
The previous script entries allowed you to create 
a Time Stamp, so you know when the backup was 
taken. You also created a 'dest' variable, which is the folder where 
the backup file will be created (-/backups). You can now add a 
section of code to first check if the -/backups folder exits, if not, 
then it creates one.
a backupl.sh X
# !/bin/bash
clear
# 
Time stamp
day=$(date +%A)
imonth=$(date +%B)
year=$(date +%Y)
I# Folders
dest=~/backups
sauce=~/Documents
if [ -d $dest ]; then
echo "Backup folder exists"
else
echo "Backup folder does not exist! I'm now creating it... ; (mkdir -p Sdest) 
echo 
fi
STEPS 
A
Finally, you can add a friendly message: echo
“Backup complete. All done...’’.The 
completed script isn't too over-complex and it can be easily 
customised to include any folder within your Home area, as well as 
the entire Home area itself.
ES backupl.sh X
# 
! /bin/bash
# 
Time stamp 
day=S(date +%A) 
month=$(date +%B) 
year=$(date +%Y)
# 
Folders 
'dest=~/backups
sauce=~/Documents
if [ -d Sdest ]; then
echo Backup folder exists”
echo 'Backup folder does not exist! I'm now creating it..."; (mkdir -p Sdest)
read -p "Press any key to continue.." -nl -s
mkdir -p Sdest/Sday Smonth Syear”
echo "Now backing up. Please wait...”
tar cvfz Sdest/Sday Smonth Syear /DocumentsBackup.tgz Ssauce
Linux Coding & Programming
75

Using the Terminal
Creating Bash Scripts 
- Part 5
The backup script we looked at previously can be further amended to incorporate 
choices, user-interaction with regards to where the backup file will be copied to and so 
on. Automating tasks is one of the main benefits of Bash scripting, a simple script can 
help you out in many ways.
EASY AUTOMATION AND HANDY SCRIPTS
Entering line after line of commands to retrieve system information, find a file or rename a batch of files? A script is a 
better answer.
STEP1
Let's start by creating a script to help display the 
Mint system information; always a handy thing 
to have. Create a new script called sysinfo. sh and enter the 
following into Xed, or the text editor of your choice.
STEP 3
Each of the sections runs a different Terminal 
command, outputting the results under the 
appropriate heading. You can include a lot more, such as the current 
aliases being used in the system, the current time and date and so 
on. Plus, you could also pipe all that information into a handy HTML 
file, ready to be viewed in a browser.
david@david-mmt -/scripts
File Edit View Search Terminal Help
david@david-mint -/scripts $ ./sysinfo.sh > sysinfo.html 
david@david-mint -/scripts S
STEP 4
Although there are simple Terminal commands to 
help you look for a particular file or folder, it's often 
more fun to create a script to help you. Plus, you can use that script 
for other non-technical users. Create a new script called look4. sh, 
entering the content from the screenshot below.
STEP 2
We've included a couple of extra commands in 
this script. The first is the -e extension for echo, 
this means it'll enable echo interpretation of additional instances 
of a new line, as well as other special characters. The proceeding 
'31;43m' element enables colour for foreground and background.
Iook4.sh (-/
File Edit View Search Tools Documents Help
+n 6 
** ** X lD 6 9k
S Iook4.sh X
#!/bin/bash
target=-/
read name
output=$( find "$target" -iname .Sname 2> /dev/null )
if It -n $output ]]; then
echo $output
else
echo "No match found"
til
76
Linux Coding & Programming

Q Creating Bash Scripts - Part 5
STEP 5
When executed the script waits for input from the 
user, in this case the file extension, such asjpg, 
mp4 and so on. It's not very friendly though. Let's make it a little 
friendlier. Add an echo, with: echo -n “Please enter the 
extension of the file you’re looking for: “Just 
before the read command.
STEP 8 
A
The output from colours.sh can, of course, be 
mixed together, bringing different effects 
depending on whatyou want to the output to say. For example, 
white text in a red background flashing (orblinking). Sadly the 
blinking effect doesn't work on all Terminals, so you may need to 
change to a different Terminal.
Normal Text
Default Default
Default
target=~/
a *look4.sh x
#!/bin/bash
read name
Default Yellow 
Default
output=${ find "$target -iname Sname 2> /dev/null )
if [[ -n ”$output” ]]; then
echo “$output ’ 
else 
echo "No match found
STEP 6
Here’s an interesting, fun kind of script using the 
app espeak. Install espeak with sudo apt-get 
install espeak, then enter the text below into a new script called 
speak, sh. As you can see it's a rehash of the first greeting script 
we ran. Only this time, it uses the variables in the espeak output.
Default Light gray 
Default
Default Light green
Default Light yellow 
Default Light blue 
Default Light magenta 
Default Light cyan 
Default White
Default 
Default 
Default 
Default _ _ _ . 
Default |eIIow
a speak.sh x
#!/bin/bash
echo -n "Hello, what is your first name? • 
read firstname
echo -n "Thank you, and what is your surname? “ 
read surname 
clear
espeak Hello Sfirstname Ssurname, how are you on this fine s(date
Default 
Black 
Red 
Green
Default Magenta 
Default Cyan 
Defau^U
^Hpark gray
Default Light red 
Default Liaht areen 
Default
ight blue 
Default Light magenta 
Default Light cyan
STEP 7
We briefly looked at putting some colours in the 
output for our scripts. Whilst it's too long to dig a 
little deeper into the colour options, here's a script that outputs 
what's available. Create a new script called colours. sh and enter 
the text (see below) into it.
ES colours.sh X
#!/bin/bash
clear
echo -e "Normal \eIlmBold"
echo -e "Normal \e[2mDim"
echo -e "Normal \e[4mUnderlined"
echo -e "Normal \e[5mBlink"
echo -e Normal \e[7minverted"
echo -e "Normal \e[8mHidden"
echo
echo -e \e[0mNormal Text"
echo
echo -e Default \e[39mDefault"
echo -e Default \e[30mBlack"
echo -e "Default \e[31mRed"
echo -e "Default \e[32mGreen" 
echo -e "Default \e[33mYellow" 
echo -e "Default \e[34mBlue" 
echo -e "Default \e[35mMagenta" 
echo -e Default \e[36mCyan 
echo -e Default \e[37mLight gray'" 
echo -e "Default \e[90mDark gray'" 
echo -e "Default \e[91mLight red" 
echo -e "Default \e[92mLight green" 
echo -e "Default \e[93mLight yellow” 
echo -e "Default \e[94mLight blue” 
echo -e "Default \e[95mLight magenta" 
echo -e "Default \e[96mLight cyan" 
echo -e "Default \e[97mWhite”
echo
echo -e "Default \e[49mDefault"
echo -e "Default \e[40mBlack"
echo -e "Default \e[41mRed”
echo -e "Default \e[42mGreen" 
echo -e "Default \e[43mYellow" 
echo -e "Default \e[44mBlue" 
echo -e Default \e[45mMagenta“ 
echo -e 'Default \e[46mCyan 
echo -e "Default \e[47mLight gray" 
echo -e "Default \e[100mDark gray" 
echo -e "Default \e[101mLight red'" 
echo -e Default \e[102mLight green" 
echo -e "Default \e[103mLight yellow" 
echo -e "Default \e[104mLight blue" 
echo -e "Default \e[105mLight magenta’ 
echo -e "Default \e[106mLight cyan'" 
echo -e "Default \e[107mWhite"
STEP 9
Whilst we're on making fancy scripts, how about 
using Zenity to output a graphical interface? 
Enter whatyou see below into a new script, mmenu. sh. Make it 
executable and then run it. You should have a couple of dialogue 
boxes appear, followed by a final message.
S mmenush x
#!/bin/bash
firstname=$<zenity --entry --title=“Your Name" --text=”What is your fust name7 )
surname=$(zenity --entry --title=”Your Name" --text="What is your first surname’")
zenity --info --title«”Hellol" --text="Welcome to Linux Mint.\n\n Have fun, Sfirstname Ssurname
STEP 10 
a
While gaming in a Bash script isn't something 
that’s often touched upon, it is entirely possible, 
albeit, a little basic. If you fancy playing a game, enterwget 
http://bruxy.regnet.cz/linux/housenka/housenka.sh, 
make the script executable and run it. It’s in Polish, written by 
Martin Bruchanov but we're sure you can modify it. Hint: the title 
screen is in Base64.
Linux Coding & Programming
77

Using the Terminal
Pi x Linux =
The Perfect Combination
The Raspberry Pi is a remarkable piece of hardware, and to help drive its potential 
it needs a remarkable operating system. Thankfully, Linux is the default and 
recommended OS of choice for the Pi, and together they make a winning team.
When the Raspberry Pi was in its developmental stages its designers needed to ensure that they were creating a piece of 
hardware that could offer much more than simply being a cheap, but small, computer.
a headless (a powered device that doesn't need a keyboard, mouse or 
monitor attached, as you connect to it remotely) computer from which 
you can connect to and learn how to use Linux and how to code.
The Pi needed to be flexible with what it could do, it needed to have 
room to grow into more ambitious project concepts and ideas, and 
it needed to do so in as easy to use fashion as possible. The goal was 
to create a universal learning platform, that students of any age 
could expand on and tinker with, while learning new concepts such 
as programming, electronics, and computing. Naturally, once 
the hardware was developed, the only real choice of 
operating system was of course, Linux.
The versatility of Linux is legendary. This incredible 
core OS is so malleable that it can be steered 
toward near any aspect of computing, from 
supercomputing to robotics, the space industry to 
more terrestrial engineering; education and 
science, manufacturing and the Internet. 
Think of an industry, and you will likely 
find a Linux installation somewhere in the 
background keeping it all together.
Raspbian is the recommended operating system for the Raspberry 
Pi, a customised Debian-based distribution that comes packed with 
a collection of useful tools that cater for coding, electronics, and 
general desktop computing duties. Alongside the appsare pre- 
loaded modules to help get the most from each of the programming 
languages you decide to learn and use, as well as software to 
hardware modules that will enable you to power and use the 
hardware specific items unique to the Pi. For example, there are 
Python modules that interact with the Raspberry Pi's40-pin GPIO, 
allowing you to create content for any of the Hardware Attached on 
Top devices.
This combination is what makes the Raspberry Pi an excellent base 
of operations to learn not only coding on, but also Linux in general.
Raspbian, being Debian-based, will be able to run any of the 
Terminal commands listed in this book, as Linux Mint and even
Ibuntu are also Debian-based. And since the Raspberry is so 
nail, and costs very little setup, you're able to have both your 
regular, Windows or macOS computers, and have a Raspberry Pi as
78
Linux Coding & Programming

{^Pi x Linux = The Perfect Combination
WHICH PI?
There are several Raspberry Pi models available, with each 
offering something slightly different from the others. The 
most recent Pi released is the Raspberry Pi 3 Model B+, and 
while this model is slightly more expensive than some of the 
other examples, it is the most powerful and feature-rich Pi 
available. Overall, it's probably best to start experimenting 
with the Pi using the Pi 3 Model B+, then moving on to one 
of the other models as you develop your skills and focus on a 
particular project, such as the need to use one of the Pi Zero 
models, with a smaller footprint and WiFi enabled connectivity.
BEYOND RASPBIAN
PI, LINUX AND CODING
The flexibility of the Raspberry Pi’s ARM processor means 
that it's capable of running other operating systems beyond
As previously mentioned, the Raspberry Pi is an excellent code 
base, and with Linux as the backbone you’re able to start learning
Raspberry Pi 3 Model B
Raspberry Pi 3 Model B+
Raspberry Pi Zero
Raspberry Pi 1 Model A+
Raspberry Pi Zero W
Raspberry Pi 1 Model B+
Raspbian. Still keeping with Linux, you can instead install 
Ubuntu MATE, Pidora (a Fedora-based distribution), Lakka, 
PiPlay (a retro emulation distribution) and Arch Linux ARM. 
There are also systems based loosely on the Linux kernel, such 
as Android, Minibian, and Chromium OS.
There's Windows 10 loT Core, FreeBSD, RISC OS PI, Plan 9 and,
how to code in a multitude of different programming languages.
Bash scripting works perfectly, since Raspbian is Linux, and 
Debian-based, and you can easily expand your scripts to 
encompass much of the Pi’s functionality. Aside from creating 
backup scripts, you can also create scripts that can access the 
GPIO pins on the Pi, and in so be able to control LEDs, and even
remarkably, AROS - an Amiga OS clone. Needless to say, that 
once you've finished experimenting with one version of Linux, 
just as you would with a desktop version of Linux, you can hop 
to another on the Raspberry Pi and see how that one works, 
and whether it will work for you.
more complex HATs.
Python is by far the most popular choice for beginners, and 
Raspbian comes pre-installed with everything you will need to 
get the most from your Python experience. There are countless 
pre-loaded modules, as well as the most recent stable release of
the language.
C++ is one of the most powerful programming languages 
to learn. It's used for games, apps, and even entire operating
systems. The Raspberry 
Pi comes with a great C++ 
editor, that's easy to use 
and can help you develop 
amazing content. Whichever 
way you decide to take your 
coding and Linux adventure, 
the Raspberry Pi is an 
excellent platform from 
which to begin on.
caca for X 
_ □ x
Linux Coding & Programming
79

Using the Terminal
Command Line
Quick Reference
When you start using Linux full time, you will quickly realise that the graphical 
interfaces of Ubuntu, Mint, etc. are great for many tasks but not great for all tasks. 
Understanding how to use the command line not only builds your understanding of 
Linux but also improves your knowledge of coding and programming in general. Our 
command line quick reference guide is designed to help you master Linux quicker.
TOP 10 COMMANDS
These may not be the most common commands used by everyone but they will certainly feature frequently for many users of 
Linux and the command line.
cd
The cd command is one of the commands you 
will use the most at the command line in Linux. It 
allows you to change your working directory. You 
use it to move around within the hierarchy of your 
file system. You can also use chdir.
mv
The mv command moves a file to a different 
location or renames a file. For example mv file 
sub renames the original file to sub. mv sub 
-/Desktop moves the file 'sub' to your desktop 
directory but does not rename it. You must specify 
a new filename to rename a file.
Is
The Is command shows you the files in your 
current directory. Used with certain options, it lets 
you see file sizes, when files where created and file 
permissions. For example, Is ~ shows you the files 
that are in your home directory.
chown
The chown command changes the userand/ 
or group ownership of each given file. If only an 
owner (a user name or numeric user ID) is given, 
that user is made the owner of each given file, and 
the files’ group is not changed.
cp
The cp command is used to make copies of files 
and directories. For example, cp file sub makes 
an exact copy of the file whose name you entered 
and names the copy sub but the first file will still 
exist with its original name.
cmod
The chmod command changes the permissions on 
the files listed. Permissions are based on a fairly 
simple model. You can set permissions for user, 
group and world and you can set whether each can 
read, write and or execute the file.
pwd
The pwd command prints the full pathname of 
the current working directory (pwd stands for 
"print working directory"). Note that the GNOME 
terminal also displays this information in the title 
barofits window.
rm
The rm command removes (deletes) files or 
directories. The removal process unlinks a filename 
in a filesystem from data on the storage device 
and marks that space as usable by future writes. In 
other words, removing files increases the amount 
of available space on your disk.
clear
The clear command clears your screen if this 
is possible. It looks in the environment for the 
terminal type and then in the terminfo database 
to figure out how to clear the screen. This is 
equivalent to typing Control-L when using the 
bash shell.
mkdir
Short for "make directory", mkdir is used to 
create directories on a file system, if the specified 
directory does not already exist. For example, 
mkdir work creates a work directory. More than 
one directory may be specified when calling mkdir.
80
Linux Coding & Programming

(^Command Line Quick Reference
C:\Commonly_Used_Commands
USEFUL HELP/INFO COMMANDS
The following commands are useful for when 
you are trying to learn more about the system or 
program you are working with in Linux. You might 
not need them every day, but when you do, they 
will be invaluable.
~-
free
The free command displays the total amount 
of free and used physical and swap memory in 
the system. For example, free -m gives the 
information using megabytes.
The sed command opens a stream editor.
A stream editor is used to perform text 
transformations on an input stream: a file or input 
from a pipeline.
df
The df command displays filesystem disk space 
usage for all partitions. The command df-h 
is probably the most useful (the -h means 
dOOUSer
human-readable).
The adduser command adds a new user to the 
system. Similarly, the addgroup command adds a 
new group to the system.
top
The top program provides a dynamic real-time 
view of a running system. It can display 
system summary information, as well as a list 
ueiuser
of processes.
The deluser command removes a user from 
the system. To remove the user’s files and 
home directory, you need to add the - remove - 
home option.
unmame-a
The uname command with the -a option prints
all system information, including machine name, 
dekjfOUp
kernel name, version and a few other details.
The delgroup command removes a group from 
the system. You cannot remove a group that is the 
primary group of any users.
PS
The ps command allows you to view all the 
processes running on the machine. Every 
operating system's version of ps is slightly 
,c-!
different but all do the same thing.
The man man command brings up the manual 
entry for the man command, which is a great place 
to start when using it.
grep
The grep command allows you to search inside a 
number of files for a particular search pattern and 
then print matching lines. An example would be: 
®
grep blah file.
The man intro command is especially useful. 
It displays the Introduction to User Commands, 
which is a well written, fairly brief introduction to 
the Linux command line.
Linux Coding & Programming 81

Using the Terminal
A-Z of Linux Commands
There are literally thousands of Linux commands, so while this is not a complete A-Z, it 
does contain many of the commands you will most likely need. You will probably find 
that you end up using a smaller set of commands over and over again but having an 
overall knowledge is still very useful.
F
factor 
Print prime factors
fdisk 
Partition table
manipulator for Linux
A
aciduser
Add a new user
arch
Print machine architecture
awk
Find and replace text 
within file(s)
B
be
An arbitrary precision 
calculator language
c
cat
Concatenate files and print 
on the standard output
chdir
Change working directory
chgrp
Change the group 
ownership of files
chroot
Change root directory
cksum
Print CRC checksum and 
byte counts
emp
Compare two files
comm
Compare two sorted files 
line by line
CP
Copy one or more files to 
another location
crontab
Schedule a command to 
run ata later time
csplit
Split a file into context- 
determined pieces
cut
Divide a file into 
several parts
D
date
Display or change the 
date & time
de
Desk calculator
dd
Data Dump, convert and 
copy a file
diff
Display the differences 
between two files
dirname
Convert a full path name 
to just a path
du
Estimate file space usage
E
echo
Display message on screen
ed
A line oriented text editor 
(edlin)
egrep
Search file(s) for lines 
that match an 
extended expression
env
Display, set or remove 
environment variables
expand
Convert tabs to spaces
expr
Evaluate expressions
fgrep
Search file(s) for lines that 
match a fixed string
find
Search for files that meet 
a desired criteria
fmt
Reformat paragraph text
fold
Wrap text to fit a 
specified width
format
Format disks or tapes
fsck
Filesystem consistency 
check and repair
G
gawk
Find and Replace text 
within file(s)
grep
Search file(s) for lines that 
match a given pattern
groups
Print group names a user 
is in
gzip
Compress or decompress 
named file(s)
H
head
Output the first part 
of file(s)
hostname
Print or set system name
1
id
Print user and group ids
info
Help info
install
Copy filesand 
set attributes
J
join
Join lines on a 
common field
K
kill
Stop a process 
from running
less
Display output one screen 
ata time
In
Make links between files
locate
Find files
82
Linux Coding & Programming

(^A-Z of Linux Commands
logname
Print current login name
Ipc
Line printer 
control program
Ipr
Offline print
Iprm
Remove jobs from the 
print queue
M
man
See Help manual
mkdir
Create new folder(s)
mkfifo
Make FIFOs (named pipes)
mknod
Make block or character 
special files
more
Display output one screen 
ata time
mount
Mount a file system
N
nice
Set the priority of a 
command orjob
nl
Numberlinesand 
write files
nohup
Run a command immune 
to hangups
p
passwd
Modify a user password
paste
Merge lines of files
pathchk
Check file name portability
pr
Convert text files 
for printing
printcap
Printer capability database
printenv
Print environment variables
printf
Format and print data
Q
quota
Display disk usage 
and limits
quotacheck
Scan a file system for 
disk usage
quotactl
Set disk quotas
R
ram
Ram disk device
rep
Copy files between 
two machines
rm
Remove files
rmdir
Remove folder(s)
rpm
Remote Package Manager
rsync
Remote file copy 
(synchronise file trees)
s
screen
Terminal window manager
sdiff
Merge two files interactively
select
Accept keyboard input
seq
Print numeric sequences
shutdown
Shutdown or restart linux
sleep
Delay for a specified time
sort
Sort text files
split
Split a file into 
fixed-size pieces
su
Substitute user identity
sum
Printa checksum fora file
symlink
Make a new name for 
a file
sync
Synchronise data on disk 
with memory
tac
Concatenate and write 
files in reverse
tail
Output the last part 
of files
tar
Tape Archiver
tee
Redirect output to 
multiple files
test
Evaluate a 
conditional expression
time
Measure Program 
Resource Use
touch
Change file timestamps
top
List processes running on 
the system
traceroute
Trace Route to Host
tr
Translate, squeeze and or 
delete characters
tsort
Topological sort
u
umount
Unmount a device
unexpand
Convert spaces to tabs
uniq
Uniquify files
units
Convert units from one 
scale to another
unshar
Unpack shell archive scripts
useradd
Create new user account
usermod
Modify user account
users
List users currently 
logged in
V
vdir
Verbosely list directory 
contents ('Is -I -b’)
w
watch
Execute or display a 
program periodically
wc
Print byte, word, and 
line counts
whereis
Report all known 
instances of a command
which
Locate a program file in 
the user's path
who
Print all usernames 
currently logged in
whoami
Print the current user id 
and name
X
xargs
Execute utility, passing 
constructed argument list(s)
yes
Printa string 
until interrupted
Linux Coding & Programming 83

Using the Terminal
i;W
At the heart of it lies a complex setup 
of SUSE Linux Enterprise Server, along 
with many custom development 
packages and other software unique
to NASA's projects. The projects 
NASA's Advanced Supercomputing 
Division uses Pleiades for are: The 
Kepler Mission - searching for 
extra-solar Earth-like planets; CFD 
(Computational Fluid Dynamics) 
modelling to help create more 
efficient space launch systems; Dark 
Matter research and simulation; and 
visualisation of Earth's ocean currents, 
building data for the ECCO (Estimating 
the Circulation and Climate of the 
Ocean) Project.
DID YOU KNOW... N/^5S
state-of-the- 
art supercomputing cluster, Pleiades, is 
powered by Linux? Pleiades consists of 
160 racks (11,440 nodes), 245,536 CPU 
cores, a total memory count of 935TB, 
184,320 NVIDIA CUDA cores, and over 
six miles of fibre optic cabling.
tee!

Did You Know...
Good enough
For NASA
www.bdmpublications.com

Index J)
Python 
on Linux
Linux Coding & Programming
81

(^Python on Linux
Python is a Fantastic programming 
language, combining ease oF use with 
a generous helping oF power to allow 
the user to create both minor utilities or 
perFormance-heavy computational tasks.
However, there's more to Python than 
simply being another programming 
language. It has a vibrant and lively 
community behind it that shares 
knowledge, code and project ideas, as 
well as bug Fixes For Future releases.
We've used a Raspberry Pi For this section 
oF the book, as it's Linux based and one oF 
the best coding platforms available. The 
Pi's Features and Functions make it the 
perfect Python programming partner, so 
let's get started.
88 
Why Python?
90 
How to Set Up Python in Linux
92 Starting Python for the First Time
94 Your First Code
96 Saving and Executing Your Code
98 Executing Code From the Terminal
100 Did You Know...Space Invaders
102 Numbers and Expressions
104 Using Comments
106 Working with Variables
108 User Input
110 Creating Functions
112 Conditions and Loops
114 Python Modules
116 Did You Know...Debugging
Linux Coding & Programming

Python on Linux
Why Python?
There are many different programming languages available for the modern computer, 
and some still available for older 8 and 16-bit computers too. Some of these languages 
are designed for scientific work, others for mobile platforms and such. So why choose 
Python out of all the rest?
PYTHON POWER
Ever since the earliest home computers were available, enthusiasts, users and professionals have toiled away until the wee 
hours, slaving over an overheating heap of circuitry to create something akin to magic.
These pioneers of programming carved their way into a new 
frontier, forging small routines that enabled the letter 'A' to scroll 
across the screen. It may not sound terribly exciting to a generation 
that's used to ultra high-definition graphics and open world, multi­
player online gaming. However, forty-something years ago it was 
blindingly brilliant.
Naturally these bedroom coders helped form the foundations for 
every piece of digital technology we use today. Some went on to 
become chief developers for top software companies, whereas 
others pushed the available hardware to its limits and founded the 
billion pound gaming empire that continually amazes us.
Regardless of whether you use an Android device, iOS device, PC, 
Mac, Linux, Smart TV, games console, MP3 player, GPS device built-in 
to a car, set-top box ora thousand other connected and ’smart’ 
appliances, behind them all is programming.
All those aforementioned digital devices need instructions to tell 
them what to do, and allow them to be interacted with. These 
instructions form the programming core of the device and that core 
can be built using a variety of programming languages.
The languages in use today differ depending on the situation, the 
platform, the device's use and how the device will interact with its
Linux Coding & Programming

Why Python?
environment or users. Operating systems, such as Windows, macOS 
and such are usually a combination of C++, C#, assembly and some 
form of visual-based language. Games generally use C++ whilst web 
pages can use a plethora of available languages such as HTML, Java, 
Python and so on.
More general-purpose programming is used to create programs, 
apps, software or whatever else you want to call them. They're 
widely used across all hardware platforms and suit virtually every 
conceivable application. Some operate faster than others and some 
are easier to learn and use than others. Python is one such general- 
purpose language.
Python was created over twenty six years ago and has evolved to 
become an ideal beginner's language for learning how to program a 
computer. It's perfect for the hobbyist, enthusiast, student, teacher 
and those who simply need to create their own unique interaction 
between either themselves or a piece of external hardware and the 
computer itself.
Python is free to download, install and use and is available for Linux, 
Windows, macOS, MS-DOS, OS/2, BeOS, IBM i-series machines, and 
even RISC OS. It has been voted one of the top five programming 
languages in the world and is continually evolving ahead of the 
hardware and Internet development curve.
Python is what's known as a High-Level Language, in that it'talks' 
to the hardware and operating system using a variety of arrays, 
variables, objects, arithmetic, subroutines, loops and countless 
more interactions. Whilst it's not as streamlined as a Low-Level 
Language, which can deal directly with memory addresses, call 
stacks and registers, its benefit is that it's universally accessible 
and easy to learn.
|//file: invoke.java 
import java.lang.reflect 
class invoke {
public static void mainf String [] args ) { 
try {
Class c = Class.forNamef argsfO] );
Method m = c.getMethodf argsfl], new class 
[] { } );
Object ret = m.invokef null, null ); 
System.out.pri ntln(
"invoked static method: " + argsfl]
+ " of class: " + args[O]
+ " with no args\nResults: " + ret ); 
catch ( ClassNotFoundException e ) { 
// Class.forName( ) can’t find the class 
catch ( NosuchMethodException e2 ) { 
// that method doesn't exist 
catch ( lllegalAccessException e3 ) { 
// we don't nave permission to invoke that 
method 
catch ( InvocationTargetException e4 ) { 
// an exception ocurred 
method 
System.out.pri ntln(
"Method threw an: " 
getTargetExcepti on(
}
}
while invoking that
+ e4.
Java is a powerful 
language that’s used in 
web pages, set-top boxes, 
TVs and even cars.
So to answer the question: why python? Simply put, it's free, easy to 
learn, exceptionally powerful, universally accepted, effective and a 
superb learning and educational tool.
4.0 LET py = 15
70 FOR w=1 TO 10
71 CLS
75 LET by=INT (RND
*28)
80 LET bx=0
90 FOR d=l TO 20
100 PRINT AT px,py;" U "
110 PRINT AT bX,by;"O"
120 IF INKEY$="p" THEN LET py=p 
y +1
130 IF INKEY$="O" THEN LET py=p 
y - 1 
U
135 FOR n=l TO 100: NEXT n
14-0 IF py<2 THEN LET p y =2
150 IF py>27 THEN LET py=27
180 LET bx=bx+l
185 PRINT AT bX-l,by;" ”
190 NEXT d
200 IF (by-l)=py THEN LET S=S+1
210 PRINT AT 10,10; "s co re = "; s
220 FOR V=1 TO 1000: NEXT V
300 NEXT W
0 OK, 0:1
BASIC was once the starter language that early 
. 8-bit home computer users learned.
print(HAN6MAN[0])
attempts = len(HANGMAN) - 1
while (attempts != 0 and in word_guessed):
print((”\nYou have {} attempts remaining").format(attempts))
joined_word = ””.join(word_guessed) 
print(joined_word)
try:
player guess = str(input("\nPlease select a letter between A-Z" + "\n> ")). 
except: # check valid input
print("That is not valid input. Please try again.”) 
continue 
else:
if not player_guess.isalpha(): # check the input is a letter. Also checks a 
print(”That is not a letter. Please try again.") 
continue
elif len(player guess) > 1: # check the input is only one letter 
print("That is more than one letter. Please try again.”) 
continue
elif player_guess in guessed_letters: # check it letter hasn't been guessed 
print("You have already guessed that letter. Please try again.”) 
continue
else:
guessed_letters.append(player guess)
for letter in range(len(chosen_word)): 
if player guess == chosen_word[letter]:
word_guessed[letter] = player_guess # replace all letters in the chosen 
if player_guess not in chosen_word:
Python is a more modern take on BASIC, it's easy to learn 
and makes for an ideal beginner’s programming language.
Linux Coding & Programming

&
Python on Linux
How to Set Up 
Python in Linux
While the Raspberry Pi's operating system contains the latest, stable version of Python, 
other Linux distros don't come with Python 3 preinstalled. If you're not going down the 
Pi route, then here's how to check and install Python for Linux.
PYTHON PENGUIN
Linux is such a versatile operating system that it’s often difficult to nail down just one way of doing something. Different 
distributions go about installing software in different ways, so we're sticking with Linux Mint for this particular tutorial.
STEP1
First you need to ascertain which version of Python 
is currently installed in your Linux system. To begin 
with, drop into a Terminal session from yourdistro's menu or hit the 
Ctrl+Alt+T keys.
STEP 3
In our case we have both Python 2 and 3 installed;
as long as Python 3.x.x is installed, then the code in 
our tutorials will work. It's always worth checking to see if the distro 
has been updated with the latest versions, so enter: sudo apt-get 
update && sudo apt-get upgrade to update the system.
david@david-Mint: ~
File Edit View Search Terminal Help
david@david-Mint:-$ |
STEP 2
Next enter python --version into the Terminal 
screen. You should have the output relating to 
version 2.x of Python in the display. By default, most Linux distros 
come with both Python 2 and 3, as there's plenty of code out there 
still available for Python 2. Now enter: python3 --version.
STEP 4
Once the update and upgrade completes, enter: 
python3 —version again to see if Python 3.x 
is updated or even installed; as long as you have Python 3.x, you’re 
running the most recent major version. The numbers after the 3. 
indicate patches and further updates. Often they're unnecessary 
but can contain vital new elements.
4 1.1.3-5UbuntU0.2 [359 KBJ
Get:2 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Libasound2-data 
all 1.1.3-5ubuntu0.2 [36.5 kB]
Get:3 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Linux-libc-dev 
amd64 4.15.0-44.47 [1,013 kB]
Fetched 1,409 kB in 0s (3,023 kB/s)
(Reading database ... 290768 files and directories currently installed.)
Preparing to unpack .../Libasound2_l.1.3-5ubuntu0.2 amd64.deb ...
Unpacking Iibasound2:amd64 (1.1.3-5ubuntu0.2) over (1.1.3-5ubuntu0.1) ...
Preparing to unpack .../Iibasound2-data_1.1.3-5ubuntu0.2_all.deb ...
Unpacking libasound2-data (1.1.3-5ubuntu0.2) over (1.1.3-5ubuntu0.1) ...
Preparing to unpack .../linux-libc-dev_4.15.0-44.47_amd64.deb ...
Unpacking linux-libc-dev:amd64 (4.15.0-44.47) over (4.15.0-43.46) ...
Setting up libasound2-data (1.1.3-5ubuntu0.2) ...
Setting up linux-libc-dev:amd64 (4.15.0-44.47) ...
Setting up Iibasound2:amd64 (1.1.3-5ubuntu0.2) ...
Processing triggers for libc-bin (2.27-3ubuntul) ...
david@david-Mint:~$ python3 --version
Python 3.6.7
david@david-Mint:-$ |
Linux Coding & Programming

How to Set Up Python in Linux
STEP 5
However, if you want the latest, cutting edge 
version, you need to build Python from source. Start 
by entering these commands into the Terminal:
sudo apt-get install build-essential checkinstall 
sudo apt-get install libreadline-gplv2-dev
libncursesw5-dev libssl-dev libsqlite3-dev tk-dev 
libgdbm-dev libc6-dev libbz2-dev
STEP 8 
________ J
Within the Python folder, enter: 
./configure 
sudo make altinstall
This could take a while depending on the speed of your computer. 
Once finished, enter: python3.7 --version to check the 
installed latest version. You now have Python 3.7 installed, alongside 
older Python 3.x.x and Python 2.
david@david-Mint: -
File Edit View Search Terminal Help
david@david-Mint: $ sudo apt-get install build-essential checkinstall
Reading package lists... Done
Building dependency tree
Reading state information... Done
build-essential is already the newest version (12.4ubuntul).
The following NEW packages will be installed 
checkinstall
0 to upgrade, 1 to newly install, 0 to remove and 3 not to upgrade.
Need to get 97.1 kB of archives.
After this operation, 438 kB of additional disk space will be used.
Do you want to continue? [Y/n] y 
checking whether compiling and linking against OpenSSL works... no
checking for --with-ssl-default-suites... python
configure: creating ./config.status
config.status: creating Makefile.pre
config.status: creating Misc/python.pc
config.status: creating Misc/python-config.sh
config.status: creating Modules/ldsoaix
config.status: creating pyconfig.h
creating Modules/Setup
creating Modules/Setup.local
creating Makefile
If you want a release build with all stable optimizations active (PGO, etc), 
please run ./configure --enable-optimizations
david@david-Mint:~/Downloads/Python-3.7.2$ sudo make altinstall
STEP 6
_________1
Open up your Linux web browserand go to 
the Python download page: www.python.org/
STEP 9
________ J
For the GUI IDLE, you need to enter the following 
command into the Terminal:
downloads. Click on Downloads followed by the button under 
the Python Source window. This opens a download dialogue box; 
choose a location and start the download process.
sudo apt-get install idle3
The IDLE can then be started with the command idle3. Note that
STEP 7
In the Terminal, go the Downloads folder by 
entering cd Downloads/. Then unzip the contents 
of the downloaded Python source code with: tar -xvf Python- 
3. Y. Y. tar. xz replacing the Y's with the version numbers 
you've downloaded. Now enter the newly unzipped folder with cd 
Python-3. Y.Y/.
Python-3.7.2/0bj ects/clinic/floatobj ect.c.h 
Python-3.7.2/0bj ects/clinic/funcobj ect.c.h 
Python-3.7.2/0bj ects/clinic/longobj ect.c.h 
Python-3.7.2/0bjects/clinic/dictobj ect.c.h 
Python-3.7.2/0bj ects/clinic/structseq.c.h 
Python-3.7.2/0bj ects/clinic/tupleobj ect.c. h
Python-3.7.2/0bj ects/clinic/moduleobj ect.c.h
Python -3.7.2/0b j ects/clinic/odictob j ect. c. h
Python-3.7.2/0bj ects/bytearrayobj ect.c
Python-3.7.2/0bj ects/typeobj ect.c
Python-3.7.2/Objects/lnotab notes.txt
Python -3.7.2/0bj ects/methodobj ect.c
Python-3.7.2/0bj ects/tupleobj ect.c
Python-3.7.2/0bj ects/obmalloc.c
Python-3.7.2/Obj ects/obj ect.c
Python-3.7.2/0bjects/abstract.c
Python-3.7.2/Obj ects/listobj ect.c
Python -3.7.2/Obj ects/bytes methods.c
Python-3.7.2/0bjects/dictnotes.txt
Python-3.7.2/Obj ects/typeslots.inc 
david@david-Mint:-/Downloads! cd Python-3.7.2/ 
david@david-Mint:-/Downloads/Python-3.7.2$
STEP 10 
A
You also need PIP (Pip Installs Packages) which isa 
tool to help you install more modulesand extras.
Enter: sudo apt-get install python3-pip
When PIP is installed, check for the latest update with:
pip3 install --upgrade pip
When complete, close the Terminal and Python 3.x will be available 
via the Programming section in your distro's menu.
da vid@da vid-Mint: ~/Downloads/Python-3.7.2
File Edit View Search Terminal Help
david@david-Mint:- Downloads/Python-3.7.2$ sudo apt-get install python3-pip
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
python-pip-whl python3-distutils python3-lib2to3
Recommended packages:
python3-dev python3-setuptools python3-wheel
The following NEW packages will be installed
python-pip-whl python3-distutils python3-lib2to3 python3-pip
0 to upgrade, 4 to newly install, 0 to remove and 3 not to upgrade.
Need to get 1,984 kB of archives.
After this operation, 4,569 kB of additional disk space will be used.
Do you want to continue? [Y/n] |
Linux Coding & Programming

Python on Linux
Starting Python for 
the First Time
We're going to be using the Raspberry Pi as our Python 3 hardware platform. The 
latest version of Raspbian comes preinstalled with Python 3, version 3.4.2 to be exact, 
so as long as you have a version 3 Shell, all our code will work.
STARTING PYTHON
We're not going to go into the details of getting the Raspberry Pi up and running, there's plenty of material already available 
on that subject. However, once you're ready, fire up your Pi and get ready for coding.
STEP1 
a
With the Raspbian desktop loaded, click on the 
Menu button followed by Programming > Python
3 (IDLE). This opens the Python 3 Shell. Windows and Mac users can 
find the Python 3 IDLE Shell from within the Windows Start button 
menu and via Finder.
STEP 3
For example, in the Shell enter: 2+2
After pressing Enter, the next line displays the 
answer: 4. Basically, Python has taken the 'code' and produced the 
relevant output.
STEP 2 
a
The Shell is where you can enter code and see the 
responses and output of code you've programmed 
into Python. This is a kind of sandbox, where you're able to try out 
some simple code and processes.
STEP 4
The Python Shell acts very much like a calculator, 
since code is basically a series of mathematical 
interactions with the system. Integers, which are the infinite 
sequence of whole numbers can easily be added, subtracted, 
multiplied and so on.
Python 3.4 2 Shell 
_ □ x
File Edit Shejl Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licensee)" for more information. 
»> 2+2 
4 
»> 8+6 
14 
»> 23453+64545522 
64568975
>» 98778642342-12343 
98778629999 
»> 1287437
*43534
 
56047282358
»>l
Linux Coding & Programming

Starting Python for the First Time
STEP 5 J
While that's very interesting, it's not particularly 
exciting. Instead, try this:
print(“Hello everyone!”)
Just enter it into the IDLE as you've done in the previous steps.
STEP 8 
A
The Python IDLE is a configurable environment. If 
you don't like the way the colours are represented, 
then you can always change them via Options > Configure IDLE and 
clicking on the Highlighting tab. However, we don't recommend 
that, as you won't be seeing the same as our screenshots.
Python 3.4.2 Shell 
_ □ x
Python 3.4.2 (default. Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licensee)" for more information.
file Edit Shell debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright”, "credits” or "licensee)" for more information. 
»> 2+2 
4 
»> 8+6 
14 
»> 23453+64545522 
64568975 
»> 98778642342-12343 
98778629999 
»> 1287437
*43534
 
56047282358
»> print("Hello everyone!") 
Hello everyone!
»> 8+6
14 
»> 23453+64545522 
64568975
»> 98778642342-12343 
98778629999
»> 1287437
*43534
 
56047282358
»> print("Hello everyone!") 
Hello everyone!
Custom Highlighting---------------
Fonts/Tabs | Highlighting | Keys | General |
• Foreground Background
#you can click here 
ffto choose items
■■■ cursor 
shell stdout stderr
Save as New Custom Theme
Highlighting Theme-----------
Select:
• a Built-in Theme
IDLE Classic -a I
IDLE Preferences 
- x
STEP 6
This is a little more like it, since you've just produced 
your first bit of code. The Print command is fairly 
self-explanatory, it prints things. Python 3 requires the brackets as 
well as quote marks in order to output content to the screen, in this 
case the ’Hello everyone!' bit.
STEP 9
Just like most programs available, regardless of the 
operating system, there are numerous shortcut 
keys available. We don't have room for them all here but within the 
Options > Configure IDLE and under the Keys tab, you can see a list 
of the current bindings.
;»> printC’Hello everyone!") 
Hello everyone!
>» |
STEP 7
You may have noticed the colour coding within 
the Python IDLE. The colours represent different 
elements of Python code. They are:
STEP 10
A
Black - Data and Variables
Green-Strings
Purple - Functions 
Orange - Commands
Blue - User Functions
Dark Red - Comments 
Light Red - Error Messages
The Python IDLE is a power interface and one 
that's actually been written in Python using one 
of the available GUI toolkits. If you want to know the many ins and 
outs of the Shell, we recommend you take a few moments to view 
www.docs.python.org/3/library/idle.html, which details many of 
the IDLE's features.
25.5. IDLE
IDLE Colour Coding
■ coded » 100% pixa Python, usmg the .
Colour
Use for
Examples
Black
Data & variables
23.6 area
Green
Strings
"Hello World"
Purple
Functions
len() print 0
Orange
Commands
if for else
Blue
User functions
get_area()
Dark red
Comments
#Remember VAT
Light red
Error messages
SyntaxError:
1 Python shell window (inlet active intetprelevt with cototihng or code input, output, end enw messages
■ deouggat with oers^tent Oteekpomts. stopping, and viewing ol glooai and local namespaces
25.5.1. Menus
25.5.1.1. File menu (Shell and Editor)
Linux Coding & Programming

Python on Linux
Your First Code
Essentially, you've already written your first piece of code with the 'print("Hello 
everyone!")' function from the previous tutorial. However, let's expand that and look at 
entering your code and playing around with some other Python examples.
PLAYING WITH PYTHON
With most languages, computer or human, it's all about remembering and applying the right words to the right situation. 
You're not born knowing these words, so you need to learn them.
STEP 1
_ ______ J
If you've closed Python 3 IDLE, reopen it in 
whichever operating system version you prefer. In
STEP 3
A
the Shell, enter the familiar following:
You can see that instead of the number 4, the 
output is the 2+2 you asked to be printed to the 
screen. The quotation marks are defining what's being outputted 
to the IDLE Shell; to print the total of 2+2 you need to remove 
the quotes:
printC“HeUo”)
print(2+2)
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11) |
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licenseO” for more information.
»> print("Hello”)
Hello
>» print("2+2")
2+2
>» print(2+2)
STEP 2
Just as predicted, the word Hello appears in the 
Shell as blue text, indicating output from a string. 
It's fairly straightforward and doesn't require too much explanation. 
Now try:
STEP 4 
a
You can continue as such, printing 2+2, 464+2343 
and so on to the Shell. An easier way is to use a 
variable, which is something we will cover in more depth later. For 
now, enter:
printC“2+2”)
a=2.
b=2
Python 3.4.2 Shell 
_ □ x
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licenseO” for more information. 
»> print("Hello”)
Hello
»> print(”2+2”)
2+2
»> print(2+2)
»> a=2
»> b-2
»>l
Linux Coding & Programming

(^Your First Code
STEP 5
What you have done here is assign the letters a 
and b two values: 2 and 2. These are now variables, 
which can be called upon by Python to output, add, subtract, divide 
and so on for as long as their numbers stay the same. Try this:
print(a) 
print(b)
STEP 8 
_______J
Now let's add a surname:
surname=”Hayward” 
print(surname)
You now have two variables containing a first name and a surname 
and you can print them independently.
Python 3.4 2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright”, "credits" or “licensee)” for more information.
»> name-"David"
»> print (name)
David
»> surname="Hayward"
>» print (surname)
Hayward
STEP 6
The output of the last step displays the current 
values of both a and b individually, as you've asked 
them to be printed separately. If you want to add them up, you can 
use the following:
print(a+b)
This code simply takes the values of a and b, adds them together 
and outputs the result.
Elie Edit Shell Debug Options y/indows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
»> print("Hello")
Hello
»> print("2+2”)
2+2
>» print(2+2)
»> a-2
>» b=2
»> print(a)
2
»> print(b)
2
|| | >» print(a+b)
STEP 9 
a
If we were to apply the same routine as before, 
using the + symbol, the name wouldn't appear 
correctly in the output in the Shell. Try it:
print(name+surname)
You need a space between the two, defining them as two separate 
values and not something you mathematically play around with.
Python 3 4 2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "license!)" for more information.
>» name-"David"
»> print(name)
David
»> surname="Hayward"
»> print (surname)
Hayward
»> print (name
*
 surname)
DavidHayward
STEP 7
You can play around with different kinds of variables 
and the Print function. For example, you could 
assign variables for someone's name:
name=”David” 
print(name)
STEP 10
In Python 3 you can separate the two variables 
with a space using a comma:
printfname, surname)
Alternatively, you can add the space yourself:
print(name+” “-rsurname)
The use of the comma is much neater, as you can see. 
Congratulations, you've just taken your first steps into the wide 
world of Python.
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" formore information.
>» name-"David"
»> print (name)
David
»> surname="Hayward"
>» print(surname)
Hayward
»> print(name+surname)
DavidHayward
>» print(name, surname)
David Hayward
»> print(name
*"
 "*surname)
David Hayward
»> I
Linux Coding & Programming

31
Python on Linux
Saving and Executing 
Your Code
While working in the IDLE Shell is perfectly fine for small code snippets, it's not 
designed for entering longer program listings. In this section you're going to be 
introduced to the IDLE Editor, where you will be working from now on.
EDITING CODE
You will eventually reach a point where you have to move on from inputting single lines of code into the Shell. Instead, the 
IDLE Editor will allow you to save and execute your Python code.
STEP 1 
________ .A
First, open the Python IDLE Shell and when it's up, 
click on File > New File. This will open a new window
with Untitled as its name. This is the Python IDLE Editor and within it 
you can enter the code needed to create your future programs.
STEP 3 A
You can see that the same colour coding is in place 
in the IDLE Editoras it is in the Shell, enabling you 
to better understand what's going on with your code. However, to 
execute the code you need to first save it. Press F5 and you get a 
Save...Check box open.
STEP 2 
a
The IDLE Editor is, for all intents and purposes, a 
simple text editor with Python features, colour 
coding and so on; much in the same vein as Sublime. You enter 
code as you would within the Shell, so taking an example from the 
previous tutorial, enter:
print(“Hello everyone!”)
STEP 4
Click on the OK button in the Save box and select a 
destination where you'll save all your Python code. 
The destination can be a dedicated folder called Python or you 
can just dump it wherever you like. Remember to keep a tidy drive 
though, to help you out in the future.
print("Hello everyone!")
Linux Coding & Programming
9i

Q Saving and Executing Your Code
STEP 5
Enter a name foryour code, 'print hello' for 
example, and click on the Save button. Once the 
Python code is saved it's executed and the output will be detailed in 
the IDLE Shell. In this case, the words 'Hello everyone!'.
STEP 8 
a
Let's extend the code and enter a few examples 
from the previous tutorial:
a=2
b=2
nome=”Dovid”
sur,nome=”Hoywar,d”
print(name, surname)
print (a+b)
If you press FS now you'll be asked to save the file, again, as it's been 
modified from before.
STEP 6
This is how the vast majority of your Python code 
will be conducted. Enter it into the Editor, hit F5, 
save the code and look at the output in the Shell. Sometimes things 
will differ, depending on whetheryou've requested a separate 
window, but essentially that's the process. It’s the process we will 
use throughout this book, unless otherwise stated.
STEP 9
If you click the OK button, the file will be 
overwritten with the new code entries, and 
executed, with the output in the Shell. It's not a problem with just 
these few lines but if you were to edit a larger file, overwriting can 
become an issue. Instead, use File > Save As from within the Editor 
to create a backup.
STEP 7
If you open the file location of the saved Python 
code, you can see that it ends in a .py extension. 
This is the default Python file name. Any code you create will be 
whatever.py and any code downloaded from the many Internet 
Python resource sites will be .py. Just ensure that the code is written 
for Python 3.
STEP 10 -J
Now create a new file. Close the Editor, and open 
a new instance (File > New File from the Shell).
Enter the following and save it as hello.py:
o=”Python” 
b=”is” 
c=”cool!” 
printfa, b, c)
You will use this code in the next tutorial.
Linux Coding & Programming

Python on Linux
Executing Code 
from the Terminal
Although we're working from the GUI IDLE throughout this book, it's worth taking 
a look at Python's command line handling. We already know there's a command line 
version of Python but it's also used to execute code.
COMMAND THE CODE
Using the code we created in the previous tutorial, the one we named hello.py, let's see how you can run code that was made 
in the GUI at the command line level.
STEP1 
a
Python, in Linux, comes with two possible ways of 
executing code via the command line. One of the 
ways is with Python 2, whilst the other uses the Python 3 libraries 
and so on. First though, drop into the command line orTerminal on 
your operating system.
STEP 3
Now you're at the command line we can start 
Python. For Python 3 you need to enter the 
command python3 and press Enter. This will put you into the 
command line version of the Shell, with the familiar three right- 
facing arrows as the cursor (»>).
STEP 2
Just as before, 
we're using a 
Raspberry Pi: Windows users will 
need to click the Start button and 
search for CMD, then click the 
Command Line returned search; 
and macOS users can get access 
to theircommand line by clicking 
Go > Utilities > Terminal.
Best match
Command Prompt
Desktop app
Search suggestions >•
P cmd - See web results
Filter
STEP 4
________ A
From here you're able to enter the code you've 
looked at previously, such as:
a=2
print(o)
You can see that it works exactly the same.
I P cmd|
Linux Coding & Programming

Executing Code From the Terminal
STEP 5
Now enter: exit() to leave the command line Python 
session and return you back to the command 
prompt. Enter the folder where you saved the code from the 
previous tutorial and list the available files within; hopefully you 
should see the hello.py file.
STEP 8 
A
The result of running Python 3 code from the 
Python 2 command line is quite obvious. Whilst it 
doesn’t error out in anyway, due to the differences between the 
way Python 3 handles the Print command over Python 2, the result 
isn't as we expected. Using Sublime for the moment, open the 
hello.py file.
C:\Users\david\Documents\Python\hello.py - Sublime Text (UNREGISTERED)
File Edit Selection Find View Goto Tools Project Preferences Help
hello.py 
X
1 a="Python"
2 b="is"
3 c="cool!"
4 print(a, b, c)
5 I
STEP 6 
a
From within the same folder as the code you’re 
going to run, enter the following into the 
command line:
python3 hello.py
This will execute the code we created, which to remind you is:
a=”Python” 
b=”is” 
c=”cool!” 
printfa, b, c)
STEP 9 
a
Since Sublime Text isn’t available for the Raspberry 
Pi, you're going to temporarily leave the Pi for the 
moment and use Sublime as an example that you don’t necessarily 
need to use the Python IDLE. With the hello.py file open, alter it to 
include the following:
name=input(“What is your name? “) 
printC“Hello,”, name)
File Edit Selection Find View Goto Tools Project Preferences Help
B C:\Users\david\Documents\Python\hello.py ■ - Sublime Text (UNREGISTERED)
1 a="Python"
2 b="is”
3 c=”cool!”
4 print(a, b, c)
5 
name=input(”What is your name? ")
6 
print=("Hello,", name)
STEP 7
Naturally, since this is Python 3 code, using the 
syntax and layout that’s unique to Python 3, it only 
works when you use the python3 command. If you like, try the same 
with Python 2 by entering:
python hello.py
STEP 10
Save the hello.py file and drop back to the 
command line. Now execute the newly saved 
code with:
python3 hello.py
The result will be the original Python is cool! statement, together 
with the added input command asking you for your name, and 
displaying it in the command window.
pi@raspberrypr -/Documents/Python Code
File Edit Tabs Help
pi@raspberrypi: -/Docrne-nts/Python Code $ pythonS hello.py 
Python is cool!
What is your name? David
Hello. David
pieraspberrypii'/Docunents/Python Code S |
Linux Coding & Programming

Python on Linux
Space Invaders
SCORE 1,337
■ ■
I . '
100
www.bdmpublications.com

LIVES
DID YOU KNOW...
w w w w w 
■ ■■ ■■ ■■ ■■ ■
Ljwjj Ljwjj Ljwjj Ljwjj
that when Space Invaders 
creator, Tomohiro 
Nishikado, was coding 
Space Invaders, he had to 
create his own hardware 
and development tools 
to write the game. 
Furthermore, he then 
discovered that as a result 
of the coding and the 
custom hardware, the 
fewer Invaders on-screen 
the faster the processor 
was able to render them. 
Thus, as you kill more 
Invaders, the faster they 
become. So rather than 
design the game to 
compensate for the speed 
increase, he decided to 
keep it as a challenging 
gameplay mechanism.
t
It was pure accident that the 
Invaders got Faster the less oF them 
there were.
www.bdmpublications.com
101

Python on Linux
Numbersand Expressions
We've seen some basic mathematical expressions with Python, simple addition and the 
like. Let's expand on that now and see just how powerful Python is as a calculator. You 
can work within the IDLE Shell or in the Editor, whichever you like.
IT'S ALL MATHS, MAN
You can get some really impressive results with the mathematical powers of Python; as with most, if not all, programming 
languages, maths is the driving force behind the code.
STEP1
Open up the GUI version of Python 3, as mentioned 
you can use either the Shell or the Editor. For the 
time being, you're going to use the Shell just to warm our maths 
muscle, which we believe is a small gland located at the back of the 
brain (or not).
STEP 3
________ J
few, for example:
You can use all the usual mathematical operations: 
divide, multiply, brackets and so on. Practise with a
Python 3 4.2 Shell 
_ □ x
£ile Edit Shell Qebug Qptlons windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
1/2
6/2
2+2
*3
(l+2)+(3
*4)
STEP 2
In the Shell enter the following:
2+2
54356+34553245
99867344
*27344484221
STEP 4
a
You've no doubt noticed, division produces a 
decimal number. In Python these are called floats, 
or floating point arithmetic. However, if you need an integer as 
opposed to a decimal answer, then you can use a double slash:
1//2
6//2
You can see that Python can handle some quite large numbers.
And so on.
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or “licenseO" for more information.
»> 54356+34553245 
34607601
>» 99867344
*27344484221
2730821012201179024
8
>» 6//2
Linux Coding & Programming

Q Numbers and Expressions
STEP 5
________ J
You can also use an operation to see the remainder 
left over from division. For example:
STEP 8
A
10/3
This will be displayed as '0b11converting the 
integer into binary and adding the prefix Ob to the 
front. If you want to remove the Ob prefix, then you can use:
Will display 3.333333333, which is of course 3.3-recurring. If you 
now enter:
10%3
This will display 1, which is the remainder left over from dividing 10 
into 3.
2730821012201179024 
»> 1/2
0.5
»> 6/2
3.0
»> 2*2*3
 
8
»> (1
*2)
*(3
*4)
15 
»> 1//2 
0
»> 6//2 
3»> 10/3
3.3333333333333335 
>» 10%3
format(3, ‘b’)
The Format command converts a value, the number 3, to a 
formatted representation as controlled by the format specification, 
the 'b' part.
8 
»> (1
*2)
*(3
*4)
 
15
»> 1//2
0
»> 6//2 
3
»> 10/3
3.3333333333333335 
»> 10%3
1
>» 2**
3
8
»> 10
**10
 
10000000000
»> bin(3) 
•obir
»> format(3, ’b') 
•ir
STEP 6 
______
Next up we have the power operator, or 
exponentiation if you want to be technical. To work
STEP 9
out the power of something you can use a double multiplication 
symbol or double-star on the keyboard:
A Boolean Expression is a logical statement that will 
either be true or false. We can use these to compare 
data and test to see if it's equal to, less than or greater than. Try this 
in a New File:
2**
3
10
**
10
Essentially, it's 2x2x2 but weTe sure you already know the basics 
behind maths operators. This is how you would work it out in Python.
6/2
(1
*2)
*(3
*4)
3
6//2
»> 10/3 
3.3333333333333335
a = 6
b = 7
print(l, o == 6)
print(2, a == 7)
print(3, a == 6 and b == 7)
print(4, a == 7 and b == 7)
print(5, not a == 7 and b == 7)
print(6, a == 7 or b == 7)
print(7, a == 7 or b == 6)
print(8, not (a == 7 and b == 6)) 
print(9, not a == 7 and b == 6)
10000000000
STEP 7
Numbersand expressions don't stop there. Python 
has numerous built-in functions to work out sets 
of numbers, absolute values, complex numbers and a host of 
mathematical expressions and Pythagorean tongue-twisters. For 
example, to convert a number to binary, use:
bin(3)
»> 1/2
0.5
»> 6/2
3.0
»> 2*2*3
8
»> (1
*2)
*(3
*4)
15
»> 1//2
0
»> 6//2
3
»> 10/3
3.3333333333333335 
»> 10%3
1»> 2**3
8
»> 10
**10
 
10000000000
»> bin(3)
•obir
»>l
STEP 10 -J
Execute the code From Step 9, and you can see a 
series of True or False statements, depending on 
the result of the two defining values: 6 and 7. It's an extension of 
whatyou've looked at, and an important part of programming.
Linux Coding & Programming

Python on Linux
Using Comments
When writing your code, the flow, what each variable does, how the overall program 
will operate and so on is all inside your head. Another programmer could follow the 
code line by line but over time, it can become difficult to read.
#COMMENTS!
Programmers use a method of keeping their code readable by commenting on certain sections. If a variable is used, the 
programmer comments on what it's supposed to do, for example. It's just good practise.
STEP1
Start by creating a new instance of the IDLE Editor 
(File > New File) and create a simple variable and 
print command:
STEP 3
A
a=10
print(“The value of A is,”, a)
Save the file and execute the code.
Resave the code and execute it. You can see that the 
output in the IDLE Shell is still the same as before, 
despite the extra lines being added. Simply put, the hash symbol (#) 
denotes a line of text the programmer can insert to inform them, 
and others, of what's going on without the user being aware.
Comments py - /home/pi/Documen /Python Code/Comments.py (3 4 2) _ □ x I
File Edit Format Run Options Windows Help
a=10
print("The value of A is,”, a)
STEP 2 
_ 
__ J
Running the code will return the line: The value of A 
is, 10 into the IDLE Shell window, which is what we 
expected. Now, add some of the types of comments you'd normally 
see within code:
# Set the start value of A to 10 
a=10
# Print the current value of A 
print(“The value of A is,”, a)
STEP 4
Let's assume that the variable A that we've created 
is the number of lives in a game. Every time the 
player dies, the value is decreased by 1. The programmer could 
insert a routine along the lines of:
a=a-l
print(“You’ve just lost a life!”) 
print(“You now have”, a, “lives left!”)
Linux Coding & Programming

Using Comments
STEP 5 J
Whilst we know that the variable A is lives, and 
that the player has just lost one, a casual viewer or 
someone checking the code may not know. Imagine fora moment 
that the code is twenty thousand lines long, instead of just our 
seven. You can see how handy comments are.
STEP 8 
A
Inline comments are comments that follow a section 
of code. Take our examples from above, instead of 
inserting the code on a separate line, we could use:
a=10 # Set the start value of A to 10
print(“The value of A is,”, a) # Print the current 
value of A
a=a-l # Player lost a life!
print(“You’ve just lost a life!”)
print(“You now have”, a, “lives left!”) # Inform
player, and display current value of A (lives)
Comments py - /home/pi/Documents/Python Code/Comments.py (3 4 2) 
_ □ x
file £drt Fermat Bun Qptlons windows Help
a=10 # Set the start value of A to 10
print(The value of A is.", a) » Print the current value of A
a=a-1 # Player lost a life!
print(”You’ve just lost a life!")
print("You now have", a. "lives left!") # Inform player, and display current value of A (lives
STEP 6 
_________a
Essentially, the new code together with comments 
could look like:
# Set the start value of A to 10 
a=10
# Print the current value of A 
print(“The value of A is,”, a) 
# Player lost a life!
a=a-l
# Inform player, and display current value of A 
(lives)
print(“You’ve just lost a life!”)
print(“You now have”, a, “lives left!”)
STEP 9
The comment, the hash symbol, can also be used to 
comment out sections of code you don't want to be 
executed in your program. For instance, if you wanted to remove 
the first print statement, you would use:
# print(“The value of A is,”, a)
STEP 7
You can use comments in different ways. For 
example, Block Comments are a large section of 
text that details what's going on in the code, such as telling the code 
reader what variables you're planning on using:
STEP 10 -J
You also use three single quotes to comment 
out a Block Comment or multi-line section of 
comments. Place them before and after the areasyou want to 
comment for them to work:
# This is the best game ever, and has been 
developed by a crack squad of Python experts 
# who haven’t slept or washed in weeks. Despite 
being very smelly, the code at least
# works really well.
This is the best game ever, and has been developed 
by a crack squad of Python experts who haven’t 
slept or washed in weeks. Despite being very 
smelly, the code at least works really well.
File Edit Format Run' Options endows Help
» Set the start value of A to 10
a=10
# Print the current value of A
# print("The value of A is.", a)
# Player lost a life!
# Inform player, and display current value of A (lives) 
print(”You've just lost a life!")
print("You now have", a. "lives left!")
J This is the best game ever, and has been developed by a crack squad of Python experts 
| who havenDt slept or washed in weeks. Despite being very smelly, the code at least 
I works really well.|
Linux Coding & Programming

Python on Linux
Working with Variables
We've seen some examples of variables in our Python code already but it's always 
worth going through the way they operate and how Python creates and assigns certain 
values to a variable.
VARIOUS VARIABLES
You'll be working with the Python 3 IDLE Shell in this tutorial. If you haven't already, open Python 3 or close down the previous 
IDLE Shell to clear up any old code.
STEP1
In some programming languages you're required 
to use a dollar sign to denote a string, which is a 
variable made up of multiple characters, such as a name of a person. 
In Python this isn't necessary. For example, in the Shell enter: 
name=”David Hayward” (oruseyourown name, unless you're 
also called David Hayward).
STEP 3 
A
You've seen previously that variables can be 
concatenated using the plus symbol between the 
variable names. In our example we can use: print (name + 
“ + title). The middle part between the quotations allows us to 
add a colon and a space, as variables are connected without spaces, 
so we need to add them manually.
Python 3.4.2 Shell 
_ □ x
Python 3.4.2 Shell 
_ □ x
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", “credits" or "licensee)" for more information.
»> name="David Hayward"
»> print (name)
David Hayward
File Edit Shell fiebug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
»> name="David Hayward"
> 
» print (name)
David Hayward
»> type (name)
<class 'str
*>
»> title="Descended from vikings"
»> print (name + ": " + title)
David Hayward: Descended from Vikings
»> I
STEP 2
You can check the type of variable in use by 
issuing the type () command, placing the name of 
the variable inside the brackets. Incur example, this would be: 
type (name). Add a new string variable: title=”Descended 
from Vikings”.
STEP 4
a
You can also 
combine variables 
within another variable. For 
example, to combine both name 
and title variables into a new 
variable we use:
character=name + 
“ +
title
Then output the content of the 
new variable as:
print (character)
Numbers are stored as different 
variables:
age=44
Type (age)
Which, as we know, are integers.
Python 3.4.
Elie Edit Shell Qebug Options windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:1 
[GCC 4.9.1] on linux
Type "copyright”, "credits" or "licenseO"
»> name=”David Hayward"
»> print (name)
David Hayward
> » type (name)
<class ‘str‘>
> » title-"Descended from Vikings"
> » print (name + “: " + title)
David Hayward: Descended from Vikings
> » character=name + ": " + title
»> print (character)
David Hayward: Descended from Vikings
> » age-44
»> type (age)
<class 'int
*>
Linux Coding & Programming

(^Working with Variables
STEP 5 J
However, you can't combine both strings and 
integer type variables in the same command, as you 
would a set of similar variables. You need to either turn one into the 
other or vice versa. When you do try to combine both, you get an 
error message:
print (name + age)
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licensee)" for more information.
>» name="David Hayward”
»> print (name)
David Hayward
»> type (name)
<class 'str'>
»> title-"Descended from Vikings"
»> print (name + : " + title)
David Hayward: Descended from Vikings
»> character=name + 
" + title
>» print (character)
David Hayward: Descended from Vikings
»> age-44
»> type (age)
<class 'inf>
>» print (name+age)
Traceback (most recent call last):
File "<pyshell#9>", line 1. in <module>
print (name+age)
TypeError: Can't convert 'inf object to str implicitly
STEP 8 J
This presents a bit of a problem when you want to 
work with a number that's been inputted by the 
user, as age + 10 won't work due to being a string variable and an 
integer. Instead, you need to enter:
int(age) + 10
This will TypeCast the age string into an integer that can be 
worked with.
Python 3 4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> age- input ("How old are you? ")
How old are you? 44
>» type(age)
<class 'str‘>
»> age + 10
Traceback (most recent call last):
File "<pyshell#2>”, line 1, in <module>
age + 10
I TypeError: Can’t convert 'inf object to str implicitly
I >» int(age) + 10
54
I >»l 
______________________
STEP 6
This is a process known as Typecasting. The Python 
code is:
print (character + “ is “ + str(age) + “ years 
old.”)
or you can use:
print (character, “is“, age, “years old.”)
Notice again that in the last example, you don't need the spaces 
between the words in quotes as the commas treat each argument 
to print separately.
>» print (name + age)
Traceback (most recent call last):
File "<pyshell#18>", line 1, in <module> 
print (name + age)
TypeError: Can’t convert ’int
*
 object to str implicitly 
»> print (character + " is " + str(age) + ” years old.") 
David Hayward: Descended from Vikings is 44 years old. 
»> print (character, "is", age, "years old.") 
David Hayward: Descended from Vikings is 44 years old. 
»> 
>» I
STEP 9 
a
The use of Typecasting isalso important when 
dealing with floating point arithmetic; remember: 
numbers that have a decimal point in them. For example, enter:
shirt=19.99
Now enter type(shi rt) and you'll see that Python has allocated 
the number as a 'float', because the value contains a decimal point.
Python 3.4.2 Shell
Ale Edit Shell Qebug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright”, "credits" or "licenseO" for more information.
>» shirt=19.99
»> type(shirt)
<class ‘float'>
>>>l
STEP 7
Another example of Typecasting is when you ask for 
input from the user, such as a name, for example, 
enter:
age= input (“How old are you? “)
All data stored from the Input command is stored as a string variable.
STEP 10 -J
When combining integersand floats Python 
usually converts the integer to a float, but should 
the reverse ever be applied it's worth remembering that Python 
doesn't return the exact value. When converting a float to an 
integer, Python will always round down to the nearest integer, 
called truncating; in our case instead of 19.99 it becomes 19.
Python 3.4.2 Shell
Python 3.4.2 Shell
File Edit Shejl Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> age- input ("How old are you? ”)
How old are you? 44
»> type(age)
<class ‘str‘>
»> I
File Edit Shell fiebug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information. 
»> shirt=19.99 
»> type(shirt) 
<class ‘float
*
> 
»> int(shirt) 
19 
»>l
Linux Coding & Programming

31
Python on Linux
User Input
We've seen some basic user interaction with the code from a few of the examples 
earlier, so now would be a good time to focus solely on how you would get information 
from the user then store and present it.
USER FRIENDLY
The type of input you want from the user will depend greatly on the type of program you're coding. For example, a game may 
ask for a character's name, whereas a database can ask for personal details.
STEP1
________ J
something really simple, enter:
If it’s not already, open the Python 3 IDLE Shell, 
and start a New File in the Editor. Let's begin with
STEP 3
we want:
Now that we have the user's name stored in a 
couple of variables we can call them up whenever
printC“Hello”)
firstname=input(“What is your first name? “) 
printC“Thanks.”)
surname=input(“And what is your surname? “)
print(“Welcome”, firstname, surname, “. I hope
you’re well today.”)
STEP 2
a
Save and execute the code, and as you already no 
doubt suspected, in the IDLE Shell the program will 
ask for your first name, storing it as the variable firstname, followed 
by your surname; also stored in its own variable (surname).
STEP 4
a
Run the code and you can see a slight issue, the 
full stop after the surname follows a blank space. 
To eliminate that we can add a plus sign instead of the comma in 
the code:
Python 3.4.2 Shell 
_ □ x
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright”, "credits” or "licensee)" for more information. 
»> ................................ RESTART ————————
Hello
What is your first name? David
Thanks.
And what is your surname? Hayward
print(“Welcome”, firstname, surname+“. I hope 
you’re well today.”)
‘userinput py - /home/pi/Documents/Python Code/userinput.py (3 4 2)
*
File Edit Format Run Options Windows Help
print("Hello")
firstname-input(”What is your first name? ")
print("Thanks.")
surname-inputfAnd what is your surname? ")
print(“Welcome". firstname. surname
*".
 I hope you're well today.")
Linux Coding & Programming

(^Userlnput
STEP 5
You don't always have to include quoted text within 
the input command. For example, you can ask the 
user their name, and have the input in the line below:
print(“Hello. What’s your name?”) 
name=input()
STEP 8 
A
Whatyou've created here is a condition, which we 
will cover soon. In short, we're using the input from 
the userand measuring itagainsta condition. So, if the userenters 
David as their name, the guard will allow them to pass unhindered. 
Else, if they enter a name other than David, the guard challenges 
them to a fight.
STEP 6
The code from the previous step is often regarded 
as being a little neater than having a lengthy 
amount of text in the input command, but it's not a rule that's set in 
stone, so do as you like in these situations. Expanding on the code, 
try this:
print(“Halt! Who goes there?”) 
name=input()
STEP 9
Just as you learned previously, any input from a 
user is automatically a string, so you need to apply a 
TypeCast in order to turn it into something else. This creates some 
interesting additions to the input command. Forexample:
# Code to calculate rate and distance 
print(“Input a rate and a distance”) 
rate = float(input(“Rate: “))
*userinput.py - /home/pi/Documents/Python Code/userinput.py (3.4.2)
*
File Edit Format Run Options Windows Help 
print("Halt! VJtio goes there?”) 
name-input()
STEP 7
It's a good start to a text adventure game, perhaps? 
Now you can expand on it and use the raw input 
from the user to flesh out the game a little:
if name==”David”:
print(“Welcome, good sir. You may pass.”) 
else:
print(“I know you not. Prepare for battle!”)
STEP 10 
a
To finalise the rate and distance code, we can add: 
distance = float(input(“Distance: “)) 
print(“Time:”, (distance / rate))
Save and execute the code and enter some numbers. Using the 
float(input element, we've told Python that anything entered is a 
floating point number rather than a string.
usennput.py - /home/pi/Documents/Python Code/userinputpy (3.4.2) -ax
File Edit Format Run Options Windows Help
print(“Halt! Who goes there?")
name“input()
if name=="David“:
print("Welcome, good sir. You may pass.") 
else:
print(”I know you not. Prepare for battle!”)
Linux Coding & Programming

Python on Linux
Creating Functions
Now that you've mastered the use of variables and user input, the next step is to tackle 
functions. You've already used a few functions, such as the print command but Python 
enables you to define your own functions.
FUNKY FUNCTIONS
A function is a command that you enter into Python to do something. It's a little piece of self-contained code that takes data, 
works on it and then returns the result.
STEP 1
It's not just data that a function works on. They can 
do all manner of useful things in Python, such as 
sort data, change items from one format to another and check the 
length or type of items. Basically, a function is a short word that's 
followed by brackets. For example, len(), list() or type().
STEP 3
You can pass variables through functions in much 
the same manner. Let's assume you want the 
number of letters in a person's surname, you could use the following 
code (enter the text editor for this example):
name=input (“Enter your surname: “) 
count=len(name)
print (“Your surname has“, count, “letters in 
it.”)
Press F5 and save the code to execute it.
STEP 2 
________ J
A function takes data, usually a variable, works on 
it depending on what the function is programmed
to do and returns the end value. The data being worked on goes 
inside the brackets, so if you wanted to know how many letters 
are in the word antidisestablishmentarianism, then you'd enter: 
len(“antidisestablishmentarianism”) and the number28 
would return.
STEP 4
Python has tens of functions built into it, far too 
many to get into in the limited space available here. 
However, to view the list of built-in functions available to Python 3, 
navigate to www.docs.python.org/3/library/functions.html. These 
are the predefined functions, but since users have created many 
more, they're not the only ones available.
Linux Coding & Programming

STEP 5 J
Q Creating Functions
Additional Functions can be added to Python 
through modules. Python has a vast range of 
modules available that can cover numerous programming duties. 
They add functions and can be imported as and when required. For 
example, to use advanced Mathematics functions enter:
STEP 6 
A
To use a function from a module enter the name of 
the module followed by a full stop, then the name 
of the function. For instance, using the Math module, since you've 
just imported it into Python, you can utilise the square root function. 
To do so, enter:
Once entered, you have access to all the Math module functions.
import math
You can see that the code is presented as module.function(data).
math.sqrt(16)
FORGING FUNCTIONS
There are many different functions you can import created by other Python programmers and you will undoubtedly come 
across some excellent examples in the future; you can also create your own with the def command.
STEP1
Choose File > New File to enter the editor, let's 
create a function called Helio, that greets a user.
Enter:
STEP 3
To modify it further, delete the Hellof'David") line, 
the last line in the script and press Ctrl+S to save 
the new script. Close the Editor and create a new file (File > New 
Fite). Enter the following:
|from Hello import Hello]
Press F5 to save and run the script. You can see Hello in the Shell, 
type in HelloQ and it returns the new function.
Press F5 to save and execute the code.
Let's now expand the function to accept a 
variable, the user's name for example. Edit your 
script to read:
zsaiaiEiczaE
print (Hello , name
Whatyou'vejust done is import the Hello function 
from the saved Hello.py program and then used it 
to say hello to David. This is how modules and functions work: you 
import the module then use the function. Try this one, and modify 
it for extra credit:
SEHEPCTOWffl
This will now accept the variable name, otherwise it prints Hello 
David. In the Shell, enter: name=("Bob"), then: Hello(name). Your 
function can now pass variables through it.
Linux Coding & Programming

31
Python on Linux
Conditions and Loops
Conditions and loops are what make a program interesting; they can be simple or rather 
complex. How you use them depends greatly on what the program is trying to achieve; 
they could be the number of lives left in a game or just displaying a countdown.
TRUE CONDITIONS
Keeping conditions simple to begin with makes learning to program a more enjoyable experience. Let's start then by checking 
if something is TRUE, then doing something else if it isn't.
STEP1
Let’s create a new Python program that will ask 
the user to input a word, then check it to see if it’s 
a four-letter word or not. Start with File > New File, and begin with 
the input variable:
word=input(“Please enter a four-letter word: “)
STEP 3 
_ 
__ J
Now you can use an if statement to check if the 
wordjength variable is equal to four and print a
friendly conformation if it applies to the rule:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
if word_length == 4:
print (word, “is a four-letter word. Well done.”)
The double equal sign (==) means check if something is equal to 
something else.
STEP 2 
a
Now we can create a new variable, then use the len 
function and pass the word variable through it to 
get the total number of letters the user has just entered:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
STEP 4
The colon at the end of IF tells Python that if this 
statement is true do everything after the colon 
that's indented. Next, move the cursor back to the beginning of 
the Editor:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
if word_length == 4:
print (word, “is a four-letter word. Well 
done.”)
else:
print (word, “is not a four-letter word.”)
Linux Coding & Programming

STEP 5 J
Conditions and Loops
Press F5 and save the code to execute it. Enter 
a four-letter word in the Shell to begin with, you 
should have the returned message that it's the word is four letters. 
Now press F5 again and rerun the program but this time enter a 
five-letter word. The Shell will display that it's not a four-letter word.
STEP 6 -J
Now expand the code to include another conditions.
Eventually, it could become quite complex. We've 
added a condition for three-letter words:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
if word_length == 4:
print (word, “is a four-letter word. Well
done.”)
elif word_length == 3:
print (word, “is a three-letter word. Try again.”) 
else:
print (word, “is not a four-letter word.”)
L*  SM|I 
err'S"' 
L"P 
(fc E« Fa.™! Bu" apuom ytlndm Help
i 
i 
H  n 1
1! 
if
’ ■I H
o'*'  
8 -
l n 
! h 
Lii 
tiMli 
n
1
LOOPS
A loop looks quite similar to a condition but they are somewhat different in their operation. A loop will run through the same 
block of code a number of times, usually with the support of a condition.
STEP1
ror wora in woras
loopi py - /home/pi/Documsms/loc
RESTART
ye E« Shell Qebug Qphont »intlows Help
Python 3.4.2 (defaul 
(SCC 4.9.1] on linux 
Type -copyright-, "c
Let's start with a simple While statement. Like IF, 
this will check to see if something is TRUE, then run 
the indented code:
The For loop is another example. For is used to 
loop over a range of data, usually a list stored as 
variables inside square brackets. For example:
STEP 3
*Untitled
*
File E<M Fornm Bun Options windows Held
File Edit Format Bun Qptions windows Help
i lie x<10
The difference between if and while is when while 
gets to the end of the indented code, it goes back 
and checks the statement is still true. In our example x is less than 
10. With each loop it prints the current value of x, then adds one to 
that value. When x does eventually equal 10 it stops.
STEP 2
STEP 4
The For loop can also be used in the countdown 
example by using the range function:
for x in range (1
EBe £<nt Shell pebug <2piions windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
loopi py -/home/pi/D 
File Ed« Format Bun Options Windows H
The x=x+1 part isn't needed here because the range function 
creates a list between the first and last numbers used.
Python 3.41 Shot:
iseiczd:
Linux Coding & Programming

Python on Linux
Python Modules
We've mentioned modules previously, (the Math module) but as modules are such a 
large part of getting the most from Python, it's worth dedicating a little more time to 
them. In this instance we're using the Windows version of Python 3.
MASTERING MODULES
Think of modules as an extension that's imported into your Python code to enhance and extend its capabilities. There are 
countless modules available and as we've seen, you can even make your own.
STEP1
Although good, the built-in functions within Python 
are limited. The use of modules, however, allows us 
to make more sophisticated programs. As you are aware, modules 
are Python scripts that are imported, such as import math.
Python 3.6.2 Shell 
— 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license()" for more information.
»> import math
STEP 3
The result is an error in the IDLE Shell, as the 
Pygame module isn’t recognised or installed in 
Python. To install a module we can use PIP (Pip Installs Packages). 
Close down the IDLE Shell and drop into a command prompt or 
Terminal session. At an elevated admin command prompt, enter:
pip install pygame
§9 Command Prompt
:\Users\david>pip install pygame
STEP 2 
a
Some modules, especially on the Raspberry Pi, 
are included by default, the Math module being a 
prime example. Sadly, other modules aren’t always available. A good 
example on non-Pi platforms is the Pygame module, which contains 
many functions to help create games. Try: import pygame.
STEP 4 
a
The PIP installation requires an elevated status 
due it installing components at different locations. 
Windows users can search for CMD via the Start button and right­
click the result then click Run as Administrator. Linux and Mac users 
can use the Sudo command, with sudo pip install package.
L«r Python 3.62 Shell 
- 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license))" for more information.
>» import math
»> import pygame
Traceback (most recent call last):
File "<pyshell#l>", line 1, in <module>
import pygame
ModuleNotFoundError: No module named ‘pygame1
SB 
1 Prompt
Microsoft Windows [Version 10.0.15063]
(c) 2017 Microsoft Corporation. All rights reserved.
C:\WINDOWS\system32>pip install pygame
Collecting pygame
Using cached pygame-1.9.3-cp36-cp36m-win32.whl
Installing collected packages: pygame
Successfully installed pygame-1.9.3
C:\WINDOWS\system32>
Linux Coding & Programming

Q Python Modules
STEP 5
Close the command prompt orTerminal and 
relaunch the IDLE Shell. When you now enter: 
import pygame, the module will be imported into the code 
without any problems. You'll find that most code downloaded or 
copied from the Internet will contain a module, mainstream of 
unique, these are usually the source of errors in execution due to 
them being missing.
Ur Python 3.6.2 Shell 
- 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license()" for more information.
»> import pygame
STEP 8 
A
Multiple modules can be imported within your code. 
To extend our example, use:
import random 
import math
for I in range(5): 
printfrandom.randintfl, 25))
print(math.pi)
U Rnd Number.py - G/Users/david/Documents/Python/Rnd Number.py (3.62) 
— 
□ X
File Edit Format Run Options Window Help 
import random 
impoit math
for i in range(5): 
print(random.randint(1, 25))
print(math.pi)
STEP 6
The modules contain the extra code needed to 
achieve a certain result within your own code, as 
we've previously experimented with. For example:
import random
Brings in the code from the Random Number Generator module.
You can then use this module to create something like:
for i in range(10):
print(random.randintfl, 25))
STEP 9 
a
The result is a string of random numbers followed 
by the value of Pi as pulled from the Math module 
using the print(math.pi) function. You can also pull in certain 
functions from a module by using the from and import commands, 
such as:
from random import randint
for i in range(5): 
print(randint(l, 25))
U "Untitled
*
File Edit Format Run Options Window Help 
import random
for i in range(10):
print(random.randint(1, 25))
U Rnd Number.py - C/Users/david/Documents/Python/Rnd Number.py (3.62) 
— 
□ X
File Edit Format Run Options Window Help 
from random import randint 
for i in range(5): 
print(randint(1, 25))
STEP 7
This code, when saved and executed, will display ten 
random numbers from 1 to 25. You can play around 
with the code to display more or less, and from a great or lesser 
range. For example:
import random
for i in range(25):
printfrandom.randint(l, 100))
STEP 10 -J
This helps create a more streamlined approach to 
programming. You can also use Import module
*,
 
which will import everything defined within the named module. 
However, it’s often regarded as a waste of resources but it works 
nonetheless. Finally, modules can be imported as aliases:
import math as m
print(m.pi)
Of course, adding comments helps to tell others what's going on.
U *Rnd  Number.py - G/Users/david/Documents/Python/Rnd Number.py (3.62)
*
 
— 
□ X
File Edit Format Run Options Window Help 
import math as m
print(m.pi)
I
Linux Coding & Programming

Fw Python on Linux

Did You Know...
DID YOU KNOW
J I
Debugging
that the word debugging in 
computing terms comes from 
Admiral Grace Hopper, who back in the '40s was working on 
a monolithic Harvard Mark II electromechanical computer. 
According to legend Hopper found a moth stuck in a relay, 
thus stopping the system from working. Removal of the 
moth was hence called debugging.
www.bdmpubtications.corp ' 117

Index
Linux Coding & Programming

Q C++ on Linux
C++ is an excellent, high-level 
programming language that's used in a 
multitude of technologies. Everything 
from your favourite mobile app, 
console and PC game to entire 
operating systems are developed with 
C++ at the core, together with a 
collection of software development 
kits and custom libraries.
C++ is the driving force behind most of 
what you use on a daily basis, which 
makes it a complex and extraordinarily 
powerful language to get to grips with. 
It's the code behind Linux itself, as well 
as most of the behind the scenes drivers, 
library files and control elements of 
most, if not all, operating systems.
This section shows you how to start 
coding in C++ on Linux using a 
Raspberry Pi. From there, you can begin 
to create great things.
120 Why C++?
122 Your First C++Program
124 Structure of a C++Program
126 Compile and Execute
128 Did You Know...Virus!
132 Variables
136 Strings
138 C++Maths
140 User Interaction
142 Did You Know...The Hobbit
144 Common Coding Mistakes
Linux Coding & Programming

C++ on Linux
Why C++?
C++ is one of the most popular programming languages available today. Originally 
called C with Classes, the language was renamed C++ in 1983. It's an extension of the 
original C language and is a general purpose object-oriented (OOP) environment.
C EVERYTHING
Due to how complex the language can be, and its power and performance, C++ is often used to develop games, programs, 
device drivers and even entire operating systems.
Dating back to 1979, the start of the golden era of home 
computing, C++, or rather C with Classes, was the brainchild of 
Danish computer scientist Bjarne Stroustrup white working on his 
PhD thesis. Stroustrup's plan was to further the original C language, 
which was widely used since the early seventies.
C++ proved to be popular among the developers of the '80s, 
since it was a much easier environment to get to grips with and 
more importantly, it was 99% compatible with the original C 
language. This meant that it could be used beyond the mainstream 
computing labsand by regular people who didn't have access to the 
mainframesand large computing data centres.
C++'s impact in the digital world is immense. Many of the programs, 
applications, gamesand even operating systems are coded using 
C++. For example, all of Adobe's major applications, such as 
Photoshop, InDesign and so on, are developed in C++. You will find 
that the browseryou surf the Internet with is written in C++, as 
well as Windows 10, Microsoft Office and the backbone to Google's 
search engine. Apple's macOS is written largely in C++ (with some
C++ code is much faster than that of Python.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
# i nc1ude<i os Lr eam>
using namespace std;
void main()
□ (char ch;
cout<<"EnLer a charaLer Lo check it is vowel or not"; 
cin>>ch;
switch(ch)
□ ( 
case’a’: case’A’: 
cout<<ch<<" is a Vowel"; 
break;
case 1e1: case'E': 
cout«ch«" is a Vowel"; 
break;
case 1i': case 1 I ’ : 
cout<<ch<<" is a Vowel"; 
break;
case ’o’: case’O' : 
cout<<ch<<" is a Vowel"; 
break;
case ’u': case’U': 
cout«ch<<" is a Vowel"; 
break;
J-+■ .
120
Linux Coding & Programming

Installing - Visual Studio Community 2017 (15.0.26223.1)
Workloads Individual components Language packs
Windows (3) -
Universal Windows Platform development
Create applications for the Universal Windows Platform with C#.
VB, JavaScript, or optionally C++.
IQ-1 .NET desktop development
L-g-J Build WPF, Windows Forms and console applications using the 
.NET Framework.
Desktop development with C++
Build classic Windows-based applications using the power of the 
Visual C++ toolset, ATL, and optional features like MFC and...
Web & Cloud (4)
ASP.NET and web development
Build web applications using ASP.NET, ASP.NET Core, HTML, 
JavaScript, and CSS.
Azure development
Azure SDK, tools, and projects for developing cloud apps and
creating resources.
Node.js development
Build scalable network applications using Node.js, an asynchronous 
event-driven JavaScript runtime.
fSi Data storage and processing
Connect, develop and test data solutions using SQL Server. Azure
Data Lake, Hadoop or Azure ML
Summary
v Desktop development with C...
Included
Visual C++ core desktop features
Optional
3 VC++ 2017 v141 toolset (x86,x64)
3 C++ profiling tools
3 Windows 10 SDK (10.0.14393.0)
3 Visual C++ tools for CMake
3 Visual C++ ATL support
□ Windows 8.1 SDK and UCRTSDK 
Windows XP support for C+ +
Q MFC and ATL support (x86 and x64) 
|
□ C++/CLI support
O Clang/C2 (experimental)
0 Standard Library Modules
0 By continuing, you agree to the license for the 
Visual Studio edition you selected. We also offer the 
ability to download other software with Visual 
Studio. This software is licensed separately as set 
out in the 3rd Party Notices or in its accompanying 
license. By continuing, you also agree to those
e
 Microsoft's Visual Studio is a great, 
free environment to learn C++ in.
other languages mixed in depending on the function) and the likes 
of NASA, SpaceX and even CERN use C++ for various applications, 
programs, controlsand umpteen other computing tasks.
C++ is also extremely efficient and performs 
well across the board as well as being an 
easier addition to the core C language. 
This higher level of performance over 
other languages, such as Python, BASIC 
and such, makes it an ideal development 
environment for modern computing, 
hence the aforementioned companies 
using it so widely.
While Python is a great programming 
language to learn, C++ puts the developer 
in a much wider world of coding. By 
mastering C++, you can find yourself 
developing code for the likes of Microsoft, Apple 
and so on. Generally, C++ developers enjoy a higher 
salary than programmers of some other languages and 
due to its versatility, the C++ programmer can move between 
jobs and companies without the need to relearn anything specific. 
However, Python is an easier language to begin with. If you're 
completely new to programming then we would recommend you 
begin with Python and spend some time getting to grips with 
programming structure and the many ways and means in which 
you find a solution to a problem through programming. Once 
you can happily power up your computer and whip
out a Python program with one hand tied behind 
your back, then move on to C++. Of course, 
there’s nothing stopping you from jumping 
straight into C++; if you feel up to the task, 
go for it.
Getti ng to use C++ is as easy as Python, all 
you need is the right set of tools in which 
to communicate with the computer in 
C++ and you can start your journey. A C++ 
IDE is free of charge, even the immensely 
powerful Visual Studio from Microsoft 
is freely available to download and use. 
You can get into C++ from any operating 
system, be it macOS, Linux, Windows or even 
mobile platforms.
Just like Python, to answer the question of Why C++ is the 
answer is because it's fast, efficient and developed by most of the 
applications you regularly use. It's cutting edge and a fantastic 
language to master.
e
 Indeed, the operating system you're 
using is written in C++.
Windows 10
Mac
debian
ubuntu
Linux Coding & Programming

C++ on Linux
Your First C++ Program
The Raspberry Pi makes for a great coding base on which to learn C++. You won't need 
any complicated, third-party IDEs or to install any extra components. Everything you 
need to get started is already built into the Pi.
HELLO, WORLD!
It's traditional in programming for the first code to be entered to output the words 'Hello, World!' to the screen. Interestingly, 
this dates back to 1968 using a language called BCPL.
STEP1
You can use the included Geany Programmer's 
Editor to write, compile and execute your C++ code 
on the Raspberry Pi. You can find Geany as the first entry in the 
Programming section from the main Raspberry Pi menu. Click the 
Geany icon to open and start coding.
STEP 3
It doesn't look like much at the moment but you can 
get into what the C++ header commands mean in 
due course. Geany uses syntax highlighting, meaning it colour-codes 
the code depending on the language. To activate this, save the code 
by clicking on File > Save As. Now name the code helloworld.cpp and 
click the Save button.
STEP 2
The Geany editor is quite powerful while still being 
easy to use. All the code you enter shows in the 
main window and is numbered to help you keep track of your code. 
For now, in line 1, enter:
#include <iostream>
STEP 4
The colour coding helps a lot when your coding.
Now press Enter and start a new command on line
3. Enter the following:
int mainO
Note: there's no space between the brackets.
File Edit Search View Document Project Build Tools Help
>. ♦ - <0 S
I*
Symbols > 
w symbols found
Linux Coding & Programming

Your First C++ Program
STEP 5 J
On the next line, below int mainO, enter a curly bracket: 
{
This can be done by pressing Shift and the key to the rightofPonan 
English UK keyboard layout.
STEP 8 
_______J
Now you need to close off the code, by inserting the 
opposite, closing, curly bracket. On line 7 enter:
Note that you won't need to backspace to the start of the line, 
removing the indent, just by entering the curly bracket Geany auto­
jumps to the correct part of the line, thus ending the code block.
STEP 6
Notice that Geany has automatically created a slight 
indent. This is due to the structure of C++ and it's 
where the meat of the code is entered. Now enter:
//My first C++ program
STEP 9
Essentially, these are your first steps into the world 
of coding in C++. We will look at the structure of the 
code in more detail on the next couple of pages; for now though, 
click on the Save button as represented by a filing cabinet with a 
green downward pointing arrow.
STEP 7
Note again the colour coding change. Press Return 
at the end of the previous step's line and then enter:
std::cout « “Hello, world!\n”;
STEP 10
A
I
 File Edit Search View Document Project Build Tools Help 
b - S © bj x 
I &
♦hellowortd.cpp - /home/pi/i
Ifyou haven't done so already, it's always advisable 
to create a blank folder where you can save all 
your code. You can have one each for Python and C++ or simply a 
single folder called Code, whichever you prefer. It's not a necessity, 
just good housekeeping.
<| Symbols ■> 
I (p Functions
(p main [3|
helloworld.cpp x |__
1 
^include <iostream>
2
3 
int main() 
{
//My first C++ program
std::cout « "Hello, world'Xn";
I
Linux Coding & Programming

C++ on Linux
Structure of a 
C++ Program
C++ has a very defined structure and way of doing things. Miss something out, even 
as small as a semicolon, and your entire program will fail to be compiled and executed. 
Many a professional programmer has fallen foul of sloppy structure.
INCLUDE <C++ STRUCTURE>
Learning the basics of programming, you begin to understand the structure of a program. The commands may be different 
from one language to the next but you can start to see how the code works.
INTMAINO
C++ was invented by Danish 
student Bjarne Stroustrup 
in 1979, as a part of his 
Ph.D. thesis. Initially C++ 
was called C with Classes, 
which added features 
to the already popular C 
programming language, 
while making it a more 
user-friendly environment 
through a new structure.
Bjarne Stroustrup, 
inventor of C++.
int main() initiates the declaration of a 
function, which is a group of code statements 
under the name 'main'. All C++ code begins at the main function, 
regardless of where it actually lies within the code.
helloworld.cpp x
1 
©include <iostreani>
2
3 
int main()
4
5
©INCLUDE 
A
The structure of a C++ program is quite 
precise. Every C++ code begins with a directive: 
#include <>. The directive instructs the pre-processor to include a 
section of the standard C++ code. For example: #include <iostream> 
includes the iostream header to support input/output operations.
BRACES A
The open brace (curly brackets) is something that 
you may not have come across before, especially if 
you're used to Python. The open brace indicates the beginning of the 
main function and contains all the code that belongs to that function.
helloworld.cpp x
1
2
3
4
©include <iostreai
helloworld.cpp x
1 
©include <iostream>
2
3 
int main()
4 
S{
124
Linux Coding & Programming

COMMENTS 
___________ J
Lines that begin with a double slash are 
comments. This means they won't be 
executed in the code and are ignored by the compiler. Comments 
are designed to help you, or another programmer looking at your 
code, and explain what's going on. There are two types of comment: 
/*  covers multiple line comments and //a single line.
The two chevrons used here are insertion operators.
This means that whatever follows the chevrons is to be 
inserted into the stdccout statement. In this case they're the words 
’Hello, world' which are to be displayed on the screen when you 
compile and execute the code.
helloworld.cpp x
1 
^include <iostream>
2
3 
int main()
4
5 
//My first C++ program
6
7 
}
8 
L
helloworld.cpp x
i 
2
3
4
5
6
7
8
9
^include <iostream> 
using namespace std;
int main()
0{
//My first C++ program 
cout « |
}
While std stands for something quite different, in C++ it 
means Standard. It's part of the Standard Namespace in 
C++, which covers a number of different statements and commands. 
You can leave the std: : part out of the code but it must be 
declared at the start with: using namespace std; not both. For 
example:
OUTPUTS 
A
Leading on, the "Hello, world!" part is what you 
want to appear on the screen when the code is 
executed. You can enter whatever you like, as long as it's inside the 
quotation marks. Sometimes brackets are needed, depending on 
the compiler. The \n part indicates a new line is to be inserted.
#include <iostream> 
using namespace std;
helloworld.cpp x
1 
^include <iostream>
2
3 
int main()
4
5 
//My first C++ program
6 
std::cout « "Hello, world!\n";
7 
}
8 
L
//My first C++ program 
cout « "Hello, world'\n"|
COUT 
A
In this example we're using cout, which is a part of 
the Standard Namespace, hence why it's there, as 
you're asking C++ to use it from that particular namespace. Cout 
means Character OUTput, which displays, or prints, something to 
the screen. If you leave std:: out you have to declare it at the start of 
the code, as mentioned previously.
Finally you can see that lines within a function code 
block (except comments) end with a semicolon. This 
marks the end of the statement; all statements in C++ must have 
one at the end or the compiler fails to build the code. The very last 
line has the closing brace to indicate the end of the main function.
helloworld.cpp x
1 
^include <iostream>
2 
using namespace std;
3
4 
int main()
5 
a{
6 
//My first C++ program
7 
cout |
8 
}
9 
L
helloworld.cpp x
1 
^include ■ciostream:
*
2 
using namespace std;
3
4 
int main()
5 
B{
6 
//My first C++ program
7 
cout « "Hello, world!\n";
8 
}
9 
L
Linux Coding & Programming

C++ on Linux
Compile and Execute
You've created your first C++ program and you now understand the basics behind the 
structure of one. Let's get things moving and compile and execute, or run if you prefer, 
the program and see how it looks.
GREETINGS FROM C++
Compiling and executing code From within Geany is remarkably simple and just a matter oF clicking a couple oF icons and 
seeing the result. Here's how it's done.
STEP1
Open Geany, if you haven't already, and load up 
the previously saved Hello World code you created. 
Ensure that there are no visible errors, such as a missing semicolon 
at the end of the std::cout line.
STEP 3
When you click the Build icon, the pane at the 
bottom of the Geany interface displays some 
results. If all is well, you will see a successful compilation, if not then 
Geany issues an error along with the line the error was found on.
helloworld.cpp x
i
2 
3
4
5
6
7
8
^include <iostream>
int isain()
K
//My first C++ program
std::cout « "Hello, world I\n";
}
STEP 2
If your code is ready, look to the menu bar along 
the top of the Geany window. Notice that midway 
along the line of icons there's a red brick icon. This is Build, which 
when clicked runs through the code, checking it against the C++ 
standards to see if there are any errors that stop it from running.
STEP 4
With the code successfully built, it's now time to 
execute it. Next to the Build icon there's a paper 
aeroplane icon, this is the Run icon. You can't run code that hasn't 
been previously built or has an error in place. Click the Run icon.
le Edit Search View Document Project Build Tools Help
mt Project Build Tools Help
X . I - I<l S 
---
Symbols >
Functions 
main 13)
7? I b? X I 
helloworld.cpp x
1 ^include <iostream>
Run or view the current file
2
3
4
5
6
7
8
int main()
//My first C++ program
std: :cout « Hello, world !\n";|
jde ciostreams
ain()
'My first C++ program
td::cout « "Hello, world!\n“;
Linux Coding & Programming

Q Compile and Execute
STEP 5
When you click Run, the C++ code executes and 
a simple Terminal window appears displaying the 
results of the code. In the case of this simple code, you can see the 
words: Hello, world! in the window; as you've already learned, the 
code is cout(ing) (outputting) the contents between the quotes in 
the stdrcout line.
STEP 8 
A
Just as mentioned previously, you don't need 
to have stdccout if you've already declared the 
standard namespace at the start of the code. Now, let's create a 
deliberate mistake, to see what happens. Remove the semicolon 
from the cout line, so it reads:
cout « “Hello, world!\n”
x 
«
" helloworld.cpp x |
1 #include <iostream>
2
3 int main()
4 S{
5 
//My first C++ program
6 
std::cout « "Hello, world* 1 2 3 4 5 6 7\n";
» helloworld.cpp x |_
1 ^include <iostream>
2 using namespace std;
3
4 int main()
5 □{
6 
//My first C++ program
7 
| cout « "Hello, world'Xn";
7 >
8 L
helloworld.cpp x
1 
^include <iostream>
2 
using namespace std;
3
4 
int main()
5 a{
6 
//My first C++ program
7 
cout « "Hello, world!\n"
8 
}
9 L
STEP 6
Pressing Return/Enter in the command line box 
closes it, returning you to Geany. Let’s alter the code 
slightly. Under the #include line, enter:
using namespace std;
Then, delete the std:: part of the Cout line; like so:
STEP 9
Now try and build the code once more. This time, 
notice that the bottom panel is displaying an error, 
regarding the missing semicolon. Notice that error reads as being 
on line 8, the first character, the closed curly bracket. This is because 
there's an expected semicolon missing before the closed bracket.
cout « “Hello, world\n”;
helloworld.cpp x
i 
2
3 
4
5
6 
7
B
9
ffinclude <iostream> 
using namespace std;
int main()
B{
//My first C++ program
|cout « "Hello, worldf\n”
}
/mbols >
notions
main [4J
:ern Variables
std [2]
helloworld.cpp x
1 
^include <iostream>
2 
using namespace std;
3
4 
int main()
5 Q{
6 
//My first C++ program
7 
cout « "Hello, world!’
8 
1
9 L
STEP 7
ln order to apply the new changes you need to save 
the file, build it and execute it again. Go through the 
process as before, you don’t need to change the name of the file 
unless you want to, of course, followed by clicking the Brick icon, 
then the Aeroplane icon.
STEP 10 
________J
Replace the semicolon and under the cout line, 
enter a new line to your code:
cout « “And greetings from C++!\n”;
The \n simply adds a new line under the last line of outputted text. 
Build and Run the code, to display your handiwork.
Linux Coding & Programming
127

C++ on Linux
010110000101 
011001100111010101 
0010011110010010000000
110010011001010010000000
001000000111001101100011111 
0011001ooooiooooooi110011ni
Virus!
DID YOU KNOW...
that one of the first 
programmed computer 
viruses that spread outside 
of a controlled system, i.e. 
into the wild, was called Elk 
Cloner and it was coded 
in 1982 by Rich Skrenta, a 
fifteen year old student.
Elk Cloner was programmed 
to infect the Apple DOS 
3.3 operating system, and 
attached to a game. When 
the game was played fifty 
times the virus would be 
activated and instead of 
displaying the game the 
virus would blank the screen 
and display a poem:
Elk Cloner:
The program with a 
personality
It will get on all 
your disks
It will infiltrate your 
chips
Yes, it’s Cloner!
It will stick to you 
like glue
It will modify RAM too 
Send in the Cloner!
0001100001011101000111010000
10101110010011010001110100000
000001100011011011110110010000
0100001100101001000000111011 in 1 
11010001101000011001010010000000
10111000100000011011010110000101 
10111101101110011001100111010101 
10000001100010011110010010000000
10000101110010011001010010000000
11000000100000011100110110001 111 1
01110011001000010000001110011H1 
0000001100001011101000111010000
1010101110010011010001110100000
00000110001 
1100100100
000011001 
110111111
0001101 
100000100
000100 
10000101
01101 
111010101
1100 
011000 
0010000000
0111011 
1011100 
10010000000
101101111 
000100000 
110110
1011000010 
0110010000100000011
01110010001 
011000010111010001
01100011011101 
1110010011010001
>011110010010000001100011011011110 
1011101000110100001100101001000000
10010000001110100011010000110010100 oooooo
01101110001000000110110101100001 io1
1111011011100110011001110101101 
0011000100111100100100000100
11001001 01 
00 0
000011 
11 
01 1
000010000001110011H1 
0001011 
00 
10 0
111001001101 
00 
00 0
00011000110110111101100100100
110100 
10100001100101001000000111011 H11
010000001110100011010000110010100100000100
1100001011011100010000 
11011010110000101
100011011011110110 
001100111010101
0101001000000 
10010000000
111011000
11101110
0010110
10001
00
00
110
11001
00
00
00 00
01
0001101
01 00
10
10
00
0011011
01
11
01
00 
01
11101
128
www.bdmpublications.com

0001011011
0101011100110110
00000101011101100001 
0000011000010111010001 
001101110010011001010110
Did You Know...
00110110110101100001011100
010001100001011000110110101 
1000111100100100000011000110 
01000110010100100000011010110 
01110110111101110010011001000 
000001100011011001010110111001 
000101101100011001010010000001 
010101110011011001010110010000 
0000010101110110000101101110011 
0000011000010111010001110100011 
0011011100100110010101100101011 
001101101101011000010111001001 
010001100001011000110110101100 
H0001111001001000000110001101 
0100011 
0000011010110
011101 
001100100
000001 
0110111
000101 
00100
0101011 
10110
00000101 
101101 
1001
000001100 
0001110 
00101
111001 
10101100 
111000
1011010110000101110 
1010001
00001011000110110 
010000001
10010010000001100 
1011011110111
0010100100000011010110110010101
0111101110010011001000010000001010111
00000 0001101100101011011100111010001
00010110110001100101001000000110
01010111001101100101011001000
0000010101110110000101101
00 
00 
11010001
01 
00 
110010
001101101101011000
10 
00 
11000110
00 
00 001000000110
010001100101001000000110101
0111011011110111001001100100001 
0000
00000110001101100101011011100111010001
-i aai n
000101101100011 
0101011100110 
000001010
010010000001100110011 
11001000010000001 
111001101110
0001100001 
10110111 
0111010 
010000
01
01
001000
011010
01
01
01
01 
10
0110
011001
01 
10
01
01
01
00 
00
01
00
011001
011001
Developed as a prank back in '82, Elk 
Cloner was one of the first recorded 
viruses in the wild.
www.bdmpublications.com
129

C++ on Linux
Using Comments
While comments may seem like a minor element to the many lines of code that 
combine to make a game, application or even an entire operating system, in actual fact 
they're probably one of the most important factors.
THE IMPORTANCE OF COMMENTING
Comments inside code are basically human readable descriptions 
that detail what the code is doing at that particular point. They don’t 
sound especially important but code without comments is one of 
the many frustrating areas of programming, regardless of whether 
you're a professional or just starting out.
In short, all code should be commented in such a manner as to 
effectively describe the purpose of a line, section or individual 
elements. You should get in to the habit of commenting as much as 
possible, by imagining that someone who doesn't know anything 
about programming can pick up your code and understand what it's 
going to do simply by reading your comments.
In a professional environment, comments are vital to the success of 
the code and ultimately, the company or project. In an organisation, 
many programmers work in teams alongside engineers, other
developers, hardware analysts and so on. If you're a part of the team
that's writing a bespoke piece of software for the company, then
your comments help save a lot of time should something go wrong 
and another team member has to pick up
and follow the trail to pinpoint the issue.
Place yourself in the shoes of 
someone who'sjob it is to find out 
what's wrong with a program. The 
program has in excess of 800,000 
lines of code, spread across several 
different modules. You can soon 
appreciate the need fora little help 
from the original programmers in the 
form of a good comment.
The best comments are always concise and link the code logically, 
detailing what happens when the program hits a line or section. You 
don't need to comment on every tine. Something along the lines of: 
if x==0 doesn't require you to comment that if x equals zero then do 
something; that's going to be obvious to the reader. However, if x 
equalling zero is something that drastically changes the program for 
the user, such as, they've run out of lives, then it certainty needs to 
be commented on.
Even if the code is your own, you should write comments as if you 
were going to share it with others publicly. This way you can return 
to that code and always understand what it was you did or where it 
was you went wrong, or what worked brilliantly.
Comments are good practise and once you understand how to add a 
comment where needed, you soon do it as if it’s second nature.
DEFB 
26h,3Oh,32h,26h,30h,32h,0,0,32h,72h,73h,32h,72h,73h,32h
DEFB 60h,61h,32h,4Ch,4Dh,32h,4Ch,99h,32h,4Ch,4Dh,32h,4Ch,4Dh 
DEFB 
32h,4Ch,99h,32h,5Bh,5Ch,32h,56h,57h,32h,33h,OCDh,32h,33h
DEFB 34h,32h,33h,34h,32h,33h,OCDh,32h,40h,41h,32h,66h,67h,64h 
DEFB 66h,67h,32h,72h,73h,64h,4Ch,4Dh,32h,56h,57h,32h,80h,OCBh 
DEFB 19h,80h,0,19h,80h,Blh,32h,80h,OCBh,OFFh
T858C: 
DEFB 80h,72h,66h,60h,56h,66h,56h,56h,51h,60h,51h,51h,56h,66h 
DEFB 56h,56h,80h,72h,66h,60h,56h,66h,56h,56h,51h,60h,51h,51h 
DEFB 56h,56h,56h,56h,80h,72h,66h,60h,56h,66h,56h,56h,51h,60h 
DEFB 
51h,Sih,56h,66h,56h,56h,80h,72h,66h,60h,56h,66h,56h,40h
DEFB 
56h,66h,BOh,66h,56h,56h,56h,56h
; Game restart point 
START: XOR 
A
LD 
(SHEET),A
LD 
(KEMP),A
LD 
(DEMO),A
LD 
(B845B),A
LD 
(B8458),A
LD 
A,2 
;Initial lives count
LD 
(NOMEN),A
LD 
HL,T845C
SET 
0, (HL)
LD 
HL,SCREEN
LD 
DE,SCREEN+1
LD 
BC,17FFh 
;Clear screen image
LD 
(HL),O
LDIR 
LD 
HL,OAOOOh 
;Title screen bitmap
LD 
DE,SCREEN
LD 
BC,4096
LDIR 
LD 
HL,SCREEN + BOOh + 1*32  + 29
LD 
DE,MANDAT+64
LD 
C,0
CALL 
DRWFIX
LD 
HL,OFCOOh 
; Attributes for the last 
room
LD 
DE,ATTR 
;(top third)
LD 
BC,256
LDIR 
LD 
HL,09E00h 
;Attributes for title screen
LD 
BC,512 
;(bottom two-thirds)
LDIR 
LD 
BC, 31
DI 
XOR 
A
R8621: 
IN 
E, (C)
OR 
E
DJNZ 
R8621 
;$-03
AND 
2Oh
JR 
NZ,R862F ;§+07
LD 
A, 1
130
Linux Coding & Programming

Q Using Comments
C++ COMMENTS
Commenting in C++ involves using a double forward slash '//' or a forward slash and an asterisk You've already seen some 
brief examples but this is how they work.
STEP1 
a
Using the Hello World code as an example, you can 
easily comment on different sections of the code 
using the double forward slash:
//My first C++ program cout « “Hello, world!\n”;
STEP 4
Be careful when commenting, especially with block 
comments. It’s very easy to forget to add the closing 
asterisk and forward slash and thus negate any code that falls inside 
the comment block.
helloworld.cpp x I
^include <iostream> 
using namespace std;
1
2
3 
4
5
6 
7 
a
9
io
int 
O{
main()
}
//My first C++ program
cout « "Hello, world!Xn";
cout « "And greetings from C++!Xn"
helloworld.cpp x |
1 ^include <iostream>
2 using namespace std;
3
4
5 
6
7
8
9
10 
11
12
13
14
15 
16
int main() 
e{
//My first C++ program
cout « "Hello, world'Xn"; //This line ouputs the words 'Hello, w
e) /* * This comment can
helloworld.cpp x
^include <iostream>
using namespace std;
int main()
e{
//My first C++ program
cout « “Hello, world'Xn"; //This line ouputs the words 'Hello, world. The '
B /’ This comment can
* cover several lines
* without the need to add more slashes ’/
cout « "And greetings from C++!\n";
•I
* cover several lines
* without the need to add more slashes)
cout « "And greetings from C++!\n"; 
}
STEP 2 
a
However, you can also add comments to the end of 
a tine of code, to describe in a better way what's 
going on:
cout « “Hello, world!\n”; //This line outputs the 
words ‘Hello, world!’. The \n denotes a new line.
STEPS
Obviously if you try and build and execute the 
code it errors out, complaining of a missing curly 
bracket'}' to finish off the block of code. If you've made the error 
a few times, then it can be time consuming to go back and rectify. 
Thankfully, the colour coding in Geany helps identify comments 
from code.
Note, you don’t have to put a semicolon at the end of a comment. 
This is because it’s a tine in the code that's ignored by the compiler.
helloworid.cpp x |
1 ^include <i :n
4 
int main()
5 
B{
6 
//My first C++ program
7 
cout « "Hell", world' ; //This line ouputs the words 'Hello, world. The Xn denotes a new line.
8 
cout « "And greetings from C--'\n";
9 
> 
ie L
<] Symbols ]>
tp Functions
<p main [4]
0 Extern Variables
0 std [2]
helloworld.cpp x
3
5
6
7
8
9
10
11
12
13
14
15
16
ffinclude <iostream>
using namespace std;
int main()
//My first C++ program
* cover several lines
* without the need to add more slashes
cout « "And greetings from C++!\n"; 
)
STEP 3 
_______J
You can comment out several lines by using the 
forward slash and asterisk:
/*  This comment can 
cover several lines 
without the need to add more slashes */
Just remember to finish the block comment with the opposite 
asterisk and forward slash.
3
4
5
6
7
8
9
10
11
12
13
14
15
16
STEP 6 
A
With block comments, it's good practise in C++ to 
add an asterisk to each new line of the comment 
block. This also helps you to remember to close the comment block 
off before continuing with the code:
/*  This comment can
* 
cover several lines
* 
without the need to add more slashes /*
Thankfully, Geany does this automatically but be aware of it when 
using other IDEs.
* cover several lines
* without the need to add more slashes */
Linux Coding & Programming

C++ on Linux
Variables
Variables differ slightly when using C++ as opposed to Python. In Python, you can 
simply state that 'a' equals 10 and a variable is assigned. However, in C++ a variable has 
to be declared with its type before it can be used.
THE DECLARATION OF VARIABLES
You can declare a C++ variable by using statements within the code. There are several distinct types of variable you can 
declare. Here's how it works.
STEP 1
________ J
Open up a new, blank C++ file and enter the usual 
code headers:
STEP 3
#include <iostream> 
using namespace std; 
int mainO 
{
}
You can build and run the code but it won't do much, 
other than store the values 10 and 5 to the integers a 
and b. Ignore the warnings about variables set but not used, the code 
still works. To output the contents of the variables, add:
cout « a;
cout « ”\n”;
cout « b;
Variables.cpp x
1 
^include <ioscream>
2 
using namespace std;
3
4 
int main()
5 S{
6
7 J
8
The cout« “\n”; part simply places a new line between the 
output of 10 and 5.
Variables.cpp x
STEP 2
Start simple by creating two variables, a and b, with 
one having a value of 10 and the other 5. You can 
use the data type int to declare these variables. Within the curly 
brackets enter:
int a;
int b;
a = 10;
b = 5;
Variables.cpp x
i
2
3
4
5
6
7
8
9
10
11
12
13
^include <iostream> 
using namespace std;
int main()
int a;
a = 10;
b = 5;|
}
i 
2
3 
4
5 
6
7
8
9
10 
11
12 
13
14
15 
16
17 
18
^include <iostream> 
using namespace std;
int main/)
B{ *
int a;
int b;
a - 19;
b = 5;
cout « a;
cout « "\n";
cout « b;
I
}
STEP 4
________ J
Naturally you can declare a new variable, call it 
result and output some simple arithmetic:
int result;
result = a + b; 
cout « result;
Insert the above into the code as per the screenshot.
Variables.cpp X I
int main()
int b;
int result;
10
11
12
13
14
15
16
17
18
19
20
21
22
23
a = 19;
b = 5;
result = a + b;
cout « result;
Linux Coding & Programming

(^Variables
STEP 5 J
You can assign a value to a variable as soon as you 
declare it. The code you've typed in could look like 
this, instead:
STEP 8
A
int a = 10;
int b = 5;
int result = a + b;
The previous step crea tes the variable StartLives, 
which is a global variable. In a game, for example, 
a player's lives go up or down depending on how well or how bad 
they're doing. When the player restarts the game, the StartLives 
returns to its default state: 3. Here we've assigned 3 lives, then 
subtracted 1, leaving 2 lives left.
cout « result;
STEP 9
STEP 6 
______ J
Specific to C++, you can also use the following to 
assign values to a variable as soon as you declare them:
The modern C++ compiler is far more intelligent 
than most programmers give it credit. While there 
are numerous data types you can declare for variables, you can in 
fact use the auto feature:
int a (10);
int b (5);
Then, from the C++ 2011 standard, using curly brackets: 
int result {a+b};
#include <iostream> 
using namespace std; 
auto pi = 3.141593;
int main()
{
double area, radius = 1.5;
area = pi * radius * radius; 
cout « area;
STEP 7
You can create global variables, which are variables 
that are declared outside any function and used in 
any function within the entire code. What you've used so far are 
local variables: variables used inside the function. For example:
Variables.cpp x
1 
Pinclude <iostream>
2 
using namespace std;
3 
auto pi = 3.141593;
4
5 
int main()
6
double area, radius = 1.5;
8 
area = pi  radius  radius;
*
*
9 
cout « area;
10
11
12 
}
13 
L
#include <iostream> 
using namespace std; 
int StartLives = 3;
STEP 10
a
int main ()
{
startLives = StartLives - 1; 
cout « StartLives;
Although we said to ignore the warnings in Step 
3, there's a difference between a warning and 
an error. In this case, it's just a simple warning. The new data type, 
double, means double-precision floating point value, which makes 
the code more accurate. The result should be 7.06858. Essentially, 
you can often work with a warning but notan error.
1 
^include <iostream>
2 
using namespace std;
3 
int StartLives = 3;
4
5 
int mainf)
6 
El{
7 
StartLives = StartLives - 1;
8 
cout « StartLives;|
9
10 
}
11 
L
Vanabies.cpp x I
1 
^include <iostream>
2 
using namespace std;
3 
auto pi = 3.141593;
5 
int main()
6 
□{
7 
double area, radius =1.5;
8 
area = pi  radius  radius;
*
*
9 
cout « area;
10
11
12 
}
13
File Edit Tabs Help
|7.06858
(program exited with code: 9) 
Press return to continue
Linux Coding & Programming
13

C++ on Linux
Data Types
Variables, as you've seen, store information that the programmer can then later call up, 
and manipulate if required. Variables are simply reserved memory locations that store 
the values the programmer assigns, depending on the data type used.
THE VALUE OF DATA
There are many different data types available for the programmer 
in C++, such as an integer, floating point, Boolean, character and so 
on. It's widely accepted that there are seven basic data types, often 
called Primitive Built-in Types; however, you can create your own 
data types should the need ever arise within your code.
Type
Command
Integer
int
Floating Point
float
Character
char
Boolean
bool
Double Floating Point
double
Wide Character
wchar_t
No Value
void
These basic types can also be extended using the following 
modifiers: Long, Short, Signed and Unsigned. Basically this means 
the modifiers can expand the minimum and maximum range values 
for each data type. For example, the int data type has a default value 
range of-2147483648 to 2147483647, a fair value, you would agree.
Now, if you were to use one of the modifiers, the range alters:
Unsigned int = 0 to 4294967295
Signed int = -2147483648 to 2147483647
Short int = -32768 to 32767
Unsigned Short int = 0 to 65,535
Signed Short int = -32768 to 32767
Long int = -2147483647 to 2147483647
Signed Long int = -2147483647 to 2147483647
Unsigned Long int = 0 to 4294967295
Naturally you can get away with using the basic type without the 
modifier, as there's plenty of range provided with each data type. 
However, it's considered good C++ programming practise to use the 
modifiers when possible.
There are issues when using the modifiers though. Double 
represents a double-floating point value, which you can use for 
incredibly accurate numbers but those numbers are only accurate 
up to the fifteenth decimal place. There's also the problem when 
displaying such numbers in C++ using the cout function, in that cout 
by default only outputs the first five decimal places. You can combat 
that by adding a cout.precision () function and adding a value inside 
the brackets but even then you're still limited by the accuracy of the 
double data type. For example, try this code:
#include <iostream> 
using namespace std; 
double PI = 3.141592653589793238463;
int mainO 
{
cout « PI;
DataTypes.cpp x
1 ^include <iostream>
2 
using namespace std;
3 
double PI = 3.141592653589793238463;|
4
5 
int main()
6 
□{
7 
cout « PI;
8 
}
9
3.14159
(program exited with code: 
Press return to continue
0)
Build and run the code and as you can see the output is only 
3.14159, representing cout's limitations in this example.
You can alter the code including the aforementioned cout.precision 
function, for greater accuracy. Take precision all the way up to 22 
decimal places, with the following code:
#include <iostream> 
using namespace std; 
double PI = 3.141592653589793238463;
int mainO
{
cout.precision(22);
cout « PI;
134
Linux Coding & Programming

Data Types
DataTypes cpp
1 ^include <iostream>
2 
using namespace std;
3 
double PI = 3.141592653589793238463;
4
5
6
7
8
9
10
int main()
cout.precision(22); 
cout « PI;
}
This is mainly due to the conversion from binary in the compiler 
and that the IEEE 754 double precision standard occupies 64-bits 
of data, of which 52-bitsare dedicated to the significant (the 
significant digits in a floating-point number) and roughly 3.5-bits 
are taken holding the values 0 to 9. If you divide 53 by 3.5, then you 
arrive at 15.142857 recurring, which is 15-digits of precision.
3.141592653589793115998
To be honest, if you're creating code that needs to be accurate to 
more than fifteen decimal places, then you wouldn't be using C++, 
you would use some scientific specific language with C++ as the 
connective tissue between the two languages.
(program exited with code: 9) 
Press return to continue
Again, build and run the code; as you can see from the command 
line window, the number represented by the variable PI is different 
to the numberyou've told C++ to use in the variable. The output 
reads the value of PI as 3.141592653589793115998, with the 
numbers going awry from the fifteenth decimal place.
□ X
Calculator
= Scientific
You can create your own data types, using an alias-like system called 
typedef. For example:
^include <iostream> 
using namespace std; 
typedef int metres;
int mainO
{
metres distance;
distance = 15;
cout « “distance in metres is: “ « distance;
15.142857142857142857142857142857
DEG HYP F-E
M + M- MS
DataTypes.cpp x
1 
^include ciostream?
2 
using namespace std;
3 
typedef int metres;
4
5 
int main()
6 
9{
7 
metres distance;
8 
distance = 15;
9 
cout « "Distance in metres is: " « distance;
10
11 
J
12 
L
x2
x>'
sin
cos
tan
10
*
log
Exp
Mod
T
CE
C
<3
—
n 7 
8 
9 X
n!4 
5 
6 
-
±12 
3 
+
( 
) 
0
This code when executed creates a new int data type called metres. 
Then, in the main code block, there's a new variable called distance, 
which is an integer; so you’re telling the compiler that there’s 
another name for int. We assigned the value 15 to distance and 
displayed the output: distance in metres is 15.
It might sound a little confusing to begin with but the more you use 
C++ and create your own code, the easier it becomes.
Linux Coding & Programming

C++ on Linux
Strings
Strings are objects that represent and hold sequences of characters. For example, you 
could have a universal greeting in your code 'Welcome' and assign that as a string to be 
called up wherever you like in the program.
STRING THEORY
There are different ways in which you can create a string of characters, which historically are all carried over from the original 
C language and still supported by C++.
STEP 1 
______ J
To create a string, you use the char function. Open a 
new C++ file and begin with the usual header:
STEP 3
-J
#include <iostream> 
using namespace std;
int main O
{
}
Build and run the code and 'Welcome' appears 
on the screen. While this is perfectly fine, it's 
not a string. A string is a class, which defines objects that can be 
represented as a stream of characters and doesn't need to be 
terminated like an array. The code can therefore be represented as:
tfinclude <iostream> 
using namespace std;
strings.cpp X
1 
=include <iostream>
2 
using namespace std;
3
4 
int main()
int main O
{
char greet[] = “Welcome”;
cout « greet « “\n”;
STEP 2 
_______J
It's easy to confuse a string with an array. Here's an 
array, which can be terminated with a null character:
strings.cpp x
1 
^include <iostream>
2 
using namespace std;
3
4 
int main()
5 
□{
6 
char greet[] = Welcome";
7 
cout « greet « "\n ;
8
9 
}
10
#include <iostream> 
using namespace std;
int main O
{
char greet[8] = {‘W’, ‘e’, ‘I’, ‘c’, ‘o’, ‘m’, 
‘ e ’, ‘\0’} ;
cout « greet « “\n”;
}
strings.cpp x |
1 
^include iostream>
2 
using namespace std;
3
4 
int main()
5 
□{
6 
char greet[8] = {'W, 'e', 1', 'c', 'o’, 'm , 'e , ’ \0'};
7 
cout « greet « "\n";|
8
9 
}
10
STEP 4
In C++ there's also a string function, which works in 
much the same way. Using the greeting code again, 
you can enter:
#include <iostream> 
using namespace std;
int main () 
{
string greet = “Welcome”; 
cout « greet « “\n”;
}
strings.cpp x
1 
^include <iostream>
2 
using namespace std;
3
4 
int main()
5 
□{
6 
string greet = "Welcome ';
7 
cout « greet « "\n";
8
9 
}
10 
L
Linux Coding & Programming

STEP 5
There are also many different operations that you can 
apply with the string function. For instance, to get the 
length of a string you can use:
#include <iostream>
using namespace std;
int main ()
{
string greet = “Welcome”;
cout « “The length of the string is: 
cout « greet. sizeQ « “\n”;
strings.cpp x
1 
^include <iostream?
2 
using namespace std;
3
4 
int main()
5 
□{
6 
string greet = "Welcome";
7 
cout « "The length of the string is:
8 
cout « greet.size() « An";
9
19 
}
11 L
STEP 6
You can see that we used greet.sizeQ to output the 
length, the number of characters there are, of the 
contents of the string. Naturally, if you call your string something 
other than greet, then you need to change the command to reflect 
this. It's always stringname.operation. Build and run the code to see 
the results.
length of the string is: 7
STEP 8 
A
Just as you might expect, you can mix in an integer 
and store something to do with the string. In this 
example, we created int length, which stores the result of string. 
size() and outputs it to the user:
#include <iostream> 
using namespace std;
int main Q
{
int length;
string greetl = “Hello”;
string greet2 = world!”;
string greets = greetl + greet2;
length = greets. sizeQ;
cout « “The length of the combined strings 
is: “ « length « “\n”;
STEP 9 
a
Using the available operations that come with the 
string function, you can manipulate the contents of a 
string. For example, to remove characters from a string you could use:
#include <iostream> 
using namespace std;
int main Q
{
string strg (“Here is a long sentence in a 
string.”);
cout « strg « ‘\n’;
(program exited with code: 
Press return to continue
C)
strg.erase (10,5); 
cout « strg « ‘\n’;
strg.erase (strg.begin()+8);
cout « strg « ‘\n’;
STEP 7 
________ J
You can of course add strings together, or rather 
combine them to form longer strings: 
strg.erase (strg.begin()+9, strg.end()-9); 
cout « strg « *\n ’;
tfinclude <iostream> 
using namespace std;
int main Q
{
string greetl = “Hello”;
string greet2 = world!”;
string greets = greetl + greet2;
STEP 10
A
It's worth spending some time playing around with 
the numbers, which are the character positions 
in the string. Occasionally, it can be hit and miss whether you get it 
right, so practice makes perfect. Take a look at the screenshot to see 
the result of the code.
cout « greets « “\n”;
}
strings.cpp x
1 
2
3 
4
5 
6
7
8
9 
IO 
11 
12 
13
^include <iostream> 
using namespace std;
int main()
{
string greetl = 'Hello";
string greet2 = ", world!";
string greets = greetl + greet2;
cout « greets « An";|
Linux Coding & Programming
137

C++ on Linux
C++ Maths
Programming is mathematical in nature and as you might expect, there's plenty of 
built-in scope for some quite intense maths. C++ has a lot to offer someone who's 
implementing mathematical models into their code. It can be extremely complex or 
relatively simple.
C++ = MC2
The basic mathematical symbols apply in C++ as they do in most other programming languages. However, by using the C++ 
Math Library, you can also calculate square roots, powers, trig and more.
STEP 1 
______ J
STEP 3 
______ J
C++'s mathematical operations follow the same 
patterns as those taught in school, in that multiplication
and division take precedence over addition and subtraction. You can alter 
that though. For now, create a new file and enter:
#include <iostream> 
using namespace std;
int main O
{
float numbers = 100;
numbers = numbers + 10; // This adds 10 to the 
initial 100
cout « numbers « “\n”;
numbers = numbers - 10; // This subtracts 10 
from the new 110
Multiplication and division can be applied as such:
#include <iostream>
using namespace std;
int main Q 
{
float numbers = 100;
numbers = numbers * 10; // This multiplies 100 
by 10
cout « numbers « “\n”;
numbers = numbers / 10; // And this divides 
1000 by 10
cout « numbers « “\n”;
cout « numbers « “\n”;
maths.cpp *
1 
^include <iostream>
2 
using namespace std;
3
4 
int main()
5
6 
float numbers = 100;
7 
numbers = numbers + 19; //This adds 10 to the initial 100
8
9 
cout « numbers « "\n";
10
11 
numbers = numbers - 10: //This subtracts 10 from the new 110
maths.cpp x
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
^include <iostream>
using namespace std;
int main()
float numbers = 100;
numbers = numbers * 19; //This multiplies 106 by 19
cout « numbers « "\n";
numbers = numbers / 19; //And this divides 1609 by 10 
cout « numbers « "\n";
STEP 2
While simple, it does get the old maths muscle 
warmed up. Note that we used a float for the 
numbers variable. While you can happily use an integer, if you 
suddenly started to use decimals, you would need to change to a 
float ora double, depending on the accuracy needed. Run the code 
and see the results.
STEP 4 
______
Again, execute the simple code and see the 
results. While not particularly interesting, it's an 
introduction to C++ maths. We used a float here, so you can play 
around with the code and multiply by decimal places, as well as 
divide, add and subtract.
110
100
File Edit Tabs Help
.000
.00
(program exited with code: 0) 
Press return to continue
I
(program exited with code: 0) 
Press return to continue
I
Linux Coding & Programming

C++Maths
STEP 5
The interesting maths content comes when you call 
upon the C++ Math Library. Within this header are 
dozens of mathematical functions along with further operations. 
Everything from computing cosine to arc tangent with two 
parameters, to the value of PI. You can call the header with:
#include <iostream>
#include <cmath> 
using namespace std;
int main () 
{
}
I maths, cpp x
i
2
3
4
5
6
7
8
9
19
11
^include <iostream> 
^include <cmath> 
using namespace std;
int main()
ad
}
STEP 8 J
Calculating powers of numbers can be done with:
#include <iostream>
#include <cmath> 
using namespace std;
int main ()
{
float number = 12;
cout « number « “ to the power of 2 is “ 
pow(number, 2) « “\n”;
cout « number « “ to the power of 3 is “ 
powfnumber, 3) « “\n”;
cout « number « “ to the power of 0.8 is 
« powfnumber, 0.8) « “\n”;
| maths.cpp x |__
1 
^include <iostream>
2 
^include <cmath>
3 
using namespace std;
5 
int main()
6 
s{
7 
float number = 12;
8
9 
cout « number « " to the power of 2 is « pow(number, 2) «
IQ
STEP 6 J
Start by getting the square root of a number:
#inciude <iostream>
#include <cmath> 
using namespace std;
int main () 
{
float number = 134;
STEP 9 
a
Here we created a float called number with the 
value of 12 and the pow(variable, power) is where 
the calculation happens. Of course, you can calculate powersand 
square roots without using variables. For example, pow (12,2) 
outputs the same value as the first cout line in the code.
12 to the power of 2 is 144
12 to the power of 3 is 1728
12 to the power of 0.8 is 7.30037
cout « “The square root of “ « number « 
is: “ « sqrt(number) « “\n”;
(program exited with code; 0) 
Press return to continue
maths.cpp x
1 
^include iostream>
2 
^include <cmath>
3 
using namespace std;
4
5 
int main()
6 
□{
7 
float number = 134;
8
9 
cout « "The square root of " « number « " is:
19
11
12 
}
13 
L
STEP 10 
A
The value of Pi is also stored in the cmath header 
library. It can be called up with the M_PI function. 
Enter cout« M_PI; into the code and you get 3.14159; oryou can 
use it to calculate:
#include <iostream>
#include <cmath> 
using namespace std;
int main Q
{ 
double area, radius = 1.5;
area = M_PI * radius * radius;
STEP 7
a
cout « area « “\n”;
Here we created a new float called number and 
used the sqrt(number) function to display the 
square root of 134, the value of the variable, number. Build and run 
the code and your answer reads 11.5758.
le square root of 134 is: 11.5758
(program exited with code: 0) 
Press return to continue
maths cpp x
8
9
10
11
12
13
14
15
^include <iostream>
^include <cmath>
using namespace std;
int main()
□{ 
double area, radius =1.5;
area = M_PI ’ radius * radius;
cout « area « "\n“;
}
Linux Coding & Programming

C++ on Linux
User Interaction
There's nothing quite as satisfying as creating a program that responds to you. This 
basic user interaction is one of the most taught aspects of any language and with it 
youTe able to do much more than simply greet the user by name.
HELLO, DAVE
You have already used cout, the standard output stream, throughout our code. Now you're going to be using cin, the standard 
input stream, to prompt a user response.
STEP1
Anything that you want the user to input into the 
program needs to be stored somewhere in the 
system memory, so it can be retrieved and used. Therefore, any 
input must first be declared as a variable, so it's ready to be used by 
the user. Start by creating a blank C++ file with headers.
STEP 3
The cin command works in the opposite way from 
the cout command. With the first cout line you're 
outputting 'What is your age' to the screen, as indicated with the 
chevrons. Cin uses opposite facing chevrons, indicating an input. The 
input is put into the integer age and called up in the second cout 
command. Build and run the code.
userinteraction.cpp x
i
2
3
4
5
6
7
8
9
10
^include <iostream> 
using namespace std;
int main()
STEP 2 
______ J
The data type of the variable must also match the 
type of input you want from the user. For example,
to ask a user their age, you would use an integer like this:
#include <iostream> 
using namespace std;
int main O
{
int age;
cout « “what is your age: “;
cin » age;
cout «”\nYou are “ « age « “ years old.\n”;
}
STEP 4
If you're asking a question, you need to store the 
input as a string; to ask the user their name, you 
would use:
#include <iostream> 
using namespace std;
int main O
{
string name;
cout « “what is your name:
cin » name;
cout « “\nHello, “ « name « “. I hope you’re 
well today?\n”;
userinteraction.cpp x
i
2
3
4
5
6
7
8
9
10
11
12
13
14
^include <iostream> 
using namespace std;
int main()
{
int age;
cout « "What is ■, >ui age:
cin » age;
cout « "\nYou are ' « age «
}
years old.\n";
userinteraction.cpp *
i 
2
3
4
5 
6
7
8
9
19
11
12
13
14
^include <iostream> 
using namespace std;
int main()
string name;
cout « "What is your name: 
cin » name;
cout « "XnHello, " « name «
I hope you're well today>\n";
}
140
Linux Coding & Programming

r User Interaction
STEP 5
The principal works the same as the previous code.
The user's input, their name, is stored in a string, 
because it contains multiple characters, and retrieved in the second 
cout line. As long as the variable 'name' doesn't change, then you 
can recall it wherever you like in your code.
STEP 8 
A
While cin works well for most input tasks, it does 
have a limitation. Cin always considers spaces as a 
terminator, so it's designed forjust single words not multiple words. 
However, getline takes cin as the first argument and the variable as 
the second:
iat is your name: David
■llo, David. I hope you're well today>
#include <iostream> 
using namespace std;
program exited with code: 0) 
’ress return to continue
STEP 6
You can chain input requests to the user but just 
make sure you have a valid variable to store the 
input to begin with. Let's assume you want the user to enter two 
whole numbers:
int main ()
{
string mystr;
cout « “Enter a sentence: \n”;
getline(cin, mystr);
cout « “Your sentence is: “ « mystr.size() « 
“ characters long.Xn”;
#include <iostream> 
using namespace std;
int main ()
{
int numl, num2;
cout « “Enter two whole numbers:
cin » numl » num2;
cout « “you entered “ « numl « “ and “ 
num2 « “\n”;
^include <iostream>
using namespace std;
int main()
5{
string mystr;
cout « "Enter a sentence: \n";
getline(cin, mystr);
cout « r 
« mystr.size() «
STEP 9
userinteraction.cpp x 1
Build and execute the code, then enter a sentence 
with spaces. When you're done the code reads the 
number of characters. If you remove the getline line and replace it 
with cin » mystr and try again, the result displays the number of 
characters up to the first space.
2
3
5
6
7
8
9
19
11
12
^include <iostream> 
using namespace std;
int main()
{
int numl, num2;
cout << 'Enter two whole numbers: 
cin » numl » num2;
cout « "You entered " « numl «
ind " « num2 «
Enter a sentence:
BDM Publications' Raspberry Pi: Tricks, Hacks & Fixes 
Your sentence is: 53 charcters long.
(program exited with code: 
Press return to continue
STEP 7
________ J
Likewise, inputted data can be manipulated once 
you have it stored in a variable. For instance, ask the
STEP 10
A
user for two numbersand do some maths on them:
Getline is usually a command that new C++ 
programmers forget to include. The terminating 
white space is annoying when you can't figure out why your code 
isn't working. In short, it's best to use getlinefcin, variable) in future:
#include <iostream>
using namespace std;
int main ()
{
float numl, num2;
cout « “Enter two numbers: \n”;
cin » numl » num2;
cout « numl « “ + “ « num2 « “ is: 
numl + num2 « “\n”;
#include <iostream> 
using namespace std;
int main ()
{
string name;
cout « “Enter your 
getlinefcin, name);
cout « “\nHello, “
full name: \n”;
« name « “An”;
5
6
7
8
9
19
11
^include <iostream>
using namespace std;
int main()
int numl, num2;
cout « "Enter two whole numbers:
cin » numl » num2;
cout « numl « " - 
« num2 « 
" « numl + num2 «
userinteraction.cpp x I
2
3
4
5
6
7
8
9
10
ffinclude <iostream> 
using namespace std;
int main()
string name;
cout « "Enter your full name: \n"; 
getline(cin, name);
cout « \nHello, " « name « " \n";|
Linux Coding & Programming

C++ on Linux
The Hobbit
DID YOU KNOW... released in 
1982 for 
various platforms, Melbourne 
House's The Hobbit was a coding 
work of genius. Developed by 
Philip Mitchell and Dr. Veronika 
Megler, The Hobbit was uniquely 
coded using a parser called 
'Inglish' which allowed the player 
to enter full sentences, such as 
"Take sword from Gandalf, and kill 
goblin with it."
Furthermore, each object in the 
game had a specific size, weight 
and solidity; so if you sat on 
a stool, and someone picked up 
the stool or threw it, then your 
character would be taken along 
with it. Also, in early versions 
of the game, the non-playing 
characters would often move 
around the map and capture and 
kill each other before the player 
had even reached that stage in 
the game. There was even a 
randomiser event in place with 
each start of the game, where 
any character could pick up a 
random object from any location. 
This meant that, potentially, it 
was possible for Thorin to pick 
you up and carry you for the 
entire adventure. Remarkable for 
a game that took up less than 38KB 
of memory.
You are in a narrow place with a dreadful 
drop into a dim valley
> N
> 
w
> 
S 
______ -____________
E 
No time to sit down and start singing
1 
about gold, Thorin.

DidYouKnow...
THE HOBBIT is a super-program that is a milestone in 
computer software. You will face dangers, excitement and 
adventure in words and graphics. Meet all the characters from 
THE HOBBIT and talk to them in ordinary English! the HOBBIT 
program brings you the future in an exciting and 
challenging fantasy!
MELBOURNE HOUSE =r=
48K ZX Spectrum
The Hobbit, a marvel in advanced 
coding from 1982.

Common Coding Mistakes
When you start something new you're inevitably going to make mistakes, this is purely 
down to inexperience and those mistakes are great teachers in themselves. However, 
even experts make the occasional mishap. Thing is, to learn from them as best you can.
X=MISTAKE, PRINT Y
There are many pitfalls for the programmer to be aware of, far too many to be listed here. Being 
able to recognise a mistake and fix it is when you start to move into more advanced territory, and 
become a better coder. Everyone makes mistakes, even coders with over thirty years' experience. 
Learning from these basic, common mistakes help build a better coding foundation.
SMALL CHUNKS
It would be wonderful to be able to 
work tike Neo from The Matrix movies. 
Simply ask, your operator loads it into 
your memory and you instantly know 
everything about the subject. Sadly 
though, we can’t do that. The first 
major pitfall is someone trying to learn 
too much, too quickly. So take coding in 
small pieces and take your time.
EASY VARIABLES
Meaningful naming for variables is a must to eliminate 
common coding mistakes. Having letters of the alphabet 
is fine but what happens when the code states there’s 
a problem with x variable. It’s not too difficult to name 
variables lives, money, player! and so on.
//COMMENTS
Use comments. It's a simple concept but commenting on 
your code saves so many problems when you next come to 
look over it. Inserting comment lines helps you quickly sift 
through the sections of code that are causing problems; 
also useful if you need to review an older piece of code.
orig += 2;
target +■ 2;
♦endif
if (n = 0) 
return;
1
2
3
4
5
6
7
8
9
var points = 1023; 
var lives = 3 
var totalTime 
write( 
write( 
write( 
write(
var totalscore = 0;
write("Your total Score is: "ttotalScore);
45;
Points: "+points);
Lives: "+lives);
Total Time: "+totalTime+" secs");
PLAN AHEAD
While it’s great to wake up one morning and decide to code 
a classic text adventure, it's not always practical without a 
good plan. Small snippets of code can be written without 
too much thought and planning but longer and more in- 
depth code requires a good working plan to stick to and 
help iron out the bugs.
Loop unrolling. Here be dragons.
// (n & (-3)) is the greatest multiple of 4 r 
// In the while loop ahead, orig will move ov 
// increments (4 elements of 2 bytes).
// end marks our barrier for not falling outs 
char const * const end = orig + 2 * (n & (~3)
// See if we’re aligned for writtmg in 64 oi 
#if ACE_SIZEOF_LONG = 8 && \
!((defined( amd64 ) II defined ( x86 64
144

USER ERROR
User input is often a paralysing mistake in code. For 
example, when the user is supposed to enter a number for 
their age and instead they enter it in letters. Often a user 
can enter so much into an input that it overflows some 
internal buffer, thus sending the code crashing. Watch those 
user inputsand clearly state what's needed from them.
BACKUPS
Enter an integer number 
aswdfdsf
You haue entered wrong input 
s
You haue entered wrong input
You haue entered wrong input 
sdfsdf213213123
You haue entered wrong input 
123234234234234234
You haue entered wrong input 
12 
the number is: 12
Process returned 0 (0x0) execution time : 21.495 s 
Press any key to continue.
Always make a backup of your work, with a secondary 
backup for any changes you've made. Mistakes can be 
rectified if there’s a good backup in place to revert to for 
those times when something goes wrong. It's much easier 
to start where you left off, rather than starting from the 
beginning again.
RE-INVENTING WHEELS
You can easily spend days trying to fathom out a section 
of code to achieve a given result and it's frustrating and 
often time-wasting. While it’s equally rewarding to solve the 
problem yourself, often the same code is out there on the 
Internet somewhere. Don't try and re-invent the wheel, look 
to see if some else has done it first.
r
SECURE DATA
If you're writing code 
to deal with usernames 
and passwords, or other 
such sensitive data, 
then ensure that the 
data isn't in cleartext. 
Learn how to create 
a function to encrypt 
sensitive data, prior to 
feeding into a routine 
that can transmit or 
store it where someone 
may be able to get to 
view it.
U—____
HELP!
MATHS
Asking for help is something most of us has struggled 
with in the past. Will the people we're asking laugh at us? 
Am I wasting everyone's time? It's a common mistake for 
someone to suffer in silence. However, as long as you ask 
the in the correct manner, obey any forum rules and be 
polite, then your question isn't silly.
stKkoverRow OuKtom cwwom'MM lap uwa W»wn|
If your code makes multiple calculations then you need 
to ensure that the maths behind it is sound. There are 
thousands of instances where programs have offered 
incorrect data based on poor Mathematical coding, which 
can have disastrous effects depending on what the code is 
set to do. In short, double check your code equations.
set terminal xll
complex (x, y)
nmax = 100
set xrange [-0.5:0.51
set yrange [-0.5:0.51
set logscale z
set samples 200
set isosample 200
set pm3d map
set size square
a= #A# 
b=
splot mandel(-a/100,-b/100,complex(x,y),0) notitle
complex (x, y) = x ♦ {1, 0} + y * {0, 1}
mandel (x, y, z, n) ■ (abs (z)> rmax || n>= 1001? n: mandel (x
set output
145

User Manual
3 p°p«
The complete
The essential programming manual 
to improve your Python coding skills
The essential manual to mastering 
your MacBook and macOS Ventura
Coding 
Manual
Master Windows 10 on your PC 
with step-by-step tutorials and guides
^KONPHOTOGRAPHV & CAMERAS
essential guides, rips&mroSs
The essential manual to improve your 
Raspberry Pi coding skills
•Msler Photoshop Llghlmom 
tmprovo your photo editing s
The Complete
Windows 10
The Complete
Outdoor
Photography
Manual
The Complete
Raspberry
The Complete
Python
Coding Manual
Master your Nikon camera 
and improve your photographic
Nikon,
Camera Manual
The Complete
MacBook
User Manual
Readlij
Available on
lete
Manual
880
900
890
ypi/rromt
photogr
920
*■ The Complete
Photoaraf
Photography
Manual3^'
-Master'.professional techniques 
rind Irnnrny/n ir nhntnnrhn'fii/ _
The Complete 
Manual Series
The Complete
w “"prove 
editing skills
* The Complete
WhatsApp
Manual
OVIR
480 Smart step-by-step guides
“jJo* to mastering WhatsApp
The Complete
Mac 
User Manual
Master your Mac and macOS Ventura
’MatlerjJnux and tm[
vs
The Complete
Samsung 
Galaxy
Manual *
Master your Samsung Galaxy 
smartphone and tablet
The Complete
Linux
Coding Manual
The Complete 
Cloud 
Computing 
Manual
Master Cloud storage and services 
for home and business
over
The Complete 
Mac 
Studio 
Manual
Master your Apple Mac Studio & Display
For a full list of titles available visit:
www.pclpublications.com

Want to master your Code?
Then don't miss our NEW Programmin 
magazine on Readly now!
Click our handy link to read now: https://bit.ly/30cL1zx
The Complete Manual Series:
Linux Coding & Programming
18 | ISBN: 978-1-914404-49-8
Published by: Papercut Limited
Digital distribution by: Readly, Zinio & Pocketmags
© 2023 Papercut Limited All rights reserved. No part of this 
publication may be reproduced in any form, stored in a retrieval 
system or integrated into any other publication, database or 
commercial programs without the express written permission of 
the publisher. Under no circumstances should this publication and 
its contents be resold, loaned out or used in any form by way of 
trade without the publisher’s written permission. While we pride 
ourselves on the quality of the information we provide, Papercut 
Limited reserves the right not to be held responsible for any 
mistakes or inaccuracies found within the text of this publication. 
Due to the nature of the tech industry, the publisher cannot 
guarantee that all apps and software will work on every version of
device. It remains the purchaser’s sole responsibility to determine 
the suitability of this book and its content for whatever purpose. 
Any images reproduced on the front and back cover are solely for 
design purposes and are not representative of content.
We advise all potential buyers to check listing prior to purchase 
for confirmation of actual content. All editorial opinion herein is 
that of the reviewer - as an individual - and is not representative of 
the publisher or any of its affiliates. Therefore the publisher holds 
no responsibility in regard to editorial opinion and content. 
This is an independent publication and as such does not 
necessarily reflect the views or opinions of the manufacturers or 
hardware and software, applications or products contained within. 
This publication is not endorsed or associated in any way with 
The Linux Foundation, The Raspberry Pi Foundation, ARM Holding, 
Canonical Ltd, Python, Debian Project, Linux Mint, Microsoft, 
Lenovo, Dell, Hewlett-Packard, Apple and Samsung or any 
associate or affiliate company. All copyrights, trademarks and 
registered trademarks for the respective companies are
acknowledged. Relevant graphic imagery reproduced with 
courtesy of Lenovo, Hewlett- Packard, Dell, Microsoft, Samsung, 
Linux Mint, NASA, and Apple. Additional images contained within 
this publication are reproduced under licence from Shutterstock. 
Prices, international availability, ratings, titles and content are 
subject to change.
All information was correct at time of publication. Some content 
may have been previously published in other volumes or titles.
3
 Papercut Limited
Registered in England & Wales No: 04308513
ADVERTISING - For our latest media packs please contact: 
James Gale - email: jgale@pclpublications.com
INTERNATIONAL LICENSING - Papercut Limited has many great 
publications and all are available for licensing worldwide.
For more information email: jgale@pclpublications.com

Get Your Exclusive 
FREE Gift Worth 
£9.99 Here!
Download 
Your FREE
FREE Software! Great Games! Essenti:
irdware!
TECH 
'shopper 051
Tech Shopper 
Magazine
*fQO amazing 
■ GADGETS 
APPS & GAMES INSIDE!
Head over to your web 
browser and follow these 
simple instructions...
V Chromebook?
F Read our expert guide 
to Google’s notebook! U
Home Security 
Inside & Out! 
Disco,,, how kMp your 
home safe and secure!
1/ Enter the following URL: www.pclpublications.com/exclusives
2/ Sign up/in and from the listings of our exclusive customer 
downloads, highlight the Tech Shopper Magazine option.
3/ Enter your unique download code (Listed below) in the "Enter 
download code" bar.
4/ Click the Download Now! Button and your file will automatically 
download.
5/ Your file is a high resolution PDF file, which is compatible with 
the majority of customer devices/platforms.
Exclusive Download Code: pcl37 862re
NOTE: This is a limited reader offer running from 1st January 2023 to 1st September 2023.
Terms and conditions apply and can be found at www.pclpublications.com

