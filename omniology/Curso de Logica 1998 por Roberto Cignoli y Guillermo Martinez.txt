Curso de L´ogica
1998
Roberto Cignoli y Guillermo Mart´ınez

2

Chapter 1
C´alculo Proposicional
1.1
El lenguaje del c´alculo proposicional
Una proposici´on es un enunciado del que tiene sentido decir que es verdadero
o falso. Es decir, una proposici´on es lo que en gram´atica se llama una oraci´on
declarativa (en contraste con las oraciones interrogativas, exclamativas o im-
perativas).
Una oraci´on debe ser expresada en un cierto lenguaje, oral o escrito, y su
forma depender´a de las leyes gramaticales de ese lenguaje.
Pero en general, las leyes gramaticales de los lenguajes que usamos corri-
entemente no son suﬁcientes para caracterizar completamente a las proposi-
ciones.
Por ejemplo “ayer llovi´o” es una proposici´on que depende del lugar y
fecha en que es enunciada. As´ı podr´ıa ser la proposici´on “el 25 de agosto de
1930 llovi´o en Buenos Aires” o tambi´en la proposici´on “el 3 de junio de 1995
llovi´o en Bah´ıa Blanca”.
Otro ejemplo est´a dado por “esta mesa es marr´on”, que supone que el
que la enuncia esta indicando alg´un objeto no explicitado en el lenguaje.
Al referirnos a proposiciones supondremos que hemos eliminado todas es-
tas ambig¨uedades.
Las proposiciones pueden combinarse por medio de las expresiones l´ogicas
“o”, “y”, “si . . . , entonces . . . ”, y tambi´en podemos negar una proposici´on.
Una propiedad b´asica de estas combinaciones es que la verdad o falsedad de
la proposici´on resultante depende s´olo de la verdad o falsedad de las proposi-
ciones de partida.
3

4
CHAPTER 1. C ´ALCULO PROPOSICIONAL
As´ı, por ejemplo, la proposici´on compuesta “el aire contiene nitr´ogeno y
‘Los Beatles’ visitaron la Argentina en 1963” ser´a verdadera si y solamente
si es verdadera cada una de las proposiciones “el aire contiene nitr´ogeno” y
“ ‘Los Beatles’ visitaron la Argentina en 1963”.
El c´alculo proposicional es un modelo matem´atico de los razonamientos
que se pueden hacer en base a estas formas de combinar proposiciones.
Este modelo matem´atico nos ayuda a comprender mejor las formas b´asicas
del pensamiento racional, y tambi´en nos permite simular esquemas de de-
ducci´on por medio de computadoras.
El primer paso para establecer un c´alculo proposicional es encontrar un
sistema de notaci´on que nos permita expresar simb´olicamente las combina-
ciones de proposiciones por medio de los conectivos l´ogicos “o”, “y”, “si . . . ,
entonces . . . ”, “no”.
Para comprender la importancia de un sistema de notaci´on, basta ob-
servar que los c´alculos aritm´eticos (esto es: suma, resta, multiplicaci´on y
divisi´on de n´umeros naturales) se pueden presentar en la forma simple que
aprendemos en los primeros grados de la escuela primaria gracias al sistema
de numeraci´on decimal, aparentemente inventado en la India entre los siglos
9 y 10 de nuestra era, y difundido por los ´arabes.
La numeraci´on decimal no es m´as que un sistema de notaci´on que nos
permite escribir (y leer) cualquier n´umero natural usando s´olo las cifras
0, 1, 2, . . . , 9.
Las operaciones aritm´eticas se aprenden en la escuela como reglas para
manipular estas listas de s´ımbolos.
Por ejemplo, dadas las listas “5643” y “97”, aplicando las reglas para
sumar obtenemos la lista “5740”.
Con el tiempo se comprendi´o que la caracter´ıstica esencial de este sis-
tema es su car´acter posicional, y que el n´umero 10 puede ser sustituido por
cualquier n´umero b > 1, obteni´endose los sistemas de numeraci´on en base b,
que permiten escribir cualquier n´umero con b s´ımbolos b´asicos.
Por ejemplo, en el sistema binario (b = 2), todo n´umero se puede escribir
como una lista de ceros y unos.
Esta representaci´on de los n´umeros es similar a la que se tiene con los
sistemas de escritura alfab´eticos de lenguajes naturales, como el castellano:
podemos representar las palabras por listas de s´ımbolos, que son las letras
del alfabeto.
Para intentar comprender mejor las analog´ıas y diferencias entre los sis-
temas de numeraci´on y los de escritura de lenguajes naturales, vamos a in-

1.1. EL LENGUAJE DEL C ´ALCULO PROPOSICIONAL
5
troducir los siguientes conceptos.
Deﬁnici´on 1.1.1 Dado un conjunto ﬁnito y no vac´ıo A, indicaremos con A∗
al conjunto de todas las listas ﬁnitas de elementos de A. En particular, la
lista vac´ıa ser´a indicada por □. Llamaremos lenguaje sobre el alfabeto A a
cualquier subconjunto L ⊆A∗. Los elementos de un lenguaje L son llamados
palabras.
Ejemplo 1.1.2 Sea A = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}. Los n´umeros naturales se
representan por el lenguaje L = A \ {□}. Como los ceros a la izquierda no
son signiﬁcativos, cada n´umero se representa por inﬁnitas palabras de L: 5,
05, 005, 0005, . . . representan el mismo n´umero.
Ejemplo 1.1.3 Sea A como en ejemplo anterior y sea M el conjunto de
todas las listas de A\{□} que no comienzan con 0. Entonces L = M ∪{0} es
un lenguaje sobre A, y cada n´umero puede ser escrito de una manera ´unica.
Ejemplo 1.1.4 Sea A el alfabeto castellano (al que le agregamos, como
nuevas letras, las vocales acentuadas). El idioma castellano es un lenguaje
sobre A. Podemos deﬁnirlo como el conjunto de listas de A∗que ﬁguran en
la ´ultima edici´on del diccionario de la Real Academia Espa˜nola de la Lengua.
Sea A un alfabeto. Para s ∈A∗, llamaremos longitud de s, al n´umero de
s´ımbolos de A que ﬁguran en la lista s, contados tantas veces como aparezcan.
As´ı, si A es como en el Ejemplo 1.1.2, la longitud de “000430” es seis.
Los elementos de A ser´an identiﬁcados con los elementos de A∗de longitud
uno. La longitud de s ∈A ser´a abreviada por long(s).
Para todo n´umero natural n, indicaremos con An al subconjunto de A∗
formado por los elementos de longitud n.
Observemos que esta notaci´on es coherente con la usual de producto carte-
siano, pues una lista de n s´ımbolos del alfabeto puede ser identiﬁcada con la
n-upla cuya primera componente es el primer s´ımbolo de la lista, la segunda,
el segundo s´ımbolo, etc.
En particular, A0 = {□} y A = A1. Adem´as, A∗=
S∞
n=0 An.
Dados s y t en A∗, indicaremos con st la lista de elementos de A que se
obtiene escribiendo la lista t a continuaci´on de la lista s.
As´ı, si A es como en el Ejemplo 1.1.4 y s = “casa” y t = “caballo”,
entonces st = “casacaballo”. Observemos que si bien s y t pertenecen al
castellano, la lista st no pertenece a este lenguaje.

6
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Es claro que para todo s, t ∈A∗se tiene que
long(st) = long(s) + long(t).
(1.1)
Una primera diferencia que conviene destacar entre los lenguajes deﬁnidos
en los Ejemplos 1.1.2, 1.1.3 y 1.1.4 es la siguiente: En los dos primeros, basta
inspeccionar una lista para saber si pertenece o no al lenguaje.
En efecto, en el primer caso basta con veriﬁcar que la lista s no es vac´ıa
y que los ´unicos s´ımbolos que ﬁguran en s son cifras entre 0 y 9.
En el
segundo caso, debemos veriﬁcar tambi´en que si long(s) > 1, entonces el
primer s´ımbolo de s no es 0.
En cambio, para saber si una lista de s´ımbolos s pertenece o no en el
idioma castellano debemos recurrir a un diccionario. Por ejemplo, sin recurrir
al Diccionario de la Real Academia no podemos saber si “˜naca” pertenece o
no al idioma castellano, como fue deﬁnido en el Ejemplo 1.1.4.
En resumen, en los dos primeros ejemplos, los lenguajes est´an deﬁnidos
por propiedades intr´ınsecas de las listas, mientras que en el tercero el lenguaje
est´a deﬁnido por un elemento externo, el diccionario.
La condici´on de estar deﬁnidos por propiedades intr´ınsecas de las listas de
s´ımbolos es una caracter´ıstica de los lenguajes artiﬁciales, como el lenguaje
matem´atico y los lenguajes de programaci´on utilizados en computaci´on, en
contraste con los lenguajes naturales, como el castellano, el ingl´es, etc.
No siempre es posible dar una descripci´on tan directa de las listas de
s´ımbolos que forman un lenguaje como fue hecho en los casos de los Ejemplos
1.1.2 y 1.1.3. El m´etodo que seguiremos ahora para deﬁnir el lenguaje del
c´alculo proposicional sirve de modelo para la deﬁnici´on de muchos otros
lenguajes.
Para desarrollar el c´alculo proposicional necesitaremos s´ımbolos para de-
notar proposiciones, que jugar´an el mismo papel que las expresiones literales
en algebra, s´ımbolos para los conectivos l´ogicos “o”, “y”, “si . . . , entonces
. . . ” y negaci´on, con un rol similar a los s´ımbolos de operaciones algebraicas
+,-,. . . , y, ﬁnalmente, los par´entesis, con el mismo empleo que en ´algebra.
Teniendo en cuenta esto, deﬁnimos como alfabeto del c´alculo proposi-
cional al conjunto A = {p, |, ¬, ∨, ∧, →, (, )}.
Los s´ımbolos ¬, ∨, ∧, →son llamados conectivos proposicionales.
Llamaremos variables proposicionales a las listas de A∗formadas por
el s´ımbolo p seguido de un n´umero ﬁnito de barras |. Para simpliﬁcar la
escritura, usaremos pn como abreviatura de p seguido de n barras. As´ı p0 = p,
p1 = p|, p2 = p||, etc.

1.1. EL LENGUAJE DEL C ´ALCULO PROPOSICIONAL
7
El subconjunto de A∗formado por las variables proposicionales ser´a de-
notado por Var.
Vamos a deﬁnir ahora el lenguaje Form ⊆A∗. Sus elementos son lla-
mados f´ormulas proposicionales o, simplemente, f´ormulas, y constituyen las
palabras del lenguaje del c´alculo proposicional.
Deﬁnici´on 1.1.5 Una lista de s´ımbolos de A es una f´ormula si y solo si se
la puede obtener aplicando un n´umero ﬁnito de veces las siguientes reglas:
FP1) Las variables proposicionales son f´ormulas.
FP2) Si P ∈A∗es una f´ormula, entonces ¬P es una f´ormula.
FP3) Si P, Q ∈A∗son f´ormulas, entonces (P ∨Q), (P ∧Q) y (P →Q) son
f´ormulas.
¿ Qu´e signiﬁca que una lista de s´ımbolos se obtenga aplicando un n´umero
ﬁnito de veces las reglas FP1), FP2) y FP3)? La respuesta precisa es la
siguiente:
Deﬁnici´on 1.1.6 Una cadena de formaci´on de longitud n es una sucesi´on
ﬁnita X1, . . . , Xn de elementos de A∗que satisface las condiciones siguientes:
(CF) Para cada i, con 1 ≤i ≤n, se tiene que o bien Xi es una variable
proposicional, o bien existe un j tal que 1 ≤j ≤i −1 y Xi = ¬Xj, o
bien existen j y k, ambos entre 1 e i −1, tales que Xi = (Xj ∨Xk),
Xi = (Xj ∧Xk) o Xi = (Xj →Xk).
Cada uno de los Xi, 1 ≤i ≤n, ser´a llamado un eslab´on de la cadena de
formaci´on.
La Deﬁnici´on 1.1.5 puede ahora traducirse en la siguiente forma:
Una lista P ∈A∗es una f´ormula si y s´olo si existe una cadena de for-
maci´on X1, . . . , Xn tal que P = Xn.
Observaci´on 1.1.7 Observemos que si X1, . . . , Xn es una cadena de for-
maci´on, entonces para cada i ≤n, X1, . . . , Xi es una cadena de formaci´on de
longitud i. Por lo tanto todos los eslabones de una cadena de formaci´on son
f´ormulas.

8
CHAPTER 1. C ´ALCULO PROPOSICIONAL
A t´ıtulo de ejemplo consideremos la expresi´on:
P = (((p0 ∨p1) →¬p3) ∧p0).
La sucesi´on
X1 = p0,
X2 = p1,
X3 = p3,
X4 = ¬X3,
X5 = (X1 ∨X2),
X6 = (X5 →X4), y
X7 = (X6 ∧X1)
es una cadena de formaci´on de P. Esto signiﬁca que P es una f´ormula.
Notemos todav´ıa que la cadena de formaci´on de una f´ormula no es ´unica.
Por ejemplo, la sucesi´on:
Y1 = p3,
Y2 = ¬Y1,
Y3 = p1,
Y4 = p0,
Y5 = (Y4 ∨Y3),
Y6 = (Y5 →Y2) y
Y7 = (Y6 ∧Y4).
es otra cadena de formaci´on de la f´ormula P.
Tambi´en es una cadena de formaci´on de P la sucesi´on:
Z1 = p0,
Z2 = p1,
Z3 = p2,
Z4 = p3,

1.1. EL LENGUAJE DEL C ´ALCULO PROPOSICIONAL
9
Z5 = ¬Z0,
Z6 = ¬Z4,
Z7 = (Z1 ∨Z2),
Z8 = (Z1 →Z3),
Z9 = (Z8 →Z6) y
Z10 = (Z9 ∧Z1).
Esto muestra que una cadena de formaci´on de una f´ormula puede tener
eslabones superﬂuos, como Z3, Z5 y Z7.
Teniendo en cuenta la posibilidad de estos eslabones superﬂuos, vemos
que cada f´ormula tiene cadenas de formaci´on de longitud arbitrariamente
grande.
Conviene insistir en que por el momento estamos considerando a las
f´ormulas como meras listas de s´ımbolos. Por lo tanto cuando decimos que
P = Q queremos signiﬁcar que en P y en Q aparecen exactamente los mismos
s´ımbolos y en el mismo orden.
Por ejemplo, las f´ormulas (p0 ∨p1) y (p1 ∨p0) no son iguales, pues tienen
los mismos s´ımbolos pero en diferente orden.
Observemos tambi´en que hay una cantidad inﬁnita de f´ormulas.
Por
ejemplo, con la variable proposicional p0 y el conectivo ¬ ya se pueden generar
inﬁnitas f´ormulas, de longitud creciente:
p0, ¬p0, ¬¬p0, ¬¬¬p0, . . .
Nuestro pr´oximo objetivo es describir un m´etodo inductivo que nos per-
mitir´a asegurar que ciertas propiedades las tienen todas las f´ormulas. Comen-
zaremos por la siguiente
Deﬁnici´on 1.1.8 Un subconjunto S ⊆A∗se dice cerrado por los conectivos
si satisface las siguientes condiciones:
(C1) Si la lista X ∈S, entonces tambi´en la lista ¬X ∈S,
(C2) Si las listas X e Y pertenecen a S, entonces tambi´en las listas (X ∨Y ),
(X ∧Y ) y (X →Y ) pertenecen a S.
La importancia de los conjuntos cerrados por los conectivos estriba en el
siguiente teorema:

10
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Teorema 1.1.9 Sea S un subconjunto de A∗cerrado por los conectivos. Si
S contiene a todas las variables proposicionales, entonces S contiene a todas
las f´ormulas.
Demostraci´on: Sea S un subconjunto de A∗cerrado por los conectivos y
que contiene a todas las variables proposicionales. Queremos ver que para
toda f´ormula P, se tiene que P ∈S. Para ello razonaremos por inducci´on
en la longitud de las cadenas de formaci´on de P. Supongamos primero que
P tiene una cadena de formaci´on de longitud 1. Esto s´olo es posible si P es
una variable proposicional, esto es P = pk para alg´un n´umero natural k, y
en este caso P ∈S por hip´otesis.
Sea n > 1. Como hip´otesis inductiva supongamos que: para toda f´ormula
Q que admita una cadena de formaci´on de longitud < n, se tiene que Q ∈S.
Supongamos que P admite una cadena de formaci´on de longitud n, diga-
mos X1, . . . , Xn, con Xn = P. Si Xn es una variable proposicional, entonces
ya sabemos que P ∈S. Si no lo es, se pueden presentar los siguientes casos:
(1) Existe i tal que 1 ≤i ≤n y P = ¬Xi ´o
(2) Existen i, j entre 1 y n tales que P = (Xi ∨Xj), P = (Xi ∧Xj) ´o
P = (Xi →Xj).
En el caso (1), X1, . . . , Xi es una cadena de formaci´on de la f´ormula Xi
de longitud i < n.
Luego, por la hip´otesis inductiva, Xi ∈S, y por la propiedad (C1), P ∈S.
En el caso (2), X1, . . . , Xi y X1, . . . , Xj son cadenas de formaci´on de las
f´ormulas Xi y Xj respectivamente, ambas de longitud < n. Por la hip´otesis
inductiva Xi ∈S y Xj ∈S, y por la propiedad (C2) resulta que P ∈S.
Por el principio de inducci´on resulta entonces que para todo n´umero natu-
ral n, si la f´ormula P tiene una cadena de formaci´on de longitud n, entonces
P ∈S.
Como toda f´ormula tiene una cadena de formaci´on de longitud ﬁnita,
resulta que Form ⊆S, c.q.d.
El teorema anterior nos da el m´etodo que mencionamos antes de la
Deﬁnici´on 1.1.8 para probar que las f´ormulas tienen una determinada propiedad:
basta veriﬁcar que el subconjunto de A∗formado por las listas de s´ımbolos
que satisfacen esa propiedad es cerrado por los conectivos y contiene a todas
las variables proposicionales.

1.1. EL LENGUAJE DEL C ´ALCULO PROPOSICIONAL
11
A continuaci´on veremos una primera aplicaci´on de este m´etodo, que nos
permitir´a concluir que cada f´ormula puede ser le´ıda de una ´unica manera.
Deﬁnici´on 1.1.10 Sea X ∈A∗. Llamaremos peso de X, y lo denotare-
mos por peso(X), al n´umero entero que se obtiene restando el n´umero de
par´entesis izquierdos “(” del de par´entesis derechos “)” que ﬁguran en la
lista X.
Observemos que si en la lista X no ﬁguran ni par´entesis izquierdos ni par´entesis
derechos, entonces peso(X) = 0. En particular, tenemos que:
Para toda variable proposicional pn, peso(pn) = 0
(1.2)
Tambi´en resulta inmediatamente de la deﬁnici´on anterior, que cuales-
quiera que sean X e Y pertenecientes a A∗:
peso(¬X) = peso(X)
(1.3)
y si ⋆denota uno cualquiera de los conectivos ∨, ∧´o →, entonces
peso((X ⋆Y )) = peso(X) + peso(Y )
(1.4)
Lema 1.1.11 Para toda f´ormula P valen las siguientes propiedades:
(i) El n´umero de par´entesis “(” que ﬁguran en P es igual al n´umero de
par´entesis “)”. Esto es, peso(P) = 0.
(ii) A la izquierda de cualquiera de los conectivos ∨,∧´o →que ﬁguren en P,
hay un n´umero estrictamente mayor de par´entesis “(” que de par´entesis
“)”. Esto es, si P = X⋆Y , donde X e Y pertenecen a A∗y ⋆representa
uno de los conectivos ∨,∧´o →, entonces peso(X) > 0.
Demostraci´on: Llamemos S al conjunto de todas las listas de A∗de peso 0:
S = {X ∈A∗| peso(X) = 0}
Del enunciado (1.2) resulta que todas las variables proposicionales pertenecen
a S, y de (1.3) y (1.4) se deduce que S es cerrado por los conectivos. Luego
por el Teorema 1.1.9, debe ser Form ⊆S, esto es, todas las f´ormulas tienen
peso cero, lo que prueba el enunciado (i).

12
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Pasemos ahora a probar el enunciado (ii). Llamemos T al conjunto de
todas las f´ormulas tales que a la izquierda de cualquiera de los s´ımbolos ∨,∧´o
→que ﬁguren en X hay un n´umero mayor de par´entesis “(” que de parentesis
“)”.
Esto es, una f´ormula P pertenece al conjunto T si y s´olo si P = X ⋆Y ,
con X, Y ∈A∗, implica que peso(X) > 0.
Como en las variables proposicionales s´olo ﬁguran los s´ımbolos p y |, ´estas
pertenecen trivialmente al conjunto T.
Para probar que T es cerrado por los conectivos, supongamos que P ∈T
y que ¬P = X ⋆Y . Esta ´ultima condici´on implica que existe Z ∈A∗tal que
X = ¬Z, y por lo tanto que P = Z ⋆Y . Como P ∈T, debe ser peso(Z) > 0,
y por (1.3) se tiene que tambi´en peso(X) > 0. Luego ¬P ∈S. Por lo tanto
T satisface la condici´on (C1) de la Deﬁnici´on 1.1.8.
Para probar que tambi´en satisface (C2), supongamos que P y Q pertenez-
can a T y sea ⋆uno de los s´ımbolos ∨,∧´o →que ﬁguran en la lista (P ∨Q).
Si ⋆ﬁgura a la izquierda de ∨, entonces deben existir X, Y en A∗tales que
P = X ⋆Y , y (P ∨Q) = (X ⋆Y ∨Q). Como P ∈T, debe ser peso(X) > 0,
y como peso((X) = 1 + peso(X), resulta que la expresi´on a la izquierda de ⋆
en (P ∨Q) tiene peso mayor que cero.
Si ⋆coincide con ∨, entonces a la izquierda de ⋆ﬁgura (P, y como por la
parte (i), peso(P) = 0, resulta que peso((P) = 1.
Finalmente, supongamos que ⋆ﬁgure a la derecha de ∨. Entonces existen
X, Y en A∗tales que Q = X ⋆Y , y (P ∨Q) = (P ∨X ⋆Y ). Como Q ∈T,
debe ser peso(X) > 0, y se tiene que peso((P ∨X) = 1 + peso(X) > 2.
Acabamos de ver as´ı que la expresi´on a la izquierda de cualquiera de los
s´ımbolos ∨,∧´o →que ﬁguran en la lista (P ∨Q), tiene siempre peso mayor
que cero, lo que signiﬁca que (P ∨Q) ∈T.
En forma enteramente an´aloga se prueba que si P y Q pertenecen a T,
entonces tambi´en (P ∧Q) y (P →Q) pertenecen a al conjunto T. Luego T
es cerrado por los conectivos.
Como T es un subconjunto de A∗que contiene a las variables proposicio-
nales y es cerrado por los conectivos, debe ser Form ⊆T, es decir todas las
f´ormulas satisfacen las condiciones que deﬁnen al conjunto T, c.q.d.
Notemos que como el conjunto T en la demostraci´on anterior fue deﬁnido
como un subconjunto de Form, en realidad hemos probado que Form = T.
Teorema 1.1.12 (Unicidad de la lectura de una f´ormula.) Sean P, Q,
R y S f´ormulas, y supongamos que ⋆y ◦representan algunos de los conec-

1.1. EL LENGUAJE DEL C ´ALCULO PROPOSICIONAL
13
tivos ∨, ∧´o →. Si (P ⋆Q) = (R ◦S), entonces debe ser P = R, Q = S y
⋆= ◦.
Demostraci´on: Supongamos, por el absurdo, que (P ⋆Q) = (R ◦S) y que
P ̸= R. En estas condiciones o bien existe X ∈A∗tal que (R◦S) = (P⋆X◦S)
o bien existe Y ∈A∗tal que (P ⋆Q) = (R ◦Y ⋆Q).
En el primer caso tendr´ıamos que R = P ⋆X, y en el segundo, que
P = R ◦Y . Pero por (ii) del lema anterior esto implicar´ıa que peso(P) > 0
o peso(R) > 0, y ambas desigualdades son imposibles por la parte (i) del
mismo lema.
Luego hemos probado que la igualdad (P ⋆Q) = (R ◦S) implica que
P = R.
Pero de las igualdades (P ⋆Q) = (R◦S) y P = R resulta inmediatamente
que debe ser ⋆= ◦y Q = S, lo que concluye la demostraci´on del teorema.
Deﬁnici´on 1.1.13 Llamaremos grado de complejidad de una f´ormula P, y
lo denotaremos por comp(P), al n´umero de conectivos que ﬁguran en P,
contados tantas veces como aparezcan.
Por ejemplo, comp(¬¬¬ p0) = 3, comp((p5 ∨p17)) = 1.
Corolario 1.1.14 Para toda f´ormula P se tiene que:
(i) comp(P) = 0 si y s´olo si P es una variable proposicional.
(ii) Si comp(P) > 0, entonces se cumple uno, y s´olo uno, de los casos
siguientes:
(1) Existe una ´unica f´ormula Q tal que P = ¬Q.
(2) Existe un ´unico par de f´ormulas Q, R tal que P = (Q ∨R).
(3) Existe un ´unico par de f´ormulas Q, R tal que P = (Q ∧R).
(4) Existe un ´unico par de f´ormulas Q, R tal que P = (Q →R).
Demostraci´on: La parte (i) del enunciado es obvia.
La parte (ii) es una
consecuencia inmediata de la deﬁnici´on de f´ormula y del Teorema 1.1.12.
Como una aplicaci´on de lo anterior, deﬁniremos inductivamente la noci´on
de subf´ormula de una f´ormula.
Sea P una f´ormula proposicional. Si comp(P) = 0 (esto es, si P es una
variable proposicional), entonces P es la ´unica subf´ormula de P. Supongamos

14
CHAPTER 1. C ´ALCULO PROPOSICIONAL
ahora que comp(P) = n > 0 y que hemos deﬁnido subf´ormulas para toda
f´ormula de complejidad menor que n. Por el Corolario 1.1.14 sabemos que o
bien existe una ´unica f´ormula Q tal que P = ¬Q o bien existen un ´unico par
de f´ormulas Q, R y un ´unico conectivo ∗∈{∨, ∧, →} tales que P = (Q ∗R).
En el primer caso, comp(Q) = n−1, luego por la hip´otesis inductiva tenemos
deﬁnidas las subf´ormulas de Q. Deﬁnimos las subf´ormulas de P como P y
todas las subf´ormulas de Q.
En el otro caso, se tiene que comp(Q) < n y comp(R) < n. Luego por la
hip´otesis inductiva est´an deﬁnidas las subf´ormulas de Q y de R. Deﬁnimos
las subf´ormulas de P como P y todas las subf´ormulas de Q y de R.
Esto completa la deﬁnici´on de subf´ormula para cualquier f´ormula proposi-
cional P.
Ejemplo 1.1.15 Si P = ((p0 ∨¬p1) ∧(p3 →p2)), utilizando la deﬁnici´on
inductiva obtenemos que las subf´ormulas de P son P, (p0 ∨¬p1), (p3 →p1),
p0, ¬p1, p3, p2 y p1.
Con la noci´on de complejidad hemos asociado un n´umero natural con
cada f´ormula proposicional, y esto nos permiti´o hacer razonamientos induc-
tivos sobre las f´ormulas. Una propiedad importante que se utiliza en estos
razonamientos inductivos es que las f´ormulas de complejidad 0 son exacta-
mente las variables proposicionales.
La complejidad no es el ´unico n´umero que se puede asociar con una
f´ormula. Por ejemplo, tambi´en tenemos la longitud. Pero la longitud no
es adecuada para razonamientos inductivos, pues las variables proposiciona-
les pueden tener longitud arbitrariamente grande. En efecto, recordemos que
pn abrevia al s´ımbolo p seguido de n barras |, por lo que long(pn) = n + 1.
Para evitar este inconveniente, podemos modiﬁcar la deﬁnici´on de longi-
tud para f´ormulas, asign´andole a las variables proposicionales longitud 1.
Estas consideraciones nos conducen a deﬁnir la longitud modiﬁcada de
una f´ormula P, que denotamos long∗(P) como el grado de complejidad de
P m´as el n´umero de variables que ﬁguran en P, contadas tantas veces como
aparezcan repetidas.
En otras palabras, la longitud modiﬁcada es la funci´on
long∗: Form →N \ {0}
caracterizada por las siguientes propiedades:

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
15
(GCE1) Para toda variable proposicional pn, long∗(pn) = 1,
(GCE2) Para toda f´ormula P, long∗(¬P) = 1 + long∗(P),
(GCE3) Para todo par de f´ormulas P, Q, long∗(P ∨Q) =
long∗(P ∧Q) = long∗(P →Q) = 1 + long∗(P) + long∗(Q).
Dejamos al cuidado del lector veriﬁcar que tanto en la deﬁnici´on de
subf´ormula como en demostraciones que haremos en lo sucesivo, se puede
reemplazar la inducci´on en comp(P) por inducci´on en long∗(P).
1.2
Sem´antica del c´alculo proposicional.
Hasta el momento hemos considerado las f´ormulas como meras listas de
s´ımbolos, construidas a partir de un alfabeto mediante ciertas reglas bien
determinadas. Este punto de vista es llamado sint´actico.
Ahora vamos a interpretar las f´ormulas como proposiciones, esto es, como
enunciados a los que se le pueden asignar uno de los dos valores de verdad
“verdadero” o “falso”. Este nuevo punto de vista es llamado sem´antico.
La siguiente analog´ıa puede ayudar a comprender la diferencia entre los
dos puntos de vista: en la escuela primaria, aprendemos las reglas para
efectuar las operaciones aritm´eticas en forma mec´anica, considerando los
n´umeros escritos en el sistema decimal. Esto corresponde al punto de vista
sint´actico.
Para resolver problemas, los n´umeros son interpretados como
valores de mercader´ıas, longitudes, vol´umenes, etc. Es decir, a las listas de
cifras de la notaci´on decimal les atribu´ımos un signiﬁcado concreto, lo mismo
que a los s´ımbolos +, −, ×, ÷, lo que nos permite aplicar las reglas aritm´eticas
para obtener la soluci´on del problema. Este es el punto de vista sem´antico.
Siguiendo la tradici´on, vamos a representar “verdadero” por el 1, y “falso”
por 0.
Comenzaremos por interpretar los conectivos: ∨ser´a interpretado como
“o”, ∧como “y”, →como “si . . . , entonces . . . ”, y ¬ como “negaci´on”.
De acuerdo con esta interpretaci´on, el comportamiento de los conectivos
binarios con respecto a los valores de verdad se puede resumir en las siguientes
tablas:
y el comportamiento del conectivo unario de negaci´on est´a dado por:
¬0 = 1 y ¬1 = 0.
(1.5)

16
CHAPTER 1. C ´ALCULO PROPOSICIONAL
∨
0
1
0
0
1
1
1
1
∧
0
1
0
0
0
1
0
1
→
0
1
0
1
1
1
0
1
Por ejemplo, de la primera tabla resulta que:
falso o falso es falso
y
falso o verdadero es verdadero.
y de la tercera tabla que:
falso implica verdadero es verdadero.
Este comportamiento de los conectivos proposicionales con respecto a los
valores de verdad es el habitual en matem´atica, y se remonta por lo menos al
siglo IV A.C., cuando fue especiﬁcada por los ﬁl´osofos griegos de la escuela
estoica, en especial Crisipo.
Vamos a indicar con B al conjunto {0, 1}. Si pensamos a 0 y a 1 como
n´umeros, con el orden y las operaciones ordinarias, las tablas anteriores
pueden interpretarse del siguiente modo, donde x e y representan elemen-
tos de B:
¬x = 1 −x,
(1.6)
x ∨y = max(x, y),
(1.7)
x ∧y = min(x, y) = xy,
(1.8)
x →y = max(1 −x, y).
(1.9)
Adem´as se tiene que
x ∨¬x = 1 y x ∧¬x = 0.
(1.10)
El lector familiarizado con las ´algebras de Boole, reconocer´a que B con
las operaciones indicadas es el ´algebra de Boole con dos elementos.
Interpretaremos ahora las f´ormulas a trav´es del concepto de valuaci´on,
que pasamos a deﬁnir.
Deﬁnici´on 1.2.1 Una valuaci´on booleana, o, simplemente, una valuaci´on,
es cualquier funci´on v: Form →B que satisfaga las siguientes condiciones,
donde P y Q denotan f´ormulas arbitrarias:

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
17
(V1) v(¬P) = 1 −v(P),
(V2) v(P ∨Q) = max(v(P), v(Q)),
(V3) v(P ∧Q) = min(v(P), v(Q)), y
(V4) v(P →Q) = max(1 −v(P), v(Q)).
N´otese que las valuaciones le asignan a cada f´ormula un valor de ver-
dad, pero no de cualquier modo, sino respetando el signiﬁcado de los conec-
tivos proposicionales.
De aqu´ı resulta – y es un buen ejercicio detenerse
un instante a pensarlo – que ﬁjada una valuaci´on las listas de s´ımbolos que
llamamos f´ormulas pueden interpretarse como un conjunto de enunciados,
algunos verdaderos, algunos falsos, sujetos a las operaciones l´ogicas usuales.
Una pregunta importante, directamente ligada con la expresividad del
lenguaje formal que hemos deﬁnido, es la de si habr´a “pocas” o “muchas”
valuaciones.
Si nuestro lenguaje pretende representar combinaciones de conjuntos arbi-
trarios de proposiciones, ser´ıa conveniente que hubiera “muchas” valuaciones:
deber´ıa haber, por lo menos, una para cada asignaci´on posible de valores de
verdad a las variables proposicionales.
Afortunadamente, esto es lo que ocurre, como lo muestra el siguiente
teorema.
Teorema 1.2.2 Sea f una funci´on cualquiera del conjunto Var de variables
proposicionales en B. Entonces existe una ´unica valuaci´on vf: Form →B
que extiende a f, es decir, tal que vf(pn) = f(pn) para toda variable proposi-
cional pn.
Demostraci´on: Vamos a deﬁnir la valuaci´on vf por inducci´on en el grado de
complejidad de las f´ormulas (ver la Deﬁnici´on 1.1.13).
Si P es una f´ormula tal que comp(P) = 0, entonces por (i) del Coro-
lario 1.1.14 existe un n tal que P = pn. Deﬁnimos vf(P) = vf(pn) = f(pn).
Sea ahora n ≥1.
Como hip´otesis inductiva, supongamos que hemos
deﬁnido vf para toda f´ormula de grado de complejidad estrictamente menor
que n.
Si P es una f´ormula tal que comp(P) = n, entonces por (ii) del Coro-
lario 1.1.14 se puede presentar uno, y s´olo uno de los casos siguientes:
(1) Existe una ´unica f´ormula Q tal que P = ¬Q.

18
CHAPTER 1. C ´ALCULO PROPOSICIONAL
(2) Existe un ´unico par de f´ormulas Q, R tal que P = (Q ∨R).
(3) Existe un ´unico par de f´ormulas Q, R tal que P = (Q ∧R).
(4) Existe un ´unico par de f´ormulas Q, R tal que P = (Q →R).
En el caso (1), comp(Q) = n −1 < n, y por la hip´otesis inductiva, est´a
deﬁnida vf(Q). Deﬁnimos vf(P) = 1 −vf(Q).
En los casos (2), (3) y (4) se tiene que comp(Q) < comp(P) y comp(R) <
comp(P), luego por la hip´otesis inductiva est´an un´ıvocamente deﬁnidos los
valores vf(Q) y vf(R). En el caso (2), deﬁnimos vf(P) = max(vf(Q), vf(R)),
en el caso (3), vf(P) = min(vf(Q), vf(R)) y en el caso (4), vf(P) = max(1 −
vf(Q), vf(R)).
De esta forma deﬁnimos un´ıvocamente el valor vf(P) para toda f´ormula
de grado de complejidad n.
Obtuvimos as´ı una funci´on vf: Form →B, y de la deﬁnici´on resulta ob-
viamente que esta funci´on vf es una valuaci´on y que vf(pn) = f(pn) para
toda variable proposicional pn.
Para terminar la demostraci´on s´olo nos queda probar que la vf que
acabamos de deﬁnir es la ´unica valuaci´on que extiende a la funci´on f.
Supongamos que hubiese otra, digamos w, y consideremos el conjunto
I = {P ∈Form | vf(P) = w(P)}.
Como w tambi´en extiende a f, I contiene a las variables proposicionales,
y como vf y w son ambas valuaciones, es f´acil ver que I es cerrado por los
conectivos. Luego por el Teorema 1.1.9 resulta que Form ⊆I, es decir,
vf(P) = w(P) para toda f´ormula P, c.q.d.
Observaci´on 1.2.3 La construcci´on anterior nos permite obtener todas las
posibles valuaciones. En efecto, si v: Form →B es una valuaci´on cualquiera
y llamamos f a la restricci´on de v a Var (es decir, f: Var →B est´a deﬁnida
por f(pn) = v(pn) para todo n), resulta de la unicidad que v = vf.
El resultado siguiente nos ser´a ´util m´as adelante.
Corolario 1.2.4 Fijemos n variables proposicionales distintas, que deno-
taremos por x1, . . . , xn. Para cada n-upla ⃗a = (a1, . . . , an) ∈Bn, existe una
valuaci´on v⃗a tal que v⃗a(x1) = a1, v⃗a(x2) = a2, . . . , v⃗a(xn) = an.

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
19
Demostraci´on: Consideremos una funci´on f: Var →B tal que f(xi) = ai
para i = 1, . . . , n. Por ejemplo, podemos deﬁnir f del modo siguiente:
f(pk) =
(
ai
si
pk = xi
0
si
pk ̸∈{x1, . . . , xn}
La valuaci´on vf del Teorema 1.2.2 satisface que vf(xi) = f(xi) = ai, i =
1, . . . , n, luego podemos tomar v⃗a = vf, c.q.d.
Convenci´on: En lo sucesivo, y para simpliﬁcar la escritura, en general omi-
tiremos los par´entesis exteriores al escribir f´ormulas. Adem´as, al escribir una
disyunci´on o una conjunci´on de varias f´ormulas, eliminaremos los par´entesis,
suponiendo que estamos asociando a la izquierda.
En otras palabras, las
f´ormulas
(. . . (P1 ∨P2) ∨. . .) ∨Pr)
y
(. . . (P1 ∧P2) ∧. . .) ∧Pr),
ser´an abreviadas por
P1 ∨P2 ∨. . . ∨Pr
y
P1 ∧P2 ∧. . . ∧Pr,
respectivamente.
Por ejemplo, ((P1 ∨P2) ∨P3) ser´a abreviada por P1 ∨P2 ∨P3.
La noci´on de valuaci´on nos permite diferenciar a las f´ormulas en las si-
guientes tres clases:
Deﬁnici´on 1.2.5 Diremos que una f´ormula P del c´alculo proposicional es
una tautolog´ıa si v(P) = 1 para toda valuaci´on v. Diremos que P es una
falsedad (o una contradicci´on) si v(P) = 0 para toda valuaci´on v. Y diremos
que P es una contingencia si P no es ni una tautolog´ıa ni una contradicci´on.
Las tautolog´ıas son aquellas f´ormulas que son verdaderas por la conﬁgu-
raci´on de sus s´ımbolos, independientemente de la valuaci´on que se considere;
se corresponden con las “verdades l´ogicas”.
Por ejemplo: p0 ∨¬p0.

20
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Otro ejemplo, no tan obvio, es el siguiente. Sea P una f´ormula de la
forma
((x ∧y) →z) →((x →z) ∨(y →z)),
donde x, y, z denotan variables proposicionales cualesquiera. Si P no fuese
una tautolog´ıa deber´ıa existir una valuaci´on v tal que v(P) = 0. Como P
es de la forma Q →R, con Q = (x ∧y) →z y R = (x →z) ∨(y →z), de
acuerdo con la condici´on (V4) de la deﬁnici´on de valuaci´on, deber´ıa ser
(a) v((x ∧y) →z) = 1 y
(b) v((x →z) ∨(y →z)) = 0.
De la igualdad (b) obtenemos, por la propiedad (V2), que v(x →z) = 0 y
v(y →z) = 0 y de aqu´ı, usando la propiedad (V4), conclu´ımos que v(x) =
v(y) = 1, y que v(z) = 0. Pero entonces v((x∧y) →z) = max(1−(1∧1), 0) =
0, lo que contradice (a).
Del mismo modo, las falsedades son las f´ormulas que son falsas por su
conﬁguraci´on; por ejemplo: p0 ∧¬p0.
Es f´acil ver que una f´ormula P es una falsedad si y s´olo si su negaci´on
¬P es una tautolog´ıa.
En contraposici´on con estos dos casos, el valor de verdad de las contin-
gencias depende de la valuaci´on que se considere. Por ejemplo, si
P = (x →¬y) →(y ∧x),
para una valuaci´on v que considere verdaderas a x y a y, P resultar´a ver-
dadera, y para una valuaci´on v que considere falsa a x y verdadera a y, P
resultar´a falsa.
Las contingencias se corresponden con los enunciados que realmente in-
teresan en un contexto dado, esto es, aquellos cuyo valor de verdad no est´a
determinado trivialmente.
En los ejemplos anteriores, para calcular v(P) usamos las propiedades
(V1)–(V4) para poder aplicar la valuaci´on v directamente a las variables
proposicionales que ﬁguran en P, obteniendo as´ı elementos B, y considerar los
s´ımbolos de los conectivos como representando las operaciones deﬁnidas por
las ecuaciones (1.6), (2.8), (2.7) y (1.9). Formalizaremos este procedimiento
en el pr´oximo teorema.
Antes conviene introducir la siguiente notaci´on: Para toda f´ormula P,
var(P) denotar´a el conjunto de las variables proposicionales que ﬁguran en
P.

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
21
Teorema 1.2.6 Supongamos que x1, . . . , xn representan variables proposi-
cionales distintas y sea P una f´ormula tal que var(P) ⊆{x1, . . . , xn}. Para
toda valuaci´on v, el siguiente procedimiento nos permite calcular el valor
v(P), conociendo los valores v(x1), . . . , v(xn):
• Sustituir en la expresi´on de P cada una de las variables xi por v(xi), y
evaluar la expresi´on as´ı obtenida en B, utilizando las tablas que inter-
pretan los conectivos binarios y las relaciones (1.5).
El resultado obtenido es v(P).
Demostraci´on: Por inducci´on en el grado de complejidad de P. Si comp(P) =
0, entonces P debe ser una variable proposicional, esto es P = xi para alg´un
i entre 1 y n, y v(P) = v(xi) ∈B.
Sea comp(P) = n > 0. Como hip´otesis inductiva, supondremos que el
procedimiento indicado nos da el valor v(S) para toda f´ormula S tal que
var(S) ⊆{x1, . . . , xn} y comp(S) < n. Por el Corolario 1.1.14 sabemos que
se puede presentar uno (y s´olo uno) de los casos siguientes:
(1) Existe una ´unica f´ormula Q tal que P = ¬Q.
(2) Existe un ´unico par de f´ormulas Q, R tal que P = (Q ∨R).
(3) Existe un ´unico par de f´ormulas Q, R tal que P = (Q ∧R).
(4) Existe un ´unico par de f´ormulas Q, R tal que P = (Q →R).
Observemos que en todos los casos se tiene que comp(Q) < comp(P) y
comp(R) < comp(P). Adem´as, en el caso (1), var(Q) = var(P), y en los
casos (2), (3) y (4), var(Q) ∪var(R) = var(P). Luego en todos los casos se
tiene que var(Q) ⊆{x1, . . . , xn} y var(R) ⊆{x1, . . . , xn}.
Sustituir cada una de las variables xi que ﬁguren en P por el valor v(xi)
signiﬁca hacer estas sustituciones en Q y en R. Luego por la hip´otesis induc-
tiva, al efectuar estas sustituciones obtenemos los valores v(Q) y v(R).
Para completar la demostraci´on, basta observar que de las propiedades
(V1)–(V4) de las valuaciones resulta que v(P) se obtiene de los valores v(Q)
y v(R) considerando los conectivos como las respectivas operaciones en B,
c.q.d.
El siguiente resultado es una consecuencia inmediata del teorema anterior:

22
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Corolario 1.2.7 Sea P una f´ormula tal que var(P) ⊆{x1, . . . , xn}. Si v
y w son dos valuaciones tales que v(xi) = w(xi) para 1 ≤i ≤n, entonces
v(P) = w(P).
Resulta de este corolario que dos valuaciones pueden asignar diferentes
valores de verdad a una f´ormula P solamente si asignan diferentes valores
de verdad a alguna de las variables proposicionales que intervienen en la
escritura de P.
Un t´opico importante del c´alculo proposicional es el de encontrar m´etodos
que permitan determinar, de una manera sistem´atica y en una cantidad ﬁnita
de pasos (de modo que puedan implementarse en una computadora) si una
f´ormula dada es o no es una tautolog´ıa. La importancia de este problema va
mucho mas all´a de la L´ogica, como se ver´a m´as adelante.
En principio, el problema de determinar si una f´ormula dada es o no es
una tautolog´ıa involucra a todas las valuaciones, y ´estas forman un conjunto
inﬁnito.
Veremos, sin embargo, que se trata de un problema esencialmente ﬁnito:
para cada f´ormula P, basta estudiar s´olo una cantidad ﬁnita, bien determi-
nada, de posibilidades.
Sea P una f´ormula y supongamos que sus variables proposicionales son
x1, . . . , xn, esto es, var(P) = {x1, . . . , xn}. Por el Corolario 1.2.4, para cada
n-upla ⃗a = (a1, . . . , an) ∈Bn hay una valuaci´on v⃗a, tal que v⃗a(xi) = ai, para
i = 1, . . . , n.
De acuerdo con el Teorema 1.2.6, v⃗a(P) se calcula sustituyendo en P las
variables xi por los valores ai y efectuando las operaciones correspondientes
a los conectivos.
Si listamos ahora todas las n-uplas ⃗a ∈Bn, y a la derecha de cada una
de ellas escribimos el valor v⃗a(P), obtenemos una tabla (o matriz) de 2n ﬁlas
(o renglones) y n + 1 columnas, formada por elementos de B.
Por ejemplo, la Tabla 1.1 corresponde a P = (p0 ∨p7) →p9, con x1 = p0,
x2 = p7 y x3 = p9.
La tabla que acabamos de describir se llama la tabla de verdad de la
f´ormula P, y nos permite conocer el valor v(P) para cualquier valuaci´on v.
En efecto, sea v una valuaci´on cualquiera y consideremos la n-upla ⃗a =
(v(x1), . . . , v(xn)). Supongamos que esta n-upla corresponde a los n primeros
lugares de la ﬁla i-´esima. Por el Corolario 1.2.7, v(P) = v⃗a(P), y este valor es
el que ﬁgura en la ´ultima columna de dicha ﬁla, esto es, en el lugar (i, n+1).

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
23
0
0
0
1
0
0
1
1
0
1
0
0
0
1
1
1
1
0
0
0
1
0
1
1
1
1
0
0
1
1
1
1
Table 1.1: Tabla de verdad de (p0 ∨p7) →p9
Tenemos entonces un primer m´etodo para determinar si una f´ormula P
dada es o no una tautolog´ıa: escribimos su tabla de verdad y miramos la
´ultima columna.
P es una tautolog´ıa si y s´olo si en esta columna ﬁgura
´unicamente el s´ımbolo 1. Si ﬁgura ´unicamente 0, P es una falsedad y si
ﬁguran al menos un 0 y un 1, P es una contingencia.
Recordemos que los n primeros elementos de las ﬁlas de la tabla de verdad
de una f´ormula P tal que var(P) = {x1, . . . , xn} est´an en correspondencia con
las funciones de {x1, . . . , xn} en B. Por lo tanto dos ﬁlas distintas no pueden
tener sus primeros n elementos iguales: si a1, . . . , an, an+1 y b1, . . . , bn, bn+1
son dos ﬁlas distintas de la tabla de verdad de P, debe existir al menos un
i ≤n tal que ai ̸= bi.
De esta observaci´on resulta que la tabla de verdad de una f´ormula P en
la que ﬁguran n variables proposicionales distintas puede considerarse como
una funci´on TP: Bn →B.
En efecto, para toda n-upla (a1, . . . , an) ∈Bn, en la tabla de verdad de
P hay una (´unica) ﬁla cuyos primeros n elementos coinciden con los de esta
n-upla, y si an+1 es el elemento que ﬁgura en la columna n + 1 de dicha ﬁla,
podemos deﬁnir sin ambig¨uedad TP(a1, . . . , an) = an+1.
Por ejemplo, si P = (p0 ∨p7) →p9, de la tabla anterior resulta que
TP(0, 1, 0) = 0, TP(1, 0, 0) = 0.
En resumen, a cada f´ormula P del c´alculo proposicional tal que var(P) =
{x1, . . . , xn}, le podemos hacer corresponder una funci´on TP de Bn en B.
Esta funci´on est´a caracterizada por la siguiente propiedad:
(TV) TP(v(x1), . . . , v(xn)) = v(P).
Las funciones de Bn en B se llaman funciones booleanas de n variables.

24
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Los resultados anteriores muestran que podemos asociar con cada f´ormula
proposicional una funci´on booleana. Una pregunta que se plantea natural-
mente es si vale la rec´ıproca, esto es, si dada una funci´on booleana f: Bn →B,
existe una f´ormula P tal que TP = f.
La respuesta es aﬁrmativa, como lo muestra el siguiente:
Teorema 1.2.8 Sea n un n´umero natural > 0 y f una funci´on booleana de
n variables. Entonces dadas n variables proposicionales distintas x1, . . . , xn,
existe una f´ormula P tal que var(P) = {x1, . . . , xn} y TP = f.
Demostraci´on: En esta demostraci´on usaremos repetidas veces la convenci´on
de la p´agina 19.
Sea f: Bn →B una funci´on. Si f toma id´enticamente el valor 0, est es, si
f(a1, . . . , an) = 0 para toda n-upla (a1, . . . , an) ∈Bn, entonces escribiendo
P = (x1 ∧¬x1) ∨(x2 ∧¬x2) ∨· · · ∨(xn ∧¬xn),
tenemos que var(P) = {x1, . . . , xn} y TP = f.
Supongamos ahora que f no es id´enticamente 0, y representemos a f por
una tabla de 2n ﬁlas por n+1 columnas, de modo que si el elemento de B que
ﬁgura en la intersecci´on de la i-´esima ﬁla con la j-´esima columna se denota
por tij, se tiene que tin+1 = f(ti1, . . . , tin), para i = 1, . . . , 2n.
Para cada i entre 1 y 2n y para cada j entre 1 y n, deﬁnamos la f´ormula
Pij del modo siguiente:
Pij =
 xj
si tij = 1,
¬xj
si tij = 0.
y para cada i entre 1 y 2n, sea
Pi = Pi1 ∧Pi2 ∧· · · ∧Pin.
Es claro que var(Pi) = {x1, . . . , xn}. Adem´as se tiene que
TPi(ti1, . . . , tin) = min(TPi1(ti1, . . . , tin), . . . , TPin(ti1, . . . , tin))
y como
TPij(ti1, . . . , tin) =
 tij
si tij = 1,
1 −tij
si tij = 0
se tiene que
TPij(ti1, . . . , tin) = 1 para 1 ≤j ≤n.

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
25
Por lo tanto vemos que
TPi(ti1, . . . , tin) = 1 para 1 ≤i ≤2n.
Por otro lado, si k ̸= i, existe por lo menos un j entre 1 y n tal que
tkj = 1 −tij, y para este j se tiene que
TPi(tk1, . . . , tkn) =
 tkj
si tij = 1,
1 −tkj
si tij = 0.
Por lo tanto:
TPi(tk1, . . . , tkn) = 0 para k ̸= i.
En resumen, tenemos que
TPi(tk1, . . . , tkn) =
 1
si k = i,
0
si k ̸= i.
(1.11)
Sea I = {i | 1 ≤i ≤2n y tin+1 = 1}.
Como por hip´otesis f no es
id´enticamente 0, resulta que I es no vac´ıo y podemos escribir
I = {i1, . . . , ir},
donde i1 es el primer i tal que tin+1 = 1, i2 el segundo, etc.
Finalmente, deﬁnamos la f´ormula P del modo siguiente:
P = Pi1 ∨Pi2 ∨· · · ∨Pir.
Se tiene que
TP(ti1, . . . , tin) = max(TPi1(ti1, . . . , tin), . . . , TPir(ti1, . . . , tin)).
De esta ´ultima igualdad y de (1.11) resulta que TP(ti1, . . . , tin) = 1 si y
s´olo si i ∈I, esto es, si y s´olo si f(ti1, . . . , tin) = 1. Luego las funciones
TP y f toman el valor 1 en exactamente las mismas n-uplas de Bn, y como
en las restantes deben ambas tomar el valor 0, se tiene que Tp(ti1, . . . , tin) =
f(ti1, . . . , tin) para toda n-upla (ti1, . . . , tin) ∈Bn, y esto signiﬁca que TP = f,
con lo que termina la demostraci´on.
La demostraci´on del teorema anterior nos da un procedimiento efectivo
para encontrar una f´ormula correspondiente a una funci´on booleana. Ilus-
traremos este procedimiento con un ejemplo.

26
CHAPTER 1. C ´ALCULO PROPOSICIONAL
a1
a2
a3
f(a1, a2, a3)
0
0
0
0
0
0
1
1
0
1
0
0
0
1
1
1
1
0
0
1
1
0
1
1
1
1
0
0
1
1
1
1
Table 1.2: Funci´on booleana de tres variables
Sea f: B3 →B la funci´on dada por la Tabla 1.2.
En este caso tenemos i1 = 2, i2 = 4, i3 = 5, i4 = 6 e i5 = 8 y:
P2 = ¬x1 ∧¬x2 ∧x3,
P4 = ¬x1 ∧x2 ∧x3,
P5 = x1 ∧¬x2 ∧¬x3,
P6 = x1 ∧¬x2 ∧x3,
P8 = ¬x1 ∧¬x2 ∧¬x3.
Podemos concluir entonces que f es la tabla de verdad de la f´ormula
P = P2 ∨P4 ∨P5 ∨P6 ∨P8,
donde, como siempre, estamos suponiendo que asociamos a la izquierda,
seg´un lo convenido en la p´agina 19.
Pero observemos que f es tambi´en la tabla de verdad de la f´ormula Q =
(x1 ∨x3)∧(¬x2 ∨x3), y tambi´en la tabla de verdad de la f´ormula R = (x1 →
x2) →x3).
Esto muestra que en general f´ormulas distintas, construidas con las mis-
mas variables, pueden tener la misma tabla de verdad. Intuitivamente, estas
f´ormulas expresan lo mismo. Esta idea intuitiva se formaliza en la siguiente:
Deﬁnici´on 1.2.9 Las f´ormulas P y Q se dicen equivalentes, y se escribe
P ≡Q, si para todo valuaci´on v se tiene que v(P) = v(Q).

1.2. SEM ´ANTICA DEL C ´ALCULO PROPOSICIONAL.
27
Es f´acil veriﬁcar que ≡es una relaci´on de equivalencia en el conjunto de
las f´ormulas, esto es, que se satisfacen las tres propiedades siguientes, donde
P, Q y R denotan f´ormulas arbitrarias:
Reﬂexiva: P ≡P,
Sim´etrica: Si P ≡Q, entonces Q ≡P, y
Transitiva: Si P ≡Q y Q ≡R, entonces P ≡R.
Lema 1.2.10 Si var(P) = var(Q), entonces P ≡Q si y s´olo si tienen la
misma tabla de verdad.
Demostraci´on: Supongamos que var(P) = var(Q) = {x1, . . . , xn}.
Si TP = TQ, entonces para toda valuaci´on v se tiene que
v(P) = TP(v(x1), . . . , v(xn)) = TQ(v(x1), . . . , v(xn)) = v(Q)
y por lo tanto P ≡Q.
Supongamos ahora que P ≡Q. Sea (a1, . . . , an) ∈B y sea v una valuaci´on
tal que v(x1) = ai para i = 1, . . . , n. Entonces tendremos que
TP(a1, . . . , an) = v(P) = v(Q) = TQ(a1, . . . , an)
Como (a1, . . . , an) ∈B es arbitraria, esto signiﬁca que TP = TQ, c.q.d.
Observaci´on 1.2.11 La hip´otesis que var(P) = var(Q) es esencial para la
validez del Lema 1.2.10. En efecto, consideremos las f´ormulas P = (p0 ∨p1)
y Q = (p0 ∨p2). Si v es una valuaci´on tal que v(p0) = v(p1) = 0 y v(p2) = 1
(una tal valuaci´on existe por el Teorema 1.2.2), se tiene que v(P) = 0 y
v(Q) = 1. Luego P no es equivalente a Q. Sin embargo, es f´acil veriﬁcar que
TP(a1, a2) = TQ(a1, a2) para todo par (a1, a2) ∈B × B.
Con un conjunto ﬁnito de variables proposicionales {x1, . . . , xn} se pueden
construir inﬁnitas f´ormulas.
Por ejemplo, ya vimos que usando s´olo una
variable x y s´olo el conectivo ¬ se pueden obtener las f´ormulas:
x, ¬x, ¬¬x, . . . , ¬ · · · ¬x, . . .
Pero ¿cu´antas de estas f´ormulas son esencialmente distintas, esto es, no equi-
valentes? Algunos autores se reﬁeren a este problema como el poder de ex-
presi´on del c´alculo proposicional.

28
CHAPTER 1. C ´ALCULO PROPOSICIONAL
La respuesta se obtiene f´acilmente a partir del Lema 1.2.10: cada clase de
equivalencia de f´ormulas construidas a partir de las variables proposicionales
(que suponemos distintas) x1, . . . , xn est´a determinada por una ´unica funci´on
booleana, y como por el Teorema 1.2.8 toda tal funci´on proviene de una
f´ormula construida a partir de x1, . . . , xn, vemos que hay una biyecci´on entre
las clases de equivalencia de las f´ormulas construidas a partir de las variables
x1, . . . , xn y las funciones booleanas de n variables.
De estas consideraciones resulta inmediatamente que:
Teorema 1.2.12 El n´umero de clases de equivalencia de f´ormulas que se
pueden construir a partir de n variables proposicionales distintas es 22n.
El siguiente criterio de equivalencia de f´ormulas es conceptualmente im-
portante:
Teorema 1.2.13 Las f´ormulas P y Q son equivalentes si y s´olo si P →Q
y Q →R son ambas tautolog´ıas.
Demostraci´on: El teorema es una consecuencia inmediata de la siguiente
propiedad, que a su vez resulta de las igualdades (1.9) y (1.5): Para toda
valuaci´on v, v(P) ≤v(Q) si y s´olo si v(P →Q) = 1.
Las f´ormulas de longitud modiﬁcada 1 ´o 2 (ver p´agina 14) son llamadas
literales. Esto es, un literal es o bien una variable proposicional o bien la
negaci´on de una variable proposicional.
Una f´ormula P se dice normal disyuntiva si es una disyunci´on de conjun-
ciones de literales. Esto es, P es normal disyuntiva si (usando la convenci´on
de la p´agina 19)
P = P1 ∨P2 ∨. . . ∨Pr,
donde cada Pi es, a su vez, de la forma . . . x′
1 ∧x′
2 ∧. . . ∧x′
n, con x′
i = xi ´o
x′
i = ¬xi.
Observemos que la f´ormula P que se obtiene a partir de una funci´on
booleana f de n variables por el procedimiento indicado en la demostraci´on
del Teorema 1.2.8 es normal disyuntiva.
Teorema 1.2.14 Toda f´ormula es equivalente a una f´ormula normal disyun-
tiva.

1.3. LA CONSECUENCIA L ´OGICA.
29
Demostraci´on: Sea P una f´ormula y var(P) = {x1, . . . , xn}. Tenemos que
la tabla de verdad de P, TP, es una funci´on booleana de n variables. Luego
podemos aplicar el procedimiento indicado en la demostraci´on del Teorema 1.2.8
para obtener una f´ormula normal disyuntiva Q tal que var(Q) = var(P) y
TQ = TP. Por el Lema 1.2.10, resulta entonces que Q ≡P, c.q.d.
Observemos que el procedimiento indicado en la demostraci´on del teorema
anterior nos da un procedimiento efectivo para encontrar la forma normal
disyuntiva de una f´ormula dada.
1.3
La consecuencia l´ogica.
La noci´on m´as importante considerada en l´ogica es la de consecuencia.
Sea S un conjunto de f´ormulas, esto es, S ⊆Form, y sea P una f´ormula.
Para cada asignaci´on de valores de verdad a las variables proposicionales
algunas de las f´ormulas de S podr´an resultar verdaderas y otras falsas, y
lo mismo ocurre con P. Intuitivamente parece natural pedir que para que
P sea una consecuencia l´ogica de S, se cumpla que cualquier asignaci´n de
valores de verdad que haga verdaderas todas las f´ormulas de S tambi´en haga
verdadera a P.
Esta idea intuitiva es la que tomaremos como deﬁnici´on sem´antica de la
relaci´on de consecuencia. Comenzaremos por la siguiente:
Deﬁnici´on 1.3.1 Diremos que una valuaci´on v satisface a una f´ormula P si
v(P) = 1, y diremos que v satisface a un conjunto S ⊆Form si v satisface a
todas las f´ormulas de S, esto es, si v(Q) = 1 para toda Q ∈S. Una f´ormula
(o un conjunto de f´ormulas) se dice satisfacible si existe una valuaci´on que
la (o lo) satisfaga, e insatisfacible en caso contrario.
Observar que toda valuaci´on v satisface (trivialmente) al conjunto vac´ıo.
Es tambi´en claro que una f´ormula es satisfacible si y s´olo si es una tau-
tolog´ıa o una contingencia. Luego las f´ormulas insatisfacibles coinciden con
las falsedades.
Deﬁnici´on 1.3.2 Sean S ⊆Form y P ∈Form. Diremos que P es una
consecuencia de S, y escribiremos S |= P, en el caso que toda valuaci´on v
que satisface a S tambi´en satisface a P. Esto es, si v(Q) = 1 para toda
Q ∈S, entonces v(P) = 1. Indicaremos con Con(S) al conjunto de las
consecuencias de S: Con(S) = {P ∈Form | S |= P}.

30
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Observaci´on 1.3.3 De la deﬁnici´on anterior resulta que ∅|= P si y s´olo si
P es una tautolog´ıa. Luego Con(∅) es el conjunto de las tautolog´ıas.
El resultado siguiente pone de maniﬁesto la relaci´on existente entre el
conectivo binario →y la noci´on de consecuencia.
Teorema 1.3.4 (de la deducci´on, forma sem´antica) Sean P, Q f´ormu-
las y S ⊆Form. Entonces Q ∈Con(S ∪{P}) si y solamente si P →Q ∈
Con(S).
Demostraci´on: Sea v una valuaci´on que satisface a S, y supongamos que
v(P →Q) = max(¬v(P), v(Q)) = 0. Entonces v(P) = 1 y v(Q) = 0, lo
que implica que v satisface a S ∪{P} y v(Q) = 0. Esto muestra que si
Q ̸∈Con(S), entonces Q ̸∈Con(R ∪{P}).
Para probar la rec´ıproca, supongamos que P →Q ∈Con(S), y sea v una
valuaci´on que satisfaga a S ∪{P}. Entonces
v(Q) = max(0, v(Q)) = max(¬v(P), v(Q)) = v(P →Q) = 1
lo que muestra que Q ∈Con(S ∪{P}), c.q.d.
Tomando S = ∅en el teorema anterior y teniendo en cuenta la Obser-
vaci´on 1.3.3, se obtiene el siguiente:
Corolario 1.3.5 Para todo par de f´ormulas P y Q se tiene que {P} |= Q si
y s´olo si P →Q es una tautolog´ıa.
La relaci´on entre consecuencia y satisfacibilidad est´a dada por el teo-
rema siguiente, cuya demostraci´on es inmediata a partir de las respectivas
deﬁniciones:
Teorema 1.3.6 Para todo S ⊆Form y para toda f´ormula P, se tiene que
S |= P si y s´olo si S ∪{¬P} es insatisfacible.
Notemos que si en este teorema hacemos S = ∅, obtenemos que una
f´ormula P es una tautolog´ıa si y s´olo si ¬P es insatisfacible.
Observaci´on 1.3.7 Un conjunto ﬁnito y no vac´ıo de f´ormulas es satisfacible
si y s´olo si la conjunci´on de las f´ormulas que lo componen es satisfacible.
Luego: {Q1, . . . , Qr} |= P si y s´olo si Q1 ∧· · · ∧Qr ∧¬P es insatisfacible.

1.3. LA CONSECUENCIA L ´OGICA.
31
Observaci´on 1.3.8 Una f´ormula P tal que var(P) = {x1, . . . , xn} es satis-
facible si y s´olo si existe una n-upla (a1, . . . , an) ∈Bn tal que TP(a1, . . . , an) =
1.
De las observaciones precedentes resulta que tenemos un procedimiento
efectivo para poder determinar si un conjunto ﬁnito y no vac´ıo de f´ormulas es
o no satisfacible: hacemos primero la conjunci´on de las f´ormulas del conjunto,
y luego vamos construyendo la tabla de verdad de esta conjunci´on hasta
obtener una ﬁla cuyo ´ultimo valor sea 1. Si encontramos tal ﬁla, el conjunto es
satisfacible. Si en la ´ultima columna de la tabla ﬁgura solamente 0, entonces
el conjunto es insatisfacible.
Observemos que por el Teorema 1.3.6, podemos aplicar este procedimiento
para determinar si una f´ormula es o no consecuencia de un conjunto ﬁnito
de f´ormulas.
Si bien la construcci´on de una tabla de verdad es un procedimiento efec-
tivo para determinar si una dada f´ormula es o no satisfacible, en el sentido
que se hace en un n´umero ﬁnito de pasos bien determinados, este n´umero
puede ser muy grande y por lo tanto el m´etodo puede resultar impracticable.
Para convencerse de esto, basta observar que si en P ﬁguran n variables
proposicionales, su tabla de verdad tendra 2n ﬁlas y n+1 columnas, y podr´ıa
ocurrir que el valor 1 apareciese s´olo al ﬁnal de la ´ultima ﬁla.
Nos proponemos ahora describir otro procedimiento para determinar si
un conjunto ﬁnito (y no vac´ıo) de f´ormulas es o no satisfacible.
Este m´etodo, aunque tambi´en requiere una cantidad de pasos del orden
anterior, es m´as natural, pues es m´as pr´oximo a la forma en que razonamos
habitualmente,y, sobre todo, puede generalizarse para el c´alculo de predica-
dos, lo que no ocurre con las tablas de verdad. La idea b´asica se remonta
a los trabajos del matem´atico aleman G.Gentzen publicados en 1934. Nues-
tra exposici´on seguir´a la presentaci´on del m´etodo publicada en 1968 por
R.M. Smullyan , quien tuvo en cuenta ideas introducidas por E.W.Beth y
K.Hintikka a mediados de la decada del 501
Comenzaremos por el siguiente lema, cuya demostraci´on resulta inmedi-
atamente de la Deﬁnici´on 1.2.1 y de las f´ormulas (1.5)–(1.9):
Lema 1.3.9 Sean P,Q y R f´ormulas, y v una valuaci´on. Entonces se tienen
las siguientes propiedades:
1R.M. Smullyan, First Order Logic, Springer-Verlag, Berlin–New York, 1968. Reim-
preso por Dover, N. York, 1995

32
CHAPTER 1. C ´ALCULO PROPOSICIONAL
(R¬) v satisface a ¬¬P si y s´olo si v satisface a P,
(R∨) v satisface a P ∨Q si y s´olo si v satisface a P o v satisface a Q,
(R¬∨) v satisface a ¬(P ∨Q) si y s´olo si v satisface a ¬P y v satisface a
¬Q,
(R∧) v satisface a P ∧Q si y s´olo si v satisface a P y v satisface a Q,
(R¬∧) v satisface a ¬(P ∧Q) si y s´olo si v satisface a ¬P o v satisface a
¬Q,
(R→) v satisface a P →Q si y s´olo si v satisface a ¬P o v satisface a Q, y
(R¬→) v satisface a ¬(P →Q) si y s´olo si v satisface a P y v satisface a
¬Q.
Las propiedades enunciadas en el lema anterior nos dan las reglas del
comportamiento de los conectivos con respecto a la satisfacibilidad, y se
pueden esquematizar en la forma siguiente:
R¬
¬¬P
P
R∨
(P ∨Q)
P | Q
R¬∨
¬(P ∨Q)
¬P, ¬Q
R∧
(P ∧Q)
P, Q
R¬∧
¬(P ∧Q)
¬P | ¬Q
R→
(P →Q)
¬P | Q
R¬→
¬(P →Q)
P, ¬Q
La f´ormula que ﬁgura encima de la raya horizontal en cada una de las
reglas se llama la premisa de dicha regla, y la o las f´ormulas que ﬁguran
debajo, la o las conclusiones de la regla.
Observaci´on 1.3.10 En todos los casos se tiene que las conclusiones son
o bien subf´ormulas o bien negaciones de subf´ormulas de la correspondiente
premisa.

1.3. LA CONSECUENCIA L ´OGICA.
33
Tenemos dos tipos de reglas: las que llamaremos de tipo A, que tienen
una ´unica conclusi´on o dos conclusiones separadas por una coma, sin una
barra vertical, y las que llamaremos de tipo B, que tienen dos conclusiones
separadas por una barra vertical.
Las reglas de tipo A son R¬, R¬∨, R∧y R¬→, y las de tipo B son
R∨, R¬∧y R→.
Las reglas de tipo A signiﬁcan que una valuaci´on satisface a la premisa
si y s´olo si satisface a todas las conclusiones, y las de tipo B, que una valu-
aci´on satisface a la premisa si y s´olo si satisface a por lo menos una de las
conclusiones.
Lema 1.3.11 Toda f´ormula que no es una variable proposicional o negaci´on
de una variable proposicional, es de la forma de la premisa de una (y s´olo
una) de las reglas R¬, R∨, R¬∨, R∧, R¬∧, R→o R¬→.
Demostraci´on: Sea P una f´ormula. Si P no es una variable proposicional,
entonces del Corolario 1.1.14 resulta que se puede presentar uno y s´olo uno
de los siguientes casos:
(i) P = ¬T,
(ii) P = (Q ∨R),
(iii) P = (Q ∧R) o
(iv) P = (Q →R).
En los casos (ii), (iii) y (iv) P es de la forma de la premisa de R∨, R∧y R→,
respectivamente.
Consideremos el caso (i). Si T es una variable proposicional, entonces
P es la negaci´on de una variable proposicional. En caso contrario, otra vez
por el Corolario 1.1.14 resulta que se puede presentar uno, y s´olo uno, de los
casos siguientes:
(a) P = ¬T = ¬¬Q,
(b) P = ¬T = ¬(Q ∨R),
(c) P = ¬T = ¬(Q ∧R) o
(d) P = ¬T = ¬(Q →R),

34
CHAPTER 1. C ´ALCULO PROPOSICIONAL
de donde resulta que P es de la forma de la premisa de R¬, R¬∨, R¬∧o
R¬→, c.q.d.
La alternativa al m´etodo de las tablas de verdad para determinar si una
f´ormula es satisfacible que mencionamos anteriormente, consiste en una apli-
caci´on sistem´atica de las reglas para los distintos conectivos. Antes de de-
scribir el m´etodo formalmente, daremos un par de ejemplos.
Como primer ejemplo, utilizaremos las reglas para averiguar si la f´ormula
P = ((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2))
(1.12)
es o no una tautolog´ıa.
Sabemos que P es una tautolog´ıa si y s´olo si ¬P es insatisfacible.
Supongamos que ¬P sea satisfacible. Entonces existir´ıa una valuaci´on v
que la satisface. Veamos si esto es posible.
Como P es de la forma Q →R, con Q = (p0∨p1) →p2 y R = (p0 →p2)∧
(p1 →p2), la regla R¬→es aplicable a ¬P, lo que implica que (p0 ∨p1) →p2
y ¬((p0 →p2) ∧(p1 →p2))) deber´ıan ser satisfechas por la valuaci´on v.
El siguiente ´arbol nos ayudar´a a visualizar la situaci´on:
¬(((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2)))
(p0 ∨p1) →p2
¬((p0 →p2) ∧(p1 →p2))
La regla R→es aplicable a (p0 ∨p1) →p2, y por lo tanto v deber´ıa
satisfacer a ¬(p0 ∨p1) o a p2. Para tener en cuenta ambas posibilidades,
agregamos a nuestro ´arbol dos nuevos nodos, a la misma altura:
¬(((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2)))
(p0 ∨p1) →p2
¬((p0 →p2) ∧(p1 →p2))
¬(p0 ∨p1)
p2
La regla R¬∧es aplicable a ¬((p0 →p2) ∧(p1 →p2)), por lo que v deber´ıa
satisfacer a ¬(p0 →p2) o a ¬(p1 →p2). Para seguir teniendo en cuenta todas
las posibilidades, agregamos estas f´ormulas como nuevos nodos terminales a
cada uno de los dos nodos terminales anteriores, obteniendo el siguiente ´arbol:
¬(((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2)))

1.3. LA CONSECUENCIA L ´OGICA.
35
(p0 ∨p1) →p2
¬((p0 →p2) ∧(p1 →p2))
¬(p0 ∨p1)
p2
¬(p0 →p2)
¬(p1 →p2)
¬(p0 →p2)
¬(p1 →p2)
La regla R¬→es aplicable tanto a ¬(p0 →p2) como a ¬(p1 →p2). Por
lo tanto deberemos agregar sucesivamente las conclusiones de esta regla a
los nodos terminales que se encuentran debajo de las respectivas f´ormulas,
obteniendo:
¬(((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2)))
(p0 ∨p1) →p2
¬((p0 →p2) ∧(p1 →p2))
¬(p0 ∨p1)
p2
¬(p0 →p2)
¬(p1 →p2)
¬(p0 →p2)
¬(p1 →p2)
p0
p1
p0
p1
¬p2
¬p2
¬p2
¬p2
Observemos que en las dos ramas de la derecha del ´arbol que estamos con-
struyendo ﬁguran las f´ormulas p2 y ¬p2.
Como no puede haber ninguna
valuaci´on que las satisfaga simult´aneamente, los caminos indicados por estas
dos ramas se nos “cierran”, por lo que seguiremos aplicando las reglas s´olo
a las f´ormulas que ﬁguran en las dos ramas izquierdas. Indicamos este he-
cho colocando la marca × debajo de los nodos terminales de las dos ramas
derechas. La regla R¬∨es aplicable a ¬(p0 ∨p1), por lo que debemos agre-
gar sucesivamente ¬p0 y ¬p1 como nuevos nodos a cada uno de los nodos
terminales que ﬁguran debajo de ¬(p0 ∨p1), obteniendo:
¬(((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2)))
(p0 ∨p1) →p2
¬((p0 →p2) ∧(p1 →p2))
¬(p0 ∨p1)
p2
¬(p0 →p2)
¬(p1 →p2)
¬(p0 →p2)
¬(p1 →p2)

36
CHAPTER 1. C ´ALCULO PROPOSICIONAL
p0
p1
p0
p1
¬p2
¬p2
¬p2
¬p2
¬p0
¬p0
×
×
¬p1
¬p1
En la primera rama de la izquierda ﬁguran p0 y ¬p0, y en la segunda, p1 y
¬p1, por lo que debemos poner una marca × debajo de los nodos terminales
de cada una de ellas, obteniendo:
¬(((p0 ∨p1) →p2) →((p0 →p2) ∧(p1 →p2)))
(p0 ∨p1) →p2
¬((p0 →p2) ∧(p1 →p2))
¬(p0 ∨p1)
p2
¬(p0 →p2)
¬(p1 →p2)
¬(p0 →p2)
¬(p1 →p2)
p0
p1
p0
p1
¬p2
¬p2
¬p2
¬p2
¬p0
¬p0
×
×
¬p1
¬p1
×
×
Ahora en todos los nodos terminales del ´arbol ﬁgura la marca ×, lo que
signiﬁca que todos los posibles caminos a seguir se nos han “cerrado” o
“bloqueado”. Luego, partiendo de la hip´otesis de que v satisface a la f´ormula
¬P y examinando los valores que v le deber´ıa asignar a todas las f´ormulas que
podemos derivar de ¬P por aplicaci´on de las reglas, siempre llegamos a una
contradicci´on. Por lo tanto podemos concluir que no existe una valuaci´on
que satisfaga a ¬P, y, por ende, que P es una tautolog´ıa.
Como segundo ejemplo de aplicaci´on de las reglas, veamos si la f´ormula
Q = (p0 ∧p1) →¬(p0 ∨¬p1)
(1.13)
es o no una tautolog´ıa. Como en el caso de la f´ormula P del ejemplo anterior,
debemos averiguar si ¬Q es o no satisfacible.
Supongamos entonces que
exista una valuaci´on v tal que v(¬Q) = 1. Como la regla R¬→es aplicable a

1.3. LA CONSECUENCIA L ´OGICA.
37
¬Q, v debe satisfacer a p0 ∧p1 y a ¬¬(p0 ∨¬p1). Podemos entonces dibujar
el ´arbol:
¬((p0 ∧p1) →¬(p0 ∨¬p1))
p0 ∧p1
¬¬(p0 ∨¬p1)
Aplicando ahora la regla R¬ a la ´ormula ¬¬(p0 ∨¬p1), podemos agregar
p0 ∨¬p1 como nuevo nodo terminal:
¬((p0 ∧p1) →¬(p0 ∨¬p1))
p0 ∧p1
¬¬(p0 ∨¬p1)
p0 ∨¬p1
y aplicando R∧a p0 ∧p1, obtenemos:
¬((p0 ∧p1) →¬(p0 ∨¬p1))
p0 ∧p1
¬¬(p0 ∨¬p1)
p0 ∨¬p1
p0
p1
Finalmente, aplicando R∨a p0 ∨p1, nos queda:
¬((p0 ∧p1) →¬(p0 ∨¬p1))
p0 ∧p1
¬¬(p0 ∨¬p1)
p0 ∨¬p1
p0
p1
p0
¬p1

38
CHAPTER 1. C ´ALCULO PROPOSICIONAL
×
La rama de la derecha aparece cerrada por la marca ×.
La rama de la
izquierda est´a “saturada”, en el sentido de que todas las f´ormulas que ﬁgu-
ran arriba de su nodo terminal p0 (y que no son variables proposicionales
o negaciones de variables proposicionales), fueron utilizadas. De este modo
hemos “completado” el procedimiento.
Sea v una valuaci´on tal que v(p0) = v(p1) = 1 (una tal valuaci´on existe por
el Corolario 1.2.4). Entonces “subiendo” por la rama de la izquierda vemos
que v va satisfaciendo las f´ormulas que ﬁguran en la misma, en particular al
nodo inicial. Luego v(¬Q) = 1. Esto signiﬁca que ¬Q es satisfacible, y por
lo tanto que Q no es una tautolog´ıa.
Vamos a formalizar ahora la construcci´on de los ´arboles que vimos en los
dos ejemplos anteriores2.
Para abreviar, en lo sucesivo diremos que una f´ormula P es de tipo A (o
de tipo B), en lugar de decir que es de la forma de la premisa de una regla
de tipo A (de tipo B), y llamaremos conclusiones de P a las conclusiones de
la ´unica regla que tiene por premisa a P.
Deﬁnici´on 1.3.12 Sea A un ´arbol cuyos nodos son f´ormulas. Un ´arbol A′
se dice una extensi´on inmediata de A si A′ se obtiene de una de las siguientes
maneras, donde T representa un nodo terminal de A:
1. Si T tiene como antecesor una f´ormula P de tipo A, se agrega una de
las conclusiones de P como sucesor inmediato de T.
2. Si T tiene como antecesor una f´ormula P de tipo B, se agregan las dos
conclusiones de P como dos sucesores inmediatos de T.
En cualquiera de estos casos, se dice que la f´ormula P fue usada en el nodo
T.
Deﬁnici´on 1.3.13 Un ´arbol de f´ormulas es un ´arbol de refutaci´on de una
f´ormula P si y s´olo si se lo obtiene haciendo un n´umero ﬁnito de extensiones
inmediatas a partir del ´arbol cuyo ´unico nodo es la f´ormula P. Un ´arbol de
refutaci´on de un conjunto ﬁnito S de f´ormulas es un ´arbol de refutaci´on de
la conjunci´on de las f´ormulas de S.
2En el Ap´endice de este Cap´ıtulo se dan todas las nociones sobre ´arboles que usaremos
en lo que sigue.

1.3. LA CONSECUENCIA L ´OGICA.
39
De la deﬁnici´on anterior resulta que un ´arbol de f´ormulas A es un ´arbol de
refutaci´on de una f´ormula P si y s´olo si existe una sucesi´on ﬁnita de ´arboles
A0, . . . , An tal que A0 tiene por ´unico nodo a la f´ormula P, An = A y Ai+1
es una extensi´on inmediata de Ai, para i = 1, . . . , n −1.
Una rama de un ´arbol de f´ormulas se dice cerrada si contiene a la vez a
una f´ormula y a su negaci´on. En caso contrario, la rama se dice abierta.
Un ´arbol se dice cerrado si todas sus ramas son cerradas.
Una rama de un ´arbol de f´ormulas se dice saturada si el conjunto for-
mado por las f´ormulas de sus nodos es saturado en el sentido de la siguiente
deﬁnici´on:
Deﬁnici´on 1.3.14 Un conjunto S de f´ormulas se dice saturado si y s´olo si
satisface las siguientes condiciones:
(S0) Una f´ormula y su negaci´on no pueden estar simult´aneamente en S.
(S1) Si una f´ormula de tipo A est´a en S, entonces sus dos conclusiones est´an
en S.
(S2) Si una f´ormula de tipo B est´a en S, al menos una de sus conclusiones
est´a en S.
Un ´arbol de refutaci´on se dice completo si cada una de sus ramas es
cerrada o saturada. Notemos que, en particular, todo ´arbol de refutaci´on
cerrado es un ´arbol completo.
En los dos ejemplos que desarrollamos anteriormente obtuvimos ´arboles
de refutaci´on completos de las f´ormulas deﬁnidas en (1.12) y (1.13).
El
primero es cerrado, mientras que el segundo tiene una rama saturada.
Observemos que el grado de complejidad de las conclusiones no es nece-
sariamente menor que el grado de complejidad de las premisas. Por ejemplo,
si P = p0 →p1, comp(P) = comp(¬p0). Esto hace que no podamos argu-
mentar por inducci´on en el grado de complejidad al pasar de una f´ormula a
sus conclusiones.
Lo que s´ı disminuye al pasar de una f´ormula a sus conclusiones es la
longitud modiﬁcada (ver p´agina 14). En efecto, se tiene el siguiente lema,
que es an´alogo al Corolario 1.1.14.
Lema 1.3.15 Para toda f´ormula P se tiene que:
(i) Si long∗(P) = 1, entonces P es una variable proposicional,

40
CHAPTER 1. C ´ALCULO PROPOSICIONAL
(ii) Si long∗(P) = 2, entonces P es la negaci´on de una variable proposi-
cional,
(iii) Si long∗(P) ≥3, entonces P es de tipo A o B, y la longitud modiﬁcada
de sus conclusiones es menor que long∗(P).
Demostraci´on: Resulta de la deﬁnici´on de longitud modiﬁcada y de examinar
cada una de las reglas R¬, R∨, R¬∨, R∧, R¬∧, R→o R¬→, c. q. d.
Estamos ahora en condiciones de probar el siguiente:
Lema 1.3.16 Toda f´ormula P tiene por lo menos un ´arbol de refutaci´on
completo.
Demostraci´on: Por inducci´on en la longitud modiﬁcada.
Si long∗(P) = 1 o long∗(P) = 2, entonces por el Lema 1.3.15 P es una
variable proposicional o la negaci´on de una variable proposicional, y por
consiguiente, el ´arbol de nivel 0 en cuyo ´unico nodo ﬁgura P es un ´arbol de
refutaci´on completo de P.
Supongamos que long∗(P) ≥3, y que toda f´ormula X tal que long∗(X) <
long∗(P) admite un ´arbol de refutaci´on completo.
Por el Lema 1.3.15, P es de tipo A o de tipo B, y la longitud modiﬁcada
de sus conclusiones es menor que long∗(P).
Supongamos primero que P es de tipo A, y sea Q una conclusi´on de P.
Sea A1 el ´arbol que se obtiene poniendo Q debajo de P, y luego desarrollando
un ´arbol completo para Q (que existe por la hip´otesis inductiva). Como A1
se puede obtener por un n´umero ﬁnito de extensiones inmediatas a partir
del nodo inicial P, es un ´arbol de refutaci´on de P. Si es cerrado, o si Q
es la ´unica conclusi´on de P (esto es, P = ¬¬Q), entonces es un ´arbol de
refutaci´on completo de P. En caso contrario, sea R la otra conclusi´on de P,
y agregu´emosla como nuevo nodo terminal de todas las ramas abiertas de
A1. Llamemos A2 al ´arbol que se obtiene desarrollando a partir de cada uno
de estos nuevos nodos un ´arbol de refutaci´on completo para R (que existe
por la hip´otesis inductiva). Como A2 se puede obtener haciendo un n´umero
ﬁnito de extensiones inmediatas a partir de P, es un ´arbol de refutaci´on de P.
Veamos que es completo. Si es cerrado, no hay nada que probar. Supongamos
entonces que S sea una rama abierta de A2, y sea S1 = S ∩A1. Sea X una
f´ormula de tipo A o B en S. Si X = P, entonces por la construcci´on de A2,
sus dos conclusiones Q y R est´an en S. Si X ̸= P y X ∈S1, entonces como

1.3. LA CONSECUENCIA L ´OGICA.
41
S1 \ {P} es una rama abierta de un ´arbol completo de Q, sus conclusiones
(si es de tipo A), o una de ellas (si es de tipo B) deben estar en S1 ⊆S. Si
X ∈S \ S1, se puede aplicar el mismo argumento, pues S \ S1 es una rama
abierta de un ´arbol de refutaci´on completo de R. Luego en cualquier caso S
es una rama completa de A2.
Supongamos ahora que P es de tipo B, y sean Q y R sus dos conclusiones.
Llamemos A al ´arbol que se obtine del siguiente modo: partiendo del nodo
inicial P, se agregan dos nodos terminales Q y R, y ´arboles completos con
origen en cada uno de estos nodos, que existen por la hip´otesis inductiva.
Como A se puede obtener de P haciendo un n´umero ﬁnito de extensiones
inmediatas, es un ´arbol de refutaci´on de P. Si es cerrado, entonces es com-
pleto. Supongamos que S es una rama abierta de A, y que X es una f´ormula
de tipo A o B que est´a en S. Si X = P, entonces por la construcci´on de A,
una de sus conclusiones est´a en S. Si X ̸= P, la demostraci´on se termina
observando que S \ {P} es una rama abierta de un ´arbol completo para Q o
de un ´arbol completo para R, c. q. d.
Lema 1.3.17 Si P es una f´ormula satisfacible, entonces todo ´arbol de refu-
taci´on de P tiene tiene al menos una rama abierta.
Demostraci´on: Sea P satisfacible, y probemos, por inducci´on en la altura,
que todo ´arbol de refutaci´on de P tiene por lo menos una rama satisfacible.
Si la altura del ´arbol es 0, entonces tiene un ´unico nodo y por lo tanto
una ´unica rama, formada por la f´ormula P, que es satisfacible.
Como hip´otesis inductiva, supongamos que todo ´arbol de refutaci´on de
P de altura n tiene por lo menos una rama satisfacible.
Sea A un ´arbol de refutaci´on de P de altura n + 1, y sea A′ el ´arbol que
se obtiene eliminando todos los nodos de nivel n+1 de A. Es claro que A′ es
un ´arbol de refutaci´on de P de altura n. Luego, por la hip´otesis inductiva,
A′ tiene por lo menos una rama abierta. Elijamos una, que llamaremos S.
Podr´ıa ser que S fuese tambi´en una rama de A, y en tal caso ya encon-
tramos una rama abierta de A.
En caso contrario, el nodo terminal N de S en A′ no ser´ıa un nodo
terminal de A, y habr´ıa dos posibilidades: o hay un ´unico nodo terminal N ′
de A que sigue a N, o hay una bifurcaci´on en dos nodos terminales de A, N ′
y N ′′.
En el primer caso, N ′ es una de las conclusiones de una f´ormula Q de tipo
A que pertenece a S. Como toda valuaci´on que satisface a Q debe satisfacer
a N ′, resulta que S ∪{N ′} es una rama satisfacible de A.

42
CHAPTER 1. C ´ALCULO PROPOSICIONAL
En el segundo caso, los nodos N ′ y N ′′ son las conclusiones de una f´ormula
R de tipo B perteneciente a S.
Como toda valuaci´on que satisface a R
tambi´en debe satisfacer a N ′ o a N ′′, resulta que por lo menos una de las dos
ramas de A, S ∪{N ′} o S ∪{N ′′} es satisfacible.
Vemos as´ı que A tiene una rama satisfacible, y como las ramas satisfaci-
bles no pueden ser cerradas, resulta que A tiene una rama abierta, c.q.d.
Toda rama abierta de un ´arbol de refutaci´on completo es saturada. La
importancia de los conjuntos saturados est´a dada por el siguiente:
Lema 1.3.18 Todo conjunto saturado de f´ormulas es satisfacible.
Demostraci´on:
Sea S un conjunto saturado de f´ormulas y deﬁnamos la
funci´on f: Var →B del modo siguiente, donde, como siempre, Var denota
el conjunto de las variables proposicionales:
f(pn) =
(
1
si
pn ∈S
0
si
pn ̸∈S
Si v = vf es la valuaci´on que extiende a f, vamos a ver que v(P) = 1 para
toda f´ormula P ∈S, lo que probar´a que S es satisfacible.
Haremos la demostraci´on por inducci´on en la longitud modiﬁcada.
Si P ∈S y long∗(P) = 1, entonces P es una variable proposicional,
digamos P = pn, y por la deﬁnici´on de V , v(P) = v(pn) = f(pn) = 1.
Si long∗(P) = 2, entonces P es la negaci´on de una variable proposicional,
digamos P = ¬pn. Como ¬pn ∈S, por (S0) resulta que pn ̸∈S, de donde
resulta que f(pn) = 0, y por consiguiente que v(P) = 1.
Supongamos ahora que long∗(P) ≥3, y que v(X) = 1 para toda f´ormula
X tal que X ∈S y long∗(X) < long∗(P).
Sabemos (Lema 1.3.15) que P es de tipo A o de tipo B. En el primer caso,
de la propiedad (S1) resulta que sus conclusiones est´an en S, y por la hip´otesis
inductiva, v les asigna el valor 1, lo que implica que tambi´en v(P) = 1. Si
P es de tipo B, de (S2) resulta que al menos una de sus conclusiones est´a
en S, y por la hip´otesis inductiva, v le asigna el valor 1, lo que implica que
v(P) = 1.
Luego v(P) = 1 para toda f´ormula P ∈S, c.q.d.
Observaci´on 1.3.19 En la demostraci´on del lema anterior s´olo se us´o el
caso particular siguiente de la propiedad (S0):

1.3. LA CONSECUENCIA L ´OGICA.
43
(S0p) Una variable proposicional y su negaci´on no pueden estar simult´aneamente
en S.
Luego se tiene que un conjunto S de f´ormulas es saturado si y s´olo si satis-
face las propiedades (S0p), (S1) y (S2). En efecto, todo conjunto saturado
satisface (S0p), que es un caso particular de (S0). Supongamos ahora que S
satisface (S0p), (S1) y (S2). Entonces por la demostraci´on del Lema 1.3.18
resulta que existe una valuaci´on v tal que v(P) = 1 para todo P ∈S, lo que
implica que S debe cumplir (S0).
Los lemas anteriores se pueden resumir en el siguiente teorema:
Teorema 1.3.20 Las siguientes propiedades son equivalentes para todo con-
junto ﬁnito y no vac´ıo S ⊆Form:
(i) S es satisfacible.
(ii) Todo ´arbol de refutaci´on de S tiene por lo menos una rama abierta.
(iii) Existe un ´arbol de refutaci´on de S completo con una rama abierta.
Demostraci´on: (i) implica (ii): Resulta del Lema 1.3.17.
(ii) implica (iii): Por el Lema 1.3.16 existe un ´arbol de refutaci´on de S
completo, y por la hip´otesis (ii) ´este debe tener por lo menos una rama
abierta.
(iii) implica (i): Sea A un ´arbol de refutaci´on completo de S. Una rama
abierta R de A constituye un conjunto saturado de f´ormulas, y por el Le-
ma 1.3.18, R es satisfacible. En particular, la f´ormula del nodo inicial de
A es satisfacible, esto es, la conjunci´on de las f´ormulas de S es satisfacible.
Luego, por la Observaci´on 1.3.7, resulta que S es satisfacible, c. q. d.
Corolario 1.3.21 Las siguientes propiedades son equivalentes para todo con-
junto ﬁnito y no vac´ıo S ⊆Form:
(i) S es insatisfacible.
(ii) S tiene un ´arbol de refutaci´on cerrado.
(iii) Todo ´arbol de refutaci´on completo de S es cerrado.
Corolario 1.3.22 Las siguientes propiedades son equivalentes para toda f´ormula
P:

44
CHAPTER 1. C ´ALCULO PROPOSICIONAL
(i) P es una tautolog´ıa.
(ii) ¬P tiene un ´arbol de refutaci´on cerrado.
(iii) Todo ´arbol de refutaci´on completo de ¬P es cerrado.
Los dos ´ultimos corolarios nos dan un m´etodo alternativo al de las tablas
de verdad para determinar si un conjunto ﬁnito es o no satisfacible o si una
f´ormula es o no una tautolog´ıa. M´as a´un, en caso de encontrar un ´arbol com-
pleto con una rama abierta, asignando a las variables proposicionales los va-
lores 0 y 1 de acuerdo con lo especiﬁcado en la demostraci´on del Lema 1.3.18
podemos deﬁnir una valuaci´on que satisface a S. Usamos este procedimiento
para encontrar una valuaci´on que satisface a la f´ormula dada por (1.12).
De las Observaciones 1.3.3 y 1.3.7 resulta que podemos dar la siguiente
caracterizaci´on de las consecuencias de un conjunto ﬁnito S de f´ormulas:
a) Si S = ∅, entonces P ∈Con(S) si y s´olo si la f´ormula ¬P tiene un ´arbol
de refutaci´on cerrado.
b) Si S = {Q1, . . . , Qn}, entonces P ∈Con(S) si y s´olo si la f´ormula Q1 ∧
. . . ∧Qn ∧¬P tiene un ´arbol de refutaci´on cerrado.
Estas observaciones sugieren dar la siguiente:
Deﬁnici´on 1.3.23 Una deducci´on de una f´ormula P a partir de un conjunto
de f´ormulas S es un ´arbol de refutaci´on cerrado de ¬P o de una conjunci´on
de ¬P con f´ormulas de S.
Una f´ormula P se dice deducible a partir de
S ⊆Form si existe una deducci´on de P a partir de S. El conjunto de las
f´ormulas deducibles a partir de S ⊆Form ser´a denotado por Ded(S).
Como los ´arboles de refutaci´on son objetos sint´acticos, esto es, con-
stru´ıdos a partir de f´ormulas siguiendo reglas en las que no intervienen
expl´ıcitamente los valores de verdad, la noci´on de deducci´on es tambi´en
puramente sint´actica.
Corresponde a la idea intuitiva de demostrar una
proposici´on a partir de ciertas hip´otesis utilizando reglas de inferencia. En
nuestro caso las reglas de inferencia son las de los ´arboles de refutaci´on, y
formalizamos la idea de demostrar “por reducci´on al absurdo”, habitual en
matem´atica.
Las condiciones a) y b) se˜naladas m´as arriba muestran que para todo
conjunto ﬁnito de f´ormulas S se tiene que Con(S) = Ded(S).

1.3. LA CONSECUENCIA L ´OGICA.
45
Luego, para los conjuntos ﬁnitos de f´ormulas hemos reducido la noci´on
sem´antica de consecuencia a la noci´on sint´actica de demostraci´on. Vamos a
ver ahora que esta reducci´on es tambi´en posible para conjuntos inﬁnitos.
Teorema 1.3.24 (Teorema de Compacidad) Sea S un conjunto inﬁnito
de f´ormulas. Si todo subconjunto ﬁnito de S es satisfacible, entonces S es
satisfacible.
Demostraci´on: Sea S = {Q0, Q1, . . . Qn, Qn+1, . . .} un conjunto inﬁnito de
f´ormulas, y supongamos que todo subconjunto ﬁnito de S es satisfacible. Sea
A0 un ´arbol de refutaci´on completo de Q0. Como {Q0} es un subconjunto
ﬁnito de S, A0 debe tener por lo menos una rama abierta. Sea A1 un ´arbol
completo obtenido a partir de agregar Q1 como nuevo nodo terminal a todas
las ramas abiertas de A0. Notemos que A1 es un ´arbol de refutaci´on del
subconjunto ﬁnito {Q0, Q1} ⊆S, luego tiene por lo menos una rama abierta.
Sea A2 un ´arbol completo obtenido a partir de agregar la f´ormula Q2 como
nuevo nodo terminal de cada rama abierta de A1. Entonces A2 es un ´arbol
de refutaci´on de {Q0, Q1, Q2}, y por lo tanto tiene ramas abiertas. Podemos
proseguir el procedimiento indicado para obtener una sucesi´on inﬁnita de
´arboles de refutaci´on completos A0, A1, A2, . . . An, An+1, . . ., de modo que
An+1 se obtiene completando el ´arbol constru´ıdo agregando la f´ormula Qn+1
como nuevo nodo terminal de cada una de las ramas abiertas de An . Como
An+1 es un ´arbol de refutaci´on del conjunto ﬁnito {Q0, Q1, . . . , Qn, Qn+1} ⊆
S, debe tener ramas abiertas y por lo tanto el procedimiento no se detiene.
Entonces A = S
n≥0 An es un ´arbol binario inﬁnito, y por el Lema de
K¨onig (ver Ap´endice) tiene una rama inﬁnita, que llamaremos R.
Para cada n, Rn = R∩An es una rama de An. Esta rama debe ser abierta,
pues de lo contrario no se hubiese prolongado a Rn+1. Como R =
S
n≥0 Rn,
resulta que R no es cerrada. Veamos que R es saturada. Supongamos que
una f´ormula Q de tipo A est´en R. Entonces Q ∈Rn para alg´un n. Como Rn
es una rama abierta de An, y este ´arbol es completo, Rn es saturada. Luego
ambas conclusiones de Q est´an en Rn ⊆R. Un argumento similar prueba
que si una f´ormula de tipo B est´a en R, entonces una de sus conclusiones
tambi´en lo est´a.
Como R es saturado, por el Lema 1.3.18, R es un conjunto satisfacible,
y como por la construcci´on de los ´arboles An, S ⊆R, resulta que tambi´en S
es satisfacible, c.q.d.

46
CHAPTER 1. C ´ALCULO PROPOSICIONAL
Corolario 1.3.25 Sea S un conjunto de f´ormulas. Una f´ormula P es con-
secuencia de S si y s´olo si P es consecuencia de un subconjunto ﬁnito de
S.
Demostraci´on: Como cualesquiera que sean los conjuntos de f´ormulas S y R
se tiene que S ⊆R implica que Con(S) ⊆Con(R), resulta que toda conse-
cuencia de un subconjunto ﬁnito de S es tambi´en consecuencia de S. Para
probar la rec´ıproca, sea P ∈Con(S). Por el Teorema 1.3.6, S ∪{¬P} es
insatisfacible, y por el Teorema de Compacidad, existe un subconjunto ﬁnito
F ⊆S ∪{¬P} tal que F es insatisfacible. Entonces G = F \{¬P} es un sub-
conjunto ﬁnito de S (eventualmente vac´ıo), y otra vez por el Teorema 1.3.6,
se tiene que P ∈Con(G) ⊆Con(S), c.q.d.
Observaci´on 1.3.26 En algunos textos se da el nombre de Teorema de
Compacidad al Corolario 1.3.25. En realidad, el Teorema 1.3.24 y el Coro-
lario 1.3.25 son equivalentes, en el sentido que uno se deduce del otro. En
efecto, ya vimos como el Corolario 1.3.25 se obtiene a partir del Teore-
ma 1.3.24.
Veamos ahora como se puede demostrar el Teorema 1.3.24 a
partir del Corolario 1.3.25. Para ello, supongamos cierto el enunciado del
Corolario 1.3.25 y sean S un conjunto de f´ormulas insatisfacible y P ∈S
(notemos que como S es insatisfacible, no puede ser vac´ıo).
Por el Teo-
rema 1.3.6, ¬P ∈Con(S \ {P}), y por el Corolario 1.3.25 existe un sub-
conjunto ﬁnito F ⊆S \ {P} tal que ¬P ∈Con(F). Luego, otra vez por
el Teorema 1.3.6, F ∪{¬¬P} es insatisfacible, y por lo tanto tambi´en lo es
F ∪{P}. Luego hemos encontrado un subconjunto ﬁnito de S que es insa-
tisfacible. Por lo tanto, si todo subconjunto ﬁnito de S es satisfacible, debe
ser S satisfacible.
Finalmente, podemos extender la equivalencia entre consecuencia y de-
ducibilidad a conjuntos arbitrarios de f´ormulas:
Corolario 1.3.27 Para todo conjunto S de f´ormulas,
Con(S) = Ded(S).
Concluiremos este cap´ıtulo con un ejemplo que ilustrar´a las aplicaciones del
Teorema de Compacidad y tambi´en como se pueden usar las ideas desarrolla-
das en el estudio del clculo proposicional en la consideraci´on de situaciones
concretas.
Comenzaremos por un lema sobre conjuntos parcialmente ordenados ﬁni-
tos, cuya demostraci´on no requiere de los m´etodos del c´alculo proposicional.

1.3. LA CONSECUENCIA L ´OGICA.
47
Lema 1.3.28 Toda relaci´on de orden parcial ≤sobre un conjunto ﬁnito A
se puede extender a una relaci´on de orden total ⪯sobre A. Esto es, existe
una relaci´on de orden total ⪯sobre A tal que para todo par de elementos x,
y de A, si x ≤y entonces x ⪯y.
Demostraci´on: Por induci´on en el n´umero n de elementos de A.
Si n = 1, no hay nada que probar.
Supongamos que hemos probado el lema para todo conjunto con n ele-
mentos, y supongamos que A tiene n + 1 elementos. Sea u ∈A. Entonces
B = A \ {u}, con el orden ≤heredado de A, es un conjunto parcialmente
ordenado con n elementos, y por la hip´otesis inductiva, existe una relaci´on
de orden total ⪯sobre B que extiende a ≤. Podemos numerar los elementos
de B de modo que x1 ≺x2 ≺. . . ≺xn.
Usando esta notaci´on vamos a extender el orden total ⪯a todo A del
modo siguiente:
Deﬁnimos
K = {i ∈{1, 2, . . . , n} | xi ≤u}
Si K = ∅, podemos agregar u como primer elemento, obteniendo el siguiente
orden total para A:
u ≺x1 ≺x2 ≺. . . ≺xn
Si K ̸= ∅, sea j el mayor elemento de K. Si j = n, agregamos u como ´ultimo
elemento, obteniendo el siguiente orden total sobre A:
x1 ≺x2 ≺. . . ≺xn ≺u
Si j es menor que n, colocamos u entre xj y xj+1, obteniendo:
x1 ≺x2 ≺. . . ≺xj ≺u ≺xj+1 ≺. . . ≺xn
En todos los casos, ⪯, extendido de la manera indicada, es un orden total
sobre A que extiende a ≤, c.q.d.
Como aplicaci´on del Teorema de Compacidad veremos que el lema ante-
rior vale tambi´en para ciertos conjuntos inﬁnitos.
Un conjunto A se dice numerable cuando existe una biyecci´on del conjunto
N sobre A3. Un conjunto A es numerable si y s´olo si se lo puede escribir en
3La existencia de conjuntos inﬁnitos no numerables (por ejemplo, el conjunto de los
n´umeros reales) fue un importante descubrimiento de G. Cantor hacia ﬁnes del siglo
pasado.

48
CHAPTER 1. C ´ALCULO PROPOSICIONAL
forma de una sucesi´on inﬁnita,
A = {a0, a1, . . . , an . . .} con am ̸= an si m ̸= n.
(1.14)
En efecto, si f: N →A es una biyecci´on, para escribir A en la forma (1.14)
basta poner an = f(n) para todo n ∈N. Rec´ıprocamente, si A est´a en la
forma (1.14), la funci´on f: N →A deﬁnida por f(n) = an es una biyecci´on.
Es f´acil veriﬁcar que la funci´on ψ: N × N →N deﬁnida por
ψ((m, n)) = 2m(2n + 1) −1
es una biyecci´on. Luego su inversa ϕ = ψ−1: N →N × N es tambi´en una
biyecci´on, y por lo tanto el producto cartesiano N × N es numerable.
Teorema 1.3.29 Toda relaci´on de orden parcial ≤sobre un conjunto nu-
merable A se puede extender a una relaci´on de orden total sobre A.
Demostraci´on: Como A es numerable, puede ser escrito en la forma (1.14).
Con cada par de elementos am, an de A, vamos a asociar la variable proposi-
cional qm,n = pψ((m,n)), donde ψ es la biyecci´on de N×N en N deﬁnida antes
de enunciar este teorema. Intuitivamente, vamos a interpretar qm,n como el
enunciado “el elemento am es menor o igual que el elemento an”.
Sea S el conjunto formado por las siguientes f´ormulas:
(i) qn,n, para todo n ∈N,
(ii) ¬(qm,n ∧qn,m), para m ̸= n,
(iii) (qm,n ∧qn,r) →qm,r, para todo m, n y r en N,
(iv) qm,n ∨qn,m, para todo m y n en N,
(v) qm,n, para todo m y n tales que am ≤an.
Para probar el teorema, basta probar que el conjunto S es satisfacible.
En efecto, sea v una valuaci´on que satisface a S y deﬁnamos una relaci´on
binaria ⪯sobre A del siguiente modo:
am ⪯an si y s´olo si v(qm,n) = 1
(1.15)
Las f´ormulas de tipo (i), (ii) y (iii) grantizan que ⪯es reﬂexiva, antisim´etrica
y transitiva, esto es, un orden parcial, y las de tipo (iv) que este orden es

1.3. LA CONSECUENCIA L ´OGICA.
49
total. Finalmente, las f´ormulas de tipo (v) aseguran que am ≤an implica
que am ⪯an.
Probaremos, entonces, que S es satisfacible.
Sea F un subconjunto ﬁnito de S, y sea B el subconjunto ﬁnito de A for-
mado por los elementos de A cuyo sub´ındice ﬁgura en alguna de las f´ormulas
de F. Por ejemplo, si q3,5 est´a en F, entonces a3 y a5 deben estar en B.
El conjunto ﬁnito B est´a parcialmente ordenado por la relaci´on ≤heredada
de A, y por el Lema 1.3.28, se puede extender a un orden total ⪯sobre B.
Deﬁnamos la funci´on f: Var →B por:
f(qm,n) =
(
1
si qm,n ∈S y am ⪯an
0
en caso contrario
Es f´acil veriﬁcar que la valuaci´on vf satisface a F.
Luego todo subconjunto ﬁnito de S es satisfacible, y por el Teorema de
Compacidad, es S satisfacible, c.q.d.

50
CHAPTER 1. C ´ALCULO PROPOSICIONAL
1.4
Ap´endice: ´arboles y lema de K¨onig.
Llamaremos ´arbol a un conjunto parcialmente ordenado A con primer ele-
mento a0 y tal que para todo a ∈A, el conjunto de los antecesores de a, esto
es {x ∈A | x < a}, es ﬁnito y totalmente ordenado (con el orden heredado
de A).
Para cada a ∈A deﬁnimos el nivel de a, que denotaremos por niv(a),
como el n´umero de antecesores de a. Observemos que niv(a0) = 0, puesto
que el primer elemento no tiene antecesores.
Diremos que a es un antecesor inmediato de b, y que b es un sucesor
inmediato de a, en el caso en que a < b y no existe c ∈A tal que a < c < b.
Observemos que en un ´arbol todo elemento distinto del primero tiene un
´unico antecesor inmediato, pero que en cambio no hay restricciones sobre el
n´umero de sucesores inmediatos.
Notemos que si b es un sucesor inmediato de a se tiene que niv(b) =
niv(a) + 1, pero en general esta igualdad no implica que b sea un sucesor
inmediato de a.
Un elemento a ∈A se dice terminal si no tiene sucesores, simple si tiene
un ´unico sucesor inmediato, y un punto de ramiﬁcaci´on si tiene m´as de un
sucesor inmediato.
Un ´arbol se dice ﬁnitamente generado si todo elemento tiene un n´umero
ﬁnito de sucesores inmediatos (considerando que los puntos terminales tienen
0 sucesores inmediatos).
Un ´arbol se dice ﬁnito si tiene un n´umero ﬁnito de elementos.
Se veriﬁca f´acilmente que el conjunto N de los n´umeros naturales con
su orden natural es un ejemplo de un ´arbol ﬁnitamente generado que no es
ﬁnito.
Intuitivamente, el n´umero niv(a) mide “la distancia” del elemento a al
origen a0. Por eso resulta natural deﬁnirla altura del ´arbol A, que indicaremos
alt(A), como el supremo de los niveles de los elementos de A:
alt(A) = sup{niv(a) | a ∈A}
Como niv(a) es un n´umero natural para cada a ∈A, resulta que alt(A) =
k < ∞si y s´olo si existe un b ∈A tal que niv(b) = k y niv(a) ≤k para todo
a ∈A, y resulta que alt(A) = ∞si y s´olo si para todo n´umero natural n
existe an ∈A tal que niv(an) = n.
Es claro que todo ´arbol ﬁnito tiene altura ﬁnita. El conjunto cuyos el-
ementos son el conjunto vac´ıo y los subconjuntos unitarios de N (es decir,

1.4. AP´ENDICE: ´ARBOLES Y LEMA DE K ¨ONIG.
51
los conjuntos cuyo ´unico elemento es un n´umero natural), ordenado por in-
clusi´on, es un ejemplo de un ´arbol inﬁnito de altura ﬁnita (m´as precisamente,
de altura uno).
La demostraci´on del lema siguiente es muy f´acil, y la dejamos a cargo del
lector:
Lema 1.4.1 Todo ´arbol ﬁnitamente generado y de altura ﬁnita es ﬁnito.
Una rama de un ´arbol A es un subconjunto totalmente ordenado maximal
de A, esto es, una rama de A es un subconjunto R ⊆A que satisface estas
dos propiedades:
(R1) R es totalmente ordenado con el orden heredado de A,
(R2) Si S es tal que R ⊂S ⊆A, entonces S no es totalmente ordenado con
el orden heredado de A.
Si a es un elemento terminal de A, es claro que
Rm(a) = {x ∈A | x ≤a}
es una rama de A, que se llama la rama determinada por a.
No es dif´ıcil demostrar que todas las ramas de un ´arbol ﬁnito A est´an
determinadas por un elemento terminal de A.
Si A es un ´arbol inﬁnito, entonces sus ramas inﬁnitas son los subconjuntos
{ao, a1, . . . , an, . . .} ⊆A tales que an < an+1 y niv(a) = n para todo n ∈N.
El lema siguiente es un resultado cl´asico de la teor´ıa de ´arboles, que
usamos para probar el Teorema de Compacidad del C´alculo Proposicional.
Lema 1.4.2 (D. K¨onig, 1926) Todo ´arbol inﬁnito y ﬁnitamente generado
tiene al menos una rama inﬁnita.
Demostraci´on: Sea A un ´arbol ﬁnitamente generado pero con inﬁnitos ele-
mentos. Diremos que un elemento de A es bueno si tiene inﬁnitos sucesores,
y que es malo en caso contrario. Como A es inﬁnito, el primer elemento a0
es bueno. Observemos ahora que todo elemento bueno debe tener al menos
un sucesor inmediato bueno. En efecto, como cada elemento tiene s´olo un
n´umero ﬁnito de sucesores inmediatos, si todos ellos fuesen malos el n´umero
total de sucesores ser´ıa ﬁnito, y el elemento no podr´ıa ser bueno. Por lo tanto,

52
CHAPTER 1. C ´ALCULO PROPOSICIONAL
como a0 es bueno, debe tener por lo menos un sucesor inmediato bueno. Eli-
jamos uno, y llam´emoslo a1. Como a1 es bueno, debe tener por lo menos
un sucesor inmediato bueno. Elijamos uno, y llam´emoslo a2. Continuando
en esta forma deﬁniremos una sucesi´on inﬁnita de elementos de A tal que
an < an+1 y niv(an) = n para todo n ∈N, c. q. d.
Observaci´on 1.4.3 El hecho de que A sea ﬁnitamente generado es esen-
cial para la validez del Lema de K¨onig, como lo muestra el ejemplo de los
subconjuntos unitarios de N ya mencionado.

Chapter 2
C´alculo de predicados
2.1
Vocabularios
El alfabeto b´asico de todo lenguaje de primer orden consta de los siguientes
tipos de s´ımbolos, que se denominan s´ımbolos l´ogicos:
• Variables: v0, v1, . . . , vn, . . .. Como en el caso proposicional, vn es una
abreviatura del s´ımbolo v seguido de n barras |.
• Conectivos proposicionales: ∨, ∧, →, ¬.
• Cuantiﬁcadores: ∀(cuantiﬁcador universal) y ∃(cuantiﬁcador existen-
cial).
• S´ımbolos auxiliares:(, ).
Adem´as de los s´ımbolos l´ogicos, el alfabeto espec´ıﬁco de cada lenguaje de
primer orden contiene:
• S´ımbolos de constantes. Indicaremos con C al conjunto de los s´ımbolos
de constante. Puede ser C = ∅.
• S´ımbolos de funciones n-arias (o de n variables). Para cada n ≥1,
indicaremos con Fn al conjunto de los s´ımbolos de funciones n-arias, y
F :=
S
n≥1 Fn. Pude ser F = ∅.
• S´ımbolos de predicados n-arios. Para cada n ≥1, indicaremos con Pn
al conjunto de los s´ımbolos de predicados n-arios, y P :=
S
n≥1 Pn. Se
exige que P ̸= ∅, esto es, que haya al menos un s´ımbolo de predicado.
53

54
CHAPTER 2. C ´ALCULO DE PREDICADOS
Los s´ımbolos de constante, de funciones y de predicados forman el voca-
bulario de un lenguaje de primer orden.
Como los s´ımbolos l´ogicos son comunes a todos los lenguajes de primer
orden, un lenguaje de primer orden queda determinado por su vocabulario,
que simbolizaremos ⟨C, F, P⟩.
2.2
T´erminos y f´ormulas
Recordemos una vez m´as que el alfabeto de un lenguaje de primer orden est´a
formado por los s´ımbolos l´ogicos y el vocabulario.
Deﬁnici´on 2.2.1 Una lista de s´ımbolos del alfabeto A de un lenguaje de
primer orden es un t´ermino si y s´olo si se la puede obtener aplicando un
n´umero ﬁnito de veces las siguientes reglas:
(T1) Las variables son t´erminos.
(T2) Los s´ımbolos de constante son t´erminos.
(T3) Si t1, ..., tn son t´erminos y f es un s´ımbolo de funci´on n-aria, entonces
f(t1 . . . tn) es un t´ermino.
Como en la deﬁnici´on de f´ormulas proposicionales, para precisar el sig-
niﬁcado de “aplicar un n´umero ﬁnito de veces las reglas (T1), (T2) y (T3)”
introduciremos la siguiente:
Deﬁnici´on 2.2.2 Una cadena de formaci´on de t´erminos es una sucesi´on
ﬁnita t1, . . . , tn de elementos de A∗que satisface las siguientes condiciones:
(CFT) Para cada i tal que 1 ≤i ≤n, se tiene que o bien ti es una variable o
un s´ımbolo de constante, o bien existen un s´ımbolo de funci´on k-aria
f y k ´ındices i1, . . . , ik, todos estrictamente menores que i, tales que
t = f(ti1 . . . tik).
El n´umero n ≥1 se llama la longitud de la cadena de formaci´on.
La Deﬁnici´on 2.2.1 puede expresarse ahora en la siguiente forma:
Una lista t de s´ımbolos del alfabeto de un lenguaje de primer orden es un
t´ermino si y s´olo si existe una cadena de formaci´on de t´erminos t1, . . . , tn tal
que t = tn.

2.2. T´ERMINOS Y F ´ORMULAS
55
Llamaremos grado de complejidad de un t´ermino t, y lo denotaremos por
comp(t), al n´umero de s´ımbolos de funci´on que ﬁguran en la expresi´on t,
contados tanta veces como aparezcan.
Observemos que comp(t) = 0 si y s´olo si t es una variable o una constante,
y que si t = f(t1 . . . tk), donde f es un s´ımbolo de funci´on k-aria y los ti son
t´erminos, entonces
comp(t) = comp(t1) + · · · + comp(tk) + 1.
(2.1)
Con los t´erminos y los s´ımbolos de predicados podemos construir los
elementos b´asicos de nuestro lenguaje, que llamaremos f´ormulas at´omicas:
Deﬁnici´on 2.2.3 Una f´ormula at´omica de un lenguaje de primer orden con
vocabulario ⟨C, F, P⟩es una lista de s´ımbolos de la forma P(t1 . . . tk), donde
P es un s´ımbolo de predicado k-ario y t1, . . . , tk son t´erminos.
Estamos ahora en condiciones de deﬁnir las f´ormulas, que a su vez nos
permitir´an deﬁnir los enunciados de primer orden, que son el objetivo fun-
damental de nuestro estudio.
Deﬁnici´on 2.2.4 Una lista de s´ımbolos del alfabeto de un lenguaje de primer
orden con vocabulario ⟨C, F, P⟩es una f´ormula si y s´olo si se la puede obtener
aplicando un n´umero ﬁnito de veces las siguientes reglas:
(F1) Las f´ormulas at´omicas son f´ormulas.
(F2) Si ϕ es una f´ormula, tambi´en lo es ¬ϕ.
(F3) Si ϕ y ψ son f´ormulas, tambi´en lo son las expresiones (ϕ ∨ψ), (ϕ ∧ψ)
y (ϕ →ψ).
(F4) Si ϕ es una f´ormula y x denota una variable, entonces ∀xϕ y ∃xϕ son
f´ormulas.
Dejamos al cuidado del lector precisar la deﬁnici´on anterior, deﬁniendo,
por analog´ıa con los casos de f´ormulas proposicionales y de t´erminos, la
noci´on de cadena de formaci´on de f´ormulas.
Llamaremos grado de complejidad de una f´ormula ϕ, y lo denotaremos
por comp(ϕ), al n´umero de conectivos y cuantiﬁcadores que ﬁguran en ϕ,
contados tantas veces como aparezcan.

56
CHAPTER 2. C ´ALCULO DE PREDICADOS
Observemos que
comp(ϕ) = 0 si y s´olo si ϕ es una f´ormula at´omica.
(2.2)
comp(¬ϕ) = comp(ϕ) + 1.
(2.3)
comp(ϕ ∨ψ) = comp(ϕ ∧ψ) = comp(ϕ →ψ) =
(2.4)
comp(ϕ) + com(ψ) + 1.
comp(∀xϕ) = comp(∃xϕ) = comp(ϕ) + 1.
(2.5)
Para poder deﬁnir los enunciados de un lenguaje de primer orden, necesi-
tamos introducir los conceptos apariciones libres y ligadas de una variable en
una f´ormula. Intuitivamente, una variable x aparece ligada en una f´ormula
ϕ si est´a afectada por un cuantiﬁcador ∀x o ∃x. En caso contrario, se dice
que aparece libre en ϕ. Por ejemplo, si P y Q son s´ımbolos de predicado
binario y ϕ es la f´ormula
∀xP(x, y) →∃yQ(x, y),
tanto la primera como la segunda aparici´on de x en ϕ son ligadas, mientras
que la tercera es libre. En cambio, la primera aparici´on de y es libre, mientras
que la segunda y tercera son ligadas. La deﬁnici´on precisa de apariciones
libres y ligadas de una variable en una f´ormula se hace por induccin del
modo siguiente:
Deﬁnici´on 2.2.5 Si ϕ es una f´ormula at´omica, entonces hay un ´unico k ≥
1, un ´unico P ∈Pk y una ´unica k-upla de t´erminos t1, . . . , tk tales que
ϕ = P(t1 . . . tk). Las variables que ﬁguran en ϕ son las que ﬁguran en alguno
de los t´erminos ti, i = 1, . . . , k. Todas las apariciones de todas las variables
que aparecen en ϕ son libres.
Sea ahora ϕ una f´ormula tal que comp(ϕ) > 0 y supongamos que hemos
deﬁnido las apariciones libres de variables en toda f´ormula ψ tal que comp(ψ) <
comp(ϕ). Entonces deﬁniremos las apariciones libres de variables en ϕ de
acuerdo a los casos posibles, a saber:
1. ϕ = ¬ψ. Las apariciones libres de una variable en ϕ son las apariciones
libres de esta variable en ψ.
2. ϕ = ψ ∨η, ´o ϕ = ψ ∧η ´o ϕ = ψ →η. Las apariciones libres de una
variable en ϕ son las apariciones libres de esta variable en ψ y en η.

2.2. T´ERMINOS Y F ´ORMULAS
57
3. ϕ = ∀xψ o ϕ = ∃xψ. Todas las apariciones de la variable x en ϕ son
ligadas. Para toda variable y distinta de x, las apariciones libres de y
en ϕ son las apariciones libres de y en ψ.
Deﬁnici´on 2.2.6 Un enunciado de un lenguaje de primer orden es una
f´ormula en la que no ﬁguran variables libres.
Si ϕ es una f´ormula en la que ﬁguran libres las variables x1, . . . , xk, en-
tonces ∀x1 · · · ∀xkϕ y ∃x1 · · · ∃xkϕ son enunciados, que se llaman la clausura
universal de ϕ y la clausura existencial de ϕ, respectivamente.
A continuaci´on veremos otro procedimiento para obtener enunciados a
partir de f´ormulas.
Sean s y t t´erminos de un lenguaje L, y sea x una variable. Con t(x/s)
designamos al t´ermino que se obtiene sustituyendo todas las apariciones de
la variable x en t por s. M´as precisamente, t(x/s) se deﬁne por inducci´on en
la complejidad de t del modo siguiente:
1. comp(t) = 0. Entonces t es una constante o una variable. Si t ̸= x,
entonces t(x/s) = t. Si t = x, entonces t(x/s) = s.
2. Sea n > 0 y supongamos que hemos deﬁnido u(x/s) para todo t´ermino
u tal que comp(u) < n. Sea comp(t) = n. Entonces hay un ´unico
k ≥1, un ´unico f ∈Fk y una ´unica k-upla de t´erminos t1, . . . , tk tales
que t = f(t1 . . . tk). Como comp(ti) < comp(t) = n, por la hip´otesis
inductiva hemos deﬁnido ti(x/s) para i = 1, 2, . . . , k. Entonces
t(x/s) = f(t1(x/s) . . . tk(x/s)).
Vamos ahora a deﬁnir la sustituci´on de una variable por un t´ermino en
una f´ormula.
Supongamos que ϕ = ∀v1P(v1v2) y s = f(c), donde P ∈P2, f ∈F1 y
c ∈C.
Si sustitu´ımos las apariciones de v1 por s en ϕ, obtenemos la expresi´on
∀f(c)P(f(c)v2), que no es una f´ormula, puesto que el cuantiﬁcador univer-
sal aparece aplicado a un s´ımbolo de funci´on, mientras que la deﬁnici´on de
f´ormula permite aplicar los cuantiﬁcadores s´olo a variables. Esto indica que
debemos restringir la sustituci´on ´unicamente a variables que ﬁguren libres en
una f´ormula.

58
CHAPTER 2. C ´ALCULO DE PREDICADOS
Por otro lado, si ϕ es como antes, pero hacemos s = v1, al sustituir la
variable libre v2 por s obtenemos ∀v1P(v1v1). Esta expresi´on es una f´ormula,
pero intuitivamente vemos que tiene un sentido distinto de la original, pues
estamos sustituyendo la variable libre v2 por la variable v1, que aparece afec-
tada por el cuantiﬁcador universal.
Para evitar estos problemas nos restringiremos a sustituir variables libres
por t´erminos sin variables.
Sean ϕ una f´ormula, x una variable y t un t´ermino sin variables de un
lenguaje L. Con ϕ(x/t) indicamos la expresi´on que se obtiene sustituyendo
todas las apariciones libres de x en ϕ por t. M´as precisamente, podemos
deﬁnir ϕ(x/t) por inducci´on en la complejidad de ϕ del modo siguiente:
Sea comp(ϕ) = 0. Entonces hay un ´unico k ≥1, un ´unico P ∈Pk y una
´unica k-upla de t´erminos t1, . . . , tk tales que ϕ = P(t1 . . . tk). Deﬁnimos
ϕ(x/t) = P(t1(x/t) . . . tk(x/t)).
Sea n > 0 y supongamos que hemos deﬁnido ψ(x/t) para toda f´ormula ψ
tal que comp(ψ) < n. Sea comp(ϕ) = n. Deﬁniremos ϕ(x/t) de acuerdo a
los casos posibles, a saber:
1. ϕ = ¬ψ. Entonces ϕ(x/t) = ¬ψ(x/t).
2. ϕ = ψ∗η, donde ∗representa uno de los conectivos ∨, ∧´o →. Deﬁnimos
ϕ(x/t) = ψ(x/t) ∗η(x/t).
3. ϕ = Qyψ, donde Q denota uno de los cuantiﬁcadores ∀´o ∃. Si x = y,
deﬁnimos ϕ(x/t) = ϕ. Si x ̸= y, deﬁnimos ϕ(x/t) = Qyψ(x/t).
2.3
Interpretaci´on de lenguajes de primer or-
den
En lo que sigue supondremos que hemos ﬁjado un lenguaje de primer orden
L, determinado por el vocabulario ⟨C, F, P⟩.
Una interpretaci´on I del vocabulario ⟨C, F, P⟩consiste de los siguientes
elementos:
(I1) Un conjunto UI ̸= ∅, llamado el universo de la interpretaci´on I,

2.3. Interpretaci´on de lenguajes 1er. orden
59
(I2) Para cada s´ımbolo de constante c ∈C, un elemento cI ∈UI,
(I3) Para cada s´ımbolo de funci´on f ∈Fk, una funci´on fI de k variables
sobre el universo UI: fI: U k
I →UI,
(I3) Para cada s´ımbolo de predicado P ∈Pk, una relaci´on k-aria PI sobre
el universo UI, esto es, un subconjunto PI del producto cartesiano
U k
I =
k veces
z
}|
{
UI × · · · × UI.
Luego una interpretaci´on I del vocabulario ⟨C, F, P⟩est´a determinada
por la estructura E(I) := ⟨UI, {cI}c∈C, {fI}f∈F, {PI}P∈P⟩, que se denomina
la estructura relacional determinada por I.
Dada una interpretaci´on I del vocabulario del lenguaje L, vamos a deﬁnir,
por inducci´on en el grado de complejidad, una interpretaci´on tI ∈UI para
los t´erminos t sin variables de L del modo siguiente:
1. Sea comp(t) = 0. Como en t no ﬁguran variables, debe ser t = c ∈C.
Deﬁnimos:
tI = cI ∈UI.
2. Sea n > 0 y supongamos que hemos deﬁnido sI para todo t´ermino sin
variables s de complejidad menor que n. Si t es un t´ermino sin variables
de complejidad n, entonces hay un ´unico k ≥1, un ´unico f ∈Fk y una
´unica k-upla de t´erminos (t1, . . . , tk) tales que t = f(t1 . . . tk). Como
comp(ti) < comp(t) = n, por la hip´otesis inductiva est´an deﬁnidas las
interpretaciones tiI ∈UI para i = 1, 2, . . . , k. Entonces deﬁnimos tI
del modo siguiente:
tI = fI(t1I, t2I . . . tkI) ∈UI.
Diremos que el t´ermino sin variables t designa o nombra al elemento tI
del universo UI.
La deﬁnici´on anterior nos da un procedimiento para calcular tI: reem-
plazar cada uno de los s´ımbolos de constante que ﬁguran en t por los el-
ementos del universo UI que les asigna la interpretaci´on I, e ir aplicando
sucesivamente a los elementos de UI as´ı obtenidos las funciones que I le

60
CHAPTER 2. C ´ALCULO DE PREDICADOS
asigna a los s´ımbolos de funci´on que ﬁguran en t, en el orden en que apare-
cen.
De este procedimiento para calcular tI resulta inmediatamente que:
Proposici´on 2.3.1 Sean I y J dos interpretaciones del vocabulario del len-
guaje L tales que UI = UJ . Si para un t´ermino sin variables t de L se tiene
que:
1. cI = cJ para todo s´ımbolo de constante c que ﬁgura en t, y
2. fI = fJ para todo s´ımbolo de funci´on f que ﬁgura en t
entonces:
tI = tJ .
En otras palabras, la interpretaci´on de un t´ermino sin variables t s´olo
depende de las interpretaciones de los s´ımbolos de constante y de funci´on
que ﬁguran en t. Esto suele expresarse diciendo que la interpretaci´on de los
t´erminos es una propiedad local.
Para interpretar los enunciados de L, comenzaremos por extender nuetro
lenguaje original L a un lenguaje L(I), que se obtiene agregando al vocabu-
lario de L el universo UI como un nuevo conjunto de constantes. Esto es, el
vocabulario de L(I) es ⟨C ∪UI, F, P⟩.
La interpretaci´on I se extiende a una interpretaci´on I′ del nuevo lenguaje
L(I) del modo siguiente:
1. UI′ = UI,
2. Para todo c ∈C, cI′ = cI,
3. Para todo f ∈F, fI′ = fI,
4. Para todo P ∈P, PI′ = PI, y
5. Para todo a ∈UI, aI′ = a.
Esto es, la interpretaci´on I′ tiene el mismo universo que I, y coincide con
I en todos los s´ımbolos del vocabulario de L, mientras que interpreta cada
elemento del universo por s´ı mismo.
El lenguaje extendido L(I) tiene t´erminos sin variables que no son t´erminos
de L. Por ejemplo, cada a ∈UI. Por otro lado, todo t´ermino sin variables t

2.3. Interpretaci´on de lenguajes 1er. orden
61
de L es tambi´en un t´ermino sin variables de L(I), y por la Proposici´on 2.3.1
resulta que
tI′ = tI.
(2.6)
An´alogamente, si bien hay enunciados de L(I) que no son enunciados de L,
es claro que todo enunciado de L es tambi´en un enunciado de L(I).
Vamos ahora a interpretar los enunciados de L(I) como proposiciones
acerca de la estructura relacional determinada por la interpretaci´on I, esto
es, como enunciados acerca de E(I) que pueden ser verdaderos o falsos. Por
lo tanto, la interpretaci´on consistir´a en asignarle un valor de verdad VI(ϕ) a
cada enunciado ϕ de L(I). En particular, le estaremos asignando un valor
de verdad a cada uno de los enunciados del lenguaje original L.
Como era de esperar, la asignaci´on de valores de verdad la haremos por
inducci´on en la complejidad de los enunciados.
Sea ϕ un enunciado de L(I) de complejidad 0. Entonces hay un ´unico
k ≥1, un ´unico P ∈Pk y una ´unica k-upla de t´erminos t1, . . . , tk tales que
ϕ = P(t1 . . . tk). Como ϕ no tiene variables libres, de la Deﬁnici´on 2.2.5
resulta que los ti deben ser t´erminos sin variables del lenguaje L(I), y por lo
tanto designan elementos tI′ del universo UI′ = UI, para i = 1, . . . , k. Luego
(t1I′, . . . , tkI′) ∈Uk
I. Deﬁnimos VI(ϕ) = 1 si (t1I′, . . . , tkI′) ∈PI y VI(ϕ) = 0
si (t1I′, . . . , tkI′) ̸∈PI.
Sea n > 0 y supongamos que hemos deﬁnido VI(ψ) para todo enunciado
ψ de L(I) tal que comp(ψ) < n. Si ϕ es un enunciado de complejidad n, se
puede presentar uno, y s´olo uno, de los siguientes casos:
1. Existe un ´unico enunciado ψ de L(I) tal que ϕ = ¬ψ.
2. Existe un ´unico par de enunciados ψ, η de L(I) tal que ϕ = (ψ ∨η).
3. Existe un ´unico par de enunciados ψ, η de L(I) tal que ϕ = (ψ ∧η).
4. Existe un ´unico par de enunciados ψ, η de L(I) tal que ϕ =
(ψ →η).
5. Existe un ´unico enunciado ψ de L(I) y una ´unica variable x tal que
ϕ = ∀xψ.
6. Existe un ´unico enunciado ψ de L(I) y una ´unica variable x tal que
ϕ = ∃xψ.

62
CHAPTER 2. C ´ALCULO DE PREDICADOS
Como en los casos 1, 2, 3 y 4 se tiene que comp(ψ) < n y comp(η) < n, por
la hip´otesis inductiva est´an deﬁnidos los valores de verdad VI(ψ) y VI(η).
En el caso 1, deﬁnimos VI(ϕ) := 1 −VI(ψ).
En el caso 2, deﬁnimos VI(ϕ) := max(VI(ψ), VI(η)).
En el caso 3, deﬁnimos VI(ϕ) := min(VI(ψ), VI(η)).
En el caso 4, deﬁnimos VI(ϕ) := max(1 −VI(ψ), VI(η)).
Para considerar los casos 5 y 6, observemos primero que como ϕ es un
enunciado, esto es, no tiene variables libres, de la Deﬁnici´on 2.2.5 resulta que
la f´ormula ψ puede tener a lo sumo a x como variable libre. Por lo tanto,
para para cualquier elemento a ∈UI se tiene que ψ(x/a) es un enunciado de
L(I) y comp(ψ(x/a)) = comp(ψ) < n. Luego por la hip´otesis inductiva est´a
deﬁnido VI(ψ(x/a)) para todo a ∈UI.
En el caso 5 deﬁnimos
VI(ϕ) := inf{VI(ψ(x/a))}a∈UI.
(2.7)
Esto es, VI(ϕ) = 1 si y s´olo si VI(ψ(x/a)) = 1 para todo elemento a ∈UI.
En el caso 6, deﬁnimos
VI(ϕ) := sup{VI(ψ(x/a))}a∈UI.
(2.8)
Esto es, VI(ϕ) = 1 si y s´olo si existe al menos un elemento a ∈UI tal que
VI(ψ(x/a)) = 1.
Esto completa la deﬁnici´on inductiva de VI(ϕ).
Insistimos que, en particular, est´a deﬁnido el valor de verdad VI(ϕ) para
todo enunciado ϕ del lenguaje original L. M´as a´un, se ve que la necesidad de
considerar el lenguaje extendido L(I) aparece s´olo al considerar los casos 5 y
6. En estos dos casos debemos hacer referencia a los elementos del universo
de la interpretaci´on, y para ello necesitamos un lenguaje que nos permita
mencionarlos.
La siguiente proposici´on se deduce f´acilmente de la Proposici´on 2.3.1 y
de la deﬁnici´on inductiva de los valores de verdad de los enunciados.
Proposici´on 2.3.2 Sean I y J dos interpretaciones del vocabulario del len-
guaje L tales que UI = UJ . Si para un enunciado ϕ de L se tiene que:
1. cI = cJ para todo s´ımbolo de constante c que ﬁgura en ϕ,
2. fI = fJ para todo s´ımbolo de funci´on f que ﬁgura en ϕ, y

2.3. Interpretaci´on de lenguajes 1er. orden
63
3. PI = PJ para todo s´ımbolo de predicado P que ﬁgura en ϕ,
entonces:
VI(ϕ) = VJ (ϕ).
Dado un enunciado ϕ del lenguaje L, indicaremos con Cϕ, Fϕ y Pϕ re-
spectivamente a los conjuntos de s´ımbolos de constante, de funci´on y de
predicado que ﬁguran en la expresi´on de ϕ. Obtenemos as´ı un vocabulario
ﬁnito ⟨Cϕ, Fϕ, Pϕ⟩, que determina un “sublenguaje” de L, que denotaremos
por Lϕ.
La Proposici´on 2.3.2 signiﬁca que los valores de verdad de ϕ dependen
s´olo de las interpretaciones del vocabulario restringido ⟨Cϕ, Fϕ, Pϕ⟩. Por eso
se dice que el valor de verdad de un enunciado es una propiedad local.
Ya hemos observado que una forma de obtener enunciados es sustituir las
variables libres de una f´ormula ϕ por t´erminos sin variables del lenguaje L.
Cuando consideramos una interpretaci´on I de L, podemos tambi´en sustituir
las variables libres de ϕ por los elementos del universo UI que designan
dichos t´erminos, obteniendo as´ı un enunciado del lenguaje ampliado L(I).
El siguiente lema nos dice que no hay ambig¨uedad, pues I les asigna a ambos
enunciados el mismo valor de verdad.
Lema 2.3.3 Si ϕ es una f´ormula de L con una variable libre, que denotare-
mos por x y si t es un t´ermino sin variables de L, entonces ϕ(x/t) es un
enunciado de L y para toda interpretaci´on I se tiene que
VI(ϕ(x/t)) = VI(ϕ(x/t)).
(2.9)
Demostraci´on: A lo largo de esta demostraci´on, I denotar´a una interpretaci´on
del lenguaje L, y t un t´ermino sin variables de L.
Sea s un t´ermino del lenguaje ampliado L(I) con a lo sumo una variable,
que denotaremos por x. Entonces s(x/t) es un t´ermino sin variables de L(I),
y por lo tanto designa al elemento s(x/t)I ∈UI. Por otro lado, t designa
al elemento tI, y la sustituci´on s(x/tI) tambi´en designa un elemento del
universo UI. Comenzaremos por veriﬁcar, por inducci´on en la complejidad
de s, que:
s(x/t)I′ = s(x/tI)I′
(2.10)
En efecto, sea comp(s) = 0. Si s ̸= x, entonces s(x/t) = s = s(x/tI), y
la igualdad (2.10) resulta trivialmente.
Si s = x, entonces s(x/t) = t y

64
CHAPTER 2. C ´ALCULO DE PREDICADOS
s(x/tI) = tI. Como por la condici´on 5 en la deﬁnici´on de I′ se tiene que
tI = (tI)I′, la igualdad (2.10) resulta de (2.6).
Sea n > 0 y supongamos que (2.10) se cumple para todos los t´erminos
de L(I) de complejidad menor que n.
Si comp(s) = n, entonces existen
un ´unico k ≥1, un ´unico f ∈Fk y una ´unica k-upla de t´erminos de L(I),
(s1, . . . , sk), tales que s = f(s1, . . . , sk). Por la hip´otesis inductiva se tiene
que s(x/t)I′ = s(x/tI)I′ para i = 1, . . . , k. Luego por la condici´on 3 en la
deﬁnici´on de I′ resulta que
s(x/t)I′ = fI(s1(x/t)I′, . . . , sk(x/t)I′) =
fI′(s1(x/tI)I′, . . . , sk(x/tI)I′) = s(x/tI)I′,
lo que completa la demostraci´on de (2.10).
Supongamos ahora que ϕ es una f´ormula del lenguaje ampliado L(I) con
una ´unica variable libre x. Probaremos la igualdad (2.9) por inducci´on en la
complejidad de ϕ.
Supongamos primero que ϕ es una f´ormula at´omica, digamos ϕ = P(s1 . . . sk),
con P ∈Pr y s1, . . . , sr t´erminos de L(I). Como x es la ´unica variable li-
bre de ϕ, x es la ´unica variable que puede ﬁgurar en los t´erminos s1, . . . , sr.
Luego ϕ(x/t) = P(s1(x/t), . . . , sr(x/t)) es un enunciado, y se tiene que
VI(ϕ(x/t)) = 1 si y s´olo si (s1(x/t)I′, . . . , sr(x/t)I′) ∈PI.
(2.11)
Por otra parte, tenemos que:
VI(ϕ(x/tI)) = 1 si y s´olo si
(2.12)
(s1(x/tI)I′, . . . , sr(x/tI)I′) ∈PI.
Ahora por la igualdad (2.10) se tiene que
(s1(x/t)I′, . . . , sr(x/t)I′) = (s1(x/tI)I′, . . . , sr(x/tI)I′).
(2.13)
Como s´olo hay dos posibles valores de verdad, de (2.11), (2.12) y (2.13)
resulta que VI(ϕ(x/t)) = VI(ϕ(x/tI)). Hemos probado as´ı el lema para las
f´ormulas de complejidad cero.
Sea ahora comp(ϕ) = n > 0 y supongamos que hemos probado que
VI(ψ(x/t)) = VI(ϕ(x/tI)), para toda f´ormula ψ de L(I) con x como ´unica
variable libre y comp(ψ) < n.

2.3. Interpretaci´on de lenguajes 1er. orden
65
Si ϕ = ¬ψ ´o ϕ = ψ∗η, con ∗= ∨, ∧´o →, entonces teniendo en cuenta los
casos 1, 2, 3 y 4 de la deﬁnici´on de asignaci´on de valores verdad y la hip´otesis
inductiva, se obtiene inmediatamente que VI(ϕ(x/t)) = VI(ϕ(x/tI)).
Supongamos que ϕ = ∀y ψ. Como x es variable libre de ϕ, debemos tener
que x ̸= y y que x ﬁgura como variable libre en ψ. Luego ϕ(x/t) = ∀y ψ(x/t),
y se tiene que
VI(ϕ(x/t)) = 1 si y s´olo si
(2.14)
VI(ψ(x/t)(y/a)) = 1 para todo a ∈UI.
La notaci´on ψ(x/t)(y/a) signiﬁca que en la f´ormula ψ(x/t) hemos sustitu´ıdo
las apariciones libres de y por a. En otras palabras, que hemos sustitu´ıdo
primero las apariciones libres de x en ψ por t, y luego las apariciones libres
de y por a. Como x ̸= y, y t es un t´ermino sin variables de L, es claro
que podemos cambiar el orden en que efectuamos las sustituciones (y a´un
efectuarlas simult´aneamente). Por lo tanto tenemos que:
ψ(x/t)(y/a) = ψ(y/a)(x/t).
De esta igualdad y (2.14)obtenemos que
VI(ϕ(x/t)) = 1 si y s´olo si
(2.15)
VI(ψ(y/a)(x/t)) = 1 para todo a ∈UI.
Con argumentos similares podemos ahora probar que
VI(ϕ(x/tI)) = 1 si y s´olo si
(2.16)
VI(ψ(y/a))(x/tI)) = 1 para todo a ∈UI.
Ahora bien, ψ(y/a) es una f´ormula de L(I), con x como ´unica variable libre
y comp(ψ(y/a)) < n. Por la hip´otesis inductiva tenemos entonces que:
VI(ψ(y/a)(x/t)) = ψ(y/a)(x/tI), para todo a ∈UI.
(2.17)
De (2.15), (2.16) y (2.17) se deduce que
VI(ϕ(x/t)) = VI(ϕ(x/tI)).
Para completar la demostraci´on falta considerar el caso en que ϕ = ∃y ψ.
Pero como ´este se trata en forma enteramente an´aloga al del cuantiﬁcador
universal, lo dejamos al cuidado del lector.

66
CHAPTER 2. C ´ALCULO DE PREDICADOS
Finalizaremos esta secci´on introduciendo los conceptos de satisfabilidad,
verdad l´ogica, equivalencia y consecuencia, en forma an´aloga a lo hecho al
estudiar el c´alculo proposicional.
Sea ϕ un enunciado de un lenguaje de primer orden L. Diremos que una
interpretaci´on I satisface a ϕ, o que I es un modelo de ϕ, si VI(ϕ) = 1.
Diremos que ϕ es satisfacible si tiene al menos un modelo, y que es insa-
tisfacible en caso contrario.
Esto es, ϕ es satisfacible si hay al menos una interpretaci´on I de L tal
que VI(ϕ) = 1, y ϕ es insatisfacible si se tiene que VI(ϕ) = 0 cualquiera que
sea la interpretaci´on I de L.
Las deﬁniciones anteriores se extienden a conjuntos de enunciados:
Si H es un conjunto de enunciados de L, diremos que una interpretaci´on
I es un modelo de H, o que I satisface a H, si I satisface a todo enunciado
de H.
Un conjunto de enunciados H es satisfacible si tiene al menos un modelo,
e insatisfacible en caso contrario.
Diremos que un enunciado ϕ es universalmente v´alido o una verdad l´ogica
si VI(ϕ) = 1 para toda interpretaci´on I de L.
La noci´on de universalmente verdadero es an´aloga a la noci´on de tau-
tolog´ıa en el c´alculo proposicional, y se relaciona de la misma manera con la
noci´on de insatisfabilidad. En efecto, se tiene que un enunciado es univer-
salmente v´alido si y s´olo si su negaci´on es insatisfacible.
Diremos que dos enunciados ϕ y ψ son l´ogicamente equivalentes, y es-
cribiremos ϕ ≡ψ, si tienen exactamente los mismos modelos, es decir si
VI(ϕ) = VI(ψ) cualquiera que sea la interpretaci´on I de L.
Se veriﬁca inmediatamente que ϕ ≡ψ si y s´olo si los enunciados ϕ →ψ
y ψ →ϕ son ambos universalmente v´alidos.
Finalmente, diremos que un enunciado ϕ es una consecuencia de un con-
junto H de enunciados, y escribiremos H |= ϕ ´o ϕ ∈Con(H), si todo modelo
de H es tambi´en modelo de ϕ, esto es, si para toda interpretaci´on I se tiene
que VI(ψ)) = 1 para todo ψ ∈H implica que VI(ϕ) = 1.
La relaci´on entre consecuencia y satisfabilidad es la misma que en el caso
proposicional:
Proposici´on 2.3.4 Sea H un conjunto de enunciados de un lenguaje de
primer orden L.
Para todo enunciado ϕ de L se tiene que H |= ϕ si y
s´olo si el conjunto H ∪{¬ϕ} es insatisfacible.

2.4. ARBOLES DE REFUTACI ´ON.
67
Como en el caso proposicional, de lo anterior resulta que los enunciados
universalmente v´alidos son las consecuencias del conjunto vac´ıo.
2.4
Arboles de Refutaci´on.
Nos proponemos ahora extender el m´etodo de los ´arboles de refutaci´on del
c´alculo proposicional al c´alculo de predicados, para obtener criterios sint´acticos
de insatisfabilidad y consecuencia para enunciados de primer orden.
Continuaremos suponiendo que hemos ﬁjado un lenguaje de primer orden
L, determinado por el vocabulario ⟨C, F, P⟩.
Con R¬, R∨, R¬∨, R∧, R¬∧, R→y R¬→indicaremos a los mismos es-
quemas vistos al estudiar el c´alculo proposicional, con la diferencia que las
f´ormulas proposicionales P y Q que ﬁguran en las premisas y conclusiones
de los mismos deben ser reemplazadas por enunciados ϕ y ψ del lenguaje L.
Teniendo en cuenta los casos 1, 2, 3 y 4 considerados en la deﬁnici´on
inductiva de los valores de verdad VI correspondientes a una interpretaci´on
I de L, se ve que el Lema 1.3.9 sigue valiendo para enunciados de primer
orden. M´as precisamente, se tiene que:
Lema 2.4.1 Para toda interpretaci´on I del lenguaje de primer orden L se
tiene que:
(i) I satisface la premisa de una de las reglas R¬, R¬∨, R∧, o R¬→si y
s´olo si I satisface sus conclusiones.
(ii) I satisface la premisa de una de las reglas R∨, R∧o R→si y s´olo si I
satisface al menos una de sus conclusiones.
Debemos examinar ahora el comportamiento de los cuantiﬁcadores con
respecto a la satisfacibilidad.
Lema 2.4.2 Sea ϕ una f´ormula de L con una ´unica variable libre, que deno-
taremos por x. Para todo conjunto satisfacible H de enunciados del lenguaje
L se tiene que:
1. Si ∀x ϕ ∈H, entonces el conjunto que se obtiene agregando a H todos
los enunciados de la forma ϕ(x/t), para todo t´ermino sin variables t de
L, contin´ua siendo satisfacible.

68
CHAPTER 2. C ´ALCULO DE PREDICADOS
2. Si ∃xϕ ∈H, entonces el conjunto que se obtiene agregando a H un
enunciado de la forma ϕ(x/c), donde c denota una constante del voca-
bulario de L que no ﬁgure en ninguno de los enunciados de H, contin´ua
siendo satisfacible.
3. Si ¬∀xϕ ∈H, entonces el conjunto que se obtiene agregando a H un
enunciado de la forma ¬ϕ(x/c), donde c denota una constante del
vocabulario de L que no ﬁgure en ninguno de los enunciados de H,
contin´ua siendo satisfacible.
4. Si ¬∃xϕ ∈H, entonces el conjunto que se obtiene agregando a H todos
los enunciados de la forma ¬ϕ(x/t), para todo t´ermino sin variables t
de L, contin´ua siendo satisfacible.
Demostraci´on: A lo largo de esta demostraci´on supondremos que I es una
interpretaci´on del lenguaje L que satisface a todos los enunciados del conjunto
H (tal interpretaci´on existe, puesto que por hip´oteis H es satisfacible).
Si ∀x ϕ ∈H, entonces VI(∀x ϕ) = ⊤, y por el caso 5 de la deﬁnici´on
de la asignaci´on VI de valores de verdad, resulta que VI(ϕ(x/a)) = ⊤para
todo a ∈UI. Luego como para todo t´ermino sin variables t de L, tI designa
un elemento de UI, se tiene que ϕ(x/tI) = ⊤, y por el Lema 2.3.3 resulta
entonces que VI(ϕ(x/t)) = ⊤para todo t´ermino sin variables t de L, lo que
prueba el item 1.
Si ∃x ϕ ∈H, entonces VI(∃x ϕ) = ⊤, y por el caso 6 de la deﬁnici´on de la
asignaci´on VI de valores de verdad, resulta que VI(ϕ(x/a)) = ⊤para alg´un
a ∈UI. Supongamos que c ∈C y que c no ﬁgura en ning´un enunciado de H.
Consideremos una nueva interpretaci´on J de L deﬁnida del siguiente modo:
UJ = UI,
PJ = PI, para todo P ∈P,
fJ = fI, para todo f ∈F,
dJ = dI, para todo d ∈F, d ̸= c, y
cJ = a.
Como la ´unica diferencia que puede existir entre las interpretaciones I y
J es en el elemento del universo que designa el s´ımbolo de constante c,
por el Lema 2.3.2 tenemos que J satisface al conjunto H.
Adem´as, por

2.4. ARBOLES DE REFUTACI ´ON.
69
el Lema 2.3.3, VJ (ϕ(x/c)) = VJ (ϕ(x/a)) y, otra vez por el Lema 2.3.3,
VJ (ϕ(x/a)) = VI(ϕ(x/a)) = ⊤, lo que completa la demostraci´on del item 2.
Las demostraciones de los items 3 y 4 son an´alogas a los de los items 2 y
1, respectivamente, por lo que las dejamos al cuidado del lector.
El lema precedente sugiere introducir las siguientes reglas:
R∀
∀x ϕ
ϕ(x/t) donde t es cualquier t´ermino sin variables.
R¬∀
¬∀x ϕ
¬ϕ(x/c) donde c es una constante con restricciones.
R∃
∃x ϕ
ϕ(x/c) donde c es una constante con restricciones.
R¬∃
¬∃x ϕ
¬ϕ(x/t) donde t es cualquier t´ermino sin variables.
El agregado “con restricciones” que ﬁgura en las reglas R¬∀y R∃recuerda
que el s´ımbolo de constante c no puede ser elegido arbitrariamente.
En los esquemas anteriores, los s´ımbolos de constante del lenguaje L
juegan un papel importante, y se vuelven inaplicables si C = ∅. Esto nos
lleva a considerar una ampliaci´on del lenguaje L por el agregado de nuevos
s´ımbolos de constante, que llamaremos par´ametros. M´as precisamente:
Deﬁnici´on 2.4.3 Si ⟨C, F, P⟩es el vocabulario de L, indicaremos con LPar
al lenguaje determinado por el vocabulario ⟨C′, F, P⟩, con
C′ = C ∪{a0, a1, . . . , an, . . .},
donde a0, . . . an . . . son s´ımbolos que no ﬁguran en el vocabulario de L. Estos
nuevos s´ımbolos de constante se denominan par´ametros.
Obviamente, todo enunciado ϕ de L es tambi´en un enunciado de LPar, y
del Lema 2.3.2 resulta que ϕ es satisfacible como enunciado de L si y s´olo si
lo es como enunciado de LPar. Por lo tanto para considerar problemas de sat-
isfabilidad podemos siempre operar en el lenguaje LPar, que por construcci´on
tiene inﬁnitos s´ımbolos de constante, y volver luego al lenguaje original L.
Usaremos este principio para deﬁnir los ´arboles de refutaci´on para enun-
ciados de un lenguaje de primer orden.

70
CHAPTER 2. C ´ALCULO DE PREDICADOS
Deﬁnici´on 2.4.4 Sea A un ´arbol cuyos nodos son enunciados del lenguaje
LPar. Un ´arbol A′ se dice una extensi´on inmediata de A si A′ se obtiene de
una de las siguientes maneras, donde τ representa un nodo terminal de A:
1. Si τ tiene como antecesor un enunciado de la forma de la premisa de una
de las reglas R¬, R¬∨, R∧, o R¬→, se agrega una de las conclusiones
de esa regla como sucesor inmediato de τ.
2. Si τ tiene como antecesor un enunciado de la forma de la premisa de
una de las reglas R∨, R∧o R→, se agregan las dos conclusiones de esta
regla como dos sucesores inmediatos de τ.
3. Si τ tiene como antecesor un enunciado de la forma ∀x ϕ, se agrega
como sucesor inmediato de τ un enunciado de la forma ϕ(x/t), donde
t es un t´ermino sin variables del lenguaje LPar.
4. Si τ tiene como antecesor un enunciado de la forma ¬∀x ϕ, se agrega
como sucesor inmediato de τ un enunciado de la forma ¬ϕ(x/a), donde
a es un par´ametro que no ﬁgura en ninguno de los enunciados de A.
5. Si τ tiene como antecesor un enunciado de la forma ∃x ϕ, se agrega
como sucesor inmediato de τ un enunciado de la forma ϕ(x/a), donde
a es un par´ametro que no ﬁgura en ninguno de los enunciados de A.
6. Si τ tiene como antecesor un enunciado de la forma ¬∃x ϕ, se agrega
como sucesor inmediato de τ un enunciado de la forma ¬ϕ(x/t), donde
t es un t´ermino sin variables del lenguaje LPar.
En los casos 3, 4, 5 y 6 de la deﬁnici´on anterior, se dice que el ´arbol A se ha
extendido por aplicaci´on de las reglas R∀, R¬∀, R∃y R¬∃, respectivamente.
Deﬁnici´on 2.4.5 Un ´arbol de enunciados del lenguaje LPar es un ´arbol de
refutaci´on de un enunciado ϕ del lenguaje L si y s´olo si se lo obtiene haciendo
un n´umero ﬁnito de extensiones inmediatas a partir del ´arbol cuyo ´unico nodo
es el enunciado ϕ.M´as precisamente, A es un ´arbol de refutaci´on de ϕ si y
s´olo si existe una sucesi´on ﬁnita A0, A1, . . . An de ´arboles de enunciados de
LPar que satisface las siguientes condiciones:
1. A0 tiene por ´unico nodo al enunciado ϕ,
2. Ai es una extensi´on inmediata de Ai−1, para i = 1, . . . , n, y

2.5. EXISTENCIA DE MODELOS
71
3. A = An.
Un ´arbol de refutaci´on de un conjunto ﬁnito S de enunciados de L es un ´arbol
de refutaci´on de la conjunci´on de los enunciados de S.
Los siguientes conceptos son an´alogos a los vistos al estudiar ´arboles de
refutaci´on para el c´alculo proposicional:
Una rama de un ´arbol de enunciados se dice cerrada si contiene a la vez
a un enunciado y a su negaci´on. En caso contrario, la rama se dice abierta.
Un ´arbol se dice cerrado si todas sus ramas son cerradas.
Teorema 2.4.6 Sea S = {ϕ1, . . . , ϕn} un conjunto ﬁnito y no vac´ıo de enun-
ciados de un lenguaje de primer orden L. Si S origina un ´arbol de refutaci´on
cerrado, entonces S es insatisfacible.
Demostraci´on: Los Lemas 2.4.1 y 2.4.2 junto con las Deﬁniciones 2.4.4 y 2.4.5,
nos permiten utilizar argumentos similares a los usados en la demostraci´on
del Lema 1.3.17 para concluir que si S fuese satisfacible, entonces todo ´arbol
de refutaci´on de S deber´ıa tener al menos una rama satisfacible, y, por lo
tanto, abierta. Por consiguiente, si S tiene un ´arbol de refutaci´on cerrado,
entonces S no puede ser satisfacible.
Corolario 2.4.7 Sea ϕ un enunciado de un lenguaje de primer orden L.
Si ¬ϕ origina un ´arbol de refutaci´on cerrado, entonces ϕ es universalmente
v´alido.
Corolario 2.4.8 Sean ϕ1, . . . , ϕn, ψ enunciados de un lenguaje de primer
orden L. Si el conjunto {ϕ1, . . . , ϕn, ¬ψ} origina un ´arbol de refutaci´on cer-
rado, entonces ψ es una consecuencia del conjunto {ϕ1, . . . , ϕn}.
El Teorema 2.4.6 y sus corolarios nos dan los criterios sint´acticos para
satisfabilidad y consecuencia que mencionamos al iniciar esta secci´on.
2.5
Existencia de modelos
Ahora nos proponemos probar la rec´ıproca del Teorema 2.4.6: si todo ´arbol
de refutaci´on de un enunciado ϕ tiene una rama abierta, entonces ϕ es satis-
facible.
Imitando lo hecho en el caso del c´alculo proposicional, comenzaremos
deﬁniendo conjuntos saturados de enunciados.

72
CHAPTER 2. C ´ALCULO DE PREDICADOS
Deﬁnici´on 2.5.1 Sea L un lenguaje de primer orden con al menos un s´ımbolo
de constante. Un conjunto H de enunciados de L se dice saturado o un con-
junto de Hintikka si y s´olo si satisface las siguientes condiciones:
(S0) Un enunciado y su negaci´on no pueden pertenecer simult´aneamente a
H.
(S1) Si un enunciado de la forma de la premisa de una de las reglas R¬,
R¬∨, R∧, o R¬→pertenece a H, entonces sus conclusiones tambi´en
pertenecen a H.
(S2) Si un un enunciado de la forma de la premisa de una de las reglas R∨,
R∧o R→pertenece a H, entonces al menos una de sus conclusiones
pertenece a H.
(S3) Si un enunciado de la forma ∀x ϕ pertenece a H, entonces para todo
t´ermino sin variables del lenguaje L, ϕ(x/t) ∈H.
(S4) Si un enunciado de la forma ¬∀x ϕ pertenece a H, entonces ¬ϕ(x/c) ∈
H, para alg´un s´ımbolo de constante c del lenguaje L.
(S5) Si un enunciado de la forma ∃x ϕ est´a en H, entonces ϕ(x/c) ∈H, para
alg´un s´ımbolo de constante c del lenguaje L.
(S6) Si un enunciado de la forma ¬∃x ϕ pertenece a H, entonces para todo
t´ermino sin variables del lenguaje L, ¬ϕ(x/t) ∈H.
Teorema 2.5.2 Sea L un lenguaje de primer orden determinado por el voca-
bulario ⟨C, F, P⟩, con C ̸= ∅. Entonces todo conjunto saturado de enunciados
de L es satisfacible.
Demostraci´on: Sea H un conjunto saturado de enunciados de L. Vamos a
deﬁnir una interpretaci´on I de L del modo siguiente:
• El universo UI de I es el conjunto de los t´erminos sin variables de L.
• Para cada c ∈C, cI = c.
• Sea f ∈Fk. Como para cada k-upla (t1, . . . , tk) de elementos de UI,
f(t1 . . . tk) ∈UI, interpretamos f por la funci´on fI: U k
I →UI deﬁnida
por:
fI(t1, . . . , tk) = f(t1 . . . tk), para toda (t1, . . . , tk) ∈U k
I.

2.5. EXISTENCIA DE MODELOS
73
• Sea P ∈Pk. Entonces interpretamos P por la relaci´on k-aria PI sobre
UI deﬁnida por:
PI = {(t1, . . . , tk) ∈U k
I | P(t1 . . . tk) ∈H}.
Es muy f´acil veriﬁcar, por inducci´on en la complejidad, que:
Para todo t´ermino sin variables t de L, tI = t.
(2.18)
Probaremos ahora, por inducci´on en la complejidad, que para todo enun-
ciado ϕ ∈H, se tiene que VI(ϕ) = ⊤.
Supongamos primero que ϕ es un enunciado at´omico, digamos ϕ = P(t1 . . . tk),
con P ∈Pk y t1, . . . , tk t´erminos sin variables de L. Entonces VI(ϕ) = ⊤
si y s´olo si (t1, . . . , tk) ∈PI. Pero por la deﬁnici´on de la interpretaci´on I,
(t1, . . . , tk) ∈PI si y s´olo si ϕ = P(t1 . . . tk) ∈H. Esto prueba que VI(ϕ) = ⊤
para todo enunciado at´omico ϕ ∈H.
Sea n > 0 y supongamos que hemos probado que I satisface a todos los
enunciados de H de complejidad menor que n. Sea ϕ ∈H, y comp(ϕ) = n.
Si ϕ = (ψ ∨η), entonces por la propiedad (S2) de los conjuntos saturados
se tiene que ψ ∈S ´o η ∈S. Podemos suponer, sin perder generalidad, que
ψ ∈S. Como comp(ψ) < comp(ϕ), por la hip´otesis inductiva tenemos que
VI(ψ) = ⊤, de donde resulta que tambi´en VI(ϕ) = ⊤.
Los casos ϕ = (ψ ∧η) y ϕ = (ψ →η) se tratan de manera an´aloga.
Si ϕ = ∀x ψ, entonces por (S3), ψ(x/t) ∈S para todo t´ermino sin variables
t de L. Luego, la hip´otesis inductiva, VI(ψ(x/t) = ⊤para todo t ∈UI. Esto
signiﬁca que VI(ϕ) = ⊤.
Si ϕ = ∃x ψ, entonces por (S4) hay una constante c de L tal que ψ(x/c) ∈
S. Por la hip´otesis inductiva, VI(ψ(x/c) = ⊤, y como c ∈UI, resulta que
VI(ϕ) = ⊤.
Queda por considerar el caso en que ϕ = ¬ψ. Procedamos por inducci´on
en la complejidad de ψ.
Si comp(ψ) = 0, entonces ψ = P(t1 . . . tk), para alg´un k ≥1, alg´un
P ∈Pk y t´erminos sin variables t1, . . . , tk. Como ϕ = ¬ψ ∈S, por (S0)
resulta que P(t1 . . . tk) ̸∈S. Luego, por la deﬁnici´on de la relaci´on PI, se
tiene que (t1, . . . , tk) ̸∈PI. Por lo tanto VI(ψ) = ⊥y VI(ϕ) = ⊤.
Los distintos casos que pueden presentarse cuando comp(ψ) > 0, se
tratan utilizando las propiedades (S1), (S2), (S4)y (S6), en forma entera-
mente an´aloga a los casos analizados anteriormente, por lo que los dejamos
a cargo del lector.

74
CHAPTER 2. C ´ALCULO DE PREDICADOS
El universo de la interpretaci´on I considerada en la demostraci´on del
teorema anterior, esto es, el conjunto formado por los t´erminos sin variables,
se denomina el universo de Herbrand del lenguaje L.
Del teorema anterior resulta que si un enunciado ϕ origina un ´arbol de
refutaci´on con una rama saturada, entonces ϕ es satisfacible, y adem´as pode-
mos construir un modelo de ϕ a partir de dicha rama.
Luego, por analog´ıa con lo hecho al considerar el c´alculo proposicional,
diremos que un ´arbol de refutaci´on de un enunciado de primer orden es
completo cuando es cerrado o tiene una rama saturada.
Pero ahora se nos presenta una diﬁcultad esencial: hay enunciados de
primer orden que son satisfacibles pero que no admiten modelos ﬁnitos (es
decir, interpretaciones con universos ﬁnitos), como lo muestra el siguiente:
Ejemplo 2.5.3 Sea L un lenguaje de primer orden determinado por el vo-
cabulario C = F = ∅y P = P2 = {P}. Sea ϕ la conjunci´on de los enunciados
∀v0 ¬P(v0, v0),
∀v0∀v1∀v2((P(v0, v1) ∧P(v1, v2)) →P(v0, v2)), y
∀v0∃v1P(v0, v1).
El enunciado ϕ es satisfacible: para obtener un modelo, basta interpretar
el s´ımbolo de predicado binario P como la relaci´on de mayor estricto sobre
los n´umeros naturales. Pero es f´acil veriﬁcar que ninguna relaci´on binaria
sobre un conjunto ﬁnito (y no vac´ıo) puede satisfacer simult´aneamente las
tres condiciones que deﬁnen ϕ.
Luego, teniendo en cuenta el Teorema 2.4.6, podemos concluir que todo
´arbol de refutaci´on originado en ϕ tiene ramas abiertas, pero estas ramas no
pueden ser saturadas.
Este ejemplo muestra que, a diferencia de lo visto en el c´alculo proposi-
cional, en general no podremos completar el ´arbol de refutaci´on de un enun-
ciado satisfacible en un n ´mero ﬁnito de pasos.
Luego puede ocurrir que tengamos una sucesi´on inﬁnita
A0, A1, . . . , An, . . .
de ´arboles con ramas abiertas, de modo que A0 es el ´arbol que tiene por
´unico nodo a ϕ, y cada An+1 se obtiene extendiendo las ramas abiertas de

2.5. EXISTENCIA DE MODELOS
75
ϕ
|
(∀v0 ¬P(v0, v0)) ∧(∀v0∀v1∀v2((P(v0, v1) ∧P(v1, v2)) →P(v0, v2)))
|
∀v0 ¬P(v0, v0)
|
∀v0∀v1∀v2((P(v0, v1) ∧P(v1, v2)) →P(v0, v2))
|
∀v0∃v1P(v0, v1).
Figure 2.1: A4
An por aplicaci´on de las reglas de formaci´on de ´arboles un n´umero ﬁnito de
veces. Una sucesi´on con estas propiedades se dir´a una sucesi´on encajada de
´arboles de refutaci´on de ϕ.
Podemos considerar entonces el ´arbol inﬁnito A∞=
S
n∈N An. Por el
Lema de K¨onig (Lema 1.4.2), A∞debe tener una rama inﬁnita, digamos R.
Pero, a diferencia de lo visto en la demostraci´on del Teorema 1.3.24, ahora no
podemos asegurar que los enunciados que ﬁguran en R formen un conjunto
saturado.
Ejemplo 2.5.4 Sea ϕ como en el Ejemplo 2.5.3. Por aplicaci´on de la regla
R∧obtenemos el ´arbol A4, indicado en la Figura 2.1.
Este ´arbol A4 puede ser continuado indeﬁnidamente aplicando alternada-
mente las reglas R∀y R∃a su nodo terminal
∀v0∃v1P(v0, v1).
Obtenemos as´ıla sucesi´on inﬁnita de ´arboles A4+2k, indicados en la Figura 2.2,
k = 1, 2, . . ..
El ´arbol inﬁnito A∞= S
k≥1 A4+2k tiene una ´unica rama inﬁnita, que no
constituye un conjunto saturado de enunciados: por ejemplo, ∀v0 ¬P(v0, v0)
ﬁgura en la rama, pero no ﬁgura ¬P(a0, a0). Luego no se cumple la propiedad
(S3).
Como las ramas inﬁnitas no son necesariamente completas, tambi´en se
puede dar el caso de que un enunciado insatisfacible genere una sucesi´on

76
CHAPTER 2. C ´ALCULO DE PREDICADOS
ϕ
|
(∀v0 ¬P(v0, v0)) ∧(∀v0∀v1∀v2((P(v0, v1) ∧P(v1, v2)) →P(v0, v2)))
|
∀v0 ¬P(v0, v0)
|
∀v0∀v1∀v2((P(v0, v1) ∧P(v1, v2)) →P(v0, v2))
|
∀v0∃v1P(v0, v1)
|
∃v1P(a0, v1)
|
P(a0, a1)
|
∃v1P(a1, v1)
|
P(a1, a2)
|
...
|
∃v1P(ak−1, v1)
|
P(ak−1, ak)
Figure 2.2: A4+2k

2.5. EXISTENCIA DE MODELOS
77
¬(P(c) →∃v0 P(v0))
|
P(c)
|
¬∃v0 P(v0)
¬P(c)
Figure 2.3: ´Arbol cerrado de ¬(P(c) →∃v0 P(v0))
encajada de ´arboles de refutaci´on. En otras palabras, un enunciado insa-
tisfacible puede originar un ´arbol que no se cierra en un n´umero ﬁnito de
pasos.
Ejemplo 2.5.5 Sea L el lenguaje de primer orden determinado por el voca-
bulario C = {c}, F = F1 = {f} y P = P1 = {P}. El enunciado
ψ = ¬(P(c) →∃v0 P(v0))
es insatisfacible. En efecto, la Figura 2.3 muestra un ´arbol de refutaci´on
cerrado originado en ψ. Por otro lado, la Figura 2.4 muestra el elemento
gen´erico B2+k de una sucesi´on encajada de ´arboles de refutaci´on de ψ.
Los ejemplos anteriores muestran que la existencia de una sucesi´on enca-
jada de ´arboles de refutaci´on de un enunciado ϕ no nos permite concluir nada
sobre la satisfabilidad de ϕ. Del examen de esos ejemplos surge tambi´en que
esta situaci´on se debe a que las reglas R∀y R¬∃se pueden aplicar de una
manera correcta pero parcial, produciendo conjuntos inﬁnitos no saturados.
Para subsanar esta diﬁcultad debemos dise˜nar un procedimiento que nos
asegure que la aplicaci´on de las reglas se hace teniendo en cuenta todas las
posibilidades, de modo que o bien se obtenga un ´arbol cerrado (en un n´umero
ﬁnito de pasos) o bien una sucesi´on encajada que determine un conjunto
saturado. Hay varios procedimientos posibles. A continuaci´on describiremos
uno de ellos.
Sea ϕ un enunciado de un lenguaje de primer orden. Entonces el voca-
bulario del sublenguaje Lϕ (ver p´agina 63) tiene un n´umero ﬁnito, digamos
m > 0, de s´ımbolos. Podemos hacer entonces una lista com m + 8 s´ımbolos,

78
CHAPTER 2. C ´ALCULO DE PREDICADOS
¬(P(c) →∃v0 P(v0))
|
P(c)
|
¬∃v0 P(v0)
|
¬P(f(c))
|
...
|
¬P(f k(c))
Figure 2.4: B2+k
comenzando por los conectivos, cuantiﬁcadores y par´entesis:
∨, ∧, →, ¬, ∀, ∃, (, )
y colocando a continuaci´on los s´ımbolos que hubiere en Cϕ, luego los de
Fϕ y ﬁnalmente los de Pϕ. El orden en que colocamos los elementos del
vocabulario de Lϕ es arbitrario, pero supondremos que hemos elegido uno,
que llamaremos el orden alfab´etico.
De este modo, a cada uno de estos
s´ımbolos le corresponde un n´umero de orden, entre 9 y m.
Podemos ahora extender nuestra lista, agregando alternativamente varia-
bles y par´ametros:
v0, a0, v1, a1, . . .
A la variable v0 le corresponder´as´ı el n´umero de orden 8+m+1, al par´ametro
a0, 8 + m + 2, y en general, a vn le asignaremos el n´umero 8 + m + 2n + 1, y
a an el n´umero 8 + m + 2n + 2.
Podemos ahora asignar un n´umero de orden a cada uno de los t´erminos
sin variables del lenguaje Lϕ.
Para cada n > 0, sea Dn el conjunto de todos los enunciados del lenguaje
LPar
ϕ
que se escriben con a lo sumo n s´ımbolos con n´umero de orden a lo sumo
n (cada variable vk y cada par´ametro ak se cuenta como un ´unico s´ımbolo).
Cada conjunto Dn es ﬁnito, y si Dn ̸= ∅, entonces puede ser totalmente
ordenado por el siguiente criterio: si el n´umero de s´ımbolos de ψ es menor

2.5. EXISTENCIA DE MODELOS
79
que el de η, entonces ψ antecede a η. Si tienen el mismo n´umero de s´ımbolos,
entonces usamos el orden alfab´etico.
Ahora podemos listar todos los enunciados de LPar
ϕ
, escribiendo todos los
enunciados que ﬁguran en Dn+1 a continuaci´on de los de Dn. Obtenemos as´ı
una sucesi´on
ψ0, ψ1, . . . , ψk, ψk+1, . . .
(2.19)
donde ψ0 es el primer elemento del primer conjunto Dn ̸= ∅.
Como obviamente Dn ⊆Dn+1, obtenemos que en esta sucesi´on, cada enun-
ciado de LPar
ϕ
aparece repetido inﬁnitas veces. Esta propiedad es esencial para
nuestro prop´osito.
Procediendo en forma similar, podemos obtener una sucesi´on
t0, t1, . . . , tk, tk+1, . . .
(2.20)
donde ﬁguren todos los t´erminos sin variables de LPar
ϕ
, repetidos inﬁnitas
veces (aunque esta repetici´on inﬁnita no tendr´a especial inter´es).
Vamos a describir ahora un procedimiento inductivo para obtener una
sucesi´on
E0, E1, . . . , En, . . .
de ´arboles de refutaci´on de ϕ, que llamaremos sucesi´on especial.
E0 es el ´arbol que tiene por ´unico nodo al enunciado ϕ.
Supongamos ahora que hemos constru´ıdo el ´arbol En.
Sea ψn el n-´esimo enunciado de la sucesi´on (2.19). Si ψn no ﬁgura en
ninguna rama abierta de En, entonces ponemos En+1 = En. En caso contrario,
se puede presentar uno, y s´olo uno, de los casos siguientes:
1. ψn es una f´ormula at´omica o negaci´on de una f´ormula at´omica.
2. ψn es de la forma de la premisa de unas de las reglas R¬, R¬∨, R∧, ´o
R¬→.
3. ψn es de la forma de la premisa de unas de las reglas R∨, R¬∧, ´o R→.
4. ψn es de la forma ∀x η.
5. ψn es de la forma ¬∀x η.
6. ψn es de la forma ∃x η.
7. ψn es de la forma ¬∃x η.

80
CHAPTER 2. C ´ALCULO DE PREDICADOS
En el caso 1, ponemos En+1 = En.
En el caso 2, En+1 es el ´arbol que se obtiene agregando a todas las ramas
abiertas de En donde ﬁgure ψn su conclusi´on (en el caso de R¬), o sucesiva-
mente sus dos conclusiones (en los casos R∧y R¬→).
En el caso 3, En+1 es el ´arbol que se obtiene agregando a todas las ramas
abiertas de En donde ﬁgure ψn sus conclusiones, como dos nuevos nodos
terminales.
En el caso 4, En+1 es el ´arbol que se obtiene agregando a todas las ramas
abiertas de En donde ﬁgure ψn sucesivamente los enunciados η(x/t0), η(x/t1), . . . , η(x/tn),
donde ti es el i-´esimo t´ermino de la sucesi´on (2.20).
En el caso 5, En+1 es el ´arbol que se obtiene agregando a todas las ramas
abiertas de En donde ﬁgure ψn el enunciado ¬η(x/ar), donde ar es el primer
par´ametro que no ﬁgura en En.
En el caso 6, En+1 es el ´arbol que se obtiene agregando a todas las ramas
abiertas de En donde ﬁgure ψn el enunciado η(x/ar), donde ar es el primer
par´ametro que no ﬁgura en En.
Finalmente, en el caso 7, En+1 es el ´arbol que se obtiene agregando a
todas las ramas abiertas de En donde ﬁgure ψn sucesivamente los enuncia-
dos ¬η(x/t0), ¬η(x/t1), . . . , ¬η(x/tn), donde ti es el i-´esimo t´ermino de la
sucesi´on (2.20).
Esto completa la deﬁnici´on de En+1.
Observemos que si En es cerrado, entonces Em = En para todo m ≥n.
Pero la rec´ıproca no es verdadera, como lo muestra el siguiente:
Ejemplo 2.5.6 Sea L el lenguaje de primer orden determinado por el voca-
bulario C = {c}, F = ∅y P = P1 = {P}, y sea ϕ el enunciado at´omico P(c).
Se veriﬁca f´acilmente que En = E0 para todo ´arbol especial En originado en
ϕ.
El siguiente lema justiﬁca la construcci´on de las sucesiones especiales de
´arboles de refutaci´on.
Lema 2.5.7 Sea ϕ un enunciado de un lenguaje de primer orden. Si todos
los ´arboles especiales En originados en ϕ tienen ramas abiertas, entonces ϕ
es satisfacible.
Demostraci´on: Supongamos que para todo n ≥0, En tiene al menos una
rama abierta. Observemos que por la forma en que est´an deﬁnidos estos
´arboles, un mismo enunciado puede aparecer repetido en una rama Rn de

2.5. EXISTENCIA DE MODELOS
81
En. El conjunto formado por los enunciados que ﬁguran en Rn ser´a denotado
por Rn. Sea m > n. Diremos que una rama Rm de Em es una extensi´on de
la rama Rn de En si y s´olo si Rm ⊇Rn.
A continuaci´on probaremos la siguiente aﬁrmaci´on:
(A) Existe una sucesi´on Rn tal que Rn es una rama abierta de En y Rn+1
es una extensi´on de Rn, para todo n ≥0.
Diremos que una rama abierta Rn de En es buena si y s´olo si para inﬁnitos
m > n, Em contiene ramas abiertas que extienden a Rn.
Cada rama abierta Rn de En tiene un n´umero ﬁnito de extensiones en
En+1, digamos R1
n+1, . . . , Rk
n+1, con k ≥1. Si m > n, entonces toda rama de
Em que sea extensi´on de Rn deber´a ser tambi´en extensi´on de por lo menos
una de las ramas R1
n+1, . . . , Rk
n+1. Luego, si Rn es buena, tambi´en lo ser´a
una de sus extensiones a En+1.
Como todas las ramas abiertas de cualquier En son extensiones de la
´unica rama R0 de E0, resulta que R0 es buena. Como las ramas abiertas
de E1 extienden a R0, podemos elegir una que sea buena, y que llamaremos
R1. Entre las ramas abiertas de E2 que extienden a R1, elijamos una buena,
que llamaremos R2. En general, habiendo formado la sucesi´on R0, R1, . . . Rn
de ramas abiertas buenas de E0, E1, . . . En, tales que R0 ⊆R1 ⊆. . . ⊆Rn,
deﬁnimos Rn+1 como una rama abierta buena de En+1 que extienda a Rn.
Esto prueba (A).
Veamos ahora que si Rn es una sucesi´on de ramas abiertas satisfaciendo
las condiciones de (A), entonces R =
S
n∈N Rn es un conjunto saturado de
enunciados de LPar
ϕ
.
Sea η ∈R. Entonces η ∈Rn para alg´un n ≥0. Por otra parte, existe
m ≥n tal que η = ψm, el m-´esimo enunciado de la lista (2.19). Luego si
η es de la forma de la premisa de una de las reglas R¬, R¬∨, R∧´o R¬→,
entonces todas sus conclusiones est´an en Rm+1. Si η es de la forma de la
premisa de alguna de las reglas R∨, R¬∧´o R¬→, entonces al menos una de
sus conclusiones est´a en Rm+1. Si η es de la forma ¬∀x χ ´o ∃x χ, entonces
¬χ(x/a) ´o χ(x/a) est´an en Rm+1, donde a es alg´un par´ametro (esto es, una
constante del lenguaje LPar
ϕ
). Finalmente, supongamos que η es de la forma
∀x χ ´o ¬∃x χ, y sea t un t´ermino sin variables del lenguaje LPar
ϕ
. Tendremos
que t = tp, donde tp es el p-´esimo t´ermino de la lista (2.20). Si p ≤m,
entonces χ(x/t) ´o ¬χ(x/t) est´a en Rm+1. Si p > m, existe q > p tal que
η = ψq, y resulta que χ(x/t) ´o ¬χ(x/t) est´a en Rq+1. Vemos as´ı que R es
saturado.

82
CHAPTER 2. C ´ALCULO DE PREDICADOS
Por el Teorema 2.5.2, resulta entonces que R es satisfacible, y como ϕ ∈R,
obtenemos que ϕ es satisfacible, como quer´ımos demostrar.
Observemos que en el teorema anterior no se descarta la posibilidad de
que exista un n tal Em = En para todo m ≥n. En este caso R =
Si=n
i=0 Ri es
un conjunto saturado ﬁnito, y por lo tanto ϕ tiene un modelo ﬁnito.
El siguiente teorema es una consecuencia inmediata del Teorema 2.4.6 y
del Lema 2.5.7.
Teorema 2.5.8 Un enunciado ϕ de un lenguaje de primer orden L es insa-
tisfacible si y s´olo si ϕ origina un ´arbol de refutaci´on cerrado.
Corolario 2.5.9 Sea L un lenguaje de primer orden. Un enunciado ϕ es
consecuencia de los enunciados ψ1, . . . , ψk si y s´olo si el enunciado
ψ1 ∧· · · ∧ψk ∧¬ϕ
origina un ´arbol de refutaci´on cerrado.

