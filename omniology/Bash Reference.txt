BA SH REFERENCE
A liasing 
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.6
A rithmetic Evaluation.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 8
A rrays 
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.13
Brace Expansion.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 6
Built-
In Commands .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 16
Command Line A rguments .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 3
Command Substitution.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 8
Conditional Expressions.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 15
Control Commands .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 14
Definitions 
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.2
Execution Order.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 13
Field Splitting.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 8
Functions .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.12
H istory Substitution.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 5
Input/
Output .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.13
Invocation and Startup .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.3
Job Ids and Job Control.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 24
Options Toset.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 22
Options Toshopt.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 23
Options Totest.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 21
Patterns 
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.9
Pre-
Defined Variables .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.10
Process Substitution.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 8
Prompting .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.4
Quoting .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.6
Readline .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.25
Readline Directives .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 25
Readline Key Bindings .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 25
Readline Variables 
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.26
Restrictedbash.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 2
Signals and Traps 
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.13
Special Characters.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 24
Tilde Substitution.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 6
Variable Assignment.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 9
Variable Names .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 9
Variable Substitution.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 7
CONTENTS
This reference card w as w ritten by A rnold Robbins.W e
thank Chet Ramey (bash’s maintainer) for his help.
SpecializedSystems  Cons ultants, Inc.
(206)FOR-
UNIX/
(206)782-
7733
FAX: (206)782-
7191
E-
mail: sales@ssc.
com
URL: http:/
/
www.
ssc.
com
Linux Journal—The Premier Linux Magazine
Technical Books  and CDs
SAMBA: Integrating UNIX and W indow s
Shell Tutorials,
 KSH  Reference
VI & Emacs References,
 VI Tutorial
OTHER SSC PRODUCTS:
© Copyright 1
999 Specialized Systems Consultants, Inc.
,
P.
O.
 Box 55549,
 Seattle,
 W A 98155-
0549.
A ll Rights Reserved.
1
This card describes version 2.
02.
0 ofbash.
Several typefaces are used to clarify the meaning:
• Serifa Boldis used for computer input.
• Serifa Italic is used to indicate user input and for
syntactic placeholders,
 such as variableorcmd.
• Serifa Roman is used for explanatory text.
blank
or more spaces and/
or tab characters.In addition,
w ords are terminated by any of the follow ing
characters:
;&()|<>space tab new line
command
w ords.
list
pipelines.Can be separated by;,&,
&&,||and optionally be terminated by;,&.
n
name
keyw ord
bash language.
Keyw ords are special only after a;or new line,
 after
another keyw ord, and in certain other contexts.
pat
bashpattern.
 SeePatter 
ns.
pipeline
by a pipe (|).
string
substitution
command line w ith different text, e.
g.
, replacing a
variable w ith its value.bash performs many
substitutions.
 This card lists them in the order they are
performed.
w ord
necessary if it contains special characters.
DEFINITIONS
Ifbashis invoked as rbash,orw ith the
option,
 it is
restricted.The follow ing actions are not allow ed in a
restricted shell:
changing directory w ithcd
setting or unsetting$
SH ELLor$
PATH
using path names for commands that contain /
using a path name that contains /for the.
command
importingfunctions from the environment
parsing$
SH ELLOPTS at startup
redirecting output w ith any of>,>|,<>,>&,&>,or>>
usingexecto run a different command
adding or deleting built-in commands w ithenable
using
to bypass a restricted$
PATH
usingset +rorset +o restricted
These restrictions are in effect after executing all
startupfiles,
 allow ing the author of the startup files full
control in setting up the restricted environment.(In
practice,
 restricted shells are not used much,
 as they
are difficult to set up correctly.
)
RESTRICTED bash
If you find an error in this reference and are the first to
reportit,
 w e w ill send you a free copy of any of our
references.
 Pleasew rite,
 or send electronic mail to
bugs@ssc.
com.
Error Reporting
2
bashaccepts the one letter options to set,and the
additional one letter and GNU-
style long options show n
below .
$bash[options][args]
ends option processing
ends option processing
cmd
execute cmd (default reads
command from file named in
first entry ofargs and found via
path search)
print all double quoted strings
that are preceded by a $to
stdout.This implies
,no
commands are executed
set interactive mode
set restricted mode
read commands from
stdin
(default)
same as
,but output in GNU
gettextformat
same as
display a help message and exit
successfully
act like a login shell
do not use thereadlinelibrary
to read commands w hen
interactive
do not read any of the
initialization 
files.
See
Invocation And Startup,below
do not read
˜/
.
bashrc
if
interactive.
 SeeInvocation And
Star 
tup,below
follow  the IEEE POSIX 1
003.
2
standard
file
use fileinstead of˜/
.
bashrc if
interactive
same as
same as
print version information on
stdoutand exit successfully
COMMAND LINE ARGUMENTS
There are five w ays thatbashruns: normal interactive,
normal non-interactive,
 as
sh,in POSIX mode,
 or
invoked viarshd.
1
.
 Normal interactive: Login shells run commands in
/
etc/
profile.The first of˜/
.
bash_profile,˜/
.
bash_login,
and˜/
.
profilethat is found is executed.This stage is
skipped if
is used.
Upon logout,bashruns ˜/
.
bash_logoutif it exists.
Interactive non-login shells execute ˜/
.
bashrc,if it
exists.
 The
ifileoption changes the file that is
used.
2.
 Normal non-interactive: Non-interactive shells do
variable, command,
 and arithmetic substitution on the
value of$BA SH _ENV,and if the result names an
existing file,
 that file is executed.
INVOCATION AND STARTUP
3
3.
 Invoked as sh:Interactive login shells read and
execute/
etc/
profileand˜/
.
profileif they exist.These
files are skipped if
is used.Interactive
shells expand$ENV and execute that file if it exists.
Non-interactive shells do not read any startup files.
A fter the startup files are executed,bashenters POSIX
mode.
4.
 POSIX mode: W hen started w ith
,interactive
shells expand $ENV and execute the given file.No
other startup files are read.
5.
 Invoked viarshd:Ifrun from rshdand not invoked as
sh,bashreads ˜/
.
bashrc.The
option skips this
step,
 and the
option changes the file,
 butrshd
usually does not pass these options on to the shell it
invokes.
If$
SH ELLOPTS exists in the environment at startup,
bashenables the given options.
INVOCATION AND STARTUP(continued)
W hen interactive,bash displays the primary and
secondary prompt strings,$
PS1and $
PS2.bash
expands the follow ing escape sequences in the values
of these strings.
\a
an A SCII BEL character (octal 07)
\d
the date in ‘‘W eekday Month Day’’format
\e
an A SCII escape character (octal 033)
\h
the hostname up to the first dot (.
)
\H
the full hostname
\n
anew line
\r
acarriage return
\s
the name of the shell (basename of$0)
\t
the time in 24-
hour H H :MM:SS format
\T
the time in 12-
hour H H :MM:SS format
\u
the user’s username
\v
the version ofbash(e.
g.
,
 2.
02)
\V
the version and patchlevel ofbash(e.
g.
,
 2.
02.
0)
\w
the current w orking directory
\W
the basename of the current w orking directory
\!
the history number of this command
\#
the command number of this command
\$
a#if the effective UID is 0,
 otherw ise a$
\@
the time in 12-
hour am/
pm format
\\
abackslash
\nnn
the character corresponding to octal valuennn
\[
startasequence of non-
printing characters
\]
end a sequence of non-
printing characters
The history number is the number of the command in
the history list,
 w hich may include commands restored
from the history file.The command number is the
number of this command starting from the first
command run by the current invocation of the shell.
The default value ofPS1is ‘‘
’’.
PROMPTING
4

H istory expansion is similar tocsh’s.Itis enabled by
default in interactive shells. H istory expansion
happens before the shell breaks the input into w ords,
although quoting is recognized and quoted text is
treated as one history ‘‘w ord’’.
H istory substitution is performed on history events,
w hich consist of anevent designator(w hich previous line
to startw ith),
 aw ord designator(w hich w ord from that
line to use,
 starting w ith zero), and one or more
optionalmodifiers (w hich parts of the w ords to use).
Colons separate the three parts, although the colon
betw een the event designator and w ord designator
may be omitted w hen the w ord designator begins w ith
ˆ,$
,*,,or%.Each modifier is separated from the next
one w ith a colon.Thehistchars variable specifies the
start-
of-historyand quick substitution characters, and
also the comment character that indicates that the rest
of a line is a comment.The previous command is the
default event if no event designator is supplied.
The event designators are:
!
startahistory substitution
!n
command linen
n
current line minus n(nprevious)
!!
the previous command
!str
most recent command line starting w ith
str
!?str[?]
most recent command line containingstr
!#
the entire command line typed so far
ˆoldˆnew ˆ
quick substitution: repeat last command
changingoldtonew
The w ord designators are:
0
the zero’th w ord (command name)
n
w ordn
ˆ
the first argument,
 i.
e.
,
 w ord one
$
the last argument
%
the w ord matched by the most recent
!?str?search
xy
w ords xthroughy.
is shortfor
*
w ords 1
 through the last (like
)
n*
w ords nthrough the last (liken
)
n
w ords nthrough the next to last
The modifiers are:
e
remove all but the suffix of a filename
g
make changes globally,use w ith s
modifier,below
h
remove the last part of a filename,
leaving the ‘‘head’’
p
print the command but do not execute it
q
quote the generated text
r
remove the last suffix of a filename
s/
old/
new /
substitutenew forold in the text.Any
delimiter may be used.A n & in the
replacement means the value ofold.W ith
emptyold,use lastold,orthe most recent
!?str?search if there w as no previous old
t
remove all but the last partofafilename,
leaving the ‘‘tail’’
x
quote the generated text, but break into
w ords atblanks and new line
&
repeat the last substitution
H ISTORYSUBSTITUTION
5
\c
quote single characterc
`.
.
.
`
old style command substitution
".
.
.
"
text treated as a single argument,
 double
quotes removed; variable, command and
arithmetic substitutions performed;
use\to quote$
,\,`,and"
$".
.
.
"
like".
.
.
",but locale translation done
´.
.
.
´
text treated as a single argument,
 single
quotes removed; text betw een quotes
left alone, cannot include´
$´.
.
.
´
text treated as a single argument,$and
single quotes removed; no substitutions
performed; A NSI C and additional
escape sequences processed:
\a
alert(bell)
\v
verticaltab
\b
backspace
\ddd
octal valueddd
\f
form feed
\xhhh
hex valuehhh
\n
new line
\\
backslash
\r
carriage return
\e
escape,
 not in ANSI C
\t
horizontal tab
QUOTING
alias name=value.
.
.
A liases are expanded w hen a command is read,
 not
w hen executed.A lias names can contain any non-
special character,not just alphanumerics,
 except for=.
A lias expansion is done on the firstw ordof a command.
If the last character of the replacement text is ablank,
then the next w ord in the command line is checked for
alias expansion.A liases can even be used to redefine
shell keyw ords,
 but not in POSIX mode.
ALIASING
Brace expansion is similar to csh’s.A
w ord must
contain at least one unquoted left brace and comma to
be expanded.bash expands the comma-
separated
items in order,the result is not sorted.
 Brace
expansions may be nested.
 For example:
$mkdir /
usr/
{gnu,
local}/
{src,
bin,
lib}
BRA CE EXPANSION
˜
substitute$H OME
˜user
substituteuser’s home directory
˜+
substitute$
PW D
substitute$OLDPW D
˜n
substitute$
{DIRSTA CK[n]}.A leading+
or
is allow ed: negative values count
from the end of the stack
Tilde substitution happens after alias expansion.It is
done for w ords that begin w ith ˜and for variable
assignment.
In variable assignments,
 it is also done after a:in the
value.
 Tilde substitution is done as part of w ord
expansion.
 This means for${name op w ord},w ordw ill be
checked for tilde substitution,
 but only if the operation
requires the value of the right-
hand side.
TILDE SUBSTITUTION
6
$name
reference to shell variablename
${name}
use braces to delimit shell variablename
${name w ord}
use variablenameif set,
 else usew ord
${name=w ord}
as above but also setnametow ord
${name?w ord}
usenameif set,
 otherw ise printw ordand
exit (
interactive shells do not exit)
${name+w ord}
usew ordifnameis set, otherw ise use
nothing
${name[n]}
elementnin arrayname
$
{#name}
length of shell variablename
$
{#name[*] 
}
number of elements in arrayname
$
{#name[@] 
}
number of elements in arrayname
${name#pat}
remove shortest leading substring
ofnamethat matches pat
${name##pat} remove longest leading substring
ofnamethat matches pat
${name%pat}
remove shortest trailing substring
ofnamethat matches pat
${name%%pat}
remove longest trailing substring
ofnamethat matches pat
${name:start}
${name:start:length}
lengthcharacters ofnamestartingat
start(counting from 0); use rest of
value if nolength.
Negativestart
counts from the end.Ifnameis *or@
or an array indexed by*or@,start
andlengthindicate the array index and
count of elements.
startandlengthcan
be arithmetic expressions
${name/
pattern/
string}
value ofnamew ith first match ofpattern
replaced w ithstring
${name/
pattern}
value ofnamew ith first match ofpattern
deleted
${name/
/
pattern/
string}
value ofnamew ith every match of
patternreplaced w ithstring
${name/
#pattern/
string}
value ofnamew ith match ofpattern
replaced w ithstring;match must occur
at beginning
${name/
%pattern/
string}
value ofnamew ith match ofpattern
replaced w ithstring;match occurs at end
Note:for ,=,?,and+,usingname:instead ofname
tests w hethernameis set and non-
NULL; usingname
tests only w hethernameis set.
For#,##,%,%%,/
,/
/
,/
#,and/
%,w hen nameis *or@
or an array indexed by *or @,the substring or
substitution operation is applied to each element.
VARIA BLE SUBSTITUTION
7
A rithmetic evaluation is done w ith the let built-in
command,
 the ((.
.
.
))
command and the $
((.
.
.
))
expansion for producing the result of an expression.
A ll arithmetic uses longintegers.
 Use
to get
integer variables.Integer constants look like [base#]n
w herebaseis a decimal number betw een tw o and 64,
andnis in that base.The digits are0-
9,a-
z,A -
Z,_and
@.A leading0or0xdenote octal or hexadecimal.
The follow ing operators based on C,
 w ith the same
precedence and associativity,are available.
unary plus and minus
!˜
logical and bitw ise negation
**
exponentiation (not in C)
*/%
multiply,divide,
 modulus
addition,
 subtraction
<< >>
left shift,
 right shift
< <= > >=
comparisons
== !=
equals,
 not equals
&
bitw ise AND
ˆ
bitw ise XOR
|
bitw ise OR
&&
logical A N D,
 shortcircuit
||
logical OR,
 shortcircuit
?:
in-line conditional
assignment operators
Insidelet,((.
.
.
)),and$
((.
.
.
)),variable names do not need
a$to get their values.
ARITHMETIC EVALUATION
$(command)
new  form
`command`
old form
Run command,substitute the results as arguments.
Trailing new lines are removed.
 Characters in $IFS
separate w ords (seeField Splitting).
 Thenew  form is
preferred for simpler quoting rules.
$((expression))arithmetic substitution
Theexpressionis evaluated, and the result is used as an
argument to the current command.
COMMAND SUBSTITUTION
cmd<(list1
)>(list2)
Runs list1and list2 asynchronously,w ith stdin and
stdoutrespectively connected via pipes using fifos or
files in /
dev/
fd.These file names become arguments to
cmd,w hich expects to read its first argument and w rite
its second.
 This only w orks if you have/
dev/
fdor fifos.
PROCESS SUBSTITUTION
Quoted text becomes one w ord. Otherw ise,
occurrences of any character in $IFS separate w ords.
Multiple w hitespace characters that are in $IFS do not
delimit empty w ords, w hile multiple non-
w hitespace
characters do.W hen $
IFS is not the default value,
sequences of leading and trailing $IFS w hitespace
characters are removed,
 and printable characters in
$IFS
surrounded by adjacent
$IFS
w hitespace
characters delimit fields.If$
IFS is NULL,bashdoes
not do field splitting.
FIELD SPLITTING
8

?
match single character in filename
*
match 0 or more characters in filename
[chars]
match any ofchars
(pair separated by a matches a range)
[!chars]
match any exceptchars
[ˆchars ]
match any exceptchars
If the extglob option to shopt is set,
 the follow ing
extended matching facilities may be used.
?(pat-list)
optionally match any of the patterns
*(pat-list)
match 0 or more of any of the patterns
+(pat-list)
match 1
 or more of any of the patterns
@(pat-list)
match exactly 1 of any of the patterns
!(pat-list)
match anything but any of the patterns
pat-listis a list of one or more patterns separated by|.
The POSIX [[=c=]]and[[.
c.
]]notations for same-
w eight
characters and collating elements are accepted.The
notation[[:class:]]defines character classes:
alnum
alphanumeric
low er
low er-case
alpha
alphabetic
print
printable
blank
space or tab
punct
punctuation
cntrl
control
space
w hitespace
digit
decimal
upper
upper-case
graph
non-
spaces
xdigit
hexadecimal
Threeshoptoptions affect pattern matching.
dotglob
include files w hose names begin w ith.
nocaseglob
ignore case w hen matching
nullglob
remove patterns that don’t match
W hen expanding filenames,.and .
.are ignored,
filenames matching the patterns in $G LOBIGNOREare
also ignored and a leading.must be supplied in the
pattern to match filenames that begin w ith ..
H ow ever,settingG LOBIG N ORE enables thedotglob
option.
 Include.
*in G LOBIG N ORE to get the default
behavior.
PATTERNS
Variable names are made up of letters, digits and
underscores.
 Theymay not startw ith a digit.
 There is
no limit on the length of a variable name,
 and the case
of letters is significant.
VA RIA BLE NAMES
A ssignments to integer variables undergo arithmetic
evaluation.
 Variable assignments have one of the
follow ing forms.
name=w ord
setnametow ord
name[index]=w ord
set elementindexof arraynametow ord
name=(w ord.
.
.
)
set indexed arraynametow ords
name=( 
[num]=w ord.
.
.
)
set given indices of arraynametow ords
VA RIA BLE ASSIGNMENT
9
$n
use positional parametern,n
9
${n}
use positional parametern
$*
all positional parameters
$@
all positional parameters
"$*"
equivalent to"$
1
 $
2.
.
.
"
"$@"
equivalent to"$
1
" "$
2".
.
.
$#
number of positional parameters
options to shell or byset
$?
value returned by last command
$$
process number of current shell
$!
process number of last background
cmd
$_
name of program in environment at
startup.Value of last positional
argument in last command.Name of
changed mail file in$MA ILPATH
$
auto_resume
enables 
use 
of 
single-
w ord
commands to match stopped jobs for
foregrounding.
 W ith a value ofexact,
the w ord must exactly match the
command used to startthe job.W ith
avalue ofsubstring,the typed w ord
can be a substring of the command,
like%?string
$BA SH
full file name used to invokebash
$BA SH _ENV
in normal non-interactive shells only,
value is variable, command and
arithmetic substituted for path of
startup
file (See Invocation And
Star 
tup)
$BA SH _VERSION
the version ofbash
$BA SH _VERSINFO[0]
the major version number
(release)
$BA SH _VERSINFO[1]
the minor version number
(version)
$BA SH _VERSINFO[2]
the patchlevel
$BA SH _VERSINFO[3]
the build version
$BA SH _VERSINFO[4]
the release status
$BA SH _VERSINFO[5]
same as $MA CH TYPE
$CDPATH
search path forcdcommand
$DIRSTA CK[*]
array variable containing thepushd
andpopddirectory stack
$ENV
in interactive POSIX mode shells, or
w hen invoked as sh,value is variable,
command and arithmetic substituted
for path of startup file
$
EUID
the effective user id (readonly)
$FCEDIT
default editor for thefccommand (no
default value)
$FIGNORE
colon-
separated list of suffixes giving
the set of filenames to ignore w hen
doing filename completion using
readline
$G LOBIGNORE colon-
separated list of patterns giving
the set of filenames to ignore w hen
doing pattern matching
$GROUPS[*]
readonly array variable w ith the list
of groups the user belongs to
$
histchars
characters that control csh-
style
history (default: !ˆ#).
 See H istor 
y
Substitution
PRE-
DEFINED VARIA BLES
10
$
H ISTCMD
history number of the current
command
$
H ISTCONTROL w ith a value ofignorespace,donot
enter lines that begin w ith spaces
into the history file.W ith a value of
ignoredups,donot enter a line that
matches the previous line. Use
ignorebothto combine both options
$
H ISTFILE
w here command history is stored
$
H ISTFILESIZE maximum number of lines to keep in
$
H ISTFILE
$
H ISTIG N ORE
colon-
separated list of patterns; if the
current line matches any of them,
 the
line is not entered in the history file.
& represents the last history line.
Patterns must match the w hole line
$
H ISTSIZE
number of previous commands to
keep available w hilebashis running
$
H OME
home directory forcdcommand and
value used for tilde expansion
$
H OSTFILE
file in format of/
etc/
hosts to use for
hostname completion
$
H OSTNAME
name of the current host
$
H OSTTYPE
string describing the current host
$
IFS
field separators (space,tab,new line)
$
IGNOREEOF
for interactive shells,
 the number of
consecutive EOFs that must be
entered beforebashactually exits
$
INPUTRC
name of readline
startup
file,
overrides ˜/
.
inputrc
$
LANG
name of current locale
$
LC_ALL
current locale; overrides $
LANG and
other$LC_variables
$
LC_COLLATE
current locale for character collation,
includes sorting results of filename
expansion
$
LC_CTYPE
current locale for character class
functions (seePatter 
ns)
$
LC_MESSA G ES current locale for translating $".
.
.
"
strings
$
LINENO
line number of line being executed in
script or function
$MA CH TYPE
astring in GNU cpu-
company-
system
format describing the machine
runningbash
$MA IL
name of a mail file,
 if any
$MA ILCHECK
check for mail everyn seconds (60
default)
$MA ILPATH
filenames to check for new  mail; uses
:separator;filenamemay be follow ed
by ?message; $_ in
message is
matched mail file name.Overrides
$MA IL
$OLDPW D
previous w orking directory
$OPTARG
value of last argument processed by
getopts
$OPTERR
if set to 1,
 display error messages
from getopts (default:1)
$OPTIND
index of last argument processed by
getopts
PRE-
DEFINED VARIA BLES (continued)
11
$OSTYPE
string 
describing 
the
operating system running
bash
$
PATH
command search path
$
PIPESTATUS[*]
array variable containing exit
status values from processes
in the most recently executed
foreground pipeline
$
PPID
process id of shell’s parent
$
PROMPT_COMMAND
command to run before each
primary prompt
$
PS1
primary 
prompt 
string
(
)
$
PS2
secondary prompt string (>)
$
PS3
select
command prompt
string (#?)
$
PS4
tracing prompt string (+)
$
PW D
current w orking directory
$RANDOM
set each time it’s referenced,
$
REPLY
set by the select and read
commands
$SECONDS
number of seconds since shell
invocation
$
SH ELL
name of this shell
$
SH ELLOPTS
colon-
separated list of the
enabled shell options forset
$
SH LVL
incremented by one for each
sub-
bash
$
TIMEFORMA T
format string for output of
time
keyw ord.
 
Special
constructs introduced by%.
%[p][l]R
elapsed secs
%[p][l]U
user CPU secs
%[p][l]S
system CPU secs
%P
CPU percentage
%%
literal%
Optionalpgives the precision,
the number of digits after the
decimal point; it must be
betw een 0 and 3.Optionall
produces a longer format,
 in
the form MMmSS.
FFs
$
TMOUT
number of seconds to w ait
during 
prompt 
before
terminating
$
UID
the real user id (readonly)
PRE-
DEFINED VARIA BLES (continued)
Functions run in the same process as the calling script,
and share the open files and current directory.They
access their parameters like a script,
 via$1
,$2 and so
on.$0does not change.return may be used inside a
function or.script.
 Functions share traps w ith the
parent script,
 except forDEBUG .Functions may be
recursive,
 and may have local variables,
 declared using
declare,local,ortypeset.Functions may be exported
into the environment w ith
.
FUNCTIONS
12

Redirections are done left to right,
 after pipes are set
up.
 Defaultfile descriptors arestdin andstdout.File
descriptors above 2 are marked close-
on-
exec.
&>w ord
sendstdoutandstderrtow ord
>&w ord
sendstdoutandstderrtow ord
[n]<file
usefilefor input
[n]>file
usefilefor output
[n]>|file
like>,but overrides noclobber
[n]>>file
like>but append tofileif it exists
[n]<>file
openfilefor read/
w rite (default: fd0)
[n]<&m
duplicate input file descriptor from m
[n]>&m
duplicate output file descriptor fromm
[n]
close input file descriptor
[n]
close output file descriptor
[n]<<w ord
input comes from the shell script; treat a line w ith
w ordas EOF on input.If any ofw ordis quoted,
 no
additional processing is done on input by the shell.
Otherw ise:
• dovariable, command,
 arithmetic substitutions
• ignore escaped new lines
• use\to quote\,$
,`,and first character ofw ord
[n]
w ord
as above,
 but w ith leading tabs ignored
Of&>and>&,the first is preferred.
 It is equivalent to
>w ord2>&1.
INPUT/
OUTPUT
A ll substitutions and I/
O redirections are performed
before a command is actually executed.
bash maintains an internal hash table for caching
external commands.Initially,this table is empty.A s
commands are found by searching the directories listed
in $
PATH ,they are added to the hash table.
The command search order is shell functions first,
 built-
in commands second,
 and external commands (first in
the internal hash table,
 and then via$
PATH )third.
EXECUTION ORDER
Signal handling is done w ith thetrapbuilt-in command.
Thew ord argument describing code to execute upon
receipt of the signal is scanned tw ice bybash;once
w hen thetrapcommand is executed, and again w hen
the signal is caught.Therefore it is best to use single
quotes for thetrap command.
 Traps are executed in
order of signal number.You cannot change the status
of a signal that w as ignored w hen the shell started up.
Traps onDEBUG happen after commands are executed.
Backgrounded commands (those follow ed by&)w ill
ignore theSIG INT andSIGQUIT signals if themonitor
option is turned off.Otherw ise,
 they inherit the values
of the parentbash.
SIGNA LS AND TRAPS
A rrays in bash have no limits on the number of
elements.
 A rrayindices start at 0.A rray subscripts
can be arithmetic expressions.A rray elements need
not be contiguous.bash does not have associative
arrays.
ARRAYS
13
!pipeline
executepipeline.Ifexit status w as non-
zero, exit
zero.
 If exit status w as zero, exit 1
casew ordin [[(]pat 
1
[|pat 
2].
.
.
)list;;].
.
.
esac
executelistassociated w ithpatthat matches w ord.
Field splitting is not done forw ord.patis abash
pattern (seePatter 
ns).|is used to indicate an OR
condition.
 Useleading(ifcaseis inside$
( )
forname[in w ords];dolist;done
sequentially assign eachw ordtonameand execute
list.If in w ords is missing use the positional
parameters
[function]func() 
{list;}
define functionfunc,body is list(seeFunctions)
iflist1;thenlist2[;eliflist3;then list4].
.
.
[;elselist5];fi
if executing list1returns successful exit status,
executelist2else .
.
.
selectname[in w ords];dolist;done
print a menu ofw ords,prompt w ith$
PS3 and read a
line from stdin,saving it in $
REPLY.Ifthe line is
the number of one of the w ords, setnameto it,
otherw ise set nameto NULL.Executelist.Ifin
w ords is missing use the positional parameters.
bashautomatically reprints the menu at the end of
the loop
time[ ]pipeline
execute pipeline;print elapsed,
 system and user
times onstderr.
print times in POSIX format
The$
TIMEFORMA T variable controls the format of
the output if
is not used.bashuses the value
$’\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS’if there is
no value for$
TIMEFORMA T
untillist 
1;dolist 
2;done
likew hilebut negate the termination test
w hilelist 
1;dolist 
2;done
execute list 
1
.If last command in list 
1had a
successful exit status, execute list 
2 follow ed by
list 
1
.Repeat until last command in list 
1returns an
unsuccessful exit status
((.
.
.
))
arithmetic evaluation,
 likelet ".
.
.
"
[[expression]]
evaluateexpression,return successful exit status if
true,
 unsuccessful if false (see
Conditional
Expressions for details)
(list)
executelistin a sub-
shell
{list;}
executelistin the current shell
CONTROL COMMA N DS
14
Used w ith the[[.
.
.
]]compound command,
 w hich does
not do pattern expansion or w ord splitting.
string
true ifstringis not NULL
file
true iffileexists ( is preferred)
file
true iffileis a block device
file
true iffileis a character device
file
true iffileis a directory
file
true iffileexists
file
true iffileis a regular file
file
true iffilehas setgid bit set
file
true iffilegroup is effective gid
file
true iffileis a symbolic link
file
true iffilehas sticky bit set
file
true iffileis a symbolic link
string
true ifstringhas non-
zero length
file
true iffileexists and w as modified since
last read
option
true ifoptionis on
file
true iffileow ner is effective uid
file
true iffileis a fifo (named pipe)
file
true iffileis readable
file
true iffilehas non-
zero size
file
true iffileis a socket
filedes
true iffiledes is a terminal
file
true iffilehas setuid bit set
file
true iffileis w ritable
file
true iffileis executable
string
true ifstringhas zero length
file1
file2
true iffile1is new er than file2orfile2
does not exist
file1
file2
true iffile1is older thanfile2orfile2
does not exist
file1
file2
true iffile1andfile2are the same file
string==pattern
true ifstringmatches pattern
string!=pattern
true ifstringdoes not matchpattern
string1<string2
true ifstring1is beforestring2
string1>string2
true ifstring1is afterstring2
exp1
exp2 true ifexp1equals exp2
exp1
exp2 true ifexp1does not equalexp2
exp1
exp2
true ifexp1is less than exp2
exp1
exp2 true ifexp1is greater thanexp2
exp1
exp2 true ifexp1is less than or equal toexp2
exp1
exp2 true ifexp1is greater than or
equal toexp2
(expression)
true ifexpressionis true,
 for grouping
!expression
true ifexpressionis false
exp1&&exp2 true ifexp1AND exp2are true
exp1||exp2
true ifexp1ORexp2is true
Iffileis /
dev/
fd/
n,then,
 if there is no/
dev/
fddirectory,
file descriptor n is checked.Otherw ise,
 the real
/
dev/
fd/
n file is checked.
 Linux,
 FreeBSD,
 BSD/
OS (and
maybe others) return info for the indicated file
descriptor,instead of the actual/
dev/
fddevice file.
Both && and || are short circuit.
 Operands
of
comparison operators undergo arithmetic evaluation.
For==and!=,quote any partofpattern to treat it as a
string.
CONDITIONA L EXPRESSIONS
15
These commands are executed directly by the shell.
A lmost all accept
to mark the end of options.
.file
sourcefile
read and execute commands from
file. If
arguments, save and restore positional params.
Search$
PATH ;ifnothing found,
 look in the current
directory
:
null command; returns 0 exit status
[
seetest
alias [ ][name[=value].
.
.
]
create an alias.W ith no arguments,
 print all
aliases.
 W ithname,print alias value forname
printalias before each alias
bg[j
obid]
putj
obidin the background
bind[
map][
]
bind[
map][
func][ keyseq][
func]
bind[
map]
file
bind[
map]keyseq:func
display and/
or modifyreadlinefunction and key
bindings.
 The syntax is same as for˜/
.
inputrc
file
read new  bindings from file
list the names of allreadlinefunctions
map
use the keymapmap
listreadlinefunctions and bindings
for re-
reading
listreadlinefunctions and bindings
func
show  w hich keys invokefunc
keyseq remove bindings forkeyseq
listreadlinekey sequences and macros
for re-
reading
listreadlinekey sequences and macros
func
remove key bindings forfunc
listreadlinevariable names and values
for re-
reading
listreadlinevariable names and values
break[n]
exit from enclosingfor,w hile,untilorselectloop.
Ifnis supplied,
 exit from n’th enclosing loop
builtin shell-
builtin [args .
.
.
]
execute shell-
builtin w ith given args and return
status.
 Usefulfor the body of a shell function that
redefines a built-in,
 e.
g.
,cd
cd[
][dir]
change current directory to dir($
H OME default).
Do directory path search using value of$CDPATH
use logical path forcd .
.
,$
PW D (default)
use physical path forcd .
.
,$
PW D
If both are given,
 the last one on the command line
w ins
cd [
]
change current directory to$OLDPW D
command[
]name[arg.
.
.
]
w ithout
or
,executenamew ith arguments arg
use a default search path, not$
PATH
print a one w ord description ofname
print a verbose description ofname
continue[n]
do next iteration of enclosingfor,w hile,untilor
selectloop.
 Ifn is supplied,
 iteraten’th enclosing
loop
BUILT-
IN COMMA N DS
16

declare[afFirx][ ][name[=value]]
typeset[afFirx][ ][name[=value]]
set attributes and values of variables.Inside
functions, create new  copies of the variables.Using
+instead of
turns attributes off.W ith no names
or attributes, print every variable’s
name and
attributes
nameis an array
eachnameis a function
don’t show  function definitions (bodies)
nameis an integer; arithmetic
evaluation is done upon assignment
marknames readonly
marknames forexport
dirs [
][+n][n]
display the directory stack
+n
show n’th entry from left,n
0
n
show n’th entry from right,n
0
clear the directory stack
print a longer format listing
print the stack one entry per line
print the stack one entry per line,
 w ith
index numbers
disow n [
][ ][j
ob.
.
.
]
w ith no options,
 remove namedj
obs from the table
of active jobs
remove or mark (w ith
)all jobs
mark eachj
obto not receive aSIG H UP
w henbashterminates
use w ith
to mark just running jobs
echo[
][w ords]
echow ords;
is not special
expand \-
escapes (seeecho(
1
))
never expand \-
escapes
don’t output trailing new line
printfis more portable
enable[
][ file][name.
.
.
]
enable and disable shell built-ins,
 or load and
unload new  built-ins from shared library files.
Disabling a built-in allow s use of a disk file w ith the
same name as a built-in
print all built-ins,
 w ith their status
delete a built-in loaded w ith
file
load a new  built-innamefrom file
disablename,orprint disabled built-ins
w ith nonames
print enabled built-ins
print only POSIX special built-ins
eval[w ords]
evaluatew ords and execute result
exec[
name][
][w ords]
executew ords in place of the shell.If redirections
only,change the shell’s open files
usenameforargv[0]
clear the environment first
place a onargv[0](likelogin(
1
))
If the exec fails,
 non-interactive shells exit,
 unless
theshoptoptionexecfailis set
exit[n]
exit w ith return valuen.Use$?if non
BUILT-
IN COMMA N DS (continued)
17
export[
][name[=value].
.
.
]
w ith no arguments,
 print names and values of
exportedvariables.
 Otherw ise,expor 
tnames to the
environment of commands
names refer to functions
stop exporting eachname
printexportbefore each variable
fc[
editor][
][first[last]]
print a range of commands from firsttolastfrom last
$H ISTSIZEcommands
runeditorif supplied; if not,
 use first of
$FCEDIT,$EDITOR,orvion
commands; execute result(s)
list on standard output instead of editing
don’t print line numbers
reverse order of commands
[old=new ][command]
substitutenew foroldin command(or last command
if nocommand)and execute the result
fg[j
obid]
putj
obidin the foreground
getopts optstring name[arg.
.
.
]
parse parameters and options (seebash(
1
))
hash[ ][
file][name]
w ith no arguments,
 print the hash table contents,
giving hit count and file name
file
enterfilefornamein the hash table
clear the internal hash table
A ssignment to$
PATH also clears the hash table
help[pattern]
print help.W ithpattern,print help about all the
commands that matchpattern
history[n]
[file]
history[ ]
arg[.
.
.
]
arg[.
.
.
]
w ith no options,
 print the command history.A n
argument ofn prints onlyn lines.
 Ifsupplied,
 use
fileinstead of$H ISTFILE
append new  history lines to history file
clear the history list
read new  history lines in the file into the
internal history list
perform history substitution and print
the results
replace internal history w ith contents of
history file
place theargs into the history list
for later use
w rite the internal history to the file
jobs [
][j
obid.
.
.
]
command[args .
.
.
]
list information about jobs
also list process id
only list stopped or exited jobs
only list process groups
only list running jobs
only list stopped jobs
replace anyj
obidin the command line
w ith the corresponding process group ID,
and execute the command
BUILT-
IN COMMA N DS (continued)
18
kill[sig]j
obid.
.
.
kill[
signame][
signum]j
obid.
.
.
send SIG TERM or given signal to named j
obids.
Signals are names listed in /
usr/
include/
signal.
h
w ith or w ithout the prefix ‘‘SIG ’’.
 Stoppedjobs get
a SIG CONT first if sig is either SIG TERM or
SIG H UP
[sigs .
.
.
]
list signal names and/
or numbers.If sig is a
numerical exit status, print the signal that killed the
process
let arg.
.
.
evaluate eachargas an arithmetic expression; exit 0
if the last expression w as non-
zero,
 1
 otherw ise
(seeArithmeticEvaluation)
local[name[=value].
.
.
]
create variables w ith the given values local to a
function.
 W ith no operands ,
 print a list of local
variables.
 Mustbe used inside a function
logout
exit a login shell
popd[ ][+n][n]
remove entries from the directory stack.W ith no
arguments, remove the top entry andcdthere
+n
removen’th entry from left,n
0
n
removen’th entry from right,n
0
don’t change directory
printfformat[arg.
.
.
]
print output like A NSI C printf,w ith extensions
%b
expand escape sequences in strings
%q
print quoted string that can be re-
read
Format conversions are reused as needed
pushd[ ][dir]
pushd[ ][+n][n]
add an entry to the directory stack
.W ith no
arguments,
 exchange the top tw o entries
+n
rotate the stack so that then’th
entry from left is at the top,n
0
n
rotate the stack so that then’th
entry from right is at the top,n
0
don’t change directory
dir
pushdiron the stack andcdthere
pw d[
]
print w orking directory name
print logical path (default)
print physical path
If both are given,
 the last one on the command line
w ins
name][
][
prompt][names .
.
.
]
readstdin and assign tonames.$IFS splits input.
$
REPLY is set if nonamegiven.
 Exit0unless end-
of-file encountered
read w ords into indexed arrayname
usereadlineif reading from a terminal
printpromptif reading from a terminal
before reading
at end of line does not do line
continuation
BUILT-
IN COMMA N DS (continued)
19
readonly[
][name=value.
.
.
]
marknames read-
only; print list if nonames
eachnamemust be an array
eachnamemust be a function
printreadonlybefore each variable
return [n]
exit function or.
script w ith return valuen.W ith no
n,return status of last command.If not in function
or.
script,
 print an error message
set[options][
option][w ords]
set flags and options (seeOptions Toset).w ords set
positional parameters
set[+options][+ooption][w ords]
unset flags and options
shift[n]
rename positional parameters; $n+1=$1 .
.
.
ndefaults to 1
shopt[
][option.
.
.
]
print or change values of shell options.W ith no
arguments,
 print shell option information
only change
options
print settings for re-
reading
quiet mode; exit status indicates
option status
set (enable) given option; w ith no
options,
 print those that are set
unset (disable) given option; w ith no
options,
 print those that are unset
(SeeOptions Toshopt)
suspend[ ]
suspend the shell untilSIG CONT is received
force suspension,
 even for login shell
test
evaluate conditional expressions (see Options To
testandConditional Expressions)
times
print accumulated process times
trap[
][w ord][sigs]
execute w ord if signal in sigs received.sigs are
numbers or signal names w ith or w ithout ‘‘SIG ’’.
W ith no w ord orsigs,print traps.W ith no w ord,
resetsigs to entry defaults.Ifw ord
sigs
to entry defaults.Ifw ordis the null string,
 ignore
sigs.Ifsigs is 0orEXIT,executew ordon exit from
shell.
 If sigs is
DEBUG ,run w ord after every
command.
print a list of signal names and numbers
print traps w ith quoting
type[
]name.
.
.
describe how  the shell interprets name
print all possible interpretations
ofname
print the name of the file to execute if
nameis an external program
print a keyw ord describingname
BUILT-
IN COMMA N DS (continued)
20

ulimit[type][options][limit]
set or print per-process limits
type(default is both):
hard limit
soft limit
options:
all (display only)
core file size
‘‘k’’ofdata segment
maximum file size
‘‘k’’ofphysical memory
maximum file descriptor + 1
size of pipe buffers
‘‘k’’ofstack segment
cpu seconds
max processes for one user
‘‘k’’ofvir 
tualmemory
is assumed if no options are given.The size for
is in 512-
byte blocks; the others are in sizes of
1024 bytes
umask[
][mask]
set file creation permissions mask to complement of
maskif octal,
 or symbolic value as in chmod.W ith
no arguments,
 print current mask.An octal mask is
permissions to remove,
 a symbolic mask is
permissions to keep
print output for re-
reading
print current mask in symbolic form
unalias [ ][names]
remove aliases names
remove all aliases
unset[
][names]
unset variables names (same as
)
unset functions names
unset variables names
Unsetting
LINENO, MA ILCHECK, OPTARG ,
OPTIND,RA NDOM,SECONDS,TMOUT and _
removes their special meaning,
 even if used
afterw ards
w ait[j
obid.
.
.
]
w ait for jobj
obid;ifnoj
ob,w ait for all children
BUILT-
IN COMMA N DS (continued)
Thetestcommand,
 and its synonym [.
.
.
],are built-in to
bash.The command accepts all of the options listed in
theConditional Expressions section.
 H ow ever,since it is
acommand,
 options and arguments must be quoted to
get proper behavior,and normal pattern expansion and
field splitting are done.Parentheses used for grouping
must be quoted.A rithmetic expansion is not done for
numeric operators, and pattern matching is not done
for==and!=.testcomplies w ith POSIX.
The
and
options have the follow ing meanings,
instead of the ones listed in Conditional Expressions:
logical A N D
logical OR
OPTIONS TO test
21
Thesetcommand is complicated.H ere is a summary.
Use + instead of
to turn options off.W ith no
arguments,set prints the names and values of all
variables.
set[abBCefhH kmnpPtuvx][ooption.
.
.
] [arg.
.
.
]
automatically exportvariables upon
assignment
print job completion messages
immediately,don’t w ait for next prompt
enable brace expansion (default)
force>|to overw rite for existing files
exit upon non-
zero exit from a command
disable pattern expansion
save command locations in the
internal hash table (default)
enable!-
style history (default)
place all variable assignments in
the environment (obsolete)
run background jobs in their ow n
process group,
 print a message
w hen they exit; set automatically for
interactive shells on job control systems
read commands w ithout executing them
(ignored if interactive)
set options; w ith no arguments,
 print
current settings
allexport
same as
braceexpand
same as
emacs
use an emacs-
style line
editor (default)
errexit
same as
hashall
same as
histexpand
same as
history
enable history
ignoreeof likeIGNOREEOF=10
keyw ord
same as
monitor
same as
noclobber same as
noexec
same as
noglob
same as
notify
same as
nounset
same as
onecmd
same as
physical
same as
posix
obey the POSIX 1
003.
2
standard
privileged same as
verbose
same as
vi
use avi-
style line editor
xtrace
same as
don’t read$ENV,donot take shell
functions from environment,
 and ignore
options in $
SH ELLOPTS environment
variable
follow  the physical directory structure
for commands that change the directory
read and execute one command,
then exit
make it an error to substitute an unset
variable
print input lines as they’re read
OPTIONS TO set
22
print commands as they’re executed,
preceded by expanded value of$
PS4.
Output is quoted for later reuse
turn off
, ,stop looking for flags;
any remaining args set the
positional parameters
do not change flags; set positional
parameters from argument list;
w ith no args,
 unset the positional
parameters
OPTIONS TO set(continued)
Theshoptcommand sets or unsets a number of options
that affect how bashbehaves.
 This section describes
each option’s effect w hen enabled.Unless noted, they
are all disabled by default.
cdable_vars
treat an argument tocdthat is not a directory as a
variable w hose value is the directory name
cdspell
attempt to correct minor spelling errors in
arguments to cd.Errors tried are transposed
characters, a missing character or an extra
character.Only obeyed in interactive shells
checkhash
check that a command in the hash table still exists
before trying to execute it.If it doesn’t,
 search
$
PATH
checkw insize
check the w indow  size after each command and
update$
LINESand$COLUMN S
cmdhist
attempt to save all lines of a multi-line command in
the history file as one line,
 for easy re-
editing
dotglob
include files w hose names begin w ith.in path
expansions
execfail
keep non-interactive shells from exiting w hen exec
fails
expand_aliases
expand aliases as described in Aliases.Enabled
automatically in interactive shells
extglob
enable the extended pattern matching facilities (see
Patter 
ns)
histappend
append the current history to$H ISTFILEupon exit,
instead of overw riting it
histreedit
if usingreadlineand a history substitution fails, the
user can re-
edit the line
histverify
if using readline,load the results of history
substitution intoreadlinefor further editing
hostcomplete
if usingreadline,attempt host completion on w ord
containing@
huponexit
sendSIG H UPto all jobs w henbashexits
interactive_comments
in interactive shells, a w ord starting w ith#starts a
comment.
 Enabledby default
OPTIONS TO shopt
23
lithist
if cmdhist is also enabled, save multi-line
commands w ith new lines,
 not semi-colons
mailw arn
print a w arning message if a file being checked for
mail w as accessed since the last time it w as
checked
nocaseglob
do a case-insensitive match w hen expanding
pathnames
nullglob
remove patterns that don’t match any file,
 instead
of leaving them unchanged in the command line
promptvars
do parameter expansion on the prompt variables
before printing them.Enabled by default
shift_verbose
print an error message w hen the shift count is
greater than the number of positional parameters
sourcepath
use$
PATH to find shell files given to the.and
sourcecommands.
 Enabledby default
OPTIONS TO shopt(continued)
#
startof comment; terminated by new line
|
(pipe) connects tw o commands
;
command separator
&
run process in background; defaultstdin
from /
dev/
nullif no job control
&&
only run follow ing command if previous
command completed successfully
||
only run follow ing command if previous
command failed
´
enclose string to be taken literally
"
enclose string to have variable, command
and arithmetic substitution only
$( )
in-line command substitution (new  style)
`
in-line command substitution (old style)
((.
.
.
))
arithmetic evaluation,
 likelet ".
.
.
"
$((.
.
.
))
in-line arithmetic evaluation
\
treat follow ing character literally
\new line
line continuation
SPECIAL CHARACTERS
Jobs can be represented as follow s:
j
obid
the job identifier for a job, w here:
%%
current job
%+
current job
previous job
%?str
job uniquely identified bystr
%n
job numbern
%pref
job w hose command line begins
w ithpref
Usually,aprocess ID may be used instead of aj
obid.
Commands that take aj
obiduse the current job if no
j
obidis supplied.
Traps on SIG CH LD execute w henever a job completes.
The commands fgandbgare only available on systems
that support job control.This includes Linux,
 BSD
systems, System V Release 4,
 and most UNIX systems.
JOB IDS AND JOB CONTROL
24

Thereadlinelibrary implements command line editing.
By default,
 it provides an emacs editing interface,
although a vi interface is available.readline is
initialized either from the file named by$
INPUTRC (if
set), or from ˜/
.
inputrc.In that file,
 you can use
conditionals,
 define key bindings for macros and
functions, and set variables.
From thebashlevel,
 thebindcommand allow s you to
add,
 remove and change macro and key bindings.
There are five input mode map names that control the
action taken for each input character.The map names
areemacs,emacs-
standard,emacs-
meta,emacs-
ctlx,
vi,vi-command,andvi-insert.emacs is the same as
emacs-
standard,andviis the same as vi-command.
Youchoose w hich editor you prefer w ith
or
in your˜/
.
bashrcfile,
 or at runtime.
readlineunderstands the character names DEL,ESC,
LFD,NEW LINE,RET,RETURN,RUBOUT,SPA CE,SPC and
TAB.
REA DLINE
Directives in the.
inputrcfile provide conditional and
include facilities similar to the C preprocessor.
$
include
include a file,
 e.
g.
,
 a system-
w ide/
etc/
inputrcfile
$
if
start a conditional,
 for terminal or application
specific settings.Youcan test the follow ing:
application= test the application,
 e.
g.
bashorgdb
mode=
test the editing mode,emacs orvi
term=
test the terminal type
The use ofapplication=is optional; e.
g.
,$if Bash
$
else
startthe ‘‘else’’par 
tof a conditional
$
endif
finish a conditional
REA DLINE DIRECTIVES
Keys bound to a macro place the macro text into the
input; keys bound to a function run the function.
Youcan use these escape sequences in bindings:
\a
alert(bell)
\r
carriage return
\b
backspace
\t
horizontal tab (TA B)
control prefix
\v
verticaltab
\d
delete (DEL)
\\
backslash
\e
escape (ESC)
\"
literal"
\f
form feed
\´
literal´
meta prefix
\ddd
octal valueddd
\n
new line
\xhhh
hex valuehhh
Macros and function bindings look like:
macro:
key-
seq:"text"
function:
key-
seq:function-
name
Macros have quoted text on the right of the colon;
functions have function names.A key-
seq is either a
single character or character name (such as
),
or a quoted string of characters (single or double
quotes).
REA DLINE KEY BINDIN G S
25
Variables control different aspects of readline’s
behavior.You set a variable w ith
setvariable value
Unless otherw ise noted,valueshould be eitherOn or
Off.The descriptions below  describe the effect w hen
the variable is
On.Default values are show n in
parentheses.
bell-
style(audible)
defines how readlineshould ring the bell:
audible
ring the bell
none
never ring the bell
visible
flash the screen
comment-
begin (#)
insert this string for readline-insert-
comment,
(bound toM-
#in emacs mode and to#invimode)
completion-ignore-
case(Off)
ignore case w hen doing completions
completion-
query-items (100)
if the number of completion items is less than this
value,
 place them in the command line.
 Otherw ise,
ask the user if they should be show n
convert-
meta(On)
treat characters w ith the eighth bit set as the meta
version of the equivalent seven bit character
disable-
completion(Off)
do not do completion
editing-
mode(emacs)
set the initial editing mode.
 Possible values are
emacs orvi
enable-
keypad(Off)
attempt to enable the application keypad.This may
be needed to make the arrow  keys w ork
expand-
tilde(Off)
attempt tilde expansion as partofw ord completion
input-
meta(Off)
meta-
flag(Off)
enable eight bit input.The tw o variable names are
synonyms
keymap(emacs)
set the current keymap.
 SeeReadlinefor a list of
allow ed values.The editing-
mode variable also
affects the keymap
mark-
directories (On)
append a/to completed directory names
mark-
modified-
lines (Off)
place a*at the front of modified history lines
output-meta(Off)
print characters w ith the eighth bit set directly,not
as M-
x
print-
completions-
horizontally(Off)
display completions horizontally,w ith the matches
sortedalphabetically,instead of vertically dow n the
screen
show -
all-if-ambiguous (Off)
immediately list w ords w ith multiple possible
completions,
 instead of ringing the bell
visible-
stats (Off)
w hen listing possible completions,
 append a
character that denotes the file’s type
REA DLINE VARIA BLES
More information aboutreadlinecan be found on-line at
http:/
/
w w w .
ssc.
com/
ssc/
bash.
26

