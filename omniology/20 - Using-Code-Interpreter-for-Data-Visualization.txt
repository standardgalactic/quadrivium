Using Code Interpreter for Data Visualiza6on 
 
Alright, let's continue with our netflix dataset. This is a relatively simple and clean dataset, 
making it straightforward to visualize. The steps I show you here can apply to almost any 
dataset. 
 
If I want to create visualizations, I can simply specify what I have in mind. I could make a 
open-ended request like, "Give me suggestions for data visualization". And Code interpreter 
responds: 
 
 
Let's start with ‘Bar chart of rating’. Code Interpreter generates the code: 
 
# Import necessary libraries 
import pandas as pd 
import seaborn as sns 
import matplotlib.pyplot as plt 
 
# Load the dataset 
data = pd.read_csv('/mnt/data/netflix_titles.csv') 
 
# Count the occurrence of each class in the 'rating' column 
rating_counts = data['rating'].value_counts() 
 
# Create a bar plot 
plt.figure(figsize=(12,6)) 
sns.barplot(x=rating_counts.index, y=rating_counts.values, 
palette="Blues_d") 
plt.title('Distribution of Ratings on Netflix') 
plt.xlabel('Rating') 
plt.ylabel('Count') 
plt.xticks(rotation=90) 

plt.show() 
 
It uses matplotlib. If you examine the code, it's fairly straightforward. We create a barplot and 
can set thetitle, x-axis label, y-axis label, and then show the plot. But these are not critical to 
understand for now. 
 
 
 
Our plot (above) displays the distribution of the netflix ratings. Code Interpreter gives us this 
analysis: 
 
As we can see, the most common rating on Netflix is "TV-MA", followed by "TV-14" and "TV-
PG". These ratings are content advisories for television programming, indicating that the 
content is specifically designed to be viewed by adults and may be unsuitable for children 
under 17 ("TV-MA"), unsuitable for children under 14 ("TV-14"), or parental guidance is 
suggested ("TV-PG"). 
 
I can tweak these visualizations as needed. For example, “change the color of the plot to red 
”. 
 

 
If you're a developer, it's as simple as changing a single word in the code as shown in bold 
below: 
 
# Create a bar plot with changed color to red 
plt.figure(figsize=(12,6)) 
sns.barplot(x=rating_counts.index, y=rating_counts.values, color='red') 
plt.title('Distribution of Ratings on Netflix') 
plt.xlabel('Rating') 
plt.ylabel('Count') 
plt.xticks(rotation=90) 
plt.show() 
 
Let's move on to a “Word Cloud for ‘description’”.  
 
 
 
So I just copy “Word Cloud for ‘description’” into Code Interpreter and it returns: 
 
 

Here is a Word Cloud generated from the descriptions of the movies and TV shows in the 
Netflix dataset. The size of each word indicates its frequency in the descriptions. 
 
from wordcloud import WordCloud 
 
# Combine all descriptions into one text 
text = " ".join(description for description in data.description) 
 
# Generate a word cloud image 
wordcloud = WordCloud(background_color="white", width=800, 
height=400).generate(text) 
 
# Display the generated image 
plt.figure(figsize=(10,5)) 
plt.imshow(wordcloud, interpolation='bilinear') 
plt.axis("off") 
plt.show() 
 
We see in the code that it combines all descriptions into one text and then feeds the combined 
text into WordCloud. It also gives us some basic analysis: 
 
From the Word Cloud, we can see that words like "life", "new", "family", "young", "world", 
"find", "love", "friends", "story", "man", "woman", etc., are commonly used in the 
descriptions. These words could be representative of common themes and subjects in Netflix 
titles. 
 
Next, let's look at a Histogram of the distribution of the release years of the titles.   
 
 
So I just copy ‘Histogram of ‘release year’ into Code Interpreter: 
 
 
 
 

And we get some analysis: 
 
From the histogram, we can see that the number of titles has significantly increased in recent 
years. It's important to note that this does not necessarily mean that more titles are being 
produced; it could also be due to Netflix acquiring more titles from recent years. 
 
The majority of the titles in this dataset were released after 2000, with the highest number of 
titles released around the mid-2010s. There are also a smaller number of titles from the mid-
20th century up to 2000. 
 
I can further prompt it: 
 
 
Let's next prompt: ‘Genre Distribution pie chart’. 
 

 
 
And we get the analysis: 
As we can see, "International Movies" make up the largest portion, followed by "Dramas" 
and "Comedies". Other genres like "Documentaries", "Action & Adventure", "Dramas", etc., 
make up smaller portions of the top 10 genres. 
 
This visualization gives us an idea of the diversity of content available on Netflix, with a wide 
variety of genres represented. 
 
# Due to the large number of genres, displaying all of them in a pie chart 
might be overwhelming. 
# Let's display the top 10 genres instead for clarity. 
 
top_genres = genres[:10] 
 
# Plot a pie chart 
plt.figure(figsize=(10,10)) 
plt.pie(top_genres, labels=top_genres.index, autopct='%1.1f%%', 
startangle=140) 
plt.title('Top 10 Genre Distribution on Netflix') 
plt.show() 
 
And we can see it uses the pie method to generate the pie chart. 
 
In conclusion, you can tweak and change the visualizations to suit your needs, just by using 
plain English. You can change the plot's title, background color, scale, and much more 

without having to understand how to use matplotlib, Seaborn, or other Python packages like 
pandas. Even with a basic dataset, we can do a lot. 
 

