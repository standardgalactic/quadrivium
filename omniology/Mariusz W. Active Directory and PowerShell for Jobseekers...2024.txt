Active Directory 
-and-----  
PowerShell 
for Jobseekers
Learn how to create, manage, and secure user accounts


Active Directory 
and
PowerShell for
Jobseekers
Learn how to create, manage, and secure user accounts
Mariusz Wrobel
www.bpbonline.com

First Edition 2024
Copyright © BPB Publications, India
ISBN: 978-93-55515-872
All Rights No part of this publication may be reproduced, 
distributed or transmitted in any form or by any means 
or stored in a database or retrieval system, without the 
prior written permission of the publisher with the 
exception to the program listings which may be entered, 
stored and executed in a computer system, but they can 
not be reproduced by the means of publication, 
photocopy, recording, or by any electronic and 
mechanical means.
LIMITS OF LIABILITY AND DISCLAIMER OF WARRANTY
The information contained in this book is true to correct 
and the best of author’s and publisher’s knowledge. The 
author has made every effort to ensure the accuracy of 
these publications, but publisher cannot be held 
responsible for any loss or damage arising from any 
information in this book.

All trademarks referred to in the book are acknowledged 
as properties of their respective owners but BPB 
Publications cannot guarantee the accuracy of this 
information.
To View Complete
BPB Publications Catalogue
Scan the QR Code:
www.bpbonline.com

Dedicated to
My beloved wife: 
Ola 
&
My lovely daughters: 
Natalia and Nikola 
& 
My mom: 
Genowefa

About the Author
Marius Wrobel has 13 years of experience in IT, which 
includes 12 years of Active Directory experience as well. 
He began his career in smaller companies in Poland and 
later transitioned to larger organizations with offices and 
clients worldwide. Always prioritizing workload 
automation, he has been involved in numerous 
migration and integration projects that required strong 
scripting skills. Learning from experienced colleagues, 
he became a Security Engineer and transitioned into 
Active Directory and Security DevOps, upon joining one 
of the leading European cloud providers.
Now, as the owner of his own consulting company, he 
serves both domestic and international customers, 
focusing primarily on Cloud identity solutions that 
include Azure AD and Active Directory. Mariusz holds the 
position of Lead Directory Services Engineer at Adecco. 
He is also a graduate of Wroclaw University of 
Technology, having completed both a Bachelor's degree 
and a Master's degree in Computer Engineering.
Meanwhile, he has successfully obtained many Microsoft 

certifications in Azure and Security and Identity 
technologies.

About the Reviewers
Miguel Regalado is an Identity and Access management 
engineer. With a wealth of expertise in MFA, SSPR, Azure 
Active Directory, and more, this seasoned IT 
professional has navigated the dynamic landscape of 
technology. Armed with a solid understanding of 
Windows Server, strong authentication methods, 
and a certified Identity and Access Management 
Administrator with Security+, he forged his path at 
leading global enterprises. Rising from a graduate to 
lead Azure/Entra ID services, he oversaw contractors 
and championed innovations like SSPR and MFA. In his 
current role he continued to spearhead advancements 
in Azure AD/Entra ID. Actively engaging in technical 
reviews of internal documents, their narrative is one of 
unwavering dedication to staying on the cutting edge of 
technology, embracing challenges, and envisaging a 
connected future.
Vladimir Prokop is a Microsoft System Design and 
Architecture expert with a robust background in 
platforms installation, configuration, and migration. His

proficiency extends to Exchange Servers, Management 
Servers, and basic knowledge of SharePoint Portal. With 
hands-on experience in systems and network 
engineering, Vladimir excels in troubleshooting and 
problem analysis, as well as client and server-based 
machine repair and maintenance. He is well-versed in 
backup and disaster recovery procedures, anti-virus, 
and content filtering technologies, along with software 
firewalls and routers configuration. Vladimir specializes 
in Microsoft Windows Operating Systems, MS ISA Server, 
Exchange Server, System Management Server, Software 
Update Server, and Internet Information Server (IIS), 
including Apache Configuration. His expertise also 
covers Microsoft Office applications, Symantec Antivirus 
solutions, and Veritas Enterprise High Availability 
solutions. Vladimir Prokop is a highly skilled 
professional, bringing a comprehensive skill set to any 
organization’s IT landscape.

Acknowledgement
I want to express my gratitude to my entire family for 
their immense support and encouragement throughout 
this book's writing. I extend my appreciation, especially 
to my wife Ola and my daughters and mother, Natalia 
and Nikola and Genowefa.
Without the support of my family I would not have been 
in a position to start working on this publication. Without 
their help and support, through my educational and 
professional career, I would not get anywhere close to 
the position I am in. Their continued encouragement has 
led to me completing this project successfully.
I am also grateful to BPB Publications for their support 
and help in bringing this book to fruition. A lot of time 
and effort has been put into this book; with valuable 
participation and collaboration of reviewers, technical 
reviewers, experts and editors.
Last but not the least, there would be no book, without 
me learning from many experienced colleagues in 
various companies that I had the pleasure to work with 

and work in. I tried to absorb as much information as 
possible. Moreover, working in different industries has 
helped me write this book from many different 
perspectives and I hope it is of help to all.

Preface
Managing Active Directory in large enterprise companies 
can be difficult to cope with as it comes with a complex 
set of responsibilities. A deep understanding of Windows 
Server and the Active Directory service is necessary to 
maintain a highly available and secure environment that 
meets the needs of customers.
As the approach to Windows Server administration is 
shifting towards scalability and automation, a 
comprehension of PowerShell is essential. This enables 
administrators to effectively manage Active Directory 
within extensive environments and facilitates the 
automation and standardization of deployments through 
a DevOps approach and cloud capabilities.
This book provides a detailed guide on how to build an 
Active Directory environment within a cloud 
infrastructure and configure it using standard tools 
and/or PowerShell automation. Throughout the book, 
readers will gain insights into the key features of Active 
Directory and learn how to leverage PowerShell for the 
administration of Active Directory environments.

Additionally, the book covers security best practices and 
cloud automation, enhancing daily AD administration for 
greater efficiency and repeatability.
Moreover, this book is intended for anyone looking to 
start their career as a sysadmin and wishes to become 
familiar with Active Directory and PowerShell 
Automation, which requires basic Windows Server 
administration knowledge.
The following is what we will be covering in the 
chapters:
Chapter 1: Introduction - This chapter will cover the 
book's concepts, and acts as an invitation to embark on 
a journey to fully managed Active Directory, elucidating 
the nature of Active Directory and detailing methods for 
its management, using PowerShell. It will also showcase 
various tools applicable to PowerShell automation 
development, script execution on servers, and the 
management of Azure cloud infrastructure, with an 
example test environment deployment.
Chapter 2: Setting up the Development Environment - 
This chapter will provide a step-by-step guide on 
establishing the development environment,

encompassing the creation of Azure laaS for Active 
Directory deployment. It will also explain the process of 
setting up an Azure subscription, connecting the console 
to Azure, staging necessary VMs, and preparing 
resources using Azure PowerShell.
Chapter 3: Active Directory Environment Creation - This 
chapter will delve into the deployment of the Active 
Directory Forest, detailing the creation of the Root and 
child domains. It will elucidate design concepts and offer 
example scripts for automating the deployment process.
Chapter 4: Active Directory Environment Configuration - 
This chapter will cover the configuration and creation of 
the basic AD structure, including OUs, Sites, and 
Delegation. It will also explain FSMO roles and guide 
readers through the configuration process.
Chapter 5: Active Directory User This chapter will 
encompass commonly performed tasks for user 
management, demonstrating both manual operations 
and automation using PowerShell.
Chapter 6: Active Directory Group Management - 
Focusing on Active Directory security tasks, this chapter 
will guide readers on automating these processes with

PowerShell. It will also cover security auditing for 
sensitive accounts, including Kerberos delegation.
Chapter 7: Active Directory Security Management - This 
chapter, echoing the previous one, will further explore 
Active Directory security tasks and their automation 
using PowerShell. It will delve into security auditing for 
sensitive accounts, including Kerberos delegation.
Chapter 8: Monitor Active Explaining how to monitor the 
state of Active Directory services, this chapter will 
outline the automation of monitoring tasks using 
PowerShell scripts and tasks.
Chapter 9: Active Directory Disaster Recovery - Covering 
various disaster and recovery scenarios for Active 
Directory environments, this chapter will introduce 
scenarios ranging from single object and Domain 
Controller failures to entire domain/forest disasters. It 
will also provide guidance on protecting the AD 
environment in such cases.
Chapter 10: Manage Windows Server Using This chapter 
will guide readers on managing Windows Servers solely 
using PowerShell. It will introduce concepts like Windows 
Server Core and remote PowerShell sessions for 
management, as well as explain the utilization of

Windows Admin Center for Active Directory 
Management.
Chapter 11: Securing PowerShell for AD Management - 
Detailing methods to maximize security for PowerShell 
operations, especially in terms of WINRM configuration 
and scheduled task permissions.
Chapter 12: PowerShell DSC for AD Configuration 
Management - Explaining the use of PowerShell DSC for 
maximizing security in Active Directory configuration 
management.
Chapter 13: Interview Questions - This chapter will share 
the author's experiences during their AD Sysadmin 
career, providing insights into the interview process.

Code Bundle and Coloured Images
Please follow the link to download the
Code Bundle and the Coloured Images of the book:
https://rebrand.ly/t7cg1qt
The code bundle for the book is also hosted on GitHub 
at In case there's an update to the code, it will be 
updated on the existing GitHub repository.
We have code bundles from our rich catalogue of books 
and videos available at Check them out!
Errata
We take immense pride in our work at BPB Publications 
and follow best practices to ensure the accuracy of our 
content to provide with an indulging reading experience 
to our subscribers. Our readers are our mirrors, and we 
use their inputs to reflect and improve upon human 
errors, if any, that may have occurred during the 
publishing processes involved. To let us maintain the

quality and help us reach out to any readers who might 
be having difficulties due to any unforeseen errors, 
please write to us at :
errata@bpbonline.com
Your support, suggestions and feedbacks are highly 
appreciated by the BPB Publications’ Family.
Did you know that BPB offers eBook versions of every 
book published, with PDF and ePub files available? You 
can upgrade to the eBook version at 
www.bpbonline.com and as a print book customer, you 
are entitled to a discount on the eBook copy. Get in 
touch with us at :
business@bpbonline.com for more details.
At you can also read a collection of free technical 
articles, sign up for a range of free newsletters, and 
receive exclusive discounts and offers on BPB books and 
eBooks.
Piracy

If you come across any illegal copies of our works in any 
form on the internet, we would be grateful if you would 
provide us with the location address or website name. 
Please contact us at business@bpbonline.com with a 
link to the material.
If you are interested in becoming an author
If there is a topic that you have expertise in, and you are 
interested in either writing or contributing to a book, 
please visit We have worked with thousands of 
developers and tech professionals, just like you, to help 
them share their insights with the global tech 
community. You can make a general application, apply 
for a specific hot topic that we are recruiting an author 
for, or submit your own idea.
Reviews
Please leave a review. Once you have read and used this 
book, why not leave a review on the site that you 
purchased it from? Potential readers can then see and 
use your unbiased opinion to make purchase decisions. 
We at BPB can understand what you think about our

products, and our authors can see your feedback on 
their book. Thank you!
For more information about BPB, please visit
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

Table of Contents
1. Introduction
Inspiration
Introduction
Structure
Objectives
Active Directory overview
Active Directory domain and forest implementations
Single forest, single domain
Single forest, multiple domains
Multiple forest Active Directory

Development environment domain architecture
Act]ive Directory domain and forest functional levels
Active Directory FSMO roles
PowerShell overview
PowerShell versions history
PowerShell command-line interface
PowerShell Integrated Scripting Environment
Visual Studio Code
Windows Terminal
Notepad + +
Notepad
How to start with PowerShell?

AD management options with PowerShell
Built-in PowerShell commands
Active Directory PowerShell module
Development environment overview
Physical environment
Hyper-V environment
Cloud environment
Azure Cloud as the development environment for AD
Conclusion
2. Setting up the Development Environment
Introduction

Structure
Overview of cloud computing.
Cloud computing offering types
Starting with Azure
Creation of Azure subscription
Configuration of Azure Cloud Shell
Overview of Azure Portal
Resource groups, regions, availability zones
Capacity planning for Active Directory
Deploying virtual machines for AD domain controllers
Securing access to development environment
Private access

Public internet access
Just-in-time access
Azure Bastion
Most secure option: Hybrid Solution
Infrastructure deployment verification
Conclusion
3. Active Directory Environment Creation
Introduction
Structure
Objectives
Design overview for development environment
IP configuration for domain controllers

Promotion of the first domain controller in the forest
Child domain promotion
Adding additional domain controller to the existing, 
domain
Creating next child domain into forest
Conclusion
4. Active Directory Environment Configuration
Introduction
Structure
Objectives
DNS forwarders and zones configuration
AD sites, subnet creation and configuration

FSMO role holders’ migration
Default domain policy and default domain controller 
policy management and configuration
Creation of OU structure and delegation
Organizational Unit creation
Delegating control to Organizational Units
Basic Active Directory Management using RSAT tools 
and PowerShell
Recycle Bin management
Fine-Grained Password Policy management
Cleanup of default user permissions
Conclusion
5. Active Directory User Management
Introduction

Structure
Objectives
AD schema and user object class introduction
User creation, common attributes intro
User deletion and housekeeping
User evaluation
User attribute modification
Renaming user account
Modifying attribute-specific information
Implementing expiration dates on User accounts
Bulk user exports, imports, and modifications

Bulk user creation and modification
Sign-in options and password management
Password management
Conclusion
6. Active Directory Group Management
Introduction
Structure
Objectives
Active directory group types
AD groups creation and deletion
AD group membership modifications
Nesting.

Sensitive groups
Enterprise Admins
Domain Admins
Administrators
Schema admins
Protected groups
Bulk operations on AD groups
Add/remove multiple users to the AD group
Add/remove user to/from multiple AD groups
Copy membership between user accounts
Clear membership
Group membership reporting.

Extract members for static list or groups
Extract members of all protected groups in the domain
Extract members of protected groups in forest
Conclusion
7. Active Directory Security Management
Introduction
Structure
Objectives
Introduction to DSACLs and AD provider
Performing security audits using PowerShell
Group policy management and security hardening.
AdminSDHolder and SDPROP

Managed service accounts and group managed service 
accounts
Fine-Grained Password Policies
Patch management and update configuration
Kerberos delegation setup and auditing
Implementing tiering model
Conclusion
8. Monitor Active Directory
Introduction
Structure
Objectives
Monitor critical AD services

DCDIAG and PowerShell
Automatizing DCDIAG using PowerShell
Replication status
Event monitoring.
Performance monitoring
Scheduling tasks for monitoring.
Implementing . global solution for AD monitoring.
Conclusion
9. Active Directory Disaster Recovery
Introduction
Structure
Objectives

Reanimation of tombstone objects
Recycle Bin recovery scenarios
Configuration of Windows server backup for domain 
controllers
Non-authoritative domain controller restores
Authoritative domain controller restore
Organizational unit restores
Object restores
SYSVOL recovery
Non-authoritative SYSVOL synchronization
Authoritative SYSVOL synchronization
Implementing the global DR solution

Conclusion
10. Manage Windows Server Using PowerShell
Introduction
Structure
Objectives
Windows Server Core implementation
RPC, WMI and remote PSSessions
Windows Admin Center implementation
Windows Admin Center remote management
Executing bulk operations on multiple DCs
Scheduling reporting and notifications
Using hybrid worker to process the data

Conclusion
11. Securing PowerShell for AD Management
Introduction
Structure
Objectives
Why not to use privileged accounts for bulk operations
Running scheduled tasks with gMSA and system account
WinRM configuration and security
Using Kerberos and Certificate authentication
Windows server advanced firewall and IP filters
Conclusion
12. PowerShell DSC for AD Configuration Management

Introduction
Structure
Objectives
Introduction to PowerShell DSC
Possible configuration management products
Azure Automation Desired State Configuration
Solution architecture
Solution implementation
DSC configuration of AD infrastructure
Conclusion
13. Interview Questions

Introduction
Structure
Objectives
How to prepare for an interview
Interview scenarios for AD Sysadmin
Frequently asked questions
Your Active Directory and PowerShell projects
Motivation
Questions to interviewers
Conclusion
Index

C 
HAPTER 
1
Introduction

Inspiration
Working in different companies, industries, divisions and 
teams can teach us many different types of Active 
Directory architecture. In various organizations, there 
are multiple ways of implementing robust, lean and high 
performance Directory Service solution. Starting with 
later versions of Windows, PowerShell scripting gained 
popularity and provided a great advantage to manage 
the Active Directory infrastructure. It also provided users 
with a way to improve the service from several 
perspectives.
There were several publications around Active Directory, 
most of them explained different areas of the solution 
and details of the implementation. The part that we 
missed was always thinking of the bigger picture along 
with how to interpolate Active Directory, what can be 
archived with different AD capabilities, and what are the 
best practices from the security point of view. It is 
beneficial that AD becomes a part of the security 
services in some companies, which shifted the focus 
from the enablement service to a more restrictive point 
of view.

There was also caution about implementing automation. 
PowerShell remoting was used in popular types of 
attacks, and big organizations were planning to disable 
it completely from their IT estate. On the other hand, 
smaller companies that grow dynamically needed to 
have an even more automated approach for managing 
Windows and AD infrastructure.
Understanding all the aspects of Active Directory and 
having the mindset of the person who always wants to 
automate IT work is very important. We can switch our 
effort from manual operations and use energy for 
different parts of the service, like security enhancement, 
monitoring and automation.
The purpose of this book is to explain and demonstrate 
all major aspects of implementation, maintenance and 
automation of Active Directory service and the 
underlying server infrastructure. It is a summary of the 
knowledge I gained while working in different industries, 
implementing different aspects of Active Directory 
Services and infrastructure required to host the AD 
service.

Introduction
So, you would like to know more about Active Directory 
and how to manage it effectively using PowerShell? If 
yes, this is the right book for you! There is lot of 
literature that explains either AD or PowerShell. In this 
book we try to provide a comprehensive overview of all 
necessary knowledge that is required for any sysadmin, 
that would need to pick up the workload of Active 
Directory administration and automation of AD 
management using PowerShell.
Today, AD is mostly used by organizations of all sizes 
that are utilizing Microsoft operating systems and 
software products. As a result, the demand of 
experienced IT professionals who can support such 
technology is significant; choosing that career path is 
remarkably interesting and can be a particularly good 
start before becoming a sysadmin or specializing in 
access management and becoming an identity and 
access management expert.
In different companies, there could be various types of 
AD solutions. From small, single-domain

implementations to multi-domain, multi-forest 
organizations, learning PowerShell automation is a huge 
benefit to any administrator in any company. It allows 
you to switch your thinking about how you are 
managing your Windows Server and AD infrastructure, 
allowing you to be more proactive, reduce management 
overhead, and focus on more critical issues that need to 
be solved.
Of course, PowerShell is not the answer to every 
problem that is to be solved when implementing AD. 
When scripting is not the best option, you should focus 
on customer needs rather than pushing for PowerShell. 
Understanding all the possibilities will allow you to 
choose the best solution.
You do not need to have any previous knowledge about 
AD or scripting before diving into this book. This will be 
a good first step to helping you become an AD sysadmin 
familiar with how to utilize PowerShell in daily work. Let 
us get started!

Structure
This chapter will cover the following topics:
Active Directory Overview
Several types of Active Directory services
AD domain and forest implementations
PowerShell overview
Getting started with PowerShell editors
Diverse ways of Active Directory management using 
PowerShell
Development environment overview

Objectives
This chapter will give you basic information on Active 
Directory and PowerShell. We will explain the basic 
Active Directory architectures and provide a basic 
overview of PowerShell History and versioning. We will 
get familiar with PowerShell Editor and define the 
requirements for AD test environment that will be 
managed using scripting and automation.

Active Directory overview
What is Active Directory? Well, there are many 
definitions of AD, but it is a directory service that can be 
implemented on the Windows Server Operating system. 
After completing the operating system configuration, 
you can enable the Active Directory Domain Services 
Role and start deploying AD.
There are multiple Active Directory services:
Active Directory Domain Services It is the base Active 
Directory service is required for an AD infrastructure. If 
Active Directory skill is required in the job description, it 
is about ADDS. Other services are optional, but the rest 
of Active Directory services require ADDS to be present.
Active Directory Certificate Services It is the Microsoft 
PKI services. PKI is the organization public key 
infrastructure that is based on digital certificates. When 
enabling that role, you can deploy private CA 
infrastructure that would rely on AD implementation in 
your organization and use the benefits of the Active 
Directory for certificate enrolment.

Active Directory Federation Services This makes it 
possible to federate the identities to applications as 
well, becoming the identity provider to other external 
identity providers. It extends the Active Directory 
Domain Services with modern authentication protocols 
like SAML and Oath and limits the requirement of 
passing the credentials on applications.
Active Directory Rights Management Services It is the 
service that protects information and ensures that only 
allowed people can read and modify specific documents 
and files. With an application that is integrated with 
RMS, you can define access policies and decide what 
level of access is required when working with sensitive 
information.
Active Directory Lightweight Directory Services It is the 
implementation of LDAP database services. While ADDS 
provides extended capabilities, LDS is limited to provide 
LDAP directory without additional services. It allows 
integration of applications that require LDAP directory 
without Active Directory overhead. Here, you can 
implement multiple LDS instances on one server to 
support multiple applications with separate directories, 
while ADDS can only support one domain on one server.

When it comes to Active Directory, everyone refers to 
Active Directory Domain Services. That service is 
utilized in most organizations, and it requires the most 
effort for implementation and administration. ADFS and 
ADCS are commonly used, but learning about those 
services is much easier. In this book, we will focus on 
learning how to implement and administer Active 
Directory Domain Services.

Active Directory domain and forest implementations
As Active Directory was designed to support varied sizes 
of organizations, there could be multiple architecture 
implementations for AD. Most common architectures 
could be the following:
Single forest, single domain
Single forest, multiple domains
Multiple forests, multiple domains

Single forest, single domain
This architecture is recommended by Microsoft for most 
small organizations. It contains only one domain that 
holds the entire AD forest. In this case, the single 
domain is the root domain, and name of the domains is 
the same as entire forest’s name, as shown in Figure
Figure 1.1: Example of single domain Active Directory 
Forest

Single forest, multiple domains
This architecture is mostly used in medium to large 
organizations with no requirement to split the AD into 
multiple forests. It provides the benefit of central 
administration capabilities and simple authentication 
scenarios within a single forest. In most cases, different 
domains are for geographical separation; it is not 
recommended to separate due to special functional use 
cases like manufacturing, DMZ, and the like, as shown in 
Figure
Figure 1.2: Example of multiple domain Active Directory 
Forest


Multiple forest Active Directory
Multiple forest AD architecture is typically found in large 
organizations that need separation of infrastructure and 
management between different internal teams and 
products. They utilize the concept of Admin Forest and 
DMZ forests that need separation, often acquire different 
companies, and decides to keep the AD infrastructure 
separated. Trusts between organizations are setup to 
support cross-forest authentications. The following 
example shows three forests connected with the main 
forest with one-way forest trusts. That type of design 
allows split sensitive administration to be performed from 
administrative forest and separate DMZ forest from main 
forest using same type of trust. We will look at the trusts 
in detail later on. Figure 1.3 ,is an illustrating example 
implementation:

Figure 1.3: Example of multiple forest Active Directory 
architecture

Development environment domain architecture
We will use the multiple-domain, single-forest 
architecture as it will allow us to go through most AD 
implementation, configuration, and management 
scenarios with PowerShell. For our needs, we will 
implement the structure as close as possible, as 
illustrated in the Figure
Figure 1.4: Development environment architecture

Act]ive Directory domain and forest functional levels
To utilize capabilities deployed on specific Windows 
Server versions, domain and forest functional level need 
to be raised to specific versions as well. If the current 
domain and forest level is not the latest, the features 
introduced in AD cannot be utilized fully.
Unfortunately, since Windows Server 2016, there were 
no significant changes in AD features that would require 
raising functional level, and it is the latest one available. 
Windows Server 2016 functional level is supported on 
the following:
Windows Server 2022
Windows Server 2019
Windows Server 2016
Development environment will utilize the latest 
available Domain and Forest functional level.

Active Directory Domain Controller
Active Directory Domain Controller is a Windows Server 
that has been promoted to hold Active Directory data. 
When there is no domain, and we are not joining an 
existing forest, Domain Controller will first create a 
domain and forest configuration. If the domain already 
exists, a new server will replicate the information from 
the existing Domain Controller, creating a replica of the 
same domain. That process is called DC
Sometimes, old Domain Controllers are no longer 
required. To remove a Domain Controller from a domain, 
you need to follow the Domain Controller demotion 
process. The server will become a standard member of 
the domain and will be a candidate for complete 
decommissioning. If it is the last DC in the domain after 
demotion, the domain will be removed.

Active Directory FSMO roles
Active Directory replicates data between domain 
controllers, so single master roles were used to ensure 
consistency of the replicated data earlier. Unfortunately, 
when single master role failed, some of the operations 
could not be performed.
Then, the concept of Flexible Single Master Operations 
roles was introduced. Flexible Single Master Operations 
ensured that after the failure of one Domain Controller 
that is serving the role, the administrator was able to 
move or the size role to a different server without 
service downtime. Table 1.1 shows which FSMO roles are 
required in domain and forest:
forest:
forest: forest:
forest: forest:

forest: forest:
forest: forest:
forest: forest:
Table 1.1: FSMO roles scope
When promoting first domain controller in a domain and 
forest, it holds all FSMO roles, but eventually splitting 
them between different servers is required to maintain 
best performance and service flexibility. FSMO roles will 
be covered in further detail in the upcoming chapters.

PowerShell overview
What is PowerShell and how can it be utilized for 
managing Active Directory? PowerShell is an automation 
platform that is built into Windows and can also be used 
on Linux and Mac. There is a PowerShell command-line 
interface, scripting language and PowerShell 
Configuration Management. Using all of those, you can 
deploy, configure, and administrate Active Directory in a 
very simplified, agile, and repeatable way.
Most operations in AD can be performed using 
PowerShell, so it is recommended for any sysadmin to 
be on top of every aspect of Active Directory 
management in all types of organizations. PowerShell, 
like CMD, is built in and present on every device running 
Windows Client or Server, starting with Windows 7 SP1 
and Windows Server 2008 R2 SP1. You can also install it 
separately on previous versions, but it is always better 
to upgrade your OS to have it officially supported by 
Microsoft.

PowerShell versions history
One of the most important aspects of working with 
PowerShell is the knowledge about which version of PS 
is installed on the managed device to be utilized. When 
managing older OS versions, the PS version would be 
older as well, especially because for upgrading to 
PowerShell newer version, update of Windows 
Management Framework using installer is required. If 
the supported environment has a more recent OS, it 
would help to utilize much more built in commands that 
would cover much more administration tasks. Table 1.2 
shows which PS version is used on specific Windows 
Server operating system:
system: system: system:
system:
system:

system:
system:
system:
system:
system:
Table 1.2: PowerShell versions in Windows Server
In this book, we will use PowerShell version 5.1 as it is 
present on Windows Server 2022 by default. One of the 
good practices for Active Directory is to keep the 
operating system as lean as possible with a minimum 
number of agents and additional software; PowerShell 
5.1 is fit for the purpose at the moment.

PowerShell interface
The easiest way to get familiar with PowerShell is to start 
using PowerShell as your primary command-line interface 
when managing Windows Client and Server devices.
PowerShell can be started by clicking Windows PowerShell 
in the start menu or running powershell.exe from the 
command-line interface or using Executing the following 
command: 
get-command
This will output all available commands in your PowerShell 
session, as illustrated in Figure
Figure 1.5: PowerShell console


PowerShell Integrated Scripting Environment
PowerShell Integrated Scripting Environment is a scripting 
editor for writing more complex PowerShell functions and 
scripts.
It provides graphical interface for multiline code 
development, syntax coloring, and selective execution. The 
biggest advantage of ISE is integration with the currently 
used Windows Operating Systems but Microsoft 
deprecated starting Windows PowerShell 6.0 Core. ISE is 
not included in Windows Server 2022, and it is not 
currently in active development. You can start by 
navigating to the Start menu and running the ISE 
command in the PowerShell command-line, as shown in 
Figure

Figure 1.6: PowerShell ISE
If you would like to know what the version of PowerShell on 
the machine is, just execute the following: 
$PSVersionTable
All the details regarding the versioning will be presented.

Visual Studio Code
Microsoft is currently promoting writing any type of 
PowerShell scripts in Visual Studio Code with the 
PowerShell plugin. One of the biggest disadvantages of 
that solution is that it is not available by default, and you 
need to either install the VSCode software on your laptop 
or download the portable version. Fortunately, installing 
extensions to VSCode does not require administrator 
permissions in most cases. After the deployment is 
completed, you need to install the PowerShell Extension to 
get the most useful features supporting the PowerShell 
scripts development. Figure 1.7 illustrates the VSCode 
workplace with PowerShell extension installed:

xj File Edit Selection View Go Run Terminal Help
• scnptpsl - Visual Studio Code
U LI LU I OS
POWERSHELL COMMAND EXPLORER O
A:
Add-AppPiuviMunedSliaiedPackag... 
Add - AppSI iai edPackayeCLN (tail lei 
90 
Add-AppvCtieutCuiiiecliuiiGiuup
Add-AppvCIie, it Package 
- 
Add-AppvPublisInugSeivei ® &
Add - AppxPd Jiag e 
Add-Appt Pt uviwmied Package
□3 
Add-AppxVuluine
Add-BCDataCad ieE
*tet
 ruui i 
[£] 
Add-BilLuckeiKeyPiuleclut
Add-BilsFile 
Add-CetbfiLdteEiMulliiief itPulicySer.-. 
Add-Cumputei 
Add-Cuntei it 
Add-Dtn>ClietitDuhSet veiAddiess 
Add-Di isChetilNi ptRule 
Add-DtcCtustetTMMdppiinj 
Add-EtwTi acePi ovidei 
Add-Histuiy 
Add-li utiatui I dTuMa Jji igSet 
Add-JubTnyyei 
Add-KdsRixjtKey 
Add-LocalGioupMeiiibei 
Add-Mernbei
Z><X. 
Add-MpPiefei ence
Add-MpPiefetetice 
Add-Net EvetilNelwuikAdaplei 
Add-NetEventPadcetCaptureProv»d...
X smpLpsI •
C. > Lbeis > wnidiu > X suipLpsI 
1 SPSVersionTable 
2
PROBLEMS OUTPUT DEBUG CONSOLE TERMINAL
PS C:\> SPSVersionTable
Njtc
PSVersion
PSEdition
PSCanpatibleVersiom 
Bui Inversion
CLRVersion
WSManStackVersion
PSReaotlngProtocolVersion
SocialixationVersion
PS C:\> □
®o Ao
Value
5.1.2200O.832
Desktop
(l.e, 2.0, 3.0, 4.0...}
10.0.22000.832
4.0.30319.42000
3.0
2.3
1.1.0.1
+ - X
0 PowerShell... 
13"] powershell
Ln2.Coll Spaces:4 UTF-8 CRLF {> PowerSbel ff C
Figure 1.7: Visual Studio Code with PowerShell extension

Windows Terminal
Windows Terminal is not exclusively for using PowerShell 
but provides a nice experience for every Windows 
administrator. The tool is developed by Microsoft, and you 
can start PowerShell or the command-line console in 
separate tabs and start multiple PowerShell sessions to 
remote devices. It also supports Azure Cloud Shell, which 
can be connected to directly from the Terminal window. It 
needs to be installed separately from Microsoft Store with 
some workarounds, but it is not officially supported on 
Windows Servers. A sample Windows Terminal view is 
shown in Figure
Figure 1.8: Windows terminal

Notepad + +
This is one of the editing tools preferred by many 
sysadmins; it is extremely useful when writing PowerShell 
scripts. It provides excellent features for multiple 
programming languages and is one of the simplest code 
editors, as illustrated in Figure
U C:\Program File$\WindowsPowerShdl\Modules\Pack»geManagement\1.0.0.1\P»ckageManagement.psd1 - Notepad--(Administrator] 
—OX
file fdit Search yiew Encoding Language Settings Tgols (vtacro £un Plugins Window I
o s e o . s i -r % ft i p c
H Package Management pad 1 □|
Ml
GUID - "4ae9fd46-338a-459c-8186-07f910774cb8"
Author — "Microsoft Corporation"
CoccpanyNai&e • "Microsoft Corporation"
Copyright ■ "(C) Microsoft Corporation. All rights reserved."
HelpInfoUri • "httts; / /g: ,!u;r:s:ft.coR/ fwlinlr/?lmkid«3 j»2 2-4 !•*
Moduleversion - "1.0.0.1
*
 
PowerShellVersion • '5.1
*
 
ClrVersion • "4.0" 
RootModule — "Microsoft.PowerShell.PackageManagenient.dll" 
Description • *PackageManagement (a.k.a. OneGet) is a new way to discover and install software packages from around
Figure 1.9: Notepad + +

Notepad
Sometimes there will be no other choice. Logging in to the 
Windows Server Core without rich graphical interface 
would require reviewing and editing in Notepad. If it is a 
few lines of code, that is feasible. But it is not something 
that would help in writing advanced scripts and large 
PowerShell modules. An example module edition in 
Notepad is shown in Figure
< PackageManagement ■ Notepad 
— OX
File Edit View 
®
*** GUID - "4ae9fd46-338a-459c-8186-07f910774cb8“
Author - "Microsoft Corporation”
ConpanyNaae ■ "Microsoft Corporation"
Copyright - "(C) Microsoft Corporation. All rights reserved."
HelpInfoUri - "https://go.Microsoft.coa/fwlink/?linkid-392040"
Moduleversion - "1.0.0.1" 
PowerShellVersion - *5.1'  
ClrVrr<1nn - "4.0"
Lnl.Coll 
100% 
Windows (CRLF) 
UTF-8
Figure 1.10: Notepad

How to start with PowerShell?
The easiest way to switch the mindset of Windows 
Server administration using PowerShell is to try to 
review all the administrative tasks that need to be 
performed during your daily operations and think 
whether they can be automated using PowerShell. It will 
help us save time and focus on service improvements 
rather than maintenance. This challenge will not be 
completed in one day; it will take a long time, and 
eventually, some of the tasks will remain manual. But 
thinking about it every time while performing 
administrative tasks is a clever way of pushing toward 
the right way of managing the Active Directory and IT 
infrastructure in general.
What helps is to continuously work with the command­
line interface when executing the PS commands for 
administration then learning to write PowerShell scripts 
in ISE or Visual Studio Code. The last solution will be the 
most useful because of built-in integration for version 
control systems like git repositories, GitHub, and Azure 
DevOps.

AD management options with PowerShell
Finally! So, what are our options when managing AD 
using PowerShell. Active Directory works on top of 
Window Server infrastructure. So, all modules and built- 
in commands that are available for managing on the 
servers will be useful for Managing Active Directory 
Domain Controllers. The options are as follows:
Built-in PowerShell commands for Windows Server 
management
Active Directory module that provides commands to 
manage users, groups and other AD objects and 
settings; it mostly uses ADWS for communication with 
AD
ADSI adapter that can be called from PowerShell and 
uses the LDAP protocol for communication with AD 
.NET class objects

Other custom non-Microsoft supplied modules, like 
Quest

Built-in PowerShell commands
When starting a PowerShell session, many modules and 
commands will be available by default. You can check 
those available commands by executing the following 
command:
(get-command).count
The results are shown in Figure
Figure 1.11: Windows PowerShell built-in commands
Depending on the context of that execution, we can get a 
different number of commands, which is shown in Figure

That could mean we are running it on a server with pre­
loaded modules, having some modules imported in our 
user profile or simply running it on different version of 
PowerShell.
Running Active Directory on Windows Server requires the 
maintenance of all necessary server components in the 
right way and with proper configuration; that would include 
storage, networking, security events, performance, and 
resource management. For example, executing the 
following command will display the details of all PowerShell 
processes:
get-process | where {$_.ProcessName -like "*PowerShell
*"}
The results are shown in Figure

Figure 1.12: Listing PowerShell processes
If we would like to see details about volumes on the 
machine, you can execute the command that is part of 
storage volumes:
get-volume
The results are illustrated in Figure
Figure 1.13: Displaying volumes details using PowerShell

Active Directory PowerShell module
Most of the PowerShell Active Directory management is 
performed using the Active Directory module. This module 
contains all the necessary functions to manage AD objects 
and server configuration from PowerShell and scripts 
perspective. It has some limitations as it mostly uses 
Active Directory Web Services for interacting with AD, so 
performance-wise, it is slower than connecting with ADSI 
and LDAP directly. Also, it does not handle running this 
model in multithread applications. On the other hand, if 
you are not developing custom solution or service for AD 
management like this will suite all administrative needs. 
You can use it on the Active Directory domain controller or 
machine with Remote Server Administration Tools (RSAT) 
installed.
On Windows 10/11 client device, execute the following:
Get-WindowsCapability -Name "Rsat.Active
*"
 -Online | Add- 
WindowsCapability -Online
The results are illustrated in Figure

Figure 1.14: Installing RSAT Tools
Remember to elevate PowerShell as an administrator, 
otherwise you may get permission errors.
On Windows Server, you would need to execute different 
commands:
Get-WindowsFeature | Where-Object {$_.Name -like "RSAT- 
AD-Tools"} | Install-WindowsFeature
This is illustrated in Figure

Figure 1.15: Installing RSAT Tools on Windows Server 
Operating System
This is because RSAT tools are available for very Windows 
Server without installing optional features from packages 
or online repositories.
Then, you will be able to import a module into your 
session: 
import-module ActiveDirectory
The output of above command is shown in Figure
Figure 1.16: Active Directory module overview
If you would like to import a module in the environment 
where no Active Directory Web Services are available, you 
will be shown warnings that connectivity with ADWS was 
not established, and you will not be able to manage Active 
Directory. Creation of development environment is 

necessary to learn all of AD management by practicing and 
automating tasks.

Development environment overview
As mentioned, earlier, Active Directory works as 
Windows Server Role. So, to deploy AD, there is a 
requirement to deploy at least a couple of servers that 
run as virtual machines. Those VMs can be deployed 
locally using Hyper-V on Windows or other hypervisor 
products like VirtualBox or VMware workstation. Each 
solution will have advantages and disadvantages.

Physical environment
Yes, it is the old school way of deploying Active 
Directory. Implementing the environment this way would 
be a fascinating exercise, but it would bring much more 
overhead than benefits. When we create a development 
environment, we expect rapid changes, quick 
deployments, and potential configuration rollbacks, so 
running it on physical servers will not be the best 
solution. Because we would like to learn about Active 
Directory, it is probably too much overhead. Some 
companies may still use physical server infrastructure 
and knowing potential problems when running Active 
Directory Domain Controller is good advantage as well, 
but it is less and less required.

Hyper-V environment
Hyper-V Environment could provide all the necessary 
capabilities to run the development environment. There 
is no additional cost except hardware with resources 
that would allow us to run set of VMs. It can be 
established even on laptop with some good 
specifications, but in extreme workloads, there may not 
be enough resources for what we would like to achieve, 
especially from memory requirements perspective.
Advantage of that solution except of reduced cost is that 
it can be natively managed using PowerShell. So, by 
implementing the Hyper-V solution, the administrator 
will learn some more useful commands and improve 
their scripting skills.
A few downsides of the solution are that it is little 
difficult to share it between members of the team, as 
the company network will probably not allow you to 
introduce unmanaged systems. Additionally, it cannot 
be used in test and production environments in the 
company when it is not using on-prem virtualization.

Cloud environment
Development environment can be easily implemented in 
the cloud. Choosing your cloud provider for 
development can be different for each and every 
organization. Many providers provide a free trial period 
for new deployments, which can be used for learning 
the Cloud platform and building the sandbox 
infrastructure.
Active Directory is a Microsoft product and integrates 
well with other Directory Services like Azure AD using 
Hybrid deployments, so it is a good option to deploy 
Active Directory infrastructure in Azure.

Azure Cloud as the development environment for AD
Because of the position of Azure in the market and 
integration of Active Directory with Microsoft Entra ID, to 
support writing content of this book, Active Directory 
development environment will be implemented in Azure.
It would utilize built-in Windows Server 2022 images to 
deploy the necessary VMs and configure them to be 
promoted to hold Active Directory Domain Services with 
2016 Domain and Forest functional level. To reduce the 
costs, the environment will be limited to a couple of VMs 
inside the single forest, and some of the resources will 
be created and removed on demand to save the cost. 
Cost management for Active Directory is also a 
significant part of sysadmin work in every company, 
especially when running cloud workloads.

Conclusion
Learning Active Directory management is not possible 
by just memorizing specific commands or actions that 
need to be executed in specific situations. Hands-on 
experience is required with real AD environment that 
represents what could be found in production workloads. 
As Active Directory is a flexible solution, distinct types of 
architecture can be used, having knowledge about one 
type does not reflect on what can be required from an 
administrator to support AD infastrcuture in different 
companies.
PowerShell offers to AD administration significant 
improvement as compared to legacy GUI tools that are 
used in Active Directory for decades. Some of them are 
still used daily due to the nature of Windows-specific 
data and attribute visualization and also because of lack 
of replacement in a PowerShell ad module.
Organizations are promoting IT staff that can do more 
with less and can provide proactive solutions to 
implement and maintain their services with less 
administrational overhead. Learning automatization,

even for quite old technology like AD, is great for any 
sysadmin who would like to focus on directory services 
and identity and access management. Starting with 
implementing the development environment and 
staging the Active Directory Forest on the next chapters 
you will learn step by step on utilizing PowerShell for AD 
management. Get familiar with knowledge required for 
becoming professional Active Directory administrator.
In the next chapter, we will learn how to deploy 
development environment in Azure, configure the 
servers, and enable secure access to the environment.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

C
HAPTER
2
Setting up the Development Environment

Introduction
To be able to build Directory environment and build test 
domains, we first need to have an infrastructure 
environment that we could deploy Windows servers 
VM’s in which the Active Directory Forest could be 
created on. The solution that will be explained in this 
chapter is to build a development environment in Azure. 
This is common in many companies, as most companies 
using Microsoft products use the Azure Cloud Platform to 
host the infrastructure and implement hybrid identity 
with Active Directory and Azure AD.
Many of you could think that this is too much for a small 
development environment, and to some degree, that 
could be the case. The option of using free subscription 
is always there but spending a little on learning both 
Cloud and on-prem Microsoft solutions is a great 
approach for becoming a skillful sysadmin in the IT 
market.
One of the interesting parts of the dev environment 
hosted on Azure is that when you do not need the 
environment, you can schedule your VMs to be stopped

automatically daily or on demand, reducing the costs 
related to the compute, network, and security 
resources.
To be able to start with Azure, you don’t need to pay any 
money upfront for reserving the resources. Additionally, 
whenever you will create an additional resource, you 
could estimate the daily and monthly cost, check 
whether you will exceed your free credit and decide to 
scale specific resources up or down to adjust the cost 
and solution performance.

Structure
This chapter will cover the following topics:
Overview of cloud computing
Cloud computing offering types
Starting with Azure
Creation of the Azure subscription
Configuration of Azure Cloud Shell
Overviewing of Azure Portal and available resources
Resource groups, regions, availability zones, availability 
sets
Capacity planning for Active Directory
Deploying for AD domain controllers

Securing access to your cloud development 
environment
VM Connectivity check and server verification

Overview of cloud computing.
One of the definitions of cloud computing is the set of 
compute, storage, network, and application resources 
available over the internet network. Sometimes it is just 
called a computer somewhere else, but it is so 
distributed and diverse that ‘Cloud’ is the best word to 
describe this way of implementing IT services.
Only placing the infrastructure or applications over 
internet does not mean we already built the cloud. It 
needs to have specific characteristics:
On demand and Customers need to be able to ask for 
resources any time and should be able to configure it 
from management layer (management portal).
Network We should be able to access the Cloud 
resources from different places in the world with 
network connectivity and from diverse type of clients.
Flexible and We should be able to create new resources 
quickly, and we should also be able to remove and

decommission them if they’re no longer required. 
Depending on the resource type, there should be 
automatic scalability features implemented.
Shared We are paying only for real consumption and not 
reserving the physical hardware if not required. Instead 
of spending money on underlying infrastructure, we pay 
for used storage, CPU cycles, network traffic.
Pay as you The upfront cost model should not be 
implemented so that the services can be implemented 
in a flexible way, and it should be easy to decommission 
them at any point in time. Reservation options could be 
implemented to save costs for the long-term 
commitments.

Cloud computing offering types
Even if using only one provider for our Cloud 
implementation, we can choose from different types of 
resources, from single storage or network resources to fully 
self-managed applications, that we just need to integrate 
and use.
These types of workloads are described and grouped using 
the following categories:
This is the offering when the provider is taking care of all IT 
hardware, network, and physical locations. For example, 
Azur Virtual Machine is a perfect example of the IaaS 
offering as it contains compute, network, and storage 
resources to be used by customers.
This is the offering when it covers all the required 
resources delivered by IaaS and also manages the 
operating system, monitoring, management tools and 
database processing. For example, Azure SQL is a good 
example as we just need to manage the database inside 
the offering, and the SQL server, operating system, 
monitoring, and clustering is managed by Azure.

This is the offering when all the things mentioned earlier 
are covered and the application is hosted and maintained 
with the offering. All we need to do is configure the 
application to work as we require, integrate it with our 
systems, and provide access to end users. For example, 
SaaS offering can be Microsoft Office 365 or Microsoft 
Dynamics 365.
It can be described as shown in Figure
Development tools database 
management business 
analytics
Figure 2.1: Cloud computing offering types Source: 
Microsoft
We will mostly use the IaaS offering to implement our 
development environment in Azure. We can mix it with 
other services, for example, backup monitoring as we 
would like to focus just on customizing the Active Directory 
not spending a lot of time implementing the services we 
do not specialize in.

If you want to have great flexibility, you can run everything 
in on-prem data centers. By moving to Cloud and choosing 
the offering you can decide how much you would like to 
manage yourself and how much you want to leave for the 
Cloud provider.
You can learn more about Azure Cloud definitions and 
cloud computing from the following documentation:
https://azure.microsoft.com/en-us/resources/cloud- 
computing-dictionary/what-is-cloud-computing

Starting with Azure
To build your Azure environment first, you need to be in 
possession of Microsoft Account credentials. If you work 
already within an organization using accounts that are 
synced to Microsoft Azure AD, you could probably use it if 
the organization security settings allow you to create new 
subscriptions. To create an environment for your own 
needs, you need to have a Microsoft Live account. Follow 
the link https://azure.microsoft.com/free/ and click on Start 
Free as shown in Figure
V - 
□ x
5" Create Your Azure rree Account X +
-> C A azure.microsoft.com/en-us/free/ 
'fr K EJ Q ;
B Azure Explore v Products^ Solutions Pricing'-' Partners Resources^- 
P ••• Sign in |
Build in the cloud with an Azure free 
account
Create, deploy, and manage applications across multiple clouds, on­
premises, and at the edge
Start free
Pay as you go > 
Chat wrth Sales
Figure 2.2: Azure free account home page

Now, specify the Microsoft account of your preference, or 
you can choose to create one, as illustrated in Figure
Figure 2.3: Creating Microsoft account
Follow the steps for account creation and log in to your 
account with the credentials. Then, log into the Azure 
signup page with the right credentials. When using private, 
company or school accounts all at the same computer, one 
of the challenges is to keep those sessions separate and 
log in to the right portals with proper accounts. Figure 2.4 
shows a user logged into Azure signup portal:

X
<- -> C a signup.azure.<:om/signup?offer=ms-azr-0044p&appl<l=102&ref=azureplat-generic&redirectURL.. 
& L« £
5 Microsoft AzilfC 
adpowershdlazure^gmailxo<n Sign out
51 Start Chat
Figure 2.4: Logging in with MS account to Azure

Creation of Azure subscription
To be able to deploy all the necessary resources, we need 
to create Azure subscription. Subscription is a logical 
container that groups resources and organizes access to 
them. For our needs, we will create one subscription and 
place everything in it. In complex solutions, we could 
consider using multiple subscriptions that will allow us to 
split the resources logically and provide separate access 
on subscription level.
Once you have logged, fill all the necessary information to 
identify you as the subscription owner. Some of your 
personal and address information will be required, and you 
would need to verify yourself using the phone or payment 
card data. Once the form filling is done, go to the next step 
and verify your payment card, as illustrated in Figure

Figure 2.5: Creating Azure subscription
Depending on your billing location, there could be small 
charges on payment card that was used for sign up. Once 
your information is confirmed, you will be redirected to 
Azure or Azure documentation portal. Sign into your 
account again and navigate to After logging in to the 
portal, check the account details in the top-right corner, 
they will present you with information about the current 
account, options to switch directories as well to sign in 
with other account if needed, as shown in Figure

Figure 2.6 Azure Portal with account details
It is good to verify the list of the subscriptions available 
and the subscription ID and current role of each one. In 
large organizations, you could be assigned to some of 
those subscriptions with limited roles. Type ‘Subscriptions’ 
in the search field and click on your desired subscription 
name in the result list. You will be presented with the 
details of the current subscription. Potentially, you can 
rename the newly created subscription to something that 
would reflect your current work. Click on press the Rename 
button and complete the renaming process. It can take 
some time to reflect, after which Azure Portal should show 
the new name of the subscription, as illustrated in Figure

Figure 2.7: Azure Portal with account details
Great! Azure subscription is now ready for development 
environment needs. You may ask, ‘Wait a second, where is 
the PowerShell?’ Lot of manual tasks in the UI, and no 
automation here. This is the moment when we can 
configure our Cloud Shell. Because all the work until this 
point was done in the browser, implementing Cloud Shell 
will help with securing access to workstations, as it does 
not require any administrative access on end user device.

Configuration of Azure Cloud Shell
Azure Cloud Shell like any other cloud service, requires 
resources to work. To configure the environment, press the 
console icon on the top bar of the Azure Portal. You could 
choose Bash or PowerShell as your default console. You 
can switch later, but we will mostly use PowerShell during 
this course. Figure 2.8 illustrates the Cloud shell initiation 
in Azure portal:

Figure 2.8: Cloud shell initiation from Azure portal
After choosing your preferable console, specify the 
subscription you would like to create the Cloud Shell 
environment in. Using the Advanced Settings option in the 
next window will allow you to specify the Resource Group, 
storage account and even specific file share, as illustrated 
in Figure
Figure 2.9: Cloud configuration details
Let us leave it to default with Create new options, switch 
off advanced settings and proceed with the Create storage 
option. Once the resources are created, we can start using 

the Azure Cloud Shell. When executing command related 
to listing the subscription:
1. Get-AzSubscription
Result of the above command is illustrated in Figure
Figure 2.10: Listing subscriptions using PowerShell
You will find the details of your current subscription, which 
you currently manage with Cloud Shell. It is important to 
know the context when you perform any operations, as in

production environments, there could be many 
subscriptions representing testing and production 
workloads. To choose one of the subscriptions to be used in 
PowerShell, simply execute this command:
ADPowershellAzure
The results of above command are illustrated in Figure
Home - Microsoft Azure
X
0 i portal.azure.eom/#home 
Ci if? ☆
Microsoft Azure
P Search resources, services, and docs (G+/)
PowerShell v | 0 ?
PS /home/mariusz> Select-AzSubscription ADPowershellAzure
Name 
Account Subscript! Environmen Tenarrtld
onName t
ADPowershellAzure (8clc22ae-21d8-4a8c-a.„ MSI@50342 ADPowersh... AzureCloud 10af3e7d-_
PS /home/mariusz> []
Figure 2.11: Azure portal overview

Then, your current selected subscription will switch to 
ADPowershellAzure, and you can start working on your 
deployment.

Overview of Azure Portal
We almost ready to deploy the resources required for our 
development environment, but do we even know what 
needs to be created and what can be deployed? When 
navigating to we will be presented with a list of all the 
services that can be used within Azure, as shown in Figure
Figure 2.12: Azure portal overview

As our environment needs to be implemented on Windows 
Server, we need to focus on delivering the compute 
resource, like virtual machines, storage and configure the 
Azure Virtual Network. When clicking on the menu item on 
the top left and choosing the option of All those resources 
that your current logged in user have access to be 
displayed. You would probably see the storage account 
created for the cloud shell. When managing multiple 
subscriptions, applying the filter to reduce the number of 
presented resources is recommended. Figure 2.13 provides 
an overview of all resources deployed after enabling Cloud 
Shell:

Figure 2.13: Displaying all resources in Azure
When creating any type of resource, you would be always 
asked for the region you would like to place the resource in 
and the Subscription and Resource group. Other attributes 
will be specific to every service type. We have already 
created Subscription, so now we will proceed with creation 
of the Resource group. First one was created when we 
configured the cloud shell, but to better group the 
resources that share the same life cycle as, for example, 
VM and network for a specific test application, would be 
better to create the separate one.
We need to start with Resource group creation, as shown in 
Figure

Figure 2.14: List of resource groups after configuring Azure 
Cloud Shell

Resource groups, regions, availability zones
So let us create a Resource group for our development 
environment. We could create one for all or split resources 
between different Resource groups. For now, we will keep it 
simple. Go to the Resource groups section and click on the 
create button. Now, you would need to fill in the Name, 
Subscription, Region and ideally, add some tags, like the 
name of the application that the Resource group will be 
representing, as illustrated in Figure

Figure 2.15: Resource group creation
Using proper naming convention, that includes information 
about the specific resources already is hugely beneficial. 
Different organizations may adopt naming convention 
according to their guidance. Microsoft provides the 
following documentation that explains how it can be 
implemented: 
https://learn.microsoft.com/en-us/azure/cloud-adoption- 
framework/ready/azure-best-practices/resource-naming
We used the following name for our initial Resource group:
Res-Group-Dev-ADTest
Adding tags to resources helps in extending the description 
of the resources, identifying owners and the services they 
belong to, and merging with extra information from the 
company billing system.
Azure is constantly growing and increasing the number of 
data centers and regions. To find the right region for your 
services, you could use the following Microsoft web page: 

https://azure.microsoft.com/en-us/explore/global- 
infrastructure/geographies/#choose-your-region
For this course, we will use West Europe and North Europe 
(biggest and most common for Europe) and Central India 
(most developed for India).
Once everything is ready, Review button that will initiate 
the verification process. After verification is completed we 
can proceed with using the Create option. Summary is 
shown in Figure

Figure 2.16: Resource group list
Now we have the Resource Group ready. You can perform 
the same operation using the following command:
-Location WestEurope -Name Res-Group-Dev-ADTest
Make sure you do not update the existing resource group 
as it could already exist and it could be accidently updated 
with wrong information, as illustrated in Figure
Figure 2.17: Resource group creation using PowerShell

So, we have placed our resource group in the West Europe 
region. What is the region all about, and what does it really 
represent? Azure Region is a set of data centers deployed 
in close geographical locations distributed across the 
globe. By creating the Resource group in West Europe 
region, it is storing the primary metadata related to RG in 
this region. It is less relevant for Resource Group than for 
any other resource in Azure. But placing a VM in a specific 
region means it is physically storing the VM data and 
compute processing in one of the region’s data centers. 
Customers choose a specific region to host services closest 
to their customers or splitting the workload into different 
regions for the backup and recovery scenarios. To list 
available regions, just execute the following command in 
the Cloud Shell:
Get-AzLocation | select
Creating resources may not be possible in all locations, as 
it could depend on available hardware and Azure 
providers.
Availability and Disaster Recovery could be enhanced 
using the Availability zones. Availability zone is one or 
more data centers separated with one or two others 
Availability zones within the same Azure Region. When 
hosting multiple Active Directory domain controllers in the 

same region close to user workstations, splitting those 
servers into different Availability zones will give you better 
reliability and higher SLAs. Additionally, it will ensure that 
even if entire datacenter within the region will fail, service 
will be available to the customers. Availability sets, on the 
other hand is the splitting of the VMs between different 
hardware in the same Azure data center. For example, 
when you require servers to operate with low and ultra-low 
latency, it is better when they reside on the same data 
center, but you can increase the SLAs and availability by 
putting them into an Availability Set. Availability set will 
ensure that the VMs will never be placed on the same set 
of physical hardware, server, and storage and that it will 
be divided between fault domains.

Capacity planning for Active Directory
Now, we are ready to create VM infrastructure for our 
Active Directory Environment. But what specifications are 
required for hosting Active Directory Domain Controllers 
Microsoft provides detailed information regarding capacity 
planning for DCs; you can go through it here:
https://docs.microsoft.com/en-us/windows- 
server/administration/performance-tuning/role/active- 
directory-server/capacity-planning-for-active-directory- 
domain-services
They include specific estimates, as listed in the following 
Table

Table 2.1 : AD requirements for capacity planning
Let us consider the following example: Active Directory 
Forest with three domains serving 100,000 users that 
needs to be distributed between West Europe and North 
Europe as well as Central India and Singapore: 50,000 
users in EU domain and 50,000 users in AP domain. The 
scenario is illustrated in Figure
Figure 2.18: AD forest scenario for resource calculation

Forest root domain is not serving standard user logins. Let 
us assume 60KB * 50000+ ¥ *50000  *60  (GC of other 
domains size) = 4500000 ~= 4,5GB. 2GB Base Windows 
Server + 2GB for third-party apps and security agents, and 
we have around 8,5GB in total. Adding small buffer on top 
of it and the minimum requirement would be 12GB, which 
will be as well sufficient on the domain controllers from 
root domain because the database hosted there will be 
smaller.
Let us assume that user logins will be distributed equally 
between domain controllers and with this size of DC in EU 
domain: three in North Europe and Three in West Europe. 
Similarly, in AP domain: 3 in Central India, 3 in Singapore. 
50000 / 6 ~= 8333 users per server. Estimating the 
consumption there will need at least 8vCPUs per server. 
But when there are more third-party applications, including 
anti-virus and security agents, you need to add at least 1-2 
vCPUs just for serving those requirements, so there would 
be around 12 vCPUs per server. Sometimes it is better to 
scale out by adding additional Domain Controller rather 
than adding more vCPUs because we can always place the 
Domain Controller in a different site closer to users, 
making the requests or improving the Disaster Recovery 
architecture. In terms of storage, there are two ways of 
making it work. One is to just use OS disk to run Active 
Directory, and the second disk is for backup purposes. And 
another is to split the log partition and Active Directory

SYSVOL folder and the NTDS.dit file to different partitions. 
It really depends on the size of the AD. If we have tens of 
thousands of users, keeping them separate will be the 
right thing to do. It will provide more overhead and cost to 
the environment, but it could pay off in terms of 
performance overall.
This Table 2.2 can showcase Azure Disk configuration for 
domain controllers:
controllers: controllers: controllers:
controllers: controllers:
controllers: controllers:
controllers: controllers:
controllers: controllers:
Table 2.2 : Domain controller disk specifications
One of the elements of cloud infrastructure is cost 
management. That is why we can easily create the 
development environment without spending much money 

and reservice resources for long period of time. It is not 
only because we could pay a lot of money, but there will 
also not be so much workload, so keeping the 
specifications to the minimum is okay. Moreover, Azure 
gives us possibility to size our VMs after they are 
provisioned except storage, if we place AD data on one 
disk it is a complex operation to migrate the files to newly 
added disks. Anyway, the development environment VMs’ 
specification will be as follows (refer to Table
Table 2.3 : Domain controller disk specifications

Deploying virtual machines for AD domain controllers
After careful capacity planning for our ADDC, we are about 
to create the necessary VMs. Due to a cost, we are not 
going to create multiple domain controllers in all domains; 
the plan is to create the following:
ADPSTEST.NET: Single DC
EU.ADPSTEST.NET: Two DCs
AP.ADPSTEST.NET: Single DC
You never leave any production and even integration 
environments with one DC only, but just for development 
purposes, this scenario is acceptable, and replication 
between DCs will be shown in the EU domain only. Let us 
try to use Azure Portal to create our first development 
virtual machine. Navigate to virtual machines and click on 
create to proceed.
As always, we need to supply subscription, resource group, 
and region for our resource. Then, we would try to utilize 
the Availability zone 1 for our first DC. Azure Spot could be 

an option when creating dev environments, but there is a 
risk of getting our machines deallocated when other 
customers reserve Azure resources. Once all details, 
including the username and password, are filled in, we can 
move to the disk section as displayed in Figure 2.19 and 
Figure
Figure 2.19: VM creation compute and OS disk specification

Figure 2.20: VM creation compute and OS disk specification
For OS disk we do not choose the capacity as it is included 
inside the image that we choose to be installed on our VM. 
Only the disk type is selectable, and the default encryption 
is fine for this environment. For data disk, we choose the 
Create and attach new disk option, and for our needs, we 
select Standard HDD with S10 Tier with 128GB size, as 
illustrated in Figure 2.21 and Figure

Figure 2.21: VM creation -Data Disk Configuration

V - n
A Crr.Mr a virtual machine - Micrr X -|-
G a porta I.azure.com/-’create,'Micro soft.Visual Mac hne
Home >
Create a virtual machine
Basics Disks Networking Management Advanced Tags Review + create
Azure VMs have one operating system disk and a temporary dusk for shcrt-term storage Vbu can attach adorticna'I data disks. 
The size of the VM determines the type ci storage you can use and the number of data disks allowed, .earn more tf
Disk options
OS disk type * Q 
[ Standard SSD (loca llyredundant storage]■v
The selected VM size supports premium disks. We recommend Premium SSD for 
high OPS workloads. Virtual machines with Premium SSD disks qualify for the 99.9% 
connectivity SLA.
Delete with VM 0 
O
Enable encryption at host Q
O Encryption at. host is not reg^stened tor the selected suOscriptior. learn rrg-e »m:v1 enabling this feature
Review •+ create
--Previous Next: Networking *
fl? Giue feedback
Figure 2.22 : VM creation -Data Disk Configuration
Now we need to configure the networking part for our VM, 
as we did not create Virtual Networks but we allow the 
creation of new virtual network and subnet as is, and we 
choose not to assign a public IP, as shown in Figure

At Cne-ane 3 virtual machine - Micrc X -|-
4 C A portaUzurfcCcm.'^creaWWicros-jftVrtualMachine 
* Qj 
□ £
Heme >
Create a virtual machine
hone
Dili:
C Advanced
VlUdl I't.wulk
*
 O
Subnet
*
 O 
niHe P Ci
NIC eef/zert isour tv group Q
PjHC Hbflund port! *'  ffi
Select intowd pflll
ft Al tn#c 6«r tha rttmalwil be Merited b« dr<nuh-Vqu rbk be
I < Prwiout |[ HUT: MAnigfcttfrtX ? 
| 
A3 dire fettJUitk.
® hone
O Allnw vlftrtMf fs^rtt
| Select one cm mc<e port
Kcview -l- create
Figure 2.23 : VM creation - Network configuration
Management and advanced options will be skipped as it is 
not necessary to change the default options. It is useful to 
add the TAG to our server to make sure we know the 
purpose of the machine and do not rely only on the server 
name when identifying the owner, as illustrated in Figure

Home >
Create a virtual machine
X
Basics Disks Networking Management Advanced Tags Review + create
Tags are name/value pairs that enable you to categonze resources and view consolidated billing by applying the same tag to
multiple resources and resource groups. Learn more about tags c?
Note that if you create tags and then change resource settings on other tabs, your tags will be automatically updated.
Name 0 
Value 0 
Resource
Role 
: ADDS Domain Controller 
All resources
Domain 
: adtest.net 
All resources
Environment 
: DEV 
All resources
| Service_____________________________ | : | AD_________________________________ | | 12 selected_________________ >✓ | ®
|_____________________________________ | : |_____________________________________ | | 12 selected 
_________xzj
Review + create
Figure 2.24 : VM creation -Tags
After it is configured and reviewed, it is good to download 
the template for automation, using the option Download a 
template for This will make sure we have the Azure 
Resource Manager template, and we can use it to deploy 
the rest of the machines. Figure 2.25 shows the summary 
of virtual machine to be created:

Figure 2.25: VM creation - summary
After deployment is finished, all resources should be 
available for the next steps of AD deployment. We saved 
our template, so we can use it to deploy the next 
infrastructure. Deploying the servers from templates is not 
an easy task, and if you are not comfortable doing it via 
templates, it is better to just create VMs using Azure portal 
by repeating the steps taken for the first VMs, including 
the changes specified in the following instructions.

To upload the files, use the Upload button in Azure Cloud 
Shell. Once the template and parameter file are uploaded, 
you can replace all the names that would reference your 
previous deployed server and put a new name. The 
Replace function will be helpful here. Additionally, you can 
modify any other settings that are needed for different 
VMs. Figure 2.26 shows the editing of template parameters 
inside Visual Studio Code:
62
63
64
65
66
67
63
69
70
71
72
73
74
75
76
77
78
79
80
81
82 
R3
"lun": 9, 
"createOption": “attach", 
"delet eOption": "Detach", 
"caching": "Readonly", 
"writeAcceleratorEnabled":
DCAZEU001
DCAZEU002
Aa _*b.  .♦ 5 of 5
false.
"id": null, 
"naiwe": DCAZEU001 DataDiskG", 
"storageAccountType": null, 
"diskSizeGB": null, 
"diskEncryptionSet": null
"dataDiskResourcesl": {
"value": [ 
{
"nai»e": "DCAZEU00|_DataDisk_0", 
"sku": "Standard_LRS", 
"properties": {
"diskSizeGB": 128, 
"creationData": { 
"rreateOnt inn": "ewintv"
ab § g
Figure 2.26 : VM creation -Editing Azure Resource Manager
template
The password, however, will be missing, so you need to 
read it from the console directly. It can be archived by 
executing the following commands:

-Maskinput 
az deployment group create --resource-group Res-Group- 
Dev-ADTest --parameters parameters.json --parameters 
adminPassword = $Password
There could be many issues when deploying the VM using 
CLI, like missing parameters, duplicated names, and 
unavailable size of VMs in a specific region. Once we clarify 
all necessary changes in the template, we can safely 
repeat the execution. Figure 2.27 and Figure 2.28 shows 
the successful deployment of secondary server using the 
prepared and copied template:
A My &Mhbos^ - Mnranft Aztirc- x -f­
t- C A pt>rtal.iIure.«OiTi/*dQU<istiel|/
PowerShell 
© Q □ l> 
— 0 X
PS /homE/imariusz> (Password read-host i’^asklnput 
¥■ £¥■ ¥¥>¥¥■¥¥¥¥¥
PS /homE/mariusz> az deployment group create --resource-group Res-Group-Dev-ADTest --terapl 
ate-file template.json parameters parameters.json parameters a£tainPassword=$Passwird 
|\ Running ..

Figure 2.27 : VM creation -Template deployment summary
A My Dashboard - Microsoft Azure X +
C A portal.azure.eom/#doudshell/
□
Microsoft Azure
P Search resources, services, and docs (G+/)
PowerShell v'|©?@[JC!j{}[> 
— OX
"properties": null,
"resourceType": “disks",
“zoneMappings": null
}
]
}
L
"provisioningState": "Succeeded",
"tewplateHash": "5844085844815750222",
"teoplateLink": null,
"ti-estanip": "2022-09-07T21:39:54.634207+00:00", 
"validatedResources": null
L
"resourcedroup": "Res-Group-Dev-ADTest",
"tags": null,
“type”: "Microsoft.Resources/deploynents"
}
.PS /home/nariusz> 1
Figure 2.28 : VM creation -Template deployment summary
Now, we have the first EU server and can deploy the 
second server. The best way is to change the location to 
North Europe, and this is what we will do. To achieve that 
inside the template, we need to modify the location 
parameter inside as displayed in Figure

'’parameters'
*
: {
11 locaticn": { 
"value": "northeurc-pe"
b
Figure 2.29 : VM creation - editing template parameters
The creation of different VNET would also be required with 
different address spaces. So those parameters need to be 
modified to properly stage VMs in a new region and inside 
a new network. Modified attributes are shown down below:
{
"Res-Group-Dev-ADTest-vnet2"
},
{
[
"10.1.0.0/16"
]
},

{
[
{
{
„10.1.0.0/24"
}
}
]
},
After deploying the Europe servers, the same is applicable 
for the AP domain. Modification of the server names and 
the location parameter as well as virtual networks will 
allow us to create VMs. Overall, the development 
environment will look as shown in Figure

Figure 2.30: Virtual machines summary overview
The VMs are now ready, but how can we access them by 
remote desktop and ensure that we can configure them as 
domain controllers? In the next section, we will discuss 
how to access those servers properly so that they are 
secure and not exposed to attacks.

Securing access to development environment
We have prepared VMs with the latest Windows Server 
2022 Operating system. It is the most recent and secure 
server OS software from Microsoft. However, to access 
it, you still need to use Remote Desktop Protocol It is 
used when you need to log in to Windows server or 
Workstation remotely.
RDP started with Windows NT 4.0, and it was around for 
long time, there are several security concerns when 
implementing access using that protocol. Even recent 
versions are potentially vulnerable to attacks. Therefore, 
Microsoft recommendation is to not expose RDP access 
ports to public internet. So, what are our available 
options, including the ones that are not recommended?

Private access
One option is to allow RDP access from private 
networking. In the dev environment, using point to site 
VPN could be utilized. In production accessing servers 
always from internal network that is routable to Azure 
Datacenter through Site-to-Site VPN or dedicated 
circuits. That does not solve all the problems, and even 
inside the LAN network, allowing access to Domain 
Controllers from any other private subnet ranges is not 
recommended. You still need to segment and filter 
traffic between specific subnets and protect your 
Domain Controller infrastructure from accessing it by 
other network devices residing in less protected part of 
the network.

Public internet access
As mentioned earlier, Microsoft does not recommend 
this option for security reasons. It is not just 
recommendation, but there are many attacks on cloud 
providers abusing open RDP ports to gain access to 
VM’s and install any type of software including 
ransomware, malware, or cryptocurrency mining. Using 
strong passwords, it is not solving problems with 
potential 0 day security vulnerabilities in RDP protocol.
Even if Microsoft does not recommend public access to 
be implemented, when staging new VMs in Azure portal, 
you will have public IPs by default, and default ports are 
configured to be opened. If your server needs a public 
IP, make sure default ports are not assigned in Network 
Security Group For domain controllers, public IP is not 
recommended, and there is no reason to keep it 
attached. All servers created for development 
environment do not get public IP attached, so there is 
no possibility of public internet access.

Just-in-time access
Just-in-time access is a great alternative of providing RDP 
access from private and public networks. It is based on the 
concept of network security rules that can be applied in 
NSG or in Azure Firewall. The prerequisite for enabling Just 
In Time is to ensure that the server is protected by NSG 
and Windows Defender for Cloud is enabled for the 
required VMs. Once those prerequisites are met, you can 
enable JIT from the Security VM configuration option, or 
PowerShell. The same options are available when you want 
to request access. One of the downsides to that solution is 
that JIT is part of Defender for Servers plan which is 
generating additional costs for every server with protection 
enabled. The second one is that access is using the RDP 
port that is not recommended to be used over public 
network. To enable the protection, you can try to enable it 
using the 30-day free trial for Microsoft Defender for Cloud. 
Go to any VM in subscription, use the Microsoft Defender 
for Cloud option in the left menu and click the Try it free 
button. Follow the steps and press the Upgrade button if 
you agree to the plan upgrade details, as illustrated in 
Figure

/*  (XAZEU001 - Microsoft Azure
■ portalazure.eom/#@adpowershellazuregmail.onmicrosoft.com/resource/... Ci P
Microsoft Azure
P Search resources, services, and docs (G+/)
O X
h
Home > DCAZEU001
q DCAZEU001 | Microsoft Defender for Cloud
Virtual machine
X
I P Search (ark/)
Overview
«
Q For enhanced security with just-in-time access, adaptive application controls and more, 
upgrade your subscription's Microsoft Defender for Cloud plan
a
Activity log
'ft
Access control (IAM)
Security alerts
Tags
Discover threats at an early stage to quickly respond and prevent future attacks
Diagnose and solve problems
Settings
Upgrade your Microsoft Defender for Cloud plan for enhanced security, 
including
Networking
Connect
Windows Admin Center 
(preview)
Just In Time access, which reduces your exposure to network attacks 
Adaptive application controls to block malicious or unsupported 
applications
Threat detection using advanced analytics and global threat intelligence 
interactive investigation tools and automated remediation for rapid 
response
And much more
1
Disks
Try it free for the first 30 days
Figure 2.31(a) : Microsoft Defender for cloud enablement
Figure 2.31(b) : Microsoft Defender for cloud enablement
Now, when Defender for Cloud is enabled for the required 
subscription, you can enable JIT access per VM required. It 
might be required for some of the VMs, but it is not 
necessary. To enable that feature, just go to the VM details, 

press configuration in the menu and click on the Enable JIT 
button. The JIT policy will be created with default settings. 
And you can edit them from the Defender security console, 
as shown in Figure 2.32 and Figure
Figure 2.32: JIT configuration for VM

Figure 2.33: JIT configuration for VM
So, what has changed now? When you try to connect to 
the VM from Azure portal using RDP, you will be asked to 
first raise the access request every time you try to access 
the server. Depending on how the policy is configured, it 
will automatically approve or send the approval request to 
the configured user. Access will be granted for a specified 
period and for specific network addresses provided inside 
the request or configured in the JIT policy. Figure 2.34 
shows an example of a JIT request for access to virtual 
machines:

Figure 2.34: Connection to VM using the JIT option

Azure Bastion
All the previous methods of access require you to connect 
to the VM using old and unsecure protocol, which is RDP. 
Microsoft ensures that all vulnerabilities are fixed, and you 
use the more secure 3389 port, which provides traffic 
encryption by default, but the recommendation is to not 
open the RDP port over public internet. What is the 
solution? It is the Microsoft service called Bastion. Azure 
Bastion is a PaaS service that allows you to access your 
virtual machines using secure TLS protocol inside Azure 
Portal. This means it connects to Windows VM using the 
3389 RDP port and presents it directly on your browser 
using secure TLS over port 443 inside the portal. One of 
the major benefits is that you don’t need the public IP on 
every VM you would like to access; you just need to use 
one public IP for Azure Bastion that can support all VMs in 
the specific virtual network and virtual networks that have 
established the peering. In the simple scenario that we 
implement in the LAB environment, Bastion can be created 
when trying to connect to VM. Go to Connect in the menu, 
use the Bastion tab and click on Use as illustrated in Figure 
2.35 and Figure

Figure 2.35: Azure Bastion creation

Figure 2.36: Azure Bastion creation
To create Bastion, just choose Deploy Bastion or customize 
the settings and apply those in the new window. Azure 
Bastion creation time is around 5 to 10 minutes. So, it is a 
good alternative for JIT to create Bastion on demand and 
delete it when not required, especially because it adds to 
the costs and affects the overall budget. Additionally, 
deleted Bastion closes the entry point to our environment. 
Once the bastion is created, you can connect to the VM 
using standard credentials that are supplied when 
connecting by SSH or RDP. Figure 2.37 shows the Azure 
Bastion login window:

Figure 2.37: Azure Bastion connection

Most secure option: Hybrid Solution
When implementing secure access using one method, it 
is not always the best option. It is probably less complex 
and more flexible, but it is not the most secure option. 
Security can be implemented on different parts or layers 
of the solution, and in this scenario, you could use the 
hybrid solution: block public access, enable JIT over the 
VM and implement Azure Bastion. This will maximize 
security over how the VMs are available to the 
administrator. Before accessing a VM using Azure 
Bastion, a JIT request would need to be raised, which 
would include AzureBastionSubnet range that is used by 
Bastion. Once JIT request is approved, traffic is allowed 
between Bastion and the specific VM, and it could be 
securely used over TLS in the browser by the 
administrator supplying the correct credentials to 
access the servers.

Infrastructure deployment verification
Azure Subscription is created, VMs are deployed, and 
access to servers is secured. Now, it’s time to test what we 
created in this chapter. Make sure all the VMs are started 
before we start to work on them. It is better to switch them 
off when not in use to save some cost on Azure spent in 
development environment.
To verify that VMs are started properly, we could check the 
boot diagnostic status. Go to the VM and navigate to the 
Boot diagnostics option on the left. Both screenshot and 
serial log can provide useful information regarding the VM 
status. Especially on Domain Controllers when we need to 
troubleshoot long reboots or when the server is promoted 
as a domain controller, this information is useful and can 
show us if our DC is stuck in the boot process before we 
can access server using RDP. Figure 2.38 shows example 
boot diagnostics information for Azure VM:

Jx OCAZEUOOI - Microsoft Azure
□
C ® portal.azure.com/wSadpowershellazuregmail.onmicrosoft.com/resour... l£?
Microsoft Azure
P Search resources, services, and docs (G+/)
Home > DCAZEU001
g DCAZEU001 | Boot diagnostics
Virtual machine
X
| P Search (Ctrl
*/)
 
| «
Workbooks 
.
Automation
Tasks (preview)
® Export template
Help
Resource health
Q Boot diagnostics
Performance diagnostics
VM Inspector (Preview)
f Reset password
Redeploy + reapply
r Serial console
M Connection troubleshoot
® Support + Troubleshooting
Q Refresh © Settings P Troubleshoot
Screenshot Serial log
Updated: Monday. September 12.2022 at 11:39:18 PM UTC Download screenshot
Figure 2.38: Boot diagnostics
Once the servers boot properly, we can log in to them 
using Azure Bastion. For VMs protected by the JIT policy, 
we need to create an access request. Before that, make 
sure the JIT policy is configured with Azure Bastion Subnet, 
as displayed in Figure 2.39 and Figure

Figure 2.39: Configure JIT policy to include Bastion Subnet

A IT VK1 access CO”*gu  ration I.
A portal.azure.com/*vifW/M»<rosofr_Azufe_Se<urity_R3/ritNpTworkAcc... Ci If* ☆
E
Microsoft Azure
1 P Search resources, services, and docs(G+/)
... i
Home > DCAZEU001 | Configuration Just-in-time VM access
JIT VM access configuration 
x
CCAZEU001
4- Add S save X txcarn
Configure the ports fix which the just-in-time VM access will be applicable
Port 
Protocol 
Allowed source IPs 
IP range 
Time range (hours}
3389 
Any 
QDR 
WAW26 
3 hours 
•••
Figure 2.40: Configure JIT policy to include Bastion Subnet
Now we can request access for standard private IP and 
3389 port using All configured IPs After request is 
processed, we can connect using Azure Bastion with the 
credentials created earlier and click the Connect button, as 
illustrated in Figure 2.41 and Figure

Figure 2.41: Access VM using JIT and Azure Bastion

Figure 2.42: Access VM using JIT and Azure Bastion
If everything is set up correctly, you will be prompted for 
allowing the popup windows from Azure Portal, and 
reconnection will be required. And...we are logged in! 
Everything is as expected, as shown in Figure

DCAZEU001 - Microsoft Azure X T https://bst-00272d10-f14f-478S X + 
..
C i bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.eom/#/c... 3 if? ☆ 
* 5T C! £ 
:
Ka Server Manager 
— 
0 X
'■
Server Manager ► Dashboard - @ I K Mana9e Tools We» He|p
Figure 2.43: Established remote session
When first logging in to the VMs delivered from Azure, it is 
worth checking whether the hardware specs match our 
requirements, and whether the disk configuration is the 
right one for our deployment. In many companies, these 
responsibilities are divided between different teams, and 
you need to know how to verify this from both Azure portal 
and guest VM. Just type system in the start menu and open 
the configuration window, or you could also use PowerShell 
to provide you with disk information, as illustrated in Figure

|k DCAZEUOOT ■ Microsoft Azure x ■ htW?bs1-OO27M1 Q.fidMTSf X +
<- -> C * tKt-OQ2T2d1l?-ti4f-47B8-M5f-d3ett762B38e.b3StlOfLaiure-COnV
*/C«ef«/
 □ l£? V > □ X
Ad mini stater Widows PcwtrjhelJ 
— 
□ X
IjPS C:\Users\Administratorli Ipconfig /all
RKywlndows ip Configuration
Hast Name ................................................
Primary Dns Suffix ......................
Mode Type ................................................
IP Routing Enabled..........................
MINS Proxy Enabled..............................
ONS Suffix Seereh List. . 
. .
DCAZLUEC1
Hybrid
HO
Ho
<3kkbfjflmosqed khssheh ztowOe ax internal.cloudapp.net
Ethernet adapter Ethernet:
Connectton-specific DNS Suffix . 
Description...........................................
Physical Address..............................
DHCP Enabled...........................................
Autoconfiguration Enabled . . . . 
Link-local IPv6 Address .................
IPv4 Address...........................................
Subnet Hatk .....................................
Lease Obtained.......................................
Lease Expires ..................................
Default Gateway ... ......................
UUCP Server ...........................................
CHCPv6 LAID .....................................
0HCPv6 Client 0010..............................
DOS Servers ...........................................
NetBIOS over Tcpip..............................
ns C : XlTsersXAdminLat ratarl > ..
0kkbfj0mosqedkhssh0hztow0e.ax.internal.cloudapp.net
Microsoft Hyper-V Network Adapter
60-0D-3A-4A-CO-9A
Yes
ves
f e80;;5065;89 cc:bad B:b2 33X7(Preferred)
ie.fl.9.6(Preferred)
255.255.255.0
Monday, September 12, 2622 10:18:28 PM
Friday, October ifl, 2158 6:58:34 am
10.0.8.1
168.63.129.16
100666682
00-01-00-01 - 2A-AA- 65 - 80- 00- 00- 3A-4A-D0-8 A
163.63-129-16
Enabled
Figure 2.44: Verifying VM configuration
Sometimes, antivirus protection is not enabled while first 
logging in to the VMs delivered from Azure. Checking the 
status of antivirus protection will be right thing to do, as 
the servers get dynamic IP settings from Azure VNET. It is 
good to note the current settings of the server as they 
would need to be changed to static values during the DC 
promo process. The details are shown in Figure

Ac DCAZEU001 -MicrosoftAzure X Bi https//bst-00272d10-f14M78S X
<- -> C * bst-(X)272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.com/*/client/... 0 ir
15 » Administrator Windows PowerShell
®PS C: MJsers\Administratorl> ipconfig /all 
^Windows IP Configuration
Host Name ...................................
Primary Dns Suffix .....
Node Type ...................................
IP Routing Enabled...................
WINS Proxy Enabled...................
DNS Suffix Search List. . . .
Ethernet adapter Ethernet:
Connection-specific DNS Suffix 
Description ...............................
Physical Address.......................
DHCP Enabled...............................
Autoconfiguration Enabled . . 
Link-local IPv6 Address . . .
IPv4 Address...............................
Subnet Mask ...............................
Lease Obtained...........................
Lease Expires ...........................
Default Gateway .......................
DHCP Server ...............................
DHCPv6 IAID ...............................
DHCPvb client DUID...................
DNS Servers ...............................
NetBIOS over Tcpip...................
PS C: Misers\Administratorl> _
DCAZEU0B1
Hybrid
No
No
0kkbfj0mosqedkhssh0hztowGe.ax.internal.cloudapp.net
0kkbfj0mosqedkhsshehztow0e.ax.internal.cloudapp.net 
Microsoft Hyper-V Network Adapter
00-00- 3A-4A-D0-9A
Yes
Yes
f680::5065:89cc:ba40:b233%7(Preferred)
10.0.0.6(Preferred)
255.255.255.0
Monday. September 12. 2022 10:18:28 PM
Friday, October 20, 2158 6:58:34 AM
10.0,0.1
168.63.129.16
100666682
00-01-00-01-2A-AA-6S-80-00-0O-3A-4A-DO-9A
168.63.129.16
Enabled
Figure 2.45: Verifying VM network configuration

Conclusion
When deploying environment in Azure even if for our 
own needs, it is important to make sure the 
environment is created properly and with the right level 
of security. One of the advantages of Azure Resource 
Manager is when you explore your options inside Azure 
Portal and are just starting to define your requirements 
and creating your first VM of a specific kind, you can 
export your configuration to the ARM template and 
deploy it again using the automatic deployment. VMs 
can be created using Azure PowerShell or Azure CLI as 
well, but you first need to know what parameters you 
need and then try to automate it.
This chapter wasn’t about showing the Azure 
capabilities and all possibilities for automated 
deployment; it focused on what could come in handy in 
terms of deploying an Active Directory environment. 
Keep in mind that Active Directory environment should 
be one of the most protected and secured Windows 
infrastructure and that implicates different approach 
when even accessing it as administrator. Learning good 
habits from the beginning will prepare any sysadmin to 

the access policies that could be implemented in many 
corporate organizations.
Now that we have the environment ready, we will try to 
prepare the delivered VMs to become Domain 
Controllers in the next chapter. There are a couple of 
Azure configurations missing as well, especially in terms 
of networking, as during the promotion process without 
any other internal DNS infrastructure, Active Directory 
servers need to start serving the DNS services as well.
In the next chapter, we will learn about networking best 
practices for staging the Domain Controllers. We will go 
through Active Directory Promotion process, including 
forest and child domain creation. We will also look at 
creating additional Domain Controllers inside the same 
domain with replication of the directory data.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors:
https://discord.bpbonline.com


C 
HAPTER
3
Active Directory Environment Creation

Introduction
Building the development environment as shown in the 
previous chapter was necessary preparation for the 
work, we need to do to create the Active Directory 
environment. When creating the AD forest, a few things 
are to be considered before environment creation.
The first thing would be choosing the right name for our 
forest. Active Directory should not be exported into 
public internet. We could use the company.local non 
routable domain that would not be publicly exposed, but 
actually this is not a good idea. When you need to 
establish trust with other companies, they could have a 
conflict with other providers having the same naming 
convention as that domain will be not reserved. Also, 
when implementing hybrid scenarios, Microsoft needs to 
verify the domain in Domain Name System so it will not 
be possible without public registration, and some 
changes for the User Principal Name attribute would 
need to be performed.
Another option would be using the same domain name 
as the one used by registered public-facing services like

This could be configured, but it would be a bad setup as 
domain joined workstations would constantly try to 
resolve the domain even without connectivity to the 
DCs. That would cause connectivity issues when 
switching to company network and other potential 
problems with name resolution, as the same domain 
would be used both in internal DNS and in the public 
DNS, which are usually not the same system.
Microsoft recommends that we should go with the child 
domain of a domain name that is publicly registered. 
That would make sure no other entity could expose this 
domain and create duplicates, for example, That fixes 
all the previously mentioned issues, but it fails to give 
clarity in terms of naming. Therefore, one option is to 
consider a publicly registered domain name that is not 
used in any public services for the company, for 
example, We could start from here, have a 
straightforward way of building child domains, and keep 
the domain naming simple and efficient.
Once we clarify the top-level domain name for Active 
Directory (root domain), we can decide the logical split 
for child domains. Many companies could utilize a single 
domain in forest. In bigger and global organizations and 
with older deployments, there could be a split between 

different functional/department directories, but with the 
new security features and fine-grained password 
policies introduced, this is not necessary. In most global 
implementations, there could be a split between 
different geo-regions, like AM, EU, and AP. We would try 
to implement this in our AD development environment 
to show how those domains should be organized and 
configured.

Structure
This chapter will cover the following topics:
Design overview development environment
IP configuration for domain controllers
Promotion of first domain controller in the forest
Child domain promotion
Adding additional DC into the existing domain
Creating next child domain into forest
Environment verification

Objectives
This chapter guides readers through the intricacies of 
establishing a robust Active Directory (AD) 
infrastructure. Starting with a design overview of the 
development environment, it provides a solid foundation 
for planning. The discussion extends to the essential IP 
configuration for domain controllers, emphasizing 
network considerations. Practical insights into the 
promotion of the first domain controller in the forest and 
subsequent processes for child domain promotion and 
additional DC incorporation follow. The chapter also 
covers the creation of successive child domains, and 
thorough environment verification ensures a reliable 
and well-functioning AD architecture. By the end, 
readers will possess the knowledge to successfully 
design, implement, and validate a resilient AD 
environment.

Design overview for development environment
To be able to get some idea about the concepts of 
Active Directory scalability, flexibility, and multi master 
design, we need to create a forest with at least a few 
domain and multiple domain controllers. We will not 
introduce multiple forests at this stage because most 
scenarios of Active Directory management could be 
performed in a single forest except managing the 
external and forest trusts. There could be multiple 
scenarios to learn, like cross-forest migrations, using 
Active Directory Migration Tool but it is not in scope of 
this book to discuss those scenarios. Therefore, the 
chosen architecture for this environment would be as 
shown in Figure

Figure 3.1: Development environment design
Our forest structure would be adpstest.net forest with 
root domain, eu.adpstest.net and ap.adpstest.net 
domains as child. Active Directory hugely depends on 
DNS and provides AD-integrated DNS when using 
default options. Not every organization will utilize AD- 
integrated DNS. Sometimes those services are 
separated by organizations due to security reasons or 
service management decisions, but in most scenarios, it 
is sufficient to stay with default DNS deployment. We 
will implement AD with integrated DNS in the 
development environment. Changes on networking of 
Virtual Machines in Azure will be required to be able to 

safely host AD and AD-integrated DNS services in the 
Cloud.

IP configuration for domain controllers
By default, all Azure VMs receives dynamic private IP 
address. This address is not guaranteed when the server is 
rebooted or deallocated, as other resources can receive 
the released IP. To connect to the DNS server, we need to 
have an IP address that we know will not change 
dynamically because we will configure this setting in our 
networking to be able to resolve the DNS names properly. 
To be able to check what the current configuration of VM is, 
navigate to the Networking option in the left menu, click 
on the Network Interface name, and then choose the IP 
configurations option in the next window, as illustrated in 
Figure 3.2 and Figure

Figure 3.2: IP configuration settings details

Figure 3.3: IP configuration settings details
Verification of the current network configuration can be 
achieved using the PowerShell commands, as follows:
$a = (Get-AzVM -name DCAZROOT001) 
(Get-AzNetworkInterface '
$a.NetworkProfile.Networkinterfaces.id).IpConfigurations

DNS services need to be reached using IPs, so the DNS 
server cannot perform dynamic IP assignment because 
clients will not be able to trust their configuration. We need 
to make sure Domain controllers have static IP assignment. 
From the IP configuration settings, we need to click on the 
name of IP change the assignment to static, and apply the 
settings. Executing the following PowerShell commands 
will give the results shown in Figure 3.4 and Figure
$VM= (Get-AzVM -name DCAZROOT001)
$NIC=Get-AzNetworkInterface -Resourceid
$VM.NetworkProfile.Networkinterfaces.id
= "Static"
Set-AzNetworkInterface $NIC

Figure 3.4: Assigning static IP address for domain controller 
VM

Figure 3.5: Assigning static IP address for domain controller 
VM
Now we can think about DNS configuration for the first 
domain controller. Some documentation recommends 
putting the same IP address to the DNS settings of the first 
domain controller, and it is valid, because DC should point 
DNS configuration to the secondary server and itself. Azure 
VMs require DNS resolution to utilize Azure services, so 
pointing to itself when no DNS and AD services are 
deployed will potentially block VM from communicating 
with services like Configuration Management, monitoring 

and so on. That is why we are not going to configure DNS 
settings at this very moment; we will leave them as default 
to Azure DNS services for the moment and re-configure 
after the promotion is done. Let us promote the first 
Domain Controller and revisit DNS topic later in this 
chapter.

Promotion of the first domain controller in the forest
We can now log in to the server and start the tasks related 
to the creation of AD using the JIT access request and then 
Bastion to log in to the prepared VM. Before promotion, the 
required features need to be installed. To list the required 
features, we can use the command in elevated PowerShell 
console (with Run as Administrator option). Results are 
shown in Figure
*AD*

Figure 3.6: Listing the required AD features
To deploy AD domain controller, we need to install AD- 
Domain-Services feature, but installing the Remote Server 
Administration Tools for AD is desired as well. To perform 
this operation, we need to execute the following 
commands, and the results will be as shown in Figure
RSAT-AD-TOOLS
-IncludeManagementTools

Figure 3.7: Installing the required AD-related features
Now that the features are ready, we can proceed with 
domain promotion. Several times, parameters used for 
promotion will be not in a format that a command requires, 
or we will be prompted for extra parameters and could be 
inconsistent. It is better to collect all the necessary 
information before executing the command to be able to 
retry later with a different input. Safe mode credential are 
an interesting part of the promotion. This password is 
required for disaster-recovery scenarios, safe mode and AD 

restore. This password is set on each domain controller 
separately, but the recommendation would be to use the 
same on each of them in the forest or domain to be able to 
store it safely and make sure it will be accessible for the 
administrators in case of disaster recovery. As it is a secure 
string argument, we must capture it using the following 
command: 
$Password = Read-Host -Prompt 'SafeModePassword' - 
AsSecureString
Results are shown in Figure
Ai DCAZROOTOOI-MicrosoftAzur. X M DCAZROOTOOl 
X +
C A bit 00272dl0 f14f 4788 bd5f d3ccc7628o8c.ba5tion.ozurc.com/... D ☆ A =/ □ A
Administrator Windows PowerShell 
— 
□ X
PS C:\Windows\system32> JPassword - Read-Host Prompt 'SafeModePassword' AsSecureString 
SafeModePassword: •«•••••••»•»•»••••
PS C:\Windows\system32> _
Figure 3.8 : Capturing SafeMode password as secure string
Once this information is captured, we can prepare all 
necessary arguments for executing the command. In this 
example, we do not use separate drives for database and 
logs; we only use the OS drive, but we still include the 
default paths into arguments just to highlight the 
possibilities of customization. One more important setting 

is the NetBIOS domain name. It is legacy domain naming 
that is still required in multiple authentication scenarios; 
we will use ADPSTEST as a NetBIOS name. Now, to create 
the forest the following commands need to be executed:
$Password = Read-Host -Prompt 'SafeModePassword'
$DomainName
$DatabasePath = "C:\Windows\NTDS"
$SysVolPath = "C:\Windows\Sysvol"
$LogPath = "C:\Windows\NTDS"
$DomainNetbios = "ADPSTEST"
Install-ADDSForest -DomainName $DomainName - 
DatabasePath $DataBasePath '
-SysvolPath $SysVolPath -LogPath $LogPath - 
SafeModeAdministratorPassword $Password ' 
-DomainNetbiosName
Results are shown in Figure 3.9 and Figure

A CCAZROOTOOI - Mxroioft A.” X ■ DCAZROOTOOI 
X +
< 
> o a bjt-00272d10-f14f-4788-bd5f-d3eee7b28a8e.bajtion.azure.com/... O l£? ☆ 
* 3 □ <L •
£S Administrator Windows Powerthdl 
—OX
PS C:\Wlndows\system32s ^Password Read-Host -Prr-ipt ‘SafvModePass^ord
*
 AsSecuneString 
SafeHodePassword: ..............
PS C:\Hindows\systera32> SDomainNane -"adpstest.net" 
I
PS C:\Hindows\systera32> SDatabasePath - "C:\Hindows\NTDS“
PS C:\Windows\systen32> SSysVolPath - ■C:\Windows\Sysvol"
PS C:\Hindows\system32> SlogPath - "C:\Windows\HTDS"
PS C:\Hindows\systen32> SDonalnNetbios - "ADPSTEST"
PS C:\Hindows\systera32> Install-ADOSForest -DpnainHame SDonjinNarne -DatabasePdth SDataBasePath -Sys B 
volPath SSysVolPath -logPath SlogPath -SafeHodeAdministratorPassuord SPassword DonaintictbiosHarac $ H
DomainNetBios 
H
The target server will be configured as a donain controller and restarted when this operation is 
complete.
Do you want to continue with this operation?
ijjv] Yes [A] Yes to All [N] Ho [L] No to All [S] Suspend [?] Help (default is *Y “): _
Figure 3.9 : Performing AD forest promotion using
PowerShell

A OCAZROOTOOI ■ Microsoft Azl, X M DCAZROOTOOI 
X +
C ■ bst-00272d10-f14f.4788-bd5f-d3eee762838e.bastion.azure.com/.. □ |£ ☆ W FJ □ X ■
Administrator Windows PowerShell 
— 
□ X
WARNING: A delegation for this DNS server cannot be created because the authoritative parent zone
Install-ADDSforest
Validating environment and user input 
All tests completed successfully 
[oaoooooooooooocooooooooooooooooocoooooooooooc-oooooooooooooooooooooocoooooooooooocoooo] 
Installing new forest
Waiting for DNS installation to finish
For more information about this setting, see Knowledge Base article 942564 
(http://go.microsoft.com/fwlink/7LinkId-104751).
INARMING: This computer has at least one physical network adapter that does not have static IP 
address(es) assigned to its IP Properties. If both IPv4 and IPv6 are enabled for a network 
adapter, both IPv4 and IPv6 static IP addresses should be assigned to both IPv4 and IPv6 
Properties of the physical network adapter. Such static IP address(es) assignment should be done 
to all the physical network adapters for reliable Domain Name System (DNS) operation.
warning: A delegation for this DNS server cannot be created because the authoritative parent zone 
cannot be found or it does not run Windows DNS server. If you are integrating with an existing DNS 
infrastructure, you should manually create a delegation to this DNS server in the parent zone to 
ensure reliable name resolution from outside the domain “adpstest.net". Otherwise, no action is 
required.
Figure 3.10 : Performing AD forest promotion using 
PowerShell
Once confirmed, the domain controller will be rebooted 
automatically (which could be delayed using the switch). 
After rebooting, the server will become a domain controller. 
We will no longer log in to it using a local account but will 
use a domain account. The administrator account that we 
used to log in to the server will become Domain Admin on 
newly created domains. To show the domain details, go to 
control panel and open system properties. Open Advanced 
system settings or open the command prompt and execute

the whoami command to show the currently logged in 
user, as illustrated in Figure 3.11 and Figure
A oc«RMTw:-iA«Mait
*SL-
 x wmworwi 
X +
<- 4 C it 
C £ 6 
□ i :
Please wait for the Group Policy Client
Figure 3.11 : Checking the status of newly promoted 
domain controller

OCAZROOTOO! - Microsoft Atu- X ■ OCAZROOTO01 
X +
<- -> C ft bst-00272d10-fi4f-4788-bd5f-d3eee7628a8e.bastion.azijre.com/.. B ☆ 
* -/ □ X
CompUa deecnpocn
Odtatestnrt
To rename ths corrpjter or change <> domain or 
wokgroup. ckk Change
Foratample: 'US Production Sarver" or 
''Accounting Saver".
OCAZROOTO01 odpstest net
"1 Wndowa uiesthefolowng rdormaoonto tttrtfyyar comoutar 
on the network
Ful corcuter name
SI Command Prompt
Microsoft Windows [Version 10.0.20348.887] 
(c) Microsoft Corporation. All rights reserved.
C: \users\adpsadmin>whoami 
adpstest\adpsadnin
C:\Users\adpsadmin>_
ok Caneef
Figure 3.12 : Checking the status of newly promoted 
domain controller
After those checks, typically in smaller single-domain 
deployments, we can move to the AD configuration part, 
but as our development environment forest would contain 
multiple domains, we can proceed with the child domain 
promotion process. It is a little different as we already have 
root domain present, including the internal DNS services. 
Promotion process dynamically changed the settings to 
Microsoft default recommended for domain controllers, as

shown in Figure by executing the ipconfig /all command 
and checking the adapter properties:
<- -> C a bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.com/... □ & ☆ 
> =5T □ A :
A DCA2ROOTOC1 • Microsoft Azur X ■ DCA2ROOT001 
X +
ill
Preferred DNS
a
127J0.0.1
Preferred DNS encryption
DNS
Unencrypted only
DNS sj
IPv4 D
IPv6 D
C:\Users\adpsadmin>
IP assii
10.39 AM
9/25/2022
Figure 3.13: Checking the status of the newly promoted 
domain controller
ipp.net
Description .... 
Physical Address. . 
DHCP Enabled. . . .
Autoconfiguration E 
Link-local IPv6 Address 
IPv4 Address. 
Subnet Mask . 
Lease Obtained 
Lease Expires 
Default Gatewa 
OHCP Server . 
0HCPv6 IAID . 
0HCPv6 Client QUID. . 
DNS Servers
NetBIOS over Tcpip
Microsoft Hyper-v NetJ 
00-0D-3A-4A-50-1D
Yes
Yes
fe80::9c03:3aaa:197b:J
10.0.0.S(Preferred) 
255.25S.255.0
Sunday, September 25, 
Wednesday, November 1 
10.0.0.1 
168.63.129.16 
100666682
00-01-00-01-2A-A9-2F-: 
ill 
127.0.0.1
Enabled
After promotion, it would be good to reconfigure DNS 
settings on this virtual machine to point DNS client to itself 
and reset the network interface settings on guest to use 
DHCP configuration that would be managed on the Azure 

instead of locally on the server, but it is not mandatory at 
this point.

Child domain promotion
We already have the first domain in the forest, so we need 
to make sure we can query the DNS and find AD services. 
Therefore, we need to make sure the proper DNS service 
will be contacted. We will not do it from the guest machine 
but will perform it from the Azure side. This will make sure 
whenever the change of the DNS configuration is required, 
Azure will always be able to change the DNS settings of 
the virtual machine using the DHCP mechanism. To change 
those settings, go to the networking menu and choose the 
network interface name; then, in DNS server menu, select 
custom DNS settings. Point the primary IP server to the 
server used as root domain controller and point the second 
IP to the server itself, probably referencing wrong figure. 
After the promotion, promoted server will become the 
domain controller and DNS so this will be a valid setup 
going forward. Refer to the following Figure 3.14 and Figure

Figure 3.14: Checking the status of newly promoted 
domain controller

Figure 3.15: Checking the status of newly promoted 
domain controller
DHCP settings will be renewed only when the server 
reaches 50% of time left in the lease, and in our example, 
it would be days before the update, so we need to reboot 
the VM or perform the ipconfig /renew operation. Figure 
3.16 and Figure 3.17 shows the before and after versions 
w.r.t. the renew operation:

Figure 3.16: Renewing DHCP settings after DNS change in
Azure

fa (kajeuOOII J49_:1 • Microsoft A X ■ OCAZEUOOI 
X +
<- -> C a bst-00272d10-f14f.4788-bd5f-d3eee7628a8e.bastion.azure.com/... 0 
☆ ft 
:
Primary Dns Suffix .......: 
adtest.net
Node Type..............................................: Hybrid
IP Routing Enabled.............................. : No
WINS Proxy enabled.............................. : No
DNS Suffix Search List.......................: adtest.net
reddog.mic rosoft.com
Ethernet adapter Ethernet:
Connection-specific 
DNS Suffix 
. : reddog.microsoft.com
Description ....................................... : Microsoft Hyper-V Network Adapter
Physical Address............................... : 
00-0O-3A-4A-DO-9A
DHCP Enabled.......................................: 
Yes
Autoconfiguration Enabled . . . 
. : Yes
gS link-local IPv6 Address .................... fe89::S065:89cc:ba4e:b233%17(Preferred)
IPv4 Address..........................................: 10.0.0.6(Preferred)
Subnet Mask ....................................... : 2SS.255.2S5.0
Lease Obtained...................................... : Sunday, September 25, 2022 10:52:54 
AH
Lease Expires ................................... : Wednesday, November 1, 21S8 5:49:13 
PH
Default Gateway ............................... : 10.0.0.1
dhcp server .................................. : iba.b3.129.ib
DHCPv6 IAID..........................................: 100666682
DHCPVb Client QUID.............................. : 00-01-00-01-2A-AA-65-80-00-0D-3A-4A-DO-9A
DNS servers 
10-0.0,5
10.0.0.6
NetBIOS over Tcpip.............................. : Enabled
PS C:\Windows\systera32> _
Figure 3.17 : Renewing DHCP settings after DNS change in
Azure
Once the mentioned settings are configured, we can start 
the promotion process. First, we need to install the 
required features; do this using the following:
RSAT-AD-TOOLS
-IncludeManagementTools
Then, we need to collect the domain properties like for the 
root domain promotion, but here we need to provide

credentials to connect to the root domain with the required 
permissions, like domain and enterprise admins. To 
promote child domain we can use the following commands:
$Password = Read-Host -Prompt 'SafeModePassword'
$ParentDomainName
$NewDomainName = "eu"
$NewDomainNetbiosName = "EU"
$DatabasePath = "C:\Windows\NTDS"
$SysVolPath = "C:\Windows\Sysvol"
$LogPath = "C:\Windows\NTDS"
$DomainNetbios = "ADPSTEST"
$Credential = Get-Credential -Message "Provide Root 
Domain Admin Credential"'
-UserName "adpsadmin@adpstest.net"

Install-ADDSDomain -ParentDomainName -DatabasePath'
$DataBasePath
-SafeModeAdministratorPassword $Password - 
NewDomainName $NewDomainName'
-NewDomainNetbiosName -Credential $Credential
Results are illustrated on the following Figure 3.18 and 
Figure
A dcazeu0011349_z1 - Microsoft - X F| DCAZEU001 
X +
<- -> C ■ bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.  bastion, azure.eom/#/clie... □ 
□ X :
Administrator Windows PowerShell
□
PS C:\Windows\system32> SP.v 
Read-Host -Prompt ‘SafeHodePassword’ -AsSecureString 
i.
SafeHodePassword: **
«•
*•*••
***
•••
***
PS C:\Windows\system32> SParentDomainName -"adpstest.net" 
I
PS C:\Windows\system32> SNewOomainName = “eu"
PS C:\Windows\system32> SNewOomainNetbiosName - "EU"
PS C:\Windows\system32> SDatabasePath = "C:\Windows\NTOS"
PS C:\Windows\system32> SSysVolPath - "C:\Windows\Sysvol"
PS C:\Windows\system32> JLogPath - "C:\Windows\NTDS"
PS C:\Windows\system32> $DomainNetbios ■ "ADPSTEST"
PS C:\Windows\system32> SCredential - Get-Credential -Message "Provide Root Domain Admin Credential I 
" -UserName "adpsadmin^adpstest.net”
Windows PowerShell credential request. ? X
I ■':. .5; 0:0 
■ a -■ Ac- - C'c Cc: Cel
I 
r 
- i-rjet,:;: re
I -arc : C 
.......... ..
J Cancel
p Type nere to seaicii
12:05 PM 
9/25/2022

Figure 3.18 : Promoting the child domain
A dcazev0011349_z1 - Microsoft / X ■ DCA2EU001 
X +
<- -» C a bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.eom/#/clie... 0 l£> ☆ 
* □ A •
Administrator. Windows PowerShell 
—OX
PS c:\windows\systeni32> ^Password - Read-Host Prompt 'safeModepassword' Assecurestrlng 
[^l
safenodePassword: »»«•••••••***•••** 
■
Install-AODSDomain
Determining replication source DC
Validating environment and user input
Verifying prerequisites for domain controller operation...
[oooooooooooooooooooooooooooo
PS C:\Windows\system32> SCredential Get-Credential -Message "Provide Root Domain Admin Credential 
” -UserName "adpsadmin^adpstest.net"
PS C:\Windows\system32> Install-ADOSOoaain -ParentDornainName SParentOomainName -DatabasePath $Data 
BasePath -SysvolPath SSysVolPath -LogPath $LogPath -SafeHodeAdministratorPassword SPassword -NewDom 
ainName SNewDomainName -NewDomainNetbiosName SNewDomainNetbiosName -Credential JCredential
The target server will be configured as a domain controller and restarted when this operation is 
complete.
Do you want to continue with this operation?
[V] Yes [A] Yes to All [N] No [L] No to All [S] Suspend (?) Help (default is “Y“>: a 
WARNING: Windows Server 2022 domain controllers have a default for the security setting named 
"Allow cryptography algorithms compatible with Windows NT 4.0" that prevents weaker cryptography 
algorithms when establishing security channel sessions.
for more information about this setting, see Knowledge Base article 942S64 
(http://go.microsoft.com/fwlink/2LinkId-1047Sl).
P Type here to search
12:08 PM —
9/25/2022
Figure 3.19 : Promoting the child domain
After rebooting, the server will become a child domain 
controller. To verify that the domain promotion was 
performed properly, we can execute the whoami command 
and start the Active Directory users and computers snap-in 
with the dsa.msc command. The results are illustrated in 
Figure

I* DCAZEU001 • Microsoft Azure X . 1 DCAZEU001 
X +
<- -> C ® bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.eom/#/clie... 0 
□
Figure 3.20 : Verifying the child domain promotion

Adding additional domain controller to the existing domain
In any scenario, we should not be in a situation where a 
single domain controller hosts a domain. This situation 
would be extremely unreliable and dangerous in terms of 
resilience, and it is just unacceptable from a technical 
perspective. This is why secondary domain controllers are 
a standard that should be implemented even if the number 
of users in the organization does not exceed the capacity 
of a single server. First, we need to perform VNET peering 
to make sure servers created in different regions can 
communicate with each other.
To perform peering, we need to navigate to the virtual 
choose peering and add the peering configuration. Choose 
the destination virtual network and name connection from 
source and destination network. We will not block any 
traffic and will leave other settings as default, as shown in 
Figure 3.21 and Figure

Figure 3.21: Virtual network peering settings

Horw > Viitujl networks > Ros &oup Dsv ADTcst ‘.ncl | Feeing:
A। iw pwnj - Wewrt Ann x +
V - 
□ x
-> C ■ WUUZ^rt CQHX ’veA.< V»cro$OtX_Arure_N€rAOrtQ'Vfnui XK^CfVfennq&UGfV..
ti U? * 
* 
□ X ;
E
M icrosoh Azure
... • 
w
Add peering
viitml nrtwcrfc
| Kyrlli^ur- ps-'AtalitfcyC’DCk
rtul tibpta/mttfil mod*! Q
s^Krctk^1 C
[ rt2F-_i^EI’JK;UUL.,’f
¥rfui Mtacrt. *
I Kfl't<TViLyi-?cr^-ADFc-g!-^.TWl7
Iraffio to r<
*netr
 ratud rewsi k 0
(•) A!l0W{^ .!?
} b<Gck 31 traffic to the rctnoJc wl jjI ntftwtwk
Ti j«* r; TocrtJtCcJ frem rmW.T v^lwl fKCrritk 0
(_) RfrA Irrfk th « C*ig
 i^am Srcwft 
Ihtt '.irt.JSI r«we<St
Add
Figure 3.22: Virtual network peering settings
The server is placed in a different network. We need to set 
up JIT configuration for the VM to make sure it is protected, 
using the bastion from different network. Implementing the 
just-in-time policy will ensure that the connectivity from 
Bastion will be allowed when necessary to access the 
server. Configuration of the policy and the request is 
illustrated in Figure 3.23 and Figure

Figure 3.23: Just-in-time policy configuration for VM in 
different network

Figure 3.24: Just-in-time policy configuration for VM in 
different network
With access to the server secured, we can proceed with 
the promotion process. To stage an additional domain 
controller, we must first ensure that the IP assignment is 
static, and the DNS settings of the server point to the first 
DC in the domain and its own private IP address, like what 
was done when creating the child domain. Results are 
illustrated in Figure 3.25 and Figure

Figure 3.25: Network configuration of additional domain
controller

Figure 3.26: Network configuration of additional domain 
controller
As the additional domain controller in our environment is 
placed in a different region and a different virtual network, 
after we renew the Dynamic Host Configuration Protocol 
lease to update the DNS settings on the guest server, we 
need to ensure that the server can communicate with the 
other domain controller in a different network. Executing 
the ipconfig /renew and nslookup eu.adpstest.net 
commands, as illustrated in Figure will determine whether

we can resolve the name of the domain we want to join 
and promote the server we are working on:
A DCAZEU002 - Microsoft Azure X
■I DCAZEU0O2
A bst-00272d10.f14f-4788-bd5f-d3eee7628a8e.bastion.azure.eom/e/... O 
» -J □
SI Command Prompt
ONS Suffix Search List. .
reddog.microsoft.com
Ethernet adapter Ethernet:
Connection-specific DNS Suffix 
Description ...............................
Physical Address.......................
DHCP Enabled...............................
Autoconfiguration Enabled . .
Link-local IPv6 Address . . . 
IPv4 Address...............................
Subnet Mask ...............................
Lease Obtained...............................
Lease Expires ...........................
85 Default Gateway .......................
DHCP Server ...............................
0HCPV6 IAID ...............................
0HCPv6 Client DUID...................
ONS Servers ...............................
NetBIOS over Tcpip. .
. 
: reddog.microsoft.com
. 
: Microsoft Hyper-V Network Adapter
. 
: 00-00-3A-B5-DO-E5
. 
: Yes
. 
: Yes
. 
: fe88::alae:1841:70cl:6d7fX3(Preferred)
. 
: 10.1.0.4(Preferred)
. 
: 2S5.2SS.255.0
. 
: Sunday, September 25, 2022 0:25:16 PH
. 
: Thursday, November 2, 2158 4:28:37 AH
. : 10.1.0.1
. : 168.63.129.16
. : 100666682
. : 00-01-00-01-2A-AA-71-F6-00-0D-3A-B5-DD-E5
. : 10.0.0.6
10.1.0.4
. : Enabled
C:\Users\adpsadminsnslookup eu.adpstest.net 
Server: 
Address:
dcazeu001.internal.cloudapp.net 
10.0.0.6
Name:
Address:
eu.adpstest.net
10.0.0.6
P Type here to search
Qi
tool PM
9/25/2022
X
□
X
□
X
Figure 3.27 : Checking the DNS settings for resolving 
domain name
Since we have confirmed that we can contact the first 
domain controller in the domain, we can proceed with the 
domain controller promotion. As usual, we must install the 
necessary features with management tools, using following 
PowerShell commands:

RSAT-AD-TOOLS
-IncludeManagementTools
Results are shown in Figure
A DCAZEU002 - Microsoft Azure X M DCAZEU002 
X +
<- -> C ft bit 00272d10 (14f 4788 bd5f d3cce7628a8e.ba5tion.azurc.eom/#/... (5 i£? ☆ 
#=?[]■ 
:
| Administrator Command Pre m pt_________________________________________________________________________________ ~_____ O_____ X_
Administrator Windows PowerShell 
“OX
Windows PowerShell 
.
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ras/PSWindows
PS C:\Windows\system32> Install-WindowsFeature RSAT-AD-TOOLS -IncludeAllSubFeature
Success Restart Needed Exit Code 
Feature Result
True No 
Success 
{Remote Server Administration Tools, Activ...
PS C:\windows\system32> Install-WindowsFeature AD-Domain-Services IncludeManagementTools
Success Restart Needed Exit Code 
Feature Result
True No 
Success 
{Active Directory Domain Services, Group 
P...
PS C:\Windows\system32> _
Figure 3.28 : Installing features on the additional domain
controller
As we do not create any additional domain, we have to just 
provide the domain name we need to join and collect all

other necessary parameters before executing the 
promotion command. Following PowerShell commands are 
used when promoting additional DC:
$Password = Read-Host -Prompt 'SafeModePassword'
$DatabasePath = "C:\Windows\NTDS"
$SysVolPath = "C:\Windows\Sysvol"
$LogPath = "C:\Windows\NTDS"
$DomainName = "eu.adpstest.net"
$Credential = Get-Credential -Message "Provide Child 
Domain Admin Credential» -UserName
"adpsadmin@eu.adpstest.net"
Install-ADDSDomainController -DomainName 
$DomainNAme -LogPath $LogPath '
-SysVolPath $SysVolPath -DatabasePath $DatabasePath - 
SafeModeAdministratorPassword '
$Password -InstallDNS:$true -Credential $Credential

Results are illustrated in Figure 3.29 and Figure
M DCAZEU002 • Microsoft Azure X El (XAZEU002 
X +
<- -> c a bst-00272d10-f14f-4788-bd5f-d3eee7628a8».bastion.azure.com/*/,.. Q |^ ☆ 
* =J □ X :
| Admin Stator. Commjrd s i~rr.pt
0 Administrates Window
*
 PowerShell
C X
C; tW L ndowsX sy st e m3 2 >
C:\Windows\syst e«3 2 >
C: '.,kJLodows\sySt e.m32>
C: XkindousXsy st e m3 2 >
C : XL'indousXsyst e m3 2 >
PS C:\Windows\systeni32> SPassword - Read-Host Prompt 'SafeHodePassword' -AsSecur-eString 
Safeaodepassuord **
•*»*••«
*•**
«*
 
PS 
PS 
PS 
PS 
PS
" -UserName "adpsadriin@eu.adpstest.net"
SDatabasePath - "C:\Windows\NTDS"
SSysVolPath - "C:\Windows\Sysvol"
$LogPath - "C:\Windows\NTDS"
SOomainName - “eu.adpstest.net”
SCredential 
Get-Credential -Messagr 'Provide Child Domain Admin Credential
E3
Figure 3.29 : Installing features on an additional domain
controller

a DCAZEUM2
□ X
X
> C A bst-00272d10-f14f-4768-bd5f-d5eee7628a8e.bastion.azure.eom/-/c... D ☆
Aaminutrator windows Pcweohell
[Y] Yes [A] Yes to All (NJ No [Lj No to All [S] Suspend (?) Help (default is "Y"): a 
WARNING: Windows Server 2022 domain controllers have a default for the security setting named
Tnstal 1 - ArWiSDnmal nf nnt ml 1 pr
Determining replication source DC
Validating environment and user input
All tests completed successfully
[ooooooooooooooooooooooooooooocooooooooooooocoooooooooooooooooooooooooooooooooooooooooo] 
Installing new domain controller
waiting for DNS server service to be recognized... 0
physical network adapter. Such static IP address(es) assignment should be done to all the physical 
network adapters for reliable Domain Name System (DNS) operation.
^warning: Windows Server 2022 domain controllers have a default for the security setting named
winoows server zvzz ciomain controllers nave a oeTauit ror tne security setting nameci 
f“Allow cryptography algorithms compatible with Windows NT 4.0“ that prevents weaker cryptography 
I algorithms when establishing security channel sessions.
For more information about this setting, see Knowledge Base article 942564 
(http://go.aicrosoft.com/fwlink/JLinkId-104751).
WARNING: This computer has at least one physical network adapter that does not have static IP 
addrcss(es) assigned to its IP Properties. If both IPv4 and IPv6 arc enabled for a network adapter, 
both IPv4 and IPv6 static IP addresses should be assigned to both IPv4 and IPv6 Properties of the 
physical network adapter, such static IP address(es) assignment should be done to all the physical 
network adapters for reliable Domain Name System (DNS) operation.
Figure 3.30 : Installing features on an additional domain
controller
After rebooting, the server will become the domain 
controller. As we are now logging in as a domain user, we 
need to ensure that we provide the credentials of the 
Domain Admin that we used to connect to the domain. 
Administrator account of the server is not available 
anymore because this was not domain creation and there 
are no local accounts in domain controllers. We can verify 
the status of promotion just like we did when creating the 
new domain: right-click on domain name and choose the

Change Domain controller option to see the status, as 
illustrated in Figure 3.31 and Figure
J DCAZEU002 
x +
<- -> C 8 bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.com/... B ☆ 
* =? □ £ 
:
System Properties 
X
Computer Name Hardware Advanced Remote
L_r 
Wndows uses the Idovmg r«om»aWn to dentfyyow computer
onthenetwok
Computer descnpton 
|
For 
"IS Prrdirfton Swvrr" or
'Accounting Server"
Ful computer name: 
DCAZEU0O2euadpste5t.net
Doman: 
eu.adpstestnet
To rename this computer or change esdoman or 
Chanoe
workgroup, cbcx Change 
-—■
>>
33 Command Prompt 
— 
□ X
Microsoft Windows [Version 10.0.20348.887] 
(c) Microsoft Corporation. All rights reserved.
C:XUsersXadpsadmin.EU>whoami 
euXadpsadmin
C:\Users\adpsadmin.EU>O
OK | Cancel 
-Sy
Figure 3.31 : Installing features on additional domain 
controller

Figure 3.32: Installing features on additional domain
controller

Creating next child domain into forest
With two domains hosted inside the forest, we can now 
finish the deployment of the test infrastructure by 
deploying the last domain. The domain will be created in 
Asia Pacific location, so we need to start with proper 
network connectivity again. We will try to perform only one 
virtual network peering and see if connectivity will be 
possible between two regions. If we want to make sure all 
three regions have connectivity, we can create peering 
between all three regions: 1-2, 2-3, 3-1. This will work in 
small deployments, but in bigger solutions, proper virtual 
network gateways or route servers created in Hub Network 
are necessary components. We will just use peering 
solution for now in POC.
To perform the peering, navigate to vnet and choose the 
Peerings option, fill the naming fields, and choose the 
destination network. Leave the other options as default 
and proceed as illustrated in Figure 3.33 and Figure

Figure 3.33: Peering AP virtual network with West Europe
networking

/a Add peering - Microsoft Azure X -f-
<- -> C i portal.azure.eom/#view/Microsoft_Azure_Nehvork/VirtualNetworkPe... 
:
Home > Virtual networks > ResGroupDevADTestvnet2!1 | Peerings >
Microsoft Azure
| P Search resources, services, and docs (6+/)
_____1*1
Add peering 
x
ResGroupDevADTestvnet211
Remote virtual network
Peering link name *
| AP-EU 
v-|
Virtual network deployment model O
(•) Resource manager
O Classic
| | l know my resource ID O
Subscription * O
| ADPowershellAzure 
|
Virtual network *
| Res-Group-Dev-ADTest-vnet 
v |
Traffic to remote virtual network Q
(•) Allow (default)
O Block all traffic to the remote virtual network
Traffic forwarded from remote virtual network O
(•'i Allow (default)
Add
Figure 3.34: Peering AP virtual network with West Europe 
networking
We would need to repeat the steps to establish 
connectivity with other European regions. To be able to 
verify that we can connect to a machine using Bastion, we 
first need to configure the JIT policy to use hybrid security 
and ensure that it is only allowed to be contacted from

Bastion in different network, and only when it is necessary. 
We could implement additional bastions, but one bastion 
for all peered virtual networks is sufficient for testing 
purposes; in production, of course, we can implement 
multiple Bastions split between regions or between 
different services categorized between different security 
levels. To configure the JIT policy, navigate to the 
Configuration menu and choose to enable just-in-time 
access, and then navigate to Windows Defender settings 
and edit the JIT Policy; make sure you specify CIDR range 
for Azure Bastion, as illustrated in Figure 3.35 and Figure

Figure 3.35: JIT access configuration for AP domain 
controller
Figure 3.36: JIT access configuration for AP domain 
controller
Again, we need to ensure that the server can resolve the 
parent domain name, so we need to point the DNS client to 
use the adpstest.net domain server and to self-private ip 

address as secondary configuration. We will perform this in 
Azure portal. Navigate to the networking option in VM 
details and choose the network interface. Then, go to IP 
configurations, choose the configuration, and ensure that 
the assignment method is set to static. Do the same with 
DNS settings, as they need to be configured manually, as 
illustrated in Figure 3.37 and Figure
Figure 3.37: Configuring network settings for AP domain 
controller

Figure 3.38: Configuring network settings for AP domain
controller
Now, we can log in to the server and refresh the DNS 
configuration by executing the ipconfig /renew with 
following command ipconfig /all to verify the results and 
try to test the connectivity with both the root and child 
domains, as shown in Figure 3.39 and Figure

Figure 3.39: Verifying connectivity settings for DNS
resolution

Figure 3.40: Verifying connectivity settings for DNS 
resolution
Now we can proceed with domain promotion. Once again, 
we need to add the roles first:
RSAT-AD-TOOLS
-IncludeManagementTools
Then we can proceed with the promotion script, but this 
time, we will try to use the CreateDNSDelegation switch to

make sure the delegation to the child domain is created 
inside the adpstest.net DNS zone:
$Password = Read-Host -Prompt
$ParentDomainName
$NewDomainName = "ap"
$NewDomai\nNetbiosName = "AP"
$DatabasePath = "C:\Windows\NTDS"
$SysVolPath = "C:\Windows\Sysvol"
$LogPath = "C:\Windows\NTDS"
$Credential = Get-Credential -Message "Provide Root 
Domain Admin Credential" -UserName 
"adpsadmin@adpstest.net"
Install-ADDSDomain -DatabasePath '
-SysvolPath $SysVolPath -LogPath $LogPath -
SafeModeAdministratorPassword $Password '

-NewDomainName $NewDomainName - 
NewDomainNetbiosName
-Credential $Credential -CreateDNSDelegation
The results of the commands are illustrated in Figure 3.41
and Figure
A DCAZAP001 • Microsoft Azjrt X Q 0CAZAW01 
X 4-
<- -> C A bst-00272d'0-f14f-4788-bd$f-d3eee7628a8e.bastion.azure.com/*/clientf... □ 
☆ 
* =/ [] &
Administrator Window? PowerSned 
—OX
PS C:\windows\systea32> {Password Read-Host
SafeHodePassword: *•••••»•••
*••»»
*•»
PS C;\wlndows\systea32> JParentOomainHans "adpstMt.net"
PS C:\Windows\syster»32> {NewOonainName - "ap"
PS C:\Windows\systen32> {NewOonainNetbiosName "AP"
PS C:\windows\systen32> {DatabasePath - "C:\Windows\NTDS"
PS C:\Windows\syster»32> {SysVolPath "C:\Windows\Sysvol"
PS <*t\Winrtowc\«yct<»r»3?o  $1 ngPath "C ■ \Ui ndnweVNTnt"
PS C:\Windows\systen32x {Credential Get-Credential -Message "Provide Root Dorain Admin Credential" userN 
ane "adpsadmin^adpstest.net"
Provttf* Root Dom*r» Adnvn CredeoUol
US
*
 name: 
adteadnwi eadpstestne< v| ,
Password: 
[ •♦••
*•**
•••
*•••••••[
OK | Cante
Activate Windows 
Go w Settings to activate 
Windows
Figure 3.41 : Promotion of AP domain with DNS zone
delegation

fa DCAZAP001 -MicrosoftAzure X S DCAZAP001 
X 4-
<- -> C S bst-00272d10-f14f.4788-bdsf-d3eee7628a8e.basticn.azure.com/*/clieot/... Q ☆ A □ X :
B Adminirtrrtoc Windows PowerShell 
— 
□ X
Name: 
adpstest.net
Address: 10.0.0.5
Install-ADOSDomain
Determining replication source DC
Validating environment and user input
Verifying outbound replication is enabled-
(ooooooooeoooooo-oeeooooeooooeooooooioocoooooaooco'aoooooooooo'ao 
]
the target server will be configured as a domain controller and restarted when this operation is complete. 
Do you want to continue with this operation?
[Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend (?) Help (default is "Y"): a
WARNING: Windows Server 2022 domain controllers have a default for the security setting named "Allow 
cryptography algorithms compatible with Windows NT 4.0" that prevents weaker cryptography algorithms when 
establishing security channel sessions.
>]
For more information about this setting, see Knowledge Ease article 942564 
(http://go.microsoft.com/fwlink/?linkld«104751).
WARNING: The replication partner: DCAZROOT001.adpstest.net shows replication errors. You should use 
repadmin.exe to identify replication errors on the replication partner and resolve then before continuing 
the installation.
WARNING: This computer has at least one physical network adapter that does not have static IP addness(es) 
assigned to its IP Properties. If both IPv4 and IPv6 are enabled for a network adapter, both IPv4 and IPv6 
static IP addresses should be assigned to both IPv4 and IPv6 Properties of the physical .nhftwddk ladafter.
Such static IP address(es) assignment should be done to all the physical network adapterssjofr <feliable,a(e 
Domain Name System (DNS) operation. 
.... .
' 
windows.
Figure 3.42 : Promotion of AP domain with DNS zone 
delegation
Now, we have created all domains in the forest for testing 
environment. To verify the status of the deployment, we 
could use the standard Active Directory Users and 
Computers console for domain objects, and the Active 
Directory Domains and Trusts for the other domain 
relationships, as shown in Figure

. _ DCAZAP001
X
0
fi bst-00272d10-f14f-4788 bd5f-d3eee7628a8e.bMtioaazure.eom/#/dierit/... B L? ☆ fr □
□ x
& A«iw DW«4iy OirViSA! AAP Ttu'.V.
□ Afliv
*
 Oir«fftiy W«s SM CwpuW’.
□ x
Fite Action View Help
File Action View Help
Active Directory Domains and Trust.’ 
~ fi adprtert.net
> fi ap.adpstest.net
fi eu.adpstest.net
Name
Ifil
Action
adpstest.net
eu.adpstest.net
More Act... ►
Mere Act... ►
~ Active Directory Users and Com 
> 23 Saved Queues
v jfj adpsttst.net
2j Buittin
Computers
a Domain Controllers
O ForeignSecurityPrincipal
> C . Managed Service Accoui 
□ User?
Name
Type
Oeser
C Buittin
burltmDomain
'_ | Computers
Container
Delai
Domain Con... Organizational-
Defat
ForeignSecu...
Container
Defat
0 Keys
Unknown
! Mnnagad Se._
C nnininH
’ NTDS Quotas
Unknown
0 TPM Oevk«
Unknown
E3 Users
Container
Defat
»
>
Figure 3.43 : Promotion of AP domain with DNS zone 
delegation

Conclusion
Active Directory Domain and Forest creation is not a 
complicated process, but it is one of the most important 
implementations for every company that holds 
Microsoft-oriented client and server infrastructure, as 
most of those use Active Directory for SSO and 
management purposes.
Forest creation is done for specific infrastructure, and it 
does not need to be performed again; there need to be 
some re-design of the infrastructure, including the 
domain migrations or decommissioning. It is important 
to make sure all the architecture decisions have been 
made before setting up the environment and testing the 
setup in the development environments, as described in 
this chapter.
There are many follow-ups that need to be done in 
terms of the DNS setup. We need to make sure all the 
domains can resolve other domain names without any 
issues, as this will be required to perform cross-domain 
authentication. We need to make sure the domain 
controllers are assigned to the right Active Directory 

sites. This is because the AD network configuration 
needs to replicate the physical and Azure network 
topology as much as possible.
There are many ways of accomplishing domain 
promotion, including using the user interface, but it 
does not give any specific value to the process, and it is 
more difficult to replicate the same steps using the 
graphical interface and not PowerShell. Also, using the 
core servers for domain controllers is one of the best 
practices.
In the next chapter, we will learn how to configure the 
Active Directory environment, set up the Active 
Directory sites and subnet and organizational units, and 
create delegation for specific tasks and secure the 
access after the domain promotion process. It will be 
continuation of what we learned in this chapter and of 
making sure the environment delivers exactly what we 
would like to get from the Active Directory service.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors:

https://discord.bpbonline.com

C
HAPTER
4
Active Directory Environment Configuration

Introduction
After Active Directory forest deployment, we now have 
the possibility to learn AD management using all 
available methods. First, we need to make sure AD 
environment is configured and set up in a way that will 
match the company structure and global architecture. 
Different companies have diverse needs and operate in 
different regions and countries. These factors need to be 
taken into consideration not only when deploying the 
network and compute infrastructure but also when 
configuring AD so that it is done the right way.
AD as a product can deliver services to small 
environments and perform overly complex 
implementations. Therefore, most probably in small 
deployments, there are fewer customizations to be 
performed when delivering the solution, but there is 
some guidance to be followed to make sure the 
deployment is done in a consistent and secure manner. 
In bigger deployments, there is much more to configure, 
especially from the networking and security 
perspectives.

As our deployment is well integrated with Domain 
Naming Services integrated deployment and most 
organizations follow this model, we first need to 
configure proper DNS forwarding, DNS ones and client 
configuration on the domain controllers. Once this is 
done, we will follow up with the sites and subnet 
creation to better reflect the physical locations and 
virtual network topology.
Once those aspects are covered, we will try to establish 
logical structure inside Active Directory by the creation 
of the Organizational Units and access delegation. This 
will be important to manage the computers and users 
the right way, and it will allow proper access delegation 
for specific teams.
At the end of every deployment, an important task to 
perform would be permissions cleanup for standard 
built-in accounts and removal of some standard group 
membership for roles that are not used all the time. 
Changing the password of the administrative accounts 
could be beneficial as some of those could be stored in 
PowerShell history, scripts or inside procedures.
Once the mentioned actions are performed, we can say 
that AD is ready to onboard customers. With proper 

delegation performed, only service users should be 
allowed to join the machines to the domain in specific 
organizational units. Standard users should be created 
by teams in a specific structure This will ensure that 
since the beginning of their life cycle, objects will be 
organized, and specific group policies will be applied to 
them if required.

Structure
This chapter will cover the following topics:
DNS forwarders and zones configuration
AD sites and subnet creation and configuration
FSMO role holders migration
Default domain policy and default domain controller 
policy management and configuration
Creation of OU structure and delegation
Basic Active Directory Management using RSAT tools 
and PowerShell
Cleanup of default user permissions

Objectives
This chapter aims to guide you about Active Directory 
network and structure configuration and delegation, 
introducing AD sites and subnets and organizational 
units’ concepts. We will go through configuration and 
setting up of AD in the way that it will reflect on what 
the business requirements are. We will also get familiar 
with all configurations required before releasing AD to 
customer usage and when introducing a new domain, 
site or OU.

DNS forwarders and zones configuration
As mentioned earlier, AD is highly dependent on DNS 
resolution, and having the right DNS setup is crucial for 
any AD environment, especially multi domain forest with 
integrated DNS setup. When we deployed the child 
domains for the forest, we chose only one of them to 
create DNS delegation, and the other was created without 
it. Now we need to verify that we can properly resolve all 
the domains without any problems from both root and 
child domains. To verify those settings, we can utilize the 
dnsmgmt.msc (DNS management nslookup and resolve- 
dnsname commands.
As shown in Figure there is a forward lookup zone 
adpstest.net created with ap delegation object on the root 
domain controller. There is no information about EU 
domain at all:

. _ DCAZROOTOOI 
X +
-> 0 A bst-00272d10-f14f-4788-bd5f-d3eee7628a8e.bastion.azure.com/*... □ E? ☆ ft —J Q| X :
9, DNS Manager
File Action View Help
S DM5
v DCAZROOTOOI
v J Forward Lookup Zones
> k - _msdcs.adpstest.net
. _ydp
□ »p
> 1 DomainDnsZones
> Cl rcreitDnsZonci
, Reverse Lookup Zones
7*1  Trust Points
Conditional Forwarders
N<mt
2J DomainDnsZones
""1 ForestDnsZones
[""|(samtas parent folder) 
[""|(same as parent folder) 
[~~](£am« ac parent folder) 
dcazrootOOl
DCAZROOTOOI Properties 
? X
Debug Loggng Event Loggng Morrtomg Security 
Interfaces Forwarders Advanced Root Hrts
Forwarders are DNS servers that ths server can use to reserve DNS 
quenes for records that ths server cannot resolve.
IP Address 
Server FUDN
168.63 129.16 
< Unable to resolve >
0 Use root hrts f no forwarders are avaiable 
Edt
Note I condbonal forwarders are defined for a given doman. they wd be 
used mead of server level forwarders To create or vww condbonal 
forwarders, navigate Io the Condbonal Forwarders node n the scope tree
OK 
Cancel Aook 
Heto
Figure 4.1 : DNS zone configuration
After right-clicking on the server name and choosing the 
Properties option, we can find that forwarders are pointing 
properly to Azure DNS services. So let us try to perform 
some basic tests to show us that we can cross resolve all 
domains in the forest, which will be good in cross-domain 
authentication scenarios. The following commands will 
perform all basic tests to check whether we can resolve 
domain names from our forests:
Resolve-DnsName -Server

Resolve-DnsName -Server
Resolve-DnsName -Server
Resolve-DnsName -Server
The results are shown in Figure
□
x
H DCAZRQCfTO&l
G i bsl-D0272dl0-f14f-4783-bd5f-d3eee7fs28a6e.bastiOn.azurAcam/»Alient/... D l-'t'
A 
=
S Window PsrttriWl
-ox
PS C:\Users\adpsa(ifflin> Resolve-D<isH
**e
 rakrosoft-COm 
19-9-9.5
N
**
t
 
Type TTL Sett ion IPAtfdress
•icmsof t.tcxs 
A 
1585 Answer 
29.81.111.85
■1 croSof t. < fts 
A 
IMS Answer 
28.84.181.62
■icrosoft.tom 
A 
1585 Answer 
28.183.85.13
■icrtisof t. tom 
A 
1585 Answer 
28.53.283.58
■Lcrosof t. tom 
A 
1585 Answer 
28.112.52.29
PS C:Misers\adpsadmin> Resolve-Onsriare adpstest.net 
-Ser 18.8.0.5
Haoie 
Type TTL Section 
IPAddress
adpstest.net 
A 
6C3 Answer 
10.9.9.&
PS c:Mners\adpsadfflin> Resolve-DnsHwat 4p.edpstest.net server 19.9.9.5
N
**
t
 
Type TTL Settidn IPAddress
ap.adpstest.net 
A 
6&9 Answer 
18.2.8.4
P\ r • 
n> Rp^nl vp-fin ^fJarwi ph . adp<;.t
**q.f
 . net -,p[■'■■■ 1A_A A.1^
Al L vd 18 VV1 r <i u v.'s
Resolve-DnsHaite : eu.adpstest.net : DNS narw does not exist
At line:l char:l
Co 5e;: no? ;c ;c: .;.:e
+ Resolve-DnsNarw eu.adpstest.net -Server 10.0.0.S
Wine O
Figure 4.2 : DNS configuration testing

As we can see, we can resolve public domains, the domain 
name that the server is authoritative for, and the AP 
domain because we set up proper domain delegation 
before. So, the client is redirected to child domain 
controller from ap domain and properly resolves the name. 
For the EU domain, we receive an error message saying 
the name does not exist. This is because without DNS 
delegation or full forest DNS zone replication, we cannot 
resolve it from the root domain controller. To be able to 
resolve this, we could now create proper DNS delegation 
and replicate eu.adpstest.net DNS zone to all domain 
controllers in the forest. To create delegation, right-click on 
adpstest.net choose the New Delegation option, and fill out 
the details of the domain you would like to create the 
delegation for, as shown in Figure

Figure 4.3 : DNS delegation creation
As the eu.adpstest.net zone is held by EU domain 
controllers, changes need to be performed from the DNS 
servers. From the root server on DNS icon on the top right 
click and choose to connect to new server to of the 
eu.adpstest.net domain controllers please go to the 
specific domain name and right click for properties to 
display details, as shown in Figure
Figure 4.4: DNS zone properties details

We can see that the Replication properties is set to 
replicate to all domain controllers inside the domain. Now 
we can click on the Change option for replication, use all 
servers in the forest for replication option and confirm the 
warning as we do not run any Windows 2000 domain 
controllers, as illustrated in Figure
StArt d \xncrty iSOA
O T» «• doman wntretera •> ths toi 
eu.odostest-net
To al daman controiers n the sco
file Action View Help
* 41 E X □ fl dr | □ ml a ns;
DNS
3 DCAZEU002
v Forward Lookup Zones
> .AMdevadpstesLnc
> J, eu.adpstest.net
Reverse Lookup Zones
, Trust Points 
Conditional Forwarder
*
Choose how you want zone data to be repeated.
(a) Ta al DNS servers nmng on domon contekrs n ths forcsti Mtostcstnct
O To al DNS servers nmng on domar controlers n ths daman: eu.adpatest.net
I n ths daman for
Warning; This zone will no longer be hosted on 0*4$  servers 
running Windows 2000. Any 0*4$
 clients or servers that use 
those Windows 2000 DM5 servers wia need to be undated 
Do SOU want to contmue
*
Figure 4.5: Replicating DNS Zone across all forest DNS
Servers
You also need to ensure that the forwarders on both EU 
domain controllers are set to forward the requests to the

root domain controllers. Configuration is shown in Figure
Figure 4.6: Replicating DNS Zone across all forest DNS 
Servers
After all the changes. the EU domain could regain 
connectivity with the root domain and be able to establish 
the replication. If not yet the case, it is possible that the 
replication needs to be enforced between the domains, 
and sites and services topology need to be re-created. To 
perform those operations, we need to open the Active 
Directory Sites and Services console Navigate to servers 

and try to delete and recreate the topology, as shown in 
Figure 4.7 and Figure
Figure 4.7: Replicating DNS Zone across all forest DNS
Servers

Figure 4.8: Replicating DNS Zone across all forest DNS 
Servers
When all connectivity problems are resolved and the zones 
are properly replicated, the EU and root domains will be 
hosted on all domain controllers in the forest. Each of them 
will be an authoritative server for that zone, which 
decreases security posture as all admins from other 
domain would be able potentially modify the dns records in 
that zone. An alternative to this will be the DNS delegation 
we created for AP during the promotion and the EU domain 
we created before we performed the zone replication 
exercise. To avoid connectivity problems, the delegation

could be created since the beginning, and the zone 
replication can follow. The result is shown in Figure which 
includes examples of non-authoritative responses for 
ap.adpstest.net and authoritative responses for 
eu.adpstest.net on the root DC:
■ DCAZROOTOOI 
X +
<- -> C A bst-00272d10-f14f-4788-bd5f-d5eee7628a8e.bastion.azure.eom/-/chenVRENB... D ☆ jfc □ X :
File Action View Help
xra Ajiiarai a n j;
Command Prompt
£ OHS
> J «p.«dp$test.n«t
> D<AZEU0O2.eu.adp$te$t.net
v j DCAZROOTOOI
v 2) Forward Lockup Zones
> 
.«mdc$.edprte»t.net
> 
J, edpstest.net
> 
cu-adprteit.net
> i "1 Reverse Lookup Zones
> 23 Trust Points
> £] Conditional Forwarders
>>
| Name
TJ.msdcs
I sites
ZJ.tcP
ZO.udp
71‘P
DomainOnsZones
FprestDnsZones
[~| (Mme as parent folder) 
[~| (Mme as parent folder) 
[~| (Mme as parent folder) 
f-1 (same a*  parent folder)
| (Mme as parent folder) 
n(same as parent folder) 
[~|dcazroot001
Addresses: 16.0.0.6 
10.1.0.4
c:\Users\adpsadninsnslookup eu.adpstest.net 
Server: Unknown 
Address: ::1
Name: 
eu.adpstest.net
Addresses: 10.1.0.4 
10.0.0.6
C:\users\adpsadmin>nslookup ap.adpstest.net
Server: Unknown
Address: :: 1
Non-authoritative answer:
Naoe: 
ap.adpstest.net
Address: 10.2.0.4
C:\Users\adpsadrain>„
Activate Windows
Go to Settings to activate 
Windows.
Figure 4.9 : Result of DNS Zone configuration

AD sites, subnet creation and configuration
During the promotion process, we could choose the site 
that we would promote specific domain controller. After 
first domain controller in the forest was promoted we did 
not modify or create site or subnets - all domain controllers 
in the forest reside inside Default-First-Site-Name. To better 
split the workload between different domain controllers, 
we need to create different sites that could be assigned to 
multiple or single domain controllers.
Let us create sites that will reflect the regions in which we 
created our domain controllers:
WEEU01, NEU01, CEIN01
After opening the dssite.msc console, right-click on the 
Sites option and proceed with the New Site item, type the 
site name, and choose DefaultIPSiteLink with IP transport, 
as shown in Figure 4.10 and Figure

New Object - Site
»
Figure 4.10 : Active Directory site creation

At Wm L’-nertofy Sites ind Ser,-.j 
* Sitei
v Jj inw-Sw Tfjmgcfl
*
 
□
23 SHIP
Zj Swbftd
*
 
v thrficS Fifw-Sife Nartv 
v _3 kwi 
> 3 ocazaiwi 
> J DQZEU0S1 
> J CXUIUX2
>> 
> J OCAZROOTMl
\enr 
T/pe 
Ctrrr^rkn 
frri 
ftpl'trten Irttrvi!
gOffAULDPSL. iiiTltfib 
WO HO
Artr.f Dir rtary D$miin 5tW« 
X
O
Srtt kVltUOl Ms bttnutricd- lj!irtijh<tnlifrj
*«tiCrt
 d 
MEU01:
Insure th
*t
 '.W EUM tt linlrfd la other MM nd h EiCr lw
*i
 t at 
IRBfCprWft'T.
Aim lubntu I'm Mtf?(Ufi 1 ta l>K $Mbn<t» 40AU
*W
*
Install one m more De-frj- i Corrtfollert an ‘Alt UC1, e*r
 H-s^e 
nMmg DCs artlo tfi< Me.
«&u will ftc: i<f Itei mtmae u«j m
*
 imM tinw 
fisriAmvr □uffier, ^rteiiM iirrwmt.
J HW
Figure 4.11 : Active Directory site creation
The same operation can be performed using the following 
commands:
New-ADReplicationSite -Name "WEEU01"
-Identity "DefaultIPSiteLink" -SitesIncluded
New-ADReplicationSite -Name "NEU01" 
-Identity "DefaultIPSiteLink" -SitesIncluded

New-ADReplicationSite -Name "CEIN01" 
-Identity "DefaultlPSiteLink" -SitesIncluded
Normally we would create multiple site links and 
differentiate the schedules between different sites to make 
sure the replication is the most efficient between specific 
sites. This would be beneficial with excessively big 
environments that replicate data between different 
regions. In smaller environments, the cost could be 
normalized and scheduled replication to 15 minutes. To 
optimize the replication settings, we need to navigate to 
inter-site transports and and right-click on 
DefaultIPSiteLink and use properties. Reduce the 
replication schedule to 15 minutes as it is the minimum 
value to set, as illustrated in Figure 4.12 and Figure

Figure 4.12: Default Site Link schedule modification

Figure 4.13: Default Site Link schedule modification
Replication frequency can be set as well with using the 
following PowerShell command:
"DefaultIPSiteLink" -ReplicationFrequencyInMinutes 15
After site creation and replication configuration, we need to 
create proper Subnets that would cover all subnets that 
will be used by clients of Active Directory services. We do 
not need to cover all networking that is owned by the 
company, but the part of the networks that the client and 
server infrastructure for Active Directory will be placed

inside. The address space of Azure virtual networks 
created for development environment is presented in Table
Table 4.1: Domain Controller Disk specification
To create subnets and attach it to the right site, navigate 
to the Subnets item, right-click and choose the New 
Subnet option. Put the right subnet range and attach it to 
the right as shown in Figure 4.14 and Figure

Figure 4.14: Active Directory Subnet creation

Figure 4.15: Active Directory Subnet creation
Repeat the steps to create all the remaining subnets; they 
can also be created using the following PowerShell 
command:
-Name "10.0.0.0/16" -Site WEEU01
-Name "10.1.0.0/16" -Site NEU01
-Name "10.2.0.0/16" -Site CEIN01

The last part of the configuration is to assign the domain 
controllers to the proper sites. Even if they are addresses 
from specific subnets, they are assigned to the specific 
sites with specific settings in the configuration. To assign 
the DC to the right site, we need to navigate to the server 
object on the site it was attached previously; right-click 
and choose the move option. Refer to Figure 4.16 and 
Figure
. _ DCAZROOTOOI 
X +
4- -> C ■ bst-58925a31-cdf8-4f06-877b-13a9ceb67026.bastion.azure.com/*... O (£? ☆ 
* Of 1 
:
HJy Active Directory Sites and Services 
“OX
File Action View Help 
4*  I 2 JT" X _ £ G GT 3
Active Directory Sites and Servic Name
v ' 
I $—110.0.0.0/16
v _ Inter-Site Trr----—
ip 
Find...
** SMTP 
Move
vQ'Subnets; -----------------------------------
> |_) 10.0.0.0/
> jus ic.i.ao/ 
Jffi) 10.2.00/
> g CEIN01 
XX v 3 Default-First 
V Cj Servers
> □
> 3 ocx
> 3 oca;
> J OCAxkwiwi
> @ NEU01
> jS WEEU01
New 
)
All Tasks 
>
Cut
Delete
Rename
Properties
Help
Site
WEEU01
NEU01
CEIN01
Location
Type 
Description
Subnet
Subnet
Subnet
Moves the selected object
Figure 4.16: Moving Domain Controller to specific Active 
Directory Site

Active Directory Sites and Servic
V □ Srt«
v 23 Inter-Site Transports
»
Figure 4.17: Moving Domain Controller to specific Active 
Directory Site
Wf Active Directory Sites and Sen 
File Action View Help
Subnets
> 
|_J IO.OjO.O/16
> 
|_J 10.1^.0/16 
IO.ZO.O/16
[E CEINO)
J5 DefiuK-First-Site-Ntme 
v J Strven
> | DCAZAP001
> | ocAzeuooi
> 
5 0CA2EUW2
> 
' DCAZROOTOOI
PowerShell can also be used for assigning the server to the 
right Active Directory Site using the following commands:
-Identity "DCAZROOT001" -Site "WEEU01"
-Identity -Site "WEEU01"
-Identity -Site "NEU01"

-Identity "DCAZAP001" -Site "CEIN01"
After all that configuration, the overview of configuration 
should look as illustrated in Figure We would see that 
Default-First-Site-Name became an empty site, but we do 
not need to remove it:
>>
Active Directory Sites end Services
fjjfc Active Directory Sites and Services (I 
v 23 Sites
> □ Inter-Site Transports
v 23 Subnets
> 
Ju 10.0.0.0/16
> 
Ju 10.1.0.0/16
> 
Ju 10.2.0.0/16 
g CEIN01 
v 22 Servers
> 
g DCAZAPQ01 
g Oefault-First-Site-Name
_2 Servers 
g NEU01 
v . Servers
> 
a OCAZEU002 
g WEEU01 
v Servers
*
> 
| DCAZEU001
> 
j DCAZROOTOOI
Figure 4.18: Desired AD Sites, Subnets configuration

FSMO role holders’ migration
As explained in the first chapter of this book, Active 
Directory is distributed between multiple servers, but it 
uses Flexible Single Master Operations (FSMO) roles to 
ensure consistency with specific operations like schema 
modification, bad password attempts verification, and 
object creation with the distribution of RID pools between 
domain controllers. During forest creation, all FSMO roles 
for root domain are kept on a single server, and when we 
add the child domain, the domain unique FSMO roles are 
created on the first domain controller in the child domain. 
The general recommendation is to keep the forest-wide 
FSMO roles on root server that is running the PDC role. 
Sometimes it is recommended to split the RID and Primary 
Domain Controller roles, but with current hardware 
specifications, it is not a valid recommendation any more, 
even when AD has a massive number of new users created 
in a short span of time, because this is the time when the 
RID pools need to be refreshed.
Overall, the most important FSMO role to worry about is 
the PDC in all domains in the forest. You need to place it in 
the site that all other domain controllers from the domain 

have connectivity with, as every bad password attempt will 
be forwarded to PDC. Why is every bad password attempt 
forwarded to PDC? This is because when a user is changing 
their password, the password will be immediately updated 
on the Domain Controller they relate to, and this DC will 
replicate the password to PDC in case you try to 
authenticate with a different Domain Controller that does 
not have the updated password. In case that happens, 
your request is forwarded to PDC, and the authentication 
attempt is successful even if originally classified as a bad 
password attempt by the source domain controller.
In Windows environments due to the authentication is 
highly related to the time and timestamps in the 
authentication requests especially for Kerberos protocol. 
Time is usually synchronized from domain controllers; child 
domain controllers sync it with root domain controllers, 
and they sync it with PDC of the root domain controller. 
Typically, only that server syncs it with the external time 
source; while sometimes it can be changed to sync it with 
the external time source on different domain controllers as 
well, it is not standard design.
Taking all the mentioned points into account, we need to 
make sure the PDC server in all domains is running on 
reliable hardware and is accessible by any other domain 
controller. Also, root PDC should have network access to 
the time servers inside your organization (in DMZ possibly) 
that will sync time to the globally trusted external time

source. To verify our FSMO role setup for domain scope, we 
need to open the Active Directory Users and right-click on 
the domain and choose Operations as illustrated in Figure 
4.19 and Figure
_ DCAZ SOCTOOl
X
+
V - o X
<- -> C ■ bst-d5bd
*cb3-c1c
*-463-S-i13
*-S3dj131
*67i7.b4St>onj...
 0 (£? <7 
> 
□ A ;
~ Actz.e Directory Users «isd Computers 
—OX
A<t>cn Vxw Help
<■ +1 a 33 -rax
Q nl 1L M u T 2
~~ Acv.e Directory Uwi end Com Heme
> .2 Se.edQuer.es 
^.dmedpowenhed
* ^edpst-- —
> 
8< 
Delegate Control..
> 
23 C< Find­
> 
i. CX 
C henge Demen .
' 
C henge Domen CorKz Oder _.
Re<se dcmj.n f mxlonjl loti-.
\\ 
Operet<ns Mesters-
New 
>
AS Tests 
>
Refresh
Properties
Hep
1,pe 
Descr.pt.cn 
A
User 
eccount for *4-
User 
serd Re - Security Group... Members <n tKrt 9-cvp <— 
G»cvp . Mc-ntcri cf thrt ^rcsip — 
Ont roll.. s«ure, Grcvrp... M-rnt-ri c< thrt ^roup t— 
ord Rc.. $o«x<t> G-csrp . htemben m thn g-ovp c_ 
Security Group-. Cfrt Adrrunntritorc Gro— 
Srcur
*)
 Group-. MiS (trnti who ttt fxt... 
Security Group-. OeuyMted »d«wmt/»to~ 
Securey Group . A3 wortaut«>i end cer_ 
Security Group-. Al derrum controCen u. 
Security Group.. All dcme.n gueiti 
Security Group-. Al demurs users 
Security Group-. Ccs-jrMted *drrwwst/
*to_
 
ns 
Security Group- Members o4 thrs group _
0om»... Securey Group . Members c< th
*s
 group — 
r Owners SeCurdy Group-. Members m thrt group C— 
*
<
>
Group Policy Creetc
Oomem eperebens misters
Figure 4.19: FSMO Role holder verification

i- DCAZROOTOO! 
X +
<- -> C A bst-d5baacb3-c1ca-4634-a13e-S3da131e67a7.bastion.a... D l£? ☆ 
* -J □ X
j Active Directory Users and Com
File Action View Help
~ Active Directory Users and Com 
> [_ _ Saved Queries
v jij adpstest.net
Builtin
Computers
a*  Domain Controllers
*' ForeignSecurityPrincipal-
I Managed Service Accour
tZ. Users
>>
Name
admadpowershell 
^>adpsadmin
Allowed ROOC Password Re
Cert Publishers
Cloneable Domain Control).
Denied RODC Password Re..
i^DnsAdmins
DnsUpdateProxy
Domain Admins
Domain Computers
Domain Controllers
Domain Guests
Domain Users
Enterprise Admins
^Enterprise Key Admins
Enterprise Read-only Domai
Group Policy Creator Owner
Operations Masters 
? X
RID PDC Hrastrvcture
The operations master manages the alocabon of RID pools to other Doman
Controlers Only one server n the doman performs the role
Operations master
DCAZROOTOO1 odprtcat net 
|
To transfer the operations master rde to the folowng 
[-77--------------1
computer, dick Change 
LS22222___ 1
DCAZROOTO01 adpstest net
£ .£1 Q tai U’
Qose
Figure 4.20: FSMO Role holder verification
DSA.msc console will not show all FSMO roles for the forest 
because it is related more to domain. Trust and schema 
roles can be verified using the following command:
netdom query fsmo
Take a look at Figure 4.21 and Figure

■i DCAZROOTOOI
□ X
X
<- -> C fl bst-d5baacb3-<1ca-4634-al3e-53da131e67a7.ba$tion.a... O ☆ 
d B Windows PowerShell
□ X
Iwindows PowerShell
[copyright (C) Microsoft Corporation. All rights reserved.
[Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows
PS C:\Users\adpsadmin> 
Schema master
Domain naming master 
PDC
RID pool manager 
Infrastructure roaster 
The command completed
netdom query tsmo
DCAZROOT001.adpstest.net
DCAZROOT001.adpstest.net
OCAZROOT001.adpstest.net
OCAZROOT001.adpstest.net
DCAZROOT001.adpstest.net 
successfully.
gs C:\Users\adpsadmin>
Figure 4.21: FSMO role holder verification using PowerShell 
in root and child domain controller

Figure 4.22: FSMO role holder verification using PowerShell 
in root and child domain controller
Alternatively, we could choose Get-ADDomain to find the 
domain-wide FSMO roles and Get-ADForest to find forest­
wide FSMO roles. We only have multi-domain controller 
setup in EU domain in POC environment, so we will now try 
to migrate one of the PDCs in this domain. Sometimes you 
would like to perform maintenance of the infrastructure, 
which you know will take longer than rebooting the server, 
it is sometimes recommended to move roles and perform 
the maintenance later. To perform the move, execute this 
PowerShell command:

-Identity "DCAZUEU002" - OperationMasterRole 
PDCEmulator
The results are illustrated in Figure
M DCAZEU002
□ X
x
<- -> C 0 bst-d5baacb3-cica-4634-ai3e-53dai3le67a7.bastion.azure.co... O & ☆
a Administrator: Windows PowerShell
D X
Windows PowerShell
pCopyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows
H
CPS C:\Windows\system32> Move-ADOirectoryServerOperationMasterRole -Identity “OCAZEU002" -Operation 
[MasterRole PDCEmulator 
(
• Hove Operation Master Role
;Do you want to move role 'PDCEmulator' to server 'DCAZEU002.eu.adpstest.net' ?
+[Y] Yes [A] Yes to All
,PS C:\Windows\system32>
Schema master
gjomain naming master 
PDC
RID pool manager
Infrastructure master 
pThe command completed
[N] No [L] No to All [S] Suspend [?] Help (default is "Y“): a 
netdom query fsmo
DCAZROOT001.adpstest.net
OCAZROOieei.adpstest.net
OCAZEU002.eu.adpstest.net
DCAZEU001.eu.adpstest.net
DCAZEueei.eu.adpstest.net
successfully.
PS C:\Windows\system32>
Figure 4.23: FSMO PDC Role move
When the domain controller that you want to migrate the 
role off is unavaviable and is not going to be available 
later, then we would need to perform the seize of the 
FSMO role instead of move. This means the process will not 

expect the server to be online and will introduce a new 
server to take the master role in the domain. To perform 
seize of the PDC role we need to execute the command 
similar but with the force switch:
-Identity "DCAZUEU002" - OperationMasterRole 
PDCEmulator -Force
Forced operation will still try to move the role if the server 
is online but will continue even if the source server is not 
responding.

Default domain policy and default domain controller policy 
management and configuration
One of the advantages of AD and a feature that 
distinguishes it from other directory services is the Group 
Policy Objects Group policy objects are a set of settings 
that controls the configuration, behavior, and security 
settings for systems that GPO is applied to. When Active 
Directory Domain is created, two default GPOs are present 
and applied to the Domain Configuration: Default Domain 
Policy and Default Domain Controller Policy. The Default 
Domain Policy is applied to all users and computers that 
exist in the domain, and the Default Domain Controller 
Policy is applied to all domain controllers.
Group policies contain a massive number of settings that 
can be configured on the target system, and they can be 
extended using Administrative Templates for managing 
even non Microsoft software, for example, Google Chrome 
browser installed on client computers. To check the 
existing settings for those just start Group Policy 
Management Console as illustrated in Figure

Figure 4.24: Default Group Policy objects
In the Group Policy Objects location, there are only two 
objects that we mentioned before, and they are linked to 
the root domain for Domain Policy and Domain Controllers 
container for Domain Controller Policy.
When we navigate to the Default Domain Policy GPO and 
choose the Settings tab, we can see three sections. In the 
first section, basic properties will be shown, including the 
link information, security filtering that we can use to limit 

the GPO to be applied only to a group of users or 
computers instead of all objects under the domain, 
delegation that can be changed to delegate admin access 
to specific Group Policy Object. In the other section, user 
and computer configuration-specific settings are 
configured, defining configuration on systems that this 
GPO is applied from computer or user logging in. The 
Default Domain policy is the only policy inside the domain 
that defines the password policy, so we need to make sure 
it is configured properly. Even if those settings will be set 
on other Group Policy Objects and linked to various 
containers or organizational units inside the domain, those 
password settings will not be applicable. The default 
settings for the domain are illustrated in Figure 4.25 and 
Figure

_ DCAZROOT001 
X +
<- -> C a bst-e1052632-fefc-4a9e-9137-ca9c3b48bb19.basti... O if? ☆ 
* 
□ X :
a, Group Policy Management
a, File Action View Window Help
a Group Policy Management
v 5^ Forest: adpstest.net
v jj] Domains
v ipj adpstest.net
, ' Default Domain Policy
> a] Domain Controllers
> Group Policy Objects
> 3>WMI Filters
> -3 Starter GPOs
» > _a Sites
Group Policy Modeling
Group Policy Results
Default Domain Policy
Scope Details Settings Delegation
Account Policies/Password Policy
Policy
Setting
hide
Enforce password history 
Maximum password age
Minimum password age
Minimum password length 
Password must meet 
complexity requirements 
Store passwords usng 
reveisible encryption
24 passwords remembered
42 days
1 days
7 characters
Enabled
Disabled
O X
J. ff x
Accocrt Polides/Account Lockout Policy
hide
Figure 4.25 : Default Password settings for the domain

DCAZRCCTOai 
X +
<- c fi bst-e1052632-fefc-4a9e-9137-ca9c3b48bb19.basti... 0 
□ X :
fh Greup Polity Manigtm«nt
File Action View Window Help
* 41 r. ro I £ I 0 m
.-jj Group Polity Management
v \\ Forest adpstest.net 
domain?
v SJ adpitfst.net
, " Default Domain Policy
> .4] Domain Controllers
> • Group Policy Objects
> Qgi WMI Filters
> 3 $rt
 GPOs
**
**
» > jj^ites
■i? Group Policy Modeling
- Group Policy Results
-OX
- S x
Default Domain Policy
S«pe Detili Setups Delejatian
Account Policics/Kerberos Policy 
-:e
Policy 
Setting
Enforce user logon 
Enabled
restrictions
Mawmtm tfetrne ft*  
600 minutes
service ticket
Mawnxjm Ifetme for user 
10 hours
lickri
l.iaocmjrn Ifel me for user 
7 dap
ticket rnnmral
Mannun 10 erance fw 
5 mnotes
computer clock 
V
EVnettfccrration
Figure 4.26 : Default Password settings for the domain
Of course, each organization can have different 
requirements in terms of password policy, and even inside 
the same organization, there could be various 
implementations of splitting different password policies 
using multiple domains and implementing the Fine-Grained 
Password Policy To edit those settings, we will navigate to 
the object inside the container, right-click on the right-click 
on Default Domain and choose the Edit... option. Then, 
navigate to Password policy and define the right settings, 
as illustrated in Figure 4.27 and Figure

. DCAZROCTOOl 
X +
4“ C bst-<el0S2632-fefc-4a9e-9l37-caSk:3b48bb1^.ba5ti.„ Cl 
Ah EJ Fl X :
Group Peltry Management 
— S X
File Action View Window Hefp 
- X
> * I % !S’ x £ I U S3
a Group Policy Management
v Forest: adpstestnet
v Domains
v J-j adpstest.net
•BJ DefaultDomainPc’--- 
X) Domain Controller 
_"j Group Policy Obje 
Jr WMI Filters 
Tt Starter GPOs
Edit-,
Default Domain Policy
Scop
*
 Detail Scftrflj Debtor
>> >
•rL1 Group Policy Modeling 
.7 Group Policy Results
Enforced 
link Enabled 
Save Report-
View
New Window from Here
Delete
Rename
Refresh
Help
Account Pollc»&s/KcrbCTM Policy
Policy 
Sdhrwj
Enfcree user lo^w 
Enabled
nestrcSjons
Marcmjm. Ifetme for 
60C- ™™jt«
> s^vce bdeet
Mararum W eirfue for vse
*  10 hxxs 
ticket
MaKmuni If ctune for user 
7 days
Vctat renewal
Mmh tolerance tor 
5 rrinut es
computer dock 
fbnchremzabCH
Open lhe GPO editor
Figure 4.27 : Editing password settings in Default Domain
Policy.

DCAZROOTOO! 
X +
<- -> C a bst-e1052632-fefc-4a9e-9137-ca9c3b48bb19.basti... □ & ☆ 
* ==J □ i
4 Group Policy Management Editor
- File Action View Help
; 
£ El X 0 E GB
' Default Domain Policy (DCA2ROOT001.ADPSTEST.NET] a
v Computer Configuration
v r’l Policies
> ~ Software Settings
v n Windows Settings
> Name Resolution Policy 
Ifet Scripts (Startup/Shutdown)
v 2j Security Settings
1 
v Ji Account Policies
Password Policy
> 
Account Lockout Policy
> 
j3 Kerberos Policy
> 
7j Local Policies
> 
JB Event Log
> 
Restricted Groups
> 
System Services
> 
Registry 
v
6$ 
* days
- 
□ X
:y 
Policy Sett
nforce password history 
24 passwo
Maximum password age 
42 days
finimum password age 
1 days
finimum password length 
7 characte
finimum password length audit 
Not Define
assword must meet complexity requirements 
Enabled
elax minimum password length limits 
Not Define
Maximum password age Properties 
7 
X
Security Policy Setting Explain
^aMfnurn password age
0 Qefne this policy setting
Password will expire in:
Figure 4.28 : Editing password settings in Default Domain
Policy
We can perform the same operation by executing the 
following PowerShell command: 
adpstest.net -LockoutDuration -LockoutObservationWindow
-ComplexityEnabled -ReversibleEncryptionEnabled - 
MaxPasswordAge

There are many other settings that can be set for Default 
Domain but it is recommended to not modify settings 
inside that GPO but to create a new GPO object and link it 
to the Domain Level or specific OU created on the top 
domain level.
In terms of Default Domain Controller Policy, you do not 
want to change settings here but create a new GPO, link it 
to the Domain Controllers OU, and make sure the link order 
is taking precedence with the newly created OU. Still, it is 
good to verify the default settings configured in that as 
illustrated in Figure 4.29 and Figure especially when you 
would like to focus on the security of the Domain and 
Domain

_ DCAZROOTOOl 
X +
<- -> 0 A bst-e1052632-fefc-4a9e-9137-ca9<:3b48bb19.bastion.azure.com/”/cli... Q l£? ☆ 
=7 □
A Group Policy Management 
i File Action View Window Help
0 X
- e x
A Group Policy Management 
v Forest adpstest.net
v jb Domains
v oF.3 adpstest.net
, ' Default Domain Policy 
v 2. Domain Controllers
. ' Default Domain * 
> 
Group Policy Objec
> 
WMI Filters
> 3 Starter GPOs v 
> Sites
•£’ Group Policy Modeling 
. £ Group Policy Results
Default Domain Controllers Policy
Scope Delate Settngs Delegation
Links
Display Irks n ths location
adpstestnet
The folowng stes. domarts. and Oils are Inked to ths GPO
Edit...
Enforced
Link Enabled
>>
Save Report...
View
New Window from Here
Delete
Rename
Refresh
Help
WMI Altering
Ths GPO is inked to the tolowrg WMI tier
Open the GPO editor
Figure 4.29 : Editing password settings in Default Domain 
Policy

_l DCAZftOOKXI
<- -> C A bst el 052632 IrMc 4a9r 91 3?ca9c3M8bb19.b«tion.azur«.com/
*/clirnl/RENBWIJPnQ.ivMDEAYwBijW7yti...
 □ [*?■$>  -J □
Group Policy Management 
— OP X
_•> hie A ebon View Wmdow Help 
- fl
* 4| a Hl @ Q «
Group Policy Management
v Forest: adpstest.net
v Domains
v adpslest.net
k Default Domam Policy
v i Domam Controllers
, Default Domain Controllers Policy
> 
Group Policy Object?
> 
Jt WMI Filters
> 
-5 Starter GPOs
J. 3 Ski
■il Group Policy Model ng 
Group Policy Results
»
Default Domain Controllers Policy
Scope titrate 
Coteoattan
I-]-----------Jt-UJI R I jcnmgj---------------------------------------
local Pol»rJm»/lhcr Fights Aaaigrancrd
Policy
Access the computer from the network
.Add wpxstotior
*
 lo cfaw
Mud memory pjxai lor a pmcesa
Atew log on localy
Bdck up lies erxJ davdenw
fij^aw trwrfrcw chwddng
Change the system tvne
Craata a pagrfln 
Pwba «• rwnntRfrw
H-Jh
hide
Scttlruj
E JILTIN’JYe-'Mndpwi 3X0 Compaxfcle Access. NT 
AJTMORITY.ENTEHPRISE DOMAIN CONTROLLERS, NT 
AJT DriTf AUl-entcatec Jaers GUIL’IH'Ainrantxs 
Everyone
NT ALTTHORI’Y Authentcaled Lteerc
EJILTINAdnrrdrdorw. NT AUTHOR|TY\NETWORK
SERVICE. NT AU’HOF. T^-LOCAL SERVICE
NT AUTHORITY-.ENTERPRISE COMAN CONTROLLERS 
BJILTlNXPlrt Qptrdom. BUILT IWSwvw 0>s>eLc»«.
BJILTIN'Account Cperalcts. BUILTTNvEackup Cperetore
B UIL T1N Aorrt siratonc
BUILIINvServtM Cperdiora. b JILUNsBackup OperelorB.
BUHTiNAort^tralom
BUll TlN.Pm rthtowi ?X0 Conpatbte Accaw. NT 
AJIMORIirAuthentcdied Jtoen BUILTIN\Mnr«atr<cns 
NT AUTmORITYsNETWORK SERVICE. NT 
AJTHORJTY\LOCAL5ETr1CE. Evrryore
BJILTIN-Scrver Operators. E JIlTNAtmtniMratcn NT 
A JTHOfilTYsLOCAL SERVICE
BlJll TlNAcmKitodom
RUH TlN.A«wa
Figure 4.30 : Editing password settings in Default Domain 
Policy

Creation of OU structure and delegation
To get the most out of AD for users, clients, and servers 
using Group Policy, Delegation, one of the most 
important things is defining a good OU structure. This 
structure needs to replicate the operations management 
inside the organization. If the organization delegates 
management of everything to global teams, site and 
office OUs will be at the bottom of the tree. If local 
teams manage the end users and client devices, they 
could potentially have users and computer OU created 
inside the location OUs.

Organizational Unit creation
It makes sense to split the server infrastructure from the 
client infrastructure with separate OU structure, as 
different types of Group Policies will apply to workstations 
and different types will apply for servers, especially the 
ones that are considered sensitive. Inside server OU 
structure, we can create separate OUs for the type of 
workload, service names and OS versions. To create an 
example structure, we need to open the Active Directory 
Users and Computers console (dsa.msc), right-click on the 
location we would like to create the OU and use the New 
Organizational Unit option. Then, fill in the name of the OU 
and tick the accidental deletion check box to make sure 
the deletion operation is protected, as illustrated in Figure 
4.31 and Figure

J DCAZRCOTOOI
X
□
X
<- -> c ® bst-161b67c9-56b3-4262-a9e4-5d5de5011fbd.bastionjzure.co... B \£ ☆ 
* EJ □ X :
Figure 4.31 : Organizational Unit creation

Figure 4.32: Organizational Unit creation
We repeat the same steps when creating the other OUs to 
complete the creation of the desired OU structure. Of 
course, we could modify the structure later, and moving 
the OUs to different tree is possible, but it is not something 
we would normally do as many applications and processes 
can hardcode the specific structure when pointing to 
specific objects using their distinguished name. After all 
the steps, the OU structure could look as illustrated in 
Figure

- GlobalResources 
a Delegation
- Workstations
33 StandardUsers 
AdminUsers
al Group
3 J Servers
3. Application 
j. Infrastructure 
jj Database
. Active Directory Users and 
File Action View Help
a*i  ServiceAccounts
' Managed Service Accounts 
v jl Office
Workstations 
;L StandardUsers 
- AdminUsers
Figure 4.33: New Active Directory OU structure for 
organization
As we can see, the concept is that the users will be kept 
inside the Office OU structure that will be split by country 
and could be additionally divided between different 
departments or cities if required. GlobalResouces OU will 
keep users and groups that need to be managed globally, 
and they are used for global centrally managed 
applications. Servers OU tree will contain infrastructure 
servers divided between types of workloads. This is just an 
example structure; there could be different structures 
recommended for the organization. When thinking about

its need to be designed to eventually be expanded with 
new OU inside existing structure.
When implementing it for multiple countries or offices, this 
could be a lot of repeatable work; it can be easily 
automated using PowerShell using the New- 
ADOrganizationalUnit command:
-Name Office -ProtectedFromAccidentalDeletion $true
-Name UK -Path "OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name Workstations -Path
"OU=UK,OU=Office,DC=ADPSTEST,DC=NET" -
ProtectedFromAccidentalDeletion $true
-Name StandardUsers -Path
"OU=UK,OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name AdminUsers -Path
"OU=UK,OU=Office,DC=ADPSTEST,DC=NET" -
ProtectedFromAccidentalDeletion $true

-Name Groups -Path
"OU=UK,OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name PL -Path "OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name Workstations -Path
"OU=PL,OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name StandardUsers -Path
"OU=PL,OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name AdminUsers -Path
"OU=PL,OU=Office,DC=ADPSTEST,DC=NET" -
ProtectedFromAccidentalDeletion $true
-Name Groups -Path
"OU=PL,OU=Office,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name GlobalResources -ProtectedFromAccidentalDeletion 
$true

-Name Delegation -Path
"OU=GlobalResources,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name Groups -Path
"OU=GlobalResources,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name ServiceAccounts -Path
"OU=GlobalResources,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name Servers -ProtectedFromAccidentalDeletion $true
-Name Application -Path
"OU=Servers,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name Infrastructure -Path
"OU=Servers,DC=ADPSTEST,DC=NET" - 
ProtectedFromAccidentalDeletion $true
-Name Database -Path
"OU=Servers,DC=ADPSTEST,DC=NET" -
ProtectedFromAccidentalDeletion $true

Delegating control to Organizational Units
As the new OUs are created, they are still accessible only 
for the Administrators of the Domain themselves. 
Delegation of control to specific parts of the Active 
Directory is incredibly challenging as it has several risks as 
well. When adding permissions to specific OUs, we should 
avoid Full Control level of permissions for OU as it allows 
the creation of all types of objects, regardless of whether 
or not they are related to the Organizational Unit purpose, 
including creating the child OUs, which should be avoided.
So, when delegating rights to OUs intended for storing 
workstations, we can grant the rights specifically to 
computer objects, allowing the right to create and delete 
computer objects inside the delegated OU..
First, we need to create group objects, simply we can do it 
ADUC by navigating to the desired OU and using new 
group option, as illustrated in Figure 4.34 and Figure

Figure 4.34: Group Creation for OU delegation

Figure 4.35: Group Creation for OU delegation
To complete the delegation process, we need to use 
Delegate Control in ADUC when using the Delegate Control 
option on a specific OU, choosing the principle to custom 
task to delegate and the right level of permissions, as 
illustrated in Figure 4.36 and Figure

Description
Delegate control of
Active Directory Object Type
loricate the scope of the task you war* to delegate
Q Ths folder, easing objects n ltrs folder, and creation of new objects n ths folder
@ Qnly the folowing objects r> the folder
□ 
twotabteDevice objects
□ 
certficabonAuthorty objects
0 
Computer objects
□ 
Connection objects
Q Contact objects
□ 
dnsZcne Scope objects
0 Create selected objects n this folder
Cancel
3 Workstations
Figure 4.36 : Delegation of the Permissions using DSA.MSC

Description
in this view.
Delegation of Control Wizard
Permissions
Select the permissions you want to delegate
Show these permissKXis
0 General
0 Property-specAc
0 Creation ■ deletion of specAc chid objects
Permissions
0 Ful Control
0 Rwd
0 Wike
0 Create N ChH Objects
0 Delete Al Chid Objects
0 Read All Properties
<fiack | Hext > |
Cancel
- Workstations
Figure 4.37 : Delegation of the Permissions using DSA.MSC
We can also achieve this by executing the PowerShell 
script that will directly modify the DACLS. Let us execute 
the following script to create a Delegation in another 
similar OU tree:
Set-Location AD:
$OrganizationalUnit =
"OU=Workstations,OU=PL,OU=Office,DC=adpstest,DC=ne 
t"

$ACL = Get-Acl -Path 
$DelegationGroup = "PL_Workstations"
$DelegationGroupSID =
[System.Security.Principal.Securityldentifier]
$DelegationGroup.SID
$GroupReference =
[System.Security.Principal.IdentityReference] 
$DelegationGroupSID
$ComputersGUID =
$RuleCreateAndDeleteComputers =
System.DirectoryServices.ActiveDirectoryAccessRule($Gro 
upReference, "CreateChild, $ComputersGUID,
$RuleFullControllComputers =
System.DirectoryServices.ActiveDirectoryAccessRule($Gro 
upReference,
$ACL.AddAccessRule($RuleCreateAndDeleteComputers) 
$ACL.AddAccessRule($RuleFullControllComputers)

Set-Acl -Path $ACL
Now, we can compare permissions between two OUs, and 
we can see that they are delegated same way for 
delegation group that we pre-created before. To open the 
permissions view, right-click on the OU object and go to 
properties, security, and then to advanced as illustrated in 
Figure
__ DCAZROOTOC1
X
C ® bsM61b67c9-56b5-4262-a9e4-5d5de5011fbd.bastionjzure.eom/#/dient/RENBWIJP... □ 
☆
iced Security Settings for Workstations
Advanced Security Settings for Workstations
Owner
Domain Admins (ADPSTESTXDomain Admins) Change
Owner
Domain Admins (ADPSTESK Domain Admins) Change
Permissions
Auditing Effective Access
Permissions
Auditing Effective Access
For additional information, double-click a permission entry. To modify a
For additional information, double
*click
 a permission entry. To modify a permission entry, select the
Permission entnes:
£4
Type 
Deny 
Allow 
Allow 
Allow 
Allow 
Allow 
Allow 
Allow 
Allow 
Allow
Principal 
Everyone 
UK.Workstat ions (ADPSTES1X... 
UK.Workstat ions (ADPSTEST\... 
Account Operators (ADPSTES... 
Account Operators (ADPSTES... 
Account Operators (ADPSTES... 
Print Operators (ADPSTEST\P...
Account Operators (ADPSTES... Create/delete User obj... 
Domain Admins (ADPSTESTv.. Full control 
ENTERPRISE DOMAIN CONT... Special
Access
Special
Creat e/delete Comput... 
Full control 
Create/delete InetOfg... 
Create/'delete Comput... 
Create/delete Group 0— 
C reate/delete Printer o...
Permission entnes:
Type
Principal
Access
Inherited from
st Allow
Domain Admins (ADPSTESTV.
Full control
None
si Allow
Authenticated Users
Special
None
SI Allow
Print Operators (ADPSTESTXP...
Create/delete Printer o...
None
si Allow
PL.Workstations (ADPSTESTV..
Full control
None
Allow
PL.Workstations (ADPSTESTV..
Create/delete Comput...
None
SI Allow
Account Operators (ADPSTES...
Create/delete InetOrg...
None
SI Allow
Account Operators (ADPSTES...
Create/delete Comput...
None
al Allow
Account Operators (ADPSTES...
Create/delete Group o.~
None
SI Allow
Account Operators (ADPSTES...
Create/delete User obj...
None
■’
Allow
Pre-Windows 2000 Compatib...
List contents
DC = adpstest,DC = net
Add
Add
Remove Edit
Disable inheritance
Disable inheritance
Figure 4.38 : Permissions comparison between two OUs

As we see, those permissions are the same in both, so 
delegation of the rights is modifying the DACLs within 
specific Active Directory objects and using PowerShell can 
help when delegating permissions to multiple OUs inside 
complex implementations.

Basic Active Directory Management using RSAT tools and 
PowerShell
As the domains, OU structure, and basic delegation is in 
place, we can now try to verify the configuration using 
management tools and PowerShell. Getting comfortable 
with the management tools will be helpful when managing 
the domains in production state.
We are already familiar with Active Directory Users and 
Computers (dsa.msc) and Active Directory Sites and 
Services (dssite.msc). The first one is required when we 
want to modify the Domain Structure and and the other is 
used when defining the Active Directory Service from the 
Network perspective. There are a few more administrative 
consoles available, and they can be found when we go to 
Control Panel | Administrative as shown in Figure

. _ DCAZROOTOOI 
X +
<- -> c ® bst-bbc6c447-509c-404b-96ab-eeaa0d6ae743.bastion.azure.co... □ |£ ☆ 
# -/ □
| %i E
= 1
Manage
Manage
Administrative Tools
- □
X
Home
Share View
Shortcut Tools
Application Tools
V O
Sq > Control Panel
System and Security > Administrative Tools 
v
Cl
A.
e 
Size
A
4 Quick access
Cc] Desktop 
4 
_3 Active Directory Administrative Center 
5/8/2021 8:15 AM
S Active Directory Domains and Trusts 
5/8/2021 
8:16 AM
§] Documents 4 
3 Active Directory Module for Windows Po... 5/8/2021 815 AM
B Pictures 
4 
Tjj Active Directory Sitesand Services 
5/8/2021 
815 AM
bin 
3 Active Directory Users and Computers 
5/8/2021 816 AM
» QSystem32 
T^ADSIEdit 
5/8/2021 815 AM
J- Component Services 
5/8/2021 8:14 AM
V This PC 
nj. Computer Management 
5/8/2021 8:14 AM
Network 
ri Defragment and Optimize Drives 
5/8/2021 814 AM
3 Disk Cleanup 
5/8/2021 
8:14 AM
DNS 
5/8/2021 815 AM
3 Event Viewer 
5/8/2021 
8:14 AM
rB Group Policy Management 
5/8/2021 8:15 AM
ft iSCSI Initiator 
5/8/2021 
814 AM
Hi Local Security Policv 
5/8/2021 
815 AM
31 items 1 item selected 1.10 KB
rue roioer
Shortcut 
2 KB
Shortcut 
2 KB
Shortcut 
2 KE
Shortcut 
2 KE
Shortcut 
2 KB
Shortcut 
2 KB
Shortcut 
2 KE
Shortcut 
2 KB
Shortcut 
2 KB
Shortcut 
2 KE
Shortcut 
2 K!
Shortcut 
2 KE
Shortcut 
2 KE
Shortcut 
2 KB
Shortcut 
2 KE■
V
Figure 4.39 : Active Directory management tools overview
Active Directory Administrative Center is a tool that can be 
used for daily service desk operation, but it never took 
most of the workload from the AD Users and Computers 
console. It is mostly useful for two main use cases: working 
with Recycle deleted objects and users, and object 
restores. Fine-grained password policies can be easily 
created using PowerShell, but browsing the directory to 
find the right deleted object can be easier using some 
graphical interface.

Recycle Bin management
To be able to utilize the Recycle Bin, our domain and forest 
mode need to be on Windows 2008 R2 functional level, 
which is the case with all new environments. Then, we 
start Administrative right-click on the domain we would like 
to enable recycle bin and confirm the operation as 
illustrated in Figure 4.40 and Figure
- C<A2ROOTOOl 
x +
!■ Dynamic Access Co
H Authentication
C ® bst-bbc6c447-S09c-404b-96ab-eeaa0d6ae743.ba$tion.azure.co... □ 
☆ 
& =*J Cl
Delete
Search under this node
Properties
adpstest (local)
■il adpstest
Change domain controller
Search under this node
fi Global Search
Raise the forest functional L.
Properties
Change domain controller
Raise the forest functional level...
Raise the domain functional level...
Raise the domain functiona...
Enable Recycle Bin
New
Summaiy
WINDOWS POWERSHELL HISTORY
Figure 4.40: Enabling Active Directory Recycle Bin

0 m b$t-bbc6c447-509c-404b-96ab-eeaa0d6ae743.bastion.azure.co... Q ☆ jfc -J □
• Directory Administrative Center 
— 
□
v « adpstest (local) ►
’ (0) | Manage I
ive Directory... <
adpstest (local) (16)
Filter 
P (§) ▼ 
(§) ▼ ©
Tasks
i
sw
Builtin
JSSFd
itication 
►
st 
>
St 
►
Search
J“’“...........  
’
Please refresh AD Administrative Center now.
a !
AD DS has begun enabling Recycle Bin for this forest. The 
Recycle Bin will not function reliably until all domain
8 
controllers in the forest have replicated the Recycle Bin
configuration change.
0
D 
I OK I
New
Delete
Search under this node
Properties
idpstest (local)
Change domain controlle
Raise the forest functions
Raise the domain functio
Enable Recycle Bin...
| New
Summary 
| 
_ 
. 
...
Figure 4.41: Enabling Active Directory Recycle Bin
The same operation can be performed using the We just 
need to make sure the user performing the operations is a 
member of Schema Admins and Enterprise Admin or 
Domain Admin in the root domain permissions. To enable 
the Recycle Bin we can execute the following command:
Enable-ADOptionalFeature -Identity 'CN = Recycle Bin 
Feature,CN=Optional Features,CN = Directory

Service,CN=Windows
NT,CN=Services,CN=Configuration,DC=adpstest,DC=net' - 
Scope ForestOrConfigurationSet -Target 'adpstest.net'
Once the Recycle Bin is enabled, we can restore deleted 
users or other objects when required. Typically, we would 
disable a user if we would like to block them from logging 
in to AD, but if the user was deleted accidentally, we can 
now restore it. Let us delete an example user by right­
clicking on the user we want to delete and proceeding with 
the remove operation. After deletion let us navigate to 
Deleted Objects and choose the restore option, as 
illustrated in Figure 4.42 and Figure
Reset nassword..
View mutant password w..
Acd to grsup...
Disable
Atflhentifalion
De!«e
ddpt-letl
Uw Innoni
Move.
V Depriest
Prcperbra
P Global Search
ueMFlpUDfi.
Jsers
Properties
blew
WINDOWS POWERSHELL HISTORY
-!ese: pass^ond..
Vfew resmart pMEwtxd 5^1^95-, 
Add bo group.

Figure 4.42: Deleting Object in Active Directory 
Administrative Center
Figure 4.43: Restoring Object in Active Directory 
Administrative Center
Restore can also be performed using the following 
PowerShell command. The first command will remove the 
user, and the second one will restore the object, as it is 
common for all object classes:
Get-ADUser -Name Test |
Get-ADObject -Name Test -IncludeDeletedObjects |


Fine-Grained Password Policy management
While utilizing Fine Grained Password Policy we remove 
one of the requirements of creating multiple domains. As 
described earlier in this chapter, the password policy is the 
same for the entire domain and cannot be modified on the 
OU level. Using the FGPP, we can implement more 
restricted policy for sensitive or admin accounts and keep 
a user-friendly policy for end users, especially when we use 
Multi Factor Authentication on the application side.
To implement FGPP, we navigate to Password Settings 
Container and use the new policy settings option on the 
right menu. Then, we fill in all necessary details and attach 
that policy to a filtering group, as illustrated in Figure 4.44 
and Figure

Figure 4.44: Creating the FGPP in Active Directory 
Administrative Center

_ DCAZROcrooi 
x +
-> C ri tal
*t>bc6c447-509c
*4CMb-96ab-eeaa0d6je?A3bMtiorLazure.cofn/«/cient/RENBWIJ
 D ■£ ☆ ft =7 Cl X ;
-OX
Create Password Settings: FGPP-DomainAdmin 
I use I Iskiom I
* Mom lHvr-?*>or
P»«w<xd SMtings
Password Settings
’ X A
Diractb/ Applies TO
»
Name. 
4 FGPP-Dorna nAdmm
Pvrcedmrr: 
m 1
[V| Enforce ntirwr jm patemsrd length 
Mnrur pattwoM length ieMrxten] 
* 15
|V. Enforce paicword h story
Number «f paKAordi remerrbered 
ftt 2A
M Peiv
*o<d
 ms.it meet comyle>rty 'ecu emerti
□ Store passwo'd us«ry mtnbt encrypt or
E Rro-ect from XC«5e
*tal
 deletion
Deter pt>o-.
Pass AOr 0 
opbor v:
|V En#o%« HMtMnum paiswc'd •§«
Uxr cannot cKan^c the pavswc:rd within C^
*
— * ’
(✓. Enfo«%< maurrtzn p«i$v
*oe
 d
Um* rrwit (Kanye the paMrvxd after (daysX ▼ X
[Z tn’o'ce account lockout po cy:
Nurnber ®4 *a  led byon ettempti a o*ed-
 
* 5
Revn failed Idyart after
*
 ptt count a*t?r
 (min0 
3^ 30
Ac c bant w-a be lack rd 6-t
• For a duration of (nwn> 
$ 30
C Untt! an adr- -uttrator *-**tuaDy
 wrsbeka the account
Directly Appl es Tb
' x
1 Doman Adrura
1__ **
=
__
1
Remove
Figure 4.45 : Creating the FGPP in Active Directory 
Administrative Center
The same operation can be performed in PowerShell as 
follows:
FGPP-DomainAdmins -ComplexityEnabled:$true - 
ReversibleEncryptionEnabled:$false - 
ProtectedFromAccidentalDeletion:$true Add- 
ADFineGrainedPasswordPolicySubject FGPP-DomainAdmins 
-Subjects 'Domain Admins'

We need to be aware that FGPP does not immediately 
require users to change password to match the policy we 
applied. Only after the user password expires, they need to 
change it, not before that. It is important to implement the 
FGPP in advance, so users are protected immediately as 
they are created so the Password are set correctly utilizing 
the desired policies.

Cleanup of default user permissions
After the deployment of the Active Directory environment, 
it is good to clean up the accounts that were added to the 
privileged groups and are members of specific built-in 
groups as local accounts become domain admins and 
administrators when creating specific domains. It is good 
to create separate accounts for domain and enterprise 
admins. We can move those accounts out of standard 
Users container and put them in the right place that will be 
used only for the most privileged user accounts in the 
domain.
To check the Administrators group we need to navigate to 
Built-In Container and right-click on group and use Then, 
we can go to the members and their attribute editor. We 
see that the SID ending for one of the accounts is ''-500”, 
which means it is the built-in Administrator account that 
must be disabled after deployment as it cannot be 
removed from the group. Membership check is illustrated 
in Figure 4.46 and Figure

Opens the properties dialog box for the current selection.
■ a. DCAZROOTOOI 
X
+ 
- 
- 
□ X
C A bst-4506c801-3c81-44Sa-87S1-d3a847b598c7.bastion.azure.com/*... B 
☆ 
* □ Q ■
_ Active Directory Users and Computers 
File Action View Help
-OX
* 1 a oaUaiXEiaaiBEiltxtoTafc
22 Active Directory Users and Computers [DCAZRC A 
> 23 Saved Queries
v £3 adpstest.net
23 Builtin
Z3 Computers
3*1  Domain Controllers
> 23 ForeignSecuntyPnncipals
> i3l  GlobalResources
*
> □ Keys
' 
> [_ j LostAndFound
> Managed Service Accounts
> a!  Office
*
> 23 Program Data
> al Servers
> 23 System
23 Users
> 23 NTDS Quotas 
v
< >
Name 
Type 
Description
Access Control Assistan... Security Group... Members of this group ... 
^Account Operators 
Security Group... Members can administe...
A
^Backup Opei 
«dtoagroup...
Certificate Sr 
Send Mail
^Cryptograph 
All Ta$k$ 
>
Distributed C
J&EvantLogRr 
Properties
i^Gu«‘s 
Help
Hyper-VAdr........ 
ww?-
I^IIS.IUSRS 
Security Group...
Incoming Forest Trust B... Security Group...
{^Network Configuration Security Group...
Performance Log Users Security Group... 
^Performance Monitor Us... Security Group...
Pte-Windows ?(TOO Ccm S^rnntv Grniin
Backup Operators can o... 
Members of this group 
Members are authorized... 
Members are allowed to... 
Members of this group 
Guests have the same ac... 
Members of this group... 
Built-in group used by I... 
Members of this group .~ 
Members in this group c». 
Members of this group .« 
Members of this group — 
A hArlrwArd rnmnatihilrt
V
Figure 4.46 : Verifying Administrators membership

Figure 4.47 : Verifying Administrators membership
We are already using different accounts for operating the 
domain (it was created earlier without an explanation in 
this book), so we can safely disable the built-in 
Administrator account without any risk of locking ourselves 
out. Just navigate to the Accounts tab of the user, tick the 
Account is Disabled checkbox, and user remove from all 
privileged groups that account is member of, as illustrated 
in Figure 4.48 and Figure

Figure 4.48: Disabling built-in Administrator Account

Object 
Scanty 
’stren
General 
Merrben 
Member «
Members
Name 
Active Obeday Doman Service
*
 Fai
J admadoowen 
adcrtea net, Users
i adpsadmn 
adpnest net'Users
3^ Doman Mrm adortett net>Users 
Ad,. i#«rttn«/UiM
Scanty Envewvnert 
Session
*
 
Remote control
Remote DerKtop Services Profit COM
*
 
Aetrbute Edt«
General Address Account Florae Teaepnones Qrganuoon 
PubWvedCerticates Member Of Password RepAcabon Mo Object
Mentor Ct
Name 
Acbve Oect<xy Otmar’ Services Pctder
Oemam Users adpaast net .'Users
Active Directory Domain Services 
X
The following Attn
*
 Directory Domain Semtes enor Ottuned 
Cannot perform this operation on built-In ateounti.
Doman UMTS
There a no need to change Pnmary group tades* 
you nave Macnotn catrt* or POSu-cooptant
Figure 4.49 : Disabling built-in Administrator Account
We can get an error when removing default admin user 
from the Administrators group as this is the default 
membership for this built-in user. The same operation can 
be performed using the following commands with 
additional renaming of the user as best practice:
$SIDDomain = 
$AdministratorSID = $SIDDomain + "-500"

$User = -Identity $AdministratorSID 
$User | -Enabled $false
$User | adam_ad
The next step will be moving other accounts into custom 
created OU structure to not leave them in the default 
location. To perform this operation, right-click on the object 
and use the move option to select destination as illustrated 
in Figure 4.50 and Figure

DCAZROOTOOI 
X +
□ X
<- -> C ® bst-4S06c801-3c81-448a-8751-d3a847b598c7.bastion.azure.eom/#/die... O ft * □ © :
2j Active Directory Users and Computers 
—OX
File Action View Help
& as tai T 3 "ft
Moves the current selection to another organizational unit.
— Active Directory Users and Computers [DCAZROOT
> lZ) Saved Queries
Name
?.;admadpowershell
Type 
User
Description
Built-in account for ad...
A
Copy...
Add to a group...
Name Mappings...
Disable Account
Reset Password...
>
Computers 
Domain Controllers
j ForeignSecurityPrincipals 
GlobalResources 
a'l Delegation
ifcAII. 
t&Cer 
$>Clo 
ifcDer 
&0n. 
&Drv 
i&Ooi
Group...
Group...
Group...
Group...
Group...
Members in this group c...
Members ot this group ...
Members of this group t... 
Members in this group c... 
DNS Administrators Gro...
DNS clients who are per... 
Designated administrato... 
All workstations and ser... 
All domain controllers i...
,ij Groups
> 3*1  ServiceAc counts
2 Keys
. LostAndFound
Move...
Group...
Group...
Group...
Group...
>
» >
l&Doi 
&Do.
Open Home Page
Send Mail
>
>
>
>
>
2j Managed Service Accounts 
- Office
S&Doi 
iftOo
All Tasks
>
Group...
Group...
Group...
Group...
Group...
All domain guests 
All domain users
" Program Data
3. Servers 
System
j Users 
. NTDS Quotas 
. TPM Devices
i&Ent 
iftEnt 
tfcEnt 
tfcG'C 
Gu<
Cut
Delete
Rename
Designated administrato...
Members of this group ...
Members of this group ...
Members in this group c... 
Built-in account for gue...
>
Properties
Group...
>
&Ke>
Help
Group...
Members of this group ... 
Key Distribution Center... 
Members of this group... 
Servers in this group can...
Protected Users 
t&RAS and IAS Servers
VICI
Security Group...
Security Group...
<
>
V
Figure 4.50 : Disabling built-in Administrator Account

DCAZROOTOO! 
X +
<- -> C A bst-4506c801-3c81-448a-8751-d3a847b598c7.bastion.az... □ i^> ☆ ft □ 0 :
3 Active Directory Users and Computers 
—OX
File Action View Help
* a Sl □ I X □ £ B I □ EH I ’J M ft T 2
Active Directory Users and Computers [DCAZRC a 
> 1 Saved Queries
v JpJ adpstest.net
Builtin
lj Computers
j j Domain Controllers
> 22 ForeignSecurityPrincipals
v i GlobalResources
jl Delegation 
Groups 
> al ServiceAccounts
Keys
LostAndFound
Managed Service Accounts 
Office 
Program Data 
Servers
System 
v
Move
Move object into container:
S-ij adpstest
B □ Buitn
B Computers
B-fi] Domain Controllers
® j ForetgnSecuntyPnnapals
0:ij Global Resources
Delegated
E i Groups
E ij SemceAccounts
E . Keys
E LostAndFound
E . Managed Service Accounts
I °K ।
ption
n account for ad...
sers in this group c... 
>ers of this group ... 
sers of this group t... 
sers in this group c... 
administrators Gro... 
lients who are per., 
sated administrate... 
irkstations and ser.~ 
main controllers i... 
main guests 
main users
-rated administrate... 
sers of this group ... 
sers of this group...
Figure 4.51 : Disabling built-in Administrator Account
The same can be achieved by executing the following 
PowerShell commands:
$SIDDomain =
$AdministratorSID = $SIDDomain + "-500"
Get-ADUser -Identity $AdministratorSID | Move-ADObject - 
TargetPath

"OU=Delegation,OU=GlobalResources,DC=ADPSTEST,DC= 
NET"
Get-ADUser -Identity adpsadmin | Move-ADObject -
TargetPath
"OU=Delegation,OU=GlobalResources,DC=ADPSTEST,DC= 
NET"

Conclusion
Staging the AD domains is just a first step in the process 
of delivering AD services to the customers. A lot of 
configurations are performed, and this is necessary to 
make sure all the aspects of the solution are taken care 
of with the right approach. Now our test environment is 
ready to start to create proper users and computers and 
can safely store them in the right location with proper 
delegation configured.
Steps provided in this chapter were limited to simple 
architecture, but they showed the path to be taken 
when delivering production workloads as well. Those 
tasks are much easier to be performed before 
production workload is introduced on the AD as later 
each of those modifications would need to be 
considered as a change to the service that could impact 
migrated users, computers, and applications.
Delegation is an important topic and is much more 
complex than described here; that is why we are going 
to get back to delegation in the security chapter and will 
go through more advanced delegation scenarios,

especially when securing access to domain controllers 
and privileged domain credentials.
Network topology for organizations can be very 
dynamic. We cannot only define those during the 
deployment but AD sites topology. Regions where we 
place domain controllers need to reflect customer 
needs. Each subnet that would potentially hold the AD 
clients and applications need to be added to the 
configuration to get best possible service from the 
closest and most reliable domain controller for specific 
location.
In the next chapter, we will learn more about AD user 
management. We will focus on the most common tasks 
that need to be performed to make sure the users’ life 
cycle is professionally managed, and we will understand 
how to automate user management using PowerShell. 
We will start with details on user creation, important 
attributes, password management and bulk operations. 
We will get familiarized with some of the reporting 
capabilities of PowerShell and understand how to use it 
to present data outside the console.
Join our book’s Discord space

Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

C 
HAPTER 
5
Active Directory User Management

Introduction
One of the key objectives of Active Directory (AD) is to 
centralize the management of users and computers and 
provide single sign on capabilities for applications, 
resources, files, and documents. However, the 
functionalities of AD are not limited to these; it can also 
integrate different types of applications that can 
communicate using the LDAP protocol for directory 
access and using other authentication protocols for 
serving SSO capabilities.
To be able to manage users in the Active Directory, it is 
important to understand what their characteristics are 
and what properties need to be configured and 
maintained. One part of it is the personal data that 
needs to reflect the personal data in the HR system; 
next is the security settings for the delegation, 
permissions, and access; and important would be to 
manage the user password.
Each of those aspects would need to be verified on the 
most common user management tasks, like user 
creation, user deletion, attribute management, and

password management. Starting with user creation with 
a good understanding of what best practices are, could 
save a lot of maintenance effort and prevent 
management issues that require service desk support. 
Especially when delegation of those tasks is done for 
each country or local service desk, it should be good to 
have recommendations on how those are done and 
apply the same processes across organizations.
In this chapter, we will try understanding how to 
manage users in Active Directory. We will start by 
familiarizing ourselves with the key properties of user 
objects. Then we will go through common use cases and 
try to implement in test domains. Once test users will be 
created, we will try to perform some reporting and get 
information on user count, and we will export the user 
details into spreadsheets that could be used for 
processing later.

Structure
This chapter will cover the following topics:
AD schema and user object class introduction
User creation, common attributes intro
User deletion and housekeeping
User attribute modification
Bulk user exports, imports, and modifications
Sign in options and password management

Objectives
This chapter provides a comprehensive guide to Active 
Directory (AD) user management, covering crucial 
aspects of user object classes and the AD schema. It 
begins with an introduction to AD schema and user 
object classes, offering a foundational understanding. 
Readers will gain practical insights into user creation, 
including common attributes, as well as effective 
techniques for user deletion and housekeeping. The 
chapter further explores user attribute modification, 
empowering administrators with the skills for tailored 
user management. Additionally, it addresses the 
efficient execution of bulk user operations, 
encompassing exports, imports, and modifications. Sign­
in options and password management are intricately 
detailed, ensuring a holistic approach to AD user 
administration.

AD schema and user object class introduction
As mentioned in the previous chapters, Active Directory 
schema contains information about object types inside 
Active Directory. When we create a specific object, it is 
created with a specific object class that is a set of 
attributes defining a specific object. To be able to view 
Active Directory schema in a graphical way and see 
various objects, we need to add Active Directory Schema 
management snap-in to the server. To do this, log in to the 
domain controller and perform the following operation in 
elevated command prompt:
regsvr32
After the schema management console is registered, you 
can open it by starting the MMC console in the elevated 
command prompt, using Add or Remove Snap-ins in the 
Action menu, and choosing the schema console to add. 
Then, you can browse the AD schema, as shown in Figure 
5.1 and Figure

DCAZROOTOOl 
X +
<- -> C A b$t-b01241fb-415b-4cc3-b7d2-el388906c3d1.bastion.azure.com/#/di... □ l^> ☆ 
=/ □
Add or Remove Snap-ins
Desapbon;
View and edt the Active Drectory Schema
Vou can select snap-ms for ths console from those avadabte on your computer and configure the selected set of snap-ms. For 
extensile snap-ms, you can configure which extensions art enabled.
Available jnap-ms: 
Selected snap-ms:
Snap-m 
Vendor
Active Drectory Do... Mcrosoft Cor... 
3, Active Drectory Sch... Haosoft Cor... 
PSbTActive DrectorySite... Hcrosoft Cor... 
3 Active DrectoryUse... HcrosoftCor...
ActiveX Control 
Mcrosoft Cor...
^ADSIEdt 
Mcrosoft Cor...
^Authorization Manager Hcrosoft Cor...
-^Certificates 
Mcrosoft Cor...
Component Services 
Mcrosoft Cor...
A*
 Computer Managem... Mcrosoft Cor...
Device Manager 
ttcrosoft Cor...
.T Disk Management 
Mcrosoft and...
DtiS 
ttcrosoft Cor...
JSLs----™=--------
. Console Root
Edit Extensions...
Remove
Move Up
Move Dov.n
Add >
Advanced...
Figure 5.1: Schema management using the management 
consoles

Figure 5.2: Schema management using the management
consoles
As we can see, the User object is defined by the object 
class. This User object class is defined by parent class, 
which is defined by a set of attributes, optional or 
mandatory, and can also be defined by other parent 
classes. For beginning of work with Active Directory is not 
recommended to modify schema without justified use case 
scenario. For example, the extension of user objects inside 
Active Directory that could be performed by organizations 
are unique sets of attributes gathered inside of the 
auxiliary class. Examples of those attribute class could be 
CompanyAttributes and number of attributes like, Those 

attributes could be used for specific things like badge 
number and physical desk number. This information could 
be stored in existing attributes like
To better understand the information that could define 
users in Active Directory, we must understand the 
attributes that can identify user objects:
Common Name This attribute defines the name of the user 
that will be present inside Active Directory. When browsing 
specific OU or looking for some users inside any container, 
they will be defined by this attribute. This attribute will be 
the same as the Name attribute and will be controlled by 
the system and calculated from other attributes to be 
consistent, for example: adpsadmin. This attribute does 
not need to be unique in Active Directory domain. When 
creating or renaming a user in Active Directory Users and 
Computers it is also referred to as Full Name attribute.
Distinguished This attribute uniquely defines any object in 
Active Directory Forest. It contains the CN name attribute 
as the first element and the container path as the second; 
consider this example:
CN=adpsadmin,OU=Delegation,OU=GlobalResources,DC= 
adpstest,DC=net

SamAccountName: This attribute is well known as pre­
Windows 2000 logon name, but it is confusing as it is still 
used in common setups. Along with the domain name, it is 
the most commonly used logon name of end users in on- 
prem applications; here is an example:
ADPSTEST\adpsadmin
Here, the first part is the domain, and the second part is 
the SamAccountName attribute of the user. This attribute 
needs to be unique domain wide and would be good if it 
would be unique forest wide as well, to minimize the 
possibility of bad integrations with other applications or 
processes.
UserPrincipalName This attribute is mostly known as the 
UPN attribute. It uses the email notation and is used in on- 
prem, hybrid and cloud implementations. The first part is 
the username, and the second part is the domain name. It 
is a good practice that the UPN will be similar to the 
username or ensure data consistency, but there could also 
be implementations when the UPN is anonymized and 
there is no correlation with personal information inside AD. 
Consider this example: 
adpsadmin@adpstest.net

This attribute needs to be unique domain wide, and since 
Windows Server 2012 R2, the domain controller does not 
allow modification of the UPN or the creation of a user with 
UPN that is duplicated across
Security Identifier We can assign the roles to users on files, 
applications, and Active Directory. This assignment is 
based on the SID of user or group objects. When a user is 
created, the domain controller assigns the SID to the user 
with a domain SID and a generated RID. Take a look at this 
example:
S-1-5-21-3259212432-2760075878-3678214614-1000
Globally Unique Identifier This randomly generated 
identifier is assigned to every Active Directory object. We 
could use this attribute when searching for users in 
PowerShell and integrating with other applications to make 
sure we never have duplicates in those systems.
8a3ee9e8-b75f-445b-b9ed-78d9f344caa3
To display all attributes that are defining the existing user, 
we could open the details of the user in the ADUC console, 
search for or navigate to the user and open the Attribute 
Editor (using the advanced features options in the console 

or by executing the PowerShell command) as illustrated in 
Figure
Figure 5.3: Displaying all user attributes
In the next part of the book, we will explain other 
attributes in detail, but the general advice is that not every 
attribute is presented the same way in PowerShell (that is, 
using Active Directory Web Services) and inside of 
attribute editor that is using the LDAP notation. Sometimes 
it just impacts how the values are presented, but there are 
situations when even the name of attributes does not 

match each other, and a closer look is required to make 
sure the right attribute is used.

User creation, common attributes intro
After understanding how the user objects inside Active 
Directory are defined, we can create some to understand 
what information is to be provided when an object is 
created. We will go through the process using the ADUC 
console and then try to replicate the same using 
PowerShell.
One of the important parts of the process is to find the 
right organizational unit to create user objects. As we 
explained in the previous chapters, in different locations of 
Active Directory, different teams will have access to those 
user objects. If we are creating a user from a specific 
country or division, typically, the service desk from that 
specific entity will have permissions to manage the user 
and reset password permissions. That said, it is not 
recommended to create high privileged users in those 
locations; instead, we should create them in central 
locations that only domain admins will have access to 
manage anyway.
Let us start the elevated command prompt and run the 
dsa.msc console to start the user creation process.

Navigate to the right organizational unit and use the New 
user option, as illustrated in Figure 5.4 and Figure
A DCAZROOTOOI -MicrosoftAzv X DCAZROOTOOI 
X +
<- -> c • bM-98276bb3-bS03-4347-9i82-71bS7269
*981.biMion.izur
*.com/#/di
*n...
 0 & ☆ A □ X
_, Active Directory Users and Computers 
File Action View Help
O
»
, Actn-e Directory User 
> □ Saved Quenes 
v adpstest net
> Z. Suiltin
> Computers
1. DomainCont
2 ForeignSecun 
i GlobalResour.
□Q Delegate 
jil Gravps 
.5 . SeniceAc- 
22. Keys
LostAndFoun 
J Managed Sen 
X Office
Delegate Control...
Move,..
Fmd_.
Mew
All Tasks
View
Delete
Rename
Refresh
Export List..
Tie
^pe
Description
Theft are no items to show tn thts vxw.
Compeer
Contact
Group
InctOrgPtfSOn
msDS-Sbadcn Prine »paK.ontainer
mslmiging-PSPs
MSMQ Queue Alias
Organisational Un
*
Printer
Q Ad mu­
.. Group
Properties
11 Standardusers 
> J} Workstations
. UK
Program Data
Help
User
Shared Folder
Create a new object...
Figure 5.4: Creating new user - Name Attributes

iK DCAZROOTOO! • Microsoft Azu X _ DCAZROOT001 
X +
<- -> 0 i b$t-98276bb3-b503-4347.9a82-71b57269e98l.bastion.azure.com/*/dien... 0 
☆ 
> =/ □ X
23 Active Directory Users and Computers 
— OX
File Action View Help
**lara!ia □ a..il01 Utorn
22 Active Directory Users and Computers (DCAZRC 
> ,"*1  Saved Queues
>*  jp j adpstest.net
> i?l Builtin
> Q Computers
> >. Domain Controllers
> 21 ForeignSecurityPnncipals
v . GlobalResources
Delegation
31 Groups
31 ServiceAc counts
k > □ Keys
> 21 LostAndFound
> . , Managed Service Accounts
v 31 Office
v a pl
> a AdminUsers
> a Groups
□j StandardUsers
> a Workstations
> a UK
> L Program Data
Name
Type
Description
New Object - User
? Greater: adpsteet net Office PL-Standard Users
Next > Cancel
Figure 5.5: Creating new user - Name Attributes
First, we need to fill the First name and Last name of the 
user and eventually, correct the pre-populated Full Name 
(which will be filling the CN and Display Name attributes) 
with a specific naming convention. If the naming 
convention in the organization is contains the first name 
and last name in the UPN for consistency, it should be the 
same inside SamAccountName. It need not necessarily be 
the same, but it is always a good practice. However, the 
limitation of that attribute is that it can only contain twenty

characters, so it will not be able to match the UPN part in 
some cases.
Once the data is as we require, we can proceed to the next 
step and set the right password. Passwords need to follow 
the password policy specified for the domain we are 
creating the user in. If a password does not follow it, we 
will need to retry the operation until the right password is 
set. There are a couple of options that can help us make 
sure it is handled accordingly.
User must change password at the next login: This is the 
option that enforces password change after user login to 
domain joined workstation or server. In some cases, when, 
for example, NLA is enabled and RDP is used for the first 
logon, this option can break the login operation and force 
the user to change their password in a unique way. It is 
useful when changing the password and sharing it with the 
user on a second channel. We will make sure the user will 
not use that known password going forward and must 
change it to authenticate with other applications.
User cannot change password: This option prevents users 
from making changes to their password, which could 
eventually be used for system accounts that are managed 
only by third-party password management apps or only 

changed by system administrators. It is not feasible for 
standard users.
Password never expires: This is commonly used on the 
service account for which the password change schedule is 
different from the domain policy. The latest 
recommendation is to not use this option, even for service 
account; instead we should create specific gMSA.
Password Policy with extended expiration period for system 
accounts, making sure the password is eventually rotated, 
even on those systems. This is not required for standard 
users.
Account is disabled: This option can be used to prevent 
users from signing in. Doing this during the creation 
process is not particularly useful, but when we do not set 
the password for the user, we need to disable the account 
to create it in AD. When a user is leaving the company or is 
considered to be prohibited from signing in to the IT 
systems, we can disable their account before deletion to 
make sure user account is secured but with keeping the 
operation fully reversible.
For our scenario, we will create a standard user while 
forcing password change at first login, as illustrated in 
Figure 5.6 and Figure

A DCAZROOTOOI - Microsoft An. r x DCAZROOT001 
X +
<- -> 0 i bst-98276bb3-b503-4347-9a82-71b57269e98l.bastion.azure.eom/#/dien... □ \$ ☆ 
* 
□
New Object * User
X
in: adpstest net /Office/PL'StandardUsen
Password
Qonfrrn password
type 
Description
There are no items to show in this view.
0 User must change password at next logon
□ 
Ujer cannot change password
Q Password never expees
□ 
Accgirt >s dsabied
»
<Bk* I jjaa > Caned
> Groups
- StandardUsers 
>20 Workstations 
> Al UK
> Program Data
Figure 5.6 : Creating new user - Password options

A DCAZR007001 - Microsoft Azv X . _ DCAZROOTOOI 
X +
<- -> C ® bst-98276bb3-b503-4347-9a82-71b57269«981.bastion.azur«xom/
*/clien._
 □ 
☆ 
&=?□£> 
:
Mew Object ■ User
Type 
Description
There are no items to show in this view.
>>
When you cfcck Fmh. the folcwng object wi be created
J Gwte n: KOstest net . Offce PL Standard Users
cgacfc [ Emh Caned
> a] Groups
- Standardusers 
> a. Workstations 
al UK 
Program Data
Figure 5.7 : Creating new user - Password options
After successful creation of user, we can query it from 
Active Directory users and computers and check the 
attribute details by choosing the Properties option. We will 
have many tabs available and one of them is Account tab, 
which will show specific account options, and we will be 
able to see that the created user is yet to change their 
password if the first option in the list is checked, as 
illustrated in Figure 5.8 and Figure

A DCAZROOTOOI * Microsoft Azvr X _ DCAZROCTOOI 
X +
<- -> C ft bst-98276bb3-bS03-4347-9a82-71b57269»981.bas6on.aajre.com/#/die<i... □ 
☆ ft =/ □ £ 
:
_ Active 0>r«tc<y Users and Computers 
—OX
File Action View Help
* * I 5 is I x o xs 0 ni I m i r 3'«
22 Active Directory Users end Computers [DCAZRC * 
> 20 Saved Queries
v jJj edpstest.net
> 21 BiiilUn
> 21 Computers
> X Domain Controllers
> 21 ForeignSecuntyPnncipals
v jjQ GlobalResources
X Delegation
X Groups
X Servk eAccounts
vV > l3 K«ys
> 21 LortAndfovnd
> 21 Managed Service Accounts
* X Office
v a pl
> X AdmmUsers
> X Groups 
X StandardUsers 
S Workstations
> X UK
> 21 Program Data
y Server
*
 
v
Name 
Type 
Description
John.Nowak_______________User
Copy­
Add to a group...
Name Mappings... 
Disable Account 
Reset Password...
Move...
Open Home Page
Opens the properties dialog box for the current selection.
Figure 5.8 : Verifying the created user - Properties

Figure 5.9: Verifying the created user - Properties
In other tabs, we can find information such as 
membership, security permissions, and the attribute 
editor, which displays all LDAP attributes of that user 
(ensure advanced features in the View menu of ADUC are 
enabled). On the Profile tab, we can redirect the user’s 
home drive.
We can also create users in PowerShell, which is especially 
useful when creating multiple users but is also good for 
single operations. To do this, we need to start PowerShell in 
elevated window and import the ActiveDirectory module if 

required. After the module is imported, we use the New- 
ADUser command with all necessary attributes:
Import-Module ActiveDirectory
New-ADUser -Name -SamAccountName -userprincipalname
However, when we try to perform this operation, we get 
the message that there is a duplicate. Of course, we 
created this user inside the ADUC console, so we need to 
create user with different UPN attribute which is unique 
forest wide. Modified PowerShell commands are as follows:
Import-Module ActiveDirectory
New-ADUser -Name -SamAccountName -userprincipalname
Everything progresses successfully as illustrated on Figure

Ik DCAZROOT001-Microsoft Ail X ■ DCAZROOTOQ1 
X +
<- -> C ft bst-98276bb3-b503-4347-9a82-7lb57269e981.bast... □ & ☆ 
* 
□ X :
a Administrator Windows PowerShell 
— 
□ X
PS C:\Windows\system32> Import-Module ActiveDirectory
PS C:\Windows\system32> New-ADUser -Name John.Nowak -SamAccountName john.nowak -userprinci 
palname john.nowak0adpstest.net
New-ADUser : The operation failed because UPN value provided for addition/modification is 
not unique 
forest-wide 
At line:l char:l
♦ New-ADUser -Name John.Nowak -SamAccountName john.nowak -userprincipal __
+ Categoryinfo 
: NotSpecified: (CN=John.Nowak,C...adpstest,DC=net:String) [Ne
w-ADUser], ADE
xception
+ FullyQualifiedErrorld : ActiveDirectoryServer:8648,Microsoft.ActiveDirectory.Managem 
ent.Commands.N
ewADUser
PS C:\Windows\system32> New-ADUser Maae John.Nowak2 SamAccountName john.nowak2 userprin 
cipalname john.nowak20adpstest.net
PS C:\Windows\system32> „
Figure 5.10: Creating user using PowerShell
As we are aware that the GUI process asked for setting the 
password and PowerShell did not prompt for any password, 
the account created is disabled. To enable the account we 
need to first set the user password in PowerShell or ADUC 
before the enable option is possible. We can use the 
following commands to correct the user in PowerShell: 
john.nowak2 #You will be prompted for password if no 
newpassword parameter is specified as secure string

john.nowak2 -Enabled
After this operation, we can query user properties in 
PowerShell and GUI, as shown in Figure
JU DCAZROOTOOI • Microsoft Axl X I DCAZROOTOOl
□ X
X
i bst-98276bb3-bS03-4347-9a82-71b57269e981.bastion.a... D ☆
£S Administra’
5 Pi
PS C:\Windows\system32> Set-AOAccountPassword 
Please enter the desired password for -CN-3ohn 
Password: •»•••»«••••
Repeat Password: »»»»■»•••••
PS C:\Windows\systen»32> Set-ADUser -Identity j< 
PS C:\Windows\system32> get-aduser john.nowak2
John.Nowak2 Properties
General Address Account Profile Telephones Organization Pub
*
 1 *
John Nowak 2
X
True
OistinguishedName : CN-3ohn.Nowak2,CN-Users,DC) 
Enabled 
GivenName 
Name 
Objectclass 
ObjectGUID 
SamAccountName
: 3ohn.Nowak2
: user
: 8cbfebel-cbd5-4e2d-b9de-d9!
: john.nowak2
: 5-1-5-21-3259212432-276007!
Surname 
:
UserPrincipalName : john.nowak2@adpstest.net
PS C:\Windows\systeni32>
Figure 5.11: Validating user creation in PowerShell
As we did not specify personal information, those fields are 
empty, and the user is created in the default users 
container, so in order to properly manage it from the

specific service desk perspective, it would need to be 
removed and created again in the right location, or it could 
be moved to the desired OU. We can execute the following 
PowerShell commands to perform this operation:
#TargetPath need to be in same domain source location 
and the same as domain controller we execute commands
#We could specify server parameters in all functions if we 
perform operations from endpoint in different domain "­
server". Sometimes it is domain parameter for specific 
operations.
$User = Get-ADUser john.nowak2
Move-ADObject -Identity $User.DistinguishedName -
TargetPath
"OU=StandardUsers,OU=PL,OU=Office,DC=adpstest,DC=n 
et"
john.nowak2 -DisplayName John.Nowak2 -GivenName John 
-Surname Nowak
john.nowak2
The user object will be filled with the right personal 
information and moved to the right organizational unit. 
Local service desk would need to have delegation to this

OU to be able to properly manage the user. Results of the 
above script are illustrated in Figure
A DCAZROOTOOI • Microsoft Axu> X M DCAZROOTOOI 
X +
<- -> C A bst-98276bb3-b503-4347-9a82-71b57269e981.bastion.azure.eom/#/dien... B |5 ☆ A =jT □ X :
0 Administrator Windows PowerShell 
—OX
PS C:\Windows\system32> $User get-aduser john.nowak2
PS C:\Windows\system32> Move-ADObject -Identity $User.DistinguishedName -TargetPath "OU-StandardUsers,OU-PL, 
OU-Office,DC-adpstest,DC-net"
PS C:\Windows\system32> Set-ADU5er -Identity John.nuwak2 -DisplayName John.Nuwak2 -GivenName John -Surname N 
owak
PS C: \Windows\systen>32> get-aduser -identity john.nowak2
DistinguishedName 
Enabled 
GivenName
Name
Objectclass 
objcctGUID 
SamAccountName
Surname
UserPrincipalName
CN-John.Nowak2,OU-Standardllsers,OU-PL,OU-Office,DC-adpstest,DC-net 
True 
John 
John.Nowak2 
user 
8cbfcbcl cbdS 4c2d bOdc d975dbcfc4cc 
john.nowak2
S-l-5-21-3259212432-2760075878-3678214614-6606 
Nowak 
john.nowak2^adpstest.net
PS C:\Windows\system32>
Figure 5.12 : Validating user modification and moving to 
different organizational unit

User deletion and housekeeping.
In the previous section, we discovered how the user 
creation process could look like in Active Directory. To 
complete the full life cycle of an employee inside of 
organization we need to ensure that we are comfortable 
when deleting users and removing other objects from 
Active Directory.

User evaluation
Before we delete a user from directory, we should evaluate 
whether the user is still in use to prevent impacting an 
employee or a service of the organization. To evaluate the 
important attributes that would indicate that the user is no 
longer in use, we can check and WhenCreated to make 
sure we are not targeting newly created users. Those 
checks can be done using the user properties and attribute 
editor in ADUC, as illustrated in Figure 5.13 and Figure
DCAZROOTOO!
o
x
C A bst-8905e3lf-e4a2-494f-9082-ccad03107803.bastion.a... □ 
☆
John.Nowak2 Properties
_J Active Directory Users and Computers 
Action
q John.Nowak
John.Nc.vak2
. ForeignSecurityPrincipals 
.3'1 GlobalResources
> 2 Delegation
yi Groups
> 2 ServiceAccounts
□ Keys
j LostAndFound
Zj Managed Service Accoun
2 Office
> 2 AdminUsers
> y Groups
StandardUsers
> Workstations
> 2 UK
. Program Data
d Servers
. System
Remote control
Pubkshed Certificates Member Of Passwxd Repkcatron Orai-n Object 
Secinty Environment Sessions
General Address Accoixt Profle Telephones Organisation
Remote Desktop Services Profile COM* Attnbae Edior
itt routes
Attribute
proffePath 
prmoedObjectName 
proxy Addresses
Value 
A
<not set>
<not $et>
<not set>
lpwdLaslSe<
11/3/2022 11 51 53 PM Coordinated UnrverH
registered Address
<not set>
repl Property MetaData
AttlD Ver Loc USN 
Org DSA
replUpToOateVector
■not set)
repsFrom
<notset>
repsTo
<nct set>
revision
<not set)
rid
<not set)
room Number
enol set)
sAM Account Name
|ohnnowak2
sAMAccountType
805306368 • (NORMAL USER ACCOUNT *
<
>

Figure 5.13 : Validating user logon and creation dates
- DCAZROOTOO!
<- -» C « bst-8905e31f-e4a2-494f-9082-ccad03107803.bastion.a... □ 
☆ 
* ==/ □ X
3 Active Directory Users and Computers 
File Action View Help
> _ ForeignSecurityPrincipals * 
v al GlobalResources
> 
S Delegation
32 Croups
> 
S ServiceAccounts
> 
□ Keys
> n LostAndFound
> 
23 Managed Service Accoun 
v a’i Office
» 
* a pl
> 
3' AdminUsers
> 
131 Groups
a Standardusers
> 
.31 Workstations
> a uk
> n Program Data
> 
a’i Servers
> 
23 System 
v
John.Nowak2 Properties 
? X
Attributes
Published Certificates 
Member Of 
Password Repfcation Dialm Object
Securty Environment Sessions Remote control
General Address Account Profile Telephones Organization
Remote Desktop Services Profile COM* Attribute Editor
Attribute
Value 
A
uSNChanged
73894
uSNCreated
73866
uSNDSALastObjRem
mot set)
USNHersrte
mot set)
uSNLastObjRem
mot set)
uSNSource
mot set)
wbemPath
<not set>
weBKnownObjects
mot set)
I whenChanged
11/4/2022 12 00 43 AM Coordinated UraverM
whenCreated
11/3/2022 11:41:14 PM Coordinated Unrver
wWWHomePage
<not set>
x 121 Address
<not ®«t>
xSOCUnque Identifier
mot sets
<
>
Name
J, John.Nowak
4 John.Nowak2
Figure 5.14: Validating user logon and creation dates
You can do the same when querying the right data using 
PowerShell and by adding the specific fields needed in the 
parameters attribute. To verify the attributes, we can use 
the following command: 
john.nowak2- 

pr
whenCreated,pwdLastSet,LastLogonDate,LastLogonTimeSt 
amp,lastLogon,PasswordLastSet
Results are shown in Figure
■ DCAZROOTOOl 
x +
<- -> C ■ bst-8905e31f-e4a2-494f-9082-ccad03107803.bastion.azure.com/*/dient.. □ l£? ☆ 
& - J [] £ 
:
\B Administrator Windows PowerShell 
—OX
Ips C:\WindOWS\tyttee32> get-aduser john.nowak2 .■ - whenCreated pwdlastSet.lastlogonDate.lastlogon.PasswordlastSet
DlstmguishedNaee :
CN-John.Nowak2,0U-StandardUsers,0U-PL,0U-0
*fice,DC-adpstest,DC-net
enabled 
:
True
GivenNaee 
:
John
lastlogon 
:
e
LastLogonDate 
:
John.Nowak2
Objectclass 
:
user
ObjectGUlD 
:
8cbfebel-cbdS-4e2d-b9de-d97Sdbcfe4ce
PasswordlastSet :
11/3/2022 11:51:53 PM
pwdLastiex 
;
133119931136003343
SaeAccountNaee 
:
john.nowak!
sio 
:
$-1-5-21-3259212432-2760075878-3678214614-6606
Surnaee 
:
Nowak
UserPrinc 1 pa INj«e :
john.nowak20adpstest.net
whenCreated 
:
11/3/2022 11:41:14 pm
JS C: \Windows\systeia32> get-aduser john.nowak pr whenCreated.pwdlastSet,LastlogonDate.lastlogon,PasswordlastSet
DlstinguishedNaee :
CN-John.Nowak.OU-StandardUsers.OU-PL,OU-OffIce,DC-adpstest,DC-net
Enabled 
:
True
GivenNaee 
:
John
lastlogon 
:
0
LastLogonDate 
:
John.Nowak
ObjactClass 
:
user
ObjectGUlD 
:
1C278dbC-37dl-496e-190C-C737734b2eO8
PasswordlastSet : 
pwdLastSet 
:
0
SaeAccountNaee 
:
john.nowak
SID 
:
S* 1-5-21-32S9212432-2760075878-3678214614-6605
Surnaea 
*
Nowak
UserPrincipalNaae :
john.nowak0adpstest.net
whenCreated 
:
11/3/2022 11:24:28 PM
Figure 5.15: Comparing different user logon and 
modification dates using PowerShell
As we can see, the logondate is not populated on those 
users as they never logged in; so when running queries, it 
is recommended to see if the user was created recently, 

logged in recently, and if the password was set recently 
(with keeping in mind that the lastLogonDate in PowerShell 
query will updated only with 14 days). After running the 
same PowerShell command of the user, we used to log in 
to the domain controller we will receive proper data, as 
illustrated in Figure
Figure 5.16: Querying active user and receiving valid data 
for logon times
As we find the users to be deleted or those who left the 
organization, the first step would be to disable the 
accounts. We can perform this step using the ADUC, or you 
can do it from PowerShell. If we implement some kind of 
housekeeping scripts, it would be useful to notify 
administrators that several accounts were disabled due to 
not logging in to the directory in 180 days and other 
applicable criteria. When navigating to the Account tab in

ADUC, just use the Account is disabled checkbox or apply it 
with using the following PowerShell command.
Get-ADUser John.Nowak2 | Set-ADUser -Enabled $false
Results are illustrated in Figure
■ DCAZROOTOOI
-OX
<- -> C ■ bst-8905e3lf-e4a2-494f-9082-«ad03107803.bastioruzur«.coin/
*/client/REN8...
 □ 
☆ 
* —J □ X :
I Lr>hn Na-»uvj»U? Drnpert>X 
? 
X
PuUahed Ccrt/ioMcs Mortcr Of Password Repicdbon bd-vi Object
Securty Enwonmert Sestons Remote control 
Remote Desktop Services Profie COM
*  Attribute Edtor
(s#r
*ral
 Address Account Pm/4e Telephones Orgnmyatton
User logon name 
>ohnnowak2 
@
*adpstest
 net
Uoer logon name (pre-VJJrdowo 2000).__________________________________
|AOPSTEST\ 
I |Wmnpw*2 
~|
Logon Hours- Log On Io...
O Unlock account
' Aeeoirt ^bons
□ Stare password reverse* encrypton 
A
0drte<xrta<faabled
□ Smart card a reduced for rt or active (open 
□ Pccmn 4 senstne and earner be defecated 
v
Account e*p<es
 
Never
I Sunday . Oeeerrtee 4.2022 
T]
ArlrrMni<frAtnr' Wirwlnuut Pawver^hell
k)l«tiAgv is 
• CM-adps»<J«i«,OU»O
*l*c»t
 Ion. OU«Globa lResources.DC«»<lpstett.DC>n
tt 
Enabled 
: Vrue
GivenNaoo 
:
lostlofoa 
: iniiOTJessvoOM
*
leitlefoiitote 
: 11/1/2OJ2 t:0>:
*4
LJitLogonTiiestaip : ijmseMjeeasmm
Maio 
: adpsadsin
Objectclass 
: user
ObjectuuXO 
: 8al«»9e8-b7Sf-44S6-t»ad-78O9f344caaJ
P*»iwordLa»tS«t
 
: 9/2S/2O22 10:12:41 AH
pwdiattSet 
: 1»iOSSM U10M JU4
sawAcccuntNave 
: adpsadeln
SID 
: S-l-S-21-J2S92124J2-2/4ee7SS7S-167B214A14-ieee
Seraaae 
:
kjserPrlnclpalNaae : adpsadeln^adpstest.net
LhenCreated 
> 9/25/2022 10:20:21 AM
PS C:\Wln<lOMsXsystea32> Get-ADUser John.Mow>k2 | Set-ADUser Enabled (Palse 
PS C:\Wlndows\systee)2> —
OK Cancel ffftf 
Help
Figure 5.17 : Disabling the user that was not in active usage
Once a user was kept disabled for a certain period, for 
example, 45 days, we are almost certain that it is safe to 
remove the account from Active Directory, with the

exception of cases wherein legal teams require the user to 
be present, ensuring that post-exit actions can be 
performed. So now we can process the deletion in ADUC or 
PowerShell. If the recycle bin feature has been enabled as 
mentioned in the previous chapter, we can recover the 
user. Navigate to user in ADUC and right-click and choose 
the delete option, as illustrated in Figure 5.18 and Figure or 
simply execute the PowerShell script as follows:
Get-ADUser John.Nowak2 | Where -eq | Remove-ADUser
— DCAZROOTOOI 
X +
<- -> 0 A bst-8905e31f-e4a2-494f-9082-ccad03107803.bastion.... □ |£> ☆ 
> ==J □ X ;
n Active Directory Users and Computers
File Action View Help
V
*l£El
 * □ lxia&lI
v adpstest.net 
a
> 71 Builtin 
> 23 Computers 
> y Domain Controllers 
> _3 ForeignSecurityPrincipals 
v a*l  GlobalResources
>22 Delegation 
2 Groups
> aj ServiceAccounts 
> 23 Keys 
> 1 LostAndFound 
> j Managed Service Accoun v 
< >
Deletes the current selection.
Name
2, John
-OX
Copy..
Add to a group...
Name Mappings...
Reset Password... 
Description
Move...
Open Home Page
Send Mail
All Tasks 
>
Cut
Delete
Rename
Properties
Help
Figure 5.18 : Removing the user in ADUC and PowerShell

M DCAZROOTOOI 
X +
<- -> C A bst-8905e31f-e4a2-494f-9082-ccad03107803.bastion.... B |£ ☆ 
> =/ □ X :
a Administrator Windows PowerShell 
“OX
Enabled 
GivenNMK 
Maae 
Objectclass 
DOjectGUiD 
samAccountNaae 
510
Surnane 
userPrincipalNaae
: False
: John
: 3ohn.Nowak2 
: user
: 8cbfebei-cbds-4e2d-b9de-d975db<fe4ce
: john.nowak2
: S-1-5-21-3259212432-27GO075878-3G78214G14-G6OG 
: Nowak
: john.nowak2fiadpstest.net
3&'C:\Nindows\syste«32> Get-ADUser John.Nowak2 I where ($_.enabled -ec Sfalse) | Reaove
*ADUser
 
ft
Conf1TB
Are you sure you want to perform this action?
Perforating the operation "Reaove" on target
"CN-3ohn.Nowak2,0u-Standardu$ers,OU.pl,Ou-Office,DC-adpstest,OC-net".
(y) Yes [a] ves to All [n] no [l] no to All [s] Suspend [?] Help 
(default is “V):y
PS C:\Mindows\sy st ea32> _
Figure 5.19 : Removing the user in ADUC and PowerShell
In big organizations, deletion tasks cannot always be 
performed manually, but there is a space to use the 
housekeeping scheduled tasks that will disable a specific 
set of unused accounts. Leavers process needs to be 
implemented as soon as a person exit the organization. 
There should be request to disable their accounts in AD or 
even automatic process that is initialized by HR system 
integration or middleware. User disable and deletion is one 
of the important topics for identity life cycle, and we need 
to make sure it is handled in the right manner.

User attribute modification
So, we have already learned how to manage user life 
cycle using creation and deletion operations, including 
password set operations.
Now, we will try to go through all the settings of the 
user that could be useful to understand all important 
settings to be configured when managing user objects. 
Earlier, we explained the name attributes that could 
sometimes be confusing. That is why we will try to start 
with the renaming operation to see what to do if the 
created user needs to be renamed inside AD.

Renaming user account
Renaming a user account can be justified when it contains 
the first or last name and is changed for a specific person. 
The username does not need to be updated sometimes as 
it impacts all systems connected to Active Directory and 
will probably cause some issues in those integrations, so 
people prefer using old names sometimes, but it will 
depend on organizational policies and the preference of 
employees.
To rename the user, we will navigate to the user in ADUC. 
We can also try to find user and type the current 
username, search it in the Entire Directory tree and then 
right-click and choose the rename option. We will be 
prompted to adjust the username values, as illustrated in 
Figure 5.20 and Figure

add re a y©u0_
D«jbk Account
Retft P«r*ord
Mot .
Cpm H< ”M P
F । !t Ed it
l»wi. CcrUdi. a-dGvwct
then ardCruM
Lcrtputoi 
[ter-wn QcrUt -cri
F C't»£rp«h 
a. GlebtXeourcci
> 
al 0«l<9«u«n
a*.  Group
> 
a'. icvKcAiiovr’j
Kcp
Lv.lAr JKvnd
F-Un«jTd itnKt Accounii 
aj OffK«
> a] AdrrwiUxtn
> aj
^•rdxdJwfj 
/tOtkllftCTU
Proorcties
Figure 5.20: Renaming user

Figure 5.21: Renaming user
We can perform the same operation using PowerShell. 
First, we need to query for that user and then use the 
Rename-ADObject function with the property. We will also 
need to modify UPN and DisplayName separately, using 
the Set-ADUser command:
Get-ADUser John.Nowak
Get-ADUser John.Nowak | -DisplayName John.Nowak3 - 
SamAccountName john.nowak3 -UserPrincipalName 
john.nowak3@adpstest.net

John.Nowak3 | Rename-ADObject -NewName John.Nowak3
Get-ADUser John.Nowak3
The results are illustrated in Figure
■ DCAZROOTOOI
<- -> C a
X +
v
—
o
X
bst-a31adff-49aa-4375-b103-8527c9da8bb2.bastion.azur... 0 l£? "A
*
□ A
■
S Administrator Windows PowerShell
—
O
X
PS C:\Windows\cyctefn32> Get-ADUser 3ohn.Nowak
DistinguishedName : CN»John.Nowak,OU-StandardUsers,OU-PL,OU-Office,DC-adpstest,DC-net
Enabled 
: True
GivenName 
:
John
Name 
:
John.Nowak
Objectclass 
: user
ObiectGUID 
:
Ic278dbc-37dl-496e-a90c-c737734b2e08
SamAccountName 
: john.nowak
SID 
* S-l-5-21-3259212432-2760075878-3678214614-6605
Surname 
:
Nowak
UserPrincipalName : john.nowak@adpstest.net
Ips C:\Windows\system32> Get-ADUser John.Nowak | Set-ADUser -DisplayName John.Nowak3 SamAccountHarre
; chr . r o..d■
m JserPrincipalName john.nowak3£adpstest.net
Kl C:\Windows\system32> Get-ADUser 3ohn.Nowak3 | Rename-ADObject -He..Nare 3ohn.Nowak3
PS C:\Windows\system32> Get-ADUser Dohn.NonakS
DistinguishedName : CN-John.Nowak3,0U-StandardUsers,0U-PL,OU-Office,DC-adpstest,DC-net
Enabled 
: True
GivenName 
:
John
Mm ••
Juhn.Nuwok?
Objectclass 
: user
ObjectGUID 
:
Ic278dbc-37dl-496e-a90c-c737734b2e08
SamAccountName 
: john.nowak3
SID 
: S-l-5-21-3259212432-2760075878-3678214614-6605
Surname 
:
Nowak
UserPrincipalName : john.nowak3@adpstest.net
Figure 5.22: Renaming user using PowerShell

Modifying attribute-specific information
A common scenario for users is to add some company­
specific information that needs to be present on the object 
for better reporting and integration capabilities. As 
example attributes, we could choose the following set of 
employee attributes:
employeeID
employeeNumber
employeeType
These attributes can be used to insert information about 
contract type or HR identifier and the like.
We need to open user directly from the organizational unit 
view to be able to access the Attribute Editor tab in ADUC, 
where we can simply edit the attribute and fill the right 
values, as illustrated on Figure 5.23 and Figure

DC4ZR0OTM1
O X
+
X
C ft bst-a31ac1ff-49aa-4375-b103-8S27c9da8bb2.bastion.a2ur... B ☆
3 Active Directory Users and Computers
File Action View Help
»
Remote Desktop Sennces Proffe COM- Awbute Edttx
John.Nowak3 Properties
Active Directory Users end Computers (OCAZRC 
. 2 Saved Queries
edpslest.net
> . j Builtin
j "1 Computers
> pj Domein Controllers
> ForeignSecurrtyPnncipals
v □. GlobalResnurces
> ,i_ Delegation 
i_ Groups
> [ij ServiceAccounts
> C3 K*y
s
> LostAndFound
> ' Managed Service Accounts
v aj Office
AKrW«
Attribute
Value
A
eirg}!oj-eelD
■-not set?
empSoyee'Mnbef
>not gcL>
lemdoyeeType
(not wt>
erftraontJame
mot Mt>
fotsmteTdepbcnftN...
mot Mt>
Rags
fSMORcteCh^ner
met sets
gaibageColPeriod
mol sei;
gerwraborOjalfier
mot sets
gd Number
cntfKO
giverNavo
John
group MemberahKS S AM
mot sei?
group Pnontv
not sei ?
V
<
>
Figure 5.23: Modifying employee attributes using Attribute 
Editor

L_ KAZR00TW1 
X
V -> C ■ b4t-a31aclff-4gaa-4375-b103-S527c9da8bb2.bastiort.3zuf... D t * s/ □ A ;
2 Active Directory Users and Computers
Tite Action View I le lp
*4|iml4fQ|X0£^l6Enl i m 3 T
John.NowakB Properties
Remote Desktop Serzces Frette COM- AlrnMe &$W
~ Active Directory U;en end Computer; (CtCAZFK 
> ■~L' Saved Queries
v if j adpstesl.net
> ZL Suiftin
> 23 Compulen
j jjj Domein Controller!
> .2. ForeignSecurityP rincipals
v [Jj GlehafResourees
> 3j Delegation
ffl Group;
> "ft. SeMteAccounts
> 23 Keys
> ~i LoitAndfound
> Managed Service Accounts
v 33 Office
v 33 Pl
Name
^John r.cv.akS
AHnbJes
Sfl-jute 
Va'ue
nnp!ojre>D 
met Mt>
rfvhi&f 
ennf i
en-plo-ee Tjpe 
met tel >
exlenaonlfaire 
mot sets
IscsinJeTelee>horteN _ mot Mt>
String Attribute Editor 
X
AtlrbiCe. enuioveeTvoe
Value;_______________________________________________________
[HemJ 
|
Oeee 
OK 
Caned
Edt 
Aka
Figure 5.24: Modifying employee attributes using Attribute 
Editor
The same operation can be performed in PowerShell, but 
not every attribute can be used as a parameter for the Set- 
ADUser command. There are add, replace, and remove 
parameters that can be used when setting, modifying, or 
clearing out a specific attribute on a user object if the 
specific attribute is not implemented as a parameter of the 
command. Following PowerShell commands will report and 
modify the user employeeType attribute value to internal:
Get-ADUser John.Nowak3 -pr employeeType

Get-ADUser John.Nowak3 |
John.Nowak3 -pr employeeType
The results of this script are presented in Figure
M DCAZROOT001 
X +
v 
- 
O
X
<- -> C a bst-a31ac1tt-49aa-4375-b103-852/c9da8bb2.ba$tion.azure.com/*/che... a
& <r
* 
□ x
i
n Administrator Windows PowerShell
- 
Q
X
IPS C:\Windows\system32> Get-ADUser John.Nowak3 -pr employeeType
DistinguishedName
: CN-John.Nowak3,OU-StandardUsers,OU-PL,OU-Office,OC-adpstest,DC-net
Enabled
: True
GivenName
: John
Name
: John.Nowak3
Objectclass
: user
ObjectGUIO
: lc278dbc-37dl-496e-a90c-c737734b2e08
SamAccountName
: john.nowak3
SID
: S-l-b-21-52b9212452-2/b00/b»/8-5b/8214614-bb05
Surname
: Nowak
UserPrincipalName
: john.nowak3£adpstest.net
PS C:\Windows\system32> Get-ADUser John.Nowak3 | Set-ADUser -Replace ^{employeeType internal"} 
C:\Windows\system32> Get-ADUser John.Nowak3 -pr employeeType
DistinguishedName
: CN=John.Nowak3,OU=StandardUsers,OU=PL,OU=Office,DC=adpstest,DC=net
employeeType
: internal
Enabled
: True
GivenName
: John
Name
: John.Nowak3
Objectclass
: user
ObjectGUIO
: Ic278dbc-37dl-496e-a90c-c737734b2e08
SamAccountName
: john.nowak3
SID
: S-1-5-21-5259212452-2700075875-5578214014-6505
Surname
: Nowak
UserPrincipalName
: john.nowak3$adpstest.net
Figure 5.25: Modifying employee attributes values using
PowerShell

We can use add, replace and remove parameters to modify 
most user data-specific attributes inside ADUC or 
PowerShell.

Implementing expiration dates on User accounts
Sometimes it is advisable to specify expiration date on 
users that have fixed dates contracts agreements. This is 
to help with employees hired on temporary or contract 
bases, which, without re-negotiations, have some 
expiration dates. We can reflect this easily by navigating to 
the Account tab on specific user, specifying the Account 
Expires information and picking up the expiration date 
from the form, as illustrated in Figure

Figure 5.26: Setting expiration dates on user object in 
ADUC
Figure 5.27: Setting expiration dates on user object in 
ADUC
This can also be performed by executing the following 
PowerShell command:
Get-ADUser John.Nowak3 -pr AccountExpirationDate
Get-ADUser John.Nowak3 | -DateTime "06/14/2023"

John.Nowak3 -pr AccountExpirationDate
The results are illustrated in Figure
■ CAZROO’OOI
□
X
X
C • b«-»31XlH-49M-4375-t>l03-8527c9di866Zb4St>on.42ut4XOm/
*/cl>»nVRENBWUPT1QwMDE_
 O <7 
> FJ □
|O A4m<v«fXQr Wn0Q»s
x
5 C:\winoows\systew)2> GetAOUser John.Nowak) : Account(xpirationOate
AccowntExolratioflDate : 
OistinguishedNaoe 
eneoled 
GiverMare
boltCtGUlD
'•-347B214414 W45
John.nowak 3£odc>s1est.net
Gct-AOUser John.Nowak) | Set-AOAccowntExpiration Da
John 
John.Nowak)
1C27SCDC ■ 3701-496< ■ >94C-C737734D2C4S 
John.nowak)
5-1-S-21-32592124S2-27C4
CM*John.NowakJ,OU-StandardUsers,OU-Pt,OU-Of fice,OC-adpstest,DC-net
rincioalHaee
174 -347»214414 444)
6/14/2423 12:04 44 AM
cn-John.Nowak),ou-stanoaccusers,OU-Pt,cv-Q
**
lc«,DC-adpsx«st,tx-n<t
John.Nowak) 
user 
lc27tatK-37ol-446ea94Q-<.7377Mo2eM 
John.nowak) 
$ 1->-21-32)92124)2-2744> 
Nowak
John.nowak3£odpstest.net
Figure 5.28: Setting expiration dates on user object in
PowerShell

Bulk user exports, imports, and modifications
Active Directory is a directory services database. In big 
organizations, other tools are used to report information 
users or integrate users with cloud applications or HR 
using software like Microsoft MIM and different types of 
metaverse implementations. However, not every 
application used in big organizations is able to integrate 
with those IAM software in the managed way.
It is very useful to know how to create reporting on Active 
Directory users and other objects. Sometimes reports 
needs to be done on demand, and all times they can be 
configured to be used in scheduled tasks and report this 
information on a daily or weekly basis. Querying all user 
information in implementations with thousands or 
hundreds of thousands of users will be a resource­
consuming operation, so the scheduled exports should not 
be performed during peak hours, like 8-10 AM, when most 
office users login for the first time. So, scheduling it at a 
different time is recommended.
To perform the reporting on Active Directory, we can use 
the Get-ADUser command in PowerShell but not with

specific name to search; instead, we need to use the filter 
options:
Get-ADUser *
When we use the * filter, it will try to query all users in a 
specific domain; we can also use some other filters that 
will narrow down the potential exported users:
Get-ADUser {Enabled -eq
When presenting the information to the console, the 
default visualisation is the Format-List | but we can change 
that and use the table export with Format-List, |
Get-ADUser {Enabled -eq | FT
Take a look at Figure

Figure 5.29: Exporting AD user information in PowerShell
If we want to get other attributes of AD users, we need to 
use the properties attribute in the command. If we do not 
want to display the default queried attributes and want to 
display only the properties we want to query, we can use 
the Select command and specify the columns we would 
like to display:
* -properties | Select
Get-ADUser {Enabled -eq -properties 
Enabled,whenCreated | Select Name, SamAccountName, 
DistinguishedName, Enabled
This is illustrated in Figure

Figure 5.30: Exporting filtered AD user information in 
PowerShell
Sometimes we do not need to export the entire domain; it 
is sufficient to export just the content of the specific OU, 
and we can specify the SearchBase attribute to query a 
specific organizational unit and the Subtree stands for a 
recursive search (I
Get-ADUser -SearchBase 
"OU=PL,OU=Office,DC=adpstest,DC=net" -SearchScope 
Subtree -filter {Enabled -eq -properties

Enabled,whenCreated | Select Name, SamAccountName, 
DistinGuishedName,Enabled
This is illustrated in Figure
■ DCAZROOTOOI 
X +
<- -> C ® bst-0f8cfb68-589c-40db-a867-03c77da1ce13.bastion.azure.com/... □ 
□ i :
Administrator Windows PowerShell 
—OX
PS C:\Windows\system32> Get-ADUser SearchBase "OU-PL,OU-Office,DC-adpstest,DC-net" -SearchScope Subt 
ree -filter {Enabled -eq STrue} -properties Enabled,whenCreated | Select Name, SamAccountName, Distln 
GuishedName,Enabled
Name 
SamAccountName DistinGuishedName 
Enable
d
Sohn.Nowaks john.nowakS 
CN-]ohn.Nowaks,0<J.Standardusers,OU-PL,OU-Office,DC-adpstest,DC-net 
True
PS C:\Windows\system32> _
Figure 5.31 : Exporting AD users from specific OU in 
PowerShell
Our AD forest is not a single domain implementation and 
sometimes, we do not want to log in or execute commands 
separately on all domain controllers. We can query global 
catalog port to get information about user data in other 
domains while specifying the 3268 (LDAP) or 3269 (LDAPS) 
ports.
We need to take into consideration that global catalog will 
provide only a limited subset of attributes, and to query 
different domains separately, we need to specify the

server parameter with different domain controller names 
or hostnames with standard ports 389 (LDAP) and 636 
(LDAPS) to different domains to get full information from 
that specific domain, as illustrated in Figure
■ OCAZROOTOOI 
x +
Administrator. Windows PowerShell 
—OX
<- -> C ■ bst-0f8db68-589c-40db-a867-03c77da1ce13.bastion.azure.com/»/chent/RENBWIJPT... □ (£■ ☆ 
* =? □
PS C:\Windows\system32> Get-ADUser -Server adpstest.net:3268 filter {Enabled -eq STrue} properties Enabled.whenCre 
ated | Select Name. SamAccountName, DistinGuishedName,Enabled
Name
SamAccountName DistinGuishedName
Enabled
adpsadmin
adpsadmin
CN-adpsadmin,0U-Delegation,OU-GlobalResources,DC-adpstest,DC-net
True
EU$
EUS
CN-EU$,CN-Users,OC-adpstest,OC-net
True
AP$
APS
CN-AP$,CN-Users,DC-adpstest,OC-net
True
ADPSTESTS
ADPSTESTS
CN-ADPSTESr$,CN-Users.OC-ap,DC-adpstest,DC-net
True
Administrator! Administrator! CN-AdministratorljCN-Users>DC-ap>DC-adpstesttDC-net
True
adpsadmin
adpsadmin
CN-adpsadmin,CN-Users,DC-ap,DC-adpstest,DC-net
True
ADPSTESTS
ADPSTESTS
CN-ADPSTEST$,CN-Users,DC-eu,DC-adpstest,DC-net
True
adpsadmin
adpsadmin
CN-adpsadmin,CN-Users,DC-eu,DC-adpstest,DC-net
True
Administrator Administrator CN-Administrator,CN-Users,DC-eu,DC-adpstest,DC-net
True
adpsadmin
adpsadminl
CN-adpsadmln.OU-Groups,OU-GlobalResources,DC-adpstest,DC-net
True
John.Nowak3
john.nowak3
CN-John.Nowak3,OU-StandardUsers,OU-PL,OU-Office,DC-adpstest,DC-net 
True
ri c:\wlndows\syste»32> Get:-Atxiser -server OCAZROOTOOI -filter {Enabled eq trrue) -properties Enabled,whencreated |
Select Name. SamAccountName, DistinGuishedName,Enabled
Name
SamAccountName DistinGuishedName 
IEnabled
adpsadmin
adpsadmin
CN-adpsadmin,OU-Delegation,OU-GlobalResources,DC-adpstest,DC-net
True
EUS
EU$
CN-EU
*,CN-Users,DC-adpstest,OC-net
True
AP>
AP$
CN-AP$,CN-Users,DC-adpstest,OC-net
True
adpsadmin
adpsadminl
CN-adpsadmin,OU-Groups,OU-GlobalResources,DC-adpstest,OC-net
True
John.Nowak3 john.nowak3
CN-John.Nowak3,OU-StandardUsers,OU-Pl,OU-Office,DC-adpstest,DC-net
True
PS C:\Windo«s\system32>
Figure 5.32 : Exporting AD users from GC and different 
Domain Controllers and domains
We have all this information in the console, but it would be 
great to actually save this information in a text file or 
spreadsheet. With built-in commands, we can easily export 

this information without much complexity. We use the Out- 
File command to export the output to a raw txt file, or we 
use to create a delimited file ready to be processed in 
Excel; consider the following example:
Get-ADUser -Server -filter {Enabled -eq $True} -properties 
Enabled,whenCreated | Select Name, SamAccountName, 
DistinGuishedName,Enabled | out-file
Get-ADUser -Server -filter {Enabled -eq $True} -properties 
Enabled,whenCreated | Select Name, SamAccountName, 
DistinGuishedName,Enabled | export-csv
This is illustrated in Figure

— DCAZROOTOOI 
X +
a
<- -> C i bst-0fSdb68-589c-40db-a867-03c77da1ce13.bast<on.azure.com/*/client/RENBWIJPT... 0 i£? ☆ 
* -S □
□
liJ Administrator Windows PowerShell
PS C:\Windows\system32> Get-ADUser -Server adpstest.net:3268 -filter {Enabled -eq $True) properties Enabled,whenCre 
ated | Select Name, SamAccountName, DistinGuishedName,Enabled | out-file c:\temp\report.txt
PS C:\Windows\system32> Get-ADUser -Server adpstest.net:3268 -filter {Enabled -eq $True) properties Enabled,whenCre 
ated | Select Name, SamAccountName, DistinGuishedName,Enabled | export-csv c:\temp\report.csv
PS C:\Windows\system32>
□
report.csv • Notepad
File Edit Format View Help
#TYPE Selected.Microsoft.ActiveDirectory.Management.ADUser 
“Name","SamAccountName","DistinGuishedName","Enabled" 
"adpsadmin","adpsadmin","CH-adpsadmin,OU-Delegation,OU-Glc 
"EU$", ”EU$",“CN-EU$,CN-Users,DC-adpstest,DC-net","True" 
"AP$","AP$","CN-AP$,CN-Users,DC-adpstest,DC-net”,"True" 
"ADPSTESTS","ADPSTESTS","CN-ADPSTEST$,CN-Users,DC-ap,DC-ac 
"Administratorl","Administratorl","CN-Administratorl,CN-U« 
"adpsadmin","adpsadmin","CH-adpsadmin,CN-Users,DC-ap,DC-ac 
£ADPSTEST$","ADPSTEST$","CN-ADPSTESTS,CN-Users,DC-eu,DC-ac 
"adpsadmin","adpsadmin","CN-adpsadmin,CN-Users,DC-eu,DC-ac 
"Administrator","Administrator",”CN-Administrator,CN-User< 
"adpsadmin”,"adpsadminl","CN-adpsadmin,OU-Groups,OU-Globa) 
"John.Nowak3","john.nowak3","CN-John.Nowak3,0U-StandardUsc
report • Notepad
- □
File Edit Format 
1
View Help
1
Name
SamAccountName DistinGuishedName
adpsadmin
adpsadmin
CN-adpsadmin,OU-Delegation
EU$
EUS
CN-EU$,CN-Usens,DC-adpstes-
APS
APS
CH-AP$,CN-Users,DC-adpstes
ADPSTESTS
ADPSTESTS
CN-ADPSTESTS,CN-Users,DC-a|
Administratorl Administratorl CN-Administrator'l,CN-Users
adpsadmin
adpsadmin
CM-adpsadmin,CN-Users,DC»a
ADPSTESTS
ADPSTESTS
CN-ADPSTEST$,CN-User'S,DC-e
adpsadmin
adpsadmin
CN-adpsadmin,CN-Users,DC-e
Administrator
Administrator
CN-Administrator,CN-Users,
adpsadmin
adpsadminl
C M-adpsadmin,OU-Gnoups,OU-i
3ohn.Nowak3
john.nowak3
CN-John.Nowak3,OU-Standard
Ln 1, Coll 
100% Windows (CRLF) UTF-8
Ln 1, Col 1
100% Windows (CRLF) UTF-16LE
Figure 5.33 : Exporting data to text and csv files

Bulk user creation and modification
As we learned how to export user data out of Active 
Directory, we can now go through the importing part. First, 
we need to get the right user data, so we can proceed with 
the creations. To create a user, we need to get at least 
proper information about the names. This CSV file could be 
prepared in Excel, Notepad or even PowerShell script that 
would generate the data. Figure 5.34 shows what the 
example import file would look like for some users:
- DCAZROOTOOI 
X +
<- -> C 0 b$t-0f8cfb68-589c-40db-a867-03c77da1ce13.ba$tion.azure.com/*/dient/R... fl 
d X :
~~j import.csv • Notepad 
—OX
File Edit Format View Help 
"Name’,■SaraAccountHarae","UserPrincipalHame","Path”
"adpsadmin2","adpsadmin2,’,"adpsadmin2@adpstest.net","OU-Delegation,OU-GlobalResources,DC-adpstest,DC-net" 
’*adpsadmin3","adpsadniin3 ’’,"adpsadmin3^adpstest.net","OU-Delegation,OU-GlobalResources,DC-adpstest,DC-net"
"adpsadmin4M,"adpsadi«in4,,,"adpsadmin4@adpstest.net","0U-Delegation,0U-GlobalResources,DC»adpstest,DC-net"
Ln Col! 
100% Windows (CRLF) UTF-8
Figure 5.34: Example import file for User Creation
We have information about the names and path where the 
users will be created. Now we need to import this 
information into PowerShell. As we used the CSV file for 
data, we can import it using the Import-Csv command:

$Users = 
$Users
Next, we need to go through every user in the array of 
objects:
$Users = import-csv c:\temp\import.csv
Foreach in
{
Write-Host "Importing User:
}
Then, this operation needs to perform user creation inside 
Active Directory:
$Users = import-csv c:\temp\import.csv
Foreach ($User in $Users)
{

Write-Host "Creating User: $($User.Name)" 
-Name $User.Name -SamAccountName 
$User.SamAccountName -UserPrincipalName
$USer.UserPrincipalName -DisplayName $User.Name -Path 
$User.Path
}
Refer to Figure
DC AIR OCT 001 
X +
0 A bst-0f8cfb68-58$c-40db-a867-03<77da1ce13.bastion^zure.com/*/dient/RENBWUPT1QwMDEA... O 
M =* J U X
IPS C:\Windows\system32> SUsers import-csv c:\temp\import.csv
PS C:\Windows\syste«32> Foreach (SUser in SUsers)
Write-Host "Creating User: S(SUser.Name)"
New-ADUser flame SUser.Name -SamAccountName SUser.SamAccountName -UserPrincipalName SUSer.UserPrincipalName -Displayh
-Path $User.Path
inse SUser .Name
» }
Creating 
Creating 
Creating
adpsadmin2 
adpsadmin3 
adpsadmin4 
C:\Windows\syste»32>
User:
User: 
User:
— Active Directory Users and Computers
File Action View Help
XlAffllO □ a □ Ml 1 % a Y a
3 Active Directory Users and Computers [DCAZRC a 
> 22 Saved Queries
v adpstest.net
> 22 Buihin
> 22 Computers
> jfi Domain Controllers
> 22 ForeignSecurityPrincipals
v jfl GiooaiKesources
- Delegation 
jU Groups
> j*j Servtc eAccounts
> 22 Keys
> LostAndFound
Name
?».admadpowefshell 
adpsadmin 
adpsadmin?
-adpsadmin 3
£»;adpsadmin4 
P L_Workrtotier»t 
UK. Work static ns
Type 
User 
User 
User 
User 
User
Security Croup...
Security Group...
Descnpt»on
Built-in account for ad...
□ X
Figure 5.35: Bult AD user creation in PowerShell
After users are created, we can modify them using the 
PowerShell script and input file. We can create a file that 

will correlate the name of the user and the property we 
would like to modify, as illustrated in Figure
__ DCAZROOT001 
X +
<- -> C a bst-0f8cfb68-589c-40d... O & ☆ 
# =5T □ X :
/] 'import.csv • Notepad 
— 
0 X
File Edit Format View Help
"Name"/'Description”
"adpsadmin2"/'Test 
user created and modified in PowerShell"
"adpsadmin3"/'Test 
user created and modified in PowerShell"
"adpsadmin4"/'Test 
user created and modified in PowerShell|"
Figure 5.36 : User modification file
And then we will execute the following PowerShell script to 
set the description field on each user automatically:
$Users = import-csv c:\temp\import.csv
Foreach in
{
Write-Host "Modifying User:
Get-ADUser -Identity | Set-ADUser -Description

}
Take a look at Figure
d DCAZROOT001 
X +
<- -> 0 
■ bst-0f8cfb68-589c-40db-a867-03c77da1ce13.bastior>.azure.com/*/dient/R... D 
□ X :
a Administrator. Windows PowerShell 
—OX
— Active Directory Users and Computers
File Action View Help
s e I a I □ a j
3 Active Dirt A 
> 2 Saved'1 
v S3 adpste
> Bui
> 23 Coi
> Doi 
> 21 For
v 33 Glc
ffl
Name
admadpo wershell 
adpsadmin
ft;adp$admm2 
adpsadmin}
ft;adp$admin4
4ft PL.Workstations
4ft UK.Workstations
type 
User 
User 
User 
User 
User
Security Group... 
Security Group...
Description
Built-in account for ad...
Test user created and m...
Test user created and m...
Test user created and m...
PS C:\Windows\system32> Foreach ($User in fusers) 
» <
» Write-Host "Modyfying User: $($User.Name)'
>> Get-ADUser -Identity 
» } 
Modyfying User: adpsadmin2 
Modyfying User: adpsadmin3 
Modyfying User: adpsadmin4 
PS C:\Windows\system32>
SUser.Name | Set-ADUser Description JUser.Description
Figure 5.37 : User modification script execution

Sign-in options and password management
In rare cases, we could limit the hours in which users can 
log in to the computers, for example, kiosk accounts inside 
offices that are open to visitors or shared workstations at 
manufacturing sites. There could also be legal 
requirements to limit user activities outside of business 
hours. Then, we can use the Logon Hours option.
We can specify logon hours for users by navigating to the 
Account tab of the user and choosing the Logon Hours 
option to select only specific logon hours, as shown in 
Figure 5.38 and Figure

C ® bst-4$4acd3c-c9e0-42*0-af9i'0ab66cc6c864.bastioixazure.com/<,/dient/RENBWUPT1. O 
1t =J Q 1 
•
Heb
OK
_ OCA2ROOTOO!
File Action View Help
* I £ BDI Jf O XaajtlOll J M'XTZ’M
2 Active Director) Usersand Computers [DC A2P0CT
Name
£♦. admadpo wershell 
&adpsadm«n 
adpsadmmj 
adpsadminj 
adp$admm-l
J&PL_ Wort stations 
!& UK.WorUt at»on$
Saved Queries
Jps adpstest.net
> 
, Bualtin
> 
. Computers
> d* Domain Control lets
> ForeignSecuntyPnncipals 
v al GJobalResources
- Delegation 
Groups
i] Secvic eAccounts
> □ K«y»
> L lostAndFound
> [ Managed Service Accounts
> J] Office
> l . Program Data
> jO Servers
> , System
> □ Users
> u_ NTDS Quotas
> L . TPM Devices
□ LHocfc accourt
Attoifft opbona
OE^0^ [Wednesday. Decerrber 7. 2022~
adpsadmm Properties
^pe 
User 
User 
User 
User 
User 
Security G 
Security G
□ User must change pawwvd at nert kjgori
□ Uaer cannct change paaaword
L_, Password never expres
O Store paaaword uang reventile encryption
Accosat espnee 
@ Never
Logon Hoira log On To„
Seoaty 
Enwonmeri 
Sesscm Remote cortral
Remcte Oe*top S*nne« PitHe COM* fatmu Edtor 
Pubhhed Cert/eates Member Of Password Repfccabon CXaio Object 
General Addeaa Accovrt 
ProNe 
Teiephonea Orgaruabon
liter logon name
!• •!1 '• ,.T~ 
| •edpateatnci
liter logon name fcre-Wndowt 2000}
ADPSTESTX
adpeadwi
Figure 5.38 : Logon hours modification for user

Figure 5.39: Logon hours modification for user
The same operation can be performed using the following 
PowerShell commands:
[byte[]] $logonhours = 
@(0,0,0,0,255,3,0,255,3,0,255,3,0,255,3,0,255,3,0,0,0)
Get-ADUser -Identity adpsadmin | Set-ADUser -Replace 
@{logonhours = $logonhours }

The option that is more commonly used is the Logon On To 
option in ADUC that modifies the logonworkstations 
attribute. This attribute can be defined to secure accounts 
to be logged in to interactively, only on a specific set of 
domain joined machines. It is mostly used for 
administrative or service accounts that are configured to 
be used only on specific set of servers.
This option will ensure that account cannot log in 
interactively on machines other than those specified in this 
parameter. On the Account tab, choose the Logon On To 
option and define the list of workstations and servers that 
the account will use to operate, as illustrated in Figure
_ DCAZROOTOOI 
X +
<- -> C fi bst-454acd3c-c9e0-42e0-af9a-0ab66cc6c864.bastionjzure.eom/#/dient/RENBWIJPT1... D O’ M -J □
3 Active Directory Users and Computers 
File Action V Logon Workstations
In Computer name, type the computer s NetBIOS or Doman Name
□ Active Oi'«to System (DNS) name
> Saved Que user can log on to 
v JpJ adpstestn
> Builtm
> 23 Compt
> 33 Domaii
> 23 Fotdgr
v x Gioball
Dd
> 23 Keys
>)» > 23 LostAn
> 23 Manag
> 33 Office
> 23 Prograi
> 33 Seven
> 23 System
> 23 Users
> 23 ntdsc
computers
(•) The fdowng computers 
Computer name
> TPM Devices
adpsadmm Properties 
? X
Seorty Envronment Sessions Remote control 
Remote Desktop Services Profile COM
*  Attrbute Edtor 
Typ« 
PutAshed CartAcates Member Of Password Repfccaton Dial<n Object
Ujer 
General Address Account Prcrfle Telephones Organization
U5ef 
User logon name
Ujer 
adpsadmr 
£adpstest net 
v
User 
U 
User logon name ipre -Wndows 2000)
SecuntyGt ^STESTX
Security Gi ^ogon Hours Log On Jo
□ Unlock account
Account options
□ User must change password at next logon 
A
El User cannot change password
□ Password never expres 
O Store password usng neverstole encryption 
v
Account expres 
(•'Never
Q find of: 
[Wednesday, December 7,2022 
Qw |

Figure 5.40: Log in to (logonworkstations) list modification 
for user
Make sure you always specify the source and destination 
machines in RDP connectivity and do not lock yourself out 
when securing it for the administrative accounts used by 
you to manage Active Directory.

Password management
As described in the previous chapters, domain users will 
always follow the password policy configured in the Default 
Domain Policy GPO unless they are assigned to the FGPP. 
After user creation, the FGPP needs to be assigned to 
follow those specific settings.
Despite following the password policy, Never can be set on 
users so that they will never be prompted to change the 
password. This option should not be used for standard and 
admin users. It is debatable whether it should be used for 
service accounts rather than FGPP with extended password 
validity period.
Using must change password at next will clear out the 
PasswordLastSet attribute and therefore, force the user to 
change their password before any interactive login can be 
performed. If a user forgets their password and there is no 
Self-Service Password Reset portal deployed, the password 
must be reset in ADUC. In such cases, right-click on user 
and choose the Reset Password option, and then set the 
new password, as illustrated in Figure 5.41 and Figure

OCAZROOTOOI 
X +
<- -> C i bst-454acd3c-c9e0-42e0-af9a-0ab66«6c864.bastiorxazure.com/*/dienVRENBWUPT1QwM... □ l£? ☆ h □
. Active Directory Users end Computers 
File Action View Help
a
**i
*jEi<raixa£i^iB03l
 i *.  x t 2 ■*
~ Active Directory Users end Computers [DCAZROOT 
> Saved Queries
v £ adpstest.net
> 
Buihm
> 
_ _ Computers
> 
id Domain Controllers
> 
uJ ForeignSecuntyPrmcipals
v i. GlobalResources
□j Delegation
al Groups 
SennceAccounts
> □ Keys
> uJ LostAndFound
> 21 Managed Service Accounts
> Office
> u"'l Program Data
> A~1 Servers
> Z - System
> 2 J Users
> 2~‘l NTDS Quotas
> TPM Devices
Name 
Type 
Description
admadpowershell 
User
j?.adpsa 
£.adpsa
Copy...
Add to a group...
Built«in account for ad...
Test user created and m.~
Test user created and m.„
Test user created and m.„
Resets the password for the current selection.
£«,adpsa 
Name Mappings...
P L_W< 
Disable Account
ReutPaswonL.
Move­
Open Home Page 
Send Mail
All Tasks
Cut
Delete
Rename
Properties
Help
•oup...
*oup...
Figure 5.41: Resetting the password for a user

_ DCAZROOTOOl
Passoverd
NewpMJword
Cortfnn password
?. »dmtdpc>*er$ht« 
8> adptadnwn
v *dp-.tr.t  nct
> ( Buiftm
> 22 Computers
> X Domain Controllers
> ' Foreign Security Principals
v al GlobalP.esources
Delegation
jj] Groups
a2 ServiceAccounts
> 22 Keys
» > 22 LostAndFound
> 22 Managed Service Accounts
> jO Office
> 22 Program Data
> X Severs
> 22 System
> 22 Users
> 22 NTOS Quotas
> 21 TPM Devices
Q User mu« change password at nerf togen
The uaerirusttogoff and then logon agan for the change to take effect
Acoocrt lockout Status on the Doman CortroMr iHockad
□ Uhfock the users acoxrt
Figure 5.42: Resetting the password for a user
If a user typed their password incorrectly and reached the 
lock account threshold, the account will be locked and can 
be unlocked by following the same process as for changing 
the password or by navigating to the Account Tab. The 
password reset operation can also be performed inside the 
following PowerShell script:
Get-ADUser -Identity adpsadmin | -Reset

You will be prompted for a new password and confirmation, 
as illustrated in Figure
Figure 5.43: Resetting the password for a user in
PowerShell

Conclusion
Management of users in Active Directory is one of most 
important topics to understand as a sysadmin. The most 
common issues that can be found in all types of 
organizations are that many administrators with access 
to manage users and accounts are created in various 
locations using different not globally defined processes.
The user leave process is important as well because 
many organizations struggle when employees leaving 
the organization still have accounts enabled and ready 
to be used even outside of company networks. This is 
potentially dangerous but can be easily remediated by 
disabling the accounts straightaway and making sure 
they are removed after a grace period.
Typically, users are not created in bulk during the hiring 
process but in migrations scenarios. When we do not 
use migration tools like ADMT or quest tools it could be 
beneficial to know automation scenarios. Knowledge 
about reporting capabilities of Active Directory is crucial 
when performing different type of housekeeping and 
security remediations. Sometimes even integration with 

different types of legacy applications require custom 
exports from Active Directory, which is not optimal, but 
in any case, it is useful to learn those skills.
In the next chapter, we will learn more about Active 
Directory group management. This will include the 
access management for users and reporting of user 
group membership. We will understand, in detail, how to 
housekeep user access and make sure privileged groups 
can be managed only by a limited number of 
administrators. Keeping group management under 
proper controls is highly beneficial for migration 
scenarios, as it could be problematic otherwise.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

C 
HAPTER
6
Active Directory Group Management

Introduction
Active Directory is not only providing the database of 
the users who can log in to the various domain joined 
resources but also providing the authorization 
capabilities delivered by membership of Active Directory 
groups.
Applications integrated with Active Directory can utilize 
membership of specific groups to provide access to 
applications that are integrated with Active Directory for 
authentication. We can define the level of access to 
resources based on the group membership. In other 
cases, it can be done based on one of the users 
attributes, for example, provision all Active Directory 
users with attribute employeeType value internal into 
AD integrated application. Therefore, only internal users 
will be able to login to that specific app.
On the other hand, we can achieve the same thing when 
creating AD group called Internall_Employee. Through 
integration with the HR application, we can list group 
memberships and provision users who are members of 
this group to the onboarded application. Just one point

Provisioning the app could be done based on specific OU 
attributes, but access should be granted based on group 
membership. In bigger organizations, delegation to user 
management can be distributed, so we do not really 
want to grant access to applications using attributes as 
it could be exposed.
Once we have a specific group and populated members 
that can be used for application access, it will be 
important to perform right delegation, meaning if we 
need to allow the manager of an application to manage 
membership. When the application is sensitive, we 
should not delegate to standard users in AD but to 
administrators. Delegation for group can be archived by 
DACLs and the manager attribute that is allowed to 
modify the membership option.
In this chapter, we will try understanding how we 
manage groups in Active Directory. We will explain the 
different types of groups used, establish delegation, and 
describe the most sensitive groups in Active Directory 
for which membership needs to be actively managed 
and monitored.

Structure
This chapter will cover the following topics:
Active Directory group types description
AD groups creation, deletion
AD groups membership modifications
Nesting
Sensitive groups
Bulk operations on AD groups
Group membership reporting

Objectives
This chapter is dedicated to a comprehensive 
exploration of Active Directory group management, 
providing in-depth insights into various facets. It 
initiates with a detailed description of Active Directory 
group types, elucidating their unique characteristics. 
Readers will gain practical knowledge in creating, 
deleting, and modifying memberships of AD groups, 
with a specific focus on nesting and handling sensitive 
groups. The chapter further delves into efficient bulk 
operations on AD groups, ensuring streamlined 
administrative processes. Additionally, it guides users in 
generating insightful group membership reports, 
fostering a well-rounded understanding of group 
dynamics within Active Directory environments.

Active directory group types
Overall, Active Directory groups can be divided into two 
major types: Security and The difference between the 
two types is that the Security group has the security 
context that is defined by the Security Identifier which 
uniquely identifies the group object and assigns 
permissions to resources it is referenced using the SID.
Distribution groups do not have security context and 
cannot be used for assigning permissions (in file 
systems, active directory objects, network share, and 
access to servers). They still get the SID assigned to 
them, and this SID can be present in resource access 
lists or domain access lists. However, when a user 
performs a logon action, group membership is 
calculated. If a user is a member of a group that is a 
distribution list or was a security group and then got 
converted to a distribution list, it will not contain that 
group SID in their security token. Even if permissions 
were assigned to that group in the past, users will not 
be granted those permissions.

One more important category that we can classify a 
specific group in is the group scope. Group scope is 
important to understand as it provides specific 
capabilities and needs to be chosen for every type of 
group; it defines where a specific group can be used and 
from which domains members of this group can be 
added.
The following Table 6.1 explains how different group 
scopes can be used in Active Directory:
Directory: Directory: Directory: Directory:
Directory: Directory: Directory: Directory: Directory:
Directory: Directory: Directory:
Directory: Directory: Directory: Directory: Directory:
Directory:
Directory: Directory:
Directory: Directory: Directory: Directory:

Table 6.1: Different group scopes used in Active 
Directory
Now that we know the different group scopes, we can 
decide which one we need when trying to secure access 
to specific applications. As Microsoft exchange depends 
heavily on the Global Catalog some of the email enabled 
groups must be universal. Universal group membership 
is stored inside GC and distributed to every GC server 
inside a Membership of other group scope groups is not 
replicated to GC and is hosted only inside specific 
domain controllers from the domain.
It is good to know that after a group is created, we can 
change the group type, but it is not always possible to 
directly change the type and then require multiple 
conversion operations to be performed. As global groups 
nesting allows only global groups as members, 
members need to be converted before we can convert 
parent group to a specific type.
Typically, we leave the groups in the default global 
scope until we have a valid reason to modify it to 
universal because users are from different AD domains. 
If we have a scenario to assign a group member from a 

different forest, we will need to change the scope of the 
group to domain local.

AD groups creation and deletion
Let us look at the group creation process. First, we need to 
see what the Active Directory group is to be created for, 
for example whether it is to provide access to file sharing 
in local data center. If it is a globally delivered file service, 
we could create a global organizational unit to secure 
access management to only the central Active Directory 
support team.
To create this group, we need to open the dsa.msc console 
and navigate to the desired OU; then, we must right-click 
and choose new group from the menu. Next, we will type 
the group name and security group with the scope global, 
as illustrated in Figure 6.1 and Figure and create the group:

□ X
DCAZROOTOC1
X
-> C A bst-e67c721d-3d9d-445c-9dbb-0e00b06f97a2.bastion.azure.com/#/dient/REN... D ☆ 
& -J □ (J ;
— Active Directory Users and Computers 
—OX
File Action View Help 
**laralo Qaj Bnl
22 Active Directory Users and Computers (DCAZROOT 
> u . Saved Queries
v adpstest.net
> 
23 Builtin
> 
23 Computers
> 
33 Domain Controllers
> 
£_ ForeignSecuntyPrincipals
v GlobalResources
a*  Delegation
■ 
L Groups
> 
32 ServiceAccounts
> 3 Keys
V > 23 LostAndFound
> 
2' Managed Service Accounts
> 
33 (Wee
> 
23 Program Data
> 
33 Servers
> 
23 System
> 
23 Users
> 
23 NTDS Quotas
> 
23 TPM Devices
Name 
Type 
Descnption
There are no items to show in this view.
Create a new object...
Figure 6.1: Group creation in Active Directory

Figure 6.2: Group creation in Active Directory
The same operation can be performed using the following 
PowerShell command with making sure group is created in 
the same partition that the domain our client is in. We can 
also specify that the server parameter to point to specific 
domain as in the following command:
-Name "NetworkShare_Access_RW" -SamAccountName 
"NetworkShare_Access_RW" -GroupCategory Security - 
GroupScope Global -DisplayName 
"NetworkShare_Access_RW" -Path

"OU=Groups,OU=GlobalResources,DC=adpstest,DC=net" - 
server adpstest.net
So, we created the group in a specific OU, and because this 
group has permissions inheritance enabled by default, all 
permissions assigned to that OU will be applied to that 
group as well. So, it is important to create groups in 
specific OUs and delegate membership modification 
permissions on the OU level to global or local support if 
needed. Groups applicable to local resources and 
applications should be created in OUs where the local 
support will have access. On the other hand, if we need to 
secure applications used company-wide, we should protect 
those resources with groups that only the global support or 
Security team will have access to.
Once the group is created, it is good to add the description 
to it providing information about the purpose of this group 
and the resources it is granting access to. One of the 
biggest problems of organizations with no proper control of 
creating security and distribution groups is when there is 
no information about what it is used for and who is the 
owner of a specific group. When you grant access to a 
specific resource using AD group, information about where 
this group is used is only stored on the resource itself. 
Then, reporting on where a specific group is used is 
problematic. To modify the group description, we need to 
navigate to the group, choose the Properties option, and

populate the description field, as illustrated in Figure 6.3
and Figure
OCAlBOOtOOl 
X +
Add to a group...
Send Mail
<- -> C ■ bst-e67c721d-3cl9d-445c-9dbb-0e00b06f97a2.bistion.azure.com. 0 If? ☆ 
> 
:
J Active Directory Users and Computers 
—OX
File Action View Help
0 X • Li • 
__
22 Active Directory Users and Computers JDCA2RC 
> C3 Saved Queries 
v jFj •dp'Sl«t»e< 
> Z3 Builtm 
> O Computers 
> 3^ Domain Controllers 
> c'L ForeignSecurityPrincipals 
v X1 GlobalResourcft 
X Delegation 
al Groups
> X ServiccAc counts
> Z3 Keys 
> f’ LestAndFound 
> u . Managed Service Account} 
> jj Office 
> . Program Data 
> 3 ^erveri 
> 1 System 
> n Usen 
} L. NmS Quotes 
-- TOM
< >
Opens the properties dialog box for the current selection.
Move...
Figure 6.3 : Group description modification

□
X
KAZROOTOOI
<- -> C ■ bst-e67c721d-3d9d-445c-9dbb-0e0Cib06f97a2.bastion.azure.com.. B 
> FJ □ Q ;
>>
> Saved Quenes 
v JpJ adpstest.net
> l3 Buiftin
" Computer^
X Domain' Controllers
l Fofcig^SccurrtyPrincipjlj
- GlobalRwoureet
X Delega^on 
Groups 
> X $eiviceA^counts
Keys
Jj Ig-rtAndFcund
Managed Service Accounts
X Office
X Program
X Server!
System 
Users 
Jj NTDS Quotes
NttwwtShere.AccessJlW Properties 
? X
Otject 
Searty 
A^rfcute Edttx
Members Member Of Maraged &y
NHw
*kSh«_fee«i_RW
Group name (pre-Wndo<n 2000) 
Nc»wc«k9»«Acceea RW
Descrotxtn ITh Groip provide acee» to ^hwe X¥Z ec ^ppkjt <n
EvnH 
| 
|
Group ™pe 
Grou>bC
*
Doman local 
($1 Securtv
iooa: 
O&Krbubon
Nolei
OK 
Oxd 
-4.:-,
Figure 6.4 : Group description modification
The same can be done using the PowerShell command 
specified as follows:
"NetworkShare_Access_RW" -Description "This Group 
provide access to Share XYZ on Application Server"
Alternatively, you can perform group creation with the 
description field straightaway: 
-Name "NetworkShare_Access_RW" -SamAccountName 
"NetworkShare_Access_RW" -GroupCategory Security -

GroupScope Global -DisplayName 
"NetworkShare_Access_RW" -Path 
"OU=Groups,OU=GlobalResources,DC=adpstest,DC=net" - 
Description "This Group provide access to Share XYZ on 
Application Server"
It is not always required but it is beneficial to specify the 
manager of the AD group. It is useful for most groups but is 
not an ideal solution as we are only able to specify one 
user of the group without any delegates. We are able to 
specify a group to be manager instead which increases the 
number of required group objects. To Add Manager to a 
specific group, navigate to the group, choose the 
Properties option, and use Managed By tab to specify the 
responsible user or group to become group manager, as 
illustrated in Figure 6.5 and Figure

DCAZROOTOQ1
X
□
ft bst-e67c721d-3d9d-445c-9dbb-0e00b06f97a2.bastion.azure.eom/#/di... O \£ ☆
3 Active Directory Users and Computers 
File Action View Help
□ X
Opens the properties dialog box for the current selection.
2] Active Directory Users and Computers (DCAZRC 
> 23 Saved Queries 
v adpstest.net
> 23 Builtin
> 23 Computers
> S3 Domain Controllers
> 23 ForeignSecurityPrincipals
v S3 Globa (Resources
3' Delegation
3j Groups
> 3. Servic eAccounts
> 23 Keys
> 23 LostAndFound
> 2i Managed Service Accounts
> 33 Office
> 23 Program Data
> 33 Servers
> 23 System 
v
< >
Name 
Type
Add to a group...
Move...
Send Mail
All Tasks 
>
Cut 
Delete 
Rename
Properties
Help
Descnption
Figure 6.5 : Managed By setting configuration

_ DCAZROOTOOI 
x +
<- -> C * bst-e67c721d-3d9d-445c-9dbb-0e00b06f97a2.bastion.azure.eom/#/client/RENBWUPT1Q... 0
j Active Directory Users and Computers 
— OX
File Action View Help
* * I *,  E K 0 X J a Q T i US T 2 %
~ Active Directory Users and Computers [DCAZROOT 
> kJ Saved Queries
v adpstest.net
> 23 Buihin
> 23 Computers
> 33 Domain Controllers
> 23 ForeignSecuntyPnncipals
v 33 GlobalResources
33 Delegation
33 Groups
> 33 ServiceAccounts
> 23 Keys
> 23 LostAndFound
> 23 Managed Service Accounts
> 33 Office
> 23 Program Data
> 33 Servers
> 23 System
> 23 Users
> 23 NTDS Quotas
> 23 TPM Devices
Name
NetworkShare.Access.RW
NetworkShare.Access.RW Properties 
7 X
Object 
Secunty 
^ttrbute Edtor
General Members Member Of Managed By
Name 
' net /Global Reaocgces/Dc4egat»on/UK Workatabon>
I Change... | ftopaMea 0«r
[~1 MxrMger ear i<vbte (Twnh
*rWx>
 Wt
O*f.ce
Street
Gy.
State■provnee
Country/re^on
Telephone number
Fax number
OK 
Cancel
Figure 6.6 : Managed by setting configuration
The same operation can be performed using the following 
PowerShell command. We need to use Set-ADUser either 
cmdlet or command and the ManagedBy parameter as in 
following example:
"NetworkShare_Access_RW" -ManagedBy 
"UK_Workstations"
We could think that the group deletion will be a 
straightforward process, but it is not. We may face two 
issues when trying to delete a group. If the group still 

contains members, or it is a member of other groups, and 
if the group is still used to provide access to resources.
Before we proceed with group deletion, we need to make 
sure it is not used for any production workload. The first 
thing we will check is the membership of the group and if 
the group is a member of another group. If membership is 
not empty that is suggesting that we need to retain the 
group, but sometimes access is not professionally cleaned 
up. To verify the group membership and if the group is a 
member of other groups, we use the dsa.msc console, 
navigate to the specific group and check the members in 
the Member Of tab, as illustrated in Figure 6.7 and Figure
. _ OCAZROOTOOl
□ X
X
C i bst-e67c72ld-3d9d-445c-9dbb-0e00b06f97a2.bastion.azure.com/*/client/... D ☆
dive Directory Users and Computers
Adion View Help
O
* *le  idl * □ I * S £ IB a I % « a ▼ b
~ Active Diredory Users and Computers (DCAZROOT 
> £ . Saved Queries
v adpstest.net
> 
23 Builtin
> 
23 Computers
> 
33 Domain Controllers
> 
23 ForcignSccurityPrincipols
v 33 GlobalResources
3*j  Delegation
a'l Groups
> 33 ServiceAccounts
» > 23 Keys
> 
23 LostAndFound
> 
21 Managed Service Accounts
> 
33 Office
> 
23 Program Data
> 
33 Servers
> 23 System
> 
NTDS Quotes
> 
TPM Devices
Nome
% NetworkShs re_A«ess_RW
?
Object 
General
Setxrty 
fctnbute Edtor
l-'*"**^ 
Member Of 
Managed By
NetworkShire.Access.RW Properties
OK
Help

Figure 6.7: Verifying AD Group members
Figure 6.8: Verifying AD Group members
If membership in the group that was previously used for 
application access or resources changes, we should clean 
up this access and verify if there is no impact. If the group 
is now empty, we can safely remove it from Active 
Directory if it will not be required in the future.However, 
this will not cover cleaning up of the ACLs as those will 
become orphaned and the SID of this ACLs or DACLs will be 

unresolvable. An example of group deletion and 
unresolvable SID in permissions assignment is illustrated in 
Figure 6.9 and Figure
Add to a group...
Move,..
Send Mail
» >
Deletes the current selection.
v JrX adpttest.net
> 
. Bualtin
> 
2j Computers
> 
jL Domain Controllers
> 
i2. Foreign SecurityPrincipals
v ji. GlobalRescurccs
> 
3l Delegation
;. Groups
> 
A. SenictAc counts
."i Keys
, lostAndFound
. Managed Service Accounts
i Office
Program Data
i. 
Servers
j System
□ UMrt
, NTDS Quotas
' TPM Devices
NetworkShare_Acces$_RW
AllTaiks
Figure 6.9: Orphaned SID present on OU delegated 
permissions

Figure 6.10: Orphaned SID present on OU delegated 
permissions
That orphaned SID does not break the other permissions, 
but it is something that needs to be eventually cleaned up 
to keep the delegation organized.
Group deletion can be performed using the PowerShell 
command as well:
"Test_Orphaned_Sid"

AD group membership modifications
As groups in Active Directory are used for granting access 
to applications or delegating permissions to the systems, it 
is achieved by adding users or other groups to group 
membership. There are many ways to grant membership: 
one is from group perspective in the dsa.msc console. 
Navigate to the group inside a specific OU or find it in the 
console, choose and then navigate to the Members tab and 
start adding members by picking up one or more objects, 
as illustrated in Figure 6.11 and Figure

Figure 6.11: Adding membership to Active Directory group

Figure 6.12: Adding membership to Active Directory group
As can be seen in the previous figure, the only domain that 
can be used is no other domains are available because the 
group scope is global, and it does not allow members from 
domains other than the one the group is created in. We 
can change the type of this group to Universal and see if 
we can then add members from other domains. Let us 
modify the group type and see if we can add members 
from other domains, as illustrated in Figure 6.13 and Figure

_ CCA2RCOT001
X
£- 
0 A bst-9cd3ad57-f$42-4783-88b2-l8bed4f93l 15.bastk>n^zurexom/
**/clier»t/R£...
 □ [& ft
3
File Action View Help
N«twric$iwe_Acce$$_Rrf Properties
X
— Active Directory Users and Computers (DC AZROO 
> . Saved Queries 
v*  afe adpstest.net
> 
Builtifi
> 
Zj Computers
> 
@0 Domain Controllers
> 
. Foreign Security Principals
v GtobaiResources
> Xj Delegation
Xl Groups
> a Servic eAccounts
.T'i Keys
Zj LostAndFound
, Managed Service Accounts
si Offin
ZJ Program Data
>> >
_j System
□ Us
**
 
. Z NTDSQuctas 
□ TPM Device?
Oa.f'Gt
General
Staxty 
cttnbute Edtor
Menfeert Men
*#
 Of
^2^ N**
«sSlwe_AM«4_RW
Managed Bf
froi.fi name (pne-Wndowt 2000) 
| Network Share—Aee
*ss
mRW
□ewnptkri
Emal;
Figure 6.13: Adding membership to Active Directory group 
from another domain

Figure 6.14: Adding membership to Active Directory group 
from another domain
As shown in Figure 6.13 and Figure we can add members 
from other domains in the forest now. The same will be 
available for domain local groups; there, we would also be 
able to add members from trusted forests and domains.
Another way to add user membership will be to navigate to 
the user, group, or other type of allowed objects and then 
navigate to Member Of tab and choose the group to add 
membership, as shown in Figure 6.15 and Figure

Fir* Fcti Vit*
Saved
J 4^ivtOii
(fault loCilKH for star...
efault container fgr up— 
dault container for do...
efault container fur 5tC—
dauit container for ke...
dault container lor or...
daylt container for mi—
j:j idolt
.L Find
(Wipticm
fiw uwffl. ijirtoa
*.
 jr-a trtins
uiHm system seltmg i 
<1 ault container lor up... 
iwcti soeditjuons co...
Figure 6.15: Adding user object to group

3or-Jot*rc
Erte* S’* obect fwwm to B**ed fewarcfeik
BKMtf toaa]
Am*xw 
4fc
*rs
IfcffS <
IJiTi
*
ia'nrVH >W 
0xn
*rt
 .y-rirm 
Etonian Ltesra 
Erterp-^e AAnnt 
NdwoftShare A...
AciikC- Oiwlim Etocran Street Feeder
rd. &jihn 
fdtMrwt.'Vm 
adpsteat rd/Users 
ad:-£e-£ rd/Useri
jrtvh
*!?
 U*?rt!toth
 da 
a4>:
*:aC.>xn.
Sflta
Fnxn Ihi locefcft.
Kjpiteat nd
ifolA container fee utf 
iftuR wmunir le# fc
Sei,
e^ault container fcr Ice— 
e^ault container lor or
RenKte Lteddop Semz« ruffe
ittKrmdWflW
Figure 6.16: Adding user object to group
So, it really depends on whether we want to add multiple 
groups to one user or many users to one group.
Like other operations, all this can be achieved using 
PowerShell, with
Add-ADGroupMember -Members adpsadmin
Removing members is a similar operation, except when we 
are on the Membership tab or the Member Of tab for users 
or groups; we just need to identify the object we would like 

to delete and apply the removal from the group, as 
illustrated in Figure 6.17 and Figure
Figure 6.17: Removal of members from group and user 
perspective

Figure 6.18: Removal of members from group and user 
perspective
Like other operations, all this can be achieved using
PowerShell, with
Remove-ADGroupMember "Backup Operators" -Members 
adpsadmin 
#Adding -Confirm:$false prevents Confirmation prompt 
and proceed without confirmation

But this time we will be asked to confirm the operation 
before the removal is processed, as shown in Figure
■I DCAZROOTOOI 
X +
<- -> 0 ft bst-9cd3ad57-f542-4783-88b2-18bed4f93115.bastio... D ☆ 
# =? □ ® :
S Administrator: Windows PowerShell 
— 
0 X
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows
PS C:\Windows\system32> Remove-AOGroupMember "Backup Operators" -Members adpsadmin
Confirm
Are you sure you want to perform this action?
Performing the operation "Set" on target "CN-Backup
Operators,CN-Builtin,DC-adpstest,DC-net”.
£Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "Y”): y 
S C:\Windows\system32> _
Figure 6.19: Removal of members using PowerShell

Nesting
Ideally, in Active Directory, accounts should be members of 
groups, and those groups should grant access to resources 
rather than direct access. Group name should indicate to 
which resource there are granting access. If one group is 
granting access to one resource in bigger organizations, it 
would mean there are hundreds or thousands of groups 
that the user would need to be added to directly.
Therefore, to avoid multiple group operations in scenarios 
we need to grant access to new member of the team we 
could utilize group nesting. We can organize all access 
required from user perspective in a single role. Of course, 
there needs to be some balance and we should not 
simplify access to one group, for example, but to create 
groups that would grant access to specific group of 
operations like: and Whenever Active Directory 
administrator joins the organization, we could add his 
account to all those delegation groups.
We should avoid delegating domain admin-level tasks and 
access to domain controllers to diverse groups and not 
domain admins, so this should only be level 2-type 
operations.

Figure 6.20 shows an example AD group nesting 
implementation for delegating access:
Figure 6.20: Example access delegation provided by 
security group nesting
First, we should not delegate user level permissions with 
administrative permissions. So even if we group 
permissions for specific access, we should never assign it 
to one account at the end. We can do more nesting and 
multiple access for standard operations but for

administrative tasks, it is better to avoid multi-level 
nesting and focus on granting access directly to resources 
with one level of access groups.
For domain admin-level access, it is better to not use 
nesting and assign users directly as it would simplify 
access reviews and avoid potential movement attacks if 
the nested groups are populated with too many users.
There are no limitations in the level of nesting that can be 
established, but we should avoid nesting more than 3-4 
levels of groups as it would be hard to track the 
membership other than always report the members 
recursively with PowerShell commands:
Get-ADGroupMember "GroupName" # This command will 
report direct membership
Get-ADGroupMember "GroupName" -Recursive #This 
command will report recursive members
Refer to Figure

Figure 6.21: Checking membership of nested groups

Sensitive groups
By default, in Active Directory, there are lists of 
sensitive groups that grant access to domain 
controllers, domains, and even domain joined servers 
and workstations. Members of sensitive groups should 
not be standard user accounts that are utilized for daily 
non-administrative work. Depending on how access 
management is set up in an organization, a number of 
objects that are members of sensitive groups should be 
limited to minimize surface and risk of the security 
attacks. There are four most sensitive groups in Active 
Directory that member of them will be able to manage 
entire domain, forest. If those group memberships are 
misused, we could put entire AD infrastructure under 
huge security risk.

Enterprise Admins
Enterprise Admins is the group that grants access to 
introduce forest-wide changes, like creating new 
domains and implementing trusts. Apart from forest­
wide permissions, it is a member of administrative 
group in every domain, so it is inheriting the same 
permission like Administrators in each AD domain. 
Domain admins from the root domain can manipulate 
Enterprise Admins permissions, so it is even 
recommended to leave this group empty and only add 
user into Enterprise Admins group if there are some 
changes that require EA-level permissions.
Compromising this group compromises the entire forest 
and puts even trusted domains at risk.

Domain Admins
Domain Admins is the group that grants access to 
introduce domain-wide full control access in a specific 
domain. Besides domain-wide permissions, it is a 
member of the administrative group in domain, so it 
inherits permissions to domain objects. Members of that 
group can log in to every Domain Controller inside the 
domain. It is also member of every local administrative 
group on domain joined machines by default.
Compromising this group compromises the domain, but 
effectively, if a user with DA permissions logs in to the 
DC, they can extract trust credentials using 
sophisticated hacking tools and compromise the entire 
forest. It is important that members of this group are 
effectively only global teams with access to all domains 
in the forest if possible.

Administrators
Administrators is the group that grants access to 
domain objects and allows to log in and administer 
domain controllers but not like Domain Admins it is not 
having any permissions to client workstations and 
servers. It is still having the permissions to modify the 
DA group membership so in terms of sensitivity it is 
almost equivalent to DA group.
Because by default is not allowed to logon any of the 
Client machines there is less surface for successful 
attack inside Active Directory however if breached it 
follows same lateral movement as Domain Admins. It is 
by default having default Administrator account as a 
member and this object cannot be removed from that 
group.

Schema admins
Schema admins group is the group that grants 
permissions to modify schema. Modification of the 
Active Directory schema is a risk, both from operational 
and security perspectives; this is because it can modify 
default permissions on specific user objects or attribute 
definitions. Unless there is a need to modify the schema 
for a specific Active Directory instance, this group 
should contain no members. This will prevent accidental 
changes during specific installation or upgrade of 
Microsoft products like Exchange and SharePoint.

Protected groups
There are many other groups that grant specific access to 
domain controllers and Active Directory domains 
themselves. Those all are protected by the SDProp process 
that overwrites any manually assigned permissions or 
inheritance from organizational units that protected groups 
or members of protected groups will be residing in. This 
will ensure that moves an object to a specific OU, they will 
not cause delegation to high privileged objects inside 
Active Directory.
Every hour SDProp process with copy permissions from 
AdminSDHolder object and apply to those permissions on 
protected groups and members of protected groups. A list 
of those specific groups is provided in Table

Table 6.2: Protected groups overall description
As we can see, there are quite a few protected groups that 
need to be closely monitored, and only justified 
memberships should be allowed. Compromising an 
account that is member of any of those groups, will 
potentially escalate to domain/enterprise admin level 
permissions. The location of the AdminSDHolder object is 
illustrated in Figure

Figure 6.22: AdminSDHolder object location and 
permissions
We can notice that only the highest privileged groups can 
modify this object in Active Directory, and the same 
permissions are replicated for protection of all Protected 
Groups inside AD Domain.

Bulk operations on AD groups
In some cases, it is required to add multiple accounts 
into one AD group or copy membership from one 
account to another to replicate the user permissions. 
Doing it one by one can be problematic, so it is better to 
perform this operation with the help of PowerShell 
scripts because the same permissions are replicated to 
secure all protected groups inside AD Domain.

Add/remove multiple users to the AD group
This is the most common use case. In migration or 
onboarding scenarios typically, there is a need to add 
multiple users into a specific group. To accomplish this, 
we need to have the user list in a specific format. 
Normally, users are provided with name or
We can create the text or csv file with usernames as the 
content, import the users, and try to find them inside 
the Global Catalog as sometimes users could be 
provided from different domains. Then, we can include 
those users into the AD group specified as in following 
PowerShell commands:
# Create list of users as CSV file with first line header 
"name"
# Name
# UserTest1
# UserTest2

# UserTest3
$Users = import-csv c:\temp\import.csv
Foreach ($User in $Users)
{
# Quering global catalog
# As some users could be provided from different
# domain inside of the forest
$User = -server
#
# Pointing to standard port as global catalog is read 
only
# Neet to point to domain that the group is placed in

# As some users could be provided from different
# domain inside of the forest
Add-ADGroupMember -Identity "PL_Workstations" - 
Members $User -server
# Similar for removal
Remove-ADGroupMember -Identity "PL_Workstations" - 
Members $User -server
}

Add/remove user to/from multiple AD groups
When we need to add a user to multiple AD groups, we 
must import the group list from the text file and then 
add users to multiple groups by executing the following 
script:
# Create list of groups as CSV file with first line header 
"name" and "DistinguishedName" save as 
importGroups.csv without # characters
# "Name","DistinguishedName"
# "Schema Admins", "CN=Schema
Admins,CN = Users,DC=adpstest,DC=net"
# "Domain Admins", "CN = Domain
Admins,CN = Users,DC=adpstest,DC=net"
$Groups = import-csv c:\temp\importGroups.csv
Foreach ($Group in $Groups)

{
# Quering global catalog
# as some groups could be provided from different
# domain inside of the forest
$Group = -server
#
# Pointing to standard port as global catalog is read 
only
# Neet to point to domain that the user is placed in
Add-ADPrincipalGroupMembership -Identity -MemberOf
$Group.DistinguishedNAme -Confirm:$false -server
# Similar for removal

Remove-ADPrincipalGroupMembership -Identity - 
MemberOf $Group.DistinguishedNAme -Confirm:$false - 
server
}

Copy membership between user accounts
To copy the group membership from one user account to 
another, we need to report the group membership of the 
source account and then apply the membership to the 
destination account. We can accomplish this by executing 
the following PowerShell script:
$UserToBeAdded = adpsadmin2 -pr memberof
$UserToCopy = -pr memberof
| -Members $UserToBeAdded
Results are illustrated on Figure

Figure 6.23: Copying membership between two user 
accounts

Clear membership
Cleaning the user membership can be done by executing 
the following PowerShell script:
$User = adpsadmin2 -pr memberof
| Remove-ADGroupMember -Members $User
As illustrated in Figure a user must be a member of at least 
one group as ‘primary group’:

Figure 6.24: Clearing the group membership for user 
account

Group membership reporting.
Reporting group membership is important from the 
auditing perspective. In big environments, AD 
administrators maintain multiple domains and a high 
number of administrative accounts. It is important to 
report membership of key and the most sensitive AD 
groups, and customers could request to provide 
membership of other groups on demand.
By using PowerShell, we can easily automate generating 
the reports of group membership and make sure they 
can be reviewed periodically.

Extract members for static list or groups
First, we import the list of groups from a .txt or .csv file, 
and then we process every group name and try to create a 
list of members for every group. Then we can add it to the 
global list of members and export the data to a CSV file. 
List of the groups that we will generate example reporting 
is illustrated in Figure
Date modified
Type
Size
Name
Quick access
M~l Desktop 
4^ Downloads 
[t] Documents
Pictures
bin
Syst«m32
Temp
□3 This PC
Network
CSV File
CSV File
12/1/2022 10:47 PM
12/2/2022 10:18 PM
. import 
importG roups
importGroups - Notepad
File Edit Format View Help
"Name"
"PL_l4orkstations"
- □
X
A
"UK_Workstations"
"NestingLevel_l" 
”NestingLevel_2" 
“NestingLevel_3” 
"Domain Admins" 
"Enterprise Admins"
>
Ln 2, Col 6
100%
Windows (CRLF)
UTF-8
<
3 items 1 item selected 141 bytes

Figure 6.25: Preparing reporting for specific AD groups
Executing the following script will export the membership 
to the membersReport.csv file:
$Groups = import-csv c:\temp\importGroups.csv
$Members=@()
Foreach ($Group in $Groups)
{
# Quering non global catalog as not every membership is 
whitin global catalog
# Script would need to be executed for each domain in 
forest
= -server adpstest.net 
in $GroupMembers)

{
#Creating Result object and adding specific fields to the 
results.
$Result = -TypeName PSObject
$Result | Add-Member -NotePropertyName "GroupName" - 
NotePropertyValue $GroupObject.Name
$Result | Add-Member -NotePropertyName 
"GroupDistinguishedName" -NotePropertyValue 
$GroupObject.DistinguishedName
$Result | Add-Member -NotePropertyName "UserName" - 
NotePropertyValue $Member.Name
$Result | Add-Member -NotePropertyName 
"UserDistinguishedName" -NotePropertyValue 
$Member.DistinguishedName
$Members+= $Result
}

}
#In big environments showing the results is slowing the 
script execution
write-output $Members
#Append can be used when exporting data to same file 
from multiple executions
$Members | Export-CSV -Path
C:\temp\exportMembership.csv #-Append
You can work with the file afterwards with any file editor, 
i.e. Notepad or Excel are illustrated in the Figure 6.26 and 
Figure

Figure 6.26: Exporting list of AD groups membership

A
6
C
GroupName
GroupDistinguishedName
User Name
UserDistinguishedName
2 iNestingievel 2
"IcN-Nestmgievel 2,OU>6ro<jps.OU
*GlobalResources,DC
*adpjte$t.DC
*net
Nestingievel 1
CN>Nestingievel l,OU»Groups,OU
3
NestirgLevel_3
CN=NestingLevel_3,OU=Gro<jps,OU=GlobalResources,DC=adpstest,OC=net
John. Nowak 3
CN-John.Nowak3,OU=Standardui»
4
Nestinglevel_3
CN=N«stinglevel_3.OU ^Groups. OU =GlobalResour«s,OC=adpst»st.OC=n»t
Nestmglevel.2
CN’Nestmgievel_2,OU=Groups,OU
5
Domain Admins
CN » Dorna i n Adm i n s.C N «U ser $, DC=adpst est, DC«net
adpsadmin
C N*ad
 psad m i n, OU«De lega t ion, OU
6
Domain Admins
CN«Domain Admin$,CN«user$,DOadpste$t,DC
*net
addsadmm
CNMddsadmn.CN>u$ers.DC
*adp$i
7
Enterprise Admins
CN>Enterprise Admins, CNMJsers, DC "adpstest, DC »net
adpsadmin
CN»adpsadmin,OU"Delegation,OU'
&
9
10
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29 
30 
in
Figure 6.27: Exporting list of AD groups membership

Extract members of all protected groups in the domain
When we do not really know what we are looking for, we 
need to list all the groups in the domain; but in big 
environments, that will be hundreds or thousands of 
objects, so we can start reporting our most sensitive 
groups in the environment. To do this, first we need to 
query all group objects with the adminCount attribute 
equals 1, and then we can perform similar exports as with 
the script presented earlier:
$Groups = Get-ADGroup -filter 'adminCount -eq 1>
Foreach ($Group in $Groups)
{
# Quering non global catalog as not every membership is 
whitin global catalog
# Script would need to be executed for each domain in 
forest
$GroupMembers = $Group

in $GroupMembers)
{
#Creating Result object and adding specific fields to the 
results.
$Result = -TypeName PSObject
$Result | Add-Member -NotePropertyName "GroupName" - 
NotePropertyValue $Group.Name
$Result | Add-Member -NotePropertyName 
"GroupDistinguishedName" -NotePropertyValue 
$Group.DistinguishedName
$Result | Add-Member -NotePropertyName "UserName" - 
NotePropertyValue $Member.Name
$Result | Add-Member -NotePropertyName 
"UserDistinguishedName" -NotePropertyValue 
$Member.DistinguishedName
$Members+= $Result

}
}
#In big environments showing the results is slowing the 
script execution
write-output $Members
#Append can be used when exporting data to same file 
from multiple executions
$Members | Export-CSV -Path 
C:\temp\exportMembership.csv #-Append
The results of the script show not only the default 
protected groups but also other groups that are nested to 
the default ones. It is because any member of the 
protected group will automatically get adminCount 
attribute value equals 1 and started to be protected by the 
AdminSDHolder object permissions, as illustrated in Figure 
6.28 and Figure

w OCA2ROOTOC1 
X +
<- -> C 8 bst-1e76e8S2-fecc-4470-b5fe-7bb74cc895b8.bastion.azure.eom/#/client/RENBWUPT... £)(<?☆ 
;
S Windows PowerShell ISE 
—OX
file Edit View Tools Debug Add-ons Help
U kJ D X -OC
*
ffi rs
ExportGroupMembefship.ps! | ExportProtectedGroupsMembership.psI X 
SGroups - Get-ADGRoup -filter 'adminCount -eq 1’ 
Foreach (SGroup in SGroups)
S{
> ®
2
3
S 
6 
7 
8 
9 
10 
11 
12 
13 
14
s
8 Quering non global catalog as not every membership is whitin global catalog
8 Script would need to be executed for each domain in forest
SGroupMembers = Get-ADGroupMeraber SGroup 
for each (SMember i|i SGroupMembers)
Creating 
SResult - 
SResult | 
SResult I 
SResult I 
SResult |
Result object and adding specific fields to the results. 
New-Object “ 
Add-Member 
Add-Member 
Add-Member 
Add-Member
-TypeName PSObject
-NotePropertyName "GroupName" -NotePropertyValue SGroup.Name
-NotePropertyName "GroupDistinguishedName" -NotePropertyValue SGroup. Di stinguishedName
-NotePropertyName "UserName" -NotePropertyValue SMember.Name
-NotePropertyName ,,User(>istinguishedName,' -NotePropertyValue SMember. Di stinguishedName
ishedN 
arae
NestingLevel_2 
NestingLevel_3 
NestingLevel_3 
Domain Admins 
Domain Admins 
Enterprise Admins 
Administrators 
Administrators 
Administrators 
Administrators 
Domain Controllers 
Enterprise Admins 
Domain Admins 
Domain Admins
CN-Nest i ngLevel_2 ,OU-Groups.OU-GlobalResources,DC -adpstest ,DC-net 
CN=NestingLevel_3,OU=Groups,OU-G1obalResources,DC=adpstest,DC-net 
CN-Nesti ngLevel_3,OU-Groups,OU-GlobalResources,DC-adpstest,DC-net 
CN=Domain Admins,CN=Users,DC-adpstest,DC-net 
CN-Domain Admins.CN-Users,DC-adpstest,DC-net 
CN-Enterprise Admins,CN-Users,DC-adpstest,DC-net 
CN-Administrators,CN-BuiIt in,DC-adpstest,DC-net 
CN-Administrators,CN-BuiIt in,DC-adpstest,DC-net 
CN-Administrators.CN-BuiItin,DC-adpstest,DC-net 
CN-Administrators,CN-BuiItin,DC-adpstest,DC-net 
CN-Domai n Controllers ,CN-Users , DC-adpstest, DC -net 
CN-Enterprise Admins,CN-Users, DC-adpstest ,X-net 
CN-Domain Admins,CN-Users,DC-adpstest,DC-net 
CN-Domain Admins.CN-Users,DC-adpstest,DC-net
NestingLevel_l 
John.Nowak3 
NestingLevel_2 
adpsadmin 
addsadmin 
adpsadmin 
Domain Admins 
Enterprise Admins 
adpsadmin 
admadpowershel1 
DCAZPOOTOOl 
adpsadmin 
adpsadmin 
addsadmin
CN=
CN-.
CN-.
CN-.
CN-.
CN-.
CN-.
CN-.
CN-.
CN-.
CN-.
,\ adns*
Completed 
| Ln 7 Col 22 j Q 
100%
Figure 6.28: Exporting protected groups membership in AD

16
17
>
A
6
C
D
IcroupDittinguishedName
userName
wserOi Jti ngu । sr
*o
 Name
2
Nestinfievei_2
CN=Ne$tin<Levei_2.OU=Groups. OU=CloOa I Resources. DC=adpstest. DC=net
N«stinguvei_l
CNsNestinfievel_bOU»Gfoups.OU»GlobaiRe$ources.DCMdpstest.DC=net
3
NestingLevel_3
CN=Nest ingLerel_3,OU=Groups, OU=<
*loba
 1 Resources, DC=adpstest. DC=n et
John. Nowak)
CN=Jotin.Nowak3,OU=$tandardUsers,OU=9t,OU=Office,DC=adpstest.DC=net
4
Nestlnglevel_3
CN=KlestlngLevel 3,OU=Grc»ups,0<J:GlobalResources,OC=adpstect.DC=net
Ne$tlngtevel_2
CNzNestingleve l_2.0U=Group$,OU=GlobalResources, DC=adpstest, DC=not
5
Dem
*in
 Admins
CM-Oorrm n Admmj.C N -Vser
*,DC>«dpiten
<DC>net
•dp J admin
CN-
*-dp»admin,Ol?-O
*
 l«g
*tion,OU-Clob
*ln«aourc«l,DC-
*dp>t«it.DC~n
*t
6
Domain Admins
CN=Oomain Admins,CN=U5ers,DC=aap5test,C>C=net
addsadmm
CN=addsadmin,CN=users,DC=adp5te$t,D€«net
1
Enterprise Admins CN=€nterprtse Admms.CNsUsers. DC=adpstest. OC=net
adpsadmin
CN=adpsadmin.OU=Oeiegation.cxj=GlobalResource5.DC=adp5te5t,DC=net
£
Administrators
CN=Administrator$,CN=Builtin.DC±adp5test,DC=net
Domain Admins
CN =Oomam Admins,CN=U$ers,OC=adpste$t,DC=net
9
Administrators
CN=Adminlstrators,CN=8uihln,DC=adpstest.DC=net
Enterprise Admins CN=fnterpri$e Admins,CN=Users,DC=adpstest,DC=net
10 Administrators
CN=Administrators,CN=Buiftin,DC=adpst«sLDC=net
adps admin
CN=adpsadmin,OU=Delogation.ou=<3lobalResources.DC=adpstttst.DC=net
11 Administrators
CN=AdmirMsirator$,CN=8uinin,oc=adpstest,DC=net
admadpo-.vershei I CN=admadpowersheli,OU=Oeiegation,ou=Giot>alResources,DC=adp5te$t.DC=net
12 Domain ControllersCN=Oomain Controllers.CN
*users.OC=adp5te$t.DC=ret
DCA2ROOTOO!
CN»OCA2ROOTOOLOUxOomain Centre Ilers.DC =adp$?e$t.DCxnet
13 Enterprise Adm ms CN=Enterpri$eAdmins,CN=Usef3,DC=
*dpste$t,DC=net
adps ad mm
CS=adpsadmin,OU=Delegat‘on,OU=GlobalResources,DC=adpstest,DC=net
14 Domain Admins
CN=Domain Admins,CN=Users.DCMdpstest.DC=net
adpsadmin
CN=adpMdmin,OU=Delegation,OU=GlobalResources,DC=adpstest,DC=net
15 Domain Admins
CN=Oomain Admins,CN=vsors,[>C=adp$tost.DC=not
addsadmm
CN=addsadmin,CN=users.DC=adpst«sLDC=net
18
19
20 
’1
24
25
26
28
29
30
31
32
33 
34
36
Figure 6.29: Exporting protected groups membership in AD

Extract members of protected groups in forest
Ideally, we would like to perform this kind of reporting 
for all domains in the forest. Only universal groups 
membership is replicated to the global catalog, so we 
need to list the domains in the forest first and then try 
to query them all automatically. We can use the Get- 
ADForest and Get-ADDomain commands, which provide 
all the necessary details:
#Get Forest Information
$Forest = Get-ADForest
#Perform operations for all domains
Foreach ($Domain in
{
$Groups = Get-ADGroup -filter 'adminCount -eq 1' - 
server $Domain

Foreach ($Group in $Groups)
{
# Quering non global catalog as not every membership 
is whitin global catalog
# Script would need to be executed for each domain in 
forest
$GroupMembers = $Group -Server $Domain
in $GroupMembers)
{
#Creating Result object and adding specific fields to the 
results.
$Result = -TypeName PSObject
$Result | Add-Member -NotePropertyName 
"GroupName" -NotePropertyValue $Group.Name

$Result | Add-Member -NotePropertyName 
"GroupDistinguishedName" -NotePropertyValue
$Group.DistinguishedName
$Result | Add-Member -NotePropertyName "UserName" -
NotePropertyValue $Member.Name
$Result | Add-Member -NotePropertyName 
"UserDistinguishedName" -NotePropertyValue 
$Member.DistinguishedName
$Members+= $Result
}
}
}
#In big environments showing the results is slowing the 
script execution 
write-output $Members

#Append can be used when exporting data to same file 
from multiple executions
$Members | Export-CSV -Path
C:\temp\exportMembership.csv #-Append

Conclusion
Management of groups inside AD is even more 
challenging than managing users. This is because there 
is a major problem with defining ownership and who is 
responsible for specific objects. In case of users typically 
there is an HR system inside the organization, and users 
are created in specific OUs that reflect the organization 
structure with the information provided by HR.
For groups, there is a significant issue about who is 
responsible for managing the group and if there is a 
defined manager of the group, membership should be 
managed by the same account or by the IT Service 
Desk. Group name should indicate what resource this 
group is managing access to. We should utilize the 
group description of the group to store information 
about the group owners and purpose, will hugely benefit 
the access reporting and auditing.
Once management of the groups is under control, it is 
helping local and global teams with clear split 
responsibilities and decreasing the level of request 
management that is required to manage the

membership. Proper governance would help secure the 
environment as different teams will be responsible to 
manage separate set of AD groups.
Another problem that is significant are the sensitive 
groups, which provide critical access to Active Directory, 
and we must make sure they are treated in priority and 
that membership is limited to the responsible teams.
In the next chapter, we will learn more about how to 
secure Active Directory. It is not very different from 
privileged users and sensitive group management. At 
the end, AD is used to authenticate and authorize users 
for on-premise applications that can authenticate with 
AD or using the LDAP protocol. We will learn about AD 
security best practices, and we will understand how to 
make the environment secure and how to implement 
security hardening utilizing group policies.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors:

https://discord.bpbonline.com

C 
HAPTER 
7
Active Directory Security Management

Introduction
Securing the Active Directory is one of the key activities 
in organizations that utilize Windows client-server 
architectures. Despite companies moving to cloud­
based solutions, there are several scenarios wherein 
critical infrastructure depends on Active Directory 
service being up and running and protecting the 
identities of the users in the domain.
Cloud-based workload authorization could be shifted to 
the Azure AD, but password verification and 
synchronisation to Azure AD are still provided by Active 
Directory. In hybrid deployments, Azure AD sync objects 
are still managed from Active Directory, so abusing AD 
will affect the Azure AD in hybrid models.
Even though Active Directory is less used for web 
applications due to the modern authentication 
implementation, it could still provide integrated DNS 
services. Workstations and servers joined to domain 
would need those services to be running, as well 
Microsoft internal certificate services rely on Active 
Directory. Ransomware attacks on Active Directory can

effectively provide data exposure, including the DDOS 
for organizations.
Active Directory is distributed and used by various 
divisions across the company. It is important to control 
what the support teams can manage in AD, frequently 
audit the security settings, and implement the best 
recommendations to make the environment as secure 
as possible.

Structure
This chapter will cover the following topics:
Introduction to DSACLs and AD provider
Performing security audits using PowerShell
Group Policy Management and Security Hardening
AdminSDHolder and SDPROP
Managed Service Accounts and the Group Managed 
Service Accounts
Fine-Grained Password Policies (FGPP)
Patch management and update configuration
Kerberos delegation setup and auditing
Implementing Tiering model


Objectives
In this chapter, we will go through the most common 
scenarios to make the environment more secure, 
delegating management permissions, verifying the 
service state, and implementing the tiering model that 
Microsoft recommends.
After going through the chapter, we should be familiar 
with security implementations that could improve the 
overall posture of Active Directory, be able to perform 
the auditing over AD permissions using PowerShell, and 
use correct solutions and account types when 
automating processes that require administrative access 
to AD.

Introduction to DSACLs and AD provider
After all domains in the Active Directory Forest are created, 
we can consider this environment to be perfectly secure. 
There are no users or computer objects and no delegation, 
no one has access except the administrator or the process 
that performed the domain promotions.
More actors can access the environment when we create 
the first user groups and join machines to the newly 
created domain. More delegation is needed to perform the 
tasks required for the company to operate, and more 
devices must be managed using domain GPO’s 
administrative accounts.
When the AD environment ages, there are custom 
delegations, and different teams can perform a limited 
number of tasks in AD without full DA permissions. That is 
why it is important to understand how to check the 
permissions for AD and automate it using the command 
line and PowerShell.
First, we will try to use Active Directory users and 
computer console to verify the permissions and compare 
those permissions with the command line and PowerShell 

commands for comparison. Not every description inside 
the console is 1-1 matching what we receive using the 
alternative method.
In the previous chapter, we established the delegation for 
several OUs, and we can use them as examples of how to 
check the permissions using the following methods. Let us 
navigate to the OU for the permissions we want to check 
(with advanced features enabled in the dsa.msc console). 
Choose Properties and open Security and Advanced 
Security tabs, as illustrated in Figure 7.1 and Figure
_ DCAZROOTOO! 
X +
<- -> C i bst-8a221231-7e3f-4eab-8507-408c105714f1.bastion.azure.eom/#/elient/RENBW... C) l£? ☆ 
* ~□
* * 
. □ X Z o B 3 i 3)T 3%
, Active Directory Users and Computers
File Action View Help
£3 X
” Active Directory Users and Computers [DCAZRC a | Name 
> 23 Saved Queries 
v jpj adpstest.net
> 23 Builtin
> 23 Computers
> 33 Domain Controllei
> 23 ForeignSecurityPri 
v al GlobalResources
> 33 Delegation
33 Groups 
al ServkeAccoun
> 23 Keys
> 23 LostAndFound
> i Managed Service /
v 33 Office
Delegate Control...
Move...
Find...
Nev#
All Tasks
View
Cut
Delete 
Rename 
Refresh
Export List...
Type
Description
There are no items to show in this view.
> a. AdminUsei 
33 Groups 
3] Standard^ Help 
a Workstations
> 
33 uk
Program Data
a. Servers
. System
Properties
Opens the properties dialog box for the cunent selection.

Figure 7.1: Checking the permissions in Active Directory
_ OCAZROOTWI 
X +
-> C S b«^221Z3V7«3f^b-SW7-40®c105714(1 JjSS|ionLMUf«onV»/elienVR£^- □ ir > W □ X
n Active Directory Liters and Computers 
File Action View Help
* * I a js.l * n I x □ a
OK I Cancrf
Figure 7.2: Checking the permissions in Active Directory
The order of the ACLs in the window needs to be sorted.
Now, let us compare permissions from console, with what 
we get from the dsacls command:
dsacls
"OU=Workstations,OU=PL,OU=Office,DC=adpstest,DC=ne 
t"
~ Active Directory Users and Computers 
> ?_ Saved Qu«ies 
v adpste^.nct
> E3 Bwilbrt
> □ Compacts
> j£j Remain tontraltar.
> £3 Foreign^ecuntj-Principils
y a'j Gfcb«Hhdukh
> 32 tklc^Jticin 
si!  Groups 
32 SetviceAccounfls
*
» > □ Ktyi
> j LostAndFaundi
> l3 Managed Service Accounts
v aj Office 
y a PL
> 3.. AdminUsers
X Groups
StontfardUscfS
£ Wcckstaflicns
> aj w
Advanced Security Settings fc< Woikstafticns
Owner Domiin Admins (ADtiSTESTiOomtin Admtnj} Change
Permissions Auditing Effective Access
a Sorting the permission entries dees not change the order m which they are evaluated. 
Restore crderinq_
For additional information, double-click a permission entry. To modify a permission entry, select the entry and click Edit (if av
Permission entries:
Type 
Principal 
Access 
Inherited from 
Appbesto
£& Deny 
Everyone 
SpeOal 
Mpne 
This Object only
££ Allow Key Admins (ApPSTEgiftKey —______________________ DCsadprte^DCanec This object auid all deuce
Aliev. PL.WMratitisnf (AOPSTESTY.. Full cwitwl 
Hom 
DuctodHU Compute
&i Allow 
PL.WeflntatiOM (AM>5TE5T\~ Ci
*»tfdel«<
 Comput... Non
*
 
Hili otj«t
ti Allow 
Pre-Windows 2000 Compatib... Special 
DC=adpstest,DC=nct 
Descendant InetOrgPer;
Allow 
Pre-Windows 2000 Corfipatib... Special 
DC^adpstest.tK^riet 
Descendant Group obje
L> Alloc.__ Prc-LVindevisiKiCcmDatib... SotciiJ_______________ D.C ^dostcsLCJC:ml____DEiitndanLlfiELclittl
Rtstere
Add Rtwm
*  ] Mt
Disable inheritance.

The results are illustrated in Figure 7.3 and Figure
Figure 7.3: Checking the permissions in Active Directory 
using the dsacls command

M DCAZROOTQ01 
X -f*
<- -> O A bst-8a221231-7e3f-4eab-8507-408c105714f1.bastion.azu... □ |£ ☆ ft □ 1 
:
f Windows PowmSFitll 
—OX
LIST CONTENTS 
READ PROPERTY 
LIST OBJECT 
Inherited tn group
Allow NT AUTHORITY\ENTERPRISE DOMAIN CONTROLLERS
SPECIAL ACCESS for tokenGroups Clnherited from pare 
nt>
READ PROPERTY
Allow BUILTlNXPre-windows 2000 Compatible Access
SPECIAL ACCESS <Inherited from parent> 
READ PERMISSOfJS 
LIST contents 
READ PROPERTY
W 
LIST OBJECT
inherited to computer
Allow ADPSTEST\PL_Workstations 
FULL 
CONTROL for computer
Allow ADPSTEST\PL_Workstations 
FULL 
CONTROL
Allow CREATOR OWNER 
SPECIAL ACCESS for Validated write to computer attrib
utes. clnherited from parent>
WRITE SELF
Allow NT AUTHORITYVSELF 
SPECIAL ACCESS for Validated write to computer attrib
utes. Clnherited from parent)
WRITE SELF 
Allow NT AUTHORITY\ENTERPRISE DOMAIN CONTROLLERS
SPECIAL ACCESS for tokenGroups Clnherited from pare
Figure 7.4: Checking the permissions in Active Directory 
using the dsacls command
Results in dsacls are presented in sections. Permissions 
can affect the current object, all child objects, and child 
objects with specific object class. So, visually, it is hard to 
track group permissions for a specific security principle. 
Eventually, the permissions data can be exported to text 
file for future analysis using the output operator in the 
command-line console: 
dsacls
"OU=Workstations,OU=PL,OU=Office,DC=adpstest,DC=ne 

t" > c:\temp\permissionsReport.txt
The results are illustrated in Figure
Figure 7.5: Exporting DSACLS results to txt file
The output format is not ideal, and there are a few ways to 
optimize this using commands like find and findstr to 
extract specific parts of the data.
Another way to export permissions is by using the 
PowerShell Active Directory provider. When the Active 
Directory module is imported by default, there will be AD: 
PowerShell drive mapped to the current AD of the machine 

we are executing the command in. We can list the PSDrive 
using get-psdrive to confirm it, as illustrated in Figure
Figure 7.6: Listing the PSDrive for Active Directory provider
To list permissions for the specific organizational unit, we 
need to use the Get-ACL command. As the AD: drive is 
connected to the current domain by default, we execute it 
as follows:
"AD:OU=Workstations,OU=PL,OU=Office,DC=adpstest,DC 
=net" | fl

The results are displayed in Figure
V DGAZAOOT001
<- -> c • M-a
*22l231-7«3f-4Mb-8$07-408cl0S7l4fl,bMt>oaNur»<(>m/»/drt<yVRfNBWUf>TlQMMDfAY
M«uWZyto3N0?tRrtl«dA... O V$ ☆ 
* □ X :
0*«d<MilW5WI
 
-OX
C:\weri\M01-WBl
*-
 4»t Kl ~MT<XMBrtStMlMS>aWLAXMX<lCe>OCaMMt«St ,X><
*et'
 | fl
r*t*  : Microsoft. ACtiveOlrectary.MMM
***
,t.dll\Actl»eOir«tery:: Z/Booe©MfOu»nort'st
*tiae,s,Oi>-At
 ,0u«0f Oce,OC»Mpstest,t>C-net 
Owwr : «cnft$T\OcMin AMins 
: AOTVlUWOMl" AMins
in M/nC
*TTY\(NT(tMfM
 OOMAIM COarrKXim Allen 
m JuncuTVkAutfx^tuatM u«ft Allan 
mt m/tk>utt\ivstim Allow 
AMMtMXOoaein AMins Allan
•VXLTXMXACcevt Operators Allan 
miLTta\A«Ovrt Operator
*
 Allen 
■ALTtNWCMt Operators Allan 
■uiLTnw<enrit Operators Allan 
BuiiTtnWInf Operator
*
 Allan 
•CAl'B’ A.-Cr.vUU^l Allan 
*OT5ttiI\n_nar«iUtleri Allan 
AOrsilST\rs_nortst
*tlens
 Allan 
BUILT tn We-MlMOws !«
*•
 toopetisle Access Allan 
Built tn we-iri Mows MM (aapatiBle Access Allan 
BUI LUU Wemnaans MM <MP«tiP
*e
 Access Allan 
BUTitPiWe nirMjon-. ;* m 
Access a non
BLiLTtnwe-trinaows mm canpatltle *eeess  Allan 
BulLTtlWe-ninOows MM Conpetltle Access Allan 
BUXLT»We-Wln0On
*
 MM COM
*title
 Access Allan 
y, BUILT tn We windows MM (anpatitla Access Allan 
3M BUT LTtnWe -windons MM concat it la Access Allan
built tn we-windows mm cc-petit'.e Access Allan 
AOPSTiST\jcejr AMins Allow 
AorsstsninterMlw Key MW's Alton
<atATM CSM« Allan 
rt AmaimMu Alien 
art Aunca:rr\inTimitM oouim coKTtouuas Allen 
MT AUntfUTTMNTtanUM 0CKA1M CCWTMX.ltAS Allan 
MT ALnSCaiTVXlWTtlMIM 09U2M CONTAOLltaS Allan 
MT AUT»CaiTY\Ml» Allen
MM CMMUMa *«♦»»  Alien
•UXLTtNWe-WlAMnS MM CdapAtiMe Access Allan 
•ulLtEMWe-wlMaws MM ConMtltle Access Allen 
mt AvnceimMis Allen 
MT AUnCAITTAMlI Allen
Aor?mr\l<«tcf
*rls«
 Mains Allan
•unttMWe-wiAdons MM CanMtitle Access Allen
•c.'Ti TrkSAdnSntctrntor
*
 Allan 
Mit :
SMI : 0:DAt:tMO:AX(D; jOTW;;;K>)(a;;ic*pimc; ;;l»)(A;jiXATtOBC;;p«i)(A; ;CCOCiCSMWPTUXK»aCMM>;;;Sy)(a;;CCDCscsMWOnocRW«ciOMD;; 
;M)(Ml;CCDC;MMTeM-Me4 llM AMS MAAMSMTel; ;M)<Oa;KCOC;MM?«9C-Me4- 11M-am-fMAMiMMl; ;AO}(M; ;«DC;AAMCC14-1«J7-
Figure 7.7: Listing the PSDrive for Active Directory provider
As illustrated on Figure only the overview of the 
permissions is displayed. To get more details about specific 
objects, we will use the access property to display specific 
ACLs:
"AD:OU=Workstations,OU=PL,OU=Office,DC=adpstest,DC 
=net").access | fl

The results are displayed in Figure
-J DCAZROCT001 
x +
<- -> C • Ht.8
*221231-7<?f-4«
*b-8S07-408c105714f14>Mta>attur«xom/
*/cl
*nVRENBWUPT1QwMDEAYw5ijWZyb3N0?trust
*dA„.
 □ & ☆ 
> □ X :
E9 Window
*
 Powe«5he
*
 
“OX
Pt C:\weri\MpmMa> (4et-Kl ‘*0  <x-«xn?
*
’i«
*
$,cv^i ,cv-o<• ;.<».oc-edc^M’ cx-^rT‘).M<tM I fl
k<t 1 KCi rectorytlfhtt 
a>4«i XlanvCTyv
*
 
bojectTXpe 
s nfier it e*oe
 >ect Type 
reject
*let
*
 
kcetKOfttrplType 
KPentitytefereftce 
nunfteritefl 
knfterit»nct
*UC
*
 
Proper
*tlor
 fleft
kct i »<Oi rec torytlfht * 
KAfterltenceType 
DOJectType 
llrrerltf<100;ectr,p< 
objectFiact 
ncctMControlType 
SdertItyteferenc e 
Btlnfterited
3 Afterltenc eFlatt 
ftropefetlonFleft
kcUveOlrectorjtlfftU 
wterltonccType
arfteritedOOjectbpe 
bft)e<t'leti 
ku.nM.anirvlijipv 
pPentityitefereftce 
ntlnfteritefl 
k After it •oc««u<> 
Proper
*
 11 <*• f 1M1
kctueoirector^tlffttl 
lAfterltonceType 
ppjectType 
a After It edOt, )ec t Type 
pojectFlefi 
k«e»
*<OotrolType
 
KdcntltyWeference 
keinocritea 
{jAfteritooceFlett 
proper
*tiorFleft
kctircOirectorytltfttt 
SAfteritenceType
OnfteritedOPjectType
Figure 7.8: Listing the PSDrive for Active Directory Provider
Now we can either export all those ACLs to a CSV file using 
the Export-CSV command, or we can filter the results 
directly in PowerShell:
(Get-ACL | where -eq "ADPSTEST\PL_Workstations" }
#Filtered

(Get-ACL | Export-CSV C:\temp\permissionsReport.csv #All 
to CSV
The results of the preceding commands are illustrated in
Figure
Figure 7.9: Listing and exporting permissions for specific 
OU

Now we can open the CSV file and get all the data we 
need, and we can make sure there are no outstanding 
permissions attached to specific locations.

Performing security audits using PowerShell
As we learned to retrieve permissions for specific objects, 
how can we use them to perform audits in our Active 
Directory? First, we must specify which part of the Active 
Directory we want to audit. The most sensitive locations 
are domain DNS objects. Permissions set on the domain 
level are inherited for all the child containers and 
organizational units in the Active Directory by default. 
Inheritance is enabled when creating new organizational 
units and on the child containers. Second sensitive location 
is the AdminSDHolder object replicating permissions for 
other protected objects.
In our example, we will also list permissions for those two 
sensitive locations. OU paths will be specified inside our 
script. Then we need to query the Active Directory for the 
objects we would like to audit:
#Initializing Variables
$Objects = @();

$DomainDN = "DC=ADPSTEST,DC=NET" 
$ReportPath = "c:\temp\permissionsReport.csv"
#Specifying the Search base for our search
$SearchBase =
#Getting Domain Object for listing permissions,
$Objects += get-adobject $DomainDN
#Getting AdminSDHolder object for listing permissions,
$objects += get-adobject
#Getting all object from specific ad location
$Objects += get-adobject -filter * -SearchBase
$SearchBase -SearchScope Subtree
Hence, we can show the objects by showing the variable 
value, as illustrated in Figure

■ ocunoorwi 
x +
<- -> C ■ l»l-597029»
*-U5M3f1-8426-6d74Bda4718f.tMStionjzuf«xom/»/cl>enVRENBWUPT1Cb»MDEA._
 D tr * □ X :
f WHtSnS hx»n51>tll 
— OX
I
PS C:\Users\adpsmdmin> flnitlali=i"8 
Q
PS C:\U$tr$\adp$admin> (ACLS-$();
PS C:\Users\adpsadmin> (Objects - 0();
PS C:\Users\adpsadmin> (DomainON - "DC-ADPSTEST,DC-NET"
Di stinguishedName
Name
objectclass
Obj
a
«t
GUI 
0
DC-ADPSTEST,DC-NET
adpstest
domainDNS
bad
CN-Adm!nSDHolder,CN-System,DC-ADPSTEST,DC-NFT
AdminSOHolder container
£41
lou-Office,DC-adpstest,DC-net
Office
organ!zatIonalUnit <32
lou-UK t OU-Of f i c a , DC >adps t as t, DC - net
inc
nrgjni7at Inna1 Unit
lou-Workst at ions, OU-UK,OU-Of f ice, DC • adpst est, DC-net
Workstations
organ!zationalUnit bdf
lou-St andardUser s, OU-UK, OU-Of f ic e, DC • adps t es t, DC-net
Standardusers organ!zationalUnit 192
lou-Admi nUse rs, OU-UK, OU-Off i c e, DC - adps t e s t, DC - net
AdminUsers
organ!zationalUnit 9b2
|0U-Groupi,0U-UK,OU-Off ice,DC-adpstest,DC-net
Groups
organ1zationa1Unit 17b
Iou-pl,ou-off ice,oc-adpstest,DC-net
PL
organ!zationalunit 16a
lou-Workstat ions,OU-Pl ,OU-Off ice.DC-adpstest ,DC-net
workstations
organizatlonaiunit be 3
lou-Standardusers, OU-PL, OU-Off ice.DC-adpstest,DC-net
Standardusers organ!zationalUnit 988
CN-John.Nowak3,OU-Standardusers,OU-PL,OU-Office,DC-adpstest,DC-net John,Nowak 3
user
lc2
lou-Admi nllsers, OU-PL,OU-Off ice,DC-adpstest ,DC-net
AdminUsers
organ!zat ionalunit
199
|0U-Groups,0U-PL,OU-Off ice,DC-adpstest,DC-net
Groups
organlzationalUnit G?1
Figure 7.10: Querying all objects in scope for ACL 
permission review
Now for every object in the array, we will perform the 
permission check and add specific properties for the object 
so that it can be easily exported for the report using the 
foreach loop that allows us to use every object permission 
in the array of objects:
in $objects)
{

$DNName = $object.distinguishedName
$ACLS += (Get-ACL | Add-Member -NotePropertyName 
"ObjectDN" -NotePropertyValue $object.DistinguishedName 
-PassThru | Add-Member -NotePropertyName 
"ObjectClass" -NotePropertyValue $object.ObjectClass - 
PassThru
}
All results are inside the $ACLs array of objects, and we 
can export permissions easily to a CSV file:
| c:\temp\permissions.csv
The entire script will look as follows:
#Initializing Variables
$Objects = @();
$DomainDN = "DC=ADPSTEST,DC=NET"

$ReportPath = "c:\temp\permissionsReport.csv"
#Specifying the Search base for our search 
$SearchBase =
#Getting Domain Object for listing permissions,
$Objects += get-adobject $DomainDN
#Getting AdminSDHolder object for listing permissions,
$objects += get-adobject
#Getting all object from specific ad location
$Objects += get-adobject -filter * -SearchBase
$SearchBase -SearchScope Subtree 
in
{
$DNName =
+ = (Get-ACL | Add-Member - NotePropertyName 
"ObjectDN" -NotePropertyValue -PassThru | Add-Member - 
NotePropertyName "ObjectClass" -NotePropertyValue - 
PassThru
}

| c:\temp\permissions.csv
The results can now be opened as a spreadsheet where we 
can easily filter data according to our needs, as illustrated 
in Figure
Figure 7.11: ACL export inside of the CSV report file
Now, we have a massive list of permissions, but we do not 
know how to specify which ones are fine and which ones 
are not. Except for reporting purposes, we should not focus 
on the permissions that are inherited because they are 
eventually set up somewhere else inside the tree (except 
top of the search base we specified). Then we can filter the 
domain and enterprise admins and built-in administrator 
groups.

We should focus on Write and We could help ourselves with 
a clean development environment, see the permissions for 
AdminSDHolder and Domain DNS object, and compare 
default permissions with the current state. Everything 
could be reviewed and questioned, but sometimes those 
permissions could be necessary because of support 
delegation and permissions for application accounts.
After finding some unnecessary permissions, we could try 
to assess the removal. Still, this should be carefully 
evaluated and not implemented without backing up the 
original object’s permissions to ensure that we have easy 
rollback in case of an emergency.

Group policy management and security hardening
Group Policy Object is a collection of the policy settings 
that can configure server workstations used on the 
Windows operating system. There is no equivalent solution 
provided for Linux OS. GPOs can provide useful features to 
configure the clients and servers, and most security 
settings on domain controllers, domain joined servers and 
workstations are configured using GPOs.
We have learned about the Default Domain Policy and 
Default domain controller policies in the previous chapters. 
If we would like to improve the security for domain 
controllers and domains, we need to implement separate 
GPOs that contain the security settings that are not 
implemented by default when creating an Active Directory 
environment.
Typically, those settings are not applied to Active Directory 
by default because they can prevent different applications, 
hardware equipment and legacy workstations from 
operating in an AD environment. Microsoft provides those 
settings in the security baselines than can be found by 
following these links:

https://learn.microsoft.com/en-us/windows/security/threat- 
protection/windows-security-configuration- 
framework/windows-security-baselines
https://www.microsoft.com/en-us/download/details.aspx? 
id=55319
Refer to Figure 7.12 and Figure
I" Security baselines gu»d« | Micro
to leam.microsoftcom/en-us/windows/security/threat-i
I Microsoft | Learn Documentation Training Certifications
Microsoft 365 Solutions and architecture v Apps and services
To filter by title
Windows
> Network security
~ Windows secunty baselines
Windows security baselines
Security Compliance Toolkit
Get Support
> Virus & threat protection
> More Windows security
> Application security
> User security and secured identity
CJ Download PDF
learn / Windows / Security / 
© O # 
:
Security baselines
Article • 12/09/2022 • 3 minutes to read • 17 contributors 
c5 Feedback
In this article
Using security baselines in your organization
What are security baselines?
Why are security baselines needed?
Baseline principles
How can you use security baselines?
Where can I get the security baselines?
Community
Related videos
Figure 7.12: Security baselines and Compliance Toolkit 
overview

DCAZROOTOOI
□
X
0 A bst-cb25a5b9-5857-4213-9ca1-0dc1ba544da3.bastion.azure.eom/#... □ 
-/ [] 1 
;
tn ■■ Download Microsoft Security Co X -p 
— O1 X
O H https://www.microsoft.com/en-us/download/details.aspx7id=55319 to £ 
® J -
|__ | File Name 
Size
a Download Summary:
2) Windows 10 version 21H1 Security Baseline.zip 
1.2 MB 
KBMBGB
1. Windows Server 2022 Security
2Jwindows10version21H2SecurityBaseline.zip 
1.2 MB 
Baseline.zip
| Windows10version22H2SecurityBaseline.zip 
1.2 MB
| Windows 11 Security Baseline.zip 
1.2 MB
2] Windows Server 2012 R2 Security Baseline.zip 
699 KB
_ . 
. 
. 
Total Size: 1.3 MB
Windows Server 2022 Security Baseline.zip 
1.3 MB
Next
Figure 7.13: Security baselines and Compliance Toolkit
overview
We can download the Security Compliance Toolkit to get 
the template for hardening GPOs. After downloading, we 
export them to the specific location on the server that can 
manage GPOs in the AD environment. We will try to import 
those GPOs into the domain. To perform the import, we 
must use the Group Policy Management Console and 
create a new GPO using the new option in the Group Policy 
Objects Action menu. Use the Name option and put the

desired GPO name that would indicate the purpose of the 
GPO and what could be its content, as illustrated in Figure 
7.14 and Figure
Figure 7.14: Creating new GPO for the hardening settings

. _ https://bst-cb25a5b9-5857-421 x +
<- c A bst-cb25a5b9-5857-4213-9ca1-0dc1ba544da3.bastion.azure.com/*... B L£? ft * El
Group Policy Management 
—OX
£ File Action View Window Help 
_ S’ x
f 41 4 E QI^TB^
.A Group Policy Management
v A Forest adpstest.net
- & Domains 
v adpstest.net
Default Domain Policy 
> - I Domain Controllers 
> i GlobalResources 
> y Office 
> aj Servers
> 
2.' G'oup Policy Objects
> 
T WMI Filters
> 3 Starter GPOs
> a Sites
ti Group Policy Modeling 
Group Policy Results
Group Policy Objects In adpstest.net 
Contents Delegation
Name
GPO Status
WMI Her 
xT
*™
None
Modfied
9/25/202210:3...
9/25/2022 10:3..
New GPO
»
Figure 7.15: Creating new GPO for the hardening settings
The new GPO object is created, but it is not linked to any 
organizational unit and contains no settings. To set the 
settings from the downloaded security baseline, we need 
to use the Import Settings option and navigate to the GPO 
folder:
For example, navigate into: 
C:\SecurityBaseline\W2k22\Windows Server-2022-Security- 
Baseline-FINAL\GPOs folder and choose the right GPO. In 
this case, we will choose MSFT Windows Server 2022 
Domain

Figure 7.16 and Figure 7.17 illustrates the GPO import:
_ https://b5t-cb25a5b9-5857.421 x +
<- -> C a bst-cb25a5b9-5857-4213-9ca1-0dc1ba544da3.bastion.azure.com/*.. □ \£ ☆ 
> 3 □ 1 
:
- Group Policy Management 
— OX
File Action View Window Help 
2l El £l Q a 
£ Group Policy Management 
v A Forest adpstest.net
v <• Domains 
v j adpstest.net 
,J Default Domain Policy 
> 13J Domain Controllers 
> GlobalResources 
> 5] Office 
> i32 Servers 
> H Group Policy Objects 
> L^WMI Filters 
> 2 Starter GPOs
> £ Sites
•r’. Group Policy Modeling 
Group Policy Results
_ S’ X
Group Policy Objects in adpstest.net 
Concerts Delegation
Name 
GPO Status 
WMI Her 
Modfied
J; Def aut Domain CortroSers Poky 
Enabled 
None 
9/25/20;
Defaut Domain Poky 
Enabled 
None 
9/25/201
:ehe Edit 
GPO Status >
Back Up... 
Restore from Backup... 
Import Settings...
Save Report...
Copy 
Delete 
Rename 
Refresh 
< | >
3 Group Policy Object(s)
Figure 7.16: Importing security settings from Baseline GPO

_ hHpt//bj(-(OZ5
*5bS-5S57-42'
 X 4-
<- -> c a bst-cb25a5b9-5857-4213-9ca1-0dc1ba544da3.bastionjzvre.com/'*... Q & ☆ 
> 
□ X
Import Settings Wizerd
■ ■■■< 
Wee GPO
SHrvldw GPO frvAi adl
*d*i
 jw 
vritfaqa.
Backed up GPO
*
J MSFT hefflB Bfterw 11 ■ CWtfer 
1/26/2021 625:52 PI
jMSFTherwt Ejatawll .Iher 
B/36/2021 6:36:08 Fl
J HSFTldtodfrn 2022 ■ WeWr Aivrjs 
1/26/20216 2$ 09 PI
MSFT Ytodom Server 2022 - Dwiw Cortroter 
£■ 26--2021 6 36 10 P
_J MSFT Wndcvb, Sow 2022 ■ Domam CaeJn Wu
*
.. 8/26/20216:26:11 Pt 
jTMSFTVJW^sSwrtf 2022Secutr 1/26/202162612 PI
J MSFT Wrriowi Sew 2022- Member Server 
S/26'202162612 PI
□ Shew erfr the Iate
*
 venen of tacit G PO
Ve* Seftoji
GPO Status
Enabri 
Enab rd
Enatbd
WMI ftter 
r.'rfSed
Nw 
sd&an
nw 
v<5.'2o:
Here 
12/1'20:
3 Gfoup Policy Object^)
Figure 7.17: Importing security settings from Baseline GPO
Before linking GPO to the domain controller OU, it must be 
fully verified in the test environment. Even a single setting 
can stop the production workload from authenticating with 
Active Directory. It is easier to implement new GPOs in 
separate environment than to modify the existing GPOs. 
Still, in existing environments, single settings need to be 
implemented step by step. If there is an impact we need to 
review all recent changes that were processed recently. Let 
us review the settings we imported into hardening GPO 
and see the scope of the security baseline. To review the

settings, we need to navigate to the GPO and choose the 
Settings tab, as illustrated in Figure
Figure 7.18: Hardening GPO Settings report
Many settings related to user rights assignment specify 
which users or groups can perform privileged operations 
on the server. This section must be reviewed and adjusted 
to our needs. Auditing policies are enabled as required for 
DCs and many other security settings that form the 
Microsoft baseline of Windows Server 2022 domain 
controller.

Once the settings that we need to exclude are removed, 
we can link the policy for testing by navigating to the 
Domain Controllers OU and choosing the Link option, as 
illustrated in Figure 7.19 and Figure
Figure 7.19: Linking GPO to domain controller OU

>>
Default Domain Pofcv
Group Policy Management
v Forest: adpstestnet
v Domains
v adpstestnet
juJ* Default Domain Policy
> 
Domain Controllers
> □_] GlobalResources
J 
Office
> 
Servers
v Group Policy Objects
ijf Default Domain Controllers Policy 
Default Domain Policy
J DomainControDerHardeningGPQ
> c# WMI Filters
> 3 Sl»rt« GPOs
> J| Site
•r? Group Policy Modeling 
Group Policy Results
Select GPO
Lm4 ft this domain:
Figure 7.20: Linking GPO to domain controller OU
After the group policy is linked, we can refresh the settings 
on the server to process immediately instead of waiting for 
the processing schedule by executing gpupdate/force 
command. After refresh of policies is finished, hardening 
will be applied to the domain controllers. Figure 7.21 shows 
that we already have Microsoft Edge blocked on the server 
by GPO:

Figure 7.21: Hardening settings blocking the usage of 
Microsoft Edge on the domain controller
One more important subject is the Group Policy Link As the 
hardening GPO is not the only GPO linked to the domain 
controller OU, when you link a GPO, it is added with the 
lowest precedence by default. Changing the link order also 
requires validation in the test environment to ensure that it 
will replace settings defined in the Default Domain 
Controller As some of the settings are configured in both 
GPOs, we need to change the order and put the hardening 
GPO at the top of the list, as illustrated in Figure 7.22 and 
Figure

_ https://bst-cb25a5b9-5857-42' X +
<- -> C ® bst<b25a5b9-5857-42l3-9ca1-0dclba544da3.bastion.azure.com/#/cli... B & ☆ 
# - J □ X
a Group Policy Management
File Action View Window Help
o X
a Group Policy Management
v Forest adpstest.net
v * Domains
v oFj adpstest.net
..J Default Domain Policy
v 2 Domain Controllers
n/ Default Domain Controllers Policy 
aj DomainControllerHardeningGPO
> X GlobalResources
> X Office
> X Servers
> Group Policy Objects
> ® WMI Filters
> 2 Starter GPOs
> Sites
Group Policy Modeling
Group Policy Results
>>
Domain Controllers
linked Group Poky Objects Group Pokey Inhertance Delegation
Figure 7.22: Changing the Hardening GPO link order

?_ https://bst-cb25.a5b9-5857-421. x +
<- -> C A bst-cb25a5b9-5857-4213-9ca1-0dc1baS44da3.bastion.azure.eom/#/di... D 
> ==J □ X
a Group Policy Management
£ File Action View Window Help
4»
*l
 a ral al H a
□ X
£ Group Policy Management
v Forest: adpstest.net
v jjj Domains
v adpstest.net
Default Domain Policy 
v _ Domain Controllers
(./ Oe/ault Domain Controllers Policy
DomainControllerHardeningGPO
> 
,a  GlobalResources
*
> 
ffl Office
> 
i3l  Servers
*
> 
Group Policy Objects
> 
WMI Filters
> 
2 Starter GPOs
> £ Sites
•f. Group Policy Modeling
Group Policy Results
Domain Controllers
Inked Group Poky Objects &oup Poky hhertance Delegation
Link Order 
GPO 
Enforced 
Lnk Enabled
1 
ft' DomanControlerHardenngGPO 
No 
Yes
2 
ftx’ Default Doman Controlers Poky 
No 
Yes
Figure 7.23: Changing the Hardening GPO link order
Although not every GPO setting can be implemented using 
PowerShell, we can create GPOs and add registry-based 
settings and preferences. To perform all the preceding 
configuration using PowerShell, we need to execute the 
following script:
#Creating new blank GPO 
-Name DomainControllerHardeningGPO
#Import settings from Security Baseline GPO

Import-GPO -BackupGpoName "MSFT Windows Server 2022 
- Domain Controller" -Path 
"C:\SecurityBaseline\W2k22\Windows Server-2022- 
Security-Baseline-FINAL\GPOs" -TargetName 
"DomainControllerHardeningGPO"
#Link GPO to the target OU
-Name "DomainControllerHardeningGPO" -Target 
"OU=Domain Controllers,DC=ADPSTEST,DC=NET"
#Set GPO order
Set-GPLink -Name -Target "OU=Domain
Controllers,DC=ADPSTEST,DC=NET" -LinkEnabled Yes - 
Order 1
You can find the other possible commands to manage 
GPOs using PowerShell in the following Microsoft 
documentation: 
https://learn.microsoft.com/en-
us/powershell/module/grouppolicy/

AdminSDHolder and SDPROP
AdminSDHolder is the object that contains the ACLs that 
are replicated to all protected groups and to all members 
of those protected groups. This replication is performed by 
SDPROP, which is a process responsible for ensuring that 
the permissions on the protected groups and their 
recursive members are getting the Security Descriptor 
consistent with the one on the AdminSDHolder object.
Why is there an exception created for protection on those 
objects? By default, users inherit the permissions from the 
OU. If a user is added to a protected group but is in an 
unsecured OU structure, high privileged access can be 
exposed. To prevent this, SDPROP makes sure that 
regardless of a user or group’s location in AD, permissions 
to those objects will be always replicated from a single 
object. The process overview is illustrated in Figure

Figure 7.24: Privileged Groups access protection by 
SDPROP process

The idea is that all organizational units or container user 
members of any protected group will always get the 
permissions applied on the AdminSDHolder object. 
Inheritance will be disabled on this user. Permissions will 
be copied from the protected source that the inheritance is 
disabled for, and permissions applied to domain and 
system container will not be inherited to the object.
By default, the inheritance on this object and the 
permissions are restricted, and we need to make sure no 
custom modifications were performed that could expose 
access to all sensitive users protected by SDPROP.
AdminSDHolder object inheritance and some permissions 
can be enabled, so audit of the permissions on the object 
is required to be sure it is secure; it can be performed as 
illustrated in Figure 7.25 and Figure

□ X
. J. https7/bst-2c1c3780-8d39-47C X
i bst-2c1c3780-8d39-47f3-9a18-40e33af515d0.bastion.azure.com/*/dien... □ 
M =7 □
Active Directory Users and Computers 
File Action View Help
a
x
Active Directory Users and Computers [DC AZRC 
> lTi Saved Queries
v Jcj adpstest.net
Builtin
Computers
Domain Controllers 
ForetgnSecurityPnncipals 
GlobalResources 
3*l  Delegation 
al Groups 
32 ServiceAccounts 
Keys
LostAndFound
Managed Service Accounts 
Office
Program Data 
Servers
System 
AdminSDI loldcr
AdminSOHolder Properties
General Object Securty Aftnbute Edtor
Sfoop or user names
Doman Adman IADPSTEST Doman Admr»)
MCet Pubkshers (ADPSTESTCert Pubhhers)
&K Enterprise Admrs (ADPSTEST- Enterprise Admns)
£& Admmstraton tADPSTEST'Admm$trators>
& Pre-VZndows 2000 Comoattfe Access (ADPSTEST Pre-Wndo 
bl Wndows ruthoflzeboH Access Gpuo (AOPSTESTxWrdows A
>> >
A^d. Qemove
Alow Deny
RM control
□
□
A
Road
□
□
Wrte
□
□
Create al chid objects
□
□
Delete al chid objects
□
□
□
For sceoal pamvsscns or advanced sattngs. ckck Advanced
Advanced 
1
> _ j ComPartitions
> 
. ComPartitionSets
Figure 7.25: Privileged groups access protection by 
SDPROP process

Figure 7.26: Privileged groups access protection by 
SDPROP process
The SDPROP process is not instantaneous, it runs every 60 
minutes. It is not recommended to decrease the SDPROP 
schedule. So, it is important when we add any member to 
the protected groups as we could expose to high risk. The 
best recommendation is to move it into single 
organizational unit with limited delegation and manage 
those properly preventing the lateral movement attacks.
When discussing AdminSDHolder, covering the orphaned 
objects topic is important. When an object is added to one 

of the protected groups, it also gets the adminCount 
attribute value 1. Before Windows server 2003, it was 
enough to get the SDPROP process in sync with the 
security descriptor with AdminSDHolder. On later releases, 
they need to be a protected group member, so the 
attribute is not triggering the SD sync. To detect all users 
with we can execute the following PowerShell script:
Import-Module ActiveDirectory
Get-ADObject -LDAPFilter "(admincount=1)"
The results are illustrated in Figure

□ X
■. hnpsy/bst-2dc3780-«d39-47f3 X +
fr C ® bst-2dc3780-8d39-47f3-9a18-40e33af515d0.bastion.azure.eom/#/clien... O & ☆
a x
a Administrator Windows PowerShell
PS C:\Windows\system32> Import-Module ActiveDirectory
PS C:\windows\systerti32> Get-ADObject LDAPFilter (admincount-1)"
DistinguishedName
Name
CN-admadpowershell,OU-Delegation,OU-GlobalResources,DC-adpstest,DC-■net admadpower__
CN-adpsadmin,0U-Delegation,0U-61obalResources,DC-adpstest,DC-net
adpsadmin
CN-Administrators,CN-Builtin,DC-adpstest,DC-net
Administra...
CN-Print Operators,CN-Builtin,DC-adpstest,DC-net
Print Oper...
CN-Backup Operators,CN-BuiItin,DC-adpstest,DC-net
Backup Ope...
CN-Replicator,CN-Builtin,DC-adpstest,DC-net
Replicator
CN-krbtgt,CN-Users,OC-adpstest,DC-net
krbtgt
CN-Domain Controllers,CN-Users,DC-adpstest,DC-net
Domain Con...
CN-Schema Admins,CN-Users,DC-adpstest,DC-net
Schema Admins
CN-Enterprise Admins,CN-Users,DC-adpstest,DC-net
Enterprise...
Cd-Domain Admins,CN-Users,DC-adpstest,DC-net
Domain Admins
Wl-Server Operators,CN-Builtin,DC-adpstest,DC-net
Server Ope...
CN-Account Operators,CN-Builtin,OC-adpstest,DC-net
Account Op...
CN-Read-only Domain Controllers,CN-Users,DC-adpstest,DC-net
Read-only ...
CN=Key Admins,CN-Users,DC-adpstest,DC-net
Key Admins
CN-Enterprise Key Admins,CN-Users,DC-adpstest,DC-net
Enterprise...
CN-addsadmin,CN-Users,DC-adpstest,OC-net
addsadmin
PS C:\Windows\system32> —
Figure 7.27 : Listing all objects with adminCount=1
Comparing the above list with the protected group 
members, we can find the orphaned users, and it would be 
good to change the attribute of adminCount to 0 and re­
enable inheritance, just to allow the teams to regain 
control on non-privileged accounts.

Managed service accounts and group managed service 
accounts
When performing operations as end users, interactively 
and working specific tasks, we typically use a standard 
user account with specific permissions that grants access 
to applications or specific resources. Until Windows server 
2008 R2, the same type of accounts was used to access 
the resources interactively to run Scheduled Tasks, 
Services, IIS Application Pools, and SQL instances.
That generated additional risk as the standard user needs 
to have manage password, and password needs to be 
manually rotated by administrators. Manual password 
rotation is exposing the credentials to manual process. 
Passwords could be misused to login interactively to the 
system instead of running the specific services only. Those 
accounts where easy target for the attacks significantly 
increasing the surface of the attach.
To minimize the risks, Microsoft introduced the MSA in 
Windows server 2008 R2 and gMSA in Windows server 
2012 R2. MSA could be used on the domain joined 
machines. It runs only on a single machine, whereas gMSA 
can be assigned to multiple principles, not only servers

and workstations, so that they can be used in multi-server, 
components, or clusters applications.
So, if we are running single script, small application could 
be easily done using MSA, but gMSA is an overall 
enhancement as it could be used on a single server in 
complex application or cluster.
Let us create both MSA and gMSA and try to attach them 
to the server running the application. As this feature was 
implemented in Windows Server 2008 R2 and later OS, 
there is no scope of performing gMSA and MSA 
management in the console. Still, we could navigate to the 
Managed Service Accounts container to verify and audit 
any existing service accounts, as illustrated in Figure

. _ DCAZROOTOO! 
X +
<- -> C a bst-65c57805-a023-4303-9c93-93ce247b10f8.bastion.azure.co... 
0
_ Active Directory Users and Computers
File Action View Help
1*  * 
» -J □ i :
- a x
1 I S & jj ▼ £
Active Directory Users and Computers [DCAZRC a 
> m Saved Queries
v adpstest.net
> 
Builtin
> 
r°i Computers
> 
,al  Domain Controllers
*
r° ForeignSecurityPrincipals
v 
GlobalResources
> ,a‘l Delegation
,an Groups
> i~a'l ServiceAccounts
> □ Keys
> Q LostAndFound
Cj Managed Service Accounts
> IZI Office
> □ Program Data
> ,j~ Servers
> Q System
. 
IIcpfc 
V
< >
Name 
Type
There are no items to sh
Description
ow in this view.
Figure 7.28 : Checking existing MSA and gMSA accounts in 
domain
As we can see, there are no gMSA or MSA accounts 
created yet, so the first step is to check if we have 
KdsRootKey created in the environment, by executing the 
Get-KdsRootKey command, as illustrated in Figure

■ DCAZROOTOC1 
X +
<- -> 0 A bst-65c57805-a023-4303-9c93-93ce247b10f8.bastion.azure.co... B & ☆ 
* ==/ □ X ;
ES Windows PowerShell 
—OX
windows Powershell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows
PS C:\Users\adpsadmin> Get-KdsRootKey
PS C:\Users\adpsadmin> _
Figure 7.29 : Checking KdsRootKey in the forest
As we can see, there is no KDS key; we need to execute 
the following command to create it:
#Create AD if not existing in the forest
$RootKey = $null
$RootKey = Get-ADKDSRootKey
-eq $null)
{
Add-KdsRootKey -EffectiveTime

}
We should not create a new key when KdsRootKey is 
already there, as it could break existing MSA accounts from 
operating. So, the effective time should be set in the future 
and the existing accounts should automatically switch to 
using the new key.
If we want to create the MSA, we execute the following 
command:
-Name MSA-AD-TEST -RestrictToSingleComputer
MSA accounts can be used only by single server or 
computer. Eventually we need to attach it to the server 
that will host application and will run under this account:
Add-ADComputerServiceAccount -Identity DCAZROOT001 - 
ServiceAccount MSA-AD-TEST
Likewise, we can create gMSA and assign it to a single 
server only: 
#Create new gMSA account in domain

New-ADServiceAccount -name gMSA-AD-TEST - 
DNSHostName DCAZROOT001.adpstest.net
#Allow the server to use the gMSA account
-PrincipalsAllowedToRetrieveManagedPassword 
DCAZROOT001$
The full script to create both accounts, including preparing 
the KDS root key, would be as follows:
#Create AD if not existing in the forest
$RootKey = $null
$RootKey = Get-KdsRootKey
-eq $null)
{
Add-KdsRootKey -EffectiveTime 
}
#Create AD Service Account

-Name MSA-AD-TEST -RestrictToSingleComputer 
#Assign MSA to Server
Add-ADComputerServiceAccount -Identity DCAZROOT001 - 
ServiceAccount MSA-AD-TEST
#Create new gMSA account in domain
-name gMSA-AD-TEST -DNSHostName
DCAZROOT001.adpstest.net
#Allow the server to use the gMSA account
-PrincipalsAllowedToRetrieveManagedPassword 
DCAZROOT001$
The results of the script are illustrated in Figure

■ DCAZROOTOOI 
X +
<- -> 0 a bst-65c57805-a023-4303-9c93-93ce247b10f8.bastion.azure.com/#/dienVR... O l^> ☆ 
> 5T □
Administrator Windows PowerShell 
— OX
PS C:\Hindows\system32> $RootKey - (null
PS C:\Windows\system32> SRootKey Get-KdsRootKey
PS C:\Windows\system32> if(SRootKey -eq $null)
» {
>> 
Add-KdSRootKey -EffectiveTime ((get-date).addhours(-10))
» }
PS C:\Windows\system32>
PS C:\Windows\system32> ((Create AD Service Account
PS C:\Windows\system32> New-ADServiceAccount -Name HSA-AD-TEST -Restri 
ctToSingleComputer
PS C:\Mindows\system32>
PS C:\Windows\system32> ((Assign MSA to Server
PS C:\Windows\system32> Add-ADComputerServiceAccount -Identity DCAZROO
T001 -ServiceAccount MSA-AD-TEST
PS C:\Windows\system32>
jS C:\Windows\system32> ((Create new gMSA account in domain
PS C:\Mindows\system32> New-ADServiceAccount -name gHSA-AD-TEST -DNSHo 
stName DCAZROOT001.adpstest.net
PS C:\Windows\system32>
PS C:\Windows\system32> ((Allow the server to use the gMSA account
PS C:\Windows\system32> Set-ADServiceAccount gHSA-AD-TEST -PrincipalsA
HowedToRetrieveManagedPassword DCAZROOT001S
PS C:\Windows\system32>
Active Directory Users an... 
— OX
File Action View Help
Xl 3 Ol «r □ X
23 Active Directory I a 
> 21 Saved Queries 
v adpstest.net
> Q Builtin 
> 2', Computer 
> 31 Domain C 
> Cl ForeignSe 
v fij GlobalRes
> 33 Deiegi 
al Group
> al Servicr
> □ Keys 
LostAndFr
> Managed 
> 3j Office 
> 
Program (
> 3. Servers 
> 
_ System
> 21 Users 
> C NTDSQuc 
> 
TPM Devi< v
<>
Name
gMSA-AD-TEST 
MSA-AO-TEST
Figure 7.30 : Creating the MSA and gMSA
Before we can use the MSA or gMSA on the server, we 
need to install it. If there is no RSAT-AD-PowerShell feature 
installed, we need to add them first and then perform the 
installation:
#Install features if required - Not needed on already 
configured Domain Controller
#Add-WindowsFeature RSAT-AD-PowerShell
#Install MSA account

#Install gMSA account as well
Now, we can use the MSA or gMSA on the server. Common 
use case would be creating the scheduled task and using 
the service accounts as in the following script:
#Create directory if needed
-ItemType Directory -Path c:\temp
#CreateSchedule
$TimeTrigger = -At -Weekly -DaysOfWeek Sunday
#Define the Action
$StartAction = -Execute "hostname > 
c:\temp\hostname.txt"
#Specify the MSA or gMSA account to be used
$RunAsAccount = -UserID adpstest\MSA-AD-TEST$ - 
LogonType Password

#Create ScheduledTask
Register-ScheduledTask -TaskName Test-MSA -Principal 
$RunAsAccount -Trigger $TimeTrigger -Action $StartAction
#Specify the MSA or gMSA account to be used
$RunAsAccount = -UserID adpstest\gMSA-AD-TEST$ -
LogonType Password
#Create ScheduledTask
Register-ScheduledTask -TaskName Test-gMSA -Principal 
$RunAsAccount -Trigger $TimeTrigger -Action $StartAction
The results of the execution are shown in Figure

DCAZROOTOOl
□ X
X
C ■ bst-6ScS7805-a023-4303-9c93-93ce247b10f8.bastion.azure.com/*/client/RENBWUPT1QwMD... □ [£?
FE
□
@T»sk Scheduler
□ X
PS C:\Windows\system32>
PS C:\Windows\system32> WDefine the Action
PS C:\Windows\systei>32> SStartActlon - New-ScheduledTaskActio 
n -Execute "hostname > c:\temp\hostname.txt"
PS C:\Windows\system32>
PS C:\Windows\systeM32> wSpecify the MSA or gMSA account to be 
used
PS C:\Windows\system32> SRunAsAccount 
New-ScheduledTaskPrinc
ipal UserID "adpstest\MSA-AD-TESTS" -LogonType Password
PS C:\Windows\syste«32>
PS C:\Windows\syste»32> WCreate ScheduledTask
PS C:\Windows\system32> Register-ScheduledTask Taskhame Test- 
MSA -Principal SRunAsAccount -Trigger STimeTrigger -Action $S 
tartAction
TaskPath
TaskNane
Test-MSA
PS C:\Windows\syste»32>
PS C:\Windows\systee»32> ^Specify the MSA or gMSA account to be 
used
PS C:\Windows\system32> SRunAsAccount - New-ScheduledTaskPrinc 
ipal UserID "adpstest\gMSA-AD-TESTS" -LogonType Password
PS C:\Windows\system32>
PS C:\Windows\systen32> ^Create ScheduledTask
PS C:\Windows\system32> Register-ScheduledTask -TaskName Test 
-gMSA -Principal SRunAsAccount -Trigger STimeTrigger -Action 
SStartAction
File Action View Help
*41 £ E Bra
0 lask Schec n 
v Task Sc
Name 
Status 
Triggers
0 MicrosoftEd- Ready Multiple triggers
0 MicrosoftEd... Ready At 10:08 PM eve
General Tuggers Actions Condit 1
E '* ’>< gMSA
Ready
At 1:00 PM every■
Security options
When running the Usk, use the follot 
gMSA-AD-TESTS
Run only when user is logged on
Run whether user is logged on or
Do not store password. The t<
Run with highest privileges
Mh
Figure 7.31 : Creating the MSA and gMSA
There are other use cases where Managed Service 
Accounts can be used, but we will not discuss them in this 
section. To summarize, there was no password exposed to 
the administrators, no need for rotating passwords, and no 
possibility of using it outside the servers assigned. If 
someone compromises administrative permissions on 
those servers, it does not expose the MSA credential and 
allow misusing it for other needs. Still avoidance on 
granting privileged access to those accounts, limit admin 
access to the server and provide as minimum as possible 

permissions for those principals is the key to keep systems 
and domain safe.

Fine-Grained Password Policies
Fine-Grained Password Policies we already discussed on 
how to create the Fine-Grained Password policy and assign 
it to the specific user or group. We need now to ensure 
that users who need to be protected by FGPP are members 
of a specific group, so the FGPP can be applied.
To accomplish this, we could use the concept of shadow 
groups or dynamic groups. Shadow groups is the definition 
of the group that contains all the accounts that are created 
in specific organizational units. Dynamic group is the group 
where membership is populated automatically by the 
process that checks the prerequisite if a specific account 
needs to be added or removed from the group if a member 
already exists.
What are the use cases that we apply those membership 
and implement FGPP in? There could be different scenarios 
we could cover:
All members of protected groups
All accounts from specific OUs

All accounts with the ‘password never expire’ flag
All manage service accounts and group manage service 
accounts
All Account: ‘This account is sensitive and cannot be 
delegated’
All accounts with specific naming convention: adm_ .svc
How would we create dynamic groups with those accounts 
as members? We could use PowerShell to fill the 
membership and use the task scheduler to ensure that the 
membership will be updated on the defined schedule 1 
hour, for example. It would ensure that this process is 
automatic and does not require manual intervention.
Let us try to cover scenario number 2 of the defined 
scenarios using PowerShell and see how this can be 
achieved quickly with manual script execution and then try 
to automate execution using the task scheduler.
To create a dynamic group containing all user accounts 
from a specific OU (Shadow Group), we must first define 
the OU location that will hold the users. In our

development environment, we used the Delegation OU 
where most privileged users were created. In every 
environment, one OU should hold most privileged users 
moved from default users container:
Get-ADGroup "Delegation_Users" 
}
-Name -SamAccountName "Delegation_Users" -Path 
"OU=Delegation,OU=GlobalResources,DC=adpstest,DC=n 
et" -GroupScope "Global" -GroupCategory Security
}
$OUDN =
"OU=Delegation,OU=GlobalResources,DC=adpstest,DC=n 
et"
We need to define the group name where members will be 
populated with user accounts from this specific OU:
$ShadowGroup =
"CN = Delegation_Users,OU=Delegation,OU=GlobalResourc 
es,DC=adpstest",

The current members need to be assessed first; if they no 
longer meet the membership criteria of the specific group, 
we need to remove them using the following command:
Get-ADGroupMember -Identity $ShadowGroup | 
Where{$_.distinguishedName -NotMatch $OUDN} | 
{Remove-ADPrincipalGroupMembership -Identity $_ - 
MemberOf $ShadowGroup -Confirm:$False}
Once we have cleared the group from the members that 
no longer reside in the specific OU, we can try to find all 
users matching the criteria and add them to the group:
Get-ADUser -LDAPFilter '(!memberOf=$OUDN)' - 
SearchBase $OUDN | {Add-ADGroupMember -Identity 
$ShadowGroup -Members $_}
The full script will look as follows:
Get-ADGroup "Delegation_Users"
}

-Name "Delegation_Users" -SamAccountName
"Delegation_Users" -Path
"OU=Delegation,OU=GlobalResources,DC=adpstest,DC=n 
et" -GroupScope "Global" -GroupCategory Security
}
#OU name for users to be searched
$OUDN =
"OU=Delegation,OU=GlobalResources,DC=adpstest,DC=n 
et"
#Group name that will contain users as members
$ShadowGroup =
"CN = Delegation_Users,OU=Delegation,OU=GlobalResourc 
es,DC=adpstest,DC=net"
#Cleanup of the membership that is no longer matching 
the OU
Get-ADGroupMember -Identity $ShadowGroup | 
Where{$_.distinguishedName -NotMatch $OUDN} | 
{Remove-ADPrincipalGroupMembership -Identity $_ - 
MemberOf $ShadowGroup -Confirm:$False}

#Adding all users that are not yet member and form 
specific OU
Get-ADUser -LDAPFilter '(!memberOf=$OUDN)' - 
SearchBase $OUDN | {Add-ADGroupMember -Identity 
$ShadowGroup -Members $_}
The execution is illustrated in Figure
Figure 7.32: Creating a Dynamic group with all OU users as
members

Once the script is ready, we can schedule it using 
PowerShell. If the scheduled task runs on the domain 
controller, we could just run this scheduled task as a 
system. If the scheduled task runs on a different server, we 
will need the managed or group service accounts. Then, 
make sure the permissions on this group allow 
membership modifications.
To create a scheduled task running on group managed 
service account, we could use similar script that was used 
to show the gMSA functionalities, but we need to make 
sure the gMSA has write member permissions on the group 
object:
#Define the Trigger
$TimeTrigger = New-ScheduledTaskTrigger -Once -At (Get- 
Date) -RepetitionInterval (New-TimeSpan -Minutes 60) 
#Define the Action
$StartAction = New-ScheduledTaskAction 'powershell.exe' 
-WorkingDirectory "C:\Scripts\" -Argument '-NonInteractive 
-NoLogo -NoProfile -Command 
".\DynamicGroup_Delegation_Users.ps1"'
#Specify gMSA account to be used 
$RunAsAccount = -UserID -LogonType Password

#Create ScheduledTask
DynamicGroup_Delegation_Users -Principal 
$RunAsAccount $TimeTrigger $StartAction
The scheduled scrip is illustrated in Figure
v — LJ A 
_ DCAZROOTOOI 
X Home - Microsoft Azure X +
<- -> C ft bst-1ccff58d-c223-4f80-a222-98dbl796de2l.bastion.azure.com/#/client/RENB... □ 
# F/ □ X •
O Task Scheduler 
—OX
File Action View Help
a ral Q ai
0 Task Scheduler (Local) 
> 
Task Scheduler Library
»
Name 
Status Triggers
<Ui DynamicGroup.DelegationJJsers Run... At 12:18 AM on 12/16/2022 • After triggered, repeat every 1 hour indef
Microsoft EdgeUpdateTask Mach... Ready Multiple triggers defined
MicrosoftEdgeUpdateTaskMach... Ready At 10:08 PM every day • After triggered, repeat every 1 hour for a dural
<J>Test-gMSA 
Ready At 1:00 PM every day
<5>Test-MSA 
Ready At 1dX) PM every day
General Triggers Actions Conditions Settings History
Actions
TaskSched...
<s) treat-
ft- Great...
Impor...
£71 Displa...
f ] Disabl...
New Fa-
View ►
A Refresh 
Q Help
Number of events- 7
Selected It...
Level 
Date and Time 
Event ID Task Category Operational Code *
OB Information 
12/16/2022 12:2... 
102 Task completed 
(2)
© Information 
12/16/202212:2... 
201 Action comple... 
(2)
©Information 
12/16/2022 12:2... 
110 Task triggered... 
Info
©Information 
12/16/202212:2... 
200 Action started 
(1)
©Information 
12/16/2022 12:2... 
100 Task Started 
(1)
©Information 
12/16/2022 12:2... 
129 Created Task P... 
Info
fTI Information 
17/1A/XV? 
1(¥» Tack remetered 
Info
< 
>
► Run 
■ End 
♦ Disable
Expor... 
(!• Prope... 
X Delete 
Q Help
Figure 7.33: Scheduled script for the Dynamic group 
implementation

At the end, we can create the fine-grained password policy 
and assign it to the created and populated group:
FGPP-DelegationUsers -ComplexityEnabled:$true - 
ReversibleEncryptionEnabled:$false - 
ProtectedFromAccidentalDeletion:$true
Add-ADFineGrainedPasswordPolicySubject FGPP- 
DelegationUsers -Subjects
The script execution and the policy settings are illustrated 
in Figure

Figure 7.34: Scheduled script for the Dynamic group 
implementation
The biggest downside of solution based on automatic 
schedule is that if the user is created, the first password 
for that user will not follow FGPP unless user is added 
manually to the group before the password is set for that 
account. So, the complexity settings will be applied after 
the next password change.

Patch management and update configuration
Patch management is a big part of the security work when 
running Active Directory infrastructure. Single vulnerability 
is documented by Microsoft in Knowledge Base articles 
that can affect the entire company. Even one server 
missing the specific patch can be root entry to the AD 
forest.
On the other hand, a single patch deployed on all servers 
can prevent users from being able to authenticate properly 
in extreme situations. Then the patching cycle must be 
spread across the test and production environments. When 
we deploy the patches in production, we do not try to hit 
all the domain controllers simultaneously. Rather, we apply 
the patches during the maintenance windows and try to 
finish the work before major production workload hits it 
again. Every weekend, servers from the same domain are 
rebooted during a separate time window. All test servers 
are patched one weekend, and all production servers are 
patched the following weekend.
Microsoft releases patches in monthly rollups to be packed 
together. After deploying this single patch, all the fixes are 
applied to the server, so installing them separately is

unnecessary. The best practice would be to install the 
monthly rollups within 30 days of Microsoft releasing them 
at the latest. So, once new patches are released, the team 
responsible for patching the domain controllers will be able 
to focus on the next patching cycle.
What are the most common scenarios for patching 
Windows servers that run as domain controllers?
There could be five common scenarios to use:
Manual patching or using external toolset: The server is 
not performing automatic updates but is patched using the 
security agent by the team responsible for patching. This is 
one of the most common scenarios when a company 
invests in patch management product outside of Microsoft 
suite.
Using SCCM: We can use System Center Configuration 
Manager to not only configure the machines but also to 
deploy security patches to them. SCCM is used in large 
organizations to gain control over both servers and client 
devices. Then SCCM can push and deploy specific patches 
to them and provide a client management solution.
Automatic updates using Microsoft update: The server is 
configured for automatic updates and uses the Microsoft 

update services to download and install the patches 
automatically if configured to do so. Sometimes, 
downloading the patch is automatic, and the administrator 
manually triggers the installation.
Automatic updates using WSUS Server: This is the most 
common implementation for smaller companies that keep 
the patch management for on-premises servers, mostly 
within the Microsoft delivered products. Administrators 
control which patches will be downloaded from the 
Microsoft update services and which ones will get 
approved to be installed on the servers. Some patches are 
not applicable for specific implementation, or well-known 
issues with the patch would be business critical and 
prevent operating within a specific environment. This is 
when the administrator can approve the patches for test 
servers first and then approve the ones for production 
release. The best practice would be to have separate 
Windows Server Update Services services deployed for 
most sensitive services, including Active Directory.
Automatic updates with WSUS server and orchestrated 
with Azure update management: In bigger environments 
that do not use SCCM, the patching process can be overly 
complex and time consuming, so using the WSUS with 
Azure update management for orchestration can improve 
and minimize administrator effort. It requires using 
Microsoft update or WSUS server. Still, it provides the

central location from where to control the patching 
schedule and generates reports on which servers have the 
right patch level achieved. Automatic updates are 
configured to download the patch. Azure hybrid workers 
deployed on the Azure VMs and on-prem servers control 
the patch progress during the right configured 
maintenance windows.
We will not cover the deployment of those scenarios in this 
chapter. We will focus on configuring a specific domain 
controller using Microsoft update and WSUS services and 
on verifying that specific patches are installed on the 
server.
Let us try to check the settings on the server. We need to 
log in by RDP and start Update & Windows Updates from 
the settings menu; the configuration is shown in Figure 
7.35 and Figure

Figure 7.35: Windows Update status on a domain controller

. _ httpsv'/bst-1«ff58d-c223-4f80- X +
<- -> c a bst-1ccff58d-c223-4f80-a222-98db1796de21.bastion.azure.com/... □ & ☆ 
»==/[] A •
Settings 
—OX
tn> View configured update policies
Wondering why you're seeing 'Some settings are managed by your organization'?
This text is typically displayed on Windows Update after installation and delivery policies are configured.
»
Examples include:
• 
Your organization has set some policies to manage updates
• 
You have opted in for the Windows Insider Program
Policies set on your device
Automatically download updates and install them on the specified schedule 
Source: Administrator
Type: Group Policy
Set Automatic Update options
Source: Administrator
Type: Group Policy
Figure 7.36: Windows Update status on a domain controller
GPO manages some of the settings. When checking the 
details, it shows that the installation and download is 
automatic on a specified schedule and that the source of 
these settings is Group We applied the hardening policy, 
which could be why those settings are enforced here. Let 
us navigate the Group Policy Management Console to see 
the settings configured to manage the Windows updates. 
But when checking GPMC, local group policy editor and 
RSOP, there were no policy settings defined, as illustrated 
in Figure

Figure 7.37: Windows Update GPO settings
Following are the registry keys:
Computer
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windo 
ws\WindowsUpdate\AU are automatically added to the 
Azure VM build to support the settings for Azure automatic 
updates (download and install updates on schedule). There 
is no schedule defined, as shown in Figure 7.38 and Figure 

that is, illustrating the registry keys configured for the 
automatic updates:
Kttps://bst-1«ff58d-c223-4f80 X +
<- -> c a bst-1ccffS8d-c223-4f80-a222-98db1796de21.bastion.azure.c... B |^> ☆ 
* ==J □ X
ft*  Registry Editor 
File Edit View
-OX
Favorites Help
Computer\HKEY.LOCAL.MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU
» 
<
NetworkConnectivityStatu
*
 a 
NetworkProvider
-Q Personalization
i_j PowerShell
safer
SettingSync
[ SrPv2
System
Tack Scheduler
[ WcmSvc
Windows Search
WindowsUpdate 
AU
[ WinRM
Workplacejoin
[ WSOAPI
Windows Advanced Threat Pr<
Windows NT
WindowsFirewall
WindowsInkWorkspace 
v
>
Name 
Type 
Date
■Jb(Default) 
REG.SZ 
(value not set)
SttAUOptions 
REG.DWORD 
0x00000004(4)
M NoAutoUpdate REG.DWORD 
0x00000000(0)
< >
Figure 7.38: Windows Update registry settings

Figure 7.39: Windows Update registry settings
We can try to adjust it using the group policy and set up 
our settings. Let us try to set the automatic updates Every 
Saturday at 2AM and every Fourth week of the We do not 
touch the Install during automatic maintenance option as it 
is for client devices that will be patched outside of 
business hours. The device can be put on maintenance, 
which is not applicable for the servers as they need to be 
patched on specific schedule. The settings are shown in 
Figure

https7/bst-1ccff58d-c223-4f8C- X
O X
<- -> 0 i bst-1ccff58d-c223-4f«0-a222-98clb1796de21.bastion.azure.com/*/client/RENBWUPT1QwM... □ \$ & 
> 
□
Configure Automatic Updates 
0 X
B Confer. Auuxn.tieUpd.te, 
Previou, Sett.no NextSett.no
O Not Configured Co™™
*
Enabled
O Disabled
Supported on: FEndows XP Professional Service Pack 1 or At least Windows 2000 Service Pack 3
Option 7 only supported on servers of at least Windows Server 2016 edition
Options: 
Help:
Configure automatic updating: 4 * Auto download and schedule the install
The following settings are only required and applicable if 4 is selected.
Q Install during automatic maintenance
Scheduled install day: 
7 - Every Saturday
Scheduled install time: 02:00 
*
If you have selected '4 - Auto download and schedule the install" for your scheduled 
install day and specified a schedule, you also have the option to limit updating to a 
weekly, bi-weekly or monthly occurrence, using the options below:
Q Every week
Q First week of the month
□ Second week of the month
Q Third week of the month
0 Fourth week of the month
Specifies whether this computer will receive security updates and other 
important downloads through the Windows automatic updating service.
Note This policy does not apply to Windows RT.
This setting lets you specify whether automatic updates are enabled on this 
computer, it the service is enabled, you must select one of the tour options in 
the Group Policy Setting:
2 « Notify before downloading and installing any updates.
When Windows finds updates that apply to this computer, users will be 
notified that updates are ready to be downloaded. After going to Windows 
Update, users can download and install any available updates.
3 ■ (Default setting) Download the updates automatically and notify when 
they are ready to be installed
Windows finds updates that apply to the computer and downloads them in 
the background (the user is not notified or interrupted during this process). 
When the downloads are complete, users will be notified that they are ready to 
install. After going to Windows Update, users can install them.
OK | Cancel Apply
Figure 7.40: Windows Update status on a domain controller
Now when we run the gpupdate command to ensure that 
the hardening policy is refreshed on the server, there will 
be new registry keys created, including the schedule, and 
the results will be shown correctly inside the RSOP tool, as 
illustrated in Figure

Figure 7.41: Results of the GPO modification for Windows 
Update settings

Kerberos delegation setup and auditing
Active directory can use Kerberos as the authentication 
protocol, and the domain controllers are the Key 
Distribution Center servers. They can authenticate users 
and grant them with Ticket Granting Ticket and Ticket 
Granting Service access tokens. TGT tickets authenticate 
accounts in Active Directory, and TGS tickets grant access 
to specific resources.
Basic flow for getting access to resource would look like 
this:
Client requests the TGT ticket to domain controller
Domain controller issues the TGT ticket to the client
Client requests the TGS token with TGT ticket
Domain controller issues the TGS token to the client
Client sends TGS token to the resource server

Resource server grants access to resource base on TGS 
ticket
When there is delegation in place, the workflow can be a 
little different. When the service account is trusted for 
unconstrained delegation, then TGS ticket can be used to 
get the TGS ticket for other services without restriction.
The workflow looks like this:
Client requests the TGT ticket to domain controller
Domain controller issues the TGT ticket to the client
Client requests the TGS token with TGT ticket
Domain controller issues the TGS token to the client
Messages includes the TGT ticket and checks whether the 
desired service is trusted for unconstrained delegation
Client sends TGS token to the resource server
Resource server grants access to resource base on TGS 
ticket

Server can use the TGS ticket with the TGT ticket included 
and requests the TGS ticket on behalf of the previous 
account to access other services as this user
Server receives TGS ticket for other services and can 
utilize this access (provide SSO for user for back-end 
services or abuse it to generate Golden
That is why we should never use unconstrained delegation 
for services. It is required to be placed on domain 
controllers and read-only domain controllers. This should 
not be the case for other devices as it creates a huge 
security risk. Regardless of the best practices to set up and 
verify that the delegation is in place, we must check the 
Delegation tab or PowerShell script, as shown in Figure

Figure 7.42: Delegation settings for domain computers
All the domain controllers are trusted to delegate to other 
services, and by default, domain joined clients and users 
are not allowed to delegate to other services. When 
delegation is not set on domain accounts, the Delegation 
tab is not visible, so it is better to verify and set the 
settings in PowerShell, as follows:
#Audit all Computer accounts with Unconstrained 
delegation, create test computer
Get-ADComputer -filter {TrustedForDelegation -eq $true}
-Name TestComputer -SamAccountName TestComputer - 
Path "CN=Computers,DC=adpstest,DC=net"
#Audit all Users with Unconstrained delegation
Get-ADUser -filter {TrustedForDelegation -eq $true} 
#Get the delegation settings for different computers
Get-ADComputer -Identity DCAZROOT001 -pr * | select 
name,TrustedForDelegation,TrustedToAuthForDelegation,Pri 
ncipalsAllowedToDelegateToAccount | fl

#Get the delegation settings for different computers
Get-ADComputer -Identity TestComputer -pr * | select 
name,TrustedForDelegation,TrustedToAuthForDelegation,Pri 
ncipalsAllowedToDelegateToAccount |
#Set unconstrained delegation for computer account or 
user account
Set-ADComputer -Identity TestComputer - 
TrustedForDelegation $True
The results of this setup are shown in Figure

Figure 7.43: Setting up delegation for domain computer
object.
The second option is the constrained That is a much more 
secure option, but it has different risks. To delegate to 
specific services, we can set up the destination Service 
Principal Names of the resources we would like to have the 
right to delegate and account based on the TGS ticket.
Constrained delegation has two options available: Kerberos 
Only and Use any authentication Kerberos only option is 
secure and allows to delegate authenticated users on the 
services allowed for delegation to only request TGS tickets 
to services listed on the AllowedToDelegateTo attribute.

This can be used inside the front-end and back-end type of 
applications when the user context needs to be used while 
accessing data from the back-end solution.
The other option, Use any Authentication is called the 
protocol transition. It allows the service to authenticate 
users separately on the service application and then 
request the TGS tickets to list services in the 
AllowedToDelegateTo attribute. The problem is that 
authentication is performed by delegated service that 
verifies that the user is authenticated properly. Technically, 
service can impersonate any user inside the domain and 
request the TGS tickets on behalf of those users. Unless 
specific services require it and there is no other way, the 
Use any Authentication protocol should not be used as it 
generates potential security risks for the service.
To check and verify the Kerberos Only or Use any 
Authentication protocol delegation, we just need to check 
the SPNs for specific account that can delegate. There is 
no need to have any additional flag set for this to work. It 
can be verified and set up in PowerShell as follows:
#Audit all Computer accounts with Constrained delegation
Get-ADComputer -filter {msDS-AllowedToDelegateTo -like

#Audit all User accounts with Constrained delegation
Get-ADUser -filter {msDS-AllowedToDelegateTo -like
#Set contstrained delegation for computer account or user 
account - "Kerberos Only"
Set-ADComputer -Identity TestComputer -Add
Set-ADAccountControl -Identity TestComputer$ -
TrustedToAuthForDelegation $False
#Set contstrained delegation for computer account or user 
account -"Use any Authentication protocol"
Set-ADComputer -Identity TestComputer -Add
Set-ADAccountControl -Identity TestComputer$ -
TrustedToAuthForDelegation $True
#Audit all Computer accounts with Constrained delegation
Get-ADComputer -filter {msDS-AllowedToDelegateTo -like
The results are illustrated in Figure

■_ DCAZROOTOOI
X
O X
C fit bst-2aa0ba37-7f4a-44fb-ac62-a9a982e4d3e3.bastion.azure.com/*/cl... tJ 
M ~J L3 :
£3 Administrator. Windows PowerShell 
— 
□ X
•Audit all user accounts with constrained delegation 
Get-Aouser -filter (asDS-AllowedTooelegateTo -like
•Set contstrained delegation for coaputer account or
PS C:\windows\syst e«32>
PS C:\windows\systea32>
PS C:\window$\sy$te«32> 
’}
PS C:\windows\syste«32>
PS C:\windows\systea32>
user account - "Kerberos only"
PS C:\windows\systea32> Set-ADCowputer Identity TestCoaputer Add £{
*asDS-Al
 
lowedTooelegateTo Q(, ’ host/dcazroot001 ’, ’wskan/dcazrootoci . adpstest. net ’)}
PS C:\windows\systea32> Set-adaccountcontrol -Identity TestCoaputer! Trusted 
ToAuthForoelegation {False
PS C:\windows\systea32>
PS C:\window$\systea32> -Set contstrained delegation for coaputer account or 
user account -"use any Authentication protocol"
PS C:\window$\systea32> Set-ADCoaputer Identit) TestCoaputer -Add K'nsOS-Al 
lowedTooelegateTo' -$( ’HOST/DCAZROOTeei *,'wSKAH/DCAZROOTeei.adpstest.net *)}
PS C:\windows\systea32> Set-ADAccountControl -Identity TestCoaputerS -Trusted 
ToAuthForoelegation STrue
C:\Mindows\systea32>
fe C:\window$\systea32> -Audit all Coaputer accounts with constrained delegat 
ion
PS C:\Windows\systea32> Get-ADCoaputer filter {asOS-AllowedToOelegateTo -lik 
e —}
omputer Properties 
?
cation Managed By Object Security Oal-n Mntxjte Edr 
neral Operating System Member Of Delegation Password Repbcat
legation ts a secunty-sensrtive operation, which alows services to act on 
haf of another user.
1 Do not trust ths computer for delegation
1 Trust ths computer for delegation to any service (Kerberos only)
1 Truet the computer for delegation to opec/ied service
*
 only
Enabled 
: True
Maae 
: TestCoaputer
Objectclass 
: coaputer
ObjectGUlD 
: 5eiib3e5-c98f-46t)c-aic7-ee6ia98fcc6d
SaaAccountwaae : testcomputers
SIO 
: 5-1-5-21-3259212432-2766075878-3678214614-1^64)2
OU«e Kerberos only
(a) Use any authentication protocol
Services to which ths account can present delegated credentials
Figure 7.44: Setting up delegation for Domain Computer
The third option would be the resource-based constrained 
delegation. The difference in the approach is where you set 
up the delegation on the target resource. You allow other 
accounts inside the directory to delegate to specific 
accounts by setting the principal names inside the 
attribute:
msDS-AllowedToActOnBehalfOfOtherIdentify
That attribute is controlled by the
PrincipalsAllowedToDelegateToAccount switch in

PowerShell.
This generates a lot of security improvements and many 
risks. The only permission required is write permissions on 
the computer account attribute. When we have any service 
account specified on computer account, we can use that 
principle to utilize the protocol transition to create arbitrary 
TGS tickets with Use any Authentication protocol and then 
create TGS tickets for the resource configured with 
resource-based constrained delegation. We control which 
services we allow to be delegated but lose control of which 
users the service will impersonate. We must avoid having 
those delegations and monitor if some accounts are 
configured with this delegation.
To audit check and set the resource-based constrained 
delegation, we need to use PowerShell; this feature was 
introduced in the Windows server 2012 where PowerShell 
is available by default. The script will look as follows:
#Audit all Computer accounts with Resource-Based 
Constrained Delegation
Get-ADComputer -LDAPFilter
#Audit all User accounts with Resource-Based Constrained 
Delegation

Get-ADUser -LDAPFilter '(msDS-
AllowedToActOnBehalfOfOtherIdentity=
*)'
#Set Resource Based delegation for computer account
Set-ADComputer DCAZROOT001 -
PrincipalsAllowedToDelegateToAccount TestComputer$
#Audit all Computer accounts with Resource-Based 
Constrained Delegation
Get-ADComputer -LDAPFilter '(msDS-
AllowedToActOnBehalfOfOtherIdentity=
*)'
The results are illustrated in Figure

■_ DCAZROOTOOI
x
4- C B bst-2aa0ba37-7f4a-44fb-ac62-a9a982e4d3e3.bastion.azure.com/,’/cl... O ☆ 
© * —J O •
PS C:\windows\syste«32> 'Audit all Computer accounts with Resource-Ba 
sed Constrained Delegation
PS C:\windows\syste
*32>
 Get-ADCo«puter LDAPFliter ’(■sDS-AllowedToAc 
tOnOchalfOfOtbcr identity-")‘
PS C:\windows\syste
*32>
ps c:\windows\systea32> 'Audit all user accounts with constrained del 
egation
PS C:\Nlndows\systea32> Get-ADuser -LDAPFllter '(■sOS-AllowedToActOnB 
ehalfofotberidentity-')’
PS C:\windows\syste«32>
PS C:\windows\syste«32> •Set Resource Based delegation for computer a 
ccount
PS C:\windows\syste
*32>
 Set-ADCo«puter DCAZROOT001 PrincipalsAllowed 
ToOelegateToAccount TestCooputerf
PS C:\Hindows\syste«32>
PS C:\Nindows\systea32> 'Audit all computer accounts with Resource-Ba 
sed Constrained Delegation
PS C:\windows\systew32> Get-ADCo«puter -ldapfliter ’(■sDS-AllowedToAc 
jrtprBehalfOfOtheridentity.’)'
OistinguishedNaae 
DC-net
DfiSMostNaae 
Enabled 
\ane
Objectclass 
objectGuio 
SaaACCOuntNaae 
SID 
U$erPrincipalNa«e
: CN-DCAZROOTeei,ou.Doaain controllers,oc-adpstest.
: DCAZROoreei.adpstest.net 
: True 
: DCAZROoreei 
: computer
: es384eeb-72cd-4i7i-b«23-a9ed76ied856
: UOUKUUTUUIS
: S-1-5-21-3259212432-2766075878-3678214014■1001
DCAZROOTOOI Properties 
? J
General Operate^ Sjnem Member 0< Oelegaboc location
M^iaped 8y Object 
Seeurty 
Dialed 
AttntxXe Edtor
Awtsjtes
Ambule
Value
a
meCOMUeerPartbonSetlr
*
<notse(>
rm DRMkJenttyCertficate
cnotseo
ms DS-Addtonal DnsHost Name
cnot se<>
msDS-Addeonal SamAcaxrt Name
<notaet>
ImsDS-AlowedToActOnBehatfOfOtherWen
oh DS-AlowedTo DeiegateTo
cnot aet>
ms DS-Assgned Aah N Poky
<notse(>
msDSAsxgnedAuthNPotcySki
cnot set >
ma DS-AuthenbcaterM DC
cnot set >
ms DS-Cached-Membenhp
cnot set >
ms DS-Cached-Membenhp -Tine-Stamp
cnot set >
maOSCloudMchor
cnot set >
ms DS-doud Extension Attribute 1
cnot set >
ms DS-doud Extensa Actnbute 10
<not set:
V
<
>
Mew 
F«er
Figure 7.45: Setting up delegation for Domain Computer

Implementing tiering model
By default, Active Directory implementation is deployed 
such that it is suitable for both small organizations and big 
enterprises. It provides the medium security configuration 
which puts more workload on administrators to configure it 
securely.
It is important to perform security audits covering Active 
Directory delegation, domain controllers and member 
server hardening, legacy NTLM and Kerberos protocol 
settings. With a good patching process, we can ensure that 
the level of security will be constantly monitored and 
under control.
However, along with ease-of-use in Active Directory 
domains, there is a major problem in terms of secure 
management of the environment and splitting the 
responsibilities between different operations teams, like 
exchange, Active Directory, PKI, and client management. 
This is why Microsoft introduced the AD Tiering model. It is 
recognized as the legacy AD tier model, but if we discuss 
active directory itself without any other on-premises and 
cloud implementation of IAM and PAM tools and process, it 
should still be included. Deploying the Tiering model for AD 

makes a lot of sense and needs to be considered in every 
environment, regardless of the size.
Figure 7.46 illustrates the Microsoft Tiering model:
Figure 7.46: Setting up delegation for Domain Computer 
(Taken from Microsoft page)
Details on how Microsoft was implementing that model can 
be found inside MS documentation. Here is the link to the 
specific information about the Tiering Model:

https://learn.microsoft.com/en-
us/security/compass/privileged-access-access- 
model#evolution-from-the-legacy-ad-tier-model
In domain controllers and other servers that use or grant 
access to a domain, admin level of privileges is recognized 
as Tier 0 (Domain controllers, CA, MIM, ADFS, Azure AD 
Connect, IAM, CyberArk is just a vendor while PAM is the 
general area). As those servers are identified, their access 
must be strictly controlled. Admins for those servers 
(Domain Admins, MIM admins, and so on) cannot log in to 
Tier 1 and Tier 2 systems to avoid lateral movement 
attacks. Computer objects and access groups are created 
in separate Tier 0 OU and can be managed only by domain 
admins or equivalent.
Tier 1 infrastructure includes all other server infrastructure 
hosting the enterprise applications and data provided to 
the clients. Tier 0 should have custom deny access policy 
on those servers so that only Tier 1 admins can access 
them. All management computer objects, and access 
groups are created inside the Tier 1 OU structure and can 
be managed by delegations to Tier 1 management 
principals and teams. This ensures that there is no easy 
path from the Tier 2 to Tier 1 and then to Tier 0 
infrastructure using lateral movement attacks.

Tier 2 contains all infrastructure that clients and end users 
use. That includes laptops, printers, mobile devices, and 
others used by end users. We need to ensure that it is 
properly secured, all delegation is in place and that we are 
not using Tier 0 Admins on those devices, as we can 
expose credentials to devices that can be easily targeted. 
All management objects need to be created in separate 
Tier 2 OU, and delegation is performed for the respective 
Tier 2 management team.
Microsoft no longer publishes the necessary scripts, but 
they are published at this GitHub Repository:
By executing the following PowerShell commands, we will 
create the structure illustrated in Figure
Create-PAWOUs.ps1 and Create-PAWGroups.ps1

Figure 7.47: Tiering model structure creation by Microsoft 
provided PowerShell scripts
The structure can differ and can be adjusted to meet the 
needs of the organizations implementing the model. Still, 
the concept stays the same: splitting the different tiers, 
delegating access to specific teams and making sure the 
domain structure is managed properly.

Conclusion
Keeping Active Directory in a secure state is crucial for 
compliance and security. It is important to understand 
that there is no perfect implementation of active 
directory at this moment. It is the best approach that 
the level of security in managed AD environment would 
be ever satisfying and constant push for the security 
improvements is recommended.
When an environment is deployed, it is best to clean the 
deployment access from the team and tools that 
provisioned the servers and principals, as they will not 
be responsible for managing the environment going 
forward. When the environment ages, it is extremely 
difficult to keep track of every delegation and admin 
access being provisioned. Hence, the audit must be 
performed periodically on the service.
External audit cannot always be used, so we could use 
PowerShell to create ACLs reporting for all Active 
Directory structure, and we could create report resultant 
state of policy for domain controllers and member 
servers to see what hardening settings are applied to

the systems. Even one misconfigured setting on a single 
domain controller, sensitive device, or server can be a 
root entry to the entire Tier 1 or Tier 0 infrastructure.
Applying the right hardening level to the systems is 
extremely difficult, as it could break the existing 
production workload. Every change in the existing 
environment must be evaluated and verified by the 
change management teams. When creating new 
environments, it is better to apply the highest hardening 
setup possible and then provide with exceptions, if 
required to allow specific applications to be running 
without problems.
The next chapter will review the use cases for Active 
Directory monitoring. We will check what is important to 
monitor in terms of the infrastructure and monitoring­
specific AD process status, like services, replication and 
SYSVOL. We will also learn on how to implement a global 
monitoring solution that could be used to monitor AD 
services inside a global organization.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release

and Sessions with the Authors: 
https://discord.bpbonline.com

C 
HAPTER
8
Monitor Active Directory

Introduction
Active Directory is a central store for users and 
computer device objects used for authentication in most 
organizations. There are benefits and downsides to the 
criticality of Active Directory. The benefit is that if 
anything is wrong with Active Directory availability, 
performance, or configuration, users can report the 
issues immediately after they start or with only small 
delays.
Services like Active Directory need to be closely 
monitored by administrators to help and support the 
reactive troubleshooting of problems and to support 
initiative-taking actions on the Active Directory 
environment. We could use the performance counters 
and event logs for both scenarios to collect information 
about the potential problems in the AD hosted on 
Windows servers.
For complete monitoring of the AD environment, it is 
necessary to collect the data from every domain 
controller and store it in one central management, 
which can be used to view this information, show the

trends charts, and trigger events based on specific 
criteria. To achieve this, we can use a custom solution 
that will collect even logs, System Centre Operations 
Manager product delivered from Microsoft, and some 
new Azure Monitor features that support both on-prem 
and Azure VMs.
Each solution implementation needs an understanding 
of which information must be collected on the domain 
controllers and enable the right level of log collection.
In this chapter, we will look at how to evaluate single 
domain controller health, measure server performance, 
and implement global Active Directory monitoring using 
one of the recommended solutions. Azure Monitoring 
can be used in smaller organizations when 
implementing health checks on a couple of DCs and in 
bigger environments when we need to support 
ourselves with an automated global solution.

Structure
In this chapter, we will cover the following topics:
Monitor critical AD services
DCDIAG and PowerShell
Replication status
Event monitoring
Performance monitoring
Scheduling tasks for monitoring
Implementing global solution for AD monitoring

Objectives
The objective of this chapter is to help you get familiar 
with operational monitoring concepts for core 
infrastructure service like Active Directory. After 
completing this chapter, you should know how to verify 
the status of Active Directory, implement basic 
monitoring, and integrate log collection with cloud 
monitoring solutions like Azure Monitor.

Monitor critical AD services
Before we can check how we can monitor Active Directory- 
related services, we need to identify which services are 
required for Active Directory to operate properly. When we 
go through the list of services presented in the 
services.msc console, we can identify the first two Active 
Directory-related servers:
Active Directory Domain Services
Active Directory Web Services
The next ones that are critical to SYSVOL replication would 
be as follows:
DFS Namespace
DFS Replication
If we are running Active Directory with integrated DNS, the 
crucial service would be the DNS server (DNS).

As every domain controller in the environment also serves 
as an authentication server for the Kerberos Protocol, a 
critical service to monitor for that aspect would be as 
follows:
Kerberos Key Distribution Center
To support Windows authentication, both on client’s 
servers and the domain controllers the service called 
Netlogon (NETLOGON)
If we are using different softwares and tools on the domain 
controller, like third-party antivirus, endpoint security 
agents and monitoring, all those agents, in most cases, run 
as Windows services. They are crucial in ensuring that they 
are running properly, so they should be included in the 
monitoring list.
We could simply navigate to the services.msc tool to verify 
that those services are running properly and check their 
status one by one, as illustrated in Figure

_ DCAZROOTOOI 
X +
<- -> C B b4t-414332f1-2141-4a93-9c20-563c81d172e9.bMtio<kazure.com/#/client/RENB... O 
> □ X •
Active Directory Domein Services Properties (Loe
*!
 Computer) X
LogOn Recovery Dependences
Service name 
NTDS
Dsplay name 
Active Directory Doman Services
DesoxXion 
DS Doman Controler service f ths service is a
stepped users M be unable to I09 on to the v
Path to executable
C \Wndows\System3Z4sass exd
Startup type Automate
Service status Rmnng
Stop
You can speefy the start parameters that apply when you start the service
Freni here.
Start parameters
- -
□ X
Marne
Active Directory Domain Services
&. Active Directory Web Services 
ActiveX Installer (AxInstSV) 
AlUoyn Router Service
<4^1 App Readiness
Application Identity
Application Information
Application Layer Gateway Service 
Appfccaho
*
 Manxmen,
£^AppX Deployment Service (AppXSVC) 
Auto Time Zone Updater
•£?: Background Inteiigent Transfer Service 
Background Tasks Infrastructure Service
zas - 
- . . 
- -
Description Status
AD DS Dom... Running 
This service _ Running 
Provides Ds,.-
Rcutes AlUo...
Gets apps re...
Determines... Running
Facilitates U. Running 
Provides su.^
P*0<«fW
 in.
Provides inf.., Running 
Automatica...
Transfers fil— Running
Windows irk.. Running
Startup I A 
Automat 
Automat 
Disabled 
Manual ( 
Manual 
Automat 
Manual { 
Manual
ULyri^yl
Manual ( 
Disabled 
Automat
Automat v
<
>
Figure 8.1 : Checking the AD service status in services.msc
When logging in to domain controller and trying to 
troubleshoot the already identified service, checking in the 
services console is a good solution. However, we do not 
really know which service could be having problems which 
would require us to scan through those services quickly 
using a specific PowerShell command:
Get-Service NTDS
Then we can combine this and the related services with 
one command:

Get-Service NTDS,ADWS,DFS,DFSR,DNS,KDC,NETLOGON
The output of this command is illustrated in Figure
H DU2R0GTW1 
X +■
<- -> c ft M-4143J2f1-2l41-4^i-9c20-St3«81dl72rtAMt>CiMBur».KiiV
*/di
*rtVfiENa..
 □ £r ft □ i
fX Admiiw.hHolt WruM'.rt fawftShtll 
— 
□ X
Running.
NTDS
Act1we Directory Domain Ser-vic be
P5 C:\Hlndons\system31> Get - service NTDS,ADWS,OF5.DF SR,DNS r KOC.NETIOGON
Status
Name
DisplayWame
Running
AOWS
Active Directory Web Services
Runni ng
rips.
r>FS bane space
Running
OF SR
OFS Replication
Running
IMS
MS Server
Running
KOC
Kerberos Key Distribution Center
Running
NftlOfOft
MOUm
Aunning NTDS
PS € ■ \Winctaws\&ystem32> _
Active Directory Do«»in Services
Figure 8.2 : Checking the AD services status using
PowerShell
We can check the status of the services, but what about 
the events related to AD related services that happened in 
the past, as we would like to know when or what exactly 
was happening. This is when we can use the event viewer 
to see logs related to the services we want to verify.

To check on this, we need to navigate to the eventvwr.msc 
tool and navigate to the system log. Inside that log, events 
related to services can be filtered using the filter and 
choosing the Service Control Manager source, as shown in 
Figure 8.3 and Figure
Figure 8.3: Checking the service modification logs in Event 
Viewer

/ Filtered: Log: System; Source Service Control Manager.
>>
Event 7036, Service Control Manager
General Details
The gpsvc service entered the running state.
Copy
Creates a filter.
Log Name 
Source
Logged:
Task Category;
Keywords:
Computer
Service Control Manager 
7036
Information
N/A
Info
System
Service Control Manager Logged:
Log Name 
Source 
Event ID:
Level:
Usee
Opcode
More Information: Event Log Online Help
Id I Event Properties - Event 7036, Service Control Manager
General Detail
*
> 
Custom Views
v 
Windows Logs
f] Application
fl Security
□ SetuP
fl System
(~] Forwarded Events
> ?l Applications and Services Lo 
Subscriptions
Level 
©Information 
© Information 
i) Information 
© Information 
©Information 
©Information 
© Information
Date and _ 
12/26/202... 
12/26/202... 
12/26/202­
12/26/202— 
12/26/202­
12/26/202­
12/26/202-
Source
Service Control Man...
Service Control Man...
Service Control Man...
Service Control Man...
Service Control Man...
Service Control Man...
Service Control Man...
Figure 8.4 : Checking the service modification logs in Event
Viewer
As we can see in Figure NTDS service started at a specific 
time when many services were started on the server boot. 
The same listing of events can be performed using 
PowerShell. To be able to list all events inside the system 
even log, we can execute the following command:
Get-WinEvent System

The output will not be easy to understand as it will contain 
a lot of events, so for the event viewer approach, we need 
to filter the exact events we would like to query:
Get-WinEvent Control Manager' }
And then we need to check the specific details for the 
required service:
Get-WinEvent -FilterHashtable Control Manager' } | where - 
like
The output of the previous command is illustrated in Figure
Mi DCAZROOTOOI 
X +
<- -» C 8 bst-414J32f1-2141-4a93-9c20-563c81d172e9.bastionjzure.eom/#/client/RENBWUPT1Qw... □ 
ft > □
— :
Ldminktrator Windows PowerShell
- 
□ X
:\Windows\system32> Get-WinEvent -FilterHashtable ${LogName-
*System
 *;  ProviderName Service Control Manager
*
 
where {(.message -like "•NTDS
*"}
roviderNane: Service Control Manager
Created 
Id LevelDisplayName Message
5/2022 10:07:16 PM 
7036 Information 
The 
NTDS service entered the running state.
1/2022 10:14:24 PM 
7036 Information 
The 
NTDS service entered the running state.
3/2022 10:21:10 PM 
7036 Information 
The 
NTDS service entered the running state.
5/2022 2:59:12 AM 
7036 Information 
The 
NTDS service entered the running state.
5/2022 9:02:19 PH 
7036 Information 
The 
NTDS service entered the running state.
1/2022 11:49:00 PM 
7036 Information 
The 
NTDS service entered the running state.
0/2022 9:43:32 PM 
7036 Information 
The 
NTDS service entered the running state.
fiS)22 10:47:05 PM 
7036 Information 
The 
NTDS service entered the running state.
*2022 10:50:26 PH 
7036 Information 
The 
NTDS service entered the running state.
^2022 9:23:46 PM 
7036 Information 
The 
NTDS service entered the running state.
K2022 10:01:53 PM 
7036 Information 
The 
NTDS service entered the running state.
v2022 9:49:59 PM 
7036 Information 
The 
NTDS service entered the running state.
3/2022 10:40:54 
PM 
7036 Information 
The 
NTDS service entered the running state.
b/2022 10:20:16 
PM 
7036 Information 
The 
NTDS service entered the running state.
3/2022 10:24:09 
pm 
7036 Information 
The 
NTDS service entered the running state.
7/2022 5:28:52 PM 
7036 Information 
The 
NTDS service entered the running state.
5/2022 10:27:41 
PM 
7036 Information 
The 
NTDS service entered the running state.
p/2022 10:00:11 
PM 
7036 Information 
The 
NTDS service entered the running state.
v2022 11:09*41  PM 
7036 Information 
Th© 
NTDS service entered the running state.
Z2022 9:58:13 PM 
7036 Information 
The 
NTDS service entered the running state.
|/2022 11:99:15 PM 
7036 Information 
The 
NTDS service entered the running state.
A
V
Creates alike
*.
OK | Canct

Figure 8.5 : Querying AD service-related events using 
PowerShell

DCDIAG and PowerShell
Even if all Active Directory-related services are running on 
the domain controllers, Active Directory state or at least 
the specific domain controller state can be unhealthy. If 
clients cannot communicate with Active Directory, we will 
start to experience user logon and authentication issues.
When we start seeing the customers complaining, we do 
not see any Active Directory domain controllers offline, and 
all their services are running okay, we need to start 
troubleshooting if our domain controllers are running 
without any problems. If we get some indications where 
the issue is, that is, users and devices from specific 
domain and location, Europe, for example, are 
experiencing problems, we can focus on servers that 
support that specific group of customers.
One way of checking on issues that domain controllers 
could have is using Domain Controller Diagnostic DCDIAG 
is a tool containing a set of diagnostics tests built into 
Windows server starting 2008 and available with ADDS and 
ADLDS services. We can verify different Active Directory 
service and domain controller status when running these 
diagnostics.

Details of the DCDIAG command syntax can be found here: 
https://learn.microsoft.com/en-us/previous-
versions/windows/it-pro/windows-server-2012-r2-and-
2012/cc731968(v=ws.11)
To start basic domain controller assessment, we need to 
run the following command with administrative 
permissions:
dcdiag
DCAZROOT001 is the server’s name, and the parameter is 
not required if command is running on the specific domain 
controller.
Results of the command executed on the root domain 
controller are illustrated in Figure 8.6 and Figure

■ CCAZROOTOOI
□ X
C 6 bst f4d17001 002c 4d68 abc6 1113ccbd271c.bastion.ozurc.eom/#/dicnt/RENBWUPT1Qw... t) |£ ☆ M ~J [J i :
£9 Administrator. Windows PowerShell 
— O X
PS C:\Windows\system32> dcdiag /s:DCAZROOT001
Directory Server Diagnosis
Performing initial setup:
• Identified AD Forest.
Done gathering initial info.
Doing initial required tests
Testing server: WEEUei\DCAZROOT001
Starting test: Connectivity 
.................................................. DCAZROOTQ01 passed test Connectivity
Doing primary tests
Testing server: WEEUei\DCAZROOT0Ol
Starting test: Advertising 
.................................................. DCAZROOT001 passed test Advertising
Starting test: FrsEvent
........................................................ DCAZROOT001 passed test FrsEvent
Starting test: DFSREvent
There are warning or error events within the last 24 hours after the SYSVOL has been shared. Failing SYSVOL 
replication problems may cause Group Policy problems.
.......................................................... DCAZROOT001 failed test DFSREvent
Starting test: SysVolCheck
.......................................................... DCAZROOTO01 passed test SysVolCheck
Starting test: KccEvent
A warning event occurred. EventID: 0x8000061E 
Time Generated: 12/29/2022 
23:37:21
Event String: 
All directory servers in the following site that can replicate the directory partition over this transport a
Figure 8.6 : DCDIAG output for domain controller test

■■ DCAZROCTOOI 
X +
<- -> C i bst-f4d17001-002e-4d68-abe6-1113ccbd27le.bastion.azure.com/#/client/RENBWlJPT1Qw... D l£? ☆ 
> 
□ X •
I£9 Administrator Windows PowerShell 
—OX
Starting test: KnowsOfRoleHolders 
.................................................. DCAZROOTGOl passed test KnowsOfRoleHolders 
Starting test: MachineAccount 
.................................................. DCAZROOTGOl passed test MachineAccount
Starting test: NCSecDesc 
................................................... DCAZROOTGOl passed test NCSecDesc 
Starting test: NetLogons 
................................................... DCAZROOTGOl passed test NetLogons 
Starting test: ObjectsReplicated
.......................................................... DCAZROOTGOl passed test ObjectsReplicated
Starting test: Replications
[Replications Check,DCAZROOTGOl] A recent replication attempt failed: 
From DCAZAP0O1 to DCAZROOTGOl 
Naming Context: DC-ForestDnsZones,DC-adpstest,DC-net 
The replication generated an error (8S24): 
The DSA operation is unable to proceed because of a DNS lookup failure. 
The failure occurred at 2622-12-29 21:45:19.
$5 
The last success occurred at 2022-10-14 21:59:33.
44 failures have occurred since the last success. 
The guid-based DNS name 99f3fdd6-6c8c-4f54-8aad-5e5acfd260a3._msdcs.adpstest.net 
is not registered on one or more DNS servers.
[Replications Check,DCAZROOTGOl] A recent replication attempt failed: 
From DCAZEU001 to DCAZROOTGOl 
Naming Context: DC-ForestDnsZones,DC-adpstest,DC-net 
The replication generated an error (1256): 
The remote system is not available. For information about network troubleshooting, see Windows Help. 
The failure occurred at 2022-12-29 23:00:30.
The last success occurred at 2022-11-28 23:26:05. 
58 failures have occurred since the last success. 
[DCAZEU0O1] DsBindWithSpnEx() failed with error 1722, 
The RPC server is unavailable..
[Replications Check,DCAZROOTGOl] A recent replication attempt failed:
Figure 8.7 : DCDIAG output for domain controller test
In the lab scenario, servers from domains other than the 
one we executed the command from could be stopped and 
unresponsive due to the cost savings. That is why Figure 
8.9 shows that most tests are fine, but the Replication 
tests and KCC tests are failing.
This is because the replication with different Global 
Catalogs Domain Controllers is failing, and Knowledge 
Consistency Checker cannot rebuild the topology for re­
enabling the replication. So, if we see something similar in 
the production environment, the issue is happening on 

different domain controllers that we run the DCDIAG tool 
against.
Other important tests to run are the DNS tests that are 
partiality included in the main execution, but not all of 
them. To execute the DCDIAG DNS tests, we need to 
execute the following command:
dcdiag
The results of the DCIAG DNS tests are illustrated in Figure 
8.8 and Figure
« DCAZROOTOOI 
X 4*
<- -> C ■ bst-f4dl700l-002»-4d68-ab
*6-1113ccbd27W.bMbon.
*zur<xom/
*/clenVRENBWUPT1Qw...
 O & ft fr =f □ X ;
I&W Admirustr
*tor
 •'/indc AS PowefShei 
—OX
PS C:\Windows\sy$tem32> dcdiag /test:DNS /$:DCAZROOieei
Directory Server Diagnosis
Performing initial setup:
• Identified AD Forest.
Done gathering initial info.
Doing initial required tests
Testing server: WEEUdlVDCAZROOTOOl
Starting test: Connectivity 
................................................... DCAZROOieei passed test Connectivity
Doing primary tests
Testing server: WE6Uei\DCAZROOTeei
Starting test: DNS
DNS Tests are running and not hung. Please wait a few minutes... 
.......................................................... DCAZROOieei passed test DNS
Running partition tests on : ForestDnsZones
Running partition tests on : DornainDnsZones
Running partition tests on : Schema
Running partition tests on : Configuration
Running partition tests on : adpstest

Figure 8.8: DCDIAG DNS tests results
Figure 8.9: DCDIAG DNS tests results
As we can see, the status of the DNS dcdiag is mostly 
successful, but it mentions a few things regarding the 
dynamic IP address of the network adapter that is not 
recommended in standard DNS deployments. The biggest 
problem detected is that the delegation to the AP domain 
is failing, and it fails as the AP domain controllers are 
powered off in this lab scenario. If we see these results in 

the production environment, we need to check the AP 
domain controller.

Automatizing DCDIAG using PowerShell
Results of the command are not the easiest to parse, 
especially if we are not experts in batch scripting. It is a 
clever idea to run dcdiag tests inside PowerShell if we want 
to automate even more closely. First, we would need to 
capture the results in a variable:
$DCDiagResults = dcdiag
We could then start matching specific strings for the 
results we would like to achieve, so it could be something 
like this:
$DCDiagResults = dcdiag
Foreach($Line in $DCDiagResults) {
-like "*failed
 test
*"
 $line -like "*passed
"$($line.split(' ')[10]) $($line.split(' ')[11]) $($line.split(' ') 
[12])"
}}

The results are illustrated in Figure
Figure 8.10: DCDIAG results parsed by PowerShell
We can use this and map the outputs into the object 
properties if needed and then try to operate on those 
results if required. For example, we will discuss it in detail 
when building the central monitoring scenarios, at the end 
of this chapter.

Replication status
Even if all the servers are running within the domain or 
forest, there is a need to verify that the replication is 
occurring. It depends on network connectivity working 
properly, without disconnections and with proper 
bandwidth. Active Directory is distributed service, which 
heavily depends on replication to function without 
problems.
In a bigger environment, when we use multiple domains 
inside the forest as well, we have multiple domain 
controllers in different data centers and cloud regions, and 
we need to make sure the replication between those 
domain controllers is running without problems. Otherwise, 
different type of behaviors will be seen, including missing 
users, out of date group membership and heavier usage of 
the PDC due to password replication not happening 
between different domain controllers.
Replication with the same Active Directory site happens 
instantly. When modifying or creating objects on one 
domain controller from that site, it replicates to the other 
domain controller within seconds if no replication issues 
occur.

One part of the AD data synchronization is the directory 
replication, and the other part is the SYSVOL replication. 
SYSVOL replication is important mostly for the user logon 
process and scripts group policies. Ensuring that SYSVOL is 
replicating properly will ensure no slowness when applying 
the group policies, missing GPOs to the users and 
computers, and the most updated policies.
We know that replication is crucial to Active Directory, so 
Microsoft supplies various tools to verify that it is running 
without any problems. To verify the status of the directory 
replication, we can use the repadmin tool. You can learn 
more about the syntax of the command in the following 
Microsoft documentation:
https://learn.microsoft.com/en-us/previous- 
versions/windows/it-pro/windows-server-2012-r2-and- 
2012/cc770963(v=ws.11)
To show the basic status of the replication, we will execute 
the following command: 
repadmin

The preceding command will show the status of this 
domain controller’s source and destination connections. If 
there are any problems, it will show the error messages 
and the cause of the problem. The results of the command 
are illustrated in Figure
■ DCAZROCTOOI 
X +
-> C ft b$t-0ca26603-db0e-468c-920c-8b1d5cee33c2.bastion.azure.conr)/
*/cl»ent/RENBWUPT1QwMDEAYwB»a...
 □ [£? 
=7 □ X ;
a Administrator Windows PowerShell 
—OX
PS C:\Windows\system32> repadmin /showrepl
Repadmin: running command /showrcpl against full DC localhost 
NEEU01\DCAZROOT001 
DSA Options: IS_GC 
Site Options: (none)
DSA object GUID: 7b88dSfl-191d-441e-b08d-0d47f6cfS969
DSA invocationlD: Iba9606b-969a-48fa-bad4-c94974fa6df0
—— INBOUND NEIGHBORS ——...........
CN-Configyration,DC-adpstest,DC-net 
ceinoixdcazapwi via rpc
DSA object GUID: 99f3fdd6-6c8c-4fS4-8aad-5e5acfd260a3 
Last attempt & 2822-12-30 23:51:33 was successful.
wEEuei\DCAZEueei via rpc
DSA object GUID: ldb4dleS-e7a8-4f6d-9221-23669312S518 
Last attempt 0 2822-12-30 23:56:08 was successful.
CN-Schema,CN-Configuration,DC-adpstest,DC-net
fl- CEIN01\DCAZAP001 via RPC
DSA object GUID: 99f3fdd6-6c8c-4fS4-8aad-5e5acfd260a3 
Last attempt £ 2022-12-30 23:51:33 was successful.
WEEU01\OCAZEU001 via RPC
DSA object GUID: Idb4dle5-e7a8-4f6d-9221-236693125518 
Last attempt 0 2022-12-30 23:52:20 was successful.
DC-ForestDnsZones,DC-adpstest,DC-net 
CEIN01XDCAZAP0O1 via RPC
DSA object GUID: 99f3fdd6-6c8c-4f54-8aad-5e5acfd260a3 
Last attempt £ 2022-12-30 23:51:33 was successful.
WEEU01XOCAZEU001 via RPC
DSA object GUID: ldb4dleS-e7a8-4f6d-9221-236693125S18 
Last attempt £ 2022-12-38 23:52:20 was successful.
DC-eu,DC-adpstest,DC-net 
CEIN01\DCAZAP001 via RPC
DSA object GUID: 99f3fdd6-6c8c-4fS4-8aad-5e5acfd260a3 
Last attempt £ 2022-12-3O 23:51:32 was successful.
WEEU01XDCAZEU001 via RPC
Figure 8.11 : Replication status information provided by
repadmin
As we can see, all the connections are replicated fine, and 
there are no issues with the current replication. So, if we 

had replication problems recently and received an incident 
to troubleshoot AD replication and they were resolved 
already, we could use other command to verify the recent 
replication status. For this kind of information, we could 
use the /replsummary parameter and the command as 
follows:
repadmin
When running we will receive information about the recent 
replication requests, the percentage of them failing, and 
the largest delta between successful replications. 
Interesting findings can be spotted as a result of this 
command being executed in the lab environment prepared 
for this chapter’s purpose. Results of the mentioned 
command are illustrated in Figure

■ DCAZROOTOOI
n
X
C 8 bst-0ca26603-db0e-468c-920c-8b1d5cee33c2.bastion.azure.eom/#/... □ & ☆
a Administrator Windows PowerShell
G X
PS C:\Windows\system32> repadmin /replsummary 
Replication Summary Start Time: 2622-12-31 60:09:43
Beginning data collection for replication summary, this may take awhile:
Source DSA 
DCAZAP001 
DCAZEU001 
DCAZEU002 
DCAZROOT001
largest delta
>60 days
17m:23s
67m:29s
61h:17m:08s
fails/total %%
error
(5) Access is denied
5 /
0 /
0 /
1 /
10
17
12
10
50
0
0
10
(5) Access is denied
Destination DSA
largest delta
fails/total &
error
DCAZAP001
0Sm:57s
0 /
10
0
SScAZEueei
01h:17m:0Ss
1 /
12
S
(S> Access Is denied
DCAZEU002
>60 days
S /
17
29
(5) Access is denied
DCAZROOT001
17m:23s
0 /
10
0
PS C:\Windows\system32> _
Figure 8.12 : Replication summary information provided by 
repadmin tool
We see that most of the recent replication was successful, 
but some failed due to denial of access, which can be 
caused by the server not being online for long and trust 
problems and time skew issues. We see that the largest 
delta for some of the domains are more than 60 days, 
indicating that the time between successful replication and 
the failed ones is huge; this is because some of the servers 
were powered off when not used.

We should not power off domain controllers for more than 
maintenance Windows required, as keeping them offline 
for more than a couple of days can cause serious problems 
with explain what the process is process of specific objects 
in Active Directory, especially if it is more than 30 and 
close to 60 days. It is only acceptable inside sandbox 
environment when doing experiments and testing.
One small test that could be executed and that shows 
details of the current replication performance and number 
of changes not yet replicated to other domain controllers is 
as follows:
repadmin
This command will show the value that should be close to 
zero because it indicates that there are no pending 
replications to be processed, and everything is up to date 
with the replication partners. Even if the value is not zero, 
we just need to monitor whether the value will keep 
increasing or will decrease when we re-execute this 
command. The results are illustrated in Figure

■ OCAZROOTOOI 
X +
<- -> C ■ bst-0ca26603-db0e-468<-920c-8b1d5cee33c2.bastion.azure.com/e/._ B & ☆ ft =/ [] X ;
B Administrator: Windows PowerShell 
—OX
PS C:\Windows\system32> 
M
PS C:\Windows\system32> repadmin /queue
Repadmin: running command /queue against full DC localhost 
Queue contains 0 items. 
M|
PS C:\Windows\system32> repadmin /queue
Repadmin: running command /queue against full DC localhost 
Queue contains 0 items. 
Ml
PS C:\Windows\system32> repadmin /queue
Repadmin: running command /queue against full DC localhost 
Queue contains 0 items. 
M
s 
■
PS C:\Windows\system32>
Figure 8.13 : Replication queue information provided by 
repadmin tool
Based on the actions we performed, all replications seem 
to be running okay on this specific domain controller. If 
there are replication problems inside the directory, we 
should try to target other servers for troubleshooting.
If we do not see any directory replication issues, we must 
verify that SYSVOL is replicating properly. We could utilize 
the Get-DfsrState command from the DFSR module, but we 

need to first install it on the system as it is not part of 
standard RSAT AD tools:
Then, we can execute the following:
Get-DfsrState | select
FileName,Inbound,UpdateState,SourceComputerName
The mentioned command is able to check if there are 
some files pending to be transferred from one of the 
servers to another using DFS Replication If the command 
returns empty, it would indicate that there are no pending 
files to be replicated or that the DFS service has other 
problems that cannot be verified using that command. The 
results of properly running DFSR replication are illustrated 
in Figure which shows no pending files in the queue:

Figure 8.14: Checking the SYSVOL replication state using 
PowerShell commands

Event monitoring
Initiative-taking monitoring of Active Directory 
environment heavily depends on the events created by 
AD-related services. Most monitoring systems for Windows 
are agent based, and they collect event logs and send 
them to the central system, which can create alerts based 
on some specific defined rules.
To monitor the Active Directory operational health state, 
we need to focus on collecting event logs related to the 
services crucial to Active Directory operations. The list of 
the most important ones is as follows:
System: This is an event log related to the core system 
functionalities.
Application: This event log is related to applications and 
features that are installed on the system.
Directory service: This event log collects events related to 
the AD related services.

DFS replication: This event log contains logs related to the 
DFSR service responsible for SYSVOL replication.
Active Directory Web Services: This event log contains 
events related to the ADWS service that provides the web 
interface for PowerShell and AD Administrative Center.
DNS server: This event log collects events related to the 
DNS service integrated with AD.
Setup: This event log provides information about the 
installations, patching and other related events.
Collecting all the preceding events should cover most of 
the required events to provide operational monitoring of 
Active Directory.
AD is also a security services, and to fully monitor all 
events, we would need to include the event log:
Security: This event log contains all the security-related 
events, including logons, password attempts, Kerberos, 
Netlogon, file, and share access.
To ensure that all necessary events are collected in the 
security log, auditing must be enabled inside the Audit

Policy settings in the GPO that will be linked to the Domain 
Controllers OU. Settings that need to be configured are 
illustrated in Figure
Figure 8.15: Enabling logon auditing for Active Directory
Despite the number of logs that will be generated inside 
Active Directory environment, auditing for at least logon 
events to be present to be able to trace the standard or 
suspicious login attempts using Active Directory accounts.
Once we understand what information we would like to 
collect, we can set up our log collector agent configuration 

to gather this information and make it available to our 
monitoring system. If we want to check the events directly 
inside event viewer, we can just browse the console and 
start finding information that interests us inside specific 
event logs. Figure 8.16 and Figure 8.17 illustrates how we 
can find information about AD service potential errors:
~ DCAZROOTOO! 
X +
<- -> C bst-f690c66a-eaa4-4b7a-a0e6-b9c8cfe1aa34.bastion.azure.com/*/client/RENBWIJP... □ 
□
Q Event Viewer 
—OX
File Action View Help
* 
£ S3 Q E)
r Active Directory D * 
r )NS Server 
T Remote Desktop S
T Administrative Events
v Windows Logs
|T] Application 
Security
n
0 System
[ | Forwarded Events
v 3 Applications and Services 
0 Active Directory Web
> CloudBackup
>> (Tj DFS Replication
(7] Directory Service
El DNS Server
[7] Hardware Events
i. j Internet Explorer
[71 Key Management Ser
> [3 Microsoft
> ui MicrosoftAzureRecov
> L3 OpenSSH
[. Operations Manager
[7] Windows Azure
0 Windows PowerShell
, ■ Subsenptions 
v
Directory Service Number of events: 2,112
^7 Filtered: Log: Directory Service: Level: Error Source . Number of events: 492
Level
Date an...
Source
Event ID
Task Categ...
A
L' 2 Error
12/30/2...
ActiveDirectory.Dom...
1311
Knowledg... 1
U Error
12/30/2...
ActrveDirectory_Dom...
1311
Knowledg...
4) Error
12/30/2...
ActiveDirectory.Dom...
1311
Knowledg...
0 Error
12/30/2...
ActiveDirectory.Dom...
1311
Knowledg...
Error
12/30/2...
ActiveDirectory.Dom...
1311
Knowledg...
O Error
12/30/2...
ActiveDirecto ry_Do m...
1864
Replication
O Error
12/30/2..,
ActiveDirecto ry.Do m...
1861
Replication
O Error
12/30/2...
ActrveDirecto ry_Do m...
1864
Replication
V
Event 1311, ActiveDirectory.DomainService 
X
General Details
The Knowledge Consistency Checker (KCC) has detected problems with the following direct 
partition.
Log Name Directory Service
Source 
ActiveDirectory.DomainServ Logged: 
12/30/2022 11:42:22 PM
Event ID: 
1311 
Task Category: 
Knowledge Consistency C
Level: 
Error 
Keywords: 
Classic 
v
Actions
Directory Service 
A A
Open Saved Log...
▼ Create Custom Vie- 
Im port Custom Vie- 
Clear Log...
Filter Current Log...
Clear Filter
|n Properties 
ftQ Find...
|r4 Save Filtered Log Fil...
Attach a Task To thi...
t Save Filter to Custo... 
View 
>
,Q Refresh
Q Help 
►
Event 1311, ActrveDirect... a 
Event Properties
<S) Attach Task To This 
Copy 
► v
Creates a filter.
Figure 8.16: Checking AD-related events inside Event 
Viewer

DCAZROOTOOI
□
X
C i bst-f690c66a-eaa4-4b7a-a0e6-b9c8cfe1aa34.ba$tion.azure.com/*/client/RENBWUP... D L£? ☆
s Event Viewer 
file Action View Help
a x
T Active Directory D n 
T DNS Server 
' T Remote Desktop $ 
’Y Administrative Events
v i, Windows Logs 
(• ] Application 
(Tj Security 
n s*up
 
(. | System 
f-] Forwarded Events
v Applications and Services 
[• j Active Directory Web
> l CloudBackup
>> 
(• , OFS Replication
f"j Directory Service
0 NS Ser. er
(. i Hardware Events 
(Tj Internet Explorer
Key Management Sen
> C Microsoft
> . MicrosoftAzureRecov
> [OpenSSH
JT] Operations Manager 
(•] ‘Windows Azure 
(. j ‘Windows PowerShell
_ « Subscriptions 
v
General Detoals
| DFS Replication
Number of events: 335
Actions
1 level 1
Date and Time
Source
Event ID
Task Categ... A
DFS Replication 
■*.
A
1 © Information 
1 © Information 
I © Information
1/1/2023 11:16:50 PM
1/1/2023 11:16:50 PM
1/1/202311:16:50 PM
a  k s  
s  s  s
4602
1210
1206
None 
None
None
y
Open Sa;ed Log...
Create Custom V»e—
Import Custom Vie...
1/1/2023 11:11:50 PM
DFSR
1302
Nont 
|
1 © Information 
I ©Information 
1 © Information 
1 © Information 
1 © Information
1/1/2023 11:11:44 PM
1/1/2023 11:11:38 PM
1/1/2023 11:11:37 PM
1/1/2023 11:11:37 PM
12/31/2022 12:44:38 AM
a  a  a  a  a  i 
a  s  s  s  s  
:
6)02
1314
1004
1002
1006
None 
None 
None 
None 
None
T
kJ
Clear Log...
Filter Current Log...
Properties
Find.,.
Save All Events As-
j Event 1202, DFSR
X
AlUCh 4 Till To th,...
The DPS Replication service failed to contact domain controller to access configuration 
information. Replication is Stopped. The service will try again during the next configuration 
oolhno cvcle which will occur in 60 minutes. Thu event can be caused bv TCP/IP connectrvr
log Name. 
Source 
(vent ID: 
Level:
DES Replication
DFSR
1202
Error
Logged:
Task Category:
Keywords:
1/1/2023 11:11:50 PM
None
Classic
View.
cS
Q
Refresh
Help
Event 1202. OFSR
Event Properties
Attach Task To This ...
kJ
Copy
Save Selected Event-
§
Figure 8.17: Checking AD-related events inside Event
Viewer
Similarly, we can try to use PowerShell to check whether 
we find any errors and warnings inside the event logs that 
are related to Active Directory services:
Get-WinEvent -FilterHashTable -MaxEvents 100
We can also set the time limit where we want to look for 
errors and remove the MaxEvents parameter to get all 
events we need from specific time range:

Get-WinEvent -FilterHashTable
We execute the following script to list all related events:
Get-WinEvent -FilterHashTable
Get-WinEvent -FilterHashTable
Get-WinEvent -FilterHashTable
Get-WinEvent -FilterHashTable
Get-WinEvent -FilterHashTable
Get-WinEvent -FilterHashTable Directory Web
Get-WinEvent -FilterHashTable
This would display all errors and warnings from logs related 
to most services that Active Directory depends on, and the 
results are as illustrated in Figure

Figure 8.18: Checking AD-related events inside Event
Viewer
Of course, not every error is permanent; some can be 
ignored without breaking the Active Directory 
functionalities. In the preceding figure, we can see that 
most errors are related to replication, as some of the 
environment’s domain controllers were unavailable.

Performance monitoring
Active Directory services integrated with DNS are 
commonly utilized in every organization. Usually, most of 
the traffic happens at specific peak times, so it is hard to 
estimate the exact required capacity. Therefore, we need 
to monitor domain controller performance.
To monitor domain controller performance, we need to 
collect the necessary performance counters, indicate the 
utilization of the servers and AD services, and whether the 
server is lacking the compute resources from the OS 
perspective and can introduce delays in request 
processing.
The list of standard performance counters which need to 
be collected when monitoring Windows server is as follows:
Logical disk-related performance counters
LogicalDisk(
*)\%
 Free Space
LogicalDisk(
*)\Disk
 Transfers/sec

LogicalDisk(
*)\Free
 Megabytes
LogicalDisk(C:)\% Idle Time
LogicalDisk(C:)\Avg. Disk Queue Length
This set of performance counters can provide all the 
necessary information about your logical disk capacity, 
free space, and I/O usage. We must have control and get 
informed if OS or AD-related volumes will get small amount 
of free space.
Memory-related performance counters
Memory(
*)\%
 Committed bytes in use
When monitoring memory, it is important to know if the 
memory utilization is under control and ensure that we are 
not overutilizing available memory. This will cause the 
processes and, more often, disk operations to slow down.
Network-related performance counters
Network Interface(
*)\Bytes
 Total/sec

Network adapters are not typically overutilized, but it is 
possible in certain scenarios, so it is important to ensure 
the inbound and outbound traffic statistics are collected.
Processor-related performance counters
Processor(Total)\% Processor Time
When monitoring the processor utilization, we must at 
least collect the % utilization of all logical processors to 
make sure we do not overutilize the CPU.
System-related performance counters
System(
*)\System
 Up Time
An interesting performance counter to collect is the 
uptime. It is useful when monitoring the patching windows 
and ensuring that the servers were rebooted after patches 
were installed.
Active Directory-related performance counters
DirectoryServices(NTDS)\LDAP Client Sessions
DNS(
*)\Dynamic
 Update Received/sec

DNS(
*)\Total
 Query Received/sec
Netlogon(
*)\Semaphore
 Timeouts
NTDS(
*)\ATQ
 estimated queue delay
NTDS(
*)\ATQ
 outstanding queued requests
NTDS(
*)\DS
 Directory Searches/sec
NTDS(
*)\LDAP
 Successful Binds/Sec
Process(dns)\% Processor Time
Process(dns)\Private Bytes
Process(lsass)\% Processor Time
Security System-Wide Statistics(
*)\Kerberos
Authentications
Security System-Wide Statistics(
*)\NTLM
 Authentications

When monitoring Active Directory Domain controller, we 
need to ensure that we know how the LSASS process 
consumes the CPU time as it can consume most of the CPU 
resources during peak hours. We also need to collect the 
Kerberos NTLM and LDAP authentication request statistics 
as it is be important to gather information about potential 
delays (ATQ) and semaphore timeouts. If domain controller 
struggles to process all the workload, it will be indicated in 
the performance counters listed above.
Whenever we start performance troubleshooting on the 
server, we could utilize the standard tools like task 
manager or resource monitor to see whether there is any 
indication that the server is overutilized. When doing basic 
checks, we can utilize as illustrated in Figure 8.19 and 
Figure

KaBfflOWJi 
x +
<- ■> C ft bit-114b6931.Sc50-l3
*^-b(5djSl^Bfi5a»3J>®t»onj>ur».cefn/i«/cl>M>MR._
 B |£' £r A □ X ■ 
fil Tfck Minigii 
-OX
f.r< Oplrtni Vh> 
f'TC-c«^K PaiiwmiiKC Owns Brtiilt Scrwa
O cpu
9*  mat
O Memory
O Elhwntt
i njKbpt - uen><»
CPU 
klt^lKl Xrontm PFamum 337OC CPU Ip Z.HOGHt
»
Up lime
aoo: 12:36
(f- 
iSttidi ® Opeft fifievice MwHe*
Figure 8.19 : Checking task manager for performance
details

J. DCA2ROOTOO! 
X +
C * bst-114b8931-2cSO-43e9-bf$d-
*81c8f385»e5.bastion.
*zure.com/
*/client/R.-
 O ☆ 
& =? Ci £ :
|F*p  Task Manager 
— OX
File Opt
*on$
 View 
Processes Performance Users Details Services
(*2 Fewer details 
End task
Name
PID
Status
User name
CPU
Memory (a...
Archrte...
Description
.• kiiitif
796
Running
SYSTEM
00
41,136 K
x64
local Security AutborAy Process
OT LogonUl.exe
663
Running
SYSTEM
00
8,076 K
jc64
Windows Logon User Interface Host
GT rsmserv.txe
1472
Running
SYSTEM
1.112 K
x64
Windows NT Intersite Messaging Service
iV HeafthServiee.exe
M6
Running
SYSTEM
M
5.244 it
iM
Microsoft Monitoring Agent Service
Or fontdrvhosLexe
3912
Running
UMFO-O
00
983K
x64
Usermode Font Driver Host
(T fontdrvhosLexe
39SJ
Running
UMFO-l
00
920 K
164
Usermode Font Driver Host
O explorer.exe
2sa
Running
adpsadmm
»
21.220 K
*64
Windows Explorer
E dwm.exe
10W
Running
DWM-1
w
15,072 K
>64
Desktop Window Manager
E dwm.e
*e
51 BQ
Running
DWM-2
00
1$JS4 K
*6+
Desktop Window Manager
dns.exe
3516
Running
SYSTEM
DO
120,260 K
*64
Domain Name System (DNS) Server
LI? dlHiost.exe
8132
Running
adpsadmm
00
1.988 K
*64
COM Surrogate
GT dfssvc.exe
J2$e
Running
SYSTEM
W
i.SEOK
*64
Windows NT Distnbuted File System Service
G3 dim ere
346+
Running
SYSTEM
00
7,36+K
*6+
Distributed File System Replication
£ ctfmon.ece
555
*
Running
adpsadmm
2,260 K
*64
CTF loader
Gi csrss.exe
564
Running
SYSTEM
00
1,208 K
*64
Client Server Runtime Process
E csrss.e
*e
644
Running
SYSTEM
w
1.152 K
*64
Client Server Runtime Process
E csrssece
6+20
Running
SYSTEM
oo
1.256 k
*6+
Client Serves Runtime Process
SI conhosteie
2+12
Running
adpsadmm
00
6,644 K
*64
Console Window Host
3Sconhost.exe
7904
Running
SYSTEM
00
6,043 K
*64
Console Window Host
Bconhost.exe
6512
Running
SYSTEM
00
5.732 K
*6+
Console Window Host 
'
Figure 8.20 : Checking task manager for performance
details
If the CPU is overutilized, we need to navigate to details 
and verify that the LSASS and DNS processes are not 
taking most of the processor time.
In task manager, we will not get detailed information and 
the other components like disk. To open resource monitor, 
we can use the Open Resource Monitor link inside task 
manager and verify the necessary details, as illustrated in 
Figure 8.21 and Figure

.. DCiBiCOTMl 
X +
<- -> C ■ bit-11Jb3M1-2rfO-41eS-bf5d-a81cSf385je5Ji3slHHuiure.«nn/
*/£lierrt/S-..
 fl i£t> £r A □ X :
fj Uik 
-OX
At Optwj Vim 
Pefornwxc lutii Oetiilj invite
O CPU
4% 17S GH:
Q Memory
M/4,0<;S{UK}
c Ethernet
Ethcrnfi
$400 Kbp - 33.0 tipi
CPU 
lntel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz
% luxation 
1W%
60 tecands
»
Utita ati&fl 
S«)e«d 
Baxe speed: 
2.79 GHi
8% 
2.79 GHz
Virtu-il pWrfCttrt; 
2
Phmwsw 
Thread? 
Handle? 
Virtuul ma<hwe. 
Yci
128 
1194 57662 L1“““
Uptime
0:00:18:20
iMT rr ^<-77
Figure 8.21 : Checking performance details in resource 
monitor

J DCAZROOTOOI
□
X
□
® Resource Monitor 
File Monitor Help 
Overview CPU Memory DHk Network
ft b$t-114b8931’2c50’43e9-bf5d-a8lc8f385aeS.bastion.azure.com/*/d»ent/R... 0 
☆
Figure 8.22: Checking performance details in resource
monitor
We cannot find any information about the Active Directory- 
related performance counters. We must use Performance 
Monitor to get this information. After we open the Perfmon 
tool, we need to add the relevant counters to be collected 
and displayed inside the tool, as illustrated in Figure 8.23 
and Figure

Figure 8.23: Using the performance monitor to collect - 
related performance information

Figure 8.24: Using the performance monitor to collect - 
related performance information
We can collect the necessary information with the data 
collector sets and with custom or defined templates, but 
data collector sets need to be set up for every server 
separately. It is usually done when troubleshooting 
complex problems or providing evidence to Microsoft 
support cases, as it is a lot of information to analyze.
PowerShell can also collect the performance counters and 
automate data retrieval for future processing. To get basic 
information about a specific counter, we need to execute 
the following command:

-Counter "\System\System Up Time"
The result of the preceding command is shown in Figure
Figure 8.25: Getting uptime information using PowerShell 
and Performance Counter
We can collect multiple samples with one command and 
display information regarding specific counter in more 
detail:

-Counter "\Processor(
*)\%
 Processor Time" -MaxSamples 2
The results are illustrated in Figure
Figure 8.26: Getting processor utilization using PowerShell 
and performance counters

Scheduling tasks for monitoring
When performing reactive troubleshooting, we can execute 
specific PowerShell commands and entire scripts to get 
information about the Active Directory state. Sometimes 
we like to perform initiative-taking health checks. Without 
information collected upfront in the central locations or 
shared within the email, it would be problematic to perform 
those on demand.
This is when we can use scheduled jobs to collect 
information and execute tasks in the context that will have 
permissions on the server. For scheduling those jobs, we 
could use the scheduled tasks running on the central 
management server or directly on the domain controller as 
SYSTEM. LOCAL SYSTEM account have all necessary 
permissions to check server and Active Directory domain 
health.
We could use Azure hybrid workers to execute runbooks on 
domain controllers but effectively with the same or similar 
results like scheduled task and additionally exposing the 
scheduled execution to specific automation account in 
Azure. This solution would need to be treated as the one 
more root access path into Active Directory.

We will look at the standard scheduled task running 
directly on the domain controller as it seems to be the 
leanest and least privileged scenario required to perform 
monitoring checks on DCs. As DCDIAG seems like a very 
informative scenario, we will try to automate the DCDIAG 
execution for domain controller, export the settings into 
event viewer, and export data into the output file on local, 
local, or remote shares.
First, we need to place the example script created on 
earlier in this chapter. The location could be somewhere 
locally on the domain controller, but the best option would 
be to replicate to all the DCs in the domain. The best 
location would be the SYSVOL as it is replicated to all DCs, 
while hosting other logon scripts and group policies. The 
following is the location to save the file:
\\$DomainName\SYSVOL\$DomainName\scripts
In our case, it would be as follows:
\\adpstest.net\SYSVOL\adpstest.net\scripts
We create the PowerShell script in PowerShell ISE and save 
the script to this location, as illustrated in Figure

Figure 8.27: Creating script inside SYSVOL scripts folder
To be able to save scripts in this folder, you need to have 
administrator privileges in domain and UAC elevated on 
the domain controller.
As we created the we can schedule it using the scheduled 
task and reference the script file inside the arguments

field. The scheduled task can be created with the following 
PowerShell script: 
#CreateTrigger every 5 minutes
$TimeTrigger = -At (Get-Date) -Once -RepetitionInterval - 
Minutes
#Specify SYSTEM account as principal
$Principal = -UserID "NT AUTHORITY\SYSTEM" -LogonType 
ServiceAccount -RunLevel Highest
#Define the Action
$StartAction = -Execute
"C:\Windows\System32\WindowsPowerShell\v1.0\powershe 
ll.exe" -Argument "-ExecutionPolicy ByPass -NoProfile -File
#Create ScheduledTask
Register-ScheduledTask DCDiag-Test -Trigger $TimeTrigger
-Action $StartAction -Principal $Principal
The results of executing the script is a created scheduled 
task, as illustrated on Figure

Figure 8.28: Scheduling monitoring script on Domain
Controller
Now after every 5 minutes, the DCDiag-Test Script from 
SYSVOL will be executed. The script was modified to write 
every result to event viewer, and now it looks like this:
New-EventLog -LogName "Application" -Source "DCDiag- 
Test" -ErrorAction SilentlyContinue

$DCDiagResults = dcdiag 
in { -like "*failed
 test
*"
 -or $line -like "*passed
 {Write­
EventLog -LogName Application -Source "DCDiag-Test" - 
EventID 4001 -Message $($line.split(' $($line.split(' 
$($line.split(' } }
To write to the event log, we need to execute the New- 
EventLog command with the “Source Name” parameter 
specified. Then, we can write to the event log all 
information we receive from The result of the scheduled 
task is illustrated in Figure

Figure 8.29: Event Viewer results of the scheduled 
monitoring script

Implementing global solution for AD monitoring
As we already know how to collect information from the 
server we can now create a solution that will collect the 
information and share it with the administrators for review 
or integrate with the alert management tools to indicate 
that we have a problem.
Many products monitor the estate, but all those solutions 
need to be managed by the same team, which runs Active 
Directory, as those solutions are agent-based or remote. 
Agent-based solutions, when running as SYSTEM, 
effectively have domain administrator permissions. So, 
when implementing any type of monitoring of Active 
Directory, if we would like to maintain separation of duties, 
the monitoring solution should be exclusively used for 
Active Directory and should be operated by the AD team 
only. That is best practice and is the practice followed by 
enterprises.
Another consideration is that it would be beneficial to keep 
monitoring solution within the same hardware stack or 
cloud infrastructure. With the consolidated approach we 
are not dependent on more vendors, cloud providers, and 
support teams. So, if we run our domain controllers in

Azure and on-prem datacenters, to keep our way in and 
dependencies in control we should also implement the 
monitoring in Azure. That would limit the number of people 
with access, limiting the vendor software that can gain 
access to the environment.
If we run the domain controllers on different cloud 
platforms, the best way would probably be to stick to that 
cloud platform monitoring and avoid using other third- 
party products as that would mean more agents are 
deployed or remote management monitoring would need 
to use privileged accounts.
Active Directory environment for the book purpose was 
created in Azure. Following the principle, we would create 
a monitoring solution inside Azure that will be deployed 
using Azure monitor and Log Analytics workspaces.
Every Azure server already has pre-installed Log Analytics 
agent, and it is just a matter of connecting it to the Log 
Analytics workspace. For an on-premise server, it would 
need to be installed manually and then attached to the Log 
Analytics workspace with the ID and workspace key. When 
a VM is created, it is connected to the We can verify this by 
navigating into Log Analytics workspaces and choosing the 
workspace from the same region, as illustrated in Figure 
8.30 and Figure

Figure 8.30: Default Log Analytics workspace review

Figure 8.31: Default Log Analytics workspace review
Our server was still deployed with legacy agent despite 
being installed recently. To collect specific information, we 
need to specify which event log and Performance 
Counters, that we would like to collect for our server.
If we do not have the security SIEM tools already installed 
in our organization, we would probably also like to collect 
security events. This will cause big companies to incur 
huge costs but could be acceptable for small domains. 
Suppose we do not care about collecting the security 
events. In that case, we can focus only on operational 
monitoring and collect both performance counters and

event logs relevant to Active Directory services, except 
security events.
To add the list of collected log names, we need to navigate 
to legacy agents management on the Log Analytics 
workspace and define all the necessary Log Name and 
performance counter names, as illustrated in Figure 8.32 
and Figure

Figure 8.32: Modify Log Analytics agent collection 
configuration
Figure 8.33: Modify Log Analytics agent collection 
configuration

Once configuration is saved and the monitoring agent on 
the server is refreshed, event logs and specific 
performance counters are collected in the workspace. We 
can use the information to build a monitoring solution for 
our Active Directory estate.
To verify that the information is directed to the Log 
Analytics, we can navigate to the Logs app from the left 
menu, close the example queries and try to query the 
Event table or Perf table that will show us the related logs 
to enable servers. This is illustrated in Figure 8.34 and 
Figure

Figure 8.34: Checking data collected by Log Analytics 
agent inside Workplace
Figure 8.35: Checking data collected by Log Analytics 
agent inside Workplace
A useful tool to implement for server monitoring is Change 
Change tracking can scan the registry keys, files for 
changes or modifications. It includes the information about 
the services status as they are stored in the registry. By

implementing it, we can track the status of the AD Services 
on the domain controllers.
To implement change tracking, we need to create an 
Automation Account in the portal. We navigate to 
automation choose Create and follow the wizard to create 
automation account in the desired resource group and 
name it accordingly, as shown in Figure 8.36 and Figure
Figure 8.36: Creating Automation Account for Change 
Tracking Purpose

Figure 8.37: Creating Automation Account for Change 
Tracking Purpose
Once the automation account is created, we can 
implement change tracking and connect it to the specific 
Log Analytics workspace. We navigate to change tracking 
from the left menu, enable change tracking and then make 
sure all VMs are added to the workspace using Manage 
Machines option and Enable on all available and future as 
illustrated in Figure 8.38 and Figure

Figure 8.38: Enabling change tracking for all servers in Log 
Analytics Workspace and Automation account

Figure 8.39: Enabling change tracking for all servers in Log 
Analytics Workspace and Automation account
Now, let us try to implement the query that will show the 
status of Active Directory-related services. First, we need 
to navigate to Change tracking settings, choose the Edit 
Settings option and modify the services monitor frequency 
to around 1 minute to get the most up-to-date information, 
as illustrated in Figure 8.40 and Figure

Figure 8.40: Implementing change tracking Windows 
service monitoring

Figure 8.41: Implementing change tracking Windows 
service monitoring
Once the data is digested into Azure, Kusto query that will 
show the information about specific AD Services, while it 
can be executed from the Log Analytics workspace Logs 
option:
ConfigurationData 
| where SvcName in

| project SvcName, SvcDisplayName, SvcState
The result of the query is shown in Figure
Figure 8.42: Kusto query checking status of the AD-related
services
Now, let us try to create an alert to be raised when a 
specific condition is met like AD-related service is stopped 
to fire the alert.

We need to navigate to the Monitor application, choose 
alerts and then Create an rule. During creation choose 
Scope in the first window (specific Log Analytics 
workspace), log query with 24th time window and looking 
for entries for more than one row, and specific action 
group with notifications, as illustrated in Figure 8.43 and 
Figure
Figure 8.43: Creating alert in Azure Monitor when AD 
related service is stopped

Figure 8.44: Creating alert in Azure Monitor when AD 
related service is stopped
Once the preceding alert is configured, we can evaluate it 
using the following commands on Azure VM:
Disabled
"kdssvc"

After the test and proper alert configuration, we should see 
alerts being triggered by email and inside Azure portal, as 
illustrated in Figure
Figure 8.45: Creating alert in Azure Monitor when AD- 
related service is stopped
What we performed was only one small scenario of various 
alerts that can be configured. Still, because of the cost, we 
should consider bundling the alerting and expanding the 
scope of those alerts to cover as many servers as possible 
with a single alert. We can implement more alerts for 

performance problems, services, and events depending on 
our specific requirements.

Conclusion
There are several ways of monitoring Active Directory 
environment, from more reactive to initiative-taking. In 
many cases, the issues are spotted after customers 
complain about a service problem. Still, even in those 
scenarios, it is good to collect as much data about the 
environment as possible.
Standard events and performance counters can provide 
this information and properly use tools to health check 
the status of the services. Once we get comfortable 
using those tools, we can quickly identify the problems 
and then implement even more sophisticated 
monitoring rules with our global solution.
It is important to understand that if a monitoring system 
is running an agent on domain controllers, it effectively 
controls Active Directory. Therefore, a best practice 
would be running monitoring solution within the team 
responsible for the AD environment. The chosen solution 
is not an issue here; at least the controls stay with the 
responsible people.

When hosting domain controllers in Azure, the quickest 
option would be to implement the system using Azure 
monitor. The solution could use custom health checks 
implemented as scheduled tasks on domain controllers, 
events, and performance counters.
A monitoring solution could be built step by step and 
gradually evolve into a more complex and complete 
solution over time. When certain scenarios appear in the 
environment, we should not only fix those issues but 
also try to implement specific measures that could 
predict and even prevent certain problems in the 
systems.
In the next chapter, we will try to understand Active 
Directory disaster recovery scenarios. We will explain 
the deletion process that DR scenarios need to consider. 
We will implement AD object recovery, manage 
backups, and perform restore of Active Directory 
environment.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors:

https://discord.bpbonline.com

C 
HAPTER
9
Active Directory Disaster Recovery

Introduction
Active Directory (AD) services are created based on 
Windows server infrastructure. This means that we 
could use the same backup tools and products for 
backing up the standard Windows server workload. They 
can make sure the AD database and SYSVOL are 
consistent during the backup process. After backup is 
performed in a consistent way, recovery process will be 
consistent as well.
Microsoft supports various recovery types that can be as 
simple as recovering a user from the Recycle Bin or as 
complex as AD forest recovery scenarios. In those 
scenarios, the system state backup that includes AD is 
required to perform those operations. For some of them, 
we can rely on a cloud provider or other third-party 
backup solutions.
In any case, we need to be sure that the backup solution 
we are using covers the AD workload on the server. 
Backup data that is captured during the backup process 
is available outside the backed up servers. Access to

this data need to be secured just like it is secured for AD 
infrastructure.
Some organizations use the global backup 
infrastructure. It could be decoupled from shared 
processes and AD team could use a different solution 
that is dedicated to protecting AD and other security- 
related infrastructure. Depending on the scenario, the 
AD environment is to be encouraged to develop in a 
specific direction because there are security 
prerequisites to be met and principles to be followed.
In this chapter, we will describe all the AD backup and 
recovery scenarios. We will learn how to configure 
Windows Server Backup (WSB) to protect the workload, 
implement specific DR scenarios, get familiar with 
authoritative and non-authoritative restores, and 
implement global DR solutions for our development 
environment.

Structure
This chapter will cover the following topics:
Reanimation of tombstone objects
Recycle Bin recovery scenarios
Configuration of Windows server backup for domain 
controllers
Non-authoritative domain controller restore
Authoritative domain controller restore
Organizational unit
Object restores
SYSVOL recovery
Implementing global DR solution


Objectives
The main objective of this chapter is to get familiar with 
backup and restore scenarios for Active Directory. After 
going through this chapter, you should be able to know 
how to configure backup for AD infrastructure and know 
how to restore AD, from granular objects to entire 
servers and domains. It is not only following Microsoft 
documentation but being familiar with the process 
upfront, gives necessary confidence during any 
production restore activities.

Reanimation of tombstone objects
If Active Directory Recycle Bin is not enabled in Active 
Directory forest and the Administrator deletes any object, 
this object is marked as tombstoned. Object is getting 
DistinguishedName attribute changed and moved to the 
container called Tombstone and the attribute isDeleted is 
set to TRUE.
The objects that remain there for a specified period can be 
controlled by the tombstoneLifteime attribute of the 
directory service object. Since Windows Server 2003 SP1, 
lifetime is set by default 180. So, if there is no Recycle Bin 
enabled in the environment, the deleted object will remain 
under tombstone container for next 180 days before it is 
permanently removed.
We can recover objects from the tombstone, but we need 
to understand that some of the attributes will not be 
restored. Group membership is lost after an object is 
restored.
In our test environment, we already enabled Recycle Bin. 
We cannot revert it, so it needs to be verified in a different 
environment if needed, but it will be not covered again. Let

us create a Domain User and add it to the Domain Admins 
group, as illustrated in Figure
3 Active Directory Users and Computers
File Action View Help
* I ti EI £ □ I X H @ BI G E I S» M 1a
Active Directory Users and Com 
> 
„ Saved Queries
v adpstest2.net
> Q Builtin
> □ Computers
> 53 Domain Controllers
> ' ForeignSecurityPrincipal!
> P Managed Service Accout 
Users
Name 
Type
Cert Publish... Security Grouj
Cloneable D... Security Grouj:
Denied ROD... Security Grouj 
i^DnsAdmins Security Grouj 
^DnsUpdateP... Security Grouj
Domain Ad... Security Grouj
Domain Co... Security Grouj 
^Domain Con... Security Grouj 
^Domain Gue... Security Grouj
Domain Users Security Grouj 
^Enterprise A... Security Grouj
Enterprise K... Security Grouj
Enterprise R... Security Grouj
Group Polic... Security Grouj
8^ Guest User
Key Admins Security Grouj 
Protected Us... Security Grouj 
RAS ar|d IAS ... Security Grouj 
Read-only D... Security Grouj 
Schema Ad... Security Grouj
8g test 
User
test Properties 
? X
Member of:
Remote control Remote Desktop Services Profile COM+ 
General Address Account Profile Telephones Organization
Member Of Dial-in 
Environment Sessions
Primary group: Domain Users
There is no need to change Primary group unless 
you have Macintosh clients or POSIX-compliant 
applications.
OK | Cancel
Figure 9.1 : Creating the test user for tombstone 
reanimation
After we have a test user to use, we can remove user 
object from the environment. Once the user is deleted, we 
can try the tombstone reanimation using the LDP tool. We 
will start the command prompt, type ldp.exe and choose to 
Bind with Choose controls from the Options menu and load 
the deleted objects, as illustrated in Figure 9.2 and Figure

QI Administrator: Command Prompt
□
\Users\adpsadmin>
licrosoft Windows [Version 
c) Microsoft Corporation.
10.0.20348.1487]
All rights reserved
\Users\adpsadmin>ldp.exe
Utilities
Bind
User:
Password:
Domain:
0 Encrypt traffic after bind
Advanced
Cancel
Ready
Bind type
(•) Bind as currently logged on user
O Bind with credentials
O Simple bind
O Advanced (DIGEST)
Connection Browse View
Figure 9.2 : Starting LDP tool as current user to process the 
reanimation

SI Xdministraton Command Prompt
□
1.2.840.113556.1.4.417
t:\Users\adpsadmin>ldp.exe
L:\Users\adpsadmin>
■licrosoft Windows [Version 10.0.20348.1487]
(c) Microsoft Corporation. All rights reserved.
Ready
POLICY_HINTS_DEPRECATED ); 1.2.840.113556.1.4.2090
I d a p ://0 C AZRO OTOD2. a d p stest2. n et.'D C=a d p stest2, D C=n et
Connection Browse View Options Utilities Help
<unavailable> 
| Return deleted objects i v
| < < Check Out | Check in » |
O Client
Controls
Object Identifier
Value
Active Controls
Load Predefined
Description
Control Type
(•) Server
Q Critical
Figure 9.3 : Starting LDP tool as current user to process the 
reanimation
Then, we will choose the View menu, put the Base DN of 
the domain, and then navigate to the deleted objects 
container and find the object to restore, as illustrated in 
Figure 9.4 and Figure

si Administrator: Command Prompt
□
Microsoft Windows [Version 
(c) Microsoft Corporation.
10.0.20348.1487]
All rights reserved.
t:\Users\adpsadmin>ldp.exe
t: \Users\adpsadmin>
ldap:A'DCAZROOT002.adpstest2.net'DC = adpstest2,DC=net
□
Connection Browse View Options Utilities Help
supportedLDAPPoiicies (2U): MaxPoolihreads;
M axPercentDirSy n cReq uests; M axData g ra mRecv;
MaxReceiveBuffer; InitRecvTimeout; MaxConnections;
MaxConnldleTime; MaxPageSize:
MaxBatch Return Messages; MaxQueryDuration;
M axDirSy n cD u ratio n; M axTe mpTa ble Siz e;
Tree View
0 = kiap_set_option(ld, LDAP_OPT_EN CRYPT, 1)
res = ldap_bind_s(kj, NULL, &NtAuth Identity, NEGOTIATE (1158)); 
//v.3
{NtAuth Identity: User='NULL'; Pwd=<unavailable>;
domain = ’NULL1}
Authenticated as: 'ADPSTEST2\adpsadmin'.
Ready
Figure 9.4 : Navigating to deleted objects container and 
locating the test object

Figure 9.5: Navigating to deleted objects container and 
locating the test object
To restore the object, we need to perform two actions:
Modify the distinguished name
Delete the deleted attribute value
We keep the first part of the object name Then, we can use 
the last known parent attribute that can be viewed when 
double-clicking on the object in LDP, as illustrated in Figure

S3 
C ommand Prompt
c
icresort Windows [version 10.0.20348.1487] 
c) Microsoft Corporation. All rights reserved.
:\Users\adpsadmin>ldp.exe
:\Users\adpsadmi n >
ldap;//OCAZROOT002.adpste$tLnet/DC=adpste$t2.DC=net
□
X
Connection Browse View Options Utilities Help
CNs Computers, DCs adpstest2.DCsnet 
; CNxDfleted Objerts.DCxsdpstestiDCenet
DCa..De»eted-_msd«.adpste«t2.net\0ADEL 
DC«..Deteted-adpstest2.net\0AD€L:484c9c 
DC«©\0AD€L:1a4c9b66-2548-4372-96
*3-5
 
DC.©\0AlXlx12W9a1-a031-4<96-9f3«-9l 
OCa_gc._tcp\OAO€L:6cf4c933-fbad-4068-8 
DCs_gc._tcp.Dcf4uM-Fint-Site-Namc-.sitcs 
- D€=_kerberc5._tcp‘0ADEL:658b09e6-9
*29-
 
: - DC=_kefteros._tcp.dc\0ADELJ8f»4bff-9<M
DC=_kcrt>cros._tcp.Defau4t
*Ftnt
*$rte-Nanw
 
DC=_kert>eros._tcp.Dcfault-Fint-$rte- Name 
DC=_kertj«w._udp\0ADEL0e217ec«-d5cd 
DC=_kpa$swd._tcp\0AD€l:>6b6b7ce-ab62- 
DC=.kpasswd._udp\OAOa:b8b7621c-7740 
: - DC=_ldap._tcp\0ADEL:c6eb2664-faM-4ab6
DC=_ldap..tcp.8014ec2e-kc1 -49e6-W67-2
DC=Jdap._tcp.dc\QADELd236858a-8c1a-4
D€=Jdap..tcp.Defautt-First-5rte-Name..sil 
i--DC-_ldap._tcp.Oefauh-Rrst-Sit
*-N»me._iia
D€=.ldap._tcp.Oefautt-Fir$t-Site-Name..5il 
i DC=.ldap..tcp.gc\0ADEL-6c96db2f-22b3-4
DC=.ldap..tcp.pdc\0ADEL-.8b9e292d-ece«- 
DC=.tmda\0AD€L2fa74Oc4-679»-4ff1-i7i 
DC=dca»eotC02\0ADfL:baaaS7b5-4e86-4f 
DC=faaffa70- S725-4d4f-a18e-22647ce674c> 
DC=gcl.DADEL780k>e643-43eO-4b96-b3d9-i
Dti 16S'
*uz:2-tZZ0-4+eT-»ero-jrreu4ra70r»,
objectCtasa (4): top; person. organaahonaPerson; i/eer
ObjectGUD 1824d252<82O-4487.967b.577ed4te7079
ObjectSd. S-1-5-21-1416113131-2789627475-3923M750S-1103, 
sAUAccountNarne lest;
userAccountControt 0x202 • < ACCOUNTDtSAfiLE I NORMAL-ACCOUNT );
vSNChangad; 12?92;
uSNCreatee 12761;
whanChanged: 1/10/202311:14:45 PM Coordinated Unnetsai Time.
whenCreated: 1/10/2023 11:0813PM Coordnated Unr.ersalTme,
Excandmo Bate CNteaAOADfL l824d2«-c820-4487.9«7b.677ed4fa7079CHaDeMed
Objects CC-adpsic
*x2
 DC-net
Otting 1 entnaa
On: CN-testiOADEL:18244262<820-4487 -967b-577ed4f a7079.CN-Dal«tad 
Obiecla.DC
*adpaieat2JX:
*net
 
en test
DCL1824d2S2-e820-4487-967b-577ed4fa7079;
dstnguahedNarre CN-te»N)AD€l:i«244252-c320^4«7-967p-577eO4ta7079.CN-Deieted 
Objects DC-edps»est2.DC-net.
n«taiK«Typa 0x4-(WRITE);
•Dewed true.
•Recycled true
laatKnownParent CN»Usera DC«adp<le«t2 DC»net 
name test
DEL 1824d2S2-c820-4487-987b-S77ed4fa7079;
otjecrCass (4): top person: organcatsnaPerson, user
objectOUC 18244252-c82O-4487-967b-577eO4ta7079 
ctjecrsd S-1-5-21-1416113131-2789627475-3823687505-1103 
sAMAccountNanw lest.
userAccountComrel 0x202 - < ACCOUNTDISABLE I NORMAL-ACCOUNT ).
uSN Chan gad 12792.
uSNCreated 12761.
whenChanged 1/10/2023 11 14 45 PM Coordnated Urwrersal Tens:
wtienCreated 1/10/2023 11:0618PM Coordnated Unr.ersMTme
No children
Figure 9.6 : Checking details of the object in LDP
To perform these modifications, we will choose Modify 
Object after right clicking the menu and adding 
DistinguishedName as the name of the attribute. Then we 
will put the value of the restored object that it will contain. 
Here, it is the CN + lastKnownParent attribute. Then, we 
will make sure that we remove the isDeleted attribute by 
adding the Edit entry attribute and choosing the Delete 
option with the extended check box selected, as illustrated 
in Figure 9.7 and Figure

31 
omrrund Prompt
(
Microsoft Windows [Version 
(c) Microsoft Corporation.
16.0.20348.1487]
All rights reserved.
:\Users\adpsadainyldp.exe
£? ldap//DCAZROOT002.adpstest2.net-'DC=adpstestZDC=net
□
X
Connection Browse View Options Utilities Help
(_re=hxeigniecuntyPnnc^>
*is.Lx.=idpstesx2.L
 
CN=Infrastructure, DC s edpstesti DC=net 
CN=Keys,DC=adpstest2,DC = net 
CN« Lo$tAndFound,DC« edpstestl, DC x net 
CNx Managed Service Accounts, DC sad pstestC 
CNx NTDS Quotas, OC> adpstest2, DC ■ net 
CN= Program Data.DCs adpstes»2.DC=net 
CN= System. DC=adpstestZDCs net
0 Synchronous
0 Extended
!L 1824d2S2-c820-4487-98n>-S77ed4fa70?9.
ftdClMS (<) lop. person, oegancabonaPerson user
>jeaGuC 1«2442$2-€82O-Me7-9C7tH577a<Mf«707>.
^<4Cd C I C 21 141(112121 riC<2’<’( lOSXt’COC 1102;
MAAccounfflama lest
■erAccountComrot 0x202 • (ACCOUNTD6ABLE I NORMAL_ACCOUNT );
iHChangtd 12792;
»Cro«tM 12761.
henctianped 1/10/202311:14:45 PM Coordnaied untrerMi ’me.
henCrealed. 1/10/2023 11:0818 PM Coordinated UrwversalTme 
dog base CNMes?>0AD£L 1824d2S2-e820-4487.967b.577ftd4fa7()73,C»^Deie4ed 
a. OOadpetMC .DC aMf...
1-tcat>0ADtL;1624d252-c821M487 -»«7t>477 etMfa/079,CN«De leted
t*.DC»adp«te
*t2J)C><
*et
i ted
•I 18240252-c820^487-96Tb-$77eO4ta7Q79
stinguMhadName CN-te»W)ADEL-l824d2$2-c«20-4487.967b-$77ed4ta7079.CN-Dtletad 
0 b)«cta.DC«adpMtst2 .DC-net.
itanceType Ox
*-(VWTEK
34IMM TRUE:
Recycled true.
stKnownParent CH-users.DC-adpesestZ.DC-net.
me test
:L t824d2S2.e820-4487.967b.577ed4fa7070.
ob^ctCbss (4) lop. person organizabonaPerson user.
ot^ectGUC l824d2£2^82iM487-«7b-577ed4fa7079
ObjedSd S-1-S-21-14181I3131.2789827475-3923887$05.1103;
sAMAccountName lest.
userAccountControt 0x202 - ( aCCOUNTDCaBU । NORMAJ._aCCOUMT ),
uSNChanged-12792:
uSNCreated 12761;
whenCreated' 1/10/2023 11 08 18 PM Coordinated Universal Tme:
Figure 9.7 : Restoring user by the attribute modification
using LDP

£? ldapJ/DCAZRQOTD02.adprtert2 net DC=adpste«2.DC = nrt
Connection Browse View Options Utilities Help
Modify
'■'Cal Modify
Idap_modify_«xt_*(M. CN-taaM ADEL 182442S2-C820-4487-9670-577*04fa7079CR-O*l*<*d
Obj*6t*OC-adp*la*O.DC-n*c.[2] attra SvrOrta. G*itC«rta):
Modified CNMtaMADEl i824d2S2-c820-4487-967O-$77ed4ta70T9.CM-CWed
Object* 0C-adp»1*«t2.DC-nar
Edrt Entry 
Attrtute:
drg base tH-teafMOEL tft24<j2S2-c82t-**87-947b-$77eO4fa7079.CH-Deieted 
» DC*adpste»t2,DC»net
0 Synchronous
0 Extended
| Q«ln»HhedNBne 
|
| C7S-test,CN-<Jser$XX-adp«te$t2,DC-ne< |
Values: _______________
Operation
C>Add O Delete (S) Replace
JK>ang*d 12792:
JtCraatad 12761;
MnChanged 1HCV2O23 11:14:46 PM Cocronawd Universal’me.
H>teati0ADEL:1*24d242-c8N-44S?-967b-677ed4fa7079.CN«Deleted
I a .DC «adpeteat2, DC «net 
। test
11824d2S2*c620*44&7.967b-577«<Mfa707?;
ttnguahadName CN*teat\OAD€L i824d252-c820-4487.9e7b.E77e<Mfa7C79CH«Ce<eted
0Bject*.DC»adpate«t2.DC»het:
ManceType 0x4 • (write );
Jeieied true.
^cycled true
ltKnownP»r»nf CR-U»»rS.CC-*dpSt»lt2DC-net 
me teat
1 l82442S2-c«20-4467-96?b-$77e<S4ta?0?9;
ijectClasa (4): top: person organcabonaPerson: user
ijeetGuO l824d2S2-c£20-4487-987b-$77ed4fa7079;
ijectSd S-1-S-21-1416113131-278982747S-3923687S0S-1103; 
kMAccountName test.
erAccountControt 0x202 ■ ( ACCOUNTDGAfiLE I MORMAL.ACCOUNT ). 
iWChanged 12792.
CNs Infrastructure, DC sadpstest2,DCs net 
CN=Keys.DC=adp«est2.DC=ne<
CN=LostAndFound,OC= adpste$t2,DC=oet
- CN=Managed Service Accounts,DC=»dpstest2 
CNsNTDS Quotas, DC >*dpstest2,DCa net 
CNs Program Data,DCsadpstest2,DC: net 
CM=System, DC=adpst«t2, DC = net
uSHCreated 12781.
when Changed 1/10202311:14:46 PM Coordnaaed universal Time.
whenCreated; 1/10^02311.08.18 PU Coordinated Vnh-erMl'nm.
Microsoft Windows [Version 10.0.20348.1487] 
Kc) Microsoft Corporation. All rights reserved.
t:\Users\adpsadmin>ldp.exe
L:\Users\adpsadmin>
Figure 9.8 : Restoring user by the attribute modification 
using LDP
After the modification is done, we can see the user in the 
dsa.msc console, as illustrated in Figure

J Active Directory Users and C omputers
test Properties 
? X
File Action View Help
aral * □ I X@ 0 Bl B Hl *
_J Active Di rectory Users and Com 
> Saved Queries
V edpstestinet
> Q Euiltin
> Q Computers
j £j Domain Controller:
. FcreignSecurilyPrincipel: 
> L3 Meneged Service Accour 
U:er:
Name 
Type
Ce<t P ublish.. Securit
Cloneable 0... Securit 
ifc Denied ROD... Secunt 
t^DnsAdmini Securit 
iA DnsUpdateP... Securit
Domain Ad... Securit
Domain Co... Securit 
^Domain Con... Securit
Dorna in Gue... Securit 
^Domain User: Securit 
^Enterprise A... Securit; 
iJS; Enterprise Securit
Enterprise FL. Securit
Group Polic... Securit
Guest 
User
Key Admins Securit 
'P, Protected Us... Securit 
t?, RAS and IAS... Securit 
Fpj Read- only D... Securit 
i?. Schema Ad... Securit 
Sgtest 
U:er
Petrote control Remote Desktop Services Dorie COM
*
General .Address .Account Profile Telephones Oganiaaton
Member Of Bain 
&vrwvnert Sessions
Member of'
Mame 
Active Doeotcry Domain Services Folder
Domain Users adpSeSt? net/Users
Add Remove
IPrmary group: 
Dcmain Users
There is no need So change Pirnary group urieas 
’‘ 
you have lAaenlcsh everts or POSlX^onpkart
a 03 Indians.
OK ~~| Cancel
< >
Figure 9.9 : Restored user with removed group membership
As we noticed, group membership was removed, and the 
user is only a member of Domain Users because user or 
group need to be member of at least one group that is 
considered Primary Group.
We can perform restore operations using PowerShell. First, 
we need to make sure we query the right user with the 
following command: 
-eq -and CN -like

And the result of this operation is shown in Figure
33 Administrator Command Prompt - powershell 
— 
□ X
3S C:\Users\adpsadmin> get-adobject -IncludeDeletedObjects -filter ’Deleted -eq $true -and CN -like "TEST
*"
’
deleted 
: True
HstinguishedName : CN=Test\0ADEL:1824d252-c820-4487-967b-577ed4fa7079,CN=Deleted Objects,DC=adpstest2,DC=net
lane 
: Test
DEL:1824d252-c820-4487-967b-577ed4fa7079
DbjectClass 
: user
JbjectGUID 
: 1824d252-c820-4487-967b-577ed4fa7079
C:\Users\adpsadmin> —
Figure 9.10 : Querying the deleted user in PowerShell
Now, the user is the one we would like to restore. We can 
pipe the output into with the NewName parameter set to 
the user’s original name before deletion:
-eq -and CN -like | "Test"
Hence, the user will be available in the standard users 
container again with Domain Users membership like in the 
GUI scenario and details of the user are shown in Figure

Figure 9.11: Restoring the tombstone (deleted) object 
using PowerShell without Recycle Bin enabled

Recycle Bin recovery scenarios
Recycle Bin recoveries were already discussed in Chapter 
Active Directory environment As described when 
discussing the tombstone topic, when the Recycle Bin is 
enabled, there is no possibility to revert this setting inside 
AD as it requires the schema change that cannot be rolled 
back.
There are different limitations when enabling the AD 
Recycle Bin. Enabling Recycle Bin requires schema change, 
if we recently deleted some AD objects and they reside in 
Tombstone at the moment we enable Recycle Bin, those 
objects will be purged from Active Directory permanently, 
that is why if planning to have this scenario in the 
production environment we need to make sure the backup 
environment for AD is configured properly.
If the size of the AD is a concern, enabling Recycle Bin will 
increase the size over time as it will keep unnecessary 
objects that were deleted will stay in the Recycle Bin for 
the specific timeline. It is no significant change in size 
generally.

If we remove accounts from group membership, that 
membership is not being protected by Recycle Bin as no 
object is deleted, because we actually change the attribute 
of the group and do not delete any objects; therefore, to 
restore membership, we will need to restore objects from 
backup.
To enable auditing that will capture membership removal 
for all groups inside AD, we need to modify the default 
domain controller policy or the one that is linked to the 
domain controllers OU. Settings related to auditing are 
inside Computer Configuration | Windows Settings | 
Security Settings | Advanced Audit Policy Configuration | 
Audit Policies | Account Management. We need to make 
sure that we configure Success and Failure auditing, as 
illustrated in Figure

Figure 9.12: Enabling the group membership auditing in AD
After auditing is enabled, we will receive the related events 
that could be useful when recreating the membership of 
the user or a specific group, if required. Event details are 
illustrated in Figure

Figure 9.13: Group membership auditing details for the 
user being removed from domain admins group
If no events are registered for specific group membership 
or other type of activities, object level auditing needs to be 
configured with following the specific guide on Microsoft 
documentation: 
https://learn.microsoft.com/en-us/troubleshoot/windows- 
server/windows-security/use-audit-active-directory-objects- 
track-events#configure-auditing-for-specific-active- 
directory-objects

When Recycle Bin is not enabled and tombstone 
reanimation is required to recover the user, it will not have 
the membership restored as well. With the auditing 
enabled, we can restore the user and try to recreate the 
membership with the user. We would either extend the log 
size locally on the domain controller or make sure we 
collect security event logs inside our monitoring or 
Security Event Management tool that can be queried after 
local logs are overwritten with the new ones.
We would not restore users to the same OU every time. To 
restore users from Recycle Bin in a different location, we 
can use the administrative center. To perform restore to a 
different destination in AD , we need to navigate to the 
specific user in the console and to the Deleted Objects 
container, and then we must right-click, choose the 
Restore To... option, and specify the destination location, 
as illustrated in Figure 9.14 and Figure

~ DCAZROOTOQ1 
X +
<- -> C * b$t-1275d23d-cd27-4b18-bOc3-a12dOb15acca.bastion.azure.com/*/client/RENBWIJPT1QwMDE... 0 \& ☆ 
> 
□ X
Deleted Objects (27)
Locate Parent
jfl Authentication
Search under this node
Properties
. ad psadrrl
UP adpstest 
¥ adpstest
Deleted Objects
Users
..APassword Settings Contai- 
!■ Dynamic Access Control ►
User logon: adpsadminlO
E-mail:
Modified: 1/11/2023 10:40 PM
Description:
> j Start
> -I5***
Croup Polie p G|oba| 
Group Polic
Properties
Deleted Objects
Jl Group Policy Management 
File Action View Window Help
a ini
_a Group Policy Ma. 
A ^<xest adpstestl 
v jb Domains I
v adpstestl 
Defa
> 33 Adm 
> 33 Com 
v 33 Dom
■J D isl Overview
idpsadminlO (Disabled;
when Deleted
> 33 G»obl
> 33 Groti
> 33 OfFx
> 33 Senn
> 33 Tie
*
> 33 User
> 33 Wori
> Grot
jfl (417F1900-2B79-465D-9A... 12/10/20229:5...
X adpsadmin 
11/1/2022 909...
X adpsadmin
11/27/2022 7:1-
fie st orc
o adpsadrr 
—
r 
Restore To-
Locate Parent
adpsadmin 1 
Properties
Expiration:
Last logon: <Not Set >
Restore To-
»
Summary
WINDOWS POWERSHELL HISTORY
Figure 9.14: Restoring the user in a different location

Figure 9.15: Restoring the user in a different location
The same operation could be performed using the 
PowerShell command. First, we check whether the user 
found is the one we would like to restore, and then we 
restore it to the specified OU location, as illustrated in 
Figure

Figure 9.16: Restoring the user in a different location

Configuration of Windows server backup for domain 
controllers
To cover most of the backup scenarios when restoring 
single objects, OU’s SYSVOL, or the entire server, we would 
need to have access to system state backup. When 
performing it on a server that is promoted as a domain 
controller, the AD database file) will be included in the 
backup performed.
To perform and store system state backups for domain 
controllers, we need to install the Windows Server Backup 
feature that is available for every Windows server and 
configure backups to the desired backup location, mostly 
separate dedicated local data volume..
To install the WSB feature, we could perform it using 
Server Manager and the Add Roles and Features option and 
then make sure the Windows Server Backup feature is 
selected in the Features section, as illustrated in Figure 
9.17 and Figure

Export configuration settings
□
You can close this wizard without interrupting running tasks. View task progress or open this page again by clicking Notifications in the 
command bar, and then Task Details.
< Previous Next > 
[ Close Cancel
v - 
□ X
fl I* ☆ * 
□ X :
-ox
D€ST1NATion SERVE* 
□CAZROOTOOI XdpitMt n«
_ D< AZ ROOT 001 
X +
C fi bst-e10d67d4-0d65-422a-9aa2-40fcd0355daa.bastion.azure.com/*/client/RENBWUPT1QwM...
FL Add Roles and Features V/izard
Installation progress
View installation progress 
O Feature installation
Installation started on DCAZROOTOOIadpstestnet
Windows Server Backup
Results
Figure 9.17: Installing Windows Server Backup using server 
manager

Figure 9.18: Installing Windows Server Backup using server 
manager
The same operation can be performed using PowerShell:
When the installation is finished, we will navigate to the 
WSB console and configure the backups. We choose the 
backup schedule and use the Full server backup (system 
state would be included in full server backup as well), and 
we could choose out of office hours as the right time for 
performing this backup for example Midnight, as the least 
amount of authentication is beneficial for this kind of 
operations (split timing of the domain controllers inside the 

same domain/forest to ensure availability). This operation 
is shown in Figure 9.19 and Figure
Figure 9.19: Configuring Windows server backup schedule 
for the domain controller

_ kajmxjtw: 
x *
<- > C • 
fl 14 ft * n i
r*.  KL- H
*  fc fehpfcMM.Wnd
* * f. T U TH
f+(l^ K
■X* L«il SicKr
(Lminj Polrf 
I-Ira pfttn ,rvfl ^hm yw »M< K V> t,.bvR-/
S*l«r SkM CM/fluiit.. 
;*' Clue J <Uy
Specify Backup Time
Figure 9.20: Configuring Windows server backup schedule 
for the domain controller
We will choose the dedicated drive as the backup 
destination; the formatted volume is good as well. Copying 
data to the network folder is not always a good idea, but if 
we do not have any other global solution for backups, it is 
necessary to keep the data outside the actual server for 
DR purposes, so network share is only option without 
additional software or custom robocopy scripts. We will 
choose the dedicated disk and discover the right one using 
Show All Available as illustrated in Figure 9.21 and Figure

Jft CC42RCOT001 
X +
-> 0 ft b4t-e1Od67d4-Od65-422a-9aa2-40fcdO3S5<laa.tMsti£m.a2urf.<pm/- O li1 'ft W- □ i
Fit
*  Alton v-tw Htlp
» Windows Server Backup JL 
Local Backup
tj. Backup Schedule Wizard
Specify Destination Type
Getting, Started
Select Backup Configurat-
Specify Backup Time
Specify DedtnalitMi Type
Select Destination Disk
Confirmaticn
Summary
'.'.'here de you want to store the backups?
®‘ Back up Io a hard drtk thu
*
 is dedicated Few backups (recommfnded)
Choose thws option for the safest way to store tack-ups. The hard drsk that you use 
will be formatted and then dedicated to Only ttOrt backups.
O Back up to a volume
Choose this option if you cannot dedicate an entire ditfc for backups. Note that the 
performance of the volume may be reduced by up to 2W percent wMt it »s used 
to store backups. We recommend that you do not store other server data on the 
same volume.
O Back up to a shared network folder
Choose this option if you do not want to store backups locally on the server. Note 
that you will oMy have c*ie
 backup at a time because when you create a new 
backup it overwrites the previous backup.
| < Previous 11 Hwtb 
Caned
Figure 9.21: Configuring Windows server backup schedule 
for domain controller

Figure 9.22: Configuring Windows server backup schedule 
for domain controller
We will confirm that the backup disk would be excluded 
from backups, and then we will confirm all settings in the 
Confirmation step, as illustrated in Figure 9.23 and Figure

. _ DUZKQRm 
X +
<- -> C • b>t-
*10d6T(M^M65.4Z2
*.9M2~4WrfQ355d
*xtMMwn.Mur»xcm^
 O |5 * ft Sf [] X
a -^n - [« 
rr-“——-------------------------------
_. 
ic u i ML- Backup Schedule Wixard
rile AcEipn View Help
{£
*  local Backup
Windows Server backup (L
Confirmation
Getting Scarfed
Select 8*c
 kup Configur-rt—
Speedy Backup Twne
Speedy 0«iin ition Type
Select Deitmation Owk
You >ie atiput ip create the fuBgwing backup schedule.
Cadcup times;
Files e^cWed;
Advanced opCiiin:
11:30 PM
None
VSS FuB Backup
CbnhrnMfrOri
Summaty
Backup dctfwaliorij
Name Label 
Sia 
Used Space
)Mi<itwltiihu QOZHQ021H- WO69 
iMtMB ~
>>
Backup Sems
Name
J5 Bare metal recovery
EFI Syiftem Partrtion 
Reccveiy
® System state
Tempciaiy Storage <OcJ
* Previous
Cancel
Figure 9.23: Excluding the backup disk from backups and 
finishing the scheduling process

Figure 9.24: Excluding the backup disk from backups and 
finishing the scheduling process
The same operation could be performed using PowerShell, 
but we need to ensure that backup is configured for all 
volumes that will be required to restore server OS, 
including all Active Directory information, and excluding 
volumes that are not necessary (backup target and 
temporary storage). It needs to be adjusted as follows:

#Specify Disk number before proceeding
= 2
$Policy =
#Add Backup Items
$Volumes = Get-WBVolume
$Policy
-Volume $Volumes -Policy $Policy
#Add Backup Target
$Disk = Get-WBDisk | Where {$_.DiskNumber -eq 
$DiskNumber}
$BackupLocation = -Disk $Disk -Label "Backup Disk"
Add-WBBackupTarget -Target -Policy $Policy 
#Remove Backup Disk from Backups

= -Disk $Disk
= D:
Remove-WBVolume -Volume -Policy $Policy
Remove-WBVolume -Volume -Policy $Policy
#Create Schedule
-Policy $Policy -Schedule
-Policy $Policy -Force
And at the end, we can query the settings using the Get- 
WBPolicy to ensure that everything is set up accurately, as 
illustrated in Figure

Figure 9.25: Configuring and verifying the Windows server 
backup policy
If the SystemState property is set to the BMR property set 
to True includes the system state backup automatically.
After it is configured, we could enforce the backup to be 
performed immediately using the Backup Once option with 
the Backup This will ensure that all the settings are 
configured properly. There will be no issues with daily 
backups. An example of backup is shown in Figure

Figure 9.26: Test Backup progress using the scheduled
settings

Non-authoritative domain controller restores
To perform non-authoritative restore operation, we would 
need to make sure we have access to our system state 
backup performed locally on the domain controller or 
system state backup that was secured on the network 
share, or we would need to use backup solutions like 
Microsoft Azure Recovery Services Agent or Microsoft Azure 
Backup Server
We could perform the Bare-metal recovery if the server 
needs to be rebuilt entirely without pre-installing the 
Windows OS or reusing the existing server and restoring 
the system state.
We run our systems as Azure VMs, which is why we only 
perform local backups using WSB now. Later in the 
chapter, we will discuss the global backup solution using 
Azure backups.
We need to make sure we have access to the DSRM 
password, which we used for recovery purposes during AD 
promotion. It is important to know where those passwords 
are stored securely.

As soon as we ensure access to our system state backups 
Metal Recovery includes system state backups) and 
Directory Services Restore Mode password (which is set 
during domain controller promotion and can be changed 
on Production environment later), we start the process by 
booting the domain controller into the DSRM mode. To boot 
the server into the DSRM mode, you need to use F8 during 
the boot and choose the directory service restore mode 
and confirm. From there, we can use MSCONFIG to 
navigate to the boot options, and then mark the safe book 
and select Active Directory as illustrated in Figure
Figure 9.27: Enabling booting into DSRM mode

The same operation can be performed with the Bcdedit 
tool from PowerShell. To modify these settings and 
immediately reboot the server after the modification, we 
need to execute the following command:
Bcdedit safeboot dsrepair
For booting into the DSRM mode, we need to provide the 
DSRM user and password. The user’s name is 
Administrator, and the DSRM password is the one we 
provided during the domain controller promotion. After we 
log in to the server, we see the indication that is server OS 
is started into safe mode with Safe Mode text on the 
desktop background, as illustrated in Figure

I Local Server
igi ADDS
£, DNS
■h File and Storage Services >
Figure 9.28: Booting into safe mode
Once we are in the DSRM mode, we can check whether we 
have a backup available to us. We will use the following 
command in PowerShell:
wbadmin get versions
As we are not using a network or backup from a different 
location, we do not need to specify the backup location 
parameter. If we want to specify the location, we can either 
specify the disk identifier or drive letter if it is mounted. To 
get the available disk, we specify the following command:

wbadmin get disks
Later, we specify the disk ID when specifying the location:
wbadmin get versions
The results are illustrated in Figure
Figure 9.29: Getting backup details using wbadmin tool

Once we identify which backup we would like to use, we 
trigger the recovery using the following command in 
PowerShell:
wbadmin start systemstaterecovery
Confirm it a couple of times and start the process, as 
shown in Figure 9.30 and Figure
M OCAZROOTOOI
<- -> C 8 bst-835a6215-eefS-4flc-bc6a-49ec16acb76b.bastionjzure.com/*/client/REN... □ |£ ☆ 
> □ X
E3 Administrator: Windows PowerShell 
— 
□ X
Backup tine: 1/13/2023 12:21 AH
Backup target: Fixed Disk labeled Backup Disk (63.85 GB)
Version Identifier: 01/13/2023-00:21
can recover: Volume(s), File(s), Application(s), Bare Metal Recovery, System State
Snapshot ID: {110e6dla-cc0f-4030-ac31-518252d5f21b}
Backup time: 1/1S/2023 S:10 PM
Backup target: Fixed Disk labeled Backup Disk (63.85 GB) 
version identifier: 01/15/2023-17:10
can recover: Volume(s), File(s), Application(s), Bare Metal Recovery, System State
snapshot ID: {74b89a2f-9adb-43d9-86c4-a8c8498da79b}
PS C:\Users\Ad«inistrator> wbadmin start systemstaterecovery -version:"01/15/2023-17:10" 
wbadmin 1.0 - Backup command-line tool 
gg) copyright Microsoft corporation. All rights reserved.
Do you want to start the system state recovery operation? 
[v] Yes [NJ No y
Note: The recovery operation will cause all replicated content (replicated 
using dfsr or FRS) on the local computer to resynchronize after recovery.
The rise in network traffic due to ^synchronization may cause potential 
latency or outage issues.
System state recovery cannot be paused or cancelled once it has started.
It will need a restart of the server to complete the recovery operation.
Do you want to continue ?
[Y] Yes [N] No y_
Safe Mode
Figure 9.30: Restoring domain controller from system state 
backup

Figure 9.31: Restoring domain controller from system state
backup
In different manuals, it is advised to not reboot the server 
before taking the following steps, but if we put the server 
into DSRM mode and it has the flag to boot into the DSRM 
mode, AD will not be started and authoritative restore can 
be easily performed after the reboot. After the server is 
rebooted, we will receive a summary of the system 
restoration, as shown in Figure

Copyright Microsoft Corporation. All rights reserved.
wbadmin 1.0 - Backup command-line tool 
(C)
system state recovery operation that started at 1/18/2623 8:42 AM 
successfully completed.
has 
Press ENTER to continue...
Figure 9.32: Non-authoritative restore summary

Authoritative domain controller restore
To perform the authoritative domain controller restore, we 
perform the non-authoritative restore as a start. We cannot 
boot the server into normal mode, so it will not start the 
replication with the other domain controllers. After the 
server is restored and booted into the DSRM mode again, 
we can perform the following procedure.
We use the ntdsutil tool, activate our NTDS instance, and 
put the console into the authoritative restore mode using 
the following commands:
ntdsutil
activate instance ntds
authoritative restore
The results are illustrated in Figure

■■ DCAZROOTOOl 
X +
<- -> C ft bst-5891b5a5-5394-4cf0-9ee0-aff3259a5a40bastion.azure.co... □ 
□ X
SafeMc^e 
Microsoft (R) Windows (R) (Build 20348.fe_release.210S07-1500) 
Safe Mod,
Administrator Windows PowerShell 
— 
□ X
Windows PowerShell 
> .
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows
PS C:\Users\Administrator.OCAZROOT001s ntdsutil
C:\Windows\system32\ntdsutil.exe: activate instance ntds 
Active instance set to "ntds".
C:\Windows\system32\ntdsutil.exe: authoritative restore 
authoritative restore: _
Sate Mode 
Safe Model
Figure 9.33: Starting authoritative restore process
Now, because we would like to restore the entire AD 
instance authoritatively, we need to execute the following 
command:
Restore subtree DC=adpstest,DC=net
We cannot use the restore database command as it is not 
supported in Windows Server 2008 onward. We need to 
restore the entire domain partition that the domain 
controller is hosting. We will be asked for confirmation

before performing the authoritative restore, as shown in
Figure
Figure 9.34: Starting authoritative restore process
As we performed root domain restoration after 
confirmation, we will be informed about which partitions 
were not marked to be restored. We can again perform 
restoration of those, but we will not do this for partitions 
hosted by domain controllers in different domains, like as 
illustrated in Figure

■i DCAZROOTOQ1 
x +
<- -> C a bst-5891b5a5-5394-4d0-9ee0-aff3259a5a40.bastion.azure.co... B & ☆ 
* 
□ X :
Safe Mod e 
Microsoft (R) Windows (R) (Build 20S48.f e_release.210507
*
 1500) 
Safe Mod
Select Administrator Windows PowerShell 
— 
□ X
Successfully updated 461 records.
The following sub-NCs were not updated: 
(0) DC-ap,DC-adpstest,DC-net__________________
nicu-Configurat ion, OC-adpstest,DC-net
(2) DC-DoinainOnsZones,DC-adpstest,DC-net|
(3) DC-eu,DC-adpstest,DC-net
(4) DC-ForestDnsZones,DC-adpstest,DC-net
The following text file with a list of authoritatively restored objects has been created in the cu 
went working directory:
ar_20230118- 2 30839_objects.txt
One or more specified objects have back-links in this domain. The following LDIF files with link r 
estore operations have been created in the current working directory: 
ar_20230118-230839_links_adpstest.net-Configuration.Idf 
ar_20230118-230839_1inks_adpstest.net.Idf
Authoritative Restore completed successfully.
authoritative restore: _
Sate Mode
Sate Mod
Figure 9.35 : Authoritative restore summary
To complete the restoration process, we need to boot into 
normal mode; to achieve this, we need to run the bcdedit 
command again, but now with the deletion of the safe 
mode entry, as follows:
bcdedit safeboot
Results are illustrated in Figure

Safe Mode
C:\Windows\system32\ntdsutil.exe: q 
PS C:\Users\Administrator.DCAZROOT001> 
The operation completed successfully. 
PS C:\Users\Administrator.DCAZROOT001>
□ Make ait 
pennaner
□ No GUI boot
□ Boot log
□ Bast video
O QS boot nformatxn
□ Safe boot 
Mnmal 
Alternate she!
C Active Dree tor y regar 
Network
Figure 9.36 : Exiting the safe boot mode using bcdedit
Then we restart the server; the domain controller should 
replicate changes out to other domain controllers in 
domain and forest-wide global catalogs servers.
We need to make sure the server operates properly after 
the restoration. There are no issues that can be spotted in 
the monitoring, event log, and management interfaces. If 
there are errors and AD is not running properly on the 
server, each of those errors need to be troubleshooted by 
administrators and verified with KB articles from Microsoft 
to find the possible resolution.

Organizational unit restores
When the AD Recycle Bin was not enabled or there were 
some unauthorized modifications performed inside the 
subtree, we were unable to track the changes. Group 
memberships were changed or attributes where 
misconfigured . We need to rollback those changes 
manually or perform authoritative restore of a specific 
subtree inside AD which is the last option to consider.
To perform this, we follow the exact steps for the non- 
authoritative restore procedure when restoring the entire 
domain partition. After the server is rebooted into DSRM 
with non-authoritative restore, we follow the same steps as 
per authoritative restore, as shown here:
ntdsutil
activate instance ntds
authoritative restore
Then we provide a specific OU or container distinguished 
name that we want to mark for authoritative For example, 

the users’ container that holds a lot of standard users and 
group objects:
restore subtree
The results are illustrated in Figure
< DCAZROOTOOI 
X +
<- -> C a bst-5891bSaS-5394-4cfO-9««0-aff3259j5»40.bartion.»iiir«.com/
*/d!eot/R£NBWUPT1._
 B * 
> ==/ □ X
ISafe^^e 
Microsoft (R) Windows (R) (Budd 20348.fe.release210507-1500) 
Safe Modd
Administrator Windows PowerShell 
—OX
r«PS C:\Users\Administrator.DCAZROOT001> ntdsutil
C:\Windows\systea32\ntdsutil.exe: activate instance ntds 
Active instance set to "ntds
**
.
C:\wlndows\system32\ntdsucil.exe: authoritative restore 
authoritative restore: restore subtree CN«Users/DC«adpstest,DC«net
Opening 01T database... Done.
The current time is 01-18-23 23:29.15.
Most recent database update occured at 01-18-23 23:08.39.
Increasing attribute version numbers by 100000.
Counting records that need updating...
Records found: 00000000/0
Done,
Found 70 records to update.
Updating records...
„ Records remaining: 0000000000 
Sa Done.
Successfully updated 70 records.
The following text file with a list of authoritatively restored objects has been created in the current working 
directory.
ar_20230118-232915_objects.txt
One or more specified objects have back-links in this domain. The following LDIF files with link restore operat 
ions have been created in the current working directory:
ar_20230118-232915_links_adpstest.net.Idf
Authoritative Restore completed successfully.
authoritative restore: —
Safe Mode 
Safe Model

Figure 9.37 : Authoritative restore of specific OU or 
container
For booting to the normal mode, we perform the same 
operations that were illustrated in Figure 9.25 in the 
previous section.
We need to make sure that the server is operating properly 
and the objects we specifically restored are now replicated 
to the different domain controllers. It would be good to 
verify that specific objects were restored using standard 
AD tools like dsa.msc console, to ensure that everything 
went properly, and we can now focus on the post-recovery 
steps and on re-introducing AD objects to customers.

Object restores
To perform specific object restores, we follow the exact 
steps as we did for the non-authoritative restore 
procedure and the ones we followed when restoring the 
entire domain partition. After the server is rebooted into 
DSRM with non-authoritative restore, we follow the 
same steps as per the authoritative restore:
ntdsutil
activate instance ntds
authoritative restore
Then we provide a specific object name that we want to 
mark for authoritative Domain admins group is used as 
the example group object that we will restore in our 
following test:
restore object "CN=domain
The results are shown in Figure

■ KAZRCCTQ01 
X +
4 0 
■ bsl-S891Wi5-MW-4<iO-9^-atf32S9>5»4abwtiWkwuw4»ni.'
*/
clifnt/KgNBWUPTL.. Q £ 
> =J □ X ;
M-zrc-wit (R| Windows I.R.I |Bv4d 2OJ48Je_#e
*eii«2KfiC7-1
500] 
SJ
*e
 Mod-
W Adfiw^rrfor.W<wkhHP&*wSbell 
— 
□ X
fcW
£; VkfirHlimt\Sj,Slt.li\nTJSuTll.raO: attiirtte 
nidi
Active ipittance set to "nWs'.
t: '-. H i ndowa \ay it€Bli\ntd >ut i 1 . c k* : author it at iw« rtitort 
authoritative restore: restore object "CN^daaain adeins^CN-Usefs^DC-adpsiestfCC-net^
Opening DIT database... Done.
The current tiw> it fll- 18-33 21:41.19.
Most recent database update occured at 01-18-23 23:29,15.
Increasing attribute version niabers by IBBMei.
Counting records that n^ed updating,,. 
Rfrtords found: iMOOiKmiO 
Dcwie.
Found IS records to update .■
Updating records,..
„ Records rewaining: OOOOOOOlXK) 
f“ Done..
Successfully updated io records.
The following text file with a list of authoritatively restored objects has been created in the current Marking 
directory:
ar_20234118-234139_ob jects,txt
One or none specified objects have back-links in this dfrnaln. The following LDIF files with link restore operat 
ions have been created in the current working directory:
ar_292 30118-214119_15 nksadpit efit.net.idf
Authoritative Rastorf coaplcted successfully-
authoritative restore: _
EafeM&d« 
SJrMod,
Figure 9.38 : Authoritative restore of a specific object
For booting to the normal mode, we perform the same 
operations that were illustrated in Figure 9.26 in the 
previous section.

If this information performed the restore, we need to 
make sure the group object is properly replicated to 
different domain controllers, including the membership. 
Same operation can restore any type of object other 
than groups as well.

SYSVOL recovery
When performing the non-authoritative or authoritative 
restore of the domain controller, we can restore the 
SYSVOL files authoritatively as well. We cannot proceed 
with the non-authoritative restore as the SYSVOL recovery 
switch needs to be specified during wbadmin recovery.
We need to boot the server into safe mode; we can use the 
same command as earlier:
Bcdedit safeboot dsrepair
The result is illustrated in Figure

■ OCAZROOTOOI 
X +
<- -> C ■ bst-52bb2587-f02d-4604-98aa-4c6013c6ac11.bastion.azure.eom/#/client/RE... D l£ ☆ ft =7 □ £ 
:
J Administrator Windows PowerShell 
—OX
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows
PS C:\Windows\system32> bededit /set safeboot dsrepair 
The operation completed successfully.
PS C:\Windows\system32> restart-computer -force o
Figure 9.39 : Enabling booting into DSRM mode using 
bcdedit
After the server is booted into the DSRM mode, we need to 
list the available backups. For local backups, we specify the 
command as follows:
wbadmin get versions
We can select the right version by running the following 
command:

wbadmin start systemstaterecovery
The results of the command are shown in Figure 9.40 and
Figure
M KAZROOTOOI 
X +
<- -> O i t«v3^Sj9007-Cd60‘411f->ft3€‘4S5c7J4$fl?OJ4?iS:i
*i
siJ2ur
*XCirfi.
,*7Cf
*4**t..
 O 
□) X :
SafeMotfe 
Mkr^coH (R) Windwrt (R) (Quid 2d JAB. 
J I 0507^150^ 
S*feM»
® hl!.. .iijj.j.i^.i....I,|.|J1.I.I.flUiI.J.|J|,|J...-.Ijjj.uj.pffww
**
wwwa
RKydeB,n Overall prOfHH! 93%. 
currently recovering files reported by system writer' 
Overall progress: 93%. 
Currently recovering files reported by 'System writer' 
Overall progress: 94%. 
Current ly recovering files reported by ' Syit<
*m
 Writer" 
Overall progress: 94%. 
Currently recovering files reported by *System Writer" 
Overall progress; 9SX. 
Currently recovering files reported by 'System Writer' 
Overall progress: 96%. 
Currently recovering files reported by 'System writer' 
Overall progress: 96%. 
Currently recovering files reported by 'System writer" 
Overall progress: 98%. 
Currently recovering files reported by 'System Writer" 
m 
Cleaning up...
« 
Summary of the recovery operation:
The recovery of the system state successfully completed [1/19/2023 10:19 PM].
log of files successfully recovered; 
H
C:\Wi ndowsklogs\Windows5erverBackup\5ystemStateRestore-19-01-2O23_22-IB- 55.log
Restart the server to complete the operation. 
H
Wote: Please wait while the system state recovery operation attempts to 
H
recover system files. This might take several minutes to complete, depending 
on how many files are .getting replaced and the server restarts neededi during 
the process. Do not interrupt this process.
fi computer restart is required to complete the system state recovery operation. 
H
Press [Y] to restart the computer now.
[VJ ves . 
[J
lijifi Modi___________________________________________________________________________________________________________________ Suit Mod
Figure 9.40 : Starting system state recovery with 
authoritative SYSVOL restore

■ XAJROCfTMl 
x +
<- -> C la bst-3fl5aW7-cdW-41Jlf-ae36-d8Sc7aa9fbO3.bastipn.a!urMpm/
*/client...
 □ |£ li * ~J □ X
ISafeMfflfe 
MkfOMrft [fl) Windows {R) (BuiFd 20343 .fe,rrle j;t210»7-1 »0) 
Safe Model
33 Adfninijtrjrtor Comma nd Preen pt • Cabadmin $1art syftcmittictCCQVtty«vertione"DI/lfl/20?J'CCtJS" **
U
— 
“ O X
C:{Users)Admlnistcator.MA2ROOT B61Jwbadmin start systemstaterecovery - version;"61/18/262 
3-68:24" -authsysvol 
wbadmin 1-6 - Backup command-line tool
<C) Copyright Microsoft Corporation. All rights reserved.
Do you want to start the system state recovery operation? 
[Y] Yes [MJ Ko y
Note; The recovery aperat lew will cause all replicated content (replicated 
using DFSR or FRS) on the local computer to resynchronize after recovery. 
The rise in network traffic duo to resynchepnijation may cause potential 
latency or outage issues. 
The recovery operation will reset ail replicated content {replicated using 
DFSR or FRS) on this domain controller, including SYSVOL, If you have other 
replicated folders on this server ano do not want them to he affected by the 
recovery, cancel this operation now.
DO you pant to continue? 
[¥} Yes [H] ho y
System state recovery cannot be paused on cancelled once it has started, 
rt will need a restart of the server to complete the recovery operation,
Do you want to continue 7 
(¥] Yes [HJ ho y
Starting a system state recovery operation [1/19/2623 16:18 PH J. 
Processing files for recovery. This might rake a few minutes... 
Processed (92) files.
Processed (396) files.
I Safe Mode__________________________________________________________________________________________________________________________ Safe Medel
Figure 9.41 : Starting system state recovery with 
authoritative SYSVOL restore
Now we proceed with the reboot of the server; after the 
restart is completed, we can continue with non- 
authoritative restore or authoritative restore. It depends on 
our needs, but the files for AD and SYSVOL are not 
recovered.
At the end of the recovery, we remove the safe boot entry 
and boot it into normal mode.


Non-authoritative SYSVOL synchronization
There may be situations when SYSVOL on a specific 
domain controller will no longer synchronize properly, but 
we do not need to restore the SYSVOL from backup as the 
content is proper and is not corrupted on other DCs. 
Therefore it is always good to have at least three domain 
controllers per domain in the forest. We can tell which one 
requires troubleshooting and recovery operations.
Non-authoritative sync will force domain controller to 
synchronize data from its replication partner regardless of 
the current replication status.
We need to disable DFSR for the specific domain controller. 
Using we modify the values for the SYSVOL DFSR 
namespace. Start the tool and connect to the default 
naming context. Navigate to the object and modify the 
msDFSR-Enabled attribute to as illustrated in Figure

Figure 9.42: Disabling the DFSR replication using ADSI edit
The same operation can be performed using the following 
command:
"CN=SYSVOL Subscription,CN = Domain System
Volume,CN=DFSR-
LocalSettings,CN=DCAZEU001,OU=Domain
Controllers,DC=eu,DC=adpstest,DC=net"

It is good to push replication to ensure that all DCs in the 
domain are aware of the change:
repadmin
We need to wait until SYSVOL is replicated to all DCs in the 
domain, and then we proceed with the following:
DFSRDIAG POLLAD
We need to find Event ID: 4114 in the Event which will 
indicate that the DFS is no longer replicating, as illustrated 
in Figure

Figure 9.43: Performing the DFS non-authoritative restore
Now we need to re-enable the DFS Replication by reverting 
the msDFSR-Enabled attribute to True and force the 
replication as follows:
"CN=SYSVOL Subscription,CN = Domain System
Volume,CN=DFSR-
LocalSettings,CN=DCAZEU001,OU=Domain
Controllers,DC=eu,DC=adpstest,DC=net"
repadmin
DFSRDIAG POLLAD

We should receive the 4614 and 4614 events in the DFS 
Replication logs after we run the PowerShell commands 
from the previous example. The results are shown in Figure
DCAZEU001 
X +
<- -> C a bst-0b222b4d-9821-4ea7-92dc-81379350b52a.bastion.azure.com/-/clien... □ <t *=?□©:
E /ent Viewer
File Action View Help 
aralB
a Administrator Windows PowerShell
| Event Viewer (Local) 
f Custom Views
1Windows Logs 
[, ] Application 
f] Security 
n s«“p 
f"| System 
[—] Forwarded Events
13 Applications and Services Logs 
[, ] Active Directory Web Servic 
(T| DFS Replication 
[T] Directory Service
>> f] DNS Server
(T| Hardware Events 
f] Internet Explorer 
[•] Key Management Service
> □ Microsoft
> □ OpenSSH
(7] Operations Manager
DFS Replication Number of events: 192
Actions
4
Level 
Date and Time 
Source Event ID Task Ca...
A Warning 
1/20/2023 10:28:20 PM 
DFSR 
4614 None
©Information 
1/20/2023 92941 PM 
DFSR 
4114 None
©Information 
1/20/2023 914:40 PM 
DFSR 
4114 None
DFS Replication a 
Open Saved — 
Create Gust...
[j| Event Properties • Event 4614, DFSR
General Details
X
♦
*
The DFS Replication service initialized SYSVOL at local path C:\Windows\Sysvol\domain and is 
a
waiting to perform initial replication. The replicated folder will remain in the initial synchronization 
state until it has replicated with its partner. If the server was in the process of being promoted to a 
domain controller, the domain controller will not advertize and function as a domain controller 
until this issue is resolved. This can occur if the specified partner is also in the initial 
synchronization state, or if sharing violations are encountered on this server or the synchronization 
partner. If this event occurred dunng the migration of SYSVOL from File Replication service (FRS) to v
og Name: 
DFS Replication
uuure:__________DFSR___________________ 1 nnned:_______1/2n/?fV3 lfr?R-7fi PM
PS C:\Windows\systen32> DFSRDIAG POLLAD
Operation Succeeded
PS C:\Windows\systen32> _
Figure 9.44: Re-initializing the DFSR replication for SYSVOL 
restore

Authoritative SYSVOL synchronization
Authoritative SYSVOL synchronization is useful in situations 
when we can find proper GPOs and scripts information 
except the one with the recent changes. In some 
scenarios, files are not created in multiple domain 
controllers due to replication with the faulty server. To 
perform the sync, we need to follow these steps:
Stop the DFSR service on all domain controllers in the 
domain and set the StartupType to manual:
DFSR -StartupType Manual |
DFSR
The results are shown in Figure

— DCAZEU001 
X +
<- -> C ft bst-0b222b4d-9821-4ea7-92dc-81379350b52a.bastion.azure.com.. 0 
☆ A ==J □ 0 :
a Administrator. Windows PowerShell 
—OX
PS C:\Windows\system32> Set-Service dfsr -StartupType Manual -PassThru | Stop-Service
PS C:\Windows\system32> get-service dfsr
Status 
Name 
OisplayName
Stopped dfsr 
DFS Replication
PS C:\windows\system32> _
SS
Figure 9.45: Stopping the DFSR service
Set the attributes for DFSR service properties on the server 
that will be authoritative:
"CN=SYSVOL Subscription,CN = Domain System
Volume,CN=DFSR-
LocalSettings,CN = DCAZEU001,OU=Domain
Controllers,DC=eu,DC=adpstest,DC=net"

"CN=SYSVOL Subscription,CN = Domain System
Volume,CN=DFSR-
LocalSettings,CN = DCAZEU001,OU=Domain
Controllers,DC=eu,DC=adpstest,DC=net"
Modify the attributes on the rest of the domain controllers; 
specify them as follows:
"CN=SYSVOL Subscription,CN = Domain System
Controllers,DC=eu,DC=adpstest,DC=net"
Before replication on all DCs, use the following command 
on every domain controller:
repadmin
Start the DFSR service on the server and wait for Event
dfsr -StartupType Automatic -PassThru |
Refer to Figure

Figure 9.46: Checking the DFSR authoritative status step
Modify the DFSR attributes back for replication on the 
authoritative DC:
"CN=SYSVOL Subscription,CN = Domain System
Volume,CN=DFSR-
LocalSettings,CN = DCAZEU001,OU=Domain
Controllers,DC=eu,DC=adpstest,DC=net"
Force replication on every domain controller using the 
following:

repadmin
Execute this command on the domain controller where we 
perform authoritative restore and wait for event 4114:
DFSRDIAG POLLAD
Results are shown in Figure

Figure 9.47: Checking the DFSR authoritative status step
Start the DFSR service on other domain controllers in the 
domain and wait for event 4114:
dfsr -StartupType Automatic -PassThru |
Modify the DFSR attributes for controllers in the domain:
"CN=SYSVOL Subscription,CN = Domain System
Controllers,DC=eu,DC=adpstest,DC=net"
Execute the following command on all other domain 
controllers in the domain:
DFSRDIAG POLLAD

Implementing the global DR solution
When planning disaster recovery for the entire AD forest, 
we cannot rely on the local backups that run on multiple 
domain controllers. The main reason is that if all the 
domain controllers fail, we need to have remote backup 
copies kept somewhere.
In Azure and on-premises servers, the Microsoft provided 
solutions would be Microsoft DPM, Azure Backup, Azure 
Microsoft Azure Backup Server (MABS) and Microsoft Azure 
Recovery Services (MARS) Agents.
We could use third-party products, but the backup solution 
for AD is not only solving the backup problem; it needs to 
solve the security problem as well, as whoever owns AD 
backups can easily get hold of the passwords of all users.
We will show the scenario of Azure backup implemented 
for our Azure VMs. Solution can be extended with Azure 
MARS agent backup or MABS server implementation for on­
premises infrastructure. All the mentioned solutions will 
use the recovery services vault for managing backup jobs 
and storing the backups.

To implement a solution in Azure, we need to start with the 
creation of the isolated virtual network that would be 
useful when performing AD full forest recovery or DR 
services, as we would not introduce it to the customers. 
After the replication, we will connect the production 
network or serve the recovery testing isolation for disaster 
recovery tests.
We will navigate to the virtual networks using the Create 
option and follow the creation of the network. Specify the 
desired network space; even if it is isolated, we should use 
unique addressing. Save the possibility of routing the 
network in the future.
We can create the disaster recovery resource group and 
group all the resources related to disaster recovery as a 
task of the DR testing. Recovery process could be 
delegated to a separate DR testing team in the future, and 
the cost of the DR solution would be easily identified with 
the Azure cost reporting for the Resource Details of the 
specific virtual network created inside the new Resource 
Group can be specified shown in Figure

Figure 9.48: DR virtual network creation in the new 
resource group
Creation of the virtual network is important before the 
Recovery Services Vault (RSV) because we do not want 
RSV to be available on any network and the internet as 
well. By using the private endpoints, we can lock down the 
possibility of backing up and restoring data outside the 
networks that are connected using the private endpoint 
with a private link to the RSV.

To create the vault, we need to navigate to Recovery 
Services Vault and use the Create option. Provide the name 
and use the Disaster Recovery Resource group created 
with the virtual network and confirm. The details are 
shown in Figure
Figure 9.49: Recovery services vault creation

It is important to create the private endpoints before any 
backup items are created with the RSV, as we would not be 
able to perform the linking with the RSV if the backup 
items are already configured. To disable public access, 
navigate to the RSV resource, choose the networking 
option and deny public access.
To create private endpoints and secure RSV to be used 
only with specific virtual networks, we need to navigate to 
the vault object, choose the networking menu, and go to 
the private access tab. Follow the Create a private 
endpoint option, choose the target sub-resource with the 
Azure backup option, and specify the virtual network where 
the domain controllers are hosted. Private DNS zones are 
important if we are trying to back up the on-premises 
workload, but they are irrelevant in terms of the backup of 
VMs in Azure as they do not rely on network connectivity. 
Details of the private endpoints for the standard network 
and for the isolated network can be set as illustrated in 
Figure 9.50 and Figure

Figure 9.50: Private endpoint creation for recovery services 
vaults


Ai Create a private endpoint • Mic X
V
- 
□ X
-)■ 0 
■ portaLazure.eom/#view/Microsoft_ Azure .Network/CreatePriv... Li 
- J [J A :
Microsoft Azure
P Search resources, services, and docs (G+/)
Home > RecoveryServicesVault-AD-DR | Networking >
Create a private endpoint
x
Q Validation passed
Resource x/ Virtual Network x/ DNS x/ Tags 0 Review + create
Basics
Subscription
Resource group
Region
Name
ADPpwershellAzure
Network Interface Name
Res
*Group
*DisasterRecovery
West Europe
PrivateEndpoint-RSV-AD-DEV-DR
PrivateEndpoint-RSV
*AD-DEV-DR-nic
Resource
Subscription ID 
Link type 
Resource group 
Resource
Target sub-resource
8clc22ae-21d8-4a8c-a4dc-43aae2c76a90 (ADPowershellAzure)
Microsoft-RecoveryServices/vaults
Res-Group-DisasterRecovery
RecoveryServicesVault-AD-DR
AzureBackup
Virtual Network
Virtual network resource group
Virtual network
Subnet
Res-Group-DisasterRecovery 
Res-Group-Dev-ADTest-DR-vnet 
default
Network Policies
Disabled
Application security groups
None
Create
< Previous
Next >
Download a template for automation

Figure 9.51: Private endpoint creation for recovery services 
vaults
Once the underlying infrastructure is created, we can back 
up all the domain controllers from the networks that we 
connected with the private endpoints to RSV. We need to 
properly configure the DNS resolution that requires careful 
planning and configuration, as it is highly dependent on 
the other AD and infrastructure hosted by the customer. 
We can use MARS backup agents to back up the on­
premises or non-Azure AD servers if required.
To configure backup of the virtual machine using RSV, we 
need to navigate to the RSV and choose Backup from the 
getting started section, specify which type of workload we 
would like to back up (Azure VM in our case), and then 
start the wizard. It is fine to keep the Standard tier and add 
VM to the policy. VMs need to reside in the same region as 
we need to be part of the virtual network where we 
created the private endpoint. Backup settings are shown in 
Figure

Figure 9.52: Configuring backup for Azure domain
controller
After the backup is configured, we can verify it by negating 
it into the RSV Backup Items menu and then choosing the 
Virtual Machines and a specific server. It will show us the 
information regarding specific status and recovery points.

We can trigger the backup or restore operations as shown
in Figure
H 
ty 0 
© 
(2) 
adpowersbetazure^gm...
’ 
DEFAULT DIRfCTORY (ADPOWER
Microsoft Azure
/SON View
Backup Pre-Check
O Passed
Last backup status
2k Warning (Initial backup pending)
Backup policy
OtfaultPolicv
Oldest restore point
A DCAZROOTOO! • Microsoft Azu x +
<- C A portal.azure.eom/#view/Microsoft_Azure_DataProtection/V1Protectedlt... [i Q I*  A *•  ==J □ X
P Search resources, services, and docs (G
*/)
Home > Recovery Services vaults > RecoveryServicesVauh-AD-DR | Backup items > Backup items (Azure Virtual Machine) >
a DCAZROOT001 
x
Backup item
<£) Backup now *9  Restore VM "9 File Recovery O Stop backup O Resume backup © Delete backup data *9  Restore to Secondary Region •••
Q For backups, try our new Backup Center. it offers Asure Backup customers a unified view of Recovery Sen.- ces v»uts used for backup in Azure, it a so prov des 
improved sorting and filtering along with new governance caoao t es. C ck here to get the new e»per ence
Essentials
Recovery services vault
RecoverySenncesVauit-AD-DR
Subscription (move)
AD Powers he! IAgu re
Subscription ID
8c1c22ae«2ld8-4a$c-a4dc-43aae2c76a90
Alerts (>n last 24 hours)
Jobs (in last 24 hours)
Yicwjate
Recovery points
Tht$ list is filtered for last 30 days of recovery points. To recover from recovery point older than 30 days, as well as vault-archive cikk here.
Long term recovery points can be moved to vault-archive. To move all recommended recovery points' to vault-archive tier, click here.
I
’ CRASH CONSISTENT 
I APPLICATION CONSISTENT 
I FU-SYSTEM CONSISTENT
0 
Io 
Io
Creation time 
Consistency 
Recovery type
No restore points available.
Figure 9.53: Backup status details for Azure VM
We need to repeat the same process for all domains to 
make sure they are protected. At least 2-3 domain 
controllers from the same domain need to be protected by 
the global backup solution. During full forest recovery, we 
can restore one server from the domain, recreate other

DCs from fresh installation, and then replicate the data. So, 
it is not necessary to back up all domain controllers in the 
domain. If we choose to back up only specific domain 
controllers, we should choose the PDC and other FSMO role 
holders, but it is not mandatory as the roles can be 
transferred after ADRestore.

Conclusion
Even if AD Environment is distributed across multiple 
servers and regions, proper backup solution needs to be 
implemented to support multiple disaster recovery 
scenarios, from basic ones like object deletion to the 
more complex ones like domain controller restores.
In this chapter, we explained how to start building the 
global solution for the AD backup and restore it. 
However, we did not cover the extreme scenario, which 
is full forest recovery. It is a topic for an entire chapter 
and depends on how the infrastructure is implemented.
Microsoft provides a guide for full forest recovery in the 
following learning article:
https://learn.microsoft.com/en-us/windows- 
server/identity/ad-ds/manage/ad-forest-recovery-guide
To be ready for full forest recovery, we need to perform 
the DR testing regularly and make sure that the backup 
we configured is working properly. Hosting the domain 

controllers in Azure is an easy and quick solution to 
implement Azure backup. Microsoft fully supports the 
usage of Azure backup when performing disaster 
recovery for AD services.
Getting more confidence on the topic will ensure that 
when real recovery needs to be performed, it can be 
performed with fewer mistakes during the process.
It is important to make sure the configured backups are 
serving the purpose. The only way to ensure this is to 
perform regular disaster recovery tests. In bigger 
organizations, there are separate teams that are 
responsible for performing those tasks. It is better to 
keep the knowledge within the AD support team itself.
In the next chapter, we will try to understand how to 
manage a Windows server using PowerShell. We will 
introduce the Windows server core into the 
environment, configure the Windows Admin Center and 
manage the domain controllers remotely.
Join our book’s Discord space

Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

C
HAPTER 
10
Manage Windows Server Using PowerShell

Introduction
Active Directory was implemented long time ago, 
starting with Windows Server 2000, which replaced 
Windows NT directory implementation. There were not 
many options to manage those old operating systems 
remotely, except using remote desktop, WMIC remote 
commands, PsExec as examples.
With newer releases of the Windows Server, Microsoft 
introduced PowerShell as one of the ways to manage 
Windows OS. Along with Windows Remote Management 
(WinRM), it was increasingly used in Windows Server 
Administration and provided capabilities to manage 
many servers locally and remotely from one 
administrative machine.
Starting with Windows Server 2008, there was 
substantial progress on making the Windows Server 
become truly effectively managed using PowerShell, 
scripts and command line and introduced the concept of 
Windows Server Core. With the Core version, we did not 
get most GUI components of the system that totally 
changed how the servers need to be managed.

As Active Directory is installed as the Server Role 
without any additional software, it is fully compatible 
with the Window Server Core installations, and it is 
recommended that most of your domain controllers be 
installed with the Core option. This is because it more 
secure to not install any GUI-only applications, do not 
run any graphical components and not use servers to 
browse any internet pages, even if they are used to 
configure your infrastructure. Also, it consumes fewer 
resources to run without GUI.
Solution would require Active Directory management 
tools to be used on the separate server with standard 
GUI option as management server. On that Admin 
server, all the necessary RSAT tools need to be installed, 
and the AD will be fully managed remotely or on domain 
controllers using command line and PowerShell. 
Microsoft introduced a new software called Windows 
Admin Center, which depends on PowerShell and WINRM 
for management. Then the Web component of the 
server will be exposed to administrators so that they 
can use the tool from their browsers. However, this web 
management would need to be assessed from the 
security perspective if it is not exposing the Active 
Directory infrastructure to any additional risks.

In this chapter, we will go through the implementation 
of the Windows Server Core. We will join the server to 
the existing AD domain infrastructure, and then learn 
how to perform basic administrative tasks and try to 
remotely manage it using PowerShell, WMI and RSAT 
tools from the remote servers. Windows Admin Center 
will be introduced to the current infrastructure and used 
for remote server management. At the end of the 
chapter, we will try to perform bulk operations of 
multiple servers, schedule some reporting and trigger 
notifications if required.

Structure
This chapter will cover the following topics:
Windows Server Core implementation
RPC WMI and remote PowerShell sessions
Windows Admin Center implementation
Windows Admin Centre remote management
Executing bulk operations on multiple domain 
controllers
Scheduling reporting and notifications

Objectives
This module provides a comprehensive guide to efficient 
and secure Windows Server administration. It kicks off 
with the implementation of Windows Server Core, 
exploring the benefits of this streamlined environment. 
Delving deeper into server management, we cover RPC, 
WMI, and remote PowerShell sessions, offering practical 
insights for seamless operations.
The implementation of Windows Admin Center takes 
center stage, showcasing its functionalities and 
facilitating remote management. Readers gain 
proficiency in overseeing server infrastructure through 
Windows Admin Center. The module addresses the 
complexities of executing bulk operations on multiple 
domain controllers, providing strategic solutions for 
streamlined administration.
To enhance proactive management, we guide users in 
scheduling reporting and notifications, ensuring a 
responsive approach to server oversight. By the 
conclusion, participants will have a well-rounded skill set 
for effective Windows Server administration, crucial for 

optimizing performance and security in diverse 
enterprise environments.

Windows Server Core implementation
Despite Server Core being introduced quite some time ago, 
there are dependencies for the software used on Windows 
Servers that require the GUI components to operate 
properly. Before we use the Core experience, we need to 
make sure all the mandatory software used in the 
organization is compliant with the Core option.
Fortunately, as mentioned earlier, Active Directory Domain 
Controller is fully compliant with Windows Server Core.
Since Windows Server 2016, there is no way to switch from 
Core to GUI server and vice versa. That implies that the 
only way to get a server into the Core experience is to 
perform fresh installation and choose the Core option.
Microsoft Azure have all necessary OS Disk images 
available, so it is not an issue when provisioning those into 
the existing environment.
To deploy the server, navigate to the Virtual use option 
Create and choose the See all images option while picking 
up the desired Core version of the Windows Server OS. In 

our case, smalldisk image for Windows Server 2022 was 
chosen, as illustrated in Figure 10.1 and Figure
Figure 10.1: Creating Azure VM with the Core image
selected

Figure 10.2: Creating Azure VM with the Core image
selected
The specification of the VMs in the example is extremely 
low, as this is the test on how the responsiveness and 
resource utilization will be for the server Core

implementation. It is not recommended to use the specs 
inside production environments.
As soon as the server is installed and deployment is 
finished, it is available for administrator to log in and 
perform the necessary operations.
We can use the same tools to connect as RDP works 
normally on the Core server, only difference is missing rich 
GUI experience as in full server installations, instead we 
are getting the command line presented, as illustrated in 
Figure 10.3 and Figure

Figure 10.3: Creating Azure VM with the Core image 
selected

Figure 10.4: Creating Azure VM with the Core image
selected
Starting with Window Server 2022, SConfig tool will be 
presented after the log in screen. It can be used for easier 
server configuration, but because we would like to show 
the OS independent ways of configuring the server, we will 
skip the tool and exit to the command line.
When escaping to command line, the PowerShell will be 
started automatically in Windows Server 2022. However, if 

we log in directly to older versions, we will need to type 
PowerShell in the command line window to start 
PowerShell, as it is not used by default on those.
Server is now standalone, and it could stay this way; not 
every server in the environment needs to be as a member 
of Active Directory Domain. But we would like to highlight 
the scenario of running the AD Domain Controller using the 
Windows Server 2022 Datacenter Core.
Before we can join the server to the domain, we need to 
ensure that it has connectivity to resolve the domain 
name. As illustrated in Figure there is no connectivity, and 
the server has not configured the proper DNS addresses:

Figure 10.5: Domain DNS failed configuration
To change this, the best thing to do is to modify it inside 
Azure configuration and restart the server or execute 
command ipconfig We navigate to the server networking, 
choose the network adapter, and inside the DNS servers 
option, we place the IP of the primary eu.adpstest.net 
domain controller and second value we put the modified 
server private IP. We need to also make the server IP 
address static as a prerequisite for the domain controller 
promotion. Those operations can be performed as shown in 
Figure 10.6 and Figure

Figure 10.6: Reconfigure DNS settings for Azure VM with 
Windows Server Core installation

Home > DCAZEUOO3 I Networking > &aaeuOQ3292 I IP configurations >
ipconfigl - Microsoft Azure 
X
4- 
vOX
<- -> C A portal.azure.eom/#view/Microsoft_Azure_Netwo... O’ Li Q l^1 ☆ A ~J □ X ■
Microsoft Azure
P Search resources, services, and docs (G
*/)
... u
ipconfigl 
x
duuuaBSE
€1 Save X Discard
Public ip address settings
Puttie IP address
L Disassociate ]
Private BP address settings
Virtual network/subnet
Re4-Group-Dev-ADT«.t-vrtet2/de(fauH
Assignment
f D’/na
IPsddffts
*
______________________
| 10.1.0.5
Figure 10.7: Reconfigure DNS settings for Azure VM with 
Windows Server Core installation
After the server is rebooted, we can check the network 
configuration and confirm that the DNS server for the 
desired domain is available, we can only do this from the 
command line and PowerShell, as illustrated in Figure

■ DCAZEU003 
X +
<- -> C ■ bst-f792ab1d-e1f8-4b66-8cfd-60826b37972d.bastion.azure.com/#/client... D 
□
SS Administrator C:\Windows\system32\cmd.exe 
- o’ X
PS C:\Users\adpsadmin:> Resolve-DnsName eu.adpstest.net
Name
Type TTL
Section
IPAddress
eu.adpstest.net 
eu.adpstest.net
A 
600
A 
600
Answer 
Answer
10.1.0.4
10.0.0.6
PS C:\Users\adpsadmin:> test-netconnection eu.adpstest.net
ComputerName 
RemoteAddress 
InterfaceAlias 
SourceAddress 
PingSucceeded 
MngReplyDetails (RTF
: eu.adpstest.net 
: 10.6.0.6
: Ethernet 
: 10.1.0.5 
: True
) : 17 ms
PS C:\Users\adpsadmin:> Get-NetIPConfiguration
InterfaceAlias 
Interfacelndex 
InterfaceDescription 
NetProfile.Name 
IPv4Address
IPv60efaultGateway 
IPv4DefaultGateway 
DNSServer
Ethernet
6
Microsoft Hyper-V Network Adapter 
Network
10.1.0.5
10.1.0.1
10.0.0.6
10.1.0.5
Figure 10.8: Resolved connectivity with proper DNS 
settings pointing to eu.adpstest.net
We can start the promotion of the domain controller by 
installing the required features:
-IncludeAllSubFeature -IncludeManagementTools
Results of the command are illustrated in Figure

Figure 10.9: Installing necessary AD features
Then, we can use the promotion command, as follows:
EU\adpstest
Install-ADDSDomainController -DomainName 
eu.adpstest.net -SysvolPath C:\Windows\SYSVOL -LogPath 
C:\Windows\NTDS -DatabasePath C:\Windows\NTDS - 
Credential $creds
Results are shown in Figure 10.10 and Figure

Figure 10.10: Windows Server 2022 Core promotion to AD 
Domain Controller

Figure 10.11: Windows Server 2022 Core promotion to AD
Domain Controller
After reboot, we could verify that the server got properly 
promoted as AD Domain Controller, we need to log in using 
domain credentials for eu.adpstest.net domain and then 
execute the commands to get the user and server details, 
like whoami and as illustrated in Figure

Figure 10.12: Verifying Domain Controller status in
PowerShell

RPC, WMI and remote PSSessions
Remote Server Administration Tools (RSAT) use Remote 
Procedure Calls Until the RPC communication is allowed 
between two servers and the user session on the source 
server has permission to perform actions with specific 
administrative snap-in, there is no possibility that the 
Windows Server Core could not be managed the same way 
as any other Windows Server.
To enable remote management firewall rules, the following 
commands would need to be executed. We need to enable 
the following rule to allow all Microsoft Management 
Console tools to be working remotely:
$Rules = Remote Defender Firewall Remote "Remote Event 
Log "Remote Event Log "Remote Volume "Remote 
Scheduled Tasks
$Rules | Enable-NetFirewallRule $_
We must execute the following command when we want to 
enable the PowerShell remoting:

Enable-PSRemoting -Force
We can even use the Azure VM | Run Command option to 
do it without logging in to the server, as illustrated in 
Figure
Figure 10.13: Verifying Domain Controller status in
PowerShell
Except all Active Directory management tools, most MMC 
snap-ins can connect both to local and remote servers.

This is useful to perform operations or visualize data.
One of the example tools would be the Computer 
Management snap in. To start the Computer Management 
snap-in, we can either search for it in the start menu or 
open the mmc.exe tool and add the Computer 
Management snap-in to the console. When choosing the 
server, we need to switch from local to remote.
Normally, if most domain controllers are already migrated 
to Windows Server Core, this management is performed 
from hardened management server; in our example, we 
will use domain controller from EU domain with the Full GUI 
experience. Connecting to different servers with Computer 
Management tool is illustrated in Figure 10.14 and Figure

Figure 10.14: Connecting remotely with Computer 
Management

Figure 10.15: Connecting remotely with Computer
Management
Let us try to use PowerShell remoting:
Enter-Pssession
Executing this command, we got the error illustrated in 
Figure

■1 DCAZEU001 
X +
C 8 bst-dc5f0eac-f4l8-4ea1-8611-7a8240a24ff3.bastion.azure.co... □ [£? ☆ 
* El * 
:
Administrator. Windows PowerShell 
—OX
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
In 
stall the latest Powershell for new features and improvements! https://aka.ras/PSWindows
PS C:\ 
Windows\system32> enter-pssession dcazeu003.eu.adpstest.net -Port 5985 
enter-ps
session : Connecting to remote server dcazeu003.eu.adpstest.net failed with the following 
error message : WinRM cannot complete the operation. Verify that the specified computer nam 
e is valid, that the computer is accessible over the network, and that a 
firewall exception for the WinRM service is enabled and allows access from this computer. 
By default, the WinRM firewall exception for public profiles limits access to remote 
computers within the same local subnet. For more information, see the 
SSout_Remote_Troubleshooting Help topic.
At line:l char:l 
♦ enter-pssession dcazeu003.eu.adpstest.net -Port 5985
+ Categoryinfo 
: InvalidArgument: (dcazeu003.eu.adpstest.net:String) [Enter-P
SSession], PSRemotingTransportException
+ FullyQualifiedErrorld : CreateRemoteRunspaceFailed
Figure 10.1 6: Connecting remotely with Computer 
Management
This was because network interface is classified as public; 
there was modification for the rules to allow the traffic 
from the domain controller. Also, network interface could 
be changed to have network category setting with private 
or domain value. Changes to firewall rules are illustrated in 
Figure

KAitutai 
x +
□ x
<*  -> C * bsl-dc5fOMC-fi18-iea1-361 l-7a62J0324ffl.bastk?n.a:ure.com/*/c)ien(/... O L- 4 
* □ X
^TMfarr* and Servo«
ConwteRocI 
v Window; CMendrt Firewall w*
S3 Inbound Rules
£3 Outbound Rules
51. Connection Security Ryle;
> S' Monitoring
SNMP Trap Service (UD 
WMPlhpSvvKi VUDI 
Software load Balancer 
TPM Virtual Smart Card 
TPM Virtual Smart Card 
TPM Virtual Smart Card 
TPM Virtual Smart Card 
Virtual Machine MoMo 
Virtual Machine Monflo 
Virtual Machine Mdnfld 
Virtual Machine MoMa 
Virtual Machine Monte 
C4 Winftirt Offender Firei 
O Windtart lender Firei 
O' Windtart Management 
O Windows Management 
G Windows Management
Windtart Remote Mam 
Q Windows Remote Ma nil 
O Windtart Remote Mam
Protocol and Pert
*
li? Tbwe IF
Figure 10.1 7: Modifying the WINRM rule for Public Networks
After that rule is modified with additional Azure networking 
range, we will be able to connect to the server using the 
PowerShell. Connection and sample commands are 
illustrated in Figure

M DCAZEU001 
X +
<- -> 0 
■ bst-dc5f0eac-f4l8-4ea1-8611-7a8240a24ff3.bastion.azur... O 
□ X •
y Administrator Windows PowerShell 
—OX
PS C:\Windows\system32S enter-pssession dcazeu0O3.eu.adpstest.net 
■ '
[dcazeuO03.eu.adpstest.net): PS C:\Users\adpsadmin.EU\Oocuments> hostname
DCAZEU0O3 
n
[dcazeu003.eu.adpstest.net]: PS C:\Users\adpsadmin.EU\Oocuments> whoami 
euXadpsadmin 
[dcazeu003.eu.adpstest.net]: PS C:\Users\adpsadmin.EU\Oocuments> $env:userdnsdomain
EU.ADPSTEST.NET 
[dcazeu003.eu.adpstest.net]: PS C:\Users\adpsadmin.EU\Oocuments> _
£3
Figure 10.1 8: PowerShell remoting to Windows Server 2022
Core
This is with systems that have PowerShell installed on 
them, but when PowerShell was not an option, there were 
limited number of ways to connect to remote Windows 
hosts except RDP. One of the ways was using the PsExec 
that could remotely execute commands and scripts, even 
as a System Account if the caller had the administrative 
privilege. More information about this tool can be found at

Running PsExec on domain controllers is not recommended 
for two reasons. It is additional executable that need to be 
place on management server and it can be used for lateral 
movement. Using it inside the environment should be 
monitored by AV and security tools and prohibited on 
production systems unless emergency situations.
The other option was to use the Windows Management 
Instrumentation queries. The WMI repository is a database 
that holds the server information regarding hardware 
software and its various aspects. WMI queries can be 
performed remotely; and to get information about the 
server, we can use it to run specific commands but not 
with as much flexibility as PsExec. To execute the WMI 
query with the command to the remote server, we need to 
run the following command:
WMIC /node:DCAZEU003 process call create '"cmd.exe /c 
mkdir c:\temp\test1"'
The results of this remote WMI query are illustrated in 
Figure

Figure 10.19: WMI query for remote procedure
In modern organizations, remote queries and operations 
could be monitored as well including PowerShell but using 
the PSRemoting with proper authentication would be the 
preferred management method. With a secure setup 
between DCs and management server, it can be 
successfully used to manage a substantial number of 
domain controllers.

Windows Admin Center implementation
If we want to manage Windows Servers using PowerShell, 
especially if they are implemented as Windows Server 
Core, you could miss that GUI experience on common tools 
like Resource Monitor, computer management, services, 
and so on. The tools that are good for displaying 
information, which is not available now. We can 
compensate for this using the RPC based snap-ins, but the 
user experience can be limited.
Windows Admin Center is closing this gap. It makes the 
management of the servers even easier than with 
traditionally stand-alone tools. It is not hugely different, 
but what is new is that WAC has introduced web access, 
which change the game completely.
It runs the web component and could be secured with the 
certificate, so the connectivity is much more secure than 
when using standard RCP WMI ports. It uses PowerShell 
Remoting to communicate with the servers that the WAC is 
managing.
Windows Admin Center can be installed both on Windows 
Server and Windows Server Core. If we are planning to

manage domain controllers using Windows Admin Center, 
we should not install it on one of the domain controllers, as 
it uses the web component for the user interface, and any 
type of web server is not good practice. In our example, we 
will use one of the full GUI experience domain controllers 
just for cost savings.
To install the Windows Admin Center, we can follow clean 
installation using the downloaded software (most suitable 
for on-prem deployments) or use Azure capability and 
install it directly for the portal.
For our use case with only Azure setup, we will proceed 
with Azure wizard to install the WAC. We need to navigate 
to Virtual Machine on which we would like to install it and 
then choose the Windows Admin Center in the left menu. 
We specify the port it will be running on and then proceed 
with installation, as illustrated in Figure

Figure 10.20: Installation of Windows Admin Center on
Azure VM
The option for opening the port for public access is done 
just for testing. Normally we would not open it for public 
IPs and still use the client inside the customers’ network to 
interact with the Windows Admin Center. After the 
installation is complete, we need to grant ourselves access 
by RBAC and add to the role Windows Admin Center 
Administrator Login from the IAM tab, as illustrated in 
Figure 10.21 and Figure

Figure 10.21: Granting access to use WAC in Azure portal

Figure 10.22: Granting access to use WAC in Azure portal
As we do not want to assign the public IP address to the 
domain controller, it is better to navigate to the server 
itself by Bastion and navigate to the https://10.0.0.6:6516/ 
because it keeps the connection safe.
We will accept the certificate problem as it is related to 
using the IP and provide the Admin password of the 
machine, and we will be redirected to the WAC server list, 
as shown in Figure 10.23 and Figure

Figure 10.23: Connecting to Azure Bastion with from 
localhost with Admin credentials

k KAKliKi - Muw X — htip4//bn-9TaitetS-332dJffi X +
<- -> c a bst-97a1ce«5-332d-4805-ba56-b21<Mae<S?C3basiion.azurecom/»/d>enVRENBWk □ <r > =4 □ X
IB 
WiltSOwl Mrtin C*ntw
(? X
O A Not (wvra | htt^
*<y/1ClfljO.G:G£
 16
A*  <1 Q> 1
+ Wd s Connect Manafleas s Remove
j item V Search
□ Nome -t
l«t connected
Maraging at
Servers.
1/25/2023.1i2109 AM ElAMpudsiin
Figure 10.24: Connecting to Azure Bastion with from 
localhost with Admin credentials
Then, we can add the server by choosing the Add option, 
providing the server’s name or we can search available 
servers in the Active Directory. Make sure PSRemoting is 
enabled on the destination server; it should be enabled by 
default, with recent versions of the Windows Server, and 
the WINRM connectivity should be allowed between the 
management server and destination domain controller. 
Adding the server can be performed as illustrated in Figure

Figure 10.25: Adding the connection to Windows Server 
inside WAC

Windows Admin Center remote management
Once we configure all servers that we would like to 
manage, we can start to govern the servers, especially 
without the GUI experience, with a nice interface that 
could manage the most important aspects of the servers 
running within our management scope.
After navigating to the managed server, we will see on the 
left menu self-explanatory categories that we can use to 
control our servers. On the Overview page, we can see the 
most valuable information about the server and basic 
performance counters, as illustrated in Figure

Figure 10.26: WAC Remote Server overview information
A particularly good feature is as typically with Core 
experience, it is hard to look for the Events inside of 
PowerShell only and display it for the user. We can 
navigate to events, investigate all Active Directory-related 
logs, and check for error information regarding specific 
operations, as shown in Figure

Figure 10.27: WAC Remote Server overview information
When we find any errors on the Events pane and 
customers confirm that Active Directory is not responding 
properly, we can troubleshoot and narrow down on the 
problem. If we are sure that the issue can be resolved by 
restarting specific services, Windows Admin Center 
provides the friendly interface to go to services and 
manage it remotely.
To restart the NTDS service, we can navigate into We need 
to find the NTDS service to stop or restart the service 
directly from the interface. After choosing the Restart

option, we will receive the information about potential 
impact, but we can continue as illustrated in Figure
Figure 10.28: Restoring the NTDS service using WAC
An interesting feature at the Preview page, while testing, 
was Packet Packet monitoring can come in handy when 
troubleshooting problems with Active Directory. Running it 
from the central console can come in handy when we do 
not have full server experience available, and we are in 
control of the files we copy in and out of the domain 
controller itself. Sometimes, depending on the events is 

not enough to troubleshoot the problem, so we need to 
perform the packet capture to get more information.
To execute packet capture using WAC, we need to navigate 
to Packet Monitoring in the menu and start the new 
capture. The best way is to scope down the filter to only 
include the traffic we are interested in. In our example 
capture, we will try to include all DNS traffic in the virtual 
network that communicating with network interface of the 
specified server. The search criteria is shown in Figure

Figure 10.29: Starting the packet capture using the WAC
After capture is started, we can run queries from the 
source device that will connect with domain controller and 
will eventually be captured inside configured trace. We can 
use the following command to generate the DNS traffic:
nslookup
Then we need to stop the trace and see the results; 
potentially, we need to re-authenticate with the 
destination server to allow additional extensions to be 
installed on the remote server. Once the packet capture is 
finished, we can start working with the provided data or 
even save it for future analysis using the Save capture 
option. Capture results and save option can be used as 
illustrated in Figure

Figure 10.30: Working with and saving WAC packet capture
results
There are many other capabilities of WAC, we can use it to 
connect to remote servers and start the PSSessions to the 
domain controllers. With the RDP function, we would need 
to re-authenticate to the server. Now, what is the 
difference between standard RDP and this option? There is 
possibility of exposing the RDP session securely over https. 
Figures 10.31 and Figure 10.32 shows the RDP connection 
with the remote domain controller using the Core 
installation:

Figure 10.31: Starting RDP session by WAC

dcazeu003.eu.adpstest.net
hHpt/jrbrt-rfladT?b-65fl4-47? X -f-
V
O x
C i bst-efJed72b-65W-472c-944e-cM667S0B0f7.beitionjitjre.Mm... □
£ * *
=7 □ X i
Tl 
Remote Oesttop - Sewer Uw x +
-
a x
4- 
(3 
A Not secure I htt^sy/10-OuO.fcGSI 6/serverm sn ager/connect tons/,-, A*
Windows Admin Center I Server Manager v 
Microsoft
>_
&
© ?
P X Disconnect aS Send Ctrl+AH* Del
Remote Desktop
Figure 10.32: Starting RDP session by WAC
With PowerShell, we automatically get the remote session 
started without being prompted for additional credentials 
as we already use the account with administrative access 
to remote server in overall WAC security context. The 
advantage here is that we can get the PowerShell remoting 
features securely exposed using the web component.
Figure 10.33 shows the interface for the PowerShell session 
to remote server using the WAC:

■■ hHfttAba
*neGad72b-65&4472
 X 4*
0 ta bjt-tfJad72h-65Sd-472c-444e-d)4667SO3Of7.bastiOn.3iun0j5ani..1 fl |£? A 3 A ;
n A. Command ?h«l| - Suvtr Mana; x + 
— 
<? X
<- O A Not secure | l¥H^7/l0A0.6:i>516/servermaria<;ei7cortri«tiofis/..1 A*  
"ft f® X '“
Windows Admin Center . Server Manager v 
l;3 Microsoft 
© 
?
dcazeu003.eu.adpstest.net
PowerShell
P X Disconnect
Connecting to dcaieuCfll.eu.dripitest...netF Logon user Eli\ddpsachin. 
[dcazeuODKeu.adp&test.net]: PS Ci\,Users\adps
*4iih.E
:U\DcKimefttt> |
E
£
rr
Figure 10.3 3: Starting PSSession to remote server using 
WAC

Executing bulk operations on multiple DCs
Before we will automate the operations on multiple DCs, 
let us look at how we can remotely connect to the servers 
using PowerShell and PSRemoting. The easiest way would 
be to just enter the newly created PSSession to the specific 
server. We can perform such an operation using the 
following:
Enter-PSSession -ComputerName
After connecting remotely, when we execute the 
commands, they will run on the remote session and 
interact with the remote server resources, as illustrated in 
Figure

M DCA2EU001 
X +
<- -> C ft bst-8155367a-2282-4fce-857b-03db50a9cd35.bastion.a... □ & ☆ 
& =? □ £ 
:
S Windows PowerShell 
—OX
PS C:\Users\adpsadrnin> Enter-PSSession -ComputerName DCAZEU003.eu.adpstest.net 
[DCAZEU003.eu.adpstest.net]: PS C:\Users\adpsadmin.EU\Documents> hostname 
DCAZEU003
[DCAZEUO03.eu.adpstest.net]: PS C: \Users\adpsadmin. EU\Docun>ents> $env:computername 
DCAZEU003
[DCAZEU003.eu.adpstest.net]: PS C:\Users\adpsadmin.EU\Documents> „
Figure 10.3 4: Entering remote session from PowerShell
Once we perform operations on the remote server and 
would like to finish and exit the session, we just need to 
type the exit command. This type of a session will be 
closed automatically on exit.
Another way of entering a session that will not close after 
exiting is to create a session first and then start using it. 
We can start such a new session with the following 
command:
DCAZEU003 -Name DC3Session

Then we can try to enter this session, perform operations 
on the server, exit the session and check whether the 
session is still open. This can be done using the following 
script:
DCAZEU003 -Name DC3Session
Enter-PSSession -Name DC3Session
Hostname
$env:ComputerName
Exit
Get-PSSession
The results of the script should show us if the session was 
terminated after we exit the window, as is shown in Figure

IPS C:\Users\adpsadmin> New-PSSession -ComputerName OCAZEU003 -Name DC3Session
« OCAZEUOOI
X 4-
V 
- 
□
X
<- -> C 8 bst-81S5367a-2282-4fce-857b-03db50a9cd35.bastion.azure.eom/a/dient/R...
0
*
* 5/ □ A
•
| BS Windows PowerShell
- □
X
Id Name 
ComputerName Computer-Type State 
ConfigurationName Avai
labi 
lity
1 DCTSession OCA7FU003 
RemoteMarhine Opened 
Mi rrosoft. PowerShel 1 ...e
PS C:\Users\adpsadmin> Enter-PSSession -Name tX3Session 
[DCAZEU003]: PS C:\Users\adpsadmin.EU\Oocuments> Hostname 
DCAZEU003
[DCAZE 1)003]: PS C:\Users\adpsadmin.EU\Documents> Senv:ComputerName 
9CAZEU003
fDCAZEU003): PS C:\Users\adpsadmin.EU\Oocuments> Exit
PS C:\Users\adpsadmin> Get-PSSession
Id Name
ComputerName
ComputerType
State
Configu rat ionName
Avai 
labi 
lity
1 DC3Session
DCAZEU003
RemoteMachine
Opened
Microsoft-PowerShell .. .e
PS C:\Users\adpsadmin> „
Figure 10.3 5: Performing operations on remote server 
using persistent PSSessions
Using the described methods, we could potentially invoke 
commands multiple times with entering sessions to 
different servers, but it is not how we should approach it. 
PowerShell can help us decide which commands using the 
Get-Command to get all commands with session 
parameter:
Get-Command -ParameterName

And from this, we can determine that there is an 
interesting command:
Invoke-Command
Invoke-Command can run PowerShell code as a script block 
or PowerShell file locally or remotely. We can supply the 
session with persistent connection, or we can just specify 
the remote servers that we would like to run the specific 
PowerShell of code. Let us try to execute the hostname 
command remotely on all three EU domain controllers and 
see the results:
(Get-ADDomainController -filter * -server 
eu.adpstest.net).name
Invoke-Command -ScriptBlock { hostname } $DCs
The results are shown in Figure

KA2EUK1 
x +
-> c A btt-8155W*-228Z-<fM4J?l»-aitlk>5(Wcd35.b*HiCin.*a>r|i«nV*/cl*4rtt/R-. fl i£? * 
» 
□ 1
[ 3 Ajinnrtrton W^iJCnH 
- 
□ X
Windows PowerShell
Copyright (C) Microsoft Corporation. AU rights reserved.
Install the latest PowerShell for new features and improvements I httpssZ/aka.ms/PSWindows
PS C; \Nindows\syste«3:2> 
{Get-AOteaainCont roller filter " 
. eu^adpstest.net) .name
PS C:\Hindows\system32> Invoke-Command -ScriptBlock { hostname } -ComputerName $DCs
dcazeumi
DCAiEuees
[DCAZEnee2) Connecting to remote server DCA2EU0B2 failed with the following error message : WinRN cannot 
complete the operation. Verify that the specified computer name is valid, that the computer is accessibL 
over the networkj and that a firewall exception for the winfcM service is enabled and allows access from 
this computer. By default, the WinRM firewall exception for public profiles limits access to remote 
eomy-uters within the same iiocal subnet. For more infcrr.iti-.n, see the a bout_Reihote_T rouble shooting Help 
TOPIC r
+ Categoryinfo 
: OpenErrorr (DCAZEUO02:String) []|, PSRemotinglransportException
+ FullyQualif led Error Id : WinRHflperatiofliTiMOut ,PSSessionStateBroken
PS C;\Windows\system32> o
Figure 10.3 6: Executing commands remotely on multiple 
domain controllers
When one of the remote hosts is unavailable, the error 
message will be displayed but the other execution will be 
uninterrupted. We could play with the ErrorAction 
parameter to change that behavior. We can also pass the 
arguments to the script block to interact with the local 
session. We need to build our script block differently and 
add the param section and execute the Invoke-Command 
with the ArgumentList parameter as in the following code:
$ScriptBlock = { 
param

(
$DestHost =
$DestPort = 56789
)
-ComputerName $DestHost -Port $DestPort - 
InformationLevel Quiet
return ,
}
-Filter * -server eu.adpstest.net).name
Invoke-Command -ComputerName $DCs -ScriptBlock 
$ScriptBlock -ArgumentList
This script will invoke a command on all DCs in EU domain 
and try to evaluate connectivity to the hosts on specific 
port with information sent from the ArgumentList 
parameter into the

To perform multiple operations at the same time, we could 
use AsJob switch and create a job for every server, and 
then we could receive the job results with the Get-Job and 
Receive-Job either cmdlet or command. Following code will 
execute the script block on specified servers:
Invoke-Command -ComputerName $DCs $ScriptBlock - 
ArgumentList
Get-Job | Receive-Job -Wait
The results are illustrated in Figure

Figure 10.37: Executing commands on remote servers as 
jobs
As we can see, it did not wait for the last DC to connect 
before it threw an error with the DCAZEU002, as each of 
the task was running separately.

Scheduling reporting and notifications
After we learn how to run the reporting scripts, we can 
create scheduled tasks that would trigger those monitoring 
scripts and make sure they are running without our 
interventions. It is strongly not recommended to run those 
tasks as Enterprise and Domain Admins so those 
credentials are not exposed outside domain controllers.
Once we have an idea of what we would like to verify, we 
can create a PowerShell script and run it as a scheduled 
task. A useful thing would be getting reports on the 
patching status of the servers we manage. It can be easily 
achived with the Get-Hotfix command, which can be 
executed across multiple servers to gather information 
about the patching status. The script to get this 
information could be as follows:
-Filter * -server eu.adpstest.net).name
$Hotfixes = $DCs 
$Hotfixes | Export-Csv C:\Reporting\ServersHotfixes.csv

Before we schedule the script to run automatically, it is 
better to assess it on the server to see if it is working 
properly and providing the right results. The c:\reporting 
directory must be created before the script runs, as the 
Export-Csv does not create output file if file path do not 
exist already. The results of the script execution are shown 
in Figure
DCAZEU001 
X +
<- C a bst-f4618a12-a211-492c-9e76-3f52l 1869017.bastion.azure.com/»/dienVRENBWk... O \A ☆ ft 3T □ X :
PS C:\Windows\systei»32> SDCs (Get-ADOomainController Filter ■ server eu.adpstest.net).nane
PS C:\Windows\syste«32> SHotfixes Get-HotFlx ComputerName SOCs
PS C:\Windows\systeia32> SHotfixes | Export-Csv C:\Reporting\ServersHotfixes.csv
PS C:\Windows\systea32> Shotfixes
PS C:\Windows\syste»32>
Source
Description
HotFixID
InstalledBy
InstalledOn
DCAZEU001
update
KBS017028
NT AUTHORITYXSYSTEM
9/2S/2022 12:00:00 AM
DCAZEU001
Security Update
KBS012170
NT AUTHORITYXSYSTEM
9/13/2022 12:00:00 AM
DCAZEU001
Security Update
KBS017316
NT AUTHORITYXSYSTEM
9/2S/2022 12:00:00 AM
DCAzeueei
Update
KB5016704
NT AUTHORITYXSYSTEM
9/2S/2022 12:00:00 AM
DCAZEU002
Update
KB5ei7e28
NT AUTHORITYXSYSTEM
9/20/2022 12.ee.ee am
DCAzeueez
Security Update
KB5012170
NT AUTHORITYXSYSTEM
9/26/2022 12:00:00 AM
DCAZEueez
Security Update
KBS017316
NT AUTHORITYXSYSTEM
9/26/2022 12:06:00 AM
DCAzeueez
Update
KBS016704
NT AUTHORITYXSYSTEM
9/26/2022 12:00:00 AM
DCAZEU003
update
KBS020877
1/6/2023 12:00:00 AM
DCAZEuees
Update
KBS003S08
1/6/2023 12:00:00 AM
DCAZEU003
Security Update
KBS022291
1/6/2023 12:00:00 AM
MAZEuee3
Update
KB5020373
1/6/2023 12:00:00 AM
J' ServereHotfixes - Notepad 
—OX
File Edit Format View Help
#TYPE Systeoi.Managenient.ManageBentObject#root\ciniv2\Hin32_QuickFixEngineering
"PSCoBputerNaBe","InstalledOn"/'_GENUS","_CLASS","_SUPERCLASS","_DYNASTY","_RELPATH","_PROPERTY_COUNT"/'_DEf 
"DCAZEU001","9/25/2022 12:00:00 AM”,"2","Win32_QuickFixEngineering","CIM_logicalEle»ent","CIM_ManagedSysteBEle»enf 
"OCAZEU001","9/13/2022 12:00:00 AM","2","^ln32_QuickFixEngineering","CIM_LogicalElei»ent","CIM_ManagedSysteBElemenf 
"DCAZEU001","9/25/2022 12:00:00 AM",”2",“Win32ZQuickFixEngineering","CIMj.ogicalElel»ent","CIMlManagedSysteBEleaenf 
"DCAZEU001","9/25/2022 12:00:00 AM","2”,'Hin32_QuickFixEngineering",”CIM_LogicalElei»ent","CIM_ManagedSystei»Elemenf 
"DCAZEU002”,"9/26/2022 12:00:00 AM","2","Win32j}uickFixEngineering","CIMj-OgicalElei»ent",-CIM2ManagedSysteBElemenf 
"DCAZEU002","9/26/2022 12:00:00 AM","2","Wln32_QulckFixEngineering","CIM_LogicalEle»ent",-CIM_ManagedSystemElemenf 
"DCA2EU002","9/26/2022 12:00:00 AM",“2",“Win32_<}uickFixEngineering",”CIM_LogicalElei»ent",“CIM_ManagedSysteiiiEle»enf
Figure 10.38: Getting Hotfix information from remote
servers

So, we are getting the list of the domain controllers in EU 
domain and then executing the Get-Hotfix command 
across all servers. After we receive all the data, we will 
export it into the ServersHotfixes.csv file. This file can be 
used or distributed to those who require information about 
it; we can even send email notifications directly from 
PowerShell scripts. We can use the following command to 
send the attachment, but we need to have access to a 
valid SMTP server:
'reporting > -To 'adpsadmin -Subject 'Hotfix Report> -Body 
"This is the Hotfix rerpot for EU domain " -Attachments 
C:\Reporting\ServerHotfixes.csv -Priority High -SmtpServer
This requires the SMTP server to be used, and we could 
also pass the credentials to supply the username and 
password for the SMTP server authentication.
From Azure Servers, we cannot use the SMTP outside 
Azure, so we need to implement something different to 
send emails from those servers.
Once we clarify how the final script will look, we can 
schedule the task using PowerShell and the following 
commands.
First, we create an ADService account:

New-ADServiceAccount adpatchrep -
PrincipalsAllowedToRetrieveManagedPassword "Domain 
Controllers" -server eu.adpstest.net ).distinguishedname - 
DNSHostName eu.adpstest.net
Add-ADGroupMember "Domain Admins" -Members 
adpatchrep$ -server eu.adpstest.net
Install-ADServiceAccount adpatchrep
Then we schedule the task:
#CreateTrigger every Day
= -Daily -At '00:00'
#User adserviceaccount
$Principal = -UserID "EU\adpatchrep$" -LogonType
Password -RunLevel Highest
#Define the Action
$StartAction = -Execute
"C:\Windows\System32\WindowsPowerShell\v1.0\powershe 

ll.exe" -Argument '-ExecutionPolicy Unrestricted -NoProfile - 
File "C:\Reporting\HotfixReporting.ps1"'
#Create ScheduledTask
Register-ScheduledTask HotfixReporting -Trigger 
$TimeTrigger -Action $StartAction -Principal $Principal
Once we run the registered scheduled task, we should get 
the results shown in Figure
S-/ httpsWbst-f4618a12-a211-492c
□ X
A bst-f4618a12-a211-492c-9e76-3f5211889017.bastion.azure.com/*/client/RENB... E) l£ ☆
Administrator Windows PowerShell
□
Domain Controllers’
C:\Windows\system32> 
C:XWindowsXsystem32 >
C: XWindowsXsystcm32 > 
C:\Windows\system32> 
C:\Windows\system32 > 
i C:\Windows\system32>
-server eu.adpstest.net ).distinguishedname -DNSHostNo-■« eu.adpstest.net 
Add-ADGroupHember "Domain Admins" -Members adpatchrepj server eu.adpstest.net 
Install-ADServiceAccount adpatchrep 
ItCrcotcTriggcr every Day
(TimeTrigger - New-ScheduledTask!rigger -Daily -At '00:00' 
ftUser adserviceaccount
(Principal • New-ScheduledTaskPrincipal -UserID
PS 
PS 
PS 
PS 
PS 
PS 
nLevel Highest 
PS C:\Windows\system32> 
PS C:XWindowsXsystem32> 
1.0\powershell.exe" -Argument ‘-ExecutionPolicy Unrestricted -NoProfile
^Define the Action 
SStartAction ■ New-ScheduledTaskAction Execute
"EUXadpatchrepS" -LogonType Password Ru
"C:XWindows\System32\WindowsPowerShell\v
-File "C:\Reporting\HotfixReporting.psl"
PS C:XWindows\system32> ffCreate ScheduledTask
PS C:XWindowsXsystem32> Register-ScheduledTask HotfixReporting -Trigger $TimeTrigger -Action $StartAction -Prin 
cipal ^Principal
© Task Scheduler
File
Home Share View
#• Quick access
■ Desktop
4^ Downloads
. Documents
P Search Reportinc
« Wind... > Reporting
4
Name
Date modrf
,<8| HotfixReporting
1/30/2023 1
7 Servers Hotfixes
1/30/2023 1
transcript
1/30/2023 1
Pictures
Reporting
System 32
E3 This PC
& Network
File Action View Help
© Task Schedule 
v Task Scher
_ Micro!
Name
•I____________________
0 MicrosoftEdgeUpdateT... Ready Multiple triggers defm
MirrrxoftF«4n
*l
 IndataT P*artw  At 114W PM *v*rv
 daw
HotfixReporting
Status Triggers
Run... At 12.-00 AM every day|
General Triggers Actions Conditions Settings Histor
7 Number of events: 84
Level Date a™
Event...
Task Category
Operator
©Inf™ 1/30/2...
102
Task completed
©Inf... 1/30/2...
201
Action comple...
«)
©Inf... 1/30/2™
110
Task triggered
Info
*4lair B gt

Figure 10.39: Scheduling the remoting task and exporting 
the hotfix data to file
All the data was created, and we have the report created 
and ready to be sent to or shared with specific recipients.

Using hybrid worker to process the data
Using SMTP is not recommended in production 
environments. Especially in Azure we do not have allowed 
the SMTP outbound traffic if we do not use the Enterprise 
Agreement subscriptions. We would need to use the 
servers on-prem and connect the SMTP server on-premises 
with the Azure VM using a local network to send the emails 
and contact the SMTP servers that we address emails to be 
sent.
Another way to execute tasks on the servers hosted in 
Azure is using the Hybrid Azure Hybrid Worker is feature of 
Azure Automation that can execute runbooks directly on 
the Azure Virtual Machine. Automation is hosting the 
runbooks, and they are executed on servers rather than on 
Azure only because we already did some configuration, 
and the name of the account is
To perform an automation task using the Azure Automation 
account, we need to create the Hybrid Worker group first. 
For this, we must navigate to the Hybrid Worker Group 
menu and then choose the option to create a Hybrid 
Worker group. We can use default credentials or create

credentials secured inside an Azure Automation account, 
as shown in Figure 10.40 and Figure
Figure 10.40: Creating the Hybrid worker group

Home > AA-ActiveDirectory | Hybrid worker groups >
/X Create Hybnd worker group - M X
+
V - O X
c i portal.azure.eom/#view/Microsoft_Azure_Automation/CreateHybridWorkerGroupBla...
Ci 1^ ☆
= Microsoft Azure
P Search resources, services, and docs (G+/)
... • •
Create Hybrid worker group 
x
Hybnd worker group
’ Basics Hybrid workers Review + Create
Selected machines would be added to the hybrid worker 
group and hybnd worker extension would be installed to 
connect to Automation service.
Name
Use Hybrid Worker Credentials
Hybrid Workers count
HotfixReporting
NA
1
Create
Previous Next
Figure 10.41: Creating the Hybrid worker group
If we want to run remote PowerShell, the remote 
credentials need to be supplied with administrative 
permissions on the destination servers. In our case, which 
would be the domain admin account, which implies that we 
need to treat the Automation account with the same 
sensitivity as Domain Admin accounts.
Then, we need to create a Runbook and add all necessary 
steps that will process the script; we create the runbook

and add all the code necessary to get the information 
required: 
#Make sure server that is running hybrid worker is having 
RSAT AD Powershell tools installed
Import-Module ActiveDirectory
-Filter * -server eu.adpstest.net).name
$Hotfixes = $DCs
$Hotfixes | Export-Csv C:\Reporting\ServersHotfixes.csv
return $Hotfixes
And then we publish the runbook as illustrated in Figure 
10.42 and Figure

Figure 10.42: Publishing the runbook

□ X
<* *» C a portaLazure.com/*view/M»crosoft .Azure. Automation/fcxtualAuthonngWoric... 
~l Q JL
A Edit Pow<f$h«<l Rvnbook • Mie X +
Home > Report ingHotfix (AA-ActrveDxectory/Reporting Hotfix)
\ Edit PowerShell Runbook
“ Reporb^gHotfix
@ Publish X Revert to published ti Test pane /? Feedback
> alCMOieTs
> A RUNBOOKS
> A ASSETS
1 St)Cs-(Get-AtX>oaalnController -Filter * -server eu
2 Swot fixes • Get-HotFix -CoaputerNaae SIXs
3 SHotfixes | Export-Csv C:\Reportlng\ServersHotflx 
a juotflxes
Figure 10.43: Publishing the runbook
Once the runbook is published, we need to create Azure 
Logic App or Power as it is the same type of application. 
We will navigate to Logic Apps and choose the Create Logic 
App option; we will make sure it is created in the right 
region subscription and resource group. And after the Logic 
App is created, we will proceed with creating the workflow 
inside. It could look like in the example from Figure 10.44 
and Figure

Figure 10.44: Creating Azure Logic App

'■■lew workflow - Microsoft Azure X +
-> 0 ft portal Jzwre.com/^Sadpciwershellazuregmail,onmicrosoft.com/resource/sub5or... Q. |£? P A ~J □
= 
MiLjcsc.l't Aiure
P Search resources, services, and de cs (G-/]
... 
0
Home > Logic apps > HotfiifReporting
A Hotfix Rep orting | Workflows
* B LogrC App (SUAtfWd)
[ P Search 
~~| fc + Add Q Refresh I
A C'rtiVitn' 
■ [/i Filter by narne...
Q. Activity Imi
% Awt» control JAM) 
+
♦ ISgt 
' ' NoiwJtt
$ Diagnose arJ sohe problems
P Mi€r«O?! 04‘ander for (.loud
Events (preview}
WartflOWF
A Worttftcws
■*  COnnaflionJ
(■!?] Furimeterj
Artifacts
New workflow 
X
Create a new n-ixWiqw in this logic app.
UJArlrfiAw KlArrd *
[ GetHotfaes 
Vj
Stale type *
i® Stitetat optimised hrph reiu&fciy. ideal for protew buHfitM 
transitional data.
Q Stateless: Optimized tar Io
*
 laterwy. ideal tar requesbresponse 
and processing 10T events-
Create
Figure 10.45: Creating Azure Logic App
We need to grant permissions of the Logic App managed 
identity into Resource Group that Automation account is 
hosted in and grant at least the Automation Job Operator 
role so the logic app can start the Runbook jobs on the 
Automation This can be done as shown in Figure

Figure 10.46: Granting permissions to Logic App Managed 
identity
And then we can use designer to create the Workflow 
details in Azure. Multiple steps would be required to 
perform the job:
Create trigger or schedule.
Create Azure Automation Runbook
Do:

Check status of job
Until status is completed
Get job results.
Copy results into variable.
Connect to Outlook mailbox and send email to recipients; 
put the output as the content of the email.
The overall logic can be visualized as shown in Figure

Figure 10.47: Logic app workflow for running the workflow
Most steps can be configured in a self-explanatory way; we 
just need to reference the right automation account and 
resource groups, as shown in the following code for the 
Create Job step:
{

{
{
"Hotfix"
},
{
"/serviceProviders/azureAutomation"
}
}
}

In individual steps, we need to reference the job ID from 
earlier, and when initializing the variable, custom code 
needs to be defined like this, as it is hard to parse the 
output correctly to string:
{
[
{
"@body('GetJob_Output')"
}
]
},
At the end, we need to send an email using the Send an 
email app from Azure. We can then sign in to a specific 
Outlook.com account or even use other accounts like

Office 365 with similar apps, as illustrated on Figure 10.48 
and Figure
Figure 10.48: Configuring Outlook Send an email app

v - O X
ae-21d8-4a8c-a4dc-43aae2c76a90%2FresourceGroups%2Fres-group-dev-adtest%2Fproviders%... Ci 0, ir * 3 X •
□ R * © ® A> 
4
X
»□ U*s
 ** mm* (V2) 2
Sos Cw
*Ktc
*
towM OwpUyHam. 
Meme 
OtoMy
Q 
Q^UuAii^' 
M
*MA
■■ Sign in to your Microsoft account - Google C.- —OX
A Iogin.live.com/oauth20_authorize.srf?client_id=4ebc1._ •»
J" Microsoft
Sign in
Email, phone, or Skype
no account? Create one!
Sign in with Windows Hello or a security key Q
Figure 10.49: Configuring Outlook Send an email app
Once every step is configured properly, we can execute 
each step manually and verify the results. When 
permissions of the Hybrid Worker are not proper, we can 
get access denied messages, but as soon as the 
configuration is right, the results should look as shown in 
Figure 10.50 and Figure

Figure 10.50: Logic app results for hotfix reporting

Figure 10.51: Logic app results for hotfix reporting
We would need to work on formatting and try to create a 
table entry for every hotfix rather than sending the output 
as a string try to parse it as an object. This exercise was 
about to understand what other options we can use to 
manage and report patching status of the servers, 
including Windows Server 2022 Core.

One of the downsides of the hybrid worker is that it does 
not support Group Managed Service Accounts as the 
credentials, so here, we need to either use the computer 
system account or the credentials stored in the Automation 
account. We can also delegate the permissions to the 
computer account in AD to grant the rights required to 
perform the reporting, but it must be carefully planned. As 
soon as we use the high privileged credentials of an 
automation account, we need to ensure that there is a 
limited number of Administrators.

Conclusion
In the previous version of Windows Operating Systems, 
we had limited possibilities in terms of how we can 
manage the servers remotely. This changed when 
PowerShell was introduced. So, when it was difficult to 
manage servers with native command line, WMI or 
RSAT, we can now perform those activities with a 
different approach.
Now with PowerShell, we can manage systems locally 
and remotely in a very lean and efficient way. Even if we 
do not run hundreds or thousands of servers, we should 
always find a way to reduce the time needed to deliver 
operational support for our infrastructure, so we could 
focus on implementing new infrastructure design and 
migrating to never platforms.
Windows Server Core takes this concept to the next 
level and enforces Windows Administrators to switch 
from administrating the servers using the graphical 
tools to using the scripts and commandlets as the better 
way forward. Knowing that we can easily perform the 
same operations connecting to the server with

PowerShell remoting, increased number of tasks can be 
just done by using the remote sessions.
It is hard to change the way we perform daily tasks, but 
it is much more efficient doing it the right way. Windows 
Admin Center is the tool that closes the gaps between 
those two different methods and still provides a nice 
interface to manage the remote servers, especially if 
they do not have the full graphic user interface.
Another aspect of this discussion is Cloud. There are 
many builds in PAAS services in Azure that can deliver 
the monitoring, automation, reporting and configuration 
management. Even if we are responsible for delivering 
the Active Directory infrastructure that is not being 
actively developed since Windows Server 2016, it is 
beneficial to integrate AD with all the services that could 
provide scalability and resistance of the deployed 
infrastructure.
In the next chapter, we will understand how to securely 
use Windows PowerShell, including PowerShell remoting, 
to manage Active Directory environment and Windows 
Server infrastructure in general. We will also resolve the 
most common security problems with PowerShell 
remoting and get familiar with all security aspects.

Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

Securing PowerShell for AD Management
C
HAPTER
11

Introduction
When managing Active Directory, we need to ensure 
that only authorized people can be granted privilege to 
manage domain controllers. The problem is not only 
about accounts which have the privilege to access AD 
infrastructure but also about the source of the privileged 
connection to the Active Directory.
Many organizations implement Privileged Access 
Management solution, but if there is even one 
unmanaged way to support and access domain 
controller with a privileged account that was skipped 
during onboarding to PAM, that single account puts the 
entire security design at risk.
When an account is logging in outside PAM, this logon 
probably occurs on unprotected machines where many 
other users can have access. Breaching this single 
workstation could give the attacker root access to the 
domain controllers.
PowerShell remoting is enabled by default on Windows 
Servers, including the domain controllers. If no action is

taken and the DCs are not separated within the 
organization network, administrators could technically 
manage AD from any machine with connectivity to 
domain controller. A lateral movement attack could 
expose highly privileged credentials, like those of 
Domain Admins, which could be gathered from users’ or 
client devices.
Rather than expecting that this route is not going to be 
used, we need to ensure that WinRM is protected as 
much as possible so that there is trust in using it when 
managing the domain controllers and there is no need 
to shift the daily operations back to the servers if not 
necessary.
In this chapter, we will learn how to ensure that WinRM 
traffic is secured as much as possible. We will also 
understand why DA accounts should not be used when 
running the scheduled tasks, and we will configure 
WinRM step-by-step, to use Kerberos and HTTPS 
protocol. We will then be moving on, to understand the 
Certificate authentication and look at protecting the 
WinRM traffic with Windows Firewall and Group Policy.

Structure
This chapter will cover the following topics:
Why not to use privileged accounts for bulk operations
Running scheduled tasks with gMSA and system account
WinRM configuration and security
Using Kerberos and Certificate authentication
Windows Server Advanced Firewall

Objectives
This chapter delves into advanced strategies for 
enhancing security and operational efficiency in 
Windows Server environments. We begin by highlighting 
the pitfalls of using privileged accounts for bulk 
operations, emphasizing the importance of minimizing 
security risks.
The discussion progresses to running scheduled tasks 
using Group Managed Service Account (gMSA) and the 
system account, providing insights into secure 
automation practices. The configuration and security 
aspects of Windows Remote Management (WinRM) take 
center stage, guiding readers through best practices for 
remote administration.
Exploring authentication mechanisms, we cover the use 
of Kerberos and Certificate authentication, offering a 
nuanced understanding of secure access protocols. The 
chapter concludes with an in-depth exploration of the 
Windows Server Advanced Firewall, equipping readers 
with the knowledge to implement robust security 
measures. By the end, participants will have a 

comprehensive skill set to bolster security and 
streamline operations in Windows Server environments.

Why not to use privileged accounts for bulk operations
The shortest answer to this question is that it is not 
secure. For example, if we run the scheduled task with 
high privileged accounts outside the domain controller, 
every administrator of the server can change the 
underlying scheduled script to perform malicious 
operations on the domain or remove entries from the 
domain (DDoS attacks).
Here is an example: A scheduled task named, Clean 
unused users from the Domain runs on the member 
server, and it is executing the script Clean disabled AD 
Scheduled task is running on DA level of rights. If we go 
to the task scheduler definition, we will see which script 
is called from scheduled tasks. Every user account with 
access to that script will be able to effectively take over 
the Domain Admin credentials and execute any 
PowerShell commands with elevated permissions.
Another example is if we use scheduled tasks on client 
devices or terminal services. When we execute a 
scheduled task, the credentials are placed in memory 
and can be decrypted and exposed by running the

MimiKatz software on that server. If there is no SIEM 
solution in the company or central AV, it will be hard to 
block this kind of traffic.
When we have a PAM solution, the workarounds are still 
there, and users tend to take the password out of the 
protected solution and use it directly on the machines 
they can run the scripts. If not possible, they would 
need to go through PAM anyway and then from the 
secure sessions start the PowerShell session to domain 
controller without exposing credentials outside of secure 
solution.
The last one will be potential mistakes when the account 
is overprivileged. If we have specific operations to be 
performed by running the scheduled task, it is better to 
delegate it to the service account without DA level 
privileges, as we will clearly see what permissions are 
required later during the implementation.
Lateral movement attacks push the solution to the level 
like: If we would like to run software or scripts with high 
privileged AD permissions to the server, the server 
should be managed only by administrators that are on 
the same level of escalation path of lateral movement. 
For example, scheduled task running with Domain

Administrator account Server Admin access can be 
accessed only with local administrator password that is 
managed in PAM, and other administrators that are 
preferably on a similar level of movement path.

Running scheduled tasks with gMSA and system account
Running the scheduled task with gMSA protects the 
scheduled tasks to be used only on servers or machines 
that are listed in the
PrincipalsAllowedToRetrieveManagedPassword attribute. 
On the one hand, we do not really want to manage and 
store the password for those scripts, but on the other hand 
we do not need to have any other rights than 
administrators or equivalent to modify the scheduled task 
to run any other script or even create a separate 
scheduled task to run other actions.
This access model can be illustrated as shown in Figure

Figure 11.1: Access elevation through scheduled tasks
So it is important if we use gMSA with permissions that are 
highly privileged or we granted computer account to 
modify users or users attributes in AD, because we run it 
as a hybrid worker cause it is not supporting gMSA, we 
need to ensure that every user that have privilege over 
creating and modifying the scheduled tasks 
(Administrators by default) is holding similar privilege so 

there is no credential elevation possible as in the following 
example:
In case of scheduled tasks that run under gMSA that is 
member of built-in Administrators of domain , only 
Administrators of the domain should have access to that 
server (including Domain and Enterprise Admins), as 
illustrated in Figure
Figure 11.2: Admin access for specific type of workload

WinRM configuration and security
By default, PowerShell remoting is enabled on Windows 
Servers and disabled on Windows Clients. If we would like 
to check the status of PowerShell remoting on our specific 
server, we can run the following command:
Get-PSSessionConfiguration 
winrm get winrm/config
We verify the permissions with the first command, and 
verify the WinRM settings in general with the second one. 
WinRM can still work to support other processes like Server 
Manager, but with PSRemoting disabled, there will be no 
possibility to connect remotely to the server using 
PowerShell. The results of the commands are shown in 
Figure 11.3 and Figure

Figure 11.3: WinRM and PowerShell remoting Settings

Figure 11.4: WinRM and PowerShell remoting Settings
Sometimes you do not want to manage the domain 
controllers remotely at all, as you decide to perform all the 
administrative activities using RSAT or by logging in to the 
servers directly. To block remote connectivity to WinRM but 
retain local management possibilities with the Server 
Manager and other tools depending on WinRM, we just 
need to execute the following command:
-Force

After we execute this command, we will get a few 
warnings, saying it is not doing all the cleanup as the 
equivalent command Enable-PSRemoting as it is just 
blocking the remote access to the endpoint already 
configured and working with WIRM. Settings after 
PSRemoting is disabled are shown in Figure 11.5 and Figure
Figure 11.5: WinRM and PowerShell remoting Settings after 
Disable-PSRemoting

Figure 11.6: WinRM and PowerShell remoting Settings after 
Disable-PSRemoting
As we can see, the WinRM settings remain the same, 
except the PSSession Configuration permission.
Let us now secure the WinRM using HTTPS. We could use 
PKI deployed certificates, or we can use self-signed 
certificates. For this example, we will use self-signed 
certificates, but in real environments, we need to stick to 
PKI-enrolled certificates for server authentication. We start 
with certificate and listener creation:

#Create Cert
$WinRMCert = -CertstoreLocation Cert:\LocalMachine\My - 
DnsName "dcazeu003.eu.adpstest.net"
#List Listeners
Get-ChildItem -Path WSMan:\Localhost\listener\listener
*
#Create Listener
-Path WSMan:\LocalHost\Listener -Transport HTTPS - 
Address * -CertificateThumbPrint $WinRMCert.Thumbprint
#List Listeners
Get-ChildItem -Path WSMan:\Localhost\listener\listener
*
And the results of those commands are shown in Figure

Figure 11.7: Creating HTTPS WinRM listener with Self 
Signed Certificate
Let us try to test the remote session to HTTPS port locally 
with the following command:
Enter-PSSession LocalHost -UseSSL
The results are shown in Figure

Figure 11.8: Verifying the PSRemoting using SSL without 
Certificate Import
As you can see, we cannot really rely on this certificate as 
it needs to be imported in the Trusted Root Authority Store 
to actually connect to SSL endpoint. Let us now try to 
import the certificate to the trusted authority store with 
the following commands:
Export-Certificate -Cert $WinRMCert C:\temp\WinRMCert

Import-Certificate -FilePath C:\temp\WinRMCert -
CertStoreLocation Cert:\LocalMachine\Root
Enter-PSSession localhost
The results of the commands are illustrated in Figure
Figure 11.9: Verifying the entering PSSession using SSL by 
importing certificate into Root store

We need to use the FQDN name of the server to connect 
properly as the certificate is checked to ensure that the 
name is matching. At the end, we could remove HTTP but 
it is not necessary as it can also be done on Firewall side 
rather than locally:
#Optional
Get-ChildItem -Path WSMan:\Localhost\listener\listener
*
 | 
Where -contains | Remove-Item
Additionally, we could change the default port for the 
listener. It is not mandatory but can be additional 
protection for the servers. If we would like to hide the 
awareness if the servers expose the WinRM port for 
management. After enumeration of the ports is performed, 
we could get notification or alert from our monitoring 
system based on security agents’ detection rules.
We can execute the following command to list existing 
ports for the listener:
Get-ChildItem -Path WSMan:\Localhost\listener\listener
*\
#To remind the HTTPS values
Get-ChildItem -Path
WSMan:\Localhost\listener\listener
*\Port
 # To Display the 
port

And then we could then execute the following command to 
modify the HTTPS listener:
Get-ChildItem -Path WSMan:\Localhost\listener\listener
*
 | 
Where -contains
At the end, we need to verify that the changes are 
effective:
Enter-PSSession -ComputerName -UseSSL -Port 8888
And the results are shown in Figure

■ DCA2EU003 
X +
<- -> C i bst-48347fcc-7fff-4c07-b15e-3643602d8a26.bastion.azure.com/#/client/RENBWkWMDAzAG... O \$ ☆ 
> □ X :
I QB Administrator C:\Windovrt\system32\cmd.exe 
■
PS C:\Users\adpsadmin.EU> Get-Childltem -Path WSMan:\Localhost\listener\listener
*\
WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Listener
Type 
Keys 
Name
Container 
{Transport-HTTP, Address-
*}
 
Listener_1084132640
Container 
{Transport-HTTPS, Address-
*}
 
Listener_253361480
PS C:\Users\adpsadmin.EU> Get-Childltem -Path WSMan:\Localhost\listener\listener
*\Port
WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Listener\Listener_1084132640
Type 
Name 
SourceOfValue Value
Kstem. String Port 
5985
WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Listener\Listener_253361480
Type 
Name 
SourceOfValue Value
System.String Port 
8888
PS C:\Users\adpsadmin.EU> Get-Childltem -Path WSMan:\Localhost\listener\listener
*
 | Where {$ .Keys contains "Transpor 
t-HTTPS"} | Get-Childltem | Where {$. .Name -eq "Port"} | Set-Item -Value 8888
Set the value of the item
This command set the value of the Item.
Do you want to continue?
[y] Yes [N] No [S] Suspend [?] Help (default is "Y"): y
PS C:\Users\adpsadmin.EU> Enter-PSSession -ComputerName DCAZEU003.eu.adpstest.net -UseSSL -Por 8888 
[DCAZEU003.eu.adpstest.net]: PS C:\Users\adpsadmin.EU\Documents> _
Figure 11.10: Configuring custom WinRM HTTPS listener 
port and access verification
So currently, we can connect to WinRM HTTPS listener with 
custom port. With disabled listener, we could block any 
HTTP traffic, but a better solution is to just block it on 
firewall as some of the local commands or applications 
could rely on standard HTTP WinRM communication.

Using Kerberos and Certificate authentication
As WinRM integrates fully with Windows Server, it supports 
multiple authentication methods like other solutions like 
file sharing IIS, Active Directory. The list of those methods 
is as follows:
Basic It uses plain username and password, so it is not 
recommended to use with WinRM, especially with HTTP 
listener.
Digest It uses hashing of the username and password and 
agreeing on the method. It is vulnerable to man-in-the- 
middle attacks as it is not secure, and it is not supported 
with WinRM server component implementation.
Negotiate Windows Integrated Authentication that depends 
on use case is NTLM (by default in Workgroup) or Kerberos 
(by default in Domain solutions). It is the most common 
way to authenticate.
Kerberos It explicitly forces the Kerberos protocol to be 
used, and it is the most secure option for securing the 
WinRM server in the domain scenarios.

Certificate authentication: This solution utilizes the HTTPS 
listener and enables client authentication through a client 
certificate. It is an ideal choice for managing servers 
across non-trusted domains and standalone 
implementations. Additionally, it is valuable in 
Configuration Management tools employing WinRM to 
manage remote machines, such as Ansible.
If we understand all the options, the best would be to 
make sure the Basic and Digest authentication methods 
are disabled and are not used for managing servers in 
domain, especially domain controllers. To check whether 
they are enabled, we can execute the following commands 
for server and client WinRM components:
#Check WINRM server component authentication settings:
Get-ChildItem -Path WSMan:\localhost\Service\Auth\
#Check WINRM client component authentication settings:
Get-ChildItem -Path WSMan:\localhost\Client\Auth\
The results are shown in Figure

■ DCAZEU003 
x +
C ft bst-69cc404f-6073-4be7-b00a-37d6b8a7a777.bastion.azure.co...
E3 Administrator C:\Windows\system32\cmd.exe
a i* * * □
PS C:\Users\adpsadmin.EU> Get-Childltem -Path WSHan:\localhost\Client\Auth\
>> SCheck WINRM client component authetication settings:
>> Get-Childltem -Path WSMan:\localhost\Service\Auth\
|» ffCheck WINRM server component authetication settings:
[PS C:\Users\adpsadmin.EU>
WSHanConfig
SourceOfValue Value
WSHanConfig : Microsoft.WSMan.Management\WSMan::localhost\Service\Auth
: Microsoft.WSMan.HanagementXWSHan::localhostXClientXAuth
true 
true 
true 
true 
true 
false
System.String 
System.String 
System.String 
System.String 
System.String 
System.String
Type
Name
Name
System.String 
System.String 
System.String 
System.String 
vstem.String 
‘ .String
Basic 
Digest 
Kerberos 
Negotiate 
Certificate 
CredSSP
SourceOfValue Value
Basic 
Kerberos 
Negotiate 
Certificate 
CredSSP 
CbtHardeningLevel
false 
true 
true 
false 
false 
Relaxed
Figure 11.11: WinRM Client and Server authentication
settings
As we can see, on the server side, Basic authentication is 
disabled by default. CredSSP is disabled by default as this 
allows the client to pass the credentials to the server so 
that it can be used to reauthenticate and perform the 
second hop to another resource or server. Managing the 
domain controllers with utilizing the proxy server is usually 
not necessary as we typically connect to DC directly from 
PAM without need for caching the credentials.

We can try to disable the negotiate authentication if we do 
not trust the NTLM settings in our overall AD Forest or 
domain, but it can break some built-in applications or 
commands when using the WinRM locally, as Kerberos is 
used for network authentication using proper FQDN names 
and the like.
Let us verify specific methods to check whether they are 
working properly to connect with WinRM:
#Check settings
Get-ChildItem -Path
#Check Basic Authentication
Enter-PSSession -ComputerName -UseSSL -Port 8888 - 
Authentication Basic
#Check Negotiate Authentication
Enter-PSSession -ComputerName -UseSSL -Port 8888 - 
Authentication Negotiate
Exit

#Check Kerberos Authentication
Enter-PSSession -ComputerName -UseSSL -Port 8888 -
Authentication Kerberos
Exit
The results of the previous commands are shown in Figure

Figure 11.12: Verifying different connection methods to 
access WinRM
To enhance security, utilize the Protected Users group for 
domain and forest administrators, ensuring only Kerberos 
authentication is used. Disabling the Negotiate option can 
cause issues, but this approach safeguards privileged 
accounts, eliminating concerns about NTLM exposure in 
your environment. To make sure the Kerberos auth is 
enforced we can use the following option:
Enter-PSSession -ComputerName -UseSSL -Port 8888 - 
Authentication Kerberos
In Microsoft Documentation for the WinRM authentication 
protocols, certificate authentication requires the client 
certificate to be mapped to the local administrative 
account in domain controller scenario. There is no local 
account as it uses the domain accounts only, and we can 
only log in with local admin account in DSRM mode.
We can try to test the solution anyway and see if this is not 
the case for domain controllers and still map some Domain 
User with the certificate, as all users are referenced locally 
as well for domain controller.

To start configuring the Certificate authentication, we need 
to configure the HTTPS listener, and we already have one 
running as we did it in the previous section of this chapter. 
We need to implement it as it was documented and then 
proceed with the client part.
To create a client authentication certificate, we could use 
the existing certificate for user, for example, deployed by 
Active Directory Certificate Services, but in our example, 
we will use the self-signed version of the certificate that 
can be generated and imported with the following 
commands:
#Create Certificate
$ClientCert = New-SelfSignedCertificate -KeyUsage 
DigitalSignature,KeyEncipherment -CertStoreLocation 
Cert:\CurrentUser\My\ -Type Custom -Subject 
adpsadmin@adpstest.com -TextExtension
#Check Certificate
$ClientCert 
#Export Certificate

$ClientCert | Export-Certificate -FilePath 
c:\temp\ClientCert.crt 
#Import Cert to Trusted People Store
Import-Certificate -FilePath C:\temp\ClientCert.crt - 
CertStoreLocation Cert:\LocalMachine\TrustedPeople
#Import Cert to Trusted Root Store
Import-Certificate -FilePath C:\temp\ClientCert.crt - 
CertStoreLocation Cert:\LocalMachine\Root
The results of the commands are illustrated in Figure

Figure 11.13: Generating and importing the certificate for 
WinRM Cert-based authentication
Once everything is prepared, we can enable the Cert 
Based authentication on WinRM configuration and then try 
to map the certificate with the user on the WinRM server. 
This will be done on the domain controller so it may not

work since those users are not local. However, there are 
domain users that are accessed in a similar way on domain 
controller. We need to execute the following script to verify 
that it will be working even on DCs:
#Enable Cert Auth
WSMan:\localhost\Service\Auth\Certificate
#Map cert to local account
WSMan:\localhost\ClientCertificate -Subject 
'adpsadmin@adpstest.com' -Issuer -Credential 
EU\adpsadmin)
#Test Certificate Authentication
Enter-PSSession -ComputerName
DCAZEU003.eu.adpstest.net -UseSSL -Port 8888 - 
CertificateThumbprint
Exit
The results of the script are as shown in Figure

Figure 11.14: Mapping user to certificate and testing the 
connection using Certificate authentication
As shown in the previous image, it is all working fine and is 
properly mapped to the domain account on domain 
controller. Kerberos is still one of the most flexible and 
secure authentication method for Active Directory so we 
can definitely keep using the Kerberos authentication when 
managing domain controllers within trusted domains.

Windows server advanced firewall and IP filters
When we enable PSRemoting, we need to be sure that the 
firewall rule and IP filtering are set as per our needs. In this 
chapter, we followed the procedure on changing the HTTPS 
port change to 8888, so we need to verify that we can 
access the WinRM remotely and not only from the 
localhost. To verify modified setup, we need to run the 
following command from a remote server, which could be 
an administrative server in our production environment:
Enter-PSSession -ComputerName -UseSSL -Port 8888 - 
Authentication Kerberos
Unfortunately, we were unable to connect to the remote 
domain controller, and the results are illustrated in Figure

■ DCAZEU001 
X +
<- -> C i bst-7f6d18d6-8725-41b1-abf9-0f738bbae298.bastion.azure.com/... □ (£? -fr ft □ X ;
a Windows PowerShell 
— 
(3 X
PS C:\Users\adpsadmin> Enter-PSSession Computer-Name DCAZEUO03.eu.adpstest.net -UseSSL Port 8888 
-Authentication Kerberos
Enter-PSSession : Connecting to remote server DCAZEU003.eu.adpstest.net failed with the 
following error message : WinRM cannot complete the operation. Verify that the specified 
computer name is valid, that the computer is accessible over the network, and that a firewall 
exception for the WinRM service is enabled and allows access from this computer. By default, 
the WinRM firewall exception for public profiles limits access to remote computers within the 
same local subnet. For more information, see the about_Remote_Troubleshooting Help topic. 
At line:l char:l
♦ Enter-PSSession -ComputerName DCAZEU003.eu.adpstest.net -UseSSL -Port ...
+ Categoryinfo 
: InvalidArgument: (DCAZEU003.eu.adpstest.net:String) [Enter-PSSess
ion], PSRemotingTransportException
+ FullyQualifiedErrorld : CreateRemoteRunspaceFailed
PS C:\Users\adpsadmin> _
Figure 11.15: Failed connection to remote server using
custom SSL port
As we changed the port for WinRM listener, we did not 
check whether the firewall settings or IP filtering settings 
were adjusted. We can execute the following commands to 
verify the IP filtering settings for and details of WinRM 
listeners:
#Get IPfilter values for WINRM service
-Path WSMan:\localhost\Service\IP
*Filter

#Get WINRM listeners details
-ResourceURI winrm/config/listener -Enumerate
Results of the command above are shown in Figure
■ DCAZEU003
x +
v
- □
X
«- -» c
A bst-7f6d18d6-8725-41b1-abf9-0f738bbae298.bastion.azure.eom/#/client/RENBW... a
& ☆
» □ XI
S3 Administrator G\Windows\system32\<md.ece
- =■ x
IPS C:\Users\adpsadmin.EU> Get-childitem -Path WSHan:\localhost\Service\IP
*Filter
—
wsnanLonfig: Hicrosoft.wsnan.Management\wsHan::iocalhost\service
Type
Name 
SourceOfValue Value
System.String
System.String
IPv4Filter 
*
IPv6Filter 
•
PS C:\Users\adpsadmin.EU> Get-WSManlnstance -ResourceURI winrm/config/listener -Enumerate
cfg 
: http://schemas.microsoft.eom/wbem/wsman/l/config/listener
xsi 
: http://www.w3.org/2001/XHLSchenia-instance
lang 
: en-us
Address 
: •
Transport 
: HTTP
Port 
: 5985
JSstname 
:
Enabled 
: true
URLPrefix 
: wsman
CertificateThumbprint : 
ListeningOn 
: {10.1.0.5, 127.0.0.1, ::1, fe80::fe09:4S37:6dc2:lfld%18}
cfg 
: http://schemas.microsoft.eom/wbem/wsman/l/config/listener
xsi 
: http://wxrw.w3.org/2001/XHLSchema-instance
lang 
: en-US
Address 
: *
Transport 
: HTTPS
Port 
: 8888
Hostname 
:
Enabled 
: true
URLPrefix 
: wsman
CertificateThumbprint : 07865204F6O402999A73A477018S33B362BE0O72
ListeningOn 
: {10.1.0.5, 127.0.0.1, ::1, fe80::fe09:4537:6dc2:lfld%18)
PS C:\Users\adpsadmin.EU> „ 
-
Figure 11.16: Getting details for listener ports and ip 
filtering for WinRM service

We see that there are no issues with the following settings, 
but we can eventually narrow them down to networks with 
admin servers we would like to connect to:
#IPv4 Network Range
WSMan:\localhost\Service\IPv4Filter 10.0.0.0-10.1.0.254
#IPv6 Block
WSMan:\localhost\Service\IPv6Filter ""
All WinRM filtering the settings seems to be okay, so we 
need to verify the WinRM firewall rules:
#Rule details
Get-NetFirewallRule *WINRM
*
 | select 
name,enabled,profile,direction,action | ft
#Port details
Get-NetFirewallRule *WINRM
*
 | Get-NetFirewallPortFilter | 
select instanceid,LocalPort

#Address details
Get-NetFirewallRule *WINRM
*
 | Get- 
NetFirewallAddressFilter | select 
InstanceID,RemoteAddress
Let us look at Figure
Figure 11.17: Getting details for WinRM firewall rules

As we can see in the previous image, the WinRM HTTPS 
rule is missing from the configuration, so we need to 
create the rule and then check if we have the connectivity:
New-NetFirewallRule -DisplayName Remote Management - 
Name -Profile Any -LocalPort 8888 -Direction Inbound - 
Protocol TCP -Action Allow -Description « Inbound rule for 
Windows Remote Management via WS-Management [TCP - 
RemoteAddress
After the rule is created, we can check whether we can 
successfully connect to WinRM from a remote server:
#Test Connection - will fail because WINRM service 
certificate is missing
Enter-PSSession -ComputerName 
DCAZEU003.eu.adpstest.net -UseSSL -Port 8888 - 
Authentication Kerberos
#Copy WINRM service certificate to remote server 
copy-item '\\dcazeu003\c$\temp\WinRMCert'
C:\temp\winrmcert.crt

#Import WINRM service certificate to trusted root store 
(becasue we don't use PKI infrastrcuture)
Import-Certificate C:\temp\WinRMCert.crt - 
CertStoreLocation Cert:\LocalMachine\Root\
#Connect to server once again using PSSession
Enter-PSSession -ComputerName
DCAZEU003.eu.adpstest.net -UseSSL -Port 8888 -
Authentication Kerberos
The results are as shown in Figure
*■ DCAZSUW1 
x +
-> C i bst-7f6d1&d6-0725-4lb1-abf9-Gf738bbae2S8Jb3shon.azure.com/* *i rcrtent/RENBWlcVV.- Q ☆ ft □ X
£5 Adnwii?trjtor Win4o<*t Pc^crSliell 
— OX
PS C:\temp> Enter-PSSession : 
-■ ‘ DCAZEU003.eu.ad5s1est.net 
8EB8 -Authentication Kerberos
Enter-PSSHSlon : Connecting to remote server- KAZfu003-Co.adpitest.net failed with the
following error message : The server certificate on the destination computer
(KAZEUGG3.eu.adpstest.net:8ES8) has the following errors:
The SSL certificate is signed by an unknown certificate avthgrity. For more informal ion» see 
the abaot_Rercote_Trovbleshcoting Help topic.
At lin®:l chflr:!
+ Enter-PSSession -ComputerNane KAZEUM3.eu.adpstest.net -UseSSL -Port ...
* CategoryTnfn 
r FnvalidArgiJBPnt: (DTAZFURtn . PiJ.adpstP'St .net :String} [Fntpr-PSSp
ssicrti], PSRemotingTransportExceptiofl
* Ful lyQual if led Error Id ; Great eRemot eRuns pacefai led
PS C:\terap> Copy-item ■ d: >-uUl:cS,'.trrnp‘..HirR,1Crrt ' C:\tcmp\winmeert .ert
PS Cr\temp> In-port-Certificate C:\tenp\WinRHCert.crt CertStoreLocation Cert:MocalMachine\Root\
B
PSParentPath: Microsoft. PowerShell. Sec urityA.Cert if1cate:: Loca iMach ine\Root
Thumbprint 
Subject
07865204 F6DA02999A73M 77018533B362 BE 0D7 2 CN-de azeuM3. eu . adpste st. net
PS C:\temp> Enter-PSSessicun -Cor^oterhame KAZEUB83.eu.adpstest.net -UseSSL -Port 88BB Authenticatio- Kerberos 
(KAZEU003. ru -adpStMt. net ] : PS C: 
dps n. EUWOCumentS >

Figure 11.18: Starting PSSession to remote server using 
Kerberos with SSL on custom port

Conclusion
Windows PowerShell, combined with the PSRemoting, is 
a great solution for managing Active Directory as it 
perfectly integrates with underlying Windows Server 
Operating system. With so many advanced capabilities, 
we can implement many more services using Windows 
Server Core, which improves our overall security 
posture.
With new capabilities come new security issues and 
vulnerabilities that can spread across all systems. There 
is also specific ransomware that are explicitly using the 
WinRM to spread across infrastructure. PSRemoting is 
enabled by default on the new versions of Windows 
Server OS, so it is important for us to understand that 
the security aspects of the remote management need to 
be addressed to trust our environment when we would 
like to manage it remotely.
WinRM implements many security settings that could be 
enforced, but we cannot forget about standard 
principals like implementing the Windows Integrated 
Firewall that will allow connectivity only from specific

management network or at least to specific range of 
local ports. We must always remember to use the most 
secure authentication methods in both domain and 
standalone environments and implement the right 
solution for configuration management products, like 
Ansible, that use WinRM to manage servers and are 
agentless. For the domain, we should use Kerberos auth, 
and for non-trusted forest or standalone server 
management it is worth considering and implementing 
certificate-based authentication.
In the next chapter, we will learn about the 
Configuration Management solution that is based on 
PowerShell Desired State Configuration We will onboard 
servers to Azure Automation DSC and use DSC 
resources to configure domain controllers without even 
logging in to the server as Administrator. At the end, we 
will try to create custom DSC and use it when 
configuring domain controller automatically.
Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors:

https://discord.bpbonline.com

C 
HAPTER 
12 
PowerShell DSC for AD Configuration Management

Introduction
In modern Enterprises DevOps with inclusion of 
Infrastructure as a Code and configuration management 
becomes an important part of managing IT 
infrastructure. It is not only applicable for application 
development but is also used to manage core company 
infrastructure, including Active Directory. Depending on 
whether Active Directory is used to host the corporate 
IAM or deployed for supporting customers who use 
Microsoft-based products, there could be different 
approaches when implementing configuration 
management.
PowerShell Desired State Configuration is a 
configuration management platform that is created in 
PowerShell, and it implements Infrastructure as a Code. 
It has been developed to support Windows Server and 
Clients, but it can also run-on Linux and manage those 
servers as well. PowerShell DSC components include the 
following:
Resources: Resources are created in PowerShell 
modules, and they contain the code that implements

the logic, that is, processing and keeping the 
configuration of specific system components in the 
desired state.
Configurations: It is a PowerShell script that defines how 
the server configuration should be implemented. Uses 
DSC resources to define the configuration.
Local Configuration Manager This component processes 
the DSC configurations and uses the DSC resources to 
configure the system it is running on.
PowerShell DSC can be utilized with Push and Pull 
configuration modes. With the Push mode, the 
configuration is manually pushed to the server using 
PowerShell script locally or remotely. With the Pull mode, 
the configuration is pulled by LCM running on the server 
and uses the pre-configured settings to connect with 
proper Pull Server.
Pull Server can be implemented manually or delivered 
using other types of tools, such as Chef or Azure DSC. 
PowerShell DSC Modules could also be used by other 
configuration management products in the ‘Lite way,’ 
meaning the Invoke-DSCResource command is used by 
those third-party agents and there is no configuration or

pull server required when processing those 
configurations.
Our Active Directory infrastructure runs on Azure, so it is 
a platform we already trust to hold the domain 
controllers. Therefore, it implements the configuration 
management solution that runs in Azure and keeps the 
management and access to the solution on the same 
level as the access to domain controllers. If we would 
implement the configuration management in a different 
infrastructure, we would need to treat this infrastructure 
the same as any other Tier 0 infrastructure components.
In this chapter, we will learn the basics of PowerShell 
DSC. We will learn how to create DSC configurations and 
push the configuration to servers. We will also go 
through different configuration management solutions 
and see if we can use them to manage Active Directory. 
Moving on, we will deep dive into Azure Automation DSC 
and design the solution that could work for Active 
Directory in Azure. Lastly, we would implement the 
Azure Automation DSC and configure Active Directory 
Domain Controllers using the implemented solution.

Structure
This chapter will cover the following topics:
Introduction to PowerShell DSC
Possible configuration management products
Azure Automation Desired State Configuration
Solution architecture
Solution implementation
DSC configuration of AD infrastructure

Objectives
This chapter delves into the fundamentals of PowerShell 
Desired State Configuration (DSC), providing a 
comprehensive understanding of its key principles. 
Beginning with an introduction to PowerShell DSC, we 
explore its core concepts and functionalities. The 
narrative then shifts to an overview of various 
configuration management products, aiding readers in 
selecting the most suitable solution. Azure Automation 
Desired State Configuration is spotlighted, elucidating 
its role in cloud-based configuration management.
Practicality takes center stage as we dissect solution 
architecture, ensuring readers grasp the operational 
nuances of PowerShell DSC in real-world scenarios. 
Implementation steps follow suit, guiding readers 
through the process. The chapter culminates in a 
focused exploration of DSC configuration for Active 
Directory infrastructure, bridging theory with hands-on 
application. By the conclusion, readers will be equipped 
with the knowledge and practical insights needed to 
navigate PowerShell DSC effectively, especially in the 
critical realm of Active Directory management.

Introduction to PowerShell DSC
As mentioned, in the outline, PowerShell DSC is platform 
implemented in PowerShell that allows us to manage 
(laaC). Therefore, to implement the configuration, we need 
to implement PowerShell script to create the Configuration 
and then apply this configuration with Push mode or store 
it on Pull server. Then, configure the remote system to pull 
the specific configuration.
We did not deploy Azure Automation DSC in our test 
environment in the beginning, so we need to use Pull mode 
while applying the configuration. The simple configuration 
that could be created and applied to the Windows Server 
would look something like the following:
#Preparing Configuration Directory
if(!(test-path C:\Dsc))
{ 
new-item C:\Dsc -ItemType Directory

}
Set-Location C:\Dsc
#Defining Configuration
Configuration CreateTempFolder {
#Importing Basic DSC Module
Import-DscResource -ModuleName
PsDesiredStateConfiguration
#Defining Node Configuration
Node 'DCAZEU003' {
#Calling File Resouce with specifying the folder creation
File CreateTemp {
Ensure = "Present"
DestinationPath = "C:\Temp"

Type = "Directory" 
}
} 
}
#Compiling DSC Configuration
CreateTempFolder
We will begin by preparing a folder where we will store our 
DSC configurations. Then, we will define the configuration 
and in it, we will import all the DSC resources that we are 
going to use in our configuration script. After everything is 
defined, we need to compile the configuration. The results 
of this configuration script are illustrated in Figure

Figure 12.1: PowerShell DSC Configuration and definition
The configuration is now defined and compiled, and it is 
ready to be pushed to the destination server. The What is 
MOF? file contains all the settings defined in the 
configuration in the standardized format. It is important to 
keep the MOF file secure, as it contains all the settings, 
including passwords, and it can be secured using the 
certificates.
To Push the configuration to the desired server, we need to 
use the following command:

C:\Dsc\CreateTempFolder -Verbose
Of course, PSRemoting needs to be enabled on the remote 
servers, and the user performing the configuration needs 
to have Administrator access. After executing the 
mentioned command, we receive the results shown in 
Figure
M DCAZEU001 
X +
<- -> c a bst-d6614536-ced6-49S0-b542-b0738e677d82.bastion.azure.com/*/c... □ & ☆ 
* SI □ X
S3 Windews PowerShell ISE 
— 
13 X
£4e | Edit y*w  Tool! Debug Add-ons Help
a ® u ox c* ■ w u 1=1 n r ® 3 ,
LCM
LCM
LCM
LCM
VERBOSE 
VERBOSE 
VERBOSE 
VERBOSE 
VERBOSE 
VERBOSE
LCM
LCM
LCM
Test 
Set 
Resource
Set
VERBOSE 
VERBOSE
[[FilejCreateTemp]
[[File]CreateTemp]
[[File]CreateTemp] The destination object was found and no acti 
[[File]CreateTemp] in 0.0160 seconds.
[[FilejCreateTemp]
[[File]GreateTemp]
arrived 
[ Start 
[ Start 
[ Start
VERBOSE: An LCM method call 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
[DCAZEU003] 
Operation ‘Invoke 
Time taken for cot
[ End 
[ Skip 
[ End 
[ End 
[ End 
CinMethod* complete, 
(figuration job to complet
PS C:\Dso Start-DscConfiguration -Path C:\Dsc\CreateTempFolder -Wait -Verbose 
VERBOSE: Perform operation 'invoke CifiMethod' with following parameters, ''methodName* » SendConfigurationApply 
_DSCLocalConfigurationManager,* namespaceName* ■ root/Microsoft/Windows/DesiredStateConfiguration".
from computer DCAZEUOO1 with user sid S-l-S-21-177565288-1688162848-2165744. 
Set 
Resource
WPS C:\Dso
Ln 17 Cd 12
100%
Figure 12.2: Applying PowerShell DSC Configuration using 
Push Mode to remote server

As we see in the verbose output, the C:\temp folder 
already exists. There is no modification required, so the 
DSC is only verifying the existing setup and will not 
attempt to create the folder. We can remove the folder and 
see if there is a different response with DSC configuration:
Remove-Item \\DCAZEU003\c$\temp
C:\Dsc\CreateTempFolder -Verbose
The results are shown in Figure

Figure 12.3: Re-applying configuration that will re-create 
temp folder
This is how we can get started with writing and applying 
the PowerShell DSC configurations. We can combine 
multiple resources in one configuration, and we can also 
configure several different system components with those 
resources, including Active Directory.

Possible configuration management products
After the PowerShell DSC introduction, we are now 
aware that we can configure systems using 
Configurations that are defined inside PowerShell 
scripts. We used the Push Mode to deploy configuration. 
However, this solution is not scalable in design as we 
manage multiple servers. We do not want to keep 
pushing the configuration to sync it with the server 
settings and apply it to new systems that are included in 
our configuration management solution.
Another option would be to implement the PowerShell 
DSC Pull server as it is included in the DSC platform. Pull 
server runs on Windows Server OS, which runs as SMB 
Pull server and HTTP Pull Server. Microsoft no longer 
implements new capabilities into the DSC Pull server, 
instead it recommends using Azure or Opensource Pull 
server solution. A list of well-known configuration 
management solutions that could be used are as 
follows:
PowerShell DSC Pull server: It is no longer developed by 
Microsoft and requires a separate Windows Server to be 

deployed and managed. It is one of the options 
available when managing on-prem environments that 
cannot utilize cloud solutions like Automation DSC.
Azure Automation DSC: Azure Automation DSC is the 
solution that implements DSC Pull and Reporting 
Services directly inside an Azure Automation account. It 
provides basic reporting, managing configuration, and 
ability to assign specific configurations to servers. An 
option to consider when we manage Azure Server and 
on-prem VMs is that they support hybrid architecture.
Ansible: Ansible is an open-source product with 
enterprise variations that implements Infrastructure as a 
Code configuration management with agentless 
infrastructure. For Windows servers, it uses WINRM and 
PowerShell remoting to send the configuration so that 
there could be potential problem with managing the 
credentials that Ansible will use to connect to WINRM. 
For domain controllers, this access would need to have 
Domain Admin level of permissions. Ansible follows the 
procedural concept, so it does not focus on being 
declarative and treating the manage systems specific 
configurations as objects.

Puppet: Puppet is an open-source product with 
enterprise solutions that uses agent-based architecture. 
It also aims to be declarative, as it tries to represent 
every system setting as object or object property. Thus, 
it is different with Ansible as we do not need to manage 
the agents on the clients. It is slower to implement than 
Ansible, but it can be used to manage extremely specific 
settings, with more control over system Configuration 
details.
Chef: Chef also used agent-based architecture and is an 
open-source software. It also uses the procedural 
concept that implements the configuration, following 
resource definitions step by step. It has a similar 
approach to Ansible, but it uses the agent.
As we run our environment on Azure to keep the control 
over configuration management, we can also use Azure 
Automation DSC. Deploying our own PowerShell DSC 
Pull server will apply a solution that is considered 
deprecated and not in active development.

Azure Automation Desired State Configuration
To start with Azure Automation DSC, we need to make sure 
we have an Automation account created for our 
environment. We already created those earlier, so in order 
to supply other requirements, we can reuse the existing 
Automation account and start configuring the Desired 
State Configuration We open a specific Automation 
account and navigate into State Configuration DSC option, 
and we can start working on Configurations. Let us add the 
configuration we created earlier to our Automation 
account, except we do not need to prepare the folders and 
compile it:
#Defining Configuration
Configuration CreateTempFolder {
#Importing Basic DSC Module
Import-DscResource -ModuleName 
PsDesiredStateConfiguration 
#Defining Node Configuration

Node 'DCAZEU003' { 
#Calling File Resouce with specifying the folder creation
File CreateTemp {
Ensure = "Present"
DestinationPath = "C:\Temp"
Type = "Directory"
}
}
}
We save this configuration file with the same name as 
declared configuration name and then attach it to Azure 
DSC. Thus, we use options to Add in the State 
Configuration (DSC) in the Automation account, as 
illustrated in Figure 12.4 and Figure

Figure 12.4: Adding configuration to Azure Automation DSC

Ji import - MitnMofi Azure
X +
<- -> C A portalazure.com/
*Qadpowershellazuregmail.onmicrosofLcom/resource/su...
 t) Ci- If? P -J Cl X
P Search resources, services, and docs (6
*/)
Home > AA-Configuration Management | State configuration (DSC) >
K| Import
Configuration
Q Add a new configuration or update an easting one-
Select a file smaller than 1 MB to import
The configurator name in the script must match the configurator name in the textbox ‘Name
*
 betow.
Configuration file * Q
[ "CrwttTempFclder.pir
Name *
f CreateTemppqld&r
Description
Figure 12.5: Adding configuration to Azure Automation DSC
We will save this configuration File with the same name as 
the declared configuration. Then, we will attach it to Azure 
DSC using the various options available.
Once the configuration is added, we need to compile it to 
prepare the DSC configuration in our Automation account. 
To compile the configuration, we will click on the added 
configuration in the Configurations view and then use the 
Compile option to proceed. Then, we need to verify that

the compilation succeeded, as shown in Figure 12.6 and 
Figure
Figure 12.6: Compiling configuration to Azure Automation 
DSC

Figure 12.7: Compiling configuration to Azure Automation 
DSC
After the job is finished, we need to check the results of 
the compilation. We can check whether the job finished 
without errors and whether we have specific node 
configurations created. The results are illustrated in Figure

Home > AA-ConfigurationManagement | State configuration (DSC) >
v - 
□
X
CreateTempFolder - Microsoft A. X
+
-> C B portal.azure.eom/#view/Microsoft_Azure_Automation/DscCo... 0
li I*  ☆ 
* 
□ X
Microsoft Azure
Search resources, services, and docs (G
*/)
••• *
CreateTempFolder ••• 
x
Configuration
S Compile q Export ® Delete
Essentials
Resource group (move)
Res -Group-Dev-ADTest
Location
West Europe
Subscription ID
8c1 c22ae-21 d8-4a8c-a4dc-43aae2c76a90
Last published
2/13/2023.12:36 AM
Compilation jobs Node configurations
Created 
Status
2/13/2023,12:38 AM 
Completed
JSON View
Account
AA-ConfigurationManagement
Subscription (move)
ADPowersheiiAzure
Status
Published
Configuration source
View configuration source
Last updated
2/13/2023,12:40 AM
Figure 12.8: Verifying compilation results for Azure 
Automation DSC
At the same time, we can add the Azure VMs to be 
connected to the Automation DSC. When we have the 
Nodes tab opened in the State Configuration DSC view of 
Automation account, we choose the Add option and 
proceed with adding the VM to Automation DSC, as shown 
in Figure 12.9 and Figure

Figure 12.9: Adding Azure VM to Azure Automation DSC

Figure 12.10: Adding Azure VM to Azure Automation DSC
After the VM is added, we will be able to see whether the 
configuration chosen for the specific VM has been 
completed successfully. If not, we can go to the execution 
details and check what happened with specific steps of the 
DSC configuration. We are then able to troubleshoot our 
problems, as shown in Figure

Figure 12.11: Adding Azure VM to Azure Automation DSC
After configuration is applied properly and the server is 
reporting as Compliant in the Azure Automation DSC, it is 
in the state that we expected when we composed the 
Configuration script.
Configuration can be much more complex, and we can 
manage many settings of the system, such as creating 
files, modifying registry, manipulating services, installing 

software, and even promoting domain controllers in 
existing domains and even creating new domains and 
entire AD forests.

Solution architecture
The main goal of the solution will be to manage the 
Configuration of the Active Directory Domain Controller 
from the moment the VM is deployed in Azure to when 
the server is configured with all the necessary 
prerequisites and we have the Domain Controller 
promotion performed.
In our example, we will not follow the scenario of 
creating new domain and forest entirely, with utilizing 
the capabilities of the PowerShell DSC and Azure 
Automation DSC. We would like to control who has 
access to Automation DSC, so we need to create the 
Automation account in the same subscription or 
resource group as the domain controllers, to limit access 
to the people who can manage the DCs.
Azure DevOps or any other CI/CD products could be 
considered as well to speed up and automate the 
configuration compilation process as well to have the 
code repository in the manage location. For now, we will 
not include it into the consideration.

If our aim is to manage EU domain, including On-Prem 
servers and Azure VMs, we could implement the solution 
following the concept illustrated in the following Figure

Figure 12.12: Automation DSC solution for that supports 
on-prem and Azure VM Domain Controllers
The solution could manage all the domains and the VMs 
that are not domain controllers as well. However, it is 
better to separate the Automation accounts that are 
used for managing the most sensitive servers from 
those used for other services to ensure that the access 
control is on the proper level with managing the Tier 0 
type of resources.
In terms of DSC configuration components, we could 
include the following in the configuration-specific part of 
the Domain Controller provisioning:
Install ADDS-related features
Install standard Windows features
Install RSAT tools
Make sure the Microsoft Defender is running

Enforce Firewall settings
Implement specific hardening settings, for example, 
disable printer spooler
Verify connectivity with the AD domain
Join server to domain, for example, Domain Controller 
staging OU
Promote server as a Domain Controller
Move server to the required AD site and subnet
Configure Windows Server Backup with full backup/ 
system state backup
As we can see, we can automate all the steps necessary 
to configure Domain Controller unattended and properly. 
We do not really need to write the entire logic or 
separate PowerShell Resources as they are mostly 
available within the ActiveDirectoryDSC Module that can 
be installed on the servers, clients, and Automation 
accounts.

This module contains a broad list of DSC resources, 
including the following:
ADDomain: Creates new domain in the existing forest or 
in a new forest
ADDomainController: Promotes server to Domain 
Controller
WaitForADDomain: Checks whether the ADDomain 
exists inside of the current network
ADOrganizationalUnit: Creates or modifies AD 
Organizational Unit
ADUser: Creates or modifies Active Directory User
ADComputer: Creates (pre-stage) or modifies Active 
Directory computer
As we can see, we can manage different aspects of 
Active Directory. It is important to check whether every 
DSC module documentation is beneficial, to learn how 
we should use specific resources when implementing 
the solution that will work for everyone.


Solution implementation
When we have all the servers available, we need to create 
Azure Automation account and make sure we can attach 
the Azure VMs to the Automation accounts. We will use an 
example from this chapter and add the EU domain 
controllers into the Azure Automation DSC.
We can do this using the Add option on Nodes tab on the 
State Configuration (DSC) page and then add all the 
servers that were not added into the Automation DSC 
earlier. Results are illustrated in the following Figure 12.13 
and Figure

Figure 12.13: Adding all domain controllers from one 
domain to Azure Automation DSC

Figure 12.14: Adding all domain controllers from one 
domain to Azure Automation DSC
As we can see, all the servers have configuration that was 
originally created for DCAZEU003. However, in Azure 
Automation DSC, you can assign any of the available 
compiled configuration, regardless of the node it was 
created for.
Infrastructure outside Azure can be managed using the 
Azure Automation DSC but there is additional cost

associated with it. To onboard OnPrem servers we need to 
have access to Automation account for DSC part, so they 
need to have full access to the internet. However, it is not 
recommended for the domain controllers. So, we can 
either implement URL filtering on Firewall devices or use 
proxy for that connectivity in Azure Public, as follows:
Port: Only 443 required for outbound internet access
Global
Agent
If we want to use other services from Azure Automation, 
we need to have connectivity to the following endpoints in 
Azure Public:
*.ods.opinsights.azure.com
*.oms.opinsights.azure.com
*.blob.core.windows.net
*.azure-automation.net

Refer to the documentation details on the following 
Microsoft Learn page: 
https://learn.microsoft.com/en- 
us/azure/automation/automation-network- 
configuration#hybrid-runbook-worker-and-state- 
configuration
Similar to Azure VMs, on-prem infrastructure needs to be 
onboarded to Azure Automation DSC. We cannot use the 
Add option as there is no Azure VMs related to those 
servers. However, we can execute a specific script to 
generate DSC Meta configuration for the LCM that will 
allow on-prem machines to be connected to the specific 
Automation account. To generate the Meta configuration, 
we need to execute the following commands in Azure 
Cloud Shell connected to the specific subscription:
Mkdir DSCConfigs
Cd DSCConfigs
# Define the parameters for Get-
AzAutomationDscOnboardingMetaconfig using PowerShell 
Splatting

$Params = @{
ResourceGroupName = # The name of the Resource
Group that contains your Azure Automation account
AutomationAccountName = # The name of the Azure 
Automation account where you want a node on-boarded to
ComputerName = # The names of the computers that 
the metaconfiguration will be generated for
OutputFolder = ".\"
}
# Use PowerShell splatting to pass parameters to the 
Azure Automation cmdlet being invoked
# For more info about splatting, run: Get-Help -Name 
about_Splatting
Get-AzAutomationDscOnboardingMetaconfig @Params
We can then download the configuration files, specifying 
the path in an unusual way:

/home/mariusz/DSCConfigs/DscMetaConfigs\DCOPEU005.m 
eta.mof
Refer to the following Figure
Figure 12.15: Creating DSC LCM Meta Configurations
Once we have the configuration file, we need to copy it 
into the DSC folder and then try to apply it to the LCM on 
the on-prem server:

#Helper commands to verify the server we execute the 
command locally or remotely
$env:computername
#Checking name of the downloaded file as it is taken from 
Azure Cloud Shell
dir
#Trying to configure the LCM
".\" -ComputerName "DCOPEU005"
#Fixing the naming convention issues for the
DSCMetaConfig file
.\DscMetaConfigsDCOPEU005.meta.mof
.\DCOPEU005.meta.mof
#Retrying the LCM Configuration 
".\" -ComputerName "DCOPEU005"

The results of these commands are shown in the following 
Figure
Figure 12.16: Adding On-Prem server to Azure Automation 
DSC
As soon as we add all the servers, both on-prem and 
Azure, we will be able to assign the configuration to all of 
them. Either each server will receive the same 
configuration and the data should differentiated with using 
parameters, or each server will use different configuration 
that is written only for that specific server. At the end, the 
status of the Azure Automation summary should be as 
shown in the following Figure

Figure 12.17: Summary of Azure Automation DSC status 
after adding all required systems

DSC configuration of AD infrastructure
Once the configuration management infrastructure is 
configured along with the destination servers, we will be 
able to manage the Active Directory Domain Controllers 
using Azure Automation DSC, with PowerShell DSC as the 
configuration engine. Microsoft allowed the PowerShell 
community to develop various DSC Modules. There are 
many modules officially supported by Microsoft and 
developed by their engineers.
Modules are PowerShell Gallery if they meet the standards 
to be published within the official modules catalog. The 
ActiveDirectoryDSC module contains multiple DSC 
resources that are written to configure and manage 
different areas of Active Directory service including 
creating domains and forests.
It is hard to develop the DSC configuration on existing 
infrastructure, as there is a risk of modifying or breaking 
the existing setup. Thus, it is probably better to develop 
the configuration that will manage Active Directory Domain 
Controller on a server without any production workload. 
Once configuration is proper and there are no reported 
issues, attach the configuration to the rest of the

infrastructure if required (sometimes it is not necessary for 
AD).
The DSC module is required when the configuration is 
developed, compiled and applied. Thus, it needs to added 
locally and into Automation account. To add the 
ActiveDirectoryDSC module to the current system, we can 
execute this command:
ActiveDirectoryDSC
If we do not have access to internet or the PowerShell 
Gallery, we need to save module on the client that has this 
access and then copy it into the destination server 
modules folder:
Save-Module ActiveDirectoryDSC -Path
Copy-Item -Destination "\\$DestinationServer\C$\Program 
Files\WindowsPowerShell\Modules\"
With Azure Automation DSC, compilations of DSC 
Configurations are performed using Automation account. 
Moreover, the Automation account adds the necessary 
modules to the destination servers, both Azure VMs and 
OnPrem Domain Controllers.

To add the ActiveDirectoryDSC module to our Automation 
account, we need to navigate to the Modules page in the 
specific Automation account and then use the Add the 
module option. Then, we can choose the module from the 
PowerShell Gallery or manually upload it from the prepared 
ZIP file that was downloaded from Gallery, GitHub or was 
developed on our own. This operation is illustrated in the 
following Figure

Figure 12.18: Adding DSC Module to Azure Automation 
account
In Chapter Active Directory Environment the script that 
was installing additional domain controller inside the child 
domain looked as follows:
Install-WindowsFeature RSAT-AD-TOOLS
Install-WindowsFeature AD-Domain-Services -
IncludeManagementTools
$Password = Read-Host -Prompt 'SafeModePassword' - 
AsSecureString
$DatabasePath = "C:\Windows\NTDS"
$SysVolPath = "C:\Windows\Sysvol"
$LogPath = "C:\Windows\NTDS"
$DomainName = "eu.adpstest.net"
$Credential = Get-Credential -Message "Provide Child 
Domain Admin Credential" -UserName
"adpsadmin@eu.adpstest.net"

Install-ADDSDomainController -DomainName 
$DomainNAme -LogPath $LogPath -SysVolPath $SysVolPath 
-DatabasePath $DatabasePath -
SafeModeAdministratorPassword $Password - 
InstallDNS:$true -Credential $Credential
The same operation can be done in an unattended way, 
using the Azure Automation DSC. Firstly, we need to install 
all the necessary features:
WindowsFeature 'ADDSFeature'
{
Ensure = 'Present'
Name = 'AD-Domain-Services'
}
WindowsFeature 'ADTools'
{

= 'Present'
Name = 'RSAT-AD-TOOLS'
IncludeAllSubFeature = $True
DependsOn = '[WindowsFeature]ADDSFeature'
}
Once all the features are installed, we need to ensure that 
the domain we would like to add the additional domain 
controller to is available, as we do not want to promote it 
until we have proper connectivity:
WaitForADDomain 'WaitForestAvailability'
{
DomainName = 'eu.adpstest.net'
Credential = $EUDomainCredential
= '[WindowsFeature]ADTools'
}

Once connectivity is confirmed, we can add the domain 
controller using the ADDomainController DSC resource:
ADDomainController 'PromoteEUDomainController'
{
DomainName = 'eu.adpstest.net'
Credential 
= $DACredential
SafeModeAdministratorPassword = $SafeModeCredential
SysVolPath = "C:\Windows\Sysvol"
DatabasePath = "C:\Windows\NTDS"
LogPath = "C:\Windows\NTDS"
InstallDNS = $True
DependsOn 
=
'[WaitForADDomain]WaitForestAvailability'

}
With this resource, we want to promote additional domain 
controller to the eu.adpstest.net domain. We specify the 
credentials and that we would like to integrate with DNS 
and provide the safe mode password as well. The best way 
to store passwords securely would be integration with a 
password management system, such as CyberArk or 
equivalent. In our solution, we could use Azure Key Vault to 
store the Automation account managed identity.
To implement the solution, we need ensure that the 
Automation account has manage service identity enabled, 
as illustrated in the following Figure 12.19 and Figure

Figure 12.19: Managed system assigned identities

Figure 12.20: Managed system assigned identities
We can then start creating the Key Vault with the policy 
that will allow secret management for the Manage Identity 
that we have with the Azure Automation account. We will 
specify standard parameters and ensure that the proper 
permissions are set. An example configuration is shown in 
the following Figure

Figure 12.21: Key Vault details and access policy
We can then add the secrets to the Key Vault for the 
SafeModePassword and DomainAdmin credentials, as 
shown in the Figure 12.22 and Figure 12.23 below:

Figure 12.22: Creating Secrets in the Key Vault

Home > Key vaults > KeyVault-DSC-AD
A KeyVault-DSC-AD - Microsoft A. X +
v - 
□ X
<- -> O ft portal.azure.eom/#@adpowershellazuregmai... * ft Q
•1 
□ 
ii? 
*
■
Microsoft Azure
P Search resources, services, and docs (G ■*■/)
pi^ KeyVault-DSC-AD | Secrets 
x
Key vault
+ Generate/lmport O Refresh T Restore Backup </> View sample code fl Manage deleted secrets
Name
DomainAdminPassword
Type
Status
Enabled
Expiration date
DomainAdminName
Enabled
SafeModePassword
Enabled
Figure 12.23: Creating Secrets in the Key Vault
As soon as we add the Domain Admin level credentials into 
the Key Vault, it becomes a resource that only AD Admins 
will have access to in the Automation Account. Otherwise, 
there could be permission escalations happening using the 
Lateral movement attacks.
Let us now address how we get those secrets in our DSC 
configurations. As the access to those needs to be from 
the Automation account, and the configuration will be 
compiled inside Automation account context, and we need 

to connect to our Automation account using managed 
identity and the following command:
Connect-AzAccount -Identity
In Earlier version of Automation accounts, it was much 
more complicated to connect resources as we had to use 
Run as Account details, but those are going to be obsolete 
now. After we connect in the Automation account context, 
we can start retrieving the Key Vault secrets with the 
following commands:
#Get Domain Admin Username
$UserName = Get-AzKeyVaultSecret -VaultName 
$KeyVaultName -Name $SecretUserName -AsPlainText
#Get Domain Admin Password
$Password = Get-AzKeyVaultSecret -VaultName 
$KeyVaultName -Name $SecretUserPassword -AsPlainText
#Convert to Secure String
$PasswordString = ConvertTo-SecureString -String 
$Password -AsPlainText -Force

#Build the Credential Object 
$DACredential = New-Object -TypeName 
"System.Management.Automation.PSCredential" -
ArgumentList
This is similar for Safe Mode password, except that we do 
not need to retrieve the username as it is just a 
placeholder for our credential object:
#Get SafeMode Password
$SafeModePassword = Get-AzKeyVaultSecret -VaultName 
$KeyVaultName -Name $SafeModeSecretName - 
AsPlainText
#Convert to Secure String
$SafeModePasswordString = ConvertTo-SecureString - 
String $SafeModePassword -AsPlainText -Force
#Build the Safe Mode Credential Object
$SafeModeCredential = -TypeName 
"System.Management.Automation.PSCredential" - 
ArgumentList $SafeModePasswordString

The entire configuration should look as follows:
Configuration PromoteEUDomainController
{
= "eu.adpstest.net"
= "EU"
= "KeyVault-DSC-AD"
= "DomainAdminName"
= "DomainAdminPassword"
= "SafeModePassword"
#Connect to Automation Account
-Identity
#Get Domain Admin Username
$UserName = Get-AzKeyVaultSecret -VaultName
$KeyVaultName -Name $SecretUserName -AsPlainText

#Get Domain Admin Password
$Password = Get-AzKeyVaultSecret -VaultName
$KeyVaultName -Name $SecretUserPassword -AsPlainText
#Convert to Secure String
$PasswordString = ConvertTo-SecureString -String 
$Password -AsPlainText -Force
#Build the Credential Object
$DACredential = -TypeName
"System.Management.Automation.PSCredential" -
ArgumentList $PasswordString
#Get SafeMode Password
$SafeModePassword = Get-AzKeyVaultSecret -
VaultName $KeyVaultName -Name $SafeModeSecretName 
-AsPlainText
#Convert to Secure String
$SafeModePasswordString = ConvertTo-SecureString - 
String $SafeModePassword -AsPlainText -Force

#Build the Safe Mode Credential Object
$SafeModeCredential = -TypeName
"System.Management.Automation.PSCredential" - 
ArgumentList $SafeModePasswordString
PSDesiredStateConfiguration
ActiveDirectoryDsc
node localhost
{
WindowsFeature 'ADDSFeature'
{
Ensure = 'Present'
Name = 'AD-Domain-Services'
}
WindowsFeature 'ADTools'

{
Ensure = 'Present'
Name = 'RSAT-AD-TOOLS'
IncludeAllSubFeature = $True
DependsOn = '[WindowsFeature]ADDSFeature'
}
WaitForADDomain 'WaitForestAvailability'
{
DomainName =
Credential =
= '[WindowsFeature]ADTools'
}

ADDomainController 'DomainControllerMinimal'
{
Credential 
=
= "C:\Windows\Sysvol"
= "C:\Windows\NTDS"
= "C:\Windows\NTDS"
= $True
DependsOn 
=
'[WaitForADDomain]WaitForestAvailability'
}
}
}

Now, we need to save the configuration and try to upload 
and compile it in the Azure Automation account, as 
illustrated in the following Figure 12.24 and Figure
Figure 12.24: Compiling the PromoteEUDomainController 
configuration

Figure 12.25: Compiling the PromoteEUDomainController 
configuration
After compiling the configuration multiple times due to 
potential errors that need to be checked, and once they 
are resolved, we can start assigning the configuration to 
the servers. The beauty of the DSC is the fact that we can 
assign it to the existing domain controller that should 
match the configuration, and it should be able to confirm 
that the configuration is compliant. Let us try to assign it to 
the existing Domain Controller. Currently, the DCAZEU003 

has the CreateTempFolder configuration attached, as 
illustrated in the following Figure
Figure 12.26: Verifying the existing Domain Controller
Configuration
Currently, the configuration is compliant on the DCEU003 
machine. We created the configuration that could promote 
the additional domain controller to the eu.adpstest.net 
domain. However, it can be used on the existing server to 
verify that the server configuration is running well. It is 
always better to verify the configuration in dev and test

environments first and then proceed with Prod
environments.
We can change the configuration for a specific server, as 
illustrated in the following Figure 12.27 and Figure
A DCAZEUDOJ - Microsoft Azure X
C ft portal.azure.coni/#@adpowershellaz<j... 
It
Microsoft Azure
fi Search resources. services, end docs (<3 */>
Home ? AA-Configuration Manage ment | Stale configuration (DSC) >
! DCAZEU003
© Assign node configuration X Unregister
a Essentials
Resource group
id
di 9^91 6-mM -11 ed-aad ? -0COd9a67Of 2d
last seen time
2/20/2023.1246 AM
Configuration
Create TemoFolder
Registration time
2/13/2021.1242 AM
JSOM View
IP address
10.1.0.5
Account
AA-Con figuration Ma nagement
Virtual machine
DCAZEU003
Node configuration
CreateTemphotder.tXAZEUOO?
Status
Compliant
Figure 12.27: Changing the configuration on the existing 
Domain Controller

ii Assign Node Configuration -MX +
C A porta Lazure.com/* @adpowershellazu... 
& Q 
-
£> Search resources. services, a nd docs (G+y)
Home > AA-ConfigtnationManagemenl | State configuration (DSC) > DCAZEU003 >
—। Assign Node Configuration
DCAZEUOM
o Changing the node configuration assigned to a node will cause the node to change its configuration to match the node configuration 
next time it polls.
Name
Last modified
CreateTempFolder. DCAZEU003
2/13/2023, 12:47 AW
PromoteEU EkmnainCQntrQller.local host
2/20/2023, 12:23 AM
Figure 12.28: Changing the configuration on the existing 
Domain Controller
We can troubleshoot errors on the server using the 
following commands:
#Update config
-Verbose
#Just to Retry existing config:

Start-DSCConfiguration -UseExisting
Then, we can check on the output to see what exactly is 
happening and on which step it is failing. After we fix all 
the errors that could be with our configuration, such as 
missing variables and bad KeyVault secrets, we have 
configuration processing properly. We can then see the 
reports coming from the server, as illustrated in the 
following Figure 12.29 and Figure
p Search resources, services, and docs (G+Z)
AA-ConfigurationManagement X +
<- -> C ft portal.azure.eom/#@adpowersh... 0 o Ci <2. & ☆ 
* 
□ X :
Nodes Configurations
Compiled configurations Gallery
Status
Compliant
Compliant
Compliant
learn more 
About State 
Configuration 
Add non-Azure 
machine
Supported operating 
systems
Node
DCAZEU001
DCA2EU002
DCAZEU003
Node configuration
CreateTempFolder.D...
CreateTempFolder.D...
PromoteEUDomainC...
Last seen
2/20/2023,1:58 AM
2/20/2023,1:56 AM
2/20/2023, 1:57 AM
Version
2.83.5
2.83.5
2.83.5
Pending
0
In progress
0
Compltant
3
Nodes Q
Status O
Search Node names...
6 selected
Node configuration O
VM DSC extension version
2.70 Q________________
I 2 selected
Configuration 
status
I
 Not com pl..
0
Unrespons...
0
I
 Failed
0
Microsoft Azure

Figure 12.29: Verifying the Desired Configuration for the EU 
Domain Controller
A 2/20/2023,1:57 AM - Microsoft X
G ft portal.azure.eom/#@adpowersh... (3 Or Ci Q. \f$ "fr A —f El
P Search resources, services, and docs (G+/)
2/20/2023,1:57 AM
Start time
2/20/2023.1:57 AM
Total runtime 
5 seconds
Type
Initial
Resources
M WindowsFeature 
✓ Compliant
WaitForADDomain 
Compliant
$ ADDomainController 
v' Compliant
Node state at report time
Node name
IP address
m 1 n c
Figure 12.30: Verifying the Desired Configuration for the EU 
Domain Controller
Thus, we have the configuration that can promote the EU 
Domain Controller and can add it to the existing domain. 
We verified it on the existing server, and it matches the 
configuration with what it is on the server. We can now 
create a new server and make sure the DNS settings point 

to the other EU domain controllers so that the Domain 
Discovery will be successful with the WaitForADDomain 
Resource, and then we will be able to promote the server 
properly.
Of course, this is just beginning of the Domain Controller 
configuration. We need to make sure DNS forwarders are 
set properly for that server, local backup needs to be 
configured, as well as many other aspects for the standard 
Domain Controller deployment process. More examples are 
present in the module documentation in the GitHub 
repository.
If we go one step further, we can create top-level OUs and 
create delegation, enforcing security policies all within DSC 
configuration. But if we are using GPOs in our existing 
environments, we need to ensure that those two will be 
not competing with specific settings in the AD 
Environment.

Conclusion
Windows PowerShell itself provides many capabilities for 
automation of our infrastructure deployment and 
configuration. But with DevOps best practices, we can 
use PowerShell DSC to extend our automation to the 
higher level.
When we write PowerShell scripts, we do not usually 
expect them to be running more than once if we are 
planning to create new configuration when delivering 
infrastructure. If the developer wants to keep the script 
working even if it is running multiple times, it needs to 
be carefully written to make sure we do not replace the 
existing configuration when it is already in desired state.
PowerShell DSC platform always works such that we can 
constantly run the configurations without harming the 
systems, as all properly created DSC resources first 
check the configuration, then test whether it matches 
the state provided inside the parameters, and only then 
create or adjust the specific objects with the provided 
information.

Typically, Active Directory is treated as critical service, 
so every change needs to be carefully planned, 
managed, documented, and executed. It does not mean 
that the Configuration as a Code should not be used in 
that kind of environment. It is just pushing the 
configurations to be evaluated in the non-production 
environments and split between different domains to 
reduce impact.
Azure Automation DSC is one of the solutions that could 
be used when providing the configuration management 
capabilities. As mentioned in this chapter, one of the 
biggest advantages is that it can manage on-prem and 
Azure VMs out of the box, and the RBAC can be merged 
with existing access to the domain controllers; so, there 
is no additional vendor, team, or server with effective 
access to the AD environment. There are several 
solutions that are more mature at this point, but it just 
adds complexity to the solution and requires the team 
to be proficient in products outside MS Azure suite.
In the next chapter, we will focus on the soft skills that 
should be practiced when getting ready for a job 
interview. We will summarize our knowledge, learn how 
to prepare for an interview, and understand how the 
interview for an AD Sysadmin could be conducted. We 

will go through common interview questions and the 
questions that we should ask the interviewers to 
showcase our experience in both Active Directory and 
PowerShell.

C 
HAPTER 
13 
Interview Questions

Introduction
In the previous chapters, we learned a lot about Active 
Directory, PowerShell and even Azure as a good cloud 
provider for our testing environment. With this 
knowledge and the practicing AD operations and 
PowerShell scripts , we are now richer and can use it in 
our daily job. We can also prove our capabilities during 
job interviews.
The interview process is a very demanding and 
challenging experience. Depending on whether we are 
targeting senior or entry-level roles, we need to be able 
to prove that we are capable of delivering the work and 
that we know our field in terms of the technology and its 
implementation.
We need to be able to show our previous experience, 
including projects we participated in and environments 
we managed in the past. For entry-level positions, we 
could show project experience during our education or 
complete trainings and obtain entry-level certificates. 
For more senior roles, examples of the AD 
implementations or solutions developed in PowerShell

will be great assets to show during the interview 
process.
In this chapter, we will learn how to prepare for an 
interview meeting, describe the standard hiring process 
for Active Directory and PowerShell sysadmins, go 
through the questions that could be asked during the 
knowledge check, and try to show the entire process 
that could lead us to getting our new IT job.

Structure
This chapter will cover the following topics:
How to prepare for an interview
Interview scenarios for AD Sysadmin
Frequently asked questions
Your Active Directory and PowerShell projects
Motivation
Questions to interviewers

Objectives
This chapter serves as a comprehensive guide for 
aspiring Active Directory (AD) System Administrators, 
providing essential insights into interview preparation 
and success. It commences with a detailed exploration 
of effective interview readiness strategies, followed by 
targeted scenarios specific to AD Sysadmin roles. 
Frequently asked questions are addressed, arming 
readers with responses grounded in expertise. The 
chapter further emphasizes the importance of 
showcasing AD and PowerShell projects to demonstrate 
practical skills. Motivational aspects are covered to 
instill confidence, and a section on thoughtful questions 
to pose to interviewers concludes the chapter, ensuring 
a well-rounded and informed approach for AD Sysadmin 
interview success.

How to prepare for an interview
Typically, we are participating in the interview for the 
specific role, but not always. For Active Directory 
technology, these are the standard roles we could be 
interested in:
Windows System Administrator
Directory Services Engineer
IAM Engineer
IAM Specialist
Depending on the exact role we are applying for, the 
focus could be on specific skills. For a System 
Administrator position, it would be more about skills that 
are related to the system side rather than the IAM 
process or operations. When the role is more specific to 
Directory Services or IAM, which requires Active 
Directory experience, the focus could be more on Active

Directory implementation for the IAM processes and use 
cases.
So typically, we start our interview preparation by 
checking the requirements for the specific position. If we 
do this before we put in our application, we can focus on 
our specific skills, previous projects, and motivation that 
would be beneficial in that specific role. We must keep it 
realistic and never put skills or experience that we do 
not feel comfortable proving during the interview. We 
can always mention that some of the skills or 
experience is entry level, to indicate the potential to 
learn more in some areas.
Once we have our application ready and the interview 
process begins, we must learn about the company we 
would like to work for. So, it is beneficial to ask the 
recruiters about the desired client if the job is posted by 
the recruitment company.
Knowing the size of the company is even more relevant 
as it could mostly show the size of the Active Directory 
environment that we would be asked to manage. That 
said, it is not always the case, as sometimes the AD is 
built for external customers or cloud services. So the 
company size will be not applicable in this scenario.

After we clarify the information about the company, we 
could verify who will be performing the technical round 
of interview and try get a sense of whether it would be 
more soft skill-based interview or more technical, which 
will require preparing some technical aspects for the AD 
and getting confident with how to show our experience 
in those areas.
There could be interviews when the interviewer would 
go through the CV and start asking questions related to 
specific skills, education, and projects mentioned in the 
document, so it would be good to go through it before 
the meeting or even update it before putting in the 
application. The hobbies’ or interests’ sections have the 
same importance as the experience and education ones.

Interview scenarios for AD Sysadmin
The interview process could begin with 1-2 simple 
meetings and then become much more complex. 
Usually, initial meetings are with recruiters or specific 
job posters. Sometimes it is just casual conversation 
over the phone that takes no longer than 15 minutes. 
After that casual conversation, there could be a formal 
meeting that would be treated as the first round of 
interview.
The first interview is normally taken with the recruiter, 
and it is usually questions regarding our CV and 
motivation. There could be some questions regarding 
the salary range, but not always. Sometimes salary is 
discussed after the technical interviews. There could be 
potential skill checks regarding foreign languages. As 
Active Directory is typically deployed in big companies, 
the requirement for English language is mandatory. 
Other foreign languages would be required depending 
on the size and origin of the company we would like to 
work for could also be required, but English is always a 
must have as soon as we would like to work for the

company operating in multiple countries or having 
multinational customers.
Once we pass the initial interview with the recruiters, we 
could enter the stage of technical interview. This is 
when we need to highlight our experience and technical 
knowledge. Depending on whether the interviewers are 
more involved in technical work, this could involve 
specific questions regarding Active Directory, 
PowerShell, and Windows Server management type. If 
interviewers are more involved in Service Management, 
they will depend on checking the previous experience 
and confidence in explaining the education and 
professional history. That is why it is important to verify 
the audience of the technical interview to get overall 
perception on what type of questions could be asked.
If we were get through the technical interview, 
depending on the organization we would like to work for, 
we could be asked to participate in another round of 
interview, and it can be facilitated by the management 
team or head of division. This is when more soft skills 
and motivation of the candidate would be checked. It is 
more likely if we apply into more senior Active Directory- 
related roles like IT Architects, Service Owner, and so 
on. This is when we need to expand on ‘How’ we work in 

big organizations and apply our knowledge in our daily 
work.
When we pass all interviews with the respective teams, 
we could be asked to have a short interview with HR 
team. This is when we can discuss details about the 
contract preferences, availability, and salary. This is 
mostly just a formality, but it is important to stay 
focused and professional, especially because it could 
need a different approach than with earlier technical 
interviews.

Frequently asked questions
Each interview could be different, and depending on the 
position we are applying for, we could be asked several 
types of questions, starting from basic knowledge about 
Active Directory to more complex scenarios of AD 
implementation. We will go through the most asked 
questions or definitions:
What size and type of Active Directory environments do 
you have experience with?
One environment can be completely different than the 
others. Sometimes we are experts in the single domain 
single forest environment with a small user base, and it 
is completely different from managing big environments 
with multiple domains as many types of problems need 
to be resolved in those. If we do not have experience 
with those, we can still elaborate that we have 
knowledge about how cross-domain authentication is 
working and that it is just a matter of proper DNS 
implementation and using specific type of security 
groups to make sure cross domain authentication is 
functioning. This is how our interviewer will understand 

that even without the necessary experience, there is 
potential for growth.
Questions about FSMO Role Holders:
Which FSMO role is the quickest to recover in terms of 
unplanned maintenance?
Number of FSMO role holders per domain and per 
forest?
What is the difference between sizing the roles and 
moving the FSMO roles?
Do we need to back up all FSMO role holders for 
complete backup of a single AD domain?
FSMO roles are a great aspect to be asked during an 
interview. It is not only checking the knowledge about 
FSMO roles themselves but also checking diverse types 
of knowledge, like Active Directory design, replication, 
and disaster recovery. A single question that would 
include the scenario that the Sysadmin will face during 
the administration of the AD Forest can test our

understanding of the technology and how we are going 
to implement the knowledge in real-life scenarios.
What type of trust would you use to allow Forest A users 
to use Forest B resources but not the other way around?
Questions about trust are remarkably interesting 
because normally, it is not something that is 
implemented on a daily basis. So, these question not 
only check the knowledge that is required every day but 
also verify the understanding for the Active Directory 
mechanisms that are used when operating in multi 
domain, multi forest environments.
If one domain controller needs to be recovered without 
restoring any AD objects, what would be the best way to 
restore the DC server into production environment?
This is a simple question, but it assesses our knowledge 
about the Active Directory as a distributed service. Even 
if there is no clear answer here, we will show our 
thinking process by trying to understand the most 
feasible option in that situation.
Question about Active Directory groups:

What are the type of groups in Active Directory?
What type of group you would use to manage access to 
a server that could be accessed by administrators from 
different domains?
What could be equivalent to disabling the Security 
Group but not removing it from AD and clearing the 
membership?
Groups play a crucial role in interviews, assessing 
knowledge of group management and authentication, 
particularly in cross-domain scenarios with diverse 
group types. Understanding the distinction between 
distribution and security groups is important.
What is Global Catalog (GC) and what is its purpose in 
Active Directory?
Membership of which type of Active Directory groups is 
kept inside Global Catalog?
Questions about Global Catalog assess our knowledge 
about Active Directory partitions, replication and scopes. 
With this question, the interviewer can verify that we

understand the concept sharing AD object information 
between all Domain Controllers in the forest.
Which authentication protocol should be used when 
securing the file share on Windows Server?
Asking questions about Authentication Protocols test our 
understanding of the most common authentication 
protocols that are used in Active Directory environments 
and check whether we know which one can be used for 
specific solutions and choose the one that is the most 
secure.
Questions about the AD Schema:
Where are Active Directory object templates defined?
Can we change the object definition in Active Directory?
How can we roll back the Schema Update operation?
Questions about Active Directory schema could be less 
common during the interviews, but they may be asked. 
It is important for us to understand the AD Schema and 

the kind of changes we need perform to update it for 
our Forest.
What is your level of PowerShell?
This is a tricky question, as it checks the potential 
estimation of our PowerShell skills and also tests how 
confident we are in terms of scripting in that language.
What was the latest problem you solved using 
PowerShell?
This question could verify that we use PowerShell not 
just to perform stuff using GUI but can also automate, 
solve, or implement bigger solutions using that tool. We 
do not only treat it as a replacement of executing 
commands, like in CMD.
How are you using PowerShell in your daily work?
This question could show our experience and how 
advanced we are in using PowerShell: whether we use it 
on a daily basis when performing our tasks or it is 
something we do only when we need to automate 
processes and then forget about them. It is less 

important when applying to IAM roles as they can be 
less technology-specific, but it could be much more 
likely when we apply to roles that requires PowerShell as 
one of the primary skills, like Active Directory DevOps or 
Windows System Administrator roles.

Your Active Directory and PowerShell projects
Working with Active Directory could mean working in 
diverse types of projects. There are many categories of 
AD-related projects that experience with working on is 
beneficial to elaborate during the interviews:
Business as usual Involvement in daily operations is 
important, especially when we are starting our career 
with Active Directory. Being able to manage operational 
workload is important for any role we would like to start.
Major incident With any disruption of the service, there 
could be high-priority incidents. Showing experience in 
handling high-severity issues is beneficial when we 
apply for AD roles. AD can be running in DNS integrated 
mode, therefore much more network dependencies are 
related to the Active Directory service.
Deployment of new Active Directory Domain Not every 
team that is utilizing Active Directory participates in 
infrastructure provisioning. Even if we are not directly 
involved in building AD environments, it is important to 
work in the dev or lab environment and learn how to

deliver the server infrastructure for Active Directory 
solution.
Deployment of new Active Directory Forests: Deploying 
AD Domain Controllers is different in complexity than 
deploying new Active Directory environments from 
scratch. Deploying new forests requires more 
understanding of what the prerequisites are when 
building new infrastructure, especially from the Network 
perspective, setting up proper DNS configuration and 
forwarding.
Windows Server and AD Life cycle Active Directory is 
implemented on Windows Servers, so standard OS life 
cycle is taken under consideration. After AD is on 2016 
Domains and Forest functional level, there is no major 
AD updates except OS and Schema updates required for 
specific applications.
Application At this very moment, Active Directory itself 
is not the best environment to integrate modern 
applications with. New type of authentication workloads 
move more into the federated setup and using ADFS 
and Azure AD. In hybrid deployment, Active Directory 
provides the source of users and especially password 
verifications, but still, there are many applications that 

need to be integrated with AD only. Knowing LDAP 
configurations, Kerberos, and the way how it is used 
with applications is important when applying for Active 
Directory-related positions.
Hybrid Identity design Azure AD is the future of 
Directory Services in the Microsoft ecosystem. 
Experience in projects that related to Azure AD and 
Azure AD Connect is beneficial for every Active Directory 
engineer. And getting experience with Hybrid AD 
deployments is extremely valuable.
Configuration Infrastructure as a Code, especially in the 
Cloud environments, is a desirable skill. Even when 
performing basic operations, we should try to automate 
them and script as much as possible, and then make our 
deployments and configuration using Infrastructure as a 
Code. If an organization is not willing to pursue the new 
way of preforming configuration management, we need 
to try to slowly push it into areas we can and eventually 
get experience in this methodology.
Moving the Active Directory Domain Controllers to 
Active Directory was a major Directory Services product 
earlier, and the Cloud became the main platform when 
creating and moving the IT infrastructure. This means

most of the existing AD infrastructure was deployed on- 
prem. Organizations that already moved fully to IaaS in 
the cloud, would require AD engineers with Cloud 
experience to maintain the current design.
Security Improvement Active Directory Security is 
hugely impacting the security posture for organizations. 
Getting experience of securing Active Directory is one of 
the first steps to even getting promoted from an AD 
Engineer to an IAM or a Security Engineer. If the AD is 
still the main SSO and Directory Services platform for 
the company, it needs to be secure, and make sure the 
proper configuration is in place to stay as secure as 
possible in terms of the Directory Services scope.
Patch and vulnerability Updating management is 
something that needs to be properly implemented for 
every IT service, and Active Directory is even more 
sensitive in that manner. When implementing patches to 
standalone or member servers, we can typically impact 
only one server, but when it is applied on the domain 
controller, we can impact all services that rely on DNS 
and AD Services. Getting a basic understanding of how 
it should be covered for the AD infrastructure is 
important for every AD System Administrator.

Migration Migration projects are important for 
companies that perform several mergers and 
acquisitions. Knowing the ADMT processes and the 
migration product delivered by Quest is a plus in the 
skills portfolio, and it is often asked during interviews. 
Hands-on experience in ADMT in our lab environments is 
also beneficial because it will provide an overview of 
how those processes look.

Motivation
Motivation is one of the most important parts of the 
process. It directs us to specific job openings and keeps 
us engaged with the interviewers on certain aspects and 
during various parts of interviews. We will not discuss 
the financial aspect here as it is subjective. If we would 
like to progress as the Active Directory Engineer, we 
should look for specific types of projects, which would 
include the following:
International company: An international company will 
provide services in multiple countries and languages. 
That means we will have complex network topology, 
multiple sites, and potentially, multiple domains and 
forests. If the AD team would need to engage with 
customers in different countries or if the team itself is 
placed in different countries, we will learn Business 
English more quickly in our daily work.
Considerable number of employees or high number of 
customers: Maintaining small AD environments, we will 
be able to learn several basic configuration aspects, but 
we will encounter different types of problems in bigger 

environments that cannot be simulated in test 
environments.
An experienced team or a manager we can learn from: 
This is the ideal situation: we gradually getting more 
experienced, but we keep having a team and manager 
we can get experience from. We would like to get as 
much technical knowledge as possible, and we would 
also like to gain the soft and management skills as those 
are also important when managing the Active Directory 
infrastructure. Landing in a position that we always have 
someone to learn from is ideal, as it aids self­
development and growth into senior positions.
Perfecting our AD skills but also being able to learn 
different technologies: So, if we keep choosing positions 
where we will only learn about one specific technology, 
it will keep us hooked on a single career path and 
without any scope of changing our experience or focus. 
If we can combine both AD skill development with 
others, like Security, DevOps, Cloud, and so on., it would 
be a huge benefit in the job market. Additionally, it 
would help us ensure that we are still working in our 
area of expertise so that we can apply for senior AD or 
IAM positions.

A chance to learn and implement Cloud Solutions: Cloud 
is what most companies are aiming for. If along with 
Active Directory, we can learn how to implement Hybrid 
AD and Azure AD solutions or implement IaaS for 
underlying AD Infrastructure, it would be beneficial for 
every System Administrator.
Security as one of the key aspects of daily work: 
Depending on the requirements, there could be 
situations where security will not be a key aspect for the 
Active Directory environment that needs to be managed 
in the desired position. We will gain knowledge about 
the ‘enablement’ aspect of the directory service, but it 
will be hard to implement and learn how to enable 
internal and external customers with the right security 
approach. Ideally, we would like to learn how to manage 
Active Directory but in the proper fashion, paying 
attention to the details and always pushing for the most 
secure configuration when possible.

Questions to interviewers
If we really liked the company overview and the hiring 
team, which could potentially include our future 
manager, then it is good to show as much interest as 
possible to give them a positive impression and feeling. 
We should be able to convey that we are not looking for 
just any position in the marked but are looking for 
something specific; and we are willing to learn more 
about it during the interview process.
Getting information on who will be future manager: 
There is a famous quote, “We should choose the boss 
not the company.” It is true because getting someone 
we can easily work with and learn from should be our 
biggest motivation. Confirming if the hiring manager will 
be our manager if all goes well is important as we will 
know for sure and we can start building the professional 
relationship right from the first interview.
Understanding the project scope and initial goals: 
Sometimes the job description is extremely broad, and 
we may end up in a role that may not really match what 
was stated in the description. Getting information about 

what would be the initial assignment and the goals for 
the first few months is especially important and will 
prevent eventual misjudgement about actual 
responsibilities from our perspective.
Understanding a typical day at work: Even similar 
positions could be different in terms of day-to-day tasks 
and responsibilities. If we already know someone from 
the team who is at a similar position, we can ask how a 
typical workday looks like and get an overview of the 
daily routine; this will help us understand whether it is 
what we are looking for in our future assignment.
Exploring the training and development opportunities: 
Depending on the organization, we could be encouraged 
to participate oi external training courses and pass the 
related exams, or we could be focusing on getting 
practical knowledge and in-house expertise.

Conclusion
The interview process can be incredibly stressful, but in 
general, it should help us understand how we can fit 
into the role we are applying for and the organization 
the role needs to be filled in. Active Directory it is quite 
old technology, but it is still important in many 
organizations, so we need to show our previous 
professional experience or prove that we can self-learn 
the technology and meet the requirements of the role.
There are no perfect candidates, and skilled engineers 
with great management and soft skills are hard to come 
across and if they are changing jobs they may be taking 
up senior positions. So, we should not be discouraged if 
we are not 100% confident about our AD skill level. At 
the end, the attitude is important, and if we can learn 
quickly, we can prove that we can be reliable 
independent contributors and meet the requirements in 
different organizations.
Active Directory is slowly being replaced by different 
cloud technologies, but it is still interesting to join the 
Directory Services teams, get proper AD experience and 

then grow into the Hybrid and pure Cloud Azure AD 
implementations. Practicing the Cloud IaaS for AD will 
give us an opportunity to switch our focus from on-prem 
only solutions into the Cloud world.
This book gave us a practical introduction to the most 
common aspects of Active Directory, an introduction to 
the Cloud deployment of the environment and even 
specifics about the Active Directory Security and 
Configuration Management. Hopefully, you will be 
interested to know more about Directory Services.
Despite the technology being around for more than 20 
years, the basic principles of Directory Services IAM and 
Service Management can be used in different modern 
products in the market, as most of those tools have 
built-in or custom integration interfaces with AD, 
proving that it is still one of the most commonly use 
Directory Service in the corporate world.
We could recommend starting your career with Active 
Directory as it enables you to work with network-, 
security-, application- and customer-specific teams and 
puts an IT Engineer in a good starting position to 
develop interests in specific areas and became a 
valuable member of any IT organization.

Join our book’s Discord space
Join the book’s Discord Workspace for Latest updates, 
Offers, Tech happenings around the world, New Release 
and Sessions with the Authors: 
https://discord.bpbonline.com

Index
A
AA-ActiveDirectory 368
Active Directory (AD) 2
capacity planning
overview 3
Active Directory Administrative Center 124
Active Directory Certificate Services (ADCS) 3
Active Directory Domain Controller (ADDC) 37
Active Directory Domain Services (ADDS) 3
Active Directory environment creation 
additional domain controller, adding to existing domain 

child domain promotion 
design overview 63
first domain controller promotion
IP configuration, for domain controllers
next child domain, creating
Active Directory Federation Services (ADFS) 3
Active Directory FSMO roles 7
Active Directory group types 173
Active Directory Lightweight Directory Services (ADLDS) 
4
Active Directory Management
RSAT tools and PowerShell, using 124

Active Directory Migration Tool (ADMT) 63
ActiveDirectory module 144
Active Directory PowerShell module 16
Active Directory Rights Management Services (ADRMS) 
4
Active Directory Security Management 203
Active Directory Sites and Services (dssite.msc) 123
Active Directory Users and Computers (ADUC) 138
Active Directory Users and Computers (dsa.msc) 123
Active Directory Web Services (ADWS) 15
AD domain and forest implementations 4 
functional levels 7

multiple forest AD 6 
single forest, multiple domains 5
single forest, single domain 4
AD domain controllers
virtual machines, deploying
AD group membership modifications
AD groups creation and deletion
AD infrastructure
DSC configuration
AD management options, with PowerShell 13
Active Directory PowerShell module 
built-in PowerShell commands 15

Administrative Templates (.admx) 111
Administrators group membership 129
AdminSDHolder
AD services
monitoring
AD sites
creation
AD user management 135
schema and user object class
Ansible 407
authentication 
basic authentication 390 

certificate authentication 390 
digest authentication 390
Kerberos authentication 390
negotiate authentication 390
authoritative domain controller restore
performing
availability zones 33
Azure 25
Azure Automation DSC
solution architecture
solution implementation
Azure Bastion

AzureBastionSubnet range 53
Azure Cloud Shell
configuration
Azure Portal
overview
Azure subscription
creation
B
Bare Metal Recovery (BMR) 312
basic authentication 390
Bastion 51
Bcdedit tool 312

Boot diagnostics 54
Built-In Container 129
bulk operations
executing, on multiple DCs
bulk operations, on AD groups 190
membership, clearing 193
membership, copying between user accounts 193
multiple users, adding/removing to AD group 191
users, adding to multiple AD groups 192
users, removing from multiple AD groups 192 
bulk user creation 162 

modification
bulk user exports
C
capacity planning, for AD
certificate authentication 390
Change Tracking 285
Chef 407
cloud computing 24
IaaS 23
overview 22
PaaS 23
SaaS 23

cloud environment 18
Common Name (CN) attribute 138
Computer Management snap-in 348
D
data processing
with hybrid worker
DC Promotion 7
Default Domain Controller Policy 111
Default Domain Policy
Default Domain Policy GPO 168
default user permissions 
cleanup

Deleted Objects container 303 
development environment domain architecture 6
development environment overview
Azure Cloud, as development environment 18
cloud environment 18
Hyper-V environment 18
physical environment 17
digest authentication 390
Directory Services Restore Mode (DSRM) 312
Disaster Recovery (DR) 36
Distinguished Name attribute 138
DNS forwarders and zones configuration

Domain Admins (DA) 188 
administrators 188
protected groups 190
schema admins 189
Domain Controller Diagnostic (DCDIAG)
automatizing, with PowerShell 263
Domain Name System 61
Domain Naming Services (DNS) 93
DSACLs and AD provider
DSC configuration, AD infrastructure
Dynamic Host Configuration Protocol (DHCP) 80
E

Enterprise Admins (EA) 188
Entire Directory tree 152
event monitoring
F
Fine-Grained Password Policy (FGPP)
Flexible Single Master Operations (FSMO) roles 106
FSMO role holders’ migration
G
Get-ADDomain 110
Get-ADForest 110
Get-Command 362

Global Catalog 191
Global Catalog (GC) 173
Global DR solution
implementing
Globally Unique Identifier (GUID) 139
GlobalResouces OU 118
global solution
implementing, for AD monitoring
group managed service accounts
group membership reporting 194
members, extracting for static list or groups 
protected group members, extracting in domain 

protected group members, extracting in forest 201
Group Policy Link Order 220
Group Policy Management Console (GPMC) 239
Group Policy Object (GPO) 214
security hardening
H
hybrid worker
for data processing
Hyper-V environment 17
I
infrastructure deployment verification 
interview process

Active Directory and PowerShell projects 444 
frequently asked questions
motivation 445
preparation 439
questions to interviewers 446
scenarios for AD Sysadmin 440
Invoke-Command 362
J
Just In Time (JIT) 49
K
Kerberos 
delegation setup

Kerberos authentication 390
Kerberos Key Distribution Center (KDC) 255
Key Distribution Center 243
Knowledge Base (KB) 236
Knowledge Consistency Checker (KCC) 260
L
lastLogonDate 149
M
ManagedBy parameter 178
managed service accounts 226
Managed Service Accounts container 226

Microsoft Azure Backup Server (MABS) 311
Microsoft Azure Recovery Services Agent (MARS) 311
Microsoft Management Console (MMC) 347
Multi Factor Authentication 127
multiple DCs
bulk operations, executing
multiple domain Active Directory Forest 5
multiple forest Active Directory 6
N
negotiate authentication 390
nesting 187
Domain Admins (DA) 188

Enterprise Admins (EA) 188 
sensitive groups 188
Netlogon 255
Network Security Group (NSG) 48
non-authoritative DC restore operation
performing
Notepad 12
Notepad + + 12
notifications
scheduling
O 
object restores

performing 321
Organizational Unit creation
control, delegating to
Organizational Units (OU) 94
restores, performing
P
Packet Monitoring 358
password management 169
Password Settings Container 127
patch management 237
scenarios 
peering menu 76

performance monitoring
Performance Monitor (Perfmon) 275
physical environment 17
PowerShell Desired State Configuration (DSC)
configuration management products 407
configurations 401
Local Configuration Manager (LCM) 402
resources 401
PowerShell DSC Pull server 407
PowerShell Integrated Scripting Environment (ISE) 10
PowerShell (PS) 
built-in PowerShell commands 15 

command-line interface 9 
overview 8
starting 13
version history 9
PowerShell security, for AD management
Kerberos and Certificate authentication, using
privileged account usage, avoiding for bulk operations 
381
scheduled tasks, running with gMSA and system 
account 382
Windows server advanced firewall and IP filters
WinRM configuration and security

Primary Domain Controller (PDC) roles 107
Privileged Access Management (PAM) 379
PSSessions 359
Puppet 407
R
Recycle Bin management
Recycle Bin recovery scenarios
regions 33
Remote Desktop Protocol (RDP) 48
Remote Procedure Calls (RPC)
Remote Server Administration Tools (RSAT) 347 
replication status

reporting 
scheduling
Resource group 33
creation 34
creation, using PowerShell 36
list 35
S
SamAccountName attribute 138
SConfig tool 342
SDPROP 225
secure access, to development environment
Azure Bastion

hybrid solution 53 
just-in-time access
private access 48
public internet access 48
securing 48
security audits
performing, using PowerShell
Security Center 49
Security Compliance Toolkit (SCT) 215
Security Descriptor (SD) 222
Security Event Management (SIEM) tool 303
Security Identifier (SID) 172

Service Principal Names (SPNs) 246
Set-ADUser 178
sign-in options 167
single domain Active Directory Forest 4
System Center Configuration Manager (SCCM) 237
System Centre Operations Manager (SCOM) 253
SYSVOL recovery 322
authoritative SYSVOL synchronization
non-authoritative SYSVOL synchronization
T
task scheduling 
for monitoring

Ticket Granting Service (TGS) 243
Ticket Granting Ticket (TGT) 243
tiering model
implementing
tombstone objects
reanimation
U
user attribute modification 152
attribute-specific information, modifying
expiration dates, implementing on user accounts 
user account, renaming

user creation
name attributes 141
password options 143
PowerShell, using 146
user modification, validating 147
user, verifying 144
user deletion 147
user evaluation
User Principal Name (UPN) 138
V
virtual machines 
deploying, for AD controllers

virtual network 76
Visual Studio Code 11
W
WaitForADDomain Resource 435
Windows Admin Center implementation
Windows Admin Center remote management
Windows Management Instrumentation (WMI) 351
Windows Remote Management (WinRM) 337
Windows server advanced firewall and IP filters
Windows server backup
configuring, for domain controllers
Windows Server Backup (WSB) 294

Windows Server Core implementation
Windows Server Update Services (WSUS) 237
Windows Terminal 11
WinRM configuration and security

