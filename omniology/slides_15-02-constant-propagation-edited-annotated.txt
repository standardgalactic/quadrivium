Alex Aiken 
Compilers 
Constant Propagation 

Alex Aiken 
Constant Propagation 
To replace a use of x by a constant k we must know: 
 
 
On every path to the use of x, the last assignment to x is 
x := k    ** 

Alex Aiken 
Constant Propagation 
• Global constant propagation can be performed at 
any point where ** holds 
 
• Consider the case of computing ** for a single 
variable X at all program points 

Alex Aiken 
Constant Propagation 
• To make the problem precise, we associate one of the 
following values with X at every program point 
 
 
value 
interpretation 
z 
This statement never executes 
c 
X = constant c 
S 
X is not a constant 

Alex Aiken 
Constant Propagation 
X := 3 
B > 0 
Y := Z + W 
X := 4 
Y := 0 
A := 2 * X 

Alex Aiken 
Constant Propagation 
• Given global constant information, it is easy to 
perform the optimization 
– Simply inspect the x = ? associated with a 
statement using x 
– If x is constant at that point replace that use of x 
by the constant 
 
• But how do we compute the properties x = ? 

Alex Aiken 
Costant Propagation 
 
 
The analysis of a complicated program can be 
expressed as a combination of simple rules relating 
the change in information between adjacent 
statements 


Alex Aiken 
Constant Propagation 
• Define a transfer function that transfers information 
one statement to another 
 
• In the following rules, let statement s have 
immediate predecessor statements p1,…,pn 

Alex Aiken 
Constant Propagation 
 
if C(pi, x, out) = S 
 for any i, then C(s, x, in) = S 
 
        s 
Rule 1 

Alex Aiken 
Constant Propagation 
 
if C(pi, x, out) = c  & C(pj, x, out) = d  &  d <> c   
then C(s, x, in) = S 
 
        s 
Rule 2 

Alex Aiken 
Constant Propagation 
 
if C(pi, x, out) = c  or z for all i, 
then C(s, x, in) = c 
        s 
Rule 3 

Alex Aiken 
Constant Propagation 
 
if C(pi, x, out) = z  for all i, 
then C(s, x, in) = z 
        s 
Rule 4 

Alex Aiken 
Constant Propagation 
• Rules 1-4 relate the out  of one statement to the in of 
the next statement 
 
• Now we need rules relating the in of a statement to 
the out of the same statement 

Alex Aiken 
Constant Propagation 
 
 C(s, x, out) = z  if C(s, x, in) = z 
s 
Rule 5 

Alex Aiken 
Constant Propagation 
 
 C(x := c, x, out) = c  if c is a constant 
x := c 
Rule 6 

Alex Aiken 
Constant Propagation 
 
 C(x := f(…), x, out) = S 
 
x := f(…) 
Rule 7 

Alex Aiken 
Constant Propagation 
 
 C(y := …, x, out) = C(y := …, x, in)  if x <> y 
y := . . . 
Rule 8 

Alex Aiken 
Constant Propagation 
1. For every entry s to the program,  set C(s, x, in) = S 
 
2. Set C(s, x, in) = C(s, x, out) = z everywhere else 
 
3. Repeat until all points satisfy 1-8: 
Pick s not satisfying 1-8 and update using the 
appropriate rule 

Alex Aiken 
Constant Propagation 
X := 3 
B > 0 
Y := Z + W 
X := 4 
Y := 0 
A := 2 * X 

Constant Propagation 
After running the constant propagation algorithm to 
completion, choose the correct dataflow information 
for X, Y, and Z at the program point labeled at right. 
 
4 
T 
T 
  
Z := 5 
C > 0 
Y := 1 
X := 4 
Z := X + Y 
X := 4 
A := X * Y 
B := A * Z 
 
 
X  
Y 
Z       
 
 
4 
T 
5 
  
 
4 
1 
5 
  
 
T 
T 
T 
  
? 

