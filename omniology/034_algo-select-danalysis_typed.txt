Linear-­‐Time	  
Selec.on	  
Determinis.c	  
Selec.on	  (Analysis)	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
The	  DSelect	  Algorithm	  
DSelect(array	  A,	  length	  n,	  order	  sta.s.c	  i)	  
1.  Break	  A	  into	  groups	  of	  5,	  sort	  each	  group	  
2.  C	  =	  the	  n/5	  “middle	  elements”	  
3.  p	  =	  DSelect(C,n/5,n/10)	  	  	  [recursively	  computes	  median	  of	  C]	  
4.  Par..on	  A	  around	  p	  
5.  If	  j	  =	  i	  return	  p	  
6.  If	  j	  <	  i	  return	  DSelect(1st	  part	  of	  A,	  j-­‐1,	  i)	  
7.  [else	  if	  j	  >	  i]	  return	  DSelect(2nd	  part	  of	  A,	  n-­‐j,	  i-­‐j)	  
Choose	  
Pivot	  
Same	  as	  
before	  
	  

Tem
ver
What	  is	  the	  asympto.c	  running	  .me	  of	  step	  1	  of	  the	  DSelect	  
algorithm?	  
Note	  :	  sor.ng	  an	  array	  with	  5	  elements	  takes	  
<=	  120	  opera.ons	  
[	  why	  120	  ?	  Take	  m	  =	  5	  in	  our	  6m(log2m+1)	  
bound	  for	  Merge	  Sort	  ]	  
So	  :	  <=	  (n/5)*120	  =	  24n	  =	  O(n)	  for	  all	  groups	  
6*5*(log25+1)	  <=	  120	  
<=3	  
#	  of	  gaps	  
ops	  per	  group	  

Tim	  Roughgarden	  
The	  DSelect	  Algorithm	  
DSelect(array	  A,	  length	  n,	  order	  sta.s.c	  i)	  
1.  Break	  A	  into	  groups	  of	  5,	  sort	  each	  group	  
2.  C	  =	  the	  n/5	  “middle	  elements”	  
3.  p	  =	  DSelect(C,n/5,n/10)	  	  	  [recursively	  computes	  median	  of	  C]	  
4.  Par..on	  A	  around	  p	  
5.  If	  j	  =	  i	  return	  p	  
6.  If	  j	  <	  i	  return	  DSelect(1st	  part	  of	  A,	  j-­‐1,	  i)	  
7.  [else	  if	  j	  >	  i]	  return	  DSelect(2nd	  part	  of	  A,	  n-­‐j,	  i-­‐j)	  

Tim	  Roughgarden	  
Rough	  Recurrence	  
Let	  T(n)	  =	  maximum	  running	  .me	  of	  Dselect	  on	  an	  input	  array	  of	  
length	  n.	  
There	  is	  a	  constant	  c	  >=	  	  1	  such	  that	  :	  
1.  	  T(1)	  =	  1	  
2.  T(n)	  <=	  c*n	  	  +	  T(n/5)	  	  +	  	  T(?)	  
	  sor.ng	  the	  groups
	  recursive
	  recursive	  call	  in	  
	  par..on
	  
	  call	  in	  line	  3
	  line	  6	  or	  7	  

Tim	  Roughgarden	  
Key	  Lemma	  :	  2nd	  recursive	  call	  (in	  line	  6	  or	  7)	  guaranteed	  to	  be	  on	  
an	  array	  of	  size	  <=	  7n/10	  	  	  	  (roughly)	  
Upshot	  :	  can	  replace	  “?”	  by	  “7n/10”	  
Rough	  Proof	  :	  	  	  Let	  k	  =	  n/5	  =	  #	  of	  groups	  
	  
	  	  Let	  xi	  =	  ith	  smallest	  of	  the	  k	  “middle	  elements”	  
	  
	  	  [So	  pivot	  =	  xk/2]	  
Goal	  :	  >=	  30%	  of	  input	  array	  smaller	  than	  xk/2,	  
	  
	  
	  >=	  30%	  is	  bigger	  
The	  Key	  Lemma	  

Tim	  Roughgarden	  
Rough	  Proof	  of	  Key	  Lemma	  
Thought	  Experiment	  :	  
Imagine	  we	  lay	  out	  elements	  of	  A	  in	  a	  2-­‐D	  grid:	  
Key	  point	  :	  xk/2	  bigger	  than	  3	  out	  of	  5	  (60%)	  of	  the	  elements	  in	  
~	  50%	  of	  the	  groups	  
	  	  	  	  	  =>	  bigger	  than	  30%	  of	  A	  (similarly,	  smaller	  than	  30%	  of	  A)	  
Our	  pivot	  !	  
	  Columns	  =	  the	  groups	  of	  5	  

Tim	  Roughgarden	  
Example	  
Our	  pivot	  !	  
The	  
grid	  :	  
AXer	  
sor.ng	  
groups	  
of	  5	  

