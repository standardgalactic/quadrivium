© 2019 MathByte Academy

A long long time ago…
how would we iterate over all the keys, values or items of a dictionary?
d.keys()
d.values()
d.items()
à created and returned a list of these things
à list is static
d = {'a': 1, 'b': 2}
keys = d.keys()
à keys = ['a', 'b']
d['c'] = 3
à keys = ['a', 'b']
à list duplicates data – not good for large dictionaries – can be slow
à inefficient for membership testing
d = {'a': 1, 'b': 2}
values = d.values()
2 in values
à linear search
© 2019 MathByte Academy

A long long time ago…
To help with iteration:
d.iterkeys()
d.itervalues()
d.iteritems()
à iterators
better than a new list… did not duplicate data à more lightweight
still does not help with membership testing
also not easy to answer questions such as, given d1 and d2
what keys are common to both?
what keys are in one but not the other?
set questions
after all, keys have to be unique
à keys form a mathematical set
were introduced
© 2019 MathByte Academy

Key View
instead of keys() returning a list, and iterkeys() just being an iterator…
what if keys() was a lightweight object that
maintained a reference to the dictionary
and implemented methods such as:
__iter__
__contains__ 
__and__
__or__
__eq__
__lt__
etc
à iterable protocol
à membership testing
à union of two views
à intersection of two views
à same keys in both views
à is one set of keys a subset of the other
behaves like an iteratable
behaves like a set
does not "own" any data
© 2019 MathByte Academy

Dictionary Views
Three ways we may want to view the data in a dictionary
à keys only
à values only
à key/value pairs
à (key, value)
d.keys()
d.values()
d.items()
all are iterables
d = {'a': 1, 'b': 2, 'c': 3}
list(d.keys())
à ['a', 'b', 'c']
list(d.values())
à [1, 2, 3]
list(d.items())
à [('a', 1), ('b', 2), ('c', 3)]
Important: order of keys and values (and items) are the same
à the position of an item in one view corresponds to the same position in other views
à Python 3.6+: in addition, this order is same as dictionary (insertion) order
PEP 3106
some may have set properties
(as long as the dictionary keys were not modified in between)
© 2019 MathByte Academy

Set Behavior
The keys() view always behaves like a (frozen) set
à since elements are unique (==) and hashable
The items() view may behave like a (frozen) set
à if the values are hashable
à uniqueness of tuples are guaranteed since keys are unique
The values() view never behaves like a set
à values not guaranteed unique
à values not guaranteed hashable
© 2019 MathByte Academy

And also…
dynamic
à views reflect any changes in the dictionary
à but views are not updatable
d = {'a': 1, 'b': 2}
keys à 'a', 'b'
values à 1, 2
items à ('a', 1), ('b', 2)
d['a'] = 10
keys à 'a', 'b'
values à 10, 2
items à ('a', 10), ('b', 2)
del d['b']
d['c'] = 3
keys à 'a', 'c'
values à 10, 3
items à ('a', 10), ('c', 3)
keys = d.keys()
values = d.values()
items = d.items()
immutable
lightweight
à views do not maintain their own copy of the underlying data
à simply implement methods that use the underlying dictionary
à proxy
© 2019 MathByte Academy

Modifying the dictionary while iterating over a view
This is SAFE:
for key in d.keys():
d[key] += 1
This leads to an EXCEPTION:
for v in d.values():
del d['a']
be careful doing this
à modifying values usually not a problem
à modifying keys can lead to exceptions or worse disasters!
à Python does not allow modifying the 
size of the underlying dictionary while 
iterating over a view
You technically can modify the keys as long as you do not change the size of the dictionary
à don't do it!
Python docs:
Iterating views while adding or deleting entries in the 
dictionary may raise a RuntimeError or fail to iterate 
over all entries.
à no guarantee it will work the way you think it should© 2019 MathByte Academy

Code
© 2019 MathByte Academy

