Теория типов 
и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
В данной лекции будут рассмотрены вопросы, относящиеся к истории развития, 
идеологии, математическому основанию и обзору возможностей типизированной 
комбинаторной логики и теории типов – математической формализации, моделирующей 
типы выражений в языках программирования.  
 
 

 
 
Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Содержание лекции
1.
Понятие типа в математике и программировании
2.
Комбинатор как функциональный объект программы
3.
Приписывание типа комбинатору и функции
4.
Базисные и производные типы в SML
5.
Виды типизации. Контроль соответствия типов
6.
Преимущества теорий с типами
7.
Преимущества платформы .NET для контроля типов
8.
Библиография
 
Комментарий к слайду  
 
В ходе лекции будут рассмотрены важнейшие научные исследования, относящиеся к 
эволюции подходов к математическому моделированию существенного для любого 
подхода к программированию аспекта, а именно, типа. При этом будет особо отмечено то 
обстоятельство, что типизированные функции языков программирования естественным и 
интуитивно понятным образом моделируются посредством комбинаторов – ламбда-
выражений специального вида с приписанными им типами.   
 
Далее 
будет 
представлено 
формальное 
введение 
в 
типизированный 
вариант 
комбинаторной логики, первоначально предложенный Х. Карри. Параллельно будут 
излагаться абстрактная математическая чистая система типов и ее конкретное 
представление в форме типизированной комбинаторной логики. 
 
По результатам представленной теории будут сделаны выводы о преимуществах и 
недостатках 
комбинаторной 
логики 
для 
моделирования 
конструкций 
языков 
функционального программирования со строгой типизацией. При этом существенное 
внимание будет уделено вопросам формализации выводимости типов и контроля 
типизации в языке функционального программирования SML, который изучается на 
протяжении всего курса. 
 
Лекция завершится обзором литературы для более глубокого исследования материала. 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Важнейшие работы в области типизации
1960-е – Р. Хиндли (Roger Hindley) исследовал типизацию в 
комбинаторной логике для моделирования языков 
функционального программирования со строгой 
типизацией
1969 – Р. Хиндли исследовал полиморфные системы типов
1978 – Р. Милнер (Robin Milner) предложил расширенную 
систему полиморфной типизации для ML
 
 
 
Комментарий к слайду  
 
Напомним ход эволюции теорий, лежащих в основе современного подхода к типизации и 
теории типов. 
 
В 60-х г.г. Р. Хиндли (Roger Hindley) исследовал типизацию в комбинаторной логике. При 
этом основной проблемой, стоящей перед исследователем, было моделирование языков 
функционального программирования со строгой типизацией, к каковым, в частности, 
относится изучаемый нами язык SML. 
 
Позднее, в конце 60-х г.г., тот же ученый исследовал полиморфные системы типов, т.е. 
такие системы типов, в которых возможны параметризованные функции или функции, 
имеющие переменный тип. 
 
Наконец, в 70-х г.г. Р. Милнер (Robin Milner) предложил практическую реализацию 
расширенной 
системы 
полиморфной 
типизации 
для 
языка 
функционального 
программирования ML, давшего начало языку программирования SML. 
 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Общие сведения о типизации
Тип (сорт) – относительно устойчивая и независимая
совокупность элементов, которую можно выделить во 
всем рассматриваемом множестве (предметной области). 
Задать тип T (как и любое множество) возможно:
1)
явным перечислением элементов;
2)
формализацией общих свойств элементов предметной 
области d∈D посредством индивидуализирующей 
предикатной функции Ψ, значение которой истинно, 
если элемент принадлежит данному типу и ложно в 
противном случае: T = {d: D|Ψ}
 
 
 
Комментарий к слайду  
 
Перейдем к изложению начальных сведений из теории типов и типизации языков 
программирования. 
 
В математике принято называть типами  (или, иначе, сортами) относительно устойчивые и 
независимые совокупности элементов, которые можно выделить во всем рассматриваемом 
множестве (предметной области). Заметим, что разделение элементов предметной области 
на типы или сорта во многом является условным и носит субъективный характер, т.к. 
зависит от эксперта в этой области. 
 
 
Тип, подобно множеству, может определяться двояко. 
 
Во-первых, возможно определение типа посредством явного перечисления всех 
элементов, принадлежащих типу (заметим, что такой подход применяется и в математике, 
и в программировании, где существуют так называемые перечислимые типы). 
 
Другим способом определения типа T является формализация общих свойств тех 
элементов d из предметной области D, которые объединяются в этот тип, посредством 
задания индивидуализирующей предикатной функции Ψ, значение которой истинно, если 
элемент принадлежит данному типу и ложно в противном случае: 
 
T = {d: D|Ψ}. 
 
 
 
 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Типы в математике (1)
Чистой системой типов называется семейство ламбда-
исчислений, в которых каждый элемент характеризуется 
тройкой <S, A, R>, где:
S – подмножество констант, называемых сортами;
A – множество аксиом вида c:s, где с-константа, s-сорт;
R – множество троек сортов, определяющих возможные 
функциональные пространства и их сорта для системы 
Приписывание ламбда-терму M типа T обозначим как 
#M |— T (читается: «ламбда-терм M имеет тип T»)
 
 
 
Комментарий к слайду  
 
При более формальном подходе к теории типов и типизации в связи с исчислением 
ламбда-конверсий следует определить чистую систему типов.  
 
Чистой системой типов называется семейство ламбда-исчислений, в которых каждый 
элемент характеризуется тройкой <S, A, R>, где: 
 
 
S – подмножество констант, называемых сортами; 
 
 
A – множество аксиом вида c : s, где с является константой, а s является сортом; 
 
 
R – множество троек сортов, определяющих возможные функциональные 
пространства и их сорта для системы. 
  
Далее введем обозначение, характеризующее то обстоятельство, что тот или иной объект 
является типизированным, или, иначе говоря, что тому или иному объекту приписан тип.  
 
В частности, для ламбда-терма M приписывание ему типа T обозначим как  
 
#M |— T 
 
и будем в таком случае говорить, что ламбда-терм M имеет тип T. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Типы в математике (2)
Система типов формируется следующим образом:
1)
задается множество базисных типов δ1, δ2, …;
2)
всякий базисный тип считается типом;
3)
если a и b считаются типами, то функция из a в b 
считается типом и имеет тип a→b.
В основе теории типов лежит принцип иерархичности:
производные типы содержат базисные как подмножества. 
Это справедливо и для языков программирования
(аналогично строятся иерархии классов в ООП).
 
 
 
Комментарий к слайду  
 
При более общем подходе (который верен и для математики, и для программирования), 
система типов формируется следующим образом. 
 
Во-первых, задается множество базисных типов (обозначим их символами d1, d2, и так 
далее). 
 
Во-вторых, примем соглашение, что всякий базисный тип считается типом. 
 
Наконец, условимся, что если a и b считаются типами, то функция из a в b также считается 
типом и при этом имеет тип a→b. 
 
Заметим, что в основе теории типов лежит принцип иерархичности, который заключается 
в том, что производные типы содержат базисные как подмножества.  
 
Этот принцип построения остается справедливым и для языков программирования. В 
частности, иерархии классов в объектно-ориентированных языках программирования 
формируются аналогично вышеприведенному построению математической системы 
типов. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Свободные и связанные переменные
Переменная x называется свободной в терме λx.A, если 
она имеет не имеет вхождений в терм A; в противном 
случае переменная x называется связанной
Для составных термов связанность переменных 
определяется индукцией по построению.
Терм, не содержащий свободных переменных, 
называется комбинатором. 
 
 
 
Комментарий к слайду  
 
Для иллюстрации построения теории типов расширим комбинаторную логику операцией 
приписывания типа. Прежде всего, напомним определение комбинатора. 
 
Для того, чтобы формально определить комбинатор, необходимо ввести понятие 
свободной и связанной переменных в ламбда-выражении. 
 
Переменная x называется свободной в ламбда-выражении (терме) вида λx.A, если она не 
имеет вхождений в терм A; в противном случае переменная x называется связанной.  
 
 
Для составных ламбда-выражений понятие связанной и свободной переменной 
определяется индукцией по построению с учетом возможных способов комбинирования, а 
именно, операций аппликации и абстракции. 
 
Теперь становится возможным дать лаконичное определение комбинатора. 
 
 
Ламбда-выражение 
(терм), 
не 
содержащее 
свободных 
переменных, 
называется 
комбинатором.  
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Комбинаторная логика: аксиомы и базис
Следующие аксиомы задают свойства отношения 
конвертируемости (приводимости одного терма к 
другому), обозначаемого символом “=”.
(I) Ix = x;
(K) Kxy = x;
(S) Sxyz = xz(yz).
Множество (минимальной мощности) комбинаторов, 
через элементы которого выразим произвольный 
комбинатор, называется (минимальным) базисом.
Пример минимального базиса: {K,S}.
 
 
 
Комментарий к слайду  
 
Напомним 
аксиомы 
комбинаторной 
логики, 
задающие 
свойства 
отношения 
конвертируемости: 
 
 
(I) Ix = x; 
 
(K) Kxy = x; 
 
(S) Sxyz = xz(yz). 
 
 
 
 
Аксиома (I) означает существование комбинатора (функции) тождества, т.е. наличие 
тождественного преобразования, при котором любой аргумент отображается  сам в себя. 
 
Аксиома (K) означает существование комбинатора (функции) взятия первой проекции, т.е. 
первого элемента упорядоченной пары или первого элемента списка. Интуитивно ясно, 
что эта аксиома близка языкам функционального программирования, оперирующим 
списками, и соответствует фундаментальной операции взятия головного (первого) 
элемента списка. 
 
Напомним также о понятии базиса в комбинаторной логике: множество (минимальной 
мощности) комбинаторов, через элементы которого выразим произвольный комбинатор, 
называется (минимальным) базисом. 
 
Как оказывается, можно доказать, что: 
1) базис термов для комбинаторной логики действительно существует (причем 
существует бесконечное множество возможных базисов); 
2) для любого базиса справедливо, что он обеспечивает представление произвольного 
комбинаторного терма (в силу свойства полноты системы комбинаторной логики); 
3) минимальный базис содержит два комбинатора, например, K и S. 
 
Приведем еще несколько примеров базисов: {I,K,S}; {I,B,C,S}; {B,W,K}. 

 
 
Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Выводимость типов комбинаторов 
Тип a приписан комбинатору X тогда и только тогда, 
когда это утверждение получено из следующих аксиом 
(FI)
|— #(I) = (a, a),
(FK)
|— #(K) = (a, (b,a)) = (a, b, a),
(FS)
|— #(S) = ((a, (b, c)), ((a, b)(a, c)))
и правила вывода
(F) если |— #(X) = (a, b) и |— #(U) = a, то |— #(XU) = b.
Процедура контроля соответствия типов транслятора
языка программирования работает аналогичным образом.
 
 
Комментарий к слайду  
 
Оказывается, что комбинаторная логика обладает возможностью не только моделировать 
процесс 
реализации 
программного 
обеспечения 
на 
языке 
функционального 
программирования, но и прозрачно формализовать процедуру приписывания типов 
объектам этого языка.  
 
Под типом (или, иначе, сортом) будем понимать  относительно устойчивую и 
независимую 
совокупность 
элементов, 
которую 
можно 
выделить 
во 
всем 
рассматриваемом множестве (предметной области). Более подробно типизация языков 
программирования и теория типов будут рассмотрены нами в ходе следующей лекции. 
 
В случае комбинаторной логики будем считать, что тип a приписан комбинатору X тогда 
и только тогда, когда это утверждение получено из следующих аксиом 
  
(FI) 
  
|— #(I) = (a, a), 
(FK)  
|— #(K) = (a, (b,a)) = (a, b, a), 
(FS) 
 
|— #(S) = ((a, (b, c)), ((a, b)(a, c))) 
 
 
и правила вывода 
 
(F) 
если |— #(X) = (a, b) и |— #(U) = a, то |— #(XU) = b. 
 
 
Заметим, 
что 
процедура 
контроля 
соответствия 
типов 
транслятора 
языка 
программирования 
реализована 
сходным 
образом, 
причем 
в 
ней 
существенно 
используется механизм сопоставления с образцом. В языке программирования SML, 
кроме того, применятся механизм получения логического вывода о типе выражения, 
исходя из контекста его использования. Этот механизм, известный также как выводимость 
типов (type inference), адекватно моделируется в терминах комбинаторной логики. 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Типы в языке программирования SML (1)
Каждому выражению (константа, переменная, функция) 
языка SML поставлен в соответствие тот или иной тип.
Система типов в SML формируется по следующей схеме:
1) задается множество базисных типов:
int - целые числа, string – строки символов, bool –
логические значения, и .т.д.;
2) если a и b считаются типами, то функция из a в b
имеет тип ‘a -> b’.
 
 
 
Комментарий к слайду  
 
Сравним математическую теорию типов с подходом к типизации  выражений, принятому 
в языке программирования SML. 
 
Каждому выражению (константа, переменная, функция) языка SML поставлен в 
соответствие тот или иной тип. Такая система типизации в языках функционального 
программирования называется системой сильной типизации, а сам язык – языком с 
сильной типизацией.  
 
Система типов в SML формируется по следующей схеме: 
 
Во-первых 
определяется 
множество 
базисных 
типов. 
В 
частности, 
в 
языке 
программирования  SML выделяются следующие базисные типы:  
• int - целые числа;  
• string – строки символов,  
• bool – логические значения. 
 
Во-вторых, принимается следующее соглашение для выводимости производных типов: 
 
если a и b считаются типами, то функция из a в b имеет тип ‘a -> b’. 
 
Как нетрудно видеть, формирование системы типов в SML полностью аналогично 
построению системы типов в формальных математических теориях, в частности, в 
комбинаторной логике. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Типы в языке программирования SML (2)
SML является языком со статической типизацией, т.е. 
тип выражения должен быть определен в процессе 
трансляции текста программы. 
Тип может быть задан явно либо выведен (type inference) 
из известных выражений, сопоставимых с данным (в ходе 
означивания функции, присваивания, и т.п.).
В последнем случае задача логического вывода решается 
программой контроля соответствия типов (type 
checker), входящей в состав транслятора SML.
В случае несоответствия типов инициируется сообщение 
об ошибке.
 
 
 
Комментарий к слайду  
 
Язык функционального программирования SML является языком со статической 
типизацией. Это означает, что, процедура контроля типизации, которая является 
неотъемлемой частью транслятора любого современного языка программирования, 
должна поставить тот или иной тип в соответствие каждому выражению в тексте 
программы. Таким образом, приписывание типов выражениям происходит во время 
компиляции (compile time), а не во время выполнения (run time) программы, т.е. 
статически с точки зрения выполнения программы.  
 
Тот факт, что каждый объект программы должен быть типизирован до начала ее 
выполнения, не означает необходимости явного приписывания типа программистом в 
ходе проектирования и реализации программы. 
 
Важным преимуществом языка программирования SML, который, напомним, возник как 
инструментальное средство для доказательства теорем, т.е. построения цепочек 
логического вывода, является так называемое свойство выводимости типов (type 
inference). Это свойство означает, что тип некоторых выражений языка SML может быть 
выведен  из контекста окружающих его выражений, типы которых уже известны, путем 
сопоставления (при этом учитываются объемлющие и внутренние функции, аппликация,  
присваивание и другие операции). 
 
При этом выводимость допускает не строгое равенство типов параметров, а лишь их 
сводимость друг к другу. С математической точки зрения прослеживается аналогия с 
отношением конвертируемости.  
 
В случае несоответствия типов сообщение об ошибке инициируется еще на стадии 
компиляции, 
что 
обеспечивает 
более 
упорядоченный 
и 
эффективный 
процесс 
проектирования и реализации программного обеспечения. 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Типизация и полиморфизм в SML
Язык программирования SML является языком с сильной 
типизацией, т.к. гарантирует обеспечение корректности 
типизации (что неверно, скажем, для языка C). 
Язык программирования SML является языком со 
статической типизацией, т.к. контроль соответствия 
типов осуществляется на этапе компиляции (в отличии от 
языка LISP). 
Язык программирования SML имеет полиморфную 
типизацию, т.к. допустимы функции переменного типа.
 
 
 
Комментарий к слайду  
 
Как уже отмечалось, язык функционального программирования SML является языком со 
строгой типизацией, т.е., говоря математическим языком, каждому выражению языка 
должен быть приписан тип. При этом гарантируется корректная типизация языковых 
объектов, что выгодно отличает SML от таких языков программирования, как, скажем, 
классический вариант C, в котором допускаются потенциально небезопасные для среды 
выполнения программы преобразования типов.  
 
Контроль соответствия типов в языке SML, в отличие от LISP и подобных ему языков 
программирования, в полном объеме осуществляется на этапе компиляции, что также 
способствует безопасности типизации. 
 
Еще одной важной позитивной особенностью языка программирования SML является то 
обстоятельство, что в нем поддерживается так называемая полиморфная типизация, суть 
которой можно объяснить на основе следующего примера. 
 
Рассмотрим функцию обработки списка, которая  упорядочивает его элементы по 
возрастанию. В классическом языке программирования со строгой типизацией, например, 
в языке Pascal, неизбежно придется реализовать по крайней мере две функции: для 
случаев числовых и строковых элементов списка. В SML не возникает такой 
необходимости, т.к. существует возможность описания функции обработки списка с 
переменным типом аргументов, которая безошибочно обработает и список из чисел, и 
список из строк, существенно сэкономив трудозатраты.   
 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Выводимость типов в SML
Язык программирования SML поддерживает 
выводимость типов (type inference), иначе называемую 
let-полиморфизмом, гарантирующую безопасность 
вычислений. В частности, выражение
let 
val Id = fn x => x 
in (Id 3, Id true) 
end
является корректно типизированным в отличии от
выражения
fn Id => (Id 3, Id true)) (fn x => x)
 
 
 
Комментарий к слайду  
 
Проиллюстрируем выводимость типов в языке программирования SML содержательным 
примером. 
 
Рассмотрим функцию 
 
 
let  
 
 
val Id = fn x => x 
  
 
 
in (Id 3, Id true) 
  
end 
 
 
С точки зрения анализатора корректности типизации эта функция является корректно 
типизированной (well-typed). Конструкция let, по сути, представляет собой подстановку 
одной функции в другую. В этой связи выводимость типов иначе называется let-
полиморфизмом. 
 
Рассмотрим другую функцию  
 
fn Id => 
 
  
 
(Id 3, Id true)) (fn x => x) 
 
В отличие от предыдущей, данная функция является некорректно типизированной (ill-
typed), поскольку однозначно определить тип параметра x, в отличие от предыдущего 
примера, не представляется возможным. 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Преимущества типизации
Модель предметной области лучше структурирована, 
существует иерархия сортов элементов
Манипулирование элементами более целенаправленно, 
разнородные элементы обрабатываются различным 
образом, однородные - единообразно
В случае строгой типизации несоответствия типов 
фиксируются до выполнения программы, гарантируя 
отсутствие смысловых ошибок и безопасность кода 
 
 
 
Комментарий к слайду  
 
Рассмотрев введение в математическую теорию типов и подходы к типизации в языках 
программирования, представим в концентрированном виде те преимущества, которые 
отличают языки программирования и формальные теории с типами.  
 
Прежде всего, отметим то бесспорное преимущество типизированных исчислений, что 
при таком подходе моделируемая предметная область области лучше структурирована, 
чем в том случае, если отсутствует сегментация на типы. Типизация структурирует 
предметную область по иерархическому принципу. 
 
Введение типизации облегчает и упорядочивает не только восприятие, но и управление 
предметной областью. Манипулирование типизированными элементами носит более 
целенаправленный характер, причем появляется возможность обрабатывать разнородные 
сущности предметной области различным образом, а однородные (или, точнее, 
однотипные) – единообразно. 
 
Перейдем к языкам программирования и практике проектирования и реализации 
программных систем. В случае построения языка программирования по принципу строгой 
типизации несоответствия типов фиксируются до начала этапа выполнения программы 
(на этапе контроля соответствия типов в ходе трансляции), что гарантирует отсутствие 
семантических (смысловых) и логических ошибок и безопасность программного кода. 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Вычисление типов в SML (1)
val x=2*3; (переменная)
val x = 6 : int
1+2; (константа)
3: int
fun add (x:int)(y:int) = x+y; (функция)
val add = fn : int -> int -> int
 
 
 
Комментарий к слайду  
 
Проиллюстрируем на примерах механизм работы процедуры, осуществляющей вывод 
типов в языке программирования SML. В качестве первого примера определим тип 
статической переменной x, которой присвоим значение, сводимое к целому типу: 
 
val x=2*3;  
val x = 6 : int 
 
Как и следовало ожидать, значение переменной x оказывается целочисленным (int). 
 
Заметим, что функция val, которая используется в примере, является стандартной 
функцией языке программирования SML для определения типа языкового объекта, т.е. 
фактически осуществляет приписывание типа (при необходимости используя механизм 
выводимости типов). 
 
В качестве второго примера определим тип константы, которой присвоим значение, также 
сводимое к целому типу: 
 
 
1+2;  
 
3: int 
 
Как и следовало ожидать, значение константы 3 также оказывается целочисленным (int). 
 
Наконец, определим тип функции сложения двух целочисленных аргументов: 
 
 
fun add (x:int)(y:int) = x+y;  
 
val add = fn : int -> int -> int  
 
Как видно из результата, типом функции является функция из пары целочисленных 
значений в целочисленное значение (с точностью до скобок). 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Вычисление типов в SML (2)
add 1 3; (вычисление значения функции)
val it = 4: int
val f = add 1; («частичная» функция)
val f = fn : int -> int
f 4;
(композиция функций)
val it = 5: int
 
 
 
Комментарий к слайду  
 
Продолжим ряд примеров. Проиллюстрируем означивание (вычисление значения) выше 
определенной функции сложения двух целочисленных аргументов: 
 
add 1 3;  
val it = 4: int 
 
 
Очевидно, что, как и следует из ранее вычисленного типа (int -> int -> int), 
функция, принимая на вход пару целочисленных величин, возвращает значение 
целочисленного типа. 
 
Рассмотрим далее тип функции, которая  является производной от функции add и 
производит операцию прибавления единицы: 
 
val f = add 1;  
val f = fn : int -> int 
 
Вновь введенная функция имеет тип «из целого числа в целое число» (int -> int) . 
 
Наконец, означивание последней функции  
 
f 4;  
val it = 5: int 
 
 
в соответствии с ее типом дает целочисленный результат. 
 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Полиморфизм типов в SML
Встроенная функция hd для списка произвольного типа:
hd [1, 2, 3]; 
val it = 1: int (тип функции: (int list) →int)
hd [true, false, true, false]; 
val it = true: bool (тип: (bool list) →bool)
hd [(1,2)(3,4),(5,6)];
val it = (1,2) : int*int ((int*int)list→(int*int))
Функция hd имеет тип (type list) →type, где type –
произвольный тип
 
 
 
Комментарий к слайду  
 
Рассмотрим пример полиморфизма – оперирования функциями переменного типа. 
 
Для иллюстрации исследуем поведение встроенной функции hd, (от слова «head» – 
голова), которая выделяет «голову» (первый элемент) списка, вне зависимости от типа его 
элементов.  
 
Применим функцию к списку из целочисленных элементов: 
 
 
hd [1, 2, 3];  
 
val it = 1: int  
 
 Получим, что функция имеет тип функции из списка целочисленных величин в целое 
число (int list → int). 
 
В случае списка из значений истинности та же самая функция  
 
hd [true, false, true, false]; 
val it = true: bool  
 
возвращает значение истинности, т.е. имеет следующий тип: bool list →bool. 
 
Наконец, для случая списка кортежей из пар целых чисел  
 
hd [(1,2)(3,4),(5,6)]; 
val it = (1,2) : int*int  
 
получим тип ((int*int)list→ (int*int)). 
В итоге можно сделать вывод о том, что функция 
hd имеет тип (type list) → type, где type – произвольный тип, т.е. полиморфна. 

Логическое 
значение 
System. 
Boolean 
 
bool 
 
3 
… 
… 
… 
… 
Строка
System.String 
string 
2 
Целое число 
System.Int32 
int 
1 
Название типа 
Класс .NET
Тип 
№
Соответствие элементарных типов в SML
и базовых классов .NET
Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Логическое 
значение
System.Boolean
bool
3
…
…
…
…
Строка символов
System.String
string
2
Целое число
System.Int32
int
1
Название типа
Класс .NET
Тип SML
№ п/п
 
 
 
Комментарий к слайду  
 
Технологическая платформа .NET обеспечивает единообразное управление типами 
элементов всех языков программирования, которые  реализованы на этой платформе. Это 
достигается за счет интегрированной обобщенной системы типизации, так называемой 
Common Type System, или, сокращенно, CTS.  
 
Основная особенность CTS заключается в том, что она представляет собой единую 
иерархию типов, и типы объектов программы, написанной на произвольном языке 
программирования, который поддерживается технологической платформой .NET, в ходе 
трансляции автоматически преобразуются в соответствующие им типы Common Type 
System. 
 
Таким образом, для любого языка программирования существует отображение (функция), 
преобразующая произвольный тип этого языка в тот или иной тип Common Type System. 
Естественно, что язык программирования SML не является исключением. Приведем в 
подтверждение фрагмент отображения типов языка программирования SML в типы 
иерархии CTS, оформив это соответствие в виде таблицы. 
 
 
 
 
 
 
 
 
 
 
 
Позднее мы обсудим подобное соответствие типов для языка программирования C#. 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Иерархия типов в .NET
Общая система типов 
Common Type System (CTS)
Типы-значения
Ссылочные типы
Встроенные 
типы-значения
Объект-
ные типы
Интерфейс-
ные типы
Типы 
указателей
Типы-значения и ссылочные типы, заданные пользователем 
 
 
 
Комментарий к слайду  
 
Рассмотрим более подробно обобщенную систему типизации, принятую в .NET. 
 
Как очевидно из схемы, Common Type System представляет собой иерархию, в которой 
стрелки указывают в сторону уменьшения общности типа. 
 
Типы иерархии CTS подразделяются на ссылочные типы (pointer type) и типы-значения 
(value type). 
 
Особенностями ссылочных типов являются необходимость использования указателей на 
типизированные объекты, а также  централизованное хранение и освобождение памяти 
(«сборка мусора»). 
 
Одной из характеристик типов-значений является то обстоятельство, что они не 
участвуют в наследовании. Кроме того, типы-значения копируются при присваивании 
значения. 
 
В свою очередь, ссылочные типы могут принимать  одну из трех форм: 
1) объектные типы (object type); 
2) интерфейсные типы (interface type); 
3) типы указателей (pointer type). 
 
В случае отсутствия стандартного типа нужной формы, пользователь  имеет возможность 
конструирования собственного типа, который может быть как ссылочным типом, так и 
типом-значением.  
 
Система CTS обеспечивает безопасную типизацию, т.е. гарантирует отсутствие побочных 
эффектов (переполнение оперативной памяти компьютера, некорректное преобразование 
типов и т.д.). 

Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Преимущества типизации на платформе .NET
1.
Использование централизованной, унифицированной 
системы типизации Common Type System (CTS)
2.
Строгое соответствие между примитивными типами 
языков программирования и базовыми классами .NET; 
встроенная поддержка примитивных типов 
большинством компиляторов для .NET
3.
Явное разделение на ссылочные типы (используются 
через указатель; централизованно хранятся и 
освобождаются) и типы-значения (не участвуют в 
наследовании; при присваивании значения копируются)
4.
Гибкий и надежный механизм преобразования типов-
значений в ссылочные (boxing) и обратно (unboxing)
 
 
 
Комментарий к слайду  
 
Подводя итоги рассмотрения основных аспектов теории типов и типизации в языках 
программирования, можно сделать следующие выводы. 
 
Во-первых, теории с типами и языки программирования с типизацией имеют значительно 
более 
высокую 
вычислительную 
мощность, 
а, 
следовательно, 
более 
высокую 
теоретическую и прикладную значимость. 
 
Во-вторых, 
технологическая 
платформа 
.NET 
обеспечивает 
ряд 
несомненных 
дополнительных преимуществ перед другими известными платформами в отношении 
системы типов. 
 
В частности, технология .NET использует централизованную, унифицированную, 
интегрированную систему типизации Common Type System (CTS), общую для всех языков 
программирования, реализуемых на данной платформе. 
 
Кроме того, в рамках технологической платформы .NET обеспечивается строгое, 
однозначное соответствие между примитивными типами языков программирования и 
базовыми классами .NET. Большинством компиляторов для языков программирования, 
которые реализованы для платформы .NET, имеют встроенную поддержку примитивных 
типов.  
 
Целям безопасности типизации также служит явное разделение на ссылочные типы и 
типы-значения, а также гибкий и надежный механизм преобразования типов-значений в 
ссылочные (известный также под названием boxing) и обратно (известный также под 
названием unboxing). 
 
 
 

 
 
Современные языки программирования и .NET: I семестр
Лекция 6: Теория типов и комбинаторная логика
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография
1.
Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, 
Amsterdam, 1958
2.
Hindley J.R., Seldin J.P. Introduction to combinators and λ-
calculus. London Mathematical Society Student Texts, 1, 
Cambridge University Press, 1986
3.
Milner R. A theory of type polymorphism in programming 
languages. Journal of Computer and System Science, 
17(3):348-375, 1978
4.
Hindley J.R. The principal type-scheme of an object in 
combinatory logic. Trans. Amer. Math. Soc., 146:29-60, 1969 
 
Комментарий к слайду  
 
К сожалению, в рамках времени, отведенных на одну лекцию, можно лишь в общих 
чертах охарактеризовать такую многоаспектную и гибкую теорию, как теория типов. Мы 
ограничились рассмотрением лишь наиболее существенных аспектов формализации 
типизации в языках программирования, включая краткое знакомство с приписыванием 
типа, выводимостью типов и системой типизации, реализованной  в .NET.  
 
Для более детального ознакомления с особенностями, достижениями и проблемами в 
области теории типов и типизации в языках программирования рекомендуется следующий 
список литературы: 
 
1. Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, Amsterdam, 1958 
 
2. Hindley J.R., Seldin J.P. Introduction to combinators and λ-calculus. London Mathematical 
Society Student Texts, 1, Cambridge University Press, 1986 
 
3. Milner R. A theory of type polymorphism in programming languages. Journal of Computer 
and System Science, 17(3):348-375, 1978 
 
4. Hindley J.R. The principal type-scheme of an object in combinatory logic. Trans. Amer. Math. 
Soc., 146:29-60, 1969  
 
Кратко остановимся на источниках. Работа [1] является энциклопедией формальной 
системы 
комбинаторной 
логики, 
которая 
формализует 
типизацию 
в 
языках 
программирования. Работа [2] связывает ламбда-исчисление и комбинаторную логику. 
Работа [3] описывает систему полиморфной типизации для языков программирования. 
Работа 
[4] 
посвящена 
вопросам 
моделирования 
типизации 
объектов 
языков 
программирования в терминах комбинаторной логики. 
 
 

