LispCast
Introduction to Clojure 
Part 2
1
Friday, June 7, 13

JAM
lambdajam.com
generously sponsored by
2
Friday, June 7, 13

juxt.pro
generously sponsored by
3
Friday, June 7, 13

4
Friday, June 7, 13

X5’s second day
at baking school
4
Friday, June 7, 13

X5’s second day
at baking school
Managing ingredients
4
Friday, June 7, 13

X5’s second day
at baking school
Managing ingredients
Filling daily orders
4
Friday, June 7, 13

5
Friday, June 7, 13

working with Clojure code
5
Friday, June 7, 13

working with Clojure code
read-eval-print loop
5
Friday, June 7, 13

working with Clojure code
read-eval-print loop
text editor
5
Friday, June 7, 13

working with Clojure code
read-eval-print loop
text editor
running at the terminal
5
Friday, June 7, 13

6
Friday, June 7, 13

clojureintro/
project.clj
src/
test/
README.md
clojureintro/
core.clj
6
Friday, June 7, 13

clojureintro/
src/
test/
README.md
clojureintro/
core.clj
project.clj
6
Friday, June 7, 13

clojureintro/
test/
README.md
clojureintro/
core.clj
project.clj
src/
6
Friday, June 7, 13

clojureintro/
test/
README.md
core.clj
project.clj
src/
clojureintro/
6
Friday, June 7, 13

clojureintro/
test/
README.md
project.clj
src/
clojureintro/
core.clj
6
Friday, June 7, 13

7
Friday, June 7, 13

rest argument
7
Friday, June 7, 13

rest argument
(defn my-function [a b c]
  (println (+ a b) c))
7
Friday, June 7, 13

rest argument
(defn my-function [a b c]
  (println (+ a b) c))
3 arguments
7
Friday, June 7, 13

rest argument
(defn my-function [a b c & rs]
  (println (+ a b) c)
  (println rs))
3 or more arguments
7
Friday, June 7, 13

rest argument
(defn my-function [& rs]
  (println rs))
any number of aguments
7
Friday, June 7, 13

8
Friday, June 7, 13

apply
8
Friday, June 7, 13

apply
(apply println [1 2 3])
8
Friday, June 7, 13

apply
(apply println [1 2 3])
function
8
Friday, June 7, 13

apply
(apply println [1 2 3])
function arguments (0 or more)
8
Friday, June 7, 13

apply
(apply println [1 2 3])
function arguments (0 or more)
(println 1 2 3)
8
Friday, June 7, 13

9
Friday, June 7, 13

warm-up
Write a function error that takes any number 
of arguments, prints them using println, and 
returns :error.
9
Friday, June 7, 13

10
Friday, June 7, 13

warm-up
Refactor all of the error conditions in 
the program to use the new error 
function. Hint: search for :error to 
ﬁnd the instances.
10
Friday, June 7, 13

11
Friday, June 7, 13

a day at the bakery
11
Friday, June 7, 13

get orders for the day
a day at the bakery
11
Friday, June 7, 13

get orders for the day
fetch needed ingredients
a day at the bakery
11
Friday, June 7, 13

get orders for the day
fetch needed ingredients
bake orders
a day at the bakery
11
Friday, June 7, 13

get orders for the day
fetch needed ingredients
bake orders
give receipts to the delivery bot
a day at the bakery
11
Friday, June 7, 13

12
Friday, June 7, 13

locations
12
Friday, June 7, 13

locations
:prep-area     for baking
12
Friday, June 7, 13

locations
:prep-area     for baking
:pantry        for dry storage
12
Friday, June 7, 13

locations
:prep-area     for baking
:pantry        for dry storage
:fridge        for cold storage
12
Friday, June 7, 13

locations
:prep-area     for baking
:pantry        for dry storage
:fridge        for cold storage
example
(go-to :prep-area)
12
Friday, June 7, 13

13
Friday, June 7, 13

commands
13
Friday, June 7, 13

commands
go-to
13
Friday, June 7, 13

commands
go-to
load-up
13
Friday, June 7, 13

commands
go-to
load-up
unload
13
Friday, June 7, 13

commands
go-to
load-up
unload
bakery-help
13
Friday, June 7, 13

14
Friday, June 7, 13

sets
#{ }
14
Friday, June 7, 13

sets
order does not matter
#{ }
14
Friday, June 7, 13

sets
order does not matter
no duplicates
#{ }
14
Friday, June 7, 13

sets
order does not matter
no duplicates
fast containment check
#{ }
14
Friday, June 7, 13

sets
order does not matter
no duplicates
fast containment check
contains?
#{ }
14
Friday, June 7, 13

sets
order does not matter
no duplicates
fast containment check
contains?
put any value in it
#{ }
14
Friday, June 7, 13

sets
#{ }
examples
#{1 2 3}
14
Friday, June 7, 13

sets
#{ }
examples
#{1 2 3}
(contains? #{1 2 3 “Hello!”} “Hello!”)
14
Friday, June 7, 13

sets
#{ }
examples
#{1 2 3}
(contains? #{1 2 3 “Hello!”} “Hello!”)
  => true
14
Friday, June 7, 13

sets
#{ }
examples
#{1 2 3}
(contains? #{1 2 3 “Hello!”} “Hello!”)
(contains? #{1 2 3 “Hello!”} 10)
  => true
14
Friday, June 7, 13

sets
#{ }
examples
#{1 2 3}
(contains? #{1 2 3 “Hello!”} “Hello!”)
(contains? #{1 2 3 “Hello!”} 10)
  => true
  => false
14
Friday, June 7, 13

15
Friday, June 7, 13

exercise 1
Write fridge-ingredients 
and from-fridge? using this 
new idiom.
15
Friday, June 7, 13

16
Friday, June 7, 13

exercise 2
Refactor scooped?, squeezed?, and 
simple? to use this new idiom.
16
Friday, June 7, 13

17
Friday, June 7, 13

exercise 3
Write a function fetch-ingredient which 
takes the name of an ingredient and an 
amount and fetches that amount of the 
ingredient. Also make it accept just the 
ingredient, with a default amount of 1.
17
Friday, June 7, 13

exercise 3
Write a function fetch-ingredient which 
takes the name of an ingredient and an 
amount and fetches that amount of the 
ingredient. Also make it accept just the 
ingredient, with a default amount of 1.
examples
(fetch-ingredient :milk 10)
(fetch-ingredient :flour 14)
(fetch-ingredient :sugar)
17
Friday, June 7, 13

18
Friday, June 7, 13

maps
{ }
18
Friday, June 7, 13

maps
key, value pairs
{ }
18
Friday, June 7, 13

maps
key, value pairs
order does not matter
{ }
18
Friday, June 7, 13

maps
key, value pairs
order does not matter
fast lookup by key
{ }
18
Friday, June 7, 13

maps
key, value pairs
order does not matter
fast lookup by key
get
{ }
18
Friday, June 7, 13

maps
key, value pairs
order does not matter
fast lookup by key
get
contains?
{ }
18
Friday, June 7, 13

maps
key, value pairs
order does not matter
fast lookup by key
get
contains?
keys and values can be any type
{ }
18
Friday, June 7, 13

maps
examples
(def ingredients {:flour 3
                  :egg 6
                  :sugar 24})
{ }
18
Friday, June 7, 13

maps
examples
(def ingredients {:flour 3
                  :egg 6
                  :sugar 24})
(get ingredients :flour)
{ }
18
Friday, June 7, 13

maps
examples
(def ingredients {:flour 3
                  :egg 6
                  :sugar 24})
(get ingredients :flour)
=> 3
{ }
18
Friday, June 7, 13

maps
examples
(def ingredients {:flour 3
                  :egg 6
                  :sugar 24})
(get ingredients :flour)
(contains? ingredients :milk)
=> 3
{ }
18
Friday, June 7, 13

maps
examples
(def ingredients {:flour 3
                  :egg 6
                  :sugar 24})
(get ingredients :flour)
(contains? ingredients :milk)
=> 3
=> false
{ }
18
Friday, June 7, 13

19
Friday, June 7, 13

IFn
19
Friday, June 7, 13

IFn
I -- Interface (a common Java pattern)
19
Friday, June 7, 13

IFn
I -- Interface (a common Java pattern)
Fn -- for Clojure’s functions (like in defn)
19
Friday, June 7, 13

IFn
I -- Interface (a common Java pattern)
Fn -- for Clojure’s functions (like in defn)
one method: invoke (called internally)
19
Friday, June 7, 13

IFn
I -- Interface (a common Java pattern)
Fn -- for Clojure’s functions (like in defn)
one method: invoke (called internally)
functions, keywords, maps, and sets
19
Friday, June 7, 13

20
Friday, June 7, 13

seq
20
Friday, June 7, 13

seq
short for sequenence
two methods: first and rest
20
Friday, June 7, 13

seq
short for sequenence
two methods: first and rest
all Clojure and Java collections and Strings
20
Friday, June 7, 13

21
Friday, June 7, 13

doseq
iteration over items in a sequence
21
Friday, June 7, 13

doseq
iteration over items in a sequence
(doseq [ingredient fridge-ingredients]
  (println “I like” ingredient))
21
Friday, June 7, 13

doseq
iteration over items in a sequence
(doseq [ingredient fridge-ingredients]
  (println “I like” ingredient))
variable
21
Friday, June 7, 13

doseq
iteration over items in a sequence
(doseq [ingredient fridge-ingredients]
  (println “I like” ingredient))
variable
seq
21
Friday, June 7, 13

doseq
iteration over items in a sequence
(doseq [ingredient fridge-ingredients]
  (println “I like” ingredient))
variable
seq
body
21
Friday, June 7, 13

22
Friday, June 7, 13

a day at the bakery
get morning orders
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
bake the items
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
bake the items
give a receipt to delivery bot
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
bake the items
give a receipt to delivery bot
get-morning-orders
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
bake the items
give a receipt to delivery bot
get-morning-orders
fetch...
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
bake the items
give a receipt to delivery bot
get-morning-orders
fetch...
bake...
22
Friday, June 7, 13

a day at the bakery
get morning orders
fetch necessary ingredients
bake the items
give a receipt to delivery bot
get-morning-orders
fetch...
bake...
delivery
22
Friday, June 7, 13

23
Friday, June 7, 13

orders
23
Friday, June 7, 13

orders
{:orderid 123
:address “323 Robot Ln”
:items {:cake 14
        :cookies 12}}
23
Friday, June 7, 13

24
Friday, June 7, 13

receipts
24
Friday, June 7, 13

receipts
{:orderid 123
 :address “323 Robot Ln”
 :rackids [:cooling-rack-324
           :cooling-rack-325
           :cooling-rack-326]}
24
Friday, June 7, 13

25
Friday, June 7, 13

exercise 4
Write a function day-at-the-bakery 
which will represent what X5 does at 
the bakery.
25
Friday, June 7, 13

exercise 4
Write a function day-at-the-bakery 
which will represent what X5 does at 
the bakery.
Requirements:
25
Friday, June 7, 13

exercise 4
Write a function day-at-the-bakery 
which will represent what X5 does at 
the bakery.
Requirements:
•Get the orders
25
Friday, June 7, 13

exercise 4
Write a function day-at-the-bakery 
which will represent what X5 does at 
the bakery.
Requirements:
•Get the orders
•Bake items
25
Friday, June 7, 13

exercise 4
Write a function day-at-the-bakery 
which will represent what X5 does at 
the bakery.
Requirements:
•Get the orders
•Bake items
•Send receipts to the delivery bot
25
Friday, June 7, 13

26
Friday, June 7, 13

exercise 5
Name some things that can be improved in this 
function. They can include ways to make it 
more efﬁcient (saving battery life), less 
annoying to the delivery bot, or better code. 
Name one way to ﬁx each problem.
26
Friday, June 7, 13

27
Friday, June 7, 13

answers
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
X5 will deliver a receipt for every item.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
X5 will deliver a receipt for every item.
X5 should deliver one receipt per order.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
X5 will deliver a receipt for every item.
X5 should deliver one receipt per order.
We repeat the code for cakes and cookies.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
X5 will deliver a receipt for every item.
X5 should deliver one receipt per order.
We repeat the code for cakes and cookies.
We should factor out the common code.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
X5 will deliver a receipt for every item.
X5 should deliver one receipt per order.
We repeat the code for cakes and cookies.
We should factor out the common code.
We are calling fetch-list on an inline map.
27
Friday, June 7, 13

answers
X5 will make many trips to the pantry and fridge.
X5 should make one trip before baking.
X5 will deliver a receipt for every item.
X5 should deliver one receipt per order.
We repeat the code for cakes and cookies.
We should factor out the common code.
We are calling fetch-list on an inline map.
We should extract the map and name it.
27
Friday, June 7, 13

28
Friday, June 7, 13

functional programming
28
Friday, June 7, 13

functional programming
Side effects
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“change the world”
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“change the world”
may be different each time
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“change the world”
may be different each time
fetching ingredients
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“in you head”
“change the world”
may be different each time
fetching ingredients
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“in you head”
make list of ingredients 
“change the world”
may be different each time
fetching ingredients
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“in you head”
make list of ingredients 
same answer every time
“change the world”
may be different each time
fetching ingredients
28
Friday, June 7, 13

functional programming
Pure functions
Side effects
“in you head”
make list of ingredients 
same answer every time
referential transparency
“change the world”
may be different each time
fetching ingredients
28
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
5 eggs
2 butters
3 cups of ﬂour
1 egg
2 cups of sugar
2 cups of ﬂour
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
5 eggs
2 butters
3 cups of ﬂour
1 egg
2 cups of sugar
2 cups of ﬂour
+
List 3
=
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
2 butters
3 cups of ﬂour
1 egg
2 cups of sugar
2 cups of ﬂour
+
List 3
=
5 eggs
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
2 butters
3 cups of ﬂour
2 cups of sugar
2 cups of ﬂour
+
List 3
=
5 eggs
1 egg
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
2 butters
3 cups of ﬂour
2 cups of sugar
2 cups of ﬂour
+
List 3
6 eggs
=
5 eggs
1 egg
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
3 cups of ﬂour
2 cups of sugar
2 cups of ﬂour
+
List 3
6 eggs
=
5 eggs
2 butters
1 egg
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
3 cups of ﬂour
2 cups of sugar
2 cups of ﬂour
+
List 3
6 eggs
=
2 butters
5 eggs
2 butters
1 egg
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
2 cups of sugar
2 cups of ﬂour
+
List 3
6 eggs
=
2 butters
5 eggs
2 butters
3 cups of ﬂour
1 egg
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
2 cups of sugar
+
List 3
6 eggs
=
2 butters
5 eggs
2 butters
3 cups of ﬂour
1 egg
2 cups of ﬂour
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
2 cups of sugar
+
List 3
6 eggs
5 cups of ﬂour
=
2 butters
5 eggs
2 butters
3 cups of ﬂour
1 egg
2 cups of ﬂour
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
+
List 3
6 eggs
5 cups of ﬂour
=
2 butters
5 eggs
2 butters
3 cups of ﬂour
1 egg
2 cups of sugar
2 cups of ﬂour
29
Friday, June 7, 13

List 1
List 2
combining two lists of ingredients
+
List 3
6 eggs
2 cups of sugar
5 cups of ﬂour
=
2 butters
5 eggs
2 butters
3 cups of ﬂour
1 egg
2 cups of sugar
2 cups of ﬂour
29
Friday, June 7, 13

30
Friday, June 7, 13

merge-with
30
Friday, June 7, 13

merge-with
(merge-with + a b)
30
Friday, June 7, 13

merge-with
(merge-with + a b)
function
30
Friday, June 7, 13

merge-with
(merge-with + a b)
function two maps
30
Friday, June 7, 13

31
Friday, June 7, 13

exercise 6
Write a function add-ingredients which takes 
two ingredient lists and adds them together using 
merge-with.
31
Friday, June 7, 13

List 1
10
multiplying a list by a number
5 eggs
2 butters
3 cups of ﬂour
x
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
5 eggs
2 butters
3 cups of ﬂour
x
List 2
=
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
2 butters
3 cups of ﬂour
x
List 2
=
5 eggs
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
2 butters
3 cups of ﬂour
x
List 2
=
5 eggs
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
2 butters
3 cups of ﬂour
x
List 2
50 eggs
=
5 eggs
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
3 cups of ﬂour
x
List 2
50 eggs
=
5 eggs
2 butters
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
3 cups of ﬂour
x
List 2
50 eggs
=
5 eggs
2 butters
10
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
3 cups of ﬂour
x
List 2
50 eggs
=
20 butters
5 eggs
2 butters
10
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
x
List 2
50 eggs
=
20 butters
5 eggs
2 butters
3 cups of ﬂour
10
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
x
List 2
50 eggs
=
20 butters
5 eggs
2 butters
3 cups of ﬂour
10
10
10
32
Friday, June 7, 13

List 1
10
multiplying a list by a number
x
List 2
50 eggs
30 cups of ﬂour
=
20 butters
5 eggs
2 butters
3 cups of ﬂour
10
10
10
32
Friday, June 7, 13

33
Friday, June 7, 13

into
33
Friday, June 7, 13

into
(into {} [[:x 1] [:y 2] [:z 19]])
  => {:x 1 :y 2 :z 19}
33
Friday, June 7, 13

into
(into {} [[:x 1] [:y 2] [:z 19]])
  => {:x 1 :y 2 :z 19}
collection to add to
33
Friday, June 7, 13

into
(into {} [[:x 1] [:y 2] [:z 19]])
  => {:x 1 :y 2 :z 19}
collection to add to
seq of items
33
Friday, June 7, 13

34
Friday, June 7, 13

REPL exploration
What happens if a key appears twice when 
using into?
34
Friday, June 7, 13

REPL exploration
What happens if a key appears twice when 
using into?
Try to guess what these expressions return 
and then try them out in a REPL.
34
Friday, June 7, 13

REPL exploration
What happens if a key appears twice when 
using into?
Try to guess what these expressions return 
and then try them out in a REPL.
(into {} [[:x 1] [:x 2] [:x 5]])
(into {:x 5} [[:x 1] [:y 7]])
34
Friday, June 7, 13

35
Friday, June 7, 13

for
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        => (2 4 6)
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
(for [x {:x 1 :y 2 :z 3}]
  (count x))      
=> (2 4 6)
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
(for [x {:x 1 :y 2 :z 3}]
  (count x))      
=> (2 4 6)
=> (2 2 2)
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
(for [x {:x 1 :y 2 :z 3}]
  (count x))      
(for [[k v] {:x 1 :y 2 :z 3}]
  [k (* 2 v)])    
=> (2 4 6)
=> (2 2 2)
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
(for [x {:x 1 :y 2 :z 3}]
  (count x))      
(for [[k v] {:x 1 :y 2 :z 3}]
  [k (* 2 v)])    
=> (2 4 6)
=> (2 2 2)
=> ([:x 2] [:y 4] [:z 6])
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
(for [x {:x 1 :y 2 :z 3}]
  (count x))      
(for [[k v] {:x 1 :y 2 :z 3}]
  [k (* 2 v)])    
(into {}
  (for [[k v] {:x 1 :y 2 :z 3}]
    [k (* 2 v)])) 
=> (2 4 6)
=> (2 2 2)
=> ([:x 2] [:y 4] [:z 6])
35
Friday, June 7, 13

for
(for [x [1 2 3]]
  (* x 2))        
(for [x {:x 1 :y 2 :z 3}]
  (count x))      
(for [[k v] {:x 1 :y 2 :z 3}]
  [k (* 2 v)])    
(into {}
  (for [[k v] {:x 1 :y 2 :z 3}]
    [k (* 2 v)])) 
=> (2 4 6)
=> (2 2 2)
=> ([:x 2] [:y 4] [:z 6])
=> {:x 2 :y 4 :z 6}
35
Friday, June 7, 13

36
Friday, June 7, 13

exercise 7
Write a function multiply-ingredients 
that takes a quantity and an ingredient list and 
returns a new ingredient list with all the 
amounts multiplied by the quantity. Use into 
and for.
36
Friday, June 7, 13

exercise 7
Write a function multiply-ingredients 
that takes a quantity and an ingredient list and 
returns a new ingredient list with all the 
amounts multiplied by the quantity. Use into 
and for.
example
(multiply-ingredients 4 {:egg 2})
  => {:egg 8}
36
Friday, June 7, 13

37
Friday, June 7, 13

Write a function order->ingredients which 
takes an order and returns an ingredient list for 
everything needed in that order. You should 
use add-ingredients and multiply-
ingredients.
exercise 8
example
(order->ingredients
  {:orderid 123 
   :address “43 Cyber Dr” 
   :items {:cake 10 :cookies 1}})
  => {:egg 21 :flour 21 :sugar 11 :milk 10 :butter 1}
37
Friday, June 7, 13

38
Friday, June 7, 13

map
38
Friday, June 7, 13

map
(map solve-problem problem-list)
38
Friday, June 7, 13

map
(map solve-problem problem-list)
function
38
Friday, June 7, 13

map
(map solve-problem problem-list)
function
sequence
38
Friday, June 7, 13

map
(map solve-problem problem-list)
function
sequence
(map order->ingredients orders)
38
Friday, June 7, 13

39
Friday, June 7, 13

reduce
39
Friday, June 7, 13

reduce
1 4 5 90 23 2 32
39
Friday, June 7, 13

reduce
1 + 4 + 5 + 90 + 23 + 2 + 32
39
Friday, June 7, 13

reduce
((((((1 + 4) + 5) + 90) + 23) + 2) + 32)
39
Friday, June 7, 13

reduce
(+ (+ (+ (+ (+ (+ 1 4) 5) 90) 23) 2) 32)
39
Friday, June 7, 13

reduce
(+ (+ (+ (+ (+ (+ 1 4) 5) 90) 23) 2) 32)
(reduce + [1 4 5 3 90 23 2 32])
39
Friday, June 7, 13

40
Friday, June 7, 13

exercise 9
Write a function orders->ingredients that 
builds a total ingredients list from a list of 
orders. You should use map and reduce.
40
Friday, June 7, 13

41
Friday, June 7, 13

let
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
name
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
value
name
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
value
name
name
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
value
name
value
name
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
value
name
value
name
name
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
value
name
value
name
value
name
41
Friday, June 7, 13

let
(let [x 1
      y 2
      z (+ x y)]
  (println z))
body
value
name
value
name
value
name
41
Friday, June 7, 13

42
Friday, June 7, 13

for
42
Friday, June 7, 13

for
(def list-of-lists [[1 2 3] [4 5 6] [7 8] [9 10] []])
42
Friday, June 7, 13

for
(def list-of-lists [[1 2 3] [4 5 6] [7 8] [9 10] []])
(for [l list-of-lists
      x l]
  x)
42
Friday, June 7, 13

for
(def list-of-lists [[1 2 3] [4 5 6] [7 8] [9 10] []])
=> (1 2 3 4 5 6 7 8 9 10)
(for [l list-of-lists
      x l]
  x)
42
Friday, June 7, 13

for
(def list-of-lists [[1 2 3] [4 5 6] [7 8] [9 10] []])
=> (1 2 3 4 5 6 7 8 9 10)
(for [x [:a :b :c]
      y [1 2 3]]
  [x y])
(for [l list-of-lists
      x l]
  x)
42
Friday, June 7, 13

43
Friday, June 7, 13

range
43
Friday, June 7, 13

range
(range 3)  => (0 1 2)
43
Friday, June 7, 13

range
(range 3)  => (0 1 2)
(range 10) => (0 1 2 3 4 5 6 7 8 9)
43
Friday, June 7, 13

range
(range 3)  => (0 1 2)
(range 10) => (0 1 2 3 4 5 6 7 8 9)
(for [[item times] {“X” 20 “O” 12}
      i (range times)]
  item)
43
Friday, June 7, 13

44
Friday, June 7, 13

exercise 10
Rewrite day-at-the-bakery to make 
X5 take a single trip to the fridge and 
pantry, and to deliver one receipt per 
order (instead of per item).
44
Friday, June 7, 13

45
Friday, June 7, 13

create a project
45
Friday, June 7, 13

create a project
refactor
45
Friday, June 7, 13

create a project
refactor
functional programming
45
Friday, June 7, 13

create a project
refactor
functional programming
Clojure collections
45
Friday, June 7, 13

create a project
refactor
functional programming
Clojure collections
Clojure abstractions
45
Friday, June 7, 13

46
Friday, June 7, 13

46
Friday, June 7, 13

