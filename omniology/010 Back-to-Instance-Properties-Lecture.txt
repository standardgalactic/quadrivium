©2019 MathByte Academy

Outstanding Problem
I will show you in the code section how to use the WeakKeyDictionary approach
à but technique only works for hashable objects
à cannot use the object as the key in a dictionary
à use id(instance) as the key
Instead we'll try this approach first:
à still has a drawback
if an object is finalized, the corresponding entry still remains in dictionary
à unnecessary clutter
à potential risks if id is re-used
(that was a big advantage of the WeakKeyDictionary)
à but at least we don't maintain strong reference to object
©2019 MathByte Academy

Final Approach!!
weakref.ref à callback functionality
à automatically calls a custom function when the object is being finalized
à use regular data dictionary
à use id(instance) as key
à use (weak_ref, value) as corresponding dictionary value
à for each weak_ref register a callback function
à callback function will remove dead entry from dictionary
We can now implement data descriptors that:
à have instance specific storage
à do not use the instance itself for storage (__slots__ problem)
à handle non-hashable objects
à keep the data storage mechanism clean
©2019 MathByte Academy

Coding
©2019 MathByte Academy

