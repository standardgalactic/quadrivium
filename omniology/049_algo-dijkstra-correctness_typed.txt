Graph	  Primi*ves	  
Dijkstra’s	  Algorithm:	  
Why	  It	  Works	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Dijkstra’s	  Algorithm	  
Ini*alize:	  
• 	  X	  =	  [s]	  	  	  	  [ver*ces	  processed	  so	  far]	  
• 	  A[s]	  =	  0	  	  [computed	  shortest	  path	  distances]	  
• 	  B[s]	  =	  empty	  path	  [computed	  shortest	  
paths]	  
Main	  Loop	  
• 	  while	  	  XǂV:
	  	  
	  -­‐need	  to	  grow	  	  
	  
	  
	  x	  by	  one	  node	  
Main	  Loop	  cont’d:	  
• 	  	  
	  
	  
	  
[call	  it	  (v*,	  w*)]	  
	  
• 	  add	  w*	  to	  X	  
• 	  set	  
• 	  set	  	  	  
	  
	    
This array 
only to help 
explanation! 
Already 
computed in 
earlier iteration 

Tim	  Roughgarden	  
Proof: by induction on the number of iterations. 
Base Case:  
 
Correctness	  Claim	  
Theorem [Dijkstra] For every directed graph with nonnegative 
edge lengths, Dijkstra’s algorithm correctly computes all shortest-
path distances. 
what algorithm 
computes  
True shortest 
distance from s to v 
(correct) 

Tim	  Roughgarden	  
Inductive Step: 
Inductive Hypothesis: all previous iterations correct (i.e., A[v] = L(v)  
and B[v] is a true shortest s-v path in G, for all v already in X). 
Proof	  
In current iteration: 
We pick an edge (v*, w*) and we add w* to X. 
We set B[w*] = B[v*] u(v*, w*) 
 
 
Also: A[w*] = A[v*] + lv*w* = L(v*) + lv*w* 
in X 
not in X 
has length L(v*) + lv*w* 
has length L(v*) 
L(v*) by I.H 

Tim	  Roughgarden	  
Proof	  (con’d)	  
Upshot: in current iteration, we set: 
1.  A[w*] = L(v*) + lv*w* 
2.  B[w*] = an s -> w* path with length (L(v*) + lv*w*) 
 
To finish proof: need to show that every s-w* path has length >= 
L(v*) +lv*w* (if so, our path is the shortest!) 
So: Let P= any s->w* path. Must “cross the frontier”: 
 
and so has the form:  
A	  path	  P	  

Tim	  Roughgarden	  
Proof	  (con’d)	  
So: every s->w* path P has to have the form 
Total length of path P: at least A[y] + Cyz 
-> by Dijkstra’s greedy criterion,  
(            
                ) 
length of 
our path ! 
Length >=0 
Length = lyz 
>= length of 
shortest s-y path = 
L(y) = A[y] 
(Since no negative 
edges !) 
By inductive hypothesis 
(since               ) 

