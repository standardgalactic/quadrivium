©2019 MathByte Academy

Descriptors
Let's look at a problem we want to solve:
Suppose we want a Point2D class whose coordinates must always be integers
à plain attributes for x and y cannot guarantee this
à instead we can use a property with getter and setter methods
Let's implement x first:
class Point2D:
@property
def x(self):
return self._x
@x.setter
def x(self, value):
self._x = int(value)
def __init__(self, x):
self.x = x
©2019 MathByte Academy

OK, so now we do the same thing for y:
class Point2D:
@property
def x(self):
return self._x
@x.setter
def x(self, value):
self._x = int(value)
@property
def y(self):
return self._y
@y.setter
def y(self, value):
self._y = int(value)
def __init__(self, x, y):
self.x = x
self.y = y
this is tedious, repetitive boiler plate code!
better way needed!
©2019 MathByte Academy

Descriptors
What if we could write a separate class like this:
class IntegerValue:
def get(self):
return self._value
def set(self, value):
self._value = int(value)
def __init__(self, value=None):
if value:
self.set(value)
and somehow use that in our class in this way:
class Point2D:
x = IntegerValue()
y = IntegerValue()
and have code like this work by actually calling the get and set methods:
p = Point2D()
p.x = 100.1
p.x à 100
©2019 MathByte Academy

Descriptors
Of course the previous code will not work as expected:
p.x = 100.1
à will just create a new instance variable x with the float that will shadow the 
class attribute
à use these get and set methods of the IntegerValue instance
class Point2D:
x = IntegerValue()
y = IntegerValue()
these are bound to the class, not the instances
à even if we use the get and set methods ourselves, we are still dealing with 
IntegerValue instances bound to the class Point2D, not instances of the class
à need to be able to tell Python two things:
x = IntegerValue
à this is meant to be bound to instances at run-time
p.x
©2019 MathByte Academy

Descriptors
And this is where the descriptor protocol comes in
There are 4 main methods that make up the descriptor protocol – they are not all required.
à __get__
à __set__
à __delete__
à __set_name__
Two categories of descriptors:
those that implement __get__ only
used to get an attribute value
used to set an attribute value
used to delete an attribute
à non-data descriptors
those that implement __set__ and/or __delete__ à data descriptors
the distinction is really important as we'll see later
new in Python 3.6 – I'll come back to this later
p.x
p.x = 100
del p.x
©2019 MathByte Academy

Using a Descriptor Class
class Logger:
current_time = TimeUTC()
from datetime import datetime
class TimeUTC:
def __get__(self, instance, owner_class):
return datetime.utcnow().isoformat()
We first define a class that implements the __get__ method only
à non-data descriptor
Next we use it in our class by specifying it as a class attribute
we'll come back to 
what those are
And we can use it this way:
l = Logger()
l.current_time
à '2019-03-13T18:59:49.435411'
à as you can see it called __get__
©2019 MathByte Academy

Coding
©2019 MathByte Academy

