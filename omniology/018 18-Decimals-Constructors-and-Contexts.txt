
Constructing Decimal Objects
x can be a variety of types
Decimal(x)
The Decimal class is in the decimal module
integers
a = Decimal(10)
import decimal
from decimal import Decimal
other Decimal object
strings
a = Decimal('0.1')
tuples
a = Decimal((1, (3, 1, 4, 1, 5), -4))
→10
→0.1
→-3.1415
floats?
yes, but not usually done
Decimal(0.1) →0.100000000000000005551
Since 0.1 does not have an exact binary float representation
it cannot be used to create an exact Decimal representation
of itself
→Use strings or tuples instead

Using the tuple constructor
(s, (d1, d2, d3, …), exp)
→+123 x 10-2
1.23
-1.23
→-123 x 10-2
sign
digits
exponent
Example: -3.1415
→(1, (3, 1, 4, 1, 5), -4)
a = Decimal((1, (3, 1, 4, 1, 5), -4))
a →-3.1415

Context Precision and the Constructor
Context precision does not affect the constructor
Context precision affects mathematical operations
decimal.getcontext().prec = 2
a = Decimal('0.12345')
a →0.12345
b = Decimal('0.12345')
b →0.12345
c = a + b
c →0.25
a + b = 0.2469
import decimal
from decimal import Decimal
global (default) context now has precision set to 2

Local vs Global Context
decimal.getcontext().prec = 6
a = Decimal('0.12345')
b = Decimal('0.12345')
print(a + b)
import decimal
from decimal import Decimal
→0.25
with decimal.localcontext() as ctx:
ctx.prec = 2
c = a + b
print(c)
print(c)
→0.25
→0.24690

Code

