IFAC Proceedings Series 
1985 
No. 1 
*PERKINS, MACFARLANE 8c LEININGER: Analysis and Synthesis of Control Systems 
No. 2 
*LJUNG & ASTRÖM: Identification, Adaptive and Stochastic Control 
No. 3 
*TITLI, SINGH, PACHTER, HAUTUS, KOKOTOVIC 8c RAUCH: Large-scale Systems, 
Decision-making, Mathematics of Control 
No. 4 
*NISENFELD, LEFKOWITZ, PAI 8c DY LIACCO: Process Industries, Power Systems 
No. 5 
*REMBOLD, KEMPF, TOWILL, JOHANNSEN, PAUL, HARRISON, EHRENBERGER, TABAK, 
LESKIEWICZ, FENTON 8c DEBRA: Manufacturing, Man-Machine Systems, Computers, 
Components, Traffic Control, Space Applications 
No. 6 
*VOSSIUS, WEED, RESWICK, COBELLI, HAÏMES, TAKAMATSU, KAYA, NAJIM, 
MARTENSSON, CHESTNUT 8c LARSEN: Biomédical Applications, Water Resources, 
Environment, Energy Systems, Development, Social Effects, SWIIS, Education 
(*Λ Bridge between Control Science and Technology, Ninth Triennial World Congress, 
General Editors: J. Gertler and L. Keviczky) 
No. 7 
BARKER 8c YOUNG: Identification and System Parameter Estimation (1985) 
1986 
No. 1 
'NORRIE 8c TURNER: Automation for Mineral Resource Development 
No. 2 
CHRETIEN: Automatic Control in Space 
No. 3 
DA CUNHA: Planning and Operation of Electric Energy Systems 
No. 4 
VALADARES TAVARES 8c EVARISTO DA SILVA: Systems Analysis Applied to Water and Related 
Land Resources 
No. 5 
LARSEN & HANSEN: Computer Aided Design in Control and Engineering Systems 
No. 6 
PAUL: Digital Computer Applications to Process Control 
No. 7 
YANG JIACHI: Control Science 8c Technology for Development 
No. 8 
MANCINI, JOHANNSEN 8c MARTENSSON: Analysis, Design and Evaluation of Man-machine 
Systems 
No. 9 
GELLIE, FERRATE 8c BASANEZ: Robot Control "Syroco '85" 
No. 10 JOHNSON: Modelling and Control of Biotechnological Processes 
NOTICE TO READERS 
If your library is not already a standing/continuation order customer or subscriber to this series, may we recommend that you place a 
standing/continuation or subscription order to receive immediately upon publication all new volumes. Should you find that these volumes no 
longer serve your needs your order can be cancelled at any time without notice. 
Copies of all previously published volumes are available. A fully descriptive catalogue will be gladly sent on request. 
R O B E R T 
M A X W E L L 
Publisher 
IFAC Related 
Titles 
BROADBENT & MASUBUCHI: Multilingual Glossary of Automatic Control Technology 
EYKHOFF: Trends and Progress in System Identification 
ISERMANN: System Identification Tutorials (Automatica Special Issue) 

COMPUTER AIDED DESIGN IN 
CONTROL AND ENGINEERING 
SYSTEMS 
ADVANCED TOOLS FOR MODERN 
TECHNOLOGY 
Proceedings of the 3rd IFAC I IF IP Symposium 
Lyngby, Denmark, 31 July—2 August 1985 
Edited by 
P. MARTIN LARSEN 
Technical University of Denmark 
and 
N. E. HANSEN 
NEH Engineering, Denmark 
Published for the 
INTERNATIONAL FEDERATION OF AUTOMATIC CONTROL 
by 
PERGAMON PRESS 
OXFORD · NEW YORK · TORONTO · SYDNEY · FRANKFURT 
TOKYO · SAO PAULO · BEIJING 

U.K. 
U.S.A. 
CANADA 
AUSTRALIA 
FEDERAL REPUBLIC 
OF GERMANY 
JAPAN 
BRAZIL 
PEOPLE'S REPUBLIC 
OF CHINA 
Pergamon Press, Headington Hill Hall, Oxford OX3 OBW, England 
Pergamon Press Inc., Maxwell House, Fairview Park, Elmsford, New York 10523, U.S.A. 
Pergamon Press Canada, Suite 104, 150 Consumers Road, Willowdale, Ontario M2J 1P9, 
Canada 
Pergamon Press (Aust.) Pty. Ltd., P.O. Box 544, Potts Point, N.S.W. 2011, Australia 
Pergamon Press GmbH, Hammerweg 6, D-6242 Kronberg, Federal Republic of Germany 
Pergamon Press, 8th Floor, Matsuoka Central Building, 1-7-1 Nishishinjuku, Shinjuku-ku, 
Tokyo 160, Japan 
Pergamon Editora Ltda., Rua Eça de Queiros, 346, CEP 04011, Sâo Paulo, Brazil 
Pergamon Press, Qianmen Hotel, Beijing, People's Republic of China 
Copyright © 1986 IFAC 
All Rights Reserved. No part of this publication may be reproduced, stored in a retrieval system or transmitted in 
any form or by any means: electronic, electrostatic, magnetic tape, mechanical, photocopying, recording or other-
wise, without permission in writing from the copyright holders. 
First edition 1986 
British Library Cataloguing in Publication Data 
Computer aided design in control and engineering systems : 
advanced tools for modern technology : proceedings of the 3rd 
IFAC/IFIP symposium, Lyngby, Denmark, July 31 - August 2, 
1985. — (IFAC proceedings series; 1986, no. 5) 
1. Automatic control — Data processing 
I. Larsen, P. Martin 
II. Hansen, N. E. 
III. International 
Federation of Automatic Control 
IV. International Federation for 
Information Processing 
V. Series 
629.8'312 
TJ213 
ISBN 0-08-032557-2 
In order to make this volume available as economically and as rapidly as possible the author's typescript lias been 
reproduced in its original form. This method unfortunately has its typographical limitations but it is hoped that 
they in no way distract the reader. 
Printed in Great Britain by A. Wheaton & Co. Ltd., Exeter 

COMPUTER AIDED DESIGN IN CONTROL AND 
ENGINEERING SYSTEMS 
Sponsored by: 
International Federation of Automatic Control (IFAC) 
IFAC Committee on Systems Engineering (SECOM) 
Co-sponsored by: 
IFAC Committee on Application (APCOM) 
IFAC Committee on Computers (COMPUT) 
IFAC Committee on Education (EDCOM) 
IFAC Committee on Economic & Management Systems (ENSCOM) 
IFAC Committee on Social Effects (SOC:EFF) 
IFAC Committee on Theory (THEORY) 
International Federation for Information Processing (IFIP) 
Institute of Electrical and Electronics Engineers (IEEE) 
Control System Society 
Denmark Section 
Organized by: 
The Danish Automation Society 
National Organizing Committee 
Ole Feddersen 
Niels Erik Hansen 
Mogens Kümmel (Chairman) 
Peer Martin Larsen 
J0rgen Pontoppidan 
Christoffer Svendsen 
Holger B. Thomasen (Secretary) 
International Programme Committee 
H. Akashi, Japan 
S. P. Bingulac, Yugoslavia 
A. van Cauwenberghe, Belgium 
Chen Zhen-Yu, China 
J. B. Cruz, USA 
M. Cuenod, Switzerland 
A. R. Curran, USA 
C. Foulard, France 
L. Fransson (IFIP), Sweden 
R. W. Gellie, Australia 
G. Guardabassi, Italy 
N. E. Hansen, Denmark 
R. Isermann, Germany 
Z. Kozar, Czechoslovakia 
P. Martin Larsen (Chairman), Denmark 
R. Lauber, Germany 
G. G. Leininger, USA 
L. Ljung, Sweden 
M. Mansour, Switzerland 
D. Q. Mayne, UK 
L. F. Pau, Switzerland 
M. Paul, Austria 
W. Schaufelberger, Switzerland 
H. Austin Spang, III Junior, USA 
B. Tamm, France 
A. Titli, France 
M. Wozny, USA 
K. J. Aström, Sweden 

PREFACE 
The object of the 3rd International IFAC Symposium on 
Computer aided Design in Control and Engineering Systems 
was to present and review the state of the art and the 
trends in development of Computer Aided Design of Control 
Systems (CADCS), techniques, procedures and concepts. 
The two preceeding symposia were held in Zürich, Switzer-
land, 1979, and in West Lafayette, USA, 1982. 
The 3rd symposium was held at the Technical University in 
Lyngby, Denmark, from July 31 to August 2, 1985. 264 par-
ticipants from 33 countries attended the symposium, where 
totally 11 papers were presented in 4 plenary sessions, 3 
special sessions, and 15 technical sessions. Addiditiona1 -
ly the program included a panel discussion on standardi-
zation of software. 
These Proceedings contain the text of 73 papers selected 
for publication of the Symposium Editors and a summary of 
the panel discussion. The papers are ordered alphabetical-
ly with respect to the first listed author within 15 sec-
tions corresponding to the headings of the symposium ses-
sions. An author index is included for^the convenience of 
the reader. 
The next symposium on the same subject is planned to take 
place in 1988 in Beijing, PRC. 
P. Mar t i n Lar sen 
N. E. Hansen 
VI 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
PLENARY PAPERS 
EXPERT SYSTEMS TECHNIQUES IN A 
COMPUTER-BASED CONTROL SYSTEM 
ANALYSIS AND DESIGN ENVIRONMENT 
J. D. Birdwell*, J. R. B. Cockett*, R. Heller*, R. W. Rochelle*, 
A. J. Laub**, M. Athans*** and L. Hatfield**** 
^Departments of Electrical Engineering and Computer Science, The University of 
Tennessee, Knoxville, TN 37996-2100, 
USA 
**Department of Electrical and Computer Engineering, 
The University of 
California, Santa Barbara, CA 93106, 
USA 
***Laboratory of Information and Decision Systems, Massachusetts institute of 
Technology, 35-406, 
Cambridge, MA 02139, 
USA 
****Lawrence Livermore National Laboratory, PO Box 5504, L-156, 
Livermore, 
CA 94550, 
USA 
Abstract. We explore the fusion of expert control system analysis and design tools 
into a prototype computer environment. The use of expert systems technology allows the 
transfer of recent developments in control system design to users who may not be 
experts in either theoretical developments or computer technology, in a vehicle which 
provides considerable design flexibility. The technology does not provide as general a 
framework as, for example, a command language based environment; however, in specific 
applications, such as system modeling and linear control systems, it is useful and 
appropriate. Criteria for such applications is that they have a mature theoretical 
basis, and that the user interaction influence the sequence of the design process. 
Keywords. Expert systems; computer-aided design; artificial intelligence; linear 
systems; computer-aided system design; natural languages. 
INTRODUCTION 
The interaction of two areas is examined: the 
development of knowledge-based systems, and the 
analysis and design of control systems. Our 
viewpoint is the result of work performed on the 
CASCADE (Computer-Aided Systems and Control 
Analysis and Design Environment) project, 
sponsored by the U. S. Department of Energy. 
The project attempts to generate new concepts in 
computer environments for the systems community by 
bringing together an interdisciplinary team of 
researchers from computer science, numerical 
analysis, and systems science. The emphasis of 
this project is the examination of ideas relevant 
to the development of computer-based aides for the 
systems community, rather than implementation of a 
specific design environment. The first phase of 
this project studied the issues which affect the 
design of a computer-based environment; this 
phase is summarized in Birdwell (1983a, 1983b, 
1984). In the past year, the majority of this 
effort has focused on the feasibility of using 
expert system technology to construct the user 
interface portion of a computer environment 
relevant to system engineers. Some of this effort 
was reported in Birdwell (1985). 
An expert system-based environment for aiding the 
analysis and design of control systems has two 
primary features: The environment must have solid 
numerical routines for the necessary calculations; 
it must also have knowledge of the design methods 
available, and be able to judge when and which to 
apply to the particular problem. It was clear 
early in the project that the area of system 
engineering to which the environment was to be 
applicable would be sharply limited; the area 
also had to be mature and well-defined to fit 
within the expert system framework. Linear 
multivariable control system design was chosen as 
the application area. In particular, the 
environment would emphasize the very recent 
results using the robust properties of the linear 
quadratic regulator or the Kaiman filter, and loop 
transfer recovery techniques. This methodology 
allows synthesis of multivariable control design 
which satisfy frequency domain constraints on 
robustness to unmodeled plant uncertainty, command 
following error limits or disturbance rejection, 
and closed loop bandwidth. 
To address this problem, it was proper to use an 
expert system which would sit over numerical and 
graphical routines and provide a knowledgeable 
interface to the application of these routines. A 
system written over Prolog (Clocksin (1981)) is 
being used as the knowledge interpreter; this 
paper describes how it is intended to work and the 
progress to date. 
There is a clear distinction in the design of a 
system which is concerned with highly numerical 
problems between the numerical calculations that 
the computer carries out and what the human wants 
to see. The human is concerned with general 
descriptions (is this greater than that; have I 
met my design specifications?), while often the 
major concern in performing the numerical 
calculations is to maintain the precision of the 
computation. Humans can quickly digest graphical 
and conceptual data; however, the precise 
numerical values which gave rise to these are 
often difficult to digest. Thus, particularly for 
1 

2 
J. D. Birdwell et al 
numerically-based casks, there is a serious 
requirement to provide a mechanism for translating 
the numerical calculations into human terms. 
This distinction gives rise to an important 
observation: If a human cannot handle large 
numbers of high precision numbers, there is no 
need for the machinery at the interface to 
particularly good at that task. The machinery at 
the interface needs to be good at the sorts of 
things humans are good at; for example, providing 
illustrative sketches and discussing concepts. 
This sort of task is matched by the abilities of 
workstations and the current wave of symbolic 
machines. 
This distinction implies the software for handling 
the interface could be on a different type of 
machine than that for handling the numerical 
calculations. There can be a physical division of 
labor: work-station versus work-horse. The types 
of task which the workstation needs to be capable 
at include: 
1. symbolic manipulations, 
2. graphical displays, and 
3. interactive computing, 
while the task that the work-horse needs to be 
good at is numerical calculations. 
In this environment, the role of the workstation 
is as a facilitator where the needs of a human can 
be handled adequately, rather than a place for 
major computation. The expert system task 
provides interaction with the user and arranges 
that the necessary programs be run and the results 
be appropriately presented to the user. Most 
important, the expert system must guide the user 
through the steps of a design. If possible, this 
should be done in a way which does not aggravate 
the experienced user, while allowing the 
inexperienced user to have every step explained 
and thus learn from the process. 
Finally, the expert system must not be so 
complicated to use that it requires a hefty 
manual; it must be able to explain itself. A 
user should be able to do something almost 
immediately, so that there is no lengthy learning 
cycle, and so the program can be self contained. 
The CASCADE prototype expert system was developed 
in DECIDE, which is an interface implemented in 
Prolog. It allows a problem solving method to be 
programmed in such a way that the computer can 
lead a user through a problem, while being 
tolerant of user typing errors and 
misunderstandings. At the same time, it is 
capable of explaining its actions and any terms it 
uses. 
The DECIDE system is based on a decision 
expression methodology, which allows a highly 
modular design of a knowledge base (Cockett 
(1983a, 1983b)). The knowledge is clustered into 
self-contained subtopics, each of which can be 
independently designed and implemented. The 
clusters are direct analogs of subroutines. 
GENERIC ENVIRONMENT 
The designs we investigated in the CASCADE project 
can be generalized into a structure for a generic 
computer environment for systems analysis and 
design. This environment is primarily a partition 
of the software into three distinct parts: The 
expert system; a command interpreter, which 
serves as an interface between the expert system 
and numeric or graphics software, and the numeric 
and graphics software. With the exception of the 
command interpreter, these functions will be 
available in any expert system-based environment; 
here, the emphasis is on a clean, well-defined 
partition. A diagram of this generic environment 
and its inceraction with the user and the computer 
resources is shown in Fig. 1. 
USER 
EXPERT SYSTEM 
COMMAND INTERFACE 
DRIVER PROGRAMS TO PERFORM SPECIFIC TASKS 
BASIC SUBROUTINE LIBRARY FOR NUMERICAL METHODS, GRAPHICS 
Fig. 1. Generic environment. 
There are valid reasons for separating the expert 
system from the remainder of the environment. 
First, the command interpreter and 
numeric/graphics software could be an existing 
software package. The expert system then assumes 
the primary functions of data organization and 
repository for a knowledge base which specifies 
how the software package is applied to specific 
problem classes. If the expert system generates 
commands to the package, over a defined interface, 
then little or no change is required in the 
existing code. 
Second, many artificial intelligence/expert system 
languages are not designed to efficiently 
manipulate numerical information in the quantity 
or accuracy required in a systems application. 
CProlog on the VAX is an example of this, where 
the floating point implementation is single 
precision. This requires the numeric, and 
possibly graphics, processing to be implemented in 
another language; the designer is then forced to 
provide an interface between the expert system 
environment and the computation environment. 
There are exceptions to this generalization, 
specifically, the Lisp Machine; however, one is 
still faced with the large amount of existing code 
written in other languages which is well-tested, 
and applicable to systems analysis and design. 
The command interpreter is required as an 
interface between the implementation language of 
the expert system (Prolog in our application) and 
numeric/graphics software (Fortran 77 and C). The 
alternative is to provide a direct linkage between 
the implementation language, which is usually an 
interpreter, and the remaining software. The 
feasibility of this is governed not onlv by the 
constraints of the machine environment (for 
example, VMS or UNIX), but also by the details of 
the expert system implementation language. We 
used CProlog, and avoided almost all modification 
of the prolog system. The single exception was 
the addition of a "system" function to CProlog, 
which allowed the expert system to spawn tasks to 
perform specific computations. 
The expert system/command interpreter interface 
can be implemented in a variety of ways. We 
experimented with two approaches, and some 
variants. The interface must provide two 
functions: commands to perform a specific task, 
and locations of any data which is required or 
will be generated. Thus, one interface is for the 
expert system to run a specific program, with data 
in named files. The program is expected to place 
results in a file which is mutually agreeable. 
This is the first interface we implemented, and is 
found in other packages. There are some reasons 
that this is not an ideal implementation; 

Expert Systems Techniques 
3 
notably, it is not efficient. For example, on a 
VAX using the VMS operating system, this requires 
spawning a process in which to run the program, 
and VMS has a significant overhead associated with 
task creation and termination. We experimented 
with a multi-tasking interface between the 
subsystems, with the expert system passing 
commands to the command interpreter through VMS 
mailboxes (the VMS analog of UNIX pipes). This is 
rather difficult to set up under VMS, due in part 
to the large number of file or device attributes, 
and rather easy under UNIX. 
We did learn a valuable rule in designing this 
interface; regardless of the manner in which the 
expert system/command interpreter interface is 
done, the expert system should be in complete 
control of the location of information. This is 
required if the expert system provides a mechanism 
for backtracking, or going back to a previous 
point in the design and allowing the user to 
choose a different path of decisions. When 
backtracking is performed, the expert system 
should avoid recomputation of information which 
has been previously obtained. The expert system 
associates the location of computational results 
with the information those results depend upon. 
If the command interpreter is forcing an arbitrary 
(to the expert system) naming convention for 
results, then it becomes very hard for the expert 
system to maintain these associations. For 
example, if the name for a particular result is 
derived from that of one input parameter, then if 
the expert system recomputes the results using a 
different set of input data which contains the 
same parameter value, the expert system must 
provide an ad hoc resolution of the duplicate 
output names. This could be done either by 
renaming an existing file, or destroying existing 
information and recomputing the information later 
if required. Either method is more difficult that 
forcing the command interface to rely on the 
expert system for all names. 
DEVELOPMENT TEAM 
The most difficult part of expert system 
development is the integration of expertise in the 
application area (systems analysis and design) 
with expertise in knowledge base design. This 
expertise can not generally reside in an 
individual due to the depth of knowledge required 
in both areas. The structure of the decision 
process must be designed by the systems analysis 
and design expert; however, that structure is 
influenced by the characteristics of the inference 
engine. 
Our solution was the formulation of a 
"meta-language" which was used for communications 
between the implementor of the inference engine 
and the systems engineer. The knowledge base was 
written in this meta-language, and its form was 
modified by the knowledge engineer. 
This was not completely satisfactory for a number 
of reasons. First, the inference engine DECIDE 
was so new that there was no mature knowledge 
engineer. This eventually forced the designer of 
the engine to devote most of his efforts to 
knowledge base development. Second, the 
understanding that the expert system was based on 
a type of decision tree methodology let the 
experts to produce a rather lengthy (and difficult 
to digest) manuscript. It was not until the 
knowledge engineer and the experts got together 
that it was discovered that there were fundamental 
symmetries (of which the expert was well aware) in 
the design technique. These could be heavily 
exploited to significantly reduce the knowledge 
base, and the knowledge engineering effort. 
Perhaps the major lesson from that experience is 
the importance of face-to-face discussions between 
the knowledge engineer and the expert. As with 
any computing language there will be different 
ways of approaching problems. The task of the 
knowledge engineer is to implement in the chosen 
language the subtleties of the knowledge. The 
eventual form may not be quite what the expert 
imagined nor indeed what the knowledge engineer 
expected. 
DETAILS 
In the following sections, we present an overview 
of some of the implementation details of the 
CASCADE prototype software. 
Purpose and Area of Application 
The prototype CASCADE provides a methodology for 
the design of multivariable linear control 
systems, using linear quadratic regulator (LQR) or 
Kalman-Bucy filter (KBF) designs to meet frequency 
domain measures of performance, and loop transfer 
recovery (LTR) techniques to preserve the 
performance characteristics in the full design. 
An overview of this design method is available in 
Doyle (1981). The primary criticism of the linear 
quadratic gaussian (LQG) methodology is that the 
cost functional which is being optimized and the 
noise characteristics which determine the filter 
design are unrealistic. This criticism is not 
valid for LQR/LTR or KBF/LTR designs. The 
selection of a controller is not based on an 
optimization problem; rather, the LQR or KBF 
algorithm is used as a vehicle to construct a 
design which satisfies frequency-based performance 
constraints. These constraints are intuitively 
satisfying, and are direct extensions of standard 
measures of performance used for 
single-input/single-output (SISO) compensator 
design (gain margin, closed loop bandwidth, 
disturbance rejection, command following error, 
robustness to plant perturbations). 
Theoretical Details 
We assume the plant for which we wish to construct 
a controller is a linear time-invariant (LTI) 
multi-input/multi-output system represented by the 
unknown transfer function G(s). The design 
problem is to find a controller of the structure 
given in Fig. 2 which satisfies a set of design 
constraints. We will discuss the characteristics 
of the design problem in three parts: The plant 
and plant model, the controller structure, and the 
performance criteria. 
COMMAND 
V 
INPUT 
^ 
) 
CONTROLLER 
SIGNAL 
REGULATOR 
ESTIMATE 
ERROR 
SIGNAL 
PLANT 
Fig. 2. The controller structure. 
The plant and plant model. We assume the designer 
has a model, GO, of the plant, which can be 
described in state-space form as a LTI system: 
x(t) 
J£(t) 
Ax(t) 
Cx(t) 
+ Bu(t) 
(1) 
(2) 
where x is the state vector and has dimension n, u 
is the input vector and has dimension m, and y^ is 

4 
J. D. Birdwell et al. 
the output vector and has dimension p. This is a 
general representation of a linear time-invariant 
(LTI) multi-input/multi-output (MIMO) system which 
has finite bandwidth. 
The design methodology assumes the accuracy with 
which the designer can represent the plant is high 
for low frequencies, and decreases monotonically 
with frequency. The error in the model's 
representation of the plant is modeled by a 
transfer function D(s): 
G(s) = G0(s)U + D(s)) or (I + D(s))G0(s) (3) 
The methodology assumes the designer knows some 
information about the uncertainties of his model, 
at either the input or the output of the plant, in 
the form of a frequency-dependent bound. 
II D(jw) II < h(w) for w > 0 
(4) 
The controller structure. The feedback controller 
can be decomposed into two parts, a filter, which 
is based on a nominal plant transfer function, and 
a regulator gain. This structure is sometimes 
referred to as a model-based controller (MBC). 
There are two free parameters of the controller 
design, as shown in Fig. 3: The regulator gain 
matrix G, and the filter gain matrix F. The 
design objective is to select these matrices so 
several frequency-domain performance criteria are 
satisfied; these will be developed in the next 
section. 
CONTROLLER 
PLANT 
Fig. 3. Closed-loop structure. 
Performance criteria. Three measures of 
performance are used to evaluate a MBC design: 
Robustness to unstructured perturbations in the 
plant dynamics, command following performance, and 
rejection of disturbance signals. Robustness is 
defined as the maximum bound h(w), such that for 
all perturbations in the plant dynamics D(s) which 
satisfy Eqn. (4), the closed-loop system is 
stable; it is developed in detail in Lehtomaki 
(1981) and Doyle (1981). 
Command following error is defined as the signal 
at node R in Fig. 3. Disturbance rejection is 
measured as the minimum attenuation along the path 
from d(s) to y(s). These concepts are developed 
fully in Safonov (1981). 
For this design methodology, the engineer must 
decide which performance measure is more 
important: command following error or disturbance 
rejection. Either performance measure is then 
traded off against the robustness measure in the 
design. 
These measures of performance are determined by 
the characteristics of the system return ratio, 
L(s), the return difference, I + L(s), or the 
inverse return difference, _I + L(s)**(-1), as in 
Safonov (1981). 
.Since the system is MIMO, the location of the 
break at which L(s) is calculated is significant. 
The design must be based on performance at either 
the input or the output of the plant. The choice 
of the point of analysis is made by the expert 
system, as described in the next section. The 
return ratio at the plant input, LI(s), is: 
LI(s) = K(Z{s)~l 
+ BK + FÇr^CZisjB. 
(5) 
where 
Z(s) = (si - A)" 1 
(6) 
The return ratio at the plant output, LO(s), is: 
LO(s) = ÇZ(s)BK(Z(s)_1 + BK + F C ) " ^ 
(7) 
The three performance measures are calculated from 
either LO or LI. The robustness performance 
measure is the minimum singular value of the 
inverse return difference transfer function. 
Either the input node or output node return ratio 
is used, depending on whether the plant 
uncertainty bound is known at the plant input or 
plant output, respectively. The command following 
error performance measure is the minimum singular 
value of the return difference transfer function. 
The input node return ratio must be used. The 
disturbance rejection performance measure is the 
minimum singular value of the return difference 
transfer function. The output node return ratio 
must be used. All MOP's are evaluated on the 
imaginary axis; details are in Laub (1979, 1981), 
and Klema (1980). 
Construction of performance constraints. For each 
design, two performance measures are used. We 
will assume the design is based on command 
following error and robustness measures in the 
following discussion; thus, the design is 
evaluated at the input node of the plant. The 
development using the disturbance rejection 
performance measure is similar. 
In CASCADE, constraints are divided into two 
classes: low and high frequency constraints. Low 
frequency constraints are specified as minimum 
values for the minimum singular value of the 
return difference for all frequencies below a 
specified frequency. These constraints correspond 
to a minimum allowable loop gain for the 
closed-loop system. High frequency constraints 
are specified as minimum values for the minimum 
singular value of the inverse return difference 
for all frequencies above a specified frequency. 
Each candidate design is evaluated against these 
constraints, and the expert system advises the 
user to make appropriate adjustments in design 
parameters if the design does not meet certain 
constraints. 
The design proceeds in two stages. The first 
stage creates either a LQR or a KBF design, 
depending on the node selected for analysis. This 
design is developed to satisfy the performance 
constraints, and may require some iteration. The 
second stage (LTR) uses the remaining component of 
the controller (filter or regulator) to force the 
return ratio of the closed-loop system to 
approximate the return ratio of the initial design 
(LQR or KBF). 
LQR/KBF design properties. The expert system uses 
the performance constraints to calculate a maximum 
desirable crossover frequency for the return ratio 
of the closed-loop design. It then performs 
either the regulator or the filter design based on 
information provided by the user about what type 
of performance measure is more important, whether 
or not there is a preference for either design, 

Expert Systems Techniques 
5 
whether sufficient information exists to construct 
either design, and the number of plant inputs and 
outputs. The regulator requires the design 
evaluation to be at the plant input node; the 
filter requires it to be at the plant output node. 
The regulator and filter design methods are 
symmetric; thus, the regulator-based design is 
developed here. A detailed development is given 
in Lehtomaki (1981). 
At this point, there is sufficient information to 
develop an initial LQR design. This design is 
evaluated by the expert system using the algorithm 
in Laub (1981), and calculating the gain margin by 
which the design satisfies the performance 
constraints. The minimum gain margin and the 
corresponding frequency for each measure of 
performance is calculated and provided to the user 
for evaluation. 
The regulator constructed in the first stage is 
evaluated using its return ratio. The return 
ratio of the regulator is equivalent to the return 
ratio of a closed-loop system consisting of the 
plant with full state observation and the 
regulator implementing full state feedback. The 
regulator's return ratio is the return ratio of 
the closed-loop system in Fig. 3, calculated at 
node R, and given by 
LR(s) = K Z ( S ) B 
(8) 
If a constraint is violated, the corresponding 
gain margin is negative. If all the constraints 
are satisfied, the expert system recommends 
proceeding to the next stage of the design, loop 
transfer recovery. If a constraint is violated, 
the expert system recommends an adjusted value for 
the parameter t and allows the user to iterate the 
design. Under certain conditions, the expert 
system recommends the system be balanced at high 
frequencies if it had been balanced at low 
frequencies. 
The first step in constructing the regulator is to 
"balance" the singular values of the return ratio 
of the LQR design at either low or high 
frequencies. This balancing operation causes the 
singular values in the selected frequency range to 
be approximately equal (equal in the limiting case 
as frequency tends toward either zero or 
infinity). The singular values are balanced by 
constructing a state weighting matrix with the 
following structure for the LQR cost functional: 
£ = ETP 
(9) 
where for high frequency balancing P is the least 
squares solution to the equation PB = I and for 
low frequency balancing it is the least squares 
solution to the equation BP = A. 
The choice of high or low frequency balancing is 
decided by the expert system, based on input from 
the user and an estimate of the width of the 
window of frequencies within which the crossover 
frequencies of the closed-loop system return ratio 
must lie. The expert system prefers to use low 
frequency balancing, since by equalizing the 
singular values at low frequencies, the command 
following error performance measure is maximized. 
If, however, the window for the crossover 
frequencies is narrow, then it may be easier to 
satisfy all the performance criteria by using high 
frequency balancing, since the singular values 
near the crossover frequency are grouped more 
closely. In CASCADE, the threshold for using high 
frequency balancing is a window which spans less 
than a factor of four in frequency. This is a 
heuristic test. 
Given the matrix from the balancing procedure, if 
the control weighting matrix parameter required by 
the LQR design is set to R = tl, then the maximum 
crossover frequency of a singular value of the 
return ratio of the regulator system, LR(s), is 
approximately 
wcmax = σ 
(PB)//t 
max — 
(10) 
An important property of this LQR design is that 
near the crossover frequencies of the singular 
values a plot of either the maximum or minimum 
singular value versus frequency has a slope of 
approximately -20dB/decade. This property allows 
a rough approximation of the minimum crossover 
frequency required to satisfy the low frequency 
constraints and the maximum crossover frequency 
which will allow the high frequency constraints to 
be satisfied. The expert system uses this to set 
a desired value for the maximum crossover 
frequency, and solves for the parameter t. 
The singular value and gain margin information is 
presented to the user both numerically and 
graphically. The user can select views of the 
minimum and maximum singular values of the return 
ratio, return difference, and inverse return 
difference versus frequency. The constraints 
which are appropriate for each graph are displayed 
with the singular value curves. A sample plot of 
the return ratio singular values is shown in 
Fig. 4. 
min and «ax singular values for G(jw) 
T 90 
FILE:new.lqr 
Fig. 4. Singular value plot of return ratio. 
Recovery of the LQR/KBF design properties. The 
objective of stage one of the design process is to 
satisfy the performance criteria using only a 
regulator or filter design. These properties 
exist at either node R or node F in the system. 
The objective of stage two of the design process 
is to construct the remainder of the controller 
loop such that the properties of the system 
evaluated at node I (0) approximate those at node 
R (F). If this approximation is sufficiently 
close, then the final design will satisfy the 
performance criteria. 
The loop transfer recovery (LTR) procedure only 
works if the plant has no non-minimum phase zeros 
"near" the bandwidth of the initial design. Note 
that non-minimum phase zeros represent a 
fundamental limitation on system performance, and 
are not a limitation of this design methodology. 
Neglecting this limitation sacrifices the 
robustness properties of the controller. 
The regulator return ratio can be recovered at the 
plant output node, 0, given that the plant is 
minimum phase over a suitable frequency range and 
that the plant has at least as many outputs as 
inputs, by constructing a Kaiman filter using 
specific noise covariance matrices parametized by 
a positive number, q, As q goes to infinity, the 
return ratio at the plant output node approaches 
the return ratio of the regulator design 

6 
J. D. Birdwell et al. 
pointwise. Thus, for a sufficiently large q, 
closed-loop system satisfies the performance 
constraints. 
the 
The loop transfer recovery stage in the expert 
system is implemented as an iterative design, 
where q is increased until the performance 
constraints are satisfied. Tests are made against 
the performance constraints at each stage, rather 
than against the original design, since the 
objective is to satisfy the constraints rather 
than to approximate the regulator design. 
Each design is evaluated using the same procedure 
as is used for the regulator and filter designs. 
When the user and expert system agree that the 
design is satisfactory, the expert system 
concludes that the design process is finished and 
exits. The information describing the controller 
is available in files specified by the expert 
system. 
Developing the Knowledge Base 
A decision which the system must make early in the 
design is whether to design the regulator or the 
filter first. An expert in the area can determine 
the answer to this question by knowledge of which 
performance measures have the highest priority and 
what information he has about the model. There 
are two questions which an expert system must 
evaluate: Which performance measures are most 
important, and does sufficient information exist 
to perform the preferred design? 
As an example of CASCADE, we will describe how 
this knowledge was encoded. The first step for 
the knowledge engineer was to discover that this 
was the intent of the expert through discussion. 
Next, we produced a diagram of the decision 
process (Fig. 5). This diagram was translated 
into the code for the DECIDE system, given in 
Fig. 6. 
decision about whether the user has enough 
information to do this design. If the user does 
not have sufficient information for either design, 
the system replies it cannot help; this is the 
significance of the "other" answer in Figs. 5 and 
6. 
Deciding whether there is enough information to do 
a regulator or a filter design can in turn be 
broken down. There is a symmetry between having 
enough to do a regulator or a filter design; 
thus, it is possible to parametize the decision 
process according to which design method the user 
wishes to follow. 
The user has enough information to do a regulator 
design if he knows either a minimum permissible 
bandwidth or bounds on the command following 
error, and if he knows either a maximum 
permissible bandwidth or bounds on the plant 
uncertainties. It is important to note that if he 
has bounds, he also may have calculated his 
permissible bandwidth. The explicit bounds, 
however, are much more useful to the system not 
only to determine the quality of the eventual 
design, but also as if only the bandwidth limits 
are known, the system takes some liberties with 
theory. Thus, if the user knows bounds, the 
expert system should elicit them from him; it 
must thus ask first about whether he knows bounds. 
The form of the decision logic is given in Fig. 7. 
The DECIDE input for this logic is given in 
Fig. 8. 
freq bnd(minimum,R_F) 
yes 
clp_fq(minimum) 
freq_bnd(maximum,R__F) 
clp_fq(maximum) 
regulator_or_filter? 
y 
\ 
regulator 
filter 
/ 
\ 
enough_for(regulator)? 
enouqh_for(fi1 ter)? 
/ \ 
r\ 
yes 
no 
yes 
no 
/ 
\ 
/ 
\ 
REGULATOR 
enough_for(fi1 ter)? 
FILTER 
enouqh_for(requlato 
/ 
\ 
/""\ ' 
/ 
\ 
/ 
\ 
REGULATOR 
oth< 
FILTER 
other 
Fig. 5. Top level of regulator or filter decision. 
Fig. 7. Decision if enough information exists. 
enough__for(R_H):> 
freq_bnds(minimum,R_H): 
[ enough_ 1 ( R_H ) «yes, enough_2 ( R_H ) « n o ]. 
enough_1(R_H):= freq_bnds(max imum,R_H): 
[ < : yes«yes, enough_3 ( R_H ) « n o ]. 
enough_2(R_H):=clp_fq(minimum): 
[ enough_ 1 ( R_H ) «yes, < : no«no ]. 
choose_reg_or_filter(equal):> 
reg_or_f il ter : [ choose 1 «regulator, 
choose2«filter, 
choose 1 «conf lict ]. 
choose 1 :=enough_for(regulator): 
[ < : regulator«yes, choose 11 « n o ]. 
choose 11:=enough_for(filter): 
[ < : f ilter«yes, other«no ]. 
choose2:= enough_for(filter): 
[ < : f ilter«yes, choose22«no ]. 
choose22:= enough_for(régula tor): 
[ < : regulator«yes,other«no ]. 
Fig. 6. Top level DECIDE knowledge base. 
The code in Fig. 6 breaks down the decision to do 
a regulator or filter design into deciding which 
design is wanted, followed by the pragmatic 
enough_3(R_H):=clp_fq(maximum): 
[ < : yes«yes, < : no«no ]. 
Fig. 8. Enough_for DECIDE knowledge base. 
The DECIDE language allows one to explicitly 
determine the order in which the interaction 
proceeds. This distinguishes it from the rule 
base approach where the control is implicit. This 
has both advantages and disadvantages: The 
principal disadvantage is that the designer must 
explicitly program the order. The advantage of 
having total control over decision ordering can be 
considerable in some applications. 
Each of the decisions which Figs. 6 and 8 are 
making is a knowledge cluster. It is determined 
by its "governing decision"; for example, in 
Fig. 8, this is whether one has enough for a 
regulator or a filter design. In the DECIDE 
system each cluster may be held as a separate 
file, which is called into memory only for as long 
as it is needed. In a large expert system this 

Expert Systems Techniques 
7 
means that one can focus the expert system on the 
current problems very effectively. This also has 
the significant advantage that the knowledge base 
is extremely modular. A knowledge cluster can be 
altered independently of others provided the 
interface, determined by the governing question, 
is not altered. In rule based approaches 
modularity is often difficult to achieve. 
Just as subroutines can be parametized, so can 
knowledge clusters. This means they can be called 
recursively provided their context changes. The 
DECIDE system automatically responds to decisions 
which have already been made with the same 
response as before. This means if the recursive 
call is to work, some parameter in the call must 
be altered. This facility can introduce complex 
behavior, and is extensively used in the latter 
part of the CASCADE knowledge base to implement 
the iterative design steps. 
Initially, to debug the system the text is omitted 
from the decision processes. Once the form of the 
interaction is satisfactory, the text is added. 
Text can be associated with each node in the 
decision tree; in this case, each node will 
result in an interaction with the user. 
Alternatively, one can associate a process with a 
node. For example, an external program could be 
run, or a file could be read. In this example, 
each node will have associated text. 
The DECIDE system has a text generation system 
which knows about simple English language 
constructions and questions. It can change the 
tense and sense of a sentence so that it can be 
used in an explanation or as a question. The 
facility relies heavily on the definite clause 
grammar rules of Prolog (Pereira (1980)), which 
provide a convenient method of text generation. 
The basic structure of the sentence Is specified 
to DECIDE using a slots grammar system (McCord 
(1982)), which then manipulates it into the forms 
it needs. For example, the following valiants: 
"What do you want to design first regulator 
or filter?" 
"You want to design the regulator first." 
"You want to design the filter first." 
are all generated from the specification: 
tx_gen(reg_or_filter,T,q([regulator,filter], 
w(obj,X,cl(subj,design,[subj: you,obj:d X, 
adv:first],i(want,T))))). 
while the following variants 
"Do you have enough information to do a 
regulator design?" 
"You have enough information to do a filter 
design." 
"You did not have enough information to do a 
regulator design." 
are all generated from the specification: 
tx gen ( enough__f or ( R_F ), q ( yesno, cl ( sub j, have, 
Tsubj:you,obj:d np(information, 
[adj enough,'to do':a np(design, 
[adj R_F])])],T))). 
Notice in the last case how the decision node 
parametization can be used to parametize the text 
itself. This is one of the advantages of text 
generation, as complex changes in text can be 
effected by the parameters. This can dramatically 
reduce the size of the knowledge base. It also 
closely couples the text and the underlying logic, 
which means that subsequent alterations to the 
logic will not result in inappropriate text. The 
disadvantage is that the knowledge engineer must 
carefully structure the knowledge, right down to 
the wording of the questions. 
The following text is an interaction from CASCADE 
which covers the interaction discussed above. The 
DECIDE system can explain its actions. The prompt 
to CASCADE reflects the state of the expert system 
and the availability of detail or default values. 
A "(?)-" prompt signifies that a more detailed 
interaction is available, while the prompt ff(d)-" 
indicates there is a default. The response 
"<ESC>?" (which is shown as "$?") forces the 
DECIDE system to either take a default or go into 
detail. The "<ESC>" character actually signals 
that the user is responding to the DECIDE system 
as opposed to the CASCADE knowledge base. DECIDE 
has a number of other facilities available 
including glossaries, explanations, and backing 
up. The "(s)-" prompt means that one is talking 
to the DECIDE system. It occurs in particular 
when a conclusion is reached and the system wants 
to know whether the user agrees. It is also a 
change to find out how the system has reached its 
conclusion; note the use of how in this 
interaction. Often it is a point where a user 
will backtrack in the interaction to correct a 
mistake. 
We are going to attempt to apply the LTR design 
procedure to your control problem. 
What is the name of the file containing the system 
description? 
(?)-new.sys 
Your control problem has an equal number of inputs 
and outputs. 
(s)-how 
I read the value of the number of states, number 
of inputs and number of outputs from new.sys and I 
found that the number of inputs equals the number 
of outputs which led me to conclude: 
Your control problem has an equal number of inputs 
and outputs. 
(s)-
What do you want to design first the regulator or 
filter? 
(?)-$? 
In the design either the command following or the 
noise performance characteristics are traded 
against robustness to plant perturbations. If the 
filter is designed first then the regulator design 
will be used to approximate the filter 
characteristics of the original design. In this 
case the regulator poles may be faster than 
desired. If the regulator is designed first the 
converse problem arises.. 
Is command following error performance more 
important than closedloop system noise 
performance? 
(d)-yes 
In your application is it important to minimize 
the effect of system noise on the plant output? 
( )-yes 
( yes ) 
You want to design the both first as you have a 
conflicting requirement! I suggest you design the 
regulator first. 
(si-
Do you have enough information to do a regulator 
design? 
(?)-$? 
Can you specify bounds on the command following 
error response as a function of frequency? 
( )-y 
Can you specify bounds on the multiplicative plant 
uncertainties at the plant input as a function of 
frequency? 

8 
J. D. Birdwell et al. 
( )-n 
( no ) 
Can you specify a maximum permissible bandwidth 
for the closed loop system? 
( )-yes 
You have enough information to do a regulator 
design. 
(s)-
The regulator will be designed first. 
(s)-
CONCLUSIONS 
A successful application of expert systems 
technology to user interface design requires 
maturity of the knowledge base. This removes many 
of the research-oriented application areas of 
computer aided design environments from 
consideration. The existence of a knowledge base 
which drives the analysis/design process requires 
that the knowledge base be applicable to all 
potential problems without modification. This 
introduces the second requirement: The 
capabilities of the expert system-based 
environment must be sharply defined and limited to 
those applications to which the knowledge base is 
clearly applicable. 
At the present time, a design structure which 
provides a division of labor between the expert 
system/inference engine and the computational 
component is desirable. The existence of this 
interface allows the expert system implementation 
to concentrate on the symbolic computation without 
adding the complexity, and the possibility of 
errors, which a low-level linkage represents. We 
found this division also allowed a clearer 
perception of the numeric data required for 
decision-making, as opposed to the much larger set 
of data which was associated with the numeric 
computations. Last, the division is a natural 
framework for the future exploration of 
distributed computation, with hardware specialized 
to each task. 
ACKNOWLEDGMENTS 
This research was funded by the U. S. Department 
of Energy, Division of Electric Energy Systems, as 
part of the Systems Engineering for Power research 
program. The project was managed at Oak Ridge 
National Laboratory, operated by Martin Marietta 
Energy Systems, Inc. for the U. S. Department of 
Energy under contract no. DE-AC05-840R21400. 
Work was performed at Oak Ridge National 
Laboratory and under subcontract 7685 S13 at the 
University of Tennessee, under subcontract 
11X-39024V to M. Athans, under subcontract 
11X-39060V to A. J. Laub, and under subcontract 
12X-43107V at Lawrence Livermore National 
Laboratory. 
REFERENCES 
Birdwell, J. D. (1983a). Future directions in 
computer-aided control system design software 
development. IEEE Control System Magazine, 2, 
11-14. 
Birdwell, J. D., S. A. Bly, and A. J. Laub 
(1983b). The DOE/EES/ORNL CACSD development 
effort: an overview, (abstract) CACSD '83: 
IEEE Control Systems Society Symposium on 
Computer-Aided Control System Design. 
Birdwell, J. D., M. Athans, S. A. Bly, 
J. R. B. Cockett, M. T. Heath, R. W. Heller, 
C. J. Herget, A. J. Laub, R. W. Rochelle, 
J. P. Stovall, R. Strunce (1984). Issues in 
the Design of a Computer-Aided Systems and 
Control Analysis and Design Environment, 
ORNL/TM-9038. Oak Ridge National Laboratory, 
Oak Ridge, TN. 
Birdwell, J. D., M. Athans, S. A. Bly, 
J. R. B. Cockett, L. Hatfield, M. T. Heath, 
R. W. Heller, A. J. Laub, R. W. Rochelle, 
J. P. Stovall, B. Cabrai, G. Chen, K. Fung, 
S. Heard, C. McCullough, A. Mak (1985). 
CASCADE: experiments in the development of 
knowledge-based computer-aided systems and 
control analysis and design 
environments, (abstract) IEEE Control Systems 
Society 2nd Symposium on Computer-Aided 
Control System Design (CACSD). 
Clocksin, W. F., and C. S. Mellish (1981). 
Programming in Prolog. Springer-Verlag, New 
York. 
Cockett, J. R. B. (1983a). File Handling for 
Detail, Extent and Sub-Tasks in the 
Implementation of Decision Processes, 
Tech. Rpt. CS-83-5^ Dept. of Comp. Sei., 
Univ. Tennessee, Knoxville, TN. 
Cockett, J. R. B. (1983b). The Theory of Discrete 
Decision Processes, Tech. Rpt. CS-83-57. 
Dept. of Comp. Sei., Univ. Tennessee, 
Knoxville, TN. 
Davis, R., B. Buchanan, and E. Shortcliffe (1977). 
Production rules as a respresentation for a 
knowledge based consultation program. 
Artificial Intelligence, 8, 15-45. 
Doyle, J. C , and G. Stein (1981). Multivariable 
feedback design: Concepts for a 
classical/modern synthesis. IEEE 
Trans. Auto. Control, 26, 4-16. 
Hayes-Roth, F., D. A. Waterman, and D. B. Lenat, 
(Eds.) (1983). Building Expert Systems. 
Addison-Wesley, Reading, MA. 
Klema V., and A. J. Laub (1980). The singular 
value decomposition: 
Its computation and some 
applications. IEEE Trans. Auto. Control, 25, 
164-176. 
Laub, A. J. (1979). An inequality and some 
computations related to robust stability of 
linear dynamic systems. IEEE 
Trans. Auto. Control, 24, 318-320. 
Laub, A. J. (1981). Efficient multivariable 
frequency response computations. IEEE 
Trans. Auto. Control, 26, 407-408. 
Lehtomaki, N., N. Sandell, and M. Athans (1981). 
Robustness results in LQG based multivariable 
control designs. IEEE Trans. Auto. Control, 
26, 75-93. 
McCord, M. C. (1982). Using slots and modifiers 
in logic grammars for natural language. 
Artificial Intelligence, J8, 327-367. 
Michie, D. (ed.) (1982). Introductory Readings in 
Expert Systems. Gordon and Breach, New York. 
Pereira, F., and D. H. D. Warren (1980). 
Definite clause grammars for language 
analysis—a survey of the formalism and a 
comparison with augmented transition networks. 
Artificial Intelligence, VJ, 237-278. 
Safonov, M. G., A. J. Laub, and G. L. Hartmann 
(1981). Feedback properties of multivariable 
systems: The role and use of the return 
difference matrix. IEEE Trans. Auto. Control, 
26, 47-65. 
Weiss, S. M., and C. A. Kulikowaski (1984). A 
Practical Guide to Designing Expert Systems. 
Rowman and Allanheld. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
DECISION AIDS FOR THE MANAGEMENT 
OF LARGE NON-JOB SHOP TYPE 
MANUFACTURING SYSTEMS 
M. G. Singh 
Control Systems Centre, UMIST, PO Box 88, Manchester M60 1QD, UK 
Abstract. In this paper we examine the problems of management and control of large scale multi-
product multi-line batch manufacturing outside the mechanical engineering industries. The main 
examples of such non-job shop type manufacturing arises in the making of frequently purchased pro-
ducts e.g. small consumer goods, processed foods, cigarettes, candy, etc. The decision making 
problems which arise in such systems are extremely complex and the decision support tools for 
helping management at various levels could be of significant advantage in improving the producti-
vity of such businesses. This paper describes a number of decision support tools which could be 
used at the different levels of the production hierarchy. 
The production hierarchy in virtually all manufacturing can be conveniently divided into 4 levels 
each of which is characterised by a significantly different time scale from that of the other 
levels. At the highest level, the time horizon of interest is 1 to 5 years and the decision 
making is of a strategic nature. At the next level down where the time horizon of interest is 
from 1-2 months to 1 year, the decision making is operational/tactical. The third level down 
concentrates on issues of production planning and scheduling and its horizon of interest varies 
from 1 hour to about 20 weeks. The lowest level deals with disturbances occurring over a very 
short horizon (a few seconds to about 1 hour) and at this level, most of the decision making is 
automatic (PID controllers, optimal control, self tuning regulators, etc.). Each higher level 
provides performance targets for the next level down. 
In this paper we examine the main issues which arise at the top three levels in the hierarchy and 
describe some decision support tools which have been developed by the author and others. At the 
top two levels the tools are designed to cope with the issues of competition whilst at the lower 
level (production planning and scheduling) the problems of allocating tasks to limited resources 
in the most cost effective way are addressed. Overall, we show how improved efficiency at each 
level can lead to significant improvements in productivity. 
Keywords. Manufacturing systems for frequently purchased products, strategic decision making, 
operational and tactical decision making, production planning and scheduling. 
INTRODUCTION 
In the first part of this century, production sys-
tems were rationalised through the use of dedicated 
production lines. Immense economies of scale were 
achieved in the mechanical engineering industries 
(particularly in manufacture of automobiles) through 
the installation of high volume dedicated production 
lines. Unfortunately, these systems become unecon-
omic for lower volumes and this led the drive to-
wards standardisation of products. The Information 
age is in the process of shifting the push towards 
standardisation since with the advent of flexible 
manufacturing systems, low unit costs can be achie-
ved with medium volume production and in principle, 
even with low volume production. This is being 
achieved by the introduction of several nondedicat-
ed machines which can perform different functions 
on different parts and which are interconnected to-
gether through an automated transportation system. 
At the present time, flexible manufacturing systems 
are virtually exclusively confined to the mechanical 
engineering industries. However, even outside these 
industries, there is much scope for improving the 
productivity of manufacturing by more non-dedicated 
usage of plants. Thus even in the manufacture of 
small consumer goods like detergents, chocolates, 
cornflakes, toothpaste, etc, it should be possible 
to build non-dedicated units for production or pack-
ing which can be cleaned and/or re-set as the unit 
is used for making or packing a product different 
from the one which is currently being made. From 
a straight design point of view, it certainly makes 
sense to have a substantial number of non-dedicated 
manufacturing units since a typical consumer goods 
plant outside the mechanical engineering industry 
(i.e. a non-job shop type plant) will have a desig-
ned life of about 30 years and in that period mar-
ket forces would have ensured that the plant manu-
factures a different range of products from the ones 
that it was originally designed for. The desire of 
the managers of consumer goods companies to go down 
this path enthusiastically has been tempered to a 
large extent by the preceived difficulty in manag-
ing and controlling such large non-job type plants 
since very little attention has so far been paid to 
development of the appropriate management and con-
trol hardware and software tools. It has also be-
come clear that the problems of management and con-
trol of such multi-product multi-line batch manufac-
turing plants are different from those of job shop 
type plants where most of the current research eff-
ort is going. Thus, it is not possible to await 
the resolution of the problems in flexible manufac-
turing and a subsequent transfer of the know-how 
and tools to non-job shop type plants. 
In this paper we describe the problems which arise 
in such systems and give an overview of the compu-
terised decision support tools which have been de-
veloped or are being developed for the management 

10 
M. G. Singh 
and control of such plants. 
HIERARCHIES IN THE MANAGEMENT OF NON-JOB 
SHOP TYPE PLANTS 
The essential problem for consumer goods manufacture 
as for any other business is to maximise profits. 
In the present context, this implies the manufacture 
and sale of the range of products being manufactured 
by the non-job shop type plant. There are many 
times scales over which planning scheduling and con-
trol decisions need to be taken and computerised de-
cision support tools are desirable for each level of 
the hierarchy. 
The highest level decisions are long term or strate-
gic decisions. Typical examples are those of capa-
city expansion or contraction, achievement of a lar-
ger market share through improvements of brand image, 
pricing policies, etc. Strategic decision making is 
invariably done over a long time horizon (several 
years) and usually requires capital expenditure or 
redeployment. 
The next level down is concerned with operational 
decision making in a competitive environment. In the 
small consumer goods sector, in most countries of 
the world there are only 4-5 major companies which 
dominate the market. Since most of the goods being 
manufactured can only be sold through intermediaries 
(supermarkets, hypermarkets and other retail out-
lets) who are also very concentrated, the decision 
making at this level is on pricing, advertising, etc. 
in order to obtain competitively substantial shelf-
space from the retailers. The time horizon of in-
terest here varies from about one month to about one 
year. 
At the next level down, the problem is one of pro-
duction planning and scheduling where one attempts 
to operate and schedule the manufacturing plant 
hour by hour with a view to meeting the market de-
mand in the most cost effective way. The time ho-
rizon of interest here is between one hour and 
about 10 weeks. 
At the lowest level, we do not consider the whole 
factory but rather the individual manufacturing 
units and the objective is to run each unit as 
efficiently as possible. The horizon of interest 
here is therefore a few seconds to about an hour 
and most of the units at this level have automatic 
control (P.I.D. controllers, self-tuning regulators, 
multivariable control, etc.). 
Figure 1 shows the various levels of the manufactur-
ing hierarchy. There is a significant amount of 
interaction between the levels of this hierarchy. 
In general each higher level decision provides a 
goal for the next level down. 
In what follows, we will describe the main decision 
problems faced at the top three of the levels of 
the hierarchy in Fig. 1 and give an overview of the 
decision tools which have been developed or need to 
be developed. 
DECISION SUPPORT SYSTEMS FOR STRATEGIC 
DECISION MAKING 
[I] 
Level 1 
Level 2 
Strategic Decision Making 
(capacity expansion or contraction, 
market share improvement, brand 
image improvement, etc.) 
Time scale: 1-5 years 
Operational Decision Making in 
Competitive Environments (pricing 
policies to achieve high shelf 
space, advertising policy, etc.) 
Time scale: 1 month - 1 year 
Level 3 
Production Planning and Scheduling 
(To run the manufacturing plant 
hour by hour with a view to meeting 
orders and forecasted market demand 
in a cost effective way). 
Time scale: 1 hour to 10-20 weeks 
Level 4 
-st 
jid\ 
Control of individual production units 
minute by minute in order to have 
efficient operation. 
Time scale: 1 minute to 1 hour 
Fig. 1 Manufacturing System Hierarchy 
the company's macroeconomic, competitive, technolo-
gical and factor supply environments. 
In the last three decades, a number of tools have 
been developed for strategic planning in companies. 
The principal tools are: 
Experience Curves 
Growth/Share Matrix 
Shell Screen/General Electric/McKinsey approach 
Product life cycle 
the PIMS data base 
Competitive Analysis 
Of these, the Competitive Analysis framework of M. 
Porter of Harvard Business School [2] provides the 
most attractive approach to strategy formulation 
since it recognises explicitly that the strategy of 
a firm must take into account the potential reac-
tions of competitors. Competition here is not limi-
ted to the direct competitors who provide the same 
goods or services as the subject firm but it also 
includes the Supplier Groups, Buyer Groups, new en-
trants and potential substitutes as shown in Fig. 2. 
Thus the competitive position of the subject firm is 
governed at any point in time by the balance of the 
forces shown in Fig. 2, together with the company's 
own internal skills at satisfying the market. 
POTENTIAL 
ENTRANTS 
Bargaining power 
of suppliers 
Threat of 
new entrants 
INDUSTRY 
COMPETITORS 
Rivalry among 
Existing firms 
1 SUBS1 
Bargaining power 
of buyers 
Threat of 
substitute products 
or services 
Strategic decision making is usually done at a very 
senior level within a company (Board or near Board 
level). At this level, most of the factors which 
need to be weighed up are qualitative and very few 
decision support tools exist. 
Strategic decision making for a firm is essentially 
concerned with the selection of business strategies 
which will enable management to achieve its long 
term objectives based on limited information about 
Fig. 2 Fundamental Determinants of Industry 
Competition 
Although the framework developed by Porter is an 
extremely attractive one, it has many limitations. 
The main difficulty lies in the fact that only des-
criptive checklists emerge as a result of the analy-
sis. Since the strategy of an enterprise involves 
taking costly decisions which often affect, in a 
negative way the bottom line in any year, and may 

Decision Aids for Management 
11 
in many cases affect the very survival of the firm, 
it is important to be able to quantify the effects 
of the different options. This is particularly di-
fficult to do in competitive situations since one's 
competitors will inevitably respond to one's strat-
egic moves, thus, in many cases negating one's eff-
ort or making it more costly. 
We see that competition is one of the key dimensions 
which marketing managers of manufacturing companies 
must take into account when they make decisions on 
pricing, advertising, shelf space allocation, etc. 
in the area of frequently purchased products which 
are manufactured in non-job shop type plants. The 
competitive aspects become even more important when 
strategic decisions are taken on, for example, ca-
pacity expansion or contraction, vertical integra-
tion, etc. Up to now, most decision making of this 
kind has relied on the skill and experience of the 
managers concerned. Given the complexity of the 
environment within which such decision making takes 
place, it is not surprising that there is consider-
able scepticism amongst senior managers about the 
use of mathematical models as an aid since it is 
generally believed that there are many judgemental 
factors where managerial "gut-feel" which has not 
been modelled far outweighs the components which are 
amenable to modelling. Clearly, what is required, 
is a framework which allows the manager to "paint" 
his own view of the world which incorporates both 
the "Hard" information wbich is available to the 
manager as well as the "Gut feel" information. The 
framework could then be manipulated in order to act 
as a decision aid. 
In the area of competitive decision making, the 
"hard" information is the information available a-
bout one's own company e.g. the level of efficiency 
of production, brand image, sales, costs, etc. The 
"soft" or "gut feel" information is the information 
about similar parameters for the competing companies 
i.e. whether a competitor has equivalent manufactur-
ing efficiency, better marketing ability and simi-
lar considerations of this kind affecting his over-
all performance and profits. 
In order to incorporate both the "Hard" and the "Gut 
feel" information, it is necessary to have /"3,47 
(1) A Shell which constitutes the knowledge base 
(2) A mechanism for knowledge acquisition in order 
to parametrise the Shell, and 
(3) A mechanism (Inference Engine) for helping in 
decision making after the Shell has been suit-
ably parameterised. 
The "Shell" must be sufficiently general to enable 
us to organise a wide range of "hard" and "soft" in-
formation for the class of applications for which 
the system is to be used. 
In Fig. 3 we show a competitive marketing situation 
where a number of competing manufacturers make a 
product which they sell through a number of compet-
ing retail chains. Each of the managers of the man-
ufacturing companies needs not only to take into 
account the direct competition from other manufac-
turers but also how to play off the Retailers among-
st themselves in order to gain an advantage for their 
direct competition with other manufacturers. Simi-
larly, buyers from Retail companies need to take in-
to account their own direct competition when they 
negotiate prices, shelf spaces, etc. for the prod-
ucts of the manufacturers. This is an immensely 
complicated situation, subsets of which have been 
studied in various guises for many years. For ex-
ample, Helmy et al [5] considered the subset which 
lumped the manufacturer level into one and the re-
tailer level into one and analysed the resulting 
vertical marketing structures. Balderston [6] ex-
amined the optimal entry of new members in marketing 
Consumers 
Fig. 3 
channel networks whilst Corstjens et al./7; and Zus-
man et al [8] considered strategic decision making 
aspects in marketing channels. In all this work 
and in the more recent papers of Arnold et al [9] 
and Singh et al [XO], the basic "Shell" which was 
used was "static" i.e. all decision making was assu-
med to take place at a particular point in time so 
that longer term decisions could only be represented 
as "snap shots" at different points in time. 
Although such static shells are useful in that they 
do lead to efficient decision support tools as shown 
by "Mark-opt" /Ί0; which has been made into a com-
mercial product and is being used by a number of or-
ganisations. However, since the shell within which 
competition is studied is purely static, it is un-
able to take into account a number of important real 
world aspects of this problem which the managers 
taking the ultimate decisions cannot afford to ig-
nore. The main factors which a more advanced sys-
tem than "Mark-opt" should try and take into account 
are: 
(1) The Dynamics of Stocks: 
Since the "Shell" in previous systems /"5-107 is sta-
tic, it is not possible to incorporate the dynamic 
behaviour of the stocks kept by each manufacturer 
and each retailer since these systems can only ex-
amine a particular point in time and not a conti-
mum of time points. 
2. 
Reactions Over Time: 
It is important to keep in mind that negotiations 
between manufacturers and retailers are not one 
shot deals but rather a part of an on-going process. 
Thus systems which only consider decision making at 
a particular point in time are unable to take into 
account the importance of maintaining good channel 
relationships over a time horizon. 
3. 
Strategic Decision Making and Scenario 
Analysis 
Strategic decision making by definition considers 
a time horizon as opposed to a particular point in 
time and here again, even though one could go some 
way towards taking sensible strategic decisions by 
considering different time "snap shots", it is more 
attractive to consider the time contimum and to ex-
amine decisions over a time horizon. 
In [1] we examined a dynamic Shell and appropriate 
dynamic decision making mechanisms for the class of 
marketing channel systems shown in Fig. 3. Since 
the dynamic decision problem in marketing channel 
systems is at least an order of magnitude more com-
plicated than the corresponding static problem, we 
considered only a system which comprised 2 manufac-
turers in competition who sell to 2 retailers who 
are in competition as shown in Fig. 4. 
It is conceptually quite easy to extend the channel 
structure to more than two manufacturers and more 
than two retailers although at the expense of sig-
nificant additional computation. 
In [I], 
the dynamic decision support tool for 

12 
M. G. Singh 
Manufacturer 
1 
I 
Manufacturer 
2 
Retailer 
i 1 _ 
IX 
! Consumers 
I Retailer 
i 
2 
Fig. 4 
stratégie decision making which is described has 
the following structure: 
(a) A "Shell" or a knowledge base with Causal mod-
els. Each of the models represents the profit 
maximising behaviour of a manufacturer/retai-
ler in the form of an objective function with 
a summation over time subject to difference 
equation constraints. 
(b) A knowledge acquisition mechanism which marries 
"hard" information with managerial gut feel in-
formation and uses parameter estimation tech-
niques to parameterise the "Shell". 
(c) An Inference Engine which computes the Nash 
equilibrium of the game between the profit max-
imising players described in (a) for the parti-
cular situation described in (b). 
In [I], a number of interesting strategic decision 
making scenarios have been analysed with this tool. 
Next, we describe the operational decision making 
level. 
DECISION SUPPORT SYSTEMS FOR OPERATIONAL 
DECISION MAKING 
At the operational decision making level, the time 
horizon of interest is much smaller (1 month to 1 
year). Here the issues of competition are still 
quite important since in successful companies, this 
level needs to be closely tuned to the needs of the 
market place. In the area of frequently purchased 
products which are manufactured in non-job shop type 
plants, it is important to be able to market them 
through the 4-5 major retail chains which exist in 
each country since this is the only real outlet for 
such manufacturing. This problem is similar to the 
one discussed in section 3 except that in this case, 
the issues of importance are the shorter term ones 
i.e. negotiations with retailers, allocating of mar-
keting budgets, etc. 
For the negotiation problem, the system "Mark-opt" 
which was mentioned in section 3 may prove quite 
useful as a decision support tool. We will there-
fore start by describing the intelligent knowledge 
based system "Mark-opt". 
Mark-opt 
/~9,107 
"Mark-opt" is a software suite which provides a de-
cision support capability in a key area of market-
ing i.e. the negotiation process between manufac-
turers and retailers. In any negotiation, it is of 
great importance to understand the imperatives of 
the person you are negotiating with. "Mark-opt" 
allows the negotiator to feed in all the information 
that he has about his own company, that about the 
company he is negotiating with, information about 
his own company's competitors as well as that on the 
competitors of the company he is negotiating with as 
well as information about the market. From all this 
information, Mark-opt allows the user to calculate 
various scenarios e.g. where the Retailers respond 
quickly to each other's competitive price moves, or 
where one Manufacturer optimises whilst the others 
don't or where all others optimise as well. 
"Mark-opt" can also be used as a short horizon stra-
tegic marketing tool. Some of the more interesting 
strategic scenarios where "Mark-opt" can be used in-
clude : 
pricing policies for white label and own label 
products from the point of view of a manufac-
turer as well as from that of a retailer 
marketing strategies for manufacturers with 
poor brand image: trade-offs between brand 
image improvement (through advertising, ReD, 
etc.) against improvements in manufacturing 
efficiency. 
use of optimisation where the competitors are 
not doing so. 
the impact on the profitability of all manufac-
turers and retailers if a single manufacturer 
raises or lowers his prices by a small amount. 
For manufacturers, it is possible to calculate safe 
negotiating ranges which might not invite retalia-
tion from competitors but which nevertheless yield 
reasonable profits. For Retailers, Mark-opt enables 
them to obtain better margins and calculate their 
best shelf space allocation for the brands of diff-
erent manufacturers so as to maximise total profits. 
This description is not only a valid one for prod-
ucts sold through supermarkets and hypermarkets but 
it could also be used to describe the selling of 
any product which is sold through intermediaries 
before reaching the end user. 
The problem of competition between manufacturers has 
been considered in the mathematical economics lit-
erature as has the problem of vertical integration. 
However, the whole system above has never been con-
sidered mathematically since it was thought to be an 
unsolvable problem. Arnold. Singh and Corstjens [9 
107 recently provided the first solution ever of 
this hitherto unsolved problem in marketing and 
"Mark-opt" incorporates their basic method as ex-
tended to the case of multiple manufacturers and 
multiple retailers. 
"Mark-opt" takes into account the manufacturers cos-
ts (including economies of scale), the retailers 
costs (fixed plus variable) as well as the percep-
tion of the consumers about the brands of different 
manufacturers, etc. 
Figure 5 shows the structure of the system being 
considered. 
1 Manufacturer 
L1 
\. ^ 
1 
^ -
Retailer 1 
^ 
Manufacturer 
2 
- ^ 
\l 
/ ^ 
i 
Retailer 2 h 
-^^ \ ' ^^ 
Consumers 
Ss 
Manufacturer 
10 
I 
^ 1 , 
Retailer 11 
Fig. 5 
The Shell. The Shell of "Mark-opt" is a set of 
mathematical models, one for each manufacturer and 
for each retailer. These models comprise a set of 
non-linear algebraic equations or inequalities. To 
represent the competitive aspects, each manufactu-
rer/retailer has an objective function which is to 

Decision Aids for Management 
13 
maximise profits. Thus the Shell comprises in this 
case a set of interacting optimisation problems. 
Knowledge Acquisition. Knowledge Acquisition in 
"Mark-opt" involves the fitting of parametric val-
ues into the mathematical models of each manufac-
turer/retailer in the Shell. Since the system 
"Mark-opt" will most likely be used by a manufac-
turer, the process of knowledge acquisition starts 
by the manufacturer feeding in "hard" information 
about his own production costs, economies of scale, 
brand image (as represented by price elasticity, 
shelf space elasticity, etc.). Next, the user 
feeds in "Gut feel" information about the competing 
manufacturers (Is their manufacturing as efficient 
as ours? Is their brand considered better or worse 
than ours by the consumers? etc.) and the retailers 
(Are they all equally efficient, etc.). These two 
kinds of information are integrated into the Shell 
in order to provide the framework for Scenario Ana-
lysis. 
Inference Engine. The Inference Engine in "Mark-
opt" allows one to examine various scenarios where 
the manufacturers/retailers respond to each other's 
moves by maximising their profits in each situation. 
The mathematical framework of interest here is 
Game Theory" and essentially, the Inference Engine 
in "Mark-opt" has, at its heart, a mechanism for 
finding Nash Equilibria of various Gaming situa-
tions amongst different players. 
Other decision making problems at this level are 
essentially concerned with the allocation of limi-
ted resources in the most profitable way e.g. sales 
force allocation, advertising budget allocation, 
etc. 
For such problems, an Intelligent Knowledge Based 
System called "Retail-opt" /"117 has been developed. 
This system uses, in the same way as the systems 
described above, and in the section entitled 
"Mark-opt /"9,10J, a combination of "hard" informa-
tion and "gut feel" information. The Shell or 
knowledge base here has also causal maximising mo-
dels represented by a set of non-linear polynomial 
equations and linear profit functions. The Infer-
ence Engine is an appropriate optimisation algo-
rithm. 
Both the systems "Mark-opt" and "Retail-opt" are 
being used by a number of industrial companies. 
Finally, we describe the production planning and 
scheduling level. 
PRODUCTION PLANNING AND SCHEDULING 
Production planning and scheduling needs to cope 
with events over a much smaller time horizon than 
the ones considered in sections 3 and 4. Here the 
basic system is shown in Fig. 6 and the objective 
is to provide help to plant managers to run the 
plants so as to meet the market demand over a med-
ium term horizon (up to about 20 weeks) whilst us-
ing the flexibility inherent in the non-dedicated 
nature of some or all of the production and packing 
units. At the same time, since perturbations occur 
over fairly short periods of time (a worker sick, 
a machine out of order, etc.), it is important for 
the scheduler to be able to provide "work to" lists 
going down possibly to hour by hour. 
For many such plants, orders may exist for the next 
2-3 weeks and a reasonable forecast may be avail-
able of the demand over the longer horizon of 3 to 
20 weeks. In these plants, demand is typically 
"lumpy" i.e. there may be periods when demand (in 
terms of orders to be met) is below capacity and 
others when it is far in excess of capacity. The 
plants need to cope with this lumpy demand in the 
raw material 
streams 
Batch 
Processing 
n 
product 
streams 
Warehouses 
n 
products 
Intermediate 
Storage 
Packaging 
1 n1 
lines 
Markets 
Fig. 6 
most cost effective way by weighing up the cost of 
work in progress and inventories against the lost 
production due to changeovers. 
At this level, the amount of judgemental aspects as 
opposed to modelisable aspects is quite different 
from the two upper levels i.e. here one can use much 
better models. The difficulty is that with a samp-
ling interval of 1 hour and a time horizon of inte-
rest of say 10-20 weeks, the optimisation problem 
which one can formulate for operating these plants 
in the most cost effective way often ends up with 
several million constraints, and several hundred 
thousand variables, many of which are integer valued 
(i.e. production unit/packing unit on/off, ready to 
come on/ready to go off, etc. ) There are no techni-
ques available at the present time for solving mixed 
integer nonlinear programs of such high dimension. 
One way of getting around this has been pioneered by 
ICI PLC and commercialised in the decision support 
system "Barnett" [\2]. 
Essentially, the horizon of 
interest is broken down into a Short Horizon and a 
Long Horizon. The Short Horizon and the Long Hori-
zon schedulers are partly rule based and they do not 
take into account longer term demand than that spe-
cified by the existing orders. No optimisation is 
done. 
Another approach which is more novel has been deve-
loped by the author and his collaborators whilst 
working with a major consumer goods manufacturer. 
This approach involves the use of a 3 level struc-
ture as shown in Fig. 7. Here levels 1 and 2 form 
a distributed knowledge based system comprising an 
expert system each for production, intermediate sto-
rage and packing with a coordinator at level 2. 
These 2 levels solve the Short Horizon (2 weeks) 
scheduling problem using artificial intelligence 
techniques whilst at the 3rd level, a mathematical 
optimisation problem is solved with an aggregated 
set of constraints and from which the optimal lot 
sizes for each item are fed to level 2. The result-
ing structure provides an extremely attractive and 
efficient approach to tackling these very difficult 
and important problems. The approach has been succ-
essfully used on the data bases of several plants to 
provide attractive near optimal schedules. 
Thus, for production planning and scheduling for 
such non-job shop type plants, useful computerised 
decision tools are beginning to emerge although much 
still remains to be done. 
CONCLUSIONS 
In this paper we have described the major decision 
making problems which arise within manufacturing 
hierarchies where frequently purchased products are 
being produced. Since such products need to be sold 
via a small number of retail chains, the problems 
at the top two levels of the hierarchy concentrate 
on competitive analysis within marketing channels. 
At the highest level where strategic decision mak-
ing takes place, we have described a decision supp-
ort system which uses a differential game framework. 
For the operational/tactical level, a static game 
framework which seeks Nash Equilibria as a part of 

14 
M. G. Singh 
Aggregated 
constraints 
LONG HORIZON 
SCHEDULER based on 
Mathematical 
optimisation 
Aggregation 
Mechanisms 
Lot size 
ψ of item i 
SHORT HORIZON 
SCHEDULER based on 
A.I. Techniques 
COORDINATOR 
EXPERT SYSTEM 
Expert system 
with its own 
data base for 
the scheduling 
of production 
Expert system 
with its own 
data base for 
the scheduling 
of intermediate 
storage 
Expert system 
with its own 
data base for 
the scheduling 
of packing 
lines 
Fig. 7 
Scenario Analysis has been outlined. A tool for 
allocation decisions was also mentioned. Finally, 
the problems of production planning and scheduling 
for non-job shop type plants have been described 
and some of the work going on in industry in this 
area has been highlighted. 
REFERENCES 
1. Ambrosiadou, V. and M.G. Singh (1985). A deci-
sion support system for strategic decision mak-
ing in marketing channels using a differential 
games framework. CSC Report No. 631. Submitt-
ed for publication. 
2. Porter, M. (1980). Competitive strategy: tech-
niques for analysing industries and competitors, 
Free Press, NY. 
3. Singh, M. G. and R. Cook (1985). A new class 
of intelligent knowledge based systems with an 
optimisation based inference engine. CSC Re-
port No. 629. Submitted for publication. 
4. Singh, M. G. (1985). 
Decision support systems 
for marketing and retailing. Invited plenary 
paper for the US PD Conference on Expert Sys-
tems and Decision Support Systems, Washington, 
DC. April. 
5. Helmy, H., Baligh L. and L.E. Richards (1984). 
An Analysis of Vertical Marketing Structures. 
Managemet Science, Vol. 10, No. 4, July. 
6. F.E. Balderston (1958). Communication Networks 
in Intermediate Markets. Management Science, 
Vol. 4, January. 
7. Corstjens M. and P. Doyle (1979). Channel Op-
timisation in Complex Marketing Systems. 
Management Science, Vol. 25, No. 10, October. 
8. Zushan, P. and M. Etgar (1981). The Marketing 
Channel in an Equilibrium Set of Contracts. 
Management Science, Vol. 27, No. 3, March. 
9. Arnold, J., Singh M.G. and M. Corstjens (1984). 
A Decision Support System for Marketing. LSS, 
Vol. 4, 2. 
10. Singh, M. G., Bhondi J. and M, Corstjens. 
"Mark-opt": a decision support system for 
marketing. IEEE Trans SMC, 1985 (in the press) 
Manchester, U.K., 198',. 
12. "Barnet", 1^1 PL(J, Kuncom, U.K., 1984. 
11. "Retail-opt" User Manual, Control Sciences Ltd. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
PANEL DISCUSSION REPORT 
STANDARDIZATION OF SOFTWARE 
FOR CACSD 
Panel Discussion 
Chai rman: Mohamed Mansour 
Swiss Federal Institute of Technology (ETH), 
Zurich, Switzerland 
Members : Derek P. Atherton 
University of Sussex, Brighton, U.K. 
Michel A. FLoyd 
Integrated Systems Inc., Palo Alto, California USA 
Hartmut Hensel 
Technische Hochschule Darmstadt, FRG 
Magnus RimvaLL 
Swiss Federal Institute of Technology [ETH), 
Zurich, Switzerland 
Keywords: CAD, Software, Standardization 
INTRODUCTION 
1. PROGRAMMING LANGUAGES 
The aim of this discussion is to point out 
roughly 
what kind of standardizations can be made to CACSD 
software and how can this be realized. Hopefully at 
the end of the discussion we can find a way 
inside 
IFAC to begin work in this direction. 
During the last decade, a Large number of CACSD 
packages have been developed at different universi-
ties and in the industry. These 
programs/packages 
are often very specific, unflexible, unhandy 
in 
their man-machine interfaces, or are constructed to 
meet special requirements of the hardware or the 
operatinhg system software (HenseL). In the follow-
ing, standardization in the following areas are 
adressed. 
1. Programming languages 
2. Simulation languages 
3. General purpose operating systems 
4. Graphical software 
5. Modelling and design data bases 
6. User interfaces 
7. Data format standardization 
8. Interfaces to numerical algorithms 
The introduction of new powerful programming 
lan-
guages like PASCAL, MODULA-2 and ADA may facilitate 
the wide use of some program packages due to the 
transparent program-structures, the high level por-
tability and the computer independent user-surfaces. 
However the acceptance of these new 
Languages is 
rather poor due to the excessive effort spent on 
programs written in the old Languages (HenseL). To 
counteract 
the increase 
in Language confusion 
(Fortran, Ada, Modula, Pascal, ProLog, Lisp ... 
etc.) a command language standard and a data formal 
standard for the exchange of data between different 
control packages is necessary (RimvaLL). 
2. SIMULATION LANGUAGES 
Atherton points out that simulation is the core of 
a CACSD package. The system 
description 
software 
should be closely linked to a simuLation 
language. 
Some simuLation languages allow 
Linearized models 
to be produced, although in general one can see the 
need for other forms of reduction of the simuLation 
model. Floyd also considers simuLation as the core 
of a CACSD package and therefore there is a need 
for a standardization of dynamic data 
representa-
tion. 
15 

16 
M. Mansour 
Hensel sees that there is a large number of simula-
tion languages for continuous as well as discrete 
systems. Standardization in this area should reduce 
their number and support the development of a few 
more general simulation Languages. 
Rimvall considers the CSSL'67 standard to be a step 
in this direction. The development 
of simulation 
languages after this standard is typical and should 
encourage standardization in the area of CACSD. 
However, to avoid duplication of work, any standard-
ization group in CADSD software should work in 
close conjunction with the standardization group 
within the simulation community (IMACS and SCS). 
3. GENERAL PURPOSE OPERATING SYSTEMS 
The most promising candidate for standardization of 
general purpose operating systems is the UNIX-
system which offers a computer-family 
independent 
operating system surface and programming 
environ-
ment. Major drawbacks of this operating system are 
the rather slow system 
reaction performance, the 
large variety of extensions to the basic standard 
and the absence of a good 
reaL time capability 
(Hensel). Floyd gave UNIX as an example how standar-
dization has failed in the area of opeating systems, 
which would likely be the case also in CACSD. 
4. GRAPHICAL SOFTWARE 
One very popular representative of graphical 
soft-
ware which already became ISO-norm is the graphical 
kernel system (GKS). It offers a uniform user data 
interface which is almost 
completely 
independent 
from the installed hardware 
(achieved by writing 
special drivers for each connected 
device). The 
GKS-system offers different capability 
Levels so 
that the system can be tuned with 
respect to the 
used device (Hensel). Atherton states that the prob-
lem is greatly compounded when moving software to 
the new generation of powerful workstations with 
colour graphics, multiple windows etc. 
5. MODELING AND DESIGN DATA BASES 
In control engineering 
the engineer's design is 
eventually transformed into real-time controL soft-
ware or hardware. The key to the Long term 
success 
of CACSD lies in the automation of the reaL-time 
programming process, the critical software compo-
nent will be the design data base.(FLoyd) A fully 
evolved database should be able to describe any 
dynamic model. The component library should include 
linear, nonlinear and logical elements. Discrete-
time attributes such as sampling 
rates 
(including 
multiple rates) and delays must be clearly defined. 
A complete data base can provide accurate and reli-
able communication among controL engineer and real 
time developers. Floyd gives as example 
"System 
Build" used by MATRIX-x. 
Atherton also states that entering the description 
of the system is the starting point for standardiza-
tion. Any package must be capable of accepting the 
complete system description, which can presumably 
include nonlinear and possibLy 
time varying ele-
ments, using several possible techniques and be 
able to convert between them (state space, transfer 
function, connection statements, block diagrams, 
signal flow graphs). The files holding the system 
description data of the appropriate form should 
then be readable directly 
into analytical design 
routines. Obviously it should also be easy to make 
changes to the system description, either because 
errors have been made during the entry or for the 
purpose of studying 
the behaviour 
for different 
parameter sets. 
6. USERS INTERFACES 
This is the part of CACSD package which is visible 
to the user. Floyd states that the design of user 
interface for CACSD software is fairly 
subjective 
and can not be subject to standardization. Standard-
ization of the user interface would only 
stifle 
creativity in one of the most rapidly 
evolving 
areas in computer 
science. On the other hand 
Rimvall sees that a standard 
interactive 
command-
Language is needed to enable the exchange of macros 
and to unify 
the user interfaces of different 
packages. Such a standard can and should be de-
scribed consistently using a set of "BNF"-produc-
tions for the syntax with textual additions for the 
semantic details. Any standard on this Level will 
be hard to enforce on already 
existing packages, 
but is Likely to be fol Lowed by any new packages. 
Hensel sees that the dialog interface (at its pro-
gram end] must be standardized in order to achieve 
simple structuring of diaLogs during the program 
development phase. The diaLog itself should be uni-
form and easy to Learn. In the case of command or 
menue-technique an automatic adaptation of help 
features dependent on the user's advancement can be 
very convenient. A future aspect to be considered 
might be how to change the man-machine to a man-

Standardization of Software for CACSD 
model-communication, which allows the user to 
work 
directly on a model-base without the need of 
using 
related system data. This 
would 
also 
reduce 
the 
required Level of abstraction. Athertons 
considers 
the standardization of 
user 
interface 
mainly 
in 
view of the standardization of 
system 
description 
as mentioned before under 5. 
7. DATA FORMAT STANDARDIZATION 
A standard data format (supporting all common con-
trol structures) for the exchange of data between 
different control packages over external 
files is 
very much needed. Such a standard is easy to en-
force: each program can have several 
input/output 
modes, one such mode can support the standard while 
the other modes are Left as they are (Rimvall). 
8. INTERFACES TO NUMERICAL ALGORITHMS 
Floyd states that standardization of numerical al-
gorithms would be difficult to achieve in a non 
commercial environment. However, Rimvall sees the 
possibility to specify how the algorithm is to be 
accessed interactively. This facilitates the ex-
change of algorithms 
between different CACSD-
packages, but also couples the subprogram 
standar-
dization 
with the interactive 
command-Language 
standardization, and is not totally 
free from 
implementation 
restrictions 
(e.g. the supported 
data structures of the implementation language and 
target machine limitations]. 
CONCLUSIONS 
The discussion in the session has shown that there 
is a necessity to standardize some aspects of the 
software for CACSD, mainly in the man-machine and 
program-program interface area. It was felt that 
IFAC should establish a working group in this area. 
The organizer of the session has already 
taken 
steps in this direction and it is hoped that soon 
there will be a result of the efforts in this 
di rection. 
M. Mansour 
17 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN IN CONTROL EDUCATION 
CAD FOR EDUCATION OF DIGITAL 
CONTROL SYSTEMS 
K. Furuta 
Tokyo Institute of Technology, Oh-Okayama, Meguro-ku, Tokyo, Japan 
Abstract 
This paper is concerned with the use of CAD for the eduction of the modern 
control theory and of the digital control. 
It is pointed out that the theory can only 
be understood through its use in practice, and the control system design of the experi-
mental apparatus is found one of such practices, where the analysis and design of control 
system should be done by the help of CAD. 
CAD developed by the authors and the control 
of experimental apparatus are briefly described. 
Keywords 
CAD, multivariable control, digital control, education 
INTRODUCTION 
The computer usage has become inevitable not only 
as the digital controller but also as the means to 
assist the design and analysis of multivariable 
control systems. 
In the controller synthesis based 
on the classical control theory, the identification 
of the plant by the frequency response and its re-
presentation by Bode deagram can derive the optimum 
parameter of commercially available PID controller. 
However if one wishes to design the control system 
based on the modern control theory, he has to know 
the wide spectrum of the complex multivariable 
control theory from the identification theory to the 
optimal control including the observer. 
And in 
order to get all of these knowledge, one has to read 
through many text books or papers. 
Therefore 
leymen can not learn the theory by themselves through 
text books in spite that it looks effective, and 
they murmur that the classical control theory is more 
useful than the modern one, since modern one is too 
theoretical. 
But from the theoretical point of 
view, the so-called classical control theory is 
using as well complex theory as the modern one. 
The difference is that in the classical theory, they 
use theory practically without paying attention to 
the proofs, but in the modern theory, they are lost 
themselves in the maze of the theorems and proofs. 
To overcome this problem the wide spectrum of modern 
multivariable control theory should be educated 
from the view point of how to be used in design of 
control system including its realization by the 
digital computer. 
For this purpose, instead of text books, the compu-
ter aided design program package is much useful to 
be used to educate the control system design, where 
the computer is used to provide appropriate informa-
tion such as computational algorithms and to store 
the data. 
Thus by the help of CAD, the control 
system design from the parameter identification to 
the control system design can be done easily. 
But the structure of the designed control system 
is not simple and it can be only realized by the 
digital computer. 
The last step has been most 
difficult and time consuming. 
But control engi-
neers should be educated from the design of control 
systems to its implementation. 
Therefore at 
suthor's laboratory, as thesis projects, the design 
of controllers and its realization have been done 
using CAD developed by author's groupe) for the 
experimental apparatus, such as 
i) 
double inverted pendulum^) 
Ü ) 
iii) 
iv) 
v) 
vi) 
vii) 
triple inverted pendulum 3) 
swing up of single pendulum 4) 
magnetic levitated iron plate5) 
radio control helicopter") 
industrial furnace') 
linear motion mechanism 'and 
viii) manipulator"). 
They will be described briefly. 
The temperature 
control of the industrial furnace has been done for 
the manufacturing of magnet wire and it is now used 
practically. 
Through these projects it is conclu-
ded that not only the design and analysis but also 
the implementation should also be assisted by the 
computer and this kind of system should be called 
the computer aided control (CAD). 
BRIEF DESCRIPTION OF DPACS 
The computer aided program package named DPACS has 
been developed by the author's group, which can 
assist to design and to analyze the multivariable 
control system by providing the programs of algori-
thms and by handling the systems data. 
The systems 
treated in this CAD are linear multivariable systems 
in the forms of state space equation, transfer func-
tion, and input-output data, can be either conti-
nuous or discrete. 
Systems data are stored in the 
database with the system's name, and can be utilized 
by its name. 
DPACS is used interactively through 
command from the console. 
The command consists of 
the program name and the system name to be treated 
such as 
OPT SYS 1, 
which is interpreted by the supervisor that the 
optimal control law for the system named SYS 1 
should be calculated. 
Sometimes another system 
name is added so that the resultant system data 
given by the pragram is stored by the name. 
Parameters and specifications in the algorithm for 
the pragram are set in the question & answer way. 
The conversation example using DPACS is shown in 
Fig.l, where the system named EXAM is stored in the 
transfer function form and minimally realized in 
the state space. 
The list of commands which pro-
vide algorithms is given Table 1. 
DPACS consists 
of program package of several levels such as matrix 
calculation (MAT), time series processing (TS) and 
system data processing (SYS). 
They are also used 
interactively and the matrix data are handelled in 
DPACS. 
So even new algorithm which is not 
included in DPACS is to be executed. 
When control system is designed and its data are 
19 

20 
K. Furuta 
FURUTP LP8. Df»PCS CREU.23 
/OPflCS^ 191 3*33 
avsiN EXPM 
SPECIFV TVPE OF SVSTEMDPTP : T 
TO INPUT SVSTEMORTP 
CONTINUOUS OR DISCRETE TVPE ? CC OR 0 3 » C 
SPECIFV NO. OF INPUTS ft OUTPUTS : 1.1 
<13 DENOniNPTOR ft NUMERPTOR COEFFICIENT MPTRICIES 
<23 DENOniNPTOR POLINOMIPL ft NUMERPTOR POLINOMIPL MPTRIX 
C33 RPTIONPL POLINOniPL nPTRIX 
SPECIFV INPUT-MODE : 3 
G C l . O - 
S2«-2S*3<'<S-M3C2S2+3S-M3 
TVF»E THE RPTIONPL POLVNOMIPL MPTRIX ? N 
REUISE THE RPTIONPL POLYNOMIALS ? N 
EPSILON FOR COMPILPTION » 
ID-IB 
GIUE COMPIENT μα„ &VSTEMDPT* t EXPMPLE FOR TFRC 
'OPRCS' 191 2« 33 
C M R ^ T Ε Χ Ρ Π 
TO 08TPIN CPNONICPL MINIMPL RERLI2PTI0N 
UMICM PPIR IN niNinPL REPLIZPTXON IS TRANSFORMED 
INTO CPNONICPL FORM. CI 3 CP.8> OR C23 CP.C3 "» » 1 
SPECIFV TVPE OF CPNONICPL FOR« CI OR 23 : 1 
GIUE EPSILON. TO OETERMINE RPNK OF MPTRIX U3 
EPS - 10-18 
COLUMN INOEPENOENCV OF MPTRIX U3 IS INUESTIGPTEO 
< 1 5 
1 
< 23 
1 
C 33 
1 
( 4 3 
a 
CONDITION NUMBERS PRE PS FOLLOUS 
< 4. 13 MPTRIX CNUM 
< I> 
( i ) 
ι.ββββββββο β 
C 23 6. 1237-2436D -1 
< 33 3.7ai26112D -I 
C 43 6.680614 190-23 
CMPNGE THE EPSILON ? N 
GtUE COMMENT FOR SVSTEMOPTP : EXPMPLE FOR IFPC -2 
«OT»RCS>· 19* 4* 2 
LIST EXPM 
CONTINUOUS SVSTEM 
1) EXPM.ra 
c 
2) EXPM.Se 
< 
EXPM 
33 
33 
< 1. 
îSVSIN 
;CMR 
13 
< ly 9'83> 
< \y 9X833 
* EXPMPLE 
t EXPMPLE 
Fig.l Conversation example of the DPACS 
ITSLWAl 
ISYSDATÛ) 
IMATD4M 
Fig.2 Relation between DPACS and CACOS 
(CACOSQ 
Orignal ^ExecuteRCOR 
Fig.3 
Flow chart of CACOS to generate real time 
control code 
C13 System and Systemdata Management 
LIST 
; to list systems or systemdatas 
DELETE 
; to delete systems or systemdatas 
RENAME 
; to rename system name 
PROTECT ; to protect or unprotect systems 
SVSIN 
; to input systemdata 
T V PE 
'· 
to type out systemdata 
REUISE 
; to revise systemdata 
COPV 
' to copy systemdata 
P I CK 
;
 to transform coordinate of input and 
output space 
DUAL 
ï to obtain dual system 
C23 Systemdata Transfi 
COOD 
CMR 
MRKU 
DIF 
DIGIT 
CONT 
arma t ion 
to transform coordinate of state space 
to obtain canonical minimal realization 
to obtain transfer function 
to obtain Markov parameters 
to obtin defferential 
[difference] 
equa t ion 
to make I/O data 
realizat ion 
to digitize continuous system 
to transform coordinate of dicrete 
space to continual space 
C3] System Analysis 
P° L E 
' to calculate system's poles 
ZERO 
î to calculate system's zeros 
CCCO 
; to investigate controllability or 
observabi1i ty 
RDCT 
j to execute model reduction 
EMR 
; to calculât 
epsiIon 
C4] Controller Synthe 
PLOC 
OPT 
DCPL 
OBS 
TRACK 
MFS 
OSU 
OSUU 
! to solve pole assignment problem 
! to solve optimal regulator problem 
! to solve decoupling problem 
i to obtain observer or Kaiman filter 
! to solve tracking problem 
ï to solve model following servo problem 
! to solve optimal servo problem 
! to solve optimal servo problem Caugument system] 
C5] Simulation 
LINK 
: to link systems 
CLPS 
s to obtain closed systei 
SMLT 
; to s 
te Syst 
s response 
QLS 
CML 
SML 
LI 
C63 Frequency Domain 
NVQST 
j to drau Nyquist or inverse Nyquist 
d iagram 
BODE 
; to drau Bode diagram 
LOCI 
; to drau root locus 
BAND 
; to drau Gershgorin's band or inverse 
Gershgorin's band 
i?l 
PIPACK 
«Identification) 
J to identify system by generalized 
least square method 
5 to identify system by conditional 
maximum likelihood method 
! to execute CML for symmetric transfer 
funct ion 
î to identify system by limited 
information maximum likelihood method 
Table 1 List of DPACS command 
store in the database, it should be realized by the 
computer. 
To assist the software construction of 
this real time digital control system, the computer 
aided control (CAC) named CACOS 1^ has been develo-
ped, which shares database with DPACS as shown in 
Fig.2. 
The controller realized by CACOS has the 
form 
x(k+l) = Ax(k) + Bu(k) 
y(k) = Cx(k) + Du(k) 
Us. PLANT 
(AÄCsDs) 
-à 
f&DÂ 
CPU 
Yc r =C z +D u . 
c c c c q 
lz =A z +B u 
LUC 
^ y ^ J t 
3 
COMMAND 
<3
K e y i n 
Fig.4 Structure of controller given by CACOS 

CAD for Education 
21 
where all multiplications by zero are eliminated and 
the program written by p-code is generated by the 
flow chart shown in Fig.3. 
The digital controller designed by CACOS has the 
structure of Fig.4 and the functions of 
1) control of systems 
2) logging input-output data and 
3) to input the reference signals 
in the on-line mode, and of 
1) saving and loading the parameters from/to DISK 
2) dumping TS data, and 
3) typing out parameters 
By the combination of DPACS and CACOS, the design and 
not only thesis projects but also industrial proble-
ms have been treated by the system. 
CONTROL EXAMPLES 
At author's laboratory, the control of experimental 
apparatus has been as thesis projects mainly by the 
help of CAD. 
These examples are briefly discussed 
in this section. 
Control of Double Inverted Pendulum2^ 
The control of a double inverted pendulum is one of 
most excellent examples to convince the power of 
control to laymen and beginners of control theory. 
Many students are excited by the stable balancing of 
a double inverted pendulum. 
The control system is 
shown in Fig.5. 
Attitude Control of Triple Inverted Pendulum^ 
Instead using balancing cart, torques are applied to 
hinges of triple inverted pendulum, where the lowest 
hinge is free for rotation. 
Its attitude can be 
controlled in the balancing condition as shown in 
Photo 2. 
Swing-up of Single Pendulum' ,«> 
Single pendulum is swing up from the stable condi-
tion to the upright unstable inverted position. 
And at the upright position, it is stabilized by 
using state feedback using observer. 
Control of Magnetic Lévitation" 5) 
Photo 1. Control of double inverted pendulum to 
disturbance 
Iron plates connected by plastic bar are levitated 
by two magnets. 
The position and angle are contro-
lled as shown in Photo 3. 
Control of RC Helicopter 6) 
Photo 2. Attitude control of a triple inverted 
Pendulum 
RC helicopter is known as one of most unstable obje-
cts and if it can be controlled well, it can be used 
for the survey in the dangerous circumstance. 
The 
satisfactory dynamic model of an RC helicopter, how-
ever, is not established. 
So the modelling and its 
evaluation have been done by using an electrically 
PTR 
[ T T Y 
CPU NOVA 1200 
32 KW MEMORY 
; , 
1 
/ A 
X-Y RECORDER 
X-Y SCOPE 
- — 
( 
\%\ 
1 1 A 
*ö 
1 
< 
j l 
M ) 
3 W 
MP 1 
pend 2yO 
0μυΐ3 
yVPendl 
\/AcarX 
2W- v ^ 
Fig.5 Computer control system for the double 
inverted pendulum 
Phto 3. Swing up of a single inverted pendulum 
Photo 4. Cor.tro of positions of levitated iron 
plates 

22 
K. Furuta 
Phto 5. Control of electrically drived helicopter 
driven helicopter fixed on a ginbal which is also 
mounted on a movable arm as shown in Fig.4. 
Using 
the system, the evaluation and control of an RC 
helicopter has been done. 
Control of Temperature Distribution of Industrial 
FurnaceΉ 
This is one of examples which are used CAD for the 
control system design of real industrial processes. 
The objective is to control the temperature distri-
bution of the industrial furnace to manufacture mag-
net wire. 
Excellent results could be obtained. 
Path Control of Mechanical System Using Laser Beam°^ 
The stage of the mechanical system shown in Fig.6 is 
controlled to track the laser beam, which may be used 
to teach the motion to the mechanical system. 
Since 
the control should be done based on the laser beam, 
the coordinate of the mechanical system is to be 
transformed into the coordinate system with the laser 
beam as one base coordinate as shown in Fig.7. 
In 
this case the vector x in the ordinary coordinate is 
transformed into a in the laser beam coordinate 
system by 
Fig.6 Three-dimensional linear motion mechanical 
system 
x = Ta 
(1) 
Since the mechanical system is represented by 
x+Ax = Bu 
(2) 
substituting.. (1) into (2) makes 
Τα+2Τά+ϊα+Αχ = Bu 
(2)1 
Therefore by choosing 
u = B-l{2Ta+Ta+Ax-T(Kia+K2cx-Gv)} 
(3) 
(2) y i e l d s t h e l i n e a r r e l a t i o n between v and a a s 
α+Κιά+Κ2α = Gv 
(4) 
and t h e c o n t r o l l e r for t h i s system i s designed 
e a s i l y . 
The m a n i p u l a t o r i s h i g h l y n o n l i n e a r system. 
However 
i t can be l i n e a r i z e d by u s i n g t h e s i m i l a r 
t e c h n i q u e ^ ) . 
DETERMINATION OF SAMPLING INTERVAL 
One problem in the d i g i t a l c o n t r o l system design 
i s 
to determine t h e sampling i n t e r v a l . 
everybody says 
t h a t s h o r t e r sampling i n t e r v a l g i v e s b e t t e r 
r e s u l t s . 
But how b e t t e r r e s u l t s can be o b t a i n q u a n t i t i v e l y by 
s h o r t e n i n g t h e sampling i n t e r v a l ? 
To g e t 
t h e 
measure, the q u a d r a t i c c r i t e r i o n 
f u n c t i o n 
J - [°(||x||^||u|||)dt 
(5) 
for the continuous system 
x = Ax+Bu 
(6) 
can be employed. 
By taking 
u(t) = u(iT) for iT<t<(i+l)T, 
the minimum value of J is 1 ' 
min J = ||x(0)||| 
where P is the positive definite solution of 
P = ΦΤΡΦ+ρ-(ΦτΡΨ+5)(ΨτΡΨ+δ)-1(ΨτΡΦ+§τ) 
(7) 
where 
AT 
Q S 
S R 'm 
As' Bds 
A B 
0 0 ds. 
Fig.7 Coordinates 
Instead of (7), the largest eigenvalue of P can be 
employed as the measure for the sampling interval. 
Considering the delay due to the computation, simi-
lar results are also derived. 
Concerning the design 
of digital control, there are still many theoretical 
problem given in the practical situation. 
CONCLUSION 
This paper presents the possibility to use CAD for 
the education of control engineering. 
The results 
show that the possibility is very prosperous and 
should be accelerated by the develop of computers 
and CAD. 
REFERENCES 
1) K.Furuta et al.(1979). Computer Aided Design 
Program for Linear Multivariable Control Systems. 
IFAC 1st CAD Symp. 
2) K.Furuta et al. (1978). Computer Control of a Double 
Inverted Pendulum. Comp.& Elec.Engr., vol.5. 
3) K.Furuta et al.(1984). Attitude Control of a 
Triple Inverted Pendulum. Int.J.Control, vol.39. 
4) S.Mori et al.(1976). Control Unstable Mechanical 
System. Int.J.Control, vol.23. 
5) K.Furuta et al.(1982). Computer Aided Design and 
Computer Control Using Minicomputer. IFAC 2nd 
CAD Symp. 
6) Y.Ohyama et al.(1984). The training Simulator of 
RC Helicipter. ISPS Tokyo 
7) K.Furuta et al.(1982). Control System Design for 
Furnace by Using CAD. IFAC Symp., Delhi. 
8) K.Furuta et al.(1984). Path Control of Three 
Dimensional Linear Motion System Using Laser. 
IECON '84 
9) K.Furuta et al.(1984). Robust Control of a Robot 
Manipulator with Nonlinearity. Robotica, vol.2 
10)K.Furuta et al.(1984). Computer Aided Control and 
Real Time Control Program Organizing System 
"CACOS". IFAC Congress, Budapest. 
ll)B.C.Kuo.(1980). Digital Control Systems. Holt, 
Rinehart and Winston. 
12)R.Kondo et al.(to appear). Sampled-data Optimal 
Control of Continuous System to Quadratic 
Criterion Function Taking Account of Delayed 
Control Action. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
CAD IN ROBOT CONTROL EDUCATION 
P. Kopacek, I. Troch and K. Desoyer 
Technical University of Vienna, Vienna, Austria 
Abstract. The authors have been teaching since 5 years fundamentals of Industrial Robots 
and Handling Devices for students of Mechanical Engineering, Electrical Engineering as 
well as Applied Mathematics and Computer Sciences. These fundamentals include mechanics, 
model building, simulation and control. 
For the practical education mainly in laboratory courses two personal computers, a litt-
le hydraulic driven robot and a hybrid computer system for simulations is available. At 
a lower level the students solve the kinematic and kinetic equations with the personal 
computer for different structures of robots. The hybrid computer system is applied for 
simulations of the controlled robot. The hydraulic driven robot can be controlled by 
means of a control box with pushbuttons for movements (e.g. up/down, rotate and grip 
and for start/stop). Another programming possibility for robot movements consists by 
using a special language which is different for each robot. Both possibilities are litt-
le efficient for education at a higher level. Therefore the control box of our robot is 
replaced by a personal computer for advanced studies. For all laboratory experiments 
the necessary software packages are written in dialoge form like a CAD system. 
Keywords. Robots, Education, Computer Control. 
INTRODUCTION 
The number of applications for industrial robots 
and handling devices will essentially increase in 
the nearest future. A mechanical production with-
out these devices will be nearly impossible. There-
fore a start for education in this field seems to 
be necessary in time for workers and engineers of 
all educational levels. 
An industrial robot consists of mechanical and 
electrical parts as well as digital computers for 
control. For its operation and service special edu-
cated people have to be available on time. This is 
yery easy possible for the mechanical and electri-
cal parts. Well educated electricians need only spe-
cial knowledge for programming the robots, but for 
hard- and software problems specialists will be ne-
cessary. 
In Austria only at Technical Universities knowledge 
about this field is taught today. Therefore gradua-
tes at compulsory vocational schools (Pflichtberufs-
schulen) industrial technical schools (Höhere 
Techn.Lehranstal ten) or Technical Colleges have on-
ly the possibility to pass various postgraduate 
courses and particular lectures. 
At the Technical University of Vienna students of 
the above mentioned subject have to pass two so 
called "study emphasis". For example in Mechanical 
Engineering there are 15 of them. Each consists of 
- a special lecture (2 hours/week) not 
obligatory 
- a seminar course (3 hours/week) 
- a special laboratory course (2 hours/week) 
- a written study work (7 or 3 hours/week). 
Usually the student prepares the masters thesis 
(Diplomarbeit) - necessary for the "Dipl.Ing." -in 
one of these fields. For further informations of 
the Austrian education system especially for Auto-
matic Control see e.g. (Kopacek,Genser,Troch,Wein-
mann,1984). 
Since 2 years study emphasis are given by our wor-
king group (Desoyer,Kopacek,Troch,1985a) dealing 
with the structure, the kinematics and kinetics, 
the control and the utilization of robots and hand-
ling devices. The goal of this special education is 
giving students of different fields (e.g.Mechanical 
Engineering, Electrical Engineering, Technical Ma-
thematics and Informatics) an overview about the 
types of robots, the programming possibilities and 
problems in application. Furthermore for an effi-
cient utilization of robots special knowledge is 
necessary concerning the kinematics e.g. for the 
transformation of robot coordinates into world co-
ordinates and vice versa, the kinetics e.g. for 
calculating "mathematical" models for the dynamic 
behavior and especially the control. Starting from 
linearized model equations and simple linear "con-
ventional" control algorithms an overview is given 
about various models (nonlinear, time-varying, mul-
tivariable) for the robot and various "advanced" 
control algorithms. The main topics of the lecture 
are collected in Tab.l. 
For the practical education in form of laboratory 
courses mainly for programming and design of con-
trol algorithms two robots as well as one hybrid 
computer system and two personal computers are 
available. One of the robots is mainly suitable 
for research activities while the second a hydrau-
lic driven teach robot is only for laboratory 
courses. 
23 

24 
P. Kopacek, I. Troch and K. Desoyer 
DESCRIPTION OF THE TEACH ROBOT 
The robot arm has a spheric working area (kinematic 
structure RRR) and six degrees of freedom ( i . e . f i v e 
axes plus grip). I t is driven hydraulically with a 
pression of 8 bar. The working area is determined 
by the "shoulder" rotation through 90 deg. with 
vertical movement through 90 deg.; the "elbow" ro-
tation through 90 deg. and the wrist rotation 
through 180 deg. with vertical movement through 
60 deg. All arms are equipped with position sensors 
with an accuracy of 256 steps over the whole wor-
king range. The maximum l i f t i n g capacity amounts 
up to 2 kg with a maximum dimension of 50 mm; the 
maximum reach is 1000 mm. 
The processor unit contains an 8-bit processor de-
fining each movement by an 8-bit word.A display-
board gives visual indication of the control mode 
and audible indication of incoming data. Learning 
f a c i l i t y by which movements set by the control box 
are inserted to form a remembered sequence of ope-
rations with up to 32 steps. By means of an inter-
face board position detector signals are multiple-
xed and transferred to an A/D converter. The out-
put signals of the board actuates the solenoid 
valves of the hydraulic system. An RS 232 inter-
face for connection of external computers is also 
available. Normally the robot arm is controlled by 
means of a Control Box. I t contains pushbuttons for 
various movements i.e. up and down, rotate and grip, 
start, step,slow,delete, insert,play,clear,sequen-
ce,pause,wait,reset and edit.The accuracy of posi-
tioning is determined by dividing the working ran-
ge of each axis in 256 steps according to the 8-bit 
processor. 
For advanced work the control box can be replaced 
by an external computer (e.g. a personal computer). 
In our case for control a cheap personal computer 
is used. I t is a 16-bit computer with 64 K RAM and 
a 20 K ROM. For programs written in Assembler 52 K 
and for programs written in BASIC 38 K are availab-
le. Further possible programming languages are dif-
ferent extended versions of BASIC (EX-BASIC,SIMONS 
BASIC.) as well as PASCAL,FORTH . . . For storage 
of programs serves a Floppy-Disk-Station (5/4"). A 
monitor as well as a l i t t l e printer is also avai-
lable. 
TOPICS OF THE LECTURE 
"INDUSTRIAL ROBOTS AND HANDLING DEVICES" 
- design of Industrial Robots and Handling 
Devices 
- examples and applications 
- components (kinematic structure, drives, 
gripper, sensors, control equipments) 
- fundamentals of mechanics and mathematics 
for robots 
- models for the dynamic behaviour (model 
building) 
- model simplification (simulation) 
- position and position control 
- programming and programming languages 
- "advanced" control algorithms (optimal and 
adaptive control) 
- criterias for utilization 
- developping trends 
Tab.l Lecture on Industrial Robots 
LABORATORY EXPERIMENTS 
The dynamic behavior of a robot with three degrees 
of freedom may be written as a matrix equation 
(Desoyer,Kopacek,Troch,1985b) 
k D r = M(p) p + n(p,p) + Kf p + kg 
with 
P = [ppP?>P3^ ··· vector of robot coordina-
tes (the components are either 
lengths or angles depending on the 
kinematic structure) 
kD 
[3x1] vector of drives (the compo-
nents are either forces or moments) 
M(p) 
[3x3]matrix (the elements are masses 
or masses multiplied with lengths 
or lengths-squared) 
n(p,p)..[3xl ] vector of Coriolis- and Centri-
fugal terms 
Kr 
[3x3] matrix of coefficients of fric-
tion forces (simplified proportional 
to the speed) 
k 
[3x1] vector of gravitational forces 
9 
or -moments. 
At present for robots with one rotatory and two 
trans!atory degrees of freedom (kinematic structure 
RTT) and with three rotatory degrees of freedom 
(kinematic structure RRR) programs for these equa-
tions are available for the personal computer des-
cribed above. These two types of robots are choosen 
because approximately 75% of robots applied today 
have these structures. 
This first "laboratory" experiment has the goal im-
parting the students a feeling for the connections 
between the construction parameters (dimensions, 
masses, moments of inertia) and the desired values 
of coordinates, speeds and accelerations and the 
drives. The computer program is designed in a dia-
logue form and has the following structure: 
a) choosing of the kinematic structure (RTT 
or RRR) 
b) entry of the construction parameters; para-
meter sets for commercial available robots 
are stored on discettes. 
c) entry of the values of coordinates, speeds 
and accelerations 
d) initialisation of the program 
e) after a short time the result is available 
in the form e.g. for a RRR type as shown 
in Fig.1.The print out shows the values of 
the 3 drive moments with and without the 
influence of the gyroscopic moments of the 
driving motors as well as the differences 
f) now the computer asks for new values of co-
ordinates or if desired other construction 
parameters. 
With this software package it is possible to study 
the behavior of the drives as well as the influence 
of the construction parameters especially of eccen-
tricities in the joints. In this way the student 
gets an insight in the connections between the va-
riables. Furthermore it is possible to add the soft-
ware for different drives and gears for each axis. 
The second laboratory experiment for the students 
deals with simulation of robots. A similar program 
package is available for the hybrid computer of 
the Technical University of Vienna. By way of con-
trast to the program for the personal, computer this 
serves mainly for studying varios position control 

CAD in Robot Control Education 
25 
TRFlEGHEITSMGMENTE DER RNTRIEBSMOTOREN... 
. . . BERÜCKSICHTIGT : 
MMC 1 i 0 : 1 / 1 > =-175.785428 NM 
MMC 1 * 0 i 2 / 1 > « 183.881559 NM 
MMC 1 , 0 '· 3 / 1 > = B71.47423 NM 
...UNBERUECKSICHTIGT : 
MOC 
MOC 
MOC 
1 / 1 > =-179.943024 NM 
2 / 1 > = 179.5006 NM 
3 / 1 > = 883.440483 NM 
DIFFERENZ DER OBIGEN MOMENTE 
DIFFC 1 
IN Ji VON MOC 1 
DIFFC 1 
IN Y. VON MOC 1 
DIFFC 1 
IN '/. VON MOC 1 
/ 1 > 
/ 1 > 
/ 1 > 
• 1 > 
/ 1 > 
/ 1 ) 
= 4.16359586 NM 
=-2.31376407 '/. 
= 10.3313593 NM 
= 5.78346778 '/. 
=-11.3662535 NM 
=-1.35450657 Y. 
Fig.l 
Example for a print out 
algorithms. The software package consisting of an 
analog part for simulating the robot and a digital 
part simulating the controllers is developed modu-
lar; i.e. i t is possible to simulate the kinematic 
structures RTT and RRR with different drives (elec-
t r i c direct current motor, hydraulic or pneumatic 
drives) with different gears. Usually the gears 
are modelled as simple proportional elements or 
amplifiers. I f i t is necessary the masses and mo-
ments of inertia may be taken 
into consideration. 
This leads to second order lag elements for the 
dynamic behavior of the gears. 
For control different program modules on the digi-
tal part of the hybridsystem can be activated. 
There is the possibility to use conventional con-
trol algorithms (P-,PI-,PD-,PID-) in a digital re-
cursive way as well as advanced digital control a l -
gorithms including state space controllers. For the 
determination of optimal controller "parameters" a 
few of "optimization" algorithms mainly for advan-
ced controllers are implemented also at the digi-
tal part. 
For the student this "laboratory" experiment is 
accessible in form of a CAD procedure. The f i r s t 
two steps a), b) are the same as in the last exam-
ple. The next are 
c) selecting kind of drive and entry the para-
meters for each axis 
d) selecting the kind of the model of the 
gear 
e) selecting the control algorithms. Entry 
other of the controller parameters or of 
the appropriate optimization algorithm 
f) entry the cartesian coordinates of the 
starting and the final point 
g) the result is plotted in form of a curve 
in the corresponding plane 
As example Fig.2 shows a typical test result for 
a RTT-type robot with constant l i f t i n g (z-coordi-
nate) in the x-y-plain.Both axis are controlled by 
proportional controllers. As indicated in the f i -
gure the gain of the φ-direction is 100 while the 
gain of the controller in the r-direction is va-
ried from 30 to 240. Clearly the form of the pat-
terns depend mainly on the values of the gain in 
the r-direction. 
In contrast to the two described experiments the 
following are carried out on teach robot. With the 
test equipment, described before, the student has 
in a f i r s t stage the possibility to program the 
robot movements by means of the control box in a 
teach-in mode. With the pushbuttons on the panel of 
the box the desired points in the working area are 
approached and the positions of the joints are sto-
red in the memory of the control box. I f all ne-
cessary points are stored, the complete sequence 
will be traced one time or continuous. Clearly the 
movement between the points cannot be influenced. 
The resulting path is determined by the time 
points for opening the solenoid valves. Typical 
tasks in this education stage are various operati-
ons with small cylinders or cubes simulating real 
workpieces. 
TYP DSS , REGELUNG MIT P-REGLER 
o 
>-
g 8 £ 
0.00 
0.03 
0.06 
0.09 
0.12 
0.15 
0.19 
0.22 
0.25 
Fia.2 
Example for paths 
with P-controllers. 

26 
P. Kopacek, I. Troch and K. Desoyer 
In an advanced education stage the problems have to 
be more complicated. Therefore as pointed out above 
the control box is replaced by a l i t t l e personal 
computer. This simple computer has the advantage 
that many students have the same model at home and 
so the i n i t i a l period is reduced to a minimum. The 
standard software written by our students consists 
of program modules for actuating the 5 degrees of 
freedom. Furthermore i t contains a program for cal-
culating the cartesian coordinates for each point 
programmed in the Teach-in mode. This program ser-
ves also for feeding the personal computer with the 
cartesian coordinates of our desired point. 
Usually this kind of teach robot is not suitable 
for control experiments especially with this com-
puter. Nevertheless one of the goals of this test 
equipment is to collect f i r s t experiences in this 
relatively new field of education. For the position 
control of the axis different control algorithms 
are available in form of software modules. These 
modules are conventional control algorithms (P-, 
PI-, PD-, PID-) in digital recursive form as well 
as advanced digital algorithms. The latter are de-
rived from a z-transfer function of the form 
FR(z) = ° 
1
 A
 
v-~ 
The necessary software package is developed in dia-
loge form like a CAD procedure. It consists of the 
following steps 
a) selection of the points (command values) in 
cartesian coordinates simultaneously for 
all axes 
b) the computer calculates the robot coordina-
tes belong to this points and prints out 
them on the monitor 
c) selection of control algorithms and the 
controller parameters 
d) during the movement the command as well as 
the actual position is shown on the screen. 
This experiment allows a direct comparison of simu-
lation results and the practice because the teach 
robot with the drives, gears and control algorithms 
may be also simulated on the hybrid computer. The 
student gets a feeling of differences between the 
behavior of the real system and the simulated sys-
tem. 
SUMMARY 
A short overview concerning the educational activi-
ties of our working group in the field of robots 
and handling devices at the Technical University 
of Vienna is given. Students of different subjects 
have the possibility to choose courses in this 
field. In this paper some of the laboratory experi-
ments in connection with CAD are described. In all 
of them the CAD procedures allow a direct dialog 
with the computer for designing e.g. control al-
gorithms with appropriate parameter values for the 
given robot. The first are calculations with a 
personal computer dealing mainly with the kinema-
tics and kinetics of different types of robots. 
Students can see the movement of the joints and 
the actual values of the necessary drive forces and 
drive-moments for the joints. The computer allows 
easily to study the influence of distinct construc-
tion parameters at the kinematics and kinetics of 
the robot. This knowledge can be applied simultane-
ously at the hydraulic driven teach robot with a 
spheric working area (kinematic structure TTT). By 
means of a control -box it is programmable in a 
teach in mode. Other experiments at this level are 
e.g. lifting and stacking of cubes or little cylin-
ders by means of this robot. 
For robot control experiments a big hybrid computer 
system (EAI-Simstar) as well as a personal computer 
for control of the teach robot is available. The 
necessary software packages are written in a modu-
lar form using different CAD procedures for desig-
ning of the "controllers" as well as the represen-
tation of the curves of movement of different 
points. It must be noted that the whole software is 
written by students during advanced laboratory 
courses and Diplomatheses (Diplomarbeiten). 
Further activities using CAD in robot control edu-
cation will go in the direction of a 3 dimensional 
representation of the resulting paths. At present 
the paths are only represented in two dimensions. 
Therefore it is necessary to plot two or three cur-
ves in different planes. Moreover a movable picture 
of the robot in form of lines for each link at the 
monitor screen seems to be necessary for simula-
tion. This offers the possibility to study e.g. col-
lision problems. 
REFERENCES 
Kopacek, P., R. Genser, I. Troch and A. Weinmann 
(1984). Automatic Control Education in Austria. 
Preprints of the 9th IFAC World Congress Buda-
pest. Vol. 4, pp.112-115, 
Desoyer, K., P. Kopacek and I. Troch (1985a). Infor-
mation about the working group on "Industrial 
Robots" at the Technical University of Vienna, 
in "Digital Systems" for Industrial Automation. 
Desoyer, K., P. Kopacek and I. Troch (1985b). 
Industrieroboter und Handhabungsgeräte (in Ger-
man) R.Oldenbourg, München. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF CONTROL 
SYSTEMS, AN INTEGRATED APPROACH 
M. Mansour, M. Rimvall and W. Schaufelberger 
Institute of Automatic Control, Swiss Federal Institute of Technology (ETH), 
CH-8092 Zürich, Switzerland 
Abstract. In this paper on the use of CAD packages in control education we will concen-
trate on special requirements to be put on CACSD-tools in a student environment. In a 
first part, we survey the possible use of computers in the design cycle and discuss the 
incorporation of computers into the educational process. Different approaches towards an 
integrated CACSD-facility are presented in a second part. Several aspects important in 
the design of new CACSD-tools are then discussed. In particular, the design of a flexible 
user interface and the incorporation of graphics are treated. Finally, we provide some 
implementational considerations. 
Keywords. Control education, computer-aided control systems design; computer-aided in-
struction; man-machine interface; student environments. 
INTRODUCTION 
of optimization techniques. Measurement signals 
must be used in this process. 
The use of computers in control education is al-
ready widespread and it is certain to increase in 
the future. Computers are and will be used to im-
prove understanding of the basics of control engi-
neering in many ways, i.e. 
- demonstrations during lectures 
- exercises 
- laboratory assignments 
- student projects. 
The use of computers in control education has be-
come vital as computers are changing the whole 
field of control engineering. The design and imple-
mentation of advanced control systems are impossi-
ble without the use of computers, and the control 
education has to prepare the students for this new 
situation. 
As we have only a very restricted amount of space 
to outline our ideas, this paper will be focused on 
the use of CAD in control education and the design 
of CACSD tools to be used by inexperienced users 
(e.g. students). 
COMPUTERS IN THE DESIGN OF CONTROL SYSTEMS 
If we focus on the design cycle as shown in Fig. 1, 
we realize that computers are essential in almost 
all of the design process steps and that therefore 
the use of computers must be introduced at an early 
stage into the educational process. 
Some typical applications of computers for the dif-
ferent stages in the design process are made ex-
plicit in the following. 
Modelling is probably the least automated step of 
all. Here the equations of the physical system 
have to be obtained. Network or bond diagrams 
as well as energy balance and similar princi-
ples have to be used. These are often combined 
with simulations. 
Packages: 
Bond 
diagrams 
(TUTSIM), 
ENPORT, 
MACSYMA 
Identification is the process of obtaining the pa-
rameters for a given model structure by the use 
Packages: IDPAC, CTRL-C 
Representation. 
Several 
representations are 
generally in use, i.e. 
state variables 
I/O 
polynomial 
representation, 
U 
ü 
matrices 
transfer-functions 
representation 
It is often useful to change the representa-
tions or to use special forms such as observ-
able or controllable normal forms. The job to 
change the representation is easily carried out 
by computers. 
Languages and systems: MATLHÜ, MACSYMA, MODPAC, 
IMPACT 
Design requires tests (observability, controllabil-
ity) and optimizations (LQG-Problem) or pole-
placements. A repetitive sequence of design and 
analysis is usually used to optimize the sys-
tem. This involves heavy interactive work for 
the computer. 
Packages: CTRL-C, IMPACT, MATRIXX 
Analysis is mostly carried out by interactive simu-
lation, requiring the corresponding software. 
Tests for stability and sensitivity analysis 
are also best carried out by computers. 
Packages: CSMP, ACSL, IMPACT, MATRIXx 
Implementation requires real-time languages and op-
erating systems as well as development support. 
Languages: Modula-2, Portal, Ada, Pearl 
Development systems: Ada/KAPSE, Jackson Design, 
Mascot (see Mascot Suppliers Association 1980) 
27 

28 
M. Mansour, M. Rimvall and W . Schaufelberger 
We are convinced that it is important to use ade-
quate tools from the very beginning in the educa-
tional process and we therefore advocate the intro-
duction of the corresponding methods into the cur-
riculum. 
THE EDUCATIONAL VALUE OF CACSD 
Design is by its very nature an iterative process. 
Several trials have to be made until a reasonable 
control system results. If done by pencil and pa-
per, this requires much work (drawing frequency re-
sponses, calculating dominant pole responses) and 
the methods used are only approximate ones. This 
can be considerably improved by the use of comput-
ers. Methods that are not important for the under-
standing of the subject matter (e.g. the manual 
drawing of Root-Locus curves) can be removed, giv-
ing time for the introduction of additional control 
concepts. Thereby, the essential facets of control 
engineering can be brought to bear over a shorter 
time-span. 
Moreover, many problems arising in control theory 
are solvable only by numerical methods. Through the 
use of CACSD packages, these problems can now for 
the first time be treated in the exercises of in-
termediate control courses. For example, in conven-
tional, pencil and paper exercises the students al-
most exclusively work on linear (linearized) sys-
tems. Through the use of CACSD packages supporting 
linear design techniques as well as nonlinear simu-
lations the students can compare the system behav-
iour of the regulated linearized system with that 
of the regulated original, nonlinear process after 
the controller design. In Fig. 2, we indicate pos-
sible uses of an integrated CACSD package in an in-
troductory course. 
However, although the use of CACSD indisputably 
opens up new perspectives in control education, an 
indiscriminate replacement of conventional exer-
cises with 
CACSD 
sessions may 
prove contra-
productive. Several manual schemes, which can be 
performed much faster using numerically better 
methods on a computer than by hand, often help the 
students to get a better understanding of the un-
derlying theories during their use. For example, 
many CACSD packages support algorithms transforming 
systems from the time to the frequency domain and 
vice versa. Nevertheless, we feel that it is 
pedagogically better to let the students perform 
this translation by hand a few times using simple 
examples, as this also gives an illustration of the 
physical meaning of this translation. Moreover, the 
student should always have means of roughly con-
trolling the results he gets from the computer. 
From our own experience, we conclude that the use 
of CACSD tools enables an increase of the total 
scope of a course, but that during carelessly for-
mulated CACSD exercises the students often overlook 
the actual theoretical/numerical difficulties and 
loose the overview of the treated subject matter. 
THE NEED FOR AN INTEGRATED CACSD-FACILITY 
We have seen in a previous chapter that CACSD tools 
exist for all phases in the design sequence, but 
that each single package normally is suited for on-
ly one or two of these phases. However, particular-
ly in a student environment, the use of a single, 
multi-purpose package is advantageous. Conceptual-
ly, the development of such a multi-purpose CACSD 
facility can be approached on three levels: 
- several independent programs communicating over 
a common data base 
data base and a common user interface 
- a fully integrated CACSD package 
The simplest approach is the one using a common da-
ta base over which intermediate data can be 
transported from one part of the facility to anoth-
er. It is mainly used when already existing pack-
ages are to be interconnected (a typical example is 
the link between the CTRL-C design package and the 
ACSL simulation language). The main drawbacks of 
this approach are that the users have to know sev-
eral different systems, that no consistent data 
structures exist and that information is often lost 
in the transfer or has to be added after the trans-
fer (an example is run-time information to be in-
cluded in the analysis and simulation parts of the 
design suite, but redundant in and incompatible 
with the linear design parts). 
The approach of combining many individual programs 
over a common user interface has been successfully 
used in several larger CACSD projects, for example 
in the Lund control suite surveyed in Sström 
(1983)» which is built upon a common macro handler 
(INTRAC, Wieslander 1980). This macro handler gives 
the user access to a basic set of general commands 
(edit/execute macros, change/show parameters). The 
other parts of the package then add specific 
context-adapted commands, like commands for identi-
fication (IDPAC), polynomial operations (POLPAC) 
and simulation (SIMNON). Using this approach, the 
user needs to know only one system - the common in-
terface. A further advantage is that the individual 
parts of the package can be designed quite indepen-
dent of each other using their own data structures. 
However, the context-dependency of the available 
commands and data structures makes an overview of 
the full package and all its possibilities diffi-
cult, especially for beginners. 
The last, fully integrated approach differ from the 
previous ones in that the user is presented with a 
single, context-independent interface from which 
all phases of the design sequence can be performed. 
This means that at each point of time the user is 
presented with a much more powerful, but not neces-
sarily more complex, tool. In fact, the very inte-
gration of the different segments into one inter-
face can make the system easier to use. For exam-
ple, it is possible to design the package in such a 
way that the commands for the simulation of linear 
and nonlinear systems look exactly the same, de-
spite the fact that these simulations have nothing 
in common from an algorithmic point of view. 
In our opinion, this third approach is ideal for a 
student environment. Not only does the integrated 
interface shorten the total familiarization time 
for the students, it also precludes all errors de-
riving from conceptual differences in the packages 
(e.g. varying specifications of closed/open loops 
or different tolerance indications). An example of 
such an integrated system is the CACSD package 
IMPACT (presently under development at our insti-
tute, see Rimvall 1983 and Rimvall and Cellier 
1985). IMPACT will give access to algorithms for 
all parts of the design sequence (except for the 
implementation/real-time control) using a common 
set of data structures. Moreover, in addition to 
the standardized 
interface to all algorithms, 
IMPACT provides the user with a full-fledged algo-
rithmic command language and a wide selection of 
applicable data structures. This makes the package 
user extendable and therefore useable not only in 
education but also in a research environment. 
- several control packages connected over a common 

Computer Aided Design of Control Systems 
29 
REQUIREMENTS FOR AN INTEGRATED CACSD FACILITY 
In this chapter we will discuss some requirements 
which we feel are imperative for CACSD packages to 
be used in the educational process. During the last 
years, much work has been presented in this field, 
for example in the following areas: 
- numerical algorithms 
- man-machine interaction 
- interactive program design 
- design languages 
- simulation techniques 
For an overview see Cuenod (1979), Herget and Laub 
(1982), Anonymous (1983a) as well as Herget and 
Jamshidi (1985). These recent results must be taken 
into consideration when selecting or designing a 
CACSD package. Moreover, advanced work on the use 
of "expert systems" in CAD of intelligent control 
systems may lead to future control workstations 
(Taylor and Frederick 1984). Such "expert control 
systems" would be an excellent tool in control edu-
cation, as the knowledge base could be used to 
guide the student through the whole design se-
quence. 
Each of the following sections will concentrate on 
one aspect we feel to be particularly important in 
the design of new CACSD-tools. 
An algorithmic interface 
When designing a new interactive system, one of the 
first decisions must be to decide, in which form 
the man-machine interaction is to take place. This 
decision should not be taken lightheartedly, as the 
mode 
of 
interaction 
determines 
the 
user-
friendlyness, and thereby also the user acceptance, 
of the system; although this interface is not the 
brain of any CAD-system, it certainly serves as 
both eyes and mouth. 
The mode of interaction also influences the struc-
ture of the kernel controlling the package. In par-
ticular, the data-structures of the kernel are very 
closely knitted to the user interface. As any late 
changes in the central data structures are the 
worst of all possible nightmares for any software 
developer, the design of the interactive interface 
should be done carefully, so that no later modifi-
cations need to be done. 
Apart from some more exotic ways of communication, 
like speech input and natural language input, four 
basically different ways of interactive input ex-
ist: 
- question-and-answer method 
- menu-driven operation 
- command-language communication 
- graphical input. 
Of these four, the first three work with alphanu-
meric information, which, at least in principle can 
work on any alphanumerical terminal. The graphical 
input is particularly interesting during the defi-
nition of systems and system structures, However, 
it requires special hardware in form of a graphical 
terminal for the graphic echo and some graphical 
input device. Graphical input will be discussed in 
some detail in a later chapter. 
For CACSD packages primarily designed to solve nu-
merical problems, the three alphanumeric input 
modes are of interest. A basic difference between 
these methods exist: the menu and the question-and-
answer methods let the computer be in charge of the 
conversation, whereas the command language method 
gives the user almost total control. In the last 
few years, several menu-driven interactive programs 
using a "mouse" or joystick as input device have 
emerged. These systems are extremely handy and 
speedy for dexterous users. However, until a hard-
ware standard has been set, such systems are not 
very portable. On the other hand, the speed of por-
table menu-driven systems can be compared with that 
obtained by question-and-answer methods. 
If the only design goals are minimal learning time 
and maximum accessibility by non-specialists, the 
question-and-answer method is most certainly the 
right answer. However, this method gets very tire-
some after a while, as the user always can antici-
pate the next question, but cannot speed up the in-
put. As an example, compare the conversation in 
INTOPS (Agathokolis and coworkers 1979) (a somewhat 
old-fashioned interactive program for control sys-
tem operations) with the equivalent commands in 
IMPACT. A BODE diagram of the transfer function 
1 
G(s) = 
3 
2 
s + 9s + 5s + 9 
is produced in both examples. INTOPS question-and-
answer conversation: 
P> 
OP CODE = ENTER 
P> 
NAME = NUME 
P> 
COMMENT = NUMERATOR 
P> 
ORDER = 0. 
P> 
P( 0) = 1 
P> 
NUME 
NUMERATOR 
P> 
P( 0) = 0.10000E+01 
P> 
OP CODE = ENTER 
P> 
NAME = DENO 
P> 
COMMENT = DENOMINATOR 
P> 
ORDER = 1 
P> 
P( 0) = ± 
P> 
P( 1) = 5. 
P> 
P( 2) = £ 
P> 
P( 3) = 1 
P> 
DENO 
DENOMINATOR 
P> 
P( 0) = 0.90000E+01 
P> 
P( 1) = 0.50000E+01 
P> 
P( 2) = 0.90000E+01 
P> 
P( 3) = 0.10000E+01 
P> 
OP CODE = BODE 
P> 
GH NUMERATOR = NUME 
P> 
GH DENOMINATOR = DENO 
P> 
NUMBER OF FREQUENCY VALUE = 100. 
P> 
OMEMAX = 1QQQ. 
P> 
0MEMIN = _JL 
(user input is underlined). 
Command language input of IMPACT: 
BODE (1/<9A5A9A1> //D0MAIN=L0GD0M(.1,1000.,100) ) 
or a little more verbose but better readable: 
S = <Ä1>; 
G = 1 / (S**3 + 9*S*S + 5*S + 9); 
FREQ = LOGDOM(.1,1000.,100); 
BODE (G //DOMAIN=FREQ ) 
Anyone familiar with both systems will save a fac-
tor 10 in time as well as in number of input lines 
when he uses IMPACT to construct the BODE diagram. 
On the other hand, the advocates of menu-driven and 
question-and-answer interaction justly claim that 
their methods are specially advantageous for users 
who are unfamiliar with the system. In our example, 
the user of INTOPS needed to know only the exis-
tence of the two commands ENTER and BODE, whereas 
(apparently) the user of IMPACT must know how to 

30 
M. Mansour, M. Rimvall and W . Schaufelberger 
form a transfer-function, and how to specify a 
variable as parameter of a function. In a student 
environment, even this low level of complexity can 
be cryptic and we have therefore put quite some ef-
forts into solving this problem at our institute. 
We believe that the basic interface must be 
command-driven for speed and flexibility. However, 
in order to simplify the system for inexperienced 
users, a query mode should be included. Whenever 
the user wants to use an unknown function (com-
mand), he can switch over to this query mode and 
thereby give the initiative to the system. He will 
thereafter be asked for the value of each parameter 
of the function. Furthermore, each question can be 
answered with HELP for further information and de-
faulted values can be skipped. A more detailed de-
scription of such an interface can be found in 
Rimvall and Bomholt (1985) of these proceedings. 
Data structures 
One of the most serious drawbacks of many control 
packages is their lack of adequate data structures, 
many CACSD packages support the complex matrix as 
the only data structure. On the other hand, control 
scientists usually work with structures like poly-
nomial matrices, transfer-functions and linear sys-
tem descriptions. For this reason, and because the 
absence of proper data structures in a large soft-
ware package cannot easily be remedied at a later 
stage (as such a remedy would require extensive 
changes to the central data structures, and thereby 
a recoding of large sections of the package), great 
attention must be given to this problem at the out-
set of any package design. 
A minimal set of data structures in an integrated 
control package should include: 
- complex matrices 
- polynomial matrices 
(*) 
- transfer-function matrices 
(*) 
- linear system descriptions (4 matrices) 
- domains (one-dimensional structure used 
for range descriptions) 
- trajectories (for time histories, signal 
and plot descriptions) 
- nonlinear system descriptions (ORD's) 
The structures marked (*) should be available in 
factorized as well as nonfactorized form. A full 
set of functions transferring systems from one rep-
resentation to another (including linearization) 
should exist. 
Of course this high number of different structures 
increases the implementational complexity of the 
package. This will be discussed in a later section 
on implementational considerations. 
Graphics in CACSD 
The use of graphical output (step responses, Bode 
plots and so on) has become an indispensable part 
of all modern CACSD packages. In a student environ-
ment, the frequent use of plots to verify results 
and give the students an intuitive feeling for sys-
tems behaviour is imperative, and in the basic 
courses where everything still can be "calculated 
by hand" it is often the only reason for using a 
computer at all. Unfortunately, most packages only 
support special graphs adapted to the basic algo-
rithms of the package·, giving the user little free-
dom in constructing his own, problem-adapted plots. 
This hampers the design sequence where critical in-
formation often can be obtained by comparing dif-
ferent curves or mathematically manipulated plot 
data (plot state x1 versus state x2, plot the dif-
ference of output signals y1 and y2 versus the 
time, plot the error time history using a logarith-
mic scaling). Here the packages CTRL-C and IMPACT 
are especially flexible, using their inherent data 
structures for the description and manipulation of 
graphs. Moreover, CTRL-C offers the user an inter-
active, "GKS-like" (Anonymous 1982) plot interface 
for a very general plot facility. 
Whereas graphical output is employed in almost all 
CACSD packages, the use of graphical input is still 
in its infancy. Only few packages allow for a 
graphical input; the MATRIXX control package from 
Walkers and coworkers (1982) and the CACSD project 
of King and Grey (1984) let the user interactively 
enter nonlinear systems in block diagram form. The 
TESS simulation environment from Pritsker & Asso-
ciates (1984) allow for an interactive input of 
network descriptions of discrete systems. This kind 
of user-friendly interfaces are particularly well 
suited in a student environment, as users with lit-
tle experience with CAD or sparce knowledge of con-
trol theory is greatly assisted by the use of 
graphical symbols rather than complex descriptions 
using formulas or program structures. When larger 
systems can be entered using a hierarchical ap-
proach (with zooming), the graphical input becomes 
particularly interesting, also see Elmquist (1982). 
However, the widespread use of graphical input is 
hampered by the hardware presently available: 
- The connection of graphical input devices like 
joysticks and mice is seldom foreseen by stan-
dard graphical terminals. No standard for these 
devices exists. 
- Graphical terminals with high resolution and 
fast refresh rates are needed. Ideally, bit-map 
displays with intelligent graphical processors 
as found on workstations like the Apollo Domain, 
Sun or MODULA-computer should be used. On these 
terminals, the refresh rate is fast enough for 
zooming and fast deletion/insertion of complex, 
hierarchical structures. 
Furthermore, a very nice combination of a graphical 
input facility and an alphanumerical algorithmic 
environment of an integrated CACSD package can be 
obtained on the modern workstations supporting 
windowing techniques. Concurrent sessions and mul-
tiple windowing can be used to separate these two 
modes, which are incompatible on most other termi-
nals. 
The required graphical facilities, together with 
the needed computational power, dictate the hard-
ware requirements for CACSD applications. Modern 
workstations provide excellent graphics and at the 
same time give their users enough computing power 
(in the magnitude of a standard "VAX-780" unit) on 
his own desk - an ideal environment for the dedi-
cated control scientist. However, the price per 
computer-connenction 
is 
rather 
high 
for 
the 
workstations and comparable to that of a multi-user 
minicomputer environment (another very common con-
figuration in CACSD applications). In the educa-
tional process, where literally hundreds of stu-
dents have to be given access to computers for 
their (control-) exercises, more inexpensive solu-
tions have to be found. Economical alternatives are 
the modern personal computers (e.g. IBM-PC). These 
provide the user with decent graphics and enough 
computing power for introductory to intermediate 
control exercises. Moreover, packages useable in 
control exercises have already emerged for the PC's 
(e.g. the new PC version of MATLAB). 

Computer Aided Design of Control Systems 
31 
Implementational considerations 
All programs and packages must be well-tested, 
error-free, and numerically reliable. The problem 
area may be restricted to educational use, but no 
compromising should be done with respect to program 
quality. 
Until now, practically all CACSD packages and CACSD 
libraries have been implemented in FORTRAN. This 
insures a fair portability, as FORTRAN compilers 
are available on virtually all computer systems and 
ANSI FORTRAN standards exist. However, due to the 
diminishing cost of hardware and the soaring cost 
of software, software engineering aspects like re-
liability, portability, and maintenance costs will 
play a more important role in future implementa-
tions of larger application packages. These aspects 
certainly do not favour FORTRAN, but indicate that 
modern languages like Pascal, Modula-2 or Ada 
(Anonymous 1983b) are better suited for CACSD ap-
plications in the long run. Moreover, logical lan-
guages like LOGO, LISP and PROLOG are to be consid-
ered in projects where control design algorithms 
are combined with expert system or artificial in-
telligence environments; good overviews of these 
languages can be found in Winston and Horn (1981) 
for LISP and Clocksin and Mellish (1981) for 
PROLOG. 
The availability and use of these "new11 languages 
open up new dimensions for CACSD-developments. How-
ever, although a combination of languages within 
one integrated CACSD package would enable an opti-
mal use of the strong features of each language, 
such a mixture would also lead to severe portabili-
ty problems. Therefore, for an integrated and algo-
rithmic approach to CACSD as discussed in this con-
tribution, we advocate the use of only one imple-
mentation language whenever possible. Moreover, for 
several reasons we consider Ada to be the best 
choice today (possibly together with LISP or PROLOG 
for knowledge system features): 
In Ada (as in other languages, e.g. Pascal) the us-
er can define his own structured data types. This 
is very useful to CACSD programs, permitting us to 
implement program structures directly corresponding 
to the structures used in control theory. 
Through the use of Adafs data abstraction, we can 
hide the details on e.g. data types or algorithm 
implementations from other parts of the program. 
This feature is a cornerstone in Ada1 s aim at ro-
bust programming, and should be used to modularize 
larger software projects. 
Ada is per definition portable, there may not exist 
any sub- and/or super-set of Ada with that name. 
Furthermore, the language is rich enough to support 
any algorithmic CACSD package. 
A current disadvantage of Ada is that no Ada-
libraries of e.g. mathematical 
algorithms are 
available. However, such libraries are planned and 
should emerge on the market in the near future 
(Anonymous 1984). Moreover, Ada allows for a so-
called "PRAGMA INTERFACE" to access programs writ-
ten in other languages. 
CONCLUSIONS 
In this paper we have discussed the requirements 
for a CACSD package in modern undergraduate control 
courses. We have seen that the integrated approach 
(using one multi-purpose package for the whole de-
sign cycle) is particularly important in a student 
environment. The students use of such a package is 
often too sporadic, and their overview of control 
theory 
(from 
an 
theoretical 
as 
well 
as 
algorithmical point of view) too limited to allow 
the introduction of different dedicated packages. 
Moreover, we have discussed the need for a flexible 
algorithmic interface, for data-structures useable 
in control theory and for good graphical inter-
faces. Finally, we indicated the importance of good 
software engineering and well-suited implementa-
tional tools. 
REFERENCES 
Anonymous (1982). Graphical Kernel System (GKS) -
Functional 
Description. 
Draft 
International 
Standard ISO/DIS 7942 Version 7.02, August 9, 
1982. Available through ANSI, NY. 
Anonymous (1983a). IEEE Control Systems Society 
Symposium on Computer-Aided Control System De-
sign. Abstracts. MIT, Massachusetts, September 
28-30. 
Anonymous (1983b). ANSI/MIL-STD 1815 A, Reference 
manual for the Ada programming language (Janu-
ary 1983). 
Anonymous (1984). ACM Ada letters, 4(1984)3 p.68. 
Sström, K.J. (1983). Analysis and Design of Control 
Systems - A Perspective. IEEE Control Systems 
Magazine. 3(1983)2. pp. 4-16. 
Clocksin, W.F. and C.S. Mellish (1981). Programming 
in Prolog. Springer Verlag. 279 pp. 
Cuenod, M.A. (Ed.)(1979). Preprints first IFAC Sym-
posium on CAD of Control Systems. Zurich. 
Pergamon Press. 
Elmqvist, H. (1982). A graphical approach to docu-
mentation and implementation of control sys-
tems. Proc. 3rd IFAC/IFIP Symposium on Software 
for Computer Control, S0C0C082. Madrid, Spain. 
Herget, C.J. and M. Jamshidi (1985). Advances in 
Computer-Aided Control Systems Engineering. To 
be published in North-Holland Press. 
Herget, C.J. and A.J. Laub (Eds.) (1982). Special 
Issue on Computer-Aided Design of Control Sys-
tems. IEEE Control Systems Magazine 2(1982)4. 
King, R.A. and J.O Grey (1984). A Graphical Man-
Machine Interface for CAD and Simulation of Dy-
namic System. In Proc. EUR0C0N 84, 6th European 
Conference on Electrotechnics, Computers in 
Communication 
and Control. Brighton. 26-28 
September 1984. 
Little, J.N., A. Emami-Naeini, and S.N. Bangert 
(1984). CTRL-C and matrix environments for the 
computer aided design of control systems. In A. 
Bensoussan, J.L. Lions (Ed.), Proc. 6'th Inter-
national Conference on Analysis and Optimiza-
tion (INRIA). Lecture notes in Control and In-
formation Sciences £3., Springer Verlag, pp. 
191-205. 
Mascot Suppliers Association (1980). The official 
handbook of MASCOT. Computer Standards Section, 
Royal Signals and Radar Establishment, Malvern, 
Worchestershire WR14 3PS, England. 
Moler, C. (1980). MATLAB, User's Guide. Department 
of Computer Science, University of New Mexico, 
Albuquerque, USA. 
Pritsker & Associates (1984). The TESS User's Manu-
al. P.O. Box 2413, West Lafayette, IN 47906, 
USA. 515p. 

32 
M. Mansour, M. Rimvall and W . Schaufelberger 
Rimvall, M., (1983). IMPACT, Interactive Mathemati-
cal Program for Automatic Control Theory, A 
Preliminary User1s Manual. Institute for Auto-
matic Control, ETH Zurich, Switzerland. 
Rimvall, M. and F.E. Cellier (1985). A Structural 
Approach to CACSD. In M. Jamshidi and 
C.J. 
Herget (Ed.), Advances in Computer-Aided Con-
trol 
Systems 
Engineering. 
North 
Holland, 
Amsterdam. 
Rimvall, M. and L. Bomholt (1985). A Flexible Man-
Machine Interface for CACSD Applications. In 
Proc. 3rd IFAC symposium on Computer Aided De-
sign 
in 
Control 
and 
Engineering 
Systems. 
Kopenhagen, July 31 - August 2 1985. 
Taylor, J.H. and D.K. Frederick (1984). Expert Sys-
tem Concepts for Computer-Aided Control Engi-
neering. General Electric Technical Information 
Series, Report 84CRD127. May 1984. 
Walker, R., C. Gregory, and S. Shah (1982). MA-
TRIX , A Data Analysis, System Identification, 
Control Design, and Simulation Package. IEEE 
Control Systems Magazine, £, 30-37. 
Wieslander, J. (1980). Interactive Programs - Gen-
eral guide. Dept. of Automatic Control, Lund 
Institute of Technology, Lund, Sweden. Report 
CODEN : LUTFD2/(TFRT-3156)/1-30/(1980). 
Winston, 
P.H. 
and 
B.K.P. 
Horn 
(1981). 
LISP. 
Addison-Wesley Publishing Company. 430 pp. 
Control subjects 
LINEAR SYSTEMS 
state variable and 
transfer function 
representation 
normal forms 
controllability and 
observability 
stability 
LINEAR CONT. SYSTEMS 
root loci, 
controller design 
statical and 
dynamical behaviour 
Use of CACSD-tools 
in exercises 
provide translation 
algebraically and 
numerically 
generate and compare 
normal forms 
generate tests for 
observability / 
controllability, for 
nontrivial examples assist 
physical interpretation 
automatic stability tests 
use graphical features 
simulations, comparisons 
with dominant pole responses 
LINEAR DISCRETE SYSTEMS 
introduction to 
discrete/sampled 
systems 
NON-LINEAR SYSTEMS 
comparisons between behaviour 
of continuous and sampled 
systems, transformations 
between continuous and 
discrete representations 
modeling, linearizations 
problem 
definition 
model 
building 
design 
analysis 
use of 
Cgpap 
representation 
A 
modelling 
* 
identification 
i 
linearization 
1 
^ 
design of controller 
- observability/controllabilitj 
- optimization 
- heuristic methods 
1 
analysis of controller 
- stability 
- sensitivity 
- dynamic/static behaviour 
* 
implementation 
- real-time languages 
- real-time operating systems 
Fif 2. The use of CACSD-tools in control exercises 
at the ETH 
Fig. 1. The design cycle in control theory. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
CAD IN CONTROL ENGINEERING 
EDUCATION 
H. Unbehauen 
Department of Electrical Engineering, Ruhr-University, 
4630 Bochum, ERG 
Abstract. The paper describes the role of software packages for computer-aided control 
system analysis and design (CACSAD) in,control engineering education. It is shown that 
CACSAD-systems are becoming an indispensible tool in education, because even sophisti-
cated methods are more easily understood by the students. Realistic problems can be 
solved within reasonable time, especially the laboratory experiments. As an example of a 
CACSAD-package, the KEDDC-system developed by the author and his coworkers, is descri-
bed. It is shown how the KEDDC-system is introduced into the education of control en-
gineers at the electrical engineering department of Ruhr-University Bochum. 
Keywords. CAD in control engineering; software packages; electrical engineering curricu-
lum; real-time application; control system analysis and synthesis. 
INTRODUCTION 
The university level engineering education in the 
Federal Republic of Germany offers usually a five-
years course leading to a Dipl.-Ing. degree, e.g. 
in electrical or mechanical engineering. Normally 
electrical engineering students specialize in one 
or two topics out of a large variety of electrical 
engineering subjects during the last two years. One 
of these topics might be the area of control engi-
neering. Control engineering is offered in the de-
partments of electrical, mechanical, aeronautical 
and chemical engineering, and in a few cases also 
in some other sections. 
In the past some very powerful CAD-packages had been 
developed for solving control engineering tasks. 
Since these packages are used extensively in seve-
ral universities during the final diploma projects, 
it is but natural to consider how these modern tools 
can be integrated into a systematic education of 
control engineers. This development will be describ-
ed in this paper using as an example the Department 
of Electrical Engineering of the Ruhr-University 
Bochum. The control group (ESR) in this department 
has developed a very powerful CAD-system, called 
KEDDC (Unbehauen 1975, Schmid and Unbehauen 1979, 
Schmid 1984) in the past 11 years. This system is 
available for students as a tool for solving prob-
lems connected with the lecture and laboratory 
courses as well as to the day-to-day work during 
their first and final diploma projects. Thus, the 
students are able to solve very complex problems in 
control engineering within a reasonable time. Be-
cause of the interactive mode, the application can 
be learnt in a few hours without special knowledge 
about the details of the software. 
SHORT DESCRIPTION OF THE KEDDC-PACKAGE 
Originally the KEDDC package had been developed by 
the author and his coworkers during research pro-
jects for analysis and synthesis of control systems 
as well as for direct digital control. KEDDC repre-
sents a combined package for solving CAD-tasks and 
for real-time direct digital control. This means 
that a controller can be designed and simulated 
while in the background a DDC-program works on a 
real process using a common data base. Thus it is 
possible to replace an active DDC-program by a new-
ly designed algorithm at any time. 
KEDDC is a comprehensive CAD-package designed to 
cover a wide range of control system engineering 
tasks. It contains modules for process identifica-
tion, system analysis, controller design, simula-
tion and controller implementation based on a 
broad variety of modern as well as classical ap-
proaches for SISO and MIMO systems. The user-friend-
ly interface, graphic output and state-of-the-art 
numerical algorithms give the control engineer 
more power at his fingertips than ever before. 
Based on the KEDDC framework, developed at Ruhr-
University Bochum, KEDDC is available in different 
configurations and versions. It can be easily 
tailored and adopted by the user, as it is written 
in FORTRAN. Thus it represents an open system. 
KEDDC can be used in the form of stand-alone pro-
grams or in the form of a comprehensive control 
engineering library. It provides a system which 
minimizes the engineering and programming re-
sources required for the complete circle of system 
identification, controller design and design veri-
fication. The programming system has the following 
features : 
- simple command-driven dialog combined with ques-
tions and answers, 
- hierarchy of independent program modules, 
- control engineering library, 
- reliable numerical algorithms drawn from recent 
research in numerical analysis, 
- device independent graphics output based in the 
ACM/SIGGRAPH core system standard, 
- transformation of system representation forms 
using alternative sets of strategies or numerical 
algorithms, 
- signal analysis and filtering, 
- off-line and on-line identification using deter-
ministic and stochastic approaches (20 methods), 
- controller design (15 approaches), 
- observer design (pole placement, Kaiman filter), 
- simulation (general and special purpose simula-
tors) , 
- adaptive controller design (5 approaches), 
- controller implementation (simulation, real time), 
- standard tasks centralized in 'Manager1 programs. 
To provide the necessary flexibility for solving 
33 

34 
H. Unbehauen 
the wide variety of problems, the systems may be re-
presented in 10 forms in the KEDDC: 
- series of deterministic or stochastic input and/ 
or output signals, 
- series of auto- or crosscorrelation values, 
- discrete values of the pulse response, 
- discrete values of the step response, 
- transfer function (matrix) in s-domain, 
- transfer function (matrix) in z-domain, 
- discrete values of frequency responses, 
- matrices for continuous state space, 
- matrices for discrete state space, 
- polynomial matrices. 
A variety of transformations between these forms is 
possible. 
The KEDDC system requires no special programming 
knowledge. Help facilities and menu selection lists 
are available. It has, thus, become an indispensible 
tool not only to the advanced control engineer but 
also to the students of automatic control-
SOME FUNDAMENTAL DEMANDS FOR CACSAD-
SYSTEMS IN CONTROL EDUCATION 
The main object of CACSAD-systems should be to sup-
port the analytical and the graphical techniques, 
and thereby relieving the control engineer of labo-
rious calculations. In control education, CACSAD-
systems are becoming more an important supplement 
to traditional courses rather than a self-study unit 
for computer-aided instruction and learning. The li-
mitation of computer-aided instruction and learning 
is not acceptable in teaching control engineering, 
because the student cannot use the packages to solve 
his own problems. 
One of the main advantages of CACSAD-systems for con-
trol education is that even sophisticated methods 
are more easily understood, accepted and applied by 
the students. For this reason, the program packages 
must be easy to learn and to use. HELP-functions 
for understanding and entering the different layers 
of the program structure at any time as well as menu 
selection lists for the interactive use should be 
available. The algorithms must be reliable. Better 
simulation capabilities should exist within a CACSAD 
system. Graphics terminals used in a CACSAD-system 
should be supported by simple ergonomie principles, 
as e.g. good readability in an easily understandable 
form. 
For teaching control, a CACSAD-system must be used 
as a tool at different levels. As the application 
of a CACSAD-system saves time for the student, he 
can look at much more realistic plant models and 
examples, which could not otherwise be solved by 
pencil and paper in reasonable time or for which 
only a numerical solution is possible. More com-
plicated problems, as e.g. higher order systems, pa-
rameter estimation, multivariable linear and non-
linear systems can, therefore, easily be investi-
gated. Special effects of parameter variations such 
as e.g. variation of controller parameters, samp-
ling time, weighting factors etc. can thus be con-
sidered. 
CACSAD-systems are becoming an indispensible tool 
in control education for two purposes: 
- The student becomes much closer to real engineer-
ing problems with reasonable effort. 
- The student must be aquainted with tools, which 
he will use tomorrow in industry. 
When laboratory experiments are combined with CACSAD, 
mathematical models can be compared with experiment-
al data. On-line parameter estimation can be used 
to verify the models which in turn can be used for 
design. Furthermore it is highly desirable to inter-
face CACSAD-techniques to real-time experiments in 
a control laboratory. 
THE ROLE OF CACSAD IN THE DIPLOMA-COURSE 
During their education in the electrical engineering 
department of Ruhr-University, the students are in-
troduced to CACSAD at different levels. In the 6th 
semester (3rd year) every electrical engineering 
student starts with a basic course on "Control 
Systems 1" (4 hours per week). Students, who want 
to specialize in control engineering continue in 
the 4th year with further lecture and laboratory 
courses of the control group. In a period of about 
two years, the students come into contact with 
CACSAD at different levels, starting from labora-
tory courses up to the final diploma thesis. Table 
1 gives a short survey about the usage of the CACSAD-
package KEDDC. 
KEDDC is first used in the Control Laboratory 2. 
This course consists of 8 experiments, wherein 3 of 
them KEDDC is used. In the first experiment the 
students will be acquainted with the design and im-
plementation of digital compensator controllers. The 
theoretical background is known from lectures. As 
this experiment is the first touch with KEDDC, an 
extensive supervisory control by the teaching as-
sistant is necessary. The students have to design 
and evaluate different types of compensator control-
lers. The plant to be controlled is simulated on an 
analog computer and the controller is designed and 
implemented on a process computer. The students 
learn computer dialog, controller implementation 
for DDC operation. They begin to learn about real-
time experimentation and evaluation of experiemts 
using CACSAD-techniques. 
In the second experiment the students apply the 
knowledge gained from the first experiment to the 
attitude control of a laboratory-scale vertical 
take-off aircraft. Digital controllers have to be 
designed and simulated for this unstable plant. The 
best controller has to be selected and tested in 
real-time. Only a minor assistance is necessary. 
In the third experiment students, starting with a 
mathematical model of an overhead crane, use 
CACSAD to design and evaluate real-time experiments 
with LQ-controllers and observers for angle and 
speed. KEDDC is extensively used to compare con-
trollers designed using different weightings. 
The examples from a laboratory course show, how 
CACSAD-tools are used in student education. The 
scope of a CACSAD-system should be at least the 
same as of all control curricula. KEDDC supports 
all methods and techniques which are taught by the 
control group. The students can come to the com-
puter terminal without any programming knowledge 
and can leave with a complete solution, well docu-
mented in terms of listings and diagrams. 
With increasing use of CACSAD-packages in control 
engineering education, a need has arisen to estab-
lish a special course in computer-aided analysis 
and design of control systems. In order to involve 
the students also in the development of CACSAD-
systems it is necessary that they get a deeper 
knowledge in software engineering, to understand 
the details of data structures, data handling etc. 
Furthermore their background in numerics is con-
solidated. 
In the CACSAD-course (item 9 in table 1) the stu-
dents are introduced to CAD-techniques. Using 
typical examples they learn the elements of KEDDC. 
The lecture part of this course is sketched as 
follows: 

CAD in Control Engineering Education 
TABLE 1. Courses in Control Education and their Relations to CACSAD 
35 
Item 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
Course 
Control 
Systems 
Control 
Lab 1 
parallel 
to item 1 
Control 
Systems 
2 
Control 
Lab 2 
parallel 
to item 3 
Control 
Systems 
3 
Simula-
tion 
tech-
niques 
Simula-
tion Lab 
parallel 
to item 6 
Seminar 
CACSAD 
Study 
Project 
Diploma 
Project 
(Thesis) 
Hours/ 
week 
4 
3 
3 
3 
3 
3 
3 
2 
3 
4-6 
months 
1-2 
days/ 
week 
6 
months 
full-
time 
Content 
theory of linear continuous-time systems, analysis 
and synthesis, stability, compensation 
introduction to practical applications of classical 
control methods, first touch with simple digital 
controllers 
state-space theory, multivariable systems, digital 
control, non-linear systems 
experiments for advanced digital control and iden-
tification, process computer application on small 
laboratory-scale processes 
system identification, parameter estimation, adap-
tive control, optimal control 
analog, digital and hybrid simulation, use of simu-
lation systems and simulation languages 
experiments on analog, digital and hybrid computers 
varying control topics 
introduction into CACSAD-systems, numerical methods, 
applications to control system analysis and design 
cooperation with research assistants and staff, small 
projects drawn from recent research 
cooperation with research assistants and staff, 
original research drawn from actual research pro-
jects, development of new CAD-techniques 
Usage of KEDDC 
ι 
-
-
-
tools for design 
of digital con-
trollers 
for demonstration 
purposes 
simulation tools 
for demonstration 
simulation tools 
depends on topic 
classroom exer-
cises on terminals 
extensive use and 
new developments 
extensive use and 
new developments 
- Introduction into CACSAD. Goals and scope of 
CACSAD. 
- Numerical representation of dynamical systems. 
- Transformations between different representation 
forms. 
- Repetition of numerical methods with respect to 
CACSAD-problems, such as solving systems of li-
near equations, rank calculation, singular va-
lues, eigenvalues, system transformation, opti-
mization. 
- Design of interactive system using graphics. 
- Automation of classical approaches for SISO-
systems, such as frequency-domain techniques 
using graphics, root-locus plot, z-transformation. 
- Digital simulation of dynamical systems, integra-
tion techniques, design of digital simulation 
systems and simulation languages. 
- Techniques for controller synthesis, pole assign-
ment, LQ, LQG design, observer design, solving 
Riccati or Liapunov equations. 
- Introduction into KEDDC as an example of a CACSAD 
system. 
ParaLlel to the lecture, classroom exercises are 
offered and the student can use KEDDC for solving 
these CACSAD-problems on intelligent graphics ter-
minals. He will be introduced to dialogue handling 
using simple problems. After getting started - this 
will be after the 2nd session - the student has to 
solve problems. The background and the solution from 
the control engineering point of view will be 
sketched, but he has to get his results independent-
ly. We observed that these exercises are very well 
accepted by students as they are very much inter-
ested in this area. The number of students ex-
ceeded our expectation by a factor of two. 
As KEDDC is used both in education and as well as 
in research, the students can cooperate with the 
staff on actual research problems during their 
studies and diploma projects (item 10 and 11). The 
basic idea is the following. Students, who are in-
volved in small research projects, e.g. developing 
new control techniques, are adding only their spe-
cific parts to the system, without reprogramming 
the part which their predecessors had already done. 
The student can concentrate completely on his prob-
lem. Reliable parts will remain in the system and 
will be available for the entire KEDDC-community. 
Most of the parts of KEDDC have been added in this 
way. Thus KEDDC remains as an open system, which 
can be extended at any time. 

36 
H. Unbehauen 
EXAMPLE OF A TERMINAL SESSION (Schmid, 
1985) 
To illustrate the dialog of the package, a hardcopy 
of a session during classroom exercises has been in-
cluded in this section. This example shows some 
sections of the original dialog (Table 2). Student 
input is underlined, command lines are printed in 
bold letters and command menus are framed. Graphics 
output appears on the screen at the phrase '... 
MAPPED TO VIEWPORT . . . ' . Here graphics output is 
not exactly placed in chronological order with the 
dialog. The hardcopy is printed at the end when the 
image is complete. 
The problem is to design a LQ-controller for a 
turbo-generator plant (Fig. 1). A plant model was 
given for this 9-th order system with two inputs 
and two outputs. In order to explain this session, 
section numbers are added to the left margin. 
Section (1) starts with the Frequency Manager. The 
command menu is shown typing??. It appears in a 
special window. Principle gain plot is requested 
but rejected as explained using HELP at (2). The 
principle gains for a system read from file TGM 
are plotted at (3). At (4) Matrix Management is 
interlaced to generate a topological printout and 
a 3D-mesh surface at (5) for the system given in 
state-space representation. Simulation is simply 
TABLE 2. Original dialogue of a terminal session 
<i> 
KEDDÇ 
K E D D C r 
F R . 
F R M G 
s 2JL 
tHtttttt*#*t*t»tt»t*it* Freouencu Management ♦»«♦«♦♦»»»»»«»««»Page i 
, 
SYSTEM·. 
— — 
D O R T H ER CALCULATIONS 
RE Read sastea from file 
PO Popov-frequency response 
G(5),G(z),u(t),u(t),G(jw) 
IV Inverse frequence response 
?(t),h(t),CA,B,C) 
WC Magnitude/phase for spec. freq. 
ist systen datas I WH Write step RA Magnitude or phase aargins 
FREQUENCY TABLE·, response on file TT additional deadtine 
GO Generate frequency table 
FH Step response fro« freq. resp. 
EO Edit frequency ta51e 
CONNECTIONS: 
RO Re3d frequency table fro« file 
S2 Read 2nd systea from file 
10 Input frequency table using dialog ++ Parallel connection 
L0 List frequency table . 
·* Series connection 
WO Write frequency table on file 
// Negative feedback connection 
FREQUENCY RESPONSE: 
GRAPHICS: 
.FG Calculate frequency response 
BO Bode plot complete 
RF Read frequency response from file 
BM Bode plot magnitude 
IF Input frequency response using dialog BP Bode plot phase 
EF Edit frequency response 
NY Nyquist plot 
LF List frequency response 
NI Nichols plot 
WF Write frequency response on file 
DH Step response 
FM Create frequency response aatrix 
TR Toggle curve tracking on/off 
on file 
KP Change no. of dots per dia. 
ST Status protocol 
PG Principal gain plot 
Standardfilenames see next page 
(0) 
<7) 
MMGR = 
FRMR = 
KEDDC: 
DIGSI: 
KEDDC: 
MMGR -. 
EX 
ee 
DG 
ee 
MM 
B-S 
FILENAME = ? TZM:iDA 
FILE=TZM 
i.DA, type=MA 
created using MMGR by SCHMID on 
TURBOGEN. STATE SPACE MODEL A2Y3 
9 . 
9 . 1 9 8 3 a t 1 1 . 4 6 
3 BLOCKS, 
3 MATRICES I N 1ST BLOCK 
BLOCKNO., MATRIXNO. = ? 2 
MMGR 
= D M 
SAMPLING INTERVAL = ? 
J 
MMGR 
= E J . 
DO YOY WANT GRAPHICS ? Y 
EIGENVALUES 
F R M G 
: P_G 
/FR-004 THERE IS NO FREQUENCY TABLE 
(2) FRMG Ï HE 
/FR-004 THERE IS NO FREQUENCY TABLE ! 
You have initiated an operation 
which 
requires a frequency 
table. 
This table isn't defined. 
Read table from file with RO, or specify 
table 
interactively 
with 10, or generate it automatically with GO. The last one is 
the most comfortable way if the frequency 
range is initially 
unknown. 
FRMG = GO 
RECOMMENDED FREQUENCY RANGE FROM 
1.79416 
TO 
899.2309 
FREQUENCY RANGE FROM, TO = ? 1,1E3 
NUMBER OF FREQUENCY VALUES = ? 110 
F R M G 
·. P G 
FREQUENCYFACTOR = ? 
FILENAME = ? TGM: --DA 
file=TGM 
i.DA, type=UE 
created using MMGR by SCHMID on 4. 9.19S3 at 11.35 
TURBOGEN. MODELL 1 MIMû 
IT IS A TRANSFER MATRIX 
NUMBER OF INPUTS = 2, NUMBER OF OUTPUTS = 2 
(3) MAXIMUM PRINCIPAL GAIN IS MAPPED TO VIEWPORT 4, CURVE 1 
MINIMUM PRINCIPAL GAIN IS MAPPED TO VIEWPORT 4, CURVE 2 
<4) F R M G = ej» 
K E D D C : M_M 
MMGR 
z R_S 
FILENAME = ? TZM-- :DA 
NO 
REALPART 
1 
.3S5317 
2 
.385317 
3 
.462243 
4 
.462243 
5 
.644391 
6 
.644391 
7 
2.13101SE-02 
8 
2.131015E-02 
9 
.715286 
EIGENVALUES ARE MAPPED TO VIEWPORT 
M M G R : N_U 
DO YOU WANT GRAPHICS ? Y 
ZEROS — 
IMAGINARYPART 
.285704 
-.285704 
.308177 
-.308177 
.250971 
-.250971 
.437934 
-.437934 
0.00000 
5, CURVE 1 
IMAGINARYPART 
0.00000 
0.00000 
0.00000 
.463010 
-.463010 
.360620 
.360620 
FILE=TZM 
:.-DA, type = MA 
created using MMGR by SCHMID on 
TÜRBOGEN. STATE SPACE MODEL A2Y3 
9. 9.1983 at 11.46 
NO REALPART 
1 
-2.03490 
2 
-1.73257 
3 
.770414 
4 
.368101 
5 
.363101 
6 
.449659 
7 
. 4 4 9 6 5 9 
ZEROS ARE MAPPED TO VIEWPORT 
MMGR 
= E X 
D I G S I : R E . 
FILENAME = ? TGM:: DA 
DIGSI* S i 
SIMULATION STEP SIZE - ? JL 
SIMULATION TIME 
■ ? JJL 
SIGNAL U ( 1> IS MAPPED TO VIEWPORT 
SIGNAL U < 2> IS MAPPED TO VIEWPORT 
SIGNAL Y ( 1) IS MAPPED TO VIEWPORT 
5 , 
CURVE 
2 
1 , 
CURVE 
1 , 
CURVE 
3 , 
CURVE 
3 BLOCKS, 
3 MATRICES IN 1ST BLOCK 
BLOCKNO., MATRIXNO. = ? 2 
MMGR 
* M S 
DO YOU WANT GRAPHICS ? Y 
MATRIX A 
<9> SIGNAL Y ( 2) IS MAPPED TO VIEWPORT 3, CURVE 2 
controlled outputs 
0 0 
0 + 
+ 0 
0 0 
+ 0 -
+ - 0 0 0 + 
- 0 
0 0 
0 0 
0 0 
0 0 
0 
0 
- 2 0 
+ + - 0 + 
+ 0 0 0 
MATRIX B 
0 + 
0 + 
- 0 
+ 0 
MATRIX C 
O Û Û 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 
MATRICES MESH SURFACE IS MAPPED TO VIEWPORT 
:β~ ,ε i. —601 
O 2 4 β Θ 10 
control inputs ^_ 
, 1 
II. 
| x 
1 
N 
\ 
principe 
K 
. 9* i n* 
\ 
DIGSI > EX. 
FRMG . EX 
KEDDC> EJ< 

CAD in Control Engineering Education 
37 
turbo 
motor 
synchronous 
tacho 
qenerator 
generator w 
serv 
—<0>—X acfu a ti nq va Ive 
IT 
thigh p ressure air 
excitation 
u, 
1 
pressure 
u-
turbo 
generator 
balanced 
load 
frequency 
voltage 
->y2 
B. Göhring (1975). KEDDC, ein kombiniertes 
Prozeßrechnerprogrammsystem zum Entwurf und 
Einsatz von DDC-Algorithmen. PDV-Bericht, KFK-
PDV 37. 
Fig. 1. The turbogenerator plant 
interlaced at (6) and then a second Matrix Manage-
ment at (7) to display the pole zero pattern of the 
discrete-time system to be controlled. At (8) simu-
lation is continued. After some configuration dia-
log, which is omitted here, the screen shows the 
results of all sections at (9). The graphics view-
ports are numbered from left to right beginning at 
the bottom of the screen. The viewport number (5) 
is the small one which is inside of number 3. 
CONCLUSIONS 
Education of control engineering in CACSAD-soft-
ware has become almost a necessity. CACSAD-tools 
will bring the student closer to engineering reali-
ties with modest effort. It seems, however, ne-
cessary that he is still aquainted with independent 
analytical techniques, which can be easily applied 
by simple hand calculation in order to check his 
results with respect to order of magnitude. Thus, 
showing a sound scepticism against computer re-
sults, CACSAD-techniques represent a very effi-
cient tool to supplement the traditional course 
work. There is no doubt, that the control engi-
neering student using this tool can better learn 
by comparison about the efficiency of different 
methods for selected test examples. 
A number of fully developed CACSAD-packages is 
available today, which meet the educational re-
quirements quite well. Of course, more improvements 
can still be done, as e.g. more intelligent dialog 
systems would be advantageous for novices. On the 
other hand more intelligent dialog interface should 
also be available for a student if CACSAD-packages 
are used as knowledge base in forthcoming expert 
systems. 
REFERENCES 
Schmid, C. (1985b). KEDDC - A Computer Aided Ana-
lysis and Design Package for Control Systems. 
In M. Jamshidi and C.J. Herget (Ed.), Advances 
in Computer Aided Control Systems Engineering. 
North-Holland, Amsterdam. 
Schmid, C. (1984). KEDDC - A computer-aided analy-
sis and design package for control systems. 
Proceed. Workshop "Computer aided control system 
design", Institute of Measurement and Control, 
Brighton (UK), pp. 50-55. 
Schmid, C , H. Unbehauen (1979). KEDDC, a general 
purpose CAD software system for application in 
control engineering. Prep. 2nd IFAC/IFIP Sympo-
sium on Software for Computer Control (S0C0C0), 
Prag, paper C-V. 
Unbehauen, H., C. Schmid, F. Böttiger, B. Bauer, 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A NEW GENERATION OF CAD SYSTEMS 
THE INTERACTIVE SYSTEM BLAISE FOR 
CONTROL ENGINEERING 
F. Delebecque and S. Steer 
IN RI A (Institut National de Recherche en Informatique et an 
Automatique), 
Domaine de Voluceau, BP 105 Rocquencourt, 78153 Le Chesnay Cedex, France 
A b s t r a c t . We give a d e s c r i p t i o n of t h e c a p a b i l i t i e s of the B l a i s e system which has been 
designed as an i n t e r a c t i v e t o o l i n computer a i d e d e n g i n e e r i n g . This system implements a 
f u l l programming language working on a d a t a b a s i s adapted t o c o n t r o l p r o b l e m s . I t has 
been designed t o achieve e x t e n s i b i l i t y , p o r t a b i l i t y and numerical 
e f f i c i e n c y . 
Keywords. C o n t r o l e n g i n e e r i n g , CAD s y s t e m s , Numerical 
c o m p u t a t i o n s . 
INTRODUCTION 
An i n c r e a s i n g need has appeared i n such f i e l d s as 
t e a c h i n g , i n d u s t r i a l design o r r e s e a r c h t o have 
powerful CAD t o o l s i n c o n t r o l e n g i n e e r i n g Γ.Ι? Γ 2 ] . 
One can observe ( a t l e a s t ) 
t h r e e d i f f e r e n t k i n d s of 
needs : 
- a reliable and documented software library of ma-
thematical programs for modeling, analysis and 
design, 
- an interactive system allowing usage of the l i -
brary with as small as possible programming effort, 
- f a c i l i t i e s t o make formal 
c a l c u l u s . 
To a l a r g e e x t e n t , 
t h e s e t h r e e domains can be d e -
veloped i n d e p e n d e n t l y , b e f o r e b e i n g p o s s i b l y 
i n t e -
g r a t e d i n an e x p e r t system. 
The B l a i s e system t h a t we s h a l l b r i e f l y d e s c r i b e i n 
the s e q u e l has been designed t o meet t h e c o n s t r a i n t s 
of an i n t e r a c t i v e system i n t h e above 
framework. 
SPECIFICATIONS 
The main f e a t u r e s which have appeared t o us as 
e s s e n t i a l f o r the design of an i n t e r a c t i v e 
system 
have been t h e following : 
i) A high l e v e l programming l a n g u a g e . Indeed a menu 
driven package seems too r i g i d t o answer t o t h e 
l a r g e amount of problems which a r i s e i n c o n t r o l 
e n g i n e e r i n g . 
i i ) A d a t a s t r u c t u r e adapted t o c o n t r o l systems p r o -
blems. The system should c o n v e n i e n t l y o p e r a t e on 
such o b j e c t s as m a t r i c e s , p o l y n o m i a l s , 
polynomial 
m a t r i c e s , dynamical s y s t e m s , e t c . . . 
i i i ) 
E x p a n d a b i l i t y by an easy i n t e g r a t i o n of new 
f u n c t i o n s , 
implementing (or updating) a new a l -
gorithm. 
iv) P o r t a b i l i t y , 
although t h i s c o n s t r a i n t i s 
l e s s 
severe with t h e advent of low c o s t h a r d w a r e . 
v) R e l i a b i l i t y and numerical 
e f f i c i e n c y . 
These l a s t t h r e e p o i n t s and t h e f a c t t h a t most of 
a v a i l a b l e packages a r e w r i t t e n i n F o r t r a n 
have 
imposed t h e choice of t h a t language f o r t h e i m p l e -
m e n t a t i o n of t h e system. 
vi) F i n a l l y one can r e q u i r e t h a t the system should 
be a b l e t o d e a l w i t h non l i n e a r problems 
(Opti-
m i z a t i o n , 
s i m u l a t i o n , . . . ) . 
THE BLAISE SYSTEM : MAIN FEATURES 
Our s t a r t i n g m a t e r i a l has been MATLAB Γ3"Ι, a choice 
a l r e a d y made by o t h e r groups 
r 4 , 5 , 6 ~ l . Indeed MATLAB 
i s very w e l l s u i t e d f o r t h e above p o i n t s i i i , i v , 
v. In a d d i t i o n i t i s r e a s o n a b l y small 
(about 4000 
l i n e s of f o r t r a n ) 
and a l s o i t 
(almost) 
d e f i n e s an 
i n t e r a c t i v e programming language, thus p a r t l y 
f i l l i n g t h e above r e q u i r e m e n t i ) . I t s s y n t a x , 
c l o s e 
t o t h e u s u a l mathematical language makes i t very 
a t t r a c t i v e t o c o n t r o l 
e n g i n e e r s . 
These c h a r a c t e r i s t i c s have been k e p t i n the B l a i s e 
System. To achieve t h e r e q u i r e m e n t of a g e n e r a l 
purpose system we have been l e d t o improve i t i n 
t h e following s e n s e s : 
- a comprehensive data basis, 
- parametrized "macros", 
- additionnai powerful general purpose numerical 
tools. 
These choices have been made to efficiently 
deal 
with the huge variety of control problems and al-
gorithms. For instance multivariable linear systems 
can be described by several different 
representa-
tions (state space, transfer matrix, matrix frac-
tions , 
, . . . ) . 
General purpose requirement implies that the poten-
t i a l users must have some experience in control : 
the user has to choose representation of his pro-
blem, the algorithm to solve i t and the system pro-
vides him with a l l the necessary tools. However for 
teaching purposes the system can rapidly solve 
standard problems by macros used as 
"black-boxes". 
The data structure 
We have completely modified the data structure of 
MATLAB in order to define other kinds of variables 
than complex matrices. In particular we have dis-
tinguished between real and complex matrices and 
have introduced the new tvpes "character string", 
"polynomial matrix" and "macro". 
The major i n t e r e s t to introduce new types of 
39 

40 
F. Delebecque and S. Steer 
variables rests upon the possibility to employ the 
usual operators + - * / . . . with a sense depending 
on variable's type, and the capabilities to convex 
niently represent complex e n t i t i e s . 
In particular one may think useful, in control de-
sign, to have at disposal rational function matri-
ces. However the knowledge of the numerical pro-
perties of algorithms involving such objects is 
limited (poles-zeros cancellation problems, . . . ) . 
In addition these problems are often more relevant 
to formal calculus (e.g. factorisation of polyno-
mials with rational coefficients 
. . . ) for which 
specific software already exists (MACSYMA, REDUCE, 
. . . ) . For these reasons this particular type of 
variable has not been introduced in the system. 
As far as numerical computation is required a 
strong emphasis is put on state space representa-
tion. "Compound variables" allow one to easily 
represent linear systems as triple of matrices or 
as a pair of polynomial matrices. "Compound varia-
bles" allow also to represent much more complicated 
linear systems such as parameter varying linear 
systems (A(x), B(x), C(x), D(x)) where A>B,C,D are 
now matrix valued macros. 
Macros 
To answer to the large amount of algorithms in 
Control Engineering we have been led to develop 
the notion of macros. These macros admit any type 
of variables as input or output parameters and may 
refer to any previously defined variable . For the 
user, there is no difference between a macro and a 
basic function of the system. In particular these 
are totally recursive. 
In addition, the use of macros to define algorithms 
allows the user to pause at some crucial stages of 
the algorithm, to check intermediate results, to 
choose in view of these the most appropriate next 
stage or to set decision parameters. 
For debugging purposes i t i s also possible to set 
breakpoints in macros. 
The general philosophy of the system requires a 
large use of macros. In this respect, we have been 
led to write a compiler of macros which allows to 
skip the interpretation time. Usually compiled mar 
cros run two or three times faster than interpreted 
ones. Of course the use of a compiled macro is to-
tally similar to interpreted one. Thus, the effi-
ciency of the system is based on an "optimal" 
choice between general purpose functions 
(written 
in Fortran) and the macros (written in Blaise). 
For example i t is very well known that ther exist 
a large variety of Riccati equations (discrete or 
continuous time systems, explicit or implicit sys-
tems, singular or regular systems, . . . ) . They can 
a l l be easily solved ( i . e . via very short macros) 
once one has at disposal an algorithm for the "or-
dered" computation of generalized eigenvectors Γ7] 
(basic function). 
To be more specific, suppose one wants to solve the 
equation : 
p = F ' P F - F'PG(R + G*PG)~ 
G'PF + Q 
The corresponding macro would be : 
/ / <P> = ricd (F,G,R,Q) 
<n,n> = size (F) 
I = eye (n) 
0 = 0*1 
A = <I, (G/R)*G' ; 0, F'> 
B = <F,0 ; -Q, I> 
U = stab (A,B, 'disc') 
P = U(n+1 : 2*n,:) / U(l:n, :) 
/ / end 
The general purpose functions 
We shall not describe here the complete set of func 
tions available in Blaise. 
They implement : 
- major linear algebra algorithm (unpack-Eispack) , 
- control oriented tools such as 
- lyapunov and Sylvester equations 
- matrix exponential 
- frequential SISO plots 
- matrix pencils calculations 
- zeros computations 
. . . , 
- simulation algorithms (ODE) 
- optimization algorithms, 
- graphics. 
Much care has been taken to implement general pur-
pose functions : the use of optional input or out-
put parameters allows a simple usage of these func-
tions without loosing anything of the available re-
s u l t s . In this respect the main difficulty here 
lies in an adequate choice of the optional parame-
t e r s . An obvious example is the graphic command. 
Furthermore, the set of function is very easily 
extensible, the amount of work required is equiva-
lent to writing a simple driver routine. 
Non linear problems 
Generally the computer description of non linear 
problems i s only possible through a program. 
Many CAD systems can only deal with predefined non 
l i n e a r i t i e s such as saturation . . . Since the ma-
cros are elements of the data basis, the Blaise 
system can handle these objects. In particular ma-
cros can be input or output parameters of functions 
or macros, they can be run inside the calling func-
tion . In this case i t looks like the fortran "ex-
ternal". 
A significant application is the ability to define 
as a macro the non linear functions which arize in 
optimization [8] or ODE ("91 problems without any 
change to the optimizer or ODE solver. 
For these particular problems, we have managed the 
feasability to directly call fortran routines 
instead of macros in order to improve the efficien-
cy if macros, even compiled, are too much time con-
suming. 
Example 
Consider the following system : 
R 
u 
S 
y 
In the above figure : 
. S is a non linear continuous time system descri-
bed by : 
x = f(x,t,u) 
y = g(x,t,u) 
. R is a non linear discrete time regulator descri-
bed by : 
z + = fr(z,t,y,yr) 
u + = gr(z,t,y,yr) 
h the sampling period. 

The Interactive System Blaise 
41 
Assume that one wants to compute y at the sampling 
instants (o,h, . . . , n.h). 
To simulate such a system one would f i r s t have to 
define the macros (f,g,f , g ) which describe the 
^ r'^r 
system e.g. 
variables of the Blaise data basis to MACSYMA. We 
have in mind to automatically generate Blaise ma-
cros implementing analytical formulas derived from 
MACSYMA's symbolic calculations. Of course this 
interface is totally MACSYMA dependent... 
// <xdot> = f(t,x,u) 
CONCLUSION 
xdot = ... 
// end 
Then one could write the following short macro which 
uses the general purpose ode solver. 
// <V > = Simul (n,h,x ,y ,z ,y ) 
" 
J 
o o o Jr 
Y = y0 
// loop on sampling instants 
for k = 1 : n, // 
t = t. 
o 
1 
// x ,y , z initial states 
o o o 
S ■ H + h 
/ / one steep of discret 
u = g (z , t ,y (t ),y ) 
^r 
o 
o J r 
o 
,Jo 
z 
= f (z , t ,y (t ),y ) 
o 
r
o
o
r
o
o 
/ / integration of continuous sys-
tem over Tt , t, 1 
o 
1 
xo = o d e ( x o , t o , t 1 , f ) 
x l = 
g (W u ) 
// saving output a time t 
end 
//end 
In this example several interesting features of the 
system may be underlined : 
- The macros f,g,f 
,g 
may implement any type of 
(static or dynamic! non linearity and may use any 
type of variable (matrix, macro, . . . ) . 
- y 
may be, wihtout any change, either the vector 
defining the value of regulation input at sampling 
instants or the macro defining a continuous time 
signal. 
- Some parameters are sent as argument (y,n,t,x , 
y , z ,y ) and others as global variables (g ,f , 
o 
o r 
r 
r 
f , g , . . . ) . 
- The general purpose ODE function may receive 
several optional parameters to specific the inte-
gration method, tolerances, jacobian, 
. . . 
- Here f is defined by a Blaise macro, but i t is 
also possible to define i t by a Fortran routine 
compiled and linked with the system. 
Interface with MACSYMA 
As already mentioned and at the stage of develop-
ment achieved a need for non numeric computations 
has appeared. 
The Blaise system is now largely defined and seems 
to be rather well adapted to the numerical solution 
of control problems in an user-friendly environment. 
I t is made of a core of about 12000 Fortran lines 
and a library of about 100 000 lines. 
A significant effort must be done for the defini-
tion of new functions through the development of 
standard library of macros and also a documented 
and reliable library of Fortran routines. 
This l a s t point which is probably the most crucial 
one largely uncompasses the framework of our pro-
ject and seems to imply a cooperation in a larger 
framework and the pursuit of important efforts to 
unify the basic algorithms which make the basis of 
any CAD system, efforts already i n i t i a t e d by other 
groups Γιο],[11~ΐ. 
REFERENCES 
Γ1 ] K.J. Aström : Computer Aided Modelling, Iden-
tification and Control System Design : A per-
spective IEEE-CSS Magazine (Nov. 1983). 
Γ2 ] IEEE-CSS Magazine : Special Issue on Computer 
Aided Design of Control Systems, Dec. 82. 
Γ3 ] MATLAB by C. Moler. University of New Mexico, 
Technical Report C581-1, 1982. 
Γ4 ] Control C and Matrix Environments for the CAD 
of Control Systems : J.N. L i t t l e , E. Emami 
Naeni, S.N. Baugert, Proceedings INRIA Conf. 
on Analysis and Optimization of Systems, Nice 
1984. 
[5 ] Matrix 
: A Data Analysis, Systems Identifi-
cation, 
Control Design and Simulation Package 
IEEE-CSS, Vol. 2,4 (Dec. 1982). 
Γ6 ] IMPACT, M. Rimvall, F. Cellier, Proceedings 
INRIA Conf. on Analysis and Optimization of 
Systems, Nice, 1984. 
Γ7 1 P. Van Dooren, A generalized eigen value 
approach for solving Riccati equations, SIAM 
J. Sei. Comp., Vol.2, (1981). 
Γ8 1 C. Lemaréchal : La norme Modulopt, Internal 
Report INRIA (1981). 
Γ9 Ί Hindmarsh A.C. : Lsode and Lsodi, two new ini-
t i a l value ODE solvers, ACM Signum Newsletter, 
Vol. IT (1980). 
Γ10] SLICE : M.J. Dennam, C.J. Benson, Internal 
Report 81/3, SEECS, Kingston Polytechnic 
(1981). 
[11] SYCOT : Systems and Control Tools. Internal 
report WGS, Eindhoven, Dec. 1983. 
Immediate examples are the computations of Jacobians 
for ODE solvers, computations of adjoint equations 
in control problems, analysis of transfert matri-
ces, 
. . . 
We have developped some specific programs in 
MACSYMA and small interfaces which permits to send 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
AN INTEGRATED ENVIRONMENT FOR 
COMPUTER AIDED CONTROL SYSTEMS 
ENGINEERING 
S. D. Goodfellow and N. Munro 
Control Systems Centre, UMIST, Manchester, M60 1QD, UK 
A b s t r a c t . 
The e n g i n e e r i n g 
of 
s o f t w a r e 
f o r 
Computer Aided 
C o n t r o l 
Systems 
Engineering 
(CACSE) using the concept of software t o o l s i s d i s c u s s e d . A s e t 
of 
t o o l s are p r e s e n t e d which w i l l p r o v i d e 
an i n f r a s t r u c t u r e 
upon which a 
f u l l y 
i n t e g r a t e d CACSE package could be r e a d i l y b u i l t . Emphasis i s placed on t h e man-
machine i n t e r f a c e . An input and an output t r a n s l a t o r 
a r e 
i n t r o d u c e d , 
and 
t h e 
i n t e r a c t i o n between them i s d i s c u s s e d . An a c t i o n manager, t o c o n t r o l the CACSE 
functions of a package i s 
p r e s e n t e d . 
The c o n t r o l 
of 
r e t a i n e d 
d a t a w i t h i n 
a 
package using a d a t a manager t o o l i s 
d i s c u s s e d . 
K e y w o r d s . 
C o m p u t e r - a i d e d 
system d e s i g n , Computer g r a p h i c s , Computer 
s o f t w a r e , 
D i s t r i b u t e d p r o c e s s i n g , Man-machine systems, Software 
e n g i n e e r i n g 
INTRODUCTION 
The next few years w i l l see an i m p o r t a n t 
e v o l u t i o n 
for 
e n g i n e e r i n g 
s o f t w a r e 
in g e n e r a l 
and 
Computer 
Aided Control Systems E n g i n e e r i n g 
(CACSE) 
s o f t w a r e 
i n 
p a r t i c u l a r . 
E n g i n e e r i n g 
s o f t w a r e 
must 
t a k e 
advantage of 
t h e h a r d w a r e c u r r e n t l y 
a v a i l a b l e 
t o 
enhance the man-machine i n t e r f a c e . The software 
must 
be e n g i n e e r e d 
so t h a t 
i t 
i s 
r e a d i l y 
a d a p t a b l e 
t o 
f u t u r e 
t e c h n o l o g i c a l 
change in t h i s a r e a . 
Software 
e n g i n e e r i n g 
a l s o 
p r o v i d e s 
a number of 
t e c h n i q u e s 
v;hich 
may 
be 
a p p l i e d 
t o 
CACSE 
s o f t w a r e . 
T h e s e 
techniques w i l l produce a s t r u c t u r e for the 
software 
which 
r e d u c e s 
t h e e f f o r t 
r e q u i r e d 
to m a i n t a i n and 
update software 
packages. 
S o f t w a r e 
e n g i n e e r i n g 
using the concept of 
software 
t o o l s 
( K e r n i g h a n , 
1976) 
p r o v i d e s 
an 
a t t r a c t i v e 
method 
of 
g e n e r a t i n g 
CACSE p a c k a g e s . 
T h i s 
p a p e r 
i n t r o d u c e s 
a 
s e t 
of 
t o o l s 
which 
form 
t h e 
i n f r a s t r u c t u r e 
of 
a 
CACSE 
p a c k a g e . 
The 
t e r m 
i n f r a s t r u c t u r e 
i s 
used 
h e r e 
t o 
d e s c r i b e 
a 
c o m b i n a t i o n 
of a p a c k a g e ' s s k e l e t o n and i t ' s 
b a s i c 
functions 
which support the a p p l i c a t i o n s 
a c t i o n s . 
These 
i n f r a s t r u c t u r e 
f u n c t i o n s 
include man-machine 
i n t e r f a c e management and d a t a management. 
The t o o l s 
d e s c r i b e d 
provide an 
base upon which an 
i n t e g r a t e d 
CACSE package maybe r e a d i l y 
b u i l t . 
Aims 
The use of a CACSE software may be classified into 
two types, operation and development. CACSE software 
is used in operation mode by control engineers, 
research workers, students, etc. as a tool in the 
engineering process. Such packages are 
used in 
development mode to generate new functions or to 
combine 
existing 
functions 
for a particular 
engineering task. Any one user may be involved in 
operation or development. Indeed, many users will do 
both. 
An analysis of the requirements of software provided 
for control engineering may be made (Jordan, 1985). 
The tools described in this paper are intended to 
fulfil those requirements. 
The main aim of the infrastructure under discussion 
is to improve the computational environment for the 
users of CACSE software, whether they are operating 
the package or developing 
the software. The 
operation of a CACSE package requires an environment 
in which control engineering may proceed with little 
or no hindrance from unfriendly and inflexible 
software. The development of a CACSE package 
requires an infrastructure and environment into 
which new functions may be introduced in a rapid 
and robust manner. 
Three secondary aims may be identified. 
1) The user must be given complete control 
over the operation of the software. The 
chain of command will run down from the 
user through the man-machine interface to 
the 
infrastructure 
and 
applications 
actions. The user's subordinates; i.e. 
the various parts of the software; may 
advise on certain courses of action and 
assist the user in all possible ways, but 
may not take overall control. 
2) CACSE software, particularly 
it's 
infrastructure, must be structured in a 
way which minimises the complexity of both 
introducing new algorithms to the package 
and modifying existing algorithms. The 
administrative details of the infra-
structure tools and low level applications 
actions will be hidden from the developers 
of the applications software. 
3) Data must be structured in a manner 
which is natural in a control engineering 
environment. The management of data is a 
function of the infrastructure which is 
hidden from the applications software and 
it's users, whether they are operating or 
developing the software. 
43 

44 
S. D. Goodfellow and N. Munro 
System Requirements 
The infrastructure envisaged wi 11 need to be 
implemented as a number of concurrent 
tasks 
communicating with each other. This is particularly 
necessary if the man-machine interface modules of 
the infrastructure are to provide support for the 
sophisticated user interfaces, which are reauired 
for CACSE software. The computing system upon which 
the infrastructure is built must also support the 
issue of svstem commands from within a program, so 
that 
compilation 
and 
loading 
of 
individual 
applications actions mav be manned from within the 
package. 
(^ 
USER 
J 
t 
LOW LEVEL GRAPHICS 
Î 
OUTEGRA 
JJ 
ACTION MANAGER 
ACTIVE 
4>PR0CESSES 
TIVE 
4> 
7£ 
7 £ 
DATA 
MANAGER 
1 
I "1 ~l 
1 
DORMANT FUNCTIONS 
1 
! _ . ] _ „L „1 
F i g . 1 The I n f r a s t r u c t u r e ' s 
A r c h i t e c t u r e 
THE INFRASTRUCTURE'S ARCHITECTURE 
The 
d i a g r a m 
in 
F i g . l 
i l l u s t r a t e s 
t h e 
p r i n c i p a l 
software t o o l s and t h e i r r e l a t i o n s h i p to each 
o t h e r . 
The modules i l l u s t r a t e d 
are s e p a r a t e t a s k s , thev may 
share the same p r o c e s s o r , or thev mav be implemented 
in a p a r a l l e l or d i s t r i b u t e d 
p r o c e s s i n g 
environment. 
The 
p r i n c i p a l 
s o f t w a r e 
t o o l s 
i n c l u d e 
an 
a c t i o n 
m a n a g e r , 
a d a t a m a n a g e r , 
and two t o o l s which 
form 
the man-machine i n t e r f a c e ; 
an i n p u t 
t r a n s l a t o r 
and 
an o u t p u t 
t r a n s l a t o r . 
The a c t i o n manager 
c o n t r o l s 
t h e o p e r a t i o n 
of 
a p p l i c a t i o n s 
a c t i o n s . 
The 
d a t a 
manager c o n t r o l s and s t o r e s a l l d a t a o t h e r than 
t h a t 
held bv an a c t i o n d u r i n g 
i t ' s 
e x e c u t i o n . 
The 
man-
m a c h i n e 
i n t e r f a c e 
t o o l s 
p r o v i d e 
m a p p i n g s 
from 
complex u s e r 
i n p u t 
t o 
d a t a 
f o r 
t h e 
a p p l i c a t i o n s 
a c t i o n s 
and 
from 
i n t e r n a l 
d a t a 
t o 
e x t e r n a l 
r e p r e s e n t a t i o n s on t h e output 
d e v i c e s 
a v a i l a b l e 
t o 
the 
u s e r . 
F u n c t i o n a l 
D e s c r i p t i o n 
The 
u s e r 
o p e r a t i n g 
a 
p a c k a g e 
b u i l t 
on 
t h e 
i n f r a s t r u c t u r e 
d e s c r i b e d h e r e w i l l be aware of 
o n l y 
two of the t o o l s , t h e s e are the input t r a n s l a t o r 
and 
t h e 
o u t p u t 
t r a n s l a t o r . 
T h e r e f o r e 
t h e 
u s e r ' s 
c o n c e p t u a l 
v i e w of 
t h e s o f t w a r e ' s 
s t r u c t u r e i s not 
n e c e s s a r i l y r e l a t e d to the a c t u a l 
s t r u c t u r e 
of 
t h e 
s o f t w a r e . 
For e x a m p l e , the u s e r may wish to view a 
data o b j e c t 
held by t h e d a t a m a n a g e r . 
The 
u s e r ' s 
r e a u e s t 
i s mapped i n t o a command to t h e d a t a manager 
by the input t r a n s l a t o r and the stream of d a t a which 
forms the r e p l y i s mapped to a r e p r e s e n t a t i o n on the 
output hardware a v a i l a b l e v i a the output 
t r a n s l a t o r . 
The r e p r e s e n t a t i o n 
used would be designed for 
the 
u s e r and mav not r e f l e c t 
the s t r u c t u r e of the 
s t o r e d 
d a t a . 
An i n d i v i d u a l a p p l i c a t i o n s a c t i o n w i l l be 
a c t i v a t e d 
as 
a t a s k , 
which 
may be 
c o n c u r r e n t 
w i t h 
o t h e r 
a p p l i c a t i o n s t a s k s . The a c t i o n may r e c e i v e input 
v i a 
the a c t i o n m a n a g e r , 
r e a d 
and w r i t e 
d a t a 
from 
t h e 
d a t a 
m a n a g e r 
and 
send 
o u t p u t 
t o 
t h e 
o u t p u t 
t r a n s l a t o r . 
The a p p l i c a t i o n 
a c t i o n 
w i l l 
have 
no 
d i r e c t c o n t a c t with the user or the d a t a b a s e . 
Communications 
Communication between the modules may be provided 
in 
one of two ways. In general t h i s communication 
w i l l 
be implemented using 
p i p e s , between the 
p r o c e s s e s , 
as i n d i c a t e d in F i g . 1. The use of pipes a l l o w s 
t h e 
i n f r a s t r u c t u r e 
t o 
be 
r e a d i l y 
i m p l e m e n t e d 
i n 
a 
d i s t r i b u t e d 
e n v i r o n m e n t . 
However, 
in 
c e r t a i n 
c i r c u m s t a n c e s one or more of the pipes may become a 
b o t t l e n e c k , 
r e s t r i c t i n g 
t h e 
p e r f o r m a n c e 
of 
t h e 
s y s t e m . 
The c o m m u n i c a t i o n s 
l i n k s 
from t h e 
d a t a 
m a n a g e r 
t o 
t h e 
a p p l i c a t i o n s 
a c t i o n s 
w i l l 
c a r r y 
p a r t i c u l a r l y 
l a r g e amounts of d a t a . T h e r e f o r e , 
when 
a p a r t i c u l a r 
c o m p u t i n g 
s y s t e m 
a l l o w s , 
t h e 
d a t a 
manager 
w i l l 
communicate 
w i t h 
t h e 
a p p l i c a t i o n s 
a c t i o n s v i a shared memory. 
MAN-MACHINE INTERFACE 
The 
e n v i r o n m e n t 
p r o v i d e d 
t o 
t h e 
u s e r 
by 
t h e 
i n f r a s t r u c t u r e 
w i l l 
depend 
c r u c i a l l y 
on the man-
m a c h i n e 
i n t e r f a c e 
t o o l s . 
The u s e r ' s 
view of 
t h e 
s o f t w a r e 
w i l l be 
c o n t r o l l e d w i t h i n the man-machine 
i n t e r f a c e . 
The c u r r e n t 
s t a t e 
of 
t h e 
a p p l i c a t i o n s 
d a t a 
and a c t i o n s i s r e p r e s e n t e d to the user 
through 
t h e o u t p u t 
t r a n s l a t o r 
and t o 
a l e s s e r 
e x t e n t 
by 
f e e d b a c k 
from the input t r a n s l a t o r . The u s e r ' s 
view 
of the a c t i o n s a v a i l a b l e a t a p a r t i c u l a r 
s t a t e 
i s 
a 
function of the input 
t r a n s l a t o r . 
The t o o l s d e s c r i b e d h e r e provide the foundation 
upon 
which 
a s o p h i s t i c a t e d man-machine i n t e r f a c e may be 
r e a d i l y 
b u i l t . 
T h e s e 
t o o l s 
meet 
two 
i m p o r t a n t 
r e q u i r e m e n t s . 
F i r s t l y , 
t h e y 
do 
not 
assume 
any 
p a r t i c u l a r 
f o r m a t 
of m a n - m a c h i n e 
c o m m u n i c a t i o n . 
S e c o n d l y , 
they provide a t r a n s l a t i o n f a c i l i t y 
which 
may be m o d i f i e d 
by t h e u s e r 
a t 
r u n t i m e , 
t h e 
u s e r 
w i l l 
be 
i n c o n t r o l 
of the t r a n s l a t i o n p r o c e s s . For 
example, t h e user may a l t e r the r e p r e s e n t a t i o n 
of 
a 
p a r t i c u l a r s e t of d a t a from a l i n e a r p l o t to a p o l a r 
p l o t or a l i s t of p a i r s of v a l u e s . 
Example 2 
f* 
Symbol 
Fig. 2 An example graph for dialogue definition. 
Input Translation 
The input translator, called INTEGRA (iNput of TExt 
and GRAphics) is briefly described here. A full 
functional 
specification 
has 
been 
given 
by 
Goodfellow and Munro (1985). INTEGRA uses a dialogue 
description to control the translation process. The 
dialogue description is based on state transition 

An Integrated Environment 
45 
networks, represented to the dialogue developer as 
a set of graphs. An example graph is illustrated in 
Fig. 
2. The graphs provide various levels of 
abstraction from a single character or graphical 
action 
through to complex commands and languages. 
The graphs are entered and edited graphically both 
before execution and at runtime. 
The translator uses the dialogue definition to check 
the syntax of input. The translator may follow 
several paths concurrently, therefore it provides a 
pattern matching capability as well as the ability 
to trigger more than one stream of actions with the 
same input. 
A variety of tools are provided for the user 
including macro languages, synonyms, prompting, 
menus, graphical icons, help, walkthrough, tracing, 
and customising. The developer is provided with 
facilities to report on the use of the application. 
The translator provides for the use of expert system 
techniaues 
to 
provide 
adaptive 
man-machine 
interfaces in the future. 
Output Translation 
The output translator receives data in it's internal 
form and converts it to a representation which may 
be 
readily 
understood 
by 
the 
user. 
The 
representation used 
will vary, depending on the 
output devices available and the user's customising 
of the system to his own personal tastes. The output 
translator relieves the application actions of 
responsibility for output formating at a much higher 
level 
than 
graphics 
packages 
such 
as 
GINO 
(CADCentre, 1983). 
The mapping of internal data to an external 
representation forms a natural part of systems such 
as SMALLTALK-80 (Goldberg, 1983) and has been 
investigated as part of a strongly typed distributed 
virtual memory (Hughes, 1984). 
The authors are investigating the use of state 
transition type graphs to control the representation 
of data. The representation chosen would 
be 
dependant on the type of data obiect and the current 
state of the application. The graphical language 
used would be consistent with that used by INTEGRA. 
Translator Interaction 
The above description of the two translators assumes 
thev work independently, however this is not the 
case. In a number of cases the input translation is 
dependent on the current state of the output. For 
example, the user may wish to pick an object from 
those displayed on an output device. At the lowest 
level,the input translator receives a pair of 
coordinates from an input device. To identify the 
object at that position on the screen it sends the 
coordinates to the output translator, which returns 
the object identifier. 
It is the identifier that 
forms the input to the syntax analyser. The 
translators interact with each other whenever thev 
need to share information or coordinate their 
activities. 
ACTION MANAGER 
The action manager will be 
responsible 
for 
initiating and controlling applications and system 
actions. The action manager will start with a number 
of dormant tasks. When an action is ordered by the 
input translator, one of the tasks is given the 
relevant code to execute. The input translator may 
send the action manager data to forward to the 
action during its execution. The user may also 
request the status of a particular action, or order 
the action terminated. The action manager responds 
by sending messages to the action or signalling it 
to terminate if it refuses to halt. 
DATA MANAGER 
The data manager will control the retained data. 
This data will include all the applications data 
except for data held by an action during it's 
execution. The data will also include a large amount 
of system data including the source code for all the 
applications and system actions and the dialogue 
definitions. 
Security is a key issue when such a large amount of 
information is retained. Each user will have a 
security code, giving him, and any actions he 
initiates, certain rights. Each user will only have 
access to some of the source code and dialogue 
definitions, the user is not explicitly informed of 
the existence of data for which he has no access 
rights. It is particularly important that the user 
is limited to information which he is likely to use, 
so that the useful information is not obscured in a 
mountain of other data. 
Function 
The structuring of data into objects has been 
recognised as an important requirement for CACSE 
software (Maciejowski 1984). The data manager will 
hold data as structured objects, an object maybe be 
made up of several other objects. A dictionary will 
be kept of the objects retained. Each user may 
inspect a copy of the dictionary, listing objects to 
which he has access rights. 
The data manager will receive requests for data 
objects from the active actions and the man-machine 
interface tools. The data manager responds by making 
the data available to the requesting task. The data 
may either be sent to the task using a pipe or if 
the data manager shares memory with the requesting 
task, it will be sent the address of the data in the 
shared memory. These two alternatives are equivalent 
to passing arguments by value and by address 
respectively. 
The data manager will have 
to deal with several 
concurrent tasks at any one time. Concurrent access 
to the data will be controlled using semaphores and 
request queues (Holt, 1984). Any number of tasks may 
read the same data object concurrently. However only 
one task may have write permission for a data object 
at a time. Whilst a task has write permission for a 
data object tasks requesting to read the object 
will be given a copy of the data as it was when the 
writing task was given write permission. The reading 
tasks are also informed that the data is being 
modified. 
User Access 
The man-machine interface will provide the user with 
several ways of accessing the data retained by the 
data manager. The user may, of course, request the 
output of a particular object by name, the output 
t r a n s l a t o r will reply with a representation of that 
object. From any given object, the user may browse 
around the database, following the structure up to 
an o b j e c t ' s super-object or down to an 
o b j e c t ' s 
sub-objects. The browsing system is obviously useful 
for 
inspecting 
control 
system d e s c r i p t i o n s 
and 
dialogue d e f i n i t i o n s . The t h i r d method of access 
will provide a r e l a t i o n a l a b i l i t y , 
objects may be 
accessed that match a set of attributes specified by 
the user 

46 
S. D. Goodfellow and N. Munro 
CONCLUSIONS 
The i n f r a s t r u c t u r e 
d e s c r i b e d 
in 
t h i s 
p a p e r 
w i l l 
provide the CACSE software developer and the 
c o n t r o l 
e n g i n e e r 
w i t h 
a 
s t r u c t u r e d 
s e t 
of 
t o o l s . 
The 
e m p h a s i s 
i s on h i d i n g 
any u n n e c e s s a r y 
information 
and making e v e r y 
f a c i l i t y 
r e a d i l y 
a v a i l a b l e 
a t 
r u n t i m e . 
The 
e n v i r o n m e n t 
p r o v i d e d 
by 
t h e 
i n f r a s t r u c t u r e 
w i l l have manv of 
t h e 
a t t r i b u t e s 
of 
s y s t e m s 
such 
as SMALLTALK without the 
d i s a d v a n t a g e 
of a l a r g e overhead in e x e c u t i o n 
t i m e . 
To summarise, 
the i n f r a s t r u c t u r e 
w i l l provide 
: -
A sophisticated man-machine interface tool 
set which uses dialogue definitions which 
are modifiable at runtime, and enables 
mixed numerical, graphical, and textural 
information to be readily input 
and 
output. 
A 
data 
manager 
which 
can 
control 
structured data objects available to 
concurrent tasks. 
An action manager which controls the 
application 
actions 
and 
some 
system 
functions 
which 
are 
executable 
concurrently. 
The infrastructure should allow CACSE packages to be 
built which integrate the whole control engineering 
process from system modelling and identification 
through design to commissioning. The CACSE packages 
built on this infrastructure will be readily 
portable to distributed computing systems. In 
many 
cases the support of new technological features, 
particularly in the man-machine interface, will 
automatically be inherited by packages when the 
infrastructure is updated. 
REFERENCES 
CADCentre (1983). GINO-F Reference manual, 
CADCentre Ltd., Madinglev Road, Cambridge, U.K. 
Goldberg, A., D. Robson (1983). Smalltalk-80; The 
language and it's implementation, Addison-Wesley 
Goodfellow, S. D., and N. Munro (1985). INTEGRA, an 
innut translation facilty for computer aided control 
systems engineering. 3rd IFAC/lFIP Symposium on 
computer aided design in control and engineering 
systems, Denmark, July 1985. 
Holt, R. C. (1983). Concurrent Euclid, the UNIX 
system, and Tunis, Addison-Weslev. 
Hughes, J. W. , M. S. Powell (1984). A strongly typed 
distributed virtual memory. 
In D. Juce (Ed.), Distributed computer systems. 
Peter Peregrinus. 
Jordan D. (1985) Specification of a man-machine 
interface for control system computer aidied 
engineering. Report 630, Control Systems Centre, 
UMIST Manchester, M60 1QD, U.K. 
Kernighan, B. W., P. J. Plauger (1976). Software 
tools. Addison Wesley. 
Macieiowski, J. M. (1984). Data structures for 
control systems design. EUR0C0N'84, Rrighton, U.K. 
September 1984. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
AN EXPERT SYSTEM ARCHITECTURE FOR 
COPING WITH COMPLEXITY IN COMPUTER-
AIDED CONTROL ENGINEERING 
J. R. James*, J. H. Taylor** and D. K. Frederick*** 
^Department of Electrical Engineering, 
United States Militaiy Academy, 
West Point, NY )0996, 
USA 
** General Electric Corporate Research and Development, Schenectady, 
NY 12345,US A 
***Electrical, Computer, and Systems Engineering, Rensselaer Polytechnic Institute, 
Troy, NY 12181, 
USA 
Abstract. We discuss an architecture for an expert system to assist a control engineer in coping with 
the complexity of computer-aided control engineering, with major emphasis placed on implementa-
tion. Issues to be treated include: rule base organization, knowledge to be contained in various rule 
bases, a mechanism to switch between rule bases as the problem solution proceeds, a protocol to 
coordinate the symbolic computations of the inference engine with the numeric computations of con-
ventional analysis and design software, support of non-monotonic reasoning to permit retracting and 
revising steps in the design process, and conversion between numeric and symbolic data. We present 
our approach to these issues, and give examples of rules used to represent operational knowledge 
and to guide the solution of the problem. 
Keywords. Artificial intelligence; expert systems; computer architecture; computer-aided system 
design; control system synthesis. 
1. INTRODUCTION 
Control engineering problems and the software tools with 
which to solve them are becoming ever more complex. The 
development of more powerful analysis and design pro-
cedures together with the rewards for their effective use 
serve to motivate the creation of these new tools. Unfor-
tunately, as their number, capabilities, and complexity in-
creases, the possibility that any individual will be able to ap-
ply the available range of techniques and software effectively 
is decreasing. We believe that the expert systems approach 
provides a solution to this difficulty. 
The use of expert systems to represent and apply expert 
knowledge in a particular domain is becoming increasingly 
widespread (Hayes-Roth, 1983 and Wallich, 1984). Our re-
cent efforts (Taylor, 1983 and 1984 a,b; James, 1985) have 
focussed on the use of expert systems to aid a control en-
gineer in exploiting available software to achieve an accept-
able design. In this research, we use General Electric's DEL-
PHI inference engine in combination with the following con-
ventional analysis and design software tools: 
a. the Cambridge Linear Analysis and Design Program 
(CLADP) (Edmunds, 1979), which performs design, 
analysis and simulation functions for both single-input, 
single-output and multiple-input, multiple-output sys-
tems in either the time or frequency domain, 
b. SIMNON (Elmqvist, 1977), which supports the simula-
tion of nonlinear systems, 
c. extensions to SIMNON (Taylor, 1982), which provide 
equilibrium finding and linearization about the equilibri-
um point for nonlinear system models, and 
d. a routine to categorize eigenvalues, to provide the basis 
for diagnosing the time-domain characteristics of the sys-
tem model by the expert system. 
In addition, we developed a set of LISP functions which sup-
port the various actions described in Sections 2 thru 4 below, 
and extended CLADP and SIMNON to support the exchange 
of data between 
the expert system and the external 
processes. 
Integrating the numerical capabilities of the above software 
with the knowledge representation and deductive mecha-
nisms of the DELPHI inference engine results in a high-level 
combination of large-scale numerical processing with large-
scale symbolic processing. During the execution of a design 
sequence, we use the expert system (written in FRANZ LISP 
and running under the EUNICE operating system) to control 
the start-up of the various numerical routines (written in 
FORTRAN and running under the VAX/VMS operating sys-
tem), direct the transformation and exchange of data re-
quired to proceed with the problem, and implement the in-
terface with the user. As many as four external VAX/VMS 
sub-processes are created, and external programs are started, 
used, and stopped by the expert system through these sub-
processes. To illustrate the scope of this activity, more than a 
hundred individual commands may be issued by the expert 
system as control system compensators are designed. Such a 
software system thus achieves a transfer of much of the bur-
den of the complexity of the control engineering problem 
from the shoulders of the design engineer to the expert sys-
tem. 
This paper is organized as follows: In Section 2 we discuss a 
partitioning of an expert's control engineering knowledge 
into various rule bases and the organization of these rule 
bases. The implementation of the design process and the role 
of a switching function in that implementation are discussed 
in Section 3. The protocol used to coordinate the symbolic 
manipulations of the inference engine with the numeric com-
putations of the conventional software is treated in Section 4. 
We conclude in Section 5 with an outline of the key issues 
and our approach to addressing them, and salient conclu-
sions. 
2. KNOWLEDGE PARTITIONING 
The rule-base architecture is shown in Fig. 1. The production 
rules which comprise this structure were developed to realize 
the concepts presented in the Computer Aided-Control En-
gineering (CACE) architecture of Taylor (1984b). 
The 
present structure differs slightly from what was originally 
proposed. The principal difference is that the design process 
47 

48 
J. R. James, J. H. Taylor and D. K. Frederick 
has been implemented in one rule base rather than two, to 
eliminate unnecessary rule-base switching. 
As the number of design procedures grows and the complex-
ity of the other portions of the expert system increase, parti-
tioning the knowledge into modules will be an essential re-
quirement to reduce the time required to execute various 
phases of the analysis and design process. In addition, modu-
larity will make the expert system easier to develop, modify, 
and maintain. 
The six operational rule bases of Fig. 1 are integrated 
through a set of supervisory rules (meta-rules) which checks 
the current state of the problem solution and decides what 
needs to be done next. This implementation of the expert 
system architecture was also suggested in (Taylor, 1984b). 
Invoking the next applicable rule base is accomplished by use 
of a switching function which is further discussed in Sec-
tion 3.3. 
The knowledge contained in the rule bases (Fig. 1) is as fol-
lows: 
SUPERVISOR: The function of this rule base is to permit 
the user to select a training or design session, and to 
direct its execution, Fig. 2. This selection allows any of 
the sets of rules to be invoked individually (the TRAIN-
ING option), or aids the user in carrying out the overall 
process (the DESIGN option). The training option 
makes use of archival lists of facts associated with the 
design of lead-lag precompensators for a third-order, 
type-one plant, to allow the user to explore the workings 
of each individual rule base. Specific functions are: start-
ing and stopping the session; permitting the user to 
select a training or design session; selecting the appropri-
ate rule base to continue the session when one set of 
rules has completed its work (during a DESIGN ses-
sion); saving the current list of facts if the user desires 
to interrupt the session and continue at a later time; and 
permitting the user to revise the problem formulation as 
the result of further analysis and design. (This is an ex-
ample of non-monotonic reasoning. That is, we are able 
to "revise a belief that specification development has 
been completed, and return to update the specifications.) 
MODEL: This rule base will either aid the user in building a 
CLADP description of a linear model, or request the 
user to enter the file name of a previously-developed 
CLADP model. Similar ability to define a nonlinear SIM-
NON model followed by equilibrium finding and deter-
mination of a linearized model is also supported. 
DIAGNOSE: The function of this rule base is to analyze and 
characterize the model of the plant. Currently s-domain 
information is provided on: the stability of the open-loop 
system; whether the system is type-zero, one or two; 
whether the plant can be approximated as an over-
damped or underdamped second-order system; and 
whether the plant has a dominant pole or pole pair. 
Also, the following frequency-domain information is 
provided: open-loop bandwidth (type-zero system); un-
compensated gain and phase margin; low-frequency gain 
(type-zero system) or velocity constant (type-one sys-
tem); 
closed-loop 
bandwidth 
with 
unity 
feedback; 
closed-loop bandwidth with 15 dB of gain margin; ap-
proximate bandwidth achievable with two leads; and ap-
proximate 
low-frequency 
gain 
or 
velocity 
constant 
achievable with two lags. 
CONSTRAIN: The function of this rule base is to enable the 
user to enter constraints. These rules currently support 
frequency-domain parametric constraints on the compen-
sator dc gain, phase lead added by the leads, or low-
frequency gain added by the lags. 
DESIGN: This rule base aids the user in applying CLADP 
procedures to design lead-lag precompensation for a 
single-input, 
single-output 
linear 
plant. 
A detailed 
description of the heuristic used to automatically design 
the compensator is given in (James, 1985). A synopsis 
of the heuristic is as follows: 
a. Add lead precompensators to adjust the open-loop 
phase angle at the desired closed-loop bandwidth. 
This places the high-frequency portion of the Ni-
chols locus in approximately the right region. 
b. Add or adjust a constant-gain precompensator to 
meet the gain margin. 
c. Adjust the actual closed-loop bandwidth by making 
incremental 
changes 
in 
the 
lead 
compensator 
pole/zero ratios. 
d. Repeat steps b. and c. until the gain margin and 
bandwidth specifications are met. When both condi-
tions are satisfied, the high frequency portion of the 
Nichols locus is correct. 
e. Add lag precompensation to adjust the low frequen-
cy gain (for a type-zero system) or velocity constant 
(for a type-one system). The lag(s) are placed so the 
high frequency portion of the Nichols locus is not 
disturbed significantly. 
SIMULATE: This rule base facilitates the simulation of the 
closed-loop system. CLADP is used to provide the step 
response of the system with a linear plant model, and 
SIMNON is used to perform more general and realistic 
simulations of the response of the system with linear or 
nonlinear plant models. 
3. IMPLEMENTING A STRUCTURED PROCESS 
The user directs the design process of the expert system by 
providing 
names 
of data files, menu 
selections, 
and 
responses to queries. While the user is in charge of the prob-
lem solution, the expert system implements a specific train of 
thought to aid in achieving the solution (e.g., it checks that 
reasonable specifications are entered before starting the 
design of a compensator). 
The knowledge summarized in Section 2 is needed to imple-
ment such a train of thought. This knowledge is symbolically 
represented in a partitioned sets of rules and a list of facts. A 
discussion of the syntax of production rules and lists of facts 
and how they can be used to represent knowledge can be 
found in (Taylor, 1984b) or (Johnson, 1983). 
The expert system carries out the design process by applying 
the appropriate rule base to the problem. This is achieved by 
recognizing when the current rule base has completed its 
tasks, switching to the supervisory rule base, and determin-
ing which rule base should be invoked next. Implementing 
the transition from one rule base to another in DELPHI in-
volves a careful hand-over of the current list of facts from 
one rule base to the next. A LISP switching function has 
been written to perform these actions. 
To convey a clearer understanding of how we have con-
trolled the logical flow associated with the design process, we 
will first discuss forward chaining through a rule base, then 
discuss backward chaining, and then present some lessons 
learned about switching between rule bases. 
3.1 Forward Chaining 
Most frequently, the inference engine uses the list of facts to 
determine the current situation and then take the appropriate 
action(s) to proceed with the next step in the process. This 
inference mechanism is called forward chaining. For exam-
ple, the rule which recognizes that the lead-lag design criteria 

An Expert System Architecture 
49 
have been met and writes the facts that will display summary 
information to the user, direct the expert system to provide a 
Nyquist plot of the compensated system, and then return to 
the supervisory rule base, is as follows: 
(Rule_130 (" design for GM, lfg, clbw is done ") 
(WHEN 
(TRUE (SYSTEM TYPE . ZERO) 
" Have a type-zero system ") 
(TRUE (PHASE-AT-OMEGA-BW VALUE . ADJUSTED) 
" Have adjusted the phase at omega bw ") 
(TRUE (EXCESS-GAIN-MARGIN VALUE . -3<..<+3DB) 
" Excess gain margin is ok ") 
(TRUE (LOW FREQUENCY . ADJUSTED) 
" Low frequency gain is ok ") 
(TRUE (CLOSED-LOOP-BW VALUE . ADJUSTED) 
" Closed-loop bandwidth is ok ") 
(TRUE (GAIN-MARGIN FINAL-VALUE . (? GM)) 
" The final gain margin is known ") 
(TRUE (CLBW FINAL-VALUE . (? CLBW)) 
" The final closed-loop bandwidth is known "■) 
(TRUE (LFG FINAL-VALUE . (? LFG)) 
" The final low-frequency gain is known ") 
(TRUE (DESIGN-FACTS VALUES . ALL-ENTERED) 
" We have entered all required facts ")) 
(THEN 
(CLEAR (DESIGN-FACTS . ALL-ENTERED) 
" Prevent looping on this rule ") 
(SCREEN (?? ?? . ??) 
" Clear the terminal display for the user ") 
(DISPLAY (?? ?? . ??) 
" LEAD-LAG design specifications are met: " 
" gain margin 
= ?GM dB " 
" bandwidth 
= ?CLBW rps " 
" low-frequency gain 
= ?LFG dB ") 
(ACKNOWLEDGE (L-L-DESIGN CONDNS-MET . ACKNLD) 
" Wait for the user to acknowledge info ") 
(WRITE (PROVIDE FINAL . NYQUIST-PLOT) 
" Fire the rule to provide a Nyquist plot ") 
(WRITE (SYSTEM-SESSION REQD . FROM-DESIGNLL) 
" Move to the Supervisory rule base "))) 
The nine conditions in the premise of the above rule (i.e., 
those elements between WHEN and THEN) are used to 
recognize that the lead-lag design has been successfully com-
pleted for a type-zero system. Comments associated with 
each fact are enclosed in double quotes. The six statements 
in the conclusion (i.e., those elements following THEN) per-
form those actions needed to continue with the design pro-
cess or are used to fire other rules which will perform such 
actions. Some quoted material (e.g., "Prevent looping on 
this rule") comprise comments, while some phrases are 
displayed 
to 
the 
user 
(e.g., 
"LEAD-LAG 
design 
specifications are met:"); this is governed by the verb 
(CLEAR or DISPLAY, respectively). Symbols are assigned 
values by the inference engine (e.g., (? GM) may have the 
value 19.5 dB), and those values are also displayed to the 
user (e.g., line 5 of the DISPLAY action above results in the 
message 
gain margin = 19.5 dB 
being issued). The forward chaîner starts work as soon as a 
rule has its premise satisfied, and continues until no rule has 
its premise satisfied. 
3.2 Backward Chaining 
A rule can also recognize that the current situation calls for 
establishing a goal to be achieved by the inference engine. 
This inference mechanism is called backward chaining. For 
example, the rule which repeatedly checks for the completion 
of the major steps in the design process, and thus is the 
heart of Fig. 1, does so by invoking the backward chaîner to 
verify a list of facts: 
(Rule_300 (" Design process being checked ") 
(WHEN 
(TRUE (SYSTEM SESSION . BEGUN) 
" You have selected a DESIGN session ")) 
(THEN 
(CLEAR (SYSTEM SESSION . BEGUN) 
" Prevent looping on this rule ") 
(PROVE (MODELING ASSISTANCE . PROVIDED) 
" Has the system model been entered? ") 
(PROVE (DIAGNOSIS ASSISTANCE . PROVIDED) 
" Has the system been diagnosed? ") 
(PROVE (CONSTRAINT ASSISTANCE . PROVIDED) 
" Are system constraints entered? ") 
(PROVE (SPECIFICATION ASSISTANCE . PROVIDED) 
" Are system specifications entered? ") 
(PROVE (DESIGN ASSISTANCE . PROVIDED) 
" Has the design met the specs? ") 
(PROVE (SIMULATION ASSISTANCE . PROVIDED) 
" Is simulation of the CL system done? ") 
(ACKNOWLEDGE (ADVISE DESIGN-VERIF . DONE) 
" Control system design and verification 
" is finished. You may wish to alter the 
" given model, constraints, and/or specs 
" and redo the design, or repeat another 
" portion of the process, or exit. ") 
(WRITE (DESIGN-SESSION MENU . REQUESTED) 
" Allow user to modify or quit. "))) 
This rule is fired each time the supervisory rule base is load-
ed. The backward chaîner considers each PROVE statement 
in turn. If it is already established in the list of facts, the 
backward chaîner moves on to the next statement; the first 
hypothesis that has not already been established will be 
picked by the inference engine for testing. The supervisory 
rules are formulated so that this results in invoking the ap-
propriate operational rule base. The inference engine will 
proceed in this way until the entire set of hypotheses has 
been satisfied and therefore the goal can be said to be 
achieved. 
Generally, this rule results in the progression MODEL, DI-
AGNOSE, CONSTRAIN, SPECIFY, DESIGN, SIMULATE. 
However, this is not a rigid regimen: if during the design 
process it is determined that a specification cannot be met 
and should be changed, the fact (SPECIFICATION ASSIS-
TANCE . PROVIDED) can be cleared by a rule in the design 
rule base. Other facts can be written to indicate which 
specification needs attention. 
When the supervisory rule 
base tries to verify that (SPECIFICATION ASSISTANCE . 
PROVIDED) is a fact, it will no longer be in the list of facts. 
Thus, the inference engine will again invoke the the 
specification rule base and work to validate this fact. 
Comparing the premise of this rule to that of the example 
used for forward chaining, we see that only a single condition 
is needed to recognize that the steps in the design sequence 
need to be verified. The PROVE verb is used to indicate to 
the backward chaîner that the associated fact (e.g., (MODEL-
ING ASSISTANCE . PROVIDED)) is a hypothesis to be 
verified. The backward chaîner will then check to see if the 
fact is already known to be true or false. If the fact is not 
known, then the backward chaîner will proceed to look for 
rules which will write this fact in their conclusions and work 
to establish the premise of those rules. This involves switch-
ing in the modeling rule base and proceeding until (MODEL-
ING ASSISTANCE . PROVIDED) is true. 
3.3 Using a Rule-Base Switching Function 
Rules in each operational rule base recognize that it is time 
to return to the supervisory rule base to proceed with the 
overall problem. The facts are then saved in a file, the su-
pervisory rule base is loaded as the current rule base, and the 
facts are made available to the supervisor. The next applica-
ble rule base is selected by the supervisory set of rules. The 

50 
J. R. James, J. H. Taylor and D. K. Frederick 
six operational rule bases are contained in separate files 
which are invoked using the switching function. This process 
continues until the expert system can do no more or the user 
elects to end the session. As we have seen above, Rule_300 
performs this top-level control of the process. 
This approach is useful if the problem being addressed can 
be partitioned into "phases" with well-defined initial and 
final conditions, and if the phases are of sufficient complexity 
that the overhead involved in switching is warranted. The 
knowledge partitioning discussed in Section 2 satisfies these 
conditions. 
The exit criterion for a rule base must not be satisfied until 
all required actions have been completed. This condition is 
met when the pattern which fires the rule in which the switch 
function is called occurs only for that rule. We normally 
achieve this by executing a switch as the last action taken by 
the first rule in a rule base. 
The list of facts is passed as a queue from one set of rules to 
the next, and DELPHI starts to check rules for firing as facts 
are being loaded. In this case, one must be careful not to 
start any actions in a new rule base until the entire list of 
facts has been entered. (Otherwise some facts may be lost if 
a subsequent switch occurs before all of the old facts are en-
tered, or the new set of rules will not behave properly since 
all of the facts would not be available.) Therefore, each rule 
base is designed such that its start-up rule cannot be fired 
until the last fact written by the prior rule base is loaded. 
The seven rule bases now total approximately 300 rules; us-
ing a command file to run through a typical design sequence 
takes about thirty minutes on an unloaded VAX 11/785. 
About half of this time is required to compile the rules as we 
switch between operations. This time would be reduced 
significantly if the DELPHI inference engine supported ac-
cessing a compiled version of the rules. 
4 
PROTOCOL FOR COORDINATING SYMBOLIC 
AND NUMERIC COMPUTATIONS 
The operation of the expert system in concert with conven-
tional analysis and design software requires that: 
a. VAX/VMS sub-processes be created to start, run and 
stop external programs which are sources of data for the 
expert system, 
b. a two-way transformation of data be set up between the 
symbolic representation of the expert system and the 
numeric representation of these external programs, and 
c. coordination of the operation of the expert system with 
external programs be established to prevent the expert 
system and the external programs clashing (e.g., trying 
to provide information to the user at the same time, or 
returning to symbolic manipulation before numeric data 
has been completely supplied). 
The DELPHI inference engine has a LISP function available 
to create a VAX sub-process which uses mailboxes for the 
input and output ports of the sub-process. Read and write 
functions are also available to communicate with the sub-
process via the mailboxes. We use the mailboxes to start up 
programs (Fig. 3), and then transmit commands to them and 
receive data from them using files. 
We have implemented a protocol which coordinates the ex-
pert system with external programs and provides support for 
two-way communication via files. Fig. 4 is a timing diagram 
for running CLADP which depicts the actions taken to im-
plement the protocol. A detailed discussion of this timing 
diagram follows: 
a. The user starts the expert system (point A on Fig. 4) 
and directs its activity until data is needed from an exter-
nal program. The expert system then writes the re-
quired CLADP commands to the file EXPOUT (points 
B,C), creates a VAX/VMS sub-process, starts CLADP 
through the sub-process, and begins to wait (point D) 
until it detects that CLADP has created the handshake 
file (point J). 
b. Once CLADP is started, it reads the sequence of com-
mands from the file EXPOUT (points E,F), performs 
the required calculations, writes the results to the file 
EXPIN (points G,H), creates the handshake file (point 
I), and begins to wait (point J) until it detects the dele-
tion of the handshake file (point P). 
c. When the presence of the handshake file is detected 
(point J), the expert system reads the symbolic data 
written to the file EXPIN by CLADP (e.g., (GAIN-
MARGIN DB-VALUE . 8.5), points K,L), and contin-
ues with the inference process until additional data is 
needed. At this time, the sequence repeats as described 
above (points M thru Q). 
This sequence of writing commands to EXPOUT and sym-
bolic information to EXPIN while coordinating the operation 
based on the existence of a handshake file continues until 
CLADP is no longer needed. At that time the expert system 
can stop CLADP and the VAX/VMS sub-process is then 
available to run another program. 
Coordinating several processes is identical to this outline; for 
each process there is an associated file set for handshake and 
input and output data transfer. Symbol/numeric transforma-
tions are required throughout this process: The expert system 
must know how to write CLADP and SIMNON commands 
in order to achieve the required results, and CLADP and 
SIMNON were extended to convert numerical data back into 
symbolic form (e.g., (GAIN-MARGIN DB-VALUE . 8.5) 
has to be written into the file EXPIN in the above example). 
5. CONCLUSION 
The application of the expert systems approach has proven to 
be useful in coping with the complexity of computer-aided 
control engineering (CACE) procedures. By reducing the 
burden on the design engineer to recall the details of using 
software packages effectively, and by containing the heuristic 
procedures involved in various analysis and design ap-
proaches, an expert system can be an effective aid in the 
CACE process. 
Partitioning the CACE problem into distinct well-defined 
subprocedures and corresponding rule bases is one key to ad-
dressing the complexity issue. This can be achieved by 
"modeling" the computer-aided control engineering effort 
along functional lines (Taylor, 1984a,b). In implementing 
this feature, we have found that switching between rule 
bases has several benefits, namely: 
a. Top-level goals can be reevaluated continually by the su-
pervisor, based on the results achieved by the different 
operational rule bases. For instance, if work reveals that 
a bandwidth specification cannot be met under the given 
conditions, the supervisor may re-invoke the SPECIFY 
rule base and ask the user to reduce the bandwidth 
specification. 
b. Incremental design is supported, since the rule bases are 
functionally arranged and the list of facts can be saved to 
initiate another session. For example, the user can com-
plete a model and diagnosis session, save the facts, and 
restart the expert system at a later time. 
Several 
specification sets and solutions can be studied, starting 
from the same initial state. 
c. Rule bases can be written and debugged separately, and 
then integrated into the overall structure. The time re-

An Expert System Architecture 
51 
quired to make trial runs is greatly reduced, and errors 
can be identified more quickly. 
d. The supervisor is used to limit the scope of search, so 
the running time of the complete expert system should 
be kept to reasonable bounds even as the number of 
procedures supported by the expert system increases. 
Using the switching technique to implement the rule base 
partitioning requires careful attention to detail, as indicated in 
Section 3.3. 
We have presented architectural and implementation issues 
involved in developing an expert system to create a higher-
level, flexible environment to help the control engineer solve 
CACE problems. However, it should be emphasized that the 
development of an expert system is not a panacea. The crea-
tion of an expert system has its own set of difficulties, the 
most burdensome being the creation of the architectural im-
plementation and knowledge base. The process of translating 
human expertise into a rule base (knowledge acquisition) is 
not well understood (Hayes-Roth, 1983). However, we be-
lieve that "modeling" the computer-aided control engineer-
ing effort along functional lines (Taylor, 1984a,b) is a neces-
sary first step in knowledge representation and acquisition 
that greatly alleviates this problem. The reduction in the 
difficulty of the problem presented to the user justifies the 
increased complexity of the software tool which implements 
the design environment. 
ACKNOWLEDGEMENT 
The research reported in this paper has been substantially 
aided by the contributions of others. Dr. Piero Bonissone has 
assisted from the beginning of the project, providing the ini-
tial inference engine and his experience with expert systems 
development. More recently, Dr. Melvin Simmons, Dr. Dale 
Gaucus, and Steven Kirk assisted in implementing the expert 
system using the DELPHI inference engine. Also, David 
Kassover has helped in making modifications to CLADP and 
SIMNON. 
These individuals were employed by General 
Electric Corporate Research and Development (David Kass-
over as a consultant). Their support is gratefully acknowl-
edged. 
REFERENCES 
Edmunds, J. M. (1979). Cambridge linear analysis and design 
program. IF AC Symposium on Computer Aided Design of 
Control Systems, Zurich. 
Elmqvist, H. (1977). SIMNON - An interactive simulation 
program for nonlinear Systems. Proceedings of Simulation 
77, Montreux. 
Hayes-Roth, F., D. A. Waterman and D. B. Lenat (1983). 
Building Expert Systems. Addison-Wesley, Reading, MA. 
James, J. R., D. K. Frederick and J. H. Taylor (1985). On 
the application of expert systems programming tech-
niques to the design of lead-lag 
precompensators. 
Proceedings of the Control 85 Conference, Cambridge, UK. 
Johnson, H. E. and P. P. Bonissone (1983). Expert system 
for diesel electric locomotive repair. Journal of FOR TH 
Applications and Research, 1, No. 1. 
Taylor, 
J. H. 
(1982). Environment 
and 
methods 
for 
computer-aided control systems design for nonlinear 
plants. Proceedings of the Second IF AC Symposium: CAD 
of Multivariable Technological Systems, West Lafayette, 
IN. 361-367. 
Taylor, J. H., D. K. Frederick and A. G. J. MacFarlane 
(1983). A second- generation software plan for CACSD. 
Abstracts of the IEEE Control System Society Symposium on 
CACSD, Cambridge, MA. 
Taylor, J. H., D. K. Frederick and J. R. James (1984). An 
expert system scenerio for computer-aided control en-
gineering, Proceedings of the American Control Conference, 
San Diego, CA. 120-128. 
Taylor, J. H. and D. K. Frederick (1984). An expert system 
architecture for computer-aided control engineering. 
IEEE Proceedings, 72, 1795-1805. 
Wallich, P. (1984). Technology '84 software. IEEE Spectrum, 
21, No. 1, 47-49. 
1 
1 
MODEL 
nFi P H I 
EXTERNAL 
PROGRAMS 
SUPERVISOR 
l 
CONSTRAIN 
DIAGNOSE 
1 
DESIGN 
SPECIFY 
SIMULATE 
KNOWLEDGE BASE 
Fig. 1. Expert system structure 

52 
J. R. James, J. H. Taylor and D. K. Frederick 
"" 
-
MODEL? 
1 NO 
DIAGNOSE? 
1 NO 
CONSTRAIN? 
1 NO 
SPECIFY? 
1 NO 
DESIGN? 
i 
NO 
SIMUL Δ Τ Ρ ? 
YES 
YES 
YES 
YES 
YES 
YES 
GO MODEL 
GO DIAGNOSE 
GO CONSTRAIN 
GO SPECIFY 
GO DESIGN 
GO SIMULATE 
* 1 
| 
I 
| 
* 1 
| 
| 
J 
DELPHI 
• ^ v-
FACTS/RULES 
TERMINAL 
PROGRAM 
INPUT MAILBOX 
COMMAND 
FILE EXPOUT 
DATA 
FILE EXPIN 
PROGRAM 
OUTPUT MAILBOX 
EXTERNAL 
PROGRAM 
Fig. 3. Running external programs 
MENU OF 
OPTIONS 
Fig. 2. Flow chart for the supervisor set of rules 
EXPERT 
CLADP 
B 
C 
I 
WORK_ 
| 
WAIT 
l__ 
OFF 
' 
WAIT 
OFF 
, 
EXIST 
HANDSHAKE 
NONE . 
OPEN 
EXPIN 
CLOSED. 
OPEN 
EXPOUT 
CLOSED. 
M 
Γί 
J K 
I 
LhLhU 
J-L 
OP 
I 
n__ 
J-L 
A - USER BEGINS EXPERT 
J 
B - EXPERT OPENS EXPOUT AND WRITES COMMANDS 
C - EXPERT CLOSES EXPOUT 
K 
D - EXPERT BEGINS CLADP VIA MAILBOX AND 
L 
BEGINS TO WAIT 
M 
E - CLADP OPENS EXPOUT AND READS COMMANDS 
N 
F - CLADP CLOSES EXPOUT 
O 
G - CLADP OPENS EXPIN AND WRITES RESULTS 
P 
H - CLADP CLOSES EXPIN 
Q 
I - CLADP CREATES AND CLOSES HANDSHAKE 
EXPERT SYSTEMS RETURNS TO ACTIVE STATE, 
CLADP BEGINS TO WAIT 
EXPERT OPENS AND READS EXPIN 
EXPERT CLOSES EXPIN 
■ EXPERT OPENS EXPOUT AND WRITES COMMANDS 
EXPERT CLOSES EXPOUT 
EXPERT DELETES HANDSHAKE 
CLADP RESUMES WORK, EXPERT WAITS 
■ CLADP OPENS EXPOUT AND READS COMMANDS 
Fig. 4. Protocol timing diagram 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER-AIDED CONTROL ENGINEERING 
ENVIRONMENT FOR NONLINEAR SYSTEMS 
ANALYSIS AND DESIGN 
J. H. Taylor 
Control Technology Branch, General Electric Corporate Research and Development, 
Schenectady, NY 12345, 
USA 
Abstract. We report on recent progress in developing a computer-aided nonlinear 
control system analysis and design environment based on sinusoidal-input describ-
ing function (SIDF) methods. In particular, two major additions have been made 
to our CAD software for nonlinear controls during 1984: a simulation-based pro-
gram for generating amplitude-dependent SIDF input/output models for nonlinear 
plants, and a frequency-domain nonlinear compensator design package. Both of 
these are described in detail. This software can treat very general nonlinear sys-
tems, with no restrictions as to system order, number of nonlinearities, 
configuration, or nonlinearity type. An overview of the application of this software 
to the design of controllers for a realistic, nonlinear moidel of an industrial robot is 
presented in Taylor (1984), which serves to illustrate the use of these tools. Based 
on the software presented here, the use of SIDF-based nonlinear control system 
analysis and design methods is substantially easier to carry out. 
Keywords. Nonlinear control systems, describing functions, control system syn-
thesis, computer-aided design. 
1. INTRODUCTION 
The basis of this work has been established in earlier publica-
tions. In particular, Spang (1982) outlines the basic CAD 
software tools that were available before the start of this pro-
gram, Taylor (1982) describes several extensions to that 
software suite that are required for performing conventional 
analysis and design for nonlinear systems 
(equilibrium 
finding, standard linearization) and required interfaces to 
create a functionally integrated environment, and Taylor 
(1983, 1984) establishes the theoretical basis for the work 
described here. 
There are two major additions to our CAD software for non-
linear controls that we developed during 1984: a simulation-
based program for generating amplitude-dependent SIDF 
input/output 
models for a nonlinear 
plant, based on 
constant-amplitude 
sinusoidal 
driving 
signals; 
and 
a 
frequency-domain nonlinear controller design module based 
on the theory cited above. The specific approach taken in 
developing this software was: 
a. to extend the nonlinear simulation package SIMNON 
(Elmqvist, 1977), to allow the direct generation of SIDF 
models 
(amplitude-dependent 
frequency 
response 
models) using simulation and Fourier analysis methods, 
as described in Section 2; and 
b. to create a Nonlinear Controller Synthesis Program 
(NCSP) by adding a module to CLADP (Edmunds, 
1979) 
that 
accepts 
externally-generated 
frequency 
response models (SIDF models or experimental data), 
and 
supports 
nonlinear 
control 
system 
design 
as 
described in Section 3. 
The basic functional architecture of our environment is por-
trayed in Fig. 1. The new elements in that figure are the 
quasilinearizer (SIDF model generator) and the nonlinear 
design module. 
Taylor (1983) provides an overview of SIDF models for non-
linear systems and the overall approach to controller design, 
and Taylor (1984) outlines and illustrates the methodology 
for multi-model nonlinear controller design by SIDF inver-
sion. Although the discussion that follows centers on SIM-
NON and CLADP, the same basic principles can be applied 
to implement these features in any nonlinear simulation and 
frequency-domain design package in a straightforward way. 
The software developed under this program specifically 
implements the functions required to carry out two nonlinear 
control system design techniques from Taylor (1983, 1984), 
i.e., the one-model SIDF-based linear controller design method 
and the multi-model nonlinear controller design approach based 
on SIDF inversion. These new capabilities provide the basis 
for dealing with nonlinear systems by adding control system 
design approaches based on the behavior of the nonlinear 
system for signals having amplitudes that correspond to the 
actual anticipated operation. The amplitude dependence of a 
nonlinear system is a key characteristic that often must be 
considered in the analysis and design of nonlinear systems. 
This issue is distinct from the dependence of nonlinear sys-
tem behavior on operating point, which can often be charac-
terized by a family of standard linearized models about vari-
ous operating points. 
2. A SIMNON-BASED SIDF MODELING PRO-
GRAM 
2.1 Functional Overview 
Software for generating amplitude-dependent transfer func-
tions describing the input/output (I/O) behavior of nonlinear 
systems excited by sinusoidal inputs has been developed by 
extending SIMNON and installing a new built-in system 
SIDFGEN. 
The system SIDFGEN provides a sinusoidal 
driving signal for the nonlinear system, and contains state 
variables which are Fourier integrals of a selected plant out-
put variable. The SIMNON command set has been extended 
to support this activity. 
The nonlinear plant model can be a single system, or any 
other arbitrarily interconnected set of subsystems. The only 
restrictions are that the nonlinear system must be stable, and 
that the desired SIDF I/O relation must be single-input 
single-output. If the system is not stable, then the user must 
stabilize it with the appropriate feedback. If it is desired to 
obtain a matrix SIDF I/O model (e.g., to describe a plant 
with two inputs and two outputs), then the same principles 
outlined below can be used, except that the sinusoidal signals 
53 

54 
J. H. Taylor 
applied to each input must be of different but nearly equal 
frequencies and the Fourier analylsis must involve integra-
tion over an integral number of cycles of both signals. We 
have successfully determined 2 x 2 SIDF models using input 
frequencies related by the ratio 4:3; this work will not be 
described further due to space limitations. Note, however, 
that one cannot obtain matrix SIDF I/O relations by exciting 
a nonlinear system one channel at a time, because of the 
failure of superposition in nonlinear systems; also, exciting 
both channels with sinusoids of the same frequency is 
unworkable, because it is impossible to distinguish the effects 
of multiple inputs on each output. 
The input and output of SIDFGEN are designated ysi)! and 
wcos, respectively. The signal wcos drives the plant^ and the 
output of the plant is connected to yslf!. Once SIDFGEN and 
the nonlinear plant model are interconnected appropriately, 
the following excitation is provided by SIDFGEN: 
uœs(t) 
= w0 + a cos(wt) 
(1) 
and, by integration of the state variables in SIDFGEN, Fourier 
integrals for period k = 1, 2, ... are calculated: 
A/ 
A» A = 
I 
Ksw ( t) exp ( - jmω t) cit\ 
J(k-\)l 
m = 0, 1,2, 3 
(2) 
where 
Τ=2ττ/ω 
(3) 
The real integral for m = 0 captures the constant or "d.c." 
component of the response, and the complex-valued first-
harmonic integral Ilk defines the desired I/O transfer func-
tion Gk{ju\ w0, A), as follows: 
JO.iO'w; w0, a) = /, u / T 
(4) 
Gk(jcû; 
w0, a) = ω/, Α / απ 
(5) 
The remaining higher harmonic Fourier integrals may be cal-
culated to provide the user with a measure of the importance 
of nonlinear effects and with some insight as to the validity 
of neglecting higher harmonics. This information is also 
presented in pseudo-transfer function form, 
Gm.k(Jm<»'·. lhh 
fl) = ω/„, Α / απ\ 
m = 2, 3. 
(6) 
The integrals for m = 0, 1 are sampled every period of the 
sinusoidal input and checked for convergence; when satisfac-
tory convergence is obtained, the simulation is stopped and 
the Fourier integrals are used to define the I/O relation as in 
Eqn. (5). Convergence testing is required in this procedure, 
because transients generally occur in the simulation, and the 
Fourier integrals are not meaningful until the contributions 
of these transients have decayed to become small compared 
to the steady state response. The mechanics of this procedure 
are discussed in more detail in Section 2.3. Once conver-
gence is achieved, the desired I/O relation is obtained and 
written to a file to serve as a basis for controller design using 
NCSP. 
2.2 Command Structure 
Three new commands have been added to implement SIDF 
model generation: 
a. Frequency 
selection: 
The 
frequencies 
for 
which 
GO'ÎO; w0, a) will be evaluated are determined by the 
FREQ command. Four variant forms are: 
FREQ LIN <ωηιιη> <ü>max> < nw> [-ADD ] [/< fname2> ] 
FREQ LOG <ωηιιη> <ωη1;ιχ> <A/H'> [-ADD] [/<fname2> ] 
FREQ MAN <ω,> <ω 2> < . . . > [ -ADD ] [ /<fname2> ] 
FREQ FILE <fnamel> [ -ADD ] [ /<fname2> ] 
where the notation < . > denotes a numeric value and 
[ . ] an optional element. 
The choices are: LIN 
("linear"), yielding nw values of ω with equal spacing; 
LOG, resulting in nw values of ω with equal logarithmic 
spacing, MAN ("manual"), which accepts the user's list 
of frequencies directly from the command line, and 
FILE, which uses the frequency list in an existing file 
<fnamel>.F specified by the user. In all cases, the user 
may supply a filename <fname2> for storing the fre-
quency list; this file can be used in subsequent SIDF 
model generation. The option -ADD results in merging 
the newly-specified list with the existing frequency list. 
If either MAN or FILE is selected, or if the -ADD 
option is used, then the frequencies are organized into 
ascending order. The combination of these capabilities 
allow the user to generate a very finely-tuned frequency 
list. 
b. SIDF model generation: Obtaining the SIDF model is 
controlled by the FRESP command: 
FRESP [ < TSII„> ] [<d(> 
] [ -PART ] 
which results in evaluating the I/O characterization or 
frequency response (7(/'ω; w0, a). 
The optional argu-
ments <Tsmi> 
and <dt> are a maximum simulation 
time and suggested integration step, both of which are 
discussed in Section 2.3 on convergence. The option 
-PART results in just the first two integrals being 
evaluated [Eqn. (2), m = 0, 1] and the corresponding 
first harmonic and dc characterization [Eqns. (4, 5)] 
being obtained; otherwise all integrals [Eqn. (2), m = 0, 
1, 2, 3] and I/O relations [Eqns. (4-6)] are evaluated. 
As the frequency response is being generated, the user is 
informed of progress by messages of the form FRESP 
PROCESSING w = <value> as each frequency is con-
sidered. 
c. Error control parameter setting: The user can control 
convergence (Section 2.3) by changing the error control 
parameters using the new command FERR. For exam-
ple, FERR EPSDC <value> sets €</, to the desired 
value. Other keywords EPSM, EPSPHI, EPSY, NCYC 
correspond to the symbols in Section 2.3 in the obvious 
way. 
One SIMNON command has been extended to facilitate the 
use of this software: DISP, or display. New options are DISP 
FREQY, to show the list of frequencies defined via FREQ; 
DISP FREQR, to display the frequency response data; and 
DISP ECPAR, to show the error control parameters. 
Many existing SIMNON commands are useful in SIDF 
model generation. In particular: 
a. Parameter setting: The PAR command may be used to 
set the parameters a and w0 in Eqn. (1) to the desired 
values. The default values for these parameters are 1.0 
and 0.0, respectively. If the user inadvertently sets a = 
0.0, which is meaningless, then a warning message is 
issued. 
b. Integrability: Several commands in SIMNON can be used 
to ensure that the nonlinear simulation model can be 
integrated for sinusoidal excitation of the amplitude and 
frequencies selected: ALGOR and ERROR. The first 
selects the integration algorithm, and the second sets the 
integration error control parameter. Further control can 
be exercised by the specification of <dt> in the com-
mand FRESP, which is a suggested integration step size. 
The issue of plant model integrability is completely in 
the hands of the user exercising the existing control 
mechanisms, as it is in the use of any nonlinear system 
simulation program. We generally recommend using 
fourth-order Runge Kutta with self-adjusting step size. 

Computer-aided Control Engineering 
55 
The following example illustrates many features outlined 
above (everything following " is a comment): 
SYST NA1 SIDFGEN NACON 
" NA1 is a plant model, NACON connects it 
" to SIDFGEN; set a and w0 appropriately: 
PARA: 1.23 
PAR UO: 0.0456 
" Define the frequency list: 
FREQ LOG .1 10 7 
" Obtain the SIDF model: 
FRESP -PART 
" Display the results: 
DISP FREQR 
results in the display 
F R E Q U E N C Y RESPONSE, A = 1.23000 U 0 = 0.1 
ω 
0.1000000 
0.2154435 
0.4641589 
1.000000 
2.154435 
4.641588 
10.00000 
Real G 
1.029311 
1.011241 
0.9382116 
0.7308754 
0.4335728 
0.2131995 
0.0950871 
Imag G 
-0.1029510 
-0.2178886 
-0.4354827 
-0.7311587 
-0.9357857 
-0.9972967 
-0.9590450 
yo 
0.01929734 
0.01970793 
0.02126725 
0.02753362 
0.04494397 
0.09036508 
0.01944327 
2.3 Convergence 
The convergence testing of the Fourier integrals is a major 
concern in any attempt to automate I/O transfer function 
model generation. Since we are dealing with nonlinear simu-
lation, where anything can and often does happen, there is 
no simple or foolproof answer. Therefore, we will only dis-
cuss convergence on a simplified level. Further detail may be 
found in Taylor (1985). 
First, we have had to introduce five new error control param-
eters in order to provide the user with the required control 
over convergence. These are eiA., e,„, eé, ev, and N,vc. The 
first three of these are error bounds for the dc component, 
magnitude, and phase, respectively; e, defines "small" out-
put signal amplitude in the context of the system being stu-
died; and Ncn. provides one mechanism to limit the number 
of cycles of the input sinusoid that will be used. The first two 
parameters are relative error bounds and thus must be 
between 0.0 and 1.0; €φ and ev are absolute parameters and 
must be in the ranges 0. < €φ < 30. degrees, 0. < ev; NCVi. 
must be greater than two. 
Somewhat loosely speaking, the Fourier integrals are said to 
have converged when the d.c. component yQk and the magni-
tude and phase of the transfer function G\, denoted Mk and 
ΦΑ respectively, have converged in the sense that JO.A, Mky 
and ΦΑ evaluated over the previous ((AM)st) period of the 
simulation and the latest (ATth) period satisfy the following 
conditions: 
erré = 1ΦΑ - ΦΛ_ι 1< €φ 
where the default values for the error bounds are edc = e„, 
= 0.05 (these are relative error bounds of 5%) and €φ = 2 
degrees. 
In general terms, there are several things that can prevent 
convergence. Most often, more simulation time is required; 
one must inspect ysig to determine if that is so, and if so, 
increase either Ncyc or Tsim. The first approach changes the 
number of cycles that will be used before the convergence 
algorithm gives up (the default is Ncyc = 5), while the second 
changes the maximum simulation time (see FRESP above; 
the default is an arbitrary value of 10 (seconds or whatever 
unit of time is used)). Since the simulation will stop after 
Ncvc periods or Tsim seconds, whichever is longer, it is clear that 
Kyc governs the run at low frequencies, while Tsim limits the 
simulation time at high frequencies. These two simulation 
control parameters are provided to help ensure that FRESP 
does not get "stuck" endlessly integrating a difficult system, 
to minimize the possibility that the user will be compelled to 
CTRL-Y the program to regain control; therefore, we recom-
mend that these parameters be set carefully. 
Another problem is that there may be a very slow mode 
which keeps the dc component from converging. If the user 
is not concerned with the dc component (often it is not 
important), then convergence can be obtained without an 
increase in simulation time by increasing e(k.. 
The next most common convergence problem is that the 
output sinusoidal component of y5iH is "small" in one of the 
following senses and should be checked: 
K\< 
€.n k = 
K-\,K 
or 
(8) 
Mk < MGmaxev,k = 
K-\,K 
where MGmax denotes the maximum value of the magnitude 
of G O ; u0, a) for the previous frequencies processed. The 
first test is used only for the first frequency considered; the 
second test reflects a better convergence test based on the 
prior accepted values of 1 G 1 rather than on the arbitrary 
absolute 
error 
parameter 
e, 
alone. 
In 
both 
cases, 
(?0'ω; w0, a) is declared to be undefined (nothing is written to 
the frequency response file). In dealing with these situa-
tions, the first consideration should be ev., since this is an 
arbitrary absolute parameter for the first frequency processed 
by FRESP. The default value (l.E-6) may not have any 
meaning; if so, then a change is in order using the FERR 
command. On the other hand, there may be no periodic sig-
nal component in ysig. 
This is especially likely if there are 
biases and saturations in the model. Then it must deter-
mined why this is so and whether or not the frequency 
response has any meaning under those circumstances. 
In conclusion, we reiterate that making this procedure com-
pletely foolproof is difficult. 
In particular, additional care 
must be taken to handle the dc convergence error correctly 
when y0 or Gk are zero or very small in some sense. 
3. NONLINEAR CONTROLLER SYNTHESIS PRO-
GRAM (NCSP) 
The objective was to create a new module NCSP that inter-
faces with CLADP (Edmunds, 1979) and supports nonlinear 
control system design. The discussion that follows does not 
assume a detailed familiarity with CLADP; the reader is 
referred to Edmunds (1979) for further information. The 
basic functions of NCSP are: 
a. to accept and display a new system description type (fre-
quency response data); 
b. to generate a curve-fitted linear analytic model (in 
transfer function (ratio-of-polynomial) form, based on 
minimum mean square error curve fitting (Lin, 1982)) 
corresponding to frequency response data (Section 3.1); 
c. to permit the use of existing CLADP capabilities for 
designing linear controllers in the frequency domain; and 
d. to provide a nonlinear controller synthesis capability 
based on a pre-existing linear controller design (obtained 
using the capability c. above or otherwise), a correspond-
ing set of frequency response models generated by 
SIDFGEN (Section 2) for the controller in cascade with 
the nonlinear plant for various controller input ampli-
tudes, and automatic nonlinear gain synthesis via SIDF 
inversion [Section 3.2; Taylor (1984)]. 
CADCES-C 

56 
J. H. Taylor 
This approach to nonlinear design is best suited for dealing 
with situations where the amplitude-dependence of the non-
linear plant model is of primary concern, rather than situa-
tions where different operating points lead to different linear-
ized models. The NCSD routines we have implemented 
currently handle only zero operating points; the extension to 
arbitrary values is obvious but not simple to implement. 
Like most frequency-domain 
design programs, CLADP 
accepts linear models in either Laplace (ratio-of-polynomials) 
form or state-space (A, B, C, D) form. We extended the 
model définitions to include direct frequency 
response 
models of the sort generated by FRESP (or taken directly 
from laboratory measurements). This simply involves read-
ing the frequency response data from a file and storing it for 
further use. 
3.1 System Model Conversion by Curve Fitting 
Linear compensators based on the plant frequency response 
model may be directly designed using the classical frequency 
domain approaches without further model manipulation, or 
the user may employ any other linear design approach by 
using the FIT routine to generate ratio-of-polynomial models 
that best approximate the FR data in the minimum mean 
square error sense. Since the original data is in the frequency 
domain, it is most direct to convert to Laplace form; if the 
user desires to obtain a state-space model, then the appropri-
ate conversion can be made. 
The curve-fitting routine we implemented is based on the 
algorithm given in Lin (1982). Our tests have shown that 
this approach works well, as long as there is not a large range 
of ω in which the slope of the magnitude is not an integral 
multiple of 20 dB/decade. [This phenomenon can be caused 
by nonlinear effects, see Taylor (1984); it is particularly trou-
blesome in the context of curve fitting if it occurs at low fre-
quencies.] In such cases, the user can control this problem 
by the appropriate restriction of the frequency range. 
In our implementation, the details of the fitting procedure 
can be specified in advance by using the following com-
mands: NUM <value> (numerator order), DEN <value> 
(denominator order), BIAS (toggle bias removal switch 
on/off), 
FIXN (toggle switch to fix the numerator s° 
coefficient to be unity) and FREQ (define frequency range 
for fitting). Ordinarily, the FIT routine provides a model in 
which the denominator s° coefficient is unity; however, that 
must be changed if the user has a type-one plant model (one 
having a pole at 5=0). 
If the FIT command is issued 
directly, the user is asked to supply this information. 
The user may find it necessary to iterate in obtaining a mean-
ingful fit to the frequency response data. For example, it 
may be necessary to vary numerator and denominator order 
(NUM, DEN), to try restricting the range of frequencies 
used by the fit algorithm (FREQ), etc., until an adequate fit 
is obtained. 
The command LCD has been installed to provide access to 
the CLADP linear controller design approaches. The use of 
this capability may result in a linear controller design that 
provides satisfactory performance, in which case the user has 
successfully carried out the one-model SIDF-based linear 
controller design method (Taylor, 1983). If this is not the 
case, then the systematic approach outlined in that paper 
moves on to multi-model nonlinear controller design by SIDF 
inversion. We have implemented one of these approaches, 
as follows: 
3.2 Direct Synthesis of Nonlinear Controllers 
The basic idea (Taylor, 1984) is to process a set of 
frequency-domain models for the nonlinear plant in cascade 
with a linear compensator designed as above and synthesize a 
static nonlinearity so that the forward path of the resulting 
control system (see Fig. 2) will be as insensitive to input 
(error signal) amplitude e as possible, where the set of values 
[ek. , k = 1, 2, ...} is selected by the user, based on the study 
of the performance of the linear controller that lead to the 
decision to seek a nonlinear controller and on anticipated 
operating conditions. 
This procedure involves six steps: 
a. select one plant operating regime defined by input ampli-
tude a0 and generate the (?0(/'ω; α0) model using 
SIDFGEN, Section 2; 
b. design a linear controller of any type denoted C{j(n) (use 
CLADP - the primary concern is to achieve good speed 
of response or bandwidth and transient response); create 
a SIMNON model of CC/'ω); 
c. combine C{jù>) with the nonlinear plant model and 
SIDFGEN, drive it with sinusoidal signals of d.c. value 
e0 and sinusoidal amplitude ek, k = 1, 2, ... and use 
SIDFGEN to generate the transfer function models 
denoted (CO'w) Gk(j<*\ *o, ek)) or, more simply, [CGk}\ 
d. take the set of models [CGk] and for each k determine 
the precompensating static gain Kk required to force 
KkCGk) to just avoid a specified M-circle, as illustrated in 
Fig. 3; 
e. pass the set of gains [Kk{ek)} to the SIDF inversion rou-
tine for nonlinearity synthesis; and 
f. validate the nonlinear controller design via simulation. 
This approach thus results in designing a general compensator 
[in terms of its dynamic response C(jü>)] with one nonlinear-
ity that is automatically synthesized. The nonlinearity to be 
placed in series with Cijœ) (in front of C(jœ) in Fig. 2) is 
synthesized using a number of existing tools; the new ele-
ments are items d. (the M-Circle Algorithm) and e. (the 
SIDF 
Inversion 
Algorithm). 
The 
latter 
routines 
are 
described below. 
3.2.1 Quasilinear 
gain 
evaluation 
(the 
M-Circle 
Algorithm). This technique proceeds as follows: The input 
for this procedure is frequency response data for CGk, in k 
files. The segments that define each curve are processed to 
determine the gain Kk so that KkCGk just touches the M cir-
cle, as shown in Fig. 3. The details are omitted for the sake 
of brevity; note, however, that if the resulting Kk is infinite, 
the user is so informed and a recommendation that a smaller 
value of M be tried will be issued if CGk goes into the half 
plane U < 0 at all. (If CGk is always in the right-half-plane 
(is positive real), then the "gain margin" is infinite, which is 
surely conservative; generally there is no problem that would 
necessitate synthesizing a nonlinear controller is such is the 
case.) 
As mentioned previously, the output of this pro-
cedure is a set of error amplitude-gain pairs [ek, Kk] from 
which a precompensating nonlinearity is synthesized. 
3.2.2 Controller 
Nonlinearity 
Synthesis 
by 
SIDF 
Inversion. For each value of ek there exists a linear compen-
sator design that differs only in the gain values Kk. This 
information serves as the basis for nonlinear controller syn-
thesis, as follows: Given the gain versus amplitude relation 
of the form Kk(ek) that is to be achieved by a single non-
linearity, adjust the parameters of a specified piecewise-linear 
nonlinear function fpw, (e) so that the SIDF of fpw/ provides 
the best fit to the gain/amplitude relation Kk(ek) 
in the 
minimum-mean-square-error sense. We defined fpw, in fairly 
general terms as shown in Fig. 4. The parameters to be 
adjusted are the slopes, Su S2, the breakpoint, δ, and the 
step discontinuity, D. 
The user is allowed to restrict the nonlinearity by fixing any 
of the parameters of fpwl; only free parameters will be 
adjusted for mean square error minimization. For example, 
fixing 
5, = 0.0, 52 = 0.0 

Computer-aided Control Engineering 
57 
restricts fpwi to being a relay with deadzone, of arbitrary out-
put level D and deadzone width 2δ. The parameters shown 
in Fig. 4 allow enough degrees of freedom that most reason-
able gain/amplitude relations can be fit with decent accuracy; 
allowing the designer to restrict this freedom should permit 
the user to arrive at a practical design. 
In summary, denoting the parameters that define fpw, (e) by 
the vector p, 
pr = [Su S2, δ, D] 
we developed a routine for evaluating the SIDF of 
f,miie,p), 
and the parameter adjustment is done using MINPACK 
(More, 1980). The output of MINPACK is the parameter 
set p* for the nonlinearity in the controller, which completes 
its definition. 
It should be observed that the gain set 
[Kk(ek)} must be well-conditioned, in the sense that the 
values of ek must cover a reasonable range of e (e.g. [ek] = 
((1.2, 3.3, 5.4, 7.5) rather than {ek} = {1.2, 1.35, 1.50, 
1.65}); the reason for this is that the SIDF of the nonlinear-
ity fpwi cannot change abruptly with small amplitude changes, 
so a closely-spaced gain set will usually be meaningless. 
Also, the user should be aware that quite different nonlinear-
ities may have very similar SIDFs [cf. Gelb (1968), Figs. B.l 
and B.2, where the SIDFs for a 3-level quantizer is almost 
identical to the SIDF of a limiter for all normalized input 
amplitudes greater than 1.5]. Therefore, the user may have 
considerable latitude in choosing the nonlinearity to imple-
ment. 
A second output is provided so that the nonlinearity can be 
incorporated directly in a simulation of the closed loop sys-
tem. 
This is a SIMNON text file <fname>.T, 
where 
<fname> is selected by the user, that models the controller 
nonlinearity; the parameter values are written according to 
the results obtained by the nonlinearity synthesis procedure. 
The user is then ready to simulate the plant plus nonlinear 
controller in either open or closed-loop configuration by sup-
plying the appropriate connecting system. 
For further illustration, see Taylor (1984). 
4. SUMMARY AND CONCLUSIONS 
The primary motivation for the effort described above is to 
simplify the use of SIDF-based methods for analysis and 
design of nonlinear systems, and to transition this technology 
to control engineers in other parts of General Electric. It is 
the author's hope that this description will allow others to 
achieve the same objectives. 
ACKNOWLEDGEMENT 
Kevin Strobel and Ralph Quan, both employed at GE CRD 
and students at the Rensselaer Polytechnic Institute in 1983 
and 1984, contributed a great deal to the success of this 
effort. 
REFERENCES 
Edmunds, J. M. (1979). Cambridge linear analysis and 
design program. I FA C Symposium on Computer Aided 
Design of Control Systems, Zurich. 
Elmqvist, H. (1977). SIMNON - An interactive simulation 
program for non-linear Systems. Proceedings of 
Simulation '77, Montreux. 
Lin, P. L., and Y. C. Wu. (1982). Identification of multi-
input multi-output linear systems from frequency 
response data. Trans. ASME, 104, March, 1982. 
More, J. J., B. S. Garbow, and K. E. Hillstrom. (1980). 
User Guide for MINPACK-1, Argonne National 
Laboratory, Report No. ANL 80-74. 
Spang, H. A. III. (1982). The federated computer-aided 
control design system. Proc. 2nd IFAC Symp. on 
CAD of Multivariable Technological Systems, 
West Lafayette, IN, 121-129. 
Taylor, J. H. (1982). Environment and methods for computer-
aided control system design for nonlinear plants. 
Proc. 2nd IFAC Symp. on CAD of Multivariable 
Technological Systems, West Lafayette, IN, 361-367. 
Taylor, J. H. (1983). A systematic nonlinear controller 
design approach based on quasilinear system models. 
Proceedings of the American Control Conference, 
San Francisco, CA, 141-145. 
Taylor, J. H., and K. L. Strobel. (1984). Applications 
of a nonlinear controller design approach based on 
quasilinear system models. Proc. American Control 
Conference, San Diego, CA, 817-824. 
Taylor, J. H. (1985). Software tools for nonlinear controller 
design. GE Corporate Research and Development Report 
No. 85CRDnnn. 

58 
NONLINEAR 
^ 
MODEL 
^ 
NPUT/OUTPUT ^ 
DATA 
^ 
MODELING 
LANGUAGE 
SYSTEM 
IDENTI-
FICATION 
SOFTWARE 
J H 
EQUILIBRIUM 
SOLVER 
Taylor 
LINEARIZER 
t 
I 
PLANT/SYSTEM 
MODEL DATA BASE: 
NONLINEAR, 
LINEAR, 
QUASILINEAR 
A 
A 
..L 
QUASI-
LINEARIZER 
A 
| 
SIMULATOR 
ANALYSIS 
^ 
PLANT/SYSTEM 
^ 
RESPONSE 
PLANT/SYSTEM 
^ 
BEHAVIOR 
CHARACTERIZATION 
LINEAR DESIGN 
(CLADP), 
l· 
NONLINEAR DESIGN 
CONTROLLER 
MODEL 
■ ^ 
DESIGN 
Fig. 1. CAD Environment for Nonlinear System Design. 
a. (Q)cos (c*)t +Φ) 
ekcos ω\ 
C(jco) \Δ G (|ω, a) 
ak (o) = ek |C(jü>)| 
<f>=*C(j<*>} 
Fig. 2. Compensated Forward Path 
* - e 
Fig. 4. Piecewise-Linear Compensator Nonlinearity 
M circle 
M = 4 
K1 CG 
Fig. 3. Illustration of Kk(ek) Generation 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INDUSTRIAL APPLICATIONS OF COMPUTER AIDED DESIGN 
INDUSTRIAL APPLICATIONS IN JAPAN OF 
COMPUTER AIDED DESIGN PACKAGES 
FOR CONTROL SYSTEMS 
M. Araki 
Department oj Electrical Engineering 11, Kyoto University Yoshida, Sakyo-ku, 
Kyoto 606, Japan 
Abstract The present status of use of CAD packages for control systems in Japanese 
industries is surveyed based on two questionnaires done in 1983 and 1984. Lists of CAD 
packages, statistics about applications, and criticisms and expectations of engineers 
at industrial practice are reported. Some of recent researches are also introduced. 
Keywords CAD, Control System Design, Japanese Industries. 
§1. Introduct ion 
The purpose of this report is to make a survey of 
the present status of use of CAD packages for 
control systems in Japanese industries. The 
contents are based on two questionnaires : 
Ql 
Q.I I 
Investigation of Use of CAD Packages for 
Control Systems—done in 1984 by the author 
Enquete on Use of Modern Control Theory in 
Industrial Practice--done in 1983 by the 2nd 
subcommittee of the Committee for Industrial 
Problems of SICE (Society of Instrument and 
Control Engineers) 
The outlines of the questionnaires are in Appendix. 
The report consists of 6 sections. In §2, CAD 
packages which appeared in Ql will be summarized. 
In §3, how the packages are used will be investi-
gated. 
In §4 we proceed to study what are the 
probelms with the present packages, and what are 
expected for the future packages. In §5 some of 
recent researches will be picked up. §6 is for 
concluding remarks. 
§2. CAD packages Used in Japanese Industries 
In this section, we summarize the CAD packages 
which appeared in Ql. We include simulators in the 
lists, too. Packages are classified into 3 
categories : 
Cat.l 
Packages introduced from some company, 
organization, or researchers outside the 
users' company.(Table 1) 
Cat.2 Packages made in the user's sections. 
(Table 2) 
Table 1. CAD Packages of Cat.l (Ql) 
Name 
Control led 
Object 
Main Functions 
Frequency 
of Use 
Date 
a. Packages for Mini δ Large Computers 
| 
ACSL 
CONPAC-Group 
DPACS 
DPACS-F [1] 
PIPAC [2] 
CONPAC [3,4] 
CSMP [20] 
CSMP 111 [20] 
CSPL 
DDS 
DDS-OPT [5.21] 
IDCOM 
Linear Systems 
Analysis [22] 
RANDAP 
RANDAP 11 [23] 
SLCS IV [24] 
TIMSAC [6] 
Multivariable 
Multivariable 
Multivariable 
Multivariable 
Multivariable 
Single Variable 
Single Variable 
Multivariable 
Multivariable 
Simulation 
Control System Design (State Space) 
Control System Design (Freq. Domain & State Space) 
Identification (AR, ARMA, and other) 
Control System Design & Identification 
Simulation 
Simulation 
Simulation 
Simulation 
Simulation & Parameter Optimization 
Identification (Impulse Response) and Control System 
Design (1DCOM-logic) 
Control System Analysis (with Root Loci) 
Random Data Analysis (AR Model) 
Random Data Analysis (AR Model) 
Simulation 
Identification (AR Model) & Control System Design 
(Optimal) 
a,b 
bx3,c 
ax2 
b 
a,bx5,c,d 
ax5,b,c 
a,c 
a 
a 
b 
cx2 
c 
bx2 
ax3 
d 
1977 
1977 
1978 
1978 
1964 
' 1970 
1975 
1979 
1972 
59 

60 
M. Araki 
|b. Packages for 
[MCSP [7] 
* [8] 
Personal Compute 
Single Variable 
Single and 2 
Variable 
r 
Simulation 
Control System Design (Freq. Domain & Optimal·· 
Control System Design (Freq. Domain, State Space & 
Adaptive) 
b 
c 
b,c 
1982Ί 
19791 
Table 2. CAD Packages of Cat.2 (Ql) 
Name 
a. Packages for 
BACS 11 [9] 
CASE-CTL [19] 
CONSAP 
CSDP [10] 
ISAC [11] 
LACE [12] 
MARS [13] 
MCSL 
MIMOS [14] 
SAPL [17,25] 
*-l [18] 
*-1 1 
* [15] 
" 
* 
[15] 
* 
b. Packages for 
PR0DEC0S [16] 
Control led 
Object 
Main Functions 
Mini & Large Computers 
Multivariable 
Multivariable 
Multivariable 
Multivariable 
Multivariable 
Multivariable 
Multivariable 
Single Variable 
Multivariable 
Multivariable 
Multivariable 
Personal Compute 
3 Variable 
Simulation 
Identification and Simulation 
Control System Analysis (with Nonlinear Simulation) 
Control System Design (Freq. Domain & Optimal) 
Control System Analysis (with Nonlinear Simulation 
Emphasis is on Discrete-Continuous Complex Systems) 
Control System Analysis 
Control System Design (includes DPACS), Identifica-
tion, Special Purpose Simulation & μ-Processor Pro-
gram Generator 
Simulation 
Control System Design (State Space) 
Control System Design (Freq. Domain & Optimal) & 
Identification (AR Model) 
Control System Design (Freq. Domain & Transfer Fn.) 
Control System Design (State Space) 
Simulation 
Simulation of Nonstationary Large-Scale Systems 
Simulation of Nonstationary Small-Scale Systems 
Control System Design (Freq. Domain) 
Control System Design (State Space) & Identification 
Identi fication 
Identification 
r 
Control System Design (Freq. Domain & State Space, 
Nonlinear Simulation) 
Frequency 
of Use 
ax2,bx2 
a 
a 
b 
a 
a,bx2 
a 
a 
a 
a 
a 
ax2,b 
ax3,d 
ax2 
c 
dx2 
c 
b,c 
a 
Date 
1969 1 
I98O 
1983 
1978 
1983 
1984 
1984 
1974 
1984 
I983 
1984 
1984 
1984 
Cat.3 Packages made in the users' section and used 
in a single or a few sect ions.(Table 3) 
It should be noted that distinction between Cat.l 
and Cat.2 is not directly related to whether the 
package is on sale or how consolidated it is. 
Actually, some of packages of Cat.l are not on the 
market while some in Cat.2 are ready for sale. 
Distinction between Cat.2 and Cat.3 was subtle but 
made based on "How widely used?", "Published or 
not?", "Ready for realease?", etc. All special 
purpose (from control viewpoint) packages were put 
in Cat.3. There are several packages which could 
not be included in the lists because of lack of 
information or restrictions by contracts. The 
packages are arranged in alphabetical order in each 
table. 
Table 1 includes the packages of Cat.l, where the 
languages and symbols in each column means the 
following : 
Name : "*" is filled in when the package is not 
named or the name is not released. 
Control led Object 
variable". 
'Single V a r i a b l e " or " M u l t i -
Main Functions : "Control System Analysis"={Linear 
simulation and display of frequency responses. 
Some packages include nonlinear simulation and/ 
or display of root loci}; "Control System 
Design"={Analysis functions are included, too. 
As for design, possible methods are indicated in 
parenthesis};"Freq. Domaîn"={Design by vector 
loci,Bode diagrams, Nichols chart and/or root 
loci, and parameter tunning of PID controller in 
the single variable case. The INA & DNA methods 
are included in addition in the multivariable 
case.};"State Space"={Pole assignment, optimal 
control with respect to the infinite-time quad-
ratic-integral criterion, and observer design. 
Sometimes, decoupling by state feedback is in-
cluded} -/'Optimal "={0ptimal control with respect 
to the infinite-time quadratic-integral crite-
rion} -»"Transfer Function"={Model matching and 
similar methods} 
(Note that the above shows the standard menu and 
there are several exceptional cases.) 
Frequency of Use : "a"=very frequently, "b"=once a 
month on the average, "c"=several 
times a year, "d"=less 
For instance, "ax3,b" means there were 3 
sections who use the package very frequently, 
and 1 section who uses the package once a month 
on the average. 
Date: It was often difficult to know (or difine) 
when a package was born. But it seems important 
to give some indication about ages. So, date of 
birth was estimated 
from various sources. The 
readers are requested not to give too much 
credit to these dates. 

Industrial Applications in Japan 
61 
Table 3 CAB Packages 
Functions 
Simulation Special purpose 
General purpose 
Control System Analysis 
Control System Design 
Single Variable, Freq. Domain 
Single Variable, Transfer Fn. 
Multivariable, State Space 
Multivariable, Optimal 
1 Multivariable, Freq. 
| Identification 
of Cat.3 
No. of 
Pcckages 
15 
k 
2 
5 
1 
2 
1 
2 
2 
(Ql) 
Frequency 
of Use 
axll,bx^ 
ax2,b*2 
a,c 
ax2,b,c*4 
b 
a,b 
a 
b,d 
c,d 
As for functions of the packages, distinction be-
tween "Control System Analysis" and "Control System 
Design (Freq. Domain)" was sometimes difficult. We 
followed the emphasis found in the pamphlet or 
other documents. The relation of the packages of 
"CONPAK-group" is as follows. DPACS is the first 
version and includes basic design functions in 
state space. DPACS-F is the 2nd version including 
frequency-domain methods and other utility func-
tions. Both of them were developed on a mini-
computer. PIPAC is the identification part of 
CONPAC, which is for large computer and has func-
tions "DPACS-F + Identification". Concerning! 
PIPAC, note that the programs introduced in [2] is 
the older version. RANDAP uses some routines of 
TIMSAC and RANDAP II is the multivariable version. 
Table 2 includes the packages of Cat.2. The 
languages and symbols mean the same as in Table 1. 
Table 3 is the statistics of the packages of Cat.3 
Meanings of the words ih the "Functions" column 
are similar to those of Table 1. But, naturally, 
most of the packages of this category are somewhat 
specialized and covers a little narrower range than 
those in Tables 1 S 2. One of the "Control System 
Design (Freq. Domain;Single Variable)" packages 
includes the function of making a linear model 
based on the results of nonlinear simulation 
supplied by another simulation packages. Several 
of special purpose simulators are equipped with 
parameter optimization and documentation functions. 
References [27~30] and about packages of Cat.3· 
§3. Present Status of Usage 
First, let us investigate popularity and actual 
utility of each function included in CAD packages. 
In Tables k & 5, statistics were taken from Ql 
about sections who own packages with a certain 
function and about applications in which a certain 
Table k 
(Ql) 
Which Functions Are Popular? -- Percentage of 
Sections Who Own Packages with a Certain Function 
Total = k3 sections 
Simulation Special P. 
General P. 
303 
79 
Control System Analysis/Design 
Freq. Domain & PID 
Tuning (Single V.) 
Transfer Fn. Design 
State Space 
INA & DNA 
Smith Control 1er 
I dent ification 
Ik 
ko 
72 
ko 
2 
56 
function is actually used. These statistics, 
together with the respondents' comments, could be 
summarized as follows : 
(i) 2 thirds - 3 fourth of sections have "Freq. 
Domain" and "State Space Design" packages, and 
approximately half own "Indentification". These 
numbers seem to reflect the "need + expectation" of 
engineers at industrial practice. 
(ii) "Simulation" has been the major tool of 
design from early periods and this tendency will 
continue. Main reasons of heacy dependence on 
simulation are : (a) complicated (nonlinear, 
hybrid, nonstationary, etc.) nature of the actual 
objects, (b) ease of communication with engineers 
in other fields, and (c) that, once engineers have 
got experienced with the object, simulation becomes 
much straight forward design method. 
(iii) "Freq. Domain Design" packages started as 
private programs in sections. They were improved or 
renewed according with replacement of computers, 
and are now kept and frequently used at majority of 
sections who specialize in design of control 
systems. 
(iv) Rapid introduction of "Modern Control 
Theoretical Design" (i.e. "Transfer Fn. Design", 
"State Space" and "INA & DNA") packages were 
promoted by the development of CONPAC (actually, 
half of those packages reported in Ql are of 
CONPAC-Group). Now, they are used by wide spectrum 
of engineers while complaints about manuals and 
user friendliness were mentioned. 
(v) As for "Identification", TIMSAC seems to 
have played an important roll in popularization of 
the statistical method. 
It is now well-known to 
and actually practiced by engineers, especially 
those who are dealing with therma^chemical,or 
cement processes. 
(vi) In several industries, packages which cover 
as wide range of analysis/design functions as 
CONPAC and, at the same time, fit better to their 
own requirements are being (or have been) developed. 
A typical way is to combine existing design 
packages (e.q. CONPAC) with other programs such as 
special purpose simulators, documentation routines 
and program generators. 
Next, let us study in what situation and in what 
form the "Advanced" methods are used. 
In Tables 
6-11, data from Part 1 of QlI are shown. Here, 
"Advanced" methods include any methods other than 
PID and phase-lead-phase-lag compensators. About 
the statistics of Tables 6-10, we can point out the 
fol lowing : 
(vii) Although "Pure Delay" is the top reason 
for the difficulty (Table 6 ) , such modern methods 
for time-delay systems as the process-model control 
[31], finite pole assignment [32] and algebraic 
Table 5 (Ql) 
Which Functions Are Actually Used? -- Number of 
Applications in Which a Certain Function Was Used 
Total : 
Only Simulation 
Analysis/Design Metho 
Freq. Domain & PID 
Tuning (S ingle V.) 
Transfer Fn. Design 
State Space 
INA & DNA 
Model Reduction 
Identification 
= 105 cases 
1 
».o 
1 
I 
ds 
1 
1h 
1 
1 
1 
: 
1 
1 
16 
k 
1 
13 

62 
M. Araki 
Table 6 (Qll) 
Table 7 (Qll) 
Table 8 (Qll) 
Table 9 (Ql I) 
Table 10 (Ql I) 
What Was the Main 
What Was the Purpose of 
Which Size of 
Which Type of 
Which Method Was 
Problem of Control 
Introducing Advanced Methods Computer Was Used Controller Was Used Used for Modeling 
for Analysis δ 
Design 
Pure Delay 
Disturbance 
Interaction 
Response 
Stabi1ity 
| Others 
24% 
21 
17 
16 
11 
9 J 
Qual ity 
Energy 
Safety 
Automat izat ion 
Efficiency 
1 Others 
lk% 
2k 
15 
11 
10 
5 
Large 
Mini 
Personal 
Others 
51% 
22 
20 
7 
DDC 
Process 
Computer 
General 
Purpose 
y-Processor 
Others 
k2%
] 
39 
10 
9 
design method [33] did not appear in the list of 
the tools for sol ution(Table 11). This may be 
partially because the sampled-data control is 
believed to solve pure-delay problems, and partially 
because the above methods are still "too modern" to 
be acknowledged as usable methods at industrial 
pract ice 
(viii) Tables 8 and 9 say that general purpose 
y-computers are not used very often either for 
analysis/design nor for implementation on the 
average. 
(But the situation seems to be changing 
rapidly. Refer to the comment at the end of the 
section and also to §5). 
(ix) Table 10 indicates popularity of AR and 
ARMA models. 
Table 11 is a statistics similar to Table 5· The 
difference exists in that Table 5 was taken from 01 
which asked about "application of CAD packages" 
whereas Table 11 is from Q M which asked about the 
applied method directly. From the similarity and 
difference of the two tables we can find the 
fol lowing : 
(x) "Optimal" and "Kaiman Filter" are the most 
useful among the methods included in the standard 
menu of CAD packages, and "Improved PID" and 
"Observer" follow as the second group.t 
(xi) But there are several other methods which 
are not included in the standard men but are used 
more, or at least comparatively, often as 
"Optimal". Namely, "Adaptive, Learning & 
Optimalizing Control" is applied most frequently 
among all, and "Feedforward" and "Docoupl ing"++ are 
cons iderably. 
The above suggests that development of convenient 
tolls for the design of "Adaptive", "Feedforward" 
and "Decoupling" controllers is neccessary. 
Lastly, let us pick up the respondents' comments 
which are concerned with the present status of 
usage of CAD packages and have some generality. 
Concerning simulation : 
# By any means the control systems are tested by 
simulation at the final stage.(Ql) 
# Simulators which can accept block diagram 
description of systems are preferred.(Ql) 
# To use simulation for the determination of size 
and frequency of the inputs for identification was 
the main reason of success.(QlI) 
Concerning methods of modeling : 
# Modeling and model reduction are both 
conducted based on physical consideration.(Ql) 
# Parameter estimation was carrid out based on 
the data from physical/chemical experiments.(QlI) 
#Refering to the results of theoretical 
analysis, plan of experiments using actual plants 
was made, and then a practical model was constructed 
based on experimental data.(Qll) 
Concerning methods of control or design : 
AR or ARMA 
Theoretical 
Empi rical 
Parameter 
Estimation 
GMDH 
hS% 
35 
17 
3 
Transfer Fn. 
[State Space 
52% 
48 
# Advanced methods which are actually applied 
are "improved PI", "feedforward", and "model 
analysis".(Qll). 
# Most of the processes can be controlled 
satisfactory by improved PID.(Qll) 
Concerning the main reasons of success : 
# Enough data for modeling/indentification were 
available.(many in Qll) 
#Use of theoretical models.(Qll) 
^Repetition of simulation combined with other 
methods.(many in Qll) 
Concerning other items : 
# Personal computers seem to be frequently used 
in fields for analysis and re-adjustment. Handy 
and powerful software is expected.(Ql) 
^Education is not enough to make application of 
advanced methods possible.(QlI) 
§4. 
Advantages, Problems and Expectations 
In this section let us investigate advantages and 
problems of present packages, and needs and 
expectation for future packages. 
Table 11 (Qll) 
Which Method of Control 
or Design Was Applied 
Adaptive, Learning 
& Opt imal izing 
Optimal 
Kaiman Filter 
Feedforward 
Decoupling 
Improved PID 
Observer 
Selector Control 
INA 
Pole Assignment 
Smith 
j Fuzzy Control 
| l« cas&s 
1 l? 
1 
in 
1 
q 
1 
1 
1 
= 1 
D 
Ώ 
Ώ 
8 
i 
7 
4 
3 
2 
1 
1 
1 
t 
In several cases of answering "Kaiman Filter", 
the respondent seems to have meant some parameter 
estimation method in the modeling stage. So, it 
was not combined with "Observer". 
tt Most of the 8 cases shown in Table 11 are the 
feedforward-type decoupling associated with INA/DNA 
method though there are some cases which may imply 
the decoupling by state feedback. The design 
method of the former does not usually appear in the 
menu. 

Industrial Applications in Japan 
63 
As for advantages, most of the respondents who 
actually applied their CAD packages answered that 
packages were very useful, while some answered that 
they were useful but not enough (OJ). Several 
mentioned that general application of modern 
control theory was first enabled by the introduction 
of CONPAC (Ql) . 
As for problems, there were many complaints about 
user friendliness, as usually the case with any 
package software. Most of the opinions were 
concerned with the way of data input, and 
preference for inputting in the form of block 
diagrams (graphical) was mentioned by several 
respondents. Concerning the organization of 
packages two opposite types of preferences were 
shown. Namely, some prefer that "input of block 
diagram" - "conversion to state-space description" 
- "model reduction" - "control system design" -
"simulation" - "indication for implementation" are 
organized as a series of tasks and a user can 
automatically reach the destination without 
considering too much about what is the next step. 
But some other like that each function (such as 
solution of Ricatti eq.) is prepared as a separate 
module and a user can use them in any combination. 
These requirements are opposite but not contradic-
tory, and it would not be difficult to meet the 
both by one package. Some mentioned that they want 
"to compute transfer zeros", "to treat models 
including algebraic relations", etc. These 
requirements could be solved by adding small 
modules to the present packages. 
Next, let us proceed to such problems which lead to 
the needs and expectations for future packages. 
There were many comments about the problems of 
nonstationarity, nonlinearity, pure delays and 
distributed parameter systems (Ql δ Qll). These 
factors are said to be causing serious difficulties 
in all stages of identification, simulation, and 
design, and more powerful algorithms and usable 
identification, control and design methods are 
expected. Next notable suggestions are those about 
difficulty of choosing a control method and those 
about on-line computation. Concerning the first 
point, one of the problems with modern control 
theory is that too many possibilities exist and 
comparison can be done, at present, only after 
carrying out all of them, which requires much time 
and knowledge. 
Importance of a guide about the 
choice and limitation of methods was emphasized and 
application of knowledge engineering was suggested 
(Ql). 
Concerning the second point, expectation for 
on-line identification, on-line computation of the 
optimal gain and on-line analysis in the case of 
sudden (unexpected) disturbance were mentioned (Ql 
& Qll). Other than the above, the following were 
expected. 
^Design packages which can deal with larger (his 
Table 12. Expectation for Future Packages (Ql) 
A: More advanced functions are needed. 
B: More user friendly packages are expected. 
C: Present packages are enough. 
D: Even present packages are not used often. 
E: Other (unnecessary, not considered, etc.) 
A
B 
C 
present package: state variables 4 *t0) systems. 
# Faster personal computer. 
In Table 12, statistics about needs and expectation 
for improved versions of CAD packages is shown (Ql). 
Table 13 shows the top ten items which was nomi-
nated as "most accessible (i.e. easiest to apply)" 
by engineers at industrial practice, and Table 14 
lists the same of "most prospective" (Qll). To be 
exact, Table 13 was made based on answers to the 
question : "whether you can apply the following 
items 'immediately', 'after studying a little', or 
'after studying a lot'." Table 14 were made from 
the answers to the question : "whether the 
following items are thought 'effective and 
practical', 'may be effective but not practical', 
or 'not either'." 
Table 13 (Qll) 
Most Accessible Items 
Table 1*4 (Ql I) 
[1. 
2. 
3· 
4. 
5. 
6. 
7· 
8. 
9. 
10 
Feedforward 
Response Simulation 
Transfer Fn. Model 
Improved PID 
Analysis of Model & 
S imulat ion 
Smith Control 1er 
Stabi1ity Criterion 
Selector Control 
Decoupling 
. Optimalizing Control 
Most Prospective Items 
li. 
2. 
|3· 
Γ· 
5. 
6. 
7. 
8. 
9. 
10 
Analysis of Model & 
Simulation 
Feedforward 
Response Simulation 
Transfer Fn. Model 
Improved PID 
Decoupling 
Adaptive, Auto-tuning 
& Learning 
Theoretical/Empirical 
Model 
Optimalizing Control 
. Statistical Model 
| 
Simulât ion 
Analysis/Design Packages 
Freq. Domain & PID Tuning (Single Variable) 
State Space 
INA & DNA 
Model Reduct ion | 
Ident ificat ion 
§5· Researches 
Let us briefly look at some of the recent re-
searches about CAD packages in Japan. 
We already introduced that, in industries, research 
and development to combine a CAD package with other 
programs such as a μ-processor program generator 
and to make an "al1-through" package is in progress. 
The "computer aided control" system CACOS, which 
was developed in Tokyo Institute of Technology, has 
gone a step further [34]. This package was 
produced based on the understanding that reali-
zation of a control system includes 4 essential 
steps: modelling, controller design, implementation 
for experiments, and re-adjustment of parameters 
(and, sometimes, of the control scheme itself). 
CACOS is an "al1-through, on-line" package which 
enables a mini-computer to carry out all the above 
4 steps on line. It includes DPACS (together with 
the function of PIPAC) as the core, but carries out 
the discrete-time design only, and has ability to 
cope with nonlinearities by modification. 
Other class of researches are about CAD packages on 
personal computers. In addition to 
publication/release of PR0DEC0S [16] and 
DTCS/P [39], which cover state space 
and other design functions, researches 
are reported on improvement of the input 
method [36] , on a package for an im-
proved DNA and pseudo-diagonalization 
c 
method [38], on packages for root-loci 
[37] and root-loci bands [40] , and on 
the educational use [39]· 
J 
sWWNWWWNv 
λ\\\\\\\\\\\\\\1·-::·..Ι 
\\\\\\\\\\\\\Ν··:··.··:··.·| 
Γ 
vWWWWWWXT-
As researches which are potential to 
offer powerful tools for future packages, 
we should cite the application of the 
symbolic and algebraic manipulation. 
At present, researches are limitted to 
the use of REDUCE, which maniputates 
algebraic equations. The present 
author and colleague applied it to the 
automatic linearization of nonlinear 
systems [41], Senda et al. did the 

64 
M. Araki 
similar for the analysis and design of robots [42], 
and Takahashi et al. used it for the analysis of 
1inear systems [43]. 
§6. Conclusion 
We can summarize and conclude as follows : 
(a) As for "Single Variable, Freq. Domain 
Analysis/Design & PID Tuning", lk% of sections of 
industries already own some packages, and it could 
be said that problems are almost done except im-
provement of user-friendliness. 
(b) As for "State Space Analysis/Design", 72% of 
sections own some package, but still more advanced 
functions are desired. 
(c) As for "INA & DNA", evaluation was splitted. 
(d) As immediate needs, development of packages 
for "Adaptive, Auto-tuning & Learning", "Feedforward", 
"Decoupling" and "Optimalizing" controls are expected. 
Expecially for "Adaptive, Auto-tuning & Learning" 
and "Optimalizing", computer-aided-control systems 
(i.e. on-line design & control systems like CACOS) 
rather than mere CAD systems will be strongly 
requi red. 
(e) Practical indication about utility and 
limitation of various modern control theoretic 
methods and a guide for the choice of them are also 
requi red. 
(f) Researches on algorithm to simulate nonlinear 
systems with pure-delays, and on design/control 
methods for nonstationary, nonlinear, and/or time-
delay systems are strongly expected. 
(g) At present, development of all-through on-
line packages, use of personal computers for design, 
and application of symbolic and algebraic manipula-
tion are going on. 
References 
[I] K.Fur-ita & H.Kajiwara (1979), J. SICE (Society 
of Instrument and Control Engineers), Vol.18, 
pp.777-786 
[2] K.Furuta et al. (1981), Automatica, Vol.17 
pp.755-762 
[3] K.Furuta et al. (1980), IFAC Computer Aided 
Design of Control Systems (edit. M.A.Cuenod), 
pp.267-272, Pergamon 
[4] K.Furuta et al. (1982), I FAC Theory and Applica-
tion of Digital Control (edit. A.K.Mahalanbis), 
pp.527-532, Pergamon 
[5] T.Mitsumaki et al. (1972), J. SICE, Vol.11, 
pp.455-467 
[6] H.Akaike &T.Nakagawa (1972), Statistical 
Analysis and Control of Dynamic Systems, Tokyo: 
Science Ltd. 
[7] T.Matsuzaki (1982), Interface, Vol.8, pp.183-197 ; 
(I983), Information Science, Vol.2, pp.49~54 
[8] T.Hara & F.Kobayashi (1982), J. JAACE (Japan 
Association of Automatic Control), Vol.26, No.6 
Separate Volume, pp.44-47 
[9] T.Matsuura & M.Toyama (1969), Trans. Inform. 
Process. Society of Japan, Vol.10, pp.216-226 
[10] T.Yamauchi et al. (I98O), Prep. 24th JAACE 
Conference, pp.101-102 
[II] M.Tanuma et al. (1984), Prep. IFAC 9th World 
Congress, Vol.VI I I, pp.208-213 
[12] T.Matsuura & M.Kataoka (1984), Trans. Inform. 
Process. Society of Japan, Vol.25, pp.85~91 
[13] PET-B of Nippon Steel Corp. (1984), Rep. No.88-
9 - I , Committee for Measurement, 
Iron & Steel 
I n s t . 
Japan, 
[14] M.Kataoka & N.Terai ( I 9 8 3 ) , 27th National 
Cof. 
of 
Inform. Society of Japan, pp.1509-1510 
[15] H.Kurihara et a l . (1974), J . Japan P e t r o l . 
I n s t . , Vol.17, pp.292-297 
[16] H.Kimura et a l . ( I 9 8 5 ) , CAD Programing for 
Control Systems on PC9801, Nikkan-Kogyo 
[17] Y.Nïshikawa et a l . (1984), Automatica, Vol.20, 
pp.321-332 
[18] M.Funabashi (I98l), Prep. Tokyo Branch Conf. 
of IEEJ 
[19] T.Shigemasa et al. (I985), Toshiba Review, to 
appear 
[20] CSMP-lll Manuals (SHI 9-7001-2, GH18-6013-1, 
GH18-6014), IBM (1974) 
[21] DDS-0PT Manual, Central Research Lab. Hitachi 
Ltd. (1970) 
[22] Linear Systems Analysis-Manual, Hewlett-
Packard Desktop Computer Division (1980) 
[23] RANDAP-II Manual (Research Rep. RC-SC30 Data 
Computation Subcommittee), Japan Society of 
Mechanical Engineers (1976) 
[24] SLCS IV Manuals (70AR-0131, 70AR-0132), 
Fujitsu Ltd. (1979) 
[25] SAPL Manual, Fuji ElectricCo. (1983) 
[26] M.Shima et al. (1975), Tech. Rep. Mitsubishi 
Heavy Industries Ltd., Vol.12, No.6 
[27] T.Fujiwara et al. (1981), Tech. Rep. 
Mitsubishi Heavy Industries Ltd., Vol.18, No.2 
[28] R.Tagawa (1981), Prep. IFAC 8th World Congress 
Vol.1 II, pp.125-130 
[29] Y.Kurosaki et al. (1984), Tech. Rep. Kawasaki 
Heavy Industries, Vol.84, pp.19-26 
[30] N.Nakatsuchi et al. (1984), Prep. 28th JAACE 
Conf., pp.I5I-I52 
[31] K.V/atanabe & M.lto (1984), J. JAACE, Vol.28 
(Special Issue on Control of Time-Delay Systems) 
pp.269-277 
[32] K.Watanabe (1984), ibid., pp.309~317 
[33Ï Y.Yamamoto (1984), ibid., pp.299-308 
[34] K.Furuta & O.Yamano (1984), Prep. IFAC 9th 
World Congress, Vol.VI I I, pp.173"178 
[35] M.Kaneda & H.Kuraoka (1984), Proc. IECON'84, 
pp.237-242 
[36] T.Kawabata et al. (I983), Prep. 27th JAACE 
Conf., pp.25I-252 
[37] K.Takeuchi et al. (1983), Prep. 26th Joint 
Automatic Control Conf. of Japan, pp.71"72 
[38] B.Kondo et al. (1984), Prep. 4th Simulation 
Technology Conf., pp/13~l6 
[39] Y.Mstsuo (19Γ4), Prep. 22th SICE Conf., 
pp.387-388 
[40] Y.Okuyama (1984), Prep. 27th Joint Automatic 
Control Conf. of Japan, pp.5_6 
[41] M.Araki & H.Yukawa (1984), Prep. 28th JAACE 
Conf., pp.229-23Ο 
[42] Y.Senda et al. (1984), Prep. 27th Joint 
Automatic Control Conf. of Japan, pp.391"392 
[43] T.Takahashi (1984), ibid., pp.253-254 
[44] I.Hashimoto & T.Takamatsu (1981), Proc. CPC-II, 
pp.148-185 
Appendix Outline of Questionnaire Inquiries 
01 : "Investigation of Use of CAD Packages for 
Control Systems" 
This is a postal questionnaire inquiry conducted in 
1984 by the author. We sent 3 forms (Form 1: 
General status in the company, Form 2: Status in 
each section, Form 3: Applied Examples) to one 
person of one company and asked him to distributed 
them to related sections, branches, etc. 18 
companies out of 24 answered, the fields of which 
are: Electric & Elctronic = 6, Engineering = 2, 
Heavy Industry = 3, Iron and Steel = 5, and Oil 
Refinery = 2. 
QlI : "Enquete on Use of Modern Control Theory in 
Industrial Practice" 
This is another postal questionnaire inquiry con-
ducted in I983 by the 2nd Sub-committee of the 
Committee for Industrial Problems of SICE, for 
which Mr. M.lto of Mitui Mining & Smelting Co. was 
responsible. The questionnaires were sent to 92 
engineers and 47 answered, whose fields are 
Cement = 1, Electric & Electronic = 6, Electric 
Power = 2, Engineering = 5, Food = 1, Heavy 
Industry = 3, Iron & Steel = 16, Medicine = 1 
Paper = 2, Petrolium = 2, Petro-chemistry = 6 
Photo Film = 1, Water Supply = 1 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INDUSTRIAL APPLICATIONS IN THE 
NETHERLANDS OF COMPUTER-AIDED 
DESIGN PACKAGES FOR CONTROL SYSTEMS: 
TRENDS AND PRACTICE 
P. P. J. van den Bosch* and A. J. W. van den Boom** 
*Delft University of Technology, Department of Electrical 
Engineering, 
PO Box 5031, 2600 G A Delft, The Netherlands 
**Eindhoven University of Technology, Department of Electrical 
Engineering, 
PC) Box 513, 5600 MB Eindhoven, The Netherlands 
Abstract: In this paper we will describe and illustrate some applications of CACSD packages 
in Dutch industry. Some typical usages of CACSD in industry will be illustrated. Further we 
will analyse the results of an inquiry with respect to the use and need for CACSD in 
industry and universities which was held in 1982/1983 in the Benelux and we will resume the 
activities of a working group in the Benelux which aims to promote CACSD. 
Keywords: Computer-aided design, Computer-aided control system design, Computer control, 
Control engineering computer applications, Identification, System Analysis. 
1. INTRODUCTION 
For some time mathematical theories for the analysis 
and design of linear systems have been in existence. 
For linear multivariable systems in particular, a large 
number of reliable algorithms has been developed and 
derived from theory. In spite of the availability of 
these reliable algorithms, existing computer programs 
often 
do 
not 
satisfy 
requirements 
such 
as 
a 
standardized computer 
language (Fortran), 
numerical 
robustness, portability and documentation. 
Based on this undesirable situation the Working Group 
on Software 
(WGS) was appointed 
in 
1981 in The 
Netherlands to investigate 
present 
applications 
and 
future 
requirements 
of 
Computer-Aided 
Design 
of 
Control Systems (CACSD). 
In 1982 WGS made an inquiry among a large number 
of 
Dutch 
private 
enterprises, 
universities 
and 
governmental research institutes with respect to their 
present 
hardware 
and software 
and 
their 
need 
or 
desire for 
software 
( Working Group on 
Software, 
1982). 
A similar inquiry was held in Belgium in 1983 which 
resulted in the same conclusions (Working Group on 
Software, 
1983a). Since 
1983 the WGS has been a 
Benelux initiative. 
In this paper 
we will discuss the results of 
this 
inquiry. 
Moreover, 
we 
will 
illustrate 
the 
use 
of 
CACSD programs in industry with a number of typical 
examples. 
2. RESULTS OF THE INQUIRY 
The 
majority 
of 
the 
respondents 
have 
their 
own 
digital computer installations. The relative number of 
analog computers 
or 
their 
modern 
successors, 
the 
parallel 
digital 
computer, 
has 
been 
reduced 
considerably 
and 
are 
only 
used 
for 
very 
time-
consuming 
simulation 
studies 
or 
relatively 
simple 
laboratory 
set-ups 
for 
simulation 
and/or 
real-time 
control. 
The 
type 
of 
digital 
computer 
varies 
considerably, ranging 
from 
8-bit 
microcomputers 
to 
time-shared mainframes. Superminis and mainframes in 
general support 
the 
mathematically 
and/or 
control-
theory-oriented 
subroutine 
libraries 
such 
as 
NAG, 
IMSL, EISPACK, UNPACK and ORACLS. 
The use of microcomputers, especially the 16-bit ones, 
in CACSD applications is, in 1982, not yet impressive. 
In spite of the availability of many new programming 
languages, such as Pascal, Ada and Modula-2, Fortran 
is still widely used and accepted for technical and 
scientific work. The majority of subroutine 
libraries 
for 
control 
system 
design 
are 
Fortran 
oriented. 
Consequently, Fortran is still the major programming 
language for CACSD. 
The most important 
conclusion of this inquiry was 
that 
good, reliable 
and portable basic software 
is 
needed more than large packages for solving general 
control problems, since the demands of the individual 
users differ too much. 
There 
is 
a 
small 
number 
of 
generally-accepted 
interactive design packages in use in industry in The 
Netherlands, such as TUTSIM, PSI, TRIP, SATER and 
PRIMAL. 
These 
packages 
are 
discussed 
in 
the 
Appendix. 
Many companies have developed their own programs 
for 
their 
own 
applications, 
where 
the 
program 
is 
usually strongly application oriented and therefore not 
suitable 
for 
more 
general 
use. 
One 
reason 
they 
develop their own programs is that the appropriate 
software is not available. Another reason is that a 
dedicated program yields a better performance and/or 
better 
satisfies 
the 
stated 
requirements 
than 
generally-available software. Still, there was a great 
need for a set of standardized, reliable and accurate 
subroutines for solving mathematical and/or control-
oriented problems. 
This more or less describes the situation as it was in 
1982/83. Recently, other programs are being developed 
for 
use in industry, for example CONTROL-C and 
MATRIXx. 
3. CLASSIFICATION OF INDUSTRIAL USE OF 
CACSD 
In order to be able to classify the use of CACSD 
programs in industry it is valuable to distinguish the 
use 
of 
subroutine 
libraries, 
analysis 
and 
design 
programs for linear systems, simulation programs and 
real-time programs for the following three situations: 
1-Research centers 
Large enterprises, for example Shell and Philips, have 
at their central research centers their own groups 
65 

66 
P. P. J. Van Den Bosch and A. J. W. Van Den Boom 
dealing 
with 
control 
theory. 
These 
groups 
are 
interested 
in and 
use 
advanced 
topics 
of 
modern 
control theory. These groups have the knowledge and 
potential to understand modern developments in both 
theory and numerical analysis. They have facilities to 
develop 
their 
own 
CACSD 
programs 
or 
adjust 
available programs to their present needs. At a lower 
level in the organization 
smaller 
groups deal 
with 
practical control problems. If there are frequent and 
intensive contacts with the central reseach centers, 
modern 
control 
theories 
can 
be 
realized 
in 
applications, e.g. optimal control and identification. If 
these contacts are few or even non-existent such a 
local control group can be considered as a group of 
one of the two following categories. 
2-Control groups 
Smaller enterprises cannot afford too much theoretical 
research. Their control groups are involved more with 
the production process. These groups have to deal 
with many practical problems and are less open to 
advanced 
theories. 
Their 
analysis 
and 
design 
is 
application 
oriented. 
They 
will 
preferably 
use 
interactive 
programs 
for 
linear 
systems 
and 
for 
simulation. Owing to the many essential non-linearities 
in a process, simulation is their main analysis and 
design tool. 
3-Small enterprises 
Small enterprises have only a very small group for 
control-oriented 
problems, 
often 
only 
one 
person, 
mostly for instrumentation. In such a group there is 
not sufficient knowledge of control theory to be able 
to use existing analysis or design programs. Design is 
mainly 
based 
on 
intuition, 
rules 
of 
thumb 
and 
simulation. 
It turns out that the first category (research center) 
is 
mainly 
interested 
in 
reliable, 
well-tested 
and 
documented 
subroutine 
libraries 
and 
interactive 
programs that satisfy high standards with respect to 
facilities, 
flexibility 
and 
numerical 
reliability. 
The 
second category has confidence in interactive, analysis 
and design programs for linear systems and simulation 
programs. 
The 
third 
category 
only 
considers 
interactive simulation programs. 
In all three categories some applications require an 
interactive, 
real-time 
program 
for 
on-line 
measurements. These measurements could be processed 
later by appropriate off-line analysis programs. 
We can combine these findings in a table to illustrate 
which CACSD facilities 
were being used in which 
groups in 1982/83. 
Table 1. 
CACSD facilities according to 
type of enterprise in 1982/83. 
Subroutine library 
Linear analysis and 
design programs 
Simulation programs 
[Real-time programs 
research control small 
center 
group enterpr. 
-/o 
+ 
+ 
0 / -
+ 
+ 
+ 
0 
0 
0/- 
j 
+ required and used 
0 used sometimes 
- generally not used 
As 
indicated 
in 
table 
1, simulation 
is 
the 
most 
generallly-accepted 
tool 
for 
computer-aided 
control 
system analysis and design. 
The above sketched situation of different 
kinds of 
industrial 
control 
groups 
would 
not 
be 
complete 
without 
the role and position of university 
control 
groups, 
and 
especially 
their 
relation 
to 
industrial 
control 
groups 
being 
taken 
into 
consideration. 
Traditionally the universities and consequently 
their 
control 
groups 
(which 
are 
mainly 
located 
in 
the 
Universities of Technology of Delft, 
Eindhoven and 
Twente and in the University of Groningen) have been 
financed 
directly 
by 
the 
government. 
Financing 
through 
research 
contracts 
with 
industry has been 
limited. Contacts with industry existed, of course, but 
has not played a dominant role. 
Because of the cutbacks in direct state financing of 
universities and the consequent stimulation of contract 
research, many more contacts with industry have been 
established; 
especially 
those projects with 
expected 
short- term 
results and short-term 
applicability 
in 
industry were favorites. It even became possible to 
obtain subsidies for theses types of projects. 
Because of these developments, which roughly cover 
the past decade, the university groups are now more 
involved in industrial research projects. The contacts 
are mainly with research centers of large enterprises 
and 
control 
groups 
of 
medium-sized 
and 
smaller 
enterprises and incidently with very small enterprises. 
There is a slowly growing awareness in smaller and 
very small enterprises that their lack of facilities for 
research 
can 
be 
compensated 
by 
contacts 
with 
university groups. 
It 
is 
through 
these 
contacts 
that 
modern 
control 
theories and their derivatives (the control 
software) 
can be applied in smaller and very small enterprises. 
It was already noted in the previous section that the 
use of various aspects of modern control and system 
theory 
have 
not 
yet 
become 
common 
practice 
in 
smaller and very small enterprises. 
Although a very extensive use of these theories in 
these types of enterprises is not feasible even in long 
term, it is safe to predict that a broader use than 
that of today - which is almost negligible - is in the 
near 
future 
possible 
and 
desirable. 
But 
for 
a 
successful introduction of modern control and system 
theories into small enterprises, the useful results of 
these theories should be presented in a much more 
tractable form to the users. 
These results should be embedded in expert systems 
which are understandable to a large class of users and 
which have a high degree of automation with respect 
to fault detection and capability of recognizing the 
applicability 
of 
modern 
theories 
to 
the 
practical 
problems at hand. 
Of course this sounds somewhat futuristic, with many 
serious problems remaining to be ironed out. Still, the 
possibility of non-experts using computers in an useful 
way was not esteemed very probable some twenty 
years ago. 
As 
a 
consequence 
of 
the 
inquiry 
and 
the 
considerations outlined above, the Working Group on 
Software 
has 
settled 
on 
an 
objective, 
namely 
to 
realize, document and distribute a subroutine library 
for control system analysis and design. This subroutine 
library is called SYCOT (software library of SYstem 
and 
COntrol 
Tools), 
(Working 
Group 
on 
Software, 
1983b). For that purpose many international contacts 
have been 
and 
are 
being 
made with groups with 
similar goals in The United Kingdom, West-Germany, 
France, Belgium and Sweden. As a long range goal, 
the Working Group will attempt to realize interactive 
design 
packages 
based 
on 
this 
subroutine 
library, 
which should evolve in time to 
generally-applicable 
expert systems. 
4. APPLICATIONS 
In this section we will illustrate the application of 
CACSD 
in industry 
with 
a 
few 
typical 
examples. 
These examples do not cover all applications but have 
been 
selected 
by 
the 
authors 
owing 
to 
their 
involvement with industrial applications. 

Industrial Applications in The Netherlands 
67 
Aero-space industry: 
In the aero-space industry many advanced CAD/CAM 
programs are being used. If we restrict our attention 
to control problems, we note that dedicated programs 
are often 
developed 
for 
one 
type 
of 
satellite 
or 
airplane. These efforts are justified 
because studies 
on such 
applications 
take 
many 
months 
to 
years. 
Then, 
a 
dedicated 
program 
can 
yield 
a 
higher 
performance 
than 
a 
general-purpose 
program. 
For 
smaller problems, for example the analysis and design 
of a navigation system for an airplane, 
interactive 
design programs, such as TRIP and PSI, can be and 
are being used {Van den Bosch and Geels, 1984'. 
Sometimes the algorithms of a program are used in 
another, problem-oriented environment. For example, 
in studies concerning the analysis of turbulence and 
vibrations 
around 
an 
airplane 
wing, 
the 
frequency 
responses 
are 
measured 
by 
dedicated 
hardware. 
Consequently, 
these 
frequency 
responses 
could 
be 
analyzed 
with 
TRIP. 
However, 
in order 
to get 
a 
better 
communication 
between 
measurements 
and 
identification 
program, 
the 
complex-curve 
fitting 
program of TRIP has been isolated and incorporated 
into another program. So, generally available programs 
are incorporated in a dedicated application program. 
Chemical processing industry: 
Some chemical 
enterprises 
frequently 
use 
PSI 
for 
modeling and identification. A minicomputer measures 
time responses of a chemical plant. These responses 
are 
measured 
after 
disturbing 
the 
process with a 
deterministic type of input signal, such as a step or 
block. Consequently, a limited number of measuring 
points are sufficient for the modeling process. These 
measuring points are stored in a function generator of 
PSI. Consequently, a model is estimated in PSI by 
adjusting the parameters of a model, such that the 
response of the model to the same input signal which 
was applied to the process equals, as well as possible, 
the measured response of the process, as illustrated in 
figure 1. 
Figure 
1. 
Identification 
with 
optimization. 
simulation 
and 
Non-linear 
optimization 
techniques 
are 
used 
for 
adjusting 
the 
parameters 
of 
the 
model. 
Such 
an 
approach 
requires 
much 
more 
calculation 
time 
compared with, for example, the least-squares method. 
However, particularly in modeling a process, it is very 
valuable and almost necessary to use as much a priori 
information as possible. Any information, for example 
that dealing with non-linearities, the structure of the 
model, 
already 
known 
values 
of 
some 
parameters, 
etc., can be incorporated in the model and simulated 
properly, 
whereas 
mathematically-oriented 
methods 
cannot 
often 
take 
advantage 
of 
this 
a 
priori 
information. 
These chemical enterprises and many others judge for 
their 
problems 
the 
simulation 
and 
optimization 
approach to be more valuable than an analytically-
oriented approach based on least-squares methods. The 
increase in calculation 
time 
is not a disadvantage 
during 
the 
modeling 
and 
identification 
phase. 
For 
adaptive control this approach is too slow. 
It should be stressed that this kind of modeling with 
a limited number of measuring points (100 - 1000) is 
only possible if sufficient 
information 
for 
modeling 
the process is indeed contained 
in the data. This 
approach can however not be applied if the signal-to-
noise ratio is too small. This situation can arise if we 
are not allowed to excite a process with a relatively 
large 
external 
input 
signal. 
Then 
time-consuming 
measurements 
of 
normal 
operating 
signals 
become 
necessary. A posteriori analysis, for example with the 
aid of correlation techniques, may yield the required 
model. 
Ship control design: 
Several enterprises dealing with autopilots for ships 
use 
simulation 
and 
optimization 
as 
their 
primary 
analysis 
and 
design 
tool 
to 
realize 
appropriate 
controllers. Linear design techniques were not able to 
deal 
with 
the 
inherent 
non-linear behavior of 
the 
steering machine. Neglecting these non-linearities in 
the design phase resulted in a diminished performance 
(Van Amerongen and Van den Bosch, 1985>. 
Many times it turned out that 
a design based on 
linear system theory could yield the appropriate start 
values for the controllers or for the model to be 
identified. Completing the study with some form of 
simulation improves the design considerably. 
Glass production industry: 
Indentification programs, as available in SATER, have 
been 
used 
for 
constructing 
models 
of 
the 
glass 
fabrication 
process, 
including 
the 
model 
of 
the 
distrubances. These models have been developed for 
controller 
design, resulting in an increased 
product 
yield of the process. As in a previous example the 
interactive program SATER was not used directly but 
the parts of the package were incorporated in an 
adapted version in a dedicated application. 
Biomédical applications: 
Identification 
methods have frequently been used in 
biomédical applications. We will only refer 
to 
the 
estimation 
of 
the closing impedance of the 
aorta, 
which is a necessary information for design of aortic 
valves. In vivo signals of aortic pressure and flow of 
dogs were used for estimating 
the order 
and 
the 
parameters of the Windkesselmodel of the impedance 
tRooyakkers, 1982?. 
5. CONCLUSION 
Several aspects related to industrial applications of 
CACSD in The Netherlands have been dealt with; 
- 
a 
short 
description 
of 
developments 
in 
The 
Netherlands 
with 
respect 
to 
CACSD software 
and 
their applications in industry. 
- an inquiry held in 1982 in The Netherlands and in 
1983 in Belgium 
to 
clarify 
the 
need 
for 
CACSD 
software. 
- 
a 
Benelux 
initiative 
(WGS) started 
in 
1981 
to 
stimulate and coordinate CACSD developments in the 
Benelux. 
- the WGS efforts 
to introduce a basic subroutine 
library SYCOT as a solid basis for future 
CACSD 
developments. 
- a number of examples of application of CACSD in 
industry. 

68 
P. P. J. Van Den Bosch and A. J. W. Van Den Boom 
6. REFERENCES 
Amerongen, J. van and P.P.J. van den Bosch (1985). 
Computer-Aided 
Design 
of 
Ship-Control 
Systems. 
Proceedings 
IFAC 
Symposium 
on 
Computer-Aided 
Design 
of 
Control 
and 
Engineering 
Systems, 
Copenhagen, July 1985. Pergamon Press London. 
Boom, A.J.W 
van 
den 
and 
R. Bollen (1984). 
The 
Identification 
Package 
SATER. 
Preprints 
9th 
IFAC 
World Congress, Budapest, July 1984, Vol VIII, (190-
195). 
Bosch, P.P.J. van den (1975). TRIP - TRansformation 
and Identification Package for Interactive 
Computer 
Aided Control System Design. Journal A, Vol 16, no 3 
(107-117). 
Bosch, 
P.P.J. 
van 
den 
(1983). 
Interactive 
System 
Analysis 
and System 
Design 
Using 
Simulation 
and 
Optimization. 
Proceedings 
IFAC 
Symposium 
on 
Computer Aided Design of Multivariable Technological 
Systems, 
Lafayette, 
1982. Pergamon 
Press 
London 
(225-232). 
Bosch, 
P.P.J. 
van 
den 
and 
D. 
Geels 
(1984). An 
Accurate 
Navigation 
System 
for 
a 
Laboratory 
Aircraft. Journal A, Vol 25, no 4 (229-235). 
Meerman, 
J 
(1980). 
TUTSIM, 
Software 
for 
the 
Simulation of Continuous Dynamic Systems for Small 
and 
very 
Small 
Computer 
Systems. 
Proceedings 
Simulation '80 Conference, Interlaken 1980. 
Rooyakkers, 
J.C. 
(1982). Estimation 
of 
the 
Aortic 
Closing Impedance using in vivo signals. M.Sc Thesis, 
EE Dept., Eindhoven University of Technology. 
Working 
Group on Software 
(1982). 
Programs 
for 
System 
and 
Control 
Theory 
in 
The 
Netherlands. 
Eindhoven University of Technology. 
Working Group on Software 
(1983a). 
A 
Subroutine 
Library 
in 
Control 
Engineering 
(Belgian 
Chapter). 
Eindhoven University of Technology. 
Working Group on Software (1983b). Implementation 
and Documentation Standards for the basic subroutine 
library SYCOT, Eindhoven University of Technology. 
APPENDIX 
TUTSIM (Meerman, 
1980) 
is 
an 
interactive 
block-
oriented 
simulation 
program 
for 
8-bit 
and 
16-bit 
microcomputers developed by the Twente 
University 
of Technology. It has been implemented in assembly 
language 
in 
low-cost 
microcomputers 
such 
as 
Commodore-64, Apple II and IBM-PC. 
PSI (Van den Bosch, 1983) is an interactive, block-
oriented 
simulation 
program 
for 
16-bit 
microcomputers, 
mini- and 
superminicomputers 
with 
many advanced features 
like optimization, 
generally 
only 
found 
with 
statement-oriented 
simulation 
programs. 
PSI 
has 
been 
developed 
by 
the 
Delft 
University of Technology. It is written in Fortran 77 
and implemented on 16-bit microcomputers (IBM-PC, 
TULIP I, etc), 
16-bit 
minicomputers 
(PDP 
11, HP 
1000, etc.) and superminis (VAX, PRIME). 
PSI 
is 
in 
use 
in 
the 
chemical 
and 
biomédical 
processing industries, process engineering companies, 
the blast-furnace and steel-making industries, research 
centers 
of 
power 
utilities, 
navy, 
food-processing 
industries, 
electrotechnical, 
electronic 
and 
glass 
production industries, research institutes, etc., in both 
The Netherlands and abroad. Besides it is used in 
many educational and research institutes. 
TRIP (Van den Bosch, 1975) is an interactive analysis 
and 
design 
program 
for 
linear single-input, 
single-
output systems developed at the Delft University of 
Technology. 
It 
distinguishes 
seven 
different 
system 
representations, 
namely the continuous and 
discrete 
transfer 
functions 
(H(s) 
and 
H(z), 
respectively), 
continuous 
and 
discrete 
state-space 
descriptions, 
continuous and discrete frequency responses and time 
responses. 
Owing 
to 
the 
linearity 
of 
all 
representations, almost any system representation can 
be calculated 
from 
any 
other 
one. 
For 
example, 
identification 
(Chidambra 
estimator, 
least-squares 
method, complex-curve fitting) and designing with the 
aid of frequency responses, root loci or via optimal 
state feedback are supported. Moreover, 
eigenvalues 
and 
the 
solution 
of 
a Lyapunov equation 
can 
be 
solved. Systems up to tenth-order can be used and a 
maximum of 128 measuring points are allowed. 
TRIP is in use in the chemical process industries, 
process 
engineering 
companies, 
blast-furnace 
and 
steel-making 
industries, 
research 
centers 
of 
power 
utilities, navy, electrotechnical, electronic and glass 
production 
industries, 
research 
institutes, 
etc. 
Moreover, TRIP is in use at many educational and 
research 
institutes 
in 
both 
The 
Netherlands 
and 
abroad. 
SATER 
(Van 
den 
Boom 
and 
Bollen, 
1984) 
is 
an 
interactive modeling and identification 
program 
for 
linear, single-input, single-output systems. It contains 
several recursive identification methods such as least 
squares, (suboptimal) instrumental variables, maximum 
likelihood, extended matrix and Tally estimators. It 
constructs ARMA models of process and disturbance 
noise dynamics. Several 
order-testing 
methods 
have 
been 
incorporated. 
Furthermore 
additional 
features 
which are related to identification have been added 
such as signal analysis, conversion of time discrete 
models into continuous models and analysis methods 
like Bode, Nyquist and root-loci plots. 
As a package it is primarily meant for inexperienced 
users, e.g. in the courses, the interaction mechanism 
is 
of 
the 
question-and-answer 
type 
with 
default 
answers. 
SATER 
is 
written 
in 
Fortran 
and 
implemented on minis (PDP 11) and Superminis (VAX), 
and was developed at the Eindhoven University of 
Technology. University control research groups are the 
main users of the package, mainly due to its type of 
interaction, 
although 
industry, 
e.g. 
in 
the 
glass-
production industry, has also have been involved. 
PRIMAL 
is 
an 
interactive 
system 
for 
real-time 
experimental 
determination 
of 
models. 
The 
experimentor can perform experiments in real 
time 
and analyze the results simultaneously, having at his 
disposal 
various 
on-line 
and 
off-line 
methods 
for 
modeling, 
signal 
analysis, 
identification 
and control 
design. The system is currently being developed by 
the Eindhoven University of Technology. The software 
is 
written 
in 
Fortran 
for 
minis 
(PDP 
11) 
and 
superminis (VAX). 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INDUSTRIAL APPLICATIONS OF CAD 
PACKAGES FOR CONTROL SYSTEMS IN 
THE PEOPLE'S REPUBLIC OF CHINA 
Chen Zhen-Yu 
Automation Research Institute of Metallurgical 
Ministry, 
People's Republic of China 
Abstract. This paper introduces the development of CAD techniques for 
control systems in P.R. China. A general description has been made about 
the industrial applications of CAD packages for control systems. Some 
examples have been illustrated about the MIMO discrete-time systems, LQG 
systems, SISO control systems, self-tuning control systems and adaptive 
prediction systems. Some prospect ideas have been described in conclusion. 
Keywords. CAD package; industrial automation; control systems. 
1. INTRODUCTION 
The techniques of CAD for control systems 
had been developed gradually at the seven-
ties in P.R. China. At the initial stage, a 
lot of calculating programs of single and 
multi variable control systems as well as 
simulation softwares had been constructed 
to aid for design and analysis of control 
projects (Chen, 1979; Han, 1979; Liu et al. 
1979; Wang, 1972; Wang et al., 1979; Wu, 
1978; Xu et al., 1976 ). Those softwares 
were special kinds of programs which must 
were used by experts and were always writ-
ten by themselves. Anyone who wanted to use 
those programs, he must read over the whole 
programs which always contructed as subrou-
tines, and must wrote a main program as 
well as the another subroutines which can 
described the appointed jobs. These cir-
cumstance got some limitations of the pos-
sibility to spread the applications of con-
trol technology into the engineering areas, 
especialy the modern control theory con-
tained a lot of complex algorithms, and the 
engineers got difficulty to be familiar 
with all the details of algorithms. When 
entering the eighties, through the domestic 
and foreign technical exchanges for which 
some activations were orgenaized by Chinese 
Association of Automation, the CAD techni-
ques of control systems have developed more 
quickly. A lot of CAD packages have been 
constructed in the universities and insti-
tutes, which have the features including 
management systems to dispatch all the fun-
ctions within packages (Bao et al., 1982; 
Chen et al., 1985; Gan, 1982; Gao et al., 
1984; Han, 1980; Han, 1982; Han, 1983; He, 
1982; Lu et al., 1984; Ruan, 1982; Tu et al 
., 1982; Wang et al., 1984; Xiong et al., 
1982). There have interactive dialog system 
to simplify the operations of the users, 
who can get annotations from packages dur-
ing every operating step. And also have com-
mand system to support the efficient running 
which looks like batch process, even the 
users want to compare the results of diffe-
rent choices of means. 
2. APPLICATIONS OF CADCS 
The techniques of CADCS are going to pro-
gress and also to carry forward the appli-
cations in P.R. China. Following, I will 
introduce the general situations about the 
applications of CADCS. 
MIMO Discrete-time Systems 
The linear multivariable stochastic system 
can be described as (Ruan, 1982) 
y(k)=A1y(k-1)+-^Apy{k-p)+B0u(k-1-d) 
+ --+B u(k-p-d)+e(k) 
(1) 
where noise 
e(k)=V(k)+A1V(k-l)----A V(k-p) 
+B0W(k-d)+BlW(k-1-d)+<-· 
+BpW(k-p-d) 
(2) 
The equivalent state space equation can be 
described as 
x(k+1)=Ax(k)+Bu(k-d)+BW(k-d) 
(3) 
and the measuring equation 
y(k)=Hx(k)+B0u(k-d)-HB0W(k-d)+V(k) 
(4) 
The optimal filter of state x(k) which may 
satisfies the equation (3) and (4) can be 
described as 
5(k)=î(k/k-1)+KkAy(k) 
(5) 
where K, is the gain matrix of Kaiman 
filter and 
Ay(k)=y(k)-Hx(k/k-1)-BQu(k-d) 
x(k/k-1)=Ax(k-1)+Bu(k-1-d) 
The quadratic performance criteria 
J(u)=EH fxT(k)Qnx(k)+uT(k-d)u(k-d)] (6) 
k=d{ 
u 
; 
and the steady-state optimal feedback 
control 
u(k)=Ldx(k)+ I M u(k-fi-d) 
(7) 
i=0 
where L, and M. are the functions of steady 
state optimal feedback coefficient matrix 
L. 
A MIMO discrete-time CAD package had been 
constructed, and the main features of the 
69 

70 
Chen Zhen-Yu 
algorithm functions are described as above. 
This CAD package had been used for project 
design of optimal control for cover-type 
annealing furnaces (Ruan et al., 1981). 
These furnaces were used for annealing of 
alloy steel coils. The scheme of furnace 
is illustrated as Fig. 1. 
outer cover 
inner cover 
electric -
heaters 
temperature 
sensors 
.... 
, 
. 
; steel 
colls 
» 
! ! 
7 
o 
o ; 
o 
n 
I '■ 
, O : 
?h 
Fig. 1. Scheme of annealing furnace 
The furnace was heated by electric power, 
and can described as a 3 input 3 output 
system. The practical measuring had been 
made for collecting the step response data 
series of temperature outputs y1, y2, y3. 
Then used the CAD package to carry out the 
identification and modelling, the calculat-
ing procedures illustrates as Fig. 2. 
dat 
least 
square 
_ method 
estimate 
I 
A,· · - Ap, 
a input 
J 
pa 
B0f 
\ 
' 
-, 
instrument 
variable 
method 
irameters 
Β,'-'Bp 
I 
ι 
:i:.:'- -
| determine the orders of 
I model using AIC criteria 
j 
estimate noise covariance 
matrix Q,R 
__t 
, 
calculate steady-state gain 
matrix K, feedback coeffi-
cient matrix L,L ,M. 
'JZ 
check the control 
effect by 
simulation running 
change condition 
Fig. 2. The calculating procedures of 
idendification and modelling 
When the process model haa been constructed, 
the CAD package can carried on simulation 
study as well as real time control running, 
which is illustrated as Fig. 3· This furna-
ces control systems had been implemented in 
Shanghai Iron and Steel Factory, and have 
got more fine performance to satisfy the 
production objects then common instrumental 
systems. 
out put 
deviation |_J 
y(k)=yk-y0| 
new information calculating 
ûy(k)=y(k)-Hx(k/k-l)-B0u(k-d)|; 
adjust value calculating 
auk=^|C()^y(k)+X (ciAy(k-i)+Di^uk_i 
set value 
adjusting 
: 
_. 
i 
state predicting 
x(k+l/k)=Ax(k)+B[u(k-d)+Auk-d] 
__.__zznzzzz: 
state filtering 
x(k)=x(k/k-l)+lUy(k) 
I 
controled 
process 
feedback calculating 
u(k)=Ldx(k) + jMjLu(k+i-d) 
^control value 
calculating 
u*(k)=uk+u(k) u 
Fig. 3· The block diagram of real 
time control running 
This CAD package also had been used for 
project design of temperature control sys-
tems of creep-testing furneces (Ruan et al. 
1981). The control priciple and system con-
struction were similar as the above example 
and the practical control performance were 
also satisfactory. 
The another example of using this CAD pac-
kage was the project design of electric 
power control system of electroslag remelt-
ing process (Ruan et al., 1984). Even that 
was a single variable system, the design as 
well as the practical control performance 
had got fine results. 
LQG Systems 
The Linear-Quadratic-Gaussian problems ge-
nerally can be described as state space 
epuation and measuring equation (Gan et al. 
1982) 
x(t)=Ax(t)+Bu(t)+w(t) 
(8) 
y(t)=Gx(t)+v(t) 
(9) 
The quadratic performance criteria 
J=E (xT(tf)Pfx(tf)+jt
f(xT(t)Qx(t) 
+uT(t)Ru(t))dt 
(10) 
For LQ problems the optimal feedback con-
trol law is given by 
u(t)=-K(t)x(t) 
(11) 
K(t)=R"1BTP(t) 
(12) 
where P(t) can be obtained by solving 
Riccati differential matrix equation 
-P(t)=P(t)A+ATP(t)-P(t)BR~1BTP(t) 
+Q 
(13) 
For steady-state the equation (13) becomes 
algebraic equation form 
PA+ATP-PBR~1BTP+q=0 
(14) 
And the corresponding control law is given 
by 

Industrial Applications of CAD Packages 
71 
u ( t ) = - K x ( t ) 
-1BTP 
(15) 
(16) 
For Kalman-Bucy f i l t e r , 
the 
c a l c u l a t i n g 
equation i s g i v e n by 
x ( t ) = A x ( t ) + B u ( t ) + G ( y ( t ) - x ( t ) J 
(17) 
The block diagram of LQG CAD package 
i s 
i l l u s t r a t e d as F i g . 
4. 
management program 
optimal 
f i l t e r 
data tran-
sformation H 
optimal 
[regulator! 
f i n i t e 
(time LQ 
simulation 
program 
Riccati 
|differentialj 
equation 
j 
infinite 
time LQ 
zxz: 
Riccati 
algebraic 
equation 
input and output of 
data and graph 
Fig. 4. The block diagram of LQG 
CAD package 
This CAD package had been used for project 
design of wide range speed regulating servo 
system (Su et al., 1983) as Fig. 5. 
the resuming time t^0.8 s. 
transient j 
compensator [,— 
tE> 
LU r LJJ375 1 
Fig. 6. Scheme of anti-disturbance 
speed regulating system 
This CAD package also had been used for de-
sign of some carriage control systems of 
vehicles. 
SI50 Control Systems 
There have wide spread demands to design 
the SISO control system in the real engi-
neering problems, therefore the SISO CAD 
package had been constructed which included 
a lot of useful algorithms of time domain 
and frequency domain methods (Tu et al., 
1982). The application examples have been 
in many cases. One of the user's department 
introducing some examples are illustrated 
as Fig. 7, Fig. 8 (Li et al., 1983). 
yL»0-Jspeed 
jjregu. yoA 
n-
current 
regu. 
Is 
11 
s p. adpt| 
control 
375 1 
GD* S 
rpm 
1st. feedback 
Fig. 5. Scheme of wide range speed 
regulating servo system 
The speed regulating range was 0.1 rpm to 
1500 rpm, and the speed up time was ^170 ms 
from 0 to 1500 rpm, the brake down time was 
^170 ms from 1500 to 0 rpm, the reversing 
time was ^250 ms from +1500 to -1500 rpm, 
the regulating overshoot <2$. 
The another example of using the LQG CAD 
package was the project design of effective 
anti-disturbance speed regulating system ( 
Gao et al., 1983). The block diagram of 
speed regulating system is illustrated as 
Fig. 6. 
There had added a state feedback transient 
compensator into the system to improve the 
anti-disturbance performance. When the step 
load of 100$ rate had been applied into 
this system, the danymic speed drop ΑΏ^Ο.Θ/Ο 
k1S 
* f f i L H ^ ^ w. 
t 
k5 
k6(bS+l) 
fS+1 
k7(cS+l) 
gS+1 
k8 
(dsTÎ7lÇeS+1) 
Fig. 7. Block diagram of high 
precision servo system 
-W H kih9—f^l· 
U k4(S+d) U 
e+fS+S* 
_M_ 
(S+a)(S+b±jc) 
Fig. 8. Block diagram of servo system 
of on line robot 
All of the users had appreciated that they 
had saved many times for using CAD package 
then their own calculating, and had advant-
age to compare their different plans of de-
sign from various viewpoints at a short 

72 
Chen Zhen-Yu 
period of computer running. 
Self-tuning Control Systems 
Before the self-tuning CAD package had been 
constuucted, some projects of self-tuning 
systems had been designed and applicated in 
laboratories and factories (Chen et al., 
1983; Deng et al., 1982; Shu et al., 1982; 
Yuan et al., 1980; Wu et al., 1984), some 
of which are illustrated in Fig. 9, Fig.10. 
crystal diamater 
measurement/ 
Fig. 9. Scheme of self-tuning control 
system of silicon crystal 
drawing process 
testing 
sample/ 
=f= 
all 
parameters 
self-tuning 
controller 
h~<-H; 
vacuum 
οσηοοοοτχχχχχτσ 
■A 
electric 
heater 
'temperature 
sensors 
Fig. 10. Scheme of self-tuning control 
system of electric vacuum 
testing equipment 
Gradually the CAD package of self-tuning 
control systems have been constructed in 
universities and institutes (Cao et al., 
1984; Chen et al., 1985; Yin et al., 1984). 
These CAD packages contain the algorithms 
of SISO and MIMO self-tuning control sys-
tems, which include self-tuning regulator; 
self-tuning controller; pole assignment 
self-tuning controller; all parameters 
self-tuning controller, and the feedforward 
terms are applied into the algorithms. The 
algorithms of parameters estimation include 
least square; extended least square; maxi-
mum likelihood etc, and can use variable or 
nonvariable forgetting factors methods. 
Adaptive Prediction Systems 
The adaptive prediction CAD package contains 
two kinds of algorithms. One is the multi-
level progressive order method (Han, 1982), 
which considers the dynamic system model as 
y(k)=f[Yk-1,Uk,6,kj+v(k) 
(18) 
where y(k) are outputs of n dimensions, 
u(k) are inputs of p dimensions, Θ are time-
varying parameters, v(k) are random noises. 
Equation (18) also can be rewritten as 
CAHMA form 
y(k) = f(k)T6(k)+v(k) 
(19) 
For single variable time-varying system, 
the estimated values 
Ö(k) = 9(k-1) 
^(k)[y(k)-f(k)Tê(k-1)) (20) 
lWk)|| 2 
where ^(k) are measurable vectors, Sis cer-
tain positive value. The first step is go-
ing to predicte time-varying parameters by 
using equation (20), if the one level pre-
diction of 0(k) are not satisfactory, then 
can be going to predicte multi-levels as 
similarly as before. The second step is go-
ing to predicte outputs of systems from 
equation (19). 
Another is the self-tuning recursive multi-
step prediction method (Deng et al., 1983), 
which considers the MIMO systems as 
A(q"1)z(t)=B(q-1)u(t)+D(q-1)y(t) 
+ £(t) 
(21) 
where z(t) are p dimention vectors, u(t) 
are deterministic inputs of r dimentions, 
y(t) are measurable random inputs of m di-
mentions. The self-tuning recursive multi-
step predictor is described as 
z(t+k/t)=ΣΑ(t)z(t+k-i/t)+IB(t)u(t+k-i) 
+2D(t)y(t+k-i/t) 
(22) 
y(t+k/t)=I$(t)y(t+k-i/t) 
(23) 
where ty{t) are estimated parameters. 
This CAD package had been applicated for 
predictions of the productivity of oilfield, 
the production, worth and marketing of 
light industry commercial products etc ( 
Deng et al., 1983; Guo et al., 1984; Han, 
1983; Han et al., 1983). One example was 
for the oilfield, the prediction was on the 
bases of data , which was collected from 
1972 to 1979. The productivity prediction 
equation was in time-varying parameters 
form, so first used this CAD package to 
predicte time-varying parameters, then pre-
dicted the productivity of oilfield from 
1980 to 1981. The prediction results are 
illustrated in table 1. 
Table 
time 
1980.3 
1980.6 
1980.9 
1980.12 
1981.3 
1981.6 
1981.9 
1981.12 
_1_. The productivity prediction 
of an oilfield 
real 
predicted 
productivity! productivity 
k tons/day 
\ k tons/day 
41.97 
| 42.22 
41.21 
! 41.63 
40.51 
\ 
41.07 
39.87 
! 40.55 
39.28 
! 40.05 
38.72 
39.57 
; 
38.22 
39.13 
37.75 
' 38.71 
! 
l 
j 
_L 
relat. 
error 
1o j 
-0.59 j 
-1 .02 
-1.38 ί 
-1.7 
-1.96 
-2.1Q 
-2.38 
-2.54 I 
The average error was 1.72$. 
Another example was the prediction of plas-
tic production of a province. The predic-
tion results are illustrated in table 2. 

Industrial Applications of CAD Packages 
73 
Table 2. The prediction of plastic 
production 
,. 
production investment 
t i m e 
_ton_s 
k yua" 1 
1972 
9.40 
1230 
j 
1973 
12.43 
1530 
; 
1974 
14.32 
2170 
| 
1975 
14.32 
2790 
| 
1976 
18.81 
4960 
I 
1977 
26.55 
2030 
\ 
1973 
31.29 
4890 
I 
j 1979 
31.67 
620 
I 
j 1980 
33-60 
3700 
j 1981 
j 
37.50 
| 
3350 
When this GAD package had been used for 
predicting the time-varying parameters and 
the plastic production, the average predic-
tion error of 1980 and 1981 was 4.2$, which 
was obtained by using the real data from 
1972 to 1979. 
The above descriptions show a part of indus-
trial applications of CADCS in PRO, hoping 
that will give out a general impression 
about this fields. 
3. PROSPECT 
Even the techniques of CADCS have been de-
veloped and applicated in some main engi-
neering areas, but there are still not 
familiarized by many engineers, so it needs 
making efforts to popularize this techni-
ques for engineering applications, through 
organizing seminars, technique exchanges 
and another possible ways. The engineering 
experiences have been shown that the CADCS 
techniques become the bridges between the 
theory and pratice, and it also can be fore-
casted that these kinds of bridges will 
give more play to act on the engineering 
fields. We also hope to hold much more te-
chnique exchanges in the international ran-
ge, and use the advanced equipments as far 
as possible. Besides to develope and enrich 
the contains of CADCS packages, the combina-
tion of control techniques and special ar>T)-
licated techniques will provides another 
wide working area. For example the biomédi-
cal identification CAD package have been 
constructed for doctors, who want to use 
the identification techniques but can not 
carry on any particular calculations, this 
CAD package provides as confortable instru-
ments and have been appreciated by doctors. 
The extend of discipline of CADCS is also a 
broad problem, which is not limited into 
the engineering area, especially the con-
trol science have permeated into the socio-
logy, economics nowadays. Such as system 
planning, system programming as well as 
large-scale system, there have a lot of 
problems providing to be developed concer-
ning with CADCS and its applications. The 
techniques of data base and expert system 
are also useful for CADCS. 
4. REFERENCES 
Bao Yuan-Lu,et al. (1982). CAD of the multi-
variable feedback system based on mo-
dern frequency domain methods. Informa-
tion and Control, Vol.11. No.6. 24-33-
Cao Shu-Guang, et al. (1934). CAD package 
of self-tuning control systems. Trea-
tise of Shan Xi Mechinery College. 
Chen Zhen-Yu. (1979). Simulation study of 
automation systems of cold tandem 
mills. Metallurgy Automation, No.1. 
9-19. 
Chen Zhen-Yu, et al. (1983). Self-tuning 
regulator for roll eccentricity of cold 
tandem mills. 4th IFAC Symp. on Automa-
tion in Mining, Mineral and Metal Pro-
cessing, Aug. 22-25, 1983. Helsinki, 
Finland. 
Chen Zhen-Yu, et al. (1985). Self-tuning 
CAD package and its application. 3rd 
IFAC Symp. on Computer Aided Design in 
Control and Engineering Systems, July 3 
-Aug. 2, 1985. Lyngby, Denmark. 
Deng Zheng-Duan, et al. (1982). Self-tuning 
control of silicon crystal drawing pro-
cess. Report of Shan Xi Machinery Col-
lege. 
Deng Zi-Li, et al. (1983). Multivariable 
self-tuning recursive multiStep predic-
tors and their applications. Acta Auto-
matica Sinica, Vol.9. No.4. 241-247. 
Gan Hua-Lei. (1982). LQGSP-A CAD software 
package for the LQG systems. Informa-
tion and Control, Vol.11. No.6. 11-16. 
Gao Long, et al. (1933). The LQ design of 
effective anti-disturbance speed regu-
lating system. Report of Automation 
Department of Tsing Hua University. 
Guo Yi-Xin, et al. (1984) CAD package for 
adaptive prediction. Report of Heilong-
.jiang Institute of Applied Mathematics. 
Han Jing-Qing. (1979). Canonical form of 
linear systems and calculation of feed-
back systems. Annual Meeting of Theory 
Com, of Chinese Association of Automa-
tion, May.10-17, 1979. Xia Men, China. 
Han Jing-Qing. (1980). The theory of multi-
variable control systems — polynomial 
matrix operations and frequency domain 
methods. Treatise of Institute of Sys-
tems Science, Academia Sinica. 
Han Zhi-Gang. (1982). Multi-level progres-
sive order method. Treatise of Heilong-
.jiang Institute of Applied Mathematics. 
Han Zhi-Gang. (1933). A new method of dyna-
mic system prediction. Acta Automatica 
Sinica, Vol.9. No.3. 161-168. 
Han Zhi-Gang, et al. (1983). An adaptive 
forecast about the production, worth 
and marketing of light industry commer-
cial products. Information and Control, 
Vol.12. No.1. 14-18. 
He Huan-Xi. (1982). The computer aided de-
sign software package of the multivari-
able control system. Information and 
Control, Vol.11. No.6. 50-S8. 
Li Jie-Xin, et al. (1983). Applications of 
SCIT CAD package. Report of Shen-Yang 
Institute of Automation, Academia 
Sinica. 
Liu Zhi-Jun, et al. (1979). The method of 
digital continuous system simulation. 
Acta Automatica Sinica, Vol.5. No.4. 
316-324. 
Lu Gui-Zhang, et al. (1934). CAD software 
package for identification, simulation 
and control. Treatise of Nan Kai 
University. 
Ruan Rong-Yao, et al. (1981). Optimal feed-
back control for cover-type annealing 
furnaces. The Symp. Proceeding of the 
Sino-US Bilateral Meeting on Control 
Systems, Science Press of China. 
Ruan Rong-Yao, et al. (1981). The mathema-
tical model of temperature control for 
creep-testing furnaces, ibid. 
Ruan Rong-Yao. (1982). Software for 

74 
Chen Zhen-Yu 
identification and optimization of 
multi-input multi-output discrete-time 
systems. Information and Control, Vol. 
11. No.6. 17-23. 
Ruan Rong-Yao, et al. (1934). A mathemati-
cal model for computer control of the 
electroslag remelting process. Acta 
Automatica Sinica, Vol.10. No.3. 247-
252. 
Shu Di-Qian, et al. (19820. Multivariable 
self-tuning control of electric furna-
ces. Report of Beijing Iron and Steel 
College. 
Su Zhong-Fei, et al. (1983). GAD of wide 
range speed regulating system. Report 
of Automation Department of North-East 
Technology University. 
Tu Qi-Lie, et; al. (1982). An introduction 
to SCTI, a CAD software package for 
control system design. Information and 
Control, Vol.11. No.6. 43-49· 
Wang En-Ping. (1972). Recursive methods of 
optimal linear filter. Mathematical 
Practice and Cognition, No.6. 
Wang Kia-Sang, et al. (1979). A mathemeti-
cal model of computer controlled creep-
testing furnaces. Acta Automatica 
Sinica, Vol.5. No.1. 6-14. 
Wang Zhi-Bao, et al. (1984). The design of 
a software package for CAD of control 
systems. Control Theory and Applica-
tions, Vol.1. No.4. 28-34. 
Wu Jie. (1978). An algorithm of inertial 
navigation control system. Journal of 
South-China Institute of Technology, 
Vol.6 No.2. 75-79. 
Wu Hong-Xin, et al. (1984). All parameters 
self-tuning control method. Annual 
Meeting of APCQM of Chinese Association 
of Automation. Xi-An, P.R.China. 
Xiong Üuang-Leng, et al. (1982). IDEiMT- A 
computer aided program for the identi-
fication of linear systems. Information 
and Control, Vol.11. No.6. 34-42. 
Xu Jian-Pian, et al. (1976). Adaptive fil-
tering. Journal of Fu Dan University, 
No,2. 22-33. 
Yin Yi-Xin, et al. (1984). CAD package of 
multivariable self-tuning control sys-
tems. Treatise of Bei.jing Iron and 
Steel College. 
Yuan Zhu-Zhi, et al. (1930). Self-tuning 
adaptive control of two installations 
in chemical industry. 6th IFAC/IFIP 
Digital Computer Application to Process 
Control, Preprints, 161-166. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF CONTROL 
SYSTEMS IN THE UNITED KINGDOM 
O. L. R. Jacobs 
Department of Engineering Science, University of Oxford, Oxford 0X1 3PJ, UK 
ABSTRACT 
Current work in U.K. is surveyed, on uses of digital computers to aid design 
of feedback controllers. Most of the work is concerned with methodology but it is all 
motivated toward practical applications. 
There are grounds for believing that 
favourable conditions exist for the methodology now to evolve into engineering 
practice. 
KEYWORDS 
computer-aided design, Computer control, Control engineering, computer 
applications, Identification, Multivariable control systems, Nonlinear control systems. 
1 INTRODUCTION 
This paper summarises results of an attempt to 
survey current work on Computer Aided Design of 
control systems for industrial processes in the 
united 
Kingdom, 
with 
emphasis on practical 
applications. 
Computer Aided Design (CAD) is 
interpreted in a fairly wide sense as referring to 
almost any use of a digital computer to aid design 
of 
a feedback controller, excluding adaptive 
control which already has its own large literature 
(Aström 1983). 
Primary sources of information 
consisted of private communication with known 
workers, and a timely workshop on computer Aided 
Control System Design (Inst. M. & C , 1984). The 
resulting summary may well not be comprehensive in 
its coverage of all relevant projects, but is 
nevertheless thought to be representative of the 
range of current work in U.K. 
The survey did not, in the event, discover many 
published case-histories of applications. Most 
reported activity concerned methodology. This is 
surveyed 
here 
against 
a 
background 
of 
methodological categories which are outlined in 
Section 2. Section 3 contains the actual survey. 
The overall impression, stated in a concluding 
Section 4, is of work in progress over a broad 
front 
with good prospects for reversing the 
conclusion of an earlier survey that "the real 
breakthrough among industrial users has not taken 
place" (Tysso, 1981). 
What seems now to be 
happening is more like infiltration by many routes 
than breakthrough in any single direction. 
2 TOPICS IN CAD METHODOLOGY 
CAD methodology can conveniently be presented in 
five categories:-
(i) 
Type of mathematical model used as a basis 
for design 
(ii) Type 
of computing job constituting the 
design 
(iii) On-line or off-line CAD 
(iv) Uses of CAD packages 
(v) 
Technology of CAD 
These 
are 
discussed in Sections 2.1 
respectively. 
2.5 
2.1 Mathematical Models 
At the heart of most design procedures is some 
model 
whose 
function 
is 
to 
predict 
the 
consequences of design decisions. 
In CAD the 
model is usually mathematical, and for control 
systems 
the 
object 
to be modelled is the 
controlled 
process. 
Two 
main 
types 
of 
mathematical 
model 
of 
controlled processes, 
"structural" and "behavioural", provide starting 
points for CAD procedures. 
structural 
models reflect prior knowledge of 
structure of the modelled object. They consist of 
equations from physics or chemistry or physiology 
or whatever science is relevant to the controlled 
process. 
They are not necessarily linear or 
deterministic, and can be at whatever level of 
complexity or simplicity is thought necessary to 
capture significant features of controlled process 
behaviour. 
Behavioural models reflect behaviour rather than 
underlying structure. 
They are usually linear, 
whether or not the modelled object is linear, and 
can be regarded as the result of fitting linear 
equations to observed behaviour. If the object 
really is linear, the linear behavioural model can 
correspond completely to the structural model. 
However most real controlled processes are more or 
less nonlinear and behave in ways which cannot be 
completely predicted by a linear model. 
The 
usefulness of linear behavioural models is thus 
problem-specific. 
Computers can aid derivation of either type of 
mathematical model,usually by processing plant 
data so as to obtain estimates of some chosen 
parameters. 
For structural models the estimated 
parameters would be physical or other coefficients 
determining 
the 
structural 
equations. 
For 
behavioural 
models, 
coefficients 
in 
linear 
equations can be fitted to observed behaviour by 
procedures which have come to be known as System 
Identification (Isermann, 1981). 
2.2 Computing Jobs 
Once a mathematical model is given, there are 
various jobs which a computer can do to aid 
design. 
Most comprehensive, would be a fully 
automated design synthesis where the user had only 
to specify a mathematical model and a performance 
criterion, and the computer would then determine a 
75 

76 
O. L. 
R.Jacobs 
suitable controller. Adaptive control algorithms 
usually 
include 
some such automated design, 
operating on a behavioural model obtained by 
System Identification. 
Adaptive control is not 
discussed 
in detail here, beyond noting the 
general conclusion that it can give good results 
when the controlled process is sufficiently linear 
that a linear behavioural model reliably predicts 
performance. 
optimal control theory, using performance criteria 
in the form of scalar cost functions, offers a 
form of fully automatic design algorithm. For 
linear mathematical models with quadratic criteria 
LQ optimal theory can be used to determine linear 
controllers. 
However, accurate nonlinear models 
of practical control engineering problems seldom 
lead directly to soluble problems in optimal 
control. 
Less ambitious, but more popular, is mechanisation 
of design calculations determining quantities such 
as stability margin or closed-loop pole position 
in linear systems. 
Computer aid of this type 
provides a natural extension to traditional trial-
and-error design methods. The user remains free 
to direct the design, with the computer doing the 
heavy calculations. 
Much recent U.K. work has 
been in this area of CAD. 
Another 
useful 
type 
of job is simulation, 
especially when the controlled process is so 
nonlinear that classical linear design methods 
cease to be directly relevant. Simulation, where 
the computer predicts controlled behaviour by 
solving 
non-linear equations of a structural 
model, is probably the type of CAD most widely 
used in industry. In the words of one industrial 
correspondent "Dynamic simulation has proved to be 
an invaluable tool in the design of control 
systems for many process operations, particularly 
where 
interaction 
of 
process 
controls and 
nonlinear behaviour of equipment bring about the 
problem 
of instability". 
Simulation packages 
range from the general-purpose, like CSMP, SIMNON 
(Elmquvist, 1977) and ACSL (Havranek, 1984) mostly 
not developed in U.K., through suites devoted to 
some class of interconnected unit process, to 
those which concentrate on some specific nonlinear 
problem. 
2.3 Mode of computing 
The computer used for CAD of a control system may 
or may not be on-line to the controlled process, 
and may or may not be required to perform design 
calculations in real process time. Of the jobs in 
Section 
2.2, 
adaptive control has the most 
demanding on-line real-time requirements, whereas 
classical designs and simulations are usually done 
off-line and to some non-operational time-scale. 
Routes from off-line CAD to on-line computer 
control are discussed in Section 3.3. 
2.4 Uses of CAD 
Two principal uses for CAD in industrial processes 
are (i) to improve operations of existing plant, 
and <ii) to contribute to specifying new plant. 
For existing plant the CAD procedure could include 
interaction with the plant to help specify a 
mathematical 
model 
or 
to 
test 
specific 
controllers. 
For new plant there may need to be 
more emphasis on simulation of structural models. 
A third use is as a teaching aid. In higher 
education, 
most 
control 
engineering courses 
include some CAD, both as an object of study for 
engineers and as an aid to understanding classical 
design calculations. Simple CAD packages can also 
be 
used 
to 
train 
other 
technical 
staff 
(King,1984), not necessarily graduates in Control 
Engineering. 
2.5 Technology of CAD 
CAD of control systems has a technology which is 
developing in several areas. 
Theoretical work 
produces new design criteria, such as multi-
variable generalisations of classical stability 
margins, or H norms, which can be calculated by a 
computer. 
Algebraic and numerical work makes it 
possible for a computer to perform safe and robust 
manipulations 
of 
linear mathematical models, 
including order-reduction and linearisation of 
nonlinear models. 
Computing science contributes 
to the structure of interaction between CAD-user 
and 
computer, particularly to development of 
facilities for graphical input from the user, for 
example to specify block diagrams on a VDU. It 
should 
also 
contribute 
to specification of 
database structures for mathematical models and of 
data interfaces for communication between CAD-
computer and controlled process. Current computer 
technology offers the possibility of implementing 
CAD in a desk-top or portable microcomputer. 
At 
almost 
all 
levels, there is scope for 
standardisation. 
For example in data protocols, 
in database structure, in user-interaction, in 
programming language, in specifying CAD functions. 
However, 
advantages 
of standardisations have 
always 
to be weighed against the long term 
evolutionary benefits of variety. 
3 SURVEY OF CURRENT U.K. WORK 
Current U.K. work on CAD of control systems can 
conveniently be surveyed in three sections. 
(i) 
Off-line computer packages where a linear 
controller is designed to match a given 
linear mathematical model of the controlled 
process. 
In the rest of this paper, as 
elsewhere, the description "CAD" is abused 
as 
referring 
specifically 
to 
such 
procedures. 
(ii) Off-line packages where controller design 
uses 
simulation 
of a given nonlinear, 
probably structural, mathematical model. 
(iii) integrated packages, combining linear CAD 
and 
simulation 
and 
possibly 
having 
communication from and to the controlled 
process, with facilities which may range 
from 
system 
identification 
to on-line 
computer control. 
These 
are 
discussed 
in 
Sections 
3.1-3.3 
respectively. 
Examples quoted are biased toward 
process control because the original focus of the 
survey was directed to CAD applications in that 
area. 
3.1 Off-line linear CAD 
Probably the best-known British CAD packages are 
off-line linear packages such as CLADP - the 
Cambridge Linear Analysis and Design Programs 
(Maciejowski and MacFarlane, 1982) and the UMIST 
package (Munro, 1979). Written in FORTRAN, they 
mechanise a comprehensive set of classical and 
generalised 
design 
calculations 
for 
linear 
controllers of linear (or linearised) controlled 
processes. 
Mathematical models in these packages 
can be specified either in time-domain in the form 
of state-space matrices, or in frequency domain as 
transfer function matrices or frequency-response 
data. Powerful routines for manipulating matrices 
and polynomials provide robust transformations 
between the two domains. 
Models of specific 

Control Systems in the United Kingdom 
77 
problems, together with their controllers, can be 
stored 
in 
disc files for future reference. 
Controller 
designs are assessed by classical 
frequency-response and root-locus techniques as 
well as by their multivariable generalisations due 
to 
MacFarlane 
(1980), Rosenbrock (1974) and 
others. 
The assessment makes much use of graphic 
displays. 
Other facilities include: some optimal 
control and Kaiman filter programs; equal support 
for 
both 
continuous-time 
and 
discrete-time 
designs; approximation routines to give a low-
order 
version of a higher-order mathematical 
model; command macros to allow the user to define 
a sequence of commands. Work is in progress to 
include additional new design criteria as these 
are developed. 
Both packages have been the subject of some tens 
of man-years of development, and are commercially 
available. 
They have been acquired by major 
industrial customers in Britain and abroad. Case 
histories exploiting the full power of CLADP have 
not yet been published. Initial applications, for 
example to single loops in steel mills or to a 
pair of interacting loops in a chemical plant, 
appear mostly to be of a tutorial nature. Users 
are familiarising themselves with the powerful 
facilities for classical single-loop design work 
as well as beginning to explore the multivariable 
generalisations. 
The UMIST package has several 
reported applications (referenced in Munro, 1982) 
such as its use to improve performance of an ore-
crushing system having as many as three inputs and 
three outputs, at an overseas goldmine (Koudstaal 
and coworkers, 1981). 
How far and fast these 
packages 
will 
infiltrate 
general 
control 
engineering useage, remains to be seen. 
One 
determining factor may be price of the software 
and its supporting hardware. 
That there exists optimism about the usefulness of 
off-line linear design packages is indicated by 
the significant number of packages which have been 
developed to perform similar functions. These 
have been produced by other university groups, and 
by individuals in industry such as Dutton (1984) 
at British steel. No packages have been quite so 
professionally developed and marketed as those 
mentioned above, but there is much other work on 
technology of CAD which will contribute to the 
next 
generation 
of off-line packages. 
This 
includes:-
(i) 
Provision of graphical interactions at the 
input interface between user and computer, 
so that mathematical models can be specified 
in 
block 
diagram format. 
Work is in 
progress 
on this at Salford university 
(Gray, 1984) and also at UMIST (Goodfellow 
and Munro, 1984) where an input translator 
is under development to enable a computer to 
accept 
mixed 
graphical, 
numerical and 
textural input. 
(ii) Research at Cambridge (Maciejowski, 1984) on 
data structures which would easily support 
CAD functions. 
( iii ) Introduction 
of 
new 
and 
computable 
theoretical 
criteria 
on 
stability and 
robustness 
of 
linear 
closed-loop 
performance. 
Semi-infinite 
optimization 
methods, where performance criteria are in 
the form of nondifferentiable, infinite-
dimensional constraints, have been developed 
at 
Imperial 
College (Polak and Mayne, 
1984, Polak and coworkers, 1985). Research 
into use of H norms (Francis, Helton and 
Zames, 1984) is in progress, for example at 
Cambridge (Glover, 1985) and at oxford (Foo 
and Postlethwaite, 1984) 
(iv) Microcomputer implementation of linear CAD. 
Single-loop 
routines 
are 
readily 
implemented, 
for example in BASIC on an 
Apple (Thompson, S. 1984, Lawrence, 1984). 
A micro version of the UMIST inverse Nyquist 
array package is implemented on a Sirius 
(Munro, Bowland and Hopkins, 1984). To what 
extent a more comprehensive package such as 
CLADP could usefully be implemented on a 
microcomputer, remains to be seen. It seems 
likely 
that 
as 
microcomputers 
become 
increasingly powerful and inexpensive, CAD 
will become more and more widely available 
at an acceptably low starting price. 
3.2 Off-line simulation 
Of the computing jobs mentioned in Section 2.2, 
simulation is probably the most widely used in 
industry 
as 
an 
aid 
to designing 
feedback 
controllers. 
In one major chemical engineering 
company, 
for example, several man-years each year 
are devoted to use of a general-purpose simulation 
package for modelling and investigating control of 
specific processes. 
The commercially available 
simulation software is not discussed here because 
mostly it was not developed in U.K. 
Microcomputer implementations are, however, under 
development 
and 
offer 
various 
levels 
of 
comprehensiveness. 
Most ambitious, is a package 
from 
Sheffield 
(Linkens, 
1984), which uses 
extensive overlaying to transfer to a 380Z all the 
facilities of the local minicomputer package. A 
similar, but perhaps less comprehensive, transfer 
at Salford (Hay, 1984) offers a package to run 
under CP/M or MS-DOS, which therefore can run on 
an IBM-PC. 
A simpler package (Clements, 1984) 
runs on the BBC computer. 
Several 
other 
U.K. 
simulation packages are 
dedicated to aiding design of controllers for 
processes within some specific engineering field. 
One approach has been to provide a library of unit 
processes and standard controllers which can be 
called up and interconnected in a user-language 
closely related to the chosen class of engineering 
problems. 
This has been done in FORTRAN for, for 
example, chemical engineering processes (Sebastian 
and Murray, 1984) and hydraulic actuators (Dorey, 
1984). 
Another approach has been to concentrate on a 
single notoriously difficult, because nonlinear, 
process and provide a package where performance 
can be simulated under a wide variety of control 
laws. This has been done at Oxford for regulation 
of pH in a continuous stirred tank reactor (Jacobs 
and Badran, 
1983). 
A selection of conventional 
and 
novel 
algorithms for classical control, 
adaptive 
control and on-line estimations was 
included so that their performances and cost-
effectiveness could be compared. The comparative 
results 
are 
problem-specific, 
depending 
on 
parameter 
values, disturbance magnitudes, and 
nonlinear characteristic of the simulated process. 
The package PHDESIGN has, in collaboration with 
major chemical engineering companies, had both the 
uses of Section 2.4: it helped to improve control 
of 
existing plant as well as to guide the 
specification of new plant. 
3.3 integrated packages 
An obvious further development is creation of 
integrated packages in which routines for linear 
CAD 
can communicate directly with simulation 
software. Nonlinear controlled processes can then 
be simulated 
for use as test-beds to evaluate 
linear controllers designed by the CAD routines. 
Furthermore, 
linearisation 
routines 
can 
be 
provided to extract from the nonlinear simulations 

78 
O. L. R. Jacobs 
a linear mathematical model which will he a 
starting point for the linear controller design. 
Communication with the controlled process, in 
either or both of two directions, can also be 
provided as part of an integrated package. Data 
from the process would be used to establish the 
mathematical model, as discussed in Section 2.1. 
Communication in the other direction, from CAD 
computer to plant, becomes important when the 
plant includes an on-line computer which will 
implement 
the 
designed 
controller. 
Good 
engineering 
practice then requires a machine 
route, such as could exist in an integrated 
package, to download the designed controller to 
the on-line computer. 
Existing U.K. integrated packages have mainly been 
created by industrial users who have brought 
together routines from different sources. Dowty 
Electronics, who design electronic controllers for 
a wide range of hydromechancial systems, have 
integrated routines for linear CAD, simulation, 
and 
identification using recorded plant data 
(Foss, 1984). The Central Electricity Generating 
Board (CEGB), who make extensive use of computing 
for the analysis and design of power plant and its 
associated control systems, have a similar package 
(Thompson M.A., 1984) which includes a route to 
their own high-level language specifying power 
plant 
control 
systems. 
These packages both 
include CLADP. 
Experience in creating current integrated packages 
draws attention to a need for standardisation in 
the environment of CAD, simulation, data-handling 
and control routines. The standardisation should 
be effective at all levels of communication with 
packages; for example in data-base structures, 
data-transfer and real-time signal protocols, and 
user 
interactions. 
Without 
some 
such 
standardisation 
it 
will 
become increasingly 
difficult 
to 
create 
generally 
accessible 
integrated packages exploiting future developments 
by individual workers. 
A more homogeneous integrated CAD system has 
recently 
been 
developed 
by 
the Manchester 
university 
Company VUMAN (Sandoz, 1984). 
It 
consists of two packages, designed to communicate 
with each other according to standard protocols 
accessible also to other systems. One package 
performs off-line system identification and linear 
CAD to establish control system structures which 
will 
be 
implemented by the other, on-line, 
package. This performs many standard functions of 
an on-line process control computer, such as 
signal processing, data-logging, alarm monitoring, 
control-loop 
configuration, 
sequence control, 
mimic-diagram 
displays. 
In addition it can 
implement 
advanced 
feedback 
and 
feedforward 
control 
schemes, 
and has an on-line tuning 
facility for adjusting controller gains. The on-
line package is implemented in read-only-memory 
(ROM) for a PDP11 computer, using a BBC computer 
as an intelligent colour graphics terminal. It 
does 
not 
at present include general-purpose 
simulation software, so its use is primarily of 
type (i) from Section 2.4, to improve operations 
of 
existing plant. 
The system is currently 
undergoing full-scale industrial evaluation at two 
major chemical engineering companies, at CEGB, and 
elsewhere. 
A different type of integrated system has been 
developed at Oxford (Tuffs, 1985) as an aid to 
implementing 
and 
commissioning 
self-tuning 
controllers. 
This package provides a modular 
FORTRAN environment within which any one of a 
repertoire of adaptive control algorithms can be 
interfaced 
on-line 
to 
control a full-scale 
process. 
Facilities in the package include, 
continuous calculation of PID control action as an 
alternative to adaptive control, signal conversion 
and 
conditioning, data-logging and real time 
display, 
off-line 
simulation using a linear 
mathematical model of the controlled process, 
simple 
English-based 
run-time 
commands 
for 
operating the controllers. The main objective of 
this package, as also of the Oxford simulation 
package in Section 3.2, is to make available a 
variety of advanced controllers. The modularity 
of the package has allowed many different workers 
to install and test their self-tuning controllers 
with a minimum of programming effort. The package 
can be implemented in a PDP LSI11 and has been 
used succesfully for on-line control of two full-
scale industrial processes as well as of a number 
of pilot plants. 
4 CONCLUSIONS 
Current U.K. work on CAD of control systems is 
still largely concerned with methodology. The 
absence 
of 
many reports of succesful case-
histories 
could 
be 
partly 
attributable to 
commercial secrecy but is more likely a reflection 
of the time needed for new methodology to evolve 
into engineering practice. 
A major factor affecting evolution rate is the 
starting price as perceived by cost-conscious 
industry. 
Until recently this price has appeared 
to be of order tens of thousands of pounds to 
purchase or develop a package, plus one or more 
highly-qualified man-years to learn to use it. 
Simulation packages, commercially available from 
outside U.K., have been found worth this price as 
an aid to designing controllers for nonlinear 
processes. 
Linear CAD packages, mostly a U.K. 
development, are still under assessment. 
One 
reason why time is needed to determine 
suitable applications for the new linear CAD 
packages was summarised in the conclusion of an 
earlier review (Hashimoto and Takamatsu, 1981): 
"most chemical process systems have been designed 
...safe and self-regulatory processes which do not 
pose any difficult control problems. 
Control 
systems, therefore, can be designed very easily by 
applying classical methods...CAD systems which are 
necessary for the design of advanced control 
systems 
are 
scarcely 
utilized at present". 
Existing processes were designed to match existing 
classical methods of controller design. For new 
processes, linear CAD packages offer advanced 
control of multivariable interacting processes, 
but the poor financial climate of recent years has 
inhibited construction which might exploit this 
offer. 
Another factor affecting uses of linear 
CAD packages is competition from adaptive control, 
which 
provides 
alternative 
procedures 
for 
controlling linearisable processes. 
Microcomputer implementations may bring about a 
significant reduction of starting price. Such 
reduction could make the linear CAD packages 
competitive 
for classical single-loop design. 
This might provide the route by which linear CAD, 
with its facilities for more advanced designs, 
infiltrates industrial practice. 
In any case, 
microcomputer implementation is a promising line 
of development, actively pursued in U.K. 
Amongst existing packages, ACSL is popular for 
general-purpose simulation and FORTRAN persists as 
a widely used language. 
CIADP and the UMIST 
package have emerged as the dominant linear CAD 
packages although during recent years, whilst 
linear CAD evolved in U.K., there was inevitably 
much duplication of effort. Now, there seems no 
reason why what has been achieved should not be 
consolidated 
within 
a 
single 
standardised 
environment. 
This is particularly necessary in 

Control Systems in the United Kingdom 
79 
connection with the promising integrated packages 
of Section 3.3. 
To 
establish 
an 
environment which will be 
sufficiently professional in its standardisation 
and support as to command general acceptance, is a 
major undertaking beyond the resources of most 
organisations. 
So the Science and Engineering 
Research Council (SERC), which is the main body 
allocating U.K government money to U.K. research, 
has recently initiated a program to meet the need. 
The principal objective of this program is to 
achieve a standardised environment for CAD of 
control systems, providing user-friendliness, easy 
communication between packages, fertile conditions 
for new developments, and easy transfer of useful 
work to industry. A starting point is likely to 
be the UNIX-based DELIGHT environment 
(Polak and coworkers, 1982). 
Work in U.K. on methods for using computers to aid 
design of feedback controllers has evolved over a 
broad and varied front. It includes development 
of general multivariable 
linear design criteria 
and 
linear 
CAD 
packages, 
microcomputer 
implementations of off-line packages, creation of 
integrated packages, development of packages which 
make available a variety of advanced controllers, 
and several full-scale industrial trials. The 
work 
is 
all 
motivated 
towards 
practical 
applications and this next stage of evolution may 
benefit from a temporary retreat away from variety 
in favour of the standardisation of the SERC 
initiative. 
There is ground for optimism that 
this 
initiative, 
coupled 
with 
continuing 
reductions in the cost of computing power, will 
soon help the new methodology to find its rightful 
place in engineering practice. 
5 ACKNOWLEDGEMENT 
Thanks are due to many colleagues in U.K. and 
authors of referenced publications who provided 
helpful responses to the author's queries. 
6 REFERENCES 
Astrom, K. J. (1983). Theory and applications of 
adaptive control. Automatica, 19, 471-486 
Clements, R. (1984). BCSSP. Inst. M & C (1984), 
q.v., p243 
Dorey, R. E. (1984). 
computer simulation of 
control systems. 
Inst. M & C (1984), q.v., 173-
186 
Dutton, K. (1984). 
CLASIC-Developing a system 
analysis design and simulation package. Inst. M & 
C (1984), q.V., 99-103 
Elmquvist, H. (1977). SIMNON. Proc. Simulation 
'77, Montreux 1977 
Foo, Y. K. and I. Postlethwaite (1984). An H00-
minimax approach to the design of robust control 
systems. Syst. & Cont. Letters, 5, 81-88 
Foss, A. M. (1984). 
DICAST: Integrated use of 
CACSD. Inst M & C (1984), q.V., 129-135 
Francis, B. A., J. W. Helton and G. Zames (1984). 
H 
optimal 
feedback 
controllers for linear 
multivariable systems. 
IEEE Trans. AC, 29, 888-
900 
Glover, 
K. 
(1985). 
Robust stabilization of 
linear multivariable systems and relations to 
approximation, CUEL Report, in preparation. 
Goodfellow, s. D. and N. Munro (1984). An input 
translation facility for control systems CAE. 
Inst. Mec. (1984), q.V., 21-32 
Gray, J. O. (1984). Nonlinear system design, an 
integrated approach. 
Inst. M & C (1984), q.v., 
39-47 
Hashimoto, 
I. and T. Takamatsu (1981). 
New 
results and the status of computer-aided process 
control systems design in Japan. 
Chem. Proc. 
cont., 2, ?-l85 
Havranek, W. A. (1984). Inst. M & C (1984), q.v., 
165-168 
Hay, J. L. (1984). Inst. M & C (1984), q.V., 159-
164 
Inst. M & c. (1984). 
Computer aided control 
system design. 
Preprints of Workshop, Brighton, 
Inst. Meas. and Cont. 
Ieermann, R. (Ed.) (1981). System identification. 
Pergamon 
Jacobs, o. L. R. and w. A. Badran (1983). A 
computer 
package for designing pH regulation 
systems. Oxford Univ. Eng. Lab. Rept., 1506/83 
King, M. J. (1984). Interactive process control 
training aids. Inst. M & C (1984), q.v., 105-108 
Koudstaal, J., D. B. Hulbert, M. Braae and G. I. 
Gossman 
(1981). 
The 
application 
of 
a 
multivariable controller to an industrial grinding 
circuit. 
Proc. Vlllth IFAC congress, Vol. 22, 
210-215 
Lawrence, P. J. 
(1984). 
Control system design 
toolkit for personal computers. 
Inst. M & C 
(1984), q.V., 115-120 
Linkens, D. A. (1984). muPSl - A microcomputer 
simulation language for continuous and discrete 
dynamic systems. 
Inst. M & C (1984), q.v., 153-
158 
MacFarlane, 
A. G. J. (ed. ) (1980). 
Complex 
variable methods for linear multivariable feedback 
systems, Taylor and Francis 
Maciejowski, J. M. (1984). Data structures for 
control system design, EUROCON 84, Brighton 
Maciejowski, J. M. and A. G. F. MacFarlane (1982). 
CLADP: the Cambridge linear analysis and design 
programs, cont. Syst. Mag., D e c , 3-8 
Munro, N. (1979). 
The UMIST control systems 
design and synthesis suites. 
IFAC Symp. CAD, 
Zurich 
Munro, N. (1982). 
The inverse Nyquist array 
design method. 
Chap. 5 of Design of modern 
control systems, Eds. Bell, Cook and Munro. Peter 
Peregrinus 
Munro, N., B. J. Bowland and C. Hopkins (1984). 
MINAD - Micro inverse Nyquist array design. Inst. 
M & C (1984), q.v., p 221 
Polak, E., P. Siegel, T. wuu, w. T. Nye and D. Q. 
Mayne 
(1982). 
DELIGHT MIMO: an interactive 
optimization-based multivariable control system 
design package. Cont. syst. Mag., Dec, 9-14 
Polak, E., D. Q. Mayne (1984). Theoretical and 
software aspects of optimization-based 
control 
system design. 
Proc. VI the Int. Conf. Anal. & 
Opt. of Syst., Nice, 175-190. Springer-Verlag. 

80 
O. L. R. Jacobs 
Polak, E., D. Q. Mayne and D. M. stimler (1985). 
Control 
system 
design 
via 
semi-infinite 
optimization. IEEE Proc., to appear. 
Rosenbrock, H. H. (1974). Computer aided control 
system design. Academic Press 
Sandoz, D. J. (1984). 
CAD for the design and 
evaluation of industrial control systems. Proc. 
IEE, 13IP, 125-139 
Sebastian, D. J. G. and s. J. Murray (1984). 
Inst. M & C (1984), q.V., 193-197 
Thompson, M. A. (1984). Computer aided control 
system design software in the Central Electricity 
Generating Board. Inst. M & c (1984), q.v., 143-
146 
Thompson, S. (1984). 
Microcomputer-based CACSD 
software for continuous single-input single-output 
systems. Inst. M & C (1984), q.v., 79-83 
Tuffs, P. s. (1985). PAUST. Oxford Univ. Eng. 
Lab. Rept., 1568 
Tysso, A. (1981). New results and the status of 
computer-aided process control system design in 
Europe. Chem. Proc. cont., 2, ?-2ll 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INDUSTRIAL APPLICATIONS OF 
CAD-PACKAGES FOR CONTROL SYSTEMS IN 
THE USSR 
B. C. Tamm*, M. Oit**, R. Raud** and J. Vain** 
*Tallinn Technical University, Tallinn, 200026 
USSR 
^Institute 
of Cybernetics, Estonian Academy of Sciences, Tallinn, 200026 
USSR 
Abstract. 
Different CAD-packages for control systems, designed and used in the Soviet 
Union are treated. Control algorithm design and control system design, being the essential 
parts of CAD-package development are described in more detail. References are made to 
the contributions which discuss a number of particular packages as well as their applica-
tion areas. 
Keywords. 
Computer-aided design; control algorithm design; control system design; 
software development. 
INTRODUCTION 
This paper deals with CAD-packages for control sys-
tems designed and used in the USSR. Since the de-
velopment goes through control algorithm design and 
control system design, those two stages are descri-
bed in more detail. References are made to the con-
tributions where the problem under discussion is 
treated in greater depth. 
The paper concludes with an overview of the appli-
cation areas of the packages discussed. 
The survey does not claim to give a complete cover-
age of the results obtained and the packages desig-
ned and used in this country. 
CONTROL ALGORITHM DESIGN 
Control algorithm design is the part of control sys-
tem design which starts from the mathematical desc-
ription of the dynamical behaviour of the control ob-
ject and results in the desired regulator parameters. 
The latter may serve as input data for the design of 
the control system itself. Mathematical and computa-
tional problems are the prime concern in the design 
and the reasons for computer use lie here. Function-
ally we can distinguish several stages in the design 
(Fig. 1). 
object specification^^ 
1 
object mathematical description (identification) 
required dynamics determination 
• 
►•control problem statement 
object analysis 
I 
control system structure design - ^ 
1 
regulator algorithm synthesis 
' 
i 
mo ciel me 
Fig. 1. Functional scheme of the control algorithm 
design 
Object specification. 
In this stage we have to spe-
cify object variables (control inputs, disturbances, 
controllable and uncontrollable outputs), determine 
their allowed values, possible application areas and 
other qualities. This part is certainly indifferent to 
the place of investigation, and the approach in the 
USSR is quite the same as elsewhere. 
Mathematical description. 
The description of the 
object dynamical behaviour may be obtained theore-
tically, using the corresponding physical, chemical 
or mechanical relations between object variables. 
Such models are commonly too complicated and need 
some simplification (e.g. linearization). 
In addition, some 
packages have special subsys-
tems for approximation, e.g. GAMMA-IM (Aleksand-
rov and others, 1981), AVANS (Andrievskii and 
others, 1983) . Mathematical model can also be calcu-
lated from the measured values of the input and out-
put variables. The identification process is one of 
the most complicated problems of control theory. 
Quite different identification methods are used in 
CAD-packages (Abezgauz and others, 1981. Smirnov 
and Sazonova, 1981), but there are also some pack-
ages without identification possibilities at all, e.g. 
package GAMMA-IM. Depending on the method used 
we get system description in the form of state-space 
equations, ARMA models, Markov parameters or in 
other forms. None of the description types is given 
more preference, each one is equally used. State-
space description is used in packages SINTEZ (Arut-
junov and Brdzozovski , 1981), COMICS (Jaaksoo, 
1984), frequency methods in a package elaborated 
at Yerevan Polytechnic Institute (Preprints, 1984, 
p . 286), ARMA models packages developed at Moscow 
Institute of Control Problems (Preprints, 1984,P· 
284-285), networks in packages SPADE (Kukk, 1982) 
and DIPSTRUP (Melnikov, 1981). In some packages 
several description methods are allowed: in system 
DISPAS (Sadykov and Soloveitshik, 1981) - state-
space description and transfer functions, in package 
SPRINT (Smirnov and Sazonova, 1981) - frequency 
characteristics and ARMA models. 
Control problem statement. 
It means formulating 
your control problem via object description, and de-
termining the desired dynamics and control criteria. 
The quadratic control criterion seems to be most 
popular in the CAD system. There are also some 
multicriterial systems ( Solodovnikov and Zverev, 
81 

82 
B. C. Tamm et al. 
1984, Grigorenko, 1983). The exact problem state-
ment is the basis for the subsequent design stages. 
Analysis. Usually we analyze object stability, cont-
rollability, observability, and also interactions. Se-
veral packages consist only of analysis and modeling 
stages of design, e.g. SPABE, AINS (Ptitchkin and 
Batura, 1981) . Some new interaction analysis techni-
ques are included in package COMICS. 
System structure design. 
In accordance with the 
results of the quality and interaction analysis, we 
design system structure and specify all the regula-
tors for which we have to calculate parameters. 
Control algorithm synthesis. 
This is the most corn-
putative part of the whole process. If the desired 
control law cannot be obtained by the fixed object 
parameters, then the choice of the regulator type or 
the control system structure is inappropriate. Almost 
all the well-known regulator algorithm types are pre-
sented in CAD systems, more frequently P, PI, PD, 
PID algorithms, also modal, dead-beat and adaptive 
regulators. Special methods for adaptive system de-
sign are used (Derevitski, 1982,Andrievski 
and 
others, 1983). In system DISPAS the regulator is 
not determined, and the algorithm is synthesized by 
the prescribed dynamics instead. 
Modeling. 
Modeling of the designed control system 
dynamics is the final check for control algorithms. 
Depending on the control process type, modeling 
might occur quite complicated to accomplish. There 
are special theoretical approaches to modeling in CAD 
systems (Lobusov, 1982) and special packages for 
modeling, e.g. DISNEM (Osipov and others, 1981). 
If modeling results are not satisfactory, then there 
is something wrong with the control problem state-
ment. If the requirements to object behaviour are 
satisfied, we have got the necessary initial data 
(structure and regulator algorithms) for the control 
system design. 
CAD systems for algorithm design include on each 
occasion subsystems called IDENTIFICATION, ANA-
LYSIS, SYNTHESIS and MODELING and some others, 
depending on the purpose and possibilities of the 
system. Differences between these CAD systems 
are initiated by: 
■ control object classes (continuous, discrete, stoc-
hastic, etc.) 
- object mathematical description methods (state 
space equations, frequency methods, etc.) 
- regulator algorithm types (optimal, modal, adaptive, 
etc.) 
- design process type (fixed, interactive). 
CONTROL SYSTEM DESIGN 
The development of control systems can be divided 
into the following stages. 
requirement specification . ^ 
. 
I 
►" functional design 
preliminary physical design 
1 
hardware design 
software design 
t 
' 
system testing 
system maintainance and modification 
Fig. 2. Functional scheme of the control system 
design 
Requirements Specification. 
Control system CAD-
packages developed in the USSR are mainly oriented 
to the formal analysis of the requirements specifica-
tion and specification languages of these packages 
are therefore close to the used formalism rather than 
oriented towards the user. 
For example, the package (Motus and Lomp, 1984) is 
based on the conceptual model of communicating se-
quential processes and on the formalism described in 
(Quirk and Gilbert, 1977, Motus and Kaaramees, 
1983). 
Another package (Pranevicius, 1982) developed at 
Kaunas Polytechnic Institute uses the notation of 
aggregate theory and enables to specify operational 
parameters as in (Motus and Lomp, 1984). In addi-
tion a package (Pranevicius, 1982) specifies algo-
rithms of aggregates. 
Problem oriented constructs are developed in ASM 
specification language of a package (Burovoi and 
Uriadov, 1983). For the specification in ASM, the 
package generates a simulation model of the control 
system in the GPSS language. This package has been 
applied for a number of industrial systems (e.g. for 
the control of concentration technology of copper 
nickel converter matte) . 
Functional design. 
To verify the functional design, 
static and dynamical analysis have to be distinguished. 
These two kinds of checks were first suggested in 
(Biewald and others, 1979). 
Time invariant properties such as deadlocks, stabi-
lity, termination and others are examined by the 
state analysis, whereas dynamical aspects of a given 
specification are examined by simulation (Pranevicius, 
1982) or less frequently by analytical modeling 
(Motus and Lomp, 1984; Motus and Vain, 1982). 
The packages developed for requirement specification 
(Motus and Lomp, 1984; Pranevicius, 1982; Burovoi 
and Uriadov, 1983) are also available for functional 
design due to the ability to model system behaviour 
as a time function. Another package DSIM (Kostin 
and others, 1984) should be noted here. This pack-
age uses E-net formalism for simulation of computer 
networks. One of the most advanced packages with 
static and performance analysis tools is described in 
(Pranevicius, 1982). Unfortunately for the aggregate 
model no ready methods exist to prove timing cor-
rectness analytically. 
Timing properties are readily provable only in pack-
age (Motus and Lomp, 1984). It has been successfully 
applied for oil cracking catalyst production process 
description (Motus and others, 1984) and is being 
used for specification and design of an automatic test 
system for semiconductor devices. At the end of the 
functional design stage we get an abstract network 
of interacting functional tasks described in terms of 
some formalism. 
Preliminary physical design. 
In this stage the main 
design decisions are coupled with the transformation 
of abstract process network into a set of physical 
(software/hardware)modules and selection of algo-
rithms for them . 
For the first rough estimation of preliminary design 
decisions, analytical modeling methods based on 
queuing theory and particularly queuing network 
models are mainly used. A good example is a package 
supporting synthesis and analysis of large scale dis-
tributed structures elaborated in Leningrad (Zakha-
rov and Lohmotko, 1981) . At the end of the prelimi-
nary physical design we get a list of tasks for a 
detailed design of hardware modules and different 
software parts. 

Control Systems in the USSR 
83 
For automated design of software there is a package 
ASTRA (i.e. An Automated Structural Technology 
for Algorithm Design) ,Novosibirsk (Zavialov and 
others, 1983). ASTR.A has a specification language 
for multi-level structural design of programs - SMP 
close to essential Russian. By means of SMP one can 
specify the initial algorithm which then is to be trans-
lated into one of the output programming language 
codes: Assembler of ELEKTRONIKA-60 micro, 
FORTRAN, Cobol, Assembler of EC computer. The 
package has also a macrogenerator, debugging, test-
ing and documentation tools. 
Control system hardware detailed design. It has long 
tradition in the USSR (Glushkov, 1962, 1965; 1981). 
Some of these theoretical results are supported with 
CAD/CAE systems (Glushkov and Gusev, 1975). 
Functionally these methods and systems are somehow 
covering the whole area starting from conceptual de-
sign (Landau and Pogosjanz, 1983; 1984; Glushkov 
and Gusev, 1975), logic design and modeling (Goldina 
and others, 1981; Glushkov and Gusev, 1975; Rjabov 
and Lakshin, 1980), physical design (Rjabov and 
Lakshin, 1980; Petrenko and Tetelbaum, 1979), 
placement and routing for printed circuit boards and 
VLSI design (Petrenko and Tetelbaum, 1979). 
Not all of these systems have advanced designer in-
terface and technological service. One of the reasons 
why they are not broadly used is the fact that they 
operating on mainframe computers under large oper-
ating systems. Therefore they are accessible to 
hardware designer only by specially trained persons. 
The recommended hardware description languages 
for modeling on different levels of detailization (Gol-
dina and others, 1981, Rjabov and Lakshin, 1980) only 
have textual interface and are not syntactically and 
semantically related to each other. 
An ARM2-01 system where CAD-packages for physical 
design are intergrated with specialized graphic hard-
ware relates to the physical design area. These 
packages offer flexible graphic interface for a hard-
ware designer (Zabara and Verpinski, 1983). There 
is another CAD-package for physical design worth 
mentioning - MAGISTER (Oihman and others, 1983), 
running on SM-4 minicomputer with graphic periphe-
rals. 
Software development. In software development the 
picture is completely different. The main results here 
are not embedded in theoretical conclusions, but dif-
ferent software packages are produced instead. These 
packages, being cross-systems, are dedicated for 
control systems software implementation and are main-
ly running on mainframe computer under general pur-
pose OS (Raud and Tamm, 1982. Raud and Smeljanski, 
1984). With a few exceptions they are offering support 
for coding (mainly on the level of cross-assemblers 
with macrocapabilities) and functional debugging. 
There is one system which claims to full coverage of 
control system software life cycle support - RUZA 
(Shtrik, 1984). Unfortunalately RUZA does not offer 
a complete set of tools for real-time debugging and 
testing. Though it is a complicated system, it is good 
for supporting large control systems. 
For medium and small projects we have good experi-
ence with another software development environment 
- SERP (Raud and Smeljanski, 1984), offering some 
support for real-time software coding, interactive de-
bugging, test data generation and program testing. 
SERP is a cross-system too and therefore does not 
deal with software/hardware integration and system 
testing. 
There are two development systems in production. One 
of them is SO-4 (Malinovski and others, 1982) 
which has the same functional capabilities 
as INTEL INTELLEC earlier versions. The 
other one ARM2- 05 (Milner, 1984) is a network, in-
cluding SM-4 minicomputer as a central unit with 
disk storage and up to four K580 based microcompu-
ters SM-1800 as terminal units. Terminals are equip-
ped with in-circuit emulators and PROM programmers 
for software development. ARM2-05 supports also 
microprogram development having cross-microassemb-
lers and specialized in-circuit emulator units for K589 
K1804 based architectures.ARM2-05 offers a full set 
of software development support tools. ISIS-II and 
CP/M compilers are running on ARM2 05 also. 
Since it takes time to produce sufficient volumes of 
special hardware to support software development, 
cross-systems will still play a significant role for 
some time, despite some shortcomings, such as: 
hardware /software development are isolated from 
each other and integration cannot be supported on 
the software side, lack of autonomy for a programmer. 
Software maintainance 
and modification. 
Software 
maintainance and modification have some kind of r e -
mote support only in system RUZA. 
INDUSTRIAL APPLICATIONS OF 
CAD-PACKAGES 
The most advanced application of CAD-packages is 
computer-aided design of flying objects control sys-
tems. For such problems package DISPAS is oriented, 
which is today in use for airplanes and other flying 
objects control system design in many design bure-
aus. Another package DIASIM (Preprints, 1984, 
p . 321-322) elaborated at Moscow Aviation Institute, 
like the previous one, is used for airplane numerical 
control system design. 
Quite wide-spread is the application of CAD-pack-
ages for chemical process control system design. 
Packages DSS (Preprints, 1984. p . 175-177), COMICS, 
UNISAM (Kondrashin and Krutchin, 1981), SYNSAU 
(Preprints, 1984, p . 303-304), ESKORT (Podtchu-
kaev and TJnn 
Ί983) deal with such problems, e.g. 
using SYNSAU, 
a system for acrylonitrile syn-
thesis control is designed. There are also applica-
tions in metallurgy, e.g. using a package (Diligens-
ki and Tumanov, 1981) aluminium alloy hot rolling 
control system is designed. Some applications are in 
the oil industry. CAD-packages are used for oil bor-
ing stations control system design (Preprints, 1984 
pp. 305-306; 318-320), also for oil refining process 
control design (Preprints, 1984, p . 287-288). 
Applications are mentioned in the field of discrete 
control systems computer aided design, e.g. package 
DISTRUP is used for control system design in radio-
electronics. Some more application areas are as fol-
lows: packages IISPUO (Preprints, 1984, p . 95- 96), 
SAMP (Preprints, 1984 p . 22-24) are used for mana-
gement systems design; package AVRORA (Smirnov 
and Malov, 1981) - for municipal information manage-
ment systems design; packages ANSIN and MADINE-
SE - for electrical network design; package MODUS-
(Preprints, 1984, p . 61-63) · for nuclear power 
station control system design , package COMICS -
for grain dryer system design. 
The development and use of CAD-packages for con-
trol systems are expanding in the USSR in line with 
the advances of automatic control methods and com-
puter control in new technology and management. 

84 
B. C. Tamm et al. 
REFERENCES 
Abezgauz, M.M., P.. I. Maizus, and A. S. Grinberg 
(1981). 
Identification of industrial systems in 
in the computer-aided design process. 
In 
V . A. Trapeznikov (Ed. ) Computer-aided con-
trol system design. 
Finansy i Statistica, 
Mos-
cow. pp. 182-2,02.. (in Prussian). 
Aleksandrov, A . C . , A.A. Markov, and T.A. Petrov 
(1981). 
Dialogue computer-aided design pack-
age "GAMMA-IM". 
In Preprints of the 3rd 
All-Union conference on computer-aided design 
of automatic and automatized technological pro-
cess control systems. 
Ivanovo Electrotechni-
cal Institute, 
Ivanovo, 
pp. 149-150. (in Prus-
sian) . 
Andrievski , B.R., V. V .Kasatkin, A.A. Spiridonov, 
V.N. Utkin (1983). 
Architecture of adaptive 
systems CAD-package AVANS. In Preprints of 
the All-Union conference on adaptive systems 
theory and application. 
Leningrad, p . 324 (in 
Russian) . 
Arutjunov, S.K., and A.E. Brdzozovski (1981). 
Computer-aided control system design system 
"SINTEZ". In Preprints of the 3rd All-Union 
conference on computer-aided design of auto-
matic and automatized technological process 
control systems. Ivanovo Electrotechnical Insti-
tute, Ivanovo, pp. 139-140. (in Russian). 
Biewald, J . , E. Joho, S. Jovalekic, and H. Shelling 
( 1980) . Application of the specification and 
design technique EPOS to process control prob-
lems. In Proceedings of the 6th IFAC/IFIP Con-
ference on digital computer applications to pro-
cess control. Dusseldorf. pp.517--52^. 
Burovoi, I.A., and V.M.Uriadov (1983. Automated 
synthesis of distributed real-time computer 
system simulation models. In Modular informa-
tical-computational systerns; Preprints. Irkutsk. 
pp. 5Ô--52. (in Russian). 
Derevitski, D.P. (1982). Prototype method for adap-
tive system computer-aided design. In Cyber-
netical problems. Actual problems of adaptive 
control. Council for Cybernetics, Acad. of 
Sciences of the USSR., Moscow, pp.68-90. (in 
Russian) . 
Diligenski, N.V., P.V. Sevastjanov, and N.V. Tu-
manov (1981). Automation of optimal rolling r e -
gime design. In Preprints of the 3rd All-Union 
conference on computer-aided design of auto -
matic and automatized technological process 
control systems. Ivanovo Electrotechnical Ins-
titute, Ivanovo, pp. 1^7-12,8. (in Russian). 
Epshtein, V.L. (1983). ARIUS. Computer-aided de-
sign of data bases and software packages; Pre-
print. Institute of Control Problems, Moscow. 
2? pp. (in Pvussian) . 
Glushkov, V.M. (1962). Synthesis of numerical au-
tomata. Fizmatgiz, Moscow. 390 pp. (in Rus-
sian) . 
Glushkov, V.M. (1965). Automata theory and com 
puter structure design. Kibernetika, 1, 3-11. 
(in Russian) . 
Glushkov, V.M. (1981). 
On formal transformations 
of algorithms. 
Lecture Notes on Computer 
Science, 122, 430~44(Π 
Glushkov, V.M. ,"and V.V.Gusev (1975). Program 
tools for analog-digital system modeling. Nau-
kova Dumka, Kiev. 237 pp. (in Russian). 
Goldina, L.L., I.L. Landau, and G.M. Pogozjanz 
(1981). 
Automated development system of di-
gital devices. Computers in Socialist Countries, 
119, 33-42. (in Russian) . 
C-rigorenko, V.P. (1983). 
Modeling and optimisation 
in computer-aided design systems. In Modeling 
and optimisation of design, Preprints. Tallinn. 
pp. 12-16. (in Russian). 
Jaaksoo, U.J. (1984). 
Computer aided package for 
multivariable control system design, using state 
•variable methods. Mashinostroenie, Moscow, 
40 pp. (in Russian). 
Kondrashin, A.V., a n d V . V . Krutchinin (1981). 
Universal system for computer-aided modeling 
of complex technological processes (UNISAM) . 
In Preprints of the 3rd All-Union conference 
on computer-aided design of automatic and 
automatized process control systems. 
Ivanovo 
Electrotechnical Institute, Ivanovo, pp. 102-
103. (in Russian) . 
Kostin, A.E., V .M.Iljuchenkin, a n d V . F . Schaugin 
( 1984) . The presentation and modeling of pro-
tocols by means of E-nets. In Preprints of the 
9th workshop on computer networks, vol. 1.1, 
Pushchino. pp. 14-19. (in Russian). 
Kukk, V. (1982). System SPADE: Principles of Ope-
ration. 
Transactions of Tallinn Technical Uni--
versity, 535^, 3-17. (in Prussian). 
Landau, I . J . , and G.M. Pogosjanz (1983). 
Hierar-
chical modeling method of modeling digital 
hardware and microprocessor systems. In CAD^ 
and modeling of microprocessor systems. 
Zna-
nie, Moscow, 
pp. 55-60. (in Pvussian) . 
Landau, I . J . , and G.M. Pogosjanz (1984). 
Abstract 
data types for digital hardware modelling lan-
guage construction. 
Proc. of INEUM, 102, 
pp. 17-22. (in Prussian). 
Lobusov, E.S. (1982). 
Using of imitational modeling 
hybrid_ computers and stands for CAD of con-
tron systems. Mashinostroenie, Moscow. 56 pp. 
(in Russian) . 
Malinovski, B.N., A.I. Slobodjanuk, and S.D. Po-
gorely (1982). 
A K580 IK80 based microcom-
puter and debugging system software. USIM, 
3, 30 34. (in Russian). 
Melnikov, A.V. (1981). 
Dialogue system for struc-
tural design of complex control and process 
control systems. In Preprints of the 3rd All-
Union conference on computer-aided design of 
automatic and automatized technological process 
control systems. Ivanovo Electrotechnical Ins-
titute, Ivanovo, 
pp. 153-155. (in Russian) 
Milner, A.D. (1984). 
Linguistic Support of Deve-
lopment System AR.M2-05; Prerequisites, con-
cepts, survey. In Microprocessor programming. 
Tallinn, 
pp. 30-41. (in Prussian) 
Motus, L., and K. Kaaramees (1983). A model 
based design of distributed control systems 
software. In Proceedings of the 4th IFAC 
Workshop on DCCS. Pergamon Press, London. 
pp~T 9 3 -TOT! 
Motus, L., and A. Lomp (1984). 
A tool for specify-
ing distributed computer control system's soft-
ware dynamics. In Preprints of the 9th IFAC 
World Congress, Budapest, vol. 2. pp. 144-
_____ 
Motus, L., and J. Vain (1982). A set of tools for 
designing and evaluating communication proto-
cols in industrial computer networks. 
In Pre-
prints of the 3rd IFAC/IFIP Symposium on 
Software for Computer Control. Madrid. 
pp. 101-109. 
Oihman, E.G., J.V. Novodzenov, and J.V.Zuzin 
(1983). Principles of personal workstations for 
printed circuit boards. Pribory i sistemy up-
ravlenia, 11, 4-6. (in Russian). 
Osipov, B.L., A.Yu. Variash, and A. A .Kurtasov 
(1981). 
Special software for continuous-dis-
crete control system modeling. In Preprints of 
the 3rd All-Union conference on computer-
aided design oi automatic and automatized tec-
hnological process control systems. Ivanovo 
Electrotechnical Insittute, Ivanovo, pp. 93-94. 
(in Russian) . 
Petrenko, A . I . , and A.J. Tetelbaum (1979). Formal 
construction of computer hardware. Sovetskoe 
Radio, Moscow. 256 pp. (in Russian). 
Podtchukaev, V.A., and S.A. Iljin (1983). Dialogue 
system "Escort" for computer-aided synthesis 
of linear control systems. In Elaboration and 
inculcation of automatic and automatized sys-
tems for continuous and continuous-discrete 
technological process control. Ail-Union 

Control Systems in the USSR 
85 
Scientific-Technical Society, Moscow. 
pp.69-V0. (in Russian). 
Pranevicius, K. (1982). 
Models and methods for 
computer system investigation. Mokslas, Vil-
nius. <i.28 pp. Tin Russian). 
Preprint:^ 9th_ All-Uriion Conference on control prob-
lems . T-~983/V~VINITI~~"Moscow". 535 ppTJln' 
"" 
Russian) . 
Preprints. All-Union Conference on computer-aided 
desig~n~~o~f "control systems (198457 VINITf," 
Moscow, 341 pp. (in Russian). 
Ptitchkin, V.A., a n d M . P . Batura (1981). Moment 
equation methods in computer-aided analysis 
of nonlinear control systems. In Preprints of 
the 3rd All-Union conference on computer-
aided design of automatic and automatized tec-
hnological process control systems. Ivanovo 
Ëlectrotechnical Institute, Ivanovo, pp.99. 
(in P.ussian) . 
Quirk, W.J. and R. Gilbert (1977). The formal spe-
cification of the requirements of complex real-
tlrne"systems. Harw"ëlTT~AERE, R-SEöI7~Sl 
pp. 
Raud, R.K., and B.G.Tamm (1982). 
Microcomputer 
programming: Survey. Programmirovanie, 5_, 
31-43. (in Russian). 
~" 
Raud, R.K., and R.L. Smeljanski (1984). 
Cross-
systems. present states, main problems. In 
Preprints of All-Union Conference on industrial 
technology of software development, application 
and management. Sverdlovsk, pp. 250 251. 
(in Russian) . 
Rjabov, G.G..and G.L.Lakshin (1980). Logic level 
modeling in KASPI-EVM. In Computer modeling. 
Znanie, Moscow, pp. 62-66. (in Russian). 
Sadykov, F.R., and G.J. Soloveitchik (1981). 
Dia-
logue system for design of automatic control 
systems (DISPAS) , verse 2.1. In Methodical 
guide for using programs from MAI computer 
centre fund. Moscow Aviation Institute, Moscow 
pp. 17-39. (in Russian). 
Shtrik, A.A. (1984). 
RUZA - a cross-system for 
automated software development for micro- and 
control computers. Microprocessor Devices and 
Systems, 2, 46-49. (in Russian). 
Sivtshov, V . l . , and N.A. Tchulin (1982). Computer 
aided synthesis of control systems using control 
theory (frequency methods). Mashinostroenie, 
Moscow. 56 p p . (in Russian) . 
Smirnov, A.V., and A.D. Malov (1981). Interactive 
system for computer-aided solving of operative 
tasks AVRORA. In Problems of elaboration of 
support tools for computer-aided design sys-
tems. Moscow, pp. 59-69. (in Russian). 
Smirnov, M.V., and T.G. Sazonova (1981). Com-
puter-aided package SPRINT. Subsystem for 
identification. In Preprints of the 3rd All-Union 
conference on computer-aided design of auto-
matic and automatized technological process 
control systems. Ivanovo Ëlectrotechnical Insti-
tute, Ivanovo, pp. 144-146. (in Russian). 
Solodovnikov, V.V., and V.J. Zverev (1984). Using 
of control theory methods and multicriterial con-
trol methods for computer-aided design of tech-
nological process control systems. Mashinostroe-
nie, Moscow. 48 pp. (in Russian). 
Tshvetkov, V.D., A.I. Petrovski, and A.A. Tolka-
tchev (1984). 
Problem-oriented languages for 
computer-aided technological design. Nauka i 
technika, Minsk. 192 pp. (in Russian). 
Zabara, S . S . , and G.J. Verpinski (1983). 
Graphic 
development station. In Computers in design and 
industry. Mashinostroenie, Moscow, pp. 191-
202. (in Russian) . 
Zakharov, G.P., and V.V.Lohmotko (1981). 
Struc-
tural optimisation of data transmission systems 
with packet communication. Council for Cyber-
netics, 
Acad. of Sciences of the USSR, Moscow. 
64 pp. (in Russian). 
Zavjalov, Yu. S., V.A. Skorospelov, V.M. Gamidov, 
N.N. Pavlov, and P.A. Turuk (1983). 
Adaptive 
system ASTRA for geometric information proces-
sing. In T.M.R. Ellis and O.J. Semenkov (Ed.) 
Advances in CAD/CAM. North-Holland Publish-
ing Company, IFIP. pp. 399-407. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INPUT/OUTPUT COMMUNICATION 
INTEGRA, AN INPUT TRANSLATION 
FACILITY FOR COMPUTER AIDED CONTROL 
SYSTEMS ENGINEERING 
S. D. Goodfellow and N. Munro 
Control Systems Centre, UMIST, Manchester M60 1QD, UK 
Abstract . A software tool for input translation called INTEGRA (iNput of TExt 
and GRAphics) is presented. INTEGRA is able to translate a stream of mixed 
graphical and textural input. The acceptable input is defined by the 
applications developer using extended transition networks represented as 
graphs, which are entered and manipulated graphically. INTEGRA provides a means 
of controlling the fine detail and a method of abstracting away from it using 
nested graphs. A variety of interaction tools are supplied to the user 
including macro languages, synonyms, prompting, menus, help, walkthrough, 
tracing, and customising. INTEGRA provides for the future development of expert 
system based adaptive man machine interfaces. 
Keywords. Computer graphics, Computer software, Man-machine systems, Software 
engineering. 
INTRODUCTION 
Computer Aided Control Systems Engineering (CACSE) 
software provides the engineer with a set of tools 
which may be applied to the analysis, design and 
implementation of control systems. The basic 
techniques of CACSE have been well tried and tested 
through two generations of CACSE software. A new 
generation of software is now being developed which 
will significantly improve the engineer's design 
environment. 
The 
engineer 
will 
be 
able 
to 
concentrate on the engineering task rather than the 
detailed application of a particular piece of 
software. 
The working environment provided by CACSE software 
is primarily a function of it's man machine 
interface. To provide the 
appropriate design 
environment a sophisticated man machine interface is 
required, supporting graphical and textural input in 
a consistent manner. The interface will also have to 
be able to adapt to the engineer's experience and 
skill. This paper concentrates on the input aspects 
of the man machine interface, in particular 
an 
input translator tool is described called INTEGRA. 
Interaction Styles 
A wide variety of interaction styles are used in 
conversationally based software. However, there are 
two fundamental modes of operation; selection mode 
and command mode. A software package which uses the 
selection mode of interaction provides a restricted 
selection of input from which the user must choose a 
response. The selection of input may either be 
presented to the user in the form of a menu or a 
question may be asked to which the user responds, in 
the event of an erroneous response the user is 
prompted with the selection available for a correct 
response. A well designed interaction of this type 
will suit the unfamiliar or infrequent user of CACSE 
software, particularly when the functions involved 
require complicated dialogues. 
The skilled user often finds the selection mode of 
operation somewhat pedantic. For him, the command 
mode of interaction offers distinct advantages. A 
package using the command mode of operation allows 
the user to enter any reasonable sequence of 
commands and data at each 
point 
during 
the 
conversation. In this mode the user has to take 
responsibility for the path through the applications 
program. This facilitates the use of more powerful 
and sophisticated CACSE functions. The command mode 
is not easy for unskilled users to operate. Often 
some combination of the selection and command modes 
of interaction will suit a large majority of users 
from unskilled to expert. 
Input Translation 
Input translation code may be either embedded in the 
applications code or implemented as a separate unit 
alongside the applications code, with a specified 
interface to the application. The former is the case 
in most existing conversationally based software. 
Input translation code appears in the applications 
code immediately before the code which requires the 
user response. The UMIST control systems computer 
aided design suite (Munro, 1979) implements a 
selection mode of interaction using 
embedded 
translation code. 
A number of packages exist which provide an input 
translator as a separate unit to be inserted 
alongside the application. These include YACC 
(Johnson, 1975), INTRAC (Wieslander, 1978), GILT 
(CADCentre, 1981), and CANAL (Cartwright, 1984). 
YACC generates a parser from a set of dialogue rules 
specified 
by 
the 
applications 
designer. The 
resulting parser may be used in conjunction with a 
lexical analyser such as one produced using LEX 
(Lesk, 1979) to provide an input translator. A 
similar parser generator was used to create the 
parser for Delight (Nye, 1983). GILT and CANAL use a 
dialogue definition based on extended transition 
networks, a textural description of the networks or 
graphs is specified by the applications designer. A 
fixed lexical analysis is used which can recognise a 
limited number of textural atoms; CANAL's lexical 
CADCES-D 
87 

S. D. Goodfellow and N. Munro 
analyser can also recognise some 
rudimentary 
graphical input. Although neither CANAL nor GILT 
assume a particular mode or format of interaction, 
both are limited by their lexical analysis and basic 
parsers. 
REQUIREMENTS OF AN INPUT TRANSLATOR 
An input translator is a software tool which at 
runtime translates user input into applications 
action lists. A dialogue definition 
describes the 
legal syntax. The translator may support a number of 
interaction tools for the user, such tools are 
hidden from the application. In particular an input 
translator is required which may readily be applied 
by the developers of CACSE software, and provide a 
significantly higher functionality for the man 
machine interface. 
A suitable input translator will :-
Due allowance must be made for issues of portability 
between varieties of machine from single user 
workstations 
to 
large 
multi-user 
systems, 
distributed systems must also be allowed for. 
None of the input translation packages listed above, 
YACC, INTRAC, GILT and CANAL, provide all the 
facilities listed above. CANAL comes the closest to 
meeting our requirements because 
it 
supports 
rudimentary graphical input. However it does not 
meet requirements 2 and 3 or provide the flexibility 
we require. 
INTEGRA 
The authors are currently developing a two pass 
input translator called INTEGRA - INput of TExt and 
GRAphics. Existing input translators are essentially 
three pass translators consisting of lexical 
analysis, syntatic analysis, and semantic analysis. 
The lexical analysis partitions the input sequence 
into atoms·, an atom being the minimal unit of input 
recognised by the syntatic analyser. The syntatic 
analyser parses the input, and the semantic analyser 
carries out the meaning of the input, that is the 
indicated application program actions. 
INTEGRA is a novel two pass parser; the lexical 
analysis is omitted. INTEGRA'S syntatic analysis 
operates with the natural input atoms. The dialogue 
definition schema is simplified because a separate 
lexical analysis definition is not necessary. 
INTEGRA will be described by first specifying the 
dialogue 
definition 
schema, 
followed 
by 
the 
translator whilst introducing further aspects of the 
dialogue definition schema, and finally INTEGRA'S 
interaction tools are specified. 
DIALOGUE DEFINITION SCHEMA 
The dialogue is defined using extended parallel 
transition networks, referred to here as graphs. The 
graphs may be entered, displayed 
and edited 
graphically both at compile time and runtime. The 
presentation of the dialogue definition in a 
graphical form provides a representation which is 
readily understood. The graphs define acceptable 
sequences of input atoms. 
An atom is a minimal chunk of input such as a 
character or a single graphical action. A list of 
typical atoms is given in Table 1. Generic atoms 
are specified when they are placed in a 
graph, 
these include 
SINCHAR - a single specified 
character. The generic atoms LITERAL and LITLET are 
not minimal chunks of typed input, they are 
available to ease the task of specifying literal 
strings of characters. The specific atoms listed in 
Table 1 include all the graphical atoms such as 
LOCATOR -a single pair of coordinates resulting from 
the operation of a pointing device. The graphical 
atoms are closely related to the GKS input devices 
(Hopgood, 1983). Similar atoms could be specified 
for other graphical input environments. 
The atoms used by INTEGRA are too fine for most 
input specification, particularly textural input. 
To aid the specification of input, molecules are 
specified which provide a level of input chunks 
similar to that of output from lexical analysers. 
Molecules are defined by graphs as sequences of 
atoms. These graphs are available to the user so 
that the molecule definition may be changed and 
extra molecules may be added. 
Graphs 
A graph is used to define the acceptable sequences 
1. translate mixed graphical, numerical, 
and textural input. 
Table 1 A list of INTEGRA atoms. 
2. use a dialogue definition schema which 
is 
readily 
understood 
by 
typical 
developers and users of CACSE software. 
3. have a minimum of restrictions on the 
acceptable 
seauences 
of 
input. 
Any 
restrictions must form part of the syntax 
of dialogue definition. 
4. provide a rich variety of interaction 
tools including high level languages, 
menus, prompting, synonyms, help, etc. 
5. readily support existing dialogue 
techniques and interaction styles. 
6. have a well defined interface with the 
applications 
code, which 
allows 
the 
dialogue 
to 
be 
modified 
without 
necessitating 
alteration 
of 
the 
applications code. 
7. provide tools to assist the dialogue 
designer to 
debug 
the dialogue and 
record the use of the dialogue, and hence 
the underlying applications actions. 
Specific 
ANYCHAR 
NOMATCH 
NULL 
LOCATOR 
PICK 
CHOICE 
VALUATOR 
A single specified character 
e.g. A, -, /, 4, a. 
A single specified letter case ignored 
e.g. Aa read A or a. 
A range of characters from the ASCII 
sequence e.g. A-Z, g-j, 0-9. 
A single specified interrupt, probably 
a control character, a range of 
interrupts will be available. 
String of characters specified 
e.g. All modes, 'Aa' the string is 
surrounded in quotes if confusion 
with another atom is possible. 
String of characters specified, 
no discrimination on case. 
Any single character. 
A transition containing the atom is 
followed if there is no matching 
transition from the state. 
The empty string, a transition cont-
aining this is always followed. 
A single pair of co-ordinates 
returned by a pointing device. 
A GKS segment name. 
A choice from a selection. 
A value from an input device other 
than the keyboard. 
Atoms 

INTEGRA 
89 
of atoms. A particular sequence is legal if there 
is a matching path through the relevant graph. 
A 
graph consists of a number of states interconnected 
by transitions. The states are represented by a pair 
of vertical lines and the transitions by a connected 
sequence of horizontal and vertical lines. 
The 
states represent 
points 
in the input 
stream 
immediately before an input atom. 
A transition represents the input atom or atoms 
required to move from the initiating state to the 
receiving state, the two states connected to the 
transition. 
The transition contains a condition 
which may either be an atom or a subgraph. 
A path 
through a graph is a sequence of transitions, the 
initiating state of a transition on the path must be 
the same as the receiving state of the previous 
transition. 
Example 1 
- symbol-
Matching input - LOCATOR LOCATOR line 
LOCATOR LOCATOR arc 
LOCATOR symbol 
Fig. 1 An INTEGRA graph. 
hand edge defines the exit. A condition referencing 
graphs is differentiated from one referencing an 
atom by placing the condition in a rectangular box. 
The graph given in Fig. 1 illustrates the variety of 
acceptable input that even a simple graph may allow. 
The three possible sequences of matching input are 
listed. 
They represent the input required to place 
a line, an arc or a symbol on the screen. 
The 
operator may use a pointing device once, followed by 
typing the text "symbol" to position a symbol on the 
screen. 
Alternatively, the pointer may be operated 
twice, followed by typing either "line" or "arc" to 
position a line or arc on the screen. 
Example 2 
Symbol 
Example 2 
OR— U-LOCATOR-J 
—| Symbol }— 
1ine 
arc 
Fig. 3 The effective insertion of subgraphs 
Symbol 
— x 
Matching input - LOCATOR + 
LOCATOR * 
LOCATOR LOCATOR line 
Fig. 2 A graph containing a subgraph. 
A matching path through a graph is a path for which 
the conditions on each transition are met in correct 
sequence by the input. A condition may be either an 
atom or a graph. An atom condition is met when the 
atom of input following the state matches the 
condition. 
A graph condition is met when the 
sequence of atoms of input following the state form 
a matching path through the graph. 
A graph is 
entered along a transition connected to the left 
hand edge and a transition connected to the right 
Example 3 
Locator 
Locator 
Symbol 
line 
arc 
hj Integer H 
Integer H 
Matching input - LOCATOR LOCATOR arc 
(110,95) (10,231) arc 
Fig. 4 An alternative Locator graph. 
Figure 2 illustrates the graphs Example 2 and 
Symbol. Example 2 is similar to the graph Example 1 
illustrated in Fig. 1, instead of typing "symbol" 
the user may specify which symbol is required from a 
selection of four. The graph uses a subgraph call 
to Symbol to represent the choice of transitions at 
that point. The alternative representation of the 
two graphs given in Fig. 3 illustrates the action of 
a subgraph call. 
The subgraph is - effectively 
inserted at the point of call in the calling graph. 
Subgraphs are particularly useful for reducing the 
complexity of graphs and avoiding repetition. 

90 
S. D. Goodfellow and N. Munro 
Recursion is allowed and is particularly useful for 
expression translation. 
Figure 4 illustrates the use of graphs to provide 
alternative input sequences to produce the same 
results. 
In this case the location of a point on 
the screen may be specified using a pointing device 
or by typing its location. The graph Integer called 
from Locator is a standard molecule. 
Table 2 A list of INTEGRA molecules 
WORD 
TEXT 
FILENAME 
REAL 
DOUBLE 
INTEGER 
COMPLEX 
Any sequence of letters. 
Any sequence of characters, other than 
specified delimiters 
A syntactically correct filename. 
A Real number within language range. 
A double 
precision 
number 
within 
language range. 
An integer number within language range. 
A complex number within language range. 
INTEGER 
Fig. 5 An integer molecule. 
Molecules 
A molecule is a graph which specifies a standard 
form of input. 
A list of INTEGRA molecules is 
given in Table 2. 
The developer and user have 
access to the molecule graphs which may be edited 
and deleted or appended to the list. A typical 
integer molecule graph is illustrated by Fig. 5. The 
integer is defined as an optional sign followed by a 
nonzero digit which may be followed by a sequence of 
digits. 
The receiving state of a transition may be 
any state in the graph, so transitions may be used 
to form loops. The matching path may pass through a 
state or transition more than once. 
Loops are 
normally implemented with an exit condition. In this 
case, the loop is followed until an atom which is 
not a digit is encountered. 
TRANSLATION 
INTEGRA receives the input in a single stream of 
atoms, arranged in the order of initiation. The 
translator passes through the single stream of mixed 
input twice, the translation phase and the action 
phase. The translation phase is concurrent with the 
user's input actions allowing INTEGRA to react 
instantaneously in a conversational manner with 
assistance to the user, in the form of help, 
prompts, menus, etc. Action signals may be specified 
in the dialogue definition at states. When an action 
signal is encountered during translation, the 
translation halts and any remaining input is queued 
for the next translation phase. If the translation 
is not in error the action phase is initiated. 
During the action phase the matching path discovered 
by the translation is followed from beginning to 
end, and the actions specified at transitions or 
states are carried out. 
Translation Phase 
The INTEGRA translator uses the dialogue graphs to 
generate a tree of matching paths. At each state, 
the next atom of input is compared to the conditions 
on the transitions initiated by the state. 
All 
matching transitions are followed by adding the 
transitions to the translation tree. If a state is 
encountered with no matching transition initiated 
from it, the branch ending in the state is lopped 
off at its root. 
The example of a translation tree given in Fig. 6 
illustrates 
the lopping process. 
After the 
translation of the first atom, there is only one 
matching path from state 1 to state 2. 
The 
translation of the second atom finds two matching 
paths from state 1 through state 2 to state 6 
(1,2,6) and from state 1 through state 2 to state 3 
(1,2,3). The third atom must be compared to 
conditions on states initiated from both state 6 and 
state 3, three matching paths are found (1,2,6,8), 
(1,2,6,7), (1,2,3,4). 
The fourth atom does not 
match any transitions initiated at states 7 and 4, 
so the paths to these states are deleted, lopping 
off branches from state 2 to state 4 and state 6 to 
state 7 at their roots. 
A no match at a state 
causes an implicit back-tracking to the most recent 
fork in the tree. 
The fourth atom does match a 
single transition initiated at state 8. 
The 
sequence of atoms "ABC+" has a unique matching path 
(1,2,6,8,5) through the graph Example 4. 
Although 
it is not necessary for the translator to obtain a 
unique matching path, it is recommended 
that 
dialogue designers use the translator in this mode. 
state I 
state? 
state 3 
stated 
state 6 
state 7 
-ANYCHARH + •4-
state 7 
state8 
C H A R J — · 
ANYCHAR 
- state 6 
ANYCHAR 
-state 8 
j 
\ ^ 
\state 7 \ ^ 
\ state L, 
NOMATCH 
NOMATCH 
+ 
state 5 
Fig. 6 A translation tree. 
Parallel graphs are allowed. When they are used the 
input is compared to transitions initiated from the 
current state(s) in each of the parallel graphs. A 
graph may be spawned from an active graph, the 
spawned graph is activated at its first state. 

INTEGRA 
91 
Similarly, an active graph may be deactivated by 
collecting it in another active graph. 
Each state and transition may have a page of 
information associated with it. The page contains 
information used in both the translation and action 
phases. Its schema is illustrated in Fig. 7. 
During the translation, applications actions may be 
carried out. These serve two purposes, to collect 
input data and to check for erroneous input. The 
application translation actions must not alter or 
delete applications data because the translation 
phase may be aborted in the event of an error and 
repeated. 
No 
controlled 
method 
of 
undoing 
translation actions is provided. 
LOG 
ANYCH/5 
NOMAT F 
TRANSLATION INFORMATION 
Translation action list 
Menu Data 
Prompt Data 
Feedback 
Echo 
Error Report 
Help List 
ACTION INFORMATION 
Action Signal 
Action List 
Undo Action List 
Fig. 7 Transition or state information. 
The state or transition information page may contain 
information for menus, prompts, feedback, echoing 
and help. 
The translation 
phase uses 
this 
information to assist the user during his input 
actions. The use of parallel graphs confuses the 
provision of such assistance. The assistance is 
given for the context of the states receiving the 
transition matching the last input atom, unless it 
is specifically indicated that another context 
should be used. 
Action Phase 
The action phase is initiated by the translation 
phase encountering a state with an action signal on 
its information page. 
Conventional interaction 
styles use a return key to signal actions for a line 
of text input. 
The inclusion of a transition 
containing a return character condition received by 
a state containing an action signal will model the 
conventional style. 
The 
action 
phase 
follows 
the matching 
path 
discovered by the translation phase inspecting the 
information page for each state and transition. The 
actions listed on the information page for the 
action phase are carried out. Applications actions 
are listed on the page in one of three ways. A block 
of source code may be entered as an applications 
action. INTEGRA is then responsible for managing and 
calling the block. 
Alternatively, a call to a 
subprogram may be specified. 
INTEGRA is then 
responsible for providing a block of code to carry 
out the call. The third alternative is to provide a 
message which INTEGRA sends to the applications 
subprogram 
ACTION. 
This 
third 
method 
is 
particularly useful because it can readily be 
implemented in a distributed processing environment 
as well as a conventional one. 
The applications actions may send messages to the 
translator which treats them in a similar manner to 
user input. 
This facility is useful for error 
responses and for implementing expert systems. 
In 
the former case it is often useful to provide an 
error recovery dialogue. 
Following an error, the 
message 
from 
the 
application 
will move 
the 
translator to a defined error recovery dialogue 
graph. 
The implementation of expert systems that do not sit 
between the user and the applications program is an 
interesting possibility. 
The specification of 
INTEGRA realises an expert system as a module of the 
package 
that communicates with INTEGRA using 
messages. 
An expert system could be used for 
dialogue management, reacting to a user who is 
floundering by providing more assistance 
and 
steering the dialogue towards a more explanatory 
style. It would also react to an impatient skilled 
user by steering the dialogue towards a more terse 
style. 
Applications expert systems that embody 
heuristical information are an important field of 
research (Taylor, 1984). INTEGRA provides hooks for 
such systems and ensures that the user is always in 
control. The expert systems along with the rest of 
the applications subprograms are subservient and 
dialogue driven. 
DIALOGUE DEVELOPMENT TOOLS 
Dialogue development and maintenance is supported by 
two major tools: tracing and reporting. The tracing 
tool will give the developer a graphical trace of 
the translation process; it is particularly useful 
during debugging and as a learning aid. 
The 
reporting facility will provide the developer with 
feedback on the use of the dialogue and application. 
The reporting facility will collect statistics on 
the use of the dialogue, including 
detailed 
information on the use of sections specified by the 
developer. The occurrence of input errors will be 
recorded, especially errors repeated consecutively. 
To protect the users, the information will be 
anonymous unless the user wishes to reveal himself. 
The user will be able to send messages to the 
reporting facility and switch off the reporting of 
his use of the package if he so wishes. 
This 
facility 
will be extremely 
important 
to the 
development of dialogue styles and applications 
functions, because it provides information that is 
not easily obtained from users directly. 
INTERACTION TOOLS 
Many of the interaction tools, such as help, menus, 
etc., form an integral part of the translation 
phase. The design philosophy of INTEGRA calls for 
tools to be represented as graphs. High level 
languages and synonyms are implemented in this way. 
Walk-through and customising are also introduced. 
A standard high level language will be provided by 
parallel graphs containing the language syntax; 
these graphs will be available at all sensible 
points in the dialogue as well as during the 
creation of macros. A set of primitive actions will 
be present which provide flow control, labelling, 
expression 
evaluation, 
assignment 
and 
macro 
management. 
The 
developer 
may 
create 
an 
alternative high level language using 
graphs 
containing these actions. 
Synonyms are created by the developer and user in 
the form of a graph that recognises a synonymous 
s^ ing and pushes back on to the input the string 

92 
S. D. Goodfellow and N. Munro 
that is recognised by the rest of the dialogue. A 
primitive push back action is provided. 
The walk-through facility will allow the user to try 
out a dialogue without applications actions. The use 
of this facility is limited because, applications 
actions are allowed to steer the dialogue to a 
limited extent. 
Customising gives the user the opportunity to tailor 
the dialogue to suit his preferences. INTEGRA stores 
a file of information for each user, usually on the 
user's own file area. This file contains a history 
of 
the 
user's 
operation 
of 
the 
system 
and 
information about the way the user prefers the 
system to be initialised. 
The file will be 
available to the user and any package executed by 
the user. 
The user may give permission to others, 
particularly the dialogue developers, to access the 
file. The execution of an application using INTEGRA 
will consult the relevant file and customise the 
dialogue to the user's specification. The history 
contained in the file will be particularly useful to 
a dialogue expert system, giving information on the 
areas of dialogue in which the user is skilled or 
unskilled. 
THE APPLICATIONS ENVIRONMENT 
The 
provision 
of 
INTEGRA 
as 
part 
of 
the 
infrastructure 
of a CACSE package has major 
implications for the infrastructure as a whole. The 
organisation 
of 
the 
applications 
code, data 
management and output production are all positively 
affected. 
INTEGRA forces a modular structure on to the 
applications code. Each applications action has a 
block of code which must be relatively independent 
of the remainder of the code. A library of common 
subprograms may also be provided. 
Q 
U S E R 
^ 
it 
LOW LEVEL GRAPHICS 
1 
1 
1 
1 
1 
DORMANT FUNCTIONS 
! 
1 
! 
1 
1 
Fig. 8 An infrastructure. 
The database and data management code must be a 
separate module of the program. 
To obtain a 
realistically user friendly system, the data must be 
directly accessible to the user via INTEGRA by 
object name. 
The facilities provided for input by INTEGRA may 
also be provided for output production. 
Output 
involves the mapping of machine orientated data into 
a user friendly form. A facility for managing the 
mapping of output using graphs in the manner of 
INTEGRA is under development by the Control Systems 
Centre at UMIST. 
The infrastructure described by Goodfellow and Munro 
(1985) provides the sort of environment needed by 
INTEGRA. Figure 8 illustrates the infrastructure 
required. 
CONCLUSIONS 
The present and future needs of the CACSE community 
are not 
fully 
served by any existing 
input 
translator. INTEGRA provides a dialogue definition 
schema that is readily understandable by engineers 
in the community. INTEGRA can be used to implement 
a mixture of common dialogue formats using graphical 
and textural media and it provides the facilities 
needed to develop and experiment with new ideas in 
the dialogue. The interface between INTEGRA and the 
applications programs encourages the development of 
modular programs that may be configured to suit 
distributed systems. 
The needs of the 
CACSE 
community for the input aspect of the man-machine 
interface will be met by INTEGRA for the foreseeable 
future. 
REFERENCES 
CADCentre (1981). The command processor user guide, 
CADCentre, Madingley Road, Cambridge, U.K. 
Cartwright, P., C.W. Taylor (1984). CANAL starter 
guide, PA Management Consultants, Cambridge 
Laboratory, Melbourn, SG8 6DP, U.K. 
Goldberg, A., D. Robson (1983). Smalltalk-80: The 
language and it's implementation, Addison-Wesley. 
Goodfellow, S.D., N. Munro (1985). An integrated 
environment for computer aided control systems 
engineering, 3rd IFAC/lFIP Symposium on computer 
aided design in control and engineering systems, 
Denmark, July 1985. 
Hopgood, F.R.A., D.A. Duce, J.R. Gallop, D.C. 
Sutcliffe (1983). Introduction to the Graphical 
Kernel System (GKS), Academic Press. 
Yet Another Compiler 
Johnson, S.C. (1975). Yacc 
-Compiler. Computer Science Technical Report No. 
32, Bell Laboratories, Murray Hill, New Jersey, USA. 
Lesk, M.E., E. Schmidt (1979). Lex - A lexical 
analyzer generator. 
In UNIX Programmers Manual, vol. 
2B, 7th Edition. Bell Laboratories, Murray Hill, 
New Jersey USA. 
Munro, N. (1979). The UMIST control systems design 
and synthesis suites. IFAC Symposium on Computer 
Aided Design of Control Systems, Zurich, August 
1979. 
Nye, W.T. (1983). Delight: An interactive system 
for optimisation-based engineering design. 
Memorandum No. UCB/ERL/M83/33, Electronics Research 
Laboratory, University of California, Berkeley. 
Taylor, J.H., D.K. Frederick. (1984). Expert system 
concepts for computer aided control engineering. 
Report No. 84CRD127, General Electric Company, 
Corporate Research and Development, Schenectady, New 
York, USA. 
Wieslander, J., H. Elmqvist (1978). INTRACt A com-
munication module for interactive programs; Language 
Manual. CODEN LUTF02/(TFRT-3149)/l-060/(1978), 
Dept. of Automatic Control, Lund Institute of 
Technology, Lund, Sweden. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN AND 
VALIDATION OF INTERACTIVE IMAGES FOR 
A PROCESS CONTROL SYSTEM: AN 
INTEGRATED, DATA-BASE FOUNDED 
APPROACH 
B. Heilbronn and D. Pichot 
Electricité de France, Direction des Etudes et Recherches, 78400 Chatou, France 
Abstract. The conception of the graphie, interactive images used in the computerized 
control rooms cannot be separated from the whole set of data describing the process 
itself and its control system. We have then chosen to integrate, inside a general 
purpose, not specialized data base, an interactive image design system. The software, 
including the graphic code generation, is realized in the DBMS data manipulation 
language itself. 
Such an approach improves the data consistency checking at all the stages of 
conception ; moreover, it leads to a more flexible system, as the specifications 
(representations and interactivity of the different types of objects) can be stored 
as data in the data-base and easily modified by the designer. The same data-base, 
used for the CAD system, can also be used for certain kinds of simulations, and later 
to generate configuration data for the real-time system. The use of general-purpose 
DBMS in CAD systems leads to very flexible tools and is not restricted to interactive 
image design applications. 
Keywords. Computer-aided design ; computer graphics 
systems ; nuclear plants ; process control. 
data-base 
man-machine 
INTRODUCTION 
In the conventional control rooms, the various 
informations and means of actions given to the 
operators are, schematically speaking, dedicated 
to separate control-room equipments. They are then 
available at any moment, but scattered on a large 
area and difficult to relate to each other. 
The use of computers allows to regroup on graphic 
displays the informations and means of action that 
the operators need at a given moment. In the 
French power plant control room "S3C" project 
(Guesnier, 1983), to the specifications of which 
the CAD system described here is related, various 
kinds of graphic interactive images are used : 
plant 
circuits 
representations 
for 
actuators 
operation, regulation diagrams, plant functions or 
situations characteristic values following up, 
various aids to the operators,... 
The interactive images become the main medium 
given to the operators to know the state of the 
process and perform actions on it. In a nuclear 
power plant control system, hundreds of such 
images are used ; moreover, new images or existing 
images modifications are likely to be needed in 
the life time of the power plant : a CAD system is 
really necessary. 
These images have no signification by themselves : 
they are a part of a whole, the control system, 
extending 
from 
the 
process 
instrumentation 
(sensors, actuators) to the operator himself. This 
general unity must be taken into consideration 
since the conception phases. For that reason, we 
have chosen not to use a specialized CAD system 
with a graphic oriented data-base, but to realize 
such a system completely integrated in a general-
purpose data-base management system. There is then 
no separation between 
the interactive 
images 
description and other data of the project. 
BASIC PRINCIPLES 
Images and Objects 
Besides the fixed graphical elements (such as 
pipes or other links, fixed texts, etc...), an 
interactive 
image 
is 
composed 
of 
graphical 
representations of different types of objects : 
these objects may be directly related to the 
process itself (sensors, actuators such as pumps, 
valves,...) 
or 
more 
elaborated 
(validated 
measurements, graphs, functional representations 
of plant subsystems etc...). In any case, an 
internal representation of each of them will have 
to be processed in the control system computers. 
Four Types of Data 
For image conception, we will consider that the 
graphical representation of the objects in the 
images are in fact the result of four types of 
data, each of them being elaborated at a different 
phase of the project : 
- the objects fixed descriptions : type, name 
and other associated texts, links with other 
objects, links with the process low-level 
control system,... These data are used, not 
only for the graphical images, but for the 
whole control system design. 
- the objects state or analogic variables : 
their values have a sense only 
in the 
real-time system, and default values are given 
in the design phases ; they may be changed, 
however, for 
simulation 
and 
verification 
purposes. 
- a limited number of normalized parameters 
specifying the representation of a given 
object in a given image : size, orientation, 
colour, position. 
93 

94 
B. Heilbronn and D. Pichot 
- specification data, describing the possible 
graphical representations of each type of 
object, the way they depend on the variables, 
the authorized sizes and orientations, etc... 
The image CAD system manages these four types of 
data 
in 
the 
same 
data-base. 
During 
image 
conception, the objects description data and the 
graphical representations specification data are 
known by the system ; only a few parameters are 
asked 
to 
the 
designer 
for 
each 
object 
representation, 
their 
consistency 
with 
the 
specifications 
is immediately 
checked, and 
a 
standardized 
graphical 
representation 
is 
generated. 
BASIC SOFWARE IMPLEMENTS 
The Data-Base Management System 
We wanted it to be a general-purpose, well tried 
and portable DBMS, able to take into account the 
rather complex structure of the different types of 
data. We have chosen to use SOCRATE-CLIO (SYSECA, 
1984), 
a 
network-type 
DBMS 
providing 
large 
capacities of data structuration in terms of 
entities 
and 
relations ; two main 
types 
of 
relations may be used between entities : the first 
one is based on entity imbrication (hierarchy) 
with a finite 1-to-n cardinality, and the other 
one, using chaining mechanisms, achieves infinite 
1-to-n 
relation 
with 
no 
limitation 
at 
all 
(Fig. 1). 
*n 
infinite 
1-to-n 
relation 
1 11 
p V1 
JÛ 
entity 
Fig. 1 : example of relations in a Clio 
data-base 
A 
structure 
definition 
language 
is used 
to 
describe 
the 
entities 
characteristics 
and 
relations. The Data Manipulation Language is also 
a part of the DBMS ; the same language is used to 
read and update the data ; it is a high-level 
language, with advanced control structures and 
rather natural formulations using directly the 
characteristics and relations identifiers declared 
in the structure description. 
This language can be used directly to consult or 
update 
the 
data-base, 
or 
as 
a 
programming 
language : a software realization is then a set of 
macros or compiled programs, written in that 
language and stored by the DBMS in the data-base 
itself. 
The Graphic basic Software 
The graphic code generated by the data-base is an 
intermediate-level, 
terminal-indépendant 
code 
called INTGR, which has been defined by EDF inside 
the LGIVD (graphic industrial software for display 
and dialog) system (Beaucourt and others, 1980). 
In the real-time environment, this code is 
generated by application modules but, in the CAD 
system, it is directly generated by the data-base 
(Fig. Z). 
use in 
a real-time 
system 
APPLICATION 
MODULES i 
/ 
/ 
use for 
the CAD 
system 
- " 
^ ^ 
INTGR code 
1 " 
w 
(terminal 
T 
indépendant) X 
Interpretation 
software adapted 
to terminal type 
CAD System] 
Data-Base 
GRAPHIC 
TERMINAL 
Fig. 2 
Intermediate Graphic Code generation 
and interpretation 
The images are organized into two levels of 
decomposition : segments and subsegments. An INTGR 
image generation or animation list consists of a 
succession of orders of segment creation or 
suppression, subsegment replacement in a segment, 
position or colour modification, etc... 
A basic interpretation software, adapted to each 
type of graphic terminal, stores the segment 
descriptions, interprètes the INTGR orders and 
generates the terminal low level graphic code. It 
also interprètes the operator1s actions and sends 
the corresponding messages to the upper levels. 
An image generated by the CAD system will have the 
same structure as a real-time interactive image, 
with 
all 
the 
designation 
and 
modification 
possibilities. Simulation 
functions 
can 
then 
easily be implemented in the CAD system. 
THE DATA-BASE STRUCTURE 
The Graphic Specification data Structure 
These data include the definition of graphic 
representations, size and orientation parameters, 
and graphic class decomposition. 
Graphic representations. If we take the example of 
the motor-drive valve representation specified in 
the project (Fig. 3 ) , we notice that it leads to a 
decomposition into three parts : a fixed part (the 
motor-drive representation), another one (the 
valve "body" representation) whose shape depends 
on the value of a state variable, and a third part 
(the valve name) whose aspect (here the colour) 
depends on the value of another state variable. 

Design and Validation of Interactive Images 
95 
C^KT 
, Valve motor-drive 
Fixed representation 
Valve "body" 
003VL / 
Identification 
X 
closed 
t>^ intermediate 
Fig. 3 : a Motor-drive Valve Representation 
In the INTGR graphic code, each of these parts 
will be represented as a subsegment (it must be 
changed if the corresponding state variable value 
changes), and the whole representation will be a 
segment. 
This 
decomposition 
and 
state 
variable 
value 
dependence finds its expression in the data-base 
structure (Fig. 4 ) . 
[STATE VALUE 
ASPECT 
1 
1^ 
GRAPHIC 
ELEMENT 
| 1 
1 n 
INDIVIDUAL 
DRAWING ITEM 
STATE VALUE 
SHAPE 
j ^ n 
\ 
elementary 
1 
shape 
f 
definition 
) 
Fig. 4 : Graphic Representation Structure 
Elementary shapes are defined in the data-base by 
entities called "graphic element", each of them 
being 
related 
to 
an 
unlimited 
number 
of 
"individual drawing item" entities. If a graphic 
subsegment has a fixed shape, the corresponding 
entity 
realization 
is directly 
related 
to a 
"graphic element". In the other case, the state 
dependence is expressed by an imbricated entity 
"state value shape", with one realization for each 
possible value of the considered state variable, 
each one having a relation with a "graphic 
element". These relations are n-to-1, for the same 
elementary 
shape 
definition 
may 
be 
used 
in 
different graphic representations (for instance, 
the same valve "body" elementary shapes may be 
used 
in a motor-drive 
or a pneumatic valve 
representation). 
Size and orientation parameters. Specific entities 
are used to represent the allowed sizes and 
orientations for a given representation, and the 
associated 
parameters : 
number, 
x-scale 
and 
y-scale for size, mnemonic, rotation and symetry 
for orientation, and other parameters defining the 
object name possible places on the representation, 
the mask used for designation, etc... The same 
specification 
may 
be 
shared 
by 
several 
representations : this is expressed by a 1-to-n 
relation. 
Graphic class decomposition is represented by a 
hierarchichal part of the data-base structure 
(Fig. 5 ) . For instance, the class "valve" divides 
into "two-way valves" and "three-way valves" 
subclasses, each of them having several types 
(manual, motor-drive, pneumatic...). For each 
type, a limited number of representations are 
allowed, each of them pointing to a graphic 
representation definition by a n-to-1 relation. 
GRAPHIC 
CLASS 
1 
1 \ 
20 
| 
SUBCLASS 
1 
20 
| 
TYPE 
1 
5 
TYPE 
REPRESENTATION 
V 
STATE VARIABLE 
DEFINITION 
1 
10 
VALUE DEFINITION 
towards 
GRAPHIC 
REPRESENTATION 
Fig. 5 : Graphic Class Decomposition 
A graphic class definition also includes the state 
variables definitions 
(name, possible values, 
default value...). The same state variables are 
used by all the graphic representations associated 
to a given graphic class. 
The Image Description Structure 
The objects fixed descriptions (including the 
identification of their graphic class, subclass 
and type) are stored in an entity "object" of the 
data-base. As an object may be represented in 
several images, there is a m-to-n relation between 
"object" and "image", expressed by two 1-to-n 
relations and an intermadiate entity "object-
in-image" (Fig. 6 ) . There is one realization of 
that entity for each object representation in a 
given image, or for each image where a given 
object 
is 
represented. 
The 
corresponding 
parameters (size, orientation, position, colour) 
are stored in it, as well as the corresponding 
graphic segment identification name and a relation 
to the "graphic representation" used for it. 
OBJECT 
OBJECT-
IN-IMAGE 
towards 
GRAPHIC CLASS 
IMAGE 
towards 
GRAPHIC 
REPRESENTATION 
relations with 
other elements 
Fig. 6 : Image Description Structure 
The complete description of an image also includes 
other elements, such as links (pipes,...) or fixed 
texts. 
All that part of the structure corresponds to 
application 
data, 
updated 
during 
object 
description or image 
construction/modification 
phases. There is always a strict matching between 
an 
image 
graphical 
aspect 
and 
its 
logical 
description in the data base. 
CADCES-D* 

96 
B. Heilbronn and D. Pichot 
THE CAD SYSTEM FUNCTIONS AND IMPLEMENTATION 
Main Functions 
Image design. A set of conversational programs are 
used for image design. The designer may add, 
modify 
or suppress any element 
in an image 
(objects representations, link drawings, fixed 
texts, fixed graphic elements). The design process 
is 
interactive, with 
objects 
designation 
or 
coordinates plotting on the graphic terminal, and 
immediate 
display 
of 
the 
added 
or 
modified 
representations. 
The graphic INTGR lists are stored in the data-
base ; they may be directly used for quick image 
display ; from the image logical description, it 
is also possible to re-generate the corresponding 
graphic lists : this is particularly useful after 
a specification data modification. 
The objects descriptions must be loaded into the 
data-base before the image design : this is often 
made in a "batch" way, from external files. 
Logical descriptions of images may also be loaded 
in that way ; in that case, the "regeneration" 
program 
is 
used 
to 
create 
and 
store 
the 
corresponding graphic lists and the images can be 
interactively modified. 
Specification data editing. The graphic classes, 
graphic 
representations 
and 
size/orientation 
parameters sets may be created or modified by 
conversational programs. The graphic elements can 
be created interactively (on the graphic terminal) 
and modified in a conversational way. 
A hierarchichal structure of menus is used to 
guide the designer in specification data editing 
as 
well 
as 
in 
image 
design. 
The 
logical 
description of each part of the specification data 
can be listed individually or globally. 
Data verification. A first error detection test is 
made at the data loading phase (with error reports 
in batch mode and wrong parameters re-asking in 
conversational mode). The system structure itself 
ensures a good consistency level, for instance it 
is impossible to have a mismatch between an object 
graphic representation and the object type. Global 
verification programs are however necessary to 
test the whole data consistency and completeness, 
for instance to check that every object is at 
least represented in one image. Owing to the 
data-base structure, such verification programs 
are very easy to realize. 
Sofware Implementation 
The data-base programs must be able, from image 
descriptions and specification data, to write the 
corresponding INTGR lists in a memory buffer. 
Buffer reading and writing mechanisms exist in the 
Socrate-Clio DBMS, but only in a fixed format 
mode. A limited number of specific non-standard 
programs have been realized to allow sequential 
writing in buffers. These programs are used by a 
first level of Socrate macros realizing graphic 
primitives (vector, move, circle, fill,...) and 
segment or subsegment headings. Upper levels are 
graphic items interpretation, graphic subsegment 
and graphic representation generation programs. In 
image design mode, this latter program is called 
by 
a 
conversational 
program 
which 
asks 
the 
necessary parameters to the designer, accesses the 
proper 
specification 
data 
to 
know 
the 
representation structure and some parameters used 
in graphic generation (scale numbers, rotation 
matrix,...), 
and 
updates 
the 
images 
logical 
description in the data-base. 
The whole sofware extent is about 15 000 lines of 
Socrate-Clio source code including about 9 000 
lines for image design, 5 000 for specification 
data, and about 1 500 lines for the data-base 
structure definition. 
Hardware Implementation 
In the existing realization, the data-base is 
supported by a 16 bit Bull Sems Solar minicomputer 
with a multifunction (time sharing, real-time and 
batch) executive system. The graphic terminal is a 
1024 x 1024 TV scanning "Aydin Controls" terminal, 
with a multiprocessor (2 Intel 8086) architecture. 
The basic graphic software used to interprète the 
INTGR lists has been implemented on that terminal 
for real-time projects, and was then available for 
the CAD system. 
The data-basetruns on the time-sharing function of 
the computer (the CAD system is itself multi-
user) , and activates real-time communication tasks 
(developped for the real-time projects) to send 
the graphic lists to the terminal, or to receive 
messages from it. 
The dialog with the designer is made on an 
alphanumeric terminal connected to the data-base, 
and with 
designation 
means 
on 
the 
graphic 
terminal. 
The system portability is related to that of the 
Socrate-Clio DBMS. Only the specific buffer-
writing 
and 
communication 
programs 
must 
be 
re-written 
for 
each 
computer. 
An 
INTGR 
interpretation basic sofware must exist on the 
host computer (adapted to the graphic terminal) or 
directly on the terminal itself. Its portability 
could be made easier by a GKS-compatibility 
development. 
CONCLUSION 
The use of a general-purpose data-base as the main 
part of a graphic interactive image CAD system was 
at first motivated by the necessity of an open 
system, allowing cross-verifications on a great 
variety of data. The integration of the main part 
of the realization inside the data-base itself, 
including complex specification data, shows that 
existing network-type DBMS are well-adapted to 
rather complex industrial problems. It would be 
interesting, 
however, 
to 
estimate 
what 
the 
solution would have been with a relational DBMS, 
or with the functions of future "generalized" 
DBMS. 
The interactive structure of images generated by 
the CAD system described in this article makes 
them ready-to-use for simulation functions. Such a 
function has effectively been realized, on the 
same data-base, to simulate the access mechanisms 
to images and operations provided for the control 
room. This shows that the general philosophy, on 
which the present CAD system is grounded, is not 
limited to interactive image design and could be 
applied to many other fields. 
REFERENCES 
Beaucourt, D., E. Delalleau, B. Henry, Y. Lelous, 
F. Venard (1980). LGIVD : Logiciel Graphique 
Industriel de Visualisation et de Dialogue. 
Congrès AFCET, Nancy, 24-27/11/1980 
Hommes et Techniques, 1980, 655-664. 
Guesnier, G. (1983). Etudes de Salle de Commande 
et de Contrôle-Commande du projet N4 (S3C) : 
présentation générale. EDF internai 
documentation. 
SYSECA (1984). CLIO Overview. Groupe SYSECA. 
Saint-Cloud - FRANCE 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A FLEXIBLE DATA INTERPRETER FOR 
COMPUTER AIDED DESIGN AND 
SIMULATION OF DYNAMICS SYSTEMS 
R. A. King and J. O. Gray 
Department of Electronic and Electrical Engineering, 
University of Salford, 
Salford M5 4WT, 
UK 
Abstract. A general purpose graphics based man-machine computer interface is described 
with particular reference to its use in the design of control systems and the simulation 
of dynamical systems. The software requirements for such an interface are outlined and 
the structure of a real time graphics operating system (ARGOS) which meets these 
requirements is discussed. The operating system allows complex interconnected linear and 
nonlinear systems to be described in simple diagrammatic form for direct interpretation 
by existing algorithms for analysis in both the time and frequency domain. The graphics 
input procedures are applicable to a number of existing computer aided design packages. 
Keywords. Computer aided design; man-machine systems; graphical data interpreter. 
INTRODUCTION 
This paper is concerned with an outline of some 
recent work on the development of a flexible 
graphics based input interpreter for computer 
aided control systems design and system simulation 
packages. A typical design suite has the modular 
structure shown in Fig. 1, where data concerning 
system configuration and system parameters are 
entered via a keyboard, according to well defined 
syntactical rules which require a rigid adherence 
for correct interpretation by the algorithms 
resident in the various analysis and design 
modules. Increasingly, however, emphasis is 
placed on the creation of more anthromorphic user 
interfaces and, in an engineering context, the use 
of graphical or scratch pad methods for data input 
is a natural development which is now aided by the 
availability of powerful, modern terminal 
hardware. As an example a feedback configuration 
such as that shown in Fig. 2 can be assembled on 
screen from a menu of block primitives and, using 
cursor control in conjunction with a suitable 
graphics data base, changes in individual elements 
or system topography can be easily made. 
The interesting problem is, of course, that of 
interpretation so that suitably formatted data can 
be supplied to the existing algorithms for the 
generation of responses in the time or frequency 
domain, and the dimension of this problem depends 
on the degree of flexibility required in the 
definition of the set of graphics symbols used. It 
may be desirable, for example in Fig. 2, to 
represent the separable nonlinear elements in a 
variety of forms such as a polynomial or a 
piecewise linear approximant while the linear 
elements may be transfer functions (derived 
directly or inferred from ω domain plots) or 
alternatively sets of transition matrices. Some 
systems may not be amenable to a simple 
decomposition into separable linear and nonlinear 
elements as shown and a more natural 
representation might be a set of nonlinear 
differential equations, each equation or subset of 
equations being associated with a particular 
component of the overall configuration. Indeed 
some existing simulation routines require just 
such an interpretation. An additional requirement 
will almost certainly be the representation of 
systems such as that shown in Fig. 3, which 
contain both continuous and discrete signals. 
In general what is needed is a software structure 
which implicitly links user interface operation 
with algorithmic functions and which allows a wide 
degree of freedom in the choice of system 
description. Such a structure must incorporate 
both syntactical and semantic checks to ensure a 
correct interpretation for each system description 
and yet present a modus operandi which is both 
simple and intuitively obvious in use. The 
overall requirements for a graphics based input 
interpreter are considered here and a real time 
graphics operating system (ARGOS) is proposed 
which can create a software environment to meet 
such requirements. The paper represents an 
extension of earlier developments [1][2] which are 
associated with a comprehensive design suite for 
nonlinear feedback systems [3][4], 
REQUIREMENTS FOR A GRAPHICAL INPUT INTERPRETER 
A natural way of describing complex interconnected 
dynamical configurations is to use diagrammatical 
representation which allows a large amount of 
information to be compressed into a structure 
which is indicative of the functional form of the 
original system. Branching and other topological 
relationships such as parallelism can be more 
easily represented than by using formal written 
syntax and historically this was (inter alia) one 
of the attractions of analogue simulation 
procedures. In hardware terms computer 
realisation of diagrammatic format can be realised 
by using a digitiser or tracker ball device in 
conjunction with a screen and keyboard. For 
useful development an associated software 
structure must be designed which is capable of 
creating, displaying, manipulating and 
interpreting this format. Each diagram can be 
constructed from a menu of symbols which, in turn, 
can be derived from a set of graphics primitives. 
Such primitives and their constructs need a 
comprehensive graphics data base both for creation 
and storage and this base must be common to all 
the facilities at a number of different levels. 
Thus it must be possible to address a group of 
graphics files without regard to their content or 
call up a symbol irrespective of its size or 
complexity. 
97 

98 
R. A. King and J. O. Gray 
Each graphical symbol can imply a dynamical 
function which is more or less complex. To enable 
a symbol to represent a function, translaters will 
have to be devised to translate it into a 
computable operation. Analysis will have to be 
performed in terms of syntactical and semantic 
rules which relate specifically to a graphics 
environment to produce a mathematical description 
of the symbol which is relevant to the programmed 
algorithms. Separate interpreters will have to be 
developed to meet a range of input requirements. 
Different dialects will have to be identified and 
appropriate rules formulated. Such interpreters 
will however share the same fundamental data 
types and many of the same syntactical rules. 
Interpreters should be able to exchange data in a 
similar way in which Fortran and Pascal programs 
can be combined in many operating systems. 
Software structures will have to be devised which 
are parallel to those used in language compilers 
with expansions to cope with an essentially 
graphical environment. 
One of the most important aspects of a graphics 
based environment will be the use of the position 
of a symbol within a diagram to imply function and 
connectivity relationships. The latter must be 
clearly and unambiguously identified by a specific 
nodal interpreter, or nodal system with clearly 
defined rules for acceptable relationships and 
which has a direct analogy to the use of blocks 
and labels in conventional computer languages. 
Such a nodal system will constitute a framework in 
which the syntax of a graphical structure can be 
developed. In the absence of the linear structure 
of a text file on which a syntax can be 
superimposed, an equivalent graphics form must 
have inherent ordering so that rules can be 
applied. 
Such software structures will require an efficient 
file management system to handle the large amounts 
of data being processed and it is important that 
adequate help, information and error recovery 
routines are developed to complement the special 
requirements of a graphical environment. Such 
routines must aid the user and protect against 
system failure. As the overall software system is 
considered to be a development environment both 
help and error facilities must be capable of 
evolving with design requirements. 
A general purpose controller for creating pictures 
at a terminal from the data base description must 
be developed. Ideally this should be both 
processor and terminal independent and capable of 
taking advantage of the full range of facilities 
available on more sophisticated terminals. Within 
a graphics environment it is possible to imbed 
many levels of complexity and interpretation 
within the same diagram and the use of a range of 
colours is an example of how this may be achieved. 
Various levels may operate in parallel and thus 
any operating system should be capable of 
supporting parallelism both within the data base 
and in system interpretation. Such parallel 
processes can be identified by the principle of 
levels and each process must be capable of 
intercommunication and synchronising - in a system 
sense - coordinate actions. Such a concept should 
be independent of the machine's ability to operate 
in parallel and the software system outlined here 
has been designed to run on a single processor. 
ARGOS - A GRAPHICAL OPERATING SYSTEM 
The basic requirements outlined above have been 
incorporated into a real time graphical operating 
system now being developed at Salford University. 
A general structural diagram of the operating 
system is given in Fig. 4. The sequence of 
operations performed is analogous to that 
associated with the compilation and construction 
of a conventional text file except that the file 
is created using the graphics editor and 
represents the system in esentially diagrammatic 
form. The file is then entered into the 
interpreter process which consists of various 
stages of nodal interpretation, syntax and 
semantic tests, interpretation for a particular 
algorithm, numerical operation and finally 
presentation of the results in a specified format. 
Some of the routines are described in more detail 
below. 
Nodal interpreter 
This stage is required to convert the graphics 
file into a sequence of interlinked and analysable 
stages. The graphical language uses position to 
establish the operations, interconnections and 
relationships. This removes any requirement for 
element labelling. 
The nodal interpreter is 
required to analyse the picture with relation to 
these positions and create a graph type map of the 
inter-relationships. This is required to replace 
the inherent relationships that would be exhibited 
by a text file's linear organisation. The nodes 
are key positions in the graphical language which 
are sought out by the interpreter. The 
inter-relationships and connections of the nodes 
are identified and stored in a separate 
data-structure, the node data base. 
Node data base 
Associated with the Nodal Interpreter is the 
data-base of node positions and inter-connections. 
This structure is the equivalent of the linear 
organisation of syntax elements in a conventional 
language syntax. This data structure is used as 
the basis for the syntactical, semantic and 
interpreter analyses of a symbol. The position 
information will be required to identify 
appropriate help and error messages with respect 
to the parts of the symbol. All the stages of the 
interpretation can call on the node data as 
required to develop the analysis. 
Syntax tests 
Graphical syntax rules will be required in a form 
suitable for both the graphical and the ordinary 
programming environment. The syntactical 
structure of a symbol is the equivalent of a 
syntax of an ordinary language. It is used to 
identify the phrasing of the description into the 
graphical equivalents of sentences made up of the 
graphical equivalents of nouns, verbs etc and 
their ordering. Using the node data-base the 
syntax tester will identify that the symbol is 
made of appropriate syntax elements. These should 
also be arranged in a manner that obeys the laws 
of the syntax structuring. 
Semantic tests 
Allied to the syntax rules will be the semantic 
rules for actually interpreting the graphical 
programs. After the syntax of a symbol has been 
tested and proved correct, it must be tested for 
meaning. The semantic tests identify that a 
syntactically correct statement has a 
comprehensible form. These tests will be 
apropriate for the task being analysed and the 
limitations of the numerical package being used. 
Interpreters 
The conversion of syntax and semantic forms to 
applications language format is achieved by the 
interpreter. This is equivalent to the machine 
code of the graphical language. All the dialects 

Flexible Data Interpreter 
99 
of syntax and semantics will ultimately be 
translated into instructions at this level. The 
translations will be into a form that can be 
transferred to the numerical problem module for 
processing. 
It is possible that different numerical processes 
require varying data formats for correct operation 
and thus a structure with multiple interpreters as 
shown in Fig. 5 may have to be devised. It may 
ultimately be more convenient to devise a general 
purpose intermediate language to enable the 
framework shown in Fig. 5 to be optimally designed 
so that a range of numerical process or 
algorithmic modules can be serviced. An analogous 
concept is the use of the P code pseudo machine 
language used by many PASCAL compilers in 
conventional computation. A translator between 
the intermediate language and each target 
numerical process will have to be developed but 
this will be easier to accomplish than the 
development of a complete interpreter for each 
numerical process. 
It is perhaps important to note that an 
intermediate language of this type would also 
greatly reduce the effort involved in attaching 
the graphics input interpreter to a range of 
software packages now available from university 
and commercial sources and widen the applicability 
of the procedures described. 
Numerical processes and graphical output 
These modules form part of the conventional design 
suite architecture and except for the generation 
of error and help signals to the appropriate data 
busses do not react with the input environment 
once data has been accepted from the interpreter 
module. 
handling data associated with complex 
interconnected configurations and is a development 
which parallels the availability of relatively 
inexpensive graphics peripherals. Using colour 
variations and scrolling techniques a high degree 
of system complexity can be accommodated while 
still maintaining clarity of presentation. 
As indicated above the graphical input interpreter 
was developed for use with control systems 
analysis and design software available at Salford 
University. However the procedures could be 
applied to any other existing or proposed design 
suite for dynamical systems and the intermediate 
language now being developed will simplify the 
task of linking with alternative algorithms. 
A graphical operating system of this type is not 
necessarily restricted in use to the 
interpretation of dynamical system performance in 
either the time or frequency domain and could have 
applications to any engineering, economic or 
planning strategy in which graphical 
representation is a useful, efficient and obvious 
medium for data input. 
CONCLUSIONS 
The requirements for a graphical input interpreter 
suitable for use with interconnected dynamical 
systems representation have been met by the 
development of a graphical operating system. Quite 
complex configurations can be represented with the 
present limit being determined by the available 
algorithms for analysis and design. Although the 
requirements were relatively easy to define, the 
realisation, even to the present stage of 
development has proved to be a non trivial 
exercise and has involved a range of expertise 
associated with graphical and algorithmic software 
development, control systems design and simulation 
studies. 
HARDWARE REQUIREMENTS 
Software development has been based on a virtual 
machine and terminal concept and written in 
PASCAL. This ensures a high degree of hardware 
independence and ease of transportability across a 
wide range of machines and terminal types. The 
approach has required the development of a 
terminal independent graphics kernel which can 
utilise a range of devices from simple terminals 
to intelligent workstations with local memory and 
segmentation facilities. There are similarities 
with the recently defined GKS concept [5] but with 
enhancements to segmentation to include data base 
support by the host computer. 
The software has been developed using a 
Tektronix/PRIME 550 combination and is currently 
being transferred to the Control Group's DEC VAX 
11/750 machine with a view to ultimately hosting 
the software on a portable MICROVAX for 
demonstration purposes. 
EVALUATION AND REQUIREMENTS 
This work evolved through discussions with 
industrial colleagues and the realisation that a 
wide application of the analysis and design 
techniques developed within the university 
required data input and data manipulation 
procedures which were more readily usable in an 
industrial design environment. Clearly engineers 
will be attracted to design aids which are readily 
available in a standard format, simple to use, 
robust in operation, widely applicable and 
extendable to meet new design requirements. For 
many, (but by no means all) systems a graphics 
format provides an intuitively powerful medium for 
REFERENCES 
1. Gray, J.O. 
(1984). Nonlinear Feedback System 
Design. An Integrated Approach. Proc. 
Inst. M.C. Workshop on Computer Aided 
Design of Control Systems. University of 
Sussex. Sept., 39-47. 
2. King, R.A. and Gray, J.O. 
(1984). A Graphical 
Man/Machine Interface for CAD and the 
simulation of Dynamical Systems. Proc. 
6th IEE Conf. on Electrotechnlcs, 
Brighton. Sept., 42-46. 
3. Gray, J.O. and Brown, L.S. (1984). A Computer 
Aided Design Suite for the analysis and 
design of nonlinear control systems. 
Trans. Inst. M.C.. 
Vol.6, No.l, 13-25. 
4. Gray, J.O. and Nakhla, N.B. (1981). The 
Prediction of Limit Cycles in 
Multivariable Nonlinear Control Systems. 
Proc. IEE, 
Vol.128, Pt.D No.5, 
September, 233-241. 
5. Hopgood, F.R. et al 
(1983). Introduction to 
the Graphics Kernel System. 
Academic 
Press. 

100 
R. A. King and J. O. Gray 
L 
Φ 
FREQUENCYl 
DOMAIN 
ANALYSIS 
DESIGN 1 
INTERPRETER 
, 0 
SUPERVISOR 
< 
A 
Φ 
1 SYSTEM 
SIMULATION 
Ψ 
TIME 
DOMAIN 
SYNTHESIS 
GRAPHICAL DISPLAY PROGRAM 
1 
> 
USER 
INTERFACE 
HARDWARE 
Fig. 1 Integrated Design Suite General Structure 
ACTIVE 
SYMBOL 
M ACTIVE LEVEL 
< MEDIUM ? 
-îè-r-tS 
TEXT(H) 
TEXT(S) 
ENQTEXT 
MENU 
MO_BA 
RE-DP 
REP 
HELP 
QUIT 
REFP 
■ 2/2 
UP 00 
LE RI 
ZO PA 
I I . SC 
IDE.OP 
EDIT 
HO CE 
CO.AC 
N Ç H E 
ADD 
SUB 
ACT 
[-»JN(q)| 
o 
- # -
-Jf-
Fig. 2. Typical System Block Diagram Representation 
ACTIVE SYMBOL 
6 ACTIVE LEVEL 
0 MEDIUM ? 
T-1.5S 
H Ü 3 — < 8 > - * 
hEXTJS) 
END TEXT 
WËNU 
M)_BA 
PE.DP 
»EP 
[HELP 
OUÏT 
[REFF 
FP 
2/2 
ZO.PA 
LI.SC 
DE OP 
EDIT 
E« CE 
CO. AC 
NE_HE 
fÄlt-
ADD 
SUB 
,SYM" 
IFIELD 
O 
oo-o 
|Zero order 
hold sampler 
CKÏHO 
Input signal 
p-ÜHO 
(Transfer (unction 
Gor H 
|ΟΘΟ 
Non linearity 
Fig. 3. System Signal Flow Graph 

Flexible Data Interpreter 
101 
GRAPHICS 
EDITOR 
NODE 
DATA 
BASE U 
LA—I 
NODAL 
F ^ 
INTERPRETER 
SYNTAX 
TEST 
HELP 
MESSAGE rjl 
SYSTEM Π Ί 
SEMANTIC 
TEST 
Fä 
INTERPRETER 
F3 
NUMERICAL 
PROCESS 
Ή 
GRAPHICAL 
OUTPUT 
g « 
ERROR 
MESSAGE Γ Ϊ 
SYSTEM 
NODE 
DATA 
BUS 
ERROR 
DATA 
BUS 
3 
HELP 
DATA 
BUS 
μ-lj KEYBOARD/ 
DIGITISEW 
N-n 
GRAPHICS 
DISPLAYS 
1 USER I 
H 
GRAPHICS 
DATABASE 
AND 
DRIVER 
GRAPHICS 
DATA 
|BUS 
Fig. 4 Graphical Symbol Interpreter and Processor 
(GRAPHICS 
DATA 
pus 
Fig. 5 Graphical Symbol Multiple Interpreter 
with Cross Compilation 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
AN INTERACTIVE COMPUTER GRAPHICS 
ENVIRONMENT FOR CAD OF CONTROL 
SYSTEMS IN PARAMETER SPACE 
P. Putz and M. J. Wozny 
Center for Interactive Computer Graphies, Rensselaer Polytechnic Institute, 
Troy, NY 12180-3560, USA 
Abstract. A newly developed interactive graphics CAD package for linear 
multivariable control systems in the parameter space framework is pre-
sented. By direct geometric interpretation of stability, performance, 
rooustness, integrity, actuator constraints, and other practically 
important objectives, the 3D capabilities of high-performance inter-
active computer graphics systems can be employed to design directly in 
the space of free system parameters. 
Intelligent strategies help to 
access high-dimensional parameter spaces by decompositions or heuristic 
search for display subspaces. The structure and computer realization of 
the package is discussed with special emphasis on the unique user-
computer interaction features. Design examples show application of the 
main techniques for up to 15-dimensional parameter spaces and illustrate 
the potential as an engineering analysis and design environment. 
Keywords. Linear systems; stability; parameter space design; computer-
aided control system design; computer graphics; pole region assignment. 
1. INTRODUCTION 
The parameter space design approach for 
linear multivariable control systems as 
formulated by Ackermann (1980) is based on 
a direct geometric interpretation of 
design objectives like stability, perfor-
mance, robustness, integrity, soft con-
trol, etc., in the space of free design 
parameters. We present a newly developed 
interactive grapnical computer-aided con-
trol system design package incorporating 
this approach and recent work at the RPI 
Center for Interactive computer Graphics 
(Putz, 1984, 1985) on modeling and display 
of 3D parameter space regions and strate-
gies for high-dimensional parameter spaces 
arising 
from realistic multivariable 
systems. 
High-performance computer graphics devices 
are used to display admissible regions of 
up to 3 free design parameters at a time. 
By interactive manipulation of these 
regions and selection of design combina-
tions for which immediate closed-loop 
analysis is provided, direct insight into 
design tradeoffs is extracted from the 
geometric properties of parameter space. 
Systematic strategies are offered when 
high dimensionality makes unguided choice 
of display subspaces impractical. 
2. SUMMARY OF PARAMETER SPACE 
THEORY 
•>îe will now summarize the theoretical 
methods used for parameter space region 
modeling. Some results were already given 
in Patz (1984) and a comprehensive devel-
opment is contained in Putz (1985). 
2.1 Terminology 
We consider finite-dimensional linear 
plants with constant state feedback; 
x = A.x + B.u r 
u = -K.x 
(2.1) 
with xeRn, u ER m, A eRnxm, B ERnxm , KcR™ . 
The initial stability and performance 
specifications are formulated as a "nice 
stability region" Γ (subregion of the com-
plex plane in which the closed-loop eigen-
values shall be placed) . We wish to de-
scrioe all feedback gains K which nicely 
stabilize the system (2.1). 
For SISO 
■systems with m=l, B=b, and K=kn
T we denote 
this subregion of the n-dimensional design 
parameter space spanned by the elements of 
kn as Kr(n): 
ΚΓ(η) - ikn ε Rn | a(A-b.kn
T) £ Γ} 
(2.2) 
where σ(Α) is the spectrum of eigenvalues 
of A. 
2.2 SISO Parameter Space Region Modeling 
via Algebraic Inequalities 
As a first modeling approach, we can model 
Kr(n) as an algebraic inside/outside func-
tion h(*n) (a set of inequalities in the 
design parameters) such that 
<*η
ε Kr(n)) <=> <h(kn) > 0> 
(2.3) 
The functions h(.) can be derived in an 
automated procedure which essentially 
involves conformai mapping of Γ onto the 
left half-plane and application of alge-
braic Routh-Hurwitz stability criteria on 
the transformed characteristic polynomial. 
This problem has been discussed by Sonder-
geld (1983), but the automated procedure 
developed in Putz (1985) to generate hi . ) 
recursively for most practically meaning-
ful Γ is new. Note that (2.3) also models 
lower-dimensional slices of Kr(n) when 
certain elements of kn are fixed. 
103 

104 
P. Putz and M. J. Wozny 
2.3 SISO Parameter Space Region Modeling 
in Recursive Parametric Form 
Putz (1984) describes an alternative, 
parametric approach to model the bound-
aries of Kr (n). In particular, algorithms 
are given to display 2D and 3D slices when 
(n-2) or (n-3) elements of kn are fixed. 
This is used to represent admissible re-
gions in parameter space such that the 
designer can interactively select specific 
points based on secondary criteria such as 
robustness or actuator constraints. 
Since the choice of a particular 2D or 3D 
display subspace is fundamental for the 
design flexibility and highly nontrivial 
for practical applications, intelligent 
strategies had to be developed for system-
atic guidance. They are discussed in the 
sequel . 
2.4 Heuristic Search for Optimal Display 
Subspaces 
We select p=2 or 3 free elements kp
£Rp in 
which we want to see the admissible solu-
tion region. To invoke the modeling pro-
cedure from Section 2.3, we need a suit-
able slice k n_p = const. 
Based on the 
heuristic that the "best" display subspace 
encloses the maximum admissible volume, we 
can formulate an optimization problem to 
automate this selection: 
-n-p 
That is, we are looking for the j£n_p- kn * 
which cuts the biggest p-dimensional 
volume Vp out of Kf(n) (or of the robust 
intersection of several such regions). 
Putz (1985) shows how the hypervolume in 
any subspace can be approximated by a 
Monte-Carlo-type method when the inequal-
ity model (2.3) is used, and how heuristic 
search strategies like hill-climbing or 
branch-and-bound (see Winston, 1977) are 
employed to get close to the maximum with 
minimum effort. 
Note that for realistic 
specifications, Γ and therefore 
Kr^n^are 
always bounded, hence the optimization 
problem is well defined. 
2.5 Decomposition into Subspaces of 
Invariant Eigenvalues 
Another strategy to guide SISO parameter 
space design was originally proposed by 
Ackermann (1982). In an extension, we can 
select a p-dimensional subspace such as to 
make (n-p) selected eigenvalues invariant 
(uncontrollable). 
Due to system linear-
ity, this process can be repeated and the 
poles can be shifted 2 or 3 at a time. 
This is a systematic decomposition with 
high intuitive appeal and allows permanent 
insight into the design tradeoffs. More-
over, in the formulation of Putz (1985) 
the modeling algorithms at each stage are 
extremely fast, numerically robust (ortho-
gonal transformations) and do not distort 
the geometric interpretation of the dis-
played regions with respect to control 
magnitude, quantization effects, or sensor 
failures. 
2.6 Sequential Decomposition of MIMO 
Parameter Space Design 
For more than one input m>l, the dimension 
of the parameter space is m.n and linear-
ity of the parameter space mapping is 
lost. 
Now it is even more important to 
give systematic procedures to deal with 
the many degrees of freedom and to use the 
modeling and display algorithms developed 
for the single-input case. 
As outlined in Putz (1984), the SISO algo-
rithms immediately apply when K has rank 1 
(dyadic feedback) or the free elements are 
chosen from the same row or column of K. 
Practically, both may be too restrictive, 
especially when no guidance is available 
for selection of the fixed parameters. 
Putz (1985) has derived a method to decom-
pose the MIMO parameter space design prob-
lem into sequential single-input problems 
of reduced dimensionality. It is based on 
a pole placement technique due to Munro 
(1979) and synthesizes a full-rank feed-
back K from m dyadic matrices such that at 
each stage a certain number of eigenvalues 
can be re-designed in parameter space 
while the others are kept invariant. This 
gives natural and easy 
access to high-
dimensional problems and still provides 
the design flexibility due to the geomet-
ric interpretations of parameter space. 
3. STRUCTURE OF THE CACSD PACKAGE 
Fig. 1 shows the modular structure of the 
interactive CACSD package based on the 
parameter space principle and reflects the 
typical stages of a design process. 
System Data I/O. Handles I/O of all rele-
vant system matrices (Α,Β,Κ) to and from 
terminal or disk files. The current input 
data file is displayed as part of the 
status information. 
Pole Region Editor. This translates the 
primary design specifications (stability, 
damping, overshoot, bandwidth for continu-
ous and discrete time systems) into the 
data structure of the nice stability re-
gion in the complex plane. 
The regions 
are composed interactively from primi-
tives, can be displayed, deleted, re-
scaled, stored, and retrieved from disk 
files. 
The current pole region data file 
is displayed. 
Projection Strategies. For SISO and MIMO 
systems, (sequences of) display subspaces 
are suggested by the methods discussed in 
the previous sections. 
Search for the 
subspace with maximum admissible volume, 
decomposition into subspaces of invariant 
eigenvalues, rank-1 feedback, and decom-
position into dyads are provided and can 
be accessed in an interactive fashion. 
Parameter Space Region Modeling. G i v e n 
the data of the system, pole region, and 
display subspace, this module processes 
the algorithm of Section 2.3 and generates 
a geometric model of the desired 2D or 3D 
admissible parameter space region slice. 
The geometric data structure is very ge-
neric (polygons or polyhedra described as 
linked edge lists) to facilitate rendering 
on any vector or raster display device. 
The resolution of polygon approximation 
can be varied, and a topological consis-
tency check is implemented which tests if 
the polygons are closed to detect missing 
solutions. 

An Interactive Computer Graphics Environment 
105 
Details of this implementation are de-
scribed in Lau (1985) . 
Parameter Space Region Display. The para-
meter space region data structure can be 
displayed by a very simple driver program 
on a variety of devices (interpreted as 
either vector list or polygon data). 
Interactive rotation, scaling, deletion, 
and overlay of 2D and 3D regions allow 
excellent understanding of even the most 
complicated shapes. 
Feedback Design. From 
the 
displayed 
admissible region, the designer now 
selects specific points based on addition-
al objectives. 
2D and 3D points can be 
either specifi/ed numerically or graph-
ically (lightpen or tablet). 
The data 
structure is rich enough to support region 
intersection for automatic display of 
cobust solutions, norm minimization for 
soft control, or finite neighborhood 
placement for quantization effects. 
Analysis. Open- and closed-loop eigen-
values, eigenvectors, and time response 
simulation are available interactively and 
provide the essential indicators for 
judging and tuning the design. 
This 
immediate link between parameter space 
points and closed-loop system behavior as 
well as ease of iteration between the 
modules (see the possible paths in Fig. 1) 
are the crucial factors to obtain insight 
into design tradeoffs. 
4 
COMPUTER REALIZATION OF THE 
DESIGN ENVIRONMENT 
Tne basic package is implemented in FOR-
TRAN 77 at the RPI Center for Interactive 
Computer Graphics on a PRIME 750 super-
minicomputer system under PRIMOS with 
IMLAC 6220 vector refresh terminals runn-
ing DYNAGRAPHICS graphics language. 
In 
the current stage the package consists of 
250 subroutines with a total of 17000 
liies of code (extensively commented). 
Some special features which are of generic 
interest in CACSD are outlined in more 
detail below. 
4 .1 Software Engineering Principles 
The task of producing and maintaining a 
reliable, manageable, and widely useful 
software package of that size and complex-
ity is nontrivial. Modularity (decomposi-
tion into largely independent parts which 
communicate via well-defined interfaces) 
is essential for development by a software 
team, to control overall complexity, and 
to hide implementational details which are 
liable to change (e.g., when better numer-
ical analysis routines become available). 
The main modules of our package and their 
interaction are shown in Fig. 1. 
Closely coupled with modularity is exten-
sibility. 
It is extremely easy in our 
structure to add more pole region primi-
tives, new projection strategies, analysis 
techniques, or design criteria. 
This 
should prolong the useful lifetime of the 
package and enable tailoring to users' 
particular needs. 
Software portability is still limited 
whenever graphics is present. 
We have 
attempted to maximize device independence 
by isolating all graphics commands in 
small tool primitives (file I/O is inde-
pendent of the operating system in FORTRAN 
77). 
These tools perform commonly used 
tasks (such as displaying a new menu, 
selecting a menu item, displaying status 
or error messages) and are easily emulated 
on a different graphics system (typically 
less then one page of code). This use of 
functional abstraction is a generally 
recommendable practice and makes all main 
subroutines easily readable and fully 
portable, 
4.2 Numerical Analysis Issue 
The modeling algorithms of Section 2.3 
draw heavily on matrix manipulation and 
linear algebra. 
For this and other very 
sensitive operations (eigensystem computa-
tion, orthogonal decompositions) we have 
used an extension of the EISPACK subrou-
tine library (Smith, 1976). 
The time 
response simulation is taken from ORACLS 
(Armstrong, 1980). 
Other commonly used 
routines such as rank or adjoint computa-
tion were written and collected in a 
mathematical library. 
All computations 
are done in douDle precision. 
One essential part of the algorithm for 
which no directly usable software seemed 
to exist concerned the solution of a set 
of nonlinear equations. 
The problem is 
aggravated because the functions are not 
continuous 
(asymptotic 
singularities 
occur), no analytic gradient information 
is available, and all roots in a given 
interval have to be computed. 
A theore-
tically rigorous solution was found based 
on interval analysis and is described in 
Moore (1977). For its implementation, an 
interval arithmetic library was written. 
See Lau (1985) for details. 
4.3 User-Computer Interaction 
This is one of the strongest points of the 
package. The dialog is via self-explana-
tory hierarchical menus with lightpen 
selection. 
The screen is permanently 
divided into functional areas for status, 
prompt, and error messages, menus, data 
input, and three graphical display areas 
(see Fig. 5). 
This consistent layout 
makes user orientation very easy since 
each piece of information appears always 
at the same place. While the menu items 
change after each selection, the options 
HARDCOPY, HELP (on-line explanation of the 
current situation), and EXIT are available 
at all times. As much as possible, wrong 
user input is prevented which creates a 
very robust, comfortable environment in 
which even novices can solve problems 
rapidly 
without significant 
training 
delays. 
The most outstanding feature in our user 
interface is certainly graphics interac-
tion. 
Since all the design concepts and 
solution criteria are in geometric form, 
this interface is the crucial factor for 
the success of the parameter space tech-
nique. In the structure of Fig. 1, Region 
Display and Feedback Design require the 
highest graphical interactivity. 
The 
designer must understand the implications 
of the admissible regions in parameter 
space and must have utmost flexibility in 
manipulating and analyzing them. 

106 
P. Putz and M. J. Wozny 
For 2D regions, the capabilities of any 
graphics terminal are certainly suffi-
cient. On the IMLACS we have implemented 
auto-scale (when the region is first 
drawn, it is scaled to just fit in the 
display area) with manual zoom on any part 
of the region. Together with a lightpen-
or arrowkey-driven crosshair for position-
ing design points, this is a completely 
satisfactory environment. 
3D regions, nowever, are not adequately 
understood in the above graphics environ-
ment, although auto-scale, zooming and 
rotation are available. For example, the 
unfamiliar shapes cannot be visualized in 
wireframe representation, rotation is too 
slow, and no mechanism for 3D positioning 
is available. 
This is why we have used 
other, higher performance graphics de-
vices. Shaded color rendering with hidden 
surface removal on raster screens gives 
the best appreciation of the object's 
shape. 
The CATSIG software (Falk, 1984) 
for tne ADAGE RDS-3U00 "iKonas" display 
allows real-time rotation and interactive 
coloring and shading (positioning of the 
light sources) in 512 x 512 pixel resolu-
tion and is an ideal environment for 
initial study of the admissible regions. 
The generic geometry data structure gener-
ated by the CACSD modeling algorithm made 
it very easy to use CATSIG (only a 200-
line driver program was required). 
Interactive 3D positioning for design is 
provided by an Evans & Sutherland PS 300 
high performance vector graphics terminal. 
The wireframe model is simultaneously dis-
played in three different views to facili-
tate orientation. Rotation and scaling is 
done in real time from dials. A cutting 
plane can be interactively moved through 
the object (by virtue of hardware depth-
clipping) and a crosshair can be position-
ed in tne resulting 2D cross-section while 
the corresponding 3D coordinates (the 
design values) are displayed. 
Besides 
positioning, this unique feature also 
allows 3D information to be viewed as 
dynamically changing 2D slices which is 
easier to comprehend for certain applica-
tions (e.g., location of common intersec-
tion for robustness). Again, the required 
driver software was written in less than 
one man-week 
including 
familiarization 
with the E & S graphics language. 
A full appreciation of the achievable 
interactivity and flexibility for control 
system design is only possible in a live 
demonstration. We can only convey some of 
it by the following examples. 
5. DESIGN EXAMPLES 
5.1 Automatic Search for Display Subspace 
We will first demonstrate the heuristic 
search method from Section 2.4. Consider 
a 5th order discrete-time SISO system 
where the requirement is simply stability 
( Γ is a unit circle). We want to display 
a 3D admissible slice in (k^, k.2, £3)-
space and look for the values of k4, k$= 
const, which maximize the enclosed volume. 
A hill-climbing algorithm produced the 
solution k4* = 1.75, k5* = -1. To verify 
that this is a global maximum, the plot of 
Fig. 2 was compiled which shows the volume 
v123(^4'^5)· Note that this is essential-
ly a graphical representation of 5D infor-
mation where 3 dimensions are compressed 
into a scalar indicator (the admissible 
volume). 
The practical benefit is the 
range of k4 and k5 for which meaningful 3D 
parameter space design is possible. 
Based on this suggestion, several "paral-
lel" 3D slices were modeled and are dis-
played in Fig. 3. (for k5 = 1 and k4 = 1, 
1.75, 2.5). They give a slight 4D impres-
sion, but the wireframe models are diffi-
cult to comprehend. 
Fig. 4 shows how 
■J haded raster rendering greatly enhances 
understanding of such unusual shapes. 
5.2 SISO Decomposition of 10D Parameter 
Space 
Let us now illustrate the decomposition 
into subspaces of invariant eigenvalues 
:or a 10th order SISO sampled-data system. 
The design specification requires a damp-
ing ratio of at least 0.3 which corres-
ponds to the spiral nice stability region 
in the bottom left display of Fig. 
5. 
Also shown there are the open-loop eigen-
values. 
The system is unstable, but 2 
eigenvalues are already insider. 
We 
therefore have to move 8 poles and will 
decompose this task into 3 steps. 
First, we select the 3 poles at -2.53, -
0.96 + jO.61. 
The program finds the 3D 
display subspace in which the other 7 
eigenvalues are invariant and displays the 
admissiole region in the main area. 
A 
design point from this region is (3.3, 
3.3, 9) and was found using the E & S 
PS300 terminal. 
Tne system after step 1 
has closed-loop poles as in the bottom 
right of Fig. 5. 
Indeed, we have moved 
the 3 selected eigenvalues inside 
and 
left the others untouched. We still have 
5 poles outside. 
For the second step, we relocate the 
eigenvalues 1.05, 0.82 + jO.84 and move 
them inside Γ by a choice of (0, 1.7, -
4.3). 
The 3D region for this step looks 
similar to the one from step 1 and is not 
shown. 
The resulting pole configuration 
is the bottom-left plot of Fig. 6. 
For step 3 we have tne two poles -0.37 + 
jl.06 left to move. This can be done in 
the 2D slice shown in the main area of 
Fig. 6. 
To demonstrate the validity of 
the small gain interpretation, we select 
the marked point which is closest to the 
origin. 
Indeed, the two poles move the 
shortest distance necessary to enter 
Γ (smallest control effort sufficient to 
Γ -stabilize the system). The final poles 
are shown in the bottom right. Note that 
we have designed a 10D system with contin-
ual graphical insight and utmost economy, 
but never had to use parameter spaces of 
dimension greater than 3, and never needed 
guesswork or arbitrary decisions. 
5.3 MIMO Decomposition of 15D Parameter 
Space 
As an example for the method described in 
Section 2.6 we consider the continuous-
time system used by Munro (1979) as Exam-
ple 4. It has 5 states and 3 inputs, the 
complete parameter space has therefore 
dimension 15. 

An Interactive Computer Graphics Environment 
107 
We want a full-rank feedback gain to place 
the eigenvalues in the region in the bot-
tom of Fig. 7 (damping > 0.7, < 5% over-
shoot, rise time > 2.5, bandwidth < 3). 
The open-loop poles are all 0. 
Since there are 3 inputs, our procedure 
has 3 steps. 
In step 1, the algorithm 
only considers the first input with which 
one eigenvalue is controllable. 
This 
corresponds to a ID-parameter space re-
gion, the interval [0.71,2.12] in the 
Figure. 
A design choice of 2 gives the 
pole configuration of the bottom left in 
Fig. 7. 
Step 2 takes the first two inputs. 
A 
dyadic feedback is constructed which makes 
the already assigned pole uncontrollable. 
There is freedom to move a second eigen-
value, and the corrasponding 1Ό admissible 
region is [0.82,2.45]. A design value of 
1 produces the picture in the bottom right 
of Fig. 7. One more pole is in Γ . 
In step 3 (with all 3 inputs) the whole 
system is controllable. 
Again, a dyadic 
feedback is found to keep the two good 
poles fixed. There remains a 3D parameter 
space region as in Fig. 8. The bottom of 
the figure shows the effect of two differ-
ent choices. 
In any case the first two 
poles are invariant and the other 3 are 
inside Γ . 
For both designs the total 
feedback matrix was found to have full 
canK 3. 
6. CONCLUSION 
We have presented a novel computer-aided 
control system design package based on a 
fascinating combination of parameter space 
design theory and the capabilities of 
state-of-the-art 
computer graphics de-
vices. 
For linear multivariable systems 
with low to medium dimensionality of the 
state space it represents a unique tool to 
integrate many contradictory objectives 
and synthesize simple control laws in an 
interactive environment. 
The effective use of graphics for geomet-
ric interpretation of systems concepts and 
for visualization of complex high-dimen-
sional relationships is believed to have 
substantial impact beyond the specific 
application discussed here. 
The full 
extent of possible user-computer communi-
cation via this medium is far from being 
fully exploited, but the very rewarding 
experience so far strongly encourages 
further research and experimentation. In 
that sense, the ideas and principles out-
lined in this paper are hoped to be of 
generic interest for the CAD community. 
ACKNOWLEDGEMENT 
Support by NSF grant ISP70-20240 and the 
Center for Interactive Computer Graphics 
Industrial Associates Program is grateful-
ly acknowledged. Software development of 
the package owes much to the contributions 
of Edmund Lau, Harry Bims, Jim Andre, and 
Mary Beausoleil. 
Tans. Autom. 
Contr., AC-25, 1058-
1072. 
Ackermann, J. , and S. Tuerk (1982). 
A 
Common Controller for a Family of 
Plant Models. IEEE Conf. Dec. Contr., 
240-244. 
Armstrong, E.S. (1980). ORACLS - A Design 
System for Linear Multivariable Con -
trol. Dekker, New York. 
Falk, E. (1984). CATIA Shaded Image Gen-
erator (CATSIG) - Project Report, 
Tech. 
Rept., TR-84017, Center for 
Int. Comp. Graph. (CICG), RPI, Troy, 
NY. 
Lau, E.Y. (1985). 
Interactive CAD Soft-
ware for Parameter Space Region Model-
ing and Display. MS Thesis and Techn. 
Rept., CICG, RPI (to appear). 
Moore, R.E. and S.T. Jones (1977). Safe 
Starting Regions for Iterative Meth-
ods. 
SI AM J. Num. Anal., 14, 1051-
1065. 
Munro, N. and S. Novin-Hirbod (1979). 
Pole Assignment Using Full-Rank Output 
Feedback Compensators. Int. J. Syst. 
Se. , 1Ù, 285-306. 
Putz, P. and M.J. Wozny (1984). Parameter 
Space Design of Control Systems Using 
Interactive Computer Graphics. Proc. 
Amer. Contr. Conf., 105-114. 
Putz, P. (1985). Interactive CAD of Con-
trol Systems in Parameter Space. PhD 
Thesis and Techn. Rept., CICG, RPI (to 
appear). 
Sondergeld, K.P. (1983). A Generalization 
of the Routh-Hurwitz Stability Criter-
ion and an Application to a Problem in 
Robust Conroller Design. IEEE Trans. 
Autom. Contr., AC-28, 965-970. 
Smith, B.T., et.al., (1976). 
Matrix 
Eigensystem 
Routines-EISPACK Guide. 
Springer, New York. 
Winston, P.H. (1977). Artificial Intelli-
gence. Addison-Wesley, Reading. 
—Q-
Fig. 1. 
Structure of the CACSD 
Package 
REFERENCES 
Ackermann, J. 
(1980). 
Parameter Space De-
sign of Robust Control Systems. 
IEEE 

108 
P. Putz and M. J. Wozny 
] V 
(k.,k.) 
Fig. 2. 
Admissible Volume 
in 3D Subspaces 
Fig. 3. 
3 Parallel 
3D Slices 
from 5D 
Parameter Space 
Fig. 4. Raster Rendering of Fig. 3 
Fig. 6. Steps 2 and 3 of Design Example 2 
PARAMETE
R SPAC
E 
NTROL SYSTEM
S 
SYSTEM
' 
MVSO-SY
S 
POLE REC10I 
COMBJRE
C 
STATUS
· EICDS
P 
PLOT 
DELETE 
RESCAL
E 
TITLE 
HELP 
HAR0C0P
T 
Fig. 7. Steps 1 and 2 of Design Example 3 
PARAMETE
R SPAC
E 
DES18
N OF 
CONTRO
L SYSTE
M 
SYSTEM
· 
EXIO0-SY
S 
POLE RECION
· 
SPC J. RE« 
RECIO
N DISPLA
Y 
1
 STATUS
· 
3D RECIO
N 
PROMPT
· S . I . .« 
. . . .w 
i t «, n il 
I k. 
U tM 
. . .. 
, 
\ 
V 
l v ~ ^ ^ 
1k^^^^\ 
%7 
ADMISSIBL
E RECIO
N STEP 1 
* 
* ( 
* 
13* 
^ W 
kW 
* 
8 
LUI 
^φ 
, 
, ( A 
..... 
.,» 
T 
». 
°*rE'01/23/85 1 
MENv 
DISPLA
Y 
ROTAT
E 
RESCAL
E 
OVERLA
Y 
DELET
E 
T.TLE 
j 
RETUR
N 
HELP 
HAR.0C0P
Y 
EXIT 
PARAMETE
R SPAC
E 
CONTRO
L SYSTEM
S 
SYSTEM
· 
MV50.SY
S 
POLE REGION
« 
COMBJ.RE
O 
RECION DISPLA
Y 
1
 STATUS
" 
TITL
E 
PROMPT
· S . U .« 
· · ■*. I lu 
«litt 
U. 
I l iM 
· .« 
PARSP
. RECIO
N FOR STEP 3 
ft. 
\} 
,.u, 
ft. 
V' 
D A T E
· . 2/09/84 
MENU 
OISPLA
Y 
ROTAT
E 
RESCAL
E 
OVERLA
Y 
DELET
E 
TITLE 
RETUR
N 
HELP 
HAROCOP
Y 
EXIT 
Fig. 5. Step 1 of Design Example 2 
Fig. 8. Step 3 of Design Example 3 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A FLEXIBLE MAN-MACHINE INTERFACE FOR 
CACSD APPLICATIONS 
M. Rimvall and L. Bomholt 
Institute for Automatic Control, Sioiss Federal Institute of Technology 
(ETH), 
CH-8092 
Zurich, Switzerland 
Abstract. In this paper a man-machine interface well suited for Computer Aided Control 
Systems Design (CACSD) is presented. We will start with presenting the general command-
driven interface of IMPACT, an interactive CACSD-package presently implemented in the new 
programming language Ada. In particular, we will elaborate on its versatile macro concept 
(functions/procedures). The interface of IMPACT uses a syntax similar to that of Ada and 
is flexible enough for the algorithmic type of problems found in CACSD. A facility of 
concurrent sessions not unlike those found on many modern workstations is presented. 
Thereafter, the macro and session concepts are combined to form the "query" option, a 
feature intended to be used to guide the inexperienced user in a more controlled manner. 
Keywords. Computer-aided control systems design; computer-aided instruction; man-machine 
interface; command-driven interface; Ada. 
INTRODUCTION AND OVERVIEW 
In this paper the flexible man-machine interface of 
IMPACT (Interactive Mathematical Package for Auto-
matic Control Theory), a new interactive CACSD-
package is presented. 
IMPACT is presently being implemented at the Swiss 
Federal Institute of Technology 
(ETH), Zurich, 
Switzerland (Rimvall, 1983; Rimvall and Cellier, 
1984a). At this time, the kernel (controlling the 
interactive user dialogue) and data administrator 
(handling the dynamically used data structures) ex-
ist. Presently, the necessary control algorithms 
are developed/collected and included into IMPACT. 
The package is already internally used at the ETH 
and will soon be generally available. 
IMPACT is implemented in the new programming lan-
guage Ada (ANSI, 1983). This is a rupture with the 
tradition of writing all portable scientific soft-
ware in FORTRAN, yet brings several implementation-
al advantages. See Rimvall (1984b) for a discussion 
on Ada, in this contribution we will see an example 
of how the parallel tasking of Ada can be used to 
increase the structurability of the IMPACT man-
machine interface. 
The development of IMPACT is made with the objec-
tive of serving a very heterogeneous group of us-
ers. These range from the undergraduate student, 
who must solve trivial control problems without any 
previous contact with interactive CAD-packages, to 
the skilled control researcher with programming ex-
perience, who wants to use IMPACT for the analysis 
and synthesis of complex control systems. At a 
first glance, it seems impractical for this wide 
range of users to use the same man-machine inter-
face. Whereas the inexperienced student will get an 
easy access to the system over a question-and-
answer or menu-driven interface (which is slow and 
cumbersome but requires a minimal knowledge of the 
used system), the experienced researcher needs a 
much more versatile tool; as it is impossible to 
include every conceivable control application algo-
rithm in IMPACT, it must be possible for the user 
to make his own extensions by interactively defin-
ing his own algorithms. However, this requires a 
structured, more intelligent, command driven inter-
face. On the other hand, two alternative interfaces 
to the package would presume that each user be-
longed to one of the above extremes (which is cer-
tainly not the case), and does not give the begin-
ner a smooth transition to more advanced usage of 
the package. 
Therefore, to accommodate a full range of users, 
the following concepts have been developed for 
IMPACT: An ample set of data structures usable in 
control theory together with a full-fledged, struc-
tured command language containing most elements 
found in higher computer languages gives the ad-
vanced user the flexibility he needs. In particu-
lar, a versatile macro facility allows the user to 
interactively implement his new control algorithms 
(in form of functions or procedures). A session 
concept enables the user to maintain several con-
current working-areas, imperative for retaining the 
overview while solving larger control problems. 
To help the user with only basic knowledge of 
IMPACT and/or control theory, a "query" option has 
been introduced. By each command where the user se-
lects this option, the system will take the 
initiative and guide the user through a question 
and answer dialogue especially adapted for that 
particular command. The query option is available 
by all system-defined commands/functions and can 
also be included by the user for his own new, in-
teractively defined, macros. 
The similarity between the IMPACT command language 
and Ada enables the user to fairly easy "translate" 
interactive IMPACT macros to Ada coded proce-
dures/packages to be incorporated into IMPACT. 
BASIC COMMAND AND DATA STRUCTURES 
In this chapter, we will give some examples showing 
the simplicity of the basic level of IMPACT. At the 
same time, a short presentation of the data struc-
tures available in IMPACT will be given (also see 
Rimvall and Cellier 1984a). 
In the interactive command language of IMPACT, as 
well as in any other procedural language used to 
describe algorithmic actions, the assignment state-
ment is the most commonly occurring language con-
struction. The full expression parser of IMPACT al-
lows the user to construct expressions of any com-
plexity using the normal infix mathematical nota-
109 

110 
M. Rimvall and L. Bomholt 
tion and standard function calls. Therefore, when a 
first-time user is introduced to IMPACT, he can im-
mediately start calculating simple results without 
further instructions: 
» —This is a comment."»" is the IMPACT 
» —prompt.";" suppresses resulting output 
» MY_VAR = 1 ; 
» T = -5.6; 
» Y0UR_VAR = 2*MY_VAR*(SIN(75)+ABS(T)); 
However, as IMPACT supports quite complex data 
structures, the IMPACT assignment statement is much 
more versatile than that of e.g. Pascal, yet simple 
and transparent in its structure. As in MATLAB 
(Moler, 1980), we normally work on complex struc-
tures, for example complex matrices, and therefore 
allow for the following types of constructions: 
» I = SQRTC-1); 
» A = <1 , 2+3*1; 
-> 
0 , MY_VAR> 
resulting in 
A 
1.0 
2.0 + 3.0*i 
0.0 
1.0 
Whereas many CACSD-packages perform all their oper-
ations on complex matrices (Little and others, 
1984; Walker and co-workers 1982), IMPACT supplies 
the user with a range of data structures common in 
control 
theory, e.g. polynomial 
and transfer-
function matrices, linear system descriptions (four 
dimensionally tuned matrices), domains and trajec-
tories (for range specifications, time histories 
and plots) as well as nonlinear system macros (for 
the simulation and linearization of nonlinear sys-
tems). The operations on these structures are kept 
simple through a very natural notation. For exam-
ple, the input line 
» Q = < Γ2 Α1 , 2Α1 > 
will result in the polynomial row vector 
Q(p) 
1. + 2.*p + 1.*p**2 
2. + 1.*p 
Alternatively, a longer but better readable way of 
entering the polynomial matrix Q would be to first 
define the variable P as 
» P = <T1>; 
Thereafter Q can be entered as 
» Q = <1 + 2*P + P**2, 2 + 1*P >; 
The polynomial matrix Q was entered 
in non-
factor ized form. Of course it could also have been 
entered in factorized form: 
» OF = <-1!-1, !-2> 
resulting in 
QF(p) 
= 
(p + 1.)*(p + 1.) 
(p + 2.) 
Transfer-function matrices can be obtained by di-
viding two polynomial matrices element by element. 
For example: 
» NUMER = <P,1>; 
» TRAFUN = NUMER ./ Q 
will result in the structure 
TRAFUN(p) = 
P 
1 
1. + 2.*p + 1.*p**2 
2. + 1.*p 
which of course also can be obtained by 
» TRAFUN = < Α1/(Γ2 Α1), 1/(2~1)> 
THE IMPACT COMMAND LANGUAGE 
As no general CACSD-package can include every 
conceivable control algorithm, especially not if it 
is to be used as a tool in scientific research, the 
user must be supplied with an interface flexible 
enough to let him extend the package according to 
his own needs. In particular, it must be possible 
for the user to assemble existing base algorithms 
to form more powerful or more general algorithms. 
To provide the user with an interface flexible 
enough, many modern interactive CACSD-packages are 
command driven in the sense that the user controls 
the flow of action of the package using an (often 
quite complex) command language. Although such a 
command language could be developed from scratch 
(giving the developer full freedom of design), we 
have decided to build the command language of 
IMPACT around a syntax similar to that of Ada. Ada 
was an excellent template for a language to be rich 
enough to describe almost any control algorithm. 
Moreover, as Ada becomes a wide-spread language in 
the near future, many users will find the interac-
tive dialog with IMPACT very familiar and will re-
quire only a short time to get acquainted with the 
package interface. 
As an example of the IMPACT command language, let 
us consider the problem of solving the Riccati 
Equation 
x = A*x + B*u 
r° 
! 
y = C*x 
(x'*Q*x + u'*R*u)dt = MIN 
Jo 
After defining the matrices A, B, Q and R, this 
problem can be solved by a simple algorithm de-
scribed in Potter (1966): 
a = <...>; b = <...>; q = <...>; r = <...>; 
<v,d> = EIG(<a, -b*(r\b'); -q, -a'>); 
k=0; n = DIM(a); 
FOR j IN 1 .. 2*n 
LOOP 
IF d(j,j) < 0 
THEN k=k+1; v(:,k) = v(:,j); 
END IF; 
END LOOP; 
p = REAL(v(n+1..2*n,1..k)/v(1..n;1..k)); 
fc = -r\b'*p 
In this algorithm, we first calculate the eigenvec-
tors and eigenvalues of the Hamiltonian. We store 
the eigenvalues diagonally in d and the eigenvec-
tors as columns in v. Thereafter we extract the 
columns corresponding to negative eigenvalues and 
finally we can calculate the feedback coefficients 
fc. We note the similarity with Ada, the main dif-
ferences derive from a notation also used by MATLAB 
and include the use of ' = ' for assignment state-
ments , '<» and *>' to describe the matrix struc-
tures and !:' to form substructures (e.g. to form 
column vectors out of matrices). We note the pres-
ence of structural commands like FOR- and WHILE-
loops, IF-statements and BEGIN-END blocks. 

A Flexible Man-machine Interface 
111 
MACRO FEATURES IN IMPACT 
In the last chapter we have seen an example on how 
sequences of basic statements can be put together 
to form control algorithms. However, the system 
would not be particularly user-friendly if you were 
forced to enter all these statements every time you 
wanted to perform the algorithm. Therefore, IMPACT 
supports macro facilities, permitting you to only 
once describe entities/sequences of action to be 
used repetitively. In this chapter we will present 
the function and procedure macros, however, IMPACT 
also supply the user with string macros for more 
general "low-level programming" and system macros 
to describe nonlinear systems. 
The above algorithm for solving the RICCATI equa-
tion could be included in a function using the fol-
lowing syntax: 
Function RICC(a,b,q,r); 
v,d,p : MATRIX; 
k,n 
: INTEGER; 
BEGIN — RICC 
<v,d> = EIG(<a, -b*(r\bM; -q, - a f > ) ; 
p = REAL(v(n+1..2*n,1..k)/v(1..n;1..k)); 
RETURN -r\b'*p; 
END RICC; 
The declaration of local variables is optional in 
IMPACT. Such declarations may be used to enhance 
the programming security (if one variable is de-
clared, all variables on that level must be de-
clared) and to introduce type checking. However, 
during interactive sessions, variable declarations 
are normally omitted, as they interfere with the 
flexible form of action normally taken during in-
teractive work. 
After the Riccati function has been defined, we can 
access it as a normal function 
» ffee = RICC(aa,bb,qq,rr) 
Characteristic for many control algorithms are that 
they seldom appear in only one version. Often, this 
multitude of versions is caused by structural vari-
ations in the treated systems. Other times, these 
structural variations do not influence the algo-
rithm itself, but lead to particular parameter se-
lections (affecting error tolerances, type of input 
parameters and so on)." In IMPACT, the combination 
of defaulted formal parameters and named rather 
than positional actual parameters can be used to 
take care of both algorithmic and parametrical 
variations. For example, in our Riccati equations 
the Q and R matrices are often chosen to be unity 
matrices. In IMPACT, we could shorten many calls to 
RICC if we made the unity matrices default for Q 
and R: 
Function RICC(a,b,q=eye(dim(a,1)), 
r=eye(dim(b,1))); 
v,d,p : MATRIX; 
We have now defined Q and R to be square unity ma-
trices of correct dimensions. These default values 
will be used whenever no other values are given for 
the parameter in question. In the default declara-
tion we make use the fact that the actual assign-
ment of default values is performed at the time of 
call, when the dimensions of the A and B matrices 
are known. 
After thsi redeclaration of function RICC, it can 
be called with a shortened parameterlist whenever 
the unity matrix is to be used for Q or/and R. For 
example, if Q is a unity matrix, we would call 
Riccati using 
ffee = RICC(aa,bb,,rr) 
or, a little more readable 
ffee = RICC(aa,bb,R=rr) 
It is always psible to specify named rather than 
positional parameters (useful for extra clarity by 
documentation): 
ffee = RICC(A=aa,B=bb,R=rr) 
Similar to defaulted structures, algorithms requir-
ing error-tolerances are often coded with default 
tolerances, 
which can be overridden 
whenever 
needed. The function for pseudoinverse therefore 
uses the machine tolerance as an annulable default: 
» pia = PINV(a); 
but we can at any time replace this default by an 
alternative value: 
» pia = PINV(a,T0L=1.e-5); 
Another example of defaulted parameters is the pro-
cedure DELETE: This procedure can take any number 
of parameters, each of which is the name of a vari-
able to be deleted. A non-specified parameter is 
ignored, and certain string parameters change the 
meaning of the procedure completely: 
» DELETE(pia) 
» DELETE(a,b,r,q) 
» DELETE('all') 
» DELETEO 
deletes the variable pia 
deletes a,b,r,q 
deletes all variables 
legal call, no action 
THE USE OF PARALLEL SESSIONS 
Everybody remembering the times when research still 
was made using pencil and paper, can certify the 
advantage of using two or more sheets of paper con-
currently. On one sheet the actual results (e.g. 
theorems and proofs) were painstakingly noted down. 
On the other sheet(s) intermediate calculations 
were performed, alternative paths were examined, 
numerical examples were tested and so on. When you 
were ready, the scratch-sheet(s) were discarded, 
leaving only the clean results. Then the computer 
became widespread and you started to write large 
FORTRAN programs, possibly using subroutines from 
standard algorithmic libraries. As award for and 
proof of your strenous programming work, you re-
ceived the results (together with program listings, 
memory dumps and intermediate results) on over-
sized sheets of papers which did not fit into any 
loose-leaf binder, turning your book-shelves into 
paper-shelves. Then, suddenly, you got your first 
interactive 
CACSD package 
(most likely 
MATLAB 
(Moler, 1980 ), which really isn't a CACSD package, 
but you were so happy to have this first numerical-
ly stable, interactive, algorithmic package that 
you really didn't care). You could now work on your 
CRT-terminal and all intermediate results appeared 
only on the terminal screen. At the end of your 
session, you saved only the main results on an ex-
ternal file to be printed, made an exit from the 
program and all intermediate results disappeared. 
Indisputably, these new interactive CACSD-packages 
have become invaluable tools in modern control re-
search/development. However, they have not yet 
brought back the comfort of your scratch-sheet. You 
normally work interactively with a single set of 
variables, all residing in "one big bucket". After 
an hour or so of work, you have most certainly lost 
the overview of your variables, especially since 
you are forced to give each of them a meaningless, 
four-letter name. The only remedy is to delete ev-
ery intermediate variable (giving you the function 

112 
M. Rimvall and L. Bomholt 
of an eraser instead of a scratch-paper). 
The man-machine interface of IMPACT avoids this ac-
cumulation of variables and gives the user his 
scratch paper back by introducing a concept of ses-
sions. Each session is a logical work-area» concep-
tually comparable to the directory structures of 
many operating systems (Digital» 1982) or to the 
windowing techniques of modern workstations like 
Apollo Domain and Sun. It is possible to open sev-
eral session during one call to IMPACT» these ses-
sions are then concurrent; the user can switch be-
tween the sessions at any time and each session is 
completely independent of the others. In each of 
these sessions, the user can define local vari-
ables» guaranteeing that the number of current 
variables is kept to a minimum and that related da-
ta structures are kept together. Moreover, the ses-
sion feature does not add any unreasonable complex-
ity to the basic IMPACT system described in the 
previous chapter. In fact, the novice user can ig-
nore the session facility to start with and start 
structuring his work-environment only as he gets 
more familiar with the system. 
To get an intuitive feeling how sessions can be 
used, let us consider a user working on a control 
problem in both the frequency and time domain. Upon 
entering IMPACT, the user is met by the prompt of 
the MAIN session: 
» 
He now decides to form three additional sessions: 
FREQ, TIME and SCRATCH. The first of these new ses-
sions is created with the command 
» SPAWN(FREQ) 
%IMPACT-MESSAGE, Global session MAIN is left. 
%IMPACT-MESSAGE, Global session FREQ is created. 
%IMPACT-MESSAGE, Global session FREQ is entered. 
%IMPACT-MESSAGE, No variables are imported to FREQ 
FREQ» 
The new prompt FREQ» will remind the user that he 
has left the main session. He now proceeds creating 
the sessions TIME and SCRATCH. Thereafter he can 
use the command SWITCH to jump between between the 
different sessions: 
SCRATCH» SWITCH(FREQ) 
%IMPACT-MESSAGE, Global session SCRATCH is left. 
%IMPACT-MESSAGE, Global session FREQ is entered. 
FREQ» 
For typographical reasons, we have in the above and 
following examples assumed that you work on a nor-
mal, dumb terminal with IMPACT running under any 
"standard" operating system. However, on a modern, 
intelligent workstation supporting windowing tech-
niques (e.g. Apollo Domain), you would have each 
session on a separate window of your terminal, see 
fig. 1. The SWITCH command is then redundant, as 
the same effect can be obtained simply by moving 
your cursor from one window to another. Moreover, 
the implementation of concurrent sessions is done 
using the tasking facility of Ada, guaranteeing a 
fairly portable implementation despite the heavy 
hardware/firmware host-dependency of any windowing 
techniques. The modular structuring of Ada programs 
is furthermore used to separate and minimize the 
program sections describing the host-system depen-
dencies. 
We have discussed how a problem can be decomposed 
into several subproblems, and how each of these 
subproblems can be treated in separate sessions to 
avoid large accumulations of variables. However, 
sometimes the user needs a variable from another 
session. This can then be directly accessed using a 
dot-notation. For example, if the user wants to 
work in the frequency domain (session FREQ) on the 
transfer-function equivalent of a linear system de-
scription SYS1 defined in the time domain (session 
TIME), he can access and transform this system di-
rectly (TRANS transforms a linear system descrip-
tion to a transfer-function) by: 
FREQ» sys2 = TRANS(time.sys1 ) 
or, alternatively, from session TIME: 
TIME» freq.sys2 = TRANS(sysl) 
In the case where a new scratch session is started 
for some intermediate calculations, it is sometimes 
meaningful to import some or all variables from an-
other session: 
SCRATCH» IMPORT(freq,fall!) 
Finally, the command DELETE can be used to close 
active sessions and delete any local variables. If 
the current session is deleted, the user will find 
himself in the MAIN session: 
SCRATCH» DELETE( scratch) 
UMPACT-MESSAGE, Global session SCRATCH is closed. 
%IMPACT-MESSAGE, All local variables are deleted. 
%IMPACT-MESSAGE, Global session MAIN is entered. 
» 
SESSIONS VERSUS MACROS 
In this short section, we will give a graphical 
representation of the session and macro concepts to 
be used in the following chapters. Furthermore we 
will show that these two concepts from an implemen-
tational point of view are practically identical. 
We have already seen how the macro concept (func-
tions/procedures) was used to define logical areas 
where new, local variables could be created. For 
example, when we called the Riccati function, a new 
logical level was temporarily created for the local 
variables. Graphically, we represent the call to 
Riccati as a new vertical level under the main ses-
sion level (we denote the present point of calcula-
tion with a star): 
MAIN 
RICC (*) 
Note that the local level RICCATI is eliminated as 
soon as the function is left. However, when a new 
session is opened, a permanent logical area is cre-
ated. This area we represent by a new horizontally 
parallel level: 
MAIN 
FREQ (*) 
Naturally, these two representations can be com-
bined: 
MAIN 
FREQ 
TIME 
SCRATCH 
RICC (*) 
Note that all vertical lines are temporary, all 
horizontal are permanent. 

A Flexible Man-machine Interface 
113 
Although conceptually different, from an implemen-
tational point of view macros and sessions differ 
only slightly. The main differences are: 
- Normally calls to macros include a list of vari-
ables and, in the case of functions, terminate 
by returning a value. 
- After a macro is called, IMPACT finds the in-
structions to be executed in the macro descrip-
tion (stored internally in IMPACT or externally 
on a file). After a new session is selected, the 
new instructions are still read from the termi-
nal. 
THE QUERY FEATURE 
With the potent data structures and command lan-
guage of IMPACT, the advanced control scientist is 
given a very powerful algorithmic environment, 
which he can further adapt to his own needs. On the 
other hand, if first time users are directly pre-
sented with the full IMPACT package, they will most 
certainly be stunned by the complexity of the pack-
age. Many CACSD-packages try to resolve this prob-
lem by including an interactive HELP facility. How-
ever, whereas such help is excellent once you have 
a general overview of the package and only need in-
formation on a particular subject, during an intro-
duction to the package it is as pedagogic as a 200 
page reference manual. Of course, IMPACT does sup-
port an interactive HELP, but to prevent the ini-
tial shock it also gives the user a gradual intro-
duction. A tutorial presents only the simplest lan-
guage elements, e.g. how to create variables and 
how to call standard functions. Moreover, as even 
this might be too complicated for a beginner unfa-
miliar with the standard concepts of control theo-
ry, a query-mode has been introduced. In this mode, 
the initiative is transferred from the user to the 
system. Through a guided conversation, the system 
will determine the correct action to take. 
Assuming that an inexperienced user wants to use 
the for him new function RICC. He would then call 
the function using the //QUERY qualifier, forcing 
IMPACT to enter the query mode. Thereafter the user 
will be asked for values of each parameter. Option-
al (defaulted) parameters need to be specified only 
when another default value is to be changed (user 
input has been underlined): 
TIME»FF = RICC (//QUERY) 
RICC»The function RICC solves a Riccati equation. 
RICC»A Riccati equation is defined by the A and B 
RICC»matrices of a linear systems and an 
RICC»integral involving two weighting matrices 
RICC»Q and R (often unity matrices) where 
RICC» 
RICC». 
/inf 
! 
RICC»x=A*x+B*u and I 
(x'*Q*x + u'*R*u)dt = MIN 
RICC» 
/0 
RICC» 
RICC»System matrix A (NO DEFAULT): <0,1;0.-1> 
RICC»Input matrix B (NO DEFAULT): <Q;1> 
RICC»Weight matrix Q (DEF=Unity) : <1,Q;0,Q> 
RICC»Weight matrix R (DEF=Unity) : 
FF = 
1 
0.7321 
Especially for functions with many parameters, this 
facility is very useful. Moreover, if the user is 
uncertain on the meaning of a particular parameter, 
he can enter a HELP for further information. 
RICC»System matrix A (NO DEFAULT): HELP 
RICC»Please enter a matrix describing the state 
RICC»connections of a linear system. This matrix 
RICC»is the A matrix in the system description 
RICC» . 
RICC» x=A*x+B*u 
RICC» y=C*x+D*u 
RICC» 
RICC»System matrix A (NO DEFAULT): 
If at this point the users has forgotten the name 
of an already created system matrix, or if he has 
to perform some intermediate calculations, one of 
the options available to him would be to open an-
other interactive session through the command 
SPAWN, and thereby get access to the general HELP 
facility, directory command or any other IMPACT 
statements. He can thereafter return the generated 
state matrix directly to the RICC query function: 
RICC»SYSTEM: SPAWN 
%IMPACT-MESSAGE, Local session RICC_1 is started. 
%IMPACT-MESSAGE, All variables in TIME are imported 
%IMPACT-MESSAGE, 
to RICCJ as local copies. 
RICC_1» HELP 
RICC_1» A = A MAT( svsl ) ; — extract A from svsl 
RICC_1 » RETURN A 
%IMPACT-MESSAGE, Local session RICCJ is closed. 
%IMPACT-MESSAGE, All local variables are deleted. 
% IMPACT-MESSAGE, 1 parameter is passed back to 
%IMPACT-MESSAGE, queried function RICC. 
RICC»Input matrix B (NO DEFAULT): 
The user has three choices to close session RICC_1 : 
With RETURN »value1, he deletes the intermediate 
session RICCJ and at the same time gives back a 
value to the querying function. The commands RETURN 
and DELETE(RICC_1) both close RICCJ and force 
IMPACT to return to the original query for A. The 
equivalent meaning in this case of RETURN and DE-
LETE(RICC_1) is a good example of the previously 
explained close connection between functions (left 
with RETURN) and sessions (closed with DELETE). The 
following 
diagram 
also 
illustrates 
these 
resemblances: 
MAIN_SESSION 
TIME 
FREQ 
SCRATCH 
RICC(//QUERY) 
"query" 
RICCJ 
A_MAT (*) 
In session RICC_1 it is of course also possible to 
import foreign variables and to switch to other 
sessions. However, the RICC_1 session only exists 
as long as session TIME, and we can only return to 
the queried function RICC by deleting session 
RICCJ . 
QUERY MODE AND USER MACROS 
In the last chapter we saw an example on how the 
query option was used by the system-defined func-
tion RICC. We now have to ask ourselves the follow-
ing obvious question: How does IMPACT know what in-
formation to give the user when RICC has been in-
teractively defined by the user just a few minutes 
ago? Well, the answer is as obvious. Either IMPACT 
does not know, in which case the query-mode only 
prompts for the parameters using the formal parame-
ter names (which is not much help for the person 
not familiar with the function), or we have told 
IMPACT what to ask. The definition of RICC is 
therefore extended once again: 

114 
M. Rimvall and L. Bomholt 
Function RICC(a,b,q=eye(dim(a,1)), 
r=eye(dim(b,1))); 
INFO —RICC 
GeneralCThe function RICC solves 
General(fA Riccati equation is 
. . . ' ) ; 
Param_name(Ά' ) ; 
Param_short(»System matrix A (NO DEFAULT)1); 
Param_long(fPlease enter a matrix 
. . . ' ) ; 
Param_long(»connections of a linear ...f ) ; 
END*INFO; — RICC 
v,d,p : MATRIX; 
k,n 
: INTEGER; 
BEGIN — RICC 
RETURN -r\b'*p; 
END RICC; 
The same method is used for the system func-
tions/procedures defined in Ada. In fact, a close 
resemblance exists between the macros coded in 
IMPACT and the functions/procedures implemented in 
Ada. This is very advantageous both for the IMPACT 
developer and for the advanced IMPACT user: As the 
user input, and any functions described in the com-
mand language, have to be interpreted rather than 
compiled, the execution of complex algorithms de-
scribed by command language is rather slow. During 
the development of new algorithms, this is offset 
by the time not spent on compilations. However, to 
obtain shorter execution times, any complex algo-
rithm should be compiled and incorporated into the 
package itself as soon as it is developed and 
tested. As both types are similar, such a transi-
tion can be made with a minimum of recoding. 
SUMMARY 
We have in this contribution discussed several as-
pects of man-machine interfaces in CACSD. We have 
stated the need, in particular in a research envi-
ronment, for a highly structured, command driven 
interface with which it is possible to develop new 
control algorithms based upon standard primitives. 
We have seen examples of the IMPACT command lan-
guage, which together with a modular session con-
cept used to structure the user working environment 
gives us an excellent control research environment. 
Finally, we have seen how the same complex interac-
tive environment can be made accessible to novices 
and sporadic users through a query-option. 
REFERENCES 
ANSI/MIL-STD 1815 A (1983). Reference manual for 
the Ada programming language. 
Digital Equipment Corporation (1982). VAX/VMS com-
mand language user's guide, version 3.0. Chap-
ter 2. DEC, Maynard, Massachusetts, USA. 
Little, J.N., A. Emami-Naeini, and S.N. Bangert 
(1984). CTRL-C and matrix environments for the 
computer aided design of control systems. In A. 
Bensoussan, J.L. Lions (Ed.), Proc. 6!th Inter-
national Conference on Analysis and Optimiza-
tion (INRIA). Lecture notes in Control and In-
formation Sciences £2., Springer Verlag, pp. 
191-205. 
Moler, C. (1980). MATLAB, User's Guide. Department 
of Computer Science, University of New Mexico, 
Albuquerque, USA. 
Potter, J.E. (1966). Matrix quadratic solutions. 
SIAM Journal of Applied Mathematics, 1Ü, 496-
501. 
Rimvall, M., (1983). IMPACT, Interactive Mathemati-
cal Program for Automatic Control Theory, A 
Preliminary User's Manual. Institute for Auto-
matic Control, ΕΊΉ Zurich, Switzerland. 
Rimvall, CM., F.E. Cellier (1984a). IMPACT - In-
teractive Mathematical Program for Automatic 
Control Theory. In A. Bensoussan, J.L. Lions 
(Ed.), Proc. 6'th International Conference on 
Analysis and Optimization 
(INRIA), Lecture 
notes in Control and Information Sciences £3.» 
Springer Verlag, pp. 578-597. 
Rimvall, M. (1984b). On the use of Ada in CACSD. In 
Proc. Workshop on computer aided control sys-
tems design, Brighton September 19-21 1984. In-
stitute of Measurement and Control, London. 
Walker, R., C. Gregory, and S. Shah (1982). MA-
TRIX*, A Data Analysis, System Identification, 
Control Design, and Simulation Package. IEEE 
Control Systems Magazine, 2., 30-37. 
» 
FREQ» 
V 
TIME» 
—-\ 
SCRATCH» 
, -J 
Fig. 1. IMPACT sessions on a workstation supporting 
virtual windows. 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
DEVELOPMENT AND EVALUATION OF 
HARDWARE/SOFTWARE SYSTEMS 
EVALUATION OF COMPUTER SYSTEMS FOR 
CONTROL SYSTEM DESIGN 
P. P. J. van den Bosch* and Guo Shilling** 
*Delft University of Technology, Department of Electrical 
Engineering, 
PO Box 5031, 2600 G A Delft, The Netherlands 
**Beijing Institute of Control Engineering, People's Republic of China 
Abstract. 
We will 
discuss 
and evaluate 
a number 
of 
different 
computer 
systems 
for 
computer-aided control system design, ranging from superminis (VAX) to 
microcomputers 
(IBM PC). This evaluation will deal with price, software support, calculation speed, memory 
size and graphical output facilities. 
Keywords: 
Computer-aided 
design, 
Computer-aided 
system 
design, 
Control 
engineering 
computer 
applications, 
Computer 
evaluation, 
Computer 
graphics, 
Computer 
hardware, 
Computer language. 
1. INTRODUCTION 
The widespread availability of the digital computer to 
a large group of control theorists and technicians has 
had a significant impact on Computer-Aided Control 
System Design (CACSD). Up to now, there have been 
a number of sophisticated CACSD programs which can 
improve 
the 
efficiency 
of 
analyzing 
or 
designing 
control systems. A great deal of software has been 
developed for CACSD; in the past this was mainly 
intended for large, centralized 
computers, but during 
the seventies the emphasis swung to minicomputers 
and in this decade both to superminicomputers and to 
microcomputers. Each of these installations has its 
own performance-price ratio. In this paper we will 
review a number of digital computer installations with 
respect to their ability to be used for CACSD. 
Therefore, 
we 
will 
first 
derive 
a 
number 
of 
requirements to be posed on an CACSD environment, 
namely the application software, the hardware and the 
compiler of the computer installation. 
2. REQUIREMENTS 
In this section we will discuss a number of subjects 
that are important in designing and/or using CACSD 
software, namely 
1 user interface 
2 documentation 
3 compiler 
4 calculation speed 
5 memory requirements 
6 linear design programs. 
1. User interface: 
If a program has attractive and reliable mathematical 
algorithms, it may still be inferior with respect 
to 
control system design when the interaction between 
the program and its user is not accepted by the user. 
This interaction is determined by a number of factors, 
but especially by the communication between the user 
and the program 
and 
the 
presentation 
of 
graphic 
information (Van den Bosch and Bruijn, 1979). Only an 
interactive program can support a 
designer-oriented 
environment. 
Either 
a 
command 
language 
or 
a 
question/answer 
approach can take care of the communication between 
the program 
and the user. In general, a command 
language is selected for CAD programs because it 
yields 
the 
necessary 
flexibility 
for 
most 
users. 
However, inexperienced users lack the guidance of a 
question/answer 
approach. 
By 
means 
of 
extensive 
support 
capabilities, 
clear 
error 
messages 
and 
a 
macro-facility, 
some 
guidance 
can 
be 
incorporated 
into a command language. A macro-facility combines 
separate commands to obtain a higher-level command 
language which is easier to use, but is, at the same 
time, less flexible tWieslander, 
1979). 
In designing control systems, graphic representations 
of the system behavior are of paramount importance. 
Although 
numbers 
are 
much 
more 
exact, 
design 
considerations mainly deal with graphic representations 
of 
a 
system. 
For 
example, 
linear 
optimal 
state 
feedback, output feedback or pole placement are well-
established, 
mathematically-oriented 
methods 
for 
control system design. However, whether or not such 
a 
design 
meets 
the 
ultimate 
design 
requirements 
cannot be judged by looking at only the value of the 
criterion or at the feedback matrix. In general, only 
time (or freqency) responses offer enough information 
to 
make 
an 
evaluation 
of 
the 
ultimate 
system 
behavior possible. 
So, 
a 
graphical 
display 
or 
a 
plotter 
is 
almost 
unavoidable when analyzing or designing systems. 
2. Documentation: 
Programs produce large amounts of data. In order to 
keep track of all this data, it is necessary to have 
good documentation 
facilities on all printed output. 
So, all plots and output printed for later use need 
some 
headings 
that 
contain 
information 
concerning 
date, time, user and file names. 
3. Compiler: 
In spite of the availability of many new programming 
languages, such as Pascal, Ada and Modula-2, Fortran 
is still widely used and accepted for technical and 
scientific work. The majority of subroutine libraries 
for control system design are Fortran oriented. Conse-
quently, a Fortran compiler has to be available. This 
compiler has to satisfy at least the Fortran 66 or 
Fortran 77 standards or a generally-accepted subset of 
this 
language. 
Although 
double-precision 
complex 
numbers 
are 
not 
incorporated 
in 
the 
Fortran 
77 
115 

116 
P. P. J. Van Den Bosch and Guo Shuling 
standard, this data type is very useful and almost 
necessary in many algorithms. 
4. Calculating speed: 
Simulation 
and 
non-linear 
optimization 
pose 
severe 
requirements 
on 
the 
calculating 
power 
of 
the 
computer. 
Consequently, 
the 
calculating 
speed 
of 
computers used in an interactive environment is very 
important. Other design programs, for example those 
based 
on 
pole 
placement, 
require 
less 
calculating 
speed. 
5. Memory requirements: 
Design programs can be quite large. Especially when 
high-order systems are allowed, much memory has to 
be 
available, 
for 
example 
200k 
to 
IM 
bytes 
of 
internal memory. Overlay or virtual 
memory 
tech-
niques reduce the requirements for physical memory. 
Although the overlay technique increases the size of a 
program 
that 
can 
be 
run 
on a 
minicomputer, 
it 
restricts the largest module to a predefined 
value. 
For example, with a PDP 11 this maximum size is 
64k bytes. Even if more memory is available, 
the 
largest 
module 
of 
programs 
that 
have 
to 
be 
in 
memory at the same time is still limited by this 
amount 
of 
64k 
bytes. 
Virtual 
memory 
techniques 
really increase the size of programs. This may be 
needed when dealing with MIMO systems or simulation 
programs with a large database for the 
simulation 
model. 
Owing to their limited memory capacity of 64k bytes 
and 
their 
lack 
of 
overlay 
or 
virtual 
memory 
techniques, the 8-bit microcomputers are not suitable 
for large CAD programs. 
6. Linear design programs: 
For many years the theory of control system analysis 
and design has been developed with little or no consi-
deration of the reliability of the underlying numerical 
calculations. In spite of this lack of interest, these 
algorithms 
still 
work 
satisfactorily 
for 
low-order 
systems, especially if double-precision 
accuracy 
has 
been implemented. However, the growing interest in 
the 
application 
of 
multivariable 
system 
theory 
to 
large 
and 
complex 
systems 
has 
exposed 
the 
computational deficiencies. This emphasizes the need 
for 
efficient, 
reliable 
and numerically stable 
algo-
rithms. Recently, much research has been devoted to 
linear 
algebra 
to derive and describe reliable 
and 
numerically stable algorithms. Denham et al. (1983) 
indicate that, at least at present, concentration on 
the 
use 
of 
system 
models 
which 
involve 
the 
manipulation of real matrices is more likely to yield 
numerically robust algorithms than is the case 
for 
models involving polynomial manipulations. This favors 
the use of state-space models instead of matrices of 
tranfer 
functions. 
At 
present 
there 
is a class of 
generally-accepted 
subroutine 
libraries, 
such 
as 
UNPACK (linear algebra) and EISPACK (eigenvalues) 
which can be used as a reliable basis for computer-
aided 
design 
programs. 
The 
subroutine 
package 
ORACLS (Armstrong, 
1980) supplies 
the 
user 
with 
Fortran 
subroutines 
for 
designing 
with 
the 
Linear 
Quadratic Gaussian (LQG) methodology. 
Research is going on in several places in the world to 
extend these subroutine libraries for general use in 
interactive analysis and design packages, for example 
SLICE (Denham et al., 1983) and SYCOT (Van den 
Bosch and Van den Boom, 1985). 
In table 1 we have illustrated the influence of using 
either 
single 
or 
double 
precision 
numbers 
for 
calculating 
the 
eigenvalues 
of 
a 
matrix. 
The 
eigenvalues 
are 
calculated 
with 
the 
aid 
of 
the 
programs BALANC, ELMHES and HQR taken 
from 
EISPACK. The eigenvalues have to be -1, -2, -3, .. , 
-10. 
This simple example 
illustrates 
the 
importance 
of 
using double precision numbers even if we use reliable 
and robust algorithms. In particular, we have to use 
double precision numbers if we utilize the coefficients 
Table 1. Influence data type. 
Single precision 
I 
RE 
IM 
1 - 0.9999, 
0.0000 
- 2.0019, 
0.0000 
- 3.1459, 
0.3290 
- 3.1459, -0.3290 
- 4.6426, 
1.6349 
- 4.6426, -1.6349 
- 7.2879, 
2.8287 
- 7.2879, -2.8287 
-10.9227, 
1.7578 
1 -10.9227, -1.7578 
Double precision 
RE 
IM 
-1.0000, 0.0000 
-2.0000, 0.0000 
-3.0000, 0.0000 
-4.0000, 0.0000 
-5.0000, 0.0000 
-6.0000, 0.0000 
-7.0000, 0.0000 
-8.0000, 0.0000 
-9.0000, 0.0000 1 
-10.000, 0.0000 
or roots of polynomials. 
In conclusion, the main requirement for linear design 
programs is the availability of efficient, reliable and 
numerically 
robust 
algorithms 
for 
the analysis 
and 
design of linear systems and a software environment 
that supports double precision real numbers. 
3. COMPUTER CONFIGURATIONS 
At 
the present 
time many computer 
configurations 
can be selected to realize a computer-aided design 
environment. 
We can 
distinguish 
among 
supermini-
computers, minicomputers and 
16- or 32-bit 
micro-
computers. Each installation has its own capabilities, 
support and price. In this section we will compare 
these 
installations 
for 
computer-aided 
design 
applications. We will discuss a VAX 750 with VMS, 
the 
PDP 
11/23 with 
RSX-11M, 
the TULIP 
16-bit 
microcomputer with MS.DOS and the IBM PC 8/16-bit 
microcomputer with PC.DOS. The VAX and PDP are 
manufactured by Digital Equipment Corporation 
and 
are equipped with an appropriate floating-point pro-
cessor. The TULIP has Intel's 8MHz 8086 processor 
and the Intel's 8 MHz 8087 floating-point 
processor 
and 
is 
manufactured 
by 
the 
Dutch 
company 
Compudata in Den Bosch. The IBM PC has Intel's 4.77 
MHz 
8088 
and 
8087 
processors. 
Both 
use 
the 
Microsoft Fortran V3.2 compiler. 
In this section we will discuss a number of software 
and hardware aspects of a computer installation with 
respect to CACSD purposes. 
Fortran compiler 
Although many Fortran compilers claim to satisfy the 
Fortran 77 standards, a number of modifications are 
still 
required 
to 
convert 
a 
program 
from 
one 
computer 
to another one. These differences 
mainly 
concern the difference in dealing with input/output to 
and from the user terminal and to and from the disk. 
If we compare the calculation speed of an application 
program on several installations we compare, in fact, 
the 
combination 
of 
hardware 
and 
software. 
The 
software part is mainly influenced by the efficiency 
of the code produced by the Fortran compiler. The 
efficiency 
of 
these 
compilers 
may 
differ 
from 
operating system to operating system. But even one 
compiler can be utilized in many different ways. In 
order to illustrate the effect of utilizing one compiler 
in its many different 
methods of operation, we have 
selected the Microsoft 
Fortran 77 compiler, 
version 
V3.2. 
This 
compiler 
can 
be 
used 
for 
almost 
all 
MS.DOS computers and the IBM PC. This type of 
computer 
now dominates 
the 
16-bit 
microcomputer 
market. The results of this comparison are shown in 
the appendix. 
Operating system support 
There is a difference in quality and support of the 
compilers available 
for 
the operating systems. The 
Fortran compilers of VMS and MS.DOS support both 

Evaluation of Computer Systems 
117 
the data types of double precision complex numbers. 
The Fortran compiler of RSX lacks this data type. 
The MS.DOS operating system still does not have the 
refinements and facilities of, 
for example, VMS or 
RSX-11M. Two facilities could improve its value for 
CACSD usage, namely a better support of run-time 
errors and the facility to interrupt a program. Both 
will now be explained. 
If an exception (under- or overflow) occurs during a 
mathematical 
operation, 
for 
example 
during 
multiplication, addition, sine calculation, etc., the run-
time system can handle this exception in 
different 
ways. 
-An error can destroy the program, so that the only 
possibility for the user is to restart the computer, 
-it can stop the program and return control to the 
operating system, or 
-it can detect the kind of error an supply the user 
with 
a 
useful 
error 
message, 
and 
then 
continue 
operation with a predefined action. 
The last possibility is the most suitable, and moreover 
standard 
procedure 
with 
VMS 
and 
RSX-11M. 
Sometimes, 
running 
a 
program 
with 
MS.DOS 
may 
result 
in 
one 
of 
the 
first 
two 
situations. 
The 
likelihood of influencing the error recovery procedure 
with MS.DOS is much less than with VMS and RSX-
11M. 
If a program runs with MS.DOS, it cannot be stopped 
by a user unless the programmer of that program has 
taken 
special 
actions. 
For 
example, 
starting 
a 
simulation run with a very small integration interval 
can mean that a large time will elapse before the 
simulation 
stops. 
Such 
a 
run 
cannot 
be 
stopped 
without resetting the computer. 
Of course, the programmer can take special actions 
to avoid this undesirable situation, but this requires 
programming with assembler language. 
Program development 
Up to now we have considered the computer system 
from the point of view of running CACSD programs, 
in which case only calculation time, memory size and 
graphical capabilities are important. However, 
there 
are also CACSD programs, e.g. simulation programs, 
that require one or sometimes more editing, compi-
lation 
and 
link 
steps. 
Then, 
other 
requirements 
become 
important, 
especially 
disk-access 
time 
and 
disk space. 
In decending order with respect to their access times 
we can distinguish RAM disks, winchester disks and 
floppy disks. A RAM disk is a part of the internal 
memory that is declared and used as a disk. The VAX 
and 
PDP 
computers 
have 
a 
winchester 
disk. 
Microcomputers in general utilize floppy disks or a 
winchester disk. When program development becomes 
important, a winchester 
is almost 
necessary. It 
is 
interesting to note that linking of a large program 
can be executed with VMS and MS.DOS much faster 
than with RSX. With RSX we need overlays, which 
are avoided with MS.DOS. For example, linking of PSI 
requires about 1 to 2 minutes with a VAX, about 3 
minutes with a TULIP with a winchester disk, about 
10 minutes with a TULIP I with 800 k floppies and 
utilizing a RAM disk and about 10 to 30 minutes with 
a multi-user RSX system equipped with a winchester 
disk. 
The size of the programs to be stored on one floppy 
disk may be a limiting factor to be able to develop 
programs. In table 2 we illustrate the size of the 
Fortran V3.2 compiler and linker of Microsoft. 
This indicates that developing Fortran programs on an 
IBM PC with 
360k 
floppy 
disk 
drives 
may be a 
tedious job. Different 
floppies have to be used just 
for 
the 
operating 
system, 
the 
screen 
editor, 
the 
compiler and the linker, which requires a 
frequent 
exchange of the floppies in the drives. Then, the 800k 
Table 2. Size of compiler and linker of Microsoft 
Compiler: 
Linker: 
Libraries: 
Total 
FOR1.EXE 
PAS2.EXE 
LINK.EXE 
FORTRAN.LIB 
MATH. LIB 
120k 
97k 
40k 
86k 
35k 
378k 
floppy disk drive of the TULIP I and the 1.2M floppy 
disk drive of the IBM PC/AT are more attractive. 
The capacity of a floppy disk drive can be a limiting 
factor for the storage of large CACSD programs. 
Graphics Capabilities: 
In our comparison we have equipped the VAX and the 
PDP with the VT241 color terminal. The IBM PC uses 
IBM's color graphics adapter, although other graphic 
adapter 
boards 
have 
now 
become 
available 
(e.g. 
Hercules, 
Tecmar). 
A comparison 
of 
the 
graphics 
capabilities of the two microcomputers is shown in 
table 3, namely the number of different colors, the 
resolution (in dots) and the possibility to use 
two 
separate display memories: one alphanumeric memory 
for 
text 
(the communication 
between program 
and 
user) and one graphics memory for the graphics to be 
displayed on a screen. 
Table 3. Comparison of graphics 
capabilities. 
[Name 
VT241 
TULIP I 
IBM PC 
colors resolution sep.mem. 
1 
4 
800*240 
no 
8 
768*288 
yes 
4 
320*200 
no 
This table is illustrated in figure 1. In figure 2 we 
show the difference in the number of pixels that can 
be draw on the screen. This number not only depends 
on the resolution but also on the number of colors. 
vertical 
l 
TULIP 1 
IBM PC 
VT241 
J 
». 
horizontal 
Fig. 1. Graphics resolution for 1 color. 
Calculation speed 
Table 4 compares the calculation speed of a number 
of computer installations running the 
block-oriented 
simulation program PSI (Van den Bosch, 1983). Such a 
program 
has 
a relatively 
large number 
of 
integer 
operations in order to calculate appropriate pointers 
in the program. Still, these 
numbers give a good 
comparison of the computing power of the 
different 
processors. All computers are used in a single-user 
mode, which is not common practice for the multi-
user systems. Moreover, we have indicated whether or 
not 
the 
computer 
is 
equipped 
with 
a 
separate, 
dedicated hardware floating-point processor. 

118 
P. P. J. Van Den Bosch and Guo Shuling 
Pixels 
A 
1M 
TULIP 
VT 241 
IBM PC 
Fig. 2. Number of pixels. 
Calculating time 
« - 
l-J 
3 M I I VJ 
CL 
CL 
i 
Q 
1 
a. 
21 
O 
CD 
t_ 
— 
«_» 
m 
-^ 
> 
Q-
* - 
— 
Q 
O 
CL 
X 
CL 
tn 
o 
< 
. 
, 
— 
^ 
Û . 
> 
! 
· 
Q_ 
O 
o 
$ 
E 
Ë 
1 
5 
i 
i 
; 
i 
i 
Ü 
• 
1 
1 
_J 
Z> 
K-
Table 4. Comparison of calculation times. 
Computer 
hardware 
VAX 750 
microPDPll/73 
micro VAX I 
PDP 11/23 
TULIP I 
microPDP 11/23 
IBM PC 
TULIP I 
IBM PC 
FPP 
yes 
yes 
no 
yes 
no 
no 
relative 
calc. time 
1.0 
1 
1.8 
2.1 
3.2 
3.6 
i 
4.1 
8.6 
. 
9.8 
J 
23.5 
J 
This table is illustrated in figure 3. With a solid line 
we assume that each computer installation has only 1 
user. With the dotted line we assume that the VAX 
has 4 users and the microVAX and PDP has 2 users. 
Overall comparison 
Table 
5 
illustrates 
the 
price 
per 
terminal, 
the 
maximum size of a program 
loaded in memory and 
the calculation speed. The price per terminal is the 
price of the computer system with terminals, divided 
by the number of terminals. This price is normalized 
for the IBM PC. For example, 4 CAD stations can be 
realized with 4 TULIP I computers or one VAX with 
4 terminals. In such a case, the VAX solution is six 
times 
more 
expensive. 
The 
calculation 
speed 
is 
normalized for a VAX 750 with one user, running a 
simulation program. With four users this speed can 
drop to 0.25. 
Fig. 3. Relative calculation time. 
These tables indicate that 
a decentralized 
solution 
with 
separate 
16-bit 
microcomputers 
yields 
an 
attractive price-performance ratio. Depending on the 
number of users of the multi-user VAX, a TULIP can 
be up to three times slower or a little faster, it has 
better graphics capabilities and it costs much less 
than 
a 
solution 
based 
on 
a 
VAX. 
Although 
the 
calculating speed of a microcomputer may be less, 
response times to commands of the user are shorter 
than in a multi-user environment. The IBM PC offers 
a less attractive performance. In 1985 the IBM PC/AT 
has become available. This computer uses the 6 MHZ 
80286 processor of Intel. From the point of view of 
calculation speed this new computer can be compared 
with the TULIP with its 8MHz 8086. 
As soon as a decentralized solution has been selected, 
the administration becomes more complicated. It takes 
more 
time 
and 
effort 
to update all 
decentralized 
computers with the newest versions of the software. 
Moreover, 
the exchange of 
data, 
models and 
files 
becomes more complicated, namely via floppy disks 
instead of via the common large disk. On the other 
hand, 
with 
a 
decentralized 
solution 
each 
user 
is 
responsible for his or her own files and models. If he 
is willing to work with older versions of the software, 
there will be fewer conversion problems. 
An important improvement can be obtained by using a 
Local 
Area 
Network 
(LAN) 
to 
connect 
all 
decentralized microcomputers with each other. Then, 
the exchange of files and data among several users, 
all 
connected 
to 
the 
same 
LAN, 
can 
easily 
be 
realized. 
Table 5. Comparison among computers. 
Name 
backgr. 
number of 
memory 
terminals 
price per 
terminal 
maximum 
program size 
calculation 
speed 
VAX 750 
microVAX I 
PDP 11/23 
TULIP I 
IBM PC 
60M 
31M 
10M 
2*800k 
2*360k 
virtual memory 
virtual memory 
64k+overlay 
896k 
640k 
1-0.25 
.5-. 25 
0.3-0.15 
0.3 
0.14 

Evaluation of Computer Systems 
119 
At our laboratory we have decided to decentralize the 
CAD facilities from a multi-user environment to a 
number of stand-alone computers or work stations. We 
have selected the TULIP I computer for this purpose, 
but fast computers of other manufacturers exist as 
well, for example the M24 of Olivetti, the Apricot 
and Wang computers. 
Future developments 
Even 
more 
powerful 
microprocessors 
are 
already 
announced for 1985 (Zorpette, 1985). In particular, the 
32-bit 
microprocessors 
such 
as 
the 
MC68020 
of 
Motorola and the NS32332 of National Semiconductor 
Corporation 
are 
very 
promessing 
with 
respect 
to 
calculating 
power. 
The 
16.7MHz 
MC68020 
has 
a 
calculating power approaching 4 million 
instructions 
per second (MIPS) while the NS32332 will reach 2.5 to 
3 MIPS. 
These numbers are quite impressive compared 
with 
other 
announcements 
in 
1985 of 
superminicomputer 
systems, such as the VAX 8600 of Digital Equipment 
Corporation 
(4 
MIPS), 
the 
MV/10000SX 
of 
Data 
General (3.6 MIPS) and the Prime 9955 with about 3.5 
MIPS. 
Depending on their price and the ability to maintain 
their 
calculating 
power, 
incorporation 
of 
these 
powerful 
32-bit 
microprocessors 
in 
32-bit 
microcomputers can yield an even more 
attractive 
work 
station 
for 
CACSD 
than 
the 
present 
16-bit 
microcomputers. 
CONCLUSION 
Many requirements for CACSD have been discussed. 
These 
requirements 
pose 
severe 
restrictions 
in 
selecting an appropriate digital computer for CACSD 
applications. We have compared 
superminicomputers, 
minicomputers and 16-bit microcomputers. 
At this moment (1984/1985), the 16-bit microcomputer 
yields 
a 
very 
attractive 
performance-price 
ratio, 
which makes it a new and interesting work station for 
the 
control 
engineer. 
New 
defacto 
standards 
on 
hardware 
(IBM PC) 
and 
software 
(MS.DOS, 
UNIX) 
offer new possibilities for the exchange of data and 
programs among the control engineering community. 
We are of the opinion that a decentralized solution 
with a microcomputer for each user will become even 
more attractive in the near future. 
REFERENCES 
Armstrong, E.S. (1980). ORACLS, A Design System for 
Linear Multivariable Control, Marcel Dekker Inc., New 
York. 
Bosch, 
P.P.J. 
van 
den 
and 
P.M. 
Bruijn 
(1979). 
Requirements and Use of CAD Programs for Control 
System 
Design. 
Proceedings 
IFAC 
Symposium 
on 
Computer Aided Design of Control Systems, Zurich 
1979. Pergamon Press London (459-464). 
Bosch, 
P.P.J. 
van 
den 
(1983). 
Interactive 
System 
Analysis 
and 
System 
Design 
Using Simulation 
and 
Optimization. 
Proceedings 
IFAC 
Symposium 
on 
Computer Aided Design of Multivariable Technological 
Systems, 
Lafayette 
1982. 
Pergamon 
Press 
London 
(225-232). 
Bosch, P.P.J. 
van 
den 
and A.J.W. van den Boom 
(1985). Industrial Applications in The Netherlands of 
Computer-Aided Design Packages for Control Systems. 
Preprints IFAC Symposium on Computer-Aided Design 
of Control and Engineering Systems, Copenhagen 1985. 
Pergamon Press London. 
Denham, 
M.J., 
C.J. 
Benson 
and 
T.W.C. 
Williams 
(1983). A Robust Computational Approach to Control 
System 
Analysis 
and 
Design. 
Proceedings 
IFAC 
Symposium on Computer Aided Design of Multivariable 
and Technological Systems, Lafayette 1982. Pergamon 
Press London. 
Wieslander, J. (1979). Design Principles for Computer 
Aided Design Software. Proceedings IFAC Symposium 
on Computer Aided Design of Control Systems, Zurich 
1979. Pergamon Press London (493-496). 
Zorpette, G. (1985). Microprocessors. IEEE Spectrum, 
Vol 22, no 1 (53-55). 
APPENDIX 
Influence of compiler parameters 
We will discuss the performance 
of 
the 
Microsoft 
Fortran 77 compiler, version 3.2. This compiler can be 
used 
in 
many 
different 
ways, 
partly 
defined 
by 
compiler metacommands and partly by linking it with 
a different library. We show calculation times for the 
following eight mathematical operations: 
Tdo 
an empty DO-loop 
Tint 
multiplication with integer arith-
metic 
Treal multiplication with real arithmetic 
(4 bytes) 
Tdp 
multiplication with double precision 
numbers (8 bytes) 
Ten 
multiplication with complex numbers 
(2*4 bytes) 
Tdpcn multiplication with double precision 
complex numbers (2*8 bytes) 
Tsin 
calculation of sine function with 
real numbers of 4 bytes 
Tdsin calculation of sine function with 
double precision numbers of 8 
bytes. 
These variables Tdo, Tint, Treal, etc. are expressed in 
seconds for 1000 times 
the indicated operations with 
a TULIP I computer. Their relative size can be used 
for the calculating times on other computers, such as 
the IBM PC. The variable "Size" indicates the size of 
the 
executable 
program 
that 
realizes 
the 
above 
mentioned operations, expressed in bytes. 
Metacommands 
The compiler metacommands 
influence the way the 
compiler 
produces 
the 
object 
code 
of 
a 
Fortran 
program. We will only discuss the influence of the 
following metacommands. 
STORAGES 
STORAGES 
FLOATCALLS 
NOFLOATCALLS 
realizes the standard of Fortran 
77. 
All 
variables, 
both 
real, 
integer and logical, are stored in 
integer and logical, are stored in 
4 bytes. 
realizes 
that 
a 
real 
variable 
occupies 4 bytes, and integer and 
logical variables 2 bytes each. 
directs 
compiler 
to 
generate 
calls 
to 
subroutines 
in 
the 
emulator library for floating-point 
operations. 
causes the compiler to generate 
in-line interrupt 
instructions 
for 
floating-point operations. 
Libraries 
Besides the Fortran library (FORTRAN.LIB) one of the 
following libraries has to be selected. These libraries 
are used by the 
linker 
to 
produce 
an 
executable 
program. 
MATH. LIB 
This 
library 
uses 
the 
standard 
IEEE 
floating-point 
accuracy 
of 
80 
bits. 
The resulting 
program 
can be run on computers 
both 
with and without an 8087 pro-
cessor. If an 8087 is present it 
will be used. 

120 
P. P. J. Van Den Bosch and Guo Shuling 
Table 6. Comparison of compiler parameters. 
Metacm. 
Lib. 
8087 
FLT. 4 
MATH. 
+ 
FLT. 
2 
MATH. 
-
FLT. 
2 
MATH. 
+ 
FLT. 
2 
MATH. 
-
NOF. 2 
MATH. 
+ 
NOF. 2 
MATH. 
-
FLT. 
2 
ALTM. 
+ 
FLT. 
2 
ALTM. 
-
FLT. 
2 
8087. 
+ 
NOF. 2 
8087. 
+ 
Ratio big/small 
Tdo 
Tint 
Treal 
Tdp 
Ten Tdpcn 
Tsin 
Tsdp 
.016 
.072 
.080 
.084 
.422 
.457 
.46 
.46 
.016 
.072 
.574 
.608 
2.641 
2.800 
14.22 
14.24 
.008 
.030 
.074 
.076 
.422 
.441 
.44 
.46 
.008 
.030 
.570 
.600 
2.641 
2.801 
14.20 
14.22 
.008 
.030 
.042 
.044 
.418 
.441 
.44 
.46 
.008 
.030 
.752 
.782 
2.641 
2.801 
14.22 
14.24 
.008 
.030 
.204 
.406 
1.223 
2.203 
2.16 
7.84 
.008 
.030 
.204 
.406 
1.219 
2.199 
2.16 
7.84 
.008 
.028 
.060 
.062 
.359 
.379 
.44 
.46 
.008 
.030 
.042 
.044 
.359 
.379 
.44 
.46 
2.0 
2.6 
17.9 
17.8 
7.36 
7.39 
32.3 
30.9 
Size 
47172 
47172 
46836 
46836 
! 
46756 
46756 
44944 
44944 
37958 
37958 
1.24 
ALTMATH.LIB 
This library uses 64 bit accuracy 
for intermediate results. Even if 
an 8087 floating-point 
processor 
is available, it is not used. 
8087.LIB 
This library generates only code for 
the 8087. If this device is not 
present, 
the 
program 
will 
not 
run. All 
mathematical 
operation 
will utilize 80 bit accuracy. 
Calculation time and program size 
Table 6 yields a comparison of the different ways of 
utilizing 
the 
Microsoft 
Fortran 
77, V3.2 
compiler. 
Moreover, we have indicated whether or not an 8087 
hardware floating-point processor is present. 
As can be seen in table 6 the introduction of the 
double 
precision 
data 
type 
for 
reals 
does 
hardly 
increase 
the 
required 
calculation 
time 
for 
mathemathical operations for the 8086/8087 processors 
and the Fortran V3.2 compiler 
of Microsoft. 
With 
MATH.LIB and 8087.LIB this increase is very small. 
Only programs linked with ALTMATH.LIB show some 
additional calculation time. 
In 
applications 
like 
a 
block-oriented 
simulation 
program with its many integer calculations for 
the 
calculation of pointers, the introduction of the 8087 
floating-point 
processor 
reduces 
calculation-time 
requirements by a factor of 4 (using MATH.LIB). If 
we compare the fastest codes of both, i.e. with the 
8087 
we 
use 
NOFLOATCALLS 
and 
8087.LIB 
and 
without 
the 
8087 
we 
use 
FLOATCALL 
and 
ALTMATH.LIB, then the 8087 yields an increase in 
calculation speed by a factor 
of 2.5. Moreover, 
it 
reduces memory requirements by about 10%. 
With special calculations that use heavily goniometric 
and logarithmic functions the increase will be more 
dramatic, as illustrated in table 6. 
Two examples of real programs are used in table 7 
for comparing the influence of the selection of the 
library on the size of the executable module. PSI is a 
block-oriented 
simulation 
program 
with 
relatively 
much 
data 
and 
TRIP 
is 
an 
analysis 
and 
design 
program for linear systems with relatively much code 
(Van den Bosch and Van den Boom, 1985). 
Table 7. Comparison of program sizes 
(bytes). 
Program 
TRIP 
PSI 
NOFLOATCALLS 
FLOATCALLS 
8087.LIB 
ALTMATH.LIB 
326560 
368560 (+13%) 
181834 
198268 (+ 9%) 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INTEGRATED COMPUTER SUPPORT FOR 
THE DEVELOPMENT AND PROJECT 
MANAGEMENT OF SOFTWARE/HARDWARE 
SYSTEMS 
P. Göhner 
Gesellschaft fur Prozeßrechnerprogrammierung 
mbH, Kolpingring 
18a, 
8024 Oberhaching b. München, 
FRG 
Abstract: 
The fact that industrial computer control systems consist more and more of 
complex software and hardware components and it isn't possible to seperate 
software and hardware at the beginning of the design enforces integrated 
development tools, supporting software development as well as hardware 
development. 
Although the development of software components and the development of 
hardware components are different at the realization level they are 
inter-
related to a high degree in the main parts of the development, project 
management and maintenance. 
This paper illustrates the main disadvantages of using separate tools. It shows 
the requirements for an integrated tool and discusses the concept of the 
EPOS system as an example of how these requirements can be satisfied. 
Results of applying EPOS to industrial projects are reported, which show that 
quality and reliability have been improved considerably. 
Keywords 
Computer-aided design; computer-aided system design; computer software; 
computer programming; parallel processing; process control; programming 
languages; project management; specification. 
INTRODUCTION 
The development of software/hardware systems, e.g. as 
in the automation of technical systems, is essentially 
determined by three factors: 
the creativity of the developer 
the development methods 
the development tool 
Although in early years of data processing the deve-
loper's creativity was almost solely the decisive factor 
in the success of a project, in the last few years, it has 
been clearly demonstrated, that without the application 
of suitable tools and development methods complex 
software/hardware systems are not realizable. 
For this reason, in recent years tools have been crea-
ted, which make it possible, to carry out work intensive 
activities in the development process with computer 
support to reduce the manual error sources. 
The first generation of these development tools consists 
of indépendant tools of different deliverers, each sup-
porting only one part of the development process. The 
main difficulties using these randomly connected tools 
in a project were the overlapping application areas and 
the non-existence of a predefined, well structured app-
lication ordering. 
To avoid the overlapping application the second gene-
ration consists of tool boxes containing different tools 
in some kind of order. Each tool uses its own infor-
mation system and its own user interface. The transfor-
mation between the different information systems has 
to be done manually. Therefore it was very difficult to 
guarantee the consistency of the information 
over 
the whole life cycle of the project. Another handicap 
using tool boxes was the variety of user interfaces. 
The third generation of development systems combines 
adapted tools closer in form of tool systems, using a 
solid data base and one user interface. In the industrial 
application of these tool systems, it has been shown, 
that to reduce the development costs, to improve the 
quality, to cope with the complexity and to realize an 
efficient project control it isn't enough to support the 
development of software using a tool system, to support 
the development of hardware using another tool system 
and to support the project management using a third 
tool system. 
To produce computer control systems, that means inte-
grated software/hardware systems, it is necessary to 
give integrated support in the technical development of 
software /hardware, the project management as well as 
the product management. Although, only a few years 
ago, such a production environment for integrated soft-
ware/hardware systems appeared unthinkable, some 
computer support systems have now been conceived, 
which attempt to realize these advanced aims. 
In the following section, the requirements for an inte-
grated support system to be used in the development of 
software/hardware systems will be stated. As an exam-
ple of an integrated support system several features of 
the 
Engineering 
and 
Project-management 
Oriented 
Support system EPOS are explained. Results of applying 
EPOS to a great number of 
industrial projects are 
reported. 
121 

122 
P. Göhner 
REQUIREMENTS FOR AN INTEGRATED SUPPORT 
SYSTEM 
1. 
Integrated support throughout all development 
and maintenance phases 
The development process includes three main activities: 
requirements engineering 
system design 
implementation 
Requirements engineering includes, first, determining 
and defining the problem statement for the system to 
be developed and, secondly, establishing a problem 
solving concept breaking down the user requirements 
into technical oriented requirements. 
During the system design the technical problem solving 
concept 
is 
transformed 
into 
a 
software/hardware 
system. The process of system design begins with 
system structuring, which partitions the whole system 
into subsystems, which declares the interfaces to the 
outside and the internal interfaces, and which defines 
the relations between the subsystems. After the system 
has been structured first a rough design and then a 
detailled design of software and hardware follow. 
Implementation includes on the one hand transforming 
the detailed software design into programs coded in a 
specific programming language, and on the other hand 
transforming the detailed hardware design into circuits. 
The implementation process also includes testing the 
software and hardware subsystems, integrating soft-
ware and hardware and validation of the total system. 
Although the development phases are very different in 
nature they are to a high degree interrelated. Between 
successive phases there are transitions in both direc-
tions. The main transition is the top-down direction 
because the results of the former phases are the 
starting point of the following phases. In all projects 
there are iterations and it is necessary to go back and 
to redesign the former levels. 
It is therefore indispensable to have computer aided 
transitions between the different phases and computer 
checkable relations between them. 
The main disadvantages of using different tools to 
support requirements engineering, system design and 
implementation become obvious: 
missing computer assistance in checking consisten-
cy and completeness of the information belonging 
to different phases during the whole life cycle 
missing computer assistance in transforming the 
specifications of the former phases to the follo-
wing phases. 
To realize an integrated support system throughout all 
development phases it is necessary to have computer 
support in 
specifying 
the information belonging to require-
ments engineering, system design and implemen-
tation 
checking 
requirements 
specifications, 
system 
design specifications and program/hardware speci-
fications for consistency and completeness 
transforming the requirements specifications into 
system design specifications, the system design 
specifications into program specifications 
2. 
Integrated support of software and hardware deve-
lopment 
The increasing number of embedded systems, which was 
one of the main causes for the development of the Ada 
programming language enforces more and more a com-
bined design of software and hardware components. To 
realize an integrated software/hardware development it 
is essential to have integrated development tools, which 
allow the description of the realization independent 
structuring of the system as well as the specification of 
the software and of the hardware structure. 
Therefore it is necessary to have means to describe, to 
analyze and to document on the one side software 
design objects, i.e. modules, procedures, tasks, data, 
interfaces, on the other side hardware design objects, 
i.e. hardware components, signals, bus connections, 
computers, and most important the relations between 
the software and the hardware design objects that 
means the relations between the logical structure and 
the physical structure of the system. The main diffi-
culties using separate design tools for the development 
of software and hardware components result from the 
enforced early and final decomposition in software and 
hardware parts and the lack of analyzing relations 
between the software and the hardware structure. 
3. 
Integrated support of different design methods 
Software/hardware 
systems like process automation 
systems are complex structures which allow different 
viewpoints because of their composition of different 
types of elements. 
For the development and realization as well as under-
standing of such systems, it is necessary to know: 
the sequence of functions 
the module structure 
parallel activities and the corresponding triggering 
events 
the dataflow 
the datastructure 
the structure of the hardware system 
Various types of development methods can be derived 
from these different viewpoints. Depending on which of 
the above are dominant the following methods can be 
disinguished: 
function-oriented development methods 
module-oriented development methods 
event/process-oriented development methods 
dataflow-oriented development methods 
datastructure-oriented development methods 
hardware-oriented development methods 
Which of these design methods is the best? The results 
of a lot of published investigations of this question show 
that there is no "best" method. Each method has its 
specific advantages and disadvantages, which depend 
upon the respective problem as well as on the respec-
tive development phase. Therefore it is good practice 
to select the design method according to the respective 
problem, and if necessary, to change the method during 
the design, or to use different 
design methods in 
different subsystems. 

Integrated Computer Support 
123 
To realize an efficient and general purpose 
develop-
ment support system it is essential to integrate the 
different design methods in a method base and to give 
the developer the opportunity to select the suitable 
method according to his task. 
Integrated support of development and project 
management 
Although the project management and the development 
tasks are different in nature they are interrelated to a 
high degree. The development reports about the current 
state of development including problems and esti-
mations to complete and proposes change requests. The 
project management plans, monitors and controls the 
project using the development information to release 
work packages, to fix deadlines and to give cost limi-
tations. 
Just as time-out and delays in a feedback system can 
lead to poor control behavior or even to instability, the 
management of a project also depends on whether the 
information between project management and deve-
lopers flows accurately and without delay. 
The disadvantages of the use of separate tools for 
technical development and for management support 
result from the insufficient exchange of information 
between these tools, the missing computer-assistance in 
checking consistency and completeness between the 
planning of tasks and their implementation and the 
frequently subjective and inaccurate project 
reports 
with the latest information available only at the end of 
a report period. 
5. 
Integrated product management 
Product management includes the management of all 
temporary and final results during the whole life cycle 
of the product and consists of version control, variant 
control, configuration control and quality control. 
Version control is storing and handling of changes and 
of different versions of the product during the life 
cycle i.e. changes of the requirements specifications, 
the design specifications and the project management 
specifications. 
Variant control is storing and handling of 
different 
variants of the system that means the system exists in 
different types at the same time. 
Configuration control includes the procedural aspect of 
product management that means the fixing of base lines 
and the handling of change requests during the whole 
life cycle. 
Quality control includes all activities to ensure the 
correctness of the results of the technical development 
i.e. the consistency of the requirements specifications 
with design spécifierions, the correct realization of 
design specifications in form of programs and hardware. 
In addition to the strong connections between project 
management and technical development there are also 
strong connections between project management and 
product management and between technical develop-
ment and product management. 
For this reason it is necessary to have an integrated 
product management tool, which works directly on the 
data base of the technical development and of the 
project management. The main disadvantage using a 
separate product management tool is the repeated and 
redundant storing of information, whereby it is very 
difficult to ensure that the developers use the right 
version corresponding to a baseline fixed by the mana-
gement. 
6. 
Integrated test and evaluation system 
Besides the development of the operational software-
hardware 
system 
another 
important 
part 
of 
the 
technical 
development 
is the development 
of 
the 
corresponding test and evaluation system, that means 
the specification of test requirements, test strategies, 
test procedures, test programs and test results. An 
integrated 
test 
and 
evaluation 
system 
gives 
the 
opportunity, 
to check 
the 
technical 
specifications 
against the test and evaluation specifications already 
during the design (rapid prototyping). Additionally there 
are computer assisted relations between the operational 
system and the test system during the whole life cycle, 
i.e. if you change some part of the operational system 
the computer states the corresponding tests to be 
performed. 
FUNDAMENTALS OF THE ENGINEERING AND 
PROJECT-MANAGEMENT ORIENTED SUPPORT 
SYSTEM EPOS 
EPOS was developed in order to provide all the parti-
cipants in a project, planners, programmers, electrical 
engineers, project leaders - with a "slave" EPOS work-
station computer. EPOS provides the project parti-
cipants with integrated computer support for: 
producing a consistent, complete, and unambiguous 
customer needs document and/or system require-
ments document 
developing software, especially realtime software, 
which is well-structured, error-free and well-docu-
mented 
developing hardware systems and - in the case of 
an automation project - the sensor and actor 
systems. 
project and configuration management 
product assurance and quality control. 
The EPOS system can be applied from the beginning of 
a system's life-cycle (i.e. starting with the definition of 
the problem statement in the customer needs document 
and/or system requirements document). It offers easy-
to-learn verbal, graphic, and formal means for descri-
bing all phases of problem-solving and system develop-
ment on a hierarchy of levels. 
Furthermore, EPOS also provides users with the ne-
cessary means to describe factors which influence pro-
ject planning and execution, and to describe inter-
mediate results. The formal representation needed for 
computer support is supplemented by natural language 
and graphic descriptions, which simplify communication 
among project personnel. 
All the descriptive information which the various users 
enter using EPOS' description languages ("specification 
languages") is stored in a single central data base. EPOS 
evaluates the contents of this data base with special 
evaluation and analysis programs: the EPOS checks 
whether the requirements defined in the system re-
quirements document were considered; it analyzes the 
various design levels and determines at an early stage 
whether contradictions, incompletions, or other speci-
fication or design errors have occurred. It relieves the 
planner of most of the time-consuming tasks of produ-
cing thorough and complete documentation; and it im-
mediately updates the entire documentation whenever 
changes in the problem-statement or in the problem-
solving concept make this necessary. Moreover, EPOS 
supports system 
managers 
and 
project 
leaders 
in 
planning a project, tracing its development, and con-
trolling its progress. 

124 
P. Gôhner 
All together, the EPOS system includes seven com-
ponents: three description languages ("specification lan-
guages"), three evaluation program systems, and a com-
munication system. The seven EPOS components are: 
The specification 
language EPOS-R which uses 
decision tables and an adaptable degree of 
for-
mality. It is used to define the requirements in the 
customer needs document and system requirements 
document, for constructing models, and for deve-
loping a technical conceptual solution to the prob-
lem at hand. 
The specification language EPOS-S, used to des-
cribe system design (including software and hard-
ware design). It offers the possiblity of automatic 
code generation. 
The specification language EPOS-P, used to des-
cribe information related to project management 
and configuration management (e.g. project struc-
ture plans, work packages, new configurations). 
The program system EPOS-M, which offers com-
puter support 
for management activities related 
to project management and configuration manage-
ment. 
The program system EPOS-A for the early de-
tection of specification and design errors and for 
producing test and result reports. 
The program system EPOS-D for producing the 
entire documentation (texts, lists, graphical 
re-
presentation) according to the information entered 
by means of EPOS-R, EPOS-S and EPOS-P. The 
following kinds of diagrams can be automatically 
generated: hierarchy diagrams, data structure dia-
grams, 
dataflow/controlflow 
diagrams, 
Nassi-
Shneiderman diagrams, flow charts, Petri 
nets, 
project structure diagrams, hardware block dia-
grams, module connections diagrams. 
The communication system EPOS-C for 
simple, 
user-oriented communication between the user and 
the EPOS work-station computer. 
EPOS has been under development at the University of 
Stuttgart, Germany, since 1973. After experimental use 
by students during 1978 and 1979, it has been used since 
1980 in a lot of industrial applications, where it was 
installed and is maintained by the GPP software house 
of Munich. At the beginning of 1985 more than 75 EPOS 
installations had been delivered by GPP. 
REALIZATION OF THE REQUIREMENTS 
FOR AN INTEGRATED SUPPORT SYSTEM 
IN EPOS 
1. 
Integrated support throughout all development and 
maintenance phases 
EPOS supports the development of software/hardware 
systems 
from 
requirements 
specifications 
down 
to 
coding and circuit layout. 
After sufficient decomposition the design specification 
can be transformed automatically to program code for 
arbitrary programming languages as well as to inputs 
for hardware computer aided design systems. During 
the whole life cycle of a computer control system EPOS 
assures the consistency between the design specifi-
cations, the documentation and the program code be-
cause it is possible to retransform changed, optimized 
program code and to correct the design specifications 
and the documentation automatically. Therefore main-
tainability is guaranteed. 
2. 
Integrated support of software and hardware deve-
lopment 
EPOS offers description means to specify the logical 
structure of 
the system as well as the realization 
structure. On the higher design levels the developer 
describes logical relations between actions, data, inter-
faces and events and decides during the design, in which 
way the different parts of the systems are realized by" 
software, hardware and human interaction. It is possible 
to decompose the software structure as well as the 
hardware structure and to state relations between these 
different viewpoints. 
The realization oriented view is documented in form of 
hardware block diagrams, the logical view in form of 
dataflow charts, Petri nets, Nassi Shneiderman dia-
grams and function block diagrams. A graphical repre-
sentation of the connections between the realization 
structure and the logical structure is in work. 
3. 
Integrated support of different design methods 
Appropriate to the goal as an engineer's aid and tool for 
common realtime systems, EPOS is not centered on one 
specific design method. It provides different methods in 
a method base from which the method suitable to the 
engineer and his problem can be selected. EPOS enables 
the use of the design methods described above, i.e. 
EPOS 
has 
facilities 
to 
design 
function-oriented, 
module-oriented, 
event/process-oriented, 
dataflow-
oriented, 
datastructure-oriented, 
or 
device-oriented 
and forces the method rules of the respective design 
method selection with computer assistance. 
A series of consistency tests can be made depending on 
the selected design method. For example, in a data-
flow-oriented method open ends can be found, in a 
module-oriented method violation of visibility rules are 
analyzed, in an event/process-oriented method synchro-
nization errors are detected. 
For each design method there are graphical techniques 
which emphasize the characteristic of a method and its 
dominant objects. A function-oriented design is shown 
clearly in diagrams which present the hierarchy struc-
ture as well as the flow structure (hierarchy-flowchart). 
For the module-oriented method, hierarchy diagrams 
and module connection plans are mainly employed. An 
event/process-oriented design is illustrated by 
Petri 
nets, a dataflow-oriented design by dataflow diagrams. 
The relationships of a data structure-oriented method 
are shown best by data structure diagrams, whereas 
hardware block diagrams showing the structure of com-
ponents and their connections present a device-oriented 
method especially well. Each of these diagrams can be 
generated by EPOS with computer assistance. 
For each design method there are "good" and "bad" 
designs according to how well certain norms are kept 
for the respective methods. For example, in a module-
oriented design many or few modules can be defined, 
and they can have more or fewer connections. That 
means that a norm can be defined for comparison with 
an actual design. The developer 
receives 
computer 
provided information on the quality of his design and 
can make specific changes in the structure. 
These 
metric analyses are presently in development. 
Since not each design method is equally efficient in the 
various development phases, the EPOS system enables a 
change from one design method to another with a 
computer-aided transformation of already existing spe-
cifications. During this transformation the relations are 
changed to complementary relations, i.e. the current 
subset is changed and the designer receives information 
which specifications have to be added to go on using a 
new design method. 

Integrated Computer Support 
125 
4. 
Integrated 
support of development and 
project 
management 
EPOS supports development as well as project manage-
ment. On the development part EPOS allows the speci-
fication, analyzing and documentation of user require-
ments, solution strategies, system structuring, soft-
ware/hardware design down to coding and hardware 
realization. On the project management part EPOS 
allows the specification, analyzing and documentation 
of work breakdown structure in form of subprojects and 
work packages, project organization structure, time and 
cost 
limitations, 
progress 
information, 
resource 
planning, change management and error management. 
But the most important feature of the EPOS system in 
this area is the integrated support of development and 
project management because it is possible to evaluate 
relations between development specifications and pro-
ject management specifications in a computer aided 
way. 
For example the access rights of different 
team-
members during the development can be fixed and 
controlled. It is possible to identify which requirements 
and which part of the technical development belong to 
a distinct work package. In this way the completion of a 
work package can be controlled because the EPOS 
system can reject the completion announcement if 
there are any requirements not fulfilled or some open 
ends in design, i.e. some code parts are missing. 
Another important report produced automatically is the 
objective representation of technical progress and com-
pletion status of the project. 
5. 
Integrated product management 
All objects described with the help of the specification 
languages, i.e. management objects, requirements spe-
cifications, design objects, are assigned a version iden-
tification part and a variant identification part. The 
version identification 
part includes a multiple-digit 
version number in addition to the date and author of the 
change/new entry. The variant identification part in-
cludes one or more variant identifiers and allows the 
definition of different variants of the system. 
EPOS realizes a single source concept also for version 
and variant control. It is possible to put in a specific 
version and/or variant identifier and to work with the 
corresponding specifications, for example to analyze 
the corresponding project management specifications, 
to produce the corresponding code file or to change a 
corresponding requirement. Other features of the EPOS 
product 
management 
system 
are 
the 
showing of 
differences between versions, the checking of changes, 
the fixing of base lines and the management of change 
requests (configuration control). The product manage-
ment system is in development and will be delivered to 
EPOS users at the end of 1985. 
6. 
Integrated test and evaluation system 
Beyond the available analysis system for the detection 
of formal specification errors in the requirements and 
design specifications EPOS is extended to realize a 
design simulation system for rapid prototying. A first 
version will be delivered at the end of 1985, which 
allows the static simulation of the design 
specifi-
cations. 
All activities belonging to the project dependent test 
system are summarized in the "auxiliary design" of the 
EPOS system. Today it is possible to specify 
test 
requirements, to specify, to analyze, to record the 
development of test programs and to describe relations 
between the functional system and the test system. 
The evaluation of the relations is in development and 
will be delivered in 1985, for example the identification 
of functional parts, corresponding to test programs, the 
formulation of test results and the realization of test 
management, i.e. if there are changes in the functional 
system, which tests have to be performed again. 
USE OF EPOS IN INDUSTRIAL PROJECTS 
Application fields 
EPOS has been used in very many different projects. 
The range of applications of EPOS stretches from the 
development of small assembler programs for products 
with large numbers of items to large systems, which are 
realized by different firms with different development 
computers in different programming languages, from 
the development of complex, security-critical real time 
systems to the development of commercial programs, 
from the development of pure software systems to the 
development of integrated software/hardware systems. 
EPOS is used in the development of new systems, in the 
extending of existing systems which were originally 
developed without the aid of EPOS, as also in the 
follow-up 
documentation 
of 
unstructured 
program 
systems. 
The main fields of application of EPOS lie in the 
development of 
- 
control systems for aircraft and areo-engines 
- 
navigation systems for aircraft and land vehicles 
automatic control systems for rotating printing 
machines 
- 
systems for data processing in ships and for the 
organisation of documentation of ship movements 
directing systems in local traffic 
management information systems with distribution, 
exchange and presentation of information 
- 
systems for the dealing with commercial problems 
automatic control systems for test benches 
- 
automatic control systems in local traffic areas 
nuclear power plant monitoring systems 
systems with security-critical components in local 
traffic areas 
- 
injection and antiblocking systems in the motorcar 
industry 
user software for the radiotelephony and radio-
telegraphy sectors 
off-shore-systems 
Experiences in the application of EPOS 
The basic content of the experience report is: 
In practical application EPOS has proved successful. It 
essentially contributes a systematic, structured 
proce-
dure in the development of software and hardware and 
supports both the developer and the project manager. 
In detail, the comments of EPOS users can be summari-
zed as follows: 
- 
On the whole EPOS is applied without difficulty and 
is easy to learn. The use of design-level models, the 
transition from device technical to function 
orien-
ted design, and the project accompanying documen-
tation assume a certain discipline, which can easily 
be acquired with training and practice. 

126 
P. Göhner 
It has been shown, that an approximately ideal 
"top-down"-procedure can be achieved in every 
instance of pure software problems. Projects, in 
which a great deal of hardware is involved, also 
require, in many cases, "bottom-up" procedure, 
too. 
EPOS aids the quality protection of software and 
assists generally in the reduction of technical ha-
zards, clarifying the project, improving communi-
cation 
between 
fellow-workers 
and 
detecting 
design errors. This makes EPOS a suitable instru-
ment for security proof by examining authorities. 
The design descriptions are in general easy to read, 
consistent and logically constructed, such that new 
personnel can be trained relatively fast. EPOS is 
also a good help in project management, as the 
field of work and the formulation of the problem 
can be more easily defined in relation to each 
other. As a result, the project and its state of 
development are seen with much greater clarity. 
Using EPOS, complex, firm engulfing, large pro-
jects are kept under control. As EPOS is available 
for different computers with functionally identical 
EPOS systems, it is possible to transfer EPOS 
specifications from one computer to another with-
out problem. 
EPOS permits computer aid throughout a project 
and makes development both visible and com-
prehensible. There is a growing tendency for many 
clients to dispense with informal progress reports 
and demand instead current EPOS specifications as 
proof of achievement. 
The acceptance of EPOS has been considerably 
promoted by the possibility of active cooperation 
of EPOS users in its further development. In this 
way requirements, specific to a firm, can be reali-
zed in an integrated development environment. 
FOR MORE INFORMATION 
Baur, P. (1983). On the Use of a Computer-aided 
Specification Tool to Support the Development and 
Licensing of Safety-Related Systems. Proceedings 
of IFAC/IFIP/IFORS-Conf. on Control in Transpor-
tation Systems. Baden-Baden, Germany, April 1983 
Pergamon Press, Oxford, New York 1983. 
Baur, P. (1983). Fault Avoidance and Fault Removal 
Features of 
the 
Computer-Aided 
Development 
Support 
System 
EPOS. 
Proceedings 
Third 
IFAC/IFIP workshop, Safety of Computer Control 
Systems SAFECOMP '83, Cambridge U.K. Sept. 
1983 (Ed.: 3.A. Baylis). Pergamon Press, Oxford, 
New York 1983, pp. 103-110. 
Biewald, J., Göhner, P., Lauber, R., Schelling, H. 
(1979). EPOS-A Specification and Design Technique 
for Computer Controlled Real-Time Automation 
Systems. Proc. 4th Int. Conf. Software Enginee-
ring, München 1979 IEEE Comp. Soc, Los Ala-
mitos, Cal., 1979, pp 245-250. 
Biewald, J., Göhner, P., Schelling, H. (1980). 
Real-Time Features of EPOS: Formulation, Eva-
luation and Documentation Proc. IFAC/IFIP Work-
shop 
on 
Real-Time 
Programming, 
Leibnitz, 
Austria, April 1980 (Ed. V.H. Haase). Pergamon 
Press, Oxford, New York 1981, pp 95-101. 
Biewald, J., Joho, E., Jovalekic, S., Schelling, H. (1980). 
Application of the Specification and Design Tech-
nique EPOS to a Process Control Problem. Proc. 
IFAC Symposium on Digital Computer Applications 
to Process Control, Düsseldorf, Oct. 1980 Per-
gamon Press, Oxford, New York, pp 517-522. 
Ghassemi, A., Reinshagen, K.-P. (1983). 
Erfahrungen beim industriellen Einsatz des Spezi-
fikations-und Entwurfssystems EPOS zur Autom-
atisierung von Tiefdruck-Rotationsmaschinen (Ex-
periences with the industrial application of the 
specification and design system EPOS for the auto-
mation of rotating printing machines). Regelungs-
technische Praxis rtp vol. 25 (1983) pp. 110-114 and 
156-159. 
Göhner, P. (1984). Methoden zur Entwicklung von 
Realzeitsystemen und ihre praktische Anwendung 
in EPOS, Prozeßrechnertagung 1984, Springer-Ver-
lag Berlin, Heidelberg, pp. 325-335. 
Göhner, P. (1984). EPOS - gestern, heute, morgen 
eine 
rechnergestützte 
Software/Hardware-Ent-
wicklungsumgebung 4 Jahre im industriellen Ein-
satz. Compas '84, Berlin 1984, pp. 1213 - 1224. 
Göhner, P. (1984). Ingenieurgerechte Rechnerunter-
stützung für die Entwicklung und Pflege von Hard-
ware/Softwaresystemen. 
11. Internationaler Kon-
greß Mikroelektronik München 13. - 15. November 
1984, pp. 491 - 500. 
Joho, E. (1982). An Interactive Simulation System - A 
New Component 
of 
the 
Development 
Support 
System EPOS IFAC/IFIP Symp. Software for Com-
puter Control, Madrid, Spain, Oct. 1982, (ed. G. 
Gerrate, E.A. Puente) pp 163-168. 
Lauber, R. (1979). Strategies for the Design and 
Validation of Safety-Related Computer-Controlled 
Systems. First European Symp. on Real-Time Data 
Handling and Process Control, Berlin 1979. North-
Holland Publ. Co. Amsterdam 1980, pp 305-310. 
Lauber, R. (1980). Design Methods for Computer 
Controlled Real-Time Automation Systems. Proc. 
IFAC Symposium on Digital Computer Applications 
to Process Control, Düsseldorf, Oct. 1980 (Ed. R. 
Isermann, H. Kaltenecker), Pergamon Press, Ox-
ford, New York 1980, pp 25-34. 
Lauber, R., (1981). Computer-Aided Development of 
Real-Time Computer Systems. Anais do 1° SICOP 
Simposio em Contrôle de Processos por Com-
putador, Rio de Janeiro, Brasil, May, 1981, pp 105-
116. 
Lauber, R., (1982). Development Support Systems 
IEEE Computer 15 (1982) May, pp 36-46. 
Lauber, R., (1982). Specification Languages and 
Computer Aided Development Support Techniques 
to Achieve Reliable and Safe Systems: Present 
Status and Future Directions SAFE COMP Work-
shop 1982, Purdue University Lafayette, USA, Oct. 
1982. 
Lauber, R., (1982). Impact of a Computer Aided 
Development Support System on Software Quality 
and Reliability Proc. 6th Int. Computer Software & 
Applications Conf. COMPSAC 82, Chicago, Nov. 
1982. IEEE Comp. Soc. Press, Los Angeles 1982 pp 
248-256. 
Lauber, R. and Lempp, P. (1983). Integrated 
Development and Project 
Management 
Support 
System. Proceedings 7th Int. Comp. Software & 
Applications Conf. COMPSAC '83, Chicago, Nov. 
1983. IEEE Computer Society Press, Los Angeles, 
1983. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
MODELLING SYSTEM SPECIFICATIONS ON A 
FINITE STATE MACHINE 
H. Hvelplund 
Department of Advanced Information Processing, Computer Resources International 
A/S, Vesterbrogade 1 A, DK-1620 
Copenhagen V, Denmark 
A b s t r a c t . CODE (COntrol D E f i n i t i o n language) i s a formal language designed and used for 
i m p l e m e n t a t i o n 
of c o n t r o l s t r a t e g i e s i n s e q u e n c e c o n t r o l a p p l i c a t i o n s , 
s u c h a s found i n i n d u s t r i a l c o n t r o l . CODE 
t r e a t s p r o c e s s e s as f i n i t e s t a t e machines (FSM), by d e f i n i n g t r a n s i t i o n c o n d i t i o n s t h a t d e t e r m i n e when 
a s t a t e 
change w i l l 
occur, 
and t h e consequent t r a n s i t i o n 
a c t i o n . 
A c o n t r o l d e f i n i t i o n 
c o n s i s t s of 
a 
h i e r a r c h i c a l model, each l a y e r of which c o n s i s t s of a number of FSMs. The CODE concept i s proposed 
for 
use in a formal s p e c i f i c a t i o n 
language, 
t h a t would form p a r t of a s p e c i f i c a t i o n 
work bench, 
i n c l u d i n g 
s y n t a x - c h e c k i n g e d i t o r s , 
c o n s i s t e n c y and c o m p l e t e n e s s checks, 
a u t o m a t i c s i m u l a t i o n and 
documentation 
systems. 
This work bench w i l l p r o v i d e a powerful 
t o o l 
for 
s p e c i f i c a t i o n 
and development 
of 
p r o c e s s 
c o n t r o l 
and o t h e r 
s y s t e m s . 
I t 
w i l l 
h e l p 
i n c r e a s e 
t h e e f f e c t i v e n e s s 
of 
s o f t w a r e 
d e s i g n e r s 
and 
e n g i n e e r s ; 
i t w i l l a l s o c o n t r i b u t e t o i n c r e a s e d f o r m a l i t y 
in system s p e c i f i c a t i o n , 
h e l p i n g t o 
e l i m i -
n a t e a major source of 
e r r o r . 
The CODE concept i s t h u s p a r t of t h e c u r r e n t t r e n d towards i n c r e a s e d a u t o m a t i o n of s o f t w a r e 
d e v e l o p -
ment. 
I t can be used t o develop formal system s p e c i f i c a t i o n 
languages t h a t 
a r e 
a p p l i c a t i o n - s p e c i f i c , 
and t h a t can be p a r t of a s e m i - a u t o m a t i c system g e n e r a t i o n p r o c e s s , 
in which t h e system 
s p e c i f i c a t i o n 
i s t r a n s f o r m e d 
d i r e c t l y 
t o t h e 
i m p l e m e n t a t i o n . 
Maintenance 
i s 
then performed 
on t h e 
s p e c i f i c a t i o n , 
which i s reimplemented w i t h computer a s s i s t a n c e . 
Keywords. A p p l i c a t i o n o r i e n t a t e d 
languages; c o n t r o l system a n a l y s i s ; c o n t r o l system s y n t h e s i s ; 
f i n i t e 
automata; 
m o d e l l i n g ; p r o c e s s c o n t r o l ; 
p r o t o t y p i n g . 
INTRODUCTION 
Developments in computing s y s t e m s and p r o c e s s 
con-
t r o l a p p l i c a t i o n s a r e c o n s t a n t l y reducing t h e 
r a t i o 
of h a r d w a r e c o s t t o f u n c t i o n , 
l e a d i n g t o a much 
b r o a d e r r a n g e of a p p l i c a t i o n s . 
H i g h e r 
s c a l e s 
of 
i n t e g r a t i o n 
of e l e c t r o n i c components w i l l 
p e r p e t -
u a t e t h i s t r e n d . In t h e p a s t , c o m p u t e r s w e r e more 
expensive than p e o p l e ; now, people a r e more expen-
s i v e and t h e y a r e s c a r c e - t h e r e i s a s h o r t a g e of 
a d e q u a t e l y t r a i n e d s t a f f . 
I s s u e s such as t h e 
speed 
w i t h w h i c h c o n t r o l s o f t w a r e can be p r o d u c e d , 
t h e 
i n c r e a s e d 
c o m p l e x i t y 
of 
c o n t r o l 
a l g o r i t h m s 
and 
t h e i r r e l i a b i l i t y have become of major 
importance. 
Control 
s o f t w a r e 
development paradigms need t o 
be 
found which augment t h e e f f e c t i v e n e s s 
of t h e 
c o s t l y 
and l i m i t e d supply of people who produce and main-
t a i n 
s o f t w a r e . 
I n v e s t i g a t i o n s of s o f t w a r e p r o j e c t s show t h a t : 
o 
Only one t h i r d of a l l f a u l t s d e t e c t e d 
d u r i n g 
t h e l i f e of a p r o j e c t a r e c a u s e d by p r o g r a m -
ming (coding) e r r o r s . Most f a u l t s a r e 
c a u s e d 
by s p e c i f i c a t i o n 
and d e s i g n e r r o r s , 
t r a c e a b l e 
t o poor u n d e r s t a n d i n g or t o 
m i s i n t e r p r e t a t i o n 
of r e q u i r e m e n t s . (EPOS PRIMER, 
1983). 
o 
Most p r o g r a m m i n g e r r o r s 
a r e found by 
t e s t s 
b e f o r e 
r e l e a s e ; 
b u t 
t h e 
v a s t 
m a j o r i t y 
of 
s p e c i f i c a t i o n 
and d e s i g n e r r o r s 
a r e not 
found 
u n t i l 
a f t e r 
r e l e a s e . 
o 
The c o s t of c o r r e c t i n g 
s p e c i f i c a t i o n 
and d e s -
ign e r r o r s i s , t y p i c a l l y , about 100 t i m e s more 
than for programming e r r o r s 
(Boehm, 1981), and 
t h i s c o s t i n c r e a s e s w i t h t h e l e n g t h of 
t i m e 
they remain 
u n d e t e c t e d . 
More e f f o r t 
needs t o be s p e n t in t h e 
s p e c i f i c a t i o n 
phase, which must be c o n s i d e r e d as a s e p a r a t e 
s t a g e 
in s o f t w a r e 
development. 
S p e c i f i c a t i o n 
A s p e c i f i c a t i o n d e s c r i b e s t h e e x t e r n a l behaviour of 
t h e s y s t e m a t an e a r l y 
s t a g e of 
i t s 
d e v e l o p m e n t 
l i f e 
c y c l e . 
The s p e c i f i c a t i o n 
should d e s c r i b e 
what 
t h e p r o d u c t should do, not how i t i s t o do 
i t . 
The s p e c i f i c a t i o n 
m u s t be u s e d t o o b t a i n t h e a p p -
r o v a l of t h e p r o d u c t ' s p r o s p e c t i v e u s e r s , 
t o 
ensure 
t h e p r o d u c t ' s d e s i g n e r s u n d e r s t a n d w h a t t h e y 
a r e 
expected t o d e s i g n and implement, 
and t o provide a 
b a s i s for system 
v a l i d a t i o n . 
The s p e c i f i c a t i o n 
m u s t be c a r e f u l l y 
c h e c k e d 
t o 
e l i m i n a t e o m i s s i o n s , 
i n c o n s i s t e n c i e s , 
a m b i g u i t i e s , 
and u n s u i t a b i l i t y . 
Major 
s p e c i f i c a t i o n 
p r o b l e m s 
a r i s e 
b e c a u s e 
t h e 
c u s t o m e r who o r d e r s a s o f t w a r e s y s t e m o f t e n 
d o e s 
not know p r e c i s e l y what he wants. The customer and 
s u p p l i e r d i s c u s s a m b i g u o u s , 
i n c o m p l e t e 
and 
s o m e -
t i m e s c o n t r a d i c t o r y 
s p e c i f i c a t i o n s , 
and both 
f e e l 
they u n d e r s t a n d one a n o t h e r . 
They d e s c r i b e 
s y s t e m 
s p e c i f i c a t i o n s 
i n f o r m a l l y , 
i n n a t u r a l 
l a n g u a g e . 
This may a i d u s e r s in u n d e r s t a n d i n g t h e system, 
but 
t h e i n h e r e n t a m b i g u i t i e s of n a t u r a l 
languages 
make 
them i n a d e q u a t e for 
system s p e c i f i c a t i o n , 
and 
lead 
t o m i s i n t e r p r e t a t i o n s , 
u n f o r s e e a b l e c o s t s , 
d e l a y s 
and o f t e n u n s a t i s f a c t o r y 
r e s u l t s . 
And i t 
i s 
d i f f i -
c u l t 
t o check a n a t u r a l 
language s p e c i f i c a t i o n 
for 
c o m p l e t e n e s s , 
c o n s i s t e n c y and 
v e r i f l a b i l i t y . 
These problems can be solved t o some e x t e n t by use 
of a f o r m a l s y s t e m s p e c i f i c a t i o n 
l a n g u a g e . There 
CADCES-E* 
127 

128 
H. Hvelplund 
has been a lot of effort in this area and the 
feasibility of software support for formal lang-
uages has been demonstrated. Examples are PDL 
(Caine, 1975), SDLA (Demetrovics, 1982), EPOS 
(Lauber, 1982), ESPRESSO (Ludewig, 1982, 1983), 
PCSL (Ludewig, 1980), RSL (Davis, 1982), RTRL 
(Davis, 1982; Taylor, 1980), RLP (Davis, 1982). 
This article outlines a practical formal specifica-
tion language based on CRI's control DEfinition 
language CODE. 
CODE CONCEPT 
CODE was designed by CRI to assist engineers to 
define, implement, and document control strategies. 
CODE is based on a set of assumptions concerning 
the way processes are controlled, how a control 
structure is built, and how control definitions can 
be implemented. The details of control differ for 
different processes, but certain universal features 
can be derived, and these can be used to establish 
a general language for the definition of control. 
CODE is based on the principles that: 
o 
Control definitions are specified as interact-
ing processes. 
o 
A process is defined by its states, by the 
conditions for transitions between states and 
by the actions taking place during transi-
tions. When so defined, a process can be con-
sidered as a finite state machine (FSM). 
o 
Control definitions can be structured in a 
hierarchy of finite state machines, based on a 
concept similar to the ISO-OSI model, describ-
ing different logical layers in a data com-
munication network. The bottom level of the 
hierarchy is responsible for the direct opera-
tion of the plant; upper levels are respons-
ible for the strategy of coordination of lower 
levels to realize the purpose of the plant. 
A sequential process, for instance, is composed of 
concurrent sets of sequential activities, each 
corresponding to a transformation on one or more of 
the attributes of the objects it acts upon. 
Partitioning a system into a set of interrelated 
FSMs is a well known concept which has been succes-
sfully applied to many applications, e.g., human 
decision modelling, and engineering fields. It is 
easier to construct physical phenomena from an 
informal understanding of a process when they are 
represented as sequences. It is only necessary to 
consider successive states and the events that 
indicate the state transitions of the process. 
These transitions are subject to only a few well-
defined disturbances, and their consequences can be 
foreseen. In the worst case, a disturbance might 
modify the expected behaviour by taking the system 
into an exceptional but represented state. 
Examples of sequence control applications are: 
o 
Design of digital electronic modules based on 
asynchronous and synchronous sequence net-
works. 
o 
Protocols in data communication networks, 
where sequences control synchronisation bet-
ween communication nodes in the network. An 
example is the format and protocol language 
(FAPL) used for description of the SNA proto-
col (IBM, 1980). 
o 
Important areas of software engineering are 
based on sequence control; in this context, 
called "finite automata". Finite automata 
theory plays an important role in areas such 
as construction of compilers, use of Petri 
nets to facilitate specification of parallel 
activities, augmented transition networks 
(ATNs) , and so on. 
The concept of sequence control is well known with-
in process control applications and the manufacture 
of computer hardware and software. 
Basic Structure of CODE 
In order to control a sequence of events the FSM 
must be able to remember where it is in that sequ-
ence. This is the basis for the STATE concept in 
CODE. The transition from one STATE to another 
occurs when a transition condition (TC) is met. The 
transition is accompanied by a transition action 
(TA) . 
Figure 1 shows the basic structural element for a 
sequence. The formal notation used for this is: 
SI 
TO 
S2 
WHEN TC 
WITH TA 
which should be read as: 
The sequence controller will change from state 
SI to state S2 when the transition condition 
TC is met, with the transition action TA 
taking place. 
A transition condition is a predicate that eval-
uates to either true or false. If the predicate 
evaluates to true, the transition condition is met 
and the transition will take place. A predicate can 
include the value of process parameters, parameters 
local to the FSM, timer values, and so on. Compound 
transition conditions can be defined using logical 
operators such as AND, OR, EQ and NOT and rela-
tional operators such as >, <, =. 
A transition action is composed of one or more 
simple actions. A simple action can be either a 
statement or a call to a built-in function. State-
ments are of the form: 
X : = Y + Z * W; 
A : = B OR C AND (NOT D ) ; 
KV01 : = ON; 
They can be used to perform actions on the plant 
being controlled, e.g., opening and closing valves. 
Calls to built-in functions are of the form: 
RUN ( SEQUENCE 1 ); 
They can be used for control of other sequences and 
for communication with the operator. 
The concepts described so far cover the most impor-
tant part of the CODE notation, which also includes 
the following features: 
o 
A state action (SA) can be defined for a 
state. An SA is bound to the state in such a 
way that no matter how the state is entered 
the actions of the SA will be executed. The SA 
can, for instance, be used for the common part 
of a number of transitions to the same state 
(e.g. an error state). 
o 
Transition conditions (TCs) for the pseudo 
state ANY are checked before the checks of the 
TCs of the current state are executed. If one 
of the TCs of the ANY state is met, the cor-

Modelling System Specifications 
129 
r e s p o n d i n g p a t h 
i s 
t a k e n . 
T h e ANY s t a t e 
c a n 
b e 
u s e d 
t o 
c h e c k 
g e n e r a l 
e r r o r 
c o n d i t i o n s . 
T h e p s e u d o s t a t e 
RESET i s 
a p r e d e f i n e d 
s t a t e 
w h i c h 
i s 
e n t e r e d 
w h e n a s e q u e n c e 
i s 
r e s e t . 
A 
s t a t e 
a c t i o n 
c a n 
b e 
d e f i n e d 
f o r 
t h e 
RESET 
s t a t e . 
A g e n e r i c 
FSM 
c a n 
b e 
d e f i n e d , 
w h i c h 
c a n 
b e 
s h a r e d 
b y a n u m b e r o f 
i n s t a n c e s . 
T h i s 
f a c i l i t y 
c a n 
b e 
u s e d 
t o 
b u i l d 
a 
l i b r a r y 
o f 
s t a n d a r d 
FSMs, 
t h u s 
e n c o u r a g e i n g 
r e u s a b i l i t y . 
I m p l e m e n t a t i o n o f 
C o n t r o l 
T h e CODE c o n c e p t 
i n c l u d e s 
a n i n t e r p r e t e r 
p r o g r a m 
w h i c h u s e s t h e 
c o n t r o l 
d e f i n i t i o n 
l a n g u a g e 
d i r e c t l y 
t o 
i m p l e m e n t 
a c t u a l 
c o n t r o l . 
T h i s 
i n t e r p r e t e r 
i s 
b a s e d o n t h e 
f o l l o w i n g 
a s s u m p t i o n s : 
o 
FSMs a r e 
e x e c u t e d 
s u c c e s s i v e l y , 
f o l l o w i n g 
a 
s y n c h r o n o u s a c t i v a t i o n 
s c h e m e 
( t h a t 
i s , 
w i t h 
f i x e d 
t i m e 
i n t e r v a l s ) . 
o 
F o r 
e a c h 
a c t i v a t i o n 
o f 
a n 
FSM, 
t h e 
p r o g r a m 
c h e c k s 
w h e t h e r 
t h e 
t r a n s i t i o n 
c o n d i t i o n 
f o r 
t h e 
c u r r e n t 
s t a t e 
i s 
m e t , 
i f 
s o , 
t h e 
t r a n s i -
t i o n 
w i l l 
t a k e 
p l a c e 
w i t h 
t h e 
t r a n s i t i o n 
a c t i o n . 
a l l y 
i n c l u d e s 
a p i p i n g 
a n d 
i n s t r u m e n t a t i o n 
( P I ) 
d i a g r a m 
a n d 
a p r o c e s s 
d e s c r i p t i o n 
i n 
n a t u r a l 
l a n g -
u a g e . 
F i g u r e 
3 
s h o w s 
a 
P I 
d i a g r a m 
f o r 
a 
c o f f e e 
m a c h i n e 
u s e d 
i n 
t h i s 
e x a m p l e . 
( T h e 
e x a m p l e 
i s 
c h o s e n 
t o i l l u s t r a t e 
f a c i l i t i e s 
i n t h e CODE p r o g -
r a m m i n g 
l a n g u a g e , 
a n d 
i s 
n o t 
r e p r e s e n t a t i v e 
o f 
i n d u s t r i a l 
p r o c e s s 
c o n t r o l . ) 
F i g u r e 
4 s h o w s 
t h e 
s t r u c t u r e 
o f 
t h e 
c o r r e s p o n d i n g 
c o n t r o l 
d e f i n i t i o n . 
T h e 
s u p e r i o r 
FSM 
(CMACHINE) 
c o n t r o l s 
a s e t 
o f 
s u b -
o r d i n a t e 
c o n t r o l l e r s 
t h a t 
a r e 
r e s p o n s i b l e 
f o r 
t h e 
d i f f e r e n t 
p h a s e s 
o f 
t h e 
p r o c e s s 
o f 
b r e w i n g 
c o f f e e : 
FILLING 
HEATING 
FEEDCOF 
EXTRACT 
EMPTY: 
F i l l 
w a t e r 
i n t o 
t h e 
b o i l e r 
H e a t 
w a t e r 
i n 
b o i l e r 
F e e d 
c o f f e e 
b e a n s 
i n t o 
t h e 
f i l t e r 
E x t r a c t 
c o f f e e 
f r o m 
c o f f e e 
b e a n s 
E m p t y c o f f e e 
b u f f e r 
t a n k 
i n t o 
v a c u u m 
j u g 
The function of the superior FSM (CMACHINE) is 
established by the outlined division into subordi-
nate FSMs. The CMACHINE FSM starts the subordinate 
sequences in succession. A subordinate sequence 
starts when the preceding sequence has finished (is 
passive). The superior sequence depends on the fact 
that each subordinate sequence sets itself into 
passive mode when it has finished its function. 
Filling water in the boiler is controlled by the 
FSM FILLING, shown in Figs. 5 and 6. 
o 
An FSM is activated only once for each activa-
tion cycle. This means that for a given FSM, 
only one state transition can take place in an 
activation cycle. 
o 
The sequence of the FSMs within an activation 
cycle is the same for each activation. The 
activation sequence can be specified during 
definition of the FSMs. 
These assumptions simplify the control definition, 
since they make it unnecessary for the user to deal 
with hazard problems which would occur in an asyn-
chronous implementation of the control strategy. 
FSM HIERARCHY 
Ideally the control definition should be decomposed 
into a multilayer model, in which each layer con-
sists of a number of FSMs, and the layers are 
separated by logical interfaces. From layer n_ the 
FSMs at layer n_-l are seen as an ideal image of the 
process being controlled, and it is possible for 
the FSMs at layer n_ to operate on the FSMs at layer 
n_-1 in the same way as FSMs at the lowest level 
operate on the process being controlled. Each FSM 
performs a single, clear, well-defined function. 
Three different operational modes are defined for 
an FSM: ACTIVE, RESET and PASSIVE. In ACTIVE mode 
the FSM is testing conditions and performing 
actions. In RESET mode the FSM is inactive in the 
initial state (start state) and performs neither 
checks nor actions. In PASSIVE mode the FSM is 
inactive in the state in which it received the 
command to become passive. An FSM can be set in 
ACTIVE, PASSIVE or RESET mode from another FSM via 
a function call of a built-in function, or by 
operator intervention. Within an FSM it is possible 
to determine whether another FSM is in RESET, 
PASSIVE or ACTIVE mode. Figure 2 shows a simple 
hierarchy of FSMs. 
A requirement specification is input to the control 
specification. The requirement specification norm-
RELATED EXPERIENCE 
The CODE concept has been integrated as an imp-
lementation language in a general purpose process 
control system, PROCOS. This implementation lang-
uage has been applied successfully to the defini-
tion of a number of large process control applica-
tions, such as the fuelling system for the European 
heavy launcher, ARIANE. This practical experience 
has shown that CODE is a very powerful concept, in 
which it is easy to structure and express process 
control definitions. It has also been found that 
users who are not software specialists can easily 
grasp the idea of CODE and have a spontaneous 
understanding of a control definition in CODE. New 
users are able to learn to use the system in a 
short time simply by using it. The CODE concept 
also relieves the user from the difficult job of 
handling details of interprocess communication, 
synchronisation, mutual exclusion of software 
tasks, and so on. 
CODE AS A SPECIFICATION LANGUAGE 
In view of the problems that occur within the 
specification phase, it seems natural to exploit 
the concepts of CODE in a system for specification 
of control strategies, since: 
o 
The CODE concept is well known and understood 
by users in both the process control and soft-
ware development areas. 
o 
Experience has shown that CODE is a powerful 
concept, which has been applied successfully 
to the implementation of control strategies 
for many large process control applications. 
o 
The CODE concept includes an implementation 
model which can be used to build an executable 
specification. This creates the possibility of 
verifying and validating a product during the 
specification phase of its life cycle (a defi-
nition of the terms verification and valida-
tion is given in Boehm (1984)). The spec-
ification can then become a prototype of the 
specified system. This approach leads to the 
software development paradigm shown in Fig. 7. 

130 
H. Hvelplund 
o 
D e f i n i t i o n of c o n t r o l s t r a t e g i e s i n CODE can 
be checked for c o m p l e t e n e s s and c o n s i s t e n c y . A 
c o n t r o l d e f i n i t i o n i s complete when a l l of 
i t s 
p a r t s a r e p r e s e n t and each p a r t i s f u l l y 
deve-
loped and c o n s i s t e n t , 
t h a t 
i s , 
i t s 
p r o v i s i o n s 
do not c o n f l i c t w i t h o t h e r p a r t s of t h e s p e c i -
f i c a t i o n 
(Boehm, 
1984). 
o 
Use 
of 
an 
FSM c o n c e p t 
s i m i l a r 
t o 
t h e 
one 
defined by CODE for m o d e l l i n g a 
s p e c i f i c a t i o n 
h a s 
b e e n 
s u g g e s t e d 
i n 
a 
number 
of 
p a p e r s 
(Davis, 
1982; 
S a l t e r , 
1976). 
o 
CODE a l l o w s a modular s t r u c t u r e of t h e 
c o n t r o l 
d e f i n i t i o n in a h i e r a r c h y of 
l o g i c a l l y - s e p a -
r a t e d 
l a y e r s . 
o 
CODE r e l i e v e s t h e u s e r of t h e need t o h a n d l e 
d e t a i l s of s o f t w a r e 
i m p l e m e n t a t i o n 
( i n t e r p r o -
cess communication, 
s y n c h r o n i s a t i o n , 
e t c . ) . 
In o r d e r t o cover the most i m p o r t a n t a s p e c t s of 
t h e 
s p e c i f i c a t i o n , 
t h e s p e c i f i c a t i o n work b e n c h m u s t 
i n c l u d e 
i n t e r a c t i v e 
s y n t a x 
c h e c k i n g 
e d i t o r s , 
a 
c o n s i s t e n c y and c o m p l e t e n e s s check module, 
a simu-
l a t o r , 
and a documentation 
system. 
I n t e r a c t i v e Syntax Checking 
E d i t o r s 
E d i t o r s 
can be p r o d u c e d 
t o p r o v i d e 
a f a m i l y 
of 
f o r m a l a p p l i c a t i o n 
s p e c i f i c 
languages. Each l a n g -
uage i s formal in t h a t i t p o s s e s s e s a unique, 
w e l l 
d e f i n e d 
and d o c u m e n t e d s y n t a x and s e m a n t i c s . 
I t 
a l s o p o s s e s s e s "knowledge" of a p a r t i c u l a r 
a p p l i c a -
t i o n a r e a , 
and t h u s i s r i c h i n t h e t e r m i n o l o g y of 
t h a t area. These languages combine the f o r m a l i t y 
of 
o p e r a t i o n a l 
s p e c i f i c a t i o n 
languages w i t h t h e high 
r e a d a b i l i t y of t e c h n i c a l n a t u r a l 
languages. 
The e d i t o r s should d r i v e t h e c o l l e c t i o n of 
informa-
t i o n i n an e f f i c i e n t 
way, u s i n g t h e form 
f i l l i n g 
concept. 
This guides t h e u s e r through t h e 
n e c e s s a r y 
s t e p s of a d e f i n i t i o n . 
Context and domain 
a n a l y s i s 
t e c h n i q u e s a r e u s e d t o d e f i n e 
i n t e r r e l a t i o n s h i p s 
between d i f f e r e n t 
i n f o r m a t i o n f i e l d s 
in a form 
and 
t o d e f i n e 
a d y n a m i c c h e c k of t h e c o n s i s t e n c y 
of 
i n f o r m a t i o n in a form. Forms, v o c a b u l a r i e s , 
and the 
k n o w l e d g e n e e d e d t o r e p r e s e n t 
i n t e r r e l a t i o n s h i p s 
can be t a i l o r e d t o a p a r t i c u l a r 
a p p l i c a t i o n 
area. 
Simulator 
The f o r m a l i t y of a s p e c i f i c a t i o n t h a t i s b a s e d on 
an o p e r a t i o n a l model e n a b l e s i t t o be executed as a 
p r o g r a m , 
a l b e i t 
s l o w l y . 
E x c e p t 
f o r 
s p e e d , 
t h e 
behaviour of t h i s program w i l l be i d e n t i c a l t o 
t h a t 
of a v a l i d i m p l e m e n t a t i o n . The s p e c i f i c a t i o n 
i t s e l f 
can s e r v e as a system p r o t o t y p e , 
e n a b l i n g t h e 
u s e r 
t o e x p e r i m e n t w i t h t h e p r o t o t y p e u n t i l t h e 
r e q u i r e -
ments a r e matched i n an a p p r o p r i a t e manner. 
Exper-
i e n c e 
shows t h a t 
s u c h p r o t o t y p e s 
n o r m a l l y 
l e a d 
u s e r s t o i m p r o v e d p e r c e p t i o n s of t h e i r n e e d s . The 
r e s u l t i n g systems a r e thus more r e s p o n s i v e t o t h o s e 
n e e d s . 
I d e a l l y a s i m u l a t o r s h o u l d be f o r m e d a s an 
i n t e r -
a c t i v e i n t e r p r e t e r w o r k i n g i n a d y n a m i c 
e n v i r o n -
ment, 
w h e r e t h e e f f e c t s 
of m o d i f i c a t i o n s 
can be 
shown t o t h e u s e r i m m e d i a t e l y , u s i n g t h e a p p r o p -
r i a t e 
l e v e l of a b s t r a c t i o n . 
The s y s t e m t h u s p r o -
v i d e s an e x p l o r a t o r y 
environment. 
Documentation 
The documentation system should p r o v i d e 
f a c i l i t i e s 
f o r s t r u c t u r e d , 
m o d u l a r i s e d d o c u m e n t a t i o n of 
t h e 
s p e c i f i c a t i o n . 
E x a m p l e s 
of 
s u c h 
d o c u m e n t a t i o n 
i n c l u d e t h e c o m p l e t e s p e c i f i c a t i o n 
documentation, 
s u b s e c t i o n s of t h e complete s p e c i f i c a t i o n , 
l i s t s of 
i d e n t i f i a b l e components t h a t a r e ordered by v a r i o u s 
c r i t e r i a , 
and so on. 
FUTURE 
A s o f t w a r e 
p a r a d i g m 
h a s 
been 
c h a r a c t e r i s e d 
a s 
having a formal 
s p e c i f i c a t i o n 
t h a t 
i s 
c r e a t e d 
and 
v a l i d a t e d 
by i t s 
u s e r s . T h i s s p e c i f i c a t i o n 
t h e n 
b e c o m e s 
a 
p r o t o t y p e 
of 
t h e 
s p e c i f i e d 
s y s t e m . 
I d e a l l y , maintenance of the product should be based 
on the s p e c i f i c a t i o n . 
The s p e c i f i c a t i o n 
i s 
r e i m p -
lemented a f t e r 
each r e v i s i o n , 
and so the 
implemen-
t a t i o n of a s p e c i f i c a t i o n 
m u s t be f a s t , 
r e l i a b l e 
and 
i n e x p e n s i v e . 
The next s t e p i n t h e development of an a u t o m a t i o n -
based s o f t w a r e development paradigm for the p r o c e s s 
c o n t r o l a r e a w i l l be t h e automation of the 
i m p l e -
m e n t a t i o n 
p r o c e s s 
( B a l z e r , 
Cheatham 
and 
Green, 
1983). This w i l l a l l o w maintenance t o be 
performed 
on t h e s p e c i f i c a t i o n r a t h e r than on t h e 
implementa-
t i o n . 
The r e v i s e d s p e c i f i c a t i o n 
can then be r e i m p -
l e m e n t e d 
w i t h c o m p u t e r a s s i s t a n c e . 
M a i n t e n a n c e 
b e c o m e s a s i m p l e c o n t i n u a t i o n of t h e p r o c e s s by 
which t h e system was i n i t i a l l y developed. 
Mainten-
a n c e can t h u s be p e r f o r m e d by m o d i f y i n g t h e 
l e a s t 
complex and most l o c a l i z e d 
form of 
the 
s p e c i f i c a -
t i o n t h a t 
i s a l s o c l o s e s t 
t o t h e u s e r ' s 
conceptual 
m o d e l . 
T h i s 
i s 
i m p o r t a n t , 
s i n c e 
m a i n t e n a n c e 
o c c u p i e s 
80 t o 
90 p e r c e n t 
of 
t o t a l 
d e v e l o p m e n t 
e f f o r t 
( B a l z e r , 
Cheatham 
and G r e e n , 
1983). 
The 
t r e m e n d o u s b a c k l o g of u s e r demand f o r c h a n g e s 
t o 
e x i s t i n g 
systems remains unanswered because 
i t 
i s 
time-consuming and expensive t o make t h e s e 
changes 
w i t h o u t 
t h e use of automation. 
An automated 
p a r a -
digm would i n c l u d e a l l phases of the p r o d u c t ' s 
l i f e 
c y c l e . 
Figure 
8 shows 
the automated 
s p e c i f i c a t i o n 
development paradigm. 
CONCLUSIONS 
A s p e c i f i c a t i o n 
work bench based on the i d e a s 
o u t -
l i n e d i n t h i s p a p e r would be a p o w e r f u l 
t o o l 
f o r 
u s e 
i n 
a w i d e r a n g e of 
a p p l i c a t i o n s , 
i n c l u d i n g 
l a r g e p r o c e s s c o n t r o l systems, design of 
customised 
chips for t e s t i n g c h i p f u n c t i o n s before 
implementa-
t i o n , 
s p e c i f i c a t i o n 
and t e s t i n g 
of 
s y s t e m s 
f o r 
which u n c e r t a i n t y 
n e c e s s i t a t e s 
t h e use of an exp-
l o r a t i v e 
environment, 
in which a number of 
i t e r a -
t i o n s 
can be c a r r i e d 
o u t b e f o r e 
t h e p r o d u c t 
i s 
implemented, 
and so on. 
REFERENCES 
B a l z e r , 
R., 
T. 
E. 
C h e a t h a m 
J r . , 
a n d 
C. 
G r e e n 
(1983). S o f t w a r e t e c h n o l o g y i n t h e 1 9 9 0 s : u s i n g a 
new paradigm. 
IEEE Computer, 
Nov. 1983. 
Boehm, B. W. (1981). S o f t w a r e 
e n g i n e e r i n g 
e c o n o -
mics, 
P r e n t i c e - H a l l . 
Boehm, 
B. W. (1984). Verifying 
and v a l i d a t i n g 
s o f t -
w a r e r e q u i r e m e n t s and d e s i g n s p e c i f i c a t i o n . 
IEEE 
Software, 
U 
\_, 75-88. 
C a i n e , 
S., 
E. K. Gordon 
(1976). PDL - a t o o l 
f o r 
s o f t w a r e 
d e s i g n . 
AFIPS Conf. P r o c , 
44. 
Dansk A u t o m a t i o n s s e l s k a b s 
Konference 
(1982). 
S p e c i -
f i k a t i o n 
og p r o g r a m m e r i n g 
af 
s e k v e n s s t y r i n g e r . 
3 1 . 3 . 1 9 8 2 . 
D a v i s , 
A. 
M. 
(1982). 
The d e s i g n 
of 
a f a m i l y 
of 
a p p l i c a t i o n o r i e n t e d r e q u i r e m e n t s 
l a n g u a g e s . 
IEEE 
Computer, 
May 1982. 

Modelling System Specifications 
131 
Demetrovics, 
J., 
E. Knuth, 
and P. Rado (1982). 
Specification 
meta systems. IEEE Computer, May 
1982. 
EPOS PRIMER (1983). Institute for Control Engineer-
ing and Process Automation of the University of 
Stuttgart and GPP Gesellschaft für 
Prozessrechner-
Programm irung mbH. 
IBM (1980). Systems network architecture format and 
protocol reference manual: architectural logic, 3rd 
ed. Report no. SC30-3112-2, Appendix N. 
Lauber, R. J. (1982). Development support systems. 
IEEE Computer, May 1982. 
Ludewig, J. (1980). Process control software speci-
fication in PCSL. IFAC/IFIP Workshop on Real-Time 
Programming, 
V. Haase, 
Ed. 
Graz, 
April 
1980, 
Pergamon. 
Ludewig, J. (1982). Computer-aided specification of 
process control systems. IEEE Computer, May 1982. 
Ludewig, J. (1983). ESPRESSO - a system for process 
control software specification. IEEE Transactions 
on Software Engineering, SE-9, 4_, July 1983. 
S a l t e r , 
K. G., 
(1976). A methodology for decom-
posing system requirements i n t o data processing 
requirements. Proceedings of Second 
I n t e r n a t i o n a l 
Conference on Software Engineering, October 1976. 
Taylor, B.J. (1980). A method for expressing the 
functional 
requirements 
of 
r e a l - t i m e 
systems. 
IFAC/IFIP Workshop on Real-Time Programming, Leib-
nitz, Austria, April 1980. 
Fig. 1. 
Basic structural element 
Code for sequence: 
51 
TO 
S2 
WITH 
RUN(SEQl) 
52 
TO 
S3 
WHEN 
PAS(SEQl) 
WITH 
RUN(SEQ2) 
53 
TO 
SI 
WHEN 
PAS(SEQ2) 
WITH 
HLD(THIS) 
Fig. 2. 
Hierarchy of FSMs 
Fig. 3. 
PI diagram for the coffee machine 
Fig. 4. 
FSM structure for the coffee machine 

132 
H. Hvelplund 
A 
LS2 
V I := OFF 
HLD(THIS) 
MSG(M2) 
-5*1START) 
V I : = ON 
TMR := MINUT 
TMR = O 
V I 
: = OFF 
OPR(MR) 
OPRR 
HLD(THIS) 
MSG(M2) 
zu— 
RES 
MSG(M2) 
START 
TO 
F I L L 
WHEN 
V I := ON; 
TMR := MINUT 
FILL 
TO 
START 
WHEN 
LS2 
WITH 
VI := OFF; 
HLD(THIS); 
TO 
ERROR 
WHEN 
TMR = 0 
WITH 
OPR(Ml); 
VI := OFF 
ERROR 
TO 
START 
WHEN 
OPRR 
WITH 
HLD(THIS); 
MSG(M2) 
Ml = "CHECK VALVE V I OR V 2 " 
M2 = " " 
F i g . 
6 . 
Code f o r 
FSM FILLING 
F i g . 
5 . 
S t a t e 
d i a g r a m 
f o r 
FSM FILLING 
USER 
R E Q U I R E M E NT 
(CONTEXT 
NEEDS 
CONSTRAIN 
DEVELOP 
S P E C I F I C A T I O N! 
FORMAL 
S P E C I F I C A T I ON 
( : PROTOTYPE I 
ASK 
USER TO 
MODIFY 
R E Q U I R E M E NT 
OR 
CHAN6E 
S P E C I F I C A T I O N 
μ ^ 
ιθ THEY 
REFLECT 
U S E R 'S 
^ 
R E Q U I R E M E N T? 
F i g . 
7. 
Û U I R E ME 
YES 
DESIGN 
Software development paradigm 
·» 
P R O D U C T 
Fig. 8. 
Automation based specification development 
paradigm 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
UNIVERSAL CAD PACKAGES 
SUNS: THE SUSSEX UNIVERSITY 
NONLINEAR CONTROL SYSTEMS SOFTWARE 
D. P. Atherton, O. P. McNamara, M. D. Wadey and A. Goucem 
School of Engineering and Applied Sciences, University of Sussex, 
Brighton BN1 9QT, UK 
Abstract. The paper outlines the capabilities of the Sussex University Nonlinear 
Software. The programs based on two theoretical techniques, the describing function 
and Tsypkin's method, evaluate limit cycle solutions in both continuous and discrete 
feedback systems. The software allows the display of solution waveforms at the 
input to each nonlinearity and an exact orbital stability criterion, for continuous 
systems, is used for the limit cycles predicted by the Tsypkin method. Most of the 
software is for fixed structure canonical feedback systems although one of the DF 
based programs allows analysis of systems of a free structure. The software may 
also be used for frequency domain design where gain and phase margins of compensation 
schemes may be calculated by finding the minimum amount of additional gain or time delay 
required for a system to limit cycle. 
Keywords. Limit cycles, nonlinear control systems, describing functions, relay 
control, computer-aided design, sliding states,sampled data systems, digital systems. 
INTRODUCTION 
This paper describes software developed at the 
University of Sussex for the study of nonlinear 
feedback control systems. The algorithms, which 
are based on extensions of describing function 
(DF) methods and Tsypkin's method, can be used to 
determine periodic modes in both continuous and 
sampled data control systems. Since most 
instabilities of interest in nonlinear control 
systems occur as limit cycles the software can be 
used to determine the stability of a system. This 
can be done accurately using the Tsypkin methods 
and also using the extensions of the DF method, 
which allow iterations on the DF solutions using 
FFT techniques. The programs can also be used to 
design compensators by classical techniques since 
the amount of phase shift or gain which may be 
added to a loop before it becomes unstable can 
easily be determined. This approach, of course, 
assumes that the compensator structure is known, 
and this can invariably be done using a linear 
design technique on a linearised form of the 
nonlinear system. 
The programs, whose various features will be 
described in the following sections, have all been 
written in FORTRAN 77 and are normally used on a 
PRIME 550 running PRIMOS or VAX 11/780 running VMS. 
Graphics facilities are essential for satisfactory 
use of the programs and they use the GINO graphics 
library. The programs also make use of algorithms 
from the NAG library and control library SLICE. 
Several examples are given to illustrate a variety 
of applications of the software. 
USER INTERFACE 
All the programs in the suite run interactively 
with the useful feature of a user friendly inter-
face. Prompts are displayed at each stage of user 
input where help messages may be easily obtained 
if required. Each run consists of two distinct 
phases, the data entry and calculations. 
The software is mainly for the single or multi-
variable system of figure 1. However, one of the 
programs allows for a free structure where the 
system may be composed of any configuration of 
linear and nonlinear elements. The system descrip-
tion data is obtained via a question and answer 
procedure. Nonlinearities are specified by two 
fields, its type defined by an integer and its 
characteristic, typically defined by three or four 
parameters. Apart from the programs specifically 
for relay systems the software supports many non-
linearities. The linear elements are specified as 
transfer functions which are composed of four data 
fields. These are the gain and time delay, which 
are real numbers, and the numerator and denominator 
polynomials. The oolynomials are entered as char-
acter strings in terms of 'S'. 
There is also other data specific to each program, 
for example the Tsypkin based programs require an 
initial guess for the limit cycle parameters. The 
data entry phase also allows for amendment of a 
previously entered system description and display 
of the currently entered data. 
Once a satisfactory system description has been 
entered the calculation phase is started. This is 
where the analysis of the system is undertaken. 
It requires far less user input and involves 
numerical algorithms and graphic displays which are 
an essential feature of the software. For example, 
the DF method is implemented using cursor graphics 
to obtain an initial evaluation of possible limit 
cycle solutions. After each stage of the calcula-
tions a number of options are available which are 
listed in a menu and chosen by a simple character 
code. 
DF BASED ROUTINES 
SISO systems of the type shown in figure 1, with 
any of a wide variety of nonlinearities can be 
analysed using a describing function based program 
(McNamara, 1984). A number of limit cycle 
prediction methods are provided including the sing-
le sinusoid DF, and a multiple input DF which is 
evaluated using fast Fourier transform techniques. 
133 

134 
D. P. Atherton et al. 
The limit cycle equations are solved using Newton 
Raphson techniques, with the single sinusoid DF 
also able to be solved graphically using a cursor. 
A well known limitation of any DF method is the 
uncertain accuracy of any limit cycle prediction. 
To overcome this, iterative methods are provided 
which usually can accurately verify any predicted 
limit cycle, and obtain a more accurate solution. 
Plots of actual limit cycle waveforms and spectral 
information are also readily available. 
The above iterative methods have also been imple-
mented to study free structured MIMO nonlinear 
systems. The program MV allows the system to be 
defined by up to ten five input-output blocks. 
Each element of each block can be either linear, 
nonlinear, unity, zero or a sample and zero order 
hold device. This free structure allows the 
analysis of a wide variety of complex systems such 
as SISO systems with multiple feedback paths, MIMO 
systems, and sampled data systems, where limit 
cycles which are odd or even subharmonics of the 
sampling frequency can be investigated. Systems 
with samplers operating at different, but 
harmonically related, sampling frequencies can also 
be studied. Indications of phase and gain margins 
can be obtained using the programs. These methods 
allow accurate predictions of limit cycles in 
many cases where the single sinusoid DF has failed 
to make a prediction, and in cases where the DF 
has incorrectly predicted a limit cycle. 
TSYPKIN BASED PROGRAMS FOR CONTINUOUS 
SYSTEMS 
The software includes a suite of programs based 
on Tsypkin's method which is for exact determina-
tion of periodic modes in relay control systems. 
Extensions of the method, which in some cases 
give approximate results, have also been 
incorporated to handle more general systems and 
situations. When the results are approximate 
the accuracy, which in most cases is good, can be 
evaluated and improved. 
For relay systems (Atherton, 1981, 1982) the 
starting point in the analysis is to assume a 
specific periodic pulse type waveform at the 
relay output. The response of a linear plant to 
this waveform can then be derived using Fourier 
analysis. Although this yields an infinite 
series for the expressions corresponding to the 
relay input, closed form expressions are available 
for a set of simple transfer functions (Atherton, 
1981). For more complex transfer functions closed 
form expressions for the relay input can be 
obtained by making a partial fraction expansion. 
Applying the switching conditions to produce the 
assumed relay output yields a set of nonlinear 
algebraic equations in terms of the limit cycle 
parameters. An efficient iterative routine is 
used to solve these which requires an initial 
solution guess as a starting point. Once found 
the parameters completely define the periodic 
relay input waveform. An important part of the 
solution procedure is to construct and plot this 
waveform to check that it does produce the assumed 
relay output as it is possible to obtain invalid 
solutions with additional unassumed crossings of 
the switching boundary (Atherton and Wadey, 1981). 
As only stable limit cycles exist in practice it 
is important to be able to assess the stability 
of any solutions obtained from the Tsypkin method. 
A necessary and sufficient condition (Balasubra-
manian 1981) is used where the stability is assess-
ed from a transition matrix associated with the 
equation of first variation, about the limit cycle 
solution, over the first half period. This can be 
set up by virtue of the fact that the exact limit 
cycle solution is known and the variational 
equation is piecewise constant. For a stable 
limit cycle n-1 of the eigenvalues of the transi-
tion matrix must have magnitudes less than unity 
where n is the order of a state space representa-
tion of the linear part of the system. One of the 
eigenvalues necessarily has the value -1 which is 
due to the periodic solution. 
The program SYMRLY is available for the basic 
single loop autonomous relay system of figure 1 
where the relay output is assumed to be a single 
pulse/half period. This means there are one or two 
switching conditions to produce the assumed relay 
output, depending on whether the relay has a dead 
zone. For one or two unknowns the nonlinear 
equation solver converges to a solution, if one 
exists, for most initial guesses. Once a solution 
has been found the corresponding relay input wave-
form may be plotted and its stability assessed using 
the exact criterion described above. 
Under certain conditions it is possible to obtain 
limit cycles in relay systems with a sliding region 
(Utkin, 1977). In this case the assumed single 
pulse/half period relay output gives an invalid 
solution waveform, the form of which indicates the 
presence of sliding. Specifically the relay input 
reverses its direction at a 
switching which is 
due to the large discontinuity of its derivative. 
To obtain accurate solutions the sliding is ideal-
ised by motion along the switching boundary and the 
resulting equivalent control, at the relay output, 
to produce this input is derived. This control is 
modelled by a periodic linear segmented waveform 
for which closed form expressions for the relay 
input can be found for a given linear plant. As 
before the limit cycle parameters are found by 
imposing the appropriate switching conditions 
(Wadey, 1983). The solution is approximate but the 
accuracy can be improved by increasing the number 
of linear segments modelling the relay output over 
the sliding region. This, however, adds to the 
number of nonlinear equations which have to be 
solved making computation time longer and increas-
ing the difficulty in finding an initial guess 
which yields convergence to a solution. In 
practice two or three linear segments often give 
accurate results and the accuracy is readily 
observed by comparing the actual equivalent control, 
over the sliding regime, with its linear segmented 
approximation. 
The load module SLIDE to SYMRLY uses the above 
method for finding partially sliding limit cycle 
solutions. Initially the relay output over the 
sliding regime is modelled by one linear segment. 
This yields the minimum number of nonlinear equa-
tions to solve and the initial solution guess can be 
based on the invalid single pulse/half period 
solution obtained from SYMRLY. If this yields a 
solution the accuracy is improved using an automated 
method, where the number of linear segments is 
increased one at a time and the new solution guess 
is based on the previous solution. This ensures 
fast convergence at each stage of iteration and 
the process can be terminated when the desired 
accuracy is achieved. 
As instabilities in nonlinear systems often exhibit 
themselves as limit cycles the method can be used 
as a frequency domain design technique. That is 
compensation schemes for elimination of any exist-
ing limit cycles in a system can be assessed. The 
program COMPRLY uses the simple phase advance net-
work G (s) = (l+sT)/(l+saT) for stabilisation of a 
c 
single loop autonomous system where the relay has 
a dead zone. The parameters a and (A)C are requested 
input from the user, where ω = l/Jäl 
is the 
frequency at which the maximum phase lead occurs. 
The smallest additional gain and phase for the 
system to limit cycle are then determined, the 
latter by addition of a time delay. These values 

SUNS 
135 
correspond to the gain and phase margins of the 
compensated system. 
The introduction of a sinusoidal forcing signal 
makes a variety of modes of oscillation possible. 
The program FOROSC handles this situation and 
allows evaluation of subharmonic and multipulse 
forced oscillation solutions. As additional in-
put it requires specification of the forcing signal 
and type of oscillation being searched for, that 
is the number of pulses/half period and subhar-
monic order. Again once a solution has been found 
the relay input waveform can be displayed and the 
stability is assessed by applying the exact cri-
terion to a two loop model of the forced system. 
For multipulse oscillations there are more nonlin-
ear equations to solve and a good initial guess is 
more important. For this reason it is often use-
ful to employ a search procedure for solutions by 
varying the forcing signal's amplitude and fre-
quency. This often reveals the point when a single 
pulse mode switches to a multipulse mode. 
A more general method is to approximate nonlin-
earities by a quantised characteristic. The pro-
gram QTZR uses this where the nonlinearity must be 
single valued and odd symmetric. The quantiser 
can then be constructed from several relays with 
dead zone in parallel. The output of each relay 
is assumed to be a single pulse/half period and 
exact limit cycle solutions are obtained for the 
quantised systems. The number of nonlinear 
equations to solve for the limit cycle parameters 
increases with the number of quantised steps. It 
is therefore better to start with fewer steps to 
establish an initial estimate of the solution. 
This is particularly true for nonsaturating type 
characteristics where an input amplitude must be 
specified in order to construct a quantised fit. 
The program allows iteration on to a more accurate 
solution by respecifying the assumed input ampli-
tude and increasing the number of quantised steps. 
This method gives very accurate solutions for sat-
urating nonlinearities and is also useful for 
characteristics defined by a set of points. The 
program provides plots of the limit cycle wave-
form and the nonlinearity with its quantised fit. 
The latter is useful for assessing the accuracy 
of the solution. The exact limit cycle stability 
criterion for relay systems is also used. 
The program for multivariable systems is MVREL 
(Wadey, 1984) 
where the system structure is of 
the torn shown in figure 1. The nonlinearity may 
contain either relay or saturation elements, 
however, the solutions are only exact when N is 
composed of relays. For saturation elements the 
assumed periodic output is a linear segmented 
waveform. The limit cycle solutions are again 
obtained from satisfaction of the set of nonlinear 
algebraic equations corresponding to the conditions 
to produce the output of each nonlinearity. Once 
a solution has been found plots are available for 
the input waveform to each nonlinearity. These 
are important for checking the solution validity 
and also provide an accuracy check when the system 
contains saturation elements. The necessary and 
sufficient stability criterion can still be applied 
although this requires an exact solution. However, 
the linear segmented saturation output often gives 
sufficient accuracy and the validity of the results 
are readily observed from the closeness of an 
eigenvalue to -1. 
DISCRETE SYSTEMS 
A number of programs have been developed for the 
prediction of limit cycles in sampled data 
systems of the type shown in figure 1, where a 
sample and zero order hold precedes the nonlin-
earity. For such a system limit cycles usually 
occur at subharmonics of the sampling frequency. 
Single loop systems can be analysed by a DF based 
program SAMDF and by programs ZSAM, ASAM (Goucem 
1984, McNamara 1983), which use an extension of 
Tsypkin's method for continuous relay systems, to 
give exact limit cycle solutions. The extension 
is possible because the output of the zero order 
hold, and hence of the nonlinearity, is the 
summation of a number of single pulse waveforms 
of unknown height which occur at different known 
times. The unknown limit cycle parameters with a 
fixed sampling frequency are then the pulse heights 
for a given subharmonic limit cycle. The program 
ZSAM also allows the introduction of a quantiser 
and discrete controller for digital compensation. 
Once a subharmonic limit cycle has been found there 
are routines available to calculate the amount of 
gain or phase needed to eliminate a given limit 
cycle mode. The exact method has been implemented 
for the analysis of MIMO nonlinear sampled data 
systems as well as for MIMO systems with multi-
rate sampling. The only restriction being that the 
sampling frequencies in any loop must be integral 
multiples of each other. All of the exact methods 
can predict both even and odd subharmonics and 
plots of exact limit cycle waveforms can be 
obtained. 
APPLICATIONS 
Several examples are given in the following which 
have been chosen to illustrate the typical problems 
of nonlinear feedback systems, which can be examin-
ed, and also show the diversity of the applicabil-
ity of the software. 
Example 1 
Here we consider the application of the Tsypkin 
method to a single loop relay feedback system. 
In the classical approach formulated by Tsypkin 
any limit cycle solution is found either graphic-
ally or from the solution of one or two nonlinear 
algebraic equations depending whether the relay 
has not or has a dead zone. To check that the 
solution obtained is correct it is necessary to 
obtain, as available in the software, the relay 
input solution waveform to determine that it does 
not cross the switching levels at other than the 
assumed times. Incorrect solutions are occasion-
ally obtained, typically when the plant G(s) is 
highly resonant or when the degree of the denomina-
tor of G(s) is only one greater than the numerator. 
In the latter case a limit cycle with sliding may 
be possible. This situation is illustrated here 
where we consider a system with an ideal relay and 
a plant transfer function 
G(s) = (s4-0.7s3+2.1s2-0.7s+l)/(s5+0.7s4+10.1s3 
+4.7s2+9s). 
Figure 2 shows the solution obtained by direct 
application of the Tsypkin method. Because the 
relay input reverses immediately the relay switches 
the relay input does not produce the assumed relay 
output, which is the dotted line in the figure. 
This behaviour usually indicates that if a limit 
cycle exists it may possess sliding, that is the 
relay switches on and off very rapidly giving a 
non-zero average output which is generated by an 
input which is essentially zero throughout the 
sliding oeriod. The program gives a message to 
indicate the solution is invalid and suggests a 
search for a solution with sliding. This involves 
the solution of extra nonlinear algebraic equations 
since the unknown relay output during sliding is 
approximated by one or more linear segments. The 
approximate solution using one linear segment is 
shown in figure 3 and the nearness of the linear 
segment to the actual relay output is shown in 
figure 4. More accurate solutions can be obtained 
if desired. Figure 5 shows the relay input, which 
can now be seen to be essentially zero over the 
sliding period, implying that the solution is very 

136 
D. P. Atherton et al 
accurate. In this case four linear segments are 
used to approximate the relay output during sliding 
Example 2 
An interesting example, which has been considered 
in the literature before (Freeman and Barney 1963) 
consists of a single loop with unity feedback and 
a feedforward path which contains a saturation, a 
transfer function G,(s), a further saturation and 
a transfer function G 2(s). The saturations are 
assumed to be ideal with unit linear gain and 
saturation levels of ±1. 
Gx(s) = 10A(s+l)/(s+100)2 and G2(s) = 2/S
2(s+2). 
The system may be regarded as a position control 
with both error and torque saturation. The phase 
advance compensator G., (s) has been designed to 
provide gain and phase margins of 28.0db. and 
53.8° for linear operation. The problem of con-
cern is how does the system behave for large inputs 
when both nonlinearities are saturated. Using 
individual DFs for the two saturations obviously 
indicates stable behaviour but it is also readily 
apparent that G1(s) is not a low pass filter and 
that high frequencies produced by the first nonlin-
earity will be passed to the second. 
Limit cycle analysis of this example can be easily 
carried out by the harmonic balance section of the 
free structured program.MV. The harmonic balancing 
proceeds by opening the loop before the first 
saturation and injecting a signal, which corres-
ponds to the error in this example, composed of up 
to ten harmonics. The resulting fedback error 
signal is then calculated using the F.F.T. and 
the injected and fedback harmonics compared. A 
Newton Raphson procedure is employed to automati-
cally generate guesses for the harmonics in the 
error signal until a balance is obtained. If only 
one sinusoid is injected, then the ratio of the 
fundamental amplitude in the fedback error to the 
injected amplitude is the effective DF of the 
complete loop. For this example the error limit 
cycle waveform turns out to be sinusoidal, even 
though the input to the second saturation is 
quite distorted. A single sinusoid harmonic 
balance yields a limit cycle solution with 
amplitude a = 2.893, and frequency ω = 0.6468 
rads/sec. The input signal to the second saturation 
shown as the solid line in figure 6, with the 
dashed waveform being the error signal. This 
example shows the advantage of using the F.F.T to 
obtain harmonic balance solutions for free 
structured systems, where in general it is 
extremely difficult to write down an analytical 
expression for even a single sinusoid DF of a 
combination of nonlinear and linear elements, and 
almost impossible for several sinusoids. 
The multivariable Tsypkin program was also used to 
predict this limit cycle. Initially the output of 
each saturation, in the linear regime, was modelled 
by one linear segment. This gave parameters which 
could be used as an initial guess for a solution 
employing more linear segments, thus giving greater 
accuracy. With the 'one segment approximation" 
initially used, several solutions fairly close to 
each other were found. This was probably due to 
the coarseness of the approximation which was 
revealed using more linear segments when only one 
solution was found. In addition the exact limit 
cycle stability criterion required a high degree 
of accuracy to be valid and therefore yield one 
eigenvalue of -1. When an accurate solution was 
used one of the eigenvalues was greater than 
unity in magnitude implying that the limit cycle 
was unstable. This was confirmed by digital 
simulation. 
Example 3 
Here we consider the stability of a 2 x 2 multi-
variable system with a plant G(s) having 
G n ( s ) = 5(1-0.4s)/s(s2+s+l) , G12(s) = 1.3/(s+l), 
G 
(s) = 1.5a/(s+2) and G 2(s) = 8/s(s+l) , and 
N a diagonal matrix of two relays with dead zone 
of ±1 and height ±1. A controller KI is assumed 
prior to N and the maximum value of K for stable 
operation is required. With a = 1 and K = 1 two 
limit cycles, one stable and the other unstable, 
were found. The inputs to the relays were approx-
imate sinusoids and as K was decreased the limit 
cycles converged, disappearing for K = 0.27. 
Because the relays have dead zones it is possible 
for an oscillation to exist in one loop only 
(i.e. it is not large enough to switch the second 
relay). For the uncoupled loops the limit cycle 
in loop one disappears for K = 0.22 and in loop 
two for K = 0.376. Thus for the coupled system 
an oscillation exists in loop one only for 
K = 0.22 and this is the maximum value for stable 
operation. On the other hand with a = 10 a limit 
cycle existed in both loops until K was reduced 
to 0.19. 
Example 4 
As another use of MVREL for a multivariable system 
we consider a 2x2 plant, G(s), with elements 
G11(s) = 3.5/s(s2 + s+1), G12(s) = -5.9/s(s+l), 
G21(s) = 6.4(s+l)/s(s+2)(s+3), G ^ s ) = 6.6/ 
2 
. 
- . 
(s +0.5s+l) and N a diagonal matrix of two ideal 
relays with unit height. Searching for a periodic 
mode near to the oscillatory frequency of the first 
loop gave two solutions, one of which was accept-
able. The other solution, however, was invalid as 
the relay input waveform in loop two possessed 
more zero crossings than assumed. Indications 
were that a limit cycle with three pulses in loop 
two to one pulse in loop one might be possible. 
This type of solution was then sought, which 
yielded a valid solution with the resulting relay 
input waveforms shown in figure 7. Another one to 
three pulse mode limit cycle was found and an in-
valid solution with additional unassumed crossings 
in loop two was also obtained. The invalid sol-
ution indicated the possibility of a multipulse 
mode where the output of relay one and two were 
one and five pulses/half period respectively. Two 
solutions of this form were found and also an in-
valid solution indicating that a seven pulse mode 
in loop two might also be possible. Again two sol-
utions, where the output of relay two was assumed 
to be seven pulses/half period, were found when 
this mode was investigated. 
The exact, eigenvalue criterion was used to pre-
dict the stability of all the limit cycle solut-
ions discussed above. They were all unstable a-
part from the one to three pulse mode, shown in 
figure 7, and the single pulse mode. The latter, 
however, was close to instability, indicated by 
the eigenvalue magnitudes. These results were 
confirmed by digital simulations as the stable one 
to three pulse mode was easily found although in-
itial conditions extremely close to the single 
pulse mode were required to obtain this limit 
cycle. None of the unstable modes could be sim-
ulated which underlines the importance of being 
able to assess the stability of limit cycle sol-
utions. 
Example 5 
As a simple example of the application of the 
exact routines based on Tsypkin's method for a 

SUNS 
137 
discrete system we consider the stability of a 
sampled data system with sampler operating at 1 Hz, 
zero order hold, ideal saturation nonlinearity 
with limit levels ±1, and plant G(s) = K/(s+1)(s+2). 
The system was determined to be stable for K<12.3 
since with K above this value a second subharmonic 
limit cycle was found. For K = 15 the limit cycle 
could be eliminated by a phase lead of around 86° 
or an increase of approximately 10% in the sampling 
frequency. With a unit gain quantiser with quant-
isation levels of 0.1 included after the sampler, 
the system required a further reduction in gain to 
K = 11.69 for stability. 
Example 6 
As a final example the limit cycles in a multivari-
able sampled data system are studied. The system 
is a 2 by 2 M1M0 system consisting of a sample and 
zero order hold in each error loop, followed by a 
nonlinear and linear block. The nonlinear block 
has elements N 11' N 
which are ideal saturations 
with unity slope and limit levels of ±1 and ele-
ments N , N 
which are ideal relays with unit 
height. The elements of the linear block are 
G11(s) = 10/s+3, G12(s) = 10/(s+l)3, G n ( s ) = 
10/s2+.3s+l, G22(s) = 1 0 / S ( S + 1 ) . 
There are a wide 
range of sampling frequencies for which there are 
a variety of subharmonic limit cycles possible. 
For example if both samplers are synchronised and 
have sampling periods of T = T = 0.5 seconds, 
then both second and fourth subharmonic limit cycles 
are possible. The second subharmonic has positive 
heights of h = 4.19 in loop 1, and h = 0.084 in 
loop 2. The fourth subharmonic is shown in figure 
8, with the crosses marking the sampling instants. 
If a multirate system is considered with the samp-
ler in loop one having a period of T = 0.5/3, and 
in loop 2 T = 0.5 seconds then a limit cycle is 
obtained which is a sixth subharmonic in loop 1, 
and a second subharmonic in loop 2. That is the 
limit cycle which is shown in figure 9, has a fre-
quency of 2 TTrads/sec. in both loops. The results 
can be found using either MV or ZSAMV. 
CONCLUSIONS 
IEE Proc. D, Control Theory and Applications 
(1) 128, pp. 24-29. 
Freeman, E.A. and Barney, G.C., 1963, "Divergent 
oscillations and their excitation in control 
systems with two saturation type nonlinear 
elements", IEE Proc. Vol. 110, No.6, pp 1096-
1106. 
Goucem, A., 1984, "Limit Cycles in Discrete 
Systems", M.Phil Thesis, University of Sussex, 
England. 
McNamara, O.P., 1983, "Programs for limit cycle 
analysis in SIS0 nonlinear sampled data 
systems", University of Sussex Control Engin-
eering Reports Nos. CE/S/13, CE/S/17, 
McNamara, O.P., 1984, "A Describing Function based 
Program for the Analysis and Verification of 
Limit Cycles in SIS0 Nonlinear Systems", 
University of Sussex Control Engineering Report 
No. CE/S/22. 
Utkin, V.l., 1977, "Variable Structure Systems with 
Sliding Modes", IEEE Trans, on Automatic Con-
trol, Vol. AC-22, No.2, pp. 212-222. 
Wadey, M.D., 1983, "An Approximate Means of Pre-
dicting Sliding Limit Cycles and Evaluating 
their Accuracy", University of Sussex Control 
Engineering Report, No. CE/T/7. 
Wadey, M.D., 1984, "MVREL, a program for Limit 
Cycle Analysis in a class of Nonlinear Multi-
variable Control Systems", University of Sussex 
Control Engineering Report, No. CE/S/20. 
ACKNOWLEDGEMENTS 
The authors wish to acknowledge support of this 
research by the U.K. Science and Engineering 
Research Council. 
rit)=a 
x(t)i 
1 y(t) I 
1 
£.(t) 
| G(s) | 
n 
> 
Fig. 1. Block diagram of canonical system. 
The paper has outlined the software suite, SUNS, 
developed at the University of Sussex for the anal-
ysis and design of nonlinear feedback systems. The 
algorithms, which are based on the describing 
function or Tsypkin's method, can be used to eval-
uate periodic modes in continuous and discrete feed-
back systems. The relative stability of a system 
can be assessed by evaluating the amount of gain or 
phase shift which when added to the system will 
cause it to limit cycle. Several examples of 
applications of the software have been given to 
illustrate the scope of the various procedures 
available. In particular the program MV, which is a 
describing function based routine, has been shown to 
be applicable to a variety of system types and con-
figurations. 
REFERENCES 
Atherton, D.P., 1981, "Stability of Nonlinear 
Systems", Ch.6, Research Studies Press, John 
Wiley, Chichester. 
Atherton, D.P., 1982, "Oscillations in Relay 
Systems", Trans. Inst. Meas. and Control, Vol. 
No.4, pp. 171-184. 
Atherton, D.P. and Wadey, M.D., 1981, "Computer 
Aided Analysis and Design of Relay Systems", 
IFAC Symposium in CAD of M.V. Tech. Systems, 
Purdue, USA, pp. 355-360. 
Balasubramanian, R., 1981, "Stability of Limit 
Cycles in Feedback Systems Containing a Relay" 
3, 
Fig. 2. Incorrect solution to Example 1. 

138 
D. P. Atherton et al 
THETACradians) 
Fig. 3. First sliding approximation solution. 
-Fig. 4. Approximate and exact output during 
sliding. 
THETA<radians) 
*** nULTIVARIABLE SYSTEn * 
System ID = STSl 
inearity Input 
tfavePorm Indicators 
+ = Loop t x = Loop 2 
Fig. 7. Limit cycles in Example 4. 
I ï 
V - 3.1116 rods/sec 
Fig. 8. Limit cycle in Example 6. 
'Fig. 5. Sliding solution for Example 1. 
Fedbatk frrors 
l.nop I < — ) 
Loop 2 ( — > 
First block input signal ( — ) 
Block 2 , Loop I 
Output signal ( —) 
6 
·. 3 
< 
5 
6 
V = .6168 raoVsec 
Anp = 2.8931 
V = 6.2832 rads/sec 
Fig. 9. Limit cycle with multirate sampling. 
Fig. 6. Limit cycle in Example 2. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
SIRENA + : 
A VERSATILE INTERACTIVE 
SYSTEM FOR SIMULATION, IDENTIFICATION 
AND CONTROL DESIGN 
A. Barraud, P. Laporte and S. Gentil 
Laboratoire d'Automatique de Grenoble, Ecole Nationale Supérieure de Grenoble, 
BP 46, 38402 Saint Martin d'Hères, France 
Abstract. This paper deals with an interactive system for simulation, identification and control of 
linear systems described by state-space or transfer-functions, in a continuous, discrete or sampled 
representation. Based upon a university prototype, SIRENA + has now reached an industrial quality 
level. Written in FORTRAN-77, this system has been implemented on a large variety of computers. 
Robustness has been ensured by a high quality mathematical software developed from and in a similar 
way as some well known libraries (Harwell, Nats projects, Matlab, . .. ). its modular structure (700 
routines / 60 000 lines) greatly enhances its maintenability and evolution. 
The system is user friendly, with an on-line help and error checking, files saving options, and on-
line graphical features. Commands are prompted adaptively according to the working context and to 
the user skillness. 
SIRENA + performs all the steps necessary for control design ι simulation, identification and 
control. 
Keywords. Computer aided design, Control system analysis, Identification, Modelling. 
INTRODUCTION 
The Automatic Control Laboratory of Grenoble has 
developed research work and applications in all of the 
process control fields for twenty years, in collabo-
ration with industrial firms. This results in 
experience and practice in all control design areas -
simulation, modelization, identification, control 
analysis and synthesis- and in the elaboration of high 
level software also used as Computer Aided Education 
tools for Automatic Control students. 
This experience is now resulting in the implementa-
tion of an industrial Computer Aided Control System 
Design Package, in collaboration with a company. The 
first industrial version, SIRENA, only performed the 
simulation systems defined by a block description, 
but the structure of the software was designed in such 
a way as to permit further extentions. 
Today, SIRENA + is really what is known as a 
CACSD System, since it performs interactively all the 
steps of the control design for systems described by 
state space or transfer functions, in a continuous, 
discrete or sampled representation, involving some 
"classical" non linearities. 
- the simulation commands allow to define 
the systems, with open or closed loops, in an 
arbitrary way, without any a priori limitation in 
complexity. 
- the user can choose between several 
powerful identification methods based either on an 
equation error or an output error, processing time-
response or frequency-response data. 
- control design is based on an enlarged LQG 
theory, enabling the user to define easily the closed 
loop performance, including constrained control. 
Furthermore, SIRENA + presents all of the features of 
a CAD software : it is user friendly with on-line help 
and error checking, like saving options and on-line 
graphical tools. 
In this paper, the three main parts of the package are 
described : simulation, identification and control 
design. Then the numerical, interactive and graphical 
aspects are discussed and then the software design 
guidelines are evoked. A concrete example illustrates 
some of the SIRENA + features. 
SIMULATION 
SIRENA + is a versatile computer aided design package. 
It is fully interactive ; the user operates in a very 
friendly way to describe one or more dynamical 
systems, (continuous, discrete or sampled). Each 
system can be decomposed into a set of elementary 
blocks (transfer function, non linear expression, 
state space representation of any order) connected in 
an arbitrary way. All elements described under SIRENA 
+ are recognized by their name (inputs, outputs, 
auxiliary signals, elementary blocks, formal parame-
ters, etc...). Appropriate instructions allow the 
user to modify, at any time, the structure of a system 
(add a loop, an input, change an elementary block, 
. .. ) or to link it with previously created systems. In 
order to have a nice man machine communication, an 
adaptive on line help has been implemented which 
efficiently supports beginners and advanced users, 
during working sessions. 
Any numerical simulation requires to go through the 
following steps : 
- structural and formal descriptions of the 
systems to be simulated. 
139 

140 
A. Barraud, P. Laporte and S. Gentil 
- description of the inputs. These inputs 
are chosen from built-in signals (impulse, step, 
ramp, sine wave, PRBS, PRTS, uniform and gaussian 
noise) or come from user data files (in an ad-hoc 
format). 
- time or frequency ranges according to 
simulation domain. 
At this time, SIRENA + checks that all the parameters 
are numerically known. If it is not the case^the user 
is prompted to give appropriate numerical values (or 
range of values ) for each formal parameters ( for 
example : position of pole, zero order, PRBS register 
numbers, sampling rate value, . . . ) . 
A(z 1 ) y(k) = 
E Bt(z X ) ut(k) 
(1) 
1=1 
r 
B.(z ) 
Y(M « 
E 
i=l A.(z 1 ) 
1 
u(s) 
B(s) 
= 
A(s) 
u,(k) 
(2) 
H(s) 
(3) 
Technically, SIRENA + operates under several modes 
according to the type of the systems described. 
- Fully linear dynamical systems, if 
described by transfer functions, are formally and 
numerically reduced to one open loop transfer 
function (Mason's rules) ; otherwise the simulation 
is performed step by step according to the global 
path. 
- Sampled and non linear systems are 
computed step by step, or partly reduced for 
performances. 
- The continuous non-linear blocks are 
simulated with variable steps, and the linear ones 
with constant steps. These steps are automatically 
computed. Numerical aspects are described in more 
details below. 
Computed signals can be displayed as numerical values 
(terminal, line-printer) or graphically. In the later 
case, all computed signals are automatically displa-
yed in a standard way, including Bode, Black and 
Nyquist plots for the frequency domain. The corres-
ponding default options can then be modified by the 
means of an on line graphical editor (new labelling, 
zooming, screan configuration, 
. . . ) . 
If the results obtained are considered meaningfull 
for other computations or comparisons (identifica-
tion, control design, ... ) they can be saved as new 
built-in SIRENA data files. These files can also be 
accessed (read only) by other user programs. 
Before leaving SIRENA +, the user can make several 
actions. All the work done under SIRENA + is recorded 
in a data base (systems described with their 
structure, parameters values, saved data files 
obtained from simulation, . . . ). This data base can be 
completely or partly cleaned, or completely saved. 
The user has the possibility to resume his work or to 
begin a new one every time SIRENA is logged in. 
IDENTIFICATION 
Sirena + contains a relatively large number of 
identification algorithms which mainly belong to two 
classes of methods : output error or equation error 
minimization, and apply to frequency responses or 
time responses of MISO systems (Multiple Inputs -
Single Output) (Astrom and Eykoff, 1970). Multiple 
Outputs systems are considered at this stage as a set 
of Single Output ones ; a global approach has not been 
implemented owing to the difficulties of handling 
multivariable identification methods without some 
skillness. 
With y as an output, u1 as an input, s as the Laplace 
operator, z - 1 as the delay operator and k as a discrete 
sampling-time, the following three models can be used 
to define a system 
A( . ) and B( . ) are polynomials of order n and m 
respectively, the constant term of A( . ) being 
normalized to 1. In the following, Θ is the unknown 
vector containing the A(. ) and B(.) parameters. 
The minimization of an output error, M-O-E, which is a 
very general method can be applied to the three types 
of models. For models (1) and (2), it processes 
sampled time response of the system ; model (1) 
corresponds in fact to model ( 2 ) with a common 
denominator, so that : 
A(z~ 
L). 
I f ym( k ) represents the measurements and N the number 
of sampling times, the following criterion is 
minimized : 
θ 0 Ε = arg min (£ (Ym(k) - y(k))2 
For model (3), the method processes (at present) the 
frequency response of the system ; the minimization 
criterion is : 
θΟΕ = a r <3 m i n < E IH(3wk) - (vk + jxk)l2 
where v k and x k represent the real and imaginary parts 
of the experimental NYQUIST plot at pulsation wk. 
It does not present any difficulty to implement the 
output error method for time response of model (3), 
this is part of the ungoing extensions of the package. 
The minimization of an equation error is applied to 
model (1), owing to the three methods : Simple-Least-
Squares, S.L.S., Extended-Least-Squares, E.L.S. (Don 
car 1 i, de Larminat, 1978), and Maximum- Like lyhood, 
M.L.In this last case, besides polynomials A(z_1) and 
Biz"1), a filter C(z_1) is used for noise modelling. 
To get into the identification modulus, the user has 
to type MODELISATION ; the nature of the system 
(CONTINUOUS/DISCRETE) has yet been defined. The 
measurement set is supposed to be pre-processed in the 
SIGNAL-PROCESSING modulus (filtering, centering, 
averaging, correlating : input-output correlation 
gives the impulse response of the system if the input 
is a white noise or a PRBS and by these means the user 
gets qualitative informations on the system : delays, 
oscillating poles, 
. . . ) . 
Then the user has the choice between model ( 1 ) and ( 2 ) 
if the system is discrete. He has to fix the delay with 
respect to each input and the orders n and m of the 
polynomials A( . ) and B^( . ). He then selects among the 
methods applying to the chosen structure. Afterwards, 
identification is running : matrix handling or non-
linear programming, depending on the method. In this 
latter case, initial parameters values have to be 
provided to start the search in the parameter space ; 
the user can supply these values if he has a previous 
knowledge of the model or the initialization can be 
automatic. In that instance, the S.L.S. algorithm is 
activated and its results are used to initialize the 

SIRENA + 
141 
M.O.E. one, ant the E.L.S. 
initialization. 
results are used for M.L. 
and Q to the generalized upper Schur form 
In addition to the values of the parameters, the 
package provides extra-information to help the user 
to decide if the results are good or if another run is 
necessary : standard-deviations of parameters, va-
lues of poles and zeros, gains, optimal value of the 
output error ; AKAIKE's criterion, graphical plot of 
model simulation and measurements (Laporte et al, 
1985). 
Then the user can repeat the identification, starting 
again from the model definition or the choice of the 
method, Pig. 1, or leave the MODELIZATION modulus. 
P.S(X).çH 
V ABf 
X 
X 
X 
X 
Α.-λΒ. 
X 
ΑΓ λ Βυ 
(5) 
where A_ 
TIME/FREQUENCY 
RESPONSE 
DATA LECTURE!^ 
STRUCTURE 
DEFINITION 
CHOICE OF 
THE METHOD 
RESULTS 
lyesjl 
no M 
Identifi 
cation 
^aj^yia^ed^ 
Try another 
method 
[
Another dat 
set ? 
I Another typel. 
^of response?! 
yes 
r and A^ - \B1 are non square pencils with 
no zeros (right and left minimal indices of S), A ± -
λΒ^ is a regular pencil with no finite zero and A f - ABf 
is a regular pencil whose generalized eigen values are 
the finite zeros of S(X). 
Pole Placement 
This technique is only available for SISO systems. 
Sirena implements the Targa's method, 1981, which 
essentially transforms the (A, B) pair in Schur form 
via orthogonal transformation and lastly computes the 
feedback gain in a stable way and comes back to the 
initial basis. 
Linear Quadratic Control Algorithms 
Let Q and R be the weihting matrices respectively 
associated with the state x and the input u. The 
following hypotheses hold : 
R = R T > 0 ; Q = L T > 0 
(A, B) is stabilisable ; (L, A) is detectable. 
Then the Riccatti equation that must be solved has a 
unique solution P such that P T > 0. 
L T . L > 0 
P T = P > 0 
Fig. 1 ; The modelization modulus 
CONTROL DESIGN TOOLS 
In order to compute the matrix state feedback G, hence 
P, it is now necessary to distinguish between discrete 
and continuous systems. 
Some of the facilities implemented in Sirena +, in 
order to perform control synthesis, mainly via state 
space representation will be discussed now. Pole zero 
evaluation, pole placement, and classical linear 
quadratic control will be successively considered. 
- Continuous case : 
It is well known that 
Pole/Zero Evaluation. 
The problem is trivial for transfer function repre-
sentation, since poles and zeros are computed as roots 
of polynomials. There exists some excellent routines 
to solve this problem. Now, let us consider a state 
space model 
£(A, B, C, D). Then the poles of the 
system are computed as the eigenvalues of A. The 
computation of the finite zeros, which is much more 
difficult, is done according to Van Dooren method, 
1982. Let S( λ ) be the system matrix associated with E : 
S(X) 
Γ XI - A 
C 
(4) 
Now s( λ ) is transformed by unitary transformations P 
P : PA + A*P - PVP + Q = 0 
Let H be the hamiltonian matrix 
H - [ A 
-Q 
:* I 
(6) 
Prom this step, Sirena + runs two algorithms 
a) Laub·s method (1979) P = F 2 1 F ^ 1 
with 
such that 
F HF 
[ρι 
l P 2 1 
T 
F HF = [Hi 
0 
P12 I 
P 2 J 
"" 1 
H2 
(7) 

142 
A. Barraud, P. Laporte and S. Gentil 
i.e. F is an orthogonal transformation which trans-
forms H into the real ordered Schur form (i.e. the 
spectrum of Η 2 is asymptotically stable while the 
spectrum of H 2 is unstable). 
b) Barraud's method (1979) P = F 2 F 1 2~ 1 
F « 1/2 [1 - sign(H)] 
(8) 
where sign(H) is the matrix sign function computed via 
an accelerated Newton algorithm. 
- Discrete case : 
Now : 
(9) 
P:AT PA-P-A^BiB^B+Rr^PA+Q^O 
(10) 
P : A T PA 
The matrix equivalent to H is now a symplectic matrix S 
which can be written : 
As sirena + is user-oriented, the interactive and 
graphical features have been fully studied, in 
connection with the computer aided teaching expe-
rience of the L.A.G. 
Numerical Aspects 
High quality numerical algorithms have been used to 
ensure robustness and accuracy ; most of them are 
parts of well known librairies : BLAS (Lawson et al, 
1972), LINPACK (Dongarra et al, 1979), EISPACK 
(Garbow et al, 1977), HARWELL (Hopper, 1980). 
The simulation method depends on the type of the 
system : for discrete systems, it only consists in 
simple inner products ; the linear continuous systems 
case is handled like the previous one, after the 
system, described by a transfer function or a state 
space representation, has been transformed into a 
discrete form : 
Let 
■= Ax + Bu 
y - Cx 
(14) 
S .= u XL = 
A 
0 
-Q 
1 
(11) 
be the continuous state space representation of the 
system, either provided by the user or obtained from 
the transfer function. Matrix exponentiation (Pade 
approximation ) gives the equivalent discrete system : 
If A is regular (in practice well conditionned) S is 
explicitely known : 
-T 
A + VA Q 
- VA 
-T 
(12) 
-1 
a) Laub*s method, 1980, P ■* F 2 1 F^ 
In order to define F, let us consider the generalized 
eigenvalue problem 
L--\lJZ. This problem can be 
changed into generalized real ordered Schur form, 
i.e. L is the real ordered Schur form and U upper 
triangular. The orthogonal transformation is F. 
b) Barraud's method P - F 2 1 F1 -1 
F = sign 
l+A J 
-1 r 
-V 
(33) 
It must be emphasized here that this result can be 
directely derived from the continuous case via a 
bilinear transformation, and holds even if A is 
singular. 
% + 
r ^ 
c5* 
with 
Φ 
.0 
Γ 
1. 
- 
exp 
A 
.0 
B 
0 . 
(15) 
where h is the sampling step provided by the user or 
calculated according to a stability and precision 
criterion (Barraud, 1981). 
In case of non linearities or when the previous method 
fails because of an ill conditionning, the equations 
are integrated with Runge Kutta Feldberg ( Forsythe et 
al, 1977) or the Gear (1971) algorithms. Finally, the 
sampled systems simulation combines both techniques. 
The system identification mainly involves a Least 
Squares problem, and two cases have to be considered. 
In the linear unconstrained case, the criterion is a 
quadratic function of the parameters set and the 
explicit solution is calculated through an algorithm 
based on sequential orthogonal transformations (Gi-
vens rotations), which is numerically stable and has 
small memory requirements (Lawson an Hanson, 1974 ; 
Don Carli and De Larminat, 1978). 
In the non-linear unconstrained case, the Least 
Squares problem is solved by a quasi-Newton algori-
thm, which requires analytic gradients of the 
criterion (Powell, 1975). 
NUMERICAL, STRUCTURAL AMD COMMUNICATION 
ASPECTS 
Since Sirena + is an industrial product, robustness, 
efficiency, transportability, maintenability and 
evolution are some of the required qualities for it. 
They result in constraints in all the steps of the 
software design, but the time spent in this way is 
widely recovered when new developments are going on. 
Most of the matrix computation involved in the control 
design algorithms come from LINPACK, EISPACK and 
collected algorithms from ACM. The commandability -
stabiusability 
(observability - detectability ) 
tests which can be performed automatically, or at the 
user requests, are performed according to Varga's 
idea, 1981. 
The reliability of Sirena + is enhanced by a general 
error checking at each step of the calculus : whatever 
user's problem no breakdown can occur. 

SIRENA + 
143 
Implementation Aspects 
Sirena + is entirely written in Fortran 77 
to ensure its transportability -only a small kernel of 
200 lines out of 60 000 lines is device dependant- and 
in order to easily include external libraries. It has 
now been implemented on a large variety of computers, 
ranging from Micromega 32 to CDC Cyber. 
The structure is modular ( 700 modules ) and the program 
is fully annotated to enhance maintenability and 
evolution. New methods or algorithms can be implemen-
ted very easily and Sirena + is currently under 
progress. 
Interactive and Graphical Features 
Beside the numerical qualities, user interface is a 
very important feature in a CAD system : the way in 
which the dialogue is provided and the system outputs 
appears -results, error messages, graphical plots-
must be fully studied. 
Sirena + provides a question-and-answer command mode 
which does not require any previous knowledge : it is 
well adapted to beginners or casual users. In 
addition, an on-line help is always available with the 
reserved character "?" and all the inputs of the user 
are checked. For advanced users, answers can be 
abreviated or even anticipated when the next ques-
tions are known ; it is also possible to go backwards 
in the scheduled dialogue with the reserved character 
"£". 
Every calculus is illustrated either with numerical 
tables or with graphical plots. In the latter case, 
the standard presentation, adapted to the working 
context, can be immediatly modified by the user with 
an on-line graphical editor which provides a large set 
of interactive tools. 
Sirena + also provides a file saving option to keep the 
results for further processing. 
Clearly, Sirena + has been designed to be user 
friendly and easily accessible : the users concerned 
by it are students or engineers who mostly want to get 
a lot of reliable results rapidly. So, unlike other 
university CASCD systems, Sirena + does not provide 
all the existing methods but only an efficient subset, 
neither all the possible interactive facilities, such 
as a command-driven mode, which would require to learn 
another language. 
Example 
As an example, the pilot plant of the L.A.G. has been 
used. It consists in a distillation column controlled 
by a network of microcomputers. This column is 
composed of 9 plates of diameter 150 mm ; the feed flow 
is lead to one of the intermediate plates. The boiler 
contains 18 resistors (42 KW) to provide variable 
heating. Once condensed, a part of the vapor goes out 
of the column, forming the product, while the other 
part is internally recycled : this is known as 
internal reflux. This system is MIM0 (Fig. 2 ) . 
Ident i ficat ion 
Fig. 3 shows an identification run applied to a 
response of XD to a PRBS applied on QB. The 
graphical output comparing the process response 
with the model response appears on Fig. 4. 
Every SISO transfer function is identified in the 
same way. Careful attention is payed to the 
selection of delay K, and of n and m, degrees of 
A( . ) and B( . ). 
Simulation 
The simulation of the transfer function between XD 
and the two inputs is shown on Fig. 5 where computer 
prompts are underlined. Simulation are used at this 
step to validate the model behaviour, using data 
that have not been used for the identification, for 
instance. 
Control 
An LQ control is then computed. Fig. 6 shows the use 
of this part of Sirena +. Obviously a lot of 
simulation can then be run in order to choose the 
best feedback gain and possibly check the effect of 
some non linearities neglected by the model. 
CONCLUSION 
is Sirena + a new product, or is it another C.A.D. 
package among many others ? In fact, there are many 
hundred of packages in the world, devoted to this 
field. Several papers have already been devoted to 
exhaustive surveys. Sirena + is not a general 
purpose simulation tool as for example Dynamo, CSL, 
ACSL, CSMP and many others. It is not a language nor 
a software tool as Delight, Nye 1982. It is not a 
set of "main programs" more or less linked together 
Cypros, Tysso, 1979, Simnon, Modpac, Synpac, Idpac, 
Wieslander 1980. Sirena + has not been developed 
from MATLAB, Mo1er 1980, see Matrix^ CTRL-C,... 
Its facilities look like KEDDC, Schmid 1983. Sirena 
+ is a new product in the CAD area. It manages a 
complete data-base implicitely created by the user. 
Any number of systems can be recognized by Sirena +, 
linked together, modified, cleared.. . Up to now 70 % 
of Sirena + is devoted to this data-base management, 
and alphanumeric / graphical dialogue. This part 
has approximatively reached its optimal efficiency. 
Most of the present developments are concerned with 
new facilities : formal and numerical reduction of 
state space models path, petri-net simulation and 
management of a knowledge data-base firstly in the 
identification field : Sirena + must become an 
expert system in the C.A.D. field. 
REFERENCES 
Astrom, K.J., Eykoff, P., 
(1970). System Identi-
fication : A Survey. IFAC Symposium on Identi-
fication and System Parameters Estimation, Pra-
gue. 
Barraud, A. Y., 
(1979). 
Investigations autour de 
la fonction signe d'une matrice-application à 
l'équation de Riccati. RAIRO Automatique, vol. 
13, no 4, pp. 335-368. 
QB_ im 
XEL 
Fig. 2 : Pilot plant structure 
XD represents the concentration of the final product, 
LD its flow rate. QB is the heating power and R the 
internal reflux. Every output is coupled to every 
input. 

144 
A. Barraud, P. Laporte and S. Gentil 
Barraud, A., Y., 
(1981). 
More on the conversion 
problem of discrete-continuous models. Appl. 
Math. Modelling, vol. 5, pp. 414-416. 
varga, A. 
(1981). 
Numerically stable Algorithm 
for Standard Controllability Form. Electr. 
Letters, vol. 77-2, pp. 74-75. 
Don carli, c , De Larminat, Ph., (1978). Analyse 
de 
la 
stabilité 
globale 
d'un 
algorithme 
d'identification recursive des systèmes li-
néaires stochastiques discrets. RAIRO Automati-
que, vol. 12, no 3, pp. 269-276. 
COEFFICIENTS 
ECART 
Tfft 
Dongarra, J.J., Moler, C.B., Bunch, J.R., Stewart, 
G.W., (1979). Linpack user's guide. SIAM Phi-
ladelphia. 
Emami-Naeisi, A., Van Dooren, P., 
(1982). Compu-
tation 
of 
Zeros 
of 
Linear 
Multivariable 
Systems. Automatica, vol. 18, no 4, pp. 415-
430. 
Porsythe, 
G.E., 
Mallon, 
M.A., 
Moler, 
G.B., 
(1977). 
Computer Methods for Mathematical 
Computations. Ed. Prentice Hall. 
Garbow, B.S., et al 
(1977). 
Matrix Eigensystems 
Routines - EISPACK Gird Extensions. Lecture 
notes in Computer Science, vol. 51, Springer 
Verlag, Berlin. 
Gear, G.W., 
(1971). Numerical Initial Value Pro-
blem in O.D.E. Ed. Prentice Hall. 
Hopper, M.J. (1980). Harwell Subroutine Linbrary. 
A catalogue of subroutines. A.E.R.E. R 9185, 
UKAEA Harwell, England. 
POLES 
PARTIE REELLE 
PARTIE IMAGINAIRE 
MODULE 
.B36230E+ÎM) 
.UOOOOOE+OC) 
.8je^48E*( 
* * * * MUNERA-EUR * * * * 
* · · « DEGRE 
H = 
O 
+ * * * PUISSANCE DE U EN FACTEUR K = 
3 
COEFFICIENTS 
-.11»232E*(X) 
GAIN STATIOUE 
: 
- . 72 19/-3E*00 
. . . . NUMERATEUR DU FILTRE SUR LE BRUIT 
* * * * DEGRE 
L = 
1 
COEFFICIENTS 
.HXXXJUE+01 
.429852E-()1 
* ZEROS 
PARTIE REELLE 
PARTIE IHAGINAIRE 
-.329ai2E-()1 
.()()()(>(K)E*0l) 
ECART TYPE 
.UUùSeE-Ol 
.... 
ECART TTPE 
.t)()lX«)()E+()(» 
.119//5E*tX) 
rlODULE 
.32V8S2E-C)1 
Fig. 3 
Identification 
» » 
ERREUR D'EQUATION EN Z : 
J2.0S52 
» » 
ERREUR DE SORTIE FN t 
: 
M.kiS/ 
>>>> CRI»E«E D'AKAIKE 
- 1 7 . M 0 6 
Laporte, P. Barraud, A., Gentil, S. 
(1985). 
An 
Interactive Computer Aided Identification Pa-
ckage. IFAC Symposium on Identification and 
System Parameters Estimation, York, England. 
Laub, A.J., 
(1980). 
A Schur method for solving 
algebraic Ricatti equations. I.E.E.E. Trans, on 
Aut. Cont. vol. AC-25, no 4, pp. 631-641. 
Lawson, C.L., Hanson, R.J., Kincaid, D.R., and 
Krogh, F.T. 
(1977). 
Basic Linear Algebra 
Subprograms for FORTRAN Usage. SAND 77, 0898, 
Sandia Laboratories, U.S.A. 
Moler, C , 
(1980). 
Matlab user's guide. Depart-
ment of Computer Sciences, University of New-
Mexico, U.S.A. 
Nye, B., Tits, A., (1982). Delight for Beginners, 
Report, Electronic Research Laboratory, Berke-
ley, U.S.A. 
Pappas, J., Laub, A.J., 
(1980). On the Numerical 
Solution of the discrete Time Algebric Riccati 
equation. I.E.E.E. Trans. Aut. Cont., vol. AC-
25, no 4, pp. 631-641. 
Petkov, P., Christov, N., Konstantinov, M. (1984). 
Numerically Stable Algorithm and Program for 
Pole Assignment of Linear Single Input Systems. 
6th International Conference on Analysis and 
Optimisation of Systems. Nice, France. 
Powell, J.D., 
(1975). 
Some Global Convergence 
Properties of a Variable Metric Algorithm for 
Minimization 
without 
Exact 
Line 
Searches. 
C.S.S. 15 Report AERE Harwell. 
Schmid, C.H.R., 
using KEDDC, 
R.F.A. 
(1983). 
Report, 
CAD of Adaptive systems 
Ruhr University, Bochum, 
Tysso, A., 
(1979). 
CYPROS s Cybernetic Program 
Packages, IFAC Symposium on CAD of Control 
Systems, Zurich. 
output 
NÜ.1 
S I 
PARAMETKE-SYSTEi'iF. 
: '.lb 
NATURE : 
PUINT-PAR-POIMT 
MÛ» Ou F ICH I E » 
: 
SG-C:SY,I 
F ok HAT hC LPCTUftE 
: 
M E l ^ . O 
Hô mttfc' ÜE" p U I ^ l S " : 
I04 
NO 11»RE r> "ELEMENTS PAK 
ENR EK IS TR EHE i 
POSITION 
bU Ρ01ΗΓ 
: 
I 
PAHA1ETRE-SYSTEHE 
: K 
'r.'AfjRfc' 
: 
P 0 I N T - P A R - P 0 I N T 
- C : S Yl 
: 
(.SETV.4) 
MOI 
!>U FICHIER 
FORfiAT DE LECTURE 
r J i H M E bE K J I M S 
: 
104 
NülBflE »"ELEMENTS PAR 
ENREGISTREMENT 
POSITION 
l)U ΡϋΙΗΤ 
: 
2 
PARAMETRE-SYSTEME 
: H 
NATURE 
: 
TRANSrtTTTÂNCE 
COEF-faAIN : 
. 1 0000000E +0Ί 
FO'iME -NUfiEfATEUR 
: POLYNOME 
COEFFICIENTS 
.lOOOOOOUh+0 1 
FO-tHE-DENOMINATEUR 
: 
RACINE 
VALEUR DES RACINES 
: 
< 0 ) 
PAU/UlETRE-SYSTEHE 
: 
HI 
MATURE 
: 
Ï.R ANS PITTANCE 
CUËF'-b»lN ; 
- . I 0 J 9 9 9 9 9 E + Î H ) 
FORME-NUMTÎTATEUR 
: 
POLYNOME 
COEFFICIENTS 
: 
.IOOOOOOOE+0l 
FO'ÎME-DENOMINATEUR 
: RACINE 
VALEUR DES RACINES 
: ( . ÖJ > 9VVy/E + ();)) 
PARAMETRE-SYSTEME 
: 
H i 
NATURE 
: TRANS PITTANCE 
CÜifF-ÜAIN : 
.96 9 9 9 9 / 3 Ε-0Ί 
: 
POLYNOME 
ΤΤΤΠΠθΟΟΟΕ+ΟΙ 
: 
RACINE 
7 
( . VJ4V9l.>V4E + 0 )) 
Fig. 5 
Simulation 
FO'iNE -NUMERATEUR 
F 0?1' E-D E NQj-IINATEUR 
VALEUR HES RAÉI-MES 
! ! ' ! 
FOHCTION(S) DE TRANSFERT EN X=Z**-I 
! ! ! ! POLYNOMES ORDONNES PAR PUISSANCE CROISSANTE DE W 
* * * * DENOMINATEUR * ♦** 
· · « * OEGRE 
N = 
1 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
RECENT ADVANCES IN THE L-A-S 
SOFTWARE USED IN CAD OF CONTROL 
SYSTEMS 
S. P. Bingulac*, P. J. West** and W. R. Perkins** 
* Electrical Engineering Department, Virginia Polytechnic Institute and State 
University, Blacksburg, VA 24061, USA 
^^Coordinated Science Laboratory and Department of Electrical and Computer 
Engineering, University of Illinois, Urbana, IL 61801, USA 
ABSTRACT 
This paper reviews the basic features of a high-level, interactive, conversational language 
called L—A—S (Linear Algebra and Systems). Particular emphasis is placed upon recent 
developments of this Computer-Aided Design (CAD) language. Unlike the conventional 
menu-driven approach of many CAD packages, L—A—S provides the user with considerable 
flexibility in the development and maintenance of linear algebra and control algorithms. 
L—A—S is both a language and an interpreter. Users of L—A—S write programs while 
interacting with the interpreter. Programs may be edited, stored, recalled, and executed with 
the same or a different data set. L—A— S data structures include matrices, polynomials 
(continuous or discrete), and matrices of polynomials. In this paper, we briefly review the 
basics of the L—A—S language. Then, we concentrate on those features of L—A—S which have 
been added within the last year. These include the Multiple Operator Statement (MOS), 
L—A—S user-defined subroutines, and the most-recent "echo" feature for interaction with the 
interpreter. Examples accompany the text to illustrate each new feature. 
KEYWORDS 
Computer-aided 
Design, Programming 
Languages, Control 
Engineering 
Computer Applications, Control System Analysis/Synthesis 
INTRODUCTION 
This paper reviews the basic features of a high-
level, interactive, conversational 
language 
called 
L-A-S (Linear Algebra and Systems). 
Particular 
emphasis is placed upon recent developments of this 
Computer-Aided Design (CAD) language. Unlike the 
conventional menu-driven approach oï many CAD 
packages, L-A-S provides the user with considerable 
flexibility in the development and maintenance of 
linear algebra and control algorithms. L-A-S is both a 
language and an interpreter. Users of L-A-S write 
programs while interacting with the interpreter. 
Programs may be edited, stored, recalled, and executed 
with the same or a different data set. L-A-S data 
structures include matrices, polynomials (continuous 
or discrete), and matrices of polynomials. 
L-A-S is composed of 
a large collection of 
FORTRAN subroutines (about 20,000 lines of code). 
Furthermore, L-A-S employs software such as the 
E1SPACK and L1NPACK packages to insure that the 
algorithms used for solving problems are of the 
highest degree of numerical integrity and precision. In 
addition, L-A-S is available in both single and double 
precision versions. The software structure of L-A-S is 
very modular. 
Hence L-A-S can and has been 
implemented on computer installations ranging from 
mini's to high-speed 
virtual 
memory 
machines. 
Moreover, modularity implies that extensions and 
enhancements of the L-A-S software are readily 
incorporated. The syntax and semantics of L-A-S are 
straightforward so that familiarity with the language 
may be easily and rapidly attained. 
In the normal interactive mode, the user types 
statements directly to the L-A-S language interpreter. 
Each statement is either an interpreter command (e.g., 
put L-A-S into program debug mode) or an operator 
statement. The former instructs L-A-S to display or 
modify various status information concerning the 
current L-A-S work session. The latter invokes the 
L-A-S language parser which subsequently calls upon 
the FORTRAN subroutines needed to process some 
kind of computation. 
Essentially, input data are 
combined with one or more L-A-S operators to produce 
output data. The concept of an operator, as well as the 
utility of L-A-S operators as algorithm building blocks 
has been widely documented [1,2,7]. An extensive on-
line help facility containing detailed information 
about L-A-S usage is at the disposal of the user. 
The interpreter commands are unique to L-A-S. 
Once the operator statements are mastered, the 
interpreter commands permit efficient management 
and control of the current L-A-S work session. A 
thorough description of all the interpreter commands 
will not be pursued here. Rather, we summarize them 
in Table 3 at the end of the paper. 
One of the primary functions of the L-A-S 
language is in the development, testing, and e\Taluation 
145 

146 
S. P. Bingulac, P. J. West and W. R. Perkins 
of control design and analysis problems. Its usefulness 
has also been verified in undergraduate and graduate 
courses treating linear algebra, numerical analysis, and 
control theory. In non-academic settings, L-A-S has 
served as a "matrix desk-top calculator" for quick 
solution of any problem that may be decomposed into 
a sequence of existing L-A-S operators. The computer 
resources required by L-A-S are rather modest and 
may be easily adjusted to a particular computer 
installation. Presently, L-A-S has been implemented 
on several different 
computers at over a dozen 
locations around the world. 
In this paper, we briefly review the basics of the 
L-A-S language. 
Then, we concentrate on those 
features of L-A-S which have been added within the 
last year. 
These include the Multiple Operator 
Statement CMOS), L-A-S user-defined subroutines, and 
the most-recent "echo" feature for interaction with the 
interpreter. Examples accompany the text to illustrate 
each new feature. The references should be consulted 
for additional information concerning the L-A-S CAD 
language. 
L-A-S OPERATOR STATEMENTS 
The 
fundamental 
concept 
behind 
an 
L-A-S 
program 
is the 
notion 
of 
an 
L-A-S 
operator. 
Essentially, 
operators 
should 
be 
viewed 
as 
generalizations of choices on a menu. That is, consider 
an arbitrary linear algebra or control system menu of 
allowable computations. Then, an L-A-S operator 
simply extracts the function 
performed 
by any 
particular choice and attaches a mnemonic name to 
that 
function. 
In other words, L-A-S operators 
perform some desired calculation on input data, 
indicate errors if any, and generate output data. 
Operators are issued to the L-A-S language interpreter 
along with the names of the data used and generated. 
Operators are divided into five groups : Input/Output, 
Data Handling, Linear Algebra, Control Systems, and 
L-A-S Program Control. Presently, there are more 
than 100 L-A-S operators, (see Table 1). Furthermore, 
the L-A-S user can currently define a maximum of 
100 matrices with the total number of matrix 
elements not to exceed 50,000. The maximum order of 
any particular matrix is not explicitly limited. 
L-A-S programs are written by combining one or 
more operator statements. L-A-S is a 
free-format 
language. 
This means that unless a comment is 
entered, blanks are removed prior to scanning by the 
interpreter. Thus, the format in which a program is 
typed is unrestricted or free. Upon receiving a line of 
text, the interpreter parses and subsequently analyzes 
the L-A-S statement. If the syntax and semantics of 
the statement are correct, then the L-A-S driver 
library 
calls 
upon 
the 
necessary 
FORTRAN 
subroutines to perform the computations. 
1. Single L-A-S Operator Statement Syntax 
The 
general 
structure 
of 
a single 
operator 
statement is as follows: 
label : input-field ( operator-field ) = out put-field, 
(l) 
The symbols :, (, ) and = act as field delimiters. The 
label, which is optional, is usually used in conjunction 
with the L-A-S Program Control group of operators 
(Table 1). The input-field consists of zero or more 
variables and/or constants. The operator-field can be 
decomposed into 2 subfields, the operator mnemonic 
and the option subfields. The decomposition has the 
following form: 
operator — field ::= op—mnemonic 
[, option](2) 
where 
option ::= E I L I P I T . 
(3) 
In the programming language literature [3,4,5], (2) 
and (3) represent what are commonly called language 
production rules. The so-called metasymbol "::=" can 
be interpreted as "is produced by". Thus, (3) may be 
read as "the symbol option is produced by a choice of 
one of the following letters : E, L, P, or T". In 
particular, 
E means print numbers in an Exponential (E) 
format, 
L means append to the Lineprinter data file, 
P means Plot the results on a graphics terminal, and 
T means Type the result(s) of this calculation. 
Finally, the output-field 
consists of zero or more 
variables that are defined upon successful completion 
of the calculation. 
It is useful to illustrate the preceeding ideas with a 
simple example. We emphasize the fact that single 
L-A-S operator statements resemble, to a high degree, 
standard 
linear 
algebra 
notation 
and 
that 
the 
"overhead" notation required by the L-A-S language 
interpreter is minimal. 
Consider 
the 
following 
three 
linear 
algebra 
operations : matrix addition, matrix multiplication, 
and matrix inversion. Suppose that we are already 
given two square matrices, A and B. Suppose further 
that we want to perform the following sequence of 
calculations: 
C = A + B 
(4) 
D = C * A 
(5) 
E = B"1 
(6) 
Notice that we implicitly assume that the assignment 
statement computes the quantity on the right hand 
side and subsequently stores it in the array named on 
the left hand side of the equation, that is, the equal 
sign acts "right to left". Conversely, L-A-S operators 
act "left to right". Hence, the L-A-S statements that 
implement the computations (4), (5), and (6) above are, 
respectively. 
A,B (+) 
= C 
(7) 
C,A (*) 
= D 
(8) 
B (-1) 
= E 
(9) 
Because the operator follows the input variables, we 
say that single L-A-S operator statements are written 
in a postfix notation [5]. Also, the same variable name 
may be used in both input and output fields. 
2. Multiple L-A-S Operator Statements 
It is possible to perform more than one operation 

Recent Advances in the L-A-S Software 
147 
per L-A-S statement. Let us continue with our simple 
example of linear matrix algebra. Suppose that the 
matrix C in (7) and (8) is computed only as an 
intermediate quantity. That is, the result of adding A 
and B in (7) is needed implicitly in the ensuing 
calculation (8), but not explicitly. Thus, we view C as 
a temporary variable. 
Given this situation, it would be desirable to 
eliminate the explicit computation of the array C. 
Not only would this save user memory space, but in 
addition it would lessen the overall quantity of L-A-S 
computer code. This savings can be accomplished by 
entering the following Multiple Operator Statement 
(MOS) to the L-A-S interpreter. 
A,B (+) ,A (*) 
= D 
(10) 
To understand the effect of (10), one must 
understand the L-A-S parsing process. Upon receipt of 
any statement, the interpreter begins scanning left-to-
right. When the first operator is encountered, in this 
case (+), L-A-S immediately performs the indicated 
operation. The result is stored in a temporary array, 
call it Tl. Thus after one pass through the MOS, (10) 
becomes : 
Tl ,A (*) 
= D 
(11) 
and (7) has been performed. The scanning process is 
repeated until all operators are exhausted. Clearly, 
(10) is equivalent to (7) followed by (8), where the 
array C has been replaced by the temporary array Tl. 
USER-DEFINED L-A-S SUBROUTINES 
A very useful feature of a programming language 
is a subroutine capability. The ability to write user-
defined L-A-S subroutines permits the construction of 
structured, compact, and efficient L-A-S programs. 
To illustrate this, consider again our simple 
example. Suppose that the calculations defined by (4), 
(5), and (6) are to be performed repeatedly throughout 
some more complex algorithm. Then the definition of 
a subroutine that performs this task is a rational 
solution. Assume that, in this subroutine, we wish to 
use the MOS version of (7) and (8) given by (10). For 
lack of a more meaningful name, we will call our 
routine XYZ. Then, the L-A-S subroutine definition 
for XYZ takes the following form : 
(12) 
(13) 
(14) 
(15) 
The subroutine XYZ is declared by (12). There are 
two array names in the input field, (A &. B), and two 
names in the output field, (D & E). The body of the 
routine consists of (13) and (14). Finally, a return to 
the calling routine in the L-A-S language is performed 
by executing the RETurn operator displayed in (15). 
Typical calls to this subroutine might look like : 
A,B (XYZ,SUB) 
^,Β (+) , A (*) 
B (-1) 
(RET) 
= 
= 
= 
= 
D,E 
D 
E 
A,B (XYZ,SUB) 
= D,E 
R,S (XYZ,SUB) 
1 
Y,X (XYZ,SUB) 
A1,A2 
Z,A . 
(16) 
(17) 
(18) 
L-A-S subroutines are "call-by-address". Thus, the 
address of the named array is passed to the subroutine 
and that array is subsequently operated on directly 
during the execution of the routine. 
Table 1 Summary of L-A-S Operators by Groups 
(GDI ) , 
(DSC), 
(NIK) , 
(RDI ) , 
(CTC), 
(RT1), 
( TVC ) 
(+) , 
(ATG) 
( EGC ) 
(GIN) 
(MEA) 
! (P* ) 
!(RKR) 
( SQR ) 
1(BOD) 
( DRE ) 
(GS) 
| (MTF) 
(RCS ) 
(R1K) 
INPUT / OUTPUT OPERATORS 
(DEM) , 
(DSM) , 
( OUT ) 
(RGE) 
(DIM) , 
(DVC ) , 
(PLL), 
(TXT), 
(DIS), 
(DZM) , 
(PLT) , 
(WDF) , 
DATA HANDLING OPERATORS 
(CTI ) 
( SHD) 
(CTR), 
(SHL), 
(EMD) 
( SHR ) 
( DPM) , ] 
(INP)J 
(RDF),j 
(WGE) I 
(MCP) A 
(SHU),J 
LINEAR ALGEBRA OPERATORS 
| 
(-) . 
(CHD) 
(EGV) 
( INV) 
(NRC) 
(ΡΜΛ) 
(RSP) 
( SVC ) 
(*) , 
(CHE), 
(EXP), 
(JFR), 
(NRR), 
(PMvl) , 
( S * ) , 
(SVD), 
(-1), 
(COS) 
(F*) 
( JFS) 
(NSP) 
(PNR) 
(SIN) 
(T) 
and 
(CUR), I 
(F/) J 
(LOG), I 
(P+) J 
(RKC),Î 
(SLE)J 
( TR ) 
CONTROL SYSTEM OPERATORS 
j 
(CLS) 
(DRL) 
(KFL) 
(NYQ) 
( RCT ) 
(RLC) 
(COT), 
(DRO), 
(LAP), 
(OBS), 
(RDS), 
(STR), 
(CRE) 
(EAT) 
(LYP) 
(OFP) 
(RDT) 
(TZS) 
(CRL).j 
(GBN),j 
(MIN) , 
, (PPL), 
, (RT1C), 1 
j 
i 
L-A-S PROGRAM CONTROL OPERATORS 
| 
1 (ELM) 
J(NOP) 
(STO) 
( IFJ ) 
(NTE) 
(TES) 
. (JMP), 
, (NTR), 
, (TRA), 
(LIS) 
(NTY) 
(TYP) 
, (NLI).I 
, (RET), 
J! 
EXAMPLE 
In this section, we present a detailed example of 
how the L-A-S language can be used to implement a 
discrete-time matrix Lyapunov equation algorithm. 
Here, we will illustate the form or structure of the 
L-A-S program. The text that is printed during an 
execution of an L-A-S program is dealt with in the 
next section. 
The fixed-point, A7, of a discrete-time Lyapunov 
equation satisfies 
X = ΑΤ'ΧΆ 
+ Q . 
(19) 
where X, and Q are positive semi-definite symmetric 
matrices. The matrix X can be calculated by the 

148 
S. P. Bingulac, P. J. West and W. R. Perkins 
recursive formula 
Xi+] 
= AT-X-A 
+ Q 
(20) 
provided that the iterates, X -}, converge to a limit, X . 
This occurs if and only if ^ ^ ( Λ ) < 1 . Further, we 
must define a tolerance for convergence of this 
algorithm. Call the tolerance variable EPS. For the 
initial guess, we take X 0 = A . 
The corresponding L-A-S program written entirely 
with single operator statements is : 
Di screte - time Lyapunov Equation 
Solver 
Single Operator Statement 
Version 
( I N P ) 
( DSC ) 
(MCP) 
(T) 
= 
A,Q 
= 
EPS 
= 
X 
= 
AT 
R : 
EM (ΜΕΑ,Τ) = EMS 
TT (MCP) 
= X 
EMS,EPS ( I F J ) 
= R , R , Q 
A,Q,X 
(OUT,E) = 
Now, assume that the discrete-time Lyapunov 
equation solver algorithm must be performed on 
several different matrices. Then it would be desirable 
to make the iterative portion of the computation into 
an L-A-S user-defined subroutine which could be 
called as often as needed. Such a routine might take 
the following form: 
Di scretc-i imc Lyapunov Equation 
Solver 
Subroutine Version 
A,Q,EPS (LYP,SUB) = X 
A (MCP) 
= X 
A (T) 
= AT 
Q : 
ΑΤ,Χ (*) 
= ATX 
ATX,A (*) 
= T 
T,Q (+) 
= TT 
TT,X (-) 
= EM 
EM (ΜΕΑ,Τ) = EMS 
TT (MCP) 
= X 
EMS,EPS (IFJ) 
= R,R,Q 
R : 
A,Q,X (OUT,E) = 
The mnemonics deserve some additional explanation. 
Table 2 contains a one-line description of all operators 
used in the program above. A complete guide to all 
existing operators may be found in [8] or more 
recently [9]. 
Table 2 Short Description of L-A-S Operators 
Used in the Lyapunov Algorithm 
Γ-f 
1* 
psc 
IFJ 
|INP 
MCP 
MEA 
OUT 
|T 
Matrix addition 
1 
Matrix subtraction 
I 
Matrix multiplication 
! 
Define SCalars (input from keyboard) 
1 
IF Jump (conditional jump) 
1 
Array IN Put from terminal keyboard 
1 
Matrix CoPy 
I 
Maximum Element in Absolute value 
1 
OUTput the results on the terminal screen 1 
Matrix Jransposition 
] 
An MOS \^ersion of this same algorithm would look 
like : 
Di screte -1ime Lyapunov Equation 
Solver 
Multiple Operator Statement 
Version 
( INP) 
( DSC ) 
A (MCP) 
A ( T ) 
= A,Q 
= EPS 
= X 
= AT 
Q : AT,X (*) ,A (*) ,Q (+) = TT 
TT,X (-) = EM 
Q : AT,X (*) ,A (*) ,Q (+) = TT 
TT,X (-) = EM 
EM (ΜΕΑ,Τ) = EMS 
TT (MCP) 
= X 
EMS,EPS (IFJ) 
= R,R,Q 
R : 
(RET) 
Then the MOS program written earlier w7ould be 
equivalent to: 
Di screte -1ime Lyapunov Equation 
Solver 
Multiple Operator Statement 
Version 
Calls L-A-S subroutine : LYP 
(INP) = A,Q 
(DSC) = EPS 
A,Q,EPS (LYP,SUB) = X 
A,Q,X (OUT.E) = 
L-A-S ECHO FEATURE 
The previous section has emphasized the structure 
and form of L-A-S programs. The problem of solving 
for the fixed-point of a discrete-time Lyapunov 
equation was formulated and reformulated 
using 
various features of the L-A-S language. In this section, 
we focus on the execution of L-A-S programs. 
Suppose we run the MOS version of the Lyapunov 
algorithm. For brevity, we consider a second order 
example with 
A 
0.5 
0.1 
-0.05 -0.3 
Q = 
1 0 
0 1 
Then, if EPS is chosen to be 0.01, we obtain the 
following run : 
Discrete-time Lyapunov Equation 
Solver 
Multiple Operator Statement 
Version 

Recent Advances in the L-A-S Software 
149 
< A > : 2,2 
< 0 > : 2,2 
* (INP)=A,Q 
Enter dimensions for 
Enter dimensions for 
Matrix < A > ; 
Enter E,R,C,D,M,I,Z,P,N or H for HELP : H 
E means Element, R means Row, C means Column, 
D means Diagonal, M means Matrix, I means Identity, 
Z means Zero, P means Pseudorandom matrix, 
and N means No matrix. 
Matrix < A > ; 
Enter E,R,C,D,M,I,Z,P,N or H for HELP : M 
A 
0.5 ,0.1 
-0.05,-0.3 
Matrix < Q > ; 
Enter E,R,C,D,M,1,Z,P,N or H for HELP : I 
* (DSC)=EPS 
EPS 
0.01 
* A(MCP)=X 
* A(T)=AT 
* Q:AT,X(*),A(*),Q(+)=TT 
* TT,X(-)=EM 
* EM(MEA,T)=EMS 
Maximum Element of EM = 1.2765e+00 
* TT(MCP)=X 
* EMS,EPS(IFJ)=R,R,0 
* Q:AT,X(*),A(*),Q(+)=TT 
* TT,X(-)=EM 
* EM(MEA,T)=EMS 
Maximum Element of EM 
* TT(MCP)=X 
* EMS,EPS(IFJ)=R,R,Q 
* Q:AT,X(*),A(*),Q(+)=TT 
* TT,X(-)=EM 
* EM(MEA,T)=EMS 
Maximum Element of EM 
1.5936e-01 
accomplished 
by 
issuing 
the 
NLI (No Listing) 
interpreter 
command (see Table 3). 
Then only 
comments, and the data of the OUT operator or 
statements with a "T" or "E" option get printed. 
Let us run the same L-A-S program with EPS = 
0.0001 while using; the NLI command. The result is : 
NLI 
= 
3.7564e-02 
Discrete-time Lyapunov Equation 
Solver 
Multiple Operator Statement 
Version 
Enter dimensions for < A > : 2,2 
Enter dimensions for < Q > : 2,2 
Matrix < A > ; 
Enter E,R,C,D,M,1,Z,P,N or H for HELP : M 
A 
0.5 ,0.1 
-0.05,-0.3 
Matrix < Q > ; 
Enter E,R,C,D,M,I,Z,P,N or H for HELP : I 
EPS 
0.0001 
Maximum Element of EM 
= 
1.2765e+00 
Maximum Element of EM 
= 
1.5936e-01 
Maximum Element of EM 
= 
3.7564e-02 
Maximum Element of EM 
= 
9.3249e-03 
Maximum Element of EM 
= 
2.2469e-03 
Maximum Element of EM 
= 
5.5131e-04 
Maximum Element of EM 
= 
1.3384e-04 
Maximum Element of EM 
= 
3.2699e-05 
A 
5.00000e-01 1.00000e-01 
-5.00000e-02 -3.00000e-01 
* TT(MCP)=X 
* EMS,EPS(IFJ)=R,R,Q 
* Q:AT,X(*),A(*),Q(+)=TT 
* TT,X(-)=EM 
* EM(MEA,T)=EMS 
Maximum Element of EM 
* TT(MCP)=X 
* EMS,EPS(IFJ)=R,R,Q 
* R:A,Q,X(OUT,E)= 
A 
5.00000e-01 1.00000e-01 
-5.0OOOOe-02 -3.00000e-01 
1.00000e+00 0.00000e+00 
0.00000e+00 
1.00000e+00 
1.32925e+00 7.17904e-02 
7.17241e-02 
1.10868e+00 
* END 
L-A-S STOP 
9.3249e-03 
the 
interactive 
nature 
of 
the 
L-A-S 
It prompts the user by displaying a "*" 
Notice 
interpreter 
After determining that an INP operator was issued, 
L-A-S asks the user for the dimensions of the matrices 
A and Q. Then the matrices are entered. Next, the 
value of EPS is specified. Since EPS is a scalar, its 
dimensions are known. Finally, L-A-S executes the 
Lyapunov 
algorithm, 
displaying 
each 
operator 
statement as it is performed. 
Often, it is desirable to suppress the printing of 
each line of L-A-S program execution. This may be 
1.0000()e+00 0.00000e+00 
0.000()0e+00 
1.00000e+00 
1.33221e+00 7.207O6e-02 
7.20706e-02 
1.10S79e+00 
* END 
L-A-S STOP 
The savings in terms of the number of lines printed is 
evident. Also, a more accurate estimate of the fixed-
point to this problem is obtained. 
Now, it is clear that before program execution 
proceeds automatically, only a few lines are typed to 
the L-A-S interpreter 
at the beginning of 
the 
Lyapunov algorithm. It is reasonable to assume that 
an L-A-S user may repeatedly study a single problem 
with one or more sets of data. On such an occasion, it 
would be useful to extract the input that the user 
enters and store it in a file for retrieval at a later time. 
This would spare the user from the tedious task of re-
entering 
several 
variables 
that 
never 
change 
throughout the study. This concept is captured and 
realized by the L-A-S "echo" feature. 
The "echo" file for the last run is : 
NLI 
2,2 
2,2 
M 
0.5 , 0.1 
-0.05,-0.3 

150 
S. P. Bingulac, P. J. West and W. R. Perkins 
1 
O.OOOl 
Once a user has an L-A-S program ready for execution, 
he/she may instruct the interpreter to take input from 
the "echo" file by simply typing the ECHO command 
(Table 3). Then, execution begins immediately. If an 
end-of-file is detected then this condition is indicated 
to the user and control is transferred back to the 
normal interactive mode. In fact, the previous two 
runs were made using the ECHO command, however 
this was not explicitly shown in the listings. 
Table 3 Short Description of L-A-S Interpreter 
Commands 
BEGIN 
CHANGE 
CONTINUE 
DUMP 
ECHO 
ELIMINATE 
ELMATRIX 
END 
HELP 
INCLUDE 
JUMP 
I 
LIST 
1 MEMORIZE 
1 
! NAMES 
! NLIST 
JNMEMOR1ZE 
| NTEST 
1NTRACE 
INTYPE 
IPRLISTING 
PROGRAM 
If 
IRPF 
1 STATUS 
ill 
ITCHANGE 
TEST 
I TRACE 
(TYPE 
VERSION 
» WPF 
Begin a new L-A-S work session by 1 
clearing internal storage 
1 
Change an L-A-S program statement il 
Continue the current L-A-S program 1 
Dump all matrices to the user 
1 
Invoke the L-A-S echo feature 
1 
Eliminate one or more L-A-S 
1 
program statements 
1 
Eliminate some matrices from 
1 
internal storage 
tj 
End this session with L-A-S 
1 
Make an on-line help inquiry 
|[ 
Include an L-A-S program statement 1 
Jump to a particular L-A-S program 
statement 
| 
List the execution of an L-A-S 
| 
program 
1 
Memorize subsequent program 
I 
statements entered 
Name all matrices defined thusfar 
1 
Turn off LIST mode 
| 
Turn off MEMORIZE mode 
j 
Turn off TEST mode 
j 
Turn off TRACE mode 
j 
Turn off TYPE mode 
II 
Print the current L-A-S program to 
results file 
Display some lines of the current 
L-A-S program 
| 
Read an L-A-S Program File 
j 
Status information about the current 1 
work session 
Total (global) CHANGE command 
Enter L-A-S se If-test mode. 
(For porting L-A-S) 
| 
Enter L-A-S program debug mode 
j 
Enter output typing mode 
I 
Inquire about the current version of 
L-A-S being used 
Write an L-A-S Program File 
CONCLUSION 
We have described the highlights of the L-A-S 
programming language. The fundamental concept of 
an L-A-S operator is introduced. 
The utility of 
operators as algorithm building blocks is established. 
The syntax of single and multiple L-A-S operator 
statements 
are 
discussed. 
L-A-S 
user-defined 
subroutines are mentioned. An entire section of this 
paper has been dedicated to a detailed example of 
L-A-S language use. 
This serves to unify 
the 
concepts of previous sections and simultaneously 
motivate the new L-A-S "echo" feature. 
Finally, 
several references [1,2,6-9] have been included should 
the reader desire additional information about L-A-S. 
REFERENCES 
[1] 
S. P. Bingulac and M. A. Farias, "L-A-S (Li near Algebra and 
System) Language and Its Use in Control Education and 
Research," Computing, Springer-Verlag, vol. 23, 1979, pp. 1-
23. 
[2] 
S. P. Bingulac and N. Gluhajic, "Computer Aided Design of 
Control 
Systems on Mini Computers using the 
L-A-S 
Language," Proc. of 1982 IFAC Symposium on Computer 
Aided 
Design 
of 
Multivariable 
Technological 
Systems, 
Purdue University, Indiana, September 15-17, 1982. 
[3] 
A. A ho and J. Ullman, The Theorx of Parsing, 
Translation 
and Compiling. Prentice-Hall. Englewood Cliffs, \ :J„ 1972. 
[4] 
J. Backus. "The syntax and semantics of the Proposed 
International Algebraic Language of Zurich ACM-GAMM 
Conference," Information 
Processing. UNESCO, Paris, 1960. 
pp. 125-132. 
[5] 
1. 
W. 
Pratt, 
Programming 
Languages: 
Design 
and 
Implementation, 
Prentice-Hall, Englewood Cliffs, N.J., 1975. 
[6] 
S. P. Bingulac, "Recent Modifications in the L-A-S (Linear 
Algebra and Systems) Language and Its Use in CAD of 
Control Systems," Proc. of 1983 Allerton Conference on 
Communication, 
Control, 
and 
Computing, 
Monticello, 
Illinois, October 1983, pp. 393-402. 
[7] 
S. P. Bingulac and P. J. West, "Computer-Aided Design of 
Control Systems : An Example of Working Software," Proc. 
of 1983 Allerton Conference on Communication, Control, 
and Computing, Monticello, Illinois, October 1983, pp.423-
424. 
M 
S. P. Bingulac, J. H. Chow, S. H. Javid and H. R. Dowse, 
"User's Manual for Linear Algebra and Systems (L-A-S) 
Language," 
Report 
No. 83-EUE-205, (Internal 
Report), 
Electric Utility Systems Engineering Department, General 
Electric, Scheneciady. New York. 12345, November 1983. 
[9] 
P. J. West, S. P. Bingulac, and W. R. Perkins, " L-A-S : A 
Computer-Aided 
Control 
System 
Design 
Language," 
Advances 
in 
Computer-Aided 
Control 
Systems 
Engineering, 
North-Holland, New York, 1985. 
Acknowledgement 
- This work was supported in part by the 
Joint Services Electronics Program under Contract N00014-84-C-
0149, and in part by the University of Belgrade, Department of 
Organizational Sciences. 
BEGIN 
CHANGE 
CONTINUE 
DUMP 
ECHO 
ELIMINATE 
ELMATRIX 
END 
HELP 
INCLUDE 
JUMP 
LIST 
Begin a new L-A-S work session by 
clearing internal storage 
Change an L-A-S program statement 
Continue the current L-A-S program 
Dump all matrices to the user 
Invoke the L-A-S echo feature 
Eliminate one or more L-A-S 
program statements 
Eliminate some matrices from 
internal storage 
End this session with L-A-S 
Make an on-line help inquiry 
Include an L-A-S program statement 
Jump to a particular L-A-S program 
statement 
List the execution of an L-A-S 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
OUTLINE OF A NEW APPROACH TO 
COMPUTER AIDED DESIGN OF CONTROL 
SYSTEMS 
H. K. Eldeib 
Department of Electrical and Computer Engineering, George Mason University, 
4400 University Drive, Fairfax, VA 22030, USA 
Abstract. This paper presents an outline of an ongoing effort to develop a new 
approach to computer aided design of control systems. The new approach integrates 
three computer aided techniques for problem solving: artificial intelligence (expert 
systems), decision analysis, and standard routines for control systems analysis and 
design. The new approach will offer guidance to inexperienced users on how to approach 
a design problem. A special subproblem; the design of a position control system for for 
a printwheel mechanism is used as an initial design problem that the prototype expert 
decision aid should solve. 
Keywords. Artificial Intelligence; computer aided design; control system analysis; 
decision analysis. 
INTRODUCTION 
Computer aided analysis and design is becoming an 
essential part of control systems engineering. 
Both universities and research institutes (Astrom, 
1983; Edmunds, Jeans, and Maciejowski, 1983; 
Haerget and Weiss, 1980; Maddux, 1982; Weiss, 1980) 
as well as industries (Boeing Computer Services; 
Integrated Systems Inc.; Systems and Control Inc.; 
and others) have developed computer programs to 
aid control engineers in analysis and design. 
Some of these programs are designed for interactive 
use and are typically menu driven, while others are 
designed to use a list of commands instructing the 
program to perform a sequence of tasks. The first 
approach is sometimes frustrating since the 
computer controls the questionning of the user, 
while the second approach is not very user friendly. 
Most of these programs consist of a set of tools 
for analysis and design such as frequency response 
computations routines, graphics routines, state-
feedback design routines, etc. These tools offer 
excellent help to experienced designers who can 
choose an approach to design, i.e. who can choose 
the appropriate set of tools and the sequence in 
which to use them. 
Less experienced designers, however, may find the 
choice of a design approach quite challenging. 
Students of control systems represent a large 
group of inexperienced designers that may need 
more help from the computer than the set of tools. 
There, is a need for computer programs that can 
offer guidance to designers, if needed, on the 
appropriate approach to solve a given design 
problem. 
Artificial intelligence has been used successfully 
to develop expert systems that offer needed 
guidance to physicians in medical diagnosis, to 
computer engineers in system configuration, as 
well as to industrial and military planners and 
decision makers (Buchanan and Shortliffe, 1984; 
Winston and Prendergast, 1984; and their 
references). It is our contention that expert 
systems can offer the needed guidance to control 
engineers in analysis and design of systems to 
meet desired specification. 
REVIEW OF EXPERT SYSTEMS 
Artificial intelligence is the science of 
developing machines capable of performing tasks 
that are usually achieved by intelligent humans. 
Considerable success has been achieved in the 
last decade in the area of artificial intelligence 
known as "expert systems". This area is concerned 
with methods and techniques for constructing man-
machine systems with specialized problem solving 
expertise (Hayes-Roth, Waterman, and Lenat, 1983). 
Several applications of expert systems are 
reviewed in (Buchanan and Shortliffe, 1984; 
Winston and Prendergast; and their references). 
The application areas are classified into: 
diagnosis, design, planning, interpretation, 
prediction, monitoring, debugging, repair, and 
control. 
An ideal expert system consists of a knowledge 
base containing a set of facts and rules, an 
inference engine, and a user interface. In a 
typical application, the user provides a descrip-
tion of a problem to the system and receives 
advice and explanation (Buchanan and Shortliffe, 
1984). The evolution of an expert system is a 
gradual process consisting of five stages: 
Identification, Conceptualization, Formalization, 
Implementation, and Testing (Hayes-Roth, Waterman, 
and Lenat, 1983). 
EXPERT SYSTEMS IN CONTROL SYSTEMS DESIGN 
There is a great potential for use of expert 
systems in control systems engineering. Possible 
applications include aiding the control engineer 
in problem formulation, in modeling of systems, 
in design of feedback control and/or compensation 
151 
CADCES-F 

152 
H. K. Eldeib 
to meet specified requirements, as well as in 
implementation of "expert controllers". There is a 
growing number of reports on new research projects 
aimed at realizing the existing potential. For 
example, the use of MACSYMA, an expert system for 
mathematical manipulations, in the manipulation of 
Kaiman filter matrix equations has been discussed 
in (AGORA Systems, 1984), and the use of expert 
controllers in reconfigurable control systems has 
been oulined in (Stengel, 1984). 
In this section we outline a new approach for 
developing an expert system for analysis and design 
of control systems. The outline will follow the 
evolution stages suggested in (Hayes-Roth, 
Waterman, and Lenat, 1983). Only the first three 
stages of development will be discussed in this 
paper, i.e. identification, conceptualization, and 
formulation. 
The Identification Stage: 
During this stage the problem area is identified, 
and the scope of the problem is defined. A small 
but interesting subproblem may be identified and 
used to focus the knowledge acquisition process. 
In our case, the problem at hand is to develop an 
expert system for aiding in the design of a control 
system to meet certain requirements. This problem 
is very broad, and can be considered a long-term 
objective. To start our project the following 
simple but representative subproblem has been 
chosen: 
" It is desired to design a position control system 
for a printwheel mechanism (Kuo, 1982) to satisfy 
specific performance criteria. The input to the 
system is a desirable angular position and the 
output is the actual angular position of the print-
wheel . 
The system consists of a difference amplifier, a 
power amplifier, an armature controlled dc motor, 
and a printwheel as a load to the motor. The system 
is described by a mathematical model whose 
para-
meters are to be provided by the user. Acceptable 
types of mathematical models are rational transfer 
functions and state variable models. 
Performance specifications are given in terms of 
steady state error and transient response to a 
step input. Transient response specifications may 
include percentage overshoot, rise time, and 
settling time. Acceptable design procedures include 
choice of the power amplifier gain K, design of 
cascade compensators such as phase lead, phase lag, 
or PID, and state feedback compensation. 
The system should offer guidance to the user if 
needed, and should contain all the analysis and 
design routines needed to implement the chosen 
design procedures." 
The Conceptualization Stage: 
During this stage, key concepts, relations, and 
information flow characteristics needed to describe 
the problem solving process are explicated, and 
subtasks, strategies, and constraints are specified. 
In this paper we will give only a brief discussion 
of some of the key concepts in the development of 
our expert system. 
The proposed expert system will contain the 
following components: 
1) User Interface: This part of the program will 
be responsible for conducting an English-like 
dialog with users. The basic tasks of the user 
interface are: 
- To ask the user for a description of the system 
and record that description with appropriate 
labels, e.g. type of model, order of model, etc. 
- To ask the user for desired performance speci-
fications, record them with appropriate labels, 
and pass them to the decision unit (inference 
engine). 
- To inform the user of suggested actions for 
analysis and design, and ask for his/her 
approval. If approval is granted, appropriate 
information should be sent to both user and 
decision unit. 
2) Decision Unit (Inference Engine): This part 
of the program will be for analyzing of informa-
tion contained in English-like lists, and suggest-
ing an action involving use of some of the 
analysis and design procedures available in the 
knowledge base. An example of an inference engine 
under development for computer aided design of 
microprocessor controllers at the Naval Post-
graduate school is given in (Carson, 1984). In 
that system, the desired requirements were 
supplied using a special computer language, and a 
translator from this language to lists that are 
compatible with the knowledge base was developed. 
Our objective is to avoid the need for translation 
by a good choice of an expert system building 
tool. 
3) Knowledge Base: This part of the expert system 
contains a set of procedures and rules that 
combine standard routines for analysis (Frequency 
response computations, steady state error calc-
ulations, zero and pole finding, etc.) and a set 
of instructions for design based on experience 
and rules of thumb. Most introductory textbooks 
on control systems analysis and design contain 
some rules of thumbs and heuristics for the 
design of compensators (Dorf, 1983; Kuo, 1982). 
The knowledge base will also contain descriptions 
of procedures that will enable the decision unit 
to decide whether a procedure can be used to solve 
a particular analysis or design problem or not. 
These descriptions will be based on textbook 
information and on experience of designers who 
used these procedures. For example, the following 
description of a phase-lead compensation network 
(Dorf, 1983) can be used as a basis for a similar 
description in the knowledge base: 
Name: 
Phase Lead Compensation. 
Function: Adds phase angle near crossover 
frequency or to yield desired dominant 
roots in the s-plane. 
Results: 
Increases system bandwidth, and 
Increases gain at high frequencies. 
Advantages: Yields desired transient response,and 
Can achieve fast transient response. 
Useful: 
When fast rise time is desired. 
Not Useful: When phase decreases rapidly near the 
crossover frequency. 
Descriptions of the procedures will be used by the 
decision unit to choose among procedures, and 
hence the descriptions and the decision making 
rules will be designed such that they "talk the 
same language". 
Formalization Stage: 
This stage involves mapping the key concepts and 
relations into a formal representation suggested 
by some expert system building tool or language. 
We are currently studying the feasibility of 
formalization of the proposed expert system 

Outline of a New Approach 
153 
using an expert system development language called 
ROSIE that was developed at the RAND Corporation 
(Fain and others, 1982). ROSIE operates in an 
INTERLISP environment on a VAX 11/780. Although 
it seems that ROSIE is a good choice for building 
the proposed expert system, the final decision on 
the language of implementation has not been made 
yet. A good choice of a language can save a lot 
of effort and improve the performance of the new 
system. 
ROSIE has been described as an excellent general 
purpose tool for building prototype expert systems. 
Its main strength is its English-like syntax, and 
its powerful pattern matching capability which 
enables it to access local operating systems and 
thus other languages (Hayes-Roth, Waterman, and 
Lenat, 1983). This capability can be utilized to 
access FORTRAN programs, for example, but this 
is currently possible only within a UNIX operating 
system. This capability makes ROSIE particularly 
attractive since a lot of control systems routines 
are available in FORTRAN code. 
DECESION ANALYSIS IN 
CONTROL SYSTEMS DESIGN 
The process of control systems design can be 
viewed as a sequential decision making process. 
The design process involves a number of stages and 
the designer has to choose some action concerning 
the design procedure at each stage. There is a 
cost or reward incurred at each stage that is a 
function of the decision chosen, the outcome, and 
the objectives of the designer. The designer's 
objective is to satisfy several, sometimes 
conflicting performance and design criteria. This 
suggests that the design problem can be modeled as 
a problem in multiple criteria decision making 
(Starr and Zeleny, 1977). 
In an optimal design process, the designer chooses 
a sequence of design procedures to achieve the 
design objectives to the best possible extent, 
as well as to optimize some performance measures 
for the design process. For example, computer time 
is costly, and hence one of the design criteria 
may be minimizing the computer time utilized. 
Another criterion may be minimizing the cost of 
realizing and implementing the controller designed. 
The integration of decision analysis in control 
system design requires two prerequisites: 
the design process should be formulated in a 
highly structured manner as a decision problem, 
and some information concerning the costs 
associated with different actions should be known. 
This will require a thorough analysis of the 
design space, the action space, as well as the 
value system of the designer. There is a great 
deal of research reported in the literature and 
in textbooks on decision making procedures, (for 
example: Bertsekas, 1976; Keeney and Raiffa, 1976; 
Sage, 1977; and their references). We are not 
aware, however, of any application of decision 
aiding to control systems design. The reason seems 
to be that current approaches to design of control 
systems may not possess the structure needed for 
decision analysis. 
AN EXPERT DECISION AID 
FOR CONTROL SYSTEMS DESIGN 
Integration of the three problem solving approaches 
discussed above, i.e. control systems program 
packages, expert systems, and decision analysis, 
requires a great deal of basic research in the 
following issues: 
- Formulation of the control systems design 
problem as a decision making problem. 
- Incorporating information about the costs and 
rewards associated with different actions into 
the knowledge base. 
- Incorporating some decision making mechanism in 
the decision unit of the expert system in order 
to optimize the design process. 
These topics will be the target of our future 
research efforts. 
CONCLUSION 
We have presented an outline of an ongoing 
research project aimed at developing an expert 
decision aid for the analysis and design of 
control systems. The project is still in its early 
stages, and hence a lot of future research is 
needed. In this paper we described an approach to 
developing the expert system by discussing three 
stages of the evolution stages of the system: 
identification, conceptualization, and formal-
ization. We suggested some of the topics that 
should be investigated in order to complete the 
development of the system. 
REFERENCES 
AGORA Systems, Inc., "Artificial Intelligence/ 
Expert Systems for Inertial Navigation Guidance 
and Control", Technical Report, AGORA Systems,Inc. 
Gaithersburg, MD, 1984. 
Astrom, K. J., "Computer Aided Modeling, Analysis, 
and Design of Control Systems- A Perspective", 
IEEE Control Systems Magazine, May 1983, 4-16. 
Bertsekas, D. P., Dynamic Programming and Stochas-
tic Control, Academic Press, New York, 1976. 
Buchanan, B. G., and E. H. Shortliffe, ed., Rule 
Based Expert Systems, Addison Wesley, Reading, MA, 
1984. 
Carson, T. H., "An Input Translator for a Computer 
Aided Design System", M.Sc. Thesis, Naval Post-
graduate School, Monterey, CA, 1984. 
Dorf, R. C , Modern Control Systems, Addison 
Wesley, Reading, MA, 1983. 
Edmunds, J. M., S. E. Jeanes, and J.M. Maciejowski 
"CLADP (Cambridge Linear Analysis and Design 
Program) User Reference Manual", Technical Report, 
Cambridge University, England, 1983. 
Fain, J., and others, "The ROSIE Language Refer-
ence Manual", Technical Rept. N-1647-ARPA, Rand 
Corp., Santa Monica, CA, 1981. 
Fain, J. , and others, "Programming in ROSIE: An 
Introduction by Means of Examples", Technical 
Rept. N-1646-ARPA, Rand Corp., Santa Monica, 
CA, 1982. 
Hayes-Roth, F., D. A. Waterman, and D. B. Lenat, 
Building Expert Systems, Addison Wesley, Reading, 
MA, 1983. 
Herget, C. J., and T. P. Weis, "Linear Systems 
Analysis Program User's Manual", Technical Rept. 
UCID-30184, Lawrence Livermore Lab., Livermore, 
CA, 1980. 

154 
H. K. Eldeib 
Keeney, R. L., and H. Raiffa, Decisions With 
Multiple Objectives: Preferences and Value Trade-
offs, John Wiley, New York, 1976. 
Kuo, B. C , Automatic Control Systems, Prentice-
Hall, Englewood Cliffs, NJ, 1982. 
Maddux Jr., A. S., "Powerful Tool for Design and 
Analysis of Control Systems", Technical Report 
UCID-19373, Lawrence Livermore Lab., Livermore, 
CA, 1982. 
Nillson, N. J., Problem Solving Methods in 
Artificial Intelligence, McGraw-Hill, New York, 
1971. 
Sage, A. P., Methodology for Large Scale Systems, 
McGraw-Hill, New York, 1977. 
Starr, M. K., and Zeleny, M., Multiple Criteria 
Decision Making, North-Holland, Amsterdam, 1977. 
Stengel, R. F., Artificial Intelligence Theory 
and Reconfigurable Control Systems", Technical 
Report 1664-MAE, Dept. of Mechanical Engineering, 
Princeton University, Princeton, N.J., 1984. 
Weis, T. P., "Linear Systems Analysis Program, 
Programmer's Manual", Technical Report UCID-30183, 
Lawrence Livermore Laboratory, Livermore, CA, 
1981. 
Winston, P. H., and K. A. Prendergast, ed., The 
AI Business, MIT Press, Cambridge, Mass., 1984. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
CADOCS — COMPUTER AIDED DESIGN ON 
MULTIVARIABLE CONTROL SYSTEMS — 
METHODS AND THE SOFTWARE PACKAGE 
H. Hensel 
Institute für Regelungstechnik, 
Technische Hochschule Darmstadt, Schlossgraben 1, 
D-6100 Darmstadt, FRG 
Abstract. A CAD-package serving for the design of discrete-time multivariable control systems is 
presented. Various design methods for different feedback controller types (DB, PID, SC) are des-
cribed based on discrete-time parametric process models which are obtained by On-line identifi-
cation methods. The concept of the software package contains an interpreter and a database 
offering high flexibility in the design and coordinating the design modules. A design example 
starting with the identification and ending with a DDC-implementation will be shown. 
Keywords. Multivariable discrete-time control systems; computer aided system design; direct 
digital control; interpreter based software system; parameter estimation, PID control; state 
space methods. 
INTRODUCTION 
Modern mathematical design methods for multivariable 
control systems numerously proposed in the literature 
often require the application of a computer which 
may as well be used for the management of the whole 
design procedure thus considerably reducing the 
amount of necessary design time. Almost all mathe-
matical design methods require the a priori know-
ledge of parametric or nonparametric process-models. 
This modeling is just as difficult and time consuming 
as the controller design and may as well be supported 
by computer methods. Especially in the case of para-
metric modeling efficient parameter estimation pro-
cedures have been developed for On-line identifica-
tion on a process-computer (Isermann, 1981). More-
over using this type of computer permits the imple-
mentation of direct digital control. 
with the diagonal polynomial matrix A(z ) and the 
general polynomial matrix B_(z~M which contains 
the deadtimes additionally. 
Forming a state model from Eq.(1) often leads to a 
nonminimal representation because of possible mul-
tiple considerations of eigenvalues or common dead-
times. Therefore a modified algorithm for obtaining 
a minimal realization given in Nour Eldin (1977) is 
applied resulting in a state model of minimal order 
which contains the deadtimes d.. 
ID 
x(k+l) = A x(k) + B u(k) 
y_(k) 
= C x(k) 
ON-LINE IDENTIFICATION 
(3) 
(4) 
A software package serving for the topics mentioned 
above should be very flexible on one side but handy 
on the other and should support the user on a very 
high level. The design facilities should be modula-
rized and concatenated by a superior centralized 
management system. In order to consider varying 
design requirements the package must be easy modi-
fiable without changing the central management pack-
age. 
This paper will first describe some algorithms for 
the On-line identification and the controller design 
and then continue with the description of a central 
interpreter based CAD-management package and a mana-
gement package for DDC-purposes. 
The identification and controller design methods 
described in this paper are based on the discrete-
time multivariable process model 
In order to obtain parametric models of the pro-
cess two identification methods (least squares (LS) 
and correlation analysis and least squares (COR-LS) 
are used in the package. Both methods are (finally) 
based on driving the square of the equation error 
e^2(k) to a minimum. For this purpose a more suit-
able description of the model (Eq.(1)) is given by 
y. (k) = ψ. (k)6. + e. (k), i = 1, . . . ,q 
1 
—"1 
— 1 
1 
and the equation error 
e.(k) = y. (k)-y. (k)= y. (kj-ψ. (k)6 
1 
1
1 
1 
— 1 
(5) 
(6) 
with y, and θ_. denoting the predicted i-th output 
and the estimated parameters respectively and 
y (k) = I [-a 
y.(k-l)+;> b 
u(k-d -1)], (1) 
1=1 
j=l 
J 
J 
i = l,...,q 
^(k) = [-y.^k-1 ),...,-yMk-mJ, u^k-d^l),... 
ul ^ i i - V ' U2 (k"di2-1 ) 
U2 (k-d
i2"mi) , 
...,u (k-d. -m.) 
r 
îr l 
(7) 
a simplified p-canonical model with r inputs and q 
outputs, the order m. at the i-th output and the 
discrete deadtime d^j from the j-th input to the 
i-th output. The model can as well be described in 
the z-domain by 
M z " 1 ) y_(z) = BJz^1) u(z) 
(2) 
i2m. r.-.,b. 
J 
irm. 
ill' 
T 
..,b.. 
,b..., 
llm. i21 
Minimizing the loss function 
m+d+N 
V = 
I e^(k) 
1 
k=m+d 
m m 
(8) 
(9) 
155 

156 
H. Hensel 
yields the LS-equations 
θ__ = [ψ7^]"1 ^Ty 
i = l,...,q 
(10) 
C(z ) can be calculated by 
-1 
- δ 
-1 Ί 
C(z ) = Κ «adjLz B(z ) ] 
(17) 
In the presence of arbitrary stochastic disturbances 
with zero mean biased parameters can be avoided by 
using the two stage method COR-LS. This method first 
computes the autocorrelation function 
crosscorrelation function φ (τ). 
system theory the input signal u(k) can be substi-
tuted by 4>UU(O and the output signal y(k) by 
Φ α ν(τ). In the multivariable case the sum 
(τ) and the 
uu, . 
Due to linear 
with 
6 = l+min(d.., l^UJ^r) generating the 
lowest possible order of the adjoint matrix and 
therefore of P_(z-1)· The gain factor K is intro-
duced to satisfy the constraint P_(l) = I_ 
1 
c 
detLB(l). 
(18) 
u (k) 
I u (k) 
is used in order to build the functions 
(11) 
( τ) and 
UgUj 
φ„ „ (τ) corresponding to Eq.(1). In the second 
usyi 
step, Eq. (5-10) with the substituted signals 
φ,. „ (τ) and φ 
(τ) are used to estimate the para-
ugUj 
usyi 
meters θ^. 
Some improvements are: An additional parameter C^ 
appended to the parameter vector £j_ allows to con-
sider steady state disturbances. Restricting the 
range of possible model orders and deadtimes and 
storing the data (in a compressed form) for the 
model of highest possible order and deadtimes allows 
to apply an order- and deadtime-search method before 
estimating the parameters (Maencher and Hensel·, 
1985). The identification of the whole multivariable 
process can be carried out simultaneously if special 
multistage pseudo random binary signals (MPRBS) 
which are orthogonal are applied to the process in-
puts (Blessing, 1979). 
FEEDBACK CONTROLLERS 
Three different types of multivariable controllers 
can be designed by the package 
- generalized deadbeat controllers 
- parameter optimized controllers 
- state controllers including integral action 
and observers 
Deadbeat Controllers 
Consider a square multivariable process (r=q). The 
desired deadbeat-behaviour of all inputs and all 
outputs can be achieved by 
y(z) = £(z ) w(z) 
, p(l) = I 
u_(z) = Q(z ) w(z) 
(12) 
(13) 
-1 
with the reference signals w_(z) , if P_(z ) and 
Q(z ) are rational polynomial matrices of finite 
order. Decomposing 
Q(z_1) = C(z_1) A(z_1) 
(14) 
and inserting Eq.(13) into Eq.(2) results in 
P(z_1) = A " 1 ^ - 1 ) B ( Z _ 1) C ( Z _ 1) A ( Z _ 1) 
(15) 
The assumption of the finite order of P(z ) can be 
meet by choosing C_(z ) such that the matrix product 
B_(z-1) C_(z~ ) becomes diagonal. Hence Eq. (15) becomes 
P_(z ) = B_(z ) C(z ) = diag [p. . (z 
1)\ 
(16) 
If det(B_(l)) = 0 no deadbeat controller exists. 
The resulting control law turns out to 
6 
U_(Z) = -T 
7 
J7 
z det[B(l) ]-det[z B(z ) ] 
adj[z6B_(z 
1)} A(z 
1)e_{z) 
(19) 
Extension of Eq.(17) by a diagonal matrix 
C(z_1) = K -adjLz6 B(z_1)]-diag[f..(z"1)] 
(20) 
offers additional degrees of freedom, which may be 
used to minimize an energy cost functional or a 
control performance index like 
k=0 i=l 
(6e2(k) + V [nu2. (k)+aAu2. (k+1) ] ) 
i 
^ 
ID 
ID 
(21) 
with the controller order n, 
ting variables u^·(k) from 
the partial manipula-
r 
i. (k) = 
)' u,, (k) , the 
I u..(k) 
D=l i : 
partial manipulating variable deviations 
Au. . (k+1) = u . (k+l)-u. . (k), the control errors 
ID 
ij 
iD 
e^ (k) and the weighting factors ό,η and σ. Hensel 
(1981) and Bayer (1982) have pointed out that the 
minimization of Eq.(21) with respect to the free 
parameters contained in diag [f.· (z~M] leads to a 
direct analytical solution for the free parameters. 
Parameter-Optimized Controllers 
The straightforward numerical optimization of the 
complete multivariable controller is due to the 
large number of parameters often very time con-
suming or perhaps may result in unstable control 
loops. Therefore three different approaches for the 
design of discrete-time multivariable parameter-
optimized PID controllers will be presented. The 
first approach follows a proposal by Föllinger 
(1972) reducing the optimization problem to the 
SISO-case. The second and third approach compute 
the PID-controller from the design of multivariable 
optimal state feedback controllers. 
Approach 1. Consider the multivariable process 
given by Eq.(2). A controller structure with the 
coupling controllers behind of the main controllers 
is selected (cf.Fig.1). In the first step the cou-
pling controllers are designed as feedforward con-
trollers producing complete decoupling of the proc-
ess, e.g. with r = q = 3 and P_(z_1) and C_(z-1) de-
noting the elementary transfer functions of the 
process and the controller respectively (the argu-
ment z~l is omitted for simplification). 
(22) 
P 
P P 
11 12 13 
P 
P P 
21 F22 23 
P 
P P 
31 32 33 
r 
η 
1 
C12 C13 
C21 ' 
C23 
C31 C32 1 
= 
Γ 
Pn ° ° 
o 
P*22O 
O
O
P
* 33 

CADOCS 
157 
Depending on the resulting structure and the para-
meters of the controllers obtained from Eq.(22) low 
order coupling controllers of P, PD or PDT -struc-
ture are selected. The parameters of the latter 
controllers are tuned by LS-approximation of the 
dynamic behaviour of the exact decoupling control-
lers. 
Neglecting the remaining couplings the main control-
lers of P-, PI- or PID-structure are designed in 
the second s£eD as SISO-controllers for the modified 
main paths P ^ i z - 1 ) , Eq.(22) taking the low order 
decoupling controllers into account. The parameters 
are optimized by means of a modified Hooke Jeeves 
pattern search together with an analytical calcu-
lation of the control performance index by means of 
Parseval's theorem (Aström, 1970) 
=1 [e2(k) + rKpAu2(k)] 
κ=ο 
x 
L 
2iTi J[e. (z)e. (z 
) + rK?Au. (z)Au. (z *) jidz (23) 
with the control error e^(k), the manipulating 
variable deviations Au. (k) = u. (k)-u^ (°°) , the 
1 
1 
-L 
process gain K and a weighting factor r. The re-
sulting control performance of the multivariable 
control loop mainly depends on the degree of de-
coupling achieved in step 1. Even instability may 
occur, if the partial decoupled transfer function 
matrix is not diagonal dominant (Rosenbrock, 1974). 
To improve the control performance a third step in-
troducing an iterative scheme known as successive 
design (Isermann and Hensel·, 1985) is applied. Ex-
perimental examinations have pointed out that this 
method converges rapidly in a few successive cycles. 
Approach 2. The state model of a square multivari-
able process (Eq.(3,4) with r=q) is extended by 
"integral states" which are appended to the outputs 
y_ of the process, cf. state controller structure 2. 
For this augmented system an optimal state control-
ler is designed by solving the discrete matrix 
Riccati equation. The closed state control loop is 
further augmented by an arbitrary tuned reference 
signal filter (Fig.2) and stimulated at the refer-
ence inputs by a MPRBS proposed above. The para-
meters of the related PID-controllers with the main 
controllers parallel to the coupling controllers 
are tuned by approximating the control error signals 
e_(k) = w(k)-y_(k) and the manipulating variables 
u_(k) of the state control loop by means of mini-
mizing the cost functional 
k+N-1 
1 = 1 
ε 
l=k 
(1)ε(1), 
with 
ε(1) = [ε1 (1),ε2(1),..., 
ε. (1)= u. (1) - û. (1) 
ε (1) . 
r 
2 
Û. (i)= u. (1-1) + l 
l q. .e. (1-s). 
1 
1 
j=l s=0 
==n ^ 3 
(24) 
(25) 
(26) 
(27) 
The minimization due to the PID-controller para-
meters is realized by using a modified LS-approach 
(cf.Fig.2). A detailed description is given in 
Hensel and Peter (1984). 
Approach 3. The fixed controller structure of the 
PID-type with 
u(k) = uJk-n+Ç^eikJ+Q^eik-n+Q^k^) 
(28) 
is transformed to the state description 
with e_(k) = w(k) - y_(k) 
r(k+l) = A r(k) + B (w(k)-y(k)) 
— 
—c— 
—c 
u(k) 
= C r_(k) + D (w(k)-y(k)) 
(29) 
(30) 
Using the observer canonical form the system matrix 
A is fixed 
*1 
l,...,r(31) 
and the tunable parameters q. .-, are contained in 
the matrices B^ and Ώ^. Because of the fixed 
matrices A^ and C^ the state model of the process 
can be augmented by the state model of the control-
ler defining the system inputs [u_T (k) ,η^ (k) ] T in 
order to group all tunable parameters in the feed-
back. This yields 
x(k+l) 
r_(k+l) 
y(k) 
"u(k) " 
u (k) 
A B C 
— 
c 
0 
A 
— 
—c 
[c o] 
x(k) 
£(k) 
+ 
B 0 
0 I_ 
u(k) "j 
uc(k) 
x(k) 
r(k) 
y(k) + 
w(k) 
(32) 
(33) 
(34) 
This is now a standard static output-feedback 
problem which can be solved by methods with good 
convergence properties recently given in Wenk and 
Knapp (1980) and Mäkilä (1984). 
STATE CONTROLLERS 
All described state controller structures with 
observers introduce integral action into the state 
control loop in order to track non zero set points 
or to eliminate steady state disturbances. The 
extended controllers and observers are designed by 
solving the matrix Riccati equation. Therefore the 
control-loop-structures are described only. 
Structure 1. Following a proposol in Isermann (1981) 
the integral paths are added to the observer, cf. 
Fig.3a. A reference variable model is introduced 
describing the reference signals w(k). 
v_(k+l) = A v(k) + B_ x(k) 
X(k+1) = Y(k) 
w(k) 
= C v(k) 
(35) 
(36) 
(37) 
With the control error e_(k) = w(k)-y_(k) an augmen-
ted description is obtained which the observer is 
designed on. 
£(k+l) 
X(k+1) 
e(k) 
A B_ 
0 I 
= [c o] 
£(k) 
X(k) 
■: 
z. 
£(k) 
X(k) , 
u(k) 
(38) 
(39) 
The state, controller is designed for the not 
augmented system yielding the feedback matrix Kj 
and is extended to 
K. - - <*! I> 
(40) 

158 
H. Hensel 
Structure 2. The integral paths are appended to the 
outputs y_ of the process, cf. Fig.3b. 
q(k+l) = gjk) - £ x_(k) + w(k) . 
(41) 
Hence the augmented system description is 
x ( k + l ) 
q ( k + l ) 
= 
A 
-c_ 
y ( k ) 
- l£ 
0 
I 
oJ 
x ( k ) 
q ( k ) 
f*x(k) 
q ( k ) 
+ 
B_ 
0 
u ( k ) 
+ 
0 
I_ 
w ( k ) 
(42) 
(43) 
The reference signals w(k) in Eq.(42) act as dis-
turbances and are therefore not considered in the 
design. The controller is designed for the augmented 
system whereas the observer is not extended and 
therefore designed for the original system, Eq.(3,4). 
Structure 3. The integral paths precede the process 
inputs, cf. Fig.3c. Differing from the first two 
structures the transfer function matrix of the 
integral paths is proper but not strictly proper 
and is described by 
z_(k+l) = z_(k) + u (k) 
u(k) 
= z_(k) + u*(k) 
Hence the augmented system is 
x ( k + l ) 
z_(k+l) 
y ( k ) 
_ 
= 
A 
0 
Lc 
B 
I 
0 
x ( k ) 
z_(k) 
x ( k ) ' 
z ( k ) 
+ 
B_ 
I_ 
(44) 
(45) 
u*(k) 
(46) 
(47) 
with the new system inputs u_ (k). Controller and 
observer are extended and designed for the augmen-
ted system, Eq.(46) as if the integral paths would 
be part of the process. 
The identity observers used in the three structures 
may as well be substituted by reduced order obser-
vers. A detailed description of all structures is 
given in Hensel (1983). 
FEEDFORWARD CONTROLLERS 
In the presence of measurable disturbances feed-
forward controllers may be applied to improve the 
control performance. Some well known approaches 
are given in Isermann (1981) for the SISO-case 
and can be easily extended to the MIMO-case. Ap-
proach 1 is the complete dynamic compensation, 
which cannot always be applied due to the cancel-
lation of the process behaviour. One way to over-
come this problem is a reduction of the dynamic 
compensation to the static case cancelling the gain 
factors only which often may not result in a sat-
isfactory behaviour. A better performance can be 
achieved by using a dynamic compensator of pre-
fixed structure and to tune the parameters by means 
of a parameter-optimization method. 
THE CADOCS PACKAGE 
The whole package consists of a central data-based 
CAD-interpreter-management system with an alterable 
command set,a block diagram generation package, 
the design modules for identification, controller 
design and simulation, a (Calcomp-compatible) plot 
package for high resolution graphic-devices and a 
flexible real-time package for DDC-purposes (Fig.4). 
The CAD-Management Concept 
The interpreter-management-system is divided into 
three parts, cf.Fig.5. The generator system CASSY 
allows among other features the definition or modi-
fication of an arbitrary selectable CAD-phase flow 
structure or the extension or reduction of the 
command set and therefore of the range of integrated 
design modules related to these commands. The re-
sults obtained by CASSY are stored in the data-
base (DS) and can then be used by the management 
system CADCO which is realized as an interpreter 
with a simple command syntax. Depending on the 
generated CAD-phase flow structure and the actually 
activated phase the user can choose a command 
initiating his next intended action out of a subset 
of all available commands. This feature helps to 
avoid senseless design sequences (e.g. controller 
design before estimation of the process parameters). 
On the other hand it offers a high flexibility 
because the user can choose within these subsets 
and is not guided by a fixed program flow. In ad-
dition a special command allows to jump directly 
to each implemented CAD-phase. Each command-line 
consists of a 3-character command and optional 
separators and parameters defining modifications 
of the command-action or running parameters for the 
module to be activated. 
CADCO not only interprets the command lines and 
coordinates the activation of the design modules, 
but as well serves for a user-management thus al-
lowing different users to work with the package. 
A 4-character password assigned to the user allows 
CADCO to allocate different priority levels in 
order to permit or prohibit the usage of special 
commands and to assign different knowledge levels 
in order to enable or disable automatic output of 
help functions during the user's session. Help 
functions are design phase titles, descriptions 
of the commands and the activated command subset 
and error and system messages. All these helps are 
stored in the data base with a special 2-character 
grammalogue defining the text-language; up to 16 
different languages can be hold simultanously. For 
more details see Hensel anc1 Schnell (1984). 
The data base consists of three central management 
files containing system data, user management data 
and pointers to ali other tiles of the data base 
(SYSTB), the CAD-phase flow structure (INFIL) and 
command line parameters (PARAM). User support is 
realized by five language dependend textfiles 
(<id> grammalogue) concerning general information 
(<id> CAD), help-information about the flow struc-
ture and the commands (<id> HLP), error and system 
messages (<id> ERR) and dialog-texts for question 
and answer parts (<id> DIA) as well as a user 
dependend (<us> grammalogue) default-value file 
defining alterable prefixed answers to the questions 
of the dialog-file (<us> DFT). The user dependend 
files concerning control engineering topics are 
the block diagram file containing up to 31 block-
diagrams of a maximum complexity of about 8000 
elements each (<us> BLD) and four files containing 
the parameters which describe the dynamics of iden-
tified processes and designed controllers (<us> 
SPR, <us> MPR, <us> SCO, <us> MCO). All user activ-
ities and all results obtained from the design 
modules are stored in a protocol file with alter-
able name. 
All design activities concerning control engineering 
tasks are oriented on and routed through a central 
arbitrary definable block diagram which can consist 
of up to 32 different element types like multi-
variable processes, special nonlinearities, sum-
mation or branch points, etc. displayed on a graph-
ical device (colour or black and white). Each block 
diagram description record of <us>BLD contains 
the whole structure definition and graphical re-

CADOCS 
159 
p r e s e n t a t i o n of t h e element, p o i n t e r s 
d e s c r i b i n g 
t h e l i n k a g e t o o t h e r elements and p o i n t e r s t o 
t h e 
parameter f i l e s SPR, MPR, SCO and MCO. The element 
types a r e p r e d e f i n e d i n r e l a t i v e c o o r d i n a t e s and 
s t o r e d in s p e c i a l r e c o r d s ot t h e block diagram 
f i l e 
which s i m p l i f i e s t h e d e f i n i t i o n of new e l e m e n t s . 
The r e s u l t s from t h e i d e n t i f i c a t i o n and t h e 
c o n t r o l -
l e r d e s i g n a r e w r i t t e n t o four parameter f i l e s 
(SPR, 
MPR, SCO and MCO) t h u s a l l o w i n g f l e x i b l e 
s i m u l a t i o n s 
of complex or s e l e c t e d c o n t r o l systems or p a r t s of 
them. The s i m u l a t i o n r e s u l t s a r e d i s p l a y e d on g r a p h -
i c a l d e v i c e s . Comparisons of t h e c o n t r o l 
performan-
ces of d i f f e r e n t 
c o n t r o l l e r - t y p e s or 
- p a r a m e t e r s 
for t h e same c o n t r o l l e r block a r e supported by d i s -
p l a y i n g dynamically s e l e c t a b l e b a r d i a g r a m s . 
been d i s c o n n e c t e d for comparison p u r p o s e s ) . 
CONCLUSIONS 
D i f f e r e n t methods for t h e e s t i m a t i o n of 
o r d e r s , 
deadtimes and p a r a m e t e r s of m u l t i v a r i a b l e 
p r o c e s s e s , 
t h e d e s i g n of feedback and feedforward 
c o n t r o l l e r s 
(DB, PID, SC) have been proposed. A f l e x i b l e CAD-
package s e r v i n g for O n - l i n e i d e n t i f i c a t i o n , 
con-
t r o l l e r d e s i g n , s i m u l a t i o n and O n - l i n e 
implemen-
t a t i o n c o n t a i n i n g t h e proposed methods was p r e s e n -
t e d . 
I t i s obvious t h a t t h e high s u p p o r t and t h e 
f l e x i b i l i t y given by t h e system 
may h e l p t o im-
prove t h e d e s i g n r e s u l t s and t o save d e s i g n 
time 
c o n s i d e r a b l y . 
The Real-Time Concept 
Within t h e r e a l - t i m e concept every 
implementable 
function 
( e . g . e s t i m a t i o n , 
feedback- or 
feedforward 
c o n t r o l l e r s , 
f i l t e r s ) 
i s d e s i g n a t e d as Multi-OPer-
a t i o n a l Segment f u r t h e r c a l l e d MOPS which i s 
r e -
s t r i c t e d t o a maximum of four i n p u t s and four 
o u t -
p u t s . This d e f i n i t i o n allows t h e r e a l - t i m e manage-
ment package t o h a n d l e a l l f u n c t i o n s i n a s i m i l a r 
manner, only t h e number of p a r a m e t e r s , i n p u t s and 
o u t p u t s d i f f e r . 
The package can handle q u a s i - s i m u l -
t a n e o u s l y up t o 30 f u n c t i o n s with d i f f e r e n t 
sampling 
times which have t o be m u l t i p l e s of t h e b a s i c 200 
msec c y c l e of t h e package. A l l MOPS-parameters 
r e -
l e v a n t for management h a n d l i n g a r e s t o r e d i n a 
s p e c i a l "system g l o b a l a r e a " and can be a c c e s s e d 
from CADCO by a s p e c i a l m o d i f i c a t i o n r o u t i n e . 
A l l 
s i g n a l v a l u e s or c o m p u t a t i o n a l r e s u l t s which have 
t o be saved for f u r t h e r 
l o c a l use a r e s t o r e d i n a 
"program g l o b a l a r e a " which cannot be a c c e s s e d 
from 
CADCO. As i t i s p o s s i b l e t o a c t i v a t e or 
d e a c t i v a t e 
f u n c t i o n s t h u s r e q u i r i n g or r e l e a s i n g p a r t s of 
t h e 
g l o b a l a r e a s , t h e s e a r e dynamically managed. In t h e 
case of d e a c t i v a t i o n t h e remaining parameter 
s e t s 
a r e packed t o avoid s p l i t up of t h e a r e a s . 
Parameter 
s e t s of new f u n c t i o n s a r e added subsequent t o t h e 
occupied s p a c e . Some f u r t h e r 
f e a t u r e s a r e t h e p r e -
v e n t i o n from i n t e g r a l wind up, open loop mode of 
each MOPS, Manual-mode of each D/A-channel and a 
s p e c i a l r o u t i n e for bumpless c l o s i n g of 
c o n t r o l 
l o o p s . A d e t a i l e d d e s c r i p t i o n of t h e r e a l - t i m e 
pack-
age i s given i n Hensel 
(1985). 
A DESIGN EXAMPLE 
The design of 
with t h e 
i d e n t i f 
mating with t h e 
back 
c o n t r o l l e r 
o u t p u t 
t e s t c a s e 
The o u t p u t s 
a r e 
a rms-amplitude 
about 0.002V. 
m u l t i v a r i a b l e c o n t r o l loop 
s t a r t i n g 
i c a t i o n of t h e p r o c e s s and t e r m i -
implementation of t h e d e s i g n e d 
feed-
w i l l be shown for a two i n p u t , 
two 
s i m u l a t e d on an analog 
computer. 
d i s t u r b e d by a c o l o u r e d n o i s e w i t h 
of 0.3V and a small mean v a l u e of 
The whole d e s i g n 
( i n c l u d i n g implementation) 
i s 
d i -
v i d e d i n t o 5 p h a s e s . A r e p r e s e n t a t i v e example of a 
design may be a s 
f o l l o w s : 
In phase 1 a block diagram element 
r e p r e s e n t i n g 
t h e p r o c e s s i s d e f i n e d . 
The O n - l i n e 
i d e n t i f i c a t i o n 
i s then s t a r t e d in phase 2. Due t o t h e 
d i s t u r b a n c e s 
a c t i n g on t h e system t h e COR-LS method i s 
a p p l i e d 
( F i g . 6 ) . After a measuring p e r i o d of 266 sec 
(sam-
p l i n g time T 0=2sec) o r d e r s , d e a d t i m e s and p a r a m e t e r s 
of t h e model a r e e s t i m a t e d . The f i t t i n g of t h e model 
i s v i s u a l l y checked by comparing t h e measured and 
the model c r o s s c o r r e l a t i o n f u n c t i o n 
( F i g . 7 ) . 
Phase 
3 d e a l s with t h e c o n t r o l l e r d e s i g n . The s e l e c t e d 
c o n t r o l l e r s t r u c t u r e s h a l l be of PID-type and a p -
proach 2 i s s e l e c t e d . After computing t h e 
c o n t r o l l e r 
phase 4 e n a b l e s t h e s i m u l a t i o n of t h e c l o s e d 
c o n t r o l 
loop ( F i g . 8 ) . Phase 5 f i n a l l y a c t i v a t e s t h e O n - l i n e 
implementation. The performance of t h e O n - l i n e con-
t r o l loop i s shown i n F i g . 9 
(the d i s t u r b a n c e 
has 
REFERENCES 
Aström, K.(1970). Introduction to Stochastic Control Theory, Academic 
Press, New York 
Bayer, Th.(1982). Entwurf eines verallgemeinerten Mehrgrößen-Deadbeat-
Algorithmus. Diploma thesis, Institut of Control Eng., Techn.Univ. 
of Darmstadt. 
Blessing, P.(1979). Identification of the input-output- and noise-
dynamics of linear multivariable systems. 5th IFAC-Symposium on 
Identification and System Parameter Estimation, Darmstadt. 
Hensel, H.(1981). Entwurf eines verallgemeinerten Eingrößen-Deadbeat-
Algorithmus mit Güteindex. Internal report, Inst.of Contr.Eng., 
Techn. Univ. of Darmstadt. 
Hensel, H.(1983). Zur Synthese und Simulation von Zustandsreglern mit 
integralem Anteil. Internal Report, Institut of Contr. Eng., Techn. 
Univ. of Darmstadt. 
Hensel, H. and Peter, K.H.(1984). Multivariable PID controllers designed 
by linear quadratic state space approach. American Control Conference, 
San Diego. 
Hensel, H. and Schnell, R.(1984). CADCO- Ein lernfähiger Interpreter für 
regelungstechnische CAD-Systeme. Prozeßrechnertagung, Karlsruhe. 
Hensel, H.(1985). A flexible real-time concept for various control re-
quirements. (to be presented at) 7th Conference on Digital Computer 
Applications to Process Control, Vienna. 
Isermann, R.(1981). Digital Control Systems. Springer Verlag, Berlin 
Isermann, R. and Hensel, H.(1985). Séquentiel design of decentralized 
controllers with identification and .selftuning methods. 3rd IFAC 
Symposium on Computer Aided Design in Control and Engineering 
Systi 
Copenhagen. 
Mäkilä, P.M.(1984). On the Anderson-Moore method for solving the opti-
mal output feedback problem. IEEE Tr AC 29. 
Mancher, H. and Hensel, H.(1985). Determination of order and deadtime 
for multivariable discrete-time parameter estimation methods. 7th 
IFAC-Symposium on Identification and System Parameter Estimation, 
York. 
Nour Eldin, H.A.(1977). Minimalrealisierung der Matrix-Übertragungs-
funktion. Regelungstechnik Vol. 25. 
Rosenbrock, H.H.(1974). Computer Aided Control System Design. Academic 
Press, London. 
Wenk, C.J. and Knapp, C.H.(1980). Parameter optimization in linear 
systems with arbitrarily constrained controller structure. 
IEEE Tr AC 25. 
-ïu£j 
c„ 
C21 
C22 
C12 
Fig.l. Multivariable PID-control with coupling 
controllers behind of main controllers 
'HK^m 
Fig.2. Multivariable PID-controller design by 
approximating state control loop signals 
CADCES-F* 

J
nlk) nw(k) 
^(k)j| g(k) 
n(k) 
w(k) 
u;(vl 
i 4 
u2lv]| 
t[min] 
'I 
i l l 
t[min] 
y,Ml 
y2tvi 
0.5 
K ^ 
Fig.4. The CADOCS-package 
CADCO 
INTERPRETER 
DB 
CASSY 
CAD-STRUCTURE 
DEVELOPMENT 
SYSTEM 
> 
CJ o 
o -I 
Fig.5. The management system CADCO/CASSY 
UKK) 
U2CK) 
u(k) 
| 
, 
. — - , x(k) 
w(k)n 
elk) 
ulk) 
U""~~ 
r& 
A B 
0 
I 
KlKl 
~ [ — i — T — i — - j — i — n r — i 
1 
K 
i{k] rt,k,ll 
c ) 
Y 1 ( K ) , U l ( K ) 
s 
Y2<K),UI2<K> 
Fig.3. State control with integral action, 
a) in the observer 
b) appended to the process outputs 
c) preceding the process inputs 
t[min] 
-0.5 f 
t[min] 
Fig.6. On-line process 
identification 
measured c r o s s - c o r r e l a t i o n 
f u n c t i o n 
model c r o s s - c o r r e l a t i o n f u n c t i o n 
ω 
U- g. 
n 
1 
1 
1 
1 
1 
1 
1 1 
8 
24 
40 
56 
π 
1 
1 
1 
1 
1 
r 
8 
24 
40 
TflU 
TRU 
Fig.7. Model validation 
u2M| 
u,M 
1 
-1 
-2 
1 
V 
fv 
m 
tlmin] 
b£ r-
W 
y M l 
0.5 
-0.5 -
-1 
/v 
t ; 
1 
. 
-
\ 
LX 
1 
/»mini 
If 
y 2( v ] | 
0.5 j 
ΤΓ 
K 
K 
Fig.8. Closed loop simulation 
Fig.9. On-line control with the designed controller 
160 
H. Hensel 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INTERACTIVE OPTIMIZATION OF 
CONTROLLER AND PLANT PARAMETERS IN 
THE CASE OF MULTIPLE DESIGN 
OBJECTIVES 
J. Lückel, R. Kasper and K. Jäker 
Fachgruppe für Automatisierungstechnik 
der Universität-GH Paderborn, FRG 
Abstract. 
This paper presents a design method for simultaneous optimization 
of a large number of controller and plant parameters of high-order 
linear 
time-invariant 
systems. User-friendly supervision and control of several 
design objectives is achieved through an interactive graphics-supported de-
sign process. The application of the design package for optimal matching of 
construction and controller parameters is demonstrated in great detail taking 
as an example a vehicle model with actively controlled tandem wheel 
suspen-
sion. 
Keywords. Computer-aided 
system design; control system synthesis; optimal 
control; sensitivity analysis; optimisation; vibration control 
INTRODUCTION 
Over the last few years the demands placed on 
dynamic - for example, mechanical - systems have 
constantly increased. This is reflected among 
other things in more complex modeling, that is to 
say, in more precise system description over a 
large frequency range and a wide range of opera-
ting points. Additionally, design 
requirements 
have also become more complex, in the shape of 
several interdependent design objectives that all 
have to be monitored or optimized simultaneously 
(Kreisselmeier, 1979). 
All this automatically results in greater demands 
being placed on available design aids. These are 
required to support the flexible use of complex 
controller systems of higher dimension such as 
those found in state space theory or in robust 
control. Critical applications have also shown up 
the necessity of studying controller and plant as 
a unit in order to determine optimal 
control 
inputs and measuring outputs or optimal plant 
construction or to adapt controller and system 
parameters to a particular task 
(Lückel, 
1982). 
Where several design objectives are to be opti-
mized simultaneously, scalar figures of merit are 
replaced by vectorial, and interactive visual 
control and monitoring of the design process 
becomes even more essential. 
In this paper a design procedure for linear time-
invariant plants and controllers is presented 
which allows of precise alteration of several 
design objectives on the basis of a sensitivity 
analysis in the relevant parameter space. In 
addition to pure parameter optimization, sensiti-
vity analysis also affords an insight into the 
structure of the design problem. For both deter-
ministic and stochastic experiments, formulating 
the design problem in terms of system theory 
allows for flexible modelling of a realistic 
operational environment at the input to the con-
trol system which is to be optimized in dynamic 
excitation 
models. 
At the output, 
dynamic 
weighting models support the processing of 
such 
plant output quantities as are relevant to a 
particular problem. 
The application of the design package is demon-
strated in great detail taking as an example a 
vehicle model with tandem wheel suspension. A 
combined optimization of controller and con-
struction parameters will provide information on 
the extent to which it is possible to transfer 
the spring action of conventional pneumatic tyres 
to an active suspension system and to use the 
tyres solely to transmit drive and guidance 
forces. 
FORMULATING THE DESIGN PROBLEM 
The main aim of computer-aided controller design 
is to replace conventional 
laboratory hardware 
investigation of a particular physical problem by 
computer software simulation, thus either by-
passing it altogether or at least restricting it 
to the final phase of development. To achieve 
this, the design problem has to be suitably for-
mulated for computer application, allowing the 
user to put design requirements arrived at by 
means of actual physical observation 
into a 
mathematically exact and numerically manipulable 
form. However, a compromise has to be found bet-
ween the accuracy of the simulation on the one 
hand and the time and effort 
involved in its 
realisation on the other. In this paper, we will 
restrict ourselves to modelling by means of 
linear time-invariant systems. 
System theory aspects 
Fig. 1 
shows the block diagram of a standard 
configuration used for systematic formulation of 
the design problem (Kasper, 1985a). The dynamic 
behaviour of the system to be designed is repro-
duced in the plant model. The approximation has 
to have sufficient bandwidth, which automatically 
results in models of high order, for example when 
dynamic 
effects in actuators and measuring 
elements are taken into consideration or when 
elastic structures are modelled in the case of 
mechanical systems. The practical effects of the 
limitation to linear time-invariant system models 
can be reduced if several operating points are 
161 

162 
J. Lückel, R. Kasper and K. Jäker 
£* excitation 
Jta. 
v 
ι 
N 
ψ^ 
1 
plant 
Controller y* 1 
Jo 
\> 
weighting 
[* 
y», 
Fig. 1 
Block diagram of a standard configuration 
included, for example in quasi-stationary exami-
nation of time-variant systems or linearization 
of non-linear ones. Reproduction of the external 
excitation functions effective at the input of 
the plant is equally important. It enables the 
expert to carry out analysis and synthesis in an 
operational environment which is as realistic as 
possible. In the case of nonlinear systems the 
adjustment of defined operating points as a basis 
for linearization is of particular importance, 
since in this way it is possible to check whether 
the limited range of validity has been adhered 
to. The necessary excitation functions are repro-
duced in the excitation model, with two different 
classes of function: 
- deterministic excitation functions such 
as 
step, ramp and sinus functions, which are gen-
erated in the instable part of the excitation 
model from Dirac impulses and 
- stochastic excitation functions, whose spectral 
distribution throughout the stable part of the 
excitation model can be fixed almost at will. 
The excitation model also serves to reproduce 
disturbance and reference inputs. What functions 
the outputs of the excitation model finally take 
depends on how they are fed into the plant via 
the input u : 
K 
pe 
The output quantities y which are of relevance 
to a particular application can be processed 
dynamically in the subsequent weighting model. 
For example, certain discrete frequency intervals 
or individual frequencies may be suppressed or 
amplified. 
Characteristic quantities of the 
weighted 
analysis. 
output quantities y 
are used for 
dynamic amplitude factors 
- integral mean values of the transient process 
amplitudes during impulse excitation 
- RMS due to noise excitation 
static amplitude factors 
- polynomial parts of the steady state amplitudes 
during impulse excitation. 
In order to fully exploit all the advantages of 
controller synthesis which are 
theoretically 
possible and practically necessary, the selection 
of controller structure ought to be as unre-
stricted as possible, i.e. 
- support of the development of multivariable 
controllers of high order such as those found in 
state space theory (Riccati controllers, Kaiman 
filters, compensations, disturbance and reference 
feedforwarding), and 
- consideration of requirements which are shown 
up during practical realisation, such as those 
arising during digital control with signal pro-
cessors or from nonlinear effects in the plant. 
The controller is constructed as a linear dynamic 
system of arbitrary structure, consisting of 
several substructures, the measuring variables y 
functioning as input and the control variables u 
as output. 
Plant and controller, joined by dynamic excit-
ation and weighting models, 
controlled system 
x = A(p)x + B(p)u 
form the augmented 
yw = c(p)x , 
which is the basis of the design. The parameter 
vector p can contain both controller and plant 
parameters. It is divided into a fixed, operating 
point-dependent vector p f and an optimizable 
vector p n, 
► fixed, operating point 
► optimizable 
thus allowing various operating points to be 
included in a linearized treatment of non-linear 
problems. 
Formulating the optimization problem 
The scheme of an interactive design concept shown 
in Fig. 2 simulates practical experimental work 
in the laboratory. However, both 
expert and 
process levels are either supported or simulated 
off-line with the aid of a computer. In the 
planning phase, the expert decides on various 
experiments which appear relevant to the particu-
lar application for individual operating points 
of the augmented system. For each experiment, ne 
determines input and output configuration, speci-
fies the type of excitation 
(deterministic/-
stochastic) and defines objectives important to 
the application. These combine formally to make 
the objectives vector 
1. 
operating point 
j-th 
operating point 
nß-th operating point 
[zil 
p 
[
znBj 
where 
zj = 
(2) 
.J'1 
JjnE 
1. 
experiment 
k-th 
experiment 
rir-th experiment . 
Such a procedure has the advantage of allowing 
individual criteria (components of the objectives 
vector) to be monitored individually and directly 
influenced by the strategy. In contrast to this, 
the 
conventional concentration of 
different 
partial 
functionals into an overall 
scalar 
functional prevents a clear view of individual 
aspects and only allows indirect influence via 
alterations in the weighting factors. 
At the process level, simulation of individual 
experiments for each operating point (an explicit 
numerical simulation can usually be dispensed 
with in the case of linear systems) takes place 
in the execution phase along with an analysis 
calculating the objectives relevant to each ex-
periment. The results of the analysis are used to 
adjust the free parameters in accordance with a 
pre-set strategy. 
At the expert level, the execution phase involves 
monitoring 
the analysis results 
and 
where 
necessary interactively altering the strategy or 
even defining new experiments and 
operating 
points. 

Interactive Optimization 
163 
planning pha 
definition 
of 
1 experiments 
\_y 
realization 
of test 
environment 
se 
execution phase 
*! 
simulation 
of 
experiments 
V 
~5 
supervision 
of 
analysis 
Λ 
analysis 
of 
experiments 
objecti 
) 
ves 
> 
control 
of 
synthesis 
| 
o 
strategy 
I 
variation of parameters 
Fig. 2 
Basic concept of the design package 
SOLUTION OF THE DESIGN PROBLEM 
The design task consists in influencing certain 
elements of the objectives vector in accordance 
with the application in question. That may mean 
minimizing or maximizing some of the elements as 
far as possible, keeping others as they are or 
moving them into certain pre-determined ranges. 
The expert's task consists in monitoring the 
phases of the analysis and communicating 
desired 
changes to the strategy module. Such an inter-
active procedure allows the course of the optimi-
zation to be observed. The relatively low com-
puting time requirement of the strategy enables 
the design process to be interactively monitored 
and controlled on the graphics monitor. 
Analysis and solution of the linear problem 
The general nonlinear design problem, that of 
moving the components of the objectives vector 
ζ;(ρΛ) for a set of particular operating points 
., η β) into certain prede-
ranges 
pi. = const (j=1, 
J finable range 
^(P0)e z{ 
(3) 
is 
reduced to the iterative solution of a 
sequence of linear subproblems(Kasper, 1985b). In 
each step of the design the aim is an alteration 
άζ of the objectives vector z(p ) which enables 
requirement (3) to be fulfilled. 
If only small 
alterations iz are carried out, the sensitivity 
matrix 
S = ν Λ z 
(4) 
provides a linear approximation of the relation-
ship between the change in objectives vector Δζ 
and parameter vector Jp : 
âz « S' Jpn 
(5) 
In each step, the linear sub-task of the design 
procedure consists in adjusting the possible 
infinitesimal alterations 
âz in the objectives 
vector z as far as possible to the desired 
alterations Jz. Fig. 3 shows an example of this 
procedure 
for two objectives and 
a two-
dimensional parameter space. If this adjustment 
is described by means of a minimization of a 
weighted Euclidean vector norm of the error 
\Uz - Âz\\ 
Min 
where 
L = diag(l.) 
i=1 
l 
(6) 
the unknown alterations of the parameter vector 
p can be determined by the solution to the Least 
Square Problem defined in equations (5 and 6 ) . 
The desired directions 
àz of the objectives 
vector 
z and of weightings L are available as 
an interactive means of controlling the design 
process. The desired range 
was intentionally 
not pre-set, as in many cases this alters during 
the design process along with the physical prob-
lem. On the contrary, the solubility of the 
linear 
subproblem 
(rank of the 
sensitivity 
matrix) defined by equations (5 and 6) shows up 
any conflict in objectives and thus provides an 
important aid to deciding on new directions. 
Fig. 3 Schematic representation of the iterative 
solution to the nonlinear design problem 
by mean of a sequence of linear subprob-
lems for 2 free parameters and 2 objec-
tives 
Nonlinear problem and step size adjustment 
the execution of the design method a 
control which provides the interface 
step 
from 
For 
size 
the linear 
subproblem to the real nonlinear 
problem is necessary. This has the function of 
adjusting the real alteration of the parameter-
vektor 
J P 0
 = s J po 
where 
0 < s < 1 
(7) 
to the requirement given by the linear calcul-
ation in such a way as to keep the linearization 
error 
J ZL = J zN ( po> " s J z 
where 
(8) 
àz 
= z(p0 + JpQ) z(Pn 
as small as possible for a maximum value of s at 
each step. The two requirements contradict each 
other, so that specification of step size has a 
decisive influence on the effectiveness of execu-
tion. To achieve simplicity of implementation, 
step size control is based on sign equality of 
both pre-set and actually calculated alterations 
in the weighted components of the objectives 
vector 
sgn(JzNi) = sgnUz.) 
for 
* 0 
(9) 

164 
J. Lückel, R. Kasper and K.Jäker 
Additionally, for each step the relative altera-
tion of the components of the objectives vector 
q 
max 
άτ Ni 
for 
zj(P 0) * ° 
(10) 
i=1 z.(p0) 
is limited. Condition (9) especially ensures that 
during the design process none of the weighted 
components 
"deteriorates" and that 
optimization 
proceeds over a wide range with a relatively 
large 
step size (as many applications 
have 
shown). 
Calculation of the sensitivity matrix 
As the description of the design 
procedure's 
basic elements shows, the calculation of the 
sensitivity matrix S is of central importance as 
a link between the expert's demands 
(alteration 
in objectives vector) and execution 
(alteration 
in parameters). There are two possible methods of 
accomplishing this task: 
- an analytical one, in which a symbolic repre-
sent a tloTToTThë" required sensitivity matrix can 
be calculated with the aid of special Gradienten-
kettenoperators and 
- a numerical one, in which a numerical solution 
is found on the basis of QR-decomposition. 
APPLICATION 
The application of the design method is demons-
trated by the problem of optimal alignment of the 
suspension 
system in motor vehicles. In most 
approaches to date, two possible ways of meeting 
the demand for safety, i.e. as little variation 
as possible in surface pressure between tyre and 
road, and for ride comfort, T.e. as little dis-
comfort as possible for the passengers 
during 
acceleration, have been investigated. These are: 
- improvement and optimal adjustment of the con-
struction of the passive springing 
systems in 
common use and of wheel suspension 
- use of actively controlled hydraulic suspension 
in place of the passive system and optimal ad-
justment of the necessary controller. 
For more sophisticated requirements, this sepa-
rate procedure is no longer adequate. If a satis-
factory result is to be achieved, wheel 
suspen-
sion construction and active springing 
control 
have to be adjusted to one another. 
Model description of the design objectives 
In present suspension construction, ride comfort 
and safety depend mainly on the pneumatic tyres 
(spring rate CR) used, which fulfil both guidance 
and springing functions. If the two combined 
functions of the conventional 
pneumatic 
tyre 
(generation of friction coefficients to ensure 
grip and formation of an air cushion to insulate 
against 
road irregularities) are separated, it 
can be replaced by a considerably harder solid 
rubber tyre. If this is done, neither a conven-
tional 
spring-damper 
system 
(spring 
rate Ca, 
damper rate Da) nor an active damper system alone 
(controlled hydraulic cylinder with 
conventional 
wheel 
suspension ) can bring ride comfort (x ) 
and safety (F. ) down to the level of a pneuma-
tic tyre 
y system. 
For this reason, we 
suggest replacing conventional wheel 
suspension 
by the tandem wheel suspension shown in Fig. 4, 
which has many of the essential springing proper-
ties of the pneumatic tyre. The two wheels with 
hard rubber tyres (mass M, 
C R 1=C R 2=4 CR) are coupled R1' M R2> spring 
rate 
to the 
Fig. 4. Scheme of the tandem wheel suspension 
damper system of the car body in place of a 
single wheel at a distance of I_W1, L W 2 by means 
of a rocker arm (mass M,,, moment of inertia Jw, 
centroidal 
distance l_w ) and can be rotated 
(damping rate D w ) . The elasticities of the rocker 
arm construction and of the two wheel-bearings 
are approximated by linear springs and dampers 
(cr c2, 
D 2 ) . 
Fig. 5. 
Physical model 
suspension 
of the tandem wheel 
To optimize the parameters of the rocker arm 
construction, the rigid body model represented in 
Fig. 5 can be described with sufficient accuracy 
by a linear time-invariant differential equation 
system of tenth order. For the active vibration-
damping, the passive damper is replaced by a 
hydraulic cylinder (surface area A, volume V). 
The pressure difference Jp in the 
hydraulic 
cylinder 
(leakage coefficient C,, bulk coeffi-
cient β , piston speed x. ) 
V 
(V/j8) /p= - 2 CL ip 
provides damping-force F 
2 A xk + 2 Qv 
A ip. 
hy 
The necessary oil-flow Q is controlled in an 
electro-hydraulic servo-valve. 
T
2 Q + 2 D T Q + Q = K U 
v 
vv 
v 
v Mv 
vv 
v 
v 
The spectral distribution of road surface irregu-
larities for the disturbance input x , = x (t) is 
formed 
from white noise in a form filter with 
the transfer function 
K 
GF(s)=-
(1+η s)(1+T2 s) 
Parameters of T.=2sec, T2=o.o2sec, K =0.01 result 
for an average asphalt surface and a velocity of 

Interactive Optimization 
165 
v = 20 m/s (Mitschke, 
1972). When 
travelling 
straight 
ahead, 
road 
surface 
irregularities 
x « ( t ) = x (t - T) affect the second wheel 
with 
a time lag of 
T = v/(Lw1 + L W 2) 
The dead time system is approximated by an all-
pass filter with the transfer function 
GT(s)= 
2 2 
3 3 
4 4 
a 0-a 1Ts+a 2T s -a^T s +a4T s 
+a,,Ts+a0Tts'~+a0T s +a, 
α0"α1 
£ 2 
□ pl S +Qn I 
Ts 
The parameters aQ = 1072, a, = 536, a 2 = 120, 
a3 = 13.55, a- = 1, results from a Padê approxi-
mation of 4th order (Johnsen, 1963). 
In order to take passengers' physiological sensi-
tivity to vertical vibration into account, car 
body acceleration x is weighted in the lower 
frequency range as a measure of ride comfort 
according to DIN (1984) by means of a formfilter 
In all three stages, the primary objective of 
optimization is to reduce the weighted car body 
acceleration and relative wheel load variation. 
In order to monitor and keep to the given physi-
cal 
restrictions of the mechanical (position of 
car body x and wheels x , or x ?, position and 
angle of the rocker arm x or φ ) , the hydrau-
lic (pressure difference Ip, oil flow Q ) and the 
electrical 
variables 
(control 
voltage 
U ), 
these are additionally included. 
v 
= (xaw,RL,RL1,RL2,xa,xrl,xr2,xs, <PS> ^P>Q V) 
RMS values of the vector y form the vector 
w . 
The 
σ. 
In order to guarantee a"desired range of 
stability in the optimized 
system, all eigen-
values are grouped together in the eigenvalue 
vector λ and included in the objectives vector . 
uu 
λτ) 
1st design stage 
Vs>= 
KW < 1 + TW1 s) 
1 + 2 DW TW2 
T~T 
s + TW2 
s 
T w 2=0.03, 
with the parameters Kw=0.42, η,-=0.107, 
Dw=0.733 in the lower frequency range. 
The relative wheel load variation RL (ratio of 
dynamic (F. ) to static (F + t ) wheel load) is 
used as a y measure of 
driving 
safety. 
For tandem wheel 
suspension, the wheel 
load 
variation of both front and rear wheel 
RL1 = dynl 
100 % 
rstat1 
and their sum 
RL2= _ ύ ^ _ 100 
Fstat2 
RL =
 Fdyn2 + Fdyn2 
Fstat1 + Fstat2 
100 % 
are of importance 
each wheel (F 
The static load 
statr 
Fstat2' can be 
from the rocker 
arm 
geometry. 
carried by 
calculated 
Fig. 6 
shows how the subsystems connect up. The total 
coupled 
system of 21st order forms the basis for 
optimization. 
Optimization of the actively controlled 
tandem 
wheel suspension 
The design of the actively controlled 
tandem 
suspension takes place in three stages: 
- optimization of rocker arm and tandem 
wheel 
construction for a given passive 
springing 
system. 
Taking this construction as a starting-
point, 
- design of a Riccati controller for an actively 
controlled system and finally 
- mutual 
adjustment of controller and construc-
tion. 
To find out what improvement potential there is 
in the area of construction 
alone, the first 
design stage is to investigate optimal adjustment 
of rocker arm and tandem wheel for a conventional 
passive springing system with constant car body 
spring Ca and damper Da. If the possible values 
of the weighted car body acceleration and the 
relative 
wheel 
load variation for the tandem 
wheel 
suspension are compared with the reference 
values entered in Fig. 7 for a conventional wheel 
suspension, it becomes clear that the relative 
wheel 
load variations, which have risen sharply 
as a result of the hard rubber tyres, have to be 
reduced. The weighted car body acceleration can 
be kept constant during this process. The change 
in the RMS of these quantities occurring 
during 
optimization is given in Fig. 7. Optimization had 
to be ended after a conjugate complex eigenvalue 
pair reached the minimum 
permissible 
damping 
ratio, further improvement in the given parameter 
space thus being impossible. 
2nd design stage 
After all scope for improvement in construction 
has been exhausted, in the 2nd design phase the 
passive damper is replaced by an active 
spring 
element. As the car body spring then serves only 
to carry static loads, its spring rate is reduced 
to 25%. In order to gain an overview of the 
improvement potential of the active suspension, a 
complete state controller 
u 
kTx 
is designed. As the vector of the controller 
coefficients can be determined in one step 
through the solution of the matrix 
Riccati 
equation, values for ride comfort and safety 
improve dramatically. 
white 
noise 
m 
Uc 
form filter 
for road 
irregularities 
i 
j 
* y r 
*e2 __ 
I 
i * 
I 
1 
=*ρ·Α 
-· 
physical model of 
mechanical subsystem 
Uc~ 
! 
physical model 
of hydraulic 
subsystem 
— i 
Xg 
t 
** 
form filter 
for human 
sensitivity 
i 1 
1 
*aw 
N 
V 
Fig. 6 
Blockdiagram of the coupled system used for optimization 

166 
J. Lückel, R. Kasper and K.Jäker 
3rd design stage 
After 
everything possible has been done to 
improve construction and controller 
separately, 
further improvements in the actively 
controlled 
tandem wheel 
suspension can only be achieved 
through mutual 
adjustment of system and con-
troller parameters. There are altogether 30 para-
meters which have to be optimized in this stage 
PT = ( 
k T ) 
As the values for the relative wheel load varia-
tions have already been reduced to a satisfactory 
level by the Riccati controller, the most impor-
tant goal here is to reduce the weighted car body 
acceleration. The change in RMS values of these 
quantities occurring in the third 
optimization 
stage are depicted in Fig. 7. In this stage, too, 
the design process was ended when a conjugate 
complex eigenvalue pair went outside the per-
missible damping range. 
^2 £ 
i 4-ιώέ^:: 
\ . u . 
H 
1 1 1 H 1 — I 
\-
100 
40 ± 
1. stage 
2. stage 
3. stage 
Fig. 7 
Alterations of some system 
parameters 
and objectives during optimization 
■ -Reference values for conventional wheel 
suspension with pneumatic tyre 
x -Riccati 
controller 
for 
actively 
controlled tandem wheel suspension 
SUMMARY 
individually in the separate stages of design 
allows the expert to achieve his design require-
ments directly. The relatively small number of 
optimization steps (124 steps with 
approximately 
the same number of objectives vector calcula-
tions) needed despite the large parameter space 
allows of interactive design control even in the 
multi-user environment of a mini-computer 
(Prime 
750). As Fig. 7 shows, the alterations of some 
constructive design parameters during optimiz-
ation all take place within a range which makes 
actively 
controlled tandem wheel 
suspension 
appear promising for the future. 
REFERENCES 
DIN-Norm 
45671 
(1984). 
Measurement 
of 
occupational vibration immissions; vibration 
meter; requirements and verification 
Johnson, C.L. (1963) Analog computer techniques, 
Mc Graw-Hill book company 
Kreisselmeier G., und R. Steinhauser (1979) 
Systematische Auslegung von Reglern durch 
Optimierung eines vektoriellen 
Gütekrite-
riums. Regelungstechnik 30, p. 76-79. 
Kasper R. (1985a). 
Enwicklung und Erprobung 
eines instrumenteilen Verfahrens zum Enwurf 
von Mehrgrößenregelungen. To appear in Fort-
schrittsberichte 
der 
VDI-Zeitschriften, 
Reihe 8. 
Kasper R. (1985b) 
Grundlagen eines 
instrumen-
tellen Verfahrens zum Entwurf von Mehrgrößen-
regelungen. To appear in Regelungstechnik. 
Lückel J. und R. Kasper 
(1983). Rechnerunter-
stützter Regelkreisentwurf im Zustandsraum 
mit Softwaremodulen derlinearen 
Systemtheo-
rie. 
Tagungsband 
zum 
Aussprachetag: 
"Rechnergestützter 
Regelkreisentwurf" 
ïïër 
VDl/VbÉ -Gesellschaft am 26. - 27. 9. 15Ô3 in 
Langen, p. 1-15. 
Lückel J . , 
F. Frühauf und R. Kasper (1982) 
Ent-
wurf von 
linearen Mehrgrößenreglern 
mit 
Hilfe einer 2-Schritt- 
Optimierung. Fest-
schrift zum 70. 
Rer. Nat. 
Geburtstag von Prof. 
Magnus, München, p. 363-376. 
Dr. 
Mitschke M. (1972). Dynamik der Kraftfahrzeuge. 
Springer Verlag Berlin 
The example gives a clear demonstration of the 
efficiency of the design package presented here. 
The ability to influence various 
objectives 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
SYSLAB: AN INTERACTIVE SYSTEM FOR 
ANALYSIS AND DESIGN OF LINEAR 
MULTIVARIABLE SYSTEMS 
P. H. Petkov*, N. D. Christov* and M. M. Konstantinov** 
* Department of Automatics, Higher Institute of Mechanical and Electrical 
Engineering, Bl. 2, 1156 Sofia, Bulgaria 
** Institute of Engineering Cybernetics and Robotics, Akad. G. Bonchev Str., Bl. 2, 
1113 Sofia, Bulgaria 
Abstract. An interactive system called SYSLAB for analysis and design of 
linear multivariable control systems in the state space is described. It 
is developed on the basis of MATLAB - a powerful interactive language 
for matrix computations which implements high quality software for sol-
ving matrix problems. SYSLAB makes possible to solve easily the basic 
problems of the analysis and design of linear multivariable control 
systems: stability analysis, investigation of the controllability/obser-
vability and reduction into canonical forms, pole assignment and synthe-
sis of optimal linear systems. Only algorithms that are proved as nume-
rically stable are implemented. SYSLAB is written in Fortran and is 
fully portable. 
Keywords. Computer-aided system design; multivariable control systems; 
canonical forms; pole assignment; optimal systems. 
INTRODUCTION 
In recent years a great interest has been 
paid to the computer-aided analysis and 
design of linear multivariable control 
systems. Various computational algorithms 
for continuous and discrete-time systems 
are developed and implemented in a number 
of program packages. 
The most efficient way for analysis and 
design of control systems is to solve the 
corresponding problems in interactive mode 
using a simple command language. This re-
duces greatly the user's efforts and makes 
possible to obtain many solutions for 
different data in a short time. 
In the analysis and design of linear sys-
tems in the state space the possibility to 
perform various matrix computations is very 
important. The solution of linear equations, 
eigenvalue/eigenvector computations, QR-
and singular value decompositions are en-
countered in almost every control problem. 
That is why each interactive system inten-
ded for analysis and design of linear sys-
tems should possess the possibility to 
perform such computations. 
Fortunately, there is MATLAB - a powerful 
interactive system for computations invol-
ving matrices developed by Professor C.B. 
Moler (1982). This system provides easy 
access to high quality software contained 
in LINPACK (Dongarra and others, 1979) and 
EISPACK (Smith and others, 1976; Garbow 
and others, 1977) packages. MATLAB is 
written in Fortran and is designed to be 
readily portable. The functions included 
in this system involve: 
- solution of linear equations, finding 
the inverse, the determinant and the 
condition number of a matrix; 
- computation of eigenvalues/eigenvectors, 
reduction into Hessenberg, tridiagonal 
and Schur triangular forms; 
- singular value decomposition and compu-
tation of the pseudoinverse; 
- QR decomposition and solution of linear 
least squares problems; 
- computation of a matrix exponential, and 
many others. 
An important feature of MATLAB is the 
possibility to count the necessary compu-
tational operations and to execute each 
function with different accuracy in order 
to measure the effect of the rounding 
errors. In addition, MATLAB is extensible 
new functions being added very easily. 
These properties make MATLAB an unique 
matrix environment for the analysis and 
design of linear systems. Consequently, it 
is used as a basis for development of 
interactive systems for solving linear 
control problems (Gregory, Shah and Walker, 
1982; Little, Emami-Naeini and Bangert, 
1984). 
In this paper an interactive system, called 
SYSLAB, for analysis and design of linear 
multivariable control systems, developed 
on the basis of MATLAB, is described. The 
main features of this system are: 
- only computational algorithms that are 
proved numerically stable are implemen-
ted. This makes possible to solve high 
order and ill conditioned problems; 
- all algorithms work with complex matrices 
which ensures full compatibility with the 
programs used in MATLAB; 
- all programs are developed so that to 
ensure the possibility of counting the 
computational operations and to execute 
the commands with different accuracy, as 
the functions from MATLAB. 
167 

168 
P. H. Petkov, N. D. Christov and M. M. Konstantinov 
SYSLAB makes possible to solve easily the 
basic problems of the analysis and design 
of linear multivariable systems: 
- stability analysis and solving the Syl-
vester and Lyapunov equations (both con-
tinuous and discrete); 
- reduction into controllable/observable 
orthogonal canonical form and determina-
tion of the dimension of the controllab-
le/observable subspace; 
- pole assignment synthesis and design of 
state observers; 
- synthesis of optimal linear systems and 
optimal filters, solving the correspon-
ding matrix Riccati equations (continu-
ous and discrete). 
In the next two sections we describe the 
SYSLAB functions and the numerical algo-
rithms implemented. 
SYSLAB FUNCTIONS 
Solving Sylvester and Lyapunov Equations 
The following four functions are intended 
to solve Sylvester and Lyapunov matrix 
equations in the continuous and discrete-
time case. 
X = SYLC(A,B,C) 
Solves the Sylvester equation 
AX + XB = C 
where A and B are square 
matrices. 
X = SYLD(A,BrC) 
Solves the "discrete" Sylvester 
equation 
AXB - X = C. 
X = LYPC(A,C) 
Solves the Lyapunov equation 
A*X + XA = C 
(A* is the conjugate transpose 
of A) . 
X = LYPD(A,C) 
Solves the discrete Lyapunov 
equation 
A*XA - X = C. 
Controllability/Observability Analysis and 
Reduction into Orthogonal Canonical Form 
For a linear continuous 
x = Ax + Bu 
y = Cx 
and discrete 
xk +1 = A x k + B u k 
y k = 
C x k 
system, the functions 
NC = NCON(A,B) 
NO = NOBS(A,C) 
determine the dimension of the controllab-
le, resp. observable, subspace of the 
system. 
The reduction into orthogonal controllable 
canonical form (Konstantinov, Petkov and 
Christov, 1982) 
A 
= U*AU 
c 
A 2 i : 
, P/P-1 [ P 
B 
= U*B 
c 
where U is an unitary matrix, is perfor-
med by the function 
<AC,BC> = FCON(A,B) 
the matrices A 
and B 
being stored in 
c 
c 
^ 
the variables AC and BC. 
The function 
<AO,CO> = FOBS(A,C) 
is used to obtain the orthogonal observab-
le canonical form of the system. 
If the transformation matrix which reduces 
the system into canonical form is required, 
these functions are used in the form 
<U,AC,BC> = FCON(A,B) 
<U,AO,CO> = FOBS(A,C). 
In case the system is not completely con-
trollable/observable its stabilizability/ 
detectability may be checked by determi-
ning the eigenvalues of the uncontrollable/ 
unobservable part of the system matrix 
using the MATLAB function EIG. 
Example 1. The following part of a dialog 
with SYSLAB illustrates the reduction of a 
4th order system into orthogonal controlla-
ble canonical form. 
3. - 2 . 
5. 1. 
-1 . 3. 
-2. -3. 
B = 
2. -1. 
-6. 
1. 
-2. 
4. 
3. 8. 
4 
-4 
-6. 
-8. 
<U,AC,BC> = 
BC = 
0.8835 
7.2263 
0.0000 
0.0000 
9. 
0. 
0. 
0. 
7. 
-2. 
7. 
1 . 
= FCON(A,B) 
0554 
0000 
0000 
0000 
AC = 
-1.9390 4.6841 
3.3393 0.9439 
-8.8919 -1.9597 
0.0000 3.5065 
9.0572 4.2995 
-0.1298 -5.6317 
-0.6777 -3.4959 
-4.3211 
0.6728 

SYSLAB 
169 
U 
-0.1104 
0.2903 
0.1104 
-0.8438 
0.4417 
-0.3308 
0.8835 
0.3071 
-0.6990 
0.6442 
0.1061 
0.5143 
-0.6676 
- 0 . 4 9 9 7 
0.2332 
0.2661 
Pole Assignment Synthesis 
The gain matrix K of the control law 
u = -Kx, 
corresponding to the desired poles stored in 
the vector W, is obtained by the function 
K = POLS(A,B,W). 
After the synthesis the actual eigenvalues 
of the closed-loop system matrix may be 
found by 
EIG(A-B*K). 
Example 2. This example demonstrates pole 
assignment synthesis for the system consi-
dered in Example 1. 
W = 
-1 .0000 + 1.0000Î 
-1 .0000 - 1.0000Î 
-2.0000 + 0.0000Î 
-3.0000 + 0.0000Î 
K = POLS(A,B,W) 
-0.2159 -0.0647 -0.9413 0.7208 
-0.2005 -0.0600 -0.8741 
0.6693 
EIG(A-B*K) 
ANS = 
-1 .0000 + 1 .0000i 
-1 .0000 - 1.0000Î 
-3.0000 + O.OOOOi 
-2.0000 + O.OOOOi 
The function POLS may be used also for 
synthesis of full order observers, working 
with matrices A*, C* instead of A, B. 
Synthesis of Optimal Systems and Solution 
of the Matrix Riccati Equations 
In the continuous-time case the control law 
u = -Kx 
is determined so that to minimize the 
quadratic cost 
oo 
J = i(x*Qx + u*Ru)dt. 
0 
The optimal gain matrix 
K = R~1B*P 
where P is the positive (semi) definite 
solution of the Riccati equation 
A*P + PA + Q - PBR~ B*P = 0 
is obtained by the function 
K = RICC(A,B,Q,R). 
The closed-loop system matrix eigenvalues 
may be located in the variable W by 
<K,W> = RICC(A,B,Q,R). 
The full form of this function 
<K,W,P> = RICC(A,B,Q,R) 
allows to get also the solution of the 
Riccati equation. 
In the discrete-time case the quadratic 
cost 
J = Z _ <x£Qx
k
 + uk R uk ) 
is minimized taking the gain matrix as 
K = (R + B*PB)~1B*PA 
where P is the positive (semi) definite 
solution of the discrete Riccati equation 
A*PA - P + Q - A*PB(R + B*PB)~1B*PA = 0. 
In SYSLAB this is done simply by 
K = RICD(A,B,Q,R). 
The extended forms of this function, 
<K,W> = RICD(A,B,Q,R), 
<K,W,P> = RICD(A,B,Q,R) 
allow to obtain the closed-loop eigenvalues 
and the solution of the discrete Riccati 
equation. 
Example 3. Consider the synthesis of opti-
mal continuous system using the function 
RICC. The system matrices A, B are as 
in the Examples 1 and 2. 
Q = 
1. 0. 0. 0. 
0. 1. 0. 0. 
0. 0. 1. 0. 
0. 0. 0. 1. 
1 . 0. 
0. 1. 
<K,W,P> = RICC(A,B,Q,R> 
P = 
0.7514 0.1587 -0.0181 
0.3170 
0.1587 0.1914 -0.0079 0.0159 
-0.0181 -0.0079 
0.1150 -0.0375 
0.3170 0.0159 -0.0375 0.2827 
W = 
-7.4618 - 8.5474i 
-7.4618 + 8.54741 
-6.1121 - 4.3563Î 
-6.1121 + 4.3563Î 
K = 
1.5375 -0.7672 -0.3311 
1.4618 
1.8708 0.1279 0.1702 1.8106 
The functions RICC and RICD may be used 
also for synthesis of optimal filters. 

170 
P. H. Petkov, N. D. Christov and M. M. Konstantinov 
Discretization and State Vector Determination 
The matrices of a discrete model of a con-
tinuous system for a discretization inter-
val DT are obtained by 
<AD,BD> = DSCR(A,B,DT). 
For given initial condition X0 the solu-
tion for the state vector is found in the 
continuous-time case by 
VECC(A,X0,DT,L) 
and in the discrete-time case by 
VECD(A,X0,L) 
where L is the number of the points for 
which the solution should be obtained. 
Additional functions will be included in 
SYSLAB for synthesis of reduced order 
observers and dynamic compensators. 
THE NUMERICAL ALGORITHMS 
As mentioned above, only numerically stable 
computational algorithms are implemented in 
SYSLAB. The using of complex versions of 
the algorithms to ensure compatibility with 
the programs implemented in MATLAB allows 
also to obtain programs that are considera-
bly shorter than in real arithmetic. 
The continuous Sylvester and Lyapunov equa-
tions are solved by the algorithm of 
Bartels and Stewart (1972). The algorithm 
of Golub, Nash and Van Loan (1979) is in 
some cases more efficient but requires a 
longer program. The discrete equations are 
solved by the algorithm of Barraud (1977). 
A modification of these algorithms provi-
des the solution of all four equations by 
three subroutines only. 
The reduction into orthogonal canonical 
form and the controllability/observabi-
lity analysis is performed by the algorithm 
described in (Konstantinov, Petkov and 
Christov, 1982). For this purpose QR decom-
position with column pivoting (Dongarra and 
others, 1979) is used. If only the dimen-
sion of the controllable/observable sub-
space is required the unitary transforma-
tions are not accumulated. 
The pole assignment synthesis is done by 
the algorithm proposed in (Petkov, Christov 
and Konstantinov, 1984b, 1984c). It inclu-
des a preliminary reduction of the system 
into orthogonal canonical form. Since comp-
lex arithmetic is used the real and complex 
poles are treated in the same manner. 
The solution of the continuous Riccati 
equation is obtained by the algorithm of 
Laub (1979). The ordering of the Schur 
form of the Hamiltonian matrix is done 
easily in complex arithmetic using the 
programs developed by Stewart (1976). 
The discrete Riccati equation is solved by 
the corresponding generalized eigenvalue 
problem formulation as proposed in (Pappas, 
Laub and Sandell, 1980), (Walker, Emami-
Naeini and Van Dooren, 1982). The complex 
version of the QZ algorithm for solving 
the generalized eigenvalue problem is 
realized by the programs described in 
(Garbow, 1978). The ordering of thie upper 
triangular form of the generalized eigen-
value problem is done as suggested in 
(Van Dooren, 1982), (Petkov, Christov and 
Konstantinov, 1984a). The solution of the 
discrete Riccati equation by the inverse 
generalized eigenvalue problem as proposed 
in (Walker, Emami-Naeini and Van Dooren, 
1982) is not to be recommended since it 
may be very ill conditioned and time con-
suming. 
The discretization of a continuous system 
and the determination of the state tran-
sition matrix is done by the algorithm of 
Ward which is one of the best among avai-
lable algorithms. The algorithm implemen-
ted in MATLAB is not used since it explo-
its the eigenvector matrix which may be 
very ill conditioned in some cases. 
All programs are written in Fortran using 
double precision. The system is installed 
on VAX-11/750 (for problems of order 100 
or more) and, for lower order systems, on 
PDP-11/40. 
CONCLUSIONS 
An interactive system called SYSLAB 
intended to the computer-aided analysis 
and design of linear control systems is 
briefly described. SYSLAB gives an easy 
access to the recent powerful computatio-
nal algorithms for linear multivariable 
systems as well as to the up-to-date high 
quality software for matrix computations. 
The system is portable and may be used 
for solving high order and ill conditio-
ned problems. 
REFERENCES 
Barraud, A.Y. (1977). A numerical algo-
rithm to solve ΑΤχΑ - X = Q. IEEE 
Trans.Automat.Contr.,AC-22,883-885. 
Bartels, R.H., and G.W. Stewart (1972). 
Solution of the matrix equation AX + 
XB = C. Comm.ACM, 15,820-826. 
Dongarra, J.J., J.R. Bunch, C.B. Moler, 
and G.W. Stewart■(1979).LINPACK User's 
Guide. SIAM, Philadelphia. 
Garbow, B.S.(1978). The QZ algorithm to 
solve the generalized eigenvalue prob-
lem for complex matrices. ACM Trans. 
Math.Soft. , j^,404-410. 
Garbow, B.S., J.M. Boyle, J.J. Dongarra, 
and C.B. Moler (1977) . Matrix Eigen-
system Routines-EISPACK Guide Exten-
sion. Springer-Verlag, Berlin. 
Golub, G.H., S. Nash, and C. Van Loan 
(1979). A Hessenberg-Schur method for 
the problem AX + XB = C. IEEE Trans. 
Automat.Contr., AC-24,909-921. 
Gregory, Ch.,Jr., S. Shah, and R. Walker 
(1982). MATRIXX: Application to large 
space structure control design prob-
lems. Proc. 21st IEEE Conf.Dec.&Contr., 
Flo.,Dec.1982,pp.912-917. 
Konstantinov, M.M., P.Hr. Petkov, and N.D. 
Christov (1982). Orthogonal invariants 
and canonical forms for linear multi-
variable systems. Proc.8th IFAC Congr. 
(Kyoto,Aug.1981),vol.3,Pergamon, 
Oxford,pp.49-54. 
Laub, A.J. (1979). A Schur method for 
solving algebraic Riccati equations. 
IEEE Trans.Automat.Contr., AC-24, 
913-921. 

SYSLAB 
171 
Little, J.N., A. Emami-Naeini, and S.N. 
Bangert (1984). CTRL-C and matrix 
environments for the computer-aided 
design of control systems. Proc.6th 
Internat.Conf.Anal.&Optimization of 
Syst., Nice, June 1984, part II, 
Springer-Verlag, Berlin,pp.191-205. 
Moler, C.B. (1982). MATLAB User's Guide. 
Dept.of Comp.Sci., University of New 
Mexico. 
Pappas, T., A.J. Laub, and N.R. Sandell 
(1980). On the numerical solution of 
the discrete-time algebraic Riccati 
equation. IEEE Trans.Automat.Contr., 
AC-25,631-641. 
Petkov, P.Hr., N.D. Christov, and M.M. 
Konstantinov (1984a). Remark on Algo-
rithm 590. ACM Trans.Math.Soft.,10, 
207. 
Petkov, P.Hr., N.D. Christov, and M.M. 
Konstantinov (1984b). A computational 
algorithm for pole assignment of linear 
single-input systems. IEEE Trans. 
Automat.Contr.,AC-29,1045-1048. 
Petkov, P.Hr., N.D. Christov, and M.M. 
Konstantinov (1984c). A computational 
algorithm for pole assignment of linear 
multi-input systems. Proc. 23rd IEEE 
Conf.Dec.&Contr.,Las Vegas,Dec.1984. 
Smith, B.T., J.M. Boyle, J.J. Dongarra, 
B.S. Garbow, Y. Ikebe, V.C. Klema,C.B.Mo-
ler (1976). Matrix Eigensystem Routines-
EISPACK Guide. Springer-Verlag,Berlin. 
Stewart, G.W. (1976). HQR3 and EXCHNQ: 
Fortran subroutines for calculating and 
ordering the eigenvalues of a real upper 
Hessenberg matrix. ACM Trans.Math.Soft., 
2,275-280. 
Van Dooren, P. (1982). DSUBSP and EXCHQZ: 
FORTRAN subroutines for computing defla-
ting subspaces with specified spectrum. 
ACM Trans.Math.Soft., 8,377-382. 
Walker, R.A., A. Emami-Naeini,P.Van Dooren 
(1982). A general algorithm for solving 
the algebraic Riccati equation. Proc. 
21st IEEE Conf.Dec.&Contr.,Flo.,Dec. 
1982,pp.68-72. 
Ward, R.C. (1977). Numerical computation 
of the matrix exponential with accuracy 
estimate. SIAM J.Numer.Anal.,14,600-610. 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INTERACTIVE PROGRAM PACKAGE ANA 
FOR SYSTEM ANALYSIS AND CONTROL 
DESIGN 
M. Sega*, S. Strmcnik*, R. Karba** and D. Matko** 
* University Edvard Kardelj, Institute "Jozef Stefan", Jamova 39, 61000 
Ljubljana, 
Yugoslavia 
**University Edvard Kardelj, Faculty of Electrical Engineering, Trzaska 25, 
61000 Ljubljana, 
Yugoslavia 
Abstract. The work contains a brief description of an interactive pro-
gram package ANA which can be used as a tool for analysis and design of 
system control. It is designed for linear, time invariant, univariable or 
multivariable, continuous or discrete systems. It can be of great help in 
all steps of control design. The usefulness of the package is shown espe-
cially through the great interactiveness of programming which enables fast 
and simple work for different users which are familiar with system theory. 
For communication the simplest dialogues are used but they are not tedious 
and time consuming for experienced users because indirect running (BATCH) 
of the package is possible to repeat the whole design procedure with chan-
ged parameters or to repeat a part of the procedure and then proceed in 
direct way. Program package is built modularly so that its development is 
easy. All programs are written in program language FORTRAN-IV what ena-
bles simple transfer of the package to different computer configurations. 
In the future some additional extensions are foreseen like introducing di-
gital simulation language in the package and some other approaches to the 
controller design. This will ensure greater capabilities of the package 
also in the sense of nonlinear systems treatment. 
Keywords. Control theory; computer aided design; computer software; 
interactiveness; system presentations. 
INTRODUCTION 
Over the last decade a large amount of work 
was devoted to the development of computer-
aided-design tools (Frederick, 1982) becau-
se it is obvious that the variety of con-
trol methods and algorithms is so wide that 
an engineer could not master both areas i. 
e. the control theory and the necessary 
programming. Computer-aided-design packa-
ges are based on the idea of combining en-
gineer 's intuition and digital computing 
facilities (Astrom, 1983) as it can be seen 
from the available literature (Bingulac, 
Farias, 1977; Emami Naeini, Franklin, 1981; 
Eugene, 1982; Furuta, Kajiwara, Tsuruoka, 
1979; Polak and others, 1982; Walker, Gre-
gory, Shah, 1982). 
Nowadays so called interactive program pac-
kages for computer aided design (CAD) re-
present the highest level of digital com-
puter usage. Program sequences for the con-
crete area are namely integrated. So sys-
tem engineers can simply use them because 
the work is interpretatively oriented .Users 
correspondingly choose appropriate operati-
ons and the package executes their numeri-
cal parts. Of course the user must be fa-
miliar with the implemented methods and 
with the way of the work with the package. 
The latter needs relatively short time in 
comparison with the amount of work requi-
red without such a tool.Usage of CAD packa-
ges however stresses the engineers' under-
standing and knowledge of control theory 
as well as their intuition and experiences. 
The essential contributions of CAD packa-
ges can be summarized as follows: 
- There is no need to waste a time with 
programming. 
- The time for solving the problem is signi-
ficantly shortened. 
- The data treatment is simplified especi-
ally for large scale systems. 
- Quick comparison of different design prin-
ciples is enabled. 
- The packages can be of use to wide spec-
trum of system experts (scientists, en-
gineers and students) and they extend 
their knowledge (Agathoklis and others, 
1979) . 
- The properties of subroutine libraries 
remain unchanged and so the programming 
of new, more complex methods is enabled. 
The aim of the work is to introduce program 
package ANA for analysis and design of sys-
tem control (êega, 1984a, 1984b). It is 
designed for linear, time invariant, uni-
variable or multivariable, continuous or 
discrete systems. The fundamental princi-
ples for computer aided design software 
development were taken into account, name-
ly the package modularity, flexibility, in-
teractiveness and portability (Wieslander, 
1979). It includes all necessary operati-
ons from control theory (transformations, 
analysis, synthesis) and appropriate I/O 
173 

174 
M. Sega et al. 
facilities. The usefulness of the package 
is shown especially through the great in-
teractiveness. In our opinion the simplest 
man-machine dialogues in connection with 
BATCH processing are appropriate for dif-
ferently skilled users as well as for edu-
cational purposes. 
CAPABILITIES OF ANA 
Figure 1 shows the information scheme of 
the program package which includes all ne-
cessary units (blocks) from the control 
theory: 
- transformations between different system 
presentations as well as conversions of 
some presentations in other forms (e.g. 
canonical forms), 
- analysis and verification of systems, 
- synthesis of control systems and simu-
lation. 
Besides the operations from control theory 
the package consists also input and output 
operations. The input block enables genera-
tion of the internal data base on the basis 
of apriori knowledge about the system. On 
the one hand the output function is the 
presentation of simultaneous results inside 
OLD USERS' 
FILES 
PROGRAMS FOR 
DATA BASE 
GENERATION 
PROGRAMS FOR 
TRANSFORMATIONS 
PROGRAMS FOR 
ANALYSIS 
PROGRAMS FOR 
SYNTHESIS 
PROGRAMS FOR 
DATA BASE 
PRESENTATION 
FILES-RESULT 
of GENERATION 
irTRANSFORM 
FILES-RESULT 
of SYNTHESIS 
V^_\ ··.· d 
Fig. 1. Information scheme of program package ANA 
the programs and the presentation of the 
contents of resultant files through the 
output block. On the other hand the out-
put function is so called protocol file 
which saves all correct commands and data 
in the same order they have been entered 
during the work with the package. 
Representations of Systems 
All operations in the package are founded 
on following presentations of multivaria-
ble systems and they are appropriate coded 
for the interactive work: 
a) in time domain 
- sampled data series of inputs and outputs 
(TTI), 
- series of self and cross correlation func-
tions (TKF)1, 
- discrete system response on step inputs 
(TST)1, 
- discrete system response on pulse inputs 
(TIM)λ, 
b) in frequency domain 
- frequency spectrum of inputs and outputs 
(TFT)1, 
- transfer function matrix for continuous 
systems (TGS), 
- tranfer function matrix for discrete sys-
tems (TGZ), 

Interactive Program Package 
175 
From the users point of view the most 
important is the interactive way of ge-
neral control structure definition on 
the (semi) graphical terminal. In the 
package it is realized rather simple 
on the basis of fixed general control 
structure and simple substructure and 
their specific connections. Through the 
interactive definition the data base 
for so called universal computer simu-
lation program (UNICUS) is built. On it 
basis UNICUS creates adequate program 
for simulation of the treated system. 
As an illustration we give a simple ex-
ample of interactively defined structu-
re in Appendix. 
In the up-to-date version of the package 
univariable (PID and generalized deadbeat) 
and multivariable optimal state space con-
troller in connection with Kaiman estima-
tor can be designed. 
INTERACTIVE CAPABILITIES 
For the man-machine communication the sim-
plest dialogues are used. They are question 
and answer dialogue, dialogue using mnemo-
nics and menu selection dialogue. Because 
they are well known, we describe only the 
specific way of work with the internal da-
ta base and possibility of BATCH processing 
with the package. 
Files - Data Base 
Files that contain system data are results 
of the operations. In regard of system re-
presentation they differ by their contents 
and because of that their extensions of the 
name are equal to the described codes of 
system presentations. 
The file which is the result of concrete 
operation has the same whole name (name 
and extension) in all executions of this 
operation. Because there is a danger of 
deleting some usefull files by repetitive 
executions of the same operations the in-
teractive change of the file name (only 
the name, the extension reamins the same) 
is realised after each operation that ge-
nerates new file. 
For the specific operation predefined form 
of system data,a file with defined exten-
sion is needed of course. 
So the pac-
kage searches for files with that extensi-
on and user decides which one among them 
is appropriate. 
So organized work is senseful only if the 
package considers only the user's files 
from current running. For that reason the 
deleting of files with described extensi-
ons is realized at the beginning of the 
work. 
Batch Processing 
Batch processing is based on protocol file 
which contains all commands and data that 
have been used in previous treatment by 
the package. This file should be only ap-
propriate corrected and then used as so 
called input batch file. 
The elementary possibilities of batch pro-
cessing are: 
- repetition of the unchanged procedure, 
- repetition of the whole procedure for 
changed parameters, 
- repetition of a part of procedure by batch 
processing and than continuation in the 
direct way, 
- documentation of the communication of the 
procedure. 
PROGRAM ORGANIZATION 
As it is shown in Fig. 1 the package is di-
vided in several independent programs that 
are linked together with the interpreter 
program which enables also the choice of 
concrete operation. This characteristic and 
the fact that we store the internal data ba-
se on disks ensures a great modularity of 
the package. 
All programs are written in standardized 
program language FORTRAN-IV and this besi-
des the described fundamental organization 
enables relatively simple transfer of the 
package to computers with small dimensions 
of the memory. 
In this moment the package is implemented 
on minicomputer PDP 11/34 with RT11-SJ ope-
rating system. The computer has 64k byte of 
memory, two disks RK05J and appropriate I/O 
devices (graphical terminal VT40 or semigra-
phical terminal KOPA-1000, printer FACIT 
4542 and analogue plotter HP7045B). 
Software of the up-to-date version is divi-
ded according to the function in: 
- (sub)programs of the interpreter (cca 35), 
- (sub)programs for specific complex opera-
tions (cca 100), 
- subroutines for linear algebra (cca 15), 
- subroutines of common meaning for all 
(sub)programs (for the input of data? 
in connection with internal data base 
and protocol file; etc) (cca 10), 
- libraries of subroutines for graphics on 
the terminal and plotter (cca 20). 
A relative small size of memory dictates 
following limitations for systems: 
- The number of inputs and outputs is not 
bigger than 10. 
- The order of polynomials in transfer func-
tion matrix is less than 11. 
- The order of the system in state space 
representation is not bigger than 20. 
- The number of samples in I/O time series 
is not bigger than 400. 
CONCLUSION 
As it can be seen from the paper the up-to-
date version represents only the part of 
our main project. The experiences with the 
package show that its concept and program 
organization ensure simple extensions and 
modifications. Batch running enables com-
fortable work also for experienced users 
in spite of the simple dialogues which are 
on the other hand suitable for unexperien-
ced users. Relatively poor computer equip-
ment will probably involve some problems 
concerning necessary extensions of the pac-
kage so we already think about its transfer 
to more capable computer. 
In the near future some extensions are fo-
reseen like introducing digital simulation 
language what will result in ANA's greater 
capabilities in the sense of nonlinear systems 
treatment. We shall also include some other ap-
proaches to the controller design which ha-
ve been already developed and programmed in 
the past. So they require only some modi-

176 
M. Sega et al. 
- discrete frequency response (TGF) , 
c) state space description 
- for continous systems (TMS), 
- for discrete systems (TMZ), 
d) special representations based on 
simulation 
- physical system model (real model or ana-
logue computer)1, 
- model realized by digital simulation 
1 , 
- so called user's block (subroutine). 
Trans formations 
Among described different system represen-
tations there are distinguished direct and 
indirect transformations as well as tran-
formations between different forms. It is 
also obvious that some transformations bet-
ween foreseen system descriptions are not 
realizable by digital computer. 
Table 1 qualifies the transformations bet-
ween different system presentations that 
are installed in the package in this mo-
ment. In table 1 some direct transformati-
ons are presented with special names that 
are well known in control theory, and the 
others with simple notation "direct". Trans-
formations which give modifications of the 
same presentation are not included in the 
table because of their specificity. 
TABLE 1 Overwiev of tranformations between different system representations 
Nv 
to 
f rorvv 
TTI 
TGS 
TGZ 
TMS 
TMZ 
TBL 
TTI 
through TGZ* 
simulation 
through TMZ* 
simulation 
simulation 
TGS 
through TGZ 
direct 
direct 
through TGZ 
or TMS 
through TTI 
TGZ 
identifica-
tion 
discretiza-
tion 
through TMZ 
or TGS 
direct 
through TTI 
TMS 
through TMZ 
direct 
through TGS 
or TMZ 
direct 
through TTI 
TMZ 
identifica-
tion 
through TGZ 
or TMZ 
direct 
discretiza-
tion 
"
^
\
^ 
through TTI 
TBL 
through TGZ 
^
-
^ 
in this version; exactly by digital simulation 
Analysis 
Block for analysis enables stability, con-
trollability, observability and cyclicity 
tests of systems as well as rank, norms, 
eigenvalues and eigenvectors computation 
for systems presented in state space. 
For continuous systems presented with trans-
fer function matrix Bode, Nyquist and Root-
locus plots are included in the package. 
For verification of system model or control-
led system the comparison of sampled data 
series and/or computed time responses can 
be realized giving also some statistic per-
formances . 
Synthesis 
In the block for synthesis there are two 
possibilities : 
a) Figure 2 shows the maximal structure for 
continuous or discrete linear time inva-
riant control system treatment. In the 
concrete case user defines interactive-
ly the substructure, the only condition 
is that single parts of complex system 
(blocks) are presented in state space. 
The result of the operation is the sys-
tem described in state space that is 
equivalent to the control system accor-
ding to input output behaviour. 
b) The simulation of general system struc-
ture including precompensators, casca-
de, feedback and feedforward controllers 
as well as corresponding observers or es-
timators. For this treatment it is sup-
posed that the process is presented with 
one of following descriptions: 
reg 1 o 
reg 2 
process 
reg 3 
Not yet installed 
Fig. 2. Maximal structure for linear time 
invariant control system treatment 
- in state space (TMZ or TMS 1), 
- with transfer function matrix (TGZ or 
TGS 1), 
- by physical model (TMO1), 
- model realized with digital simulati-
on (TSI1), 
- with user's block (TBL). 
Because of the frequency of optimal pro-
blems the possibility of parameter esti-
mation is included in the treatment of 
general system structure. It is based 
on some standardized criterion functions 
and some installed optimization algori-
thms. Both criterion function and optimi-
sation algorithm can be also written by 
users. 

Interactive Program Package 
177 
fications. These approaches are multivaria-
ble controllers based on the pole placement 
methods, decoupling and inverse Nyquist ar-
ray technique in combination with corres-
ponding observers and some adaptive control-
lers in connection with appropriate identi-
fication methods. 
REFERENCES 
Agathoklis,P., F.E. Cellier, M.Djordjevic, 
P.O. Grepper and F.J. Kraus (1979). Edu-
cational aspects of using computer ai-
ded design in automatic control. Proc. 
IFAC Zürich Symp., 441-446. 
Astrom, K.J. (1983). Computer aided, analy-
sis and design of control system-a per-
spective. Control Systems Magazine, 
Vol.3, No. 2, 4-16. 
Bingulac, S., and M.A. Farias (1977). L-A-
S language and its use in automatic 
control education and research. Auto-
matika, Vol. 5-6, 213-224. 
Emani-Naeini, A., and G.F. Franklin (1981). 
Intercative computer-aided design of 
control systems. Control Systems Maga-
zine, Vol.1, No. 4, 31-36. 
Eugene, A.L. (1982). LCAP2-linear controls 
analysis program. Control Systems Ma-
gazine, Vol. 2, No. 4, 15-18. 
Frederick, D.K. (1982). Software summari-
es on computer aided control system 
design software packages. Control Sys-
tems Magazine, Vol. 2, No. 4, 37-44. 
Furuta, H., H. Kajiwara and K. Tsuruoka 
(1979). Computer aided design pro-
gram for linear multivariable control 
systems. Proc. IFAC Zurich Symp., 
267-272. 
Polak, E., P. Siegel, T. Wuu and W.T. Nye 
(1982). DELIGHT. MIMO: An interactive, 
optimization-based multivariable con-
trol system design package. Control 
Systems Magazine, Vol. 2, No.4, 19-24. 
Sega,M.,S. Strmcnik and J. Öretnik (1984a). 
Analysis and synthesis of systems with 
program package ANA-1. Proc. ETAN Split 
Yugoslavia, Vol. 4, 35-42 (in Slovene). 
âega,M. (1984b). Computer aided analysis 
and control design of dynamical sys-
tems. Faculty of Electrical Engineering 
Ljubljana, Yugoslavia (work for M.S. 
degree in Slovene). 
Walker, R., C.Gregory and S. Shah (1982). 
MATRIXX: A data analysis, system iden-
tification, control design and simula-
tion package. Control Systems Magazine, 
Vol. 2, No. 4, 30-37. 
Wieslander, J. (1979). Design principles 
for computer aided design software. 
Proc IFAC Zurich Symp., 493-496. 
APPENDIX 
Exajnple 1 
A simple system which is given by: 
G(s) = —
^ 
5 
l+l4s+40s 
was treated to illustrate the work with ANA. 
First the analysis in frequency domain was 
undertaken and as illustration only root 
locus diagram is shown in Fig. 3. Then the 
system was transformed to the state space 
> stevilo 
■arkirnih 
tock 
( NM > 
(ce »arkerJev ne zelisr pritisni tipko <CR> ) : 
> marker pri oJacenJu » K( 1) = 
9t9999987E-02 
K( 2) « 
1.000000 
K( 3) » 
2-.ÛÛÛÛC0 
> kodaf ki doloca nadalJevanJe 
obravnave 
(ce kode ne POznae»pritieni Ü P k o <CR>) : 
CON 
t> t 
i y » g * 
i? 4· 
H — I Q I I I I — I — h I· > 
Pod rocje oJacenJa · 
0.0000 
Obmocje abscise 
= 
-0.4000 
Obdiocje ordinate 
■ 
-0.7000 
02.00 
1.000 
0.7000 
ENOTA = 
ΕΝ0ΤΑ » 
0.1000 
0.1000 
Fig.3. Root locus diagram 
and controllability and observability was 
tested. Discretized system was then simu-
lated (Fia.4). 
H 
I I *-
H 
*-
T*in » 
Y»in ■ 
0.0000 
-0.1017 
T·.* -
Y e ax « 
100.0 
1.000 
t enota = 
1 enota = 
10. 
0.10 
Fig.4. Open loop system 
The simulation of closed loop system with 
appropriate PID controller 
G(z) 
5.958-10.337z"1+4.492z 2 
l-z-1 
is shown in Fig. 5. Though in Slovene the 
listing of the part of communication (the 
definition of closed loop simulation) is 
given in Fig. 6 as illustration. 
Example 2 
Figure 7 shows a regulation scheme for 
univariable process and Fig. 8 which is s 
photo of the semigraphical terminal shows 
the final step of the interactive defini-
tion of the structure inside the package. 

178 
M. Sega et al. 
SINTE: 
*TMZ 
"7* 
-| 
1 
1 
*-
H 
1 
1 
·- H 
1 
T*in - 
0.0000 
T*ax * 
100.0 
t enota = 
10. 
1min - 
-0.4751 
Y»ax » 
1.023 
i enota = 
0.10 
Fig. 5. Closed loop system simulation 
As it can be seen the main control struc-
ture on Fig. 9 is rather simplified for 
this case and two additional substructu-
res are included in Fig. 8 to realize the 
discussed regulation. It is necessary to 
stress that the scheme in Fig. 8 is only 
one of several possible definitions of 
structure for treated system and it as-
sume that the block Ml changes a sign of 
the signal and that the transfer function 
of the block M2 is (G ,(s)-l). 
> koda obliketv katero zelis transforairati 
zapis v prostoru stanJ - diskretno - 
TMZ 
(ce kode ne poznasr pritisni tipko <CR> ) * 
TTI 
> datotekat ki Jo zelis uporabiti 
(samo IMErker Je EXT. default-TMZ) 
(ce ne zelis nobene» pritisni tipko <CR>) 
SISTEM 
PROCES 
REGUL 
: SISTEM 
> vsaJ en vhodni sianal Je podan v datoteki *.TTI 
(ni eden izned standardnih sidnalov) (Da all Ne) 
N 
> koaentar za datoteko DK2ÎTRHZTI.TTI (do 62 znakov) : 
SIMULACIJA REGULACIJSKE ZANKE ( VH0D-ST0PNICA ) 
> i»e 
1. reauliraneaa 
vhoda 
: 
VH0D 
> i«e 
1. izhoda : 
IZH0D 
> cas traJanJa siftulaciJskeda teka ( Tf ) t 
100.0000 
V DATOTEKO SE VPISE VSAK "Ι·-ΤΧ IZRACUN 
( cas vzorcenJa v datoteki: I* 
1.0 
) 
> PodaJ parameter za vpis v datoteko ( I ) 
( pritisni tipko <CR>» ce zelis 1
*
1
)
: 
1 
> zacetne vrednosti spremenlJivk stanJa ( Xi(0)ri=lr 4 ) : 
0.0000 
0.0000 
0.0000 
0.0000 
> koda sianala za vhod 
VHOD 
(ce kode ne poznastpritisni tipko <CR>) 
: 
ST 
> aoiPlituda stopnice ( AM ) 
: 
1.000000 
> zacetni cas ( TZ ) C sek 3 
: 
0.0000000 
Fig.6. The part of communication (in Slo-
vene) 
> 
e 
—o— GR 
U 
G« -*o 
v. 
| 
i — 
UP 
GP2 
Q ; " 
y 
Fig.7. Regulation of univariable process 
Fig. 9. Fixed general control structure 
used at the beginning 
Fig. 8. Interactively defined structure for the system 

Copyright © IFAC Computer Aided Design in Control 
SPECIALISED CAD PACKAGES 
and Engineering Systems, Lyngby, Denmark, 1985 
TDP — A DISTIBUTED PARAMETER SYSTEMS 
SIMULATOR 
Matti Aaltonen, Juha Tanttu* and Seppo Pohjolainen 
Tampere University of Technology, Department of Mathematics, PO Box 527, 
SF-33101 
Tampere 10, Finland 
Tampere University of Technology, Department of Automatic Control, PO Box 527, 
SF-33101 
Tampere 10, Finland 
Abstract. A simple and easy - to - use computer simulator for distributed 
parameter systems is presented. The simulator is able to treat parabolic and 
elliptic systems in two-dimensional domains. Two examples are given to 
demonstrate the use of the simulator. 
Keywords. Distributed parameter systems; computer sofware; PID control; 
simulation. 
INTRODUCTION 
Many important industrial processes can 
quite accurately be modelled with partial 
differential equations (PDE). These 
models - usually called distributed para-
meter systems (DPS) - are often based on 
specific physical, chemical, biological etc. 
laws, and therefore they are accurate and 
the parameters, such as temperature, 
pressure, concentration, etc. are spa-
tially distributed and have a clear physi-
cal meaning. From the control point of 
view an important advantage also is that 
location of measurements and controllers 
becomes a natural part of a control prob-
lem. 
Although distributed parameter systems 
have certain benefits, they have not been 
so popular among control engineers. This 
is certainly due to the fact that existing 
control theory is finite-dimensional by 
nature and prefers systems with finite-
dimensional state spaces or rational 
transfer functions. 
However, during the 1970's and 1980's 
theoretical means to control DPS have 
rapidly increased and they include e.g. 
observer theory (Bhat, 1976), finite-
dimensional compensators, (Curtain, 1984), 
(Schumacher, 1983), robust controllers 
(Pohjolainen, 1982) and transfer function 
algebras (Callier, Desoer, 1978). The need 
to simulate DPS arises naturally from both 
theoretical and practical needs. 
TDP - A DISTRIBUTED PARAMETER 
SYSTEMS SIMULATOR 
The purpose of this work was to produce 
a reliable, flexible, easy - to - use 
DPS - simulator that could be run at a mini-
mum programming cost with various PDE 
models. Thus it was quite natural to start 
by looking for a suitable PDE - software 
to actually solve the process model equa-
tions. Our selection was to use a commer-
cially available PDE-solver, called 
179 
TWODEPEP, produced by IMSL (TFODEPEP, 1982). 
This program has certain advantages e.g. 
- to minimize programming effort it con-
tains a preprocessor which transforms 
the original problem description 
"Input Data Set" file into FORTRAN. 
- it uses finite-element method with auto-
matic user- controlled mesh refinement 
- the description of boundaries is easy 
- graphical output (3-D surfaces and 
vector fields) 
- it is possible to solve systems of 
partial differential equations. 
The major limitations of TDP - simulator, 
due to TV70DEPEP, are that 
- only parabolic and elliptic systems in 
two dimensional domains are allowed 
- in general separate partial differential 
equations must have the same domain. 
For a system of two equations the most 
general form is 
(^(x^u^t)-^ - -3£oxx (x/Y'u
x/Uy/Vx/vv,u,v,t) 
+ ^ΟΧΥ (x,y,ux,u ,νχ,ν ,u,v,t) 
+ F1 (x,y,ux,uy,vx,vy,u,v,t) 
C2(x,y,u,v,t)|^ = -^OYX (x,y,ux,uy,vx,vy/u,v,t) 
+ -A-OYY (x,y,ux,uy,vx,vy,u,v,t) 
+ F 2 (x,Yrllx,U ,ν χ,ν ,U,V,t) 

180 
M. Aaltonen, J. Tanttu and S. Pohjolainen 
for (x , y) in the region R , with the gen-
eral boundary conditions 
u = FB 1 (s,t) 
v = FB 2 (s,t) , 
for s on a part of the boundary, s G 9 R. , 
and 
OXX · n + OXY · n = GB 1 (s,u,v,t) 
OYX · n + OYY · n - GB 2 (s,u,v,t) 
on 9R 2 , where (n , n ) is the unit normal 
to the boundary. 
The initial conditions are 
u = uO (x,y) 
v = vO (x,y) , t = TO . 
However, TWODEPEP can also solve a single 
eguation or several simultaneous equations 
of the above form. 
Because TWODEPEP, as such, is capable only 
of open loop simulation, the following 
modifications were made to realize feedback 
actions (Fig. 1). 
In general, one has to measure the sol-
ution at specific points, defined by the 
user, and use these measurements with the 
controller to compute control signals. 
To elaborate, TDP consists of the following 
subprograms (Fig. 2 ) . 
The subroutine MIMAAR contains definitions 
of measurement points, dimensions of 
control and measurement vectors. TWODEPEP 
data input file contains CONTROL block as 
a function subroutine. A call to this 
subroutine will result in a call to the 
module MIMAAR to read the time and the 
solution from TWODEPEP at specified points. 
Then MIKIRJ calls CONTROLLER, which com-
putes the actual control values. The con-
trol values are transferred to CONTROL 
module trough the common block. MIKIRJ also 
writes the time instant, control and 
measurement values for plotting. 
Plotting is realized by using GPGS - package 
(GPGS-F User's Guide, 1980), which is more 
versatile than the original TWODEPEP 
plotting program, which is available, too. 
To run a problem with TDP, the user has to 
create two files. First, PROCESS.DAT, which 
contains a description of the process and 
control as a TWODEPEP input data set, and 
second, CONTROLLER. OHJ, to define the 
control algorithm in FORTRAN. When these 
two files are ready, the user may execute 
the simulation by using the following 
commands 
TDPINIT 
- asks the name of the CONTROLLER FILE, 
measurement points and the dimension 
of control vector. 
TDPSOLVE PROCESS 
- creates from PROCESS.DAT a FORTRAN 
program PROCESS.FOR, compiles, links 
and runs the necessary programs. 
TDPOINT 
- plots the controls and measurements as 
functions of time. 
TWOD3DIM 
- plots 3D - surfaces 
TDP IN AN ATTACHED 
PROCESSOR 
So far TDP was used in a VAX 11/780 -
computer at Tampere University of Technol-
ogy. Because execution times for systems 
became rather large, up to ten hours, it 
was quite natural to try to speed up 
computation by using a FPS-164 attached 
processor that was available, too. 
Perhaps the easiest way, to speed up 
a FORTRAN program in FPS-164, is to re-
place possible parts of the program by 
APMATH 6 4 library routines (APMATH Manual, 
1982). This library is written in APAL 64 
(Attached Processor Assembly Language), 
and it contains over four hundred rela-
tively fast mathematical routines. Some 
modules of TWODEPEP could directly be 
replaced by APMATH 64 routines. In addi-
tion, some parts were modified to be bet-
ter prepared for computation in an at-
tached processor (APFTN 64 User's Guide, 
1983). After these improvements TDP became 
about twice as fast as the original VAX -
version. This ratio will even be improved, 
if the size of the programs becomes large, 
especially, if the number of partial 
differential equations to be solved, in-
creases . 
The size of the main memory at our instal-
lation is only 256K words. Thus the heart 
of TWODEPEP - a large linear/nonlinear 
equation solver - typically cannot be 
stored in the main memory. The resulting 
I/O between the main memory and a disk 
file will slow the speed considerably down, 
even though FPS-164 may perform asynchronous 
I/O. With a larger main memory a faster 
TDP version could easily be obtained by 
solving the linear/nonlinear equations 
with APMATH 64 routines. 
EXAMPLES 
Heating a moving sheet 
A sheet is moving through a heating zone 
(Fig. 3) with velocity v . The problem is 
to control, with two Pi-controllers, heat 
flux from the heaters, so that temperature 
at the measurement points (0.2 , 0.8) 
(0.2 , 0.2) will be requlated to 3 5 degrees. 
The values of the parameters are: v = 5 , 
h = 0 , α = 1000 . The initial temperature 
u(x,y,0) = 20 . The TWODEPEP input data 
file with control block (PROCESS.DAT) may 
be seen in Fig. 4. Figure 5 shows that 
CONTROLLER.OHJ file contains two PI-con-
trollers. The results of the run may be 
seen in Figures 6 and 7. 
Control of a nuclear reactor 
This problem originates from (Neboyan, 
Koivo, 1983). Neutron flux in a nuclear 
reactor may be described as 

TDP - A Distributed Parameter Systems Simulator 
181 
k + k^ 
where 
■1 -B 
M2 
at 
_9C 
3t 
. + ~ ν2φ + λ G 
1 
AC 
dt 
+ k^. 
Ot 
φ ( x , y, t ) i s a normalized neutron flux 
c(x,y,t) speed of delayed neutrons 
k.(x,y,t) the effect of tempera-
ture feedback 
The values of the constants were 
,2 
M" = 550 
= 0.0064 
1 = 0.001 
λ = 0.08, T. 
systems with unbounded control and 
observation. SIAM J. Control Opt. 22, 
255-276. 
GPGS - F User's guide 4th. edition (1980). 
NOP.SIGD, TAPIR. 
Neboyan V., Koivo H.N. (1983). Design of 
a neutron flux control system by the 
inverse Nyqvist array method. Int. 
J. Control 37, 535-552. 
Pohjolainen S.A. (1982) . Robust multivari-
able PI - controller for infinite 
dimensional systems, IEEE Tr. Aut. 
Control, AC - 27, 17-30. 
Schumacher J.M. (1983). A direct approach 
to compensator design for distributed 
parameter systems. SIAM J. Control Opt. 
2J_, 823-836. 
TWODEPEP User's manual, (1982). IMSL. 
1.0075 
k Q t = 0.0128 
The domain of the system is a circle 
(reactor form above). The four control 
rods are modelled by gaussian functions of 
the type 
x 2 + y 2 
2o2 
2πσ 
u(t) 
The purpose of a P - controller was to 
stabilize and regulate the system. The 
solutions are seen in Figures 8 and 9. 
Λ % 
J D 
CONTROLLER 
MODULE 
u 
PROCESS 
(TWODEPEP) 
X 
MEASUREMENT 
MODULE 
y 
Fig. 1. A feedback loop. 
CONCLUSIONS 
An easy-to-use, flexible, multipurpose 
simulator for distributed parameters 
systems has been presented. The possibil-
ity to speed up computation with an 
attached processor was discussed. Two 
examples were given to show the perform-
ance of the TDP-simulator. 
In future, the purpose is to develope the 
control module, so that it could include 
e.g. multivariable PID - controllers, 
robust controllers, parametric optimization, 
and transfer function measurement routines. 
ACKNOWLEDGMENT 
The authors thank Mrs. Päivi Kuusisto 
for her careful typing. 
REFERENCES 
APFTN 64 User's Guide (1983). Floating 
Point Systems, Inc., Publication. 
APMATH Manual (1982). Floating Point 
Systems, Inc. 
Bhat, M.K.P. (1976). Regulator theory for 
evolution systems. Ph.d. thesis, de-
partment of Electrical Engineering, 
University of Toronto. 
Callier F.M., Desoer C.A. (1978). An 
algebra of transfer functions for dis-
tributed linear time-invariant sys-
tems. IEEE Tr. Circuits and Systems, 
CAS- 25, 651-662. 
Curtain R.F. (1984). Finite dimensional 
compensators for distributed parameter 
η CONTROL 
H 
TW0KPEP 
f 
SAVE8.DAT J 
( PLOTTING J 
- measurement signals 
- control signals 
• 3 - D figures 
' numerical solution 
► : subroutine call 
► : information transter 
Fig. 2. Program modules of TDP 

182 
M. Aaltonen, J. Tanttu and S. Pohjolainen 
v////////////////\ 
,s-
o ( u , - u ) 
^ - » » » ♦T . g - I * « ^ » - « , , , 
Y////////////////Ä 
- a (u1 - u) 
F i g . 3 . 
A sheet moving trough a h e a t i n g 
zone with p r o c e s s model e q u a t i o n s . 
Eqaatloaa for a aotal plat· «kick ■« 
tkroagk region vkaro tko plat· la koi 
fro« two aid··: 
IiBC 
I 
ADD. 
OU 
OIT 
»»·* 
FI 
Cl 
00 
» · · · 
»»*· 
» · · · 
A R O - 1 
rai 
AEC-1 
OBI 
iic-a 
CBl 
ARC-3 
CBl 
···· 
IX 
IT 
um 
T0 
ΤΓ 
DT 
■OUT 
IUPDT 
ÜX 
UT 
-Β.·ϋΧ - 0.001*0 
1. 
20. 
Boeadary coadltloaa: 
30. 
coal(m.t) 
0. 
coaSU.t) 
40 
20 
8 
0. 
1. 
0.01 
B0 
0 
BUD. 
2.0,1.0. 
0.0,1.0. 
1.0.0.6. 0.0.0.0. 2.0.0.0 
1.2.3. 
2.4.3. 
4.6.3. 
6.1,3 
1. 
2. 
3. 
-1 
FuicTimr come τ ) 
REAL U(2) 
CALL OHJAUS(U) 
C0H1 « 1000.·( 0(1) - T ) 
RETUEÏÎ 
ΕΠ) 
FUNCTION C0R2C T ) 
CALL OHJAUBCO) 
C O M —1000.·( 0(2) - T ) 
Fig. 
Input data file for the first example. 
■AATAJA( t, y. a. a. a ) 
a. > 
t. yU). «(a) 
LMXCAL 
flrat.caU 
IIAL 
«Iff.0(2). 41ff.l(3). istagtt). y_rof(2) 
UAL 
fO. fl. ola.% 
DATA 
flrat.caU 
DATA 
«Iff .4, 
«lff_l. lataf 
IF ( flrat.caU ) H D 
fO - 2 
fl - 20. 
y_raf (1) - 16. 
y_r«f(2) - 16. 
/ .TITO. / 
/ §·0. / 
«iff.0(1) - y_ref(l) - y(l> 
«iff.0(2) · y_rof (3) - y(2) 
flrat.caU · .FALB. 
«iff.0(1) - y_r«f(1) - y(l) 
«Iff.0(2) ■ y_raf (2) - y(2) 
iataf(l) - latag(l) ♦ Uifl_0(i)*«ltt_l(l))/3.»(t-ol4_«) 
latag(2) - latog(2) ♦ («lff.0(2)««iff.l(2))/2.*(t-ol«.t) 
HD XF 
■(1) · g0*«lff.0(l) ♦ gl*latag(l) 
■ (2) - g0*«lff.0(2) ♦ gl*latog(2) 
«lff.l(l) - «lff.O(l) 
«Iff.1(2) - «Iff.0(2) 
old_t - t 
Fig. 5. Controller-file for the first example. 
The file contains two Pi-controllers. 

TDP - A Distributed Parameter Systems Simulator 
183 
CONTROL 1 
86-
B4-
52-
80-
CONTROL 2 
i 
1 
i 
1 
' 
POINT 1 
X - 0.200 
Y - 0.800 
POINT 2 
X ■ 0.200 
Y - 0.200 
Fig. 6. The controls and measurements 
as functions of time. 
Ik 
1 
< 
Fig. 7. Temperature profile of the 
sheet at t=10. 
CADCES-G 

M. Aaltonen, J. Tanttu and S. Pohjolainen 
,0.010 
> 
OMSK-
tu»· 
0 
T l * 
i 
» 
1 9 
a 
o.a*· 
0.000-
1 
r~~^ 
o
n
« 
-
D 
mur 
t 
X ■ 0.000 
V · 4.000 
Fig. 8. The controls and measurements 
as functions of time. 
"
^
•
^
^ 
Fig. 9. The neutron flux profile at t=150. The effect 
of the four control rods to stabilize the system 
is clearly seen. 
184 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
SELF-TUNING CAD PACKAGE AND ITS 
APPLICATION 
Chen Zhen-Yu and Fang Li-Zhang 
Automation Research Institute of Metallurgical Ministry, People's Republic of China 
Abstract. This paper introduces a self-tuning control system GAD package 
GADST which includes 4 kinds of self-tuning algorithm. Engineers can use 
the CADST by simple man-machine interactive dialogs to implement the pro-
ject design. A project of self-tuning thickness control system for rever-
sing cold mill has been implemented by the using of GADST. The thickness 
output deviations reduce distinctly comparing with convention regulating 
system. 
Keywords.CAD package; self-tuning control; thickness control system. 
1. INTRODUCTION 
The designs and applications of self-tuning 
control systems have been developed more 
then ten years. In order to prpvide a po-
werful tool for the engineers to design 
such kind control systems, we have develop-
ed a computer aided design software packa-
ge of self-tuning CADST. In this paper the-
re have an example which is a project of 
thickness regulating system of reversing 
cold rolling mill to perform the using of 
various method to design the regulating 
system and to analyse the calculating re-
sults. Engineers can use the GADST by sim-
ple man-machine interactive dialogs to im-
plement the project design, and also can 
made a simulation stady in detials when a 
meticulous simulation plant model has been 
linked into this package. 
CADST package includes 4 kinds of self-tun-
ing algorithm: Self-tuning Regulator STR ( 
Astrom et al., 1973; 1977); Self-tuning 
Controller STC (Clarke et al., 1975; 1977; 
Allidina et al., 1981); Pole Assignment 
Self-tuning Controller PAST (Wellstead et 
al., 1981); All Parameters Self-tuning Con-
troller APST (Wu Hong-Xin et al., 1984) 
which is a new algorithm and the principal 
base is that the summing value of all para-
meters equals unit. 
2. CADST PACKAGE 
Description of algorithm 
The main principal of APST can briefly il-
lustrate as following. The continuous sys-
tem can be expressed as 
y(n)(t)+an-1y(n-1)(t)+-^+a0y(t) = 
Vl u ( n" 1 ) ( t~ d ) +"' +V ( t~ d ) (2·1) 
where d is time delay. When take the sample 
of this system by cycle time At, the dis-
crete system can be expressed as 
y(t) = ^yCt-D*· • + ^r]y(t-n)+p0u(t-k-i) 
+ ' +yön-1u(t-k-n) 
(2.2) 
where 
k = INT(d/*t) 
(2.3) 
is the time delay of discrete system. 
Theorem 2.1. The summing value of all para-
meters of discrete system (2.2) equals unit 
when At approaches zero. 
r n 
n-1 
s 
lim Σ-oL + Σ β. = 1 
(2.4) 
At*0 4=1 1 
j=0 ' 1) 
The prof see (Wu Hong-Xin et al., 1984). 
The main procedure is to use the differences 
to replace the derivatives. 
y(m)(t) = [y(t+m)-(m)y(t+m+1) 
+ i^y(t+m-2)-. - + 0(-1)ray(t))/(at)m 
1 = m = n 
(2.5) 
where (m) are the coefficients of binomial 
expansion. Using the equation (2.5) to com-
bine the equation (2.1) can get result equa-
tion (2.4). Using the iterative method, 
equation (2.2) can be expressed as following 
prediction equation 
y(t+k+1) = oC;y(t)+---+^y(t-n+1) 
+/^u(t)+ · +/0nllu(t-n+1) 
(2.6) 
Lemma 2.1. The summing value of all parame-
ters of system (2.6) also equals unit when 
At approaches zero. 
- n 
n-1 
x 
lim \Y.i\ + Σ 
β \ = 1 
<2·7) 
At*0 4=1 
j=0 ' JJ 
Consider the condition of practical appli-
cations, the functions of STR,STC and APST 
of CADST package are including the feedfor-
ward terms for the detection of measureable 
185 

186 
Chen Zhen-Yu and Fang Li-Zhang 
where *Uq~1 ) = c^ + c^q V - . + â ^ q 
n 1 + 1(2.9) 
disturbances. 
The algorithm of APST can be described by 
model 
Y(t+1) = c<(q"1 )Y(t )+^QU(t-k1 ) 
+i8(q"1 )U(t-kr1 ) + 2T(q""1 )W(t-k2) 
+ +(q"l)£(t)+t(t+1) 
(2.8) 
— 1 
—1 
? 
) = c ^ + ^ q 
*■■·■» 
/3(η"Ί) = /31-H/ii2Q-1-H 
^ n a ^ " " ^ ' 
Y(q-1) = t l + ^ q- 1
+... + r n 4 q-n4+1 
and W(t) are measureable disturbances, k ? 
is the time delay from W(t) to Y(t), 
£(t) is residual, assume k ^ k ^ O . 
Control criterion 
u(t) = -[dl1y(t+n)+.--+iAkly(t+l) 
(2.10) 
+<*kl + 1y(t)+-· +ö(ny(t-nl+k1 + 1) 
+j5(q-1 )U(t-1 )-Hj(q"1 )W(t+k rk 2) 
+ rki + ii(*)+"'+tn4£(t-n4+k1 + l,J^O 
ELS method is used to estimate the parame-
ters, the estimate value of SQ can be solv-
ed from (2.4). In pratical the sampling 
time 4t only can approaches to a sufficient 
small value, therefore it must exists some 
error part in the calculating equation, so 
equation (2.4) can rewrites as 
ZiA*)+T 
M t ) + /3n(t)=1+e(t) 
(2.11) 
where e(t) is error term. 
t 
2 
Setting X e (i) to minimal by the selection 
i=1 
of A>(t) can get the iterative estimation 
equation as 
^0(t)=^0(t-1)+l(l(t-1)-/30(t-1)j 
(2.12) 
£(t-i)=i-Î IoL(t-i)+nÎ /5.(t-i)l 
(2.13) 
li=i 1 
j=r J 
; 
The algorithm of STR can be described by 
prediction model 
Y(t-fk1 + 1) = <H^)Y(t) 
+ ßöV(t) 
(2.14) 
+ ß(q"1 )U(t-1 ) + i(q"1 JWft-f^-kg) 
+?(t+k1+1) 
Control criterion 
u(t) = -(A(q"1)ï(t)+/J(q"1)U(t-1) (2.15) 
+W(t+k1-k2)J/^0 
where ÔQÎS preselected. 
The algorithm of STC can be described by 
extended output 
φ ( ΐ + ^ + 1) = P(q"1)Y(t-hk1-f1)-K(q"'1)Yr(t) 
+Q(q"1 )U(t)+S(q"1 )W(t+k rk 2) 
+t(t+k1+1) 
(2.16) 
where Y ( t ) i s the reference output. 
Prediction model 
<f>y(t+k1 + 1) + ^(q~ 1)Y(t)+/3(q- 1)U(t-1) 
+ß0U(t)+i(q-1)W(t+k1-k2)+d 
+E(t+k1+1) 
(2.17) 
where d is the constant component 
The sampling equation of extended output 
can be described by 
4> (t+lc1 + 1 ) = Piq-^yit+k^l) 
(2.18) 
Control c r i t e r i o n 
u ( t ) = -[<A(q- 1)Y(t)-R(q" 1)Y r(t) 
+ß(q"1 )U(t-1 )+[V(q"1 KSiq"1 )) W(t=krk2) 
+dJ/(/S0+Q(q~1)) 
(2.19) 
The algorithm of PAST can be described by 
model 
A(q"1)Y(t) = q"k1B(q"1 JUit-k-, ) 
+Ô(q"1)£(t) 
(2.20) 
where 
A(q_1) = l+âiq"1 + .· +â n aq" n a 
(2.21 ) 
B(q Ί)=ΐ>^ V - . + b ^ q n b 
Control criterion 
u(t) = -
G(q 1 ) 
P(q ) 
(2.22) 
where 
F(q 1 ) = 1+f ,,q~1+· · ·+fnf q~nf 
Λ/--1-
-1 
G(q",)»g0+e1q"'+---+engq_ne 
is the solution of following equation : 
A(q-1)F(q-1)+q-k1B(q-1)G(q-1) 
= T(q-1)C(q-1) 
(2.23) 
where T(q_1 ) = 1+^"~ 1+- > ·+tntq~"nt is the 
closed-loop prespecified polynomial. 
All of the above parameter estimation algo-
rithms of self-tuning are using the variable 
forgetting factors method (Fortescue et al. 
, 1981). 
Construction of CADST package 
This software package is constructed by a 
lot of modules and with layers (Fig. 2.1) 
which include all the funtions as described 
above. There have been built a management 
program to implement the dispatching for all 
functional software modules. The selection 
of functions can easily appointed from the 
menu, and any parameters of the self-tuning 
control system also can be easily exchanged 
during every running through simple man-
machine interactive dialogs, which are whol-
ly charged by management program. The whole 
programs are written by Fortran language, 
and it is easy to make any extension. 
When the user applies this package to design 
the engineering control systems, if the con-
trol object is a simplified process model 
as linear difference equation, then this 
simplified model can be linked as the block 
"Process", the whole procedure of the self-
tuning control system design can be going 
on. If the user wants to investigate the 
control effects in detials, then the pack-
age can links a meticulous simulation plant 
model with the block "Plant" (such as Fig. 
4.2) to implement the simulation running. 
The same project job can uses any kinds of 
self-tuning algorithms which have been con-
structed in this package. It gives much 
convenience for the user who can applies 
any kind of algorithm and to compare the 
running results. 

Self-tuning Package 
187 
Fig. 2.1. Construction of CADST package 
This package also can be used as teaching 
aid for the university. 
3. NUMERICAL CALCULATING EXAMPLE 
Example 1. A nonminimum phase system 
y(t)-1.5y(t-1)+0.49y(t-2) = 
0.4u(t-1)-0.40lu(t-2)+^(t) 
(3-D 
2 
where J-(t) is the zero mean, variance 3" =1 
uncorrelated Gaussian random sequence. 
The APST algorithm has been applied to this 
system. The system outputs is illustrated 
as Fig. 3·1(&) and the system inputs and 
estimated parameters are illustrated as 
Fig. 3.1(b) and Fig. 3.1(c). 
Example 2. A correlated noise system 
y(t)-1.6y(t-1)+0.7y(t-2) = 0.7u(t-2) 
-0.5u(t-3)+Ç(t)+0.4Ç(t-1) 
(3.2) 
All of the STR, STC, PAST and APST algori-
thms have been applied for this system. The 
system outs of four algorithms are illus-
trated as Fig. 3.2(a) to 3.2(d). The mean 
variances of system outputs at t=1000 steps 
are illustrated in table 3.1. 
Table 3.1. 
Algorithms 
Mean variance 
Comparison of mean variances 
STR 
5.13 
STC 
8.66 
PAST ΓAPST 
5.62 I 2.88 
It can be obtianed from example 1 and 2, 
that outputs of STR system are strongly 
fluctuated at the beginning several tens 
steps, by this influences the mean varian-
ces of outputs can not decrease rapidly. 
The outputs of STC which has been weighted 
on control signal are obviously less fluc-
tuated at the beginning steps, but mean 
variances of the outputs are not optimal. 
The outputs of PAST are quite stable if ths 
poles assignment are defined stablely. The 
outputs of APST have the least fluctuations, 
either the mean variances or the convergence 
of parameters are both in best performances, 
to 
10 
0 
-10 
l/l 
/ 
U(t) 
V 
y 
w> 
4-00 
io\ 
^Oo 
v^ 
Fig. 3.1. Calculation 
example 1. 
results of 
it has been illustrated that APST algorithm 
can get very good control property when the 
sampling time &t is sufficient small. 

188 
Chen Zhen-Yu and Fang Li-Zhang 
i/«> 
STR 
10 
STC 
iooo 
t #«> 
STC 
(bj 
/o 
0 
I 
P"ST 
il 
i/if> 
[-) 
APST 
VyAr'>YvVA '»A'Vn* 
id) 
C0° 
Fig. 3.2. Calculation results of 
example 2. 
4. THE DESIGN OF THICKNESS 
REGULATING SYSTEM OF 
REVERSING COLD ROLLING MILL 
The system configuration of reversing cold 
rolling mill of a plant is illustrated as 
Fig. 4.1. And the meticulous simulation 
block diagram of rolling mill is illustrated 
as Fig. 4.2 (links with "Plant" block during 
simulation runing, ref. Fig. 2.1). The for-
mer conventional thickness regulating system 
is worked by the principal of PI with cor-
recting factor. Owing to the large time con-
stant of hydraulic mechnical screwdown sys-
tem, the thickness output deviations are 
rather unsatisfied (see Fig. 4.3(d)). 
After the CADST package has been built, we 
have adopted this package to design the 
thickness control system. The results il-
lustrate as following (see Fig. 4.3). 
Fig. 4.3 illustrates the simulation results 
of various kinds of thickness control sys-
tems, the calculations have been applied 
under the rolling speed 3-33 m/s, the 5th 
path,and the sampling time is /-.t=0.268 s., 
time delay d1=0.558 s., d2=1.15 s. 
When the STR algorithm has been applied, the 
input data of CADST are : (ref. Eq. (2.9), 
(2.14)) 
n1=2, n2=3, n3=3, k1= :2, k2=4, 30=20 
The variable forgetting factors method have 
been used, and the lower limit ,\ . =0.95. 
(Following are the same case) 
m i n 
Fig. 4.3(a) illustrates the thickness output 
deviations. 
When the STC algorithm has been applied, the 
input data of CADST are ; (ref. Eq. (2.9), 
(2.16)) 
n1 = 
2, n2=4, n3=3, k1=2, k2=4, P(q~1)=1, 
R(q )=0, S(q' "1) = 1.5-1.5q"1 
Fig. 4.3(b) illustrates the thickness output 
deviations. 
When the PAST algorithm has been applied, 
the closed-looD prespecified polynomial 
T(q~ ) = 1-0.5q""1, and the input data of 
CADST are ; (ref. Eq. (2.21),(2.23)) 
na=3, nb=2, nc=0, k1=2, nf=4, ng=3 
üf-ray 
thickness 
meter 
hydraulic mechani-
cal screwdown 
Δ 
^4 
««> 
i—r 
v a« 
Î 
thickness control 
system 
uJ® 
coil 
Fig. 4.1. System configuration of reversing cold rolling mill 

Self-tuning Package 
189 
FS> 
Pig. 4.2. Simulation 
block diagram of 
rolling mill 
tu*> 
Fig. 4.3. The 
simulation results 
of various kinds 
of thickness 
control systems 
thickness output deviations 
- tfrt> 
TzS-f-i 
K 
M 
2Mf(C/ + w> 
i 
Y 
6/rv>>0? j 
Λ/ rh 
-i 
r e s t time integration 
Ei 
^ K S Î Z H Ï A H E I 
Λ/ 
H>Yo'?)-
Λ/ 
hardness and screwdovm 
Y 
. · r time i n t e g r a t i o n 
^ Γ iz 
/ 
^Π 
I *»,,>/Τ·Μ ? j 
Y 
V 
1 Γ 
[-rîs^ms-M 
j = i 
fW·* « ^sf 
S H 
■y.y.^V/V .Λ^^Λ. , ^ ν ^ Λ . 
^-i 
UO 
&>o 
s re 
Î V V v ^ w ^ V A A ^ ^ ^ ^ A ^ / V w -Λ*Λ 
ib) 
600 
50 
3o 
Zo 
10 
\ . _ 
__^Aec 
(Γ 
- P A S T 
• STR 
ffl£, 
600 

190 
Chen Zhen-Yu and Fang Li-Zhang 
The feedforward terms can not be added into 
the PAST algorithm. Fig. 4.3(c) illustrates 
the thickness output deviations. 
The APST algorithm also has been applied 
into this thickness control system, but the 
time delay is quite large in this system, 
owing to the k1 and k2 would not be too 
large, therefore the ût can not be suffi-
cient small and the error of relation where 
the summing value of all parameters equals 
unit would be enlarged, and the control re-
sults are worse than conventional AGO sys-
tem. 
Fig. 4.3(e) illustrates the measureable 
thickness feedforward signals, as same as 
disturbances, which had been collected 
from plant. 
Fig. 4.3(f) illustrates the mean variances 
curves of above algorithms, At 600 steps, 
the values of mean variances of various 
kinds algorithms are : The value of STR 
equals 6.7; the value of STC equals 1.8; 
the value of PAST equals 12.7; the value of 
former AG-C equals 42.2. It can be obtained 
that the STC algorithm is the more better 
method for the thickness control of rever-
sing cold rolling mill. It is obviously 
that the feedforward terms are very active 
to reduce the thickness disturbances. 
5. CONCLUSION 
CADST package includes several main self-
tuning algorithms, it is useful and con-
venience for engineers as a design tool of 
control systems. This software package con-
structs reasonably and is easy to extend. 
The simulation results of thickness regula-
ting system of reversing cold rolling mill 
illustrate that the STR and STC algorithms 
which have measureable thickness feedfor-
ward signals have good performance to re-
duce the thickness deviations. The PAST 
algorithm has not included the feedforward 
action, therefore the control results are 
not as good as STR or STC. Owning to the 
sampling time At can not be sufficient 
small in APST algorithm for this thickness 
control system, so the control results are 
unsatisfaction. But the numerical calcula-
ting examples have been illustrated, if the 
system delay is not large and the sampling 
time Λ± is sufficient small, the APST algo-
rithm can get very good control performance 
6. REFERENCES 
Astrom, K.J.,and Wittenmark, B. (1973). On 
self-tuning regulators. Automatica, 
Vol. 9. No.2, 185-199. 
Astrom, K.J., Borrison, U. et al. (1977). 
Theory and application of self-tuning 
regulators. Automatica, Vol. 13· No.5, 
457-476. 
Clarke, D.W., and Gawthrop, P.J. (1975). 
Self-tuning controller. Proc. IEE, Vol. 
122. Pt.D, No.9, 929-934. 
Clarke, D.W., and Gawthrop, P.J. (1979). 
Self-tuning controllre. Proc. IEE, Vol. 
126. Pt.D, No.6, 633-640. 
Allidina, A.Y., and Hughes, F.M. (1981). 
Self-tuning tuning control for systems 
employing feedforward. Proc.IEE, Vol. 
128. Pt.D, No.6, 283-291. 
Wu Hong-Xin et al. (1984). All parameters 
self-tuning control method. Annual 
Meeting of APCQM of Chinese Association 
of Automation, Xi An P.R. China 
Wellstead, P.E., and Sanoff, S.P. (1981). 
Extended self-tuning algorithm. Int.J. 
Control, Vol. 34. NO. 3, 433-455. 
Fortescue, T.R. > Kershenbaum, L.S., and 
Ydstie, B.E. (1981). Implementation of 
self-tuning regulators with variable 
forbetting factors. Automatica, Vol.17. 
No.6, 831-835. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INTERACTIVE GRAPHIC DESIGN OF SIGNAL 
FLOW DIAGRAMS FOR SIMULATION 
H. Domeisen, B. Dorn, T. Sulzer and S. Studer 
Institut für Mess- und Regeltechnik, ETH-Zentrum, 
CH-8092 Zürich, Switzerland 
Abstract. This project deals with the man-machine interface and its applications to con-
trol problems. The objective was a program which allows the user to define any physical 
system like heat exchangers or turbines in an efficient and simple way for simulation. 
Systems defined by a block diagram can simply and efficiently be entered by use of a 
special CAD program. This efficiency results in using graphic symbols instead of differ-
ential equations. With an inital menu, predefined elements can be chosen and are placed 
by a cursor to compose the system. Another menu containing a selection of functions is 
used to give each element its functional meaning. There is no need for typing in differ-
ential equations and a yery clear documentation is produced by the computer. The two-di-
mensional block diagram is then transformed into a one-dimensional instruction sequence 
controlling the simulation. Different systems can be stored as permanent files for reuse 
or modification. Various stored systems can be freely combined to form a new one. An ex-
tended version of the program package is able to do real time simulation and process 
control. 
Keywords. Signal Flow Diagram, Simulation, CAD, interactive, Menu technic, real time. 
1. INTRODUCTION 
2. SIGNAL FLOW DIAGRAM 
There exist many simulation packages for different 
applications. Usually the systems are defined by 
differential equations or by function blocks. Most 
packages are used in batch mode. This results in 
some disadvantages: 
- the user must be familiar with the simulation 
language before using it 
- usually, there is a special effort to prepare the 
documentation 
- it is often difficult to find errors in the sim-
ulated system. 
The program package DOSU was built to use only the 
signal flow graph for the definition of the system 
and takes it as the basis for simulation. Like 
this, most of the mentioned disadvantages can be 
eliminated. 
The graphic presentation of the system permits a 
better survey and is used for documentation with 
no further effort. Interactive input and defini-
tion of the system with dynamic menu technic show 
all the actual possibilities at any time and per-
mit checking the input data. 
After input of all the needed informations the sig-
nal flow diagram is transformed into a suitable 
form for simulation. 
DOSU was designed for linear and nonlinear systems 
with lumped parameters. It has a real time part for 
simulations on process computers and direct cou-
pling with external systems, e.g. direct digital 
control of a continuous process. 
In this study, primarily the interactive design of 
the signal flow diagram together with the defini-
tion of functions and parameters has been faced. 
The signal flow diagram is a special kind of draw-
ing, which helps to show the mathematical and phy-
sical relationship between different signals. It 
is used as a substitute for equations. 
Using signal flow diagrams, it is yery easy to fol-
low a signal path and to see how it will be changed 
and linked with other signals by different func-
tions. 
The aim was to develop an interactive program which 
allows to design and interprète signal flow diagrams, 
e.g. for simulations and process control with-
out the need of a common computer language, like 
Pascal. For that reason the inner coherence of 
those designs had to be examined. 
2.1 Structure of Signal Flow Diagrams 
Signal flow diagrams consist of just a few struc-
ture elements which define the signal flow and con-
tain the mathematical functions. In a signal flow 
diagram consisting only of structure elements with-
out any functions, it is already possible to see 
how the signals are linked. 
An example: 
τ 
Y2 
O 
I t is evident that 
yl = f(xl,x2) 
y2 = f(x2) 
CADCES-G* 
191 

192 
H. Domeisen et al. 
If the functions are added to the structure of the 
signal flow diagram, the mathematical relationship 
between the signals is known too: 
XI 
o\ 
SUM 
^ϊ 
Yl 
X2 
Y2 
yl = xl - x2 
y2 = C ·χ2 
As structure elements we define: 
- input/output 
IN 
CH OUT 
The input or output element defines the connections 
of the signal flow diagram to its environment (envi-
ronment means A/D and D/A converters, switches, 
recording instruments...). 
- connection (paths, including corners) 
o 
- crossing 
Λ 
function element 
The function element has one or more input signals 
and one output signal. It is important that the 
number of connections corresponds to the function 
within the function element. 
It is useful to distinguish function elements with 
different numbers of input signals to get the pos-
sibility to exchange functions with the same num-
ber of variables without changing the structure of 
the signal flow diagram. Functions with more than 
two variables can always be splitted into a com-
bination of functions with two variables. This is 
the reason why only function elements with one or 
two input signals are used. They are called func-
tion element 1 and function element 2. 
- function element 1 
this structure element may contain functions 
like logarithm, integration... 
function element 2 
this structure element may contain functions 
like summation, multiplication... 
Basing on these structure elements a structure li-
brary was created containing the elements. In a 
special data base graphical information is stored 
and it is used by algorithms, like compilation 
(see chapter 2.2). The solution was a two-dimen-
sional array. Every component has a defined rela-
tion to a point of the design plane and contains 
graphical, and mathematical information. 
If the user now chooses a structure element from 
the library (menu) and places it somewhere on the 
design plane, the element will be drawn in that 
position and simultaneously stored in the array. 
To connect elements it is only necessary to select 
the connection symbol from the structure library 
and mark the initial and the final point. 
This gives the possibility to generate the whole 
structure of a signal flow diagram. 
2.2 Compilation of Signal Flow Diagrams 
To transform the two-dimensional array with the 
structure information into a computable list of in-
structions, a compilation program is needed. 
The compilation program produces a list of proce-
dures with the addresses of all variables. 
.-i,T...i flew ,1in,-rim 
| 
■ 1 
Î 
IN V 
2 
3 
0 
| 
c o s p i U t i c r. 
p r o . r a * 
\ 7 
OUT 
5 
^] 
:n::v-:»!.ion 
I i.: r. ( l i s t 
of procedures) 
] 
* 
1 
3 
1 
3 
| 
5 
* 
2 
? 
2 
3 
2 
a o 
IS 
fr.c 2 
fr.c 1 
fnc 1 
OU? 
-
a ~* 
1 
2 
3 
3 
«V 
a 
-i 
L 
β 
o 
1 
2 
3 
t 
e 
<-. 
3 
Q. " C 
1 
2 
3 
i 
5 
Fig. 1 Compilation of Signal Flow Diagram 
As the example shows, the compilation program does 
not care about the mathematical functions because 
they are not stored in the two-dimensional array, 
they are put directly into the instruction list. It 
is very important, that the compilation program 
gives the correct step number to each structure ele-
ment. 
For the compiler it was better to develop a heuri-
stic algorithm rather then an analytic one. An 
imaginary observer who moves along the signal flow, 
first comes to an input element. This element will 
yield the first line in the instruction list. Now 
the observer follows the signal and leaves the in-
put element. If the next element is a crossing, he 
chooses one direction and sets a mark to know later 
on, that he already has taken this way. If he now 
finds a function element "1", he just creates a 
new line in the instruction list. The observer num-
bers the signals he finds on his way. These numbers 
correspond to the variable addresses in the instruc-
tion list and to the components of an array which 
summarizes all signals of the signal flow diagram. 
If the observer comes to a function element "2", he 
checks whether it is the first time he gets to this 
element or not. If yes, he must find out whether 
the second input signal is a feed back or not. If 
it is a feed back, he passes and creates a new line 
in the instruction list. If not, he searches for a 
crossing he already passed, but which still has one 
ore more directions without a mark. If he does not 
find such a crossing, he looks for a new input ele-
ment. If the observer comes to a function element "2", 
he can pass because he already knows the address 
numbers of both input signals. 

Interactive Graphie Design 
193 
In this manner the observer walks through the whole 
signal flow diagram until he has reached all output 
elements. Now the instruction list is complete, 
exept that the mathematical functions and their 
parameters are still missing. 
signals can be choosen between one and five. The 
menus depend on information already stored in a 
signal flow diagram. The menu is restricted to the 
necessary components which prevents wrong manipula-
tions. 
2.3 Definition of Functions and Parameters and 
Specification of Input and Output Elements 
To complete the instruction list with functions it 
is useful to have a menu containing all functions 
the user needs. Then it is possible to choose the 
function from the menu and to mark the requested 
structure element in the design plane. In this man-
ner the instruction list will be completed, until 
all structure elements contain functions. 
Every function has an address in the instruction 
list which defines the relation to a parameter ar-
ray. The parameters themselves are added as soon as 
the structure elements contain their functions. It 
is obvious that a change of any function of the 
same structure type and any parameter is possible, 
without the need of a new compilation. 
To execute the instruction list, some information 
is still missing. First of all, the user must choose 
if he wants to run a simulation only with test in-
put signals, or to connect the computer to a proc-
ess and run a real time computation. Both versions 
need a further specification of input and output 
elements. If the user wants to connect the signal 
flow diagram to an external process, he can inter-
actively connect all input elements to the A/D 
converters and the output elements to the avail-
able D/A converters. It is also possible to connect 
output elements to a printer or to a recording in-
strument and to define some of the input elements 
as test signals which were produced by the computer. 
2.4 Execution of the Instruction List 
The last thing the user has to do, is to define the 
computation time interval. For the real time applic-
ation it is very useful to determine the minimal 
possible interval by the computer, because it can 
vary in a wide range (20...200 ysec), depending on 
the size of the signal flow diagram. 
All information for the execution is complete now. 
The calculation program can start to execute all 
functions in the instruction list in the sequence 
of the step numbers. For every line the program 
calls a procedure which corresponds to the actual 
function. All required variables for this procedure 
are available by calling those components of the 
variable array which correspond to the addresses in 
the instruction list. Reaching the end of the in-
struction list, the program restarts with the first 
step number. This procedure is repeated up to the 
end time of the simulation. 
3. THE PROGRAM PACKAGE 
D 0 S U 
DOSU is a utility-program for system designers who 
work with signal flow diagrams. These diagrams are 
configured on the screen and stored for later use. 
They are used for documentation and computation. 
DOSU transforms the signal flow diagram into a 
machinereadable form, a "programming" is not neces-
sary. 
Special features of DOSU are: The dimension of the 
3.1 
Implementation 
The program is implemented on a Minicomputer with 
floating point arithmetic and 64kbyte memory. The 
graphic display is a Tektronix 4010 storage tube. 
As curser input we use a location-proportional 
joy-stick (not the better known speed-proportional» 
Similiar to a "mouse"). Documentation is done on a 
plotter as well as on printer. Connection with a 
process is realised via A/D and D/A converters. 
3.2 Program Structure 
System Operating This part of DOSU gives the user 
information on already existing systems (Systems 
that have been created with DOSU earlier). It gives 
the possibility of choosing an old or of creating a 
new system. 
D O S U 
systea - operating 
new syste», 
old syste* 
structure 
design 
systea definition, computation 
function 
declaring 
per meter 
declaring 
compu-
tation 
documen-
Utlon 
? 
Fig. 2 Principal Structure of DOSU 
System Definition and Computation This level, as 
shown above, is the "heart" of DOSU. The inner seg-
ments are only available if necessary (the structure 
design is always available). Every segment shows on 
the screen a drawing-plane on which the signal flow 
diagram is displayed (or parts of it) and a menu-
bar at the bottom of the screen. 
Every segment has the capability of moving the vir-
tual drawing-plane behind the "screen-window" using 
a zooming capability. 
Normally the user points first to a command and then 
to a coordinate or to an existing symbol of the sig-
nal flow diagram to show where he wants to have the 
command executed. 
GO 70 GRAFIC 
GO 70 FUNCTION 
GO 70 PARAMETER 
PL07 SYMB 
PL07 SYMB*FUNCT 
PLOT SYMB.FUNCT.PAR 
1 
1 
1 
| 
Fig. 3 Main Menu 
The steps of developing a system are illustrated 
with the example of a Helicopter (four-dimensional 
state space model inconstant speed). 

194 
H. Domeisen et al. 
a) Structure Design: The structure is defined by 
a set of the six elements: IN, OUT, SIMPLE ELEMENT, 
KNOT, CROSSING, CONNECTION. This segment is the only 
one available when a new system is created. The 
structure of a signal flow diagram can be defined 
with these six elements; their meaning or charac-
teristic is defined in the other segments. 
-GH 
Έ> 
!□■ o 
RUBBE
R 
-o 
ISYMBOLI 
ZOOM 
IN 
Fig. 4 Design of the System Structure 
b) Function Definition: This segment is available, 
if the structure is correct. It allows to define the 
knots and simple elements as one of the following 
functions: 
P, I, D, Summation, Multiplication, Limiter, Mini-
mum or Maximum signal switch. 
-EH 
& 
JZ VL 
Θ 
Fig. 5 Function Definition 
c) Parameter Declaration: This segment is availa-
ble, when all functions are declared. Parameters 
exist for proportional-element and for the signal 
limiter. For easy definition of parameters in a 
moredimensional case, a mask appears on the screen 
that shows the rows and columns to be filled up. 
This gives also the possibility to point to any 
value to be modified. 
d) Computation: Before a system can be excecuted, 
there is a last step in completing a signal flow 
diagram: a segment for declaration of IN and OUT 
as a process-interface (A/D or D/A converter) or 
for internal use (test-signal or storage purpose). 
Also the inital conditions of the integrators are 
defined in this segment. 
(Fig. 6 Definition of Input Signals for Simulation 
Run, see next column) 
Further information concerns the duration of com-
putation and the sampling interval for real time 
application or for integration steps. 
(Fig. 7 Plot of Output Vector, see next column) 
»COMPONEN
T t 
-
2 
3 
« 
FUNKTIO
N 
m 
ΠΖΊ 
E D 
S I N US 
AMP/ARE
A 
. 1 0 0 E - 8
I 
. 1 Θ Θ Ε - 0
Ι 
. 3 Ι 4 Ε - Θ
Ι 
STEIGUN
G 
. ι β β ε - β
ι 
FREQUEN
Z 
t . βββΕ·»
β 1 
π iZ. J_ 
Fig. 6 Definition of Input Signals for Simulation 
Run 
S I M U L A T I O
N AUTOPILO
T 
8Θ7 
O U T C 1 2
. 
3) 
1
 KOMPONENTE
N 1 - 
4 
9βε-ββ 
- ββε-ei 
1 
\ 
' 
2 \ \ 
3 
\ 
\ 
/X 
4 
\ 
\ 
_ _ _ > ■_ _— i • ^ * " * 81 
Fig. 7 Plot of Output Vector 
3.3 Modification 
Each of the inner segments accepts every action of 
the user either as new definition or as a modifica-
tion of an existing information. A new compilation 
is only necessary, when the structure was modified. 
A function modification causes DOSU to ask for new 
parameters. A parameter modification has no further 
effect. 
3.4 Real Time Application 
DOSU has a built-in timing capability. This feature 
is activated if either a IN or OUT is defined as 
process interface. If not, DOSU simulates the system 
without using the clock. 
The shortest possible interval depends on the system 
(number of functions, type of functions, number of 
dimensions and others). After the first time the 
system has been computed, DOSU gives a message and 
stops the excecution if the Intervall which was 
defined by the user is shorter than the one needed 
for computation. 
3.5 Computation Procedures 
Every function mentioned above (e.g. P,I,D..) is 
associated with a procedure. This procedure can 
vary according to the needs of the user (e.g. differ-
ent integration routines). However, the DOSU pack-
age includes very simple integration and differen-
tiation routines. 
The rules for computing more dimensional signal 
flow diagrams are those of linear algebra. Besides 
those rules an integrator is executed on each com-
ponent separately. Since there are only nxn matri-
ces allowed, the matrix computation is very easy. 

Interactive Graphie Design 
195 
3.6 Outlook 
The modular structure of DOSU allows the simple 
adaptation to specific needs. 
For example binary signal processing could be added 
or additional functions may be defined. 
Also it is possible to replace calculation routines 
by procedures from already existing simulation pack-
ages. 
3.7 Example 
The example shows a model of cross flow heat ex-
changer. The signal flow is one-dimensional with 
multiple inputs and outputs and nonlinear elements 
(multiplicators). 
REFERENCES 
Rimvall M., IMPACT, Interactive Mathematical Program 
for Automatic Control Theory, Mai 84, Inst, für 
Automatik, ETH Zurich, Switzerland 
Elmquist H., A graphical approach to documentation 
and implementation of control systems, IFAC 
Software for Computer Control, Madrid 82, Spain 
Aström K.J., Computer aided Modeling, Analysis and 
Design of control Systems - A perspective, 
August 82, Departement of Automatic Control, 
Lund, Sweden 
Grimm R., Zur ergonomischen Gestaltung der Mensch-
Prozess Schnittstelle: Prozessbeobachtung und 
Prozessbedienung, Oktober 82, Karlsruhe, BRD 
Domeisen H., SIMA, interaktives Simulationspaket 
für Prozessrechner, Programmbeschreibung, In-
stitut für Mess- u. Regeltechnik, ETH-Zürich, CH, 84 
Gray J.O., Nonlinear system design, an integrated ap-
proach. Proceedings of CACSD Symposium, Brighton, 
Great Britain, 1984 
SYSTEMNAME 
: HEAT-X-CHN 
[^EK 
DUX-
OUT 
. 
. IN. . 
-Eh—I · . iß 
IN. 12 
1 4 
16 
18 
8 
10 
12 
14 
16 
20 
22 
24 
26 
28 
30 
32 
34 
Fig. 
8 Model of Heat Exchanger 
Input signals: 
temperatures, massflow 
Output signals: temperatures 
SIMULATION HEAT-X-CHANGE 1 
OUT (.22. 3) 
[KOMPONENTE 1 
.45Ε-Θ2 
SIMULATION HEAT-X-CHANGE 1 
CUT < 3.12) 
[KOMPONENTE 1 
.49E-02 
Fig. 
9a/ Fig. 9b Plot of Step Responses of medium 1 
resp. medium 2 
I n i t i a l Conditions: 
medium 1,2: 0 C 
The plots show the responses to an input step of 
medium 1 (0° to 50°C) 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A DIGITAL SIMULATION SYSTEM OF 
LINEAR AND BILINEAR PROCESSES WITH 
OBSERVERS FOR STATE FEEDBACK 
CONTROL DESIGN 
N. Laggoune 
Laboratoire d'Automatique, Université de Lyon 1, 43 Boulevard du 11 Novembre 
1918, 69622 Villeurbanne, France 
Abstract. A conversational Fortran IV software has been built in order to facilitate 
the design of control systems for linear and bilinear processes. It allows simulation, 
analysis, observation, and control of those processes. It presents a "menu-driven" 
structure and a high interactivity with animated bloc-diagrams .Two applications are 
presented in the field of closed loop linearization of bilinear processes : neutrali-
zation pilot plant and D.C. motor. Still in progress, this software is open to intro-
duction of new modules. 
Keywords. Bilinear control ; Optimal control ; Time-varying systems ; Observers ; 
Computer-aided design. 
INTRODUCTION 
The basic idea of our software (Fig. 1) is imple-
menting a computer-aided design package applied to 
simulation and state feedback control setting up for 
both linear and bilinear systems. In case of linear 
systems, the control is the well known optimal-con-
trol which minimizes a quadratic criterion, with op-
tionaly a reference-model following structure inclu-
ding integrators. For bilinear systems, the control 
law, derived from or researches, is closed loop li-
nearization by non linear state feedback. It has 
been shown that this control law minimizes a quadra-
tic criterion (Gilles, 1983), slightly different 
from the one related to the linear case. In each ca-
se, if the state-vector is non-completly measurable, 
the state feedback needs an observer, and the soft-
ware has to provide a help for designing minimal 
order ones. 
Before a control design, the user can analyze his 
linear system, e.g. stability, controllability, 
observability. The Luenberger's observer (1966) 
computation is followed by the control-law calcul-
ation by solving a classical discrete Ricatti equa-
tion of the appropriate form, depending on the cho-
sen control structure. 
The major contribution of the software is in bili-
near systems control field. For the closed loop li-
nearization, some mathematical difficulties have 
been recently solved, and the discrete version of 
this law is already implemented. Two types of obser-
vers can be used : 
- a continuous one, proposed by Hara and Furuta 
(1976). This observer must be discretized and a me-
thod for testing its applicability is implemented 
(Laggoune, 1984a). 
- a discrete one, developed by the author (Laggoune 
and Gilles 1984), and applicable even if the former 
cannot be used. 
The software is specialized, and we have chosen the 
"menu-driven" structure. This environment is not 
unconvinient in this case, because of the special-
ization of the package. In order to increase inter-
activity, we focused our attention on the use of 
the terminal screen, by harmonious control of de-
vice, cursor and character attributes. For example, 
an animated block-diagram is a helpful "gadget" for 
a novice user. Graphics modules permit to the user 
a following of his manipulations effects on graphi-
cal-screen or plotter. 
In order to demonstrate the software capabilities, 
two examples concerning bilinear control are pre-
sented. 
f 
PNTRY J 
DESCRIPTION -o 
I 
o 
TZ1... 
DISCRETISATION 
OPTIMAL CONTROL 
«1 following 
OBSERVERS 
*2 
INPUT CHOICE 
and/or 
SIMULATION 
TNPUT CHOICE 
SIMULATION 
- Ό ·*
 Br-
nch·' 
τ 
b 
Fig. 1. Software general organization. 
SOFTWARE ASPECTS 
Organization 
The software consists in separate Fortran programs, 
each one being devoted to a special function (e.g. 
description, analysis, simulation, etc...). The 
synchronization between those programs is realized 
by a "supervisor-program" (Fig. 2). The supervisor, 
through his menus, performs the major conversation 
197 

198 
N. Laggoune 
with the user, by means of a "typical-screen" 
(Fig. 3). The defined three zones of Fig. 3, con-
tain some informations about the current stage 
(zone 1), the system (zone 2) and the menu (zone 
3). 
The supervisor performs any action needed by the 
user, by calling the appropriate program. After the 
called program execution, the data is stored on 
mass-storage unit in variable length file. The su-
pervisor takes control after this action and the 
user can follow his session (Fig. 2). 
This modular structure makes the software realy 
easy to use, and relatively open. Adding new modu-
les only implies a weak modification of the super-
visor. 
c=n 
Fig. 2. The supervisor and its function. 
Data Structures 
Manipulated data are real single precision (in a 
first time, double precision is not required). 
These data are stored in matrix, which is the basic 
data structure. But for operating system (RT - 11 
of D.E.C.) compatibility, these matrices are stored 
as vectors : a A(n,n) matrix is stored as A(n*n) 
vector. A future extension can be the use of the 
powerful librairy MATLAB (Moler, 1981). 
Files Handling 
Begining the session, the user assigns a name to 
the studied system (example PROCES or SYBIL1). A 
special module in the software manages a small di-
rectory (8 systems) containing data files, with 
specified name and default extension, as following: 
PROCES.COL - COtinuous parameters of Linear sys-
tem PROCES, 
PROCES.SIL - Simulation results ready to display 
of Linear system PROCES, 
SYBIL1.C0B - Continuous parameters of Bilinear 
system SYBIL 1, 
and so on. With this ability, the user can easy 
compare different control structures of the same 
system, or two systems between them. 
CRT Screen Management 
One of the very important features of a C.A.D. sys-
tem is the harmonious use of the sreen. Then we 
focused our attention on the definition of a typi-
cal screen : Fig. 3, tabulated screen, and animated 
block-diagrams, by using some device attributes 
(scrolling), cursor attributes (arbitrary position-
ning) and the character attributes (light, form, 
size, etc...), for VT100 compatible CRT terminals. 
Typical-screen (Fig. 3). Five zones have been defi-
ned, for information (zones 1 to 4 ) , or working (zo-
ne 5). Zone 1 contains information about the current 
stage. Zone 2 recalls the system-name on study and 
some complementary informations (numerical method, 
block-diagram of control structure). Zone 3 is the 
current menu. Zone 4, is reserved for error messa-
ges. All these zones are controlled by the super-
visor, except the fourth, which can also be used 
by other programs, but for all the scrolling is 
forbidden. The working space is zone 5, wich is a 
window in the screen (scroll). This zone is not 
controlled by the supervisor, it is used by the 
called-program, for his conversation with the user. 
Tabulated-screen. By cursor-position control, the 
tabulation is a very convenient manner to use the 
screen as matrix. This feature is used in the des-
cription stage, for introducing the state-model of 
the system. 
Animated block-diagrams. In order to make the 
software easy to learn, and for a better driving 
of the user during one session, animated block-
diagrams have been defined. The user can call 
these block-diagrams, with any menu. And this 
simple manipulation can show his location into 
the software, and he can decide how following, 
according to the possibilities shown. Calling an 
animated block-diagram, do not cause any trouble 
to the current session. This screen represents 
something like Figure 1, depending on the location 
inside the software. 
Zone 1 
4 
» 
Zone 2 
/3 
Zone 4 
l* 
\ S>o9e 
S | i ' im Bom« 
Sloek-d.eg«-o»n 
■ 
Zone 5 
WO'k.«9 wmdow 
to 
n.™ ·· 
2" 
CKe.c: i ^ 
Error 
m f « « 3 " 
VZone 3 
^ - 
Cvrior 
T 
Sc^M.nO 
:·»« 
Fig. 3. Typical screen and zones. 
LINEAR AND BILINEAR MODELS 
In its actual form, the software is not the "state-
of-art" in control systems field. Some well known 
techniques are used, and some original methods are 
implemented. We will present some capabilities al-
ready possible with the actual version of the soft-
ware, for linear and then for bilinear systems. Be-
fore those explanations, we introduce some defini-
tions about the models. For the description stage, 
only one model is possible : the state-space re-
presentation. 
In linear case the state-model is : 
X(t) 
Y(t) 
A.X(t) 
C.X(t) 
B.U(t) 
(1) 
where X is the (nx1) state vector, U is the (mx1) 
input vector and Y is the (rx1) output vector. The 
matrices are of appropriate dimensions. 
For bilinear systems, the state-space model is : 
m 
X(t) = Ao.X(t) + .Σ Ui.Ai.X(t) + B.U(t) 
i = 1 
Y(t) = C.X(t) 
(2) 
with the same definition and dimensions of the vec-
tors. Ui is the ith component of the input vector 
U(t). In case of discrete modelling, an index "d" 
is adjoined to the matrices. The matrix C is assu-
med to be of the form \1 : Oj . 

A Digital Simulation System 
199 
LINEAR SYSTEMS CONTROL 
Analysis. 
the index "k". This observer is applicable even if 
the former cannot be used, and his dynamics its 
arbitrarly fixed. 
This stage consists 
of the system, like 
observability. Stab 
through eigenvalues 
EISPACK), and very 
implemented by usin; 
A.X+X.B = C (Bartel 
trollability and ob 
ved using the S.V.D 
(Lawson and Hanson, 
1977). 
Observation. 
in the study of some properties 
stability, controllability or 
ility study is performed now 
concept (Eigen routines from 
soon Lyapunov's concept will be 
g the algorithm for solving 
s and Steward, 1972). For con-
servability the index is deri-
(Singular Value Decomposition), 
1974 ; Forsythe and coworkers, 
The Minimal Order Observer (M.O.O.), is of Luenber-
ger (1966), defined by : 
Z (t) = F.Z(t) + B1.U(t) + G.Y(t) 
X (t) = P.Z(t) + V.Y(t) 
(3) 
where the observer's state vector Z(t) is (n-rx1). 
The observer dynamics is arbitrary, by poles assign-
ment of matrix F, which is under triangular or dia-
gonal from. If necessary, pole-assignment algori-
thms will be used (Varga, 1982). 
Optimal control. 
The control structure can include a reference model, 
or perturbation model, in case of model following 
technique. In all cases the control law is derived 
by minimizing a discrete quadratic performance cri-
terion of the form : 
J = 
N-1 
Σ 
k=0 
(^ ,Q.£, 
Uk.R.Uk) 
(4) 
,, u, is the reference vector, Y, 
where ε, = E, 
is the output vector,"Q and R are defined respec-
tively as non-negative and positive matrices. By 
applying the optimality principle of Bellman 
(Athans and Falb, 1966), the solution of the dis-
crete Ricatti equation leads to the control law. 
The algorithm used for solving this equation involves 
a factorisation of the Ricatti matrices K = St.S, 
which necessarly lead to a symétrie positive solu-
tion (Barraud, 1974). 
BILINEAR SYSTEMS CONTROL 
Observation. 
Hara and Furuta's M.0.0. (1976). This observer is 
available for continuous bilinear systems and de-
fined by : 
m 
Z(t) = Âo.Z(t) + (Bo + Σ Ui.Bi).Y(t) + B.U(t) 
i = 1 
X(t) = C.Z(t) + D.Y(t) 
(5) 
The applicability test and the calculation of this 
observer have been recently solved (Laggoune, 
1984a). The corresponding algorithm is implemented. 
Moreover this M.0.0. must be discretized, thus a 
discrete version of this observer was derived 
(Laggoune, 1984b). 
Discrete M.0.0. Because of the limitations of the 
former, and in the case of digital control of con-
tinuous bilinear systems, an original observer, 
linear time-varying of minimal order was developed 
(Laggoune and Gilles, 1984). It is defined by : 
A(k).Zk+ B(k).Y, 
P(k).Z 
k 
D(k).Y, 
J(k) 
Linearizing Control. 
Let bilinear systems be defined by Eq.(2). If the 
input vector is piecewise constant (e.g. digital 
control with zero-hold), we can define a discrete 
model of those systems by a linear time varying 
expression : 
X k + 1 =Ad(U k).X k +Bd(U k).U k 
with : Ad(Uk) = Exp{A(Uk).T} 
Bd(Uk) = 
Exp{A(Uk).(T-T)}.dT 
(7) 
(8) 
A(ll) = Ao + Σ Ui(kT).Ai and Ui(kT) is the ith 
k 
i = 1 
component of U, at t = kT. 
The closed loop linearization by state feedback 
consists in solving Eq.(7), Eq.(8) and : 
\+1 = D' ek 
(9) 
where e, = Xc(k) - X, , and Xc(k) is the reference 
vector (variable or constant), defined by the user. 
T is the sampling period and D is the constant 
closed loop dynamic matrix of the linearized system. 
Thus the problem is finding the input vector U at 
time kT according to the vectorial non-linear equa-
tion : 
[Ad(Uk) - DJ.Xk + Bd(Uk).Uk + [D - In].Xc(k)=0 (10) 
The solution is in general non explicit, it is deri-
ved by means of numerical techniques (Newton-
Raphson, substitution, optimisation, etc...). 
The linearization method presents some singulari-
ties, in number equal to the system order, and 
minimizes a quadratic criterion, including a control 
energy homogeneous term (Gilles, 1983). This kind 
of singularities must be overcomed by appropriate 
solution and is the object of our actual interest. 
In this case a safety control is necessary ; it can 
be a simple linear control, of appropriate coeffi-
cients making the closed loop system stable. 
The numerical method used for solving Eq.(10) may 
also present singularities, or the convergence rate 
can be too great, thus the software has to give the 
possibility to switch to another numerical technique . 
In the following, in order to demonstrate the 
achievability of the method two example are presen-
ted. 
SIMULATION TECHNIQUES 
The state-space representation requires the use of 
the famous exponential matrix in order to solve the 
state equations (Eq.(1) and Eq.(2)). This exponen-
tial matrix is computed by an .accurate algorithm 
using the Padé approximant (Roche, 1980 ; Ward, 
1977). The discrete matrices are obtained by compu-
ting only one matrix defined as (Barraud, 1980) : 
^ 
/A(Uk) 
Ad(Uk) 
Bd(Uk) 
I 
= Exp 
B 
0 
0 
.T (11) 
(6) 
T is the sampling period and all matrices are 
constant in the linear case. In the bilinear case 
the matrices used are defined by Eqs.(7) and (8). 
the time-varying nature of the observer appears in 
With the help of the software, open loop studies 

200 
N. Laggoune 
can be performed, the inputs are in selected form 
(step, ramp, sinewave, white noise). In order to 
point out the noise effect on the open or closed 
loop system, white noise can be added to the state 
or outputs. Modelling errors can also corrupt the 
designed control ; thus the user define the system-
parameters separatly with the model-parameters and 
a robustness study can be performed. 
SIMULATION EXAMPLES 
ped in order to bring to the designer a computer 
aid for the use of new difficult techniques. 
ACKNOWLEDGMENTS 
The author wishes to thanks Professor A.Y. Barraud 
for his advices on some numerical aspects of this 
work and for the routines that he reported us. 
REFERENCES 
Neutralization Process 
This first example is a mono-input mono-output neu-
tralization pilot plant. The bilinear model avalai-
ble in a wide range (5-20 liters of solution) is : 
X = A.X + A1.U.X + B.U 
(12) 
where the state X is the normalized concentration 
in (H30+), and U is the base (0H-) flow-rate. The 
identified model is : 
X = 9.266.X + 0.1852.U.X + 0.1706.U 
Am 
Aim 
Bm 
(13) 
In Fig. 4, the model Eq.(13) is assumed to be exact, 
and the linearizing control is performed from the 
initial state (Xo = 0,18) to equilibrium state 
(X = 0.33). Two dynamics are presented D = -50h~1 
and D = -25h~1, the corresponding exponentials 
(first order closed loop responses)are superposed 
to the system's responses.In dashed line the res-
ponse in case of actuator limitation (Umin=-201/h). 
DC Motor 
The DC motor (Hara and Furuta, 1976), is : 
la 
-Ra/La 
0 
0 
-C/J 
la 
0 
-B/La 
+B/J 
0 
Ia\ 
-10 
-0.12 
la 
0 
0.33 
where the state vector has the armature current (la) 
and the angular velocity (w) as components. The 
input vector is the field current (If) and the 
armature voltage (Va). The simulated model is : 
Athans, M. , and P.L. Falb (1966). Optimal Control, 
McGraw-Hill, New-York. 
Barraud, A.Y. (1974). Sur la resolution numérique 
des équations de Ricatti - cas discret -
RAIRO Automatique, Oct 1974. 
Barraud, A.Y. (1980). A propos du calcul de systè-
mes linéaires. Equivalents discrets/continus. 
Internai note, Dec 1980. Laboratoire d'Auto-
matique de Grenoble. 
Bartels, R.H., and R.W. Steward (1972). Algorithm 
432 : Solution of matrix equation A.X+XB = C, 
C. Ass. Compu. Machinery, 15, n°9, 481-483. 
Forsythe, G.E., M.A. Malcolm, and C.B. Moler (1977). 
Computer Methods for Mathematical Computations, 
Prentice Hall, Englewood-Cliffs, New-Jersey. 
Gilles, G. (1983). Une loi de commande optimale 
linéarisante d'une classe de systèmes biliné-
aires multivariables. Journées de l'optimisa-
tion, 11-13 mai 1983, Montréal. 
Hara, S. and K. Furuta (1976). Minimal order obser-
ver for bilinear systems. Int. J. of Cont., 
24, n° 5, 705-718. 
Laggoune, N. (1984a). On the observer of Hara and 
Furuta for bilinear systems, applicability-
test and computation using the singular value 
decomposition. Submitted to Int. J. Cont. 
la ' 
If . 
f 0 +1/La 
0 
0 
1 
1 
'If 1 
Va 
1 
i 
(14) 
If 
la 
(15) 
Figure 5 shows an open loop simulation for two 
différents inputs vectors, for all examples concer-
ning the DC motor the sampling period is T = 0.1s. 
References Changing. In Fig. 6, a goal is to change 
the second state reference at time 5 seconds, wit-
hout any change to the first one. In Fig. 7 the 
iteration number is plotted, as show in the figure, 
it is not prohibitive. The avearage number is 3, 
except for the reference changing moment (9 itera-
tions) . Thus, for this kind of systems, which accept 
a sampling period less then one second, a real time 
processing can be intented. 
CONCLUSION AND PROSPECTS 
Our conversational software now offers interesting 
possibilities for helping the user to simulate, ana-
lize, observe and design some control systems for 
linear and bilinear processes. However, this 
package is still in its beginning phase and its 
specialized nature offers, with few modifications, 
a possibility to develop a real-time processing 
version. This software, still in progress, can be 
easily extended by adding new modules, such as 
more efficients algorithms. In project is the in-
troduction of a symbolic calculus module in order 
to increase the efficiency of the control computa-
tion. For the analysis of bilinear systems (control-
lability, etc...), a special module will be develo-
Laggoune, N. (1984b). Sur la discrétisation de 
l'observateur de Hara et Furuta. Internai 
note, Nov. 1984, Laboratoire d'Automatique 
de Lyon 1. 
Laggoune, N., and G. Gilles (1984). Observateur 
discret d'une classe de systèmes non-linéaires. 
Workshop on non-linear systems, 11-12 sept. 
1984, Grenoble. 
Lawson, C L . , and R.J. Hanson (1974). Solving least 
square problems, Prentice Hall, Englewood-
Cliffs. New Jersey. 
Luenberger, D.G. (1966). Observers for multivaria-
ble systems. I.E.E.E. Trans, on Aut. Cont., 
AC 11, pp 190-197. 
Moler, C.B. (1981). MATLAB user's guide. Computer 
sciences department, University of New-Mexico. 
Roche, J.R. (1980). Application des approximants 
de Padé au calcul de l'exponentielle matri-
cielle. Third cycle thesis, Grenoble. 
Varga, A. (1982). Computer aided design of robust 
compensator by pole assignment. Preprints of 
S0C0C0'82 symp, sept. 1982, Madrid. 
Ward, R.C. (1977). Numerical computation of the 
matrix exponential with accurary estimate. 
SIAM J. Numer. Anal., U±9 pp 600-610. 

A Digital Simulation System 
201 
NORM CONC 
-0.I6E*M -, 
-0.27E+M -| 
Linearized process output 
D = -25. 
D = -50. 
2 β . β β 
η 
β . β β 
_ 
-2Θ.Μ -
1/h 
Control 
_^^"^"-^" ** 
Z—y^ti^^ 
,£ 
^^"~""^-
1 
1 
1 
variable 
. ■ π — 
—· \J — 
~ D = 
1 
- 2 5 . 
- 5 0 . 
1 
CH) 
1 
9.M 
0.1*2 
β.β4 
0.00 
Fig. 4. Neutralization process. 
Output and Input variables. 
0.00 
2.ΘΘ 
Fig. 5. D.C. motor open loop simulation for 
different inputs. 
Curves 1 : U 
Curves 2 : U 
2 A 
50 V 
2 A 
100 V 
0.42E+0I -,Α 
I 
0.34E+0I 
-I 
Linearized process output 1 
0.00 
2.0 
6.00 
8.00 
10.00 
0.2.E+02 - , r d / s 
0.ΙΘΕ+02 -I 
β.00 
10.1 
Fig. 6. D.C. motor closed loop linearization. 
. first reference x 
. second reference 
. initial state 
i ϊ 
/ 3,274\ 
X ( 0 ) 
= ( l 6 , 8 3 ) 
at t = 5 s. 
JL 
0. 0Θ 
2.00 
π 
1 
.00 
10.01 
Fig. 7. D.C. motor iteration number. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER-AIDED DESIGN OF 
DECENTRALIZED CONTROL SYSTEMS BY 
DYNAMIC DECOUPLING 
S. K. Lehmann 
Institut für Regelungs- und Steuerungssysteme, Universität Karlsruhe, 
Karlsruhe, FRG 
Abstract. 
A method for the design of decentralized controllers by decoup-
ling is described. 
The basic concept is the minimization of the influence 
of the other subsystems on the controlled subsystem by proper choice of con-
troller parameters. 
Two criteria to measure this influence are proposed. 
The controller design is carried out by minimization of one of these cri-
teria together with criteria that take into account the performance of the 
decoupled subsystem. 
The implementation of the method as part of a program 
package is sketched and its application demonstrated by means of an realis-
tic example. 
Keywords. 
Computer aided system design; decentralized control; decoupling; 
eigenvalue sensitivity; linear systems; electric power distribution. 
INTRODUCTION 
The many methods for the design of decentral-
ized control systems can be grouped into three 
divisions. 
The first division encompasses methods that use 
the complete model of the overall 
system for 
design purposes. All methods for the design of 
controllers with prescribed structure, as for 
example PREUSS(1981) 
and R0PPENECKER(1983), 
fall into this group. 
The use of the overall 
system, however, becomes very costly, if the 
system order increases. 
The second group consists of methods utilizing 
the subsystem structure for the design by opti-
mal control techniques. The basic concept is a 
partition of the overall 
system HAMILTONIAN 
into subsystem HAMILTONIANs. 
This leads to 
subsystem design problems which are coupled. 
Therefore, they have to be solved simultaneous-
ly or - as it is usually done (GUAN6QUAN, LEE 
1983; HASSAN, SINGH, TITLI, 1979) - recursive-
ly. 
These procedures use the lower order of 
subsystems, but, due to the recursion, are 
still extensive, beside the problem of conver-
gence. 
yields completely decoupled subsystem design 
problems and a good agreement between the per-
formance of the decoupled subsystems and the 
overall system and therefore a system that is 
highly robust against failure of subsystem in-
terconnections. 
The paper is organized as follows. After sys-
tem description and problem statement the con-
cept of subsystem sensitivity is introduced. 
Subsequent sections treat additional design 
criteria, the used design procedure, and the 
realization as part of a program package. By 
means of an example, 
the application of the 
method is demonstrated, and the conclusion sec-
tion summarizes the relevant results. 
SYSTEM DESCRIPTION AND 
PROBLEM STATEMENT 
The systems dealt with are assumed to be lin-
ear, time-invariant, continous. 
The system, 
consisting of r subsystems, is described in the 
interaction-oriented 
notation (LITZ 1983): 
The methods of the third group use an aggregate 
model of the overall system (GEROMEL, BERNUSSOU 
1979), thus employing the body of knowledge 
about connective stability (SILJAK, 1979) for 
the design. 
The methods can exactly assure 
stability of the controlled overall system and 
lead to decoupled subsystem design problems. A 
setback of these methods so far is their in-
ability to take into account other design spe-
cifications than stability. 
The method described here is in some way a de-
rivative of the methods in the third group. 
The exact assurance of overall system stability 
is sacrificed for the possibility to assign 
more specifically the behavior of the con-
trolled system. The basic concept is decoupling 
of the subsystem by its local controller. 
If 
this decoupling 
approach 
is at all 
applicable, as it is for many real systems, it 
*1 
A n ï , +B M l M M i 
+ B D i u D i 
+Zuuu 
^Mi " -Mi—i 
Ii = ^nïi 
l,...,r . 
(1) 
The dimensions of x., u, 
^ e n., PMi 
Mi' 
pDi' pIi' qMi' 
-Di' -Ii' ^Mi' ^Ii 
qj., respectively. 
In (1) BM- and C». are the usual input and 
output matrices, M referring to manipulated and 
measured. EL, is the disturbance input matrix. 
The vectors u,. and y^. describe the coupling 
of the i-th subsystem to all other subsystems, 
I referring to interaction. 
203 

204 
S. K. Lehmann 
The aggregation of these other subsystems is 
referred to as the complement 
system to the 
i-th subsystem. The effect of those subsystems 
on the i-th one is described by the coupling 
equation 
ÜI1 = EVlJ 
j = l 
# 1 
The decentralized control-laws are written as 
"Mi = -Bi^i 
. 
i-l,...,r 
. 
(3) 
The problem on stake is the computation of R. 
for all subsystems such that the performance of 
the controlled overall system is satisfactory. 
The desired behavior can be specified via cri-
teria to be minimized by the controller gains 
or by eigenvalue assignment. For the decoupled 
subsystem, the controller design is a straight-
forward task. 
However, any nontrivial coupling to other sub-
systems affects the system behavior in an un-
predictable manner, may even evolve in insta-
bility. 
The degree to which the coupling affects the 
subsystem behavior is a function of the local 
controller. 
Therefore, 
it is possible to 
choose a controller that assures 
- a satisfactory behavior of the controlled 
decoupled subsystem, 
- a minimal affection of this behavior by the 
complement system. 
Thus, the design specification is "minimal" in-
fluence of the complement system on the con-
trolled subsystem. 
To minimize the influence 
as much as possible two things are needed: a 
criterion to measure this influence and a meth-
od to minimize it by suitable choice of the 
controller variables. 
SENSITIVITY OF SUBSYSTEMS 
The influence of the complement system on the 
subsystem depends on the subsystem itself and 
on the complement system. 
It is possible to take into account both fac-
tors, but this leads to a dependence of the lo-
cal controller on subsystem and complement sy-
stem and thus to an interdependence of the sub-
system design problems. 
In order to avoid such an interdependence, the 
concept of subsystem 
sensitivity 
is introduced. 
Thereby, sensitivity is defined as a property 
of the subsystem alone. The key assumption is 
now that the subsystem performance is not sub-
stantially influenced by any complement system, 
provided its sensitivity is sufficiently small. 
If this assumption holds - it will be shown 
that it does, if sensitivity is measured by one 
of the proposed criteria - the controllers for 
all subsystems can be designed minimizing the 
sensitivity of their subsystem. Thus, for all 
subsystems analogous design problems are to be 
solved, and all these problems are completely 
independent. 
Since through the rest of the paper only sub-
systems are considered, the index i to describe 
a subsystem is suppressed. 
To measure the sensitivity of a subsystem, two 
criteria are proposed. 
The first one utilizes the inverse LAPLACE-
transform G(t) of the subsystem transfer matrix 
G(s) between interaction input and output and 
is defined as 
00 
Jj = j|/tr[GT(t). G(t)]dt' 
0 
G(t) o-· CT [si - A]_1BT 
. 
(4) 
This criterion is the integral of the EUCLI-
DEAN norm of the interaction output, when the 
the interaction input is an impulse function. 
It was used for example by LUNZE (1981) for 
stability analysis of complex systems. 
The second criterion is based on the concept of 
eigenvalue 
sensitivity 
(LITZ 1981). The sensi-
tivity of the m-th eigenvalue to a feedback of 
the i-th interaction output to the j-th inter-
action input is given by 
Am 
* * 
sij= 
- s A j 
· 
< 5> 
with c. [b .] as the (i,m)-th [(m,j)-th] ele-
ment of the output [input] interaction matrix 
of the subsystem 
transformed 
to JORDAN-
canonical form. To obtain a criterion descri-
bing the subsystem as a whole, the eigenvalue 
sensitivities are aggregated as follows: 
qI 
PI 
n 
; 
J
2 - Σ Σ Σ '. ^V 
■ 
<6> 
i=l j=l m=l 
The positive factors y permit weighting of the 
contributions of single eigenvalues. With the 
usual choice 
'■= w 
the summands in (6) are the squared relative 
eigenvalue sensitivities (LITZ 1981). 
By aggregation of subsystem and complement sys-
tem it can be shown that for J, = 0 or J? = 0 
the subsystem is not influenced by any comple-
ment system. For reasons of continuity, it fol-
lows that the influence of the complement sys-
tem will be negligible, if one of the sensiti-
vity measures is sufficiently small - indepen-
dent of the complement system encountered. Thus 
the sensitivity criteria J, and J? full fill the 
above stated assumption and are therefore both 
usable for the controller design. 
The main advantage of the second criterion is 
the availability of its gradient to the design 
parameters (LEHMANN 1984). 
Therefore, 
this 
criterion will be used exclusively. 
ADDITIONAL 
CRITERIA AND 
MULTIOBJECTIVE OPTIMIZATION 
Beside the dynamic decoupling of the subsystem, 
a satisfactory performance of the decoupled 
subsytem and - in many practical cases - a 
specified structure of the controller is to be 
achieved. 

Design of Decentralized Control Systems 
205 
These two requirements can be taken into ac-
count by the criteria 
JT = j [xT3xx + MMS„MM] dt 
« M ^ M J 
(8) 
Moreover, the method is numerically very effi-
cient in connection with the criterion J0. From 
(5) it follows 
V 
S X m - wTb cT v 
bij " -m-Ij^Ii-m 
(12) 
and 
% 
- Σ 
i=l 
PM 
2 
E d i j r i j 
· 
j=l 
d i j 
(9) 
Is a controller element r. . to be zero, d,· is 
set to a large value. The minimization of JN 
will then yield a negligibly small r... Due to 
specific design requirements, 
additional cri-
teria can be defined. 
Thus, the sensitivity criterion is just one 
other design criterion on the subsystem level. 
The controller is designed by minimization of 
these several criteria. To perform this multi-
objective optimization, two approaches have 
been used. For a small number s of criteria 
say s < 4), the minimization of a weighted sum 
The y 
are the eigenvectors given by (11), 
T 
the w the row eigenvectors of the controlled 
subsystem, 
the rows of the inverse modal ma-
trix. bj. [Cr.] denotes the j-th column [i-th 
row 1 of the interaction input [ output ] ma-
trix. Since the modal matrix and its inverse 
have to be computed for the controller design 
[ see (11) ], the evaluation of the criterion 
does not require any additional complex calcu-
lations. 
Even the gradient of the criterion can be ex-
pressed as a function of the v and w . Due to 
r 
-m 
-m 
(6) and (12) the calculation of the gradient of 
J« requires essientially the evaluation of the 
*- 
T 
derivatives of the vm and wm to the design pa-
-m 
-m 
J r 
rameters, i. e. to the X R. and p.. For these 
derivatives it can be found (LEHMANN 1984): 
s 
■Σ 
i = l 
a.J1 
ai 
(10) 
criteria J, with interactive variation 
is completely suf-
of the 
the weighting 
factors 
ficient. As the number of criteria increases, 
this handling of the weighting factors, which 
is crucial for the success of the design, be-
comes more and more difficult. In these cases, 
the 
vector 
optimization 
method 
due to 
KREISSELMEIER/STEINHAUSER (1979) has been found 
as an efficient alternative. 
The controller design itself relies on a tech-
nique developed by ROPPENECKER (1983). The cor-
nerstone of the approach is a parametric ex-
pression for a state feedback controller which 
reads 
8v, 
^[A-x^irV^ 
^ [ A - X ^ i r V ^ 
dw„ 
T^k 
3X R k
 = " *k*m 8X R k 
8Ëf = " -A 9^ 
umk 
1 if m = k 
0 if m t k 
(13) 
R 
= [£!>···,£„][ Υι.····Υη I" 
Y, - [ A - X R 1 I J ' V i 
i 
= 1,... ,n 
. (Π) 
In this expression, X R, is the i-th eigenvalue 
of the controlled (sub)system, y. the i-th ei-
genvector and p. the i-th invariant 
parameter 
vector (ROPPENECKER 1981, FAHMY/O'REILLY 1982). 
The closed loop eigenvalues and invariant para-
meter vectors are all degrees of freedom of a 
state feedback controller. In order to minimize 
the design criteria, the p. and - within cer-
tain bounds - the X R. are varied. 
One advantage of this method is the additional 
control of the eigenvalues. 
The problems of 
instable systems in the course of the optimiza-
tion are thereby completely avoided. 
The knowledge of the gradient considerably fa-
calitates the numeric minimization of the se-
cond 
sensitivity criterion. That is why this 
criterion is appropriate in the most cases. 
The design procedure outlined so far, requires 
a multiobjective optimization, the formulation 
and evaluation of different design criteria and 
finally the aggregation and analysis of the 
controlled overall system. 
Although the com-
plexity of the problem has been greatly reduced 
by working on the subsystem level, the use of 
a digital computer is inevitable. 
Therefore, 
the method has been implemented as part of a 
CACSD-package, which is described in the next 
section. 
IMPLEMENTATION OF THE METHOD 
Due to space limitations, only a few aspects 
related to decentralized systems and multiob-
jective optimization will be covered here. 
The program system consists of a number of pro-
grams written in FORTRAN 77 which form three 
groups: 

206 
S. K. Lehmann 
1. Programs for the handling of system data 
2. Programs for system analysis 
3. Programs for system design 
The programs exchange information in a formal-
ized fashion. 
For this purpose, the following 
data types, i. e. unformatted FORTRAN-records 
of well defined structure, have been defined: 
REMAT 
(Rectangular matrix) 
LITIS 
(Linear, time-invariant (sub)system ) 
OVSYD 
(Overall system description ) 
SIMRE 
(Simulation results) 
PLODA 
(Plot-data) 
As the FORTRAN-records are unformatted, they 
cannot be handled by usual 
EDITORS, but only 
by special programs. This guarantees the com-
patibility of the records at all instances. 
The programs to handle the records form group 
1. The most important ones are given below: 
C0N0V1 - computes the controlled overall 
system. 
MATED1 - handles data of type REMAT. 
SYSED1 - handles data of type LITIS. 
0VSYS1 - computes the overall system using 
using OVSYD data. 
The most frequently used data type is the type 
LITIS. 
It is based on the system description 
(1) and has the following structure: 
1. Record: Vector of 12 INTEGER-numbers, 
containing dimensions 
(mandatory) 
2. Record: Dynamic matrix 
(mandatory) 
3. Record: Manipulation-Input-Matrix 
(optional) 
4. Record: Interaction-Input-Matrix 
(optional) 
5. Record: Measured-Output-Matrix 
(optional) 
6. Record: Interaction-Output-Matrix 
(optional) 
7. Record: Disturbance-Input-Matrix 
(optional) 
8. Record: Documentation-String 
(optional) 
The programs of group 2 provide several options 
for analysis. Some programs and their purposes 
are given below. 
EIGSY1 - Modal transformation of a system 
EIGMA1 - Eigenvalue/eigenvector computation 
for a matrix 
INZER1 - Computation of invariant zeros of a 
system 
SIMUL1 - Simulation of a linear system 
All programs expect input data of type REMAT or 
LITIS. 
The program SIMUL1 - as well as other 
simulation programs - generates output data of 
form SIMRE which are input to the not mentioned 
plot programs. The use of these programs is by 
no means restricted to decentralized systems. 
The programs of group 3 are design programs. 
In the following, only those programs are lis-
ted that support the design by dynamic de-
coupling. 
All these programs treat one subsystem at a 
time. This enables complex computations with 
acceptable effort due to the low order of sub-
systems. After design of controllers for all 
subsystems independently the program C0N0V1 can 
be used to aggregate the controlled overall 
system for simulation purposes. 
The following design programs are available: 
DYDEC1 
DYDEC2 
DYDEC5 
DYDEC6 
DYGRA1 
DECEN1 
MINVS4 
are small, fast programs which 
only 
minimize a sensitivity criterion by ei-
genvalue variation for subsystems with 
a single manipulation input. 
They use 
both mentioned criteria, but don't use 
gradients. 
They are mainly used to 
check, whether design by decoupling is 
at all feasible. 
minimizes a modal 
sensitivity criteri-
on, is similar to the DYDECn programs 
but uses gradients. 
is a large, 
comfortable program which 
by vector-optimization technique mini-
mizes several criteria, especially all 
criteria mentioned in the paper. 
is designed to handle large subsystems 
with several manipulation inputs. The 
eigenvalues of the controlled subsystem 
are to be specified exactly and a 
weighted sum of only three criteria is 
minimized using gradients. 
Standard mathematical 
problems in all programs 
are - if possible - solved by subroutines of 
the commercial NAG (National ALgorithms Group) 
program 1ibrary. 
The computations for the following example were 
carried out by MINVS4 and DYDEC6. 
EXAMPLE 
In order to demonstrate the use of the method 
and the program system described, the design of 
load-frequency control 
for an electric power 
distribution network is shown. 
The system is described by CUNO (1981). It con-
sists of three local networks connected by 
power lines. The order of the overall system is 
36, its structure is depicted in Fig. 1. 
For the purpose of decentralized control system 
design the system must be decomposed into sub-
systems. One obvious decomposition are the lo-
cal networks. 
This approach yields three sub-
3Power-
Plants 
3 Power-
Plants 
Fig. 1. Structure of power network 

Design of Decentralized Control Systems 
207 
systems of order 16, 9 and 8. 
Using MINVS4, 
for all three subsystems state feedback con-
trollers were designed. 
Since all state vari-
ables are measurable, no additional 
structure 
contraints were placed on the controllers. The 
performance of the controlled 
system show Fig. 
2 to 5. In all four simulations 
frequency re-
sponses to a load increase of 1000 MW in the 
local network 3 are depicted. In Fig. 2 the de-
coupled subsystem 3 and the overall 
system are 
compared. 
Overall System 
Local Network 3 
o 
b 
m 
. o -
a> 
"a 
° b 
3 S 
<L> 'η1 
IX 
σ -
L 
\Χ? 
1 / 
\ 
I 
ν' 
Γ\ 
r 
\ y 
Time (Seconds) 
Fig. 2. Decoupled and overall system 
It can be seen that the dynamic 
behavior of 
the subsystem does not substantially 
differ 
from the behavior of the overall system. How-
ever, the size of the frequency drop is reduced 
by the support of the other subsystems, a de-
sired property. 
Fig. 3 compares the overall system 
controlled 
by state feedback with the same system control-
led by conventional load-frequency control. 
Conv. Control 
State Feedback Contr. 
o 
d 
O 
* § 
</> 
O o 
g 
o-> o 
σ? 
IX 
in 
b -
1 
h 
/ 
* . 
\ 
' 
u 
JL 
\ 
\ NÜ 
·*" 
/ n 
s 
**»«»» 
Time (Seconds) 
Fig. 3. Decoupling and conventional control 
The frequency drop is only minimally reduced by 
the more refined control 
system, as this drop 
is mainly due to the slow dynamics of the pow-
er-plants as compared to the fast dynamics of 
loads and tie-lines. At first sight, the situ-
ation concerning the stationary frequency off-
set appears even worse: 
the more complex con-
trol gives rise to a significantly 
larger 
offset. However, as zero offset is required, a 
secondary control using integral action is nec-
essary in both cases. 
The design of such con-
trol scheme is considerably 
easier for the the 
system with the state feedback control. The 
reason for the problems designing the secondary 
control for conventionally 
primary controlled 
plant is the peak at 18 s. 
This peak leads 
\/ery easily to positive frequency deviations, 
when secondary control is applied, and this is 
to be avoided at all instances. 
On the other 
hand, for the system controlled by the state 
feedback controller the secondary control is 
designed quite easily using the classical meth-
od (GRANGER 1931) with a slight modification. 
Fig. 4 shows the overall system with primary 
and secondary control. 
Secondary control appl. 
No secondary cont. app. 
o 
b 
O 
>N 
σ o 
o 
en o 
0) 
IX 
to 
b -
/ 
y 
_ i _ 
n** 
IVinfln
w 
40 
60 
Time (Seconds) 
Fig. 4. Primary and secondary control 
Another important feature of the decoupling de-
sign is the reliability of the controlled sys-
tem. To demonstrate this, in Fig. 5 a typical 
"deasaster-type" situation is considered: 
A 
sudden load increase in local 
network 3 and at 
the same instance failure of all power lines to 
the other subsystems. 
As the decoupled subsy-
stem was considered in the design, the now iso-
lated system shows the expected acceptable be-
haviour, offcourse with a greater offset. The 
conventional 
load-frequency 
control 
however, 
completely fails. 
Conv. Control 
State Feedback Contr. 
o 
b 
m ,-
o 
J ? 
c 
a> 
IX 
b -
/ 
X 
A 
1 1 
/ ■\ 
1 \ I 
7 
V 
Λ 
/ 
\ 
\l 
\/ 
Λ 
/ 
\ , 
V 
A 
/ 
\ , 
\ j r V' r-
Time (Seconds) 
Fig. 5. Behavior of decoupled subsystem 3 

208 
S. K. Lehmann 
CONCLUSION 
The design of decentralized control systems via 
decoupling methods enables design completely on 
the subsystem level. 
Moreover, the subsystem 
design 
problems are completely decoupled and 
can be tackled by any method known from cen-
tralized control, 
whereby the decoupling re-
quirement can be taken into account by one ad-
ditional 
design criterion. 
Two additional 
advantages of the procedure are the reliability 
to failure of subsystem 
interconnections and 
the assignment of eigenvalues 
specifically to 
certain subsystems. 
ACKNOWLEDGMENT 
The support of the Deutsche Forschungsgemein-
schaft 
(Grant Nr. Fo/71-13) for this 
research 
project is gratefully acknowledged. 
REFERENCES 
CUNO, Bernd (1981). Anwendungsbeispiel zur ro-
busten Regelung: 
Übergabeleistungs-Fre-
quenzregelung in elektrischen 
Verbundnet-
zen. 
2. 
Workshop 
Robuste 
Regelung. 
Interlaken. 
FAHMY, M.M. and J. O'REILLY (1982). 
On Eigen-
structure Assignment in Linear Multivari-
able Systems. IEEE Transactions 
on Automa-
tic Control, 
27, 690-693. 
GEROMEL, J.C. and J. Bernussou (1979). Stabili-
ty of two-level 
control schemes 
subjected 
to structural perturbations. 
International 
Journal of Control, 
29, 313-324. 
GRANGER, H. (1931). Deutsches Reichspatent DRP 
DRP 634 025 from Feb. 8th,1931. 
GUANGQUAN, Li and Gordon K.L. LEE (1983). De-
centralized control of large scale 
systems 
with dynamic interconnected subsystems. In-
ternational 
Journal 
of 
Control, 
37, 
775-786. 
HASSAN, M.F., M.G. SINGH and A. TITLI (1979). 
Near Optimal 
Decentralized Control 
with a 
Prespecified Degree of Stability. 
Automa-
tica, 
15, 483-488. 
KREISSELMEIER, G. und R. STEINHAUSER (1979). 
Systematische Auslegung von Reglern durch 
Optimierung eines vektoriellen 
Gütekrite-
riums, Regelungstechnik, 
27, 76-79. 
LEHMANN, Stefan K. (1984). 
Entwurf dezentraler 
Regelungen mit Hilfe von Entkopplungsver-
fahren. 
Regelungstechnik, 
32, 345-448 and 
373-376. 
LITZ, Lothar (1981). 
Berechnung stabilisieren-
der Ausgangsrückführungen mit Hilfe von 
Polempfindlichkeiten. Regelungstechnik, 
29, 
434-440. 
LUNZE, Jan (1980). 
Ein Verfahren zur Stabili-
tätsprüfung 
für gekoppelte Systeme bei 
fehlerhaftem Modell. 
Messen-Steuern-Re-
geln, 23, 374-378. 
PREUSS, Hans Peter (1981). 
Successive pole 
shifting by state controllers of prescribed 
structure. 
International 
Journal 
of Con-
trol , 33, 1059-1071. 
R0PPENECKER, Günter 
(1981). 
Pol vorgäbe durch 
Zustandsrückführung. Regelungstechnik, 
29, 
228-233. 
ROPPENECKER, Günter (1983). 
Vollständige mo-
dale Synthese linearer Systeme und ihre An-
wendung zum Entwurf 
strukturbeschränkter 
Zustandsrückführungen. 
Fortschrittsberich-
te der VDI Zeitschriften, 
Reihe 8, Nr. 59. 
SILJAK, Dragoslav D. (1978). 
Large-Scale-Dyna-
mic-Systems. 
North-Holland, New York-0x-
ford-Amsterdam. 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INTERACTIONS IN DYNAMICAL SYSTEMS 
IDENTIFICATION 
N. E. Madzarov, I. G. Kalaikov, E. M. Garipov and P. G. Ganev 
Department of Automatics, Higher Institute of Mechanical and Electrical 
Engineering, Sofia, Bulgaria 
Abstract. The paper deals with the improvement of system identification 
procedures by interactions between the user and the computer. The basic 
identification algorithms are discussed with respect to the necessity 
of dialog at some places of the procedure and the efficiency of that 
approach for model and parameter estimation. All refered problems are 
implemented 
in the interactive software system named INSOF-I. The 
conception and consideratons for its hierarchical structure are given. 
All ideas of the man-machine interaction supported by the protocol and 
graphical output of INSOF-I are demonstrated by the generalized 
least 
squares estimation method. 
Keywords. Interactive systems; identification; parameter estimation; 
computer aided design; linear continuous-time and discrete time systems. 
INTRODUCTION 
The interactive principle is applied as a modern 
approach in development of software paskages for 
control system design. Some authors (e.g. Lemmens, 
1979; Astrom,1981) have pointed out the following 
main advantages of the interactive operation in 
dialog with the computer in comparison with the 
traditional computer usage: 
- the problems can be solved by users having mini-
mal knowledge in programming, most often by means 
of natural for each group of specialists language; 
- differently qualified persons can be effectively 
teached not only in computer practice but in 
their speciality details as well; 
- a real-time interactive mode of operation is 
available, therefore a better studying of compu-
ter control problems can be done; 
- the terms and the financial ammount for project 
development can be sihnificantly reduced, etc. 
The system identification is one of the problems 
that can be solved effectively in interactive mode 
of operation. Many interactive packages for identi-
fication (in some cases as subsystems of more comp-
lex software systems) are described in the specia-
lized literature (e.g. Denham and Abaza,1975; Wies-
lander and Gustavsson,1976; Schmid and Unbehauen, 
1979; Dymshiz,1979; Furuta and( co-workers,1981 ; 
Young,1982). This list can be continued by another 
similar works. It must be noted that the comments 
on the identification methods and algorithms imple-
mentation in the mentioned above references are not 
sufficient if their rational use in interactive 
mode is considered. Report on it, a general conclu-
sion of the main steps in the identification proce-
dere, in which the engineer's intervention and 
making a decision for turning the computation flow 
to desired direction takes an important place, is 
made in the present paper. The authors' experience 
in building up of an interactive program system 
INSOF-I (iNteractive SOFtware for Identification) 
is shared. Illustrative examples support a concrete 
assumed but quite general approach of working in 
interactive mode. 
METHODS AND ALGORITHMS FOR INTER-
ACTIVE SYSTEM IDENTIFICATION 
The identification procedure includes three main 
stages; 
- separation of the plant from its environment, 
development of general concept about it and an 
idea about its interrelations with the environ-
ment; 
- design of experiments, according to this idea, to 
acquisite information about measured signals; 
- data processing via definite methods to obtain 
the plant mathematical model and its validation. 
In practice this sequence of operations is realized 
always by repeating it entirely or in stages. Thus, 
after the engineer's competent intervention in 
certain moments of the man-computer communication, 
the degree of uncertainty in the identification 
problem solving is eliminated considerably. While 
the last two stages in the identification procedure 
are based on strong scientific theory and use well 
mathematized and algorithmized methods, the first 
one is associated above all with putting empirical 
rules into practice. Here it is relied on the 
researcher's experience and intuition for implicit 
use of the results in the third stage. 
The identification, in spite of the tendency to-
wards maximal formalization as a procedure, remains 
a creative step in the process of control system 
design. The creative element is developing by im-
plementation of interactive systems, which include 
not only algorithms based on exact mathematical 
rules but on expert subsystems with the specia-
lists' experience putted there. This, in the condi-
tion of man-computer interaction in the identifica-
tion problems, it is get over the rupture between 
the applied engineering approach and the mathemati-
cal one, which intil recently was blamed for inne-
cessary theorizing and establishing difficult to 
use methods for great number of engineers. 
The following considerations are to be taken into 
account in the implementation of interactive soft-
ware systems for identification: 
209 

210 
N. E. Madzarov et al 
1. The identification is not a self-purpose prob-
lem. The ungrounded model complication with unne-
cessary details leads usually to "excess" in terms 
of the problem solved by this model. If the problem 
is controller synthesis, this "excess" can not only 
bother it but make worse the control system beha-
vior as well. It is obvious that the model have to 
represent only these real plant characteristics 
that correspond with the solving problem. Thus the 
identification must be considered as a tool to 
reduce the nature variety and this reduction have 
to (may) be purposefully controlled by man-computer 
interaction. 
2. The control system design problems solved 
via 
the plant model, are normally better adopted to 
certain model structure. Every software system for 
identification have to offer some possibilities 
for choice of an appropriate model structure (e.g. 
parametric or noparametric model, continuous-time 
and discrete-time model, model contaning also the 
noise model and so on). The choice of a structure 
and the clarification of its advantages over the 
rest structures is a hard formalized problem that 
successfully can be solved in interactive mode. 
3. The practice (e.g. the controller 
synthesis) 
most often requires an examination of the plant 
local properties. These ones are well expressed 
by means of linear continuous-time or discrete-ti-
me models. This class of models has an essential 
advantage that their structures are defined unam-
biguously by the order of the corresponding diffe-
rential (difference) equation and the time delay 
at the model inputs. In spite of the possibility 
of some kind of formalization, the estimation of 
these model structural parameters is a multivari-
ant procedure and it is desirable to solve it in 
interactive mode. 
4. The most identification problems can be solved 
successfully in batch mode processing as well. The 
interaction approach increases significantly the 
intellectual power of man-computer system and ensu-
res all modern conveniences for operative activity. 
In such case the specialists solve their problems 
directly with no need of the programmer's mediati-
on in clear and easy to learn problem-oriented lan-
guage. 
Taking into account the objective trends for compu-
ter aided design exclusively in interactive mode of 
operation and the refered features of the identi-
tication problems the given below main groups of 
tasks are included in INSOF-I system (Kalaikov and 
co-workers,1983), made with the participation and 
under the guidance of the authors. 
Time Series Analysis 
The effectiveness of the identification methods 
depends on the statistical properties of the expe-
rimental data. Most of the parameter 
estimation 
methods require the input-output observations to 
be zero mean gaussian stationary stochastic proce-
sses. Therefore the stage of expetimental data pre-
processing includes a normality test and a stati-
onarity test (Bendat and Piersol,1971). If some of 
these tests gives unsatisfactory resulrs, the user 
must try to detect and remove the corresponding 
components in the realizations, e.g. applying low-
pass or high-pass filtering, trend removal, cente-
ring and so on, which are implemented by appropri-
ate software modules. 
Model Order and Time Delay Estimation 
The parameter estimation is accomplished after the 
model structure has been obtained. If linear mo-
dels are considered, their structure is determined 
unambiguously by the differential (difference) 
equation order and the time delay. Subjective es-
timates of the structural parameters are often pre-
fered since the objective criterias usually lead 
to unacceptably large values of the model orber. 
It is possible to reduce it involving time delay. 
The significant advantages of the interactive ap-
proach are clearly delineated if the wide variety 
of structure identification methods are taken in-
to account. 
Two ways to estimate the model structure parame-
ters, which depend on the available information, 
are provided in INSOF-I: 
Input-output observations. A combined method, in-
cluding subjective and objective procedures, is 
applied. The subjective procedure is based on vi-
sual evaluation of the determinant ratio of infor-
mation matrices (Unbehauen and Gohring, 1974) un-
der fixed time delay and variable model order. In 
case of ambiguous estimates the most probable mo-
del order value is choosing by the objective pro-
cedure of the F-criteria after the standard loss 
function has been computed. This approach is illus-
trated in Table 1, where a concrete example of ma-
king a decision is outlined. There IDn,r means the 
determinant ratio of the corresponding information 
matrices, 3 is the output additive noise level, Q 
is the loss function value, m and r are the model 
order and time delay, (n*, r*) and (n,r) are res-
pectively the subjective and objective estimates 
of (n,r). The graphic logID=f(n) is shown in the 
middle of the table. 
TABLE 1 Structure Identification Based on 
Input - Output Observations 
Pulse response. In this case the infotmation mat-
rices are formed by estimates of the pulse respon-
se instead of the input-output observations. The 
couple (n,r),for which the corresponding determi-
nant ratio is approximately constant, is accepted 
as a valid estimate of n ahd r. The time delay va-
lue is determined visually looking at the pulse 
response curve. By the same example this method is 
shomn in Table 2, where d?,r means the determinant 
ratio of infotmation matrices, and ktand k2are the 
initial and end value of the examined time inter-
val. The graphic d=f(j) with different values of n 
and r is placed in the middle of the table. 
It is evident that both problems are based on ef-
ficient man-computer interaction as at this step 
an input information (data arrays, structural pa-
rameters) is formed or selected for the real stage 
of the identification procedure. 

Interactions in Dynamical 
TABLE 2 Structure Identification Based on 
Pulse Response 
Nonparamentic Model Estimation 
The matrix pulse response of the plant, that func-
tion in closed loop with digital controller (Madza-
rov and co-workers,1983) is estimated. Consistent 
estimates can be obtained only if the experiment is 
complicated by inserting of an additive measured 
input perturbation - white gaussian noise or pseu-
dorandom binary sequence 
(PRBS). That additive 
signal is considered to be a plant input signal in 
opened loop identification. The matrix pulse res-
ponse is computed by means of iterative algorithm 
using the found recursively or in off-line mode 
crosscorrelation functions estimates of the corres-
ponding input-output and additive signals. The 
obtained pulse response estimate can be used as a 
final nonparamentric model of the plant or as an 
intermediate product for parameter identification. 
Parametric Model Estimation 
The parameters of a p input and r input model, 
represented as a matrix transfer function, are 
estimated. The choosen form permits the plant to be 
decomposed into r subplants with single output (the 
MISO model). After the structural parameter have 
been obtained the well known estimation methods -
least squares, instrumental variable, maximum like-
lihood - are applied. The tasks are constructed in 
sich a way that both discrete-time and continuous-
time (via disctere orthogonal transformations, 
Kalaikov and Garipov, 1984) models can be utilized. 
The numericaly stable procedures of LINPACK (Don-
garra and co-workers,1979) are used for solving the 
respective systems of algebraic equations. 
Systems Identification 
211 
On-line Estimation Procedures 
The on-line estimation is aimed first and foremost 
with the determination of control signal to the 
plant when the plant dynamic properties or environ-
ment's ones are changed, i.e. when an adaptive 
control is needed. These procedures can be realized 
if a computer with a data acquisition subsystem is 
available. In our case a personal microcomputer 
(like Apple II) with necessary accessories (A/D and 
D/A converters, floppy-disk drives, digital plotter 
and corresponding software modules) is used. The 
presence of such an intelligent terminal in the 
interactive system allows the implementation of va-
rious operations - beginning with data acquisition 
from the examined plant and ending with the design 
and analysis of complex control algorithms in hier-
archical systems. 
The included in INSOF-I on-line 
identification 
algorithms are based on the square root filtering 
method (Peterka, 1975) and some decomposition me-
thods from LINPACK, which ensure a sufficient pre-
cision on computers with limited machine word. All 
the algorithms are intended for both discrete-time 
and continuous-time MISO model estimation. 
STRUCTURE AND ORGANIZATION OF 
THE INTERACTIVE SYSTEM 
The INSOF-I has a four level hierarchical struc-
ture. The modules of the first and second level are 
programmed as callable subroutines. Those of the 
third and forth level are main programs that call 
only the subroutines of the lower levels. 
On the first (the lowest) level basic mathematical 
functions are placed which are an extention to the 
standard subroutine libraries. Other part of the 
first level 
includes functions depending on the 
operating system (input-output operations, communi-
cation modules with the operating system). 
These 
modules move the intersection lines with the OS 
from the higher levels to the lowest one. In this 
way the programs from the higher levels become 
portable. The adaptation of INSOF-I to different 
computer or OS requires changes in the lowest level 
modules only. 
The second level includes modules that realize the 
numerical methods as the program package LINPACK 
and form the scientific and engineer library of the 
system. 
On the third level the main programs, which imple-
ment the identification and parameter estimation 
tasks, are placed. They all are executed indepen-
dently, activated by a monitor program (kernel) of 
the INSOF-I, placed on the forth 
(the highest) 
level. The monitor program organizes and dispatches 
the system operations, manages the distribution of 
the computer resourses, alternates the working mode 
of the lower level programs. 
The INSOF-I processed data are organized in disk 
mass storage files with specified and 
standartized 
a priori structure. Each file is a data array 
simply defined during the program execution. The 
file content is indicated via parameters included 
in a common information block of the INSOF-I files: 
* file name; 
* file structure parameters: 
- data type (e.g. time series,matrices), 
- data word length in bytes, 
- information type (e.g. system representation 
form - continuous-time or disctere-time model); 
* additional parameters: 
- date and time of file creation, 
- file creating task name and comments. 

212 
N. E. Madzarov et al. 
After that title information the real content of 
the file is stored. Its dimension and structure 
depends on the actual data. 
The INSOF-I gives up the user a set of commands 
which implement the above mentioned 
identification 
and estimation problems as well as some specific 
utility functions 
(data entry and manipulation, 
file copying and transformation etc). Each opera-
tion performs a single command carried out by an 
individual main program. The command string is 
formed in a standard manner in order to be learned 
and used easily: 
Name 0F1 ,0F^ ,.../KW < /KW, ... = 
IF,,IF, ,.../KW. /KW4 ... 
where the attributes are: 
Name - the command name, 
OF; - output file identifier, 
IF; - input file identifier, 
KW; 
- keyword, 
Exampe: 
CORF RUY/20 = U,Y/500 
(estimation of 20 ordinates of the crosscorrelation 
function RUY using 500 points of signals U and Y ) . 
The command string interpretation is realized in a 
way that the interaction details depend on the 
user's qualification degree. The higher his quali-
fication the shorter the dialog is (or is missing 
at all) and vice versa. This is specific for each 
command and depends on how complete and correct the 
command string is. The list of the basic INSOF-I 
commands is given below. 
TABLE 3 
List of INSOF-I Commands 
Name 
Function 
MSTE j Model structure parameter estima-
tion (model order and time delay) 
NPME j Nonparametric model estimation 
! (matrix pulse response) 
DLSQ I Least squares parameter estimation 
DIVA 
\ Instrumental variables parameter 
i estimation 
DMXL 
Maximum 
likelihood 
parameter 
! estimation 
RNPE j Recursive nonparametric model 
I estimation 
RLSQ 
Recursive LS parameter estimation 
RIVA 
Recursive IV parameter estimation 
RMXL 
Recursive ML parameter estimation 
ARME 
Parameter estimation of AR models 
MDTR I Model transformation (nonparametric 
model 
parametric model) 
WPWZ 
Discretization of continuous-time 
systems 
SNST 
Normal distribution and stationary 
tests 
SPRO 
Signal processing 
CORF 
Correlation function estimation 
SPDF 
Spectral power density function 
estimation 
READ 
Data input 
TYPE 
Data output (on system printer) 
PLOT 
Data output (on plotter) 
SGEN 
Test signals generation 
SMOD 
Modelling of continuous-time and 
discrete-time systems 
DEFM 
Definition of macro 
CALL 
Execution of macro 
RTRN 
Exiting from macro 
GOTO 
Conditional or unconditional 
branch in macro 
ASKI 
Input of vatiable, used in macro 
In order to give the users to delelop their own 
problems by means of the established command set 
defined in advance, command sequences named macros 
are used. Their application is recommended if pre-
liminary fixed sequences of operations have to be 
carried out or complex computational methods exami-
ned 
alreaby 
must be realized. Every macro is 
created 
in text editing mode under the control of 
the INSOF-I monitor program and can be called by 
all users. The macro text is a set of translated 
(interpreted) INSOF-I command strings. As an exam-
ple on Fig. 1 the text of macro "DGLS"is given, 
which performs the generalized least squares esti-
mation method in the following steps: 
- initial parameter "PAR" and residuals "E" estima-
tion via least squares method (command "DLSQ"); 
- statistical analysis of residuals (observing the 
correlation function "RE", obtained by "CORF" and 
plotted by "PLOT"); 
- making a decision to stop the iterations and to 
exit from the macro (commands "ASKI" and "RTRN"); 
- synthesis of whitening filter "FIL" on the base 
of the resisuals "E" (command "ARME"); 
- filtering of the input-output sequences "U" 
"Y" through "FIL" (command "SPRO"); 
- repetition of the procedure (unconditional 
to the beginning - command "GOTO"). 
and 
jump 
Protocol and graphical outputs of the INSOF-I work 
including the macro "DGLS" execution are shown as 
an example on Fig. 2 (the structural parameters 
estimation procedures are not illustrated because 
they are outlined in Table 1 and Table 2). 
1 * 
************************************** 
2 * * "OGLS" - GENERALIZED LEAST SQUARES * 
3 * * 
ESTIMATION OF DISCRETE-TIME MODEL * 
4 * 
************************************** 
5 DLSQ 
PAR , E = U > V /DI 
6 TVPE PAR 
7 CORF 
RE /20 = E > E /33 
8 PLOT 
RE 
9 * MAKE 
VOUR 
DECISION s 
19 * 1 - TO CONTINUE THE PROCEDURE, 
11 * 2 
12 **=> 
13 ASKI 
14 GOTO 
15 RTRN 
16 ARME 
17 SPRO 
18 SPRO 
19 GOTO 
- TO EXIT. 
11 
Il /16 
FIL , EE 
V = FIL f 
U = FIL , 
5 
= E 
V 
U 
Fig. 1. 
Text of macro "DGLS" 
CONCLUSION 
The paper deals with the problem of the dynamical 
system identification in interactive mode of opera-
rion. Some considerations about the active user's 
intervention to obtain an acceptable (from engi-
neer's point of view) plant model in short terms, 
are disscussed. The main principles of the interac-
tions realized in the software system INSOF-I for 
parametric and nonparametric identification are 
described. This package satisfies the most modern 
CAD system features: modular structure, portabili-
ty, possibility of extension without rebuilding, 
multiuser mode of operation, convinient data base, 
flexible and easy to adjust dialog, error protec-
tion, etc. The development and improvement of 
INSOF-I is connected with the extension of both the 
classes of models and identification methods. 

Interactions in Dynamical Systems Identification 
213 
REFERENCES 
Astrom, T., and H. Elmquist (1981). Perspective 
on interactive software for computer 
aided 
modeling and design of control systems. 
IEEE 
Conf. on Dec, and Control, San Diego. 
Bendät^ 
T. ST^ and A. G. Piersol (1971). Random 
data; analysis and measurement procedures. 
Wiley-Interscience, New York. 
Denham, M. J., and B. A. Abaza (1975). System 
identification package (SYSID). Publ. 75/28. 
Dept. of Comp. and Control, Imp.College,London. 
Dongarra, J. J., J. R. Bunch, C. B. Moler, and G.W. 
Stewart (1979). 
LINPACK user's guide. 
SIAM, 
Philadelphia. 
Dymshiz, E. (1979). 
A process computer program 
package for interactive computer aided design 
of multivariable control systems. Proc. of 2th 
IFAC/IFIP Symp. SOCOCQ, Prague. 
Furuta, K., S. Hatakeyama, and H. Kominami (1981) 
Structural identification and software package 
for linear multivariable systems . Automatica, 
vol. 17. 
Kalaikov, I. G., and E. M. Garipov (1984). 
A 
generalized algorithm for identification of 
continuous multivariable systems. Prepr. of 3rd 
Int. Conf. on Syst. Engineering, Dayton, Ohio. 
Kalaikov, I. G., E. M. Garipov, S. B. Maleshkov, M. 
S. Sulemezova, and P. G. Ganev (1983). Inter. 
active system for identification of dynamical 
models. 8th Int. Conf. on Syst. Sei., Wroclaw. 
Lemmens, W., and A. Van den Boom (1979). Interac-
tive computer programs for education and re-
search: a survey. Automatica, ovl. 15. 
Madzarov, N. E., S. B. Maleshkov, N. S. Sulemezova, 
and P. G. Ganev (1983). 
Identification of 
process in closed loop. 
8th Int. Conf. on 
Syst. Sei. Wroclaw. 
Peterka, V. (1975). Ä~square root filter for real-
time multivariable regression. 
Kybernetika, 
vol. 11. 
Schmid, C , and H. Unbehauen (1979). 
KEDDC, 
a 
general purpose CAD software system for appli-
cation in control engineering. 
Proc. of 2nd 
IFAC/IFIP Symp. SOCOCQ, Prague. 
Wieslander, J., and I. Gustavsson (1976). IDPAC -
An efficient interactive identification prog-
ram. Prepr. 4 th IFAC Symp. on Ident.and Syst. 
Param. Est., Tbilisi. 
Unbehauen, H., and B. Gohring (1974). 
Test for 
determining model order in parameter estima-
tion. Automatica, vol. 10. 
Young, P. (1982). A computer program for general 
recursive time series analysis. Prepr. of 6th 
IFAC Symp. on Ident. and Syst. Param. Estima-
tion, Arlington. 
>DIA 
I N S 0 F - I 
<U 1. 1> 
DIA>READ 
U/SQ/&K 
CREAD3 SEQUENCE LEN6TH [POINTS! ? »> 8β£ 
CREAD3 NUMBER OF SEQUENCES ? *> ± 
CREAD3 TIHE INTERUAL ? => _2_ 
[READ] COMMENTS FOR "U 
": 
=> PLANT INPUT SI6NAL 
DIA>PL0T U 
CPLOT] X - DIMENSION ? [IN HM3 => M 
CPL0T3 V - DIMENSION ? CIN MM3 »> 4Θ 
CPL0T3 SYMBOL SIZE ? => 2_. 
CPL0T3 READY PLOTTER - PRESS <CR> cr 
0 
200 
400 
600 
800 
CPL0T3 DISK OUTPUT FILE CY/N3 ? «> Jj_ 
DIA>READ 
Y/SQ/DK 
CREAD3 SEQUENCE LEN6TH CP0INTS3 ? »> 8ββ 
CREAD3 NUMBER OF SEQUENCES ? => ± 
CREAD3 TIME INTERVAL ? »> X 
[READ3 COMMENTS FOR "Y 
": 
=> PLANT OUTPUT 
SI6NAL 
DIA>PL0T V 
CPL0T3 X - 
DIMENSION ? CIN MM3 => i £ 
CPL0T3 Y - DIMENSION ? [ I N MM3 «> 4JL 
CPL0T3 SYMBOL SIZE ? => JL 
CPLOT READY PLOTTER - 
PRESS <CR> cr 
β.ΟΟτ 
0 . 0 0 4 
-e.oo 
800 
[PL0T3 
DISK OUTPUT FILE [Y/N3 ? => JL 
DIA>SNST 
U / N Q / 9 . 9 9 
CSNST3 THE SI6NAL 
IS STATIONARY AND 
NORMALLY 
DISTRIBUTED. 
DIA>SNST 
V / N Q / e . 9 9 
CSNST3 THE SI6NAL IS STATIONARY AND 
NORMALLY 
DISTRIBUTED. 
Fig. 2. Protocol and graphical outputs of INSOF-I 
work (cont. on next page) 

214 
N. E. Madzarov et al. 
DIA>CALL D6LS 
************************************** 
* "D8LS" - 6ENERALIZED LEAST SQUARES * 
* 
ESTIMATION OF DISCRETE-TIME MODEL * 
************************************** 
CDLSQ3 MODEL DENUMERATOR ORDER ? => 2_ 
CDLSQ3 MODEL NUMERATOR ORDER 
? «> _2_ 
CDLSQ3 MODEL TIME DELAV ? *> J_ 
CDLSQ3 COMMENTS FOR "PAR ■i 
=> LEAST SQUARES PARAMETER 
ESTIMATES 
CDLSQ3 COMMENTS FOR "E 
M: 
=> RESIDUALS 
PAR 
RE6M.DI "DLSQ- : LEAST SQUARES PARAME 
TIME DELAV = 1 
PAR 
RE6M.DI "DLSQ" : PARAMETER 
ESTIMATES 
TIME DELAV = 1 
DENUMERATOR: 
A< θ)= Ι.θθθθβ 
A< l)«-i.49146 
A< 2)= 0.554671 
NUMERATOR: 
B< θ)= Θ.0ΘΘΘΘ8 
B< 1>=-8.758688E-81 
B< 2)= 8.138345 
CCORF3 COMMENTS FOR "RE ■ι 
=> COR.FUNCTION OF RESIDUALS "E" 
CPLOT3 X - DIMENSION ? CIN MM3 -> 10_ 
CPLOT3 V - DIMENSION ? CIN MM3 »> _45_ 
CPLOT3 SVMBOL SIZE ? «> _2_ 
CPLOT3 READV PLOTTER - PRESS <CR> cr 
DENUMERATOR: 
A< θ)= 1.000ΘΘ 
A( 1>=-1.56460 
A< 2)= Θ.620637 
NUMERATOR: 
B< 8> = Θ.000000 
B< 1>=-0.484143E-81 
B( 2>= 8.184082 
CCORF3 COMMENTS FOR "RE ■: 
=> COR.FUNCTION OF RESIDUALS "E w 
CPLOT3 X - DIMENSION ? CIN MM3 => 2L· 
CPLOT3 V - DIMENSION ? CIN MM3 => 45. 
CPLOT3 SVMBOL SIZE ? => ± 
CPLOT3 READV PLOTTER - PRESS <CR> cr 
1.004 
0.004 
10 
20 
30 
1.00 
0.00 + 
10 
20 
30 
CPL0T3 DISK OUTPUT FILE CV/N3 ? => JL 
MAKE 
VOUR 
DECISION : 
1 - TO CONTINUE THE PROCEDURE, 
2 - TO EXIT. 
= > ± 
CARME3 MODEL ORDER ? => 2_ 
CARME3 COMMENTS FOR "FIL ■ ι 
=> WHITENIN6 FILTER 
CARME3 COMMENTS FOR "EE ■ i 
= > 
CSPR03 COMMENTS FOR "V 
": 
=> FILTERED PLANT OUTPUT SI6NAL 
CSPR03 COMMENTS FOR "U 
■ ι 
■> FILTERED PLANT INPUT SIGNAL 
CDLSQ3 MODEL DENUMERATOR ORDER ? => _2_ 
CDLSQ3 MODEL NUMERATOR ORDER 
? => 2 
CDLSQ3 MODEL TIME DELAV ? 
CDLSQ3 COMMENTS FOR "PAR ' 
*> PARAMETER 
ESTIMATES 
CDLSQ3 COMMENTS FOR "E 
=> RESIDUALS 
= > 1 
CPL0T3 DISK OUTPUT FILE ? CV/N3 => JL 
MAKE 
VOUR 
DECISION : 
1 - TO CONTINUE THE PROCEDURE, 
2 - TO EXIT. 
= > 2 
DIA>FINF /FU 
I N S O F - I 
FILE 
INFORMATION 
U 
SEQ . 
SPRO '.FILTERED PLANT INPUT SI 
V 
SEQ . 
SPRO iFXLTERED PLANT OUTPUT S 
PAR 
RE6M.DI 
DLSQ PARAMETER 
ESTIMATES 
E 
SEQ . 
DLSQ 
:RESIDUALS 
RE 
SEQ . 
CORF : COR.FUNCTION OF RESIDUA 
FIL 
RE6M.DI ARME :«HITEN1N6 
FILTER 
EE 
SEQ . 
ARME : 
DIAW. 
> 
Fig. 2. Protocol and graphical outputs of INSOF-I 
work (cont. from previous page) 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
INTERACTIVE PACKAGE FOR THE 
IDENTIFICATION OF THE ELEMENTS OF A 
CONTROL LOOP 
M. Messely, R. De Keyser and A. van Cauwenberghe 
Laboratory of Automatic Control, University of Gent, Belgium 
Abstract. The paper presents an interactive package for the identification of the 
elements of a control loop. This includes not only the dynamic behaviour of the 
process, but also the static behaviour of the process and the controller and the 
static nonlinear behaviour of the sensors. The program contains subpackages for model 
estimation, parameter estimation and curve fitting. Model evaluation and parameter 
estimation are necessary for the simulation of processes and controllers in order to 
develop appropriate control strategies. Although ARMAX models are chosen for most of 
the identification techniques, one algorithm allows the estimation of continuous 
system parameters. Curve fitting is needed for the static behaviour of processes and 
for the non-linear behaviour of industrial sensors. The program is fully interactive 
and offers many graphical possibilities such as x-y engineering plots and three-
dimensional plots. 
Keywords, computer-aided system design, continuous systems, control system analysis, 
identification, iterative methods, least-squares approximations, linear systems, 
modelling, parameter estimation, sampled-data systems, stochastic systems 
INTRODUCTION 
All modern CAD programs have two common features : 
- they handle and manipulate many data 
- they offer the user a graphical representation 
of these (processed) data. 
A good CAD package makes the manipulation of data 
easy and offers powerful graphical possibilities. 
This increases the interaction and gives the 
designer a thorough understanding of his design. 
Much attention is paid to these two points when 
developing INTER. In this package for 
identification the data are generated from in-
put/output observations of the process to be 
identified. The graphics capability contains x-y 
engineering plots, three-dimensional plots and 
pole/zero diagrams. These drawings together with 
purely numerical results give the user as much in-
formation as possible. They can not only be used 
in research and industry but are also very 
attractive for didactical purposes such as the 
training of students in identification. 
The paper first presents the possibilities of 
INTER and then discusses the implementation and 
design of the package. The use of the program is 
illustrated on an example. Finally INTER is used 
for the control of an industrial absorber process. 
POSSIBILITIES OF INTER 
INTER c o n t a i n s 
s u b p a c k a g e s 
f o r 
p a r a m e t e r 
estimation, model evaluation and curve f i t t i n g . 
x(t) = A x(t) + B u(t) + v(t) 
y(k) = C x(k) + D u(k) + e(k) 
(1) 
(2) 
x(t) is the state vector, u(t) the input vector 
and y(k) the observation vector. v(t) and e(k) are 
gaussian noise inputs with zero mean. The 
procedure involves the solution of a "mixed Kaiman 
filter". The optimization routine is the BOX-
algorithm that uses no gradients and looks for the 
global extremum of the likelihood function. This 
routine is used to obtain a continuous-time 
simulation model of a process unit. 
Other routines of INTER compute the parameter es-
timates for the ARMAX model given by 
[1 ♦ A(q-1)]y(k) = 2-d B(q-1)u(k) 
+ [1 + C(q"1)]e(k) 
(3) 
jy(k),u(k)j are observed outputs and inputs and 
je(k)) is a white noise sequence, d is the dead-
time index and A, B and C are polynomials in the 
backward shift operator : 
Parameter estimation. 
A(q~1) = aiq"1 + 
B(q~1) = biq~1 + 
C(q"1) = ciq"1 + 
+ a 
q-"A 
nAq 
+ b 
qnB 
+ Cn ί η ° 
nC 
(4) 
The package contains a maximum likelihood e s t i -
mation of the parameters of a continuous process 
with d i s c r e t e observations (Ghysels, 1982). The 
equation of the continuous 
i s given by (1) and 
the equation of the discrete observations by (2) : 
The orders n 
η β and nc are not necessarily equal 
to each other. 
INTER contains two i t e r a t i v e estimation 
proce-
d u r e s 
: a maximum l i k e l i h o o d and an extended 
l e a s t - s q u a r e s e s t i m a t i o n . These methods have in 
general some drawbacks : they require much com-
putation and offer only a numerical result. 
215 
CADCES-H 

216 
M. Messely, R. De Keyser 
A new i n t e r a c t i v e 
p r o c e d u r e c a l l e d RHYP was 
developed by Prager (1980) and a version of this 
procedure i s one of the most powerful tools of 
INTER. The o u t l i n e of t h i s procedure i s given 
here. 
Suppose N observations (y(k),u(k) (, k=1,...N and 
suppose t h a t 
t h e C - e s t i m a t e s are known. The 
observation data can be filtered as follows : 
y f(k) = y(k) / [ 1 ♦ C(q"1) ] 
(5) 
u f(k) = u(k) / [ 1 + C(q_1) ] 
(6) 
Then equation (3) becomes : 
[1 + A(q-1)]yf(k) = 
q"d B(q-1)uf(k) + e(k) 
(7) 
Define the residuals 6 as : 
e(k) = (1 + Â(q _ 1))y f(k) 
- q"d B(q- 1)u f(k) 
(8) 
Equation (8) i s now l i n e a r in the unknown para-
m e t e r s A and B. So m i n i m i z a t i o n of the cost 
function 
1 
N 
J =—-Σ 
e (k) 
(9) 
N k 
i s o b t a i n e d 
by a simple l i n e a r 
l e a s t - s q u a r e s 
algorithm. The problem is that the C-estimates are 
not 
known. 
But i t i s 
possible to construct a 
p r i o r i a set of polynomials 1 + C that have roots 
outside the u n i t c i r c l e . When the order of C is 
r e s t r i c t e d 
t o 
two 
t h e n a l l 
t h e 
a l l o w a b l e 
c o e f f i c i e n t s 
of C l i e in the triangle of fig. 1. 
n~ = 2 i s not a severe restriction for practical 
problems and has the advantage that only a limited 
region for the C-coefficients has to be examined 
and t h a t graphical r e p r e s e n t a t i o n of the cost 
function J i s s t i l l p o s s i b l e . The user can scan 
the allowable region of C - c o e f f i c i e n t s , 
he can 
define the resolution of this scanning and he can 
focus on a smaller region. Three-dimensional plots 
g i v e him t h e n e c e s s a r y i n f o r m a t i o n for each 
d e c i s i o n . In Messely (1983) i t is shown that this 
algorithm is numerically robust compared to other 
estimation routines. 
INTER h a s 
a l s o 
some 
r e c u r s i v e 
e s t i m a t i o n 
a l g o r i t h m s : the l e a s t - s q u a r e s r e c u r s i o n , 
the 
extended l e a s t - s q u a r e s recursion and the maximum 
l i k e l i h o o d 
r e c u r s i o n . With the help of these 
r o u t i n e s the user can examine the convergence and 
smoothness of c o n v e r g e n c e of t h e 
d i f f e r e n t 
parameter estimations. 
s-z conversion and z-s conversion routines allow 
the t r a n s i t i o n from the continuous model (1) to 
the discrete model (3) and vice versa. 
Model evaluation. 
A r o u t i n e 
e s t i m a t e s the order of the unknown 
system p r i o r to parameter e s t i m a t i o n . I t i s a 
d e t e r m i n a n t 
r a t i o t e s t of the product moment 
matrix. The f i r s t version uses the normal product 
moment matrix, a second version the instrumental 
product moment matrix. The l a t t e r gives better 
r e s u l t s in the case of low signal to noise ratios 
(Wellstead, 1978). 
A. van Cauwenberghe 
The other model evaluation techniques available in 
INTER can only be a p p l i e d 
a f t e r 
p a r a m e t e r 
estimation. 
I f 
t h e 
model 
s t r u c t u r e 
and the 
p a r a m e t e r 
estimation are correct then the residuals should 
form a white noise sequence and should also be 
independent of past values of the input signal. 
C r o s s - v a l i d a t i o n computes the 
a u t o c o r r e l a t i o n 
function of the residuals and the crosscorrelation 
between the r e s i d u a l s and the input samples. It 
warns the user for estimations of the model order 
that are too low, as i t is impossible to get white 
r e s i d u a l s when the estimated order is lower than 
the exact one. 
0 v e r e s t i m a t i o n 
of 
t h e model o r d e r can be 
discovered by calculation of the poles and zeroes. 
When the estimation of the order is too high, then 
the poles and zeroes l i e closely together so that 
cancellation may occur. 
INTER permits simulation of the process with the 
estimated parameters. Comparison of the simulated 
o u t p u t with t h e measured output can t e l l 
the 
designer quite a lot about the model and order he 
used. 
Another model evaluation technique checks the 
behaviour of the cost function J ( 9 ) · For one 
specified model J reaches a minimum for the "best" 
parameters, but that doesn't t e l l anything about 
t h e model i t s e l f . Akaike (1974) introduced 
a 
loss function that also takes the model complexity 
into account : 
AIC = J + 2p 
(10) 
where p i s the number of parameters in the model. 
The supplementary term 2p protects the designer 
against overestimation. 
Curve f i t t i n g . 
L e a s t - s q u a r e s 
f i t t i n g 
can be applied on any 
function that is linear in the unknown parameters. 
This i s useful for i d e n t i f i c a t i o n of the non-
linear behaviour of industrial sensors. It is also 
used for estimation of the s t a t i c gain of the 
process when this has reached a steady s t a t e . This 
can serve as a control for the estimation of a l l 
the dynamic parameters of the system. 
Table 1 gives an overview of the possibilities of 
INTER. 
TABLE 1 
Possibilities of INTER 
INFO 
list options available at this level 
FABEST parameter estimation techniques 
MOD 
definition of process and noise order 
FIL 
specification of the file with 
observations (y,u) 
TSZ/TZS s-z and z-s conversion 
TWZ/TZW w-z and z-w conversion 
ELS 
iterative extended least-squares 
method 
MLH 
maximum likelihood iterative 
technique 
SEA 
display of the path followed by an 
iteration technique 
INT 
interactive maximum likelihood 
technique (RHYP version) 
GRA 
three-dimensional plot of cost index 
REC 
recursive algorithms 
PAR 
display of the time evolution of the 
estimated parameters 
SVM 
maximum likelihood estimation of the 
continuous system parameters 
216 

Interactive Package 
217 
MODEVA model evaluation techniques 
ORC 
calculation of the determinant 
ratios of the product moment matrix 
ORG 
display of the determinant ratios 
SIM 
simulation of the system with 
estimated parameters 
TIM 
graphical representation of obser-
vations, simulated output and esti-
mation error 
PZC 
calculation of poles and zeroes of 
the estimated process and noise model 
PZG 
display of the pole/zero diagram 
COC 
calculation of autocorrelation and 
crosscorrelation functions 
COG 
graphical representation of auto-
correlation and crosscorrelation 
COS 
calculation of the costindex J and 
of AIC 
CUBFIT curve fitting 
CFI 
input of the observations 
CFC 
calculation of the curve fitting 
CFG 
graphical representation of the 
curve fitting 
EHD 
return to higher level 
IMPLEMENTATION OF INTER 
INTER contains about 6000 FORTRAN lines. It makes 
full use of the well known numerical libraries 
LINPACK and BLAS (Dongarra, 1979) and EISPACK 
(Smith, 1976). INTER runs on a PDP11/34 under the 
operating system RSX11M. Soft plots can be made on 
VT100 terminals with graphical extensions, hard 
plots on a TEKTRONIX plotter. 
If there is only 64 K RAM available for each user, 
INTER can't be entered as a whole. In this case it 
can be 
divided into several independent tasks. 
Connection between the tasks is made by files. 
This file management is completely hidden for the 
user. All the installation dependent code for each 
task is gathered into one or two subroutines. A 
small supervising program that is loaded into 
memory during the whole identification session, 
manages the different tasks. 
INTER has a hierarchical structure. Changing from 
one level to another can be done by commands given 
in a menu. The choice between the possibilities 
within one level can be made by commands of a 
menu or by a question/answer method which has 
preprogrammed default answers. Error messages 
inform the user if a task can't get started or 
does not work properly. Wherever possible 
suggestions are made to the user to avoid the 
failure. Additional information is available by an 
INFO utility. 
Because of the modular concept, extension of INTER 
is easy. Existing tasks don't have to be changed 
once they are built. 
THEORETICAL EXAMPLE 
500 samples are generated using the difference 
equation 
This example is nearly the same as Bohlin ( 1971 ) 
used in his paper on the ambiguities in maximum 
likelihood identification. 
As in Bohlin (1971) a first-order model with 
no transport delay (d = 0) will be fitted to the 
data. After many iterations the maximum likelihood 
search routine finds 
two different results 
depending on the start values : 
1. : i 
X1 
a1 
0,4105 
1,048 
0,1405 
-0,8340 
-0,5875 
0,1705 
b1 = -0,4848 
δ2 = 0,4235 
b1 = 0,4109 
£0 = -0,1199 
So at least two local minima exist for the cost 
function J. Applying the interactive procedure to 
this problem discovers these two minima in one 
run. Figure 
2 shows the shape of the cost 
function. The curves are contours where J has a 
constant value. The two extrema can easily be 
seen. The paths followed by the maximum likelihood 
search routine are also visualized on fig. 2. The 
designer can now change the resolution of the 
interactive procedure or change the region in the 
c.Cp-plane in order to examine the problem 
somewhat closer. Figure 3 gives a close-up of the 
critical region. 
Fitting the data to the model with dead-time index 
d = 1 results in the following maximum likelihood 
estimations : 
*1 = -0,5187 
-1 = 0,0069 
J = 0,0868 
1,043 
-0,0219 
Figure 4 shows the results of the interactive 
estimation procedure and also the search path of 
the maximum likelihood routine. There is only one 
extremum now. The autocorrelation of the residuals 
is drawn in fig. 5 and ressembles that of a white 
noise. So it may be concluded that the last model 
applied to the data is the correct one. 
INDUSTRIAL APPLICATION 
As a further example we shall now use INTER to 
identify an industrial absorber-stripper plant for 
removal of COp from acid gases. 
Figure 6 shows the absorber plant. The feed gas 
flow rate is considered as the input signal and 
the COp concentration as the output. They are 
represented in fig. 7. During the observations the 
steam flow rate is kept as constant as possible, 
so that the process can be considered as a single-
input single-output system. The sampling period is 
20 seconds. 
After examination of the input and output signals 
it can be seen that the process has a dead time of 
about 8 sampling periods. The data are first 
fitted on a first-order model for A and a second 
order model for B because of the uncertainties of 
the value of the dead time : 
y(k) = -&1 y(k-l) + b1 u(k-1-d) + e(k) 
+ c1 e(k-l) + c2 e(k-2) 
(11) 
- with dead-time index d = 1 
a1 = -0,5 and b1 = 1 
c. = 0 and c2 = 0 
- The input sequence u and noise e are pseudo 
random noise with zero mean. The signal to noise 
ratio S/N is 0,924. 
nA = 1 
âB = 8 
The identification results of three different 
methods are summarized in table 2 : 
MLH = maximum likelihood iterative technique 
ELS = iterative extended least-squares 
INT = interactive maximum likelihood method 

218 
M. Messely, R. De Keyser and A. van Cauwenberghe 
TABLE 2 
Identification results 
ACKNOWLEDGMENT 
MLH 
-0.8797 
0,390.10" 
0,175.10" 
0,0111 
0,458.10 
0,528.10' 
-2 
,-4 
ELS 
-0.8818 
0,358. 
0,175. 
-0,653. 
-0,892.10 
0,528.10" 
IHT 
-0.8842 
0,235.10' 
0,183.10" 
0,477.10" 
-0,0400 
0,527.10" 
-3 
From fig. 8 it can be seen that there is only one 
strongly pronounced minimum of the cost function 
J. Hence it is not surprising that the different 
methods give the same results. 
The process is then simulated with the estimated 
parameters and the same input signal. A comparison 
of the simulated output signal and the measured 
output signal can be made with the help of fig. 9» 
As a final test for the identification of this 
process loop, the static behaviour is analyzed 
during periods of steady state. Figure 10 
represents the gain obtained by the curve fitting 
subprogram. A gain of 0.0178 is found. The gain 
obtained by estimation of the dynamic parameters 
is 
(£, + b2)/(l + âj) = 0,0178 
Because d i f f e r e n t 
methods 
l e a d 
t o t h e 
same 
r e s u l t s , the estimated model can be used for simu-
lation of this process. 
CONCLUSION 
The program package INTER for the 
identification 
of 
t h e e l e m e n t s 
of a c o n t r o l 
l o o p has 
been 
presented. Examples have shown that i t can be used 
for research and for industrial applications. 
INTER has not y e t 
r e a c h e d 
i t s 
f i n a l 
s t a t e . 
Routines can e a s i l y be added due to the modular 
concept. Adaptation of INTER to a 3 2 - b i t super 
minicomputer i s planned... and a tracking ball or 
a "mouse" would increase the interaction with the 
designer. 
j-2 
1 
1 
P-i 
X 
0 
ί 
X 
y 
V 
y 
i 
1 
1 
2' 
ST? 
1 »» 
r 
Ci 
Fig. 1. Allowable 
region for 
Ct and C2 
T h i s work was p a r t i a l l y 
s p o n s o r e d by t h e Foun-
d a t i o n of F u n d a m e n t a l C o l l e c t i v e Research (FKFO) 
of 
t h e B e l g i a n 
N a t i o n a l 
Fund f o r 
S c i e n t i f i c 
Research (NFWO). 
REFERENCES 
Akaike, H. (1974). A new look a t t h e s t a t i s t i c a l 
model i d e n t i f i c a t i o n . 
IEEE T r a n s . AC-19, 716-
722. 
Bohlin, T. ( 1 9 7 1 ) . On the problem of a m b i g u i t i e s 
i n maximum l i k e l i h o o d 
i d e n t i f i c a t i o n . 
Auto-
m a t i c a , ]_f 199-210. 
Dongarra, J . J . , J.R. Bunch, C.B. Moler and G.W. 
S t e w a r t . 
( 1 9 7 9 ) . 
Linpack U s e r ' s Guide. SIAM, 
P h i l a d e l p h i a . 
Ghysels, J . ( 1 9 8 2 ) . P a r a m e t e r s c h a t t i n g met maxi-
m u m - l i k e l i h o o d m e t h o d e . 
I n t e r n a l 
r e p o r t , 
L a b o r a t o r y 
of A u t o m a t i c 
C o n t r o l , 
G e n t , 
Belgium. 
Messely, M. and R. De Keyser (1983). 
I n t e r a k t i e v e 
i d e n t i f i k a t i e 
van ARMAX-processen. 
I n t e r n a l 
r e p o r t , Laboratory of Automatic C o n t r o l , 
Gent, 
Belgium. 
P r a g e r , D.L. and P . E . Wellstead (1980). 
I n t e r a c -
t i v e 
r e c u r s i v e maximum l i k e l i h o o d 
e s t i m a t i o n . 
IJC, 32, 1005-1030. 
Smith, B . T . , J.M. Boyle, B.S. Garbow, Y. I k e b e , 
V . C . 
K l e m a a n d C . B . Moler 
( 1 9 7 6 ) . 
M a t r i x 
E i g e n s y s t e m Routines - EISPACK Guide, v o l . 6, 
L e c t . 
N o t e s i n Comp. S e i . , 2nd ed. S p r i n g e r , 
New York. 
W e l l s t e a d , P . E . (1978). An i n s t r u m e n t a l 
product 
moment 
t e s t 
f o r m o d e l 
o r d e r 
e s t i m a t i o n . 
Automatica, 14, 8 9 - 9 1 . 
Fig.2. Shape of the cost function J. 

Interactive Package 
219 
C2 
Fig. 3. Close-up of critical region. 
—*-C] 
Fig.4. Contours for correct 
model. 
feed^gas 
QQ^ 
m e a s u r e m e n t 
I 
Fig.5. Autocorrelation of residuals. 
time lag 
C02 ABSORPTION 
Fig.6. Industrial absorber-stripper 
plant. 

220 
M. Messely, R. De Keyser and A. van Cauwenberghe 
Fig.8. Cost function J for absorption process. 
1000 
sample number 
Fig. 7. CO2 concentration. 
1.80-1 
1 — 1 — 1 — 1 
1000 
sample number 
Fig.9. Estimated and measured output. 
·/. co2 
x/ 
/ 
/ 
/ 
/ 
/ 
/x 
x / 
110 
n 3 k 
Feed gas flow rate (xio5 Nm3/h) 
Fig.10.Static gain of absorption process. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A PROGRAM PACKAGE FOR MULTICRITERIA 
OPTIMAL DESIGN OF HIERARCHICAL AND 
DECENTRALIZED LINEAR CONTROL 
SYSTEMS 
A. Ollero and R. Marin 
Departamento de Automatica y Electronica, Escuela Técnica Superior de Ingenieros 
Industriales de Vigo, Universidad de Santiago (Campus de Vigo), Vigo, Spain 
Abstract . In this paper we present a program package which includes 
alternative 
routines to compute hierarchical and decentralized control laws together with a pro 
posed interactive m ulticriteria optimal control algorithm to consider appropiately non 
coi1; ensurable and conflicting criteria at different levels. The package includes an 
interpreter, 
based on fuzzy set theory, which permits to perform the designer's 
in-
teraction in the algorithm in a qualitative linguistic way. The package is written 
in Pascal and permits a low cost implementation in microcomputers with the CP/M 
operating system. Moreover we present an example of two area megawatt frecuency 
control which illustrates the designing 
procedure. 
Keywords. Control system 
synthesis; computer-aided system design; hierarchical sys_ 
terns; m ulticriteria optimization; fuzzy set theory; optimal control; 
man-machine. 
systems. 
INTRODUCTION 
A significant number of packages for computer 
aided design of control systems have 
been pre 
sented during the last years 
(see for example 
Astrom, 1981; Munro, 
1981; 
Furuta and Yama 
no, 
1984; Schäfer, 
1984). Classical single-in 
put single-output system design techniques 
(Frecuency domain, root locus) and its recent 
generalizations (inverse Nyquist array, 
multi-
variable root locus) are well suited to be stu 
died by means of digital computer 
packages 
with graphical display terminals. However, 
the 
application of clasical linear control theory is 
very restricted by the dimensionality of the 
mathematical model. 
This restriction is 
allevia 
ted, from the point of view of theoretical for-
mulation of the synthesis procedures, 
when 
using state space approaches but the computer 
requeriments increases very rapidly with the 
number of state variables. For instance, 
the 
computing time to solve the linear quadratic re 
gulator problem varies cubically with the sys-
tem order. 
In the context of modern control theory, 
large 
scale systems are usually studied by using ex-
tensions of optimal control methods. A methodolo 
gy widely employed is the hierarchical system 
approach. Indeed, open loop control synthesis 
can be solved by applying the early works on 
hierarchical systems (Mesarovic, Macko and Ta-
kahara; 1970) and dynamical optimization of lar 
ge scale 
systems ( Las don, 1970; Pearson, 1971) 
Later this methodology was used for closed loop 
control system synthesis ( Singh, 1980; 
Bernu-
ssou and Titli, 1982). Applications of hierarchi-
cal methods always imply decomposition of the 
system into interacting subsystems, which provi-
de a basis for the formulation of independent 
optimal control subproblems linked together by a 
separate coordination unit. Moreover, this 
desig-
ning methodology is suitable to be applied by 
means of decentralized computing ( Tarn ura, 1975). 
We notice that subproblem decomposition can be 
considered only as a tool to solve large scale 
problems. However, most of the practical large 
scale control systems such us multiarea electri-
cal power systems, road 
traffic 
networks or 
steel rolling consist of interconnected 
subsystems 
with local states, outputs and controls. 
Then, 
the application of hierarchical system theory 
can be supported by physical considerations 
about the process. 
Moreover we notice t h a t in the above we consi-
der only the problem of computing control laws 
but no reference is made to the implementation 
of these controls. There exists hierarchical con 
trol systems configurated with several lower le-
vel controllers, 
acting on the process, 
coordina 
ted on line by a control unit at a higher level. 
In this paper we deal with the particular case 
or multilevel structures, based on the state feed 
back concept, in which coordination 
variables 
are added to the local feedbacks. 
This structu-
re, has special interest for linear system 
with 
quadratic performance criteria. 
An alternative 
to the hierarchical control structures is the de-
centralized control (Wang and Davidson, 1973; 
Slijac and Vukcevic , 1976). In the simple decen-
tralized control, although each local control can 
be computed taking into account criteria and mo 
dels of the whole system, each local controller 
only uses on-line the local state variables. 
Thus 
decentralized control can be viewed as a special 
case of the above mentioned structures based on 
the state feedback concept in which the coordina 
tion variables are not generated at all; 
instead 
of this we implement only local feed backs. Obvious 
ly 
this is a suboptimal structure when compa-
ring with the hierarchical ones, but may have 
a great interest from a practical point of view 
as for example for large scale systems which 
are widely distributed in space and the main 
cost of the implementation of the control may 
will lie in the telemetry links necessary to trans 
mit information. 
Alternatively we could think of 
readjusting the local feedbacks gains at some 
time intervals, which could be looked on as an 
adaptation which would present a w ay of on-
line coordination. 
221 

222 
A. Ollero and R. Marin 
F i n a l l y 
note t h a t in the 
a b o v e 
we a r e 
c o n c e r n e d 
with 
methods to compute 
a n d 
i m p l e m e n t 
h i e r a r c h y 
c a l 
a n d 
d e c e n t r a l i z e d 
c o n t r o l s 
from 
well 
defined 
p e r f o r m a n c e 
c r i t e r i a 
to be o p t i m i z e d . 
However 
t h e 
d e s i g n of a l a r g e 
s c a l e 
c o n t r o l s y s t e m s 
i n -
volves 
the c o n s i d e r a t i o n 
of a g r e a t 
n u m b e r 
of 
non c o n m e n s u r a b l e 
a n d c o n f l i c t i n g 
l o c a l 
a n d 
glo 
b a l p e r f o r m a n c e 
c r i t e r i a 
which 
a d d s 
an 
a d d i t i o -
n a l c o m p l e x i t y 
to t h e 
p r o b l e m . 
Little 
a t t e n t i o n 
h a s 
been 
p a i d 
in t h e 
h i e r a r c h i c a l 
a n d 
d e c e n t r a -
l i z e d c o n t r o l l i t e r a t u r e 
to t h e 
a p p r o p i a t e 
c o n s i -
d e r a t i o n of the 
m u l t i c r i t e r ion c h a r a c t e r 
of 
the 
problem 
of d e s i g n 
t h e s e c o n t r o l s y s t e m s . 
I n 
t h i s 
p a p e r 
we propose t h e 
use of m u l t i c r i t e r i a 
o p t i -
m i z a t i o n 
t h e o r y to d e s i g n 
h i e r a r c h i c a l 
a n d 
decen 
t r a l i z e d 
l i n e a r 
c o n t r o l s y s t e m s . 
We p r o p o s e 
an 
i n t e r a c t i v e 
m u l t i c r i t e r i a 
a l g o r i t h m 
which 
g e n e r a -
l i s e the r e s u l t s 
p r e s e n t e d 
in 
Ollero 
a n d 
Marin 
(1982,1984) 
for r e d u c e d 
o r d e r 
l i n e a r 
c o n t r o l 
s y s -
tem 
d e s i g n . 
A p r o g r a m 
p a c k a g e 
w r i t t e n 
in 
P a s -
c a l is 
p r e s e n t e d . u n s 
p a c k a g e 
i n c l u d e s 
an 
i n t e r 
p r ê t e r 
which 
p e r m i t s 
to perform 
t h e 
d e s i g n e r ' s 
i n t e r a c t i o n s 
of t h e 
a l g o r i t h m 
in 
a 
q u a l i t a t i v e 
l i n g u i s t i c 
w a y . 
The i n t e r p r e t e r 
is 
b a s e d 
on 
t h e 
use of fuzzy 
s e t t h e o r y 
as 
an 
v e h i c l e 
to 
o v e r c o -
me the 
well known 
d i f f i c u l t i e s 
in the 
n u m e r i c a l 
e s t i m a t e s 
of t r a d e - o f f s 
between c r i t e r i a 
( B a p t i s 
t e l l a 
a n d 
Ollero, 
1980). 
Moreover 
we p r e s e n t 
an 
e x a m p l e 
of two a r e a 
megaw a t t - f r e c u e n c y 
c o n t r o l 
which 
i l l u s t r a t e s 
the 
main f e a t u r e s 
of the 
d e s i g -
n i n g 
p r o c e d u r e . 
I t is c l e a r 
t h a t if we c h a n g e 
t h e 
v a l u e s of 
the 
m a t r i c e s 
Q. a n d 
R. we g e t a d i f f e r e n t 
s o l u t i o n 
for 
the 
d e s i g n 
pro oie m. 
Then, 
the 
d e s i g n e r 
must 
choose t h e 
m a t r i c e s 
Q. a n d 
R. a c c o r d i n g to 
r e l a 
t i v e 
i m p o r t a n c e 
of the c o s t of a l l t h e 
c o n t r o l 
a n d s t a t e 
v a r i a b l e 
i n v o l v e d 
in o r d e r 
to 
o b t a i n 
a good s o l u t i o n 
to t h e 
d e s i g n 
p r o b l e m . 
S e v e r a l 
g u i d e l i n e s 
to s o l v e t h i s 
problem 
h a s 
been 
pro 
p o s e d . 
However, 
d i f f i c u l t i e s 
r e m a i n 
a n d the 
chojl 
ce of t h e 
m a t r i c e s 
Q. a n d 
R. i s , 
in g e n e r a l , 
so 
m e w h a t 
a r b i t r a r y . 
M u l t i c r i t e r i a 
o p t i m i z a t i o n 
methods offers 
i n t e r e s 
t i n g 
i d e a s 
for 
a s y s t e m a t i c 
s t u d i e of t h e 
t r a d e 
offs 
between 
d e s i g n e r s c r i t e r i a . 
A m u l t i c r i t e r i a 
o p t i m i z a t i o n 
f o r m u l a t i o n 
c a n t a k e 
t h e 
form: 
Min J 
n J 1 = 
( x ^ ) 2 d 
° r* 
i 2 
Τ'-ί' 
dt; 
i=l to N; 
pTL 
=1 to 
n. 
1 
( 5 ) 
dt; 
i=l to N; j=l to 
n. 
k2 = j+ 
S u b j e c t to 
(2) 
a n d 
(3) or 
( 4 ) . 
Where 
x J 
a n d u 
M ULTICRITERIA 
FORMULATION 
OF 
HIERARCHICAL 
AND DECENTRALIZED 
LINEAR STATE FEEDBACK 
CONTROL 
Let us c o n s i d e r 
t h e 
problem 
of the 
optimum 
c o n -
t r o l of a g r o u p of N d y n a m i c , 
l i n e a r , 
i n t e r c o n -
nected s u b s y s t e m s 
by m i n i m i z a t i o n 
of an 
a d d i t i -
v e , 
s e p a r a b l e , 
q u a d r a t i c 
c r i t e r i o n 
in the 
form: 
N r w
 
T 
in ^ Γ \ 
(x. Q.x. 
+ u. 
R.u. 
i=l -Έ> 
) dt 
(1) 
subject to: Ϊ ^ Α . χ . 
+ B . u . 
+ C . z . ; 
x . ( 0 ) = Χ , 0 
j=l 
(2) 
i=l to N 
a r e s t a t e 
a n d c o n t r o l 
v a r i a b l e 
j of the 
s u b s y s -
tem 
i. 
To s o l v e 
t h i s 
m u l t i c r i t e r i a 
or 
vector 
v a l u e d 
o p t i 
mization 
problem 
a wide 
v a r i e t y 
of methods c a n 
be 
a p p l i e d . 
However, 
a l l the 
p r o p o s e d 
t e c h n i q u e s 
of r e s o l u t i o n 
h a v e 
a common a n d 
i m p o r t a n t 
c h a -
r a c t e r i s t i c : 
c o n v e r s i o n , 
from 
the 
m u l t i c r i t e r i a 
p r o b l e m , 
to s c a l a r 
o p t i m i z a t i o n 
(one 
c r i t e r i o n ) 
whose s o l u t i o n s 
c a n 
be found 
by s t a n d a r d 
o p t i -
m i z a t i o n 
t e c h n i q u e s . 
I n 
t h i s 
p a p e r 
we use 
an i n t e r a c t i v e 
m u l t i c r i t e -
r i a 
method 
p r o p o s e d 
by the uuinors 
in 
a 
p r e -
vious 
p a p e r 
(A. 
Ollero 
a n d 
R. 
M a r i n , 
1982). 
I n 
t h i s 
method t h e s c a l a r 
o p t i m i z a t i o n 
f o r m u l a t i o n 
t a k e s 
the form : 
w J = 
w 
> 0 
( 6 ) 
n 1 11 
where x . € R 
—i 
—x 
z. €R 
i 
( l i n k i n g 
v a r i a b l e ) , L . . 
( s t a t e ) , 
u. 
£ 
i s 
a 
m a t r i x 
of i n t e r c o n n e c t i o n 
on the s t a t e s , 
Q . ^ . 0 
a n d R.>0. 
I t is 
well known 
(Bernussou and Titii, 
1982; 
S i n g , 
1980) 
t h a t the l o c a l c o n t r o l law 
u. 
which 
minimi 
ces t h i s 
problem 
c a n 
be o b t a i n e d 
in the 
form: 
u . = ( \ . x . 
+ v. 
(3) 
- l 
i 
-
l
-
i 
where 
K. is 
a loj.-i f e e d b a c k 
g a i n 
m a t r i x 
o b t a i -
ned 
by r e s o l v i n g t h e 
l o c a l 
R i c c a t i e q u a t i o n 
a n d 
Xj is 
a c o o r d i n a t i o n 
v a r i a b l e 
s u p p l i e d 
by 
a 
c o o r d i n a t i n g 
l e v e l . 
This 
v a r i a b l e 
c a n 
be 
c o m p u -
s e d 
by 
a l i n e a r 
c o m b i n a t i o n 
of the s t a t e s 
in 
o t h e r 
s u b s y s t e m s . 
e=l 
•'here 
n+m is t h e 
number of c r i t e r i a 
a n d 
the 
weighted 
vector 
w is 
modified 
i n t e r a c t i v e l y 
accor 
d i n g to the 
d e s i g n e r ' s 
t r a d e - o f f s 
between 
the 
c r i t e r i a 
in e a c h 
i t e r a t i o n , 
we notice t h a t 
by 
op 
t i m i z i n g 
the i n d e x I we o b t a i n 
a 
n o n - i n f e r i o r 
( n o n - d o m i n a t e d , 
or 
P a r e t o o p t i m a l ) 
s o l u t i o n 
of 
t h e 
m u l t i c r i t e r i a 
problem 
( 5 ) . 
The 
d e s i g n e r 
may 
g i v e 
q u a l i t a t i v e 
d i a g n o s t i c s 
o v e r e a c h 
c r i t e r i o n 
(J 
is good, 
J 
is 
poor etc) 
a n d 
an 
i n t e r p r e t e r 
b a s e d 
on the fuzzy 
s e t t h e o r y o b t a i n s 
a new 
w e i g h t e d 
vector 
w for 
the 
n e x t s c a l a r 
o p t i m i z a -
t i o n . 
I t is c l e a r 
t h a t the i n d e x of the 
s c a l a r 
problem 
c a n t a k e 
the form 
(1) 
if t h e 
m a t r i c e s 
Q. a n d 
R. a r e 
d i a g o n a l s 
with the 
e l e m e n t s : 
We c a n o b t a i n 
a D e s c e n t r a l i z e d 
c o n t r o l 
s t r u c t u r e 
if we impose 
as 
an 
a d i t i o n a l r e s t r i c t i o n 
the 
l o c a l 
c o n t r o l form : 
= K. 
( 4 ) 
' k l 
' 
1 
*1 = J+^>" 
n 
,£r 
e 
P r o c e d u r e s 
to compute 
a n d to a n a l y z e 
the 
s t a b i -
l i t y of t h e s o l u t i o n s 
of those two kinds of problems 
( h i e r a r c h i c a l 
a n d 
d e c e n t r a l i z e d 
c o n t r o l ) 
h a v e 
been s t u d i e d 
by 
many 
a u t h o r s 
( S i n g h , 
1980, 
F i n -
d e i n s e n 
a n d o t h e r s , 
1980; 
Bailey 
a n d 
Wang, 
1972; 
Bailey 
a n d 
D a v i s o n , 
1973). 
k2 

A Program Package 
223 
where q. and r. are the q. . and r. . elements of 
the matrices Q. and R.. 
J J 
J J 
1 
1 
There are usually many states and control variables 
in Hierarchical or Decentralized control problems, 
and the number n+m of criteria in (5) is large. 
However, we notice that, in many applicationes, we 
can define a set of NA < n + m quadratic indices 
having physical meaning. Let JA be an NA-dimen-
sional vector JA = (JA1
 
J A
N A )
1 
th^s, 
it can 
be writen JA = LA J where LA is an aggregation ma 
trix defined from the designer interest and 
~ 
J Ai = 
A 
la. . J.; 1 = 1 to NA 
(7) 
Note that, for a given NA dimensional weighting 
vector wa; the matrices Qi and Rj. can be obtained 
by: 
qi = V R Ç ^k lakp; p = ^ 
(8) 
*i - v k f -k la^; s=j+S
 ne\i>o 
where wa is the k element of the vector wa, wD 
and ws are the p and s element of the correspon-
dent vector w. By this procedure we can get one cri 
terion for each subsystem, or aggregate all the 
cri4:»ria corresponding to the states in one crite-
rion and all the criteria corresponding to the con-
trol variables in another criterion. It is possi-
ble to use many aggregation matrices with a physi-
cal meaning. The solution of the multicriteria pro 
blem can be changed depending on the aggregation 
matrix chosen.Usually, large scale control system 
involves several hierarchical levels of criteria. 
Thus, an aggregation matrix for each level must be 
defined. For each level there is one criterion spa 
ce for the qualitative diagnostics of the designer? 
We can define, for each aggregation matrix LJ, one 
weighting vector waJ and one desaggregated weigh-
ting vector WLJ , relate-;; oy : 
NA 
■Σ 
la, kp 
p=l to n+m 
(9) 
k=l 
where WLJ is the p element of the WLJ vector. The 
composed vector W can be computed by: 
11 + 111 
Π 
WLJ 
i=l to n+m 
(10) 
and the elements of the matrices Q. and R. are 
obtained by using (6). 
x 
1 
AN ALGORITHM FOR MULTICRITERIA OPTIMAL 
DESIGN 
In order to assure a systematic investigation of 
non inferior solutions which lead us to determine 
the preferred solution of the multicriteria problem 
(5), we propose the following interactive algo-
rithm: 
Step 1: Determine the matrices of the model A., B., 
C^, L and the initial value of the state1 
variable x. . 
lo 
Step 2: Choose a hierarchical structure for the 
criteria and a suitable set of matrices 
LA. 
Step 3: Choose a fuzzy set for each qualitative 
diagnostic and for each criteria level. 
Step 4: Fix one qualitative protocol of change in 
the vector of weights for each criteria 
level. 
Setp 5: Choose an initial vector of weights for 
each level. 
Setp 6: Determine the composed vector W by (10)and 
the matrices Q. and R. by (6). 
Setp 7: Determine K, and v. (hierarchical control) 
or K. (decentralized control)by a suitable 
method of calculation. 
Setp 8: Simulate the close loop system response 
with the values computed in the step 7. 
Setp 9: Interact with the designer. The designer 
may supply a qualitative diagnostic for 
each criterion at each level (for the cri-
teria without qualification a default fuzzy 
set is adopted). If an appropiated stopping 
criterion is satisfied, then the current 
non inferior solution is the preferred one, 
otherwise the interpreter generates a vector 
of weights for each criteria level and goes 
to the step 6. 
We notice that aggregation matrices LA can be obtai_ 
ned 
directly from designer's Opinions· or assis 
ted with suitable procedures for control objectives 
reduction (Johnston and Barton, 1984). 
In the next section we present a program package to 
carry on this algorithm. 
PROGRAM PACKAGE GENERAL STRUCTURE AND 
MAIN FACILITIES 
The program package presented in this paper is a 
subset of a more general control system design pac 
kage. This package has a modular structure with di_ 
visions in several hierarchical levels. Fig. 2 
shows the two upper levels of the hierarchy. The mo 
dule "manager" (M0) load in the main memory modules 
of the second level following the current design 
phase and the user's options. The "determination 
and analysis of the model" module (Ml) let the user 
introduce the model parameters or alternatively exe 
cute identification procedures. Moreover, intercon 
nected systems can be introduced by means of spe-
cial purpose block definition language and repre-
sented in memory in a data structure linked with 
pointers. Furthermore M2 includes several routines 
for analysis in the state space and frequency res-
ponse. The "simulation" module (M2) also has seve-
ral options. Taking into account the block repre-
sentation of interconnected systems, modifications 
in the system interconnection structure can be per 
formed easily by reassigning data pointers. For con 
tinuous time modelling of the processes, the desig 
ner can use alternative numerical integration rou-
tines (Euler,fourth order Runge Kutta, exponential 
matrix). Moreover (M2) disposes of noise generators 
and non linearities simulators that can be added to 
the theoretical model. The module "control law sin 
thesis" (M3) includes procedures to compute hierar 
chical and decentralized control laws by minimizing 
a given weighted quadratic index. In the hierarchy 
cal option the user disposes actually of both cen-
tralized Newton-Raphson method (Kleinman, 1967) and 
decentralized computing by using an interaction pre 
diction method (Singh, 1980). Decentralized control 
laws can be computed by using the suboptimal method 
presented in Bailey and Ramapriyan (1973). 
The interaction module is based on the use of lin-
guistic variables (Zadeh, 1975 ) in the context of 
Fuzzy Set Theory. The user performs the interaction 
step 9 in the algorithm supplying linguistic diag-
nosis for each criterion on each level in accordan 
ce with the grammar shown in Fig. 1. For each cri 
terion level, the diagnosis about a particular cr_i 
terion can be represented as the assignment of a 
linguistic value to a linguistic variable. In gene 
ral, the linguistic values can be composed of seve 
ral atomic linguistic terms. There are three cathe 
gories of these atomic terms: primary linguistic 
terms ("good", "acceptable", "poor", "unnaceptable") 
CADCES-H* 

224 
A. Ollero and R. Marin 
linguistic hedges ("very", "more or less", "highly" 
"sort of", "rather"), and complementary ("not") and 
connective ("and", "or") terms. The primary lin-
guistic terms can be defined as fuzzy subset of the 
closed interval (0,1) by means of the submodule 
"gendat". The effect of linguistic hedges can be 
interpreted by using non linear operators over the 
primary linguistic terms. Complementary and con-
nective terms are applied by means of the comple-
ment, intersection and union of fuzzy sets. The lin 
guistic diagnosis are readed by an interpreter ca-
lled "interact" which performs its syntactic ana-
lysis and form fuzzy sets representing each diag-
nosis. Then the interpreter produces factors of 
change in relative weights between criteria at a 
given level from the protocols defined by the user 
in the step 3 of the algorithm. These protocols con 
sist of a set of linguistic rules, connected by "or" 
assigning linguistic values to a linguistic varia-
ble, representing the factor of change in relative 
v:eight between two criteria, from a pair of lin-
guistic values of two linguistic variables corres-
ponding to a pair of criteria. To facilite the spe 
cification and use of linguistic protocols we have 
defined an special purpose minilanguage. The submo 
dule " genproto 
" performs the syntactic analy-" 
sis of the rules supplied by the user and produces 
a representation of the protocol. Finally we note 
that the interpreter determines a new normalized 
weighting vector for a level from the old one and 
the factors of change obtained as noticed above. 
SOFTWARE AND HARDWARE CONSIDERATIONS 
The actual version of the package is written in 
PASCAL MT+ by using its overlay system. The package 
first level is the "root" of the overlay system con 
taining the overlay manager, the library routines 
of PASCAL and all the global data of the package. 
Each of the remain levels configurates one overlay 
area in the main memory. 
We notice that PASCAL MT+ is a compiler of Pascal 
language for microcomputers with the CP/M operating 
system. Thus, this package can run in a 8 bits mi-
crocomputer system with 64 kbytes RAM. An special 
hardware for floating point real operations its va 
luable. The medium storage must be a floppy disk ~~ 
with at least 250 kbytes. However a 500 kbytes of 
medium storage is recomended. Moreover it is nece-
ssary to use a video terminal, a printer, and a gra 
phic terminal or a digital plotter . 
~~ 
Obviously,by using this implementation of the pro-
gram package, the dimension of the control system 
mathematical model is very constrained. Actually 
only systems with order smaller than fifteen have 
been studied. 
EXAMPLE: MEGAWATT-FREQUENCY CONTROL OF 
A TWO AREA ENERGY SYSTEM 
We consider the gth-orde'r linear system modelled in 
Fosha and Elgerd (1970). This system can be also re 
presented as two interconnected subsystem one for 
each area, by means of equations (2) with N = 2, 
ni = 5 , n2 = 4. The state variables of the first 
area are respectively the integral of the tie line 
power deviation of the area xl the integral of fre 
quency deviation x£, the frequency deviation xï, 
the variations with respect to prescribed steady 
state values of the generator output xl arK} the go 
vernor valve position x^ . In the second area the 
tie line deviation is proportional to the tie-line 
deviation in the first, and so only four state va-
riables are considered with x 2 ; i = 1, 4 having the 
same interpretation of x+; i = 2,5. The interconec 
tion variables are z, = χΊ-
1 = 2 » Z 2 = xl* B y u s i n g 
A. = 
0.545 
0 
-3.27 
0 
0 
V 
0 
-3.27 
0 
0 
0 
0 
0 
12.5 
S 
/ 
/ 
N 
0 
1 
-0.05 
0 
-5.208 
-0.05 
0 
-5.208 
0 
6 
-3.33 
0 
Cl = 
0 
6 
-3.33 
0 
0 
3.33 
-12.5 
0 
0 
3.33 
-12.5 
v 
y 
> 
-0.545 
0 
3.27 
0 
0 
B2 = 
C2 = 
/ \ 
0 
3.27] 
0 
0 
0 
12.5 
Following a step-load change it is intended to min_i 
mize the change in tie-line power,, the frequency de 
viation, and the integral of frecuency deviation 
(time error). To solve this design problem by means 
of the approach presented in the paper, two criteria 
levels have been defined. The first level includes 
three criteria: the tie-line power, the frequency 
deviations and their integrals in both areas, and 
the two control variables. In the second level we 
consider five criteria: the tie-line power, the fre 
quency deviations in both areas, the integrals of 
frequency deviations in both areas, the control in 
area 1, and the control in area 2. Table 1 shows 
the protocols used. 
In two interactions of the algorithm, the named 
"preferred solution" of the hierarchical control 
system design problem was achieved. Table 2 shows 
the diagnostics used and the normalized weighting 
vectors in each interaction. The preferred solution 
is fiven by: 
(13j 
K = (-2.6338 -2.1517 -3.5609 -3.469 -0.689) 
v = (-1.4246 x* -0.2565 x^ -0.2433 x^ -0.053 x*) 
K = (-1.895 -3.5652 -3.4649 -0.685) 
v 2 = (3.1368 x* -1.1005 x^ +0.2292 x^ +0.309 x* 
+0.0654 χ5) 
By using the same criteria the decentralized control 
solution is given by 
K°= (-4.096 -2.724 -3.719 -3.561 -0.72) 
K° = ( -0.6434 -3.2687 -3.293 -0.660) 
(12) 
typical values of the system parameters the matri 
ces of the representation are: 
In Fig. 3 the regulators (11) and (12) are compared 
with the proposed by Elgerd and Fosha (1970). In 
Table 3 we compare the control effort required for 
the three regulators. Notice that state variable 
response of the hierarchical solution can be consi. 
dered the best,one, but it is paid with a greater 
control effort. Decentralized solution has a dyna-
mic state variable response slightly worse than the 
Hierarchical one, but may have the praotical advan 
•tage of the implementation without transmitting 
information between local controllers of each area. 

A Program Package 
225 
CONCLUSIONS 
In this paper we present an algorithm for interacti 
ve multicriteria optimal design of hierarchical and 
decentralized control. By using this algorithm it 
is possible to consider problems with several de-
sign criteria at different hierarchical levels. The 
algorithm is integrated in a program package with 
alternative routines to compute hierarchical and de 
centralized control laws. The package includes an 
interactive module, based on fuzzy set theory,which 
permits to perform the algorithm interactions in a 
qualitative linguistic way. The package offers the 
option of block oriented simulation to represent 
interconnected systems offering additional facili-
ties to modify the structure by reassigning data 
pointers. The package is written in Pascal MT+, by 
using its overlay sistem, and can be implemented at 
low cost in a microcomputer system with the CP/M 
operating system. A megawatt frequency control de-
sign is used as an example of the designing proce 
dure proposed in the paper. 
Finally we note that large scale control system de 
sign requires an implementation of the package in 
a more powerful computer system. 
REFERENCES 
Âstrom, K.J. and H. Elmqvist (1981). "Perspective 
on interactive software for computer aided 
modeling and design of control system". Pro-
ceedings of the 20th IEEE Conference on De-
cision and Control, San Diego. 
Bernussou, J. and A. Titli (1982). "Interconnected 
Dynamical Systems: Stability, Decomposition 
and Decentralization".North Holland. 
Bailey, F.N. and F.C. Wang (1972). "Decentralized 
control strategies for linear systems". Pro-
ceedings, Asilomar Conference. 
Bàptistella, L.F.B. and A. Ollero (1980). "Fuzzy Me 
thodogies for Interactive Multicriteria Opti 
zation". IEEE Trans. Syst. Man and Cybern. 
Vol. SMC-10, July 1980, pp. 355-365. 
Findeinsen, W., F.M. Bailey and others (1980). "Con 
trol and Coordination in Hierarchical sys-
tems". Jhon Wiley and Sons, pp. 369-391. 
Fosha, Ch. E. and O.L. Elgerd (1970). "The Megawatt-
Frequency Control Problem: A New Approach 
Via Optimal Control Theory". IEEE Trans on 
Power and Systems, PAS 89, n^ 4 pp. 563-577. 
Furuta, K. and 0. Yamano (1984). "Computer aided 
control and real time control program orga 
nizing system 'CACOS'". Preprints of 9th 
IFAC World Congress Budapest 1984. Vol. VIII, 
pp. 173-179 
Johnston R.D. and G.W. Barton(1984). "Control obje-
tive reduction in single-input single-output 
control schemes". Int. J. Control, vol.40, 
pp. 265-270. 
Kleinman, D.L. (1967). "On the interactive teclmi 
que for Riccati equation computation". IEEE 
Trans. Autom. Control, AC-13, pp. 114-115. 
Lasdon, L.S.(1970). "Optimization Theory of Large 
Systems". Mcmillan, New York. 
Mesarovic, M.D., D. Macko and Y. Takahara (1970). 
"Theory of hierarchical multilevel systems". 
Academic Press, New York. 
Munro, M. (1981)."Illustration of the applicabiU 
ty of computer aided design packages". Pro-
ceedings of the 20th IEEE Conference on De 
cision and Control, San Diego. 
Ollero A. and R. Marin (1982). "Algorithms for In 
teractive Multicriteria Optimal Design of 
Control Systems". Proceedings of 3th IFAC/ 
IFIP Symposium on Software for Computer Con-
trol. Pergamon Press, pp. 331-337. 
Ollero A. and R. Marin (1984). "An Interactive Mul 
ticriteria Optimization Approach for Linear 
Control System Design". Preprints of the 9th 
IFAC World Congress Budapest 1984.Vol.VIII 
pp. 244-250. 
Pearson J.D. (1971). "Dynamic decomposition techni 
ques" In "Optimization methods for large sea 
le systems". D.A. Wismer (Editor) Mc Graw-
Hill. 
Schäfer R., M. Sain (1984). "A computer aided de-
sign package for the total synthesis problem". 
Preprints of the 9th IFAC World Congress Bu-
dapest 1974. Vol. VIII. pp. 179-185. 
Siljak, D.D. and M.B. Vukcevic (1976). "Decentrali 
zation, stabilization and estimation of large 
scale linear systems". IEEE Trans. Autom. Con-
trol, AC 21, pp. 363-366. 
Singh, M.G. (1980). "Dynamical hierarchical con-
trol". North Holland, New York. 
Tamura, H. (1975). "Decentralized optimization for 
distributed-lag models of discrete systems". 
Automatica. Vol. 11, pp. 593-602. 
(1973). 
Wang, S.H, and E. Y. Davison (1973). "On the stabi_ 
lization of decentralized control systems". 
IEEE Trans. Autom. Control, AC - 18, pp. 473-
478. 
Zadeh, L.A. (1975). "The Concept of a Linguistic 
Variable and its applications to Approximate 
Reasoning". Int-Journ. Of Sciences Vol. 8, 
pp. 149-199, Vol. 8, pp. 301-357, Vol. 9, 
pp. 43-80. 
If 
Cl 
1 
1 2 
2 
2 
Cl 
2 
' 
4 
3 
5 
5 
criterion Cl is Dl 
Dl 
unnacceptable 
good 
good 
poor 
Dl 
acceptable 
acceptable 
acceptable 
acceptable 
acceptable 
and criterion C2 is D2, 
C2 
2 
3 
1 
1 
C2 
3 
5 
2 
4 
4 
level 1 
D2 
unnacceptable 
acceptable 
good 
acceptable 
level 2 
D2 
poor 
poor 
poor 
poor 
acceptable 
then 
C3 
3 
1 
3 
2 
C3 
3 
5 
2 
4 
1 
criterion C3 D3 
D3 
large-decrease 
large-increase 
large-increase 
small-increase 
D3 
small-increase 
small-increase 
small-increase 
small-increase 
small-increase | 
Table 1. Protocols for an Interaction 

226 
A. Ollero and R. Marin 
Ml 
determination and 
analysis of the 
model 
M0 
manager 
M2 
simulation 
M3 
control law 
sinthesis 
M4 
interaction 
Fig. 2 Structure of the program package 
I».. 
-- Elgard and Fosha 
— 
Hierarchical 
— 
Decentralized 
1
 ûpi« « 
Interaction * "end"/ Diagnostic Interaction 
Diagnostic » Definecriterion (modifier term/term) 
Definecriterion ■ "level" number "criterion" number / "criterion" number 
Number * digit/digit number 
Digit » •·ι··/.'2"/"3"/"4"/"5"/"6'7"7"/"8"/"9"/"0" 
Modifier « "highly"/"very"/"more-or-less"/"sort-of"/"rather" 
Term » "good"/"acceptable"/"poor"/"unnacceptable" 
Fig. 1 grammar for an Interaction 
wi 
0.447 
level 1: 
0.612 
level 1: 
0.741 
Table 
w2 
0.447 
criterion 1 
criterion 2 
criterion 3 
0.537 
criterion 1 
criterion 2 
criterion 3 
criterion 3 
criterion 4 
0.480 
2 
Interact 
w3 
W4 
0.447 
0.447 
unnacceptable 
unnacceptable 
good 
0.537 
0.082 
acceptable 
sort of poor 
acceptable 
sort of poor 
acceptable 
0.464 
0.044 
p i e 
W5 
0.447 
0.082 
0.044 
x Fosha and Elgerd, 
xx hierarchical, 
xxx Decentralized 
Maxju,! 
Maxlujl 
— «"«« =-igc 
j<v
2<* J (u^)2 dt 
0.2136 
0.8495 
0.8854 
68.27 E-4 
93.13 E-4 
17.01 E-4 
1.28 
3.47 
3.56 
0.114 
0.309 
0.0737 
Fig. 3 Dynamic of the solutions 
x 
XX 
XXX 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A CAD PACKAGE FOR MULTIVARIABLE 
CONTROL SYSTEMS PRESENTED BY 
POLYNOMIAL MATRICES 
P. Sipari*, R. Ylinen** and H. Blomberg* 
* Helsinki University of Technology, Systems Theory Laboratory, SF-02150 
Espoo, 
Finland 
**Technical Research Centre of Finland, Electrical Engineering Laboratory 
Abstract. The basic theory for analysis and synthesis of differential systems using 
polynomial matrix representation is considered. Concepts like controllability, observ-
ability, stability etc. are defined and methods based on elementary row operations for 
checking them are given. As an example of synthesis methods an algorithm for synthesis 
of observers is given. A similar algorithm for synthesis of feedback compensators has 
been presented elsewhere. Computer aided design of multivariable control systems is per-
formed interactively using a program which enables manipulation of polynomial matrices, 
and a simulation program that uses polynomial matrices as models of differential systems. 
The program for manipulation of polynomial matrices performs row operations and other 
transformations, calculates determinants and their roots etc. Synthesis problems can al-
so be considered by studying different regulator compositions, constructing estimators 
and feedback compensators. The simulation program communicates with the manipulation 
program by means of polynomial matrices stored in files. Simulation results are presented 
by graphic displays or by separate plotter and design decisions can be based on these 
results. The use of the CAD package is demonstrated by considering an observer synthesis 
problem. 
Keywords. Computer-aided design; control system analysis; control system synthesis; 
linear systems; multivariable control systems; observers; polynomials. 
INTRODUCTION 
The polynomial matrix representation introduced by 
Blomberg and co-workers (1969, 1978), Rosenbrock 
(1970) and Wolovich (1974) seems to be successful 
in solving various analysis and synthesis problems 
concerning multivariable control systems. 
The polynomial matrix representation utilizes an 
operator algebra which is a natural generalization 
of the Laplace and Z transforms. Its use does not 
imply zero initial conditions, which in turn makes 
the calculus more complicated. On the other hand it 
can be shown that many problems can and should be 
treated without specified initial conditions. In 
particular the initial conditions for multivariable 
systems are so awkward to treat, that it is best to 
try to avoid them entirely. 
In this article we shall give a brief presentation 
of the operator algebra mentioned above, and of the 
associated polynomial matrix representation along 
with a CAD package based on this representation. A 
more comprehensive presentation of the theory and 
algorithms for feedback compensation and observer 
synthesis can be found in the book by Blomberg and 
Ylinen (1983). The CAD package enables the designer 
to apply these analysis and synthesis methods to 
real multivariable control system design. 
As an example an observer synthesis problem is con-
sidered. An example of a feedback compensator syn-
thesis is presented in a paper by Blomberg, Ylinen 
and Sipari (1983). 
p is a linear operator on x. The ring c[p] of poly-
nomials in p over the field c of complex numbers is 
a commutative subring of the ring of endomorphisms 
of X and X is a (left) module over c[p]. 
A system of s linear time-invariant differential 
equations can be written as 
A(p)y = B(p)u 
(V 
with u € X , y € X q , and with A(p) and B(p) polynomial 
matrices of sizes s by q and s by r, respectively. 
The differential 
input-output 
relation 
determined 
by Eq. (1) is defined as the set S of input-output 
pairs (u, y) that satisfy Eq. (1). Eq. (1) can also 
be written as 
[A(p) i-B(p)] 
0 
(2) 
and we shall say that S is generated by the parti-
tioned matrix [A(p) 1 -B(p)] and that [A(p) ! -B(p)] 
is a generator 
for S. S is clearly uniquely deter-
mined by its generator but the same S can be gener-
ated by infinitely many generators which are said 
to be input-output 
equivalent 
to each other. 
A generator [A(p) ! -B(p)] such that det A ( p ) ^ 0 is 
called regular 
and an input-output relation is reg-
ular if it has a regular generator. A regular input-
output relation has the property that its every sub-
set of input-output pairs coinciding with a pair of 
given initial segments up to a given time is a mapping. 
DIFFERENTIAL INPUT-OUTPUT RELATIONS 
Let X be a vector space of complex-valued functions 
defined on an open interval T C R , Suppose further 
that the elements of X are infinitely differenti-
a t e , which yields that the differentiation operator 
COMPOSITIONS OF DIFFERENTIAL 
INPUT-OUTPUT RELATIONS 
Let B = {S^..., S,} be a family of differential in-
put-output relations generated by regular generators 
[ΑΊ·(ρ) i -B.j(p)] , i = 1,..., k. 8 can be presented as 
227 

228 
P. Sipari, R. Ylinen and H. Blomberg 
a regular input-output relation S consisting of 
pairs (u,y ) = ((u1,..., u. ), (y 
., y )) 
with 
(lu.yjeS,,..., (u.,y.)€KS, and generated by 
[ A(p) '; -B(p') ] with KA(ß) = block diag (AWp),..., 
Ak(p)) and B(p) = block diag (B](p),...,' Bk(p)). 
The interconnections between the input-output re-
lations are described by means of an interconnec-
tion matrix C, which tells how the inputs u ex ° 
and y €X% of the overall relation are chSsen and 
how trie inputs u. £Xri and the outputs y.€X^i are 
connected.C is a (3q0+lr-j) by (r^ + lq-j) matrix such that 
(i) 
every entry is either 1 or 0 
(ii) 
every row contains one and only on 1 
(iii) each of the first r columns contains at 
least one 1 
° 
(iv) the first r entries of the q uppermost rows 
are zeros. 
The interconnection constraints can be expressed 
via the matrix multiplication 
0 | C 2 
-c-fc--
4 = c 
(3) 
Now the pair (B, C) is called a composition of the 
family 8. Obviously, the family B can be replaced 
by a singleton set {S} or simply by S or, further-
more, by the generator [ A(p)i-B(p)]. 
A composition (S, C) always defines an internal 
in-
put-output relation S., an overall input-output 
re-
lation S and an internal-overall 
input-output 
re-
lation 
S- consisting of pairs (u , y ) , (uQjy0) and 
(u .(y,,yn)) respectively, satisfying Eq. '" ·-'* 
(u°,y) e§. 
(3) with 
The internal input-output relation S. determined by 
(S,C) is a differential input-output relation gener-
ated by the equation 
A(p)-B(p)C4 j o l 
c2 
p ] 
[
 V 
[
yo. 
B ( p ) C 3 ' 
0 
If S and S. are regular we call the composition 
(S, C) regular, too. 
The composition (S,C) is said to be observable if 
for each (u0,y0) €S there exists a unique y such 
that (v(y,y0])esV 
If S is the overall input-output relation deter-
mined by a composition (S,C), the composition (S,C) 
is said to be a decomposition of S . Two composi-
tions are input-output 
equivalent 
if they determine 
the same overall input-output relation. 
POLYNOMIAL AND RATIONAL MATRICES 
Suppose that the signal space X is such that p is an 
indeterminate over c. Then c[ p ] is an integral do-
main and has the field C(p) of quotients. X can be 
considered as vector space over c(p) if and only if 
every nonzero a(p)€C[p] is a bijection. 
An s by q-matrix A(p) over c[p] is invertible 
as a 
polynomial matrix if and only if s = q and detA(p) 
is a nonzero constant. The matrices A(p) and B(p) 
are row equivalent 
if A(p) = P(p)B(p) with P(p) in-
vertible. Correspondingly, A(p) and B(p) are column 
equivalent 
if A(p) = B(p)Q(p) with Q(p) invertible. 
A polynomial matrix A(p) with detA(p)^0 is row 
equivalent to an upper triangular matrix where every 
entry above a diagonal entry is of lower degree than 
the diagonal entry itself and the diagonal entries 
are monic i.e. their leading coefficients are equal 
to one. This matrix can be found by means of a tri-
angularization 
procedure 
using elementary 
row 
oper-
ations. 
If the upper triangular matrices A(p), B(p) with 
det A(p) Φ 0, det B(p) Φ 0 are row equivalent and of 
the form described above, then A(p) = B(p). Such a 
form is called a canonical 
upper 
triangular 
form 
(CUT form). The triangularization can be applied to 
matrices with zero determinants and to nonsquare 
matrices, too, and the corresponding results are 
CUT forms. With the aid of elementary 
column 
oper-
ations a polynomial matrix can be transformed to a 
canonical lower triangular form. 
Another important canonical form for the row equi-
valence of polynomial matrices is the canonical row 
proper 
form (CRP form) which is defined as follows. 
The ith row degree of a polynomial matrix is the 
highest degree of the entries in the ith row and the 
corresponding leading row coefficient is the row ma-
trix consisting of the coefficients of the terms of 
row degree. The matrix A(p) with det Α(ρ)=^ 0 is row 
proper if its leading row coefficients are linearly 
independent i.e. the matrix having them as its rows 
is invertible. A(p) is of CRP form if it is row 
proper and the matrix consisting of the leading 
terms of the entries of A(p) is of CUT form. Row 
properness and CRP form can also be generalized to 
matrices with zero determinants and to nonsquare 
matrices. Column proper forms can be obtained by 
elementary column operations. 
A q by q-matrix C(p) is a greatest 
common left 
divi-
sor (GCLD) of a g by q-matrix A(p) and a q by r-ma-
trix B(p) if it is a common left divisor of A(p) 
and B(p), i.e. A(p) = 0(ρ)ΑΊ(ρ) and B(p) = 0(ρ)ΒΊ(ρ), 
and every other common left divisor D(p) of A(p) and 
B(p) is a left divisor of C(p), i.e. C(p) = D(p)E(p). 
If the matrix [A(p) ! B(p)] is transformed to a 
column equivalent matrix [C(p) ! 0], then C(p) is a 
GCLD. In particular, if the GCLDs of A(p) and B(p) 
are invertible then A(p) and B(p) are left 
coprime. 
For A(p) and B(p) left coprime there are matrices 
Q3(p) and Q*(p) such that 
fA(p) | B(p) 
Q3(P) !Q4(P)J 
is invertible. Conversely, if 
Q(P) 
P(P) = 
Ρ-,(Ρ) { P 2 ( P ) 
[P 3(P) ;.P4(P) 
, with ΡΊ(ρ),Ρ4(ρ) square 
is invertible, then P-i(p) and P2(P) are left coprin 
and so are Po(p) and P*(p). 
A rational matrix G(p) over c(p) can be presented 
in the forms 
G(p) = A(p)_1B(p) = Ltp)M(p)"1 
(5) 
with A(p) , B(p) left coprime and L(p), M(p) right 
coprime polynomial matrices. G(p) is proper (alter-
natively strictly 
proper) if its entries are proper 
(strictly proper), i.e. their numerators are at most 
of as high degree as (lower degree than) their de-
nominators. If G(p) is proper (strictly proper) then 
the row degrees of B(p) are at most as high as (low-
er than) the corresponding row degrees of A(p). If 
A(p) is row proper this also holds conversely. The 
corresponding properties hold for the column degrees 
of L(p) and M(p). 
ANALYSIS OF INPUT-OUTPUT RELATIONS 
Let S 
gener 
Ί and S9 be differential input output relations 
ited b/[A(p) ! -B(p)] and [ L(p)A(p)!-L(p)B(p)] , 
respectively. Then S-.cS2, and if L(p) is invertible 
then S, = S2, i.e. row equivalent generators are in-
put output equivalent. 

A C A D Package 
229 
Let X be "sufficiently rich" in the sense that it 
contains all possible complex-valued solutions y to 
all equations a(p)y = 0,a(p)^0, or equivalently, 
contains all signals of the form tn exp(At), t e T , 
n = 0,1,2,..., x e c . Then the regular input-output 
relations S and S-, generated by [A(p)|-B(p)] and 
[Α,(ρ)ί-Β,(ρ)] satisfy S, c S if and only if the 
generatori satisfy 
elementary row operations this can be brought to 
the form 
[A(p)!-B(p)] = LipHA^pJI-B^p)] 
(6) 
for some square polynomial matrix L(p). Moreover, 
S-. = S if and only if L(p) is inverible. This means 
that input output equivalent regular generators are 
also row equivalent, i.e. for them the input-output 
equivalence and row equivalence coincide. Further-
more, the canonical forms for row equivalence are 
then canonical forms for input-output equivalence, 
too. 
Let [A(p)s-B(p)] be regular. Then A(p) is invertible 
as a rational matrix. The rational matrix G(p) = 
Α(ρ)~Ίβ(ρ) is called the transfer 
matrix 
determined 
by [A(p){-B(p)l. It should be noted that G(p) can 
be identified with a mapping X r -> Xe! if A(p) is in-
vertible as a polynomial matrix. However, arbitrary 
transfer matrices can be identified with mappings 
if and only if X can be considered as a vector space 
over c(p). 
Two generators as well as the corresponding input-
output relations are said to be transfer 
equivalent 
if they determine the same transfer matrix. For each 
rational matrix G(p) there is a regular generator 
[ A-|(p)i-B, (p)] , with Απ(ρ), Β-,(ρ) left coprime such 
that that e^ery other transfer equivalent generator 
[A(p)i-B(p)l satisfies Eq. (6) for some L(p). 
If X is sufficiently rich, then the transfer ma-
trices determined by all generators of two regular 
input-output relations S, and S 2 such that S-, c S? 
are equal. The same holde if X nas a c-subspace X' 
such that p restricted to X' is an operator of X' 
and an indeterminate over c, and X' can be regarded 
as a vector space over c(p). 
A regular generator (A(p)i-B(p)] and corresponding 
input-output relation are called (strictly) proper 
if the transfer matrix G(p)=A(p)"1 B(p) is (strictly) 
proper. 
A regular generator [A(p)|-B(p)] and the corresponding 
input-output relation are said to be 
controllable 
if A(p) and B(p) are left coprime. A controllable 
input-output relation is minimal among the input-
output relations generated by transfer equivalent 
generators. 
Finally, a regular input-output relation S generated 
by [A(p)|-B(p)] is asymptotically 
stable if e^ery 
y€S(0) asymptotically approaches zero with in-
creasing time. If X is sufficiently rich, S is asymp-
totically stable if and only if the roots of detA(p), 
i.e. the roots of the characteristic 
polynomial of 
S, have negative real parts. 
It is important to note that for algebraic reasons 
we have to use numbers to describe the system para-
meters. This means that we lose the relationships 
between the model parameters and the original quan-
tities of the real system. Therefore the methods 
based on the model have to be robust, i.e. insensi-
tive with respect to variations in parameters, pos-
sibly in degrees of polynomials, too. 
ANALYSIS OF COMPOSITIONS 
Let the internal-overall relation S. determined by 
a composition (S, C) be generated by Eq. (4). Using 
A1 {p){ A 2(p)| 
o 
|A 4(P)J 
[ y 
k. 
Β,ίρ)" 
[B 2(P)J 
If for each (u ,y ) such that 
A 4( P)y 0 = B 2 ( P ) U 0 
there exists a corresponding y such that 
A^pjy + A2(p)yQ = B^pju o ' 
(7) 
(8) 
(9) 
then the overall input-output relation S is gener-
ated by Eq. (8). In particular, this holas if A,(p) 
is a surjection. If A-i(P) is in addition a bijection 
then the composition (S,C) is completely observ-
able. If X is sufficiently rich then A ^ p ) is a bi-
jection ifjnd only if it is invertible, and fur-
thermore, A-, is invertible if and only if A(p)-B(p)C, 
and C9 are right coprime. 
OBSERVER SYNTHESIS 
Let S be a regular differential input-output rela-
tion with two outputs y,, y ? . Suppose that S is 
generated by the equation 
'Α^ρ) j A2(p)"I 
. A3(p) f A4(p)J K 
[
y2 
' B ^ P ) ' 
.B2(P)_ 
(10) 
A(P) 
B(P) 
Only the output y? can be observed and used together 
with u as inpyt of a regular differential input-out-
put relation S called an observer. 
Consider the composition shown in Fig. 1 and suppose 
that S is given and regular. The problem is to find 
a regular differential input-output relation S such 
that the internal input-output relation S-jis regular 
and at least the following conditions are fulfilled. 
|°0 
I
5· 
Uo| 
j 
U 
Ί " 1 
1 
1 | 
1 1 
1 
1 1 
1 1 
1 L 
L 
S 
s 
,/ΐ 
y2 
% 
—~ 
r-( 
—1 
Ί 
1 
— I ~ ~ 
— U 
1 
: 
H 
\ 
i ! 
^ 
1 
1 
■ 
1 
y0 
Fig. 1. The observer synthesis problem. 
If 
y 1|(-oo,t)fiT= Υ τ Κ - ο , ΐ θ η τ 
for some t € T 
then y-, = y-,. 
(11) 
The overall input-output relation S should be asymp-
totically stable and the roots of i¥s characteristic 
polynomial should be located in a satisfactory way 
with regard to the resulting dynamic properties. 
The observer should also fulfil certain other condi-
tions. For instance S should be realizable as simply 
as possible, which in practice means that it has to 
be controllable and of low order. Furthermore, the 

230 
P. Sipari, R. Ylinen and H. Blomberg 
properties of S should be insensitive to small va-
riations in parameter values. 
The first step towards a solution is to bring the 
generator for S to upper triangular form 
MP) 
A2(P) « -B^p) 
A4(p) j| -B2(p)J 
(12) 
Let [C(p) !{ -D^p) { -D2(p)] be a generator for S. 
It is quite easy to see that in order to fulfil the 
condition (11) the overall input-output relation of 
the composition in Fig. 1 has to be generated by a 
generator of the form [E(p) { 0] . This, further-
more, leads to the result that the observer S has 
to satisfy 
U(p)[C(p) S-D^p) 1 -D2(p)] 
[T^pjiTgip)]! 
'Α,ίρ 
0 
II 
u 
It 
■Mi-
ll 
11 
-Β,ίΡ)! 
~~ 
l 
-B 2(P) i 
A p ( p ) " 
A 4(P)J 
and 
(13) 
(14) 
T ^ p J A ^ p ) = E(p), 
with U(p) and [T,(p) ! T2(p)] left coprime. 
Obviously 
[C(p)ii-D1(p)!-D2(p)] = [A1(p) ÎJ -^(ρΐί^ίρ)] 
(15) 
satisfy the condition (13) but possibly not the 
other conditions. If Α-,(ρ) is 'stable', then a 
'stable' and proper observer can be constructed 
with the aid of a number of suitable transformations 
T (P). T^(p),..., Tk(p) according to 
U(p)[C(p)!i - η Ί ( ρ ) ! -D 2(p)l 
J^iEL 
_l!lEl_ 
T
] ( P ) 
= [ I I 0] TJ(P)!T^(P) 
τί(Ρ)!Τ|(ρ) 
_' 
i 
o i i 
T1(P)JT^( P)
: 
_1 
4.-t 
0 
I 
I T ^ p J l T2(p)] 
Α-,(ρ) »I - ^ ( P ) 
| 
A?(P) 
0 
(I -B2(p) 
} 
A4(p) 
(16) 
with T J D ) = ΤΓ(ρΚ.. T-j (p) τ](ρ) 'stable' and with 
T (p)» Τ2(ρ)9..., r(p) further so chosen that a 
proper observer results. 
It can be shown that if [C(p) ! -D2(p)] as obtained 
from Eq. (16) and S are proper. Then the whole ob-
server is proper. 
The transformations needed above can be chosen ac-
cording to the algorithm developed in the book by 
Blomberg and Ylinen (1983) (suitably modified). 
It should be clear that the observer always can be 
chosen controllable: suppose that in Eq. (16) a 
'maximal' U(p) is extracted (C(p), D,(p), D?(p) 
left coprime). If U(p), Τ,(ρ), Τ?(ρ) are not left 
coprime, then a GCLD of U(p), T-.fp), T«(p) is can-
celled from Eq. (15). On renaming the remaining 
left coprime factors as U(p), T,(p), T?(p) respec-
tively we obtain a final (13) leading to a controll-
able observer. 
CAD PACKAGE 
The CAD package for multivariable control systems 
represented by polynomial matrices consists of two 
separate programs; one for algebraic manipulations 
of real coefficient polynomial matrices (RPMAT) and 
the other for simulation of differential systems 
represented by polynomial matrices (PSIM). Both 
programs were written using Pascal in HP 1000/A 700 
computer environment. They are interactive and easy 
to use for solving different kinds of analysis and 
synthesis problems. Although the program for mani-
pulation of polynomial matrices and the simulation 
program are separate they cooperate with each other 
through polynomial matrices stored in files. 
Manipulation Program RPMAT 
Using the program for algebraic manipulation of real 
coefficient polynomial matrices it is possible to 
handle a specific so called object matrix at a time. 
The object matrix can be given from the terminal or 
read from the file and it is analyzed and manipu-
lated by using commands. Commands and possible ad-
ditional parameters are given interactively after 
programs prompt. With the aid of help command it is 
possible to get information about all possible com-
mands and also detailed information about each com-
mand and its usage. 
Some parameters such as summation error level and 
parameters for calculation of the roots of a poly-
nomial which are used repeatedly during many differ-
ent commands are initialized at the beginning of 
the execution and they stay valid until changed 
by definition command. 
While executing the program it is also possible to 
handle files for storing the object matrix or its 
submatrix and for making the matrix stored in file 
a part of the object matrix. 
The program checks the correctness of a given com-
mand and its parameters and informs about possible 
errors without terminating the execution. It is al-
so possible to return to the previous object matrix 
i.e. to annul the latest command. 
The present version of the program uses virtual mem-
ory file so that if the program is terminated its 
execution can be continued using the latest object 
matrix and parameter definitions. 
Commands. Commands consist of three-character com-
mand codes and possible parameters such as row or 
column indices and polynomials etc. Polynomials are 
normally given by writing the coefficients in de-
creasing order separated by blanks or commas. 
For input and output there are different commands 
for giving the whole object matrix or a part of it 
from the terminal, for reading the object matrix 
from file and for defining a zero or identity matrix 
of desired size as object matrix. The object matrix 
or a part of it can be displayed completely or by 
giving only the highest degree terms of each entry. 
For operating on the object matrix via elementary 
row or column operations there are commands for in-
terchanging the rows or columns and for multiplying 
a row by a polynomial and adding a row to another 
multiplayed by a polynomial. 
There are commands for transposing the object matrix 
or its submatrix. There are also commands for trans-
forming the object matrix to upper triangular or 
row proper form and for removing the greatest com-
mon left divisor of the columns of the object ma-
trix. 

A C A D Package 
231 
In addition if the object matrix is considered as 
a generator a corresponding state-space represen-
tation can be constructed. 
For using files to manipulate the object matrix 
there are commands for joining the matrix stored 
in file to the object matrix in different ways. The 
object matrix can also be pre- or postmultiplyed 
by the matrix in file and the matrix in file can 
be added to the object matrix. 
There are commands for solving feedback compensator 
and estimator design problems via algorithms based 
on the theory. Different feedback compensator struc-
tures can be analyzed and candidates for feedback 
compensators and estimators can be constructed. 
Finally there are commands for defining some para-
meters, and the names of used files, for returning 
to the previous object matrix and for terminating 
the execution of the program. 
Numerical considerations. Frequent use of arith-
metic operations in elementary row operations re-
sults in growing truncation errors. 
In the worst case this leads to incorrect or unre-
liable results in solving analysis or synthesis 
problems. Actually it is most important that the 
degree of each entry of the object matrix is cor-
rect after each operation. Therefore double preci-
sion (about 16 digits) is used in the program. In 
adding polynomials term by term the following close-
ness test is used: 
Ck + C2 
Cl " C2 
The program asks first the names of the files where 
the generators of the subsystems have been stored. 
After that input delays in the subsystems can be 
defined. 
An interconnection is given by defining for every 
input whether it is equal to some output or equal 
to an overall input. The values of overall inputs 
can be given using constants, ramps, sinusoidal s 
and uniformly or normally distributed random func-
tions. 
Next the initial and terminal times and the lenghts 
of integration and printing intervals are given. 
Finally the input and output components to be stored 
are named and the printing file to be used is spec-
ified. 
After these definitions, the program starts the sim-
ulation with zero initial conditions. Our test sim-
ulation runs have not revealed any particular nu-
merical problems. 
A NUMERICAL EXAMPLE 
Let us consider the following observer synthesis 
problem. The generator of the original system S is 
(17) 
*1 
P + 1 
0 
-1 
0 
H 
2p + 6 
2 
p + 5p + 6 
0 
-p 
- 3 
*3 
0 
0 
p+3 
2 
y4 
0 
0 
-1 
P+l 
u 
-1 
P+l 
0 
0 
(18) 
where c-, and c2 , (c-, · c2 < 0), are coefficients to 
be added and ε is a Summation error level defined 
by the user. If Eq. (17) holds the corresponding 
coefficient of the resulting polynomial is supposed 
to be zero, otherwise equal to c-. + c?. Some other 
common methods are also used to reduce the errors 
caused by truncations. 
The effect of the truncation errors depends natu-
rally on the numerical values of the object matrix 
and on the amount of operations to be done. The 
test problems considered seem to show that systems 
of order 10 or less can be analysed and e.g. feed-
back compensators for them can be constructed. 
Simulation Program PSIM 
Using the simulation program it is possible to sim-
ulate linear time-invariant proper differential sys-
tems. The system can be represented by a composi-
tion of subsystems which also may have input de-
lays. Simulation results are stored in a file from 
which they can be plotted out using a graphic dis-
play or a plotter. 
Subsystems are represented by generators in row 
proper form. Each subsystem is simulated applying 
the fourth order Runge-Kutta method and a state-
space type representation which is easily consructed 
from the row proper form. The whole system is sim-
ulated simulating the subsystems in the order in 
which they were defined and taking their intercon-
nections into account. 
The simulation program stores the definitions given 
at the beginning of the simulation in a definition 
file. Previously stored definitions, possibly ap-
pearing, are read as optional settings and each of 
them can be accepted as such or changed if neces-
sary. 
where the input u and the outputs y 3 and y- can be 
observed. Our problem is to design a strictly prop-
er observer S for estimating the outputs y-, and y ?. 
S can be interpreted as representing e.g. a series 
composition of two subsystems. 
Using the RPMAT program the generator (18) is first 
brought to an upper block triangular form (12) 
^1 
-1 
^2 
0 
JLJp+JL 
o 
o 
o 
o 
^3 
P+-3 
y 4 
-1 Si ° 
1Γ" 
-p2-2p-3 
p2+2p+l |j p+2 
giving 
A-, (p) 
0 
0 
2 p + 6 
pS3p+2ilp+lJ 
(19) 
It follows that [y^^y^) 
cannot be uniquely deter-
mined on the basis of y~9 y« and u. A stable ob-
server can nevertheless be constructed because the 
only root of the determinant of ffi(p) above is -3. 
The generator (19) is chosen as a first candidate 
for the construction of the observer. New candidates 
are then constructed with the aid of the RPMAT prog-
ram. When a factor is added to characteristic poly-
nomial of the candidate, (p + 5) is chosen as satis-
factory. After each step the program tests the prop-
erness of the candidate. Finally a strictly proper 
candidate (20) is obtained for the observer. The 
characteristic polynomial of the resulting observer 
chosen as given by the generator (20) has one root 
at -3 and three roots at -5. 

232 
P. Sipari, R. Ylinen and H. Blomberg 
5p2+50p+125 -8p2-64p-120|!-23p-63J -80p-52 94p+174J 
0 
p2+8p+15 j« 
p+ 1 } 
-6 
-3p -3 J 
(20) 
The behaviour of the constructed observer connected 
to the original system can be studied with the aid 
of the simulation program. One simulation run ob-
tained is depicted in Fig. 2. The initial values of 
the outputs and their derivatives of the original 
system S are here equal to zero. The initial values 
of the outputs of the observer S are equal to -0.5 
with zero derivatives. The input u is a unit step 
at 0. 
Rosenbrock, H.H. (1970). State-space and multivari-
able theory. Nelson, London. 
Wolovich, W.A. (1974). Linear multivariable systems. 
Springer, New York. 
1 
2.0 
1.0 
0.0 
.1 n 
Y 
..—-
3—-^^— 
y2 
"h 
I 
_ J 
I 
I 
_ . 
0.0 
1.0 
2.0 t 
Fig. 2. Simulated behaviour of true and estimated 
outputs. 
Other examples have been considered in theses and 
in other unpublished papers. 
CONCLUSIONS 
In this paper a CAD package for multivariable con-
trol systems represented by polynomial matrices has 
been presented along with the theoretical background 
and an example. The created theoretical machinery 
seems very promising and it works rather well in 
treating problems concerning analysis and synthesis 
of multivariable linear systems. At present the 
truncation errors in manipulating polynomial ma-
trices limit the order of the systems to be consid-
ered to about ten. The simulation program is easy 
and flexible to use and it has proved wery suitable 
for our purposes. Present research focuses on numer-
ical aspects, in particular on utilizing structural 
properties of the system to achieve improved versa-
tility. 
REFERENCES 
Blomberg, H., A. Halme, J. Sinervo, and R. Ylinen 
(1969). On algebraic methods in systems theory. 
Acta Polytechnica Scandinavica, Ma 19, Helsinki. 
Blomberg, H., and R. Ylinen (1978). Foundations of 
the polynomial theory for linear systems. Int. 
J. General Systems, 4-, 231-242. 
Blomberg, H., and R. Ylinen (1983). Algebraic the-
ory for multivariable linear systems. Academic 
Press, London. 
Blomberg, H., R. Ylinen, and P. Sipari (1983). 
Polynomial systems theory and multivariable 
feedback compensator design. In V. Kelhä, M. 
Luukkala, and T. Tuomi (Ed.), Topics in Techni-
cal Physics. Acta Polytechnica Scandinavica, 
Helsinki, pp. 28-38. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
MAX - A PROGRAM SYSTEM FOR SYMBOLIC 
MANIPULATION OF POLYNOMIAL 
MATRICES 
J. T. Tanttu and M. Aaltonen 
Department of Electrical Engineering, 
Tampere University of Technology, 
PO Box 527, SF-33101 
Tampere, Finland 
Abstract. MAX is an interpreted programming language for polynomial matrix manipula-
tions. It contains especially those operations which are frequently needed in linear 
control. MAX is written using the C programming language under the VAX/VMS operating 
system. In this paper the design, implementation and available operations of MAX are 
described. 
Keywords. Computer aided design, symbolic computation. 
1. INTRODUCTION 
2. DESIGN AND STRUCTURE OF MAX 
Many design methods of multivariable control systems 
lead to symbolic manipulation of polynomial or ra-
tional matrices (Kucera, 1979, Kailath, 1980, 
Wolowich, 1983, 198U). These calculations are ex-
tremely tedious and time consuming to work out man-
ually. There exist some general purpose program 
systems for symbolic mathematics - the best-known 
of which is perhaps MACSYMA (Mathlab, 1983) written 
in LISP. It is a very large program that requires 
an effective virtual memory computer. The recent 
trend is, however, to implement symbolic mathemat-
ics even with microcomputers (mikromath and SMP on 
IBM PC). 
MAX, a program for symbolic computation of poly-
nomial matrices, is by no means intended as a rival 
for these extremely sophisticated systems. On the 
contrary MAX is a special purpose system intended 
exclusively for manipulations of polynomial and 
rational matrices having one free variable. MAX 
contains the basic operations ( + ,-,x,/) forscalars, 
polynomials, polynomial and rational matrices. 
More importantly MAX contains algorithms that are 
often needed in control system design and synthesis : 
- greatest common divisor (gcd) and least common 
multiple (lern) of polynomials and polynomial ma-
trices 
- Smith form of a polynomial matrix 
- extraction of matrix divisors 
- coprime matrix fraction representation of a ra-
tional matrix. 
Most of the algorithms are from Kucera (1979)· 
Other algorithms can be found in Pernebo (1980). 
In section 2 the design and implementation of MAX 
is described. Section 3 describes the available 
functions. In section k an example is pre-
sented how MAX can be used in controller design. 
Finally in section 5 some conclusions are given and 
the effect of symbolic computation methods in 
future CAD-systems for control engineering is 
briefly discussed. 
MAX is an interpreter like ("command driven") pro-
gram especially designed for computations with poly-
nomial matrices . Actually MAX is a very high level 
interpreted programming language. Its data types 
are scalars (floating point numbers and integers) 
(s), polynomials (p), polynomial matrices (pm), 
rational expressions (polynomial fractions) (r) 
and rational matrices (rm) each having one free 
variable and lists (l) consisting of objects of the 
other data types. 
The command language includes besides the computa-
tional functions (see section 3 ) s some control 
structures for user programming and a possibility 
to define new functions. 
MAX manipulates named objects that reside in its 
working space. When the program is started the 
working space and nametable are both empty. The 
program allocates memory for the new objects dyna-
cally and there is also a garbage collection sys-
tem in the system to prevent excessive use of mem-
ory. When the program is terminated all data in 
the working space including the nametable and the 
objects are lost. The user has however a possibil-
ity to store objects into external files using a 
specific save command. 
MAX is written using the C-language under VAX/VMS 
operating system. Its command language in imple-
mented using YACC (Johnson, 1978) a compiler com-
piler. This makes changes of the syntax quite 
easy. 
Because most of the algorithms in MAX are done in 
floating point form it would be more accurate to 
call MAX a semi symbolic program system in contrast 
to systems that use accurate arithmetic with infi-
nite precision" numbers. This is not believed to 
be any serious deficiency since usually the data 
used in control system design is not accurate. MAX 
contains an interface to MACSYMA where more accu-
rate calculations may be performed if needed. 
3. SYNTAX AND AVAILABLE OPERATIONS 
The Data Types of MAX 
Integers and reals. Integers and reals are in the 
233 

234 
J. Tanttu and M. Aaltonen 
sequel called scalars to distinquish them from more 
complex data types. They are presented according 
to the syntax of the C programming language. 
Polynomials. Polynomials are expressed almost as 
in the normal mathematical notation. However the 
multiplication is denoted with * symbol and the 
power with a t-sign. 
ex. 1.0 + 5.0*z+3 is the MAX notation for polynomial 
l + 5z3. 
Rational functions (polynomial fractions). Rational 
functions are expressed as a ratio of two poly-
nomials 
ex. (z + 2.0*zt2)/(7.0 + z) is the MAX notation for 
z + 2z2/T+ z. 
In the notation the paranthesis are necessary. 
Matrices. Matrices can have as their elements any 
of the above mentioned datatypes. They are defined 
as 
(mat m,n) L 
where m and n are the column and row dimensions of 
the matrix and L is a list of its elements. 
Lists. List is an indexed array of elements. Its 
elements may be of any allowable MAX datatype even 
other lists or matrices. 
ex. [A, (1 + zt2) + 3, 2.71] 
Lists are extensively utilized in functions that 
return many values. Returning these values in a 
single list saves considerably the user's typing 
efforts. 
The Syntax of MAX 
Instead of the complete syntax of the MAX pro-
gramming language only some of its features are pre-
sented with examples. 
The variables of MAX are character strings starting 
with a letter. The length of the names of vari-
ables is not restricted and both lower and upper-
case letters may be used. In the subsequent ex-
amples the variables are written in capital letters 
and the names of the MAX functions with lowercase 
letters. 
The assignment operator. The basic use of the as-
signment operator is to give values to named vari-
ables. No type checking is performed and the old 
value of the variable is lost if the same name is 
used twice. 
Ex. let us give values to k objects 
A = 1.0*z + 2.5*z+2; 
B = AtlO; 
L = [A,B]; 
notice that L is a list 
M = (mat 2,2) [Α,Β,ΐ]; 
In the last example the matrix element M(2,2) is 
assigned the value zero as the list contains only 
three elements. An alternate way to perform the 
same assignment is: 
M = (mat 2,2) [ ]; 
definition of a zero matrix 
M(l,l) = A; 
M(l,2) = B; 
M(2,l) = 1; 
In the examples above another MAX operator, the 
semi-colon (;) operator, is used. It indicates to 
the command interpreter the termination of a com-
mand. 
Basic arithmetic operations. An essential feature 
of MAX is its ability to do arithmetics with all 
its datatypes excluding lists. Addition, subtrac-
tion and multiplication are defined with all the 
datatypes (except lists) with the requirement that 
matrices be of the proper dimensions. Division of 
polynomials or rationals may be done with the 
solidus (/) operator resulting to a rational value 
but there is a separate function for polynomial 
division called div returning both the quotient and 
remainder polynomials in a list. Tables 1, 2 and 3 
illustrate the allowable types in addition, multi-
plication, and division operations. 
The power operation. The power operation of MAX 
has the syntax 
Αΐη 
where A is an expression of any of the data types 
(s, p, r, pm, rm) and the exponent n has an integer 
value. Negative exponents are not allowed with 
matrices. 
Special Operators 
The special feature of MAX are its functions for 
polynomial and rational matrix manipulations some 
of which are described in this section. 
1. Division of polynomials has the syntax 
[U, V] = div(A,B); 
where A,B,U,V are polynomials. Notice that the 
quotient U and the remainder V are returned in a 
list. Thus the statement 
X = div(zt2+z+l,z); 
would yield X(l) = z + 1 and X(2) = 1. 
2. Division of polynomial matrices. As matrices 
are non-commutative there is a separate function 
for left and right division of polynomial matrices 
each returning a two element list consisting of the 
quotient and the remainder matrices 
[U1,V1] = ldiv(A,B); where A = B*U1 + VI 
[U2,V2] = rdiv(A,B); where A = U2*B + V2 
3. Extraction of a divisor from a polynomial matrix. 
There is a separate function for extracting a left 
or a right divisor from a polynomial matrix: 
Cl = rextract(Gl, C) ; where C = C1*G1 
C2 = lextract(G2, C ) ; 
where C = G2*C2 
k. The euclidean algorithm for polynomials. The 
operator eue does the euclidean algorithm for two 
polynomials 
[G, P, Q, R, S] = euc(A,B)·, 
Thus the function eue returns a l i s t of 5 poly-
nomials satisfying the equations 
AP + BQ = G 
G = gcd(A,B) 
A R + B S = 0 
L = A R = lcm(A,B) 
There are also separate functions gcd and 1cmwhich 
return the greatest common divisor and least common 
multiple polynomials of the two argument poly-
nomials respectively. 
5. Zeroes of a polynomial. The function zeroes 
returns the zero points of a polynomial in a list. 
6. Smith form of a polynomial matrix. Function 
smith returns a list of three matrices that are the 
smith decomposition of its argument polynomial 
matrix : 

MAX 
235 
L = smith(A); 
where L = [U,S, V] is a list of three polynomial 
matrices satisfying S = UAV, U and V being unimodu-
lar and S having non-zero elements only in the di-
agonal . 
7. Determinant of a polynomial matrix. One of the 
most often used functions is det which computes the 
determinant of a polynomial matrix 
R = det (A); 
As an example the following statement yields the 
zeroes of the determinant of a polynomial matrix: 
X = zeroes(det(A)); 
where A is a polynomial matrix. 
8. The euclidean algorithm for polynomials matrices. 
The euclidean algorithm, gcd and 1cm functions for 
polynomial matrices are similar to those of poly-
nomials except that separate algorithms for left 
and right operations are needed. This yields 6 
different functions reuc, rgcd, rlcm, leuc, lgcd 
and 11cm having the obvious definitions. 
9« The coprime matrix fraction description. The 
coprime left and right matrix fraction descriptions 
for a rational matrix are obtained with functions 
lmfd and rmfd respectively. As an example the 
following staments 
L 
= lmfd(S); A = L(l); B = L(2); 
char = det(A); 
compute the characteristic polynomial of the trans-
fer function matrix S. First the lmfd function 
returns in a list two left coprime polynomial ma-
trices A and B satisfying 
S = A _ 1B 
then the determinant of the square polynomial ma-
trix A is computed. 
10. The inverse of a polynomial matrix. The inv 
function returns the inverse of a polynomial ma-
trix. The result is a rational matrix which may be 
used in other expressions. The statement 
G = C * inv(z*I - A)*B; 
yields the transfer function matrix of the state 
space representation S(A, B, C) assuming that I is 
an identity matrix of proper dimensions. 
There are also other computational functions which 
are not described here. It is believed that using 
the basic functions of MAX several controller de-
sign and analysis algorithms that are based on the 
polynomial equation approach may be implemented 
quite easily. 
Input operations. In general input operations are 
done using the assignment operator as was illus-
trated in the previous examples. Especially for 
user created functions there is a separate read 
operation having the following syntax: 
read (type definition) NAME 
where the type definition is needed only for ma-
trices and the NAME is the variable whose value is 
to be read. The read command will cause the NAME 
followed by an equal sign to be printed on the next 
line of the terminal output and the program to wait 
for user input. 
Output operations. The basic output operator of 
MAX is the question mark (?) having the effect that 
MAX prints on the terminal the value of that vari-
able or expression which immediately preceded the 
?-operator. Suppose that symbol X is a polynomial 
(X = 7 + 2z + z2) then the command 
X?; 
yields 
% 7.0 + 2.0*z + z+2 
To get a slightly more attractive output also a 
print function is available. It prints both the 
name of the variable and its value. For example: 
print X; 
X = 7.0 + 2.0 z + z+2 
Save and load operations. The save command is used 
to put named objects, i.e variables having a value, 
into an external file. The file can be then 
brought into the working space of MAX with the load 
command. Only those variables that are saved can 
be used when MAX is run again after being termin-
ated. 
The load command is used to fetch any excutable MAX 
staments from an external file. The staments are 
executed immediately after the loading operation. 
Using the load facility new functions can be effec-
tively built into MAX. 
U. AN EXAMPLE 
Let us solve as an example the unilateral poly-
nomial matrix equation 
AX + BY = C 
(1) 
where A (lxp), B( lxq) and C (lxm) are known poly-
nomial matrices and X (pxm) and Y (qxm) unknown 
polynomial matrices. The algorithm of Kucera &979) 
will be used. The solution of the problem consists 
of two main steps. First the left euclidean 
algorithm is performed for the matrices A and B. 
Then the polynomial matrix C is decomposed so that 
C = Gl * Cl, where Gl is the greatest common left 
divisor of C. If this decomposition is not poss-
ible (l) has no solution. As a MAX program the 
algorithm is as follows : 
print "Solution of the Diophantine equation"; 
read 1; read p; read q; read m; 
read (mat l,p) A; 
read (mat l,q) B; 
read (mat l,m) C; 
[G1,P1,Q1,R1,S1] = leuc(A,B); 
Cl = lextract(Gl,C); 
X0 = P1*C1; Y0 = Q1*C1; 
print "the particular solution is"; 
print X0; print Y0; 
print "the general solution is"; 
print "X = X0 + R1*T Y = Y0 + S1*T"; 
print "where"; 
print Rl; print SI; 
print "and T is a polynomial matrix" 
The complete function should also include some 
kind of checking whether Gl really is a left div-
isor of C. This could be done with the if then 
else construction and comparison operator of MAX 
but it is not included in the example for the sake 
of simplicity. 
5. CONCLUSIONS 
A program system MAX for polynomial matrix compu-
tations is presented. Besides the basic arithmetic.: 
operations it contains some special function for 
polynomial and rational matrices which are needed 
especially in discrete linear controller analysis 
and design. Being implemented as an interpreted 
programming language MAX offers considerable 

236 
J. Tanttu and M. Aaltonen 
freedom and flexibility for the user to create new 
algorithms. 
MAX is a very specialized program which has been 
used only for research purposes. However it is our 
belief that very high level programming languages 
will be used in the implementation of future CAD 
packages for control system design. As the com-
puters dedicated for symbolic programming (e.g the 
newly introduced LISP machines) become cheaper the 
best way to build a system like MAX is to use a 
general purpose program for symbolic mathematics -
MACSYMA or SMP for example - as a building tool. 
The same trend will probably affect the design and 
implementation of all future CAD packages for 
simulation and control. They will be built using 
high level simulation languages combined with 
extensive use of high level graphics functions. 
This will also free the CAD system designers to 
concentrate more on control engineering aspects 
instead of low level details of programming and 
what is even more important this will result in 
flexible CAD systems which are easily expanded by 
the users. 
Acknowledgement - This work has been supported by 
the Academy of Finland. 
REFERENCES 
Johnson, S.C. 
(1978). Yacc: yet another com-
piler-compiler . Program report, Bell 
Laboratories, New Jersey. 
Kailath, T. 
(1980). Linear Systems. Prentice-
Hall, New York. 
Kucera, V. 
(1979)· Discrete Linear Control: 
The Polynomial Equation Approach. Wihey, 
New York. 
Pernebo, L. 
(1980). Numerical algorithms for 
polynomial matrix systems. Report TFRT-7205/l-
0U8. Department of Automatic Control, Lund 
Institute of Technology, Lund Sweden. 
Mathlab Group 
(1983). A brief overview of MACSYMA. 
MIT, Cambridge, Massachusetts. 
Wolowich, W.A. (1983). Dead-beat error control of 
discrete multivariable systems. Int. J. Con-
trol, 37, 567. 
Wolowich, W.A. and P.J. Antsaklis 
(198U). The 
canonical diophantine equations with applica-
tions. SIAM J. Control Optimiz, 22, 777-
TABLE 1 Allowable datatypes in addition (sub-
traction) operation. 
+ 
s 
P 
pm 
r 
rm 
s 
s 
p 
-
Γ 
, 
-
_£_ 
Ρ 
Ρ 
Γ 
-
pm 
-
-
pm 
-
rm 
Γ 
Γ 
Γ 
-
Γ 
-
rm 
-
1 
rm 
-
rm 
S. = FI ± F2 
TABLE 2 Allowable datatypes in multiplication 
operation. 
I * 
s 
LR_., 
pm 
r 
LTÎTI 
ί s 
s 
: p. 
pm 
r 
rm 
_ e _ 
P 
P.. . 
pm 
r 
rm 
pm 
pm 
pm 
pmf 
pm 
rmf 
r 
r 
r 
rm 
r 
rm 
rm 1 
rm 
rm 
rmî 
rm 
rmt 
S = FI * F2 
t matrices must be of proper dimensions 
TABLE 3 Allowable datatypes in division operation. 
~r~ 
s 
p 
pm 
r 
rm 
s 
s 
r 
-
Γ 
-
_£ . 
P 
r 
-
Γ 
-
pm 
-
-
-
-
-
r 
Γ 
Γ 
-
Γ 
-
rm 
-
-
-
-
-
S = FI / F2 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
THE FREQUENCY DOMAIN DESIGN OF 
APPROXIMATELY DECOUPLING AND 
NORMALIZING COMPENSATORS FOR 
MULTIVARIABLE SYSTEM 
Wu Zhi-Ming and Hsu Hsiao-Ming 
Department of Electrical Engineering and Computer Science, Shanghai Jiao Tong 
University, Shanghai 200030, 
People's Republic of China 
Abstract 
The method presented here illustrates how to specify a set of 
diagonal elements 
q»,j(s) ί = 1,2,····ιη of the open loop transfer function 
matrix (TFM) Q(s) to obtain such a precompensator K(s) that satisfies 
the requirements of stability, decoupling, robustness and dynamic be-
havior of output. This method is suitable for computer-aided design (CAD) 
since the whole design procedure are accomplished by computer except spe-
cifying q^;(s). A 
4x4 examples are included. 
In recent years, the design techniques for 
multivariable systems have been well deve-
loped and many efficient methods appeared 
one after other. Each of them may be suit-
able to different cases. Even in today, 
they are still interesting topics to many 
researchers. This paper introduce the ideas 
of approximate decoupling (Rosenbrock,1974) 
and pesudo-diagonaling (Hawkins,1972) into 
RFN method, then we give a new approach of 
design Approximetely Decoupling and Nor-
malizing (ADN) compensators. Compare with 
the previous methods, less number in the 
trial and error method is required. Fur-
thermore, the compensated system is de-
coupled and a better dynamic behavior is 
achieved. 
We list symbols and notations which used 
in this paper as following 
R,C 
: field of read and complex num-
ber 
Rm*n,C^%M: 
set of mxn matrices with ele-
ments in R and C respectively 
field of rational function in s 
with coefficients in R 
set of mxn matrices with ele-
ments in R(s) 
conjugate transpose of A 
maximum singular value of A 
minimum singular value of A 
Frobenius norm of A, [tr(A A)] 
spectral norm of A, (A) 
measure of skewness of A 
#Z[f(s),C]: number of zeros (multiplicities 
counted) of f(s) in the right 
half plane (RHP), f(s) R(s). 
number of enclosement (positive 
for anticlockwise) of closed 
contour which maps f(s) when s 
goes alone the Nyquist D-curve 
around the point of (a,j0.0). 
( 1 ) Preliminary 
Theorem 1.1 (from Stewart, 1973) 
Let A£Cm*n. 
Then there are unitrary ma-
trices U and V such that 
VrtAU = 
R(s) 
R(s)"* 
AH 
0(A) 
σ(Α) 
ΪΑΙΙ 
HAIL 
MS(A) 
#E[f(s),a]: 
* ίΣ°)' 
lo oj 
Σ= diagta,,^ 
σΓ] 
where (Γ, > OV, > 
> 0> > 0 
Definition 1.1 (see Wilkinson, 1965) 
If Q&Cm*n commute with its conjugate tran-
spose, i.e. Q'QH 
= QMQ, then Q is called a 
normal matrix. 
Theorem 1.2 (from Wilkinson, 1965) 
Q^C*""1 is normal iff there is a unitrary 
matrix W such that Q has the eigenvalue 
decomposition Q = WAW , where Λ = diag[Xt , 
λι 
Xm\ 
Definition 1.2 (normal system) 
If the TFM G(s)€R(s)m,u, and the behavior of 
G(s) is normal at every working frequency 
in S = ( S | , s A , 
,sN), 
then the system 
is said to be a normal system on S. 
From the viewpoint of design, normal sys-
tems have the following advantages 
(i) The principle gain and 
principle 
phase of G(s) are very near to the 
mag-
nitude and phase of characteristic gain of 
G(s) 
(ii) The characteristic loci of a normal 
systems are insensitive to the disturb-
ances . 
Theorem 1.3 
Let the normal matrix of a given system be 
Q€C and its disturbed form be φ = Q(I +Δ). 
Suppose \\ is the ith eigenvalue of A and 
λ. is any eigenvalue of Q, then 
mi n i| λ - X;|<l|Q||a ( ΙΙΔΙΙ^ 
+ MS(Q)) 
(1-1) 
Proof: See Appendix A 
When Q is a normal matrix, MS(Q)=0, then 
(1-1) deforms as minjj \ - K\l < Ij Q\U]\AL· 
When Q is normal approximately, MS(Q) is 
so small that (1-1) may keeps the spectral 
insensitivity of matrix Q. 
(2) Decoupling of Normal Matrix 
Until now, decoupling control is still re-
quired to make each component of output 
Y(t) satisfies the specified transient be-
havior indepently and accurately. So we 
come to discuss the condition of decou-
pling a normal matrices. 
To design a compensator K(s) that Q(s)= 
G(s)K(s) is fully decoupled would usually 
leads to the difficulties such as K(s) is 
physical unrealizable or its structure is 
too complicated to form. Thus we can only 
obtain the approximately decoupled systems 
in some senses. 
In many previous design methods, diagonal 
dominant (DD) systems were considered as 
decoupled systems approximately (see 
Rosenbrock,1974). It is, however, lack of 
accuracy in some cases (especially when 
number of input or output < 3). For exam-
ple: 
A = Γ1.0 
0.99) 
I 0.99 
1.0 J 
satisfies the definition of DD, but its 
coupling is very strong clearly. So it is 
237 

238 
Wu Zhi-Ming and Hsu Hsiao-Ming 
necessary to give a more reasonable defi-
nition for approximate decoupling. 
Definition 2.1 (<rf-DD): 
Let A€C",*n, if |a;;|>sa:i = <* Σ f a -I (or 
then ith row of A (or jth column of A) is 
<*-DD. If all the rows (or columns) of A 
a r e ^ - D D , then A is o^-row (or column) DD. 
When A is both οί-row DD and °<-column DD, 
then A is oC-whole DD, where 0<<*<°°. 
Generally speaking, should be selected 
according to requirement of decoupling and 
dimension of the matrix. Since f = 
(m-l)lai;.) /saij gives the average ratio of 
diagonal element to off-diagonal one, we 
can write od as a f raction o<.= η / (m-1 ), where 
1 reflect requirement of decoupling and m 
is the dimension of matrix. For instance, 
when ? = 5 , m=3 , oC =5/ ( 3-1 ) =2 . 5 
Definition 2.2 (©^-approximate decoupling) 
If Q(s)€R(s) m x n is an open-loop TFM with 
unity feedback and Q(s) is<*-whole DD on 
the set of working frequencies ( s, , s * , . . . 
. . . S u ) , then the closeloop system is said 
to be «C-approximately decoupled, and ot is 
called dominant margin. Considering the 
situations of O^-^ÔO, which correspond to 
fully decoupling and 0*= 1.0 to approximate 
decoupling in the sense of conventional DD. 
When Q is a normal matrix and its eigen-
vectors are known, the condition that Q is 
o(-DD is given out by f ollowings. 
Theorem 2.1 
Let the normal matrix Q=YAYH£c"*xw\ where Y 
is a unitrary matrix, rank(Q) = r, and 
Λ = diag( A,, λ*, 
λτ, 0 , 0 ,-ο; . 
Suppose 
[ΙΥ,,Ι* ··· Ι Υ , Γ Ν 
det ': 
: 
φ 0 
ΙΐΥπΓ 
· · · lyrrH 
Γ|Υ.·Γ 
Let a l l assumption in theorem 2.2 be the 
same, but rank(Q) = m. If 
1 
and X=[xg ] r x r = 
exists, assume 
qa=(JLq.; )/r, sml = 
(■I «* 
(yr.r 
• |y,ri* 
• lYrrl
1 
ΣΥ, 
Je y/* "« 
smj = 
SMi2 
Σ sml , 
*-' m r 
- Σ £ 
where y>is the complex conjugate of y:H ,if 
* q.« -qa) min 1 -oCSMil 
""* 
1^ i€r 1 
max 
i€r 
SMii= Σ Σ 5ml 
Sml 
qa 
I "* i€r 1 + etSMi2 
then the upper r rows and left r columns 
of Q are <tf-DD. 
Proof: see Appendix B. 
Corollary 2.1 
Let all assumptions in Theorem 2.1 be same 
but rank(Q) = m, and if 
max I g u -qa| < 
1 
i^m I qa I 1 + ©Cmax *L{ SMi2 ) 
then Q is oi -whole DD. 
Proof: see Appendix B. 
These two relations of approximate de-
coupling are concerned with diagodnal ele-
ments of Q ( s ) . When what we know are eigen-
values of Q ( s ) , we may get the similar re-
sults in the same way. 
Theorem 2.2 
Let the normal matrix Q=YAY H6C, rank(Q)=r, 
if Aa=(;£ V j / r , Ysi = έ | YÎB|* , 
and 
max 1 λ; -Aal 
min Ysi 
i€r 1 \a Ι ς i€m Ysi 
then Q is *-whole DD 
Proof: omitted. 
Corollary 2.2 
γ ΐ * 2 = ; 
- * Yi*# 
+ <* Yi*A 
M» r 
j*i «C-l1 
%*l 
max I At- λ a 1 ^ 
ier I \a l% 1 +< 
-<*max ; € m(Yi*) 
then Q is «C-whole DD. 
Proof: omitted. 
(3) The Analysis of Approximately 
Decoupled and normalized system 
1. Stability. 
When the openloop TFM Q(s) is normal, sta-
bility of the closed-loop system can be 
determined from the diagonal elements of 
Q(s). 
Theorem 3.1: 
Generalized Nyquist Criterion when Q(s) 
normal 
Let Q(s) = G(s)K(s), where Q( s )6R( s )m*"" , 
G(s)ÇR(s)IH,',l,and K( s )6R( s ) m * m are TFM's of 
open-loop system, plant and compensator 
respectively. Suppose clcp(s) and olcp(s) 
are characteristic polynomials of closed-
and open-loop system, if Q(s) is normal at 
any s on the Nyquist D-contour and 
#Z[clcp(s),C^]=p, then closed-loop system 
with unity feedback is stable iff 
Z#E[q.. (s),-l]=p 
(3-1) 
Proof: 
For clcp(s) = detF(s) 
where F(s)=I+Q(s) 
olcp(s) 
detF(oo) , 
then 
#Z[clcp(s),C+]-p=-#E[detF(s),0] 
So closed-loop system is stable iff 
#E[detF(s),0] = p 
(3-2) 
If Q(s) is normal, then Q(s)=W(s)Λ( s)WM(s), 
from theorem 1.2, and F(s)=I+Q(s) is still 
a normal matrix. 
Nwokah (1983) has proved that 
fi#E[(l+X;(s)),0]= X #E[f u (s),0], so we 
may have #E[detF(s),0]=#E[ ft (1+Aj(s)),0] = 
f l # E [ ( l + \ ; ( s ) ) , 0 ] = £ #E[(l + q u ( s ) ) , 0 ] = 
2#E[q.. ( s ) , - l ] 
(3-3) 
1=1 
**■ 
Combining (3-2) and (3-3), results in 
(3-1). 
In designing, specify Q(s) first and then 
find out the K(s). Thus we always choose p 
as the number of Smith-MacMillan zeros of 
Q(s) in RHP. We keep K(s) has no RHP poles 
and don't allow K(s) to cancel the RHP 
poles of G(s). 
2. Transient Behavior of Output 
Since the system is approximately decou-
pled, the transfer function between y ^ s ) 
and u t(s) is discribed by q iL ( s ) and the 
influence of u;(s) to y L(s) is negligible. 
Thus, we may use classical approaches to 
find the transient behaviors. 
3. Robustness. 
Following Doyle and Stein (1981), let nom-
inal open-loop system be Q(s) and a real 
one contain uncertainty be Q*( s ) , losing no 
generality, we suppose that uncertainties 
appear in output, as Ç( s) = [I+L(s)]Q(s). 
If llL( s )\\χ ^ lm( s ) , we may have 
Theorem 3.2 (Robustness for Normal System) 
Let Q(s)6R(s)m*m be a TFM of normal system 
and Q(s)[I+Q(s)]"' is stable, the closed-
loop system 5( s ) [ I+Q(s ) ]"'preserves stabi-
lity iff 
min K| W l / ( 1.0-lm)|> lm/(1.0-lm) , 
lm(s)<1.0 
(3-4) 
min Re( λκ)>-1.0/2.0 , lm(s) = 1.0 
(3-5) 
maxK| A«-l/(lm-1.0)l< lm/(lm-1.0) , 
lm(s)>1.0 
(3-6) 
Proof: see Appendix C 
If we know the value of lm(s), for 
instance, from the measurement introduced 
by Owens(1983), we may analyse the robust-
ness of ADN system accurately. For a prac-
tical system, Doyle(1981) pointed out the 

Frequency Domain Design 
239 
the robustness condition as: l m ( s ) « l in 
low frequencies, lm(s)=l in middle frequen-
cies and l m ( s ) » l in high frequencies . Thus , 
by Theorem 3.2 following requirements to 
I A»(s ) , Az(s ) , . . . ,A*(s ) ] are expected: 
(a) loci of A-,(s)'s depart from critical 
point (-l,jO) as far as possible in low 
frequencies. 
(b) loci of λι(s)'s are kept to the right 
side of line Re(s)=-l/2 in middle fre-
quencies . 
(c) loci of A;(s)'s tend to original point 
at (0,j0) in high frequencies. 
In fact, (3-5) is also an iff condition 
that preserves integrity of the system. It 
is easy to verify that when some of actu-
ators or feedback devices are in failure, 
the system is just correspond to lm(s)=l. 
Though (3-4) & (3-6) are conditions con-
cerned with eigenvalues of Q(s), if we take 
notice of 
qLl(s) = g(ryuf-*ic<s) and 
^ΙΥΐκΙ* = 1' 
we may consider q;;(s) is a qeighted average 
of [ Ai (s),...,A»,(s)) ' s, then the relation 
like (3-4) (3-5) and (3-6) still hold, when 
/\;( s ) is replaced by q.,-,(s). 
Furthermore, we may deduce robustness con-
dition concerned with q ;i ( s ) ' s in the range 
of low, middle and high frequencies. 
Theorem 3.3 
If all the assumptions in Theorem 3.2 be 
f ixed, [ A((s ) , 
A»»(s)J satisfy Corol-
lary 2.2 (οί-DD), then^(s)[I+Q(s)] pre-
serves stability if 
lqs + l/(l-lm)| -c|qs| >lm/(1-lm), lm(s)<l 
(3-7) 
Re(qs) - ciqsl>-l/2 , 
lm(s)=l 
(3-8) 
|qs-l/(lm-l)| +c |qs|< lm/(lm-1), lm(s)>l 
(3-9) 
where qs=( £ q .. (s))/m, c=l/( 1+cCYi* ) 
Proof: the eigenvalue of Q(s) satisfy Corol-
lary 2.2, then maxK I Ait-Aa, 
q „ î 
ΓΙΥ..Ι
1 
'*.*/* 
IX—i' 
< c|Aal 
l<lmm) 
1 '
Y-«'
X 
fY"^ 
IY— rJlVJ 
Multiply both side by [l,l,...l]/m and note 
that Y is an unitrary matrix, we may have 
qs 
=\a. 
From (3-4), (3-5) and (3-6), we may get 
minK| *K+l/(l-lm)|>minK[|Aa=l/(l-lm)| -
- I U -Aal) 
= | Aa+l/(l-lm)| -maxK| U-Aa) 
> 
|qs+l/(l-lm)I-c|qs| 
(3-10) 
minKRe( λκ ) =Re( Aa ) +minKRe( A*-Aa) 
> Re(Aa)-maxKRe( A*-Aa)>Re(^a)-
-max* 1 Aic-Aa|> Re(qs )-ciqs| 
(3-11) 
max K| λκ -l/(lm-l)|<maxK[ \a-l/ ( lm-1 )| + 
+ I AK-Aa|J< |qs-l/(lm-l)l +c |qs| 
(3-12) 
In a similar manner, we can prove the ne-
cessary condition which preserve integrity 
for normal systems is 
Re(qs)-ctqsi > -1/2 
(4) Design of ADN Systems 
For the purpose of simplicity in real sys-
tem, 
we restrict the compensator to a pre-
compensator feedback to unity feedback. 
Then the closed-loop system can be depicted 
as follow. 
^ 
r(s) 
e(s) 
K(s) 
u(s) 
G(s) 
y(s) 
also approximate normal. From the method 
of Reverse Frame Normalizing (REN) pre-
sented by Hung (1982), if the singular 
value decomposition (SVD) of G(s) is 
G(s)=Y(s)Z(s)U H(s) and let K(s)=U(s)n(s)Y*(s), 
then Q(s)=G(s)K(s)=Y(s)A(s)Y M(s) is normal, 
where Λ ( s ) =Σ( s )ft( s ) =diag( λ, ( s ) , Ax(s ) , 
, 
X r(s),0,0, 
0) where r = r a n g ( Q ) . 
Generally, the design of compensator K(s) 
can be separated into two steps: 
(i) given an openloop TFM Q(s) with sa-
tisfactory behavior. 
(ii)Seeking the solution of K(s) which 
make the performance index J = f ( G ( s ) , 
Q(s),K(s)) as small as possible. 
In RFN design method, Q(s) is determined 
by choosing ( λ\{s),i=l,2,...r) 
since the 
eigenvectors of Q(s) are fixed by G ( s ) . 
Unforturnately, it is difficult to choose 
approprite 
(s)'s to meet the performance 
specifications which are given in real 
time form as rise time, overshoot and set-
tling time of the output y (s),i=l,2,...m. 
On the other hand, if an index of 
M 
j= 
iX( UQ( j W | c )-G( jw K)K( jw„ )|Γ 
i s a d o p t e d , 
then a problem of solving nonlinear opti-
misation is required when the commen de-
nominator of K(s) not being affirmed. 
Furthermore, since the parameter number in 
K(s) 
is considerable, the amount of compu-
tation is quite large. 
We improve the RFN method in the following 
(i) 
Taking diagonal elements of Q(s), 
rather than its eigenvalues A;(s)'s. 
(ii) 
Taking 
-, 4 flMlG(jw,c)H*|lK(jWK)-K(jwK)ir 
J ~ Â 
,D* 
IÎQUWKMI* 
as performance index, where K(s) sa-
tisfies that Q(s)=G(s)K(s) is appro-
ximately normal. 
The main advantages of this method lie in: 
(i) 
Applying the conclusions in section 
II & III (as (2-2),(3-1) ,(3-4),(3-5), 
(3-6),(3-12) etc) we consider stabi-
lity, robustness, decoupling & tran-
sient behaviors from q 's simulta-
neously. 
(ii) Performance index (4-1) changes the 
problem of finding a polynomial ma-
trix K9s) into mxn separated rational 
polynomial of k ;j(s). Such an improve-
ment not only save computational time 
but also arise accuracy. 
Based on the above method, a CAD package 
of ADN compensator calculation with For-
tran 77 are provided. The programs are im-
plemented in Buroughs 1955 computer in an 
interactive way. We are sorry for there is 
no graph terminal can be used. Though the 
results of simulation are inspiring, it is 
from the lineprinter. Only data can be 
obtained from it. 
In some cases, the coupling between ele-
ments in G(s) may be strong that the right 
side of (2-1) would vanish. Then, it is 
hard to decide 
q j; ( s ) , i=l, 2 , . . .r 
in-
d e p e n d e n t l y except q ,, ( s ) =q ^x ( s ) . . . =qrr( s ) 
is taken. At that time, we can use a real 
matrix K 0 for pre-decoupling of G ( s ) . K 0 
could be obtained by pseudo-diagonal algo-
rithm from Hawkins (1972) or alignment 
algorithm from MacFarlane (1977). The func-
tion of K 0 is to make G ( s ) K 0 = I , where s is 
either a single value or a set of weighted 
frequencies. Example 
Since unity feedback doesn't alter the 
normality of the system, Q(s)=G(s)K(s) is 
239 

240 
Wu Zhi-Ming and Hsu Hsiao-Ming 
G ( s ) 
The requirements of compensated system are 
stable, robust and decoupling. If the tran-
sient response of system are specified as 
follow: 
< 1 sec. 
ess = 0. 
< 1 sec. 
ess = 0. 
< 0.8 sec. 
ess = 0. 
< 0 . 8 sec. 
ess = 0. 
σΡ,< io%, 
t < 
σΡ*< 8%, 
t < 
σρί< 5%, 
t < 
σΡ4< 3%, 
t 
< 
0*p;- overshoot, 
-steady state error, 
/ x 
48 
q . . ( s ) 
= — 
Y (t) 
y (t) 
y (t) 
y (t) 
where 
t -settling time 
then we may choose 
50 
0 
0 
01 
05 
ess 
lll 
s(s+8.5) 
53 
q**(s] 
q " ( s ) - s(s + 10) 
take s logarithmically, 
,j!0 
q w ( s ) 
s= 0, 
s(s+9) 
55 
s(s+ll) 
, jO.l,jO.301, 
Suppose the approximate de-
coupling coefficient 
= 1.4, checking all 
kthe conditions presented in section II & 
III, and q 
(s)s' are thought of satis-
factory, we can fix K(s) as 
1.89S+3.52 1.32s+3.71 9.61s+17.7 
K(s) = 
4.26s+8.44 
s+6.56 
0.29s-K).06 
s+0.85 
0.06S-1.44 
s+2.47 
-2.6s-4.20 
s+3.47 
4.74s+5.13 
s+8.60 
-0.7s-2.6Q 
s+3.44 
5.21s+12.6 
s+12.5 
-1.2s+0.72 
S+B.19 
8.13S+14.8 
s+10.4 
-4.3s-9.74 
s+10.0 
-3.9s-4.04 
s+8.02 
-16.5S-30 
s+15.6 
11.5s+23.9 
s+7.63 
s+9.50 
s+14.4 
s+14.7 
The s i m u l a t i o n r e s u l t 
of c l o s e d - l o o p 
system 
shows t h a t 
t h e d e s i g n i s v e r y 
s u c c e s s f u l . 
REFERENCES 
Doyle, J.C. & G.Stein(1981) Multivariable 
feed-back design concept for a modern 
synthesis IEEE Trans. Vol AC-26 pp4-16 
Hawkins,D.J.(1972) Pseudo-diagonalization 
and the inverse Nyquist array method 
Proc.IEE Vol 119 pp337-342 
Hung,Y.S.& A.G.J.MacFarlane(1982) Multi-
variable Feedback: A Quasi Classical 
Approach.Lecture Notes in Control and 
Information Science, Springer-Verlag, 
Berlin. 
Klema, V.C.& A.J.Laub(1980) The singular 
value decomposition and some applica -
tions 
IEEE Trans. Vol AC-25 ppl64-176 
MacFarlane,A.G.J.& I.Postlethwaite (1977) 
Characteristic frequency and character-
istic gain function 
Inter. J. of Control Vol 26 pp265-278 
MacFarlane,A.G.J. & I.Postlethwaite (1977) 
The generalized Nyquist stability cri-
terion and multivariable root loci 
Inter. J. of Control Vol 25 pp81-127 
Macfarlane,A.G.J. & D.F.A.Scott-Janes(1979) 
Vector gains 
Inter.J. of Control Vol 29 pp65-91 
Nwokah,O.D.I.(1983) Stability of linear 
multivariable systems 
Inter.J. of Control Vol 37 pp623-629 
Owens,D.H. & A.Chotai (1983) Robust con-
troller design for linear dynamic sys-
tems using approximate models 
Proc.IEE part D,Vol 130 May p45 
Postlethwaite,I.,J.M.Edmunds & A.G.J.Mac-
Farlane (1981) Principle gains and 
principle phases in the analysis of 
multivariable feedback systems. 
IEEE Trans. Vol AC-26 pp32-46 
Rosenbrock,H.H.(1974) Computer Aided Con-
trol System Design 
Academic 
Press, London 
Stewert,G.W.(1973) Introduction to Matrix 
Computation 
Academic Press, New York 
Wilkinson,J.K.(1965) The Algebraic Eigen-
value Problem. 
Oxford, Clarendon Press 
Appendix 
A. Proof of Theorem 1.3 
Let ?f = Q( I+4)6C,,*n . It has been shown in 
Wilkinson(1965) that if Schur triangular 
decomposition (STD) of Q is Q=U(D+T)VM,then 
(l+ab+ 
+af|-1 b n - 1 )a H QAlU > 1 
(A-1) 
where U and V are both unitrary matrices. 
D = d±ag[&ifX*, 
, λ»] , Τ is a strictly 
upper triangular matrix, and 
a = l/[mim I λ;-λ1] , b = (| T\\x 
Since the left side of (A-1) is a monotonie 
function, it is still true when a*=inftaj. 
(l+a*b+ 
+ (a*)n"1 bn"' )a* BQAIIx =1 
(A-2) 
Denote x = s u p \ m i n ; | Λ;- λΙ, t h e n 
(A-2) can be 
in f ( x ) = l ( l + b / x + 
+ b n - ' /x"-«)M Q*llO / x - 1 
=0 
(A-3) 
I t 
i s e a s y t o v e r s i f y 
t h a t f ( s ) 
i s a mono-
t o n i c d e c r e a s e f u n c t i o n 
and f ( \\ QA I D > 0 , 
f( NQAll»+b)<0 hence t h e u n i q u e r e a l 
s o l u -
t i o n of 
(A-3) must l i e 
between 
llQ*lL< x<b+ || QAlfx . Then, we may have 
min.JX; - \ l < s u p A [ m i n . ( λ; - λΙ j-CIlT IU + 11QA||X 
<HQIU -(BAH + MS(Q)) 
where MS(Q)= Il T l\% / \\Q\\X 
B. Proof of Theorem 2.1 and Corollary 2.1 
(i) Proof of Theorem 2.1 
| q . . | = q a + ( q u - q a ) > f qa| - lq ;; - q a | 
>lqa| -max. | q^ -qaf 
i = l , 2 , 
r . 
f o r 
r qui 
q'rJ 
I qui 
|y„r · · . . fy.rf1! ΓΜ X 
( A - 4 ) 
|Yrrl1|Xrl 
Url 
I Xr, •••• xrr|L C2r 
xiK^HK 
· 
f o r 
i = 1 * 2 , 
r · 
qa ± -L· yjic Yjk KHI I 
^ maX||qu -qajSMil+JqaJ»smj 
(A-5) 
where SMi and smj are given in the paper. 
Let 
jqal-max.Jq- -qa| >o<(max;| qu· -qa|SMi2+|qal SMil) 
max iq.. -gal 
1-^SMil 
i€r I qa 
I l+</SMi2 
max iq.. -gai < mi 
i€rI 
qa 
' i€ 
min l-rfSMil 
qa 
l 
i€r l+*SMi2 
Combining (A-4)(A-5)(A-7), according to de-
finition 2.1, we know that the upper r rows 
of Q are oC -DD. Since <*-DD of columns of Q 
can be studied by ol-DD of rows of Q, then 
the left r columns of Q are <>^-DD if 
max |q8,· -qai^min 1- o* SMil 
i€r I qa 
' i r 1+ <*SMi2 
Obviously, (A-7) & (A-8) are same because 
magnitudes of two complex conjugate values 
are equal. Thus, Theorem 2.1 is proved. 
(2) Proof of Corollary 2.1 
Since 
|y..r 
iy« 
= 1* 
* m 
Xmml I fY^.i* 
\Ymm\%\ 
(A-9) 
if we post multiply both sides of (A-9) by 
vector [1,1, 
1] and note that Y is an 
unitrary matrix then we can get 

Frequency Domain Design 
241 
Σ. x · ^ =1, 
1=1,2,...m. 
when i^j, we may have 
|^ê,yi«^«x«il" If. y«vi*( 
N.
X K» Ί 
- \%, Υ;κί>1 ■ ° (A-10> 
Substituting r=m and (A-10) into (2-1), 
the corollary is proved immediately. 
C. Proof of Theorem 3.2 
Let 6'(s) = [I+L(s)]G(s)# |jL( s )||x ^.lm( s ) . 
Suppose K(s) is fixed and G(s)K(s)[I+ 
G(s)K(s)] 
is stable, Wilkinson (1965) 
has proved: G(s)K(s)[I+G(s)K(s)] 
pre-
serves stability iff 
[GKd+GK)·"1 ] < l / l m ( s ) 
( A - l l ) 
For Q ( s ) = G ( s ) K ( s ) , we have 
Q ' ( S ) = G ' ( S ) K ( S ) = [ I + L ( S ) ] G ( s ) K ( s ) 
= [ I + L ( s ) ] Q ( s ) 
t h e n ( A - l l ) 
becomes 
a t Q d + Q ) " 1 
] < l / l m ( s ) 
When Q(s) 
i s a normal 
m a t r i x , 
Ç[Q(I+Q) H ]=max c|Xi/(l+Xi)| = 1 / min t / 1 + 1/Ai| 
Hence, 
(A-12)<=*min · (l + 1/λΐί >lm( s )<fa>|l + l / V j > lm. 
(A-13) 
S u b s t i t u t i n g 
A;=a+jb i n t o 
( A - 1 3 ) , we g e t 
( a x + b * - ) ( l - l m * ) + 2 a + l > 0 , i = l , 2 
m (A-14) 
Considering all the cases of: 1) lm(s)<l, 
2) lm(s)=l, 3) lm(s)>l, we can prove that 
(A-14) is equivalent to (3-4)—(3-6). 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
ELECTRIC POWER PLANTS 
A DATABASE FOR PROCESS AUTOMATION 
DESIGN 
R. Heinonen and J. Haarla 
Technical Research Centre of Finland, Electrical Engineering Laboratory, 
Otakaari 5 /, 02150 Espoo 15, Finland 
Abstract. Process and automation system design sets great demands on the 
design database. A relational database system is a general and quite natural 
way to represent design data. However, a relational system is not necessarily 
an optimal way because a large design system contains information which has 
complex structures and dependancies and which is modified continuously during 
the design process. An experimental database system for process automation 
design has been implemented using VAX11/750/VMS. The programming language has 
been Pascal. The database system has, instead of relations, six basic 
entities: objects, object types, connections, connection types, procedures and 
requirements, and certain relationships between these. The system has been 
applied to some power plant processes. Descriptions of processes, subprocesses, 
components and control algorithms have been stored into the database. Also 
various functional and other requirements on the subsystems of the plant are 
stored into the database so that, for example, following kinds of questions can 
be answered: "which requirements should component xx satisfy", "to which 
subsystems of the plant is requirement R123 connected", "in which plant 
functions is component C234 used". The purpose of the developed system is 
twofold. First, the plant and automation system descriptions are in such a form 
that the requirements can be connected to the right places in the descriptions. 
Second, the system is a framework by which various computerized design tools 
can be integrated and the information transfer between then managed. 
Keywords. Automation design; computer aided design; 
modelling; database. 
INTRODUCTION 
Computer aided design usually deals with the 
lowest level descriptions of industrial 
processes and automation systems (diagrams, 
algorithms etc.). In large design projects it 
is, however, quite important to manage also 
the higher level descriptions of the plant 
(requirements, functional descriptions) and 
their connections to the implementation level 
(Heinonen, 1984). 
To realize some ideas of the Nordic 
co-operation project NKA/LIT (Human 
reliability..., 1981; Heinonen, 1983) a quite 
general database management system has been 
implemented in the form of a System Modelling 
Language (SML). The SML is based on the three 
level model (Ross, 1977; Haase, 1982; 
Heinonen, 1983) of system descriptions: 
- requirement specification (why-level) 
- functional specification (what-level) 
implementation specification (how-level) 
Each level represents a certain view into the 
entity descriptions. There are six separate 
entity types in the SML database. Every 
entity type has its own attribute types. 
Different attribute types of the SML-entity 
answer to different questions of the three 
level model. Figure 1 visualizes this. 
There are many requirements set on the 
modelling language (Heinonen, 1984). The main 
requirement is that the formal description has 
to be able to help in handling the three level 
model. The following requirements were also 
considered in the implementation (Eberlain, 
1982): 
- Classification of entities by defining 
different entity types. 
A possibility to make compositions. 
Composition is the reference of 
constituents to a composite entity. 
- A possibility to make abstractions. 
Abstraction is the reference of 
'concrete* to 'abstract' responsive that 
of individuals to type. 
- Attribute definitions must be carried out 
by assignment of predicates to basic 
value sets. 
Semantic integrity rules and operational 
specifications must complete the entity 
type definitions. 
243 

244 
R. Heinonen and J. Haarla 
FUNCTIONAL DESCRIPTION 
There are six different types of entities in 
the SML database: 
- Object type (name, subtype of, purpose, 
requirement, parameter, port, algorithm, 
components, structure). 
- Object (name, type, purpose, requirement, 
parameter, port, algorithm, components, 
structure). 
- Requirement (name, description, 
parameter, satisfied by). 
Procedure (name, purpose, requirement, 
attached to, algorithm). 
Connection type (name, purpose, 
parameter, from, to). 
Connection (name, type, purpose, 
requirement, parameter, from, to). 
These entities can be connected to each other 
with many different relations. The SML has 
several properties that are useful from the 
point of view of computer aided design. 
Special relationships between entities. 
1. Entity types 
Types define classes of entities which 
have same kind of properties. The entity 
inherits the parameters from its type. 
The values for the parameters are given 
separately to each entity. If the type 
of the entity has no parameters defined, 
then they can separately be defined to 
each entity of that type. In addition to 
the parameters inherited from the type of 
the entity the user can add separate 
parameters to each entity of the same 
type. 
2. Connections. 
The connections of an entity to other 
entities are defined with ports that are 
attached to the entity. The definition 
of the connection is made by defining an 
entity of type connection to the 
database. That connection can then be 
attached between two other entities. 
Also the ports are inherited from the 
type of the entity in the same way as 
parameters. 
3. Components. 
For each entity can be defined 
components. The entity is composed of 
them. This definition is made to the 
'composition'-field of the entity. The 
components are separate entities that 
exist in the database. The existence of 
them is checked when the component is 
created. For example a display of a 
control systems can be built up from the 
displays of its' components. 
Requirements. 
Requirements are special kinds of entities 
which can be connected to other entities. To 
each entity can be attached requirements that 
the entity must satisfy. The definition of 
the requirement can happen in two ways: 
1. The requirement can be attached directly 
to the entity. This is possible when the 
entity is created or when it is modified. 
In both cases the program asks the user 
the name of the requirement. If the 
addition is wanted, then the name is 
given, otherwise only the carriage-return 
is pressed. 
The requirement can be attached to the 
entity by attaching the name of the 
entity to the 'satisfied-by'-field of the 
requirement. 
DATABASE OPERATIONS 
In the following it is described how the 
entities and the relations between them can be 
manipulated. 
Object-type. 
1. Adding. 
- If the type is already defined in the 
database it can't be recreated. 
- All references to the requirements are 
checked. If the requirement created 
doesn't exist In the database, it is 
added there. If it does exist, the 
satisfied-by field of it is updated. 
- The possible existence of higher types 
is checked. 
- The object-type created inherits 
requirements, parameters, ports, 
components and structure from its higher 
type if the higher type exists. 
2. Deleting 
- The type is marked "deleted" but it is 
not deleted from the database before all 
references to it are deleted. 
- The requirements are updated. 
- As a default all the subtypes and all 
the objects of the type are deleted, but 
when necessary they can also be remained 
in the database. 
3. Modifying 
- The name of the object-type can't be 
modified. 
- The purpose-, parameter-, port- and 
algorithm-fields can be modified if they 
are not inherited from the higher type. 
- The structure- and components-fields 
can't be modified if there are objects 
in the database that are of this type. 
Object. 
1. Adding. 
- If the object is already defined in the 
database the creation can't be done. 
- The type of the object must be defined 
in the database. 
- Parameters, ports, algorithms, 
components and structures are inherited 
from the type of the object if they are 
defined there, otherwise they can be 
defined separately, in which case they 
are attached only to the object now 
created. 
- The requirements are handled in the same 
way as in the case of object-types. 
2. Deleting 
- The requirements are updated. 
- The connections are updated. 

Database for Process Automation Design 
245 
3. Modifying 
- The name of the object can't be 
modified. 
- The requirements inherited from the type 
of the object can't be modified. 
- The parameter- and port-names inherited 
from the type of the object can't be 
modified, the values them can. 
- The algorithm inherited from the type of 
the object can't be modified. 
2. Deleting 
- The possible connections to other 
attributes are deleted. 
3. Modifying 
- If the Mattached-to"-field of the 
procedure is modified then the 
references to other attributes are 
checked. 
Requirement. 
1. Adding 
- If the requirement is defined in the 
database it can't be added there as a 
separate entity. 
- The requirement can be added in two 
ways: 
- As a separate entity 
- In connection to another entity, when 
the other entity is added or modified. 
- If the entity is added as a separate 
entity, to those entities, whose name is 
in the satisfied-by field of the 
requirement, is attached the name of the 
requirement. 
2. Deleting 
- The requirement can be deleted only as a 
separate entity. 
- If the requirement is deleted from 
another entity then only the references 
to it from other entities are deleted. 
If the requirement is deleted as a 
separate entity then all the references 
to it from other entities are deleted. 
3. Modifying 
- The name of the requirement can't be 
modified. 
- The description of the requirement can 
be changed. 
- The "satisfied-by"-field of the 
requirement can be modified but then 
must the references to other entities be 
checked. 
Procedure. 
The same procedure takes care of all the 
attachment types to one attribute. The 
attachment types are 'if-inserted', 
'if-deleted' and 'if-needed'. The procedures 
can be attached the attributes of other 
entities in the following ways: 
Object-type 
name,purpose,parameters, 
ports »algorithm,structure 
same as object-type 
name »description 
Object 
Requirement 
Procedure 
Connection-type name,purpose,parameters, 
from,to 
Connection 
same as connection-type 
1. Adding 
- If the procedure is defined in the 
database then the addition can't be 
done. 
- The procedure doesn't have to be 
attached to any attribute when it is 
added. If it is attached to any 
attribute then the existence of the 
attribute are checked. 
Same kind of rules exist also for the 
connections and connection types. 
USE OF THE SML 
The SML system can be used to store the design 
information in the following ways: 
- Process and automation system components 
can be defined: 
- Purpose of the components 
- Requirements which the component must 
satisfy 
- A set of attribute values 
- Plant components can be connected to each 
others with various relationships. 
- A requirement list can be created for the 
plant. Requirements can also have a set 
of attributes (type, verification method, 
status). 
- Composition relation can also represent 
abstract relationships i.e. we can, for 
example, define a plant function as an 
object. The plant components that are 
necessary for that function are defined 
as the components of it. 
- Connections can also be more abstract, 
for example, a connection could be a 
redundancy relationship between two plant 
components. 
- Quite complex consistency rules for the 
database can be created by using attached 
procedures. 
- One attribute of objects is ALGORITHM. 
This attribute has no meaning in the SML 
context, so it can be used quite freely 
for various purposes (for example to 
define control algorithms, to describe 
functions etc.). 
To create a design database a set of object 
types, connection types and attached 
procedures must be defined. These form a 
framework for the design. 
IMPLEMENTATION 
The SML software was implemented with 
VAX11/750 computer with VMS operating system. 
The programming language was Pascal. The file 
manipulations were realized with the RMS 
software of the Digital Equipment Corporation. 
The user can manipulate the SML database 
either through the SML user interface or 
through application programs. The application 
program interface is realized by an entity 
manipulation subroutine package. 

246 
R. Heinonen and J. Haarla 
The Database Structure. 
The database of the SML consists of many 
separate files so that every entity of the 
same entity type are stored in the same file. 
The files are keyed access files. In addition 
to these files the database consists of three 
text files, which are needed for the texts and 
parameters of the entities. This way the size 
of the database can be remained as small as 
possible, because the text files need only as 
much memory as the texts need. The text files 
are also made direct access, otherwise the 
speed of the database search would suffer too 
much, expecially if the database is large. In 
SML all the procedures which manipulate the 
database files are placed into the same 
module. All other modules use standard Pascal 
as much as possible. This way the 
transportation of the program is made easy. 
The structure of the database is visualized in 
fig. 2. 
Interactive User Interface. 
The users point of view to the SML is shown in 
fig. 3. There can be six separate entities 
simultaneously in the working area, each of 
them of different entity type. The entity 
existing in tne wording area can be listed in 
many different ways and with the help of it 
can also new database searches be made. After 
the database files are opened in the beginning 
of the user session, they are kept open until 
the end of the session. It is also possible 
to use command files and macro commands. 
EXAMPLES 
In the following some entities of the SML are 
listed: 
1. Requirement: 
r025 REQUIREMENT 
TEXT 
The collection tanks of subprocesses 
1, 2 and 3 are emptied through the 
lowest points. However, there must 
also be an outlet at the height of 
0.5 m from the bottom. 
PARAMETER 
AUTHOR: jh 
END tank 
26-NOV-1984 
mandatory 
manual 
verified 
type 
verifying__method 
status 
SATISFIED BY 
til 
tl6 
AUTHOR: jh 26-NOV-1984 
END 
r025 
As we can see the requirement is attached 
to tanks til and tl6. 
Object type: 
tank OBJECT-TYPE 
PURPOSE 
Tank definition 
PARAMETER 
name 
type 
volume 
location 
calculâtiondata 
3. Object: 
til OBJECT OF TYPE tank 
PURPOSE 
Collects the systemdrainage 
REQUIREMENT 
r025: 
The collection tanks of subprocesses 
1, 2 and 3 are emptied through the 
lowest points. However, there must 
also be an outlet at the height of 
0.5 m from the bottom. 
r026: 
The outlet of the collectiontanks 
is selected manually (lowest or 
0.5m point). 
PARAMETER 
name 
: til 
type 
: cylinder 
volume 
: 225m3 
location 
: level9 
calculationdata 
: waterfilling/60C 
AUTHOR: 
END til 
jh 26-NOV-1984 
The object has inherited the parameter 
names from the type. The requirement 
that was attached to this object can be 
seen also in the listing. 
Example Session. 
With the help of the SML it is possible to 
create, delete and modify entities and also to 
navigate in the database from an entity to 
other entities which are realted to it. All 
listings can be made so that the last updating 
date and the initials of the updater of every 
attribute can be seen. In the following SML 
session some of these features are shown. 
(All the comments are marked with (*- and 
*)-marks). 
(* a key value to the object-type 
is created *) 
create-key object-type 
THE OBJECT-TYPE KEY NAME ? valve 
(* the object-type valve is read 
from the database *) 
. get o-t 
(* it is listed *) 
. list o-t 
valve OBJECT-TYPE 
PURPOSE 
Valve definition. 
PARAMETER 
name 
type 
loc. 
AUTHOR: jh 18-DEC-1984 
END valve 
(* the object vll3 is read from the 
database with a macro command. 
The command file get.com includes 
the commands create-key and get *) 
get object vll3 

Database for Process Automation Design 
247 
11 o 
vll3 OBJECT OF TYPE valve 
PURPOSE 
The filter 
PARAMETER 
name 
type 
loc 
AUTHOR: jh 
fll 
18-
ou 
DEC 
tlet valve. 
: vll3 
: valve 
: level7 
-1984 
END vll3 
(* the owners of the object vll3 
are listed *) 
list-owners obj 
THE OWNERS OF THE OBJECT vll3 : 
f11-connection : filter-connection 
fll-function : filter-function 
parallel-connection : filter-connection 
serial-connection : filter-connection 
vll3-display : valve-display 
(* the second owner of the object vll3 
is read from the database *) 
get-owner object 
get-owner object next 
(* the second owner is listed so that 
the last updating dates and initials 
can be seen *) 
list object author 
fll-function OBJECT OF TYPE filter-function 
PURPOSE 
jh 18-DEC-1984 
PARAMETER 
name : fll-function 
jh 
type : filter-function jh 
COMPONENTS 
component 1= vll3 
18-DEC-1984 
18-DEC-1984 
component2= fll 
jh 18-DEC-1984 
jh 18-DEC-1984 
AUTHOR: jh 18-DEC-1984 
END fll-function 
(* the first component of the fll-function 
is read from the database *) 
get-component object 
(* it is listed *) 
. li o aut 
vll3 OBJECT OF TYPE valve 
PURPOSE 
jh 18-
PARAMETER 
name : 
type : 
loc. : 
AUTHOR: 
DEC-1984 
vll3 
valve 
jh 18-DEC-1984 
.in 
.1h 
jh 
18-DEC-1984 
18-DEC-1984 
18-DEC-1984 
END vll3 
(* so we got back to the original 
object vll3 *) 
The shortened forms of the instructions are 
also legal as long as the shortened form is 
unique. 
CONCLUSIONS 
points in the database. 
- logging of the updates of the data at the 
data item level, 
Future work will pay attention to the 
development of requirement management and to 
the use of attached procedures. 
The software has been applied to a few 
small subprocesses and automation systems in 
power plants with good results. 
REFERENCES 
Eberlain,W., Wedekind,H. (1982). A methodology 
for embedding design databases into 
integrated engineering systems. 
In Encarnacao,J., Krause,F.-L., File 
structures and databases for CAD. 
Haase,V.H., Koch,C.R. (eds.) (1982). A special 
issue on application oriented 
specifications. Computer, 15, nr 5, 10-59. 
Heinonen,R., Ranta,J., Wahlstrom,B. (1984). 
A conceptual framework for the design of 
complex automation systems. IFAC'84 
preprints vol. VI. pp. 246-250. 
Heinonen,R., Ranta,J., Wahlstrom,B. (eds.) 
(1983). Design methods and computer aided 
design of process automation. NKA/LIT 
-project workshop, Espoo, 1-2 November 1982, 
Technical Research Centre of Finland, 
Symposium series 31/83. 
Human reliability in complicated energy systems 
(1981). Nordic Liaison Committee for Atomic 
Çnergy, project description NKA/LIT(81)9. 
Ross,D. (ed.) (1977). The special collection on 
requirement analysis. IEEE Trans. Software 
Engineering. SE-3. nr 1. 
An important feature of the SML database is 
that the the requirements and goals can be 
scattered everywhere in the plant description 
so that they are available when needed. 
Other properties of the SML-system are: 
- attached procedures, 
- property inheritance of objects, 
- variable length data fields which give 
the possibility to store qualitative 
descriptions of the system into the right 
CADCES-I 

248 
R. Heinonen and J. Haarla 
Why-level 
Purpose 
Requirement 
ENTITY 
What-level 
Algorithm 
Component 
Structure 
-How-level-
Fig. 1. The three level model in the SML. 
Working area 
Object type 
I Object type key 
\ Object 
1 Object key 
[Requirement 
|Requirement key 
{Procedure key 
iConnection type 
[Connection type ke' 
[ Connection key 
| File pointer 
|File pointer 
I File pointer 
I File pointer 
1 File pointer 
The files 
3rn 
| File pointer 
}H 
Fig. 3. SML from the users point of view. 
Object-type (.OTN) 
Object 
(.0B.NJ 
Name 
Type-name 
Order-number 
Purpose (pointer) 
Requlrement names 
Parameter (pointer) 
Port 
(pointer) 
Algorithm (pointer) 
Component (pointer) 
Structure (pointer) 
Modified 
Requirement 
(.PXQ) 
Order-number 
Description (pointer) 
Parameter 
(pointer) 
Sat1sfied-by (array) 
Hodified 
Direct access 
text f i l e 
.PAR 
Oirect access 
parameter 
f i l e 
.STR 
Oirect access 
structure 
f i l e 
Procedure 
(.PRO) 
Name 
Order-number 
Purpose 
(pointer) 
Requirement names 
Attached-to (pointer) 
Algorithm 
(pointer) 
Modified 
Connection-type (.CTN) 
Name 
Order-number 
(pointer) 
Parameter 
(pointer) 
From 
Connection 
(.CON) 
Type-name 
Purpose 
(pointer) 
Requirement names 
Parameter 
(pointer) 
From 
Fig. 2. The structure of the SML database. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED CONTROL SYSTEM 
DESIGN FOR POWER GENERATION PLANT 
B. W. Hogg, E. Swidenbank and D. G. Morrell 
Department of Electrical and Electronic 
Engineering, 
The Queen's University of Belfast, Northern Ireland, UK 
Abstract. The paper describes the development of a computer-aided modelling and 
control-system-design facility for power generation plant. This has been fully imple-
mented on a laboratory model turbogenerator, and extensive tests have been conducted 
on full-scale plant. The system is based on a dedicated PDP 11-23 microcomputer, with 
background processing on a VAX 11-780 minicomputer, using specially-written software 
packages. Results obtained both in the laboratory and from site tests are presented. 
Keywords. Computer aided system design, data acquisition, identification, computer 
control. 
INTRODUCTION 
The rapid developments in computer technology, and 
advent of inexpensive microcomputers, have radic-
ally altered the approach to the control of indus-
trial plant and processes. In power stations, the 
trend is clearly towards integrated control of the 
plant, encompassing the various aspects of boiler, 
turbine and generator control. The development of 
suitable control strategies requires accurate 
representation of the plant dynamics, together 
with a specialised control systems design, analy-
sis and simulation facility. 
Modelling fulfils an important role in investi-
gations of the performance of electric power sys-
tems and the development of improved controllers 
for turbogenerators. Numerous mathematical models 
have been used to describe these large and complex 
systems, and representations have become increas-
ingly detailed, keeping pace with advances in tech-
nology and new problems in power system operation 
and control. The modelling of plant is particu-
larly important, with two main objectives. 
Firstly, to determine the simplest form of model 
which will describe the unit satisfactorily, and 
secondly, to develop test procedures and methods 
of deriving models from test data. 
The models are used in various ways to examine and 
predict system responses and performance, and in 
design studies. The main difficulties which arise 
(other than in computation) are in determining the 
structure of a model, providing an accurate data-
base, and establishing the validity of the model. 
Scaled laboratory models using small generators 
are sometimes used, with analogue or digital real-
time simulation of thermal plant. These are useful 
in the development of modelling techniques , con-
trollers2, test instrumentation3, etc. However, 
the accuracy of models can only be relied upon if 
they can reproduce results obtained by tests on 
the generators or systems they represent. Numer-
ous tests have been conducted by power companies, 
and a substantial effort continues internationally 
in this area, particularly in seeking to determine 
values of plant parameters from test data 
. 
Linear models are adequate for dynamic stability 
and response studies, and control system design. 
These may be obtained with minimum disturbance 
while the plant is operating normally. The 
methods of system identification may be applied to 
provide models in transfer function6, state vari-
1,7 
ft 
able 
or input-output format. 
The paper describes a hardware/software system 
based on a dedicated PDP 11-23 microcomputer, with 
background processing on an interconnected VAX 11-
780. It presents results obtained in tests on full-
scale plant and in the laboratory. The microcom-
puter has a range of interface modules, peripherals 
and software which enable it to be readily con-
nected to real plant, monitor large quantities of 
data, and provide rapid graphical display of the 
results of analysis, performance assessments, sim-
ulation, or plant tests. It has been used in tests 
on 200 MW units in power stations, monitoring the 
responses of up to 48 quantities to disturbances 
input from the computer. Recorded plant responses 
and models obtained by identification techniques 
are transferred to the VAX to validate the non-
linear models used for simulation in the assessment 
of performance, and the linear models which form 
the basis of control system design. 
The controllers are designed interactively, using 
modern control theory, and a number of multivariable 
and adaptive techniques have been implemented. 
After evaluation on simulated models, the control-
lers are transferred to the PDP-11, and extensively 
tested in real time on a laboratory model turbo-
generator. 
DESCRIPTION 
The general arrangement and philosophy is illus-
trated by the schematic in Fig. 1. It can be used 
with a laboratory model turbogenerator , or on full-
scale plant. 
The laboratory model consists of a micromachine with 
extensive instrumentation and control facilities, 
which has been designed to represent a large turbo-
generator unit in a power station. A PDP 11-23 
microcomputer monitors and controls the system, 
collecting data for modelling and identification, 
and implementing controllers in real time. It also 
checks and validates data for transfer to the VAX 
11-780 minicomputer, which contains the main model-
ling, CAD and simulation packages. This does not 
operate in real time, and updating of controllers 
with changing conditions is performed by the micro-
computer. 
249 

250 
B. W. Hogg, E. Swidenbank and D. G. Morrell 
Tests are also conducted in power stations, when 
up to 48 quantities on a single unit are monitored 
simultaneously over periods of up to half an hour9. 
The data is then brought to the laboratory and 
transferred to the VAX for analysis and design 
studies. 
At present, the complete procedure has been imple-
mented on the laboratory system, and the resulting 
controllers evaluated. Extensive modelling of 
real plant has also been undertaken, together with 
the design of prototype controllers. It now 
remains to complete the modelling/design loop by 
testing controllers on the plant. Initially, this 
will be in the form of "on-top" controllers super-
imposed on the existing control systems. 
DATA ACQUISITION 
The initial goal in control system design is to 
obtain an accurate model of the system to be con-
trolled. Previous research on a physical simul-
ation of a generator has shown that controllers 
designed from models generated by identification 
methods perform better than those designed from 
linearised analytical models. The identification 
process requires data measured directly from the 
system under consideration. Small-amplitude deter-
ministic signals are injected into selected set-
points of the system, and the responses logged. 
This operation requires a computer system which is 
robust, transportable and versatile. 
Hardware 
The data acquisition system is illustrated in Fig. 
2. A Modular Instrument Computer (MINC) has been 
employed to generate and inject deterministic sig-
nals into the set-points of systems under test. 
Up to 48 signals from the system can be logged. 
The MINC consists of an LSI 11-23 processor with 
256 K bytes of RAM, two 512 K byte floppy disk 
drives, an IEEE bus and various hardware interface 
modules which slot into the LSI backplane. The 
system includes analogue-to-digital (A/D), digital-
to-analogue (D/A), digital input and output modules 
the timing of which is controlled by a programmable 
clock. Many configurations of the system can be 
realised to meet continuously varying interface 
requirements. Analogue input through the single 
A/D chip is by three 16 channel multiplexers. To 
sample all signals at one instant, a sample-and-
hold unit is used which receives a holding pulse 
from the clock every sample period. An interrupt 
is simultaneously generated to initiate an assem-
bly language ISR which converts and stores in mem-
ory the sampled data. The D/A conversion is 
required to provide disturbance inputs. This con-
sists of 8 memory mapped 12 bit converters. The 
system VDU is a Newbury terminal which is capable 
of emulating either DIGITAL VTIOO or TEKTRONIX 
T4010 displays. 
Signals to be monitored on the generating plant 
have been mostly available from existing current-
loop instrumentation, but some extra transducers 
have been installed on request by power station 
personnel. All signals are cabled to one location, 
and the current loop signals terminated by suit-
able resistors to provide signals in the range 
±5V. Signals from these "soft" sources are fed 
through various signal processing analogue circuits 
before being presented to the sample-and-hold unit. 
High input impedance differential amplifiers pre-
vent loading or earthing of plant transducers, and 
thus ensure safety. Signals which exhibit a small 
deviation about a large offset are processed by 
fixed gain subtractor/amplifiers. This action 
considerably reduces measurement errors caused by 
quantisation. Compensation for the subtracted 
voltage is accounted for in the software by scal-
ing. 
Software 
The structure of the data acquisition program is 
that of low priority code, performing tasks such 
as operator interaction and graph plotting, 
interrupted at each sample interval by a high 
priority subroutine which controls the interface 
hardware and processes the incoming data. Through 
question-and-answer dialogue, the operator can 
determine sampling rates, data scaling, and dis-
turbance signal generation. Data may also be 
examined either numerically as a screen print, or 
in graphical form. Eight graphs on each of five 
displays can be drawn. This feature is essential 
as plant responses must be constantly monitored 
during tests for safety. The subroutines which 
execute these low priority jobs are written in 
Fortran, and are overlayed in memory to reduce 
space. High priority code and system variables 
reside permanently in lower memory while the top 
192 K bytes are used for fast data storage. Sam-
pling rates are controlled by the programmable 
clock which is synchronised to mains frequency. 
At each interval, an interrupt is generated which 
initiates the assembly language ISR. The processor 
registers are immediately stored, and the priority 
increased to maximum thus preventing further inter-
rupts. Using floating point instructions the ISR 
reads, scales, filters and stores incoming and 
outgoing data. Deterministic signals are gener-
ated and output through the D/A modules. Software 
limits may be imposed on the levels of these out-
puts. Running at maximum capacity, i.e., 48 
inputs and 8 outputs, the ISR executes in under 
17ms. 
Once the system has been installed at a test site, 
the operator can control the data acquisition pro-
cess entirely from the keyboard. As the system is 
operating in an industrial environment, many safety 
features have been included. Operator responses 
are constantly checked to catch errors which may 
result in a system crash. 
The system has been used to gather data from three 
power stations in Ireland. In Poolbeg Power 
Station, Dublin, disturbances were applied to 
field voltage and governor setpoints. The res-
ponses of the 270 MW alternator and turbines were 
logged for four minutes per test. Tests at 
Ballylumford Power Station in Northern Ireland 
were to model the dynamics of the boiler/turbine 
system of a 200 MW set. Due to the longer time 
constants of the system, signals were injected for 
up to one hour, and responses logged. 
DATA CHECKING 
The initial data verification is done locally, 
using the microcomputer off-line. When setting up 
the system, the first task is to ensure that all 
the signals are correctly phased, both to each 
other and to the existing power station control 
room instrumentation. This is initially achieved 
by obtaining a hard copy of the data logged on a 
digital plotter and comparing it with the plant 
chart recorders. For signals not logged on plant 
chart recorders, auto and cross correlation rou-
tines are applied to check these against the init-
ial ones. Unexpected poor quality signals can 
then be further examined using Fast Fourier trans-
formations, and a digital second order notch fil-
ter can be applied to remove any undesired fre-
quencies. 
The data is then transferred via floppy disks to 
the VAX 11-780 minicomputer. The logged signals 
are manipulated and combined to produce new sig-
nals, the aim being to derive a new signal from a 
combination of the others previously logged. These 
are then compared, and provide an extra check on 
the transducers involved with respect to tracking, 

Computer-aided Control Engineering 
251 
offsets and sensitivity. 
MODELLING 
The object is to produce a minimal model that 
accurately describes the turbogenerator, and which 
can be updated on-line. This would permit changes 
of the turbogenerator performance to be accommo-
dated over a period of time. This requirement pre-
cludes the use of time series analysis which has 
been applied to a power station boiler , where the 
dynamics are very slow in comparison to the turbo-
alternator. Recursive modelling identification 
algorithms were then selected, and a software 
package has been written comprising of three such 
recursive algorithms (least squares (RLS), 
unbiased least squares (URLS), and instrumental 
variables (RIV)). 
A subset of the signals available is selected, the 
choice of which is determined by the requirement 
that the model will be used as the basis of a 
design for a controller, and so the ill-condition-
ing of the state variable set must be minimal. 
The modified data file is then processed by the 
modelling programs. An example of the comparison 
of a 15th order reference model, 5th order reduced 
model and the original logged data is shown in Fig. 
3. It can be seen that as long as the quality of 
the logged signals is high, the 5th order reduced 
model provides an accurate description of the 
turboalternator, e.g., Field Volts. The 15th 
order model performs well even with poor signal 
quality, due to its ill-conditioning or redundancy, 
e.g., Active Power. 
MODEL VERIFICATION 
A number of procedures are used to check accuracy, 
offsets and cross coupling effects. 
Accuracy 
Two models are normally determined, a high order 
ill-conditioned state-variable set to give a base 
reference, and a well-conditioned low-order model. 
A numerical performance index (0) is calculated, 
based on the signal to error power ratio. This 
calculation does not take signal noise into con-
sideration, therefore it is confined to comparing 
different model performances on the same set of 
logged data. 
The best determination of the model accuracy is 
obtained by studying the plots of the plant and 
model responses. 
Another useful method of verification is, at a 
given set of plant operating conditions, to per-
form two tests, using Pseudo Random Binary Sequence 
(PRBS) and Random Amplitude (RA) disturbance inputs 
respectively. The models are then determined and 
the data from the PRBS test used with the RA model 
and vice versa. 
Offsets 
It is important with regard to subsequent control-
ler design that the models be not only accurate 
but also unbiased by the effects of noise on the 
logged signals. These effects are screened by 
comparing the RLS and RIV models to the URLS model. 
RANGE OF MODEL VALIDITY 
The linear model produced is only accurate for a 
small range of operating conditions, being the 
model of a non-linear system. A turbogenerator 
operating point can be defined by the Real (P) and 
Reactive (0) power output, where P and O are nor-
malised into per unit (pu) values. A model was 
first obtained at the base operating point from the 
micromachine. Data was then gathered over a sel-
ected range of P and 0 values. These sets of data 
were then applied to the model and the values of 0 
drawn on a three dimensional map as shown in Fig. 4. 
A range of base operating points was investigated 
with similar results. 
From these results it can be seen that the range of 
model validity is in the order of 0.1 pu for P and 
Q· 
ADAPTIVE CONTROLLER 
An example of control systems designed by this 
method is a series-parallel adaptive model-following 
controller. This provides inputs to both exciter 
and governor, and has been derived as an output-
variable controller. It is shown schematically in 
Fig. 5. 
This controller has been fully tested on the micro-
machine, and shown to perform very well. A typical 
response to a three-phase short circuit applied at 
the generator transformer for 120ms is shown in Fig. 
6, showing that there is close agreement between 
the system and model responses. 
CONCLUSIONS 
The paper describes a CAD facility for control sys-
tems associated with power generation plant. It 
may be used to evaluate or update controllers on 
individual units of existing plant, or examine 
options available for new installations. 
ACKNOWLEDGEMENTS 
The authors are grateful for the support and 
co-operation of staff at the Northern Ireland 
Electricity Service, and the Electrcitiy Supply 
Board, Dublin. 
REFERENCES 
1. Sharaf, M.M., and B.W. Hogg (1980). Identifi-
cation and control of a laboratory model turbo-
generator. International Journal of Control, 
Vol. 31, no. 4, 723-739. 
2. Pullman, R.T., and B.W. Hogg. Discrete state-
space controller for a turbogenerator, Proc. 
I.E.E. , _15, 31-46. 
3. Pullman, R.T., and B.W. Hogg (1978). Instru-
mentation for testing and control of a labor-
atory model turbogenerator. I.E.E.E. Trans., 
IM-27, 188-192. 
4. De Mello, F.P., and L.H. Hannett (1981). Valid-
ation of synchronous machine models and deri-
vation of model parameters from tests. I.E.E.E. 
Trans., PAS-100, 662-672. 
5. Sugiyama, T., T. Nishiwaki, S. Takeda, and S. 
Abe (1982). Measurements of synchronous machine 
parameters under operating conditions. I.E.E.E. 
Trans., PAS-101, 895-904. 
6. Hope, G.W., S.T. Nichols, and J. Carr (1977). 
Measurement of transfer functions of power sys-
tem components under operating conditions. 
I.E.E.E. Trans., PAS-96, 1789-1808. 
7. Sharaf, M.M., and B.W. Hogg (1981). Evaluation 
of on-line identification methods for optimal 
control of a laboratory model turbogenerator. 
Proc. I.E.E., 128, Pt. D, 65-73. 
8. Abdalla, O.H., and P.A.W. Walker (1979). Opti-
mal control of a laboratory power system model 
with output feedback. I.E.E.E. Summer Power 
Meeting, Paper no. A79, 451-456. 
9. Swidenbank, E., I. Boyd, and B.W. Hogg (1984). 
On-line identification of large turbogenerators. 
Proc. 6th European Conf. on Electrotechnics, 
Brighton, 74-78. 
10. Sharaf, S.M., B.W. Hogg, and O.H. Abdalla (1985). 
Model-following adaptive control of a turbo-

252 
B. W. Hogg, E. Swidenbank and D. G. Morrell 
generator system. Internation Conf. "Control 
85", University of Cambridge, UK. 
LABORATORY 
SYSTEM OR 
PLANT 
D a t a 
D i s t u r b a n c e s 
C o n t r o l 
^»» 
PDP 
1 1 - 2 3 
DISPLAYS 
CONTROL 
VALIDATION 
ANALYSIS 
STORAGE 
V a l i d 
D a t a 
C o n t r o l l e r 
—* 
"^ 
VAX 1 1 - 7 8 0 
MODELLING 
DESIGN 
SIMULATION 
| 
Pig. 1. Schematic of CAD System 
INTERFACE 
PANEL 
i 1 1 
•5V 
i i 
•5V 1 
■ 5 V 
43 
48 
EASUREMENTS 
1 
^" ' " 
MEASUREMENT 
2 4 CHANNELS 
2 4 CHANNELS 
AVR 
| 
GOVERNOR 
| MASTER STEAM 
PRE SSHR E 
S 
*;:-:, 
SUBTRACTOR 
L 
D I F F E R -
ENTIAL 
AMPLIFIER 
OPTO-ISOLATOR 
[OPTO-ISOLATOR 
[v^r-.m,~N 
T f ^ r Λ rr, -> n 
4 6 6 2 
PLOTTER 
IEEE 
V 
BUS 
^ 
I 
SAMPLE 
1 
J 
-AND- 
Γ 
HOLD 
4 
HOLD 
=S 
DUAL 
MPX 
PULSE 
^ 
w 
4 0 1 0 
VDU 
RS 
232 ] 
VT105 1 
VDU 
r 
1 
/ 
RS232 
/ 
^SI 
1 1 / 2 3 
PROCESSOR 
A/D D/A 
LINE 
CLOCK 
Fig. 2 Data Acquisition System 
ACTUAL 
HODEL A 
HÜDEL B 
200 
200 
Fig. 3 Comparison of Plant and Model Responses 
Recursive instrumental variables identification algorithm 
Model A = 15th order, Model B = 5th order 

Computer Aided Control System Design 
253 
Fig. 4 Micromachine model quality over range of operating points 
Model operating point: P.=0.8, 
0 = 0 . 2 
Date range 
: P = 0.6 to 1.0, 0 = 0.1 to 0.4 
Data increment 
: P = 0.1, 
Q = 0.1 
Set 
Operating 
Point 
UPv 
h^ 
Input 
Signals 
Reference 
Model 
Y mK 
+ 
Micromachine 
System 
Adaptation 
Mechanism 
Initial 
Conditions 
k= 
Fig. 5 Series-parallel Adaptive Model-following Controller (AMFC) 
253 

B. W. Hogg, E. Swidenbank and D. G. Morrell 
1 .ei_ 
1 .61 
,8U 
Al 
2 
3 
Λ 
time sec 
2 
3 
1 
Lime sec 
reference model outputs 
micromachine outputs 
Fig. 6 Response of Micromachine with AMFC 
Three-phase short circuit applied at generator transformer for 120ms 
254 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
STABO - A PROGRAM PACKAGE FOR 
DESIGN AND SIMULATION OF STEAM 
BOILERS 
D. Marganovic, D. Petrovacki and I. Pesenjanski 
Faculty of Technical Sciences, P.fah 104, Novi Sad, Yugoslavia 
Abstract. This paper deals with the program package STABO which is intend-
ed for the calculation and simulation of static behaviour of various types 
of steam boilers. Backgrounds for calculation are given. The concept of 
the overall package and the description of its organization are presented. 
Some simulation results for an industrial steam boiler are also given. 
Keywords. Steam generators? computer-aided design; simulation. 
INTRODUCTION 
Computer aided design of steam 
boilers, as 
complex technical systems,is 
of an increasing importance nowadays.Apart 
from design itself, it is of interest to 
have such a program which will make pos-
sible simulation of static behaviour of 
the boiler with a view to analyzing the 
behaviour of steam power plant and to ob-
tain basic parameters for control decisi-
ons. 
In practical work the need has 
arisen for a parallel analysis for various 
steam boiler constructions for the same 
purpose as well as for the analysis 
(through simulation) of behaviour of vari-
ous constructions at various loads (to sa-
tisfy control requirements). Therefore, it 
would be suitable to have such a program 
which relatively quickly and as simply as 
possible (from the user's point of view) 
can perform necessary simulations for vari-
ous constructions and various (static) 
work regimens on the basis of the unique 
methodology, so that the results of simu-
lation could be mutually compared. 
For example, it can be interesting 
to compare the bahaviour of the steam boil-
er with different fuels (because of un-
stable fuel costs nowadays). 
These were the basic motives for 
the development of the program package 
STABO (statics of the steam boiler) which 
makes design and simulation of various 
types of steam power plant possible. 
BACKGROUNDS FOR CALCULATION 
Majority of functional relations 
of physical processes in steam power plant 
which are applied in the program package 
STABO fall under the category of normative 
materials being generally acknowledged in 
contemporary technical practice. CKTI me-
thodology has been accepted for the basic 
concept |1|, although there are no obst-
acles to some other recommendations to be 
applied - for example |2|. 
By such a choice, application of 
the program has been attained to the over-
all class of steam power plant in which 
combustion of gas, oil and coal-fired fuel 
takes place. 
Apart from its application to a 
large number of various constructions, ad-
vantages of the accepted conception are 
also seen in reliability of the results, 
particularly in the vicinity of nominal 
(designed) loads which are checked by nume-
rous experimental investigations. Some of 
these investigations the authors have per-
formed as well (for example |9|). Besides, 
calculation procedures after CKTI yields 
methodologically completely defined and en-
circled approach. 
As a matter of fact, CKTI methodo-
logy is adapted to the manual way of cal-
culation - a series of relations is given 
in tables, diagrams, nomograms and similar 
ways of presentation. Manifold checks of 
the results and possibilities of addition-
al interventions are envisaged in the cal-
CADCES-I* 
255 

256 
D. Marganovic, D. Petrovacki and I. Pesenjanski 
culation procedures, tolerance of the cal-
culation errors is from the calculation 
aspect extremely "rough", etc. In addition, 
recommended calculations for the states 
which considerably deviate from the nomi-
nal ones are rather intended for checking 
the construction than they are intended 
for the calculation of a real process. 
In view of the fact that the goal 
of the program package STAKO is simulation 
of all stationary steam power plant situa-
tions which could be really expected (a wi-
de interval of load changes, even the regi-
mens at the edge of damage) it has been 
necessary to change and work out the origi-
nal CKTI methodology. 
Firstly, control calculations, i.e. 
programs which calculate heat state for a 
known construction are established. This 
need not be a disadvantage in case of de-
sign calculation, because construction is 
assumed at first, its behaviour is calcula-
ted and the procedure is repeated until a 
satisfactory result is obtained. 
The overall steam boiler is divid-
ed into a series of elementary volumes with 
different mathematical expressions of heat 
transfer mechanism: Furnace - the basic 
form is radiation, banks of tubes - the 
form is convection with radiation in paral-
lel flow, counterflow, crossflow, etc. 
Different tube arrangements (in-li-
ne or staggered arrangement, with different 
transversal and longitudinal pitches) and 
any kind of change in construction is trea-
ted in the framework of the separate ele-
mentary volumes. 
The number of elementary volumes, 
depending upon capacity of computer resour-
ces, can be increased, but considerable 
partitioning does not lead to a remarkable 
increase in accuracy of calculation. 
Calculation of heat exchange, i.e. 
resulting temperature, is sequentially 
performed for each individual element and 
for heat exchangers, for a group of exchan-
gers with the same phase and for a steam 
boiler as a whole. Boundaries of phase 
change within elementary volume (beginning 
and completion of evaporating) are automa-
tically determined. 
In fact, this is a finite element 
method applied to a problem of solving tem-
perature field in a heat exchanger which 
is descretized in space along the gas tract. 
The above cited procedure elimina-
tes the necessity of independent programm-
ing of a large number of combinations of 
flow schemes appearing in practice. 
Heat exchange in the furnace is 
calculated according to a semiempirical 
equation after A.M.Gurvitch |l|. 
(Bo/A)0'6 
θ° = M + (Bo/A)0'6 
(1) 
which links undimensional gas temperature 
at the furnace exit Θ with Boltzmann's 
o 
criteria B , furnace darkness degree A and 
the parameter of the flame position M„ It 
is well known that the cited equation is 
not valid for the poorly cooled furnaces, 
for the furnaces with significant convect-
ion, and probably for extremely "cold" fur-
naces. In this connection, the problem of 
the application of equation (1) appears at 
low loads with large air excesses. Reliable 
results are attained in the diapason of 
0.5<θ <0.85 |3| . 
o 
' ' 
Heat transfer in superheaters, economizer, 
air heater is performed predominantly by 
convection, so that for these exchangers 
equations of heat transfer and heat balance 
are (for simbols - see appendix 1): 
Q=KFAT =φΒ(Η'-Η"+ΔλΗ )=D(H"-H') 
(2) 
m 
g g 
o 
f r 
Mean overall heat-transfer coefficient K 
is based on the surface of the gas side and 
is calculated from the expression 
K 
a 
+ a 
w 
F- a, 
eg 
rg 
f f 
(3) 
Heat transfer coefficient by convection on 
the surface of the gas side α , heat trans-
fer coefficient by radiation α , heat re-
sistance of the tubes with deposits W, as 
well as heat transfer coefficient by con-
vection on the side of the cooler fluid af 
(in cases of water boiling and streaming 
af~°° is adopted) are calculated in the way 
which is a routine method in technical cal-
culations for arithmetic mean temperature 
difference of combustion gases. Mean heat 
transfer coefficient is in effect a func-
tion of the local temperature difference 
between gas and cooler fluid (T - T f ) , and 
enthalpies are also dependent on tempera-
ture and space (lenght) coordinate (because 
of entrance of air in the gas canal ΔλΗ , 

STABO 
257 
and heat losses in the environment being 
expressed by the coefficient φ). On account 
of that, equations (2) do not yield a pos-
sibility of an immediate calculation of un-
known temperature of output gases T" if 
mass flow rates B and D are known, and one 
temperature of cooler fluid is known (T' 
or T") in addition to known functional de-
pendences H =H (T ,λ) and Hf=Hf(Tf) (for 
more information about the solution of si-
milar problems,see |5| , |6 | ) . 
On the other hand, procedures of the 
mean temperature difference ΔΤ encompass 
work with four temperatures (instead of two) 
i.e. work with corresponding bulky subrou-
tines for an explicit, and particularly for 
an implicit calculation of thermophysical 
features of working médias, which in cases 
with limited operative memory may present 
a limiting factor. 
For cited reasons, an iterative 
procedure of the calculation of output gas 
temperature is implemented in STABO, where-
by the value K(T -Tf) is iteratively im-
proved, as well as 
φΒ(Η'-Η"+ΔλΗ )/(Τ'-ΤΜ) 
g g 
o 
g g 
and 
D(H£ - H£)/(T£ - T'f) . 
For slight temperature changes (Τ'-
-T"), which we provided by the choice of 
relatively small elementary volumes, non-
linearities are not so much striking in or-
der to interfere the reliable convergence 
of solution. Investigations of convergence 
are given in |7| and in most cases they 
finish in 2-8 iterations. 
For the calculation of the values 
of water and steam states, programs have 
been developed according to basic approxi-
mate equations IFC 1967 |8| which thoroughly 
reproduce values of previously adopted in-
ternational sceleton tables. Equations from 
|3| and |8| have been used for the calcula-
tion of dynamic viscosity of water and 
steam and for the coefficient of heat 
transfer, respectively. They also well re-
produce values of international sceleton 
tables. 
Calculation of enthalpies of com-
bustion gases and air is performed as in 
the case of the mixture of semiideal gases. 
Enthalpies of gas, oxygen, nitrogen, carbon 
dioxide, steam from |8| and flying ashes 
from |1| are approximated by polinomial of 
the eight degree, i.e. by the method of 
least squares. Thermpohysical properties of 
flue gases (coefficient of heat transfer, 
kinematic viscosity and Prandtl's number) 
are performed according to |5|. 
BASIC NUMERICAL CALCULATIONS 
For solving nonlinear balance equa-
tions for individual steam boiler elements 
as well as for the balance of the overall 
steam boilers, three numerical methods have 
been tested: method of successive approxi-
mations, secant method and a combined 
method of bisection and inverse quadratic 
interpolation according to 171 . Contrary to 
expectations, the method of successive ap-
proximation has proved to be very efficient 
|10|. Explanation for this efficiency lies in 
the fact that the most curves not only 
satisfies the necessary convergence condi-
tion, but their slopes are almost ideal for 
the attainment of fast convergence in the 
wide neighbourhood around the solution. 
When calculating the zeroes of non-
linear functions the greatest problem is 
the fact that the majority of these funct-
ions have vertical asimptotes (poles) in 
the interval in which the zero of the func-
tion may be expected. Therefore, in the 
program package STABO, a subroutine for 
finding zero of functions on the basis of 
the method of bisection and inverse quadra-
tic interpolation is used with a simple 
method for avoidance of the field in which 
there is an asimptote. 
ORGANIZATION OF THE PROGRAM PACKAGE 
The principal scheme of the organi-
zation of the program package STABO is pre-
sented in Fig.l. The concept of the package 
is made in such a way that it satisfies the 
following requirements: high modularity, 
small demands in the main memory, simplici-
ty of the use and high software portability 
For this purpose, "segmentation" of 
bound units is carried out. Bound units 
consist of a resident part ("root") and 
more changable overlays. 
Communication between individual 
overlays (data exchange) is partly perform-
ed through the common zone in the main me-
mory and partly through the dedicated fi-
les on external memory (disc). 

258 
D. Marganovic, D. Petrovacki and I. Pesenjanski 
In order to simplify the use of 
STABO, this program package is organized 
in three bound units : preprocessor proces-
sor and postprocessor. Processor is the 
most important part because it actually 
performs the calculation and simulation of 
the given steam power plant. 
Processor consists of a resident 
root and the bound unit contains all nece-
ssary common zones in the main memory in 
which exchange of data between individual 
overlays takes place. In the first overlay, 
modules for stoichiometric calculation, 
properties of combustion gases and the cal-
culation of some initial values before 
starting the main (external) loop are situ-
ated. In the second overlay there are both 
modules within the external loop (furnace, 
tube network, superheater, evaporator,eco-
nimizer, air heater) which depends on the 
previously selected steam boiler as a 
whole . Criterion of the exit from the loop 
is the combination of relative error accord-
ing to independent variable (temperature 
of flue gases at the chimney entrance) and 
the absolute error of the function (satis-
faction of the heat balance equation of 
the steam boiler). This is the change in 
relation to |1| where the criterion is the 
absolute error according to the independent 
variable. 
In the third overlay there are pro-
gram modules for the determination of the 
necessary water and steam values, obtained 
on the basis of |8| and |3|. 
When making a decision about the 
way of processor formation, two alternati-
ves related to the problem of solution of 
the choice of the corresponding module 
within the selected steam boiler configura-
tion are considered. Namely, the problem 
is seen in the fact that from a large num-
ber of modules for the same function of 
steam boiler (for example, air heater) one 
should automatically select a correspond-
ing module without making a previous inter-
vention on original source programs (which 
would complicate the use of the program 
package, increase the possibility of error 
and require recompilation). According to 
the first alternative, bound unit of the 
processor would have all possible various 
modules linked to the various types of 
steam boiler elements (furnace, tube net-
work, superheater, etc.), but in such a 
way that they would be situated in various 
overlays and the processor itself would, in 
dependence of input data which define steam 
boiler configuration, recall only those 
overlays which are the part of steam boil-
er construction. Disadvantage of this al-
ternative is seen both in an extremely 
large number of overlays linked to a bound 
unit and in time loss when changing corres-
ponding overlays in the main memory for 
each passage through the main itterative 
loop. Because of that, the authors have de-
cided to take another alternative which as-
sume the existence of utility programs, or 
a complete preprocessor which links the 
bound unit of the processor on the basis 
of the data on steam boiler configuration 
before starting the execution of the proce-
ssor. Advantage of this alternative is se-
en in the fact that the main loop of the 
algorythm is contained in a unique overlay, 
so that the program executes faster and the 
total number of processor's overlays is re-
duced to three. Disadvantage in respect to 
the first alternative is in decreased port-
ability of the overall program package. In 
the second alternative which is implement-
ed in STABO, there are utility programs 
which make possible "alternative" linking 
of the processor only to those modules for 
individual steam boiler elements which are 
given in configuration. This linking pro-
cess is an automatic one on the basis of 
the input data. 
Pre- and post-processors are de-
signed in such a way that they represent a 
suitable interface between the user and 
the machine in the sense of simple-interac-
tive data input (steam boiler configuring, 
and others) and control of necessary out-
put documents- results. The most important 
function of preprocessor is to ensure a 
proper linking of the processor on the 
basis of automatic editing of linker di-
rective files according to the input data. 
For example, if we would like to 
replace one type of air heater (SUB1A) and 
the economizer (SUB2A) with another cons-
tructive types (SUB1B and SUB2B) then it 
is necessary only to replace the following 
instructions in a linker file 
LDEF 
LINKN 
LDEF 
LINKN 
SUBI, 
SUBI A 
SUB2, 
SUB2A 
SUBI A 
SUB2A 

STABO 
259 
by means of automatic editing (for Honey-
well level 6 minicomputer) with the follow-
ing instructions 
SDEF 
SUBI, SUBIB 
LINKN SUB1B 
LDEF 
SUB2, 
LINKN SUB2B. 
In source programs there is a sequence of 
FORTRAN instructions which should not be 
altered (i.e. there is no need for re-com-
pilation: 
EXTERNAL 
SUBI 
EXTERNAL 
SUB2 
CALL ZERO (SUBI,...) 
CALL ZERO (SUB2,...) 
END 
SUBROUTINE ZERO (FUN,...) 
CALL FUN (...) 
END 
where ZERO is the name of the subroutine 
for finding zero of the function FUN (which 
is actually SUBIA or SUB1B, SUB2A or SUB2B). 
ILLUSTRATION OF THE USE OF THE 
PROGRAM PACKAGE STABO 
The construction of a steam boiler, 
which has been analized by the use of STA-
BO, is presented in Fig.2. The boiler is 
considered with or without the air heater. 
Analysis is performed for two kinds of fu-
els: oil and coal (pulverized coal). The 
technical data of the boiler are: the steam 
production D =40 000 kg/h, steam pressure 
p =45 bar, steam temperature t =450 °C, 
s 
s 
feedwater temperature t =130 C. This type 
of a small boiler can be often found in the 
process industry. 
Some of the results obtained by si-
mulation with STABO are presented in Figs. 
2-10 where dash lines are used for coal, 
full lines for oil and dot lines for over-
load. For the different values of the co-
efficient λ and load D/D , fuel consumpt-
ion per kg of the steam B/D (for oil and 
coal) is given in Fig.3 and in Fig.4, res-
pectively. These results can be used both 
for the control of steam boilers and in va-
rious economic analyses. Dependence of η 
on λ and D/D as well as the kinds of fu-
m 
els are given in Fig.5.The analysis of the 
steam boiler construction with or without 
the air heater (economic justification of 
its implantation) is obviously in Fig.6. 
Change of η for two values λ, and in de-
pendence of coal moisture is presented in 
Fig.7. (Nominal values for coal moisture 
in calculations are 40%). In Figs. 8 and 9 
dependence of the combustion gas temperatu-
re at the exit of the boiler, TG", as a 
function of λ and load D/D_ for coal and 
m 
oil are presented. These results are of in-
terest when considering an additional u t i l i -
zation of rest heat and for avoidance of 
certain steam boiler work regimes due to 
low temperature corrosion. In Fig.10 heat 
amount QPHL is given which should be consi-
dered in the cooler in order to control 
steam temperature at the output of the 
steam boiler. 
REFERENCES 
| 1 | "Teplovoij rascet kotelnyh agregatov",Normativ-
nij metod, Energija, Moskva 1973. 
|2| VDI-Wärmeatlas, VDI-Verlag, Düsseldorf, 1974. 
|3| Rikvin,S.L., Aleksandrov.A.A.: "TeplofiziCeskie 
svoistva vody i vodjanogo para", Energija, Mos-
kva, 1980. 
|4| Bloh A.G.: "Teplovoij izlucenije", Energija, 
1967. 
|5| Hansen,H.: "Wärmeübertragung im Gegenstrom, 
Gleichstrom und Kreuzstrom", Springer, Berlin, 
1976. 
|6| RoetzeljW.: "Heat Exchanger Design with Variab-
le Transfer Coefficients for Crossflow and Mix-
ed Arrangements", Int.J.of Heat and Mass Trans-
fer, Vol.17, 1974, pp.1037-1049. 
|7| Forsythe,G., Malcolm,M., Mol er, C ; "Computer 
Methods for Mathematical Computations", Pren-
tice Hall, Englewood Cliffs, 1977. 
|8| Schmidt,E.: "Properties of Water and Steam in 
Si-Units", Springer,Berlin, 1969. 
|9| Gulic,M., Pe§enjanski, I . , Perunovié.P.: "Heat 
Distribution in a Gas-Fired Furnace" (in Serbo-
croation), Strojarstvo,17(1975),No.6,pp.273-277, 
Zagreb 
1101 MarganoviCD., Petrovaëki,D., Pesenjanski,1.: 
"A Program Package for Design and Simulation of 
Various Steam Boilers", EES»84, Nice, 1984. 
APPENDIX-Symbols used 
Q 
total heat-transfer rate W 
K 
mean overall heat-transfer coefficient based 
on the surface area of the tube from gas side 
W/m2
 
2 
F 
heat-transfer area m 
ΔΤ 
mean temperature difference 
K 
φ 
nondimensional coefficient including heat loss 
in the environment 
B 
fuel mass flow rate 
kg/s 
D 
mass flow rate of cold fluid 
H 
specific enthalpy 
kJ/kg 
λ 
coefficient of air excess in combustion gases 
T 
temperature °K 
a 
heat-transfer coefficient 
W 
wall resistence of separating surfaces of 
fluids including deposits 
Δ 
finite difference 
Subscripts 
r 
radiative 
C 
convective 
g 
refers to fuel gas 
f 
refers to cold stream (steam, wather,air) 
' 
at the inlet 
at the outlet 
o 
refers to environment state 

260 
D. Marganovic, D. Petrovacki and I. Pesenjanski 
Postprocessor 
superheaters 
drum 
secon- pri-
Hg. 1 
Fig. 2 
0 
0 
0 
0 
0 
0 
0. 
0. 
o. 
0. 
0. 
0. 
93-
92-
91-
90-
89-
88-
87-
86-
85-
84-
83-
82" 
1 
1 
1 
1 
.25 
.3 
4 
5 
2001 
190 
180-1 
170 i 
160 
150 1 
140 
130 
120 
Hol 
100 
.^À=1.4 
λ = 1 ·
5 
^ ' ' ^ = 1 . 3 
.,.·""" .„.··-·'" ..„λ=1.2 
..···-'^..-;>\=i. is 
Fig.8 
70 
80 
90 
100 
110 
120 
D/D 
Fig. 5 
60 
70 
80 
90 
100 
110 
120 
D/D, [%] 
8/D 
i 
[kg B/kg D: 
0.82 
0.81 
0.80 
0.78 
0.77 
A=1.5 
λ=1.4 
...° ν=1.3 
...·° >=1.2 
..-° >=1.15 
B/D 
:kg B/kg D: 
0.3 
0.29 
0.28 
0.27 -! 
^ 
λ=1.5 
-~~~"'^^> 
\=1.4 
- r ^ · - — ° 
\=1.25 
Fig. U 
Fig. 3 
60 
70 
80 
90 
100 
110 
120 
D/Dm [%] 
TG" 
;°c; 
190 
1801 
170 
160 
150 
140 
130 
120 
0.93 H 
0.92 \ 
C. 91 -j 
0. 90 \ 
0. 89 -i 
0.88 1 
0.87 -| 
0.26 -' 
0.85 1 
0.84 
Λ 
I 
o i l , 
= 1 . 1 5 
Fig. 6 
^ - = 1 . 5 
^ » \ = 1 . 4 
^-ολ=1.3 
Ξ - \ = 1 . 2 5 
6C 
70 
80 
90 
100 
110 
120 
D/D 
QP;-L 
"kJ/Kg" 
δ^-
Fig. 9 
0.87 
C86 
0.35 
0.34 
0.83 1 
0.32 
1800 
15?Q 
12CJ0 -j 
900 
Fig. 7 
Fig. 10 
70 
80 
90 
100 
D/Dm %\ 
10 
20 
30 
40 
W 
5C 
60 
70 
80 
90 
100 D/Dm 

Copyright © IFAC Computer Aided Design in Control 
ELECTRIC POWER SYSTEMS 
and Engineering Systems, Lyngby, Denmark, 1985 
DIPOS: A DATABASE FOR COMPUTER AIDED 
DESIGN IN ELECTRIC POWER SYSTEMS 
L. Borzemski and S. Lebiediewa 
Institute of Control and Systems Engineering, Technical University of Wroclaw, 
50-370 Wroclaw, Poland 
Abstract. The database system named DIPOS intended for use in computer-
aided electric power system expansion planning is presented. The GAD 
system containing the DIPOS database is briefly explained in the context 
of the transmission network expansion planning· There are many reasons 
that in CAD applications we should rather think about specialized or 
problem-oriented databases, which would give unique solutions in particu-
lar situations, than general purpose databases with maintenance and 
operation overheads. In the paper the user's view of data, user interface, 
database data model and physical database organization are discussed. 
The system is the relational database from the user's point of view but 
it employs the network database data model at the system level. This 
allows the user to have well known natural relational data model with its 
correctness and ability to perform profitable relational operations, 
whereas the DIPOS database network data model gives additional advantages 
in the pre-definition of possible use patterns of the data. An example of 
database application is also presented. 
Keywords. Computer-aided system design; data handling; databases; 
power systems planning. 
INTRODUCTION 
In the paper the main principles of the 
DIPOS database are discussed. The CAD 
system is also outlined, as well as the 
connection between the electric power 
system and the database is described. 
The electric power system design can be 
considered in the context of system expan-
sion planning in different time ranges. The 
expansion planning deals with the generation, 
transmission and distribution systems in the 
electric power network. The methods used 
in the planning of the power system expan-
sion require a great number of data neces-
sary for calculations or obtained as the 
results of complex calculations. This gives 
rise to the need for a computer-aided 
planning system containing a database. 
As part of a comprehensive program to sup-
port the electric power system design, the 
CAD system with the integrated database 
has been developed at the Technical Univer-
sity of Wroclaw /Borzemski and co-workers, 
1983; Kinsner and Nawojska, 1982/. 
The database named DIPOS /Database In Power 
Systems/ making use of the""problem-specif-
icity, is characterized by access and stor-
age structures which guarantee a fast data 
access and the minimization of space utili-
zation, as well as by the data manipula-
tion language taking into account the 
user's needs. 
The relational database approach has been 
chosen because it allows the user to oper-
ate within database profiting by a unified 
and simple data viewpoint. Some non-rela-
tional data operations are also provided. 
The database extends the problem-solving 
capabilities of the computer-aided planning 
system through providing data handling 
support for all available problem-solving 
programs. 
ELECTRIC POWER SYSTEM 
EXPANSION PLANNING - THE 
CAD ENVIRONMENT 
Electric power system expansion planning 
can be viewed as a complex decision making 
process dealing with the generation, trans-
mission and distribution systems planning 
for different time ranges. Because of the 
high investment costs involved and the long 
life-time of electric supply, transmission 
and distribution equipment, the decisions 
have far - reaching consequences. Thus the 
most precise and productive planning meth-
ods must be used. Application of such com-
plex and sophisticated methods raises a 
difficulty in handling the data. This can 
be overcome through the development of 
suitable computing environment such as a 
CAD system. 
The electric power system expansion plan-
ning has been extensively studied and sev-
eral systematic heuristic and mathematical 
approaches have been proposed, for exam-
ple by Backlund and Bubenko /I973/ and 
Indurawa /1930/. 
The group from the Technical University of 
Wroclaw has developed the CAD system for 
supporting transmission network expansion 
planning. It is built from two main func-
tional layers : the lower layer referring to 
data handling and the upper layer dealing 
with problem - solving programs. 
261 

262 
L. Borzemski and S. Lebiediewa 
Sample expansion planning procedure is 
shown in Fig.1. The aim is to find the ex-
pansion variant of network configuration at 
the minimum cost for a given time range· 
The procedure starts from the redundant 
maximum variant covering all existing and 
planning nodes and connections /that is, 
lines and transformers/. The least-cost ex-
pansion variant is achieved through success-
ful eliminations of connections from 
admissible succeeding variants. Technical 
constraints, network consistency and relia-
bility of power flow are checked for given 
power demand, for which network expansion 
is to be done. 
Characteristics and Use Patterns of 
Transmission Expansion Planning Data 
The data processed in the algorithms of 
transmission system expansion planning can 
be classified as either 
/a/ catalogue data - data specifying 
technical, constructional and 
economical features of possible 
transmission network component 
types, 
or 
/b/ parameter data - data concerning 
the characteristics of components 
of both existing and planning 
transmission systems. Parameters 
define the components as they are 
included in the configuration of 
the system. Localization conditions 
and planning features are also 
taken into account. 
The catalogue data are provided by the com-
ponent supplier or constructor whereas the 
parameter data are individually determined 
for each component. Both data types provide 
full spectrum of information needed /or 
obtained/ in the expansion planning. 
The catalogue data are provided for the 
following transmission network components: 
- transmission lines, 
- conductors used for transmission lines 
and bus-bars, 
- bus-bar sections, 
- switch fields equipment, 
- circuit-breakers, 
- transformers. 
To define a transmission system /now opera-
ting, under construction, considered in a 
plan of expansion etc./ and its state, the 
parameter data are considered for: 
- transmission lines, 
- bus - bar sections, 
- switch fields equipment, 
- substations, 
- transformers, 
- switching stations, 
- variants of expansion, 
- strategies of expansion, 
- power demand. 
The contents of individual data sets of 
both kinds has been presented by Borzemski 
and co-workers /1983/. For example, the 
transmission line catalogue data set in-
cludes twenty nine data items specifying 
each line type, e.g. type of line, rated 
voltage, number of circuits, average span 
length, catalogue index number of ground 
wire, ground area covered by the line and 
by the steel tower /or wood pole/, length 
of insulators, their type and mounting 
co-ordinates, mass of the supporting tow-
ers and intermediate poles. On the other 
hand, each element of the line parameters 
set is described by twenty four data items, 
e.g. name of the line, commission year, 
planning feature, rated voltage,localiza-
tion code, climate zone code, type of line, 
line length, average ground resistivity, 
admissible power. 
It is obvious that there are one-to-many 
associations between the components of the 
transmission system, which must be modelled 
to represent directly the network 
configuration, e.g. transmission lines 
connected to a certain bus-bar. The associ-
ations may exist between components being 
of different or the same type. These asso-
ciations are also reflected in the use 
pattern of data. The user may ask to get 
the component data either together with 
information on associated components or 
without it. 
The planning methods are characterized by 
a great number of data necessary for 
calculations and used by a series of 
succeding algorithms in the proceeding 
steps of the planning procedure. 
The users are rather non-computer oriented 
and the total task coding in high level 
language is divided between them. Tasks 
often involve the iterative execution of 
several computer programs, each requiring 
data generated by the others in addition 
to user input data. 
As a possible solution to achieve 
consistent network expansion planning in 
which all input, processed and output data 
will be immediately accessible to all the 
users, is the development of computer-
aided design system with integrated data-
base, providing analytic and data handling 
support. 
Databases in CAD Systems 
There are many reasons that in CAD appli-
cations we should rather think about spe-
cialized or problem-oriented databases, 
which would give unique solutions in par-
ticular situations, than general purpose 
databases with maintenance and operation 
overheads. The industry developed databases 
are mainly concentrated on fulfilling the 
requirements from some general user with a 
very wide data use pattern. This data man-
agement concept cannot be fully applied in 
scientific databases /Borzemski, 1933; 
Borzemski and Lebiediewa, 1982/. 
As the problem environment is well defined 
the problem - oriented database can be 
developed. Here it means that database is 
oriented to the problems supported by the 
CAD system. Such database, making use of 
the problem specificity, provides the users 
with high - level data access relevant to 
the needs. This allows the users to concen-
trate on the problem, without necessity to 
carry on /of course, in some extent they 
must do it/ data during design activity. 
THE ÛIPOS DATABASE 
In general, three levels of data models in 

DISPOS 
263 
database are considered: external, con-
ceptual and internal· An external model 
/known also as a user's view/ shows how 
information within the database is viewed 
by a user. A conceptual model /a database 
model/ describes which information may 
enter and be stored in the database. This 
model is used by the database management 
system /DBMS/ in handling all access to 
the database· The user's view is mapped 
into the database model. An internal model 
describes how and where the information is 
represented in storage structures. The 
logical database organization deals with 
the user's view and database model, 
whereas the physical database organization 
concerns the internal model. 
Data Structures and Data Manipulation 
The user data comprises two data sets: 
the catalogue data set CATALOGUES and the 
parameter data set PARAMETERS. Each of 
them consists of separate homogeneous data 
subsets. These data subsets are in the 
form of tables of records of the same type, 
where each record contains data items 
values specifying certain transmission 
network component. Thus there are six 
tables of records in the CATALOGUES and 
nine tables of records in the PARAMETERS. 
All records pertaining to the same table 
are different because at least one data 
item has distinct value. 
The associations are now defined between 
network components as data relationships 
between records from particular tables in 
the data set PARAMETERS. Due to the lack 
of the circuit-breaker table in the 
PARAMETERS, the data relationships also 
exist between records from the switch 
fields equipment parameter table and 
records in the circuit-breaker table in 
the CATALOGUES. The circuit-breaker table 
is not included in the PARAMETERS because 
no information about these components is 
relevant to network configuration or 
operating conditions. 
It is obvious that the list of associated 
components /now we can say - associated 
records/ with a given component is not of 
a fixed length. For the purposes of this 
study, the maximum numbers of associations 
/i.e. their sizes/ have been estimated. 
For example, in the case of a medium size 
regional power system, a record of the 
table of substation parameters may be 
associated with up to ten records from 
the table of transformer parameters and 
with up to thirty records from the table 
of line parameters. A record of the table 
of variant parameters may be associated 
with up to 20 500 records from the 
following three tables, viz. : substation 
parameters /max. 500 records/, transformer 
parameters /max. 5000 records/ and line 
parameters /max. 15 000 records/. All 
associations are 
illustrated in the 
figure related to the database model dis-
cussed in the next section. 
In transmission expansion planning study 
the data are treated by the users as some 
generalized arrays of numeric or character 
data items. Users manipulate on different 
data aggregates /e.g. single numeric data, 
vectors, arrays/. 
Available data may be interrogated in 
different ways and the users may wish: 
- to read and write a table, 
- to select certain colums of a table and 
to remove from the resulting table any 
duplications in the records, 
- to select certain records of a table 
satisfying a given condition, 
- to window /to display a sub-table/ 
certain part of a table, 
- to select certain record of a table 
together with associated records. 
The tables of records are very comprehen-
sive and the users want to have data ma-
nipulation possibilities allowing them 
rather to narrow the contents of the tables 
than to enlarge them. 
Logical Database Organization and Data 
Operations 
As the user's view the relational data 
model /Date, 1977/ has been chosen because 
it corresponds to the tabular data view. 
The basic data structure in the model is a 
relation which can be viewed as a two-
dimensional non-homogeneous data array 
consisting of rows and colums, with the 
rows corresponding to records and the 
columns representing data items within the 
records. Columns are called attributes and 
take the values from the domains containing 
the same type data item values. 
The analysis shows that all attributes of 
each relation /also the primary keys/ take 
values from simple domains. The relations 
do not possess candidate keys and func-
tional dependencies between any attributes 
do not exist. Hence the relations are set 
up in fourth normal form. 
The relational database approach, as used 
in DIPOS, assumes the development of a 
data manipulation language based on rela-
tional algebra. In the DIPOS the retrieval 
language is extended by some user-dependent 
operations. 
The system provides the following opera-
tions: PROJECT, SELECT, MASK, LIST, READ 
and WRITE. Two of them, i.e. PROJECT and 
SELECT are fundamental operations in the 
relational approach, allowing to select, 
respectively, certain colums or rows from 
a relation. The third operation - MASK -
means that the resulting relation contains 
selected rows with selected colums; this is 
the way to obtain a "window" from a rela-
tion. 
In the relational model all access paths 
are determined by row content alone, order 
is determined /by content/ at the time a 
collection of rows is retrieved. Thus the 
user can establish any relationship to 
access the data, e.g. to represent dis-
cussed before associations. However, the 
size of associations in not a priori known 
and adding new attributes or building new 
"linking" relations may be space-consuming. 
Moreover, the names of associated rows and 
relations must be known in advance in 
retrieval process. This may results in some 
complications in data manipulation. There-
fore, the users are concerned with an op-
eration allowing direct retrieval of the 
set of associated rows. The DIPOS database 
system deals with this problem, providing 
the LIST operation. This operation selects 

264 
L. Borzemski and S. Lebiediewa 
the associated rows along the predefined 
access paths and the list of qualified 
rows is presented to the user, 
Apart from the above operations, the system 
provides a means to read a relation as well 
as to write /update/ a relation, row, column 
or attribute value, 
Of course, LIST operation is non-relational 
and in that form it cannot be realized 
within the relational database model. The 
following approach seems to be convenient, 
The user is aware of well-known natural 
relational data view, whereas the DIPOS 
database management system manipulates on 
the network view of data. The DIPOS data-
base logical organization is shown in 
Fig,2, There are all possible one-to-many 
associations as shown by the double arrows. 
Consider an example of a database which 
includes substation, switching station, 
transformer and line parameters relations 
as it is illustrated in Fig.3· The con-
tents of the relations can be displayed by 
READ operations /for space reasons only a 
few attributes per relation are assumed/. 
The user may ask if there are substations 
in the network, commissioned before 1931. 
Then SELECT operation specifies SUBSTATION 
-P relation as argument and "CY<1981" as 
condition. The result contains only one 
row named S2. The figure also shows the 
list of rows obtained after issuing LIST 
operation concerning all components asso-
ciated with substation S1. The order of 
rows in the list is defined by the user. 
The user is able to put some selection 
condition in retrieving the associated 
records. 
Physical Database Organization 
The DIPOS physical database consists of two 
types of files, viz,: the database 
hierarchical index and the main data files. 
The database index is used to search data 
in the main data files containing data 
described in the CATALOGUES and PARAMETERS 
data sets. The physical database organiza-
tion is remarkably simple and provides 
unique advantages for operational efficien-
cy as well as for ease - of - definition 
and database evolution. There is complete 
separation of data and access structures. 
This separation allows DIPOS to manage the 
data and the access structures independ-
ently. The main data files contain rela-
tions with no embedded data for logical 
relationships between rows. This provides 
the data independency. 
The relations are stored as two-dimensional 
Fortran - like arrays of equal - length 
elements. There is also an advantage of 
physical data organization consisting in 
representing within database only three 
types of data items, that is 8-character 
data strings, integer and floating-point 
numbers. All these data items are encoded 
into two words, each of four 6-bit char-
acter in length. The relations are se-
quenced rows by rows. The space of the 
main file is logically continuous but the 
physical space distribution accross disk 
depends on operating system. 
SYSTEM STRUCTURE AND 
IMPLEMENTATION 
The system consists of Data Definition 
Subsystem /ODS/, Data Manipulation 
Subsystem /DMS/ and Data Utility Subsystem 
/DUS/. 
The DDS clearly defines /creates/ rela-
tions, their descriptions, associations, 
levels of protection and maintains the data-
base indexes and dictionary. The role of 
the database dictionary is to provide with 
information about each object and process 
within DIPOS, for example, the dictionary 
stores full descriptions of relations. 
The means that are used to interface the 
user with a database mostly depend on 
user's needs. The CAD algorithms are written 
in Fortran, so that all data operations 
have the general form of CALL statements 
to callable routines under control of DMS. 
Utility subsystem DUS provides with func-
tions including programs for initial 
loading, unloading and reloading as well as 
creating a back-up copy of the database. 
The problem-solving program library is 
maintained separately by a means of 
operating system. 
The database is implemented on ODRA 1300 
series /ICL 1900 - like/ computers. The 
GSORGE-3 operating system is preferred 
although DIPOS can run under other avail-
able operating systems. 
CONCLUSIONS 
The DIPOS database intended to support the 
computer-aided transmission expansion plan-
ning has been presented. Using the database 
the users may develop their algorithms 
without focusing on problems related to 
data handling. The system supports two dif-
ferent data model types. The user operates 
within relational database profiting by a 
unified viewpoint. But due to the network 
database model maintained at the system 
level, the user is able to find the data 
along predefined access paths, as well. 
'REFERENCES 
Backlund,Y. and J.A.Bubenko Sr. /1973/. 
Computer-aided distribution system plan-
ning. Proc.of the Six Power Systems Com-
putation Conference, Vo"l. I, Darmstadt, 
IPC Science and Technology Press. 
Borzeriski,L. /1933/. Data structures and 
storage structures in scientific data 
base for multistage experiment. Acta 
Cybernetica. 6,1_, 13-21. 
Borzemski,L. and S,Lebiediewa /1982/,Prob-
lem-oriented data base design. Proc.Bth 
Int. CQDATA Conference, Jachranka. 
Borzemski,L.,A.Jaroszewska,S.Lebiediewa and 
A.Maly /1933/. Database DIPOS./in Polish/ 
Rep. 59/33f Inst. of Control and Systems 
Sngg.,Tech. University of Wroclaw. 
Date,C.J./1977/. An Introduction to Database 
Systems. Addison-Wesley Pub.Co.,Reading, 
Indurawa,A.S./1980/. Power system genera-
tion and transmission planning using 
probability methods, Ph.D.Thesis, 
Imperial College, London. 
Kinsner,B. and L.Nowojska /1982/. Computer 
system for transmission system planning 
/in Polish/. Rep, 214/32, Inst. of 
Electric Power Engg,,Tech, Univ. Wroclaw 

DISPOS 
265 
Starting variant : all existing and 
planning nodes and connections 
T 
Calculate stochastic AC power flow 
H 
Find and eliminate least-flow connection 
k i 
< 
z 
Evaluate 
network 
consistency 
I 
r) 
Calculate 
power flow 
r 
Return 
connection 
< 
T~C 
Check 
technical 
constraints 
T 
^ 
Evaluate 
power 
flow 
reliability 
Find 
least-cost 
variant 
All connections ? 
(^ 
END 
J 
> 
5 
> 
PARAMETERS 
* f ! 
i i 1 
t f * 
I 4 f 
CATALOGUES 
CIRCUIT 
BREAKER-C 
SWITCH FIELDS 
EQUIPMENT-C 
CONDUCTOR-C 
SUBSTATION-P 
« 
TRANSFORMER-C 
y SWITCHING 
STATION-P 
TRANSFORMER-P 
P 
LINE.P 
BUS-BAR 
rl SECTIQN,P 
i4 SWITCH FIELDS 
EQUIPMENT-P 
VARIANT-P 
STRATEGY.P 
L_.^ 
POWER 
DEMAND-P 
BUS-BAR 
SECTION-C 
LINE_C 
Fig. I.Basic structure of the transmission 
system expansion planning 
Fig. 2. The DIPOS database logical organization 
LINE_P 
SS2 
|L3 
• bus-bar 
-line 
circuit-breaker 
L-NAME 
L1 
L2 
I 
L3 
UN 
110 
110 
35 
L0C_CD 
10 
11 
20 
TYPE ! 
OVD 
OVD 
OVD 
SUBSTATI0N_P 
S.NAME 
S1 
S2 
PF 
0 
0 
CY 
1982 
1980 
UN_MX 
110 
110 
TRANSFORMER-P 
T_NAME 
I 
T1 
CY 
1982 
PF 
0 
TYPE 
HV/MV 
SWITCHING-STATION-P 
|SS_NAME 
SS1 
SS2 
| 
SS3 
PF 
0 
0 
0 
CY 
1982 
1982 
1980 
UN 
110 
35 
110 
F_ 
S-AREA 
150 
100 
UN 
110/35 
.NO 
3 
2 
2 
SS_N0 
2 
1 
SS_AREA 
50 
75 
100 
— Q D — transformer 
S1.S2 
substations 
SS1 ,SS2 switching stations 
UN-rated voltage ,L0C_CD-localization code. PF-planning feature. CY-commission year, x_P-parameter relation 
Resulting list after issuing LIST SUBSTATI0N-RS1 
S-NAME 
S1 
SS.NAME 
SS2 
PF 
0 
CY 
1982 
UN_MX 
110 
S_AREA 
150 
SS_N0 
2 
SS.NAME 
SS1 
PF 
0 
CY 
1982 
UN 
110 
F_N0 
3 
PF 
0 
CY 
1982 
UN 
35 
F_N0 
2 
SS-NAME 
75 
T_NAME 
T1 
CY 
1982 
PF 
0 
TYPE 
HV/MV 
UN 
110/35 
SS.AREAI 
50 
| 
L_NAME 
L1 
UN 
110 
LOC-CD 
10 
TYPE 
OVD 
L.NAME 
L2 
UN 
110 
LOC-CD 
11 
TYPE 
OVD 
lL_NAME 
L3 
UN 
35 
LOC-CD 
20 
TYPE 
] 
OVD 
I 
Fig. 3 . Network diagram (a), database (b). LIST operation (c) samples 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF ELECTRIC 
DISTRIBUTION NETWORK 
S. Kujszczyk 
Department of Electrical Engineering, 
Warsaw Technical University, 
Warszawa, 
Plac Jednosci Robotniczej 1, Poland 
AÇs-trapï 
electric distribution networks are and essential part of power systems, 
In Poland system of computer - aided design of HV and hV networks have al* 
ready been elaborated and put into operation· 
The system is based on the data base. It is composed of the following 
data sets: 
- catalogues, containing the technical and economic parameters of the 
equipment, 
- catalogues classifying customers, 
- data catalogues for reliability calculations, 
- data for technical and economic calculations, 
- parameters essential for the computer drawing of designs of electric 
networks, 
- numerical representation of the existing networks· 
The system has a block structure. It has following blocks of programs: 
- block for writing and maintenance of data sets, 
- blocks for generating new variants of the network, 
- blocks for data processing, 
- blocks for technical and economic calculations, 
- blocks for drawing, 
- auxiliary blocks· 
The system operating in a conversational way enables the user to guide 
the calculating process as it takes place. 
The user determines the sequence of performing the respective elements 
of the calculating process and, after every stage of the calculations, 
is able to return to any previous stage he chouses. The various calcu-
lations are performed in accordance with the user's instructions. The-
se instructions are in the form of instructions in so called problem 
oriented language, adapted to the needs of the system· Aknowledge of 
programming and the principles of the operation of computers is not 
required in using instructions in the language. 
Keywords. Computer aided design. Electric distribution networks. 
INTRODUCTION 
Electric distribution networks are an es-
sential part of power systems. In Poland, 
distribution networks comprise networks 
from low voltage /LV/380/220 V through 
middle voltage /MV/6 kV, 10 kV, 15 kV, 20 
kV, and 30 kV to high voltage /HV/,110 kV. 
These distribution networks constitute 
about 85% of the value of the whole power 
system· 
System of computer-aided design of HV and 
MV distribution networks have already been 
elaborated and put into operation. It ba-
sed on the data base· 
The systems has a block structure .Because 
of the calculations which require control-
ling indirect results up dating the data 
and adjusting them, the elements of the 
system constitute autonomous programmes, 
that carrying out the following func-
tions: 
- formation and administration of data ba-
se of existing networks, 
- the generation of alternative networks, 
- the technical and economic calculations 
necessary in the process of desing* 
The system is equipped with a problem 
oriented language of an interactive type, 
particularly suited to "computer-aided" 
work· 
The system of design of electric distribu-
tion networks presented by Bac klund, Buben-
ko 1979 , Hindi Brameller 1977 and 
Kujszezyk 1974, 1984 axe computer-aided 
system. In the future, the system will be 
gradually transformed into a full automa-
tic one· 
THE DATA BASE 
The system is based on the data base of a 
universal character. It enables the carry-
ing out of both design calculation and 
operational calculations· The base in com-
posed of the following data sets: 
- catalogues, containing the technical and 
economic parameters of the equipment, 
267 

268 
S. Kujszczyk 
- catalogues c l a s s i f y i n g customers and i n -
forming about t h e i r daily load curves, 
- data catalogues for r e l i a b i l i t y calcula-
t i o n s , containing per-missible l o s s 
of 
load periods and the costs of the energy 
not supplied, 
- data for technical and economic calcula-
t i o n s , 
- parameters essential for the computer 
drawing designs of e l e c t r i c networks, 
- numerical representation of e l e c t r i c 
networks, 
- loads in the e x i s t i n g networks. 
For networks generated during the process 
of design, only a l i s t of changes in r e l a -
t i o n to the existing network i s given· 
THE STRUCTURE Ojj1 THE SYSTEM 
The structure of the system comes from i t s 
functions and interactive method of work. 
The best-suited i s a block structure, 
in 
which every elementary task i s conducted 
by a separate block· The work of the com-
puting and organizational blocks i s guided 
by a special block, called the executive 
programme. 
The source programme, written in a problem 
oriented language, i s translated into 
an 
usual programme by the translator block. 
After translating part of the source prog-
ramme, translator transfers guidance to 
the executive programme u t i l i z i n g the re-
spective blocks. After implementing 
the 
translated part of the source programme, 
the executive programme transfers guidance 
to translator, 
e t c . 
The flow diagram of the system i s shown in 
i i g . 1 . Using the system of computer de-
sign and operation of e l e c t r i c networks, 
one can do several kinds of calculations 
charing appropriate blocks of programs. 
They are: 
1 · block for the writing and maintenance 
of data sets 
AKTU , 
2. blocks for generating new variants of 
the network, 
3 . blocks for data processing, 
4 . blocks for technical and economic c a l -
c u l a t i o n s , 
5. blocks for drawing, 
6. auxiliary blocks. 
Selected blocks are now discussed. The 
l a r g e s t group of blocks consist of blocks 
for technical and economic c a l c u l a t i o n s . 
The main calculations done by group 4 are: 
- calculation of the load flow and current 
flow in radial networks, 
- calculation of load flow and current 
flow in mesh networks, 
- calculation of voltages and particular-
l y : voltage drops in network elements, 
nodal voltages, the cost caused by v o l -
tage deviations, 
- calculation of short c i r c u i t s , and par-
t i c u l a r l y : the characteristic parame-
t e r s of short c i r c u i t s in the nodes of 
the network, the flow of 
short-circuit 
currents in radial networks, the 
flow 
of short-circuit currents in mesh n e t -
works, ground f a u l t s currents in MV n e t -
work, 
- calculation of power and energy l o s s e s : 
load and iron l o s s e s in transformers, 
load l o s s e s in e l e c t r i c l i n e s , 
- calculation of r e l i a b i l i t y : l o s s of 
load, probability parameters the cost 
SOURCE PROGRAMME] 
IN THE PROBLEM 
ORIENTED LANGUAGE 
_J_ 
GENERATION OF NEW 
STRUCTURES OF THE 
NETWORK 
THE BLOCKS OF 
TECHNICAL AND 
ECONOMIC CALCULA-
TIONS 
THE BLOCKS FOR 
DRAWING 
AUXILIARY ELOCKS 
BLOCKS FOR 
PROCESSING THE 
DATA BASE 
1 
INITIAL DATA 
CATALOGUES 0F| 
EQUIPMENT 
CATALOGUES OF 
LOAD CURVES 
CATALOGUES OF 
RELIABILITY 
DATA 
MODEL OF THE 
EXISTING NET-
WORK-* 
+ AUXILIARY 
PARAMETERS 
LOADS 
FORECAST 
LISTING AND 
DRAWING 
ώ fë 
Pig. 1. Block diagram of the integrated 
system of designing and operating 
electric distribution networks 
of customers losses caused by outs in 
the power supply, 
- supervisory calculations: the supervi-
sion of permissible load flow, checking 
the level of short-circuit currents, 
checking voltage levels, 
- economic calculations: calculating an-
nual running costs, the costs annual po-
wer and energy losses, discounted costs, 
the synthetic cost index and the unmort-
gaged parts of the network costs, 
- data base processing: listing of equip-
ment according to: catalogue classifi-
cation, belonging to various substa -
tions, and date of installation, manu-
facturers, etc. 
Group 6 comprises auxiliary blocks,dealing 
with the network graph and the transforma-
tion and decomposition of the graph. This 
group includes the blocks which: 
- generate the network tree, 
- generate the tree with a given root, 
- determine the path between nodes on a 
graph, 
- change branches in tree. 
The group of auxiliary blocks includes 
the programs which produce certain addi-
tional results, requested by the user. 
The integrated system has modular struc-
ture. It can be extanded to include new 
calculating blocks and functions. 

Design of Electric Distribution Network 
269 
The printing of resuite oan be done either 
in alphanumerical form or in the form of a 
drawing. The graphical printing 
of 
the 
network diagram can be accomplished with 
the use of a p l o t t e r · The data necessary 
for t h i s purpose must contain a numerical 
model of the network diagram and coordina-
t e s of nodes, the scale of the drawing and 
the contents of the descriptions 
names, 
numbers · 
CONVERSATION IN THE INTEGRATED 
SYSTEM 
The computer system operating in a con-
versational way enables the user tu guide 
the calculating process as i t takes place. 
The user determines the sequence of per-
forming the respective elements of the 
calculating process and, after every s t a -
ge of the calculations, i s able to return 
to any previous stage he chooses. The va-
rious calculations are performed in accor-
dance with the user's instructions· These 
instructions are in the form of instruc-
tions in so-called problem-oriented l a n -
guage, adapted to the needs of the s y s -
tem· A knowledge of programming and the 
principles of the operation of computers 
i s not required in using instructions in 
the language. The language enables the 
user: 
- forming, bringing up to date and proces-
sing the data base, 
- solving various problems connected with 
the operation and design of the network, 
- intervention in the calculating process, 
depending on intermediate r e s u l t s , 
- printing and drawing the r e s u l t s . 
The main parts of the language are i t s set 
of instructions and grammar· 
The alphabet i s a f i n i t e substantive 
set 
of symbols 
the vocabulary 
which can be 
divided into five parts. 
Instruction heading 
PROCESS« 
- key words of types of 
i n s t r u c t i o n s , e . g . 
INPUT, OUTPUT, CHANGE, PLOW OF POWER, 
SHORT-CIRCUIT,.·· 
- key words of objects, e . g . KZ, PNO, TZW, 
1 . N R , · · · , 
- l i m i t e r s 
, ; ■ - · 
The grammar comprises: 
- syntax, which analyse and construct sets 
of correct expressions, 
- semantics, which involves semantic laws 
of the language· 
The performance of an operating design 
calculation of a network constitutes one 
process. This process is composed of in-
structions written by the designer and the 
relevant print-outs which represent the 
system's reply. 
The construction of the instructions de-
pends on its type, and the most developed 
one is in the following form: type of 
sentence 
function 
object 
qualifiers . 
The key words of the type of sentences de-
fine the scope of the sentences opera-
tions. For each type of sentence a list of 
functions is defined. For each functions 
a list of objects is defined. For each ob-
ject a list of qualifiers is defined. 
In operating and design calculations three 
kinds of functions are carried out with 
the aid of the language: describing the 
diagram and state of the network, calcu-
lations of the network, and printing the 
results. 
Below are examples of sentences: 
- CHANGE ERASE x^X-j t · · · >xl~xk* 
x m j . . . f X n ; 
the branches 
χ,^-χ. $ · · . ix^-x^ 
and nodes 
x m j î # # # î x n 
referred to are eliminated from the n e t -
work, 
- TENSION χ . ; · · · ; χ . ; calculation of the 
tension in the nodes referred t o , 
- ACTIVE FLOW LIVSCH1TZ χ±-, determing the 
flow of active power in the tree of roof 
x± by the LIVSCHIT2 method, 
- THREE-PHASE SHORT-CIRCUIT x ±j x.J calcu-
l a t i n g the short-circuit parameters for 
the indicated nodes of a mesh network in 
the case of a three-phase short-circuit, 
- VOLTAGE REGULATION HV/MV-MV/LV x±$ c a l -
culating the optimal settings of 
high 
and middle-voltage and middle and low-
- v o l t a g e , transformes ratios in a n e t -
work tree of roof x i in the case of v o l -
tage regulation, 
- PKINT PATH χ ^ - χ , ; the print-out of the 
branche 
and nodes of the path 
x^-Xj· 
For the purposes of the language, TRANSLA-
TOR has been written using a mixed techni-
que· The COMPILER of the language produces 
on end programme in an intermediate langu-* 
age s p e c i a l l y created for t h i s purpose, 
which i s a set of macro instruct ions for 
performing technical, economic and auxi-
l i a r y calculations. The macro instruct ions 
c o n s t i t u t e a sort of library of programmes 
which c l o s e l y cooperate with each other by 
using common sets of data and results* 
This structure permits great f l e x i b i l i t y 
i n performing calculations which can 
be 
arbitrary interrupted, and them re-started 
at any point in the previously performed 
process. This solution i s more e f f i c i e n t 
than a s t r i c t l y compilatory technique· 
The end programme i s then prepared by a 
simple INTERPRETER of the intermediate 
language. It c a l l s forth and implements 
the successive macro instruct i o n s . 
The task of the TRANSLATOR i s not only to 
compile and verify the formal correctness 
of the instructions but also to check the 
sequence in which the respective instruc-
t i o n s occur in the and programme. An exam-
ple of an incorrect sequence in the i n -
struction to calculate power l o s s e s w i t -
hout previously calculating the load flow· 
I t should be emphasised that the COMPILER 
and INTERPRETER have been written in 
FORTRAN IV. This makes i t r e l a t i v e l y easy 
to introduce changes to the TRANSLATOR. 
I t also enables existing programmes to be 
u t i l i z e d · 
SWMARX 
A computer system of designing HV and MV 
electric distribution networks has been 
introduced in many cities in Poland, in-
cluding the two largest, Warsaw and £od£. 
It is currently being introduced in rural 
networks. Of course, before the systems 
were introduced, the data base had to be 
prepared· This was a particularly diffi-
cult and labour-consuming process. Howe-
wer, the systematic bringing up to date 
of the data base is incomparably simpler· 

270 
S. Kujszczyk 
REFERENCES 
Backlund, Y., J.A· Bubenko 
1979 · Compu-
ter-aided distribution system plan-
ning. Electrical power and energy sys-
tem, Nr 1 
Hindi, K.S., A. Brameller, 1977 . Design 
of low-voltage distribution networks; 
a mathematical programming method« 
Proceedings IEE Power Record, January 
Kujszczyk, S. 1974 . Automatic design of 
housing estate distribution networks. 
Proceedings 1KB Power Record, June 
Kujszczyk, S. 1984 · Nowoczesne metody ob-
liczen elektroenergetycznych sieci 
rozdzielczych. WNT, Warszawa 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER-AIDED DESIGN OF INDUSTRIAL 
ELECTRICAL DISTRIBUTION NETWORKS 
J. Kulczycki* and M. Zabicki** 
^Institute of Power Systems Engineering, Academy of Mining and Metallurgy, 
B-l, Al. Mickiewicza 30, Krakow, Poland 
**ALPHA, ul. Balicka 176, 30-149 Krakow, Poland 
Abstract. The paper presents general-purpose computer-aided design 
system for the determination of the optimal design of the industrial, 
electrical distribution system. A cost-effective structure for such 
a network is often a multilevel, hierarchical structure with one or 
more voltage levels and several kinds of equipment. It consists of main 
supply point, transformer substations and/or switchboards together with 
supplying lines (which all together form a "backbone network") and cab-
le feeders connecting demand points to backbone network (local net-
works). A distribution planning model is formulated using graph theory 
and discrete programming. Decisions can be taken on two levels - the 
first concerns backbone network, the second specifies assignments of 
demand points to particular elements of the backbone. The model is ra-
ther general - backbone can be any of loopless structure. The problem 
structure typically leads to heuristic solutions of an iterative natu-
re. A kind of such method is implemented in a general-purpose software 
package letting on automatic design of industrial electrical distribu-
tion systems. 
Keywords. Computer-aided design; modelling; heuristic programming; 
optimisation; power distribution. 
INTRODUCTION 
The designing of electrical networks is 
a complex process in which the applica-
tion of computing techniques has grown 
steadily, from the well established areas 
of load flow and security analysis for 
high-voltage transmission systems into 
the more recent computer-aided procedures 
for planning electrical distribution sys-
tems. 
In practical distribution system design 
problems, the number of possible line 
routes, transformer and switchboards lo-
cations is very large. Furthermore, equi-
pment capacities must usually be chosen 
from a finite set of available options. 
The planner is confrontated with a multi-
tude of technical and economical const-
raints. The equations relating construc-
tion and operating costs to system confi-
guration are usually nonlinear. In summa-
ry, the planning problem is very complex, 
even without considering the difficulties 
posed by uncertainties in load forecasts, 
and sometimes beyond the resolving power 
of the unaided human mind. The planner 
needs to have access to appropriate com-
putational technique; this would give him 
a unified approach to the many different 
distribution system design problems, and 
thus would enable him to systematically 
check a great number of project variants. 
In other words, the planning of electri-
cal distribution system should be formu-
lated as a problem of mathematical opti-
mization, which could serve as a basis 
for computer-aided design procedures. 
The selection of a suitable computational 
technique for the outlined problem poses 
severe difficulties, and several attempts 
have been made in the application of ma-
thematical programming to the solution of 
distribution planning models. Mathematical 
synthesis was first attempted by Knight 
(1960), who proposed a spatial model of 
the network and solved it using linear 
programming. Boardmanand Hogg (1972), 
later Adams and Laughton (1974), as well 
as Kulczycki (1976) presented alternative 
approaches to the problem using dynamic 
programming and branch-and-bound method. 
More recently Wall, Thompson and Northcote 
-Green (1979) proposed very effective 
transshipment formulation of the problem, 
and Backlund (1978) brought together many 
modern techniques to provide a model pac-
kage for electric distribution systems 
synthesis. 
Heuristic methods (Meckiff and co-workers, 
1979; Zabicki,1982) have received much 
less attention than mathematical ones, 
which is somewhat surprising taking into 
account model simplification needs. Very 
often the implementation of the heuristic 
algorithms in an interactive system emp-
loying computer graphics enable a study 
of many aspects of a problem and intuiti-
ve deductions of alternative designs lea-
ding to computational speed and simplici-
ty. 
This paper outlines the -principles of 
271 

272 
J. Kulczycki and M. Zabicki 
a heuristic method for optimization of 
any loopless distribution system and pre-
sents based on it computer-aided design 
package which can serve as a tool in many 
realistic problems of searching for ac-
ceptable design of industrial, electrical 
distribution networks. 
THE PROBLEM 
Many of industrial, electrical distribu-
tion systems are low voltage or medium 
voltage/low voltage networks where power 
flows in one direction only, from the 
substation (or switchboard) to demand 
points. The unidirectionality of power 
flow, in addition to the low statistical 
failure rate of equipment at low voltage 
levels, led various authorities to adopt 
loopless arrangement for these networks. 
The distribution network is characterized 
by a number of loads, dispersed within 
the planning area at known locations, and 
assumed to be assigned to one or more 
energy sources (supply points). Moreover, 
the potential sites for locating interme-
diate transformer substation and/or swi-
tchboards are specified. This enables to 
use electric lines more efficiently -
more cost-effective lines can be employed 
and the number of long lines can be redu-
ced. From this basis one outlines all fe-
asible routes for connection of the swit-
chboards, substations and supply points, 
as well as demand points. Eventually exi-
sting system facilities can also be acco-
unted for. The resulting set of feasible 
routes, potential sites, loads and their 
locations, together with specification of 
standard equipment and technical and eco-
nomical data, form the data base for op-
timization. The network structure can be 
conceived as hierarchical tree - loads 
connected by cable feeders to switch-
boards, switchboards to substations, sub-
stations to supply points. In describing 
the problem further, we confine ourselves 
to a three-level hierarchy: demand points 
transformer substations (or switchboards) 
and one supply point. Extensions to more 
levels and more supply points are strai-
ghtforward. The objective is to select: 
(1 ) transformer substations with respect 
to number, sites and sizes; 
(2) cable routes and sizes, 
to supply given loads at the lowest pos-
sible cost, and subject to capacity li-
mitations on network elements, thermal 
rating and voltage drop constraints, as 
well as topology and reliability cons-
traints. 
We can treat the supply point and trans-
former substations with supplying lines 
as a "backbone network", and cable fee-
ders connecting demand points to "back-
bone" as low level, local networks. Thus 
the global design problem consists of two 
interdependent subproblems: the design 
of the "backbone network" and the design 
of the local distribution networks. 
THE MODEL 
consists of a number of loads, substation 
and one supply point, which are to be in-
terconnected so that the complete network 
satisfies all load and reliability condi-
tions and minimizes the chosen objective 
function. A set of mathematical constra-
ints which define network topology, re-
liability and other important features 
are derived from the engineering consi-
derations which apply to industrial, ele-
ctrical distribution networks. 
The model to be described requires three 
kinds of data as inputs: the demand point 
locations and their load, the feeder net-
work segment description and their possi-
ble routes, the description of substa-
tions and their supplying lines. Thus: 
(1) we assume that the total demand for 
electrical power in a small area is re-
presented by a single demand point; the 
power demand of that area is a load of 
the demand point; 
(2) the feeder network is described by 
means of two data structures - the first 
contains descriptions of the types of 
cables which can exist in the local net-
works, the second gives the lengths of 
line segments between each pair substa-
tion - demand point; 
(3) the data required for each substation 
are its capacity and its location, actual 
or potential. The substation capacity re-
presents existing or proposed maximal 
transformer rating. Two data structures, 
similar to that of feeder networks, are 
specified for each supply line. 
System Costs 
The total cost of distribution network in-
cludes the cost of transformers, cost of 
civil work at substations, cost of sup-
plying lines, cost of feeder cables, cost 
of trenching and cables lying and cost of 
electric losses in the system. 
It is generally accepted that the cost of 
a substation or cable can be represented 
by cost-capacity functions. Such a func-
tion comprises all the cost components 
associated with the establishment of po-
wer flow distribution capacities, inclu-
sive of capitalized cost of losses. All 
investments are converted to annual costs 
considering the economic life of equip-
ment. Also, annual costs of losses during 
the period of analysis are discounted to 
present worth. The cost-capacity func-
tions are obtained by superimposing these 
cost items. Pig. 1 illustrates cost-
-capacity curves for transformer different 
The network model is a mathematical for-
malisation of the described above network 
design problem. For the purpose of the 
research covered in this paper, the model 
Capacity S^ 
Pig. 1. 
The Cost-Capacity Curves. 

Design of Industrial Electrical Distribution Networks 
273 
ratings. vSimilar cost functions can be ob-
tained for cables. 
vVe assume that the cost of supplying lines 
as a function of substation capacity, is 
superimposed on the cost of transformers 
and the resultant cost function is then 
linearised to yield a two-stage cost func-
tion of the form represented by Eq. (1). 
f = * + 0 
Network Representation 
(1) 
The representation of the design problem 
is by a network of nodes and links. The 
nodes represent the supply point, the po-
tential and existing substation sites and 
locations of demand points. The links re-
present the feasible cable and supplying 
line routes. The schematic and network 
representation of the discussed electri-
cal distribution system are exemplified 
in Fig. 2 and Fig. 3, respectively. With 
each node representing substation site 
associated are two quantities, first, an 
upper bound on carrying power, which in 
fact is the maximum capacity for the tran-
sformer type of that substation (or the 
capacity of the number of transformer 
units that can be installed), second, 
a cost coefficient which appears in the 
objective function of the design problem 
and represents a linear approximation to 
the cost of power losses and installation 
costs for that site. With each feasible 
level 1, supply 
source 
Fig. 
level 2, substations 
level 3, loads 
2. Schematic Representation of the 
Three-Level Distribution Network. 
connection substation-demand point we as-
sociate connection costs, which can be 
computed in advance, based on the cost-
-capacity curves for cables, load of each 
demand point and distance between that 
pair. 
Mathematical Formulation 
We are now in position to state the prob-
lem in a mathematical fashion. The problem 
to solve is: 
Mint(o<i + ß±S±)y± + t èbilzil 
(2 
i=1 
x 
i l l 
i = 1 i = 1 ij ij 
Subject to 
R3St ={i yi= 1} 
£ z. . = k 
1 ^ 
i=£Vi 
z i j < y i ' 
J 
3 = 1>< 
ö m a x 
i = 1,, 
«1 = 
1 , . 
. . ,n 
i - 1,. 
,m; 
,n 
y ±6 (0,1) ; zi;j6 (0,1) 
i = 1,...,m; j = 1,, 
The notation used are: 
(3) 
(4) 
,m (5) 
(6) 
(7) 
m 
n 
«■5 
number of feasible substations 
number of loads 
fixed charge for substation i (inclu-
ding supplying line) 
incremental cost of substation i 
load of substation i 
cost of connection between i-th sub-
station and j-th demand point 
s opened 
{
1 , if substation i i 
0, otherwise 
P , if j-th 1 
_\ 
station i 
1^ lO, otherwise 
load is connected to sub-
i 
.max 
set of feasible configurations for 
backbone network 
number of substations to which each 
demand point have to be connected 
load of j-th demand point 
maximum capacity of the i-th substa-
tion 
primary unes 
secondary lines 
3. Network Representation of Possi-
ble Cable Routes and Substation 
Sites. 
The inclusion of the integer variables in 
the objective function (2) yields a cor-
rect representation of the system costs. 
Constraint (3) is a "backbone" topology 
constraint; constraint (4) is local net-
works topology constraint - for k=1 they 
have standard, radial configuration, and 
k=2 means double radial configuration for 
these networks. Thus constraint (4) can be 
treated also as reliability constraint. 

274 
J. Kulczycki and M. Zabicki 
Condition (5) ensures that the load of 
each substation is zero when it is not 
chosen, and less than the maximum rating 
of the largest available transformer or 
switchboard (or group of them) when it is 
chosen. The configuration constraints 
(3 - 4) give the model a flexibility to 
incorporate many of special prerequisities 
which can be found in real applications. 
For instance, if substations are the main 
elements of the backbone network that con-
straint can force some specified substa-
tions to be a part of any solution, to 
ensure or suppress certain combinations 
etc. It can also incorporate tree topology 
of the backbone network (f.e. if the dis-
tribution system is to be low-voltage, 
cable-busbar network, or if we allow a 
tree connections of switchboards to supply 
point. 
The formulation as given above is similar 
to plant, warehouse and facility location 
problem found in operations research li-
terature. Most proposed methods for sol-
ving it employ branch-and-bound technique 
or heuristic procedures. The problem as 
stated above is a hard integer programming 
problem running times which probably grow 
exponentially with the size of the prob-
lem. Thus for large problems, the optimal 
algorithms are generally found to be too 
expensive in terms of storage space and 
computation time. Furthermore, they do not 
easily accomodate extensions to layouts 
other than standard (i.e. each element 
connected directly to the next highest 
element in the hierarchy). The choice of 
solution technique for the electrical 
distribution network design problem has 
therefore been concentrated on heuristic 
procedures. 
OUTLINS OF THE METHOD 
The global design problem cons 
subproblems: the design of the 
network and design of local ne 
two subproblems interact with 
through the following paramter 
(1) backbone elements number, 
yout and sizes 
(2) demand points assignment 
elements 
(3) capacity constraints for 
and local networks 
(4) reliability requirements. 
Once the above variables are s 
the subproblems can be solved 
ly. This naturally leads to he 
lution process of an iterative 
follows : 
(i) 
determine backbone retw 
guratior 
(ii) assign loads to backbon 
(iii) check if solution is im 
ists of two 
backbone 
tworks. The 
each other 
s : 
their la-
to backbone 
backbone 
pecified , 
independent-
uristic so-
nature as 
ork confi-
nroved. 
To im 
known 
Hambu 
nary 
start 
then 
wable 
site 
the c 
volve 
st-^ti 
plement step· 
4.ΌΡ generat 
rger, 1963), 
plant locati 
s with no su 
investigates 
sites. The 
is based on 
ost function 
s a sequence 
on assignmen 
(i) one c 
ing scheme 
often use 
on problem 
bstation i 
, step by 
selection 
the greate 
. The proc 
of demand 
t problems 
an employ well 
(Kuehn and 
d in the ordi-
. The algorithm 
nstalled. It 
step, all allo-
of the added 
st savings in 
edure thus in-
point - sub-
(step ii) for 
different sets of specified substation lo-
cations, each with a distinct new substa-
tion site, and selecting the best new , 
which gives the minimum cost. The procedu-
re terminates when no more savings in cost 
can be accomplished by adding substations. 
The need for solving a sequence of demand 
points - substation assignment problems in 
each step of the algorithm demands the ve-
ry effective solution procedure for that 
problem. However, it can be easily shown 
that for a fixed set of installed substa-
tions, problem (2 - 7) reduces to the 
generalized assignment problem, which be-
longs to the class NF-complete (Fisher, 
1981). The best solution methods (exact) 
available today for that kind of problems 
are based on implicit enumeration or 
branch-and-bound, and thus are inadequate 
for our purposes, .'/hat we need is a fast 
heuristic algorithm. Under some conditions 
such an algorithm can be constructed. It 
proceeds as follows: initially all loads 
are unassigned. Then at each step least 
cost assignment is found, and if is feasi-
ble (i.e. the chosen substation is not 
overloaded) the step is terminated. Other-
wise, the second cheapest, then the third 
and so on, is tried. The detailed discus-
sion of that algorithm and conditions un-
der which it works is presented in the 
work of Zabicki (1982). 
assignments could 
onr.ection costs. 
sh obvious inter-
one and local net-
decisions can be 
ke into account 
osts due to con-
oint. This can be 
mxn, so-called 
here 
(8) 
Kow, the cost of the system consists of 
the fixed cost of substations, given by 
On the f: 
be found 
But this 
irs t sight, the ; 
based on l.v. c< 
do 
dependence 
works costs 
made if we 
increase 
nection < 
achieved 
decision 
C . . : 
1J 
in 
Df 
by 
ma 
= b 
not accompli: 
between backb> 
. More exact . 
would also ta' 
substation c 
some demand p< 
constructing 
trix c. . , w\ 
.. + O.S. 
i = 1 
1 J 1 
(9) 
and assignments cost, given by 
è ë 
ci.izi3 
1=1 3=1 
It i 
in ( 
tion 
of f 
ness 
that 
only 
proc 
the 
effe 
s evide 
2 - 7 ) 
with c 
ormulas 
of thi 
decisi 
once , 
ess, wh 
solutio 
ctive 
J ij 
nt, tha 
is equi 
ost fun 
(9) an 
s appro 
on matr 
at the 
ile cos 
n proce 
(10) 
t the formulation given 
valent to the formula-
ction given by the sum 
d (10). The attractive-
ach lies in the fact 
ix is to be constructed 
start of the solution 
t calculations during 
ss are very simple and 
Although the mathematical model is based 
on the linearisation of the cost functions 
(cost vs. power) the true discrete costs 
can be made to govern the search for a 
"good" solution. Once the network configu-

Design of Industrial Electrical Distribution Networks 
275 
ration is fixed, the solution can be thou-
ght as a schedule of power flows in a net-
work. Hence an appropriate cable, trans-
former or switchboard size can be nomina-
ted for a cable route or substation site, 
according to the power flow indicated by 
the solution. Consequently the true disc-
rete costs can be calculated. 
The proposed solution method is not opti-
mum. The sites found earlier should not 
necessarily be retained as more substa-
tions are entered into backbone. Similar-
ly, on lower level, demand point assign-
ments to substations can be not optimal. 
To alleviate problems like that, the de-
sign system incorporates a variation of 
the algorithms, allowing a decision at 
each step to drop one of the sites alrea-
dy selected, or to interchange a site al-
ready in solution with the site actually 
out of it. 
COMPUTER-AIDED DESIGN SYSTEM 
The purpose of the system is to enable 
designers to study industrial, electrical 
distribution networks within the frame-
work of the mathematical model. It gives 
them possibility to efficiently check 
great number of project variants and thus 
encourages a more consistent and compre-
hensive system planning. 
Network 
L 
seificationP I 
Model 
[Creation 
Tools 
Model 
Update 
Tools 
OPTIMIZATION! 
MODEL 
IDISPLAY OF 
RESULTS 
What-if 
ICapability 
presentation^ 
Graphics 
lPOSTOPTIMIZATION| 
DECISIONS 
Raport 
[Generating 
IScreen Painter] 
[Plotter Output! 
FINAL 
OUTPUT 
Fig. 4. Block Scheme of the Computer-
-Aided Design System 
The design process is consisted of three 
major phases. The first one is preparing 
the Network Data Base. As shown in Fig. 4 
the computer analyzes the user's input 
(i.e. network specification) and determi-
nes what additional information is requi-
red to perform the model building phase. 
Some of this information may be supplied 
automatically by the computer through the 
use of intelligent defaults from the 
Standard Data Base (i.e. network equipment 
catalogue and specifications, cost data). 
The remaining information is provided by 
the user in response to prompts via a sim-
ple interactive display interface. The 
specification of the problem is progressi-
vely refined until the Network Model can 
be generated automatically. 
The Data Base creation and update employ 
a variety of support tools, among them 
Data Dictionary is essential. It represe-
nts a data model maintained by the Data 
Base. Support facilities such as Data Mo-
delling Tool and Data Analysis Tool are 
needed for synthesizing user informations 
into a fully normalized data model. Sub-
sets of the Standard Data Base are then 
extracted by a user and together with the 
Network Data Base go under integrity stu-
dies. These includes range and data type 
checks, checks for permissible values, 
and checks involving cross-reference to 
other data. 
In the second phase of computer-aided 
design process, the network model of the 
of the specific system under study, is 
created. It requires as input: (1) loca-
tions of supply point, subs+ations sites, 
and demand points, (2) matrix of minimum 
feasible distances between pairs substa-
tion site - demand point, (3) vector of 
minimum feasible distances between all 
substation sites and supply source, 
(4) demand points loads and maximum load 
for each substation site, (5) technical 
and economical indices of the equipment 
to be utilized. The network model is then 
transformed into Optimization Model which 
states a base for a configuration search. 
The decisions are performed using an opti-
mization package, which employs heuristic 
algorithms outlined in the previous sec-
tion. However, other methods can be app-
lied at this stage, f.e. branch-and-bound 
technique for problems of smaller size. 
The output from that phase gives the total 
load for each substation and its optimum 
service area, i.e. a set of demand points 
connected to that substation. After accep-
ting the results postoptimization deci-
sions can be performed and model can be 
modified. 
Finally, at the third stage of the design 
process, the optimum substations capaci-
ties are determined from their loads. Cab-
les sizes are determined by economic con-
siderations involving line lengths, load, 
losses and cost. Voltage drops can be also 
considered. The user gets from the design 
system tabular summaries by demand loca-
tion, substation and supply point (if more 
than one), construction and losses costs 
and voltage drops in percent. In addition, 
a printer plot of the substation service 
areas is provided and a graphical display 
of the network layout is given. 

276 
J. Kulczycki and M. Zabicki 
CASE STUDIES 
The described, computer-aided design sys-
tem is actually under development and will 
finally run on Digital PRO 350 microcom-
puter. However, the "heart" of the system, 
an optimization model has been already 
implemented and heavily tested on CDC6600 
for several different network structures, 
among them medium voltage/low voltage dis-
tribution network with radial configura-
tion of low voltage feeders and reliabili-
ty constraints, the low voltage radial 
network with switchboard substations as 
an intermediate link between supply sour-
ces and demand points, and the cable-
-busbar low voltage distribution network 
often used in industrial plants. In the 
last case the backbone (busbar) part of 
the network is to have tree topology, whi-
le the demand points are radially connec-
ted to busbars. Running times have been 
on the order of seconds for networks con-
taining about hundred of loads and fourty 
substations (or busbar segments). The qua-
lity of the obtained solutions has been 
generally in the range 5 - 10$ of the op-
timum value reached using branch-and-bound 
package (where it was possible to find 
optimum). The results suggests that the 
model is well suited for the design of 
loopless electrical distribution networks. 
It seems very likely that using the full, 
computer-aided design system solutions 
will be even closer to optimum. 
CONCLUSIONS 
We have presented in this paper an appro-
ach for optimizing loopless, electrical 
distribution networks. The distribution 
planning model has been formulated based 
on graph theory and discrete programming, 
and with simplicity as an important ob-
jective. The proposed solution method has 
been typically heuristic, however results 
of using it have been very pleasing. The 
method does not give an exact solution 
with one run of the package, but instead 
gives the planner a tool with which to 
evaluate different network options. The 
full computer-aided design system is cur-
rently under development. It will allow 
a review of distribution projects to be 
done in a fraction of time and with far 
more confidence than previously possible, 
moreover, an interactive capability of the 
system will give a planner a large amount 
of control at each stage of the design 
process. 
REFERENCES 
Adams, R. N., and M. A. Laughton (1974). 
Optimal planning of power networks 
using mixed-integer programming. 
Proc. IEE. 121. 139-147. 
Backlund, Y. (1978). Hierarchical Model-
ling of Regional Electric System. 
Ph. D. Thesis, The Royal Institute of 
Technology, Stockholm. 
Boardman, J. T., and B. W. Hogg (1972). 
Computer method for design of electri-
city supply networks. Proc. IEE. 119. 
851-856. 
Pisher, M. L. (1981). The lagrangian re-
laxation method for solving integer 
programming problems. Management 
Sei., 27, 1-18. 
Knight, U. G. (1960). The logical design 
of electrical networks using linear 
programming methods. Proc. IEE. 
107 A. 306-314. 
Kuehn, A. A., and M. J. Hamburger (1963), 
A heuristic program for locating wa-
rehouses. Management Sei., 9, 
643-666. 
Kulczycki, J. (1976). Optimization of 
Industrial Electrical Distribution 
Networks. Zn AGH, Krakow, Poland. 
Meckiff, C , J. T. Boardman, I. Richards, 
and J. R. Green (1979). Comparative 
analysis of heuristic synthesis me-
thods for electricity transmission 
networks. IEEE Trans, on, power Appa-
ratus and Systems. PAS-98. 187-196. 
Wall, D. L., G. L. Thompson, and J. E. D. 
Northcote-Green (1979). An optimiza-
tion model for planning radial distri-
bution networks. IEEE Trans, on 
Power Apparatus and Systems, PAS-98. 
1061-1068. 
Zabicki, M. (1982). Combinatorial Optimi-
zation of Electrical Distribution 
Networks. Ph. D. Thesis, Academy of 
Mining and Metallurgy, Krakow, Poland. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
DESIGN AND VERIFICATION OF SEQUENCE 
CONTROL SYSTEMS WITH TIMED 
PETRI NETS 
Y. Nakamura, S. Abe and S. Takeda 
Central Research Laboratory, Mitsubishi Electric Corporation, Amagasaki, 
Hyogo, Japan 
Abstract. An interactive design support system "INDEED" for industrial sequence control 
is developed at an engineering work-station. 
The main features of the system are a 
user-friendly man-machine interface, a timed Petri nets based simulator and an intelli-
gent verifier for the design modification. 
An integrated graphic editor/simulator is 
operated by a menu and a mouse. 
After a controller is designed as a logic diagram with 
the editor, a simulation can be carried out on the same logic diagram and a timing chart 
appears upon the diagram by means of a multi-window system. 
The timed Petri nets based 
simulator converts the logic diagram into a timed Petri net. 
The whole system (the 
controller and the controlled devices) is simulated. The properties of Petri nets, such 
as liveness, conflict and reachability, can be used for analyzing and improving the 
design. 
As a design is often carried out by the modification of an old design, a 
verifier for the design modification is developed. 
The verifier extracts different 
portions of the timed Petri nets of these designs and converts them into automata, and 
the detected difference is shown as state-transition maps. 
Keyword. Sequence control; sequential machine; Petri nets; automata theory; controllers; 
computer-aided design; control system analysis; digital system. 
INTRODUCTION 
With the development of microprocessors, the imple-
mentation of an industrial sequence controller has 
changed from a wired relay logic to a microprocessor 
based programmable digital controller (PC). Due to 
the flexibility of PC, not only small scale systems 
but also large systems such as electric power 
plants have been implemented in PC. 
PC decreases 
the controller's hardware cost. 
However, the 
efficiency of the control logic design has not been 
improved. 
In the logic design of LSI, many CAD systems, such 
as a logic diagram drawer, a logic simulator, a 
test tool and so on, have been developed (Parker, 
1981; McWilliams, 1978; Saito, 1981; Werner, 1983). 
These tools can not be introduced directly in the 
field of the sequence control: 
(1) In a drawer, the shapes and the representing 
functions of symbols are different, 
(2) a simulation or verification method for a 
controller with controlled devices must be 
developed, 
(3) as a test and an adjustment are carried out at 
the power plant's location, a tool for use at 
that location must be developed. 
The design aids for sequence controllers have hard-
ly been considered, except for a description of the 
controller by programming languages (Biel, 1981; 
Takahashi, 1980). The languages are based on those 
developed for general-purpose computers in the 
scientific field 
(e.g. Pascal, PL/1). 
Another 
approach deals with the sequence control system as 
an asynchronous and parallel machine. 
Several 
methods were proposed for modeling and designing 
using Petri nets 
(Peterson, 1977). 
But these 
methods 
(Masuda, 1980; Famchandani, 1974; Azema, 
1976) have not been widely used in practical appli-
cations. 
Designing by these methods not only 
requires a change of design style, but also leaves 
out a logic diagram of a control logic, which is 
necessary either for simulation or for testing and 
modification at the location of the plant. 
There-
fore, many designers use a logic diagram instead of 
these methods, but reliability and productivity do 
not improve. 
A sequence control system consists of two parts: a 
controller and controlled devices. 
In this paper, 
the controller is designed as a logic diagram. But 
the controlled devices are modeled with timed Petri 
nets, because it is easier to represent the devices' 
concurrent behavior by Petri nets than by logic 
diagrams or state machines. 
The designed logic is 
converted into a timed Petri net (TPN), because 
(1) a TPN is easy to combine with other TPNs, thus 
making a simulation of a whole system with 
devices possible, 
(2) a simulation is performed by a simple firing 
rule, and 
(3) analysis methods, such as a reachability tree 
(Peterson, 1977), are applicable. 
In the following sections, an interactive aspect of 
sequence design system "INDEED" and a use of timed 
Petri nets for simulation and verification are 
presented as an example of a design of an electric 
power plant. 
TIMED PETRI NETS 
Petri nets are developed for graph models of infor-
mation flow. 
We use this modeling tool to model 
the state transitions that occur in a sequence 
control system. A transition firing time is intro-
duced that assigns firing times to the transition 
of the Petri nets. 
These Petri nets are called 
"timed Petri nets". 
Figure 1 is a basic building block of a Petri net 
(PN). 
The vertical bar is called "transition", 
while the circles are called "places". The dots on 
the places are called "token". 
A Petri net is the 
interconnection of such modules. 
Thus a Petri net 
is considered as a directed bipartite graph which 
277 

278 
Y. Nakamura, S. Abe and S. Takeda 
input 
places 
output 
places 
Fig. 1, A Petri net with a transition time. 
allows a directed arc from a "place" to a "transi-
tion" or vice versa. 
In our model, the transition 
represents an event taking place in the device and 
in the control logic. 
The event is a change of 
state from one state to 
another caused by input 
signals. 
The place represents a condition of the 
devices and signals. 
To simulate the state change flow in a Petri net, a 
"token" is put on each place. 
A token represents 
that some condition associated with its place is 
satisfied, or that a device holds that state. The 
token distribution is called the "marking". The 
marking can be thought of as a state of the modeled 
system. 
A transition is said to be "firable" or 
"enable" if each of its input places contains at 
least one token. 
The "firing" of transition is 
performed by removing one token from the transi-
tion's input places and adding one token to each of 
its output places. The transition time is added to 
the firing rule. 
If a transition becomes firable, 
the transition must fire after the transition time 
is spent. 
If the number of tokens is any places never exceeds 
one, Petri nets are called "safe nets" or "safe". 
Timed Petri nets with the safe condition are used 
in this work. 
SYSTEM CONFIGURATION OF "INDEED" 
INDEED supports the whole design process of the 
controller which is designed as a logic diagram and 
is implemented in PC. Figure 2 shows a job flow of 
a logic design and the corresponding support tools. 
The software structure of INDEED at a work-station 
is shown in Figure 3. The design policies of INDEED 
are: 
(1) to design a controller using a logic diagram 
in accordance with the current design style; 
(2) to use timed Petri nets as basic tools (timed 
Petri nets are suitable for representing the 
asynchronous and concurrent behavior of the 
devices); 
(3) to support the whole process of the design, 
i.e. drawing a logic diagram, simulation, 
verification and formatting; 
Spec. . 
(4) to provide a user friendly interface with a 
mouse in order to avoid 
complex 
keyboard 
commands. 
The software 
follows. 
tools of INDEED are described as 
DDB (a device database). The components of a power 
plant are modeled in DDB. 
DDB contains TPN repre-
sentation and input/output (I/O) of the devices. 
As an example of the contents of DDB, Figure 4 
shows an entrance valve of a hydro-electric power 
plant. 
SEE (a schematic entry and editing system). A con-
troller is not designed as a 
but as a logic diagram. 
SEE 
design. 
First of all, a use 
of his plant. 
SEE extracts 
signals from DDB. A control lo 
designed on a screen. 
I/O s 
are registered in SEE. If 
signals except these signals 
confirms whether a new signal 
not. 
This avoids the misuse o 
timed Petri net (TPN) 
is used for the logic 
r selects the devices 
their models and I/O 
gic of the devices is 
ignals of the devices 
a designer uses other 
as I/O signals, SEE 
is really required or 
f I/O signals. 
Inputs 
Outputs 
Behavior 
signals 
TPN model 
2lopn 
, 2 Ids 
2 I L , 2 I H 
I f 
the valve is closed (21 L ) 
and 2lopn signal becomes high , 
the valve is opened (21 H) after 
10 minutes. 
I f the valve is opened ( 2 I H ) 
and 21 els signal becomes high , 
the valve is closed ( 2 1 L ) after 
10 minutes 
2,L a 
(b) 
(91 
2 Ids 
O 
H indicates a permission branch, that is 
O 
H is equal to 
0 * = j . 
Fig. 4. An example of the contents of DDB. A part 
(a) is a definition of input/output signals, 
(b) is a description of the valve's behavior 
. in a text, and (c) is a TPN representation 
of a state's transition. 
Logic 
Design 
Verification 
Programming 
Drawing 
Test 
on the spot 
Spec. 
Change 
1, 
(a) 
A job flow 
Spec. 
/ 
1 DDB 
/ 
/ 
J 
L< >gic 
TIPS 
VEM 
Translator 
Formatter 
On line 
Monitor 
( b ) 
Support tools 
drawings 
object code 
Fig. 2. A job flow of the sequence control system 
design and the corresponding support tools. 
Fig. 3. The software structure of INDEED. 

Design and Verification of Sequence Control Systems 
279 
Figure 5 shows the screen of SEE, on which a start-
up sequence logic of the hydro-electric power plant 
is designed. 
The right-lower window of Figure 5 
shows a whole logic in a smaller scale. The editing 
area is indicated by the reversed color in the 
upper left corner of the right-lower window. This 
area is enlarged in the left-upper window. In this 
area, a logic diagram is composed or modified. The 
interactive facilities and features are summarized 
in Table 1. 
Table 1 
The features of SEE 
TIPS (a timed Petri 
(1) 
(2) 
(3) 
(4) 
(5) 
A mouse 
based 
operation 
Menu 
driven 
command 
Wiring 
Database 
Interface 
to other 
systems 
Menu selection, symbol arrange-
ment, deletion, etc. can be done 
without complex keyboard opera-
tions. 
Device insertion, symbol selec-
tion, etc. are indicated on a 
menu by a mouse. 
There are two alternatives. One 
uses a self-searching algorithm, 
when a source and a destination 
points are indicated. The other 
is a rubber band. 
Behavior of devices and their 
input/output signals are easily 
referred from DDB. 
A designed logic is entered in 
DDB as a sub-logic. 
A network list of the logic dia-
gram is available for other 
systems; for example, other 
simulators in a main frame or 
other CAD systems. A printed 
form (hardcopy) of the logic dia-
gram is available. The logic is 
translated into object codes for 
a programmable controller. 
nets based simulator). 
TIPS 
converts the designed control logic into a TPN 
automatically. 
A TPN of a control system is com-
posed by a combination of the TPNs of the logic and 
the devices. 
TIPS makes a TPN work according to 
the firing rule of TPN. 
VEM (a verifier for design modification). In many 
cases of the design of a power plant, the new 
design is performed by the modification of an old 
similar system. VEM verifies the modified function 
of the system. 
TIPS and VEM are the major tools, called from SEE. 
The interactive facilities and the methods used on 
TIPS 
and 
VEM are presented in the following 
sections. 
TIMED PETRI NETS BASED SIMULATOR 
We use timed Petri nets as a simulation tool, 
because timed Petri nets have the following advan-
tages: 
(1) a simulation is performed by the firing rule 
only; 
(2) machines represented as timed Petri nets are 
easy to combine; 
(3) analysis methods such as the liveness check, 
the conflict check, and the reachability tree 
are available. 
The timed Petri nets based simulator (TIPS)converts 
a designed logic into a TPN. 
Then a TPN which 
represents a control system with devices is composed 
by a combination of the TPNs of the logic part and 
the devices. 
This composition is simply the over-
lapping of the output places with the input places 
which have the same names. A conversion example of 
the AND gate into TPN is shown in Figure 6. 
b 
211 
ό— 
741 
O 
(2. OR 
|8. Ψ/Ψ |4. ON 
delay 
\> 
ready 
D-
E) 
dav.no » 
I »output 
■*«'·*■ 
I bypass ban 1« opanad 
I bypass ban Is not opai 
I bypass ban Is olosad 
I bypass ban is not olosad 
I opan oonnand 
I close oonnand 
IF 21open signal Is Inputted, 
21b Mill be opennad after 10 seoond 
o-
D 
El 
edit node 
Fig. 5. The display screen of SEE. 

280 
Y. Nakamura, S. Abe and S. Takeda 
Xi o-
Xn°-Hn 
·· 
-H 
Y 
AND (delay I) 
Y- Χ Ι Λ 
·ΛΧη 
( a ) an AND logic 
( b ) a timed Petri Net 
Fig. 6 A conversion of an AND logic into a TPN. 
The TPN of a whole sequence control system is simu-
lated to examine its behavior. 
To start a simula-
tion on TIPS, an initial marking of the TPN that 
represents a state of the devices and the logic 
gates must be given. 
From any state of the system, 
a simulation can be begun. 
A state change takes 
place by firing the transition associated with that 
state according to the firing rule of TPN. During 
the 
simulation, TIPS 
checks 
whether 
conflicts, 
deadlocks or endless loops occur. A non-determinis-
tic state transition is detected as a conflict. 
TIPS can compose a reachability tree which is used 
to inspect the system. 
Interactive Operations 
A mouse device is used to set or change an initial 
state of flip-flops and input gates. 
To assign an 
initial marking of devices, TIPS lists all states 
of a device (e.g. valve is opened, or closed), then 
a user selects one of them. If the start command is 
entered, a simulation is begun. 
The outputs of a 
logic are sent to the TPN models of the devices. 
If any transitions of the TPN become 
"enable" and 
they have no conflicts, they are fired by TIPS. If 
the devices have feedback inputs to the logic, TIPS 
makes the inputs of the logic change. 
This causes 
a successive change of the state. 
Then the simula-
tion goes on. 
If deadlocks or conflicts are detected 
during a 
simulation, TIPS stops to ask for a user's instruc-
tion, because they indicate design 
errors. 
The 
user can select whether to change a state locally 
and continue, or can ask TIPS to display a timing 
chart in order to inspect the state transition 
process. 
Figure 7 shows a timing chart and a state of a 
logic. 
The state at the time indicated by the 
vertical line on the timing chart is displayed on 
the logic diagram in a background window. 
Once the 
vertical line is moved left or right by the mouse, 
the state at that time is also visible. A graphics 
management program which changes the color of logic 
symbols on the background window and a simulator 
are running simultaneously. 
Any timing of simula-
tion can be viewed on the screen as both a timing 
chart and a state of a logic. 
This makes it easy 
to detect design errors. 
The features of TIPS are summarized as follows. 
(1) A sequence control system with controlled 
devices is simulated. 
- A simulation is performed as feedback loops 
are closed. 
(2) Graphic and interactive facilities. 
- A timing chart and the state of each logic 
symbol are visible at the same time. 
Inter-
active control of simulation is indicated by 
the mouse or commands. 
Fig. 7» The screen of TIPS. A state of the logic is shown as the color of the gates on the 
background; black symbols show " 1 " and white symbols show " 0 " . A timing chart is 
displayed on the diagram. 
On the 
timing chart, the horizontal axis represents 
time, and the names of the signals are tabulated along the vertical axis. 

Design and Verification of Sequence Control Systems 
281 
(3) Event driven simulation. 
- Only the firing rule makes a simulation 
continue. 
(4) Check facilities. 
- Deadlocks, conflicts or endless loops are 
detected during a simulation. 
VERIFICATION FOR DESIGN MODIFICATION 
The design of a large scale sequence control system 
is so often accomplished by the modification of an 
old similar system that a verification method for 
these cases is strongly required. 
We propose a 
verification method for a design modification (VEM) 
that detects different functions between an old 
system and a new one by comparison. If the differ-
ent functions do not affect the remaining portions, 
the change is correct. 
To verify the difference, we use the automaton 
rather than the TPN, because the automaton has more 
deciding capability that the TPN. 
Extraction of Difference 
A sequence control system (SC) is devided into a 
logic part (L) and a device part (D). 
SC = (L , D) 
(1) 
We represent an old system and a modified new one 
as 
and 
SCo = (Lo , Do) 
SCn = (Ln , Dn) 
(2) 
(3) 
respectively. 
The different portion between SCo 
and SCn is expressed as follows: 
SCo' = (Lo - Lo Π Ln , Do - Do Π Dn) 
= (Lo1 , Do') 
(4) 
SCn' = (Ln - Lo Π Ln , Dn - Do Π Dn) 
= (Lnf , DnT) 
(5) 
The different parts of the logic, Lo! and Ln' have 
the same input and output signals. 
The inputs are 
the signals used in a modified portion which come 
from an un-modified portion. 
The outputs are the 
signals used in an un-modified portion. 
Lof and 
Ln1 are converted into TPNs and interconnected TPN 
models of Do1 and Dn', respectively. 
They are 
expressed as TPNo and TPNn. 
Conversion into Automata 
A modified reachability tree algorithm of PN is 
applied to the two TPNs: TPNo and TPNn. The well-
known reachability tree algorithm makes all markings 
of PN as nodes of the tree (Peterson, 1977). But 
our algorithm makes only stable markings of TPN as 
nodes of the tree, so that the tree becomes smaller. 
A stable marking means a state in which no transi-
tion occurs at the state if none of the inputs are 
changed. 
Additionally, 
outputs during the state 
branch from one node to 
the changed inputs and 
transition are added to a 
another node, because the 
difference between the two systems is detected in 
the succession of input signals and related outputs. 
If and only if a new system generates outputs the 
same as an old one for any inputs, both systems are 
equivalent. 
These algorithms are applied to sequence control 
systems. 
Figure 8 shows different portions of the 
logic and devices as an example of a hydro-electric 
power plant. 
These portions are converted into 
TPNs. 
The automata obtained from Figure 8 are 
shown in Figure 9. 
Equalization of State Transitions 
The minimization algorithm 
(Dietmeyer, 1978) is 
applied to the automata. When the state transitions 
of the simplified automata are not the same, an 
equalization algorithm is applied. 
The algorithm 
is described briefly as follows. 
The initial states of both automata are equivalent. 
t? (10) VElow 
—-0— 
VEopn 
VEhigh 
t3 (10) 
TPN 
of Valve 
(VE) 
(a) an old sequence control system 
P (oil pressure supply) 
Fig. 8. 
TPN of VO 
(b) 
a new sequence control system 
An example of different portions between an 
old sequence control system and a new one. 
(a) is an original control logic (Lo) and a 
TPN of the controlled device (Do). 
(b) is 
a modified part of a control logic (Ln) and 
a TPN of the controlled devices (Dn). 

282 
Y. Nakamura, S. Abe and S. Takeda 
Thus the states which are reached from the initial 
states with the same input signals are also consid-
ered equivalent. 
The same number assigns such 
states. 
New automata are obtained, and they have 
the same state transitions for any inputs, but they 
have different outputs. 
Figure 10 is the result of this algorithm 
when 
applied to the automata of Figure 9. The different 
functions, which may have an unexpected effect on a 
portion not modified, are caused by different out-
puts. 
The outputs of the automata are compared to 
find such different functions. When the difference 
is found, the change of inputs and outputs is 
presented as a state-transition map, and inputs are 
sent to TIPS for checking. 
A user can examine 
whether it is an unexpected function or not by 
using a timing chart and a state display, which is 
the same as Figure 7. 
If it is correct, the user 
offers VEM to search for other different functions. 
If not, the user corrects the errors. 
The different functions detected by VEM are shown 
in Figure 10. 
A user will check them and will 
correct some design errors in the logic of a new 
design. Then, VEM is again applied to the correct-
ed logic for confirmation. 
SË? 
So 
Si 
S2 
I i 
Si 
Si 
Si 
TI 
So 
S2 
S2 
12 
So 
So 
So 
T2 
So 
Si 
S2 
\jQpUf 
So 
Si 
S2 
I i 
Ö2-OI 
-
Οι 
Ti 
-
ÖI 
-
12 
-
Ô I - 0 2 
02 
T2 
-
-
-
( I ) next state function 
(2) output function 
(a) An 
old system 
\inpur 
statèx 
So 
Sl 
S2 
I i 
Si 
S I 
S I 
TI 
So 
S2 
S2 
12 
So 
S2 
S2 
Γ2 
So 
Si 
S2 
Sjnput 
srate\ 
So 
Sl 
S2 
II 
02— Ol 
-
Oi 
Ti 
-
Öi 
-
12 
-
Öi 
-
T2 
-
-
-
Fig. 9. 
( I ) next state function 
(2) output function 
(b) Δ 
new system 
Automata obtained by modified reachability 
tree algorithm. 
(a) is associated with 
Fig. 8 (a). 
(b) is associated with Fig. 8 
(b). 
1^=4, I2 = 4Astop-0K, 0j=open, O2 = close 
II, I2/-
i^)l\,l2,l2/-
I1J2/-
Il,l2/-
Fig. 10. Automata with the same state transition. 
"_" indicates difference. "01 ■> 02" means 
that 01 is output, then 02 is output. 
CONCLUSION 
The interactive man-machine interface of INDEED, 
and the use of timed Petri nets for simulation and 
verification have been presented. 
It is easy to 
make these tools work on other computer systems. 
Figure 11 shows a personal computer implementation 
used at the plant site. SEE provides a menu driven 
and user-friendly interface. The graphic interface 
of TIPS makes a check easier. 
TIPS detects design 
errors as conflicts or deadlocks. If a design is 
performed by modification of an old system, VEM is 
applicable. 
We think that these tools increase the reliability, 
the productivity and the efficiency of a design and 
a test. 
In the future, an automatic verification 
method based on general check rules, such as a 
fail-safe rule, or a fault detection method will be 
introduced to INDEE. 
AUTO 
START 
75S 
14L 
|52 
74L 
86 
21L 
ISTfiRT 
21BL 
21BH 
21H 
ΡΪΦ-
lant? 
mmiqi μι*ι«^#^ΐΐ]ο^ν? 
mMsiwuT 
Fig. 11. A personal computer implementation 
of INDEED. 
REFERENCES 
Werner, J., G. Robson, and R. Harris 
(1983). 
Comparing the computer-adied engineering 
sys-
tems in action, VLSI DESIGN. U , 24-35. 
Saito, T., N. Kawato, and S. Uehara (1982). A CAD 
system for logic design based on frames and 
demons, Proc. 18th D. A. Conf.. 451-456. 
McWilliams, T.M. and L.C. Widdoes (1978). 
SCALD: 
Structured computer aided logic design, Proc. 
15th D. A. Conf.. 318-327. 
Parker, A.C., D.P. Siewiorek, and D.E. Thomas 
(1981). 
A design methodology and computer 
aids for digital VLSI system, IBM J. Res. & 
Dev. , 25, 4, 272-280. 
Takahashi, H. 
(1980). 
An automatic-controller 
description language, IEEE Trans. Software 
Engineering, SE. 6« 1, 53-64. 
Biel, G., and A. Ditzinger (1981). 
Computer-aided 
design of microprocessor-based digital control-
lers, Microproc. and Microprog., 7, 5, 326-
333. 
Peterson, J. (1977). Petri nets, Computing Survey, 
9, 3, 223-252. 
Famchandani, C. J. (1974). Analysis of a synchro-
nous concurrent system by timed Petri nets, 
MAC-TR-20, MIT. 
Masuda, R., and K. Hasegawa 
(1980). 
Mark flow 
graph and its application to complex sequential 
control system, Proc. 13th Hawaii Int. Conf^ 
on Sys. Sei. , ^, 194-203. 
Azema, P., R. Valette, and M. Diaz (1976). 
Petri 
nets as a common tool for design verification 
and hardware simulation, Proc. 13th D. A. 
Conf., 109-116. 
Dietmeyer, D. 
(1978). 
Logic design of digital 
systems, Allyn and Bacon Inc., Chap. 12. 
282 

Copyright © IFAC Computer Aided Design in Control 
ELECTRICAL NETWORKS AND ELECTRONICS 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN FOR 
ELECTRICAL SYSTEMS 
M. R. Heller 
Simulation Technology, Control Data GmbH, Berg-am-Laim Str. 47. 
8000 München 80, FRG 
Abstract. Engineering simulation is a design tool for evaluation of 
advanced electrical concepts, control systems and system integration. 
The entire simulation system is designed to be highly interactive and 
flexible, tailored for engineering development. 
Using digital computers requires to survey the numerical techniques in 
continuous simulation together with major software systems which exist. 
This paper shall basically consist of the current state-of-the-art 
giving some prospectives for future development. 
INTRODUCTION 
Electronic design automation minimizes the 
routine, noncreative and time consuming 
tasks necessary to effect a hardware 
design, thus allowing the designers more 
opportunity to exercise the more creative, 
rewarding and valuable aspects of their 
jobs. At the same time, design automation 
provides a data interface between engi-
neering and manufacturing to enable the 
automating of repetitive production 
process. It is a goal to evaluate, design, 
develop, implement, improve and support 
computer-aided design (CAD) and computer-
aided manufacturing (CAM) systems for the 
primary purpose of decreasing electronic 
hardware development, production and 
maintenance costs. 
ELECTRICAL ENGINEERING-CIRCUIT 
DESIGN 
The interpretation of electronic design 
automation is a set of computer appli-
cation tools that are available to engi-
neering and manufacturing to assist in: 
Functional system-level design 
Logic design 
Verifying the functional and/or 
logic design using computer simulation 
Transforming the logic design into 
hardware 
Generating documentation including 
wire lists, logic prints and bill 
of materials 
Producting manufacturing tooling in-
cluding printed circuit board art-
work, integrated circuit masks, 
numerical control tapes (printed 
circuit board drilling, component 
insertion, or wirewrap), and test 
routines for IC's and modules 
All of these functions are drawn together 
into a comprehensive Modular Integrated 
Design Automation System called MIDAS. Ί 
THE MODULAR INTEGRATED DESIGN 
AUTOMATION SYSTEM - MIDAS 
Modular 
MIDAS achieves a level of modularity not 
hereto foreseen in electronic design sys-
tems. First, the system is available in 
compatible modules for logic simulation, 
fault simulation, and layout. Second, user 
defined modules can be developed and added 
quickly through the MIDAS data base, such 
that they are automatically compatible 
with all other system modules. 
Integrated 
MIDAS is an integrated system, not a dis-
jointed set of separate programs. The 
programs are modular and communicate 
through standardized formats. Data gene-
rated by one application program can be 
directly utilized by another program 
through a common data base without the 
need for manual reformatting. 
MIDAS is a trademark for Control Data 
283 

284 
M. R. Heller 
Design 
MIDAS is a design tool for engineers and 
logic designers. It provides work ampli-
fication to the designers during specifi-
cation, implementation, verification and 
continuation phases of the project. Design 
results are automatically transformed from 
engineering to manufacturing via the MIDAS 
data base. 
Automation 
MIDAS is a computerized set of application 
tools that automates much of the routine, 
tedious and detailed work. MIDAS utilizes 
the decision making capability of the user 
while making use of the computer for data 
calculations and information storage to 
automatically do such functions as on-the-
fly rules checking, vendor-specific tool-
ing, inclusion of tooling data in final 
design verification, configuration manage-
ment, and many more. 
System 
MIDAS is a true system with all parts 
interacting in a compatible manner. Since 
all information is contained in a common 
data base and all data transactions with 
this base are controlled by the system, 
all aspects of a project are linked to-
gether. Application programs and project 
data are tied together in a systematic 
manner. 
MIDAS tools have been used during the 
design phase of many digital products, 
including the Control Data supercomputers, 
where prototype checkout time was drama-
tically reduced from several years on a 
similar product to only thr'je months. 
The primary reason for thi » success is 
threefold: 
1. The design was simulated until it was 
95 percent operational. 
2. The tooling of PC boards, wiring and 
LSI circuits was done from the central 
data base already simulated. 
3. The design was resimulated using the 
exact tooling to ensure a working repro-
duction of the original design. 
Consequently, 95 percent of the normally 
expected timing and logic problems were 
eliminated before the hardware was built. 
Management advantages of simulation have also 
been found. Since it is now possible to prove 
designs prior to actually building the hard-
ware products are brought to market quicker 
and with far less risk of schedule slippage. 
Project costs are also more easily controlled 
and reduced since the largest costs occur when 
the equipment is fabricated and put on the test 
floor. Rework cycles are reduced or eliminated. 
Finally, and perhaps most significantly, 
product quality is improved. Product quality is 
greatly enhanced by doing "worst case" timing 
analysis. 
MANAGEMENT 
DESIGNERS 
LAYOUT 
TECHNICIANS 
FABRICATION 
Fig. 1. Modular Integrated Design Automation System 

Design for Electrical Systems 
This assures that, in a production run 
requiring many components, all fabri-
cated items will work with any component 
mix. Marginal timing situations are re-
vealed and corrected before they are 
built into the product. Reproduction of 
field repair costs in this manner is very 
important in reduction of overall product 
costs. 
LOGIC 
SIMULATION 
FAULT 
SIMULATION 
A 
DATA 
IC 
ROUTING 
LAYOUT 
Fig. 2. Computer Automated Design System 
FUNCTIONAL DESIGN 
The design process begins with the func-
tional design of the desired electronic 
system. With MIDAS, this process can 
truly be managed using a "Top Down" 
design methodology where a conceptual 
model is simulated, including clocked 
timing, in its clock diagram form until 
optimized. Each block can then be par-
celed into specific engineering tasks 
whereupon a gate level or "Bottom Up" 
design is merged into the functional 
design. This "Bottom Up" merging is nec-
essary since the actual utilization of 
some selected chip technology has signi-
ficant influence on design tradeoffs. 
As merging takes place, selected block 
models are replaced with gate models and 
the simulation process continues in a 
mixed mode. Gate model performance can be 
correlated with that of the corresponding 
block model, and design discrepancies 
resolved. At this point the completed 
gate design may be set aside, and the 
equivalent block model reused as design 
simulation activities move on to other 
areas of the system. This selective use 
of gate and block models for system level 
simulation continues until the entire 
gate-level system design is completed and 
simulation at the gate level verifies the 
design. With this approach, design errors 
are detected at the earliest possible time, 
eliminating potentially vast amounts of 
re-design downstream. 
Functional and logic design is performed 
by the designer using a design work-
station. MIDAS is compatible with a wide 
variety of workstation configurations, 
including nonintelligent interactive 
terminals, intelligent graphics 
285 

286 
M. R. Heller 
"turn-key" systems, and distributed pro-
cessing systems built around 32-bit 
CPU's. Functions performed at the work-
station will vary with the configuration 
to be used. 
Dynamic digital logic simulation capability 
in MIDAS is provided by the ASSIST simu-
lator. ASSIST is believed to be the most 
comprehensive simulator available for the 
actual design and production of MOS and 
bi-polar digital logic systems due to 
features such as its true mixed functio-
nal and gate level simulation capabili-
ties. ASSIST is an event driven simulator 
with complete capability for very accurate 
(picosecond if desired) timing resolution. 
The rise time and fall time (leading and 
trailing pulse edges) models include fast 
representations, slow representations and 
specified "worst case" ranges on average 
switching times. Thus the accuracy and 
design resolution attainable through the 
matrix of ASSIST1s timing parameters com-
bined with its state analysis provide the 
capability to track technology as the IC 
geometries shrink and the variation in 
electrical parameters widens. ASSIST also 
has the full capabilities for MOS, ECL 
and other semiconductor constructions. 
MOS features include bidirectional signal 
flow on data buses and high impedance 
states on nodes. The high capacity of the 
ASSIST simulator on Control Data CYBER 
mainframes means that lower cost more re-
liable products are produced than with 
lower capacity systems. MIDAS also pro-
vides static logic simulation for selec-
tive path delay analysis. This system, 
called TRACE, operating from the engin-
eering data base, uses Set-and-Hold 
timing models to determine the critical 
timing path effecting any given output 
path(s). These models are a part of the 
component library and contain best, nomi-
nal and worst timing for both the "0" and 
"1" logic states for each component in the 
library. TRACE takes into account not only 
all data paths, but also all clock and 
control paths as well. Selected paths may 
be disabled by the designer to drop from 
consideration any that are not of imme-
diate interest. Flexible reporting allows 
him to analyze overall system performance 
quickly and efficiently, finding and 
correcting timing problems that otherwise 
would take many times longer using conven-
tional logic evaluation methods. 
In addition to logic and timing verifi-
cation, Control Data believes that testa-
bility has to be a design consideration as 
well. Each new design has to be analyzed 
for testability and in MIDAS this is done 
with an Automatic Fault Simulator known 
as AFS. An integral part of the system, 
AFS generates a dictionary of all possible 
faults, eliminating redundancies, and then 
automatically generates test operands 
(vectors) for fault simulation and subse-
quent grading of the fault dictionary for 
coverage. This system provides a complete 
set of test data to the designer, as well 
as neutrally formatted files of test 
operands that will be used later to test 
the facricated IC's, PC boards, etc. 
PHYSICAL DESIGN 
The physical design phase parallels and 
follows the functional (logical) design 
phase, and is accomplished by the MIDAS 
Logic Layout System, LLS. Physical design 
begins with the partitioning of the system 
design into chassis, PC boards and IC's, 
and can easily become an extension of the 
functional partitioning process, since 
the MIDAS data base is common to both the 
logical and physical design phases. 
The physical design phase is accomplished 
by layout technicians through the layout 
workstation, an intelligent terminal with 
high resolution color graphics. 
Partitioning is followed by component/ 
macro placement and pin assignment. 
Accomplished by technicians through the 
layout workstation inter-actively, this 
process is fast and user friendly. Tightly 
coupled to the engineering data base, each 
step is verified for consistency with the 
schematic, technology design rules (DRC), 
and configuration ground rules, ensuring 
that errors will not be introduced into 
the designs and carried forward. Facili-
ties exist to evaluate placements prior to 
routing, not only for route-ability, but 
also for induced timing problems due to 
long and short interconnect paths. The 
latter evaluation is accomplished through 
automatic estimation of path delays by 
LLS, which are fed back to the data base 
for subsequent logic simulation and/or 
path delay analysis. Following component/ 
macro placement, layout technicians gene-
rate the inter-connect routing patterns 
using LLS. A variety of routing software 
packages exist in MIDAS, including back 
panel, PC board and gate array routers. 
Route completion (if any) is performed 
interactively by the technician using the 
color graphics workstation. These routers, 
though functionally different, complete 
the physical design and calculate actual 
path delays, including gate array metali-
zation paths, printed wiring paths on 
boards, and back panel wiring paths. These 
delays automatically replace estimates in 
the data base calculated earlier, and 
provide the facility for performing design 
verification, including all physical 
factors, of IC's, boards, back panels, 
and indeed the entire system design. At 
Control Data, we routinely perform system 
level simulations following completion of 
the physical design steps for system 

Design for Electrical Systems 
287 
complexities up to 300,000 gates. 
a longer life cycle, and at the lowest 
possible cost. 
IC TECHNOLOGY 
Even though MIDAS has been developed to 
support design activities utilizing a 
wide range of IC technologies, recent 
development and enhancement efforts have 
been mainly aimed at ECL and CMOS gate 
arrays. 
Using MIDAS, a standard cell approach is 
provided for array personalization. A 
library containing at least 80 logic macro 
elements has been developed and contains 
both the logical and physical design of 
each, including metalization patterns and 
full electrical characterization. The 
library includes both static and dynamic 
storage elements, as well as tri-state 
bus devices. 
The designer simply references the macros 
by part number and specifies the inter-
connects to build his logic network. The 
layout technician places the macros within 
the coordinate grid of the array, and 
needs only to route the inter-connects, 
since metal paths within each macro are 
pre-defined. Furthermore, pre-characteri-
zation of entire macros gives excellent 
initial simulation results, followed 
later by refinements as placement and 
routing activities make inter-connect 
path delays available to the simulation 
process. 
SUMMARY 
Release of MIDAS presents an integrated 
approach to electronic product design. 
The MIDAS system of programs allows an 
integrated design process coupled with 
manufacturing outputs. From capture of 
design, through partitioning, component 
organization and placement, board design 
and layout simulation to provide correct 
operation, and fault simulation to gene-
rate test vectors, the MIDAS system em-
ploys a common data base providing ex-
tensive configuration management and 
technology control. This allows control 
of the design process, while simultaneous-
ly improving product quality and decreas-
ing the development schedule. After the 
initial release of MIDAS, continual en-
hancements can be expected as advanced 
products become available. Sucessful ad-
vanced products will be sought from high 
quality products developed by software 
companies. 
The use of MIDAS produces lower project 
design costs and a more field-reliable 
product. In turn, this means products 
which generate additional revenue since 
they are brought to market quicker, with 
CADCES-J* 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
DESIGN AND TUNING OF CONTROLLERS IN 
DISTRIBUTED COMPUTER CONTROL 
M. J. Shah 
IBM Corporation, National Accounts Division, Industrial Automation Center, 
2077 Gateway Place, San Jose, CA 95110, 
USA 
INTRODUCTION 
Distributed control has been implemented for some 
time in the process industries such as refineries, 
chemical plants and paper mills. 
Manufacturing 
industries, which employ a large number of dis-
tributed discrete and continuous processes are 
attempting to formulate an architecture for dis-
tributed computer control. In many cases, a com-
puter integrated manufacturing 
(CIM) concept is 
being planned and proposed. The interpretation of 
distributed control is generally dependent on the 
potential supplier or the user of CIM. 
In semicondutor industry, a variety of manufactur-
ing processes are employed, including continuous, 
discrete, batch, and continuous-batch. The fluc-
tuating volume requirements and competitive pres-
sures as 
well as 
rapid change 
in product 
specification and product obsolesence, create man-
ufacturing nightmares in this industry. 
The semiconductor industry is unique because the 
cycle time from research to production is very 
short, giving rise to a need for dramatic increase 
in production volumes as well as large oscil-
lations in these volumes. 
The industry must also 
prepare to switch from one product to another in a 
short time. 
While some of the oscillations are 
manifested by chaotic large scale employment and 
layoffs, some companies have implemented flexible 
robots to resolve at least the bottleneck on the 
assembly lines. 
To the semiconductor industry, then, process con-
trol, or designing controllers for higher quality 
products is relatively new. While in the sixties, 
chip yields of 10% was not an uncommon phenomena, 
the scale of quality control achieved in process 
industry is unheard of in the semiconductor indus-
try. However, the potential payback from better 
quality control and improved prodution is large, 
so that the computer component industry itself is 
now embarking on computer control on a large sca-
le. 
DISTRIBUTED COMPUTER CONTROL 
Because of the variety of processes involved in 
manufacture of semiconductor components, distrib-
uted computer control is ideally suited. In Fig-
ure 1, we show a hierarchical distributed control 
system, which allows a combination of monitoring 
and control of a variety of discrete and contin-
uous processes. The system also interfaces to dif-
ferent vendor instrument controllers, ladder logic 
controllers and DDC Controllers. In addition, the 
system provides a centralized table driven archi-
tecture for application software and the capabili-
ty of a common display base at upper levels in 
hierarchy. The system monitors multiple distrib-
uted units 
(processes 
distributed around the 
plant) with information display in a relatively 
central location. The system also provides a com-
mon link to the management information system, 
with preprocessed data sent to a large data base 
host, for production information purposes. 
The 
details of this system and description of the dis-
tributed software architecture may be found in one 
of our earlier publications (1). 
1 
LOOP 
CNTRL 
1 
! 
LOOP 
CNTRL 
1 
1 , 
LOOP I 
CNTRL 
1 
PLANT 
INSTRUMENTS 
Figure 1. A Multilevel Hierarchical Control System 
CONTROL REQUIREMENTS 
In this paper, we will concentrate on the design 
and tuning of controllers in this hierarchy of 
distributed computer system. We recognize the fact 
that computer control in this industry is still 
relatively primitive, compared to, for example, 
the chemical industry. A major obstacle to proper 
controller design and subsequent tuning in the 
semiconductor industry is that often the process 
is new. 
The process engineer in some cases may 
not be aware of what to measure in order to per-
form proper control. In electrochemical oper-
ations, often one encounters 
key control of 
process done by periodic titration in a laboratory 
and manual recording. The judgement of control 
action is totally left to manual practices. With 
the increase in concern of pollution from chemi-
cals, clearly the manual methods are inadequate by 
today's technology standards. 
Another obstacle in controller design is that once 
a new process is started up, considerable pro-
duction scheduling pressure requires immediate 
production even at lower yield. Little time is 
left to study the process for controller design, 
whenever control is possible. 
Any attempts to 
characterize process dynamics, for example, by 
step responses, meets major resistance from opera-
tional staff. The result is, that a distributed 
Control Computer often ends up performing only the 
monitoring function, collecting a great deal of 
data, often not too meaningful for anything other 
than statistical analysis. 
289 

290 
M.J. Shah 
What is required in this industry then, is a 
scheme which provides a method of on-line control-
ler design and tuning, based on selective data 
gathering from computer monitored units. 
Since 
distributed control also distributes intelligence 
among the various processors, successful on line 
controller design should take full advantage of 
this process. 
The scheme should be employed for 
both continuous and semicontinuous processes in 
the production system. 
We will illustrate this scheme, by examining the 
control of a multizoned oven used in processing 
ceramic substrates. These substrates have prepared 
circuit modules (chips) mounted on them requiring 
careful processing. In this furnace, as shown in 
Figure 2, wet hydrogen is continuously fed from 
the bottom to maintain a reducing atmosphere and 
to provide uniformity of heat by adding forced 
convection to radiant heating from the walls. 
This is a semibatch process, in that a large batch 
of the substrates is loaded and heated in a pre-
programmed stages. The stages consist of heat 
startup to bring the temperature grdully to a 
desired value, followed by holding the temperature 
for several hours and subsequent cool down. Other 
similar processing of substrates employ travelling 
beam furnace with graduated temperature zones. 
The hierarchical control system of Figure 1 was 
employed for this furnace. The area and unit con-
trol functions in the figure are logical and not 
physical, so that they could be combined into a 
single Series/1 processor. In addition, a ladder 
logic based state sequential processor program was 
concurrently operated on the Series/1. This pro-
gram performed digital monitoring and fast action 
processing of critical alarm conditions, much like 
a programmable logic controller hardware. 
The 
heavy loading of the central processor by ladder 
logic software in addition to normal functions on 
the Series/1 made it difficult to execute any 
off-line (non-real time) programs on the Series/1 
processor. 
trical heat input is manipulated by a direct dig-
ital controller. The problem at hand is not only 
to design a feedback controller for each of the 
multiple zones but. also to consider, at the same 
time, the effects of heat input changes in one 
zone on the temperatures in the adjacent zones. 
Furthermore, the effect of disturbance of hydrogen 
flow rates on the temperature must also be compen-
sated. 
In our case, the process was available for a lim-
ited amount of experimentation at startup, when 
open loop dynamic behavior of the individual zone 
temperature feedback loop could be examined. Whi-
le the electrical input was ramped in steps during 
heat start up, responses to temperatures in the 
various parts of the zone were recorded. The same 
experiments were repeated 
(with deliberate step 
disturbances) in the period when the temperature 
reached the ultimate level. 
The experiments were 
repeated for different hydrogen flow rates. Since 
the temperature measurements in the adjacent zones 
were also being collected in the control computer 
data base, together with the zone under study, all 
the required data for dynamic analysis was avail-
able for dynamic analysis of the process. 
P C WORKSTATION 
M.I.S HOST 370 
MULTIUNIT OPERATOR DISPLAY 
AND INFORMATION 
MULTI UNIT LOG INFORMATION 
DATA DISPLAY WITH COLOR GRAPHICS 
UNIT CONTROL AND ALARM PROCESS 
OPERATOR CONTROL FUNCTIONS 
4978 OPER CNTRLR 
AS EITHER A 3270 MODE, OR 
AREA/UNIT CONTRL INFORMTN 
Figure 3. Software Functions in Distributed Control System 
j 
TMP5 1 
li 
lllllllilllillllllllliiilllliiiiil
l 
i ,..-:;-
A -::,-.- ..-
'M 
■■ 
t] ■■ 
ZDNHH" 
CIII mi ISII its m um 
2DN3 
H I HUI« il 
^ f ON 2 
u i n i H i 
ZQNl 
MIS! Süll 
CONTROL j 
COMPUTER 
! 
PCWS 
I «in wii 
In figure 3, we see that the temperature measure-
ments, during the experiment, were available for 
observation not only at the operator station in 
the furnace room but also to an engineer in the 
office via a telecommunications line on an IBM 
personal computer. The personal computer operates 
in this case as an intelligent work station. This 
on line tracking then provides a means to an 
approximate characterization of the dynamic behav-
ior of the process in each zone, by visual obser-
vation of data during a ramp stage. 
It is 
possible to observe up to four plots of different 
measurements concurrently on the same screen. 
This allows visual observation of any effects of 
heat input changes in one zone on the temperatures 
in adjacent zones. 
Figure 2. A sintering fun 
stributed computer 
DISTRIBUTED SOFTWARE FUNCTIONS 
The collected data was also available on the area 
controller Series/1 log files, which could be 
selectively retrieved 
later by the personal com-
puter work station. A time period could be speci-
fied to observe the heat zone dynamic behavior, 
during the various stages of furnace operation. 
In Figure 3, the application software functions of 
the various distributed processors of the control 
system are shown. The area controller system is 
where the time stamped data collection takes 
place. The data consists of both output measure-
ments such as temperatures in feedback loops as 
well as measurements of control variables such as 
the electrical heat input in each of the furnace 
heat zones. In normal operation, the temperature 
setpoint is accurately ramped with the control 
computer in a preprogrammed fashion. The elec-
Thus with a personal computer work station, an 
engineer can observe either offline or online, the 
relationship between the input and output of a 
control system, at any time interval. A first 
approximation of the dynamic relationship between 
the input and output, in this case the electrical 
energy and the temperature, can be ascertained 
from this data. 

Design and Tuning of Controllers 
291 
PROCESS SIMULATION AND CHARACTERIZATION 
Having obtained the crude approximation of the 
process dynamic behavior, the next step is to 
characterize the process in some combination of 
known transient behaviors, so that a controller 
design could be arrived at. 
There are two possible ways of implementing this 
analysis. A simulation program, similar to the 
IBM 1130/1800 digital simulation language (3), was 
available both on the IBM Series/1 and the per-
sonal computer. Depending upon the available pro-
cessor time, the program could be run on the 
Series/1. However, because of the heavy CPU load 
on the Series/1, it was decided to transmit the 
selected data from the area controller Series/1 
computer to the PC work station file for this 
analysis. The simulation program on the PC can 
subsequently operate in a stand alone mode for 
process characterization, and multiple trial and 
error runs may be performed to obtain a good proc-
ess model fit. 
The simulation program on the PC provides a 
library of functions and subroutines that repre-
sent known dynamic systems. It also includes a 
digitized generated function capability. The actu-
al plant measurements represent the generated 
function in simulation. With this facility then, 
the simulation program is employed to make several 
runs to prepare plots for comparison of a process 
dynamic model with the plant data collected during 
a process transient. If one desires, mean square 
error criterion can also be used to arrive at a 
good fit of the dynamic model by adjusting the 
process time constants, till a minimum error cri-
terion can be satisfied. We found in general, 
that a second order model with a transport delay 
gave a reasonable fit to the transients. 
As 
expected, the time constants are not only differ-
ent during the warm up temperature stage and the 
stage when the desired sintering temperature is 
reached (effect of ΊΓ due to radiant heating) but 
also the hydrogen flow has an effect on the time 
constants. During the first pass of controller 
design, the interaction effects on the adjacent 
zones can be ignored. 
simulator with the actual response and the con-
troller is retuned for improving the performance. 
Figure 4 shows a simplified flowchart of the con-
troller design process for an individual zone. 
The same procedure is repeated for each zone and 
also for the two or three stages of furnace opera-
tion. 
The control computer software allows rep 
of new values of controller coefficients 
K Q ) automatically in the DDC table as the 
is moved from one heating stage to anothe: 
thermore, if the hydrogen flow rate is alt 
some specific reason, the controller coe 
sets could also be altered to compensate 
change. 
lacement 
(KR and 
furnace 
. Fur-
ered for 
fficient 
for the 
DERIVE 
CORRECTED 
MODEL 
SEND PI 
SETTINGS 
TO SERIES/l 
j GET DATA 
| 
AFTER 
CLOSING LOOP 
ON LINE 
1 TEMP DATA 
TRANSMIT 
TO PC/WS 
\L· 
FORMAT 
AS AFGEN 
MODEL ON 
SIMULATOR 
OBSERVE ON 
PC W/S 
VISUAL 
DYNM MODEL 
GUESS TIME 
CONSTANTS 
f 
COMPARE WITH 
SIMULATION 
RESPONSE 
Figure 4. Flowchart for controller design in distributed control 
CONTROLLER DESIGN 
FURNACE DISPLAY *1 
ASSOC DISP 
DESCRIPTION 
Once a process model is obtained, the next step is 
the controller design. The personal computer sim-
ulation program allows multiple parameter runs 
with different controller settings of a proposed 
PI controller. To select a good starting design, 
the "CC" program from California Institute of 
Technology (2), can be utilized for stability 
analysis by the standard Root Locus and Frequency 
response methods. 
The personal computer simu-
lation program sets up a file for CC program to 
perform the root locus and Bode Plots. With a 
quick examination of Bode Plots, one arrives at 
initial values of controller parameters, then 
returning back to the PC simulation program, a 
closed loop step response analysis is performed 
using the controller design. 
Tuning is performed 
on the simulator till a satisfactory response is 
obtained. 
Because of set point ramping in the 
heating stage, it is important to ensure quies-
cence of the loop sufficiently ahead of the next 
ramp step time. 
The controller design is then 
implemented on the individual zone temperature 
controller. 
During a set point ramp step, the set of temper-
ature data collected after closed loop control, is 
retransmitted to the PC workstation. 
The closed 
loop simulation response is then compared on the 
KUKN1C01 
FURNC1A01 
1URNHM01 
1URNTC02 
\ UKNÜA02 
FUKNHM02 
1051.3 
129.09 
42.960 
1150.2 
150.12 
30.020 
1050.0 
130.01 
1150.0 
150.02 
DEG C 
H AMPS 
7. SAT. 
DEG C 
M AMPS 
X SAT. 
67 
49 
78 
50 
060 A 
056 A 
560 A 
100 A 
FURNACE ZONE «1 TEMP 
FURNACE Z/l CURRENT 
FURNACE Z/l HUMIDITY 
FURNACE ZONE *2 TEMP 
FURNACE Z/2 CURRENT 
FURNACE Z/2 HUMIDITY 
4:ALT PAGE 
13:CSF PRINT 
Figure 5. Showing a mu1tivariable display from area controller 
Figure 5 shows the on line tabular displays of the 
furnace control system. It provides on line meas-
urement and control information on the operator 
display station, updated every 8 seconds. In addi-
tion the PC workstation also provides trend plots 
of upto four measurements concurrently. 
These 
plots, after implementation of closed loop con-
trol, provide the controller performance informa-
tion at the control station near the furnace. The 
same information is available to the engineer on a 

292 
M.J. Shah 
PC connected remotely to the Series/1 control com-
puter. Figure 6 shows a display on the PC with 
the simulator program for the open loop process 
dynamics characterization for an individual zone. 
Again, as with open loop, the actual measurements 
during closed control, can be represented by the 
generated function capability of the simulation 
system, allowing controller retuning based on the 
comparison between actual and simulated controller 
responses. 
.BLU3 
SIMULATION DF PFEIFFER FURNACE TEMP ZONES 
.9B 
—i 
problem since six parameters have to be fitted to 
the model in each zone. One has to use an engi-
neering judgement rather than sophisticated math-
ematical techniques of control theory to be of any 
acceptable solution on the plant floor. 
Figure 7 shows a block diagram representation of 
closed loop system with interaction from adjacent 
zone as a load disturbance. The PC simulator pro-
vides simultaneous closed loop response of all the 
furnace zones. Starting with the values of the PI 
controller settings designed for individual zones, 
fine tuning can be done based on preliminary esti-
mates of interaction Kpj: and TJ; from process 
characterization. The ability of looking at mul-
tiple plots concurrently on the PC as well as the 
facility to replot 
with different variables, 
quickly allows one to zero in on a satisfactory 
controller parameters. 
With sufficient practice and training of the plant 
engineers, it becomes fairly routine to implement 
this "practical" adaptive control system, with 
which the plant personnel feel comfortable. 
¥i 
CONTROLLER 
Figure 6. Comparison of actual and model temperature in Furnace 
Temp2 
INTERACTION BETWEEN ADJACENT ZONES 
This is perhaps the most difficult part of the 
controller tuning, especially, since a great deal 
of open loop data is not available prior to a pro-
cess going into production. 
The only recourse is 
to perform the final tuning, on line, using some 
trial and error adjustments of the controller 
coefficients. Also, in general, set point ramping 
may be performed concurrently in all zones, thus 
making even more difficult, experimental observa-
tion of the effect of step changes in one zone 
heat on the adjacent zone temperatures. 
Since the simulator on the PC provides simultane-
ous solution of multiple differential equations, 
the process dynamic behavior for all the zones can 
be simulated in one model pass. 
The effect of 
interaction from adjacent zones 
can thus be 
approximated using interaction terms first by add-
ing a seperate dynamic term including a first 
order time constant and gain. Since the simulator 
permits multiple generated functions, all the zone 
temperature on line data (with and without con-
trol) can be represented in comparing the open 
loop and closed loop behavior of the entire fur-
nace. The open loop data can be used for process 
characterization and the closed loop data are use-
ful for controller tuning. 
The relationship between the temperature in the 
center of each zone and the heat inputs can be 
given by 
K 
K e"STdi 
i 
i / r~~ -L-iWr-r 
4.1 ^ 
J ( S T . . + 1 ) 
(sTli+l)(sT2i+l) 
"I J 
with the assumption that the interaction is only 
in one direction, namely the direction of the 
hydrogen flow. It is obvious that even the proc-
ess characterization can become a fairly complex 
CONTROLLER 
Tempi 
Figure 7. Closed loop block diagram with interz< 
TIMING CONSIDERATIONS 
In real time computer control applications, one 
always wonders whether any sophisticated control 
calculations can be performed in computing time 
considerably shorter than the process time con-
stants. Though this problem is somewhat simpli-
fied in distributed control by delegating workload 
to the intelligent work stations, the computing 
power of the microprocessors on the PC may still 
raise the same question. 
We found that for both the open loop and closed 
loop simulation, the PC/XT performed the simu-
lation in about 20 seconds whereas the PC/AT 
reduced that time to about six seconds. Several 
runs could thus be made with the simulator and a 
satisfactory retuning of parameters could be per-
formed in a matter of about two minutes, once an 
engineer gains familiarity with the program. 
The time constants for the process turn out to be 
of the order of several seconds to minutes, so 
that the simulation speed is more than adequate. 
The control computer has very little load in the 
controller design calculation, since it only tran-
smits measurement data to the PC in short bursts. 
For on line controller design and tuning the dis-
tributed computer control system thus provides an 
advantage over the system where the simulation is 
performed on a single control computer. 

Design for Electrical Systems 
SUMMARY AND CONCLUSIONS 
We have presented in this paper a method of con-
troller design of an industrial process unit, whe-
re 
distributed 
monitoring 
and 
control 
is 
implemented using a variety of control computer 
processors. A simple method of model building and 
model fitting for process characterization is pro-
vided. The method uses an on-line software control 
simulator on a PC workstation for the controller 
design. The same simulator program can be used 
for further on-line tuning of controllers during 
the operation of the plant. This yields a practi-
cal, easy to implement, adaptive controller in the 
distributed control environment. 
REFERENCES 
1. Shah M.J. and Brecher V. H./'Distributed Con-
trol in Automation of Semiconductor Manufac-
ture", paper presented at the International 
Industrial Controls Conference, Philadelphia, 
September, 1984. 
2. Thompson P., "A Computer Aided Control Sysytem 
Design", Prentice Hall Inc., 1985. 
3. SHAH M., "Engineering Simulation Using the IBM 
Personal Computer", Prentice Hall, 1985. 
293 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
PROCESS CONTROL SYSTEMS 1 
DESIGN OF A CONTROLLER IN AN 
UNDERGROUND GASIFICATION PLANT 
R. Gorez 
Department of Mechanical Engineering, 
University of Louvain, Bâtiment 
Stevin, 
Place du Levant 2, B-1348 Louvain-la-Neuve, 
Belgium 
Abstract. 
A new underground gasification plant is described and a low order dynamic mo-
del of the thermal state in the exhaust well is set up. The process being highly nonlinear, 
the design of the control system, including selection of output variables, sensors loca-
tions and control laws and parameters, is achieved via computer simulation and trial and 
error techniques. The computer program for this model will also be implemented in the pro-
cess computer on-site and it is shown how this program can be used by the process opera-
tors, for training or as an aid for controlling the process. 
Keywords. 
Computer aided design ; control engineering ; computer applications ; energy 
control ; heat systems ; modelling ; non linear systems. 
INTRODUCTION 
Underground gasification experiments are conducted 
in Belgium right now. Hot gas is produced by burning 
coal layers approximately 1000 m beneath the ground 
level. Gas is collected through an exhaust well which 
consists of two concentric pipes, as sketched in Fig. 
1. The gas flows upwards through the inner pipe and 
cooling water is injected through the annular space 
between the two pipes, in view of keeping the wall 
temperatures within some safety limits. 
In this kind of well, the cooling water must trans-
form into superheated vapor before reaching the bot-
tom of the well (if liquid water came to the bottom 
of the well, the gas generator might be flooded ; it 
would disturb the gas production, and possibly, this 
one should be stopped during the time which is need-
ed to exhaust water from the well through an auxili-
ary pipe acting as an air-lift system). Superheated 
vapor will be carried away by the gas stream flowing 
upwards through the inner pipe. Clearly, the mixing 
of gas and superheated vapor in the bottom of the 
well induces a positive feedback on the thermal sta-
te of fluids and walls in this part of the well, re-
sulting in a thermal process which is not self-regu-
latory. Then, this process must be controlled by the 
process operators or by automatic controllers mani-
pulating the cooling water flow rate. 
Gasification plants are already in operation else-
where in the world, especially in U.S.A. In all re-
ported experiments, the depth of the well is much 
smaller than in this case ; then, the process can be 
controlled without any special difficulties. In the 
case which is considered here, there will be a long 
transportation time delay between the operation of 
the control valve which is located at the top of the 
well, and the subsequent variations of the flow rate 
of coolant in the bottom of the well. This time de-
lay is due to the film type flow of the cooling wa-
ter along the walls in the upper part of the well ; 
it is roughly equal to the time interval inside which 
the volume of superheated vapor might collapse in 
case of large disturbances at high production rates. 
Then, the control of the process will be very tight, 
and a model of the thermal state dynamics in the well 
is needed in order to determine safe operating con-
ditions, select locations of thermocouples for sen-
sing temperatures inside the well, and investigate 
control strategies. 
As the process to be controlled is highly non line-
ar, all those objectives have been achieved by tri-
al and error techniques, using a computer for simu-
lation of the process with or without controller. 
Simulation of a complete distributed parameter mo-
del would require excessive computer times ; thanks 
to some simplifying assumptions based on the analy-
sis of previous simulation results, it has been 
possible to set up a low order lumped parameter 
model, which consists of three ordinary differenti-
al equations only, but still holds the main non li-
near features of the process behavior. This model 
has been simulated on a minicomputer and is used 
for investigations on the process dynamics, selec-
tion of sensors locations and experiments with va-
rious automatic controllers or manual control stra-
tegies. Besides, this model has been translated in-
to a FORTRAN program which will be implemented in 
the process computer on-site ; this model will be 
the core of a non linear observer which can be used 
by the plant operators for reconstructing the glo-
bal thermal state of the process and monitoring so-
me variables which cannot be measured, such as the 
position of the transition point between the lower 
part of the well where vapor is superheated and the 
upper part where water is vaporizing. Moreover, this 
model can be used by operators for training and for 
improving their control strategies or their know-
ledge of the process dynamics by investigating the 
effects of various simulated disturbances ; it can 
be used as well as an aid for controlling the pro-
cess, the operators being able to predict the res-
ponses of the process to the manipulation of the 
control variable. 
The following section of the paper contains a short 
description of the plant and introduces its mathe-
matical model. Another section is dedicated to the 
design of manual control strategies or automatic 
controllers. The last section outlines other uses 
of the model on-site and/or on-line. 
PLANT DESCRIPTION AND MODELLING 
Figure 1 shows a sketch of the gas exhaust well. 
Basically, the well consists of two concentric pi-
pes, called tubing and casing, the diameters of 
which are 5 and 7 inches respectively. Cooling wa-
ter is injected through the annular space between 
295 

296 
R. Gorez 
the two pipes and transforms into superheated vapor 
in the lower part of the well. Vapor is carried away 
by the upstream flow of gas resulting from the com-
bustion of deep coal layers located around the well; 
the mixture of gas and superheated vapor flows upwards 
through the tubing. 
The depth of the well is 865 m. Then, from a thermal 
point of view, the well can be considered as a heat 
exchanger of infinite length. Heat and mass trans-
fers have been described by Gorez and Duqué (1983), 
using a distributed parameter model taking into ac-
count the axial and radial distributions of the sta-
te variables : temperatures of the pipe walls, tem-
peratures, pressures and compositions of the fluids. 
They have found that the simulation of this model 
would require a big computer facility and excessive 
computer times. Then, low order lumped parameter 
models consisting of a few ordinary differential e-
quations have been set up by Gorez and Paillet (1983) 
and by Gorez and Passau (1984), thanks to some sim-
plifying assumptions based on the analysis of simu-
lation results from the complete distributed para-
meter model : 
- the dynamics of the heat exchanger depends only up-
on the temperatures deviations in the superheated 
zone (lower part of the well, where vapor is super-
heated) ; elsewhere, the temperatures of walls and 
water can be considered as equal to the water sa-
turation temperature corresponding to the pressu-
re in the well ; 
- the pressure in the well is constant (pressure los-
ses in the upstream flow are very low, except at 
the highest production rates ; pressure losses in 
the downstream flow are compensated by gravity ef-
fects) ; 
- the heat exchanges can be calculated from the ave-
rage temperatures of walls and fluids in the super-
heated zone. 
between the superheated zone and the upper part of 
the well. The meaning of the other symbols is as 
follows : 
c 
specific heat (per mass unit) 
c1 
specific heat (per length unit) 
F 
mass flow 
g> r 
gravity, vaporization heat 
G, H 
enthalpy 
K 
heat transfer coefficient (per length 
unit) 
L 
length of the superheated zone 
L 
total length of the well 
T 
temperature 
T 
temperature in the upper part of the 
well (liquid-vapor equilibrium at given 
pressure) 
Θ = T-T 
relative temperature 
λ = log L transformed length 
Φ 
heat flux. 
As for the temperature sensed in the superheated zo-
ne of the annulus, it can be represented by the fol-
lowing relationship : 
θ = Θ (1-Ls/L) if L > L , 
s 
vo 
s 
0 
if L S L , 
where L is the distance between the sensor locati-
s 
on and the bottom of the tubing. 
This low order model has been validated by comparing 
simulation results obtained when using this model 
and the complete distributed parameter model in si-
milar conditions. For instance, Fig. 2 shows the 
time responses of the superheated zone length L and 
the sensed temperature Θ, for a step change of + 
200° of the gas temperature. 
These assumptions result in the following equations 
expressing heat and mass balances in the well : 
1) in the mixing zone (bottom of the well) : 
F 
= F + F 
m 
g 
w 
G 
= F c Θ 
VO 
W V VO 
, F c = F c +F c 
' 
m m 
g g w w 
G 
= G 
+ H , 
mo 
vo 
g 
, 
H = F c Θ 
g 
g g g 
2) in the superheated zone 
Ht =Lc;et 
H = Lc'e 
c 
c e 
Φ „ = LK 
(β -Θ J, Φ 
= LK (θ -Θ ), Φ =LK 9c, 
mt 
mt m t 
vc 
vc v c 
er 
er 
2G -F gL+LK Θ 
mo nr 
mt 
m " 2F c +LK _ 
m m 
mt 
LK Θ +LK Θ +F gL 
A 
= 
Vt t 
VC C 
W ° 
v 
2F c +LK +LK 
w v 
tv 
vc 
θ +Θ T 
mo raL 
vo 
2 
L = exp(X) , 
H 
= 
Φ 
- Φ 
c 
vc 
cr 
Η = - φ 
+ H - F gL - F r 
t 
vc 
g 
g t 
w 
' 
H λ = - Φ 
+ H - F gL - F (r+gL) + G 
t 
mt 
g 
gf' t 
wv 
6 y 
vo ' 
where subscripts t, c, r, g, w, v, m denote tubing, 
casing, surrounding rocks, gas, water, vapor (super-
heated), mixture of gas and vapor, respectively ; 
if two subscripts are used, they refer to exchanges 
between the two corresponding entities, except if 
the second subscript is o or L, denoting respective-
ly the bottom of the well or the transition point 
DESIGN OF A CONTROLLER 
As it can be seen from Fig. 2, the process is not 
self-regulatory. Then, the process must be control-
led in order to keep the superheated zone length L 
and the casing temperature in the bottom of the 
well within given safety limits : if L is too low, 
there is a risk of flooding the gas generator in 
case where the superheated zone would collapse ; on 
the opposite, excessive pipes temperatures would re-
sult in dangerous thermal expansions of the pipes, 
with risks of damages to the cement coat around the 
casing, to the fixing device of the tubing or to the 
pipes themselves. 
Either the flow rate of the gas-vapor mixture or the 
cooling water flow rate could be used for control-
ling the process. Manipulating the first variable 
would yield better performances, as a result of 
shorter response times, but it would disturb the o-
peration of the gas generator. Therefore, manipula-
ting the flow rate of the gas vapor mixture must be 
restricted to cases of emergency, and in normal o-
peration, control must be achieved by manipulating 
the cooling water flow rate. However, this control 
system must be checked carefully, because of the 
long time delay inside the control loop. This time 
delay is due to the film type flow of the cooling 
water along the walls in the upper part of the well, 
which results in a velocity : 
V = 1.64 + 1.44 Log F ; 
w 
for a well depth of 765 m and water flow rates from 
0.2 to 1.2 kg/s, the resulting time-delay ranges 
from 20 to 5 min. 
Besides, the following questions must be answered : 

Design of a Controller 
297 
- locations of temperature sensors 
- choice of manual or automatic control 
- in case of manual control, selection of appropri-
ate sampling rate and control strategy 
- in case of automatic control, calculations of the 
control law and parameters. 
The process being highly nonlinear, answers to tho-
se questions have been obtained by trial and error 
techniques, involving many experiments on the model 
of the process which is presented in the previous 
section and has been simulated on a digital computer. 
In those experiments, the time history of the super-
heated-zone length and the temperatures at the pos-
sible sensors locations or at other critical points 
were recorded. The experiments included : 
- determination of responses of the process itself 
to step variations in the cooling water flow rate, 
the gas flow rate or the gas temperature ; 
- investigation of the behavior of the process when 
it is controlled by various control laws or stra-
tegies and is disturbed by step or random varia-
tions of the gas temperature. 
Analysis of the simulation results lead to the fol-
lowing decisions : 
- 6 sensors should be located at distances of 10 m 
from each other, the first one being located at 
15 m from the tubing end ; 
- the first sensor should be used for control and 
the reference value of the temperature to be regu-
lated should be the same at all production rates, 
resulting in longer superheated zone lenghts for 
higher production rates ; 
- in case of manual control, if the process is dis-
turbed, the sensors should be sampled at least 
each 5 minutes, and a control strategy very simi-
lar to a PI control law should be used : 
AF = K(T -T ) + Κ'ΔΤ 
w 
s r 
s 
where AF is the flow rate variation which should 
w 
be made by the operator, T and T are respective-
ly the reference and actual values of the sensor 
temperature and ΔΤ is the variation of T from 
the previous to the current sampling time (Fig. 3) 
- in case of automatic control, the best results 
are obtained when using a conventional PI control-
ler (Fig. 4) ; other control laws have been tried: 
deadbeat control, weighted minimum variance con-
trol with on-line parameter identification . 
The last one may give good results (Fig. 5) but 
the sampling period must be carefully selected 
and cautions must be taken in view of the conver-
gence of the identification algorithm. 
Therefore, by means of computer simulation analysis, 
it has been possible to design a satisfactory con-
trol system. 
OTHER USES OF THE MODEL. CONCLUSIONS 
The FORTRAN program corresponding to the model pre-
sented in this paper can also be implemented in the 
process computer on-site, requiring a core memory 
size of 6.5 Kbytes. The process operator will be al-
lowed to initialize the model for selected operating 
conditions, to introduce step variations of the cool-
ing water flow rate, the gas flow rate or the gas 
temperature as well as random variations of the gas 
temperature, and to track or record the time history 
of the superheated zone length and the temperature 
at the sensor location. A run corresponding to a 
real time interval of 1 hour would take only a few 
seconds. Moreover, the program can be interrupted 
at prespecified time intervals, allowing the ope-
rators to modify water and/or gas flow rates during 
interruptions. 
Then, this program can be used off-line by the pro-
cess operators for training and for improvements of 
their control strategy or their knowledge of the 
process dynamics. It can also be used on-line as 
an aid for controlling the process, the operators 
being able to predict in a few seconds the effects 
of selected changes in the control variable or to 
observe via the model some variables which cannot 
be measured, such as the superheated zone length. 
This study confirms that for highly non linear pro-
cesses, appropriate models are valuable tools for 
analysis and design of a satisfactory control sys-
tem. In the case considered here, models have been 
used off-line for design of the control system, in-
cluding selection of sensors locations, and refe-
rence values of the output variables as well as se-
lection of appropriate control laws. It is also in-
tended to use the same models on-line as an aid for 
controlling the process. 
REFERENCES 
Gorez, R. and C. Duqué (1983). Modelling and Control 
of an Underground Gasification Well. Proc. IMACS 
Symposium on Simulation in Engineering Sciences, 
Nantes, pp. 179-184. 
Gorez, R. and D. Paillet (1983). Simulation of the 
thermal state of an underground gasification 
well. Proc. First European Simulation Conferen-
ce , Aachen, pp. 460-465. 
Gorez, R. and V. Passau (1984). Models of the ther-
mal state in an underground gasification well. 
Tenth Annual Underground Coal Gasification 
Symposium, Williamsburg. 

298 
R. Gorez 
Cooling water 
50 
Water + steam 
Ls(m) 
\ , 1 
V V 
/ 
/ 
/ 
/ 
1 
\ 
\ v| 
S 7 
/ 
/ 
,Λ 
/ 
\ 
\ 
\ 
0 
1 
2h 
Fig. 3. Transient response to +50° steps in the gas 
temperature ; PI type control strategy 
50 
►Hot gas-
Fig. 
1. Sketch of an exhaust well 
LsO Tl) 
Vi'KIr 
V 
900 
8 5 0 
8 0 0 
h-750 
h 700 
0 
2 
4h 
Fig. 4. System controlled by a PI controller 
Response to randoms variations of the gas 
temperature. 
50 
650 
1000 
Fig. 2. Transient responses at a +200° step in 
the gas temperature 
1 : distributed parameter model 
2 : lumped parameter model 
solid lines : superheated zone length 
dash lines : temperature at the sensor 
location 
Ls(m) 
A 
ιΛ 
\l 
\ ^ u 
/Mfl. A 
\f 
μ/\ Al 
V 
λ^ν- ,
A
J 
\y--*\, ί\Λ 
V /J n 
j 
0 
5 
10h 
Fig. 5 .System with weighted minimum variance adap-
tive controller. 
298 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
SEQUENTIAL DESIGN OF DECENTRALIZED 
CONTROLLERS WITH IDENTIFICATION AND 
SELFTUNING CONTROL METHODS 
R. Isermann and H. Hensel 
Institut für Regelungstechnik, 
Technische Hochschule Darmstadt, Schlossgraben 1, 
D-6100 Darmstadt, FRG 
Abstract. One of the problems with the design of decentralized controllers for complex processes 
is that the interactions of the process parts are not known and therefore design methods for 
centralized multivariable controllers cannot be used. By a sequential (successive) procedure for 
process identification and computer aided controller design it is possible to design decentralized 
controllers where the interactions are automatically taken into account. It is shown by simulations 
that this approach converges rapidly. The sequential design can be applied as well for multi-
variable, as for cascaded and hierarchical control systems. Furtheron the sequential procedure 
is especially attractive if selftuning controllers are used. 
1. INTRODUCTION 
During the last decade several methods and software 
packages were developed for 
- on-line identification with process computers 
- computer aided design of control algorithms with 
process computers 
- self-tuning control algorithms for process and 
micro computers. 
They were used in the meantime for many pilot and 
real industrial processes and have proven to be use-
ful, especially if there were little knowledge on 
the internal behaviour, difficult dynamical behaviour 
and long settling times, see e.g. Isermann (1984a). 
However, the application was mostly limited to 
single-input single-output control, despite the 
methods were also developed for multivariable pro-
cesses. For these multivariable processes generally 
"central" models are used, consisting of the com-
plete information(structure and parameters) on the 
transfer behaviour for the inputs and outputs in-
cluding all important cross interactions. These 
identified models then led in a straightforward 
way to "centralized" controllers, e.g. state con-
trollers and parameter optimized main and coupling 
controllers, with a unique sampling time. Some of 
the difficulties with this "central" multi-input 
multi-output approach are: 
- it is frequently not possible to operate indus-
trial multivariable processes for longer time 
periods in open loop 
- it is difficult to find suitable model structures 
- it is difficult to design fixed multivariable 
controllers for all operation modes (manual or 
closed loop operation for each control variable 
separately) 
- the "central" design does not agree with the 
sequential closing of loops during commissioning 
- it is frequently not possible to use a unique 
sampling time even for the main loops 
- complex multivariable control algorithms are 
mostly not accepted in the process industries 
- decentralized micro computers were developed, 
which replaced the centralized process computers 
and have no access to the inputs and outputs of 
neighboured control loops. 
These difficulties and developments forced the 
design of "decentralized" controllers where it is 
assumed that there is only knowledge on the directly 
connected process parts, which includes that the 
interactions between the process parts are unknown. 
If then models of the process parts are known the 
influence of the interactions can for example 
tried to be taken into account by properly extended 
observers and state controllers, Kuhn (1983). 
In the following a special way of identification 
and decentralized controller design is considered 
where both, the models of the process parts and 
the interactions are assumed to be unknown. 
2. SEQUENTIAL IDENTIFICATION AND 
CONTROLLER DESIGN 
2.1 Multivariable control systems 
As first example two process 
parts 
P and P are 
considered with one manipulated variable and one 
control variable each, ui and y^ respectively U2 
and y2r Fig.l. It is assumed that the transfer 
behaviour of the process parts y1(z)=Gn(z) u^ (z) 
and y2(z)=G22(z) u 9 ^ z ^ a n d t n e interactions bet-
ween the process parts can be described by linear 
difference equations of finite order. The task now 
consists in designing two decentralized digital 
controllers (regulators) R^ and R2 which are only 
connected with their process parts P^ and P2»Fig.2. 
For the microcomputer controllers it is further 
assumed that they may carry software packages for 
process identification and controller design or 
that they may be connected with a central main 
station or a commissioning computer with implemen-
ted required software packages. These software 
packages may be developed for discrete-time para-
metric process models and consist for example of: 
- process identification: single-input single-
output parameter estimation methods like least 
squares (LS), instrumental variables (IV), corre-
lation and least squares (COR-LS) or their recur-
sive versions; order and dead time search pro-
cedures; signal generators (PRBS) and signal 
filters (e.g. drift elemination); model verifi-
cation. 
- controller design: single-input single-output 
controllers like e.g. PID-controllers (para-
meter optimization), state-controllers with 
observers (matrix Riccati design), minimum 
variance controllers (direct calculations). 
Corresponding methods and software-packages are 
described elsewhere, e.g. Isermann (1981), (1984a,b) 
The procedure then is as follows, compare Fig.3: 
(1) Overall behaviour Gj (z) = y1(z)/uj(z) is identi-
299 

300 
R. Isermann and H. Hensel 
fied and controller RJ(z) is designed. 
(The interactions between P. and P2, relevant 
for Rj are automatically taken into account). 
R| is then connected to process part P.. 
(2) Overall behaviour GMz) = y2(z)/u2(z) is 
identified and controller R^(z) is designed. 
(The interactions between P2 and P1, now with 
connected controller RJ, are taken into 
account). 
R* is then connected to process part P2. 
(3) Overall behaviour G2(z) = y1(z)/u1(z) is identi-
fied with disconnected controller R< and con-
troller R?(z) is redesigned. 
(The interactions between P. and P2/ now with 
connected controller R*, are taken into 
account). 
9 
Rf" is then connected to process part P^ . 
2 
(4) As (2) to redesign controller R . 
After 6 identification and redesign steps the con-
troller parameters converge to nearly constant 
values. The signals for step (3) and (6) show only 
minor differences. Hence, a fast convergence can 
be observed. 
This also becomes obvious, if after step (1) R is 
disconnected and R~ is designed in the same way. 
After closing both loops a weakly damped behaviour 
results. Hence step (2) in the procedure described 
above is already a good improvement. 
If all signals are available in one (central) com-
puter, the model of the two-variable process is 
known after step 2 and the ongoing sequential 
design can be performed by simulations of the 
system only. 
.-, 
The sequential design can be extended to more than 
two process parts. It is then proposed to begin 
with process parts with fast dynamics and with 
little dependence on the remaining system and to 
proceed to process parts with slow dynamics and 
strong interactions. 
This procedure continues until both controllers 
RÏ and R^ , i=l, 2, . . . , j=l, 2, . . . , converge to 
fixed controllers R« and R2. Before an example is 
shown, some remarks are given: 
- The sequential approach is similar to iterative 
tuning rules for multivariable processes, but 
now based on actual process models and computer 
aided design. 
- Only single-input single-output (SISO) methods 
are used, in order to keep the approach simple 
and to end up in decentralized SlSO-controllers. 
- The (automatic) order and dead time search pro-
cedures within the process identification pack-
ages allow models with changing orders/dead times, 
especially during the first steps. 
- Necessary conditions for the sequential procedure 
are that the corresponding systems are stable and 
identifiable. The last condition means that the 
systems must be controllable and observable with 
regard to the very input and output. 
- The sampling times may be arbitrarily different 
for the decentralized controllers, which is a 
significant advantage. 
2.2 Cascaded control systems 
The sequential procedure is straight forwardly 
applied to cascaded control systems, compare Fig.6. 
One begins with the identification and controller 
design of the inner loop, connects the (slave) 
controller R« and repeats the same for the outer 
loop. If the inner loop is much faster than the 
outer one a redesign of its controller in general 
is unnecessary. Otherwise redesign procedures as 
for multivariable systems may follow. 
2.3 Feedforward control systems 
Usually parameter optimized feedforward and feed-
back controllers are designed separately. This 
may lead to an overcompensation after a change of 
a disturbance variable. Therefore it may be better 
to first design the feedback controller and then 
to design the feedforward controller for the 
closed loop. This can be performed by sequential 
identification and controller design steps. 
2.4 Hierarchical control systems 
Example 1. Sequential identification and controller 
design for a two-input two-output system. 
Fig. 4 shows a block diagram of a two-variable 
process with p-canonical structure and strong 
interactions. This process was simulated on an 
analog computer and connected to a process com-
puter. For the identification program package OLID 
was used, for the controller design the package 
CADCA. PID controllers were used for this example. 
Their parameters result from minimization of the 
quadratic loss function 
n 
9 
2 2 
I = £ y (k) + rK Au (k). 
k=0 
P 
In Fig.5 the control behaviour is shown for some 
design steps. After design step (1) for R; a good 
behaviour for u 1, y. results. During step (2) the 
system for controller R2 is identified, with con-
nected controller RJ. The response to a setpoint 
change of controller R* shows a satisfactory 
behaviour. However, setpoint change of controller 
RJ results in too strong oszillations. A redesigned 
R2 in step (3) gives much better damped behaviour. 
The sequential procedure described for multi-
variable control systems moved in a horizontal way, 
the procedure for cascaded control systems in a 
vertical way. In vertical direction more con-
trollers may be added, see Fig.6, e.g. for coordi-
nation or for reaching a certain block behaviour. 
The sequential identification and controller 
design can then be applied in vertical direction, 
making use of model reduction of the underlying 
systems through identification methods. 
In general it is recommended to proceed sequentially 
as follows : 
- from lower levels to higher levels 
- from fast dynamics to slow dynamics 
- from weak interactions to strong interactions. 
Some properties of the sequential procedure are : 
- It is rather adaptable to the systems structure. 
- With increasing design progress more and more 
process parts and their interactions are taken 
into account. 
- Repeated identification of system parts includes 
a progressive model reduction (order reduction). 
- Sampling times may be very different. 

Sequential Design of Decentralized Controllers 
301 
- Fast convergence can usually be expected, because 
of the intermediate identification phases. 
- It seems to be difficult to proof the stability 
of the resulting system. However, the sequential 
design should be more reliable than other design 
procedures for decentralized controllers which 
do not get information on the interactions. 
The described procedure was applied for the control 
system design of a Bens on-boiler 
steam-turbine 
unit, 
which was simulated on an analog computer (30 inte-
grators) , Bayer (1984). The sequential procedure 
was especially suited to study various control 
system structures for steam temperature, steam 
pressure and mass balance (evaporator end point) 
control including several feedforward controllers. 
One starts with the design of the less coupled 
cascaded steam temperature control systems of the 
3 superheaters and continues with the design of 
the turbine power control. Finally the design of 
the steam pressure controller follows. The turbine 
power control has a strong influence on the pres-
sure control. However, the turbine power control 
is much faster than the pressure control, such 
that the interactions to the pressure loop can be 
neglected. Hence, two sequential steps are suffi-
cient in this case. 
3. SEQUENTIAL SELFTUNING CONTROL 
The sequential identification and controller design 
may need a considerable amount of time. In Isermann 
(1984b) it was shown that under noisy conditions 
about 50% of time can be saved by using selftuning 
controllers. These controllers result, if recursive 
parameter estimation methods and controller design 
methods are combined properly, see Fig.7. Parameter 
estimates §_(k) of the process are obtained after 
each sampling interval which are used to design the 
controller parameters 3^(k) . Following procedure has 
demonstrated to be useful in the first step: 
a) short pre-identificat%on 
in open loop by intro-
ducing a perturbation signal to obtain a rough 
process model and therefore good starting con-
ditions for b) 
b) selftuning 
control 
until reaching a sufficient 
control performance. The controller parameters 
are then fixed and the control continues with a 
fixed controller. 
The automatic design of two decentralized con-
trollers for two process 
parts 
P. and P corres-
ponds to the sequential approach described in 
section 2.1; compare Fig.8: 
(1) After a short pre-identification phase con-
troller R- is switched to selftuning mode. A 
probing signal may be introduced to accelerate 
the controller parameter adaptation. Then con-
troller R } is obtained and its parameters are 
fixed. 
(2) The same procedure as (1) is now applied to 
controller R 2. The selftuning results in con-
troller R* which is also fixed. 
(3) Ri is again set to selftuning and results in 
R^, which is fixed. 
(4) R2 is retuned as (3) . 
The sequential selftuning continues until both 
controllers converge to fixed controllers R^ and 
R2. At least for the first steps it is proposed 
to include an automatic search of model order and 
deadtime, see Mancher and Hensel (1985). Also in 
this case different sampling times can be used for 
both controllers. 
Example 2. Sequential selftuning of a two-input 
two-output process. 
An analog simulated two-variable process according 
to Fig.9 was connected to the (fault tolerant) 16-
bit double microcomputer system FIPS, see Mancher 
(1984). The selftuning controller consists of the 
recursive least squares parameter estimation method 
in discrete square root filtering form and a state 
controller with observer. The state controller is 
designed by solving the recursive matrix Riccati 
difference equations after each sampling which 
minimizes the quadratic performance criterion 
1 = 1 xT(k)Q x(k) + ru (k), 
k=0 
An integrator in the state controller was intro-
duced by adding an integrator to the estimated 
process model. 
Fig.10 shows the time history of the signals for 
the first six 
steps. During step (1) the pre-
identification of process P^ is performed by using 
a PRBS-signal for u.. Then the loop 1 is closed 
with R. in selftuning mode and the control variable 
y. reaches rapidly its setpoint w.=0. A step func-
tion of the reference variable w. from 0 to 1 
and back from 1 to 0 introduces an external exci-
tation of the selftuning controller and shows the 
resulting transient behaviour of loop 1. During 
step (2) the same is repeated for controller R2, 
but with fixed R* connected to process part 1 so 
that the process interactions are taken into 
account in selftuning of R2. A well damped behaviour 
for y2 is obtained for the second setpoint step w2-
Because of the interactions the signals for step 
(3) show a different behaviour as for step (1). 
R2 now results with a longer settling time for yj. 
The change of R^ during step (3) is clearly shown by 
comparing y1 and u1 from step (2) with step (4). 
During step (4) R2 is slightly changed and during 
step (5) the control behaviour of y« , u. is im-
proved only a little bit. The following steps in-
dicate no changes of controller parameters anymore. 
This example shows that with sequential selftuning 
a fast convergence is obtained and that a few steps 
are enough to reach a good control behaviour. It 
was demonstrated for a noiseless system. However, 
the described procedure of selftuning is already 
determined for a noisy system. In Isermann (1984a), 
(1984b) it was shown, that in approximately the 
same time selftuning controllers converge also for 
significantly disturbed processes. 
The procedure of sequential selftuning control can, 
accordingly to sequential identification and con-
troller design described in section 2, also be 
applied to 
- cascaded 
control 
systems, 
by selftuning first 
the inner controller and then the outer con-
troller. For an example see Isermann (1984a). 
- feedforward 
control 
systems by using selftuning 
feedforward controllers, see Isermann (1982). 
- hierarchical 
control 
systems, 
by proceeding with 
sequential selftuning in a vertical way, as des-
cribed in section 2.4. 
The same properties given at the end of section 2 
in principle also hold for the sequential self-
tuning control. But in comparison to sequential 
identification and controller design considerable 
time can be saved and the resulting control 
behaviour can be observed immediately. Therefore 
this approach is suitable also for on-line changing 
of controller design parameters, like the sampling 
time T Q or the weighting factors r.^ for the mani-
pulated variables, which usually are found iterati-
vely. 
301 

302 
R. Isermann and H. Hensel 
4. CONCLUSION 
In this paper a sequential (successive) application 
of identification and controller design and a 
sequential application of selftuning control is 
proposed for the design of decentralized controllers. 
It can be applied for multivariable, cascaded and 
hierarchical control systems by moving horizontally 
and vertically through the system. There are several 
advantages which make the procedure attractive for 
complex industrial processes: 
- simple single-input single-output models and con-
trollers are used 
- the procedure is rather adaptable to the systems 
structure 
- the design and closing of loops may follow the 
usual commissioning procedure 
- the procedure includes a progressive model 
reduction 
- very different sampling times can be used 
- the expense of required software is acceptable 
for decentralized microcomputers used for process 
industries, at least in the version of selftuning 
controllers. 
Simulations have shown that the sequential design 
converges rapidly for the investigated cases. How-
ever, a theoretical analysis has to show general 
convergence conditions. 
REFERENCES 
Bayer, Th. (1984). Sukzessiver rechnergestützter 
Entwurf von dezentralen Regelungen für Großan-
lagen komplexer Struktur. Internal Report, Inst. 
für Regelungstechnik, TH Darmstadt. 
Isermann, R. (1981). Digital control systems. 
Springer, Berlin. 
Isermann, R. (1982). Parameter adaptive control 
algorithms - a tutorial. Automatica 18, 513-528. 
Isermann, R. (1984a). Rechnerunterstützter Entwurf 
digitaler Regelungen mit Prozeßidentifikation. 
Regelungstechnik 32 (1984), 179-189, 227-234. 
Isermann, R. (1984b). Computer aided design and 
selftuning of digital control systems. ACC-
American Control Conference, San Diego, Juni 1984. 
Kuhn, V. (1983). Verfahren zur dezentralen Zustands-
beobachtung linearer Systeme mit komplexer 
Struktur. Regelungstechnik 31, 44-50. 
Litz, L. (1983). 
München. 
Dezentrale Regelung. Oldenbourg, 
Mancher, H. and H. Hensel (1985). Determination of 
order and deadtime for multivariable discrete-
time parameter estimation methods. 7th IFAC 
Symposium on Identification and System Parameter 
Estimation, York. 
Mancher, H. (1984). Synchronization tools and re-
start method in a fault tolerant distributed 
automation system FIPS. Fl/NTG/GMR-Fachtagung 
'Fehlertolerierende Rechnersystème'. Informatik 
Fachberichte Nr. 84, Springer-Verlag,1984. 
Singh, M.G. (1981). 
Amsterdam. 
Decentralized Control, Elsevier, 
Acknowledgement: This research was supported by 
the Deutsche Forschungsgemeinschaft. 
| u 1 
| y i 
| u 2 | V 2 
Fig.l 
Two process parts P and P with (unknown) 
interactions. 
I ui f*i 
\u2 | n 
Fig.2 Two process parts P. and P with two 
decentralized controllers R and R . 
IDENTIFICATION 
CONTROLLER DESIGN 
pLnrLTU" |~—^-J 
Jui fyi 
Ju,2 ty2 
=^ P 
(a) 
(bl 
flumnr \—) *Ή~* 
— · - L· P. Ihrjà: 
P. A 
(c) 
=3 
\"i |y,2 
jui_jyi 
K2_Jy2 
RJ 
P2 
^ E L E M E N T S 
Fig.3 Procedure for sequential identification 
and controller design of a two-input 
two-output process. 
Fig.4 Blockdiagram of a two-input two-output 
process with strong interactions. 
G n ( s ) = 
G^(s) = 
-1 
(l+2s) 
0,5+4s 
12v 
(1+s) (l+2s) (l+4s) 
1 
G21 ( S ) = T 7 — 2 
G22(s) 
(1+s) (l+3s)(l+2s) 
1 
(l+s)2(l+3s)(1+lOs) 

STEP 1 
Γ ~ 1 — · 
ι R 
i 
Kl>} hh 
Pi a P; 
a) 
b) 
STEP 2 
["ifo fefe 
STEP 3 
STEP 6 
Ä J ' R U 
u.y 
10 20 
Fig.5 Signal records for the sequential design of two decentralized PID-controllers 
a) setpoint change w. - -1 
b) setpoint change w - 1 
CASCADED 
CONTROL 
SYSTEM 
R, 
R; 
lui|yi 
y0 
♦
 U2 
y2 
Γ3 
y3 
Fig.6 Multivariable process with 
decentralized controllers 
R', R. , R9, R-. and an overall 
controller R (hierarchical 
—o 
control system) 
ΘΘ o w 
O M 
3 O 
ft O 
H ** 
O D J 
H· H-
H" &> 
(D iQ 
Γ TT 
Γ 
| 
1 
1 
(D 
en 
73 
3 = 
σ ο 
m o 
CO Z 
~ H 1 
en je 
z o 
l~ 
r-m 
*--!—ill 
]Cej 
1 
CJÏ 
-Ό 
1 
' 
<*=r 
1 
Γ σ 
3> m 
zi z 
o =j 
1 
J 
l 
|<D> 
; L 
/ 
O to 
i 
o m 
1 
2 Γ 
Sequential Design of Decentralized Controllers 
303 

304 
R. Isermann and H 
SELFTUNING CONTROLLER 
(a) 
(b) 
(c) 
m 
Pi 
Pi λ 
Dl 
tï 
Y? S///M 
s 
/ 
tr 
M> p. 
r/ts/ssA 
j . rn 
R] 4 
/s// 
//s 
/iNr 
_b. 
4 
J 
**/////A 
JDENTFIED 
'ELEMENTS 
i-
Fig.8 Procedure for sequential self-
tuning of a two-input two-
output process. 
A 
k=r9 
Gn 
12 
t= 
yi 
H^= 
J> 
4 
'22 
Fig.9 Block diagram of a two-input 
two-output process. (Rough 
model for an airconditioning 
plant). 
1 
G u ( s , 
G12(s) 
(l+3s) 
-0.67 
(1+3S)(l+|s)(1+s) 
~ 
# » -0.38 
G21(S) 
'ΤΤΪΓ 
% 
p 
G22(s) 
<l+3s)(l+j s) 
Fig. 10 Signal records for sequential selftuning of two decentralized state controllers with observers. T = 2 sec. q.. = 1; r = 0.5, 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER - AIDED DESIGN OF 
INDUSTRIAL AUTOMATION 
L. A. Jacic 
College of Engineering, Pozarevac, Yugoslavia 
Abstract. 
have 
tal 
an e 
hand 
netw 
ten, 
nolo 
whic 
prod 
sine 
comp 
be p 
well 
cept 
aids 
er t 
assume 
control 
xample 
.How to 
ork,or 
that he 
gical d 
h repre 
uce des 
e the s 
onents. 
resente 
as sto 
of use 
in syn 
o illus 
n recent years 
d very importa 
systems.The i 
of one design 
enable produc 
to design the 
is not a cont 
emands,an engi 
sent the input 
ired logic equ 
ystem is relia 
Software for c 
d in the paper 
chastic system 
of interactiv 
thesis process 
träte the prog 
compu 
nt rol 
mpleme 
proble 
tion e 
absolu 
roi de 
neer s 
forma 
ations 
ble an 
omplet 
.It is 
s,both 
e comp 
is gi 
ram pa 
ters 
e in 
ntat 
m wh 
ngin 
tely 
sign 
houl 
t to 
as 
d mi 
e de 
app 
com 
uter 
ven. 
ckag 
wit 
the 
ion 
ich 
eer 
new 
spe 
d fo 
ava 
a ba 
nima 
sign 
lica 
bina 
gra 
A re 
e. 
h their 
logic 
of larg 
can be 
to impr 
one,pr 
cialist 
rm a de 
liable 
sis for 
1 in se 
of dig 
ble for 
tional 
phics a 
levant 
great com 
design of 
e-scale di 
impractica 
ove the ex 
esuming,as 
.On the ba 
sired cont 
computer.C 
the immed 
nse of num 
ital contr 
treating 
and sequen 
nd other a 
example is 
puta 
indu 
gita 
1 to 
isti 
it 
sis 
rol 
ompu 
iate 
ber 
ol n 
dete 
tial 
vail 
inc 
tional power 
striai digi-
1 systems is 
solve by 
ng control 
is very of-
of new tech-
specification 
ter should 
realization, 
of required 
etworks will 
rministic as 
etc.The con-
able computer 
luded in ord-
Keywords. Digital systems; digital control; Computer-aided logic design; 
finite automata; sequentials machines; industrial control; hazards and 
race conditions; sequential control systems. 
INTRODUCTION 
A total machine-the aggregate of the power 
system,the control system and the external 
system is given,due to Stecki (1980),at fi-
g- 1. 
MACHINE UNDER DESIGN 
! 
( 
The design of external system and its own 
control system is outside of the design p-
roblem,and shall not be considered here. 
POWER SYSTEM 
JLOGIC SYSTE 
ΪΜτη 
MJZL 
H EXTERNAL SYSTEM H 
Fig. 1. Structure of a total machine 
The contro 
ich will a 
inputs (fr 
together w 
mory,and m 
output sig 
are commun 
the extern 
be primary 
So,the con 
nsidered a 
ce,subject 
ion and pr 
mation.Fur 
mation is 
rol system 
tern. 
1 system is 
ccept primär 
om external 
ith informat 
ake a decisi 
nais from th 
icated to th 
al system.Th 
(_Y.)and sec 
trol system 
s an informa 
ed to a stri 
oducing a st 
thermore,as 
in digital b 
is called a 
set of 
y inpu 
system 
ion st 
on.The 
e cont 
e powe 
e outp 
ondary 
to be 
tion p 
ng of 
ring o 
the pr 
inary 
digit 
comp 
ts an 
) , com 
ored 
deci 
rol s 
r sys 
ut si 
outp 
desig 
roces 
input 
f out 
ocess 
form, 
al co 
onents wh-
d external 
bine them 
in its me-
sions are 
ystem that 
tern and 
gnals can 
uts U k ) . 
ned is co-
sing devi-
informat-
put infor-
ed infor-
the cont-
ntrol sys-
The 
ces 
the 
ribe 
powe 
lied 
from 
es a 
syst 
are 
cont 
anti 
cont 
twee 
powe 
and 
cont 
d ma 
r de 
pri 
the 
re t 
em i 
not 
rol 
-tie 
rol 
n th 
r sys 
accep 
rol s 
nner. 
vice 
mary 
cont 
ermed 
s com 
inclu 
syste 
down 
syste 
e ext 
tem is co 
t a comma 
ystem and 
The feedb 
to the co 
inputs (X 
rol syste 
primary 
posed of 
ded in th 
m (emerge 
two-hand 
m represe 
ernal sys 
mposed of 
nd signal-
respond i 
ack signal 
ntrol syst 
).The out 
m to the p 
outputs.Th 
all the de 
e power sy 
ncy stops 
control,e 
nt the int 
tem and a 
powe 
inpu 
n a 
s fr 
em a 
put 
ower 
e ex 
vice 
stem 
and 
tc. ) 
erfa 
mach 
r devi-
ts from 
presc-
om the 
re ca-
signals 
devic-
ternal 
s that 
or in 
reset, 
. The 
ce be-
ine. 
The most general form of a digital control 
system to be synthesized is given by follo-
wing eqs. and fig. 2. 
V= Vii-V 
Y . 
-J y*i>v 
(1) 
It is evident,due to Huffman (1954),that we 
consider digital sequential control system 
as a system consist of input and output su-
bsystems , both of combinational behaviour. 
305 

306 
L. A. Jacic 
Xi 
INPUT SUBSYSTEM 
(combinational circuit) 
Zk 
OUTPUT SUBSYSTEM 
(combinational circuit) 
ÏÎ 
Fig. 2. The general concept of digital control system 
According to the conventional clasification 
there are two types of control systems: co-
mbinational and sequential.In combinational 
systems,the output signals depend only on 
the input signals simultaneously presented 
(one to one correspondence between sets of 
input and output signals).So,the main cha-
racteristic of this type of a system is u-
niqueness of output signals.In a sequential 
logic system,the output are related not on-
ly to the present inputs of the system,but 
also to the past history of the inputs.Hen-
ce, sequential network must incorporate me-
mory elements.This type of networks can be 
classified into a two groups: synchronous 
and asynchronous. 
THE SYNTHESIS PROCEDURE 
The synchronous type sequ 
be externally timed in or 
correct operations.An asy 
are designed to be intern 
This type of circuits,bee 
ing feature and faster ov 
me than the synchronous c 
able for sequential logic 
words,concerning industri 
systems,each control step 
ately after the previous 
Asynchronous type circuit 
into a two classes: Regul 
tworks (RAN) and Irregula 
works (IAN). 
ential system must 
der to produce the 
nchronous circuits 
ally "self-timed". 
ause of self-tim-
erall response ti-
ircuits,is desir-
systems.In other 
al digital control 
commences immedi-
step is completed. 
ry can be divided 
arly Activated Ne-
rly Activated Net-
The main characterist 
able input sequence.0 
when the schedule of 
finable,the network i 
way is to give the fo 
on: deterministic and 
which is identical to 
ion.So,we can say tha 
uit is logic circuit 
rmined inputs are all 
means that it is logi 
redetermined,random o 
are permissible.We sh 
asynchronous systems, 
stochastic,fig. 2. 
ic of RAN i 
n the other 
input signa 
s IAN.Maybe 
llowing cla 
stochastic 
previous c 
t determini 
in which on 
owed,while 
c circuit i 
r both type 
all treat s 
both determ 
s predict-
hand side, 
Is is inde-
the better 
sifficati-
systems, 
lassificat-
stic circ-
ly predete-
stochastic 
n which p-
s of inputs 
equential 
inistic and 
So,in order to produce the desired digital 
control system,we must derive the logic eq-
uations of type (1),namely for Y. and Z, . 
— j 
—K 
The optimality criteria J . which has to 
be respected during 
the 
p synthesis pro-
cedure's given by eq.(2): 
The choice of 
by the type an 
The method use 
cation of well 
This method is 
asynchronous d 
out respect to 
mentioned,the 
systems can be 
general algori 
(Jacic,1984) i 
synthesis method is dictated 
d complexity of the problem. 
d here represent the modifi-
-known Huffman method (1954) 
applicable for synthesis of 
igital control systems with-
the size of a problem.As we 
deterministic and stochastic 
handled by this method.The 
thm of synthesis procedure 
s described below,fig. 3-
(START) 
WORD STATEMENT 0Fy 
A PROBLEM 
I 
\ 
INPUT FORMAT: 
/ 
\ 
SEQUENCE SPECIF»/ 
/ PRIMITIVE FLOW TABLE\ 
L 
STATE REDUNDAC1ES 
EXIST ? 
[Jyë 
> 
REDUCTION OF EQUIVALENT 
STATES 
I 
OPTIMAL MERGING 1 
[RACE 
ELIMINATION"! 
_______I——, 
NUMBER OF 
x'NECESSERY 
MEMORIES\ 
MULTIPLE OUTPUT MINIMIZATION 
_XL 
Zk 
I HAZARD ELIMINATION! 
± 
LOGIC EQUATIONS OF 
> 
DESIRED AUTOMATA 
( eqs.d) ) 
pu 
(STOP) 
opt" J . Λ J , 
min 
rel 
(2) 
Fig. 3- Synthesis algorithm 
where J . is a component of J , with re-
m m 
v 
opt 
spect to a minimal number of components, 
which represent a cost function.J rel repre-
sent a component of J 
. with respect to 
reliable operation (hazards and races to be 
elimminated during the synthesis process). 
The disadvantages of classical Huffman's 
method are described in (Jacic,1983a,1983 
b),and served as a basis for further imp-
rovement and modifications of this method. 
The logic description of a problem is bas-
ed on word statement which describe the e-
xpected machine operation.Input data obta-
ined from the word statement can be a step 

Design of Industrial Automation 
307 
by step specification,truth table,primiti-
ve flow table,timing chart etc.Adequate f-
ormatting technique must be used in order 
that,regardless of the type of network,all 
possible combinations of input states aff-
ecting the operation are considered in p-
rescribing the output conditions.The effi-
cient format that is used here is Primiti-
ve Flow Table (PFT).It is produced on the 
basis of Step by Step Sequence Specificat-
ion (SSSS).PFT is very powerful format si-
nce we employ it later in phase of minimi-
zation of automata. 
The relation between SSSS and PFT is shown 
at figure 4.,for deterministic systems and 
for stochastic systems,fig. 5.It is sugges-
ted to use GRAFCET-technique for proper de-
scription of operation of desired automata. 
For a given deterministic system,SSSS is g-
iven by a string: A+,Β+,B-,A-.The comma di-
vides the sequence into a steps.It is obvi-
ous from the graph of this sequence that it 
is pure deterministic system,fig. 4. 
ft 
™ 
rÈ 
ïm 
Jb. 
Ißl 
bo 
TO 
S 
1 
2 
3 
U 
00 
® 
1 
0 1 1 1 
3 
© 
i o || YA 
"2 
© 
k 
© 
1 
1 
1 
0 
V n 
0 J 
1 
0 
0 
DETERMINISTIC 
CIRCUIT 
Fig. 4. GRAFCET-SSSS-PFT c o r r e l a t i o n for d e t e r m i n i s t i c systems 
TebT 
m 
TO 
\ 0 R -
Α+,Β+,Β-Α-,/Α+,Β+,Α-,Β-
Tcbi 
i Qobo 
convergence 
Ώ^ 
m 
1 
2 
3 
4 
5 
000 
© 
1 
1 
001 011 010 110 
3 
© 
111 
5 
© 
101 100 
2 
© 
4 
© 
YA 
1 
1 
1 
0 
0 
"ΫΓΊ 
0 
1 
0 
0 
Oj 
STOCHASTIC CIRCUIT 
Fig. 5. GRAFCET-SSSS-PFT correlation for stochastic systems 
Looking into a GRAFCET-representation at 
fig. 5.,we do recognize the concept of al-
ternative paths.The system will follow the 
sequence under the OR divergence depending 
on external input "c".The SSSS is given by 
a string: A+,B+,B-,A-/A+,Β+,A-B-.Slash (/) 
represent the OR divergence.For the case 
of simultaneous paths,two slashes (//)have 
been used (the AND divergence).How many e-
xternal inputs are needed depend on number 
of alternative paths.The system,for this 
stochastic case will make transition 2—»3 
for c=0,and 2—5 for c=1 ,fig. 5. A and B 
denote power devices,ie. pneumatic cylind-
ers, "+M and "-" denote the type of movera-
ents,an,a1,bQ and b- are signals from lim-
it switches, and c is external signal,ac-
cording to the fig. 6.The power system for 
B is identical as this of fig. 6.Of course, 
the method is applicable to any type of a-
utomata,without respect to informational 
and working media (electronic,pneumatic,h-
A +-GJ 
Fig. 6. Power system concept 
ydraulic,electrical etc.). 
Each type of a sequence that is common in 
industrial automation,can be handled by t-
his method (ordinary sequence,simultaneous 
sequences,alternative sequences,partial o-
verride cycle and partial repeat cycle). 

308 
L. A. Jacic 
The primitive flow table (PFT) is produced 
in obvious manner,mannualy or by computer, 
and serve as a basis for further synthesis. 
Next step in synthesis is reduction of equ-
ivalent states according to the well known 
rules in digital automata theory (Pauli,Li-
nger).Given is powerful algorithm for sys-
tematic identification and elimination of 
redundant states.This step represent a pre-
liminary stage of reduction of necessary 
memory elements. 
The final stage of reduction of number of 
necessary memory elements is achieved by 
optimal merging.Disadvantages of classical 
merging technique (Jacic, 1984) are: immen-
sity,great possibility of error,nonunique 
solution,impossibility of CAD merging,non-
existence of algorithm for the choice of 
optimal subgroups,impracticity of applica-
tion for large-scale systems etc.A long te-
rm research in this area (Jacic,1983a,1983 
b,1984) resulted in optimal merging method 
which has been computerized.Introducing the 
definitions of "state-image" and "minimal-
image" , the theorem on "minimal-state-image" 
is established and proved,giving the necce-
ssary and sufficient conditions for the e-
xistence and identification of minimal me-
mory digital control system. 
Next step,race elimination is connected to 
a previous step.The races are eliminated 
by itterative checking for race all the p-
ossible combinations between the raws of 
reduced flow table.Very often,the desired 
sequence of rows of reduced flow table is 
obtained directly by the application of t-
he proposed algorithm,in first itteration. 
Races due to primary inputs are eliminated 
in the early beginning by using cyclic Gr-
ey code. 
In order to derive the logic equations of 
desired automata with respect to the opti-
mality criteria (eq. 2),a slight modifica-
tion of well known Me Clyskey"s method for 
multiple output Boolean functions is used 
for the first time,opposite to Huffman's 
approach.Hazard elimination is done at the 
same time during the minimization process, 
based on the eq. 3. : 
XY + XZ = XY + YZ + YZ 
(3) 
In this expression term YZ represent a haz-
ard elimination term. 
The logic equations obtained at the end of 
briefly described synthesis processs repre-
sent the behaviour of desired digital con-
trol system.Later,they serve as a basis f-
or immediate realization.lt is good to po-
int out that we do realize a control sys-
tem in the Boole basis (MOT,AND,OR),where 
memory functions are achieved implicitly 
in combinational subsystem. 
COMPUTER-AIDED-LOGIC-DESIGN 
The manual synthesis is almost impractical 
when large-scale networks are encountered. 
In order to perform the system synthesis, 
the user need to supply the SSSS informat-
ion to computer,describing the desired log-
ic. The program package will then perform 
the necessary steps to obtain the digital 
equations by the synthesis procedure alre-
ady programmed.With this capability,the d-
esigner do not need to know a formal synth-
esis procedure.He need to know only how to 
write SSSS,call the program and then imple-
ment the resulting equations. 
The program package LJUBA consists of main 
program and 19 subroutines (Jacic,1984).The 
computerization of proposed method is done 
in part,at George Washington University,Wa-
shington DC,and has been completed in Comp-
uter Center in Pozarevac,on Honeywell L6/53 
Computer.Operative system is GCOS 6-MOD 400 
and the program language is Fortran,while 
the compiler is Fortrana.The package is ea-
sy to apply on each universal computer,with 
slight modifications if necessary.Some ide-
as have been used from Surjaatmadja (1973), 
mainly the output format specification. 
The SSSS is fed into a computer via video-
terminal in proposed format.In order to il-
lustrate the software package,consider a f-
ollowing example.lt is necessary to design 
digital control system described by bar-ch-
art,fig. 7. 
(D ΓΓΤΤΤΓΠ-Τ-Π-ΤΤΤη"!\ 
© π-τττιτΊ-ΓΤΤΓΤ-mrf 3, 
(DO®··· 
···©© 
Fig. 7. Bar-chart of a system to 
be designed by computer 
This chart represent the sequence of opera-
tion of 3 power devices A,B and C,for whi-
ch activation serve the output signals Y1, 
Y2 and Y3 from control system to be synthe-
sized.The relevant outpu_t-input triples_for 
this system are: A*(Y 1,(x1,x1)),B*(Y2,(x2, 
x2) ) ,C-r(Y3, (x3, x3) )· Input format to comput-
er is given by a following string: 
A+B+C+,A-C-,A+,A-B-,C+,A+B+C-,A+B+C-,A-B-, 
C+,A+B+C-,B-,A-C+,A-C+,A+,A-B+,B-C- . 
This test problem involving 3 input and 3 
output variables resulted in processing ti-
me of 9 CPU seconds.The computer printout 
is given in table 1. 
The horizontal lines in the printout repre-
sent conjunction terms(ANDvs) while the re-
lation between them is of dinsjuctive type 
(0R*s). 
After,the control network has been implem-
ented by constructing a physical equivalent 
of an abstract model of the control system-
set of Boolean equations.The logic elements 
NOT,AND,OR (and their combinations) which 
perform basic functions can be identified 
and used to construct the control system. 
The program limitations are: number of fe-
edback inputs is 16, number of outputs is 
16 and number of internal states (memory) 
is 32.This limitations are just formal in 
its nature. 
FUTURE TRENDS IN CAD 
We are just about to rebuild and improve 
the existing CAD concept for digital cont-
rol systems.We plan to achieve it by maki-
ng a program package which would do the f-
ollowing,based on the outputs of previous 
software package LJUBA : 

Design of Industrial Automation 
309 
Table 1 Computer printout 
Zl 2? Z3 Z4 Z5 XI X2 X3 
***************************************** 
Zl = 
1 
-
-
-
-
-
-
-
-
-
-
- 
0 
1 
-
-
-
-
-
0
1
0 
***************************************** 
Z2 = 
1 
1 
-
-
-
-
- 
-
-
1
-
-
-
0
-
-
1 
- 
- 
- 
- 
0 
0 
***************************************** 
Z3 -
-
-
1
-
-
-
0
-
***************************************** 
Yl = 
0
0
-
-
-
-
0
-
0
0
-
-
-
0
-
-
.
-
.
-
-
0
1
0 
1 
i 
- 
.
-
- 
1 
-
0 
- 
- 
- 
- 
i 
o 
1 
- 
- 
- 
- 
1 
0 
0
0
-
- 
-
0
-
0 
***************************************** 
Y2 s 
1 
- 
- 
- 
1 
-
-
-
-
- 
0 
1 
0 
-
-
-
-
- 
1 
1 
1 
1 
i 
- 
- 
- 
- 
i 
0
0
0
-
-
-
0
0 
- 
1 
- 
- 
- 
- 
1 
0 
0 
- 
0 
- 
- 
1 
0 
0 
0
0
0
-
-
0
-
0 
***************************************** 
Y3 = 
-
-
-
-
-
0
0
-
1 
0 
- 
- 
- 
- 
0 
***************************************** 
- forming a list of necessary logic compo-
nents, 
- optimal interconnection between compone-
nts (connection matrix) and logic diagr-
am, 
- functional diagram. 
Also,we plan to establish the data base of 
existing logic components at control market 
with relevant parameters such asrproducer, 
type,price,technical characteristics etc. 
The integral concept of CAD of digital sys-
tems is given at fig. 8. 
(START) 
\SSSS/ 
f 
c~ 
\ 
LOGIC 
7 
EQUATIONS/ 
PROGRAM PACKAGE 
LJUBA 
FOR CAD 
CAD DRAWINGS 
( INTERACTIVE 
GRAPHICS ) 
Γ 
LOGIC 
\DIAGRAMS 
LIST OF NECESSARY 
C0MP0RNTS 
/ 
CONNECTION 
/ 
MATRAX... 
/ 
MARKET-
DATA BASE 
\ 
LOGIC 
7 
\DIAGRAMS / 
I 
(STOP) 
Fig. 8. The integral CAD concept 
A CAD working station is configured due to 
fig. 9. 
| 
CPU 
| 
h 
I TABLET| 
H 
/ALPHANUMERIC ~ 
VTERMINAL 
1 
/GRAPHIC 
^ \ 
VTERMINAL 
J 
IPLOTER | 
> 
HARD 
COPY 
UNIT 
Fig. 9. CAD working station 
The tablet used is Tektronix 4954,interac-
tive graphic terminal Tektronix 4014 and 
interactive plotter Tektronix 4663. 
An integral CAD concept for digital control 
networks reduce the time spent on manual s-
ynthesis.This allow the designer to exper-
iment with different design approaches,and 
test them for hardware cost,feasibility e-
tc.Beside,this approach to the logic synt-

310 
L. A. Jacic 
hesis enable to keep track of the compone-
nts used in the design so that if the spe-
cification of a device used in many places 
is changed,the change will carry through-
out the design.Also,the integration of gr-
aphics with text documentation represent a 
powerful basis for easy maintenance and t-
roubleshooting.There are numerous advanta-
ges of CAD of digital control systems over 
the classical-manual synthesis approaches. 
Sometimes,the CAD approach is the only po-
ssible tool,especially when large systems 
are treated. 
CONCLUSION 
In spite of existing and availability of 
many CAD tools for synthesis of digital s-
ystems,and fact that the computers are of-
ten available to the designers of industr-
ial automation,the synthesis is often han-
dled out manually,usually by using step m-
odules for each step of a sequence.The so-
lutions obtained on such manner were not o 
ptimal in sense of minimal number of requ-
ired components for realization,the syste-
ms were not fast,the cost of such solutio-
ns were rather high etc.Computers with th-
eir great abilities must occupy a very im-
portant place in logic design process.The-
ir application will releive engineers from 
the routine calculations and drawings»whi-
ch sometimes prevent them from performing 
the optimal solution.The role of this pap-
er is to present one CAD procedure for di-
gital control systems and to induce the de· 
signers of such systems to more use the a-
vailable CAD aids. 
REFERENCES 
Huffman, D.A. 
(1954). 
Synthesis of sequ-
ential switching circuits. J. Frankl-
in Inst., 257/3, 161-191. 
Jacic, A.L. 
(1983a). A generalized meth-
odology for minimizing fluid logic ha-
rdware.In R.Henke (Ed.), The Fluid Po-
wer Controls and Systems Conference, 
University of Wisconsin,Milwaukee. pp. 
1-47. 
Jacic, L.A. 
(1983b). 
Computer-aided-log-
ic-design of digital systems.In S. Tz-
afestas (Ed.), MECO*83 Symposium,Vol.2, 
Acta Press, Athens, pp..135-139-
Jacic, L.A. 
(1984). 
A method for synthes-
is of optimal digital systems of sequ-
ential type and CAD. Ph.D. Thesis,Uni-
versity of Belgrade. 
Paul, M.C.,and Unger, S.H. 
(1959). 
Mini-
mizing the number of states in incomp-
letely specified sequential switching 
functions. 
IRE Trans, on Elec.Comput., 
EC-8, 245-249. 
Stecki, J.S.,and Reddecliffe, O.A. 
(1980). 
Designing complex control systems with 
the computer. Hydr.and Pneum.,1, 107-
109. 
Surjaatmadja, J.B.,Bench, L.E., and Chan, C 
. (1973). 
Program and user's guide for 
the classical synthesis of fluid logic 
networks. Report No. R73-1, University 
of Oklahoma. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN SYSTEM FOR 
INSTRUMENTATION ENGINEERING 
K. Koskinen 
Department of Automation and Electrical Engineering, EKONO Oy, 
Helsinki, Finland 
Abstract. The utilization of computer in the design work is particularly based on 
three facts: fastness, errorfree processing and integration of data. Great advantages 
can be achieved by integrating the data management system and the graphic system into 
a functional unit. 
The paper describes a computer-aided instrumentation design system developed by EKONO 
Consulting Engineers. In step by step progressing design work, the data entered 
earlier are utilized in all phases of planning. The work advances by adding and 
revising the data stored in the system. The same piece of information can appear in 
several forms. Any data is, however, fed and updated only once. The systems support 
engineers throughout the design process and produce most of the documents needed. 
Keywords. Computer-aided design; data handling; computer-aided circuit design; 
computer graphics; integrated planning programs; instrumentation engineering. 
INTRODUCTION 
EKONO is a Finnish Consulting Engineering Company 
the main fields of which are energy, forest and 
mining industry, urban development and buildings. 
The company provides a complete range of 
consultancy and engineering services such as 
business development, project management and 
complete engineering services as well as start-up, 
operation and maintenance services of plants. 
EKONO uses computer in the feasibility-study phase 
for calculation programs to find out the 
rentability of different process alternatives. 
Engineering phase of the plants computer is used 
for process dimensioning, piping-, electricity-
and automation planning. The use of the 
engineering systems of different fields has not 
been integrated, they have no common database, 
but the data transfer is manual for the time being. 
In the automation planning we have been using 
computer since 1976. As there was no economically 
realistic, suitable and flexible enough system at 
that time we started to develop it ourselves. The 
data management system developed supports basic 
engineering. The system was expanded with 
graphical programs in 1980 that supports detail 
engineering. The systems were realized first with 
the DEC system 10 time sharing computer of Digital 
Equipment Corporation. Since 1982 the systems have 
been used in the VAX 11/780 of the same 
manufacturer. The systems have been developed 
and modified in the past few years so as to better 
meet the changing demands of the automation 
technics planning and on the other hand to 
facilitate the man-machine communication. 
DESCRIPTION OF THE SYSTEM 
The system consists of about 300 program modules 
and 45 data files of different sizes. System 
comprises two highly integrated phases: data 
management system and graphic programs system. In 
basic engineering the system is used for data 
management, calculation tasks and reporting. The 
user communication is carried out by menu technics 
and the form management system (FMS). 
311 
CADCES-K 
Graphics programs system is used in detail 
engineering for drawings, documentation routines 
and management of drawing information and is based 
on interactive graphics data processing. 
Programs 
There are totally 45 programs with 170 integrated 
subprograms at the user's disposal. Different types 
of programs are available. From the users point of 
view, the most important programs are the data 
input programs and listing programs. The data input 
programs feed the data into the computer memory and 
change single data. The listing programs create 
reports from the data stored in files assorting 
them according to required criteria. 
In addition, the users have several subprograms at 
their disposal that expedite the different routines. 
They serve for transferring data from one file to 
another so that the same data can be used in 
different displays and reports or e.g. for changing 
the items in all files at any stage of the project. 
It is also possible to sort the information on 
specific equipment, count of equipment functions or 
the vendors. There are practically no limitations 
on the selection of the sorting criteria. 
Data Files 
The files are divided into two groups basic data 
files and project data files. 
Basic data files. The basic data files contain e.g. 
- translations of codes in clear nomenclature 
- calculation equations 
- list- and form models, drawing symbols 
- information on alternative methods of cable 
connections and various terminal numbering 
systems, cable types and sizes 
- symbol library for standard equipment of major 
manufac turers 
- dictionary for multilingual listing 
Part of the data of project data files are fed in 
codes that refer to translations in clear nomen-
clature stored in the basic data files. Thus the 

312 
K. Koskinen 
user need not write the same text over and over 
again. In reports and listing the codes are trans-
lated in clear nomenclature. Nowadays the reports 
are obtainable in English, German, Swedish and 
F inn i sh. 
The basic data files contain alternative methods 
of cable connections practices and various termi-
nal numbering systems. In each project the user 
must specify which of the systems is applied for 
field junction boxes, terminal strips and control 
room enclosures. Further the user defines the kind 
of cable to be used between each location and how 
the cables are to be numbered. 
Symbols for every component in the system are 
necessary for creating wiring diagrams. These have 
been prepared with the computer graphics station 
and stored in the symbol library according to 
manufacturers. The data of the basic files can be 
changed with the updating programs. 
Project data files. The project data files are 
created and updated with data input programs. They 
contain specific data on the function of the loops, 
the equipment and the cables. Project data files 
are e.g. 
- functional register 
- equipment specifications 
- specifications for flow elements and control 
valves 
- alarm and interlocking point lists 
- purchase specifications 
- equipment type file 
- junction box file 
- cable number file 
The functional register is the basic document of 
the project comprising initial data of the circuit 
e.g. process and piping data, initial equipment 
specifications and functions of loops. The object 
of the functional register is to serve as 
instrument index and to summarize technical 
features of all the measurement and control loops 
of the project. 
The equipment specification is another main docu-
ment of the basic engineering. The specifications 
define technical features of each equipment by 
loop numbers. The additional data and precisions 
accumulated in the progress of the basic 
engineering are fed directly into the equipment 
specifications. 
The flow elements and control valves specifications 
show the process and piping data relating to the 
said equipment as well as other detailed data 
needed for the calculation and dimensioning the 
equipment and in connection of requests for bids 
and orders. 
The requests for bids are obtainable either as 
turn-key delivery or by each equipment group 
according to the way instrumentation is purchased. 
The turn-key purchase specification is in the form 
of equipment specification. The loops are listed 
in growing loop number order and all the equipment 
of each loop with functional demands are specified 
in clear nomenclature. 
If the equipment is purchased by the equipment 
groups from different vendors, the equipment to be 
purchased is arranged to functionally similar 
groups such as control valves, temperature 
transmitters and recorders. 
The equipment of each group is listed in loop 
number order on the purchase specifications by the 
equipment groups. 
The equipment type file is an auxiliary file that 
defines the type data on the equipment for equip-
ment specification and wiring diagrams.The junction 
box and cable number files are auxiliary for 
graphic system. 
There is a specific project data file for each 
document to be printed so that the same piece of 
information can be in different places in the 
computer memory. It is significant that any data 
are fed into the system only once, generally into 
the functional register and that the data are 
transfered automatically to other files. 
PROGRESS OF THE COMPUTER AIDED DESIGN 
Basic Engineering 
When the flowsheets (PI-diagrams) of the plant are 
completed the initial data needed for the functio-
nal register are collected in co-operation with 
the process designers. 
In the functional register are recorded all the 
initial data on measurement and control loops, 
besides process and piping data also all the ne-
cessary equipment in process piping, process con-
nection data, hook-up drawing for installation, 
function of loop and service of alarm and inter-
locking limits to such an extent as it is possible 
at this stage of planning.Of the technical features 
of the equipment are defined e.g. operating prin-
ciple, input and output signals, supply energy, etc. 
The data fed into the functional register are 
utilized in other listings, Fig. 1, 
Fig. 1 Function of data management system 
The listing programs transfer automatically the 
data requested from the functional register into 
- flow element specification 
- control valve specification 
- purchase specification 
- equipment specification 
- alarm and interlocking points lists 
The necessary data are transferred in the same 
manner into other supplementary auxiliary lists. 
The files are revised with additional data by the 
specifications as the planning progresses. Of each 
file a report can be produced when necessary, the 
form of which is defined separately. 

Design System for Instrumentation Engineering 
313 
Request for proposals can be listed in two diffe-
rent ways. The user can choose to list all trans-
mitters, valves, pressure switches, etc., separa-
tely on their own lists either to go to separate 
vendors for bids on each equipment group or to 
print one complete list of all the equipment 
arranged according to control loops if a turnkey 
contract with everything supplied by a single 
source is desired. 
After vendors receive the list, their proposal 
preparations are very rational. Rather than having 
to prepare thick, impressive proposal documents of 
their own, the vendors simply fill out the forms 
with their equipment model numbers and prices, 
make a copy for their records, and mail the com-
pleted forms to the client as proposals. In a 
turnkey project including installation and mate-
rial, a vendor also gets a complete list of 
installation material that makes pricing quick 
and easy. 
When the proposals are opened, their comparison is 
very simple because they are all alike except for 
equipment model numbers and prices. First of all, 
it is very easy to check whether a proposal is 
complete or if something has been omitted. If a 
supplier wants to suggest an alternative to a 
specification, space is reserved for comments 
on each page. 
When the vendors have been selected, the equipment 
specification is completed with final equipment 
types and models and other supplier specific data. 
In the equipment specification reference is made 
to flow element and control valve specifications. 
Any data previously entered for the flow element 
and the control valve in the functional register 
appears automatically on the form. The user fills 
out the missing lines with process data for cal-
culation for manufacturing and the results are 
transferred into the flow element specification. 
Detail Engineering 
produces documents for final instrumentation 
implementation. These documents are mainly control 
and measuring-loop wiring diagrams, terminal 
connection tables, and cable lists. The list of in-
stallation material can also be included here if 
not already prepared during the basic engineering. 
In order to be able to produce an accurate list of 
installation material, the program needs 
information for each loop separately; i.e. number 
of the hook-up drawing, lengths of impulse pipe and 
cable runs. The rest is produced by the program 
totalling the details for every type of material 
into a comprehensive list. 
The graphics programs read the location codes from 
the functional register files. The equipment model 
numbers are read from the equipment file. The 
symbol library provides terminal symbols for each 
piece of equipment and places the symbols in 
appropriate locations on the CRT. Provided that a 
circuit-wiring diagram with the same equipment con-
figuration has been prepared earlier and stored, 
the program automatically proceeds by connecting 
the familiar terminals together on the CRT 
"drawing" asking only for project-specific data 
such as numbers of the junction boxes. If the 
equipment appears for the first time, the user 
draws the connecting lines between the terminals 
using a cursor on the CRT. 
Terminal connection tables. After all the wiring 
diagrams connected with any one junction box or 
terminal strip have been graphically completed, the 
terminal numbering program can be started. This 
program assigns numbers to terminals and 
establishes the terminal connection tables and 
cable lists in a corresponding file based on 
project-specific guidelines and the graphical 
connections on the CRT drawing. The program 
finishes by assigning the drawing a number and by 
updating the list of drawings. Any changes and 
corrections are made on the CRT, and the program 
automatically does corresponding updates in the 
connection tables and cable lists. 
The second phase of the system, graphic programs, 
Fig. 2, 
/ BASIC 
I 
f 
[ENQINEERWd 
( 
vfiZA V 
PROJECT 
FILE 
GRAPHICAL PROGRAMS 
F ^ ^ l <^
ERM,""J Π Ε ^ Γ Ι 
g@P 
Fig. 2 Graphics programs functions j 
Because the whole system has been designed as an 
integrated and interactive set of programs, each 
piece of information has to be dealt with only once, 
and the program automatically distributes the in-
formation throughout the system. For example, if an 
alarm point is deleted, the user deletes the point 
from the functional register and it automatically 
disappears from the equipment specification, list 
of alarms, list of hook-up drawings, installation 
materials, wiring diagrams, and connection tables. 
Furthermore, the corresponding pair of cores in the 
cable list will appear as spears when the next up-
date of documentation is printed. A list of 
deletions is also available. 
USER EXPERIENCES 
In developing the system special attention has 
been paid to the needs of the user. Therefore, the 
user experiences have been mostly positive, the 
advantages being 
- filling out of the functional register carefully 
guarantees the accuracy of other lists and 
specifications 
- typing work is deleted and thus also the typing 
errors 
- revisions and corrections can be made quickly and 
easily. Data is entered into the functional regis-
ter or wiring diagram only once and is after that 
usable where needed 
- detailed engineering can be realized with a few 
persons only compared with manual planning 
- as the system is easy to use the user needs no 
actual training in data processing 

314 
K. Koskinen 
As a disadvantage could be mentioned that the use 
of the computer requires a new kind of thinking 
from the user and the difficulty in adopting it 
may arise objection in some designers and reduce 
motivation of work. 
In developing or purchasing an engineering system, 
negative surprises can be avoided by careful ana-
lyzing of the requirements and adaption possibi-
lities of the computer based system. As for the 
engineering methods and routines it should be 
emphazised that poor engineering routines are poor 
even if carried out by a computer. 
CONCLUSION 
Design work can be characterized as iterating: 
data are completed and they change along with 
the progress of the project. To ensure the 
management of the changes and to guarantee 
flexible data transfer it is imperative that the 
data be fed into the computer only once whereafter 
the data are available where needed and in the 
requested form. 
The design system is to be built for the designer, 
for him to use as an auxiliary tool. The structure 
of the system is to be flexible enough to meet 
with future and changing requirements. 
After almost ten years' experience from the deve-
lopment and use of computer-aided design, we at 
EKONO are convinced that the only way to succeed 
in the future is the automation of the routines 
of the design work. 
REFERENCES 
Rusanen, H. 
(1984). Carrying and Planning Pro-
grammes for Electrification and Instrumen-
tation at Tampella. CAMP' 84 Computer 
Graphics Congress Berlin, pp. 405-407. 
Scherf, K. H., V. Koskinen and S. Aarnio (1983). 
Computer-aided design reduces labor on 
instrumentation projects. Pulp & Paper, 
66-69. 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER-AIDED CONFIGURATION AND 
START-UP OF PROCESS CONTROL SYSTEMS 
R. Schumann 
VDO Mess- und Regeltechnik GmbH, Hackethalstrasse 7, 
D-3000 Hannover 
1, FRG 
Abstract. A systematic approach for the computer aided planning, configuration and 
operation of a process control system is outlined which supports systematic collection 
of all required informations, comfortable symbolic configuration of the system function 
and automatic compilation of the collected information to various documentation files. 
It is indicated, how the functional configuration and start-up of the process control 
system can be supported by computer simulations, process identification and selftuning 
features being part of the process control system itself. 
Keywords. Process control; industrial control; computer aided design. 
INTRODUCTION 
Before a process control system can be set in 
operation, different preparatory phases must have 
been passed in which a great amount of information 
about process and system function is collected, 
converted to the hardware and software configura-
tion of the process control system and compiled to 
system documentation files which have to support 
installation, start-up, operation and maintenance 
of system and process. 
Fig. 1 shows the simplified structure of a decen-
tralized process control system. 
Three types of system devices can be found on the 
three basic hierarchy levels: The process I/O 
devices represent the interface between process 
and system and may consist of sensors, actuators, 
transducers, A/D and D/A converters. These I/O 
devices are clustered to process stations which 
GLOBAL/AREA 
OPERATOR 
STATION 
LEVEL 
LOCAL/UNIT 
OPERATOR 
STATION 
LEVEL 
PROCESS 
DATA 
HIWAY 
PROCESS 
STATION 
LEVEL 
operator 
station 
operator 
station 
process 
station 
operator 
station 
process 
station 
process 
station 
process 
station 
PROCESS 
I/O 
LEVEL 
I/O 
I/O 
I/O 
I/O 
PROCESS UNIT 
I/O 
I/O 
I/O 
I/O 
PROCESS UNIT 
PROCESS UNIT 
PROCESS AREA 
Fig. 1 : Principle Structure of Decentralized Process Control System 
315 

316 
R. Schumann 
have to handle the main part of the process con-
trol functions like continuous control, PLC and 
batch control. The interface to the human operator 
is realized by the operator stations and has to 
support system and process monitoring and operator 
interactions. When the process control system is 
applied to a process the system specific structure 
is complemented by a logical system organization 
according to the functional modules of the pro-
cess, i.e. subsystems including process and opera-
tor stations are assigned to process areas, units, 
subunits etc.. 
Design procedure and operation of a process con-
trol system can be divided in 5 different phases, 
see Fig. 2. During the planning phase, the process 
I/O points and the functional requirements for the 
system are defined, such that in the configuration 
phase the system hardware and software can be 
designed. 
I 
PLANNING 
Π CONFIGURATION 
m TEST 
IZ REALIZATION 
2 OPERATION 
definition of process I/O points 
functional specifications 
reliability demands 
system organisation 
hardware configuration 
function configuration 
debugging of function configuration 
optimization by simulation 
operator training by simulation 
system installation 
system start-up 
on-line optimization 
process control 
set-up /alarm management 
maintenance 
Fig. 2: System Design and Operation Phases 
During the test phase the system configuration is 
analyzed with respect to system and process opera-
tion. 
The realization phase comprises the ordering of 
system parts, system installation and system 
start-up. Tasks of the operation phase are besides 
the general process control and monitoring func-
tions also system and process set-up management 
and on-line diagnosis functions. 
Although modern process control systems are based 
on digital process computers they do not support 
sufficiently the above described preparatory 
stages, i.e. most informations are collected in 
planning sheets, often repeatedly, the functional 
configuration of the process control system is 
prepared by filling out configuration sheets and 
in a third step the information is compiled by 
hand for the different documentation files 
necessary for system installation and operation. 
Test of the system configuration can be done by a 
test installation of the configured system, 
however, in general without simulations of the 
process based on realistic models. During the 
start-up phase the finetuning of the system func-
tions is done with specially trained personal 
without major computer support besides the test 
functions already used during the system test 
phase. 
In the paper a systematic approach for the compu-
ter aided planning, configuration and realization 
of a process control system is outlined which 
supports systematic collection of all necessary 
information, symbolic configuration of the process 
control function and automatic compilation of the 
collected information to various documentation 
files. This procedure may be realized on the pro-
cess control system itself or on special configu-
ration units. The following prerequisites for the 
realization of the outlined computerized design 
procedure are 
• a system data base containing all informations 
about all hardware and software modules re-
quired for system configuration 
• a configuration data base in which all confi-
guration information is collected 
• a CAD systematic which utilizes interactive 
graphic and text editors allowing efficient 
input of ASCII and symbolic informations 
An important general feature of the computerized 
design procedure must be an efficient user 
guidance through the configuration path utilizing 
extensively help information assistance thus 
making sure that all informations necessary for 
the realization of the system function are 
collected. 
In addition it will be indicated, how the func-
tional configuration, test and start-up of the 
process control system can be supported by compu-
ter simulations, process identification and self-
tuning features being part of the process control 
system itself. 
SYSTEM PLANNING 
In the planning phase for the process control 
system all requirements for process control and 
operation have to be collected as basis for the 
system configuration. These informations are ob-
tained from the designers of plant and processes 
for which the process control system is to be 
applied. The information interface between process 
and process control system designers consists in 
general of 
• P&I (piping and instrumentation) diagrams in 
which the principle interconnections between 
different process units, measurement and con-
trol points can be found with process specific 
names as defined by the process designers which 
are named in the following "tags", see the 
example in Fig. 3 
• functional specifications of the process I/O 
points 
• 
specification of process control and operation 
functions. 
The collection and use of these specifications can 
be supported efficiently by computer aided proce-
dures during which the following informations are 
entered in the configuration data base 
• P&I diagram: this is constructed by means of a 
CAD systematic using standard symbol libraries 
for process units like valves, pipes, boilers 
and enabling the efficient manipulation of all 
graphic objects, i.e. placement, copying etc. 
By entering I/O point tags in the P&I diagram 
in a standardized way basic informations on the 
I/O point related functions may be transferred 
automatically, i.e. informations on the physi-
cal character of the signal like temperature, 
pressure or flow, the kind of use for indica-
tion or recording, and the kind of use for 
process control. 

Computer Aided Configuration and Start-up 
317 
SYSTEM CONFIGURATION 
PIC-40 24 
LIC-4027 
TRC-4022 
Bottom Product 
During the system configuration phase hardware and 
software components of the system are configured 
to meet the requirements established in the plan-
ning phase. Using the computer all configuration 
can be done interactively making use of the speci-
fication information collected in the configura-
tion data base and entering the new configuration 
information into it; furthermore the computer can 
provide from the system data base all required 
information on I/O and system devices possibly 
required for system hardware configuration and 
also on the function modules available for the 
system software configuration. 
The first step of system configuration is the 
organization of the different system devices on 
the three system levels: 
• process I/O level: assignment of process I/O 
points to process stations 
• process station level: assignment of process 
stations to process modules, i.e. definition of 
standard/supervisory stations for process 
units/areas etc. 
• operator station level: assignment of operator 
stations to process modules, i.e. definition of 
local/central operator stations for process 
units/areas etc. 
The result of this step are assignment lists and 
hierarchy trees which are stored in the configura-
tion data base. 
Fig. 3: P&I Diagram 
• process I/O specification lists: the I/O point 
specific informations which are included in the 
P&I diagram are automatically selected from the 
graphic information and entered into process 
I/O specification lists. The user has to comple-
ment these lists by further functional specifi-
cations of the I/O points and the process con-
trol functions directly related to them 
• formalized process control and operation func-
tion specification lists: additional specifica-
tions of the process control and operation 
functions which cannot be related directly to 
process I/O points must be collected in forma-
lized requirement lists concerning 
- hierarchical organization of process modules 
defining process areas, units, etc. 
complex continuous control strategies 
sequence control functions 
batch control strategies 
- operator displays and interactions 
- process and system set-up management 
- safety and reliability requirements 
All these informations must be transferred from 
the designers of the process to the process con-
trol system designers. This can be accomplished 
either manually, i.e. during the planning phase 
the information is selected from planning sheets 
and P&I diagrams and entered into the computer, or 
more or less automatically provided that the 
informations have already been collected during 
the process design in a general process data base 
from which the above described specification 
informations can be generated and entered auto-
matically in the configuration data base. 
The second step of system configuration is the 
definition of the required system hardware. This 
will be done making use of the system data base 
providing all informations on hardware devices 
available: 
• process I/O hardware list: assignment of 
sensors, actuators, transducers to process I/O 
points, definition of back-up/redundant devices 
based on the process I/O specification lists 
• process station hardware list: configuration of 
process station components like processor 
boards, local operator interfaces, termination 
panels etc, definition of back-up/redundant 
devices 
• operator station hardware lists: configuration 
of operator station components like processor 
boards, monitors, keyboards, mass storage 
devices, interfaces etc., definition of back-
up/redundant devices 
From the information collected in this configura-
tion step in the configuration data base and from 
the system data base, I/O and system part lists 
and also I/O and system installation instructions 
can be generated. 
The third step of system configuration is the 
transformation of the formalized description of 
the process control and operation functions into 
the software configuration of the system. In many 
process control systems this is done by connecting 
function blocks in configuration lists and defi-
ning their parameters. Using CAD methods this can 
be accomplished by connecting symbols for function 
blocks on the screen e.g. for PID-controllers or 
logic functions, compare Fig. 4, and combining 
this with fill-in-the-blanks procedures for the 
definition of direct function connections, thus 
generating all functional interconnections defi-
ning as a whole the software configuration of the 
system. 

318 
R. Schumann 
Input 
FRC-4021 
TRC-4022 
I Input 
FIC-4023 
PIC-4024 
LI C-40 25 
FR-4029 
Loop Configuration 
I Input I 
I input 1 I PIP t 
I Out 1 
M 
Oil 
H 
11ΓΊ2 
20ΓΊ3 
55| 
I Input I 
I PlP 
I 
I Cose. I 
II 
Ι1ΓΊ2 
20ΓΊ3 
2^1 
:IC-4023 
I 
I Input I 
I input I 
I PIP I 
I Out I 
II 
Oil 
11 
111 |2 
2 0 Γ Ί 3 
55) 
] Input I 
I PIP I 
| Out 1 
1l 
11ΓΊ2 
20ΓΊ3 
55l 
•RC-4026 
I 
I Input I 
I input I 
I PIP I 
I Out I 
II 
Oil 
h 
11ΓΊ2 
20113 
55l 
LIC-4027 
I Input I 
I Input ) 
I PIP | Γ 
" 
M 
11ΓΊ2 
20ΓΊ: 
I Input I 
I Intern I 
U 
oil 
12 041 
Configuration MICON P-200 for Fractionating Column 
for the different system devices the analysis of 
memory and processing power reguirements and of 
timing problems, especially with respect to the 
communication lines. This can be efficiently 
supported by built-in diagnosis and seiftest 
utilities which should be a standard feature of 
all system devices. In this context also system 
failures may be simulated in order to test 
configured redundancy concept. 
The test of the process operation itself can be 
supported by computer simulations of the process 
behaviour if sufficient mathematical process 
models are available. These models could be gained 
by theoretical modeling and/or by process identi-
fication methods in case that the process is 
already existing. With such process models a 
realistic simulation of the complete process 
control function and process operation can be 
realized which enables besides system test also a 
basic training of the process operators. 
Also the reaction of the system and/or the 
operators to process and system failures can be 
tested. The result of all tests should be an 
optimization of all system and process operation 
functions with respect to the anticipated hardware 
and software configuration. 
CAE of Complex Control Strategies 
For the design and optimization of complex control 
strategies CAE methods can be utilized if mathe-
matical process models are available. These 
process models can be gained by theoretical 
modelling of the process dynamics or by computer 
aided process identification, compare Fig. 5. 
Fig. 4: Symbolic Control Function Configuration 
The operator displays are generated in a CAD like 
fashion with function elements for dynamic 
displays parts, virtual keys etc. 
On the different system levels the following tasks 
have to be accomplished for the system function 
conf iguration: 
• 
configuration of process I/O related functions: 
signal conditioning like filtering, lineariza-
tion, compensation; alarming by limits and 
alarm reporting mechanism; preprocessing like 
position control, local logics 
• configuration of process station functions: 
continuous control; seguence and batch control; 
alarming and alarm management; local operator 
interfaces 
• configuration of operator station functions: 
process displays for monitoring and operator 
interactions ; reports and report formats ; 
process specific help assistance displays; 
process/system set-up and alarm management. 
The results of this step are the symbolic 
configuration displays and the process control and 
operation programs derived hereof for process and 
operator stations which are stored in the 
configuration data base. 
SYSTEM TEST AND SIMULATION 
During the system test phase the correct operation 
of the system itself and in connection with the 
process to be controlled must be tested. For the 
test of the system itself this includes the 
simulation of system operation which will enable 
Process identification is based on the analysis of 
the measured process input and output signals 
using correlation or parameter estimation methods; 
this means that process models can be obtained 
from measurements of process signals provided that 
the process is available. A variety of process 
identification procedures have been developed and 
applied during the last decade for the experimen-
tal modelling of single- and multivariable 
processes, compare e.g. Eickhoff (1974), Isermann 
(1971, 1981), such that they are now ready for 
industrial application e.g. in process control 
systems. 
mathematical 
process model 
COMPUTER-AIDED 
PROCESS ANALYSIS 
process 
identification 
PROCESS 
Fig. 5: Process Identification 

Computer Aided Configuration and Start-up 
319 
Based on the computer simulation of process 
models control strategies for single loops and 
complex control problems can be designed and 
optimized with CAE methods by the engineer working 
interactively with the computer. A typical 
example of such a computerized process analysis 
and design procedure is described in Mann (1983) 
for a large rotary dryer in the sugar industry. 
CAE Functions for System Start-up 
The system start-up phase can be supported 
efficiently by the built-in test utilities and CAE 
functions already used during the system test 
phase. On-line the CAE functions as already des-
cribed for the system test and simulation phase 
can be applied for controller tuning and process 
optimization. 
SYSTEM INSTALLATION AND START-UP 
The first step in this phase is the ordering of 
all parts and devices which are reguired for 
system installation. The reguired part lists can 
now be gained from the system data base and the 
configuration data base in which during the system 
planning and configuration phase all necessary 
information have been stored. 
For the system installation all necessary documen-
tation can be gained from these data bases too, 
i.e. the stored informations are rearranged to 
system installation instructions containing all 
necessary informations about wiring, power 
reguirements etc.. 
Another CAE function, which may be utilized during 
the system start-up phase is the selftuning func-
tion, which can be characterized as the on-line 
combination of process identification and 
computerized controller design, compare Fig. 6.a. 
The selftuning function will automatically tune 
control parameters like the PID parameters thus 
simplifying and shortening the tuning of control 
systems considerably. An example for the tuning 
of a PID-control1er as realized on a small indu-
strial operator station (VDO MDC-60) is shown in 
Fig. 6: The tuning procedure starts with the on-
line identification of the process dynamics in 
open or closed loop applying a defined test signal 
to the process input. After the process model has 
been gained the step response of the identified 
process model is shown on the screen, see Fig. 6c, 
thus giving a rough information on the guality of 
the identified model. The next step is the deter-
mination of the PID parameters by an optimization 
Tape 
Host 
1 
Process 
Station 
P-200 
I Î M D C -60 Ί 1 
J 
ό 
.] 
ςΐπυη 
1 
1 
Mave 
|— 
^ 
Process 
Station 
P-200 
Printer 
PLC 
1 
Process 
Station 
P-200 
Process 
Station 
P-200 
Fig. 6a: Selftuning Control Principle 
Fig. 6b: Basic MDC-60 Configuration 
MI CON 
DEV 
! 
SP/U 
PV/X 
OUT/Y 
LOOP 
2 
PR I 
• il 
LJJJ 
20.00001 
20.4Ί02Ι 
25.Π29Ι 
AUTO/« 1 
1 i 
1 
S E L F T U N I N G 
COMPUTATION OF PID-PARAMETER 
PESTART IDENTIFICATION 
TERMINATE SELFTUNING 
MODEL-STEP-RESPONSE 
1.8* 
13:26:50 
30.08.84 
13:27:24 
DEV 
SP/U 
PV/X 
OUT/Y 
LOOP 
r i l l 
I I 
20.QOOOI 
21.75201 
19.28561 
AUT0/R 1 
1 1 
1 
S E L F T U N I N G 
SWITCH OVER PID-PARAMETERS 
RESTART IDENTIFICATION 
TERMINATE SELFTUNING 
CALCULATE STEP-RESPONSE 
CLOSED-LOOP STEP-RESPONSE 
KP: 
KI = 
KD = 
2.1667 ( 
5.6883 ( 
0.0529 ( 
1.0000) 
5.0000) 
0.0000) 
Fig. 6c: Process Model Step Response 
Fig. 6: Selftuning of PID-Controller with MDC-60 
Fig. 6d: Simulated Closed Loop Step Response 

320 
R. Schumann 
algorithm, resulting in a proposal for these para-
meters which is illustrated by the simulation of 
the resulting closed loop step response, see Fig. 
6d. After the result of the selftuning procedure 
is considered sufficient the controller parameters 
can be transferred to the on-line controller, i.e. 
to the process station P-200. 
The selftuning functions based on process identi-
fication can be applied in open and closed loop 
which makes them in principle also applicable as 
on-line adaptive controllers, see e.g. Schumann 
(1982), Radke (1984). In this form they may also 
be applied during the process operation phase for 
the control of processes with nonlinear or time-
varying dynamic behaviour. 
SYSTEM OPERATION 
During the system and process operation phase the 
process control system can support all operations 
by using the information in the configuration data 
base and the system data base. During normal pro-
cess operation the following aids can be provided 
• built-in system and process operation 
assistance: This function can be looked at as a 
generalized help assistance function, i.e. all 
help informations provided for the system and 
all help displays which have been generated for 
system and process operation during the system 
configuration phase are available now to 
support all phases of process and system opera-
tion. In addition these informations may be 
compiled to form the operation manual for pro-
cess and system 
function lists). Together these reference informa-
tions represent an on-line operation manual inclu-
ding all assistance information required during 
operation. 
CONCLUSIONS 
Design and operation of a process control system 
can be considerably simplified by making use of 
the computation facilities of the systems in the 
above described ways. The main advantages for 
design and operation of the system are summarized 
in the following statements: 
• 
the general handling of system and process is 
simplified by extensive use of preconfigured 
and configured help assistance 
• 
the user guidance makes sure that all infor-
mations required for the system configuration 
is collected completely and only once 
• 
in the system the complete information about 
system devices and functions is stored and can 
be accessed during all phases of system design 
and operation 
• 
the collected information can be utilized to 
provide all kinds of documentation files inclu-
ding part lists, installation instructions, 
assignment lists, reference lists etc. 
• 
the configuration data base and also the 
configured process specific help displays can 
be taken as basis for the process and system 
operation manual 
• 
flexible report and report format generation: 
all actual informations about system and 
process state can be combined with the confi-
guration information to reports including 
journal informations, configurable logs and 
protocols which may be initialized by the 
operator, time marks or system and process 
events 
• 
system and process set-up management: one of 
the most important tasks during process opera-
tion is the handling of system and process set-
ups. By using the configured alarm management 
functions the operator can be guided through 
process set-ups by appropriate alarming paths, 
alarm help information and emergency shut-down 
strategies. Also expert system support can be 
made available for the set-up management which 
allows both, the systematic collection of set-
up management strategies as applied by 
experienced operators, and the utilization of 
these informations for set-up management by the 
computer. The storage of sequence-of-event 
informations allows in addition the analysis of 
causes for system set-ups 
• on-line system diagnosis: By using the built-in 
seiftest and on-line diagnostics, failures of 
system functions can be readily discovered. If 
redundant devices have been configured, the 
faulty devices may be replaced automatically 
with respect to their functions. In any case 
the system can provide maintenance recommenda-
tions to the operator thus allowing easy 
replacement of the respective system parts. 
Furthermore all informations collected during 
system configuration can be utilized now as system 
and process reference information related to plant 
organization (area/unit/group), system organiza-
tion (local/global stations), I/O point references 
(assignment lists, functional interconnections) 
and function configuration (symbolic displays, 
• 
the use of CAE methods for process identifi-
cation, simulation and control system design 
can shorten the start-up and tuning phase of 
the process control system and improve the 
system performance 
• 
the system and process set-up management can be 
improved and may even be supported by making 
use of expert system functions 
• 
the on-line seiftest and diagnosis features 
together with specific use of redundant system 
parts can dramatically increase system 
availabilty. 
Looking at the features of process control systems 
available now it can be stated that a new phase of 
computerization of process control is just 
beginning. 
REFERENCES 
Eyckhoff, P. (1971). System Identification. 
John Wiley, Londen. 
Isermann, R. (1971). Prozessidentifikation. 
Springer, Berlin. 
Isermann, R. (1981). Digital Control Systems. 
Springer, Berlin. 
Mann, W. (1983). Digital Control of a Rotary Dryer 
in the Sugar Industry. 
Automatica, Vol. 19, No. 2, pp. 131-148. 
Radke, F. (1984). Ein Mikrorechnersystem zur 
Erprobung parameteradaptiver Regelverfahren. 
Dissertation, TH Darmstadt. 
VDI Fortschrittsberichte, Reihe 8, Nr. 77. 
Schumann, R. (1982). Digitale parameteradaptive 
Mehrgroessenregelung. Dissertation, 
TH Darmstadt. PDV-Bericht KfK-PDV 217, 
Kernforschungszentrum Karlsruhe GmbH. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
PROCESS CONTROL SYSTEMS 2 
INTERACTIVE TOOL WITH TRANSPARENT 
REAL TIME SYSTEM SOFTWARE FOR 
PROCESS CONTROL 
£. Bouzou 
Servolaboratory, Building 327, Technical University of Denmark, 
DK-2800 Lyngby, Denmark 
Abstract. An interactive graphical tool to define real time applications for process con-
trol is presented. Interactivity and graphical representation make the work of the user 
of the tool easy and the real time system software transparent to him. The task of the 
programmer is also simplified, roughly reduced to the writing of the controllers, all 
real time and communication aspects being solved. 
Keywords. Computer application, computer control, computer software, industrial control, 
process control. 
INTRODUCTION 
The purpose of this paper is to present an Interac-
tive Tool (IT) for process control. The IT provides 
an easy way to define, modify real time applications, 
and display data to help the designer of the con-
troller. A real time application is essentially com-
posed of processes (part of programs which must be 
executed sequentially) and connections between pro-
cesses to allow those to communicate. Interactivi-
ty is helped by a graphical representation that 
gives an updated image of the real time application. 
The target computer is a Hewlett Packard 1000 A 600 
+ (real time software: RTE-A). The IT is written in 
FORTRAN 77 and is itself composed of two processes: 
one for the graphic (independent of the computer's 
software) and one for the interface between the 
graphic and the real time software which is depen-
dent on this software. 
DESCRIPTION OF THE IT(user's point of view) 
Description of a process control real time appli-
cation. A simple process control real time appli-
cation is represented in figure 0. The process CON-
TROL in communication with the real process to be 
controlled provides the control command. If the 
controller is to be tested, it is required, for 
safety reasons, to dispose of a backup command pro-
vided by a backup controller and used whenever the 
controller to be tested command is not suitable. 
The real time application structure is changed like 
in figure O.b. There is no reason to suppose that 
the controller to be tested is only composed of one 
process, but of several processes communicating be-
tween each other (the same remark applies for the 
backup controller). The communication (exchange of 
data or information between processes (boxes) is 
represented by connections between processes. As 
two commands for the real process are now avail-
able, a supervisor process is needed to choose 
which one has to be used. It is now up to the super-
visor to communicate with the real process. In the 
following, the chain containing the backup control-
ler will be called 'backup chain' and the chain 
containing the controller to be tested will be cal-
led the 'controller chain'. As a lot of elaborated 
controllers need it, it has been provided the pos-
sibility to define a parallel reference model for 
the real process: REFM0 shown in figure 1. At the 
same time data is sent or got to or from the real 
process by the supervisor, data is sent or got to 
or from the reference model. All this data is then 
available for treatment in the backup and control-
ler chains. 
The last element of the structure (fig. 1) SERVICE 
is a service process to display, in different forms, 
data sent by other processes. 
The complete structure (fig. 1) defines then five 
kinds of processes: 
- backup processes 
- controller processes 
- supervisor processes 
- reference model processes 
- service processes 
CONTROL 
F i g . 0. 
Simple process c o n t r o l s t r u c t u r e . 
SUPER 
VISOR 
Ί 
BACKUP 
BACKUP 
CHAIN 
II CONTROL 
II 
1 
CONTROLLER 
CHAIN 
[CONTROL 
1 n 
Fig. O.b. Basic real time application structure. 
321 

322 
E. Bouzou 
REAL 
VPROCESSy 
Jl 
REFMO 
SUPER 
VISOR 
BACKUP 
CONTROL 
1 
CON TROUT 
n 
{ 
SERVICE 
The screen is split in two parts: on for the gra-
phic and one for data other than graphic used by 
the IT to display commands questions and error mes-
sages. 
Graphical Part. Small dots represent a matrix on 
the screen (cf. fig. 4). Each dot of the matrix is 
an available place to draw a box. 
MAX: 
5 CONNEC = 
TIONS 
NAME 
M A X : 
5 CONNEC 
T I O N S 
PROCESS 
INPUT 
PROCESS 
OUTPUT 
F i g . 1 . 
Complete r e a l time a p p l i c a t i o n s t r u c t u r e . 
F i g . 3. 
Graphical process representation. 
SUPER 
J 
VISOR 
CONTROL 
Fig. 1.b.Smallest real time application structure. 
REFMO 
SUPER 
VISOR 
BACKUP 
«CONTROL) 
[CONTROL 
3 
SERVICE 
D I F F 
NON 
TYPE 
STANDARD 
PROCESS 
Fig. 2. Extended real time application structure. 
The smallest possible structure supported by the 
IT is represented in figure 1.b. One supervisor and 
one controller process (or backup). Before running 
a real time application, the IT checks that the 
structure agrees with the one represented in figure 
1. This structure can be extended, but no supple-
mentary checks of structure are added (cf. fig.2). 
The structure in figure 1, can be used for simula-
tion purposes. The reference model process can be 
replaced by a process simulating an existing real 
process not available. 
Graphical Representation. The graphical representa-
tion (on graphical screen) of the real time applica-
tion is like the one of figure 1. A process is re-
presented by a box (cf. fig. 3). The name in the 
box is the name of the program in memory associated 
with the process. 
GRAPHICAL 
PART OF 
THE SCREEN 
DISPLAY OF 
C O M M A N D S 
Fig. 4. Graphical screen definition. 
Part to display commands, questions, error messages. 
The graphical commands available to the user are: 
- create element: 
To create a box on the screen. 
- delete element: 
To delete a box on the screen and all the connec-
tions attached to this box. 
- connect elements: 
to connect two boxes. 
- disconnect elements: 
to disconnect two boxes. 
- name element: 
to give or change the name of the box. The name 
can be given when creating the element. 
- displace element: 
to displace a box and relevant connections on the 
screen, to make the drawing more readable. 
- clear all: 
to reinitialize screen and memory. 
- use "A" to abort and "?" for help. 
A graphical pointer is used for the graphical com-
mands. 
Besides the previously defined graphical commands, 
it is required to add the following commands: 
- start chain: 
To start backup or controller chain. 
- stop chain: 
To stop backup or controller chain. 

Interactive Tool 
323 
- initialization: 
To initialize process parameters, clocks or share-
able extended memory area. 
Each command makes the interface with the real time 
software transparent to the user. 
C L O C K 1 
A 
I I 
_1_L 
R E A D D A T A 
F R O M REAL 
P R O C E S S A N D 
REFERENCE M O D E L 
SEND DATA TO 
REAL 
P R O C E S S A N D 
R E F E R E N C E 
M O D E L 
Fig. 5. Clocks description. 
Running a real time application. When a suitable 
structure for the real time application has been set 
up, the user starts execution of either one or two 
of the backup and controller chain, using the com-
mand "start chain". After checking the structure, 
the IT asks the user to define the clocks associated 
with the supervisor of the real time application. 
There are two clocks to be defined. One precising 
the sample time period: clock 1; the second being 
an estimation of the computation time (upper limit) 
in the backup chain and/or the controller chain: 
clock 2 (cf. fig. 5). Clock 2 is used by the IT, as 
a time parameter to wait answers from processes when 
dialoging with them, and the supervisor: It is a way 
for the supervisor to know if the controller or 
backup chain command arrives in due time. When the 
clocks are defined, the IT sends a message to the 
supervisor to precise that the backup or controller 
chain is to be activated. Then the IT schedules, ac-
cording to clock 1, a clock process, in charge to 
send a clock buffer to the supervisor every due time. 
Flow chart during one sample time period for the 
real time application. When the supervisor receives 
a clock process buffer (clock 1), it gets data from 
the real process (and the reference model process 
if any), then sends a buffer containing this data 
to each active chain (backup and/or controller) and 
puts itself in a suspend time state, according to 
clock 2. After this waiting time has elapsed, the 
supervisor is rescheduled and tries to get the buf-
fers at the end of the active chains, then chooses 
which buffer has to be used and sends relevant data 
to the real process (and the reference model process 
if any). It then waits for an other clock process 
buffer. To stop a chain, use the command "stop chain". 
Modifications on line. 
Modifications of structure. Any modification (chan-
ging names of processes, disconnection of two pro-
cesses etc..) online of the real time application 
structure (cf. fig. 1), deactivates automatically 
the chains involved by the modification, if active. 
This does not apply for service processes, reference 
model processes and processes of a different kind 
than those cited. 
Modifications of parameters. Each process has usual-
ly some parameters to be intialized. These parame-
ters are initialized when creating the element or 
on line when chains are active. The initialization 
parameters buffer is 256 words. When communicating 
between each other, processes exchanged buffers: 
size 256 words. The size of these two kinds of 
buffer (initialization parameters buffer, communi-
cation buffer) can be a too big limitation, if pro-
cesses need to initialize big matrices or pass them 
to other processes. Therefore a shareable extended 
memory area (SEMA) has been defined accessible by 
all processes. As synchronisation problems could 
arise a resource number (equivalent to a semaphore), 
the same for all processes, is passed to each crea-
ted process. This resource number gives exclusive 
access to SEMA. 
Display of data. As said before, it is possible to 
connect or disconnect processes with a service pro-
cess without stopping any chain. The period for dis-
play of data is a multiple of the sample time peri-
od clock 1, display period that can be initialized 
during process initialization. When connected to a 
service process, a process sends a buffer contai-
ning the data to be displayed to the service pro-
cess every due time. 
DECRIPTION OF THE IT(programmer's point 
of view). 
The IT has to exchange different kinds of informa-
tion with each process. This is possible only if 
each process has a predefined structure allowing 
this dialogue with the IT: father process of all 
other processes. 
A suitable process is then composed of the follow-
ing elements: 
- a prefix file: it is a symbolic file. 
- a standard main program 
- programmer's subroutines 
The prefix file: The first information in the pre-
fix is the type of process. Two characters are used 
to precise the process type. Standard types are: 
IP : for reference model process (or simulation 
process) 
BP : for backup process 
CP : for controller process 
SV : for supervisor process 
SP : for service process 
Standard process types are used by the IT to check 
the structure of the real time application. Other 
process types can be defined by the programmer. 
The second information in the prefix concerns pos-
sible connections for the process. A connection 
between two processes is the possibility for these 
two processes to exchange a buffer using a mail box. 
To differentiate the connections (from and to the 
process), the IT expects to find a type of connec-
tion associated to each of them. Two characters are 
used to precise the connection type. The standard 
types are (cf. fig. 6): 
PC : connection to or from reference model process 
(or simulation process) 
BC : connection to or from backup process 
CC : connection to or from controller process 
SC : connection to service process 
Standard connection types are used by the IT to 
check the structure of the real time application. 
Other connection types can be defined by the pro-
grammer. Two processes can be connected by the IT 
only if they have a same connection type in common 
(and only one). 
The third information in the prefix concerns the 
questions, asked to the user, to initialize process 
parameters. This part of the prefix is used when-
ever the user uses the command "initialization" to 
initialize a process. 

324 
E. Bouzou 
The standard main programs. There are two sorts of 
standard main programs: one for the supervisor pro-
cess (to be used whenever a supervisor process is 
built) and one for any other kind of process: ordi-
nary process. The ordinary standard main program 
supports a process structure like in fig. 7. The 
main input and output connection types should be pre-
cised in the prefix file. The supervisor standard 
main program supports a process structure like a 
fig. 8. If other connections than those provided by 
the standard structures are desired, the IT will 
establish them, when ordered to, but it is up to 
the programmer in his own subroutines to use the 
relevant real time software subroutine calls for 
the exchanges of buffers using these connections. 
Part of the data defined in the standard main pro-
grams has to be available in the programmer's sub-
routines. It is therefore stored in named COMMONS 
available in these subroutines. 
PC 
REFMO 
SC 
CC 
SUPER 
V I S O R 
PC 
BC 
BC 
BACKUP 
CONTROL 
BC 
CC 
BACKUP 
CC 
CONTROÜ 
SCL 
SC 
SERVICE 
Fig. 6. Standard communication types. 
MAIN INP -4 
I SC 
-MAIN 
OUTPUT 
TO SERVICE 
PROCESS 
Fig. 7. Ordinary process standard structure. 
The shareable extended memory ares: SEMA (specific 
RTE-A software feature). As stated a SEMA has been 
defined to allow large data exchange. This SEMA 
can be used in each process, provided to load as 
first module, during linking, a predefined BLOCK 
DATA containing the array in common, and to speci-
fy in due places, the compiler's directives needed 
when using the SEMA. 
Sum up. To built a process, it is required: 
- to write a process prefix file 
- to write subroutines INIT, APPLIC 
for a real time application structure like in 
fig. 1,communications between processes are taken 
care of in the main programs. 
In the executable program are loaded: 
- the block data corresponding to SEMA as first 
module (if SEMA is needed) 
- the relevant standard main program 
- the programmer's subroutines: INIT, APPLIC, ... 
During the linking sequence, each process should be 
given a priority. 
CONCLUSION 
The interactive software for process control pre-
sented in this report is partly depending on the 
real time software implemented on the HP 1000 A: 
RTE-A. Nevertheless, keeping the same structure 
for the program, it could be adapted to an other 
real time software using its corresponding featu-
res. The safety of the real process being the high-
est priority, a real time software providing a high 
degree of security (for example during exchange of 
information between processes) is needed. From this 
point of view, the RTE-A software is not ideal, but 
the interest of the IT remains. Using the IT pre-
supposes that process control programs are avail-
able. The construction of these programs has been 
standardized as much as possible. Nevertheless, the 
existence of a library of programs compatible with 
the IT would increase its interest (existing soft-
ware could be used and modified). 
REFERENCES 
P C 
PC 
C C 
SUPER 
VISOR 
CC 
-SC 
B C 
B C 
Fig. 8. Supervisor standard structure. 
Programmer's subroutines. There are at least two 
programmer's subroutines: one called INIT and the 
other one called APPLIC. When updated, the process 
parameters are stored in a buffer. The programmer 
should update his own variables using this buffer 
in INIT. 
APPLIC contains the inten-
ted task of the process. In the supervisor case, 
this task is to choose between the backup and the 
controller chain. INIT and APPLIC can access use-
ful data through the COMMONS defined in the stan-
dard main programs. For a supervisor process, two 
extra subroutines have to be defined: one to ini-
tialise data communication with the real process 
INI10 and one to execute the communication with the 
real process DOIO. In fact two standard subroutines 
have been written which should cover all applica-
tions, so that even for a supervisor process, only 
INIT and APPLIC have to be written. 
Blanke, M., Holt, H., Levin, M.L., Spiegelhauer, 
A.V.: Multiprocessor System for Automatic Con-
trol Purposes, System-description. Servolabora-
tory, Technical University of Denmark. 1979. 
Spiegelhauer, Arne, V.: System Software for Process 
Computers. Servolaboratory, Technical Universi-
ty of Denmark. 1982. 
Fars0e, Henrik, F., Andersen, Torben, R.: A regula-
tor Management System at the Mulreg System. 
Servolaboratory, Technical University of Den-
mark. 1982. 
Hewlett Packard Manuals: RTE-A User's Manual, 
RTE-A Programmer's Reference Manual, RTE-A Sys-
tem Design Manual etc.. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
APPLICATION OF A MULTIVARIABLE 
ROBUST CONTROLLER DESIGN METHOD TO 
HARD-COAL PREPARATION 
B. Cuno* and W. Neddermeyer** 
*AEG, Frankfurt/M., FRG 
^Technical University of Darmstadt, Institute of Control Engineering, 
Darmstadt, FRG 
Abstract^ The paper describes an application of a robust controller design method for 
calculating the parameters of a controller for a multivariable hard-coal preparation 
process. The parameters are optimized via a sequential design method in the frequency 
domain, being based on a combination of the Horowitz/Sidi design (1972), Mayne's (1973) 
sequential design and Steinhauser/Kreisselmeier's (1979) vector performance criterion 
method. The design was carried out using a relatively sophisticated CAD-program. The 
paper shows how the parameters are calculated with this CAD-method and discusses the 
simulated control results. The simulation is compared with the measured results at the 
plant after implementation of the designed controller on a process computer AEG 80/30 
with a real time software control package ARSI . 
Keywords. Multivariable robust controller design, parameter uncertainty, vector per-
formance criterion, CAD. 
I. INTRODUCTION 
The plant at hand is given by two coal bunkers in a 
coal preparation process, which follows the under-
ground operation of a coal mine. In order to re-
duce the production changes in crude coal the bunkers 
are used to keep an uniform coal flow. The investi-
gated part of the whole plant is sketched in fig. 1. 
bunker 11 
|R 
| 
|fl bunker 2 
actuator! 
*mo 
£ T^T 
\y 
^^y 
actuator 2 
Qmo 
2 
3 t ^ - l 
conveyor 
Fig. 1. Sketch of the process 
The control task considered here is complicated by 
some special effects of the dynamic plant behav-
iour; such as 
i. 
The bunkers input mass flows are not meas-
ured. 
ii. 
The bunker volume is small compared with 
the mass flow. 
iii. The measurement of the coal level in the 
bunkers is strongly disturbed (up to 50%) 
by several effects. 
ARSI is a trademark of AEG 
iv. 
The actuators behaviour depends on the grain 
size, the coal surface moisture and the raw 
coal level in the bunkers · 
v. 
The output mass flow measurement has a con-
siderable delay time compared to the re-
maining dynamic parameters · 
The system can be denoted as multivariable, non-
linear and parameter uncertain. Potential solutions 
of such a control problem may be given by the use 
of adaptive algorithm and the robust controller 
design. As the bunker behaviour sometimes results 
in abruptly changing parameters adaptive control 
must be excluded as a control alternative: 
- self adaptive control cannot provide an accept-
able system performance. 
- 
gain scheduling needs switching conditions which 
cannot be derived from available measurements. 
That is why a robust control structure based on a 
systematic robust multivariable design method has 
been chosen. 
II. THE MATHEMATICAL DESCRIPTION OF THE PROCESS 
AND BASIC CONTROL REQUIREMENTS 
The mathematical description of the process behav-
iour in general can be given by a non-linear dif-
ferential equation 
X_ 
with 
f(X,Y,U,P) 
(1) 
e R U 
input vector 
Y_ € R Y 
output vector 
X_ € R X 
state space vector 
P_ e R P 
parameter vector 
where P_ represents possible changes in system para-
meters e.g. p the specific gravity of the raw coal. 
Defining the workspace of the system by 
W: = {X/X_ 
£ X < x 
} 
lb 
— 
^ub 
lb: lower bound 
ub: upper bound 
(2) 
325 

326 
B. Cuno and W. Neddermeyer 
one can assume that the system can be represented 
in the workspace W by a set of linearized system 
equations. They can also be noted as transfer func-
tions with varying parameters a_ 
P(s,a) :={p(s,a)/P(s,a. .)=L{S. .} X 3 E W P ^ R ^ ; 
(3) 
- 
- 
-13 
ID - 
-
j=l...k ; i=l...l·} 
with 
L { } 
the Laplace operator 
S 
ID 
the linearized system equations in state 
space representation at the operating 
point χ3 and the parameter set pi 
P(s,a_) the transfer function or transfer 
function matrix of the linearized 
system in the workspace W 
-ID 
vector of parameters of the transfer 
function 
The scalar k is the number of different fixed para-
meter set points Χ^, and its choice depends on the 
admissible error € between the real non-linear plant 
and the linearized one. 
The plant as shown in fig. 1 has an input vector t[ 
containing the actuator set points U. ,U0 and the un-
measureable input mass flows Q 
, Q 
. The output 
vector Y_ contains the elements Q 
the measured 
output mass flow and the coal level of each bunker 
1 
2 
H and H . The differential equations describing 
the process behaviour are 
= 
QA 
dH. 
Ρ.·Α(Η.). 
^ 
(4) 
dM. 
dt~ 
dMS 
dt 
-r2- 
= ψ. (H.,a.fy.)Qmo+(i). (Η.,α.,γ.)υ. j=l,2 
dt 
rD 
D D D D 
D D D D D 
with 
ψ. and φ. as non-linear functions of H. the 
rD 
D 
D 
coal level, a. the grain size and γ. the 
surface moisture of the raw coal. 
Fig. 2 shows the bar chart of the linearized pro-
cess model with the above mentioned input/output 
parameters. 
1*"" 
c 
[ΕΪ 
1 
1 
< 
£JSi 
<?r 
r+ 
' + 
,r 
1 Ä m i 
Y_ 
I 
u 
Y-
A 
*i 
Py 
p+ 
hi 
κΑ 
h 
P.(s,a) = — = -r^ 
; i=3,4 
Aq. 
-T s 
P5(s) = e 
i-2 
Τ1^ Γ2 = ΤΤ 
(5) 
The varying parameters a_ of the model are summa-
rized as: 
K. = K?/. 
1 
1 D 
T. = TA/. 
; 
i=l,2 
1 
1 D 
K ± = l/(Pi-Ai/j) 
; i=3f4 
with 
/. : parameter depending on different 
(6) 
linearization points 
In particular the parameter A. represents the chang-
ing of the bunkers cross sections depending on the 
coal level in the bunkers. The parameter p. des-
cribes the varying specific gravity of the bunkers 
contents. Due to coal level, grain size and coal 
surface moisture the actuator parameters KA and T. 
change. The variation limits of the above mentioned 
parameters were measured (K.,Α1) or estimated (TA, 
p.). They are listed in the following table: 
20 
< KA < 33 
Ct/hv] 
23 
< KA < 36 
[t/hv] 
2 
5.36 < A. < 24.97 [ m ] with 1.5<h.<4.8[m] 
1 
i 
1.2-103 < p. < 1.4-103 [kg/m3] 
The model in fig. 2 represents the actuator and 
bunker behaviour. In our practical application we 
have two sensors for measuring the coal level in 
the bunkers. Due to a lot of effects we get un-
certainties in the sensor signals. One can observe 
errors up to 50%. A controller design has to take 
these effects into consideration. Therefore the 
model in fig. 2 has to be extended by a sensoring 
part. The complete model including the disturbance 
inputs d. and the filters F is shown in fig. 3. 
n 
if 
P1 
; 
9Γ 
■+ 
4QJ 
Ί 
9l 
■ + 
+ 
ΛΓ770 
y 
flqî 
'+ 
1 
<?2 
Y-
1 
V 
M + 
* 
il 
F 
q 
F 
£ 
mo 
£ 
Fig. 2. Linearized process model 
Fig. 3. Linearized process model including 
measurement units 
The basic requirements for the design are: 
i. 
A nearly constant mass flow q 
should be 
reached, because the process units following 
the bunkers work in a much better way when the 
mass flow is constant over a time intervall 
which is as long as possible. 
The transfer functions P. are given by 
P.(s,a) = 1+T.s 
u. 
i=l,2 
ii. 
The control loop should work in such a way 
that the measurement disturbancies of all the 
h.-values do not affect the mass flow qmo. 

Multivariable Robust Controller 
327 
iii. The control loop should prevent an overflow of 
the bunkers. 
iv. The bunkers should not become empty. 
III. STRUCTURE OF THE MULTIVARIABLE CONTROL LOOP 
The variables which could be used for feedback are 
the coal level h^, h2 and the output mass flow. The 
actuator set points are u^ and U2· In a preanalysis 
some controller structures using the above mentioned 
input/output variables had been tested and compared 
on the real process. As a result of the preanalysis 
we chose the structure which is depicted in fig. 4. 
êh-0 
The whole procedure which makes use of sequentiell 
design, robust design and a vector performance cri-
terion can only work in a computer aided way. 
The following sections introduce to Mayne's method 
(IV.1) and the robust design very briefly. The use 
of the vector performance criterion and the CAD 
package which were discussed already by Gräser, 
Neddermeyer, Tolle (1982) will be explained in 
section IV.2 and IV.3. 
IV.1 MULTIVARIABLE DESIGN PROCESS 
The structure of the considered control loop with 
two degrees of freedom is shown in fig. 5. 
V(s) rn 
R(s) Wi S(s, a) h 
Fig. 5. Multivariable control loop 
Fig. 4. Control structure 
The control structure contains PI-algorithms as suf-
ficient in most applications in process industries. 
The measured difference of h^ and h2 is one of the 
controlled variables. The other two are given by q m o 
and the average coal level E which is controlled via 
a so called master loop. The Ah-loop comes into con-
sideration because both bunker volumes should be used 
symmetrically. The qmo-loop controlls the main vari-
able q m o in order to produce a nearly constant mass 
flow. However, the output mass flow must be connected 
with the input mass flows otherwise the bunkers might 
become empty or full. Therefore a third control loop 
has to be designed. This master regulator which is 
not considered in this paper sets the commanded out-
put mass flow. However, to fulfill the controll demands 
one has to design the multivariable inner loop in or-
der to control Ah and q m o in a robust way at first. 
The required multivariable design was carried out by 
a CAD method described in section IV. 
IV. ROBUST MULTIVARIABLE DESIGN METHOD 
The plant description indicates that the applied de-
sign method must allow to deal with the following 
restrictions: 
i. The plant is multivariable and parameter uncertain. 
ii. One loop contains a considerable delay time com-
pared to the remaining dynamic parameters. 
iii. The process has very strong limitations for the 
actuator signal range. 
In order to handle the multivariable aspects we used 
the sequential design method proposed by Mayne (1973). 
As in most multivariable design methods using the fre-
quency domain the m-input, m-output multivariable sy-
stem is split down by this method into m-single input/ 
single output systems for design. Frequently used and 
well-known design procedures can now be applied for 
the SISO design. To handle the parameter variations 
and especially to guarantee stability in spite of them 
the quantitative design method proposed by Horowitz/ 
Sidi (1972) for SISO systems is combined with Mayne's 
method, as suggested by Shaked/MacFarlane (1977). For 
the iii-th design restriction and a comfortable way of 
work with the Horowitz/Sidi method (Gräser, Nedder-
meyer, Tolle 1982) a vector performace criterion in 
analogy to the Kreisselmeier/Steinhauser's (1979) de-
sign method was defined and optimized. 
In our special application a one degree of freedom 
structure is sufficient because a prescribed distur-
bance behaviour is required only. According to Mayne 
an additional input vector θ_ is used for the deriva-
tion of the equations (see fig. 5). The dynamic be-
haviour of the closed control loop depending on the 
two inputs is given by 
y_ = T_ V w 
with 
= (I + S R) 
y_ = T_ 
with 
(I + S R) 
S. 
(7) 
(8) 
For the sequential design in connection with a non-
diagonal dominant MIMO system, the i-th design step 
depends on all the controllers determined previous-
ly and it is necessary to mark the different trans-
fer function matrices with a superscript. According 
to Mayne, the following notation is used 
S^ (s) = S_(s) , R (s) = 0, ] 
S R 
(Aq) ^ S = (I 
(s) = R(s) 
-1 
A*(s) 
Rq(s) 
(I + S(s) 
,0...0) 
(9) 
diag(r n 
q q. 
In general, after closing the q-th control loop we 
find for the elements of the system transfer matrix 
S ^ + R 
(s q- 1s q: 1 
ab 
qq qq ab 
aq qb 
ab 
(10) 
ôq denotes the characteristic equation of the q-th-
SlSO-control loop. 
6 = 1 + S q _ 1 R 
(11) 
q 
qq 
qq 
For the sequential method, there are only m stable 
controller designs necessary for S^~ ; q = 1,2...m 
and all methods used for SISO design can be taken 
for that. 
IV.1.1 ROBUST CONTROLLER DESIGN 
The Horowitz/Sidi design method is based upon the 
plant transfer function of the process (here Sq~ 
(s,a)) and the Nichols chart for controller 
design. 
For SISO systems the Horowitz/Sidi-design is normal-
ly divided into three design areas according to gro-
wing frequencies. 

328 
B. Cuno and W. Neddermeyer 
In area one, high accuracy and small effects of the 
parameter variations are demanded. The relative sen-
sitivity of the closed loop compared with the one of 
the open loop has to be less than one. For control 
systems with an excess e > 2 of poles over zeros the 
Bodeintegral 
log |E(jO)) | da) = 0 
(12) 
is valid. As a consequence |E| can not be less than 
one over the whole range of frequencies. So in the 
second design area |E| can only be limited to an mag-
nitude 1 < |E| < γ. In area three, the controller 
gain is very small and the sensitivity of open and 
closed loop are almost the same |E| Ä 1. For quanti-
tative design of SISO-systems within area one, the 
sensitivity of the closed loop 
ΙΔτ (ήω, a) I < α(ήω) 
ο < ω < ω 
1 qq 
— 
w 
(13) 
is limited. In area two, limits for the sensitivity 
lEqq(ja))l - Yl 
(14) 
or of the maximum peak of 
|τ|, 
|Tqq(ju»| < γ 2 
(15) 
with γ., Y2 *" * a r e given> respectively, guaranteeing 
in this way also stability in spite of parameter va-
riations. With the Nichols chart and parameter areas 
for different values s = jü)·^; i = l...n of the trans-
fer function Sg"1 (jü),a) , Horowitz/Sidi transforms the 
requirements as formulated in Eq. 13, 14 or Eq. 13, 
15 into boundaries for the nominal open loop 
L 
(ju), a ) = R 
(joj) Sq~ (ju), a ) 
qq 
-o 
qqVJ 
qq 
- V 
frequency response. 
For the design of a multivariable control system two 
problems have to be distinguished: 
- robustness of the stability under the presence 
of parameter variations, 
- quantitative design. 
The first case demands stability of the characteri-
stic equations of the m-SISO-systems sequentially 
designed. A SISO-system is stable for all parameter 
sets a_ when the open loop nominal frequency respon-
se plot does not penetrate into the closed curves 
(boundaries in the Nichols chart) which are derived 
from Eq. 14 or Eq. 15. Additionally the Nyquist 
criterion has to be fulfilled. 
For quantitative design of the multivariable system 
the sensitivity |Δ Τ 
(ju), a.) | should be limited 
within the frequency range 0 < ω < u)w. In the SISO-
case one holds the design requirements Eg. 13 exact-
ly if the controller brings the magnitude of the no-
minal open loop on the boundaries (Horowitz 1973) in 
the Nichols chart. For the multivariable case these 
relations are not easy to describe. In the sequen-
tial design method the q-th design step may also in-
fluence all transfer functions designed previously 
.q-i. 
S H ± S 
aa ' aa 
a < q. 
Up to now, it is not possible to formulate an exact 
interrelation between the design requirements Eq. 13 
and the sequential design steps. Only for the last 
row of the transfer function matrix T(s) a direct cor-
relation can be derived (Gräser, Tolle 1982). But due 
to the relatively high gains normally used in region 
1, the already designed closed loops are very often 
changed only marginally by closing additional loops 
so that one can live with this design method in ge-
neral also in the multivariable case. 
IV.2 OPTIMIZATION OF A VECTOR PERFORMANCE CRITERION 
A most convenient way to find the denominator and 
nominater parameters r_ of R 
(s, r_) is to make use 
of a vector performance criterion G_(r) which was 
very succesfully applied bei G. Kreisselmeier and 
R. Steinhauser (1979, 1984) for some other problems. 
Therefore the constraints for Lqq(ja), a^, r) and/or 
the controller have been formulated as such a vec-
tor performance criterion G_(r_). The robust design 
requirements derived from the boundaries in the 
Nichols chart are normally representable by the fol-
lowing six elements of the vector criterion: 
gj(r): 
Sum of the deviations of the frequency 
response points Lqq^^i' ^ ) from the 
boundaries B^ to higher gains; 
g (r_) : 
Sum of the deviations of the frequency 
response points L(ju)ir a^) from the 
boundaries B^ to lower gains; 
Component resulting from the \ 
of the high frequency boundaries; 
g^(r_): 
Component resulting from the violation 
g (r_) : 
Gain of the controller (jo) ■> 0) ; 
oo 
g (r_) : 
High frequency gain K of the controller; 
gr (r): 
Stability of the controller. 
o — 
In a practical application one has not only require-
ments which can be easily represented by the fre-
quency domain methods. Such demands are time domain 
spezifications as noted under section IV (strong 
limits for the actuator signal range). 
With the reduction of the design problem to an op-
timization of a vector performance criterion such 
constraints can easily be considered by defining 
additional vector elements. In our practical appli-
cation such elements can be given by 
*6+ i-J 
(y(t,a.) 
y 
) 2 dt 
Jmax 
v t with y(t,a.) > y 
i = 1,2...n. 
2 
i 
Jmax 
IV. 2.1 OPTIMIZATION TECHNIQUE 
(16) 
As the above performance vector elements indicates 
each design aspect is to be rated quantitatively 
by means of a suitable positive design criterion in 
such a way, that reducing the value of a criterion 
always means improvement of a corresponding design 
aspect. In a second step the design is achieved 
iteratively as follows. In the γ-th design step a 
target vector Cj is chosen within the range given 
by 
G (rj'
1) 
< cj < C_Y l 
(17) 
Here r_' * denotes the controller poles and zeros 
which resulted from the previous design step, and 
C^~ 
denotes the associated target vector. In the 
above choice of cY, it is advisable to take cJJ=cT~ 
for those design criteria, which have been made suf-
ficiently small in earlier design steps, whereas 
c|=gi (r_' 
) may be chosen for design criteria, which 
are to be reduced in value further. This determines 
the direction in which the design proceeds. Then rY 
is defined as the solution of a scalar optimization 
problem 
L 
min {- g- In 
I 
exp(3gi (r) /ιψ } . 
(18) 
r_ 
i=l 
Using the definition 
<x(r) : = max (g. (r)/c!) 
l<i<L 
X 
X 
(19) 
the optimization problem can be rewritten in the 
form 
Section IV.1 reduces the multivariable robust design 
problem to the following task: Find a regulator which 
holds the boundaries for the nominal open loop fre-
quency responses. 
1 
L 
g (r) 
min {a(r) + F l n 
1 exp[3(-~ 
r 
P 
i=l 
°i 
a(r))]} 
(20) 

Multivariable Robust Controller 
329 
and the minimization is essentially reduced to the mi-
nimization of the value of a(r_).With Eq. 19 we have 
Sj/E) - a(E> 'ci 
i = 1,2...L 
(21) 
that means minimizing a (r_) is the same task as redu-
cing the value of all design criteria simultaneous-
ly. In the program package described below the op-
timization task is realized with the Hook-Jeeves 
method. 
K>° 
W1 1/m,n 102 
Fig. 8. Bode plots of the uncontrolled plant 
IV.3 CAD PACKAGE 
The program package used here is written in FORTRAN 
77 as a multitasking dialog system which runs on a 
VAX 11/780. Some detailed program descriptions are 
given by Ersü, Neddermeyer, Tews (1983). However, 
the global structure is shown in fig. 6. 
M u l t i v a r i a b l e 
design method 
(4.1) 
' 
q-th 
design 
step 
Robust single 
loop design 
(4.1.1) 
* 
Time domain 
requirements 
(4.2) 
1 
closing 
the q-th 
loop 
1 1 
Optimization of a vector 
performance c r i t e r i o n 
(4.2) 
T 
t 
Graphical 
inspection 
(Nichols chart, step responses) 
Fig. 6. Global software structure 
On the higest level we have the multivariable 
frequency domain design and time domain requirements 
for the multivariable system. As shown in IV.1 and 
IV.2 the multivariable design problem reduces to m-
single loop designs which are carried out by an op-
timization of a vector performance criterion. During 
this process a grafical output supports the user 
choosing the target vectors for the optimization 
and for inspection of the design results. 
V. APPLICATION OF THE INTERACTIVE COMPUTER AIDED 
CONTROLLER DESIGN 
At first the plant is rewritten in a P-kanonical 
system representation. Fig. 7 shows the input/out-
put variables and the location of the transfer func-
tions S . .(s, a) . 
il 
Fig. 7. P-kanonical plant model 
They are given by 
Sn(s,a) = P5(s) · (P^Sja) +P2(s,a)) 
s
1 2
( s'ä) = P 5 ( s ) 
(P^s^a) 
P2(s,a)) 
(22) 
S 21(s,a) = F(s) · (P3(s,a_)P1(s,a)-P4(s,a)P2(s,a)) 
S22(s,a) = F(s) ' (P3(sfa)P1(s,a.)+P4(s,a)P2(s,a)) 
Fig. 8 contains the corresponding Bode plots of the 
parameter uncertain transfer functions S . 
The design requirements for the MIMO problem can be 
summarized as: 
i. 
ΙΔτ (ju),a) I as small as possible for 0<ω<ω 
1 qq 
— ' 
w 
ii. 
|T (ju),a_) | < 2 dB va_,0) 
iii. 
The overshooting of the step response of the 
q -loop should be limited to 10%. 
iv. 
An abrupt measurement disturbance of the coal 
level (o.5 m is a typical value) should not 
disturbe the bunkers output mass flow. 
For the first item i. it makes no sense to require 
absolute bounds on |Δτ|. Due to the non-minimum 
phase behaviour of the plant the bandwidth and as 
a consequence the realizeable robustness are limit-
ed. However, the Horowitz/Sidi-boundaries for the 
first open loop R 
(S,r_) S 
(s,a ) are noted in 
fig. 9. 
"° 
.______L_____L— 
^=4^^χ~.. 
—
' 
[/—*—'—" 
nominal open loop-»i 6 
im\ 
yJTJ 
/Î!*—!—I—__ 
1 i 
Γ" P^3| 
! , 
-
—
-
■ 
-360° 
-180° 
0° 
Fig. 9. Nichols chart of the nominal open loop 
frequency response 
The chosen vector performance index contains the 
terms g ...g mentioned under IV.2 and the time do-
main requirements 
=/ (qm°(t,a.)-wq 
)Zdt 
rqm°.2. 
a6+i 
v t with q °(t/a.)>wq 
i=l,2...n 
(23) 
The optimized nominal open loop (see fig. 9) does 
not penetrate the closed boundaries and frequency 
point 11 (ω=ο.6 [1/min])is on a line of constant 
|Δτ| with |AT|=2.7dB. Additionally in fig. 12d the 
response of a q m o set point step for the lineari-
zation point L is shown. The qmo-trajectory ful-
fills the overshooting restriction. 
The controller parameters are computed as 
1 
, 
R n ( s ) = 0.228|l+ U e 4 s 
(24) 
With this regulator we obtain for the frequency re-
sponse of the first closed loop ^ =Sj R 
the Bode 
plot noted in fig. 10. 
Fig. 10. Bode plot of T 
The frequency plot of S 
with the boundaries ac-
cording to item 
(ii.) and the frequency plot of 
the nominal open loop R0 (s ,r) S* (s,a ) are not 
ZZ 
— 
11 
—o 

330 
B. Cuno and W. Neddermeyer 
shown, since they are in principle similar to fig.9. 
The second regulator was optimzied with the vector 
performance criterion containing g .. .g and 
E 
mo 
«6+i-/ (im0lt'Si>-wq ' d t 
v t with w^1 
i=l,2...n 
The resulting regulator parameters are 
R22(s,r) = 1 . 4 6 ( 1 + ^ 
Fig. 13d shows a simulated disturbance of 0.5 m at 
the linearized plant (L ) . One can see that the 
output mass flow is not disturbed. 
In fig. 11 the frequency response of the closed 
loop ^\2=S\^22 
i s g i v e n · 
101 1/min 102 
Fig. 11. Bode plot of T 
The couplings are not very strong. That is why the 
frequency response 
Due to that it is not shown again 
mized controller parameters have been tested at the 
real plant. The results are given below. 
not very strong. Tnat is wny tne 
of T* is nearly the same as T* . 
not shown again here. The opti-
VI. REALIZED CONTROL LOOP 
The here interesting units of the hard coal pre-
paration plant at hand are controlled by a AEG 80-
30 process computer system. 
The application software used for the realization 
of the feedback control is ARSI80 and AS80 for the 
logic/sequence control. Both systems provide oper-
ating procedures to run the plant automatically 
from start up to normal operation and to manage 
emergency and shutdown operations. Custom tailoring 
of the modular program packages has been made main-
ly off-line while necessary modifications of con-
trol structures could be done during on-line oper-
ation. 
The control structure and the control algorithm 
has been realized in a quasi continuous way. 
Fig. 12,13,14 show the simulation results together 
with the measured traces. 
Ü, 
U2 
Qmo 
[~'~Hy ^f'^^PiÎjt-"F^l 
fe—tr.rarL· 
·| ■ j-Τζτφ: ' 
" ^ ^ . - - J p ^ T Î i - i J ^ - ^ U J 
r~" i \ 
' i—i—ry ^"i 
t^-- L:|--l ' 1 -i -"m ,' 1 ;n 
^ ^ ^ Ξ - £ ^ Ϊ 5 Ξ | Ξ Ξ 3 Ε = ^ Π = Ξ ^ 
1 -- ■-!)- »——f-—r~~f\—f**7"! 
P T ^ § S ^ & ^ ^ ^ 
|Z!\~^7/y[..-[—-J--1 
[-J|-Z!J>S 
p-SN^-jy-* 1 ■ i 1 l| , |„sj 
[ i H :jT--| \■_..: ·] \ 'I t 
^^d(::-^ r i
r~:| 
7 r=4r-4-r< 
tarëë i jfa^pp=| 1 M 
|·-γ-··:| |->--::.i|.-rpi p~T^ 
H1 H 2 
= p j J j i ^ B | | 
=φ=:.ρρ=^|~τ{^ Ε 
=^L^p3Ë 
, [ . | | fi-A— 
is^=y=Ë=i^ 
~ 
E=_, 
q m o 
L r 
H =H =2.2m 
U slLs7.7 V 
1 2 
j 
■ 
μ 
6V 
10V 320t/h360t/h 
2 m 
a 
b
e 
320t/h 
360t/h 
d 
Fig. 12. Step response of the g^ -loop 
Fig. 12 compares the simulated to the real step 
responses of the q m o loop. 
Fig. 13. Disturbance response (0.5 m) 
6V 
10V 
390t/h 
6m 5m 
8V 
10V390t\h 
Lm 
Fig. 14. Disturbance response (0.9 m) 
Fig. 13 and 14 show the influence of the disturbed 
coal level measurement. Looking at the measured and 
simulated trajectories one finds that they are very 
similar. 
In a more general way one can say that the control-
ler fulfills the design requirements in the simu-
lation as well as on the real plant. 
VII. CONCLUSIONS 
The paper describes a multivariable, robust design 
process. The design was carried out with an inter-
active CAD-system. The optimized controller para-
meters are applied to the real process. The process 
behaviour fulfills the required system performance 
in an impressive way. 
VIII. REFERENCES 
Ersü, E./Neddermeyer, W./Tews, V. (1982). REDECK -
A CAD-program package for the control engineer, 
using only mini-computers. IASTED, Applied mo-
delling and simulation - AMS'82, Paris, France 
Gräser, A./Neddermeyer, W./Tolle, H. (1982). CAD 
of the Horowitz/Sidi-design for feedback sys-
tems with large parameter uncertainty. IFAC, 
CAD in Control and Engineering Systems, Purdue, 
USA 
Horowitz, I.M. (1973) . Optimum loop transfer func-
tion in single-loop minimum-phase feedback sys-
tems. Int. J. Control, Vol. 18, pp. 97-113 
Horowitz, I.M./Sidi, M. (1972). Synthesis of feed-
back systems with large plant ignorance for pre-
scribed time domain tolerances. Int. J. Control 
Kreisselmeier, G./Steinhauser, R. (1979). Systema-
tic control design by optimizing a vector per-
formance index. IFAC, CAD of Contr. Systems, 
Zürich, Switzerland 
Kreisselmeier, G./Steinhauser, R. (1984) . Appli-
cation of vector performance optimization to a 
robust control loop design for a Fighter Air-
craft. Int. J. Control, Vol. 37 
Mayne, D.Q. (1973) . The design of linear multi-
variable systems. Automatica 
Shaked, U./MacFarlane, A.G.J. (1977) . Design of 
linear multivariable systems for stability un-
der large parameter uncertainty. IFAC, Multi-
varibale technological systems 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
TOWARDS SUPPORT SYSTEM FOR 
ELEMENTARY TECHNOLOGICAL UNIT 
DESIGN 
P. Domanski*, P. Marczynski* and J. Kopytowski** 
^Institute for Control, Systems Engineering and Telecommunication, University of 
Mining and Metallurgy, Krakow, Poland 
**Institute of Industrial Chemistry, Warszawa, Poland 
Abstract. The framework of the support system for elementary technologi-
cal unit (ETU)design is presented· The ETU is a part of chemical ins-
tallation which works on the base of one reactor· The problem of working 
out the concept of the ETU is discussed· The artificial intelligence 
production system and the branch and bound method as a base of system* s 
algorithm were chosen· The system will be hierarchical and composed of: 
structure generator (which works on higher level on generality) and 
process unit evaluation module· The first one says "what is to be done", 
the second one "how it can be done11· The alternate work of those parts 
is shown. Two-dimensional quality coefficient energy/investement» coming 
down from cost engineering was chosen. The simple example as well as 
working with the system are also discussed. The use of the system as 
a part of economic decision support system is proposed. 
Keywords· Computer aided design; chemical industry; structure genera-
tion; heuristic programming; artificial intelligence; economics. 
PROBLEM STATEMENT 
The methods of computer aided design (CAD) 
which are used in chemical industry enable: 
- the computation of process's parameters 
for assumed installation concept (flow-
sheeting methods), 
- installation optimization related to 
chosen parameters which are decisive vari-
ables. 
If it occurs after optimization procedures 
that the project of the installation does 
not satisfy designer's demands, then he 
must do some changes in it and has to start 
the flowsheeting and optimization procedu-
res once more. This way of working out the 
design does not enable optimization on the 
level of concept. It is not only time-wast-
ing, but also the best one may be omitted. 
The problem is to find a method, which en-
ables consideration of structure alterna-
tives in elementary technological unit 
design, in order that the designer will be 
able to focus his attention on the problem 
of reactions and reactors, which is fre-
quently the crucial point of the chemical 
installation design. 
ELEMENTARY TECHNOLOGICAL UNIT 
The elementary technological unit (ETU) is 
a part of chemical installation which works 
basing on one reactor only. The concept of 
ETU contains the most important data imply-
ing the structure of ETU. It is defined as 
directed graph: 
CONCEPT m <*PU, F> , 
(1) 
where PU is a set of "process units" and 
P is a set of "flows". Process units cor-
respond to nodes of the graph, flows to 
directed arcs. 
What the Process Units and Plows Are 
ÜEhe elementary technological unit is com-
posed of unified units described in cata-
logues, e.g. distillation columns, cyclo-
nes, heat exchangers, etc. They are called 
"process units" and can be divided into 
three main groups: 
I -which are used for changing the physi-
cal parameters of the mixtures flows , 
M- -which are used for separations, 
M+ -which are used for connections. 
I,M- and M+ will be also called "opera-
tions11 and described as: M-(F1,F2fF3) f if 
it separates F1 into P2 and P5 , and: 
M+(F1,F2,F3) , if it connects P1 and F2 
into P3· 
Process units are connected by flows· 
Flow is the homogenous mixture of the ele-
ments called components of the flow. Flows 
correspond to arcs of the graph (1). It 
must be noticed that designer can divide 
given flow in any way he wants· 
Example« Air can be divided in following 
ways: 
1/ Components: Np, 0^, the remaining ones 
are not important· 
2/ Components: N2, 02, Arf C02, S02, 0-
(the greater number of components of the 
same flow)· 
3/ Components: clean air (N2+02), pollu-
tions (some components can be joined)· 
331 

332 
P. Domanski, P. Marczynski and J. Kopytowski 
DESIGN TASK 
The design task is described by: 
1/ Desired products of the ETU 
2/ Available resources 
3/ Reactor's description 
4/ Physico-chemical data concerning consi-
dered components and flows (mixtures) 
5/ Set of available process units with 
their descriptions 
6/ Quality coefficient 
The 4/-6/ will be treated as a given data 
base of the system· The remaining ones can 
be described as sets of flows: 
1/ ETU»s output 
2/ ETU's input 
3/ Reactor's input and output 
The Design Task Formalism 
The design task is formalised as artifi-
cial intelligence "production system" 
described by Nilsson (1982)· The production 
system is composed of global database, 
production rules and control system. 
The global database is a main data struc-
ture used by the system, which describes 
state of design task solving. Do not iden-
tify it with database 4/-6/ above. Here it 
can be defined as following: 
DATABASE · <DATA, GOAL^ 
(2) 
where DATA is ETU*s input and reactor's 
output, GOAL is ETU's output and reactor's 
input· It will be useful to distinguish 
the initial DATA from DATAs which will 
occur during design task solving. It will 
be called INIDATA. 
Pro du c tion rule s are operations on global 
database. In this case they are operations 
M-,M+. It is assumed that GOAL structure 
does not change during problem solving. 
Rules will be described as transforming 
the DATA only. 
Example. Let DATA « {ABC, D}, then 
operation M^ * M-(ABC, AC, B) transforms 
it into: DATA' « M^DATA) » {AC, B, D } . 
ABC means flow of three components: an A, 
a B and a C. 
Applicable rules. The rule can be unappli-
cable to a given database. It is assumed 
that K+/M- operations cannot use FLOW as 
their argument if: 
3 F L 0 W * £ G 0 A L : FLOY/ = FLOW» 
(3) 
It can be derived from: do not spoil what 
is already good. 
Control system chooses rules (operations) 
which are to be applied in a given moment 
of problem solving. It is in fact an al-
gorithm of the system. 
Solution of the Design Task 
Solution of the design task is defined as 
a sequence of applied rules operations 
which satisfy the condition: 
FULL SOLUTION (iNIDATA) - GOAL 
(4) 
The partial solution is a sequence of rules 
which does not satisfy (4). 
Design task is defined then as a pair: 
TASK * <INIDATA, GOAL> 
(5) 
It can be noticed that M operations change 
initial TASK into the new one: 
TASK' « M (TASK) =<M (INIDATA), GOAL>« 
= <INIDATA·, GOAL> . 
Every state of problem solving can be cal-
led "current design task". 
In fact it would be more ttelegant" to de-
fine the solution of the design task as 
a graph, but this definition is more simp-
le for computer applications. 
It must be stressed that such a formalisa-
tion assumes that all data 4/-6/ are sto-
red in database of the system. It is in 
fact too strong assumption, but for the 
sake of simplicity let us say it holds. 
ASSUMPTIONS 
Let us summarize assumptions done: 
1/ Design of the elementary technological 
unit can be developped from so called 
concept of ETU containing (a few) most 
important data only 
2/ The working out the concept of the ETU 
is a hierarchical process 
3/ The structure of ETU is determined by 
M+ and M- operations, the structure of I 
operations will be proposed after working 
out the M+/M- structure 
4/ The physico-chemical data concerning 
considered mixtures and substances are 
available as well as data concerning pro-
cess units 
5/ The solutions, partial ones also, can 
be described by approximate quality coef-
ficient 
6/ Reactor and its parameters are known 
7/ Design task has a solution 
The most important request to the system 
is not to lose the optimal structure 
(the best solution). 
Those assumptions imply that it can occur 
a situation when it is impossible to find 
the best solution. The reasons are: 
- the quality coefficient may be multi-
dimensional, then only Pareto set can be 
obtained, 
- finite accuracy of the quality coeffici-
ent may cause that two, or more, solutions 
have overlapping intervals of its estima-
tion. 
The system produces a set of equivalent, 
from the point of view of quality coeffi-
cient, solutions. 
BASE ALGORITHM - CONTROL SYSTEM 
As the system has to find the best solu-
tion of the design task the backtracking 
control strategy (Nilsson, 1982)is applied. 
As it is important to system not to consi-
der so many alternatives the known from 
operations research branch and bound 
method is taken as a base of the algorithm. 
Decision / Solutions Tree 
All possible solutions of the design task 
can be shown in form of decision tree 

Support System 
333 
(solutions tree). The nodes of the tree 
correspond to the solutions, also partial, 
the arcs to chosen elements of the solu-
tion, i # e . units or operations. 
If arc 
M, connects the solutions Sp and S., than 
51 m S2 uf Mi^ · 0ne 
c a n s a v 2 
S1 i s 
d e v elop-
ped from S2 by adding M^ operation. 
The element of the tree which i s not deve-
lopped from any other solution i s called 
"an empty solution". 
It i s assumed that quality coefficient for 
developped solution i s not less than for 
the original one: 
S p S2 =£ Q ^ ) 
^ Q(S2). 
(6) 
The solutions tree is to be checked, but 
it is impossible to check all of nodes. 
Some of nodes correspond to solutions, also 
partial, which cannot be accepted nor deve-
lopped because of too high value of quality 
coefficient. Those solutions are too expen-
sive. Every solution for which lower esti-
mation of quality coefficient iß greater 
than upper estimation of unless one accep-
ted solutions is rejected. When two solu-
tions have common part, 1·β· S«j m S1au S^, 
52 * S2a u S2b a n d 
S 1 a " S2a ' t n e n ^ β 
different parts, S^ and S^ will be com-
pared. 
Short Description of Algorithm's Acting 
The last considered partial solution is 
developped by applying the rule (operation) 
which has not been used yet. The rules are 
settled in order by the system. If there 
is not such a rule (operation)the last 
element of the solution is rejected and 
this reduced solution is considered. 
Now the estimation of the quality coeffi-
cient of received solution is computed· 
If it is acceptable then: 
- if it is a partial solution: it is deve-
lopped, 
- if it is a full solution: the set of 
accepted solutions is updated, the last 
element of the solution is rejected, and 
received partial solution is to be deve-
lopped» 
If it is not acceptable then the solution 
will not be developped, it is reduced and 
the reduced solution is to be developped. 
The algorithm stops when the empty solu-
tion cannot be developped in any unchecked 
way. 
The algorithm produces the set of equiva-
lent solutions, concepts, which can be put 
through flowsheeting and optimization pro-
cedures. 
MAIN PARTS OF THE SYSTEM 
The hierarchical structure of the system 
was chosen. The working out of the concept 
of ETÜ will be divided into two levels: 
1/ Level of structure generator (strategy) 
2/ Level of process unit evaluation module, 
PUEM (verification of the strategy), the 
quality coefficient is its important part. 
STRUCTURE GENERATOR 
The structure generator considers the most 
important data only· It does not use the 
explicit knowledge about process units, 
but every decision it makes basing on the 
set theory and physico-chemical data conc-
erning considered substances will be tes-
ted on the second level, where this know-
ledge is used· There is a difference 
between solution of the design on those 
levels. For structure generator it is a 
sequence of M+/M- operations, for process 
unit evaluation module it is a sequence of 
process units. The quality coefficient can 
be calculated for the second one only. The 
second one is regarded as a final product 
of the system. 
What Does the Structure Generator Do? 
The structure generator solves the design 
task on the level of M+/M- operations· 
Choice of the new element of the solution 
consists of four steps: 
1/ Choice of applicable rules (operations) 
2/ Setting them in order from probably the 
best one to probably the worst one 
3/ Getting first applicable and unchecked 
one and trying it (with the help of PUEM), 
when PUEM stops, the estimation of the 
quality coefficient is calculated: 
4/ Depending on results of 3/ it goes to 
step 1/ or 3/· 
Detailed description of structure genera-
tor and process unit evaluation module 
will be presented later. 
Applicable Rules (Operations^ 
Following preconditions of applicability 
are proposed: 
M-(FLOW, F1, F2) can be applied if and 
only if: 
VA, B € FL0W:[3FL0W» € GOAL : ^ 
A,B€FL0W»^(AGF1«»B€F1)J. 
(7) 
M+(F1, F2, FLOW) can be applied if and 
only if: 
3 A € F I 3 B C ? 2 
3FL0W'€G0AL: 
A,B€FLOW» 
# 
(8) 
It means: M- operation can be applied if 
it breaks at least one connection of com-
ponents which is not requested in the GOAL 
structure and M+ operation can be applied 
if it creates at least one connection re-
quested in the GOAL structure. 
Additional Memory vs. Special Limitations 
The limitations which are imposed,(7) and 
(8), are very weak in order not to lose the 
best solution. On the other hand it leads 
to inconvenience of overlooped structure 
generation· S is an overlooped solution if: 
3S»CS: S» φ Çf S'(DATA) - DATA 
(9) 
The trouble expressed by (9) can be elimi-
nated in following ways: 
1/ The system must check whether current 
design task is equal to any previously ob-
tained one. In this case the current solu-
tion is rejected, it is not developped. 
It needs additional memory. 

334 
P. Domanski, P. Marczynski and J. Kopytowski 
2/ Special limitations for M+/M- operations 
can be settled, owing to these the overlo-
ops will never arrive. Here the question 
arises: will the best solution be omitted? 
Setting Rules in Order 
Before one can start with choice of pro-
cess unit it must be known what this unit 
ought to do· As separations, M- operations, 
are regarded as most difficult tasks, let 
us focus attention on this problem. If, 
for example, flow ABCD is to be separated 
into four flows: A, B, C and D , then 
which of the components will be separated 
first? It is said (Beddow, 1981; Roberts 
and co-workers, 1971) that for given sepa-
ration a given method is good if it dif-
ferentiates between components on the basis 
of the most appropriate property. The ans-
wer is: the component which is the most 
different of the others, which sticks the 
less to the others, is to be considered as 
a first alternative, because probably good 
unit for such separation can be found· 
The rules (alternative M operations) can 
be settled in order with respect to certain 
function which is "quality of M operation". 
The problem is how to measure this quality, 
how to measure the difference between cho-
sen component and the others for M- opera-
tion· 
Example of Heuristic Procedure for M-
Operations Ordering 
The simple proposal is presented as an 
example: 
Let {χΛ be a set of parameters such as: 
size, density, surface wetability, magnetic 
permeability, electrical conductivity, 
temperature and heat of cristallization 
and condensation, water and other solubi-
lities, etc. 
Let Xj(A) be a value of x. for A expressed 
in any chosen way: linear, logarithmic, 
polynomial, ... . The value xiA is defined: 
xiA « min 
/ΐχ,(Β)-χ±(Α)|} 
1 A BCPLOW, BrfA ^ X 
X 
J 
if: x. (A) * min ίχ-, (B)) or max fx. (B)\ 
1 
B£FL0Wl x 
J 
BCFLOW1 * 
J 
and: 
xiA * ° * e l s e w h e r e* A6FL0W 
(10) 
As x i A are expressed in different units 
(m, kg, K, ...) there is no way to compare 
them. Let (c^be a set of coefficients for 
which it holds: dim (^·χ^Α) s flj· 
Values of c^ say which of x i A are relati-
vely small or relatively huge. The maximum 
of {Cj/XjjiA points out which property is 
the most appropriate for separation. It is 
a "measure11 of difference between compo-
nent A and the others· But it is not a 
"measure of quality" good enough for real 
applications. 
It is possible such a situation when the 
"difference" for a given separation is re-
latively great, but despite it the opera-
tion is not so good, because, for instance, 
explosivity of the products. Let Y « { y ^ 
be a set of such crucial parameters as: 
explosivity, toxicity, corrosivity, etc. 
Let F(Y, A) be a correction function, 
which basing on the values of those cru-
cial parameters changes "measure of dif-
ferance" into "measure of quality": 
V(A) « max 
F can be a step function, which tolerates 
small values of y parameters and rejects 
operations which give products with exce-
eded limits of those parameters. 
Then the M- alternatives will be ordered 
with respect to the values of V(A) 
described in (11). 
It is a difficult task to make adequate 
setting procedures. A lot of heuristic 
knowledge is to be applied here. It will 
be possible for the designer to put into 
the system a part of heuristic knowledge 
of his own. 
PROCESS UNIT EVALUATION KODULE 
Process unit evaluation module (PUEM) 
has to choose the process unit or confi-
guration of process units for a given 
M+/M- operation chosen by structure gene-
rator. 
The analysis of technological literature 
points out that it is most difficult to 
choose the process unit which is adequate 
to certain M- operation. For example in 
order to realise the gas-solid separation 
one must choose one process unit among 
minimum ca 20 units proposed. But the 
analysis of four basic paramètres of the 
flow enables to limit this list up to a 
few process units (Sargent, 1971). 
Considering the speed of the design task 
solving and properties of the branch and 
bound method it would be useful to order 
this subset as to begin from the process 
unit which is probably the best one to 
probably the worst one among feasible 
units. 
The Way PUEM Chooses the Process Units 
Let M be an operation chosen by struc-
ture generator. PUEM has to assign a set 
of alternative process units to this ope-
ration. It has to compute which units 
will be best for this operation. The mo-
dule acts as following: 
1/ Finds available units 
2/ Proves technological feasibility of 
those units 
3/ Sets them (feasible ones) basing on 
approximate quality coefficient in order 
from probably the best to worst one. 
4/ Worst ones are eliminated 
5/ The remaining ones are taken under 
more detailed consideration (cost engi-
neering). 
Approximate Quality Coefficient for PUEM 
For every feasible unit an approximate 
quality coefficient is calculated. It is 
based on energy consumption (calculated 
from heuristic formulae too) and roughly 
estimated investement costs. The accuracy 
is small. The calculations should be made 
with rather great reserve for avoiding 
the influence of "contextual costs"· 

Support System 
335 
For example: the distillation column is 
expensive and needs a lot of energy· But 
it gives mixtures with high temperatures 
as an output, so part of the energy can 
be recovered - and it must be taken into 
account. 
If there are units which cannot be the 
best under any condition, they are eli-
minated· 
QUALITY COEFFICIENT 
Structure generator gives the strategy 
for solution's development, process unit 
evaluation module shows the way the stra-
tegy can be realised, but final verifica-
tion of decision made so far is quality 
coefficient computation· Here the two-di-
mensional quality coefficient is proposed. 
It is composed of the following: 
1/ Energy consumption 
2/ Estimated investement costs 
This quality coefficient cannot be identi-
fied with the one used by process unit 
evaluation module for preliminary evalua-
tion of feasible units· 
Energy Consumption 
It is regarded as most important factor 
from manufacturing costs, the factor which 
strongly depends on the structure of the 
installation· It is not reasonable to con-
sider here the factors which are not de-
pend or weakly depend on the structure, 
e.g. fixed charges. 
Estimated Investement Costs 
It is based on estimation of Total Capital 
Investement on Battery Limits. Battery 
Limits is the cost of basic devices, ins-
tallation, in main production line. 
The Problem of Accuracy 
Planned accuracy of the quality coeffici-
ent is about 20-25% (Rejewski and Kumur, 
1983), but in some cases it can be greater. 
It must be noticed that for the stage of 
concept, defined as above, available meth-
ods do not enable estimation with accuracy 
greater than 12-15% (Viola, 1981). 
The role of estimation accuracy must be 
here strongly emphasized: it influences 
the time which must be spent to find the 
whole set of equivalent full solutions. 
The second: the accuracy is better the 
number of set's elements is smaller (re-
member that those elements must be finnaly 
examined by flowsheeting procedures). 
The problem of I operations is to be 
discussed when the problem of accuracy is 
considered. It is already known how M+/M-
operations are chosen.But where do I opera-
tions come from? The most difficult is to 
find the unit which changes the flow's 
temperature. It results from the fact that 
known methods have global character: they 
consider the set of heat exchangers in all 
installation whereas the considered prob-
lem is to do the partial estimation. The 
estimation accuracy is so important that 
it is proposed to apply these global meth-
ods to every partial structure (solution). 
First Estimation 
Before system starts the first estimation 
is to be made. It may base on any existing 
installation (counted using Marshall-Ste-
vens Index), or on any method "order of 
magnitude11 (Rejewski and Kumur, 1983). 
REMARKS ON COOPERATION OF 
SYSTEM'S PARTS 
Described above main parts work alternate-
ly. After every M+/M- operation has been 
chosen by structure generator PUEM at-
temps to find adequate process unit (or 
group of process units).. This choice enab-
les to modify the value of quality coeffi-
cient. It is the base to decide whether 
the search in chosen direction should be 
continued or not. If PUEM has chosen more 
than one adequate unit, only for the first 
one quality coefficient is computed imme-
diately, and then structure generator 
starts again. The remaining possibilities 
will be considered after backtracking. 
EXAMPLE 
Simple example is presented: 
Gaseous propylene CHg-CHCH^ is reacting 
with chlorine Cl2 giving the mixture of 
allylchloride CH2«CHCH2C1 and hydrochloric 
acid HC1. The mixture, composed of 28-29% 
of HC1 and of 72-71% of allylchloride by 
weight, is cooled down after reaction to 
about 318-323K. It is to be separated. 
Select the unit (M- operation) using PUEM. 
Choice of available units. Let there be 
six available units / operations: crystalli-
zation, adsorbtion, extraction, distilla-
tion, water absorbtion and liquid absorb-
tion. 
Proving feasibility of the units. 
TABLE 1 
Availability and Feasibility 
Unit/operation Av. Feas. Why unfeasible? 
Crystallization 
+ 
Adsorbtion 
♦ 
Extraction 
♦ 
Distillation 
+ 
Water Absorb. 
♦ 
Liquid Absorb. 
♦ 
- low melting point 
- chemical reaction 
- no agent available 
There are three units/operations available 
and feasible. All of them have to be taken 
under consideration - approximate quality 
coefficient must be calculated (AQC). 
TABLE 2 
Relative AQC 
Unit/operation Relative AQC:EC 
IC 
I 
Distillation 
2.5 
1.0 
II Water Absorbtion 
1.0 
4·0 
III Liquid Absorbtion 
3·5 
3·£) 
Where EC and IC are two components of AQC 
(approximate quality coefficient) expressed 
in relative way, EC means "energy consum-
ption·1 and IC means "estimated investe-
ment costs'·. 

336 
P. Domanski, P. Marczynski and J. Kopytowski 
ttO% « 
ACCU-
RACY 
J ACCU-
RACY 
Fig· 1 . 
t 
1 
05 
° 
The choice of the unit. 
The choice depends on energy/investement 
rate E/I R. Ill cannot be chosen, one unit 
is chosen in cases A,C, two in case B. If 
E/I R »- 1f the first one will be I· 
Notice:the example does not show all factors 
which are to be considered in such a choice· 
WORKING WITH THE SYSTEM 
It is possible to designer to put the des-
ign task into system and receive the solu-
tions only, but the authors find this way 
unreasonable· It will be much better to 
control system·s actions· The interventions 
may occur in the following moments: 
1/ Updating, completing database with data 
concerning specific substances, equipment 
2/ Changes of quality coefficient 
3/ Imposing conditions on solutions 
4/ Defining part of the solution 
5/ Changing the sets of alternatives 
6/ Changing the order of alternatives in 
both structure generator and PUEM 
7/ Changing parameters of heuristic proce-
dures which set alternatives in order 
1/-4/ can be treated as a part of design 
task formulation, the designer uses the 
knowledge he had before. 5/-6/ are arbitral 
direct changes iin system's acting, e.g. it 
may occur that some units are unfeasible 
because of unforeseen reasons» 7/ is a form 
of heuristic knowledge coming down· 
r 
I 
-0L 
DATA 
BASÉ 
PHOttSS 
UNITS' 
W I T 
STRUCTURE 
GENERATOR 
DE6M6 TASK 
K - - 
-i 
M0CES9 UNIT 
{VALUATION 
MOBOLE 
SET or cokicepTs 
K - -
I 
I 
^ 
Dtsmee* 
Working with the system is shown at Fig. 2, 
continuous lines show internal connections 
of the system, dashed lines possibilities 
of designer's intervences. 
Last but not least: the solutions of the 
design task depend strongly on task formu-
lation, e.g. on the way the designer defi-
nes and divides the flows. 
CONCLUSION 
There is a trend in CAD software to stabi-
lize mathematical methods (Sterling, 1983). 
Presented framework was based on known for-
malism of production system and branch and 
bound method. The new is to apply them to 
the problem of working out a concept of 
chemical ETU in such a hierarchical way· 
The use of the future system is planned in 
preliminary works on ETU design, when it 
can help not to forget about the structure 
alternatives and avoid mistakes done beca-
use of too strong and directed routinism. 
There is a second possible its application, 
the idea is compact with that proposed by 
Gorecki and co-workers (1983) in problem 
of investigations of possible trends in 
chemical industry development· Such a sys-
tem can be used as a decision support tool 
estimating costs of new investements with 
accuracy better than "order of magnitude11. 
It is worth saying that for introduced for-
malisms the assumption METU is based on one 
reactor only" is not necessary. The final 
shape of the system depends on solution of 
some important problems« The main one is 
how to represent the heuristic knowledge 
about designing, e.g. that one which forms 
the F(Y, A) functions, see (11)· It is pla-
nned the system will have selflearning abi-
lities (will learn from the designer). 
REFERENCES 
Beddow, J.K. (1981). Dry separation techni-
ques. Chemical Engineering. 88. no·17, 
70-84. 
Gorecki, H., J· Kopytowski, T· Rys and 
M· Zebrowski (1983). A multiobjective 
procedure for project formulation - de-
sign of a chemical installation. In 
Lecture Notes on Economics and Mathema-
tical Systems. vol.229· Springer Ver-
lag, Berlin, pp. 252-259. 
Nilsson, N.J. (1982)· Principles of Artifi-
cial Intelligence· Springer Verlag· 
Berlin. 
Rejewski, P. and A. Kumur (1983). Podstawv 
inzynierii kosztow w przedproiektowvm 
Svnl 
stdlu 
cne 
stadium technologii chemlczne.i. Inter-
nal report of Institute of Industri al 
Chemistry, Warszawa. 
Roberts, E.J., P# Stavenger, J.P. Bowersox, 
A.K. Walton and M. Ketha (1971). 
Solid/solid separations. Chemical 
Engineering. 78. no.4, 89-98. 
Sargent, G.D. (1971). Gas/solid separations· 
Chemical Engineering· 78, no.4. 11-22. 
Sterling, M.W. (1983). New hardware and 
software trends in CAD/CAM. In 
Autofact 5 - Conference Proceedings. 
Computer and Automated Systems Associa-
tion of SKE, Detroit, pp.1.8-1.23. 
Viola, J.L.Jr. (1981). Estimate capital 
costs via new, shortcut method. Chemi-
cal Engineering. 88· no.7, 80-86. 
Fig. 2. Working with the system. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
A FLEXIBLE COMPUTER PROGRAMME FOR 
CALCULATION OF ENERGY AND MATERIAL 
BALANCES IN A SUGAR FACTORY 
L. B. J0rgensen*, N. Fonnesbech*, R. F. Madsen*, 
M. Kümmel** and H. S0eberg** 
*The Danish Sugar Corporation, Research and Development Laboratories, 
Nakskov, Denmark 
'Technical University of Denmark, Department of Chemical Engineering, Lyngby, 
Denmark 
Abstract. A programme system dedicated to the simulation and balancing of energy and 
material balances in a sugar factory has been developed. Special concern has been put 
in the development of a flexible and comprehensible user inferface which can be ad-
justed according to the needs of the individual user. The calculation part of the pro-
gramme uses a modified version of the sequential modular approach where the calculation 
path, within the process calculation modules, can be changed. This approach has shown 
to facilitate the determination of calculation sequence and iteration parameters in the 
flowsheet. Further, the sugar factory programme includes a method for balancing 
material balances with redundant plant data and a method for graphical presentation of 
the flowsheet and calculation results. 
Keywords. Sugar industry; computer-aided design; man-machine systems; computational 
methods; computer graphics. 
INTRODUCTION 
The calculation of stationary material and energy 
balances in a sugar factory is vital for design 
and operation of a plant. Due to the complexity of 
the plant, first of all due to the many process 
recycling streams, this is not a trivial task. 
The sugar manufacturing process can briefly be 
described as follows (Schneider, 1968; McGinnis, 
1982). Sugar beets are washed and sliced into 
small oblong pieces which are fed to a diffuser, 
where the sugar is extracted with countercurrent 
hot water. Hereby a thin sugar juice (about 15% 
dry matter) is obtained, consisting of sugar, 
water and several impurities. These impurities are 
named nonsugar and treated as one component in the 
material balances. Most of the nonsugar is then 
separated from the sugar juice by repeated treat-
ments 
with 
slaked 
lime and carbon dioxide, 
respectively, succeeded by filtrations. After the 
purification, most of the water is removed from 
the sugar juice in a five-effect evaporator, 
resulting in a thick sugar juice, containing about 
70% dry matter. Finally, the thick juice enters 
the sugar house, where a 3-product crystallization 
is carried out. The crystals are separated from 
the mother liquor by centrifuging. In the Danish 
Sugar Corporation the first two products are mixed 
to form a white sugar. The mother liquor of the 
third product forms the molasses, and its crystals 
are remelted and recycled. Thus the sugar factory 
consists of series of unit operations (extraction, 
evaporation, crystallization, centrifuging, etc.), 
some being batch processes, other continuous. 
In the first part of the factory (washing, slic-
ing, extraction) the mass and energy balances can 
be calculated relatively easily, but the final 
part, the evaporator and the sugar house, is much 
more complicated regarding what goes on in the 
single process as well as the interaction between 
the processes. This is mainly due to the fact that 
the five-effect evaporator functions as a steam 
supplier to other processes, especially the cry-
stallization processes in the sugar house. Fur-
thermore, the simulation of the evaporator and the 
sugar house is made difficult by the lack of 
general mathematical models for the heat transmis-
sion in the evaporators and the separation pro-
cesses in the centrifuges. Consequently, empirical 
values and expressions, dedicated to the indivi-
dual plant, have to be used in the calculations. 
A broad spectrum of the commercially available 
programme packages (Leesley, 1982) for process 
simulation was examined with respect to a set of 
requirements concerning sugar factory calcula-
tions, covering the purely technical requirements 
as well as demands to the interface between the 
user and the programme system. This examination 
clearly showed that very advanced programmes, such 
as Concept (1982) and Flowpack II (Perris, 1982), 
had to be used in order to fulfil the major part 
of the requirements. However, even when using such 
advanced programmes, it would still be necessary 
to do a lot of additional programming to fulfil 
all the given requirements. On the other hand, 
many of the facilities provided by the commercial 
programmes were not required in the sugar factory 
calculations. Thus it was decided to develop a 
material and energy balancing programme, dedicated 
to the sugar industry. 
REQUIREMENTS TO THE PROGRAMME 
General 
The programme structure and the user interface 
must have a form which enables the user to spend 
the major part of his effort and creativity on a 
critical evaluation of the flowsheet configuration 
and the results of the calculations instead of a 
time consuming work with the entering and editing 
of data. 
337 

338 
L. B. J0rgensen et ai 
At his terminal, the user should be able to work 
in an iterative process, consisting of the se-
quences 
a) Definition of flowsheet configuration 
b) Definition of process and stream data 
c) Calculation 
d) Evaluation of results 
e) Editing flowsheet and/or process and stream 
data 
f) New calculation. 
The points d)-f) will often be executed several 
times during the problem solving. 
The calculation problems can roughly be divided 
into two groups. The first group consists of 
routine solutions of material and energy balances 
in an existing production plant. The second group 
requires possibilities for doing experiments with 
the flowsheet configuration and the process para-
meters in order to optimize existing and to design 
new plants. The first group requires only a very 
simple interface, while the second group implies 
much more detail and thus requires a more complex 
interface to the programme. Common for the poten-
tial users of the programme will be that they are 
experts with regard to the sugar plants, but often 
unfamiliar with computers, programme language and 
terminals. Therefore, the programme should be able 
to "speak" the language of the sugar factory 
staff. 
Specific Requirements 
The general requirements can be expressed in a 
number of specific items divided into two parts, 
one part describing the purely technical aspects 
and one part concerning the human factor. Although 
presented separately, these two parts are highly 
dependent. 
Technical Requirements 
Calculation of sugar factory processes. The pro-
gramme must contain basic models (exact or empi-
rical) for the behaviour of the processes in the 
sugar factory, and the user must have possibility 
for contributing his own models. 
Flexibility regarding the specification of flow-
sheet and data. Based on the process calculation 
models, the user must be able to build and store 
his own flowsheet and specify process and stream 
parameters. The programme should especially faci-
litate corrections in existing flowsheets and 
data. 
Flexibility regarding the calculation path in the 
flowsheet. Once a flowsheet is defined, the user 
should be able to solve 3 different kinds of 
problems, which are simulation, balancing of 
measured plant data and design of new plants. Each 
of these problems requires different sets of input 
parameters, meaning that in one problem a para-
meter will be a given input parameter and in 
another problem the same parameter will be a 
calculated output parameter. 
Balancing of redundant plant data. Especially in 
the calculation of material balances of existing 
plant data there will be redundant data to 
consider. These data will result in an over-
specified set of equations, meaning that the 
number of linear independent equations will be 
greater than the number of unknowns. The programme 
must therefore provide a method by which all data 
are included in the solution of the balance 
equations. The method must treat the single data 
with 
a weight corresponding 
to its standard 
deviation. 
Graphical presentation of results. The user should 
be able to get his flowsheet and calculated values 
in a graphical form, either by means of a graphics 
routine implemented in the sugar factory programme 
or by means of an independent graphics system. If 
an independent system is chosen, the calculation 
programme must be able to provide the data 
concerning the flowsheet configuration and the 
process parameters in a form which minimizes the 
necessary additional interface programming. 
Requirements Concerning the User Interface 
Low response time. The iterative working process 
at the terminal requires that the response time of 
the programme is kept as short as possible. This 
does not only concern the entering and editing of 
flowsheet and data, but also the specific calcula-
tion procedure. 
Few operations at the terminal. Getting through 
the work with defining and editing data in a quick 
and 
clear 
way 
requires that the number of 
necessary operations at the terminal are as few as 
possible. 
A flexible interface. The number of details and 
the style of the user interface should be variable 
according to the specific needs of the individual 
user. This means that the number and nature of 
prompts for process and stream parameters should 
be variable. 
Clear and simple screen pictures on the terminal. 
When prompting for and presenting data on the 
visual display unit, it is very important that not 
too much information is presented at one time on a 
single screen picture. 
Error 
checking. The programme should 
contain 
routines for control of syntax and logical errors 
made during the specification of data. The user 
should get his feed-back during the input session, 
so that a minimum of time is wasted when an error 
occurs. 
THE BASIC STRUCTURE OF THE 
SUGAR FACTORY PROGRAMME 
The basic idea in the chosen programme structure 
is shown in Fig. 1. By means of a master menu the 
user is enabled to choose between three main 
functions, which are 
NETWORK. The flowsheeting part, specifying new 
and editing existing flowsheet configurations. 
DATAWORK. The data entering part, specifying 
and editing process and stream data. 
EXECUTE. Execution and presentation of calcula-
tions on the process plant defined in NETWORK 
and DATAWORK. 
The three programme parts are able to work sepa-
rately, as they have all free access to the data 
files. Data describing the configuration of the 
flowsheet and physical/chemical data concerning 
the individual processes and streams are stored on 
separate data files. Hereby, the user is able to 
create and store several sets of plant data 
without having to redefine the flowsheet configu-
ration. 
All the programmes work in such a way that all 
relevant data from the files are read into the 
memory at the beginning of the execution and 
written back at the end. This approach requires a 
certain 
amount 
of 
accessible 
memory 
in the 
computer, but in return the number of disk opera-

Flexible Computer Programme 
339 
tions is kept at a minimum, resulting in a low 
execution time. In the following sections a more 
detailed description of the three parts of the 
programme is presented. 
THE FLOWSHEETING PART 
The user specifies the flowsheet configuration by 
means of the NETWORK programme, defining how the 
individual process units and streams are connect-
ed. This is done interactively at the terminal by 
entering names of selected types of processes and 
streams. A specification of a heat exchanger work-
ing on thin sugar juice will typically have the 
following form. 
PROCESS NAME 
: THINJUICEHEATEX 
PROCESS TYPE 
: HEATEXCHANGER 
INPUT STREAMS 
: STEAM1 , THINJUICE1 
OUTPUT STREAMS : C0NDENSATE1 , THINJUICE2 
Figure 2 shows how a simple flowsheet consisting 
of a single evaporator and a heat exchanger is 
defined using NETWORK. The programme solely uses 
the names given by the user for the description of 
the connections between processes and streams and, 
consequently, during the definition session the 
programme 
continuously 
controls 
that 
logical 
errors are caught and corrected. There are no 
limitations to what the processes and streams may 
be named. The only condition is that the selected 
type of process must be available in the executing 
part. 
Related to the flowsheet specification procedure 
an editor is available, by which the user by means 
of simple commands is enabled to correct already 
specified configurations. Some of the important 
editing facilities are 
- changing the type specification of a process, 
- changing names of processes and streams, 
- deleting processes and streams, 
- inserting new streams, 
- moving streams. 
The basic structure of the NETWORK programme is 
presented in Fig. 3. The programme works in such a 
way that entered commands, such as CREATE PROCESS, 
MOVE STREAM, etc., result in calls of specific 
subroutines. This module structure makes it easy 
to maintain and expand the programme. 
THE DATA SPECIFICATION PART 
After the specification of the general flowsheet 
configuration, the physical and chemical para-
meters of the processes and streams must be 
defined. By use of the programme DATAWORK the 
individual processes and streams are selected by 
entering the names specified in NETWORK. These 
names are the only parameters connecting the 
flowsheet and the data. After data is specified, 
it is still possible to return to NETWORK for 
editing purposes, because the identification of 
the single data refers to a name and not to a 
specific location on the flowsheet. It is thus 
possible to move a stream around in the flowsheet 
without losing its already specified data. During 
renaming of the elements in the flowsheet a 
trace-back 
nametable 
is created 
and used in 
DATAWORK. 
If a process or stream is without any data speci-
fications, the user is prompted for some, other-
wise a data edition session is prepared. Figure 4 
gives an example of how a heat exchanger parameter 
is edited. Besides the specification of physical/ 
chemical data, a more detailed specification of 
the flowsheet is given in DATAWORK. The connec-
tions between specific positions in the individual 
processes and the input/output streams, given in 
NETWORK, are specified where necessary. Further-
more, all the streams are assigned a label, such 
as STEAM, CONDENSATE, JUICE, etc. These stream 
labels, like the process types, are used by 
DATAWORK when it selects what parameters to prompt 
for and how they should be presented on the 
terminal. 
THE FLEXIBLE USER/PROGRAMME 
INTERFACE 
The terminal screen pictures, presented by NETWORK 
and DATAWORK, can be adjusted according to the 
needs of the individual user. As indicated in Fig. 
2, the programmes read the interface from a file 
before contact to the user is established. The 
flexible interface consists of a selection of cha-
racter strings, which are written to the terminal 
screen in a fixed format during the presentation 
of and prompt for data. Figure 5 shows the 
contents of records describing the interface for a 
simple heat exchanger compared with the corre-
sponding screen picture presented to the user. 
This interface specification method is used both 
for processes and for streams, and the user is 
able to modify the interface records, creating his 
own personal screen pictures. 
The interface determines the storage sequence of 
the process and stream data on the files, as the 
individual data are stored in the order they are 
prompted for. This gives a clear coherence between 
the user interface and the parameter list communi-
cating with the process calculation modules in the 
executing part of the programme. 
THE EXECUTING PART 
The calculation of mass and energy balances in the 
sugar factory can be divided into three basically 
different problems, being 
- simulation of existing process plants, 
- balancing of production data, 
- design of new process plants. 
The simulation problem is a conventional task, 
which in most programme packages for process 
simulation is solved by using the sequential 
modular 
approach 
(Westerberg 
and 
colleagues, 
1979). The sequential modular approach is a method 
which treats the individual processes in the 
flowsheet as specific calculation modules connect-
ed by the process streams. The entire flowsheet is 
then calculated as a sequence of process module 
calculations until convergence of selected para-
meters are reached. Although this approach works 
well solving the simulation problem, it can often 
be a heavy and complicated task using it on the 
balancing and design problem. 
The executing part in the sugar factory programme 
is based on a modified version of the sequential 
modular approach combined with dedicated modules 
for solution of special tasks, such as balancing, 
design and graphics. The structure of the execut-
ing part is shown in Fig. 6, The main programme, 
EXECUTE, contains a menu from which the user can 
select among the calculation methods and related 
options. All the executing modules are able to 
communicate with the datafiles created by NETWORK 
and DATAWORK. The programme structure facilitates 
the implementation of additional dedicated execut-
ing modules as the need arises, the only condition 
being that they make use of the standard routines 
for communicating with the datafiles. 

340 
L. B. j0rgensen et al 
The Modified Sequential Modular Method 
The sequential 
modular method 
is a separate 
executing module communicating with a library of 
process calculation modules and a selection of 
mathematical and thermodynamic standard routines. 
The thermodynamics needed in a sugar factory cal-
culation can in fact be expressed in relatively 
few equations. In the general and traditional 
sequential modular method the process calculation 
modules work in such a way that specified or 
earlier calculated parameters of inlet streams 
result in a calculation of the outlet streams of 
the process. Using this approach, the flowsheet 
configuration has to be only slightly complicated 
before the determination of calculation path and 
iteration parameters is made so difficult that 
automatic methods have to be used. Often the 
flowsheet must be recalculated 
several 
times 
before convergence is reached, resulting in rather 
long response times. 
In the sugar factory programme the construction of 
the process calculation modules makes it possible 
to alter the calculation path within the module. 
By means of switches in the parameter list of the 
module it is possible to decide which parameters 
will be input and which will be output. The 
switch-option makes it possible to modify the 
calculation path in the module according to its 
position in the flowsheet. This approach does not 
only facilitate the determination of the calcula-
tion path in the flowsheet, but does also minimize 
the number of iteration parameters and necessary 
process module calculations, resulting in a short 
response time. Using the switch-option it is 
possible to solve the three basic calculation 
problems mentioned above, although the balancing 
of redundant data still needs a dedicated ap-
proach. 
Balancing Redundant Data 
The dedicated balancing module solves material 
balances based on redundant production data. The 
method solves the fundamental material balances 
simultaneously with a quadratic minimization of 
the ratio between the differences of measured and 
calculated process parameters and the standard 
deviations 
on 
the 
measured 
parameters. 
This 
approach ensures that the flow of material is 
exactly in balance and that the measured plant 
data carries a weight in the set of equations 
corresponding to their respective standard devia-
tions. 
Control of Output Parameters 
Controlling the value of calculated output para-
meters is a problem strongly related to the 
sequential modular approach. The sugar factory 
programme includes a simple method by which the 
value of a calculated parameter can be kept at a 
given setpoint controlling selected input para-
meters. The controller can be selected from a 
collection of different iteration procedures. An 
ordinary proportional controller has shown to work 
excellently on most of the sugar factory flow-
sheets. Contrary to integrating the controller as 
a part of the flowsheet, as described by Wester-
berg and colleagues (1979), it is here designed as 
a separate executing module able to communicate 
with the sequential modular module. Thus the 
experimenting user is enabled to specify the 
controller without having to work on the flowsheet 
configuration and the process and stream data. 
GRAPHICAL PRESENTATION OF THE 
CALCULATIONS 
The best way to present the results of the process 
calculations was found to be a hardcopy drawing of 
the flowsheet, containing the relevant specified 
and calculated data, selected by the user himself. 
A simplified approach to solve this problem has 
been to use the 2-dimensional drafting system DOGS 
(1983) from PAFEC, England. By means of an inter-
face module connecting the calculation part and 
the DOGS system it is possible to transfer data to 
an already existing drawing of the flowsheet. The 
parametric symbol facilities of DOGS are used for 
transferring the information between the programme 
systems. A parametric symbol in effect is a macro 
consisting of graphical instructions, which can be 
stored in a text file. The results from the 
calculation modules are given the format of a 
parametric symbol, which can be retrieved as any 
other DOGS symbol and combined with the appropri-
ate 
master 
drawing. 
This 
master drawing is 
selected from a library containing a collection of 
typical flowsheet configurations in the sugar 
factory. The transferred process and stream data 
are then automatically written on to the flowsheet 
in the positions where the actual process or 
stream appear on the drawing. 
Figure 7 gives an example of a DOGS drawing of a 
five-effect evaporator containing calculated pro-
cess and stream data. 
APPLICATION EXPERIENCE 
The large effort applied in the development of the 
user interface has shown to be justified by the 
positive acceptance by the users not familiar with 
computer programmes. 
The modified sequential modular approach combined 
with the editing facilities in the flowsheeting 
and data specification parts have resulted in a 
very quick and uncomplicated execution of the 
iterative working process taken up by the experi-
menting and optimizing user. 
The graphical presentation 
of flowsheets and 
calculation results provides the user with a well 
structured and overall view of all the relevant 
process and stream 
parameters, which 
can be 
difficult to obtain through search in an often 
extensive amount of printer output. 
Despite the availability of advanced commercial 
programme packages, the development of our pro-
gramme has provided the sugar factory staff and 
the engineering division with a number of vital 
facilities that are not available in any other 
programme packages. 
REFERENCES 
CONCEPT (1982). Process Flowsheet Simulator: User 
Manual. CAD-CENTRE, Cambridge, England. 
DOGS (1983). User Manual. Program Level Number 
2.5. PAFEC Ltd., Nottingham, England. 
Leesley, M.E. (1982). Computer-Aided Process Plant 
Design. 
Gulf Publishing Company, Houston, 
Texas. 
McGinnis, R.A. (1982). Beet-Sugar Technology, 3rd 
ed. Beet Sugar Development Foundation, Colo-
rado, U.S.A. 
Perris, F.A. (1982). FLOWPACK II: A Third Genera-
tion Flowsheeting System. ICI Corporate La-
boratory, Runcorn, England. In M.E. Leesley 
(Ed.) Computer-Aided Process Plant Deéign. 
Gulf Publishing Company, Houston, Texas. 

Flexible Computer Programme 
341 
Schneider, F. (1968). Technologie des Zuckers. M. 
and H. Schaper, Hannover, Germany. 
Westerberg, A.W., H.P. Hutchison, R.L. Motard, and 
P. Winter (1979). Process Flowsheeting. Cam-
bridge University Press, Cambridge, England. 
FIGURES 
M 
A 
s 
T 
E 
R 
M 
E 
N 
U 
NETWORK 
SPECIFICATION OF 
FLOWSHEET 
DATAWORK 
SPECIFICATION OF 
PROCESS S STREAM 
DATA 
EXECUTE 
CALCULATION AND 
PRESENTATION OF 
SPECIFIED DATA 
Fig. 1. The basic structure of the sugar plant 
programme. 
,— STEAM3 
STEAMI 
EVAPORATOR 
I-EFFECT 
STEAM2 
JUICE2 
JUICE3 
CONDI 
TO i 
JUICEI 
j C0ND2 
NETWORK 
STEAMI 
JUICE2 
C0ND2 
PROCESS 
NAME* 1-EFFECT 
TYPE- EVAPORATOR 
PROCESS 
NAME- HEATER 1 
TYPE- HEAT 
EXCHANGER 
STEAM3 
JUICE3 
CONDI 
STEAM2 
JUICEI 
Fig. 2. Specification of a flowsheet using NET-
WORK. Only names of streams, processes 
and process types are used. 
MAIN 
PROGRAIWEI 
COMMAND 
LOOP 
W 
SUBROUTINES 
FOR 
SPECIFIC FUNCTIONS 
READ INTERFACE 
READ DATA FILE 
CREATE PROCESS 
DELETE PROCESS 
RENAME STREAM 
MOVE STREAM 
STORE DATA 
DATA 
FILES 
Fig. 3. The structure of the NETWORK programme 
for specification of the flowsheet con-
figuration. 
PROCESS HEATER 1 
HEAT EXCHANGER 
HEAT-TRANS. SURFACE M2, 
TRANS.COEFF. KJ/M2/H/C, 
EDIT> _ 
PROCESS HEATER 1 
HEAT EXCHANGER 
HEAT-TRANS. SURFACE M2, 
TRANS.COEFF. KJ/M2/H/C, 
EDIT> A 340 
PROCESS HEATER 1 
HEAT EXCHANGER 
HEAT-TRANS. SURFACE M2, 
TRANS.COEFF. KJ/M2/H/C, 
EDIT> _ 
A -
K -
A -
K * 
A * 
K -
225.0 
82.0 
J 
> 
225.0 
82.0 
J 
Λ 
340.0 
82.0 
^ 
Fig. 4. Correcting the value of the heat-tranfer 
surface using the editing facilities in 
DATAWORK. 

342 
L. B. j0rgensen et al. 
RECORDS SPECIFYING A SCREEN PICTURE 
HEAT EXCHANGER , NUMBER OF PROMPTS * 2 
HEAT-TRANS. SURFACE 
M2 
A 
TRANS.COEFF. 
KJ/M2/H/C 
K 
T£XT 
UNITS 
IOeWTlFl£R 
THE SCREEN PICTURE 
PROCESS NN 
HEAT EXCHANGER 
HEAT-TRANS. SURFACE M2, A 
TRANS.COEFF. KJ/M2/H/C, K 
EDIT> _ 
0.0 
0.0 
Fig. 5. The flexible user interface. The number 
of prompts and the contents of the text, 
unit and identifier character strings can 
be adjusted to the individual user. 
EXECUTE 
CONTROL 
& 
CALL 
OF 
lEXECUTlNGl 
MODULES 
GENERAL 
SOLUTION METHODS 
PROCESS 
CALCULATION 
MODULE LIBRARY 
DEDICATED 
SOLUTION METHODS 
SPECIFICATION OF 
CONTROLLERS 
CREATION OF 
PRINT/PLOT FILES 
DATA 
FILES 
Fig. 6. The basic structure of the executing 
programme part, EXECUTE. 
STEAM 
M 2637.4 
T 140.4 
P 3.7 
JUICE6 
ß '2.S1 
M 9200' 
τ (36.31 
I. 
EFFECT 
VAP0UR2I 
M ! 120 ^ 
VAPOURSi 
M ! I 13.3 
VAP0UR4! 
M 346.^ 
VAPOURS I 
M 325.3 
VAPOUR ! 2 
T !34. · 
L 
— » 
2. 
EFFECT 
\/APOUR22 
T ! 2 5 . ' 
VAP0UR32 
T ! 15.3 
3. 
EFFECT 
VAP0UR42 
T I04.9 
4. 
_J EFFECT 
JUICE 7 
B '7.3 
T I34.6 
JUICES^ 
T I30.& 
JUICES 
e 28. ^ 
T I25.3 
JUICE4 
T 121.! 
JUICE9 
B 46.2 
T I 17.9 
-<- JUICE3 
T !09.3 
5. 
EFFECT 
JUICE'O 
B 57.8 
T 103 2 
JUICE2V> 
T 9^.6 
JUI CE M 
B 68.3 
M 17! I .1 
T 89.6 
HEI 
JUICE' 
B '2.3 
M 9200 0 
CONDENSATE FLASHING 
STEAM ft VAPOUR 
SUGAR JUICE 
CONOENSATE 
M « MASS FLOW . KG/MIN 
8 » BRIX (% DRY MATTER) 
T * TEMPERATURE 
'C 
P ' PRESSURE . AT 
Fig. 7. 
A DOGS drawing of a five-effect 
evapora-
tor including results from the 
calcula-
tion programme. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
PRACTICAL CAD TOOLS FOR 
MATHEMATICAL MODELLING 
A. Tyss0* and L. Kolbeinsen** 
*CAMO AIS, Trondheim, Norway 
**Division of Metallurgy, The Norwegian Institute of Technology, University of 
Trondheim, N-7034 
Trondheim, Norway 
ABSTRACT 
Mathematical modelling of dynamic processes is often considered an int-
ricate and timeconsuming task. Programpackages for simulation, time series 
analysis and identification in combination with a modern data logging 
equipment allow the task to be handled in a simpler and more efficient way. 
This paper gives a short description of the different tools, and several 
examples illustrate how they can be utilized in modelling and design of 
control systems for métallurgie processes. 
Keywords 
Metallurgical Industries, Data Handling, Computer-aided Design, Parameter 
Estimation, Modelling, Data Processing, Metallurgy. 
Introduction 
During the last couple of decades considerable 
advances have been made in the development of 
general, mathematical and computational techniques 
for process analysis, optimization and control. 
The 
application of these techniques to many 
chemical and petroleum engineering operations has 
met 
with 
considerable 
success, 
and 
these 
techniques are becoming standard tools in chemical 
and 
engineering 
practice. 
However, 
in the 
available textbook literature emphasis appear to 
be on theoretical development and ideal systems, 
and rather less attention is paid to the actual 
practical application of these methodologies to 
real, complex systems. 
The 
major 
difference 
between 
chemical and 
metallurgical processing operations is that in 
general, 
the 
former 
are 
very much better 
understood, and 
the 
availability 
or 
ready 
development of suitable process models may be 
taken for granted in the majority of cases. 
In 
contrast we are only in the beginning to attain a 
quantitative understanding of many metallurgical 
operations. 
Therefore, in metallurgical systems, 
practical considerations may force us either to 
settle for less sophisticated process models or to 
exert a considerable amount of model-building 
effort before any work on the actual optimization 
or control of the process at hand may commence. 
Mathematical models and dynamic simulation have 
long been considered 
indispensable 
for the 
understanding of process dynamics and for control 
system design. This is particularly true when it 
comes to plants of a realistic complexity with all 
process equipment and instrumentation 
systems 
included. 
In such a situation simulation is the 
only workable way for 
comparing 
alternative 
control design techniques and training of process 
operators. 
The heart of every simulation system is the model 
of the process, and very often the designer does 
not have the tools available which make the 
modelling procedure practicable. 
One way to 
improve the situation is to combine interactive 
programs for simulation, identification and time 
series 
analysis 
with 
modern 
programmable 
datalogging equipment. 
Mathematical Models 
A mathematical model can be designed using the 
"physical approach" or the "black box approach". 
With the "physical approach" the engineer applies 
balance equations 
(energy, material, etc.) and 
fundamental physical laws to generate a set of 
differential and algebraic equations. 
Certain 
assumptions and simplifications are necessary to 
obtain a model in reasonable form with few unknown 
parameters. 
This is not a straightforward task and a "cut and 
try" procedure must often be applied. 
This is 
particularly the case for metallurgical processes 
where partial differential equations often must be 
manipulated. 
The modelling procedure is drastically simplified 
if an interactive simulation program is available. 
It is then easy to check different model struc-
tures, and see how the choice of assumptions and 
parameter values influences the model behaviour. 
Although the derived model reacts reasonably in 
simulated experiments, it is usually necessary to 
verify the model by comparing model responses with 
responses from the process plant. 
This implies 
that process recordings must be available and in a 
form that allows straightforward comparison. 
Alternatively to the "physical approach" one may 
apply the "black-box approach" where, by means of 
experiments on the real process followed by a 
system identification or a model adjustment, one 
derives a suitable model representation. 
The 
"black-box approach" thus requires a data-logger 
and computer programs for time series analysis and 
CADCES-L 
343 

344 
A. Tyss0 and L. Kolbeinsen 
identification. 
A severe limitation though is 
that only linear models can be considered, and 
most 
identification 
programs 
cannot 
handle 
multivariable models. 
Use of Interactive CAD-Proaram Packages 
The use of interactive programs for simulation, 
identification and time series analysis has to a 
great 
extent reduced the number of problems 
involved in mathematical model building. 
By 
combining the intuition and experiences of the 
user and the data handling and computing 
capacity 
of the computer, the modelling procedure can be 
more efficiently taken care of. 
*) 
CYPROS 
(Cybernetic program packages) is an in-
teractive program 
system which is designed to 
handle a wide range of engineering problems, not 
only modelling but also analysis and design of 
control systems. The program system has been 
developed over a period of almost ten years, with 
emphasis on applications to industrial processes 
(1)(2). The programming 
language is 
standard 
Fortran 77. 
Although Fortran 77 is not a very 
effective language, Fortran 77 compilers 
are 
available on almost all computers. This makes 
exchange and transfer of programs attractive. One 
should be aware, however, of all the different 
Fortran 77 dialects that exist. 
This 
is 
particularly 
a 
problem 
when 
it 
comes to 
implementation on microcomputers because 
most 
compilers on this level apply a subset of the 
standard Fortran 77. 
The CYPROS system is interactive and program 
control is obtained by use of numeric terminals. 
Output is rapidly examined by extensive use of 
video 
colour 
graphics. 
The 
interaction 
organization is made flexible to meet demands from 
the experienced user as well as the temporary user 
and the fresh beginner. 
CYPROS consists of a number of special purpose 
packages for 
simulation, 
identification 
and 
control. 
In addition there are packages for 
matrix handling and time series analysis and 
manipulation. Figure 1 illustrates the modelling 
procedures and the capabilities of the CYPROS 
system. 
In the simulation package different methods are 
available for solving differential and difference 
equations. 
The user specifies his/her models by 
means of Fortran subroutines, and the 
model 
parameters are stored in the data base and are 
easily changed. 
The simulation results 
are 
presented on a colour graphic display and hard 
copies are easily produced. 
The most commonly 
used integration methods are implemented, methods 
such as Euler and Kutta Merson. 
A method for 
solving 
stiff differential equations is also 
included. SIM may be used in off-line simulation 
as well as real-time simulation. 
The identification package contains programs for 
identification and parameter estimation. 
Many 
powerful techniques are implemented and single 
input - single output and multivariable, linear 
and nonlinear models are considered. Methods such 
as the Maximum Likelihood method and the Extended 
Kaiman 
filter 
method 
are 
available. 
By means of the time series analysis program the 
user can easily operate on data files (edit, 
scale, filter) and perform standard statistical 
analysis (compute correlation functions and power 
spectra). 
There is also available a powerful programmable 
matrix calculator which can handle a great number 
of different matrix manipulations and operations. 
The control package contains a wide variety of 
design and analysis methods. Adaptive controllers 
based 
on 
the 
generalized 
minimum variance 
algorithm and a pole placement technique are 
implemented. 
Colour 
Graphics 
Ö \ 
c p rze,lc 
hard > 
* 
u-Q 
Analog/ 
66 MB 66 MB 
Computer Laboratory 
Data Logging System 
Cartridge 
Recorder 
FIGURE 2 
EXPERIMENTS 
KT IME/FREQUENCY DQMAI 
(DATA LOGGING) 
3 
fDIFF. AND ALGEBR.1 
V 
EQUATIONS 
TIMESERIES ANALYSIS 
fTRANFORMATIONS 
ANALYSIS AND SYNTHESIS| 
OF CONTROL SYSTEMS 
FIGURE 1 
*)Developed 
at 
the 
Norwegian 
Institute of 
Technology div. of Engineering Cybernetics and 
SINTEF, 
the 
foundation 
of Scientific and 
Industrial Research, Dep. of Automatic Control 
at the University of Trondheim, Norway (see 
appendix). The system can be purchased from 
CAMO A/S, Trondheim, Norway. 
The CYPROS system can be implemented on a mini- as 
well as a micro computer system. 
A typical 
installation with peripheral equipment is shown in 
Figure 2. The computer, in this example is a 
Nord-10S, with a core memory of 256 K, 16 bits 
word length. 
Some further information about 
CYPROS is given in the Appendix. 
DATA LOGGING SYSTEM 
Plant 
recordings are essential in modelling, 
either to be used for model evaluation or as input 
data for identification programs. Data logging is 
known to involve many practical problems such as 
scaling, 
analog/digital converting, and noise 
filtering and theoretical problems such as choice 
of sampling rate and experiment length. 
New 
developments in computer technology and hardware 
have led to programmable data logging equipment 
with capabilities that radically simplify the 
logging procedure. Also the transfer of data from 
the logging system to the computer laboratory is 
simplified by the use of a digital cartridge 
system. 
MACSYM 
(Measurement and Control System) is a 
series of measurement and control products from 

Practical CAD Tools 
345 
Analog Devices. We have used the so-called Macsym 
2 and Macsym 350, of which Macsym 2 is the oldest 
system. However, the analog and digital i/o-cards 
are interchangable between the 
two 
systems. 
Macsym 2, although being smaller (64 K RAM) and 
slower than the 350, is the more rugged 
(military 
specifications) of the two systems, and is also 
easier to transport. 
A wide range of i/o-cards are available for the 
Macsyms and the capacity of any of our systems can 
be anything up to 96 analog inputs, 24 analog 
outputs, 8 digital inputs for process interrupts 
with selectable priority, 16 isolated AC or DC 
inputs or outputs when signal level and type is 
hardware selectable. 
There is also an IEEE-488 
bus interface and five serial i/o ports (20 mA 
current loop or RS-232C communication standard). 
All channels (ADIO, bus and serial) are easily 
accessed with BASIC-statements. 
Data storage is either on cartridge recorder 
(Tandberg, TDL-3000) with capacity of 960 K bytes 
on one cartridge. The 350 is in addition equipped 
with dual disk drives with 320 K bytes capacity on 
each. 
An optional 10M byte Winchester disk is 
also a possibility. 
The Macsym 350 contains two units: Macsym 150 
workstation and Macsym 200 intelligent 
front-end. 
The 150 has a 8086 5 MHz 16-bit CPU with a 8087 
math co-processor in tandem, 256 K bytes RAM (up 
to 1 M bytes optional in steps of 128 K). 
A 
special communication port 
(307.2 K baud, 
synchronous, full duplex RS-422) is reserved for 
use as the data link to the Macsym 200 or a local 
area network (LAN) that may service up to 11 
front-ends. 
The Macsym 200 front-end consists of a single 
control board, a sixteen slot card cage with back-
plane for the ADIO cards and a power supply. 
Processing power is derived from a 5MHz 16-bit 
8088 microprocessor with 64 K bytes of RAM. The 
analog functions include a 
precision 
system 
reference for calibration purposes, a sixteen 
channel 
multiplexer, 
a 
programmable 
gain 
amplifier, a sample and hold amplifier and an 
analog to digital converter. 
The A/D-converter provides software selectable 
modes of 12 or 16 bit resolution, integrating or 
non integrating and differential or oneended input 
channels. 
Calibration 
may 
be 
performed 
periodically throughout system operation in order 
to maintain a high level of accuracy over time and 
changing 
environmental 
conditions. 
Standard 
programming language is Macbasic 3 which is an 
expanded version of Basic, that has been optimized 
for real time measurement and control. Special 
keywords designate the most common measurement and 
control functions graphics commands. 
Macbasic 3 
uses a line by line compiler which translates pro-
gram statements directly into machine code as they 
are entered. 
By using this approach the ease of 
interpretive languages is combined 
with 
the 
execution speed of compiled languages. 
An 
important 
requirement in measurement and 
control applications is the ability to perform 
several operations or "tasks" independently of 
each other. Macbasic 3 is structured 
as a 
multitasking language and contains the necessary 
keywords for managing up to 18 tasks at a given 
time. 
Macbasic 3 uses the MP/M-86 operating system which 
is a real time, multitasking superset of CP/M-86. 
CP/M-86 compatible programs will run under MP/M-86 
with little or no modification. 
The third data logging system is based on the NORD 
10S minicomputer with a process interface based on 
the CAMAC-standard. 
This is a Norwegian computer 
with its own operating system, SINTRAN III, which 
provides full real-time support. 
Programming 
language used here is RT-Fortran with i/o routines 
programmed in assembly code. These routines are a 
part of the CYPROS system. 
As stand alone units, using the simplest form of 
data logging programs all these systems can handle 
quite high sampling rates. Maximum is given by 
the Macsym 350 with 33 K samples/sec for logging 
one channel using the fastest type of input card 
and no external storing. For our purposes a 
sampling time shorter than 5 seconds is seldom 
necessary. 
A typical data logging program package may include 
the following tasks: Read process signals, scale, 
linearize, 
compute 
derived 
variables, store 
variables on the recording unit, display the 
recorded data, check process responses against 
alarm conditions and so on. These tasks are easily 
implemented by combining the BASIC interpreter and 
the real-time operating system. 
The analog and digital output process interface 
can be utilized for control and identification 
purposes. Process control algorithms, i.e. PID or 
self-tuning controllers, may be programmed and 
evaluated without the need for a large process 
control computer. 
The recorded data are transferred to the CYPROS 
system as indicated in Figure 2 and stored on a 
special time series file. All the CYPROS programs 
may now utilize the recorded data. 
First comes 
data editing and then system identification and 
parameter estimation. The recorded data may also 
be used for a model verification by comparing 
simulated and recorded responses. 
APPLICATIONS 
Three examples of applications illustrating the 
combined use of the data logging systems and the 
CYPROS program system are summarized in Table I. 
M: motor 
T: temperature 
F: mass flow 
W: weight 
G: gas flow 
FIGURE 3 

346 
A. Tyss0 and L. Kolbeinsen 
Table I 
Use of data logging - and the CYPROS-system in analysing metallurgical processes. 
Process/model-
characteristics 
Data logging and/or 
control system 
Process scale 
Model use 
Model size 
Project size 
(developement of 
general computer 
programs not 
included 
Roasting of pyrites in 
fluidized bed 
! 
ref (3) 
Distributed residence 
time - reduced to lumped 
parameter model. The 
process is continous and 
unstable due to strong 
exotermic gas/solid 
reaction 
NORD 10S with Camac 
process-interface 
Bench (100 kg/day) 
- Verification of model 
reduction (lumping) 
- Model identification 
(Maximum likelihood 
method) 
- Process simulation 
- Testing of control 
strategies 
- State predictor (Kaiman 
filter) integrated in 
multivariable control 
system for the bench 
scale reactor 
50 state variables 
reduced to 5 
- 6 man-years 
Basic oxygen steelmaking 
ref (4) 
Lumped model with inter-
action between foamslag 
and molten metal. 
Batch process - gas plus 
two liquids 
Macsym 2 
Full (70 tons/batch) 
- Dynamic process-
analysis using the 
extended Kaiman filter 
program (EXKALM) 
- On-line state estimation 
to provide continous 
"measurements of carbon 
content, bath 
temperature and 
decarburization rate 
10 state variables 
*· 2 man-years 
Reduction of iron ore in 
shaft furnace 
ref (5). 
Spatial distribution of 
parameters for shaft. 
Lumped parameter model 
used to describe reduction 
of single pellet. 
NORD 10S - CAMAC 
Macsym 2 
Macsym 350 
Pilot (1500 kg/day) 
batch-lab (0.1 kg/batch) 
- Combining experimental 
data from pilot and 
lab.-scale to give a 
total process 
description. 
- Testing different con-
trol strategies for the 
pilot plant 
- Process simulation 
- Analysing pilot-plant 
output-data. 
- 225 state variables 
- 6 man-years 
As it can be seen from the table all of the chosen 
examples are taken from the métallurgie industry. 
The purpose of these examples is to show that the 
proposed modelling approach is capable of handling 
a wide variety of process types ranging from 
laboratory scale to full scale porcesses. 
Both 
batch and continous processes and concentrated and 
distributed parameter models are considered. 
An overview of the processes is given in the 
Figures 3 to 5 and shall not be commented upon 
further. 
For further information see references 
(3) (4) and (5). 
We would, however, stress two 
factors: Dynamic models are used both to analyse 
input/output correlations for a single process, 
and to combine the results of more than one piece 
of process equipment into one total model. 
In métallurgie industry mathematical models can be 
utilized in different ways and of particular 
interest in this context is to use dynamic models 
on-line for supervisory control. 
Such uses for 
dynamic models have been proposed before, but only 
in recent years has there been enough computing 
FIGURE 4 

Practical CAD Tools 
347 
power 
available to make brute force methods 
practical. In such a system the computer, through 
on-line simulation of the process, supplies the 
plant operation and control system with 
the 
necessary process information not available by 
direct measurement. 
THERMO 
BALANCE 
ANALYSIS 
OFF-GAS \ $'L0> 
kW 
HD 
CO, H2, 
C02, H20, 
h/VUUl/WMflJ 
MACRO 
MODEL 
PILOTSHAFT 
i COMPUTERS 
FIGURE 5 
In the case of the basic oxygen furnace as well as 
the sponge iron process, the complexity of the 
interior of the furnace defy description. The 
simulation could be run at a time scale exactly 
matching the process itself or faster in parallel 
with the actual plant to answer the question "what 
if". 
This also would permit a "look ahead" 
simulation of the system. 
The available identification algorithms from the 
CYPROS system could compare real operating data 
with corresponding outputs from the on-line model 
and continually adjust the operating parameters of 
the model to keep the simulation tracking the 
actual operation of the process. 
Conclusions 
Tools for mathematical modelling are discussed. 
It is shown how a programmable data logging system 
can be combined with software program packages to 
reduce the amount of work involved 
in the 
modelling activity. 
The applications referred to clearly indicate that 
it is a must to 
have 
available 
efficient 
CAD-systems and a flexible data logging system in 
order to solve modelling problems in complex, 
industrial 
processes. 
Through modelling we 
achieve a 
better 
understanding 
of 
process 
behaviour and thereby can design better control 
strategies and 
improve 
process 
design 
and 
operation. 
The gain in increased productivity is 
expected to be much higher than the cost of 
programpackages and data logging equipment. 
References 
(1) 
Tyss0 A.: 
(2) 
Tyss0 A. 
(3) 
Saelid, S, 
CYPROS - Cybernetic program 
packages 
MIC, Vol.1 No.4 October 1980 
Balchen, I: Application of CAD in 
Modelling Identification and 
Control of Industrial and Large 
Scale, Nontechnical Processes. 
Paper presented at the 20th IEEE 
Conference on Decision and Control, 
San Diego, USA, 1981. 
Jenssen, N.A., Lindstad, T. and 
Kolbeinsen, L.: 
Modelling, Identification and 
Control of a Fluidized Bed Reactor, 
Preprints of 5th IFAC Symposium on 
Identification and System Parameter 
Estimation, Vol.2,pp 907-916, 
Pergamon Press, 1979. 
(4) Stuan, V,: Control of the L-D Converter. 
Report STF48 F81039, 1981 
(5) Kolbeinsen, L,: Reduction of Iron Ore, 
Mathematical Model for Process 
Control. The Norwegian Institute 
of Technology 1982 (in Norwegian) 
APPENDIX 
CYPRQg, Aflditjonal Software Characterjstics 
Interactive capabilities: Command dialog as well 
as question-answer dialog with the HELP facility. 
Computers and terminals on which available: Com-
puters: 
Nord-10, Nord-100, VAX, 
IBM 
PC/XT 
(partial). 
Terminals: Marconi DTI/Genius, Tand-
berg TDV 2215, Digital VT100, INF0T0N 200, Lear 
Sigler ADM 3A, Data Terminal Incorporation. 
Documentation: 
code. 
User's guides and commented source 
Memory and disc requirements: Memory: 64 k, 16 
bits exclusive operation system. 
Disc: 2000 
pages, 1024 (16 bits). 
Availability of code: Can be purchased as a total 
system or as packages. 
Typical program price, 
minicomputers US$ 3000, microcomputers US$ 400. 
Contact for details: 
CAMO A/S, P.O. Box 2893 
Elgeseter, N-7001 TRONDHEIM, Norway. 
Interactive graphics : 
Software exists for dis-
playing on Tektronix, Versatec matrix plotter, 
HP-plotters 
and 
alphanumeric 
terminals 
of 
different types (see above). 

Copyright © IFAC Computer Aided Design in Control 
T R A N S P O R T A T I O N SYSTEMS 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF SHIP 
CONTROL SYSTEMS 
J. van Amerongen and P. P. J. van den Bosch 
Control Group, Electrical Engineering Department, Delft University of Technology, 
The Netherlands 
Abstract. At the Control Laboratory of the Electrical Engineering Department of Delft 
University of Technology much research has been carried out during the last fifteen years 
in the field of ship control systems, with the main emphasis on automatic steering of 
ships. This work has resulted in the design of an adaptive autopilot (Van Amerongen, 
1984). At the moment research is concentrated on the design of an autopilot which uses 
the rudder not only for course keeping but for stabilization of the roll angle as well. This 
paper demonstrates how modern computer-aided design methods may help in designing such 
a system, especially when analytical methods fail because of non-linearities of the pro-
cess. 
Keywords. 
Computer-aided 
design, 
Computer-aided 
system 
design, 
Control 
engineering 
computer applications, Ships, Steering machine. 
1. INTRODUCTION 
When a controller has to be designed for a process it 
is generally assumed that the process is more or less 
linear. In that case many design methods are available 
and a systematical design is possible. This approach is 
only valid when the non-linearities in the process can 
indeed be linearized, for instance when small varia-
tions around a certain operating condition are consid-
ered. The validity of such assumptions has to be 
demonstrated by means of simulation or by exper-
iments with the real system. In this paper it will be 
shown how simulation, 
combined with 
experimental 
optimization, can be used to design a controller for a 
process which has essential, non-linear properties. This 
design method will be illustrated with a simple exam-
ple in the field of automatic steering of ships. In 
Section 2 the mathematical models which describe the 
ship's 
steering 
process 
will 
be 
given. 
Section 
3 
describes the design of a controller based on an LQG-
approach. It will also be illustrated where this con-
troller design fails. Section 4 summarizes the proper-
ties of the interactive simulation program PSI. This 
program is used in Section 5 to further 
investigate 
the controller design for a process with a non-linear 
behavior. 
2. MATHEMATICAL MODELS 
2.1 The ship's dynamics 
The dynamics of a ship may be described by various 
models. For the purpose of designing a controller for 
course keeping, a simple first-order model (Nomoto, 
1957) is appropriate to describe the transfer between 
the rudder angle and the rate of turn: 
τψ + ψ 
= Κό 
(2.1) 
where 
6 
= the rudder angle 
ψ 
= dijj/dt = the rate of turn 
and 
ψ 
= the heading 
Consequently, the transfer between the rudder angle 
and the heading is of the second order. This model is 
given in figure 1. 
S T + 1 
Ψ 
Figure 1 First-order Nomoto model 
2.2 Basic controller algorithm 
A state-feedback 
controller for this system can be 
made by using the control algorithm: 
= Κ ρε 
καψ 
(2.1) 
where 
ε 
= the heading error 
2.3 The steering machine 
The rudder angle computed by the controller is not 
directly available as an actual rudder angle. The lat-
ter is realized by a hydraulic steering machine. As 
long as the rudder motions are small and the 
fre-
quency is low the steering-machine dynamics may be 
disregarded. In that case the controller (2.2) may be 
computed, based on the assumption that the system is 
linear. However, for large and high-frequency rudder 
motions 
it 
is 
essential 
that 
the 
steering-machine 
dynamics be taken 
into account. The most 
simple 
model of 
a steering machine 
for 
this situation is 
given in figure 2. The rudder angle is limited to a 
maximum value of 35 degrees, while the rudder speed 
is limited to a value of about 3 degrees per second. 
The maximum rudder angle may be further limited by 
adding a limiter to the controller, but this will not be 
considered in this paper. The maximum rudder speed 
349 

350 
J. van Amerongen and P. P. J. van den Bosch 
of 3 degrees per second is about the minimum speed 
required by the classification (insurance) companies. It 
will be shown below 
that the 
limited rudder speed may have a deteriorating effect 
on the system's performance. 
optimal controller gains: 
6' J 
<Wx. 
y 
/ : 
rue 
lim 
der 
iter 
δ'Γ;^ 
- i i 
Umax . 
speed 
limiter 
δ 
_ 1 
s 
1 
δ 
Figure 2. The steering machine 
2.4 Disturbances 
At sea a ship is influenced by various disturbances, 
the wind and waves being the most important ones 
with respect to control of the heading. The wind can 
be 
modeled 
by 
a 
low-frequency, 
almost 
constant 
disturbance 
which 
adds 
to 
the 
rudder 
angle. 
The 
waves 
are 
more 
high 
frequency 
and 
are 
of 
a 
stochastic character. In simplified form they can be 
modeled as white noise colored by a second-order fil-
ter with low relative damping (z = 0.1) and 
α^ = 
0.7. Of course both values depend upon the sea state 
and upon the ship's speed and the angle of incidence 
of the waves. The output of this filter can be added 
to the rudder signal. The transfer function of the col-
oring filter is given by: 
3.16 
16.5 
The behavior of the control system 
for an initial 
heading error of 2 degrees is shown in figure 3. 
2 
2 
s 
+ 2ζω s+ω 
(2.3) 
100 
Figure 3. System performance for an initial heading 
error of 2 degrees. 
However, when not only the initial heading error but 
also a stochastic disturbance is added to the system, 
it can be noticed in figure 4 that the rudder now 
almost constantly moves with its maximum speed. In 
this case it is no longer allowable to disregard the 
limited rudder speed. 
3. LINEAR CONTROLLER DESIGN 
As 
long 
as 
the 
steering-machine 
dynamics 
are 
disregarded the design of a controller for the process 
described by figure 1 is straightforward. In the litera-
ture many discussions can be found on the criterion 
which should be used in order to minimize the speed 
losses 
due 
to 
imperfect 
steering 
(Koyama, 
1967, 
Norrbin, 1972, Van Amerongen, 1982). From a control-
engineering point of view the following criterion is a 
simple one and it has, under certain conditions, a 
direct relation to the speed losses: 
J = 
/ ( ε 2 + λό2) dt 
(3.1) 
The optimal controller for the process of figure 1, 
which 
minimizes 
criterion 
(3.1), can 
be 
found 
by 
applying a standard LQG approach. This yields the 
expressions for the proportional gain K 
and the rate-
feedback gain Kd. 
K = 
P 
V 
= 1/ 
1 
= K 
7λ 
{/l 
+ 2K 
7x~ 
-1 } 
(3.2) 
(3.3) 
In literature there is a lot of confusion 
about the 
value of 
the weighting 
factor 
λ 
, which 
indeed 
minimizes the loss of speed. This is also due to phe-
nomena 
which 
will 
be demonstrated 
later 
in 
this 
paper. At the moment a value of 
λ of 0.1 will be 
chosen. This yields with: 
K = 0.1 
τ = 10 
10 
-10 
Figure 4. System performance with an additional 
stochastic disturbance. 
In Van den Bosch (1983) a comparison has been made 
between a mathematically-oriented design method (lin-
ear output feedback) and simulation and optimization 
for designing controllers for linear systems. It turns 
out that the flexibility in selecting a criterion or a 
controller structure is much larger with the simulation 
and optimization 
approach 
than with linear 
output 
feedback. This advantage has to be paid for with an 
increase in calculation time ranging from about 25 
times for low-order systems to about 5 times 
for 
high-order 
systems. 
In using 
advanced 
optimization 
techniques during the simulation these numbers can be 
halved. 
Consequently, 
even 
in 
designing 
linear 
controllers 
for 
linear 
systems, 
the 
simulation 
and 

Design of Ship Control Systems 
351 
optimization 
approach 
is 
a 
powerful 
and 
flexible 
design tool. 
Dealing with nonlinear systems or when designing dis-
crete 
controllers 
for 
continuous 
systems, 
mathemathically-oriented 
design 
methods 
cannot 
be 
used. Then, simulation and optimization still continue 
to be powerful and flexible design tools. 
In the next section the program PSI will be intro-
duced. 
The 
optimization 
facility 
of 
this 
program 
enables the design of a suitable controller for linear 
as well as non-linear systems, so that it is well suited 
to solving this problem. 
4. PSI 
The interactive block-oriented simulation program PSI 
(Van den Bosch 1981, 1982) can be used for simulation 
purposes, but due to its optimization possibilities it 
can also successfully 
be applied to the design of a 
controller for linear as well as for non-linear systems. 
The combination 
of a powerful 
simulation 
package 
with the optimization 
facility 
makes PSI especially 
attractive for control systems which cannot easily be 
designed with analytical 
methods. A survey of 
the 
facilities of PSI is listed below: 
Facilities 
- About 90 commands support the user in realizing his 
design objectives. 
- Five numerical integration methods are available, 
namely 
four 
fixed-step 
methods 
(Euler, 
Adams 
Bashfort 2, Runge Kutta 2 and 4) and one variable-
step-size method (Runge Kutta 4). 
- Algebraic equations are solved by a fast Newton-
Raphson algorithm. If this procedure fails, a more 
reliable, 
although 
slower, 
optimization 
algorithm 
is 
used. 
- Optimization with scaling and constraints is sup-
ported. In PSI the user can define the output of an 
arbitrary block as the criterion and up to eight arbi-
trary 
parameters 
of 
the 
simulation 
model 
as 
parameters of the optimization. The parameters that 
offer 
the smallest 
value of 
the criterion 
will 
be 
accepted as the solution of the optimization proce-
dure. 
Pattern 
search 
(Hooke 
and 
Jeeves 
(1961), 
equipped with a premature stop of the simulation run, 
has been selected as the non-linear optimization pro-
cedure, due to its robustness and lack of a line-
minimization procedure. 
Although Pattern Search adjusts its search step size 
according to the "shape" of the criterion, improve-
ment of the speed of convergence can be obtained by 
using scaling. Scaling can make each parameter about 
equally important for the optimization algorithm. Not 
only is scaling supported by PSI, but constraints are 
also allowed. Each parameter may have an upper and 
a lower limit. The optimization algorithm will only 
search for an optimum in the feasible region of the 
parameter space. 
- Multi-run facilities are available. For example, run-
control blocks, comparison of signals between several 
runs, etc. With the aid of storage variables PSI offers 
the initial-dynamic-terminal facility of CSMP III. At 
the end of a simulation run, this run can be continued 
without resetting the time and the initial conditions. 
- Extensive tests on all user-supplied information is 
implemented. Each error is indicated by a meaningful 
error message, of which there are about 60. 
- About 50 powerful block types are available, among 
which integrators (limited, mode-controlled, converts), 
continuous and discrete PI- and PD-controllers, Pulse-
Width Modulation, etc. Fortran programming in a non-
interactive 
mode is required 
to 
define 
new 
block 
types. The user only needs to write a subroutine in 
which 
the output is defined as a function 
of 
the 
input(s) and parameter(s), compile it and after a link 
step, his block is available. 
- 
There 
are 
memories 
to 
store 
signals during 
a 
simulation run. These signals can be studied after the 
simulation run, can be saved on disk or can be used 
as 
inputs 
for 
future 
runs. 
These 
signals 
can 
be 
redrawn on 
the screen, 
as responses or as phase 
trajectories, after which a cursor, controlled by key-
board commands, can "walk along" these responses. 
The numerical values appear directly on the screen, 
so 
that 
overshoot, 
rise 
time 
or 
accuracy can be 
determined both quantitatively and qualitatively. 
- 
Symbolic 
block 
names 
can 
be 
used. 
Instead 
of 
numbers each block or variable can be assigned a 
user-selected 
name 
of 
up to 
eight characters. So 
blocks 
can 
get 
meaningful 
names 
like 
HEADING, 
RUDDER or INPUT instead of abstract numbers like 
block 13, 91 or 512, etc. 
This section 
has 
described 
a number 
of 
facilities 
which make programs, such as PSI, highly suited to 
the analysis and design of control systems. PSI is able 
to solve (non-linear) differential, difference, algebraic 
and 
logical, 
Boolean 
equations 
or 
any 
mixture 
of 
them. 
Moreover, 
an attractive 
and powerful 
inter-
action is realized between the user and the program. 
5. CONTROLLER DESIGN WITH PSI 
With the aid of the program PSI the controller found 
earlier can be redesigned for the situation with the 
non-linear steering machine. The system is 
simulated in PSI. The controller structure 
and 
the 
criterion may be left unchanged. With the optimiza-
tion facility of PSI the controller gains K 
and K^ 
are computed for a situation similar to figure 4. The 
following values are found: 
K 
= 1.2 
Kd = 1-3 
The behavior of the system is shown in figure 5. 
4 
Γ 
t 
L 
ψ Κ 
A 
- l o \ 
_ _ ^ _ _ _ _ _ 
1 
o 
^ — * 
loo 
Figure 5. System performance after re-optimization. 
CADCES-L* 

352 
J. van Amerongen and P. P. J. van den Bosch 
These values are much lower than those found before. 
The difference in the controller behavior can clearly 
be seen in the performance 
of 
the rudder signal, 
which is much smoother with the redesigned control-
ler. The course-keeping behavior is hardly affected. 
Because of the non-linear process which is considered 
here it is not possible to find a controller which gives 
an optimal performance for all situations. However, 
playing with the simulation program and carrying out 
the optimization for various types of disturbances and 
initial heading errors gives an indication about 
the 
parameters which may be used for a sub-optimal solu-
tion in a wide range of situations. The results may 
also be used for designing an adaptive controller. 
6. CONCLUSIONS AND DISCUSSION OF THE 
RESULTS 
In this paper it has been demonstrated how a control-
ler for a non-linear system can be designed by using 
a simulation program with optimization facilities. The 
resulting controller differs considerably from the con-
troller 
which 
is 
found 
when 
the 
system's 
non-
linearities are disregarded. A similar result can be 
obtained when the weighting factor X 
in criterion 
3.1 is increased. This is a well-known solution for 
preventing a system from saturating. However, in that 
case the parameters which are found differ from the 
parameters 
found 
with 
PSI. 
This 
implies 
that 
by 
increasing the value of 
X 
, a sub-optimal solution 
is found. On the other hand, 
it 
appears that 
the 
experimental 
optimization 
applied in PSI finds 
the 
(analytical) optimal solution in the linear case as well. 
Of course there are other possibilities for diminishing 
the influence of stochastic disturbances on the rudder 
signal (Van Amerongen, 1984). The solution presented 
in this paper is not intended for designing an optimal 
autopilot, 
but 
for 
demonstrating 
the application of 
computer-aided design facilities for designing appropri-
ate controllers for ships. A similar approach can, for 
instance, be applied to determine optimum 
Kalman-
filter 
gains 
for 
situations 
where a 
straightforward 
Kalman-filter design would be difficult. 
A disadvantage of the proposed method is that it only 
gives an optimal solution for the investigated type of 
signals. For other disturbances the optimization should 
be done again. 
The method is not very fast, because each step of 
the 
optimization 
procedure 
requires 
a 
complete 
simulation run. If there is more than one minimum 
for the cost function it cannot be guaranteed that the 
optimum solution will be found. However, this can 
easily be circumvented by choosing a few 
different 
starting points. 
REFERENCES 
Amerongen, J. van (1982). Adaptive steering of ships -
a model-reference approach to improved manoeuvring 
and economical course keeping, Ph.D. Thesis Control 
Laboratory, Delft University of Technology, p. 195 
Amerongen, J. van (1984). Adaptive steering of ships -
a model reference approach, Automatica, vol. 20, no 
1, (3-14) 
Bosch, P.P.J. van den (1981). PSI - A Software Tool 
for Control System Design, Journal A, vol. 22, no 2 
(55-62) 
Bosch, 
P.P.J. 
van 
den 
(1982). 
PSI 
- 
Interactive 
Simulation Program. IEEE Control Systems Magazine, 
vol. 2, no 4, December 1982 (42) 
Bosch, 
P.P.J. 
van 
den 
(1983). 
Interactive 
System 
Analysis 
and 
System 
Design 
Using Simulation 
and 
Optimization. 
Proceedings 
IFAC 
Symposium 
on 
Computer Aided Design of Multivariable Technological 
Systems 1982, Lafayette, Pergamon Press London 1983 
(225-232) 
Hooke, 
R. 
and T.A. 
Jeeves 
(1961). Direct 
search 
solutions of numerical and statistical problems, JACM, 
vol. 8 (212-229) 
Koyama, 
T. 
(1967). 
On 
the 
optimum 
automatic 
steering system of ships at sea, J.S.N.A., vol. 122, 
Dec. 
Nomoto, 
K., T. Taguchi, K. Honda and S. Hirano 
(1957). 
On 
the 
steering 
qualities 
of 
ships, 
Int. 
Shipbuilding Progress, vol. 4 
Norrbin, N.H. (1972). On the added resistance due to 
steering 
on 
a straight 
course, 
13th ITTC, 
Berlin, 
Hamburg 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF ROBUST 
MULTIVARIABLE STRUCTURE CONTROL 
SYSTEMS 
C. M. Dorling and A. S. I. Zinober 
Department of Applied and Computational Mathematics, University of Sheffield, 
Sheffield S10 2TN, UK 
Abstract. Variable structure control systems employ discontinuous non-linear control 
functions linked with a manifold in the state space in order to obtain desirable 
robustness and invariance properties. A CAD package to aid the design of such 
multivariable control systems has been developed by the authors. The theory and 
scope of a robust eigenvalue assignment approach is described with reference to a 
multivariable CAD package and an example of its use is given. 
Keywords. Variable structure systems; robust pole-placement; multivariable control 
systems; non-linear control systems; sliding states. 
INTRODUCTION 
The essential feature of a variable structure 
control system (VSCS) is that the (generally non-
linear) feedback control has a discontinuity on 
one or more manifolds in the state space. The 
structure of the feedback system is altered or 
(switched) as its state crosses each disconti-
nuity surface. Thus, VSCS may be regarded as a 
combination of sub-systems, each with a fixed 
structure and each operating in a specified 
region of the state space. The central feature is 
the sliding mode which occurs when the system 
state repeatedly crosses and immediately re-
crosses a switching manifold, because all motion 
in the neighbourhood of the manifold is directed 
inwards towards the manifold. In the sliding 
mode the system is effectively constrained to 
lie within a certain subspace of the full state 
space, and the system is thus formally equivalent 
to a system of lower order, termed the equivalent 
system. The dynamic behaviour of this equivalent 
system is different from that of each of the 
constituent sub-systems. 
The transient motion of a VSCS therefore consists 
of two independent stages: a (preferably rapid) 
mode bringing the state of the system to the 
attractive manifold in which sliding occurs; and a 
slower sliding mode towards the state space 
origin in the sliding subspace. This two stage 
behaviour can help to resolve the conflict 
between the opposing requirements of static and 
dynamic accuracy which are encountered when 
designing a linear control system, because a VSCS 
may be designed to give: a rapid response with no 
loss of stability; asympotic state regulation; 
insensitivity to parameter variations and 
invariance to certain external disturbances. 
The theory of VSCS has been developed over the 
past 25 years. Until recently this development 
was carried out almost exclusively in the USSR; 
consequently, the majority of the literature is 
in Russian, with relatively few papers appearing 
in the Western literature. Of the few English 
language monographs in the area, those by Itkis 
(1976) and Utkin (1978) provide a reasonable 
survey of the theory up to that time. A survey 
paper by Utkin (1977) references many of the 
early contributions available in translation. 
As will be shown in the next section, the design 
of the sliding mode in a nominally linear control 
system may be completed independently of the form 
of the actual control functions selected. After 
defining the nominally linear time-varying and 
uncertain system to be controlled, some of the 
options available in the design of a stable 
sliding mode will be considered. A canonical 
form is employed for the design of the hyperplane 
matrix and the control structure. The two main 
approaches for designing the sliding mode are 
mentioned and in this paper attention is focussed 
on the robust eigenvalue assignment problem. The 
design of the controller which ensures that the 
two stages of the VSCS operate correctly, is then 
outlined. The control chatter may be eliminated 
without serious deterioration of the dynamic 
closed-loop response. 
SYSTEM DEFINITION 
The system is expressed in its most general form 
as 
x(t) = LA+AA(t)Dx(t)+LB+AB(t)Du(t) 
(1) 
where x is the state n-vector and u is the control 
m-vector. It is assumed that n>m, B is of full 
rank m and that the pair (A,B) is completely 
controllable. The matrix ΔΑ represents the 
variations and uncertainties in the plant para-
meters, while ΔΒ is the plant/control interface 
uncertainty. The overall aim of a variable 
structure regulator control design is to regulate 
the system state from an arbitrary initial 
condition x(0) = x° to the state space origin 
asymptotically as t-*». The components u. 
(j=l,2,...,m) of the control vector u are state 
dependent (feedback) functions, u. = u.(x). The 
switching surfaces are intersecting hyperplanes 
M. passing through the state space origin and 
J 
defined by M. 
J 
0} (j = l,2,...,m) 
{x:c.x 
J 
where c. is a row n-vector. The (ideal) sliding 
mode occurs when the state lies simultaneously in 
-each of the hyperplanes M. for j = 1,...,m; it is 
attained when the state reaches and remains in 
the manifold M which is the intersection of the m 
353 

354 
C. M. Dorling and A. S. I. Zinober 
hyperplanes: M = Cx = 0. In geometrical terms 
the subspace M is the null space (or kernel) of 
C, denoted N(C). CB is assumed to be non-
singular in this paper to ensure a unique con-
troller. (The singular case has been discussed 
by Utkin (1978)). 
Some workers have replaced the individually 
discontinuous control functions with a unit 
vector controller (Balestrino, De Maria and 
Sciaviccio, 1982; Ryan and Corless, 1984). This 
is an m-vector state feedback function of the 
form s(x) = Cx/||Cx||, which has a discontinuity 
on M but is continuous on each of the individual 
hyperplanes M. (j = 1,2,...,m). 
However, once 
the sliding m ède is reached, the behaviour of 
the system under this form of control is 
identical to the sliding motion in the case of 
the individually discontinuous control functions. 
In the case of an ideal system (ΔΑ = 0, ΔΒ = 0) 
the sliding mode may be determined from the 
defining condition Cx(t) = 0 for t^t where t 
is the time when the sliding mode is reached. 
Differentiating with respect to time and insert-
ing (1) gives 
matrix B has full rank m, so that there exists an 
orthogonal n><n transformation matrix T such that 
TB = 
(5) 
where B is mxm and non-singular. The ortho-
gonality restriction is imposed on T for reasons 
of numerical stability and to remove the problem 
of inverting T when transforming back to the 
original system in the CAD package. 
The transformed state is y = Tx and the state 
equation (4) becomes 
y(t) = TATTy(t) + TBu(t) 
(6) 
and the sliding condition is CTTy(t) = 0. If the 
transformed state y is now partitioned as 
Γ Υ ι
Τ
Υ 9
Τ ] ; y . e l R ™, y^elR» 
(7) 
and the matrices TATT, TB and CTT are partitioned 
accordingly, then 
Cx(t) = CAx(t) + CBu(t) = 0 (t 
t ). 
s 
(2) 
An equivalent control u 
may be determined in 
eq 
the linear feedback form u (t) = - Kx(t) where 
e q 
. 
-1 
the mxn feedback matrix K is given by K = (CB) CA. 
The system dynamics are then described by the 
system equation 
and 
y^t) 
y2(t) 
A ny,(t) + A12y2(t) 
A2lVC) 
A y (t) + B u(t) 
11 z 
z 
C l y l ( t ) + C 2 y 2 ( t ) 
(8) 
(9) 
x(t) = A x(t) = [I - B(CB)_1C]Ax(t) 
eq 
n 
(t > t ). 
where 
(3) 
Note that this motion is independent of the 
actual control u during the sliding mode and 
depends only on the choice of C. In other words, 
the function of the control u in a VSCS is to 
drive the state into sliding subspace M, and 
thereafter to maintain it within M. The con-
vergence of the state vector to the origin is 
ensured by suitable choice of the feedback 
matrix K. The determination of the matrix K (or, 
more precisely, the determination of the matrix 
C defining the subspace M) may thus be completed 
with no prior knowledge of the form of the control 
vector u (although the reverse is not true). The 
null space of C, N(C), and the range space of B, 
R(B), are complementary subspaces; i.e. 
N(C) n R(B) = {0}. Since motion lies entirely 
within N(C) during the sliding mode, the be-
haviour of the ideal system during sliding is 
unaffected by the controls since they act only 
within R(B). 
SYSTEM TRANSFORMATION 
For simplicity of presentation we initially 
restrict attention to the ideal (or nominal) 
system 
x(t) = Ax(t) + Bu(t). 
(4) 
Our first task is to specify a particular canoni-
cal form for the system in order to simplify the 
development of the design scheme. This form, 
which is closely related to the controllability 
canonical form for a multivariable linear system 
(Kwakernaak and Sivan, 1972), is similar to that 
used by Utkin and Yang (1978) in an earlier 
paper on hyperplane design. By assumption the 
T 
TAT = 
All 
A12 
A21 
A22 
C T 1 = re c2J 
(10) 
and C9 is non-singular from CB non-singular. The 
more general system (1) can also be similarly 
expressed, if Τ(ΔΑ)ΤΤ and Τ(ΔΒ) are also par-
titioned compatibly with y and y . 
It will be assumed throughout the remainder of 
this paper that the uncertainties in the plant. 
control interface occur only on the input 
channels, i.e. rank(B) = rank(B ΔΒ). Under this 
assumption,ΔΒ (t) 
0, and y again becomes 
independent of the control u. 
The canonical form is central to the hyperplane 
design methods to be described. It also plays a 
significant role in the solution of the reach-
ability problem, i.e. the determination of the 
control form ensuring the reaching of the sliding 
mode. Equation (9) defining the sliding mode is 
equivalent to 
y2(t) = - FY](t) 
where the mx(n-m) matrix F is defined by 
-1 n 
F = C„ 
1 
( Π ) 
(12) 
so that the evolution of y in the sliding mode 
is related linearly to that of y . The ideal 
sliding mode is therefore governed by the 
equations 

Robust Multivariable Structure Control Systems 
355 
Α π Υ ι ( 0 + A
1 2
y 2 ( t ) î 
y2(t) = -FyjCt): 
(13) 
an (n-m) th order system in which y plays the role 
of a state feedback control. Closing the loop 
gives 
y,(t) = (A n 
A 1 2F) y i(t); 
(14) 
so that the design of a stable sliding mode (ie, 
so that y-K) as t-*») requires the determination of 
the gain matrix F such that A -A F has n-m left-
hand half-plane eigenvalues. This may be achieved 
by using a modified form of any standard design 
method giving a linear feedback controller for a 
linear dynamical system. The main methods are 
those based on the minimisation of a quadratic cost 
functional and eigenvalue assignment. However, 
before discussing these methods in more detail, we 
note that whichever scheme is chosen for the 
design, fixing F does not uniquely determine C, 
since m z degrees of freedom (d.o.f.) remain in 
the relationship C-F = C . The simplest method 
of determining C from F is that employed by 
Utkin and Yang (1978): namely, letting CL = I . 
z 
m 
This has the merit of minimising the amount of 
calculation in proceeding from F to C, and hence 
reduces the possibility of numerical errors. 
HYPERPLANE DESIGN BY DIRECT 
EIGENVALUE ASSIGNMENT 
The majority of VSCS designs appearing in the 
literature to date have suggested eigenvalue 
assignment methods in the design of the sliding 
mode. Since these problems have generally been 
scalar-controlled examples with a single switch-
ing hyperplane, specification of the n-1 eigen-
values to be associated with the sliding mode 
completely determines the feedback matrix F (in 
this case, an n-1 element row vector). 
For the multiple input case, Utkin and Yang (1978) 
show that the pair (A,,, A _) is controllable and 
that the eigenvalue assignment in (14) is there-
fore feasible. It is well known, however, that 
the assignment of eigenvalues of an nth order 
m-input system requires only n of the nm d.o.f. 
available in choosing the feedback gain matrix 
(Srinathkumar and Rhoten, 1975; Shah, Fisher and 
Seborg, 1975). The remaining n(m-l) d.o.f. may be 
utilised in some other way; and, in particular, in 
partially assigning the eigenvectors. Two comple-
mentary approaches to the specification of the 
eigenvectors have been studied. Shah and coworkers 
show that at most m elements of an eigenvector 
may be assigned arbitrarily; the remaining n-m 
elements are then fully determined by the 
assigned elements. Thus one approach to eigen-
vector assignment would be to pick m elements 
according to some scheme and accept the remaining 
elements as determined. This might allow a degree 
of adjustment to be carried out by inspection. 
The alternative method of eigenvector assignment 
is by consideration of the assignable subspace 
corresponding to a given eigenvalue (Moore, 1976; 
Klein and Moore, 1977). This assignable subspace 
for the eigenvalue λ. may be characterised as the 
null space of the (n-m)xn matrix Η(λ.) defined by 
Η(λ.) = Γ Α - λ . Ι 
A10J 
l 
1 1 1 n-m 
12 
(15) 
This capability of assigning the eigenvectors may 
also be used in two complementary ways: to shape 
the response of the closed loop system; or to 
maximise the robustness of the eigenvalue place-
ment. Here we consider only the second approach. 
For simplicity we assume throughout that the non-
zero sliding mode eigenvalues are distinct from 
each other and from the eigenvalues of A 11 
ROBUST EIGENVALUE ASSIGNMENT 
The freedom to assign (at least partially) the 
eigenvectors of the equivalent system may be used 
to ensure that the eigenvalues associated with 
the sliding mode are maximally insensitive to 
perturbations in the system parameter matrix A. 
Including the parameter variation terms in the 
closed loop form (14) gives 
(A n-A 1 2F) y i KAAn-AA12F)yi 
(16) 
where the explicit time dependence of y., ΔΑ 
andAA _ has been dropped. The second term on the 
r.h.s. of (16) represents the perturbation of the 
nominal system (14) due to parameter variations. 
This term is, in general, time-varying and arbit-
rary; the robust assignment approach aims to 
minimise its effects. 
If the parameter variations are matched, i.e. rank 
(B) = rank (ΓΒ ΔΒ]), then the robust control 
designs of Ryan (1983) and Ryan and Corless (1984) 
may be employed to ensure that the state reaches 
and remains within the sliding manifold N(C). 
This is equivalent to maintaining the m zero-
valued eigenvalues of A 
corresponding to the 
dynamics in R(B) at zero. However, if the para-
meter variations are unmatched, then the ideal 
sliding mode will be disturbed. Our aim is there-
fore to design the feedback matrix F such that 
the n-m assigned non-zero eigenvalues are maxi-
mally robust, thereby minimising the effects of 
the parameter variations in the N(C) on the 
sliding mode dynamics. 
Now the sliding mode system as described by (16) 
represents an (n-m)th order system with m control 
inputs. 
(n-m)xm and rank p which satisfies 
The interface matrix A 
has dimension 
1 $ p < min {n-m,m}. 
(17) 
Note that p = 0 would imply (A ,A ~) uncontroll-
able, contradicting the controllability of the 
original system. If p<m, the sliding mode system 
has redundant inputs which may be removed by 
reordering the control inputs and setting part of 
F to zero. 
We now describe the hyperplane design scheme for 
robust eigenvalue assignment under the assumption 
that p = m. Let λ. ε σ(Α. -A.„F), with corres-
r 
l 
1 1 1 2 
ponding right eigenvector v. ε ]Rn~m and left 
eigenvector r. ε IP.n~m. Then it is well-known 
(see Wilkinson, 1965) that the sensitivity of λ. 
to perturbations in A 
, A 
and F depends 
approximately linearly on the quantity 1/c., the 
secant of the angle between the vectors v. and r., 
so that (1/c.) £ 1. In the case of an equal 
number of states and inputs for the sliding mode 
system (n-m = m ) , we have complete freedom in 
assigning the eigenvectors of A J J - A ^ F , and can 

356 
C. M. Dorling and A. S. I. Zinober 
do no better than selecting an orthogonal eigen-
vector matrix V = [V,V0...V 
] which clearly gives 
1 I 
n-m 
(l/c.)= 1, and in particular we may take V = I 
l 
n-m 
More generally, l<m<n-m and we should aim to make 
1/c. as small as possible for each i = 1,...,n-m. 
Now, it is also well-known (Wilkinson, 1965) that 
an upper bound on each of the sensitivities is the 
spectral condition number K(V) defined by 
K(V) 
|v| -1 
(18) 
where the spectral matrix norm is employed. Thus 
minimising K(V) should ensure that the sensitivi-
ties of all the assigned eigenvalues are accept-
able; and, additionally ensure that V is well-
conditioned w.r.t. inversion, so that the solution 
process for the feedback matrix F is stable and 
the bounds on the magnitudes of ||F|| and the 
transient response are minimised. It should be 
noted, however, that we are not free to choose 
our eigenvectors v^ arbitrarily if m<n-m, and 
that the minimum attainable condition number K(V) 
is therefore not necessarily unity for a given 
set of eigenvalues. 
than minimising the sum of distances between the 
vectors and the spaces themselves) is that it is 
more efficent for systems in which the number of 
states is very large and the number of controls 
small. 
The method described does not, in fact, produce a 
minimum for K ( V ) , but it does minimise a con-
ditioning measure giving a good approximation to 
the optimal conditioning. The minimum attainable 
conditioning may be determined from the matrices 
S. calculated in Step A. We have found the above 
algorithm to be reasonably successful in practice 
although we have not yet attempted the case of 
complex eigenvalues because of the additional 
difficulties involved (see Kautsky and Nichols, 
1983). 
EXAMPLE 
In order to demonstrate the above procedure we 
consider a simplified flight control design 
problem discussed by Harvey and Stein (1978). The 
state and control vectors x and u are given by 
Four methods for determining a suitable set of 
eigenvectors for a specified spectrum in the 
usual linear feedback system are described by 
Kautsky and Nichols (1983) and Kautsky, Nichols 
and Van Dooren (1984). The four methods each 
consist of three steps, labelled A, X and F; steps 
A and F are identical in all cases, with the 
crucial step X differing from methods to method. 
Here we adapt one of these methods to the res-
tricted problem of assigning the eigenvalues of 
the sliding mode system. This particular method 
was selected as being generally the most efficient. 
Fuller details of the algorithm may be found in 
the reports of Kautsky and colleagues. 
Step A: Construct a basis for the null space of 
Η(λ.) (i = l,...,n-m) as the columns of an nxm 
T 
natrix V. such that S. S. = I 
l 
i l 
n-m 
si 
rp r 6 φ δ 6 ]; u T = [6 6 ] 
rs s 
r a 
re ac 
where p and r are the stability axis roll and 
yaw rates, respectively; 3 and φ the sideslip and 
bank angles; 6 and δ the deflections of the 
r 
a 
rudder and ailerons; and δ 
and δ 
are the rudder 
re 
ac 
and aileron command signals. The linearised 
(ideal) model is described by (4) with 
-.746 .387 -12.9 
.952 
6.05 
.024 
006 
1 
0 
0 
- . 1 7 4 
- . 9 9 9 
0 
0 
0 
4.31 
- . 0 5 7 8 
0 
0 
0 
0 
.0369 
0 
0 
0 
-1.76 
■ 
.0092 
0 
-10 
0 
-.416 
- . 0 0 1 2 
0 
0 
-5 
and B having zero entries everywhere except for 
b 5, - 20, b 6 2 - .0. 
Step X: Determine vectors v. in R(S.) such that 
I I v.I I = 1 (i = 1,...,n-m); and set V = [v,. ..v ]. 
1 ' i M 
1 
n-m 
The transformation matrix reorders the states and 
switches the signs of the angles 8 and φ. The 
assignment problem is to find the 2 x 4 matrix F 
such that the system (13) with 
Step F: Define w. = sT v. (i = l,...,n-m), set 
- — 
l 
i l 
W = [V,w,...V 
w 
j, and solve FV = W for the 
1 1 
n-m n-m 
feedback gain matrix F. 
.174 
.024 
0 
-4.31 
.387 
-.7460 
0 
12.9 
0 - 1 
0 
0 
.9990 -.006 
.0369 -.057* 
In the chosen method the step X is further 
divided: a set of orthonormal vectors x. 
1 
(i = l,...,n-m) which minimise some measure of 
distance between x. and R(S.) is determined; and 
then for each ι = l,...,n-m, the vector x. is 
projected into R(S.) to give x.. Since we wish to 
make each vector as close as possible to R(S.), we 
1 
wish to make the angle between each vector and 
the orthogonal complement of R(S.) as large as 
possible. The measure of distance employed is 
therefore taken to be the sum of the angles be-
tween each vector x. and the orthogonal complement 
of the corresponding space R(S.). This measure is 
maximised by rotating the vectors iteratively, in 
such a way that the increase in the measure of 
distance is maximised at each step. Clearly there 
is a maximum value that this measure may attain, 
so the iterative procedure will converge. The 
reason for choosing to maximise this sum (rather 
12 [:* 
6.05 
.952 
.0012 
-.0092 
has the spectrum Λ = {-4, -.65, -.6, -.05}. The 
process described above leads to the matrix 
F = 
Γ .627 
[-2.447 
.148 -.082 
-.644 
.313 
M07] 
.799j 
giving K(V) = 3.719 compared with a minimum 
conditioning of 1.075. The sensitivities of the 
individual eigenvalues of Λ are respectively 
1.365, 2, 1.365 and 2. Setting C£ 
the hyperplane matrix 
= I 2 gives 
.148 
.627 -2.107 .081 
.644 -2.447 -.799 -.313 
7 0 ll 
1 Oj 
By comparison, a design based upon the approach of 
Harvey and Stein (1978) using eigenvector assign-
ment directly gives 

Robust Multivariable Structure Control Systems 
357 
F = [-: 
820 
.564 -.006 
788 -.131 -.024 
2.221 
1.727 
with the corresponding sensivities 1.717, 26.877, 
26.757 and 2.191. The robust design has 
consistently lower sensitivity indices and the 
second and third values show a marked improvement 
over the alternative approach. 
CONTROLLER DESIGN 
Once the hyperplane matrix C specifying the 
sliding manifold M has been fixed, the problem 
remaining is to select a suitable state feedback 
control function u which will drive the state x 
to M and maintain it thereafter within this space. 
The variable structure control law generally has 
two additive parts: a linear feedback u = Lx and 
a non-linear part u . The non-linear section u 
incorporates the discontinuous elements of the 
control law. The non-linearities may include 
relays with constant gains, relays with state-
dependent gains, linear feedback with switched 
gains and the scaled unit-vector form 
N 
(x) = p Nx/ |Px| 
p>0 
(19) 
which yields control components which are discon-
tinuous only on the final manifold Cx = 0. The 
null spaces of N, P and C are coincident. This 
control structure has been studied by Ryan and 
Corless (1984) using a Lyapunov analysis. When 
uncertainties (and disturbances) are present, 
the scalar p is a time-varying, state dependent 
function incorporating design parameters based 
upon the expected magnitude range of the parameter 
uncertainties. 
This control structure drives the system state 
into the ideal sliding mode. In order to achieve 
this, it relies on the theoretically valid but 
practically unobtainable assumption, that 
instantaneous switching between exact control 
values may occur. In practice the behaviour of 
the system will not be ideal, because of time 
delays in switching, hysteresis and other dynamic 
non-idealities. Thus the state will remain only 
within a neighbourhood of N(C), continually pass-
ing backwards and forwards through the sliding 
manifold as the control switches repeatedly. 
Chattering is obviously highly undesirable in 
any system having actuator mechanisms which may 
be damaged by rapid switching. It is necessary in 
practice to "soften" the non-linearity by substi-
tuting a continuous high-gain feedback approxi-
mation to the discontinuous part of the control. 
A straightforward solution is to replace the 
unit-vector non-linearity (19) by 
V*) 
P Nx/| |Px| I + 6 
<5>0 
(20) 
where δ>0 is a small constant (see Balestrino, 
De Maria and Sciavicco, 1982). This method 
eliminates chatter motion and simulation studies 
demonstrate that the resulting transient response 
can be maintained close to the sliding manifold. 
CONCLUSION 
This paper has considered the design of the 
switching hyperplanes of a variable structure 
control system by means of a robust pole-place-
ment algorithm. It has been shown that the 
hyperplane design problem reduces to a linear 
feedback design problem for a lower order system. 
A particular control form, which ensures that 
the intersection of the hyperplanes is attained, 
has been outlined. Other control schemes are 
presented by Ryan (1983) and Young and Kwatny 
(1982) while some other aspects of VSCS design 
are considered by Zinober (1981) and El-Ghezawi, 
Zinober and Billings (1983). 
A CAD package incorporating the ideas and written 
algorithms presented here has been developed by 
the authors (Dorling and Zinober, 1984). This 
Fortran package, named VASSYD (Variable Structure 
System Design), provides facilities for on-line 
VSCS design, simulation of transient response and 
the storage of system data. It incorporates an 
extensive 'help' module providing the user at all 
stages with detailed instructions regarding the 
applicable theory and the mode of operation of 
the package. A detailed manual is available. 
REFERENCES 
Balestrino, A., G. De Maria and L. Sciavicco (1982). 
Hyperstable adaptive model following control of 
nonlinear plants. System and Control Letters, 
J_, 232-236. 
Dorling, C M . , and A.S.I. Zinober (1984). Computer 
aided design of variable structure control 
s y s t ems. 
Proc . IMC Workshop on Computer Aided 
Control System Design, Brighton, 67-71. 
ElGhezawi O.M.E., A.S.I. Zinober and S.A. Billings 
(1983). Analysis and design of variable 
structure systems using a geometric approach. 
Int. J. Control, _38, 657-671. 
Harvey, C.A., and G. Stein (1978). Quadratic 
weights for asymptotic regulator properties. 
IEEE Trans. Automat. Control, AC-23, 378-387. 
Itkis, U. (1976). Control Systems of Variable 
Structure. Wiley, New York. 
Kautsky, J., and N.K. Nichols (1983). Robust 
eigenstructure assignment in state feedback 
controls. Numerical Analysis Rpt NA/2/83, 
University of Reading, Dept. of Mathematics. 
Kautsky, J., N.K. Nichols and P. Van Dooren (1984). 
Robust pole assignment in linear state 
feedback. Numerical Analysis Rpt 5/84, 
University of Reading, Dept. of Mathematics. 
Klein, G., and B.C. Moore (1977). 
Eigenvalue-generalised eigenvector assignment 
with state feedback. IEEE Trans. Automat. 
Control, AC-22, 140-141. 
Kwakernaak, H., and R. Sivan (1972). Linear 
Optimal Control Systems. Wiley, New York. 
Moore, B.C. (1976). On the flexibility offered by 
state feedback in multivariable systems beyond 
closed loop eigenvalue assignment. IEEE Trans. 
Automat. Control, AC-21, 689-692. 
Ryan, E.P. (1983). A variable structure approach 
to feedback regulation of uncertain dynamical 
systems. Int. J. Control, 38, 1121-1134. 
Ryan, E.P., and M. Corless (1984). Ultimate 
boundedness and asymptotic stability of a class 
of uncertain dynamical systems via continuous 
and discontinuous feedback control. To appear. 
Shah, S.L., D.G. Fisher and D.L. Seborg (1975). 
Eigenvalue/eigenvector assignment for 
multivariable systems and further results for 
output feedback control. Electron. Lett., 11, 
388-389. 
Srinathkumar, S., and R.P. Rhoten (1975). 
Eigenvalue/eigenvector assignment for multi-
variable systems. Electron. Lett., 11, 
124-125. 
Utkin, V.l. (1977). Variable structure systems 
with sliding modes. IEEE Trans. Automat. 
Control, AC-22, 212-222. 
Utkin, V.l. (1978). Sliding Modes and Their 
Application in Variable Structure Systems. 
MIR, Moscow. 
Utkin, V.l. and K.D. Yang (1978). Methods for 
constructing discontinuity planes in multi-
dimensional variable structure systems. 
Automn. Remote Control, 39, 1466-1470. 

358 
C. M. Dorling and A. S. I. Zinober 
Wilkinson, J.H. (1965). The Algebraic Eigenvalue 
Problem. Clarendon Press, Oxford. 
Young, K.-K.D., and H.G. Kwatny (1982). Variable 
structure servomechanism design and 
applications to overspeed protection control. 
Automatica, J_8, 385-400. 
Zinober, A.S.I. (1981). Controller design using 
the theory of variable structure systems. In 
S.A. Billings and C. Harris (Eds.), Self 
Tuning and Adaptive Control, Peter Peregrinus, 
London. Chap. 9, pp. 204-229. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER-AIDED DESIGN OF SPACECRAFT 
CONTROL SYSTEMS 
Chr. Schmid* and M. E. Stieber** 
* Department of Electrical Engineering, Ruhr-University, 
Bochum, 
D-4630 Bochum 1, ERG 
^^Communications Research Centre, Ottawa, Canada 
Abstract. The KEDDC software package for computer-aided control system design, developed 
at Ruhr-University, Bochum, F. R. G. is presently applied by the Communications Research 
Centre (CRC), Ottawa, Canada to the development of control techniques for future large 
flexible spacecraft in a joint industry, university and government research and develop-
ment project. The Operational Mobile Communications Satellite (OMSAT) proposed for the 
mid 1990's featuring a 44m offset-fed antenna, is used as target application. A reduced 
version of a 146th order high fidelity dynamics model of the satellite serves as a bench-
mark system. This application is very demanding and forms an important performance bench-
mark for any software system because the high order of structural models requires the use 
of highly stable and efficient numerical algorithms. KEDDC has been tested on this prob-
lem for more than one year and has performed flawlessly, improving quite considerably the 
design efficiency as well as the scope of system analysis. 
Keywords. Computer-aided system design; program package; control techniques for large 
flexible spacecrafts. 
INTRODUCTION 
Future spacecraft for communications, earth resource 
surveillance and scientific applications will be 
very large in size and require precise pointing to 
achieve the mission objectives. An example is the 
'Operational Mobile Communications Satellite' 
(OMSAT) under consideration by the Candian Depart-
ment of Communications (DOC). The OMSAT spacecraft 
is illustrated in Fig. 1. This geosynchronous sat-
ellite would provide communications services in the 
Fig. 1. OMSAT conceptual layout 
800MHz band to small ground terminals, which may be 
mounted on cars, trucks or boats throughout Canada 
and the US. The size of the spacecraft is related 
to the electromagnetic performance requirements of 
the multi-beam antenna system, and the power re-
quired for the transponders. OMSAT features a 44m 
diameter reflector, a 70m L-shaped support tower 
and a 38m x 4m solar array generating 8.2kW of 
power. 
The spacecraft mass is about 3500kg, with the cen-
ter of mass located outside the physical structure. 
The communications beam pointing accuracy required 
is 0.05 degrees. The reflector, solar array and 
both parts of the tower are lightweight déployable 
structures. Their structural flexibility affects 
the design of the Attitude and Orbit Control System 
(AOCS). With increasing size of the spacecraft, the 
fundamental structural frequencies decrease and 
approach or overlap the control system bandwidth. 
Control system design for this class of system has 
been an active area of research for over a decade. 
Some of the difficulties encountered are the uncer-
tainty in prediction and measurement of structural 
parameters, the high order of structural systems, 
and the nonlinear behaviour of déployable struc-
tures . 
The engineering challenges to design, build and 
test such a spacecraft are quite significant and 
control has been identified as a critical area. A 
joint industry, university and government research 
project led by the Communications Research Centre 
(CRC - a DOC laboratory) undertakes to develop the 
AOCS techniques required for this generic class of 
spacecraft. A comprehensive CAD system, used for 
development, evaluation and verification of control 
techniques has been implemented at CRC in Ottawa. 
This system essentially is the KEDDC package de-
veloped at Ruhr-University, Bochum, F. R. G. by 
Schmid and Unbehauen (1979). It serves not only as 
an efficient tool for control system analysis con-
ducted at CRC, also is intended to play a role as 
an interface and stimulus for the communication 
between the various research groups within indus-
359 

360 
Chr. Schmid and M. E. Stieber 
SPACECRAFT 
DESIGN 
DYNAMICS 
ANALYST 
CONTROL 
REQUIREMENTS 
CONTROL 
DESIGNER 
DIALOG 
INTERACTIVE 
NON REAL-TIME 
PROGRAMS 
SYSTEM MANIPULATION 
SYSTEM ANALYSIS 
CONTROL SYNTHESIS 
SIMULATION 
SIGNAL PROCESSING 
NEW 
PROGRAMSN 
CONTROL 
THEORY 
NUMERICAL 
ANALYST 
ANALYSIS, 
TEST 
EXPERIMENTER 
l·* 
EXPERIMENT 
DATA BASE 
SYSTEM MODELS 
COMPONENT MODELS 
CONTROL ALGORITHMS 
SIGNALS 
OTHER DATA ELEMENTS 
PROGRAM 
LIBRARY 
MATHEMATICS 
CONTROL ENGINEERING 
DATABASE MANAGEMENT 
GRAPHICS 
PROGRAM 
DEVELOPMENT 
SIGNALS 
CONTROL IMPLEMENTATION 
SYSTEM IDENTIFICATION 
ADAPTIVE CONTROL 
KEDDC 
PROGRAM 
MODULES 
OTHER 
USERS 
Fig. 2. KEDDC main components and applications environment 
tries, universities and CRC. This paper summarizes 
some aspects of this joint effort. 
At first a general description of the most signifi-
cant capabilities of the KEDDC system is given. The 
system representation forms and some features of 
system handling are discussed. Details of the soft-
ware and interaction, graphics and documentation 
are outlined here. An introduction into the space-
craft dynamics of the OMSAT vehicle is given. A 
benchmark spacecraft dynamics model and benchmark 
control requirements are defined. The experiences 
in using KEDDC for this spacecraft control problem 
are presented and finally the extensions to use it 
in ground-based experiments are discussed. 
THE KEDDC SYSTEM 
Components of KEDDC 
Fig. 2 provides a block diagram of the main compo-
nents of the CAD system and their interfaces with 
the applications environment to research and de-
velopment. The major components are a set of inter-
active non real-time programs for system and signal 
analysis, a database, an extensive program library 
and real-time programs interfacing with experimental 
hardware. Access to a common database improves the 
communication between research groups working on a 
common project. In particular, access by all users 
to modelling and design procedures can help to im-
prove the interfacing between system analysts and 
control designers. KEDDC also forms a common soft-
ware base reducing duplication of program develop-
ment. It is organized as an open system, parts of 
which may be added, updated or removed at any time. 
This unlimited extendability is of particular im-
portance in an applied research and development en-
vironment with on-going new programs and methods. 
Program development is supported by the program 
library which contains about lOOO routines. Imple-
mentation of existing real-time programs will allow 
immediate implementation of control algorithms, on-
line identification and adaptive control. 
Capabilities 
The package supports a wide variety of operations 
for system manipulation and analysis, control sy-
stem synthesis, simulation and signal processing. 
Systems may be represented in any of the following 
10 forms: 
1 series of deterministic or stochastic input and/ 
or output signals, 
2 series of auto- or crosscorrelation values, 
3 discrete values of the pulse response, 
4 discrete values of the step response, 
5 transfer function (matrix) in s-domain, 
6 transfer function (matrix) in z-domain, 
7 discrete values of frequency responses, 
8 matrices for continuous state space, 
9 matrices for discrete state space, 
10 polynomial matrices for MFD. 
They can be transformed with ease between time do-
main, state space and frequency domain as shown in 
Fig. 3. The solution of system transformations or 
controller design procedures are usually supported 
Fig. 3. System representations and transformations. 
Explanation see text above 

Design of Spacecraft Control Systems 
361 
by a number of numerical options in order to ensure 
efficient and accurate solution of high-order prob-
lems. 
Frequently used tasks, like transformations to dif-
ferent representation forms, data base definitions 
or basic calculations, are separated from other 
tasks and are concentrated in main interactive sys-
tem handlers, the so-called Managers. The following 
Managers are available: 
- Signal Manager for handling signal sequences, 
- System Manager for handling systems described by 
transfer functions or transfer matrices in s- or 
z-domain, 
- Frequency Manager for handling frequency respon-
ses or spectra in tabular form, 
- Matrix Manager for handling coefficient matrices 
or systems in state space, 
- Polynomial Manager for handling polynomial ma-
trices and matrix-fraction descriptions (MFD), 
- Graphics Manager for all graphics operations. 
Standard structures for linear control systems are 
simulated by a standard simulator. The overall sys-
tem to be simulated may be composed of different 
subsystems of different representation forms. Each 
block in this structure may be of the form 5, 6, 8, 
9 or 10 given above. For direct digital control 
operation different special simulators are avail-
able. They simulate the environment for testing al-
gorithms in real-time applications. A more detailled 
discussion of the implemented methods is given by 
Schmid (1985). 
Software Structure and Interaction 
KEDDC provides a high degree of portability, which 
results from the interface of KEDDC to the operat-
ing system and to hardware-dependent functions. The 
strict separation of the core system and the inter-
active code makes this possible. Program development 
may take place on other than the target machine as 
the core system is portable. 
The user interacts with KEDDC through a command-
driven dialogue combined with a question - and-ans-
wer dialogue. He can perform operations in arbit-
rary sequence, access the implemented methods and 
algorithms like tools in a toolbox. Each interactive 
program has its own set of commands, which can be 
enabled by supervisory scheduling of the programs 
using the monitor. Menu, status and help facilities 
normally enable casual users to master the system 
without reference to manuals. A KEDDC session does 
not require any pre-planning or programming as for-
gotten steps can be interlaced in the dialogue at 
any time, such that a 'hang-up' cannot occur. 
Graphics 
Documentation 
The comprehensive documentation consists of a 
user's manual (1200 pages) and a programmer's ref-
erence manual (1400 pages). Self-explanatory code 
(40% of the source code is comments) supports the 
maintainability of the package. The programmer's 
documentation is contained in the source code. Each 
library routine is documented by a description of 
the purpose, complete specification of input para-
meters , output parameters, data types, workspaces, 
remarks on methods, hints, references to litera-
ture, list of subroutine calls and of the revision 
level. Using these informations, the subroutines 
can be easily integrated into any software system. 
In additon, self-explanatory code supports the 
documentation. For most subroutines and subli-
braries, extended documentation in form of reports 
is available. A KEDDC interface guide, tree dia-
grams, module crossreference lists, and reports 
related to special control engineering methods and 
topics are available. Detailed runtime test docu-
mentation listings with many examples including ill-
conditioned cases are available. 
SPACECRAFT DYNAMICS 
Spacecraft Model 
pu 
M 
PHYSICAL SYSIEM 
I SUBSYSTEM COORDINATES I 
PHYSICAL 
— I 
1 
r — 
GIMBALS REfLECTOR/BUS ARRAY 
I 
MODAL 
—I 
1 
BOOMS 
REFLECTOR 
I 
! 
U 
TRUNCATION 
i l 
(BY MODAL MOMENTUM 
"j 
AND FREQUENCY) 
VEHICLE MODAL COORDINATES I 
Γ 
RIOIO 
I 
ELASTIC 
I 
M 
TRUNCATION 
, , 
(BY MODAL COST) 
Graphics operations are performed by a central 
Graphics Manager, which itself is an autonomous 
package. Data including attributes (e. g. for a 
diagram type) are put into a mailbox. The Graphics 
Manager is a very comfortable specialized task for 
formatting these mailbox data into graphical form 
readable by the control engineer. The Graphics Man-
ager can be implemented using a graphics processor, 
or on an intelligent graphics terminal or as an in-
ternal graphics task on the same computer. This 
concept shows a great deal of flexibility in inter-
facing to different graphics device configurations 
and ties diverse parts of KEDDC to an unified sys-
tem. It incorporates state-of-the-art device inde-
pendent graphics which is based on the ACM/SIGGRAPH 
core system standard. All diagrams relevant to con-
trol engineering are implemented. The user has the 
choice of using default diagrams or tailor his plots 
using a keyword-based descriptive language. 
Fig. 4. OMSAT dynamics modelling 
Fig. 4 schematically outines the different steps 
of the spacecraft modelling and model order reduc-
tion process. linearisation and spatial discretisa-
tion of the system results in a finite element de-
scription of the spacecraft, with 29000 degrees of 
freedom. At this level, the modelling is handled 
by specialized structural analysis software. The 
model is reduced to an order of 146 before it is 
transferred to KEDDC for further reduction, ana-
lysis and control synthesis. This model is called 
the 'high order spacecraft model' and has the fol-
lowing form in modal coordinates (Hughes, 1982): 
x = A x + f + f, 
— 
—c 
—d 
• (D+G) 
(1) 
(2) 

362 
Chr. Schmid and M. E. Stieber 
^ 
forcing function due to control inputs 
forcing function due to disturbances 
the error components (e. g., roll, pitch and yaw 
error). 
I_ 
identity matrix 
Ω_ = diag(iA).), ω. = frequency of the ith overall 
vehicle natural undamped mode 
p_ 
nondiagonal damping matrix 
G_ 
nondiagonal gyroscopic matrix. 
This model has 3 translational, 3 rotational rigid 
body modes, 2 rigid body modes associated with the 
gimbals at the reflector hub and 65 flexible body 
modes associated with the elasticity of the space-
craft. The lowest flexible model frequency is at 
about 0.2Hz and its damping ratio is less than 1%. 
In consideration of the uncertainty of prediction 
for modal parameters, which has been confirmed by 
recent space experiments (Lips and Vigneron, 1984), 
a tolerance of ±20% for modal frequencies, and 
-70%/+300% for damping is assumed. Conventional 
laboratory measurement of structural properties of 
a completely assembled spacecraft of the size of 
OMSAT is impossible due to gravitational loads. 
Disturbances 
At geosynchronous altitude, the dominant environ-
mental influences on a spacecraft are solar radia-
tion pressure and gravity gradient torque. The 
forcing function fd in Eq. (1) has the following 
components (West-Vukovich, 1984): 
L, 
= F ^ + F x + F d 
-D 
-0-G 
-G— 
-S-S 
(3) 
where Fdt is a constant torque due to the gravi-
tationälgradient of the satellite, F x_ denotes 
changes in the gravitational gradient torque due to 
changes in the spacecraft attitude and F d 
are 
periodic torques varying with the orbital anomaly 
and caused by the radiation pressure on the earth 
tracking reflector and the sun tracking solar array. 
Although thermal effects may lead to depreciable 
deformations in a structure like the OMSAT, they 
are neglected in the present studies because they 
do not directly influence the stability or perform-
ance of the AOCS. 
A major source of disturbances is the AOCS itself 
which may cause comparatively large unmodelled 
torques due to variations in the actuator perform-
ance, in particular thrust level variations during 
thruster firing. 
CONTROL BENCHMARK 
In order to compare the performance of various con-
trol design methodologies a control design bench-
mark scenario is defined. The spacecraft is assumed 
to be in a conventional N-S stationkeeping manoeuvre 
which has been identified as a critical operation 
due to large unknown torques caused by thrust level 
uncertainties. The control objective is to maintain 
attitude control and beam pointing during the sta-
tionkeeping manoeuvre. Stationkeeping itself is 
assumed to be controlled by a strategy independent 
of attitude control and hence the three transla-
tional spacecraft rigid body modes, describing the 
orbital kinematics, are deleted from the model. The 
analysis of the communications beam geometry leads 
to the definition of the performance output vector 
z = P x 
(4) 
where P is a performance distribution matrix de-
scribing how much the excitation of each state con-
tributes to the elements of the beam pointing error. 
The control objective is expressed by the cost 
functional 
oo 
V = / ζ_Τ2 z_ dt 
, 
(5) 
0 
where £ is a positive definite weighting matrix for 
Thrusfers (4) 
Thrusters (4) 
Reaction 
Wheels 
Fig. 5. OMSAT actuator configuration 
Fig. 5 shows the baseline actuator configuration 
with 3 reaction wheels and 4 thrusters located at 
the spacecraft bus, 4 thrusters at the tower tip 
and 2 reflector gimbal torquers. During station-
keeping a thruster based control system is assumed 
with the reaction wheels locked at zero speed. 
Further the following simplifying assumptions are 
made: the 8 one-way thrusters are combined to form 
5 equivalent independent, linear actuators. An 
approximately linear thruster characteristic may 
be obtained by pulse width or pulse frequency modu-
lation although some excitation of high frequency 
modes will be concomitant with this technique. 
A gyropack, encoders and an optical sensor provide 
the following measurents: spacecraft bus attitude 
and angular rate about 3 axes, 2 reflector gimbal 
angles, and the relative displacement between 
spacecraft bus and tower tip in two directions. 
For this input configuration, and a certain power 
spectrum expected for the disturbances, the model 
is further reduced by modal cost analysis accord-
ing to Skelton and Hughes (1980) using Eq. (5) to 
a control benchmark model of order 32, having 7 
control inputs and 10 measurement outputs. For 
simplicity, the same notation as in Eq. (1) is 
used to describe the system as it retains the same 
structure: 
x = A x + B u + B u J + f-, 
— 
— —c 
d 
—d 
y = £ x. + ω_ 
(6) 
(7) 
A 
B_ 
u 
—c 
^d 
Y 
C 
Systemmatrix as in Eq. (1) 
input matrix for actuators 
control input 
unknown disturbances caused by actuator 
variations (assumed stepweise constant) 
measurement vector 
sensor matrix 
measurement noise. 
This benchmark model can be conveniently manipu-
lated by KEDDC and is used to assess the perform-
362 

Design of Spacecraft Control Systems 
363 
ance and robustness of control systems. These con-
trollers are usually based on a further reduced 
'control design model1 (Fig. 2) of the spacecraft 
to explore the effects of modal truncation. 
The benchmark requirements for the attitude control 
system are: 
- stabilization of attitude and communications beam 
in presence of uncertain and unmodelled plant 
dynamics, 
- regulation of attitude and beam against environ-
mental disturbances and thruster inbalances, and 
- spacecraft rigid body response time constants in 
the order of magnitude of the lowest spacecraft 
flexible mode. The absolute value of the closed-
loop eigenvalues associated with one or more 
rigid vehicle modes shall be larger than the fre-
quency of the lowest frequency elastic mode. 
No tracking of reference signals is required as the 
spacecraft remains continuously earth pointing 
after initial earth acquisition. Full state feed-
back and disturbance feedforward on the nominal 
benchmark model is the performance reference case. 
KEDDC APPLICATION 
The large spacecraft control problem is currently 
being investigated using a non-realtime KEDDC imple-
mentation on a mainframe computer system. This cen-
tralized facility can be accessed by all members of 
the research team and is used as a database for the 
project. The availability of the high (146) order 
spacecraft model and system order reduction methods 
to all users help to bridge the gap between the 
structural dynamics and control disciplines. 
KEDDC aided in the definition of the benchmark prob-
lem by modal cost analysis and analyzing sensor and 
actuator configurations for conditioning, control-
lability/observability of flexible modes and trans-
mission zeros. Presently a number of different model 
reduction and control system design techniques are 
put to test on the benchmark problem. The reduction 
methods considered so far include various versions 
of modal cost analysis, cost-decoupling transform-
ation and balanced realizations (West-Vukovich, 
1984). The following methods are used for control 
design on the open-loop system reduced to an order 
between 12 and 32: Variations of the LQG method 
such as frequency shaping, Pi-control, disturbance 
observers, reduced-order observer design by pole 
placement, various spill-over suppression techniques 
such as selective spill-over suppression, model 
error sensitivity suppression etc. The closed-loop 
systems of order 32 to 70 are evaluated on the basis 
of the required model accuracy, system performance 
to pointing and controller robustness. The methods 
used include eigenvalue plots, root-locus diagrams, 
simulations and singular value type robustness 
tests. 
Typically a design case can be analyzed and docu-
mented in an afternoon without any pre-planning or 
following any standard pattern during the session. 
Computations are carried out with 18 significant 
digits and have not posed any numerical diffi-
culties. KEDDC offers several numerical choices for 
critical computations such as eigenvalue/eigenvector 
calculation, Riccati equation solving (13 options) 
or polynomial root calculations. 
Only minor extensions to the original KEDDC command 
set was required in order to solve all above ana-
lysis and synthesis problems, with the exeption of 
system-order reduction for which a new module was 
created. 
During new program development, the extensive KEDDC 
library frees the analyst from routine jobs, like 
disk I/O, user interfacing, error handling, 
graphics etc. It offers ready-to-use processing 
modules at all levels of integration, from basic 
mathematical functions to complete control engin-
eering modules. For the development of large space 
structure control technology, KEDDC not only serves 
as a tool, but also as a software base which plays 
a role in transferring the technology for future 
application by industry. 
REAL-TIME WORKSTATION 
In the next phase of the OMSAT project, a labora-
tory facility will be developed whose primary pur-
pose is to study the stabilization and control of 
structurally flexible communications satellites. 
Fundamental concepts in the control of flexible 
space structures must be investigated and evaluat-
ed. Realistic sensors, actuators, structures, and 
control electronics are used in order to ensure 
the practical aspects of the proposed control tech-
niques. The results of this research must be of 
direct relevance to the AOCS problem discussed 
above. For on-ground testing a mechanical model of 
flexible structures will be built as illustrated 
in Fig. 6 (Hughes, 1984). This model shows the 
typical dynamic characteristics of a flexible space 
structure. 
Fig. 6. Design of the ground-based experimental 
flexible structure model 
A Real-Time Workstation will be used as an end-to-
end control tool on this flexible structure ex-
periment. It consists of an INTEL-300 series mi-
crocomputer system. This workstation will support 
system identification, control analysis and design 
as well as the implementation of controllers. Some 
363 

364 
Chr. Schmid and M. E. Stieber 
of the Managers of KEDDC and the real-time suite 
including adaptive control will be installed. 
CONCLUSIONS 
The CAD system KEDDC has been found a very efficient 
and versatile, almost indispensible tool for the 
reliable analysis of high-order systems. Its archi-
tecture and user interface are particularly well 
suited for an applied research and development en-
vironment. 
REFERENCES 
Hughes, P.c. (1982). Development 
of Dynamics Models 
and Control 
System Design for 
Third 
Generation 
Spacecraft 
- Executive 
Summary. Report DOC-CR-
SP-82-056, Department of Communications, Ottawa. 
Hughes, P.c. (1984). Laboratory 
Demonstration 
of 
Control 
Techniques 
for 
Third Generation 
Space-
craft-Executive 
Summary. Report DOC-CR-84-011, 
Department of Communications, Ottawa. 
Lips, K.W. and F.R. Vigneron (1984). Damping 
Syn-
thesis 
for a Spacecraft 
using 
Substructures 
and 
Component 
Data. 
Report 1365, Department of 
Communications, Ottawa. 
Schmid, Chr. and H. Unbehauen (1979). KEDDC, a 
general purpose CAD software system for appli-
cation in control engineering. Prep. 2nd 
IEAC/ 
IFIP Symposium on Software 
for 
Computer 
Control 
(SOCOCO), Prag, paper C-V. 
Schmid, Chr. (1985). KEDDC - A Computer-Aided Ana-
lysis and Design Package for Control Systems. 
In M. Jamshidi and C.J. Herget (Ed.). 
Adcances 
in Computer-Aided 
Control 
Systems 
Engineering. 
North-Holland, Amsterdam. 
Skelton, R.E. and P.C. Hughes (1980). Modal Cost 
Analysis for Linear Matrix-Second-Order Systems. 
J. Dynamic Systems, 
Measurement and 
Control, 
102, 151-158. 
Stieber, M.E. (1984). Design and Evaluation of Con-
trol Systems for Large Communications Satel-
lites. Workshop on Identification 
and 
Control 
of Large Space Structures, 
San Diego. 
West-Vukovich, G. and P.C. Hughes (1984). 
Develop-
ment of System Order Reduction 
Techniques 
Applicable 
to Third Generation 
Spacecraft. 
Report DOC-CR-84-044, Department of Communi-
cations , Ottawa. 
364 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF VARIABLE 
STRUCTURE (VSS) CONTROL SYSTEMS 
R. Swiniarski and A. Knafel 
Institute of Control and Industnal Electronics, Electncal Department, Warsaw 
Technical University, ul. Koszykowa 75 316, Warszawa, Poland 
Abstract . The paper presents the the description of computer progra-
mme package for interactive designing and simulation of multidimensio-
nal linear and nonlinear variable structure systems· 'The special at-
tention has been paid for utilising of variable structure control to 
model - folloving control systems. A recursive reconstruction of una-
ccesible process states in model - following control systems has been 
discussed as well. 
Keywords.Adaptive control, computer - aided design, state estimation. 
INTROIXJOTION 
Analysing of computer - aided design of 
control systems (CADCS) packages we can 
notice unsatisfactory passibilities of 
using a variable structure systems (VSS) 
technique for control of process with 
varying or uncertain parameters. Obser-
ving a substantial growth of interest in 
application of VSS technique to model -
following control systems the special 
programme package has been designed for 
interactive design and simulation of the-
se systems. 
Variable structure systems have been 
described primary in literature by So-
viet authors. We can specially pointed 
out works of Emel'vanov (1964) and Ut-
kin (1971,1977). Recently several scien-
tists from the western countries have 
successfully develeped some new 
ideas concerning the variable stru-
cture system application to model-
following control problems (Young, 
1977,1978; Zinober, and all, 1932) 
and tracking control of non-linear 
systems (Slotine, 1933). 
The main features of variable 
structure control as insensitivi-
tiness to the r>rocess parameter 
variations and disturbances and 
simplicity of control still atract 
the scientist working in disconti-
nuous control technique applica-
tion field. In the paper the main 
points concerning the variable 
structure system application to 
the model-following systems are 
365 

366 
R. Swiniarski and A. Knafel 
U. 
=1 
1 
j ut(x,t) 
|u~(x,t) 
S i ( x ) > 
0 
s ±(x) < 0 
p o i n t e d - o u t . The two i n t e r a c t i v e compu-
t e r programme package f o r designing and 
simulation of adaptive 
model-following 
v a r i a b l e s t r u c t u r e c o n t r o l system f o r 
l i n e a r and 
n o n l i n e a r ( s t a t i o n a r y 
and 
n o n s t a t i o n a r y ) systems are presented as 
w e l l . 
VARIABLE STRUCTURE CONTROL 
At the begining l e t us consider the l i -
near system 
x ( t ) « A ( t ) x ( t ) + B ( t ) u ( t ) 
(1) 
where x G. Rn, u £ Rm and A and B are ge-
n e r a l l y a time-varying s t a t e and c o n t r o l 
matrices of apj)riopriate 
dimensions. 
Variable s t r u c t u r e system can be charac-
t e r i s e d by discontinous c o n t r o l which 
changes 
s t r u c t u r e of system when a r e a -
ching 
a set of switching surfaces 
(ma-
n i f o l d s ) . The discontinuous c o n t r o l 
s t r a -
tegy has for t h i s case form (Utkin,1S77) 
( 2 ) 
where u. represents the ith component of 
control vector u, and s.(x) = 0 is bhe 
ith component of the m switching hyper-
planes 
s(x) - Ox « 0 
(3) 
in the state space. 
In the variable structure system motion 
on switching hyperplanes alter the stru-
cture of feedback control system. 
ίω. appriopriâte selection of matrix C 
can guarantee for linear and certain 
class of nonlinear systems (Slotine,1983) 
reaching of switching surfaces si(x)«0 
in finite time, and therefore remaining 
on this surface approaching the state 
origin or next switching surface s,(x)=*0 
in finite time. 
Decaying transient of motion on swit-
ching surfaces is governed by the eigen-
values which characterized equation 
aL(x) 
» 0 (Utkin,1977). The sliding 
(chatter for realistic systems) motion 
when at the point on this surface the 
"dicrection11 of motion along the state 
trajectories on both sides of surface 
are toward the switching surfaces. Thus 
for sliding on switching surface 
s.(x) » 0 we need funfilled of rela-
tion 
sj(x)si(x) ^.0 
(4) 
in the neighbourhood of s.(x) » 0. 
During sliding motici on switching sur-
face si(x) the system is described by the 
equations 
s±(x) « 0 and s\(x) = 0 
(5) 
and has an invariance properties (Dra-
zenowic, 1369) causing state motion which 
is independent of some process parame-
ters and disturbances. These feature of 
variable structare systems is a main 
"attraction" of this kind of control as-
specialy in application to process with 
uncertain or varying parameters and un-
known disturbances. 
Assuming that the sliding motion exist 
on all switching surfaces, then jwe can 
write 
s(x) = Cx = 0 and s(x) = Ox * 0 
(6) 
The so called "equivalent control11 Xkt 
(Utkin, 1977) can be found from the 
equation s(x) » 0 
eq 
u e Q - -(03) -1 ?Ax 
(7) 
as an linear function of x. The "equiva-
lent control u 
is a smoothed version 
eq 
of the discentinuous control (2). 
Thus the sliding dinamics can be reached 
by applying the discentinuous coircrol 
(2) or the linear equivalent control 
(7) (for systems with perfect knowledge 
about the constant parameters and dis-
turbances) . 
MODEL - FOLLOWING CONTROL SYSTEMS 
The model - following control systems 
(MPC) (Landau, 1974) based on an idea 
that the process is controlled in such 
way that its dynamic behaviour approxi-
mates the dynamic of specified (establi-
shed during designing phase) model. 
The extending idea of MFC to the plants 
with varying parameters or disturbances 
leads to the so called adaptive model 
following control (XMFC)· The two major 
attifuded to the AMFC based on Lyapunov 
function and hyperstability idea (Lan-
dau, 1974) guarantee the error between 
the model and the process goes to the 
zero as t - ^ c^> (lim e(t) * o) but 
but neither suggest any stricte control 

Design of Variable Structure Control Systems 
367 
over the error transient. 
Young (1977,1978) proposed new desiqn me 
thod for AMFC systems which utilises the 
concept of variable structure systems 
(VSS) for obtaining asymptotically stable 
systems. In this proposal an effective 
procedure for specifing the transient 
response of the error between model and 
process has ben given. In the AMFC the 
specified model is the organic part of 
the system. 
Let us assume that the controlled process 
and the specified model are described by 
the multidimensional linear equations 
ip(t)«Ap(t)xp(t)+Bp(t)u(t) 
(8) 
y ^ W ^ + V m ^ 
<*> 
where xp("fc),xm(t) G Rn, u(t)e Rm and 
u €L R . In the above equations Um(t) 
is the system input and u(t) is the con-
trol vector. In the elasical AMFC sys-
tems it is assumed that the pairs (A , 
B ) and (A. , S ) are stabilisable, but 
varying in time of the plant matrices is 
allowed, however the upper and lower 
bounds of the component of these matri-
ces are assumed to be known during de-
signing plase. 
Defining the error vector as 
e ( t ) = x i t ) 
- x ( t ) 
(10) 
Hi 
p 
i t can be e a s i l y found t h a t 
e ( t ) ^ n e ( t ) + ( V A p ( t ) ) x p ( t ) + B m u m ( t ) -
B ( t ) u ( t ) 
(11) 
P 
The necessary conditions (iirzberger, 1968) 
for perfect model following behaviour 
can by written as follows 
rank 3 «rank(B -Bm)»rank(3 ,^-A )(12) 
VARIABLE SÎRUCïURii SYSi 
TO AHFC 
ATIRöACI-
In Young's (1978) work the variable stru-
cture approach to AMFC system has been 
proposed. In this attitude the designer 
may specify the desired transient res-
ponse of system error by the proper cho-
ice of the switching surfaces. Assuming 
that the process state x (t) is directly 
P 
accessible we can consider the linear 
control law 
where the matrices K , Ke, K^ exist when 
the conditions (12) hold, and e(t) » 
xm(t) - xp(t). 
In VSS application to ΑΙ-Ι3Ό (V3AMFC) 
(Young, 1977) we can substitute in the 
equ.(l3) the matrices K ,K ,K by the 
ψ ρ ' Ψ β ' Ψ ΐ η 
d e f i n e d 
hy 
V p = V p 
d i a s ( s S a x p, . . . , s g n Xp),Xp -
( χ ρ , . . . χ ρ ) 
ψ β
= Ψ β 
d i a s ( s g n e 1 , . . . B g n e n ) , e T = 
( e \ . . . e n ) 
( H ) 
Ψ
Λ 
d i a ^ s S * u i , . . . s g n u£),u* = 
ψ ^ = ( ψ 1 
. . . , H ) - ) a n d y M 
\ 
T
p 
p 
* 
p l-k* f o r 
ο ±(β)<0 
i * 
, x 
( 1 5 ) 
± fke for 
s i ( e ) > 0 
e Ι-ΐξ 
f o r 
3 i ( e ) < 0 
Γ"Φ 
■ 1 
m 
i 
( kÎ 
f o r 
s . ( e ) > 0 
(-K. 
l o r s . ^ e ; <* 0 
i = 1, . . . in 
where ty1,, ^ΐ»ψ^> 
^ 
are nx1 v e c t o r s , and 
Ψί-(ψ:,...^>βα4φ 
Are Lx1 v e c t o r s . 
The switching nypersurface can \>& otoose 
t o be set of switching hyperplanes 
s ( e ( t ) ) = Ce(t) = 0 
(16) 
s x = ( s r . . ,s m) 
in the n-dimcns.Lmal e r r o r space, where 
s . ( e ) = 0 i s the i t h of m switoning 
hyper pianos. 
ΜΙιβΐΐ the s l i d i n g .roue e x i s t s on a l l 
the 
the hyperplanes then we can write 
s = C e ( t ) » 0 and s - Ce(t)=0 (17) 
Prom the above conditions we have 
\ - 1 
uea-iüV ° V i ^ ^ V V V ^ * 
B u ( t ) 
m mx ' 
U w 
u ( t ) = K p x p ( t ) + K e e ( t ) + l i m u m ( t ) 
(15) 
and for perfect 
nodel - following 
contro 
ê ( t ) = I-B p(CB p)- 1C \ β ( ΐ ) 
(19) 
The above c o n s i d e r a t i o n can be extended 
f o r s p e c i f i c n o n l i n e a r processes ( S l o -
t i n e , 
1983) described "oy the equation 
i ( t ) « f ( x j t ) , t ) 
+ b u ( t ) 
(20) 
P 
y 
with the assumption t h a t the n o n l i n e a r 
function of s t a t s f ( x ( t ) ) are polynomi-
al ly bounded 

368 
R. Swiniarski and A. Knafel 
ff.U p(t),t) j <: 
P.( Xp(t) ft) (21) 
j » 1 , 2 , . . . , n 
In these case the control vector equation 
can be medified (Slotine, 1983) by add-
ing to the (13) the term -K sqns(t) 
(and to the (15) the term k ) . 
DESIGN PROCEDURE 
The design procedure of model-following 
variable structure system is similar to 
that for multivariable structure systems 
when the system error vector is conside-
red.. The design objective of VSAMFC is 
to choose the G and to find the vectors 
kO' ke* ^m (e(lu'(14)) so tlle system error 
goes to the zero, as time tends to infi-
nity. 
From the above shows that the design pro-
cedure consist the tv/o main stepS^First 
it is necessary to select C, i.e design 
the switching hyperplanes, which guara-
ntee the specified stable eigenvalues 
of the closed-loop error system and ca-
using decaying of error to the zero with 
given dynamic. In the second step the 
appriopriate control lav/ (i.e.It , ke, 
kj|· vectors) .generally described by the 
equ.(l5) must be found to ensure reaching 
and exsiistance of sliding motion. 
For the system with multivariable control 
u(t) one can apjly the method of control 
hierarchy described by Utkin (1973) and 
Young (1978). 
The design of the switching hyperplan© 
(selecting of G) is proposed in the se-
veral papers (Utkin, 1977; Young, 1978) 
but in the programme described in the 
next section also it is possible to use 
technique of projectors which has been 
proposed by El-Ghezawi (1984). These 
methods are usually based on an idea of 
pole assignment of system error dynamic 
describing the methion on switching sur-
faus. The designing of control coefficient 
must take into consideration fast (for 
example time - optimal) reaching of 
switching planes and quarantee existence 
of sliding motion which tends system 
error to the origin (Utkin,1977; Young 
1978; Zinober,1982; Slotine,1983). 
THE COMPUTER PROGRAMME PACKAGES 
FOR DESIGNING OP VSAMFC 
The two computer programme package in 
FORTRAN Language has been developed for 
interactive designing and simulation of 
variable structure systems. First pac-
kage offers possibility of designing and 
simulating linear VSS system with spe* 
cial possibilities of considering the 
VSAMFC systems. The programme provides 
the Kaiman filter utilisation for re-
cursive reconstruction of unaccessible 
process states. The second interactive 
programme provides designing and simu-
lation both linear and nonlinear VSAMFC 
systems. In this pragranme for recon-
struction of unaccessible states for 
nonlinear plant the extended Kaiman 
filter is provided as well as modelling 
of process disturbances. In the program-
me the method of designing which has 
been mentioned in the previous sections 
has been applied. Generally the program-
me offers: designing of various kind of 
linear and nonlinear plants, specifying 
the linear model reference, simulating 
of behaviour of plant and model for de-
terministic and stachastic cases, de-
signing of switching planes and control 
vector for VSAMFC systems, simulating 
of whole VSAMFC systems, reconstruction 
of unaccesible state of plant by the 
using of extended Kaiman filter. It is 
possible to consider also the nonsta-
tionary plants. 
The wide input and interactive possibi-
lities can be used during designing and 
simulation of VSAMFC system. Among them 
we can pointed out possibility of chan-
ging the plant parameters during simu-
lation, filtering of disceuntinuous 
control sequences, and modeling the his 
terese region during the realistic swit-
ch! es* Furthemore another feature of 
programme allows designing the so ca-
lled nonstationary switching surfaces, 
which can guarantee better system error 
transient property. 
In the cases when the plant disturbance 
statistic are not known the programme 
provides using of the adaptive Kaiman 
filter. The programme gives wide possi-
bility of graphic monitoring of obtained 

Design of Variable Structure Control Systems 
369 
design and simulation results. 
Prom the numerous examples which has "been 
tested out "by the using of the programme 
we can present the consideration of VSAJMFC 
of nonlinear field controlled dc motor· 
The model of this plant can he described 
by the nonlinear equations (Sichler, 
1Ö76) 
v1 
a1X1 
a3X1 
+ a2u 
(22) 
+ a5x2 
where the values of nominal parameters 
are : a1 « -6.6667, a2 = 0.27778, 
•1.6667. 
The reference model has been selected as 
ax« 381,84, a4 « -11.402, a^ 
- t 
-6.6657 
2000 
0.0 
-68.96J 
xm+ 
m 
0.277 
0 
(23) 
The satisfactory behaviour of system 
error has been reached for C = (30,1) 
and the following control coefficients 
(egus.(l3),04) extending by the term 
k «(21.8,0.2), ke=(30.0,12.0), 
km*(0,0), k^-1.4 
(24) 
CONSLUSION 
The designed prograimne packages give cer-
tain step towards constructing the corn-
put eraided design tools for VSAMFC sys-
tems. This is only small step, since the 
methodologies of systematic designing 
of VSAHPC system are still in evolution 
phase. The special meeds is for desig-
ning of CAD tools for nonlinear and time 
-varying systems. 
REFERENCES 
Drazenovic,B. (1969). The invariance 
conditions in variable structure 
systems. Automatica,5. 287-295. 
Emelyanov,S.V. (1964). Design of varia-
ble structure control system with 
discontinuous switching functions. 
Eng.Cybern.1,156-160. 
Erzberger,H. (1968)· Analysis and design 
of model-following control systems 
by state space techniques. Proc. 
of JACQ. Ann Arbor, 572-581. 
Eichler,J., Mansour,!!. (1976). A sub-
optimal control scheme of non-
linear systems besed on the stored 
response modeling technique. Rege-
lungstechnik, 27 
Knafel, A. (1934). Mikrokomputerowe sys-
temy sterov/ania adapt acyjnego wyko<-
rzystuja^ce technikç algorytmow o 
zmiennej strukturze. MSci. Thesis. 
Warsaw Technical University. Warsaw. 
S l o t i n e , J . J . , Sastry,S.S. (1983). Trac-
king control of non-linear systems 
using sliding surfaces, with appli-
cation to robot manipulators. 
Int.J.Control. 38,465-492. 
Swiniarski,R. (1930). Optimal control 
and microcomputer systems. VUwwräW 
Technical University Press. V/arszawa 
Utkin,V. (1971). Equations of sliding 
mode in discontinuous systems - 1. 
Automat.and Remote Control.21,1897-
1907. 
Utkin,V.l. (1977). Variable structure 
systems with sliding modes. IEEE 
Trans.,AC-22,212-222. 
Young, Ii,K.D. (1977). Asymptotic s t a b i l i -
ty of model reference systems with 
variable structure control. IEEE 
Trans.,AC-22,279-281. 
Young,K.K.I). (1973). Design of variable 
structure model-following control 
systems, ibid., AC-23,1079-1085. 
Zinober,A.3.I., El-Ghezawi,0.1a.E., 
Billings,3. A., (1982). Multivariable 
variable - structure adaptive model 
- following control systems. IEE 
Proc. 129, £t.D,1,6-l2. 
Sl-Ghezawi,0.M.3., Zinober,A.S.I., 
Billings,S.A., (1984). Analysis and 
design of variable structure systems 
using a geometric approach. 
Int.J.Control. 38,68-79. 
Landau,I.D. (1974). A survey of model 
reference adaptive techniques-the-
ory and applications. Automatica. 
10,353-379. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF AIRCRAFT 
FLIGHT CONTROL SYSTEM 
M. Vukobratovic* and R. Stojic** 
"Mihailo Pupin" Institute, Belgrade, Yugoslavia 
**Aeronautical Institute, Belgrade, Yugoslavia 
Abstract. A computer implementation of f l i g h t control system design method, based on de-
composition-aggregation principle and decentralized control of large-scale mechanical 
systems, is described. Numerical aspects of using the complete nonlinear aircraft model 
in the synthesis process are considered. Some data about software organization and user 
interaction are given. 
Keywords. Computer-aided design; control system design; f l i g h t control; nonlinear con-
trol systems; decentralized control; suboptimality; decomposition-aggregation principle. 
INTRODUCTION 
The capabilities offered by powerful minicomputers 
have opened up new possibilities in control system 
design. Interactive computing allowed engineers' 
intuition to be combined with computer power, so 
most of existing synthesis techniques were imple-
mented on digital computer to automatize design and 
save designers' time. 
A flight control system is usually designed using a 
linear decoupled aircraft model valid for a pertur-
bed stationarry horizontal flight. Correctness of 
control laws obtained in this way is sometimes che-
cked by simulation of the complete nonlinear model. 
Most of the existing design methods were adopted 
for approximative and simplified models of real ob-
ject, with a linear control method as a basic engi-
neering tool (Shah, 1979; Kubbat, 1979). But, ad-
vances in air vehicle design and flight control sy-
stem implementation have begun to overwhelm tradi-
tional design and analysis techniques which are 
most effective in aircraft applications with few 
surfaces, little dynamic coupling, separation bet-
ween flight control and other avionic subsystem 
bandwidths and analog system implementations. So, 
the need for better and more accurate control sys-
tem design and analysis techniques has become evi-
dent. 
Because of recent advances in computer technology, a 
more sophisticated design method became a real pos-
sibility for practical applications. Hence, there 
appeared, quite naturally, a tendency toward taking 
into account all relevant information about object 
dynamics, i.e. apllying as accurate object models 
as possible. One of such approaches is decompositi-
on-aggregation method, first developed for control 
of robotic systems (Vukobratovic" and Stokié 1980; 
Vukobratovié, 1983) and later applied to flight 
control synthesis (Vukobratovié, Stokié and Stojié, 
1982; Stojié, 1985). In the paper the attention will 
be focussed on implementation of the control law 
synthesis procedure and some numerical algorithms. 
The basic idea is that control synthesis should be 
based on a complete dynamic model, by which we mean 
a model accurate enough to allow simulation of real 
object with desired accuracy. But model complexity 
causes some difficulties during implementation, or 
in use, which had to be overcome by proper numeri-
cal and conceptual interventions. So, we have tried 
to develop suitable algorithms which, for every step 
in the synthesis, get all possible informations 
about object dynamics from simulation program modu-
les. 
The plan of the paper is as follows: First, the ge-
neral approach to control synthesis and stability 
analysis, whose detailed explanation is given by 
(Stojié, 1985; Vukobratovié and Stokié, 1980), is 
briefly presented. Then, some new numerical algo-
rithms, which made possible implementation of the 
synthesis procedure, are given. Implementation of 
an experimental package on DEC VAX-11/780 with user 
interaction is explained. 
OUTLINE OF THE SYNTHESIS 
PROCEDURE 
The full-scale nonlinear model of the aircraft can 
be described as 
t = F(t, X) + G(t, X)U 
(1) 
Y = H(t, X) 
(2) 
where XçRn, UeRm, YeRm are state, input and output 
vectors, respectively. The control task is to rea-
lize the desired output vector 
Y = Y0(t) 
teT 
(3) 
with tolerances within given limits, in the presen-
ce of disturbances in the type of initial conditi-
ons. In (3) T is a finite interval of time in which 
the system is observed. 
In the first step, nominal control U (t) and state 
space trajectory XQ(t) are calculated suing equa-
tions (1, 2) to satisfy (3), i.e. triplet (XQ(t), 
U Q(t), YQ(t)) makes (1-3) identities over the time 
interval T. This is, actually, solving of the in-
verse dynamic problem or construction of nonlinear 
system inverse. 
An the control U (t) realizes the desired motion in 
an ideal case, in the second step the control u(t) 
is introduced to achieve tracking of nominal tra-
jectory XQ(t) with control 
U = U 0 + u 
(4) 
371 

372 
M. Vukobratovic and R. Stojic 
in the presence of disturbances acting on the air-
craft. For this purpose, the model of aircraft de-
viations from the nominal state space trajectory is 
used: 
x = f ( t , x) + b(t, x)u 
(5) 
where x = X - X is the state deviation, f(t, x) = 
F(t, X) - F(t, X 0) + G(t, X)U - G(t, X0)UQ. Practi-
cal stability conditions are imposed: for vx(t )FD 
it should be ensured that x(t)çD for Vt>t +τ where 
D CRn, D CRn and x=const are specified in advance. 
o 
' τ 
r 
To synthesize control u(t) the system (5) is consi-
dered as a set of s subsystems, according to the 
adopted input and state space decompositions 
m 
mi 
m c 
ni 
nc 
Rm = R 'χ-..xR s, Rn = R 'χ.-.xR s 
(6) 
n. 
m. 
with x,eR and u.GR as the i-th subsystem state 
and input vectors. Every isolated subsystem 
xi = f^t, x\) + bn.(t, xi)ui 
i=1,...,s 
(7) 
where £. and u. are projections of x and u on sub-
ΊηΊ· 
Ί mi 
spaces R 
and R , respectively, is stabilized by 
the local control 
u.j = u.j(t, χΊ·) 
i = 1 , . . . , s 
(8) 
which is synthesized using the approximative sub-
system model 
ίΊ· = fn-(t, x.) + B.(t, x.)u. i = 1,...,s (9) 
0 
The u^ is chosen so as to achieve such a subsystem 
exponential stability degree αΊ· which will satisfy 
the stability requirements for isolated subsystem 
(7). 
To analyse the overall stability of system (5), when 
coupling between subsystems is taken into account, 
we introduce Lyapunov functions of subsystems v. = 
v-(t, x.) i=1,...,s and define regions 
Di = { x ^ v.(t, χ·)<ν
0.} 
i=1 
s 
(10) 
The constants v. are chosen so as to provide that 
DeD = 0-χ···χβ . Then, an aggregate system 
v = Wv 
(11) 
er 
where v = [ ν , , . , . , ν ] , W = [ wn-|] S x S
 i s 
a Metzl 
/matrix, which satisfies the condition 
r 
S 
(grad v..) (f..(x)+b-(t, x)u)< I w..v. 
i=1,...,s 
1
1 
Ί 
j=1 1J J 
(12) 
for VxeD, is determined. If the condition 
Wv° < 0 
(13) 
where v° = [v? ··· v°] , holds, the system (5) is 
stable in D. If not,one can adjust local control 
(8) or introduce global control u9(t, x ) , i.e. set 
u. = uj(t, x.) + u?(t, x) i=1 
s 
(14) 
to compensate for the coupling effects between sub-
systems. This means minimization of numbers w.·. 
on 
J 
Both u and uy can be introduced gradually and in a 
selective way, as a result of trade-aft between sy-
stem performances and control law complexity. 
Since the synthesis method is based on sufficient 
stability conditions, it is possible to achieve de-
sired system performances without strictly satisfy-
ing aggregate stability conditions (13). The system 
performances can be checked by simulation. Since 
the procedure gives a quantitative measure of sub-
system stability and interactions, its applicabili-
ty is greatly widened in computer-aided design en-
vi roment because it allows, feedbacks to be intro-
duced step by step and various factors to be com-
pensated. 
NUMERICAL ASPECTS OF THE 
SYNTHESIS PROCEDURE 
A six-degree-of-freedom aircraft simulation model 
for the moving base f l i g h t simulator is chosen as 
the complete model for actual application. The s i -
mulation model is usually avouable in algorithmic 
form, i.e. as an actual computer implementation. A 
large number of data, fabulated functions, logical 
branching and conditions make i t very d i f f i c u l t to 
use such a model in a classical manner-analyzing 
complex analytical expressions, making differenti-
ations and approximations. For this reason the as-
sumption has been made that the complete model is 
available only in a form of algorithmic mapping 
(1): 
( t , X, U) F, B 
(15) 
by which triplet (t, X, U) maps into X. The softwa-
re designed with these principles allows access to 
object dynamics only through a single dynamic modu-
le (15) and does not require user manipulations 
with the complete model after modeling is completed. 
To speed up computations and provide users with 
simpler equations for analysis and synthesis, the 
approximative model, valid in restricted regions 
D CRn, D CRn of state and input space is needed. 
This tork is easily solved if we choose the struc-
ture of approximative model of the form 
x = ξ°(ΐ, x, u) + PTÇ(t, x, u) 
(16) 
where P is a vector of unknown parameters and ξ , 
ξ are chosen functions. To determine P for the best 
approximative model in region DxxDu in the least 
square sense, the set of points {(x-, ιι·): x-CDx, 
N 
J 
J 
J M 
u.rD }.=1, for N chosen, is generated, and {*.;}·_« 
is calculated at points (x-, u.) using relation (5). 
Then P is given by 
J J 
pT = Y z"^ 
v 
VN 
(17) 
Y N e i j J / V ç 0 ( t " x j - u j , , e T ( t ' x j e U j ) 
(18) 
Zn--iU(U,yu.KJ(t,,yu.) 
(19) 
For the linear approximative model, 
x = Ax + Bu = [A 
B ] Î - Q - 1 
we obtain 
(20) 
N 
rx,-J 
N rX.--irX.--iT 
In a special case if one wants the linear model to 
be valid in the vicinity of the point x=0, then, 
taking x. = [Ο,,.,,Ο, ε.,0,.,.,0] j = 1,...,n, whe-
re ε· are chosen small constants, the column vec-
tors A. of matrix A are given by 
Aj = f(t' Xj ) / e3 
and 
B = b(t, 0) 
(22) 
(23) 

Design of Aircraft Flight Control System 
373 
The nominal control and state space trajectory are 
calculated applying a numerical procedure based on 
solving the inverse dynamics problem (Stojié, 1985). 
System decomposition into subsystems is, in fact, a 
partitioning of X, U and Y into subvectors, which 
is usually proceeded by coordinate permutation to 
group subsystem coordinates. 
Local control synthesis can be done at subsystem 
level by well known classical or modern methods. 
Since subsystems are ot low order, this task can be 
successfully solved by various state space or fre-
quency techniques. 
The key step in nonlinear system stability analysis 
is to construct the Lyapunov function in such a way 
as to get better estimation and avoid potentional 
conservatism. The best-choice are Lyapunov functi-
ons v-j(t, x-j) which exactly estimate subsystems ex-
ponential stability degree (Siljak, 1978). We cho-
ose v.(t, x.) in the class of functions 
terminal for output are used. 
v.j(t, x) = (x! P. x.) r r>0 
(24) 
where P is a positive definite matrix and r>0, real 
number. To obtain the estimate 
νΊ·(ΐ, χ^ < a ^ U , χΊ·) 
(25) 
with a minimal a, the following optimization prob-
lem is solved: 
max min (-v,(t, x)/v-(t, x.)) 
P xeDx
 
Ί 
Ί 
Ί 
(26) 
If Vi is chosen on the basis of linearized model, 
the procedure given in (Silja, 1978; Vukobratovié 
and Stokié, 1980) can be applied. For the nonline-
ar complete or approximate model the optimization 
problem (26) should be solved. 
Since it is difficult to calculate "by hand" the 
partial derivatives of v^ especially for the com-
plete model, the optimization procedure without 
calculating the derivatives is used (Bazaraa M. and 
Shetty C , 1979). Numerical differentiation is avo-
ided because it is time consuming and causes nume-
rical errors (0. is often nondifferentiable in D ). 
To determine the aggregate matrix W, a special pro-
cedure has been developed. Since the choice of w· . 
satisfying (13) is not unique, we search for sucfr 
w-jj which gives the best estimate of subsystem ex-
ponential stability degrees. This task is realized 
by solving the following optimization problems 
s 
min I w. . 
W i=1 1J 
with constraints 
s 
' l ( x ) "* jIi
wiJ
vJ
( xJ
} 
xeDw 
(27) 
(28) 
We have a linear cost function with an infinite 
number of linear constraints (i.e. for every *€θ χ). 
To solve this problem a secant-type algorithm is 
applied. 
SOFTWARE IMPLEMENTATION 
The goal during software design was to automatize 
control system design, allowing flexibility in use, 
easy software development and its extension. An as-
sumption was made that a designer directly inter-
acts with a computer and is familiar with existing 
file servicing routines for creating, deleting or 
editing files. The design procedure, whoose global 
flow chart is given in Fig. 1, is implemented on 
VAX-11/780 computer. For user communication, the 
keyboard for input and alphanumerical or graphical 
START] 
| Setting of complete aircraft model 
[Module j 
YES 
Aircraft data input 
Aircraft model verification 
YES 
Setting of the trajectories 
parameters 
Nominal control and 
trajectories calculation 
YES 
Aproximative modelling and 
Linearization 
YES 
Subsystems definition 
YES 
Local and global control 
Laws synthesis 
YES 
Stability analysis using 
linearized and nonlinear 
model 
YES 
Suboptimality analysis 
YES 
System simulation by using 
complete or approhimative 
model 
NO 
YES 
Fig. 1. Global flow chart of software support 
organization 
The package, called FCS CAD (Flight Control Systems 
CAD), is organized on the same principles as the 
earlier version for linear control system design 
(Stojié and Mitrovié, 1983) FCS CAD has a two-level 
structure, as shown in Fig. 2. 
The first level is command decoding performed by 
procedure INTERP which also assigns input and out-
put files and devices. A command oriented interac-
tion was chosen for user communication with the 
computer. The form of command is 
CNAME 0F1,...,0FK = IF1,...,IFL 
where CNAME is command (module) name 0F1,...,0FK 
are output file names and IF1,...,IFL are input 
file names (command arguments). Some of the input 
arguments are optional and they are usually speci-
fied if a user wonts to avoid default control 

374 
M. Vukobratovic and R. Stojic 
parameters and constants in algorithms. I f other 
arguments are missing, the INTERP prompts for them. 
All output arguments are optional. 
Fig. 2. Structure of FCS CAD 
The user access to program control is done at a 
symbolic level using names given to the aircraft, 
trajectory subsystems, etc. For example, a symboli-
cal description of subsystem rolling is provided by 
the f i l e 
shown in F i g . 3a 
ROLL 
P 
FI 
DL 
P 
FI 
I subsystem name 
I state vector 
I 
| input vector 
I 
output vector 
F i g . 
3a. 
F i l e f o r subsystem 
d e f i n i t i o n 
where P stands for roll velocity, FI for roll angle 
and DL for command deflection. User edited input 
data are specified in a free format. If one wants 
to plot the time response of P contained in f i l e 
A1.TRJ on the same diagram with the time response 
of FI contained in f i l e F2.TRJ, i t is necessary to 
specify the f i l e shown in Fig. 3b where T denotes 
PLOT "Text shown on plot" 
A4 2 1 
DIJAGRAM 
"Text on diagram" 
PAR A1.TRJ T P 
PAR F2.TRJ T FI 
Fig. 3b. Graphical output control file 
time. The statement "A4 2 1" specifies that the 
format of plot will be A4 with 2 by 1 diagram on 
each page. 
The design process is decomposed into a number of 
typical tasks which may be solved by the computer 
without user intervention during execution. Such 
tasks are called modules. They form the second le-
vel and perform assigned operation on input data 
and give output data. Every module is separately 
executable and knows nothing about the others. This 
feature is especially suitable for developing and 
adding new modules to the package. 
models and for linear models. In the nonlinear mo-
dules the aircraft dynamics is represented by a 
subroutine realizing the mapping (15). The nonline-
ar control law and structure of approximative mo-
dels are set by user defined subroutines. A correc-
tion in mathematical model requires subroutine 
changing. In the linear modules, which are mainly 
intended for local control synthesis, the model is 
represented parametrically. Thus, they are designed 
to be applicable for general linear systems of or-
der lower than 20 (Stojic* and Mitrovié, 1983). It 
is assumed that the linear system can be represen-
ted by: 
a) (A, B, C) - a triplet of matrices for state spa-
ce representation 
b ) ^ G ( s ) 
matrix transfer function 
c) {t.j, x(t.), u(t.j)}.j=1 - time response 
1 
N 
d^ { s i ' d(s-) G^si^i=1 " frecluency respon 
e) (A) - linear static system y = Au 
Standard internal computer representation (disc 
file) is associated with each type of representa-
tion, a) to e). The modules are constrained to have 
input and output in a form of standard representa-
tion, enabling design to be done by a sequence of 
commands without intermediate data preparation. 
Other module inputs are optional, and contain con-
trol parameters and constants, if the user wants to 
avoid default values. 
The principle of using the standard form of input 
and output files has been retained for nonlinear 
modules, except for aircraft data which are used to 
initiate flight dynamic subroutine. 
Procedure INTERP is realized on VAX-VMS operating 
system as using Digital Command language. Execution 
of every module is done as a subprocess. This per-
mits any sequence of modules to be defined as a new 
module using command files. Adding a new module to 
the package requires no change of INTERP. As a mo-
dule is indenpendent of the others, and itself re-
presents a single executable program, it is suffi-
cient to complete its testing. For HELP purposes, 
the INTERP has to be supplied by a file containing 
short information about modules. The modules are 
mainly written in FORTRAN and some of them in 
PASCAL. 
AN EXAMPLE OF CONTROL SYNTHESIS 
The procedure is illustrated by automatic flight 
control synthesis of a combat aircraft. Aircraft 
data from the example are used for forming a six-
-degree-of-freedom flight simulator. The desired 
maneuver is an asymmetric pull-up maneuver with a 
normal acceleration of about 4.5g, shown in Fig. 4. 
3.00 
2.00 
1.00F 
0.50 
1.00 
1.50 
2.00 
One can distinguish modules for nonlinear aircraft 
Fig. 4. Desired aircraft maneuver 
374 

Design of Aircraft Flight Control System 
375 
Synthesized nominal control U° and state space tra-
jectory X° are shown in Figs. 5 and 6. 
-1K 
,6? [10~2 rad] 
tCs] 
1.50 
3.00 
4.50 
6.00 
7.50 
,6° 
[1<Γ1 rad] 
Fig. 5. Nominal control 
[rad]f 
1 1 
| 
1 
1 
l i S O ^ 3.00 
Θ0 
1 
4.50 
\
φ ο 
6.00 
ψθ 
tÉDs] 
7.50 
, 
0.20 
0.10 
-0.10 
ι 
a° 
[radj 
Q° [rad] 
P° 
[rad/s] 
R° 
[rad/s] 
T 
' 
—
« 
1.50 
3.00 
4.50 
\ 6 .00 
7.50 
V F 0 "md] 
Fig. 6. Nominal state variables 
In Figs. 4, 5, 6 the following notation is used: 
xo» Vu» zo a r e t n e coordinates of the aircraft cen-
ter of mass in the inertial system; U = [T , ό , 
<5a> <5 1 is the thrust, the elevator deflection, 
a 
r 
rudder deflection and aileron deflection respecti-
vely; P, Q, R are the projections of the aircraft 
angular velocity on the body axes system; Φ, Θ, Ψ 
are Euler's angles; v, β, α are the flight path ve-
locity, the sideslip angle and the angle of attack, 
respectively. 
As the third step of the procedure the linearized 
model (19), describing small perturbations around 
the initial point of nominal state space trajectory 
is formed. 
For the purpose of decentralized control systhesis, 
we adopt the subsystems according to Fig. 7, where 
"Δ" denote increments in the previously defined va-
riables with respect to their nominal values. 
The local control is chosen in the form 
i=1,...,4 
to minimize the local quadratic criterion 
ui = "Vi 
(29) 
^(x-jtO)) = / e ^ u J q . x . + u j R u.)dt 
(30) 
o 
with respect to the linearized subsystem equations 
x. = Aixi + B i U i 
i=1,....4 
(31) 
where σ-j is the prescribed exponential stability 
degree of subsystem, Q-j, R. are the positive semi-
definite weighting matrices. 
ΔΤχ 
Δδθ 
A6a 
Δ6Γ 
Forward 
translation 
Pitch 
Roll 
Yaw 
[Δν, Δχ0] 
[Δα, AQ, ΔΘ, Δζ0] 
[ΔΡ, ΔΦ] 
[Δβ, AR, ΔΨ, Ay0] 
m 
Fig. 7. System decomposition 
The parameters of local control in the example are 
shown in Table 1. 
TABLE 1 Parameters of local control 
i 
1 
2 
3 
4 
<Ί 
diag(10~7, 10"2) 
diag(10~4, 10, 
0.02, 0.05) 
diag(0.05, 5.) 
diag(10"5,100., 
10"3,10T2) 
Ri 
IQ"
7 
0.12-105 
120 
5.103 
°i 
0.5 
0.3 
0. 
0.32 
I 
* ! 
[0.15-105, 7938] 
[0.75, -0.076, 
-0.98, 0.3M0" 2] 
[0.039, 0.204] 
[-6.806, -0.668, 
-7.451, -0.93 .10"2] 
The subsystem Lyapunov functions are chosen in the 
form (24) on the basis of linearized subsystem mo-
dels. 
Aggregate matrix W[_ in (11) for the overall linea-
rized system (19) with local control 
WL = 
-0.9705 
597.7 
0.1036E-01 
-1.231 
0.8274E-03 
0.1122E-01 
0.4935E-02 
0.3189 
68.27 
183.0 
0.3785 
4.994 
-3.527 
55.95 
34.95 
-0.6621 
shows significant interaction between subsystems. 
Moreover, eigenvalues of the A-BKL matrix show that 
the fourth subsystem is unstable. Thus, we decided 
to apply global control in the form 
-KGx 
(32) 
To reduce interaction factors W 1 2 J W 3 4, W 4 3 in the 
matrix WL appropriate gains are determined for 
linear global control such that 
KG = 
0. 0. -0.8109E+6 0.300 0.3619E+6 -1402. 
0. 0. 0. 
0. 
0. 
0. 
0. 0. 0. 
0. 
0. 
0. 
_0. 0. 0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
0. 
2.188 0.3151 3.386 0.4241E-2 
-0.3114 0.1637 0. 
0. 
0. 
0. 
Closing the global loop gains reduced the couplings 
between subsystems, as can be seen from aggregate 
matrix W.+G for the overall linearized system 
375 
CADCES-M 

376 
M. Vukobratovic and R. Stojic 
"L+G 
"-0.9705 
15.01 
0.8141E-02 -1.333 
0.8268E-03 
0.3499E-01 
0.7246E-02 
1.777 
68.27 
32.98 
0.3235 
0.6384 
-3.526 
0.1110 
37.50 
-0.5771 
Simulation results of tracking for disturbances of 
i n i t i a l conditions type using the complete model 
are shown in Fig. 8. 
[racf 
0.50 
8 t [s] 
♦[rad/s] 
8 t is] 
-0.20 
0.10L 
0.05 
-0.05 
ΔΦ 
ΔΥ 
ΔΘ 
Fig. 
8. Tracking of nominal trajectory 
-2.5 h 
Fig. 8. Tracking of naminal trajectory 
REFERENCES 
Bazaraa M. and Shetty C. (1979). Nonlinear Program-
ming: Theory and Algorithms. John Wiley and Sons, 
New York 
Kubbat W. and Oesterhelt G. (1979). Interactive 
aided design system for aircraft dynamic control 
problem. Proc. of meeting of the SMP of AGARD, 
Sept., Neubiberg, Germany. 
Shah P.C. and Heidergott K.W. (1979). Linear System 
Analysis Program, L224(QR), Vol. 1. Engineering 
and Usage, Boeing Comercial Airplane Company, 
Seattle, Washington. 
Stojic R. and Mitrovié V. (1983). Software for com-
puter-aided linear control system design. Proc. 
of IASTED Symp. on Applied Informatics, Lile, 
France. 
Stojié R. (1985). Contribution to dynamic flight 
control synthesis. Ph. D. Thesis. Military Tech-
nical Academy, Zagreb. 
Siljak D.D. (1978). Large Scale Dynamic Systems: 
Stability and Structure. Nort-Holland, New York. 
VukobratoviC M. and co-warkers (1983). Software 
package for computer-aided synthesis of control 
for manipulation robots. Proc. of 9th world con-
gress of IFAC, Budapest. 
VukobratoviC M. and StokiC D. (1980). Contribution 
to the decoupled control of large-scale mechani-
cal systems. Automatica, Vol. 16, pp. 9-22. 
VukobratoviC M., StokiC D. and StojiC R. (1982). 
One new method of dynamic flight control. Proc. 
of joint IFAC/ESA Symp. on automatic control in 
space, Holland. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF A 
HYDROFOIL CONTROL SYSTEM 
R. Whalley* and P. C. Gregory** 
*School of Mechanical Engineering, 
University of Bradford, West Yorkshire, UK 
^Department 
of Control Engineering, Royal Naval Engineering College, Plymouth, 
Devon, UK 
Abstract 
In this paper the regulation of the heave, pitch and roll motion of a 
31 metre surface piercing hydrofoil model will be investigated using computer 
aided design software. 
The structure of the suite employed, the options avail-
able and the scope of the software, will be outlined together with the evolution-
ary changes in theoretical development which promoted the distinguishing features 
of the package. 
In describing the basis of the numerical procedures, emphasis 
will be placed upon the flexibility afforded by the approach adopted which has 
enabled continuous alteration and amendment to be accommodated for over a decade. 
By way of demonstration, optimal control theory will be used to synthesise con-
trollers which minimise a quadratic performance index comprising the weighted sum 
of the squares of the state and input vectors. 
Variations on the closed loop 
system eigenvalues have been computed for changes in the penalty functions to give 
a family of curves relating the speed of response of the system to the performance 
index. 
Comparisons of the results obtained will be made with earlier work, based 
on non-interacting control theory, by selecting coincident closed loop eigenvalues 
and steady state characteristics. 
Frequency response representations of these 
configurations will be made and the relative performance of the optimal and non-
interacting designs will be commented upon. 
Keywords 
Computer aided system design; decoupling; multivariable systems; 
optimal control; dynamic response; ships. 
INTRODUCTION 
Almost twenty years ago work began on a computer 
aided design suite for control systems at the 
Royal Naval Engineering College, Manadon, 
Plymouth. 
The intention at that time was to 
build modular routines which could be run on 
small machines having 16k core with hardcopy 
plotting facilities. 
As the complexity of the 
task grew it became necessary to link modules via 
data files and common storage enabling series or 
cyclic connections to be made at the exit from 
the mainline routines. 
It was agreed that prog-
ram construction should be in the form of a sequ-
ence of subroutine calls where possible incorpor-
ating the IBM scientific subroutines and in-house 
library routines which would be designed along 
similar lines. 
In keeping with the trend at that 
time Fortran 4 was selected as the programming 
language in the hope that it would be supported in 
accordance with IBM's guarantee of compatability 
with later versions of this language. 
Finally 
the starting date of the project determined that 
the programs embodied transfer function rather 
than state space concepts as time domain proc-
edures were then still under development. 
With the benefit of hindsight it is easy to see 
that a delay of one or two years would have alter-
ed certain aspects of this software study prof-
oundly. 
In particular, the adoption of a comput-
ationally difficult polynomial approach in cont-
rast to state space methods of analysis and design 
altered the future course of events significantly. 
Though managable for single input - single output 
systems the polynomial operations required in the 
scheme became increasingly difficult to sustain as 
large multi input - multi output descriptions were 
considered whereas in state space terms input and 
output scalars simply become vectors in the multi-
variable case. 
Thereafter calculations could be 
performed on arrays using all the manipulative 
power invoked by matrix algebra. 
In contrast the 
equivalent operations using polynomials were beset 
with dimensionality and efficiency problems which 
were inflated by coding difficulties. 
For a short period of time the philosophical basis 
of the package appeared to be suspect as control-
ler designs based on the minimisation of perform-
ance indices, known as optimal control, and then 
the procedures leading to arbitrary pole assign-
ment were introduced. 
Lamentably there were few 
controller design techniques based on the input -
output description of multivariable systems al-
though it was appreciated that the strength of 
the approach depended on the introduction of proc-
edures using the terminal characteristics of power 
and process plant. 
Essentially the system equivalence afforded by 
software based on polynomials remained the focus 
of attention of the engineers constructing the 
package who investigated alternative approaches 
with great diligence. 
These studies showed that 
packages employing state space methods for design 
and simulation suffered from utilisation défic-
iences in that it was difficult to access inter-
mediate variables such as controller inputs and 
outputs, inner loop feedback signals and actuator 
signals as a consequence of the system transform-
377 

378 
R. Whalley and P. C. Gregory 
ations required for computational convenience. 
The inhibiting 
factor inherent in controller 
design suites based on state space methods arose 
from the minimum coordinate representation and 
hence the minimal storage requirements for system 
models together with the algorithmic efficiency 
associated with array operations. 
These 
"attributes" rendered such packages inflexible 
when attempts to expand the software to include 
design methods based on the input - output map of 
a system became increasingly popular in the seven-
ties. 
Fortunately, embedding state space design methods 
into software constructed to accommodate polynom-
ial system descriptions and design procedure was, 
on the other hand, relatively easy. 
This aspect 
of the configuration together with the careful 
standardisation, documentation and testing of the 
routines used guaranteed the longevity of the suite 
which appears to have considerable potential for 
development today. 
In the following section a description of the 
suite the structure and links between the princip-
al modules and the facilities available for linear 
system design, analysis and simulation, are pres-
ented. 
The structure of the software has proved 
to be effective enabling a continuous program of 
alteration and addition to be absorbed since incep-
tion. 
Currently the package is being extended to 
include minimum variance and none linear design 
procedures. 
SOFTWARE SUITE 
The suite of programs for control system design, 
analysis and simulation known as CONPACK will 
accommodate system models having up to six input 
and six outputs with transfer functions of up to 
nineteenth order. 
State space descriptions may 
have up to 120 states although most of these dimen-
sions can be lifted by appropriate changes in stor-
age vector lengths. 
The multivariable section of 
the package which is approximately 200k is shown 
diagrammatically in Figure 1. 
HYDROFOIL MODEL 
In this example the model of a 31 ft surface pier-
cing hydrofoil will be considered. 
Optimal 
control and decoupling theory will be used in the 
feedback design which is given in detail in Bono 
et al (1983), Whalley, R., Gregory, P. C. (1984) 
and Whalley, R.(1978). 
The model of the craft 
was determined from sea trials and parameter esti-
mates using maximum likelihood techniques. 
State space representation of the hydrofoil is 
given in Gregory, P. C. and Whalley, R. (1984) 
from which the equivalent transfer function mat-
rix description is 
y(s) = G(s) u(s) 
where the elements of G(s) are: 
g (s) = (-.32810 - .36858s - .59678s2 
-.21364s3 -.16600s4)/A(s) 
gi2(s) = (-.27431 - .15600s - .27903s2 
- .71880E-01s3 - .60000E-01s4)/Ms) 
g (s) = (.18975 +.21315s + .34513s2+ .12355s3 
2 1 
4 
+ .96000E-01s )/A(s) 
g 
(s) = (.64006 + .36399s + .65108s2 
2 2 
3 
4 
+ .16772s + .14000s )/A(s) 
g 
(s) = (.659327 + .81642s + 1.3263s2 
2 3 
3 
4 
+ .57247s + .40400s )/A(s) 
g (s) = (.18975 + .21315s + .34513s2 
+ .12355s3 + .göOOOE-OlsVAts) 
g 
(s) = (.64006 + .36399s + .65108s2 
+ .16772s3 + .14000s4)/A(s) 
g 
(s) = (.65927 - .81642s - 1.3263s2 
- .57247s3 - .40400s4)/A(s) 
( MVPACX D 
= 
0 
STACK 
Afi/IT/ 
T.r. 
C0*v*er 
Tr«~ss 
3.3 
AfA//V 
OPT/OH3 
P4COH-
u 
A**AY 
rx'T 
j 
D/*£CT 
\#eJ0Ll£MCY\ rs 
PLOT 
A(s) 
= 3.8404 + 5.6266s + 10.436s + 7.1081s 
+ 6.3927s4 + 1.9510s5 + 1.0000s6 
y(s) 
= (pitch, heave, roll) 
u(s) = (aft flap angle change, frd port flap angle 
change, frd stbd flap angle change)t 
GRAPHICAL ANALYSIS 
The simulated open loop response of the hydrofoil 
following step changes on frd port and stbd flaps 
and the aft flaps are shown in Figures 2, 3 and 4, 
respectively. 
Fig. 1. 
Schematic of CAD Package. 

Design of a Hyrofoil Control System 
379 
* _ 
. 
\ \ 
\ 
\ 
/ 
seconds 
roll 
, heave 
^ - ^ 
, ^ 
. 
pitch 
Fig. 2. 
Transient response of open loop 
system following a 10% step 
change in aft flaps. 
' \ 
A--s-w--' 
seconds 
Fig. 3. 
Transient response of open loop 
system following a 10% step 
change in fwd port flap. 
Moreover, the Nyquist array indicates the high 
degree of interaction as shown in Figure 5 below 
where each element has large Gershgorin circles 
arising from the magnitude of the off diagonal ele-
ments. 
In Bono et al (1983) and Whalley and 
Gregory (1984) the decoupling and LQG controllers 
are derived using the decomposition phase and the 
optimal controller module in MV PACK. 
By varying 
the performance index the closed loop eigenvalues 
of the decoupled and optimal control strategies 
were arranged to be coincident and using the div-
ided gain procedure in the Pole-Shifting module 
steady state equivalence was achieved thereafter. 
Img 
^Φ-
Re-
Img 
τ ^ 
Re . 
T 
Img 
r # 
Re 
Fig. 5. 
DNA of system with G Bands 
superimposed from .01 to 
1.0 R/sec. 
In Figures 6, 7 and 8 the closed loop optimal and 
none-optimal (decoupled) response characteristics 
are shown on the same axis following 10% step 
changes on each desired value, in turn. 
Naturally the optimal and none-optimal (decoupled) 
response characteristics are similar in each case. 
However there is significant interaction following 
a 10% step change in the desired value of heave 
where the pitch transient gives almost 40% coup-
ling between these variables. 
Fig. 4. 
Transient response of open loop 
system following a 10% step 
change in fwd stbd flap. 

380 
R. Whalley and P. C. Gregory 
4 
2 
f 
^V 
COIIiClDSHT 
OPTIMAL 
φ. 
/ 
\ 
^, 
WON/- OPTIMAL PITCH SO LUT tOU 
1 
\ 
^^^ 
/^""""^s. pîtcn-^^ 
/ 
^
/ ^ 
/ 
HBAVC FROM OPTIMAL 
SOU/T/ON. 
/.,~^C 
ro11^ 
2 
—-««-- 
£ 
second? 
Fig. 6. 
Transient response of optimal 
and non-optimal systems with 
unity feedback following a 10% 
step change to desired value 
of pitch. 
CONCLUSION 
An interconnected suite of software known as 
CONPACK has been described with particular refer-
ence to the multivariable option known as MV PACK. 
This set of programs can handle polynomial and 
state space descriptions of linear, multi-input, 
multi-output systems having up to six inputs and 
outputs and 120 states. 
The main options permit 
inverse and direct Nyquist array, characteristic 
locus, Optimal LQG and Pole-Shifting controllers 
to be designed. 
A decomposition phase can be 
used to generate the spectral form of the transfer 
function description from which controllers giving 
diagonal dominance can be computed. 
A demonstration of the effectiveness of the suite 
has been shown by computing the controlled and 
uncontrolled response of a surface piercing hydro-
foil using optimal control and the direct Nyquist 
array methods. 
From these results it can be seen 
that there is no advantage to be gained from the 
use of optimal control technique which gives a 
poorer result than the non-interacting controller 
even though a more complicated feedback strategy 
was used. 
COWJCiDfiNr 
OPTIMAL· 
$■ 
NOM- OPTIMAL 
UCAVe 
SOLUTION». 
seconds 
Fig. 7. 
Transient response of optimal 
and non-optimal systems with 
unity feedback following a 10% 
step change to desired value 
of heave. 
REFERENCES 
Bono, R., R. L. Fuzzard, A. Tiano and R. Whalley 
(1983). 
Multivariable identification and 
control of a hydrofoil. 
IASTED Symposium, 
Copenhagen. 
Gregory, P. C. and whalley, R. (1984). 
Optimal 
regulation of a hydrofoil. 
Inst. M.C. 
Symposium on the Application of Multi-
variable Techniques, Manadon, Plymouth. 
Whalley, R. (1978). 
Spectral factorisation of 
the transfer matrix. 
Proc. I. Mech. E., 
Vol. 192, No. 29. 
Whalley, R. and Gregory, P. C. (1984). 
Multi-
variable control of a hydrofoil. 
Seventh 
Ship Control Conference, Bath. 
/ 
y 
t 
\ 
/ 
\ 
/ 
4 
COl*JCIDCN»T 
OPTIMAL 
£. 
, WOM-
/ 
/ 
■> ·" 
OPTIMAL 
ROLL 
SOLUTIOfJ. 
" V 
heave 
p i t c h 
-" 
^r 
6 
seconds» 
Fig. 8. 
Transient response of optimal 
and non-optimal systems with 
unity feedback following a 10% 
step change to desired value 
of roll. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
CAD/CAE/CAM SYSTEMS 
ON-LINE DECISION AIDS IN COMPUTER 
INTEGRATED MANUFACTURING 
C. G. Cassandras 
Department of Electrical and Computer Engineering, 
University of Massachusetts, 
Amherst, MA 01003, 
USA 
Abstract. Control and performance optimization of modern manufacturing systems is 
characterized by an increasing degree of complexity that accompanies automation and 
flexibility. Because the functional relationship between typical performance measures 
and parameters of interest generally cannot be determined, analytic (queueing) models 
are only of limited help. Detailed analysis requires extensive simulation, an approach 
limited by its high, sometimes prohibitive, computational cost and infeasible when real-
time decisions must be made. An alternative is offered by Perturbation Analysis, a 
recently developed technique which efficiently estimates performance gradients with res-
pect to parameters from a single interval of observing real on-line data. This tech-
nique can be used to exploit the data collection capabilities of computer integrated 
manufacturing systems and automatically provide valuable "sensitivity" information. It 
essentially creates a decision aid whose uniqueness lies in supplying on-line answers to 
"what if..." questions. An application of perturbation analysis is discussed, where 
emphasis is placed on optimizing control strategies for dynamic (i.e. state dependent) 
scheduling and routing of individual parts in a computer integrated manufacturing system. 
Keywords. Perturbation techniques, discrete event systems, routing strategies, material 
handling. 
INTRODUCTION 
A typical automated manufacturing process consists 
of interdependent operations linked with a trans-
portation (material handling) system to form a net-
work through which a variety of production parts 
can circulate. Recently, the term 'flexible manu-
facturing system' (FMS) has emerged to describe 
such processes. Another popular term is 'computer 
integrated manufacturing' (CIM). The latter cap-
tures the fact that the design and real-time oper-
ation of such an environment is heavily dependent 
on the use of computers for performance evaluation, 
scheduling, monitoring and control. 
Viewed as dynamic systems, automated manufacturing 
processes are characterized by a high level of com-
plexity, compounded by the presence of uncertain-
ties such as random mechanical failures. Given a 
performance measure J and a set of decision para-
meters θ·ρ...,θ^, it is important to be able to 
evaluate 'sensitivities' of the form AJ/ΔΘ^, 
i=l,...,N, over one or more stochastic realizations 
of the system. At the design stage, this contri-
butes to the selection of the right components. In 
normal operation, these sensitivites are valuable 
tools in answering a variety of "what if..." 
questions for fine tuning as well as short-term 
scheduling purposes. 
Queueing models of manufacturing processes generat-
ed by stochastic analysis (Solberg, 1977; Buzacott 
and Shanthikumar, 1980) are limited by a consider-
able number of restrictive assumptions. For most 
real systems of interest they provide approximations 
only useful in first-cut feasibility studies. Since 
the function J(0^,...,9N) is generally unknown, 
simulation is a widely accepted tool in analyzing 
the complicated dynamics of these systems (Fishman, 
1978) and studying the effect of a parametric pert-
urbation ΔΘ. on some performance measure J. This 
approach, however, is limited by its high, some-
times prohibitive, computational cost. For this 
reason, it is also infeasible as an on-line de-
cision tool. 
A new approach that bypasses the limitations of 
both queueing theory and simulation has recently 
been developed for efficiently estimating sensiti-
vities of the form Δ3/Δβ±, 
i=l...,N (Ho and 
Cassandras, 1983; Ho and co-workers, 1984). This 
approach is based on the availability of real data 
processed on-line and has been termed Perturbation 
Analysis (PA). Exploiting the fast monitoring 
capabilities of automated manufacturing systems, 
this technique adds a new dimension to complicated 
decision making problems in a computer integrated 
environment. Our purpose here is to describe the 
fundamental results of PA and consider its applica-
bility to computer integrated manufacturing. A 
specific scheduling problem is also discussed as an 
example of this technique's real-time potential. 
PERTURBATION ANALYSIS OF 
DISCRETE EVENT SYSTEMS 
A discrete event dynamic system (DEDS) is charac-
terized by state transitions completely controlled 
by the occurrences of discrete events over time. 
This is the case in most manufacturing processes, 
where the arrival (departure) of production parts 
at machines initiates (terminates) specific acti-
vities, generally stochastic in nature. 
Using models developed by classical queueing theory 
(for example, Jackson, 1963), a DEDS consists of 
interconnected servers and queues of some finite 
capacity (infinite capacity being just a special 
case). Through this network circulate customers, 
generally belonging to different classes. For 
simplicity, we initially assume a single customer 
class is present. Two key observation can immedi-
ately be made : 
1. Servers are always in one of three states: 
381 

382 
C. G. Cassandras 
(i) Busy (ii) Idle (iii) Blocked (by one or 
more downstream queues whose capacities have 
been reached. 
dependent of the original parameter perturbation 
δθ . A formal proof and discussion of this result 
can be found elsewhere (Cassandras and Ho, 1984). 
2. Only 'idling' (also termed NO Input (NI))and 
'blocking' (also termed Full Output (FO)) are 
interesting phenomena from a performance opti-
mization point of view (if all servers were 
always busy, then there would be nothing to 
improve upon). 
In systems and control theory, it is often possible 
to observe the state trajectory of a complex non-
linear system and then attempt to linearize around 
this nominal trajectory. A similar approach is 
followed by PA for a stochastic DEDS: in the 
course of a particular stochastic realization, 
performance gradients are computed with respect to 
various decision parameters. The discrete event 
nature of these systems gives rise to simple state 
perturbation dynamics. Furthermore, as an estima-
tion procedure, it has recently been pointed out by 
Cao (1984) and Kumar (1984) that PA is often chara-
cterized by attractive statistical properties. 
Viewed as a dynamic system evolving over a parti-
cular stochastic realization, a DEDS can be des-
cribed by state equations with two categories of 
state variables: (i) Queue lengths, q^, i=l,...,N, 
(ii) Times of occurrence of specified events, 
e^, i=l,...,N, such as service completions. Another 
important realization discussed by Cassandras and 
Ho (1984) is that the discrete event nature of such 
systems allows one to replace the time domain by a 
more natural event domain. In other words, time as 
the independent variable in the state equations is 
conveniently replaced by an event counter k=0,l,... 
The resulting state equations are of the form: 
q(k+l) = q(k) + a[q(k), e(k), u>(k;0)] 
e(k+l) = e(k) + T[q(k), e(k) , oo(k;6)] 
T 
where [q(k) e(k)] is the state vector when the kth 
event occurs, σ[ ·] and τ[·] are transition functions for 
q(k) , e(k) respectively and o)(k;8) is the stochastic 
input parametrized by Θ, which can be viewed as 
simply a stream of random variables. Details of 
this formulation are provided elsewhere (Cassandras 
and Ho, 1984). 
Note that e^(k) is a real-valued variable, whereas 
q.(k) is integer-valued. Since we would first like 
to focus on "infinitesimal" perturbations, we study 
only the dynamics of öe^(k), i=l,...,N, which could 
be made arbitrarily small, while the smallest pos-
sible perturbation in queue length would yield 
6q.(k) = +1 or -1. Nonetheless, "infinitesimal" 
perturbations in DEDS should really be interpreted 
as those causing no change in event ordering 
(Cassandras and Ho, 1984), even though this property 
can be satisfied by 6e.(k) of finite value. 
In Pa three steps are involved: 
1. Perturbation Generation: the process through 
which a parameter perturbation δθ is transformed 
into some state perturbation 6e.(k). 
2. Perturbation Propagation: for "sufficiently 
small" 6e.(k) (rigorously defined by Cassandras 
and Ho, 1984), the process by which these per-
turbations propagate through the network can be 
described as follows: 
'a perturbation &e. at server i 
propagates to a neighboring server 
j whenever an idle or a blocked 
state at j is terminated by i' 
(PP) 
3. Effect on Performance Measure: for most per-
formance measures of interest (e.g. through-
put), state perturbations 6e.(k) are directly 
translated into perturbations SJ. 
Example : Consider a manufacturing process con-
sisting of two operations performed serially. Let 
the parameter of interest Θ be the mean service 
time of the first operation (modelled as server 
1) , regardless of the actual service time distri-
bution, and let δθ be a given perturbation. Of 
interest are the state variables e^(k), i=l,2, re-
presenting the times when service completions 
occur at server i; k=0,l,... counts occurrences of 
these events at either server. Finally, let JTT be 
the throughput time for K customers, i.e. the time 
when K production parts complete the second oper-
ation (server 2) of the process. 
The perturbation δ Θ is interpreted as a fixed 
change to every service time actually observed at 
server 1 in the course of an observation interval 
(Suri, 1983). 
It is then easy to see what the 
three steps of PA are for this example: 
1. Perturbation Generation: for all service com-
pletions at server 1: 
ôe (k+1) = δε (k) + δθ, if kth event occurs 
at server 1 
(1) 
2. Perturbation Propagation: according to (PP) 
we have : 
f6e.(k), if kth e-vent occurs at 
server 1 and terminates 
6e2(k+l) = < 
NI at server 2 
[ôe9(k), otherwise 
(2) 
3. Effect on Performance Measure : since the 
throughput time for k events is given be e„(k), 
we can predict that for k < K: 
&JK(k;6Q) 
= ôe2(k) 
(3) 
8J 
Thus, our estimate of the gradient — is updated 
as follows: 
ÔJK(k) 
ÖJR(k) öe2(k) ôex(k) 
δθ 
ôe2(k) 6e (k) δθ 
where each part of the right-hand-side is determin-
ed from (1) - (3). 
The Real-Time Aspect of Perturbation Analysis 
Consider a manufacturing process viewed as a DEDS 
and some performance measure J believed to depend 
on two parameters θ , Θ«. To determine the sensi-
tivity of J to θ-, θ , we need to estimate the 
gradient of J with respect to these parameters. 
The 'brute-force' approach, applied either to the 
actual system or a simulation model, requires three 
separate experiments as shown in Fig. la; the first 
is a nominal run to evaluate J(Q~, θ2) and the 
other two are perturbed runs to evaluate 
+ΔΘ») respectively, or 
J/AB0. 
J(0 fAG^e«) and α(θ;[,θ -
equivalently : AJ/ΔΘ , Δ. 
Now imagine a 'block box' connected to the system 
as shown in Fig. lb. This is an on-line processor 
of data collected through automated monitoring. 
Its function is to observe the actual state, 
Note that this process is universal, i.e. it is in-
evaluate the perturbed states resulting from Δ 1 ' 
ΔΘ2 and ultimately provide the perturbed performance 

On-line Decision Aids 
383 
measure values. 
Using the framework described in 
the previous section, PA can accomplish this func-
tion with minimum additional computational cost. 
Note that if N parameters were involved, this a p -
proach eliminates the need for (N+l) separate e x -
periments. 
θ, 
θ 2 
1 1 
SYSTEM 
~r 
Θ,+ ΔΘ, 
θ 2 
SYSTEM 
( 
θ, Θ2+Ζ1θ2 
SYSTEM 
7 
ΔΘ. 
Δ% 
Fig. la. 'Brute-Force'Sensitivity Analysis 
Θ, Θ2 
±± 
Δ0. 
Δβ0 
SYSTEM 
PERTURBATION 
ANALYSIS 
T
7 7 7 7 7 7? 
Δ± 
Δ0, 
Δ0ο 
Fig. lb. Evaluating Performance Gradient Through 
Perturbation Analysis 
A LOW LEVEL SCHEDULING PROBLEM 
A computer integrated manufacturing environment 
represents a complex resource allocation problem. 
'Resources' - such as production parts, tools, pal-
lets, fixtures and material handling carriers - are 
dispatched to servers on the basis of certain con-
trol and scheduling strategies. At a high level, 
long-term scheduling algorithms are needed to con-
trol inventory and plan production in order to meet 
forecasted demand. At a lower level, short-term 
scheduling strategies are used to achieve efficient 
resource allocation and respond to disturbances 
such as equipment failures and temporary traffic 
congestion. 
Focusing on the lower level scheduling problem, we 
model an automated material handling system (MHS) 
as a network through which resources circulate and 
are routed to various servers. A typical example 
is shown in Fig. 2, where resources are dispatched 
from a central storage area (warehouse) to one or 
more servers, and eventually returned to it in the 
form of finished or intermediate products. 
This 
resource allocation problem becomes particularly 
interesting when: 
(1) Some sharable resources 
exist, e.g. some particular unitized load in the 
MHS can be processed by either server 1 or server 3. 
(2) The service times are short compared to the 
transfer times from the storage area. In this 
case, resource flows are set up so that the MHS is 
efficiently used to buffer unitized loads. Further-
more, routing strategies must be determined in 
order to send sharable resources to those servers 
most urgently needing them instead of blindly e x -
ecuting deterministic transfers. 
There are two 
major advantages to such a 'dynamic routing' a p -
proach: 
(1) Traffic is kept low. (2) The system 
is more reliable, in the sense that it can continue 
to function (in a 'degraded mode') even after a 
failure occurs. 
A manufacturing system is usually driven by the 
peak service rates of operations. One can there-
fore set up flow-balancing equations, so that to 
any pair of nodes (i,j) there corresponds a desired 
STORAGE 
AREA 
&
,
&
*
,
&
& 
Fig. 2. Material Handling System Example 
flow u.. for a resource of type r, r=l,...,R. If 
t. is the average travel time from node i t o nodej, 
the 
referred 
corresponding desired resource level, s.. 
rred to as 'set-point'), is given by: 
(also 
s . . ··= u. . t. . 
(4) 
We are implicitly assuming here that travel times 
are independent of resource type. 
Now consider a unitized load of type r arriving at 
some branching node i. Because of equipment cost 
limitations, only two branches are usually present, 
so that a binary decision must be made. Let j and 
k be two possible destination nodes accessed from 
ose 
sources 
tive-
ly, representing state information available to a 
local controller at node i. If node j is favored 
over node k, then the routing strategy DT.(t) at 
time t is as follows: 
1J 
te De two possiDie destination nodes accessed rroir 
i, with set-points sT., sT, respectively. 
Suppos 
that x T . , xT, are the Jactual numbers of resources 
(in unitized loads) for (i,j) and (i,k) respectiv 
<3M 
r 
D*(t) =< 
(5) 
^k, 
otherwise 
where node k is always the default destination. 
This type of routing strategy is discussed by 
Tanenbaum (1981). Simple means for selecting 
whether to favor node j or k in the decision are 
described by Cassandras (1984). 
In practice, it is not realistic to expect making 
decisions for every pair of neighboring nodes 
(i,j). Instead, 'aggregate' set-points can be 
used, since a factory usually consists of distinct 
areas with similar types of operations performed 
in each area (for example, a 'processing' area and 
a 'packaging' area). This is illustrated in Fig. 2, 
where two areas are identified with one material 
handling loop serving area a and the other serving 
area b. For some resource type r, we may therefore 
define set-points s r and s?", A routing strategy 
at node A for instance is based on whether area 
b has currently a low resource level, i.e. 
x£(t) < sJ. Similarly, at node B the decision may 
be to return to the warehouse unless the global 
resource level is low, i.e. xr(t) + x^(t) < s r + s 5 . 
a 
b 
a
b 
The routing strategy (5) is parametrized by s... 
The determination of these parameters is made at 
a higher level and passed down to the local con-
troller at node i, which executes the strategy. 
For systems subject to disturbances and variations 
in travel times t.. due to traffic interaction, a 
il 
simple flow analysis may be quite inadequate, ex-
cept as a first-cut approach. Using actual data 
from the system, however, it is possible to evalu-
ate sensitivities of the form 
, ._, where J is 
Asij 
some performance measure, and therefore periodi-
cally adjust the values of sT.. Typical perform-
ance measures include throughput, server utili-
zation and total traffic on the MHS. It is worth-

384 
C. G. Cassandras 
while pointing out that this approach 'closes the loop ' 
between the actual system and the coordinating con-
troller that determines the routing strategy para-
meters; the alternative - based on precomputed 
parameters - does not include effects such as traf-
fic congestion and service time variations actually 
occurring in the real system. More sophisticated 
optimal control techniques may be used, but their 
implementation is far from simple in an environment 
limited in computational capacity. 
Perturbation Analysis in a State-Dependent Routing 
Environment 
As the previous discussion suggests, the 'building 
block' shown in Fig. 3 is of particular interest in 
MHS. In addition to the state variables q.(k), 
e.(k), i=l,2,3, defined earlier, we will also use 
the following notation: 
s(k) = server index where kth event (service 
completion) occurs 
+ 1 
s(k) = 3, q (k) 
qx(k+l) =-
e1(k+l) = 
q^k) 
qi(k) - 1 
s(k) = 1 
(7) 
qx(k) 
e3(k) + Sx(k) 
s(k) = 3, qi(k) = 0 
(8) 
otherwise 
ex(k) 
otherwise 
Suppose the parameter of interest here is the 
threshold T, initially set at T = 1. In order to 
study the effect of a perturbation 6T = 1, we can 
identify four critical states which are discussed 
below. Fig. 4 is a representative sample path of 
the system for the two cases T = 1 and T = 2. 
Dotted lines represent idle periods, arrival times 
are denoted by a. and departure times by d.. Note 
that in the nominal sample path (T=l) only arrivals 
at a-, a,, a. and a? enter the queue. 
S.(k) = service time at server i when kth 
event occurs 
D.(k) = server index representing the destination 
of a customer leaving server i when kth 
event occurs 
T = l 
T = Z: 
&τ^Ώ-& 
HD-
Fig. 3. Threshold Dependent Routing Strategy 
A routing strategy similar to (5) has the form: 
D3(k) 
1, q1(k) < T 
^2, otherwise 
(6) 
Fig. 4. 
where T is the 'threshold' parameter value (the set-
point defined in the previous section). 
Infinitesimal PA is inadequate in this situation. 
The reason is that queue length perturbations may 
now be created and in turn result in large event oc-
currence time perturbations. Suppose, for example, that 
the threshold parameter T is perturbed by δΤ. For 
simplicity, assume that δΤ = 1. The first opportu-
nity to exploit this change occurs when we observe 
q.|(k) = T and s(k) = 3, i.e an arrival takes place 
while queue 1 is at the nominal threshold level. At 
that time, if δΤ = 1 were implemented, the arriving 
customer would have entered queue 1 and generated a 
queue length perturbation oq^k+1) = 1. Since that 
customer would normally enter queue 2, we also have 
6q9(k+l) = -1. This information must be stored and 
subsequently used to generate event time perturba-
tions at servers 1 and 2. 
A perturbation analytic approach to the system of 
Fig. 3 is described by Cassandras (1984b). Our pur-
pose here is to provide a simpler descriptive view 
leading to an algorithm for updating state perturba-
tions. For simplicity, we shall focus on server 1 
and set T = 1. This is equivalent to a G/G/l/1 
queueing system, where all arrivals occurring while 
the queue length is 1 are lost. A simple state 
space model for this system is given by: 
Unperturbed and Perturbed Sample Path 
Example. 
1. Opportunity to gain an arrival : when qn(k) = 1 
and an arrival occurs, this arrival is lost. If 
<5T = 1, however, it is possible to gain the ar-
rival provided Sq.. (k) = 0. In Fig. 4 this hap-
pens at a.2· 
It does not happen at a«, since 
when this event occurs we already have 6q.(k)=l. 
Opportunity to lose an arrival : when q.. (k) = 0 
and an arrival occurs, this arrival terminates 
an idle period (a, in Fig. 4 ) . It is possible, 
however, that 6q (k) = 2, in which case the ar-
rival is actually lost in thé perturbed path. 
This is illustrated with a 7 in Fig. 4, an ar-
rival not lost in the nominal path. In the 
perturbed path, a,, and a, both occur during a 
single busy interval, so that a? finds the queue 
at its perturbed threshold value. 
Opportunity to gain in event time : as in the 
previous case, when q1(k) = 0 and an arrival 
occurs, this arrival terminates an idle period. 
If 6q (k) = 1 when this arrival occurs, we can 
infer that the idle period is eliminated in the 
perturbed path, since one more customer would be 
present for processing. In Fig. 4, this is il-
lustrated with the gained arrival a9 
when d' 
occurs in the perturbed path, the server enters 
a busy instead of an idle period. In fact, the 
entire busy interval (a, ,d~) is pushed forward 
in time by the nominal idle interval (d.. ,a ) 
Opportunity to lose in event time: In case 3, 
event time is gained because of an idle period 
elimination. Subsequently, however, when a de-
parture occurs, it is possible that an idle 
period is present in the perturbed path and 
terminated by a different arrival. In Fig. 4, 
the idle period following d~ is terminated by 
a7; in the perturbed path, there is an idle 
period following d' which is terminated by a,.. 
Therefore, at a 7 we predict an event time gain 
of magnitude (d«,a_), but at d- we should infer 
that this gain is to be reduced by (d',a ) . 

On-line Decision Aids 
385 
An important advantage of infinitesimal PA is 
that no memory is needed in updating 6e.(k) and 
queue length perturbations are never involved. 
This is generally not the case in studying even the 
simple G/G/l/1 system, where 6q.(k) plays a crucial 
role as arrivals are sometimes gained and sometimes 
lost when perturbations are present. Furthermore, 
unless service times are fixed, we must also main-
tain some memory of state information. In parti-
cular, it is convenient to define a pending queue, 
P(k) = {p-,...,p }, where p., j = Ι,.,.,η, is the 
arrival time of a customer as yet unprocessed in 
the perturbed path at the time the kth event is 
observed. The following conceptual algorithm des-
cribes how 6q(k), ôe(k), and P(k) are updated for 
a G/G/l/1 system observed, assuming the parametric 
perturbation 6T = 1 is of interest: 
1. Fix N. Initialize: q = 0 , δε = 0, P = { 0 }. 
2. Observe kth event occurrence, k = 1,2,... Stop 
if k = N. 
Let a. be the time of the ith ARRIVAL, d. the 
time of the ith DEPARTURE. 
1 
2.1. If kth event is ARRIVAL, then: 
if q = 0 and p ^ 0, then: delete p^ from P 
add a± to P 
6e -<-Oe + (a. -e) 
add a. to P 
2.2 
If kth event is DEPARTURE and p 
φ 0, then 
if e + <5e < p , then: 6e -«- 6e - (p.. - e - 6e) 
6q +■ 6q- 1 
else if q > 0, then: 
delete p from P 
else do for all ρ.εΡ: 
if e + 6e > p. and 6q = 0, then: 
3 
6q «- 6q + 1 
else if e + Se > p. and 6q = 1, then: 
delete p. form P 
else if e + 6e < p., then: 
stop, go to 2 
This algorithm stores in the queue P all arrival 
times observed over a busy interval (step 2.1). At 
the end of such an interval (step 2.2), the queue 
is scanned, in order to identify 'critical states' 
1,2. Critical state 4 occurs if e + 6e < p. in 
step 2.2, reflecting the fact that an idle period 
would be present in the perturbed path. Critical 
state 3 is identified in step 2.1 when an arrival 
terminates an idle interval and the queue P is non-
empty. 
As already mentioned, PA in this non-infinitesimal 
case is considerably more involved and its practi-
cality has yet to be put to the test of sufficient 
experimentation through simulation. This approach, 
nonetheless, is indicative of the structure of DEDS, 
which generally allows the development of concept-
ually simple procedures for prediciting perturbed 
behavior. 
Fig. 5. On-Line Sensitivity Information Collection. 
As is often emphasized (Buzacott, 1982), automated 
material handling is the crucial feature of CIM. 
It is for this reason that a significant effort is 
placed on enhancing control strategies in material 
handling. Perturbation Analysis promises to be 
an important technique towards developing and 
optimizing such strategies. 
REFERENCES 
Buzacott, J.A., and Shanthikumar, J.G. (1980). 
Models for Understanding Flexible Manufacturing 
Systems, AIIE Trans., 12,4, 339-350. 
Buzacott, J.A. (1982). 'Optimal' operating rules 
for automated manufacturing systems. IEEE 
Trans, on Automatic Control, 27, _1, 80-86. 
Cao, X. (1984). Convergence of parameter sensitivity 
estimates in a stochastic experiment. Subm. to 
IEEF, Trans. on Automatic Control. 
Cassandras, C G . , and Ho, Y.C. (1984). An event 
domain formalism for sample path perturbation 
analysis of discrete event dynamic systems. To 
appear in IEEE Trans. on Automatic Control. 
Cassandras, C.G. (1984). A hierarchical routing 
control scheme for material handling systems. 
Proc. First ORSA/TIMS Conf. on Flexible 
Manufacturing Systems. 
Cassandras, C.G. (1984b). Efficient simulation tech-
niques for performance evaluation of queueing 
networks. Proc. TASTED Intl. Symp. Applied 
Identification, Modeling and Simulation. 
Fishman, G.S. (1978). Principles of Discrete Event 
Simulation, Wiley. 
Ho, Y . C , and Cassandras, C.G. (1983). A new ap-
proach to the analysis of discrete event dynamic 
systems. Automatica, 19, 2^, 149-167. 
Ho, Y.C. (ed) (1984). SPEEDS: a new technique for 
the analysis and optimization of queueing net-
works. Technical Report No. 675, Division of 
Applied Sciences, Harvard University. 
Jackson, J.R. (1963). Jobshop-like queueing systems. 
Management Science, 10, 1^, 131-142. 
Kumar, P.R. (1984). On estimating derivatives of 
cost functions from simulated or real data. Proc. 
23rd IEEE Conf. Decision and Control. 
So lberg, J.J. (1977). A mathematical model of 
computerized manufacturing systems. Proc. 4th 
Intl. Conf. Prod. Res. 
Suri, R. (1983). Implementation of sensitivity 
calculation on a Monte Carlo experiment. J. 
Opt. Th. and Applic. , 40_, 4_, 625-630. 
Tanenbaum, A.S. (1981). Computer Networks, Prentice-
Hall. 
CONCLUSIONS 
The complexity of CIM systems requires fast and ef-
ficient decision aids to enable reliable operation 
under varying conditions. Perturbation Analysis 
provides such an on-line decision support tool, by 
evaluating parametric sensitivities while simply 
observing an actual system. Fig. 5 illustrates 
the generation of on-line reports from actual system 
data, in addition to conventional monitoring reports. 

Copyright © IF AC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
SELECTION AND EVALUATION OF CAD/CAM 
SYSTEMS FOR THE MECHANICAL 
INDUSTRY 
T. T. El-Midany and A. K. Abd El Latif 
Department of Production Engineering and Mechanical System Design, 
PO Box 9027, Ki?ig Abdulaziz University, Jeddah 21413, Saudi Arabia 
Abstract. The application of computers to design and manufacturing in 
engineering, CAD/CAM is not new. However, it is only relatively recently 
that falling costs and technology advances in microelectronics have made 
CAD/CAM systems widely available to the mechanical industry. Automobile 
and aeronautical industries were among the pioneersim their use for the 
CAD/CAM. The primary advantages in adopting CAD/CAM are well known and 
include faster tendering response with improved documentation, improved 
accuracy and quality, reduced lead times this is often the key factor; 
the possibility of higher productivity ; and cost savings; or more commonly, 
greater many making ability. The greatest benefits are obtained wherever 
products are complex such as the design of aircraft, cars and computers. 
CAD/CAM technology is moving very quickly on both the software and hard-
ware fronts and CAD/CAM systems can be very quickly outdated unless their 
design and structure is flexible enough to enable then to incorporate the 
latest technology. In correct selection of CAD/CAM system has sometimes 
resulted in the in position of unreasonable constraints upon the freedom 
of design and manufacture decision making and reduced the confidence in 
the use of CAD/CAM systems. 
In this paper we attempt to develop the guide lines and criteria for 
selection a CAD/CAM to meat the mechanical industry requirements, includ-
ing the interactive graphic system and associated software for design and 
software packages for manufacturing. It does not describe in detail a 
formal procedure to be followed, but gives general approach. 
Keywords. CAD/CAM for Mechanical Industry, Selection of CAD/CAM, Evalua-
tion of CAD/CAM, CAD/CAM systems. 
INTRODUCTION 
CAD/CAM systems available today provide 
either, an aid to the engineer which 
enables him interactively to combine his 
skill with the speed, memory and computa-
tional ability of the computer, or a com-
puterised and automated batch processing 
facility which from a relatively small 
amount of input data will complete a se-
quence of tasks previously undertaken by 
the engineer/planner, El-Midany (1982) . 
In fact the CAPP systems have been deve-
loping way of automating this procedure 
and have using many approaches, the aim 
of the entire interlinking and integration 
efforts is the reduction of the input 
effort by multiple use of stored workpiece 
information, Fig.l show the various scopes 
of tasks that can be covered by individual 
integrated CAM/CAD system, Spur and 
Grottke (1984). 
Mechanical industry recognize now the vital 
role that CAD/CAM will play in our future 
and both lay stress on the need to invest 
more and to expand the existing CAD/CAM 
systems. Implementing a CAD/CAM systems 
for the mechanical industry are an impor-
tant investment. However, the experience 
of many companies has shown that the poten-
tial benefits for exceed those of other 
investments competing for limited invest-
ment dollars. In most companies, the 
areas that provide the greatest potential 
return to justify the investment are; 
reduction in times, increasing plant pro-
ductivity and improving the manufacturing 
procedure by updating the methods with the 
more advanced technology. 
CAD/CAM is the catalyst to bring about a 
new spirit of professional achievement in 
industry. CAD/CAM is an integrated part, 
they share a common data base, Fig.2, to 
apply in one without the other is wasting 
half of the available resources and data. 
CAD/CAM technology responded to mechanical 
industry needs for sophisticated interac-
tive graphics, computer controlled machine 
tools, intellegent robots, improved ins-
pection techniques and a most of other 
innovation to do manufacturing better 
Groover and Zimmers (1984). 
NES (1984) reported that, CAD system is 
used to create a new data base. Investi-
gation of companies who use CAD will rea-
dily show that a company has been very 
successful indeed if 50% of the data base 
resides on the CAD computer with a period 
of five years. It will not be surprising 
to learn that during the first year, hardly 
any of the new data base is created because 
of the long 1 earing time required for the 
CAD system. 
Many companies continue to use the tradi-
tional means of creating new drawing 
because the most investment in CAD will 
only allow a small number of draughtsmen 
or designers to transfer from the drawing 
board of the design system. It is seen 
from Fig.3 that during the first five years 
387 

388 
T. T. El-Midany and A. K. Abd El Latif 
of the life of a CAD/CAM system, approxi-
mately 80% of the data base will still come 
from the traditional drawing board source. 
It would reasonable to conclude that the 
manufacturing engineer requires a system 
that will work today and integrate tomorrow. 
product-
planning 
innovation, costs, 
sale, investment, 
personnel, working stock 
I N T E G R A T E D 
C A D / C A M - S Y S T EM 
process-
planning 
manufacturing 
scontrol ' 
manufacturing 
identifying of functions, 
designing, calculating, drafting, 
generating of parts lists 
^ 
material planning, operation planning, 
| ^*-^ | 
determination of set-up lines, generation 
ffT, 
of working plans and NC-data, inspection planning 1 l^ " i i I 
disposition of supplies, timing, 
disposition of orders, work distribution, 
material flow 
machine control, 
inspection, 
handling, transport 
o 
cost calculation, 
order accounting, 
factory accounting 
Fig.l. Scope of tasks of an Integrated 
CAD/CAM system. 
Creates geometric shape 
data and basic dimensional 
information 
Picks up basic geometry 
and converts to engineering 
data 
Operates on geometry and 
engineering attributes and 
produces a manufacturing 
strategy 
Converts manufacturing 
data into a form for NC 
processing. 
Converts informatiol 
NC machine instructions 
|NC PROCESSOR ANO 
POST-PROCESSOR 
SYSTEM 
INTERACTIVE 
CAD 
SYSTEM 
( 
INTERFACE 
J 
DRAWING AND 
PROCESS PLANNING 
SYSTEM 
2« 
J E 
ai 05 
C (T3 2 
[ 
INTERFACE 
p 
NC MACHINE 
CONTROL SYSTEM 
(CNC OR DNC) 
. 0) 3 
I O <Λ 
) 3 <Λ 
J «» * 8 
I if 8 
J O υ <Λ 
Information can be in tape 
or cassette form, or direct 
computer link. 
Generates information for 
the control of shop floor 
production 
(
INTERFACE 
W—.§ 
< 
. 
y 
*t 
CAPACITY PLANNING 
AND SCHEDULING 
SYSTEM 
. re <a 
Interactive 
graphics 
Geometric 
1 
modeling 
Engineering 
analysis 
Design 
review and 
evaluation 
Automated 
drafting 
* 
Fig.2. 
Data 
bas«- -H 
Tool and 
1 
fixture 
design 
Numerical 
control 
programming 
Computer aided 
process 
planning 
Production 
plannmo 
and 
scheduling 
ι 
Production 
Relationship of CAD/CAM database 
to CAD and CAM. 
1st 
2nd 
3rd 
4th 
5th 
Year 
Fig.3. Rate of groth of CAD database. 
CAD/CAM systems involve activities which 
make use of computer systems to assist in 
the creation, modification, analysis, opti-
mization of a design, documentation of the 
product design, process planning, schedul-
ing and to monitor and control the manufac-
turing operations. It consist of the 
hardware which includes, the computer, one 
or more graphic display terminals, key 
boards and other peripheral equipment. The 
software consists of the computer programs 
to implement computer graphics on the sys-
tem plus application programs to facilitate 
the functions of the user company Fig.4. 
Fig.4. The software requirements of a 
CAD/CAM linked manufacturing system 
There are different types for the computer 
aided systems which are required for the 
different companies. Their classification 
is depending on such factors as: availabi-
lity of computing facilities, Jobbing on 
batch production, size of organization, 
component variety, outputs required and 
links with other systems. Most of the 
following systems, Computer Aided Design 
and Drafting, process planning, NC tape 
preparation, Scheduling Quality Control and 
Estimating , required a considerable 
amount of conceptual thinking and decision 
making. Interactive systems specially for 
CAD are now available in a whole range of 
packages varying from relatively low-cost 
2D systems to expensive and extremely 
powerful 3D system. 
In the case of the inter-active approach 
the systems tend to be adaptable to a very 
wide range of tasks on the basis that 
much of the critical decision taking pro-
cess is carried out by the operation. 
Whereas in the case of the data-input 
systems the very fact that the computer 
system has to make on often complex series 
of decisions tends to limit their applica-
tion to specific types of activity. 
Bumberg and Gerwin (1981) found that firms 
in the UK, West Germany and US all had 
considerable problems in evaluating CAD/ 
CAM systems, and discounted cash flow was 
of very limited use. Insufficient evi-
dence was available to estimate future net 
returns, especially if it was proposed to 
use the new equipment to produce a new 
product. A critical issue was how to 
quantify the benefits likely to accrue 
from enhanced flexibility. In the light 
of their conclusions about the difficul-
ties involved in evaluating sposticated 
systems and of the difficulties in imple-
menting them, they concluded that new 
manufacturing technology was outstripping 
firm's capabilities for coping with it. 
The skills, systems and procedures avail-
able to firms were inadequate to enable 
them to support the sophisticated new 

Selection and Evaluation of CAD/CAM 
389 
manufacturing systems. Their solution was 
for firms not to strive for the automatic 
factory but rather to concentrate on 
simpler technologies such as stand alone 
CNC machine tools and they suggested that 
the ideal of the automated factory may be 
illusory. But, if some countries are 
makincj substantial progress towards it and, 
thereby , enhancing their competitiveness, 
it may be necessary for other countries to 
follow suit. If a technology is being 
applied successfully in other developed 
countries, it may have to be applied in all. 
The products offered on the market and 
generally called CAD/CAM systems are very 
manifold and very different in their capa-
city performance. Also the level of the 
communication interface is an important 
criterion for the user. The only way to 
discover about CAD/CAM is to use it. Many 
cases are on record of a firm buying a 
turnkey system only to discover that it was 
the wrong one and to through it out in 
favour of another better adopted to the 
firms specific problems. This is the sort 
of expense that a small firm in particular 
cannot afford. The important thing for a 
firm of whatever size is to buy experience 
as cheaply as possible so as to determine 
what it is that it wants. This is often 
best done on a time-sharing bureau for 
small capital outlay Duncan and Emerton 
(1983) . 
Potential users of CAD/CAM can become very 
confused when trying to decide between the 
rival claims of different vendors of this 
type of equipment. The literature available 
from the vendors concentrates on the hard-
ware offered and the software available, 
Harrow (1983). The main benefits which 
attract potential users are the prospects 
of producing drawings more quickly, able 
to respond to design changes without long 
delays and a reduction in the number of 
scorce and expensive staff. The selection 
of a CAD/CAM system and its successful 
implementation is a highly complex task 
requiring skills which span several dis-
ciplines which normally have little point 
of contact. The first constraint on any 
proposed system is the amount of many 
available system can vary in piece from a 
few thousand pounds/dollars to a few 
millian, dependent upon the number of work 
stations required and the central pro-
cessor used , e.g. a system based on a 
general-purpose mini computer with plotter 
and three worfcstations together with a 
graphics data base and general purpose 
graphics software could be expected to 
cost about £ 250000 at 1983 price as re-
ported by Harrow. The best way for many 
firms in mechanical industry is to get 
into CAD/CAM by buying or renting a termi-
nal and using a time-sharing computer 
bureau. This reduces initial capital 
commitments and allows experience to be 
gained before making expensive final and 
vital long term decisions. 
CAD/CAM SYSTEMS 
The CAD/CAM systems consist of the hardware 
which includes, the computer, graphic dis-
play terminals and other peripheral equip-
ments. The software consists of the com-
puter programs. If CAD/CAM is to be effec-
tive tool, it is cru cial to require in 
each case which type of device is appro-
priate. The choice is confused by the 
rapid development of technology; The fea-
tures dependent on main frame computers 
five years ago are becoming available on 
intelligent terminals. The choice of a 
system needs to balance today's situation 
with future evaluation both of the system 
and of the user. However it should not be 
attempted without an in depth of feasibi-
lity study to determine the concept. 
Groth in the capability of computer hard-
ware is reasonably assured by the rapid 
advances of microelectronic technology. 
Sophisticated manufacturing techniques 
continue to produce more powerful computers 
in small packages with lower price tags 
concurrent development of more efficient 
software and means of data storage and 
retrieval, however, requires more atten-
tion. Data bases are growing larger and 
are contantly being updated and altered. 
Access and display requirements generally 
vary. Voice-interactive systems for data 
storage and retrieval have advanced in 
recent years as a replacement for key-board 
storage systems. 
The CAD/CAM systems throught the world have 
acquired capabilities making them suitable 
for use in the mechanical industry. The 
maxi-main frame systems are quite suitable 
for large companies, however the problems 
of making remote access by graphic termi-
nals to the central processor is a worth-
while task to be solved. The system over-
head supporting remote entry graphic and 
graphic data handling on these machine 
tends to impair response times at the ter-
minal to an unacceptable degree. Local 
plotting is not usually possible with maxi-
installations . 
The turnkey system is bought complete with 
central processor, graphics terminals, 
plotter...etc, and can be brought into 
operation by simply "turn a key". Several 
years ago such systems offered little more 
than high speed draghting facilities. Now, 
however, the better known systems have a 
considerable three dimensional capabilities 
including from surface design, finite ele-
ment model creation, calculation of section 
and volume properties and solid model gene-
ration; process planning, scheduling and to 
monitor and control the manufacturing ope-
rations, Fig.5 it is more superior to the 
remote access maxi machine, Abd El Latif 
and El-Midany (1984). 
The general prupose mini computer is 
usually superior to the turnkey system in-
terms of flexibility and potential for 
expansion, particularly with the advent of 
networking or linking processors. The new 
generation of mini and super mini computers 
have a tremendous role to play, particularly 
in process control, data logging and provi-
ding terminals with intelligence of the 
pre-programmed variety. 
The CAD/CAM hardware would be useless with-
out the software to support it. It inclu-
des programs for implementing certain spe-
cialized functions as design analysis pro-
grams, finite element analysis, modeling, 
etc. The advent of solid modellers "as 
romalus Fig.6" have a dramatic effect in 
providing a large amount of dedicated power 
to each user. CAD/CAM technology is moving 
very quickly on both the software and hard-
ware fronts and CAD/CAM systems can be very 
quickly outdated unless their design and 
structure is flexible enough to enable them 
to incorporate the latest technology, Cox 
(1983) . 

390 
T. T. El-Midany and A. K. Abd El Latif 
& 
SPECIFICATIONS & 
REQUIREMENTS 
GRAPHIC 
TERMINALS 
OTHER INPUT 
DATA FILES 
Γ"! 
EXTERNAL 
NC INPUT 
PART DEFS.ETC 
PROGRAMMING 
CENTRE 
PROCESSING 
COMPUTER 
CAD 
13 
ON/OFF LINE 
DRAFTING MACHINE 
(PART DEFINITION) 
GT5000 
HIGH SPEED 
DRAFTING 
MACHINE 
FINAL 
DRAWINGS 
LOADING & 
SCHEDULING DATA 
CAM 
The benchmark component modelled with Romulus 
Fig.5. Turnkey CAD/CAM system 
CONSIDERATION AND CRITERIA FOR 
SELECTING CAD/CAM SYSTEMS 
The introduction of CAD/CAM to the manufac-
turing and design environment has exposed 
many hardware, software, administrative and 
organizational problems which are limiting 
factors to productivity, and which are 
continually subject to partial corrective 
actions. In many cases the initial aim in 
introducing CAD/CAM is to reduce the quan-
tity of subcontracting and to make better 
use of skilled staff who are in short 
supply. If speed of production is the only 
criterian then simple drawings and schematic 
diagrams will show the greatest improvement, 
about 5 or 8:1 compared with manual methods. 
The overall speed of the system will be 
dependent upon a number of factors, most 
of which are not under the control of the 
user, and among these are the power of the 
computer used, the design of the graphics 
database, the design of the workstations, 
The ICMB component — Romulus model sectioned 
Fig.6. The role of Romulus in mechanical 
engineering. 
the speed of transfer from the discs, the 
speed of the communication links and the 
mix of work being performed at one time. 
Only the last can be effectively controlled 
by the user. 
It is up to the user to decide the relative 
importance of each criteria based upon his 
needs because the correct investment in 
manufacturing systems will probably be the 
most important decision made during the 
following years. The selection of CAD/CAM 
systems are a complex task (that requires 
a multidisciplinary approach on the part 
of the user organisation. The system cho-
sen should be sufficiently span-ended to 
allow expansion into areas of interest 
that become apparent with experience. 
The implementation of CAD/CAM systems will 
consider the feasibility of purchase the 
system from one of the vendors. The 
choice of the most suitable system is one 
of the most difficult the user has to 
face, one of the complications being the 
very large number of factors which have a 
bearing on the choice. The considerations 
and criteria for selecting the appropriate 
system, Table 1, is considered as the most 
useful. It may be used to evaluate the 

Selection and Evaluation of CAD/CAM 
alternative systems, and make the reco-
mmendations for the prefered system to be 
selected. 
The first step for the prospective user 
company is to assign a weight to the most 
important factors Table l , a weight of 
450 is assigned -to the general considera-
tions and mechanical applications and 100 
for the other applications each is sub-
divided to the various subdivisions,n,. 
Each company emphasize upon the most 
important factors considered by giving it 
a higher point weight. The indicated 
weight is based on limited industrial 
experience. Then each system is evaluated 
with repeat to the considered factors by 
giving a grade point,x, from the follow-
ing point gradation: 
Very suitable 
Quite suitable 
Suitable 
Limited Suitability 
Unsuitable 
Then multiply n by x give a value, which 
reflect the importance of that general 
factor to the user company. Summing up 
^n.x for each candidate give a compari-
son value which differentiate between 
them, higher values indicate more suitable 
system. In this process, candidate has 
the most favourable greater rate is being 
used. 
Selecting a CAD/CAM system based upon the 
benefit/Cost ratio give more emphasizes 
upon the cost which is becoming less 
importance due to the availability of very 
many systems with reasonable comparable 
costs. Also the cost factor in the gene-
ral considerations reflects the importance 
and weight of that factor to most of the 
user companies. 
TABLE 1 
Selecting a CAD/CAM System 
8 
6 
4 
1 
t o 
t o 
t o 
t o 
0 
10 
7 
5 
3 
points 
points 
points 
points 
points 
Hardware 
Software 
Response time 
Output device speed 
Interfaces 
Communication 
Plotters 
Product documentation 
Training 
3. Programming 
High level vendor 
language 
Standard language 
Assembly language 
Source availability 
Clear documentation 
User protection 
Diagnostic aids 
Data base access 
Clear interfaces 
4. Compatibility 
Compatibility with 
existing equipment 
Graphic terminal 
control 
Operator input methods 
prompting 
Plotting control 
5. Service 
Contract 
Parts location 
Turnaround 
Warrantee and 
discontinuance clause 
Software bug service 
Software service 
6. System management 
High speed peripherals 
User diagnostics 
File management software 
Expense reports and 
logging 
7. 
Delivery and logistics 
support 
Staging in-plant 
benchmark 
Packing 
Installation aid 
Pre-delivery inspection 
Installation guide 
Receipt acceptance 
Supplies 
Revisions 
Biling 
Proprietary agreement 
On-site debugging 
I m p o r t a n t 
F a c t o r s 
C o n s i d e r e d 
A - G e n e r a l 
C o n s i d e r a t i o n s 
1 . 
C o s t 
H a r d w a r e 
CPU 
Added S t a t i o n s 
| 
P e r i p h e r a l s 
R e l a t i v e 
importanct 
f a c t o r 
450 
S o f t w a r e 
T u r n k e y 
b a s i c 
p a c k a g e 
A d d e d 
s p e c i a l i t y 
p a c k a g e s 
H a r d w a r e 
m a i n t e n a n c e 
S o f t w a r e 
m a i n t e n a n c e 
S p e c i a l s 
S p a r e s 
D o c u m e n t a t i o n 
T r a i n i n g 
T r a n s p o r t a t i o n 
F a c i l i t i e s 
S u p p l i e s 
F i e l d 
s u p p o r t 
S u p p o r t 
p e r s o n n e l 
2 . 
Q u a l i t y 
U s e r 
g r o u p 
e x i s t e n c e 
a n d 
s u p p o r t 
C o r p o r a t e 
q u a l i t y 
R e s p o n s i v e n e s s 
F i n a n c i a l 
s t a b i l i t y 
Number o f 
i n s t a l l a t i o n s 
G r o w t h 
R e l i a b i l i t y 
S i m u l t a n e o u s 
o p e r a t i c 
C r a s h 
r e c o v e r y 
P o w e r 
l o s s 
r e c o v e r y 
E n v i r o n m e n t a l 
s e n s i t i v 
Human f a c t o r s c o n s i d e r 
>n 
Lty 
i t i o n ï 
M 
150 ; 
100 
20 
15 
10 
15 
10 
10 
10 
10 
10 
10 
5 
5 
5 
5 
5 
5 
Grading o u t of 10 
f o r 
d i f f . c a n d i -
d a t e s . 
A 
x l 
B 
X2 
'C 
X3 
D 
X4 
T o t a l 
p o i n t s 
1 
of 
d i f f . 
Candida- 1 
nA 
nB 
B-Mechanical Applications 
45( 
1. Mechanical design 
Logic diagrams 
Process diagrams 
Schematics 
Architectural drawing 
Plant layout 
Structural steel design 
Piping 
From/To lists 
Mapping 
Sheet metal design 
Two-dimensional mecha-
nical design and drafting 
Point functions 
Line functions 
Arc functions 
Conic functions 
Dimensioning 
Line type 
Text.arrows 
Witness line suppression 
Character height 
Flag note 
Three-dimensional mecha 
nical design and drafting 
Wire-frame or solid 
modeling 
Hidden line removal 
capabilities 
Surfacea and planes 
Curves and curved sections| 
Tool design 
Jig and fixture design 
Nameplates 
Dimensionless drawings 
2. Mechanical interfaces 
1100 
Stress analysis 
Finite element modeling 
(FEM) 
Modal analysis 
Flow analysis 
Mechanism analysis 
391 
CADCES-N 

392 
T. T. El-Midany and A. K. Abd El Latif 
mass properties determi-
nation 
Geometric properties 
3. Manufacturing Planning 
packages 
Computer-aided pro-
cess planning 
Metal forming NC 
programming 
Nesting of sheet 
metal parts for 
efficient cutting 
Machining NC programming 
Automatic NC functions 
Other NC functions 
NC default values 
NC interfaces 
C-Other Applications. 
100 
1. Electrical design 
applications 
2. Building design 
applications 
3. Architecture design 
applications 
Σ η 
Total points of each 
candidates. 
100 
50 
30 
20 
_— 
χηΑ IrnB 
CONCLUSION 
The selection of a suitable CAD/CAM system 
is a highly complex task involving a multi-
discrplinary approach. Whichever system 
is choosen a great deal of work must be 
done by the potential user. In most cases 
the user will not fully appreciated the 
potential which these systems can offer. 
It is therefore essential that any system 
choosen is sufficiently open-ended to 
allow expansion into areas of interest 
which will be discovered with experience. 
Evaluation of each system is based on 
considering the most important factors for 
the user. Each factor is then graded and 
the system with the high total points 
should be selected. 
REFERENCES 
AbdElLatif, A.K. and T.T. El-Midany (1984). 
Some aspects of CAD in design of Mech. Compo-
nents and system. 1st I n t r . conf. on 
advanced manuf.(IFS), Singapore. 
Blumberg, M. and D. Gerwin (1981). C'.ping 
with advanced manufacturing technology. 
Intr. Inst. of Manag. Labour Market 
Policy , Discussion Paper, Berlin. 
Cox, D. (1983), Formula one shapes up, 
Effective CAD/CAM, I. Mech. Eng. pp 
117-120,UK. 
Duncan, M.E. and G.F. Emerton (1983)- CAD/ 
CAM for mechanical parts in the elec-
tronic industry, Effective CADCAM I. 
Mech. Eng. Pp. 53-60, UK. 
El-Midany, T.T. and A.M. El-Taimi (1982) 
Computer Aided Production Planning 
(CAPP) systems and approach, 2nd IFAC 
Symposium on CAD of Multivariable 
Tech. System, pp 537-554, USA. 
Harrow, P. (1983), Factors in Selecting a 
Computer-Aided Design System, Computer-
Aided Eng. Jr. pp 16-24, UK 
NES Oct. (1984) Computer graphics in 
manufacturing The Jr. of the NE Socie-
ty pp, 22-24,UK. 
Spur, G. and F.L. Krause (1984)-CAD-
Technik, C.H. Verlog, München, Wien. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
THE SPECIFICATION OF A COMPUTER 
AIDED SYSTEM FOR THE DESIGN AND 
MANUFACTURE OF LIGHTING COLUMNS 
P. F. McGoldrick*, C. O'Brien*, N. A. Rusby* 
and J. B. Lightbody** 
^Department of Production Engineering and Production Management, University of 
Nottingham, Nottingham NG7 2RD, UK 
** Abacus Municipal Limited, Sutton-in-Ashfield, Nottingham NG17 5FT, UK 
Abstract. 
This paper considers the problem of specifying special purpose CAD/CAM 
systems by presenting a case study which discusses the requirements for software 
that will be used to aid the design and manufacture of lighting columns. 
Whilst 
many of the details of the programs will be unique to this particular set of 
problems, much of what is described may have wider applicability particularly, 
perhaps, for the smaller company or for an organisation with limited knowledge and 
experience of this technology. 
Keywords. 
Computer-aided design; computer-aided manufacture; computer 
software; manufacturing processes; columns. 
INTRODUCTION 
Specification is the key to good design; this is 
true whether one is dealing with a very tangible 
piece of hardware or, as in this case, with a 
computer program which is intended to aid the 
design and manufacture of a group of products. 
In particular, this paper presents a case study 
to illustrate the specification of computer 
software for use in the design and manufacture of 
lighting columns. 
The work is being undertaken under the CASE 
(Collaborative Awards in Science and Engineering) 
award scheme organised under the auspices of the 
SERC (Science and Engineering Research Council). 
In this scheme a research student is nominated to 
work on a project of joint interest to a 
university department and to the collaborating 
company. 
Abacus Municipal Limited is a small manufacturing 
company which makes a variety of products but 
principally a range of steel lighting columns. 
The chief component in the price of these columns 
is their material content. 
Since the market for 
these columns is highly competitive it is 
absolutely essential that efficient use is made 
of that material content. 
In most cases columns are designed and 
manufactured to a variety of different national 
and international Standards and Codes of 
Practice. As well as these conditions, others 
which may be imposed by a particular client as 
part of an individual contract, and then there is 
the range of grades of steel or other materials, 
cross-section shapes, sizes and thicknesses. 
All this means that only a computer is capable of 
coping with the enormous variety of alternatives 
which need to be evaluated in order to arrive at 
anything approaching an optimal design. 
Business is of course not just about design, and 
from the outset it was clear that any software 
had to enable consideration to be made of 
manufacture as well. 
There is no point in 
designing a product which cannot be made by the 
company's existing or projected future plant, nor 
indeed one which ignores the variety of raw 
material needed and the cost of holding stocks of 
that material. 
Whilst many of the details of the structural 
design software are unique to this particular 
problem and of little interest outside, it was 
felt, by both the company and the University, 
that the problems considered in this paper could 
be of interest to those who might be thinking of 
investing in CADCAM software. 
THE SERC CASE SCHEME 
Itie Science Research Council (subsequently 
renamed the Science and Engineering Research 
Council - SERC) began a scheme called CAPS 
(Co-operative Awards in Pure Science) in 1967. 
In 1972 this scheme was broadened to include 
university departments, and in 1975, following a 
one-year pilot study, the scheme - now with the 
CASE acronym - was expanded to include 
eng ineering projects. 
Throughout this period of expansion and change 
the objectives of the scheme remained broadly 
unaltered and, with a now mature scheme, that is 
still the case. 
It provides a postgraduate 
training which enables a student to register for 
a university research degree (almost invariably a 
PhD) whilst working on a project which has very 
real links with the co-operating body. 
It is 
usually the case that the student spends at least 
three months of his three years working in and 
with the parent organisation, which is required 
to nominate an industrial supervisor who will 
advise the student on his work. 
Thus, in 
addition to providing an opportunity for 
graduates to gain firsthand experience of work 
outside the academic laboratory, the scheme 
encourages the development and strengthening of 
contacts between academic institutions and 
outside bodies. 
393 

394 
P. F. McGoldrick et al 
All British organisations, both public and 
private, are eligible to co-operate with academic 
institutions in the CASE Scheme, provided that a 
satisfactory training for a research student can 
be arranged. 
The Council of SERC decides each 
year how many CASE awards will be made and these 
are allocated to specific projects which have 
previously been judged as suitable for the 
training of a research student. 
Projects 
submitted for the allocation of an award are 
judged in competition and assessed by the 
relevant SERC subject committee on their 
scientific merit, the value of the training 
offered, the degree of collaboration involved and 
the contribution of the co-operating body. 
Once 
an award has been allocated to a project a 
student is nominated by the university in 
consultation with the co-operating organisation. 
There are special arrangements under this scheme 
about the exploitation of any commercially 
valuable results. 
In recognition of the 
co-operating body's contributions to the work, 
the SERC waives its usual rule that the results 
should be exploited for the public benefit. 
THE COMPANY 
The Abacus group of companies is centred on 
Sutton-in-Ashfield - a small town in the centre 
of a coal-mining region about twenty five 
kilometres north of the city of Nottingham. 
The 
largest volume of trading in the group is 
undertaken by Abacus Municipal Limited, which is 
a wholly owned subsidiary of the parent company 
Abacus Holdings. 
Abacus Municipal manufacture a range of street 
furniture including bus shelters, litter bins, 
covered walkways, high masts and most importantly 
lighting columns. 
The selling, design, 
manufacture and erection of these columns is a 
major contributor to turnover and employment 
among the one hundred and eighty workforce. 
Contacts between the company and the University 
have been strong. 
Both the first two authors 
have acted as consultants and advisors to the 
company whilst being full-time employees of the 
University? the fourth author is Works Director 
of Abacus Municipal and has responsibility for 
both design and manufacture of the company's 
products. 
PREVIOUS COMPANY EXPERIENCE WITH CAD 
The company has had limited but successful 
experience of CAD. 
In late 1979 Abacus 
commissioned software to assist in the 
positioning of lighting masts used to floodlight 
large areas such as goods yards, airport 
marshalling aprons and sports fields. 
The calculation of ground light intensity when 
using various lantern types at various 
orientations and heights on columns at various 
locations is a straightforward but extremely 
time-consuming task, and hence one which was 
highly suited to computerisation. 
The software, written by consultants, runs on a 
Tektronix Τ4Π52 microcomputer which is equipped 
with two magnetic tape cartridge drives for data 
storage and retrieval as well as an A4 pen 
plotter for hardcopy. 
Currently (November 1984) 
the system is being reconfigured to run on a 
Hewlett Packard HP 9836 micro with twin floppy 
disc drives and an Al pen plotter. 
This revised 
system will also incorporate an AO digitiser, 
which will greatly aid the input to the machine's 
memory of the particular ground layout specified 
on the client's blueprint. 
The second area in which the company has had 
experience is computer assistance with the 
structural design of rigid lighting columns to 
British Standard BS 5649 (1978). 
This program 
calculates the bending moments, torsional forces, 
and deflections of a design of column as 
specified by the design engineer; the design 
methodology specified by the Standard (see later) 
takes into account wind force loading and 
gravitational forces. 
This software was written 
"in house" by the design engineer concerned and 
runs on the HP 9836 machine. 
OTHER COMPANY INVOLVEMENT WITH COMPUTING 
A management information and control system has 
been installed and implemented over the past two 
years. 
This system, consisting of IBM System 34 
hardware running the MAPICS software, makes 
available on-line management information 
which includes marketing, production control and 
inventory levels. 
The system is not used to produce market 
forecasts; this exercise would be difficult 
because of the variability in demand for the 
small quantities of non-standard columns which 
tend to dominate current sales when compared to 
the rather lower volume of standard columns 
currently being sold. 
The stored data is 
however used to give up-to-date information on 
product costs and to monitor performance of the 
company's marketing strategies. 
The production control data base includes full 
Bill of Materials and product routings for the 
orders on hand. 
In conjunction with the 
inventory level records, this enables a weekly 
net requirement plan to aid production scheduling 
to be produced. 
No automatic monitoring of shop 
floor progress is available currently and 
sequencing is, in the absence of manual 
intervention, sequential. 
Inventory levels are updated in a batch mode from 
requisition orders and delivery notes. 
Commonly 
used stock items have a safety level indicated; 
when the number held goes below this level the 
company buyer is warned that the item should be 
re-ordered. 
THE PROBLEM IN OUTLINE 
As so often, the problem can be expressed as one 
of efficiency and productivity. 
It has already 
been noted that the market into which lighting 
columns are sold is highly competitive and that a 
large proportion of the finished cost of the 
product is represented by the cost of the raw 
material. 
Whilst this cost can be reduced by 
judicious and timely purchasing, it is vital that 
the material is efficiently used - in particular 
that the design criteria are met but not grossly 
exceeded - so that every piece of expensive 
material in the finished product is absolutely 
essential. 
Value is added to the raw material during column 
manufacture, and again it is crucial that the 
minimum amount of work is done and that it be 
done as cost-effectively as possible. 
Paradoxically it is possible to use material more 
efficiently by adding more manufacturing 
operations, and the major reason for looking to 
CADCAM for help is that the number of 
alternatives which the designer can try is vastly 
increased, and so design and thus manufacture can 
be truly optimised. 

Specification of a Computer Aided System 
395 
STANDARDS FOR DESIGN 
Basically the company designs and manufactures to 
the standard specified by the customer. 
In 
general for the United Kingdom this will be one 
of three British Standards; frequently these 
standards will be adapted for other countries by 
taking into account the different topological and 
climatic conditions which will prevail and which 
affect design. 
The situation in regard to British Standards is 
changing. 
The first relevant Standard, BS 1840 
(I960), is now obsolescent and rapidly becoming 
obsolete. 
It makes general recommendations on 
construction and installation; in addition it 
specifies mandatory levels on maximum allowable 
stress as well as deflection under a given 
distributed wind load. 
Several modifications to 
this Standard have been introduced over the 
years; the most significant of these is BE 4/72 
(1972). 
This reduced the scope of the Standard 
- by limiting it to columns between eight and 
fifteen metres high and with up to three metres 
lantern outreach - and more significantly 
increased the wind loading. 
For higher masts or lighting columns the company 
works to BS CP3 (1972), a code of practice which 
indicates more specific information on wind 
speeds and hence loading across the country; 
site surroundings and local topography are also 
taken into account by this document which really 
allows for the greater care needed when dealing 
with large structures. 
A new British Standard RS 5649 (1978) is being 
introduced in stages. 
This much more stringent 
Standard specifies dynamic design criteria for 
the first time, and these loadings, as well as 
the static ones, take account of geography, 
topography, height of the column and the column 
profile (for example whether it is circular or 
hexagonal). 
This standard applies to columns up 
to eighteen metres in height. 
DESIGN AND CONSTRUCTION 
Across the industry, many different materials and 
overall configurations of design are used; in 
Abacus's case however all the columns are made 
from steel with two alternative hollow cross-
sections. 
They are either manufactured from 
constant diameter circular tube or from a 
tapered, octagonal tubing which is folded from 
sheet steel with the seam continuously welded. 
Manufacture from circular tube places two main 
constraints on the designer. 
Firstly the 
suppliers stipulate a minimum order quantity for 
non-standard size materials, and so, when net 
batch requirements planning and inventory level 
limitations do not permit a special raw materials 
order, standard stocked sizes must be used. 
Similarly, the material sizes currently stocked 
by the company may be specified in order to 
minimise lead time with the additional benefit of 
increasing stock turnover. 
The second constraint relates to the production 
of columns using stepped sizes of tubes; this 
solution to the design problem is commonly used 
since the cross-section needed reduces with 
increasing distance up the column, and so 
changing the size periodically gives a step-wise 
approximation to the tapering section which might 
otherwise be ideal. 
Each step of course 
involves a joint and so the problem is to weigh 
up the cost of this joint against the material 
saving which is made by using it more 
efficiently. 
Each joint potentially involves 
the swaging of the larger diameter tube, welding 
(which may have to be both internal and 
external), weld reinforcement, and weld defect 
detection (using penetrant dyes), and thus can be 
expens ive. 
The octagonal, tapered sections which are bought 
in are press fitted together and hence the 
constraints mentioned do not apply. 
Base sections for the larger columns are treated 
as standard sub-assemblies which are manufactured 
as stock items in order to reduce lead time; 
this tends to mean that, at present, the bases 
are not redesigned for individual columns though 
this situation is to be reviewed. 
To protect against environmental corrosion - and 
to improve appearance - the finished columns are 
surface coated, either by galvanising or by metal 
spraying with zinc or aluminium. 
EXTENT AND SCOPE OF CAD 
The CAD software is seen as having two main 
objectives. 
The simpler function of the two is 
to act as a computational aid to calculate the 
performance factors of a suggested design. 
These performance criteria typically include: 
the strength, in both bending and torsion of the 
various sections of the column; the maximum 
deflections of the column in two planes; and the 
natural frequency of the column structure giving 
consideration to the elasticity and damping 
coefficient of its foundations. 
These criteria 
are themselves determined by a number of 
variables such as: site or location conditions; 
overall dimensions and wall thickness of the 
various sections; cross-sectional profile; 
second moment of area; and material properties 
such as stiffness and elastic moduli of the 
material. 
Although all these functions will be a useful 
part of the CAD package they would hardly 
constitute a major task for the computer; they 
would not realise the machine's full potential. 
It has long been recognised that the design stage 
largely dictates the manufacturing process (and 
vice versa of course) and thus, in the design of 
the software, the manufacturing as well as the 
structural and marketing aspects have to be borne 
in mind. 
It is intended that the software will be capable 
of producing its own structurally optimum design 
given the overall configuration of the column as 
well as any other specified or necessary 
conditions. 
From this structural basis, 
manufacturing constraints can be imposed: 
(i) Raw material availability to produce 
acceptable lead times and hence delivery dates; 
this availability can either be from stock or on 
an appropriate delivery timescale. 
This use of 
non-optimum material cross-sections and lengths 
will usually incur cost penalties which the 
system can quantify; 
(ii) the batching of many small orders which 
use similar material sizes in order to produce 
gross and net requirement plans. 
Simulation 
techniques which could reflect the current shop 
floor loading might be most appropriate for 
determining the optimum batch size or batching 
arrangement. 
Too large a batch could increase 
work in progress and lead times for other 
pieceparts, but there would be savings in 
pre-process planning - such things as bills of 

396 
P. F. McGoldrick et al. 
materials, material flow charts and documentation 
- as well as in machine set-up costs and in the 
familiarisation of the workforce with that 
particular type of job. 
Flexibility to allow 
for customer preferences would have to be offset 
against the cost of production; 
(iii) a nesting algorithm used in conjunction 
with the design algorithm to minimise the 
material wasted when column piecepart lengths are 
cut from stock tube. 
Tube which is delivered 
cut to the correct length is more expensive; 
and (iv), as discussed earlier, the balance 
between material costs and the costs of joints. 
LINKS BETWEEN! LIGHT INTENSITY AND CAD 
PACKAGES 
In many cases the customer's contract will 
specify the lantern type, the overall column 
height and outreach (the offset of the centre 
line of the lantern from the centre line of the 
column); in these circumstances the lighting 
intensity program mentioned earlier would serve 
no useful purpose and would not be used. ftfaere 
flexibility exists however the situation is 
different, in that many of the variables examined 
in the light intensity program interact with 
those of the structural design part of the CAD 
package and thus an optimal design will need to 
bear in mind both parts of the overall design. 
The lantern type has a particular lighting 
"footprint" and this is carefully examined in the 
intensity program and is central to its success. 
The lantern also affects the structure in two 
ways; its weight is a load at the end of the 
column arm, and its cross sectional area 
projected to the wind gives rise to a torsional 
load and a bending moment which act on the 
column. 
The outreach (as well as the detailed design of 
the bracket arm) is a factor in the intensity 
program from the point of view of focus and 
projection, but it also applies further dead 
weight and wind-pressure-induced loading to the 
structure. 
The overall column height governs the area which 
can be lit with an acceptable intensity and of 
course is a major factor in governing the column 
design and controlling its cost. 
LIMITATIONS OF CAD 
The authors firmly believe in the AIDED aspect of 
CADCAM. 
It is very much a principle which will 
be borne in mind when writing the software that 
the design decisions must be made by the 
designer. 
The computer, in addition to being a 
supremely quick calculating machine, enables more 
alternatives to be examined; it will enable 
"what-if" questions to be asked and answered. 
If this were not the case then precious design 
skills and experience would fall into disrepair 
or be lost forever; the company could be in 
danger of becoming totally dependent on a "black 
box" which would become moribund with the passage 
of time. 
Cost penalties are another factor which should be 
mentioned. 
It is clearly the case that it is 
more expensive to develop software for a specific 
purpose than it would be to buy a more standard 
package where the development costs can be 
amortised over a number of customers. 
If the 
software does not exist though then there is no 
real alternative; the costs must be accepted. 
LINKS INTO CAM 
In order to achieve the maximum benefit from this 
system it will have to link with the management 
database contained in the IBM system; equally it 
should have the ability to produce data which 
will drive any automatic manufacturing plant 
which the company has or envisages acquiring in 
the foreseeable future. 
In order that the optimum designs can be 
produced, the CAD system will interrogate the 
MAPICS database to recover current costs of all 
the manufacturing operations involved in the 
production of a joint in a column incorporating 
stepped diameter circular tubes. 
No major plant purchases are envisaged 
immediately, but clearly the availability of data 
suitable for automatic machines will ensure that 
the acquisition of such equipment will be an 
easier decision to make. 
The conversion of an 
existing flame cutting machine, which contours by 
following an ink line on a drawing, to numerical 
control is being pursued. 
CAD/CAM INTERACTIONS 
These interactions are displayed diagramatically 
in Figure 1. 
At Level 1 the interaction takes 
place between the two programs which were 
discussed earlier - the structural design program 
and the light intensity package. 
The outcome of these two packages interacts with 
three further areas at Level 2. 
The BATCHING 
program has already been mentioned; this will 
group together similar products. 
In the 
EVALUATION OF DESIGN sector, cost assessments 
will be made and manufacturing lead times 
estimated. 
The reduction or increase in costs 
as a result of the previously suggested batching 
will be indicated. 
The initial link into the 
IBM system will be made in the STOCK AND SHOP 
FLOOR INTERROGATION routines. 
These will have 
access to current inventory levels - to data on 
stocks of raw materials, and finished parts and 
sub-assemblies which may be needed. 
Data on 
shop floor loading with an indication of 
potential future capacity limitations will also 
be needed. 
Bottlenecks and delays could then be 
alleviated or eliminated by indicating that a 
modified design which would utilise less time on 
the manufacturing plant is possible with what 
could be adjudged to be an acceptable cost 
penalty. 
At Level 3, three further links into the IBM 
system will take place. 
The DATA UPDATE area 
carries out the function suggested by its title. 
As well as the feedback of information to MAPICS 
of data which will interact with inventory levels 
and re-order quantities, work in progress levels 
will be predicted and product lead times, 
together with required customer delivery dates, 
can be estimated. 
In the PRE-PROCESS PLANNING 
sector bills of materials and requisition orders 
will be generated and parts routings and the net 
requirements plan suggested. 
If future 
investment encompasses NC or CNC plant then the 
requisite data will be generated here. 
The 
COSTINGS link is intended for any update of 
information which may be indicated. 
CONCLUDING REMARKS 
Many companies - perhaps particularly the smaller 
ones - are reluctant to embrace CADCAM and 
related technologies. 
Often this is because 

Specification of a Computer Aided System 
397 
senior management do not fully understand the 
technology. 
The benefits that it will bring are 
often difficult enough even to enumerate let 
alone to evaluate financially; the penalties of 
disruption and dependence can be very severe; 
the risks are high. 
The situation can be exacerbated by the hard-sell 
approach adopted by many companies involved in 
computing and the innate conservatism of many of 
the individuals involved in the customer's 
decisionmiaking process. 
The authors hope that this case study will 
encourage other organisations to sit down and 
analyse their own company structure and methods 
to see if CAD/CAM could help. 
ACKNOWLEDGEMENTS 
The third-named author is in receipt of a 
postgraduate studentship from the Science and 
Engineering Research Council, to whom thanks are 
due. 
The authors also wish to gratefully acknowledge 
the financial support given to the project by 
Abacus Municipal Limited. 
REFERENCES 
BE 4/72 (1972). 
Technical Memorandum. 
Department of the Environment, 
London. 
Specification for Steel 
Columns for Street Lighting, 
First Revision. 
British 
Standards Institution, London. 
Specification for Lighting 
Columns. 
British Standards 
Institution, London. 
Code of Basic Data for the 
Design of Buildings. 
Chapter V. Loading. 
British 
Standards Institution, London. 
BS 1840 
(1960). 
BS 5649 
(1978). 
BS CP3 
(1972). 
A 
DATA 
UPDATES 
BATCHI 
STRUCTURAL 
DESIGN 
Φ 
LIGHT 
INTENSITY 
PACKAGE 
LEVELJ 
NG 
EVAL 
y 
OF i K 
1 xl 
UATION 
DESIGN 
STOCK AND SHOP 
1 
FLOOR INTERROGATION 
1 
LEVEL 2 
1 
> y 
N 
COSTINGS 
PRE-PROCESS PLANNING 
LEVEL 3 
FIGURE 1. 
CAD/CAM INTERACTIONS 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
MATHEMATICAL METHODS 
A NUMERICALLY RELIABLE ALGORITHM 
FOR FITTING A SUM OF EXPONENTIALS OR 
SINUSOIDS TO NOISY DATA 
B. De Moor and J. Vandewalle 
ES AT Laboratory, Department of Electrical Engineering, Katholieke Universiteit 
Leuven, H ever lee, Belgium 
Abstract. Many problems of practical CAD importance in systems, modelling and control 
can be formulated mathematically as a problem in signal decomposition where the signal 
is modelled as a finite number of independent elementary signals which are additively 
combined and corrupted by an additive zero mean white noise source. In this paper the 
parameters of a sequence of real valued and equidistant data of the form 
3.k j(y.k + δ ^ 
+ n,„ 
k=0,N 
where {η, } 
i=l 
is a white zero mean noise sequence, are estimated using a realization 
0,N 
technique, based upon the singular value decomposition of certain matrices. First, se-
veral possible practical combinations of the parameters α., 3· > Ύ· and δ. a r e conside-
red with respect to their practical application. Secondly, the signal is modelled using 
a time-invariant autonomous state space model. Furthermore, some theoretical results 
are established which lead to a state space realization procedure that estimates the 
unknown parameters in a numerically reliable way. When the data are noise corrupted, 
it is shown that the techniques used still deliver remarkably reliable results, that 
however can be shown to be near[yoptimal in a least squares sense.Furthermore, some nu-
merical simulations reveal the reliability and possible interactive development of the 
algorithm. 
Keywords. Computational methods, Harmonic analysis, Numerical methods, Parameter esti-
mation, Signal processing, Singular value decomposition, Spectral analysis, State spa-
ce method, Sum of exponentials. 
INTRODUCTION 
Let's consider a sequence of equidistant, real 
valued data, generated by the following exprès -
n 
Σ 
a.e 
i=l 
X 
B.k 
j(y.k+ 6.) 
k= 0, N 
(1) 
where α . , Β . , γ . , δ . , ε IR 
1* 
1 
1 
1 
The n terms of the sum can be considered as 
"elementary signals", each of them is charac-
terized by four parameters : the amplitude 
a., a damping factor 3·, a pulsation γ. that 
corresponds with an oscillation frequency 
δ. =γ./2π and a phase δ. (in radians). 
Then the following special cases can occur 
I. γ.= δ.= o for i = 1,.. ,n then 
1 n X 
Bjk 
y = Σ 
a.e 
(2) 
is a sum of n real 
k 
i=l 
X 
exponentials. 
ÜT 
Ύ-Ϊ o for i = 1, n ; the n is even for real 
** 
Sponsored by a grant from the Belgian IWONL. 
This work was partially supported as a project 
of the Belgian FKFO. 
data. 
Since the data y, are assumed to be real, 
the parameters α.,β.,γ.,δ., must occur 
in conjugated pairs, i. e. for each qua-
druplet ( a . , 3., γ., δ.,) there is a 
r 
i* ι' l 
l 
corresponding one (a.,3.,-γ., -δ.) 
For 1= 1.. n/2 we put 
aC 
2 a2£ = 
2 a2£-l 
V 
32£ =β2£-1 
(3) 
V~ 62£ =δ2£-1 
Then using Euler's formula the summation 
(1) is written as a sum of cosinoids 
with varying amplitudes. 
n/2 
b^k 
yk= Σ 
a£e 
cos (u)£k+y£) 
(4) 
When b <o, the corresponding elementary signal is 
damped. When b =o, the elementary signal is a 
pure cosine. 
III. Not all γ. φ o for i = 1,n i.e. there are 
some i for which γ.= δ.= ο . The general signal 
(1) now becomes a mixed sum of real exponentials 
and cosines. 
A compact formulation of the problem is the fol-
lowing . 
CADCES-N* 
399 

400 
B. De Moor and J. Vandewalle 
For a given n, minimize over a l l α·,β£>γ·»6^ ε IR 
J(Y 5k + «,·> 
2 
[ ( Σ 
g.k 
- k 
t , . 
- . 
. 
« 
- y k ] 
(5) 
k=o 
f = 1 
for a given set of N +1- real valued and equidis-
tant y, and for a known set of weights w,. The de-
termination of the optimal "n" is considered fur-
theron. Signals of the general form (1) occur fre-
quently in various applications. In fact, the gene-
ral solution to any phenomenon described by a sys-
tem of linear differential equations with constant 
coefficients is of the form (1) . 
For the discussion of the statitistical question, 
whether it is justified to approximate a given da-
ta series by an exponential sum of the form (1), 
we refer to the literature [Ruhe, 1980] . 
Although this contribution presents a unifying ap-
proach to the several 'special cases' I, II, III, 
generally, they are treated separately. Here we 
also stress the numerical aspects and the noise re-
jection qualities of the algorithm . The first so-
lution to the problem of fitting experimental data 
by a sum of real exponentials is due to de Prony 
[ 1795 ] . Variations on his method are described 
in several books on numerical analysis [Lanczos, 
1957 ] ('problem of "weighted moments" ' ) . The pro-
blem occurs in fitting radioactive decay measure-
ments (see ref. in [ Ruhe, 1980]) , transmission 
function analysis in atmospheric research [Wiscom-
be, 1977] compartmental analysis [Jacquez, 1972], 
electrical network analysis (Heaviside's expansion 
theorem [Lanczos, 1957], analysis of human lung 
exhalation and chemical rate constant estimation 
(see ref in [Ruhe, 1980] and [ Wiscombe 1977]). 
In many of these applications, the amplitudes a. 
are expected to be positive. In [Wiscombe, 1977 ] 
a survey of various methods is given. The funda-
mental theorems guaranteeing existence and unique-
nessof positive sums of a 'best fit' are treated 
by Cantor & Evans (1970). Algorithms based upon 
these results are described in [Wiscombe, 1977] 
and 
[Evans, Gragg, Leveque, 1980 ] . In [ Ruhe, 
1980] a non linear weighted least squares approach 
is studied while in [Ruhe, Wedin 1977] the pro-
blem is considered as a separable τιοη-linear least 
squares problem since it is linear in the amplitu-
des a. once the exponents 3· are known. A Remes-
1 
r 
1 
type algorithm is developped in [Braess, 1970] 
while a Padé-approximant approach together with 
conditions for existence and uniqueness are dis-
cussed in [Sidi, 1982]. 
The case of fitting data by a sum of cosines is 
handled in [Lanczos, 1957] as the famous 'search 
for hidden periodicities'; However, more general-
ly, the problem belongs to the domain of spectral 
analysis [Kay, Marple, 1981], where so called 'non 
traditional approaches' can perform much better 
then the Fast Fourier transforms in high resolu-
tion spectrum estimation with application to beam-
forming, 
direction finding, array signal pro-
cessing and other areas. An excellent survey of 
various spectral estimation methods together with 
some 300 references, is given in [Kay, Marple, 
1981]. The singular value decomposition as a key 
tool is used in [Tufts, Kumaresan,1982] to obtain 
least squares approximations of limited rank of the 
signal correlation matrix estimate. In [Kung,1981] 
a Toeplitz approximation method is presented which 
inspired this work. 
The case of exponentially damped sinusoids is con-
sidered in [Kumaresan, Tufts, 1982] where also the 
singular value decomposition of a matrix shows up. 
Special care has to be taken with respect to the 
sometimes ill-conditioned nature of the 'sum of 
real exponentials'-problem. The parameters that 
describe the signal, are badly determined by the 
data. If these are perturbed by a small amount, 
there may be quite a large charge in the best-fit 
parameters. In [Lanczos, 1957] it is shown how se-
veral different exponential sums can approximate 
the same data series equally well. The fact that 
large variations are produced in the results by 
small variations in the data, is found in all me-
thods and is an intrinsic property of the problem 
itself. It is customary to blame this ill-condi-
tioning on the non orthogonality of the set of ex-
ponential functions [Lanczos,1957]. However, a de-
tailed sensivity analysis in [Ruhe, 1980] and 
[Wiscombe, 1977] illuminates the nature of the 
ill-conditioning more precisely. 
This work fits in a general trend towards numeri-
cally reliable software for systems and control. 
STATE SPACE MODEL AND SOME USEFUL 
PROPERTIES. 
The problem of determining the parameters of the sig-
nal (4) , can be reformulated mathematically as a 
linear system realization problem.The signal of 
the general form (1) can be modelled by an autono-
mous linear state space model of dimension n 
Xk +1 
Where 
A = 
- A . 
x k 
e 
0 " · 
o. . . · 
0 . . 
0 
• M* 
(6) 
C = [a, j«i 
a e 
n 
X = [ 1 1 ... I]1 
(7) 
(8) 
(9) 
Proof lobvious by repeated substitution. 
The key observation to understand the solution 
presented further, is to recognize that the ge-
neral signal (l) is the homogeneous solution to a 
constant coefficient linear difference equation, 
n 
yk=i=lai yk-i , 
k= n,N 
(10) 
For a derivation of this expression we refer to 
[Kay, Marple, 1981] 
The coefficients a. are related to the elementary 
signals by Vie ta's polynomial root theorem. From 
(10), it directly follows that the pxq Hankelma-
trix with p, q> n, consisting of the p + q - 1 
first data y, , must have a rank equal to n. 
H = 
pq 
and 
y~ yi Yo 
V i 
V i 
Vq-2 
(Π) 
rank [Hpq] = n 
(12) 
Proof : Any m-th column (m > n) can be written 
as a linear combination of the n preceding columns 
using 
(10) . 
Further more, from the state space model (6) it 
follows that 
y k = C . A k - ' . X 0 
(13) 
This leads to a decomposition of the Hankelmatrix 
H 
: 
pq 

A Numerically Reliable Algorithm 
401 
pq 
?ð-
V i . 
c 
CA 
q-1 
Vq-2 
Cx 
CAx 
o 
o 
CAx 
CA <rK 
CA 
o 
p - i 
CA p +q-2„ 
CA1 p-1 
[ x 
A.x . . . Aq 
lx 
]= Ã-Ä 
o 
o 
o 
(14) 
d e f i n i n g the m a t r i c e s Ã(ñ÷ç) and Ä(ç÷ñ) t h a t 
a r e 
both obviously of rank n. 
rank (H 
) = rank Ã = rank Ä = n 
(15) 
pq 
. 
Now a new Hankelmatrix H 
is defined which is de-
rived from the previous one by shifting it over 
one colum to the right, while inserting one new 
date sample y 
, 
p+q-i 
yi y 
pq 
i ' 2 / v V q 
■·· y„ 
(16) 
rP 
-Vq-iJ 
where again due to (10) 
rank ("3 ) = n 
(17) 
pq 
Using (12) and (13), it's easy to prove that 
H 
= Ã· A · Ä 
(18) 
pq 
and the least squares estimate of A is computed as 
Ã+. t 
pq 
(19) 
where Ã and Ä denote the pseudo-inverse . 
DERIVATION OF THE ALGORITHM. 
Following [Zeiger, Mc Ewen, 1974] and [Kung,1978] 
the singular valuedecomposition of the data Hankel-
matrix H 
is used [Klema, Laub, 1980] 
pq 
-to estimate the (numerical) rank and then the num-
ber of elementary signals to model. 
-to obtain numerically reliable estimation of the 
matrices Ã, Ä, A and C. 
Suppose the (partial) SVD of H 
is given by 
H 
= U . Ó. V 
pq 
pxn nxn nxq 
(20) 
then the 'balanced realization technique' computes 
Ã and Ä up to an nxn similarity transform T, which 
is to be determined furtheron. 
Ã· T = U. Ó 1/2 
and 
Ô- 1.Ä=Ó 1 / 2. V1 
(21) 
(22) 
The least-squares estimate of A, up to the simila-
rity transformation T, is computed using (19^ as 
T_1.A.T. = (Ã.Ô)+. îf 
. (Ô _ 1.Ä) + 
-Ó- , / 2.õ'. Ñ| - í.Ó-' / 2 
(23) 
Now the similarity transformation matrix T is com-
puted by taking into consideration that 
1) the systemmatrix A of the state space model(6) 
is diagonal and 
2) the first column of the matrix Ä (14) is given 
by (9) 
_j 
Since A and T .A.T are similar,they share the 
same eigenvalues. So condition 1) is fulfilled by 
computing the eigenvalues and -vectors of 
T_1.A.T. 
Let X be the nxn matrix containing as columvectors 
the eigenvectors of T 
.A.T. and Ë be the diagonal 
nxn matrix with the eigenvalues, then clearly 
T_1.A.T. = ×.Ë.×-1 
(24) 
and using 
(18) 
H 
= ( Ã.Ô) . (T .A.T.).(T 
.Ä) 
p q 
1/2 
- 1 1 / 2 1-
= U.E ' .×.Ë.× 
.Ó 1' .VC 
= (õ.Ó 1 / 2.×). Ë 
α~].Ó1/2.í1) 
(25) 
Now let t denote the (complex) first column of 
"I.E,/2.Vt 
÷-·.Ó1/2.íÅ 
i-i 
(26) 
Define by D the complex diagonal nxn matrix con-
taining the inverse entries of t 
V 
o. . , o 
t 
n 
Then it is obvious that 
(27) 
(28) 
Hence 
Γ ι ΐ 
Γi i 
loi 
hi 
L ° J 
L M 
(29) 
Ï ^ . × - ' . Ó 1 7 2 ^ . 
and (24) is to be modified as 
if 
= (Éß.Ó1/2.×.¿) Λ.(¼~1 
.X~l .Ó1/2.íÆ) 
(30) 
p q 
! 
which finally results in tie parameter estimation 
A = Ë = 
B1 + j Y l 
fJY. 
(31) 
.1/2 
and C as the first row of û.Ó 
.X.D.r 
.s 
1 /? 
J 1 
J 1 
C = [1 0 ...0].õ.Ó ' .X.D = [a e !.a e 
n J 
n 
(32) 
In conclusion of this section we summarize the 
algorithm 
-* 
Step 1 : Construct the matrices H 
and H 
— £ 
pq 
pq 
(eq. 11,16) 
Step 2 : Compute SVD of H 
(eq. 20) 
Step 3 : Compute ×.Ë from (23), (24) via an 
eigenvalue decomposition. 
Step 4 : Determine all parameters from (3Ð, (32). 
COMPUTATIONAL CONSIDERATIONS 
We now consider some computational refinements. 
The singular value decomposition (20) and the com-
plex eigenvalue decomposition (24) can be computed 
using fully tested standard subroutines. 
In the special case of real exponentials and when 
square Hankelmatrices are used (p=q), the reali-
zed matrix T .A.T can be proven to be symmetric 
and definite positive, making it's eigenvalue de-
composition well conditioned [Wilkinson, 1965] 

402 
B. De Moor and J. Vandewalle 
In the other cases and using square Hankelmatrices, 
the realized matrix T"1 .A.T is symmetric when the 
absolute value of its entries are considered. 
The diagonal matrix (27) is computed as the com-
plex solution to the set of equations defined by 
(29) 
X.t 
z1/2.vt 
(33) 
Equating real and imaginary parts of (33) 
X = X + jX. 
t = t + jt. 
r 
J i 
X - X. 
r 
l 
X. 
1 
M- 1 
r 
t. 
I l l 
E1/2.V.t, 
(34) 
This set can be solved by another SVD. Despite the 
additional computational requirements, the condi-
tion of (34) can be monitored. 
Having calculated the matrices A (31) and C (32) 
the parameters a., 3., ã., ä. , are computed as 
follows 
A = diag (ë^ then â£ =|ë.| 
(35) 
[á, 
6i = arg (XL) 
j(5l 
j<Sn 
^6i 
e ... a e 
] then a.-la.e I 
n 
l ' l 
' 
j 6 i 
ä.= arg (a.e )(36) 
INFLUENCE OF THE NOISE : SUBOPTIMALITY 
So far, we only considered the case in which 
I . the data were known to be exactly represen-
table by a finite sum of elementary sig-
nals (1) 
and II. no noise corrupted the data. 
However, when the data are additively corrupted by 
noise with variance ó2, several effects that are 
difficult to separate, cause the method presented 
here to be suboptimal in the sense defined by (5). 
-If n elementary signals are involved causing the 
noiseless Hankelmatrix H__ to have n singular values 
to be non-equal to zero pq 
> On 
.£ ó > 0 
º ' "2 ' 
and (min (p,q) - n) to equal zero, the noise cor-
rupted version of this Hankelmatrix will have all 
its singular values O.different from zero. It is 
proven in [Anderson, 1963] that, asymptotically, as 
N—»oo , the eigenvalues of a perturbed covariance 
matrix behave like 
º, n 
for i = º, n 
X. = X. 4 
1 
1 
and for i = n + 1, min (p,q) 
Ë ^ 
2 
ë. = ó 
(37) 
and also some likelihood ratio criterions are pro-
posed in order to obtain the best rank estimation. 
A similar approach is followed in [Kung, 1981] 
where, due to the same criterion (37) the ambient 
space is divided into a n-dimensional signal sub-
space and a [min Cp,q) - n] - dimensional noise 
subspace. Another reliable rank critérium is deri-
ved [ De Moor, 1984] and [Staar, 1982]. Only those 
singular values are retained that satisfy 
ó. > / (R +1) max (p,q) . ó 
(38) 
where R is a user defined maximal minimal signal 
to noise ratio (SNR). 
The corresponding singular vectors form an estima-
te of the signal subspace. 
It is obvioiH that if one of the signal components 
falls below the level of accuracy of the date 
points it is completely unrecoverable. This is an 
ever present caveat in the problem of separating 
elementary signals. 
-If the numerical rank n is estimated, using one of 
the preceding criterions, the noise corrupted Han-
kelmatrix of full rank is approximated in a least 
squares sense by a matrix computed from the partial 
SVD (20), according to the theory developped in 
[Eckart, Young, 1936]. However, this matrix gene-
rically shows no longer the Hankelstructure and 
hence does not represent a n-th order linear system 
(6). Although this problem is not yet solved for 
the least squares case with Frobenius-norm, the ap-
proximation,obtained using the method here presen-
ted, can be shown to be close to optimal [Kung, 
1978,1981]. This is due to the well known insensitir 
vity of the singular vector subspaces to perturba-
tions in the data [Wilkinson, 1965]. 
-Although the singular value decomposition is well 
conditioned , the singular vectors and values dif-
fer from the original ones due to the noise. 
Usually, the effect on the singular vectors is neg-
lected, not only because of the insensitivity of 
the signal subspace but also because the effect of 
the perturbation is rather complicated, as is shown 
by a first order perturbation analysis of the SVD 
in [De Moor, 1984]. 
Concerning the perturbations of the singular values 
practical tests have shown that an improvement in 
the results (reduction in bias) is to be expected, 
when the partial SVD (20) is replaced by 
H 
= U, [Ó-S ].VÜ 
(39) 
pq 
where S is a diagonal matrix. 
S = diag ( ó) 
Here ó is an estimate of the supposed isotropic 
noise singular values. 
(maximum likehood estimate [ Anderson, 1963]/ 
arithmetic mean [Kumaresan, Tufts, 1982] ). 
We conclude that the noise causes the algorithm to 
be suboptimal but on the other hand, the partial 
SVD increases the signal to noise ratio dramatical-
ly because the date are projected into the signal 
subspace. The noise compensation procedure produces 
a reduction in bias of the estimates. 
NUMERICAL RESULTS 
In this section we present some striking numerical 
results that illustrate the power of the algorithm. 
I. Fitting a sum of exponentials. 
In [Wiscombe, Evans, 1977] it is reported that all 
known methods experience great difficulty in recon-
structing a particular exponential sum, given data 
sampled from that sum. The ability of our algorithm 
is however excellent in doing this job, even if the 
data are only accurate 
to 2 decimal digits (roun-
ded). 97 data points of the sum 
Ë . 
-0.01k 
Ë 0 
-0.1k 
Ë , -k 
y, = 0.1 e 
+ 0.3 e 
+ 0.6 e 
Vbl 
+ a2*
b2 
a3 b3 
were generated for k=0,96 and stored in 48x48 Han-
kelmatrices. 
5runs with the algorithm using unrounded data and 
data rounded to 5,4,3 and 2 decimal digits were per-
formed on an IBM 3033 machine with 24 bit mantissa 
and 7 bit exponent. Following quantities were com-
puted : coefficients and exponents x, relative 
deviation defined as 100. (x 
-x 
J) / 
estimate 
exact 
x 
., and the error measures 
exact 
max 
| y, 
o<k<96 
Ã 96 
-[ Ó [y -
- yk 
> k ] 
1/2 
96 

A Numerically Reliable Algorithm 
403 
96 
e x - (loo/go) ^ 
|y k-y k|/| yk| 
where y, denotes the estimate of the k-th value of 
the sum. 
The results are listed i n table 1-3 
TABLE 1 ACCURACY OF ESTIMATED PARAMETERS 
IN % 
TABLE 4 ACCURACY OF ESTIMATED PARA-
a i 
b, 
a ? 
b
? 
s 
b 3 
6D 
- 0 . 0 1 
-0.0001 
0.006 
0.0004 
-0.0006 
-0.0006 
5D 
- 0 . 0 2 
0.0003 
0.01 
0.0006 
0.001 
-0.0002 
4D 
- 0 . 3 
0.0004 
0.06 
0.002 
0.002 
0.0003 
3D 
- 0 . 4 
-0.001 
- 0 . 0 9 
0.01 
0.07 
0.1 
2D 
0 . 6 
- 0 . 0 0 8 
0.1 
- 0 . 0 7 
- 0 . 1 
- 0 . 3 
TABLE 2 ERROR MEASURES 
e 
rms 
et 
e 
max 
6D 
5D 
4D 
3D 
2D 
0.21E-06 0.23E-06 0.47E-06 0.39E-05 
0.35E-04 
0.24E-02 0.33E-02 0.41E-02 0.12E-01 
0.95E-01 
0.36E-05 0.38E-05 0.12E-04 0.17E-03 
0.26E-02 
TABLE 3 SINGULAR VALUES OF THE 48x48 
HANKELMATRICES 
°\ 
°? 
°3 
ó 4 
6D 
4.319 
0.890 
0.256 
M 0 ~ 5 
5D 
4.319 
0.890 
0.256 
-4 
MO 
4D 
4.319 
0.890 
0.256 
-4 
MO 
3D 
4.319 
0.890 
0.256 
- 3 
MO 
2D 
4.315 
0.889 
0.257 
-2 
MO 
Comparing 
the results listed in table 1 and 2 to 
those reported in [Wiscombe, Evans, 1977], it can 
be stated that the algorithm,we proposed, obtains 
the same level of accuracy. Table 3 confirms the 
fact that the singular values are quite insensiti-
ve 
to perturbation in the data. 
It's interesting to note that the choice of the 
Hankelmatrix dimensions is quite arbitrary as long 
as the minimal dimension is larger than the number 
n of elementary signals. Several tests on matrices 
with large varying dimensions, could detect no 
significant difference in the accuracy of the es-
timate. 
II. Sum of (damped) cosines. 
In order to illustrate the reliability, 91 data 
were sampled from the four term damped cosine se-
ries 
yk=21.(0.9)k cos(0.2k+0.7)+7.(0.8)kcos(0.1k+0.4) 
+38.(0.4)kcos(0.45k+0.8)+20.(0.9)kcos(0.3k+0.9) 
* 
k 
= Ó a. 3. cos ( y.k + ö.) 
i=l 
The data were stored in a 45X45 Hankelmatrix with 
singular spectrum 
aj=99.68; ó2=81.04; ó3=9.881; ó4=4.328; ó5=3.377; 
ó,=0.2933; ó =0.1941E-01; óï=0.1857E-01 
Ï 
/ 
Ï 
and the remaining ones all smaller then 0.15E-03. 
This leads to the obvious decision that the Hankel-
matrixrank must be 8. 
Full precision accuracy results are listed in 
Table 4 and 5 . 
\ t 
a. 
1 
h 
Y i 
ä. 
1 
1 
0.09 
- 0 . 0 0 3 
0.03 
- 0 . 4 
METERS 
2 
0 . 3 
- 0 . 0 8 
- 0 . 2 
1.1 
IN % 
3 
0.03 
0.005 
0.04 
0.05 
4 
0.1 
- 0 . 0 0 3 
- 0 . 0 1 
0.05 
The error measures are : 
e 
= 0.208E-04 
rms 
e % 
= 0.397 
e 
= 0.643E-03 
max 
These results are excellent,taking into considera-
tion that machineprecision corresponds to 6 à 7 
decimal digits. 
III. Even the identification of so-called "unsta-
ble" signals causes no problem as long as overflow 
is avoided. 
Sampled data from the sum : 
yk= 10.(l.l)k.cos(0.4k + 0.6) 
+ 7.(0.9)k cos(0.2k + 0.4) 
2
 
k 
= Ó a. 3. cos (ãË+ä.) 
i=l 
were additively corrupted with a pseudorandom whi-
te, zero mean, Gaussian noise sequence with vari-
ance ó2 = 1 . 
51 data samples were used and the Hankelmatrix di-
mensions were 25x25. 
The singular values are ó.=3434.5; ó =2108.5; 
ó3=18.511; ó4=15.214; ó5=6.8939; ó6=6.1657; ó?=... 
From ó,-ïç, the singular values reach a saturation 
level, indicating that the noise level is reached. 
The accuracy of the estimates, taking a rank esti-
mate of n=4, is listed in Table 5. 
TABLE 5 ACCURACY OF ESTIMATED PARA-
METERS IN % 
X 
a. 
1 
h 
¾1 
ä. 
1 
1 
0.005 
- 0 . 7 
0.005 
- 1 . 5 9 
2 
0.6 
2.3 
- 6 . 7 
3 3 . 0 
Remark that the errors for the second signal are 
larger than that of the first because the first 
signal contribution is larger than the second and 
this is less perturbed by the noise. 
The error measures are : 
e 
= 0.814 
rms 
e % 
= 5.178 
e 
=25.1 
max 
The last error being caused by the amplification 
of the misfitting due to the instability. 
IV. In the following example the effect of addi-
tive white noise of increasing variance is inves-
tigated, using the sum 
y = 10.(0.95)kcos(0.2k + 0.8) 
+ 12(0.85)kcos(0.4k + 0.3) 
41 data were generated and 20x20 Hankelmatrices 
were used. 
The signal-to-noise ratio SNR is defines as 
SNR = 10 log [( Ó 
y^ ) / ^ 1 ó 2 ] [dB] 
The error measures are listed in Table 6. 

404 
B. De Moor and J. Vandewalle 
TABLE 6 ERRORS AS A FUNCTION 
OF THE NOISE LEVEL 
0 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
2 
ó 
0 
0.0001 
0.0005 
0.001 
0.005 
0.01 
0.05 
0.1 
0.5 
1.0 
2.0 
5.0 
SNR(dB) 
-
54 
47 
44 
37 
34 
27 
24 
17 
14 
11 
7 
e rms 
0.45E-05 
0.68E-03 
0.15E-02 
0.22E-02 
0.47E-02 
0.67E-02 
0.15E-01 
0.20E-01 
0.49E-01 
0.72E-01 
0.84E-01 
0.12 
e% 
0.35E--02 
0.51E+00 
1.14 
1.6 
3.6 
5.1 
11.6 
16.7 
46.5 
71.2 
78.7 
80.0 
e 
max 
0.57E-04 
0.82E-02 
0.183-01 
0.26E-01 
0.57E-01 
0.80E-01 
0.18 
0.26 
0.67 
0.98 
1.36 
2.54 
To conclude this section, we now mention some of 
the software aspects. 
The program is written in FORTRAN. It's up to the 
user to choose between a fitting of the data 
I)by 
a sum of real exponentials II) by real cosines or 
III) a combination of the two. A list of the compu-
ted singular values is shown to let the user deci-
de whether the numerical rank is to be determined 
automatically (using one of the rank criterions) 
or not. We want to stress here that this is the 
only decision step in the algorithm in contrast 
with e.g. convergence and coalesce decision to be 
made in the method of [Wiscombe, Evans, 1977]. At 
a simple request intermediate results are printed 
together with all kinds of a posteriori indicators 
of the numerical reliability ( condition numbers, 
scaling factors, first-order perturbation analysis 
using the estimated Jacobian etc..) 
CONCLUSIONS 
A numerically reliable algorithm for the estima-
tion of the parameters of a complex sum of exponen-
tials is derived. The data must be equidistant and 
may be corrupted by noise. The method is based 
upon the balaced realization technique of a linear 
state space model. 
The key tool is the singular value decomposition. 
It guarantees a reliable estimation of the number 
of elementary signals and of the parameters. 
Although the noise causes the algorithm to be sub-
optimal, some practical examples prove the method 
to have a more than sufficient degree of accuracy. 
Further research will concentrate upon a detailed 
sensitivity analysis, extending the algorithm for 
complex valued data and taking into consideration 
a possible adaptive scheme based upon adaptive 
singular value decomposition techniques. 
REFERENCES 
Anderson, T.W. 
(1963). Asymptotic theory for 
principal component analysis. 
Ann. Math. 
Statist., 3^, 122-148 
Braess, D. 
(1970). 
Die Konstruktion der 
Tschebyscheff Approximierenden bei der Anpas-
sung mit exponentialsummen. 
Journal of ap-
proximation theory, _3, 261-273 
Cantor, D.G. and J.W. Evans 
(1970). 
On ap-
proximations by positive sums of powers. 
Siam J. Appl. Math., 18, 380. 
De Moor, B. 
(1984). 
First order perturbation 
analysis of the singular value decomposition. 
Int. report, ESAT lab.. K.U. Leuven 
De Moor, B., J^ Vandewalle ana J. Vanderschoot 
(1984). 
A filtering principle for vector sig-
nals based on the singular value decomposition 
Proc. Europ'. Conf. on Circuit Theory and 
Design (ECCTD) , 1985, Prague. S tcioniiUeii. 
De Prony, R. 
(1795). 
Essay expérimentale et a -
nalytique. J. EC. Polytech. Paris 1, 24-76 
Dongarra, J.J., J.R. Bunch, C.B. Moler, and G.W. 
Stewart 
(1979). Linpack User's guide. SIAM 
Philadelphia. 
Eckart, C. and G. Young 
(1936). The approxima-
tion of a matrix by another of lower rank. 
Psychometrika, vol 1, 211-218. 
Evans, J.W, W.B. Gragg, and R.J. Leveque 
(1980) 
On least squares exponential sum approximation 
with positive coefficients. Math. Comp., 34, 
203-212. 
Jacquez, J.A. 
(1972). 
Compartmental analysis 
in biology and médecine. Elsevier Publishing 
Company, Amsterdam 
Kay, S.M. and S.L. Marple 
(1981). 
Spectrum 
analysis, A modern perspective. Proc. IEEE, 
Vol. 69, no 11. 
Klema, V.C. and A.J. Laub 
(1980). 
The singular 
value decomposition : its computation and some 
applications. IEEE Trans. Aut. Contr., Vol AC-
25,2, 164-176. 
Kumaresan, R. and D.W. Tufts 
(1982). 
Estimating 
the parameters of exponentially damped sinus-
oids and pole-zero modelling in noise. IEEE. 
Trans, on acoustics, speech and signal proces-
sing, Vol ASSP-30,6. 
Kung, S.Y. 
(1978). A new identification and mo-
del reduction algorithm via singular value de-
composition. Proc. 12th Asilomar Conf. Cir-
cuits, Syst. Computer., Pacific Grove, Calif., 
705-714. 
Kung, S.Y. 
(1981). 
A Toeplitz approximation 
method and some applications. Int. Symp. on 
math, theory of networks and systems, Vol. 4, 
Santa Monica, California. 
Lanczos, C. 
(1956). 
Applied Analysis. Prentice 
Hall, Inc. Englewood Cliffs, N.J. 
Ruhe, A. and Per Ake Wedin 
(1980a) 
Algorithms 
for separable nonlinear least squares problems 
SIAM review , Vol. 22, 3_. 
Sidi Avram 
(1982). 
Interpolation at equidis-
tant points by a sum of exponential functions. 
Journal of approximation theory, 34, 194-210 
Staar, J. (1982). 
Concepts for reliable model-
ling of linear systems with application to on-
line identification of multivariable state 
space descriptions. PhD thesis, ESAT Lab, 
K.U. Leuven. 
Tufts, D.W. and R. Kumaresan 
(1982). Estimation 
of frequencies of multiple sinusoids: Making 
linear prediction perform like maximum like-
hood. Proc. IEEE, Vol. 70, 9_. 
Vandewalle, J., J. Staar, B. De Moor, J. Lauwers 
(1984). 
An adaptive singular value decompo-
sition algorithm and its use in adaptive rea-
lization. 6th. int. conf. anal, optim. of sys-
tems, 
June 1984, Nice. 
Wilkinson, J.H 
(1965). 
The algebraic eigenva-
lue problem. London, Oxford Univ. Press. 
Wiscombe, W.J. and J.W. Evans 
(1977) 
Exponen-
tial sum fitting of radiative transmission 
functions. Journal of Comput. Physics, 24, 
416-444. 
_ 
Zeiger, H.P. and A.J. Me E Wen 
(1974) 
Approxi-
mate linear realization of given dimension via 
Ho's algorithm. IEEE Trans. Aut. Control, 
Vol. AC-19, 153. 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
COMPUTER AIDED DESIGN OF DIGITAL 
CONTROLLERS FOR MULTIVARIABLE 
PROCESSES BASED ON SERIES EXPANSIONS 
APPROACH 
G. Obinata*, T. Nakamura* and H. Inooka** 
^Department of Mechanical Engineering for Production, Akita University, 
Akita, Japan 
**Department of Mechanical Engineering, Tohoku University, Sendai, Japan 
Abstract. This paper considers a computer aided design of a digital controller 
for multivariable system which realizes approximately an arbitrarily specified 
closed-loop response. The algorithm is derived on the relations of series 
expansions of pulse transfer function matrices; a linear equation is obtained 
for parameters of a controller. A computer program is developed based on the 
algorithm so as to allow a designer to assess quickly the effect of specifica-
tions on a resultant closed-loop response. For example, one can understand 
that a large control input is needed when a short settling time is specified. 
Some numerical examples are given. 
Keywords. Digital control; discrete time systems; control system synthesis; 
computer aided design; least squares approximations. 
Introduction 
Discrete control has advantages of flexibility 
over continuous control in implementing various 
algorithms for controlling a plant in a desired 
manner: one paticular advantage is the achieve-
ment of finite time settling control ( Ragazzini 
and Franclin, 1958). The authors ( Inooka, Obinata 
and Takeshima, 1983) proposed a digital control 
scheme for single-input and single-output linear 
processes based on series expansions of pulse 
transfer functions. Using the least square method, 
a linear equation is obtained for unknown param-
eters of the reduced-order controller. The digit-
al controller realizes approximately any closed-
loop response. This paper generalizes the results 
to a class of multi-variable systems and developes 
a computer program for computer aided design based 
on the proposed method. 
Merits of introducing computer aided design are 
as follows. First, one can see how the closed-
loop response approximates a specified response; 
the response may not resemble the specified 
response when a short settling time response is 
specified. It is particularly undesirable in 
multivariable control systems that the resultant 
feedback system cannot be decoupled even if 
decoupling control scheme is given as the closed-
loop specification. Second, one can assess easily 
the effect of the order of the controller on the 
response of the resultant closed-loop system. In 
general, a severe specification may be realized 
when the order of the controller is high. Third, 
one can see the behavior of the control input 
and the disturbance effect; it is frequently 
required for practical applications to avoid a 
larger control input and to reject the effect of 
a disturbance. Also, the coupling between the 
control loops can be checked easily. 
Mathematical operations included in the design 
procedure are simple and not iterative. These 
are several matrix additions and multiplications, 
and one matrix inversion. Because of the 
simplicity of the algorithm, the computational 
time required in a trial is very short and 
necessary memory size is small. We used a 
personal computer with a two-dimensional digit-
izer and a graphical display. Two examples are 
given to illustrate the design procedure and 
to examine the closed-loop system behavior under 
the finite time settling and decoupling control 
scheme. 
Relations of series expansions of 
pulse transfer function matrices 
Consider the output feedback system with a 
digital controller shown in Fig.l. It is 
assumed that the plant is stable and the input 
u and the output y are both r-dimensional 
vectors. Let us denote the pulse transfer 
function matrices of a process and a controller 
G(z) and C(z), respectively. These transfer 
function matrices can be expanded in negative 
power of z as follows: 
G(z) = Ó. GiZ"c 
C(z) 
& * ' 
(1) 
(2) 
where G^ and C* are both rxr coefficient ma-
trices. In many industrial processes G0 may 
be equal to zero matrix; therefore, we assume 
that G0= 0 in what follows. The open-loop puls 
transfer function matrix E(z) can be expanded 
as follows: 
E(z) * G(z)C(z) 
■i 
Å/æ'" 
(3) 
From equations (1), (2) and (3), the coefficient 
matrix: E^· can be expressed by the matrices:G^ 
405 

406 
G. Obinata, T. Nakamura and H. Inooka 
and C { ; t h a t 
i s , 
Åâ = 0 
Ei = Ó G: Ci.;, i = 1, 2, 3 , 
V, ~Γ*º 
(4) 
Expand the closed-loop pulse transfer function 
matrix as follows: 
W(z) ^ E(z){ I + E(z)}* 
= Ó wiZ"* 
(5) 
By the use of equation (3), the coefficient 
matrix :Wi is determined by the following 
iteration formula: 
where 
GC = E 
C = I C 0 C, ... C„] ' 
¸ = [ ÅΛ Et ... E w l ' 
Gi 0 
0 
0 
G 2 Gt 0 .. 0 
0 
G3 G2 Gt 
... 0 
Gt,fi G<n 
Ga Gi 
Guti G<m} 
G 3 G a 
(10) 
Wi = Ei 
E* - .Ó W: . E£ , 
2, 3, 
(6) 
Thus the coefficient matrices of the series 
expansions of the closed-loop pulse transfer 
function are expressed in terms of the coeffi-
cient matrices corresponding to open-loop 
elements. 
Remark 1 : It should be noted that k-th coeffi-
cient :W£ of the closed-loop system is determined 
only by E^ ( ilk ); in other words, W^ is 
determined by G^ and C^ ( ilk ). The same 
relations hold for the time moments ( Inooka, 
1976; Inooka and Obinata, 1982; Obinata, 1978 ). 
Design of a control system 
Let matrix sequence : { w^ ; i=l, 2, 3, 
) 
represent some desired unit pulse response. 
We consider the design problem that the matrix 
sequence of closed-loop system is matched 
approximately as long as required with the 
desired matrix sequence : { W^} . We formulate 
the following procedure for the computer aided 
design system. 
Step 1 : Specify the desirable pulse response 
:{ Wi; i=l, 2, 3 
m ) . If finite time settling 
and decoupling control scheme is adopted, the 
desired matrix sequence : { W^; i=l, 2, 3,....m} 
must satisfy the following condition: 
wf 1(i) 
0 
wrr( i ) 
1» 2 , 
(7) 
where the scalar sequence :{ wjj(i); i=l, 2, ...,m} 
satisfies the condition: Z w^(k) = 1.0 ( j= 1, 2, 
..., r ). Also specify the order of the control-
ler :n ( n< m-1 ) . 
Step 2: Solve the equation (6) for Ei ( i=l, 2, 
. . . , m ). The results are expressed by the 
following iteration formula: 
Ei = W< 
Ei = W; % V>· 
2, 3, 
(8) 
Step 3: Substitute E^ ( i=l, 2, ..., m ) into 
equation (4) and construct an equation for Ct· 
under the condition that 
C, = ... = Cm = C 
(9) 
Then the equation for C^ is reduced to 
Step 4: Solve the equation (10) by the method 
of least squares. The least squares solution 
C*= [ C0* C<* ... C* ] · is given by 
C*= ( G'G j" G'E 
Step 5: The controller is expressed as 
follows: 
(11) 
C(z) = C^ + C^z"1 + 
* -ml 
* . 
á,.,æ + ò,æ 
= ( ä,æ11* ... + cJ/( 
æ^ßæ - D ) 
(12) 
where 
C- = C* - C*,, i = 1, 2, ..., ç 
Step 6: Substitute equation (12) into equation 
(4), and then calculate { w/; i=l, 2, ..., m } 
using equation (6) and the control inputs. If 
the matrix sequence : { W^ } is not close suffi-
ciently to the specified sequence : [W^J, then 
increase the order of the controller and go 
back to Step 2. Also, if the amplitude of the 
control input exceeds the allowable range, then 
modify the specified pulse response to more 
generous one and go back to Step 1. 
Step 7: Calculate the continuous unit step 
response of the resultant closed-loop system 
with a hold on the control input, and examine 
the variation of the continuous output on the 
interval between each sampling instance. If 
the amplitude of the variation is larger than 
allowable one, then decrease the sampling time 
and go back to Step 1. 
Remark 2: In step 1, W^ should be specified 
long enough so as to have a stable closed-loop 
response even if W{ = 0 for large i. 
Remark 3: The constraint (9) is introduced in 
order to add the integral action to the control-
ler. The steady state error of the closed-loop 
system for the step reference input is zero 
under the integral action. 
Computer aided design system 
The computer aided design system based on the 
proposed design procedure is implemented into 
a personal computer ( NEC PC-9801 ). The 
computer system has a random access memory unit 
of 224K bytes capacity and a CPU unit with a 
16-bit microprocessor ( Intel 8086 ). The 

Design of Digital Controllers 
407 
peripheral equipments of the computer are a 
two-dimentional digitizer, a graphical display, 
and a plotter. The BASIC language is used to 
write the program for the computer aided design. 
Concerning memory requirements, the program 
area needs 15K bytes and the variable area is 
proportional to A m . In Step 1 of the design 
procedure, a designer enters the desirable 
specified response :{W<}, the order of the 
controller :n, and the number of the specified 
response :m using the keyboad of the console 
or the digitizer. The arithmetic computations 
in Step 2^Step 5 are done automatically, and 
then the informations of the resultant closed-
loop system are shown on the graphical display 
or are plotted out on the sheet. These 
informations are the sequence :{W^1 the discrete 
and continuous response for the step reference 
input, the control input, and the response for 
the step disturbance. Based on these informa-
tions, the designer judges whether a modifica-
tion of the specified response or the order of 
the controller is needed. 
Examples 
In this section two examples of finite time 
settling and decoupling control are given. 
Example 1.' Tomizuka ( 1979 ) has presented a 
example of level control problem with three 
tanks. The linearized state [ x, , x2 , x3 ]' 
around the equilibrium are modeled by the 
state equation: 
x 
-0.375 0.125 0 
0.25 -1.0 0.25 
0 
0.5 -1.5 
0.25 0 
0 
0.5 
0 
1 Cl 
(13) 
The unit step responses are plotted in Fig.2. 
In figures, the (i,j) means the i-th variable 
when only the j-th reference input is set to 
a unit step function. In design ( Step 1 ^ 
Step & ) , the plant was represented by a discrete 
time system which was obtained from equation 
(13) and an added zero-hold on the input; thus, 
the output of the continuous plant exactly 
matches the output of the discrete model under 
digital control at each sampling time. Let the 
sampling time be set to 1 second, and the desir-
able pulse response of the closed-system be: 
0.6 
0 
0 
0.6 
0.4 
0 
0.4 
(14) 
The matrix sequence gives a decoupling response 
with a settling time of 2 seconds. In order to 
examine the effect of the order n of the control-
ler while m is set to a constant value, we use 
the follwing index as the measure of approxima-
tion. 
(15) 
We may observe from Fig.3 that the response 
becomes more close to specified one as n is 
increased and the approximation is almost perfect 
for n£4. As n=6, the continuous outputs of plant 
and control inputs for unit step inputs are shown 
in Fig.4. The outputs show almost exactly the 
decoupling response with a settling time of 2 
seconds and show the small variations on the 
interval between sampling instances. But, the 
control input ( 1 , 1 ) has a large deviation 
from the steady state value. If the deviation 
is larger than the allowable value, it is neces-
sary to change the specified pulse response. 
Example 2: The system to be considered here 
consists of the automotive gas-turbin, the fuel 
system, and the nozzle actuator ( Patel and 
Munro, 1982 ). The system was modeled by the 
transfer function matrix: 
G(s) 
1 
0.806s + 0.264 
sa+ 1.15s + 0.202 
95s2+ 2.12s + 0.490 
s3+ 9.15s2+ 9.39s + 1.62 
-Cl5.0s+1.42) 
s3+ 12.8s2+ 13.6s +2.36 
7.14s2 + 25.8s + 9.35 
s4+ 20.8s3+ 116.4s2+111.6s + 18.8 
(16) 
The unit step responsess are plotted in Fig.5. 
The system with a zero-hold on the input was 
represented by the discrete time system in 
design procedures Step 1 ^Step 6. We set the 
sampling time to 1 second and specify the desira-
ble pulse response of the closed-loop system as 
follows: 
ÃÀ.Ï 
0] [0 
0*1 Ã 0 
0*1 
[ o i.oj^o 
oJ^L o 
oj, ... (17) 
The matrix sequence gives a decoupling response 
with a settling time of 1 second. The discrete 
responses of the closed-loop system for unit step 
inputs and the control inputs are shown in Fig.6 
( m=16, n=10 ). It is observed that the approxima-
tion is almost perfect. Under the same conditions, 
the continuous response of the closed-loop system 
for unit step input are shown in Fig.7. We may 
observe some undesirable variations on the inter-
val between sampling instances. In order to 
reduce this variations, we change the sampling 
time to 0.5 second and the desirable pulse re-
sponse to 
0.5 
0 
0 
0.5 
0.5 
0 
0 
0.5 
(18) 
The sequence gives the same finite time settling 
response as the former. The resultant responses 
are shown in Fig.8. These are almost satisfact-
ory for the finite time settling and decoupling 
control scheme. 
Conclusions 
The method of designing a digital controller 
for a multivariable process has been considered 
which realizes approximately a desired closed-
loop response. The unit pulse response of a 
controller is determined from a pulse response 
of a plant and a specified pulse response of a 
closed-loop system by use of a relation of series 
expansions. Using the least square method, a 
linear equation is obtained for unknown para-
meters of the reduced-order controller. Because 
the approximation is used in the design proce-
dure, we cannot ascertain in advance whether 
the rsultant feedback system achieve the desired 
response; therefore, a number of trials are 
necessary in general for the choice of the order 
of the controller and for the modification of 
the closed-loop specifications. A computer aided 
design system has been developed suitable for 
such a trial. Because of the simplicity of the 
proposed algorithm, the computational time 
required in a trial is very short. Using the 
computer aided design system, a designer can 
select appropreate design parameters in a short 
time. 

408 
G. Obinata, T. Nakamura and H. Inooka 
REFERENCES 
Inooka, H. (1976). Moments of an output feedback 
system. Electronics Letters, 12, 588-589. 
Inooka, H., and Obinata, G. (1982). Relations of 
moments in composite systems. IEEE Trans. 
Automatic Control, 27, 967-969. 
Inooka, H., and Obinata, G., and Takeshima, M. 
(1983). Design of a digital controllers based 
on series expansions of pulse transfer 
functions, ASME Journal of Dynamic Systems, 
Measurements, and Control. 105, 204-206. 
Reference 
input *? 
Obinata, G. (1978). Remarks on the time moments 
of composite systems. Electronics Letters, 
14, 509-511. 
Patel, R. V., and Munro, N. (1982). Multivariable 
system theory and design. Pergamon Press, 249. 
Ragazzini, J. R., and Franclin, G. F. (1958). 
Sampled-data control systems, McGraw-Hill, 
New York City. 
Tomizuka, M. (1979). A simple digital control 
scheme for a class of multi-input, multi-
output industrial processes. ASME Journal 
of Dynamic Systems, Measurements, and Control, 
101. 339-344. 
Disturbance 
Digital Control 
C(z) 
lier ^ O -
Output 
■5H Plant G(z) 
Fig.l Output feedback control system. 
8 . 2 . 
1.8r 
È.ÈÈ1 
8 
5 
18 
15 
28 
TIME (SEC.) 
8 . 8 L 
8 
5 
18 
15 
28 
TIME (SEC.) 
Fig.2 Unit step responses of three tank system. 
xlO"4 
- 4 
2 
3 
4 
5 
6 
2 
3 
4 
5 
6 
Fig.3 Measures of the approximation. 

Design of Digital Controllers 
409 
1.5é 
16 
TIME (SEC.) 
18 
15 
TIME (SEC.) 
cH 
3È 
2È 
18 
Ã 
_-" 
<1 • 1> 
C\J 
3 
-È . 2 
- 8 .4 
- 8 . 6 
- 8 . 8 
iH 
8 
- 1 8 
- 2 8 
Γ 
' 
:_ 
<2 
<1 
i> 1 
2> 
C\J 
3 
1.5 
1 .81 
8 . 5 
- 
1 
8 
<2 
5 
18 
15 
TIME (SEC.) 
2> 1 
2 8 
Fig.4 Outputs of continuous plant and control inputs for a unit step reference input (n=6, m=16). 
Fig.5 Unit 
8 
5 
18 
15 
28 
TIME (SEC.) 
8 
5 
18 
15 
28 
TIME (SEC.) 
Fig.6 Outputs for a unit step reference input (n=10, m=16). 

410 
G. Obinata, T. Nakamura and H. Inooka 
è.8 Ã 
0 
5 
18 
15 
20 
È 
TIME (SEC.) 
5 
10 
15 
TIME (SEC.) 
20 
5 
10 
15 
20 
TIME (SEC.) 
Fig.7 Outputs of continuous plant and control inputs for a unit step reference input (ΔΊ=1 s e c ) . 
1.5r 
1.5i 
è.8é-
5 
10 
15 
TIME (SEC.) 
0 
5 
10 
15 
20 
TIME (SEC.) 
Fig.8 Outputs of continuous plant and control inputs for a unit step reference input (4T=0.5 s e c ) . 

Copyright © IFAC Computer Aided Design in Control 
and Engineering Systems, Lyngby, Denmark, 1985 
THE INTERACTION VECTOR APPROACH TO 
THE DESIGN OF LINEAR MULTI-INPUT 
MULTI-OUTPUT CONTROL SYSTEMS 
P. M. Taylor 
Department of Electronic Engineering, University of Hull, Hull HU6 7RX, UK 
Abstract. Interaction vector displays were first presented as a means of indicating 
frequency dependent interactions in linear multivariable systems by the superposition 
of interaction vectors onto an inverse Nyquist array. The vectors can also be defined 
for a Nyquist array and show how each element qü(jco) of the open loop frequency resp-
onse is modified to h^iju)) when all loops are 
closed excepting loop i. It has been 
shown how the interaction vectors, or approximations to them, are modified by compens-
ation. Uncertainties in the frequency response of the system model are considered by 
surrounding each frequency evaluation of the uncompensated g^k(jüi) by an uncertainty 
circle in which the true g^k(jü)) must be. It is shown how each approximation interact-
ion vector can then be represented by a nominal vector surrounded by an offset circular 
bound. The designer can thereby assess the effects of uncertainties at all stages of 
the interactive design of compensation. The approach is illustrated with examples from 
the literature. 
Keywords. Computer-aided design, control system analysis, control system design, 
frequency response, multivariable control systems. 
INTRODUCTION 
The frequency domain techniques of Rosenbrock 
(1974) using the inverse Nyquist array with super-
imposed Gershgorin or Ostrowski bands retain sev-
eral desirable properties for the designer of 
linear multivariable feedback systems. Firstly 
the displays used are merely an aid, the designer is 
given complete freedom over choice of compensation. 
A simple framework is provided whereby the design-
er may assess stability and estimate the effects 
on closed loop performance of the injection of 
compensation into the open loop. Secondly, parti-
cularly if Nyquist arrays are used, the effects of 
uncertainties in the compensated open loop fre-
quency responses may be treated by simple enlarge-
ment of the Gershgorin discs. As these discs are 
based on only the moduli of off diagonal elements 
the designs will be inherently tolerant to phase 
variations in the off diagonal elements of the 
open loop compensated system. However, the re-
quirement for diagonal dominance can be an unnece-
ssarily restrictive condition, especially for 
systems having many inputs and outputs. The 
neglect of phase information means that any design 
must assume the worst case, that the presence of 
the off diagonal coupling terms has a destabilis-
ing influence. Clearly this need not be so. Also, 
as discussed by Doyle and Stein (1971), the resul-
tant designs may well be unacceptably sensitive to 
uncertainties in the frequency responses of the 
uncompensated plant. 
The interaction vector approach which may be 
based on Nyquist or inverse Nyquist arrays provid-
es a more precise design aid by fully utilising 
phase information to locate the hitjü)) loci, the 
open loop frequency response loci of loop i with 
all other loops closed, or the h. (joo) loci resp-
ectively. The approach is outlined briefly in the 
next section, followed by details of the treat-
ment of uncertainties. Programming aspects are 
described followed by illustrative examples and 
conclusions. 
INTERACTION VECTOR PLOTS 
Interaction vector plots were first introduced by 
Gray and Taylor (1979) to show the precise results 
on the open loop frequency response of any loop of 
adding in the interaction terms linking the loop 
to all others (closed). The system configuration 
is shown in Fig. 1. In the inverse case 
A 
A 
A 
h. = q.. + V ± 1 
(1) 
A 
>* 
A 
where 
V ± ± = "X V ± k 
(2) 
k=l,m 
A 
A 
and 
V i k = q i k y k /ã± 
(3) 
A 
Ë 
The terms V.. and V.. are termed the inverse inter-
ii 
lk 
action vectors and are displayed on the basic in-
verse Nyquist array as shown in Fig. 2 which also 
shows the Gershgorin bands for comparison. Three 
possible measures of interaction were suggested by 
Gray and Taylor (1979) each one of which has a 
graphical interpretation, as shown in Fig. 3. 
Similar displays and functionals may be obtained 
for the Nyquist arrays with 
h. = q ± 1 + V U 
where 
V. . = 
/ 
V.. 
ii 
<*j 
ik 
k=i,m 
k*i 
and 
*fi 
411 
(4) 
(5) 
(6) 

412 
P. M. Taylor 
It has been shown by Taylor and Hayton (1981) how 
the designer can estimate the effects of compens-
ation on the interaction vectors simultaneously 
with estimation of the effects on the basic ele-
ments of the displayed array. It was shown that 
for ease of estimation a convenient approximation 
and C2N are the nominal values of Cl and C2 and 
Ul and U2 are their fractional uncertainties. It 
is simple to show that the sum Cl + C2 will lie 
somewhere within the bounds given by a circle 
radius Ul|clN| +U2|C2N| centred on C1N + C2N. 
Multiplication is a more complex problem. 
V i k - q i k qki / 
(1 
^kk 
(7) 
may be used for the inverse Nyquist displays, 
giving 
*** ß <ïik ^kc / (1 + < W <8> 
k=l,m 
k?i 
Note that no approximation is involved for two in-
put two output systems. Exact and approximate 
interaction vectors are computed and may be dis-
played separately or simultaneously as desired. 
It has been found in practice so far that the ap-
proximation improves as the compensation proceeds 
and the second order interaction terms reduce. 
Similarly in the direct Nyquist case the following 
approximation may be made 
1 1 
*>» 
^ 
k=l,m 
ik qki / 
( 1 + «W 
(9) 
k?i 
Note that each element of 0 appears only once in 
the expansion, making compensation estimation 
easier and, as will be seen, simplifying sensitiv-
ity analysis. 
UNCERTAINTY BOUNDS ON THE INTERACTION 
VECTORS 
One of the primary uses of feedback ought to be to 
diminish effects of plant uncertainties. As 
Horowitz (1982) has highlighted it is only recently 
that plant uncertainties have been considered in a 
quantified way for multi-input multi-output 
systems. It is often not clear how measures of 
sensitivity actually relate to any physically 
measureable effects. The interaction vectors and 
functionals are measureable experimentally and 
become more attractive if some means can be found 
of computing their bounds when the plant model is 
uncertain. It will be assumed here that the plant 
uncertainties can be characterised by circular un-
certainty bounds around each complex value of 
g.. (ju)) for the set of ù under consideration, as 
^ik J 
shown in Fig. 4, Since h, may be approximated by 
h. ^ Ã q l i \ ^ 
qik %il{1 
+ <W 
(10) 
k=l,m 
k?i 
a method is needed for finding bounds on the un-
certainties for sums, products and quotients of 
complex numbers with circular uncertainty bounds. 
The problem is then essentially one of complex 
interval arithmetic with circular intervals as dis-
cussed in Alefeld and Herzberger (1983). The un-
certainties in each element of Q will be treated 
as being independent of each other. This may not 
be so in practice because of the particular struc-
ture of the plant and the technique will then give 
overly conservative bounds. When compensation is 
present the uncertainties in G will be reflected 
into uncertainties in Q and conservatism may be 
introduced because the uncertainties in each ele-
ment of Q will no longer be independent of each 
other if the compensators are not diagonal. 
The 
method now follows. 
Consider Cl and C2 normalised to lie inside circles 
centred on (1, jO) and of radii Ul and U2 respect-
ively. The product of Cl and C2 then lies within 
a cardioid formed by the outer values of the pro-
ducts of all points on the circumference of the Cl 
bounds with all points on the circumference of the 
C2 bounds as shown in Fig. 5. This cardioid must 
now be bounded by a circle ready for further oper-
ations. A program has therefore been written 
which finds the smallest circle enclosing the 
cardioid for a range of discrete values of Ul and 
U2 lying between 0 and 1. This program, run once 
only, stores the results in a data file. The 
interaction vector program in the CAD suite, reads 
in this data file as a lookup table. When complex 
interval multiplication is required the two com-
plex numbers are normalised, the result (new 
centre and radius) is interpolated from the lookup 
table and then denormalised. 
If the quotient C1/C2 is required it is merely 
necessary to normalise Cl and C2, invert C2 and 
multiply as above. Inversion of the circle bound-
ing C2 results in an offset circle bounding 1/C2. 
If U2 > 1 a warning is given as points inside the 
C2 circle are then mapped outside the 1/C2 circle 
and the uncertainty area can then cover most of 
the complex plane. 
PROGRAMMING ASPECTS 
The interaction vector technique is computationally 
simple and rapid. In the inverse case with all 
loops closed 
y = Ar 
rA 
7-l 
where 
A = [0 + Ij 
(11) 
(12) 
if say r. = 1 and r. = o for all k = i 
1 
l 
k 
then 
V^i 
= aki / aii 
(13) 
This ratio will also hold when all loops are 
closed excepting loop i. The exact inverse inter-
action vectors can now be calculated from equations 
2 and 3. The approximate vectors merely require 
knowledge of the elements of Q (jco). In the 
direct Nyquist case if A = [ Q + I ] - 1 then 
e,/e. = a, ./a... Thus the same software can be 
used in both cases by interchanging 0 with Q as 
required. When compensation is present G is inter-
changed with G, K with L and L with K. The largest 
computational burden is the complex matrix invers-
ion in equation 12 which is performed for each 
frequency value used. 
The CAD programs are written in FORTRAN IV as part 
of the Hull Computer Aided Control System Design 
Suite (Taylor, 1984), which runs on a PDPll/34 
running under RSXM V3.2. The interaction vectors 
are requested by the user as alternatives to 
Gershgorin or Ostrowski bands after display of the 
basic Nyquist or inverse Nyquist array. Colour 
graphics has proven useful particularly when the 
interaction vectors are closely aligned with the 
basic array curves. 
EXAMPLES 
Let uncertain complex numbers Cl and C2 lie any-
where within circles centred on ClN and C2N and 
with radii Ul|clN| and U2|C2N|respectively. ClN 
Figure 2 shows the inverse Nyquist array of the 
illustrative example of Gray and Taylor (1979) 
with interaction vectors and Gershgorin bands 

The Interaction Vector Approach 
413 
superimposed. In this case 
20 
5 
G(s) = s(s+2) 
s(s+1) 
10 
20 
s(s+2) 
s(s+1) 
(14) 
The stabilising effect of the interaction is 
clearly seen. Figure 6 illustrates the effects 
of uncertainties in G(jo)) with uncertainty frac-
tions u. . =0.1 for all i and j. The closed loop 
system will remain stable,although with poor phase 
margins. 
The example shown in Fig. 
(1979) and has 
G(s) 
9 
s+1 
- 8 
-10 
s+1 
9 
s+2 
s+2 
7 is due to Rekasius 
(15) 
This is a highly interactive system, nominally 
completely decoupled by a precompensator 
9 
loi 
K(s) = [: "] 
(16) 
However this compensator is effectively cancell-
ing out one interaction signal by deliberately 
adding another out of phase. It is not surpris-
ing that the resultant system is extremely sensit-
ive to any variations in G(jü) about the nominal 
values. The interaction vector plot of Fig. 8 
shows vectors of zero length but very large un-
certainty circles. 
CONCLUSIONS 
The interaction vector displays give the designer 
quantitative and visual information about fre-
quency dependent loop interactions at all stages 
during interactive design of compensation based 
on a Nyquist or inverse Nyquist array. The use 
of complex interval arithmatic allows the vectors 
to be bounded when the elements of the model 
frequency response G(jo)) have unstructured 
uncertainties defined as lying within discs 
surrounding each g., (jio) frequency point. The 
designer can thereby detect when compensation wiU. 
result in a closed loop system sensitive to uncert-
ainties in the system model. The size of the 
displayed bounds is expressible in terms of bounds 
of measureable signals. The use of approximate 
interaction vectors allows the technique to be 
extended easily to systems with more than two in-
puts and outputs although further study is needed 
to determine more rigorously the resultant errors 
in the uncertainty analysis. 
The second example given in the paper shows an 
extreme case of bad compensation using cancell-
ation of large interacting signals which results 
in severe sensitivity problems. Such cancella-
tion is in essence done by all decoupling or par-
tial decoupling methods and the designer may be 
unaware of robustness problems unless the sensit-
ivities are checked by techniques such as those 
above. 
REFERENCES 
Gray, J.O., and P.M. Taylor (1979) Frequency domain 
functionals for the assessment of interaction 
effects in multivariable feedback systems. 
Proc 
IF AC Symp. on Computer Aided Design of 
Control 
Systems, 
Zurich, pp 81-86. 
Horowitz, I. (1982). Quantitative feedback theory. 
IEE Proc, 
Vol 129, Pt.D No.6, pp 215-226 
Rosenbrock, H.H. (1974). Computer Aided 
Control 
System 
Design 
Academic Press, London 
Taylor, P.M. (1984). The Hull control system 
design suite. Proc, IMC Workshop on Computer 
Aided Control 
System Design, Brighton, pp 73-78 
Taylor, P.M., and G. Hayton (1981). The manipul-
ation of interaction effects in multivariable 
feedback systems. Proc, IPAC 81, 3rd World 
Congress, 
Kyoto, Vol. 4, pp 6-11 
Alefeld, G., and J. Herzberger (1983). 
Intro-
duction 
to Interval 
Computations, 
Academic 
Press, London 
Doyle, J.C., and G. Stein (1981). Multivariable 
feedback design: concepts for a classical/ 
modern synthesis. 
IEEE Trans, 
AC-26 No. 1 
pp 4-16. 

414 
P. M. Taylor 
?(s) 
*
^ 
Λ * ' k(s) 
W 
UO 
5« 
Λ 
Q » = L(s)&(?)kG0 , ÏËÏ-- Q(0 
Fig. 1. System configuration 
Fig. 2. Nyquist Array with Gershgorin 
bands and interaction vectors 
for the example of Gray and 
Taylor (1974) 

The Interaction Vector Approach 
415 
T 
- v* = 1* 
l·* 
3« 
u>V\eA loop ί 
"S 
(uk^ 
\ 
-1 
X3 -_ I 4 /(<) 
. aw. 
Fig. 3. Graphical interpretation of interaction functionals 
* 
3 
^ 
Fig. 4. Fractional uncertainty in an element of G(jœ) 

416 
P. M. Taylor 
Fig. 5. Nyquist array with interaction vectors and uncertainty circles 
for the example of Gray and Taylor (1979) with 0.1 fractional 
uncertainty in all elements of G(ju)) 
Fig. 6. Smallest circle enclosing cardoid 
formed by multiplying two normal-
ised complex numbers with fracti-
onal uncertainties 0.3 and 0.7 
Fig. 7. Nyquist array with interaction vectors 
and uncertainty circles for the exam-
ple of Rekasius (1979) 

AUTHOR INDEX 
Aaltonen, M. 179, 233 
Abd El Latif, A. K. 387 
Abe, S. 277 
Araki, M. 59 
Athans, M. 1 
Atherton, D. P. 9, 133 
Barraud, A. 139 
Bingulac, S. P. 145 
Birdwell, J. D. 1 
Blomberg, H. 227 
Bomholt, L. 109 
Borzemski, L. 261 
Bouzou, E. 321 
Cassandras, C. G. 381 
Christov, N. D. 167 
Cockett, J. R. B. 1 
Cuno, B. 325 
De Keyser, R. 215 
De Moor, B. 399 
Delebecque, F. 39 
Desoyer, K. 23 
Domanski, P. 331 
Domeisen, H. 191 
Dorling, C. M. 353 
Dorn, B. 191 
El-Midany, T. T. 387 
Eldeib, H. K. 151 
Floyd, M. A. 9 
Fonnesbech, N. 337 
Frederick, D. K. 47 
Furuta, K. 19 
Ganev, P. G. 209 
Garipov, E. M. 209 
Gentil, S. 139 
Göhner, P. 121 
Goodfellow, S. D. 43, 87 
Gorez, R. 295 
Goucem, A. 133 
Gray, J. 0. 97 
Gregory, P. C. 377 
Haarla, J. 243 
Hatfield, L. 1 
Heilbronn, B. 93 
Heinonen, R. 243 
Heller, M. R. 283 
Heller, R. 1 
Hensel, H. 9, 155, 299 
Hogg, B. W. 249 
Hsiao-Ming, H. 237 
Hvelplund, H. 127 
Inooka, H. 405 
Isermann, R. 299 
Jacic, L. A. 305 
Jacobs, 0. L. R. 75 
Jäker, K. 161 
James, J. R. 47 
Jorgensen, L. B. 337 
Kalaikov, I. G. 209 
Karba, R. 173 
Kasper, R. 161 
King, R. A. 97 
Knafel, A. 365 
Kolbeinsen, L. 343 
Konstantinov, M. M. 167 
Kopacek, P. 23 
Kopytowski, J. 331 
Koskinen, K. 311 
Kujszczyk, S. 267 
Kulczycki, J. 271 
Kümmel, M. 337 
Laggoune, N. 197 
Laporte, P. 139 
Laub, A. J. 1 
Lebiediewa, S. 261 
Lehmann, S. K. 203 
Li-Zhang, F. 185 
Lightbody, J. B. 393 
Lückel, J. 161 
Madsen, R. F. 337 
Madzarov, N. E. 209 
Makamura, Y. 277 
Mansour, M. 9, 27 
Marczynski, P. 331 
Marganovic, D. 255 
Marin, R. 221 
Matko, D. 173 
McGoldrick, P. F. 393 
McNamara, 0. P. 133 
Messely, M. 215 
Morrell, D. G. 249 
Munro, N. 43, 87 
Nakamura, T. 405 
Obinata, G. 405 
O'Brien, C. 393 
Oit, M. 81 
Ollero, A. 221 
Perkins, W. R. 145 
Pesenjanski, I. 255 
Petkov, P. Hr. 167 
Petrovacki, D. 255 
Pichot, D. 93 
Pohjolainen, S. 179 
Raud, R. 81 
Rimvall, M. 9, 27, 109 
Rochelle, R. W. 1 
Rusby, N. A. 393 
Schaufelberger, W. 27 
Schmid, Chr. 359 
Sega, M. 173 
417 

418 
Author Index 
Shah, J. M. 
289 
Shuling, G. 
115 
Shumann, R. 
315 
Singh, M. G. 9 
Sipari, P. 
227 
Soeberg, H. 
337 
Steer, S. 39 
Stieber, M. E. 359 
Stojic, R. 
371 
Strmcnik, S. 
173 
Studer, S. 
191 
Sulzer, T. 
191 
Swidenbank, E. 249 
Swiniarski, R. 
365 
Takeda, S. 277 
Tamm, B. C. 81 
Tanttu, J. 
179, 233 
Taylor, J, 
Taylor, P. 
Troch, I, 
Tysso, A. 
H. 47, 53 
M. 
411 
23 
243 
Unbehauen, H. 33 
Vain, J. 
81 
van Amerongen, J. 
349 
van Cauwenberghe, A. 
215 
van den Boom, A. J. W. 
65 
van den Bosch, P. P. J. 
65, 115, 349 
Vandewalle, J. 
399 
Vukobratovic, M. 
371 
Wadey, M. D. 133 
West, P. J. 
145 
Whalley, R. 
377 
Ylinen, R. 
227 
Zabicki, M. 
271 
Zhen-Yu, C. 69, 185 
Zhi-Ming, W. 
237 
Zinober, A. S. I. 353 

SUBJECT INDEX 
Ada, 109 
Adaptive control, 365 
Artificial intelligence, 1, 47, 151, 
331 
Automata theory, 277 
Automation design, 243 
industrial automation, 69 
Bilinear control, 197 
CAD/CAM systems, 387 
Canonical forms, 167 
Chemical industry, 331 
Columns, 393 
Command-driven interface, 109 
Computational methods, 337, 399 
Computer-aided circuit design, 311 
Computer-aided instruction, 27, 109 
Computer-aided logic design, 305 
Computer-aided manufacture, 393 
Computer applications, 75, 295, 321 
Computer architecture, 47 
Computer control, 23, 65, 75, 249, 321 
Computer evaluation, 115 
Computer graphics, 43, 87, 93, 115, 
311, 337 
Computer hardware, 115 
Computer languages, 115 
application orientated, 127 
natural languages, 1 
Computer programming, 121, 145 
heuristic programming, 271, 331 
Computer software, 15, 43, 87, 121, 
173, 179, 321, 393 
development, 81 
engineering, 43, 87 
interpreter-based, 155 
packages, 33, 359 
Continous systems, 215 
Control alogorithm design, 81 
Control education, 27 
Control engineering, 39, 75, 295 
computer applications, 65, 115, 145, 
349 
Control systems, 69 
analysis, 33, 127, 139, 151, 215, 
227, 277, 411 
design, 59, 81, 371, 411 
synthesis, 33, 47, 53, 127, 145, 
161, 221, 227, 405 
Control theory, 173 
Controllers, 277, 289 
Data acquisition, 249 
Data handling, 261, 311, 343 
Database, 93, 243, 261 
Decentralized control, 203, 299, 371 
Decision analysis, 151 
Decision making, 9 
Decomposition-aggregation principle, 
371 
Decoupling, 203, 237, 377 
Describing functions, 53, 133 
Digital control, 19, 305, 405 
direct, 155 
Digital system, 133, 277, 305 
Discrete event systems, 381 
Discrete time systems, 405 
Distributed computer control, 289 
Distributed parameter systems, 179 
Distributed processing, 43 
Dynamic response, 377 
Economics, 331 
Education, 19, 23 
Eigenvalue sensitivity, 203 
Electric power distribution, 203, 267 
Electrical engineering curriculum, 33 
Electrical system, 283 
Energy control, 295 
Expert system, 1, 47 
Finite automata, 127, 305 
Flight control, 371 
Fuzzy set theory, 221 
Frequency response, 411 
Graphical data interpreter, 97 
Harmonic analysis, 399 
Hazards and race conditions, 305 
Heat systems, 295 
Heuristic programming, 271, 331 
Hierarchical systems, 221 
Identification, 65, 75, 139, 209, 215, 
249, 299 
Industrial automation, 69 
Industrial control, 305, 315, 321 
Instrumentation engineering, 311 
Integrated planning programs, 311 
Interactive systems, 173, 191, 209 
Interpreter based software system, 155 
Iterative methods, 215 
Japanese industries, 59 
Least-squares approximations, 215, 405 
Limit cycles, 133 
Linear systems, 1, 203, 215, 227 
continous-time and discrete-time, 209 
Man-machine interface, 27, 109 
Man-machine systems, 43, 87, 93, 97, 
221, 337 
Manufacturing processes, 393 
Materials handling, 381 
Menu technic, 191 
Metallurgical industries, 343 
Modelling, 127, 139, 215, 243, 271, 
295, 343 
Multicriteria optimization, 221 
Multivariable control, 19 
Multivariable control systems, 75, 
167, 227, 353, 411 
discrete-time, 155 
419 

420 
Subject Index 
Multivariable robust controller 
design, 325 
Multivariable systems, 237, 377 
Natural languages, 1 
Nonlinear systems, 295 
control systems, 53, 75, 133, 353, 
371 
Nuclear plants, 93 
Numerical computations, 39 
Numerical methods, 399 
Observers, 197, 227 
Optimal control, 161, 197, 221, 377 
Optimal systems, 167 
Optimisation, 161, 271 
Parallel processing, 121 
Parameter estimation, 155, 209, 215, 
343, 399 
Parameter uncertainty, 325 
Perturbation techniques, 381 
Petri nets, 277 
PID control, 155, 179 
Pole assignment, 167 
Polynomials, 227 
Power distribution, 271 
Power systems planning, 261 
Process control, 93, 121, 127, 315, 321 
Production planning and scheduling, 9 
Program package, 359 
Programming languages, 121, 145 
Project management, 121 
Prototyping, 127 
Real time, 191 
application, 33 
Relay control, 133 
Robots, 23 
Robust pole-placement, 353 
Robustness, 237 
Routing strategies, 381 
Sampled data systems, 133, 215 
Self-tuning control, 185 
Sensitivity analysis, 161 
Sequence control, 277, 305 
Ships, 349, 377 
Signal flow diagram, 191 
Signal processing, 399 
Simulation, 179, 191, 255 
Singular value decomposition, 399 
Sliding states, 133, 353 
Spacecraft, 359 
Specification, 121 
Spectral analysis, 399 
Stability, 237 
Standardization, 15 
State estimation, 365 
State space methods, 155, 399 
Steam generators, 255 
Steering machine, 349 
Stochastic systems, 215 
Structure generation, 331 
Student environments, 27 
Suboptimality, 371 
Sugar industry, 337 
Symbolic computation, 233 
System analysis, 65 
System presentations, 173 
Thickness control system, 185 
Time-varying systems, 197 
Variable structure systems, 353 
Vector performance criterion, 325 
Vibration control, 161 

IF AC Publications, Published and Forthcoming volumes 
AKASHI: Control Science and Technology for the Progress of Society, 
7 Volumes 
ALONSO-CONCHEIRO: Real Time Digital Control Applications 
ATHERTON: Multivariable Technological Systems 
BABARY & LE LETTY: Control of Distributed Parameter Systems (1982) 
BANKS & PRITCHARD: Control of Distributed Parameter Systems 
(1977) 
BARKER 8c YOUNG: Identification and Systems Parameter Estimation 
(1985) 
BASAR 8c PAU: Dynamic Modelling and Control of National Economies 
(1983) 
BAYLIS: Safety of Computer Control Systems (1983) 
BEKEY 8c SARIDIS: Identification and System Parameter Estimation 
(1982) 
BINDER & PERRET: Components and Instruments for Distributed 
Computer Control Systems 
BULL: Real Time Programming (1983) 
BULL & WILLIAMS: Real Time Programming (1985) 
CAMPBELL: Control Aspects of Prosthetics and Orthotics 
Van CAUWENBERGHE: Instrumentation and Automation in the 
Paper, Rubber, Plastics and Polymerisation Industries (1980) (1983) 
CHESTNUT, GENSER, KOPACEK 8c WIERZBICKI: Supplemental 
Ways for Improving International Stability 
CHRETIEN: Automatic Control in Space (1985) 
CICHOCKI & STRASZAK: Systems Analysis Applications to Complex 
Programs 
CRONHJORT: Real Time Programming (1978) 
CUENOD: Computer Aided Design of Control Systems 
DA CUNHA: Planning and Operation of Electric Energy Systems 
De GIORGIO 8c ROVEDA: Criteria for Selecting Appropriate 
Technologies under Different Cultural, Technical and Social 
Conditions 
DI PILLO: Control Applications of Nonlinear Programming and 
Optimization 
DUBUISSON: Information and Systems 
ELLIS: Control Problems and Devices in Manufacturing Technology 
(1980) 
FERRATE 8c PUENTE: Software for Computer Control (1982) 
FLEISSNER: Systems Approach to Appropriate Technology Transfer 
GELLIE, FERRATE 8c BASANEZ: Robot Control "SYROCO '85" 
GELLIE & TA VAST: Distributed Computer Control Systems (1982) 
GERTLER 8c KEVICZKY: A Bridge Between Control Science and 
Technology, 6 Volumes 
GHONAIMY: Systems Approach for Development (1977) 
HAASE: Real Time Programming (1980) 
HAÏMES & KINDLER: Water and Related Land Resource Systems 
HALME: Modelling and Control of Biotechnical Processes 
HARDT: Information Control Problems in Manufacturing Technology 
(1982) 
HARRISON: Distributed Computer Control Systems (1979) 
HASEGAWA: Real Time Programming (1981) 
HASEGAWA & INOUE: Urban, Regional and National Planning— 
Environmental Aspects 
HERBST: Automatic Control in Power Generation Distribution and 
Protection 
ISERMANN: Identification and System Parameter Estimation (1979) 
ISERMANN & KALTENECKER: Digital Computer Applications to 
Process Control 
JANSSEN, PAU 8c STRASZAK: Dynamic Modelling and Control of 
National Economies (1980) 
JOHANNSEN 8c RIJNSDORP: Analysis, Design, and Evaluation of 
Man-Machine Systems 
JOHNSON: Modelling and Control of Biotechnological Processes 
KLAMT & LAUBER: Control in Transportation Systems 
KOTOB: Automatic Control in Petroleum, Petrochemical and 
Desalination Industries 
LANDAU: Adaptive Systems in Control and Signal Processing 
LARSEN 8c HANSEN: Computer Aided Design in Control and 
Engineering Systems 
LAUBER: Safety of Computer Control Systems (1979) 
LEININGER: Computer Aided Design of Multivariable Technological 
Systems 
LEONHARD: Control in Power Electronics and Electrical Drives (1977) 
LESKIEWICZ 8c ZAREMBA: Pneumatic and Hydraulic Components 
and Instruments in Automatic Control 
MAFFEZZONI: Modelling and Control of Electric Power Plants 
MAHALANABIS: Theory and Application of Digital Control 
MANCINI, JOHANNSEN & MARTENSSON: Analysis, Design and 
Evaluation of Man-Machine Systems (1985) 
MARTIN: Design of Work in Automated Manufacturing Systems 
MILLER: Distributed Computer Control Systems (1981) 
MUNDAY: Automatic Control in Space (1979) 
NAJIM 8c ABDEL-FATTAH: Systems Approach for Development (1980) 
NIEMI: A Link Between Science and Applications of Automatic Control, 
4 Volumes 
NORRIE 8c TURNER: Automation for Mineral Resource Development 
NOVAK: Software for Computer Control (1979) 
O'SHEA 8c POLIS: Automation in Mining, Mineral and Metal Processing 
(1980) 
OSHIMA: Information Control Problems in Manufacturing Technology 
(1977) 
PAUL: Digital Computer Applications to Process Control (1985) 
PONOMARYOV: Artificial Intelligence 
QUIRK: Safety of Computer Control Systems (1985) 
RAUCH: Applications of Nonlinear Programming to Optimization and 
Control 
RAUCH: Control Applications of Nonlinear Programming 
REMBOLD: Information Control Problems in Manufacturing 
Technology (1979) 
RIJNSDORP: Case Studies in Automation related to Humanization of 
Work 
RIJNSDORP, PLOMP 8c MÖLLER: Training for Tomorrow — 
Educational Aspects of Computerized Automation 
RODD: Distributed Computer Control Systems (1983) 
SANCHEZ: Fuzzy Information, Knowledge Representation and Decision 
Analysis 
SAWARAGI 8c AKASHI: Environmental Systems Planning, Design and 
Control 
SINGH & TITLI: Control and Management of Integrated Industrial 
Complexes 
SKELTON & OWENS: Model Error Concepts and Compensation 
SMEDEMA: Real Time Programming (1977) 
STRASZAK: Large Scale Systems: Theory and Applications (1983) 
SUBRAMANYAM: Computer Applications in Large Scale Power 
Systems 
SUSKI: Distributed Computer Control Systems (1985) 
TITLI & SINGH: Large Scale Systems: Theory and Applications (1980) 
UNBEHAUEN: Adaptive Control of Chemical Processes 
VALADARES TAVARES 8c DA SILVA: Systems Analysis Applied to 
Water and Related Land Resources 
WESTERLUND: Automation in Mining, Mineral and Metal Processing 
(1983) 
van WOERKOM: Automatic Control in Space (1982) 
YANG JIACHI: Control Science and Technology for Development 
ZWICKY: Control in Power Electronics and Electrical Drives (1983) 

