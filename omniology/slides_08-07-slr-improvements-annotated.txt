Alex Aiken
Compilers
SLR Improvements

Alex Aiken
SLR Improvements
• Rerunning the viable prefixes automaton on the 
stack at each step is wasteful
– Most of the work is repeated

Alex Aiken
SLR Improvements
• Remember the state of the automaton on each prefix 
of the stack
• Change stack to contain pairs
Symbol, DFA State 

Alex Aiken
SLR Improvements
• For a stack
sym1, state1 . . . symn, staten 
staten is the final state of the DFA on sym1 … symn
• Detail: The bottom of the stack is any,startwhere
– any is any dummy symbol
– start is the start state of the DFA

Alex Aiken
SLR Improvements
• Define goto[i,A] = j if statei A statej
• goto is just the transition function of the DFA
– One of two parsing tables

Alex Aiken
SLR Improvements
• Shift x
– Push a, xon the stack 
– a is current input
– x is a DFA state
• Reduce X a
– As before
• Accept
• Error

Alex Aiken
SLR Improvements
For each state si and terminal a
– If si has item X a.ab and goto[i,a] = j then 
action[i,a] = shift j
– If si has item X a. and a Follow(X) and X S’ then 
action[i,a] = reduce X a
– If si has item S’ S. then action[i,$] = accept
– Otherwise, action[i,a] = error

Alex Aiken
SLR Improvements
Let I = w$ be initial input
Let j = 0
Let DFA state 1 have item S’ .S
Let stack = dummy, 1 
repeat
case action[top_state(stack),I[j]] of
shift k:  push I[j++], k 
reduce X A: 
pop |A| pairs, 
push X, goto[top_state(stack),X]
accept: halt normally
error: halt and report error

Alex Aiken
SLR Improvements
• Note that the algorithm uses only the DFA states and 
the input
– The stack symbols are never used!
• However, we still need the symbols for semantic 
actions

Alex Aiken
SLR Improvements
• Some common constructs are not SLR(1)
• LR(1) is more powerful
– Build lookahead into the items
– An LR(1) item is a pair: LR(0) item x lookahead
– [Tint * T, $] means
• After seeing Tint * T reduce if lookahead is $
– More accurate than just using follow sets
– Take a look at the LR(1) automaton for your parser!

