CONTROL SYSTEMS
ENGINEERING
Seventh Edition
Norman S. Nise


Antenna Azimuth Position
Control System
Layout
Motor
i(t)
Desired
azimuth angle
input
Differential amplifier
and power amplifier
Potentiometer
o(t)
Potentiometer
Azimuth 
angle
output
Antenna
θ
θ
Schematic
JL   kg-m2
Ja    kg-m2
Da   N-m s/rad
Kb   V-s/rad
Kt    N-m/A
n-turn potentiometer
DL N-m-s/rad
vi(t)
vo(t)
K
K1
s + a
+
–
vp(t)
ea(t)
θm(t)
θi(t)
θo(t)
Ra
Motor
Fixed
field
–V
+V
Power
amplifier
Differential
preamplifier
n-turn potentiometer
Armature
+V
–V
N1
Gear
N2
Gear
N3
Gear

Block Diagram
Potentiometer
Preamplifier
Power
amplifier
Motor
and load
Gears
Desired
azimuth
angle
Azimuth
angle
θi(s)
θo(s)
s + a
K1
K
Kg
s(s+am)
K1
Potentiometer
Kpot
+
–
θm(s)
Ea(s)
Ve(s)
Vi(s)
Vp(s)
Kpot
Schematic Parameters
Parameter
Conﬁguration 1
Conﬁguration 2
Conﬁguration 3
V
10
10
10
n
10
1
1
K
—
—
—
K1
100
150
100
a
100
150
100
Ra
8
5
5
Ja
0.02
0.05
0.05
Da
0.01
0.01
0.01
Kb
0.5
1
1
Kt
0.5
1
1
N1
25
50
50
N2
250
250
250
N3
250
250
250
JL
1
5
5
DL
1
3
3
Block Diagram Parameters
Parameter
Conﬁguration 1
Conﬁguration 2
Conﬁguration 3
Kpot
0.318
K
—
K1
100
a
100
Km
2.083
am
1.71
Kg
0.1
Note: reader may ﬁll in Conﬁguration 2 and Conﬁguration 3 columns after completing
the antenna control Case Study challenge problems in Chapters 2 and 10, respectively.



CONTROL SYSTEMS ENGINEERING
Seventh Edition
Norman S. Nise
California State Polytechnic University, Pomona

To my wife, Ellen; sons, Benjamin and Alan; and daughter, Sharon, and their families.
Vice President & Executive Publisher
Don Fowley
Executive Editor
Dan Sayre
Editorial Assistant
Francesca Baratta
Content Manager
Ellinor Wagner
Executive Marketing Manager
Christopher Ruel
Design Director
Harry Nolan
Senior Designer
Wendy Lai
Photo Editor
Elizabeth Blomster
Senior Product Designer
Jenny Welter
Associate Editor
Wendy Ashenberg
Cover Photo Credit
Spencer Platt/Getty Images
This book was set in 10/12 pt Lato Black by Thomson Digital and printed and bound by Courier Kendallville. The
cover was printed by Courier Kendallville.
The new Honda robot ASIMO walks up stairs during a North American educational tour designed to introduce the
public to ASIMO and to encourage students to study robotics science. ASIMO (Advanced Step in Innovative Mobility)
is a product of over 15 years of robotic development at Honda and was created for the purpose of helping people in
need. (Photo by Spencer Platt/Getty Images). This book has not been approved, licensed, or sponsored by Honda.
Copyright 2015, 2011, 2008, 2004, 2000, 1999 John Wiley & Sons, Inc. All rights reserved.
No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or by any means,
electronic, mechanical, photocopying, recording, scanning or otherwise, except as permitted under Sections 107 or 108
of the 1976 United States Copyright Act, without either the prior written permission of the Publisher, or authorization
through payment of the appropriate per-copy fee to the Copyright Clearance Center, Inc. 222 Rosewood Drive,
Danvers, MA 01923, website www.copyright.com. Requests to the Publisher for permission should be addressed to
the Permissions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030-5774, (201)748-6011,
fax (201)748-6008, website http://www.wiley.com/go/permissions.
Founded in 1807, John Wiley & Sons, Inc. has been a valued source of knowledge and understanding for more than 200
years, helping people around the world meet their needs and fulﬁll their aspirations. Our company is built on a foundation
of principles that include responsibility to the communities we serve and where we live and work. In 2008, we launched a
Corporate Citizenship Initiative, a global effort to address the environmental, social, economic, and ethical challenges we
face in our business. Among the issues we are addressing are carbon impact, paper speciﬁcations and procurement, ethical
conduct within our business and among our vendors, and community and charitable support. For more information, please
visit our website: www.wiley.com/go/citizenship.
The software programs and experiments available with this book have been included for their instructional value. They
have been tested with care but are not guaranteed for any particular purpose. The publisher and author do not offer any
warranties or restrictions, nor do they accept any liabilities with respect to the programs and experiments.
AMTRAK is a registered trademark of National Railroad Passenger Corporation. Adobe and Acrobat are trademarks
of Adobe Systems, Inc. which may be registered in some jurisdictions. FANUC is a registered trademark of FANUC,
Ltd. Microsoft, Visual Basic, and PowerPoint are registered trademarks of Microsoft Corporation. QuickBasic is a
trademark of Microsoft Corporation. MATLAB and SIMULINK are registered trademarks of The MathWorks, Inc.
The Control System Toolbox, LTI Viewer, Root Locus Design GUI, Symbolic Math Toolbox, Simulink Control
Design, and MathWorks are trademarks of The MathWorks, Inc. LabVIEW is a registered trademark of National
Instruments Corporation. Segway is a registered trademark of Segway, Inc. in the United States and/or other countries.
Chevrolet Volt is a trademark of General Motors LLC. Virtual plant simulations pictured and referred to herein are
trademarks or registered trademarks of Quanser Inc. and/or its afﬁliates. 2010 Quanser Inc. All rights reserved.
Quanser virtual plant simulations pictured and referred to herein may be subject to change without notice. ASIMO is a
registered trademark of Honda.
Evaluation copies are provided to qualiﬁed academics and professionals for review purposes only, for use in their
courses during the next academic year. These copies are licensed and may not be sold or transferred to a third party.
Upon completion of the review period, please return the evaluation copy to Wiley. Return instructions and a free of
charge return shipping label are available at www.wiley.com/go/returnlabel. Outside of the United States, please
contact your local representative.
Library of Congress Cataloging-in-Publication Data
Nise, Norman S.
Control systems engineering / Norman S. Nise, California State Polytechnic University, Pomona. — Seventh edition.
1 online resource.
Includes bibliographical references and index.
Description based on print version record and CIP data provided by publisher; resource not viewed.
ISBN 978-1-118-80082-9 (pdf) — ISBN 978-1-118-17051-9 (cloth : alk. paper)
1.
Automatic control–Textbooks. 2.
Systems engineering–Textbooks.
I. Title.
TJ213
629.8–dc23
2014037468
Printed in the United States of America
10 9 8 7 6 5 4 3 2 1

Contents
PREFACE, ix
1.
INTRODUCTION, 1
1.1
Introduction, 2
1.2
A History of Control Systems, 4
1.3
System Conﬁgurations, 6
1.4
Analysis and Design Objectives, 9
Case Study, 11
1.5
The Design Process, 14
1.6
Computer-Aided Design, 19
1.7
The Control Systems Engineer, 20
Summary, 21
Review Questions, 22
Problems, 22
Cyber Exploration Laboratory, 29
Bibliography, 30
2.
MODELING IN THE FREQUENCY
DOMAIN, 33
2.1
Introduction, 34
2.2
Laplace Transform Review, 35
2.3
The Transfer Function, 44
2.4
Electrical Network Transfer Functions, 47
2.5
Translational Mechanical System Transfer
Functions, 61
2.6
Rotational Mechanical System Transfer
Functions, 69
2.7
Transfer Functions for Systems with Gears, 73
2.8
Electromechanical System
Transfer Functions, 77
2.9
Electric Circuit Analogs, 83
2.10
Nonlinearities, 86
2.11
Linearization, 87
Case Studies, 92
Summary, 95
Review Questions, 95
Problems, 96
Cyber Exploration Laboratory, 107
Hardware Interface Laboratory, 110
Bibliography, 112
3.
MODELING IN THE TIME DOMAIN, 115
3.1
Introduction, 116
3.2
Some Observations, 116
3.3
The General State-Space
Representation, 120
3.4
Applying the State-Space
Representation, 122
3.5
Converting a Transfer Function to
State Space, 130
3.6
Converting from State Space to a
Transfer Function, 136
3.7
Linearization, 138
Case Studies, 141
Summary, 145
Review Questions, 146
Problems, 146
Cyber Exploration Laboratory, 153
Bibliography, 155
4. TIME RESPONSE, 157
4.1
Introduction, 158
4.2
Poles, Zeros, and System Response, 158
4.3
First-Order Systems, 162
4.4
Second-Order Systems: Introduction, 164
4.5
The General Second-Order System, 169
4.6
Underdamped Second-Order Systems, 173
4.7
System Response with Additional
Poles, 182
4.8
System Response with Zeros, 186
4.9
Effects of Nonlinearities upon
Time Response, 192
v

4.10
Laplace Transform Solution of State
Equations, 194
4.11
Time Domain Solution of
State Equations, 198
Case Studies, 202
Summary, 208
Review Questions, 209
Problems, 210
Cyber Exploration Laboratory, 223
Hardware Interface Laboratory, 226
Bibliography, 231
5.
REDUCTION OF MULTIPLE
SUBSYSTEMS, 235
5.1
Introduction, 236
5.2
Block Diagrams, 236
5.3
Analysis and Design of Feedback
Systems, 245
5.4
Signal-Flow Graphs, 248
5.5
Mason’s Rule, 251
5.6
Signal-Flow Graphs of State
Equations, 254
5.7
Alternative Representations in
State Space, 256
5.8
Similarity Transformations, 265
Case Studies, 272
Summary, 278
Review Questions, 278
Problems, 279
Cyber Exploration Laboratory, 295
Bibliography, 296
6.
STABILITY, 299
6.1
Introduction, 300
6.2
Routh-Hurwitz Criterion, 303
6.3
Routh-Hurwitz Criterion: Special Cases, 305
6.4
Routh-Hurwitz Criterion:
Additional Examples, 311
6.5
Stability in State Space, 318
Case Studies, 321
Summary, 323
Review Questions, 323
Problems, 324
Cyber Exploration Laboratory, 332
Bibliography, 333
7.
STEADY-STATE ERRORS, 335
7.1
Introduction, 336
7.2
Steady-State Error for Unity Feedback
Systems, 339
7.3
Static Error Constants and System Type, 345
7.4
Steady-State Error Speciﬁcations, 348
7.5
Steady-State Error for Disturbances, 351
7.6
Steady-State Error for Nonunity
Feedback Systems, 353
7.7
Sensitivity, 356
7.8
Steady-State Error for Systems in
State Space, 359
Case Studies, 362
Summary, 365
Review Questions, 366
Problems, 367
Cyber Exploration Laboratory, 377
Bibliography, 379
8.
ROOT LOCUS TECHNIQUES, 381
8.1
Introduction, 382
8.2
Deﬁning the Root Locus, 386
8.3
Properties of the Root Locus, 388
8.4
Sketching the Root Locus, 390
8.5
Reﬁning the Sketch, 395
8.6
An Example, 404
8.7
Transient Response Design via Gain
Adjustment, 407
8.8
Generalized Root Locus, 411
8.9
Root Locus for Positive-Feedback
Systems, 413
8.10
Pole Sensitivity, 415
Case Studies, 417
Summary, 422
Review Questions, 423
Problems, 423
Cyber Exploration Laboratory, 439
Hardware Interface Laboratory, 441
Bibliography, 447
9.
DESIGN VIA ROOT LOCUS, 449
9.1
Introduction, 450
9.2
Improving Steady-State Error via
Cascade Compensation, 453
vi
Contents

9.3
Improving Transient Response via Cascade
Compensation, 462
9.4
Improving Steady-State Error and Transient
Response, 474
9.5
Feedback Compensation, 487
9.6
Physical Realization of Compensation, 495
Case Studies, 500
Summary, 504
Review Questions, 505
Problems, 506
Cyber Exploration Laboratory, 519
Hardware Interface Laboratory, 520
Bibliography, 523
10.
FREQUENCY RESPONSE TECHNIQUES, 525
10.1
Introduction, 526
10.2
Asymptotic Approximations:
Bode Plots, 531
10.3
Introduction to the Nyquist Criterion, 550
10.4
Sketching the Nyquist Diagram, 555
10.5
Stability via the Nyquist Diagram, 560
10.6
Gain Margin and Phase Margin via the
Nyquist Diagram, 564
10.7
Stability, Gain Margin, and Phase
Margin via Bode Plots, 566
10.8
Relation Between Closed-Loop Transient
and Closed-Loop Frequency Responses, 570
10.9
Relation Between Closed- and Open-Loop
Frequency Responses, 573
10.10 Relation Between Closed-Loop Transient
and Open-Loop Frequency Responses, 578
10.11 Steady-State Error Characteristics from
Frequency Response, 582
10.12 Systems with Time Delay, 586
10.13 Obtaining Transfer Functions
Experimentally, 591
Case Study, 595
Summary, 596
Review Questions, 597
Problems, 598
Cyber Exploration Laboratory, 609
Bibliography, 610
11.
DESIGN VIA FREQUENCY RESPONSE, 613
11.1
Introduction, 614
11.2
Transient Response via Gain
Adjustment, 615
11.3
Lag Compensation, 618
11.4
Lead Compensation, 623
11.5
Lag-Lead Compensation, 629
Case Studies, 638
Summary, 640
Review Questions, 640
Problems, 641
Cyber Exploration Laboratory, 646
Bibliography, 647
12.
DESIGN VIA STATE SPACE, 649
12.1
Introduction, 650
12.2
Controller Design, 651
12.3
Controllability, 658
12.4
Alternative Approaches to
Controller Design, 661
12.5
Observer Design, 667
12.6
Observability, 674
12.7
Alternative Approaches to
Observer Design, 677
12.8
Steady-State Error Design via
Integral Control, 684
Case Study, 688
Summary, 693
Review Questions, 694
Problems, 695
Cyber Exploration Laboratory, 703
Bibliography, 704
13.
DIGITAL CONTROL SYSTEMS, 707
13.1
Introduction, 708
13.2
Modeling the Digital Computer, 711
13.3
The z-Transform, 714
13.4
Transfer Functions, 719
13.5
Block Diagram Reduction, 723
13.6
Stability, 726
13.7
Steady-State Errors, 733
13.8
Transient Response on the z-Plane, 737
13.9
Gain Design on the z-Plane, 739
13.10 Cascade Compensation via the s-Plane, 742
13.11 Implementing the Digital
Compensator, 746
Contents
vii

Case Studies, 749
Summary, 753
Review Questions, 754
Problems, 755
Cyber Exploration Laboratory, 762
Bibliography, 764
APPENDIX A
List of Symbols, 767
APPENDIX B
MATLAB Tutorial, 771
B.1
Introduction, 771
B.2
MATLAB Examples, 772
B.3
Command Summary, 814
Bibliography, 817
APPENDIX C
Simulink Tutorial, 819
C.1
Introduction, 819
C.2
Using Simulink, 819
C.3
Examples, 824
C.4
Using Simulink for Control
System Design, 836
Summary, 846
Bibliography, 846
APPENDIX D
LabVIEW Tutorial, 849
D.1
Introduction, 849
D.2
Control Systems Analysis, Design,
and Simulation, 850
D.3
Using LabVIEW, 851
D.4
Analysis and Design Examples, 853
D.5
Simulation Examples, 865
D.6
Interfacing with External
Hardware, 875
Summary, 879
Bibliography, 879
Online location is www.wiley.com/college/nise
GLOSSARY, 881
ANSWERS TO SELECTED PROBLEMS, 889
INDEX, 895
APPENDIX E
MATLAB’s GUI Tools
Tutorial (Online)
APPENDIX F
MATLAB’s Symbolic Math Toolbox
Tutorial (Online)
APPENDIX G
Matrices, Determinants, and
Systems of Equations (Online)
APPENDIX H
Control System Computational
Aids (Online)
APPENDIX I
Derivation of a Schematic for a
DC Motor (Online)
APPENDIX J
Derivation of the Time Domain
Solution of State Equations (Online)
APPENDIX K
Solution of State Equations for
t0 6 0 (Online)
APPENDIX L
Derivation of Similarity
Transformations (Online)
APPENDIX M Root Locus Rules:
Derivations (Online)
Control Systems Engineering Toolbox (Online)
Cyber Exploration Laboratory Experiments Cover
Sheets (Online)
Hardware Interface Laboratory Experiments
Cover Sheets (Online)
Lecture Graphics (Online)
Solutions to Skill-Assessment Exercises (Online)
viii
Contents

Preface
This book introduces students to the theory and practice of control systems engineering. The
text emphasizes the practical application of the subject to the analysis and design of
feedback systems.
The study of control systems engineering is essential for students pursuing degrees in
electrical, mechanical, aerospace, biomedical, or chemical engineering. Control systems are
found in a broad range of applications within these disciplines, from aircraft and spacecraft
to robots and process control systems.
Control Systems Engineering is suitable for upper-division college and university
engineering students and for those who wish to master the subject matter through self-study.
The student using this text should have completed typical lower-division courses in
physics and mathematics through differential equations. Other required background
material, including Laplace transforms and linear algebra, is incorporated in the text, either
within chapter discussions or separately in the appendixes or on the book's Companion
Web site. This review material can be omitted without loss of continuity if the student does not
require it.
Key Features
The key features of this seventh edition are:
 Standardized chapter organization
 Qualitative and quantitative explanations
 Examples, Skill-Assessment Exercises, and Case Studies throughout the text
 Cyber Exploration Laboratory, Hardware Interface Laboratory, and Virtual
Experiments
 Abundant illustrations
 Numerous end-of-chapter problems
 Emphasis on design
 Flexible coverage
 Emphasis on computer-aided analysis and design including MATLAB1 and
LabVIEW2
 Icons identifying major topics
Let us look at each feature in more detail.
1 MATLAB is a registered trademark of The MathWorks, Inc.
2 LabVIEW is a registered trademark of National Instruments Corporation.
ix

Standardized Chapter Organization
Each chapter begins with a list of chapter learning outcomes, followed by a list of case study
learning outcomes that relate to speciﬁc student performance in solving a practical case
study problem, such as an antenna azimuth position control system.
Topics are then divided into clearly numbered and labeled sections containing
explanations, examples, and, where appropriate, skill-assessment exercises with answers.
These numbered sections are followed by one or more case studies, as will be outlined in a
few paragraphs. Each chapter ends with a brief summary, several review questions requiring
short answers, a set of homework problems, and experiments.
Qualitative and Quantitative Explanations
Explanations are clear and complete and, where appropriate, include a brief review of required
background material. Topics build upon and support one another in a logical fashion.
Groundwork for new concepts and terminology is carefully laid to avoid overwhelming
the student and to facilitate self-study.
Although quantitative solutions are obviously important, a qualitative or intuitive
understanding of problems and methods of solution is vital to producing the insight
required to develop sound designs. Therefore, whenever possible, new concepts are
discussed from a qualitative perspective before quantitative analysis and design are
addressed. For example, in Chapter 8 the student can simply look at the root locus and
describe qualitatively the changes in transient response that will occur as a system
parameter, such as gain, is varied. This ability is developed with the help of a few simple
equations from Chapter 4.
Examples, Skill-Assessment Exercises, and Case Studies
Explanations are clearly illustrated by means of numerous numbered and labeled Examples
throughout the text. Where appropriate, sections conclude with Skill-Assessment Exercises.
These are computation drills, most with answers that test comprehension and provide
immediate feedback. Complete solutions can be found at www.wiley.com/college/nise.
Broader examples in the form of Case Studies can be found after the last numbered
section of every chapter, with the exception of Chapter 1. These case studies are practical
application problems that demonstrate the concepts introduced in the chapter. Each case
study concludes with a “Challenge” problem that students may work in order to test their
understanding of the material.
One of the case studies, an antenna azimuth position control system, is carried
throughout the book. The purpose is to illustrate the application of new material in each
chapter to the same physical system, thus highlighting the continuity of the design process.
Another, more challenging case study, involving an Unmannered Free-Swimming
Submersible Vehicle, is developed over the course of ﬁve chapters.
Cyber Exploration Laboratory, Hardware Interface Laboratory,
and Virtual Experiments
Computer experiments using MATLAB, Simulink3 and the Control System Toolbox are
found at the end of the Problems sections under the sub-heading Cyber Exploration
Laboratory. The experiments allow the reader to verify the concepts covered in the chapter
via simulation. The reader also can change parameters and perform “what if” exploration to
gain insight into the effect of parameter and conﬁguration changes. The experiments are
written with stated Objectives, Minimum Required Software Packages, as well as Prelab,
Lab, and Postlab tasks and questions. Thus, the experiments may be used for a laboratory
course that accompanies the class. Cover sheets for these experiments are available at
www.wiley.com.college/nise.
3 Simulink is a registered trademark of The MathWorks, Inc.
x
Preface

Subsequent to the Cyber Exploration Laboratory experiments, and new to this seventh
edition, are Hardware Interface Laboratory experiments in some chapters. These experiments
use National Instruments’ myDAQ to interface your computer to actual hardware to test
control system principles in the real world.
Finally, in this seventh edition are Virtual Experiments. These experiments are more
tightlyfocusedthantheCyberExplorationLaboratoryexperimentsastheyletstudentsinteract
withvirtualmodelsofactualteachinglabequipmentproducedbyQuanser.Theseexperiments
willhelpstudentsgainamoreintuitiveunderstandingofthephysicalimplicationsofimportant
control concepts. The experiments are referenced in sidebars throughout some chapters.
Abundant Illustrations
The ability to visualize concepts and processes is critical to the student's understanding. For
this reason, approximately 800 photos, diagrams, graphs, and tables appear throughout the
book to illustrate the topics under discussion.
Numerous End-of-Chapter Problems
Each chapter ends with a variety of homework problems that allow students to test their
understandingofthematerialpresentedinthechapter.Problemsvaryindegreeofdifﬁcultyand
complexity, and most chapters include several practical, real-life problems to help maintain
students’ motivation. Also, the homework problems contain progressive analysis and design
problems that use the same practical systems to demonstrate the concepts of each chapter.
Emphasis on Design
This textbook places a heavy emphasis on design. Chapters 8, 9, 11, 12, and 13 focus
primarily on design. But. even in chapters that emphasize analysis, simple design examples
are included wherever possible.
Throughout the book, design examples involving physical systems are identiﬁed
by the icon shown in the margin. End-of-chapter problems that involve the design of
physical systems are included under the separate heading Design Problems. Design
Problems also can be found in chapters covering design, under the heading Progressive
Analysis and Design Problems. In these examples and problems, a desired response is
speciﬁed, and the student must evaluate certain system parameters, such as gain, or
specify a system conﬁguration along with parameter values. In addition, the text includes
numerous design examples and problems (not identiﬁed by an icon) that involve purely
mathematical systems.
Because visualization is so vital to understanding design, this text carefully relates
indirect design speciﬁcations to more familiar ones. For example, the less familiar and
indirect phase margin is carefully related to the more direct and familiar percent overshoot
before being used as a design speciﬁcation.
For each general type of design problem introduced in the text, a methodology for
solving the problem is presented—in many cases in the form of a step-by-step procedure,
beginning with a statement of design objectives. Example problems serve to demonstrate the
methodology by following the procedure, making simplifying assumptions, and presenting
the results of the design in tables or plots that compare the performance of the original system
to that of the improved system. This comparison also serves as a check on the simplifying
assumptions.
Transient response design topics are covered comprehensively in the text. They
include:
 Design via gain adjustment using the root locus
 Design of compensation and controllers via the root locus
 Design via gain adjustment using sinusoidal frequency response methods
 Design of compensation via sinusoidal frequency response methods
 Design of controllers in state space using pole-placement techniques
Preface
xi

 Design of observers in state-space using pole-placement techniques
 Design of digital control systems via gain adjustment on the root locus
 Design of digital control system compensation via s-plane design and the Tustin
transformation
Steady-state error design is covered comprehensively in this textbook and includes:
 Gain adjustment
 Design of compensation via the root locus
 Design of compensation via sinusoidal frequency response methods
 Design of integral control in state space
Finally, the design of gain to yield stability is covered from the following
perspectives:
 Routh-Hurwitz criterion
 Root locus
 Nyquist criterion
 Bode plots
Flexible Coverage
The material in this book can be adapted for a one-quarter or a one-semester course. The
organization is ﬂexible, allowing the instructor to select the material that best suits the
requirements and time constraints of the class.
Throughout the book, state-space methods are presented along with the classical
approach. Chapters and sections (as well as examples, exercises, review questions, and
problems) that cover state space are marked by the icon shown in the margin and can be
omittedwithoutanylossofcontinuity.Thosewishingtoaddabasicintroductiontostate-space
modeling can include Chapter 3 in the syllabus.
In a one-semester course, the discussions of state-space analysis in Chapters 4, 5, 6 and
7,aswellasstate-spacedesigninChapter12,canbecoveredalongwiththeclassicalapproach.
Another option is to teach state space separately by gathering the appropriate chapters and
sections marked with the State Space icon into a single unit that follows the classical
approach. In a one-quarter course, Chapter 13, Digital Control Systems, could be eliminated.
Emphasis on Computer-Aided Analysis and Design
Control systems problems, particularly analysis and design problems using the root locus,
can be tedious, since their solution involves trial and error. To solve these problems,
students should be given access to computers or programmable calculators conﬁgured with
appropriate software. In this seventh edition, MATLAB and LabVIEW continue to be
integrated into the text as an optional feature.
Many problems in this text can be solved with either a computer or a hand-held
programmable calculator. For example, students can use the programmable calculator to
(1) determine whether a point on the s-plane is also on the root locus, (2) ﬁnd magnitude and
phase frequency response data for Nyquist and Bode diagrams, and (3) convert between the
following representations of a second-order system:
 Pole location in polar coordinates
 Pole location in Cartesian coordinates
 Characteristic polynomial
 Natural frequency and damping ratio
 Settling time and percent overshoot
 Peak time and percent overshoot
 Settling time and peak time
Handheldcalculatorshavetheadvantageofeasyaccessibilityforhomeworkandexams.
Please consult Appendix H, located at www.wiley.com/college/nise, for a discussion of
computational aids that can be adapted to handheld calculators.
xii
Preface

Personal computers are better suited for more computation-intensive applications,
such as plotting time responses, root loci, and frequency response curves, as well as
ﬁnding state-transition matrices. These computers also give the student a real-world
environment in which to analyze and design control systems. Those not using MATLAB
or LabVIEW can write their own programs or use other programs, such as Program CC.
Please consult Appendix H at www.wiley.com/college/nise for a discussion of computa-
tional aids that can be adapted for use on computers that do not have MATLAB or
LabVIEW installed.
Without access to computers or programmable calculators, students cannot obtain
meaningful analysis and design results and the learning experience will be limited.
Icons Identifying Major Topics
Several icons identify coverage and optional material. The icons are summarized as follows:
The MATLAB icon identiﬁes MATLAB discussions, examples, exercises, and
problems. MATLAB coverage is provided as an enhancement and is not required to
use the text.
The Simulink icon identiﬁes Simulink discussions, examples, exercises, and problems.
Simulink coverage is provided as an enhancement and is not required to use the text.
The GUI Tool icon identiﬁes MATLAB GUI Tools discussions, examples, exercises,
and problems. The discussion of the tools, which includes the LTI Viewer, the Simulink LTI
Viewer, and the SISO Design Tool, is provided as an enhancement and is not required to use
the text.
The Symbolic Math icon identiﬁes Symbolic Math Toolbox discussions, examples,
exercises, and problems. Symbolic Math Toolbox coverage is provided as an enhancement
and is not required to use the text.
The
LabVIEW
icon
identiﬁes
LabVIEW
discussions,
examples,
exercises,
and problems. LabVIEW is provided as an enhancement and is not required to use the text.
The State Space icon highlights state-space discussions, examples, exercises, and
problems. State-space material is optional and can be omitted without loss of continuity.
The Design icon clearly identiﬁes design problems involving physical systems.
New to This Edition
The following list describes the key changes in this seventh edition:
End-of-chapter problems
More than 20% of the end-of-chapter problems are either new or revised. Also, an additional
Progressive Analysis and Design Problem has been added at the end of the chapter
problems. The new progressive problem analyzes and designs a solar energy parabolic
trough collector.
MATLAB
The use of MATLAB for computer-aided analysis and design continues to be integrated into
discussions and problems as an optional feature in the seventh edition. The MATLAB
tutorial has been updated to MATLAB Version 8.3 (R2014a), the Control System Toolbox
Version 9.7, and the Symbolic Math Toolbox Version 6.0
In addition, MATLAB code continues to be incorporated in the chapters in the form of
sidebar boxes entitled TryIt.
Simulink
The use of Simulink to show the effects of nonlinearities upon the time response of open-
loop and closed-loop systems appears again in this seventh edition. We also continue to use
Simulink to demonstrate how to simulate digital systems. Finally, the Simulink tutorial has
Preface
xiii

been updated to Simulink 8.3 and a new section has been added: Using Simulink for
Control System Design.
LabVIEW
LabVIEW continues to be integrated in problems and experiments. LabVIEW has been
updated to LabVIEW 2013.
Hardware Interface Laboratory
New to this edition are experiments that use National Instruments’ myDAQ to control an
actual motor. A tutorial to familiarize the reader with myDAQ is added to Appendix D
LabVIEW Tutorial.
Book Companion Site (BCS) at www.wiley.com/college/nise
The BCS for the seventh edition includes various student and instructor resources. This free
resource can be accessed by going to www.wiley.com/college/nise and clicking on Student
Companion Site. Professors also access their password-protected resources on the Instructor
Companion Site available through this url. Instructors should contact their Wiley sales
representative for access.
For the Student:
 All M-ﬁles used in the MATLAB, Simulink, GUI Tools, and Symbolic Math Toolbox
tutorials, as well as the TryIt exercises
 Copies of the Cyber Exploration Laboratory experiments for use as experiment
cover sheets
 Solutions to the Skill-Assessment Exercises in the text
 LabVIEW Virtual Experiments
 LabVIEW VIs used in Appendix D
 All ﬁles required to perform Hardware Interface Laboratory experiments using
National Instruments myDAQ
For the Instructor;
 PowerPoint4 ﬁles containing the ﬁgures from the textbook
 Solutions to end-of-chapter problem sets
 Simulations, developed by JustAsk, for inclusion in lecture presentations
Book Organization by Chapter
Many times it is helpful lo understand an author's reasoning behind the organization of the
course material. The following paragraphs hopefully shed light on this topic.
The primary goal of Chapter 1 is to motivate students. In this chapter, students learn
about the many applications of control systems in everyday life and about the advantages of
study and a career in this ﬁeld. Control systems engineering design objectives, such as
transient response, steady-state error, and stability, are introduced, as is the path to obtaining
these objectives. New and unfamiliar terms also are included in the Glossary.
Many students have trouble with an early step in the analysis and design sequence:
transforming a physical system into a schematic. This step requires many simplifying
assumptions based on experience the typical college student does not yet possess.
Identifying some of these assumptions in Chapter 1 helps to ﬁll the experience gap.
Chapters 2, 3, and 5 address the representation of physical systems. Chapters 2 and 3
cover modeling of open-loop systems, using frequency response techniques and state-space
techniques, respectively. Chapter 5 discusses the representation and reduction of systems
formed of interconnected open-loop subsystems. Only a representative sample of physical
4 PowerPoint is a registered trademark of Microsoft Corporation.
xiv
Preface

systems can be covered in a textbook of this length. Electrical, mechanical (both translational
and rotational), and electromechanical systems are used as examples of physical systems
that are modeled, analyzed, and designed. Linearization of a nonlinear system—one technique
used by the engineer to simplify a system in order to represent it mathematically—is also
introduced.
Chapter 4 provides an introduction to system analysis, that is, ﬁnding and describing the
output response of a system. It may seem more logical to reverse the order of Chapters 4 and 5,
to present the material in Chapter 4 along with other chapters covering analysis. However,
many years of teaching control systems have taught me that the sooner students see an
application of the study of system representation, the higher their motivation levels remain.
Chapters 6, 7, 8, and 9 return to control systems analysis and design with the study of
stability (Chapter 6), steady-state errors (Chapter 7), and transient response of higher-order
systems using root locus techniques (Chapter 8). Chapter 9 covers design of compensators
and controllers using the root locus.
Chapters 10 and 11 focus on sinusoidal frequency analysis and design. Chapter 10,
like Chapter 8, covers basic concepts for stability, transient response, and steady-state-error
analysis. However, Nyquist and Bode methods are used in place of root locus. Chapter 11,
like Chapter 9, covers the design of compensators, but from the point of view of sinusoidal
frequency techniques rather than root locus.
An introduction to state-space design and digital control systems analysis and design
completes the text in Chapters 12 and 13, respectively. Although these chapters can be used as
an introduction for students who will be continuing their study of control systems engineering,
they are useful by themselves and as a supplement to the discussion of analysis and design in
the previous chapters. The subject matter cannot be given a comprehensive treatment in two
chapters, but the emphasis is clearly outlined and logically linked to the rest of the book.
Acknowledgments
The author would like to acknowledge the contributions of faculty and students, both at
California State Polytechnic University, Pomona, and across the country, whose sugges-
tions through all editions have made a positive impact on this new edition.
I am deeply indebted to my colleagues, Drs. Elhami T. Ibrahim and Salomon Oldak
at California State Polytechnic University, Pomona for authoring the creative new
problems you will ﬁnd at the end of every chapter. The new progressive problem, solar
energy parabolic trough collector, that is at the end of every chapter is the creation of
Dr Oldak. In addition, I am grateful to Dr. Oldak for creating the National Instruments
myDAQ experiments, which you will ﬁnd in the Hardware Interface Laboratory section
of many chapters. Finally, I want to thank Dr. Norali Pernalete, also of California State
Polytechnic University, Pomona, for her contribution of the LabVIEW experiments and
problems continuing in this edition.
I would like to express my appreciation to those who participated in reviews of this
seventh edition. They are: James R. McCusker, Wentworth Institute of Technology, and Ji-chul
Ryu, Northern Illinois University.
The author would like to thank John Wiley & Sons, Inc. and its staff for once again
providing professional support for this project through all phases of its development.
Speciﬁcally, the following are due recognition for their contributions: Don Fowley, Vice
President and Publisher, who gave full corporate support to the project; Dan Sayre,
Executive Editor, with whom I worked closely and who provided guidance and leadership
throughout the development of the seventh edition; Francesca Baratta and Jessica Knecht,
Editorial Assistants who were always there to answer my questions and respond to my
concerns in a professional manner; and Anna Melhorn, Senior Production Editor, who
turned the seventh edition manuscript into the ﬁnal product you are holding in your
hands. Other contributors who worked hard behind the scenes are: Wendy Lai, Designer;
Preface
xv

Harry Nolan, Director of Design; Jennifer Welter, Senior Product Designer; Kevin Holm,
Learning Space Content Manager; and Wendy Ashenberg, Content Editor.
My sincere appreciation is extended to Erik Luther of National Instruments Corporation
and Paul Gilbert, Michel Levis, and Tom Lee of Quanser for conceiving, coordinating, and
developing the Virtual Experiments that I am sure will enhance your understanding of control
systems. Others from National Instruments who contributed to the successful publication of
this book are Margaret Barrett and Kathy Brown.
Finally, last but certainly not least, I want to express my appreciation to my wife,
Ellen, for her support in ways too numerous to mention during the writing of all editions.
Speciﬁcally, though, thanks to her prooﬁng pages for this seventh edition, you, the reader,
hopefully will ﬁnd comprehension rather than apprehension in the pages that follow.
Norman S. Nise
xvi
Preface

Introduction
Chapter Learning Outcomes
After completing this chapter, the student will be able to:
• Deﬁne a control system and describe some applications (Section 1.1)
• Describe historical developments leading to modern day control theory (Section 1.2)
• Describe the basic features and conﬁgurations of control systems (Section 1.3)
• Describe control systems analysis and design objectives (Section 1.4)
• Describe a control system’s design process (Sections 1.5–1.6)
• Describe the beneﬁt from studying control systems (Section 1.7)
Case Study Learning Outcomes
• You will be introduced to a running case study—an antenna azimuth position
control system—that will serve to illustrate the principles in each subsequent
chapter. In this chapter, the system is used to demonstrate qualitatively how a
control system works as well as to deﬁne performance criteria that are the basis
for control systems analysis and design.

1
1

1.1 Introduction
Control systems are an integral part of modern society. Numerous applications are all
around us: The rockets ﬁre, and the space shuttle lifts off to earth orbit; in splashing cooling
water, a metallic part is automatically machined; a self-guided vehicle delivering material to
workstations in an aerospace assembly plant glides along the ﬂoor seeking its destination.
These are just a few examples of the automatically controlled systems that we can create.
We are not the only creators of automatically controlled systems; these systems also
exist in nature. Within our own bodies are numerous control systems, such as the pancreas,
which regulates our blood sugar. In time of “ﬁght or ﬂight,” our adrenaline increases along
with our heart rate, causing more oxygen to be delivered to our cells. Our eyes follow a
moving object to keep it in view; our hands grasp the object and place it precisely at a
predetermined location.
Even the nonphysical world appears to be automatically regulated. Models have been
suggested showing automatic control of student performance. The input to the model is the
student’s available study time, and the output is the grade. The model can be used to predict
the time required for the grade to rise if a sudden increase in study time is available. Using
this model, you can determine whether increased study is worth the effort during the last
week of the term.
Control System Deﬁnition
A control system consists of subsystems and processes (or plants) assembled
for the purpose of obtaining a desired output with desired performance, given
a speciﬁed input. Figure 1.1 shows a control system in its simplest form,
where the input represents a desired output.
For example, consider an elevator. When the fourth-ﬂoor button is pressed
on the ﬁrst ﬂoor, the elevator rises to the fourth ﬂoor with a speed and ﬂoor-
leveling accuracy designed for passenger comfort. The push of the fourth-ﬂoor
button is an input that represents our desired output, shown as a step function in Figure 1.2. The
performance of the elevator can be seen from the elevator response curve in the ﬁgure.
Two major measures of performance are apparent: (1) the transient response and
(2) the steady-state error. In our example, passenger comfort and passenger patience are
dependent upon the transient response. If this response is too fast, passenger comfort is
sacriﬁced; if too slow, passenger patience is sacriﬁced. The steady-state error is another
important performance speciﬁcation since passenger safety and convenience would be
sacriﬁced if the elevator did not level properly.
Advantages of Control Systems
With control systems we can move large equipment with precision that would otherwise
be impossible. We can point huge antennas toward the farthest reaches of the universe to
pick up faint radio signals; controlling these antennas by hand would be impossible.
Because of control systems, elevators carry us quickly to our destination, automatically
stopping at the right ﬂoor (Figure 1.3). We alone could not provide the power required for
4
Input command
Transient
response
Time
Elevator location (floor)
Steady-state
error
Steady-state
response
Elevator response
1
FIGURE 1.2
Elevator
response
Control
system
Output; response
Actual response
Input; stimulus
Desired response
FIGURE 1.1
Simpliﬁed description of a
control system
2
Chapter 1
Introduction

nd the speed; motors provide the power, and control systems regulate the
nd speed.
build control systems for four primary reasons:
ampliﬁcation
control
ience of input form
nsation for disturbances
le, a radar antenna, positioned by the low-power rotation of
the input, requires a large amount of power for its output
control system can produce the needed power ampliﬁcation, or
n.
ots designed by control system principles can compensate for
abilities. Control systems are also useful in remote or dangerous
For example, a remote-controlled robot arm can be used to pick
l in a radioactive environment. Figure 1.4 shows a robot arm
o work in contaminated environments.
rol systems canalso be used toprovide conveniencebychanging
f the input. For example, in a temperature control system, the
osition on a thermostat. The output is heat. Thus, a convenient
put yields a desired thermal output.
her advantage of a control system is the ability to compensate for
es.Typically, we control such variables as temperature in thermal
osition and velocity in mechanical systems, and voltage, current,
cy in electrical systems. The system must be able to yield the
put even with a disturbance. For example, consider an antenna
t points in a commanded direction. If wind forces the antenna
mmanded position, or if noise enters internally, the system must
detect the disturbance and correct the antenna’s position.
FIGURE 1.4
Rover was built to work in
contaminated areas at Three Mile Island in
Middleton, Pennsylvania, where a nuclear accident
occurred in 1979. The remote-controlled robot’s
long arm can be seen at the front of the vehicle.
FIGURE 1.3
a. Early
elevators were controlled by
hand ropes or an elevator
operator. Here a rope is cut to
demonstrate the safety brake, an
innovation in early elevators;
b. One of two modern Duo-lift
elevators makes its way up the
Grande Arche in Paris. Two
elevators are driven by one
motor, with each car acting as a
counterbalance to the other.
Today, elevators are fully
automatic, using control
systems to regulate position and
velocity.
1.1 Introduction
3

Obviously, the system’s input will not change to make the correction. Consequently, the
system itself must measure the amount that the disturbance has repositioned the antenna and
then return the antenna to the position commanded by the input.
1.2 A History of Control Systems
Feedback control systems are older than humanity. Numerous biological control systems
were built into the earliest inhabitants of our planet. Let us now look at a brief history of
human-designed control systems.1
Liquid-Level Control
The Greeks began engineering feedback systems around 300
B.C. A water clock
invented by Ktesibios operated by having water trickle into a measuring container at
a constant rate. The level of water in the measuring container could be used to tell time.
For water to trickle at a constant rate, the supply tank had to be kept at a constant level.
This was accomplished using a ﬂoat valve similar to the water-level control in today’s
ﬂush toilets.
Soon after Ktesibios, the idea of liquid-level control was applied to an oil lamp by
Philon of Byzantium. The lamp consisted of two oil containers conﬁgured vertically. The
lower pan was open at the top and was the fuel supply for the ﬂame. The closed upper bowl
was the fuel reservoir for the pan below. The containers were interconnected by two
capillary tubes and another tube, called a vertical riser, which was inserted into the oil in the
lower pan just below the surface. As the oil burned, the base of the vertical riser was exposed
to air, which forced oil in the reservoir above to ﬂow through the capillary tubes and into the
pan. The transfer of fuel from the upper reservoir to the pan stopped when the previous oil
level in the pan was reestablished, thus blocking the air from entering the vertical riser.
Hence, the system kept the liquid level in the lower container constant.
Steam Pressure and Temperature Controls
Regulation of steam pressure began around 1681 with Denis Papin’s invention of the safety
valve. The concept was further elaborated on by weighting the valve top. If the upward
pressure from the boiler exceeded the weight, steam was released, and the pressure
decreased. If it did not exceed the weight, the valve did not open, and the pressure inside
the boiler increased. Thus, the weight on the valve top set the internal pressure of the boiler.
Also in the seventeenth century, Cornelis Drebbel in Holland invented a purely
mechanical temperature control system for hatching eggs. The device used a vial of alcohol
and mercury with a ﬂoater inserted in it. The ﬂoater was connected to a damper that
controlled a ﬂame. A portion of the vial was inserted into the incubator to sense the heat
generated by the ﬁre. As the heat increased, the alcohol and mercury expanded, raising the
ﬂoater, closing the damper, and reducing the ﬂame. Lower temperature caused the ﬂoat to
descend, opening the damper and increasing the ﬂame.
Speed Control
In 1745, speed control was applied to a windmill by Edmund Lee. Increasing winds pitched
the blades farther back, so that less area was available. As the wind decreased, more blade
area was available. William Cubitt improved on the idea in 1809 by dividing the windmill
sail into movable louvers.
Also in the eighteenth century, James Watt invented the ﬂyball speed governor to
control the speed of steam engines. In this device, two spinning ﬂyballs rise as rotational
speed increases. A steam valve connected to the ﬂyball mechanism closes with the
ascending ﬂyballs and opens with the descending ﬂyballs, thus regulating the speed.
1 See (Bennett, 1979) and (Mayr, 1970) for deﬁnitive works on the history of control systems.
4
Chapter 1
Introduction

Stability, Stabilization, and Steering
Control systems theory as we know it today began to crystallize in the latter half of the
nineteenth century. In 1868, James Clerk Maxwell published the stability criterion for a
third-order system based on the coefﬁcients of the differential equation. In 1874, Edward
John Routh, using a suggestion from William Kingdon Clifford that was ignored earlier by
Maxwell, was able to extend the stability criterion to ﬁfth-order systems. In 1877, the topic
for the Adams Prize was “The Criterion of Dynamical Stability.” In response, Routh
submitted a paper entitled A Treatise on the Stability of a Given State of Motion and won the
prize. This paper contains what is now known as the Routh-Hurwitz criterion for stability,
which we will study in Chapter 6. Alexandr Michailovich Lyapunov also contributed to the
development and formulation of today’s theories and practice of control system stability. A
student of P. L. Chebyshev at the University of St. Petersburg in Russia, Lyapunov extended
the work of Routh to nonlinear systems in his 1892 doctoral thesis, entitled The General
Problem of Stability of Motion.
During the second half of the 1800s, the development of control systems focused on
the steering and stabilizing of ships. In 1874, Henry Bessemer, using a gyro to sense a ship’s
motion and applying power generated by the ship’s hydraulic system, moved the ship’s
saloon to keep it stable (whether this made a difference to the patrons is doubtful). Other
efforts were made to stabilize platforms for guns as well as to stabilize entire ships, using
pendulums to sense the motion.
Twentieth-Century Developments
It was not until the early 1900s that automatic steering of ships was achieved. In 1922, the
Sperry Gyroscope Company installed an automatic steering system that used the
elements of compensation and adaptive control to improve performance. However,
much of the general theory used today to improve the performance of automatic control
systems is attributed to Nicholas Minorsky, a Russian born in 1885. It was his theoretical
development applied to the automatic steering of ships that led to what we call today
proportional-plus-integral-plus-derivative (PID), or three-mode, controllers, which we
will study in Chapters 9 and 11.
In the late 1920s and early 1930s, H. W. Bode and H. Nyquist at Bell Telephone
Laboratories developed the analysis of feedback ampliﬁers. These contributions evolved
into sinusoidal frequency analysis and design techniques currently used for feedback control
system, and are presented in Chapters 10 and 11.
In 1948, Walter R. Evans, working in the aircraft industry, developed a graphical
technique to plot the roots of a characteristic equation of a feedback system whose parameters
changed over a particular range of values. This technique, now known as the root locus, takes
itsplacewiththeworkofBodeandNyquistinformingthefoundationoflinearcontrolsystems
analysis and design theory. We will study root locus in Chapters 8, 9, and 13.
Contemporary Applications
Today, control systems ﬁnd widespread application in the guidance, navigation, and control
of missiles and spacecraft, as well as planes and ships at sea. For example, modern ships use
a combination of electrical, mechanical, and hydraulic components to develop rudder
commands in response to desired heading commands. The rudder commands, in turn, result
in a rudder angle that steers the ship.
We ﬁnd control systems throughout the process control industry, regulating liquid
levels in tanks, chemical concentrations in vats, as well as the thickness of fabricated
material. For example, consider a thickness control system for a steel plate ﬁnishing mill.
Steel enters the ﬁnishing mill and passes through rollers. In the ﬁnishing mill, X-rays
measure the actual thickness and compare it to the desired thickness. Any difference is
adjusted by a screw-down position control that changes the roll gap at the rollers through
which the steel passes. This change in roll gap regulates the thickness.
1.2 A History of Control Systems
5

Modern developments have seen widespread use of the digital computer as part of
control systems. For example, computers in control systems are for industrial robots,
spacecraft, and the process control industry. It is hard to visualize a modern control system
that does not use a digital computer.
Although recently retired, the space shuttle provides an excellent example of the use
of control systems because it contained numerous control systems operated by an onboard
computer on a time-shared basis. Without control systems, it would be impossible to guide
the shuttle to and from earth’s orbit or to adjust the orbit itself and support life on board.
Navigation functions programmed into the shuttle’s computers used data from the shuttle’s
hardware to estimate vehicle position and velocity. This information was fed to the guidance
equations that calculated commands for the shuttle’s ﬂight control systems, which steered
the spacecraft. In space, the ﬂight control system gimbaled (rotated) the orbital maneuvering
system (OMS) engines into a position that provided thrust in the commanded direction to
steer the spacecraft. Within the earth’s atmosphere, the shuttle was steered by commands
sent from the ﬂight control system to the aerosurfaces, such as the elevons.
Within this large control system represented by navigation, guidance, and control were
numerous subsystems to control the vehicle’s functions. For example, the elevons required a
control system to ensure that their position was indeed that which was commanded, since
disturbances such as wind could rotate the elevons away from the commanded position.
Similarly,inspace,thegimbalingoftheorbitalmaneuveringenginesrequiredasimilarcontrol
system to ensure that the rotating engine can accomplish its function with speed and accuracy.
Control systems were also used to control and stabilize the vehicle during its descent from
orbit. Numerous small jets that compose the reaction control system (RCS) were used initially
in the exoatmosphere, where the aerosurfaces are ineffective. Control was passed to the
aerosurfaces as the orbiter descended into the atmosphere.
Inside the shuttle, numerous control systems were required for power and life support.
For example, the orbiter had three fuel-cell power plants that converted hydrogen and
oxygen (reactants) into electricity and water for use by the crew. The fuel cells involved the
use of control systems to regulate temperature and pressure. The reactant tanks were kept at
constant pressure as the quantity of reactant diminishes. Sensors in the tanks sent signals to
the control systems to turn heaters on or off to keep the tank pressure constant (Rockwell
International, 1984).
Control systems are not limited to science and industry. For example, a home heating
system is a simple control system consisting of a thermostat containing a bimetallic material
that expands or contracts with changing temperature. This expansion or contraction moves a
vial of mercury that acts as a switch, turning the heater on or off. The amount of expansion or
contraction required to move the mercury switch is determined by the temperature setting.
Home entertainment systems also have built-in control systems. For example, in an
optical disk recording system microscopic pits representing the information are burned into
the disc by a laser during the recording process. During playback, a reﬂected laser beam
focused on the pits changes intensity. The light intensity changes are converted to an
electrical signal and processed as sound or picture. A control system keeps the laser beam
positioned on the pits, which are cut as concentric circles.
There are countless other examples of control systems, from the everyday to the
extraordinary. As you begin your study of control systems engineering, you will become
more aware of the wide variety of applications.
1.3 System Conﬁgurations
In this section, we discuss two major conﬁgurations of control systems: open loop and
closed loop. We can consider these conﬁgurations to be the internal architecture of the total
system shown in Figure 1.1. Finally, we show how a digital computer forms part of a control
system’s conﬁguration.
6
Chapter 1
Introduction

Open-Loop Systems
A generic open-loop system is shown in Figure 1.5(a). It starts with a subsystem called an
input transducer, which converts the form of the input to that used by the controller. The
controller drives a process or a plant. The input is sometimes called the reference, while the
output can be called the controlled variable. Other signals, such as disturbances, are shown
added to the controller and process outputs via summing junctions, which yield the algebraic
sum of their input signals using associated signs. For example, the plant can be a furnace or
air conditioning system, where the output variable is temperature. The controller in a heating
system consists of fuel valves and the electrical system that operates the valves.
Thedistinguishing characteristicof anopen-loop systemisthat itcannotcompensate for
any disturbances that add to the controller’s driving signal (Disturbance 1 in Figure 1.5(a)).
For example, if the controller is an electronic ampliﬁer and Disturbance 1 is noise, then any
additive ampliﬁer noise at the ﬁrst summing junction will also drivetheprocess,corruptingthe
output with the effect of the noise. The output of an open-loop system is corrupted not only by
signals that add to the controller’s commands but also by disturbances at the output
(Disturbance 2 in Figure 1.5(a)). The system cannot correct for these disturbances, either.
Open-loop systems, then, do not correct for disturbances and are simply commanded by
the input. For example, toasters are open-loop systems, as anyone with burnt toast can attest.
The controlled variable (output) of a toaster is the color of the toast. The device is designed
with the assumption that the toast will be darker the longer it is subjected to heat. The toaster
does notmeasure the color of the toast; it does not correct forthe fact that thetoast is rye, white,
or sourdough, nor does it correct for the fact that toast comes in different thicknesses.
Other examples of open-loop systems are mechanical systems consisting of a mass,
spring, and damper with a constant force positioning the mass. The greater the force, the
greater the displacement. Again, the system position will change with a disturbance, such as
an additional force, and the system will not detect or correct for the disturbance. Or, assume
that you calculate the amount of time you need to study for an examination that covers three
chapters in order to get an A. If the professor adds a fourth chapter—a disturbance—you are
an open-loop system if you do not detect the disturbance and add study time to that
previously calculated. The result of this oversight would be a lower grade than you
expected.
Controller
Process
or Plant
+
+
Output
or
Controlled
variable
Disturbance 1
Disturbance 2
Summing
junction
Summing
junction
(a)
Controller
Process
or Plant
+
+
Input
or
Reference
Output
or
Controlled
variable
Disturbance 1
Disturbance 2
Summing
junction
Summing
junction
(b)
Error
or
Actuating
signal
Summing
junction
+
Input
transducer
–
Output
transducer
or Sensor
+
+
+
+
Input
or
Reference
Input
transducer
FIGURE 1.5
Block diagrams
of control systems: a. open-loop
system; b. closed-loop system
1.3 System Conﬁgurations
7

Closed-Loop (Feedback Control) Systems
The disadvantages of open-loop systems, namely sensitivity to disturbances and inability to
correct for these disturbances, may be overcome in closed-loop systems. The generic
architecture of a closed-loop system is shown in Figure 1.5(b).
The input transducer converts the form of the input to the form used by the
controller. An output transducer, or sensor, measures the output response and converts it
into the form used by the controller. For example, if the controller uses electrical signals
to operate the valves of a temperature control system, the input position and the output
temperature are converted to electrical signals. The input position can be converted to a
voltage by a potentiometer, a variable resistor, and the output temperature can be
converted to a voltage by a thermistor, a device whose electrical resistance changes with
temperature.
The ﬁrst summing junction algebraically adds the signal from the input to the signal
from the output, which arrives via the feedback path, the return path from the output to the
summing junction. In Figure 1.5(b), the output signal is subtracted from the input signal.
The result is generally called the actuating signal. However, in systems where both the input
and output transducers have unity gain (that is, the transducer ampliﬁes its input by 1), the
actuating signal’s value is equal to the actual difference between the input and the output.
Under this condition, the actuating signal is called the error.
The closed-loop system compensates for disturbances by measuring the output
response, feeding that measurement back through a feedback path, and comparing that
response to the input at the summing junction. If there is any difference between the two
responses, the system drives the plant, via the actuating signal, to make a correction. If there
is no difference, the system does not drive the plant, since the plant’s response is already the
desired response.
Closed-loop systems, then, have the obvious advantage of greater accuracy than
open-loop systems. They are less sensitive to noise, disturbances, and changes in the
environment. Transient response and steady-state error can be controlled more conveniently
and with greater ﬂexibility in closed-loop systems, often by a simple adjustment of gain
(ampliﬁcation) in the loop and sometimes by redesigning the controller. We refer to the
redesign as compensating the system and to the resulting hardware as a compensator. On the
other hand, closed-loop systems are more complex and expensive than open-loop systems. A
standard, open-loop toaster serves as an example: It is simple and inexpensive. A closed-loop
toaster oven is more complex and more expensive since it has to measure both color (through
light reﬂectivity) and humidity inside the toaster oven. Thus, the control systems engineer
mustconsiderthetrade-offbetweenthesimplicityandlow costofanopen-loopsystemandthe
accuracy and higher cost of a closed-loop system.
In summary, systems that perform the previously described measurement and
correction are called closed-loop, or feedback control, systems. Systems that do not
have this property of measurement and correction are called open-loop systems.
Computer-Controlled Systems
In many modern systems, the controller (or compensator) is a digital computer. The
advantage of using a computer is that many loops can be controlled or compensated by the
same computer through time sharing. Furthermore, any adjustments of the compensator
parameters required to yield a desired response can be made by changes in software rather
than hardware. The computer can also perform supervisory functions, such as scheduling
many required applications. For example, the space shuttle main engine (SSME) controller,
which contained two digital computers, alone controlled numerous engine functions. It
monitored engine sensors that provided pressures, temperatures, ﬂow rates, turbopump
speed, valve positions, and engine servo valve actuator positions. The controller further
provided closed-loop control of thrust and propellant mixture ratio, sensor excitation, valve
actuators, spark igniters, as well as other functions (Rockwell International, 1984).
8
Chapter 1
Introduction

1.4 Analysis and Design
In Section 1.1 we brieﬂy alluded to some con
transient response and steady-state error. We
place it in perspective as we deﬁne our an
Analysis is the process by which a sys
we evaluate its transient response and steady
speciﬁcations. Design is the process by whic
For example, if a system’s transient respons
not to meet the speciﬁcations, then we chan
meet the speciﬁcations.
A control system is dynamic: It res
response before reaching a steady-state res
have already identiﬁed these two responses
as an example. In this section, we discuss
design: producing the desired transient resp
stability. We also address some other desig
system performance to changes in paramet
Transient Response
Transient response is important. In the case
passengers impatient, whereas an excessive
If the elevator oscillates about the arriv
more than a second, a disconcerting feelin
Transient response is also important fo
reasons: Too fast a transient response
permanent physical damage. In a comput
response contributes to the time required to
write to the computer’s disk storage (see
Since reading and writing cannot take pla
head stops, the speed of the read/write head’
from one track on the disk to another in
overall speed of the computer.
In this book, we establish quantitativ
for transient response. We then analyze the s
existing transient response. Finally, we adj
ters or design components to yield a desir
response—our ﬁrst analysis and design ob
Steady-State Response
Another analysis and design goal focuses o
this response resembles the input and is u
decayed to zero. For example, this respon
ﬂoor or the head of a disk drive ﬁnally st
about the accuracy of the steady-state resp
the ﬂoor for the passengers to exit, and
commanded track results in computer e
keep the satellite well within its beamwid
deﬁne steady-state errors quantitatively, a
design corrective action to reduce the
design objective.
FIGURE 1.6
Computer hard disk drive, showing disks and
read/write head
1.4 Analysis and Design Objectives
9

Stability
Discussion of transient response and steady-state error is moot if the system does not have
stability. In order to explain stability, we start from the fact that the total response of a system
is the sum of the natural response and the forced response. When you studied linear
differential equations, you probably referred to these responses as the homogeneous and the
particular solutions, respectively. Natural response describes the way the system dissipates
or acquires energy. The form or nature of this response is dependent only on the system, not
the input. On the other hand, the form or nature of the forced response is dependent on the
input. Thus, for a linear system, we can write
Total response  Natural response  Forced response
1.12
For a control system to be useful, the natural response must (1) eventually approach
zero, thus leaving only the forced response, or (2) oscillate. In some systems, however, the
natural response grows without bound rather than diminish to zero or oscillate. Eventually,
the natural response is so much greater than the forced response that the system is no longer
controlled. This condition, called instability, could lead to self-destruction of the physical
device if limit stops are not part of the design. For example, the elevator would crash through
the ﬂoor or exit through the ceiling; an aircraft would go into an uncontrollable roll; or an
antenna commanded to point to a target would rotate, line up with the target, but then begin
to oscillate about the target with growing oscillations and increasing velocity until the motor
or ampliﬁers reached their output limits or until the antenna was damaged structurally. A
time plot of an unstable system would show a transient response that grows without bound
and without any evidence of a steady-state response.
Control systems must be designed to be stable. That is, their natural response must
decay to zero as time approaches inﬁnity, or oscillate. In many systems the transient
response you see on a time response plot can be directly related to the natural response.
Thus, if the natural response decays to zero as time approaches inﬁnity, the transient
response will also die out, leaving only the forced response. If the system is stable, the
proper transient response and steady-state error characteristics can be designed. Stability is
our third analysis and design objective.
Other Considerations
The three main objectives of control system analysis and design have already been
enumerated. However, other important considerations must be taken into account. For
example, factors affecting hardware selection, such as motor sizing to fulﬁll power
requirements and choice of sensors for accuracy, must be considered early in the design.
Finances are another consideration. Control system designers cannot create designs
without considering their economic impact. Such considerations as budget allocations and
competitive pricing must guide the engineer. For example, if your product is one of a
kind, you may be able to create a design that uses more expensive components without
appreciably increasing total cost. However, if your design will be used for many copies,
slight increases in cost per copy can translate into many more dollars for your company to
propose during contract bidding and to outlay before sales.
2 You may be confused by the words transient vs. natural, and steady-state vs. forced. If you look at Figure 1.2, you
can see the transient and steady-state portions of the total response as indicated. The transient response is the sum of
the natural and forced responses, while the natural response is large. If we plotted the natural response by itself, we
would get a curve that is different from the transient portion of Figure 1.2. The steady-state response of Figure 1.2
is also the sum of the natural and forced responses, but the natural response is small. Thus, the transient and
steady-state responses are what you actually see on the plot; the natural and forced responses are the underlying
mathematical components of those responses.
10
Chapter 1
Introduction

Another consideration is robust design. System parameters considered constant
during the design for transient response, steady-state errors, and stability change over
time when the actual system is built. Thus, the performance of the system also changes
over time and will not be consistent with your design. Unfortunately, the relationship
between parameter changes and their effect on performance is not linear. In some cases,
even in the same system, changes in parameter values can lead to small or large changes
in performance, depending on the system’s nominal operating point and the type of
design used. Thus, the engineer wants to create a robust design so that the system will not
be sensitive to parameter changes. We discuss the concept of system sensitivity to
parameter changes in Chapters 7 and 8. This concept, then, can be used to test a design for
robustness.
Case Study
Introduction to a Case Study
Introduction to a Case Study
Now that our objectives are stated, how do we meet them? In this section we will look at an
example of a feedback control system. The system introduced here will be used in
subsequent chapters as a running case study to demonstrate the objectives of those
chapters. A colored background like this will identify the case study section at the end of
each chapter. Section 1.5, which follows this ﬁrst case study, explores the design process
that will help us build our system.
Antenna Azimuth: An Introduction to Position Control Systems
A position control system converts a position input command to a position output
response. Position control systems ﬁnd widespread applications in antennas, robot
arms, and computer disk drives. The radio telescope antenna in Figure 1.7 is one example
of a system that uses position control systems. In this section, we will look in detail at an
antenna azimuth position control system that could be used to position a radio telescope
antenna. We will see how the system works and how we can effect changes in its
performance. The discussion here will be on a qualitative level, with the objective of
getting an intuitive feeling for the systems with which we will be dealing.
An antenna azimuth position control system is shown in Figure 1.8(a), with a more
detailed layout and schematic in Figures 1.8(b) and 1.8(c), respectively. Figure 1.8(d)
shows a functional block diagram of the system. The functions are shown above the
blocks, and the required hardware is indicated inside the blocks. Parts of Figure 1.8 are
repeated on the front endpapers for future reference.
The purpose of this system is to have the azimuth angle output of the antenna, θot,
follow the input angle of the potentiometer, θit. Let us look at Figure 1.8(d) and describe
how this system works. The input command is an angular displacement. The potentiometer
converts the angular displacement into a voltage. Similarly, the output angular displacement
is converted to a voltage by the potentiometer in the feedback path. The signal and power
ampliﬁers boost the difference between the input and output voltages. This ampliﬁed
actuating signal drives the plant.
The system normally operates to drive the error to zero. When the input and
output match, the error will be zero, and the motor will not turn. Thus, the motor is
driven only when the output and the input do not match. The greater the difference
between the input and the output, the larger the motor input voltage, and the faster the
motor will turn.
Peter Menzel 
FIGURE 1.7
The search for
extraterrestrial life is being
carried out with radio antennas
like the one pictured here. A
radio antenna is an example of a
system with position controls
Case Study
11

FIGURE 1.8
Antenna
azimuth position control
system: a. system concept;
b. detailed layout; c. schematic
(ﬁgure continues)
(a)
θi(t)
Desired
azimuth angle
input
Potentiometer
θo(t)
Azimuth 
angle
output
Antenna
(b)
Motor
θi(t)
Desired
azimuth angle
input
Differential amplifier
and power amplifier
Potentiometer
Potentiometer
θo(t)
Azimuth 
angle
output
Antenna
–
+
Differential
and
power
amplifier
K
Potentiometer
Armature
resistance
Armature
Potentiometer
Gear
θi(t)
θo(t)
Fixed field
+
–
Inertia
Viscous
damping
Gear
Gear
Motor
–
+
Amplifiers
(c)
12
Chapter 1
Introduction

If we increase the gain of the signal ampliﬁer, will there be an increase in the steady-state
value of the output? If the gain is increased, then for a given actuating signal, the motor
will be driven harder. However, the motor will still stop when the actuating signal reaches
zero, that is, when the output matches the input. The difference in the response, however,
will be in the transients. Since the motor is driven harder, it turns faster toward its ﬁnal
position. Also, because of the increased speed, increased momentum could cause the
motor to overshoot the ﬁnal value and be forced by the system to return to the commanded
position. Thus, the possibility exists for a transient response that consists of damped
oscillations (that is, a sinusoidal response whose amplitude diminishes with time) about
the steady-state value if the gain is high. The responses for low gain and high gain are
shown in Figure 1.9.
We have discussed the transient response of the position control system. Let us now
direct our attention to the steady-state position to see how closely the output matches the
input after the transients disappear.
We deﬁne steady-state error as the difference between the input and the output
after the transients have effectively disappeared. The deﬁnition holds equally well for
step, ramp, and other types of inputs. Typically, the steady-state error decreases with an
increase in gain and increases with a decrease in gain. Figure 1.9 shows zero error in the
steady-state response; that is, after the transients have disappeared, the output position
Signal
and
power
amplifiers
Motor,
load,
and
gears
Angular
input
Angular
output
Error
or
Actuating
signal
Voltage
proportional
to
input
+
–
Input
transducer
Summing
junction
Voltage
proportional
to
output
Controller
Plant
or
Process
Sensor
(output transducer)
Potentiometer
Potentiometer
(d)
FIGURE 1.8
(Continued )
d. functional block diagram
Output with
low gain
Output with
high gain
Input
Time
Response
FIGURE 1.9
Response of a
position control system,
showing effect of high and low
controller gain on the output
response
Case Study
13

1.5 The Design Process
In this section, we establish an orderly sequence for the design of feedback control systems
that will be followed as we progress through the rest of the book. Figure 1.10 shows the
described process as well as the chapters in which the steps are discussed.
The antenna azimuth position control system discussed in the last section is
representative of control systems that must be analyzed and designed. Inherent in
Figure 1.10 is feedback and communication during each phase. For example, if testing
(Step 6) shows that requirements have not been met, the system must be redesigned and
retested. Sometimes requirements are conﬂicting and the design cannot be attained. In these
cases, the requirements have to be respeciﬁed and the design process repeated. Let us now
elaborate on each block of Figure 1.10.
Step 1: Transform Requirements Into a Physical System
We begin by transforming the requirements into a physical system. For example, in the
antenna azimuth position control system, the requirements would state the desire to position
Determine
a physical
system and
specifications
from the
requirements.
Transform
the physical
system into
a schematic.
Use the
 schematic
to obtain a
 block diagram,
signal-flow
diagram,
or state-space
representation.
If multiple
blocks, reduce
the block
diagram to a
single block or
closed-loop
system.
Analyze,
design, and test
to see that
requirements
and 
specifications 
are met.
Chapter 1
Chapters 2, 3
Chapter 13
Chapter 5
Chapter 13
Chapters 4, 6–12
Chapter 13
Analog:
Digital:
Draw a
functional
block 
diagram.
Step 1
Step 2
Step 3
Step 4
Step 5
Step 6
FIGURE 1.10
The control system design process
equals the commanded input position. In some systems, the steady-state error will not be
zero; for these systems, a simple gain adjustment to regulate the transient response is either
not effective or leads to a trade-off between the desired transient response and the desired
steady-state accuracy.
To solve this problem, a controller with a dynamic response, such as an electrical
ﬁlter, is used along with an ampliﬁer. With this type of controller, it is possible to design
both the required transient response and the required steady-state accuracy without the
trade-off required by a simple setting of gain. However, the controller is now more
complex. The ﬁlter in this case is called a compensator. Many systems also use dynamic
elements in the feedback path along with the output transducer to improve system
performance. An animation PowerPoint presentation (PPT) demonstrating this system
is available for instructors at www.wiley.com/college/nise. See Antenna (Ch. 1).
In summary, then, our design objectives and the system’s performance revolve
around the transient response, the steady-state error, and stability. Gain adjustments can
affect performance and sometimes lead to trade-offs between the performance criteria.
Compensators can often be designed to achieve performance speciﬁcations without the
need for trade-offs. Now that we have stated our objectives and some of the methods
available to meet those objectives, we describe the orderly progression that leads us to the
ﬁnal system design.
14
Chapter 1
Introduction

the antenna from a remote location and describe such features as weight and physical
dimensions. Using the requirements, design speciﬁcations, such as desired transient
response and steady-state accuracy, are determined. Perhaps an overall concept, such as
Figure 1.8(a), would result.
Step 2: Draw a Functional Block Diagram
The designer now translates a qualitative description of the system into a functional block
diagram that describes the component parts of the system (that is, function and/or hardware)
and shows their interconnection. Figure 1.8(d) is an example of a functional block diagram
for the antenna azimuth position control system. It indicates functions such as input
transducer and controller, as well as possible hardware descriptions such as ampliﬁers
and motors. At this point the designer may produce a detailed layout of the system, such as
that shown in Figure 1.8(b), from which the next phase of the analysis and design sequence,
developing a schematic diagram, can be launched.
Step 3: Create a Schematic
As we have seen, position control systems consist of electrical, mechanical, and
electromechanical components. After producing the description of a physical system,
the control systems engineer transforms the physical system into a schematic diagram.
The control system designer can begin with the physical description, as contained in
Figure 1.8(a), to derive a schematic. The engineer must make approximations about the
system and neglect certain phenomena, or else the schematic will be unwieldy, making
it difﬁcult to extract a useful mathematical model during the next phase of the analysis
and design sequence. The designer starts with a simple schematic representation and, at
subsequent phases of the analysis and design sequence, checks the assumptions made
about the physical system through analysis and computer simulation. If the schematic is
too simple and does not adequately account for observed behavior, the control systems
engineer adds phenomena to the schematic that were previously assumed negligible. A
schematic diagram for the antenna azimuth position control system is shown in
Figure 1.8(c).
When we draw the potentiometers, we make our ﬁrst simplifying assumption by
neglecting their friction or inertia. These mechanical characteristics yield a dynamic, rather
than an instantaneous, response in the output voltage. We assume that these mechanical
effects are negligible and that the voltage across a potentiometer changes instantaneously as
the potentiometer shaft turns.
A differential ampliﬁer and a power ampliﬁer are used as the controller to yield gain
and power ampliﬁcation, respectively, to drive the motor. Again, we assume that the
dynamics of the ampliﬁers are rapid compared to the response time of the motor; thus, we
model them as a pure gain, K.
A dc motor and equivalent load produce the output angular displacement. The speed
of the motor is proportional to the voltage applied to the motor’s armature circuit. Both
inductance and resistance are part of the armature circuit. In showing just the armature
resistance in Figure 1.8(c), we assume the effect of the armature inductance is negligible for
a dc motor.
The designer makes further assumptions about the load. The load consists of a rotating
mass and bearing friction. Thus, the model consists of inertia and viscous damping whose
resistive torque increases with speed, as in an automobile’s shock absorber or a screen door
damper.
The decisions made in developing the schematic stem from knowledge of the physical
system, the physical laws governing the system’s behavior, and practical experience. These
decisions are not easy; however, as you acquire more design experience, you will gain the
insight required for this difﬁcult task.
1.5 The Design Process
15

Step 4: Develop a Mathematical Model (Block Diagram)
Once the schematic is drawn, the designer uses physical laws, such as Kirchhoff’s laws for
electrical networks and Newton’s law for mechanical systems, along with simplifying
assumptions, to model the system mathematically. These laws are
Kirchhoff’s and Newton’s laws lead to mathematical models that describe the relationship
between the input and output of dynamic systems. One such model is the linear, time-invariant
differential equation, Eq. (1.2):
dmct
dtn
 dn1
dm1ct
dtn1
 ∙∙∙ d0ct  bm
dmrt
dtm
 bm1
dm1rt
dtm1
 ∙∙∙ b0rt
1.24
Many systems can be approximately described by this equation, which relates the output,
c(t), to the input, r(t), by way of the system parameters, ai and bj. We assume the reader is
familiar with differential equations. Problems and a bibliography are provided at the end of
the chapter for you to review this subject.
Simplifying assumptions made in the process of obtaining a mathematical model
usually leads to a low-order form of Eq. (1.2). Without the assumptions the system model
could be of high order or described with nonlinear, time-varying, or partial differential
equations. These equations complicate the design process and reduce the designer’s insight.
Of course, all assumptions must be checked and all simpliﬁcations justiﬁed through analysis
or testing. If the assumptions for simpliﬁcation cannot be justiﬁed, then the model cannot be
simpliﬁed. We examine some of these simplifying assumptions in Chapter 2.
In addition to the differential equation, the transfer function is another way of
mathematically modeling a system. The model is derived from the linear, time-invariant
differential equation using what we call the Laplace transform. Although the transfer
function can be used only for linear systems, it yields more intuitive information than the
differential equation. We will be able to change system parameters and rapidly sense the
effect of these changes on the system response. The transfer function is also useful in
modeling the interconnection of subsystems by forming a block diagram similar to
Figure 1.8(d) but with a mathematical function inside each block.
Still another model is the state-space representation. One advantage of state-space
methods is that they can also be used for systems that cannot be described by linear
differential equations. Further, state-space methods are used to model systems for
simulation on the digital computer. Basically, this representation turns an nth-order
differential equation into n simultaneous ﬁrst-order differential equations. Let this
description sufﬁce for now; we describe this approach in more detail in Chapter 3.
Kirchhoff's voltage law
The sum of voltages around a closed path equals zero.
Kirchhoff's current law
The sum of electric currents ﬂowing from a node equals zero.
Newton's laws
The sum of forces on a body equals zero;3 the sum of moments on a
body equals zero.
3 Alternately, P forces  Ma. In this text the force, Ma, will be brought to the left-hand side of the equation to yield
P forces  0 (D’Alembert’s principle). We can then have a consistent analogy between force and voltage, and
Kirchhoff’s and Newton’s laws (that is, P forces  0; P voltages  0).
4 The right-hand side of Eq. (1.2) indicates differentiation of the input, r(t). In physical systems, differentiation of
the input introduces noise. In Chapters 3 and 5 we show implementations and interpretations of Eq. (1.2) that do not
require differentiation of the input.
16
Chapter 1
Introduction

Finally, we should mention that to produce the mathematical model for a system,
we require knowledge of the parameter values, such as equivalent resistance, inductance,
mass, and damping, which is often not easy to obtain. Analysis, measurements, or
speciﬁcations from vendors are sources that the control systems engineer may use to
obtain the parameters.
Step 5: Reduce the Block Diagram
Subsystem models are interconnected to form block diagrams of larger systems,
as in Figure 1.8(d), where each block has a mathematical description. Notice that
many signals, such as proportional voltages and error, are internal to the system.
There are also two signals—angular input and angular output—that are external
to the system. In order to evaluate system response in this example, we need to
reduce this large system’s block diagram to a single block with a mathematical
description that represents the system from its input to its output, as shown in
Figure 1.11. Once the block diagram is reduced, we are ready to analyze and
design the system.
Step 6: Analyze and Design
The next phase of the process, following block diagram reduction, is analysis and design. If
you are interested only in the performance of an individual subsystem, you can skip the
block diagram reduction and move immediately into analysis and design. In this phase, the
engineer analyzes the system to see if the response speciﬁcations and performance
requirements can be met by simple adjustments of system parameters. If speciﬁcations
cannot be met, the designer then designs additional hardware in order to effect a desired
performance.
Test input signals are used, both analytically and during testing, to verify the
design. It is neither necessarily practical nor illuminating to choose complicated input
signals to analyze a system’s performance. Thus, the engineer usually selects standard test
inputs. These inputs are impulses, steps, ramps, parabolas, and sinusoids, as shown in
Table 1.1.
An impulse is inﬁnite at t  0 and zero elsewhere. The area under the unit impulse is 1.
An approximation of this type of waveform is used to place initial energy into a system so
that the response due to that initial energy is only the transient response of a system. From
this response the designer can derive a mathematical model of the system.
A step input represents a constant command, such as position, velocity, or acceleration.
Typically, the step input command is of the same form as the output. For example, if the
system’s output is position, as it is for the antenna azimuth position control system, the step
inputrepresentsadesiredposition,andtheoutputrepresentstheactual position.Ifthesystem’s
output is velocity, as is the spindle speed for a video disc player, the step input represents a
constant desired speed, and the output represents the actual speed. The designer uses step
inputs because both the transient response and the steady-state response are clearly visible and
can be evaluated.
The ramp input represents a linearly increasing command. For example, if the
system’s output is position, the input ramp represents a linearly increasing position, such as
that found when tracking a satellite moving across the sky at constant speed. If the system’s
output is velocity, the input ramp represents a linearly increasing velocity. The response to
an input ramp test signal yields additional information about the steady-state error. The
previous discussion can be extended to parabolic inputs, which are also used to evaluate a
system’s steady-state error.
Sinusoidal inputs can also be used to test a physical system to arrive at a mathematical
model. We discuss the use of this waveform in detail in Chapters 10 and 11.
Mathematical
description
Angular
output
Angular
input
FIGURE 1.11
Equivalent block
diagram for the antenna azimuth
position control system
1.5 The Design Process
17

We conclude that one of the basic analysis and design requirements is to evaluate the
time response of a system for a given input. Throughout the book you will learn numerous
methods for accomplishing this goal.
The control systems engineer must take into consideration other characteristics
about feedback control systems. For example, control system behavior is altered by
ﬂuctuations in component values or system parameters. These variations can be caused
by temperature, pressure, or other environmental changes. Systems must be built so that
expected ﬂuctuations do not degrade performance beyond speciﬁed bounds. A sensitivity
analysis can yield the percentage of change in a speciﬁcation as a function of a change in a
system parameter. One of the designer’s goals, then, is to build a system with minimum
sensitivity over an expected range of environmental changes.
In this section we looked at some control systems analysis and design considerations.
We saw that the designer is concerned about transient response, steady-state error,
stability, and sensitivity. The text pointed out that although the basis of evaluating system
performance is the differential equation, other methods, such as transfer functions and state
space, will be used. The advantages of these new techniques over differential equations will
become apparent as we discuss them in later chapters.
TABLE 1.1
Test waveforms used in control systems
Input
Function
Description
Sketch
Use
Impulse
δt
δt  ∞for 0 < t < 0
 0 elsewhere
Z 0
0
δtdt  1
f(t)
t
δ(t)
Transient response
Modeling
Step
ut
ut  1 for t > 0
 0 for t < 0
f(t)
t
Transient response
Steady-state error
Ramp
tut
tut  t for t  0
 0 elsewhere
f(t)
t
Steady-state error
Parabola
1
2 t2ut
1
2 t2ut  1
2 t2 for t  0
 0 elsewhere
f(t)
t
Steady-state error
Sinusoid
sin ωt
f(t)
t
Transient response
Modeling
Steady-state error
18
Chapter 1
Introduction

1.6 Computer-Aided Design
Now that we have discussed the analysis and design sequence, let us discuss the use of the
computer as a computational tool in this sequence. The computer plays an important role in
the design of modern control systems. In the past, control system design was labor intensive.
Many of the tools we use today were implemented through hand calculations or, at best,
using plastic graphical aid tools. The process was slow, and the results not always accurate.
Large mainframe computers were then used to simulate the designs.
Today we are fortunate to have computers and software that remove the drudgery
from the task. At our own desktop computers, we can perform analysis, design, and
simulation with one program. With the ability to simulate a design rapidly, we can easily
make changes and immediately test a new design. We can play what-if games and try
alternate solutions to see if they yield better results, such as reduced sensitivity to
parameter changes. We can include nonlinearities and other effects and test our models
for accuracy.
MATLAB
The computer is an integral part of modern control system design, and many computational
tools are available for your use. In this book we use MATLAB and the MATLAB Control
System Toolbox, which expands MATLAB to include control system–speciﬁc commands.
In addition, presented are several MATLAB enhancements that give added functionality to
MATLAB and the Control Systems Toolbox. Included are (1) Simulink, which uses a
graphical user interface (GUI); (2) the LTI Viewer, which permits measurements to be made
directly from time and frequency response curves; (3) the SISO Design Tool, a convenient
and intuitive analysis and design tool; and (4) the Symbolic Math Toolbox, which saves
labor when making symbolic calculations required in control system analysis and
design. Some of these enhancements may require additional software available from
The MathWorks, Inc.
MATLAB is presented as an alternate method of solving control system problems.
You are encouraged to solve problems ﬁrst by hand and then by MATLAB so that insight is
not lost through mechanized use of computer programs. To this end, many examples
throughout the book are solved by hand, followed by suggested use of MATLAB.
As an enticement to begin using MATLAB, simple program statements that you can
try are suggested throughout the chapters at appropriate locations. Throughout the book,
various icons appear in the margin to identify MATLAB references that direct you to the
proper program in the proper appendix and tell you what you will learn. Selected end-of-
chapter problems and Case Study Challenges to be solved using MATLAB have also been
marked with appropriate icons. The following list itemizes the speciﬁc components of
MATLAB used in this book, the icon used to identify each, and the appendix in which a
description can be found:
MATLAB/Control System Toolbox tutorials and code are found in
Appendix B and identiﬁed in the text with the MATLAB icon shown in
the margin.
Simulink tutorials and diagrams are found in Appendix C and
identiﬁed in the text with the Simulink icon shown in the margin.
MATLAB GUI tools, tutorials, and examples are in Appendix E at
www.wiley.com/college/nise and identiﬁed in the text with the GUI
Tool icon shown in the margin. These tools consist of the LTI
Viewer and the SISO Design Tool.
1.6 Computer-Aided Design
19

Symbolic Math Toolbox tutorials and code are found in Appendix F
at www.wiley.com/college/nise and identiﬁed in the text with the
Symbolic Math icon shown in the margin.
MATLAB code itself is not platform speciﬁc. The same code runs on PCs and workstations
that support MATLAB. Although there are differences in installing and managing
MATLAB ﬁles, we do not address them in this book. Also, there are many more commands
in MATLAB and the MATLAB toolboxes than are covered in the appendixes. Please
explore the bibliographies at the end of the applicable appendixes to ﬁnd out more about
MATLAB ﬁle management and MATLAB instructions not covered in this textbook.
LabVIEW
LabVIEW is a programming environment presented as an alternative to MATLAB. This
graphical alternative produces front panels of virtual instruments on your computer that
are pictorial reproductions of hardware instruments, such as waveform generators or
oscilloscopes. Underlying the front panels are block diagrams. The blocks contain
underlying code for the controls and indicators on the front panel. Thus, a knowledge of
coding is not required. Also, parameters can be easily passed or viewed from the front panel.
A LabVIEW tutorial is in Appendix D and all LabVIEW material is
identiﬁed with the LabVIEW icon shown in the margin.
You are encouraged to use computational aids throughout this book. Those not using
MATLAB or LabVIEW should consult Appendix H at www.wiley.com/college/nise for a
discussion of other alternatives. Now that we have introduced control systems to you and
established a need for computational aids to perform analysis and design, we will conclude
with a discussion of your career as a control systems engineer and look at the opportunities
and challenges that await you.
1.7 The Control Systems Engineer
Control systems engineering is an exciting ﬁeld in which to apply your engineering
talents, because it cuts across numerous disciplines and numerous functions within those
disciplines. The control engineer can be found at the top level of large projects, engaged at
the conceptual phase in determining or implementing overall system requirements. These
requirements include total system performance speciﬁcations, subsystem functions, and
the interconnection of these functions, including interface requirements, hardware and
software design, and test plans and procedures.
Many engineers are engaged in only one area, such as circuit design or software
development. However, as a control systems engineer, you may ﬁnd yourself working in a
broad arena and interacting with people from numerous branches of engineering and the
sciences. For example, if you are working on a biological system, you will need to interact
with colleagues in the biological sciences, mechanical engineering, electrical engineering,
and computer engineering, not to mention mathematics and physics. You will be working
with these engineers at all levels of project development from concept through design and,
ﬁnally, testing. At the design level, the control systems engineer can be performing
hardware selection, design, and interface, including total subsystem design to meet speciﬁed
requirements. The control engineer can be working with sensors and motors as well as
electronic, pneumatic, and hydraulic circuits.
The space shuttle provides another example of the diversity required of the systems
engineer. In the previous section, we showed that the space shuttle’s control systems cut
across many branches of science: orbital mechanics and propulsion, aerodynamics,
20
Chapter 1
Introduction

electrical engineering, and mechanical engineering. Whether or not you work in the space
program, as a control systems engineer you will apply broad-based knowledge to the
solution of engineering control problems. You will have the opportunity to expand your
engineering horizons beyond your university curriculum.
You are now aware of future opportunities. But for now, what advantages does this
course offer to a student of control systems (other than the fact that you need it to graduate)?
Engineering curricula tend to emphasize bottom-up design. That is, you start from the
components, develop circuits, and then assemble a product. In top-down design, a high-level
picture of the requirements is ﬁrst formulated; then the functions and hardware required to
implement the system are determined. You will be able to take a top-down systems approach
as a result of this course.
A major reason for not teaching top-down design throughout the curriculum is the
high level of mathematics initially required for the systems approach. For example, control
systems theory, which requires differential equations, could not be taught as a lower-division
course. However, while progressing through bottom-up design courses, it is difﬁcult to see
how such design ﬁts logically into the large picture of the product development cycle.
After completing this control systems course, you will be able to stand back and see
how your previous studies ﬁt into the large picture. Your ampliﬁer course or vibrations
course will take on new meaning as you begin to see the role design work plays as part of
product development. For example, as engineers, we want to describe the physical world
mathematically so that we can create systems that will beneﬁt humanity. You will ﬁnd that
you have indeed acquired, through your previous courses, the ability to model physical
systems mathematically, although at the time you might not have understood where in the
product development cycle the modeling ﬁts. This course will clarify the analysis and design
procedures and show you how the knowledge you acquired ﬁts into the total picture of
system design.
Understanding control systems enables students from all branches of engineering to
speak a common language and develop an appreciation and working knowledge of the other
branches. You will ﬁnd that there really is not much difference among the branches of
engineering as far as the goals and applications are concerned. As you study control
systems, you will see this commonality.
Summary
Control systems contribute to every aspect of modern society. In our homes we ﬁnd them in
everything from toasters to heating systems to DVD players. Control systems also have
widespread applications in science and industry, from steering ships and planes to guiding
missiles. Control systems also exist naturally; our bodies contain numerous control systems.
Even economic and psychological system representations have been proposed based on
control system theory. Control systems are used where power gain, remote control, or
conversion of the form of the input is required.
A control system has an input, a process, and an output. Control systems can be
open loop or closed loop. Open-loop systems do not monitor or correct the output for
disturbances; however, they are simpler and less expensive than closed-loop systems.
Closed-loop systems monitor the output and compare it to the input. If an error is detected,
the system corrects the output and hence corrects the effects of disturbances.
Control systems analysis and design focuses on three primary objectives:
1. Producing the desired transient response
2. Reducing steady-state errors
3. Achieving stability
Summary
21

A system must be stable in order to produce the proper transient and steady-state
response. Transient response is important because it affects the speed of the system and
inﬂuences human patience and comfort, not to mention mechanical stress. Steady-state
response determines the accuracy of the control system; it governs how closely the output
matches the desired response.
The design of a control system follows these steps:
Step 1
Determine a physical system and speciﬁcations from requirements.
Step 2
Draw a functional block diagram.
Step 3
Represent the physical system as a schematic.
Step 4
Use the schematic to obtain a mathematical model, such as a block diagram.
Step 5
Reduce the block diagram.
Step 6
Analyze and design the system to meet speciﬁed requirements and speciﬁca-
tions that include stability, transient response, and steady-state performance.
In the next chapter we continue through the analysis and design sequence and learn how to
use the schematic to obtain a mathematical model.
Review Questions
1. Name three applications for feedback control systems.
2. Name three reasons for using feedback control systems and at least one reason for not
using them.
3. Give three examples of open-loop systems.
4. Functionally, how do closed-loop systems differ from open-loop systems?
5. State one condition under which the error signal of a feedback control system would
not be the difference between the input and the output.
6. If the error signal is not the difference between input and output, by what general name
can we describe the error signal?
7. Name two advantages of having a computer in the loop.
8. Name the three major design criteria for control systems.
9. Name the two parts of a system’s response.
10. Physically, what happens to a system that is unstable?
11. Instability is attributable to what part of the total response?
12. Describe a typical control system analysis task.
13. Describe a typical control system design task.
14. Adjustments of the forward path gain can cause changes in the transient response.
True or false?
15. Name three approaches to the mathematical modeling of control systems.
16. Brieﬂy describe each of your answers to Question 15.
Problems
1. A variable resistor, called a potentiometer, is shown
in Figure P1.1. The resistance is varied by moving a
wiper arm along a ﬁxed resistance. The resistance
from A to C is ﬁxed, but the resistance from B to C
varies with the position of the wiper arm. If it takes 10
turns to move the wiper arm from A to C, draw a
block diagram of the potentiometer showing the input
variable, the output variable, and (inside the block)
the gain, which is a constant and is the amount
by which the input is multiplied to obtain the output.
An
animation
PowerPoint
presentation
(PPT)
demonstrating this system is available for instructors
at www.wiley.com/college/nise. See Potentiometer.
[Section 1.4: Introduction to a Case Study]
22
Chapter 1
Introduction

–
+ 50 volts
θi(t)
Input angle,
Output
voltage, vo(t)
A
C
50 volts
B
FIGURE P1.1
Potentiometer
2. A temperature control system operates by sensing the
difference between the thermostat setting and the actual
temperature and then opening a fuel valve an amount
proportional to this difference. Draw a functional closed-
loop block diagram similar to Figure 1.8(d) identifying
the input and output transducers, the controller, and the
plant. Further, identify the input and output signals of all
subsystemspreviouslydescribed.[Section1.4:Introduc-
tion to a Case Study]
3. An aircraft’s attitude varies in roll, pitch, and yaw as
deﬁned in Figure P1.2. Draw a functional block diagram
foraclosed-loopsystemthatstabilizestherollasfollows:
Thesystemmeasurestheactual rollanglewithagyroand
compares the actual roll angle with the desired roll angle.
Theaileronsrespondtotheroll-angleerrorbyundergoing
anangulardeﬂection.Theaircraftrespondstothisangular
deﬂection, producing a roll angle rate. Identify the input
and output transducers, the controller, and the plant.
Further, identify the nature of each signal. [Section 1.4:
Introduction to a Case Study]
Roll angle
Pitch angle
Aileron
deflection up
Yaw angle
y
z
x
Aileron
deflection down
FIGURE P1.2
Aircraft attitude deﬁned
4. We can build a control system that will automatically
adjustamotorcycle’sradiovolumeasthenoisegenerated
by the motorcycle changes. The noise generated by the
motorcycle increases with speed. As the noise increases,
thesystemincreasesthevolumeoftheradio.Assumethat
the amount of noise can be represented by a voltage
generated by the speedometer cable, and the volume of
the radio is controlled by a dc voltage (Hogan, 1988). If
the dc voltage represents the desired volume disturbed by
the motorcycle noise, draw the functional block diagram
of the automatic volume control system, showing the
input transducer, the volume control circuit, and the
speed transducer as blocks. Also, show the following
signals: the desired volume as an input, the actual volume
as an output, and voltages representing speed, desired
volume, and actual volume. An animation PowerPoint
presentation (PPT) demonstratingthis systemis available
for instructors at www.wiley.com/college/nise. See
Motorcycle. [Section 1.4: Introduction to a Case Study]
5. A dynamometer is a device used to measure torque and
speed and to vary the load on rotating devices. The
dynamometer operates as follows to control the amount
oftorque:Ahydraulicactuatorattachedtotheaxlepresses
atireagainstarotatingﬂywheel.Thegreaterthedisplace-
mentoftheactuator,thegreatertheforcethatisappliedto
the rotating ﬂywheel. A strain gage load cell senses the
force.Thedisplacementoftheactuatoriscontrolledbyan
electricallyoperatedvalvewhosedisplacementregulates
ﬂuid ﬂowing into the actuator (D’Souza, 1988). Draw a
functional block diagram of a closed-loop system that
uses the described dynamometer to regulate the force
against the tire during testing. Show all signals and
systems. Include ampliﬁers that power the valve, the
valve, the actuator and load, and the tire. [Section 1.4:
Introduction to a Case Study]
6. During a medical operation an anesthesiologist controls
the depth of unconsciousness by controlling the concen-
tration of isoﬂurane in a vaporized mixture with oxygen
andnitrousoxide.Thedepthofanesthesiaismeasuredby
the patient’s blood pressure. The anesthesiologist also
regulates ventilation, ﬂuid balance, and the administra-
tion of other drugs. In order to free the anesthesiologist to
devote more time to the latter tasks, and in the interest of
the patient’s safety, we wish to automate the depth of
anesthesia by automating the control of isoﬂurane con-
centration.Drawafunctionalblockdiagramofthesystem
showingpertinentsignalsandsubsystems(Meier,1992).
[Section 1.4: Introduction to a Case Study]
7. The vertical position, x(t), ofa grinding wheelis controlled
by a closed-loop system. The input to the system is the
desired depth of grind, and the output is the actual depth of
grind. The difference between the desired depth and the
actual depth drives the motor, resulting in a force applied
to the work. This force results in a feed velocity for the
grinding wheel (Jenkins, 1997). Draw a closed-loop
functional block diagram for the grinding process,
showing the input, output, force, and grinder feed rate.
[Section 1.4: Introduction to a Case Study]
Problems
23

8. You are given a high-speed proportional solenoid valve.
Avoltageproportionaltothedesiredpositionofthespool
is applied to the coil. The resulting magnetic ﬁeld pro-
duced by the current in the coil causes the armature to
move. A push pin connected to the armature moves the
spool. A linear voltage differential transformer (LVDT)
thatoutputsavoltageproportionaltodisplacementsenses
the spool’s position. This voltage can be used in a feed-
backpathtoimplementclosed-loopoperation(Vaughan,
1996). Draw a functional block diagram of the valve,
showing input and output positions, coil voltage, coil
current, and spool force. [Section 1.4: Introduction to a
Case Study]
9. The human eye has a biological control system that varies
the pupil diameter to maintain constant light intensity to
theretina. As the light intensity increases, the optical nerve
sends a signal to the brain, which commands internal eye
muscles to decrease the pupil’s eye diameter. When the
light intensity decreases, the pupil diameter increases.
a. Draw a functional block diagram of the light-pupil
system indicating the input, output, and intermediate
signals; the sensor; the controller; and the actuator.
[Section 1.4: Introduction to a Case Study]
b. Under normal conditions the incident light will be
larger than the pupil. If the incident light is smaller
than the diameter of the pupil, the feedback path is
broken(Bechhoefer,2005).Modifyyourblockdiagram
fromParta.toshowwheretheloopisbroken.Whatwill
happen if the narrow beam of light varies in intensity,
such as in a sinusoidal fashion?
c. It has been found (Bechhoefer, 2005) that it takes the
pupilabout300millisecondstoreacttoachangeinthe
incident light. If light shines off center to the retina,
describe the response of the pupil with delay present
and then without delay present.
10. ASegway5PersonalTransporter(PT)(FigureP1.3)isa
two-wheeled vehicle in which the human operator stands
vertically on a platform. As the driver leans left, right,
forward, or backward, a set of sensitive gyroscopic
sensors sense the desired input. These signals are fed to
a computer that ampliﬁes them and commands motors to
propel the vehicle in the desired direction. One very
important feature of the PT is its safety: The system
will maintain its vertical position within a speciﬁedangle
despite road disturbances, such as uphills and downhills
oreveniftheoperatorover-leans inanydirection.Drawa
functional block diagram of the PT system that keeps
the system in a vertical position. Indicate the input and
output signals, intermediate signals, and main subsys-
tems. (http://segway.com)
D.A. Winstein/Custom Medial Stock photo
FIGURE P1.3
The Segway Personal Transporter (PT)
11. In humans, hormone levels, alertness, and core body
temperature
are
synchronized
through
a
24-hour
circadian cycle. Daytime alertness is at its best when
sleep/wake cycles are in sync with the circadian cycle.
Thus alertness can be easily affected with a distributed
work schedule, such as the one to which astronauts are
subjected. It has been shown that the human circadian
cycle can be delayed or advanced through light stimulus.
To ensure optimal alertness, a system is designed to track
astronauts’ circadian cycles and increase the quality of
sleepduringmissions.Corebodytemperaturecanbeused
as an indicator of the circadian cycle. A computer model
with optimum circadian body temperature variations can
be compared to an astronaut’s body temperatures.
Whenever a difference is detected, the astronaut is sub-
jected to a light stimulus to advance or delay the astro-
naut’s circadian cycle (Mott, 2003). Draw a functional
blockdiagramofthesystem.Indicatetheinputandoutput
signals, intermediate signals, and main subsystems.
12. Tactile feedback is an important component in the
learning of motor skills such as dancing, sports, and
physicalrehabilitation.Asuit withwhitedotsrecognized
by a vision system to determine arm joint positions with
millimetric precisionwas developed.Thissuit is worn by
both teacher and student to provide position information.
(Lieberman, 2007). If there is a difference between the
teacher’s positions and that of the student, vibrational
feedback is provided to the student through eight
strategically placed vibrotactile actuators in the wrist
and arm. This placement takes advantage of a sensory
effect known as cutaneous rabbit that tricks the subject
to feel uniformly spaced stimuli in places where the
5 Segway is a registered trademark of Segway, Inc. in the United States and/
or other countries.
24
Chapter 1
Introduction

actuators are not present. These stimuli help the student
adjust to correct the motion. In summary, the system
consists of an instructor and a student having their
movements followed by the vision system. Their move-
ments are fed into a computer that ﬁnds the differences
between their joint positions and provides proportional
vibrationalstrengthfeedbacktothestudent.Drawablock
diagram describing the system design.
13. Some skillful drivers can drive and balance a four-
wheeled vehicle on two wheels. To verify that a control
system can also drive a car in this fashion, a prototype
using an RC (remote-controlled) car is equipped with a
feedback control system (Arndt, 2011). In a simpliﬁed
systemmodel,therollangleatwhichthecarbalanceswas
calculated a priori and found to be 52.3°. This value was
used as the desired input. The desired input is compared
with the actual roll angle and the difference is fed to a
controller that feeds a servomotor indicating the desired
wheel steering angle that controls the vehicle’s roll angle
on two wheels. The car’s actual roll angle is measured
using a hinged linkage that rolls along the ground next to
the vehicle and is connected to a potentiometer. Draw a
block diagram indicating the system functions. Draw
blocks for the system controller, the steering servo, and
the car dynamics. Indicate in the diagram the following
signals: the desired roll angle, the steering wheel angle,
and the actual car roll angle.
14. Moored ﬂoating platforms are subject to external
disturbances such as waves, wind, and currents that
cause them to drift. There are certain applications,
such as diving support, drilling pipe-laying, and tank-
ing between ships in which precise positioning of
moored platforms is very important (Muñoz-Mansilla,
2011). Figure P1.4 illustrates a tethered platform in
which side thrusters are used for positioning. A control
system is to be designed in which the objective is to
minimize the drift, Y, and an angular deviation from
the vertical axes, ϕ (not shown). The disturbances
acting on the system’s outputs are the force, F, and the
torque, M, caused by the external environment. In this
problem, the plant will have one input, the force
delivered by the thrusters (Fu) and two outputs, Y
and ϕ. Note also that this is a disturbance attenuation
problem, so there is no command input. Draw a block
diagram of the system indicating the disturbances F
and M, the control signal Fu, and the outputs Y and ϕ.
Your diagram should also have blocks for a controller,
the one-input two-output plant, and a block indicating
how the disturbances affect each of the outputs.
15. In the Case Study of Section 1.4, an antenna azimuth angle
iscontrolled,anditscorrespondingblockdiagramisshown
in Figure 1.8(d) in the text. There, the sensor used to
measure the antenna’s azimuth angle is a potentiometer.
a. Modifytheblockdiagramifthesensorusedtomeasure
the antenna’s angle is an accelerometer.
b. Modifytheblockdiagramifthesensorusedtomeasure
the antenna’s angle is a gyroscope.
16. Figure P1.5 shows the topology of a photo-voltaic (PV)
system that uses solar cells to supply electrical power to a
residence with hybrid electric vehicle loads (Gurkavnak,
2009).ThesystemconsistsofaPVarraytocollectthesun’s
rays, a battery pack to store energy during the day, a dc/ac
inverter to supply ac power to the load, and a bidirectional
dc/dc converter to control the terminal voltage of the solar
array according to a maximum power point tracking
(MPPT) algorithm. In case of sufﬁcient solar power (solar
insolation), the dc/dc converter charges the battery and the
solar array supplies power to the load through the dc/ac
inverter.Withlessornosolarenergy(solarnon-insolation),
power is supplied from the battery to the load through the
dc/dc converter and the dc/ac inverter. Thus, the dc/dc
converter must be bidirectional to be able to charge and
discharge the battery. With the MPPT controller providing
the reference voltage, the converter operates as a step-up
converter (boost) to discharge the battery if the battery is
full or a step-down (buck) converter, which charges the
battery if it is not full.7
In Figure P1.5, the Inverter is controlled by the
Power Manager and Controller through the Current
Controller. The Power Manager and Controller directs
the Inverter to take power either from the battery,
via the Bidirectional Converter, or the solar array,
depending upon the time of day and the battery state
sea level
Y
F
sea floor
thrusters
FIGURE P1.4
Tethered platform using side thrusters for
positioning6
6 Muñoz-Mansilla, R., Aranda, J., Diaz, J. M., Chaos, D., and Reinoso, A. J.,
Applications of QFT Robust Control Techniques to Marine Systems. 9th
IEEE International Conference on Control and Automation. December
19–21, 2011, pp. 378–385. (Figure 3, p. 382).
7 For a description of all other operational scenarios, refer to the above-listed
reference.
Problems
25

of charge (SOC). Draw the following two functional
block diagrams for this system:
a. A diagram that illustrates the conversion of solar
irradiation into energy stored in the battery. In that
diagram, the input is the solar irradiance, r(t), and the
output is the battery voltage, vb(t).
b. The main diagram, in which the input is the desired
output voltage, vr(t), and the output is the actual
inverter output voltage, vo(t).
Both of these functional block diagrams should
show their major components, including the PV array,
MPPT controller, dc/dc converter, battery pack, dc/ac
inverter, current controller, and the Power Manager and
Controller. Show all signals, including intermediate
voltages and currents, time of day, and the SOC of
the battery.
17. Oil drilling rigs are used for drilling holes for identiﬁ-
cation of oil or natural gas sources and for extraction.
An oil drilling system can be thought of as a drill
inside a straw, which is placed inside a glass. The
straw assembly represents the drill string, the drill
surrounded by ﬂuid, and the glass represents the
volume, the annulus, around the drill string through
which slurry and eventually oil will ﬂow as the drilling
progresses.
Assume that we want to control the drill pres-
sure output, Pd(t), with a reference voltage input,
Vd(t). A control loop model (Zhao, 2007) consists
of a drill-pressure controller, drill motor subsystem,
pulley subsystem, and drill stick subsystem. The
output signal of the latter, the drill pressure, Pd(t),
is measured using a transducer, which transmits a
negative feedback voltage signal, Vb(t), to the drill
pressure controller. That signal is compared at the
input of the controller to the reference voltage, Vr(t),
Based on the error, e(t) = Vr (t) – Vb(t), the drill
pressure controller sets the desired drill speed, ωd,
which is the input to the drill motor subsystem whose
output is the actual drill speed, ωa, which is the input
to the pulley subsystem. The output of the pulley
system drives the drill stick subsystem. The drill stick
HEV
BD
Converter
Controller
G
D
Bidirectional Converter
SOC
Time
Power
Manager and
Controller
Current
Controller
IPV
LP
Cc
Vc
Vo
Vu
Io
Lo
Iu
IL
Ib
IO
IL
I*
u
Vc
Ib
Vb
IPV
VPV
VPV
VPV
*
Q1
Q4
Q5
Q6
Q3
Q2
G
Inverter
Plug-in HEV
AC
LOAD
MPPT
+
+
–
+
+
–
–
+
–
–
+
FIGURE P1.5
Proposed solar powered residential home with plug-in hybrid electric vehicle (PHEV) loads8
8 Gurkaynak, Y., Li, Z., and Khaligh, A. A Novel Grid-tied, Solar Powered
Residential Home with Plug-in Hybrid Electric Vehicle (PHEV) Loads.
IEEE Vehicle Power and Propulsion Conference 2009, pp. 813–816.
(Figure 1, p. 814).
26
Chapter 1
Introduction

subsystem may be severely affected by environmental
conditions, which may be represented as disturbances
acting between the pulley and stick subsystems.
Draw a functional block diagram for the above
system, showing its major components as well as all
signals.
18. Given the electric network shown in Figure P1.6.
[Review]
a. Write the differential equation for the network if
vt  ut, a unit step.
b. Solve the differential equation for the current, i(t), if
there is no initial energy in the network.
c. Make a plot of your solution if R=L  1.
R
L
v(t)
i(t)
+–
FIGURE P1.6
RL network
19. Repeat Problem 18 using the network shown in
Figure P1.7. Assume R1Ω; L0:5H; and1=LC16.
[Review]
R
C
v(t)
i(t)
L
+–
FIGURE P1.7
RLC network
20. Solve the following differential equations using clas-
sical
methods.
Assume
zero
initial
conditions.
[Review]
a. dx
dt  7x  5 cos 2t
b. d2x
dt2  6 dx
dt  8x  5 sin 3t
c. d2x
dt2  8 dx
dt  25x  10ut
21. Solve the following differential equations using
classical methods and the given initial conditions:
[Review]
a. d2x
dt2  2 dx
dt  2x  sin2t
x0  2; dx
dt 0  3
b. d2x
dt2  2 dx
dt  x  5e2t  t
x0  2; dx
dt 0  1
c. d2x
dt2  4x  t2
x0  1; dx
dt 0  2
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
22. Contol ofHIV/AIDS.Asof 2012, thenumberofpeople
living worldwide with Human Immunodeﬁciency
Virus/Acquired Immune Deﬁciency Syndrome (HIV/
AIDS) was estimated at 35 million, with 2.3 million
new infections per year and 1.6 million deaths due to
the disease (UNAIDS, 2013). Currently there is no
known cure for the disease, and HIV cannot be com-
pletely eliminated in an infected individual. Drug
combinations can be used to maintain the virus num-
bers at low levels, which helps prevent AIDS from
developing. A common treatment for HIV is the admin-
istration of two types of drugs: reverse transcriptase
inhibitors (RTIs) and protease inhibitors (PIs). The
amount in which each of these drugs is administered
is varied according to the amount of HIV viruses in the
body (Craig, 2004). Draw a block diagram of a feed-
back system designed to control the amount of HIV
viruses in an infected person. The plant input variables
are the amount of RTIs and PIs dispensed. Show blocks
representing the controller, the system under control,
and the transducers. Label the corresponding variables
at the input and output of every block.
23. Hybrid vehicle. The use of hybrid cars is becoming
increasingly popular. A hybrid electric vehicle (HEV)
combines electric machine(s) with an internal com-
bustion engine (ICE), making it possible (along with
other fuel consumption–reducing measures, such as
stopping the ICE at trafﬁc lights) to use smaller and
more efﬁcient gasoline engines. Thus, the efﬁciency
advantages of the electric drivetrain are obtained,
while the energy needed to power the electric motor
is stored in the onboard fuel tank and not in a large
and heavy battery pack.
There are various ways to arrange the ﬂow of
power in a hybrid car. In a serial HEV (Figure P1.8),
Problems
27

the ICE is not connected to the drive shaft. It drives
only the generator, which charges the batteries and/or
supplies power to the electric motor(s) through an
inverter or a converter.
The HEVs sold today are primarily of the parallel
or split-power variety. If the combustion engine can
turn the drive wheels as well as the generator, then the
vehicle is referred to as a parallel hybrid, because both
an electric motor and the ICE can drive the vehicle. A
parallel hybrid car (Figure P1.9) includes a relatively
small battery pack (electrical storage) to put out extra
power to the electric motor when fast acceleration is
needed. See (Bosch, 5th ed., 2000), (Bosch, 7th ed.,
2007), (Edelson, 2008), (Anderson, 2009) for more
detailed information about HEV.
As shown in Figure P1.10, split-power hybrid
cars utilize a combination of series and parallel drives
(Bosch, 5th ed., 2007). These cars use a planetary
gear (3) as a split-power transmission to allow some
of the ICE power to be applied mechanically to the
drive. The other part is converted into electrical energy
through the alternator (7) and the inverter (5) to feed the
electric motor (downstream of the transmission) and/or
to charge the high-voltage battery (6). Depending upon
driving conditions, the ICE, the electric motor, or both
propel the vehicle.
Draw a functional block diagram for the cruise
(speed) control system of:
a. A serial hybrid vehicle, showing its major compo-
nents, including the speed sensor, electronic control
unit (ECU), inverter, electric motor, and vehicle
dynamics; as well as all signals, including the desired
vehicle speed, actual speed, control command (ECU
output), controlled voltage (inverter output), the
motive force (provided by the electric motor), and
running resistive force;12
b. A parallel hybrid vehicle, showing its major compo-
nents, which should include also a block that represents
theaccelerator,engine,andmotor,aswellasthesignals
(including accelerator displacement and combined
engine/motor motive force);
c. A split-power HEV, showing its major components
and signals, including, in addition to those listed
in Parts a and b, a block representing the planetary
gear and its control, which, depending upon
driving conditions, would allow the ICE, the elec-
tric motor, or both to propel the vehicle, that is, to
provide the necessary total motive force.
Fuel 
tank
Electrical
storage
Generator
Combustion
engine
Electric
motor/generator
FIGURE P1.8
Serial hybrid-electric vehicle9
1
2
+
–
1. internal-combustion engine; 2. tank
3. planetary gear; 4. electric motor; 5. inverter;
6. battery; 7. alternator.
7
6
5
3
4
FIGURE P1.10
Split-power hybrid electric vehicle11
Fuel 
tank
Electrical
storage
Combustion
engine
Electric
motor/generator
FIGURE P1.9
Parallel hybrid drive10
9 Mark Looper, www.Altfuels.org. Alternative Drivetrains, July 2005,
http://www.altfuels.org/backgrnd/altdrive.html. Last accessed 10/13/2009.
10 Mark Looper, www.Altfuels.org. Alternative Drivetrains, July 2005,
http://www.altfuels.org/backgrnd/altdrive.html. Last accessed 10/13/2009.
11 Robert Bosch GmbH, Bosch Automotive Handbook, 7th ed. John Wiley
& Sons, Ltd., UK, 2007.
12 These include the aerodynamic drag, rolling resistance, and climbing
resistance. The aerodynamic drag is a function of car speed, whereas the
other two are proportional to car weight.
28
Chapter 1
Introduction

24. Parabolic trough collector. A set of parabolic mirrors
can be used to concentrate the sun’s rays to heat a
ﬂuid ﬂowing in a pipe positioned at the mirrors’ focal
points (Camacho, 2012). The heated ﬂuid, such as oil,
for example, is transported to a pressurized tank to be
used to create steam to generate electricity or power
an industrial process. Since the solar energy varies
with time of day, time of year, cloudiness, humidity,
etc., a control system has to be developed in order to
maintain the ﬂuid temperature constant. The temper-
ature is mainly controlled by varying the amount of
ﬂuid ﬂow through the pipes, but possibly also with a
solar tracking mechanism that tilts the mirrors at
appropriate angles.
Assuming ﬁxed mirror angles, draw the func-
tional block diagram of a system to maintain the
ﬂuid temperature a constant. The desired and actual
ﬂuid temperature difference is fed to a controller
followed by an ampliﬁer and signal conditioning
circuit that varies the speed of a ﬂuid circulating
pump. Label the blocks and links of your diagram,
indicating all the inputs to the system, including
external disturbances such as solar variations, cloud-
iness, humidity, etc.
Cyber Exploration Laboratory
Experiment 1.1
Objective
To verify the behavior of closed-loop systems as described in the Chapter 1
Case Study.
Minimum Required Software Packages
LabVIEW and the LabVIEW Control
Design and Simulation Module. Note: While no knowledge of LabVIEW is required for this
experiment, see Appendix D to learn more about LabVIEW, which will be pursued in more
detail in later chapters.
Prelab
1. From the discussion in the Case Study, describe the effect of the gain of a closed-loop
system upon transient response.
2. From the discussion in the Case Study about steady-state error, sketch a graph of a step
input superimposed with a step response output and show the steady-state error. Assume
any transient response. Repeat for a ramp input and ramp output response. Describe the
effect of gain upon the steady-state error.
Lab
1. Launch LabVIEW and open Find Examples . . . under the Help tab.
2. In the NI Example Finder window, open CDEx Effect of Controller Type.vi, found
by navigating to it thourgh Toolkits and Modules/Control and Simulation/Control
Design/Time Analysis/CDEx Effect of Controller Type vi.
3. On the tool bar click the circulating arrows located next to the solid arrow on the left. The
program is now running.
4. Move the slider Controller Gain and note the effect of high and low gains.
5. Change the controller by clicking the arrows for Controller Type and repeat Step 4.
Postlab
1. Correlate the responses found in the experiment with those described in your Prelab.
Explore other examples provided in the LabVIEW example folders.
Cyber Exploration Laboratory
29

Bibliography
Alternative Drivetrains, July 2005. Available at www.altfuels.org/backgrnd/altdrive.html. Accessed
October 13, 2009.
Anderson, S. Field Guide: Hybrid Electric Powertrains, Part 4 of 5. Automotive Design & Production.
Gardner Publication, Inc. Available at http://www.autoﬁeldguide.com/articles/020904.html.
Accessed October 13, 2009.
Arndt, D., Bobrow, J. E., Peters, S., Iagnemma, K., and Dubowsky, S. Two-Wheel Self-Balancing of a
Four-wheel Vehicle. IEEE Control Systems Magazine, April 2011, pp. 20–37.
Bahill, A. T. Bioengineering: Biomedical, Medical, and Clinical Engineering. Prentice Hall,
Englewood Cliffs, NJ, 1981.
Bechhoefer, J. Feedback for Physicists: A Tutorial Essay on Control. To Appear in Review of
Modern Physics, July 2005, pp. 42–45. Also available at http://www.sfu.ca/chaos/papers/2005/
rmp_reprint05.pdf.
Bennett, S. A History of Control Engineering, 1800–1930. Peter Peregrinus, Stevenage, UK, 1979.
Bode, H. W. Network Analysis and Feedback Ampliﬁer Design. Van Nostrand, Princeton, NJ, 1945.
Bosch, R. GmbH. Automotive Electrics and Automotive Electronics, 5th ed. John Wiley & Sons Ltd.,
UK, 2007.
Bosch, R. GmbH. Bosch Automotive Handbook, 7th ed. John Wiley & Sons Ltd., UK, 2007.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems,
Springer-Verlag, London, 2012.
Cannon, R. H., Jr. Dynamics of Physical Systems. McGraw-Hill, New York, 1967.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
D’Azzo, J. J., and Houpis, C. H. Feedback Control System Analysis and Synthesis, 2d ed.
McGraw-Hill, New York, 1966.
Doebelin, E. O. Measurement Systems Application and Design, 4th ed. McGraw-Hill, New York,
1990.
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989.
D’Souza, A. F. Design of Control Systems. Prentice Hall, Upper Saddle River, NJ, 1988.
Edelson, J., et al. Facing the Challenges of the Current Hybrid Electric Drivetrain. SMMA Technical
Conference of the Motor and Motion Association. Fall 2008. Available at www.ChorusCars.com.
Franklin, G. F., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems. Addison-
Wesley, Reading, MA, 1986.
Gurkaynak, Y., Li, Z., and Khaligh, A. A Novel Grid-tied, Solar Powered Residential Home with
Plug-in Hybrid Electric Vehicle (PHEV) Loads. IEEE Vehicle Power and Propulsion Conference
2009, pp. 813–816.
Heller, H. C., Crawshaw, L. I., and Hammel, H. T. The Thermostat of Vertebrate Animals. Scientiﬁc
American, August 1978, pp. 102–113.
Hogan, B. J. As Motorcycle’s Speed Changes, Circuit Adjusts Radio’s Volume. Design News, 18,
August 1988, pp. 118–119.
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed.
Saunders College Publishing, New York, 1989.
Jenkins, H. E., Kurfess, T. R., and Ludwick, S. J. Determination of a Dynamic Grinding Model.
Journal of Dynamic Systems, Measurements, and Control, vol. 119, June 1997, pp. 289–293.
Klapper, J., and Frankle, J. T. Phase-Locked and Frequency-Feedback Systems. Academic Press,
New York, 1972.
Lieberman, J., and Breazeal, C. Development of a Wearable Vibrotactile Feedback Suit for
Accelerated Human Motor Learning. 2007 IEEE Int. Conf. on Robotics and Automation.
Roma, Italy, April 2007.
30
Chapter 1
Introduction

Martin, R. H., Jr. Elementary Differential Equations with Boundary Value Problems. McGraw-Hill,
New York, 1984.
Mayr, O. The Origins of Feedback Control. Scientiﬁc American, October 1970, pp. 110–118.
Mayr, O. The Origins of Feedback Control. MIT Press, Cambridge, MA, 1970.
Meier, R., Nieuwland, J., Zbinden, A. M., and Hacisalihzade, S. S. Fuzzy Logic Control of Blood
Pressure during Anesthesia. IEEE Control Systems, December 1992, pp. 12–17.
Mott, C., et al. Modifying the Human Circadian Pacemaker Using Model-Based Predictive Control.
Proceedings of the American Control Conference. Denver, CO, June 2003, pp. 453–458.
Muñoz-Mansilla, R., Aranda, J., Diaz, J. M., Chaos, D., and Reinoso, A. J. Applications of QFT
Robust Control Techniques to Marine Systems. 9th IEEE International Conference on Control and
Automation, December 19–21, 2011, pp. 378–385.
Novosad, J. P. Systems, Modeling, and Decision Making. Kendall/Hunt, Dubuque, IA, 1982.
Nyquist, H. Regeneration Theory. Bell System Technical Journal, January 1932.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Overbye, D. The Big Ear. Omni, December 1990, pp. 41–48. Figure caption source for Figure 1.7.
Rockwell International. Space Shuttle Transportation System, 1984 (press information).
Shaw, D. A., and Turnbull, G. A. Modern Thickness Control for a Generation III Hot Strip Mill. The
International Steel Rolling Conference—The Science & Technology of Flat Rolling, vol. 1.
Association Technique de la Siderurgie Francaise, Deauville, France, 1–3, June 1987.
UNAIDS. GLOBAL REPORT: UNAIDS report on the global AIDS epidemic 2013. Joint United
Nations Programme on HIV/AIDS (UNAIDS), 2013, p. 4.
United Technologies Otis Elevator Co. The World of Otis. United Technologies Otis Elevator Co.,
p. 2, 1991. Figure caption source for Figure 1.3(b).
United Technologies Otis Elevator Co. Tell Me About Elevators. United Technologies Otis Elevator
Co., pp. 20–25, 1991. Figure caption source for Figure 1.3(b).
Vaughan, N. D., and Gamble, J. B. The Modeling and Simulation of a Proportional Solenoid Valve.
Journal of Dynamic Systems, Measurements, and Control, vol. 118, March 1996, pp. 120–125.
Zhao, Q., Wang, F., Wang, W., and Deng, H. Adaptive Fuzzy Control Technology for Automatic Oil
Drilling System. Proceedings of the IEEE International Conference on Automation and Logistics,
China, August 18–21, 2007.
Zhou, J., Nygaard, G., Godhaven, J., Bretholtz, Ø., and Verﬁng, E. H. Adaptive Observer for Kick
Detection and Switched Control for Bottomhole Pressure Regulation and Kick Attenuation
during Managed Pressure Drilling. 2010 American Control Conference. Baltimore, MD, USA,
June 30–July 02, 2010.
Bibliography
31


Modeling in the
Frequency Domain
Chapter Learning Outcomes
After completing this chapter, the student will be able to:
• Find the Laplace transform of time functions and the inverse Laplace transform
(Sections 2.1–2.2)
• Find the transfer function from a differential equation and solve the differential
equation using the transfer function (Section 2.3)
• Find the transfer function for linear, time-invariant electrical networks
(Section 2.4)
• Find the transfer function for linear, time-invariant translational mechanical
systems (Section 2.5)
• Find the transfer function for linear, time-invariant rotational mechanical
systems (Section 2.6)
• Find the transfer functions for gear systems with loss and for gear systems with
no loss (Section 2.7)
• Find the transfer function for linear, time-invariant electromechanical systems
(Section 2.8)
• Produce analogous electrical and mechanical circuits (Section 2.9)
• Linearize
a
nonlinear
system
in
order
to
ﬁnd
the
transfer
function
(Sections 2.10–2.11)

2
33

Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to ﬁnd the transfer function of each subsystem.
• Given a model of a human leg or a nonlinear electrical circuit, you will be able to
linearize the model and then ﬁnd the transfer function.
2.1 Introduction
In Chapter 1 we discussed the analysis and design sequence that included obtaining the
system’s schematic and demonstrated this step for a position control system. To obtain a
schematic, the control systems engineer must often make many simplifying assumptions in
order to keep the ensuing model manageable and still approximate physical reality.
The next step is to develop mathematical models from schematics of physical
systems. We will discuss two methods: (1) transfer functions in the frequency domain
and (2) state equations in the time domain. These topics are covered in this chapter and in
Chapter 3, respectively. As we proceed, we will notice that in every case the ﬁrst step in
developing a mathematical model is to apply the fundamental physical laws of science and
engineering. For example, when we model electrical networks, Ohm’s law and Kirchhoff’s
laws, which are basic laws of electric networks, will be applied initially. We will sum
voltages in a loop or sum currents at a node. When we study mechanical systems, we will
use Newton’s laws as the fundamental guiding principles. Here we will sum forces or
torques. From these equations we will obtain the relationship between the system’s output
and input.
In Chapter 1 we saw that a differential equation can describe the relationship between
the input and output of a system. The form of the differential equation and its coefﬁcients are
a formulation or description of the system. Although the differential equation relates the
system to its input and output, it is not a satisfying representation from a system perspective.
Looking at Eq. (1.2), a general, nth-order, linear, time-invariant differential equation, we see
that the system parameters, which are the coefﬁcients, appear throughout the equation. In
addition, the output, c(t), and the input, r(t), also appear throughout the equation.
We would prefer a mathematical representation such as that shown in Figure 2.1(a),
where the input, output, and system are distinct and separate parts. Also, we would like
to represent conveniently the interconnection of several subsystems. For example, we
would like to represent cascaded interconnections, as shown in Figure 2.1(b), where a
mathematical function, called a transfer function, is inside each block, and block functions
System
Input
Output
(  )
Subsystem
(  )
Subsystem
Input
Subsystem
Output
a
b
r(t)
r(t)
c(t)
c(t)
Note:  The input, r(t), stands for reference input. 
 The output, c(t), stands for controlled variable.
FIGURE 2.1
a. Block
diagram representation of a
system; b. block diagram
representation of an
interconnection of subsystems
34
Chapter 2
Modeling in the Frequency Domain

can easily be combined to yield Figure 2.1(a) for ease of analysis and design. This
convenience cannot be obtained with the differential equation.
2.2 Laplace Transform Review
A system represented by a differential equation is difﬁcult to model as a block diagram.
Thus, we now lay the groundwork for the Laplace transform, with which we can represent
the input, output, and system as separate entities. Further, their interrelationship will be
simply algebraic. Let us ﬁrst deﬁne the Laplace transform and then show how it simpliﬁes
the representation of physical systems (Nilsson, 1996).
The Laplace transform is deﬁned as
ℒ f t  Fs 
Z ∞
0
f testdt
2.1
where s  σ  jω, a complex variable. Thus, knowing f(t) and that the integral in Eq. (2.1)
exists, we can ﬁnd a function, F(s), that is called the Laplace transform of f(t).1
The notation for the lower limit means that even if f(t) is discontinuous at t  0, we
can start the integration prior to the discontinuity as long as the integral converges.
Thus, we can ﬁnd the Laplace transform of impulse functions. This property has distinct
advantages when applying the Laplace transform to the solution of differential
equations where the initial conditions are discontinuous at t  0. Using differential
equations, we have to solve for the initial conditions after the discontinuity knowing the
initial conditions before the discontinuity. Using the Laplace transform we need only
know the initial conditions before the discontinuity. See Kailath (1980) for a more
detailed discussion.
The inverse Laplace transform, which allows us to ﬁnd f(t) given F(s), is
ℒ1Fs  1
2πj
Z σj∞
σj∞
Fsestds  f tut
2.2
where
ut  1
t > 0
 0
t < 0
is the unit step function. Multiplication of f(t) by u(t) yields a time function that is zero for
t < 0.
Using Eq. (2.1), it is possible to derive a table relating f(t) to F(s) for speciﬁc cases.
Table 2.1 shows the results for a representative sample of functions. If we use the tables, we
do not have to use Eq. (2.2), which requires complex integration, to ﬁnd f(t) given F(s).
1 The Laplace transform exists if the integral of Eq. (2.1) converges. The integral will converge if
R ∞
0j f tjeσ1tdt < ∞. If j f t j < Meσ2t; 0 < t < ∞, the integral will converge if ∞> σ1 > σ2. We call σ2 the
abscissa of convergence, and it is the smallest value of σ, where s  σ  jω, for which the integral exists.
2.2 Laplace Transform Review
35

In the following example we demonstrate the use of Eq. (2.1) to ﬁnd the Laplace
transform of a time function.
In addition to the Laplace transform table, Table 2.1, we can use Laplace transform
theorems, listed in Table 2.2, to assist in transforming between f(t) and F(s). In the next
example, we demonstrate the use of the Laplace transform theorems shown in Table 2.2 to
ﬁnd f(t) given F(s).
TABLE 2.1
Laplace transform table
Item no.
f(t)
F(s)
1.
δ(t)
1
2.
u(t)
1
s
3.
tu(t)
1
s2
4.
tnut
n!
sn1
5.
eatut
1
s  a
6.
sin ωtut
ω
s2  ω2
7.
cos ωtut
s
s2  ω2
Example 2.2
Inverse Laplace Transform
Inverse Laplace Transform
PROBLEM: Find the inverse Laplace transform of F1s  1=s  32.
SOLUTION: For this example we make use of the frequency shift theorem, Item 4 of
Table 2.2, and the Laplace transform of f t  tut, Item 3 of Table 2.1. If the inverse
transform of Fs  1=s2 is tu(t), the inverse transform of Fs  a  1=s  a2 is eattut.
Hence, f 1t  e3ttut.
Example 2.1
Laplace Transform of a Time Function
Laplace Transform of a Time Function
PROBLEM: Find the Laplace transform of f t  Aeatut.
SOLUTION: Since the time function does not contain an impulse function, we can replace
the lower limit of Eq. (2.1) with 0. Hence,
Fs 
Z ∞
0
f test dt 
Z ∞
0
Aeatest dt  A
Z ∞
0
esat dt
 
A
s  a esat
∞
t0 
A
s  a
2.3
36
Chapter 2
Modeling in the Frequency Domain

Partial-Fraction Expansion
ToﬁndtheinverseLaplacetransformofacomplicatedfunction,wecanconvert thefunctionto
a sum of simpler terms for which we know the Laplace transform of each term. The result is
called a partial-fraction expansion. If F1s  Ns=Ds, where the order of N(s) is less than
the order of D(s), then a partial-fraction expansion can be made. If the order of N(s) is greater
than or equal to the order of D(s), then N(s) must be divided by D(s) successively until the
result has a remainder whose numerator is of order less than its denominator. For example, if
F1s  s3  2s2  6s  7
s2  s  5
2.4
we must perform the indicated division until we obtain a remainder whose numerator is of
order less than its denominator. Hence,
F1s  s  1 
2
s2  s  5
2.5
Taking the inverse Laplace transform, using Item 1 of Table 2.1, along with the differentiation
theorem (Item 7) and the linearity theorem (Item 3 of Table 2.2), we obtain
f 1t  dδt
dt
 δt  ℒ1
2
s2  s  5


2.6
Using partial-fraction expansion, we will be able to expand functions like Fs 
2=s2  s  5 into a sum of terms and then ﬁnd the inverse Laplace transform for each
term. We will now consider three cases and show for each case how an F(s) can be
expanded into partial fractions.
TABLE 2.2
Laplace transform theorems
Item no.
Theorem
Name
1.
ℒ f t  Fs 
R ∞
0 f testdt
Deﬁnition
2.
ℒkf t
 kFs
Linearity theorem
3.
ℒ f 1t  f 2t  F1s  F2s
Linearity theorem
4.
ℒeatf t
 Fs  a
Frequency shift theorem
5.
ℒ f t  T
 esTFs
Time shift theorem
6.
ℒ f at
 1
a F s
a
 
Scaling theorem
7.
ℒdf
dt


 sFs  f 0
Differentiation theorem
8.
ℒd2f
dt2


 s2Fs  sf 0  f ´0
Differentiation theorem
9.
ℒdnf
dtn


 snFs 
X
n
k1
snkf k10
Differentiation theorem
10.
ℒ
R t
0 f τdτ


 Fs
s
Integration theorem
11.
f ∞
 lim
s ® 0 sFs
Final value theorem1
12.
f 0
 lim
s ®∞
sFs
Initial value theorem2
1For this theorem to yield correct ﬁnite results, all roots of the denominator of F(s) must have negative real parts, and
no more than one can be at the origin.
2For this theorem to be valid, f(t) must be continuous or have a step discontinuity at t  0 (that is, no impulses or
their derivatives at t  0).
2.2 Laplace Transform Review
37

Case 1. Roots of the Denominator of F(s) Are Real and Distinct
An example of an F(s) with real and distinct roots in the denominator is
Fs 
2
s  1s  2
2.7
The roots of the denominator are distinct, since each factor is raised only to unity power. We
can write the partial-fraction expansion as a sum of terms where each factor of the original
denominator forms the denominator of each term, and constants, called residues, form the
numerators. Hence,
Fs 
2
s  1s  2 
K1
s  1 
K2
s  2
2.8
To ﬁnd K1, we ﬁrst multiply Eq. (2.8) by s  1, which isolates K1. Thus,
2
s  2  K1  s  1K2
s  2
2.9
Letting s approach 1 eliminates the last term and yields K1  2. Similarly, K2 can be found
by multiplying Eq. (2.8) by s  2 and then letting s approach 2; hence, K2  2.
Each component part of Eq. (2.8) is an F(s) in Table 2.1. Hence, f(t) is the sum of the
inverse Laplace transform of each term, or
f t  2et  2e2tut
2.10
In general, then, given an F(s) whose denominator has real and distinct roots, a partial-
fraction expansion,
Fs  Ns
Ds 
Ns
s  p1s  p2 ∙∙∙s  pm ∙∙∙s  pn

K1
s  p1 
K2
s  p2  ∙∙∙
Km
s  pm  ∙∙∙
Kn
s  pn
2.11
can be made if the order of N(s) is less than the order of D(s). To evaluate each residue, Ki,
we multiply Eq. (2.11) by the denominator of the corresponding partial fraction. Thus, if we
want to ﬁnd Km, we multiply Eq. (2.11) by s  pm and get
s  pmFs 
s  pmNs
s  p1s  p2 ∙∙∙s  pm ∙∙∙s  pn
 s  pm
K1
s  p1  s  pm
K2
s  p2  ∙∙∙ Km  ∙∙∙
 s  pm
Kn
s  pn
2.12
If we let s approach pm, all terms on the right-hand side of Eq. (2.12) go to zero except the
term Km, leaving
s  pmNs
s  p1s  p2 ∙∙∙s  pm ∙∙∙s  pn

s ® pm
 Km
2.13
The following example demonstrates the use of the partial-fraction expansion to solve
a differential equation. We will see that the Laplace transform reduces the task of ﬁnding the
solution to simple algebra.
38
Chapter 2
Modeling in the Frequency Domain

Example 2.3
Laplace Transform Solution of a Differential Equation
Laplace Transform Solution of a Differential Equation
PROBLEM: Given the following differential equation, solve for y(t) if all initial conditions
are zero. Use the Laplace transform.
d2y
dt2  12 dy
dt  32y  32ut
2.14
SOLUTION: Substitute the corresponding F(s) for each term in Eq. (2.14), using Item 2 in
Table 2.1, Items 7 and 8 in Table 2.2, and the initial conditions of y(t) and dy(t)/dt given
by y0  0 and y:0  0, respectively. Hence, the Laplace transform of Eq. (2.14) is
s2Ys  12sYs  32Ys  32
s
2.15
Solving for the response, Y(s), yields
Ys 
32
ss2  12s  32 
32
ss  4s  8
2.16
Tosolvefory(t),wenoticethatEq.(2.16)doesnotmatchanyofthetermsinTable2.1.Thus,
weformthepartial-fractionexpansionoftheright-handtermandmatcheachoftheresulting
terms with F(s) in Table 2.1. Therefore,
Ys 
32
ss  4s  8  K1
s 
K2
s  4 
K3
s  8
2.17
where, from Eq. (2.13),
K1 
32
s  4s  8

s ® 0  1
(2.18a)
K2 
32
ss  8

s ® 4  2
(2.18b)
K3 
32
ss  4

s ® 8  1
(2.18c)
Hence,
Ys  1
s 
2
s  4 
1
s  8
2.19
Since each of the three component parts of Eq. (2.19) is represented as an F(s) in
Table 2.1, y(t) is the sum of the inverse Laplace transforms of each term. Hence,
yt  1  2e4t  e8tut
2.20
Students who are using MATLAB should now run ch2p1 through ch2p8
in Appendix B. This is your ﬁrst MATLAB exercise. You will learn
how to use MATLAB to (1) represent polynomials, (2) ﬁnd roots of
polynomials, (3) multiply polynomials, and (4) ﬁnd partial-
fraction expansions. Finally, Example 2.3 will be solved using
MATLAB.
2.2 Laplace Transform Review
39

The u(t) in Eq. (2.20) shows that the response is zero until t  0. Unless otherwise
speciﬁed, all inputs to systems in the text will not start until t  0. Thus, output responses
will also be zero until t  0. For convenience, we will leave off the u(t) notation from now
on. Accordingly, we write the output response as
yt  1  2e4t  e8t
2.21
Case 2. Roots of the Denominator of F(s) Are Real and Repeated
An example of an F(s) with real and repeated roots in the denominator is
Fs 
2
s  1s  22
2.22
The roots of s  22 in the denominator are repeated, since the factor is raised to an
integer power higher than 1. In this case, the denominator root at 2 is a multiple root of
multiplicity 2.
We can write the partial-fraction expansion as a sum of terms, where each factor of the
denominator forms the denominator of each term. In addition, each multiple root generates
additional terms consisting of denominator factors of reduced multiplicity. For example, if
Fs 
2
s  1s  22 
K1
s  1 
K2
s  22 
K3
s  2
2.23
then K1  2, which can be found as previously described. K2 can be isolated by multiplying
Eq. (2.23) by s  22, yielding
2
s  1  s  22
K1
s  1  K2  s  2K3
2.24
Letting s approach 2; K2  2. To ﬁnd K3 we see that if we differentiate Eq. (2.24) with
respect to s,
2
s  12  s  2s
s  12 K1  K3
2.25
K3 is isolated and can be found if we let s approach 2. Hence, K3  2.
Each component part of Eq. (2.23) is an F(s) in Table 2.1; hence, f(t) is the sum of the
inverse Laplace transform of each term, or
f t  2et  2te2t  2e2t
2.26
If the denominator root is of higher multiplicity than 2, successive differentiation would
isolate each residue in the expansion of the multiple root.
In general, then, given an F(s) whose denominator has real and repeated roots, a
partial-fraction expansion
Fs  Ns
Ds

Ns
s  p1rs  p2 ∙∙∙s  pn

K1
s  p1r 
K2
s  p1r1  ∙∙∙
Kr
s  p1 
Kr1
s  p2  ∙∙∙
Kn
s  pn
2.27
TryIt 2.2
Use the following MATLAB
statements to help you get
Eq. (2.26).
numf=2;
denf=poly([1 2 2]);
[K,p,k]=residue...
(numf,denf)
TryIt 2.1
Use the following MATLAB
and Control System Toolbox
statement to form the linear,
time-invariant (LTI) transfer
function of Eq. (2.22).
F=zpk([],[1 2 2],2)
40
Chapter 2
Modeling in the Frequency Domain

can be made if the order of N(s) is less than the order of D(s) and the repeated roots are of
multiplicity r at p1. To ﬁnd K1 through Kr for the roots of multiplicity greater than unity,
ﬁrst multiply Eq. (2.27) by s  p1r getting F1s, which is
F1s  s  p1rFs

s  p1rNs
s  p1rs  p2 ∙∙∙s  pn
 K1  s  p1K2  s  p12K3  ∙∙∙ s  p1r1Kr
 Kr1s  p1r
s  p2
 ∙∙∙ Kns  p1r
s  pn
2.28
Immediately, we can solve for K1 if we let s approach p1. We can solve for K2 if we
differentiate Eq. (2.28) with respect to s and then let s approach p1. Subsequent
differentiation will allow us to ﬁnd K3 through Kr. The general expression for K1 through
Kr for the multiple roots is
Ki 
1
i  1!
d i1F1s
ds i1

s ® p1
i  1; 2; . . .; r;
0!  1
2.29
Case 3. Roots of the Denominator of F(s) Are Complex or Imaginary
An example of F(s) with complex roots in the denominator is
Fs 
3
ss2  2s  5
2.30
This function can be expanded in the following form:
3
ss2  2s  5  K1
s  K2s  K3
s2  2s  5
2.31
K1 is found in the usual way to be 3
5. K2 and K3 can be found by ﬁrst multiplying Eq. (2.31)
by the lowest common denominator, ss2  2s  5, and clearing the fractions. After
simpliﬁcation with K1  3
5, we obtain
3 
K2  3
5
	

s2 
K3  6
5
	

s  3
2.32
Balancing coefﬁcients,
K2  3
5


 0 and
K3  6
5


 0. Hence K2   3
5 and K3   6
5.
Thus,
Fs 
3
ss2  2s  5  3=5
s  3
5
s  2
s2  2s  5
2.33
The last term can be shown to be the sum of the Laplace transforms of an
exponentially damped sine and cosine. Using Item 7 in Table 2.1 and Items 2 and 4 in
Table 2.2, we get
ℒAeatcos ωt 
As  a
s  a2  ω2
2.34
TryIt 2.3
Use the following MATLAB
and Control System Toolbox
statement to form the LTI
transfer function of Eq. (2.30).
F=tf([3],[1 2 5 0])
2.2 Laplace Transform Review
41

Similarly,
ℒBeatsin ωt 
Bω
s  a2  ω2
2.35
Adding Eqs. (2.34) and (2.35), we get
ℒAeatcos ωt  Beatsin ωt  As  a  Bω
s  a2  ω2
2.36
We now convert the last term of Eq. (2.33) to the form suggested by Eq. (2.36) by
completing the squares in the denominator and adjusting terms in the numerator without
changing its value. Hence,
Fs  3=5
s  3
5
s  1  1=22
s  12  22
2.37
Comparing Eq. (2.37) to Table 2.1 and Eq. (2.36), we ﬁnd
f t  3
5  3
5 et
cos 2t  1
2 sin 2t
	

2.38
In order to visualize the solution, an alternate form of f(t), obtained by trigonometric
identities, is preferable. Using the amplitudes of the cos and sin terms, we factor out
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
from the term in parentheses and obtain
f t  3
5  3
5
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
et
1
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
cos 2t 
1=2
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
sin 2t
0
B
@
1
C
A
2.39
Letting 1=
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
 cos ϕ and 1=2=
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
 sin ϕ,
f t  3
5  3
5
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12  1=22
q
etcos ϕ cos 2t  sin ϕ sin 2t
2.40
or
f t  0:6  0:671etcos 2t  ϕ
2.41
where ϕ  arctan 0:5  26:57°. Thus, f(t) is a constant plus an exponentially damped
sinusoid.
In general, then, given an F(s) whose denominator has complex or purely imaginary
roots, a partial-fraction expansion,
Fs  Ns
Ds 
Ns
s  p1s2  as  b ∙∙∙

K1
s  p1  K2s  K3
s2  as  b  ∙∙∙
2.42
TryIt 2.4
Use the following MATLAB
and Symbolic Math Toolbox
statements to get Eq. (2.38) from
Eq. (2.30).
syms s
f=ilaplace...
(3/(s*(s^2+2*s+5)));
pretty(f)
42
Chapter 2
Modeling in the Frequency Domain

can be made if the order of N(s) is less than the order of D(s) p1 is real, and s2  as  b
has complex or purely imaginary roots. The complex or imaginary roots are expanded
with K2s  K3 terms in the numerator rather than just simply Ki, as in the case of real roots.
The Ki’s in Eq. (2.42) are found through balancing the coefﬁcients of the equation
after clearing fractions. After completing the squares on s2  as  b and adjusting the
numerator, K2s  K3=s2  as  b can be put into the form shown on the right-hand side
of Eq. (2.36).
Finally, the case of purely imaginary roots arises if a  0 in Eq. (2.42). The
calculations are the same.
Another method that follows the technique used for the partial-fraction expansion of
F(s) with real roots in the denominator can be used for complex and imaginary roots.
However, the residues of the complex and imaginary roots are themselves complex
conjugates. Then, after taking the inverse Laplace transform, the resulting terms can be
identiﬁed as
ejθ  ejθ
2
 cos θ
2.43
and
ejθ  ejθ
2j
 sin θ
2.44
For example, the previous F(s) can also be expanded in partial fractions as
Fs 
3
ss2  2s  5 
3
ss  1  j2s  1  j2
 K1
s 
K2
s  1  j2 
K3
s  1  j2
2.45
Finding K2,
K2 
3
ss  1  j2

s ® 1j2   3
20 2  j1
2.46
Similarly, K3 is found to be the complex conjugate of K2, and K1 is found as previously
described. Hence,
Fs  3=5
s  3
20
2  j1
s  1  j2 
2  j1
s  1  j2
	

2.47
from which
f t  3
5  3
20 2  j1e1j2t  2  j1e1j2t


 3
5  3
20 et 4 e j2t  ej2t
2
	

 2 e j2t  ej2t
2j
	



2.48
Using Eqs. (2.43) and (2.44), we get
f t  3
5  3
5 et
cos 2t  1
2 sin 2t
	

 0:6  0:671etcos 2t  ϕ
2.49
where ϕ  arctan 0:5  26:57°.
TryIt 2.5
Use the following MATLAB
statements to help you get
Eq. (2.47).
numf=3
denf=[1 2 5 0]
[K,p,k]=residue...
(numf, denf)
2.2 Laplace Transform Review
43

Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch2sp1 and ch2sp2 in Appendix F at www.wiley.com/
college/nise. You will learn how to construct symbolic objects and
then ﬁnd the inverse Laplace and Laplace transforms of frequency
and time functions, respectively. The examples in Case 2 and Case 3
in this section will be solved using the Symbolic Math Toolbox.
2.3 The Transfer Function
In the previous section we deﬁned the Laplace transform and its inverse. We presented the
idea of the partial-fraction expansion and applied the concepts to the solution of differential
equations. We are now ready to formulate the system representation shown in Figure 2.1 by
establishing a viable deﬁnition for a function that algebraically relates a system’s output to
its input. This function will allow separation of the input, system, and output into three
separate and distinct parts, unlike the differential equation. The function will also allow us to
algebraically combine mathematical representations of subsystems to yield a total system
representation.
Let us begin by writing a general nth-order, linear, time-invariant differential
equation,
an
dnct
dtn
 an1
dn1ct
dtn1
 ∙∙∙ a0ct  bm
dmrt
dtm
 bm1
dm1rt
dtm1
 ∙∙∙ b0rt
2.50
where c(t) is the output, r(t) is the input, and the ai’s, bi’s, and the form of the differential
equation represent the system. Taking the Laplace transform of both sides,
ansnCs  an1sn1Cs  ∙∙∙ a0Cs  initial condition
terms involving ct
 bmsmRs  bm1sm1Rs  ∙∙∙ b0Rs  initial condition
terms involving rt
2.51
Skill-Assessment Exercise 2.1
PROBLEM: Find the Laplace transform of f t  te5t.
ANSWER:
Fs  1=s  52
The complete solution is at www.wiley.com/college/nise.
Skill-Assessment Exercise 2.2
PROBLEM: Find the inverse Laplace transform of Fs  10=ss  2s  32.
ANSWER:
f t  5
9  5e2t  10
3 te3t  40
9 e3t
The complete solution is at www.wiley.com/college/nise.
44
Chapter 2
Modeling in the Frequency Domain

Equation (2.51) is a purely algebraic expression. If we assume that all initial conditions are
zero, Eq. (2.51) reduces to
ansn  an1sn1  ∙∙∙ a0Cs  bmsm  bm1sm1  ∙∙∙ b0Rs
2.52
Now form the ratio of the output transform, C(s), divided by the input transform, R(s):
Cs
Rs  Gs  bmsm  bm1sm1  ∙∙∙ b0
ansn  an1sn1  ∙∙∙ a0
2.53
Notice that Eq. (2.53) separates the output, C(s), the input, R(s), and the system, which is the
ratio of polynomials in s on the right. We call this ratio, G(s), the transfer function and
evaluate it with zero initial conditions.
The transfer function can be represented as a block diagram, as shown
in Figure 2.2, with the input on the left, the output on the right, and the
system transfer function inside the block. Notice that the denominator of
the transfer function is identical to the characteristic polynomial of the
differential equation. Also, we can ﬁnd the output, C(s) by using
Cs  RsGs
2.54
Let us apply the concept of a transfer function to an example and then use the result to ﬁnd
the response of the system.
Students who are using MATLAB should now run ch2p9 through ch2p12
in Appendix B. You will learn how to use MATLAB to create transfer
functions with numerators and denominators in polynomial or fac-
tored form. You will also learn how to convert between polynomial
and factored forms. Finally, you will learn how to use MATLAB to
plot time functions.
Example 2.4
Transfer Function for a Differential Equation
Transfer Function for a Differential Equation
PROBLEM: Find the transfer function represented by
dct
dt  2ct  rt
2.55
SOLUTION: Taking the Laplace transform of both sides, assuming zero initial conditions,
we have
sCs  2Cs  Rs
2.56
The transfer function, G(s), is
Gs  Cs
Rs 
1
s  2
2.57
C(s)
R(s)
(bmsm + bm–1sm–1 + . . . + b0)
(ansn + an–1sn–1 + . . . + a0)
FIGURE 2.2
Block diagram of a transfer
function
2.3 The Transfer Function
45

Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch2sp3 in Appendix F at www.wiley.com/college/nise.
You will learn how to use the Symbolic Math Toolbox to simplify
the input of complicated transfer functions as well as improve
readability. You will learn how to enter a symbolic transfer
function and convert it to a linear, time-invariant (LTI) object as
presented in Appendix B, ch2p9.
Example 2.5
System Response from the Transfer Function
System Response from the Transfer Function
PROBLEM: Use the result of Example 2.4 to ﬁnd the response, c(t) to an input,
rt  ut, a unit step, assuming zero initial conditions.
SOLUTION: To solve the problem, we use Eq. (2.54), where Gs  1=s  2 as found
in Example 2.4. Since rt  ut; Rs  1=s, from Table 2.1. Since the initial conditions
are zero,
Cs  RsGs 
1
ss  2
2.58
Expanding by partial fractions, we get
Cs  1=2
s  1=2
s  2
2.59
Finally, taking the inverse Laplace transform of each term yields
ct  1
2  1
2 e2t
2.60
TryIt 2.7
Use the following MATLAB
statements to plot Eq. (2.60) for t
from 0 to 1 sat intervals of 0.01 s.
t=0:0.01:3;
plot...
(t,(1/2-1/2*exp(-2*t)))
TryIt 2.6
Use the following MATLAB
and Symbolic Math Toolbox
statements to help you get
Eq. (2.60).
syms s
C=1/(s*(s + 2))
C=ilaplace(C)
Skill-Assessment Exercise 2.3
PROBLEM: Find the transfer function, GsCs=Rs, corresponding to the differential
equation d3c
dt3 3d2c
dt2 7dc
dt 5cd2r
dt2 4dr
dt 3r.
ANSWER:
Gs  Cs
Rs 
s2  4s  3
s3  3s2  7s  5
The complete solution is at www.wiley.com/college/nise.
Skill-Assessment Exercise 2.4
PROBLEM: Find the differential equation corresponding to the transfer function,
Gs 
2s  1
s2  6s  2
ANSWER:
d2c
dt2  6 dc
dt  2c  2 dr
dt  r
The complete solution is at www.wiley.com/college/nise.
46
Chapter 2
Modeling in the Frequency Domain

In general, a physical system that can be represented by a linear, time-invariant
differential equation can be modeled as a transfer function. The rest of this chapter will be
devoted to the task of modeling individual subsystems. We will learn how to represent
electrical networks, translational mechanical systems, rotational mechanical systems, and
electromechanical systems as transfer functions. As the need arises, the reader can consult
the Bibliography at the end of the chapter for discussions of other types of systems, such as
pneumatic, hydraulic, and heat-transfer systems (Cannon, 1967).
2.4 Electrical Network Transfer Functions
In this section, we formally apply the transfer function to the mathematical modeling of
electric circuits including passive networks and operational ampliﬁer circuits. Subsequent
sections cover mechanical and electromechanical systems.
Equivalent circuits for the electric networks that we work with ﬁrst consist of three
passive linear components: resistors, capacitors, and inductors.2 Table 2.3 summarizes the
components and the relationships between voltage and current and between voltage and
charge under zero initial conditions.
We now combine electrical components into circuits, decide on the input and output,
and ﬁnd the transfer function. Our guiding principles are Kirchhoff’s laws. We sum voltages
around loops or sum currents at nodes, depending on which technique involves the least
Skill-Assessment Exercise 2.5
PROBLEM: Find the ramp response for a system whose transfer function is
Gs 
s
s  4s  8
ANSWER:
ct  1
32  1
16 e4t  1
32 e8t
The complete solution is at www.wiley.com/college/nise.
2 Passive means that there is no internal source of energy.
TABLE 2.3
Voltage-current, voltage-charge, and impedance relationships for capacitors, resistors, and inductors
Component
Voltage-current
Current-voltage
Voltage-charge
Impedance
Zs  Vs=Is
Admittance
Ys  Is=Vs
Capacitor
vt  1
C
Z 1
0
iτdτ
it  C dvt
dt
vt  1
C qt
1
Cs
Cs
Resistor
vt  Rit
it  1
R vt
vt  R dqt
dt
R
1
R  G
Inductor
vt  L dit
dt
it  1
L
Z 1
0
vτdτ
vt  L d2qt
dt2
Ls
1
Ls
Note: The following set of symbols and units is used throughout this book: v(t)  V (volts), i(t)  A (amps), q(t)  Q (coulombs), C  F (farads),
R  Ω (ohms), G  Ω (mhos), L  H (henries).
2.4 Electrical Network Transfer Functions
47

effort in algebraic manipulation, and then equate the result to zero. From these relationships
we can write the differential equations for the circuit. Then we can take the Laplace
transforms of the differential equations and ﬁnally solve for the transfer function.
Simple Circuits via Mesh Analysis
Transfer functions can be obtained using Kirchhoff’s voltage law and summing voltages
around loops or meshes.3 We call this method loop or mesh analysis and demonstrate it in
the following example.
Example 2.6
Transfer Function—Single Loop via the
Differential Equation
Transfer Function—Single Loop via the
Differential Equation
PROBLEM: Find the transfer function relating the capacitor voltage, VCs, to
the input voltage, V(s) in Figure 2.3.
SOLUTION: In any problem, the designer must ﬁrst decide what the input and
output should be. In this network, several variables could have been chosen to be the
output—for example, the inductor voltage, the capacitor voltage, the resistor voltage,
orthecurrent.Theproblemstatement,however,isclearinthiscase:Wearetotreatthe
capacitor voltage as the output and the applied voltage as the input.
Summing the voltages around the loop, assuming zero initial conditions,
yields the integro-differential equation for this network as
L dit
dt  Rit  1
C
Z t
0
iτdτ  vt
2.61
Changing variables from current to charge using it  dqt=dt yields
L d2qt
dt2
 R dqt
dt
 1
C qt  vt
2.62
From the voltage-charge relationship for a capacitor in Table 2.3,
qt  CvCt
2.63
Substituting Eq. (2.63) into Eq. (2.62) yields
LC d2vCt
dt2
 RC dvCt
dt
 vCt  vt
2.64
Taking the Laplace transform assuming zero initial conditions, rearranging terms, and
simplifying yields
LCs2  RCs  1VCs  Vs
2.65
Solving for the transfer function, VCs=Vs, we obtain
VCs
Vs 
1=LC
s2  R
L s  1
LC
2.66
as shown in Figure 2.4.
3 A particular loop that resembles the spaces in a screen or fence is called a mesh.
R
L
–
v(t)
i(t)
vC (t)
C
+
+–
FIGURE 2.3
RLC network
1
LC
V(s)
VC (s)
s2 + R
L s + 1
LC
FIGURE 2.4
Block diagram of
series RLC electrical network
48
Chapter 2
Modeling in the Frequency Domain

Let us now develop a technique for simplifying the solution for future problems. First,
take the Laplace transform of the equations in the voltage-current column of Table 2.3
assuming zero initial conditions.
For the capacitor,
Vs  1
Cs Is
2.67
For the resistor,
Vs  RIs
2.68
For the inductor,
Vs  LsIs
2.69
Now deﬁne the following transfer function:
Vs
Is  Zs
2.70
Notice that this function is similar to the deﬁnition of resistance, that is, the ratio of
voltage to current. But, unlike resistance, this function is applicable to capacitors and
inductors and carries information on the dynamic behavior of the component, since it
represents an equivalent differential equation. We call this particular transfer function
impedance. The impedance for each of the electrical elements is shown in Table 2.3.
Let us now demonstrate how the concept of impedance simpliﬁes the solution for the
transfer function. The Laplace transform of Eq. (2.61), assuming zero initial conditions, is
Ls  R  1
Cs
	

Is  Vs
2.71
Notice that Eq. (2.71), which is in the form
Sum of impedancesIs  Sum of applied voltages
2.72
suggests the series circuit shown in Figure 2.5. Also notice that the circuit of Figure 2.5
could have been obtained immediately from the circuit of Figure 2.3 simply by replacing
each element with its impedance. We call this altered circuit the transformed circuit.
Finally, notice that the transformed circuit leads immediately to Eq. (2.71) if we add
impedances in series as we add resistors in series. Thus, rather than writing the differential
equation ﬁrst and then taking the Laplace transform, we can draw the transformed circuit
andobtaintheLaplacetransformofthedifferentialequationsimplybyapplyingKirchhoff’s
voltage law to the transformed circuit. We summarize the steps as follows:
1. Redraw the original network showing all time variables, such as v(t), i(t), and vCt, as
Laplace transforms V(s), I(s), and VCs, respectively.
2. Replace the component values with their impedance values. This replacement is similar
to the case of dc circuits, where we represent resistors with their resistance values.
We now redo Example 2.6 using the transform methods just described and bypass the
writing of the differential equation.
R
Ls
I(s)
1
Cs
V(s)
+–
–
VC (s)
+
FIGURE 2.5
Laplace-transformed
network
2.4 Electrical Network Transfer Functions
49

Simple Circuits via Nodal Analysis
Transfer functions also can be obtained using Kirchhoff’s current law and summing currents
ﬂowing from nodes. We call this method nodal analysis. We now demonstrate this principle
by redoing Example 2.6 using Kirchhoff’s current law and the transform methods just
described to bypass writing the differential equation.
Example 2.8
Transfer Function—Single Node via Transform Methods
Transfer Function—Single Node via Transform Methods
PROBLEM: Repeat Example 2.6 using nodal analysis and without writing a differential
equation.
SOLUTION: Thetransfer functioncan beobtained bysummingcurrentsﬂowing outof the
node whose voltage is VCs in Figure 2.5. We assume that currents leaving the node are
positive and currents entering the node are negative. The currents consist of the current
through the capacitor and the current ﬂowing through the series resistor and inductor. From
Eq. (2.70), each Is  Vs=Zs. Hence,
VCs
1=Cs  VCs  Vs
R  Ls
 0
2.76
where VCs=1=Cs is the current ﬂowing out of the node through the capacitor, and
VCs  Vs=R  Ls is the current ﬂowing out of the node through the series resistor
and inductor. Solving Eq. (2.76) for the transfer function, VCs=Vs, we arrive at the same
result as Eq. (2.66).
Example 2.7
Transfer Function—Single Loop via Transform Methods
Transfer Function—Single Loop via Transform Methods
PROBLEM: Repeat Example 2.6 using mesh analysis and transform methods without
writing a differential equation.
SOLUTION: Using Figure 2.5 and writing a mesh equation using the impedances as we
would use resistor values in a purely resistive circuit, we obtain
Ls  R  1
Cs
	

Is  Vs
2.73
Solving for I(s)/V(s),
Is
Vs 
1
Ls  R  1
Cs
2.74
But the voltage across the capacitor, VCs, is the product of the current and the impedance
of the capacitor. Thus,
VCs  Is 1
Cs
2.75
Solving Eq. (2.75) for I(s) substituting I(s) into Eq. (2.74), and simplifying yields the same
result as Eq. (2.66).
50
Chapter 2
Modeling in the Frequency Domain

Simple Circuits via Voltage Division
Example 2.6 can be solved directly by using voltage division on the transformed network.
We now demonstrate this technique.
The previous example involves a simple, single-loop electrical network. Many
electrical networks consist of multiple loops and nodes, and for these circuits we must
write and solve simultaneous differential equations in order to ﬁnd the transfer function, or
solve for the output.
Complex Circuits via Mesh Analysis
To solve complex electrical networks—those with multiple loops and nodes—using mesh
analysis, we can perform the following steps:
1. Replace passive element values with their impedances.
2. Replace all sources and time variables with their Laplace transform.
3. Assume a transform current and a current direction in each mesh.
4. Write Kirchhoff’s voltage law around each mesh.
5. Solve the simultaneous equations for the output.
6. Form the transfer function.
Let us look at an example.
Example 2.10
Transfer Function—Multiple Loops
Transfer Function—Multiple Loops
PROBLEM: Given the network of Figure 2.6(a), ﬁnd the transfer function, I2s=Vs.
SOLUTION: The ﬁrst step in the solution is to convert the network into Laplace transforms
forimpedancesandcircuitvariables,assumingzeroinitialconditions.Theresultisshownin
Figure 2.6(b). The circuit with which we are dealing requires two simultaneous equations to
solve for the transfer function. These equations can be found by summing voltages around
Example 2.9
Transfer Function—Single Loop via Voltage Division
Transfer Function—Single Loop via Voltage Division
PROBLEM: Repeat Example 2.6 using voltage division and the transformed circuit.
SOLUTION: The voltage across the capacitor is some proportion of the input voltage,
namely the impedance of the capacitor divided by the sum of the impedances. Thus,
VCs 
1=Cs
Ls  R  1
Cs
	

 Vs
2.77
Solving for the transfer function, VCs=Vs, yields the same result as Eq. (2.66).
Review Examples 2.6 through 2.9. Which method do you think is easiest for this
circuit?
2.4 Electrical Network Transfer Functions
51

eachmeshthroughwhichtheassumedcurrents,I1sandI2s,ﬂow.AroundMesh1,where
I1s ﬂows,
R1I1s  LsI1s  LsI2s  Vs
2.78
Around Mesh 2, where I2s ﬂows,
LsI2s  R2I2s  1
Cs I2s  LsI1s  0
2.79
Combining terms, Eqs. (2.78) and (2.79) become simultaneous equations in I1s and I2s:
R1  LsI1s
 LsI2s  Vs
(2.80a)
LsI1s 
Ls  R2  1
Cs
	

I2s  0
(2.80b)
We can use Cramer’s rule (or any other method for solving simultaneous equations)
to solve Eq. (2.80) for I2s.4 Hence,
I2s 

R1  Ls
Vs
Ls
0

Δ
 LsVs
Δ
2.81
where
Δ 

R1  Ls
Ls
Ls
Ls  R2  1
Cs
	


4 See Appendix G (Section G.4) at www.wiley.com/college/nise for Cramer’s rule.
FIGURE 2.6
a. Two-loop
electrical network;
b. transformed two-loop
electrical network; c. block
diagram
52
Chapter 2
Modeling in the Frequency Domain

Complex Circuits via Nodal Analysis
Often, the easiest way to ﬁnd the transfer function is to use nodal analysis rather than mesh
analysis. The number of simultaneous differential equations that must be written is equal to
the number of nodes whose voltage is unknown. In the previous example we wrote
simultaneous mesh equations using Kirchhoff’s voltage law. For multiple nodes we use
Kirchhoff’s current law and sum currents ﬂowing from each node. Again, as a convention,
currents ﬂowing from the node are assumed to be positive, and currents ﬂowing into the
node are assumed to be negative.
Before progressing to an example, let us ﬁrst deﬁne admittance, Y(s), as the reciprocal
of impedance, or
Ys 
1
Zs  Is
Vs
2.84
When writing nodal equations, it can be more convenient to represent circuit elements by
their admittance. Admittances for the basic electrical components are shown in Table 2.3.
Let us look at an example.
Forming the transfer function, G(s), yields
Gs  I2s
Vs  Ls
Δ 
LCs2
R1  R2LCs2  R1R2C  Ls  R1
2.82
as shown in Figure 2.6(c).
We have succeeded in modeling a physical network as a transfer function: The
network of Figure 2.6(a) is now modeled as the transfer function of Figure 2.6(c). Before
leaving the example, we notice a pattern ﬁrst illustrated by Eq. (2.72). The form that
Eqs. (2.80) take is
Sum of
impedances
around Mesh 1
2
4
3
5I1s 
Sum of
impedances
common to the
two meshes
2
6664
3
7775I2s 
Sum of applied
voltages around
Mesh 1
2
4
3
5
(2.83a)

Sum of
impedances
common to the
two meshes
2
6664
3
7775I1s 
Sum of
impedances
around Mesh 2
2
4
3
5I2s 
Sum of applied
voltages around
Mesh 2
2
4
3
5
(2.83b)
Recognizing the form will help us write such equations rapidly; for example, mechanical
equations of motion (covered in Sections 2.5 and 2.6) have the same form.
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch2sp4 in Appendix F at www.wiley.com/college/nise,
where Example 2.10 is solved. You will learn how to use the Symbolic
Math Toolbox to solve simultaneous equations using Cramer’s rule.
Speciﬁcally, the Symbolic Math Toolbox will be used to solve for
the transfer function in Eq. (2.82) using Eq. (2.80).
2.4 Electrical Network Transfer Functions
53

Another way to write node equations is to replace voltage sources by current sources.
A voltage source presents a constant voltage to any load; conversely, a current source
delivers a constant current to any load. Practically, a current source can be constructed from
a voltage source by placing a large resistance in series with the voltage source. Thus,
variations in the load do not appreciably change the current because the current is
determined approximately by the large series resistor and the voltage source. Theoretically,
we rely on Norton’s theorem, which states that a voltage source, V(s), in series with
an impedance, Zss, can be replaced by a current source, Is  Vs=Zss, in parallel
with Zss.
In order to handle multiple-node electrical networks, we can perform the following
steps:
1. Replace passive element values with their admittances.
2. Replace all sources and time variables with their Laplace transform.
3. Replace transformed voltage sources with transformed current sources.
Example 2.11
Transfer Function—Multiple Nodes
Transfer Function—Multiple Nodes
PROBLEM: Find the transfer function, VCs=Vs, for the circuit in Figure 2.6(b). Use
nodal analysis.
SOLUTION: For this problem, we sum currents at the nodes rather than sum voltages
around the meshes. From Figure 2.6(b) the sum of currents ﬂowing from the nodes
marked VLs and VCs are, respectively,
VLs  Vs
R1
 VLs
Ls
 VLs  VCs
R2
 0
(2.85a)
CsVCs  VCs  VLs
R2
 0
(2.85b)
Rearranging and expressing the resistances as conductances,5 G1  1=R1 and G2  1=R2,
we obtain,
G1  G2  1
Ls
	

VLs
 G2VCs  VsG1
(2.86a)
G2VLs  G2  CsVCs  0
(2.86b)
Solving for the transfer function, VCs=Vs, yields Eq. (2.87) as shown in Figure 2.7.
VCs
Vs 
G1G2
C
s
G1  G2s2  G1G2L  C
LC
s  G2
LC
2.87
G1G2
C
V(s)
VC (s)
(G1 + G2)s2 + G1G2L + C s + LC
 G2
LC
s
FIGURE 2.7
Block diagram of the network of
Figure 2.6
5 In general, admittance is complex. The real part is called conductance and the imaginary part is called susceptance.
But when we take the reciprocal of resistance to obtain the admittance, a purely real quantity results. The reciprocal
of resistance is called conductance.
54
Chapter 2
Modeling in the Frequency Domain

4. Write Kirchhoff’s current law at each node.
5. Solve the simultaneous equations for the output.
6. Form the transfer function.
Let us look at an example.
A Problem-Solving Technique
In all of the previous examples, we haveseena repeating pattern in the equations that we can use
to our advantage. If we recognize this pattern, we need not write the equations component by
component; we can sum impedances around a mesh in the case of mesh equations or sum
admittances at a node in the case of node equations. Let us now look at a three-loop electrical
network and write the mesh equations by inspection to demonstrate the process.
Example 2.12
Transfer Function—Multiple Nodes with Current Sources
Transfer Function—Multiple Nodes with Current Sources
PROBLEM: For the network of Figure 2.6, ﬁnd the transfer function,
VCs=Vs, using nodal analysis and a transformed circuit with current
sources.
SOLUTION: Convertallimpedancestoadmittancesandallvoltagesources
in series with an impedance to current sources in parallel with an admittance
using Norton's theorem.
Redrawing Figure 2.6(b) to reﬂect the changes, we obtain Figure 2.8,
where G1  1=R1; G2  1=R2, and the node voltages—the voltages across
the inductor and the capacitor—have been identiﬁed as VLs and VCs,
respectively. Using the general relationship, Is  YsVs, and summing
currents at the node VLs,
G1VLs  1
Ls VLs  G2VLs  VCs  VsG1
2.88
Summing the currents at the node VCs yields
CsVCs  G2VCs  VLs  0
2.89
Combining terms, Eqs. (2.88) and (2.89) become simultaneous equations in VCs and
VLs, which are identical to Eq. (2.86) and lead to the same solution as Eq. (2.87).
An advantage of drawing this circuit lies in the form of Eq. (2.86) and its direct
relationship to Figure 2.8, namely
Sum of admittances
connected to Node 1


VLs 
Sum of admittances
common to the two
nodes
2
4
3
5VCs 
Sum of applied
currents at Node 1


(2.90a)

Sum of admittances
common to the two
nodes
2
4
3
5VLs 
Sum of admittances
connected to Node 2


VCs 
Sum of applied
currents at Node 2


(2.90b)
1
Ls
V(s)G1
G1
Cs
VL(s)
G2
VC(s)
FIGURE 2.8
Transformed network ready
for nodal analysis
2.4 Electrical Network Transfer Functions
55

Example 2.13
Mesh Equations via Inspection
Mesh Equations via Inspection
PROBLEM: Write, but do not solve, the mesh equations for the network shown in
Figure 2.9.
SOLUTION: Each of the previous problems has illustrated that the mesh equations and
nodal equations have a predictable form. We use that knowledge to solve this three-loop
problem. The equation for Mesh 1 will have the following form:
Sum of
impedances
around Mesh 1
2
664
3
775I1s 
Sum of
impedances
common to
Mesh 1 and
Mesh 2
2
666666664
3
777777775
I2s

Sum of
impedances
common to
Mesh 1 and
Mesh 3
2
666666664
3
777777775
I3s 
Sum of applied
voltages around
Mesh 1
2
664
3
775
2.91
Similarly, Meshes 2 and 3, respectively, are

Sum of
impedances
common to
Mesh 1 and
Mesh 2
2
6666664
3
7777775
I1s 
Sum of
impedances
around Mesh 2
2
64
3
75I2s 
Sum of
impedances
common to
Mesh 2 and
Mesh 3
2
6666664
3
7777775
I3s 
Sum of appied
voltages around
Mesh 2
2
64
3
75
2.92
V(s)
1
4s
1s
2s
1
I1(s)
I2(s)
I3(s)
3s
+–
FIGURE 2.9
Three-loop
electrical network
56
Chapter 2
Modeling in the Frequency Domain

Passive electrical circuits were the topic of discussion up to this point. We now discuss
a class of active circuits that can be used to implement transfer functions. These are circuits
built around an operational ampliﬁer.
Operational Ampliﬁers
An operational ampliﬁer, pictured in Figure 2.10(a), is an electronic ampliﬁer used as a
basic building block to implement transfer functions. It has the following characteristics:
1. Differential input, v2t  v1t
2. High input impedance, Zi  ∞(ideal)
3. Low output impedance, Zo  0 (ideal)
4. High constant gain ampliﬁcation, A  ∞(ideal)
The output, vot, is given by
vot  A v2t  v1t


2.95
Inverting Operational Ampliﬁer
If v2t is grounded, the ampliﬁer is called an inverting operational ampliﬁer, as shown in
Figure 2.10(b). For the inverting operational ampliﬁer, we have
vot  Av1t
2.96
and

Sum of
impedances
common to
Mesh 1 and
Mesh 3
2
6666664
3
7777775
I1s

Sum of
impedances
common to
Mesh 2 and
Mesh 3
2
6666664
3
7777775
I2s

Sum of
impedances
around Mesh 3
2
64
3
75I3s 
Sum of applied
voltages around
Mesh 3
2
64
3
75
2.93
Substituting the values from Figure 2.9 into Eqs. (2.91) through (2.93) yields
 2s  2I1s  2s  1I2s
 I3s  Vs
(2.94a)
2s  1I1s  9s  1I2s
 4sI3s  0
(2.94b)
I1s
 4sI2s 
4s  1  1
s
	

I3s  0
(2.94c)
which can be solved simultaneously for any desired transfer function, for example,
I3s=Vs.
TryIt 2.8
Use the following MATLAB and
Symbolic Math Toolbox
statements to help you solve for
the electrical currents in
Eq. (2.94).
syms s I1 I2 I3 V
A=[(2*s + 2) (2*s + 1)...
1
(2*s + 1) (9*s + 1)...
4*s
1 4*s...
(4*s + 1 + 1/s)];
B=[I1;I2;I3];
C=[V;0;0];
B=inv(A)*C;
pretty(B)
2.4 Electrical Network Transfer Functions
57

If two impedances are connected to the inverting operational ampliﬁer as shown in
Figure 2.10(c), we can derive an interesting result if the ampliﬁer has the characteristics
mentioned in the beginning of this subsection. If the input impedance to the ampliﬁer is
high, then by Kirchhoff’s current law Ias  0 and I1s  I2s. Also, since the gain A is
large, v1t ≈0. Thus, I1s  Vi s=Z1s, and I2s  Vos=Z2s. Equating the two
currents, Vos=Z2s  Vi s=Z1s, or the transfer function of the inverting operational
ampliﬁer conﬁgured as shown in Figure 2.10(c) is
Vos
Vi s   Z2s
Z1s
2.97
Example 2.14
Transfer Function—Inverting Operational Ampliﬁer Circuit
Transfer Function—Inverting Operational Ampliﬁer Circuit
PROBLEM: Find the transfer function, Vos=Vis, for the circuit given in Figure 2.11.
R2 =
220 kΩ
vo(t)
C2 =
0.1 μF
C1 =
5.6 μF
R1 =
360 kΩ
vi(t)
v1(t)
+
–
FIGURE 2.11
Inverting
operational ampliﬁer circuit for
Example 2.14
A
(a)
(c)
+v1(t)
+v2(t)
vo(t)
Vi(s)
I2(s)
Vo(s)
I1(s)
Ia(s)
Z1(s)
A
(b)
vo(t)
v1(t)
V1(s)
Z2(s)
+V
–V
+
–
+
–
+
–
FIGURE 2.10
a. Operational
ampliﬁer; b. schematic for an
inverting operational ampliﬁer;
c. inverting operational
ampliﬁer conﬁgured for transfer
function realization. Typically,
the ampliﬁer gain, A, is omitted.
58
Chapter 2
Modeling in the Frequency Domain

Noninverting Operational Ampliﬁer
Another circuit that can be analyzed for its transfer function is the noninverting
operational ampliﬁer circuit shown in Figure 2.12. We now derive the transfer function.
We see that
Vos  A Vis  V1s


2.101
But, using voltage division,
V1s 
Z1s
Z1s  Z2s Vos
2.102
Substituting Eq. (2.102) into Eq. (2.101), rearranging, and simplifying, we obtain
Vos
Vis 
A
1  AZ1s= Z1s  Z2s


2.103
For large A, we disregard unity in the denominator and Eq. (2.103) becomes
Vos
Vis  Z1s  Z2s
Z1s
2.104
Let us now look at an example.
SOLUTION: The transfer function of the operational ampliﬁer circuit is given by
Eq. (2.97). Since the admittances of parallel components add, Z1s is the reciprocal of
the sum of the admittances, or
Z1s 
1
C1s  1
R1

1
5:6  106s 
1
360  103
 360  103
2:016s  1
2.98
For Z2s the impedances add, or
Z2s  R2  1
C2s  220  103  107
s
2.99
Substituting Eqs. (2.98) and (2.99) into Eq. (2.97) and simplifying, we get
Vos
Vis  1:232 s2  45:95s  22:55
s
2.100
The resulting circuit is called a PID controller and can be used to improve the
performance of a control system. We explore this possibility further in Chapter 9.
–
+
Z2(s)
Z1(s)
V1(s)
Vi(s)
Vo(s)
FIGURE 2.12
General
noninverting operational
ampliﬁer circuit
2.4 Electrical Network Transfer Functions
59

Skill-Assessment Exercise 2.6
PROBLEM: Find the transfer function, Gs  VLs=Vs, for the circuit given in
Figure 2.14. Solve the problem two ways—mesh analysis and nodal analysis. Show that
the two methods yield the same result.
ANSWER: VLs=Vs  s2  2s  1=s2  5s  2
The complete solution is at www.wiley.com/college/nise.
Example 2.15
Transfer Function—Noninverting Operational
Ampliﬁer Circuit
Transfer Function—Noninverting Operational
Ampliﬁer Circuit
PROBLEM: Find the transfer function, Vos=Vis, for the circuit given in Figure 2.13.
SOLUTION: We ﬁnd each of the impedance functions, Z1s and Z2s, and then substitute
them into Eq. (2.104). Thus,
Z1s  R1  1
C1s
2.105
and
Z2s 
R21=C2s
R2  1=C2s
2.106
Substituting Eqs. (2.105) and (2.106) into Eq. (2.104) yields
Vos
Vis  C2C1R2R1s2  C2R2  C1R2  C1R1s  1
C2C1R2R1s2  C2R2  C1R1s  1
2.107
R2
R1
v1(t)
vi(t)
vo(t)
C2
C1
–
+
FIGURE 2.13
Noninverting
operational ampliﬁer circuit
for Example 2.15
+
–
v(t)
vL(t)
1Ω
1Ω
1H
1 H
1 H
+–
FIGURE 2.14
Electric circuit
for Skill-Assessment
Exercise 2.6
60
Chapter 2
Modeling in the Frequency Domain

In this section, we found transfer functions for multiple-loop and multiple-node
electrical networks, as well as operational ampliﬁer circuits. We developed mesh and nodal
equations, noted their form, and wrote them by inspection. In the next section we begin our
work with mechanical systems. We will see that many of the concepts applied to electrical
networks can also be applied to mechanical systems via analogies—from basic concepts to
writing the describing equations by inspection. This revelation will give you the conﬁdence
to move beyond this textbook and study systems not covered here, such as hydraulic or
pneumatic systems.
2.5 Translational Mechanical System Transfer Functions
We have shown that electrical networks can be modeled by a transfer function, G(s), that
algebraically relates the Laplace transform of the output to the Laplace transform of the
input. Now we will do the same for mechanical systems. In this section we concentrate on
translational mechanical systems. In the next section we extend the concepts to rotational
mechanical systems. Notice that the end product, shown in Figure 2.2, will be mathemati-
cally indistinguishable from an electrical network. Hence, an electrical network can be
interfaced to a mechanical system by cascading their transfer functions, provided that one
system is not loaded by the other.6
Mechanical systems parallel electrical networks to such an extent that there are
analogies between electrical and mechanical components and variables. Mechanical
systems, like electrical networks, have three passive, linear components. Two of them,
the spring and the mass, are energy-storage elements; one of them, the viscous damper,
dissipates energy. The two energy-storage elements are analogous to the two electrical
energy-storage elements, the inductor and capacitor. The energy dissipator is analogous to
electrical resistance. Let us take a look at these mechanical elements, which are shown in
Table 2.4. In the table, K, fv, and M are called spring constant, coefﬁcient of viscous friction,
and mass, respectively.
We now create analogies between electrical and mechanical systems by comparing
Tables 2.3 and 2.4. Comparing the force-velocity column of Table 2.4 to the voltage-current
column of Table 2.3, we see that mechanical force is analogous to electrical voltage and
mechanical velocity is analogous to electrical current. Comparing the force-displacement
column of Table 2.4 with the voltage-charge column of Table 2.3 leads to the analogy
between the mechanical displacement and electrical charge. We also see that the spring is
Skill-Assessment Exercise 2.7
PROBLEM: If Z1s is the impedance of a 10 μF capacitor and Z2s is the impedance of
a 100 kΩ resistor, ﬁnd the transfer function, Gs  Vos=Vis, if these components
are used with (a) an inverting operational ampliﬁer and (b) a noninverting ampliﬁer as
shown in Figures 2.10(c) and 2.12, respectively.
ANSWER: Gss for an inverting operational ampliﬁer; Gss1 for a noninverting
operational ampliﬁer.
The complete solution is at www.wiley.com/college/nise.
6 The concept of loading is explained further in Chapter 5.
2.5 Translational Mechanical System Transfer Functions
61

analogous to the capacitor, the viscous damper is analogous to the resistor, and the mass
is analogous to the inductor. Thus, summing forces written in terms of velocity is
analogous to summing voltages written in terms of current, and the resulting mechanical
differential equations are analogous to mesh equations. If the forces are written in terms
of displacement, the resulting mechanical equations resemble, but are not analogous to,
the mesh equations. We, however, will use this model for mechanical systems so that we
can write equations directly in terms of displacement.
Another analogy can be drawn by comparing the force-velocity column of
Table 2.4 to the current-voltage column of Table 2.3 in reverse order. Here the analogy
is between force and current and between velocity and voltage. Also, the spring is
analogous to the inductor, the viscous damper is analogous to the resistor, and the mass
is analogous to the capacitor. Thus, summing forces written in terms of velocity is
analogous to summing currents written in terms of voltage and the resulting mechanical
differential equations are analogous to nodal equations. We will discuss these analogies
in more detail in Section 2.9.
We are now ready to ﬁnd transfer functions for translational mechanical systems.
Our ﬁrst example, shown in Figure 2.15(a), is similar to the simple RLC network of
Example 2.6 (see Figure 2.3). The mechanical system requires just one differential
equation, called the equation of motion, to describe it. We will begin by assuming a
positive direction of motion, for example, to the right. This assumed positive direction of
motion is similar to assuming a current direction in an electrical loop. Using our assumed
direction of positive motion, we ﬁrst draw a free-body diagram, placing on the body all
forces that act on the body either in the direction of motion or opposite to it. Next we use
Newton’s law to form a differential equation of motion by summing the forces and setting
the sum equal to zero. Finally, assuming zero initial conditions, we take the Laplace
transform of the differential equation, separate the variables, and arrive at the transfer
function. An example follows.
TABLE 2.4
Force-velocity, force-displacement, and impedance translational relationships for
springs, viscous dampers, and mass
Component
Force-velocity
Force-displacement
Impedence
ZMs  Fs=Xs
K
Spring
x(t)
f(t)
f t  K
Z t
0
vτdτ
f t  Kxt
K
fv
Viscous damper
x(t)
f(t)
f t  fvvt
f t  fv
dxt
dt
fvs
Mass
x(t)
f(t)
M
f t  M dvt
dt
f t  M d2xt
dt2
Ms2
Note: The following set of symbols and units is used throughout this book: f t  N newtons, xt  m meters,
vt  m/s meters/second, K = N/m (newtons/meter), fv  N-s/m newton-seconds=meter, M  kg kilograms 
newton-seconds2/meter.
62
Chapter 2
Modeling in the Frequency Domain

Now can we parallel our work with electrical networks by circumventing the writing
of differential equations and by deﬁning impedances for mechanical components? If so, we
can apply to mechanical systems the problem-solving techniques learned in the previous
section. Taking the Laplace transform of the force-displacement column in Table 2.4, we
obtain for the spring,
Fs  KXs
2.112
Example 2.16
Transfer Function—One Equation of Motion
Transfer Function—One Equation of Motion
PROBLEM: Find the transfer function, Xs=Fs, for the system of Figure 2.15(a).
SOLUTION: Begin the solution by drawing the free-body diagram shown in Figure 2.16(a).
Place on the mass all forces felt by the mass. We assume the mass is traveling toward the
right. Thus, only the applied force points to the right; all other forces impede the motion
and act to oppose it. Hence, the spring, viscous damper, and the force due to acceleration
point to the left.
We now write the differential equation of motion using Newton’s law to sum to zero
all of the forces shown on the mass in Figure 2.16(a):
M d2xt
dt2
 fv
dxt
dt  Kxt  f t
2.108
Taking the Laplace transform, assuming zero initial conditions,
Ms2Xs  fvsXs  KXs  Fs
2.109
or
Ms2  fvs  KXs  Fs
2.110
Solving for the transfer function yields
Gs  Xs
Fs 
1
Ms2  fvs  K
2.111
which is represented in Figure 2.15(b).
F(s)
(b)
fvsX(s)
Ms2X(s)
KX(s)
f(t)
(a)
fv
M
Kx(t)
dx
dt
d2x
dt2
M
M
X(s)
x(t)
FIGURE 2.16
a. Free-body
diagram of mass, spring, and
damper system; b. transformed
free-body diagram
(a)
(b)
X(s)
F(s)
K
f(t)
x(t)
fv
M
1
Ms2 + fvs + K
FIGURE 2.15
a. Mass,
spring, and damper system;
b. block diagram
2.5 Translational Mechanical System Transfer Functions
63

for the viscous damper,
Fs  fvsXs
2.113
and for the mass,
Fs  Ms2Xs
2.114
If we deﬁne impedance for mechanical components as
ZMs  Fs
Xs
2.115
and apply the deﬁnition to Eqs. (2.112) through (2.114), we arrive at the impedances of each
component as summarized in Table 2.4 (Raven, 1995).7
Replacing each force in Figure 2.16(a) by its Laplace transform, which is in the format
Fs  ZMsXs
2.116
we obtain Figure 2.16(b), from which we could have obtained Eq. (2.109) immediately
without writing the differential equation. From now on we use this approach.
Finally, notice that Eq. (2.110) is of the form
Sum of impedancesXs  Sum of applied forces
2.117
which is similar, but not analogous, to a mesh equation (see footnote 7).
Many mechanical systems are similar to multiple-loop and multiple-node electrical
networks, where more than one simultaneous differential equation is required to describe the
system. In mechanical systems, the number of equations of motion required is equal to the
number of linearly independent motions. Linear independence implies that a point of
motion in a system can still move if all other points of motion are held still. Another name
for the number of linearly independent motions is the number of degrees of freedom. This
discussion is not meant to imply that these motions are not coupled to one another; in
general, they are. For example, in a two-loop electrical network, each loop current depends
on the other loop current, but if we open-circuit just one of the loops, the other current can
still exist if there is a voltage source in that loop. Similarly, in a mechanical system with two
degrees of freedom, one point of motion can be held still while the other point of motion
moves under the inﬂuence of an applied force.
In order to work such a problem, we draw the free-body diagram for each point of
motion and then use superposition. For each free-body diagram we begin by holding all
other points of motion still and ﬁnding the forces acting on the body due only to its own
motion. Then we hold the body still and activate the other points of motion one at a time,
placing on the original body the forces created by the adjacent motion.
Using Newton’s law, we sum the forces on each body and set the sum to zero. The
result is a system of simultaneous equations of motion. As Laplace transforms, these
7 Notice that the impedance column of Table 2.4 is not a direct analogy to the impedance column of Tabel 2.3, since
the denominator of Eq. (2.115) is displacement. A direct analogy could be derived by deﬁning mechanical
impedance in terms of velocity as Fs=Vs. We chose Eq. (2.115) as a convenient deﬁnition for writing the
equations of motion in terms of displacement, rather than velocity. The alternative, however, is available.
64
Chapter 2
Modeling in the Frequency Domain

equations are then solved for the output variable of interest in terms of the input
variable from which the transfer function is evaluated. Example 2.17 demonstrates this
problem-solving technique.
Example 2.17
Transfer Function—Two Degrees of Freedom
Transfer Function—Two Degrees of Freedom
PROBLEM: Find the transfer function, X2s=Fs, for the system of Figure 2.17(a).
SOLUTION: The system has two degrees of freedom, since each mass can be moved in
the horizontal direction while the other is held still. Thus, two simultaneous equations of
motion will be required to describe the system. The two equations come from free-body
diagrams of each mass. Superposition is used to draw the free-body diagrams. For
example, the forces on M1 are due to (1) its own motion and (2) the motion of M2
transmitted to M1 through the system. We will consider these two sources separately.
Ifwe hold M2 still andmove M1 totheright, weseetheforcesshownin Figure 2.18(a).
If we hold M1 still and move M2 to the right, we see the forces shown in Figure 2.18(b). The
total force on M1 is the superposition, or sum, of the forces just discussed. This result is
shown in Figure 2.18(c). For M2, we proceed in a similar fashion: First we move M2 to the
right while holding M1 still; then we move M1 to the right and hold M2 still. For each case
we evaluate the forces on M2. The results appear in Figure 2.19.
K1
K3
f(t)
fv3
fv1
fv2
M1
M2
K2
x1(t)
x2(t)
(a)
(fv3s+K2)
Δ
X2(s)
F(s)
(b)
FIGURE 2.17
a. Two-
degrees-of-freedom
translational mechanical
system;8 b. block diagram
K1X1(s)
fv1sX1(s)
F(s)
M1s2X1(s)
a
fv3sX1(s)
K2X1(s)
(b)
fv3sX2(s)
K2X2(s)
(K1 + K2)X1(s)
F(s)
M1s2X1(s)
(fv1 + fv3)sX1(s)
fv3sX2(s)
K2X2(s)
(c)
(  )
M1
M1
M1
FIGURE 2.18
a. Forces on
M1 due only to motion of M1;
b. forces on M1 due only to
motion of M2; c. all forces
on M1
Virtual Experiment 2.1
Vehicle Suspension
Put theory into practice
exploring the dynamics of
another two-degrees-of-
freedom system—a vehicle
suspension system driving
over a bumpy road and
demonstrated with the
Quanser Active Suspension
System modeled in
LabVIEW.
© Debra Lex
Virtual experiments are found
on Learning Space.
8 Friction shown here and throughout the book, unless otherwise indicated, is viscous friction. Thus, fv1 and fv2 are
not Coulomb friction, but arise because of a viscous interface.
2.5 Translational Mechanical System Transfer Functions
65

Notice again, in Eq. (2.118), that the form of the equations is similar to electrical mesh
equations:
Sum of
impedances
connected
to the motion
at x1
2
6666664
3
7777775
X1s 
Sum of
impedances
between
x1 and x2
2
66664
3
77775
X2s 
Sum of
applied forces
at x1
2
64
3
75
(2.120a)

Sum of
impedances
between
x1 and x2
2
66664
3
77775
X1s 
Sum of
impedances
connected
to the motion
at x2
2
6666664
3
7777775
X2s 
Sum of
applied forces
at x2
2
64
3
75
(2.120b)
The pattern shown in Eq. (2.120) should now be familiar to us. Let us use the concept to
write the equations of motion of a three-degrees-of-freedom mechanical network by
inspection, without drawing the free-body diagram.
The Laplace transform of the equations of motion can now be written from
Figures 2.18(c) and 2.19(c) as
M1s2Fv1  fv3s  K1  K2X1s   fv3s  K2X2s  Fs
(2.118a)
  fv3s  K2X1s  M2s2   fv2  fv3s  K2  K3X2s  0
(2.118b)
From this, the transfer function, X2s=Fs, is
X2s
Fs  Gs   fv3s  K2
Δ
2.119
as shown in Figure 2.17(b) where
Δ 

M1s2   fv1  fv3s  K1  K2
 fv3s  K2
 fv3s  K2
M2s2   fv2  fv3s  K2  K3

K2X2(s)
fv2sX2(s)
M2s2X2(s)
fv3sX2(s)
(a)
K3X2(s)
(b)
fv3sX1(s)
(K2 + K3)X2(s)
M2s2X2(s)
(fv2
 + fv3)sX2(s)
fv3sX1(s)
K2X1(s)
(c)
K2X1(s)
M2
M2
M2
FIGURE 2.19
a. Forces on
M2 due only to motion of M2;
b. forces on M2 due only to
motion of M1; c. all forces
on M2
66
Chapter 2
Modeling in the Frequency Domain

Example 2.18
Equations of Motion by Inspection
Equations of Motion by Inspection
PROBLEM: Write, but do not solve, the equations of motion for the mechanical network
of Figure 2.20.
SOLUTION: The system has three degrees of freedom, since each of the three masses
can be moved independently while the others are held still. The form of the equations
will be similar to electrical mesh equations. For M1,
Sum of
impedances
connected
to the motion
at x1
2
6666664
3
7777775
X1s
Sum of
impedances
between
x1 and x2
2
66664
3
77775
X2s

Sum of
impedances
between
x1 and x3
2
66664
3
77775
X3s 
Sum of
applied forces
at x1
2
64
3
75
2.121
Similarly, for M2 and M3, respectively,

Sum of
impedances
between
x1 and x2
2
66664
3
77775
X1s 
Sum of
impedances
connected
to the motion
at x2
2
6666664
3
7777775
X2s

Sum of
impedances
between
x2 and x3
2
66664
3
77775
X3s 
Sum of
applied forces
at x2
2
64
3
75
2.122
x2(t)
x3(t)
f (t)
fv1
fv2
K1
K2
fv3
M2
M1
fv4
M3
x1(t)
FIGURE 2.20
Three-degrees-
of-freedom translational
mechanical system
2.5 Translational Mechanical System Transfer Functions
67


Sum of
impedances
between
x1 and x3
2
66664
3
77775
X1s 
Sum of
impedances
between
x2 and x3
2
66664
3
77775
X2s

Sum of
impedances
connected
to the motion
at x3
2
6666664
3
7777775
X3s 
Sum of
applied forces
at x3
2
64
3
75
2.123
M1 has two springs, two viscous dampers, and mass associated with its motion.
There is one spring between M1 and M2 and one viscous damper between M1 and M3.
Thus, using Eq. (2.121),
M1s2   fv1  fv3s  K1  K2X1s  K2X2s  fv3sX3s  0
2.124
Similarly, using Eq. (2.122) for M2,
K2X1s  M2s2   fv2  fv4s  K2X2s  fv4sX3s  Fs
2.125
and using Eq. (2.123) for M3,
fv3sX1s  fv4sX2s  M3s2   fv3  fv4sX3s  0
2.126
Equations (2.124) through (2.126) are the equations of motion. We can solve them for any
displacement, X1s; X2s; or X3s, or transfer function.
Skill-Assessment Exercise 2.8
PROBLEM: Find the transfer function, GsX2s=Fs, for the translational mechanical
system shown in Figure 2.21.
ANSWER: Gs 
3s  1
ss3  7s2  5s  1
The complete solution is at www.wiley.com/college/nise.
fv1 = 1 N-s/m
fv2 = 1 N-s/m
fv4 = 1 N-s/m
fv3 = 1 N-s/m
K= 1 N/m
M1 = 1 kg
M2 = 1 kg
x1(t)
f (t)
x2(t)
FIGURE 2.21
Translational
mechanical system for Skill-
Assessment Exercise 2.8
68
Chapter 2
Modeling in the Frequency Domain

2.6 Rotational Mechanical System Transfer Functions
Having covered electrical and translational mechanical systems, we now move on to
consider rotational mechanical systems. Rotational mechanical systems are handled the
same way as translational mechanical systems, except that torque replaces force and angular
displacement replaces translational displacement. The mechanical components for rotational
systems are the same as those for translational systems, except that the components undergo
rotation instead of translation. Table 2.5 shows the components along with the relationships
between torque and angular velocity, as well as angular displacement. Notice that the symbols
for the components look the same as translational symbols, but they are undergoing rotation
and not translation.
Also notice that the term associated with the mass is replaced by inertia. The
values of K, D, and J are called spring constant, coefﬁcient of viscous friction, and
moment of inertia, respectively. The impedances of the mechanical components are also
summarized in the last column of Table 2.5. The values can be found by taking the
Laplace transform, assuming zero initial conditions, of the torque-angular displacement
column of Table 2.5.
The concept of degrees of freedom carries over to rotational systems, except that
we test a point of motion by rotating it while holding still all other points of motion. The
number of points of motion that can be rotated while all others are held still equals the
number of equations of motion required to describe the system.
Writing the equations of motion for rotational systems is similar to writing them for
translational systems; the only difference is that the free-body diagram consists of torques
rather than forces. We obtain these torques using superposition. First, we rotate a body while
holding all other points still and place on its free-body diagram all torques due to the body’s
own motion. Then, holding the body still, we rotate adjacent points of motion one at a time
and add the torques due to the adjacent motion to the free-body diagram. The process is
repeated for each point of motion. For each free-body diagram, these torques are summed
and set equal to zero to form the equations of motion.
TABLE 2.5
Torque-angular velocity, torque-angular displacement, and impedance rotational
relationships for springs, viscous dampers, and inertia
Component
Torque-angular
velocity
Torque-angular
displacement
Impedence
ZMs  Ts=θs
K
Spring
T(t)    (t)
θ
Tt  K
R t
0ωτdτ
Tt  Kθt
K
D
Viscous
damper
T(t)    (t)
θ
Tt  Dωt
Tt  D dθt
dt
Ds
J
Inertia
T(t)    (t)
θ
Tt  J dωt
dt
Tt  J d2θt
dt2
Js2
Note: The following set of symbols and units is used throughout this book: Tt  N-m newton-meters,
θt  rad radians, ωt  rad/s radians/second, K  N-m/rad newton-meters/radian, D  N-m-s/rad newton-
meters-seconds/radian: J  kg-m2kilograms-meters2  newton-meters-seconds2/radian.
2.6 Rotational Mechanical System Transfer Functions
69

Two examples will demonstrate the solution of rotational systems. The ﬁrst one uses
free-body diagrams; the second uses the concept of impedances to write the equations of
motion by inspection.
9 In this case the parameter is referred to as a distributed parameter.
10 The parameter is now referred to as a lumped parameter.
Example 2.19
Transfer Function—Two Equations of Motion
Transfer Function—Two Equations of Motion
PROBLEM: Find the transfer function, θ2s=Ts, for the rotational system shown in
Figure 2.22(a). The rod is supported by bearings at either end and is undergoing torsion.
A torque is applied at the left, and the displacement is measured at the right.
SOLUTION: First, obtain the schematic from the physical system. Even though torsion
occurs throughout the rod in Figure 2.22(a),9 we approximate the system by assuming
that the torsion acts like a spring concentrated at one particular point in the rod, with an
inertia J1 to the left and an inertia J2 to the right.10 We also assume that the damping
inside the ﬂexible shaft is negligible. The schematic is shown in Figure 2.22(b). There
are two degrees of freedom, since each inertia can be rotated while the other is held still.
Hence, it will take two simultaneous equations to solve the system.
Next, draw a free-body diagram of J1, using superposition. Figure 2.23(a) shows the
torques on J1 if J2 is held still and J1 rotated. Figure 2.23(b) shows the torques on J1 if J1
is held still and J2 rotated. Finally, the sum of Figures 2.23(a) and 2.23(b) is shown
in Figure 2.23(c), the ﬁnal free-body diagram for J1. The same process is repeated in
Figure 2.24 for J2.
θ1(t)
θ2(t)
D1
K
D2
T(t)
(b)
θ1(t)
T(t) 
θ2(t)
Bearing
D1
Bearing
D2
Torsion
(a)
J2
J1
J2
J1
K
Δ
(c)
T(s)
θ2(s)
FIGURE 2.22
a. Physical
system; b. schematic; c. block
diagram
(a)
J1
K
T(s)
(b)
(c)
D1sθ1(s)
θ1(s)
Kθ2(s)
Kθ1(s)
D1sθ1(s)
J1s2θ1(s)
T(s)
Direction
θ1
θ1
θ1
(s)
J1
J1
J1s2θ1(s)
Kθ2(s)
Direction
(s)
Direction
(s)
FIGURE 2.23
a. Torques on
J1 due only to the motion of J1;
b. torques on J1 due only to the
motion of J2; c. ﬁnal free-body
diagram for J1
70
Chapter 2
Modeling in the Frequency Domain

Summing torques, respectively, from Figures 2.23(c) and 2.24(c) we obtain the
equations of motion,
J1s2  D1s  Kθ1s
 Kθ2s  Ts
(2.127a)
Kθ1s  J2s2  D2s  Kθ2s  0
(2.127b)
from which the required transfer function is found to be
θ2s
Ts  K
Δ
2.128
as shown in Figure 2.22(c), where
Δ 

J1s2  D1s  K
K
K
J2s2  D2s  K

Notice that Eqs. (2.127) have that now well-known form
Sum of
impedances
connected
to the motion
at θ1
2
666664
3
777775
θ1s 
Sum of
impedances
between
θ1 and θ2
2
6664
3
7775θ2s 
Sum of
applied torques
at θ1
2
4
3
5
(2.129a)

Sum of
impedances
between
θ1 and θ2
2
6664
3
7775θ1s 
Sum of
impedances
connected
to the motion
at θ2
2
666664
3
777775
θ2s 
Sum of
applied torques
at θ2
2
4
3
5
(2.129b)
θ2(s)
D2s
K
J2
J2s2
(a)
(b)
(c)
θ2(s)
θ2(s)
θ2(s)
θ2(s)
θ2(s)
Kθ1(s)
J2
Kθ1(s)
θ2(s)
D2s
J2s2
θ2(s)
Kθ2(s)
Direction
Direction
Direction
J2
FIGURE 2.24
a. Torques on
J2 due only to the motion of J2;
b. torques on J2 due only to the
motion of J1; c. ﬁnal free-body
diagram for J2
TryIt 2.9
Use the following MATLAB
and Symbolic Math Toolbox
statements to help you get
Eq. (2.128).
syms s J1 D1 K T J2 D2...
theta1 theta2
A=[(J1*s^2+D1*s+K) K
K (J2*s^2+D2*s +K)];
B=[theta1
theta2];
C=[T
0];
B=inv(A)*C;
theta2 = B(2);
'theta2'
pretty (theta2)
Example 2.20
Equations of Motion by Inspection
Equations of Motion by Inspection
PROBLEM: Write, but do not solve, the Laplace transform of the equations of motion
for the system shown in Figure 2.25.
θ1(t)
θ2(t)
θ3(t)
T(t)
D1
K
D2
D3
J2
J1
J3
FIGURE 2.25
Three-degrees-
of-freedom rotational system
2.6 Rotational Mechanical System Transfer Functions
71

SOLUTION: The equations will take on the following form, similar to electrical mesh
equations:
Sum of
impedances
connected
to the motion
at θ1
2
6666664
3
7777775
θ1s 
Sum of
impedances
between
θ1 and θ2
2
66664
3
77775
θ2s

Sum of
impedances
between
θ1 and θ3
2
66664
3
77775
θ3s 
Sum of
applied torques
at θ1
2
64
3
75
(2.130a)

Sum of
impedances
between
θ1 and θ2
2
66664
3
77775
θ1s 
Sum of
impedances
connected
to the motion
at θ2
2
6666664
3
7777775
θ2s

Sum of
impedances
between
θ2 and θ3
2
66664
3
77775
θ3s 
Sum of
applied torques
at θ2
2
64
3
75
(2.130b)

Sum of
impedances
between
θ1 and θ3
2
66664
3
77775
θ1s 
Sum of
impedances
between
θ2 and θ3
2
66664
3
77775
θ2s

Sum of
impedances
connected
to the motion
at θ3
2
6666664
3
7777775
θ3s 
Sum of
applied torques
at θ3
2
64
3
75
(2.130c)
Hence,
J1s2  D1s  Kθ1s
Kθ2s
0θ3s  Ts
Kθ1s J2s2  D2s  Kθ2s
D2sθ3s  0
0θ1s
D2sθ2s J3s2  D3s  D2sθ3s  0
(2.131a,b,c)
72
Chapter 2
Modeling in the Frequency Domain

2.7 Transfer Functions for Systems with Gears
Now that we are able to ﬁnd the transfer function for rotational systems, we realize that these
systems, especially those driven by motors, are rarely seen without associated gear trains
driving the load. This section covers this important topic.
Gears provide mechanical advantage to rotational systems. Anyone who has ridden a
10-speed bicycle knows the effect of gearing. Going uphill, you shift to provide more torque
andlessspeed.Onthestraightaway,youshifttoobtainmorespeedandlesstorque.Thus,gears
allow you to match the drive system and the load—a trade-off between speed and torque.
For many applications, gears exhibit backlash, which occurs because of the loose ﬁt
between two meshed gears. The drive gear rotates through a small angle before making
contact with the meshed gear. The result is that the angular rotation of the output gear does
not occur until a small angular rotation of the input gear has occurred. In this section, we
idealize the behavior of gears and assume that there is no backlash.
The linearized interaction between two gears is depicted in Figure 2.27. An input gear
with radius r1 and N1 teeth is rotated through angle θ1t due to a torque, T1t. An output
gear with radius r2 and N2 teeth responds by rotating through angle θ2t and delivering
a torque, T2t. Let us now ﬁnd the relationship between the rotation of Gear 1, θ1t, and
Gear 2, θ2t.
From Figure 2.27, as the gears turn, the distance traveled along each gear’s circumference
is the same. Thus,
r1θ1  r2θ2
2.132
or
θ2
θ1
 r1
r2
 N1
N2
2.133
Skill-Assessment Exercise 2.9
PROBLEM: Find the transfer function, Gs  θ2s=Ts, for the rotational mechanical
system shown in Figure 2.26.
ANSWER: Gs 
1
2s2  s  1
The complete solution is at www.wiley.com/college/nise.
1 N-m/rad
1 N-m/rad
1 N-m-s/rad
1 N-m-s/rad
θ2(t)
T(t)
1 kg-m2
FIGURE 2.26
Rotational
mechanical system for
Skill-Assessment Exercise 2.9
r2
Input
drive gear,
Gear 1
Output
driven gear,
Gear 2
r1
N1
N2
T1(t)
θ1(t)
T2(t)
θ2(t)
FIGURE 2.27
A gear system
2.7 Transfer Functions for Systems with Gears
73

since the ratio of the number of teeth along the circumference is in the same proportion as the
ratio of the radii. We conclude that the ratio of the angular displacement of the gears is
inversely proportional to the ratio of the number of teeth.
What is the relationship between the input torque, T1, and the delivered torque, T2? If
we assume the gears are lossless, that is, they do not absorb or store energy, the energy into
Gear 1 equals the energy out of Gear 2.11 Since the translational energy of force times
displacement becomes the rotational energy of torque times angular displacement,
T1θ1  T2θ2
2.134
Solving Eq. (2.134) for the ratio of the torques and using Eq. (2.133), we get
T2
T1
 θ1
θ2
 N2
N1
2.135
Thus, the torques are directly proportional to the ratio of the number of
teeth. All results are summarized in Figure 2.28.
Let us see what happens to mechanical impedances that are driven
by gears. Figure 2.29(a) shows gears driving a rotational inertia, spring,
and viscous damper. For clarity, the gears are shown by an end-on view.
We want to represent Figure 2.29(a) as an equivalent system at θ1 without
the gears. In other words, can the mechanical impedances be reﬂected
from the output to the input, thereby eliminating the gears?
From Figure 2.28(b), T1 can be reﬂected to the output by multiplying by N2=N1. The
result is shown in Figure 2.29(b), from which we write the equation of motion as
Js2  Ds  K θ2s  T1s N2
N1
2.136
Now convert θ2s into an equivalent θ1s, so that Eq. (2.136) will look as if it were written
at the input. Using Figure 2.28(a) to obtain θ2s in terms of θ1s, we get
Js2  Ds  K N1
N2
θ1s  T1s N2
N1
2.137
11 This is equivalent to saying that the gears have negligible inertia and damping.
J
D
θ1(t)
θ1(t)
θ2(t)
θ2(t)
T1(t)
N1
N2
(a)
D
T1(t) N2
N1
K
(b)
T1(t)
J
2
N1
N2
2
N1
N2
K
(c)
2
N1
N2
D
J
K
FIGURE 2.29
a. Rotational
system driven by gears;
b. equivalent system at the
output after reﬂection of input
torque; c. equivalent system at
the input after reﬂection of
impedances
θ2
θ1
N1
N2
(a)
T1
T2
N2
N1
(b)
FIGURE 2.28
Transfer functions for a. angular
displacement in lossless gears and b. torque in
lossless gears
74
Chapter 2
Modeling in the Frequency Domain

After simpliﬁcation,
J N1
N2
	

2
s2  D N1
N2
	

2
s  K N1
N2
	

2
"
#
θ1s  T1s
2.138
which suggests the equivalent system at the input and without gears shown in Figure 2.29(c).
Thus, the load can be thought of as having been reﬂected from the output to the input.
Generalizing the results, we can make the following statement: Rotational mechanical
impedances can be reﬂected through gear trains by multiplying the mechanical impedance
by the ratio
Number of teeth of
gear on destination shaft
Number of teeth of
gear on source shaft
0
B
B
@
1
C
C
A
2
where the impedance to be reﬂected is attached to the source shaft and is being reﬂected to
the destination shaft. The next example demonstrates the application of the concept of
reﬂected impedances as we ﬁnd the transfer function of a rotational mechanical system with
gears.
Example 2.21
Transfer Function—System with Lossless Gears
Transfer Function—System with Lossless Gears
PROBLEM: Find the transfer function, θ2s=T1s, for the system of Figure 2.30(a).
SOLUTION: It may be tempting at this point to search for two simultaneous equations
corresponding to each inertia. The inertias, however, do not undergo linearly independent
motion, since they are tied together by the gears. Thus, there is only one degree of
freedom and hence one equation of motion.
Let us ﬁrst reﬂect the impedances (J1 and D1) and torque (T1) on the input shaft to
the output as shown in Figure 2.30(b), where the impedances are reﬂected by N2=N12
and the torque is reﬂected by (N2=N1). The equation of motion can now be written as
Jes2  Des  Keθ2s  T1s N2
N1
2.139
J2
θ1(t)
θ2(t)
θ2(t)
θ2(s)
T1(t)
N1
N2
K2
D2
Je
T1(t)
Ke = K2
(b)
N2
N1
De = D1
2
+ D2
2
+ J2
D1
(a)
Je = J1
J1
Jes2 + Des + Ke
(c)
T1(s)
N2
N1
N2
N1
N2/N1
FIGURE 2.30
a. Rotational mechanical system with gears; b. system after reﬂection of torques and impedances to the output
shaft; c. block diagram
2.7 Transfer Functions for Systems with Gears
75

In order to eliminate gears with large radii, a gear train is used to
implement large gear ratios by cascading smaller gear ratios. A schematic
diagram of a gear train is shown in Figure 2.31. Next to each rotation, the
angular displacement relative to θ1 has been calculated. From Figure 2.31,
θ4  N1N3N5
N2N4N6
θ1
2.141
For gear trains, we conclude that the equivalent gear ratio is the product of
the individual gear ratios. We now apply this result to solve for the transfer
function of a system that does not have lossless gears.
where
Je  J1
N2
N1
	

2
 J2; De  D1
N2
N1
	

2
 D2; Ke  K2
Solving for θ2s=T1s, the transfer function is found to be
Gs  θ2s
T1s 
N2=N1
Jes2  Des  Ke
2.140
as shown in Figure 2.30(c).
N1
N3
N5
N2
N4
N6
= N5
N6
= N1 N3 N5
N2 N4 N6
= N3
N4
= N1 N3
N2 N4
= N1
N2
θ1
θ1
θ3
θ4
θ3
θ1
θ2
θ1
θ2
FIGURE 2.31
Gear train
Example 2.22
Transfer Function—Gears with Loss
Transfer Function—Gears with Loss
PROBLEM: Find the transfer function, θ1s=T1s, for the system of Figure 2.32(a).
SOLUTION: This system, which uses a gear train, does not have lossless gears. All of
the gears have inertia, and for some shafts there is viscous friction. To solve the
problem, we want to reﬂect all of the impedances to the input shaft, θ1. The gear ratio is
not the same for all impedances. For example, D2 is reﬂected only through one gear ratio
as D2N1=N22, whereas J4 plus J5 is reﬂected through two gear ratios as
J4  J5N3=N4N1=N22. The result of reﬂecting all impedances to θ1 is shown
θ1(t)
θ1(t)
θ1(s)
T1(t)
N1
J1,  D1
N2
N3
D2,  J2
J3
J5
N4
J4
Je
De
Je = J1 + (J2 + J3)
N1
N2
2
+ (J4 + J5)
N1N3
N2N4
2
N1
N2
2
(a)
(b)
T1(t)
De = D1 + D2
1
Jes2 + Des
T1(s)
(c)
FIGURE 2.32
a. System using a gear train; b. equivalent system at the input; c. block diagram
76
Chapter 2
Modeling in the Frequency Domain

2.8 Electromechanical System Transfer Functions
In the last section we talked about rotational systems with gears, which completed our
discussion of purely mechanical systems. Now, we move to systems that are hybrids of
electrical and mechanical variables, the electromechanical systems. We have seen one
application of an electromechanical system in Chapter 1, the antenna azimuth position
in Figure 2.32(b), from which the equation of motion is
Jes2  Desθ1s  T1s
2.142
where
Je  J1  J2  J3 N1
N2
	

2
 J4  J5 N1N3
N2N4
	

2
and
De  D1  D2
N1
N2
	

2
From Eq. (2.142), the transfer function is
Gs  θ1s
T1s 
1
Jes2  Des
2.143
as shown in Figure 2.32(c).
Skill-Assessment Exercise 2.10
PROBLEM: Find the transfer function, Gs  θ2s=Ts, for the rotational mechanical
system with gears shown in Figure 2.33.
ANSWER: Gs 
1=2
s2  s  1
The complete solution is at www.wiley.com/college/nise.
1 N-m-s/rad
4 N-m/rad
θ2(t)
T(t)
1 kg-m2
N2 = 50
N1 = 25
FIGURE 2.33
Rotational mechanical system with gears for Skill-Assessment Exercise 2.10
2.8 Electromechanical System Transfer Functions
77

control system. Other applications for systems with electromechanical components are
robot controls, sun and star trackers, and computer tape and disk-drive position controls. An
example of a control system that uses electromechanical components is shown in
Figure 2.34.
A motor is an electromechanical component that yields a displacement output for a
voltage input, that is, a mechanical output generated by an electrical input. We will derive the
transfer function for one particular kind of electromechanical system, the armature-controlled
dc servomotor (Mablekos, 1980). The motor’s schematic is shown in Figure 2.35(a), and the
transfer function we will derive appears in Figure 2.35(b).
In Figure 2.35(a) a magnetic ﬁeld is developed by stationary permanent magnets or a
stationary electromagnet called the ﬁxed ﬁeld. A rotating circuit called the armature,
through which current iat ﬂows, passes through this magnetic ﬁeld at right angles and feels
a force, F  Bliat, where B is the magnetic ﬁeld strength and l is the length of the
conductor. The resulting torque turns the rotor, the rotating member of the motor.
There is another phenomenon that occurs in the motor: A conductor moving at right
angles to a magnetic ﬁeld generates a voltage at the terminals of the conductor equal to
12 See Appendix I at www.wiley.com/college/nise for a derivation of this schematic and its parameters.
Armature
circuit
vb(t)
Ra
La
Rotor
Tm(t)
Fixed
field
G(s)
θm(s)
θm(t)
Ea(s)
(a)
(b)
ia(t)
ea(t)
+
+
–
–
FIGURE 2.35
DC motor: a. schematic;12 b. block diagram
FIGURE 2.34
NASA ﬂight
simulator robot arm with
electromechanical control
system components
78
Chapter 2
Modeling in the Frequency Domain

e  Blv, where e is the voltage and v is the velocity of the conductor normal to the magnetic
ﬁeld. Since the current-carrying armature is rotating in a magnetic ﬁeld, its voltage is
proportional to speed. Thus,
vbt  Kb
dθmt
dt
2.144
We call vbt the back electromotive force (back emf ); Kb is a constant of
proportionality called the back emf constant; and dθmt=dt  ωmt is the angular
velocity of the motor. Taking the Laplace transform, we get
Vbs  Kbsθms
2.145
The relationship between the armature current, iat, the applied armature voltage,
eat, and the back emf, vbt, is found by writing a loop equation around the Laplace
transformed armature circuit (see Figure 3.5(a)):
RaIas  LasIas  Vbs  Eas
2.146
The torque developed by the motor is proportional to the armature current; thus,
Tms  KtIas
2.147
where Tm is the torque developed by the motor, and Kt is a constant of proportionality,
called the motor torque constant, which depends on the motor and magnetic ﬁeld
characteristics. In a consistent set of units, the value of Kt is equal to the value of
Kb. Rearranging Eq. (2.147) yields
Ias  1
Kt
Tms
2.148
To ﬁnd the transfer function of the motor, we ﬁrst substitute Eqs. (2.145) and (2.148)
into (2.146), yielding
Ra  LasTms
Kt
 Kbsθms  Eas
2.149
Now we must ﬁnd Tms in terms of θms if we are to separate the input and output
variables and obtain the transfer function, θms=Eas.
Figure 2.36 shows a typical equivalent mechanical loading on a motor. Jm is
the equivalent inertia at the armature and includes both the armature inertia and, as
we will see later, the load inertia reﬂected to the armature. Dm is the equivalent
viscous damping at the armature and includes both the armature viscous damping
and, as we will see later, the load viscous damping reﬂected to the armature. From
Figure 2.36,
Tms  Jms2  Dmsθms
2.150
Substituting Eq. (2.150) into Eq. (2.149) yields
Ra  LasJms2  Dmsθms
Kt
 Kbsθms  Eas
2.151
Tm(t) θm(t)
Jm
Dm
FIGURE 2.36
Typical equivalent
mechanical loading on a motor
2.8 Electromechanical System Transfer Functions
79

If we assume that the armature inductance, La, is small compared to the armature resistance,
Ra, which is usual for a dc motor, Eq. (2.151) becomes
Ra
Kt
Jms  Dm  Kb


sθms  Eas
2.152
After simpliﬁcation, the desired transfer function, θms=Eas, is found to be
θms
Eas 
Kt=RaJm
s s  1
Jm
Dm  KtKb
Ra
	



2.153
Even though the form of Eq. (2.153) is relatively simple, namely
θms
Eas 
K
ss  α
2.154
the reader may be concerned about how to evaluate the constants.
Let us ﬁrst discuss the mechanical constants, Jm and Dm. Consider
Figure 2.37, which shows a motor with inertia Ja and damping Da at the
armature driving a load consisting of inertia JL and damping DL. Assuming
that all inertia and damping values shown are known, JL and DL can be
reﬂected back to the armature as some equivalent inertia and damping to be
added to Ja and Da, respectively. Thus, the equivalent inertia, Jm, and
equivalent damping, Dm, at the armature are
Jm  Ja  JL
N1
N2
	

2
; Dm  Da  DL
N1
N2
	

2
2.155
Now that we have evaluated the mechanical constants, Jm and Dm, what about the
electrical constants in the transfer function of Eq. (2.153)? We will show that these constants
can be obtained through a dynamometer test of the motor, where a dynamometer measures
the torque and speed of a motor under the condition of a constant applied voltage. Let us ﬁrst
develop the relationships that dictate the use of a dynamometer.
Substituting Eqs. (2.145) and (2.148) into Eq. (2.146), with La  0, yields
Ra
Kt
Tms  Kbsθms  Eas
2.156
Taking the inverse Laplace transform, we get
Ra
Kt
Tmt  Kbωmt  eat
2.157
where the inverse Laplace transform of sθms is dθmt=dt or, alternately, ωmt.
If a dc voltage, ea, is applied, the motor will turn at a constant angular velocity, ωm,
with a constant torque, Tm. Hence, dropping the functional relationship based on time from
Eq. (2.157), the following relationship exists when the motor is operating at steady state
with a dc voltage input:
Ra
Kt
Tm  Kbωm  ea
2.158
JL
DL
N2
N1
Motor
Ja, Da
FIGURE 2.37
DC motor driving a rotational
mechanical load
13
14
13 The units for the electrical constants are Kt = N-m-A (newton-meters/ampere), and Kb = V-s/rad
(volt-seconds/radian).
14 If the values of the mechanical constants are not known, motor constants can be determined through laboratory
testing using transient response or frequency response data. The concept of transient response is covered in Chapter 4;
frequency response is covered in Chapter 10.
80
Chapter 2
Modeling in the Frequency Domain

Solving for Tm yields
Tm   KbKt
Ra
ωm  Kt
Ra
ea
2.159
Equation (2.159) is a straight line, Tm vs. ωm, and is shown in
Figure 2.38. This plot is called the torque-speed curve. The torque axis
intercept occurs when the angular velocity reaches zero. That value of torque
is called the stall torque, Tstall. Thus,
Tstall  Kt
Ra
ea
2.160
The angular velocity occurring when the torque is zero is called the no-load
speed, ωno-load. Thus,
ωno-load  ea
Kb
2.161
The electrical constants of the motor’s transfer function can now be found
from Eqs. (2.160) and (2.161) as
Kt
Ra
 Tstall
ea
2.162
and
Kb 
ea
ωno-load
2.163
The electrical constants, Kt=Ra and Kb, can be found from a dynamometer test of the motor,
which would yield Tstall and ωno-load for a given ea.
Tm
ea1
ea2
Tstall
Torque
Speed
ωno-load
ωm
FIGURE 2.38
Torque-speed curves with an
armature voltage, ea, as a parameter
Example 2.23
Transfer Function—DC Motor and Load
Transfer Function—DC Motor and Load
PROBLEM: Given the system and torque-speed curve of Figure 2.39(a) and (b), ﬁnd the
transfer function, θLs=Eas.
SOLUTION: Begin by ﬁnding the mechanical constants, Jm and Dm, in Eq. (2.153). From
Eq. (2.155), the total inertia at the armature of the motor is
Jm  Ja  JL
N1
N2
	

2
 5  700
1
10
	

2
 12
2.164
and the total damping at the armature of the motor is
Dm  Da  DL
N1
N2
	

2
 2  800
1
10
	

2
 10
2.165
Virtual Experiment 2.2
Open-Loop Servo Motor
Put theory into practice
exploring the dynamics of the
Quanser Rotary Servo System
modeled in LabVIEW. It is
particularly important to
know how a servo motor
behaves when using them in
high-precision applications
such as hard disk drives.
Virtual experiments are found
on Learning Space.
2.8 Electromechanical System Transfer Functions
81

Now we will ﬁnd the electrical constants, Kt=Ra and Kb. From the torque-speed
curve of Figure 2.39(b),
Tstall  500
2.166
ωno-load  50
2.167
ea  100
2.168
Hence the electrical constants are
Kt
Ra
 Tstall
ea
 500
100  5
2.169
and
Kb 
ea
ωno-load
 100
50  2
2.170
Substituting Eqs. (2.164), (2.165), (2.169), and (2.170) into Eq. (2.153) yield
θms
Eas 
5=12
s s  1
12 10  52

 
0:417
ss  1:667
2.171
In order to ﬁnd θLs=Eas, we use the gear ratio, N1=N2  1=10, and ﬁnd
θLs
Eas 
0:0417
ss  1:667
2.172
as shown in Figure 2.39(c).
Tm
ea = 100 V
500
Torque
(N-m)
50
Speed (rad/s)
ia(t)
ea(t)
Ra
θm(t)
θL(t)
Fixed
field
(a)
N1 = 100
N2 = 1000
Da = 2 N-m s/rad
Ja = 5 kg-m2
JL = 700 kg-m2
DL = 800 N-m s/rad
(b)
ωm
+
–
0.0417
s(s + 1.667)
(c)
Ea (s)
θL (s)
FIGURE 2.39
a. DC motor and load; b. torque-speed curve; c. block diagram
82
Chapter 2
Modeling in the Frequency Domain

2.9 Electric Circuit Analogs
In this section, we show the commonality of systems from the various disciplines by
demonstrating that the mechanical systems with which we worked can be represented by
equivalent electric circuits. We have pointed out the similarity between the equations
resulting from Kirchhoff’s laws for electrical systems and the equations of motion of
mechanical systems. We now show this commonality even more convincingly by producing
electric circuit equivalents for mechanical systems. The variables of the electric circuits
behave exactly as the analogous variables of the mechanical systems. In fact, converting
mechanical systems to electrical networks before writing the describing equations is a
problem-solving approach that you may want to pursue.
Anelectriccircuit that is analogousto asystemfrom another discipline is called anelectric
circuit analog. Analogs can be obtained by comparing the describing equations, such as the
equations of motion of a mechanical system, with either electrical mesh or nodal equations.
When compared with mesh equations, the resulting electrical circuit is called a series analog.
When compared with nodal equations, the resulting electrical circuit is called a parallel analog.
Series Analog
Consider the translational mechanical system shown in Figure 2.41(a), whose equation of
motion is
Ms2  fvs  KXs  Fs
2.173
Kirchhoff’s mesh equation for the simple series RLC network shown in Figure 2.41(b) is
Ls  R  1
Cs
	

Is  Es
2.174
As we previously pointed out, Eq. (2.173) is not directly analogous to Eq. (2.174)
because displacement and current are not analogous. We can create a direct analogy by
Skill-Assessment Exercise 2.11
PROBLEM: Find the transfer function, Gs  θLs=Eas, for the motor and load
shown in Figure 2.40. The torque-speed curve is given by Tm  8ωm  200 when the
input voltage is 100 volts.
ANSWER: Gs 
1=20
ss  15=2
The complete solution is at www.wiley.com/college/nise.
+
–
ea(t)
Ja = 1 kg-m2
Da = 5 N-m-s/rad
DL = 800 N-m-s/rad
JL = 400 kg-m2
N2 = 100
N1 = 20
N4 = 100
N3 = 25
θL(t)
Motor
FIGURE 2.40
Electromechanical system for
Skill-Assessment Exercise 2.11
2.9 Electric Circuit Analogs
83

operating on Eq. (2.173) to convert displacement to velocity by dividing and multiplying the
left-hand side by s, yielding
Ms2  fvs  K
s
sXs 
Ms  fv  K
s
	

Vs  Fs
2.175
Comparing Eqs. 2.174 and 2.175, we recognize the sum of impedances and draw the circuit
shown in Figure 2.41(c). The conversions are summarized in Figure 2.41(d).
When we have more than one degree of freedom, the impedances associated with a
motion appear as series electrical elements in a mesh, but the impedances between adjacent
motions are drawn as series electrical impedances between the two corresponding meshes.
We demonstrate with an example.
+
fv
M
–
f(t)
v(t)
1
K
+
R
L
e(t)
i(t)
C
(c)
(b)
f(t)
K
fv
(a)
x(t)
(d)
mass = M
viscous damper = fv
spring = K
applied force =  f(t)
velocity = v(t)
inductor            =   M henries
resistor             =  fv  ohms
capacitor          =    1
voltage source  =   f(t)
mesh current    =   v(t)
K
M
+–
+–
–
farads
FIGURE 2.41
Development
of series analog: a. mechanical
system; b. desired electrical
representation; c. series analog;
d. parameters for series analog
Example 2.24
Converting a Mechanical System to a Series Analog
Converting a Mechanical System to a Series Analog
PROBLEM: Draw a series analog for the mechanical system of Figure 2.17(a).
SOLUTION: Equations (2.118) are analogous to electrical mesh equations after
conversion to velocity. Thus,
M1s   fv1  fv3  K1  K2
s


V1s 
fv3  K2
s
	

V2s  Fs
(2.176a)
 fv3  K2
s
	

V1s  M2s   fv2  fv3  K2  K3
s


V2s  0
(2.176b)
Coefﬁcients represent sums of electrical impedance. Mechanical impedances associated
with M1 form the ﬁrst mesh, where impedances between the two masses are common to
the two loops. Impedances associated with M2 form the second mesh. The result is shown
in Figure 2.42, where v1t and v2t are the velocities of M1 and M2, respectively.
84
Chapter 2
Modeling in the Frequency Domain

Parallel Analog
A system can also be converted to an equivalent parallel analog. Consider the
translational mechanical system shown in Figure 2.43(a), whose equation of motion
is given by Eq. (2.175). Kirchhoff’s nodal equation for the simple parallel RLC network
shown in Figure 2.43(b) is
Cs  1
R  1
Ls
	

Es  Is
2.177
Comparing Eqs. (2.175) and (2.177), we identify the sum of admittances and draw the
circuit shown in Figure 2.43(c). The conversions are summarized in Figure 2.43(d).
When we have more than one degree of freedom, the components associated with a
motion appear as parallel electrical elements connected to a node. The components of
adjacent motions are drawn as parallel electrical elements between two corresponding
nodes. We demonstrate with an example.
i(t)
(c)
(b)
(d)
mass = M
viscous damper = fv
spring = K
applied force =  f(t)
velocity = v(t)
capacitor          =  M farads
resistor             =  fv  ohms
inductor            =  1  henries
current source  = f(t)
node voltage     = v(t)
1
C
R
L
e(t)
f(t)
M
v(t)
1
fv
1
K
K
f(t)
K
fv
(a)
x(t)
M
FIGURE 2.43
Development
of parallel analog: a. mechanical
system; b. desired electrical
representation;c.parallelanalog;
d. parameters for parallel analog
v2(t)
fv3
1
K2
M1
1
K1
M2
fv1
1
K3
fv2
v1(t)
f(t)
+–
FIGURE 2.42
Series analog
of mechanical system of
Figure 2.17(a)
2.9 Electric Circuit Analogs
85

2.10 Nonlinearities
The models thus far are developed from systems that can be described approximately by
linear, time-invariant differential equations. An assumption of linearity was implicit in the
development of these models. In this section, we formally deﬁne the terms linear and
nonlinear and show how to distinguish between the two. In Section 2.11, we show how to
approximate a nonlinear system as a linear system so that we can use the modeling
techniques previously covered in this chapter (Hsu, 1968).
A linear system possesses two properties: superposition and homogeneity. The property
of superposition means that the output response of a system to the sum of inputs is the sum of
the responses to the individual inputs. Thus, if an input of r1t
yields an output of c1t and an input of r2(t) yields an output of
c2t, then aninputof r1t  r2t yields anoutputofc1t  c2t.
The property of homogeneity describes the response of the system
to a multiplication of the input by a scalar. Speciﬁcally, in a linear
system, the property of homogeneity is demonstrated if for an
input of r1t that yields anoutputof c1t, an inputof Ar1t yields
an output of Ac1t; that is, multiplication of an input by a scalar
yields a response that is multiplied by the same scalar.
We can visualize linearity as shown in Figure 2.45.
Figure 2.45(a) is a linear system where the output is always
Example 2.25
Converting a Mechanical System to a Parallel Analog
Converting a Mechanical System to a Parallel Analog
PROBLEM: Draw a parallel analog for the mechanical system of Figure 2.17(a).
SOLUTION: Equation (2.176) is also analogous to electrical node equations. Coefﬁcients
representsumsofelectricaladmittances.AdmittancesassociatedwithM1 formtheelements
connected to the ﬁrst node, where mechanical admittances between the two masses are
common to the two nodes. Mechanical admittances associated with M2 form the elements
connected to the second node. The result is shown in Figure 2.44, where v1t and v2t are
the velocities of M1 and M2, respectively.
f(t)
M1
v1(t)
1
fv1
1
K1
M2
1
fv3
1
K2
1
fv2
1
K3
v2(t)
FIGURE 2.44
Parallel analog
of mechanical system of
Figure 2.17(a)
Skill-Assessment Exercise 2.12
PROBLEM: Draw a series and parallel analog for the rotational mechanical system of
Figure 2.22.
ANSWER: The complete solution is at www.wiley.com/college/nise.
Output
Input
x
0
1
2
3
4
1
2
Output
Input
x
0
(a)
(b)
f(x)
f(x)
1
2
1
2
3
4
FIGURE 2.45
a. Linear system; b. nonlinear system
86
Chapter 2
Modeling in the Frequency Domain

one half the input, or f x  0:5x, regardless of the value of x. Thus each of the two
properties of linear systems applies. For example, an input of 1 yields an output of 1
2 and an
input of 2 yields an output of 1. Using superposition, an input that is the sum of the original
inputs, or 3, should yield an output that is the sum of the individual outputs, or 1.5. From
Figure 2.45(a), an input of 3 does indeed yield an output of 1.5.
To test the property of homogeneity, assume an input of 2, which yields an output of 1.
Multiplying this input by 2 should yield an output of twice as much, or 2. From Figure 2.45(a),
an input of 4 does indeed yield an output of 2. The reader can verify that the properties of
linearity certainly do not apply to the relationship shown in Figure 2.45(b).
Figure 2.46 shows some examples of physical nonlinearities. An electronic ampliﬁer is
linear over a speciﬁc range but exhibits the nonlinearity called saturation at high input
voltages. A motor that does not respond at very low input voltages due to frictional forces
exhibits a nonlinearity called dead zone. Gears that do not ﬁt tightly exhibit a nonlinearity
called backlash: The input moves over a small range without the output responding. The
reader should verify that the curves shown in Figure 2.46 do not ﬁt the deﬁnitions of linearity
over theirentire range.Another example of a nonlinear subsystem is a phase detector,used in a
phase-locked loop in an FM radio receiver, whose output response is the sine of the input.
A designer can often make a linear approximation to a nonlinear system. Linear
approximations simplify the analysis and design of a system and are used as long as the
results yield a good approximation to reality. For example, a linear relationship can be
established at a point on the nonlinear curve if the range of input values about that point is
small and the origin is translated to that point. Electronic ampliﬁers are an example of
physical devices that perform linear ampliﬁcation with small excursions about a point.
2.11 Linearization
The electrical and mechanical systems covered thus far were assumed to be linear. However,
if any nonlinear components are present, we must linearize the system before we can ﬁnd the
transfer function. In the last section, we deﬁned and discussed nonlinearities; in this section,
we show how to obtain linear approximations to nonlinear systems in order to obtain
transfer functions.
The ﬁrst step is to recognize the nonlinear component and write the nonlinear
differential equation. When we linearize a nonlinear differential equation, we linearize it
for small-signal inputs about the steady-state solution when the small-signal input is equal to
zero. This steady-state solution is called equilibrium and is selected as the second step in the
linearizationprocess.Forexample, whena pendulum is atrest, itis at equilibrium.The angular
displacement is described by a nonlinear differential equation, but it can be expressed with a
linear differential equation for small excursions about this equilibrium point.
Next we linearize the nonlinear differential equation, and then we take the Laplace
transform of the linearized differential equation, assuming zero initial conditions. Finally,
we separate input and output variables and form the transfer function. Let us ﬁrst see how to
linearize a function; later, we will apply the method to the linearization of a differential
equation.
Output
Input
x
Output
Input
x
Output
Input
x
f(x)
f(x)
f(x)
Amplifier saturation
Motor dead zone
Backlash in gears
FIGURE 2.46
Some physical
nonlinearities
2.11 Linearization
87

If we assume a nonlinear system operating at point A, x0; f x0 in
Figure 2.47, small changes in the input can be related to changes in the output
about the point by way of the slope of the curve at the point A. Thus, if the slope of
the curve at point A is ma, then small excursions of the input about point A, δx, yield
small changes in the output, δf x, related by the slope at point A. Thus,
f x  f x0 ≈max  x0
2.178
from which
δf x ≈maδx
2.179
and
f x ≈f x0  max  x0 ≈f x0  maδx
2.180
This relationship is shown graphically in Figure 2.47, where a new set of axes, δx and
δf x, is created at the point A, and f(x) is approximately equal to f x0, the ordinate of
the new origin, plus small excursions, maδx, away from point A. Let us look at an
example.
Example 2.26
Linearizing a Function
Linearizing a Function
PROBLEM: Linearize f x  5 cos x about x  π=2.
SOLUTION: We ﬁrst ﬁnd that the derivative of f(x) is df =dx  5 sin x. At x  π=2, the
derivativeis5.Alsof x0  f π=2  5 cos π=2  0.Thus,fromEq.(2.180),thesystem
can be represented as f x  5 δx for small excursions of x about π=2. The process is
shown graphically in Figure 2.48, where the cosine curve does indeed look like a straight
line of slope 5 near π=2.
Output
Input
x
x0
0
x
δx
f(x)
~ f(x)
f(x0)
δf(x)
A
~
FIGURE 2.47
Linearization about
point A
x
4
3
2
1
1
2
3
δx
Slope = –5
π/2
0
5
f(x)
δf(x)
–1
–4
4
–3
–2
–1
–2
–3
–4
–5
FIGURE 2.48
Linearization
of 5 cos x about x  π=2
88
Chapter 2
Modeling in the Frequency Domain

The previous discussion can be formalized using the Taylor series expansion, which
expresses the value of a function in terms of the value of that function at a particular point,
the excursion away from that point, and derivatives evaluated at that point. The Taylor series
is shown in Eq. (2.181).
f x  f x0  df
dx

xx0
x  x0
1!
 d2f
dx2

xx0
x  x02
2!
 ∙∙∙
2.181
For small excursions of x from x0, we can neglect higher-order terms. The resulting
approximation yields a straight-line relationship between the change in f(x) and the
excursions away from x0. Neglecting the higher-order terms in Eq. (2.181), we get
f x  f x0 ≈df
dx

xx0x  x0
2.182
or
δf x ≈m

xx0δx
2.183
which is a linear relationship between δf x and δx for small excursions away from x0. It is
interesting to note that Eqs. (2.182) and (2.183) are identical to Eqs. (2.178) and (2.179),
which we derived intuitively. The following examples illustrate linearization. The ﬁrst
example demonstrates linearization of a differential equation, and the second example
applies linearization to ﬁnding a transfer function.
Example 2.27
Linearizing a Differential Equation
Linearizing a Differential Equation
PROBLEM: Linearize Eq. (2.184) for small excursions about x  π=4.
d2x
dt2  2 dx
dt  cos x  0
2.184
SOLUTION: The presence of the term cos x makes this equation nonlinear. Since we
want to linearize the equation about x  π=4, we let x  δx  π=4, where δx is the small
excursion about π=4, and substitute x into Eq. (2.184):
d2 δx  π
4


dt2
 2
d δx  π
4


dt
 cos δx  π
4


 0
2.185
But
d2 δx  π
4


dt2
 d2δx
dt2
2.186
and
d δx  π
4


dt
 dδx
dt
2.187
2.11 Linearization
89

Finally, the term cos δx  π=4

) can be linearized with the truncated Taylor series.
Substituting f x  cos δx  π=4; f x0  f π=4  cos π=4; and x  x0  δx into
Eq. (2.182) yields
cos δx  π
4


 cos π
4
 
 d cos x
dx

xπ
4
δx  sin π
4
 
δx
2.188
Solving Eq. (2.188) for cosδx  π=4, we get
cos δx  π
4


 cos π
4
 
 sin π
4
 
δx 
ﬃﬃﬃ
2
p
2 
ﬃﬃﬃ
2
p
2 δx
2.189
Substituting Eqs. (2.186), (2.187), and (2.189) into Eq. (2.185) yields the following
linearized differential equation:
d2δx
dt2  2 dδx
dt 
ﬃﬃﬃ
2
p
2 δx  
ﬃﬃﬃ
2
p
2
2.190
This equation can now be solved for δx, from which we can obtain x  δx  π=4.
Even though the nonlinear Eq. (2.184) is homogeneous, the linearized Eq. (2.190) is
not homogeneous. Eq. (2.190) has a forcing function on its right-hand side. This additional
term can be thought of as an input to a system represented by Eq. (2.184).
Another observation about Eq. (2.190) is the negative sign on the left-hand side. The
study of differential equations tells us that since the roots of the characteristic equation are
positive, the homogeneous solution grows without bound instead of diminishing to zero.
Thus, this system, linearized around x  π=4, is not stable.
Example 2.28
Transfer Function—Nonlinear Electrical Network
Transfer Function—Nonlinear Electrical Network
PROBLEM: Find the transfer function, VLs=Vs, for the electrical network
shown in Figure 2.49, which contains a nonlinear resistor whose voltage-current
relationship is deﬁned by ir  2e0:1vr, where ir and vr are the resistor current and
voltage, respectively. Also, v(t) in Figure 2.49 is a small-signal source.
SOLUTION: We will use Kirchhoff’svoltage law tosum the voltages in the loop to
obtain the nonlinear differential equation, but ﬁrst we must solve for the voltage
across the nonlinear resistor. Taking the natural log of the resistor's current-voltage
relationship, we get vr  10 ln 1
2 ir. Applying Kirchhoff’s voltage law around the
loop, where ir  i, yields
L di
dt  10 ln 1
2 i  20  vt
2.191
Next, let us evaluate the equilibrium solution. First, set the small-signal source, v(t),
equal to zero. Now evaluate the steady-state current. With vt  0, the circuit consists of a
20 V battery in series with the inductor and nonlinear resistor. In the steady state, the
voltage across the inductor will be zero, since vLt  Ldi=dt and di=dt is zero in the steady
state, given a constant battery source. Hence, the resistor voltage, vr, is 20 V. Using the
characteristics of the resistor, ir  2e0:1vr, we ﬁnd that ir  i  14:78 amps. This current,
vL(t)
1 H
Nonlinear
resistor
20 V
v(t)
i(t)
+
+–
–
r
FIGURE 2.49
Nonlinear electrical
network
90
Chapter 2
Modeling in the Frequency Domain

i0, is the equilibrium value of the network current. Hence i  i0  δi. Substituting this
current into Eq. (2.191) yields
L di0  δi
dt
 10 ln 1
2 i0  δi  20  vt
2.192
Using Eq. (2.182) to linearize ln 1
2 i0  δi, we get
ln 1
2 i0  δi  ln 1
2 i0 
d ln1
2 i


di

ii0δi  1
i

ii0δi  1
i0
δi
2.193
or
ln 1
2 i0  δi  ln i0
2  1
i0
δi
2.194
Substituting into Eq. (2.192), the linearized equation becomes
L dδi
dt  10
ln i0
2  1
i0
δi
	

 20  vt
2.195
Letting L  1 and i0  14:78, the ﬁnal linearized differential equation is
dδi
dt  0:677δi  vt
2.196
Taking the Laplace transform with zero initial conditions and solving for δis, we get
δis 
Vs
s  0:677
2.197
But the voltage across the inductor about the equilibrium point is
vLt  L d
dt i0  δi  L dδi
dt
2.198
Taking the Laplace transform,
VLs  Lsδis  sδis
2.199
Substituting Eq. (2.197) into Eq. (2.199) yields
VLs  s
Vs
s  0:677
2.200
from which the ﬁnal transfer function is
VLs
Vs 
s
s  0:677
2.201
for small excursions about i  14:78 or, equivalently, about vt  0.
Skill-Assessment Exercise 2.13
PROBLEM: Find the linearized transfer function, Gs  Vs=Is, for the electri-
cal network shown in Figure 2.50. The network contains a nonlinear resistor whose
voltage-current relationship is deﬁned by ir  evr. The current source, i(t), is a
small-signal generator.
2.11 Linearization
91

ANSWER: Gs 
1
s  2
The complete solution is at www.wiley.com/college/nise.
2 A
i(t)
v(t)
Nonlinear
resistor
r
1 F
FIGURE 2.50
Nonlinear
electric circuit for Skill-
Assessment Exercise 2.13
Case Studies
Antenna Control: Transfer Functions
Antenna Control: Transfer Functions
This chapter showed that physical systems can be modeled mathematically with transfer
functions. Typically, systems are composed of subsystems of different types, such as
electrical, mechanical, and electromechanical.
The ﬁrst case study uses our ongoing example of the antenna azimuth position
control system to show how to represent each subsystem as a transfer function.
PROBLEM: Find the transfer function for each subsystem of the antenna azimuth
position control system schematic shown on the front endpapers. Use Conﬁguration 1.
SOLUTION: First, we identify the individual subsystems for which we must ﬁnd
transfer functions; they are summarized in Table 2.6. We proceed to ﬁnd the transfer
function for each subsystem.
Input Potentiometer; Output Potentiometer
Since the input and output potentiometers are conﬁgured in the same way, their transfer
functions will be the same. We neglect the dynamics for the potentiometers and simply
ﬁnd the relationship between the output voltage and the input angular displacement. In
the center position the output voltage is zero. Five turns toward either the positive
10 volts or the negative 10 volts yields a voltage change of 10 volts. Thus, the transfer
function, Vis=θis, for the potentiometers is found by dividing the voltage change by
TABLE 2.6
Subsystems of the antenna azimuth position control system
Subsystem
Input
Output
Input potentiometer
Angular rotation from user, θit
Voltage to preamp, vit
Preamp
Voltage from potentiometers,
vet  vit  v0t
Voltage to power amp, vpt
Power amp
Voltage from preamp, vpt
Voltage to motor, eat
Motor
Voltage from power amp, eat
Angular rotation to
load, θ0t
Output potentiometer
Angular rotation from load, θ0t
Voltage to preamp, v0(t)
92
Chapter 2
Modeling in the Frequency Domain

the angular displacement:
Vis
θis  10
10π  1
π
2.202
Preampliﬁer; Power Ampliﬁer
The transfer functions of the ampliﬁers are given in the problem statement. Two
phenomena are neglected. First, we assume that saturation is never reached. Second, the
dynamics of the preampliﬁer are neglected, since its speed of response is typically much
greater than that of the power ampliﬁer. The transfer functions of both ampliﬁers are
given in the problem statement and are the ratio of the Laplace transforms of the output
voltage divided by the input voltage. Hence, for the preampliﬁer,
Vps
Ves  K
2.203
and for the power ampliﬁer,
Eas
Vps 
100
s  100
2.204
Motor and Load
The motor and its load are next. The transfer function relating the armature displacement
to the armature voltage is given in Eq. (2.153). The equivalent inertia, Jm, is
Jm  Ja  JL
25
250
	

2
 0:02  1 1
100  0:03
2.205
where JL  1 is the load inertia at θ0. The equivalent viscous damping, Dm, at the
armature is
Dm  Da  DL
25
250
	

2
 0:01  1 1
100  0:02
2.206
where DL is the load viscous damping at θ0. From the problem statement, Kt  0:5 N-m/A,
Kb  0:5 V-s/rad, and the armature resistance Ra  8 ohms. These quantities along with
Jm and Dm are substituted into Eq. (2.153), yielding the transfer function of the motor from
the armature voltage to the armature displacement, or
θms
Eas 
Kt=RaJm
s s  1
Jm
Dm  KtKb
Ra
	


 
2:083
ss  1:71
2.207
To complete the transfer function of the motor, we multiply by the gear ratio to arrive at the
transfer function relating load displacement to armature voltage:
θ0s
Eas  0:1 θms
Eas 
0:2083
ss  1:71
2.208
The results are summarized in the block diagram and table of block diagram parameters
(Conﬁguration 1) shown on the front endpapers. An animation PowerPoint presentation
(PPT) demonstrating this system is available for instructors at www.wiley.com/college/nise.
See Antenna (Ch. 2).
CHALLENGE:
We now give you a problem to test your knowledge of this chapter’s
objectives: Referring to the antenna azimuth position control system schematic
shown on the front endpapers, evaluate the transfer function of each subsystem. Use
Case Studies
93

Conﬁguration 2. Record your results in the table of block diagram parameters shown on
the front endpapers for use in subsequent chapters’ case study challenges.
Transfer Function of a Human Leg
Transfer Function of a Human Leg
In this case study we ﬁnd the transfer function of a biological system. The
system is a human leg, which pivots from the hip joint. In this problem, the
component of weight is nonlinear, so the system requires linearization before
the evaluation of the transfer function.
PROBLEM: The transfer function of a human leg relates the output angular
rotation about the hip joint to the input torque supplied by the leg muscle. A
simpliﬁed model for the leg is shown in Figure 2.51. The model assumes an
applied muscular torque, Tm(t), viscous damping, D, at the hip joint, and
inertia, J, around the hip joint.15 Also, a component of the weight of the leg,
Mg, where M is the mass of the leg and g is the acceleration due to gravity,
creates a nonlinear torque. If we assume that the leg is of uniform density, the
weight can be applied at L/2, where L is the length of the leg (Milsum, 1966).
Do the following:
a. Evaluate the nonlinear torque.
b. Find the transfer function, θs=Tms, for small angles of rotation, where
θs is the angular rotation of the leg about the hip joint.
SOLUTION: First,calculatethetorquedue totheweight.Thetotalweightofthe
legisMgactingvertically.Thecomponentoftheweightinthedirectionofrotation
is Mg sin θ. This force is applied at a distance L=2 from the hip joint. Hence the
torqueinthedirectionofrotation,TW(t),isMgL=2 sin θ.Next,drawafree-body
diagram of the leg, showing the applied torque, Tm(t), the torque due to the
weight, TW(t), and the opposing torques due to inertia and viscous damping (see
Figure 2.52).
Summing torques, we get
J d2θ
dt2  D dθ
dt  Mg L
2 sin θ  Tmt
2.209
We linearize the system about the equilibrium point, θ  0, the vertical position of the leg.
Using Eq. (2.182), we get
sinθ  sin0  cos0δ θ
2.210
from which, sin θ  δθ. Also, Jd2θ=dt2  Jd2δθ=dt2 and Ddθ=dt  Ddδθ=dt. Hence
Eq. (2.209) becomes
J d2δθ
dt2  D dδθ
dt  Mg L
2 δθ  Tmt
2.211
Notice that the torque due to the weight approximates a spring torque on the leg. Taking
the Laplace transform with zero initial conditions yields
Js2  Ds  Mg L
2
	

δθs  Tms
2.212
15 For emphasis, J is not around the center of mass, as we previously assumed for inertia in mechanical rotation.
Leg
Tm(t)
θ
d2θ
J
D
dt2
TW(t)
dt
dθ
FIGURE 2.52
Free-body diagram of
leg model
θ
Tm
Mg sin θ
Mg
Leg
Hip joint
L/2
L/2
FIGURE 2.51
Cylinder model of a
human leg
94
Chapter 2
Modeling in the Frequency Domain

Summary
In this chapter, we discussed how to ﬁnd a mathematical model, called a transfer function,
for linear, time-invariant electrical, mechanical, and electromechanical systems. The
transfer function is deﬁned as Gs  Cs=Rs, or the ratio of the Laplace transform of
the output to the Laplace transform of the input. This relationship is algebraic and also
adapts itself to modeling interconnected subsystems.
We realize that the physical world consists of more systems than we illustrated in this
chapter. For example, we could apply transfer function modeling to hydraulic, pneumatic,
heat, and even economic systems. Of course, we must assume these systems to be linear, or
make linear approximations, in order to use this modeling technique.
Now that we have our transfer function, we can evaluate its response to a speciﬁed
input. System response will be covered in Chapter 4. For those pursuing the state-space
approach, we continue our discussion of modeling in Chapter 3, where we use the time
domain rather than the frequency domain.
Review Questions
1. What mathematical model permits easy interconnection of physical systems?
2. To what classiﬁcation of systems can the transfer function be best applied?
3. What transformation turns the solution of differential equations into algebraic
manipulations?
4. Deﬁne the transfer function.
5. What assumption is made concerning initial conditions when dealing with transfer
functions?
6. What do we call the mechanical equations written in order to evaluate the transfer
function?
7. If we understand the form the mechanical equations take, what step do we avoid in
evaluating the transfer function?
8. Whydotransferfunctionsformechanicalnetworkslookidenticaltotransferfunctionsfor
electrical networks?
9. What function do gears perform?
from which the transfer function is
δθs
Tms 
1=J
s2  D
J s  MgL
2J
2.213
for small excursions about the equilibrium point, θ  0.
CHALLENGE: We now introduce a case study challenge to test your
knowledge of this chapter’s objectives. Although the physical system
is different from a human leg, the problem demonstrates the same
principles: linearization followed by transfer function evaluation.
Given the nonlinear electrical network shown in Figure 2.53, ﬁnd
the transfer function relating the output nonlinear resistor voltage, Vr(s),
to the input source voltage, V(s).
1 H
5 V
Nonlinear
resistor
v(t)
i(t)
vr(t) = 2ir
2(t)
+
+
–
–
r
FIGURE 2.53
Nonlinear electric circuit
Review Questions
95

10. What are the component parts of the mechanical constants of a motor’s transfer function?
11. The motor’s transfer function relates armature displacement to armature voltage.
How can the transfer function that relates load displacement and armature voltage be
determined?
12. Summarize the steps taken to linearize a nonlinear system.
Problems
1. Derive the Laplace transform for the following time
functions: [Section: 2.2]
a. u(t)
b. tu(t)
c. sin ωt ut
d. cos ωt ut
2. Using the Laplace transform pairs of Table 2.1 and the
Laplace transform theorems of Table 2.2, derive the
Laplace transforms for the following time functions:
[Section: 2.2]
a. eatsin ωt ut
b. eatcos ωt ut
c. t3ut
3. Repeat Problem 19 in Chapter 1, using Laplace
transforms. Assume zero initial conditions. [Sections:
2.2; 2.3]
4. Repeat Problem 20 in Chapter 1, using Laplace trans-
forms. Assume that the forcing functions are zero prior
to t  0. [Section: 2.2]
5. Repeat Problem 21 in Chapter 1, using Laplace trans-
forms. Use the following initial conditions for each part
as follows: (a) x 0  4; x´0  4; (b) x04;
x´01; (c) x02; x´03, where x´0dx
dt 0.
Assume that the forcing functions are zero prior to
t0. [Section: 2.2]
6. Use MATLAB and the Symbolic Math
Toolbox to ﬁnd the Laplace
transform of the following time
functions: [Section: 2.2]
a. f t  8t2cos 3t  45°
b. f t  3te2tsin 4t  60°
7. Use MATLAB and the Symbolic Math
Toolbox to ﬁnd the inverse
Laplace transform of the following
frequency functions: [Section: 2.2]
a. Gs 
s2  3s  10s  5
s  3s  4s2  2s  100
b. Gs 
s3  4s2  2s  6
s  8s2  8s  3s2  5s  7
8. A system is described by the following differential
equation:
d3y
dt3  3 d2y
dt2  5 dy
dt  y  d3x
dt3  4 d2x
dt2  6 dx
dt  8x
Find the expression for the transfer function of the
system, Ys=Xs. [Section: 2.3]
9. For each of the following transfer functions, write the
corresponding differential equation. [Section: 2.3]
a. Xs
Fs 
7
s2  5s  10
b. Xs
Fs 
15
s  10s  11
c. Xs
Fs 
s  3
s3  11s2  12s  18
10. Write the differential equation for the system shown in
Figure P2.1. [Section: 2.3]
s5 + 2s4 + 4s3 + s2 + 4
s6 + 7s5 + 3s4 + 2s3 + s2 + 5
C(s)
R(s)
FIGURE P2.1
11. Write the differential equation that is mathematically
equivalent to the block diagram shown in Figure P2.2.
Assume that rt  3t3. [Section: 2.3]
s4 + 3s3 + 2s2 + s + 1
s5 + 4s4 + 3s3 + 2s2 + 3s + 2
C(s)
R(s)
FIGURE P2.2
12. A system is described by the following differential equa-
tion: [Section 2.3]
d2x
dt2  4 dx
dt  5x  1
with the initial conditions x0  1; x:0  1. Show a
block diagram of the system, giving its transfer function
and all pertinent inputs and outputs. (Hint: the initial
96
Chapter 2
Modeling in the Frequency Domain

conditions will show up as added inputs to an effective
system with zero initial conditions.)
13. Use MATLAB to generate the
transfer function: [Section: 2.3]
Gs 
5s  15s  26s  72
ss  55s2  5s  30s  56s2  27s  52
in the following ways:
a. the ratio of factors;
b. the ratio of polynomials.
14. Repeat Problem 13 for the
following transfer function:
[Section: 2.3]
Gs 
s4  25s3  20s2  15s  42
s5  13s4  9s3  37s2  35s  50
15. Use MATLAB to generate the partial-
fraction
expansion
of
the
following
function: [Section: 2.3]
Fs 
104s  5s  70
ss  45s  55s2  7s  110s2  6s  95
16. Use MATLAB and the Symbolic Math
Toolbox to input and form LTI
objects in polynomial and factored form
for the following frequency functions:
[Section: 2.3]
a. Gs 
45s2  37s  74s3  28s2  32s  16
s  39s  47s2  2s  100s3  27s2  18s  15
b. Gs 
56s  14s3  49s2  62s  53
s3  81s2  76s  65s2  88s  33s2  56s  77
17. Find the transfer function, Gs  Vos=Vis, for each
network shown in Figure P2.3. [Section: 2.4]
2 Ω
1 Ω
+
1H
1 Ω
vo(t)
vi(t) +–
–
(a)
+
1 H
2 F
vo(t)
1 Ω
vi(t) +–
–
(b)
FIGURE P2.3
18. Find the transfer function, Gs  VLs=Vs, for each
network shown in Figure P2.4. [Section: 2.4]
2 Ω
F
vL(t)
+
v(t)
2 Ω
2 Ω
2 H
1
2
+–
–
vL(t)
+
–
(b)
v(t)
2
2 H
2 H
Ω
2Ω
(a)
+–
F
1
2
FIGURE P2.4
19. Find the transfer function, Gs  Vos= Vis, for each
network shown in Figure P2.5. Solve the problem using
mesh analysis. [Section: 2.4]
+
–
vi(t)
vo(t)
1
1
2 H
3 H
2 F
Ω
(a)
+–
1 F 1 F
vi(t)
vo(t)
+
1 Ω
+–
–
(b)
1 H
1 H
1 H
FIGURE P2.5
20. Repeat Problem 19 using nodal equations. [Section: 2.4]
21. a. Write, but do not solve, the mesh and nodal equations
for the network of Figure P2.6. [Section: 2.4]
b. Use MATLAB, the Symbolic Math
Toolbox, and the equations
found in part a to solve for the
transfer function, Gs  Vos=Vs. Use
both the mesh and nodal equations and
show that either set yields the same
transfer function. [Section: 2.4]
2 Ω
4 Ω
8 Ω
2 Ω
4 H
6 H
1
9 F
v(t)
vo(t)
+
–
+–
FIGURE P2.6
22. Find the transfer function, Gs  Vos=Vis, for
each operational ampliﬁer circuit shown in Figure P2.7.
[Section: 2.4]
Problems
97

100 kΩ
100 kΩ
100 kΩ
2
2 μF
vi(t)
vo(t)
v1(t)
(b)
+
–
100 kΩ
500 kΩ 2 μF
2 μF
vi(t)
vo(t)
v1(t)
(a)
+
–
FIGURE P2.7
23. Find the transfer function, Gs  Vos=Vis, for each
operational ampliﬁer circuit shown in Figure P2.8.
[Section: 2.4]
v1(t)
vi(t)
vo(t)
vi(t)
110 kΩ
400 kΩ
4 μF
4 μF
4 μF
(a)
(b)
+
–
110 kΩ
600 kΩ
600 kΩ
400 kΩ
4 μF
vo(t)
v1(t)
+
–
FIGURE P2.8
24. Find the transfer function, Gs  X1s=Fs, for the
translational mechanical system shown in Figure P2.9.
[Section: 2.5]
4 N-s/m
5 N/m
f(t)
5 kg
x1(t)
FIGURE P2.9
25. Find the transfer function, Gs  X2s=Fs, for the
translational mechanical network shown in Figure P2.10.
[Section: 2.5]
f(t)
x2(t)
x1(t)
Frictionless
1 N/m
1 kg
1 kg
1 N-s/m
FIGURE P2.10
26. Find the transfer function, Gs  X2s=Fs, for the
translational mechanical system shown in Figure P2.11.
(Hint: place a zero mass at x2(t).) [Section: 2.5]
2 N-s/m
2 N/m
f(t)
x2(t)
4 N-s/m
8 kg
FIGURE P2.11
27. For the system of Figure P2.12 ﬁnd the transfer function,
Gs  X1s=Fs. [Section: 2.5]
4 N/m
3 N-s/m
3 N-s/m
f(t)
2 N-s/m
5 N/m
x1(t)
x2(t)
1 kg
2 kg fv3 =
fv1 =
fv2 =
M1 =
M2 =
K1 =
K2 =
FIGURE P2.12
28. Find the transfer function, Gs  X3s=Fs, for the
translational mechanical system shown in Figure P2.13.
[Section: 2.5]
2 N-s/m
2 N-s/m
6 N/m
6 N/m
Frictionless
f(t)
2 N-s/m
4 kg
4 kg
4 kg
x2(t)
x3(t)
x1(t)
FIGURE P2.13
98
Chapter 2
Modeling in the Frequency Domain

29. Find the transfer function, X3s=Fs, for each system
shown in Figure P2.14. [Section: 2.5]
fv1 = 4 N-s/m
fv2 = 4 N-s/m
fv4 = 4 N-s/m
fv3 = 4 N-s/m
K= 5 N/m
M1 = 4 kg
M2 = 4 kg
x1(t)
f (t)
x2(t)
x3(t)
(a)
4 N-s/m
1 N/m
f(t)
16 N-s/m 15 N/m
M1 = 8 kg
x1(t)
x2(t)
x3(t)
M2=3 kg
Frictionless
Frictionless
Frictionless
(b)
FIGURE P2.14
30. Write, but do not solve, the equations of motion for the
translational mechanical system shown in Figure P2.15.
[Section: 2.5]
f(t)
x1(t)
x2(t)
x3(t)
K1 = 5 N/m
K2 = 4 N/m
fv2 = 2 N-s/m
fv1 = 2 N-s/m
M1 = 4 kg
fv3 = 3 N-s/m
K3 = 4 N/m
M3 = 5 kg
M2 = 5 kg
Frictionless
FIGURE P2.15
31. For the unexcited (no external force applied) system of
Figure P2.16, do the following:
a. Write the differential equation that describes the
system.
b. Assuming initial conditions x0  x0 and _x0  x1,
write a Laplace transform expression for Xs.
c. Find xt by obtaining the inverse Laplace transform
from the result in Part c.
d. What will be the oscillation frequency in Hz for this
system?
K
M
x(t)
FIGURE P2.16
32. For each of the rotational mechanical systems shown
in Figure P2.17, write, but do not solve, the equations
of motion. [Section: 2.6]
θ1(t)
θ2(t)
T(t)
5 kg-m2
3 kg-m2
9 N-m/rad
8 N-m-s/rad
3 N-m/rad
1 N-m-s/rad
(a)
(b)
J1
J2
J3
D1
K1
K3
K2
D2
T(t)
FIGURE P2.17
33. For
the
rotational
mechanical
system
shown
in
Figure
P2.18,
ﬁnd
the
transfer
function
Gs 
θ2s=Ts [Section: 2.6]
1 N-m-s/rad
1 N-m-s/rad
1 N-m/rad
1 N-m-s/rad
θ2(t)
T(t)
1 kg-m2
FIGURE P2.18
34. Find the transfer function, θ1s
Ts, for the system shown in
Figure P2.19.
θ1(t)
T(t)
1 N-m-s/rad
1 N-m/rad
1 N-m/rad
1 kg-m2
1 kg-m2
FIGURE P2.19
Problems
99

35. For the rotational mechanical system with gears shown in
FigureP2.20,ﬁndthetransferfunction,Gs  θ3s=Ts.
The gears have inertia and bearing friction as shown.
[Section: 2.7]
N2
N4
θ3(t)
N3
N1
T(t)
J2, D2
J4, D4
J1, D1
J3, D3
J5, D5
FIGURE P2.20
36. For the rotational system shown in Figure P2.21, ﬁnd the
transfer function, Gs  θ2s=Ts. [Section: 2.7]
J1 = 2 kg-m2
J2 = 1 kg-m2
J3 = 16 kg-m2
K = 64 N-m/rad
N1 = 4
T(t)
D1 = 1 N-m-s/rad
N2 = 12
D2 = 2 N-m-s/rad
N3 = 4
N4 = 16
θ2(t)
D3 = 32 N-m-s/rad
FIGURE P2.21
37. Find the transfer function, Gs  θ2s=Ts, for the
rotational mechanical system shown in Figure P2.22.
[Section: 2.7]
N1 = 5
N3 = 25
N2 = 50
500 N-m-s/rad
300 N-m/rad
150 kg-m2
3 kg-m2
θ2(t)
T(t)
100 kg-m2
3 N-m/rad
FIGURE P2.22
38. Find the transfer function, Gs  θ4s=Ts, for the
rotational system shown in Figure P2.23. [Section: 2.7]
N3 = 23
N2 = 110
2 N-m/rad
N1 = 26 N4 = 120
26 N-m-s/rad
T(t)
θ4(t)
θ1(t)
θ2(t)
θ3(t)
FIGURE P2.23
39. For the rotational system shown in Figure P2.24, ﬁnd the
transfer function, Gs  θLs=Ts. [Section: 2.7]
2 N-m/rad
0.02 N-m-s/rad
2 N-m-s/rad
θL(t)
T(t)
1 kg-m2
N2 = 20
N1 = 5
N4 = 10
N3 = 40
FIGURE P2.24
40. For the rotational system shown in Figure P2.25, write
the equations of motion from which the transfer function,
Gs  θ1s=Ts, can be found. [Section: 2.7]
K
N1
N4
DL
J4
J1
D
N3
J3
N2
J2
Ja
T(t) θ1(t)
JL
FIGURE P2.25
41. Given the rotational system shown in Figure P2.26, ﬁnd
the transfer function, Gs  θ6s=θ1s. [Section: 2.7]
N1
J1, D
N2
N3
J3
K1
N4
K2
D
T(t)
θ6(t)
θ1(t)
D
J2, D
J4, D
J5
J6
FIGURE P2.26
42. In the system shown in Figure P2.27, the inertia, J, of
radius, r,is constrainedto move only about the stationary
axis A. A viscous damping force of translational value fv
exists between the bodies J and M. If an external force,
f(t), is applied to the mass, ﬁnd the transfer function,
Gs  θs=Fs. [Sections: 2.5; 2.6]
K
fv
f(t)
M
fv
r
J
A
M
θ(t)
FIGURE P2.27
100
Chapter 2
Modeling in the Frequency Domain

43. For the combined translational and rotational system
shown in Figure P2.28, ﬁnd the transfer function,
Gs  Xs=Ts. [Sections: 2.5; 2.6; 2.7]
D2 = 1 N-m-s/rad
3 kg-m2
N1 = 10
N4 = 60
N2 = 20
Radius = 2 m
1 N-m-s/rad
 J = 3 kg-m2
Ideal
gear 1:1
3 N/m
2 N-s/m
T(t)
x(t)
N3 = 30
2 kg
FIGURE P2.28
44. Given the combined translational and rotational system
shown in Figure P2.29, ﬁnd the transfer function,
Gs  Xs=Ts. [Sections: 2.5; 2.6]
D3
J2
Radius = r
K1
Ideal
gear 1:1
K2
M
fv
J1
J3
T(t)
x(t)
FIGURE P2.29
45. For the motor, load, and torque-speed curve shown in
Figure P2.30, ﬁnd the transfer function, Gs  θLs=
Eas. [Section: 2.8]
  J2  = 36 kg-m2
N1 = 50
N2 = 150
Ra
ea(t)
θL(t)
+
D1 =  8 N-m-s/rad
D2 = 36 N-m-s/rad
T (N-m)
150
 50 V
100
ω (rad/s)
J1 = 4 kg-m2
–
FIGURE P2.30
46. The motor whose torque-speed characteristics are shown
in Figure P2.31 drives the load shown in the diagram.
Someof the gears have inertia. Find the transfer function,
Gs  θ2s=Eas. [Section: 2.8]
J = 2 kg-m
2 
2
N1 = 10
N2 = 20
N3 = 10
J    18 kg-m
4
2
D = 36 N-m-s/rad
T(N-m)
5
RPM
5 V
600
π
J    1 kg-m
1
     =
2
J    2 kg-m
3
2
=
=
θ2(t)
N4 = 20
ea(t) Motor
+
–
FIGURE P2.31
47. A dc motor develops 55 N-m of torque at a speed of
600 rad/s when 12 volts are applied. It stalls out at this
voltagewith100N-moftorque.Iftheinertiaanddamping
ofthearmatureare7kg-m2and3N-m-s/rad,respectively,
ﬁnd the transfer function, Gs  θLs=Eas, of this
motor if it drives an inertia load of 105 kg-m2 through
a gear train, as shown in Figure P2.32. [Section: 2.8]
N1 = 12
N2 = 25
N3 = 25
θm(t)
θL(t)
Load
N4 = 72
ea(t)
Motor
+
–
FIGURE P2.32
48. In this chapter, we derived the transfer function of a dc
motor relating the angular displacement output to the
armature voltage input. Often we want to control
the output torque rather than the displacement. Derive
thetransferfunctionofthemotorthatrelatesoutputtorque
to input armature voltage. [Section: 2.8]
49. Find the transfer function, Gs  Xs=Eas, for the
system shown in Figure P2.33. [Sections: 2.5–2.8]
N2 = 20
Radius = 2 m
 D = 1 N-m-s/rad
N1 = 10
ea(t)
J = 1 kg-m2
Ideal
gear 1:1
 fv = 1 N-s/m
x(t)
Ja   = 1 kg-m2
Da  = 1 N-m-s/rad
Ra  = 1 Ω
Kb  = 1 V-s/rad
Kt  = 1 N-m/A
   M = 1 kg
Motor
+
For the motor:
–
FIGURE P2.33
Problems
101

50. Find the series and parallel analogs for the translational
mechanical system shown in Figure 2.20 in the text.
[Section: 2.9]
51. Find the series and parallel analogs for the rotational
mechanical systems shown in Figure P2.17(b) in the
problems. [Section: 2.9]
52. Asystem’soutput,c,isrelatedtothesystem’sinput,r,by
the straight-line relationship, c  5r  7. Is the system
linear? [Section: 2.10]
53. Consider the differential equation
d2x
dt2  3 dx
dt  2x  f x
where f(x) is the input and is a function of the output, x. If
f x  sin x, linearize the differential equation for small
excursions. [Section: 2.10]
a. x  0
b. x  π
54. Consider the differential equation
d3x
dt3  10 d2x
dt2  20 dx
dt  15x  f x
where f(x) is the input and is a function of the output, x. If
f x  3e5x, linearize the differential equation for x near
0. [Section: 2.10]
55. Many systems are piecewise linear. That is, over a large
range of variable values, the system can be described
linearly. A system with ampliﬁer saturation is one such
example. Given the differential equation
d2x
dt2  17 dx
dt  50x  f x
assume that f(x) is as shown in Figure P2.34. Write the
differential equation for each of the following ranges
of x: [Section: 2.10]
a. ∞< x < 3
b. 3 < x < 3
c. 3 < x < ∞
–3
3
–6
6
x
f(x)
FIGURE P2.34
56. For the translational mechanical system with a nonlinear
spring shown in Figure P2.35, ﬁnd the transfer function,
Gs  Xs=Fs, for small excursions around f t  1.
The spring is deﬁned by xst  1  efst, where xst is
the spring displacement and fst is the spring force.
[Section: 2.10]
x(t)
f(t)
2 N-s/m
Nonlinear
spring
2 kg
FIGURE P2.35
57. Enzymes are large proteins that biological systems use to
increasetherateatwhichreactionsoccur.Forexample,food
is usually composed of large molecules that are hard to
digest; enzymes break down the large molecules into small
nutrientsaspartofthedigestiveprocess.Onesuchenzymeis
amylase,containedinhumansaliva.Itiscommonlyknown
thatifyouplaceapieceofuncookedpastainyourmouthits
tastewillchangefrompaper-liketosweetasamylasebreaks
down the carbohydrates into sugars. Enzyme breakdown is
often expressed by the following relation:
S  E ⇄
ks
k1
C ®
k1 P
In this expression a substrate (S) interacts with an
enzyme (E) to form a combined product (C) at a rate
k1. The intermediate compound is reversible and gets
disassociated at a rate k1. Simultaneously some of the
compound is transformed into the ﬁnal product (P) at a
rate k2. The kinetics describing this reaction are known
as the Michaelis-Menten equations and consist of four
nonlinear differential equations. However, under some
conditions these equations can be simpliﬁed. Let E0 and
S0 be the initial concentrations of enzyme and substrate,
respectively. It is generally accepted that under some
energetic conditions or when the enzyme concentration
is very big E0  S0, the kinetics for this reaction are
given by
dS
dt  kψK
~
s C  S
dC
dt  kψS  K
~
M C
dP
dt  k2C
where the following constant terms are used (Schnell,
2004):
kψ  k1E0
~Ks  k  1
kψ
102
Chapter 2
Modeling in the Frequency Domain

and
~KM  ~Ks  k2
kψ
a. Assuming the initial conditions for the reaction are
S0  S0; E0  E0; C0  P0  0,
ﬁnd
the
Laplace transform expressions for S, C, and P:
ℒfSg; ℒfCg, and ℒfPg, respectively.
b. Use the ﬁnal theorem to ﬁnd S∞; C∞, and P∞.
58. Humans are able to stand on two legs through a complex
feedback system that includes several sensory inputs—
equilibrium and visual along with muscle actuation. In
order to gain a better understanding of the workings of
the postural feedback mechanism, an individual is
asked to stand on a platform to which sensors are
attached at the base. Vibration actuators are attached
with straps to the individual’s calves. As the vibration
actuators are stimulated, the individual sways and
movements are recorded. It was hypothesized that
the human postural dynamics are analogous to those
of a cart with a balancing standing pole attached
(inverted pendulum). In that case, the dynamics can
be described by the following two equations:
J d2θ
dt2
 mgl sin θt  Tbal  Tdt
Tbalt  mgl sin θt  kJθt  ηJ θ_t
ρJ
Z t
0
θtdt
where m is the individual’s mass; l is the height of the
individual’s center of gravity; g is the gravitational
constant; J is the individual’s equivalent moment of
inertia; η; ρ, and k are constants given by the body’s
postural control system; θt is the individual’s angle
with respect to a vertical line; Tbal(t) is the torque
generated by the body muscles to maintain balance;
and Tdt is the external torque input disturbance. Find
the transfer function Θs
Tds (Johansson, 1988).
59. Figure P2.36 shows a crane hoisting a load. Although the
actual system’s model is highly nonlinear, if the rope is
consideredtobestiffwithaﬁxedlengthL,thesystemcan
be modeled using the following equations:
mL€xLa  mLgϕ
mT €xT  f T  mLgϕ
xLa  xT  xL
xL  Lϕ
where mL is the mass of the load, mT is the mass of the cart,
xT andxL aredisplacementsasdeﬁnedintheﬁgure,ϕ isthe
rope angle with respect to the vertical, and f T is the force
applied to the cart (Marttinen, 1990).
a. Obtain the transfer function from cart velocity to rope
angle Φs
VTs.
b. Assume thatthecart isdriven ataconstantvelocityV0
and obtain an expression for the resulting ϕt. Show
that under this condition, the load will sway with a
frequency ω0 
ﬃﬃﬃg
L
r
.
c. Find the transfer function from the applied force to the
cart’s position, XTs
FTs.
d. Show that if a constant force is applied to the cart, its
velocity will increase without bound as t ®∞.
fT
L
ϕ
mL
xLa
xL
x
mT
T
FIGURE P2.3616
60. In 1978, Malthus developed a model for human
growth population that is also commonly used to
model bacterial growth as follows. Let N(t) be the
population density observed at time t. Let K be the rate
of reproduction per unit time. Neglecting population
deaths, the population density at a time t  Δt (with
small Δt) is given by
Nt  Δt ≈Nt  KNtΔt
which also can be written as
Nt  Δt  Nt
Δt
 KNt
Since N(t) can be considered to be a very large number,
letting Δt ® 0 gives the following differential equation
(Edelstein-Keshet, 2005):
dNt
dt
 KNt
16 Marttinen A., Virkkunen J., Salminen R.T. Control Study with Pilot Crane.
IEEE Transactions on Education, Vol. 33, No.3, August 1990. Fig. 2. p. 300.
IEEE Transactions on Education by Institute of Electrical and Electronics
Engineers; IEEE Education Group; IEEE Education Society. Reproduced
with permission of Institute of Electrical and Electronics Engineers, in the
format Republish in a book via Copyright Clearance Center.
Problems
103

a. Assuming an initial population N0  N0, solve the
differential equation by ﬁnding N(t).
b. Find the time at which the population is double the
initial population.
61. In order to design an underwater vehicle that has the
characteristics of both a long-range transit vehicle
(torpedo-like) and a highly maneuverable low-speed
vehicle (boxlike), researchers have developed a thruster
that mimics that of squid jet locomotion (Krieg, 2008). It
has been demonstrated there that the average normalized
thrust due to a command step input, Us 
Tref^
s
is
given by:
Tt  Tref^1  eλt  a sin2πf t
where Tref^ is the reference or desired thrust, λ is the
system’s damping constant, a is the amplitude of the
oscillation caused by the pumping action of the actuator,
f istheactuatorfrequency,andT(t)istheaverageresulting
normalized thrust. Find the thruster’s transfer function
Ts
Us. Show all steps.
62. The Gompertz growth model is commonly used to
model tumor cell growth. Let v(t) be the tumor’s volume,
then
dvt
dt
 λeαtvt
where λ and α are two appropriate constants (Edelstein-
Keshet, 2005).
a. Verify that the solution to this equation is given by
vt  v0eλ=α1eαt, where v0 is the initial tumor
volume.
b. This model takes into account the fact that when
nutrients and oxygen are scarce at the tumor’s core,
its growth is impaired. Find the ﬁnal predicted tumor
volume (let t ®∞).
c. For a speciﬁc mouse tumor, it was experimentally
found that λ  2:5 days; α  0:1 days with v0 
50  103 mm3 (Chignola, 2005). Use any method
available to make a plot of v(t) vs. t.
d. Check the result obtained in Part b with the results
from the graph found in Part c.
63. AmusclehangingfromabeamisshowninFigureP2.37(a)
(Lessard, 2009). The α-motor neuron can be used to
electrically stimulate the muscle to contract and pull the
mass,m,whichunderstaticconditionscausesthemuscleto
stretch. An equivalent mechanical system to this setup is
shown in Figure P2.37(b). The force Fiso will be exerted
when the muscle contracts. Find an expression for the
displacement X1(s) in terms of F1(s) and Fiso(s).
Load m
velocity
F1
α-motor neuron
Reference
Load m
F1
(a)
(b)
xm
Fiso
k
B
vm
v1
x1
v1
FIGURE P2.37
a. Motor neuron stimulating a muscle;17
b. equivalent circuit18
64. A three-phase ac/dc converter supplies dc to a battery
charging system or dc motor (Graovac, 2001). Each
phasehasanacﬁlter represented bytheequivalentcircuit
in Figure P2.38.
Va(s)
R
IacR (s)
IacF (s)
Ls
1/Cs
+
–
FIGURE P2.38
AC ﬁlter equivalent circuit for a three-phase
ac/dc converter
Derive that the inductor current in terms of the
two active sources is
IacFs 
1  RCs
LCs2  RCs  1 IacRs 
Cs
LCs2  RCs  1 Vas
65. A photovoltaic system is used to capture solar energy to
be converted to electrical energy. A control system is
used to pivot the solar platform to track the sun’s
movements in order to maximize the captured energy.
The system consists of a motor and load similar to that
discussed in Section 2.8. A model has been proposed
(Agee, 2012) that is different from the model developed
in the chapter in the following ways: (1) the motor
inductance was not neglected and (2) the load, in
addition to having inertia and damping, has a spring.
Find the transfer function, θms=Eas, for this
augmented system assuming all load impedances
have already been reﬂected to the motor shaft.
17 Lessard, C. D. Basic Feedback Controls in Biomedicine, Morgan &
Claypool, San Rafael, CA, 2009. Figure 2.8, p. 12.
18 Lessard, C. D. Basic Feedback Controls in Biomedicine, Morgan &
Claypool, San Rafael, CA, 2009 Figure 2.9, p. 13.
104
Chapter 2
Modeling in the Frequency Domain

66. In a paint mixing plant, two tanks supply ﬂuids to a
mixing cistern. The height, h, of the ﬂuid in the cistern
is dependent upon the difference between the input
mass ﬂow rate, q, and the output ﬂow rate, qe. A
nonlinear differential equation describing this depen-
dency is given by (Schiop, 2010)
dh
dt  Ae
A
ﬃﬃﬃﬃﬃﬃﬃﬃ
2gh
p
 q
ρA
where A = cross-sectional area of the cistern, Ae =
cross-sectional area of the exit pipe, g = acceleration
due to gravity, and ρ = liquid density.
a. Linearize
the
nonlinear
equation
about
the
equilibrium point (h0, q0) and ﬁnd the transfer
function relating the output cistern ﬂuid level,
H(s), to the input mass ﬂow rate, Q(s).
b. The color of the liquid in the cistern can be kept
constant by adjusting the input ﬂow rate, q, assum-
ing the input ﬂow’s color is speciﬁcally controlled.
Assuming an average height, hav, of the liquid in
the cistern, the following equation relates the net
ﬂow of color to the cistern to the color in the
cistern.
e1q  eqe  d
dt ρAehav
where e1 = fractional part of ﬂow representing color
into the cistern, and e = fractional part of the cistern
representing color in the cistern. Assume that the
ﬂow out of the cistern is constant and use the
relationship, qe  ρAe
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
2ghav
p
, along with the given
equation
above
to
ﬁnd the
transfer
function,
Es=Qs, that relates the color in the cistern to
the input ﬂow rate.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
67. Control of HIV/AIDS. HIV inﬂicts its damage by
infecting healthy CD4 + T cells (a type of white blood
cell) that are necessary to ﬁght infection. As the virus
embedsinaTcellandtheimmunesystemproducesmore
of these cells to ﬁght the infection, the virus propagates
in an opportunistic fashion.As we now develop asimple
HIV model, refer to Figure P2.39. Normally T cells are
produced at a rate s and die at a rate d. The HIV virus is
present in the bloodstream in the infected individual.
These viruses in the bloodstream, called free viruses,
infect healthy T cells at a rate β. Also, the viruses
reproduce through the T cell multiplication process or
otherwise at a rate k. Free viruses die at a rate c. Infected
T cells die at a rate μ.
s
Healthy cell
Free virus
Infected cell
d
k
β
c
μ
FIGURE P2.3919
A simple mathematical model that illustrates
these interactions is given by the following equations
(Craig, 2004):
dT
dt  s  dT  βTv
dT
dt  βTv  μT
dv
dt
 kT  cv
where
T  number of healthy T cells
T number of infected T cells
v  number of free viruses
a. The system is nonlinear; thus linearization is
necessary to ﬁnd transfer functions as you will
do in subsequent chapters. The nonlinear nature of
this model can be seen from the above equations.
Determine which of these equations are linear,
which are nonlinear, and explain why.
b. The system has two equilibrium points. Show that
these are given by
T0; T
0; v0 
s
d ; 0; 0


and
T0; T
0; v0 
cμ
βk ; s
μ  cd
βk ; sk
cμ  d
β
	

68. Hybrid vehicle. Problem 23 in Chapter 1 discusses the
cruise control of serial, parallel, and split-power hybrid
electric vehicles (HEVs). The functional block diagrams
developed for these HEVs indicated that the speed of a
19 Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education
Into the Electrical Engineering Curriculum at the University of Pretoria.
IEEE Transactions on Education, vol. 47, no. 1, February 2004, pp. 65–73.
Fig. 1, p. 66. IEEE Transactions on Education by Institute of Electrical and
Electronics Engineers; IEEE Education Group; IEEE Education Society.
Reproduced with permission of Institute of Electrical and Electronics
Engineers, in the format Republish in a book via Copyright Clearance
Center.
Problems
105

vehicle depends upon the balance between the motive
forces (developed by the gasoline engine and/or the
electric motor) and running resistive forces. The resistive
forces include the aerodynamic drag, rolling resistance,
and climbing resistance. Figure P2.40 illustrates the
running resistances for a car moving uphill (Bosch, 2007).
FL
S
α
G
FSt
½ FRO
½ FRO
FIGURE P2.40
Running resistances20
The total running resistance, Fw, is calculated as
Fw  FRo  FL  FSt,whereFRo istherollingresistance,
FL is the aerodynamic drag, and FSt is the climbing
resistance. The aerodynamic drag is proportional to the
square of the sum of car velocity, v, and the head-wind
velocity, vhw, or v  vhw. The other two resistances are
functions of car weight, G, and the gradient of the road
(given by the gradient angle, α), as seen from the
following equations:
FRo  f G cos α  f mg cos α
where
f  coefficient of rolling resistance
m  car mass; in kg
g  gravitational acceleration; in m/s2
FL  0:5ρCwA v  vhw

2:
and
ρ  air density; in kg/m3
Cw  coefficient of aerodynamic drag
A  largest cross-section of the car; in kg=m2
FSt  G sin α  mg sin α:
The motive force, F, available at the drive wheels is:
F  Titot
r
ηtot  Pηtot
v
where
T  motive torque
P  motive power
itot  total transmission ratio
r  tire radius
ηtot  total drive-train efficiency:
The surplus force, F  Fw, accelerates the vehicle (or
retards it when Fw > F). Letting a  F  Fw
km  m , where a is
the acceleration and km is a coefﬁcient that compensates
for the apparent increase in vehicle mass due to rotating
masses (wheels, ﬂywheel, crankshaft, etc.):
a. Show that car acceleration,21 a, may be determined
from the equation:
F  f mg cos α  mg sin α  0:5ρCwA v  vhw

2  km ma
b. Assuming constant acceleration and using the average
value for speed, ﬁnd the average motive force, Fav
(in N), and power, Pav (in kW) the car needs to
accelerate from 40 to 60 km/h in 4 seconds on a level
road,
α  0°

, under windless conditions, where
vhw  0. You are given the following parameters:
m  1590 kg, A  2 m2, f  0:011, ρ  1:2 kg/m3,
Cw  0:3, ηtot  0:9; km  1:2. Furthermore, calcu-
late the additional power, Padd, the car needs after
reaching 60 km/h to maintain its speed while climbing
a hill with a gradient α  5°.
c. The equation derived in Part a describes the non-
linear car motion dynamics where F t  is the input
to the system, and v t  the resulting output. Given
that the aerodynamic drag is proportional to v2 under
windless conditions, linearize the resulting equation
of motion around an average speed, vo  50 km/h,
when the car travels on a level road,22 where α  0°.
(Hint: Expand v2  v2
0 in a truncated Taylor series).
Write that equation of motion and represent it with a
block diagram in which the block Gv represents the
vehicle dynamics. The output of that block is the car
speed, v(t), and the input is the excess motive force,
Fe t , deﬁned as: Fe  F  FSt  FRo  Fo, where Fo
is the constant component of the linearized aerody-
namic drag.
d. Use the equation in Part c to ﬁnd the vehicle transfer
function: Gv s   V s =Fe s .
69. Parabolic trough collector. In a signiﬁcant number of
cases, the open-loop transfer function from ﬂuid ﬂow to
20 Robert Bosch GmbH, Bosch Automotive Handbook, 7th ed. John Wiley &
Sons Ltd. UK, 2007. P. 430. Figure at bottom left.
21 Other quantities, such as top speed, climbing ability, etc., may also be
calculated by manipulation from that equation.
22 Note that on a level road the climbing resistance, Fst  0, since
sin α  sin 0°  0.
106
Chapter 2
Modeling in the Frequency Domain

ﬂuid temperature in a parabolic trough collector can be
approximated (Camacho, 2012) by:
Ps 
K
1  τs esT
a. Write an analytic expression for the unit step response
of the open-loop system assuming that ht represents
the output temperature and qt the input ﬂuid ﬂow.
b. Make a sketch of the unit step response of the
open-loop system. Indicate on your ﬁgure the time
delay, the settling time, the initial and ﬁnal values
of the response, and the value of the response
when t  τ  T.
c. Call the output temperature ht and the input
ﬂuid ﬂow qt. Find the differential equation that
represents the open-loop system.
Cyber Exploration Laboratory
Experiment 2.1
Objectives
To learn to use MATLAB to (1) generate polynomials, (2) manipulate
polynomials,(3)generatetransferfunctions,(4)manipulatetransferfunctions,and(5)perform
partial-fraction expansions.
Minimum Required Software Packages
MATLAB and the Control System
Toolbox
Prelab
1. Calculate the following by hand or with a calculator:
a. The roots of P1  s6  7s5  2s4  9s3  10s2  12s  15
b. The roots of P2  s6  9s5  8s4  9s3  12s2  15s  20
c. P3  P1  P2; P4  P1  P2; P5  P1P2
2. Calculate by hand or with a calculator the polynomial
P6  s  7s  8s  3s  5s  9s  10
3. Calculate by hand or with a calculator the following transfer functions:
a. G1s  20s  2s  3s  6s  8
ss  7s  9s  10s  15,
represented as a numerator polynomial divided by a denominator polynomial.
b. G2s 
s4  17s3  99s2  223s  140
s5  32s4  363s3  2092s2  5052s  4320,
expressed as factors in the numerator divided by factors in the denominator, similar to
the form of G1s in Prelab 3a.
c. G3s  G1s  G2s; G4s  G1s  G2s; G5s  G1sG2s
expressed as factors divided by factors and expressed as polynomials divided by
polynomials.
4. Calculate by hand or with a calculator the partial-fraction expansion of the following
transfer functions:
a. G6 
5s  2
ss2  8s  15
b. G7 
5s  2
ss2  6s  9
c. G8 
5s  2
ss2  6s  34
Cyber Exploration Laboratory
107

Lab
1. Use MATLAB to ﬁnd P3, P4, and P5 in Prelab 1.
2. Use only one MATLAB command to ﬁnd P6 in Prelab 2.
3. Use only two MATLAB commands to ﬁnd G1s in Prelab 3a represented as a
polynomial divided by a polynomial.
4. Use only two MATLAB commands to ﬁnd G2(s) expressed as factors in the numerator
divided by factors in the denominator.
5. Using various combinations of G1s and G2(s), ﬁnd G3(s), G4s, and G5s. Various
combinations implies mixing and matching G1s and G2(s) expressed as factors and
polynomials. For example, in ﬁnding G3(s), G1s can be expressed in factored form and
G2(s) can be expressed in polynomial form. Another combination is G1s and G2(s)
both expressed as polynomials. Still another combination is G1sand G2(s) both
expressed in factored form.
6. Use MATLAB to evaluate the partial fraction expansions shown in Prelab 4.
Postlab
1. Discuss your ﬁndings for Lab 5. What can you conclude?
2. Discuss the use of MATLAB to manipulate transfer functions and polynomials. Discuss
any shortcomings in using MATLAB to evaluate partial fraction expansions.
Experiment 2.2
Objectives
To learn to use MATLAB and the Symbolic Math Toolbox to (1) ﬁnd
Laplace transforms for time functions, (2) ﬁnd time functions from Laplace transforms,
(3) create LTI transfer functions from symbolic transfer functions, and (4) perform solutions
of symbolic simultaneous equations.
Minimum Required Software Packages
MATLAB, the Symbolic Math Tool-
box, and the Control System Toolbox
Prelab
1. Using a hand calculation, ﬁnd the Laplace transform of:
f t  0:0075  0:00034e2:5tcos22t  0:087e2:5tsin22t  0:0072e8t
2. Using a hand calculation, ﬁnd the inverse Laplace transform of
Fs 
2s  3s  5s  7
ss  8s2  10s  100
3. Use a hand calculation to solve the circuit for the Laplace transforms of the
loop currents shown in Figure P2.41.
Lab
1. Use MATLAB and the Symbolic Math Toolbox to
a. Generate symbolically the time function f(t) shown in Prelab 1.
b. Generate symbolically F(s)showninPrelab 2.Obtain your result symbolically inboth
factored and polynomial forms.
c. Find the Laplace transform of f(t) shown in Prelab 1.
d. Find the inverse Laplace transform of F(s) shown in Prelab 2.
e. Generate an LTI transfer function for your symbolic representation of F(s) in Prelab 2
in both polynomial form and factored form. Start with the F(s) you generated
symbolically.
f. Solve for the Laplace transforms of the loop currents in Prelab 3.
+
–
3u(t)
1 F
5
1 H
1 H
2 Ω
2 Ω
5 Ω
1 F
3
1 Ω
1 F
4
3(t)
i
1(t)
i
2(t)
i
FIGURE P2.41
108
Chapter 2
Modeling in the Frequency Domain

Postlab
1. Discuss the advantages and disadvantages between the Symbolic Math Toolbox and
MATLAB alone to convert a transfer function from factored form to polynomial form
and vice versa.
2. Discuss the advantages and disadvantages of using the Symbolic Math Toolbox to
generate LTI transfer functions.
3. Discuss the advantages of using the Symbolic Math Toolbox to solve simultaneous
equations of the type generated by the electrical network in Prelab 3. Is it possible to
solve the equations via MATLAB alone? Explain.
4. Discuss any other observations you had using the Symbolic Math Toolbox.
Experiment 2.3
Objectives
To learn to use LabVIEW to generate and manipulate polynomials and
transfer functions.
Minimum Required Software Packages
LabVIEW and the LabVIEW Control
Design and Simulation Module.
Prelab
1. Study Appendix D, Sections D.1 through Section D.4, Example D.1.
2. Perform by hand the calculations stated in Prelab 1 of Experiment 2.1.
3. Findbyahandcalculationthepolynomialwhoserootsare:7; 8; 3; 5; 9; and  10.
4. Perform by hand a partial-fraction expansion of G s  
5s  10
s3  8s2  15s.
5. Find by a hand calculation G1 s   G2 s ; G1 s   G2 s ; and G1 s G2 s , where
G1 s  
1
s2  s  2 and G2 s  
s  1
s2  4s  3.
Lab
1. Open the LabVIEW functions palette and select the Mathematics/Polynomial palette.
2. Generate the polynomials enumerated in Prelab 1a and lb of Experiment 2.1.
3. Generate the polynomial operations stated in Prelab 1c of Experiment 2.1.
4. Generate a polynomial whose roots are those stated in Prelab 3 of this experiment.
5. Generate the partial-fraction expansion of the transfer function given in Prelab 4 of this
experiment.
6. Using the Control Design and Simulation/Control Design/Model Construction
palette, construct the two transfer functions enumerated in Prelab 5.
7. Using the Control Design and Simulation/Control Design/Model Interconnection
palette, display the results of the mathematical operations enumerated in Prelab 5 of this
experiment.
Postlab
1. Compare the polynomial operations obtained in Lab 3 to those obtained in Prelab 2.
2. Compare the polynomial displayed in Lab 4 with that calculated in Prelab 3.
3. Compare the partial-fraction expansion obtained in Lab 5 with that calculated in
Prelab 4.
4. Compare the results of the mathematical operations found in Lab 7 to those calculated in
Prelab 5.
Cyber Exploration Laboratory
109

Hardware Interface Laboratory
Note: Before performing experiments in this section, please study Appendix D—
LabVIEW Tutorial, including the section discussing myDAQ. When an experiment
indicates a provided ﬁle, the ﬁle is obtained at www.wiley.com/college/nise.
Experiment 2.4
Programming with LabVIEW Part 1
Objectives
1. To learn how to program LabVIEW, Part 1
2. To learn how to write basic LabVIEW programs and understand LabVIEW ﬂow
Material Required
Computer with LabVIEW Installed
Prelab
Go to the website http://www.learnni.com/getting-started/. Complete modules 0-7.
Lab
1. Write a LabVIEW program that executes an equivalent of the following C-like code,
where x is an input and y is an output (Formula Nodes are not allowed):
if(abs(x)< 0.1)
y = 1;
else
if(x>=0)
y = 0;
else
y = 2;
Run your program for the following inputs: x  0:05; 0:05; 1; 1.
2. Write a LabVIEW program that receives three colors representing a resistor’s value and
returns the numeric resistor value in ohms. Your interface should be similar to the one
shown in Figure P2.42. The third band should include silver and gold colors.
FIGURE P2.42
110
Chapter 2
Modeling in the Frequency Domain

Run your program at least for the following inputs:
Red Red Black
Brown Black Orange
Orange White Gold
Experiment 2.5
Programming with LabVIEW Part 2
Objectives
1. To learn how to program LabVIEW, Part 2
2. To learn how to use loops, do basic math inside loops, and graph numerical information
using LabVIEW
Material Required
Computer with LabVIEW Installed
Prelab
Gotothewebsitehttp://www.learnni.com/getting-started/.Completemodules8-10.
Lab
1. It is well known that 1  x  x2  x3  ∙∙∙
1
1  x when jxj < 1:
Write a LabVIEW program that takes as an input a value for x, and a number of
iterations. The program will use a loop to calculate the sum of the geometric series for
the speciﬁed number of operations. It will also calculate the closed-form expression for
the series. The program will display the two results, and will also display the absolute
error of the difference.
Demonstrate your program with x = 0.5 and 3, 10, and 200 iterations.
2. Write a LabVIEW program that generates a 50% duty-cycle square-wave signal between
0 and Xmax volts, where
Xmax < 10 V,
with a nonzero variable frequency. The
amplitude and frequency will be inputs. Display the waveform on a waveform chart,
which will be an output. In this part you are not allowed to use the LabVIEW-provided
function generation blocks.
Demonstrate this program for amplitudes of 1, 5, and 10 V and for 1 Hz and 5 Hz.
Experiment 2.6
MyDAQ Programming
Objectives
To become familiar with the data acquisition and signal generation
capabilities of myDAQ
Material Required
Computer with LabVIEW installed, and myDAQ
Files Provided at www.wiley.com/college/nise
Battery Meter.ctl
Prelab
Go to the website https://decibel.ni.com/content/docs/DOC-11624. Go over Unit 4—DAQ:
Lesson 1. Then go over the measuring voltage tutorial in http://zone.ni.com/devzone/cda/
epd/p/id/6436.
Lab
1. Write a battery-tester program using LabVIEW and myDAQ as an acquisition device.
The battery tester should work for three nominal values of batteries: 1.5 V, 6 V, and 9 V.
Hardware Interface Laboratory
111

Bibliography
Agee J. T., and Jimoh, A. A. Flat controller design for hardware-cost reduction in polar-axis
photovoltaic systems. Solar Energy, vol. 86, pp. 452–462, 2012.
Aggarwal, J. K. Notes on Nonlinear Systems. Van Nostrand Reinhold, New York, 1972.
Bosch, R. GmbH, Bosch Automotive Handbook, 7th ed. John Wiley & Sons Ltd., UK, 2007.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Cannon, R. H., Jr., Dynamics of Physical Systems. McGraw-Hill, New York, 1967.
Carlson, L. E., and Griggs, G. E. Aluminum Catenary System Quarterly Report. Technical Report
Contract Number DOT-FR-9154, U.S. Department of Transportation, 1980.
Chignola, R., and Foroni, R. I. Estimating the Growth Kinetics of Experimental Tumors from as Few
as Two Determinations of Tumor Size: Implications for Clinical Oncology. IEEE Transactions on
Biomedical Engineering, vol. 52, no. 5, May 2005, pp. 808–815.
Cochin, I. Analysis and Design of Dynamic Systems. Harper and Row, New York, 1980.
Cook, P. A. Nonlinear Dynamical Systems. Prentice Hall, United Kingdom, 1986.
The batteries are considered dead for voltage values 20% or under the nominal. Between
20% and the nominal value the batteries are in a warning area, and for values above the
nominal the batteries are OK. Your interface should be similar to the one shown Figure
P2.43. A custom control accepting inputs from 0 to 120 has been created under the name
Battery Meter.ctl.
2. Use the LabVIEW program that you wrote in Experiment 2.5 to generate a 50% duty-
cycle square-wave signal. Output your signal through one of the myDAQ’s analog
channels and read the signal using the myDAQ oscilloscope function (available from
myDAQ ﬁle: NI ELVISmx Instrument Launcher) to verify the generated signal. Print
two examples using the scope’s automatic measurements.
FIGURE P2.43
112
Chapter 2
Modeling in the Frequency Domain

Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
Davis, S. A., and Ledgerwood, B. K. Electromechanical Components for Servomechanisms.
McGraw-Hill, New York, 1961.
Doebelin, E. O. Measurement Systems Application and Design. McGraw-Hill, New York, 1983.
Dorf, R. Introduction to Electric Circuits, 2d ed. Wiley, New York, 1993.
D’Souza, A. Design of Control Systems. Prentice Hall, Englewood Cliffs, NJ, 1988.
Edelstein-Keshet, L. Mathematical Models in Biology. Society for Industrial and Applied
Mathematics, Philadelphia, PA, 2005.
Elkins, J. A. A Method for Predicting the Dynamic Response of a Pantograph Running at Constant
Speed under a Finite Length of Overhead Equipment. Technical Report TN DA36, British
Railways, 1976.
Franklin, G. F., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems.
Addison-Wesley, Reading, MA, 1986.
Graovac D., and Katić V. Online Control of Current-Source-Type Active Rectiﬁer Using Transfer
Function Approach. IEEE Transactions on Industrial Electronics, vol. 48, no. 3, June 2001,
pp. 526–535.
Hsu, J. C., and Meyer, A. U. Modern Control Principles and Applications. McGraw-Hill, New York,
1968.
Johansson, R., Magnusson, M., and Akesson, M. Identiﬁcation of Human Postural Dynamics. IEEE
Transactions on Biomedical Engineering, vol. 35, no. 10, October 1988, pp. 858–869.
Kailath, T. Linear Systems. Prentice Hall, Englewood Cliffs, NJ, 1980.
Kermurjian, A. From the Moon Rover to the Mars Rover. The Planetary Report, July/August 1990,
pp. 4–11.
Krieg, M., and Mohseni, K. Developing a Transient Model for Squid Inspired Thrusters, and
Incorporation into Underwater Robot Control Design. 2008 IEEE/RSJ Int. Conf. on Intelligent
Robots and Systems, France, September 2008.
Kuo, F. F. Network Analysis and Synthesis. Wiley, New York, 1966.
Lago, G., and Benningﬁeld, L. M. Control System Theory. Ronald Press, New York, 1962.
Lessard, C. D. Basic Feedback Controls in Biomedicine. Morgan & Claypool, San Rafael, CA, 2009.
Mablekos, V E. Electric Machine Theory for Power Engineers. Harper & Row, Cambridge, MA,
1980.
Marttinen, A., Virkkunen, J., and Salminen, R. T. Control Study with Pilot Crane. IEEE Transactions
on Education, vol. 33, no. 3, August 1990, pp. 298–305.
Minorsky, N. Theory of Nonlinear Control Systems. McGraw-Hill, New York, 1969.
Nilsson, J. W., and Riedel, S. A. Electric Circuits, 5th ed. Addison-Wesley, Reading, MA, 1996.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Englewood Cliffs, NJ, 1990.
Raven, F. H. Automatic Control Engineering, 5th ed. McGraw-Hill, New York, 1995.
Schiop L., Gaiceanu M. Mathematical Modeling of Color Mixing Process and PLC Control
Implementation by Using Human Machine Interface. IEEE International Symposium on
Electrical and Electronics Engineering, 2010.
Van Valkenburg, M. E. Network Analysis. Prentice Hall, Englewood Cliffs, NJ, 1974.
Vidyasagar, M. Nonlinear Systems Analysis. Prentice Hall, Englewood Cliffs, NJ, 1978.
Bibliography
113


Modeling in the Time
Domain
This chapter covers only state-space methods.
Chapter Learning Outcomes
After completing this chapter, the student will be able to:
• Find a mathematical model, called a state-space representation, for a linear, time-
invariant system (Sections 3.1–3.3)
• Model electrical and mechanical systems in state space (Section 3.4)
• Convert a transfer function to state space (Section 3.5)
• Convert a state-space representation to a transfer function (Section 3.6)
• Linearize a state-space representation (Section 3.7)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front endpapers,
you will be able to ﬁnd the state-space representation of each subsystem.
• Given a description of the way a pharmaceutical drug ﬂows through a human
being, you will be able to ﬁnd the state-space representation to determine drug
concentrations in speciﬁed compartmentalized blocks of the process and of the
human body. You will also be able to apply the same concepts to an aquifer to
ﬁnd water level.

3
115

3.1 Introduction
Two approaches are available for the analysis and design of feedback control systems. The
ﬁrst, which we began to study in Chapter 2, is known as the classical, or frequency-domain,
technique. This approach is based on converting a system’s differential equation to a transfer
function, thus generating a mathematical model of the system that algebraically relates a
representation of the output to a representation of the input. Replacing a differential equation
with an algebraic equation not only simpliﬁes the representation of individual subsystems
but also simpliﬁes modeling interconnected subsystems.
The primary disadvantage of the classical approach is its limited applicability: It
can be applied only to linear, time-invariant systems or systems that can be approximated
as such.
A major advantage of frequency-domain techniques is that they rapidly provide
stability and transient response information. Thus, we can immediately see the effects of
varying system parameters until an acceptable design is met.
With the arrival of space exploration, requirements for control systems increased
in scope. Modeling systems by using linear, time-invariant differential equations and
subsequent transfer functions became inadequate. The state-space approach (also referred to
as the modern, or time-domain, approach) is a uniﬁed method for modeling, analyzing, and
designing a wide range of systems. For example, the state-space approach can be used to
represent nonlinear systems that have backlash, saturation, and dead zone. Also, it can
handle, conveniently, systems with nonzero initial conditions. Time-varying systems, (for
example, missiles with varying fuel levels or lift in an aircraft ﬂying through a wide range of
altitudes) can be represented in state space. Many systems do not have just a single input and
a single output. Multiple-input, multiple-output systems (such as a vehicle with input
direction and input velocity yielding an output direction and an output velocity) can be
compactly represented in state space with a model similar in form and complexity to that
used for single-input, single-output systems. The time-domain approach can be used to
represent systems with a digital computer in the loop or to model systems for digital
simulation. With a simulated system, system response can be obtained for changes in system
parameters—an important design tool. The state-space approach is also attractive because of
the availability of numerous state-space software packages for the personal computer.
The time-domain approach can also be used for the same class of systems modeled by
the classical approach. This alternate model gives the control systems designer another
perspective from which to create a design. While the state-space approach can be applied to
a wide range of systems, it is not as intuitive as the classical approach. The designer has to
engage in several calculations before the physical interpretation of the model is apparent,
whereas in classical control a few quick calculations or a graphic presentation of data rapidly
yields the physical interpretation.
In this book, the coverage of state-space techniques is to be regarded as an
introduction to the subject, a springboard to advanced studies, and an alternate approach
to frequency-domain techniques. We will limit the state-space approach to linear,
time-invariant systems or systems that can be linearized by the methods of Chapter 2.
The study of other classes of systems is beyond the scope of this book. Since state-space
analysis and design rely on matrices and matrix operations, you may want to review this
topic in Appendix G, located at www.wiley.com/college/nise, before continuing.
3.2 Some Observations
We proceed now to establish the state-space approach as an alternate method for
representing physical systems. This section sets the stage for the formal deﬁnition of
the state-space representation by making some observations about systems and their
variables. In the discussion that follows, some of the development has been placed in
116
Chapter 3
Modeling in the Time Domain

footnotes to avoid clouding the main issues with an excess of equations and to ensure that
the concept is clear. Although we use two electrical networks to illustrate the concepts, we
could just as easily have used a mechanical or any other physical system.
We now demonstrate that for a system with many variables, such as inductor
voltage, resistor voltage, and capacitor charge, we need to use differential equations only
to solve for a selected subset of system variables because all other remaining system
variables can be evaluated algebraically from the variables in the subset. Our examples
take the following approach:
1. We select a particular subset of all possible system variables and call the variables in this
subset state variables.
2. For an nth-order system, we write n simultaneous, ﬁrst-order differential equations in
terms of the state variables. We call this system of simultaneous differential equations
state equations.
3. If we know the initial condition of all of the state variables at t0 as well as the system input
for t  t0, we can solve the simultaneous differential equations for the state variables for
t  t0.
4. We algebraically combine the state variables with the system’s input and ﬁnd all of the
other system variables for t  t0. We call this algebraic equation the output equation.
5. We consider the state equations and the output equations a viable representation of the
system. We call this representation of the system a state-space representation.
Let us now follow these steps through an example. Consider the RL network shown in
Figure 3.1 with an initial current of i(0).
1. We select the current, i(t), for which we will write and solve a differential equation
using Laplace transforms.
2. We write the loop equation,
L di
dt  Ri  vt
3.1
3. Taking the Laplace transform, using Table 2.2, Item 7, and including the initial
conditions, yields
LsIs 	 i0  RIs  Vs
3.2
Assuming the input, v(t), to be a unit step, u(t), whose Laplace transform is Vs  1=s,
we solve for I(s) and get
Is  1
R
1
s 	
1
s  R
L
0
B
@
1
C
A  i0
s  R
L
3.3
from which
it  1
R

1 	 e	R=Lt
 i0e	R=Lt
3.4
The function i(t) is a subset of all possible network variables that we are able to ﬁnd from
Eq. (3.4) if we know its initial condition, i(0), and the input, v(t). Thus, i(t) is a state
variable, and the differential equation (3.1) is a state equation.
L
v(t)
i(t)
R
+–
FIGURE 3.1
RL network
3.2 Some Observations
117

4. We can now solve for all of the other network variables algebraically in terms of i(t) and
the applied voltage, v(t). For example, the voltage across the resistor is
vRt  Rit
3.5
The voltage across the inductor is
vLt  vt 	 Rit
3.61
The derivative of the current is
di
dt  1
L vt 	 Rit
3.72
Thus, knowing the state variable, i(t), and the input, v(t), we can ﬁnd the value, or state, of
any network variable at any time, t  t0. Hence, the algebraic equations, Eqs. (3.5)
through (3.7), are output equations.
5. Since the variables of interest are completely described by Eq. (3.1) and Eqs. (3.5)
through (3.7), we say that the combined state equation (3.1) and the output
equations (3.5 through 3.7) form a viable representation of the network, which
we call a state-space representation.
Equation (3.1), which describes the dynamics of the network, is not unique. This
equation could be written in terms of any other network variable. For example, substituting
i  vR=R into Eq. (3.1) yields
L
R
dvR
dt  vR  vt
3.8
which can be solved knowing that the initial condition vR0  Ri0 and
knowing v(t). In this case, the state variable is vR(t). Similarly, all other network
variables can now be written in terms of the state variable, vR(t), and the input,
v(t). Let us now extend our observations to a second-order system, such as that
shown in Figure 3.2.
1. Since the network is of second order, two simultaneous, ﬁrst-order differential equations
are needed to solve for two state variables. We select i(t) and q(t), the charge on the
capacitor, as the two state variables.
2. Writing the loop equation yields
L di
dt  Ri  1
C
Z
i dt  vt
3.9
Converting to charge, using it  dq=dt, we get
L d2q
dt2  R dq
dt  1
C q  vt
3.10
C
L
R
v(t)
i(t)
+–
FIGURE 3.2
RLC network
1 Since vLt  vt 	 vRt  vt 	 Rit.
2 Since di
dt  1
L vLt  1
L vt 	 Rit.
118
Chapter 3
Modeling in the Time Domain

But an nth-order differential equation can be converted to n simultaneous
ﬁrst-order differential equations, with each equation of the form
dxi
dt  ai1x1  ai2x2  ∙∙∙ ainxn  bi f t
3.11
where each xi is a state variable, and the aij’s and bi are constants for linear, time-
invariant systems. We say that the right-hand side of Eq. (3.11) is a linear combination
of the state variables and the input, f(t).
We can convert Eq. (3.10) into two simultaneous, ﬁrst-order differential equations
in terms of i(t) and q(t). The ﬁrst equation can be dq=dt  i. The second equation can be
formed by substituting
R
i dt  q into Eq. (3.9) and solving for di/dt. Summarizing the
two resulting equations, we get
dq
dt  i
(3.12a)
di
dt  	 1
LC q 	 R
L i  1
L vt
(3.12b)
3. These equations are the state equations and can be solved simultaneously for the state
variables, q(t) and i(t), using the Laplace transform and the methods of Chapter 2. In
addition we must also know the input, v(t), and the initial conditions for q(t) and i(t).
4. From these two state variables, we can solve for all other network variables. For example,
the voltage across the inductor can be written in terms of the solved state variables and
the input as
vLt  	 1
C qt 	 Rit  vt
3.133
Equation (3.13) is an output equation; we say that vL(t) is a linear combination of the
state variables, q(t) and i(t), and the input, v(t).
5. The combined state equations (3.12) and the output equation (3.13) form a viable
representation of the network, which we call a state-space representation.
Another choice of two state variables can be made, for example, vR(t) and vC(t), the
resistor and capacitor voltage, respectively. The resulting set of simultaneous, ﬁrst-order
differential equations follows:
dvR
dt  	 R
L vR 	 R
L vC  R
L vt
(3.14a)4
dvC
dt  1
RC vR
(3.14b)
Again, these differential equations can be solved for the state variables if we know the initial
conditions along with v(t). Further, all other network variables can be found as a linear
combination of these state variables.
Is there a restriction on the choice of state variables? Yes! Typically, the minimum
number of state variables required to describe a system equals the order of the differential
equation.Thus,asecond-ordersystemrequiresaminimumoftwostatevariablestodescribeit.
3 Since vLt  Ldi=dt  	1=Cq 	 Ri  vt, where di/dt can be found from Eq. (3.9), and R i dt  q.
4 Since vRt  itR, and vCt  1=C R i dt, differentiating vR(t) yields dvR=dt  R di=dt

  R=L

vL 
R=L

 v t  	 vR 	 vC

, and differentiating vC(t) yields dvC =dt  1=Ci  1=RCvR.
3.2 Some Observations
119

We can deﬁne more state variables than the minimal set; however, within this minimal set the
state variables must be linearly independent. For example, if vR(t) is chosen as a state variable,
then i(t) cannot be chosen, because vR(t) can be written as a linear combination of
i(t), namely vRt  Rit. Under these circumstances we say that the state variables are
linearly dependent. State variables must be linearly independent; that is, no state variable can
be written as a linear combination of the other state variables, or else we would not
have enough information to solve for all other system variables, and we could even have
trouble writing the simultaneous equations themselves.
The state and output equations can be written in vector-matrix form if the system is
linear. Thus, Eq. (3.12), the state equations, can be written as
_x  Ax  Bu
3.15
where
_x 
dq=dt
di=dt
"
#
;
A 
0
1
	1=LC
	R=L
"
#
x 
q
i
"
#
;
B 
0
1=L
"
#
;
u  v t 
Equation (3.13), the output equation, can be written as
y  Cx  Du
3.16
where
y  vLt;
C   	1=C
	R ;
x 
q
i
"
#
;
D  1;
u  vt
We call the combination of Eqs. (3.15) and (3.16) a state-space representation of the
networkofFigure3.2.Astate-spacerepresentation,therefore,consistsof(1)thesimultaneous,
ﬁrst-order differential equations from which the state variables can be solved and (2) the
algebraic output equation from which all other system variables can be found. A state-space
representation is not unique, since a different choice of state variables leads to a different
representation of the same system.
In this section, we used two electrical networks to demonstrate some principles that
are the foundation of the state-space representation. The representations developed in this
section were for single-input, single-output systems, where y,D, and u in Eqs. (3.15)
and (3.16) are scalar quantities. In general, systems have multiple inputs and multiple
outputs. For these cases, y and u become vector quantities, and D becomes a matrix. In
Section 3.3 we will generalize the representation for multiple-input, multiple-output
systems and summarize the concept of the state-space representation.
3.3 The General State-Space Representation
Now that we have represented a physical network in state space and have a good idea of the
terminology and the concept, let us summarize and generalize the representation for linear
differential equations. First, we formalize some of the deﬁnitions that we came across in the
last section.
Linear combination. A linear combination of n variables, xi, for i  1 to n, is given by
the following sum, S:
S  Knxn  Kn	1xn	1  ∙∙∙ K1x1
3.17
where each Ki is a constant.
120
Chapter 3
Modeling in the Time Domain

Linear independence. A set of variables is said to be linearly independent if none of
the variables can be written as a linear combination of the others. For example, given x1, x2,
and x3, if x2  5x1  6x3, then the variables are not linearly independent, since one of
them can be written as a linear combination of the other two. Now, what must be true so
that one variable cannot be written as a linear combination of the other variables? Consider
the example K2x2  K1x1  K3x3. If no xi  0, then any xi can be written as a linear
combination of other variables, unless all Ki  0. Formally, then, variables xi, for i  1 to n,
are said to be linearly independent if their linear combination, S, equals zero only if every Ki  0
and no xi  0 for all t  0.
System variable. Any variable that responds to an input or initial conditions in a
system.
State variables. The smallest set of linearly independent system variables such that the
values of the members of the set at time t0 along with known forcing functions completely
determine the value of all system variables for all t  t0.
State vector. A vector whose elements are the state variables.
State space. The n-dimensional space whose axes are the state
variables. This is a new term and is illustrated in Figure 3.3, where the
state variables are assumed to be a resistor voltage, vR, and a capacitor
voltage, vC. These variables form the axes of the state space. A trajectory
can be thought of as being mapped out by the state vector, x(t), for a range
of t. Also shown is the state vector at the particular time t  4.
State equations. A set of n simultaneous, ﬁrst-order differential
equations with n variables, where the n variables to be solved are the state
variables.
Output equation. The algebraic equation that expresses the output
variables of a system as linear combinations of the state variables and the
inputs.
Now that the deﬁnitions have been formally stated, we deﬁne the
state-space representation of a system. A system is represented in state
space by the following equations:
_x  Ax  Bu
3.18
y  Cx  Du
3.19
for t  t0 and initial conditions, x(t0), where
x  state vector
_x  derivative of the state vector with respect to time
y  output vector
u  input or control vector
A  system matrix
B  input matrix
C  output matrix
D  feedforward matrix
Equation (3.18) is called the state equation, and the vector x, the state vector, contains
the state variables. Equation (3.18) can be solved for the state variables, which we
demonstrate in Chapter 4. Equation (3.19) is called the output equation. This equation
is used to calculate any other system variables. This representation of a system provides
complete knowledge of all variables of the system at any t  t0.
vC
vR
State space
State vector, x(t)
State vector trajectory
State vector, x(4)
FIGURE 3.3
Graphic representation of state
space and a state vector
3.3 The General State-Space Representation
121

As an example, for a linear, time-invariant, second-order system with a single input
v(t), the state equations could take on the following form:
dx1
dt  a11x1  a12x2  b1vt
(3.20a)
dx2
dt  a21x1  a22x2  b2vt
(3.20b)
where x1 and x2 are the state variables. If there is a single output, the output equation could
take on the following form:
y  c1x1  c2x2  d1vt
3.21
The choice of state variables for a given system is not unique. The requirement in choosing
the state variables is that they be linearly independent and that a minimum number of them
be chosen.
3.4 Applying the State-Space Representation
In this section, we apply the state-space formulation to the representation of more
complicated physical systems. The ﬁrst step in representing a system is to select the state
vector, which must be chosen according to the following considerations:
1. A minimum number of state variables must be selected as components of the state vector.
This minimum number of state variables is sufﬁcient to describe completely the state of
the system.
2. The components of the state vector (that is, this minimum number of state variables) must
be linearly independent.
Let us review and clarify these statements.
Linearly Independent State Variables
The components of the state vector must be linearly independent. For example, following the
deﬁnition of linear independence in Section 3.3, if x1, x2, and x3 are chosen as state variables,
but x3  5x1  4x2, then x3 is not linearly independent of x1 and x2, since knowledge of the
values of x1 and x2 will yield the value of x3. Variables and their successive derivatives are
linearly independent. For example, the voltage across an inductor, vL, is linearly independent
of the current through the inductor, iL, since vL  LdiL=dt. Thus, vL cannot be evaluated as a
linear combination of the current, iL.
Minimum Number of State Variables
How do we know the minimum number of state variables to select? Typically, the minimum
number required equals the order of the differential equation describing the system. For
example, if a third-order differential equation describes the system, then three simultaneous,
ﬁrst-order differential equations are required along with three state variables. From the
perspective of the transfer function, the order of the differential equation is the order of
the denominator of the transfer function after canceling common factors in the numerator
and denominator.
In most cases, another way to determine the number of state variables is to count
the number of independent energy-storage elements in the system.5 The number of
5 Sometimes it is not apparent in a schematic how many independent energy-storage elements there are. It is
possible that more than the minimum number of energy-storage elements could be selected, leading to a state vector
whose components number more than the minimum required and are not linearly independent. Selecting additional
dependent energy-storage elements results in a system matrix of higher order and more complexity than required for
the solution of the state equations.
122
Chapter 3
Modeling in the Time Domain

these energy-storage elements equals the order of the differential equation and the number
of state variables. In Figure 3.2 there are two energy-storage elements, the capacitor and
the inductor. Hence, two state variables and two state equations are required for
the system.
If too few state variables are selected, it may be impossible to write particular output
equations, since some system variables cannot be written as a linear combination of the
reduced number of state variables. In many cases, it may be impossible even to complete the
writing of the state equations, since the derivatives of the state variables cannot be expressed
as linear combinations of the reduced number of state variables.
If you select the minimum number of state variables but they are not linearly
independent, at best you may not be able to solve for all other system variables. At worst
you may not be able to complete the writing of the state equations.
Often the state vector includes more than the minimum number of state variables
required. Two possible cases exist. Often state variables are chosen to be physical
variables of a system, such as position and velocity in a mechanical system. Cases arise
where these variables, although linearly independent, are also decoupled. That is, some
linearly independent variables are not required in order to solve for any of the other
linearly independent variables or any other dependent system variable. Consider the case
of a mass and viscous damper whose differential equation is M dv=dt  Dv  f t, where v
is the velocity of the mass. Since this is a ﬁrst-order equation, one state equation is all
that is required to deﬁne this system in state space with velocity as the state variable.
Also, since there is only one energy-storage element, mass, only one state variable is
required to represent this system in state space. However, the mass also has an
associated position, which is linearly independent of velocity. If we want to include
position in the state vector along with velocity, then we add position as a
state variable that is linearly independent of the other state variable, velocity.
Figure 3.4 illustrates what is happening. The ﬁrst block is the transfer
function equivalent to Mdvt=dt  Dvt  f t. The second block shows
that we integrate the output velocity to yield output displacement (see Table 2.2,
Item 10). Thus, if we want displacement as an output, the denominator, or
characteristic equation, has increased in order to 2, the product of the two transfer
functions. Many times, the writing of the state equations is simpliﬁed by including
additional state variables.
Another case that increases the size of the state vector arises when the added
variable is not linearly independent of the other members of the state vector. This
usually occurs when a variable is selected as a state variable but its dependence on the
other state variables is not immediately apparent. For example, energy-storage elements
may be used to select the state variables, and the dependence of the variable associated
with one energy-storage element on the variables of other energy-storage elements may
not be recognized. Thus, the dimension of the system matrix is increased unnecessarily,
and the solution for the state vector, which we cover in Chapter 4, is more difﬁcult.
Also, adding dependent state variables affects the designer’s ability to use state-space
methods for design.6
We saw in Section 3.2 that the state-space representation is not unique. The following
example demonstrates one technique for selecting state variables and representing a system
in state space. Our approach is to write the simple derivative equation for each energy-
storage element and solve for each derivative term as a linear combination of any of the
system variables and the input that are present in the equation. Next we select each
differentiated variable as a state variable. Then we express all other system variables in the
equations in terms of the state variables and the input. Finally, we write the output variables
as linear combinations of the state variables and the input.
F(s)
V(s)
X(s)
1
M
D
M
s +
1
s
FIGURE 3.4
Block diagram of a mass
and damper
6 See Chapter 12 for state-space design techniques.
3.4 Applying the State-Space Representation
123

Example 3.1
Representing an Electrical Network
Representing an Electrical Network
PROBLEM: Given the electrical network of Figure 3.5, ﬁnd a state-space representation
if the output is the current through the resistor.
SOLUTION: The following steps will yield a viable representation of the network in state
space.
Step 1
Label all of the branch currents in the network. These include iL, iR, and iC, as
shown in Figure 3.5.
Step 2
Select the state variables by writing the derivative equation for all energy-storage
elements, that is, the inductor and the capacitor. Thus,
C dvC
dt  iC
3.22
L diL
dt  vL
3.23
From Eqs. (3.22) and (3.23), choose the state variables as the quantities that are
differentiated, namely vC and iL. Using Eq. (3.20) as a guide, we see that the state-space
representation is complete if the right-hand sides of Eqs. (3.22) and (3.23) can be written
as linear combinations of the state variables and the input.
Since iC and vL are not state variables, our next step is to express iC and vL as linear
combinations of the state variables, vC and iL, and the input, v(t).
Step 3
Apply network theory, such as Kirchhoff’s voltage and current laws, to obtain iC
and vL in terms of the state variables, vC and iL. At Node 1,
iC  	iR  iL
 	 1
R vC  iL
3.24
which yields iC in terms of the state variables, vC and iL.
Around the outer loop,
vL  	vC  vt
3.25
which yields vL in terms of the state variable, vC, and the source, v(t).
Step 4
Substitute the results of Eqs. (3.24) and (3.25) into Eqs. (3.22) and (3.23) to
obtain the following state equations:
C dvC
dt  	 1
R vC  iL
(3.26a)
L diL
dt 
	 vC  vt
(3.26b)
Node 1
C
L
R
iC(t)
iR(t)
iL
v(t)
(t)
+–
FIGURE 3.5
Electrical
network for representation in
state space
124
Chapter 3
Modeling in the Time Domain

In order to clarify the representation of physical systems in state space, we will look at
two more examples. The ﬁrst is an electrical network with a dependent source. Although we
will follow the same procedure as in the previous problem, this problem will yield increased
complexity in applying network analysis to ﬁnd the state equations. For the second example,
we ﬁnd the state-space representation of a mechanical system.
or
dvC
dt  	 1
RC vC  1
C iL
(3.27a)
diL
dt 
	 1
L vC  1
L vt
(3.27b)
Step 5
Find the output equation. Since the output is iR(t),
iR  1
R vC
3.28
The ﬁnal result for the state-space representation is found by representing Eqs. (3.27)
and (3.28) in vector-matrix form as follows:
_vC
_iL
"
#

	1=RC
1=C
	1=L
0
"
#
vC
iL
"
#

0
1=L
"
#
vt
(3.29a)
iR 
1=R
0

 vC
iL


(3.29b)
where the dot indicates differentiation with respect to time.
Example 3.2
Representing an Electrical Network with a Dependent Source
Representing an Electrical Network with a Dependent Source
PROBLEM: Find the state and output equations for the electrical network shown in
Figure 3.6 if the output vector is y   vR2
iR2 T, where T means transpose.7
SOLUTION: Immediatelynoticethatthis networkhasavoltage-dependentcurrentsource.
C
R1
iR1(t)
L
Node 1
Node 2
+
–
i(t)
iL(t)
iC(t)
iR2(t)
R2
4vL(t)
FIGURE 3.6
Electrical
network for Example 3.2
7 See Appendix G for a discussion of the transpose. Appendix G is located at www.wiley.com/college/nise.
3.4 Applying the State-Space Representation
125

Step 1
Label all of the branch currents on the network, as shown in Figure 3.6.
Step 2
Select the state variables by listing the voltage-current relationships for all of the
energy-storage elements:
L diL
dt  vL
(3.30a)
C dvC
dt  iC
(3.30b)
From Eqs. (3.30) select the state variables to be the differentiated variables. Thus, the state
variables, x1 and x2, are
x1  iL;
x2  vC
3.31
Step 3
Remembering that the form of the state equation is
_x  Ax  Bu
3.32
we see that the remaining task is to transform the right-hand side of Eq. (3.30) into linear
combinations of the state variables and input source current. Using Kirchhoff’s voltage
and current laws, we ﬁnd vL and iC in terms of the state variables and the input current
source.
Around the mesh containing L and C,
vL  vC  vR2  vC  iR2R2
3.33
But at Node 2, iR2  iC  4vL. Substituting this relationship for iR2 into Eq. (3.33) yields
vL  vC  iC  4vLR2
3.34
Solving for vL, we get
vL 
1
1 	 4R2
vC  iCR2
3.35
Notice that since vC is a state variable, we only need to ﬁnd iC in terms of the state
variables. We will then have obtained vL in terms of the state variables.
Thus, at Node 1 we can write the sum of the currents as
iC  it 	 iR1 	 iL
 it 	 vR1
R1
	 iL
 it 	 vL
R1
	 iL
3.36
where vR1  vL. Equations (3.35) and (3.36) are two equations relating vL and iC in
terms of the state variables iL and vC. Rewriting Eqs. (3.35) and (3.36), we obtain two
simultaneous equations yielding vL and iC as linear combinations of the state variables
iL and vC:
1 	 4R2vL 	 R2iC  vC
(3.37a)
	 1
R1
vL 	 iC  iL 	 it
(3.37b)
126
Chapter 3
Modeling in the Time Domain

In the next example, we ﬁnd the state-space representation for a mechanical
system. It is more convenient when working with mechanical systems to obtain the state
equations directly from the equations of motion rather than from the energy-storage
elements. For example, consider an energy-storage element such as a spring, where F  Kx.
This relationship does not contain the derivative of a physical variable as in the case of
electrical networks, where i  C dv=dt for capacitors, and v  L di=dt for inductors. Thus, in
mechanical systems we change our selection of state variables to be the position and velocity
of each point of linearly independent motion. In the example, we will see that although there
are three energy-storage elements, there will be four state variables; an additional linearly
independent state variable is included for the convenience of writing the state equations. It is
left to the student to show that this system yields a fourth-ordertransferfunctionifwerelate the
displacement of either mass to the applied force, and a third-order transfer function if we relate
the velocity of either mass to the applied force.
Solving Eq. (3.37a) simultaneously for vL and iC yields
vL  1
Δ R2iL 	 vC 	 R2it
3.38
and
iC  1
Δ 1 	 4R2iL  1
R1
vC 	 1 	 4R2it


3.39
where
Δ  	 1 	 4R2  R2
R1


3.40
Substituting Eqs. (3.38) and (3.39) into (3.30), simplifying, and writing the result in
vector-matrix form renders the following state equation:
_iL
_vC
"
#

R2=LΔ
	1=LΔ
1 	 4R2=CΔ
1=R1CΔ
"
#
iL
vC
"
#

	R2=LΔ
	1 	 4R2=CΔ
"
#
it
3.41
Step 4
Derive the output equation. Since the speciﬁed output variables are vR2 and iR2,
we note that around the mesh containing C, L, and R2,
vR2  	vC  vL
(3.42a)
iR2  iC  4vL
(3.42b)
Substituting Eqs. (3.38) and (3.39) into Eq. (3.42), vR2 and iR2 are obtained as linear
combinations of the state variables, iL and vC. In vector-matrix form, the output equation is
vR2
iR2
"
#

R2=Δ
	1  1=Δ
1=Δ
1 	 4R1=ΔR1
"
#
iL
vC
"
#

	R2=Δ
	1=Δ
"
#
it
3.43
3.4 Applying the State-Space Representation
127

Example 3.3
Representing a Translational Mechanical System
Representing a Translational Mechanical System
PROBLEM: Find the state equations for the translational mechanical system shown in
Figure 3.7.
SOLUTION: First write the differential equations for the network in Figure 3.7, using
the methods of Chapter 2 to ﬁnd the Laplace-transformed equations of motion. Next
take the inverse Laplace transform of these equations, assuming zero initial conditions,
and obtain
M1
d2x1
dt2  D dx1
dt  Kx1 	 Kx2  0
3.44
	Kx1  M2
d2x2
dt2  Kx2  f t
3.45
Now let d2x1/dt2  dv1/dt, and d2x2/dt2  dv2/dt, and then select x1, v1, x2, and v2 as state
variables. Next form two of the state equations by solving Eq. (3.44) for dv1/dt and
Eq. (3.45) for dv2/dt. Finally, add dx1/dt  v1 and dx2/dt  v2 to complete the set of state
equations. Hence,
dx1
dt 
v1
(3.46a)
dv1
dt  	 K
M1
x1 	 D
M1
v1  K
M1
x2
(3.46b)
dx2
dt 
v2
(3.46c)
dv2
dt   K
M2
x1
	 K
M2
x2
 1
M2
f t
(3.46d)
In vector-matrix form,
_x1
_v1
_x2
_v2
2
66664
3
77775

0
1
0
0
	K=M1
	D=M1
K=M1
0
0
0
0
1
K=M2
0
	K=M2
0
2
66664
3
77775
x1
v1
x2
v2
2
66664
3
77775

0
0
0
1=M2
2
66664
3
77775
f t
3.47
where the dot indicates differentiation with respect to time. What is the output equation if
the output is x(t)?
D
K
f(t)
Frictionless
M1
M2
x1
x2
FIGURE 3.7
Translational
mechanical system
128
Chapter 3
Modeling in the Time Domain

Skill-Assessment Exercise 3.1
PROBLEM: Find the state-space representation of the electrical network shown in
Figure 3.8. The output is vo(t).
ANSWER:
_x 
1=C1
1=C1
	1=C1
	1=L
0
0
1=C2
0
	1=C2
2
664
3
775x 
0
1
0
2
664
3
775vit
y 
0
0
1


x
The complete solution is at www.wiley.com/college/nise.
Skill-Assessment Exercise 3.2
PROBLEM: Represent the translational mechanical system shown in Figure 3.9 in state
space, where x3(t) is the output.
ANSWER:
_z 
0
1
0
0
0
0
	1
	1
0
1
0
0
0
0
0
1
0
0
0
1
	1
	1
1
0
0
0
0
0
0
1
0
0
1
0
	1
	1
2
6666666664
3
7777777775
z 
0
1
0
0
0
0
2
6666666664
3
7777777775
f t
y 
0
0
0
0
1
0


z
where
z 
x1
_x1
x2
_x2
x3
_x3

T
The complete solution is at www.wiley.com/college/nise.
vi(t)
vo(t)
+
+
–
–
L
C2
C1
R
FIGURE 3.8
Electric circuit
for Skill-Assessment
Exercise 3.1
f(t)
1 kg
1 N/m
1 N-s/m
1 N/m
1 N-s/m
1 kg
1 kg
x1(t)
x2(t)
x3(t)
FIGURE 3.9
Translational mechanical system for Skill-Assessment Exercise 3.2
3.4 Applying the State-Space Representation
129

3.5 Converting a Transfer Function to State Space
In the last section, we applied the state-space representation to electrical and mechanical
systems. We learn how to convert a transfer function representation to a state-space
representation in this section. One advantage of the state-space representation is that it
can be used for the simulation of physical systems on the digital computer. Thus, if we want
to simulate a system that is represented by a transfer function, we must ﬁrst convert the
transfer function representation to state space.
At ﬁrst we select a set of state variables, called phase variables, where each
subsequent state variable is deﬁned to be the derivative of the previous state variable.
In Chapter 5 we show how to make other choices for the state variables.
Let us begin by showing how to represent a general, nth-order, linear differential
equation with constant coefﬁcients in state space in the phase-variable form. We will then
show how to apply this representation to transfer functions.
Consider the differential equation
dny
dtn  an	1
dn	1y
dtn	1  ∙∙∙ a1
dy
dt  a0y  b0u
3.48
A convenient way to choose state variables is to choose the output, y(t), and its (n 	 1)
derivatives as the state variables. This choice is called the phase-variable choice. Choosing
the state variables, xi, we get
x1  y
(3.49a)
x2  dy
dt
(3.49b)
x3  d2y
dt2
(3.49c)
...
xn  dn	1y
dtn	1
(3.49d)
and differentiating both sides yields
_x1  dy
dt
(3.50a)
_x2  d2y
dt2
(3.50b)
_x3  d3y
dt3
(3.50c)
..
.
_xn  dny
dtn
(3.50d)
where the dot above the x signiﬁes differentiation with respect to time.
Substituting the deﬁnitions of Eq. (3.49) into Eq. (3.50), the state equations are
evaluated as
130
Chapter 3
Modeling in the Time Domain

_x1  x2
(3.51a)
_x2  x3
(3.51b)
..
.
_xn	1  xn
(3.51c)
_xn  	a0x1 	 a1x2 ∙∙∙	 an	1xn  b0u
(3.51d)
where Eq. (3.51d) was obtained from Eq. (3.48) by solving for d ny/dt n and using Eq. (3.49).
In vector-matrix form, Eq. (3.51) become
_x1
_x2
_x3
..
.
_xn	1
_xn
2
66666666664
3
77777777775

0
1
0
0
0
0
∙∙∙
0
0
0
1
0
0
0
∙∙∙
0
0
0
0
1
0
0
∙∙∙
0
..
.
0
0
0
0
0
0
∙∙∙
1
	a0
	a1
	a2
	a3
	a4
	a5
∙∙∙
	an	1
2
66666666664
3
77777777775
x1
x2
x3
..
.
xn	1
xn
2
66666666664
3
77777777775

0
0
0
..
.
0
b0
2
66666666664
3
77777777775
u
3.52
Equation (3.52) is the phase-variable form of the state equations. This form is easily
recognized by the unique pattern of 1’s and 0’s and the negative of the coefﬁcients of the
differential equation written in reverse order in the last row of the system matrix.
Finally, since the solution to the differential equation is y(t), or x1, the output
equation is
y 
1
0
0
∙∙∙
0


x1
x2
x3
...
xn	1
xn
2
666666664
3
777777775
3.53
In summary, then, to convert a transfer function into state equations in phase-variable
form, we ﬁrst convert the transfer function to a differential equation by cross-multiplying and
taking the inverse Laplace transform, assuming zero initial conditions. Then we represent the
differential equation in state space in phase-variable form. An example illustrates the process.
Example 3.4
Converting a Transfer Function with a Constant Term in
the Numerator
Converting a Transfer Function with a Constant Term in
the Numerator
PROBLEM: Find the state-space representation in phase-variable form for the transfer
function shown in Figure 3.10(a).
SOLUTION:
Step 1
Find the associated differential equation. Since
Cs
Rs 
24
s3  9s2  26s  24
3.54
3.5 Converting a Transfer Function to State Space
131

cross-multiplying yields
s3  9s2  26s  24Cs  24Rs
3.55
The corresponding differential equation is found by taking the inverse Laplace transform,
assuming zero initial conditions:
€c? 9€c  26_c  24c  24r
3.56
Step 2
Select the state variables.
Choosing the state variables as successive derivatives, we get
x1  c
(3.57a)
x2  _c
(3.57b)
x3  €c
(3.57c)
Differentiating both sides and making use of Eq. (3.57) to ﬁnd _x1 and _x2, and Eq. (3.56) to
ﬁnd ~c  _x3, we obtain the state equations. Since the output is c  x1, the combined state
and output equations are
_x1 
x2
(3.58a)
_x2 
x3
(3.58b)
_x3  	24x1 	 26x2 	 9x3  24r
(3.58c)
y  c  x1
(3.58d)
In vector-matrix form,
_x1
_x2
_x3
2
64
3
75
0
1
0
0
0
1
	24
	26
	9
2
64
3
75
x1
x2
x3
2
64
3
75 
0
0
24
2
64
3
75r
(3.59a)
y  1
0
0


x1
x2
x3
2
4
3
5
(3.59b)
R(s)
C(s)
24
s3 + 9s2 + 26s + 24
(a)
24
+
r(t)
x3(t)
x3(t)
x2(t)
x1(t)
y(t)
(b)
9
26
24
– –
–
FIGURE 3.10
a. Transfer function; b. equivalent block diagram showing phase variables.
Note: yt  ct.
132
Chapter 3
Modeling in the Time Domain

The transfer function of Example 3.4 has a constant term in the numerator. If a transfer
function has a polynomial in s in the numerator that is of order less than the polynomial in
the denominator, as shown in Figure 3.11(a), the numerator and denominator can be
handled separately. First separate the transfer function into two cascaded transfer functions,
as shown in Figure 3.11(b); the ﬁrst is the denominator, and the second is just the numerator.
The ﬁrst transfer function with just the denominator is converted to the phase-variable
representation in state space as demonstrated in the last example. Hence, phase variable x1
is the output, and the rest of the phase variables are the internal variables of the ﬁrst block, as
shown in Figure 3.11(b). The second transfer function with just the numerator yields
Ys  Cs  b2s2  b1s  b0 X1s
3.60
where, after taking the inverse Laplace transform with zero initial conditions,
yt  b2
d2x1
dt2  b1
dx1
dt  b0x1
3.61
Notice that the third row of the system matrix has the same coefﬁcients as the denominator
of the transfer function but negative and in reverse order.
At this point, we can create an equivalent block diagram of the system of Figure 3.10(a)
to help visualize the state variables. We draw three integral blocks as shown in Figure 3.10(b)
and label each output as one of the state variables, xi(t), as shown. Since the input to
each integrator is xi(t), use Eqs. (3.58a), (3.58b), and (3.58c) to determine the combination of
input signals to each integrator. Form and label each input. Finally, use Eq. (3.58d) to form
and label the output, yt  ct. The ﬁnal result of Figure 3.10(b) is a system equivalent
to Figure 3.10(a) that explicitly shows the state variables and gives a vivid picture of the
state-space representation.
Students who are using MATLAB should now run ch3p1 through ch3p4
in Appendix B. You will learn how to represent the system matrix A,
the input matrix B, and the output matrix C using MATLAB. You
will learn how to convert a transfer function to the state-space
representation in phase-variable form. Finally, Example 3.4 will
be solved using MATLAB.
R(s)
X1(s)
1
a3s3 + a2s2 + a1s + a0
b2s2 + b1s + b0
b2s2 + b1s + b0
a3s3 + a2s2 + a1s + a0 
(a)
(b)
Internal variables:
X2(s), X3(s)
C(s)
R(s)
C(s)
FIGURE 3.11
Decomposing
a transfer function
3.5 Converting a Transfer Function to State Space
133

But the derivative terms are the deﬁnitions of the phase variables obtained in the ﬁrst block.
Thus, writing the terms in reverse order to conform to an output equation,
yt  b0x1  b1x2  b2x3
3.62
Hence, the second block simply forms a speciﬁed linear combination of the state variables
developed in the ﬁrst block.
From another perspective, the denominator of the transfer function yields the state
equations, while the numerator yields the output equation. The next example demonstrates
the process.
Example 3.5
Converting a Transfer Function with a Polynomial in
the Numerator
Converting a Transfer Function with a Polynomial in
the Numerator
PROBLEM: Find the state-space representation of the transfer function shown in
Figure 3.12(a).
R(s)
X1(s)
s2 + 7s + 2
1
s3 + 9s2 + 26s + 24
(b)
Internal variables:
X2(s),  X3(s)
C(s)
s2 + 7s + 2
s3 + 9s2 + 26s + 24
(a)
R(s)
C(s)
1
9
26
24
+
r(t)
(c)
x3(t)
 x3(t)
x2(t)
x1(t)
y(t)
1
7
2
+
+
+
– –
–
FIGURE 3.12
a. Transfer
function; b. decomposed
transfer function; c. equivalent
block diagram Note: yt  ct.
134
Chapter 3
Modeling in the Time Domain

SOLUTION: ThisproblemdiffersfromExample3.4,sincethenumeratorhasapolynomial
in s instead of just a constant term.
Step 1
Separate the system into two cascaded blocks, as shown in Figure 3.12(b). The
ﬁrst block contains the denominator and the second block contains the
numerator.
Step 2
Find the state equations for the block containing the denominator. We notice
that the ﬁrst block’s numerator is 1/24 that of Example 3.4. Thus, the state
equations are the same except that this system’s input matrix is 1/24 that of
Example 3.4. Hence, the state equation is
_x1
_x2
_x3
2
64
3
75 
0
1
0
0
0
1
	24
	26
	9
2
64
3
75
x1
x2
x3
2
64
3
75 
0
0
1
2
64
3
75r
3.63
Step 3
Introduce the effect of the block with the numerator. The second block of
Figure 3.12(b), where b2  1; b1  7, and b0  2, states that
Cs  b2s2  b1s  b0X1s  s2  7s  2X1s
3.64
Taking the inverse Laplace transform with zero initial conditions, we get
c  €x1  7_x1  2x1
3.65
But,
x1  x1
_x1  x2
€x1  x3
Hence,
y  ct  b2x3  b1x2  b0x1  x3  x2  2x1
3.66
Thus, the last box of Figure 3.11(b) “collects” the states and generates the output equation.
From Eq. (3.66),
y 
b0
b1
b2


x1
x2
x3
2
4
3
5 
2
7
1


x1
x2
x3
2
4
3
5
3.67
Although the second block of Figure 3.12(b) shows differentiation, this block was
implemented without differentiation because of the partitioning that was applied to the
transfer function. The last block simply collected derivatives that were already formed by
the ﬁrst block.
Once again we can produce an equivalent block diagram that vividly represents
our state-space model. The ﬁrst block of Figure 3.12(b) is the same as Figure 3.10(a)
except for the different constant in the numerator. Thus, in Figure 3.12(c) we reproduce
Figure 3.10(b) except for the change in the numerator constant, which appears as a change in
the input multiplying factor. The second block of Figure 3.12(b) is represented using
Eq. (3.66), which forms the output from a linear combination of the state variables, as shown
in Figure 3.12(c).
TryIt 3.1
Use the following MATLAB
statements to form an LTI
state-space representation
from the transfer function
shown in Figure 3.12(a). The
A matrix and B vector are
shown in Eq. (3.63). The C
vector is shown in Eq. (3.67).
num=[1 7 2];
den=[1 9 26 24];
[A,B,C,D]=tf2ss...
(num, den);
P=[0 0 1;0 1 0;1 0 0];
A=inv(P)*A*P
B=inv(P)*B
C=C*P
3.5 Converting a Transfer Function to State Space
135

3.6 Converting from State Space to a Transfer Function
In Chapters 2 and 3, we have explored two methods of representing systems: the transfer
function representation and the state-space representation. In the last section, we united
the two representations by converting transfer functions into state-space representations.
Now we move in the opposite direction and convert the state-space representation into a
transfer function.
Given the state and output equations
_x  Ax  Bu
(3.68a)
y  Cx  Du
(3.68b)
take the Laplace transform assuming zero initial conditions:8
sXs  AXs  BUs
(3.69a)
Ys  CXs  DUs
(3.69b)
Solving for X(s) in Eq. (3.69a),
sI 	 AXs  BUs
3.70
or
Xs  sI 	 A	1BUs
3.71
where I is the identity matrix.
Substituting Eq. (3.71) into Eq. (3.69b) yields
Ys  CsI 	 A	1BUs  DUs  CsI 	 A	1B  D


Us
3.72
We call the matrix CsI 	 A	1B  D


the transfer function matrix, since it relates
the output vector, Y(s), to the input vector, U(s). However, if Us  Us and Ys  Ys
are scalars, we can ﬁnd the transfer function, Thus,
Skill-Assessment Exercise 3.3
PROBLEM: Find the state equations and output equation for the phase-variable repre-
sentation of the transfer function Gs 
2s  1
s2  7s  9.
ANSWER:
_x 
0
1
	9
	7


x 
0
1


rt
y 
1
2


x
The complete solution is at www.wiley.com/college.nise.
8 The Laplace transform of a vector is found by taking the Laplace transform of each component. Since _x consists of the
derivatives of the state variables, the Laplace transform of _x with zero initial conditions yields each component with the
form sXi(s), where Xi(s) is the Laplace transform of the state variable. Factoring out the complex variable, s, in each
component yields the Laplace transform of _x as s X(s), where X(s) is a column vector with components Xi(s).
136
Chapter 3
Modeling in the Time Domain

Ts  Ys
Us  CsI 	 A	1 B  D
3.73
Let us look at an example.
Example 3.6
State-Space Representation to Transfer Function
State-Space Representation to Transfer Function
PROBLEM: Given the system deﬁned by Eq. (3.74), ﬁnd the transfer function,
Ts  Ys=Us, where U(s) is the input and Y(s) is the output.
_x 
0
1
0
0
0
1
	1
	2
	3
2
4
3
5x 
10
0
0
2
4
3
5u
(3.74a)
y 
1
0
0


x
(3.74b)
SOLUTION: The solution revolves around ﬁnding the term sI 	 A	1 in Eq. (3.73).9 All
other terms are already deﬁned. Hence, ﬁrst ﬁnd sI 	 A:
sI 	 A 
s
0
0
0
s
0
0
0
s
2
64
3
75 	
0
1
0
0
0
1
	1
	2
	3
2
64
3
75 
s
	1
0
0
s
	1
1
2
s  3
2
64
3
75
(3.75)
Now form sI 	 A	1:
sI 	 A	1  adjsI 	 A
detsI 	 A 
s2  3s  2
s  3
1
	1
ss  3
s
	s
	2s  1
s2
2
64
3
75
s3  3s2  2s  1
(3.76)
Substituting sI 	 A	1, B, C, and D into Eq. (3.73), where
B 
10
0
0
2
664
3
775
C 
1
0
0


D  0
we obtain the ﬁnal result for the transfer function:
Ts  10s2  3s  2
s3  3s2  2s  1
(3.77)
9 See Appendix G. It is located at www.wiley.com/college/nise and discusses the evaluation of the matrix inverse.
3.6 Converting from State Space to a Transfer Function
137

In Example 3.6, the state equations in phase-variable form were converted to transfer
functions. In Chapter 5, we will see that other forms besides the phase-variable form can be
used to represent a system in state space. The method of ﬁnding the transfer function
representation for these other forms is the same as that presented in this section.
3.7 Linearization
A prime advantage of the state-space representation over the transfer function representation
is the ability to represent systems with nonlinearities, such as the one shown in Figure 3.13.
The ability to represent nonlinear systems does not imply the ability to solve their state
equations for the state variables and the output. Techniques do exist for the solution of some
nonlinear state equations, but this study is beyond the scope of this course. However, in
Appendix H, located at www.wiley.com/college/nise, you can see how to use the digital
computer to solve state equations. This method also can be used for nonlinear state equations.
If we are interested in small perturbations about an equilibrium point, as we were
when we studied linearization in Chapter 2, we can also linearize the state equations about
the equilibrium point. The key to linearization about an equilibrium point is, once again, the
Taylor series. In the following example, we write the state equations for a simple pendulum,
showing that we can represent a nonlinear system in state space; then we linearize the
pendulum about its equilibrium point, the vertical position with zero velocity.
Students who are using MATLAB should now run ch3p5 in Appendix B.
You will learn how to convert a state-space representation to a
transfer function using MATLAB. You can practice by writing a
MATLAB program to solve Example 3.6.
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch3sp1 in Appendix F located at www.wiley.com/
college/nise. You will learn how to use the Symbolic Math Toolbox
to write matrices and vectors. You will see that the Symbolic
Math Toolbox yields an alternative way to use MATLAB to solve
Example 3.6.
Skill-Assessment Exercise 3.4
PROBLEM: Convert the state and output equations shown in Eq. (3.78) to a transfer
function.
_x 
	4
	1:5
4
0


x 
2
0


ut
(3.78a)
y 
1:5
0:625


x
(3.78b)
ANSWER:
Gs 
3s  5
s2  4s  6
The complete solution is located at www.wiley.com/college/nise.
TryIt 3.2
Use the following MATLAB
and the Control System
Toolbox statements to obtain
the transfer function shown in
Skill-Assessment Exercise 3.4
from the state-space
representation of Eq. (3.78).
A=[	4 	1.5;4 0];
B=[2 0]’;
C=[1.5 0.625];
D=0;
T=ss(A,B,C,D);
T=tf(T)
138
Chapter 3
Modeling in the Time Domain

Bruce Frisch/S.S./Photo Researchers, Inc.
FIGURE 3.13
Walking
robots, such as Hannibal shown
here, can be used to explore
hostile environments and rough
terrain, such as that found on
other planets or inside
volcanoes
Example 3.7
Representing a Nonlinear System
Representing a Nonlinear System
PROBLEM: First represent the simple pendulum shown in Figure 3.14(a) (which
could be a simple model for the leg of the robot shown in Figure 3.13) in state
space: Mg is the weight, T is an applied torque in the θ direction, and L is the
length of the pendulum. Assume the mass is evenly distributed, with the center of
mass at L/2. Then linearize the state equations about the pendulum’s equilibrium
point—the vertical position with zero angular velocity.
SOLUTION: First draw a free-body diagram as shown in Figure 3.14(c). Summing the
torques, we get
J d2θ
dt2  MgL
2
sin θ  T
3.79
where J is the moment of inertia of the pendulum around the point of rotation. Select the
state variables x1 and x2 as phase variables. Letting x1  θ and x2  dθ/dt, we write the
state equations as
(  )
(  )
(  )
Mg
T
θ
L
2
Mg sin θ
T
MgL
2
d2θ
dt2
J
a
b
c
L
2
θ
θ
Mg cos θ
sin θ
Mg
FIGURE 3.14
a. Simple pendulum; b. force components of Mg; c. free-body diagram
Virtual Experiment 3.1
Rotary Inverted Pendulum
Put theory into practice by
simulating the linear and non-linear
model of the Quanser Rotary
Inverted Pendulum in LabVIEW.
The behavior of an inverted
pendulum is similar to a variety of
systems, such as Segway
transporters and human posture.
Virtual experiments are found on
Learning Space.
3.7 Linearization
139

_x1  x2
(3.80a)
_x2  	 MgL
2J sin x1  T
J
(3.80b)
where _x2  d2θ/dt2 is evaluated from Eq. (3.79).
Thus, we have represented a nonlinear system in state space. It is interesting to note
that the nonlinear Eqs. (3.80) represent a valid and complete model of the pendulum in
state space even under nonzero initial conditions and even if parameters are time varying.
However, if we want to apply classical techniques and convert these state equations to a
transfer function, we must linearize them.
Let us proceed now to linearize the equation about the equilibrium point,
x1 0; x2 0, that is, θ 0 and dθ/dt 0. Let x1 and x2 be perturbed about the equilibrium
point, or
x1 0δx1
(3.81a)
x2 0δx2
(3.81b)
Using Eq. (2.182), we obtain
sinx1 	sin0dsinx1
dx1

x10
δx1 δx1
3.82
from which
sinx1 δx1
3.83
Substituting Eqs. (3.81) and (3.83) into Eq. (3.80) yields the following state equations:
_δx1 δx2
(3.84a)
_δx2 	MgL
2J δx1 T
J
(3.84b)
which are linear and a good approximation to Eq. (3.80) for small excursions away from the
equilibrium point. What is the output equation?
Skill-Assessment Exercise 3.5
PROBLEM: Represent the translational mechanical system shown in Figure 3.15 in state
space about the equilibrium displacement. The spring is nonlinear, where the relationship
between the spring force, fs(t), and the spring displacement, xs(t), is f st  2x2
st.
The applied force is f t  10  δf t, where δf(t) is a small force about the 10 N
constant value.
Assume the output to be the displacement of the mass, x(t).
ANSWER:
_x 
0
1
	4
ﬃﬃﬃ
5
p
0
"
#
x 
0
1
"
#
δf t
y 
1
0


x
The complete solution is located at www.wiley.com/college/nise.
x(t)
f(t)
Nonlinear
spring
1 kg
FIGURE 3.15
Nonlinear translational
mechanical system for Skill-Assessment
Exercise 3.5
140
Chapter 3
Modeling in the Time Domain

Case Studies
Antenna Control: State-Space Representation
Antenna Control: State-Space Representation
We have covered the state-space representation of individual physical subsystems in this
chapter. In Chapter 5, we will assemble individual subsystems into feedback control
systems and represent the entire feedback system in state space. Chapter 5 also shows how
the state-space representation, via signal-ﬂow diagrams, can be used to interconnect these
subsystems and permit the state-space representation of the whole closed-loop system. In
the following case study, we look at the antenna azimuth position control system and
demonstrate the concepts of this chapter by representing each subsystem in state space.
PROBLEM: Find the state-space representation in phase-variable form for each dynamic
subsystem in the antenna azimuth position control system shown on the front endpapers,
Conﬁguration 1. By dynamic, we mean that the system does not reach the steady state
instantaneously. For example, a system described by a differential equation of ﬁrst order
or higher is a dynamic system. A pure gain, on the other hand, is an example of a
nondynamic system, since the steady state is reached instantaneously.
SOLUTION: In the case study problem of Chapter 2, each subsystem of the antenna
azimuth position control system was identiﬁed. We found that the power ampliﬁer and the
motor and load were dynamic systems. The preampliﬁer and the potentiometers are pure
gains and so respond instantaneously. Hence, we will ﬁnd the state-space representations
only of the power ampliﬁer and of the motor and load.
Power ampliﬁer:
The transfer function of the power ampliﬁer is given on the front endpapers as
Gs  100=s  100. We will convert this transfer function to its state-space
representation. Letting vp(t) represent the power ampliﬁer input and ea(t) represent
the power ampliﬁer output,
Gs  Eas
Vps 
100
s  100
3.85
Cross-multiplying, s  100Eas  100Vps, from which the differential equation can
be written as
dea
dt  100ea  100vpt
3.86
Rearranging Eq. (3.86) leads to the state equation with ea as the state variable:
dea
dt  	100ea  100vpt
3.87
Since the output of the power ampliﬁer is ea(t), the output equation is
y  ea
3.88
Motor and load:
We now ﬁnd the state-space representation for the motor and load. We could of course use
the motor and load block shown in the block diagram on the front endpapers to obtain the
result. However, it is more informative to derive the state-space representation directly
from the physics of the motor without ﬁrst deriving the transfer function. The elements of
Case Studies
141

the derivation were covered in Section 2.8 but are repeated here for continuity. Starting
with Kirchhoff’s voltage equation around the armature circuit, we ﬁnd
eat  iatRa  Kb
dθm
dt
3.89
where ea(t) is the armature input voltage, ia(t) is the armature current, Ra is the armature
resistance, Kb is the armature constant, and θm is the angular displacement of the armature.
The torque, Tm(t), delivered by the motor is related separately to the armature current
and the load seen by the armature. From Section 2.8,
Tmt  Ktiat  Jm
d2θm
dt2  Dm
dθm
dt
3.90
where Jm is the equivalent inertia as seen by the armature, and Dm is the equivalent viscous
damping as seen by the armature.
Solving Eq. (3.90) for ia(t) and substituting the result into Eq. (3.89) yields
eat 
RaJm
Kt

 d2θm
dt2 
DmRa
Kt
 Kb

 dθm
dt
3.91
Deﬁning the state variables x1 and x2 as
x1  θm
(3.92a)
x2  dθm
dt
(3.92b)
and substituting into Eq. (3.91), we get
eat 
RaJm
Kt

 dx2
dt 
DmRa
Kt
 Kb


x2
3.93
Solving for dx2/dt yields
dx2
dt  	 1
Jm
Dm  KtKb
Ra


x2 
Kt
RaJm


eat
3.94
Using Eqs. (3.92) and (3.94), the state equations are written as
dx1
dt  x2
(3.95a)
dx2
dt  	 1
Jm
Dm  KtKb
Ra


x2 
Kt
RaJm


eat
(3.95b)
The output, θo(t), is 1/10 the displacement of the armature, which is x1. Hence, the output
equation is
y  0:1x1
3.96
In vector-matrix form,
_x 
0
1
0
	 1
Jm
Dm  KtKb
Ra


2
64
3
75x 
0
Kt
RaJm
"
#
eat
(3.97a)
y 
0:1
0


x
(3.97b)
142
Chapter 3
Modeling in the Time Domain

But from the case study problem in Chapter 2, Jm  0:03 and Dm  0:02. Also,
Kt=Ra  0:0625 and Kb  0:5. Substituting the values into Eq. (3.97a), we obtain the ﬁnal
state-space representation:
_x 
0
1
0
	1:71


x 
0
2:083


eat
(3.98a)
y 
0:1
0


x
(3.98b)
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. Referring to the antenna azimuth position control system shown on the
front endpapers, ﬁnd the state-space representation of each dynamic subsystem. Use
Conﬁguration 2.
Pharmaceutical Drug Absorption
Pharmaceutical Drug Absorption
An advantage of state-space representation over the transfer function representation is the
ability to focus on component parts of a system and write n simultaneous, ﬁrst-order
differential equations rather than attempt to represent the system as a single, nth-order
differential equation, as we have done with the transfer function.
Also, multiple-input, multiple-output systems can be conveniently
represented in state space. This case study demonstrates both of
these concepts.
PROBLEM: In the pharmaceutical industry we want to describe
the distribution of a drug in the body. A simple model divides
the process into compartments: the dosage, the absorption site,
the blood, the peripheral compartment, and the urine. The rate of
change of the amount of a drug in a compartment is equal to the
input ﬂow rate diminished by the output ﬂow rate. Figure 3.16
summarizes the system. Here each xi is the amount of drug in
that particular compartment (Lordi, 1972). Represent the system
in state space, where the outputs are the amounts of drug in each
compartment.
SOLUTION: The ﬂow rate of the drug into any given compartment is proportional to the
concentration of the drug in the previous compartment, and the ﬂow rate out of a given
compartment is proportional to the concentration of the drug in its own compartment.
We now write the ﬂow rate for each compartment. The dosage is released to the
absorption site at a rate proportional to the dosage concentration, or
dx1
dt  	K1x1
3.99
The ﬂow into the absorption site is proportional to the concentration of the drug at the
dosage site. The ﬂow from the absorption site into the blood is proportional to the
concentration of the drug at the absorption site. Hence,
dx2
dt  K1x1 	 K2x2
3.100
Similarly, the net ﬂow rate into the blood and peripheral compartment is
dx3
dt  K2x2 	 K3x3  K4x4 	 K5x3
3.101
dx4
dt 
K5x3 	 K4x4
3.102
x1
Dosage
Absorption
site
Blood
Urine
x2
x3
x5
x4
Peripheral
compartment
FIGURE 3.16
Pharmaceutical drug-level
concentrations in a human
Case Studies
143

where K4x4 	 K5x3 is the net ﬂow rate into the blood from the peripheral compartment.
Finally, the amount of the drug in the urine is increased as the blood releases the drug to the
urine at a rate proportional to the concentration of the drug in the blood. Thus,
dx5
dt  K3x3
3.103
Equations (3.99) through (3.103) are the state equations. The output equation is a
vector that contains each of the amounts, xi. Thus, in vector-matrix form,
_x 
	K1
0
0
0
0
K1
	K2
0
0
0
0
K2
	K3  K5
K4
0
0
0
K5
	K4
0
0
0
K3
0
0
2
6666664
3
7777775
x
(3.104a)
y 
1
0
0
0
0
0
1
0
0
0
0
0
1
0
0
0
0
0
1
0
0
0
0
0
1
2
6666664
3
7777775
x
(3.104b)
You may wonder how there can be a solution to these equations if there is no input. In
Chapter 4, when we study how to solve the state equations, we will see that initial conditions
will yield solutions without forcing functions. For this problem, an initial condition on the
amount of dosage, x1, will generate drug quantities in all other compartments.
CHALLENGE: We now give you a problem to test your knowledge of this chapter’s
objectives. The problem concerns the storage of water in aquifers. The principles are similar
to those used to model pharmaceutical drug absorption.
Underground water supplies, called aquifers, are used in many areas for agricultural,
industrial, and residential purposes. An aquifer system consists of a number of interconnected
natural storage tanks. Natural water ﬂows through the sand and sandstone of the aquifer
system,changingthewaterlevelsinthetanksonitswaytothesea.Awaterconservationpolicy
can be established whereby water is pumped between tanks to prevent its loss to the sea.
A model for the aquifer system is shown in Figure 3.17. In this model, the aquifer is
represented by three tanks, with water level hi called the head. Each qn is the natural water
q21 = G21(H1–h1)
q2 = G2(h2–h1)
q3 = G3(h3–h2)
q1 = G1h1
qi1
qi2
qo2
qi3
qo3
h3
h2
h1
FIGURE 3.17
Aquifer system
model
144
Chapter 3
Modeling in the Time Domain

Summary
This chapter has dealt with the state-space representation of physical systems, which took
the form of a state equation,
_x  Ax  Bu
3.105
and an output equation,
y  Cx  Du
3.106
for t  t0, and initial conditions x(t0). Vector x is called the state vector and contains
variables, called state variables. The state variables can be combined algebraically with the
input to form the output equation, Eq. (3.106), from which any other system variables can be
found. State variables, which can represent physical quantities such as current or voltage, are
chosen to be linearly independent. The choice of state variables is not unique and affects
how the matrices A, B, C, and D look. We will solve the state and output equations for x and
y in Chapter 4.
In this chapter, transfer functions were represented in state space. The form selected
was the phase-variable form, which consists of state variables that are successive derivatives
of each other. In three-dimensional state space, the resulting system matrix, A, for the
phase-variable representation is of the form
0
1
0
0
0
1
	a0
	a1
	a2
2
4
3
5
3.107
where the ai’s are the coefﬁcients of the characteristic polynomial or denominator of the
system transfer function. We also discussed how to convert from a state-space representation
to a transfer function.
In conclusion, then, for linear, time-invariant systems, the state-space representation
is simply another way of mathematically modeling them. One major advantage of applying
ﬂow to the sea and is proportional to the difference in head between two adjoining tanks, or
qn  Gnhn 	 hn	1, where Gn is a constant of proportionality and the units of qn are m3/yr.
The engineered ﬂow consists of three components, also measured in m3/yr: (1) ﬂow
from the tanks for irrigation, industry, and homes, qon; (2) replenishing of the tanks from
wells, qin; and (3) ﬂow, q21, created by the water conservation policy to prevent loss to the
sea. In this model, water for irrigation and industry will be taken only from Tank 2 and
Tank 3. Water conservation will take place only between Tank 1 and Tank 2, as follows.
Let H1 be a reference head for Tank 1. If the water level in Tank 1 falls below H1, water
will be pumped from Tank 2 to Tank 1 to replenish the head. If h1 is higher than H1, water
will be pumped back to Tank 2 to prevent loss to the sea. Calling this ﬂow for conservation
q21, we can say this ﬂow is proportional to the difference between the head of Tank 1, h1,
and the reference head, H1, or q21  G21H1 	 h1.
The net ﬂow into a tank is proportional to the rate of change of head in each
tank. Thus,
Cndhn=dt  qin 	 qon  qn1 	 qn  qn1n 	 qnn	1
(Kandel, 1973).
Represent the aquifer system in state space, where the state variables and the outputs
are the heads of each tank.
Summary
145

the state-space representation to such linear systems is that it allows computer
simulation. Programming the system on the digital computer and watching the system’s
response is an invaluable analysis and design tool. Simulation is covered in Appendix H
located at www.wiley.com/college/nise.
Review Questions
1. Give two reasons for modeling systems in state space.
2. State an advantage of the transfer function approach over the state-space approach.
3. Deﬁne state variables.
4. Deﬁne state.
5. Deﬁne state vector.
6. Deﬁne state space.
7. What is required to represent a system in state space?
8. An eighth-order system would be represented in state space with how many state
equations?
9. If the state equations are a system of ﬁrst-order differential equations whose solution
yields the state variables, then the output equation performs what function?
10. What is meant by linear independence?
11. What factors inﬂuence the choice of state variables in any system?
12. What is a convenient choice of state variables for electrical networks?
13. If an electrical network has three energy-storage elements, is it possible to have a
state-space representation with more than three state variables? Explain.
14. What is meant by the phase-variable form of the state equation?
Problems
1. Represent the electrical network shown in Figure P3.1 in
state space, where vo(t) is the output. [Section: 3.4]
1 Ω
+
vi(t)
0.5 F
vo(t)
–
+–
3 Ω
1 Ω
2 H
1 H
FIGURE P3.1
2. Represent the electrical network shown in Figure P3.2 in
state space, where iR(t) is the output. [Section: 3.4]
3 Ω
3 F
v1(t)
4v1(t)
3 Ω
vi(t)
2 H
iR(t)
+–
FIGURE P3.2
3. Find the state-space representation of the network shown
in Figure P3.3 if the output is vo(t). [Section: 3.4]
vo(t)
+
vi(t)
1 F
1 H
2 Ω
2 Ω
–
i3(t)
i2(t)
i1(t)
+–
1 F
FIGURE P3.3
4. Represent the system shown in Figure P3.4 in state space
where the output is x3(t). [Section: 3.4]
146
Chapter 3
Modeling in the Time Domain

fv2 = 1 N-s/m
fv3 = 1 N-s/m
fv1 = 1 N-s/m
fv4 = 1 N-s/m
fv5 = 1 N-s/m
K = 2 N/m
M3 = 1 kg
M2 = 1 kg
M1 = 2 kg
x1(t)
x2(t)
f (t)
x3(t)
Frictionless
FIGURE P3.4
5. Represent the translational mechanical system shown
in Figure P3.5 in state space, where x1(t) is the output.
[Section: 3.4]
f(t)
x2(t)
x3(t)
x1(t)
fv1 = 1 N-s/m
fv2 = 1 N-s/m
M1 = 1 kg
M2 = 2 kg
M3 = 1 kg
K1 = 1 N/m
K2 = 1 N/m
fv3 = 1 N-s/m
FIGURE P3.5
6. Represent the rotational mechanical system shown in
Figure P3.6 in state space, where θ1(t) is the output.
[Section: 3.4]
N2 = 100
100 N-m/rad
100 N-m-s/rad
100 kg-m2
N1 = 30
T(t) θ1(t)
50 kg-m2
FIGURE P3.6
7. Represent the system shown in Figure P3.7 in state space
where the output is θL(t). [Section: 3.4]
2 N-m/rad 3 N-m-s/rad
 N-m/rad
200 N-m-s/rad
T(t)
θL(t)
N4 = 100
N2 = 300
N1 = 30
N3 = 10
1
10
FIGURE P3.7
8. Show that the system of Figure 3.7 in the text
yields a fourth-order transfer function if we relate the
displacement of either mass to the applied force, and a
third-order one if we relate the velocity of either mass to
the applied force. [Section: 3.4]
9. Find the state-space representation in phase-variable
form for each of the systems shown in Figure P3.8.
[Section: 3.5]
R(s)
30
s5 + 8s4 + 9s3 + 6s2 + s + 30 
C(s)
(b)
100
s4 + 20s3 + 10s2 + 7s + 100
C(s)
R(s)
(a)
FIGURE P3.8
10. Repeat Problem 9 using MATLAB.
[Section: 3.5]
11. For each system shown in Figure P3.9, write the state
equations and the output equation for the phase-variable
representation. [Section: 3.5]
s5 + 9s4 + 13s3 + 8s2
s4 + 2s3 + 12s2 + 7s + 6
C(s)
R(s)
(b)
R(s)
8s + 10
s4 + 5s3 + s2 + 5s + 13
C(s)
(a)
FIGURE P3.9
12. Repeat Problem 11 using MATLAB.
[Section: 3.5]
13. Represent the following transfer function in state
space. Give your answer in vector-matrix form.
[Section: 3.5]
Ts 
ss  2
s  1s2  2s  5
14. Find the transfer function Gs  Ys=Rs for each
of the following systems represented in state space:
[Section: 3.6]
a. _x 
0
1
0
0
0
1
	3
	2
	5
2
6664
3
7775x 
0
0
10
2
6664
3
7775 r
y 
1
0
0


x
Problems
147

b. _x 
2
	3
	8
0
5
3
	3
	5
	4
2
664
3
775x 
1
4
6
2
664
3
775 r
y 
1
3
6


x
c. _x 
3
	5
2
1
	8
7
	3
	6
2
2
664
3
775x 
5
	3
2
2
664
3
775 r
y 
1
	4
3


x
15. Use MATLAB to ﬁnd the transfer
function, G(s)=Y(s)/R(s), for
eachofthefollowingsystemsrepresented
in state space: [Section: 3.6]
a. _x 
0
1
5
0
0
0
1
0
0
0
0
1
	7
	9
	2
	3
2
666664
3
777775
x 
0
5
8
2
2
666664
3
777775
r
y 
1
3
6
6


x
b. _x 
3
1
0
4
	2
	3
5
	5
2
	1
0
1
	1
2
8
	7
6
	3
	4
0
	6
0
4
	3
1
2
666666664
3
777777775
x 
2
7
8
5
4
2
666666664
3
777777775
r
y 
1
	2
	9
7
6


x
16. Repeat Problem 15 using MATLAB,
the Symbolic Math Toolbox, and
Eq. (3.73). [Section: 3.6]
17. A missile in ﬂight, as shown in Figure P3.10, is subject
to four forces: thrust, lift, drag, and gravity. The
missile ﬂies at an angle of attack, α, from its longitu-
dinal axis, creating lift. For steering, the body angle
from vertical, ϕ, is controlled by rotating the engine at
the tail. The transfer function relating the body angle,
ϕ, to the angular displacement, δ, of the engine is of
the form
Φs
δs 
Kas  Kb
K3s3  K2s2  K1s  K0
Thrust
Lift
Drag
Vertical
Velocity
c. g.
ϕ
α
δ
FIGURE P3.10
Missile
Represent the missile steering control in state space.
[Section: 3.5]
18. GiventhedcservomotorandloadshowninFigureP3.11,
represent the system in state space, where the state
variables are the armature current, ia, load displacement,
θL, and load angular velocity, ωL. Assume that the output
is the angular displacement of the armature. Do not
neglect armature inductance. [Section: 3.4]
N2
DL
Armature
Fixed
field
JL
θL(t)
N1
θm(t)
La
Ra
ea(t)
ia(t)
+
–
FIGURE P3.11
Motor and load
19. Consider the mechanical system of Figure P3.12. If the
spring is nonlinear, and the force, Fs, required to stretch
the spring is Fs  2x2
1, represent the system in state space
linearized about x1  1 if the output is x2. [Section: 3.7]
2 N-s/m
f(t)
1 kg
2 kg
Fs = 2x12 N
x2(t)
x1(t)
FIGURE P3.12
Nonlinear mechanical system
20. Image-based homing for robots can be implemented by
generating heading command inputs to a steering system
based on the following guidance algorithm. Suppose the
robot shown in Figure P3.13(a) is to go from point R to a
target,pointT,asshowninFigureP3.13(b).IfRx,Ry,and
Rz are vectors from the robot to each landmark, X, Y, Z,
respectively,andTx,Ty,andTzarevectorsfromthetarget
to each landmark, respectively, then heading commands
148
Chapter 3
Modeling in the Time Domain

would drive the robot to minimize Rx 	 Tx; Ry 	 Ty;
and Rz 	 Tz simultaneously, since the differences will
be zero when the robot arrives at the target (Hong, 1992).
If Figure P3.13(c) represents the control system that
steers the robot, represent each block—the controller,
wheels, and vehicle—in state space. An animation
PowerPoint presentation (PPT) demonstrating this system
isavailableforinstructorsatwww.wiley.com/college/nise.
See Robot. [Section: 3.5]
X
Z
Y
Heading
command
Heading
error
Steering
command
Wheel
angle
Actual
heading
Controller
+
–
K1(s + a)
(s + b)
Wheels
c
s + c
Vehicle
(c)
(b)
R
T
Rx
Rz
Ry
Tz
TxTy
Robot
Camera
Spherical
mirror
(a)
1
s
FIGURE P3.13
a. Robot with television imaging system;10
b. vector diagram showing concept behind image-based homing;10
c. heading control system
21. Modern robotic manipulators that act directly upon their
target environments must be controlled so that impact
forces as well as steady-state forces do not damage the
targets. At the same time, the manipulator must provide
sufﬁcient force to perform the task. In order to develop a
controlsystemtoregulatetheseforces,theroboticmanip-
ulator and target environment must be modeled. Assum-
ing the model shown in Figure P3.14, represent in state
space the manipulator and its environment under the
following conditions (Chiu, 1997). [Section: 3.5]
1 N/m
1 N/m
1 N/m
1 N-s/m
1 N-s/m
1 N-s/m
1 N-s/m
1 N/m
1 N/m
u(t)
1 kg
1 kg
1 kg
Contact
point
Manipulator
Sensor
Internal force
model
Environment
FIGURE P3.14
Robotic manipulator and target environment11
a. The manipulator is not in contact with its target
environment.
b. The manipulator is in constant contact with its target
environment.
22. In the past, Type-1 diabetes patients had to inject
themselves with insulin three to four times a day.
New delayed-action insulin analogues such as insulin
Glarginerequireasingledailydose.Asimilarprocedureto
the one described in the Pharmaceutical Drug Absorption
case study of this chapter is used to ﬁnd a model for
the concentration-time evolution of plasma for insulin
Glargine.Foraspeciﬁcpatient,state-spacemodelmatrices
are given by (Tarín, 2007)
A 
	0:435
0:209
0:02
0:268
	0:394
0
0:227
0
	0:02
2
64
3
75;
B 
1
0
0
2
64
3
75;
C 
0:0003
0
0


;
D  0
where the state vector is given by
x 
x1
x2
x3
2
4
3
5:
The state variables are
x1  insulin amount in plasma compartment
x2  insulin amount in liver compartment
x3  insulin amount in interstitial in body tissue
compartment
The system’s input is u  external insulin flow.
The system’s output is y  plasma insulin
concentration.
a. Find the system’s transfer function.
b. Verify your result using
MATLAB.
23. A linear, time-invariant model of the hypothalamic-
pituitary-adrenal axis of the endocrine system with
ﬁve state variables has been proposed as follows
(Kyrylov, 2005):
dx0
dt  a00x0  a02x2  d0
dx1
dt  a10x0  a11x1  a12x2
dx2
dt  a20x0  a21x1  a22x2  a23x3  a24x4
dx3
dt  a32x2  a33x3
dx4
dt  a42x2  a44x4
10 Hong, J.; Tan, X.; Pinette, B.; Weiss, R.; and Riseman, E. M. Image-Based
Homing, IEEE Control Systems, Feb. 1992, pp. 38–45. 1992 IEEE.
11 Based on Chiu, D. K., and Lee, S. Design and Experimentation of a Jump
Impact Controller. IEEE Control Systems, June 1997, Figure 1, p. 99. 1997
IEEE.
Problems
149

where each of the state variables represents circulatory
concentrations as follows:
x0  corticotropin-releasing hormone
x1  corticotropin
x2  free cortisol
x3  albumin-bound cortisol
x4  corticosteroid-binding globulin
d0  an external generating factor
Express the system in the form _x  Ax  Bu.
24. In this chapter, we described the state-space representation
of single-input, single-output systems. In general, systems
canhavemultipleinputsandmultipleoutputs.Anautopilot
is to be designed for a submarine as shown in Figure P3.15
to maintain a constant depth under severe wave distur-
bances. We will see that this system has two inputs and two
outputs and thus the scaler u becomes a vector, u, and the
scaler y becomes a vector, y, in the state equations.
FIGURE P3.1512
It has been shown that the system’s linearized dynamics
under neutral buoyancy and at a given constant speed
are given by (Liceaga-Castro, 2009):
_x  Ax  Bu
y  Cx
where
x 
w
q
z
θ
2
66664
3
77775
;
y 
z
θ
"
#
;
u 
δB
δS
"
#
A 
	0:038
0:896
0
0:0015
0:0017
	0:092
0
	0:0056
1
0
0
	3:086
0
1
0
0
2
6666664
3
7777775
;
B 
	0:0075
	0:023
0:0017
	0:0022
0
0
0
0
2
6666664
3
7777775
;
C 
0
0
1
0
0
0
0
1
"
#
and where
w  the heave velocity
q  the pitch rate
z  the submarine depth
θ  the pitch angle
δB  the bow hydroplane angle
δS  the stern hydroplane angle
Since this system has two inputs and two outputs, four
transfer functions are possible.
a. Use MATLAB to calculate the
system’s matrix transfer
function.
b. Using the results from Part a, write the transfer
function zs
δBs ;
zs
δSs ;
θs
δBs ;
and
θs
δSs .
25. Experiments to identify precision grip dynamics
between the index ﬁnger and thumb have been
performed using a ball-drop experiment. A subject
holds a device with a small receptacle into which an
object is dropped, and the response is measured
(Fagergren, 2000). Assuming a step input, it has
been found that the response of the motor subsystem
together with the sensory system is of the form
Gs  Ys
Rs 
s  c
s2  as  bs  d
Convert
this
transfer
function
to
a
state-space
representation.
26. State-space representations are, in general, not unique.
One system can be represented in several possible ways.
For example, consider the following systems:
a. _x  	5x  3u
y  7x
12 Liceaga-Castro E., van der Molen G.M. Submarine H∞Depth Control
Under Wave Disturbances. IEEE Trans. on Control Systems Technology,
Vol. 3 No. 3, 1995. Figure 1, p. 339.
150
Chapter 3
Modeling in the Time Domain

b.
_x1
_x2
"
#

	5
0
0
	1
"
#
x1
x2
"
#

3
1
"
#
u
y 
7
0


x1
x2
"
#
c.
_x1
_x2
"
#

	5
0
0
	1
"
#
x1
x2
"
#

3
0
"
#
u
y 
7
3


x1
x2
"
#
Show that these systems will result in the same transfer
function. We will explore this phenomenon in more
detail in Chapter 5.
27. Figure P3.16 shows a schematic description of the global
carbon cycle (Li, ). In the ﬁgure, mA(t) represents the
amount of carbon in gigatons (GtC) present in the
atmosphere of earth; mV(t) the amount in vegetation;
ms(t) the amount in soil; mSO(t) the amount in surface
ocean; and mIDO(t) the amount in intermediate and deep-
ocean reservoirs. Let uE(t) stand for the human generated
CO2emissions(GtC/yr). From the ﬁgure,the atmospheric
mass balance in the atmosphere can be expressed as:
dmA
dt t  uEt 	 kO1  kL1mAt  kL2mVt
kO2mSOt  kL4mSt
where the k’s are exchange coefﬁcients (yr	1).
a. Write the remaining reservoir mass balances. Namely,
write equations for dmSOt
dt
; dmIDOt
dt
; dmVt
dt
;
and dmSt
dt
b. Express the system in state-space form.
Atmosphere
Surface ocean
Intermediate and deep ocean
Ocean sink
Vegetation
Soil
Land sink
mV
mS
mA
mSO
mIDO
kL2
kL1
kL4
kO1
kO2
kO3
kO4
kL3
uE (t )
FIGURE P3.16
Global carban cycle13
28. Given the photovoltaic system described in Problem 65
in Chapter 2 (Agee, 2012) and deﬁning the following
state variables, system input and output as y  x1  θm;
x2  _θm; x3  ia, and u  ea, write a state-space
representation of the system in the form _x  Ax  Bu;
y  Cx.
29. A single-pole oil cylinder valve contains a spool that
regulates hydraulic pressure, which is then applied to a
piston that drives a load. The transfer function relating
piston displacement, Xps to spool displacement from
equilibrium, Xvs, is given by (Qu, 2010):
Gs  Xps
Xvs 
Kqω2
h=A1
ss2  2ςωhs  ω2
h
where A1  effective area of a the valve’s chamber,
Kq  rate of change of the load ﬂow rate with a
change in displacement, and ωh  the natural fre-
quency of the hydraulic system. Find the state-space
representation of the system, where the state variables
are the phase variables associated with the piston.
30. Figure P3.17 shows a free-body diagram of an
inverted pendulum, mounted on a cart with a mass,
M. The pendulum has a point mass, m, concentrated at
the upper end of a rod with zero mass, a length, l, and a
frictionless hinge. A motor drives the cart, applying a
horizontal force, u(t). A gravity force, mg, acts on m at
all times. The pendulum angle relative to the y-axis, θ,
its angular speed, _θ
´, the horizontal position of the
cart, x, and its speed, x´, were selected to be the state
variables. The state-space equations derived were
heavily nonlinear.14 They were then linearized around
the stationary point, x0 = 0 and u0 = 0, and manipulated
to yield the following open-loop model written in
perturbation form:
d
dt δx  Aδx  Bδu
However, since x0 = 0 and u0 = 0, then let: x  x0  δx 
δx and u  u0  δu  δu. Thus the state equation may
be rewritten as (Prasad, 2012):
_x  Ax  Bu
where
A 
0
1
0
0
M  mg
Ml
0
0
0
0
0
0
1
	 mg
M
0
0
0
2
66664
3
77775
and B 
0
	1
Ml
0
1
M
2
666664
3
777775
14 As noted in the introduction to Section 3.7, the techniques for solving
such nonlinear state equations are beyond the scope of this course.
13 Li, S., Jarvis, A.J., and Leedal, D.T. Are response function representa-
tions of the global carbon cycle ever interpretable? Tellus, vol. 61B, 2009,
pp. 361–371. (Fig. 1 p. 363).
Problems
151

Assuming the output to be the horizontal position of
m  xm  x  l sin θ  x  lθ for a small angle, θ, the
output equation becomes:
y  lθ  x  Cx 
l
0
1
0


θ
_θ
x
_x
2
6664
3
7775
Given that: M = 2.4 kg, m = 0.23 kg,
l = 0.36 m, g = 9.81 m/s2, use
MATLAB to ﬁnd the transfer
function, G(s)= Y(s)/U(s)= Xm(s)/U(s).
lsinθ
lcosθ
θ
m
mg
0
x
y
x
u
M
P
l
FIGURE P3.17
Motor-driven inverted pendulum
cart system15
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
31. Control of HIV/AIDS. Problem 67 in Chapter 2
introducedamodelforHIVinfection.Ifretroviraldrugs,
RTIsandPIsasdiscussedinProblem22inChapter1,are
used, the model is modiﬁed as follows (Craig, 2004):
dT
dt  s 	 dT 	 1 	 u1 βTv
dT*
dt  1 	 u1 βTv 	 μT*
dv
dt  1 	 u2kT* 	 cv
where 0  u1  1, 0  u2  1 represent the effectiveness
of the RTI and PI medication, respectively.
a. Obtain a state-space representation of the HIV/AIDS
model by linearizing the equations about the
T0; T*
0; v0 
cμ
βk ; s
μ 	 cd
βk ; sk
cμ 	 d
β


equilibrium
with
u10  u20  0.
This
equilibrium
represents the asymptomatic HIV-infected patient.
Note that each one of the above equations is of the
form _xi  f ixi; u1; u2; i  1; 2; 3.
b. If Matrices A and B are given by
A 
@f 1
@x1
@f 1
@x2
@f 1
@x3
@f 2
@x1
@f 2
@x2
@f 2
@x3
@f 3
@x1
@f 3
@x2
@f 3
@x3
2
666666664
3
777777775
T0;T*
0;v0
;
B 
@f 1
@u1
@f 1
@u2
@f 2
@u1
@f 2
@u2
@f 3
@u1
@f 3
@u2
2
666666664
3
777777775
T0;T*
0;v0
and we are interested in the number of free HIV viruses
as the system’s output,
C 
0
0
1


show that
A 
	d  βv0
0
	βT0
βv0
	μ
βT0
0
k
	c
2
64
3
75;
B 
βT0v0
0
	βT0v0
0
0
	kT*
0
2
64
3
75
c. Typical parameter values and descriptions for the
HIV/AIDS model are shown in the following table.
Substitute the values from the table into your model and
write as
_x  Ax  Bu
y  Cx
Table of HIV/AIDS Model Parameters16
32. Hybrid vehicle. For Problem 23 in Chapter 1 we
developed the functional block diagrams for the
cruise control of serial, parallel, and split-power
t
Time
days
d
Death of uninfected T cells
0.02/day
k
Rate of free viruses produced per
infected T cell
100 counts/cell
s
Source term for uninfected T cells
10/mm3/day
β
Infectivity rate of free virus particles
2:4  10	5/mm3/day
c
Death rate of viruses
2.4/day
μ
Death rate of infected T cells
0.24/day
15 Prasad, L., Tyagi, B.,and Gupta, H. Modeling & Simulation for Optimal
Control of Nonlinear Inverted Pendulum Dynamical System using PID
Controller & LQR. IEEE Computer Society Sixth Asia Modeling Sympo-
sium, 2012, pp. 138–143. Figure 1 p. 139. Reproduced with permission of
IEEE in the format Republish in a book via Copyright Clearance Center.
16 Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education
Into the Electrical Engineering Curriculum at the University of Pretoria.
IEEE Transactions on Education, vol. 47, no. 1, February 2004, pp. 65–73.
Table II, p. 67. Modelling Symposium (AMS), 2012 Sixth Asia by IEEE.
Reproduced with permission of IEEE in the format Republish in a book via
Copyright Clearance Center.
152
Chapter 3
Modeling in the Time Domain

hybrid electric vehicles (HEV). Those diagrams
showed that the engine or electric motor or both
may propel the vehicle. When electric motors are the
sole providers of the motive force, the forward paths
of all HEV topologies are similar. In general, such a
forward path can be represented (Preitl, 2007) by a
block diagram similar to the one of Figure P3.18.
Assume the motor to be an armature-controlled dc
motor. In this diagram, KA is the power ampliﬁer gain;
Ge(s) is the transfer function of the motor electric circuit
and consists of a series inductor and resistor, La and Ra,
respectively; Kt is the motor torque constant; Jtot, is the
sum of the motor inertia, Jm, the inertias of the vehicle,
Jveh, and the two driven wheels, Jw, both of which
are reﬂected to the motor shaft; kf is the coefﬁcient of
viscous friction; and kb is the back emf constant.
The input variables are uc(t), the command
voltage from the electronic control unit and Tc(t),
the load torque. The output variables in this block
diagram are the motor angular speed, ω(t), and its
armature current, Ia(t).
a. Write the basic time-domain equations that charac-
terize the relationships between the state, input, and
output variables for the block diagram of Figure
P3.18, given that the state variables are the motor
armature current, Ia(t), and angular speed, ω(t).
b. Write the resulting state-space equations and then
represent them in matrix form. Regard the load
torque Tc(t) as an extra input to the system. Thus, in
your resulting state-space representation, the system
will have two inputs and two outputs.
33. Parabolic trough collector. A transfer function model
from ﬂuid ﬂow to ﬂuid temperature for a parabolic trough
collectorwasintroducedinProblem69,Chapter2.Amore
detailed model for the response of this system is given
under speciﬁc operation conditions (Camacho, 2012) by:
H
Q s 
137:2  10	6
s2  0:0224s  196  10	6 e	39s
Find an appropriate state-space representation for the
system.
Angular 
speed,
ω(t)
Motive 
torque,
T(t)
s
Jtot
1
+
_
_
Vehicle
dynamics
kf
Load
torque,
Tc (t)
kb
Friction
torque,
Tf (t)
Δu(t)
Ge(s)
KA
Control 
command, 
uc(t)
Kt
Armature 
current,
Ia(t)
Ia(t)
Amplifier 
output 
voltage, 
ua(t)
Back emf, 
eb(t)
_
+
FIGURE P3.18
Block diagram representation of an HEV forward path17
Cyber Exploration Laboratory
Experiment 3.1
Objectives
To learn to use MATLAB to (1) generate an LTI state-space representation
of a system and (2) convert an LTI state-space representation of a system to an LTI transfer
function.
Minimum Required Software Packages
MATLAB and the Control System
Toolbox
17 Preitl, Z., Bauer, P., and J. Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid Vehicles. 4th International Symposium on Applied
Computational Intelligence and Informatics. IEEE, 2007. Adapted from Figure 2, p. 2
Cyber Exploration Laboratory
153

Prelab
1. Derive the state-space representation of the translational mechanical system shown
in Skill-Assessment Exercise 3.2 if you have not already done so. Consider the output to
be x3(t).
2. Derive the transfer function, X3s
Fs , from the equations of motion for the translational
mechanical system shown in Skill-Assessment Exercise 3.2.
Lab
1. Use MATLAB to generate the LTI state-space representation derived in Prelab 1.
2. Use MATLAB to convert the LTI state-space representation found in Lab 1 to the LTI
transfer function found in Prelab 2.
Postlab
1. Compare your transfer functions as found from Prelab 2 and Lab 2.
2. Discuss the use of MATLAB to create LTI state-space representations and the use of
MATLAB to convert these representations to transfer functions.
Experiment 3.2
Objectives
To learn to use MATLAB and the Symbolic Math Toolbox to (1) ﬁnd a
symbolic transfer function from the state-space representation and (2) ﬁnd a state-space
representation from the equations of motion.
Minimum Required Software Packages
MATLAB,theSymbolicMathToolbox,
and the Control System Toolbox
Prelab
1. Perform Prelab 1 and Prelab 2 of Experiment 3.1 if you have not already done so.
2. Using the equation Ts  CsI 	 A	1B to ﬁnd a transfer function from a state-space
representation, write a MATLAB program using the Symbolic Math Toolbox to ﬁnd the
symbolic transfer function from the state-space representation of the translational
mechanical system shown in Skill-Assessment Exercise 3.2 and found as a step in
Prelab 1.
3. Using the equations of motion of the translational mechanical system shown in
Skill-Assessment Exercise 3.2 and found in Prelab 1, write a symbolic MATLAB
program to ﬁnd the transfer function, X3s
Fs , for this system.
Lab
1. Run the programs composed in Prelabs 2 and 3 and obtain the symbolic transfer
functions by the two methods.
Postlab
1. Compare the symbolic transfer function obtained from Ts  CsI 	 A	1B with the
symbolic transfer function obtained from the equations of motion.
2. Discuss the advantages and disadvantages between the two methods.
3. Describe how you would obtain an LTI state-space representation and an LTI transfer
function from your symbolic transfer function.
Experiment 3.3
Objectives
To learn to use LabVIEW to (1) generate state-space representations
of transfer functions, (2) generate transfer functions from state-space representations,
and (3) verify that there are multiple state-space representations for a transfer function.
154
Chapter 3
Modeling in the Time Domain

Bibliography
Agee, J. T., and Jimoh, A. A. Flat controller design for hardware-cost reduction in polar-axis
photovoltaic systems. Solar Energy, vol. 86, pp. 452–462, 2012.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Carlson, L. E., and Griggs, G. E. Aluminum Catenary System Quarterly Report. Technical Report
Contract Number DOT-FR-9154, U.S. Department of Transportation, 1980.
Cereijo, M. R. State Variable Formulations. Instruments and Control Systems, December 1969,
pp. 87–88.
Chiu, D. K., and Lee, S. Design and Experimentation of a Jump Impact Controller. IEEE Control
Systems, June 1997, pp. 99–106.
Cochin, I. Analysis and Design of Dynamic Systems. Harper & Row, New York, 1980.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, vol.
47, no.1, February 2004, pp. 65–73.
Elkins,J.A.A Method forPredicting theDynamicResponse ofa Pantograph Running atConstantSpeed
under a Finite Length of Overhead Equipment. Technical Report TN DA36, British Railways, 1976.
Fagergren, A., Ekeberg, Ö., and Forssberg, H. Precision Grip Force Dynamics: A System
Identiﬁcation Approach. IEEE Transactions on Biomedical Engineering, vol. 47, no.10,
2000, pp. 1366–1375.
Minimum Required Software Packages
LabVIEW, the LabVIEW Control
Design and Simulation Module, and the MathScript RT Module.
Prelab
1. Study Appendix D, Sections D.1 through D.4, Example D.1.
2. Solve Skill-Assessment Exercise 3.3.
3. Use your solution to Prelab 2 and convert back to the transfer function.
Lab
1. Use LabVIEW to convert the transfer function, Gs 
2s  1
s2  7s  9, into a state-space
representation using both the graphical and MathScript approaches. The front panel will
contain controls for the entry of the transfer function and indicators of the transfer
function and the two state-space results. Functions for this experiment can be found in
the following palettes: (1) Control Design and Simulation/Control Design/Model
Construction,(2)Control DesignandSimulation/Control Design/Model Conversion,
and (3) Programming/Structures Hint: Coefﬁcients are entered in reverse order when
using MathScript with MATLAB.
2. Use LabVIEW to convert all state-space representations found in Lab 1 to a transfer
function. All state-space conversions should yield the transfer function given in Lab 1.
The front panel will contain controls for entering state-space representations and
indicators of the transfer function results as well as the state equations used.
Postlab
1. Describe any correlation found between the results of Lab 1 and calculations made in the
Prelab.
2. Describe and account for any differences between the results of Lab 1 and calculations
made in the Prelab.
3. Explain the results of Lab 2 and draw conclusions from the results.
Bibliography
155

Franklin, G. F., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems.
Addison-Wesley, Reading, MA, 1986.
Hong, J., Tan, X., Pinette, B., Weiss, R., and Riseman, E. M. Image-Based Homing. IEEE Control
Systems, February 1992, pp. 38–45.
Inigo, R. M. Observer and Controller Design for D.C. Positional Control Systems Using
State Variables. Transactions, Analog/Hybrid Computer Educational Society, December 1974,
pp. 177–189.
Kailath, T. Linear Systems. Prentice Hall, Upper Saddle River, NJ, 1980.
Kandel, A. Analog Simulation of Groundwater Mining in Coastal Aquifers. Transactions, Analog/
Hybrid Computer Educational Society, November 1973, pp. 175–183.
Kyrylov, V., Severyanova, L. A., and Vieira, A. Modeling Robust Oscillatory Behavior of the
Hypothalamic-Pituitary-Adrenal Axis. IEEE Transactions on Biomedical Engineering, vol. 52,
no.12, 2005, pp. 1977–1983.
Li, S., Jarvis, A.J., and Leedal, D.T., Are Response Function Representations of the Global Carbon
Cycle Ever Interpretable? Tellus, vol. 61B, 2009, pp. 361–371.
Liceaga-Castro, E., van der Molen, G. M. Submarine H∞Depth Control Under Wave Disturbances.
IEEE Transactions on Control Systems Technology, vol. 3, no.3, 1995, pp. 338–346.
Lordi, N. G. Analog Computer Generated Lecture Demonstrations in Pharmacokinetics. Transactions,
Analog/Hybrid Computer Educational Society, November 1972, pp. 217–222.
Philco Technological Center. Servomechanism Fundamentals and Experiments. Prentice Hall, Upper
Saddle River, NJ, 1980.
Prasad, L., Tyagi, B., and Gupta, H. Modeling & Simulation for Optimal Control of Nonlinear
Inverted Pendulum Dynamical System using PID Controller & LQR. IEEE Computer Society Sixth
Asia Modeling Symposium, 2012, pp. 138–143.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Intelligence and Informatics.
IEEE. 2007.
Qu, S-G., Zhang, Y., Ye, Z., Shao, M., and Xia, W. Modeling and Simulation of the Proportional
Valve Control System for the Turbocharger. IEEE, 2010.
Riegelman, S. et al. Shortcomings in Pharmacokinetic Analysis by Conceiving the Body to Exhibit
Properties of a Single Compartment. Journal of Pharmaceutical Sciences, vol. 57, no.1, 1968,
pp. 117–123.
Tarin, C., Teufel, E., Picó, J., Bondia, J., and Pﬂeiderer, H. J. Comprehensive Pharmacokinetic Model
of Insulin Glargine and Other Insulin Formulations. IEEE Transactions on Biomedical Engineering,
vol. 52, no.12, 2005, pp. 1994–2005.
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New York,
1968.
156
Chapter 3
Modeling in the Time Domain

Time Response
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Use poles and zeros of transfer functions to determine the time response of a
control system (Sections 4.1–4.2)
• Describe quantitatively the transient response of ﬁrst-order systems (Section 4.3)
• Write the general response of second-order systems given the pole location
(Section 4.4)
• Find the damping ratio and natural frequency of a second-order system (Section 4.5)
• Find the settling time, peak time, percent overshoot, and rise time for an
underdamped second-order system (Section 4.6)
• Approximate higher-order systems and systems with zeros as ﬁrst- or second-
order systems (Sections 4.7–4.8)
• Describe the effects of nonlinearities on the system time response (Section 4.9)
• Find the time response from the state-space representation (Sections 4.10–4.11)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to (1) predict, by inspection, the form of the
open-loop angular velocity response of the load to a step voltage input to

4
157

the power ampliﬁer; (2) describe quantitatively the transient response
of the open-loop system; (3) derive the expression for the open-loop
angular velocity output for a step voltage input; (4) obtain the open-loop
state-space representation; (5) plot the open-loop velocity step response
using a computer simulation.
• Given the block diagram for the Unmanned Free-Swimming Submersible (UFSS)
vehicle’s pitch control system shown on the back endpapers, you will be able to
predict, ﬁnd, and plot the response of the vehicle dynamics to a step input
command. Further, you will be able to evaluate the effect of system zeros and
higher-order poles on the response. You also will be able to evaluate the roll
response of a ship at sea.
4.1 Introduction
In Chapter 2, we saw how transfer functions can represent linear, time-invariant systems.
In Chapter 3, systems were represented directly in the time domain via the state and output
equations. After the engineer obtains a mathematical representation of a subsystem,
the subsystem is analyzed for its transient and steady-state responses to see if these
characteristics yield the desired behavior. This chapter is devoted to the analysis of system
transient response.
It may appear more logical to continue with Chapter 5, which covers the modeling
of closed-loop systems, rather than to break the modeling sequence with the analysis
presented here in Chapter 4. However, the student should not continue too far into system
representation without knowing the application for the effort expended. Thus, this chapter
demonstrates applications of the system representation by evaluating the transient
response from the system model. Logically, this approach is not far from reality, since
the engineer may indeed want to evaluate the response of a subsystem prior to inserting it
into the closed-loop system.
After describing a valuable analysis and design tool, poles and zeros, we begin
analyzing our models to ﬁnd the step response of ﬁrst- and second-order systems. The order
refers to the order of the equivalent differential equation representing the system—the
order of the denominator of the transfer function after cancellation of common factors
in the numerator or the number of simultaneous ﬁrst-order equations required for the
state-space representation.
4.2 Poles, Zeros, and System Response
The output response of a system is the sum of two responses: the forced response and the
natural response.1 Although many techniques, such as solving a differential equation or
taking the inverse Laplace transform, enable us to evaluate this output response, these
techniques are laborious and time-consuming. Productivity is aided by analysis and design
techniques that yield results in a minimum of time. If the technique is so rapid that we feel
we derive the desired result by inspection, we sometimes use the attribute qualitative to
describe the method. The use of poles and zeros and their relationship to the time response of
a system is such a technique. Learning this relationship gives us a qualitative “handle” on
problems. The concept of poles and zeros, fundamental to the analysis and design of control
1 The forced response is also called the steady-state response or particular solution. The natural response is also
called the homogeneous solution.
158
Chapter 4
Time Response

systems, simpliﬁes the evaluation of a system’s response. The reader is encouraged to
master the concepts of poles and zeros and their application to problems throughout this
book. Let us begin with two deﬁnitions.
Poles of a Transfer Function
The poles of a transfer function are (1) the values of the Laplace transform variable, s, that
cause the transfer function to become inﬁnite or (2) any roots of the denominator of the
transfer function that are common to roots of the numerator.
Strictly speaking, the poles of a transfer function satisfy part (1) of the deﬁnition.
For example, the roots of the characteristic polynomial in the denominator are values of
s that make the transfer function inﬁnite, so they are thus poles. However, if a factor of
the denominator can be canceled by the same factor in the numerator, the root of this
factor no longer causes the transfer function to become inﬁnite. In control systems, we
often refer to the root of the canceled factor in the denominator as a pole even though
the transfer function will not be inﬁnite at this value. Hence, we include part (2) of the
deﬁnition.
Zeros of a Transfer Function
The zeros of a transfer function are (1) the values of the Laplace transform variable, s, that
cause the transfer function to become zero, or (2) any roots of the numerator of the transfer
function that are common to roots of the denominator.
Strictly speaking, the zeros of a transfer function satisfy part (1) of this deﬁnition. For
example, the roots of the numerator are values of s that make the transfer function zero and
are thus zeros. However, if a factor of the numerator can be canceled by the same factor in
the denominator, the root of this factor no longer causes the transfer function to become
zero. In control systems, we often refer to the root of the canceled factor in the numerator as
a zero even though the transfer function will not be zero at this value. Hence, we include part
(2) of the deﬁnition.
Poles and Zeros of a First-Order System: An Example
Given the transfer function G(s) in Figure 4.1(a), a pole exists at s  5, and a zero exists at
2. These values are plotted on the complex s-plane in Figure 4.1(b), using an × for the pole
and a ○for the zero. To show the properties of the poles and zeros, let us ﬁnd the unit
step response of the system. Multiplying the transfer function of Figure 4.1(a) by a step
function yields
Cs  s  2
ss  5  A
s 
B
s  5  2=5
s  3=5
s  5
4.1
where
A  s  2
s  5

s®0
 2
5
B  s  2
s

s®5
 3
5
Thus,
ct  2
5  3
5 e5t
4.2
4.2 Poles, Zeros, and System Response
159

From the development summarized in Figure 4.1(c), we draw the following
conclusions:
1. A pole of the input function generates the form of the forced response (that is, the pole at
the origin generated a step function at the output).
2. A pole of the transfer function generates the form of the natural response (that is, the pole
at 5 generated e5t).
3. A pole on the real axis generates an exponential response of the form eαt, where α is
the pole location on the real axis. Thus, the farther to the left a pole is on the negative real
axis, the faster the exponential transient response will decay to zero (again, the pole at 5
generated e5t; see Figure 4.2 for the general case).
G(s) 
C(s)
1
s
(b)
(a)
jω
s-plane
1
s
s + 2
jω
jω
jω
Input pole
System zero
System pole
Output
transform
2/5
+
3/5
s + 5
2
5
3
5e–5t
Output
time
response
+
Forced response
Natural response
(c)
–5
R(s) = 
s + 2
1
s + 5
C(s) =
c(t) =
s
–2
–5
s-plane
s-plane
s-plane
s + 5
–2
σ
σ
σ
σ
FIGURE 4.1
a. System showing input and output; b. pole-zero plot of the system; c. evolution of a
system response. Follow blue arrows to see the evolution of the response component generated by the
pole or zero.
Pole at –α generates
response Ke–αt
s-plane
jω
–α
σ
FIGURE 4.2
Effect of a real-axis pole upon transient response.
160
Chapter 4
Time Response

4. The zeros and poles generate the amplitudes for both the forced and natural responses
(this can be seen from the calculation of A and B in Eq. (4.1)).
Let us now look at an example that demonstrates the technique of using poles to obtain
the form of the system response. We will learn to write the form of the response by
inspection. Each pole of the system transfer function that is on the real axis generates an
exponential response that is a component of the natural response. The input pole generates
the forced response.
Example 4.1
Evaluating Response Using Poles
Evaluating Response Using Poles
PROBLEM: Given the system of Figure 4.3, write the output, c(t), in
general terms. Specify the forced and natural parts of the solution.
SOLUTION: By inspection, each system pole generates an exponential
as part of the natural response. The input’s pole generates the forced
response. Thus,
C s  
K1
s
Forced
response
 K2
s  2  K3
s  4  K4
s  5
Natural
response
4.3
Taking the inverse Laplace transform, we get
ct 
K1
Forced
response
 K2e2t  K3e4t  K4e5t
Natural
response
4.4
(s + 2)(s + 4)(s + 5)
C(s)
1
s
R(s) = 
(s + 3)
FIGURE 4.3
System for Example 4.1
Skill-Assessment Exercise 4.1
PROBLEM: A system has a transfer function, Gs 
10s  4s  6
s  1s  7s  8s  10.
Write, by inspection, the output, c(t), in general terms if the input is a unit step.
ANSWER: ct  A  Bet  Ce7t  De8t  Ee10t
In this section, we learned that poles determine the nature of the time response:
Poles of the input function determine the form of the forced response, and poles
of the transfer function determine the form of the natural response. Zeros and poles
of the input or transfer function contribute to the amplitudes of the component
parts of the total response. Finally, poles on the real axis generate exponential
responses.
4.2 Poles, Zeros, and System Response
161

4.3 First-Order Systems
We now discuss ﬁrst-order systems without zeros to deﬁne a performance
speciﬁcation for such a system. A ﬁrst-order system without zeros can be
described by the transfer function shown in Figure 4.4(a). If the input is a
unit step, where Rs  1=s, the Laplace transform of the step response is
C(s), where
Cs  RsGs 
a
ss  a
4.5
Taking the inverse transform, the step response is given by
ct  cf t  cnt  1  eat
4.6
where the input pole at the origin generated the forced response cf t  1, and the system
pole at a, as shown in Figure 4.4(b), generated the natural response cnt  eat.
Equation (4.6) is plotted in Figure 4.5.
Let us examine the signiﬁcance of parameter a, the only parameter needed to describe
the transient response. When t  1=a,
eatjt1=a  e1  0:37
4.7
or
ctjt1=a  1  eatjt1=a  1  0:37  0:63
4.8
We now use Eqs. (4.6), (4.7), and (4.8) to deﬁne three transient response performance
speciﬁcations.
Time Constant
We call 1/a the time constant of the response. From Eq. (4.7), the time constant can be
described as the time for eat to decay to 37% of its initial value. Alternately, from Eq. (4.8)
the time constant is the time it takes for the step response to rise to 63% of its ﬁnal value
(see Figure 4.5).
a
R(s)  
(a)
jω
–a
(b)
s + a
G(s)
C(s)
s-plane
σ
FIGURE 4.4
a. First-order system; b. pole plot
Virtual Experiment 4.1
First-Order
Transfer Function
Put theory into practice and ﬁnd
a ﬁrst-order transfer function
representing the Quanser
Rotary Servo. Then validate the
model by simulating it in
LabVIEW. Such a servo motor
is used in mechatronic gadgets
such as cameras.
Virtual experiments are found
on Learning Space.
t
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Ts
Tr
a
1
a
2
a
3
a
4
a
5
Initial slope =
c(t)
1
time constant
63% of final value
at t = one time constant
= a
FIGURE 4.5
First-order system response to a unit step
162
Chapter 4
Time Response

The reciprocal of the time constant has the units (1/seconds), or frequency. Thus, we
can call the parameter a the exponential frequency. Since the derivative of eat is a when
t  0, a is the initial rate of change of the exponential at t  0. Thus, the time constant can be
considered a transient response speciﬁcation for a ﬁrst-order system, since it is related to the
speed at which the system responds to a step input.
The time constant can also be evaluated from the pole plot (see Figure 4.4(b)). Since
the pole of the transfer function is at a, we can say the pole is located at the reciprocal of
the time constant, and the farther the pole from the imaginary axis, the faster the transient
response.
Let us look at other transient response speciﬁcations, such as rise time, Tr, and settling
time, Ts, as shown in Figure 4.5.
Rise Time, Tr
Rise time is deﬁned as the time for the waveform to go from 0.1 to 0.9 of its ﬁnal value. Rise
time is found by solving Eq. (4.6) for the difference in time at ct  0:9 and ct  0:1.
Hence,
Tr  2:31
a
 0:11
a
 2:2
a
4.9
Settling Time, Ts
Settling time is deﬁned as the time for the response to reach, and stay within, 2% of its
ﬁnal value.2 Letting ct  0:98 in Eq. (4.6) and solving for time, t, we ﬁnd the settling
time to be
Ts  4
a
4.10
First-Order Transfer Functions via Testing
Often it is not possible or practical to obtain a system’s transfer function analytically.
Perhaps the system is closed, and the component parts are not easily identiﬁable. Since the
transfer function is a representation of the system from input to output, the system’s step
response can lead to a representation even though the inner construction is not known. With
a step input, we can measure the time constant and the steady-state value, from which the
transfer function can be calculated.
Consider a simple ﬁrst-order system, Gs  K=s  a, whose step response is
Cs 
K
ss  a  K=a
s
 K=a
s  a
4.11
If we can identify K and a from laboratory testing, we can obtain the transfer function of the
system.
For example, assume the unit step response given in Figure 4.6. We determine that it
has the ﬁrst-order characteristics we have seen thus far, such as no overshoot and nonzero
initial slope. From the response, we measure the time constant, that is, the time for the
amplitude to reach 63% of its ﬁnal value. Since the ﬁnal value is about 0.72, the time
constant is evaluated where the curve reaches 0:63  0:72  0:45, or about 0.13 second.
Hence, a  1=0:13  7:7.
2 Strictly speaking, this is the deﬁnition of the 2% setting time. Other percentages, for example 5%, also can be used.
We will use settling time throughout the book to mean 2% settling time.
4.3 First-Order Systems
163

To ﬁnd K, we realize from Eq. (4.11) that the forced response reaches a steady-state
value of K=a  0:72. Substituting the value of a, we ﬁnd K  5:54. Thus, the transfer
function for the system is Gs  5:54=s  7:7. It is interesting to note that the response of
Figure 4.6 was generated using the transfer function Gs  5=s  7.
4.4 Second-Order Systems: Introduction
Let us now extend the concepts of poles and zeros and transient response to second-order
systems. Compared to the simplicity of a ﬁrst-order system, a second-order system exhibits
a wide range of responses that must be analyzed and described. Whereas varying a
ﬁrst-order system’s parameter simply changes the speed of the response, changes in the
parameters of a second-order system can change the form of the response. For example, a
second-order system can display characteristics much like a ﬁrst-order system, or, depending
on component values, display damped or pure oscillations for its transient response.
To become familiar with the wide range of responses before formalizing our
discussion in the next section, we take a look at numerical examples of the second-order
system responses shown in Figure 4.7. All examples are derived from Figure 4.7(a), the
general case, which has two ﬁnite poles and no zeros. The term in the numerator is simply a
scale or input multiplying factor that can take on any value without affecting the form of the
derived results. By assigning appropriate values to parameters a and b, we can show all
possible second-order transient responses. The unit step response then can be found using
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
Time (seconds)
Amplitude
FIGURE 4.6
Laboratory results of a system step response test
Skill-Assessment Exercise 4.2
PROBLEM: A system has a transfer function, Gs 
50
s  50. Find the time constant, Tc,
settling time, Ts, and rise time, Tr.
ANSWER: Tc  0:02 s; Ts  0:08 s; and Tr  0:044 s:
The complete solution is located at www.wiley.com/college/nise.
164
Chapter 4
Time Response

Cs  RsGs, where Rs  1=s, followed by a partial-fraction expansion and the inverse
Laplace transform. Details are left as an end-of-chapter problem, for which you may want to
review Section 2.2.
We now explain each response and show how we can use the poles to determine the
nature of the response without going through the procedure of a partial-fraction expansion
followed by the inverse Laplace transform.
Overdamped Response, Figure 4.7(b)
For this response,
Cs 
9
ss2  9s  9 
9
ss  7:854s  1:146
4.12
This function has a pole at the origin that comes from the unit step input and two real poles
that come from the system. The input pole at the origin generates the constant forced
response; each of the two system poles on the real axis generates an exponential natural
response whose exponential frequency is equal to the pole location. Hence, the output
initially could have been written as ct  K1  K2e7:854t  K3e1:146t. This response,
b
s2 + as + b
1
2
3
4
5
t
0.5
1.0
c(t) c(t) = 1 + 0.171e–7.854t  – 
       
9
G(s)
C(s)
General
System
(a)
(b)
(c)
(d)
(e)
Overdamped
Pole-zero plot
G(s)
–7.854 –1.146
0
0.8
1.2
c(t) = 1–e–t(cos  8t +    sin  8t)
9
G(s)
C(s)
Underdamped
 s-plane
–1
0.4
=1–1.06e–t cos( 8t–19.47°)
1
2
3
4
5
t
0
1
2
c(t)
c(t) = 1 – cos 3t
9
G(s)
C(s)
Undamped
j3
1
2
3
4
5
t
0
1.0
c(t)
c(t) = 1 – 3te–3t – e–3t
9
G(s)
C(s)
Critically damped
–3
0.8
0.6
0.4
0.2
Response
jω
jω
jω
  s-plane
  s-plane
  s-plane
s2 + 9s  + 9
s2 + 2s + 9
s2 + 9
s2 + 6s + 9
jω
–j3
c(t)
C(s)
8
8
0.2
1.0
1.4
0.6
R(s) = 1
s
R(s) = 1
s
R(s) = 1
s
R(s) = 1
s
R(s) = 1
s
 8
 8
1
2
3
4
5
t
j
j
0
1.171e–1.146t
–
σ
σ
σ
σ
FIGURE 4.7
Second-order
systems, pole plots, and step
responses
4.4 Second-Order Systems: Introduction
165

shown in Figure 4.7(b), is called overdamped.3 We see that the poles tell us the form of the
response without the tedious calculation of the inverse Laplace transform.
Underdamped Response, Figure 4.7 (c)
For this response,
Cs 
9
ss2  2s  9
4.13
This function has a pole at the origin that comes from the unit step input and two complex poles
that come from the system. We now compare the response of the second-order system to the
poles that generated it. First we will compare the pole locationto the time function, and then we
willcomparethepolelocationtotheplot.FromFigure4.7(c),thepolesthatgeneratethenatural
responseare ats  1  j
ﬃﬃﬃ
8
p
.Comparing these valuestoc(t) inthe sameﬁgure, wesee thatthe
realpartofthepolematchestheexponentialdecayfrequencyofthesinusoid’samplitude,while
the imaginary part of the pole matches the frequency of the sinusoidal oscillation.
Let us now compare the pole location to the plot. Figure 4.8
shows a general, damped sinusoidal response for a second-order
system. The transient response consists of an exponentially decaying
amplitudegeneratedbytherealpartofthesystempoletimesasinusoidal
waveform generated by the imaginary part of the system pole. Thetime
constant of the exponential decay is equal to the reciprocal of the real
part of the system pole. The value of the imaginary part is the actual
frequency of the sinusoid, as depicted in Figure 4.8. This sinusoidal
frequency is given the name damped frequency of oscillation, ωd.
Finally, the steady-state response (unit step) was generated by the
input pole located at the origin. We call the type of response shown in
Figure 4.8 an underdamped response, one which approaches a steady-
state value via a transient response that is a damped oscillation.
The following example demonstrates how a knowledge of the
relationship between the pole location and the transient response
can lead rapidly to the response form without calculating the inverse
Laplace transform.
c(t)
Exponential decay generated by 
real part of complex pole pair
Sinusoidal oscillation generated by
imaginary part of complex pole pair
t
FIGURE 4.8
Second-order step response components
generated by complex poles
Example 4.2
Form of Underdamped Response Using Poles
Form of Underdamped Response Using Poles
PROBLEM: By inspection, write the form of the step response of the system in Figure 4.9.
SOLUTION: First we determine that the form of the forced response is a step.
Next we ﬁnd the form of the natural response. Factoring the denominator of the
transfer function in Figure 4.9, we ﬁnd the poles to be s  5  j13:23. The real
part, 5, is the exponential frequency for the damping. It is also the reciprocal
of the time constant of the decay of the oscillations. The imaginary part, 13.23,
is the radian frequency for the sinusoidal oscillations. Using our previous discussion
and Figure 4.7(c) as a guide, we obtain ct  K1  e5t K2 cos 13:23t  K3 sin 13:23t 
K1  K4e5tcos 13:23t  ϕ, where ϕ  tan1K3=K2; K4 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
K2
2  K2
3
p
, and c(t) is a
constant plus an exponentially damped sinusoid.
200
C(s)
s2 + 10s + 200
1
s
R(s) = 
FIGURE 4.9
System for
Example 4.2
3 So named because overdamped refers to a large amount of energy absorption in the system, which inhibits the
transient response from overshooting and oscillating about the steady-state value for a step input. As the energy
absorption is reduced, an overdamped system will become underdamped and exhibit overshoot.
166
Chapter 4
Time Response

We will revisit the second-order underdamped response in Sections 4.5 and 4.6,
where we generalize the discussion and derive some results that relate the pole position to
other parameters of the response.
Undamped Response, Figure 4.7(d)
For this response,
Cs 
9
ss2  9
4.14
This function has a pole at the origin that comes from the unit step input and two imaginary
poles that come from the system. The input pole at the origin generates the constant forced
response, and the two system poles on the imaginary axis at  j3 generate a sinusoidal
natural response whose frequency is equal to the location of the imaginary poles. Hence, the
output can be estimated as ct  K1  K4 cos3t  ϕ. This type of response, shown in
Figure 4.7(d), is called undamped. Note that the absence of a real part in the pole pair
corresponds to an exponential that does not decay. Mathematically, the exponential is
e0t  1.
Critically Damped Response, Figure 4.7 (e)
For this response,
Cs 
9
ss2  6s  9 
9
ss  32
4.15
This function has a pole at the origin that comes from the unit step input and two multiple
real poles that come from the system. The input pole at the origin generates the constant
forced response, and the two poles on the real axis at 3 generate a natural response
consisting of an exponential and an exponential multiplied by time, where the exponential
frequency is equal to the location of the real poles. Hence, the output can be estimated as
ct  K1  K2e3t  K3te3t. This type of response, shown in Figure 4.7(e), is called
critically damped. Critically damped responses are the fastest possible without the over-
shoot that is characteristic of the underdamped response.
We now summarize our observations. In this section we deﬁned the following natural
responses and found their characteristics:
1. Overdamped responses
Poles: Two real at σ1; σ2
Natural response: Two exponentials with time constants equal to the reciprocal of the
pole locations, or
ct  K1eσ1t  K2eσ2t
2. Underdamped responses
Poles: Two complex at σd  jωd
Natural response: Damped sinusoid with an exponential envelope whose time
constant is equal to the reciprocal of the pole’s real part. The radian frequency of
the sinusoid, the damped frequency of oscillation, is equal to the imaginary part of the
poles, or
ct  Aeσdt cosωdt  ϕ
4.4 Second-Order Systems: Introduction
167

3. Undamped responses
Poles: Two imaginary at  jω1
Natural response: Undamped sinusoid with radian frequency equal to the imaginary part
of the poles, or
ct  A cosω1t  ϕ
4. Critically damped responses
Poles: Two real at σ1
Natural response: One term is an exponential whose time constant is equal to the
reciprocal of the pole location. Another term is the product of time, t, and an exponential
with time constant equal to the reciprocal of the pole location, or
ct  K1eσ1t  K2teσ1t
The step responses for the four cases of damping discussed in this section are
superimposed in Figure 4.10. Notice that the critically damped case is the division between
the overdamped cases and the underdamped cases and is the fastest response without
overshoot.
0.5
1
1.5
2
2.5
3
3.5
4
0
0.2
0.4
0.6
0.8
1.0
1.2
1.4
1.6
1.8
2.0
Under-
damped
Critically
damped
Overdamped
c(t)
t
Undamped 
FIGURE 4.10
Step responses for second-order system damping cases
Skill-Assessment Exercise 4.3
PROBLEM: For each of the following transfer functions, write, by inspection, the
general form of the step response:
a. Gs 
400
s2  12s  400
b. Gs 
900
s2  90s  900
c. Gs 
225
s2  30s  225
d. Gs 
625
s2  625
168
Chapter 4
Time Response

In the next section, we will formalize and generalize our discussion of second-
order responses and deﬁne two speciﬁcations used for the analysis and design of
second-order systems. In Section 4.6, we will focus on the underdamped case and
derive some speciﬁcations unique to this response that we will use later for analysis and
design.
4.5 The General Second-Order System
Now that we have become familiar with second-order systems and their responses, we
generalize the discussion and establish quantitative speciﬁcations deﬁned in such a way that
the response of a second-order system can be described to a designer without the need for
sketching the response. In this section, we deﬁne two physically meaningful speciﬁcations
for second-order systems. These quantities can be used to describe the characteristics of the
second-order transient response just as time constants describe the ﬁrst-order system
response. The two quantities are called natural frequency and damping ratio. Let us
formally deﬁne them.
Natural Frequency, ωn
The natural frequency of a second-order system is the frequency of oscillation of the system
without damping. For example, the frequency of oscillation of a series RLC circuit with the
resistance shorted would be the natural frequency.
Damping Ratio, ζ
Before we state our next deﬁnition, some explanation is in order. We have already seen
that a second-order system’s underdamped step response is characterized by damped
oscillations. Our deﬁnition is derived from the need to quantitatively describe this
damped oscillation regardless of the time scale. Thus, a system whose transient
response goes through three cycles in a millisecond before reaching the steady state
would have the same measure as a system that went through three cycles in a
millennium before reaching the steady state. For example, the underdamped curve
in Figure 4.10 has an associated measure that deﬁnes its shape. This measure
remains the same even if we change the time base from seconds to microseconds or
to millennia.
A viable deﬁnition for this quantity is one that compares the exponential decay
frequency of the envelope to the natural frequency. This ratio is constant regardless of the
time scale of the response. Also, the reciprocal, which is proportional to the ratio of
the natural period to the exponential time constant, remains the same regardless of the
time base.
ANSWERS:
a. ct  A  Be6t cos19:08t  ϕ
b. ct  A  Be78:54t  Ce11:46t
c. ct  A  Be15t  Cte15t
d. ct  A  B cos25t  ϕ
The complete solution is located at www.wiley.com/college/nise.
4.5 The General Second-Order System
169

We deﬁne the damping ratio, ζ, to be
ζ  Exponential decay frequency
Natural frequency rad=second  1
2π
Natural period seconds
Exponential time constant
Let us now revise our description of the second-order system to reﬂect the new
deﬁnitions. The general second-order system shown in Figure 4.7(a) can be transformed to
show the quantities ζ and ωn. Consider the general system
Gs 
b
s2  as  b
4.16
Without damping, the poles would be on the jω-axis, and the response would be an
undamped sinusoid. For the poles to be purely imaginary, a  0. Hence,
Gs 
b
s2  b
4.17
By deﬁnition, the natural frequency, ωn, is the frequency of oscillation of this system. Since
the poles of this system are on the jω-axis at  j
ﬃﬃﬃ
b
p
,
ωn 
ﬃﬃﬃ
b
p
4.18
Hence,
b  ω2
n
4.19
Now what is the term a in Eq. (4.16)? Assuming an underdamped system, the
complex poles have a real part, σ, equal to a=2. The magnitude of this value is then the
exponential decay frequency described in Section 4.4. Hence,
ζ  Exponential decay frequency
Natural frequency rad=second  jσj
ωn
 a=2
ωn
4.20
from which
a  2ζωn
4.21
Our general second-order transfer function ﬁnally looks like this:
Gs 
ω2
n
s2  2ζωns  ω2
n
4.22
In the following example we ﬁnd numerical values for ζ and ωn by matching the
transfer function to Eq. (4.22).
170
Chapter 4
Time Response

Now that we have deﬁned ζ and ωn, let us relate these quantities to the pole location.
Solving for the poles of the transfer function in Eq. (4.22) yields
s1; 2  ζωn  ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ζ2  1
q
4.24
From Eq. (4.24) we see that the various cases of second-order response are a function of ζ;
they are summarized in Figure 4.11.4
Example 4.3
Finding ζ and ωn For a Second-Order System
Finding ζ and ωn For a Second-Order System
PROBLEM: Given the transfer function of Eq. (4.23), ﬁnd ζ and ωn.
Gs 
36
s2  4:2s  36
4.23
SOLUTION: Comparing Eq. (4.23) to (4.22), ω2
n  36, from which ωn  6. Also,
2ζωn  4:2. Substituting the value of ωn; ζ  0:35.
Poles
Step response
FIGURE 4.11
Second-order
response as a function of
damping ratio
4 The student should verify Figure 4.11 as an exercise.
4.5 The General Second-Order System
171

In the following example we ﬁnd the numerical value of ζ and determine the nature
of the transient response.
This section deﬁned two speciﬁcations, or parameters, of second-order systems:
natural frequency, ωn, and damping ratio, ζ. We saw that the nature of the response obtained
was related to the value of ζ. Variations of damping ratio alone yield the complete range of
overdamped, critically damped, underdamped, and undamped responses.
Skill-Assessment Exercise 4.4
PROBLEM: For each of the transfer functions in Skill-Assessment Exercise 4.3, do the
following: (1) Find the values of ζ and ωn; (2) characterize the nature of the response.
ANSWERS:
a. ζ  0:3; ωn  20; system is underdamped
b. ζ  1:5; ωn  30; system is overdamped
c. ζ  1; ωn  15; system is critically damped
d. ζ  0; ωn  25; system is undamped
The complete solution is located at www.wiley.com/college/nise.
Example 4.4
Characterizing Response from the Value of ζ
Characterizing Response from the Value of ζ
PROBLEM: For each of the systems shown in Figure 4.12, ﬁnd the value of ζ and report
the kind of response expected.
SOLUTION: First match the form of these systems to the forms shown in Eqs. (4.16) and
(4.22). Since a  2ζωn and ωn 
ﬃﬃﬃ
b
p
,
ζ 
a
2
ﬃﬃﬃ
b
p
4.25
Using the values of a and b from each of the systems of Figure 4.12, we ﬁnd
ζ  1:155 for system (a), which is thus overdamped, since ζ > 1; ζ  1 for system (b),
which is thus critically damped; and ζ  0:894 for system (c), which is thus underdamped,
since ζ < 1.
12
(a)
16
(b)
20
C(s)
(c)
s2 + 8s + 12
C(s)
C(s)
R(s)
R(s)
R(s)
s2 + 8s + 16
s2 + 8s + 20
FIGURE 4.12
Systems for Example 4.4
172
Chapter 4
Time Response

4.6 Underdamped Second-Order Systems
Now that we have generalized the second-order transfer function in terms of ζ and ωn, let us
analyze the step response of an underdamped second-order system. Not only will this
response be found in terms of ζ and ωn, but more speciﬁcations indigenous to the
underdamped case will be deﬁned. The underdamped second-order system, a common
model for physical problems, displays unique behavior that must be itemized; a detailed
description of the underdamped response is necessary for both analysis and design. Our ﬁrst
objective is to deﬁne transient speciﬁcations associated with underdamped responses. Next
we relate these speciﬁcations to the pole location, drawing an association between pole
location and the form of the underdamped second-order response. Finally, we tie the pole
location to system parameters, thus closing the loop: Desired response generates required
system components.
Let us begin by ﬁnding the step response for the general second-order system of
Eq. (4.22). The transform of the response, C(s), is the transform of the input times the
transfer function, or
Cs 
ω2
n
ss2  2ζωns  ω2
n  K1
s 
K2s  K3
s2  2ζωns  ω2
n
4.26
where it is assumed that ζ < 1 (the underdamped case). Expanding by partial fractions,
using the methods described in Section 2.2, Case 3, yields
Cs  1
s 
s  ζωn 
ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
q
s  ζωn2  ω2
n1  ζ2
4.27
Taking the inverse Laplace transform, which is left as an exercise for the student,
produces
ct  1  eζωnt
cos ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
t 
ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
sin ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
q
t
 
!
 1 
1
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
eζωnt cosωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
q
t  ϕ
4.28
where ϕ  tan1ζ=
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
.
A plot of this response appears in Figure 4.13 for various values of ζ, plotted along a
time axis normalized to the natural frequency. We now see the relationship between the
value of ζ and the type of response obtained: The lower the value of ζ, the more oscillatory
the response. The natural frequency is a time-axis scale factor and does not affect the nature
of the response other than to scale it in time.
We have deﬁned two parameters associated with second-order systems, ζ and ωn.
Other parameters associated with the underdamped response are rise time, peak time,
percent overshoot, and settling time. These speciﬁcations are deﬁned as follows (see also
Figure 4.14):
1. Rise time, Tr. The time required for the waveform to go from 0.1 of the ﬁnal value to 0.9
of the ﬁnal value.
2. Peak time, TP. The time required to reach the ﬁrst, or maximum, peak.
4.6 Underdamped Second-Order Systems
173

3. Percent overshoot, %OS. The amount that the waveform overshoots the steady-state, or
ﬁnal, value at the peak time, expressed as a percentage of the steady-state value.
4. Settling time, Ts. The time required for the transient’s damped oscillations to reach and
stay within  2% of the steady-state value.
Notice that the deﬁnitions for settling time and rise time are basically the same as the
deﬁnitions for the ﬁrst-order response. All deﬁnitions are also valid for systems of order
higher than 2, although analytical expressions for these parameters cannot be found unless
the response of the higher-order system can be approximated as a second-order system,
which we do in Sections 4.7 and 4.8.
Rise time, peak time, and settling time yield information about the speed of the
transient response. This information can help a designer determine if the speed and
the nature of the response do or do not degrade the performance of the system. For
example, the speed of an entire computer system depends on the time it takes for a hard
drive head to reach steady state and read data; passenger comfort depends in part on the
1
2
3
4
5
6
7
8
9
10 11 12 13 14 15 16 17
0.2
0.4
0.6
0.8
1.0
1.2
1.4
1.6
1.8
c(ωnt)
nt
ζ = .1
0
.2
.4
.5
.6
.8
ω
FIGURE 4.13
Second-order underdamped responses for damping ratio values
Tr
Tp
Ts
t
0.1cfinal
0.9cfinal
0.98cfinal
cfinal
1.02cfinal
cmax
c(t)
FIGURE 4.14
Second-order underdamped response speciﬁcations
174
Chapter 4
Time Response

suspension system of a car and the number of oscillations it goes through after hitting
a bump.
We now evaluate Tp, %OS, and Ts as functions of ζ and ωn. Later in this chapter we
relate these speciﬁcations to the location of the system poles. A precise analytical expression
for rise time cannot be obtained; thus, we present a plot and a table showing the relationship
between ζ and rise time.
Evaluation of Tp
Tp is found by differentiating c(t) in Eq. (4.28) and ﬁnding the ﬁrst zero crossing after t  0.
This task is simpliﬁed by “differentiating” in the frequency domain by using Item 7 of
Table 2.2. Assuming zero initial conditions and using Eq. (4.26), we get
ℒ_ct  sCs 
ω2
n
s2  2ζωns  ω2
n
4.29
Completing squares in the denominator, we have
ℒ_ct 
ω2
n
s  ζωn2  ω2
n1  ζ2

ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
q
s  ζωn2  ω2
n1  ζ2
4.30
Therefore,
_ct 
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
eζωntsinωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
q
t
4.31
Setting the derivative equal to zero yields
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
q
t  nπ
4.32
or
t 
nπ
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
4.33
Each value of n yields the time for local maxima or minima. Letting n  0 yields t  0, the
ﬁrst point on the curve in Figure 4.14 that has zero slope. The ﬁrst peak, which occurs at the
peak time, Tp, is found by letting n  1 in Eq. (4.33):
Tp 
π
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
4.34
Evaluation of %OS
From Figure 4.14 the percent overshoot, %OS, is given by
%OS  cmax  cfinal
cfinal
 100
4.35
The term cmax is found by evaluating c(t) at the peak time, c(Tp). Using Eq. (4.34) for Tp and
substituting into Eq. (4.28) yields
cmax  cTp  1  eζπ= ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ2
p

cos π 
ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
sin π
 
!
 1  eζπ= ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ2
p

4.36
For the unit step used for Eq. (4.28),
cfinal  1
4.37
4.6 Underdamped Second-Order Systems
175

Substituting Eqs. (4.36) and (4.37) into Eq. (4.35), we ﬁnally obtain
%OS  eζπ= ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ2
p
  100
4.38
Notice that the percent overshoot is a function only of the damping ratio, ζ.
Whereas Eq. (4.38) allows one to ﬁnd %OS given ζ, the inverse of the equation allows
one to solve for ζ given %OS. The inverse is given by
ζ 
ln%OS=100
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
π2  ln2%OS=100
q
4.39
The derivation of Eq. (4.39) is left as an exercise for the student. Equation (4.38) (or,
equivalently, (4.39)) is plotted in Figure 4.15.
Evaluation of Ts
In order to ﬁnd the settling time, we must ﬁnd the time for which c(t) in Eq. (4.28) reaches
and stays within  2% of the steady-state value, cfinal. Using our deﬁnition, the settling time
is the time it takes for the amplitude of the decaying sinusoid in Eq. (4.28) to reach 0.02, or
eζωnt
1
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
 0:02
4.40
This
equation
is
a
conservative
estimate,
since
we
are
assuming
that
cosωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
t  ϕ  1 at the settling time. Solving Eq. (4.40) for t, the settling time is
Ts  ln0:02
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p

ζωn
4.41
You can verify that the numerator of Eq. (4.41) varies from 3.91 to 4.74 as ζ varies from
0 to 0.9. Let us agree on an approximation for the settling time that will be used for all values
of ζ; let it be
Ts 
4
ζωn
4.42
Evaluation of Tr
A precise analytical relationship between rise time and damping ratio, ζ, cannot be found.
However, using a computer and Eq. (4.28), the rise time can be found. We ﬁrst designate ωnt
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
10
20
30
40
50
60
70
80
90
100
Damping ratio, ζ
Percent overshoot, %OS
FIGURE 4.15
Percent
overshoot versus damping ratio
176
Chapter 4
Time Response

as the normalized time variable and select a value for ζ. Using the computer, we solve for the
values of ωnt that yield ct  0:9 and ct  0:1. Subtracting the two values of ωnt yields
the normalized rise time, ωnTr, for that value of ζ. Continuing in like fashion with other
values of ζ, we obtain the results plotted in Figure 4.16.5 Let us look at an example.
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
0.1
1.0
1.2
1.4
1.6
1.8
2.0
2.2
2.4
2.6
2.8
3.0
Damping ratio
Damping
ratio
Normalized
rise time
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.104
1.203
1.321
1.463
1.638
1.854
2.126
2.467
2.883
Rise time × Natural frequency
FIGURE 4.16
Normalized rise time versus damping ratio for a second-order underdamped response
Example 4.5
Finding Tp, %OS, Ts, and Tr from a Transfer Function
Finding Tp, %OS, Ts, and Tr from a Transfer Function
PROBLEM: Given the transfer function
Gs 
100
s2  15s  100
4.43
ﬁnd Tp, %OS, Ts, and Tr.
SOLUTION: ωn and ζ are calculated as 10 and 0.75, respectively. Now substitute
ζ and ωn into Eqs. (4.34), (4.38), and (4.42) and ﬁnd, respectively, that Tp  0:475
second, %OS  2:838, and Ts  0:533 second. Using the table in Figure 4.16, the
normalized rise time is approximately 2.3 seconds. Dividing by ωn yields Tr  0:23
second. This problem demonstrates that we can ﬁnd Tp, %OS, Ts, and Tr without the
tedious task of taking an inverse Laplace transform, plotting the output response, and
taking measurements from the plot.
Virtual Experiment 4.2
Second-Order
System Response
Put theory into practice studying
the effect that natural frequency
and damping ratio have on
controlling the speed response
of the Quanser Linear Servo in
LabVIEW. This concept is
applicable to automobile cruise
controls or speed controls of
subways or trucks.
Virtual experiments are found
on Learning Space.
5 Figure 4.16 can be approximated by the following polynomials: ωnTr  1:76ζ3  0:417ζ2  1:039ζ  1 (maximum
error less than 1
2 % for 0 < ζ < 0:9), and ζ  0:115ωnTr3  0:883ωnTr2  2:504ωnTr  1:738 (maximum error
less than 5% for 0:1 < ζ < 0:9). The polynomials were obtained using MATLAB’s polyﬁt function.
4.6 Underdamped Second-Order Systems
177

We now have expressions that relate peak time, percent overshoot,
and settling time to the natural frequency and the damping ratio. Now let
us relate these quantities to the location of the poles that generate these
characteristics.
The pole plot for a general, underdamped second-order system,
previously shown in Figure 4.11, is reproduced and expanded in
Figure 4.17 for focus. We see from the Pythagorean theorem that the
radial distance from the origin to the pole is the natural frequency, ωn, and
the cos θ  ζ.
Now, comparing Eqs. (4.34) and (4.42) with the pole location, we
evaluate peak time and settling time in terms of the pole location. Thus,
Tp 
π
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
 π
ωd
4.44
Ts 
4
ζωn
 π
σd
4.45
where ωd is the imaginary part of the pole and is called the damped frequency of
oscillation, and σd is the magnitude of the real part of the pole and is the exponential
damping frequency.
Equation (4.44) shows that Tp is inversely proportional to the imaginary part of
the pole. Since horizontal lines on the s-plane are lines of constant imaginary value, they
are also lines of constant peak time. Similarly, Eq. (4.45) tells us that settling time is
inversely proportional to the real part of the pole. Since vertical lines on the s-plane are
lines of constant real value, they are also lines of constant settling time. Finally, since
ζ  cos θ, radial lines are lines of constant ζ. Since percent overshoot is only a function
of ζ, radial lines are thus lines of constant percent overshoot, %OS. These concepts
are depicted in Figure 4.18, where lines of constant Tp, Ts, and %OS are labeled on the
s-plane.
At this point, we can understand the signiﬁcance of Figure 4.18 by examining the
actual step response of comparative systems. Depicted in Figure 4.19(a) are the step
responses as the poles are moved in a vertical direction, keeping the real part the same.
n
d
σ
ωn
θ
ζ
–
–jω
1 – ζ2
n
jω
1 – ζ 2
n
σ
jω
s-plane
+
= –
= –jωd
= jωd
ω
FIGURE 4.17
Pole plot for an underdamped
second-order system
%OS2
%OS1
jω
s-plane
Ts2
Ts1
Tp2
Tp1
σ
FIGURE 4.18
Lines of
constant peak time, Tp, settling
time, Ts, and percent overshoot,
%OS. Note: Ts2 < Ts1;
Tp2 < Tp1; %OS1 < %OS2.
178
Chapter 4
Time Response

As the poles move in a vertical direction, the frequency increases, but the envelope remains
the same since the real part of the pole is not changing. The ﬁgure shows a constant
exponential envelope, even though the sinusoidal response is changing frequency. Since all
curves ﬁt under the same exponential decay curve, the settling time is virtually the same for
all waveforms. Note that as overshoot increases, the rise time decreases.
Let us move the poles to the right or left. Since the imaginary part is now
constant, movement of the poles yields the responses of Figure 4.19(b). Here the
frequency is constant over the range of variation of the real part. As the poles move to
the left, the response damps out more rapidly, while the frequency remains the same.
Notice that the peak time is the same for all waveforms because the imaginary part
remains the same.
Moving the poles along a constant radial line yields the responses shown in
Figure 4.19(c). Here the percent overshoot remains the same. Notice also that the responses
look exactly alike, except for their speed. The farther the poles are from the origin, the more
rapid the response.
We conclude this section with some examples that demonstrate the relationship
between the pole location and the speciﬁcations of the second-order underdamped
response. The ﬁrst example covers analysis. The second example is a simple design problem
consisting of a physical system whose component values we want to design to meet a transient
Frequency the same
1
2
t
c(t)
Pole
motion
t
c(t)
Pole
motion
t
c(t)
Same overshoot
Pole
motion
s-plane
s-plane
s-plane
(a)
(c)
jω
jω
jω
(b)
1
2
3
3
2
1
1
2
1
2
1
2
3
1
2
3
1
2
3
Envelope the same
1
2
3
σ
σ
σ
FIGURE 4.19
Step responses
of second-order underdamped
systems as poles move: a. with
constant real part; b. with
constant imaginary part; c. with
constant damping ratio
4.6 Underdamped Second-Order Systems
179

response speciﬁcation. An animation PowerPoint presentation (PPT) demonstrating
second-order principles is available for instructors at www.wiley.com/college/nise. See
Second-Order Step Response.
Example 4.6
Finding Tp, %OS, and Ts from Pole Location
Finding Tp, %OS, and Ts from Pole Location
PROBLEM: Given the pole plot shown in Figure 4.20, ﬁnd
ζ; ωn; Tp; %OS, and Ts.
SOLUTION: The damping ratio is given by ζ  cos θ  cosarctan 7=3 
0:394. The natural frequency, ωn, is the radial distance from the origin to the
pole, or ωn 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
72  32
p
 7:616. The peak time is
Tp  π
ωd
 π
7  0:449 second
4.46
The percent overshoot is
%OS  eζπ= ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ2
p
  100  26%
4.47
The approximate settling time is
Ts  4
σd
 4
3  1:333 seconds
4.48
Students who are using MATLAB should now run ch4p1 in Appendix B.
You will learn how to generate a second-order polynomial from two
complex poles as well as extract and use the coefﬁcients of the
polynomial to calculate Tp, %OS, and Ts. This exercise uses MATLAB
to solve the problem in Example 4.6.
s-plane
θ
d
j7 = jωd
–j7 = –jωd
jω
3
–
= –
σ
σ
FIGURE 4.20
Pole plot for Example 4.6
Example 4.7
Transient Response Through Component Design
Transient Response Through Component Design
PROBLEM: Given the system shown in Figure 4.21, ﬁnd J and D to yield 20%
overshoot and a settling time of 2 seconds for a step input of torque T(t).
J
D
T(t) θ
K = 5 N-m/rad
(t)
FIGURE 4.21
Rotational mechanical system for Example 4.7
180
Chapter 4
Time Response

Second-Order Transfer Functions via Testing
Just as we obtained the transfer function of a ﬁrst-order system experimentally, we can do
the same for a system that exhibits a typical underdamped second-order response. Again, we
can measure the laboratory response curve for percent overshoot and settling time, from
which we can ﬁnd the poles and hence the denominator. The numerator can be found, as in
the ﬁrst-order system, from a knowledge of the measured and expected steady-state values.
A problem at the end of the chapter illustrates the estimation of a second-order transfer
function from the step response.
SOLUTION: First, the transfer function for the system is
Gs 
1=J
s2  D
J s  K
J
4.49
From the transfer function,
ωn 
ﬃﬃﬃﬃ
K
J
r
4.50
and
2ζωn  D
J
4.51
But, from the problem statement,
Ts  2 
4
ζωn
4.52
or ζωn  2. Hence,
2ζωn  4  D
J
4.53
Also, from Eqs. (4.50) and (4.52),
ζ 
4
2ωn
 2
ﬃﬃﬃﬃ
J
K
r
4.54
From Eq. (4.39), a 20% overshoot implies ζ  0:456. Therefore, from Eq. (4.54),
ζ  2
ﬃﬃﬃﬃ
J
K
r
 0:456
4.55
Hence,
J
K  0:052
4.56
From the problem statement, K  5 N-m/rad. Combining this value with Eqs. (4.53) and
(4.56), D = 1.04 N-m-s/rad, and J  0:26 kg-m2.
4.6 Underdamped Second-Order Systems
181

Now that we have analyzed systems with two poles, how does the addition of another
pole affect the response? We answer this question in the next section.
4.7 System Response with Additional Poles
In the last section, we analyzed systems with one or two poles. It must be emphasized that
the formulas describing percent overshoot, settling time, and peak time were derived
only for a system with two complex poles and no zeros. If a system such as that shown in
Figure 4.22 has more than two poles or has zeros, we cannot use the formulas to calculate the
performance speciﬁcations that we derived. However, under certain conditions, a system
with more than two poles or with zeros can be approximated as a second-order system that
has just two complex dominant poles. Once we justify this approximation, the formulas for
percent overshoot, settling time, and peak time can be applied to these higher-order systems
by using the location of the dominant poles. In this section, we investigate the effect of an
additional pole on the second-order response. In the next section, we analyze the effect of
adding a zero to a two-pole system.
Let us now look at the conditions that would have to exist in order to approximate the
behavior of a three-pole system as that of a two-pole system. Consider a three-pole system
with complex poles and a third pole on the real axis. Assuming that the complex poles are at
ζωn  jωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
and the real pole is at αr, the step response of the system can be
determined from a partial-fraction expansion. Thus, the output transform is
Cs  A
s  Bs  ζωn  Cωd
s  ζωn2  ω2
d

D
s  αr
4.57
or, in the time domain,
ct  Aut  eζωntB cos ωdt  C sin ωdt  Deαrt
4.58
The component parts of c(t) are shown in Figure 4.23 for three cases of αr. For Case I,
αr  αr1 and is not much larger than ζωn; for Case II, αr  αr2 and is much larger than ζωn;
and for Case III, αr  ∞:
Skill-Assessment Exercise 4.5
PROBLEM: Find ζ; ωn; Ts; Tp; Tr, and %OS for a system whose transfer
function is Gs 
361
s2  16s  361.
ANSWERS:
ζ  0:421; ωn  19; Ts  0:5 s; Tp  0:182 s; Tr  0:079 s; and %OS  23:3%:
The complete solution is located at www.wiley.com/college/nise.
TryIt 4.1
Use the following MATLAB
statements to calculate the
answers to Skill-Assessment
Exercise 4.5. Ellipses mean
code continues on next line.
numg=361;
deng=[1 16 361];
omegan=sqrt(deng(3)...
/deng(1))
zeta=(deng(2)/deng(1))...
/(2*omegan)
Ts=4/(zeta*omegan)
Tp=pi/(omegan*sqrt...
(1-zeta^2))
pos=100*exp(-zeta*...
pi/sqrt(1-zeta^2))
Tr=(1.768*zeta^3 -...
0.417*zeta^2 + 1.039*...
zeta + 1)/omegan
182
Chapter 4
Time Response

FIGURE 4.22
Robot follows
input commands from a human
trainer
Au(t) + e–     nt(B cos    dt + C sin    dt)
α
–
r1 –
n
p2
p1
p3
s-plane
Case I
Case II
(a)
Case III
α
–
r2
ζ
–
n
p2
p1
p3
ζ
–
n
p2
p1
s-plane
s-plane
II
Case I
III
II
Case I
Response
Time
(b)
0
jω
jω
jω
De–αrit
ζω
ω
ω
ζω
ω
ω
σ
σ
σ
FIGURE 4.23
Component
responses of a three-pole
system: a. pole plot;
b. component responses:
Nondominant pole is near
dominant second-order
pair (Case I), far from the
pair (Case II), and at inﬁnity
(Case III)
4.7 System Response with Additional Poles
183

Let us direct our attention to Eq. (4.58) and Figure 4.23. If αr  ζωn (Case II), the
pure exponential will die out much more rapidly than the second-order underdamped step
response. If the pure exponential term decays to an insigniﬁcant value at the time of the
ﬁrst overshoot, such parameters as percent overshoot, settling time, and peak time will be
generated by the second-order underdamped step response component. Thus, the total
response will approach that of a pure second-order system (Case III).
If αr is not much greater than ζωn (Case I), the real pole’s transient response will not
decay to insigniﬁcance at the peak time or settling time generated by the second-order pair.
In this case, the exponential decay is signiﬁcant, and the system cannot be represented as a
second-order system.
The next question is, How much farther from the dominant poles does the third pole
have to be for its effect on the second-order response to be negligible? The answer of course
depends on the accuracy for which you are looking. However, this book assumes that the
exponential decay is negligible after ﬁve time constants. Thus, if the real pole is ﬁve times
farther to the left than the dominant poles, we assume that the system is represented by its
dominant second-order pair of poles.
What about the magnitude of the exponential decay? Can it be so large that its
contribution at the peak time is not negligible? We can show, through a partial-fraction
expansion, that the residue of the third pole, in a three-pole system with dominant
second-order poles and no zeros, will actually decrease in magnitude as the third pole is
moved farther into the left half-plane. Assume a step response, C(s), of a three-pole
system:
Cs 
bc
ss2  as  bs  c  A
s 
Bs  C
s2  as  b 
D
s  c
4.59
where we assume that the nondominant pole is located at c on the real axis and that the
steady-state response approaches unity. Evaluating the constants in the numerator of
each term,
A  1;
B 
ca  c2
c2  b  ca
(4.60a)
C  ca2  c2a  bc
c2  b  ca
; D 
b
c2  b  ca
(4.60b)
As the nondominant pole approaches ∞; or c®∞,
A  1; B  1; C  a; D  0
4.61
Thus, for this example, D, the residue of the nondominant pole and its response, becomes
zero as the nondominant pole approaches inﬁnity.
The designer can also choose to forgo extensive residue analysis, since all system
designs should be simulated to determine ﬁnal acceptance. In this case, the control systems
engineer can use the “ﬁve times” rule of thumb as a necessary but not sufﬁcient condition to
increase the conﬁdence in the second-order approximation during design, but then simulate
the completed design.
Let us look at an example that compares the responses of two different three-pole
systems with that of a second-order system.
184
Chapter 4
Time Response

Example 4.8
Comparing Responses of Three-Pole Systems
Comparing Responses of Three-Pole Systems
PROBLEM: Find the step response of each of the transfer functions shown in Eqs. (4.62)
through (4.64) and compare them.
T1s 
24:542
s2  4s  24:542
(4.62)
T2s 
245:42
s  10s2  4s  24:542
4.63
T3s 
73:626
s  3s2  4s  24:542
4.64
SOLUTION: The step response, Cis, for the transfer function, Tis, can be found by
multiplying the transfer function by 1/s, a step input, and using partial-fraction expansion
followed by the inverse Laplace transform to ﬁnd the response, cit. With the details left
as an exercise for the student, the results are
c1t  1  1:09e2tcos 4:532t  23:8°
4.65
c2t  1  0:29e10t  1:189e2tcos 4:532t  53:34°
4.66
c3t  1  1:14e3t  0:707e2tcos 4:532t  78:63°
4.67
The three responses are plotted in Figure 4.24. Notice that c2t, with its third pole at
10 and farthest from the dominant poles, is the better approximation of c1t, the pure
second-order system response; c3t, with a third pole close to the dominant poles,
yields the most error.
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0
0.5
2.0
2.5
3.0
Time (seconds)
Normalized response
c1(t)
c2(t)
c3(t)
1.0
1.5
FIGURE 4.24
Step responses of system T1s, system T2s, and system T3s
4.7 System Response with Additional Poles
185

4.8 System Response with Zeros
Now that we have seen the effect of an additional pole, let us add a zero to the second-order
system. In Section 4.2, we saw that the zeros of a response affect the residue, or amplitude,
of a response component but do not affect the nature of the response—exponential, damped
sinusoid, and so on. In this section, we add a real-axis zero to a two-pole system. The zero
Students who are using MATLAB should now run ch4p2 in Appendix B.
You will learn how to generate a step response for a transfer
function and how to plot the response directly or collect the
points for future use. The example shows how to collect the points
and then use them to create a multiple plot, title the graph, and
label the axes and curves to produce the graph in Figure 4.24 to
solve Example 4.8.
System responses can alternately be obtained using Simulink.
Simulink is a software package that is integrated with MATLAB
to provide a graphical user interface (GUI) for deﬁning systems
and generating responses. The reader is encouraged to study
Appendix C, which contains a tutorial on Simulink as well as some
examples. One of the illustrative examples, Example C.1, solves
Example 4.8 using Simulink.
Another method to obtain systems responses is through the use of
MATLAB's LTI Viewer. An advantage of the LTI Viewer is that it
displays the values of settling time, peak time, rise time, maximum
response, and the ﬁnal value on the step response plot. The reader
is encouraged to study Appendix E at www.wiley.com/college/nise,
which contains a tutorial on the LTI Viewer as well as some
examples. Example E.1 solves Example 4.8 using the LTI Viewer.
Skill-Assessment Exercise 4.6
PROBLEM: Determine the validity of a second-order approximation for each of these
two transfer functions:
a. Gs 
700
s  15s2  4s  100
b. Gs 
360
s  4s2  2s  90
ANSWERS:
a. The second-order approximation is valid.
b. The second-order approximation is not valid.
The complete solution is located at www.wiley.com/college/nise.
TryIt 4.2
Use the following MATLAB
and Control System Toolbox
statements to investigate the
effect of the additional pole
in Skill-Assessment
Exercise 4.6(a). Move the
higher-order pole originally
at 15 to other values by
changing “a” in the code.
a=15
numga=100*a;
denga=conv([1 a],...
[1 4 100]);
Ta=tf (numga,denga);
numg=100;
deng=[1 4 100];
T=tf (numg,deng);
step(Ta,'.',T,'-')
186
Chapter 4
Time Response

will be added ﬁrst in the left half-plane and then in the right half-plane and its effects noted
and analyzed. We conclude the section by talking about pole-zero cancellation.
Starting with a two-pole system with poles at 1  j 2:828, we consecutively add
zeros at 3, 5, and 10. The results, normalized to the steady-state value, are plotted in
Figure4.25.We can see that thecloser thezero is to the dominantpoles,thegreater its effecton
the transient response. As the zero moves away from the dominant poles, the response
approaches that of the two-pole system. This analysis can be reasoned via the partial-fraction
expansion. If we assume a group of poles and a zero far from the poles, the residue of each pole
will be affected the same by the zero. Hence, the relative amplitudes remain appreciably the
same. For example, assume the partial-fraction expansion shown in Eq. (4.68):
Ts 
s  a
s  bs  c

A
s  b 
B
s  c
 b  a=b  c
s  b
 c  a=c  b
s  c
4.68
If the zero is far from the poles, then a is large compared to b and c, and
Ts ≈a 1=b  c
s  b
 1=c  b
s  c



a
s  bs  c
4.69
Hence, the zero looks like a simple gain factor and does not change the relative amplitudes of
the components of the response.
Another way to look at the effect of a zero, which is more general, is as follows
(Franklin, 1991): Let C(s) be the response of a system, T(s), with unity in the numerator. If
we add a zero to the transfer function, yielding s  aTs, the Laplace transform of the
response will be
s  aCs  sCs  aCs
4.70
Thus, the response of a system with a zero consists of two parts: the derivative of the original
response and a scaled version of the original response. If a, the negative of the zero, is very
large, the Laplace transform of the response is approximately aC(s), or a scaled version of
the original response. If a is not very large, the response has an additional component
consisting of the derivative of the original response. As a becomes smaller, the derivative
term contributes more to the response and has a greater effect. For step responses, the
derivative is typically positive at the start of a step response. Thus, for small values of a,
we can expect more overshoot in second-order systems because the derivative term will be
additive around the ﬁrst overshoot. This reasoning is borne out by Figure 4.25.
TryIt 4.3
Use the following MATLAB and
Control System Toolbox
statements to generate
Figure 4.25.
deng=[1 2 9];
Ta=tf([1 3]*9/3,deng);
Tb=tf([1 5]*9/5,deng);
Tc=tf([1 10]*9/10,deng);
T=tf(9,deng);
step(T,Ta,Tb,Tc)
text(0.5,0.6,'no zero')
text(0.4,0.7,...
'zero at 10')
text(0.35,0.8,...
'zero at 5')
text(0.3,0.9,'zero at 3')
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0
2.0
4.0
6.0
Time (seconds)
1.6
zero at –3
zero at –5
zero at –10
no zero
 Normalized c(t)
FIGURE 4.25
Effect of adding a zero to a two-pole system
4.8 System Response with Zeros
187

An interesting phenomenon occurs if a is negative, placing the zero in the right
half-plane. From Eq. (4.70) we see that the derivative term, which is typically positive
initially, will be of opposite sign from the scaled response term. Thus, if the derivative term,
sC(s), is larger than the scaled response, aC(s), the response will initially follow the
derivative in the opposite direction from the scaled response. The result for a second-order
system is shown in Figure 4.26, where the sign of the input was reversed to yield a positive
steady-state value. Notice that the response begins to turn toward the negative direction even
though the ﬁnal value is positive. A system that exhibits this phenomenon is known as a
nonminimum-phase system. If a motorcycle or airplane was a nonminimum-phase system, it
would initially veer left when commanded to steer right.
Let us now look at an example of an electrical nonminimum-phase network.
1.5
1.0
3.0
4.0
5.0
Time (seconds)
c(t)
–0.5
2.0
6.0
1.0
0.5
0
FIGURE 4.26
Step response of a nonminimum-phase system
Example 4.9
Transfer Function of a Nonminimum-Phase
System
Transfer Function of a Nonminimum-Phase
System
PROBLEM:
a. Find the transfer function, Vos=Vis for the operational
ampliﬁer circuit shown in Figure 4.27.
b. If R1  R2, this circuit is known as an all-pass ﬁlter, since it
passes sine waves of a wide range of frequencies without
attenuating or amplifying their magnitude (Dorf, 1993). We
will learn more about frequency response in Chapter 10. For
now, let R1  R2; R3C  1=10, and ﬁnd the step response of the
ﬁlter. Show that component parts of the response can be
identiﬁed with those in Eq. (4.70).
SOLUTION:
a. Remembering from Chapter 2 that the operational ampliﬁer has a high input impedance,
the current, I(s), through R1 and R2, is the same and is equal to
Is  Vis  Vos
R1  R2
4.71
Vi(s)
R2
V1(s)
R1
I(s)
R3
V2(s)
Vo(s)
C
+
–
FIGURE 4.27
Nonminimum-phase electric circuit6
6 Adapted from Dorf, R. C. Introduction to Electric Circuits, 2nd ed. (New York: John Wiley & Sons, 1989, 1993),
p. 583. 1989, 1993 John Wiley & Sons. Reprinted by permission of the publisher.
188
Chapter 4
Time Response

Also,
Vos  A V2s  V1s


4.72
But,
V1s  IsR1  Vos
4.73
Substituting Eq. (4.71) into (4.73),
V1s 
1
R1  R2
R1Vis  R2V0 s


4.74
Using voltage division,
V2s  Vis 1=Cs
R3  1
Cs
4.75
Substituting Eqs. (4.74) and (4.75) into Eq. (4.72) and simplifying yields
Vos
Vis 
AR2  R1R3Cs
R3Cs  1R1  R21  A
4.76
Since the operational ampliﬁer has a large gain, A, let A approach inﬁnity. Thus, after
simpliﬁcation
Vos
Vis  R2  R1R3Cs
R2R3Cs  R2
  R1
R2
s 
R2
R1R3C


s 
1
R3C


4.77
b. Letting R1  R2 and R3C  1=10,
Vos
Vis 
s 
1
R3C


s 
1
R3C

   s  10
s  10
4.78
For a step input, we evaluate the response as suggested by Eq. (4.70):
Cs   s  10
ss  10  
1
s  10  10
1
ss  10  sCos  10Cos
4.79
where
Cos  
1
ss  10
4.80
is the Laplace transform of the response without a zero. Expanding Eq. (4.79) into
partial fractions,
Cs  
1
s  10  10
1
ss  10  
1
s  10  1
s 
1
s  10  1
s 
2
s  10
4.81
4.8 System Response with Zeros
189

We conclude this section by talking about pole-zero cancellation and its effect on our
ability to make second-order approximations to a system. Assume a three-pole system with
a zero as shown in Eq. (4.85). If the pole term, s  p3, and the zero term, s  z, cancel out,
we are left with
Ts 
Ks  z
s  p3s2  as  b
4.85
as a second-order transfer function. From another perspective, if the zero at z is very close
to the pole at p3, then a partial-fraction expansion of Eq. (4.85) will show that the residue
of the exponential decay is much smaller than the amplitude of the second-order response.
Let us look at an example.
or the response with a zero is
ct  e10t  1  e10t  1  2e10t
4.82
Also, from Eq. (4.80),
Cos   1=10
s
 1=10
s  10
4.83
or the response without a zero is
cot   1
10  1
10 e10t
4.84
The normalized responses are plotted in Figure 4.28. Notice the immediate reversal
of the nonminimum-phase response, c(t).
–0.5
–1.0
0.1
0.2
0.3
0.4
0.5
Time (seconds)
Response
–10co(t)
c (t)
1.0
0.5
0
0
FIGURE 4.28
Step response of the nonminimum-phase network of Figure 4.27 (c(t)) and
normalized step response of an equivalent network without the zero (10 cot)
Example 4.10
Evaluating Pole-Zero Cancellation Using Residues
Evaluating Pole-Zero Cancellation Using Residues
PROBLEM: For each of the response functions in Eqs. (4.86) and (4.87), determine
whether there is cancellation between the zero and the pole closest to the zero. For any
function for which pole-zero cancellation is valid, ﬁnd the approximate response.
C1s 
26:25s  4
ss  3:5s  5s  6
4.86
190
Chapter 4
Time Response

In this section, we have examined the effects of additional transfer function poles and
zeros upon the response. In the next section we add nonlinearities of the type discussed in
Section 2.10 and see what effects they have on system response.
C2s 
26:25s  4
ss  4:01s  5s  6
4.87
SOLUTION: The partial-fraction expansion of Eq. (4.86) is
C1s  1
s  3:5
s  5  3:5
s  6 
1
s  3:5
4.88
The residue of the pole at 3.5, which is closest to the zero at 4, is equal to 1 and is not
negligible compared to the other residues. Thus, a second-order step response approxi-
mation cannot be made for C1s. The partial-fraction expansion for C2s is
C2s  0:87
s
 5:3
s  5  4:4
s  6  0:033
s  4:01
4.89
The residue of the pole at 4.01, which is closest to the zero at 4, is equal to 0.033, about
two orders of magnitude below any of the other residues. Hence, we make a second-order
approximation by neglecting the response generated by the pole at 4.01:
C2s ≈0:87
s
 5:3
s  5  4:4
s  6
4.90
and the response c2t is approximately
c2t ≈0:87  5:3e5t  4:4e6t
4.91
TryIt 4.4
Use the following MATLAB
and Symbolic Math Toolbox
statements to evaluate the effect
of higher-order poles by ﬁnding
the component parts of the time
response of c1t and c2t in
Example 4.10.
syms s
C1=26.25*(s+4)/...
(s*(s+ 3.5)*...
(s+5)*(s+6));
C2=26.25*(s+4)/...
(s*(s+4.01)*...
(s+5)*(s+ 6));
c1=ilaplace(C1);
'c1'
c1=vpa(c1,3)
c2=ilaplace(C2);
'c2'
c2=vpa(c2,3)
Skill-Assessment Exercise 4.7
PROBLEM: Determine the validity of a second-order step-response approximation for
each transfer function shown below.
a. Gs 
185:71s  7
s  6:5s  10s  20
b. Gs 
197:14s  7
s  6:9s  10s  20
ANSWERS:
a. A second-order approximation is not valid.
b. A second-order approximation is valid.
The complete solution is located at www.wiley.com/college/nise.
4.8 System Response with Zeros
191

4.9 Effects of Nonlinearities upon Time Response
In this section, we qualitatively examine the effects of nonlinearities upon the time response
of physical systems. In the following examples, we insert nonlinearities, such as saturation,
dead zone, and backlash, as shown in Figure 2.46, into a system to show the effects of these
nonlinearities upon the linear responses.
The responses were obtained using Simulink, a simulation software package that is
integrated with MATLAB to provide a graphical user interface (GUI). Readers who would
like to learn how to use Simulink to generate nonlinear responses should consult the
Simulink tutorial in Appendix C. Simulink block diagrams are included with all responses
that follow.
Let us assume the motor and load from the Antenna Control Case Study of Chapter 2
and look at the load angular velocity, ωos, where ωos  0:1 sθms  0:2083 Eas=
s  1:71 from Eq. (2.208). If we drive the motor with a step input through an ampliﬁer of
unity gain that saturates at  5 volts, Figure 4.29 shows that the effect of ampliﬁer saturation
is to limit the obtained velocity.
Load angular velocity (rad/second)
0
2
4
6
8
10
0
0.5
1
1.5
With saturation
Without saturation
Time (seconds)
(a)
Step
10 volts
Saturation
±5 volts
Motor, load,
& gears
Mux
Scope
Motor, load,
& gears
(b)
0.2083
s + 1.71
0.2083
s + 1.71
FIGURE 4.29
a. Effect of ampliﬁer saturation on load angular velocity response; b. Simulink block
diagram
192
Chapter 4
Time Response

The effect of dead zone on the output shaft driven by a motor and gears is shown in Figure
4.30. Here we once again assume the motor, load, and gears from Antenna Control Case
Study of Chapter 2. Dead zone is present when the motor cannot respond to small voltages.
The motor input is a sinusoidal waveform chosen to allow us to see the effects of dead zone
vividly. The response begins when the input voltage to the motor exceeds a threshold. We
notice a lower amplitude when dead zone is present.
The effect of backlash on the output shaft driven by a motor and gears is shown in
Figure 4.31. Again we assume the motor, load, and gears from the Antenna Control Case
Study of Chapter 2. The motor input is again a sinusoidal waveform, which is chosen to allow
us to see vividly the effects of backlash in the gears driven by the motor. As the motor reverses
direction, the output shaft remains stationary while the motor begins to reverse. When the
gearsﬁnallyconnect,theoutputshaftitselfbeginstoturninthereversedirection.Theresulting
response is quite different from the linear response without backlash.
0
5
10
15
20
25
0
0.2
0.4
0.6
0.8
1
1.2
Time (seconds)
(a)
Load angular displacement (radians)
Without dead zone
With dead zone
Mux
Scope
Sine wave
Amplitude = 5
Frequency = 1 rad/s
Dead zone
–2 to +2
(b)
Motor, load,
& gears
Motor, load,
& gears
Integrator
Integrator
1
s
1
s
0.2083
s + 1.71
0.2083
s + 1.71
FIGURE 4.30
a. Effect of dead zone on load angular displacement response; b. Simulink block
diagram
4.9 Effects of Nonlinearities upon Time Response
193

Now that we have seen the effects of nonlinearities on the time response, let us return
to linear systems. Our coverage so far for linear systems has dealt with ﬁnding the time
response by using the Laplace transform in the frequency domain. Another way to solve for
the response is to use state-space techniques in the time domain. This topic is the subject of
the next two sections.
4.10 Laplace Transform Solution of State Equations
In Chapter 3, systems were modeled in state space, where the state-space representation
consisted of a state equation and an output equation. In this section, we use the Laplace
transform to solve the state equations for the state and output vectors.
0
5
10
15
20
25
0
0.05
0.1
0.15
0.2
0.25
Time (seconds)
(a)
Load angular displacement (radians)
With backlash
Without backlash
(b)
0.2083
s + 1.71
0.2083
s + 1.71
Motor, load,
and gears
Motor, load,
and gears
Scope
1
s
1
s
Integrator
Integrator
Sine wave
Amplitude = 5
Frequency = 1 rad/s
Backlash
deadband width
0.15
Mux
FIGURE 4.31
a.Effect ofbacklashon load angular displacementresponse;b. Simulinkblockdiagram
Skill-Assessment Exercise 4.8
PROBLEM: Use MATLAB's Simulink to reproduce Figure 4.31.
ANSWER: See Figure 4.31.
194
Chapter 4
Time Response

Consider the state equation
_x  Ax  Bu
4.92
and the output equation
y  Cx  Du
4.93
Taking the Laplace transform of both sides of the state equation yields
sXs  x0  AXs  BUs
4.94
In order to separate X(s), replace sX(s) with sIX(s), where I is an n  n identity matrix, and n
is the order of the system. Combining all of the X(s) terms, we get
sI  AXs  x0  BUs
4.95
Solving for X(s) by premultiplying both sides of Eq. (4.95) by sI  A1, the ﬁnal solution
for X(s) is
Xs  sI  A1x0  sI  A1BUs
 adjsI  A
detsI  A x0  BUs
4.96
Taking the Laplace transform of the output equation yields
Ys  CXs  DUs
4.97
Eigenvalues and Transfer Function Poles
We saw that the poles of the transfer function determine the nature of the transient
response of the system. Is there an equivalent quantity in the state-space representation
that yields the same information? Section 5.8 formally deﬁnes the roots of detsI  A  0
(see the denominator of Eq. (4.96) to be eigenvalues of the system matrix, A.7 Let us
show that the eigenvalues are equal to the poles of the system’s transfer function. Let the
output, Y(s), and the input, U(s), be scalar quantities Y(s) and U(s), respectively. Further,
to conform to the deﬁnition of a transfer function, let x(0), the initial state vector, equal 0,
the null vector. Substituting Eq. (4.96) into Eq. (4.97) and solving for the transfer
function, Ys=Us, yields
Ys
Us  C adjsI  A
detsI  A


B  D
 C adjsI  AB  D detsI  A
detsI  A
4.98
The roots of the denominator of Eq. (4.98) are the poles of the system. Since the denominators
of Eqs. (4.96) and (4.98) are identical, the system poles equal the eigenvalues. Hence, if a
system is represented in state-space, we can ﬁnd the poles from detsI  A  0. We will be
more formal about these facts when we discuss stability in Chapter 6.
The following example demonstrates solving the state equations using the Laplace
transform as well as ﬁnding the eigenvalues and system poles.
7 Sometimes the symbol λ is used in place of the complex variable s when solving the state equations without using
the Laplace transform. Thus, it is common to see the characteristic equation also written as detλI  A  0.
4.10 Laplace Transform Solution of State Equations
195

Example 4.11
Laplace Transform Solution; Eigenvalues and Poles
Laplace Transform Solution; Eigenvalues and Poles
PROBLEM: Given the system represented in state space by Eqs. (4.99),
_x 
0
1
0
0
0
1
24
26
9
2
4
3
5x 
0
0
1
2
4
3
5et
(4.99a)
y   1
1
0  x
(4.99b)
x0 
1
0
2
2
4
3
5
(4.99c)
do the following:
a. Solve the preceding state equation and obtain the output for the given exponential
input.
b. Find the eigenvalues and the system poles.
SOLUTION:
a. We will solve the problem by ﬁnding the component parts of Eq. (4.96), followed by
substitution into Eq. (4.97). First obtain A and B by comparing Eq. (4.99a) to Eq. (4.92).
Since
sI 
s
0
0
0
s
0
0
0
s
2
4
3
5
4.100
then
sI  A 
s
1
0
0
s
1
24
26
s  9
2
4
3
5
4.101
and
sI  A1 
s2  9s  26
s  9
1
24
s2  9s
s
24s
26s  24
s2
2
64
3
75
s3  9s2  26s  24
4.102
Since U(s) is 1=s  1 (the Laplace transform for et), Xs can be calculated.
Rewriting Eq. (4.96) as
Xs  sI  A1x0  BUs
4.103
and using B and x(0) from Eqs. (4.99a) and (4.99c), respectively, we get
X1s 
s3  10s2  37s  29
s  1s  2s  3s  4
(4.104a)
196
Chapter 4
Time Response

X2s 
2s2  21s  24
s  1s  2s  3s  4
(4.104b)
X3s 
s2s2  21s  24
s  1s  2s  3s  4
(4.104c)
The output equation is found from Eq. (4.99b). Performing the indicated addition
yields
Ys 
1
1
0

	
X1s
X2s
X3s
2
4
3
5  X1s  X2s
4.105
or
Ys 
s3  12s2  16s  5
s  1s  2s  3s  4
 6:5
s  2 
19
s  3  11:5
s  4
4.106
where the pole at 1 canceled a zero at 1. Taking the inverse Laplace transform,
yt  6:5e2t  19e3t  11:5e4t
4.107
b. The denominator of Eq. (4.102), which is detsI  A, is also the denominator of the
system’s transfer function. Thus, detsI  A  0 furnishes both the poles of the system
and the eigenvalues 2;  3, and 4.
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB's Symbolic Math Toolbox
should now run ch4sp1 in Appendix F at www.wiley.com/college/
nise. You will learn how to solve state equations for the output
response using the Laplace transform. Example 4.11 will be solved
using MATLAB and the Symbolic Math Toolbox.
Skill-Assessment Exercise 4.9
PROBLEM: Given the system represented in state space by Eqs. (4.108),
_x 
0
2
3
5


x 
0
1


et
(4.108a)
y   1
3 x
(4.108b)
x0 
2
1


(4.108c)
do the following:
a. Solve for y(t) using state-space and Laplace transform techniques.
b. Find the eigenvalues and the system poles.
TryIt 4.5
Use the following MATLAB
and Symbolic Math Toolbox
statements to solve Skill-
Assessment Exercise 4.9 .
syms s
A=[0 2;3 5]; B=[0;1];
C=[1 3];X0=[2;1];
U=1/(s+1);
I=[1 0;0 1];
X=((s*I-A)^1)*...
(X0 + B*U);
Y=C*X; Y=simplify(Y);
y=ilaplace(Y);
pretty(y)
eig(A)
4.10 Laplace Transform Solution of State Equations
197

4.11 Time Domain Solution of State Equations
We now look at another technique for solving the state equations. Rather than using the
Laplace transform, we solve the equations directly in the time domain using a method
closely allied to the classical solution of differential equations. We will ﬁnd that the ﬁnal
solution consists of two parts that are different from the forced and natural responses.
The solution in the time domain is given directly by
xt  eAtx0 
Z t
0
eAtτBuτdτ
 Φtx0 
Z t
0
Φt  τBuτdτ
4.109
where Φt  eAt by deﬁnition, and which is called the state-transition matrix. Eq. (4.109)
is derived in Appendix I located at www.wiley.com/college/nise. Readers who are not
familiar with this equation or who may want to refresh their memory should consult
Appendix I before proceeding.
Notice that the ﬁrst term on the right-hand side of the equation is the response due to
the initial state vector, x(0). Notice also that it is the only term dependent on the initial state
vector and not the input. We call this part of the response the zero-input response, since it is
the total response if the input is zero. The second term, called the convolution integral, is
dependent only on the input, u, and the input matrix, B, not the initial state vector. We call
this part of the response the zero-state response, since it is the total response if the initial
state vector is zero. Thus, there is a partitioning of the response different from the forced/
natural response we have seen when solving differential equations. In differential equations,
the arbitrary constants of the natural response are evaluated based on the initial conditions
and the initial values of the forced response and its derivatives. Thus, the natural response’s
amplitudes are a function of the initial conditions of the output and the input. In Eq. (4.109),
the zero-input response is not dependent on the initial values of the input and its derivatives.
It is dependent only on the initial conditions of the state vector. The next example vividly
shows the difference in partitioning. Pay close attention to the fact that in the ﬁnal result the
zero-state response contains not only the forced solution but also pieces of what we
previously called the natural response. We will see in the solution that the natural response is
distributed through the zero-input response and the zero-state response.
Before proceeding with the example, let us examine the form the elements of Φt
take for linear, time-invariant systems. The ﬁrst term of Eq. (4.96), the Laplace transform of
the response for unforced systems, is the transform of Φtx0, the zero-input response from
Eq. (4.109). Thus, for the unforced system
ℒxt  ℒΦtx0  sI  A1x0
4.110
from which we can see that sI  A1 is the Laplace transform of the state-transition
matrix, Φt. We have already seen that the denominator of sI  A1 is a polynomial
ANSWERS:
a. yt  0:5et  12e2t  17:5e3t
b. 2;  3
The complete solution is located at www.wiley.com/college/nise.
198
Chapter 4
Time Response

in s whose roots are the system poles. This polynomial is found from the equation
detsI  A  0. Since
ℒ1sI  A1  ℒ1 adjsI  A
detsI  A


 Φt
4.111
each term of Φt would be the sum of exponentials generated by the system’s poles.
Let us summarize the concepts with two numerical examples. The ﬁrst example solves
the state equations directly in the time domain. The second example uses the Laplace
transform to solve for the state-transition matrix by ﬁnding the inverse Laplace transform of
sI  A1.
Example 4.12
Time Domain Solution
Time Domain Solution
PROBLEM: For the state equation and initial state vector shown in Eqs. (4.112), where
u(t) is a unit step, ﬁnd the state-transition matrix and then solve for x(t).
_xt 
0
1
8
6


xt 
0
1


ut
(4.112a)
x0 
1
0


(4.112b)
SOLUTION: Since the state equation is in the form
_xt  Axt  But
4.113
ﬁnd the eigenvalues using detsI  A  0. Hence, s2  6s  8  0, from which
s1  2 and s2  4. Sinceeachtermofthestate-transitionmatrixisthesumofresponses
generated by the poles (eigenvalues), we assume a state-transition matrix of the form
Φt 
K1e2t  K2e4t
K3e2t  K4e4t
K5e2t  K6e4t
K7e2t  K8e4t
"
#
4.114
In order to ﬁnd the values of the constants, we make use of the properties of the
state-transition matrix derived in Appendix J located at www.wiley.com/college/nise.
Since
Φ0  I
4.115
then
K1  K2  1
(4.116a)
K3  K4  0
(4.116b)
K5  K6  0
(4.116c)
K7  K8  1
(4.116d)
4.11 Time Domain Solution of State Equations
199

And, since
_Φ0  A
4.117
then
2K1  4K2  0
(4.118a)
2K3  4K4  1
(4.118b)
2K5  4K6  8
(4.118c)
2K7  4K8  6
(4.118d)
The constants are solved by taking two simultaneous equations four times. For
example, Eq. (4.116a) can be solved simultaneously with Eq. (4.118a) to yield the
values of K1 and K2. Proceeding similarly, all of the constants can be found. Therefore,
Φt 
2e2t  e4t
1
2 e2t  1
2 e4t


4e2t  4e4t
e2t  2e4t
2
4
3
5
4.119
Also,
Φt  τB 
1
2 e2tτ  1
2 e4tτ



 e2tτ  2e4tτ
2
64
3
75
4.120
Hence, the ﬁrst term of Eq. (4.109) is
Φtx0 
2e2t  e4t
4e2t  4e4t


4.121
The last term of Eq. (4.109) is
Z t
0
Φt  τBuτdτ 
1
2 e2t
Z t
0
e2τdτ  1
2 e4t
Z t
0
e4τdτ
e2t
Z t
0
e2τdτ  2e4t
Z t
0
e4τdτ
2
6664
3
7775

1
8  1
4 e2t  1
8 e4t
1
2 e2t  1
2 e4t
2
664
3
775
4.122
Notice, as promised, that Eq. (4.122), the zero-state response, contains not only the forced
response, 1/8, but also terms of the form Ae2t and Be4t that are part of what we
previously called the natural response. However, the coefﬁcients, A and B, are not
dependent on the initial conditions.
The ﬁnal result is found by adding Eqs. (4.121) and (4.122). Hence,
xt  Φtx0 
Z t
0
Φt  τBuτdτ 
1
8  7
4 e2t  7
8 e4t
 7
2 e2t  7
2 e4t
2
664
3
775
4.123
200
Chapter 4
Time Response

Systems represented in state space can be simulated on the digital computer. Programs
such as MATLAB can be used for this purpose. Alternately, the user can write specialized
programs, as discussed in Appendix H.1 at www.wiley.com/college/nise.
Students who are using MATLAB should now run ch4p3 in Appendix B.
This exercise uses MATLAB to simulate the step response of systems
represented in state space. In addition to generating the step
response, you will learn how to specify the range on the time axis
for the plot.
Example 4.13
State-Transition Matrix via Laplace Transform
State-Transition Matrix via Laplace Transform
PROBLEM: Find the state-transition matrix of Example 4.12, using sI  A1.
SOLUTION: We use the fact that Φt is the inverse Laplace transform of sI  A1.
Thus, ﬁrst ﬁnd sI  A as
sI  A 
s
1
8
s  6
"
#
4.124
from which
sI  A1 
s  6
1
8
s
"
#
s2  6s  8 
s  6
s2  6s  8
1
s2  6s  8
8
s2  6s  8
s
s2  6s  8
2
664
3
775
4.125
Expanding each term in the matrix on the right by partial fractions yields
sI  A1 
2
s  2 
1
s  4


1=2
s  2  1=2
s  4


4
s  2 
4
s  4


1
s  2 
2
s  4


2
6664
3
7775
4.126
Finally, taking the inverse Laplace transform of each term, we obtain
Φt 
2e2t  e4t
1
2 e2t  1
2 e4t


4e2t  4e4t
e2t  2e4t
2
64
3
75
4.127
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB's Symbolic Math Toolbox
should now run ch4sp2 in Appendix F at www.wiley.com/college/
nise. You will learn how to solve state equations for the output
response using the convolution integral. Examples 4.12 and 4.13
will be solved using MATLAB and the Symbolic Math Toolbox.
4.11 Time Domain Solution of State Equations
201

Skill-Assessment Exercise 4.10
PROBLEM: Given the system represented in state space by Eqs. (4.128a):
_x 
0
2
2
5


x 
0
1


e2t
(4.128a)
y 
2
1

	
x
(4.128b)
x0 
1
2


(4.128c)
do the following:
a. Solve for the state-transition matrix.
b. Solve for the state vector using the convolution integral.
c. Find the output, y(t).
ANSWERS:
a. Φt 
4
3 et  1
3 e4t


2
3 et  2
3 e4t


 2
3 et  2
3 e4t


 1
3 et  4
3 e4t


2
6664
3
7775
b. xt 
10
3 et  e2t  4
3 e4t


 5
3 et  e2t  8
3 e4t


2
6664
3
7775
c. yt  5et  e2t
The complete solution is located at www.wiley.com/college/nise.
Case Studies
Antenna Control: Open-Loop Response
Antenna Control: Open-Loop Response
In this chapter, we have made use of the transfer functions derived in Chapter 2 and the
state equations derived in Chapter 3 to obtain the output response of an open-loop system.
We also showed the importance of the poles of a system in determining the transient
response. The following case study uses these concepts to analyze an open-loop portion of
the antenna azimuth position control system. The open-loop function that we will deal
with consists of a power ampliﬁer and motor with load.
PROBLEM: For the schematic of the azimuth position control system shown on the front
endpapers, Conﬁguration 1, assume an open-loop system (feedback path disconnected).
202
Chapter 4
Time Response

a. Predict, by inspection, the form of the open-loop angular velocity response of the load
to a step-voltage input to the power ampliﬁer.
b. Find the damping ratio and natural frequency of the open-loop system.
c. Derive the complete analytical expression for the open-loop angular velocity response
of the load to a step-voltage input to the power ampliﬁer, using transfer functions.
d. Obtain the open-loop state and output equations.
e. Use MATLAB to obtain a plot of the open-loop angular velocity
response to a step-voltage input.
SOLUTION: The transfer functions of the power ampliﬁer, motor, and load as shown on
the front endpapers, Conﬁguration 1, were discussed in the Chapter 2 case study. The two
subsystemsareshowninterconnectedinFigure 4.32(a).Differentiatingtheangularposition
ofthemotorandloadoutputbymultiplyingbys,weobtaintheoutputangularvelocity,ωo,as
shown in Figure 4.32(a). The equivalent transfer function representing the three
blocks in Figure 4.32(a) is the product of the individual transfer functions and is shown
in Figure 4.32(b).8
a. Using the transfer function shown in Figure 4.32(b), we can predict the nature of the
step response. The step response consists of the steady-state response generated by the
step input and the transient response, which is the sum of two exponentials generated
by each pole of the transfer function. Hence, the form of the response is
ωot  A  Be100t  Ce1:71t
4.129
b. The damping ratio and natural frequency of the open-loop system can be found by
expanding the denominator of the transfer function. Since the open-loop transfer
function is
Gs 
20:83
s2  101:71s  171
4.130
ωn 
ﬃﬃﬃﬃﬃﬃﬃﬃ
171
p
 13:08; and ζ  3:89 (overdamped).
c. In order to derive the angular velocity response to a step input, we multiply the transfer
function of Eq. (4.130) by a step input, 1/s, and obtain
ωos 
20:83
ss  100s  1:71
4.131
Motor and load
s
Power amp
Convert to
angular velocity
Vp(s)
0.2083
 s(s+1.71)
(  )
(  )
θ
a
b
Ea(s)
o(s)
ωo(s)
100
 (s+100)
20.83
(s+100)(s+1.71)
Vp(s)
ωo(s)
FIGURE 4.32
Antenna azimuth position control system for angular velocity: a. forward path;
b. equivalent forward path
8 This product relationship will be derived in Chapter 5.
Case Studies
203

Expanding into partial fractions, we get
ωos  0:122
s
 2:12  103
s  100
 0:124
s  1:71
4.132
Transforming to the time domain yields
ωot  0:122  2:12  103e100t  0:124e1:71t
4.133
d. First convert the transfer function into the state-space representation. Using
Eq. (4.130), we have
ωos
Vps 
20:83
s2  101:71s  171
4.134
Cross-multiplying and taking the inverse Laplace transform with zero initial
conditions, we have
_ωo  101:71 _ωo  171ωo  20:83vp
4.135
Deﬁning the phase variables as
x1  ωo
(4.136a)
x2  _ωo
(4.136b)
and using Eq. (4.135), the state equations are written as
_x1  x2
(4.137a)
_x2  171x1  101:71x2  20:83vp
(4.137b)
where vp  1, a unit step. Since x1  ωo is the output, the output equation is
y  x1
4.138
Equations (4.137) and (4.138) can be programmed to obtain the step response
using MATLAB or alternative methods described in Appendix H.1 at www.wiley
.com/college/nise.
e. Students who are using MATLAB should now run ch4p4 in Appendix
B. This exercise uses MATLAB to plot the step response.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. Refer to the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 2. Assume an open-loop system (feedback path disconnected)
and do the following:
a. Predict the open-loop angular velocity response of the power ampliﬁer, motor, and
load to a step voltage at the input to the power ampliﬁer.
b. Find the damping ratio and natural frequency of the open-loop system.
204
Chapter 4
Time Response

c. Derive the open-loop angular velocity response of the power ampliﬁer, motor, and load
to a step-voltage input using transfer functions.
d. Obtain the open-loop state and output equations.
e. Use MATLAB to obtain a plot of the open-loop angular velocity
response to a step-voltage input.
Unmanned Free-Swimming Submersible
Vehicle: Open-Loop Pitch Response
Unmanned Free-Swimming Submersible
Vehicle: Open-Loop Pitch Response
An Unmanned Free-Swimming Submersible (UFSS) vehicle is shown in Figure 4.33. The
depth of the vehicle is controlled as follows. During forward motion, an elevator surface
on the vehicle is deﬂected by a selected amount. This deﬂection causes the vehicle to
rotate about the pitch axis. The pitch of the vehicle creates a vertical force that causes the
vehicle to submerge or rise. The pitch control system for the vehicle is used here and in
subsequent chapters as a case study to demonstrate the covered concepts. The block
diagram for the pitch control system is shown in Figure 4.34 and on the back endpapers for
future reference (Johnson, 1980). In this case study, we investigate the time response of
the vehicle dynamics that relate the pitch angle output to the elevator deﬂection input.
Courtesy of the Naval Research Laboratory.
FIGURE 4.33
Unmanned Free-Swimming Submersible (UFSS) vehicle
Pitch gain
–K1
Pitch
command
θc(s)
Commanded
elevator
deflection
ec(s)
2
s+2
Elevator
actuator
Elevator
deflection
e(s)
Vehicle
dynamics
–0.125(s+0.435)
(s+1.23)(s2+ 0.226s+ 0.0169)
Pitch
θ(s)
Pitch rate
sensor
–K2s
+
–
+
–
δ
δ
FIGURE 4.34
Pitch control loop for the UFSS vehicle
Case Studies
205

PROBLEM: The transfer function relating pitch angle, θs, to elevator surface angle,
δes, for the UFSS vehicle is
θs
δes 
0:125s  0:435
s  1:23s2  0:226s  0:0169
4.139
a. Using only the second-order poles shown in the transfer function, predict percent
overshoot, rise time, peak time, and settling time.
b. Using Laplace transforms, ﬁnd the analytical expression for the response of the pitch
angle to a step input in elevator surface deﬂection.
c. Evaluate the effect of the additional pole and zero on the validity of the second-order
approximation.
d. Plot the step response of the vehicle dynamics and verify your conclusions found in (c).
An animation PowerPoint presentation (PPT) demonstrating this system is available for
instructors at www.wiley.com/college/nise. See UFSS Vehicle.
SOLUTION:
a. Usingthepolynomials2  0:226s  0:0169,weﬁndthatω2
n  0:0169 and2ζωn  0:226.
Thus, ωn  0:13 rad/s and ζ  0:869. Hence, %OS  eζπ= ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ2
p
100  0:399%.
From Figure 4.16, ωnTr  2:75, or Tr  21:2 s. To ﬁnd peak time, we use
Tp  π=ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
 48:9 s. Finally, settling time is Ts  4=ζωn  35:4 s.
b. In order to display a positive ﬁnal value in Part d. we ﬁnd the response of the system to a
negative unit step, compensating for the negative sign in the transfer function. Using
partial-fraction expansion, the Laplace transform of the response, θs, is
θ s  
0:125 s  0:435


s s  1:23

 s2  0:226s  0:0169


 2:616 1
s  0:0645
1
s  1:23
 2:68 s  0:113

  3:478
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
0:00413
p
s  0:113

2  0:00413
4.140
Taking the inverse Laplace transform,
θt  2:616  0:0645e1:23t
 e0:113t2:68 cos 0:0643t  3:478 sin 0:0643t
 2:616  0:0645e1:23t  4:39e0:113tcos0:0643t  52:38°
4.141
c. Looking at the relative amplitudes between the coefﬁcient of the e1:23t term and the
cosine term in Eq. (4.165), we see that there is pole-zero cancellation between
the pole at 1.23 and the zero at 0.435. Further, the pole at 1.23 is more than
ﬁve times farther from the jω axis than the second-order dominant poles at
0:113  j 0:0643. We conclude that the response will be close to that predicted.
d. Plotting Eq. (4.141) or using a computer simulation, we obtain the step response shown
in Figure 4.35. We indeed see a response close to that predicted.
206
Chapter 4
Time Response

Students who are using MATLAB should now run ch4p5 in Appendix B.
This exercise uses MATLAB to ﬁnd ζ, ω, Ts, Tp, and Tr and plot a step
response. Table lookup is used to ﬁnd Tr. The exercise applies the
concepts to the problem above.
CHALLENGE: You are now given a problem to test your
knowledge of this chapter’s objectives. This problem uses
the same principles that were applied to the Unmanned
Free-Swimming Submersible vehicle: Ships at sea undergo
motion about their roll axis, as shown in Figure 4.36. Fins
called stabilizers are used to reduce this rolling motion. The
stabilizers can be positioned by a closed-loop roll control
system that consists of components, such as ﬁn actuators
and sensors, as well as the ship’s roll dynamics.
Assume the roll dynamics, which relates the roll-angle
output, θs, to a disturbance-torque input, TD(s), is
θs
TDs 
2:25
s2  0:5s  2:25
4.142
Do the following:
a. Find the natural frequency, damping ratio, peak time, settling time, rise time, and percent
overshoot.
b. Find the analytical expression for the output response to a unit step input in voltage.
c. Use MATLAB to solve a and b and to plot the response found in b.
5
10
15
20
25
30
35
40
45
50
0
0.5
1.0
1.5
2.0
2.5
3.0
Negative pitch angle response (radians)
Time (seconds)
FIGURE 4.35
Negative step response of pitch control for UFSS vehicle
θ
TD(t)
Roll axis
(t)
FIGURE 4.36
A ship at sea, showing roll axis
Case Studies
207

Summary
In this chapter, we took the system models developed in Chapters 2 and 3 and found the
output response for a given input, usually a step. The step response yields a clear picture of
the system’s transient response. We performed this analysis for two types of systems, ﬁrst
order and second order, which are representative of many physical systems. We then
formalized our ﬁndings and arrived at numerical speciﬁcations describing the responses.
For ﬁrst-order systems having a single pole on the real axis, the speciﬁcation of
transient response that we derived was the time constant, which is the reciprocal of the
real-axis pole location. This speciﬁcation gives us an indication of the speed of the transient
response. In particular, the time constant is the time for the step response to reach 63% of its
ﬁnal value.
Second-order systems are more complex. Depending on the values of system
components, a second-order system can exhibit four kinds of behavior:
1. Overdamped
2. Underdamped
3. Undamped
4. Critically damped
We found that the poles of the input generate the forced response, whereas the system
poles generate the transient response. If the system poles are real, the system exhibits
overdamped behavior. These exponential responses have time constants equal to the reciprocals
of the pole locations. Purely imaginary poles yield undamped sinusoidal oscillations whose
radian frequency is equal to the magnitude of the imaginary pole. Systems with complex poles
display underdamped responses. The real part of the complex pole dictates the exponential
decayenvelope,andtheimaginarypartdictatesthesinusoidalradianfrequency.Theexponential
decay envelope has a time constant equal to the reciprocal of the real part of the pole, and the
sinusoid has a radian frequency equal to the imaginary part of the pole.
For all second-order cases, we developed speciﬁcations called the damping ratio, ζ,
and natural frequency, ωn. The damping ratio gives us an idea about the nature of the
transient response and how much overshoot and oscillation it undergoes, regardless of time
scaling. The natural frequency gives an indication of the speed of the response.
We found that the value of ζ determines the form of the second-order natural response:
 If ζ  0, the response is undamped.
 If ζ < 1, the response is underdamped.
 If ζ  1, the response is critically damped.
 If ζ > 1, the response is overdamped.
The natural frequency is the frequency of oscillation if all damping is removed. It acts
as a scaling factor for the response, as can be seen from Eq. (4.28), in which the independent
variable can be considered to be ωnt.
For the underdamped case we deﬁned several transient response speciﬁcations,
including these:
 Percent overshoot, %OS
 Peak time, Tp
 Settling time, Ts
 Rise time, Tr
208
Chapter 4
Time Response

The peak time is inversely proportional to the imaginary part of the complex pole. Thus,
horizontal lines on the s-plane are lines of constant peak time. Percent overshoot is a
function of only the damping ratio. Consequently, radial lines are lines of constant percent
overshoot. Finally, settling time is inversely proportional to the real part of the complex
pole. Hence, vertical lines on the s-plane are lines of constant settling time.
We found that peak time, percent overshoot, and settling time are related to pole location.
Thus,wecandesigntransientresponsesbyrelatingadesiredresponsetoapolelocationandthen
relating that pole location to a transfer function and the system’s components.
The effects of nonlinearities, such as saturation, dead zone, and backlash, were
explored using MATLAB’s Simulink.
In this chapter, we also evaluated the time response using the state-space approach.
The response found in this way was separated into the zero-input response, and the
zero-state response, whereas the frequency response method yielded a total response
divided into natural response and forced response components.
In the next chapter we will use the transient response speciﬁcations developed here
to analyze and design systems that consist of the interconnection of multiple subsystems.
We will see how to reduce these systems to a single transfer function in order to apply the
concepts developed in Chapter 4.
Review Questions
1. Name the performance speciﬁcation for ﬁrst-order systems.
2. What does the performance speciﬁcation for a ﬁrst-order system tell us?
3. In a system with an input and an output, what poles generate the steady-state response?
4. In a system with an input and an output, what poles generate the transient response?
5. The imaginary part of a pole generates what part of a response?
6. The real part of a pole generates what part of a response?
7. What is the difference between the natural frequency and the damped frequency of
oscillation?
8. If a pole is moved with a constant imaginary part, what will the responses have in
common?
9. If a pole is moved with a constant real part, what will the responses have in common?
10. If a pole is moved along a radial line extending from the origin, what will the responses
have in common?
11. List ﬁve speciﬁcations for a second-order underdamped system.
12. For Question 11 how many speciﬁcations completely determine the response?
13. What pole locations characterize (1) the underdamped system, (2) the overdamped
system, and (3) the critically damped system?
14. Name two conditions under which the response generated by a pole can be neglected.
15. How can you justify pole-zero cancellation?
16. Does the solution of the state equation yield the output response of the system? Explain.
17. What is the relationship between sI  A, which appeared during the Laplace transfor-
mation solution of the state equations, and the state-transition matrix, which appeared
during the classical solution of the state equation?
18. Name a major advantage of using time-domain techniques for the solution of the
response.
19. Name a major advantage of using frequency-domain techniques for the solution of the
response.
Review Questions
209

20. What three pieces of information must be given in order to solve for the output
response of a system using state-space techniques?
21. How can the poles of a system be found from the state equations?
Problems
1. Derive the output responses for all parts of Figure 4.7.
[Section: 4.4]
2. Find the output response, c(t), for each of the systems
shown in Figure P4.1. Also ﬁnd the time constant, rise
time, and settling time for each case. [Sections: 4.2, 4.3]
(a)
5
s + 5
1
C(s)
20
s + 20
1
s
s
C(s)
(b)
–
–
FIGURE P4.1
3. Plot the step responses for
Problem 2 using MATLAB.
4. Find the capacitor voltage in the network shown in
Figure P4.2 if the switch closes at t  0. Assume zero
initial conditions. Also ﬁnd the time constant, rise
time, and settling time for the capacitor voltage.
[Sections: 4.2, 4.3]
5 V
t = 0
2 Ω
0.5 F
FIGURE P4.2
5. Plot the step response for
Problem 4 using MATLAB. From
your plots, ﬁnd the time constant, rise
time, and settling time.
6. For the system shown in Figure P4.3, (a) ﬁnd an equation
that relates settling time of the velocity of the mass to M;
(b) ﬁndan equationthatrelatesrise time of thevelocityof
the mass to M. [Sections: 4.2, 4.3]
f(t)
x(t)
M
6 N-s/m
FIGURE P4.3
7. Plot the step response for
Problem 6 using MATLAB. From your
plots, ﬁnd the time constant, rise time,
and settling time. Use M = 1 and M = 2.
8. For each of the transfer functions shown below, ﬁnd
the locations of the poles and zeros, plot them on the
s-plane, and then write an expression for the general
form of the step response without solving for the
inverse Laplace transform. State the nature of each
response (overdamped, underdamped, and so on).
[Sections: 4.3, 4.4]
a. Ts 
2
s  2
b. Ts 
5
s  3s  6
c. Ts 
10s  7
s  10s  20
d. Ts 
20
s2  6s  144
e. Ts  s  2
s2  9
f. Ts  s  5
s  102
9. Use MATLAB to ﬁnd the poles of
[Section: 4.2]
Ts 
s2  2s  2
s4  6s3  4s2  7s  2
10. Find the transfer function and poles of the system
represented in state space here. [Section: 4.10]
210
Chapter 4
Time Response

_x 
3
4
2
2
0
1
4
7
5
2
664
3
775x 
1
2
3
2
664
3
775ut
y   1
7
1  x; x0 
0
0
0
2
6664
3
7775
11. Repeat Problem 10 using MATLAB.
[Section: 4.10]
12. Write the general form of the capacitor voltage for
the
electrical
network
shown
in
Figure
P4.4.
[Section: 4.4]
R1 = 10 kΩ
L = 200 H
C = 10 μF
v(t) = u(t)
R2 = 10 kΩ
+–
FIGURE P4.4
13. Use MATLAB to plot the capacitor
voltage in Problem 12.
[Section: 4.4]
14. Solve for x(t) in the system shown in Figure P4.5
if f(t) is a unit step. [Section: 4.4]
(  )
Ks
fv
M
Ks
fv
f t(  )
2 kg
=
6 N/m
2 N-s/m
u t(  ) N
f t(  )
M
x t
=
=
=
FIGURE P4.5
15. The system shown in Figure P4.6 has a unit step input.
Find the output response as a function of time. Assume
the system is underdamped. Notice that the result will be
Eq. (4.28). [Section: 4.6]
ωn2
ωn2
s2 + 2ζωns + 
R(s)
C(s)
FIGURE P4.6
16. Derive the relationship for damping ratio as a function
of percent overshoot, Eq. (4.39). [Section: 4.6]
17. Calculate the exact response of each system of
Problem 8 using Laplace transform techniques, and
compare the results to those obtained in that problem.
[Sections: 4.3, 4.4]
18. Find the damping ratio and natural frequency for each
second-order system of Problem 8 and show that the
value of the damping ratio conforms to the type of
response (underdamped, overdamped, and so on)
predicted in that problem. [Section: 4.5]
19. A system has a damping ratio of 0.15, a natural
frequency of 20 rad/s, and a dc gain of 1. Use inverse
Laplace transforms to ﬁnd an analytic expression
of the response of the system to a unit-step input.
[Section: 4.6]
20. For each of the second-order systems that follow, ﬁnd
ζ; ωn; Ts; Tp; Tr, and %OS. [Section: 4.6]
a. Ts 
16
s2  3s  16
b. Ts 
0:04
s2  0:02s  0:04
c. Ts 
1:05  107
s2  1:6  103s  1:05  107
21. Repeat Problem 20 using
MATLAB. Have the computer
program estimate the given speciﬁca-
tions
and
plot
the
step
responses.
Estimate the rise time from the plots.
[Section: 4.6]
22. Use MATLAB’s LTI Viewer and
obtain settling time, peak time,
rise time, and percent overshoot for
each
of
the
systems
in
Problem
20.
[Section: 4.6]
23. For each pair of second-order system speciﬁcations that
follow,ﬁndthelocationofthesecond-orderpairofpoles.
[Section: 4.6]
a. %OS  12%; Ts  0:6 second
b. %OS  10%; Tp  5 seconds
c. Ts  7 seconds; Tp  3 seconds
24. Find the transfer function of a second-order system
that yields a 15% overshoot and a settling time of
0.7 second. [Section: 4.6]
25. For the system shown in Figure P4.7, do the following:
[Section: 4.6]
a. Find the transfer function Gs  Xs=Fs.
b. Find ζ; ωn; %OS; Ts; Tp, Tr, and Cﬁnal for a unit-step
input.
Problems
211

20 N/m
2 N-s/m
f(t)
x(t)
5 kg
FIGURE P4.7
26. For the system shown in Figure P4.8, a step torque is
applied at θ1t. Find:
a. The transfer function, Gs  θ2s=Ts
b. The percent overshoot, settling time, and peak time
for θ2t. [Section: 4.6]
2 kg-m2
T(t)
1(t)
  2(t)
1 N-m-s/rad
1 N-m/rad
θ
θ
FIGURE P4.8
27. The derivation of Eq. (4.42) to calculate the settling
time for a second-order system assumed an under-
damped system ζ < 1. In this problem you will
calculate a similar result for a critically damped
system ζ  1.
a. Show that the unit-step response for a system with
transferfunctionCs
Rs
a2
sa2 isct 1eat1at.
(Note: ℒ
1
sa2


teat. Optional: You can derive
this result similarly to Example 2.2.)
b. Show that the settling time can be found by solving
for Ts in eaTs1  aTs  0:02.
c. Use MATLAB to plot ex1  x 
0:02 vs. x. Use the plot to show
that Ts  5:834
a
.
28. An autonomous robot to pick asparagus (Dong, 2011)
capable of following planting rows has an orientation
system with transfer function
θ
θref

53:176
4:6s2  31:281s  53:176
Make a sketch of θt in response to θref t  3ut.
Indicate in your plot Cfinal; Cmax; Tp, and Ts. (Hint: You
may use the result of Problem 27c).
29. Figure P4.9 shows ﬁve step responses of an auto-
matic voltage regulation system as one of the system
parameters varies (Gozde, 2011). Assume for all ﬁve
responses that they are those of a second-order
system with an overshoot of 20%. Make a sketch
of the positions of the poles in the complex plane for
each one of the responses. Label the curves A through
E from left to right.
0
0.5
1.0
1.5
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0
Time (seconds)
Voltage change Vt(s) (V)
FIGURE P4.9
Time responses for an automatic voltage regulation
system
30. Derive the unit step response for each transfer function in
Example 4.8. [Section: 4.7]
31. Find the percent overshoot, settling time, rise time,
and peak time for Ts 
14:65
s2  0:842s  2:93s  5
[Section: 4.7]
32. For each of the three unit step responses shown in
Figure P4.10, ﬁnd the transfer function of the system.
[Sections: 4.3, 4.6]
0.05
0
0.1
0.15
0.2
0.25
Time (seconds)
Response
(a)
0
1
2
3
FIGURE P4.10
( ﬁgure continues)
212
Chapter 4
Time Response

1
0
2
3
4
5
0
5
10
15
20
25
Time (seconds)
Response
(b)
5
0
10
15
20
25
Time (seconds)
Response
(c)
0.2
0
0.4
0.6
0.8
1.0
1.2
1.4
FIGURE P4.10
(Continued)
33. For the following response functions, determine if pole-
zero cancellation can be approximated. If it can, ﬁnd
percent overshoot, settling time, rise time, andpeak time.
[Section: 4.8].
a. Cs 
s  4
ss  2s2  3s  10
b. Cs 
s  2:5
ss  2s2  4s  20
c. Cs 
s  2:2
ss  2s2  s  5
d. Cs 
s  2:01
ss  2s2  5s  20
34. Using MATLAB, plot the time
response of Problem 33a and from
the plot determine percent overshoot,
settling time, rise time, and peak time.
[Section: 4.8]
35. Find peak time, settling time, and percent overshoot for
only those responses below that can be approximated as
second-order responses. [Section: 4.8]
a. ct  0:003500  0:001524e4t
0:001976e3tcos22:16t
0:0005427e3tsin22:16t
b. ct  0:05100  0:007353e8t
0:007647e6tcos8t
0:01309e6tsin8t
c. ct  0:009804  0:0001857e5:1t
0:009990e2tcos9:796t
0:001942e2tsin9:796t
d. ct  0:007000  0:001667e10t
0:008667e2tcos9:951t
0:0008040e2tsin9:951t
36. For each of the following transfer functions with zeros,
ﬁnd the component parts of the unit step response:
(1) the derivative of the response without a zero and
(2) the response without a zero, scaled to the negative
of the zero value. Also, ﬁnd and plot the total response.
Describe any nonminimum-phase behavior. [Section: 4.8]
a. Gs 
s  2
s2  3s  36
b. Gs 
s  2
s2  3s  36
37. Use MATLAB’s Simulink to obtain
the step response of a system,
Gs 
1
s2  3s  10
under the following conditions: [Sec-
tion: 4.9]
a. The system is linear and driven by an
ampliﬁer whose gain is 10.
b. An ampliﬁer whose gain is 10 drives the
system.
The
ampliﬁer
saturates
at
 0:25 volts. Describe the effect of
the saturation on the system’s output.
c. An ampliﬁer whose gain is 10 drives the
system.
The
ampliﬁer
saturates
at
 0:25 volts. The system drives a 1:1
gear train that has backlash. The dead-
band width of the backlash is 0.02 rad.
Describe the effect of saturation and
backlash on the system’s output.
38. A system is represented by the state and
output equations that follow. Without
solving the state equation, ﬁnd the poles of the system.
[Section: 4.10]
(Problem continues)
Problems
213

(Continued)
_x 
1
3
4
2
"
#
x 
3
1
"
#
ut
y 
5
1

	
x
39. A system is represented by the state and
output equations that follow. Without
solving the state equation, ﬁnd [Section: 4.10]
a. the characteristic equation;
b. the poles of the system
_x 
0
2
3
0
6
5
1
4
2
2
664
3
775x 
0
1
1
2
664
3
775ut
y   1
2
0 x
40. Given the following state-space
representation of a system, ﬁnd Y(s):
[Section: 4.10]
_x 
1
2
3
1
"
#
x 
1
1
"
#
sin 3t
y 
1
2

	
x; x0 
3
1
"
#
41. Given the following system represented in
state space, solve for Y(s) using the
Laplace transform method for solution of the state
equation: [Section: 4.10]
_x 
0
1
0
2
4
1
0
0
6
2
664
3
775x 
0
0
1
2
664
3
775et
y 
0
0
1

	
x; x0 
0
0
0
2
664
3
775
42. Solve the following state equation and output
equation for y(t), where u(t) is the unit
step. Use the Laplace transform method. [Section: 4.10]
_x 
3
0
1
1
"
#
x 
2
1
"
#
ut
y 
1
0

	
x; x0 
2
0


43. Solve for y(t) for the following system represented
in state space, where u(t) is the unit step. Use the
Laplace transform approach to solve the state equation.
[Section: 4.10]
_x 
3
1
0
0
6
1
0
0
5
2
664
3
775x 
0
1
1
2
664
3
775ut
y 
0
1
1

	
x; x0 
0
0
0
2
6664
3
7775
44. Use MATLAB to plot the step
response of Problem 43.
[Section: 4.10]
45. Repeat Problem 43 using
MATLAB’s Symbolic Math Toolbox
and Eq. (4.96). In addition, run
your program with an initial condition,
x0 
1
1
0
2
4
3
5: Section : 4:10
46. Using classical (not Laplace) methods only,
solve for the state-transition matrix, the state
vector, and the output of the system represented here.
[Section: 4.11]
_x 
0
1
1
5
"
#
x;
y 
1
2

	
x;
x0 
1
0
"
#
47. Using classical (not Laplace) methods only,
solve for the state-transition matrix, the state
vector, and the output of the system represented here,
where u(t) is the unit step: [Section: 4.11]
_x 
0
1
1
0
"
#
x 
0
1
"
#
ut
y 
3
4

	
x; x0 
0
0
"
#
48. Solve for y(t) for the following system
represented in state space, where u(t) is
214
Chapter 4
Time Response

the unit step. Use the classical approach to solve the
state equation. [Section: 4.11]
_x 
2
1
0
0
0
1
0
6
1
2
664
3
775x 
1
0
0
2
664
3
775ut
y 
1
0
0

	
x; x0 
0
0
0
2
6664
3
7775
49. Repeat Problem 48 using MATLAB’s
Symbolic Math Toolbox and
Eq.(4.109). In addition, run your program
with an initial condition,
x0 
1
1
0
2
4
3
5: Section : 4:11
50. Using methods described in Appendix H.1
located at www.wiley.com/college/nise,
simulate the following system and plot the step
response. Verify the expected values of percent over-
shoot, peak time, and settling time.
Ts 
1
s2  0:8s  1
51. Use MATLAB to simulate the
following system and plot the
output, y(t), for a step input. Mark on the
plot the steady-state value, percent
overshoot, and the rise time, peak time,
and settling time.
_x 
0
1
0
12
8
1
0
0
2
2
64
3
75x 
0
0
1
2
64
3
75ut
yt 
1
1
0

	
x; x0 
0
0
0
2
64
3
75
52. A human responds to a visual cue with a physical
response, as shown in Figure P 4.11. The transfer
function that relates the output physical response, P(s),
to the input visual command, V(s), is (Stefani, 1973).
Gs  Ps
Vs 
s  0:5
s  2s  5
Do the following:
a. Evaluate the output response for a unit step input
using the Laplace transform.
b. Represent the transfer function in state
space.
c. Use MATLAB to simulate the
system and obtain a plot of
the step response.
53. Upper motor neuron disorder patients can beneﬁt and
regain useful function through the use of functional
neuroprostheses. The design requires a good under-
standing of muscle dynamics. In an experiment to
determine muscle responses, the identiﬁed transfer
function was (Zhou, 1995)
Ms  2:5e0:008s1  0:172s1  0:008s
1  0:07s21  0:05s2
Find the unit step response of this transfer function.
Step 1: Light source on
Step 2: Recognize light source
Step 3: Respond to light source
P(t)
FIGURE P4.11
Steps in determining the transfer function relating output physical response to
the input visual command
Problems
215

54. When electrodes are attached to the mastoid bones (right
behind the ears) and current pulses are applied, a person
will sway forward and backward. It has been found
that the transfer function from the current to the
subject’s angle (in degrees) with respect to the vertical
is given by (Nashner, 1974)
θs
Is 
5:80:3s  1e0:1s
s  1s2=1:22  0:6s=1:2  1
a. Determine whether a dominant pole approximation
can be applied to this transfer function.
b. Find the body sway caused by a 250 μA pulse of
150 msec duration.
55. A MOEMS (optical MEMS) is a MEMS (Micro
Electromechanical Systems) with an optical ﬁber
channel that takes light generated from a laser diode.
It also has a photodetector that measures light intensity
variations and outputs voltage variations proportional
to small mechanical device deﬂections. Additionally, a
voltage input is capable of deﬂecting the device. The
apparatus can be used as an optical switch or as a
variable optical attenuator, and it does not exceed
2000 μm in any dimension. Figure P4.12 shows
input-output signal pairs used to identify the parameters
of the system. Assume a second-order transfer function
and ﬁnd the system’s transfer function (Borovic, 2005).
Open-Loop Responses
10
  8
  6
  4
  2
  0
–2
Volt.
x[nm]: V[V]
Open-Loop Response
(simulated, d = 0.8)
0                            500                          1000                         1500
t[us]
Open-Loop Response
(experimental)
FIGURE P4.129
56. The response of the deﬂection of a ﬂuid-ﬁlled catheter to
changes in pressure can bemodeled usingasecond-order
model. Knowledge of the parameters of the model is
important because in cardiovascular applications the
undamped natural frequency should be close to ﬁve
times the heart rate. However, due to sterility and other
considerations, measurement of the parameters is
difﬁcult. A method to obtain transfer functions using
measurementsoftheamplitudesoftwoconsecutivepeaks
of the response and their timing has been developed
(Glantz, 1979). Assume that Figure P4.13 is obtained
from catheter measurements. Using the information
shown and assuming a second-order model excited by a
unit step input, ﬁnd the corresponding transfer function.
System: T
Time (sec): 0.0505
Amplitude: 1.15
Step Response
Time (sec)
Amplitude
0
0.05
0.1
0.15
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
System: T
Time (sec): 0.0674
Amplitude: 0.923
FIGURE P4.13
9 Borovic B., Liu A.Q., Popa D., Lewis F.L. Open-loop versus closed-loop
control of MEMS devices: choices and issues J. Micromech. Microeng.
Vol. 15, 2005. Figure 4, p. 1919.
216
Chapter 4
Time Response

57. Several factors affect the workings of the kidneys.
For example, Figure P4.14 shows how a step change
in arterial ﬂow pressure affects renal blood ﬂow in rats. In
the “hot tail” part of the experiment, peripheral thermal
receptor stimulation is achieved by inserting the rat’s tail
inheatedwater.Variationsbetweendifferenttestsubjects
are indicated by the vertical lines. It has been argued that
the “control” and “hot tail” responses are identical except
for their steady-state values (DiBona, 2005).
a. UsingFigure P4.14,obtainthenormalizedCfinal  1
transfer functions for both responses.
b. Use MATLAB to prove or disprove
the assertion about the
“control” and “hot tail” responses.
HOT TAIL
CONTROL
Time (sec)
0.030
0.025
0.020
0.015
0.010
0.005
0.000
Step response
–1             0              1             2             3             4             5             6
FIGURE P4.1410
58. The transfer function of a nano-positioning device
capable of translating biological samples within a few
μm uses a piezoelectric actuator and a linear variable
differential transformer (LDVT) as a displacement sensor.
The transfer function from input to displacement has been
found to be (Salapaka, 2002)
Gs 
9:7  104s2  14400s  106:6  106
s2  3800s  23:86  106s2  240s  2324:8  103
Use a dominant-pole argument to ﬁnd an equivalent
transfer function with the same numerator but only three
poles.
Use MATLAB to ﬁnd the actual
size and approximate system
unit step responses, plotting
them on the same graph.
Explain the differences between both responses given
that both pairs of poles are so far apart.
59. Atsomepointintheirlivesmostpeoplewillsufferfromat
least oneonsetof lowback pain.Thisdisordercan trigger
excruciating pain and temporary disability, but its causes
are hard to diagnose. It is well known that low back pain
alters motor trunk patterns; thus it is of interest to study
thecausesforthesealterationsandtheirextent.Duetothe
different possible causes of this type of pain, a “control”
group of people is hard to obtain for laboratory studies.
However, pain can be stimulated in healthy people and
muscle movement ranges can be compared. Controlled
back pain can be induced by injecting saline solution
directly into related muscles or ligaments. The transfer
function from infusion rate to pain response was
obtainedexperimentallybyinjectinga5%salinesolution
at six different infusion rates over a period of 12 minutes.
Subjects verbally rated their pain every 15 seconds on a
scale from 0 to 10, with 0 indicating no pain and 10
unbearable pain. Several trials were averaged and the
data was ﬁtted to the following transfer function:
Gs 
9:72  108s  0:0001
s  0:0092s2  0:018s  0:0001
For experimentation, it is desired to build an automatic
dispensing system to make the pain level constant as
shown in Figure P4.15. It follows that ideally the
injection system transfer function has to be
Ms 
1
Gs
to obtain an overall transfer function MsGs ≈1.
However, for implementation purposes M(s) must
have at least one more pole than zeros (Zedka, 1999).
Find a suitable transfer function, M(s) by inverting G(s)
and adding poles that are far from the imaginary axis.
( )
G s
Constant
infusion
rate  
Constant
back pain
Human Response
Infusion Pump
( )
M s
FIGURE P4.15
60. An artiﬁcial heart works in closed loop by varying its
pumping rate according to changes in signals from the
recipient’s nervous system. For feedback compensation
designitisimportanttoknowtheheart’sopen-looptransfer
function. To identify this transfer function, an artiﬁcial
heart is implanted in a calf while the main parts of the
original heart are left in place. Then the atrial pumping rate
in the original heart is measured while step input changes
are effected on the artiﬁcial heart. It has been found that, in
general, the obtained response closely resembles that of a
second-order system. In one such experiment it was
found that the step response has a %OS = 30% and a
time of ﬁrst peak Tp  127 sec (Nakamura, 2002). Find
the corresponding transfer function.
10 DiBona, G.F. Physiology in perspective: The Wisdom of the Body.
Neural control of the kidney. Am. J. Physiol. Regul. Integr. Comp. Physiol
Vol. 289, 2005. Fig. 6, p. R639. Used with permission.
Problems
217

61. An observed transfer function from voltage potential to
force in skeletal muscles is given by (Ionescu, 2005)
Ts 
450
s  5s  20
a. Obtain the system’s impulse response.
b. Integrate the impulse response to ﬁnd the step response.
c. Verify the result in Part b by obtaining the step
response using Laplace transform techniques.
62. In typical conventional aircraft, longitudinal
ﬂight
model linearization results in transfer functions with
two pairs of complex conjugate poles. Consequently,
the natural response for these airplanes has two modes
in their natural response. The “short period” mode is
relatively well-damped and has a high-frequency oscilla-
tion. The “plugoid mode” is lightly damped and its
oscillation frequency is relatively low. For example, in
a speciﬁc aircraft the transfer function from wing elevator
deﬂectiontonoseangle(angleofattack)is(McRuer,1973)
θs
δes 

26:12s  0:0098s  1:371
s2  8:99  103s  3:97  103s2  4:21s  18:23
a. Find which of the poles correspond to the short
period mode and which to the phugoid mode.
b. Peform a “phugoid approximation” (dominant-pole
approximation), retaining the two poles and the zero
closest to the; ω-axis.
c. Use MATLAB to compare the step
responses of the original
transfer function and the
approximation.
63. A crosslapper is a machine that
takes as an input a light ﬁber
fabric and produces a heavier fabric by
laying the original fabric in layers
rotated
by
90
degrees.
A
feedback
system is required in order to maintain
consistent product width and thickness
by controlling its carriage velocity.
The transfer function from servomotor
torque, Tm(s), to carriage velocity,
Y(s), was developed for such a machine
(Kuo, 2008). Assume that the transfer
function is:
Gs  Ys
Tms

33s4  202s3  10061s2  24332s  170704
s7  8s6  464s5  2411s4  52899s3  167829s2  913599s  1076555
a. Use MATLAB to ﬁnd the partial fraction
residues and poles of G(s).
b. Find
an
approximation
to
G(s)
by
neglecting
the
second-order
terms
found in a.
c. Use MATLAB to plot on one graph the
step response of the transfer function
given
above
and
the
approximation
found in b. Explain the differences
between the two plots.
64. Although the use of fractional
calculus in control systems is
not new, in the last decade there is
increased
interest
in
its
use
for
several reasons. The most relevant are
that fractional calculus differential
equations
may
model
certain
systems
with
higher
accuracy
than
integer
differential
equations,
and
that
fractional calculus compensators might
exhibit
advantageous
properties
for
control system design. An example of a
transfer
function
obtained
through
fractional calculus is:
Gs 
1
s2:5  4s1:7  3s0:5  5
This function can be approximated with
an integer rational transfer function
(integer powers of s) using Oustaloup’s
method (Xue, 2005). We ask you now to do
a little research and consult the afore-
mentioned reference to ﬁnd and run an
M-ﬁle that will calculate the integer
rational transfer function approxima-
tion to G(s) and plot its step response.
65. Mathematical modeling and control of pH processes
are quite challenging since the processes are highly
nonlinear, due to the logarithmic relationship between
the concentration of hydrogen ions [H+] and pH level.
The transfer function from input pH to output pH is
Gas  Yas
Yas  14:49e3:3s
1478:26s  1,whereweassumeadelay
of 3.3 seconds. Gas is a model for the anaerobic process
in a wastewater treatment system in which methane
bacteria need the pH tobe maintainedin itsoptimal range
from 6.8 to 7.2 (Jiayu, 2009). Similarly, (Elaraﬁ, 2008)
used empirical techniques to model a pH neutralization
plantasasecond-ordersystemwithapuredelay,yielding
the following transfer function relating output pH to
input pH:
Gps  Yps
Xps 
1:716  105e25s
s2  6:989  103s  1:185  106
where we assume a delay of 25 seconds.
218
Chapter 4
Time Response

a. Find analytical expressions for the unit-step responses
ya(t) and yp(t) for the two processes, Ga(s) and Gp(s).
(Hint: Use the time shift theorem in Table 2.2).
b. Use Simulink to plot ya(t) and
yp(t) on a single graph.
66. Using wind tunnel tests, insect ﬂight dynamics can be
studied in a very similar fashion to that of man-made
aircraft. Linearized longitudinal ﬂight equations for a
bumblebee have been found in the unforced case to be
_u
_w
_q
_θ
2
66664
3
77775

8:792  103
0:56  103
1:0  103
13:79  103
0:347  103
11:7  103
0:347  103
0
0:261
20:8  103
96:6  103
0
0
0
1
0
2
66664
3
77775
u
w
q
θ
2
66664
3
77775
where u= forward velocity; w= vertical velocity, q =
angular pitch rate at center of mass, and θ  pitch angle
betweentheﬂightdirectionandthehorizontal(Sun,2005).
a. Use MATLAB to obtain the
system’s eigenvalues.
b. Write the general form of the
state-transition matrix. How many
constants would have to be found?
67. A dc-dc converter is a device that takes as an
input an unregulated dc voltage and provides
a regulated dc voltage as its output. The output voltage
may be lower (buck converter), higher (boost converter),
or the same as the input voltage. Switching dc-dc
converters have a semiconductor active switch (BJT or
FET) that is closed periodically with a duty cycle d in a
pulse width modulated (PWM) manner. For a boost
converter, averaging techniques can be used to arrive
at the following state equations (Van Dijk, 1995):
L diL
dt
 1  duc  Es
C duC
dt  1  diL  uC
R
where L and C are, respectively, the values of internal
inductance and capacitance; iL is the current through the
internal inductor; R is the resistive load connected to the
converter; Es is the dc input voltage; and the capacitor
voltage, uC, is the converter’s output.
a. Write the converter’s equations in the form
_x  Ax  Bu
y  Cx
assuming d is a constant.
b. Using the A, B, and C matrices of Part a, obtain the
converter’s transfer function UCs
Ess :
68. An IPMC (ionic polymer-metal composite)
is a Naﬁon sheet plated with gold on both
sides. An IPMC bends when an electric ﬁeld is applied
across its thickness. IPMCs have been used as robotic
actuators in several applications and as active catheters
in biomedical applications. With the aim of improving
actuator settling times, a state-space model has been
developed for a 20 mm  10 mm  0:2 mm polymer
sample (Mallavarapu, 2001):
_x1
_x2
"
#

8:34
2:26
1
0
"
#
x1
x2
"
#

1
0
"
#
u
y 
12:54
2:26

	 x1
x2
"
#
whereuistheappliedinput voltageandyisthedeﬂection
at one of the material’s tips when the sample is tested in a
cantilever arrangement.
a. Find the state-transition matrix for the system.
b. From Eq. (4.109) in the text, it follows that if a system
has zero initial conditions, the system output for any
input can be directly calculated from the state-space
representation and the state-transition matrix using
yt  Cxt 
Z
CΦt  τ Buτdτ
Use this equation to ﬁnd the zero initial condition unit
step response of the IPMC material sample.
c. Use MATLAB to verify that your
step response calculation in
Part b is correct.
69. Figure P4.16 shows the step response of an electric
vehicle’s mechanical brakes when the input is the drive
torque (N-m) and the output is the hydraulic brake
pressure (bar) (Ringdorfer, 2011).
40
600
0
200
400
Traction motor drive torque TEM [Nm]
20
0
0.8
0.9
1.1
1.2
t [s]
Hydraulic brake pressure p (bar)
1.3
1.4
1.5
1.6
1
FIGURE P4.16
Step response of an electric vehicle’s mechanical
brake11
11 Ringdorfer M., and Horn M. Development of a Wheel Slip Actuator
Controller for Electric Vehicles using Energy Recuperation and Hydraulic
Brake Control, 2011 IEEE International Conference on Control Applica-
tions (CCA), Denver, CO, USA. September 28–30, 2011, pp. 313–318.
Figure 4, p. 315. Modelling Symposium (AMS), 2012 Sixth Asia by IEEE.
Reproduced with permission of IEEE in the format Republish in a book via
Copyright Clearance Center.
Problems
219

a. Find the transfer function of the system.
b. Use the values of the parameters for the transfer
function obtained in Part a to ﬁnd an expression for
the brake pressure as a function of time.
c. Find the output in bars of the system 0.2 sec after the
inputisapplied.CheckyourresultagainstFigureP4.16.
70. Figure P4.17 shows the free-body diagrams for planetary
gear components used in the variable valve timing (VVT)
system of an internal combustion engine (Ren, 2011).
Hereanelectricmotorisusedtodrive the carrier.Analysis
showed that the electric motor with planetary gear
load (Figure P4.17) may be represented by the following
equation:
Ωcs  GesEas  GmsTcams
where Ωcs is the output carrier angular speed in rad/s,
Ea(s) is the input voltage applied to the armature, and
Tcamsistheinputloadtorque.Thevoltageinputtransfer
function, Ge(s), is
Ges ≅
Kτ
RmJs  D  KτKm

45
0:2s  1
and the load torque input transfer function, Gm(s), is
Gms ≅
Rmk
RmJs  D  KτKm

5
0:2s  1
Find an analytical expression for the output carrier
angular speed, ωct, if a step voltage of 100 volts is
applied at t = 0 followed by an equivalent load torque
of 10 N-m, applied at t = 0.4 sec.
2
3
rp
Tcam
Tload
F34
F13
F23
F32
F43
θ=20°
θ
θ
α
α
ωr
ωp
ωs
ωc
rp
rs
1
(a) Planetary System
(b) Sun Gear 4
(d) Carrier 2
(c) Planet Gear 3
4
FIGURE P4.17
Free-body diagrams of planetary gear system
components12
71. A
drive
system
with
elastically
coupled
load
(Figure P4.18) has a motor that is connected to the load
via a gearbox and a long shaft.
Thesystemparametersare:JM = drive-sideinertia =
0.0338 kg-m2, JL = load-side inertia = 0.1287 kg-m2,
K = CT = torsional spring constant = 1700 N-m/rad, and
D = damping coefﬁcient = 0.15 N-m-s/rad.
This system can be reduced to a simple two-
inertia model that may be represented by the following
transfer function, relating motor shaft speed output,
Ωs, to electromagnetic torque input (Thomsen, 2011):
Gs  Ωs
Tems 
1
sJM  JL 
JL
CT
s2  D
CT
s  1
JMJL
CTJM  JL s2  D
CT
s  1
Assume the system is at standstill
at t = 0, when the electromagnetic
torque, Tem, developed by the motor
changes from zero to 50 N-m. Find and plot
on one graph, using MATLAB or any other
program, the motor shaft speed, ωt,
rad/sec, for the following two cases:
a. No load torque is applied and, thus,
ω  ωnl.
b. A
load
torque,
TL  0:2 ωt
N-m
is
applied and ω  ωL.
Drive
motor
Gear
box
Speed
signal
Inertia
Load
Torsional
driveshaft
Stator
currents
S
M
FIGURE P4.18
Partial topology of a typical motor drive system13
72. An inverted pendulum mounted on a motor-driven cart
was presented in Problem 30 of Chapter 3. The nonlinear
state-space equations representing that system were
linearized (Prasad, 2012) around a stationary point
corresponding to the pendulum point-mass, m, being in
the upright position x0  0 at t = 0), when the force
12 Ren Z., and Zhu G. G. Modeling and Control of an Electric Variable
Valve Timing System for SI and HCCI Combustion Mode Transition.
American Control Conference, San Francisco, CA, 2011, pp. 979–984.
Figure 2, p. 980. Reproduced with permission of IEEE in the format
Republish in a book via Copyright Clearance Center.
13 Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-Based
State Space Control, and Model-Based Predictive Control for Drive
Systems With Elastically Coupled Loads—A Comparative Study. IEEE
Transactions On Industrial Electronics, Vol. 58, No. 8, August 2011,
pp. 3647–3657. Portion of Figure 1, p. 3648. American Control Conference
(ACC), 2011 by IEEE. Reproduced with permission of IEEE in the format
Republish in a book via Copyright Clearance Center.
220
Chapter 4
Time Response

applied to the cart was zero (u0  0). The state-space
model developed in that problem is
_x  A x  Bu
The state variables are the pendulum angle relative to the
y-axis, θ, its angular speed, θ´, the horizontal position
of the cart, x, and its speed, x´. The horizontal position
of m (for a small angle, θ), xm  x  l sin θ  x  lθ, was
selected to be the output variable.
Given the state-space model
developed in that problem along
with the output equation you developed in
that problem, use MATLAB (or any other com-
puter program) to ﬁnd and plot the output,
xm(t), in meters, for an input force, u(t),
equal to a unit impulse, δ(t),in Newtons.14
DESIGN PROBLEMS
DESIGN PROBLEMS
73. Find an equation that relates 2% settling time to the
value of fv for the translational mechanical system
shown in Figure P4.19. Neglect the mass of all compo-
nents. [Section: 4.6]
fv
2 N/m
f(t)
FIGURE P4.19
74. Consider the translational mechanical system shown in
Figure P4.20. A 1-pound force, f(t), is applied at t  0.
If fv  1, ﬁnd K and M such that the response is character-
ized by a 4-second settling time and a 1-second peak time.
Also, what is the resulting percent overshoot? [Section: 4.6]
fv
K
f (t)
x(t)
M
FIGURE P4.20
75. Given the translational mechanical system of Figure
P4.20, where K  1 and f(t) is a unit step, ﬁnd the values
of M and fv to yield a response with 17% overshoot and a
settling time of 10 seconds. [Section: 4.6]
76. Find J and K in the rotational system shown in
Figure P4.21 to yield a 30% overshoot and a settling
time of 3 seconds for a step input in torque. [Section: 4.6]
1
K
T(t)
J
FIGURE P4.21
77. Given the system shown in Figure P4.22, ﬁnd the
damping, D, to yield a 30% overshoot in output angular
displacement for a step input in torque. [Section: 4.6]
D
θ
2
T(t)
1
N2 = 5
N1 = 25
N4 = 5
N3 = 10
1
4 N-m/rad
1 kg-m
  (t)
FIGURE P4.22
78. For the system shown in Figure P4.23, ﬁnd N1=N2 so
that the settling time for a step torque input is 16 seconds.
[Section: 4.6]
T(t)
1 N-m/rad
1 N-m-s/rad
 1 kg-m2
N1
N2
 1 kg-m2
FIGURE P4.23
79. Find M and K, shown in the system of Figure P4.24, to
yieldx(t)with16%overshootand20secondssettlingtime
for a step input in motor torque, Tmt. [Section: 4.6]
For the motor:
Ja = 1 kg-m2
Da = 1 N-m-s/rad
Ra = 1 Ω
Kb = 1 V-s/rad
Kt = 1 N-m/A
N2 = 20
N1 = 10
K
 J = 1 kg-m2
Ideal
gear 1:1
fv = 1 N-s/m
M
x(t)
Motor
Tm(t)
Radius = 2 m
FIGURE P4.24
80. If vit is a step voltage in the network shown in Figure
P4.25, ﬁnd the value of the resistor such that a 20%
overshoot in voltage will be seen across the capacitor if
C  106 F and L  1 H. [Section: 4.6]
R
C
L
+–
vi(t)
FIGURE P4.25
14 Hint: Use the command “impulseplot” over a time period from 0 to 11.0
seconds with a step of 0.1 seconds.
Problems
221

81. If vit is a step voltage in the network shown in
Figure P4.25, ﬁnd the values of R and C to yield a 20%
overshoot and a 1 ms settling time for vct if L  1 H.
[Section: 4.6]
82. Given the circuit of Figure P 4.25, where C  10 μF, ﬁnd
R and L to yield 15% overshoot with a settling time of
7msforthecapacitorvoltage.Theinput,v(t),isaunitstep.
[Section: 4.6]
83. For the circuit shown in Figure P4.26, ﬁnd the values of
R2 and C to yield 8% overshoot with a settling time of
1 ms for the voltage across the capacitor, with vit as a
step input. [Section: 4.6]
1 H
+
+
–
–
R2
1 MΩ
vi(t)
vc(t)
C
FIGURE P4.26
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
84. Control of HIV/AIDS. In Chapter 3,
Problem 31, we developed a linearized
state-space model of HIV infection. The model assumed
thattwo different drugswereusedto combatthe spread of
the HIV virus. Since this book focuses on single-input,
single-output systems, only one of the two drugs will be
considered. We will assume that only RTIs are used as an
input. Thus, in the equations of Chapter 3, Problem 31,
u2  0 (Craig, 2004).
a. Show that when using only RTIs in the linearized
system of Problem 31, Chapter 3, and substituting
the typical parameter values given in the table of
Problem 31c, Chapter 3, the resulting state-space
representation for the system is given by
_T
_T*
_v
2
664
3
775 
0:04167
0
0:0058
0:0217
0:24
0:0058
0
100
2:4
2
64
3
75

T
T*
v
2
64
3
75 
5:2
5:2
0
2
64
3
75u1
y 
0
0
1

	
T
T*
v
2
64
3
75
b. Obtain the transfer function from RTI efﬁciency to
virus count; namely, ﬁnd Ys
U1s.
c. Assuming RTIs are 100% effective, what will be the
steady-state change of virus count in a given infected
patient? Express your answer in virus copies per ml
of plasma. Approximately how much time will the
medicine take to reach its maximum possible
effectiveness?
85. Hybrid vehicle. Assume that the car motive dynamics
for a hybrid electric vehicle (HEV) can be described by
the transfer function
ΔVs
ΔFes 
1
1908s  10
whereAVisthechangeofvelocityinm/secandΔFeisthe
change in excess motive force in N necessary to propel
the vehicle.
a. Find an analytical expression for Δv(t) for a step
change in excess motive force ΔFe = 2650 N.
b. Simulate the system using
MATLAB. Plot the expression
found in Part a together with your
simulated plot.
86. Parabolic trough collector. Figure P4.27 illustrates
the results of an open-loop step-response experiment
performed on a parabolic trough collector setup
(Camacho, 2012). In this experiment, the ﬂuid ﬂow
on the system is suddenly decreased 1 liter/sec at t = 0
hours, resulting in a temperature increase as shown in
Figure P4.27. Use the ﬁgure to ﬁnd an approximate
transfer function for the system. (Note: Since no further
information is given on the system dynamics and due to
visual approximations, several solutions are possible.)
8
7
6
5
4
3
2
1
00
0.02
0.04
0.06
0.08
0.1
0.12
0.14
Time (hours)
Outlet Oil Temperature Change (C)
FIGURE P4.27
222
Chapter 4
Time Response

Cyber Exploration Laboratory
Experiment 4.1
Objective
To evaluate the effect of pole and zero location upon the time response of
ﬁrst- and second-order systems.
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1. Given the transfer function Gs 
a
s  a, evaluate settling time and rise time for the
following values of a: 1, 2, 3, 4. Also, plot the poles.
2. Given the transfer function Gs 
b
s2  as  b:
a. Evaluate percent overshoot, settling time, peak time, and rise time for the following
values: a  4; b  25. Also, plot the poles.
b. Calculate the values of a and b so that the imaginary part of the poles remains the
same but the real part is increased two times over that of Prelab 2a, and repeat
Prelab 2a.
c. Calculate the values of a and b so that the imaginary part of the poles remains the
same but the real part is decreased by one half over that of Prelab 2a, and repeat
Prelab 2a.
3.
a. For the system of Prelab 2a, calculate the values of a and b so that the real part of the
poles remains the same but the imaginary part is increased two times over that of
Prelab 2a, and repeat Prelab 2a.
b. For the system of Prelab 2a, calculate the values of a and b so that the real part of the
poles remains the same but the imaginary part is increased four times over that of
Prelab 2a, and repeat Prelab 2a.
4.
a. For the system of Prelab 2a, calculate the values of a and b so that the damping ratio
remains the same but the natural frequency is increased two times over that of Prelab
2a, and repeat Prelab 2a.
b. For the system of Prelab 2a, calculate the values of a and b so that the damping ratio
remains the same but the natural frequency is increased four times over that of Prelab
2a, and repeat Prelab 2a.
5. Brieﬂy describe the effects on the time response as the poles are changed in each of
Prelabs 2, 3, and 4.
Lab
1. Using Simulink, set up the systems of Prelab 1 and plot the step response of each of the
four transfer functions on a single graph by using the Simulink LTI Viewer (See
Appendix E.6 online for tutorial). Also, record the values of settling time and rise time
for each step response.
2. Using Simulink, set up the systems of Prelab 2 . Using the Simulink LTI Viewer, plot the
step response of each of the three transfer functions on a single graph. Also, record the
values of percent overshoot, settling time, peak time, and rise time for each step response.
3. Using Simulink, set up the systems of Prelab 2a and Prelab 3. Using the Simulink LTI
Viewer, plot the step response of each of the three transfer functions on a single graph.
Also, record the values of percent overshoot, settling time, peak time, and rise time for
each step response.
Cyber Exploration Laboratory
223

4. Using Simulink, set up the systems of Prelab 2a and Prelab 4. Using the Simulink LTI
Viewer, plot the step response of each of the three transfer functions on a single graph.
Also, record the values of percent overshoot, settling time, peak time, and rise time for
each step response.
Postlab
1. For the ﬁrst-order systems, make a table of calculated and experimental values of settling
time, rise time, and pole location.
2. For the second-order systems of Prelab 2, make a table of calculated and exper-
imental values of percent overshoot, settling time, peak time, rise time, and pole
location.
3. For the second-order systems of Prelab 2a and Prelab 3, make a table of calculated and
experimental values of percent overshoot, settling time, peak time, rise time, and pole
location.
4. For the second-order systems of Prelab 2a and Prelab 4, make a table of calculated and
experimental values of percent overshoot, settling time, peak time, rise time, and pole
location.
5. Discuss the effects of pole location upon the time response for both ﬁrst- and second-
order systems. Discuss any discrepancies between your calculated and experimental
values.
Experiment 4.2
Objective
To evaluate the effect of additional poles and zeros upon the time response of
second-order systems.
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1.
a. Given the transfer function Gs 
25
s2  4s  25, evaluate the percent overshoot,
settling time, peak time, and rise time. Also, plot the poles.
b. Add a pole at 200 to the system of Prelab 1a. Estimate whether the transient
response in Prelab 1a will be appreciably affected.
c. Repeat Prelab 1b with the pole successively placed at 20;  10, and 2.
2. A zero is added to the system of Prelab 1a at 200 and then moved to
50;  20;  10;  5, and 2. List the values of zero location in the order of the
greatest to the least effect upon the pure second-order transient response.
3. Given the transfer function Gs 
25b=as  a
s  bs2  4s  25, let a  3 and b  3:01, 3.1,
3.3, 3.5, and 4.0. Which values of b will have minimal effect upon the pure second-order
transient response?
4. Given the transfer function Gs 
2500b=as  a
s  bs2  40s  2500, let a  30 and b  30:01,
30.1, 30.5, 31, 35, and 40. Which values of b will have minimal effect upon the pure
second-order transient response?
Lab
1. Using Simulink, add a pole to the second-order system of Prelab 1a and plot the step
responses of the system when the higher-order pole is nonexistent, at 200;  20;  10,
224
Chapter 4
Time Response

and 2. Make your plots on a single graph, using the Simulink LTI Viewer.
Normalize all plots to a steady-state value of unity. Record percent overshoot, settling
time, peak time, and rise time for each response.
2. Using Simulink, add a zero to the second-order system of Prelab 1a and plot the step
responses of the system when the zero is nonexistent, at 200;  50;  20;  10;  5,
and 2. Make your plots on a single graph, using the Simulink LTI Viewer.
Normalize all plots to a steady-state value of unity. Record percent overshoot, settling
time, peak time, and rise time for each response.
3. Using Simulink and the transfer function of Prelab 3 with a  3, plot the step responses
of the system when the value of b is 3, 3.01, 3.1, 3.3, 3.5, and 4.0. Make your plots on a
single graph using the Simulink LTI Viewer. Record percent overshoot, settling time,
peak time, and rise time for each response.
4. Using Simulink and the transfer function of Prelab 4 with a  30, plot the step responses
of the system when the value of b is 30, 30.01, 30.1, 30.5, 31, 35, and 40. Make your
plots on a single graph, using the Simulink LTI Viewer. Record percent overshoot,
settling time, peak time, and rise time for each response.
Postlab
1. Discuss the effect upon the transient response of the proximity of a higher-order pole to
the dominant second-order pole pair.
2. Discuss the effect upon the transient response of the proximity of a zero to the dominant
second-order pole pair. Explore the relationship between the length of the vector from
the zero to the dominant pole and the zero’s effect upon the pure second-order step
response.
3. Discuss the effect of pole-zero cancellation upon the transient response of a dominant
second-order pole pair. Allude to how close the canceling pole and zero should be and
the relationships of (1) the distance between them and (2) the distance between the zero
and the dominant second-order poles.
Experiment 4.3
Objective
To use LabVIEW Control Design and Simulation Module for time
performance analysis of systems.
Minimum Required Software Packages
LabVIEW with the Control Design
and Simulation Module
Prelab
One of the experimental direct drive robotic arms built at the MTT Artiﬁcial
Intelligence Laboratory and the CMU Robotics Institute can be represented as a feedback
control system with a desired angular position input for the robot’s joint position and an
angular position output representing the actual robot’s joint position.
The forward path consists of three transfer functions in cascade; (1) a compensator,
Gc s , to improve performance; (2) a power ampliﬁer of gain, Ka = 1; and (3) the transfer
function of the motor and load, G s   2292=s s  75:6

. Assume a unity-feedback system.
Initially the system will be controlled with Gc s  = 0.6234, which is called a proportional
controller (McKerrow, 1991).
1. Obtain the closed-loop system transfer function and use MATLAB to make a plot of
the resulting unit step response.
2. Repeat with Gcs  3:05  0:04s, which is called a PD controller.
3. Compare both responses and draw conclusions regarding their time domain
speciﬁcations.
Cyber Exploration Laboratory
225

Lab
Create a LabVIEW VI that uses a simulation loop to implement both controllers
given in the Prelab. Plot the responses on the same graph for comparison purposes.
Postlab
Compare the responses obtained using your LabVIEW VI with those obtained
in the Prelab.
Experiment 4.4
Objective
To use the LabVIEW Control Design and Simulation Module to evaluate the
effect of pole location upon the time response of second-order systems.
Minimum Required Software Packages
LabVIEW with the Control Design
and Simulation Module.
Prelab
Solve the Cyber Exploration Laboratory Experiment 4.1 Prelab, Part 2.
Lab
Build a LabVIEW VI to implement the functions studied in the Prelab of Cyber
Exploration Laboratory 4.1, Part 2.
Speciﬁcally for Prelab Part 2a, your front panel will have the coefﬁcients of the second-
order transfer function as inputs. The front panel will also have the following indicators:
(1) the transfer function; (2) the state-space representation; (3) the pole locations; (4) the step
response graph; (5) the time response of the two states on the same graph; (6) the time
response parametric data including rise time, peak time, settling time, percent overshoot,
peak value, and ﬁnal value.
For Prelab, Part 2b, your front panel will also have the following indicators: (1) the step
response graph, and (2) the parametric data listed above for Prelab, Part 2a, but speciﬁc to
Part 2b.
For Prelab, Part 2c, your front panel will also have the following indicators: (1) the step
response graph, and (2) the parametric data listed above for Prelab, Part 2a, but speciﬁc to
Part 2c.
Run the VI to obtain the data from the indicators.
Postlab
Use your results to discuss the effect of pole location upon the step response.
Hardware Interface Laboratory
Experiment 4.5
Open-Loop Speed Control of a Motor
Objectives
To control the speed of a motor in open-loop fashion and verify the
functions of the motor control setup as preparation for future experiments.
Material Required
Computer with LabVIEW Installed; myDAQ; dc brushed gear-
motor with Hall Sensor quadrature encoder (–10 V to +10 V normal operation range); and
motorcontrolchipBA6886Noratransistorcircuitsubstitute.(Note:Forsimplicitytheinputto
the motor will be analog. PWM will be avoided as it adds an additional layer of complexity to
these experiments. Plan accordingly if you decide to substitute the motor control chip.)
File Provided at www.wiley.com/college/nise
Open Loop Control.vi
Prelab
Plan how you will wire your motor to the breadboard. A possibility is to solder a
header to six matching color wires that will allow you to connect and disconnect the motor
from the myDAQ in an efﬁcient manner. You can also solder wires to the motor’s cables.
226
Chapter 4
Time Response

Lab
Software:
The front panel for the Open Loop Control VI is shown in Figure P4.28(a).
The input to the system is the voltage applied to the motor. The output is the motor
speed in revolutions per second (rps). The corresponding block diagram is shown in
Figure P4.28(b).
Note the value indicated by the blue arrow in Figure P4.28(b). In order to get a meaningful
reading for the speed of the motor, this value needs to be modiﬁed depending on the gear ratio
of your motor and the counts of your encoder. To understand how this value is calculated, note
that the DAQ Assistant block on top of the diagram reads the encoder input from the myDAQ.
One would reasonably assume that the frequency of this signal is proportional to the speed of
the motor, which is theoretically true. However, at very low speeds the DAQ assistant “times
out” and fails to provide a reading if frequency is measured directly. To avoid this problem, a
different method is used to calculate the signal frequency. The DAQ assistant measures the
rising edges of the encoder signal every 100 msec and subtracts that number from the ones
accumulated during the previous 100 msec period. The frequency of the encoder signal
(in edges/msec) is found by dividing the value of this subtraction by the period (100 msec).
See the Block Diagram to understand how this algorithm was implemented.
We use an example to illustrate the calculation of the constant pointed to with the red arrow.
If a 9.7:1 gear ratio is used with a 48 CPR encoder, with each revolution the encoder will
(b)
FIGURE P4.28
Open loop control.vi: a. Front Panel; b. Block Diagram
Hardware Interface Laboratory
227

generate a total of 48 edges in each of the encoder channels. Using one channel only and
positive edges, there are 12 positive edges/rev of the motor shaft. The total number of counts
(positive edges) generated by each revolution of the external shaft is 9.7 × 12 = 116.4
positive edges/rev.
In order to ﬁnd the rotational speed, the frequency (edges/msec) of the signal is divided by
the total number of counts generated by the external shaft, adjusting the units for time from
msec to sec: Rotational Speed (rps) = Freq × 1000/(9.7 × 12) = Freq × 8.591. This value has
to be set as illustrated in the Block Diagram.
The DAQ Assistant2 block transmits the voltage from the control slider to the myDAQ
and to the motor control chip. The DAQ Assistant3 block makes sure that the output to the
chip is zeroed when the VI terminates.
Hardware:
Connect the myDAQ, the motor, and the motor controller as shown in
Figure P4.29.
Procedure:
1. Verify the operation of your circuit by running the VI and changing the position of the
slider. If everything is correct, the motor speed will vary as the slider’s position changes.
2. Verify that you are using the correct scaling factor for your motor by setting your
motor to rotate at 0.5 rps. Count the number of rotations in the shaft of the motor
over 10 sec using a stopwatch. Repeat by setting the rotational speed at 1 rps. Your
measurements must be consistent.
MyDAQ
1
2
3
4
5
6
7
8
9
10
BA6886N
10Ω
9V
Motor
white
FIGURE P4.29
Wiring diagram15
15 MyDAQ right slot shown on left is taken from Multisim program module NI myDAQ design and also
reproduced in White-Paper 11423, Figure 2. Both Multisim and the White Paper are from National Instruments.
228
Chapter 4
Time Response

3. Perform the following measurements moving the slider:
a. Increase the voltage starting at zero and record the minimum voltage for the motor
to start rotating.
b. Starting the slider at a rotating speed, reduce the voltage until the motor stops.
Record this voltage.
Are these values equal? These values are important and will be used in future labs.
Keep them in a safe place so that you don’t have to repeat these measurements
again.
4. Make a graph where the x-axis is the input voltage, and the y-axis is the speed in rps.
Include the results in Part 3.
5. Draw a functional block diagram of the system (similar to Chapter 1), labeling each
of the components in the diagram.
6. The circuit and the VI above allow the motor to rotate in one direction only. Modify
the VI and the circuit so that the motor direction and speed can be controlled
from the VI.
Note that the reference input to the chip can only accept positive voltage values.
The motor control data sheet indicates that direction of rotation must be changed by
ﬂipping the logical values of Pin 2 and Pin 10 on the motor control chip. However, a
careful reading of the data sheet indicates that there must be an instant of time (of
unspeciﬁed duration) in which both inputs must be False before switching direction.
You may want to use a LabVIEW ring to simulate a three-way switch. Use two of the
selections of the ring to control the motor’s rotation direction. The third selection in the
ring should provide low inputs to the motor controller logical inputs to be able to stop
the motor before switching direction.
Experiment 4.6
Transfer Function Identiﬁcation
Objective
To identify the transfer function of a motor from voltage input to angular
motor speed using myDAQ and LabView.
Material Required
Computer with LabVIEW Installed; myDAQ; dc brushed
gearmotor with Hall sensor quadrature encoder (–10 to +10 V normal operation range);
and motor control chip B6886N (or a transistor circuit substitute).
File Provided at www.wiley.com/college/nise
Plant Identiﬁcation 2.vi
Prelab
Answer the following questions:
1. What is the unit-step response of a system with transfer function Gs 
K
sτ  1,
where K and τ are constants > 0?
2. Make a hand-sketch of the response of the unit-step response of the system in Part 1.
3. What is the value of the step response of the system in Part 1 when t = τ?
4. Find or derive the expression for the transfer function from voltage to angular speed
of an unloaded permanent magnet dc motor. Compare this transfer function to the
ﬁrst-order system in Part 1.
Lab
Connect the myDAQ, the motor, and the motor controller as shown in Figure P4.30.
This setup is identical to the one that was used initially in Experiment 4.5, except that we
have connected the two analog input channels to the two analog output channels. This will
allow us to use the myDAQ oscilloscope for measurements. If you decide to use an external
oscilloscope, these connections are not necessary.
1. Open the Oscilloscope and Plant Identiﬁcation 2.vi shown in Figures P4.31 and
P4.32, respectively. You can also choose to use an external oscilloscope. Use
settings similar to the ones shown in Figure P4.31.
Hardware Interface Laboratory
229

MyDAQ
1
2
3
4
5
6
7
8
9
10
BA6886N
10Ω
9V
Motor
white
FIGURE P4.30
Wiring diagram16
FIGURE P4.31
LabVIEW Oscilloscope—NI ELVISmx
16 MyDAQ right slot shown on left is taken from Multisim program module NI myDAQ design and also reproduced
in White-Paper 11423, Figure 2. Both Multisim and the White Paper are from National Instruments.
230
Chapter 4
Time Response

2. In your Plant Identiﬁcation 2.vi choose the value of amplitude and offset shown in
Figure P4.32. A LabView error will be generated if the square wave generates
negative values as these are not allowed as inputs to the chip. The value of the
frequency is irrelevant; you just have to make sure the input is slow enough so that
the motor speed reaches steady state as shown in Figure P4.32.
3. Run the Plant Identiﬁcation 2.vi and the Oscilloscope. Press the Stop button on
the Oscilloscope as soon as it shows a full semi-cycle of positive speed, similar to
Figure P4.31.
4. Click on the Log button in the Oscilloscope, give the ﬁle a name, and save it to disk.
Open the ﬁle using a spreadsheet program.
5. Note that the response of the system in the Oscilloscope is in all likelihood that of
a ﬁrst-order system, consistent with theoretical expectations. Thus, the transfer
function will be of the form: Ωs
Eis 
K
sτ  1.
K can readily be found from the Oscilloscope or the Plant Identiﬁcation 2.vi.
In the example shown, K  9:71
9
 1:079. We will use the spreadsheet data to ﬁnd
the time constant, τ.
6. Use your spreadsheet data to ﬁnd the time constant. For help on completing this task,
go to www.wiley.com/college/nise.
7. Repeat the experiment for input voltages of 2 V, 5 V, and 9 V.
Postlab
1. Is your system linear? How do you know?
2. If your system is linear for a range of inputs, ﬁnd a judicious interpolation between
the three transfer functions you found in Part 7 of the lab. Write down your ﬁnal
transfer function result and save it for use in subsequent experiments.
Bibliography
Borovic, B., Liu, A. Q., Popa, D., and Lewis, F. L. Open-loop versus closed-loop control of MEMS
devices: choices and issues. Journal of Micromechanics, Microengineering, vol. 15, 2005,
pp. 1917–1924.
FIGURE P4.32
Plant Identiﬁcation 2.vi Front Panel
Bibliography
231

Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Craig, I. K., Xia, X., and Venter, J. W.; Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
DiBona, G. F. Physiology in perspective: The Wisdom of the Body. Neural control of the kidney.
American Journal of Physiology–Regulatory, Integrative and Comparative Physiology, vol. 289,
2005, pp. R633–R641.
Dong, F., Heinemann, W., and Kasper, R. Development of a Row Guidance System for an
Autonomous Robot for White Asparagus Harvesting. Computers and Electronics in Agriculture,
vol. 79, pp. 216–225, 2011.
Dorf, R. C. Introduction to Electric Circuits, 2d ed. Wiley, New York, 1993.
Elaraﬁ, M. G. M. K., and Hisham, S. B. Modeling and Control of pH Neutralization Using Neural
Network Predictive Controller. International Conference on Control, Automation and Systems
2008, Seoul, Korea. Oct. pp. 14–17, 2008.
Franklin, G. F., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems, 2d ed.
Addison-Wesley, Reading, MA, 1991.
Glantz, A. S., and Tyberg, V. J. Determination of Frequency Response from Step Response:
Application to Fluid-Filled
Catheters. American
Journal of Physiology, vol. 2, 1979,
pp. H376–H378.
Good, M. C., Sweet, L. M., and Strobel, K. L. Dynamic Models for Control System Design of
Integrated Robot and Drive Systems. Journal of Dynamic Systems, Measurement, and Control,
March 1985, pp. 53–59.
Gozde, H., and Taplamacioglu, M. C. Comparative performance analysis of artiﬁcial bee colony
algorithm for automatic voltage regulator (AVR) system. Journal of the Franklin Institute, vol. 348,
pp. 1927–1946, 2011.
Ionescu, C., and De Keyser, R. Adaptive Closed-Loop Strategy for Paralyzed Skeletal Muscles.
Proceedings of the IASTED International Conference on Biomedical Engineering, 2005.
Jiayu, K., Mengxiao, W., Linan, M., and Zhongjun, X. Cascade Control of pH in an Anaerobic
Waste Water Treatment System, 3d International Conference on Bioinformatics and Biomedical
Engineering, 2009.
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C. 1980.
Kuo, B. C. Automatic Control Systems, 5th ed. Prentice Hall, Upper Saddle River, NJ, 1987.
Kuo, C-F. J., Tsai, C-C., and Tu, H-M. Carriage Speed Control of a Cross-lapper System for
Nonwoven Web Quality. Fibers and Polymers, vol. 9, no. 4, 2008, pp. 495–502.
Mallavarapu, K., Newbury, K., and Leo, D. J. Feedback Control of the Bending Response of Ionic
Polymer-Metal Composite Actuators. Proceedings of the SPIE, vol. 4329, 2001, pp. 301–310.
McKerrow, P. J. Introduction to Robotics. Addison-Wesley, Singapore, 1991.
McRuer, D., Ashkenas, I., and Graham, D. Aircraft Dynamics and Automatic Control. Princeton
University Press, 1973.
Nakamura, M. et al. Transient Response of Remnant Atrial Heart Rate to Step Changes in Total
Artiﬁcial Heart Output. Journal of Artiﬁcial Organs, vol. 5, 2002, pp. 6–12.
Nashner, L. M., and Wolfson, P. Inﬂuence of Head Position and Proprioceptive Cues on Short
Latency Postural Reﬂexes Evoked by Galvanic Stimulation of the Human Labyrinth. Brain
Research, vol. 67, 1974, pp. 255–268.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Philips, C. L., and Nagle, H. T. Digital Control Systems Analysis and Design. Prentice Hall, Upper
Saddle River, NJ, 1984.
Prasad, L., Tyagi, B., and Gupta, H. Modelling & Simulation for Optimal Control of Nonlinear
Inverted Pendulum Dynamical System using PID Controller & LQR. IEEE Computer Society Sixth
Asia Modeling Symposium, 2012, pp. 138–143.
232
Chapter 4
Time Response

Ren, Z., and Zhu, G. G. Modeling and Control of an Electric Variable Valve Timing System for SI
and HCCI Combustion Mode Transition. American Control Conference, San Francisco, CA, 2011,
pp. 979–984.
Ringdorfer M., and Horn M. Development of a Wheel Slip Actuator Controller for Electric Vehicles
using Energy Recuperation and Hydraulic Brake Control. 2011 IEEE International Conference on
Control Applications (CCA), Denver, CO, September 28–30, 2011, pp. 313–318.
Salapaka, S., Sebastian, A., Cleveland, J. P., and Salapaka, M. V. High Bandwidth Nano-Positioner:
A Robust Control Approach. Review of Scientiﬁc Instruments, vol. 73, No. 9, 2002, pp. 3232–3241.
Sawusch, M. R., and Summers, T. A. 1001 Things to Do with Your Macintosh. TAB Books, Blue
Ridge Summit, PA, 1984.
Stefani, R. T. Modeling Human Response Characteristics. COED Application Note No. 33.
Computers in Education Division of ASEE, 1973.
Sun, M., and Xiong, Y. Dynamic Flight Stability of a Hovering Bumblebee. Journal of Experimental
Biology, vol. 208, 2005, pp. 447–459.
Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-Based State Space Control, and
Model-Based Predictive Control for Drive Systems With Elastically Coupled Loads—A
Comparative Study. IEEE Transactions on Industrial Electronics, vol. 58, no. 8, August
2011, pp. 3647–3657.
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New York,
1968.
Van Dijk, E., Spruijt, J. N., O’Sullivan, D. M., and Klaasens, J. B. PWM-Switch Modeling of DC-DC
Converters. IEEE Transactions on Power Electronics, vol. 10, 1995, pp. 659–665.
Xue, D., and Chen, Y. D. Sub-Optimum H2 Rational Approximations to Fractional Order Linear
Systems. Proceedings of IDET/CIE 2005. ASME 2005 International Design Engineering
Technical Conferences & Computers and Information in Engineering Conference, Long Beach.
CA, 2005. pp. 1–10.
Zedka, M., Prochazka, A., Knight, B., Gillard, D., and Gauthier, M. Voluntary and Reﬂex Control of
Human Back Muscles During Induced Pain. Journal of Physiology, vol. 520, 1999, pp. 591–604.
Zhou, B. H., Baratta, R. V., Solomonow, M., and D’Ambrosia, R. D. The Dynamic Response of
the Cat Ankle Joint During Load-Moving Contractions. IEEE Transactions on Biomedical
Engineering, vol. 42, no. 4, 1995, pp. 386–393.
Bibliography
233


Reduction of Multiple
Subsystems
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Reduce a block diagram of multiple subsystems to a single block representing
the transfer function from input to output (Sections 5.1–5.2)
• Analyze and design transient response for a system consisting of multiple
subsystems (Section 5.3)
• Convert block diagrams to signal-ﬂow diagrams (Section 5.4)
• Find the transfer function of multiple subsystems using Mason’s rule (Section 5.5)
• Represent state equations as signal-ﬂow graphs (Section 5.6)
• Represent multiple subsystems in state space in cascade, parallel, controller
canonical, and observer canonical forms (Section 5.7)
• Perform transformations between similar systems using transformation
matrices; and diagonalize a system matrix (Section 5.8)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to (a) ﬁnd the closed-loop transfer function
that represents the system from input to output; (b) ﬁnd a state-space
representation for the closed-loop system; (c) predict, for a simpliﬁed system

5
235

model, the percent overshoot, settling time, and peak time of the closed-loop
system for a step input; (d) calculate the step response for the closed-loop
system; and (e) for the simpliﬁed model, design the system gain to meet a
transient response requirement.
• Given the block diagrams for the Unmanned Free-Swimming Submersible
(UFSS) vehicle’s pitch and heading control systems on the back endpapers, you
will be able to represent each control system in state space.
5.1 Introduction
We have been working with individual subsystems represented by a block with its input and
output. More complicated systems, however, are represented by the interconnection of
many subsystems. Since the response of a single transfer function can be calculated, we
want to represent multiple subsystems as a single transfer function. We can then apply the
analytical techniques of the previous chapters and obtain transient response information
about the entire system.
In this chapter, multiple subsystems are represented in two ways: as block diagrams
and as signal-ﬂow graphs. Although neither representation is limited to a particular analysis
and design technique, block diagrams are usually used for frequency-domain analysis and
design, and signal-ﬂow graphs for state-space analysis.
Signal-ﬂow graphs represent transfer functions as lines, and signals as small-circular
nodes. Summing is implicit. To show why it is convenient to use signal-ﬂow graphs for
state-space analysis and design, consider Figure 3.10. A graphical representation of a system’s
transfer function is as simple as Figure 3.10(a). However, a graphical representation of a
system in state space requires representation of each state variable, as in Figure 3.10(b). In
that example, a single-block transfer function requires seven blocks and a summing
junction to show the state variables explicitly. Thus, signal-ﬂow graphs have advantages
over block diagrams, such as Figure 3.10(b): They can be drawn more quickly, they are
more compact, and they emphasize the state variables.
We will develop techniques to reduce each representation to a single transfer function.
Block diagram algebra will be used to reduce block diagrams and Mason’s rule to reduce
signal-ﬂow graphs. Again, it must be emphasized that these methods are typically used as
described. As we shall see, however, either method can be used for frequency-domain or
state-space analysis and design.
5.2 Block Diagrams
As you already know, a subsystem is represented as a block with an input, an output, and
a transfer function. Many systems are composed of multiple subsystems, as in Figure 5.1.
When multiple subsystems are interconnected, a few more schematic elements must be
added to the block diagram. These new elements are summing junctions and pickoff
points. All component parts of a block diagram for a linear, time-invariant system are
shown in Figure 5.2. The characteristic of the summing junction shown in Figure 5.2(c)
is that the output signal, C(s), is the algebraic sum of the input signals, R1(s), R2(s), and
R3(s). The ﬁgure shows three inputs, but any number can be present. A pickoff point, as
shown in Figure 5.2(d), distributes the input signal, R(s), undiminished, to several
output points.
We will now examine some common topologies for interconnecting subsystems
and derive the single transfer function representation for each of them. These common
topologies will form the basis for reducing more complicated systems to a single block.
236
Chapter 5
Reduction of Multiple Subsystems

Cascade Form
Figure 5.3(a) shows an example of cascaded subsystems. Intermediate signal values are
shown at the output of each subsystem. Each signal is derived from the product of the input
times the transfer function. The equivalent transfer function, Ge(s), shown in Figure 5.3(b), is
the output Laplace transform divided by the input Laplace transform from Figure 5.3(a), or
Ges  G3sG2sG1s
(5.1)
which is the product of the subsystems’transfer functions.
Equation (5.1) was derived under the assumption that interconnected subsystems do
not load adjacent subsystems. That is, a subsystem’s output remains the same whether or not
R1(s)
R(s)
Signals
System
Summing junction
(c)
Pickoff point
(d)
+
+
–
(a)
(b)
C(s) 
C(s) = R1(s) + R2(s) – R3(s)
R2(s)
R3(s)
R(s)
C(s)
G(s)
R(s)
R(s)
R(s)
R(s)
Input
Output
FIGURE 5.2
Components of
a block diagram for a linear,
time-invariant system
Pressurized
crew
compartment
Forward
reaction
control
system
Flight
deck
Cryogenic oxygen/hydrogen
tanks and fuel cells (oxygen for 
crew and compartment)
Deployable radiator panels
Payload bay doors
Payload bay 
Fixed
radiator
panels
Vertical tail
Elevon rub panels
Rudder/speed brake
Elevons
Space shuttle
main engines
(3)
OMS
engines (2)
Body
flap
RCS engines 
(38 primary, 6 vernier)
SRB nozzle
SRB separation motors
SRB holddown
posts (4)
Wing
OMS
fuel
tank
OMS
oxidizer
tank
RCS
oxidizer
tank
RCS
fuel
tank
SRB
propellant
and casing
Remote
manipulator
system
Liquid
hydrogen
tank
SRB
recovery
system
SRB
separation
motors
Mid-deck
and crew
side hatch
ET liquid
oxygen tank
NASA-Houston.
FIGURE 5.1
The recently retired space shuttle consisted of multiple subsystems. Can you identify
those that are control systems or parts of control systems?
5.2 Block Diagrams
237

the subsequent subsystem is connected. If there is a change in the output, the subsequent
subsystem loads the previous subsystem, and the equivalent transfer function is not the
product of the individual transfer functions. The network of Figure 5.4(a) demonstrates this
concept. Its transfer function is
G1s  V1s
Vis 
1
R1C1
s 
1
R1C1
(5.2)
Similarly, the network of Figure 5.4(b) has the following transfer function:
G2s  V2s
V1s 
1
R2C2
s 
1
R2C2
(5.3)
If the networks are placed in cascade, as in Figure 5.4(c), you can verify that the transfer
function found using loop or node equations is
Gs  V2s
Vis 
1
R1C1R2C2
s2 
1
R1C1

1
R2C2

1
R2C1


s 
1
R1C1R2C2
(5.4)
(a)
Vi(s)
R1
G1(s) =
V1(s)
V1(s)
C1
+
(c)
R1
R2
C1
C2
V2(s)
 = G2(s)G1(s)
GT (s) = V2(s)
Vi(s)
Vi(s)
Vi(s)
Vi(s)
+
(b)
R2
V1(s) 
V2(s)  
G2(s) = V2(s)
V1(s)
C2
+
 = KG2(s)G1(s)
K
(d)
R1
R2
C1
C2
V2(s)
GT (s) = V2(s)
Vi(s)
+
–
–
+
–
–
+
–
–
+
–
+–
FIGURE 5.4
Loading in
cascaded systems
(a)
G1(s)
R(s) 
X2(s) =
G1(s)R(s)
G2(s)
X1(s) =
G2(s)G1(s)R(s)
G3(s)
C(s) =
G3(s)G2(s)G1(s)R(s)
R(s)
G3(s)G2(s)G1(s)
C(s)
(b)
FIGURE 5.3
a. Cascaded
subsystems; b. equivalent
transfer function
238
Chapter 5
Reduction of Multiple Subsystems

But, using Eq. (5.1),
Gs  G2sG1s 
1
R1C1R2C2
s2 
1
R1C1

1
R2C2


s 
1
R1C1R2C2
(5.5)
Equations (5.4) and (5.5) are not the same: Eq. (5.4) has one more term for the coefﬁcient of
s in the denominator and is correct.
One way to prevent loading is to use an ampliﬁer between the two networks, as
shown in Figure 5.4(d). The ampliﬁer has a high-impedance input, so that it does not
load the previous network. At the same time it has a low-impedance output, so that it
looks like a pure voltage source to the subsequent network. With the ampliﬁer included,
the equivalent transfer function is the product of the transfer functions and the gain, K, of
the ampliﬁer.
Parallel Form
Figure 5.5 shows an example of parallel subsystems. Again, by writing the output of each
subsystem, we can ﬁnd the equivalent transfer function. Parallel subsystems have a common
input and an output formed by the algebraic sum of the outputs from all of the subsystems.
The equivalent transfer function, Ge(s), is the output transform divided by the input
transform from Figure 5.5(a), or
Ges   G1s  G2s  G3s
(5.6)
which is the algebraic sum of the subsystems’ transfer functions; it appears in
Figure 5.5(b).
±
(a)
(b)
R(s)
G1(s)
G2(s)
G3(s)
X1(s) = R(s)G1(s)
X2(s) = R(s)G2(s)
X3(s) = R(s)G3(s)
C(s) = [± G1(s) ± G2(s) ± G3(s)]R(s)
C(s)
± G1(s) ± G2(s) ± G3(s)
±
R(s)
±
FIGURE 5.5
a. Parallel
subsystems; b. equivalent
transfer function
5.2 Block Diagrams
239

Feedback Form
The third topology is the feedback form, which will be seen repeatedly in subsequent
chapters. The feedback system forms the basis for our study of control systems engineering.
In Chapter 1, we deﬁned open-loop and closed-loop systems and pointed out the advantage
of closed-loop, or feedback control, systems over open-loop systems. As we move ahead,
we will focus on the analysis and design of feedback systems.
Let us derive the transfer function that represents the system from its input to
its output. The typical feedback system, described in detail in Chapter 1, is shown in
Figure 5.6(a); a simpliﬁed model is shown in Figure 5.6(b).1 Directing our attention to the
simpliﬁed model,
Es  Rs  CsHs
(5.7)
But since Cs  EsGs,
Es  Cs
Gs
(5.8)
Input
R(s)
+
+
–
Actuating
signal
(error)
Controller
Plant
Output
Output
transducer
Feedback
(a)
Input
+
+
–
Actuating
signal
(error)
Plant and
controller
Output
Feedback
(b)
Output
Input
(c)
Input
transducer
G1(s)
E(s)
G2(s)
G3(s)
C(s)
H2(s)
H1(s)
R(s)
E(s)
G(s)
C(s)
H(s)
R(s)
G(s)
C(s)
1    G(s)H(s)
+–
FIGURE 5.6
a. Feedback
control system; b. simpliﬁed
model; c. equivalent transfer
function
1 The system is said to have negative feedback if the sign at the summing junction is negative and positive feedback
if the sign is positive.
240
Chapter 5
Reduction of Multiple Subsystems

Substituting Eq. (5.8) into Eq. (5.7) and solving for the transfer function, Cs=Rs  Ges,
we obtain the equivalent, or closed-loop, transfer function shown in Figure 5.6(c),
Ges 
Gs
1  GsHs
(5.9)
The product, G(s)H(s), in Eq. (5.9) is called the open-loop transfer function, or loop gain.
So far, we have explored three different conﬁgurations for multiple subsystems. For
each, we found the equivalent transfer function. Since these three forms are combined
into complex arrangements in physical systems, recognizing these topologies is a
prerequisite to obtaining the equivalent transfer function of a complex system. In this
section, we will reduce complex systems composed of multiple subsystems to single
transfer functions.
Moving Blocks to Create Familiar Forms
Before we begin to reduce block diagrams, it must be explained that the familiar forms
(cascade, parallel, and feedback) are not always apparent in a block diagram. For
example, in the feedback form, if there is a pickoff point after the summing junction,
you cannot use the feedback formula to reduce the feedback system to a single block.
That signal disappears, and there is no place to reestablish the pickoff point.
This subsection will discuss basic block moves that can be made in order to establish
familiar forms when they almost exist. In particular, it will explain how to move blocks left
and right past summing junctions and pickoff points.
Figure 5.7 shows equivalent block diagrams formed when transfer functions are
moved left or right past a summing junction, and Figure 5.8 shows equivalent block
diagrams formed when transfer functions are moved left or right past a pickoff point. In
the diagrams the symbol  means “equivalent to.” These equivalences, along with the
forms studied earlier in this section, can be used to reduce a block diagram to a single
transfer function. In each case of Figures 5.7 and 5.8, the equivalence can be veriﬁed by
tracing the signals at the input through to the output and recognizing that the output
R(s)
+
+
–
+
+–
(a)
X(s)
G(s)
C(s)
R(s)
G(s)
C(s)
G(s)
X(s)
+
+
–
1
(b)
+
+
–
R(s)
G(s)
C(s)
R(s)
G(s)
C(s)
G(s)
X(s)
X(s)
FIGURE 5.7
Block diagram
algebra for summing
junctions—equivalent forms for
moving a block a. to the left past
a summing junction; b. to the
right past a summing junction
5.2 Block Diagrams
241

signals are identical. For example, in Figure 5.7(a), signals R(s) and X(s) are multiplied by
G(s) before reaching the output. Hence, both block diagrams are equivalent, with
Cs  RsGs  XsGs. In Figure 5.7(b), R(s) is multiplied by G(s) before reaching
the output, but X(s) is not. Hence, both block diagrams in Figure 5.7(b) are equivalent,
with Cs  RsGs  Xs. For pickoff points, similar reasoning yields similar results
for the block diagrams of Figure 5.8(a) and (b).
Let us now put the whole story together with examples of block diagram
reduction.
(b)
G(s)
R(s)G(s)
R(s)
R(s)
R(s)
G(s)
R(s)G(s)
R(s)G(s)
R(s)G(s)
(a)
R(s)
R(s)
R(s)
G(s)
G(s)
G(s)
R(s)G(s)
R(s)G(s)
R(s)G(s)
R(s)G(s)
R(s)
R(s)
G(s)
G(s)
1
G(s)
1
FIGURE 5.8
Block diagram
algebra for pickoff points—
equivalent forms for moving a
block a. to the left past a pickoff
point; b. to the right past a
pickoff point
Example 5.1
Block Diagram Reduction via Familiar Forms
Block Diagram Reduction via Familiar Forms
PROBLEM: Reduce the block diagram shown in Figure 5.9 to a single transfer function.
SOLUTION: We solve the problem by following the steps in Figure 5.10. First, the
three summing junctions can be collapsed into a single summing junction, as shown in
Figure 5.10(a).
+
–
+
+
+
–
R(s)
G1(s)
G2(s)
H1(s)
H2(s)
H3(s)
G3(s)
C(s)
FIGURE 5.9
Block diagram
for Example 5.1
242
Chapter 5
Reduction of Multiple Subsystems

Second, recognize that the three feedback functions, H1(s), H2(s), and H3(s), are
connected in parallel. They are fed from a common signal source, and their outputs are
summed. The equivalent function is H1s 
 H2s  H3s. Also recognize that G2(s)
and G3(s) are connected in cascade. Thus, the equivalent transfer function is the product,
G3(s)G2(s). The results of these steps are shown in Figure 5.10(b).
Finally, the feedback system is reduced and multiplied by G1(s) to yield the
equivalent transfer function shown in Figure 5.10(c).
(c)
R(s)
G3(s)G2(s)G1(s)
C(s)
1 + G3(s)G2(s)[H1(s) – H2(s) + H3(s)]
+
–
(b)
R(s)
G1(s)
G3(s)G2(s)
C(s)
H1(s) – H2(s) + H3(s)
+
–
(a)
R(s)
+
G1(s)
G2(s)
G3(s)
H1(s)
H2(s)
H3(s)
+
C(s)
–
FIGURE 5.10
Steps in
solving Example 5.1:
a. Collapse summing junctions;
b. form equivalent cascaded
system in the forward path and
equivalent parallel system in the
feedback path; c. form
equivalent feedback system and
multiply by cascaded G1(s)
Example 5.2
Block Diagram Reduction by Moving Blocks
Block Diagram Reduction by Moving Blocks
PROBLEM: Reduce the system shown in Figure 5.11 to a single transfer function.
R(s)
V1(s)
V2(s)
V3(s)
V4(s)
V5(s)
V8(s)
V7(s)
V6(s)
G1(s)
G2(s)
G3(s)
H3(s)
H2(s)
H1(s)
C(s)
+
–
+
–
+
–
+
FIGURE 5.11
Block
diagram for Example 5.2
5.2 Block Diagrams
243

SOLUTION: In this example we make use of the equivalent forms shown in Figures 5.7
and 5.8. First, move G2(s) to the left past the pickoff point to create parallel subsystems,
and reduce the feedback system consisting of G3(s) and H3(s). This result is shown in
Figure 5.12(a).
Second, reduce the parallel pair consisting of 1/G2(s) and unity, and push G1(s) to
the right past the summing junction, creating parallel subsystems in the feedback. These
results are shown in Figure 5.12(b).
Third, collapse the summing junctions, add the two feedback elements together, and
combine the last two cascaded blocks. Figure 5.12(c) shows these results.
Fourth, use the feedback formula to obtain Figure 5.12(d).
Finally, multiply the two cascaded blocks and obtain the ﬁnal result, shown in
Figure 5.12(e).
(e)
R(s)
[1 + G2(s)H2(s) + G1(s)G2(s)H1(s)][1 + G3(s)H3(s)]
G1(s)G3(s)[1 + G2(s)]
C(s)
(d)
R(s)
G1(s)G2(s)
V4(s)
1 + G3(s)H3(s)
1  + 1
G2(s)
G3(s)
1 + G2(s)H2(s) + G1(s)G2(s)H1(s)
C(s)
 + H1(s)
+
–
1 + G3(s)H3(s)
(c)
V4(s)
1  + 1
G2(s)
G3(s)
H2(s)
G1(s)
+
–
R(s)
C(s)
G1(s)G2(s)
1  + 1
+
–
+
–
(b)
V1(s)
G1(s)G2(s)
V4(s)
G2(s)
1 + G3(s)H3(s)
G3(s)
C(s)
H2(s)
G1(s)
H1(s)
R(s)
1 + G3(s)H3(s)
+
–
+
–
+
R(s)
(a)
V2(s)
V3(s)
V7(s)
V6(s)
G3(s)
G1(s)
H1(s)
H2(s)
1
G2(s)
G2(s)
V1(s)
V4(s) 
C(s)
+
FIGURE 5.12
Steps in the
block diagram reduction for
Example 5.2
244
Chapter 5
Reduction of Multiple Subsystems

Students who are using MATLAB should now run ch5p1 in Appendix B to
perform block diagram reduction.
In this section, we examined the equivalence of several block diagram conﬁgurations
containing signals, systems, summing junctions, and pickoff points. These conﬁgurations
werethe cascade,parallel, andfeedbackforms.Duringblockdiagram reduction,we attempt to
produce these easily recognized forms and then reduce the block diagram to a single transfer
function. In the next section, we will examine some applications of block diagram reduction.
5.3 Analysis and Design of Feedback Systems
An immediate application of the principles of Section 5.2 is the analysis and
design of feedback systems that reduce to second-order systems. Percent
overshoot, settling time, peak time, and rise time can then be found from the
equivalent transfer function.
Consider the system shown in Figure 5.14, which can model a control
system such as the antenna azimuth position control system. For example, the
transfer function, K=ss  a, can model the ampliﬁers, motor, load, and gears.
From Eq. (5.9), the closed-loop transfer function, T(s), for this system is
Ts 
K
s2  as  K
(5.10)
where K models the ampliﬁer gain, that is, the ratio of the output voltage to the input voltage.
As K varies, the poles move through the three ranges of operation of a second-order system:
Skill-Assessment Exercise 5.1
PROBLEM: Find the equivalent transfer function, Ts  Cs=Rs, for the system
shown in Figure 5.13.
ANSWER:
Ts 
s3  1
2s4  s2  2s
The complete solution is at www.wiley.com/college/nise.
+
+
+
–
–
R(s)
s
s
s
C(s)
1
s
1
s
FIGURE 5.13
Block diagram for Skill-Assessment Exercise 5.1
TryIt 5.1
Use the following MATLAB
and Control System Toolbox
statements to ﬁnd the closed-
loop transfer function of the
system in Example 5.2 if all
Gis  1=s  1 and all
His  1=s.
G1=tf(1,[1 1]);
G2=G1;G3=G1;
H1=tf(1,[1 0]);
H2=H1;H3=H1;
System=append...
(G1,G2,G3,H1,H2,H3);
input=1;output=3;
Q= [1

4
0
0
0
2
1

5
0
0
3
2
1

5

6
4
2
0
0
0
5
2
0
0
0
6
3
0
0
0];
T=connect(System,...
Q,input,output);
T=tf(T);T=minreal(T)
K
+
–
s(s + a)
R(s)
C(s)
FIGURE 5.14
Second-order feedback control
system
5.3 Analysis and Design of Feedback Systems
245

overdamped, critically damped, and underdamped. For example, for K between 0 and a2=4,
the poles of the system are real and are located at
s1;2  
 a
2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
a2 
 4K
p
2
(5.11)
As K increases, the poles move along the real axis, and the system remains overdamped
until K  a2=4. At that gain, or ampliﬁcation, both poles are real and equal, and the system is
critically damped.
For gains above a2=4, the system is underdamped, with complex poles located at
s1;2  
 a
2  j
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4K 
 a2
p
2
(5.12)
Now as K increases, the real part remains constant and the imaginary part increases. Thus,
the peak time decreases and the percent overshoot increases, while the settling time remains
constant.
Let us look at two examples that apply the concepts to feedback control systems. In
the ﬁrst example, we determine a system’s transient response. In the second example, we
design the gain to meet a transient response requirement.
Example 5.3
Finding Transient Response
Finding Transient Response
PROBLEM: For the system shown in Figure 5.15, ﬁnd the peak time,
percent overshoot, and settling time.
SOLUTION: The closed-loop transfer function found from Eq. (5.9) is
Ts 
25
s2  5s  25
(5.13)
From Eq. (4.18),
ωn 
ﬃﬃﬃﬃﬃ
25
p
 5
(5.14)
From Eq. (4.21),
2ζωn  5
(5.15)
Substituting Eq. (5.14) into (5.15) and solving for ζ yields
ζ  0:5
(5.16)
Using the values for ζ and ωn along with Eqs (4.34), (4.38), and (4.42), we ﬁnd,
respectively,
Tp 
π
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 ζ2
p
 0:726 second
(5.17)
%OS  e
ζπ= ﬃﬃﬃﬃﬃﬃﬃﬃ
1
ζ2
p
 100  16:303
(5.18)
Ts 
4
ζωn
 1:6 seconds
(5.19)
–
25
+
s(s + 5)
R(s)
C(s)
FIGURE 5.15
Feedback system for
Example 5.3
246
Chapter 5
Reduction of Multiple Subsystems

MATLAB’s Simulink provides an alternative method of simulating
feedback systems to obtain the time response. Students who are
performing the MATLAB exercises and want to explore the added
capability of MATLAB’s Simulink should now consult Appendix C.
Example C.3 includes a discussion about, and an example of, the use
of Simulink to simulate feedback systems with nonlinearities.
Students who are using MATLAB should now run ch5p2 in Appendix B.
You will learn how to perform block diagram reduction followed by
an evaluation of the closed-loop system's transient response by
ﬁnding, Tp,%OS, and Ts. Finally, you will learn how to use MATLAB to
generate a closed-loop step response. This exercise uses MATLAB
to do Example 5.3.
Example 5.4
Gain Design for Transient Response
Gain Design for Transient Response
PROBLEM: Design the value of gain. K, for the feedback control system of Figure 5.16
so that the system will respond with a 10% overshoot.
SOLUTION: The closed-loop transfer function of the system is
Ts 
K
s2  5s  K
(5.20)
From Eq. (5.20),
2ζωn  5
(5.21)
and
ωn 
ﬃﬃﬃﬃ
K
p
(5.22)
Thus,
ζ 
5
2
ﬃﬃﬃﬃ
K
p
(5.23)
Since percent overshoot is a function only of ζ, Eq. (5.23) shows that the percent
overshoot is a function of K.
A 10% overshoot implies that ζ  0:591. Substituting this value for the damping
ratio into Eq. (5.23) and solving for K yields
K  17:9
(5.24)
Although we are able to design for percent overshoot in this problem, we could not
have selected settling time as a design criterion because, regardless of the value of K, the
real parts, 
2.5, of the poles of Eq. (5.20) remain the same.
–
s(s + 5)
K
+
R(s)
C(s)
FIGURE 5.16
Feedback
system for Example 5.4
Virtual Experiment 5.1
Gain Design
Put theory into practice designing
the position control gain for the
Quanser Linear Servo and
simulating its closed-loop
response in LabVIEW. This
concept is used, for instance, to
control a rover exploring the
terrain of a planet.
Virtual experiments are found on
Learning Space.
5.3 Analysis and Design of Feedback Systems
247

5.4 Signal-Flow Graphs
Signal-ﬂow graphs are an alternative to block diagrams. Unlike block diagrams, which
consist of blocks, signals, summing junctions, and pickoff points, a signal-ﬂow graph
consists only of branches, which represent systems, and nodes, which represent signals.
These elements are shown in Figures 5.17(a) and (b), respectively. A system is represented
by a line with an arrow showing the direction of signal ﬂow through the system. Adjacent to
the line we write the transfer function. A signal is a node with the signal’s name written
adjacent to the node.
Figure 5.17(c) shows the interconnection of the systems and the signals.
Each signal is the sum of signals ﬂowing into it. For example, we see that the
signal V s  R1 sG1s 
 R2 sG2s  R3 sG3s; the signal C2 s  V sG5s 
Skill-Assessment Exercise 5.2
PROBLEM: For a unity feedback control system with a forward-path transfer function
Gs 
16
ss  a, design the value of a to yield a closed-loop step response that has 5%
overshoot.
ANSWER:
a  5:52
The complete solution is at www.wiley.com/college/nise.
TryIt 5.2
Use the following MATLAB and Control
System Toolbox statements to ﬁnd ζ, ωn, %OS,
Ts, Tp, and Tr for the closed-loop unity feedback
system described in Skill-Assessment Exercise
5.2. Start with a  2 and try some other values.
A step response for the closed-loop system will
also be produced.
a=2;
numg=16;
deng=poly([0

a]);
G=tf(numg, deng);
T=feedback(G, 1);
[numt, dent]=...
tfdata(T,'v');
wn=sqrt(dent(3))
z=dent(2)/(2*wn)
Ts=4/(z*wn)
Tp=pi/(wn*...
sqrt(1 -z^2))
pos=exp(-z*pi...
/sqrt(1 -z^2))*100
Tr=(1.76*z^3-...
0.417*z^2 + 1.039*...
z + 1)/wn
step(T)
R1(s)
R2(s)
G1(s)
–G2(s)
R3(s)
G3(s)
–G6(s)
G5(s)
G4(s)
V(s)
C1(s)
C2(s)
C3(s)
(c)
(b)
V(s)
(a)
G(s)
FIGURE 5.17
Signal-ﬂow
graph components: a. system;
b. signal; c. interconnection of
systems and signals
248
Chapter 5
Reduction of Multiple Subsystems

R1s G1 s G5 s 
 R2 sG2 sG5 s  R3s G3 s G5 s ;
and
the
signal
C3s 

V sG6 s  
R1 s G1 sG6 s  R2 sG2 sG6s 
 R3 sG3 sG6 s.
Notice
that
in summing negative signals we associate the negative sign with the system and
not with a summing junction, as in the case of block diagrams.
To show the parallel between block diagrams and signal-ﬂow graphs, we will take
some of the block diagram forms from Section 5.2 and convert them to signal-ﬂow graphs in
Example 5.5. In each case, we will ﬁrst convert the signals to nodes and then interconnect
the nodes with system branches. In Example 5.6, we will convert an intricate block diagram
to a signal-ﬂow graph.
Example 5.5
Converting Common Block Diagrams to Signal-Flow
Graphs
Converting Common Block Diagrams to Signal-Flow
Graphs
PROBLEM: Convert the cascaded, parallel, and feedback forms of the block diagrams
shown in Figures 5.3(a), 5.5(a), and 5.6(b), respectively, into signal-ﬂow graphs.
SOLUTION: In each case, we start by drawing the signal nodes for that system. Next
we interconnect the signal nodes with system branches. The signal nodes for the
cascaded, parallel, and feedback forms are shown in Figure 5.18(a), (c), and (e),
respectively. The interconnection of the nodes with branches that represent the
subsystems is shown in Figure 5.18(b), (d), and (f) for the cascaded, parallel, and
feedback forms, respectively.
1
( f)
R(s)
E(s)
G(s)
C(s)
–H(s)
(e)
R(s)
E(s)
C(s)
(d)
1
1
1
V1(s)
G1(s)
V2(s)
R(s)
C(s)
G2(s)
V3(s)
G3(s)
(c)
V2(s)
R(s)
C(s)
V3(s)
(b)
R(s)
G1(s)
V2(s)
G2(s)
V1(s)
G3(s)
C(s)
(a)
V2(s)
V1(s)
C(s)
R(s)
V1(s)
FIGURE 5.18
Building
signal-ﬂow graphs:
a. cascaded system nodes (from
Figure 5.3(a)); b. cascaded
system signal-ﬂow graph;
c. parallel system nodes (from
Figure 5.5(a)); d. parallel
system signal-ﬂow graph;
e. feedback system nodes
(from Figure 5.6(b));
f. feedback system signal-ﬂow
graph
5.4 Signal-Flow Graphs
249

Example 5.6
Converting a Block Diagram to a Signal-Flow Graph
Converting a Block Diagram to a Signal-Flow Graph
PROBLEM: Convert the block diagram of Figure 5.11 to a signal-ﬂow graph.
SOLUTION: Begin by drawing the signal nodes, as shown in Figure 5.19(a). Next,
interconnect the nodes, showing the direction of signal ﬂow and identifying each
transfer function. The result is shown in Figure 5.19(b). Notice that the negative signs at
the summing junctions of the block diagram are represented by the negative transfer
functions of the signal-ﬂow graph. Finally, if desired, simplify the signal-ﬂow graph to
the one shown in Figure 5.19(c) by eliminating signals that have a single ﬂow in and a
single ﬂow out, such as V2(s), V6(s), V7(s), and V8(s).
(b)
1
1
1
1
–1
R(s)
G1(s)
V2(s)
V6(s)
H1(s)
V7(s)
G2(s)
V5(s)
G3(s)
V8(s)
H3(s)
–1
V4(s)
C(s)
V3(s)
V1(s)
–1
H2(s)
(a)
R(s)
V1(s)
V2(s)
V3(s)
V4(s)
V5(s)
C(s)
V8(s)
V7(s)
V6(s)
(c)
1
1
1
R(s)
G1(s)
V3(s)
G2(s)
V5(s)
G3(s)
–H2(s)
–H3(s)
–H1(s)
V1(s)
C(s)
V4(s)
FIGURE 5.19
Signal-ﬂow graph development: a. signal nodes; b. signal-ﬂow graph;
c. simpliﬁed signal-ﬂow graph
250
Chapter 5
Reduction of Multiple Subsystems

5.5 Mason’s Rule
Earlier in this chapter, we discussed how to reduce block diagrams to single transfer
functions. Now we are ready to discuss a technique for reducing signal-ﬂow graphs to single
transfer functions that relate the output of a system to its input.
The block diagram reduction technique we studied in Section 5.2 requires successive
application of fundamental relationships in order to arrive at the system transfer function.
On the other hand, Mason’s rule for reducing a signal-ﬂow graph to a single transfer function
requires the application of one formula. The formula was derived by S. J. Mason when he
related the signal-ﬂow graph to the simultaneous equations that can be written from the
graph (Mason, 1953).
In general, it can be complicated to implement the formula without making
mistakes. Speciﬁcally, the existence of what we will later call nontouching loops
increases the complexity of the formula. However, many systems do not have non-
touching loops. For these systems, you may ﬁnd Mason’s rule easier to use than block
diagram reduction.
Mason’s formula has several components that must be evaluated. First, we must be
sure that the deﬁnitions of the components are well understood. Then we must exert care in
evaluating the components. To that end, we discuss some basic deﬁnitions applicable to
signal-ﬂow graphs; then we state Mason’s rule and do an example.
Definitions
Loop gain. The product of branch gains found by traversing a path that starts at a node and
ends at the same node, following the direction of the signal ﬂow, without passing through
any other node more than once. For examples of loop gains, see Figure 5.20. There are
four loop gains:
1. G2sH1s
(5.25a)
2. G4sH2s
(5.25b)
3. G4sG5sH3s
(5.25c)
4. G4sG6sH3s
(5.25d)
Forward-path gain. The product of gains found by
traversing a path from the input node to the output
node of the signal-ﬂow graph in the direction of signal ﬂow. Examples of forward-path gains
are also shown in Figure 5.20. There are two forward-path gains:
1. G1sG2sG3sG4sG5sG7s
(5.26a)
2. G1sG2sG3sG4sG6sG7s
(5.26b)
Nontouching loops. Loops that do not have any nodes in common. In Figure 5.20, loop
G2(s)H1(s) does not touch loops G4(s)H2(s), G4(s)G5(s)H3(s), and G4(s)G6(s)H3(s).
Nontouching-loop gain. The product of loop gains from nontouching loops taken two, three,
four, or more at a time. In Figure 5.20 the product of loop gain G2(s)H1(s) and loop gain
Skill-Assessment Exercise 5.3
PROBLEM: Convert the block diagram of Figure 5.13 to a signal-ﬂow graph.
ANSWER: The complete solution is at www.wiley.com/college/nise.
R(s)
G1(s)
G2(s)
G3(s)
G4(s)
V5(s)
V4(s)
H1(s)
H2(s)
V3(s)
G5(s)
V2(s)
G6(s)
G7(s)
V1(s)
C(s)
H3(s)
FIGURE 5.20
Signal-ﬂow graph for demonstrating Mason’s rule
5.5 Mason’s Rule
251

G4(s)H2(s) is a nontouching-loop gain taken two at a time. In summary, all three of the
nontouching-loop gains taken two at a time are
1. G2sH1sG4sH2s
(5.27a)
2. G2sH1sG4sG5sH3s
(5.27b)
3. G2sH1sG4sG6sH3s
(5.27c)
The product of loop gains G4sG5sH3sG4sG6sH3s is not a nontouching-loop
gain since these two loops have nodes in common. In our example there are no nontouching-
loop gains taken three at a time since three nontouching loops do not exist in the example.
We are now ready to state Mason’s rule.
Mason’s Rule
The transfer function, Cs=Rs, of a system represented by a signal-ﬂow graph is
Gs  Cs
Rs 
P
kTkΔk
Δ
(5.28)
where
k
 number of forward paths
Tk  the kth forward-path gain
Δ  1 
 Σ loop gains  Σ nontouching-loop gains taken two at a time 
 Σ
nontouching-loop gains taken three at a time  Σ nontouching-loop gains
taken four at a time 
 . . .
Δk  Δ 
 Σ loop gain terms in Δ that touch the kth forward path: In other words; Δk
is formed by eliminating from Δ those loop gains that touch the kth forward path:
Notice the alternating signs for the components of Δ. The following example will help
clarify Mason’s rule.
Example 5.7
Transfer Function via Mason’s Rule
Transfer Function via Mason’s Rule
PROBLEM: Find the transfer function, C(s)/R(s), for the signal-ﬂow graph in Figure 5.21.
R(s)
G1(s)
G2(s)
V4(s)
H1(s)
G3(s)
V3(s)
G8(s)
V2(s)
G4(s)
V1(s)
G5(s)
H2(s)
C(s)
G6(s)
G7(s)
H4(s)
V5(s)
V6(s)
FIGURE 5.21
Signal-ﬂow
graph for Example 5.7
252
Chapter 5
Reduction of Multiple Subsystems

SOLUTION: First, identify the forward-path gains. In this example there is only one:
G1sG2sG3sG4sG5s
(5.29)
Second, identify the loop gains. There are four, as follows:
1. G2sH1s
(5.30a)
2. G4sH2s
(5.30b)
3. G7sH4s
(5.30c)
4. G2sG3sG4sG5sG6sG7sG8s
(5.30d)
Third, identify the nontouching loops taken two at a time. From Eqs. (5.30) and
Figure 5.21, we can see that loop 1 does not touch loop 2, loop 1 does not touch
loop 3, and loop 2 does not touch loop 3. Notice that loops 1, 2, and 3 all touch loop 4.
Thus, the combinations of nontouching loops taken two at a time are as follows:
Loop 1 and loop 2: G2sH1sG4sH2s
(5.31a)
Loop 1 and loop 3: G2sH1sG7sH4s
(5.31b)
Loop 2 and loop 3: G4sH2sG7sH4s
(5.31c)
Finally, the nontouching loops taken three at a time are as follows:
Loops 1; 2; and 3:
G2sH1sG4sH2sG7sH4s
(5.32)
Now, from Eq. (5.28) and its deﬁnitions, we form Δ and Δk. Hence,
Δ  1 
G2sH1s  G4sH2s  G7sH4s
 G2sG3sG4sG5sG6sG7sG8s
G2sH1sG4sH2s  G2sH1sG7sH4s
 G4sH2sG7sH4s

G2sH1sG4sH2sG7sH4s
(5.33)
We form Δk by eliminating from Δ the loop gains that touch the kth forward path:
Δ1  1 
 G7sH4s
(5.34)
Expressions (5.29), (5.33), and (5.34) are now substituted into Eq. (5.28), yielding
the transfer function:
Gs  T1Δ1
Δ
 G1sG2sG3sG4sG5s1 
 G7sH4s
Δ
(5.35)
Since there is only one forward path, G(s) consists of only one term, rather than a sum of
terms, each coming from a forward path.
Skill-Assessment Exercise 5.4
PROBLEM: Use Mason’s rule to ﬁnd the transfer function of the signal-ﬂow diagram
shown in Figure 5.19(c). Notice that this is the same system used in Example 5.2 to ﬁnd
the transfer function via block diagram reduction.
ANSWER:
Ts 
G1sG3s1  G2s
1  G2sH2s  G1sG2sH1s

1  G3sH3s
The complete solution is at www.wiley.com/college/nise.
5.5 Mason’s Rule
253

5.6 Signal-Flow Graphs of State Equations
In this section, we draw signal-ﬂow graphs from state equations. At ﬁrst this process will
help us visualize state variables. Later we will draw signal-ﬂow graphs and then write
alternate representations of a system in state space.
Consider the following state and output equations:
_x1  2x1 
 5x2  3x3  2r
(5.36a)
_x2  
6x1 
 2x2  2x3  5r
(5.36b)
_x3  x1 
 3x2 
 4x3  7r
(5.36c)
y  
4x1  6x2  9x3
(5.36d)
First, identify three nodes to be the three state variables, x1, x2, and x3; also identify
three nodes, placed to the left of each respective state variable, to be the derivatives of the
state variables, as in Figure 5.22(a). Also identify a node as the input, r, and another node as
the output, y.
Next interconnect the state variables and their derivatives with the deﬁning
integration, 1/s, as shown in Figure 5.22(b). Then using Eqs. (5.36), feed to each node
the indicated signals. For example, from Eq. (5.36a), _x1 receives 2x1 
 5x2  3x3  2r, as
shown in Figure 5.22(c). Similarly, _x2 receives 
6x1 
 2x2  2x3  5r, as shown in
Figure 5.22(d), and _x3 receives x1 
 3x2 
 4x3  7r, as shown in Figure 5.22(e). Finally,
using Eq. (5.36d), the output, y, receives 
4x1  6x2  9x3, as shown in Figure 5.19(f), the
ﬁnal phase-variable representation, where the state variables are the outputs of the
integrators.
R(s)
R(s)
Y(s)
sX3(s)
sX2(s)
sX1(s)
X3(s)
X2(s)
X1(s)
Y(s)
(a)
sX3(s)
sX2(s)
sX1(s)
X3(s)
X2(s)
X1(s)
(b)
1
s
1
s
1
s
(c)
sX3(s)
sX2(s)
sX1(s)
X3(s)
X2(s)
X1(s)
2
3
2
Y(s)
R(s)
1s
1s
–5
1s
FIGURE 5.22
Stages of development of a signal-ﬂow graph for the system of Eqs. (5.36): a. Place
nodes; b. interconnect state variables and derivatives; c. form dx1/dt; (ﬁgure continues)
254
Chapter 5
Reduction of Multiple Subsystems

Y(s)
sX3(s)
( f )
sX2(s)
sX1(s)
X3(s)
X2(s)
X1(s)
6
9
R(s)
7
2
–5
–4
3
2
–6
–4
5
–2
–3
1
2
1
s
1
s
1
s
Y(s)
sX3(s)
(e)
sX2(s)
sX1(s)
X3(s)
X2(s)
X1(s)
3
2
–6
–4
5
–2
–3
1
R(s)
7
2
–5
2
1
s
1
s
1
s
Y(s)
sX3(s)
(d)
sX2(s)
sX1(s)
X3(s)
X2(s)
X1(s)
2
3
2
–6
5
–2
R(s)
–5
1s
1s
1s
2
FIGURE 5.22
(Continued) d. form dx2/dt; e. form dx3/dt; f. form output
5.6 Signal-Flow Graphs of State Equations
255

In the next section, the signal-ﬂow model will help us visualize the process of
determining alternative representations in state space of the same system. We will see that
even though a system can be the same with respect to its input and output terminals, the
state-space representations can be many and varied.
5.7 Alternative Representations in State Space
In Chapter 3, systems were represented in state space in phase-variable form. However,
system modeling in state space can take on many representations other than the phase-
variable form. Although each of these models yields the same output for a given input, an
engineer may prefer a particular one for several reasons. For example, one set of state
variables, with its unique representation, can model actual physical variables of a system,
such as ampliﬁer and ﬁlter outputs.
Another motive for choosing a particular set of state variables and state-space model is
ease of solution. As we will see, a particular choice of state variables can decouple the
system of simultaneous differential equations. Here each equation is written in terms of only
one state variable, and the solution is effected by solving n ﬁrst-order differential equations
individually.
Ease of modeling is another reason for a particular choice of state variables. Certain
choices may facilitate converting the subsystem to the state-variable representation by using
recognizable features of the model. The engineer learns quickly how to write the state and
output equations and draw the signal-ﬂow graph, both by inspection. These converted
subsystems generate the deﬁnition of the state variables.
We will now look at a few representative forms and show how to generate the state-
space representation for each.
Cascade Form
We have seen that systems can be represented in state space with the state variables chosen
to be the phase variables, that is, variables that are successive derivatives of each other. This
is by no means the only choice. Returning to the system of Figure 3.10(a), the transfer
function can be represented alternately as
Cs
Rs 
24
s  2s  3s  4
(5.37)
Figure 5.23 shows a block diagram representation of this system formed by cascading each
term of Eq. (5.37). The output of each ﬁrst-order system block has been labeled as a state
variable. These state variables are not the phase variables.
We now show how the signal-ﬂow graph can be used to obtain a state-space
representation of this system. In order to write the state equations with our new set of
Skill-Assessment Exercise 5.5
PROBLEM: Draw a signal-ﬂow graph for the following state and output equations:
_x 

2
1
0
0

3
1

3

4

5
2
64
3
75 x 
0
0
1
2
64
3
75r
y   0
1
0  x
ANSWER: The complete solution is at www.wiley.com/college/nise.
256
Chapter 5
Reduction of Multiple Subsystems

state variables, it is helpful to draw a signal-ﬂow graph ﬁrst, using Figure 5.23 as a guide.
The signal ﬂow for each ﬁrst-order system of Figure 5.23 can be found by transforming each
block into an equivalent differential equation. Each ﬁrst-order block is of the form
Cis
Ris 
1
s  ai
(5.38)
Cross-multiplying, we get
s  aiCis  Ris
(5.39)
After taking the inverse Laplace transform, we have
dcit
dt
 aicit  rit
(5.40)
Solving for dci(t)/dt yields
dcit
dt
 
aicit  rit
(5.41)
Figure 5.24(a) shows the implementation of Eq. (5.41) as a signal-ﬂow graph. Here again, a
node was assumed for ci(t) at the output of an integrator, and its derivative was formed at
the input.
Cascading the transfer functions shown in Figure 5.24(a), we arrive at the system
representation shown in Figure 5.24(b).2 Now write the state equations for the new
representation of the system. Remember that the derivative of a state variable will be at
the input to each integrator:
_x1  
4x1  x2
(5.42a)
_x2 

 3x2  x3
(5.42b)
_x3 

 2x3  24r
(5.42c)
–2
–3
–4
24
1
1
1
(b)
R(s)
C(s)
1
s
1
s
1
s
X3(s)
X2(s)
X1(s)
–ai
Ri(s)
1
(a)
1
s
sCi(s)
Ci(s)
FIGURE 5.24
a. First-order subsystem; b. Signal-ﬂow graph for Figure 5.23 system
R(s)
X3(s)
C(s)
s + 2
1
1
1
24
s + 3
s + 4
X2(s)
X1(s)
FIGURE 5.23
Representation
of Figure 3.10 system as
cascaded ﬁrst-order systems
2 Note that node X3(s) and the following node cannot be merged, or else the input to the ﬁrst integrator would be
changed by the feedback from X2(s), and the signal X3(s) would be lost. A similar argument can be made for X2(s)
and the following node.
5.7 Alternative Representations in State Space
257

The output equation is written by inspection from Figure 5.24(b):
y  ct  x1
(5.43)
The state-space representation is completed by rewriting Eqs. (5.42) and (5.43) in vector-
matrix form:
_x 

4
1
0
0

3
1
0
0

2
2
4
3
5x 
0
0
24
2
4
3
5r
(5.44a)
y 
1
0
0


x
(5.44b)
Comparing Eqs. (5.44) with Figure 5.24(b), you can form a vivid picture of the meaning of
some of the components of the state equation. For the following discussion, please refer
back to the general form of the state and output equations, Eqs. (3.18) and (3.19).
For example, the B matrix is the input matrix since it contains the terms that couple the
input, r(t), to the system. In particular, the constant 24 appears in both the signal-ﬂow graph
at the input, as shown in Figure 5.24(b), and the input matrix in Eqs. (5.44). The C matrix is
the output matrix since it contains the constant that couples the state variable, x1, to the
output, c(t). Finally, the A matrix is the system matrix since it contains the terms relative to
the internal system itself. In the form of Eqs. (5.44), the system matrix actually contains the
system poles along the diagonal.
Compare Eqs. (5.44) to the phase-variable representation in Eqs. (3.59). In that
representation, the coefﬁcients of the system’s characteristic polynomial appeared along the
last row, whereas in our current representation, the roots of the characteristic equation, the
system poles, appear along the diagonal.
Parallel Form
Another form that can be used to represent a system is the parallel form. This form leads to
an A matrix that is purely diagonal, provided that no system pole is a repeated root of the
characteristic equation.
Whereas the previous form was arrived at by cascading the individual ﬁrst-order
subsystems, the parallel form is derived from a partial-fraction expansion of the system
transfer function. Performing a partial-fraction expansion on our example system,
we get
Cs
Rs 
24
s  2s  3s  4 
12
s  2 
24
s  3 
12
s  4
(5.45)
Equation (5.45) represents the sum of the individual ﬁrst-order
subsystems. To arrive at a signal-ﬂow graph, ﬁrst solve for C(s),
Cs  Rs
12
s  2 
 Rs
24
s  3  Rs
12
s  4
(5.46)
and recognize that C(s) is the sum of three terms. Each term is a ﬁrst-
order subsystem with R(s) as the input. Formulating this idea as a
signal-ﬂow graph renders the representation shown in Figure 5.25.
Once again, we use the signal-ﬂow graph as an aid to
obtaining the state equations. By inspection the state variables
are the outputs of each integrator, where the derivatives of the state
variables exist at the integrator inputs. We write the state equations
–2
–3
–4
R(s)
–24
1
12
12
1
1
C(s)
1
s
1
s
X1(s)
X2(s)
X3(s)
1
s
FIGURE 5.25
Signal-ﬂow representation of Eq. (5.45)
258
Chapter 5
Reduction of Multiple Subsystems

by summing the signals at the integrator inputs:
_x1  
2x1
12r
(5.47a)
_x2 

3x2

24r
(5.47b)
_x3 

4x3 12r
(5.47c)
The output equation is found by summing the signals that give c(t):
y  ct  x1  x2  x3
(5.48)
In vector-matrix form, Eqs. (5.47) and (5.48) become
_x 

2
0
0
0

3
0
0
0

4
2
4
3
5x 
12

24
12
2
4
3
5r
(5.49)
and
y   1
1
1 x
(5.50)
Thus, our third representation of the system of Figure 3.10(a) yields a diagonal system
matrix. What is the advantage of this representation? Each equation is a ﬁrst-order
differential equation in only one variable. Thus, we would solve these equations
independently. The equations are said to be decoupled.
Students who are using MATLAB should now run ch5p3 in Appendix B.
You will learn how to use MATLAB to convert a transfer function to
state space in a speciﬁed form. The exercise solves the previous
example by representing the transfer function in Eq.(5.45)by the
state-space representation in parallel form of Eq.(5.49).
If the denominator of the transfer function has repeated real roots, the parallel form
can still be derived from a partial-fraction expansion. However, the system matrix will not
be diagonal. For example, assume the system
Cs
Rs 
s  3
s  12s  2
(5.51)
which can be expanded as partial fractions:
Cs
Rs 
2
s  12 
1
s  1 
1
s  2
(5.52)
Proceeding as before, the signal-ﬂow graph for Eq. (5.52) is
shown in Figure 5.26. The term 
1=s  1 was formed by creating
the signal ﬂow from X2(s) to C(s). Now the state and output equations
can be written by inspection from Figure 5.26 as follows:
_x1  
x1
 x2
(5.53a)
_x2 

 x2
 2r
(5.53b)
_x3 

2x3  r
(5.53c)
y  ct 
x1 
 1
2 x2
 x3
(5.53d)
–1
–1
1
1
2
–
2
1
1
1
–2
R(s)
C(s)
X3(s)
1
s
X2(s)
X1(s)
1
s
1
s
FIGURE 5.26
Signal-ﬂow representation of Eq. (5.52)
5.7 Alternative Representations in State Space
259

or, in vector-matrix form,
_x 

1
1
0
0

1
0
0
0

2
2
4
3
5x 
0
2
1
2
4
3
5r
(5.54a)
y 
1

 1
2
1


x
(5.54b)
This system matrix, although not diagonal, has the system poles along the diagonal. Notice
the 1 off the diagonal for the case of the repeated root. The form of the system matrix is
known as the Jordan canonical form.
Controller Canonical Form
Another representation that uses phase variables is called the controller canonical form, so
named for its use in the design of controllers, which is covered in Chapter 12. This form is
obtained from the phase-variable form simply by ordering the phase variables in the reverse
order. For example, consider the transfer function
Gs  Cs
Rs 
s2  7s  2
s3  9s2  26s  24
(5.55)
The phase-variable form was derived in Example 3.5 as
_x1
_x2
_x3
2
64
3
75 
0
1
0
0
0
1

24

26

9
2
64
3
75
x1
x2
x3
2
64
3
75 
0
0
1
2
64
3
75r
(5.56a)
y 
2
7
1


x1
x2
x3
2
4
3
5
(5.56b)
where y  ct. Renumbering the phase variables in reverse order yields
_x3
_x2
_x1
2
64
3
75 
0
1
0
0
0
1

24

26

9
2
64
3
75
x3
x2
x1
2
64
3
75 
0
0
1
2
64
3
75r
(5.57a)
y 
2
7
1


x3
x2
x1
2
4
3
5
(5.57b)
Finally, rearranging Eqs. (5.57) in ascending numerical order yields the controller canonical
form3 as
_x1
_x2
_x3
2
64
3
75 

9

26

24
1
0
0
0
1
0
2
64
3
75
x1
x2
x3
2
64
3
75 
1
0
0
2
64
3
75r
(5.58a)
y 
1
7
2


x1
x2
x3
2
4
3
5
(5.58b)
TryIt 5.3
Use the following MATLAB and
Control System Toolbox
statements to convert the transfer
function of Eq. (5.55) to the
controller canonical state-space
representation of Eqs. (5.58).
numg=[1 7 2];
deng=[1 9 26 24];
[Acc, Bcc, Ccc, Dcc]...
=tf2ss(numg, deng)
3 Students who are using MATLAB to convert from transfer functions to state space using the command tf2ss will
notice that MATLAB reports the results in controller canonical form.
260
Chapter 5
Reduction of Multiple Subsystems

Figure 5.27 shows the steps we have taken on a signal-ﬂow graph. Notice that the controller
canonical form is obtained simply by renumbering the phase variables in the opposite order.
Equations (5.56) can be obtained from Figure 5.27(a), and Eqs. (5.58) from Figure 5.27(b).
Notice that the phase-variable form and the controller canonical form contain the
coefﬁcients of the characteristic polynomial in the bottom row and in the top row,
respectively. System matrices that contain the coefﬁcients of the characteristic polynomial
are called companion matrices to the characteristic polynomial. The phase-variable and
controller canonical forms result in a lower and an upper companion system matrix,
respectively. Companion matrices can also have the coefﬁcients of the characteristic
polynomial in the left or right column. In the next subsection, we discuss one of these
representations.
Observer Canonical Form
The observer canonical form, so named for its use in the design of observers (covered in
Chapter 12), is a representation that yields a left companion system matrix. As an example,
the system modeled by Eq. (5.55) will be represented in this form. Begin by dividing all
terms in the numerator and denominator by the highest power of s, s3, and obtain
Cs
Rs 
1
s  7
s2  2
s3
1  9
s  26
s2  24
s3
(5.59)
Cross-multiplying yields
1
s  7
s2  2
s3


Rs 
1  9
s  26
s2  24
s3


Cs
(5.60)
Combining terms of like powers of integration gives
Cs  1
s Rs 
 9Cs  1
s2 7Rs 
 26Cs  1
s3 2Rs 
 24Cs
(5.61)
or
Cs  1
s Rs 
 9Cs  1
s
7Rs 
 26Cs  1
s 2Rs 
 24Cs




(5.62)
R(s)
C(s)
1
X3(s)
X2(s)
X1(s)
1
2
1
7
–9
–26
–24
R(s)
C(s)
X1(s)
X2(s)
X3(s)
1
2
1
7
–9
–26
–24
(a)
(b)
s
1
s
1
s
1
s
1
s
1
s
FIGURE 5.27
Signal-ﬂow graphs for obtaining forms for Gs  Cs=Rs  s2  7s  2=
s3  9s2  26s  24: a. phase-variable form; b. controller canonical form
5.7 Alternative Representations in State Space
261

Equation (5.61) or (5.62) can be used to draw the signal-ﬂow graph. Start with three
integrations, as shown in Figure 5.28(a).
Using Eq. (5.61), the ﬁrst term tells us that output C(s) is formed, in part, by
integrating Rs 
 9Cs. We thus form Rs 
 9Cs at the input to the integrator closest
to the output, C(s), as shown in Figure 5.28(b). The second term tells us that the term
7Rs 
 26Cs must be integrated twice. Now form 7Rs 
 26Cs at the input to the
second integrator. Finally, the last term of Eq. (5.61) says 2Rs 
 24Cs must be
integrated three times. Form 2Rs 
 24Cs at the input to the ﬁrst integrator.
Identifying the state variables as the outputs of the integrators, we write the following
state equations:
_x1  
 9x1  x2
 r
(5.63a)
_x2  
26x1
 x3  7r
(5.63b)
_x3  
24x1
 2r
(5.63c)
The output equation from Figure 5.28(b) is
y  ct  x1
(5.64)
In vector-matrix form, Eqs. (5.63) and (5.64) become
_x 

9
1
0

26
0
1

24
0
0
2
4
3
5x 
1
7
2
2
4
3
5r
(5.65a)
y   1
0
0  x
(5.65b)
Notice that the form of Eqs. (5.65) is similar to the phase-variable form, except that the
coefﬁcients of the denominator of the transfer function are in the ﬁrst column, and the
coefﬁcients of the numerator form the input matrix, B. Also notice that the observer
canonical form has an A matrix that is the transpose of the controller canonical form, a B
vector that is the transpose of the controller canonical form’s C vector, and a C vector that is
the transpose of the controller canonical form’s B vector. We therefore say that these two
forms are duals. Thus, if a system is described by A, B, and C, its dual is described by
–9
–26
1
1
1
–24
2
7
1
(b)
X3(s)
X2(s)
X1(s)
C(s)
1
1
1
(a)
R(s)
R(s)
X3(s)
X2(s)
X1(s)
C(s)
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE 5.28
Signal-ﬂow
graph for observer canonical
form variables: a. planning;
b. implementation
TryIt 5.4
Use the following MATLAB
and Control System Toolbox
statements to convert the transfer
function of Eq. (5.55) to the
observer canonical state-space
representation of Eqs. (5.65).
numg=[1 7 2];
deng=[1 9 26 24];
[Acc, Bcc, Ccc, Dcc]...
=tf2ss(numg, deng);
Aoc=transpose(Acc)
Boc=transpose(Ccc)
Coc=transpose(Bcc)
262
Chapter 5
Reduction of Multiple Subsystems

AD  AT; BD  CT; CD  BT. You can verify the signiﬁcance of duality by comparing the
signal-ﬂow graphs of a system and its dual, Figures 5.27(b) and 5.28(b), respectively. The
signal-ﬂow graph of the dual can be obtained from that of the original by reversing all
arrows, changing state variables to their derivatives and vice versa, and interchanging C(s)
and R(s), thus reversing the roles of the input and the output.
We conclude this section with an example that demonstrates the application of the
previously discussed forms to a feedback control system.
Example 5.8
State-Space Representation of Feedback Systems
State-Space Representation of Feedback Systems
PROBLEM: Represent the feedback control system shown in Figure 5.29
in state space. Model the forward transfer function in cascade form.
SOLUTION: First we model the forward transfer function in cascade
form. Thegain of 100, thepole at
2,andthe pole at
3are shown cascaded
in Figure 5.30(a). The zero at 
5 was obtained using the method for
implementing zeros for a system represented in phase-variable form,
as discussed in Section 3.5.
Next add the feedback and input paths, as shown in Figure 5.30(b). Now, by
inspection, write the state equations:
_x1  
3x1  x2
(5.66a)
_x2 

 2x2  100r 
 c
(5.66b)
But, from Figure 5.30(b),
c  5x1  x2 
 3x1   2x1  x2
(5.67)
Substituting Eq. (5.67) into Eq. (5.66b), we ﬁnd the state equations for the system:
_x1 

 3x1
 x2
(5.68a)
_x2  
200x1 
 102x2  100r
(5.68b)
R(s)
100
1
1
5
C(s)
–1
(b)
1
s
1
s
–2
–3
1
X1(s)
X2(s)
E(s)
E(s)
100
–2
1
–3
5
1
1
s
(  )
(a)
1
s
C(s)
X2(s)
X1(s)
FIGURE 5.30
Creating a
signal-ﬂow graph for the
Figure 5.29 system: a. forward
transfer function; b. complete
system
R(s)
+
–
E(s)
C(s)
(s + 2)(s + 3)
100(s + 5)
FIGURE 5.29
Feedback control system for
Example 5.8
5.7 Alternative Representations in State Space
263

In this section, we used transfer functions and signal-ﬂow graphs to represent systems
in parallel, cascade, controller canonical, and observer canonical forms, in addition to the
phase-variable form. Using the transfer function Cs=Rs  s  3=s  4s  6 as an
example, Figure 5.31 compares the aforementioned forms. Notice the duality of the controller
andobservercanonicalforms,as demonstratedbytheir respectivesignal-ﬂow graphsandstate
The output equation is the same as Eq. (5.67), or
y  ct  2x1  x2
(5.69)
In vector-matrix form
_x 

3
1

200

102


x 
0
100


r
(5.70a)
y   2
1  x
(5.70b)
Skill-Assessment Exercise 5.6
PROBLEM: Represent the feedback control system shown in Figure 5.29 in state space.
Model the forward transfer function in controller canonical form.
ANSWER:
_x 

105

506
1
0


x 
1
0


r
y   100
500 x
The complete solution is at www.wiley.com/college/nise.
R(s)
C(s)
X2(s)
1
s
X1(s)
1
–10
–24
Phase
variable
Form
Transfer function
Signal-flow diagram
State equations
3
1
s
1
(s2 + 10s + 24)
(s + 3)
Parallel
1
–6
2
X2(s)
X1(s)
C(s)
R(s)
1
1
–4
1
s
1
s
1
2
–
2
3
(s + 4)
s + 6
+
*
x = 
y = [1  1] x
x + 
– 4
1
2
0
0
– 6
x = 
r
r
y = [3  1] x
x + 
0
0
–24
1
.
.
1
– 10
3
2
–
FIGURE 5.31
State-space forms for Cs=Rs  s  3=s  4s  6. Note: y  ct (ﬁgure continues)
264
Chapter 5
Reduction of Multiple Subsystems

equations. In the next section, we will explore the possibility of transforming between
representations without using transfer functions and signal-ﬂow graphs.
5.8 Similarity Transformations
In Section 5.7, we saw that systems can be represented with different state variables even
though the transfer function relating the output to the input remains the same. The various
forms of the state equations were found by manipulating the transfer function, drawing a
signal-ﬂow graph, and then writing the state equations from the signal-ﬂow graph. These
systems are called similar systems. Although their state-space representations are different,
similar systems have the same transfer function and hence the same poles and eigenvalues.
We can make transformations between similar systems from one set of state equations
to another without using the transfer function and signal-ﬂow graphs. The results are
presented in this section along with examples. Students who have not broached this subject
in the past or who wish to refresh their memories are encouraged to study Appendix L at
www.wiley.com/college/nise for the derivation. The result of the derivation states: A system
represented in state space as
x  Ax  Bu
(5.71a)
y  Cx  Du
(5.71b)
can be transformed to a similar system,
z  P
1APz  P
1Bu
(5.72a)
y  CPz  Du
(5.72b)
C(s)
X1(s)
X2(s)
–4
–6 
1
3
1
1
s
1
s
C(s)
X1(s)
R(s)
X2(s)
s
1
1
3
1
s
1
–10
–24
1
C(s)
R(s)
X2(s)
3
s
1
–24
1
1
s
1
1
X1(s)
–10
Cascade
1
(s + 4)
(s + 6)
(s + 3)
*
Observer
canonical
Controller
canonical
1
(s2 + 10s + 24)
(s + 3)
*
.
.
.
x = 
r
y = [–3  1] x
x + 
–6
0
0
1
1
– 4
x = 
r
y = [1  3] x
x + 
–10
1
1
–24
0
0
x = 
r
y = [1  0] x
x + 
–10
1
–24
1
3
0
Form
Transfer function
Signal-flow diagram
State equations
s
10
s
24
1 +
2
+
s
1
s
3
2
+
R(s)
1
FIGURE 5.31
(Continued)
5.8 Similarity Transformations
265

where, for 2-space,
P  Uz1Uz2 
p11
p12
p21
p22
"
#
(5.72c)
x 
p11
p12
p21
p22
"
#
z1
z2
"
#
 Pz
(5.72d)
and
z  P
1x
(5.72e)
Thus, P is a transformation matrix whose columns are the coordinates of the basis vectors
of the z1z2 space expressed as linear combinations of the x1x2 space. Let us look at
an example.
Example 5.9
Similarity Transformations on State Equations
Similarity Transformations on State Equations
PROBLEM: Given the system represented in state space by Eqs. (5.73),
_x 
0
1
0
0
0
1

2

5

7
2
4
3
5x 
0
0
1
2
4
3
5u
(5.73a)
y   1
0
0 x
(5.73b)
transform the system to a new set of state variables, z, where the new state variables are
related to the original state variables, x, as follows:
z1  2x1
(5.74a)
z2  3x1  2x2
(5.74b)
z3  x1  4x2  5x3
(5.74c)
SOLUTION: Expressing Eqs. (5.74) in vector-matrix form,
z 
2
0
0
3
2
0
1
4
5
2
4
3
5x  P
1x
(5.75)
Using Eqs. (5.72) as a guide,
P
1AP 
2
0
0
3
2
0
1
4
5
2
64
3
75
0
1
0
0
0
1

2

5

7
2
64
3
75
0:5
0
0

0:75
0:5
0
0:5

0:4
0:2
2
64
3
75


1:5
1
0

1:25
0:7
0:4

2:5
0:4

6:2
2
64
3
75
(5.76)
266
Chapter 5
Reduction of Multiple Subsystems

Thus far we have talked about transforming systems between basis vectors in a
different state space. One major advantage of ﬁnding these similar systems is apparent in the
transformation to a system that has a diagonal matrix.
Diagonalizing a System Matrix
In Section 5.7, we saw that the parallel form of a signal-ﬂow graph can yield a diagonal
system matrix. A diagonal system matrix has the advantage that each state equation is a
function of only one state variable. Hence, each differential equation can be solved
independently of the other equations. We say that the equations are decoupled.
Rather than using partial fraction expansion and signal-ﬂow graphs, we can decouple a
system using matrix transformations. If we ﬁnd the correct matrix, P, the transformed system
matrix, P
1AP, will be a diagonal matrix. Thus, we are looking for a transformation to another
state space that yields a diagonal matrix in that space. This new state space also has basis
vectors that lie alongits state variables. We give a special name to any vectors that are collinear
with the basis vectors of the new system that yields a diagonal system matrix: they are called
eigenvectors.Thus,thecoordinatesoftheeigenvectorsformthecolumnsofthetransformation
matrix, P, as we demonstrate in Eq. L.7 in Appendix L at www.wiley.com/college/nise.
First, let us formally deﬁne eigenvectors from another perspective and then show that
they have the property just described. Then we will deﬁne eigenvalues. Finally, we will
show how to diagonalize a matrix.
Deﬁnitions
Eigenvector. The eigenvectors of the matrix A are all vectors, xi 6 0, which under the
transformation A become multiples of themselves; that is,
Axi  λixi
(5.80)
where λi’s are constants.
Figure 5.32 shows this deﬁnition of eigenvectors. If Ax is not collinear with x after the
transformation, as in Figure 5.32(a), x is not an eigenvector. If Ax is collinear with x after
the transformation, as in Figure 5.32(b), x is an eigenvector.
P
1B 
2
0
0
3
2
0
1
4
5
2
64
3
75
0
0
1
2
64
3
75 
0
0
5
2
64
3
75
(5.77)
CP  1
0
0


0:5
0
0

0:75
0:5
0
0:5

0:4
0:2
2
64
3
75 0:5
0
0


(5.78)
Therefore, the transformed system is
_z 

1:5
1
0

1:25
0:7
0:4

2:55
0:4

6:2
2
64
3
75z 
0
0
5
2
64
3
75u
(5.79a)
y   0:5
0
0 z
(5.79b)
Students who are using MATLAB should now run ch5p4 in Appendix B.
You will learn how to perform similarity transformations. This
exercise uses MATLAB to do Example 5.9.
5.8 Similarity Transformations
267

Eigenvalue. The eigenvalues of the matrix A are the values of λi that satisfy
Eq. (5.80) for xi 6 0.
To ﬁnd the eigenvectors, we rearrange Eq. (5.80). Eigenvectors, xi, satisfy
0  λiI 
 Axi
(5.81)
Solving for xi by premultiplying both sides by λiI 
 A
1 yields
xi  λiI 
 A
10  adjλiI 
 A
detλiI 
 A 0
(5.82)
Since xi 6 0, a nonzero solution exists if
detλiI 
 A  0
(5.83)
from which λi, the eigenvalues, can be found.
We are now ready to show how to ﬁnd the eigenvectors, xi. First we ﬁnd the
eigenvalues, λi, using detλiI 
 A  0, and then we use Eq. (5.80) to ﬁnd the eigenvectors.
(b)
Ax
x
x2
x1
x2
Ax
x
(a)
x1
FIGURE 5.32
To be an
eigenvector, the transformation
Ax must be collinear with x;
thus, in (a), x is not an
eigenvector; in (b), it is.
Example 5.10
Finding Eigenvectors
Finding Eigenvectors
PROBLEM: Find the eigenvectors of the matrix
A 

3
1
1

3


(5.84)
SOLUTION: The eigenvectors, xi, satisfy Eq. (5.81). First, use detλiI 
 A  0 to ﬁnd
the eigenvalues, λi, for Eq. (5.81):
detλI 
 A 
					
λ
0
0
λ
"
#


3
1
1

3
"
#					

					
λ  3

1

1
λ  3
					
 λ2  6λ  8
(5.85)
from which the eigenvalues are λ  
2, and 
4.
Using Eq. (5.80) successively with each eigenvalue, we have
Axi  λxi

3
1
1

3
"
# x1
x2
"
#
 
2
" x1
x2
#
(5.86)
268
Chapter 5
Reduction of Multiple Subsystems

We now show that if the eigenvectors of the matrix A are chosen as the basis vectors
of a transformation, P, the resulting system matrix will be diagonal. Let the transformation
matrix P consist of the eigenvectors of A, xi.
P  x1; x2; x3; . . . ; xn
(5.91)
Since xi are eigenvectors, Axi  λixi, which can be written equivalently as a set of equations
expressed by
AP  PD
(5.92)
where D is a diagonal matrix consisting of λi’s, the eigenvalues, along the diagonal, and P is
as deﬁned in Eq. (5.91). Solving Eq. (5.92) for D by premultiplying by P
1, we get
D  P
1AP
(5.93)
which is the system matrix of Eq. (5.72).
In summary, under the transformation P, consisting of the eigenvectors of the system
matrix, the transformed system is diagonal, with the eigenvalues of the system along the
diagonal. The transformed system is identical to that obtained using partial-fraction
expansion of the transfer function with distinct real roots.
In Example 5.10, we found eigenvectors of a second-order system. Let us continue
with this problem and diagonalize the system matrix.
or

3x1  x2  
2x1
(5.87a)
x1 
 3x2  
2x2
(5.87b)
from which x1  x2. Thus,
x 
c
c
 
(5.88)
Using the other eigenvalue, 
4, we have
x 
"
c

c
#
(5.89)
Using Eqs. (5.88) and (5.89), one choice of eigenvectors is
x1 
1
1
"
#
and
x2 
1

1
"
#
(5.90)
Example 5.11
Diagonalizing a System in State Space
Diagonalizing a System in State Space
PROBLEM: Given the system of Eqs. (5.94), ﬁnd the diagonal system that is similar.
_x  
3
1
1

3


x 
1
2


u
(5.94a)
y  2
3  x
(5.94b)
5.8 Similarity Transformations
269

Students who are using MATLAB should now run ch5p5 in Appendix B.
This problem, which uses MATLAB to diagonalize a system, is similar
(but not identical)to Example 5.11.
SOLUTION: First ﬁnd the eigenvalues and the eigenvectors. This step was performed in
Example 5.10. Next form the transformation matrix P, whose columns consist of the
eigenvectors.
P 
1
1
1

1


(5.95)
Finally, form the similar system’s system matrix, input matrix, and output matrix,
respectively.
P
1AP 
1=2
1=2
1=2

1=2

 
3
1
1

3

 1
1
1

1




2
0
0

4


(5.96a)
P
1B 
1=2
1=2
1=2

1=2

 1
2



3=2

1=2


(5.96b)
CP 
2
3

 1
1
1

1



5

1


(5.96c)
Substituting Eqs. (5.96) into Eqs. (5.72), we get
_z 

2
0
0

4
"
#
z 
3=2

1=2
"
#
u
(5.97a)
y   5

1  z
(5.97b)
Notice that the system matrix is diagonal, with the eigenvalues along the diagonal.
Skill-Assessment Exercise 5.7
PROBLEM: For the system represented in state space as follows:
_x 
1
3

4

6
"
#
x 
1
3
"
#
u
y 
1
4


x
convert the system to one where the new state vector, z, is
z 
3

2
1

4


x
ANSWER:
_z 
6:5

8:5
9:5

11:5
"
#
z 

3

11
"
#
u
y  0:8

1:4


z
The complete solution is at www.wiley.com/college/nise.
270
Chapter 5
Reduction of Multiple Subsystems

In this section, we learned how to move between different state-space representations
of the same system via matrix transformations rather than transfer function manipulation
and signal-ﬂow graphs. These different representations are called similar. The characteristics
of similar systems are that the transfer functions relating the output to the input are the same,
as are the eigenvalues and poles. A particularly useful transformation was converting a
system with distinct, real eigenvalues to a diagonal system matrix.
We now summarize the concepts of block diagram and signal-ﬂow representations
of systems, ﬁrst through case study problems and then in a written summary. Our
case studies include the antenna azimuth position control system and the Unmanned
Free-Swimming Submersible vehicle (UFSS). Block diagram reduction is important for
the analysis and design of these systems as well as the control systems on board Alvin
(Figure 5.33), used to explore the wreckage of the Titanic 13,000 feet under the Atlantic in
July 1986 (Ballard, 1987).
Skill-Assessment Exercise 5.8
PROBLEM: For the original system of Skill-Assessment Exercise 5.7, ﬁnd the
diagonal system that is similar.
ANSWER:
_z 

2
0
0

3
"
#
z 
18:39
20
"
#
u
y  
2:121
2:6


z
The complete solution is at www.wiley.com/college/nise.
TryIt 5.5
Use the following MATLAB and
Control System Toolbox statements
to do Skill-Assessment Exercise 5.8.
A=[1 3; 
4 
6];
B=[1; 3];
C=[1 4];
D=0;S=ss(A, B, C, D);
Sd=canon(S,'modal')
© Rob Catanach, Woods Hole Oceanographic Institution.
FIGURE 5.33
Alvin, a manned submersible, explored the wreckage of the Titanic with a tethered
robot, Jason Junior.
5.8 Similarity Transformations
271

Case Studies
Antenna Control: Designing a Closed-Loop Response
Antenna Control: Designing a Closed-Loop Response
This chapter has shown that physical subsystems can be modeled mathematically with
transfer functions and then interconnected to form a feedback system. The interconnected
mathematical models can be reduced to a single transfer function representing the system
from input to output. This transfer function, the closed-loop transfer function, is then used
to determine the system response.
The following case study shows how to reduce the subsystems of the antenna
azimuth position control system to a single, closed-loop transfer function in order to
analyze and design the transient response characteristics.
PROBLEM: Given the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 1, do the following:
a. Find the closed-loop transfer function using block diagram reduction.
b. Represent each subsystem with a signal-ﬂow graph and ﬁnd the state-space
representation of the closed-loop system from the signal-ﬂow graph.
c. Use the signal-ﬂow graph found in b along with Mason’s rule to ﬁnd the closed-loop
transfer function.
d. Replace the power ampliﬁer with a transfer function of unity and evaluate the
closed-loop peak time, percent overshoot, and settling time for K  1000.
e. For the system of d, derive the expression for the closed-loop step response of the
system.
f. For the simpliﬁed model of d, ﬁnd the value of K that yields a 10% overshoot.
SOLUTION: Each subsystem’s transfer function was evaluated in the case study in
Chapter 2. We ﬁrst assemble them into the closed-loop, feedback control system block
diagram shown in Figure 5.34(a).
a. The steps taken to reduce the block diagram to a single, closed-loop transfer function
relating the output angular displacement to the input angular displacement are shown in
Figure 5.34(a–d). In Figure 5.34(b), the input potentiometer was pushed to the right
past the summing junction, creating a unity feedback system. In Figure 5.34(c), all the
blocks of the forward transfer function are multiplied together, forming the equivalent
forward transfer function. Finally, the feedback formula is applied, yielding the
closed-loop transfer function in Figure 5.34(d).
b. In order to obtain the signal-ﬂow graph of each subsystem, we use the state equations
derived in the case study of Chapter 3. The signal-ﬂow graph for the power ampliﬁer is
drawn from the state equations of Eqs. (3.87) and (3.88), and the signal-ﬂow graph of
the motor and load is drawn from the state equation of Eq. (3.98). Other subsystems are
pure gains. The signal-ﬂow graph for Figure 5.34(a) is shown in Figure 5.35 and
consists of the interconnected subsystems.
The state equations are written from Figure 5.35. First deﬁne the state variables as the
outputs of the integrators. Hence, the state vector is
x 
x1
x2
ea
2
4
3
5
(5.98)
272
Chapter 5
Reduction of Multiple Subsystems

Using Figure 5.35, we write the state equations by inspection:
_x1 
 x2
(5.99a)
_x2 

 1:71x2  2:083ea
(5.99b)
_ea  
3:18Kx1

 100ea  31:8Kθi
(5.99c)
along with the output equation,
y  θo  0:1x1
(5.100)
where 1=π  0:318.
In vector-matrix form,
_x 
0
1
0
0

1:71
2:083

3:18K
0

100
2
64
3
75x 
0
0
31:8K
2
64
3
75θi
(5.101a)
y   0:1
0
0  x
(5.101b)
K
Vp(s)
100
s
1
s
1
s
1
0.1
–100
–1.71
1
X1(s)
2.083
–
θo (s)
θi (s)
Ea(s)
X2(s)
π
1
π
FIGURE 5.35
Signal-ﬂow
graph for the antenna azimuth
position control system
(d)
6.63 K
s3 + 101.71s2 + 171s + 6.63 K
–
+
(c)
6.63 K
s(s + 1.71)(s + 100)
(b)
–
+
K
Preamplifier
and potentiometers
Power
amplifier
Motor, load,
and gears
100
s + 100
0.2083
s(s + 1.71)
Ea(s)
Vp(s)
1
–
+
Input
potentiometer
K
Preamplifier
100
s + 100
Power
amplifier
0.2083
Motor, load,
and gears
1
Output
potentiometer
(a)
s(s + 1.71)
Ea(s)
Vp(s)
θi(s)
θi(s)
θi(s)
θo(s)
θo(s)
θi(s)
θo(s)
θo(s)
π
π
π
FIGURE 5.34
Block diagram
reduction for the antenna
azimuth position control
system: a. original; b. pushing
input potentiometer to the right
past the summing junction;
c. showing equivalent forward
transfer function; d. ﬁnal
closed-loop transfer function
Case Studies
273

c. We now apply Mason’s rule to Figure 5.35 to derive the closed-loop transfer function of
the antenna azimuth position control system. First ﬁnd the forward-path gains. From
Figure 5.35 there is only one forward-path gain:
T1 
1
π
 
K100 1
s
 
2:083 1
s
  1
s
 
0:1  6:63K
s3
(5.102)
Next identify the closed-loop gains. There are three: the power ampliﬁer loop, GL1(s),
with ea at the output; the motor loop, GL2(s), with x2 at the output; and the entire system
loop, GL3(s), with θ0 at the output.
GL1s  
100
s
(5.103a)
GL2s  
1:71
s
(5.103b)
GL3s  K100 1
s
 
2:083 1
s
  1
s
 
0:1 
1
π


 
6:63K
s3
(5.103c)
Only GL1(s) and GL2(s) are nontouching loops. Thus, the nontouching-loop gain is
GL1sGL2s  171
s2
(5.104)
Forming Δ and Δk in Eq. (5.28), we have
Δ  1 
 GL1s  GL2s  GL3s  GL1sGL2s
 1  100
s  1:71
s
 6:63K
s3
 171
s2
(5.105)
and
Δ1  1
(5.106)
Substituting Eqs. (5.102), (5.105), and (5.106) into Eq. (5.28), we obtain the closed-
loop transfer function as
Ts  Cs
Rs  T1Δ1
Δ

6:63K
s3  101:71s2  171s  6:63K
(5.107)
d. Replacing the power ampliﬁer with unity gain and letting the preampliﬁer gain, K, in
Figure 5.34(b) equal 1,000 yield a forward transfer function, G(s), of
Gs 
66:3
ss  1:71
(5.108)
Using the feedback formula to evaluate the closed-loop transfer function, we obtain
Ts 
66:3
s2  1:71s  66:3
(5.109)
From the denominator, ωn  8:14; ζ  0:105. Using Eqs. (4.34), (4.38), and (4.42),
the peak time  0:388 second, the percent overshoot  71:77%, and the settling
time  4:68 seconds.
274
Chapter 5
Reduction of Multiple Subsystems

e. The Laplace transform of the step response is found by ﬁrst multiplying Eq. (5.109)
by 1/s, a unit-step input, and expanding into partial fractions:
Cs 
66:3
ss2  1:71s  66:3  1
s 
s  1:71
s2  1:71s  66:3
 1
s 
 s  0:855  0:1068:097
s  0:8552  8:0972
(5.110)
Taking the inverse Laplace transform, we ﬁnd
ct  1 
 e
0:855rcos 8:097t  0:106 sin 8:097t
(5.111)
f. For the simpliﬁed model we have
Gs  0:0663K
ss  1:71
(5.112)
from which the closed-loop transfer function is calculated to be
Ts 
0:0663K
s2  1:71s  0:0663K
(5.113)
From Eq.(4.39) a 10% overshoot yields ζ  0:591. Using the denominator of
Eq. (5.113), ωn 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
0:0663K
p
and 2ζωn  1:71. Thus,
ζ 
1:71
2
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
0:0663K
p
 0:591
(5.114)
from which K  31:6.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives: Referring to the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 2, do the following:
a. Find the closed-loop transfer function using block diagram reduction.
b. Represent each subsystem with a signal-ﬂow graph and ﬁnd the state-space
representation of the closed-loop system from the signal-ﬂow graph.
c. Use the signal-ﬂow graph found in (b) along with Mason’s rule to ﬁnd the closed-loop
transfer function.
d. Replace the power ampliﬁer with a transfer function of unity and evaluate the
closed-loop percent overshoot, settling time, and peak time for K  5.
e. For the system used for (d), derive the expression for the closed-loop step response.
f. For the simpliﬁed model in (d), ﬁnd the value of preampliﬁer gain, K, to yield 15%
overshoot.
UFSS Vehicle: Pitch-Angle Control Representation
UFSS Vehicle: Pitch-Angle Control Representation
We return to the Unmanned Free-Swimming Submersible (UFSS) vehicle introduced in
the case studies in Chapter 5 (Johnson, 1980). We will represent in state space the pitch-
angle control system that is used for depth control.
PROBLEM: Consider the block diagram of the pitch control loop of the UFSS vehicle
shown on the back endpapers. The pitch angle, θ, is controlled by a commanded pitch
angle, θe, which along with pitch-angle and pitch-rate feedback determines the elevator
Case Studies
275

deﬂection, δe, which acts through the vehicle dynamics to determine the pitch angle. Let
K1  K2  1 and do the following:
a. Draw the signal-ﬂow graph for each subsystem, making sure that pitch angle, pitch
rate, and elevator deﬂection are represented as state variables. Then interconnect the
subsystems.
b. Use the signal-ﬂow graph obtained in a to represent the pitch control loop in state
space.
SOLUTION:
a. The vehicle dynamics are split into two transfer functions, from which the signal-
ﬂow graph is drawn. Figure 5.36 shows the division along with the elevator
actuator. Each block is drawn in phase-variable form to meet the requirement that
particular system variables be state variables. This result is shown in Figure 5.37(a).
The feedback paths are then added to complete the signal-ﬂow graph, which is
shown in Figure 5.37(b).
–1
2
1s
1s
1
1s
1s
–2
–1.23
–0.226
–0.0169
–1
2
1
s
1s
1
1
s
1
s
1
1
1
(a)
(b)
X1(s)
–2
–1.23
–0.226
–0.0169
X1(s)
ec
0.435
0.435
– 0.125
–0.125
1
(s)
X2(s)
X3(s)
X4(s)
X4(s)
X3(s)
X2(s)
θc(s)
θc(s)
δ
ec(s)
δ
FIGURE 5.37
Signal-ﬂow
graph representation of the
UFSS vehicle’s pitch control
system: a. without position
and rate feedback; b. with
position and rate feedback.
(Note: Explicitly required
variables are x1  θ;
x2  dθ=dt, and x4  δe.)
ec
2
s + 2
e
Elevator
actuator
1
Vehicle dynamics
(s + 1.23)
–0.125(s + 0.435)
s2 + 0.226s + 0.0169
(s)
(s)
θ (s)
δ
δ
FIGURE 5.36
Block diagram
of the UFSS vehicle's elevator
and vehicle dynamics, from
which a signal-ﬂow graph can
be drawn
276
Chapter 5
Reduction of Multiple Subsystems

b. By inspection, the derivatives of state variables x1 through x4 are written as
_x1 
x2
(5.115a)
_x2  
0:0169x1 
 0:226x2  0:435x3 
 1:23x3 
 0:125x4
(5.115b)
_x3 

 1:23x3 
 0:125x4
(5.115c)
_x4 
2x1
 2x2

 2x4 
 2θc
(5.115d)
Finally, the output y  x1.
In vector-matrix form the state and output equations are
_x 
0
1
0
0

0:0169

0:226

0:795

0:125
0
0

1:23

0:125
2
2
0

2
2
66664
3
77775
x 
0
0
0

2
2
66664
3
77775
θc
(5.116a)
y   1
0
0
0  x
(5.116b)
CHALLENGE: We now give you a problem to test your knowledge of this chapter’s
objectives. The UFSS vehicle steers via the heading control system shown in
Figure 5.38 and repeated on the back endpapers. A heading command is the input.
The input and feedback from the submersible’s heading and yaw rate are used to
generate a rudder command that steers the submersible (Johnson, 1980). Let K1 
K2  1 and do the following:
a. Draw the signal-ﬂow graph for each subsystem, making sure that heading angle, yaw
rate, and rudder deﬂection are represented as state variables. Then interconnect the
subsystems.
b. Use the signal-ﬂow graph obtained in a to represent the heading control loop in state
space.
c. Use MATLAB to represent the closed-loop UFSS heading control
system in state space in controller canonical form.
Heading
gain
Heading
command
Commanded
rudder
deflection
Rudder
actuator
Vehicle
dynamics
Yaw 
rate
sensor
Heading
Heading
(yaw)
rate
–K1
–
–K2s
2
s + 2
+
–
+
–0.125(s + 0.437)
(s + 1.29)(s + 0.193)
ψc(s)
δrc(s)
δr (s)
ψ(s)
ψ(s)
Rudder
deflection
1s
FIGURE 5.38
Block
diagram of the heading
control system for the
UFSS vehicle
Case Studies
277

Summary
One objective of this chapter has been for you to learn how to represent multiple subsystems
via block diagrams or signal-ﬂow graphs. Another objective has been to be able to reduce
either the block diagram representation or the signal-ﬂow graph representation to a single
transfer function.
We saw that the block diagram of a linear, time-invariant system consisted of four
elements: signals, systems, summing junctions, and pickoff points. These elements were
assembled into three basic forms: cascade, parallel, and feedback. Some basic operations
were then derived: moving systems across summing junctions and across pickoff points.
Once we recognized the basic forms and operations, we could reduce a complicated
block diagram to a single transfer function relating input to output. Then we applied the
methods of Chapter 4 for analyzing and designing a second-order system for transient
behavior. We saw that adjusting the gain of a feedback control system gave us partial control
of the transient response.
The signal-ﬂow representation of linear, time-invariant systems consists of
two elements: nodes, which represent signals, and lines with arrows, which represent
subsystems. Summing junctions and pickoff points are implicit in signal-ﬂow graphs. These
graphs are helpful in visualizing the meaning of the state variables. Also, they can be drawn
ﬁrst as an aid to obtaining the state equations for a system.
Mason’s rule was used to derive the system’s transfer function from the signal-ﬂow
graph. This formula replaced block diagram reduction techniques. Mason’s rule seems
complicated, but its use is simpliﬁed if there are no nontouching loops. In many of these
cases, the transfer function can be written by inspection, with less labor than in the block
diagram reduction technique.
Finally, we saw that systems in state space can be represented using different sets of
variables. In the last three chapters, we have covered phase-variable, cascade, parallel,
controller canonical, and observer canonical forms. A particular representation may be
chosen because one set of state variables has a different physical meaning than another set,
or because of the ease with which particular state equations can be solved.
In the next chapter, we discuss system stability. Without stability we cannot begin to
design a system for the desired transient response. We will ﬁnd out how to tell whether a
system is stable and what effect parameter values have on a system’s stability.
Review Questions
1. Name the four components of a block diagram for a linear, time-invariant system.
2. Name three basic forms for interconnecting subsystems.
3. For each of the forms in Question 2, state (respectively) how the equivalent transfer
function is found.
4. Besides knowing the basic forms as discussed in Questions 2 and 3, what other
equivalents must you know in order to perform block diagram reduction?
5. For a simple, second-order feedback control system of the type shown in Figure 5.14,
describe the effect that variations of forward-path gain, K, have on the transient
response.
6. For a simple, second-order feedback control system of the type shown in Figure 5.14,
describe the changes in damping ratio as the gain, K, is increased over the underdamped
region.
7. Name the two components of a signal-ﬂow graph.
8. How are summing junctions shown on a signal-ﬂow graph?
278
Chapter 5
Reduction of Multiple Subsystems

9. If a forward path touched all closed loops, what would be the value of Δk?
10. Name ﬁve representations of systems in state space.
11. Which two forms of the state-space representation are found using the same method?
12. Which form of the state-space representation leads to a diagonal matrix?
13. When the system matrix is diagonal, what quantities lie along the diagonal?
14. What terms lie along the diagonal for a system represented in Jordan canonical form?
15. What is the advantage of having a system represented in a form that has a diagonal
system matrix?
16. Give two reasons for wanting to represent a system by alternative forms.
17. For what kind of system would you use the observer canonical form?
18. Describe state-vector transformations from the perspective of different bases.
19. What is the deﬁnition of an eigenvector?
20. Based upon your deﬁnition of an eigenvector, what is an eigenvalue?
21. What is the signiﬁcance of using eigenvectors as basis vectors for a system
transformation?
Problems
1. Reduce the block diagram shown in Figure P5.1 to a
single transfer function, Ts  Cs=Rs Use the
following methods:
a. Block diagram reduction [Section: 5.2]
b. MATLAB
s
+
–
R(s)
+
2
C(s)
s
s2
1
s + 1
50
+
2
–
–
FIGURE P5.1
2. Find the closed-loop transfer function, Ts  Cs=Rs
forthesystemshowninFigureP5.2,usingblockdiagram
reduction. [Section: 5.2]
H1
R(s)
+
+
+
–
G1
G2
G3
C(s)
FIGURE P5.2
3. Find the equivalent transfer function, Ts  Cs=Rs,
for the system shown in Figure P5.3. [Section: 5.2]
G1
G4
+–
–
R(s)
+
+
+ –
+
G2
G3
G5
G6
C(s)
G7
++
FIGURE P5.3
Problems
279

4. Reduce the system shown in Figure P5.4 to a single
transfer function, Ts  Cs=Rs. [Section: 5.2]
+
–
R(s)
+
+
+
–
G2
G1
G3
G4
H
C(s)
FIGURE P5.4
5. Find the transfer function, Ts  Cs=Rs, for the
system shown in Figure P5.5. Use the following
methods:
a. Block diagram reduction [Section: 5.2]
b. MATLAB. Use the following
transfer functions:
G1s  1=s  7; G2s  1=s2  2s  3,
G3s  1=s  4; G4s  1=s,
G5s  5=s  7; G6s  1=s2  5s  10,
G7s  3=s  2;G8s  1=s  6.
Hint: Use the append and connect com-
mands
in
MATLAB’s
Control
System
Toolbox.
+
–
R(s)
+
G1
+
+
+
+
+
+–
G2
G3
G4
G5
G8
G6
G7
C(s)
FIGURE P5.5
6. Reduce the block diagram shown in Figure P5.6 to a
single block, Ts  Cs=Rs. [Section: 5.2]
+
–
R(s)
C(s)
G1
G5
G3
–
G6
G2
G4
G7
+
+
+
+
G8
FIGURE P5.6
7. Find the unity feedback system that is equivalent to
the system shown in Figure P5.7. [Section: 5.2]
R(s) + –
–
s
2s
+
+
s
+
+
1
–
–
+
s+1
C(s)
4
FIGURE P5.7
8. Given the block diagram of a system shown in
Figure P5.8, ﬁnd the transfer function Gs  θ22s=
θ11s. [Section: 5.2]
+ –
G1(s)
G2(s)
–
G3(s)
+
G7(s)
+
+
+
G4(s)
G5(s)
G6(s)
(s)
θ21
θ22
θ12
θ11
(s)
(s)
(s)
FIGURE P5.8
280
Chapter 5
Reduction of Multiple Subsystems

9. Reduce the block diagram shown in Figure P5.9
to
a
single
transfer
function,
Ts  Cs=Rs.
[Section: 5.2]
R(s) +–
G2
G5
G6
G3
G1
–
+
G4
+
G7
+
+
–
C(s)
FIGURE P5.9
10. Reduce the block diagram shown in Figure P5.10 to a
single
block
representing
the
transfer
function,
Ts  Cs=Rs. [Section: 5.2]
+
–
–
–
R(s)
+
–
–
G2(s)
G3(s)
G1(s)
H1(s)
H3(s)
H2(s)
H4(s)
C(s)
FIGURE P5.10
11. For the system shown in Figure P5.11, ﬁnd the percent
overshoot, settling time, and peak time for a step input if
the system’s response is underdamped. (Is it? Why?)
[Section: 5.3]
R(s)
+
E(s)
–
225
s(s + 15)
C(s)
FIGURE P5.11
12. For the system shown in Figure P5.12, ﬁnd the output,
c(t), if the input, r(t), is a unit step. [Section: 5.3]
R(s)
+
E(s)
–
4
s(s + 3)
C(s)
FIGURE P5.12
13. For the system shown in Figure P5.13, ﬁnd the poles
of the closed-loop transfer function, Ts  Cs=Rs.
[Section: 5.3]
R(s)
3
C(s)
+
–
–
+
–
5s
s
+
1
4
FIGURE P5.13
14. For the system of Figure P5.14, ﬁnd the value of
K that yields 10% overshoot for a step input.
[Section: 5.3]
R(s)
C(s)
+
–
s(s+30)
K
FIGURE P5.14
15. For the system shown in Figure P5.15, ﬁnd K and α
to yield a settling time of 0.12 second and a 20%
overshoot. [Section: 5.3]
R(s)
+
E(s)
–
K
s(s + α)
C(s)
FIGURE P5.15
16. For the system of Figure P5.16, ﬁnd the values of K1
and K2 to yield a peak time of 1 second and a settling
time of 2 seconds for the closed-loop system’s step
response. [Section: 5.3]
+
+
–
–
R(s)
C(s)
50
s(s+1)
K2s
K1
FIGURE P5.16
17. Find the following for the system shown in Figure P5.17:
[Section: 5.3]
a. The equivalent single block that represents the transfer
function, Ts  Cs=Rs.
(problem continues)
Problems
281

(Continued)
b. The damping ratio, natural frequency, percent
overshoot, settling time, peak time, rise time,
and damped frequency of oscillation.
R(s)
+–
+
s+12
1
C(s)
–
+
10
10
0.2s
s
20
FIGURE P5.17
18. For the system shown in Figure P5.18, ﬁnd ζ, ωn,
percent overshoot, peak time, rise time, and settling
time. [Section: 5.3]
R(s)
7350
s(s + 100)
E(s)
C(s)
–
+
FIGURE P5.18
19. A motor and generator are set up to drive a load as shown
in Figure P5.19. If the generator output voltage is
egt  Kf if t, where if (t) is the generator’s ﬁeld current,
ﬁnd the transfer function Gs  θos=Eis. For the
generator, Kf  2 Ω. For the motor, Kt  2 N-m/A,
and Kb  2 V-s/rad.
1 Ω
if (t)
ei(t)
1 H
Generator
Ja = 0.75 kg-m2
eg(t)
10
20
4 kg-m2
4 N-m-s/rad
o(t)
1 Ω
1 Ω
Motor
+
–
+
–
θ
FIGURE P5.19
20. Find Gs  E0s=Ts for the system shown in
Figure P5.20.
J
Buffer
amplifier
gain = 1
e1(t)
N2
N1
T(t)
10 V
1 Turn pot
+
e0(t)
R
C
FIGURE P5.20
21. Find the transfer function Gs  Eos=Ts for the
system shown in Figure P5.21.
+
Buffer
amplifier
gain = 1
J1 = 0.25 kg-m2
J2 = 32 kg-m2
K = 5 N-m/rad
D=2 N-m-s/rad
5
20
40
10
25 V
–25 V
10  Turn pot
10 μF
eo(t)
200KΩ
T(t)
FIGURE P5.21
22. Label signals and draw a signal-ﬂow graph for each of
the block diagrams shown in the following problems:
[Section: 5.4]
a. Problem 1
b. Problem 3
c. Problem 5
23. Draw a signal-ﬂow graph for each of the
following state equations: [Section: 5.6]
a.
_x 
0
1
0
0
0
1

2

4

6
2
664
3
775x 
0
0
1
2
664
3
775r
y 
1
1
0


x
b.
_x 
0
1
0
0

3
1

3

4

5
2
664
3
775x 
0
1
1
2
664
3
775r
y 
1
2
0


x
c.
_x 
7
1
0

3
2

1

1
0
2
2
664
3
775x 
1
2
1
2
664
3
775r
y 
1
3
2


x
24. Given the system below, draw a signal-ﬂow
graph and represent the system in state space
in the following forms: [Section: 5.7]
a. Phase-variable form
b. Cascade form
Gs 
200
s  10s  20s  30
282
Chapter 5
Reduction of Multiple Subsystems

25. Repeat Problem 24 for
Gs 
20
ss 
 2s  5s  8
[Section: 5.7]
26. Using
Mason’s
rule,
ﬁnd
the
transfer
function,
Ts  Cs=Rs,
for
the
system
represented
in
Figure P5.22. [Section: 5.5]
G1(s)
R(s)
G2(s)
G3(s)
G4(s)
C(s)
–1
–1
–1
–1
FIGURE P5.22
27. Using
Mason’s
rule,
ﬁnd
the
transfer
function,
Ts  Cs=Rs,
for
the
system
represented
by
Figure P5.23. [Section: 5.5]
G1(s)
R(s)
G2(s)
G4(s)
G6(s)
G7(s)
1
C(s)
H2(s)
H1(s)
G5(s)
G3(s)
H3(s)
FIGURE P5.23
28. Use Mason’s rule to ﬁnd the transfer function of
Figure 5.13 in the text. [Section: 5.5]
29. Use block diagram reduction to ﬁnd the transfer function
of Figure 5.21 in the text, and compare your answer with
that obtained by Mason’s rule. [Section: 5.5]
30. Represent the following systems in state
space in Jordan canonical form. Draw the
signal-ﬂow graphs. [Section: 5.7]
a. Gs  s  1s  2
s  32s  4
b. Gs 
s  2
s  52s  72
c. Gs 
s  4
s  22s  5s  6
31. Represent the systems below in state space
in phase-variable form. Draw the signal-ﬂow
graphs. [Section: 5.7]
a. Gs 
s  3
s2  2s  7
b. Gs 
s2  2s  6
s3  5s2  2s  1
c. Gs 
s3  2s2  7s  1
s4  3s3  5s2  6s  4
32. Repeat Problem 31 and represent each
system in controller canonical and observer
canonical forms. [Section: 5.7]
33. Represent the feedback control systems
shown in Figure P5.24 in state space. When
possible, represent the open-loop transfer functions sep-
aratelyincascadeandcompletethefeedbackloopwiththe
signal path from output to input. Draw your signal-ﬂow
graph to be in one-to-one correspondence to the block
diagrams (as close as possible). [Section: 5.7]
R(s)
+
E(s)
–
16(s + 2)
C(s)
(d)
(s + 1)2
R(s)
+
E(s)
–
1
s(s + 1)
C(s)
(c)
160
+
–
s
R(s)
+
–
10
s(s2 + 6s + 24)
C(s)
(b)
R(s) +
E(s)
–
50
(s + 9)(s + 8)(s + 2)
C(s)
(a)
FIGURE P5.24
34. You are given the system shown in
Figure P5.25. [Section: 5.7]
a. Represent the system in state space in phase-variable
form.
b. Represent the system in state space in any other form
besides phase-variable.
R(s)
+
E(s)
–
30
s(s + 3)(s + 5)
C(s)
FIGURE P5.25
Problems
283

35. Repeat
Problem
34
for
the
system
shown
in
Figure P5.26. [Section: 5.7]
+
–
R(s)
C(s)
10(s + 2)(s + 3)
(s + 1)(s + 4)(s + 5)(s + 6)
FIGURE P5.26
36. Use MATLAB to solve Problem 35.
37. Represent the system shown in Figure P5.27
in state space where x1t; x3t; and x4t, as
shown, are among the state variables, c(t) is the output,
and x2t is internal to X1s=X3s. [Section: 5.7]
R(s) +
E(s)
–
C(s)
X4(s)
X3(s)
X1(s)
1s
1s
1
s2+2
s –5
FIGURE P5.27
38. Consider the rotational mechanical system
shown in Figure P5.28.
a. Represent the system as a signal-ﬂow graph.
b. Represent the system in state space if the output
is θ2t.
1 kg-m2
1(t)
2(t)
2 N-m-s/rad
3 N-m-s/rad
2 N-m/rad
4 N-m/rad
T(t)
1 N-m/rad
2 N-m-s/rad
1 kg-m2
θ
θ
FIGURE P5.28
39. Given a unity feedback system
with the forward-path transfer
function
Gs 
8
ss  8s  10
use MATLAB to represent the closed-loop
system in state space in
a. phase-variable form;
b. parallel form.
40. Consider the cascaded subsystems shown
in Figure P5.29. If G1(s) is represented in
state space as
_x1  A1x1  B1r
y1  C1x1
and G2(s) is represented in state space as
_x2  A2x2  B2y1
y2  C2x2
show that the entire system can be represented in state
space as
_x1
 ∙∙∙
_x2
"
#

A1
0
B2C1
A2
2
64
3
75
x1
 ∙∙∙
x2
"
#

B1
 ∙∙∙
0
"
#
r
y2


0 ..
.
?
C2

x1
 ∙∙∙
x2
"
#
G1(s)
G2(s)
Y2(s)
Y1(s)
R(s)
FIGURE P5.29
41. Consider the parallel subsystems shown
in Figure P5.30. If G1(s) is represented in
state space as
_x1  A1x1  B1r
y1  C1x1
and G2(s) is represented in state space as
_x2  A2x2  B2r
y2  C2x2
show that the entire system can be represented in state
space as
_x1
 ∙∙∙
_x2
"
#

A1
0
0
A2
2
64
3
75
x1
 ∙∙∙
x2
"
#

B1
 ∙∙∙
B2
"
#
r
y

C1
..
.
?
C2


x1
 ∙∙∙
x2
"
#
G2(s)
G1(s)
Y(s)
+
+
Y1(s)
Y2(s)
R(s)
FIGURE P5.30
42. Consider the subsystems shown in
Figure P5.31 and connected to form a
284
Chapter 5
Reduction of Multiple Subsystems

feedback system. If G(s) is represented in state
space as
_x1  A1x1  B1e
y  C1x1
and H2(s) is represented in state space as
_x2  A2x2  B2y
ρ  C2x2
show that the closed-loop system can be represented in
state space as
_x1
 ∙∙∙
_x2
"
#

A1

B1C2
B2C1
A2
2
664
3
775
x1
 ∙∙∙
x2
"
#

B1
 ∙∙∙
0
"
#
r
y 
C1 ...
? 0


x1
 ∙∙∙
x2
"
#
G(s)
E(s)
+
R(s)
–
H(s)
P(s)
Y(s)
FIGURE P5.31
43. Given the system represented in state space
as follows: [Section: 5.8]
_x 

1

7
6

8
4
8
4
7

8
2
664
3
775x 

5

7
5
2
664
3
775r
y 

9

9

8


x
convert thesystemtoonewherethenewstate vector,z,is
z 

4
9

3
0

4
7

1

4

9
2
4
3
5x
44. Repeat Problem 43 for the following system:
[Section: 5.8]
_x 

5
1
1
9

9

9

9

1
8
2
664
3
775x 
9

4
0
2
664
3
775r
y 

2

4
1


x
and the following state-vector transformation:
z 
5

4
9
6

7
6
6

5

3
2
4
3
5x
45. Diagonalize the following system:
[Section: 5.8]
_x 

5

5
4
2
0

2
0

2

1
2
664
3
775x 

1
2

2
2
664
3
775r
y 

1
1
2


x
46. Repeat Problem 45 for the following system:
[Section: 5.8]
_x 

10

3
7
18:25
6:25

11:75

7:25

2:25
5:75
2
664
3
775x 
1
3
2
2
664
3
775r
y 
1

2
4


x
47. Diagonalize the system in
Problem 46 using MATLAB.
48. Find
the
closed-loop
transfer
function
of
the
Unmanned Free-Swimming Submersible vehicle’s
pitch control system shown on the back endpapers
(Johnson, 1980).
49. Repeat Problem 48 using MATLAB.
50. Use Simulink to plot the effects
of nonlinearities upon the
closed-loop step response of the antenna
azimuth position control system shown
on the front endpapers, Conﬁguration 1.
In particular, consider individually
each of the following nonlinearities:
saturation   5 volts, backlash (dead-
band width 0.15), deadzone (
2 to +2),
as well as the linear response. Assume
the preampliﬁer gain is 100 and the step
input is 2 radians.
51. Problem 8 in Chapter 1 describes a high-speed pro-
portional solenoid valve. A subsystem of the valve is
the solenoid coil shown in Figure P5.32. Current
through the coil, L, generates a magnetic ﬁeld that
produces a force to operate the valve. Figure P5.32 can
be represented as a block diagram (Vaughan, 1996).
Problems
285

+
R
L
vg(t)
i(t)
vL(t)
vR(t)
+–
–
+
–
FIGURE P5.32
Solenoid coil circuit
a. Derive a block diagram of a feedback system that
represents the coil circuit, where the applied voltage,
vg(t), is the input, the coil voltage, vL(t), is the error
voltage, and the current, i(t), is the output.
b. For the block diagram found in Part a, ﬁnd the
Laplace transform of the output current, I(s).
c. Solve the circuit of Figure P5.32 for I(s), and com-
pare to your result in Part b.
52. Figure P5.33 shows a noninverting operational
ampliﬁer.
vo
v1
v1
vi
vi
Ri
Rf
(a)                                                          (b) 
–
+
vo
A
i
f
i
R
R
R
+
+–
FIGURE P5.33
a. Noninverting ampliﬁer; b. block diagram
Assuming the operational ampliﬁer is ideal,
a. Verify that the system can be described by the
following two equations:
vo  Avi 
 vo
v1 
Ri
Ri  Rf
vo
b. Check that these equations can be described by the
block diagram of Figure P5.33(b).
c. Use Mason’s rule to obtain the closed-loop system
transfer function Vos
Vis :
d. Show that when A ®∞; Vos
Vis  1  Rf
Ri
:
53. Figure P5.34 shows the diagram of an inverting
operational ampliﬁer.
vo
v1
vi
Ri
Rf
+
–
+
–
FIGURE P5.34
Inverting operational ampliﬁer
a. Assuming an ideal operational ampliﬁer, use a simi-
lar procedure to the one outlined in Problem 52 to
ﬁnd the system equations.
b. Draw a corresponding block diagram and obtain the
transfer function Vos
Vis :
c. Show that when A ®∞; Vos
Vis  
 Rf
Ri
.
54. Figure P5.35(a) shows an n-channel enhancement-mode
MOSFET source follower circuit. Figure P5.35(b)
shows its small-signal equivalent (where Ri  R1jj R2)
(Neamen, 2001).
a. Verify that the equations governing this circuit are
vin
vi

Ri
Ri  Rs
;
vgs  vin 
 vo;
vo  gmRs jjrovgs
b. Draw a block diagram showing the relations between
the equations.
c. Use the block diagram in Part b to ﬁnd Vos
Vis.
vo
Rs
VDD
R2
R1
+–
vi
Rs
(a)
(b)
+
vo
–
vgs
vin
gmVgs
ro
Rs
Ri
Rs
vi
+–
FIGURE P5.35
a. An n-channel enhancement-mode MOSFET
source follower circuit; b. small-signal equivalent
55. A car active suspension system adds an active hydraulic
actuator in parallel with the passive damper and spring
to create a dynamic impedance that responds to road
variations. The block diagram of Figure P5.36 depicts
such an actuator with closed-loop control.
Kt
e
r +
+
–
+
1
s2 + ω
x1 = x3
x3
Mus
mr
1
0
2
s + ε
ε
ζ1
FIGURE P5.364
In the ﬁgure, Kt is the spring constant of the tire, MUS
is the wheel mass, r is the road disturbance, x1 is
4 Lin, J.-S., Kanellakopoulos, I. “Nonlinear Design of Active Suspensions.”
IEEE Control Systems Magazine, Vol. 17, Issue 3, June 1997 pp. 45–59.
Figure 3, p. 48. IEEE Control Systems by IEEE Control Systems Society.
Reproduced with permission of Institute of Electrical and Electronics
Engineers, in the format Republish in a book via Copyright Clearance
Center.
286
Chapter 5
Reduction of Multiple Subsystems

the vertical car displacement, x3 is the wheel vertical
displacement, ω2
0  Kt
MUS
is the natural frequency of the
unsprung system and ε is a ﬁltering parameter to be
judiciously chosen (Lin, 1997). Find the two transfer
functions of interest:
a. X3s
Rs
b. X1s
Rs
56. The basic unit of skeletal and cardiac muscle cells is a
sarcomere, which is what gives such cells a striated
(parallel line) appearance. For example, one bicep cell
has about 105 sarcomeres. In turn, sarcomeres are
composed of protein complexes. Feedback mechanisms
play an important role in sarcomeres and thus muscle
contraction. Namely, Fenn’s law says that the energy
liberated during muscle contraction depends on the initial
conditions and the load encountered. The following
linearized model describing sarcomere contraction has
been developed for cardiac muscle:
_A
_T
_U
_SL
2
66664
3
77775


100:2 
20:7

30:7
200:3
40

20:22
49:95
526:1
0
10:22 
59:95 
526:1
0
0
0
0
2
66664
3
77775
A
T
U
SL
2
66664
3
77775

208

208

108:8

1
2
66664
3
77775
ut
y 
0
1570
1570
59400


A
T
U
SL
2
66664
3
77775

 6240ut
where
A  density of regulatory units with bound calcium
and adjacent weak cross bridges μM
T  density of regulatory units with bound calcium
and adjacent strong cross bridges M
U  density of regulatory units without bound
calcium and adjacent strong cross bridges M
SL  sarcomere length m
The system’s input is ut  the shortening muscle
velocity in meters/second and the output is yt 
muscle force output in Newtons (Yaniv, 2006).
Do the following:
a. Use MATLAB to obtain the
transfer function Ys
Us.
b. Use MATLAB to obtain a partial-
fraction expansion for Ys
Us.
c. Draw a signal-ﬂow diagram of the
system in parallel form.
d. Use the diagram of Part c to express the
system in state-variable form with
decoupled equations.
57. An electric ventricular assist device (EVAD) has been
designed to help patients with diminished but still
functional heart pumping action to work in parallel
with the natural heart. The device consists of a
brushless dc electric motor that actuates on a pusher
plate. The plate movements help the ejection of blood
in systole and sac ﬁlling in diastole. System dynamics
during systolic mode have been found to be:
_x
_v
_Pao
2
4
3
5 
0
1
0
0

68:3

7:2
0
3:2

0:7
2
4
3
5
x
v
Pao
2
4
3
5 
0
425:4
0
2
4
3
5em
The state variables in this model are x, the pusher plate
position, v, the pusher plate velocity, and Pao, the
aortic blood pressure. The input to the system is em,
the motor voltage (Tasch, 1990).
a. Use MATLAB to ﬁnd a similarity
transformation to diagonalize
the system.
b. Use MATLAB and the obtained
similarity transformation of
Part a to obtain a diagonalized expres-
sion for the system.
58. In an experiment to measure and identify postural arm
reﬂexes, subjects hold in their hands a linear hydraulic
manipulator. A load cell is attached to the actuator
handle to measure resulting forces. At the application
of a force, subjects try to maintain a ﬁxed posture.
Figure P5.37 shows a block diagram for the combined
arm-environment system.
D(s)
He(s) Xh(s)
Xa(s)
Hh(s)
Hi(s)
Hr(s)
Hact(s)
A(s)
Fh(s)
Fint(s)
Fref(s)
+
+
+
–
–
Arm
Environment
–
FIGURE P5.37
In the diagram, Hr(s) represents the reﬂexive length
and velocity feedback dynamics; Hact(s) the activation
dynamics, Hi(s) the intrinsic act dynamics; Hh(s)
the hand dynamics; He(s) the environmental dynam-
ics; Xa(s) the position of the arm; Xh(s) the measured
Problems
287

position of the hand; Fh(s) the measured interaction
force applied by the hand; Fint(s) the intrinsic force;
Fref(s) the reﬂexive force; A(s) the reﬂexive activation;
and D(s) the external force perturbation (de Vlugt,
2002).
a. Obtain a signal-ﬂow diagram from the block
diagram.
b. Find Fhs
Ds .
59. Use LabVIEW’s Control Design and
Simulation Module to obtain the
controller and the observer
canonical forms for:
G s 
s2  7s  2
s3  9s2  26s  24
60. A virtual reality simulator with haptic (sense of touch)
feedback was developed to simulate the control of a
submarine driven through a joystick input. Operator
haptic feedback is provided through joystick position
constraints and simulator movement (Karkoub, 2010).
Figure P5.38 shows the block diagram of the haptic
feedback system in which the input uh is the force
exerted by the muscle of the human arm; and the
outputs are ys, the position of the simulator, and yj, the
position of the joystick.
Ths
Tes
Tej
Thj
Kej
-
-
-
+
+
+
-
Fj
1/s
1/s
Khs
Cs
ys
Kh
Fh
yj
uh
Cj
Kes
Fs
FIGURE P5.385
a. Find the transfer function Yss
Uhs :
b. Find the transfer function Yjs
Uhs :
61. Some medical procedures require the insertion of a
needle under a patient’s skin using CT scan monitoring
guidance for precision. CT scans emit radiation, posing
some cumulative risks for medical personnel. To avoid
this problem, a remote control robot has been developed
(Piccin, 2009). The robot controls the needle in position
and angle in the constraint space of a CT scan machine
and also provides the physician with force feedback
commensuratewiththeinsertionoppositionencountered
by the type of tissue in which the needle is inserted. The
robot has other features that give the operator the similar
sensations and maneuverability as if the needle was
inserted directly. Figure P5.39 shows the block diagram
of the force insertion mechanism, where Fh is the input
force and Xh is the output displacement. Summing
junction inputs are positive unless indicated with a
negative sign. By way of explanation, Z = impedance;
G = transfer
function;
Ci = communication
channel
transfer functions; F = force; X = position. Subscripts h
and m refer to the master manipulator. Subscripts s and
e refer to the slave manipulator.
a. Assuming Zh  0; C1  Cs; C2  1  C6 and C4 

Cm use Mason’s Rule to show that the transfer
function from the operators force input Fh to needle
displacement Xh is given by
Ys  Xhs
Fhs 
Z
1
m C21  GsCs
1  GsCs  Z 
1
m cm  C2ZeGsCs
b. Now with Zh ≠0 show that Xhs
Fhs 
Ys
1  YsZh
Fe
Ze
Gs
Cs
Zm
–1
Zh
Xh
Fm
Fh
Vsc
C4
C2
C1
Cm
C6
Xe
Slave
manipulator
-
–
–
–
Master
manipulator
FIGURE P5.396
5 Karkoub, M., Her, M-G., and Chen, J. M. Design and Control of a Haptic
Interactive Motion Simulator for Virtual Entertainment Systems. Robotica,
vol. 28, 2010, Figure 8, p. 53. Reproduced by permission of Cambridge
University Press.
6 Piccin, O., Barbé, L., Bayle, B., and Mathelin, M. A Force Feedback
Teleoperated Needle Insertion Device for Percutaneous Procedures. Int. J.
of Robotics Research, vol. 28, p. 1154. Figure 14. Copyright 2009.
Reprinted by Permission of SAGE.
288
Chapter 5
Reduction of Multiple Subsystems

1
Lfs
Rf
1
Cfs
VLoad
−IDist
+
+
−
+
+
+
−
−
Ki1
Kp1 + s
Kp2
1
ˆCf s
ICf
ˆ
ˆLfs + Rf
FIGURE P5.40
62. A hybrid solar cell and diesel power distribution
system has been proposed and tested (Lee, 2007).
The system has been shown to have a very good
uninterruptible power supply as well as line voltage
regulation capabilities. Figure P5.40 shows a signal-
ﬂow diagram of the system. The output, VLoad, is the
voltage across the load. The two inputs are ICf, the
reference current, and IDist, the disturbance represent-
ing current changes in the supply.
a. Refer to Figure P5.40 and ﬁnd the transfer function
VLoads
ICf s :
b. Find the transfer function VLoads
IDists :
63. Continuous casting in steel production is essentially a
solidiﬁcation process by which molten steel is solidiﬁed
into a steel slab after passing through a mold, as shown
in Figure P5.41(a). Final product dimensions depend
mainly on the casting speed Vp (in m/min), and on the
stopper position X(in %) that controls the ﬂow of molten
material into the mold (Kong, 1993). A simpliﬁed
model of a casting system is shown in Figure P5.41
(b) (Kong, 1993) and (Graebe, 1995). In the model,
Hm = mold level (in mm); Ht = assumed constant height
of molten steel in the tundish; Dz = mold thickness =
depth of nozzle immerged into molten steel; and Wt =
weight of molten steel in the tundish.
For a speciﬁc setting let Am = 0.5 and
Gxs 
0:63
s  0:926
Also assume that the valve positioning loop may be
modeled by the following second-order transfer function:
GVs  Xs
YCs 
100
s2  10s  100
and the controller is modeled by the following transfer
function:
GCs  1:6s2  1:25s  0:25
s
LADLE
SLAB
TUNDISH
Ht
Dz
Hm
Hm
11
12
M1
Vp
Vs
M2
X
HYDRAULIC
UNIT
ELECTRONIC
UNIT
NKK
MOLD
SEGMENT 1
SEGMENT 2
SEGMENT 3
REGULATOR
UNIT
SET-
POINT
r
(a)
+
+
–
–
E(s)
GC(s)
GV(s)
Qo(s)
Qi(s)
Vp(s)
Hm(s)
R(s)
YC(s)
X(s)
Gx(s)
m(s)
FIGURE P5.41
Steel mold process: a. process;7 b. block diagram
The sensitivity of the mold level sensor is β = 0.5
and the initial values of the system variables at t = 0
are:
R0
0;YC0
X0
41:2;ΔHm0
0;
(problem continues)
7 Kong, F., and de Keyser, R. Identiﬁcation and Control of the Mould Level
in a Continuous Casting Machine. Second IEEE Conference on Control
Applications, Vancouver, B.C., 1993. pp. 53–58. Figure 1. p. 53.
Problems
289

(Continued)
Hm0
  
75; ΔVp0
  0; and Vp0
  0. Do the
following:
a. Assuming vpt is constant
Δvp  0


, ﬁnd the
closed-loop transfer function Ts  ΔHms=Rs.
b. For rt  5 ut; vpt  0:97 ut;
and Hm0
  
75 mm, use
Simulink
to
simulate
the
system.
Record the time and mold level (in array
format) by connecting them to Work-
space sinks, each of which should carry
the respective variable name. After
the simulation ends, utilize MATLAB
plot commands to obtain and edit the
graph of hm(t) from t = 0 to 80 seconds.
64. A simpliﬁed second-order transfer function
model for bicycle dynamics is given by
φs
δs  aV
bh
s  V
a


s2 
 g
h


The input is δ(s), the steering angle, and the output is
φ(s), the tilt angle (between the ﬂoor and the bicycle
longitudinal plane). In the model parameter a is the hori-
zontal distance from the center of the back wheel to the
bicycle center of mass; b is the horizontal distance between
thecentersofbothwheels;histheverticaldistancefromthe
center of mass to the ﬂoor; V is the rear wheel velocity
(assumed constant); and g is the gravity constant. It is also
assumed that the rider remains at a ﬁxed position with
respecttothebicyclesothatthesteeraxisisverticalandthat
all angle deviations are small (Åstrom, 2005).
a. Obtain a state-space representation for the bicycle
model in phase-variable form.
b. Find system eigenvalues and eigenvectors.
c. Find an appropriate similarity transformation matrix
to diagonalize the system and obtain the state-space
system’s diagonal representation.
65. It is shown in Figure 5.6(c) that when negative feedback
is used, the overall transfer function for the system of
Figure 5.6(b) is
Cs
Rs 
Gs
1  GsHs
Develop the block diagram of an alternative feedback
system that will result in the same closed-loop
transfer function, Cs=Rs, with G(s) unchanged
and unmoved. In addition, your new block diagram
must have unity gain in the feedback path. You can
add input transducers and/or controllers in the main
forward path as required.
66. The purpose of an Automatic Voltage Regulator is to
maintain constant the voltage generated in an electrical
power system, despite load and line variations, in an
electrical power distribution system (Gozde, 2011).
Figure P5.42 shows the block
ΔVref (s)
ΔVt (s)
ΔVe(s)
ΔVs(s)
u(s)
GPID(s)
Ka Ke Kg
Ta Te Tg
1
Ta
Plant
s +
Amplifier, Exciter, Generator
Controller
+
–
Sensor
Feedback
PID Compensator
1
Te
s +
1
Tg
s +
Ks
Ts
1
Ts
s +
FIGURE P5.42
diagram of such a system. Assuming Ka = 10, Ta = 0.1,
Ke = 1, Te = 0.4, Kg = 1, Tg = 1, Ks = 1, Ts = 0.001, and
the controller, GPIDs  1:6  0:4
s  0:3s, ﬁnd the
closed-loop transfer function, Ts  ΔVts
ΔVref s, of the
system, expressing it as a rational function.
67. A drive system with an elastically coupled load was
presented in Problem 71, Chapter 4. The mechanical
part of this drive (Thomsen, 2011) was reduced to a
two-inertia model. Using slightly different parameters,
the following transfer function results:
Gs  ΩLs
Ts  25s2  1:2s  12500
ss2  5:6s  62000
Here, T(s) = Tem(s) 
 TL(s), where Tem(s) = the electro-
magnetic torque developed by the motor, TL(s) = the
load torque, and ΩLs  the load speed.
The drive is shown in Figure P5.43 as the con-
trolled
unit
in
a
feedback
control
loop,
where
Ωrs  the desired reference speed. The controller
transfer function is GCs  Kp  KI
s  4  0:5
s
and
provides an output voltage = 0 – 5.0 volts. The motor
and its power ampliﬁer have a gain, KM = 10 N-m/volt.
a. Find the minor-loop transfer
function, Ds  ΩLs
Tems
analytically or using MATLAB.
b. Given that at t = 0, the load speed
ωL(t) = 0 rad/sec and a step reference
input ωr(t) = 260 u(t), rad/sec, is
applied, use MATLAB (or any other pro-
gram) to ﬁnd and plot ωLt. Mark on the
graph all of the important character-
istics, such as percent overshoot,
peak time, rise time, settling time,
and ﬁnal steady-state value.
290
Chapter 5
Reduction of Multiple Subsystems

Ωr(s) +
+
ΩL(s)
–
–
GC(s)
Tem(s)
TL
G(s)
KM
0.1
FIGURE P5.43
68. Integrated circuits are manufactured through a litho-
graphicprocessonasemiconductorwafer.Inlithography,
similarly to chemical photography, a semiconductor
wafer is covered with a photosensitive emulsion and
then selectively exposed to light to form the electronic
components. Due to miniaturization, this process is to be
performed with nanometer accuracy and at the highest
possible speed. Sophisticated apparatus and methods
havebeendevelopedforthispurpose.FigureP5.44shows
the block diagram of a scanner dedicated to this purpose
(Butler, 2011). Use Mason’s Rule to ﬁnd:
a. The transfer function Xsss
Rs .
b. The transfer function Xlss
Rs .
+
+
+
+
+
–
–
+
–
Css(s)
mss
mss + mls
Ess
s2
R
Hss(s)
Xss
Cls(s)
Els
Hls(s)
Diff
Xls
FIGURE P5.448
69. A boost converter is a dc-to-dc switched power supply in
which the voltage output is larger than the voltage input.
A block diagram for a peak current mode controlled
converter (Chen, 2013) is shown in Figure P5.45. Find
the transfer function ^vos
^vis.
70. InProblem64ofChapter2,athree-phaseac/dcconverter
that supplies dc to a battery charging system (Graovac,
2001) was introduced. Each phase had an ac ﬁlter
represented by the equivalent circuit of Figure P2.38.
Youwereaskedtoshowthatthefollowingequationgives
the s-domain relationship between the inductor current,
IacF(s), and two active sources: a current source, IacR(s),
representing a phase of the ac/dc converter, and the
supply phase voltage, Va(s):
IacFs  IacF1s  IacF2s 
1  RCs
LCs2  RCs  1 IacRs

Cs
LCs2  RCs  1 Vas
a. Derive an s-domain equation for Vc(s).
b. Given that R  1 Ω; L  1 mH, and
C = 20 μF,iacR(t)= 10 u(t)amps,
va(t)= 20 t u(t) volts,10 and assuming
zero initial conditions, use Simulink
to model this system and plot theinduc-
tor current, iacF (t), and the capacitor
voltage, vc(t), over a period from 0 to
15 ms.
DESIGN PROBLEMS
DESIGN PROBLEMS
71. The motor and load shown in Figure P5.46(a) are used
as part of the unity feedback system shown in
Figure P5.46(b). Find the value of the coefﬁcient of
Fm
Tpa(s)
Tfa(s)
vo
vi
iℓ
Kf
Tpi(s)
Tma(s)
Hc(s)
Ri
Kr
+
+
+
+
+
+
+
–
FIGURE P5.459
8 Butler, H. Position Control in Lithographic Equipment. IEEE Control
Systems Magazine, October 2011, pp. 28–47. Figure 18, p. 37.
9 Chen, S.-Y. Block diagrams and transfer functions of control-to-output
and line-to-output for peak current-mode controlled boost converters. IET
Power Electron, Vol. 6, Iss. 1, pp. 60–66, 2013. Figure 4, p. 62. The
Institution of Engineering and Technology.
10 Noting that a ramp is the integration of a step, we used an integrator with
limits.
Problems
291

viscous damping, DL, that must be used in order to
yield a closed-loop transient response having a 20%
overshoot.
R(s) +
E(s)
–
1000
Motor
&
load
Gear
train
θM(s)
θL(s)
(b)
Kt  = 2 N-m/A
Kb = 2 V-s/rad
Ja = 2 kg-m2
Da = 2 N-m-s/rad
Ra = 2 Ω
1
θM(s)
1
2
θL(s)
JL = 800 kg-m2
(a)
DL
10
FIGURE P5.46
Position control: a. motor and load; b. block
diagram
72. Assume that the motor whose transfer function is
shown in Figure P5.47(a) is used as the forward
path of a closed-loop, unity feedback system.
a. Calculate the percent overshoot and settling time
that could be expected.
b. You want to improve the response found in Part a.
Since the motor and the motor constants cannot be
changed, an ampliﬁer and a tachometer (voltage
generator) are inserted into the loop, as shown in
Figure P5.47. Find the values of K1 and K2 to
yield a 20% overshoot and a settling time of
0.25 second.
R(s)
+
E(s)
–
25
K1
Amp
Motor
s(s + 1)
C(s)
+
–
K2s
Tachometer
(b)
R(s)
+
E(s)
–
25
1
s(s + 1)
C(s)
(a)
Motor
FIGURE P5.47
a. Position control; b. position control with
tachometer
73. The system shown in Figure P5.48 will have its transient
response altered by adding a tachometer. Design K and
K2 in the system to yield a damping ratio of 0.69. The
naturalfrequencyofthesystembeforetheadditionofthe
tachometer is 10 rad/s.
R(s)
+
E(s)
–
1
s(s + 1)
C(s)
K
+
K2s
–
Tachometer
Power amplifier
and motor
Preamplifier
FIGURE P5.48
Position control
74. ThemechanicalsystemshowninFigureP5.49(a)isused
as part of the unity feedback system shown in
Figure P5.49(b). Find the values of M and D to yield
20% overshoot and 2 seconds settling time.
R(s)
X(s)
E(s)
Ea(s)
+
–
500
Motor
&
load
Gear
For the motor:
Ja = 1 kg-m2
Da = 1 N-m-s/rad
Ra = 1 Ω
Kb = 1 V-s/rad
Kt = 1 N-m/A
N2 = 20
N1 = 10
D
 J = 1 kg-m2
Ideal
gear 1:1
fv = 1 N-s/m
x(t)
ea(t) Motor
Radius = 2 m
+
–
(a)
(b)
M
FIGURE P5.49
a. Motor and load; b. motor and load in feedback
system
75. Assume ideal operational ampliﬁers in the circuit of
Figure P5.50.
a. Show that the leftmost operational ampliﬁer works
as a subtracting ampliﬁer. Namely, v1  vo 
 vin.
b. Draw a block diagram of the system, with the
subtracting ampliﬁer represented with a summing
junction, and the circuit of the rightmost operational
ampliﬁer with a transfer function in the forward
path. Keep R as a variable.
c. Obtain the system’s closed-loop transfer function.
d. For a unit step input, obtain the value of R that will
result in a settling time Ts  1 msec.
292
Chapter 5
Reduction of Multiple Subsystems

e. Using the value of R calculated in Part d, make a
sketch of the resulting unit step response.
vo
vin
v1
10 k
0.1 F
R
10 k
10 k
–
+
–+
10 k
FIGURE P5.50
76. Given the rotational system shown in Figure P4.23
(Problem 78 of Chapter 4), do the following:
a. Using the transfer function you derived for that
system, G(s) = Θ1(s)/T(s), where Θ1(s) is the
angular displacement of the ﬁrst shaft, ﬁnd the
value of n = N1/N2 that yields a settling time of
10 seconds for a step input in torque.
b. If this rotational system is the controlled unit, G(s),
in the feedback system of Figure P5.51, ﬁnd the
values of ζ; ωn, %O.S., and Ts for a controller gain
K = 4 N-m/rad and r(t) = u(t) radians.
R(s)
E(s)
+
–
K
C(s)
G(s)
FIGURE P5.51
77. A process is simulated by the second-order passive
circuit, shown in Figure P5.52, where the feedback
ampliﬁer, controller, and ﬁnal control element are
represented by op-amp circuits.
a. Denoting the input and output as R(s) = Vi(s) and
C(s) = Vo(s), with R(s) 
 C(s) = E(s), and noting that
the feedback ampliﬁer has a unity gain, draw a block
diagram for this feedback control system, where
GC(s), GF(s), and GP(s) are the transfer functions of
the controller, ﬁnal control element, and the process,
respectively.
b. Find the value of RP that makes the circuit repre-
senting the process critically damped.
c. Noting that the proportional controller is simply an
ampliﬁer,GC(s)= KP,ﬁndthevalueofitsgainKP that
results in dominant closed-loop poles with a damping
ratio, ζ  0:5, and a settling time, Ts = 4 ms. Verify
that the other pole is nondominant. What would be the
appropriate value of the controller potentiometer, RF,
given that its tolerance is ±10%?
+
–
+
–
+
–
Vo(t)
VC(t)
–Vo(t)
VR(t)
Vf (t)
Proportional controller
Final control element
Feedback
amplifier
Process
100 mH
10 μF
0.018 μF
10 KΩ
10 KΩ
10 KΩ
10 KΩ
100 KΩ
100 KΩ
4.7 KΩ
RP
RF
FIGURE P5.52
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
78. Control of HIV/AIDS. Given the HIV
system of Problem 84 in Chapter 4 and
repeated here for convenience (Craig, 2004):
_T
_T*
_v
2
664
3
775 

0:04167
0

0:0058
0:0217 
0:24
0:0058
0
100

2:4
2
64
3
75
T
T*
v
2
64
3
75

5:2

5:2
0
2
664
3
775u1
y 
0
0
1


T
T*
v
2
64
3
75
Express the system in the following forms:
a. Phase-variable form
b. Controller canonical form
c. Observer canonical form
Finally,
d. Use MATLAB to obtain the
system’s diagonalized
representation.
79. Hybrid vehicle. Figure P5.53 shows the block diagram
of a possible cascade control scheme for an HEV driven
by a dc motor (Preitl, 2007).
Let the speed controller GSCs  100  40
s , the
torque controller and power amp KAGTCs  10  6
s,
the current sensor sensitivity KCS = 0.5, the speed
sensor sensitivity KSS = 0.0433. Also, following the
development in previous chapters 1
Ra
 1; ηtotKt  1:8;
kb  2;
D  kf  0:1; 1
Jtot

1
7:226 ; r
itot
 0:0615;
and ρCwAv0
r
itot
 0:6154.
Problems
293

a. Substitute these values in the block diagram, and ﬁnd
the transfer function, T(s) = V(s)/Rv(s), using block-
diagram reduction rules. [Hint: Start by moving the
last r
itot
block to the right past the pickoff point.]
b. Develop a Simulink model for
the original system in
Figure P5.53. Set the reference
signal input, rv(t) = 4 u(t),
as a step input with a zero
initial value, a step time = 0 seconds,
and a ﬁnal value of 4 volts. Use X-Y
graphs to display (over the period
from 0 to 8 seconds) the response of
the following variables to the step
input: (1) change in car speed (m/s),
(2) car acceleration (m/s2), and (3)
motor armature current (A).
To record the time and the above three
variables (in array format), connect
them to four Workspace sinks, each of
which carries the respective variable
name. After the simulation ends, uti-
lize MATLAB plot commands to obtain
and edit the three graphs of interest.
80. Parabolic trough collector. Effective controller design
for parabolic trough collector setups is an active area
of research. One of the techniques used for controller
design (Camacho, 2012) is Internal Model Control
(IMC). Although complete details of IMC will not
be presented here, Figure P5.54(a) shows a block
diagram for the IMC setup. Use of IMC assumes a
very good knowledge of the plant dynamics. In
Figure P5.54(a), the actual plant is P(s). ~Ps is a
software model that mimics the plant functions. G(s)
is the controller to be designed. It is also assumed that
all blocks represent linear time-invariant systems and
thus the superposition theorem applies to the system.
a. Use superposition (by assuming D(s) = 0) and
Mason’s gain formula to ﬁnd the transfer function
Cs
Rs from command input to system output.
b. Use superposition (by assuming R(s) = 0) and
Mason’s gain formula to ﬁnd the transfer function
Cs
Ds from disturbance input to system output.
c. Use the results of Parts a and b to ﬁnd the combined
output C(s) due to both system inputs.
d. Show that the system of Figure P5.54(a) has
the same transfer function as the system in
Figure P5.54(b) when GCs 
Gs
1 
 Gs~Ps.
+
++
+
–
G(s)
P(s)
P~(s)
C(s)
D(s)
R(s)
–
(a)
+
+
+
–
Gc(s)
P(s)
C(s)
D(s)
R(s)
(b)
FIGURE P5.54
Ω(s)
Ev(s)
Eb(s)
Ia(s)
Ra
GSC(s)
GTC(s)
UC(s)
Ua(s)
Ia(s)
TL(s)
Tf (s)
T(s)
GTC(s)
Angular
speed,
Ω(s)
Vehicle
speed, V(s)
Rv(s)
FIGURE P5.53
294
Chapter 5
Reduction of Multiple Subsystems

Cyber Exploration Laboratory
Experiment 5.1
Objectives
To verify the equivalency of the basic forms, including cascade, parallel,
and feedback forms. To verify the equivalency of the basic moves, including moving blocks
past summing junctions, and moving blocks past pickoff points.
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1. Find the equivalent transfer function of three cascaded blocks, G1s 
1
s  1.
G2s 
1
s  4, and G3s  s  3
s  5.
2. Find the equivalent transfer function of three parallel blocks, G1s 
1
s  4.
G2s 
1
s  4, and G3s  s  3
s  5.
3. Find the equivalent transfer function of the negative feedback system of Figure P5.55 if
Gs  s  1
ss  2, and Hs  s  3
s  4.
4. For the system of Prelab 3, push H(s) to the left past the summing junction and draw the
equivalent system.
5. For the system of Prelab 3, push H(s) to the right past the pickoff point and draw the
equivalent system.
Lab
1. Using Simulink, set up the cascade system of Prelab 1 and the equivalent single block.
Make separate plots of the step response of the cascaded system and its equivalent single
block. Record the values of settling time and rise time for each step response.
2. Using Simulink, set up the parallel system of Prelab 2 and the equivalent single block.
Make separate plots of the step response of the parallel system and its equivalent single
block. Record the values of settling time and rise time for each step response.
3. Using Simulink, set up the negative feedback system of Prelab 3 and the equivalent
single block. Make separate plots of the step response of the negative feedback system
and its equivalent single block. Record the values of settling time and rise time for each
step response.
4. Using Simulink, set up the negative feedback systems of Prelabs 3, 4, and 5. Make
separate plots of the step response of each of the systems. Record the values of settling
time and rise time for each step response.
Postlab
1. Using your lab data, verify the equivalent transfer function of blocks in cascade.
2. Using your lab data, verify the equivalent transfer function of blocks in parallel.
3. Using your lab data, verify the equivalent transfer function of negative feedback
systems.
4. Using your lab data, verify the moving of blocks past summing junctions and pickoff
points.
5. Discuss your results. Were the equivalencies veriﬁed?
R(s) +
C(s)
G(s)
H(s)
–
FIGURE P5.55
Cyber Exploration Laboratory
295

Bibliography
Åstrom, K., Klein, R. E., and Lennartsson, A. Bicycle Dynamics and Control. IEEE Control Systems,
August 2005, pp. 26–47.
Ballard, R. D. The Discovery of the Titanic, Warner Books, New York, 1987. Also, ﬁgure caption
source for Figure 5.33.
Butler, H. Position Control in Lithographic Equipment. IEEE Control Systems, October 2011,
pp. 28–47.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Chen, S.-Y. Block diagrams and transfer functions of control-to-output and line-to-output for peak
current-mode controlled boost converters. IET Power Electron., vol. 6, no. 1, pp. 60–66, 2013.
Craig, I. K., Xia, X., and Venter, J. W., Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
de Vlugt, E., Schouten, A. C., and van derHelm, F.C.T. Adaptation of Reﬂexive Feedback during Arm
Posture to Different Environments. Biological Cybernetics, vol. 87, 2002, pp. 10–26.
Experiment 5.2
Objective
To use the various functions within LabVIEW’s Control Design and
Simulation Module to implement block diagram reduction.
Minimum Required Software Packages
LabVIEW with the Control Design
Simulation Module
Prelab
Given the block diagram from Example 5.2, replace G1, G2, G3, H1, H2, H3 with
the following transfer functions and obtain an equivalent transfer function.
G1 
1
s  10 ; G2 
1
s  1 ; G3 
s  1
s2  4s  4 ; H1  s  1
s  2 ; H2  2; H3  1
Lab
Use LabVIEW to implement the block diagram from Example 5.2 using the
transfer functions given in the Prelab.
Postlab
Verify your calculations from the Prelab with that of the equivalent transfer
function obtained with LabVIEW.
Experiment 5.3
Objective
To use the various functions within LabVIEW’s Control Design and
Simulation Module and the Mathematics/Polynomial palette to implement Mason’s rule
for block diagram reduction.
Minimum Required Software Packages
LabVIEW with Control Design and
Simulation Module, Math Script RT Module, and the Mathematics/Polynomial palette.
Prelab
Given the block diagram created in the Prelab of Cyber Exploration
Laboratory 5.2, use Mason’s rule to obtain an equivalent transfer function.
Lab
Use LabVIEW’s Control Design and Simulation Module as well as the Mathematics/
Polynomial functions to implement block diagram reduction using Mason’s rule.
Postlab
Verify your calculations from the Prelab with that of the equivalent transfer
function obtained with LabVIEW.
296
Chapter 5
Reduction of Multiple Subsystems

Ballard, R. D The Discovery of the Titanic (New York: Warner Books, Inc 1987).
Gozde, H., and Taplamacioglu, M. C. Comparative performance analysis of artiﬁcial bee colony
algorithm for automatic voltage regulator (AVR) system. Journal of the Franklin Institute, vol. 348,
pp. 1927–1946, 2011.
Graebe, S. F., Goodwin, G. C., and Elsley, G. Control Design and Implementation in Continuous Steel
Casting. IEEE Control Systems, August 1995, pp. 64–71.
Hostetter, G. H., Savant, C. J., Jr. and Stefani, R. T. Design of Feedback Control Systems. 2d ed.
Saunders College Publishing, New York, 1989.
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, DC, 1980.
Karkoub, M., Her, M.-G., and Chen, J. M. Design and Control of a Haptic Interactive Motion
Simulator for Virtual Entertainment Systems. Robonica, vol. 28, 2010, pp. 47–56.
Kong, F., and de Keyser, R. Identiﬁcation and Control of the Mould Level in a Continuous Casting
Machine. Second IEEE Conference on Control Application, Vancouver, B.C., 1993. pp. 53–58.
Lee, S.-R., Ko, S.-H., Dehbonei, H., Jeon, C.-H., and Kwon, O.-S., Operational Characteristics of PV/
Diesel Hybrid Distributed Generation System Using Dual Voltage Source Inverter for Weak Grid,
ISIS 2007 Proceedings, Eighth Symposium on Advanced Intelligent Systems. 2007.
Lin, J.-S., and Kanellakopoulos, I., Nonlinear Design of Active Suspensions. IEEE Control Systems,
vol. 17, issue 3, June 1997, pp. 45–59.
Mason, S. J. Feedback Theory—Some Properties of Signal-Flow Graphs. Proc. IRE, September 1953,
pp. 1144–1156.
Neamen, D. A. Electronic Circuit Analysis and Design. McGraw-Hill, 2d ed., 2001, p. 334.
Piccin, O., Barbé L., Bayle B., and de Mathelin, M. A Force Feedback Teleoperated Needle Insertion
Device for Percutaneous Procedures. Int. J. of Robotics Research, vol. 28, 2009, p. 1154.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Intelligence and Informatics.
IEEE, 2007, pp. 157–162.
Tasch, U., Koontz, J. W., Ignatoski, M. A., and Geselowitz, D. B. An Adaptive Aortic Pressure
Observer for the Penn State Electric Ventricular Assist Device. IEEE Transactions on Biomedical
Engineering, vol. 37, 1990, pp. 374–383.
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New York,
1968.
Vaughan, N. D., and Gamble, J. B. The Modeling and Simulation of a Proportional Solenoid Valve.
Journal of Dynamic Systems, Measurements, and Control, vol. 118, March 1996, pp. 120–125.
Yaniv, Y., Sivan, R., and Landesberg, A. Stability, Controllability and Observability of the “Four
State” Model for the Sarcomeric Control of Contraction. Annals of Biomedical Engineering, vol. 34,
2006, pp. 778–789.
Bibliography
297


Stability
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Make and interpret a basic Routh table to determine the stability of a system
(Sections 6.1–6.2)
• Make and interpret a Routh table where either the ﬁrst element of a row is zero
or an entire row is zero (Sections 6.3–6.4)
• Use a Routh table to determine the stability of a system represented in state
space (Section 6.5)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to ﬁnd the range of preampliﬁer gain to keep the
system stable.
• Given the block diagrams for the UFSS vehicle’s pitch and heading control
systems on the back endpapers, you will be able to determine the range of gain
for stability of the pitch or heading control system.

6
299

6.1 Introduction
In Chapter 1, we saw that three requirements enter into the design of a control system:
transient response, stability, and steady-state errors. Thus far we have covered transient
response, which we will revisit in Chapter 8. We are now ready to discuss the next
requirement, stability.
Stability is the most important system speciﬁcation. If a system is unstable, transient
response and steady-state errors are moot points. An unstable system cannot be designed for
a speciﬁc transient response or steady-state error requirement. What, then, is stability? There
are many deﬁnitions for stability, depending upon the kind of system or the point of view. In
this section, we limit ourselves to linear, time-invariant systems.
In Section 1.5, we discussed that we can control the output of a system if the steady-
state response consists of only the forced response. But the total response of a system is the
sum of the forced and natural responses, or
ct  cforcedt  cnaturalt
(6.1)
Using these concepts, we present the following deﬁnitions of stability, instability, and
marginal stability:
A linear, time-invariant system is stable if the natural response approaches zero as time
approaches inﬁnity.
A linear, time-invariant system is unstable if the natural response grows without bound as
time approaches inﬁnity.
A linear, time-invariant system is marginally stable if the natural response neither decays
nor grows but remains constant or oscillates as time approaches inﬁnity.
Thus, the deﬁnition of stability implies that only the forced response remains as the natural
response approaches zero.
These deﬁnitions rely on a description of the natural response. When one is looking at
the total response, it may be difﬁcult to separate the natural response from the forced
response. However, we realize that if the input is bounded and the total response is not
approaching inﬁnity as time approaches inﬁnity, then the natural response is obviously not
approaching inﬁnity. If the input is unbounded, we see an unbounded total response, and
we cannot arrive at any conclusion about the stability of the system; we cannot tell whether
the total response is unbounded because the forced response is unbounded or because the
natural response is unbounded. Thus, our alternate deﬁnition of stability, one that regards
the total response and implies the ﬁrst deﬁnition based upon the natural response, is this:
A system is stable if every bounded input yields a bounded output.
We call this statement the bounded-input, bounded-output (BIBO) deﬁnition of stability.
Let us now produce an alternate deﬁnition for instability based on the total response
rather than the natural response. We realize that if the input is bounded but the total response is
unbounded, the system is unstable, since we can conclude that the natural response
approaches inﬁnity as time approaches inﬁnity. If the input is unbounded, we will see an
unbounded total response, and we cannot draw any conclusion about the stability of the
system; we cannot tell whether the total response is unbounded because the forced response is
unbounded or because the natural response is unbounded. Thus, our alternate deﬁnition of
instability, one that regards the total response, is this:
A system is unstable if any bounded input yields an unbounded output.
300
Chapter 6
Stability

These deﬁnitions help clarify our previous deﬁnition of marginal stability, which
really means that the system is stable for some bounded inputs and unstable for others. For
example, we will show that if the natural response is undamped, a bounded sinusoidal input
of the same frequency yields a natural response of growing oscillations. Hence, the system
appears stable for all bounded inputs except this one sinusoid. Thus, marginally stable
systems by the natural response deﬁnitions are included as unstable systems under the BIBO
deﬁnitions.
Let us summarize our deﬁnitions of stability for linear, time-invariant systems. Using
the natural response:
1. A system is stable if the natural response approaches zero as time approaches inﬁnity.
2. A system is unstable if the natural response approaches inﬁnity as time approaches
inﬁnity.
3. A system is marginally stable if the natural response neither decays nor grows but
remains constant or oscillates.
Using the total response (BIBO):
1. A system is stable if every bounded input yields a bounded output.
2. A system is unstable if any bounded input yields an unbounded output.
Physically, an unstable system whose natural response grows without bound can
cause damage to the system, to adjacent property, or to human life. Many times systems are
designed with limited stops to prevent total runaway. From the perspective of the time
response plot of a physical system, instability is displayed by transients that grow without
bound and, consequently, a total response that does not approach a steady-state value or
other forced response.1
How do we determine if a system is stable? Let us focus on the natural response
deﬁnitions of stability. Recall from our study of system poles that poles in the left half-plane
(lhp) yield either pure exponential decay or damped sinusoidal natural responses.
These natural responses decay to zero as time approaches inﬁnity. Thus, if the closed-loop
system poles are in the left half of the plane and hence have a negative real part, the system
is stable. That is, stable systems have closed-loop transfer functions with poles only in the left
half-plane.
Poles in the right half-plane (rhp) yield either pure exponentially increasing or
exponentially increasing sinusoidal natural responses. These natural responses approach
inﬁnity as time approaches inﬁnity. Thus, if the closed-loop system poles are in the right half
of the s-plane and hence have a positive real part, the system is unstable. Also, poles of
multiplicity greater than 1 on the imaginary axis lead to the sum of responses of the form
Atn cos ωt  ϕ, where n  1; 2; . . . ; where the amplitude approaches inﬁnity as time
approaches inﬁnity. Thus, unstable systems have closed-loop transfer functions with at
least one pole in the right half-plane and/or poles of multiplicity greater than 1 on the
imaginary axis.
Finally, a system that has imaginary axis poles of multiplicity 1 yields pure sinusoidal
oscillations as a natural response. These responses neither increase nor decrease in
amplitude. Thus, marginally stable systems have closed-loop transfer functions with
only imaginary axis poles of multiplicity 1 and poles in the left half-plane.
As an example, the unit step response of the stable system of Figure 6.1(a) is
compared to that of the unstable system of Figure 6.1(b). The responses, also shown in
1 Care must be taken here to distinguish between natural responses growing without bound and a forced
response, such as a ramp or exponential increase, that also grows without bound. A system whose forced
response approaches inﬁnity is stable as long as the natural response approaches zero.
6.1 Introduction
301

Figure 6.1, shows that while the oscillations for the stable system diminish, those for the
unstable system increase without bound. Also notice that the stable system’s response in this
case approaches a steady-state value of unity.
It is not always a simple matter to determine if a feedback control system is stable.
Unfortunately, a typical problem that arises is shown in Figure 6.2. Although we know the
poles of the forward transfer function in Figure 6.2(a), we do not know the location of
the poles of the equivalent closed-loop system of Figure 6.2(b) without factoring or
otherwise solving for the roots.
However, under certain conditions, we can draw some conclusions about the stability
of the system. First, if the closed-loop transfer function has only left-half-plane poles, then
the factors of the denominator of the closed-loop system transfer function consist of
products of terms such as s  ai, where ai is real and positive, or complex with a positive
real part. The product of such terms is a polynomial with all positive coefﬁcients.2 No term
of the polynomial can be missing, since that would imply cancellation between positive and
negative coefﬁcients or imaginary axis roots in the factors, which is not the case. Thus, a
0
1
c(t)
15
30
0
Time (seconds)
1
0
–1
15
c(t)
Time (seconds)
–
3
s(s +1)(s + 2)
Stable system
jω
j 1.047
s-plane
–j 1.047
–0.164
–2.672
Stable system's
closed-loop poles
(not to scale)
–
7
s(s +1)(s + 2)
Unstable system
σ
σ
jω
j 1.505
s-plane
–j 1.505
0.0434
–3.087
Unstable system's
closed-loop poles
(not to scale)
C(s)
C(s)
(b)
(a)
E(s)
E(s)
+
1
R(s) =
+
s
1
s
30
=
R(s)
0
FIGURE 6.1
Closed-loop
poles and response: a. stable
system; b. unstable system
2 The coefﬁcients can also be made all negative by multiplying the polynomial by 1. This operation does not
change the root location.
302
Chapter 6
Stability

sufﬁcient condition for a system to be unstable is that all signs of the coefﬁcients of the
denominator of the closed-loop transfer function are not the same. If powers of s are missing,
the system is either unstable or, at best, marginally stable. Unfortunately, if all coefﬁcients
of the denominator are positive and not missing, we do not have deﬁnitive information about
the system’s pole locations.
If the method described in the previous paragraph is not sufﬁcient, then a computer
can be used to determine the stability by calculating the root locations of the denominator of
the closed-loop transfer function. Today some hand-held calculators can evaluate the roots
of a polynomial. There is, however, another method to test for stability without having to
solve for the roots of the denominator. We discuss this method in the next section.
6.2 Routh-Hurwitz Criterion
In this section, we learn a method that yields stability information without the need to solve
for the closed-loop system poles. Using this method, we can tell how many closed-loop
system poles are in the left half-plane, in the right half-plane, and on the jω-axis. (Notice
that we say how many, not where.) We can ﬁnd the number of poles in each section of the
s-plane, but we cannot ﬁnd their coordinates. The method is called the Routh-Hurwitz
criterion for stability (Routh, 1905).
The method requires two steps: (1) Generate a data table called a Routh table and (2)
interpret the Routh table to tell how many closed-loop system poles are in the left half-plane,
the right half-plane, and on the jω-axis. You might wonder why we study the Routh-Hurwitz
criterion when modern calculators and computers can tell us the exact location of system
poles. The power of the method lies in design rather than analysis. For example, if you have
an unknown parameter in the denominator of a transfer function, it is
difﬁcult to determine via a calculator the range of this parameter to yield
stability. You would probably rely on trial and error to answer the stability
question. We shall see later that the Routh-Hurwitz criterion can yield a
closed-form expression for the range of the unknown parameter.
In this section, we make and interpret a basic Routh table. In the next
section, we consider two special cases that can arise when generating this
data table.
Generating a Basic Routh Table
Look at the equivalent closed-loop transfer function shown in Figure 6.3. Since we are
interested in the system poles, we focus our attention on the denominator. We ﬁrst create the
Routh table shown in Table 6.1. Begin by labeling the rows with powers of s from the
highest power of the denominator of the closed-loop transfer function to s0. Next start with
the coefﬁcient of the highest power of s in the denominator and list, horizontally in the ﬁrst
row, every other coefﬁcient. In the second row, list horizontally, starting with the next
highest power of s, every coefﬁcient that was skipped in the ﬁrst row.
C(s)
R(s)
(b)
C(s)
R(s)
(a)
–
+
E(s)
s(s + 4)(s + 6)(s + 8)(s + 10)
10(s + 2)
10(s + 2)
s5 + 28s4 + 284s3 + 1232s2 + 1930s + 20
FIGURE 6.2
Common cause
of problems in ﬁnding closed-
loop poles: a. original system;
b. equivalent system
N(s)
C(s)
R(s)
a4s4 + a3s3 + a2s2 + a1s + a0
FIGURE 6.3
Equivalent closed-loop transfer
function
TABLE 6.1
Initial layout for
Routh table
s4
a4
a2
a0
s3
a3
a1
0
s2
s1
s0
6.2 Routh-Hurwitz Criterion
303

The remaining entries are ﬁlled in as follows. Each entry is a negative determinant of
entries in the previous two rows divided by the entry in the ﬁrst column directly above the
calculated row. The left-hand column of the determinant is always the ﬁrst column of the
previous two rows, and the right-hand column is the elements of the column above and to
the right. The table is complete when all of the rows are completed down to s0. Table 6.2
is the completed Routh table. Let us look at an example.
TABLE 6.2
Completed Routh table
s4
a4
a2
a0
s3
a3
a1
0
s2


a4
a2
a3
a1

a3
 b1


a4
a0
a3
0

a3
 b2


a4
0
a3
0

a3
 0
s1


a3
a1
b1
b2

b1
 c1


a3
0
b1
0

b1
 0


a3
0
b1
0

b1
 0
s0


b1
b2
c1
0

c1
 d1


b1
0
c1
0

c1
 0


b1
0
c1
0

c1
 0
Example 6.1
Creating a Routh Table
Creating a Routh Table
PROBLEM: Make the Routh table for the system shown in Figure 6.4(a).
SOLUTION: The ﬁrst step is to ﬁnd the equivalent closed-loop system because we
want to test the denominator of this function, not the given forward transfer function,
for pole location. Using the feedback formula, we obtain the equivalent system of
Figure 6.4(b). The Routh-Hurwitz criterion will be applied to this denominator. First
label the rows with powers of s from s3 down to s0 in a vertical column, as shown in
Table 6.3. Next form the ﬁrst row of the table, using the coefﬁcients of the denominator
of the closed-loop transfer function. Start with the coefﬁcient of the highest power
and skip every other power of s. Now form the second row with the coefﬁcients
of the denominator skipped in the previous step. Subsequent rows are formed with
determinants, as shown in Table 6.2.
For convenience, any row of the Routh table can be multiplied by a positive constant
without changing the values of the rows below. This can be proved by examining the
expressions for the entries and verifying that any multiplicative constant from a previous
row cancels out. In the second row of Table 6.3, for example, the row was multiplied by
1/10. We see later that care must be taken not to multiply the row by a negative constant.
1000
R(s)
(b)
1000
C(s)
R(s)
(a)
–
+
E(s)
C(s)
(s + 2)(s + 3)(s + 5)
s3 + 10s2 + 31s + 1030
FIGURE 6.4
a. Feedback
system for Example 6.1;
b. equivalent closed-loop
system
304
Chapter 6
Stability

Interpreting the Basic Routh Table
Now that we know how to generate the Routh table, let us see how to interpret it. The
basic Routh table applies to systems with poles in the left and right half-planes. Systems
with imaginary poles and the kind of Routh table that results will be discussed in the next
section. Simply stated, the Routh-Hurwitz criterion declares that the number of roots of
the polynomial that are in the right half-plane is equal to the number of sign changes in
the ﬁrst column.
If the closed-loop transfer function has all poles in the left half of the s-plane, the
system is stable. Thus, a system is stable if there are no sign changes in the ﬁrst column of
the Routh table. For example, Table 6.3 has two sign changes in the ﬁrst column. The ﬁrst
sign change occurs from 1 in the s2 row to 72 in the s1 row. The second occurs from 72 in
the s1 row to 103 in the s0 row. Thus, the system of Figure 6.4 is unstable since two poles
exist in the right half-plane.
Now that we have described how to generate and interpret a basic Routh table, let us
look at two special cases that can arise.
6.3 Routh-Hurwitz Criterion: Special Cases
Two special cases can occur: (1) The Routh table sometimes will have a zero only in the ﬁrst
column of a row, or (2) the Routh table sometimes will have an entire row that consists of
zeros. Let us examine the ﬁrst case.
TABLE 6.3
Completed Routh table for Example 6.1
s3
1
31
0
s2
10
1
1030
103
0
s1


1
31
1
103

1
 72


1
0
0
0

1
 0


1
0
1
0

1
 0
s0


1
103
72
0

72
 103


1
0
72
0

72
 0


1
0
72
0

72
 0
Skill-Assessment Exercise 6.1
PROBLEM: Make a Routh table and tell how many roots of the following polynomial
are in the right half-plane and in the left half-plane.
Ps  3s7  9s6  6s5  4s4  7s3  8s2  2s  6
ANSWER: Four in the right half-plane (rhp), three in the left half-plane (lhp).
The complete solution is at www.wiley.com/college/nise.
6.3 Routh-Hurwitz Criterion: Special Cases
305

Zero Only in the First Column
If the ﬁrst element of a row is zero, division by zero would be required to form the next
row. To avoid this phenomenon, an epsilon, ϵ, is assigned to replace the zero in the ﬁrst
column. The value ϵ is then allowed to approach zero from either the positive or the
negative side, after which the signs of the entries in the ﬁrst column can be determined.
Let us look at an example.
Example 6.2
Stability via Epsilon Method
Stability via Epsilon Method
PROBLEM: Determine the stability of the closed-loop transfer function
Ts 
10
s5  2s4  3s3  6s2  5s  3
(6.2)
SOLUTION: The solution is shown in Table 6.4. We form the Routh table by using the
denominator of Eq. (6.2). Begin by assembling the Routh table down to the row where
a zero appears only in the ﬁrst column (the s3 row). Next replace the zero by a small
number, ϵ, and complete the table. To begin the interpretation, we must ﬁrst assume
a sign, positive or negative, for the quantity ϵ. Table 6.5 shows the ﬁrst column of
Table 6.4 along with the resulting signs for choices of ϵ positive and ϵ negative.
If ϵ is chosen positive, Table 6.5 will show a sign change from the s3 row to the s2
row, and there will be another sign change from the s2 row to the s1 row. Hence, the system
is unstable and has two poles in the right half-plane.
Alternatively, we could choose ϵ negative. Table 6.5 would then show a sign change
from the s4 row to the s3 row. Another sign change would occur from the s3 row to the s2
row. Our result would be exactly the same as that for a positive choice for ϵ. Thus, the
system is unstable, with two poles in the right half-plane.
Students who are performing the MATLAB exercises and want to explore
the added capability of MATLAB’s Symbolic Math Toolbox should
now run ch6sp1 in Appendix F at www.wiley.com/college/nise. You
will learn how to use the Symbolic Math Toolbox to calculate the
values of cells in a Routh table even if the table contains symbolic
objects, such as ϵ. You will see that the Symbolic Math Toolbox
and MATLAB yield an alternate way to generate the Routh table for
Example 6.2.
TryIt 6.1
Use the following MATLAB
statement to ﬁnd the poles of
the closed-loop transfer
function in Eq. (6.1).
roots([1 2 3 6 5 3])
TABLE 6.4
Completed Routh table for
Example 6.2
s5
1
3
5
s4
2
6
3
s3
0
ϵ
7
2
0
s2
6ϵ  7
ϵ
3
0
s1
42ϵ  49  6ϵ2
12ϵ  14
0
0
s0
3
0
0
TABLE 6.5
Determining signs in ﬁrst column of a Routh table with zero as
ﬁrst element in a row
Label
First column
ϵ  
ϵ  
s5
1
+
+
s4
2
+
+
s3
0
ϵ
+

s2
6ϵ  7
ϵ

+
s1
42ϵ  49  6ϵ2
12ϵ  14
+
+
s0
3
+
+
306
Chapter 6
Stability

Another method that can be used when a zero appears only in the ﬁrst column of a row
is derived from the fact that a polynomial that has the reciprocal roots of the original
polynomial has its roots distributed the same—right half-plane, left half-plane, or imaginary
axis—because taking the reciprocal of the root value does not move it to another region.
Thus, if we can ﬁnd the polynomial that has the reciprocal roots of the original, it is possible
that the Routh table for the new polynomial will not have a zero in the ﬁrst column. This
method is usually computationally easier than the epsilon method just described.
We now show that the polynomial we are looking for, the one with the reciprocal
roots, is simply the original polynomial with its coefﬁcients written in reverse order
(Phillips, 1991). Assume the equation
sn  an1sn1  ∙∙∙ a1s  a0  0
(6.3)
If s is replaced by 1=d, then d will have roots which are the reciprocal of s. Making this
substitution in Eq. (6.3),
1
d
 n
 an1
1
d
 n1
 ∙∙∙ a1
1
d
 
 a0  0
(6.4)
Factoring out 1=dn,
1
d
 n
1  an1
1
d
 1
 ∙∙∙ a1
1
d
  1n


 a0
1
d
 n
"
#

1
d
 n
1  an1d  ∙∙∙ a1d n1  a0dn  0
(6.5)
Thus, the polynomial with reciprocal roots is a polynomial with the coefﬁcients written in
reverse order. Let us redo the previous example to show the computational advantage of
this method.
Example 6.3
Stability via Reverse Coefﬁcients
Stability via Reverse Coefﬁcients
PROBLEM: Determine the stability of the closed-loop transfer function
Ts 
10
s5  2s4  3s3  6s2  5s  3
(6.6)
SOLUTION: First write a polynomial that has the reciprocal roots of the denominator of
Eq. (6.6). From our discussion, this polynomial is formed by writing the denominator
of Eq. (6.6) in reverse order. Hence,
Ds  3s5  5s4  6s3  3s2  2s  1
(6.7)
We form the Routh table as shown in Table 6.6 using Eq. (6.7). Since there are two sign
changes, the system is unstable and has two right-half-plane poles. This is the same as
the result obtained in Example 6.2. Notice that Table 6.6 does not have a zero in the
ﬁrst column.
TABLE 6.6
Routh table for
Example 6.3
s5
3
6
2
s4
5
3
1
s3
4.2
1.4
s2
1.33
1
s1
1.75
s0
1
6.3 Routh-Hurwitz Criterion: Special Cases
307

Entire Row is Zero
We now look at the second special case. Sometimes while making a Routh table, we ﬁnd
that an entire row consists of zeros because there is an even polynomial that is a factor of
the original polynomial. This case must be handled differently from the case of a zero in
only the ﬁrst column of a row. Let us look at an example that demonstrates how to
construct and interpret the Routh table when an entire row of zeros is present.
Example 6.4
Stability via Routh Table with Row of Zeros
Stability via Routh Table with Row of Zeros
PROBLEM: Determine the number of right-half-plane poles in the closed-loop transfer
function
Ts 
10
s5  7s4  6s3  42s2  8s  56
(6.8)
SOLUTION: Start by forming the Routh table for the denominator of Eq. (6.8) (see
Table 6.7). At the second row we multiply through by 1/7 for convenience. We stop at
the third row, since the entire row consists of zeros, and use the following procedure.
First we return to the row immediately above the row of zeros and form an auxiliary
polynomial, using the entries in that row as coefﬁcients. The polynomial will start with
the power of s in the label column and continue by skipping every other power of s. Thus,
the polynomial formed for this example is
Ps  s4  6s2  8
(6.9)
Next we differentiate the polynomial with respect to s and obtain
dPs
ds
 4s3  12s  0
(6.10)
Finally, we use the coefﬁcients of Eq. (6.10) to replace the row of zeros. Again, for
convenience, the third row is multiplied by 1/4 after replacing the zeros.
The remainder of the table is formed in a straightforward manner by following the
standard form shown in Table 6.2. Table 6.7 shows that all entries in the ﬁrst column are
positive. Hence, there are no right-half-plane poles.
TABLE 6.7
Routh table for Example 6.4
s5
1
6
8
s4
7
1
42
6
56
8
s3
0
4
1
0
12
3
0
0
0
s2
3
8
0
s1
1
3
0
0
s0
8
0
0
308
Chapter 6
Stability

Let us look further into the case that yields an entire row of zeros.
An entire row of zeros will appear in the Routh table when a purely even
or purely odd polynomial is a factor of the original polynomial. For
example, s4  5s2  7 is an even polynomial; it has only even powers
of s. Even polynomials only have roots that are symmetrical about the
origin.3 This symmetry can occur under three conditions of root position:
(1) The roots are symmetrical and real, (2) the roots are symmetrical and
imaginary, or (3) the roots are quadrantal. Figure 6.5 shows examples of
these cases. Each case or combination of these cases will generate an
even polynomial.
It is this even polynomial that causes the row of zeros to appear.
Thus, the row of zeros tells us of the existence of an even polynomial
whose roots are symmetric about the origin. Some of these roots could be
on the jω-axis. On the other hand, since jω roots are symmetric about the
origin, if we do not have a row of zeros, we cannot possibly have jω roots.
Another characteristic of the Routh table for the case in question is
that the row previous to the row of zeros contains the even polynomial
that is a factor of the original polynomial. Finally, everything from the
row containing the even polynomial down to the end of the Routh table
is a test of only the even polynomial. Let us put these facts together in an
example.
C
C
C
C
A
A
jω
s-plane
A:   Real and symmetrical about the origin
B:   Imaginary and symmetrical about the origin
C:   Quadrantal and symmetrical about the origin
B
B
σ
FIGURE 6.5
Root positions to generate even
polynomials: A, B, C, or any combination
3 The polynomial s5  5s3  7s is an example of an odd polynomial; it has only odd powers of s. Odd polynomials
are the product of an even polynomial and an odd power of s. Thus, the constant term of an odd polynomial is
always missing.
Example 6.5
Pole Distribution via Routh Table with Row of Zeros
Pole Distribution via Routh Table with Row of Zeros
PROBLEM: For the transfer function
Ts 
20
s8  s7  12s6  22s5  39s4  59s3  48s2  38s  20
(6.11)
tell how many poles are in the right half-plane, in the left half-plane, and on the jω-axis.
SOLUTION: Use the denominator of Eq. (6.11) and form the Routh table in Table 6.8.
For convenience the s6 row is multiplied by 1/10, and the s5 row is multiplied by 1/20.
At the s3 row we obtain a row of zeros. Moving back one row to s4, we extract the even
polynomial, P(s), as
Ps  s4  3s2  2
(6.12)
This polynomial will divide evenly into the denominator of Eq. (6.11) and thus is a
factor. Taking the derivative with respect to s to obtain the coefﬁcients that replace the
row of zeros in the s3 row, we ﬁnd
dPs
ds
 4s3  6s  0
(6.13)
Replace the row of zeros with 4, 6, and 0 and multiply the row by 1/2 for convenience.
Finally, continue the table to the s0 row, using the standard procedure.
6.3 Routh-Hurwitz Criterion: Special Cases
309

How do we now interpret this Routh table? Since all entries from the even
polynomial at the s4 row down to the s0 row are a test of the even polynomial, we begin
to draw some conclusions about the roots of the even polynomial. No sign changes exist
from the s4 row down to the s0 row. Thus, the even polynomial does not have right-half-
plane poles. Since there are no right-half-plane poles, no left-half-plane poles are present
because of the requirement for symmetry. Hence, the even polynomial, Eq. (6.12), must
have all four of its poles on the jω-axis.4 These results are summarized in the ﬁrst column
of Table 6.9.
The remaining roots of the total polynomial are evaluated from the s8 row down to
the s4 row. We notice two sign changes: one from the s7 row to the s6 row and the other
from the s6 row to the s5 row. Thus, the other polynomial must have two roots in the right
half-plane. These results are included in Table 6.9 under Other. The ﬁnal tally is the sum
of roots from each component, the even polynomial and the other polynomial, as shown
under Total in Table 6.9. Thus, the system has two poles in the right half-plane, two poles
in the left half-plane, and four poles on the jω-axis; it is unstable because of the right-half-
plane poles.
TABLE 6.8
Routh table for Example 6.5
s8
1
12
39
48
20
s7
1
22
59
38
0
s6
 10  1
 20  2
10
1
20
2
0
s5
20
1
60
3
40
2
0
0
s4
1
3
2
0
0
s3
0
4
2
0
6
3
0
0
0
0
0
s2
3
2
3
2
4
0
0
0
s1
1
3
0
0
0
0
s0
4
0
0
0
0
4 A necessary condition for stability is that the jω roots have unit multiplicity. The even polynomial must be checked
for multiple jω roots. For this case, the existence of multiple jω roots would lead to a perfect, fourth-order square
polynomial. Since Eq. (6.12) is not a perfect square, the four jω roots are distinct.
TABLE 6.9
Summary of pole locations for Example 6.5
Polynomial
Location
Even
(fourth-order)
Other
(fourth-order)
Total
(eighth-order)
Right half-plane
0
2
2
Left half-plane
0
2
2
jω
4
0
4
310
Chapter 6
Stability

We now summarize what we have learned about polynomials that
generate entire rows of zeros in the Routh table. These polynomials have a
purely even factor with roots that are symmetrical about the origin. The even
polynomial appears in the Routh table in the row directly above the row of
zeros. Every entry in the table from the even polynomial’s row to the end of
the chart applies only to the even polynomial. Therefore, the number of sign
changes from the even polynomial to the end of the table equals the number
of right-half-plane roots of the even polynomial. Because of the symmetry
of roots about the origin, the even polynomial must have the same number
of left-half-plane roots as it does right-half-plane roots. Having accounted
for the roots in the right and left half-planes, we know the remaining roots
must be on the jω-axis.
Every row in the Routh table from the beginning of the chart to the row
containing the even polynomial applies only to the other factor of the
original polynomial. For this factor, the number of sign changes, from the
beginning of the table down to the even polynomial, equals the number of
right-half-plane roots. The remaining roots are left-half-plane roots. There
can be no jω roots contained in the other polynomial.
Let us demonstrate the usefulness of the Routh-Hurwitz criterion with a few additional
examples.
6.4 Routh-Hurwitz Criterion: Additional Examples
The previous two sections have introduced the Routh-Hurwitz criterion. Now we need to
demonstrate the method’s application to a number of analysis and design problems.
Virtual Experiment 6.1
Stability
Put theory into practice and evaluate the stability
of the Quanser Linear Inverted Pendulum in
LabVIEW. When in the upward balanced
position, this system addresses the challenge of
stabilizing a rocket during take-off. In the
downward position it emulates the construction
gantry crane.
Virtual experiments are found on
Learning Space.
Skill-Assessment Exercise 6.2
PROBLEM: Use the Routh-Hurwitz criterion to ﬁnd how many poles of the following
closed-loop system, T(s), are in the rhp, in the lhp, and on the jω-axis:
Ts 
s3  7s2  21s  10
s6  s5  6s4  0s3  s2  s  6
ANSWER: Two rhp, two lhp, and two jω
The complete solution is at www.wiley.com/college/nise.
Example 6.6
Standard Routh-Hurwitz
Standard Routh-Hurwitz
PROBLEM: Find the number of poles in the left half-plane, the right half-plane, and on
the jω-axis for the system of Figure 6.6.
6.4 Routh-Hurwitz Criterion: Additional Examples
311

The next example demonstrates the occurrence of a zero in only the ﬁrst column
of a row.
SOLUTION: First, ﬁnd the closed-loop transfer function as
Ts 
200
s4  6s3  11s2  6s  200
(6.14)
The Routh table for the denominator of Eq. (6.14) is shown as Table 6.10. For clarity,
we leave most zero cells blank. At the s1 row there is a negative coefﬁcient; thus, there
are two sign changes. The system is unstable, since it has two right-half-plane poles and
two left-half-plane poles. The system cannot have jω poles since a row of zeros did not
appear in the Routh table.
200
C(s)
R(s)
+
E(s)
s(s3 + 6s2 + 11s + 6)
–
FIGURE 6.6
Feedback
control system for Example 6.6
TABLE 6.10
Routh table for Example 6.6
s4
1
11
200
s3
6
1
6
1
s2
10
1
200
20
s1
19
s0
20
Example 6.7
Routh-Hurwitz with Zero in First Column
Routh-Hurwitz with Zero in First Column
PROBLEM: Find the number of poles in the left half-plane, the right half-plane, and on
the jω-axis for the system of Figure 6.7.
SOLUTION: The closed-loop transfer function is
Ts 
1
2s5  3s4  2s3  3s2  2s  1
(6.15)
Form the Routh table shown as Table 6.11, using the denominator of Eq. (6.15). A zero
appears in the ﬁrst column of the s3 row. Since the entire row is not zero, simply replace
1
C(s)
R(s)
–
+
s(2s4 + 3s3 + 2s2 + 3s + 2)
E(s)
FIGURE 6.7
Feedback
control system for Example 6.7
312
Chapter 6
Stability

In the next example, we see an entire row of zeros appear along with the possibility of
imaginary roots.
the zero with a small quantity, ϵ, and continue the table. Permitting ϵ to be a small,
positive quantity, we ﬁnd that the ﬁrst term of the s2 row is negative. Thus, there are
two sign changes, and the system is unstable, with two poles in the right half-plane.
The remaining poles are in the left half-plane.
We also can use the alternative approach, where we produce a polynomial whose
roots are the reciprocal of the original. Using the denominator of Eq. (6.15), we form a
polynomial by writing the coefﬁcients in reverse order,
s5  2s4  3s3  2s2  3s  2
(6.16)
The Routh table for this polynomial is shown as Table 6.12. Unfortunately, in this case
we also produce a zero only in the ﬁrst column at the s2 row. However, the table is
easier to work with than Table 6.11. Table 6.12 yields the same results as Table 6.11:
three poles in the left half-plane and two poles in the right-half-plane. The system
is unstable.
Students who are using MATLAB should now run ch6p1 in Appendix B.
You will learn how to perform block diagram reduction to ﬁnd
T(s), followed by an evaluation of the closed-loop system’s
poles to determine stability. This exercise uses MATLAB to do
Example 6.7.
TABLE 6.11
Routh table for Example 6.7
s5
2
2
2
s4
3
3
1
s3
0
ϵ
4
3
s2
3ϵ  4
ϵ
1
s1
12ϵ  16  3ϵ2
9ϵ  12
s0
1
TABLE 6.12
Alternative Routh table for Example 6.7
s5
1
3
3
s4
2
2
2
s3
2
2
s2
0
ϵ
2
s1
2ϵ  4
ϵ
s0
2
6.4 Routh-Hurwitz Criterion: Additional Examples
313

Example 6.8
Routh-Hurwitz with Row of Zeros
Routh-Hurwitz with Row of Zeros
PROBLEM: Find the number of poles in the left half-plane, the right half-plane, and on
the jω-axis for the system of Figure 6.8. Draw conclusions about the stability of the
closed-loop system.
SOLUTION: The closed-loop transfer function for the system of Figure 6.8 is
Ts 
128
s8  3s7  10s6  24s5  48s4  96s3  128s2  192s  128
(6.17)
Using the denominator, form the Routh table shown as Table 6.13. A row of zeros appears
in the s5 row. Thus, the closed-loop transfer function denominator must have an even
polynomial as a factor. Return to the s6 row and form the even polynomial:
Ps  s6  8s4  32s2  64
(6.18)
Differentiate this polynomial with respect to s to form the coefﬁcients that will replace the
row of zeros:
dPs
ds
 6s5  32s3  64s  0
(6.19)
Replace the row of zeros at the s5 row by the coefﬁcients of Eq. (6.19) and multiply through
by 1/2 for convenience. Then complete the table.
We note that there are two sign changes from the even polynomial at the s6 row
down to the end of the table. Hence, the even polynomial has two right-half-plane poles.
Because of the symmetry about the origin, the even polynomial must have an equal
number of left-half-plane poles. Therefore, the even polynomial has two left-half-plane
128
R(s)
–
+
C(s)
s(s7 + 3s6 + 10s5 + 24s4 + 48s3 + 96s2 + 128s + 192)
E(s)
FIGURE 6.8
Feedback
control system for Example 6.8
TABLE 6.13
Routh table for Example 6.8
s8
1
10
48
128
128
s7
3
1
24
8
96
32
192
64
s6
2
1
16
8
64
32
128
64
s5
0
6
3
0
32
16
0
64
32
0
0
0
s4
8
3
1
64
3
8
64
24
s3
8  1
40  5
s2
3
1
24
8
s1
3
s0
8
TryIt 6.2
Use MATLAB, The Control
System Toolbox, and the
following statements to ﬁnd the
closed-loop transfer function,
T(s), for Figure 6.8 and the
closed-loop poles.
numg=128;
deng=[1 3 10 24 ...
48 96 128 192 0];
G=tf(numg, deng);
T=feedback(G, 1)
poles=pole(T)
314
Chapter 6
Stability

The Routh-Hurwitz criterion gives vivid proof that changes in the gain of a feedback
control system result in differences in transient response because of changes in closed-loop
pole locations. The next example demonstrates this concept. We will see that for control
systems, such as those shown in Figure 6.9, gain variations can move poles from stable
regions of the s-plane onto the jω-axis and then into the right half-plane.
poles. Since the even polynomial is of sixth order, the two remaining poles must be on
the jω-axis.
There are no sign changes from the beginning of the table down to the even
polynomial at the s6 row. Therefore, the rest of the polynomial has no right-half-plane
poles. The results are summarized in Table 6.14. The system has two poles in the
right half-plane, four poles in the left half-plane, and two poles on the jω-axis, which
are of unit multiplicity. The closed-loop system is unstable because of the right-half-
plane poles.
TABLE 6.14
Summary of pole locations for Example 6.8
Polynomial
Location
Even
(sixth-order)
Other
(second-order)
Total
(eighth-order)
Right half-plane
2
0
2
Left half-plane
2
2
4
jω
2
0
2
Fiber-optic
tether
Syntactic
flotation module
(1200 Ibs)
Thrusters
(1 of 7)
Lifting bail
Long baseline &
emergency beacon
Emergency
flasher
Video
camera
Video
camera
Flash for
still photography
250-watt
lamps
(1 of 8)
Electronic compass
Side-scan sonar
electronics housing
Telemetry housing w/lasers
Manipulator electronics housing
Computer housing w/gyro
Altimeter
Wiring junction box
(1 of 2)
Aluminum
tubular frame
Side-scan
transceiver array
(1 of 2)
Still film
camera
Manipulator with
coring tool
Pan & till
unit
FIGURE 6.9
Jason is an
underwater, remote-controlled
vehicle that has been used to
explore the wreckage of the
Lusitania. The manipulator and
cameras comprise some of the
vehicle’s control systems
(Courtesy of Woods Hole
Oceanographic Institution)
6.4 Routh-Hurwitz Criterion: Additional Examples
315

Example 6.9
Stability Design via Routh-Hurwitz
Stability Design via Routh-Hurwitz
PROBLEM: Find the range of gain, K, for the system of Figure 6.10 that will cause the
system to be stable, unstable, and marginally stable. Assume K > 0.
SOLUTION: First ﬁnd the closed-loop transfer function as
Ts 
K
s3  18s2  77s  K
(6.20)
Next form the Routh table shown as Table 6.15.
Since K is assumed positive, we see that all elements in the ﬁrst column are always
positive except the s1 row. This entry can be positive, zero, or negative, depending upon
the value of K. If K < 1386, all terms in the ﬁrst column will be positive, and since there
are no sign changes, the system will have three poles in the left half-plane and be stable.
If K > 1386, the s1 term in the ﬁrst column is negative. There are two sign changes,
indicating that the system has two right-half-plane poles and one left-half-plane pole,
which makes the system unstable.
If K  1386, we have an entire row of zeros, which could signify jω poles.
Returning to the s2 row and replacing K with 1386, we form the even polynomial
Ps  18s2  1386
(6.21)
Differentiating with respect to s, we have
dPs
ds
 36s  0
(6.22)
Replacing the row of zeros with the coefﬁcients of Eq. (6.22), we obtain the
Routh-Hurwitz table shown as Table 6.16 for the case of K  1386.
K
C(s)
E(s)
R(s)
s(s + 7)(s + 11)
–
+
FIGURE 6.10
Feedback
control system for Example 6.9
TABLE 6.16
Routh table for Example 6.9 with K = 1386
s3
1
77
s2
18
1386
s1
0
36
s0
1386
TABLE 6.15
Routh table for Example 6.9
s3
1
77
s2
18
K
s1
1386  K
18
s0
K
316
Chapter 6
Stability

The Routh-Hurwitz criterion is often used in limited applications to factor
polynomials containing even factors. Let us look at an example.
Since there are no sign changes from the even polynomial (s2 row) down to the
bottom of the table, the even polynomial has its two roots on the jω-axis of unit
multiplicity. Since there are no sign changes above the even polynomial, the remaining
root is in the left half-plane. Therefore the system is marginally stable.
Students who are using MATLAB should now run ch6p2 in Appendix B.
You will learn how to set up a loop to search for the range of gain
to yield stability. This exercise uses MATLAB to do Example 6.9.
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch6sp2 in Appendix F at www.wiley.com/college/
nise. You will learn how to use the Symbolic Math Toolbox to calcu-
late the values of cells in a Routh table even if the table contains
symbolic objects, such as a variable gain, K. You will see that the
Symbolic Math Toolbox and MATLAB yield an alternative way to solve
Example 6.9.
Example 6.10
Factoring via Routh-Hurwitz
Factoring via Routh-Hurwitz
PROBLEM: Factor the polynomial
s4  3s3  30s2  30s  200
(6.23)
SOLUTION: Form the Routh table of Table 6.17. We ﬁnd that the s1 row is a row of
zeros. Now form the even polynomial at the s2 row:
Ps  s2  10
(6.24)
This polynomial is differentiated with respect to s in order to complete the Routh table.
However, since this polynomial is a factor of the original polynomial in Eq. (6.23),
dividing Eq. (6.23) by (6.24) yields s2  3s  20 as the other factor. Hence,
s4  3s3  30s2  30s  200  s2  10s2  3s  20
 s  j3:1623s  j3:1623
 s  1:5  j4:213s  1:5  j4:213
(6.25)
TABLE 6.17
Routh table for Example 6.10
s4
1
30
200
s3
3
1
30
10
s2
20
1
200
10
s1
0
2
0
0
s0
10
6.4 Routh-Hurwitz Criterion: Additional Examples
317

6.5 Stability in State Space
Up to this point we have examined stability from the s-plane viewpoint. Now we look at
stability from the perspective of state space. In Section 4.10, we mentioned that the values of
the system’s poles are equal to the eigenvalues of the system matrix, A. We stated that the
eigenvalues of the matrix A were solutions of the equation det sI  A  0, which also
yielded the poles of the transfer function. Eigenvalues appeared again in Section 5.8, where
they were formally deﬁned and used to diagonalize a matrix. Let us now formally show that
the eigenvalues and the system poles have the same values.
Reviewing Section 5.8, the eigenvalues of a matrix, A, are values of λ that permit a
nontrivial solution (other than 0) for x in the equation
Ax  λx
(6.26)
In order to solve for the values of λ that do indeed permit a solution for x, we rearrange
Eq. (6.26) as follows:
λx  Ax  0
(6.27)
or
λI  Ax  0
(6.28)
Solving for x yields
x  λI  A10
(6.29)
or
x  adjλI  A
detλI  A 0
(6.30)
We see that all solutions will be the null vector except for the occurrence of zero in
the denominator. Since this is the only condition where elements of x will be 0=0, or
indeterminate, it is the only case where a nonzero solution is possible.
The values of λ are calculated by forcing the denominator to zero:
detλI  A  0
(6.31)
Skill-Assessment Exercise 6.3
PROBLEM: For a unity feedback system with the forward transfer function
Gs 
Ks  20
ss  2s  3
ﬁnd the range of K to make the system stable.
ANSWER: 0 < K < 2
The complete solution is at www.wiley.com/college/nise.
318
Chapter 6
Stability

This equation determines the values of λ for which a nonzero solution for x in Eq. (6.26)
exists. In Section 5.8, we deﬁned x as eigenvectors and the values of λ as the eigenvalues of
the matrix A.
Let us now relate the eigenvalues of the system matrix, A, to the system’s poles. In
Chapter 3 we derived the equation of the system transfer function, Eq. (3.73), from the state
equations. The system transfer function has detsI  A in the denominator because of the
presence of sI  A1. Thus,
detsI  A  0
(6.32)
is the characteristic equation for the system from which the system poles can be found.
Since Eqs. (6.31) and (6.32) are identical apart from a change in variable name, we
conclude that the eigenvalues of the matrix A are identical to the system’s poles before
cancellation of common poles and zeroes in the transfer function. Thus, we can determine
the stability of a system represented in state space by ﬁnding the eigenvalues of the system
matrix, A, and determining their locations on the s-plane.
Example 6.11
Stability in State Space
Stability in State Space
PROBLEM: Given the system
_x 
0
3
1
2
8
1
10
5
2
2
64
3
75x 
10
0
0
2
64
3
75u
(6.33a)
y  1
0
0x
(6.33b)
ﬁnd out how many poles are in the left half-plane, in the right half-plane, and on the
jω-axis.
SOLUTION: First form sI  A:
sI  A 
s
0
0
0
s
0
0
0
s
2
64
3
75 
0
3
1
2
8
1
10
5
2
2
64
3
75 
s
3
1
2
s  8
1
10
5
s  2
2
64
3
75
(6.34)
Now ﬁnd the detsI  A:
detsI  A  s3  6s2  7s  52
(6.35)
Using this polynomial, form the Routh table of Table 6.18.
TABLE 6.18
Routh table for Example 6.11
s3
1
7
s2
 6
 3
52  26
s1
 47
3
 1
0
0
s0
26
6.5 Stability in State Space
319

In this section, we have evaluated the stability of feedback control systems from
the state-space perspective. Since the closed-loop poles and the eigenvalues of a system
are the same, the stability requirement of a system represented in state space dictates
that the eigenvalues cannot be in the right half of the s-plane or be multiple on the
jω-axis.
We can obtain the eigenvalues from the state equations without ﬁrst converting to a
transfer function to ﬁnd the poles: The equation detsI  A  0 yields the eigenvalues
directly. If detsI  A, a polynomial in s, cannot be factored easily, we can apply the
Routh-Hurwitz criterion to it to evaluate how many eigenvalues are in each region of
the s-plane.
We now summarize this chapter, ﬁrst with case studies and then with a written
summary. Our case studies include the antenna azimuth position control system
and the UFSS. Stability is as important to these systems as it is to the system shown
in Figure 6.11.
Since there is one sign change in the ﬁrst column, the system has one right-half-
plane pole and two left-half-plane poles. It is therefore unstable. Yet, you may question the
possibility that if a nonminimum-phase zero cancels the unstable pole, the system will be
stable. However, in practice, the nonminimum-phase zero or unstable pole will shift due to
a slight change in the system’s parameters. This change will cause the system to become
unstable.
Students who are using MATLAB should now run ch6p3 in Appendix B.
You will learn how to determine the stability of a system repre-
sented in state space by ﬁnding the eigenvalues of the system
matrix. This exercise uses MATLAB to do Example 6.11.
Skill-Assessment Exercise 6.4
PROBLEM: For the following system represented in state space, ﬁnd out how many
poles are in the left half-plane, in the right half-plane, and on the jω-axis.
_x 
2
1
1
1
7
1
3
4
5
2
664
3
775x 
0
0
1
2
664
3
775r
y 
0
1
0


x
ANSWER: Two rhp and one lhp.
The complete solution is at www.wiley.com/college/nise.
TryIt 6.3
Use the following MATLAB
statements to ﬁnd the
eigenvalues of the system
described in Skill-Assessment
Exercise 6.4.
A=[2
1
1
1
7
1
3
4
5];
Eig=eig(A)
320
Chapter 6
Stability

FIGURE 6.11
A FANUC
M-410iBTM has 4 axes of
motion. It is seen here
performing bag palletizing
Case Studies
Antenna Control: Stability Design via Gain
Antenna Control: Stability Design via Gain
This chapter has covered the elements of stability. We saw that stable systems have their
closed-loop poles in the left half of the s-plane. As the loop gain is changed, the locations
of the poles are also changed, creating the possibility that the poles can move into the right
half of the s-plane, which yields instability. Proper gain settings are essential for the
stability of closed-loop systems. The following case study demonstrates the proper setting
of the loop gain to ensure stability.
PROBLEM: You are given the antenna azimuth position control system shown on the
front endpapers, Conﬁguration 1. Find the range of preampliﬁer gain required to keep the
closed-loop system stable.
SOLUTION: The closed-loop transfer function was derived in the case studies in
Chapter 5 as
T s  
6:63K
s3  101:71s2  171s  6:63K
(6.36)
Using the denominator, create the Routh table shown as Table 6.19. The third row of
the table shows that a row of zeros occurs if K  2623. This value of K makes the
system marginally stable. Therefore, there will be no sign changes in the ﬁrst column
if 0 < K < 2623. We conclude that, for stability, 0 < K < 2623. An animation
PowerPoint presentation (PPT) demonstrating this system is available for instructors
at www.wiley.com/college/nise. See Antenna (Ch. 6).
TABLE 6.19
Routh table for antenna control case study
s3
1
171
s2
101.71
6.63K
s1
17392.41–6.63K
0
s0
6.63K
Case Studies
321

CHALLENGE: We now give you a problem to test your knowledge of this chapter’s
objectives. Refer to the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 2. Find the range of preampliﬁer gain required to keep the
closed-loop system stable.
UFSS Vehicle: Stability Design via Gain
UFSS Vehicle: Stability Design via Gain
For this case study, we return to the UFSS vehicle and study the stability of the pitch
control system, which is used to control depth. Speciﬁcally, we ﬁnd the range of pitch gain
that keeps the pitch control loop stable.
PROBLEM: The pitch control loop for the UFSS vehicle (Johnson, 1980) is shown on
the back endpapers. Let K2  1 and ﬁnd the range of K1 that ensures that the closed-loop
pitch control system is stable.
SOLUTION: The ﬁrst step is to reduce the pitch control system to a single, closed-loop
transfer function. The equivalent forward transfer function, Ges, is
Ges 
0:25K1s  0:435
s4  3:456s3  3:457s2  0:719s  0:0416
(6.37)
With unity feedback the closed-loop transfer function, Ts, is
Ts 
0:25K1s  0:435
s4  3:456s3  3:457s2  0:719  0:25K1s  0:0416  0:109K1
(6.38)
The denominator of Eq. (6.38) is now used to form the Routh table shown as Table 6.20.
Looking at the ﬁrst column, the s4 and s3 rows are positive. Thus, all elements of the
ﬁrst column must be positive for stability. For the ﬁrst column of the s2 row to be positive,
∞< K1 < 44:91. For the ﬁrst column of the s1 row to be positive, the numerator
must be positive, since the denominator is positive from the previous step. The solution to
the quadratic term in the numerator yields roots of K1  4:685 and 25.87. Thus, for a
positive numerator, 4:685 < K1 < 25:87. Finally, for the ﬁrst column of the s0 row to
be positive, 0:382 < K1 < ∞. Using all three conditions, stability will be ensured if
0:382 < K1 < 25:87.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. For the UFSS vehicle (Johnson, 1980) heading control system shown on the
back endpapers and introduced in the UFSS Case Study Challenge in Chapter 5, do the
following:
a. Find the range of heading gain that ensures the vehicle’s stability. Let K2  1
b. Repeat Part a using MATLAB.
TABLE 6.20
Routh table for UFSS case study
s4
1
3.457
0:0416  0:109K1
s3
3.456
0:719  0:25K1
s2
11:228  0:25K1
0:144  0:377K1
s1
0:0625K2
1  1:324K1  7:575
11:228  0:25K1
s0
0:144  0:377K1
Note: Some rows have been multiplied by a positive constant for convenience.
322
Chapter 6
Stability

Summary
In this chapter, we explored the concepts of system stability from both the classical and
the state-space viewpoints. We found that for linear systems, stability is based on a natural
response that decays to zero as time approaches inﬁnity. On the other hand, if the natural
responseincreaseswithoutbound,theforcedresponseisoverpoweredbythenaturalresponse,
and we lose control. This condition is known as instability. A third possibility exists: The
natural response may neither decay nor grow without bound but oscillate. In this case, the
system is said to be marginally stable.
We also used an alternative deﬁnition of stability when the natural response is not
explicitly available. This deﬁnition is based on the total response and says that a system is
stable if every bounded input yields a bounded output (BIBO) and unstable if any bounded
input yields an unbounded output.
Mathematically, stability for linear, time-invariant systems can be determined from
the location of the closed-loop poles:
 If the poles are only in the left half-plane, the system is stable.
 If any poles are in the right half-plane, the system is unstable.
 If the poles are on the jω-axis and in the left half-plane, the system is marginally stable as
long as the poles on the jω-axis are of unit multiplicity; it is unstable if there are any
multiple jω poles.
Unfortunately, although the open-loop poles may be known, we found that in higher-order
systems it is difﬁcult to ﬁnd the closed-loop poles without a computer program.
The Routh-Hurwitz criterion lets us ﬁnd how many poles are in each section of the
s-plane without giving us the coordinates of the poles. Just knowing that there are poles in
the right half-plane is enough to determine that a system is unstable. Under certain limited
conditions, when an even polynomial is present, the Routh table can be used to factor the
system’s characteristic equation.
Obtaining stability from the state-space representation of a system is based on the
same concept—the location of the roots of the characteristic equation. These roots are
equivalent to the eigenvalues of the system matrix and can be found by solving
detsI  A  0. Again, the Routh-Hurwitz criterion can be applied to this polynomial.
The point is that the state-space representation of a system need not be converted to a
transfer function in order to investigate stability. In the next chapter, we will look at steady-
state errors, the last of three important control system requirements we emphasize.
Review Questions
1. What part of the output response is responsible for determining the stability of a linear
system?
2. What happens to the response named in Question 1 that creates instability?
3. What would happen to a physical system that becomes unstable?
In our case studies, we calculated the ranges of gain to ensure stability. The student
should be aware that although these ranges yield stability, setting gain within these
limits may not yield the desired transient response or steady-state error characteristics.
In Chapters 9 and 11, we will explore design techniques, other than simple gain
adjustment, that yield more ﬂexibility in obtaining desired characteristics.
Review Questions
323

4. Why are marginally stable systems considered unstable under the BIBO deﬁnition of
stability?
5. Where do system poles have to be to ensure that a system is not unstable?
6. What does the Routh-Hurwitz criterion tell us?
7. Under what conditions would the Routh-Hurwitz criterion easily tell us the actual
location of the system’s closed-loop poles?
8. What causes a zero to show up only in the ﬁrst column of the Routh table?
9. What causes an entire row of zeros to show up in the Routh table?
10. Why do we sometimes multiply a row of a Routh table by a positive constant?
11. Why do we not multiply a row of a Routh table by a negative constant?
12. If a Routh table has two sign changes above the even polynomial and ﬁve sign
changes below the even polynomial, how many right-half-plane poles does the
system have?
13. Does the presence of an entire row of zeros always mean that the system has
jω poles?
14. If a seventh-order system has a row of zeros at the s3 row and two sign changes below
the s4 row, how many jω poles does the system have?
15. Is it true that the eigenvalues of the system matrix are the same as the closed-loop
poles?
16. How do we ﬁnd the eigenvalues?
Problems
1. Tell how many roots of the following polynomial are
in the right half-plane, in the left half-plane, and on the
jω-axis: [Section: 6.2]
Ps  s5  3s4  5s3  4s2  s  3
2. Tell how many roots of the following polynomial are in
the right half-plane, in the left half-plane, and on the
jω-axis: [Section: 6.3]
Ps  s5  6s3  5s2  8s  20
3. Using the Routh table, tell how many poles of the
following function are in the right half-plane, in the left
half-plane, and on the jω-axis. [Section: 6.3]
Ts 
s  8
s5  s4  3s3  3s2  3s  2
4. The
closed-loop
transfer
function
of
a
system
is [Section: 6.3]
Ts 
s3  2s2  7s  21
s5  2s4  3s3  6s2  2s  4
Determine how many closed-loop poles lie in the right
half-plane, in the left half-plane, and on the jω-axis.
5. How many poles are in the right half-plane, in the left
half-plane, and on the jω-axis for the open-loop system
of Figure P6.1? [Section: 6.3]
C(s)
s4 + 4s3 + 8s2 + 20s +15
s2 + 4s – 3
R(s)
FIGURE P6.1
6. How many poles are in the right half-plane, the left
half-plane, and on the jω-axis for the open-loop system
of Figure P6.2? [Section: 6.3]
C(s)
s6 + s5 – 6s4 + s2 + s – 6
–6
R(s)
FIGURE P6.2
7. Use MATLAB to ﬁnd the pole
locations for the system of
Problem 6.
8. Use MATLAB and the Symbolic
Math Toolbox to generate a
Routh table to solve Problem 3.
324
Chapter 6
Stability

9. Determine whether the unity feedback system of
Figure P6.3 is stable if [Section: 6.2]
Gs 
240
s  1s  2s  3s  4
R(s) +
E(s)
G(s)
C(s)
–
FIGURE P6.3
10. Use MATLAB to ﬁnd the pole
locations for the system of
Problem 9.
11. Consider the unity feedback system of Figure P6.3 with
Gs 
1
4s2s2  2
a. Using the Routh-Hurwitz criterion, ﬁnd the region
of the s-plane where the poles of the closed-loop
system are located.
b. Use MATLAB to verify your
answer and ﬁnd the poles of
T(s). Indicate whether this system
is stable, unstable, or marginally
stable. [Section: 6.3]
12. In the system of Figure P6.3, let
Gs 
Ks  1
ss  2s  3
Find the range of K for closed-loop stability. [Section: 6.4]
13. Given the unity feedback system of Figure P6.3 with
Gs 
84
ss7  5s6  12s5  25s4  45s3  50s2  82s  60
tell how many poles of the closed-loop transfer function
lie in the right half-plane, in the left half-plane, and on
the jω-axis. [Section: 6.3]
14. Using the Routh-Hurwitz criterion and the unity
feedback system of Figure P6.3 with
Gs 
1
2s4  5s3  s2  2s
tell
whether
or
not
the
closed-loop
system
is
stable. [Section: 6.2]
15. Given the unity feedback system of Figure P6.3 with
Gs 
8
ss6  2s5  s4  2s3  4s2  8s  4
tell how many closed-loop poles are located in the right
half-plane, in the left half-plane, and on the jω-axis.
[Section: 6.3]
16. Repeat Problem 15 using MATLAB.
17. Consider the following Routh table. Notice that the s5
row was originally all zeros. Tell how many roots of
the original polynomial were in the right half-plane, in
the left half-plane, and on the jω-axis. [Section: 6.3]
18. For the system of Figure P6.4, tell how many closed-
loop poles are located in the right half-plane, in the left
half-plane, and on the jω-axis. Notice that there is
positive feedback. [Section: 6.3]
+
18
R(s)
+
E(s)
C(s)
s5 + s4 – 7s3 – 7s2 – 18s
FIGURE P6.4
19. Using the Routh-Hurwitz criterion, tell how many
closed-loop poles of the system shown in Figure
P6.5 lie in the left half-plane, in the right half-plane,
and on the jω-axis. [Section: 6.3]
450
s4+3s3+10s2+30s+150
1
s
R(s) +
C(s)
–
FIGURE P6.5
20. Determine if the unity feedback system of Figure P6.3
with
Gs 
Ks2  1
s  1s  2
can be unstable. [Section: 6.4]
21. For the unity feedback system of Figure P6.3 with
Gs 
Ks  6
ss  1s  4
determine
the
range
of
K
to
ensure
stability.
[Section: 6.4]
s7
1
2
1
2
s6
1
2
1
2
s5
3
4
1
0
s4
1
1
3
0
s3
7
8
0
0
s2
15
21
0
0
s1
9
0
0
0
s0
21
0
0
0
Problems
325

22. In the system of Figure P6.3, let
Gs  Ks  a
ss  b
Find the range of K for closed-loop stability when:
[Section: 6.4]
a. a < 0;
b < 0
b. a < 0;
b > 0
c. a > 0;
b < 0
d. a > 0;
b > 0
23. For the unity feedback system of Figure P6.3 with
Gs  Ks  3s  5
s  2s  4
determine the range of K for stability. [Section: 6.4]
24. Repeat Problem 23 using MATLAB.
25. Use MATLAB and the Symbolic Math
Toolbox to generate a Routh table
in terms of K to solve Problem 23.
26. Find the range of K for stability for the unity feedback
system of Figure P6.3 with [Section: 6.4]
Gs  Ks  4s  4
s2  3
27. For the unity feedback system of Figure P6.3 with
Gs  Ks  1
s4s  4
ﬁnd the range of K for stability. [Section: 6.4]
28. Find the range of gain, K, to ensure stability in the unity
feedback system of Figure P6.3 with [Section: 6.4]
Gs  Ks  2s  4s  5
s2  12
29. Find the range of gain, K, to ensure stability in the unity
feedback system of Figure P6.3 with [Section: 6.4]
Gs 
Ks  2
s2  1s  4s  1
30. Using the Routh-Hurwitz criterion, ﬁnd the value of K
that will yield oscillations for the unity feedback system
of Figure P6.3 with [Section: 6.4]
Gs 
K
s  77s  27s  38
31. Use the Routh-Hurwitzcriteriontoﬁndtherange of K for
which the system of Figure P6.6 is stable. [Section: 6.4]
–
K(s2 – 2s + 2)
1
s2 + 2s + 4
R(s) +
E(s)
C(s)
FIGURE P6.6
32. Repeat Problem 31 for the system of Figure P6.7.
[Section: 6.4]
–
R(s) +
E(s)
C(s)
K(s + 1)
s(s + 2)(s + 3)
s + 5
s + 7
FIGURE P6.7
33. Given the unity feedback system of Figure P6.3 with
Gs 
Ks  4
ss  1:2s  2
ﬁnd the following: [Section: 6.4]
a. The range of K that keeps the system stable
b. The value of K that makes the system oscillate
c. The frequency of oscillation when K is set to the
value that makes the system oscillate
34. Repeat Problem 33 for [Section: 6.4]
Gs 
Ks  1s  2
s  2s2  2s  2
35. For the system shown in Figure P6.8, ﬁnd the value of
gain, K, that will make the system oscillate. Also, ﬁnd
the frequency of oscillation. [Section: 6.4]
K
R(s) +
–
1
s(s+4)(s+6)
+
C(s)
–
s
FIGURE P6.8
36. Given the unity feedback system of Figure P6.3 with
[Section: 6.4]
Gs 
Kss  2
s2  4s  8s  3
a. Find the range of K for stability.
b. Find the frequency of oscillation when the system is
marginally stable.
326
Chapter 6
Stability

37. Repeat Problem 36 using MATLAB.
38. For the unity feedback system of Figure P6.3 with
Gs 
Ks  2
s2  1s  4s  1
ﬁnd the range of K for which there will be only two
closed-loop, right-half-plane poles. [Section: 6.4]
39. For the unity feedback system of Figure P6.3 with
[Section: 6.4]
Gs 
K
s  13s  4
a. Find the range of K for stability.
b. Find the frequency of oscillation when the system is
marginally stable.
40. Given the unity feedback system of Figure P6.3 with
[Section: 6.4]
Gs 
K
s  49s2  4s  5
a. Find the range of K for stability.
b. Find the frequency of oscillation when the system is
marginally stable.
41. Using the Routh-Hurwitz criterion and the unity
feedback system of Figure P6.3 with [Section: 6.4]
Gs 
K
ss  1s  2s  6
a. Find the range of K for stability.
b. Find the value of K for marginal stability.
c. Find the actual location of the closed-loop poles
when the system is marginally stable.
42. Find the range of K to keep the system shown in
Figure P6.9 stable. [Section: 6.4]
–
s
K
s – 1
s2 + 2s + 1
R(s) +
E(s)
C(s)
FIGURE P6.9
43. Find the value of K in the system of Figure P6.10
that will place the closed-loop poles as shown.
[Section: 6.4]
K
+
+
+
jω
R(s)
s2
s2
C(s)
–
1
s + 3
s
1
σ
FIGURE P6.10
Closed-loop system with pole plot
44. The closed-loop transfer function of a system is
Ts 
s2  K1s  K2
s4  K1s3  K2s2  5s  1
Determine the range of K1 in order for the system to be
stable. What is the relationship between K1 and K2 for
stability? [Section: 6.4]
45. For the transfer function below, ﬁnd the constraints on
K1 and K2 such that the function will have only two
jω poles. [Section: 6.4]
Ts 
K1s  K2
s4  K1s3  s2  K2s  1
46. The transfer function relating the output engine fan
speed (rpm) to the input main burner fuel ﬂow rate
(lb/h) in a short takeoff and landing (STOL) ﬁghter
aircraft, ignoring the coupling between engine fan
speed and the pitch control command, is (Schierman,
1992) [Section: 6.4]
Gs  1:3s7  90:5s6  1970s5  15; 000s4  3120s3  41; 300s2  5000s  1840
s8  103s7  1180s6  4040s5  2150s4  8960s3  10; 600s2  1550s  415
a. Find how many poles are in the right half-plane, in
the left half-plane, and on the jω-axis.
b. Is this open-loop system stable?
47. An interval polynomial is of the form
Ps  a0  a1s  a2s2  a3s3  a4s4  a5s5  ∙∙∙
with its coefﬁcients belonging to intervals xi  ai  yi,
where xi, yi are prescribed constants. Kharitonov’s
theorem says that an interval polynomial has all its
roots in the left half-plane if each one of the following
Problems
327

four polynomials has its roots in the left half-plane
(Minichelli, 1989):
K1s  x0  x1s  y2s2  y3s3  x4s4  x5s5  y6s6  ∙∙∙
K2s  x0  y1s  y2s2  x3s3  x4s4  y5s5  y6s6  ∙∙∙
K3s  y0  x1s  x2s2  y3s3  y4s4  x5s5  x6s6  ∙∙∙
K4s  y0  y1s  x2s2  x3s3  y4s4  y5s5  x6s6  ∙∙∙
Use Kharitonov’s theorem and the Routh-Hurwitz
criteriontoﬁndifthefollowingpolynomialhasanyzeros
in the right half-plane.
Ps  a0  a1s  a2s2  a3s3
2  a0  4;
1  a1  2;
4  a2  6;
a3  1
48. A linearized model of a torque-controlled crane hoisting
a load with a ﬁxed rope length is
Ps  XTs
FTs  1
mT
s2  ω2
0
s2s2  aω2
0
where ω0 
ﬃﬃﬃﬃ
g
L ;
p
L = the rope length, mT= the mass of
the car, a = the combined rope and car mass, f T = the
force input applied to the car, and xT = the resulting
rope displacement (Marttinen, 1990). If the system is
controlled in a feedback conﬁguration by placing it in a
loop as shown in Figure P6.11, with K > 0; where will
the closed-loop poles be located?
K
P(s)
+
–
C(s)
R(s)
FIGURE P6.11
49. The read/write head assembly arm of a computer hard
disk drive (HDD) can be modeled as a rigid rotating body
with inertia Ib: Its dynamics can be described with the
transfer function
Ps  Xs
Fs 
1
Ibs2
where X(s) is the displacement of the read/write head
and F(s) is the applied force (Yan, 2003). Show that if
the HDD is controlled in the conﬁguration shown in
Figure P6.11, the arm will oscillate and cannot be
positioned with any precision over a HDD track. Find
the oscillation frequency.
50. A system is represented in state space as
_x 
0
1
3
2
2
4
1
4
3
2
64
3
75x 
0
1
0
2
64
3
75u
y 
1
1
0


x
Determine how many eigenvalues are in the right
half-plane, in the left half-plane, and on the jω-axis.
[Section: 6.5]
51. Use MATLAB to ﬁnd the eigenvalues
of the following system:
_x 
0
1
0
0
1
4
1
1
8
2
64
3
75x 
0
0
0
2
64
3
75u
y 
0
0
1


x
52. The following system in state space
represents the forward path of a unity
feedback system. Use the Routh-Hurwitz criterion
to determine if the closed-loop system is stable.
[Section: 6.5]
_x 
0
1
0
0
1
2
5
4
3
2
64
3
75x 
0
1
0
2
64
3
75u
y 
1
0
1


x
53. Repeat Problem 52 using MATLAB.
54. A Butterworth polynomial is of the form
Bns  1  1n
s
ωc

2n
; n > 0
Use the Routh-Hurwitz criteria to ﬁnd the zeros of a
Butterworth polynomial for:
a.
n  1;
b.
n  2
55. An inverted pendulum, mounted on a motor-driven cart
was presented in Chapter 3, Problem 30. The system’s
state-space model was linearized around a stationary
point, x0 = 0, corresponding to the pendulum point-
mass, m, being in the upright position at t = 0, when
the force applied to the cart u0 = 0 (Prasad, 2012). We’ll
modify that model here to have two output variables: the
pendulumanglerelativetothey-axis,θ,andthehorizontal
position of the cart, x. The output equation becomes:
y 
θ
x

	
 Cx 
1
0
0
0
0
0
1
0

	
θ
_θ
x
_x
2
6664
3
7775
Using MATLAB, ﬁnd out how many
eigenvalues are in the right
half-plane, in the left half-plane, and
on the jω-axis. What does that tell us
about the stability of that unit? [Sec-
tion: 6.5]
328
Chapter 6
Stability

DESIGN PROBLEMS
DESIGN PROBLEMS
56. A model for an airplane’s pitch loop is shown in
Figure P6.12. Find the range of gain, K, that will keep
the system stable. Can the system ever be unstable for
positive values of K?
+
Gyro
1
s + 10
K(s + 1)
(s + 4.85)
Commanded
pitch angle
Controller
Aircraft dynamics
Pitch angle
–
s2 + 0.6s + 9
FIGURE P6.12
Aircraft pitch loop model
57. A common application of control systems is in regulating
thetemperatureofachemicalprocess(FigureP6.13).The
ﬂowof a chemicalreactantto aprocess iscontrolledbyan
actuator and valve.The reactant causesthetemperature in
the vat to change. This temperature is sensed and com-
pared to a desired set-point temperature in a closed loop,
where the ﬂow of reactant is adjusted to yield the desired
temperature. In Chapter 9, we will learn how a PID
controller is used to improve the performance of such
process control systems. Figure P6.13 shows the control
systempriortotheadditionofthePIDcontroller.ThePID
controller is replaced by the shaded box with a gain of
unity. For this system, prior to the design of the PID
controller, ﬁnd the range of ampliﬁer gain, K, to keep the
system stable.
Desired
temperature
set point +
–
Future PID
controller
Amplifier
Actuator
and
valve
Chemical
heat
process
Actual
temperature
K
1
0.7
0.1
Temperature
sensor
s + 0.5
s2 + 1.7s + 0.3
s + 0.1
1
FIGURE P6.13
Block diagram of a chemical process control
system
58. A transfer function from indoor radiator power, _Qs; to
room temperature, T(s), in an 11 m2 room is
Ps  Ts
_Qs 
1  106s2  1:314  109s  2:66  1013
s3  0:00163s2  5:272  107s  3:538  1011
where _Q is in watts and T is in °C (Thomas, 2005). The
room’s temperature will be controlled by embedding it
in a closed loop, such as that of Figure P6.11. Find the
range of K for closed-loop stability.
59. During vertical spindle surface grinding, adjustments are
made on a multi-axis computer numerical control (CNC)
machine by measuring the applied force with a dyna-
mometer and applying appropriate corrections. This
feedback force control results in higher homogeneity
and better tolerances in the resulting ﬁnished product.
In a speciﬁc experiment with an extremely high feed
rate, the transfer function from the desired depth of cut
(DOC) to applied force was
Fs
DOCs 
KC
1 
KC
ms2  bs  k  KC
Kf
1
Ts  1


where k  2:1  104 N=m; b  0:78 Ns=m; m  1:2 
104 kg; KC  1:5  104 N=mm; and T  0:004s: The
parameter Kf is varied to adjust the system. Find
the range of Kf under which the system is stable
(Hekman, 1999).
60. In order to obtain a low-cost lithium-ion battery charger,
the feedback loop of Figure P6.3 is used, where
Gs  GcsPs. The following transfer functions
have been derived for G(s) (Tsang, 2009):
Ps  R1R2C1C2s2  R1C1  R2C1  R2C2

s  1
C1 1  R2C2

s
Gcs  Kp  KI
s
If R1 0:15Ω;R2 0:44Ω;C1 7200F; and C2 170F,
use the Routh-Hurwitz criteria to ﬁnd the range of
positive KP and KI for which the system is closed-loop
stable.
61. Figure P6.14 is a simpliﬁedand linearized block diagram
of a cascade control system, which is used to control
water level in a steam generator of a nuclear power plant
(Wang, 2009).
In this system, the level controller, GLC(s), is the
master controller and the feed-water ﬂow controller,
GFC(s), is the slave controller. Using mass balance
equations, the water level would ordinarily be regarded
as a simple integration process of water ﬂow. In a steam
generator, however, steam ﬂow rate and the cooling
effect of feed-water change the dynamics of that process.
Taking the latter into account and ignoring the much-less
pronounced impact of changes in steam ﬂow rate, a ﬁrst-
order lag plus time delay is introduced into the transfer
function, Gfw(s), relating the controlled level, C(s), to
feed-water ﬂow rate, Qw(s) as follows:
Gf ws  Cs
Qws 
K1eτ1s
sT1s  1 
2e2s
s25s  1

2
s25s  12s2  2s  1
where K1  2 is the process gain, τ1  2 is the pure time
delay, and T1  25 is the steam generator’s time
Problems
329

constant. (The expression eτ1s represents a time delay.
This function can be represented by what is known as a
Pade approximation. This approximation can take on
many increasingly complicated forms, depending upon
the degree of accuracy required. Here we use the Pade
approximation, ex 
1
1  x  x2
2!
; and speciﬁc numeri-
cal values for the considered steam generator.)
The dynamic characteristics of the control
valve are approximated by the transfer function
Gvs  Qws
Ys 
Kv
Tvs  1 
1
3s  1
where Kv is the valve gain and Tv is its time constant.
Given that: GFCs  KPFC  KDFCs  0:5  2s
and
GLCs  KPLC  KDLCs  0:5  Ks,
use
the
Routh-Hurwitz criterion to ﬁnd the range of the level
controller’s derivative gain, KDLC  K > 0, that will
keep the system stable.
62. Look-ahead information can be used to automatically
steer a bicycle in a closed-loop conﬁguration. A line is
drawn in the middle of the lane to be followed, and an
arbitrary point is chosen in the vehicle’s longitudinal
axis. A look-ahead offset is calculated by measuring
the distance between the look-ahead point and the
reference line and is used by the system to correct the
vehicle’s trajectory. A linearized model of a particular
bicycle traveling on a straight-line path at a ﬁxed
longitudinal speed is
_V
_r
_ψ
_Yg
2
6664
3
7775 
11:7
6:8
61:6K
7:7K
 3:5
24
66:9K
8:4K
0
1
0
0
1
0
10
0
2
6664
3
7775
V
r
ψ
Yg
2
6664
3
7775
In this model, V= bicycle’s lateral velocity, r= bicycle’s
yaw velocity, ψ = bicycle’s yaw acceleration, and Yg 
bicycle’s center of gravity coordinate on the y-axis. K is
a controller parameter to be chosen by the designer
(Özgüner, 1995). Use the Routh-Hurwitz citerion to ﬁnd
the range of K for which the system is closed-loop stable.
63. Figure P5.42 Shows the block diagram of an Automatic
Voltage Regulator (Gozde, 2011). Assume in this diagram
the following parameter values: Ka = 10, Ta = 0.1, Ke = 1,
Te = 0.4, Kg = 1, Tg = 1, Ks = 1, and Ts = 0.001. Also
assume that the PID transfer function is substituted by
a simple integrator, namely GPIDs  K
s . Find the range
of K for which the system is closed-loop stable.
64. It has been shown (Pounds, 2011) that an unloaded
UAV helicopter is closed-loop stable and will have a
characteristic equation given by
s3 
mgh
I
q2  kkd  q1g


s2
 k mgh
I
s  mgh
I
kki  q1  0
wherem isthe massofthehelicopter,gisthegravitational
constant,I istherotationalinertiaofthehelicopter, histhe
height of the rotor plane above the center of gravity,
q1 and q2 are stabilizer ﬂapping parameters, k, ki, and kd
are controller parameters; all constants > 0. The UAV is
supposed to pick up a payload; when this occurs, the
mass, height, and inertia change to m´, h´, and I´, respec-
tively, all still > 0. Show that the helicopter will remain
stable as long as
m´gh´
I´
> q1  kki  q1gk
kq2  kkd
65. Figure P6.15 shows the model of the dynamics of an
economic system (Wingrove, 2012). In this diagram x
represents the rate of growth in real Gross National
Product (GNP), x0 the long-term trend (dc value) of the
GNP, Δx the change over the long-term trend of the
GNP, rx the real and psychological disturbance inputs
that affect the economy, rm the random monetary inputs,
and Δu ﬂuctuations in unemployment rate. The diagram
has two feedback loops: one through Friedman’s model
in which the economy dynamics are approximated by
Fs 
Kxs
s
ωn

2
 2ξ
s
ωn


 1
and a second loop through Okun’s law that relates the
GNP to unemployment changes. Assuming the following
parametervalues:Kx2years,ωn1:5rad=year, ζ0:8,
Ku0:4 and Gx0:4. Find the range of Gu for closed-
loop stability.
GFC (s)
GLC (s)
GV (s)
_
+
Qw (s)
Gfw (s)
+
_
Y (s)
X (s)
Controlled
level
 C (s)
Set point 
R(s)
FIGURE P6.14
330
Chapter 6
Stability

66. The system shown in Figure P6.16 has G1s 
1=ss  2 s  4. Find the following:
K1
+
–
+
–
G1(s)
E(s)
R(s)
C(s)
K2 s
FIGURE P6.16
a. The value of K2 for which the inner loop will have
two equal negative real poles and the associated
range of K1 for system stability.
b. The value of K1 at which the system oscillates and
the associated frequency of oscillation.
c. The gain K1 at which a real closed-loop pole is at
s = –5. Can the step response, c(t), be approximated
by a second-order, underdamped response in this
case? Why or why not?
d. If the response in Part d can be approximated as a
second-order response, ﬁnd the %OS and settling
time, Ts, when the input is a unit step, r(t) = u(t).
67. A drive system with an elastically coupled load was
presented in Problems 71 and 67 in Chapters 4 and 5,
respectively (Thomsen, 2011). That drive was shown in
Figure P5.43 as the controlled unit in a feedback control
system, where ΩL(s) = the load speed and Ωr(s) = the
desired (reference) speed. If the controller transfer
function is GCs  Kp  KI
s ; while all of the other
parameters and transfer functions are the same as in
Problem 67 in Chapter 5, ﬁnd the range of KP for stability
of the system if KI = 0.1.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
68. Control of HIV/AIDS. The HIV infection linearized
modeldevelopedinProblem84,Chapter4,canbeshown
to have the transfer function
Ps  Ys
U1s 
520s  10:3844
s3  2:6817s2  0:11s  0:0126
G(s)
P(s)
+
–
Virus count change, Y(s)
Desired virus
count change
U1(s)
FIGURE P6.17
It is desired to develop a policy for drug delivery to
maintain the virus count at prescribed levels. For the
purpose of obtaining an appropriate u1t; feedback will
be used as shown in Figure P6.17 (Craig, 2004).
As a ﬁrst approach, consider Gs  K; a constant
to be selected. Use the Routh-Hurwitz criteria to ﬁnd the
range of K for which the system is closed-loop stable.
69. Hybrid vehicle. Figure P6.18 shows the HEV system
presented in Chapter 5, where parameter values have
Motor 
angular
speed 
 
_
_
0.1
2
Friction 
torque 
Tf (s)
UC(s)
+
1.8
Armature 
current 
Ia(s)
Eb(s)
Back emf 
Vehicle
speed
V(s)
4.875
0.3
Speed 
error 
Ev(s)
0.5
0.0443
s
s
K p
40
+
s
s
6
10 +
+
_
_
Torque
controller
& power
amplifier
Ref.
signal
Rv(s)
Feedback
speed signal
KSS Ω (s)
7.226s
1
TL (s)
+
Feedback
current signal
KCS Ia(s)
Ua(s)
 +
Speed
controller
Current sensor 
sensitivity 
Speed sensor 
sensitivity 
0.6154
Motive
torque
T(s)
_
1
Armature 
resistance
Ra(s)
Ω (s)
FIGURE P6.18
Friedman’s model
Okun’s law
F
+
+
+
rm
rx
xo
+
+
+
+
Gx
Gu
x
Δu
Δx
Ku
s
–
FIGURE P6.15
Problems
331

been substituted. It is assumed here that the speed
controller has a proportional gain, Kp, to be adjusted.
Use the Routh-Hurwitz stability method to ﬁnd the range
of positive Kp for which the system is closed-loop stable
(Graebe, 1995).
70. Parabolic trough collector. The ﬂuid temperature of a
parabolic trough collector (Camacho, 2012) will be
controlled by using a unity feedback structure as shown
in Figure P6.11. Assume the open-loop plant transfer
function is given by
Ps 
137:2  106
s2  0:0224s  196  106 e39s
Use the Routh-Hurwitz criteria to ﬁnd the range of
gain K that will result in a closed-loop stable system.
Note: Pure time-delay dynamics, such as the one in the
transfer function of the parabolic trough collector,
cannot be treated directly using the Routh-Hurwitz
criterion because it is represented by a nonrational
factor. However, a Padé approximation can be used for
the nonrational component. The Padé approximation
was introduced in Problem 6.61, but it can appear in
different forms. Here, it is suggested you use a ﬁrst-order
approximation of the form
esT 
1  T
2 s
1  T
2 s
Cyber Exploration Laboratory
Experiment 6.1
Objectives
To verify the effect of pole location upon stability. To verify the effect
upon stability of loop gain in a negative feedback system.
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1. Find the equivalent transfer function of the negative feedback system of Figure P6.19 if
Gs 
K
ss  22
and
Hs  1
2. For the system of Prelab 1, ﬁnd two values of gain that will yield closed-loop,
overdamped, second-order poles. Repeat for underdamped poles.
3. For the system of Prelab 1, ﬁnd the value of gain, K, that will make the system critically
damped.
4. For the system of Prelab 1, ﬁnd the value of gain, K, that will make the system
marginally stable. Also, ﬁnd the frequency of oscillation at that value of K that makes
the system marginally stable.
5. For each of Prelab 2 through 4, plot on one graph the pole locations for each case and
write the corresponding value of gain, K, at each pole.
Lab
1. Using Simulink, set up the negative feedback system of Prelab 1. Plot the step response
of the system at each value of gain calculated to yield overdamped, underdamped,
critically damped, and marginally stable responses.
2. Plot the step responses for two values of gain, K, above that calculated to yield marginal
stability.
3. At the output of the negative feedback system, cascade the transfer function
G1s 
1
s2  4
R(s) +
C(s)
G(s)
H(s)
–
FIGURE P6.19
332
Chapter 6
Stability

Bibliography
Ballard, R. D. The Riddle of the Lusitania. National Geographic, April 1994, National Geographic
Society, Washington, D.C., 1994, pp. 68–85. Also, ﬁgure caption source for Figure 6.9.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria, IEEE Transactions on Education, vol.
47, no. 1, February 2004, pp. 65–73.
D’Azzo, J., and Houpis, C. H. Linear Control System Analysis and Design, 3d ed. McGraw-Hill,
New York, 1988.
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989.
FANUC Robotics North America, Inc. Figure caption source for Figure 6.11.
Gozde, H., and Taplamacioglu, M. C. Comparative performance analysis of artiﬁcial bee colony
algorithm for automatic voltage regulator (AVR) system. Journal of the Franklin Institute, vol. 348,
pp. 1927–1946, 2011.
Graebe, S. F., Goodwin, G. C., and Elsley, G. Control Design and Implementation in Continuous Steel
Casting. IEEE Control Systems, August 1995, pp. 64–71.
Hekman, K. A., and Liang, S. Y. Compliance Feedback Control for Part Parallelism in Grinding.
International Journal of Manufacturing Technology, vol. 15, 1999, pp. 64–69.
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed.
Saunders College Publishing, New York, 1989.
Johnson, H., et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980.
Set the gain, K, at a value below that calculated for marginal stability and plot the step
response. Repeat for K calculated to yield marginal stability.
Postlab
1. From your plots, discuss the conditions that lead to unstable responses.
2. Discuss the effect of gain upon the nature of the step response of a closed-loop system.
Experiment 6.2
Objective
To use the LabVIEW Control Design and Simulation Module for stability
analysis.
Minimum Required Software Package
LabVIEW with the Control Design and
Simulation Module
Prelab
1. Select six transfer functions of various orders and use Routh-Hurwitz to determine their
stability.
Lab
1. Create a LabVIEW VI that receives the order and the coefﬁcients of the characteristic
equation and outputs the location of the poles and information regarding stability.
Postlab
1. Verify the stability of the systems from your Prelab.
Bibliography
333

Martinnen, A., Virkkunen, J., and Salminen, R. T. Control Study with Pilot Crane. IEEE Transactions
on Education, vol. 33, no. 3, August 1990, pp. 298–305.
Minnichelli, R. J., Anagnost, J. J., and Desoer, C. A. An Elementary Proof of Kharitonov’s Stability
Theorem with Extensions. IEEE Transactions on Automatic Control, vol. 34, 1989, pp. 995–998.
Özgüner, Ű., Űnyelioglu, K. A., and Haptipoĝlu, C. An Analytical Study of Vehicle Steering Control.
Proceedings of the 4th IEEE Conference Control Applications, 1995, pp. 125–130.
Phillips, C. L., and Harbor, R. D. Feedback Control Systems, 2d ed. Prentice Hall, Upper Saddle River,
NJ, 1991.
Pounds, P. E. I., Bersak, D. R., and Dollar, A . M. Grasping From the Air: Hovering Capture and Load
Stability. 2011 IEEE International Conference on Robotics and Automation, Shanghai International
Conference Center, May 9–13, Shanghai, China, 2011.
Prasad, L., Tyagi, B., and Gupta, H. Modeling & Simulation for Optimal Control of Nonlinear Inverted
Pendulum Dynamical System using PID Controller & LQR. IEEE Computer Society Sixth Asia
Modeling Symposium, 2012, pp. 138–143.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. 4th International Symposium on Applied Computational Intelligence and Informatics.
IEEE. 2007, pp. 157–162.
Routh, E. J. Dynamics of a System of Rigid Bodies, 6th ed. Macmillan, London, 1905.
Schierman, J. D., and Schmidt, D. K. Analysis of Airframe and Engine Control Interactions and
Integrated Flight/Propulsion Control. Journal of Guidance, Control, and Dynamics, vol. 15, no. 6,
November–December 1992, pp. 1388–1396.
Thomas, B., Soleimani-Mosheni, M., and Fahlén, P. Feed-Forward in Temperature Control of
Buildings. Energy and Buildings, vol. 37, 2005, pp. 755–761.
Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-Based State Space Control, and Model-
Based Predictive Control for Drive Systems With Elastically Coupled Loads — A Comparative
Study. IEEE Transactions on Industrial Electronics, vol. 58, no. 8, August 2011, pp. 3647–3657.
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New York, 1968.
Tsang, K. M., and Chan, W. L. A Simple and Low-cost Charger for Lithium-Ion Batteries. Journal of
Power Sources, vol. 191, 2009, pp. 633–635.
Wang, X.-K., Yang, X.-H., Liu, G., and Qian, H. Adaptive Neuro-Fuzzy Inference System PID
Controller for Steam Generator Water Level of Nuclear Power Plant. Procedings of the Eighth
International Conference on Machine Learning and Cybernetics, 2009, pp. 567–572.
Wingrove, R. C., and Da, R. E. Classical Linear-Control Analysis Applied to Business-Cycle
Dynamics and Stability. Comput. Econ. vol. 39, Springer, 2012, pp. 77—98.
Yan, T., and Lin, R. Experimental Modeling and Compensation of Pivot Nonlinearly in Hard Disk
Drives. IEEE Transactions on Magnetics, vol. 39, 2003, pp. 1064–1069.
334
Chapter 6
Stability

Steady-State Errors
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Find the steady-state error for a unity feedback system (Sections 7.1–7.2)
• Specify a system’s steady-state error performance (Section 7.3)
• Design the gain of a closed-loop system to meet a steady-state error speciﬁcation
(Section 7.4)
• Find the steady-state error for disturbance inputs (Section 7.5)
• Find the steady-state error for nonunity feedback systems (Section 7.6)
• Find the steady-state error sensitivity to parameter changes (Section 7.7)
• Find the steady-state error for systems represented in state space (Section 7.8)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to ﬁnd the preampliﬁer gain to meet steady-state
error performance speciﬁcations.
• Given a video laser disc recorder, you will be able to ﬁnd the gain required to
permit the system to record on a warped disc.

7
335

7.1 Introduction
In Chapter 1, we saw that control systems analysis and design focus on three speciﬁcations:
(1) transient response, (2) stability, and (3) steady-state errors, taking into account the
robustness of the design along with economic and social considerations. Elements of
transient analysis were derived in Chapter 4 for ﬁrst- and second-order systems. These
concepts are revisited in Chapter 8, where they are extended to higher-order systems.
Stability was covered in Chapter 6, where we saw that forced responses were overpowered
by natural responses that increase without bound if the system is unstable. Now we are ready
to examine steady-state errors. We deﬁne the errors and derive methods of controlling them.
As we progress, we ﬁnd that control system design entails trade-offs between desired
transient response, steady-state error, and the requirement that the system be stable.
Deﬁnition and Test Inputs
Steady-state error is the difference between the input and the output for a prescribed test
input as t ®∞. Test inputs used for steady-state error analysis and design are summarized
in Table 7.1.
In order to explain how these test signals are used, let us assume a position control
system, where the output position follows the input commanded position. Step inputs
represent constant position and thus are useful in determining the ability of the control
system to position itself with respect to a stationary target, such as a satellite in geostationary
orbit (see Figure 7.1). An antenna position control is an example of a system that can be
tested for accuracy using step inputs.
Ramp inputs represent constant-velocity inputs to a position control system by their
linearly increasing amplitude. These waveforms can be used to test a system’s ability to follow
a linearly increasing input or, equivalently, to track a constant-velocity target. For example, a
position control system that tracks a satellite that moves across the sky at a constant angular
velocity, as shown in Figure 7.1, would be tested with a ramp input to evaluate the steady-state
error between the satellite’s angular position and that of the control system.
TABLE 7.1
Test waveforms for evaluating steady-state errors of position control systems
Waveform
Name
Physical interpretation
Time function
Laplace transform
r(t)
t
Step
Constant position
1
1
s
r(t)
t
Ramp
Constant velocity
t
1
s2
r(t)
t
Parabola
Constant acceleration
1
2 t2
1
s3
336
Chapter 7
Steady-State Errors

Finally, parabolas, whose second derivatives are constant, represent constant-
acceleration inputs to position control systems and can be used to represent accelerating
targets, such as the missile in Figure 7.1, to determine the steady-state error performance.
Application to Stable Systems
Since we are concerned with the difference between the input and the output of a feedback
control system after the steady state has been reached, our discussion is limited to stable
systems, where the natural response approaches zero as t ® ∞. Unstable systems represent
loss of control in the steady state and are not acceptable for use at all. The expressions we
derive to calculate the steady-state error can be applied erroneously to an unstable system.
Thus, the engineer must check the system for stability while performing steady-state error
analysis and design. However, in order to focus on the topic, we assume that all the systems
in examples and problems in this chapter are stable. For practice, you may want to test some
of the systems for stability.
Evaluating Steady-State Errors
Let us examine the concept of steady-state errors. In Figure 7.2(a) a step input and two
possible outputs are shown. Output 1 has zero steady-state error, and Output 2 has a ﬁnite
steady-state error, e2 ∞

. A similar example is shown in Figure 7.2(b), where a ramp input is
compared with Output 1, which has zero steady-state error, and Output 2, which has a ﬁnite
steady-state error, e2 ∞

. Errors are measured vertically between the Input and Output 2
after the transients have died down. For the ramp input another possibility exists. If the
output’s slope is different from that of the input, then Output 3, shown in Figure 7.2(b),
results. Here the steady-state error is inﬁnite as measured vertically between the Input and
Output 3 after the transients have died down, and t approaches inﬁnity.
Let us now look at the error from the perspective of the most general block diagram.
Since the error is the difference between the input and the output of a system, we assume a
closed-loop transfer function, T(s), and form the error, E(s), by taking the difference
between the input and the output, as shown in Figure 7.3(a). Here we are interested in
the steady-state, or ﬁnal, value of e(t). For unity feedback systems, E(s) appears as shown
in Figure 7.3(b). In this chapter, we study and derive expressions for the steady-state
error for unity feedback systems ﬁrst and then expand to nonunity feedback systems.
Tracking system
Satellite orbiting at
constant velocity
Accelerating
missile
Satellite in geostationary orbit
FIGURE 7.1
Test inputs for
steady-state error analysis and
design vary with target type
7.1 Introduction
337

Before we begin our study of steady-state errors for unity feedback systems, let us look
at the sources of the errors with which we deal.
Sources of Steady-State Error
Many steady-state errors in control systems arise from nonlinear sources, such as
backlash in gears or a motor that will not move unless the input voltage exceeds a
threshold. Nonlinear behavior as a source of steady-state errors, although a viable topic
for study is beyond the scope of a text on linear control systems. The steady-state errors
we study here are errors that arise from the conﬁguration of the system itself and the type
of applied input.
For example, look at the system of Figure 7.4(a), where R(s) is the input, C(s) is
the output, and E s   R s   C s  is the error. Consider a step input. In the steady state,
if c(t) equals r(t), e(t) will be zero. But with a pure gain, K, the error, e(t), cannot be zero
if c(t) is to be ﬁnite and nonzero. Thus, by virtue of the conﬁguration of the system
(a pure gain of K in the forward path), an error must exist. If we call csteady-state the
Output 1
Output 2
Input
c(t)
e2(∞)
Output 1
e2(∞)
Output 3
(a)
(b)
c(t)
Time
Time
Output 2
Input
FIGURE 7.2
Steady-state
error: a. step input; b. ramp
input
R(s)
T(s)
C(s)
E(s)
+
–
R(s)
G(s)
E(s)
C(s)
+
–
(b)
(a)
FIGURE 7.3
Closed-loop
control system error: a. general
representation; b. representation
for unity feedback systems
338
Chapter 7
Steady-State Errors

steady-state value of the output and esteady-state the steady-state value of the error, then
csteady-state  Kesteady-state, or
esteady-state  1
K csteady-state
(7.1)
Thus, the larger the value of K, the smaller the value of esteady-state would have to be to yield
a similar value of csteady-state. The conclusion we can draw is that with a pure gain in the
forward path, there will always be a steady-state error for a step input. This error
diminishes as the value of K increases.
If the forward-path gain is replaced by an integrator, as shown in Figure 7.4(b), there
will be zero error in the steady state for a step input. The reasoning is as follows: As c(t)
increases, e(t) will decrease, since e t   r t   c t . This decrease will continue until there is
zero error, but there will still be a value for c(t) since an integrator can have a constant output
without any input. For example, a motor can be represented simply as an integrator. A
voltage applied to the motor will cause rotation. When the applied voltage is removed, the
motor will stop and remain at its present output position. Since it does not return to its initial
position, we have an angular displacement output without an input to the motor. Therefore, a
system similar to Figure 7.4(b), which uses a motor in the forward path, can have zero
steady-state error for a step input.
We have examined two cases qualitatively to show how a system can be expected to
exhibit various steady-state error characteristics, depending upon the system conﬁguration.
We now formalize the concepts and derive the relationships between the steady-state errors
and the system conﬁguration generating these errors.
7.2 Steady-State Error for Unity Feedback Systems
Steady-state error can be calculated from a system’s closed-loop transfer function, T(s), or
the open-loop transfer function, G(s), for unity feedback systems. We begin by deriving
the system’s steady-state error in terms of the closed-loop transfer function, T(s), in order
to introduce the subject and the deﬁnitions. Next we obtain insight into the factors
affecting steady-state error by using the open-loop transfer function, G(s), in unity
feedback systems for our calculations. Later in the chapter we generalize this discussion
to nonunity feedback systems.
Steady-State Error in Terms of T (s )
Consider Figure 7.3(a). To ﬁnd E(s), the error between the input, R(s), and the output, C(s),
we write
E s   R s   C s 
(7.2)
But
C s   R s T s 
(7.3)
Substituting Eq. (7.3) into Eq. (7.2), simplifying, and solving for E(s) yields
E s   R s 1  T s 
(7.4)
+
–
R(s)
E(s)
C(s)
K
+
–
R(s)
E(s)
C(s)
K
s
(a)
(b)
FIGURE 7.4
System with
a. ﬁnite steady-state error for a
step input; b. zero steady-state
error for step input
7.2 Steady-State Error for Unity Feedback Systems
339

Although Eq. (7.4) allows us to solve for e(t) at any time, t, we are interested in the ﬁnal
value of the error, e ∞

. Applying the ﬁnal value theorem,1 which allows us to use the
ﬁnal value of e(t) without taking the inverse Laplace transform of E(s), and then letting t
approach inﬁnity, we obtain
e ∞

  lim
t®∞e t   lim
s®0 sE s 
(7.5)2
Substituting Eq. (7.4) into Eq. (7.5) yields
e ∞

  lim
s®0 sR s 1  T s 
(7.6)
Let us look at an example.
Steady-State Error in Terms of G (s)
Many times we have the system conﬁgured as a unity feedback system with a forward
transfer function, G(s). Although we can ﬁnd the closed-loop transfer function, T(s), and
Example 7.1
Steady-State Error in Terms of T(s)
Steady-State Error in Terms of T(s)
PROBLEM: Find the steady-state error for the system of Figure 7.3(a) if T s  
5= s2  7s  10


and the input is a unit step.
SOLUTION: From the problem statement, R s   1=s and T s   5= s2  7s  10


.
Substituting into Eq. (7.4) yields
E s  
s2  7s  5
s s2  7s  10


(7.7)
Since T(s) is stable and, subsequently, E(s) does not have right–half-plane poles or jω
poles other than at the origin, we can apply the ﬁnal value theorem. Substituting Eq. (7.7)
into Eq. (7.5) gives e ∞

  1=2.
1 The ﬁnal value theorem is derived from the Laplace transform of the derivative. Thus,
ℒ_f t  
Z ∞
0
_f t estdt  sF s   f 0


As
s ® 0;
Z ∞
0
_f t dt  f ∞

  f 0

  lim
s®0 sF s   f 0


or
f ∞

  lim
s®0 sF s 
For ﬁnite steady-state errors, the ﬁnal value theorem is valid only if F(s) has poles only in the left half-plane and, at
most, one pole at the origin. However, correct results that yield steady-state errors that are inﬁnite can be obtained if
F(s) has more than one pole at the origin (see D’Azzo and Houpis, 1988). If F(s) has poles in the right half-plane or
poles on the imaginary axis other than at the origin, the ﬁnal value theorem is invalid.
2 Valid only if (1) E(s) has poles only in the left half-plane and at the origin, and (2) the closed-loop transfer
function, T(s), is stable. Notice that by using Eq. (7.5), numerical results can be obtained for unstable systems. These
results, however, are meaningless.
340
Chapter 7
Steady-State Errors

then proceed as in the previous subsection, we ﬁnd more insight for analysis and design by
expressing the steady-state error in terms of G(s) rather than T(s).
Consider the feedback control system shown in Figure 7.3(b). Since the feedback,
H(s), equals 1, the system has unity feedback. The implication is that E(s) is actually the
error between the input, R(s), and the output, C(s). Thus, if we solve for E(s), we will have an
expression for the error. We will then apply the ﬁnal value theorem, Item 11 in Table 2.2,
to evaluate the steady-state error.
Writing E(s) from Figure 7.3(b), we obtain
E s   R s   C s 
(7.8)
But
C s   E s G s 
(7.9)
Finally, substituting Eq. (7.9) into Eq. (7.8) and solving for E(s) yields
E s  
R s 
1  G s 
(7.10)
We now apply the ﬁnal value theorem, Eq. (7.5). At this point in a numerical
calculation, we must check to see whether the closed-loop system is stable, using, for
example, the Routh-Hurwitz criterion. For now, though, assume that the closed-loop system
is stable and substitute Eq. (7.10) into Eq. (7.5), obtaining
e ∞

  lim
s®0
sR s 
1  G s 
(7.11)
Equation (7.11) allows us to calculate the steady-state error, e ∞

, given the input,
R(s), and the system, G(s). We now substitute several inputs for R(s) and then draw conclusions
about the relationships that exist between the open-loop system, G(s), and the nature of the
steady-state error, e ∞

.
The three test signals we use to establish speciﬁcations for a control system’s
steady-state error characteristics are shown in Table 7.1. Let us take each input and evaluate
its effect on the steady-state error by using Eq. (7.11).
Step Input. Using Eq. (7.11) with R s   1=s, we ﬁnd
e ∞

  estep ∞

  lim
s®0
s 1=s


1  G s  
1
1  lim
s®0 G s 
(7.12)
The term
lim
s®0 G s 
is the dc gain of the forward transfer function, since s, the frequency variable, is approaching
zero. In order to have zero steady-state error,
lim
s®0 G s   ∞
(7.13)
Hence, to satisfy Eq. (7.13), G(s) must take on the following form:
G s  
s  z1

 s  z2

 ∙∙∙
sn s  p1

 s  p2

 ∙∙∙
(7.14)
7.2 Steady-State Error for Unity Feedback Systems
341

For the limit to be inﬁnite, the denominator must be equal to zero as s goes to zero. Thus,
n  1; that is, at least one pole must be at the origin. Since division by s in the frequency
domain is integration in the time domain (see Table 2.2, Item 10), we are also saying that
at least one pure integration must be present in the forward path. The steady-state
response for this case of zero steady-state error is similar to that shown in Figure 7.2(a),
Output 1.
If there are no integrations, then n  0. Using Eq. (7.14), we have
lim
s®0 G s   z1z2 ∙∙∙
p1p2 ∙∙∙
(7.15)
which is ﬁnite and yields a ﬁnite error from Eq. (7.12). Figure 7.2(a), Output 2, is an
example of this case of ﬁnite steady-state error.
In summary, for a step input to a unity feedback system, the steady-state error will be
zero if there is at least one pure integration in the forward path. If there are no integrations,
then there will be a nonzero ﬁnite error. This result is comparable to our qualitative
discussion in Section 7.1, where we found that a pure gain yields a constant steady-state
error for a step input, but an integrator yields zero error for the same type of input. We now
repeat the development for a ramp input.
Ramp Input. Using Eq. (7.11), with R s   1=s2, we obtain
e ∞

  eramp ∞

  lim
s®0
s 1=s2


1  G s   lim
s®0
1
s  sG s  
1
lim
s®0 sG s 
(7.16)
To have zero steady-state error for a ramp input, we must have
lim
s®0 sG s   ∞
(7.17)
To satisfy Eq. (7.17), G(s) must take the same form as Eq. (7.14), except that n  2. In
other words, there must be at least two integrations in the forward path. An example of
zero steady-state error for a ramp input is shown in Figure 7.2(b), Output 1.
If only one integration exists in the forward path, then, assuming Eq. (7.14),
lim
s®0 sG s   z1z2 ∙∙∙
p1p2 ∙∙∙
(7.18)
which is ﬁnite rather than inﬁnite. Using Eq. (7.16), we ﬁnd that this conﬁguration leads to a
constant error, as shown in Figure 7.2(b), Output 2.
If there are no integrations in the forward path, then
lim
s®0 sG s   0
(7.19)
and the steady-state error would be inﬁnite and lead to diverging ramps, as shown in
Figure 7.2(b), Output 3. Finally, we repeat the development for a parabolic input.
Parabolic Input. Using Eq. (7.11), with R s   1=s3, we obtain
e ∞

  eparabola ∞

  lim
s®0
s 1=s3


1  G s   lim
s®0
1
s2  s2G s  
1
lim
s®0 s2G s 
(7.20)
342
Chapter 7
Steady-State Errors

In order to have zero steady-state error for a parabolic input, we must have
lim
s®0 s2G s   ∞
(7.21)
To satisfy Eq. (7.21), G(s) must take on the same form as Eq. (7.14), except that n  3. In
other words, there must be at least three integrations in the forward path.
If there are only two integrations in the forward path, then
lim
s®0 s2G s   z1z2 ∙∙∙
p1p2 ∙∙∙
(7.22)
is ﬁnite rather than inﬁnite. Using Eq. (7.20), we ﬁnd that this conﬁguration leads to a
constant error.
If there is only one or less integrations in the forward path, then
lim
s®0 s2G s   0
(7.23)
and the steady-state error is inﬁnite. Two examples demonstrate these concepts.
Example 7.2
Steady-State Errors for Systems with No Integrations
Steady-State Errors for Systems with No Integrations
PROBLEM: Find the steady-state errors for inputs of 5u(t),
5tu(t), and 5t2u(t) to the system shown in Figure 7.5. The
function u(t) is the unit step.
SOLUTION: First we verify that the closed-loop system is
indeed stable. For this example we leave out the details.
Next, for the input 5u(t), whose Laplace transform is 5=s,
the steady-state error will be ﬁve times as large as that given
by Eq. (7.12), or
e ∞

  estep∞ 
5
1  lim
s®0 Gs 
5
1  20  5
21
(7.24)
which implies a response similar to Output 2 of Figure 7.2(a).
For the input 5tu(t), whose Laplace transform is 5/s2, the steady-state error will be
ﬁve times as large as that given by Eq. (7.16), or
e∞  eramp∞ 
5
lim
s®0 sGs  5
0  ∞
(7.25)
which implies a response similar to Output 3 of Figure 7.2(b).
For the input 5t2u(t), whose Laplace transform is 10=s3, the steady-state error will be
10 times as large as that given by Eq. (7.20), or
e∞  eparabola∞ 
10
lim
s®0 s2Gs  10
0  ∞
(7.26)
+
–
R(s)
C(s)
120(s + 2)
(s + 3)(s + 4)
E(s)
FIGURE 7.5
Feedback control system for Example 7.2
7.2 Steady-State Error for Unity Feedback Systems
343

Example 7.3
Steady-State Errors for Systems with One Integration
Steady-State Errors for Systems with One Integration
PROBLEM: Find the steady-state errors for inputs of 5u(t),
5tu(t), and 5t2u(t) to the system shown in Figure 7.6. The
function u(t) is the unit step.
SOLUTION: First verify that the closed-loop system is
indeed stable. For this example we leave out the details. Next
note that since there is an integration in the forward path, the
steady-state errors for some of the input waveforms will be less than those found in
Example 7.2. For the input 5u(t), whose Laplace transform is 5=s, the steady-state error
will be ﬁve times as large as that given by Eq. (7.12), or
e∞  estep∞ 
5
1  lim
s®0 Gs  5
∞ 0
(7.27)
which implies a response similar to Output 1 of Figure 7.2(a). Notice that the integration
in the forward path yields zero error for a step input, rather than the ﬁnite error found
in Example 7.2.
For the input 5tu(t), whose Laplace transform is 5=s2, the steady-state error will be
ﬁve times as large as that given by Eq. (7.16), or
e∞  eramp∞ 
5
lim
s®0 sGs  5
100  1
20
(7.28)
which implies a response similar to Output 2 of Figure 7.2(b). Notice that the integration
in the forward path yields a ﬁnite error for a ramp input, rather than the inﬁnite error
found in Example 7.2.
For the input, 5t2u(t), whose Laplace transform is 10=s3, the steady-state error will
be 10 times as large as that given by Eq. (7.20), or
e∞  eparabola∞ 
10
lim
s®0 s2Gs  10
0  ∞
(7.29)
Notice that the integration in the forward path does not yield any improvement in
steady-state error over that found in Example 7.2 for a parabolic input.
+
–
R(s)
C(s)
100(s + 2)(s + 6)
s(s + 3)(s + 4)
E(s)
FIGURE 7.6
Feedback control system for Example 7.3
Skill-Assessment Exercise 7.1
PROBLEM: A unity feedback system has the following forward transfer function:
G s   10s  20s  30
ss  25s  35
a. Find the steady-state error for the following inputs: 15u(t), 15tu(t), and 15t2u(t).
b. Repeat for
G s  
10s  20s  30
s2s  25s  35s  50
ANSWERS:
a. Theclosed-loopsystemisstable.For15u(t),estep∞  0;for15tu(t),eramp∞  2:1875;
for 15(t2)u(t), eparabola∞  ∞:
b. The closed-loop system is unstable. Calculations cannot be made.
The complete solution is at www.wiley.com/college/nise.
344
Chapter 7
Steady-State Errors

7.3 Static Error Constants and System Type
We continue our focus on unity negative feedback systems and deﬁne parameters that we
can use as steady-state error performance speciﬁcations. These deﬁnitions parallel our
deﬁning damping ratio, natural frequency, settling time, percent overshoot, and so on as
performance speciﬁcations for the transient response. The steady-state error performance
speciﬁcations are called static error constants. Let us see how they are deﬁned, how to
calculate them, and, in the next section, how to use them for design.
Static Error Constants
In the previous section we derived the following relationships for steady-state error.
For a step input, u(t),
e ∞

  estep ∞

 
1
1  lim
s®0 G s 
(7.30)
For a ramp input, tu(t),
e ∞

  eramp ∞

 
1
lim
s®0 sG s 
(7.31)
For a parabolic input, 1
2 t2u t .
e ∞

  eparabola ∞

 
1
lim
s®0 s2G s 
(7.32)
The three terms in the denominator that are taken to the limit determine the
steady-state error. We call these limits static error constants. Individually, their names
are
position constant, Kp, where
Kp  lim
s®0 G s 
(7.33)
velocity constant, Kv, where
Kv  lim
s®0 sG s 
(7.34)
acceleration constant, Ka, where
Ka  lim
s®0 s2G s 
(7.35)
As we have seen, these quantities, depending upon the form of G(s), can assume values
of zero, ﬁnite constant, or inﬁnity. Since the static error constant appears in the denominator
of the steady-state error. Eqs. (7.30) through (7.32), the value of the steady-state error
decreases as the static error constant increases.
7.3 Static Error Constants and System Type
345

In Section 7.2, we evaluated the steady-state error by using the ﬁnal value theorem.
An alternate method makes use of the static error constants. A few examples follow:
Example 7.4
Steady-State Error via Static Error Constants
Steady-State Error via Static Error Constants
PROBLEM: For each system of Figure 7.7, evaluate the static error constants and ﬁnd
the expected error for the standard step, ramp, and parabolic inputs.
SOLUTION: First verify that all closed-loop systems shown are indeed stable. For this
example we leave out the details. Next, for Figure 7.7(a),
Kp  lim
s®0 G s   500  2  5
8  10  12  5:208
(7.36)
Kv  lim
s®0 sGs  0
(7.37)
Ka  lim
s®0 s2Gs  0
(7.38)
Thus, for a step input,
e∞ 
1
1  Kp
 0:161
(7.39)
For a ramp input,
e∞  1
Kv
 ∞
(7.40)
For a parabolic input,
e∞  1
Ka
 ∞
(7.41)
Now, for Figure 7.7(b),
Kp  lim
s®0 Gs  ∞
(7.42)
+
–
R(s)
C(s)
500(s + 2)(s + 5)
(s + 8)(s + 10)(s + 12)
(a)
+
–
R(s)
C(s)
500(s + 2)(s + 5)(s + 6)
s(s + 8)(s + 10)(s + 12)
(b)
+
–
R(s)
C(s)
500(s + 2)(s + 4)(s + 5)(s + 6)(s + 7)
s2(s + 8)(s + 10)(s + 12)
(c)
E(s)
E(s)
E(s)
FIGURE 7.7
Feedback control systems for Example 7.4
346
Chapter 7
Steady-State Errors

System Type
Let us continue to focus on a unity negative feedback system. The values of the static error
constants, again, depend upon the form of G(s), especially the number of pure integrations
in the forward path. Since steady-state errors are dependent upon the number of integrations
in the forward path, we give a name to this system attribute. Given the system in
Kv  lim
s®0 sG s   500  2  5  6
8  10  12
 31:25
(7.43)
and
Ka  lim
s®0 s2Gs  0
(7.44)
Thus, for a step input,
e∞ 
1
1  Kp
 0
(7.45)
For a ramp input,
e∞  1
Kv

1
31:25  0:032
(7.46)
For a parabolic input,
e∞  1
Ka
 ∞
(7.47)
Finally, for Figure 7.7(c),
Kp  lim
s®0 Gs  ∞
(7.48)
Kv  lim
s®0 sGs  ∞
(7.49)
and
Ka  lim
s®0 s2G s   500  2  4  5  6  7
8  10  12
 875
(7.50)
Thus, for a step input,
e∞ 
1
1  Kp
 0
(7.51)
For a ramp input,
e∞  1
Kv
 0
(7.52)
For a parabolic input,
e∞  1
Ka
 1
875  1:14  103
(7.53)
Students who are using MATLAB should now run ch7p1 in Appendix B.
You will learn how to test the system for stability, evaluate
static error constants, and calculate steady-state error using
MATLAB. This exercise applies MATLAB to solve Example 7.4 with
System (b).
7.3 Static Error Constants and System Type
347

Figure 7.8, we deﬁne system type to be the value of n in the denominator
or, equivalently, the number of pure integrations in the forward path.
Therefore, a system with n  0 is a Type 0 system. If n  1 or n  2, the
corresponding system is a Type 1 or Type 2 system, respectively.
Table 7.2 ties together the concepts of steady-state error, static
error constants, and system type. The table shows the static error
constants and the steady-state errors as functions of input waveform
and system type.
In this section, we deﬁned steady-state errors, static error constants, and system type.
Now the speciﬁcations for a control system’s steady-state errors will be formulated, followed
by some examples.
7.4 Steady-State Error Speciﬁcations
Static error constants can be used to specify the steady-state error characteristics of control
systems, such as that shown in Figure 7.9. Just as damping ratio, ζ, settling time, Ts, peak time,
Tp, and percent overshoot, %OS, are used as speciﬁcations for a control system’s transient
response, so the position constant, Kp, velocity constant, Kv, and acceleration constant, Ka, can
Skill-Assessment Exercise 7.2
PROBLEM: A unity feedback system has the following forward transfer function:
G s   1000s  8
s  7s  9
a. Evaluate system type, Kp, Kv, and Ka.
b. Use your answers to a. to ﬁnd the steady-state errors for the standard step, ramp, and
parabolic inputs.
ANSWERS:
a. The closed-loop system is stable. System type = Type 0. Kp  127, Kv  0, and
Ka  0.
b. estep∞  7:8  103; eramp∞  ∞; and eparabola ∞

  ∞
The complete solution is at www.wiley.com/college/nise.
TryIt 7.1
Use MATLAB, the Control
System Toolbox, and the
following statements to ﬁnd Kp,
estep ∞

, and the closed-loop
poles to check for stability for the
system of Skill-Assessment
Exercise 7.2.
numg=1000*[1 8];
deng=poly([7 9]);
G=tf(numg,deng);
Kp=dcgain(G)
estep=1/(1+Kp)
T=feedback(G,1);
poles=pole(T)
+
–
R(s)
C(s)
K(s + z1)(s + z2) ...
sn(s + p1)(s + p2) ...
E(s)
FIGURE 7.8
Feedback control system for deﬁning
system type
TABLE 7.2
Relationships between input, system type, static error constants, and steady-state errors
Type 0
Type 1
Type 2
Input
Steady-state error
formula
Static error
constant
Error
Static error
constant
Error
Static error
constant
Error
Step, u(t)
1
1  Kp
Kp  Constant
1
1  Kp
Kp  ∞
0
Kp  ∞
0
Ramp, tu(t)
1
Kv
Kv  0
∞
Kv  Constant
1
Kv
Kv  ∞
0
Parabola, 1
2 t2u t 
1
Ka
Ka  0
∞
Ka  0
∞
Ka  Constant
1
Ka
348
Chapter 7
Steady-State Errors

be used as speciﬁcations for a control system’s steady-state errors. We will soon see that a
wealth of information is contained within the speciﬁcation of a static error constant.
For example, if a control system has the speciﬁcation Kv  1000, we can draw several
conclusions:
1. The system is stable.
2. The system is of Type 1, since only Type 1 systems have Kv’s that are ﬁnite constants.
Recall that Kv  0 for Type 0 systems, whereas Kv  ∞for Type 2 systems.
3. A ramp input is the test signal. Since Kv is speciﬁed as a ﬁnite constant, and the
steady-state error for a ramp input is inversely proportional to Kv, we know the test
input is a ramp.
4. The steady-state error between the input ramp and the output ramp is 1=Kv per unit of
input slope.
Let us look at two examples that demonstrate analysis and design using static error
constants.
FIGURE 7.9
A robot used in
the manufacturing of
semiconductor random-access
memories (RAMs) similar to
those in personal computers.
Steady-state error is an
important design consideration
for assembly-line robots
Example 7.5
Interpreting the Steady-State Error Speciﬁcation
Interpreting the Steady-State Error Speciﬁcation
PROBLEM: What information is contained in the speciﬁcation Kp  1000?
SOLUTION: The system is stable. The system is Type 0, since only a Type 0 system
has a ﬁnite Kp. Type 1and Type 2systems have Kp  ∞.The input test signal is astep, since
Kp is speciﬁed. Finally, the error per unit step is
e∞ 
1
1  Kp

1
1  1000 
1
1001
(7.54)
7.4 Steady-State Error Speciﬁcations
349

Example 7.6
Gain Design to Meet a Steady-State Error Speciﬁcation
Gain Design to Meet a Steady-State Error Speciﬁcation
PROBLEM: Given the control system in Figure 7.10, ﬁnd the
value of K so that there is 10% error in the steady state.
SOLUTION: Since the system is Type 1, the error stated in the
problem must apply to a ramp input; only a ramp yields a ﬁnite
error in a Type 1 system. Thus,
e∞  1
Kv
 0:1
(7.55)
Therefore,
Kv  10  lim
s®0 sG s  
K  5
6  7  8
(7.56)
which yields
K  672
(7.57)
Applying the Routh-Hurwitz criterion, we see that the system is stable at this gain.
Although this gain meets the criteria for steady-state error and stability, it may
not yield a desirable transient response. In Chapter 9 we will design feedback control
systems to meet all three speciﬁcations.
Students who are using MATLAB should now run ch7p2 in Appendix B.
You will learn how to ﬁnd the gain to meet a steady-state error
speciﬁcation using MATLAB. This exercise solves Example 7.6
using MATLAB.
Skill-Assessment Exercise 7.3
PROBLEM: A unity feedback system has the following forward transfer function:
Gs 
Ks  12
s  14s  18
Find the value of K to yield a 10% error in the steady state.
ANSWER: K  189
The complete solution is at www.wiley.com/college/nise.
+
–
R(s)
C(s)
K(s + 5)
s(s + 6)(s + 7)(s + 8)
E(s)
FIGURE 7.10
Feedback control system for
Example 7.6
TryIt 7.2
Use MATLAB, the Control
System Toolbox, and the
following statements to solve
Skill-Assessment Exercise 7.3
and check the resulting system
for stability.
numg=[1 12];
deng=poly([14 18]);
G=tf(numg,deng);
Kpdk=dcgain(G);
estep=0.1;
K=(1/estep-1)/Kpdk
T=feedback(G,1);
poles=pole(T)
350
Chapter 7
Steady-State Errors

This example and exercise complete our discussion of unity feedback systems. In
the remaining sections, we will deal with the steady-state errors for disturbances and the
steady-state errors for feedback control systems in which the feedback is not unity.
7.5 Steady-State Error for Disturbances
Feedback control systems are used to compensate for distur-
bances or unwanted inputs that enter a system. The advantage
of using feedback is that regardless of these disturbances,
the system can be designed to follow the input with small
or zero error, as we now demonstrate. Figure 7.11 shows a
feedback control system with a disturbance, D(s), injected
between the controller and the plant. We now re-derive the
expression for steady-state error with the disturbance included.
The transform of the output is given by
C s   E s G1 s G2 s   D s G2 s 
(7.58)
But
C s   R s   E s 
(7.59)
Substituting Eq. (7.59) into Eq. (7.58) and solving for E(s), we obtain
E s  
1
1  G1 s G2 s  R s  
G2 s 
1  G1 s G2 s  D s 
(7.60)
where we can think of 1=1  G1 s G2 s  as a transfer function relating E(s) to R(s) and
G2 s =1  G1 s G2 s  as a transfer function relating E(s) to D(s).
To ﬁnd the steady-state value of the error, we apply the ﬁnal value theorem3 to
Eq. (7.60) and obtain
e ∞

  lim
s®0 sE s   lim
s®0
s
1  G1 s G2 s  R s   lim
s®0
sG2 s 
1  G1 s G2 s  D s 
 eR ∞

  eD ∞


(7.61)
where
eR ∞

  lim
s®0
s
1  G1 s G2 s  R s 
and
eD ∞

   lim
s®0
sG2 s 
1  G1 s G2 s  D s 
The ﬁrst term, eR ∞

, is the steady-state error due to R(s), which we have already obtained.
The second term, eD ∞

, is the steady-state error due to the disturbance. Let us explore the
conditions on eD ∞

 that must exist to reduce the error due to the disturbance.
+
–
R(s)
C(s)
G1(s)
E(s)
Controller
++
Plant
D(s)
G2(s)
FIGURE 7.11
Feedback control system showing disturbance
3 Remember that the ﬁnal value theorem can be applied only if the system is stable, with the roots of
1  G1 s G2 s  in the left–half–plane.
7.5 Steady-State Error for Disturbances
351

At this point, we must make some assumptions about D(s), the controller, and the
plant. First we assume a step disturbance, D s   1=s. Substituting this value into the second
term of Eq. (7.61), eD ∞

, the steady-state error component due to a step disturbance is
found to be
eD ∞

  
1
lim
s®0
1
G2 s   lim
s®0 G1 s 
(7.62)
This equation shows that the steady-state error produced by a step disturbance can
be reduced by increasing the dc gain of G1(s) or decreasing the dc gain of G2(s).
This concept is shown in Figure 7.12, where the system of Figure 7.11
has been rearranged so that the disturbance, D(s), is depicted as the input and
the error, E(s), as the output, with R(s) set equal to zero. If we want to
minimize the steady-state value of E(s), shown as the output in Figure 7.12,
we must either increase the dc gain of G1(s) so that a lower value of E(s) will
be fed back to match the steady-state value of D(s), or decrease the dc value of
G2(s), which then yields a smaller value of e ∞

 as predicted by the feedback
formula.
Let us look at an example and calculate the numerical value of the
steady-state error that results from a disturbance.
Example 7.7
Steady-State Error Due to Step Disturbance
Steady-State Error Due to Step Disturbance
PROBLEM: Find the steady-state error component due to a step disturbance for the
system of Figure 7.13.
SOLUTION: The system is stable. Using Figure 7.12 and Eq. (7.62), we ﬁnd
eD∞  
1
lim
s®0
1
G2s  lim
s®0 G1 s 
 
1
0  1000  
1
1000
(7.63)
The result shows that the steady-state error produced by the step disturbance
is inversely proportional to the dc gain of G1(s). The dc gain of G2(s) is inﬁnite in
this example.
Virtual Experiment 7.1
Steady-State Error with
Disturbance
Put theory into practice ﬁnding
the steady-state error of the
Quanser Rotary Servo when
subject to an input or a
disturbance by simulating it in
LabVIEW. This analysis becomes
important when developing
controllers for bottle labeling
machines or robot joint control.
Virtual experiments are found on
Learning Space.
+
–
D(s)
G2(s)
Controller
Plant
G1(s)
–E(s)
FIGURE 7.12
Figure 7.11 system
rearranged to show disturbance as input
and error as output, with Rs  0
+
–
R(s)
C(s)
1000
Controller
E(s)
+
D(s)
+
1
s(s + 25)
G1(s)
Plant
G2(s)
FIGURE 7.13
Feedback control system for Example 7.7
352
Chapter 7
Steady-State Errors

7.6 Steady-State Error for Nonunity Feedback Systems
Control systems often do not have unity feedback because of the compensation used to
improve performance or because of the physical model for the system. The feedback path
can be a pure gain other than unity or have some dynamic representation.
A general feedback system, showing the input transducer, G1(s), controller and plant,
G2(s), and feedback, H1(s), is shown in Figure 7.15(a). Pushing the input transducer to the
right past the summing junction yields the general nonunity feedback system shown in
Skill-Assessment Exercise 7.4
PROBLEM: Evaluate the steady-state error
component due to a step disturbance for the
system of Figure 7.14.
ANSWER: eD∞  9:98  104
The complete solution is at
www.wiley.com/college/nise.
–
1000
s + 2
s + 4
C(s)
E(s)
+
R(s)
++
D(s)
FIGURE 7.14
System for Skill-Assessment Exercise 7.4
R(s)
–
+
Ea(s)
G(s)
–
+
–1
(b)
(c)
R(s)
–
+
Ea(s)
(d)
R(s)
–
+
(e)
E(s)
1 + G(s)H(s) – G(s)
C(s)
H(s)
R(s)
Ea(s)
G(s)
C(s)
H(s)
G(s)
C(s)
G(s)
H(s) – 1
C(s)
–
– –
–
+
Ea1(s)
G2(s)
(a)
C(s)
H1(s)
R(s)
G1(s)
FIGURE 7.15
Forming an
equivalent unity feedback
system from a general nonunity
feedback system
7.6 Steady-State Error for Nonunity Feedback Systems
353

Figure 7.15(b), where G s   G1 s G2 s  and H s   H1 s =G1 s . Notice that unlike a
unity feedback system, where H s   1, the error is not the difference between the input
and the output. For this case we call the signal at the output of the summing junction the
actuating signal, Ea(s). If r(t) and c(t) have the same units, we can ﬁnd the steady-state
error, e ∞

  r ∞

  c ∞

. The ﬁrst step is to show explicitly E s   R s   C s  on
the block diagram.
Take the nonunity feedback control system shown in Figure 7.15(b) and form a
unity feedback system by adding and subtracting unity feedback paths, as shown in
Figure 7.15(c). This step requires that input and output units be the same. Next combine
H(s) with the negative unity feedback, as shown in Figure 7.15(d). Finally, combine the
feedback system consisting of G(s) and H s   1, leaving an equivalent forward path
and a unity feedback, as shown in Figure 7.15(e). Notice that the ﬁnal ﬁgure shows
E s   R s   C s  explicitly.
The following example summarizes the concepts of steady-state error, system type,
and static error constants for nonunity feedback systems.
Example 7.8
Steady-State Error for Nonunity Feedback Systems
Steady-State Error for Nonunity Feedback Systems
PROBLEM: For the system shown in Figure 7.16, ﬁnd the system type,
the appropriate error constant associated with the system type, and the
steady-state error for a unit step input. Assume input and output units
are the same.
SOLUTION: After determining that the system is indeed stable, one
may impulsively declare the system to be Type 1. This may not be the
case, since there is a nonunity feedback element, and the plant’s
actuating signal is not the difference between the input and the output.
The ﬁrst step in solving the problem is to convert the system of Figure 7.16 into an
equivalent unity feedback system. Using the equivalent forward transfer function of
Figure 7.15(e) along with
G s  
100
s s  10


(7.64)
and
H s  
1
s  5


(7.65)
we ﬁnd
Ge s  
G s 
1  G s H s   G s  
100 s  5


s3  15s2  50s  400
(7.66)
Thus, the system is Type 0, since there are no pure integrations in Eq. (7.66). The
appropriate static error constant is then Kp, whose value is
Kp  lim
s®0 Ge s   100  5
400   5
4
(7.67)
The steady-state error, e ∞

, is
e ∞

 
1
1  Kp

1
1  5=4

  4
(7.68)
The negative value for steady-state error implies that the output step is larger than
the input step.
R(s)
C(s)
–
+
Ea(s)
1
(s + 5)
100
s(s + 10)
FIGURE 7.16
Nonunity feedback control
system for Example 7.8
TryIt 7.3
Use MATLAB, the Control
System Toolbox, and the
following statements to ﬁnd
Ge(s) in Example 7.8.
G=zpk([],[0 10],100);
H=zpk([], 5,1);
Ge=feedback...
(G,(H-1));
'Ge(s)'
Ge=tf(Ge)
T=feedback (Ge,1);
'Poles of T(s)'
pole(T)
354
Chapter 7
Steady-State Errors

To continue our discussion of steady-state error for systems with
nonunity feedback, let us look at the general system of Figure 7.17,
which has both a disturbance and nonunity feedback. We will derive a
general equation for the steady-state error and then determine the
parameters of the system in order to drive the error to zero for step
inputs and step disturbances.4
The steady-state error for this system, e ∞

  r ∞

  c ∞

, is
e ∞

  lim
s®0 sE s   lim
s®0 s
(
1 
G1 s G2 s 
1  G1 s G2 s H s 


R s 

G2 s 
1  G1 s G2 s H s  D s 

)
(7.69)
Now limiting the discussion to step inputs and step disturbances, where R s   D s   1=s,
Eq. (7.69) becomes
e ∞

  lim
s®0 sE s  
1 
lim
s®0G1 s G2 s 
lim
s®01  G1 s G2 s H s 
2
4
3
5 
lim
s®0 G2 s 
lim
s®01  G1 s G2 s H s 
2
4
3
5
8
<
:
9
=
;
(7.70)
For zero error,
lim
s®0G1 s G2 s 
lim
s®01  G1 s G2 s H s   1
and
lim
s®0 G2 s 
lim
s®01  G1 s G2 s H s   0
(7.71)
The two equations in Eq. (7.71) can always be satisﬁed if (1) the system is stable, (2) G1(s) is
a Type 1 system, (3) G2(s) is a Type 0 system, and (4) H(s) is a Type 0 system with a dc gain
of unity.
To conclude this section, we discuss ﬁnding the steady-state value of the actuating
signal, Ea1(s), in Figure 7.15(a). For this task there is no restriction that the input and output
units be the same, since we are ﬁnding the steady-state difference between signals at the
summing junction, which do have the same units.5 The steady-state actuating signal for
Figure 7.15(a) is
ea1 ∞

  lim
s®0
sR s G1 s 
1  G2 s H1 s 
(7.72)
The derivation is left to the student in the problem set at the end of this chapter.
R(s)
C(s)
–
G1(s)
+
++
D(s)
G2(s)
H(s)
FIGURE 7.17
Nonunity feedback control system
with disturbance
Example 7.9
Steady-State Actuating Signal for Nonunity
Feedback Systems
Steady-State Actuating Signal for Nonunity
Feedback Systems
PROBLEM: Find the steady-state actuating signal for the system of Figure 7.16 for a
unit step input. Repeat for a unit ramp input.
4 Details of the derivation are included as a problem at the end of this chapter.
5 For clarity, steady-state error is the steady-state difference between the input and the output. Steady-state actuating
signal is the steady-state difference at the output of the summing junction. In questions asking for steady-state error
in problems, examples, and skill-assessment exercises, it will be assumed that input and output units are the same.
7.6 Steady-State Error for Nonunity Feedback Systems
355

In this section, we have applied steady-state error analysis to nonunity feedback
systems. When nonunity feedback is present, the plant’s actuating signal is not the actual
error or difference between the input and the output. With nonunity feedback we may
choose to (1) ﬁnd the steady-state error for systems where the input and output units are the
same or (2) ﬁnd the steady-state actuating signal.
We also derived a general expression for the steady-state error of a nonunity feedback
system with a disturbance. We used this equation to determine the attributes of the
subsystems so that there was zero error for step inputs and step disturbances.
Before concluding this chapter, we will discuss a topic that is not only signiﬁcant for
steady-state errors but generally useful throughout the control systems design process.
7.7 Sensitivity
During the design process, the engineer may want to consider the extent to which changes in
system parameters affect the behavior of a system. Ideally, parameter changes due to heat or
other causes should not appreciably affect a system’s performance. The degree to which
SOLUTION: Use
Eq.
(7.72)
with
Rs  1=s,
a
unit
step
input,
G1s  1;
G2s  100=ss  10, and H1s  1=s  5. Also, realize that ea1∞  ea∞, since
G1s  1. Thus,
ea ∞

  lim
s®0
s 1
s
 
1 
100
ss  10


1
s  5

  0
(7.73)
Now use Eq. (7.72) with Rs  1=s2, a unit ramp input, and obtain
ea∞  lim
s®0
s
1
s2
 
1 
100
ss  10


1
s  5

  1
2
(7.74)
Skill-Assessment Exercise 7.5
PROBLEM:
a. Find the steady-state error, e∞  r∞  c∞, for a unit step input given
the nonunity feedback system of Figure 7.18. Repeat for a unit ramp input.
Assume input and output units are the same.
b. Find the steady-state actuating signal, ea∞, for a unit step input given
the nonunity feedback system of Figure 7.18. Repeat for a unit ramp input.
ANSWERS:
a. estep∞  3:846  102; eramp∞  ∞
b. For a unit step input, ea∞  3:846  102; for a unit ramp input,
ea∞  ∞
The complete solution is at www.wiley.com/college/nise.
–
+
Ea(s)
C(s)
s + 1
1
R(s)
s + 4
100
FIGURE 7.18
Nonunity feedback
system for Skill-Assessment Exercise 7.5
356
Chapter 7
Steady-State Errors

changes in system parameters affect system transfer functions, and hence performance, is
called sensitivity. A system with zero sensitivity (that is, changes in the system parameters
have no effect on the transfer function) is ideal. The greater the sensitivity, the less desirable
the effect of a parameter change.
For example, assume the function F  K= K  a

. If K  10 and a  100, then
F  0:091. If parameter a triples to 300, then F  0:032. We see that a fractional change in
parameter a of 300  100

=100  2 (a 200% change) yields a change in the function F
of
0:032  0:091

=0:091  0:65 65% change

. Thus, the function F has reduced
sensitivity to changes in parameter a. As we proceed, we will see that another advantage
of feedback is that in general it affords reduced sensitivity to parameter changes.
Based upon the previous discussion, let us formalize a deﬁnition of sensitivity:
Sensitivity is the ratio of the fractional change in the function to the fractional change in the
parameter as the fractional change of the parameter approaches zero. That is,
SF: P  lim
ΔP ® 0
Fractional change in the function; F
Fractional change in the parameter; P
 lim
ΔP ® 0
ΔF=F
ΔP=P
 lim
ΔP ® 0
PΔF
FΔP
which reduces to
SF:P  P
F
δF
δP
(7.75)
Let us now apply the deﬁnition, ﬁrst to a closed-loop transfer function and then to the
steady-state error.
Example 7.10
Sensitivity of a Closed-Loop Transfer Function
Sensitivity of a Closed-Loop Transfer Function
PROBLEM: Given the system of Figure 7.19, calculate the sensitivity of
the closed-loop transfer function to changes in the parameter a. How
would you reduce the sensitivity?
SOLUTION: The closed-loop transfer function is
T s  
K
s2  as  K
(7.76)
Using Eq. (7.75), the sensitivity is given by
ST:a  a
T
δT
δa 
a
K
s2  as  K


Ks
s2  as  K2



as
s2  as  K
(7.77)
which is, in part, a function of the value of s. For any value of s, however, an increase in K
reduces the sensitivity of the closed-loop transfer function to changes in the parameter a.
R(s)
–
+
E(s)
K
s(s + a)
C(s)
FIGURE 7.19
Feedback control system
for Examples 7.10 and 7.11
7.7 Sensitivity
357

Example 7.11
Sensitivity of Steady-State Error with Ramp Input
Sensitivity of Steady-State Error with Ramp Input
PROBLEM: For the system of Figure 7.19, ﬁnd the sensitivity of the steady-state error
to changes in parameter K and parameter a with ramp inputs.
SOLUTION: The steady-state error for the system is
e∞  1
Kv
 a
K
(7.78)
The sensitivity of e∞ to changes in parameter a is
Se:a  a
e
δe
δa 
a
a=K
1
K
 
 1
(7.79)
The sensitivity of e∞ to changes in parameter K is
Se:K  K
e
δe
δK  K
a=K
a
K2


 1
(7.80)
Thus, changes in either parameter a or parameter K are directly reﬂected in e∞, and
there is no reduction or increase in sensitivity. The negative sign in Eq. (7.80) indicates
a decrease in e∞ for an increase in K. Both of these results could have been obtained
directly from Eq. (7.78) since e∞ is directly proportional to parameter a and inversely
proportional to parameter K.
Example 7.12
Sensitivity of Steady-State Error with Step Input
Sensitivity of Steady-State Error with Step Input
PROBLEM: Find the sensitivity of the steady-state error to changes in
parameter K and parameter a for the system shown in Figure 7.20 with a
step input.
SOLUTION: The steady-state error for this Type 0 system is
e∞ 
1
1  Kp

1
1  K
ab

ab
ab  K
(7.81)
The sensitivity of e∞ to changes in parameter a is
Se:a  a
e
δe
δa 
a
ab
ab  K


ab  K

b  ab2
ab  K

2

K
ab  K
(7.82)
The sensitivity of e∞ to changes in parameter K is
Se:K  K
e
δe
δK 
K
ab
ab  K


ab
ab  K2 
K
ab  K
(7.83)
Equations (7.82) and (7.83) show that the sensitivity to changes in parameter K and
parameter a is less than unity for positive a and b. Thus, feedback in this case yields
reduced sensitivity to variations in both parameters.
R(s)
–
+
K
(s + a)(s + b)
E(s)
C(s)
FIGURE 7.20
Feedback control system
for Example 7.12
TryIt 7.4
Use MATLAB, the Symbolic
Math Toolbox, and the
following statements to ﬁnd Se:a
in Example 7.12.
syms K a b s
G=K/((s+a)*(s+b));
Kp=subs(G,s,0);
e=1/(1+Kp);
Sea=(a/e)*diff(e,a);
Sea=simplify(Sea);
'Sea'
pretty(Sea)
358
Chapter 7
Steady-State Errors

In this section, we deﬁned sensitivity and showed that in some cases feedback
reduces the sensitivity of a system’s steady-state error to changes in system parameters.
The concept of sensitivity can be applied to other measures of control system performance,
as well; it is not limited to the sensitivity of the steady-state error performance.
7.8 Steady-State Error for Systems in State Space
Up to this point, we have evaluated the steady-state error for systems modeled as transfer
functions. In this section, we will discuss how to evaluate the steady-state error for systems
represented in state space. Two methods for calculating the steady-state error will be
covered: (1) analysis via ﬁnal value theorem and (2) analysis via input substitution. We will
consider these methods individually.
Analysis via Final Value Theorem
A single-input, single-output system represented in state space can be analyzed for steady-
state error using the ﬁnal value theorem and the closed-loop transfer function, Eq. (3.73),
derived in terms of the state-space representation. Consider the closed-loop system
represented in state space:
_x  Ax  Br
(7.84a)
y  Cx
(7.84b)
The Laplace transform of the error is
E s   R s   Y s 
(7.85)
But
Y s   R s T s 
(7.86)
where T(s) is the closed-loop transfer function. Substituting Eq. (7.86) into (7.85), we obtain
E s   R s 1  T s 
(7.87)
Using Eq. (3.73) for T(s), we ﬁnd
E s   R s 1  C sI  A

1B
(7.88)
Applying the ﬁnal value theorem, we have
lim
s®0 sE s   lim
s®0 sR s 1  C sI  A

1B
(7.89)
Let us apply the result to an example.
Skill-Assessment Exercise 7.6
PROBLEM: Find the sensitivity of the steady-state error to changes
in K for the system of Figure 7.21.
ANSWER: Se:k 
7K
10  7K
The complete solution is at www.wiley.com/college/nise.
s2 + 2s + 10
K(s + 7)
–
+
E(s)
C(s)
R(s)
FIGURE 7.21
System for Skill-Assessment
Exercise 7.6
7.8 Steady-State Error for Systems in State Space
359

Analysis via Input Substitution
Another method for steady-state analysis avoids taking the inverse of sI  A

 and can be
expanded to multiple-input, multiple-output systems; it substitutes the input along with an
assumed solution into the state equations (Hostetter, 1989). We will derive the results for
unit step and unit ramp inputs.
Step Inputs. Given the state Eqs. (7.84), if the input is a unit step where r  1, a
steady-state solution, xss, for x, is
xss 
V1
V2
..
.
Vn
2
66664
3
77775
 V
(7.92)
where Vi is constant. Also,
_xss  0
(7.93)
Substituting r  1, a unit step, along with Eqs. (7.92) and (7.93), into Eqs. (7.84) yields
0  AV  B
(7.94a)
yss  CV
(7.94b)
where yss is the steady-state output. Solving for V yields
V  A1B
(7.95)
Example 7.13
Steady-State Error Using the Final Value Theorem
Steady-State Error Using the Final Value Theorem
PROBLEM: Evaluate the steady-state error for the system described by Eqs. (7.90) for
unit step and unit ramp inputs. Use the ﬁnal value theorem.
A 
5
1
0
0
2
1
20
10
1
2
4
3
5;
B 
0
0
1
2
4
3
5;
C   1
1
0 
(7.90)
SOLUTION: Substituting Eqs. (7.90) into (7.89), we obtain
e∞  lim
s®0 sR s  1 
s  4
s3  6s2  13s  20


 lim
s®0 sR s  s3  6s2  12s  16
s3  6s2  13s  20


(7.91)
For a unit step, Rs  1=s, and e∞  4=5. For a unit ramp, Rs  1=s2, and e∞  ∞.
Notice that the system behaves like a Type 0 system.
TryIt 7.5
Use MATLAB, the Symbolic
Math Toolbox, and the
following statements to ﬁnd
the steady-state error for a
step input to the system of
Example 7.13.
syms s
A=[5
1
0
0 2
1
20 10 1];
B=[0; 0; 1];
C=[1 1 0];
I=[1 0 0
0 1 0
0 0 1];
E=(1/s)*[1C*...
[(s*I-A)^-1]*B];
%New command:
%subs(X,old,new):
%Replace old in...
%X(old) with new.
error=subs(s*E,s,0)
360
Chapter 7
Steady-State Errors

But the steady-state error is the difference between the steady-state input and the steady-
state output. The ﬁnal result for the steady-state error for a unit step input into a system
represented in state space is
e ∞

  1  yss  1  CV  1  CA1B
(7.96)
Ramp Inputs. For unit ramp inputs, r  t, a steady-state solution for x is
xss 
V1t  W1
V2t  W2
...
Vnt  Wn
2
66664
3
77775
 Vt  W
(7.97)
where Vi and Wi are constants. Hence,
_xss 
V1
V2
...
Vn
2
66664
3
77775
 V
(7.98)
Substituting r  t along with Eqs. (7.97) and (7.98) into Eqs. (7.84) yields
V  A Vt  W

  Bt
(7.99a)
yss  C Vt  W


(7.99b)
In order to balance Eq. (7.99a), we equate the matrix coefﬁcients of t, AV  B, or
V  A1B
(7.100)
Equating constant terms in Eq. (7.99a), we have AW  V, or
W  A1V
(7.101)
Substituting Eqs. (7.100) and (7.101) into (7.99b) yields
yss  CA1Bt  A1 A1B


  CA1Bt  A1

2B
(7.102)
The steady-state error is therefore
e ∞

  lim
t®∞t  yss

  lim
t®∞ 1  CA1B


t  C A1

2B
(7.103)
Notice that in order to use this method, A1 must exist. That is, detA 6 0.
We now demonstrate the use of Eqs. (7.96) and (7.103) to ﬁnd the steady-state error
for step and ramp inputs.
Example 7.14
Steady-State Error Using Input Substitution
Steady-State Error Using Input Substitution
PROBLEM: Evaluate the steady-state error for the system described by the three
equations in Eq. (7.90) for unit step and unit ramp inputs. Use input substitution.
7.8 Steady-State Error for Systems in State Space
361

In this chapter, we covered the evaluation of steady-state error for systems represented
by transfer functions as well as systems represented in state space. For systems represented
in state space, two methods were presented: (1) ﬁnal value theorem and (2) input
substitution.
Case Studies
Antenna Control: Steady-State Error Design via Gain
Antenna Control: Steady-State Error Design via Gain
This chapter showed how to ﬁnd steady-state errors for step, ramp, and parabolic inputs to
a closed-loop feedback control system. We also learned how to evaluate the gain to meet a
steady-state error requirement. This ongoing case study uses our antenna azimuth position
control system to summarize the concepts.
PROBLEM: For the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 1,
a. Find the steady-state error in terms of gain, K, for step, ramp, and parabolic inputs.
b. Find the value of gain, K, to yield a 10% error in the steady state.
SOLUTION: For a unit step input, the steady-state error given by Eq. (7.96) is
e∞  1  CA1B  1  0:2  0:8
(7.104)
where C, A, and B are as follows:
A 
5
1
0
0
 2
1
20
10
1
2
4
3
5;
B 
0
0
1
2
4
3
5;
C   1
1
0 
(7.105)
For a ramp input, using Eq. (7.103), we have
e∞  lim
t®∞1  CA1Bt  CA12B  lim
t®∞0:8t  0:08  ∞
(7.106)
Skill-Assessment Exercise 7.7
PROBLEM: Find the steady-state error for a step input given the system represented in
state space below. Calculate the steady-state error using both the ﬁnal value theorem and
input substitution methods.
A 
0
1
3
6


;
B 
0
1


;
C   1
1 
ANSWER:
estep∞  2
3
The complete solution is at www.wiley.com/college/nise.
362
Chapter 7
Steady-State Errors

SOLUTION:
a. The simpliﬁed block diagram for the system is shown on the front endpapers. The
steady-state error is given by
e∞  lim
s®0 sEs  lim
s®0
sRs
1  Gs
(7.107)
From the block diagram, after pushing the potentiometer to the right past the summing
junction, the equivalent forward transfer function is
Gs 
6:63K
ss  1:71s  100
(7.108)
To ﬁnd the steady-state error for a step input, use Rs  1=s along with
Eq. (7.108), and substitute these in Eq. (7.107). The result is e∞  0.
To ﬁnd the steady-state error for a ramp input, use Rs  1=s2 along with
Eq. (7.108), and substitute these in Eq. (7.107). The result is e∞  25:79=K.
To ﬁnd the steady-state error for a parabolic input, use Rs  1=s3 along with
Eq. (7.108), and substitute these in Eq. (7.107). The result is e∞  ∞.
b. Since the system is Type 1, a 10% error in the steady state must refer to a ramp input.
This is the only input that yields a ﬁnite, nonzero error. Hence, for a unit ramp input,
e∞  0:1  1
Kv
 1:71100
6:63K
 25:79
K
(7.109)
from which K  257:9. You should verify that the value of K is within the range of
gains that ensures system stability. In the antenna control case study in the last chapter,
the range of gain for stability was found to be 0 < K < 2623:29. Hence, the system is
stable for a gain of 257.9.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives: Referring to the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 2, do the following:
a. Find the steady-state errors in terms of gain, K, for step, ramp, and parabolic inputs.
b. Find the value of gain, K, to yield a 20% error in the steady state.
Video Laser Disc Recorder: Steady-State
Error Design via Gain
Video Laser Disc Recorder: Steady-State
Error Design via Gain
As a second case study, let us look at a video laser disc focusing system for recording.
PROBLEM: In order to record on a video laser disc, a 0.5 μm laser spot must be focused
on the recording medium to burn pits that represent the program material. The small laser
spot requires that the focusing lens be positioned to an accuracy of  0:1 μm. A model of
the feedback control system for the focusing lens is shown in Figure 7.22.
Desired
lens
position
Actual
lens
position
Motor &
lens
Filter
Detector
Power
amplifier
+
_
0.12
(s + 40,000)
K1(s + 800)
K2
K3
s2
FIGURE 7.22
Video laser
disc recording: control system
for focusing write beam
Case Studies
363

The detector detects the distance between the focusing lens and the video disc by
measuring the degree of focus as shown in Figure 7.23(a). Laser light reﬂected from the
disc, D, is split by beam splitters B1 and B2 and focused behind aperture A. The remainder
is reﬂected by the mirror and focuses in front of aperture A. The amount of light of each
beam that passes through the aperture depends on how far the beam’s focal point is from
the aperture. Each side of the split photodiode, P, measures the intensity of each beam.
Thus, as the disc’s distance from the recording objective lens changes, so does the focal
point of each beam. As a result, the relative voltage detected by each part of the split
photodiode changes. When the beam is out of focus, one side of the photodiode outputs a
larger voltage. When the beam is in focus, the voltage outputs from both sides of the
photodiode are equal.
A simpliﬁed model for the detector is a straight line relating the differential voltage
output from the two elements to the distance of the laser disc from nominal focus. A
linearized plot of the detector input-output relationship is shown in Figure 7.23(b)
(a)
L2, recording
objective lens
B1, polarizing
beam splitter
L1, condensing
lens
D-Disc
Q–X/Y plate
B2, 50-50
beam splitter
Mirror
A, pinhole
aperture
P, split
photodiode
0.6
–0.6
–5
5
(b)
Distance from
nominal focus
(μm)
Differential
voltage
FIGURE 7.23
Video disc laser recording: a. focus detector optics;6 b. linearized transfer function
for focus detector6
6 Isailović, J. Videodisc and Optical Memory Technologies, 1st Edition, 1985. Reprinted by permission of
Pearson Education, Inc., Upper Saddle River, NJ.
364
Chapter 7
Steady-State Errors

Summary
This chapter covered the analysis and design of feedback control systems for steady-state
errors. The steady-state errors studied resulted strictly from the system conﬁguration. On the
basis of a system conﬁguration and a group of selected test signals, namely steps, ramps,
and parabolas, we can analyze or design for the system’s steady-state error performance.
The greater the number of pure integrations a system has in the forward path, the higher the
degree of accuracy, assuming the system is stable.
The steady-state errors depend upon the type of test input. Applying the ﬁnal value
theorem to stable systems, the steady-state error for unit step inputs is
e ∞

 
1
1  lim
s®0 G s 
(7.110)
(Isailovic ́, 1985). Assume that a warp on the disc yields a worst-case disturbance in the
focus of 10t2 μm. Find the value of K1K2K3 in order to meet the focusing accuracy required
by the system.
SOLUTION: Since the system is Type 2, it can respond to parabolic inputs with ﬁnite
error. We can assume that the disturbance has the same effect as an input of 10t2 μm.
TheLaplacetransform of 10t2 is 20=s3, or 20 units greater than the unit acceleration used
to derive the general equation of the error for a parabolic input. Thus, e∞  20=Ka.
But Ka  lim
s®0 s2Gs.
From Figure 7.22, Ka  0:0024K1K2K3. Also, from the problem statement, the
error must be no greater than 0.1 μm. Hence, e∞  8333:33=K1K2K3  0:1. Thus,
K1K2K3  83333:3, and the system is stable.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives: Given the video laser disc recording system whose block diagram is shown in
Figure 7.24, do the following:
a. If the focusing lens needs to be positioned to an accuracy of  0:005 μm, ﬁnd the
value of K1K2K3 if the warp on the disc yields a worst-case disturbance in the focus
of 15t2μm.
b. Use the Routh-Hurwitz criterion to show that the system is stable when the conditions
of a. are met.
c. Use MATLAB to show that the system is stable when the conditions
of a. are met.
Desired
lens
position
Actual
lens
position
Motor &
lens
Filter
Detector
Power
amplifier
+
_
0.2
(s + 20,000)
K1(s + 600)
K2
K3
s2
FIGURE 7.24
Video laser disc recording focusing system
Summary
365

The steady-state error for ramp inputs of unit velocity is
e ∞

 
1
lim
s®0 sG s 
(7.111)
and for parabolic inputs of unit acceleration, it is
e ∞

 
1
lim
s®0 s2G s 
(7.112)
The terms taken to the limit in Eqs. (7.110) through (7.112) are called static error
constants. Beginning with Eq. (7.110), the terms in the denominator taken to the limit are
called the position constant, velocity constant, and acceleration constant, respectively.
The static error constants are the steady-state error speciﬁcations for control systems. By
specifying a static error constant, one is stating the number of pure integrations in the
forward path, the test signal used, and the expected steady-state error.
Another deﬁnition covered in this chapter was that of system type. The system type
is the number of pure integrations in the forward path, assuming a unity feedback
system. Increasing the system type decreases the steady-state error as long as the system
remains stable.
Since the steady-state error is, for the most part, inversely proportional to the static
error constant, the larger the static error constant, the smaller the steady-state error.
Increasing system gain increases the static error constant. Thus, in general, increasing
system gain decreases the steady-state error as long as the system remains stable.
Nonunity feedback systems were handled by deriving an equivalent unity feedback
system whose steady-state error characteristics followed all previous development. The
method was restricted to systems where input and output units are the same.
We also saw how feedback decreases a system’s steady-state error caused by
disturbances. With feedback, the effect of a disturbance can be reduced by system gain
adjustments.
Finally, for systems represented in state space, we calculated the steady-state error
using the ﬁnal value theorem and input substitution methods.
In the next chapter, we will examine the root locus, a powerful tool for the analysis
and design of control systems.
Review Questions
1. Name two sources of steady-state errors.
2. Aposition control, tracking withaconstantdifferencein velocity, would yield howmuch
position error in the steady state?
3. Name the test inputs used to evaluate steady-state error.
4. How many integrations in the forward path are required in order for there to be zero
steady-state error for each of the test inputs listed in Question 3?
5. Increasing system gain has what effect upon the steady-state error?
6. For a step input, the steady-state error is approximately the reciprocal of the static error
constant if what condition holds true?
7. What is the exact relationship between the static error constants and the steady-state
errors for ramp and parabolic inputs?
8. What information is contained in the speciﬁcation Kp  10;000?
9. Deﬁne system type.
366
Chapter 7
Steady-State Errors

10. The forward transfer function of a control system has three poles at 1; 2; and 3.
What is the system type?
11. What effect does feedback have upon disturbances?
12. For a step input disturbance at the input to the plant, describe the effect of controller and
plant gain upon minimizing the effect of the disturbance.
13. Is the forward-path actuating signal the system error if the system has nonunity
feedback?
14. How are nonunity feedback systems analyzed and designed for steady-state errors?
15. Deﬁne, in words, sensitivity and describe the goal of feedback-control-system
engineering as it applies to sensitivity.
16. Name two methods for calculating the steady-state error for systems represented in
state space.
Problems
1. For the unity feedback system shown in Figure P7.1,
where
G s   450 s  8

 s  12

 s  15


s s  38

 s2  2s  28


ﬁnd the steady-state errors for the following test inputs:
25u t ; 37tu t ; 47t2u t . [Section: 7.2]
E(s)
G(s)
C(s)
R(s) +
–
FIGURE P7.1
2. Figure P7.2 shows the ramp input r(t) and the output
c(t) of a system. Assuming the output’s steady state
can be approximated by a ramp, ﬁnd [Section: 7.1]
a. the steady-state error;
b. the steady-state error if the input becomes r t   tu t .
t(sec)
6
Mag
4
3
r(t)
c(t)
FIGURE P7.2
3. For the unity feedback system shown in Figure P7.1,
where
G s   60 s  3

 s  4

 s  8


s2 s  6

 s  17


ﬁnd the steady-state error if the input is 80t2u t .
[Section: 7.2]
4. For the system shown in Figure P7.3, what steady-state
error can be expected for the following test inputs:
10u t ; 10tu t ; 10t2u t . [Section: 7.2]
C(s)
R(s) +
–
+
–
++
–
1
3
2
6s
s
s + 4
FIGURE P7.3
5. For the unity feedback system shown in Figure P7.1,
where
G s  
500
s  28

 s2  8s  12


ﬁnd the steady-state error for inputs of 20u(t), 60tu(t),
and 81t2u t . [Section: 7.3]
6. An input of 25t3u t  is applied to the input of a Type 3
unity feedback system, as shown in Figure P7.1,
Problems
367

where
G s   210 s  4

 s  6

 s  11

 s  13


s3 s  7

 s  14

 s  19


Find the steady-state error in position. [Section: 7.3]
7. The steady-state error in velocity of a
system is deﬁned to be
dr
dt  dc
dt


t ®∞
where r is the system input, and c is the system output.
Find the steady-state error in velocity for an input of
t3u(t) to a unity feedback system with a forward
transfer function of [Section: 7.2]
G s   100 s  1

 s  2


s2 s  3

 s  10


8. What is the steady-state error for a step input of 15 units
applied to the unity feedback system of Figure P7.1,
where [Section: 7.3]
G s   1020 s  13

 s  26

 s  33


s  65

 s  75

 s  91


9. A system has Kp  4. What steady-state error can be
expected for inputs of 70u(t) and 70tu(t)? [Section 7.3]
10. For the unity feedback system shown in Figure P7.1,
where [Section: 7.3]
G s  
5000
s s  75


a. What is the expected percent overshoot for a unit step
input?
b. What is the settling time for a unit step input?
c. What is the steady-state error for an input of 5u(t)?
d. What is the steady-state error for an input of 5tu(t)?
e. What is the steady-state error for an input of 5t2u t ?
11. Given the unity feedback system shown in Figure P7.1,
where
G s   500000 s  7

 s  20

 s  45


s s  30

 s  α

 s  50


ﬁnd the value of α to yield a Kv  35000.
[Section: 7.4]
12. For the unity feedback system of Figure P7.1, where
G s   K s  2

 s  4

 s  6


s2 s  5

 s  7


ﬁnd the value of K to yield a static error constant of
10,000. [Section: 7.4]
13. For the system shown in Figure P7.4, [Section: 7.3]
a. Find Kp, Kv, and Ka.
b. Find the steady-state error for an input of 50u(t),
50tu(t), and 50t2u t .
c. State the system type.
5
(s + 3)
C(s)
R(s) +
–
–
s(s + 1)(s + 2)
FIGURE P7.4
14. A Type 3 unity feedback system has r t   10t3 applied
to its input. Find the steady-state position error for this
input if the forward transfer function is [Section: 7.3]
G s   1030 s2  8s  23


s2  21s  18


s3 s  6

 s  13


15. Find the system type for the system of Figure P7.5.
[Section: 7.3]
– –
+
C(s)
10
R(s)
s(s + 5)
100(s + 2)
s
1000
FIGURE P7.5
16. What are the restrictions on the feedforward transfer
function G2(s) in the system of Figure P7.6 to obtain
zero steady-state error for step inputs if: [Section: 7.3]
a. G1(s) is a Type 0 transfer function;
b. G1(s) is a Type 1 transfer function;
c. G1(s) is a Type 2 transfer function?
G2(s)
G1(s)
)3
(
20
+
s
s
R(s)
C(s)
E(s)
+
+ +
–
FIGURE P7.6
17. The steady-state error is deﬁned to be the difference in
position between input and output as time approaches
368
Chapter 7
Steady-State Errors

inﬁnity. Let us deﬁne a steady-state velocity error,
which is the difference in velocity between input and
output. Derive an expression for the error in velocity,
_e ∞

  _r ∞

  _c ∞

, and complete Table P7.1 for the
error in velocity. [Sections: 7.2, 7.3]
18. For the system shown in Figure P7.7, [Section: 7.4]
a. What value of K will yield a steady-state error in
position of 0.01 for an input of 1=10

t?
b. What is the Kv for the value of K found in Part a?
c. What is the minimum possible steady-state position
error for the input given in Part a?
C(s)
E(s)
K(s + 7)
s(s + 5)(s + 8)(s + 12)
R(s) +
–
FIGURE P7.7
19. Given the unity feedback system of Figure P7.1, where
G s  
K s  a


s s  2

 s  15


ﬁnd the value of Ka so that a ramp input of slope 30 will
yield an error of 0.005 in the steady state when compared
to the output. [Section: 7.4]
20. Given the system of Figure P7.8, design the value of K
so that for an input of 100tu(t), there will be a 0.01 error
in the steady state. [Section: 7.4]
R(s)
C(s)
K
s(s + 2)
5s
K
+
– –
FIGURE P7.8
21. Find the value of K for the unity feedback system shown
in Figure P7.1, where
G s   K s  3


s2 s  7


if the input is 10t2u t , and the desired steady-state
error is 0.061 for this input. [Section: 7.4]
22. The unity feedback system of Figure P7.1, where
G s   K s2  3s  30


sn s  5


is to have 1/6000 error between an input of 10tu(t)
and the output in the steady state. [Section: 7.4]
a. Find K and n to meet the speciﬁcation.
b. What are Kp, Kv, and Ka?
23. For the unity feedback system of Figure P7.1,
where [Section: 7.3]
G s   K s2  6s  6


s  5

2 s  3


a. Find the system type.
b. What error can be expected for an input of 12u(t)?
c. What error can be expected for an input of 12tu(t)?
24. For the unity feedback system of Figure P7.1, where
G s  
K s  13

 s  19


s s  6

 s  9

 s  22


ﬁnd the value of K to yield a steady-state error of 0.4 for
a ramp input of 27tu(t). [Section: 7.4]
25. Given the unity feedback system of Figure P7.1, where
G s  
K s  6


s  2

 s2  10s  29


ﬁnd the value of K to yield a steady-state error of
8%. [Section: 7.4]
26. For the unity feedback system of Figure P7.1, where
G s  
K
s s  4

 s  8

 s  10


ﬁnd the minimum possible steady-state position error if
a unit ramp is applied. What places the constraint upon
the error?
27. The unity feedback system of Figure P7.1,where
G s   K s  α


s  β

2
TABLE P7.1
Type
Ramp
Parabola
Input
Step
0
1
2
Problems
369

is to be designed to meet the following speciﬁcations:
steady-state error for a unit step input = 0.1; damping
ratio = 0.5; natural frequency 
ﬃﬃﬃﬃﬃ
10
p
. Find K, α, and
β. [Section: 7.4]
28. A second-order, unity feedback system is to follow a
ramp input with the following speciﬁcations: the
steady-state output position shall differ from the input
position by 0.01 of the input velocity; the natural
frequency of the closed-loop system shall be 10 rad/s.
Find the following:
a. The system type
b. The exact expression for the forward-path transfer
function
c. The closed-loop system’s damping ratio
29. The unity feedback system of Figure P7.1 has a transfer
function Gs  Cs
Es 
K
ss  α and is to follow a ramp
input, r(t) = tu(t), so that the steady-state output position
differs from the input position by 0.01 of the input velocity
(e.g., e∞  1
Kv
 0:01). The natural frequency of the
closed-loop system will be ωn  5 rad=s. [Section: 7.4]
Find the following:
a. The system type
b. The values of K and α
c. The closed-loop system’s damping ratio, ζ
d. If Kis reduced to4and α=0.4, ﬁndthe corresponding
new values of e∞, ωn, and ζ.
30. The unity feedback system of Figure P7.1, where
G s   K s  α


s s  β


is to be designed to meet the following requirements:
The steady-state position error for a unit ramp input
equals 1/10; the closed-loop poles will be located
at 1  j1. Find K, α, and β in order to meet the
speciﬁcations. [Section: 7.4]
31. Given the unity feedback control system of Figure P7.1,
where
G s  
K
sn s  a


ﬁnd the values of n, K, and a in order to meet speciﬁ-
cations of 12% overshoot and Kv  110. [Section: 7.4]
32. Given the unity feedback control system of Figure P7.1,
where
G s  
K
s s  a


ﬁnd the following: [Section: 7.4]
a. K and a to yield Kv  1000 and a 20% overshoot
b. K and a to yield a 1% error in the steady state and a
10% overshoot.
33. Given the system in Figure P7.9, ﬁnd the following:
[Section: 7.3]
a. The closed-loop transfer function
b. The system type
c. The steady-state error for an input of 5u(t)
d. The steady-state error for an input of 5tu(t)
e. Discuss the validity of your answers to Parts c and d.
R(s)
+
_
s2 (s + 1)
1
+
_
s2 (s + 3)
1
C(s)
s
1
FIGURE P7.9
34. RepeatProblem33forthesystemshowninFigureP7.10.
[Section: 7.3]
R(s)
+
_
2
s(s + 1)(s + 3)(s + 4)
10
C(s)
2s
+
_
FIGURE P7.10
35. For the system shown in
Figure P7.11, use MATLAB to ﬁnd
the following: [Section: 7.3]
a. The system type
b. Kp, Kv, and Ka
c. The steady-state error for inputs of
100u(t), 100tu(t), and 100t2u(t)
+
(s + 12)(s + 32)(s + 68)
6(s + 9)(s + 17)
C(s)
13
+
_
s(s + 6)(s + 12)(s + 14)
(s + 9)
s + 7
1
_
_
FIGURE P7.11
370
Chapter 7
Steady-State Errors

36. The system of Figure P7.12 is to have the following
speciﬁcations: Kv  20; ζ  0:7. Find the values of K1
and Kf required for the speciﬁcations of the system to
be met. [Section: 7.4]
K f s
5
s(s + 2)

+
–
K1
–

+
i(s)
 0(s)
FIGURE P7.12
37. The transfer function from elevator deﬂection to
altitude change in a Tower Trainer 60 Unmanned
Aerial Vehicle is
P s 
 h s 
δ s e

34:16s3  144:4s2  7047s  557:2
s5  13:18s4  95:93s3  14:61s2  31:94s
An autopilot is built around the aircraft as shown in
Figure P7.13, with F s   H s   1 and
G s   0:00842 s  7:895

 s2  0:108s  0:3393


s  0:07895

 s2  4s  8


(Barkana, 2005). The steady-state error for a ramp
input in this system is ess  25. Find the slope of the
ramp input.
F(s)
G(s)
P(s)
R(s)
C(s)
+
–
H(s)
FIGURE P7.13
38. Find the total steady-state error due to a unit step
input and a unit step disturbance in the system of
Figure P7.14. [Section: 7.5]
1
s + 5
100
s + 2
C(s)
D(s)
R(s) +
–
+
+
FIGURE P7.14
39. Design the values of K1 and K2 in the system of
Figure P7.15 to meet the following speciﬁcations:
Steady-state error component due to a unit step
disturbance is 0.00001; steady-state error component
due to a unit ramp input is 0.002. [Section: 7.5]
C(s)
K1(s + 2)
(s + 3)
K2
s(s + 4)
D(s)
+
R(s) +
–
+
FIGURE P7.15
40. In Figure P7.16, let G s   5 and P s  
7
s  2.
a. Calculate the steady-state error due to a command
input R s   3
s with D s   0.
b. Verify the result of Part a
using Simulink.
c. Calculate the steady-state error due to a disturbance
input D s    1
s with R s   0.
d. Verify the result of Part c
using Simulink.
e. Calculate the total steady-state error due to a
command input R s   3
s and a disturbance D s  
 1
s applied simultaneously.
f. Verify the result of Part e
using Simulink.
G(s)
P(s)
+
–
R(s)
C(s)
D(s )
+
+
FIGURE P7.16
41. Derive Eq. (7.72) in the text, which is the ﬁnal value of
the actuating signal for nonunity feedback systems.
[Section: 7.6]
42. For each system shown in Figure P7.17, ﬁnd the
following: [Section: 7.6]
a. The system type
b. The appropriate static error constant
c. The input waveform to yield a constant error
(problem continues)
Problems
371

(Continued)
d. The steady-state error for a unit input of the waveform
found in Part c
e. The steady-state value of the actuating signal.
C(s)
s(s + 2)
10(s + 10)
(s + 4)
System 1
C(s)
System 2
R(s) +
–
R(s) +
–
s(s + 2)
10(s + 10)
(s + 1)
FIGURE P7.17
Closed-loop systems with nonunity feedback
43. For each system shown in Figure P7.18, ﬁnd the appro-
priatestaticerrorconstantaswellasthesteady-stateerror,
r ∞

  c ∞

, for unit step, ramp, and parabolic inputs.
[Section: 7.6]
R(s)
(s+ 3)(s+ 7)
s+ 4
C(s)
5
+
_
20
R(s)
(s+ 3)(s+ 7)
s+ 4
C(s)
10
+
_
5
10
System 1
System 2
FIGURE P7.18
44. Given the system shown in Figure P7.19, ﬁnd the
following: [Section: 7.6]
a. The system type
b. The value of K to yield 0.1% error in the steady state.
R(s)
+
–
(s + 1)
s2(s + 2)
C(s)
K
FIGURE P7.19
45. For the system shown in Figure P7.20, [Section: 7.6]
a. What is the system type?
b. What is the appropriate static error constant?
c. Whatisthevalueoftheappropriatestaticerrorconstant?
d. What is the steady-state error for a unit step input?
R(s)
+
–
K(s + 1)
s2(s + 4)
C(s)
(s + 5)
(s + 2)
FIGURE P7.20
46. For the system shown in
Figure P7.21, use MATLAB to ﬁnd
the following for K  10, and K  106:
[Section: 7.6]
a. The system type
b. Kp, Kv, and Ka
c. The steady-state error for inputs of
30u(t), 30tu(t), and 30t2u(t)
R(s)
+
–
K(s + 1)(s + 2)
s2(s + 4)(s + 5)(s + 6)
C(s)
(s + 6)
(s + 8)(s + 9)
FIGURE P7.21
47. A dynamic voltage restorer (DVR) is a device that is
connected in series to a power supply. It continuously
monitors the voltage delivered to the load, and compen-
satesvoltagesagsbyapplyingthenecessaryextravoltage
to maintain the load voltage constant.
In the model shown in Figure P7.22, ur represents
the desired reference voltage, uo is the output voltage,
and ZL is the load impedance. All other parameters are
internal to the DVR (Lam, 2004).
a. AssumingZL  1
sCL
,andβ 6 1,ﬁndthesystem’stype.
b. Find the steady-state error to a unit step input as a
function of β.
1
KT Kv +
Km
1
Ls
1
Cs
1
ZL
−
−α
−β
ur
uo
τs
FIGURE P7.22
DVR Model
372
Chapter 7
Steady-State Errors

48. Derive Eq. (7.69) in the text. [Section: 7.6]
49. Given the system shown in Figure P7.23, do the
following: [Section: 7.6]
a. Derive
the
expression
for
the
error,
E s   R s   C s , in terms of R(s) and D(s).
b. Derive the steady-state error, e ∞

, if R(s) and D(s)
are unit step functions.
c. Determine the attributes of G1 s ; G2 s , and H(s)
necessary for the steady-state error to become
zero.
C(s)
D(s)
G2(s)
+
R(s) +
–
+
G1(s)
H(s)
FIGURE P7.23
System with input and disturbance
50. Given the system shown in Figure P7.24, ﬁnd the
sensitivity of the steady-state error to parameter a.
Assume a step input. Plot the sensitivity as a function
of parameter a. [Section: 7.7]
C(s)
s(s + 2)(s + 5)
K
(s + a)
R(s) +
–
FIGURE P7.24
51. a. Show that the sensitivity to plant changes in the
system of Figure P7.13 is
ST : P  P
T
δT
δP 
1
1  L s 
where L s   G s P s H s  and
T s   C s 
R s   F s 
H s  
L s 
1  L s  :
b. Show that ST:P s   T s Hs
F s 
 1 for all values of s.
52. In Figure P7.13, Ps  5
s ; Hs  1
T s   C s 
R s  
200K
s  1

 s  3

 s2  2s  20


and
ST:P  P
T
δT
δP 
s2  2s
s2  2s  20
a. Find F(s) and G(s).
b. Find the value of K that will result in zero steady-state
error for a unit step input.
53. For the system shown in Figure P7.25, ﬁnd the
sensitivity of the steady-state error for changes in K1
and in K2, when K1  100 and K2  0:1. Assume step
inputs for both the inputand the disturbance.[Section: 7.7]
C(s)
D(s)
+
R(s) +
–
+
K1
s + 1
K2
s + 2
FIGURE P7.25
System with input and disturbance
54. Given the block diagram of the active suspension
system shown in Figure P5.36, (Lin, 1997)
a. Find the transfer function from a road disturbance r
to the error signal e.
b. Use the transfer function in Part a to ﬁnd the steady-
state value of e for a unit step road disturbance.
c. Use the transfer function in Part a to ﬁnd the
steady-state value of e for a unit ramp road
disturbance.
d. From your results in Parts b and c, what is the system’s
type for e?
55. For each of the following closed-loop systems, ﬁnd
the steady-state error for unit step and unit ramp inputs.
Use both the ﬁnal value theorem and input substitution
methods. [Section: 7.8]
a. _x 
5
 4
2
3 10
0
1
1
5
2
4
3
5x 
1
1
0
2
4
3
5 r; y  1
2 1


x
b. _x 
0
1
0
5
9
7
1
0
0
2
4
3
5x 
0
0
1
2
4
3
5 r; y   1
0
0  x
c. _x 
9 5 1
1
0
2
3 2 5
2
4
3
5x 
2
3
5
2
4
3
5 r; y  1
2
4 x
Problems
373

56. A simpliﬁed model of the steering of a four-wheel drive
vehicle is shown in Figure P7.26.
Gf
K
r*
Gr
δf
u (δr)
+
+ +
e
r
–
FIGURE P7.26
Steering model for a four-wheel drive vehicle7
In this block diagram, the output r is the vehicle’s yaw
rate, while δf and δr are the steering angles of the front
and rear tires, respectively. In this model,
r*s 
s
300  0:8
s
10  1
; Gf s 
h1s  h2
s2  a1s  a2
Grs 
h3s  b1
s2  a1s  a2
and K(s) is a controller to be designed. (Yin, 2007).
a. Assuming a step input for δf , ﬁnd the minimum
system type of the controller K(s) necessary so that
in steady-state the error, as deﬁned by the signal e in
Figure P7.26, is zero if at all possible.
b. Assuming a step input for δf , ﬁnd the system type of
the controller K(s) necessary so that in steady state
the error as deﬁned by δf ∞  r∞ is zero if at all
possible.
57. Glycolysis is a feedback process through which living
cells use glucose to generate adenosine triphosphate
(ATP),necessaryforcelloperations.Alinearizedglycol-
ysis model (Chandra, 2011) is given by
_Δx
_Δy



k
a  g  h
q  1k
qa  gq  1  qh

 Δx
Δy



0
1


δ
where δ is the perturbation (disturbance input) on ATP
production, Δy is the change in ATP level (output).
α > 0 is the cooperativity of ATP binding to PFK,
g > 0 is the feedback strength of ATP on PK (PFK
and PK are two different types of glycolytic enzymes),
k > 0 is the intermediate reaction rate, q > 0 is the
autocatalytic stoichiometry, and h > 0 is the feedback
strength of ATP on the PFK enzyme.
a. Since in this system δ is a disturbance input, zero
steady-state error is achieved when Δy
δ  0. Show
that in steady state  _Δx  0; _Δy  0, Δy
δ 
1
a  h :
b. Use the Routh-Hurwitz stability criterion to show that
the system will be closed-loop stable as long as
0 < h  a < k  gq  1
q
c. Assuming that h is the only parameter of choice
for steady-state error adjustments, show that zero
steady-state error is not achievable.
58. As part of the development of a textile cross-lapper
machine
(Kuo,
2010),
a
torque
input,
ut 
1
0  t < 50
1
50  t < 100


, is applied to the motor
of one of the movable racks embedded in a feedback
loop. The corresponding velocity output response is
shown in Figure P7.27.
a. What is the open-loop system’s type?
b. What is the steady-state error?
c. Whatwouldbethesteady-stateerror forarampinput?
0.04
0.03
0.02
0.01
0
–0.01
–0.02
–0.03
–0.04
0       10       20      30      40       50     60       70      80      90     100
Time(sec)
Velocity of the movable rack (m/sec)
FIGURE P7.27
Velocity output response8
59. The block diagram in Figure P7.28 represents a motor
driven by an ampliﬁer with double-nested tachometer
feedback loops (Mitchell, 2010).
7 Yin, G., Chen, N., and Li, P. Improving Handling Stability Performance of
Four-Wheel Steering Vehicle via μ-Synthesis Robust Control. IEEE
Transactions on Vehicular Technology, vol. 56, no. 5, 2007, pp. 2432–
2439. Fig. 2, p. 2434. IEEE Transactions on Vehicular Technology by
Vehicular Technology Society; Institute of Electrical and Electronics
Engineers; IEEE Vehicular Technology Group. Reproduced with permis-
sion of Institute of Electrical and Electronics Engineers, in the format
Republish in a book via Copyright Clearance Center.
8 Kuo, C.-F. J., Tu, H.-M., and Liu, C.-H. Dynamic Modeling and Control
of a Current New Horizontal Type Cross-Lapper Machine. Textile Research
Journal, Vol. 80 (19), pp. 2016–2027, Figure 5. Copyright 2010.
Reprinted by Permission of SAGE.
374
Chapter 7
Steady-State Errors

a. Find the steady-state error of this system to a step
input.
b. What is the system type?
K1
I
O
K2
1+ sT2
+
–
K3
1+ sT3
sv3
sv2
β
K4
1+ sT4
+
–
+
–
FIGURE P7.289
60. PID control, which is discussed in Chapter 9, may be
recommended for Type 3 systems when the output in
a feedback system is required to perfectly track a
parabolic as well as step and ramp reference signals
(Papadopoulos, 2013). In the system of Figure P7.29,
the transfer functions of the plant, GP(s), and the
recommended controller, GC(s), are given by:
GPs 
127e0:2s
ss  1s  2s  52s  10
GCs  92:9s2  13:63s  1
97:6s20:1s  1
Use Simulink to model this system
and plot its response (from 0 to
300 seconds) to a unit-step reference
input, r(t), applied at t = 0, and (on the
same graph) to a disturbance, d(t) = 0.25 r
(t), applied at t = 150 seconds. What are
the values of the steady-state error due
to the reference input and due to the
disturbance? What about the relative sta-
bility of this Type 3 system as evidenced
by thepercent overshoot in response to the
unit-step reference input?
+
+
–
R(s)
C(s)
GC (s)
E(s)
+
D(s)
GP (s)
FIGURE P7.29
61. A Type 3 feedback control
system (Papadopoulos, 2013)
was presented in Problem 60. Modify the
Simulink model you developed in that
problem to plot its response (from 0 to
100 seconds) to a unit-ramp reference
input, r(t)= tu(t), applied at t = 0,
and (on the same graph) to a disturbance,
d(t) = 0.25tu(t), applied at t = 50
seconds. What are the values of the
steady-state position error due to the
reference-input and disturbance ramps?
Copy this model and paste it in the
same ﬁle. Then, in that copy, change the
reference input to a unit parabola,
r(t) = 0.5 t2 u(t), applied at t = 0, and
the disturbance to d(t) = 0.125t2u(t),
applied at t = 50 seconds, and plot, on a
newgraph(Scope1),thesystem’s response
to these parabolic signals.
DESIGN PROBLEMS
DESIGN PROBLEMS
62. Motion control, which includes position or force
control, is used in robotics and machining. Force
control requires the designer to consider two phases:
contact and noncontact motions. Figure P7.30(a) is a
diagram of a mechanical system for force control
under contact motion. A force command, Fcmd(s), is
the input to the system, while the output, F(s), is the
controlled contact force.
–
+
+
Fcmd(s)
K2
K1
Force
sensor
Electric
motor
Rotational
direction
Des + Ke
Environment (Des + Ke)
(b)
(a)
F(s)
Fcmd(s)
F(s)
(s)
ω
ref(s)
ω
–
1
s
1
s
.
θ(s)
θ(s)
FIGURE P7.30
a. Force control mechanical loop under contact
motion;10 b. block diagram10
9 Mitchell, R. J. More Nested Velocity Feedback Control. IEEE 9th
International Conference on Cybernetic Intelligent Systems (CIS), 2010.
Figure 5, page 3 of the paper.
10 Ohnishi, K.; Shibata, M.; and Murakami, T. Motion Control for Advanced
Mechatronics. IEEE/ASME Transactions on Mechatronics, vol. 1, no. 1,
March1996,Figures14&16,p.62.IEEE/ASMEtransactionsonmechatronics:
a joint publication of the IEEE Industrial Electronics Society and the ASME
Dynamic Systems and Control Division by Institute of Electrical and
Electronics Engineers; IEEE Industrial Electronics Society; American
Society of Mechanical Engineers. Dynamic Systems and Control Division
Reproduced with permission of IEEE in the format Republish in a book via
Copyright Clearance Center.
Problems
375

In the ﬁgure a motor is used as the force actuator.
The force output from the actuator is applied to the
object through a force sensor. A block diagram repre-
sentation of the system is shown in Figure P7.30(b).
K2 is velocity feedback used to improve the transient
response. The loop is actually implemented by an
electrical loop (not shown) that controls the armature
current of the motor to yield the desired torque at the
output. Recall that Tm  Ktia (Ohnishi, 1996). Find an
expression for the range of K2 to keep the steady-state
force error below 10% for ramp inputs of commanded
force.
63. An open-loop swivel controller and plant for an
industrial robot has the transfer function
Ge s   ωo s 
Vi s  
K
s  10

 s2  4s  10


where ωo s  is the Laplace transform of the robot’s
angular swivel velocity and Vi(s) is the input voltage
to the controller. Assume Ge(s) is the forward transfer
function of a velocity control loop with an input
transducer and sensor, each represented by a constant
gain of 3 (Schneider, 1992).
a. Find the value of gain, K, to minimize the steady-
state error between the input commanded angular
swivel velocity and the output actual angular swivel
velocity.
b. What is the steady-state error for the value of K
found in Part a?
c. For what kind of input does the design in Part a
apply?
64. Packet information ﬂow in a router working under
TCP/IP can be modeled using the linearized transfer
function
P s   Q s 
f s  
C2
2N esR
s  2N
R2C


s  1
R


where
C = link capacity (packets/second)
N = load factor (number of TCP sessions)
Q = expected queue length
R = round trip time (second)
p = probability of a packet drop
The objective of an active queue management (AQM)
algorithm is to automatically choose a packet-drop
probability, p, so that the queue length is maintained
at a desired level. This system can be represented by
the block diagram of Figure P7.13 with the plant model
in the P(s) block, the AQM algorithm in the G(s)
block, and F s   H s   1. Several AQM algorithms
are available, but one that has received special attention in
the literature is the random early detection (RED)
algorithm. This algorithm can be approximated with
G s   LK
s  K, where L and K are constants (Hollot,
2001). Find the value of L required to obtain a 10%
steady-state error for a unit step input when C = 3750
packets/s, N = 50 TCP sessions, R = 0.1 s, and K = 0.005.
65. In Figure P7.16, the plant, P s  48;500
s22:89s; represents
the dynamics of a robotic manipulator joint. The
system’s output, C(s), is the joint’s angular position
(Low, 2005). The system is controlled in a closed-
loop conﬁguration as shown with G s   KP  KI
s , a
proportional-plus-integral (PI) controller to be dis-
cussed in Chapter 9. R(s) is the joint’s desired angular
position. D(s) is an external disturbance, possibly
caused by improper dynamics modeling, Coulomb
friction, or other external forces acting on the joint.
a. Find the system’s type.
b. Show that for a step disturbance input, ess  0 when
KI 6 0.
c. Find the value of KI that will result in ess  5% for a
parabolic input.
d. Using the value of KI found in Part c, ﬁnd the range
of KP for closed-loop stability.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
66. Control of HIV/AIDS. Consider the HIV infection
model of Problem 68 in Chapter 6 and its block diagram
in Figure P6.17 (Craig, 2004).
a. Find the system’s type if G(s) is a constant.
b. It was shown in Problem 68, Chapter 6, that when
G s   K
the
system
will
be
stable
when
K < 2:04  104. What value of K will result in a
unit step input steady-state error of 10%?
c. It is suggested that to reduce the steady-state error
the system’s type should be augmented by making
G s   K
s . Is this a wise choice? What is the resulting
stability range for K?
67. Hybrid vehicle. Figure P7.31 shows the block diagram
of the speed control of an HEV taken from Figure P5.53,
376
Chapter 7
Steady-State Errors

and rearranged as a unity feedback system (Preitl,
2007). Here the system output is Cs  KSSVs, the
output voltage of the speed sensor/transducer.
UC (s)
E (s)
+
_
R (s)
C(s)
0.11 (s + 0.6)
s (s + 0.5173)  +  5 (s + 0.6) (s + 0.01908)
GSC(s)
FIGURE P7.31
a. Assume
the
speed
controller
is
given
as
GSCs  KPSC. Find the gain, KPSC, that yields a
steady-state error, estep∞  1%.
b. Now assume that in order to reduce the steady-state
error for step inputs, integration is added to the
controller
yielding
GSCs  KPSC  KISC=s 
100  KISC=s. Find the value of the integral gain,
KISC,thatresultsinasteady-stateerror,eramp∞2:5%.
c. In Parts a and b, the HEV was assumed to be driven
on level ground. Consider the case when, after
reaching a steady-state speed with a controller
given by GSCs  100  40
s , the car starts climbing
up a hill with a gradient angle, α  5°. For small
angles sin α  α (in radians) and, hence, when
reﬂected to the motor shaft the climbing torque is
Tst  Fstr
itot
 mgr
itot
sin α  mgrα
itot
 1590  9:8  0:3  5
4:875  57:3
 83:7 Nm:
The block diagram in Figure P7.32 represents the
control system of the HEV rearranged for Part c.
s+0.01908
–
G2(s) = Equivalent transfer function of the car
Tst(s)+
–E(s)=–KSS V(s)
(s + 0.5)
13.53 s
s
100s + 40
(s + 0.5)
3 (s + 0.6)
+
+
G1(s) = Transfer function representation
of torque & speed controllers
FIGURE P7.32
In this diagram, the input is Tstt  83:7 ut, corre-
sponding to α = 5°, and the output is the negative error,
et  ct  KSSvt, proportional to the change in
car speed, v(t). Find the steady-state error e(∞) due to a
step change in the disturbance; e.g., the climbing torque,
Tstt  83:7 ut.
68. Parabolic trough collector. The parabolic trough
collector (Camacho, 2012) is embedded in a unit
feedback conﬁguration as shown in Figure P7.1, where
Gs  GCsPs and
Ps 
137:2  106
S2  0:0224s  196  106 e39s
a. Assuming GCs  K, ﬁnd the value of K required
for a unit-step input steady-state error of 3%. Use
the result you obtained in Problem 70, Chapter 6, to
verify that the system is closed-loop stable when
that value of K is used.
b. What is the minimum unit-step input steady-state
error achievable with GCs  K?
c. What is the simplest compensator, GCs, that can be
used to achieve a steady-state error of 0%?
Cyber Exploration Laboratory
Experiment 7.1
Objective
To verify the effect of input waveform, loop gain, and system type upon
steady-state errors.
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1. What system types will yield zero steady-state error for step inputs?
2. What system types will yield zero steady-state error for ramp inputs?
3. What system types will yield inﬁnite steady-state error for ramp inputs?
Cyber Exploration Laboratory
377

4. What system types will yield zero steady-state error for parabolic inputs?
5. What system types will yield inﬁnite steady-state error for parabolic inputs?
6. For the negative feedback system of Figure P7.33, where G s  
K s  6


s  4

 s  7

 s  9

 s  12


and H s   1, calculate the steady-state error in terms of K for the following inputs:
5u(t), 5tu(t), and 5t2u t .
7. Repeat Prelab 6 for G s  
K s  6

 s  8


s s  4

 s  7

 s  9

 s  12

 and H s   1.
8. Repeat Prelab 6 for G s  
K s  1

 s  6

 s  8


s2 s  4

 s  7

 s  9

 s  12

 and H s   1.
Lab
1. Using Simulink, set up the negative feedback system of Prelab 6. Plot on one graph the
error signal of the system for an input of 5u(t) and K  50; 500; 1000, and 5000. Repeat
for inputs of 5tu(t) and 5t2u t .
2. Using Simulink, set up the negative feedback system of Prelab 7. Plot on one graph the
error signal of the system for an input of 5u(t) and K  50; 500; 1000, and 5000. Repeat
for inputs of 5tu(t) and 5t2u t .
3. Using Simulink, set up the negative feedback system of Prelab 8. Plot on one graph the
error signal of the system for an input of 5u(t) and K  200; 400; 800, and 1000. Repeat
for inputs of 5tu(t) and 5t2u t .
Postlab
1. Use your plots from Lab 1 and compare the expected steady-state errors to those
calculated in the Prelab. Explain the reasons for any discrepancies.
2. Use your plots from Lab 2 and compare the expected steady-state errors to those
calculated in the Prelab. Explain the reasons for any discrepancies.
3. Use your plots from Lab 3 and compare the expected steady-state errors to those
calculated in the Prelab. Explain the reasons for any discrepancies.
Experiment 7.2
Objective
To use the LabVIEW Control Design and Simulation Module for analysis of
steady-state performance for step and ramp inputs.
Minimum Required Software Package
LabVIEW with the Control Design and
Simulation Module
Prelab You are given the model of a single joint of a robotic manipulator shown in
Figure P7.34 (Spong, 2005), where B is the coefﬁcient of viscous friction, θds is the
desired angle, θ(s) is the output angle, and D(s) is the disturbance. We want to track the
joint angle using a PD controller, which we will study in Chapter 9. Assume J  B  1.
Find the step and ramp responses of this system for the following combinations of PD
gains KP; KD: (16, 7), (64, 15), and (144, 23).
+
+
KP + KDs
θ (s)
θd (s)
PD controller 
Plant
1
Js2 + Bs
–
–
D (s)
FIGURE P7.34
R(s) +
C(s)
G(s)
H(s)
–
FIGURE P7.33
378
Chapter 7
Steady-State Errors

Bibliography
Barkana, I. Classical and Simple Adaptive Control of Nonminimum Phase Autopilot Design. Journal
of Guidance, Control, and Dynamics, vol. 28, 2005, pp. 631–638.
Bylinkski, G. Silicon Valley High Tech: Window to the Future. Intercontinental Publishing Corp, Ltd.,
Hong Kong, 1985. Figure caption source for Figure 7.9.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Chandra, F. A., Buzi, G., and Doyle, J. C. Glycolytic Oscillations and Limits on Robust
Efﬁciency. Science, vol. 333, American Association for the Advancement of Science,
July 8, 2011, pp. 187–192.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
D’Azzo, J. J., and Houpis, C. H. Feedback Control System Analysis and Design Conventional and
Modern, 3d ed. McGraw-Hill, New York, 1988.
Hollot, C. V., Misra, V., Towsley, D., and Gong, W. A Control Theoretic Analysis of RED.
Proceedings of IEEE INFOCOM, 2001, pp. 1510–1519.
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed.
Saunders College Publishing, New York, 1989.
Isailović, J. Videodisc and Optical Memory Systems. Prentice Hall, Upper Saddle River, NJ, 1985.
Kuo, C.-F. J., Tu, H.-M., and Liu, C.-H. Dynamic Modeling and Control of a Current New Horizontal
Type Cross-Lapper Machine. Textile Research Journal, vol. 80, no. 19, Sage, 2010, pp. 2016–2027.
Lam, C. S., Wong, M. C., and Han, Y. D. Stability Study on Dynamic Voltage Restorer (DVR). Power
Electronics Systems and Applications, 2004; Proceedings First International Conference on Power
Electronics, 2004, pp. 66–71.
Lin, J.-S., and Kanellakopoulos, I. Nonlinear Design of Active Suspensions. IEEE Control Systems,
vol. 17, issue 3, June 1997, pp. 45–59.
Low, K. H., Wang, H., Liew, K. M., and Cai, Y. Modeling and Motion Control of Robotic Hand for
Telemanipulation Application. International Journal of Software Engineering and Knowledge
Engineering, vol. 15, 2005, pp. 147–152.
Mitchell, R. J. More Nested Velocity Feedback Control. IEEE 9th International Conference on
Cybernetic Intelligent Systems (CIS), 2010.
Ohnishi, K., Shibata, M., and Murakami, T. Motion Control for Advanced Mechatronics. IEEE/ASME
Transactions on Mechatronics, vol. 1, no. 1, March 1996, pp. 56–67.
Papadopoulos, K . G., Papastefanaki, E. N., and Margaris, N. I. Explicit Analytical PID Tuning Rules
for the Design of Type-III Control Loops. IEEE Transactions on Industrial Electronics, vol. 60,
no. 10, October 2013, pp. 4650–4664.
Lab
1. Create a LabVIEW VI to simulate the response of this system to a step and a ramp inputs,
under no-disturbance conditions. Use the functions available in the Control Design and
Simulation/Control Design palette.
2. Create a LabVIEW VI using the functions available in the Control Design and
Simulation/Simulation palette, to track an input set-point of 10 under a disturbance
of D = 40.
Postlab Compare your results with those of the Prelab. What conclusions can you
draw from the various responses of this system to different inputs and different PD
parameters? What is the system type? Does the steady-state behavior corroborate the
theory you learned regarding system type and the steady-state error for various inputs?
Explain your answer.
Bibliography
379

Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Intelligence and Informatics,
IEEE, 2007, pp. 157–162 .
Schneider, R. T. Pneumatic Robots Continue to Improve. Hydraulics & Pneumatics, October 1992,
pp. 38–39.
Spong, M., Hutchinson, S., and Vidyasagar, M. Robot Modeling and Control. John Wiley & Sons.
Hoboken, NJ, 2006.
Yin, G., Chen, N., and Li, P. Improving Handling Stability Performance of Four-Wheel Steering
Vehicle via μ-Synthesis Robust Control. IEEE Transactions on Vehicular Technology, vol. 56,
no. 5, 2007, pp. 2432–2439.
380
Chapter 7
Steady-State Errors

Root Locus Techniques
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Deﬁne a root locus (Sections 8.1–8.2)
• State the properties of a root locus (Section 8.3)
• Sketch a root locus (Section 8.4)
• Find the coordinates of points on the root locus and their associated gains
(Sections 8.5–8.6)
• Use the root locus to design a parameter value to meet a transient response
speciﬁcation for systems of order 2 and higher (Sections 8.7–8.8)
• Sketch the root locus for positive-feedback systems (Section 8.9)
• Find the root sensitivity for points along the root locus (Section 8.10)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to ﬁnd the preampliﬁer gain to meet a transient
response speciﬁcation.

8
381

• Given the pitch or heading control system for the Unmanned Free-Swimming
Submersible vehicle shown on the back endpapers, you will be able to plot the
root locus and design the gain to meet a transient response speciﬁcation. You
will then be able to evaluate other performance characteristics.
8.1 Introduction
Root locus, a graphical presentation of the closed-loop poles as a system parameter is
varied, is a powerful method of analysis and design for stability and transient response
(Evans, 1948, 1950). Feedback control systems are difﬁcult to comprehend from a
qualitative point of view, and hence they rely heavily upon mathematics. The root locus
covered in this chapter is a graphical technique that gives us the qualitative description
of a control system’s performance that we are looking for and also serves as a powerful
quantitative tool that yields more information than the methods already discussed.
Up to this point, gains and other system parameters were designed to yield a desired
transient response for only ﬁrst- and second-order systems. Even though the root locus can
be used to solve the same kind of problem, its real power lies in its ability to provide
solutions for systems of order higher than 2. For example, under the right conditions, a
fourth-order system’s parameters can be designed to yield a given percent overshoot and
settling time using the concepts learned in Chapter 4.
The root locus can be used to describe qualitatively the performance of a system as
various parameters are changed. For example, the effect of varying gain upon percent
overshoot, settling time, and peak time can be vividly displayed. The qualitative description
can then be veriﬁed with quantitative analysis.
Besides transient response, the root locus also gives a graphical representation of a
system’s stability. We can clearly see ranges of stability, ranges of instability, and the
conditions that cause a system to break into oscillation.
Before presenting root locus, let us review two concepts that we need for the ensuing
discussion: (1) the control system problem and (2) complex numbers and their representa-
tion as vectors.
The Control System Problem
We have previously encountered the control system problem in Chapter 6: Whereas the
poles of the open-loop transfer function are easily found (typically, they are known by
inspection and do not change with changes in system gain), the poles of the closed-loop
transfer function are more difﬁcult to ﬁnd (typically, they cannot be found without
factoring the closed-loop system’s characteristic polynomial, the denominator of the
closed-loop transfer function), and further, the closed-loop poles change with changes in
system gain.
A typical closed-loopfeedback control system is shown in Figure 8.1(a). The open-loop
transfer function was deﬁned in Chapter 5 as KG(s)H(s). Ordinarily, we can determine the
poles of KG(s)H(s), since these poles arise from simple cascaded ﬁrst- or second-order
subsystems. Further, variations in K do not affect the location of any pole of this function. On
the other hand, we cannot determine the poles of Ts  KGs=1  KGsHs unless we
factor the denominator. Also, the poles of T(s) change with K.
Let us demonstrate. Letting
Gs  NGs
DGs
(8.1)
and
Hs  NHs
DHs
(8.2)
382
Chapter 8
Root Locus Techniques

then
Ts 
KNGsDHs
DGsDHs  KNGsNHs
(8.3)
where N and D are factored polynomials and signify numerator and denominator terms,
respectively. We observe the following: Typically, we know the factors of the numerators
and denominators of G(s) and H(s). Also, the zeros of T(s) consist of the zeros of G(s)
and the poles of H(s). The poles of T(s) are not immediately known and in fact can
change with K. For example, if Gs  s  1=ss  2 and Hs  s  3=s  4, the
poles of KG(s)H(s) are 0; 	2; and 	 4. The zeros of KG(s)H(s) are 	1 and 	 3. Now,
T s   K s  1

 s  4

=s3  6  K

s2  8  4K

s  3K. Thus, the zeros of T(s) consist of
the zeros of G(s) and the poles of H(s). The poles of T(s) are not immediately known without
factoring the denominator, and they are a function of K. Since the system’s transient response
and stability are dependent upon the poles of T(s), we have no knowledge of the system’s
performance unless we factor the denominator for speciﬁc values of K. The root locus will be
used to give us a vivid picture of the poles of T(s) as K varies.
Vector Representation of Complex Numbers
Any complex number, σ  jω, described in Cartesian coordinates can be graphically
represented by a vector, as shown in Figure 8.2(a). The complex number also can be
described in polar form with magnitude M and angle θ, as Mθ. If the complex number is
substituted into a complex function, F(s), another complex number will result. For
example, if Fs  s  a, then substituting the complex number s  σ  jω yields
Fs  σ  a  jω, another complex number. This number is shown in Figure 8.2(b).
Notice that F(s) has a zero at 	a. If we translate the vector a units to the left, as in
Figure 8.2(c), we have an alternate representation of the complex number that originates
at the zero of F(s) and terminates on the point s  σ  jω.
We conclude that (s  a) is a complex number and can be represented by a vector
drawn from the zero of the function to the point s. For example, s  7js®5j2 is a complex
number drawn from the zero of the function, 	7, to the point s, which is 5  j2, as shown in
Figure 8.2(d).
Now let us apply the concepts to a complicated function. Assume a function
Fs 
Π
m
i1s  zi
Π
n
j1s  pj
 Π numerator’s complex factors
Π denominator’s complex factors
(8.4)
+
Ea(s)
–
H(s)
KG(s)
Input
R(s)
Actuating
signal
Forward
transfer
function
Output
C(s)
Feedback
transfer
function
(a)
C(s)
R(s)
KG(s)
1 + KG(s)H(s)
(b)
FIGURE 8.1
a. Closed-loop
system; b. equivalent transfer
function
8.1 Introduction
383

where the symbol Π means “product,” m  number of zeros; and n  number of poles.
Each factor in the numerator and each factor in the denominator is a complex number that
can be represented as a vector. The function deﬁnes the complex arithmetic to be
performed in order to evaluate F(s) at any point, s. Since each complex factor can be
thought of as a vector, the magnitude, M, of F(s) at any point, s, is
M  Π zero lengths
Π pole lengths 
Π
m
i1j s  zi

j
Π
n
j1js  pjj
(8.5)
where a zero length, js  zij, is the magnitude of the vector drawn from the zero of F(s) at
	zi to the point s, and a pole length, js  pjj, is the magnitude of the vector drawn from the
pole of F(s) at 	pj to the point s. The angle, θ, of F(s) at any point, s, is
θ  P zero angles 	 P pole angles

X
m
i1
 s  zi

 	
X
n
j1
 s  pj
(8.6)
where a zero angle is the angle, measured from the positive extension of the real axis, of a
vector drawn from the zero of F(s) at 	zi to the point s, and a pole angle is the angle,
measured from the positive extension of the real axis, of the vector drawn from the pole of
F(s) at 	pj to the point s.
s-plane
jω
jω
M
(a)
(b)
(d)
5
–7
(c)
s-plane
+ a
s-plane
j2
s-plane
jw
jω
jω
jω
jω
–a
σ
σ
σ
σ
σ
σ
σ
θ
FIGURE 8.2
Vector
representation of complex
numbers: a. s  σ  jω;
b. s  a; c. alternate
representation of s  a;
d. s  7js®5j2
384
Chapter 8
Root Locus Techniques

As a demonstration of Eqs. (8.5) and (8.6), consider the following example.
Skill-Assessment Exercise 8.1
PROBLEM: Given
Fs  s  2s  4
ss  3s  6
ﬁnd F(s) at the point s  	7  j9 the following ways:
a. Directly substituting the point into F(s)
b. Calculating the result using vectors
ANSWER:
	0:0339 	 j0:0899  0:096  	 110:7°
The complete solution is at www.wiley.com/college/nise.
TryIt 8.1
Use the following MATLAB
statements to solve the problem
given in Skill-Assessment
Exercise 8.1.
s=-7+9j;
G=(s+2)*(s+4)/...
(s*(s+3)*(s+6));
Theta=(180/pi)*...
angle(G)
M=abs(G)
Example 8.1
Evaluation of a Complex Function via Vectors
Evaluation of a Complex Function via Vectors
PROBLEM: Given
Fs  s  1
ss  2
(8.7)
ﬁnd F(s) at the point s  	3  j4.
SOLUTION: The problem is graphically depicted in Figure 8.3, where each
vector, s  α, of the function is shown terminating on the selected point
s  	3  j4. The vector originating at the zero at 	1 is
ﬃﬃﬃﬃﬃ
20
p
116:6°
(8.8)
The vector originating at the pole at the origin is
5126:9°
(8.9)
The vector originating at the pole at 	2 is
ﬃﬃﬃﬃﬃ
17
p
104:0°
(8.10)
Substituting Eqs. (8.8) through (8.10) into Eqs. (8.5) and (8.6) yields
Mθ 
ﬃﬃﬃﬃﬃ
20
p
5
ﬃﬃﬃﬃﬃ
17
p
116:6° 	 126:9° 	 104:0°  0:217 	 114:3°
(8.11)
as the result for evaluating F(s) at the point 	3  j4.
j1
j2
j3
j4
s-plane
jω
–2
–1
0
(s + 2)
(s + 1)
–3
(s)
σ
FIGURE 8.3
Vector representation
of Eq. (8.7)
8.1 Introduction
385

We are now ready to begin our discussion of the root locus.
8.2 Deﬁning the Root Locus
A security camera system similar to that shown in Figure 8.4(a) can automatically follow a
subject. The tracking system monitors pixel changes and positions the camera to center
the changes.
The root locus technique can be used to analyze and design the effect of loop gain
upon the system’s transient response and stability. Assume the block diagram representation
of a tracking system as shown in Figure 8.4(b), where the closed-loop poles of the system
change location as the gain, K, is varied. Table 8.1, which was formed by applying the
quadratic formula to the denominator of the transfer function in Figure 8.4(c), shows the
variation of pole location for different values of gain, K. The data of Table 8.1 is graphically
displayed in Figure 8.5(a), which shows each pole and its gain.
As the gain, K, increases in Table 8.1 and Figure 8.5(a), the closed-loop pole, which is
at 	10 for K  0, moves toward the right, and the closed-loop pole, which is at 0 for K  0,
moves toward the left. They meet at 	5, break away from the real axis, and move into the
complex plane. One closed-loop pole moves upward while the other moves downward. We
cannot tell which pole moves up or which moves down. In Figure 8.5(b), the individual
closed-loop pole locations are removed and their paths are represented with solid lines. It is
this representation of the paths of the closed-loop poles as the gain is varied that we call a
root locus. For most of our work, the discussion will be limited to positive gain, or K  0.
The root locus shows the changes in the transient response as the gain, K, varies.
First of all, the poles are real for gains less than 25. Thus, the system is overdamped. At a
gain of 25, the poles are real and multiple and hence critically damped. For gains above 25,
the system is underdamped. Even though these preceding conclusions were available
(a)
Largeformat 4 5/iStockphoto.
K1
s(s + 10)
R(s)
Subject’s
position
+
–
C(s)
Camera
position
C(s)
s2 + 10s + K
where K = K1K2
(b)
(c)
Amplifier
Motor
and camera
K2
R(s)
K
Sensors
FIGURE 8.4
a. Security cameras with auto tracking can be used to follow moving objects
automatically; b. block diagram; c. closed-loop transfer function
386
Chapter 8
Root Locus Techniques

through the analytical techniques covered in Chapter 4, the following conclusions are
graphically demonstrated by the root locus.
Directing our attention to the underdamped portion of the root locus, we see that
regardless of the value of gain, the real parts of the complex poles are always the same. Since
the settling time is inversely proportional to the real part of the complex poles for this
second-order system, the conclusion is that regardless of the value of gain, the settling time
for the system remains the same under all conditions of underdamped responses.
Also, as we increase the gain, the damping ratio diminishes, and the percent overshoot
increases. The damped frequency of oscillation, which is equal to the imaginary part of the
pole, also increases with an increase in gain, resulting in a reduction of the peak time.
Finally, since the root locus never crosses over into the right half-plane, the system is always
stable, regardless of the value of gain, and can never break into a sinusoidal oscillation.
These conclusions for such a simple system may appear to be trivial. What we are
about to see is that the analysis is applicable to systems of order higher than two. For these
TABLE 8.1
Pole location as function of gain for the
system of Figure 8.4
K
Pole 1
Pole 2
0
	10
0
5
	9.47
	0.53
10
	8.87
	1.13
15
	8.16
	1.84
20
	7.24
	2.76
25
	5
	5
30
	5  j2:24
	5 	 j2:24
35
	5  j3:16
	5 	 j3:16
40
	5  j3:87
	5 	 j3:87
45
	5  j4:47
	5 	 j4:47
50
	5  j5
	5 	 j5
σ
σ
–1
0
–2
–3
–4
–6
–7
–8
–9
–10
–5
30
K = 50
45
40
35
(b)
30
35
40
45
K = 50
 s-plane
5
10
15
20
25
20
15
10
5
K = 0
0 = K
j1
j2
j3
j4
j5
–j1
–j2
–j3
–j4
–j5
(a)
jω
jω
–1
0
–2
–3
–4
–6
–7
–8
–9
–10
j1
j2
j3
j4
j5
–j1
–j2
–j3
–j4
–j5
–5
30
K = 50
45
40
35
30
35
40
45
K = 50
 s-plane
5
10
15
20
25
20
15
10
5
K = 0
0 = K
FIGURE 8.5
a. Pole plot from Table 8.1; b. root locus
8.2 Deﬁning the Root Locus
387

systems, it is difﬁcult to tie transient response characteristics to the pole location. The root
locus will allow us to make that association and will become an important technique in the
analysis and design of higher-order systems.
8.3 Properties of the Root Locus
In Section 8.2, we arrived at the root locus by factoring the second-order polynomial in the
denominator of the transfer function. Consider what would happen if that polynomial were
of ﬁfth or tenth order. Without a computer, factoring the polynomial would be quite a
problem for numerous values of gain.
We are about to examine the properties of the root locus. From these properties we
will be able to make a rapid sketch of the root locus for higher-order systems without having
to factor the denominator of the closed-loop transfer function.
The properties of the root locus can be derived from the general control system of
Figure 8.1(a). The closed-loop transfer function for the system is
Ts 
KGs
1  KGsHs
(8.12)
From Eq. (8.12), a pole, s, exists when the characteristic polynomial in the denominator
becomes zero, or
KGsHs  	1  12k  1180°
k  0; 1; 2; 3; . . .
(8.13)
where 	1 is represented in polar form as 1 2k  1180°. Alternately, a value of s is a
closed-loop pole if
jKGsHsj  1
(8.14)
and
KGsHs  2k  1180°
(8.15)
Equation (8.13) implies that if a value of s is substituted into the function KG(s)H(s),
a complex number results. If the angle of the complex number is an odd multiple of 180°,
that value of s is a system pole for some particular value of K. What value of K? Since the
angle criterion of Eq. (8.15) is satisﬁed, all that remains is to satisfy the magnitude criterion,
Eq. (8.14). Thus,
K 
1
jGsjjHsj
(8.16)
We have just found that a pole of the closed-loop system causes the angle of KG(s)H(s),
or simply G(s)H(s) since K is a scalar, to be an odd multiple of 180°. Furthermore, the
magnitude of KG(s)H(s) must be unity, implying that the value of K is the reciprocal of the
magnitude of G(s)H(s) when the pole value is substituted for s.
Let us demonstrate this relationship for the second-order system of Figure 8.4. The
fact that closed-loop poles exist at 	9:47 and 	0:53 when the gain is 5 has already been
established in Table 8.1. For this system,
KGsHs 
K
ss  10
(8.17)
388
Chapter 8
Root Locus Techniques

Substituting the pole at 	9:47 for s and 5 for K yields KGsHs  	1. The student can
repeat the exercise for other points in Table 8.1 and show that each case yields
KGsHs  	1.
It is helpful to visualize graphically the meaning of Eq. (8.15). Let us apply the
complex number concepts reviewed in Section 8.1 to the root locus of the system shown in
Figure 8.6. For this system the open-loop transfer function is
KGsHs  Ks  3s  4
s  1s  2
(8.18)
The closed-loop transfer function, T(s), is
Ts 
Ks  3s  4
1  Ks2  3  7Ks  2  12K
(8.19)
If point s is a closed-loop system pole for some value of
gain, K, then s must satisfy Eqs. (8.14) and (8.15).
Consider the point 	2  j3. If this point is a closed-loop
pole for some value of gain, then the angles of the zeros minus
the angles of the poles must equal an odd multiple of 180°. From
Figure 8.7,
θ1  θ2 	 θ3 	 θ4  56:31°  71:57° 	 90° 	 108:43°
 	70:55°
(8.20)
Therefore, 	2  j3 is not a point on the root locus, or
alternatively, 	2  j3 is not a closed-loop pole for any gain.
Ifthesecalculationsarerepeatedforthepoint	2j
ﬃﬃﬃ
2
p
=2,
the angles do add up to 180°. That is, 	2j
ﬃﬃﬃ
2
p
=2 is a point on
the root locus for some value of gain. We now proceed to evaluate
that value of gain.
jω
j3
L4
s-plane
L3
L2
L1
–1
–2
–3
– 4
σ
θ1
θ2
θ3
θ4
FIGURE 8.7
Vector representation of G(s) from Figure 8.6(a)
at 	2  j3
K(s + 3) (s + 4)
(s + 1) (s + 2)
R(s)
(a)
(b)
C(s)
–
+
–4
jω
s-plane
–3
–2
–1
σ
FIGURE 8.6
a. Example
system; b. pole-zero plot of G(s)
8.3 Properties of the Root Locus
389

From Eqs. (8.5) and (8.16),
K 
1
jGsHsj  1
M  Π pole lengths
Π zero lengths
(8.21)
Looking at Figure 8.7 with the point 	2  j3 replaced by 	2  j
ﬃﬃﬃ
2
p
=2, the gain, K, is
calculated as
K  L3L4
L1L2

ﬃﬃﬃ
2
p
2 1:22
2:121:22  0:33
(8.22)
Thus, the point 	2  j
ﬃﬃﬃ
2
p
=2 is a point on the root locus for a gain of 0.33.
We summarize what we have found as follows: Given the poles and zeros of the
open-loop transfer function, KG(s)H(s), a point in the s-plane is on the root locus for a
particular value of gain, K, if the angles of the zeros minus the angles of the poles, all
drawn to the selected point on the s-plane, add up to 2k  1180°. Furthermore, gain K at
that point for which the angles add up to 2k  1180° is found by dividing the product of
the pole lengths by the product of the zero lengths.
8.4 Sketching the Root Locus
It appears from our previous discussion that the root locus can be obtained by sweeping
through every point in the s-plane to locate those points for which the angles, as
previously described, add up to an odd multiple of 180°. Although this task is tedious
without the aid of a computer, the concept can be used to develop rules that can be used to
sketch the root locus without the effort required to plot the locus. Once a sketch is
Skill-Assessment Exercise 8.2
PROBLEM: Given a unity feedback system that has the forward transfer function
Gs 
Ks  2
s2  4s  13
do the following:
a. Calculate the angle of G(s) at the point (	3  j0) by ﬁnding the algebraic sum of angles
of the vectors drawn from the zeros and poles of G(s) to the given point.
b. Determine if the point speciﬁed in a is on the root locus.
c. If the point speciﬁed in a is on the root locus, ﬁnd the gain, K, using the lengths of
the vectors.
ANSWERS:
a. Sum of angles  180°
b. Point is on the root locus
c. K  10
The complete solution is at www.wiley.com/college/nise.
TryIt 8.2
Use MATLAB and the
following statements to solve
Skill-Assessment Exercise 8.2.
s=-3+0j;
G=(s+2)/(s^2+4*s+13);
Theta=(180/pi)*...
angle(G)
M=abs(G);
K=1/M
390
Chapter 8
Root Locus Techniques

obtained, it is possible to accurately plot just those points that are of interest to us for a
particular problem.
The following ﬁve rules allow us to sketch the root locus using minimal calculations.
The rules yield a sketch that gives intuitive insight into the behavior of a control system. In
the next section, we reﬁne the sketch by ﬁnding actual points or angles on the root locus.
These reﬁnements, however, require some calculations or the use of computer programs,
such as MATLAB.
1. Number of branches. Each closed-loop pole moves as the gain is varied. If we
deﬁne a branch as the path that one pole traverses, then there will be one branch for
each closed-loop pole. Our ﬁrst rule, then, deﬁnes the number of branches of the root
locus:
The number of branches of the root locus equals the number of closed-loop poles.
As an example, look at Figure 8.5(b), where the two branches are shown. One originates
at the origin, the other at 	10.
2. Symmetry. If complex closed-loop poles do not exist in conjugate pairs, the resulting
polynomial, formed by multiplying the factors containing the closed-loop poles,
would have complex coefﬁcients. Physically realizable systems cannot have complex
coefﬁcients in their transfer functions. Thus, we conclude:
The root locus is symmetrical about the real axis.
An example of symmetry about the real axis is shown in Figure 8.5(b).
3. Real-axis segments. Let us make use of the angle property, Eq. (8.15),
of the points on the root locus to determine where the real-axis
segments of the root locus exist. Figure 8.8 shows the poles and zeros
of a general open-loop system. If an attempt is made to calculate the
angular contribution of the poles and zeros at each point, P1, P2, P3, and
P4, along the real axis, we observe the following: (1) At each point the
angular contribution of a pair of open-loop complex poles or zeros is
zero, and (2) the contribution of the open-loop poles and open-loop
zeros to the left of the respective point is zero. The conclusion is that the
only contribution to the angle at any of the points comes from the
open-loop, real-axis poles and zeros that exist to the right of the respective
point. If we calculate the angle at each point using only the open-loop,
real-axis poles and zeros to the right of each point, we note the following: (1) The angles on
the real axis alternate between 0° and 180°, and (2) the angle is 180° for regions of the real
axis that exist to the left of an odd number of poles and/or zeros. The following rule
summarizes the ﬁndings:
On the real axis, for K > 0 the root locus exists to the left of an
odd number of real-axis, ﬁnite open-loop poles and/or ﬁnite
open-loop zeros.
Examine Figure 8.6(b). According to the rule just developed,
the real-axis segments of the root locus are between 	1 and 	2
and between 	3 and 	4 as shown in Figure 8.9.
4. Starting and ending points. Where does the root locus begin
(zero gain) and end (inﬁnite gain)? The answer to this question
will enable us to expand the sketch of the root locus beyond the
real-axis segments. Consider the closed-loop transfer function,
–4
jω
s-plane
–3
–2
–1
σ
FIGURE 8.9
Real-axis segments of the root locus for the
system of Figure 8.6
s-plane
jω
P4
P3
P2
P1
σ
FIGURE 8.8
Poles and zeros of a general
open-loop system with test points, Pi, on the real
axis
8.4 Sketching the Root Locus
391

T(s), described by Eq. (8.3). T(s) can now be evaluated for both large and small gains, K.
As K approaches zero (small gain),
Ts ≈KNGsDHs
DGsDHs  ϵ
(8.23)
From Eq. (8.23) we see that the closed-loop system poles at small gains approach the
combined poles of G(s) and H(s). We conclude that the root locus begins at the poles of
G(s)H(s), the open-loop transfer function.
At high gains, where K is approaching inﬁnity,
Ts ≈
KNGsDHs
ϵ  KNGsNHs
(8.24)
From Eq. (8.24) we see that the closed-loop system poles at large gains approach the
combined zeros of G(s) and H(s). Now we conclude that the root locus ends at the zeros
of G(s)H(s), the open-loop transfer function.
Summarizing what we have found:
The root locus begins at the ﬁnite and inﬁnite poles of G(s)H(s) and ends at the ﬁnite and
inﬁnite zeros of G(s)H(s).
Remember that these poles and zeros are the open-loop poles and zeros.
In order to demonstrate this rule, look at the system in Figure 8.6(a), whose real-axis
segments have been sketched in Figure 8.9. Using the rule just derived, we ﬁnd that
the root locus begins at the poles at 	1 and 	2 and ends at the zeros at 	3 and 	4 (see
Figure 8.10). Thus, the poles start out at 	1 and 	2 and move through the real-axis space
between the two poles. They meet somewhere between the two poles and break out into
the complex plane, moving as complex conjugates. The poles return to the real axis
somewhere between the zeros at 	3 and 	4, where their path is completed as they move
away from each other, and end up, respectively, at the two zeros of the open-loop system
at 	3 and 	4.
5. Behavior at inﬁnity. Consider applying Rule 4 to the following open-loop transfer
function:
KGsHs 
K
ss  1s  2
(8.25)
There are three ﬁnite poles, at s  0; 	1; and 	 2, and no ﬁnite zeros.
A function can also have inﬁnite poles and zeros. If the function approaches inﬁnity
as s approaches inﬁnity, then the function has a pole at inﬁnity. If the function approaches
jω
–3
–4
–2
–1
s-plane
j1
–j1
σ
FIGURE 8.10
Complete root
locus for the system of
Figure 8.6
392
Chapter 8
Root Locus Techniques

zero as s approaches inﬁnity, then the function has a zero at inﬁnity. For example, the
function Gs  s has a pole at inﬁnity, since G(s) approaches inﬁnity as s approaches
inﬁnity. On the other hand, Gs  1=s has a zero at inﬁnity, since G(s) approaches zero as s
approaches inﬁnity.
Every function of s has an equal number of poles and zeros if we include the inﬁnite
poles and zeros as well as the ﬁnite poles and zeros. In this example, Eq. (8.25) contains
three ﬁnite poles and three inﬁnite zeros. To illustrate, let s approach inﬁnity. The open-loop
transfer function becomes
KGsHs ≈K
s3 
K
s  s  s
(8.26)
Each s in the denominator causes the open-loop function, KG(s)H(s), to become zero as that
s approaches inﬁnity. Hence, Eq. (8.26) has three zeros at inﬁnity.
Thus, for Eq. (8.25), the root locus begins at the ﬁnite poles of KG(s)H(s) and ends at
the inﬁnite zeros. The question remains: Where are the inﬁnite zeros? We must know where
these zeros are in order to show the locus moving from the three ﬁnite poles to the three
inﬁnite zeros. Rule 5 helps us locate these zeros at inﬁnity. Rule 5 also helps us locate poles
at inﬁnity for functions containing more ﬁnite zeros than ﬁnite poles.1
We now state Rule 5, which will tell us what the root locus looks like as it approaches
the zeros at inﬁnity or as it moves from the poles at inﬁnity. The derivation can be found in
Appendix M.1 at www.wiley.com/college/nise.
The root locus approaches straight lines as asymptotes as the locus approaches inﬁnity.
Further, the equation of the asymptotes is given by the real-axis intercept, σa and angle,
θa as follows:
σa 
P finite poles 	 P finite zeros
# finite poles 	 # finite zeros
(8.27)
θa 
2k  1π
# finite poles 	 # finite zeros
(8.28)
where k  0; 1; 2; 3 and the angle is given in radians with respect to the positive
extension of the real axis.
Notice that the running index, k, in Eq. (8.28) yields a multiplicity of lines that account
for the many branches of a root locus that approach inﬁnity. Let us demonstrate the
concepts with an example.
Example 8.2
Sketching a Root Locus with Asymptotes
Sketching a Root Locus with Asymptotes
PROBLEM: Sketch the root locus for the system shown in Figure 8.11.
R(s) +
–
C(s)
K(s + 3)
s(s + 1)(s + 2)(s + 4)
FIGURE 8.11
System for
Example 8.2
1 Physical systems, however, have more ﬁnite poles than ﬁnite zeros, since the implied differentiation yields inﬁnite
output for discontinuous input functions, such as step inputs.
8.4 Sketching the Root Locus
393

SOLUTION: Let us begin by calculating the asymptotes. Using Eq. (8.27), the real-axis
intercept is evaluated as
σa  	1 	 2 	 4 	 	3
4 	 1
 	 4
3
(8.29)
The angles of the lines that intersect at 	4=3, given by Eq. (8.28), are
θa 
2k  1π
# finite poles 	 # finite zeros
(8.30a)
 π=3
for k  0
(8.30b)
 π
for k  1
(8.30c)
 5π=3
for k  2
(8.30d)
If the value for k continued to increase, the angles would begin to repeat. The number
of lines obtained equals the difference between the number of ﬁnite poles and the
number of ﬁnite zeros.
Rule 4 states that the locus begins at the open-loop poles and ends at the open-
loop zeros. For the example there are more open-loop poles than open-loop zeros.
Thus, there must be zeros at inﬁnity. The asymptotes tell us how we get to these
zeros at inﬁnity.
Figure 8.12 shows the complete root locus as well as the asymptotes that were just
calculated. Notice that we have made use of all the rules learned so far. The real-axis
segments lie to the left of an odd number of poles and/or zeros. The locus starts at the
open-loop poles and ends at the open-loop zeros. For the example there is only one
open-loop ﬁnite zero and three inﬁnite zeros. Rule 5, then, tells us that the three zeros at
inﬁnity are at the ends of the asymptotes.
–2
0
Asymptote
s-plane
–4
–3
Asymptote
Asymptote
j1
jω
1
2
–j1
–j2
–j3
j3
–1
j2
σ
FIGURE 8.12
Root locus and
asymptotes for the system of
Figure 8.11
394
Chapter 8
Root Locus Techniques

8.5 Reﬁning the Sketch
The rules covered in the previous section permit us to sketch a root locus rapidly. If we want
more detail, we must be able to accurately ﬁnd important points on the root locus along with
their associated gain. Points on the real axis where the root locus enters or leaves the
complex plane—real-axis breakaway and break-in points—and the jω-axis crossings are
candidates. We can also derive a better picture of the root locus by ﬁnding the angles of
departure and arrival from complex poles and zeros, respectively.
In this section, we discuss the calculations required to obtain speciﬁc points on the
root locus. Some of these calculations can be made using the basic root locus relationship
that the sum of the zero angles minus the sum of the pole angles equals an odd multiple of
180°, and the gain at a point on the root locus is found as the ratio of (1) the product of pole
lengths drawn to that point to (2) the product of zero lengths drawn to that point. We have
yet to address how to implement this task. In the past, an inexpensive tool called a SpiruleTM
added the angles together rapidly and then quickly multiplied and divided the lengths to
obtain the gain. Today we can rely on hand-held or programmable calculators as well as
personal computers.
Students pursuing MATLAB will learn how to apply it to the root locus at the end of
Section 8.6. Other alternatives are discussed in Appendix H.2 at www.wiley.com/college/nise.
The discussion can be adapted to programmable hand-held calculators. All readers are
encouraged to select a computational aid at this point. Root locus calculations can be labor
intensive if hand calculations are used.
We now discuss how to reﬁne our root locus sketch by calculating real-axis
breakaway and break-in points, jω-axis crossings, angles of departure from complex
poles, and angles of arrival to complex zeros. We conclude by showing how to ﬁnd
accurately any point on the root locus and calculate the gain.
Real-Axis Breakaway and Break-In Points
Numerous root loci appear to break away from the real axis as the system poles move
from the real axis to the complex plane. At other times the loci appear to return to the real
axis as a pair of complex poles becomes real. We illustrate this in Figure 8.13. This locus
is sketched using the ﬁrst four rules: (1) number of branches, (2) symmetry, (3) real-axis
segments, and (4) starting and ending points. The ﬁgure shows a root locus leaving the
real axis between 	1 and 	2 and returning to the real axis between 3 and 5. The point
where the locus leaves the real axis, 	σ1, is called the breakaway point, and the point
where the locus returns to the real axis, σ2, is called the break-in point.
At the breakaway or break-in point, the branches of the root locus form an angle of
180°=n with the real axis, where n is the number of closed-loop poles arriving at or departing
from the single breakaway or break-in point on the real axis (Kuo, 1991). Thus, for the two
poles shown in Figure 8.13, the branches at the breakaway point form 90° angles with the
real axis.
Skill-Assessment Exercise 8.3
PROBLEM: Sketch the root locus and its asymptotes for a unity feedback system that
has the forward transfer function
Gs 
K
s  2s  4s  6
ANSWER: The complete solution is at www.wiley.com/college/nise.
8.5 Reﬁning the Sketch
395

We now show how to ﬁnd the breakaway and break-in points. As the two closed-loop
poles, which are at 	1 and 	2 when K  0, move toward each other, the gain increases
from a value of zero. We conclude that the gain must be maximum along the real axis at
the point where the breakaway occurs, somewhere between 	1 and 	2. Naturally, the
gain increases above this value as the poles move into the complex plane. We conclude
that the breakaway point occurs at a point of maximum gain on the real axis between the
open-loop poles.
Now let us turn our attention to the break-in point somewhere between 3 and 5 on
the real axis. When the closed-loop complex pair returns to the real axis, the gain will
continue to increase to inﬁnity as the closed-loop poles move toward the open-loop zeros. It
must be true, then, that the gain at the break-in point is the minimum gain found along the
real axis between the two zeros.
The sketch in Figure 8.14 shows the variation of real-axis gain. The breakaway point
is found at the maximum gain between 	1 and 	2, and the break-in point is found at the
minimum gain between 3 and 5.
3
–2
–1
–
s-plane
jω
2
1
0
0
j1
j3
j4
–j1
–j3
4
5
2
–j2
j2
1
σ
σ
σ
FIGURE 8.13
Root locus
example showing real-axis
breakaway (	σ1) and break-in
points (σ2)
K
5
4
3
2
1
2
–1
–2
–3
1
–
0
σ
σ
σ
FIGURE 8.14
Variation of
gain along the real axis for the
root locus of Figure 8.13
396
Chapter 8
Root Locus Techniques

There are three methods for ﬁnding the points at which the root locus breaks away
from and breaks into the real axis. The ﬁrst method is to maximize and minimize the gain, K,
using differential calculus. For all points on the root locus, Eq. (8.13) yields
K  	
1
GsHs
(8.31)
For points along the real-axis segment of the root locus where breakaway and break-in
points could exist, s  σ. Hence, along the real axis Eq. (8.31) becomes
K  	
1
GσHσ
(8.32)
This equation then represents a curve of K versus σ similar to that shown in Figure 8.14.
Hence, if we differentiate Eq. (8.32) with respect to σ and set the derivative equal to zero,
we can ﬁnd the points of maximum and minimum gain and hence the breakaway and
break-in points. Let us demonstrate.
The second method is a variation on the differential calculus method. Called the
transition method, it eliminates the step of differentiation (Franklin, 1991). This method,
derived in Appendix M.2 at www.wiley.com/college/nise, is now stated:
Example 8.3
Breakaway and Break-in Points via Differentiation
Breakaway and Break-in Points via Differentiation
PROBLEM: Find the breakaway and break-in points for the root locus of Figure 8.13,
using differential calculus.
SOLUTION: Using the open-loop poles and zeros, we represent the open-loop system
whose root locus is shown in Figure 8.13 as follows:
KGsHs  Ks 	 3s 	 5
s  1s  2  Ks2 	 8s  15
s2  3s  2
(8.33)
But for all points along the root locus, KGsHs  	1, and along the real axis, s  σ.
Hence,
Kσ2 	 8σ  15
σ2  3σ  2
 	1
(8.34)
Solving for K, we ﬁnd
K  	σ2  3σ  2
σ2 	 8σ  15
(8.35)
Differentiating K with respect to σ and setting the derivative equal to zero yields
dK
dσ  11σ2 	 26σ 	 61
σ2 	 8σ  152
 0
(8.36)
Solving for σ, we ﬁnd σ  	1:45 and 3.82, which are the breakaway and break-in points.
8.5 Reﬁning the Sketch
397

Breakaway and break-in points satisfy the relationship
X
m
1
1
σ  zi

X
n
1
1
σ  pi
(8.37)
where zi and pi are the negative of the zero and pole values, respectively, of G(s)H(s).
Solving Eq. (8.37) for σ, the real-axis values that minimize or maximize K, yields the
breakaway and break-in points without differentiating. Let us look at an example.
For the third method, the root locus program discussed in Appendix H.2 at
www.wiley.com/college/nise can be used to ﬁnd the breakaway and break-in points.
Simply use the program to search for the point of maximum gain between 	1 and 	2
and to search for the point of minimum gain between 3 and 5. Table 8.2 shows the
results of the search. The locus leaves the axis at 	1:45, the point of maximum gain
Example 8.4
Breakaway and Break-in Points Without Differentiation
Breakaway and Break-in Points Without Differentiation
PROBLEM: Repeat Example 8.3 without differentiating.
SOLUTION: Using Eq. (8.37),
1
σ 	 3 
1
σ 	 5 
1
σ  1 
1
σ  2
(8.38)
Simplifying,
11σ2 	 26σ 	 61  0
(8.39)
Hence, σ  	1:45 and 3.82, which agrees with Example 8.3.
TABLE 8.2
Data for breakaway and break-in points for the root locus of Figure 8.13
Real-axis value
Gain
Comment
	1.41
0.008557
	1.42
0.008585
	1.43
0.008605
	1.44
0.008617
	1.45
0.008623
←
Max: gain: breakaway
	1.46
0.008622
3.3
44.686
3.4
37.125
3.5
33.000
3.6
30.667
3.7
29.440
3.8
29.000
←
Min: gain: break-in
3.9
29.202
398
Chapter 8
Root Locus Techniques

between 	1 and 	2, and reenters the real axis at 3:8, the point of minimum gain
between 3 and 5. These results are the same as those obtained using the ﬁrst two
methods. MATLAB also has the capability of ﬁnding breakaway and break-in points.
The jω-Axis Crossings
We now further reﬁne the root locus by ﬁnding the imaginary-axis crossings. The
importance of the jω-axis crossings should be readily apparent. Looking at Figure 8.12,
we see that the system’s poles are in the left half-plane up to a particular value of gain.
Above this value of gain, two of the closed-loop system’s poles move into the right half-
plane, signifying that the system is unstable. The jω-axis crossing is a point on the root
locus that separates the stable operation of the system from the unstable operation.
The value of ω at the axis crossing yields the frequency of oscillation, while the gain
at the jω-axis crossing yields, for this example, the maximum positive gain for system
stability. We should note here that other examples illustrate instability at small values of
gain and stability at large values of gain. These systems have a root locus starting in the
right–half-plane (unstable at small values of gain) and ending in the left–half-plane
(stable for high values of gain).
To ﬁnd the jω-axis crossing, we can use the Routh-Hurwitz criterion, covered in
Chapter 6, as follows: Forcing a row of zeros in the Routh table will yield the gain;
going back one row to the even polynomial equation and solving for the roots yields the
frequency at the imaginary-axis crossing.
Example 8.5
Frequency and Gain at Imaginary-Axis Crossing
Frequency and Gain at Imaginary-Axis Crossing
PROBLEM: For the system of Figure 8.11, ﬁnd the frequency and gain, K, for which the
root locus crosses the imaginary axis. For what range of K is the system stable?
SOLUTION: The closed-loop transfer function for the system of Figure 8.11 is
Ts 
Ks  3
s4  7s3  14s2  8  Ks  3K
(8.40)
Using the denominator and simplifying some of the entries by multiplying any row by a
constant, we obtain the Routh array shown in Table 8.3.
A complete row of zeros yields the possibility for imaginary axis roots. For positive
values of gain, those for which the root locus is plotted, only the s1 row can yield a row of
zeros. Thus,
	K2 	 65K  720  0
(8.41)
TABLE 8.3
Routh table for Eq (8.40)
s4
1
14
3K
s3
7
8  K
s2
90 	 K
21K
s1
	K2 	 65K  720
90 	 K
s0
21K
8.5 Reﬁning the Sketch
399

Another method for ﬁnding the jω-axis crossing (or any point on the root locus, for
that matter) uses the fact that at the jω-axis crossing, the sum of angles from the ﬁnite
open-loop poles and zeros must add to 2k  1180°. Thus, we can search jω-axis until we
ﬁnd the point that meets this angle condition. A computer program, such as the root locus
program discussed in Appendix H.2 at www.wiley.com/college/nise or MATLAB, can be
used for this purpose. Subsequent examples in this chapter use this method to determine
the jω-axis crossing.
Angles of Departure and Arrival
In this subsection, we further reﬁne our sketch of the root locus by ﬁnding angles of
departure and arrival from complex poles and zeros. Consider Figure 8.15, which shows
the open-loop poles and zeros, some of which are complex. The root locus starts at the
open-loop poles and ends at the open-loop zeros. In order to sketch the root locus more
accurately, we want to calculate the root locus departure angle from the complex poles and
the arrival angle to the complex zeros.
If we assume a point on the root locus ϵ close to a complex pole, the sum of angles
drawn from all ﬁnite poles and zeros to this point is an odd multiple of 180°. Except for the
pole that is ϵ close to the point, we assume all angles drawn from all other poles and zeros are
drawn directly to the pole that is near the point. Thus, the only unknown angle in the sum is
the angle drawn from the pole that is ϵ close. We can solve for this unknown angle, which is
also the angle of departure from this complex pole. Hence, from Figure 8.15(a),
	θ1  θ2  θ3 	 θ4 	 θ5  θ6  2k  1180°
(8.44a)
or
θ1  θ2  θ3 	 θ4 	 θ5  θ6 	 2k  1180°
(8.44b)
If we assume a point on the root locus ϵ close to a complex zero, the sum of angles
drawn from all ﬁnite poles and zeros to this point is an odd multiple of 180°. Except for
the zero that is ϵ close to the point, we can assume all angles drawn from all other poles
and zeros are drawn directly to the zero that is near the point. Thus, the only unknown
angle in the sum is the angle drawn from the zero that is ϵ close. We can solve for this
unknown angle, which is also the angle of arrival to this complex zero. Hence, from
Figure 8.15(b),
	θ1  θ2  θ3 	 θ4 	 θ5  θ6  2k  1180°
(8.45a)
or
θ2  θ1 	 θ3  θ4  θ5 	 θ6  2k  1180°
(8.45b)
From this equation K is evaluated as
K  9:65
(8.42)
Forming the even polynomial by using the s2 row with K  9:65, we obtain
90 	 Ks2  21K  80:35s2  202:7  0
(8.43)
and s is found to be equal to  j1:59. Thus the root locus crosses the jω-axis at  j1:59 at a
gain of 9.65. We conclude that the system is stable for 0  K < 9:65.
400
Chapter 8
Root Locus Techniques

Let us look at an example.
2
s-plane
– θ1 + θ2 + θ3  – θ4 – θ5 + θ6 = (2k + 1)180
σ
(a)
θ1
𝜖
θ4
θ6
θ5
θ3
jω
θ
jω
s-plane
σ
(b)
θ4
θ2
θ2
θ6
θ5
θ3
𝜖
– θ1 + θ2 + θ3  – θ4 – θ5 + θ6 = (2k + 1)180
FIGURE 8.15
Open-loop poles and zeros and calculation of a. angle of departure; b. angle of arrival
Example 8.6
Angle of Departure from a Complex Pole
Angle of Departure from a Complex Pole
PROBLEM: Given the unity feedback system of Figure 8.16, ﬁnd the angle of departure
from the complex poles and sketch the root locus.
K(s + 2) 
(s + 3)(s2 + 2s + 2)
R(s)
C(s)
–
+
FIGURE 8.16
Unity feedback
system with complex poles
8.5 Reﬁning the Sketch
401

Plotting and Calibrating the Root Locus
Once we sketch the root locus using the rules from Section 8.4, we may want to accurately
locate points on the root locus as well as ﬁnd their associated gain. For example, we might
want to know the exact coordinates of the root locus as it crosses the radial line representing
20% overshoot. Further, we also may want the value of gain at that point.
Consider the root locus shown in Figure 8.12. Let us assume we want to ﬁnd the
exact point at which the locus crosses the 0.45 damping ratio line and the gain at that point.
Figure 8.18 shows the system’s open-loop poles and zeros along with the ζ  0:45 line. If a
few test points along the ζ  0:45 line are selected, we can evaluate their angular sum and
locate that point where the angles add up to an odd multiple of 180°. It is at this point that the
root locus exists. Equation (8.20) can then be used to evaluate the gain, K, at that point.
Selecting the point at radius 2 r  2 on the ζ  0:45 line, we add the angles of the
zeros and subtract the angles of the poles, obtaining
θ2 	 θ1 	 θ3 	 θ4 	 θ5  	251:5°
(8.47)
SOLUTION: Using the poles and zeros of Gs  s  2=s  3s2  2s  2 as plotted
in Figure 8.17, we calculate the sum of angles drawn to a point ϵ close to the complex pole,
	1  j1, in the second quadrant. Thus,
	θ1 	 θ2  θ3 	 θ4  	θ1 	 90°  tan	1 1
1
 
	 tan	1 1
2
 
 180°
(8.46)
from which θ  	251:6°  108:4°. A sketch of the root locus is shown in Figure 8.17.
Notice how the departure angle from the complex poles helps us to reﬁne the shape.
jω
j4
j3
j2
j1
–j4
–j3
–j2
–j1
Angle of
departure
–1
0
–2
–3
–4
s-plane
θ1
θ3
θ4
θ2
σ
FIGURE 8.17
Root locus for
system of Figure 8.16 showing
angle of departure
402
Chapter 8
Root Locus Techniques

Since the sum is not equal to an odd multiple of 180°, the point at radius  2 is not on the root
locus. Proceeding similarly for the points at radius  1:5; 1; 0:747, and 0.5, we obtain the
table shown in Figure 8.18. This table lists the points, giving their radius, r, and the sum of
angles indicated by the symbol . From the table we see that the point at radius 0.747 is on the
root locus, since the angles add up to 	180°. Using Eq. (8.21), the gain, K, at this point is
K  jAjjCjjDjjEj
jBj
 1:71
(8.48)
In summary, we search a given line for the point yielding a summation of angles
(zero angles–pole angles) equal to an odd multiple of 180°. We conclude that the point is on the
rootlocus.Thegainatthat point isthenfoundbymultiplyingthepolelengthsdrawntothat point
anddividingbytheproductof thezerolengthsdrawntothatpoint.A computerprogram,suchas
that discussed in Appendix H.2 at www.wiley.com/college/nise or MATLAB, can be used.
–4
–3
–2
–1
5
4
3
2
1
j1
j2
jω
r = 2
r = 1
r = 0.5
E
D
C
B
A
0.5
0.747
1.0
1.5
2.0
–158.4
–180.0
–199.9
–230.4
–251.5
Radius
r
Angle
(degrees)
= 0.45
s-plane
r =1.5
0
𝜁
θ
θ
θ
θ
θ
σ
FIGURE 8.18
Finding and calibrating exact points on the root locus of Figure 8.12
Skill-Assessment Exercise 8.4
PROBLEM: Given a unity feedback system that has the forward transfer function
Gs 
Ks  2
s2 	 4s  13
do the following:
a. Sketch the root locus.
b. Find the imaginary-axis crossing.
c. Find the gain, K, at the jω-axis crossing.
d. Find the break-in point.
e. Find the angle of departure from the complex poles.
ANSWERS:
a. See solution at www.wiley.com/college/nise.
b. s   j
ﬃﬃﬃﬃﬃ
21
p
c. K  4
d. Break-in point  	7
e. Angle of departure  	233:1°
The complete solution is at www.wiley.com/college/nise.
8.5 Reﬁning the Sketch
403

8.6 An Example
We now review the rules for sketching and ﬁnding points on the root locus, as well as
present an example. The root locus is the path of the closed-loop poles of a system as a
parameter of the system is varied. Each point on the root locus satisﬁes the angle condition,
GsHs  2k  1180°. Using this relationship, rules for sketching and ﬁnding points on
the root locus were developed and are now summarized.
Basic Rules for Sketching the Root Locus
Number of branches The number of branches of the root locus equals the number of
closed-loop poles.
Symmetry The root locus is symmetrical about the real axis.
Real-axis segments On the real axis, for K > 0 the root locus exists to the left of an odd
number of real-axis, ﬁnite open-loop poles and/or ﬁnite open-loop zeros.
Starting and ending points The root locus begins at the ﬁnite and inﬁnite poles of G(s)H(s)
and ends at the ﬁnite and inﬁnite zeros of G(s)H(s).
Behavior at inﬁnity The root locus approaches straight lines as asymptotes as the locus
approaches inﬁnity. Further, the equations of the asymptotes are given by the real-axis
intercept and angle in radians as follows:
σa 
P finite poles 	 P finite zeros
# finite poles 	 # finite zeros
(8.49)
θa 
2k  1π
# finite poles 	 # finite zeros
(8.50)
where k  0; 1; 2; 3; . . ..
Additional Rules for Reﬁning the Sketch
Real-axis breakaway and break-in points The root locus breaks away from the real axis at
a point where the gain is maximum and breaks into the real axis at a point where the gain
is minimum.
Calculation of jω-axis crossings The root locus crosses the jω-axis at the point where
GsHs  2k  1180°. Routh-Hurwitz or a search of the jω-axis for 2k  1180°
can be used to ﬁnd the jω-axis crossing.
Angles of departure and arrival The root locus departs from complex, open-loop poles and
arrives at complex, open-loop zeros at angles that can be calculated as follows. Assume a
point ϵ close to the complex pole or zero. Add all angles drawn from all open-loop poles
and zeros to this point. The sum equals 2k  1180°. The only unknown angle is that
drawn from the ϵ close pole or zero, since the vectors drawn from all other poles and
zeros can be considered drawn to the complex pole or zero that is ϵ close to the point.
Solving for the unknown angle yields the angle of departure or arrival.
Plotting and calibrating the root locus All points on the root locus satisfy the relationship
GsHs  2k  1180°. The gain, K, at any point on the root locus is given by
K 
1
jGsHsj  1
M 	 Π finite pole lengths
Π finite zero lengths
(8.51)
404
Chapter 8
Root Locus Techniques

Two animation PowerPoint presentations (PPTs) demonstrating root locus plotting
are available for instructors at www.wiley.com/college/nise. See Root-Locus Plotter and
Dynamic Root-Locus.
Let us now look at a summary example.
Example 8.7
Sketching a Root Locus and Finding Critical Points
Sketching a Root Locus and Finding Critical Points
PROBLEM: Sketch the root locus for the system shown in Figure 8.19(a) and ﬁnd the
following:
a. The exact point and gain where the locus crosses the 0.45 damping ratio line
b. The exact point and gain where the locus crosses the jω-axis
c. The breakaway point on the real axis
d. The range of K within which the system is stable
–2
= 0.45
–j5
0
(  )
b
R(s)
C(s)
K(s2 – 4s + 20)
(s + 2)(s + 4)
(  )
a
jω
–4
s-plane
2 + j4
2 – j4
–j1
–j2
–j3
–j4
j2
j3
j4
j5
2
4
–1
3
1
–3
+
–
j1j1
σ
𝜁
FIGURE 8.19
a. System for
Example 8.7; b. root locus
sketch
8.6 An Example
405

SOLUTION: Theproblemsolutionisshown,inpart,inFigure8.19(b).Firstsketchtheroot
locus. Using Rule 3, the real-axis segment is found to be between 	2 and 	4. Rule 4 tells us
that the root locus starts at the open-loop poles and ends at the open-loop zeros. These two
rules alone give us the general shape of the root locus.
a. To ﬁnd the exact point where the locus crosses the ζ  0:45 line, we can use the root
locus program discussed in Appendix H.2 at www.wiley.com/college/nise to search
along the line
θ  180° 	 cos	1 0:45  116:7°
(8.52)
for the point where the angles add up to an odd multiple of 180°. Searching in polar
coordinates, we ﬁnd that the root locus crosses the ζ  0:45 line at 3:4  116:7° with a
gain, K, of 0.417.
b. To ﬁnd the exact point where the locus crosses the jω-axis, use the root locus program
to search along the line
θ  90°
(8.53)
for the point where the angles add up to an odd multiple of 180°. Searching in polar
coordinates, we ﬁnd that the root locus crosses the jω-axis at  j3:9 with a gain of
K  1:5.
c. To ﬁnd the breakaway point, use the root locus program to search the real axis between
	2 and 	4 for the point that yields maximum gain. Naturally, all points will have the
sum of their angles equal to an odd multiple of 180°. A maximum gain of 0.0248 is
found at the point 	2:88. Therefore, the breakaway point is between the open-loop
poles on the real axis at 	2:88.
d. From the answer to b, the system is stable for K between 0 and 1.5.
Students who are using MATLAB should now run ch8p1 in Appendix B.
You will learn how to use MATLAB to plot and title a root locus,
overlay constant ζ and ωn curves, zoom into and zoom out from a root
locus, and interact with the root locus to ﬁnd critical points as
well as gains at those points. This exercise solves Example 8.7
using MATLAB.
Skill-Assessment Exercise 8.5
PROBLEM: Given a unity feedback system that has the forward transfer function
Gs  Ks 	 2s 	 4
s2  6s  25
do the following:
a. Sketch the root locus.
b. Find the imaginary-axis crossing.
c. Find the gain, K, at the jω-axis crossing.
d. Find the break-in point.
e. Find the point where the locus crosses the 0.5 damping ratio line.
f. Find the gain at the point where the locus crosses the 0.5 damping ratio line.
g. Find the range of gain, K, for which the system is stable.
TryIt 8.3
Use MATLAB, the Control
System Toolbox, and the
following statements to plot
the root locus for Skill-
Assessment Exercise 8.5.
Solve the remaining parts of
the problem by clicking on the
appropriate points on the
plotted root locus.
numg=poly([2 4]);
deng=[1 6 25];
G=tf(numg,deng)
rlocus(G)
z=0.5
sgrid(z,0)
406
Chapter 8
Root Locus Techniques

8.7 Transient Response Design via Gain Adjustment
Now that we know how to sketch a root locus, we show how to use it for the design of
transient response. In the last section we found that the root locus crossed the 0.45
damping ratio line with a gain of 0.417. Does this mean that the system will respond
with 20.5% overshoot, the equivalent to a damping ratio of 0.45? It must be emphasized
that the formulas describing percent overshoot, settling time, and peak time were derived
only for a system with two closed-loop complex poles and no closed-loop zeros. The
effect of additional poles and zeros and the conditions for justifying an approximation of
a two-pole system were discussed in Sections 4.7 and 4.8 and apply here to closed-loop
systems and their root loci. The conditions justifying a second-order approximation are
restated here:
1. Higher-order poles are much farther into the left half of the s-plane than the dominant
second-order pair of poles. The response that results from a higher-order pole does not
appreciably change the transient response expected from the dominant second-order
poles.
2. Closed-loop zeros near the closed-loop second-order pole pair are nearly canceled by the
close proximity of higher-order closed-loop poles.
3. Closed-loop zeros not canceled by the close proximity of higher-order closed-loop poles
are far removed from the closed-loop second-order pole pair.
The ﬁrst condition as it applies to the root locus is shown graphically in Figure 8.20(a)
and (b). Figure 8.20(b) would yield a much better second-order approximation than
Figure 8.20(a), since closed-loop pole p3 is farther from the dominant, closed-loop second-
order pair, p1 and p2.
The second condition is shown graphically in Figure 8.20(c) and (d). Figure 8.20(d)
would yield a much better second-order approximation than Figure 8.20(c), since
closed-loop pole p3 is closer to canceling the closed-loop zero.
Summarizing the design procedure for higher-order systems, we arrive at the
following:
1. Sketch the root locus for the given system.
2. Assume the system is a second-order system without any zeros and then ﬁnd the gain to
meet the transient response speciﬁcation.
3. Justify your second-order assumption by ﬁnding the location of all higher-order poles
and evaluating the fact that they are much farther from the jω-axis than the dominant
ANSWERS:
a. See solution at www.wiley.com/college/nise.
b. s   j4:06
c. K  1
d. Break-in point  2:89
e. s  	2:42  j4:18
f. K  0:108
g. K < 1
The complete solution is at www.wiley.com/college/nise.
8.7 Transient Response Design via Gain Adjustment
407

second-order pair. As a rule of thumb, this textbook assumes a factor of ﬁve
times farther. Also, verify that closed-loop zeros are approximately canceled by
higher-order poles. If closed-loop zeros are not canceled by higher-order closed-loop
poles, be sure that the zero is far removed from the dominant second-order pole pair
to yield approximately the same response obtained without the ﬁnite zero.
4. If the assumptions cannot be justiﬁed, your solution will have to be simulated in order to
be sure it meets the transient response speciﬁcation. It is a good idea to simulate all
solutions, anyway.
We now look at a design example to show how to make a second-order approximation
and then verify whether or not the approximation is valid.
jω
p1
s-plane
(a)
(d)
Open-loop pole
Closed-loop pole
Closed-loop zero
p2
p3
jω
s-plane
p1
p2
(b)
jω
s-plane
p1
p2
(c)
jω
s-plane
p1
p2
p3
p3
p3
σ
σ
σ
σ
FIGURE 8.20
Making
second-order approximations
Example 8.8
Third-Order System Gain Design
Third-Order System Gain Design
PROBLEM: Consider the system shown in Figure 8.21. Design the value of gain, K, to
yield 1.52% overshoot. Also estimate the settling time, peak time, and steady-state error.
SOLUTION: The root locus is shown in Figure 8.22. Notice that this is a third-order
system with one zero. Breakaway points on the real axis can occur between 0 and 	1 and
between 	1:5 and 	10, where the gain reaches a peak. Using the root locus program and
searching in these regions for the peaks in gain, breakaway points are found at 	0:62 with a
gain of 2.511 and at 	4:4 with a gain of 28.89. A break-in point on the real axis can occur
between 	1:5 and 	10, where the gain reaches a local minimum. Using the root locus
program and searching in these regions for the local minimum gain, a
break-in point is found at 	2:8 with a gain of 27.91.
Next assume that the system can be approximated by a second-
order, under-damped system without any zeros. A 1.52% overshoot
corresponds to a damping ratio of 0.8. Sketch this damping ratio line
on the root locus, as shown in Figure 8.22.
C(s)
s(s + 1)(s + 10)
K(s + 1.5)
E(s)
R(s) +
–
+
–
+
–
FIGURE 8.21
System for Example 8.8
408
Chapter 8
Root Locus Techniques

Use the root locus program to search along the 0.8 damping ratio line for the point
where the angles from the open-loop poles and zeros add up to an odd multiple of 180°.
This is the point where the root locus crosses the 0.8 damping ratio or 1.52 percent
overshoot line. Three points satisfy this criterion: 	0:87  j0:66; 	 1:19  j0:90, and
	4:6  j 3:45 with respective gains of 7.36, 12.79, and 39.64. For each point the settling
time and peak time are evaluated using
Ts 
4
ζωn
(8.54)
where ζωn is the real part of the closed-loop pole, and also using
Tp 
π
ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 	 ζ2
p
(8.55)
where ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 	 ζ2
p
is the imaginary part of the closed-loop pole.
To test our assumption of a second-order system, we must calculate the location of
the third pole. Using the root locus program, search along the negative extension of the
real axis between the zero at 	1:5 and the pole at 	10 for points that match the value of
gain found at the second-order dominant poles. For each of the three crossings of the 0.8
damping ratio line, the third closed-loop pole is at 	9:25, 	8:6, and 	1:8, respectively.
The results are summarized in Table 8.4.
Finally, let us examine the steady-state error produced in each case. Note that we
have little control over the steady-state error at this point. When the gain is set to meet
jω
j2
0
j3
j4
–j1
–j2
s-plane
–10
–4.6 + j3.45, K = 39.64
= 0.8
–1
–1.5
–1.19 + j0.90, K = 12.79
–0.87 + j0.66, K = 7.36
–9
–8
–7
–6
–5
– 4
–3
= Closed-loop pole
= Open-loop pole
𝜁
σ
FIGURE 8.22
Root locus for Example 8.8
TABLE 8.4
Characteristics of the system of Example 8.8
Case
Closed-loop
poles
Closed-
loop zero
Gain
Third
closed-loop pole
Settling
time
Peak
time
Kv
1
	0:87  j0:66
	1:5  j0
7.36
	9.25
4.60
4.76
1.1
2
	1:19  j0:90
	1:5  j0
12.79
	8.61
3.36
3.49
1.9
3
	4:60  j3:45
	1:5  j0
39.64
	1.80
0.87
0.91
5.9
8.7 Transient Response Design via Gain Adjustment
409

the transient response, we have also designed the steady-state error. For the example, the
steady-state error speciﬁcation is given by Kv and is calculated as
Kv  lim
s®0 sGs  K1:5
110
(8.56)
The results for each case are shown in Table 8.4.
How valid are the second-order assumptions? From Table 8.4, Cases 1 and 2 yield
third closed-loop poles that are relatively far from the closed-loop zero. For these two
cases there is no pole-zero cancellation, and a second-order system approximation is not
valid. In Case 3, the third closed-loop pole and the closed-loop zero are relatively close to
each other, and a second-order system approximation can be considered valid. In order
to show this, let us make a partial-fraction expansion of the closed-loop step response of
Case 3 and see that the amplitude of the exponential decay is much less than the amplitude
of the underdamped sinusoid. The closed-loop step response, C3s, formed from the
closed-loop poles and zeros of Case 3 is
C3s 
39:64s  1:5
ss  1:8s  4:6  j3:45s  4:6 	 j3:45

39:64s  1:5
ss  1:8s2  9:2s  33:06
 1
s 
0:3
ss  18 	 1:3s  4:6  1:63:45
s  4:623:452
(8.57)
Thus, the amplitude of the exponential decay from the third pole is 0.3, and the amplitude
of the underdamped response from the dominant poles is
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1:32  1:62
p
 2:06. Hence, the
dominant pole response is 6.9 times as large as the nondominant exponential response,
and we assume that a second-order approximation is valid.
Using a simulation program, we obtain Figure 8.23, which shows comparisons of
step responses for the problem we have just solved. Cases 2 and 3 are plotted for both
the third-order response and a second-order response, assuming just the dominant pair
of poles calculated in the design problem. Again, the second-order approximation
was justiﬁed for Case 3, where there is a small difference in percent overshoot. The
second-order approximation is not valid for Case 2. Other than the excess overshoot,
Case 3 responses are similar.
 Third-order, K = 12.79
 Second-order, K = 12.79
(a)
Case 2 response
0.0
0
Response
Time (seconds)
0.2
0.4
0.6
0.8
1.0
1.2
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
Third-order, K = 39.64
Second-order, K = 39.64
0
Response
Time (seconds)
(  )
b
0.2
0.4
0.6
0.8
1.0
1.2
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
0.0
Case 3 response
FIGURE 8.23
Second- and third-order responses for Example 8.8: a. Case 2; b. Case 3
410
Chapter 8
Root Locus Techniques

Students who are using MATLAB may want to explore the SISO Design
Tool described in Appendix E at www.wiley.com/college/nise. The
SISO Design Tool is a convenient and intuitive way to obtain, view,
and interact with a system’s root locus. Section D.7 describes the
advantages of using the tool, while Section D.8 describes how to
use it. For practice, you may want to apply the SISO Design Tool to
some of the problems at the end of this chapter.
8.8 Generalized Root Locus
Up to this point we have always drawn the root locus as a function of the forward-path gain,
K. The control system designer must often know how the closed-loop poles change as a
function of another parameter. For example, in Figure 8.24, the parameter of interest is the
open-loop pole at 	p1. How can we obtain a root locus for variations of the value of p1?
Students who are using MATLAB should now run ch8p2 in Appendix B.
You will learn how to use MATLAB to enter a value of percent
overshoot from the keyboard. MATLAB will then draw the root locus
and overlay the percent overshoot line requested. You will then
interact with MATLAB and select the point of intersection of the
root locus with the requested percent overshoot line. MATLAB
will respond with the value of gain, all closed-loop poles at
that gain, and a closed-loop step response plot corresponding to
the selected point. This exercise solves Example 8.8 using MATLAB.
Skill-Assessment Exercise 8.6
PROBLEM: Given a unity feedback system that has the forward-path transfer function
Gs 
K
s  2s  4s  6
do the following:
a. Sketch the root locus.
b. Using a second-order approximation, design the value of K to yield 10% overshoot for
a unit-step input.
c. Estimate the settling time, peak time, rise time, and steady-state error for the value of K
designed in (b).
d. Determine the validity of your second-order approximation.
ANSWERS:
a. See solution located at www.wiley.com/college/nise.
b. K  45:55
c. Ts  1:97 s; Tp  1:13 s; Tr  0:53 s, and estep∞  0:51
d. Second-order approximation is not valid.
The complete solution is located at www.wiley.com/college/nise.
8.8 Generalized Root Locus
411

If the function KG(s)H(s) is formed as
KGsHs 
10
s  2s  p1
(8.58)
the problem is that p1 is not a multiplying factor of the function, as the
gain, K, was in all of the previous problems. The solution to this
dilemma is to create an equivalent system where p1 appears as the
forward-path gain. Since the closed-loop transfer function’s denomi-
nator is 1  KGsHs, we effectively want to create an equivalent
system whose denominator is 1  p1GsHs.
For the system of Figure 8.24, the closed-loop transfer
function is
Ts 
KGs
1  KGsHs 
10
s2  p1  2s  2p1  10
(8.59)
Isolating p1, we have
Ts 
10
s2  2s  10  p1s  2
(8.60)
Converting the denominator to the form [1  p1GsHs] by
dividing numerator and denominator by the term not included
with p1; s2  2s  10, we obtain
Ts 
10
s2  2s  10
1 
p1s  2
s2  2s  10
(8.61)
Conceptually, Eq. (8.61) implies that we have a system for which
KGsHs 
p1s  2
s2  2s  10
(8.62)
The root locus can now be sketched as a function of p1, assuming
the open-loop system of Eq. (8.62). The ﬁnal result is shown in
Figure 8.25.
In this section, we learned to plot the root locus as a function of any system parameter.
In the next section we will learn how to plot root loci for positive-feedback systems.
–10
0
jω
s-plane
j2
j4
j6
–j2
–j4
–j6
–5
–2
σ
FIGURE 8.25
Root locus for the system of
Figure 8.24, with p1 as a parameter
R(s)
C(s)
(s + 2)(s + p1)
10
+
–
FIGURE 8.24
System requiring a root locus
calibrated with p1 as a parameter
Skill-Assessment Exercise 8.7
PROBLEM: Sketch the root locus for variations in the value of p1, for a unity feedback
system that has the following forward transfer function:
Gs 
100
ss  p1
ANSWER: The complete solution is at www.wiley.com/college/nise.
412
Chapter 8
Root Locus Techniques

8.9 Root Locus for Positive-Feedback Systems
The properties of the root locus were derived from the system of
Figure 8.1. This is a negative-feedback system because of the negative
summing of the feedback signal to the input signal. The properties of the
root locus change dramatically if the feedback signal is added to the input
rather than subtracted. A positive-feedback system can be thought of as a
negative-feedback system with a negative value of H(s). Using this
concept, we ﬁnd that the transfer function for the positive-feedback
system shown in Figure 8.26 is
Ts 
KGs
1 	 KGsHs
(8.63)
We now retrace the development of the root locus for the denominator of Eq. (8.63).
Obviously, a pole, s, exists when
KGsHs  1  1 k360°
k  0; 1; 2; 3; . . .
(8.64)
Therefore, the root locus for positive-feedback systems consists of all points on the s-plane
where the angle of KGsHs  k360°. How does this relationship change the rules for
sketching the root locus presented in Section 8.4?
1. Number of branches. The same arguments as for negative feedback apply to this rule.
There is no change.
2. Symmetry. The same arguments as for negative feedback apply to this rule. There is no
change.
3. Real-axis segments. The development in Section 8.4 for the real-axis segments led to
the fact that the angles of G(s)H(s) along the real axis added up to either an odd multiple
of 180° or a multiple of 360°. Thus, for positive-feedback systems the root locus exists
on the real axis along sections where the locus for negative-feedback systems does not
exist. The rule follows:
Real-axis segments: On the real axis, the root locus for positive-feedback systems exists to
the left of an even number of real-axis, ﬁnite open-loop poles and/or ﬁnite open-loop zeros.
The change in the rule is the word even; for negative-feedback systems the locus existed
to the left of an odd number of real-axis, ﬁnite open-loop poles and/or zeros.
4. Starting and ending points. You will ﬁnd no change in the development in Section 8.4
if Eq. (8.63) is used instead of Eq. (8.12). Therefore, we have the following rule.
Starting and ending points: The root locus for positive-feedback systems begins at the
ﬁnite and inﬁnite poles of G(s)H(s) and ends at the ﬁnite and inﬁnite zeros of G(s)H(s).
5. Behavior at inﬁnity. The changes in the development of the asymptotes begin at
Eq. (M.4) in Appendix M at www.wiley.com/college/nise since positive-feedback
systems follow the relationship in Eq. (8.64). That change yields a different slope
for the asymptotes. The value of the real-axis intercept for the asymptotes remains
unchanged. The student is encouraged to go through the development in detail and show
that the behavior at inﬁnity for positive-feedback systems is given by the following rule:
The root locus approaches straight lines as asymptotes as the locus approaches
inﬁnity. Further, the equations of the asymptotes for positive-feedback systems are
given by the real-axis intercept, σa, and angle, θa, as follows:
KG(s)
H(s)
C(s)
R(s)
+
+
+
FIGURE 8.26
Positive-feedback system
8.9 Root Locus for Positive-Feedback Systems
413

σa 
P finite poles 	 P finite zeros
# finite poles 	 # finite zeros
(8.65)
θa 
k2π
# finite poles 	 # finite zeros
(8.66)
where k  0;  1;  2;  3; . . . , and the angle is given in radians with respect to
the positive extension of the real axis.
The change we see is that the numerator of Eq. (8.66) is k2π instead of 2k  1π.
What about other calculations? The imaginary-axis crossing can be found using the
root locus program. In a search of the jω-axis, you are looking for the point where the angles
add up to a multiple of 360° instead of an odd multiple of 180°. The breakaway points are
found by looking for the maximum value of K. The break-in points are found by looking for
the minimum value of K.
When we were discussing negative-feedback systems, we always made the root locus
plot for positive values of gain. Since positive-feedback systems can also be thought of as
negative-feedback systems with negative gain, the rules developed in this section apply
equally to negative-feedback systems with negative gain. Let us look at an example.
Example 8.9
Root Locus for a Positive-Feedback System
Root Locus for a Positive-Feedback System
PROBLEM: Sketch the root locus as a function of negative gain, K, for the system
shown in Figure 8.11.
SOLUTION: The equivalent positive-feedback system found by pushing 	1, associated
with K, to the right past the pickoff point is shown in Figure 8.27(a). Therefore, as the gain
oftheequivalentsystemgoesthroughpositivevaluesofK,therootlocuswillbeequivalent
to that generated by the gain, K, of the original system in Figure 8.11 as it goes through
negative values.
The root locus exists on the real axis to the left of an even number of real, ﬁnite
open-loop poles and/or zeros. Therefore, the locus exists on the entire positive extension
of the real axis, between 	1 and 	2 and between 	3 and 	4. Using Eq. (8.27), the σa
intercept is found to be
σa  	1 	 2 	 4 	 	3
4 	 1
 	 4
3
(8.67)
The angles of the lines that intersect at 	4=3 are given by
θa 
k2π
# finite poles 	 # finite zeros
(8.68a)
 0
for k  0
(8.68b)
 2π=3
for k  1
(8.68c)
 4π=3
for k  2
(8.68d)
The ﬁnal root locus sketch is shown in Figure 8.27(b).
414
Chapter 8
Root Locus Techniques

8.10 Pole Sensitivity
The root locus is a plot of the closed-loop poles as a system parameter is varied.
Typically, that system parameter is gain. Any change in the parameter changes the
closed-loop poles and, subsequently, the performance of the system. Many times the
parameter changes against our wishes, due to heat or other environmental conditions.
We would like to ﬁnd out the extent to which changes in parameter values affect the
performance of our system.
The root locus exhibits a nonlinear relationship between gain and pole location. Along
some sections of the root locus, (1) very small changes in gain yield very large changes in
pole location and hence performance; along other sections of the root locus, (2) very large
changes in gain yield very small changes in pole location. In the ﬁrst case we say that the
Skill-Assessment Exercise 8.8
PROBLEM: Sketch the root locus for the positive-feedback system whose forward
transfer function is
Gs 
Ks  4
s  1s  2s  3
The system has unity feedback.
ANSWER: The complete solution is at www.wiley.com/college/nise.
–1
C(s)
+
1
2
3
4
5
–5
–3
s-plane
jω
(a)
+
K(s + 3)
s(s + 1)(s + 2)(s + 4)
R(s)
4
–2
–1
(b)
–j3
–j2
–j1
j1
j2
j3
–
σ
FIGURE 8.27
a. Equivalent
positive-feedback system for
Example 8.9; b. root locus
8.10 Pole Sensitivity
415

system has a high sensitivity to changes in gain. In the second case, the system has a low
sensitivity to changes in gain. We prefer systems with low sensitivity to changes in gain.
In Section 7.7, we deﬁned sensitivity as the ratio of the fractional change in a function
to the fractional change in a parameter as the change in the parameter approaches zero.
Applying the same deﬁnition to the closed-loop poles of a system that vary with a parameter,
we deﬁne root sensitivity as the ratio of the fractional change in a closed-loop pole to the
fractional change in a system parameter, such as gain. Using Eq. (7.75), we calculate the
sensitivity of a closed-loop pole, s, to gain, K:
Ss:K  K
s
δs
δK
(8.69)
where s is the current pole location, and K is the current gain. Using Eq. (8.69) and
converting the partials to ﬁnite increments, the actual change in the closed-loop poles can be
approximated as
Δs  s Ss:K

 ΔK
K
(8.70)
where Δs is the change in pole location, and ΔK=K is the fractional change in the gain, K. Let
us demonstrate with an example. We begin with the characteristic equation from which
δs=δK can be found. Then, using Eq. (8.69) with the current closed-loop pole, s, and its
associated gain, K, we can ﬁnd the sensitivity.
Example 8.10
Root Sensitivity of a Closed-Loop System to Gain Variations
Root Sensitivity of a Closed-Loop System to Gain Variations
PROBLEM: Find the root sensitivity of the system in Figure 8.4 at s	9:47 and 	5j5.
Also calculate the change in the pole location for a 10% change in K.
SOLUTION: The system’s characteristic equation, found from the closed-loop transfer
function denominator, is s2  10s  K  0. Differentiating with respect to K, we have
2s δs
δK  10 δs
δK  1  0
(8.71)
from which
δs
δK 
	1
2s  10
(8.72)
Substituting Eq. (8.72) into Eq. (8.69), the sensitivity is found to be
Ss:K  K
s *
	1
2s  10
(8.73)
For s  	9:47, Table 8.1 shows K  5. Substituting these values into Eq. (8.73)
yields Ss:K  	0:059. The change in the pole location for a 10% change in K can be found
using Eq. (8.70), with s  	9:47; ΔK=K  0:1, and Ss:K  	0:059. Hence, Δs  0:056,
or the pole will move to the right by 0.056 units for a 10% change in K.
For s  	5  j5, Table 8.1 shows K  50. Substituting these values into Eq. (8.73)
yields Ss:K  1=1  j1  1=
ﬃﬃﬃ
2
p
 	 45°. The change in the pole location for a
10% change in K can be found using Eq. (8.70), with s  	 5  j5; ΔK=K  0:1, and
416
Chapter 8
Root Locus Techniques

Ss:K  1=
ﬃﬃﬃ
2
p
 	 45°. Hence, Δs  	j5, or the pole will move vertically by 0.5 unit for a
10% change in K.
In summary, then, at K  5; Ss:K  	0:059. At K  50; Ss:K  1=
ﬃﬃﬃ
2
p
 	 45°.
Comparing magnitudes, we conclude that the root locus is less sensitive to changes in
gain at the lower value of K. Notice that root sensitivity is a complex quantity
possessing both the magnitude and direction information from which the change in
poles can be calculated.
Case Studies
Antenna Control: Transient Design via Gain
Antenna Control: Transient Design via Gain
The main thrust of this chapter is to demonstrate design of higher-order systems (higher
than two) through gain adjustment. Speciﬁcally, we are interested in determining the value
of gain required to meet transient response requirements, such as percent overshoot,
settling time, and peak time. The following case study emphasizes this design procedure,
using the root locus.
PROBLEM: Given the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 1, ﬁnd the preampliﬁer gain required for 25% overshoot.
SOLUTION: The block diagram for the system was derived in the Case Studies section
in Chapter 5 and is shown in Figure 5.34(c), where Gs  6:63K=ss  1:71s  100.
First a sketch of the root locus is made to orient the designer. The real-axis segments
are between the origin and 	1:71 and from 	100 to inﬁnity. The locus begins at the
open-loop poles, which are all on the real axis at the origin, 	1:71, and 	100. The locus
then moves toward the zeros at inﬁnity by following asymptotes that, from Eqs. (8.27) and
(8.28), intersect the real axis at 	33:9 at angles of 60°, 180°, and 	60°. A portion of the
root locus is shown in Figure 8.28.
From Eq. (4.39), 25% overshoot corresponds to a damping ratio of 0.404. Now draw
a radial line from the origin at an angle of cos	1 ζ  113:8. The intersection of this line
with the root locus locates the system’s dominant, second-order closed-loop poles. Using
the root locus program discussed in Appendix H.2 at www.wiley.com/college/nise
Skill-Assessment Exercise 8.9
PROBLEM: A negative unity feedback system has the forward transfer function
Gs  Ks  1
ss  2
If K is set to 20, ﬁnd the changes in closed-loop pole location for a 5% change in K.
ANSWER: For the closed-loop pole at 	21:05; Δs  	0:9975; for the closed-loop pole
at 	0:95; Δs  	0:0025.
The complete solution is at www.wiley.com/college/nise.
Case Studies
417

to search the radial line for 180° yields the closed-loop dominant poles as
2:063  113:8°  	0:833  j1:888. The gain value yields 6:63K  425:7, from which
K  64:21.
Checking our second-order assumption, the third pole must be to the left of the
open-loop pole at 	100 and is thus greater than ﬁve times the real part of the dominant pole
pair, which is 	0:833. The second-order approximation is thus valid.
The computer simulation of the closed-loop system’s step response in Figure 8.29
shows that the design requirement of 25% overshoot is met.
10
Time (seconds)
c(t)
9
8
7
6
5
4
3
2
1
0
1.4
1.0
1.2
0.8
0.6
0.4
0.2
0
FIGURE 8.29
Step response of the gain-adjusted antenna control system
j10
jω
j2
j6 
j8
–j2
–j4
–j6
–j8
–j10
j4
2
0
4
–2
4
s-plane
113.8
Additional
open-loop pole
at –100
–
𝜁 = 0.404
σ
FIGURE 8.28
Portion of the
root locus for the antenna
control system
418
Chapter 8
Root Locus Techniques

CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. Referring to the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 2, do the following:
a. Find the preampliﬁer gain, K, required for an 8-second settling time.
b. Repeat, using MATLAB.
UFSS Vehicle: Transient Design via Gain
UFSS Vehicle: Transient Design via Gain
In this case study, we apply the root locus to the UFSS vehicle pitch control loop. The pitch
control loop is shown with both rate and position feedback on the back endpapers. In the
example that follows, we plot the root locus without the rate feedback and then with the
rate feedback. We will see the stabilizing effect that rate feedback has upon the system.
PROBLEM: Consider the block diagram of the pitch control loop for the UFSS vehicle
shown on the back endpapers (Johnson, 1980).
a. If K2  0 (no rate feedback), plot the root locus for the system as a function of pitch
gain, K1, and estimate the settling time and peak time of the closed-loop response with
20% overshoot.
b. Let K2  K1 (add rate feedback) and repeat a.
SOLUTION:
a. Letting K2  0, the open-loop transfer function is
GsHs 
0:25K1s  0:435
s  1:23s  2s2  0:226s  0:0169
(8.74)
from which the root locus is plotted in Figure 8.30. Searching along the 20% overshoot
line evaluated from Eq. (4.39), we ﬁnd the dominant second-order poles to be
	0:202  j0:394 with a gain of K  0:25K1  0:706, or K1  2:824.
20%
s-plane
j1
0
–0.202 + j0.394
K = 0.706; K1 = 2.824
jω
–1
–2
–3
–j3
j3
j2
–j2
–j1
= Closed-loop pole
= Open-loop pole
σ
FIGURE 8.30
Root locus of
pitch control loop without rate
feedback, UFSS vehicle
Case Studies
419

From the real part of the dominant pole, the settling time is estimated to be
Ts  4=0:202  19:8 seconds. From the imaginary part of the dominant pole, the
peak time is estimated to be Tp  π=0:394  7:97 seconds. Since our estimates
are based upon a second-order assumption, we now test our assumption by ﬁnding the
third closed-loop pole location between 	0:435 and 	1:23 and the fourth closed-loop
pole location between 	2 and inﬁnity. Searching each of these regions for a gain of
K  0:706, we ﬁnd the third and fourth poles at 	0:784 and 	2:27, respectively. The
third pole, at 	0:784, may not be close enough to the zero at 	0:435, and thus
the system should be simulated. The fourth pole, at 	2:27, is 11 times as far from the
imaginary axis as the dominant poles and thus meets the requirement of at least ﬁve
times the real part of the dominant poles.
A computer simulation of the step response for the system,
which is shown in Figure 8.31, shows a 29% overshoot above a
ﬁnal value of 0:88, approximately 20-second settling time, and a
peak time of approximately 7.5 seconds.
b. Adding rate feedback by letting K2  K1 in the pitch control
system shown on the back endpapers, we proceed to ﬁnd the
new open-loop transfer function. Pushing 	K1 to the right past the
summing junction, dividing the pitch rate sensor by 	K1, and
combining the two resulting feedback paths obtaining s  1 give
us the following open-loop transfer function:
GsHs 
0:25K1s  0:435s  1
s  1:23s  2s2  0:226s  0:0169
(8.75)
Notice that the addition of rate feedback adds a zero to the open-
loop transfer function. The resulting root locus is shown in
Figure 8.32. Notice that this root locus, unlike the root locus in
a, is stable for all values of gain, since the locus does not enter
the right half of the s-plane for any value of positive gain,
K  0:25K1. Also notice that the intersection with the 20%
overshoot line is much farther from the imaginary axis than
is the case without rate feedback, resulting in a faster response
time for the system.
0.2
0
3
0
Time (seconds)
c(t)
6
9
12
15
18
21
24
0.4
0.6
0.8
1.0
1.2
Final value
FIGURE 8.31
Computer
simulation of step response of
pitch control loop without rate
feedback, UFSS vehicle
–1.024 + j1.998
K = 5.17; K1 = 20.68
s-plane
j2
j1
–j1
–j2
–1
0
jω
20%
–2
= Closed-loop pole
= Open-loop pole
σ
FIGURE 8.32
Root locus of pitch control loop
with rate feedback, UFSS vehicle
420
Chapter 8
Root Locus Techniques

The root locus intersects the 20% overshoot line at 	1:024  j1:998 with a gain of
K  0:25K1  5:17, or K1  20:68. Using the real and imaginary parts of the dominant
pole location, the settling time is predicted to be Ts  4=1:024  3:9 seconds, and the
peak time is estimated to be Tp  π=1:998  1:57 seconds. The new estimates show
considerable improvement in the transient response as compared to the system without the
rate feedback.
Now we test our second-order approximation by ﬁnding the location of the third
and fourth poles between 	0:435 and 	1. Searching this region for a gain of
K  5:17, we locate the third and fourth poles at approximately 	0:5 and 	0:91.
Since the zero at 	1 is a zero of H(s), the student can verify that this zero is not a zero
of the closed-loop transfer function. Thus, although there may be pole-zero cancel-
lation between the closed-loop pole at 	0:5 and the closed-loop zero at 	0:435, there
is no closed-loop zero to cancel the closed-loop pole at 	0:91.2 Our second-order
approximation is not valid.
A computer simulation of the system with rate feedback is shown in Figure 8.33.
Although the response shows that our second-order approximation is invalid, it still
represents a considerable improvement in performance over the system without rate
feedback; the percent overshoot is small, and the settling time is about 6 seconds instead of
about 20 seconds.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. For the UFSS vehicle (Johnson, 1980) heading control system shown on
the back endpapers, and introduced in the case study challenge in Chapter 5, do the
following:
a. Let K2  K1 and ﬁnd the value of K1 that yields 10% overshoot.
b. Repeat, using MATLAB.
1.0
2
0
10
Time (seconds)
c(t)
4
6
8
0.8
0.6
0.4
0.2
0
Final value
FIGURE 8.33
Computer
simulation of step response
of pitch control loop with rate
feedback, UFSS vehicle
2 The zero at 	1 shown on the root locus plot of Figure 8.32 is an open-loop zero since it comes from the numerator
of H(s).
Case Studies
421

We have concluded the chapter with two case studies showing the use and
application of the root locus. We have seen how to plot a root locus and estimate
the transient response by making a second-order approximation. We saw that the
second-order approximation held when rate feedback was not used for the UFSS.
When rate feedback was used, an open-loop zero from H(s) was introduced. Since
it was not a closed-loop zero, there was no pole-zero cancellation, and a second-order
approximation could not be justiﬁed. In this case, however, the transient response
with rate feedback did represent an improvement in transient response over the
system without rate feedback. In subsequent chapters we will see why rate feedback
yields an improvement. We will also see other methods of improving the transient
response.
Summary
In this chapter, we examined the root locus, a powerful tool for the analysis and design
of control systems. The root locus empowers us with qualitative and quantitative
information about the stability and transient response of feedback control systems. The
root locus allows us to ﬁnd the poles of the closed-loop system by starting from the
open-loop system’s poles and zeros. It is basically a graphical root-solving technique.
We looked at ways to sketch the root locus rapidly, even for higher-order systems. The
sketch gave us qualitative information about changes in the transient response as parameters
were varied. From the locus we were able to determine whether a system was unstable for
any range of gain.
Next we developed the criterion for determining whether a point in the s-plane was on
the root locus: The angles from the open-loop zeros, minus the angles from the open-loop
poles drawn to the point in the s-plane, add up to an odd multiple of 180°.
The computer program discussed in Appendix G.2 at www.wiley.com/college/nise
helps us to search rapidly for points on the root locus. This program allows us to
ﬁnd points and gains to meet certain transient response speciﬁcations as long as we are
able to justify a second-order assumption for higher-order systems. Other computer
programs, such as MATLAB, plot the root locus and allow the user to interact with the
display to determine transient response speciﬁcations and system parameters.
Our method of design in this chapter is gain adjustment. We are limited to transient
responses governed by the poles on the root locus. Transient responses represented by
pole locations outside of the root locus cannot be obtained by a simple gain adjustment.
Further, once the transient response has been established, the gain is set, and so is the
steady-state error performance. In other words, by a simple gain adjustment, we have to
trade off between a speciﬁed transient response and a speciﬁed steady-state error.
Transient response and steady-state error cannot be designed independently with a
simple gain adjustment.
We also learned how to plot the root locus against system parameters other than gain.
In order to make this root locus plot, we must ﬁrst convert the closed-loop transfer function
into an equivalent transfer function that has the desired system parameter in the same
position as the gain. The chapter discussion concluded with positive-feedback systems and
how to plot the root loci for these systems.
The next chapter extends the concept of the root locus to the design of compensation
networks. These networks have as an advantage the separate design of transient performance
and steady-state error performance.
422
Chapter 8
Root Locus Techniques

Review Questions
1. What is a root locus?
2. Describe two ways of obtaining the root locus.
3. If KGsHs  5180°, for what value of gain is s a point on the root locus?
4. Do the zeros of a system change with a change in gain?
5. Where are the zeros of the closed-loop transfer function?
6. What are two ways to ﬁnd where the root locus crosses the imaginary axis?
7. How can you tell from the root locus if a system is unstable?
8. How can you tell from the root locus if the settling time does not change over a region
of gain?
9. How can you tell from the root locus that the natural frequency does not change over a
region of gain?
10. How would you determine whether or not a root locus plot crossed the real axis?
11. Describe the conditions that must exist for all closed-loop poles and zeros in order to
make a second-order approximation.
12. What rules for plotting the root locus are the same whether the system is a positive- or a
negative-feedback system?
13. Brieﬂy describe how the zeros of the open-loop system affect the root locus and the
transient response.
Problems
1. For each of the root loci shown in Figure P8.1, tell
whether or not the sketch can be a root locus. If the
sketch cannot be a root locus, explain why. Give all
reasons. [Section: 8.4]
 s-plane 
jω
jω
jω
jω
jω
jω
jω
jω
(a)
 s-plane 
(b)
 s-plane  
(c)
Double
pole
 s-plane 
(d)
s-plane 
(e)
 s-plane 
( f )
 s-plane 
(g)
 s-plane 
(h)
δ
δ
δ
δ
δ
δ
δ
δ
FIGURE P8.1
Problems
423

2. Sketch the general shape of the root locus for each of
the open-loop pole-zero plots shown in Figure P8.2.
[Section: 8.4]
s-plane
(a)
jω
jω
jω
jω
jω
jω
s-plane
(b)
s-plane
(c)
s-plane
(d)
s-plane
(e)
s-plane
(f)
σ
σ
σ
σ
σ
σ
FIGURE P8.2
3. Sketch the root locus for the unity feedback system
showninFigureP8.3forthefollowingtransferfunctions:
[Section: 8.4]
a. Gs  Ks  2s  6
s2  8s  25
b. Gs  Ks2  4
s2  1
c. Gs  Ks2  1
s2
d. Gs 
K
s  13s  4
R(s)
G(s)
C(s)
–
+
FIGURE P8.3
4. Let
Gs 
K s  2
3


s2s  6
in Figure P8.3. [Section: 8.5]
a. Plot the root locus.
b. Write an expression for the closed-loop transfer
function at the point where the three closed-loop
poles meet.
5. Let
Gs  	Ks  12
s2  2s  2
with K > 0 in Figure P8.3. [Sections: 8.5, 8.9]
a. Find the range of K for closed-loop stability.
b. Sketch the system’s root locus.
c. Find the position of the closed-looppoles when K  1
and K  2.
6. For the open-loop pole-zero plot shown in Figure P8.4,
sketch the root locus and ﬁnd the break-in point.
[Section: 8.5]
–1
–2
–3
–j1
j1
s-plane
jω
1
σ
FIGURE P8.4
7. Sketch the root locusof the unity feedback systemshown
in Figure P8.3, where
Gs  Ks  1s  7
s  3s 	 5
and ﬁnd the break-in and breakaway points. Find the
range of K for which the system is closed-loop stable.
[Section: 8.5]
424
Chapter 8
Root Locus Techniques

8. The characteristic polynomial of a feedback control
system, which is the denominator of the closed-loop
transfer function, is given by s3  2s2  20K  7s
100K.
Sketch
the
root
locus
for
this
system.
[Section: 8.8]
9. Figure P8.5 shows open-loop poles and zeros. There
are two possibilities for the sketch of the root locus.
Sketch each of the two possibilities. Be aware that only
one can be the real locus for speciﬁc open-loop pole and
zero values. [Section: 8.4]
s-plane
jω
σ
FIGURE P8.5
10. Plot the root locus for the unity feedback system shown
in Figure P8.3, where
Gs  Ks  2s2  4
s  5s 	 3
For what range of K will the poles be in the right
half-plane? [Section: 8.5]
11. For the unity feedback system shown in Figure P8.3,
where
Gs  K s2 	 9


s2  4


sketch the root locus and tell for what values of K the
system is stable and unstable. [Section: 8.5]
12. Sketch the root locus for the unity feedback system
shown in Figure P8.3, where
Gs 
K s2  2


s  3s  4
Give the values for all critical points of interest. Is
the system ever unstable? If so, for what range of K?
[Section: 8.5]
13. For each system shown in Figure P8.6, make an
accurate plot of the root locus and ﬁnd the following:
[Section: 8.5]
a. The breakaway and break-in points
b. The range of K to keep the system stable
c. The value of K that yields a stable system with
critically damped second-order poles
d. The value of K that yields a stable system with a pair
of second-order poles that have a damping ratio
of 0.707
C(s)
K(s + 2)(s + 1)
(s – 2)(s – 1)
System 1
R(s) +
–
C(s)
K(s + 2)(s + 1)
(s2 – 2s + 2)
System 2
R(s) +
–
FIGURE P8.6
14. Sketch the root locus and ﬁnd the range of K for stability
for the unity feedback system shown in Figure P8.3
for the following conditions: [Section: 8.5]
a. Gs 
Ks2  1
s 	 1s  2s  3
b. Gs  Ks2 	 2s  2
ss  1s  2
15. For the unity feedback system of Figure P8.3, where
Gs 
Ks  5
s2  1s 	 1s  3
sketch the root locus and ﬁnd the range of K such that
there will be only two right–half-plane poles for the
closed-loop system. [Section: 8.5]
16. For the unity feedback system of Figure P8.3, where
Gs 
K
ss  5s  8
plot the root locus and calibrate your plot for gain. Find
all the critical points, such as breakaways, asymptotes,
jω-axis crossing, and so forth. [Section: 8.5]
17. Given the unity feedback system of Figure P8.3, make
an accurate plot of the root locus for the following:
a. Gs  Ks2 	 2s  2
s  1s  2
b. Gs  Ks 	 1s 	 2
s  1s  2
Also, do the following:
Problems
425

Calibrate the gain for at least four points for each case.
Also ﬁnd the breakaway points, the jω-axis crossing,
and the range of gain for stability for each case. Find the
angles of arrival for Part a. [Section: 8.5]
18. Given the root locus shown in Figure P8.7, [Section: 8.5]
a. Find the value of gain that will make the system
marginally stable.
b. Find the value of gain for which the closed-loop
transfer function will have a pole on the real axis
at 	5.
–4
–1
j1
–j1
s-plane
jω
σ
FIGURE P8.7
19. Given the unity feedback system of Figure P8.3, where
Gs 
Ks  2
ss  1s  3s  5
do the following: [Section: 8.5]
a. Sketch the root locus.
b. Find the asymptotes.
c. Find the value of gain that will make the system
marginally stable.
d. Find the value of gain for which the closed-loop
transfer function will have a pole on the real axis
at 	0:5.
20. For the unity feedback system of Figure P8.3, where
Gs 
Ks  α
ss  3s  6
ﬁnd the values of α and K that will yield a second-order
closed-loop pair of poles at 	1  j100. [Section: 8.5]
21. For the unity feedback system of Figure P8.3, where
Gs  Ks 	 1s 	 2
ss  1s  2
sketch the root locus and ﬁnd the following:
[Section: 8.5]
a. The breakaway and break-in points
b. The jω-axis crossing
c. The range of gain to keep the system stable
d. The value of K to yield a stable system with second-
order complex poles, with a damping ratio of 0.5.
22. For the unity feedback system shown in Figure P8.3,
where
Gs 
Ks  10s  20
s  30 s2 	 10s  100


do the following: [Section: 8.7]
a. Sketch the root locus.
b. Find the range of gain, K, that makes the system
stable.
c. Find the value of K that yields a damping ratio of
0.707 for the system’s closed-loop dominant poles.
d. Find the value of K that yields closed-loop critically
damped dominant poles.
23. For the system of Figure P8.8(a), sketch the root locus
and ﬁnd the following: [Section: 8.7]
a. Asymptotes
b. Breakaway points
c. The range of K for stability
d. The value of K to yield a 0.7 damping ratio for the
dominant second-order pair
To improve stability, we desire the root locus to
cross the jω-axis at j5.5. To accomplish this, the
open-loop function is cascaded with a zero, as shown
in Figure P8.8(b).
e. Find the value of α and sketch the new root locus.
f. Repeat Part c for the new locus.
g. Compare the results of Part c and Part f. What
improvement in transient response do you notice?
C(s)
K
(s + 1)(s + 2)(s + 3)(s + 4)
C(s)
 K(s + α)
(s + 1)(s + 2)(s + 3)(s + 4)
(a)
(b)
R(s) +
–
R(s) +
–
FIGURE P8.8
426
Chapter 8
Root Locus Techniques

24. Sketch the root locus for the positive-feedback system
shown in Figure P8.9. [Section: 8.9]
K
C(s)
R(s) +
+
s(s+1)
FIGURE P8.9
25. Root loci are usually plotted for variations in the gain.
Sometimes we are interested in the variation of the
closed-loop poles as other parameters are changed. For
the system shown in Figure P8.10, sketch the root
locus as α is varied. [Section: 8.8]
C(s)
R(s) +
–
1
s(s + α) 
FIGURE P8.10
26. Given the unity feedback system shown in Figure P8.3,
where
Gs 
K
s  1s  2s  3
do the following problem parts by ﬁrst making a
second-order approximation. After you are ﬁnished
with all of the parts, justify your second-order
approximation. [Section: 8.7]
a. Sketch the root locus.
b. Find K for 20% overshoot.
c. For K found in Part b, what is the settling time, and
what is the peak time?
d. Find the locations of higher-order poles for K found
in Part b.
e. Find the range of K for stability.
27. For the unity feedback system shown in Figure P8.3,
where
Gs 
Ks2 	 2s  2
s  2s  4s  5s  6
do the following: [Section: 8.7]
a. Sketch the root locus.
b. Find the asymptotes.
c. Find the range of gain, K, that makes the system
stable.
d. Find the breakaway points.
e. Find the value of K that yields a closed-loop step
response with 25% overshoot.
f. Find the location of higher-order closed-loop poles
when the system is operating with 25% overshoot.
g. Discuss
the
validity
of
your
second-order
approximation.
h. Use MATLAB to obtain the
closed-loop step response to
validate or refute your second-order
approximation.
28. The unity feedback system shown in Figure P8.3, where
Gs  Ks  2s  3
ss  1
is to be designed for minimum damping ratio. Find the
following: [Section: 8.7]
a. The value of K that will yield minimum damping
ratio
b. The estimated percent overshoot for that case
c. The estimated settling time and peak time for that
case
d. The justiﬁcation of a second-order approximation
(discuss)
e. The expected steady-state error for a unit ramp input
for the case of minimum damping ratio
29. For the unity feedback system shown in Figure P8.3,
where
Gs 
Ks  2
ss  6s  10
ﬁnd K to yield closed-loop complex poles with a
damping ratio of 0.55. Does your solution require a
justiﬁcation
of
a
second-order
approximation?
Explain. [Section: 8.7]
30. For the unity feedback system shown in Figure P8.3,
where
Gs 
Ks  α
ss  2s  6
ﬁnd the value of α so that the system will have a settling
time of 2 seconds for large values of K. Sketch the
resulting root locus. [Section: 8.8]
31. FortheunityfeedbacksystemshowninFigure8.3,where
Gs 
Ks  5
s2  8s  25s  12s  α
design K and α so that the dominant complex poles of
the closed-loop function have a damping ratio of 0.5 and
a natural frequency of 1.2 rad/s.
Problems
427

32. For the unity feedback system shown in Figure 8.3,
where
Gs 
K
ss  3s  4s  8
do the following: [Section: 8.7]
a. Sketch the root locus.
b. Find the value of K that will yield a 10% overshoot.
c. Locate all nondominant poles. What can you say
about the second-order approximation that led to
your answer in Part b?
d. Find the range of K that yields a stable system.
33. Repeat Problem 32 using MATLAB.
Use one program to do the
following:
a. Display a root locus and pause.
b. Draw a close-up of the root locus where
the axes go from 	2 to 0 on the real axis
and 	2 to 2 on the imaginary axis.
c. Overlay the 10% overshoot line on the
close-up root locus.
d. Select interactively the point where
the root locus crosses the 10% over-
shoot line, and respond with the gain
at that point as well as all of the
closed-loop poles at that gain.
e. Generate the step response at the gain
for 10% overshoot.
34. FortheunityfeedbacksystemshowninFigure8.3,where
Gs 
Ks2  4s  5
s2  2s  5s  3s  4
do the following: [Section: 8.7]
a. Find the gain, K, to yield a 1-second peak time if one
assumes a second-order approximation.
b. Check the accuracy of the
second-order approximation
using MATLAB to simulate the system.
35. For the unity feedback system shown in Figure P8.3,
where
Gs 
Ks  2s  3
s2  2s  2s  4s  5s  6
do the following: [Section: 8.7]
a. Sketch the root locus.
b. Find the jω-axis crossing and the gain, K, at the
crossing.
c. Find all breakaway and break-in points.
d. Find angles of departure from the complex poles.
e. Find the gain, K, to yield a damping ratio of 0.3 for
the closed-loop dominant poles.
36. Repeat Parts a through c and e of Problem 35 for
[Section: 8.7]
Gs 
Ks  4
ss  1s  2s  10
37. For the unity feedback system shown in Figure P8.3,
where
Gs 
K
s  3s2  4s  5
do the following: [Section: 8.7]
a. Find the location of the closed-loop dominant poles
if the system is operating with 15% overshoot.
b. Find the gain for Part a.
c. Find all other closed-loop poles.
d. Evaluate
the
accuracy
of
your
second-order
approximation.
38. For the system shown in Figure P8.11, do the following:
[Section: 8.7]
K
   
C(s)
R(s) +
–
(s + 2)(s + 3)
(s2 + 2s + 5)
s2 – 4s + 8
FIGURE P8.11
a. Sketch the root locus.
b. Find the jω-axis crossing and the gain, K, at the
crossing.
c. Find the real-axis breakaway to two-decimal-place
accuracy.
d. Find angles of arrival to the complex zeros.
e. Find the closed-loop zeros.
f. Find the gain, K, for a closed-loop step response with
30% overshoot.
g. Discuss
the
validity
of
your
second-order
approximation.
39. Sketch the root locus for the system of Figure P8.12 and
ﬁnd the following: [Section: 8.7]
a. The range of gain to yield stability
428
Chapter 8
Root Locus Techniques

b. The value of gain that will yield a damping ratio of
0.707 for the system’s dominant poles
c. The value of gain that will yield closed-loop poles
that are critically damped
K
   
C(s)
(s + 30)
R(s) +
–
s(s + 3)(s + 7)(s + 9)
(s2 + 20s + 225)
FIGURE P8.12
40. Repeat Problem 39 using MATLAB.
The program will do the following
in one program:
a. Display a root locus and pause.
b. Display a close-up of the root locus
where the axes go from 	2 to 0.5 on the
real axis and 	2 to 2 on the imaginary
axis.
c. Overlay the 0.707 damping ratio line
on the close-up root locus.
d. Allow you to select interactively the
point where the root locus crosses the
0.707 damping ratio line, and respond
by displaying the gain at that point
as well as all of the closed-loop
poles at that gain. The program will
then allow you to select interac-
tively the imaginary-axis crossing
and respond with a display of the
gain at that point as well as all of
the closed-loop poles at that gain.
Finally, the program will repeat the
evaluation
for
critically
damped
dominant closed-loop poles.
e. Generate the step response for the
critically damped case.
41. Given the unity feedback system shown in Figure P8.3,
where
Gs  Ks  z
s2s  10
do the following: [Section: 8.7]
a. If z  2, ﬁnd K so that the damped frequency of
oscillation of the transient response is 5 rad/s.
b. For the system of Part a, what static error constant
(ﬁnite) can be speciﬁed? What is its value?
c. The system is to be redesigned by changing the
values of z and K. If the new speciﬁcations are
%OS  4:32% and Ts  0:8 s, ﬁnd the new values
of z and K.
42. Given the unity feedback system shown in Figure P8.3,
where
Gs 
K
s  1s  3s  62
ﬁnd the following: [Section: 8.7]
a. The value of gain, K, that will yield a settling time of
4 seconds
b. The value of gain, K, that will yield a critically
damped system
43. You are given the unity-feedback
system of Figure P8.3, where
Gs 
Ks  0:02
s2s  4s  10s  25
Use MATLAB to plot the root locus. Use a
closeup of the locus (from 	5 to 0 and — 1
to 6) to ﬁnd the gain, K, that yields a
closed-loop unit-step response, c(t),
with 20.5% overshoot and a settling time
of Ts = 3 seconds. Mark on the time
response
graph
all
other
relevant
characteristics, such as the peak time,
rise time, and ﬁnal steady-state value.
44. Let
Gs 
Ks 	 1
s  2s  3
in Figure P8.3. [Section: 8.7].
a. Find the range of K for closed-loop stability.
b. Plot the root locus for K > 0.
c. Plot the root locus for K < 0.
d. Assuming a step input, what value of K will result in
the smallest attainable settling time?
e. Calculate the system’s ess for a unit step input
assuming the value of K obtained in Part d.
f. Make an approximate hand sketch of the unit step
response of the system if K has the value obtained
in Part d.
45. Given the unity feedback system shown in Figure P8.3,
where
Gs 
K
ss  1:25s  8
Problems
429

evaluate the pole sensitivity of the closed-loop system if
thesecond-order,underdampedclosed-looppolesareset
for [Section: 8.10]
a. ζ  0:591
b. ζ  0:456
c. Which of the two previous cases has more desirable
sensitivity?
46. Repeat Problem 3 but sketch your root loci for negative
values of K. [Section: 8.9]
47. Figure P8.13 shows the block diagram of a closed-
loop control of a linearized magnetic levitation system
(Galvão, 2003).
A
s2 – η2  
G(s) 
R(s)
C(s)
+
+
FIGURE P8.13
Linearized magnetic levitation system block
diagram
Assuming A  1300 and η  860, draw the root locus
and ﬁnd the range of K for closed-loop stability when:
a. Gs  K;
b. Gs  Ks  200
s  1000
48. The simpliﬁed transfer function model from steering
angle δs to tilt angle φs in a bicycle is given by
Gs  φs
δs  aV
bh *
s  Va
s2 	 g
h
In this model, h represents the vertical distance from
the center of mass to the ﬂoor, so it can be readily
veriﬁed that the model is open-loop
unstable.
(Åström, 2005). Assume that for a speciﬁc bicycle,
a  0:6 m, b  1:5 m, h  0:8 m, and g  9:8 m/sec.
In order to stabilize the bicycle, it is assumed that the
bicycle is placed in the closed-loop conﬁguration
shown in Figure P8.3 and that the only available
control variable is V, the rear wheel velocity.
a. Find the range of V for closed-loop stability.
b. Explain why the methods presented in this chapter
cannot be used to obtain the root locus.
c. Use MATLAB to obtain the
system’s root locus.
49. A technique to control the steering of a vehicle that
follows a line located in the middle of a lane is to deﬁne
a look-ahead point and measure vehicle deviations
with respect to the point. A linearized model for such a
vehicle is
_V
_r
_ψ
_Yg
2
666664
3
777775

a11
a12
	b1K
b1K
d
a21
a22
	b2K
b2K
d
0
1
0
0
1
0
U
0
2
66666664
3
77777775
V
r
ψ
Yg
2
66664
3
77775
where V  vehicle’s lateral velocity, r  vehicle’s yaw
velocity, ψ  vehicle’s yaw position, and Yg  the
y-axis coordinate of the vehicle’s center of gravity. K
is a parameter to be varied depending upon trajectory
changes. In a speciﬁc vehicle traveling at a speed of
U  	10 m/sec, the parameters are a11  	11:6842;
a12  6:7632; b1  	61:5789; a21  	3:5143; a22 
24:0257, and b2  66:8571: d  5 m is the look-ahead
distance (Ünyeliog ̆lu, 1997). Assuming the vehicle will
be controlled in closed loop:
a. Find the system’s characteristic equation as a
function of K.
b. Find the system’s root locus as K is varied.
c. Using the root locus found in Part b, show that the
system will be unstable for all values K.
50. It is known that mammals have hormonal regulation
mechanisms that help maintain almost constant
calcium
plasma
levels
(0.08–0.1
g/L
in
dairy
cows). This control is necessary to maintain healthy
functions, as calcium is responsible for diverse
physiological functions, such as bone formation,
intracellular communications, and blood clotting.
It has been postulated that the mechanism of calcium
control resembles that of a PI (proportional-plus-
integral) controller. PI controllers (discussed in detail
in Chapter 9) are placed in cascade with the plant and
used to improve steady-state error. Assume that the PI
controller has the form Gcs  KP  KI
S


where KP
and KI are constants. Also assume that the mammal’s
system accumulates calcium in an integrator-like
fashion, namely Ps  1
Vs
, where V is the plasma
volume. The closed-loop model is similar to that of
Figure P8.3, where Gs  GcsPs (Khammash,
2004).
a. Sketch the system’s root locus as a function of KP,
assuming KI > 0 is constant.
b. Sketch the system’s root locus as a function of KI,
assuming KP > 0 is constant.
430
Chapter 8
Root Locus Techniques

51. Problem 64 in Chapter 7 introduced the model of a
TCP/IP router whose packet-drop probability is controlled
by using a random early detection (RED) algorithm
(Hollot, 2001). Using Figure P8.3 as a model, a speciﬁc
router queue’s open-loop transfer function is
Gs 
7031250Le	0:2s
s  0:667s  5s  50
The function e	0:2s represents delay. To apply the root
locus method, the delay function must be replaced
with a rational function approximation. A ﬁrst-order
Padé approximation can be used for this purpose.
Let e	sD ≈1 	 Ds. Using this approximation, plot
the root locus of the system as a function of L.
52. For the dynamic voltage restorer (DVR) discussed in
Problem 47, Chapter 7, do the following:
a. When ZL  1
sCL
, a pure capacitance, the system is
more inclined toward instability. Find the system’s
characteristic equation for this case.
b. Using the characteristic equation found in Part a,
sketch the root locus of the system as a function
of
CL: Let L 
7:6 mH;
C  11 μF; α  26:4;
β  1; Km  25; Kv  15; KT  0:09565,
and
τ  2 ms (Lam, 2004).
53. The closed-loop vehicle response in stopping a train
depends on the train’s dynamics and the driver, who is
an integral part of the feedback loop. In Figure P8.3,
let the input be Rs  vr the reference velocity, and
the output Cs  v, the actual vehicle velocity.
(Yamazaki, 2008) shows that such dynamics can be
modeled by Gs  GdsGts where
Gds  h 1  K
s

 s 	 L
2
s  L
2
represents the driver dynamics with h, K, and L param-
eters particular to each individual driver. We assume
here that h = 0.003 and L = 1. The train dynamics are
given by
Gts 
kbf Kp
M1  kesτs  1
where M = 8000 kg, the vehicle mass; ke  0:1 the
inertial
coefﬁcient;
kb  142:5,
the
brake
gain;
Kp  47:5, the pressure gain; τ  1:2 sec, a time con-
stant; and f  0:24, the normal friction coefﬁcient.
a. Make a root locus plot of the system as a function of
the driver parameter K.
b. Discuss why this model may not be an accurate
description of a real driver-train situation.
54. Voltage droop control is a technique in which loads are
driven at lower voltages thanthose provided by thesource.
In general, the voltage is decreased as current demand
increases in the load. The advantage of voltage droop is
that it results in lower sensitivity to load current variations.
Voltage droop can be applied to the power distribu-
tion of several generators and loads linked through a dc
bus. In (Karlsson, 2003) generators and loads are driven
by 3-phase ac power, so they are interfaced to the bus
throughac/dcconverters.Sinceeachoneoftheloadsworks
independently,afeedbacksystemshowninFigureP8.14is
used in each to respond equally to bus voltage variations.
Given that Cs = Cr= 8,000 μF, Lcable = 50 μH, Rcable =
0.06 Ω, Zr= Rr = 5 Ω, ωlp = 200 rad/s, Gconv(s)= 1,
Vdc-ref = 750 V, and Pref-ext = 0, do the following:
a. If Zreq is the parallel combination of Rr and Cr, and
Gconv(s) = 1, ﬁnd
Gs  Vss
Iss 
Vss
Is	ref s
b. Write a MATLAB M-ﬁle to plot
and copy the full root locus
for that system,
then zoom-in the
locus by setting the x-axis (real-
axis) limits to 	150 to 0 and the
y-axis
(imaginary-axis)
limits
to
	150 to 150. Copy that plot, too, and
ﬁnd and record the following:
(1) The gain, K, at which the system would
have complex-conjugate closed-loop
dominant poles with a damping ratio
ζ = 0.707
(2) The coordinates of the correspond-
ing point selected on the root-locus
(3) The values of all closed-loop poles
at that gain
(4) The output voltage vs(t) for a step
input voltage vdc-ref (t) = 750 u(t)
volts
c. Plot that step response and
use the MATLAB Characteristics
tool (inthegraphwindow) to note onthe
curve the following parameters:
(1) The actual percent overshoot and
the corresponding peak time, Tp
(2) The rise time, Tr, and the settling
time, Ts
(3) The ﬁnal steady-state value in volts
Problems
431

55. It has been suggested that the use of closed-loop
feedback in ventilators can highly reduce mortality
and health problems in patients in need of respiratory
treatments (Hahn, 2012). A good knowledge of the
transfer functions involved is necessary for the
design of an appropriate controller. In a study with
18 patients it was found that the open-loop transfer
function from minute ventilation (MV) to end-tidal
carbon dioxide partial pressure (PETCO2) can be
nominally modeled as:
Gs  0:415kcs  0:092s  0:25
ss  0:007s  0:207
a. Make a sketch of the root locus of the system
indicating the breakaway points and the value kc takes
in each of them.
b. In the design of ventilators it is very important to
have negligible overshoot with the fastest possible
settling time. It has been suggested that a value of
kc  5:35 will achieve these speciﬁcations. Mark
the position of the closed-loop poles for this value
of kc and explain why this is a reasonable gain
choice.
56. Figure P8.15 shows a simpliﬁed drawing of a feedback
system that includes the drive system
GC(s)
GP(s)
+
–
M(s)
C(s) = ΩL(s)
R(s) = Ωr(s)
E(s)
FIGURE P8.15
Gs  25 s2  1:2s  12500
s s2  5:6s  62000
presented in Problem 67, Chapter 5 (Thomsen, 2011).
Referring to Figures P5.43 and P8.15, Gp(s) in
Figure P8.15 is given by:
Gps  KM
Gs
1  0:1Gs
Given that the controller is
proportional, that is, GC(s) = KP,
use MATLAB and a procedure similar to
that developed in Problem 40 in this
chapter to plot the root locus4 and obtain
the output response, c(t) = ωL(t), when a
step input, r(t)= ωr (t) = 260 u(t) rad/
sec, is applied at t = 0. Mark on the time
response graph, c(t), all relevant char-
acteristics, such as the percent over-
shoot (which should not exceed 16%), peak
time, rise time, settling time, and ﬁnal
steady-state value.
DESIGN PROBLEMS
DESIGN PROBLEMS
57. A simpliﬁed block diagram of a human pupil servo-
mechanism is shown in Figure P8.16. The term e	0:18s
_
H (s)
Icable(s)
_
+
Vs (s) 
Ev(s)
GC(s)
1
Vs(s)
+
_
Vdc-ref (s)
Vs-lp(s) 
sCs
1
Zcable + Zreq
1
Pref-ext(s)
s + ωlp
K
+
Iref-ext(s)
Is-ref (s)
Is(s)
Gconv(s)
ωlp
FIGURE P8.143
3 Karlsson, P., and Svensson, J. DC Bus Voltage Control for a Distributed
Power System, IEEE Trans. Power Electronics, vol. 18, no. 6, 2003,
pp. 1405–1412. Fig. 4, p. 1406. IEEE Transactions on Power Electronics
by Institute of Electrical and Electronics Engineers; Power Electronics
Council (Institute of Electrical and Electronic Engineers); IEEE Power
Electronics Society. Reproduced with permission of Institute of Electrical
and Electronics Engineers, in the format Republish in a book via Copyright
Clearance Center.
4 Select a point on the close-up of the root locus that corresponds to a gain
between 1 and 5.
432
Chapter 8
Root Locus Techniques

represents a time delay. This function can be approxi-
mated by what is known as a Padé approximation. This
approximation can take on many increasingly compli-
cated forms, depending upon the degree of accuracy
required. If we use the Padé approximation
e	x 
1
1  x  x2
2!
then
e	0:18s 
61:73
s2  11:11s  61:73
Since the retinal light ﬂux is a function of the opening of
the iris, oscillations in the amount of retinal light ﬂux
imply oscillations of the iris (Guy, 1976). Find the
following:
a. The value of K that will yield oscillations
b. The frequency of these oscillations
c. The settling time for the iris if K is such that the eye is
operating with 20% overshoot
Retinal
light
flux
External
light
flux
+
–
(s + 10)3
Ke–0.18s
FIGURE P8.16
Simpliﬁed block diagram of pupil
servomechanism
58. A hard disk drive (HDD) arm has an open-loop unstable
transfer function,
Ps  Xs
Fs 
1
Ibs2
where X(s) is arm displacement and F(s) is the applied
force (Yan, 2003). Assume the arm has an inertia of
Ib  3  10	5 kg-m2 and that a lead controller, Gcs
(used to improve transient response and discussed in
Chapter 9), is placed in cascade to yield
PsGcs  Gs  K
Ib
s  1
s2s  10
as in Figure P8.3.
a. Plot the root locus of the system as a function of K.
b. Find the value of K that will result in dominant
complex conjugate poles with a ζ  0:7 damping
factor.
59. A robotic manipulator together with a cascade PI
controller (used to improve steady-state response and
discussed in Chapter 9) hasatransfer function(Low,2005)
Gs 
Kp  K1
s

 48; 500
s2  2:89s
Assume the robot’s joint will be controlled in the con-
ﬁguration shown in Figure P8.3.
a. Find the value of KI that will result in ess  2% for a
parabolic input.
b. Using the value of KI found in Part a, plot the root
locus of the system as a function of KP.
c. Find the value of KP that will result in a real pole at
	1. Find the location of the other two poles.
60. Wind turbines, such as the one shown in Figure P8.17(a),
are becoming popular as a way of generating electricity.
Feedback control loops are designed to control the output
power of the turbine, given an input power demand.
Blade-pitch control may be used as part of the control
loop for a constant-speed, pitch-controlled wind turbine,
as shown in Figure P8.17(b). The drivetrain, consisting of
the windmill rotor, gearbox, and electric generator (see
Figure P8.17(c)), is part of the control loop. The torque
created by the wind drives the rotor. The windmill rotor is
connected to the generator through a gearbox.
The transfer function of the drivetrain is
Pos
TRs  Gdts

3:92KLSSKHSSKGN2s
fN2KHSS JRs2  KLSS

JGs2 τels  1


 KGs  JRs2KLSSJGs2  KHSS
τels  1  KGsg
where Pos is the Laplace transform of the output power
from the generator and TRs is the Laplace transform
of the input torque on the rotor. Substituting typical
numerical values into the transfer function yields
Pos
TRs  Gdts
 3:9212:6  106301  103688N2s
fN2301  103190; 120s2  12:6  106
 3:8s220  10	3s  1  668s
 190; 120s212:6  106
 3:8s2  301  103
 20  10	3s  1  668sg
(Anderson, 1998). Do the following for the drivetrain
dynamics, making use of any computational aids at your
disposal:
Problems
433

+
–
+
++
++
–
Power
controller
Pitch
actuator
Power
transducer
Rotor pitch
sensitivity
Rotor gust
sensitivity
Pitch
inertia
Drivetrain
Windspeed
disturbance
Applied
moment
Disturbance
moment
Pitch
demand
Electrical
power
Power
demand
Control surface
aerodynamics
(b)
Pitch
angle
Shaft
torque
(c)
Rotor
inertia JR
Low-speed shaft
stiffness KLSS
Gearbox
Ratio N
High-speed shaft
stiffness KHSS
Generator
Inertia Jg, Generator gain KG,
 
Time constant τel
FIGURE P8.17
a. Wind turbines generating electricity near Palm Springs, California; b. control loop
for a constant-speed pitch-controlled wind turbine;5 c. drivetrain5
5 Adapted from Anderson, C. G., Richon, J-B., and Campbell, T. J. An Aerodynamic Moment-Controlled Surface for Gust Load Alleviation on Wind
Turbine Rotors, IEEE Transactions on Control System Technology, vol. 6, no. 5, September 1998, pp. 577–595. 1998 IEEE.
434
Chapter 8
Root Locus Techniques

a. Sketch a root locus that shows the pole locations of
Gdt(s) for different values of gear ratio, N.
b. Find the value of N that yields a pair of complex
poles of Gdt(s) with a damping ratio of 0.5.
61. An active system for the
elimination of ﬂoor vibrations
due to human presence is
presented in (Nyawako, 2009). The system
consists of a sensor that measures the
ﬂoor’s vertical acceleration and an actu-
ator that changes the ﬂoor characteris-
tics. The open-loop transmission of the
particular setup used can be described
by Gs  KGasFsGms, where the actua-
tor’s transfer function is
Gas 
10:26
s2  11:31s  127:9
The ﬂoor’s dynamic charactristics can be
modeled by
Fs 
6:667  10	5s2
s2  0:2287s  817:3
The sensor’s transfer function is
Gms 
s
s2  5:181s  22:18
and K is the gain of the controller. The
system operations can be described by the
unity-gain feedback loop of Figure P8.3.
a. Use MATLAB’s SISO Design Tool to obtain
the root locus of the system in terms
of K.
b. Find the range of K for closed-loop
stability.
c. Find, if possible, a value of K that
will yield a closed-loop overdamped
response.
62. Many implantable medical devices such as pacemakers,
retinal implants, deep brain stimulators, and spinal cord
stimulators are powered by anin-body battery that can be
chargedthroughatranscutaneousinductivedevice.Opti-
mal battery charge can be obtained when the out-of-body
charging circuit is in resonance with the implanted
charging circuit(Baker, 2007). Undercertain conditions,
the coupling of both resonant circuits can be modeled by
the feedback system in Figure P8.3 where
Gs 
Ks4
s2  2ζωns  ω2
n

2
The gain K is related to the magnetic coupling between
the external and in-body circuits. K may vary due to
positioning, skin conditions, and other variations. For
this problem let ζ  0:5 and ωn  1.
a. Find the range of K for closed-loop stability.
b. Draw the corresponding root locus.
63. It is important to precisely
control the amount of organic
fertilizer applied to a speciﬁc
crop area in order to provide
speciﬁc nutrient quantities and
to
avoid
unnecessary
environmental
pollution. A precise delivery liquid
manure machine has been developed for
this purpose (Saeys, 2008). The system
consists
of
a
pressurized
tank,
a
valve, and a rheological ﬂow sensor.
After simpliﬁcation, the system can
be modeled as a closed-loop negative-
feedback system with a forward-path
transfer function
Gs 
2057:38Ks2 	 120s  4800
ss  13:17s2  120s  4800
consisting of an electrohydraulic sys-
tem in cascade with the gain of the manure
ﬂow valve and a variable gain,K. The
feedback path is comprised of
Hs 
10s2 	 4s  5:333
s  10s2  4s  5:333
a. Use the SISO Design Tool in MATLAB to
obtain the root locus of the system.
b. Use the SISO Design Tool to ﬁnd the
range of K for closed-loop stability.
c. Find the value of K that will result in
the smallest settling time for this
system.
d. Calculate the expected settling time
for a step input with the value of K
obtained in Part c.
e. Check
your
result
through
a
step-
response simulation.
64. Harmonic drives are very
popular for use in robotic
manipulators due to their low backlash,
high torque transmission, and compact
size (Spong, 2006). The problem of joint
Problems
435

ﬂexibility is sometimes a limiting factor
in achieving good performance. Consider
that the idealized model representing
joint ﬂexibility is shown in Figure P8.18.
The input to the drive is from an actuator
and is applied at θm. The output is
connected to a load at θl. The spring
represents the joint ﬂexibility and Bm
and Bl represent the viscous damping of
the actuator and load, respectively.
Now we insert the device into the feedback
loop shown in Figure P8.19. The ﬁrst block
in the forward path is a PD controller,
which we will study in the next chapter.
The PD controller is used to improve
transient response performance.
Bm
θ
θm
u
k
Jm
J
B
FIGURE P8.18
Idealized model representing joint ﬂexibility7
Kp + KDs
k
r
+
+
+
–
k
θm
θi
1
pm(s)
FIGURE P8.19
Joint ﬂexibility model inserted in feedback loop8
Use MATLAB to ﬁnd the gain KD to yield an
approximate 5% overshoot in the step
response given the following parameters:
Jl = 10; Bl = 1; k = 100; Jm = 2; Bm = 0.5; KP
KD

0:25; pls  J ls2  Bls  k; and pms  J ms2
Bms  k
65. Using LabVIEW, the Control Design
and Simulation Module, and the
MathScript RT Module, open and customize
the Interactive Root Locus VI from the
Examples
to
implement
the
system
of
Problem 64. Select the parameter KD to
meet the requirement of Problem 64 by
varying the location of the closed-loop
poles ontherootlocus.Besureyourfront
panel shows the following: (1) open-loop
transfer function, (2)closed-looptrans-
fer function, (3) root locus, (4) list of
closed-loop poles, and (5) step response.
66. An automatic regulator is used
to control the ﬁeld current of
a three-phase synchronous machine with
identical symmetrical armature windings
(Stapleton,1964).Thepurposeofthereg-
ulator is to maintain the system voltage
constant
within
certain
limits.
The
transfer function of the synchronous
machine is
Gsms  Δδs
ΔPms 
Ms 	 z1s 	 z2
s 	 p1s 	 p2s 	 p3
which relates the variation of rotor
angle, Δδ s
 , to the change in the syn-
chronous machine’s shaft power, ΔPm s
 .
The
closed-loop
system
is
shown
in
Figure P8.3, where G s
   KGC s
 Gsm s
  and K
is a gain to be adjusted. The regulator’s
transfer function, Gc(s), is given by
Gcs 
μ.
Te
s  1
Te
Assume the following parameter values:
μ  4; M  0:117; Te  0:5; z1;2  	0:071  j6:25;
p1  	0:047; and p2;3  	0:262  j5:1;
and do the following:
Write a MATLAB M-ﬁle to plot the root
locus for the system and to ﬁnd the
following:
a. The gain K at which the system becomes
marginally stable
b. The closed-loop poles, p, and transfer
function, T(s), corresponding to a 16%
overshoot
c. The coordinates of the point selected
on the root-locus corresponding to 16%
overshoot
d. A simulation of the unit-step response
of the closed-loop system correspond-
ing to your 16% overshoot design. Note
7 Spong, M., Hutchinson, S., and Vidyasagar, M. Robot Modeling and
Control. John Wiley & Sons, Hoboken, NJ, 2006. Figure 6.20, p. 221.
8 Spong, M., Hutchinson, S., and Vidyasagar, M. Robot Modeling and
Control. John Wiley & Sons, Hoboken, NJ, 2006. Figure 6.24, p. 224.
436
Chapter 8
Root Locus Techniques

in
your
simulation
the
following
values: (1) actual percent overshoot,
(2)corresponding
peak
time,
Tp,
(3)rise time, Tr,(4) settling time,
Ts, and (5) ﬁnal steady-state value.
67. It is well known that when a person ingests a signiﬁ-
cant amount of water, the blood volume increases,
causing an increase in arterial blood pressure until the
kidneys are able to excrete the excess volume and the
pressure returns to normal (Shahin, 2010). In order to
describe mathematically this process, water-loading
experiments are performed in various subjects while
their mean arterial pressure is monitored. It was
found that the open-loop transfer function of this
process is
Gs  bp1:759s3  2:318s2  2:173  10	4
3:362s3  11:34s2  7:803s  0:00293
where bp is an autonomous nervous activity parameter.
a. Make a sketch of the root locus of the system, indicat-
ing the breakaway points and the value of bp for
each point.
b. Indicate the range of bp for which the system is
overdamped.
c. Indicate the values of bp for which the system is
critically damped.
d. Indicate the range of bp for which the system is
underdamped.
e. Explain why the system will have a larger settling
time for larger values of bp
68. One of the treatments for Parkinson’s disease in some
patients is Deep Brain Stimulation (DBS) (Davidson,
2012). In DBS a set of electrodes is surgically implanted
and a vibrating current is applied to the subthalamic
nucleus, also known as a brain pacemaker. Root locus
has been used on a linearized model of the system to help
explain the dynamics of DBS. The DBS model can be
obtained by substituting Gs 
ks
s 	 b2 b > 0 in the
unity-feedback diagram of Figure P8.3.
a. Make a sketch of the resulting root locus as a function
of k and ﬁnd the break-in point and its corresponding
value of gain.
b. Find the range of k for closed-loop stability in
terms of b.
c. Find the frequency of oscillation when the system has
closed-loop poles on the jω axis.
69. A linear dynamic model of the α-subsystem of a grid-
connected voltage-source converter (VSC) using a Y-Y
transformerisshowninFigureP8.20(a)(Mahmood,2012).
Here, C  135 μF; R1  0:016 Ω; L1  0:14 mH; R2 
0:014 Ω; L2  10 μH; Rg  1:1 Ω; and Lg  0:5 mH.
a. Find the transfer function GPs  Vαs
Mαs.
b. If GP(s) is the plant in
Figure P8.20(b) and GC(s) = K,
use MATLAB to plot the root locus. On a
closeup of the locus (from 	300 to 0 on
the real axis and from 	50 to 5000 on
the imaginary axis), ﬁnd K and the
GC(s)
GP(s)
+
–
Mα(s)
C(s) = Vα(s)
R(s) = Vr(s)
(b)
(a)
1
3Cs(R1+ L1s)
+
–
+
+
–
–
17.33 (Rg + Lgs)
(R1+ L1s)
17.33 (Rg + Lgs)
17.33
1
L2s + R2
Mα(s)
Vα(s)
Vcα(s)
FIGURE P8.20
Problems
437

coordinates of the dominant poles,
which correspond to ζ = 0.012. Plot
the output response, c(t) = vα(t), at
that value of the gain when a step input,
r(t)= vr (t)= 208 u(t) volts, is applied
at t = 0. Mark on the time response
graph, c(t), all relevant character-
istics, such as the percent overshoot,
peak time, rise time, settling time,
and ﬁnal steady-state value.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
70. Control of HIV/AIDS. In the linearized model of
Chapter 6, Problem 68, where virus levels are controlled
by means of RTIs, the open-loop plant transfer function
was shown to be
Ps  Ys
U1s 
	520s 	 10:3844
s3  2:6817s2  0:11s  0:0126
The amount of RTIs delivered to the patient will
automatically be calculated by embedding the patient
in the control loop as G(s) shown in Figure P6.17
(Craig, 2004).
a. In the simplest case, Gs  K, with K > 0. Note that
this effectively creates a positive-feedback loop
because the negative sign in the numerator of P(s)
cancels out with the negative-feedback sign in the
summing junction. Use positive-feedback rules to
plot the root locus of the system.
b. Now assume Gs  	K with K > 0. The system is
now a negative-feedback system. Use negative-feed-
backrulestodrawtherootlocus.Showthatinthiscase
the system will be closed-loop stable for all K > 0.
71. Hybrid vehicle. In Chapter 7,
Figure P7.31 shows the block
diagram of the speed control of an HEV
rearranged as a unity feedback system
(Preitl, 2007).
Let the transfer function of the speed
controller be
GSCs  KPsc  KIsc
s

KPsc
s  KIsc
KPsc


s
a. Assume ﬁrst that the speed
controller is conﬁgured as
a proportional controller KISC  0 and

GSC s
   KPSC . Calculate the forward-
path open-loop poles. Now use MATLAB
to plot the system’s root locus and ﬁnd
the gain, KPSC that yields a critically
damped closed-loopresponse.Finally,
plot the time-domain response, c(t),
for a unit-step input using MATLAB.
Note on the curve the rise time, Tr,
and settling time, Ts.
b. Now add an integral gain, KISC,
to the controller, such that
KISC=KPSC  0:4. Use MATLAB to plot the
root locus and ﬁnd the proportional
gain, KPSC, that could lead to a closed-
loop
unit-step
response
with
10%
overshoot. Plot c(t) using MATLAB and
note on the curve the peak time, Tp, and
settling time, Ts. Does the response
obtained resembleasecond-orderunder-
damped response?
72. Parabolic
trough
collector.
Consider
the
ﬂuid
temperature control of a parabolic trough collector
(Camocho, 2012) embedded in the unity feedback
structure as shown in Figure P8.3, where the open-loop
plant transfer function is given by
Gs 
137:2  10	6K
s2  0:0224s  196  10	6 e	39s
Approximating the time-delay term with e	sT 
1 	 T
2 s
1  T
2 s
,
make a sketch of the resulting root locus (Note: After
substituting the approximation, G∞ < 0, the positive
feedback rules of Section 8.9 must be used). Mark
where appropriate in the plot and ﬁnd:
a. The asymptotes and their intersection with the real
axis;
b. The break-in and breakaway points. (The procedures
presented in Section 8.5 are also valid for positive
feedback systems);
c. The range of K for closed-loop stability;
d. The value of K that will make the system oscillate and
the oscillation frequency.
438
Chapter 8
Root Locus Techniques

Cyber Exploration Laboratory
Experiment 8.1
Objectives
To verify the effect of open-loop poles and zeros upon the shape of the root
locus. To verify the root locus as a tool for estimating the effect of open-loop gain upon the
transient response of closed-loop systems.
Minimum Required Software Packages
MATLAB and the Control System
Toolbox
Prelab
1. Sketch two possibilities for the root locus of a unity negative-feedback system with the
open-loop pole-zero conﬁguration shown in Figure P8.21.
2. If the open-loop system of Prelab 1 is Gs 
Ks  1:5
ss  0:5s  10, estimate the percent
overshoot at the following values of gain, K: 20, 50, 85, 200, and 700.
Lab
1. Using Matlab’s SISO Design Tool, set up a negative unity feedback system with
Gs 
Ks  6
ss  0:5s  10
to produce a root locus. For convenience, set up the zero at 	6 using SISO Design
Tool’s compensator function by simply dragging a zero to 	6 on the resulting root
locus. Print the root locus for the zero at 	6. Move the zero to the following
locations and print out a root locus at each location: 	2, 	1:5, 	1:37, and 	1:2.
2. Using Matlab’s SISO Design Tool, set up a negative unity feedback system with
Gs 
Ks  1:5
ss  0:5s  10
to produce a root locus. Open the LTI Viewer for SISO Design Tool to show step
responses. Using the values of K speciﬁed in Prelab 2, record the percent overshoot
and settling time and print the root loci and step response for each value of K.
Postlab
1. Discuss your ﬁndings from Prelab 1 and Lab 1. What conclusions can you draw?
2. Make a table comparing percent overshoot and settling time from your calculations in
Prelab 2 and your experimental values found in Lab 2. Discuss the reasons for any
discrepancies. What conclusions can you draw?
jω
σ
FIGURE P8.21
Cyber Exploration Laboratory
439

Experiment 8.2
Objective
To use MATLAB to design the gain of a controller via root locus.
Minimum Required Software Package
MATLAB with the Control Systems
Toolbox.
Prelab
The open-loop system dynamics model for the NASA eight-axis Advanced
Research Manipulator II (ARM II) electromechanical shoulder joint/link, actuated by an
armature-controlled dc servomotor is shown in Figure P8.22.
The ARM II shoulder joint constant parameters are Ka= 12, L= 0.006 H, R= 1.4 Ω,
Kb= 0.00867, n= 200, Km= 4.375, J= Jm+ JL/n2, D = Dm + DL/n2, JL= 1, DL= 0.5, Jm =
0.00844, and Dm= 0.00013 (Craig, 2005), (Nyzen, 1999), and (Williams, 1994).
a. Obtain the equivalent open-loop transfer function, Gs  θLs
Vref s.
b. The loop is to be closed by cascading a controller, Gcs  KDs  KP, with G(s) in
the forward path forming an equivalent forward-transfer function, Ges  GcsGs.
Parameters of Gc(s) will be used to design a desired transient performance. The input to
the closed-loop system is a voltage, VI s, representing the desired angular displacement
of the robotic joint with a ratio of 1 volt equals 1 radian. The output of the closed-loop
system is the actual angular displacement of the joint, θLs. An encoder in the feedback
path, Ke, converts the actual joint displacement to a voltage with a ratio of 1 radian equals
1 volt. Draw the closed-loop system showing all transfer functions.
c. Find the closed-loop transfer function.
Lab
Let KP
KD
 4 and use MATLAB to design the value of KD to yield a step response
with a maximum percent overshoot of 0.2%.
Postlab
1. Discuss the success of your design.
2. Is the steady-state error what you would expect? Give reasons for your answer.
Experiment 8.3
Objective
To use LabVIEW to design the gain of a controller via root locus.
Minimum Required Software Package
LabVIEW with the Control Design and
Simulation Module, and the MathScript RT Module.
Prelab
Complete the Prelab to Experiment 8.2 if you have not already done so.
Lab
Let KP
KD
 4. Use LabVIEW to open and customize the Interactive Root Locus
VI from the Examples in order to implement a design of KD to yield a step response
Ka
(Ls + R)(Js + D)
Km
1/n
s
Kb
Vref
Amp 
+
_
Armature circuit 
&
motor dynamics 
Back emf 
Gears & 
integrator 
θL
FIGURE P8.22
Open-loop model for ARM ll
440
Chapter 8
Root Locus Techniques

with a maximum percent overshoot of 0.2%. Use a hybrid graphical/MathScript
approach.
Postlab
1. Discuss the success of your design.
2. Is the steady-state error what you would expect? Give reasons for your answer.
Hardware Interface Laboratory
Experiment 8.4
Speed Control Using Gain Adjustment
Objective
To control the speed of a motor in closed-loop using gain compensation. To
make observations about tradeoffs between the compensated transient response and the
steady-state error.
Material Required
Computer with LabVIEW Installed; myDAQ; dc brushed
gearmotor with Hall Sensor quadrature encoder (	10 V to +10 V normal operation range);
and motor control chip BA6886N or a transistor circuit substitute
Files Provided at www.wiley.com/college/nise
Speed P Control Incomplete.vi
Signal Conditioning (subVI).vi
Prelab
Answer the following questions:
1. Find the closed-loop transfer function from R(s) to C(s) for the system in Figure P8.23.
2. Draw the root locus for the system.
3. Draw the unit-step response for the system marking the settling time, peak time, and
maximum output.
4. Find an expression for the steady-state error to a unit-step input for the system.
Lab
Software:
The Speed P Control Incomplete.vi is provided and illustrated in Figure
P8.24. You need to modify it as follows before it becomes operational.
1. You need to change the constant on the left to ﬁt your motor’s gear ratio and encoder
CPR (counts per revolution) as shown in Figure P8.24(b).
2. You need to write a SubVI for a P controller and place it where the arrow indicates
it in Figure P8.24(b). The function of a P controller is u  KPe. Your SubVI has
two inputs, the system’s error e and the proportional constant KP. It will have one
output u.
KP
K
sτ + 1
+
–
C(s)
R(s)
FIGURE P8.23
Hardware Interface Laboratory
441

3. Double-clicking on the Signal Conditioning (SubVI), Figure P8.24(b), you get
Figure P8.25. Modify the indicated constant to reﬂect the dead zone parameter of
your motor. This SubVI limits the input voltage to the motor controller and
eliminates the dead zone by offsetting the input to the motor controller.
FIGURE P8.24
Speed P Control Incomplete.vi: a. Front Panel; b. Block Diagram
FIGURE P8.25
Signal Conditioning (SubVI).vi Block Diagram
442
Chapter 8
Root Locus Techniques

Hardware:
Figure P8.26 is the hardware diagram for speed control. The diagram is
identical to the one in Experiment 4.6, except that Pins 2 and 10 in the motor controller chip
connect to digital lines D2 and D3 in the myDAQ to allow changes in motor direction.
Procedure:
1. Verify the operation of your closed-loop system.
2. Draw a functional block diagram (similar to the ones shown in control systems
textbooks) of the system. Do not include the signal conditioning functions, nor the
change-of-direction signals.
3. Using the transfer function you found in Experiment 4.6, draw the system’s root locus.
4. Find the theoretical range of KP in which the system is closed-loop stable.
5. Run your program and system to ﬁnd experimentally the range of KP in which the system
is closed-loop stable.
6. Make a judicious choice of three different values of KP for experimentation.
7. Using the transfer function you found previously and the three judicious choices of
proportional gain, complete the following table using hand calculations only (calculators
OK, no computer simulations allowed). Show all your work.
5V
DGND
7
6
5
4
3
2
1
0
1–
1+
0–
0+
1
0
–15V
+15V
AO
AGND
AUDIO
OUT
AUDIO
IN
AGND
AI
±10V
DIO
0–5V
MyDAQ
1 2 3 4 5 6 7 8 9 10
10Ω
9V
Motor
BA6886N
white
FIGURE P8.26
Wiring diagram9
9 MyDAQ right slot shown on left is taken from Multisim program module NI myDAQ design and also reproduced
in White-Paper 11423, Figure 2. Both Multisim and the White Paper are from National Instruments.
Hardware Interface Laboratory
443

KP
TP—Peak time
%OS—Percent overshoot
Ts—Settling time
ess—Steady state error (step input)
Theoretical
8. For each one of the three values of KP, perform step-input experiments; use one single
value of step-input amplitude for the three values. Make sure that your oscilloscope
captures contain the system’s transient response in its entirety. Show measurements of all
the parameters in the table above and ﬁll in the following table. Please note that Ts, the
settling time, is hard to measure in the current setting because of the limited number
of analog channels present. Instead of measuring Ts, mark in your oscilloscope its
theoretical value using the scope cursors.
KP
TP—Peak time
%OS—Percent overshoot
ess—Steady-state error (step input)
Experimental
Postlab
Make a detailed comparison of your theoretical and experimental results.
Discuss similarities and discrepancies between experimental and theoretical values and give
possible reasons.
Experiment 8.5
Position Control Using Gain Adjustment
Objectives
To control the angular position of the shaft of a permanent-magnet dc motor
in closed-loop using gain compensation. To make observations about tradeoffs between the
compensated transient response and the steady-state error.
Material Required
Computer with LabVIEW Installed; myDAQ; dc brushed
gearmotor with Hall Sensor quadrature encoder (	10 V to +10 V normal operation range);
and motor control chip BA6886N or a transistor circuit substitute.
Files Provided at www.wiley.com/college/nise
Position control.vi
Signal Conditioning (SubVI).vi
P Controller (SubVI).vi
Prelab
Answer the following questions:
1. For a given permanent-magnet dc motor it has been found that the transfer function from
armature voltage Eas to angular velocity Ωs is Ωs
Eas 
K
τs  1. Find the transfer
function of the motor from armature voltage to angular position Θs
Eas.
2. Draw the root locus for the system in Figure P8.27.
444
Chapter 8
Root Locus Techniques

3. Draw the unit-step response for the system marking the settling time, peak time, and
maximum output. Find all the possibilities: overdamped, critically damped, and
underdamped.
4. Find an expression for the steady-state error to a unit-step input for the system.
Lab
Software:
The front panel and block diagram of the Position control.vi are shown in
Figure P8.28. Change the constants inside the Signal Conditioning SubVI to match your
KP
K
s (sτ + 1)
+
–
C(s)
R(s)
FIGURE P8.27
FIGURE P8.28
Position control.vi: a. Front Panel; b. Block Diagram
Hardware Interface Laboratory
445

dead zone parameters. The constant on the right of the diagram must be modiﬁed to match
your motor’s gear ratio.
Hardware:
Make the following changes to the wiring diagram shown in Figure P8.26:
Move the connections from D1, D2, and D3 to D2, D3, and D4, respectively. All the other
connections remain the same.
Procedure:
1. Choose a small P gain. Verify the operation of your closed-loop system. The motor
should be able to move in both directions and through the full-scale range.
2. Using the transfer function found in Experiment 4.6, calculate the motor’s transfer
function from armature voltage to angular position Θs
Eas.
3. Draw a functional block diagram of the system. Do not include the signal conditioning
functions, nor the change-of-direction signals. Label all the pertinent signals.
4. Using the transfer function Θs
Eas you just calculated, draw the system’s root locus.
5. Find the theoretical range of KP for which the system is closed-loop stable.
6. Run your program and system to ﬁnd experimentally the range of KP for which the
system is closed-loop stable.
7. Make a judicious choice of three different values of KP for experimentation.
8. Using the transfer function you calculated above and the three judicious choices of
proportional gain, complete the following table using hand calculations only (calculators
OK, no computer simulations allowed). Show all your work.
KP
TP—Peak time
%OS—Percent overshoot
Ts—Settling time
ess—Steady-state error (step input)
Theoretical
9. For each one of the three values of KP, perform step-input experiments using one value
of step input for the three values. Make sure that your oscilloscope captures contain the
system’s transient response in its entirety. Show measurements of all the parameters in
the table above and ﬁll in the following table. Please note that Ts, the settling time, is hard
to measure in the current setting because of the limited number of analog channels
available. Instead of measuring Ts, mark in your oscilloscope its theoretical value using
the scope cursors.
KP
TP—Peak time
%OS—Percent overshoot
ess—Steady-state error (step input)
Experimental
446
Chapter 8
Root Locus Techniques

Bibliography
Anderson, C. G., Richon, J.-B., and Campbell, T. J. An Aerodynamic Moment-Controlled Surface for
Gust Load Alleviation on Wind Turbine Rotors. IEEE Transactions on Control System Technology,
vol. 6, no. 5, September 1998, pp. 577–595.
Åström, K., Klein, R. E., and Lennartsson, A. Bicycle Dynamics and Control. IEEE Control Systems,
August 2005, pp. 26–47.
Baker, M. W., and Sarpeshkar, R. Feedback Analysis and Design of RF Power Links for Low-Power
Bionic Systems. IEEE Transactions on Biomedical, Circuits and Systems. vol. 1, 2007, pp. 28–38.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
Craig, J. J. Introduction to Robotics: Mechanics and Control, 3d ed. Prentice Hall, Upper Saddle
River, NJ, 2005.
Davidson, C. M., de Paor, A. M., and Lowery, M. M. Insights from Control Theory into Deep Brain
Stimulation for Relief from Parkinson’s Disease. IEEE, Proc. of the 9th Int. Conf. Elektro, 2012,
pp. 2–7.
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA., 1989.
Evans, W. R. Control System Synthesis by Root Locus Method. AIEE Transactions, vol. 69, 1950,
pp. 66–69.
Evans, W. R. Graphical Analysis of Control Systems. AIEE Transactions, vol. 67, 1948, pp. 547–551.
Franklin, G. F., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems, 2d ed.
Addison-Wesley, Reading, MA., 1991.
Galvão, K. H. R., Yoneyama, T., and de Araújo, F. M. U. A Simple Technique for Identifying a
Linearized Model for a Didactic Magnetic Levitation System. IEEE Transactions on Education,
vol. 46, no. 1, February 2003, pp. 22–25.
Guy, W., The Human Pupil Servomechanism. Computers in Education Division of ASEE, Application
Note No. 45, 1976.
Hahn, J. O., Dumont, G. A., and Ansermino, J. M. System Identiﬁcation and Closed-Loop Control of
End-Tidal CO2 in Mechanically Ventilated Patients. IEEE Transactions on Information Technology
in Biomedicine, vol. 16, no. 6, November 2012, pp. 1176–2012.
Hollot, C. V., Misra, V., Towsley, D., and Gong, W. A Control Theoretic Analysis of RED.
Proceedings of IEEE INFOCOM, 2001, pp. 1510–1519.
Johnson, H., et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980.
Karlsson, P., and Svesson, J. DC Bus Voltage Control for a Distributed Power System. IEEE Trans. on
Power Electronics, vol. 18, no. 6, 2003, pp. 1405–1412.
Khammash, M., and El-Samad, H. Systems Biology: From Physiology to Gene Regulation. IEEE
Control Systems, August 2004, pp. 62–76.
Kuo, B. C. Automatic Control Systems, 6th ed. Prentice Hall, Upper Saddle River, NJ, 1991.
Lam, C. S., Wong, M. C., and Han, Y. D. Stability Study on Dynamic Voltage Restorer (DVR). Power
Electronics Systems and Applications 2004; Proceedings of the First International Conference on
Power Electronics, 2004, pp. 66–71.
Low, K. H., Wang, H., Liew, K. M., and Cai, Y. Modeling and Motion Control of Robotic Hand for
Telemanipulation Application. International Journal of Software Engineering and Knowledge
Engineering, vol. 15, 2005, pp. 147–152.
Postlab
Make a detailed comparison of your theoretical and experimental tables.
Discuss similarities and discrepancies between experimental and theoretical results and
give possible reasons.
Bibliography
447

Mahmood, H., and Jiang, J. Modeling and Control System Design of a Grid Connected VSC
Considering the Effect of the Interface Transformer Type. IEEE Transactions on Smart Grid, vol. 3,
no. 1, March 2012, pp. 122–134.
Nyawako, D., and Reynolds, P. Response-Dependent Velocity Feedback Control for Mitigation of
Human-Induced Floor Vibrations. Smart Materials and Structures, vol. 18, IOP Publishing Ltd.,
UK, 2009, pp. 1–13.
Nyzen, R. J. Analysis and Control of an Eight-Degree-of-Freedom Manipulator. Ohio University
Masters Thesis, Mechanical Engineering, Dr. Robert L. Williams II, advisor, August 1999.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Intelligence and Informatics,
IEEE, 2007, pp. 157–162.
Saeys, W., Deblander, J., Ramon, H., and Anthonis, J. High-Performance Flow Control for
Site-Speciﬁc Application of Liquid Manure. Biosystems Engineering, vol. 99, 2008, pp. 22–34.
Shahin, M., and Maka, S. A Transfer Function Method for the Assessment of Nervous System
Modulation of Long-Term Dynamics of Blood Pressure. IEEE International Conf. on Communi-
cation, Control, and Computing, IEEE 2010, pp. 560–564.
Spong, M., Hutchinson, S., and Vidyasagar, M. Robot Modeling and Control. John Wiley & Sons,
Hoboken, NJ, 2006.
Stapleton, C.A. Root-Locus Study of Synchronous-Machine Regulation. IEE Proceedings, vol. 111,
issue 4, 1964, pp. 761–768.
Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-Based State Space Control, and Model-
Based Predictive Control for Drive Systems With Elastically Coupled Loads—A Comparative
Study. IEEE Transactions on Industrial Electronics, vol. 58, no. 8, August 2011, pp. 3647–3657.
Ünyelioğlu, K. A., Hatopoğlu, C., and Özgüner, Ü. Design and Stability Analysis of a Lane Following
Controller. IEEE Transactions on Control Systems Technology, vol. 5, 1997, pp. 127–134.
Williams, R. L. II. Local Performance Optimization for a Class of Redundant Eight-Degree-of-
Freedom Manipulators. NASA Technical Paper 3417, NASA Langley Research Center, Hampton
VA, March 1994.
Yamazaki, H., Marumo, Y., Iizuka, Y., and Tsunashima, H. Driver Model Simulation for Railway
Brake Systems. Fourth IET Int. Conf. on Railway Condition Monitoring, 2008.
Yan, T., and Lin, R. Experimental Modeling and Compensation of Pivot Nonlinearity in Hard Disk
Drives. IEEE Transactions on Magnetics, vol. 39, 2003, pp. 1064–1069.
448
Chapter 8
Root Locus Techniques

Design via Root Locus
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Use the root locus to design cascade compensators to improve the steady-state
error (Sections 9.1–9.2)
• Use the root locus to design cascade compensators to improve the transient
response (Section 9.3)
• Use the root locus to design cascade compensators to improve both the
steady-state error and the transient response (Section 9.4)
• Use the root locus to design feedback compensators to improve the transient
response (Section 9.5)
• Realize the designed compensators physically (Section 9.6)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to design a cascade compensator to meet transient
response and steady-state error speciﬁcations.
• Given the pitch or heading control system for the UFSS vehicle shown on the
back endpapers, you will be able to design a cascade or feedback compensator
to meet transient response speciﬁcations.

9
449

9.1 Introduction
In Chapter 8, we saw that the root locus graphically displayed both transient response and
stability information. The locus can be sketched quickly to get a general idea of the changes
in transient response generated by changes in gain. Speciﬁc points on the locus also can be
found accurately to give quantitative design information.
The root locus typically allows us to choose the proper loop gain to meet a transient
response speciﬁcation. As the gain is varied, we move through different regions of
response. Setting the gain at a particular value yields the transient response dictated by
the poles at that point on the root locus. Thus, we are limited to those responses that exist
along the root locus.
Improving Transient Response
Flexibility in the design of a desired transient response can be increased if we can design for
transient responses that are not on the root locus. Figure 9.1(a) illustrates the concept.
Assume that the desired transient response, deﬁned by percent overshoot and settling time,
is represented by point B. Unfortunately, on the current root locus at the speciﬁed percent
overshoot, we only can obtain the settling time represented by point A after a simple gain
adjustment. Thus, our goal is to speed up the response at A to that of B, without affecting the
percent overshoot. This increase in speed cannot be accomplished by a simple gain
adjustment, since point B does not lie on the root locus. Figure 9.1(b) illustrates the
improvement in the transient response we seek: The faster response has the same percent
overshoot as the slower response.
One way to solve our problem is to replace the existing system with a system whose
root locus intersects the desired design point, B. Unfortunately, this replacement is expensive
and counterproductive. Most systems are chosen for characteristics other than transient
s-plane
A
B
(a)
(b)
jω
σ
c(t)
t
Poles at B
Poles at A
 = Closed-loop pole
 = Open-loop pole
FIGURE 9.1
a. Sample root
locus, showing possible design
point via gain adjustment
(A) and desired design point that
cannot be met via simple gain
adjustment (B); b. responses
from poles at A and B
450
Chapter 9
Design via Root Locus

response. For example, an elevator cage and motor are chosen for speed and power.
Components chosen for their transient response may not necessarily meet, for example,
power requirements.
Rather than change the existing system, we augment, or compensate, the system with
additional poles and zeros, so that the compensated system has a root locus that goes
through the desired pole location for some value of gain. One of the advantages of
compensating a system in this way is that additional poles and zeros can be added at
the low-power end of the system before the plant. Addition of compensating poles and zeros
need not interfere with the power output requirements of the system or present additional
load or design problems. The compensating poles and zeros can be generated with a passive
or an active network.
A possible disadvantage of compensating a system with additional open-loop poles
and zeros is that the system order can increase, with a subsequent effect on the desired
response. In Chapters 4 and 8, we discussed the effect of additional closed-loop poles
and zeros on the transient response. At the beginning of the design process discussed in
this chapter, we determine the proper location of additional open-loop poles and zeros to
yield the desired second-order closed-loop poles. However, we do not know the location of
the higher-order closed-loop poles until the end of the design. Thus, we should evaluate
the transient response through simulation after the design is complete to be sure the
requirements have been met.
In Chapter 12, when we discuss state-space design, the disadvantage of ﬁnding the
location of higher-order closed-loop poles after the design will be eliminated. Techniques
that allow the designer to specify and design the location of all the closed-loop poles at the
beginning of the design process.
One method of compensating for transient response, that will be discussed later, is
to insert a differentiator in the forward path in parallel with the gain. We can visualize the
operation of the differentiator with the following example. Assuming a position control
with a step input, we note that the error undergoes an initial large change. Differentiating
this rapid change yields a large signal that drives the plant. The output from the
differentiator is much larger than the output from the pure gain. This large, initial input
to the plant produces a faster response. As the error approaches its ﬁnal value, its
derivative approaches zero, and the output from the differentiator becomes negligible
compared to the output from the gain.
Improving Steady-State Error
Compensators are not only used to improve the transient response of a system; they are also
used independently to improve the steady-state error characteristics. Previously, when the
system gain was adjusted to meet the transient response speciﬁcation, steady-state error
performance deteriorated, since both the transient response and the static error constant were
related to the gain. The higher the gain, the smaller the steady-state error, but the larger
the percent overshoot. On the other hand, reducing gain to reduce overshoot increased the
steady-state error. If we use dynamic compensators, compensating networks can be designed
that willallow us tomeet transient and steady-state error speciﬁcations simultaneously.1 We no
longer need to compromise between transient response and steady-state error, as long as the
system operates in its linear range.
In Chapter 7, we learned that steady-state error can be improved by adding an open-loop
pole at the origin in the forward path, thus increasing the system type and driving the
associated steady-state error to zero. This additional pole at the origin requires an integrator
for its realization.
1 The word dynamic describes compensators with noninstantaneous transient response. The transfer functions of
such compensators are functions of the Laplace variable, s, rather than pure gain.
9.1 Introduction
451

In summary, then, transient response is improved with the addition of
differentiation, and steady-state error is improved with the addition of integration in
the forward path.
Conﬁgurations
Two conﬁgurations of compensation are covered in this chapter: cascade compensation
and feedback compensation. These methods are modeled in Figure 9.2. With
cascade compensation, the compensating network, G1(s), is placed at the low-power
end of the forward path in cascade with the plant. If feedback compensation is used, the
compensator, H1(s), is placed in the feedback path. Both methods change the open-loop
poles and zeros, thereby creating a new root locus that goes through the desired closed-loop
pole location.
Compensators
Compensators that use pure integration for improving steady-state error or pure differentia-
tion for improving transient response are deﬁned as ideal compensators. Ideal compensators
must be implemented with active networks, which, in the case of electric networks, require
the use of active ampliﬁers and possible additional power sources. An advantage of ideal
integral compensators is that steady-state error is reduced to zero. Electromechanical ideal
compensators, such as tachometers, are often used to improve transient response, since they
can be conveniently interfaced with the plant.
Other design techniques that preclude the use of active devices for compensation
can be adopted. These compensators, which can be implemented with passive elements
such as resistors and capacitors, do not use pure integration and differentiation and are
not ideal compensators. Advantages of passive networks are that they are less expensive
and do not require additional power sources for their operation. Their disadvantage is
that the steady-state error is not driven to zero in cases where ideal compensators yield
zero error.
Thus, the choice between an active or a passive compensator revolves around cost,
weight, desired performance, transfer function, and the interface between the compensator
and other hardware. In Sections 9.2, 9.3, and 9.4, we ﬁrst discuss cascade compensator
R(s)
C(s)
G1(s)
Cascade
compensator
Plant
(a)
(b)
R(s)
C(s)
G1(s)
Original
controller
Plant
Original
controller
G2(s)
G3(s)
G2(s)
H1(s)
+
–
+
–
Feedback
compensator
FIGURE 9.2
Compensation
techniques: a. cascade;
b. feedback
452
Chapter 9
Design via Root Locus

design using ideal compensation and follow with cascade compensation using compensators
that are not implemented with pure integration and differentiation.
9.2 Improving Steady-State Error
via Cascade Compensation
In this section, we discuss two ways to improve the steady-state error of a feedback
control system using cascade compensation. One objective of this design is to improve
the steady-state error without appreciably affecting the transient response.
The ﬁrst technique is ideal integral compensation, which uses a pure integrator
to place an open-loop, forward-path pole at the origin, thus increasing the system
type and reducing the error to zero. The second technique does not use pure integration.
This compensation technique places the pole near the origin, and although it does
not drive the steady-state error to zero, it does yield a measurable reduction in steady-
state error.
While the ﬁrst technique reduces the steady-state error to zero, the compensator
must be implemented with active networks, such as ampliﬁers. The second technique,
although it does not reduce the error to zero, does have the advantage that it can
be implemented with a less expensive passive network that does not require additional
power sources.
The names associated with the compensators come either from the method of
implementing the compensator or from the compensator’s characteristics. Systems that
feed the error forward to the plant are called proportional control systems. Systems that feed
the integral of the error to the plant are called integral control systems. Finally, systems that
feed the derivative of the error to the plant are called derivative control systems. Thus, in this
section we call the ideal integral compensator a proportional-plus-integral (PI) controller,
since the implementation, as we will see, consists of feeding the error (proportional) plus
the integral of the error forward to the plant. The second technique uses what we call a
lag compensator. The name of this compensator comes from its frequency response
characteristics, which will be discussed in Chapter 11. Thus, we use the name PI controller
interchangeably with ideal integral compensator, and we use the name lag compensator
when the cascade compensator does not employ pure integration.
Ideal Integral Compensation (PI)
Steady-state error can be improved by placing an open-loop pole at the origin, because this
increases the system type by one. For example, a Type 0 system responding to a step input
with a ﬁnite error responds with zero error if the system type is increased by one. Active
circuits can be used to place poles at the origin. Later in this chapter, we show how to build
an integrator with active electronic circuits.
To see how to improve the steady-state error without affecting the transient response,
look at Figure 9.3(a). Here we have a system operating with a desirable transient response
generated by the closed-loop poles at A. If we add a pole at the origin to increase the system
type, the angular contribution of the open-loop poles at point A is no longer 180°, and the
root locus no longer goes through point A, as shown in Figure 9.3(b).
To solve the problem, we also add a zero close to the pole at the origin, as shown in
Figure 9.3(c). Now the angular contribution of the compensator zero and compensator pole
cancelout,point Ais still on theroot locus, andthesystem typehasbeen increased.Furthermore,
the required gain at the dominant pole is about the same as before compensation, since the ratio
of lengths from the compensator pole and the compensator zero is approximately unity. Thus,
we have improved the steady-state error without appreciably affecting the transient response.
9.2 Improving Steady-State Error via Cascade Compensation
453

A compensator with a pole at the origin and a zero close to the pole is called an ideal integral
compensator.
In the example that follows, we demonstrate the effect of ideal integral compensation.
An open-loop pole will be placed at the origin to increase the system type and drive the
steady-state error to zero. An open-loop zero will be placed very close to the open-loop pole
at the origin so that the original closed-loop poles on the original root locus still remain at
approximately the same points on the compensated root locus.
s-plane
jω
σ
θ1
=  (2k + 1)180°
(a)
A
– θ2 – θ
θ1
θ3
3 
–
2
θ
R(s) +
–
C(s)
G(s)
Plant
Gain
K
s-plane
jω
σ
θ1
(b)
A
θ2
θ3
θc
θ
θ
R(s) +
–
C(s)
G(s)
Plant
K
Compensator
θc
2
1
(2k + 1)180°
–
–
–
–
θ3
s
(c)
R(s) +
–
C(s)
Plant
Compensator
K(s + a)
G(s)
θzc
θpc
s-plane
jω
A
θ1
θ3
+ θ zc
θ 1 – θ 2 – θ 3 – θ pc
(2k + 1)180°
σ
–
θ2
s
FIGURE 9.3
Pole at A is a. on the root locus without compensator; b. not on the root locus with
compensator pole added; c. approximately on the root locus with compensator pole and zero added
454
Chapter 9
Design via Root Locus

Example 9.1
Effect of an Ideal Integral Compensator
Effect of an Ideal Integral Compensator
PROBLEM: Given the system of Figure 9.4(a), operating with a damping ratio of 0.174,
show that the addition of the ideal integral compensator shown in Figure 9.4(b) reduces
the steady-state error to zero for a step input without appreciably affecting transient
response. The compensating network is chosen with a pole at the origin to increase the
system type and a zero at 0:1, close to the compensator pole, so that the angular
contribution of the compensator evaluated at the original, dominant, second-order poles
is approximately zero. Thus, the original, dominant, second-order closed-loop poles are
still approximately on the new root locus.
SOLUTION: We ﬁrst analyze the uncompensated system and determine the location ofthe
dominant, second-order poles. Next we evaluate the uncompensated steady-state error for a
unit step input. The root locus for the uncompensated system is shown in Figure 9.5.
s-plane
jω
σ
= 0.174
K = 164.6
–0.694 + j3.926
100.02°
–2
–1
0
    =  Closed-loop pole
    =  Open-loop pole
4
6
–8
–10
–11.61
j2
j4
–j2
–j4
ζ
–
–
FIGURE 9.5
Root locus for uncompensated system of Figure 9.4(a)
(a)
(b)
R(s)
E(s)
C(s)
Plant
–
s
Compensator
K(s+0.1)
+
1
R(s)
E(s)
C(s)
Plant
–
Gain
(s+1)(s+2)(s+10)
+
K
1
(s+1)(s+2)(s+10)
FIGURE 9.4
Closed-loop system for Example 9.1: a. before compensation; b. after ideal integral
compensation
9.2 Improving Steady-State Error via Cascade Compensation
455

A damping ratio of 0.174 is represented by a radial line drawn on the s-plane at
100:02°. Searching along this line with the root locus program discussed in Appendix H at
www.wiley.com/college/nise, we ﬁnd that the dominant poles are 0:694  j3:926 for a
gain, K, of 164.6. Now look for the third pole on the root locus beyond 10 on the real
axis. Using the root locus program and searching for the same gain as that of the dominant
pair, K  164:6, we ﬁnd that the third pole is approximately at 11:61. This gain yields
Kp  8:23. Hence, the steady-state error is
e∞ 
1
1  Kp

1
1  8:23  0:108
9.1
Adding an ideal integral compensator with a zero at 0:1, as shown in Figure 9.4(b),
we obtain the root locus shown in Figure 9.6. The dominant second-order poles, the third
pole beyond 10, and the gain are approximately the same as for the uncompensated
system. Another section of the compensated root locus is between the origin and 0:1.
Searching this region for the same gain at the dominant pair, K  158:2, the fourth
closed-loop pole is found at 0:0902, close enough to the zero to cause pole-zero
cancellation. Thus, the compensated system’s closed-loop poles and gain are approximately
the same as the uncompensated system’s closed-looppoles and gain, which indicates that the
transient response of the compensated system is about the same as the uncompensated
system. However, the compensated system, with its pole at the origin, is a Type 1 system;
unlike the uncompensated system, it will respond to a step input with zero error.
Figure 9.7 compares the uncompensated response with the ideal integral compensated
response. The step response of the ideal integral compensated system approaches unity in
the steady state, while the uncompensated system approaches 0.892. Thus, the ideal
integral compensated system responds with zero steady-state error. The transient
response of both the uncompensated and the ideal integral compensated systems is
the same up to approximately 3 seconds. After that time, the integrator in the compensator,
s-plane
jω
σ
= 0.174
K = 158.2
–0.678 + j3.837
100.02°
–11.55
–10
–2
–1
–0.1
0
Fourth closed-loop
pole at – 0.0902
    = Closed-loop pole
    = Open-loop pole
4
6
–8
–j2
j2
j4
–j4
ζ
–
–
FIGURE 9.6
Root locus for compensated system of Figure 9.4(b)
456
Chapter 9
Design via Root Locus

A method of implementing an ideal integral compensator is shown in Figure 9.8. The
compensating network precedes G(s) and is an ideal integral compensator since
Gcs  K1  K2
s 
K1 s  K2
K1


s
9.2
The value of the zero can be adjusted by varying K2=K1. In this implementation, the error
and the integral of the error are fed forward to the plant, G(s). Since Figure 9.8 has both
proportional and integral control, the ideal integral controller, or compensator, is given the
alternate name PI controller. Later in the chapter we will see how to implement each block,
K1 and K2=s.
Lag Compensation
Ideal integral compensation, with its pole on the origin, requires an active integrator. If we
use passive networks, the pole and zero are moved to the left, close to the origin, as shown in
Figure 9.9(c). One may guess that this placement of the pole, although it does not increase
the system type, does yield an improvement in the static error constant over an
uncompensated system. Without loss of generality, we demonstrate that this improvement
is indeed realized for a Type 1 system.
shown in Figure 9.4(b), slowly compensates for the error until zero error is ﬁnally reached.
The simulation shows that it takes 18 seconds for the compensated system to reach to within
 2% of the ﬁnal value of unity, while the uncompensated system takes about 6 seconds to
settle to within  2% of its ﬁnal value of 0.892. The compensation at ﬁrst may appear to
yield deterioration in the settling time. However, notice that the compensated system
reaches the uncompensated system’s ﬁnal value in about the same time. The remaining time
is used to improve the steady-state error over that of the uncompensated system.
2.0
1.8
1.6
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0
0
5
10
15
20
c(t)
Ideal integral
compensated
Uncompensated
Time (seconds)
FIGURE 9.7
Ideal integral
compensated system response
and the uncompensated system
response of Example 9.1
R(s)
C(s)
K1
+
+
K2
s
G(s)
+
–
Integral (I)
Proportional (P)
Plant
FIGURE 9.8
PI controller
9.2 Improving Steady-State Error via Cascade Compensation
457

Assume the uncompensated system shown in Figure 9.9(a). The static error constant,
KvO, for the system is
KvO  K z1 z2 ∙∙∙
p1p2 ∙∙∙
9.3
Assuming the lag compensator shown in Figure 9.9(b) and (c), the new static error
constant is
KvN  K z1 z2 ∙∙∙zc
p1p2 ∙∙∙pc
9.4
What is the effect on the transient response? Figure 9.10 shows the effect on the root
locus of adding the lag compensator. The uncompensated system’s root locus is shown in
Figure 9.10(a), where point P is assumed to be the dominant pole. If the lag compensator
pole and zero are close together, the angular contribution of the compensator to point P
is approximately zero degrees. Thus, in Figure 9.10(b), where the compensator has
been added, point P is still at approximately the same location on the compensated
root locus.
What is the effect on the required gain, K? After inserting the compensator, we ﬁnd
that K is virtually the same for the uncompensated and compensated systems, since the
lengths of the vectors drawn from the lag compensator are approximately equal and all other
vectors have not changed appreciably.
Now, what improvement can we expect in the steady-state error? Since we established
that the gain, K, is about the same for the uncompensated and compensated systems, we can
substitute Eq. (9.3) into (9.4) and obtain
KvN  KvO
zc
pc
> KvO
9.5
(a)
(b)
(c)
(s + z1)(s + z2)
s(s + p1)(s + p2)
R(s)
E(s)
C(s)
Plant
–
K(s + zc)
(s + pc)
(s + zc)
Gc(s) = 
s-plane
jω
σ
–pc
–zc
(s + pc)
Compensator
+
(s + z1)(s + z2)
s(s + p1)(s + p2)
R(s)
E(s)
C(s)
Plant
–
Gain
+
K
FIGURE 9.9
a. Type 1 uncompensated system; b. Type 1 compensated system; c. compensator
pole-zero plot
458
Chapter 9
Design via Root Locus

Equation (9.5) shows that the improvement in the compensated system’s Kv over the
uncompensated system’s Kv is equal to the ratio of the magnitude of the compensator zero to
the compensator pole. In order to keep the transient response unchanged, we know the
compensator pole and zero must be close to each other. The only way the ratio of zc to pc
can be large in order to yield an appreciable improvement in steady-state error and,
simultaneously, have the compensator’s pole and zero close to each other to minimize the
angular contribution, is to place the compensator’s pole-zero pair close to the origin. For
example, the ratio of zc to pc can be equal to 10 if the pole is at 0:001 and the zero is
at 0:01. Thus, the ratio is 10, yet the pole and zero are very close, and the angular
contribution of the compensator is small.
In conclusion, although the ideal compensator drives the steady-state error to
zero, a lag compensator with a pole that is not at the origin will improve the static error
constant by a factor equal to zc=pc. There also will be a minimal effect upon the transient
response if the pole-zero pair of the compensator is placed close to the origin. Later in
the chapter we show circuit conﬁgurations for the lag compensator. These circuit
conﬁgurations can be obtained with passive networks and thus do not require the active
ampliﬁers and possible additional power supplies that are required by the ideal integral
(PI) compensator. In the following example we design a lag compensator to yield a
speciﬁed improvement in steady-state error.
s-plane
ω
j
σ
σ
(a)
(b)
P
s-plane
ω
j
P
–z c –pc
FIGURE 9.10
Root locus: a. before lag compensation; b. after lag compensation
Example 9.2
Lag Compensator Design
Lag Compensator Design
PROBLEM: Compensate the system of Figure 9.4(a), whose root locus is shown in
Figure 9.5, to improve the steady-state error by a factor of 10 if the system is operating
with a damping ratio of 0.174.
SOLUTION: The uncompensated system error from Example 9.1 was 0.108 with
Kp  8:23. A tenfold improvement means a steady-state error of
e∞  0:108
10
 0:0108
9.6
9.2 Improving Steady-State Error via Cascade Compensation
459

Since
e∞ 
1
1  Kp
 0:0108
9.7
rearranging and solving for the required Kp yields
Kp  1  e∞
e∞
 1  0:0108
0:0108
 91:59
9.8
The improvement in Kp from the uncompensated system to the compensated system is the
required ratio of the compensator zero to the compensator pole, or
zc
pc
 KpN
KpO
 91:59
8:23  11:13
9.9
Arbitrarily selecting
pc  0:01
9.10
we use Eq. (9.9) and ﬁnd
zc  11:13pc ≈0:111
9.11
Let us now compare the compensated system, shown in Figure 9.11, with the
uncompensated system. First sketch the root locus of the compensated system, as shown
in Figure 9.12. Next search along the ζ  0:174 line for a multiple of 180° and ﬁnd that the
s-plane
jω
σ
 = 0.174
K = 158.1
– 0.678 + j3.836
–2
–1
0
–0.111
Fourth closed-loop
pole at  –0.101
    = Closed-loop pole
    = Open-loop pole
4
6
–8
–j2
–j4
–10
–11.55
j4
j2
100.02°
Compensator pole
at  –0.01
ζ
–
–
FIGURE 9.12
Root locus for
compensated system of
Figure 9.11
1
R(s)
E(s)
C(s)
Plant
–
(s + 0.01)
Compensator
(s + 1)(s + 2)(s + 10)
K(s + 0.111)
+
FIGURE 9.11
Compensated
system for Example 9.2
460
Chapter 9
Design via Root Locus

second-order dominant poles are at 0:678  j3:836 with a gain, K, of 158.1. The third and
fourth closed-loop poles are at 11:55 and 0:101, respectively, and are found by
searching the real axis for a gain equal to that of the dominant poles. All transient and
steady-state results for both the uncompensated and the compensated systems are shown in
Table 9.1.
The fourth pole of the compensated system cancels its zero. This leaves the
remaining three closed-loop poles of the compensated system very close in value to
the three closed-loop poles of the uncompensated system. Hence, the transient response of
both systems is approximately the same, as is the system gain, but notice that the steady-
state error of the compensated system is 1/9.818 that of the uncompensated system and is
close to the design speciﬁcation of a tenfold improvement.
Figure 9.13 shows the effect of the lag compensator in the time domain. Even though
the transient responses of the uncompensated and lag-compensated systems are the same,
the lag-compensated system exhibits less steady-state error by approaching unity more
closely than the uncompensated system.
We now examine another design possibility for the lag compensator and compare the
response to Figure 9.13. Let us assume a lag compensator whose pole and zero are 10 times
as close to the origin as in the previous design. The results are compared in Figure 9.14. Even
though both responses will eventually reach approximately the same steady-state value, the
lag compensator previously designed, Gcs  s  0:111=s  0:01, approaches the ﬁnal
value faster than the proposed lag compensator, Gcs  s  0:0111=s  0:001. We can
explain this phenomenon as follows. From Table 9.1, the previously designed lag
TABLE 9.1
Predicted characteristics of uncompensated and lag-compensated systems for
Example 9.2
Parameter
Uncompensated
Lag-compensated
Plant and compensator
K
s  1s  2s  10
Ks  0:111
s  1s  2s  10s  0:01
K
164.6
158.1
Kp
8.23
87.75
e∞
0.108
0.011
Dominant second-order poles
0:694  j3:926
0:678  j3:836
Third pole
11:61
11:55
Fourth pole
None
0:101
Zero
None
0:111
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0
0
5
10
15
20
c(t)
Lag-compensated
Uncompensated
Time (seconds)
FIGURE 9.13
Step responses
of uncompensated and lag-
compensated systems for
Example 9.2
TryIt 9.1
Use the following MATLAB
and Control System Toolbox
statements to reproduce
Figure 9.13.
Gu=zpk([ ],...
[1 2 10],164.6);
Gc=zpk([0.111],...
[0.01],1);
Gce=Gu*Gc;
Tu=feedback(Gu,1);
Tc=feedback(Gce,1);
step(Tu)
hold
step(Tc)
9.2 Improving Steady-State Error via Cascade Compensation
461

9.3 Improving Transient Response
via Cascade Compensation
Since we have solved the problem of improving the steady-state error without affecting the
transient response, let us now improve the transient response itself. In this section, we
discuss two ways to improve the transient response of a feedback control system by using
compensator has a fourth closed-loop pole at 0:101. Using the same analysis for the new
lag compensator with its open-loop pole 10 times as close to the imaginary axis, we ﬁnd its
fourth closed-loop pole at 0:01. Thus, the new lag compensator has a closed-loop pole
closer to the imaginary axis than the original lag compensator. This pole at 0:01 will
produce a longer transient response than the original pole at 0:101, and the steady-state
value will not be reached as quickly.
(s + 0.001)
Gc(s) = (s + 0.111)
(s + 0.0111)
Gc(s) =
0.2
0
0
5
10
15
20
c(t)
0.4
0.6
0.8
1.0
1.2
1.4
Time (seconds)
(s + 0.01)
FIGURE 9.14
Step responses
of the system for Example 9.2
using different lag
compensators
Skill-Assessment Exercise 9.1
PROBLEM: A unity feedback system with the forward transfer function
Gs 
K
ss  7
is operating with a closed-loop step response that has 15% overshoot. Do the following:
a. Evaluate the steady-state error for a unit ramp input.
b. Design a lag compensator to improve the steady-state error by a factor of 20.
c. Evaluate the steady-state error for a unit ramp input to your compensated system.
d. Evaluate how much improvement in steady-state error was realized.
ANSWERS:
a. eramp∞  0:1527
b. Glags  s  0:2
s  0:01
c. eramp∞  0:0078
d. 19.58 times improvement
The complete solution is at www.wiley.com/college/nise.
462
Chapter 9
Design via Root Locus

cascade compensation. Typically, the objective is to design a response that has a desirable
percent overshoot and a shorter settling time than the uncompensated system.
The ﬁrst technique we will discuss is ideal derivative compensation. With ideal
derivative compensation, a pure differentiator is added to the forward path of the feedback
control system. We will see that the result of adding differentiation is the addition of a zero
to the forward-path transfer function. This type of compensation requires an active network
for its realization. Further, differentiation is a noisy process; although the level of the noise
is low, the frequency of the noise is high compared to the signal. Thus, differentiating
high-frequency noise yields a large, unwanted signal.
The second technique does not use pure differentiation. Instead, it approximates
differentiation with a passive network by adding a zero and a more distant pole to
the forward-path transfer function. The zero approximates pure differentiation as described
previously.
As with compensation to improve steady-state error, we introduce names associated
with the implementation of the compensators. We call an ideal derivative compensator a
proportional-plus-derivative (PD) controller, since the implementation, as we will see,
consists of feeding the error (proportional) plus the derivative of the error forward to the
plant. The second technique uses a passive network called a lead compensator. As with the
lag compensator, the name comes from its frequency response, which is discussed in
Chapter 11. Thus, we use the name PD controller interchangeably with ideal derivative
compensator, and we use the name lead compensator when the cascade compensator does
not employ pure differentiation.
Ideal Derivative Compensation (PD)
The transient response of a system can be selected by choosing an appropriate closed-loop
pole location on the s-plane. If this point is on the root locus, then a simple gain adjustment is
all that is required in order to meet the transient response speciﬁcation. If the closed-loop
pole location is not on the root locus, then the root locus must be reshaped so that the
compensated (new) root locus goes through the selected closed-loop pole location. In order
to accomplish the latter task,poles andzeros canbe addedintheforward path toproduce a new
open-loop function whose root locus goes through the design point on the s-plane. One way to
speed up the original system that generally works is to add a single zero to the forward path.
This zero can be represented by a compensator whose transfer function is
Gcs  s  zc
9.12
This function, the sum of a differentiator and a pure gain, is called an ideal derivative, or PD
controller. Judicious choice of the position of the compensator zero can quicken the
response over the uncompensated system. In summary, transient responses unattainable by a
simple gain adjustment can be obtained by augmenting the system’s poles and zeros with an
ideal derivative compensator.
We now show that ideal derivative compensation speeds up the response of a system.
Several simple examples are shown in Figure 9.15, where the uncompensated system of
Figure 9.15(a), operating with a damping ratio of 0.4, becomes a compensated system by the
addition of a compensating zero at 2, 3, and 4 in Figures 9.15(b), (c), and (d),
respectively. In each design, the zero is moved to a different position, and the root locus is
shown. For each compensated case, the dominant, second-order poles are farther out along
the 0.4 damping ratio line than the uncompensated system.
Each of the compensated cases has dominant poles with the same damping ratio as the
uncompensated case. Thus, we predict that the percent overshoot will be the same for each case.
Also, the compensated, dominant, closed-loop poles have more negative real parts than
the uncompensated, dominant, closed-loop poles. Hence, we predict that the settling times for
the compensated cases will be shorter than for the uncompensated case. The compensated,
9.3 Improving Transient Response via Cascade Compensation
463

dominant, closed-loop poles with the more negative real parts will have the shorter settling
times. The system in Figure 9.15(b) will have the shortest settling time.
All of the compensated systems will have smaller peak times than the uncompensated
system, since the imaginary parts of the compensated systems are larger. The system of
Figure 9.15(b) will have the smallest peak time.
Also notice that as the zero is placed farther from the dominant poles, the closed-loop,
compensated dominant poles move closer to the origin and to the uncompensated, dominant
closed-loop poles. Table 9.2 summarizes the results obtained from the root locus of each of
the design cases shown in Figure 9.15.
s-plane
jω
σ
K = 23.72
–0.939 + j2.151
–1
0
–3
4
–5
6
Third
pole
(a)
ζ  = 0.4
= Closed-loop pole
–2
= Open-loop pole
j1
j2
j3
j4
j5
j7
113.6°
j6
–
–
K = 51.25
–3 + j6.874
ζ  = 0.4
s-plane
jω
σ
–1
0
–4
–5
–6
(b)
= Closed-loop pole
–2
= Open-loop pole
j1
j2
j3
j4
j5
j7
j6
113.6°
–3
K = 35.34
–2.437 + j5.583
ζ  =  0.4
s-plane
jω
σ
–1
0
–3
–4
–5
–6
Third
pole
(c)
= Closed-loop pole
–2
= Open-loop pole
j1
j2
j3
j4
j5
j7
113.6°
j6
K = 20.76
–1.869 + j4.282
ζ  = 0.4
s-plane
jω
σ
–1
0
–3
–4
–5
6
(d)
= Closed-loop pole
–2
= Open-loop pole
j1
j2
j3
j4
j5
j7
j6
113.6°
Third
pole
–
FIGURE 9.15
Using ideal derivative compensation: a. uncompensated; b. compensator zero at 2;
c. compensator zero at 3; d. compensator zero at 4
464
Chapter 9
Design via Root Locus

In summary, although compensation methods c and d yield slower responses than
method b, the addition of ideal derivative compensation shortened the response time in each
case while keeping the percent overshoot the same. This change can best be seen in the
settling time and peak time, where there is at least a doubling of speed across all of the cases
of compensation. An added beneﬁt is the improvement in the steady-state error, even though
lag compensation was not used. Here the steady-state error of the compensated system is
at least one-third that of the uncompensated system, as seen by e∞ and Kp. All systems
in Table 9.2 are Type 0, and some steady-state error is expected. The reader must not assume
that, in general, improvement in transient response always yields an improvement in
steady-state error.
The time response of each case in Table 9.2 is shown in Figure 9.16. We see that the
compensated responses are faster and exhibit less error than the uncompensated response.
Now that we have seen what ideal derivative compensation can do, we are ready to
design our own ideal derivative compensator to meet a transient response speciﬁcation.
Basically, we will evaluate the sum of angles from the open-loop poles and zeros to a design
point that is the closed-loop pole that yields the desired transient response. The difference
between 180° and the calculated angle must be the angular contribution of the compensator
zero. Trigonometry is then used to locate the position of the zero to yield the required
difference in angle.
TABLE 9.2
Predicted characteristics for the systems of Figure 9.15
Uncompensated
Compensation b
Compensation c
Compensation d
Plant and compensator
K
s  1s  2s  5
Ks  2
s  1s  2s  5
Ks  3
s  1s  2s  5
Ks  4
s  1s  2s  5
Dom, poles
0:939  j2:151
3  j6:874
2:437  j5:583
1:869  j4:282
K
23.72
51.25
35.34
20.76
ζ
0.4
0.4
0.4
0.4
ωn
2.347
7.5
6.091
4.673
%OS
25.38
25.38
25.38
25.38
Ts
4.26
1.33
1.64
2.14
Tp
1.46
0.46
0.56
0.733
Kp
2.372
10.25
10.6
8.304
e∞
0.297
0.089
0.086
0.107
Third pole
6:123
None
3:127
4:262
Zero
None
None
3
4
Comments
Second-order
approx. OK
Pure
second-order
Second-order
approx. OK
Second-order
approx. OK
Zero at –2
Uncompensated
Zero at –3
Zero at –4
1.25
1.00
0.75
0.50
0.25
0
0
4.5
c(t)
1.5
3.0
Time (seconds)
FIGURE 9.16
Uncompensated system and
ideal derivative compensation
solutions from Table 9.2
9.3 Improving Transient Response via Cascade Compensation
465

Example 9.3
Ideal Derivative Compensator Design
Ideal Derivative Compensator Design
PROBLEM: Given the system of Figure 9.17, design an ideal derivative compensator to
yield a 16% overshoot, with a threefold reduction in settling time.
SOLUTION: Let
us
ﬁrst
evaluate
the
performance
of
the
uncompensated system operating with 16% overshoot. The root locus
for the uncompensated system is shown in Figure 9.18. Since 16%
overshoot is equivalent to ζ  0:504, we search along that damping ratio
line for an odd multiple of 180° and ﬁnd that the dominant, second-order
pair of poles is at 1:205  j2:064. Thus, the settling time of the
uncompensated system is
Ts 
4
ζωn

4
1:205  3:320
9.13
Since our evaluation of percent overshoot and settling time is based upon a second-
order approximation, we must check the assumption by ﬁnding the third pole and
justifying the second-order approximation. Searching beyond 6 on the real axis for a
gain equal to the gain of the dominant, second-order pair, 43.35, we ﬁnd a third pole at
7:59, which is over six times as far from the jω-axis as the dominant, second-order pair.
We conclude that our approximation is valid. The transient and steady-state error
characteristics of the uncompensated system are summarized in Table 9.3.
Now we proceed to compensate the system. First we ﬁnd the location of the
compensated system’s dominant poles. In order to have a threefold reduction in the
settling time, the compensated system’s settling time will be one-third of Eq. (9.13).
The new settling time will be 1.107. Therefore, the real part of the compensated
system’s dominant, second-order pole is
σ  4
Ts

4
1:107  3:613
9.14
K
s(s + 4)(s + 6)
R(s)
C(s)
–
+
E(s)
FIGURE 9.17
Feedback control system for
Example 9.3
Virtual Experiment 9.1
PD Controller Design
Put theory into practice and
use root-locus to design a PD
controller for the Quanser
Ball and Beam using
LabVIEW. The Ball and
Beam is an unstable system,
similar to exothermic
chemical processes that have
to be stabilized to avoid
overheating.
Virtual experiments are found
on Learning Space.
s-plane
jω
σ
K = 43.35
–1.205 + j2.064
ζ = 0.504
    = Closed-loop pole
    = Open-loop pole
j1
–1
0
–2
–3
4
–5
6
–7
j2
j3
–7.59
120.26°
–
–
FIGURE 9.18
Root locus for uncompensated system shown in Figure 9.17
466
Chapter 9
Design via Root Locus

Figure 9.19 shows the designed dominant, second-order pole, with a real part equal to
3:613 and an imaginary part of
ωd  3:613 tan180°  120:26°  6:193
9.15
Next we design the location of the compensator zero. Input the uncompensated
system’s poles and zeros in the root locus program as well as the design point
3:613  j6:193 as a test point. The result is the sum of the angles to the design point
of all the poles and zeros of the compensated system except for those of the compensator
zero itself. The difference between the result obtained and 180° is the angular contribution
required of the compensator zero. Using the open-loop poles shown in Figure 9.19 and the
test point, 3:613  j6:193, which is the desired dominant second-order pole, we obtain
the sum of the angles as 275:6°. Hence, the angular contribution required from the
compensator zero for the test point to be on the root locus is 275:6°  180°  95:6°. The
TABLE 9.3
Uncompensated and compensated system characteristic of Example 9.3
Uncompensated
Simulation
Compensated
Simulation
Plant and compensator
K
ss  4s  6
Ks  3:006
ss  4s  6
Dominant poles
1:205  j2:064
3:613  j6:193
K
43.35
47.45
ζ
0.504
0.504
ωn
2.39
7.17
%OS
16
14.8
16
11.8
Ts
3.320
3.6
1.107
1.2
Tp
1.522
1.7
0.507
0.5
Kv
1.806
5.94
e∞
0.554
0.168
Third pole
7:591
2:775
Zero
None
3:006
Comments
Second-order
approx. OK
Pole-zero
not canceling
120.26°
–1
0
σ
s-plane
Desired
compensated
dominant pole
–3.613 + j6.193
= 0.504
ζ
jω
    = Closed-loop pole
    = Open-loop pole
–2
–3
4
–5
6
–7
–7.59
j2
j3
j4
j5
j6
j7
Uncompensated
dominant pole
–1.205 + j2.064
j1
–
–
FIGURE 9.19
Compensated
dominant pole superimposed
over the uncompensated root
locus for Example 9.3
9.3 Improving Transient Response via Cascade Compensation
467

geometry is shown in Figure 9.20, where we now must solve for σ, the location of the
compensator zero.
From the ﬁgure,
6:193
3:613  σ  tan180°  95:6°
9.16
Thus, σ  3:006. The complete root locus for the compensated system is shown in
Figure 9.21.
Table 9.3 summarizes the results for both the uncompensated system and the
compensated system. For the uncompensated system, the estimate of the transient
response is accurate since the third pole is at least ﬁve times the real part of the dominant,
second-order pair. The second-order approximation for the compensated system, however,
may be invalid because there is no approximate closed-loop third-pole and zero cancellation
–1
0
–2
–3
–4
–5
–6
–7
–3.613 + j6.193
= 0.504
K = 47.45
s-plane
j
j1
j2
j3
j4
j5
j7
j6
= Closed-loop pole
= Open-loop pole
Compensated
dominant pole
120.26°
–2.775
σ
ω
ζ 
FIGURE 9.21
Root locus for
the compensated system of
Example 9.3
Desired
compensated
dominant pole
–3.613 + j6.193
= 0.504
ζ
s-plane
jω
σ
–1
0
–3
–4
–5
–6
–2
= Closed-loop pole
= Open-loop pole
j1
j2
j3
j4
j5
j7
j6
–7
95.6°
Uncompensated
dominant pole
– σ
120.26°
–1.205 + j2.064
FIGURE 9.20
Evaluating the
location of the compensating
zero for Example 9.3
468
Chapter 9
Design via Root Locus

Once we decide on the location of the compensating zero, how
do we implement the ideal derivative, or PD controller? The ideal
integral compensator that improved steady-state error was implemented
with a proportional-plus-integral (PI) controller. The ideal derivative
compensator used to improve the transient response is implemented
with a proportional-plus-derivative (PD) controller. For example, in
Figure 9.23 the transfer function of the controller is
Gcs  K2s  K1  K2 s  K1
K2


9.17
Hence, K1=K2 is chosen to equal the negative of the compensator zero, and K2 is chosen to
contribute to the required loop-gain value. Later in the chapter, we will study circuits that can
be used to approximate differentiation and produce gain.
between the closed-loop pole at 2:775 and the closed-loop zero at 3:006. A simulation
or a partial-fraction expansion of the closed-loop response to compare the residue of the
pole at 2:775 to the residues of the dominant poles at 3:613  j6:193 is required. The
results of a simulation are shown in the table’s second column for the uncompensated
system and the fourth column for the compensated system. The simulation results can be
obtained using MATLAB (discussed at the end of this example) or a program like the
state-space step-response program described in Appendix H.1 at www.wiley.com/
college/nise. The percent overshoot differs by 3% between the uncompensated and
compensated systems, while there is approximately a threefold improvement in speed as
evaluated from the settling time.
The ﬁnal results are displayed in Figure 9.22, which compares the uncompensated
system and the faster compensated system.
Students who are using MATLAB should now run ch9p1 in Appendix B.
MATLAB will be used to design a PD controller. You will input the
desired percent overshoot from the keyboard. MATLAB will plot the
root locus of the uncompensated system and the percent overshoot
line. You will interactively select the gain, after which MATLAB
will display the performance characteristics of the uncompensated
system and plot its step response. Using these characteristics,
you will input the desired settling time. MATLAB will design the PD
controller, enumerate its performance characteristics, and plot a
step response. This exercise solves Example 9.3 using MATLAB.
Compensated
Uncompensated
1.2
1.0
0.8
0.6
0.4
0.2
0
0
1.0
3.5
c (t)
Time (seconds)
0.5
1.5
2.0
2.5
3.0
4.0
FIGURE 9.22
Uncompensated and
compensated system step
responses of Example 9.3
K1
K2s
R(s)
C(s)
+
G(s)
–
+
+
FIGURE 9.23
PD controller
9.3 Improving Transient Response via Cascade Compensation
469

While the ideal derivative compensator can improve the transient response of the
system, it has two drawbacks. First, it requires an active circuit to perform the differentia-
tion. Second, as previously mentioned, differentiation is a noisy process: The level of the
noise is low, but the frequency of the noise is high compared to the signal. Differentiation
of high frequencies can lead to large unwanted signals or saturation of ampliﬁers and
other components. The lead compensator is a passive network used to overcome the
disadvantages of ideal differentiation and still retain the ability to improve the transient
response.
Lead Compensation
Just as the active ideal integral compensator can be approximated with a passive lag
network, an active ideal derivative compensator can be approximated with a passive lead
compensator. When passive networks are used, a single zero cannot be produced; rather, a
compensator zero and a pole result. However, if the pole is farther from the imaginary axis
than the zero, the angular contribution of the compensator is still positive and thus
approximates an equivalent single zero. In other words, the angular contribution of the
compensator pole subtracts from the angular contribution of the zero. This deduction does
not preclude the use of the compensator to improve transient response, since the net angular
contribution is positive, just as for a single PD controller zero.
The advantages of a passive lead network over an active PD controller are that (1) no
additional power supplies are required and (2) noise due to differentiation is reduced. The
disadvantage is that the additional pole does not reduce the number of branches of the root
locus that cross the imaginary axis into the right half-plane. On the other hand, the addition
of the single zero of the PD controller tends to reduce the number of branches of the root
locus that cross into the right half-plane.
Let us ﬁrst look at the concept behind lead compensation. If we select a desired
dominant, second-order pole on the s-plane, the sum of the angles from the uncompensated
system’s poles and zeros to the design point can be found. The difference between 180° and
the sum of the angles must be the angular contribution required of the compensator.
For example, looking at Figure 9.24, we see that
θ2  θ1  θ3  θ4  θ5  2k  1180°
9.18
where θ2  θ1  θc is the angular contribution of the lead compensator. From Figure 9.24
we see that θc is the angle of a ray extending from the design point and intersecting the real
axis at the pole value and zero value of the compensator. Now visualize this ray rotating
about the desired closed-loop pole location and intersecting the real axis at the compensator
pole and zero, as illustrated in Figure 9.25. We realize that an inﬁnite number of lead
compensators could be used to meet the transient response requirement.
TryIt 9.2
Use MATLAB, the Control
System Toolbox, and the
following steps to use
SISOTOOL to perform the
design of Example 9.3.
1. Type SISOTOOL in the
MATLAB Command
Window.
2. Select Import in the File menu
of the SISO Design for SISO
Design Task Window.
3. In the Data ﬁeld for G, type
zpk([ ],[0,-4,-6],1)
and hit ENTER on the
keyboard. Click OK.
4. On the Edit menu choose
SISO Tool Preferences . . .
and select Zero/pole/gain:
under the Options tab. Click
OK.
5. Right-click on the root locus
white space and choose
Design Requirements/
New . . .
6. Choose Percent overshoot
and type in 16. Click OK.
7. Right-click on the root locus
white space and choose
Design Requirements/
New . . .
8. Choose Settling time and
click OK.
9. Drag the settling time vertical
line to the intersection of the
root locus and 16% overshoot
radial line.
10. Read the settling time at the
bottom of the window.
11. Drag the settling time vertical
line to a settling time that is 1/3
of the value found in Step 9.
12. Click on a red zero icon in the
menu bar. Place the zero on the
root locus real axis by clicking
again on the real axis.
13. Left-click on the real-axis zero
and drag it along the real axis
until the root locus intersects
the settling time and percent
overshoot lines.
14. Drag a red square along the
root locus until it is at the
intersection of the root locus,
settling time line, and the
percent overshoot line.
15. Click the Compensator
Editor tab of the Control and
Estimation Tools Manager
window to see the resulting
compensator, including the
gain.
pc
jω
z c
p2
p1
z1
s-plane
Desired pole
location
2
1
3
4
5
2
σ
θ
θ
θ
θ
θ
θ
c
θ
θ1
FIGURE 9.24
Geometry of lead compensation
470
Chapter 9
Design via Root Locus

How do the possible lead compensators differ? The differences are in the values of
static error constants, the gain required to reach the design point on the compensated root
locus, the difﬁculty in justifying a second-order approximation when the design is complete,
and the ensuing transient response.
For design, we arbitrarily select either a lead compensator pole or zero and ﬁnd
the angular contribution at the design point of this pole or zero along with the system’s open-
loop poles and zeros. The difference between this angle and 180° is the required contribution
of the remaining compensator pole or zero. Let us look at an example.
j
s-plane
zc1
pc2
pc3
zc2
zc3
pc1
Desired 
pole
location 
σ
ω
θc
θc
θc
FIGURE 9.25
Three of the
inﬁnite possible lead
compensator solutions
Example 9.4
Lead Compensator Design
Lead Compensator Design
PROBLEM: Design three lead compensators for the system of Figure 9.17 that will
reduce the settling time by a factor of 2 while maintaining 30% overshoot. Compare the
system characteristics between the three designs.
SOLUTION: First determine the characteristics of the
uncompensated system operating at 30% overshoot to
see what the uncompensated settling time is. Since 30%
overshoot is equivalent to a damping ratio of 0.358, we
search along the ζ  0:358 line for the uncompensated
dominant poles on the root locus, as shown in Figure 9.26.
From the pole’s real part, we calculate the uncompensated
settling time as Ts  4=1:007  3:972 seconds. The
remaining characteristics of the uncompensated system
are summarized in Table 9.4.
Next we ﬁnd the design point. A twofold reduction in
settling time yields Ts  3:972=2  1:986 seconds, from
which the real part of the desired pole location is
ζωn  4=Ts  2:014. The imaginary part is ωd 
2:014 tan110:98°  5:252.
We continue by designing the lead compensator.
Arbitrarily assume a compensator zero at 5 on the real axis
as a possible solution. Using the root locus program, sum the
angles from both this zero and the uncompensated system’s
poles and zeros, using the design point as a test point. The
resulting angle is 172:69°. The difference between this angle and 180° is the angular contribution required from the
compensator pole in order to place the design point on the root locus. Hence, an angular contribution of 7:31° is required
from the compensator pole.
j
s-plane
–7
–6
–5
–4
–3
–2
–1
0
= 0.358
110.98°
–2.014 + j5.252
–1.007 + j2.627 
K = 63.21
j1
j2
j3
j4
j5
j6
Desired
compensated
dominant pole
Uncompensated
dominant pole
 = Closed-loop pole
 = Open-loop pole
σ
ω
ζ
FIGURE 9.26
Lead compensator design, showing
evaluation of uncompensated and compensated dominant
poles for Example 9.4
9.3 Improving Transient Response via Cascade Compensation
471

The geometry shown in Figure 9.27 is used to calculate the location of the
compensator pole. From the ﬁgure,
5:252
pc  2:014  tan 7:31°
9.19
from which the compensator pole is found to be
pc  42:96
9.20
The compensated system root locus is sketched in Figure 9.28.
In order to justify our estimates of percent overshoot and settling time, we must show
that the second-order approximation is valid. To perform this validity check, we search for
the third and fourth closed-loop poles found beyond 42:96 and between 5 and 6 in
Figure 9.28. Searching these regions for the gain equal to that of the compensated dominant
pole, 1423, we ﬁnd that the third and fourth poles are at 43:8 and 5:134, respectively.
TABLE 9.4
Comparison of lead compensation designs for Example 9.4
Uncompensated
Compensation a
Compensation b
Compensation c
Plant and compensator
K
ss  4s  6
Ks  5
ss  4s  6s  42:96
Ks  4
ss  4s  6s  20:09
Ks  2
ss  4s  6s  8:971
Dominant poles
1:007  j2:627
2:014  j5:252
2:014  j5:252
2:014  j5:252
K
63.21
1423
698.1
345.6
ζ
0.358
0.358
0.358
0.358
ωn
2.813
5.625
5.625
5.625
%OS*
30 (28)
30 (30.7)
30 (28.2)
30 (14.5)
Ts
*
3.972 (4)
1.986 (2)
1.986 (2)
1.986 (1.7)
Tp
*
1.196 (1.3)
0.598 (0.6)
0.598 (0.6)
0.598 (0.7)
Kv
2.634
6.9
5.791
3.21
e∞
0.380
0.145
0.173
0.312
Other poles
7:986
43.8, 5:134
22:06
13:3, 1:642
Zero
None
5
None
2
Comments
Second-order
approx. OK
Second-order
approx. OK
Second-order
approx. OK
No pole-zero
cancellation
*Simulation results are shown in parentheses.
jω
s-plane
j5.252
–2.014
–pc
Desired
compensated
dominant pole
Note: This figure is not drawn to scale.
 = Closed-loop pole
 = Open-loop pole
7.31°
σ
FIGURE 9.27
s-plane
picture used to calculate the
location of the compensator
pole for Example 9.4
s-plane
j
–4
0
–5
–6
–42.96
Note: This figure is not drawn to scale.
    = Closed-loop pole
    = Open-loop pole
ω
σ
FIGURE 9.28
Compensated
system root locus
472
Chapter 9
Design via Root Locus

Since 43:8 is more than 20 times the real part of the dominant pole, the effect of the
third closed-loop pole is negligible. Since the closed-loop pole at 5:134 is close to the zero
at 5, we have pole-zero cancellation, and the second-order approximation is valid.
All results for this design and two other designs, which place the compensator zero
arbitrarily at 2 and 4 and follow similar design techniques, are summarized in Table 9.4.
Each design should be veriﬁed by a simulation, which could consist of using MATLAB
(discussed at the end of this example) or the state-space model and the step-response
program discussed in Appendix H.1 at www.wiley.com/college/nise. We have performed a
simulation for this design problem, and the results are shown by parenthetical entries next to
the estimated values in the table. The only design that disagrees with the simulation is the
case where the compensator zero is at 2. For this case the closed-loop pole and zero do
not cancel.
A sketch of the root locus, which you should generate, shows why the effect of
the zero is pronounced, causing the response to be different from that predicted.
Placing the zero to the right of the pole at 4 creates a portion of the root locus that
is between the origin and the zero. In other words, there is a closed-loop pole closer to the
origin than the dominant poles, with little chance of pole-zero cancellation except at high
gain. Thus, a quick sketch of the root locus gives us information from which we can make
better design decisions. For this example, we want to place the zero on, or to the left of, the
pole at 4, which gives a better chance for pole-zero cancellation and for a higher-order
pole that is to the left of the dominant poles and subsequently faster. This is veriﬁed by the
fact that our results show good second-order approximations for the cases where the zero
was placed at 4 and 5. Again, decisions about where to place the zero are based on
simple rules of thumb and must be veriﬁed by simulations at the end of the design.
Let us now summarize the results shown in Table 9.4. First we notice differences in
the following:
1. The position of the arbitrarily selected zero
2. The amount of improvement in the steady-state error
3. The amount of required gain, K
4. The position of the third and fourth poles and their relative effect upon the second-order
approximation. This effect is measured by their distance from the dominant poles or the
degree of cancellation with the closed-loop zero.
Once a simulation veriﬁes desired performance, the choice of compensation can be
based upon the amount of gain required or the improvement in steady-state error that can
be obtained without a lag compensator.
The results of Table 9.4 are supported by simulations of the step response, shown in
Figure 9.29 for the uncompensated system and the three lead compensation solutions.
Compensation c
Uncompensated
Compensation a, b
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0
0
1
2
3
c(t)
Time (seconds)
4
FIGURE 9.29
Uncompensated system and
lead compensation responses
for Example 9.4
9.3 Improving Transient Response via Cascade Compensation
473

9.4 Improving Steady-State Error and Transient Response
We now combine the design techniques covered in Sections 9.2 and 9.3 to obtain improvement
in steady-state error and transient response independently. Basically, we ﬁrst improve the
transient response by usingthe methods of Section 9.3. Then weimprovethe steady-stateerror of
this compensated system by applying the methods of Section 9.2. A disadvantage of this
approach is the slight decrease in the speed of the response when the steady-state error is
improved.
As an alternative, we can improve the steady-state error ﬁrst and then follow with the
design to improve the transient response. A disadvantage of this approach is that the
improvement in transient response in some cases yields deterioration in the improvement
of the steady-state error, which was designed ﬁrst. In other cases, the improvement in
transient response yields further improvement in steady-state errors. Thus, a system can be
overdesigned with respect to steady-state errors. Overdesign is usually not a problem unless
it affects cost or produces other design problems. In this textbook, we ﬁrst design for
transient response and then design for steady-state error.
The design can use either active or passive compensators, as previously described. If
we design an active PD controller followed by an active PI controller, the resulting
Skill-Assessment Exercise 9.2
PROBLEM: A unity feedback system with the forward transfer function
Gs 
K
ss  7
is operating with a closed-loop step response that has 15% overshoot. Do the following:
a. Evaluate the settling time.
b. Design a lead compensator to decrease the settling time by three times. Choose the
compensator’s zero to be at 10.
ANSWER:
a. Ts  1:143 s
b. Gleads 
s  10
s  25:52 ;
K  476:3
The complete solution is at www.wiley.com/college/nise.
Students who are using MATLAB should now run ch9p2 in Appendix B.
MATLAB will be used to design a lead compensator. You will input
the desired percent overshoot from the keyboard. MATLAB will
plot the root locus of the uncompensated system and the percent
overshoot line. You will interactively select the gain, after
which MATLAB will display the performance characteristics of
the uncompensated system and plot its step response. Using these
characteristics,you will input the desired settling time and a
zero value for the lead compensator.You will then interactively
select a value for the compensator pole. MATLAB will respond with a
root locus.You can then continue selecting pole values until the
root locus goes through the desired point. MATLAB will display the
lead compensator,enumerate its performance characteristics,and
plot a step response.This exercise solves Example 9.4 using MATLAB.
474
Chapter 9
Design via Root Locus

compensator is called a proportional-plus-integral-plus-derivative (PID) controller. If we
ﬁrst design a passive lead compensator and then design a passive lag compensator, the
resulting compensator is called a lag-lead compensator.
PID Controller Design
A PID controller is shown in Figure 9.30. Its transfer function is
Gcs  K1  K2
s  K3s  K1s  K2  K3s2
s

K3 s2  K1
K3
s  K2
K3


s
9.21
which has two zeros plus a pole at the origin. One zero and the pole at the origin can be
designed as the ideal integral compensator; the other zero can be designed as the ideal
derivative compensator.
The design technique, which is demonstrated in Example 9.5, consists of the
following steps:
1. Evaluate the performance of the uncompensated system to determine how much
improvement in transient response is required.
2. Design the PD controller to meet the transient response speciﬁcations. The design
includes the zero location and the loop gain.
3. Simulate the system to be sure all requirements have been met.
4. Redesign if the simulation shows that requirements have not been met.
5. Design the PI controller to yield the required steady-state error.
6. Determine the gains, K1, K2, and K3, in Figure 9.30.
7. Simulate the system to be sure all requirements have been met.
8. Redesign if simulation shows that requirements have not been met.
K1
K2
s
K3s
R(s)
C(s)
+
G(s)
–
+
+
+
FIGURE 9.30
PID controller
Example 9.5
PID Controller Design
PID Controller Design
PROBLEM: Given the system of Figure 9.31, design a PID
controller so that the system can operate with a peak time that
is two-thirds that of the uncompensated system at 20%
overshoot and with zero steady-state error for a step input.
SOLUTION: Note that our solution follows the eight-step
procedure described earlier.
K(s + 8)
(s + 3)(s + 6)(s + 10)
R(s)
C(s)
–
+
E(s)
FIGURE 9.31
Uncompensated feedback control
system for Example 9.5
9.4 Improving Steady-State Error and Transient Response
475

Step 1 Let us ﬁrst evaluate the uncompensated system operating at 20% overshoot.
Searching along the 20% overshoot line ζ  0:456 in Figure 9.32, we ﬁnd the
dominant poles to be 5:415  j10:57 with a gain of 121.5. A third pole, which
exists at 8:169, is found by searching the region between 8 and 10 for a gain
equivalent to that at the dominant poles. The complete performance of the
uncompensated system is shown in the ﬁrst column of Table 9.5, where we
117.13°
K = 121.5
Uncompensated
dominant pole
–5.415 + j10.57 
j
s-plane
σ
–2
0
–4
–6
–8
–10
–8.169
–5.5
ω
j2
j4
j6
j8
j10
j12
–3
–4.6
= 0.456
= Closed-loop pole
= Open-loop pole
ζ
FIGURE 9.32
Root locus for the uncompensated system of Example 9.5
TABLE 9.5
Predicted characteristics of uncompensated, PD-, and PID-compensated systems of Example 9.5
Uncompensated
PD-compensated
PID-compensated
Plant and compensator
Ks  8
s  3s  6s  10
Ks  8s  55:92
s  3s  6s  10
Ks  8s  55:92s  0:5
s  3s  6s  10s
Dominant poles
5:415  j10:57
8:13  j15:87
7:516  j14:67
K
121.5
5.34
4.6
ζ
0.456
0.456
0.456
ωn
11.88
17.83
16.49
%OS
20
20
20
Ts
0.739
0.492
0.532
Tp
0.297
0.198
0.214
Kp
5.4
13.27
∞
e∞
0.156
0.070
0
Other poles
8:169
8:079
8:099, 0:468
Zeros
8
8, 55:92
8, 55:92, 0:5
Comments
Second-order
approx. OK
Second-order
approx. OK
Zeros at 55:92
and 0:5 not canceled
476
Chapter 9
Design via Root Locus

compare the calculated values to those obtained through simulation (Figure 9.35).
We estimate that the uncompensated system has a peak time of 0.297 second at
20% overshoot.
Step 2 To compensate the system to reduce the peak time to two-thirds of that of the
uncompensated system, we must ﬁrst ﬁnd the compensated system’s dominant
pole location. The imaginary part of the compensated dominant pole is
ωd  π
Tp

π
2=30:297  15:87
9.22
Thus, the real part of the compensated dominant pole is
σ 
ωd
tan 117:13°  8:13
9.23
Next we design the compensator. Using the geometry shown in Figure 9.33,
we calculate the compensating zero’s location. Using the root locus program, we
ﬁnd the sum of angles from the uncompensated system’s poles and zeros to the
desired compensated dominant pole to be 198:37°. Thus, the contribution
required from the compensator zero is 198:37°  180°  18:37°. Assume that
the compensator zero is located at zc, as shown in Figure 9.33. Since
15:87
zc  8:13  tan 18:37°
9.24
then
zc  55:92
9.25
Thus, the PD controller is
GPDs  s  55:92
9.26
The complete root locus for the PD-compensated system is sketched in Figure 9.34.
Using a root locus program, the gain at the design point is 5.34. Complete
speciﬁcations for ideal derivative compensation are shown in the third column
of Table 9.5.
–zc
–8.13
j15.87
s-plane
σ
PD-compensated
dominant pole
ω
j
Note: This figure is not drawn to scale.
 = Closed-loop pole
18.37°
FIGURE 9.33
Calculating the
PD compensator zero for
Example 9.5
–10 –8 –6 –3
0
117.13°
j
K = 5.34
ζ = 0.456
–55.92
ω
σ
–8.13 + j15.87
–106
s-plane
PD-compensated
dominant pole
Note: This figure is not drawn to scale.
 = Closed-loop pole
 = Open-loop pole
FIGURE 9.34
Root locus for
PD-compensated system of
Example 9.5
9.4 Improving Steady-State Error and Transient Response
477

Steps 3 & 4 We simulate the PD-compensated system, as shown in Figure 9.35. We see
the reduction in peak time and the improvement in steady-state error over the
uncompensated system.
Step 5 After we design the PD controller, we design the ideal integral compensator to
reduce the steady-state error to zero for a step input. Any ideal integral compensator
zero will work, as long as the zero is placed close to the origin. Choosing the ideal
integral compensator to be
GPIs  s  0:5
s
9.27
we sketch the root locus for the PID-compensated system, as shown in Figure 9.36.
Searching the 0.456damping ratio line, we ﬁnd the dominant, second-order poles to be
–10 –8 –6
–3
0
117.13°
–0.5
s-plane
j
K = 4.6
ζ = 0.456
–55.92
ω
σ
–7.516 + j14.67
Note: This figure is not drawn to scale.
 = Closed-loop pole
 = Open-loop pole
PID-compensated
dominant pole
–106
FIGURE 9.36
Root locus for
PID-compensated system of
Example 9.5
0
1.0
0
2.0
c(t) 
Time (seconds)
PID
Uncompensated
0.2
0
0.4
0.6
0.8
1.2
1.6
1.2
0.8
0.4
PD
FIGURE 9.35
Step responses
for uncompensated,
PD-compensated, and
PID-compensated systems
of Example 9.5
478
Chapter 9
Design via Root Locus

Lag-Lead Compensator Design
In the previous example, we serially combined the concepts of ideal derivative and ideal
integral compensation to arrive at the design of a PID controller that improved both the
transient response and the steady-state error performance. In the next example, we
improve both transient response and the steady-state error by using a lead compensator
and a lag compensator rather than the ideal PID. Our compensator is called a lag-lead
compensator.
We ﬁrst design the lead compensator to improve the transient response. Next we
evaluate the improvement in steady-state error still required. Finally, we design the lag
compensator to meet the steady-state error requirement. Later in the chapter we show
circuit designs for the passive network. The following steps summarize the design
procedure:
1. Evaluate the performance of the uncompensated system to determine how much
improvement in transient response is required.
2. Design the lead compensator to meet the transient response speciﬁcations. The design
includes the zero location, pole location, and the loop gain.
3. Simulate the system to be sure all requirements have been met.
4. Redesign if the simulation shows that requirements have not been met.
5. Evaluate the steady-state error performance for the lead-compensated system to
determine how much more improvement in steady-state error is required.
6. Design the lag compensator to yield the required steady-state error.
7. Simulate the system to be sure all requirements have been met.
8. Redesign if the simulation shows that requirements have not been met.
7:516  j14:67, with an associated gain of 4.6. The remaining characteristics for
the PID-compensated system are summarized in the fourth column of Table 9.5.
Step 6 Now we determine the gains, K1, K2, and K3, in Figure 9.30. From Eqs. (9.26) and
(9.27), the product of the gain and the PID controller is
GPIDs  Ks  55:92s  0:5
s
 4:6s  55:92s  0:5
s
 4:6s2  56:42s  27:96
s
9.28
Matching Eqs. (9.21) and (9.28), K1  259:5, K2  128:6, and K3  4:6.
Steps 7 & 8 Returning to Figure 9.35, we summarize the results of our design. PD
compensation improved the transient response by decreasing the time required to
reach the ﬁrst peak as well as yielding some improvement in the steady-state error.
The complete PID controller further improved the steady-state error without
appreciably changing the transient response designed with the PD controller. As
we have mentioned before, the PID controller exhibits a slower response, reaching
the ﬁnal value of unity at approximately 3 seconds. If this is undesirable, the speed
of the system must be increased by redesigning the ideal derivative compensator
or moving the PI controller zero farther from the origin. Simulation plays an
important role in this type of design since our derived equation for settling time is
not applicable for this part of the response, where there is a slow correction of the
steady-state error.
9.4 Improving Steady-State Error and Transient Response
479

Example 9.6
Lag-Lead Compensator Design
Lag-Lead Compensator Design
PROBLEM: Design a lag-lead compensator for the system of
Figure 9.37 so that the system will operate with 20% overshoot and
a twofold reduction in settling time. Further, the compensated
system will exhibit a tenfold improvement in steady-state error for a
ramp input.
SOLUTION: Again, our solution follows the steps just described.
Step 1 First we evaluate the performance of the uncompensated system. Searching along
the 20% overshoot line ζ  0:456 in Figure 9.38, we ﬁnd the dominant poles at
1:794  j3:501, with a gain of 192.1. The performance of the uncompensated
system is summarized in Table 9.6.
Step 2 Next we begin the lead compensator design by selecting the location of the
compensated system’s dominant poles. In order to realize a twofold reduction in
settling time, the real part of the dominant pole must be increased by a factor of 2,
K
s(s + 6)(s + 10)
E(s)
R(s)
C(s)
–
+
FIGURE 9.37
Uncompensated system for
Example 9.6
TABLE 9.6
Predicted characteristics of uncompensated, lead-compensated, and lag-lead-compensated systems of Example 9.6
Uncompensated
Lead-compensated
Lag-lead-compensated
Plant and compensator
K
ss  6s  10
K
ss  10s  29:1
Ks  0:04713
ss  10s  29:1s  0:01
Dominant poles
1:794  j3:501
3:588  j7:003
3:574  j6:976
K
192.1
1977
1971
ζ
0.456
0.456
0.456
ωn
3.934
7.869
7.838
%OS
20
20
20
Ts
2.230
1.115
1.119
Tp
0.897
0.449
0.450
Kv
3.202
6.794
31.92
e∞
0.312
0.147
0.0313
Third pole
12:41
31:92
31:91, 0:0474
Zero
None
None
0:04713
Comments
Second-order approx. OK
Second-order approx. OK
Second-order approx. OK
–11
–10
–9
–8
–7
–6
–5
–4
–3
–2
–1
0
117.13°
jω
ζ = 0.456
σ
s-plane
–12.41
K = 192.1
–1.794 + j3.501
j1
j2
j3
j4
 = Closed-loop pole
 = Open-loop pole
Uncompensated dominant pole
FIGURE 9.38
Root locus for
uncompensated system of
Example 9.6
480
Chapter 9
Design via Root Locus

since the settling time is inversely proportional to the real part. Thus,
ζωn  21:794  3:588
9.29
The imaginary part of the design point is
ωd  ζωn tan 117:13°  3:588 tan 117:13°  7:003
9.30
Now we design the lead compensator. Arbitrarily select a location for the lead
compensator zero. For this example, we select the location of the compensator
zero coincident with the open-loop pole at 6. This choice will eliminate a zero
and leave the lead-compensated system with three poles, the same number as the
uncompensated system.
We complete the design by ﬁnding the location of the compensator pole.
Using the root locus program, sum the angles to the design point from the
uncompensated system’s poles and zeros and the compensator zero and get
164:65°. The difference between 180° and this quantity is the angular contribution
required from the compensator pole, or 15:35°. Using the geometry shown in
Figure 9.39,
7:003
pc  3:588  tan 15:35°
9.31
from which the location of the compensator pole, pc, is found to be 29:1.
The complete root locus for the lead-compensated system is sketched in
Figure 9.40. The gain setting at the design point is found to be 1977.
–33
–30
–27
–24
–21
–18
–15
–12
–9
–6
–3
0
117.13°
j
= 0.456
s-plane
–3.588 + j7.003
–31.91
K = 1977
j3
j6
j9
= Closed-loop pole
= Open-loop pole
Compensated dominant pole
σ
ω
𝜁
FIGURE 9.40
Root locus for lead-compensated system of Example 9.6
j7.003
–3.588
–pc
σ
ω
j
s-plane
15.35°
 = Closed-loop pole
 = Open-loop pole
FIGURE 9.39
Evaluating the compensator pole for Example 9.6
9.4 Improving Steady-State Error and Transient Response
481

Steps 3 & 4 Check the design with a simulation. (The result for the lead-compensated
system is shown in Figure 9.42 and is satisfactory.)
Step 5 Continue by designing the lag compensator to improve the steady-state error.
Since the uncompensated system’s open-loop transfer function is
Gs 
192:1
ss  6s  10
9.32
the static error constant, Kv, which is inversely proportional to the steady-state error,
is 3.201. Since the open-loop transfer function of the lead-compensated system is
GLCs 
1977
ss  10s  29:1
9.33
the static error constant, Kv, which is inversely proportional to the steady-state
error, is 6.794. Thus, the addition of lead compensation has improved the
steady-state error by a factor of 2.122. Since the requirements of the problem
speciﬁed a tenfold improvement, the lag compensator must be designed to
improve the steady-state error by a factor of 4.713 10=2:122  4:713 over the
lead-compensated system.
Step 6 We arbitrarily choose the lag compensator pole at 0.01, which then places the lag
compensator zero at 0.04713, yielding
Glags  s  0:04713
s  0:01
9.34
as the lag compensator. The lag-lead-compensated system’s open-loop transfer
function is
GLLCs 
Ks  0:04713
ss  10s  29:1s  0:01
9.35
where the uncompensated system pole at 6 canceled the lead compensator
zero at 6. By drawing the complete root locus for the lag-lead-compensated
system and by searching along the 0.456 damping ratio line, we ﬁnd the
dominant, closed-loop poles to be at 3:574  j6:976, with a gain of 1971. The
lag-lead-compensated root locus is shown in Figure 9.41.
= 0.456
s-plane
–29.1
–31.91
–10
0
j
–0.0474
–0.01
0.04713
K = 1971
–3.574 + j6.976
117.13°
Compensated
dominant pole
 = Closed-loop pole
 = Open-loop pole  
Note: This figure is not drawn to scale.
𝜁
ω
σ
FIGURE 9.41
Root locus for
lag-lead-compensated system of
Example 9.6
482
Chapter 9
Design via Root Locus

A summary of our design is shown in Table 9.6. Notice that the lag-lead
compensation has indeed increased the speed of the system, as witnessed by the
settling time or the peak time. The steady-state error for a ramp input has also
decreased by about 10 times, as seen from e∞.
Step 7 The ﬁnal proof of our designs is shown by the simulations of Figures 9.42 and
9.43. The improvement in the transient response is shown in Figure 9.42, where
we see the peak time occurring sooner in the lag-lead-compensated system.
Improvement in the steady-state error for a ramp input is seen in Figure 9.43,
where each step of our design yields more improvement. The improvement for the
lead-compensated system is shown in Figure 9.43(a), and the ﬁnal improvement
due to the addition of the lag is shown in Figure 9.43(b).
(a)
(b)
Lead-compensated
Input
Uncompensated
0
5.0
4.5
4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0
0
5
c(t)
t
4
3
2
1
0
5.0
4.5
4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0
0
5
t
4
3
2
1
Time (seconds)
c(t)
Time (seconds)
Lag-lead-compensated
Input
FIGURE 9.43
Improvement
in ramp response error for
the system of Example 9.6:
a. lead-compensated;
b. lag-lead-compensated
Uncompensated
0
1.25
1.00
0.75
0.50
0.25
0
0
1
4
5
c(t)
2
3
Lead- and lag-lead-compensated
Time (seconds)
FIGURE 9.42
Improvement
in step response for lag-lead-
compensated system of
Example 9.6
9.4 Improving Steady-State Error and Transient Response
483

In the previous example, we canceled the system pole at 6 with the lead compensator
zero. The design technique is the same if you place the lead compensator zero at a different
location. Placing a zero at a different location and not canceling the open-loop pole yields a
system with one more pole than the example. This increased complexity could make it more
difﬁcult to justify a second-order approximation. In any case, simulations should be used at
each step to verify performance.
Notch Filter
If a plant, such as a mechanical system, has high-frequency vibration modes, then a desired
closed-loop response may be difﬁcult to obtain. These high-frequency vibration modes can be
modeled as part of the plant’s transfer function by pairs of complex poles near the imaginary
axis. In a closed-loop conﬁguration, these poles can move closer to the imaginary axis or even
cross into the right half-plane, as shown in Figure 9.44(a). Instability or high-frequency
oscillations superimposed over the desired response can result (see Figure 9.44(b)).
j
s-plane
Plant’s high-frequency poles
Plant’s poles
(a)
σ
ω
Response
Time
(b)
s-plane
j
(c)
ω
σ
j
s-plane
Notch filter zeros and
plant high-frequency poles
Plant’s poles
Notch filter poles
(d)
ω
σ
FIGURE 9.44
a. Root locus before cascading notch ﬁlter; b. typical closed-loop step response
before cascading notch ﬁlter; c. pole-zero plot of a notch ﬁlter; d. root locus after cascading notch ﬁlter;
(ﬁgure continues)
484
Chapter 9
Design via Root Locus

One way of eliminating the high-frequency oscillations is to cascade a notch ﬁlter2
with the plant (Kuo, 1995), as shown in Figure 9.44(c). The notch ﬁlter has zeros close to the
low-damping-ratio poles of the plant as well as two real poles. Figure 9.44(d) shows that the
root locus branch from the high-frequency poles now goes a short distance from the high-
frequency pole to the notch ﬁlter’s zero. The high-frequency response will now be negligible
because of the pole-zero cancellation (see Figure 9.44(e)). Other cascade compensators can
now be designed to yield a desired response. The notch ﬁlter will be applied to Progressive
Analysis and Design Problem 55 near the end of this chapter.
Response
Time
(e)
FIGURE 9.44
(Continued ) e. closed-loop step response after cascading notch ﬁlter
Skill-Assessment Exercise 9.3
PROBLEM: A unity feedback system with forward transfer function
Gs 
K
ss  7
is operating with a closed-loop step response that has 20% overshoot. Do the following:
a. Evaluate the settling time.
b. Evaluate the steady-state error for a unit ramp input.
c. Design a lag-lead compensator to decrease the settling time by 2 times and decrease the
steady-state error for a unit ramp input by 10 times. Place the lead zero at 3.
ANSWERS:
a. Ts  1:143 s
b. eramp∞  0:1189
c. Gcs  s  3s  0:092
s  9:61s  0:01 ;
K  205:4
The complete solution is at www.wiley.com/college/nise.
2 The name of this ﬁlter comes from the shape of its magnitude frequency response characteristics, which shows a dip
near the damped frequency of the high-frequency poles. Magnitude frequency response is discussed in Chapter 10.
9.4 Improving Steady-State Error and Transient Response
485

Before concluding this section, let us brieﬂy summarize our discussion of cascade
compensation. In Sections 9.2, 9.3, and 9.4, we used cascade compensators to improve
transient response and steady-state error. Table 9.7 itemizes the types, functions, and
characteristics of these compensators.
TABLE 9.7
Types of cascade compensators
Function
Compensator
Transfer function
Characteristics
Improve steady-state error
PI
K s  zc
s
1. Increases system type.
2. Error becomes zero.
3. Zero at zc is small and negative.
4. Active circuits are required to implement.
Improve steady-state error
Lag
K s  zc
s  pc
1. Error is improved but not driven to zero.
2. Pole at pc is small and negative.
3. Zero at zc is close to, and to the left of, the
pole at pc.
4. Active circuits are not required to implement.
Improve transient response
PD
Ks  zc
1. Zero at zc is selected to put design point on
root locus.
2. Active circuits are required to implement.
3. Can cause noise and saturation; implement
with rate feedback or with a pole (lead).
Improve transient response
Lead
K s  zc
s  pc
1. Zero at zc and pole at pc are selected to put
design point on root locus.
2. Pole at pc is more negative than zero at zc.
3. Active circuits are not required to implement.
Improve steady-state error and
transient response
PID
K s  zlags  zlead
s
1. Lag zero at zlag and pole at origin improve
steady-state error.
2. Lead zero at zlead improves transient response.
3. Lag zero at zlag is close to, and to the left of,
the origin.
4. Lead zero at zlead is selected to put design
point on root locus.
5. Active circuits required to implement.
6. Can cause noise and saturation; implement
with rate feedback or with an additional pole.
Improve steady-state error and
transient response
Lag-lead
K s  zlags  zlead
s  plags  plead
1. Lag pole at plag and lag zero at zlag are used
to improve steady-state error.
2. Lead pole at plead and lead zero at zlead are
used to improve transient response.
3. Lag pole at plag is small and negative.
4. Lag zero at zlag is close to, and to the left of,
lag pole at plag.
5. Lead zero at zlead and lead pole at plead are
selected to put design point on root locus.
6. Lead pole at plead is more negative than lead
zero at zlead.
7. Active circuits are not required to implement.
486
Chapter 9
Design via Root Locus

9.5 Feedback Compensation
In Section 9.4, we used cascade compensation as a way to improve transient response and
steady-state response independently. Cascading a compensator with the plant is not the only
way to reshape the root locus to intersect the closed-loop s-plane poles that yield a desired
transient response. Transfer functions designed to be placed in a feedback path can also
reshape the root locus. Figure 9.45 is a generic conﬁguration showing a compensator, Hc(s),
placed in the minor loop of a feedback control system. Other conﬁgurations arise if we
consider K unity, G2(s) unity, or both unity.
The design procedures for feedback compensation can be more complicated than for
cascade compensation. On the other hand, feedback compensation can yield faster
responses. Thus, the engineer has the luxury of designing faster responses into portions
of a control loop in order to provide isolation. For example, the transient response of the
ailerons and rudder control systems of an aircraft can be designed separately to be fast in
order to reduce the effect of their dynamic response on the steering control loop. Feedback
compensation can be used in cases where noise problems preclude the use of cascade
compensation. Also, feedback compensation may not require additional ampliﬁcation, since
the signal passing through the compensator originates at the high-level output of the forward
path and is delivered to a low-level input in the forward path. For example, let K and G2(s) in
Figure 9.45 be unity. The input to the feedback compensator, Kf Hc(s), is from the high-level
output of G1(s), while the output of Kf Hc(s) is one of the low-level inputs into K1. Thus, there
is a reduction in level through Kf Hc(s), and ampliﬁcation is usually not required.
A popular feedback compensator is a rate sensor that acts as a differentiator. In
aircraft and ship applications, the rate sensor can be a rate gyro that responds with an
output voltage proportional to the input angular velocity. In many other systems this
rate sensor is implemented with a tachometer. A tachometer is a voltage generator that
yields a voltage output proportional to input rotational speed. This compensator can
easily be geared to the position output of a system. Figure 9.46 is a position control
R(s)
K
Minor loop
K1
C(s)
G1(s)
G2(s)
  Hc (s)
–
+
–
+
Major loop
Kf
FIGURE 9.45
Generic
control system with feedback
compensation.
Inertia
Motor
Input
potentiometer
Tachometer
Output
potentiometer
Photo by Mark E. Van Dusen.
FIGURE 9.46
A position
control system that uses a
tachometer as a differentiator in
the feedback path. Can you see
the similarity between this
system and the schematic on the
front endpapers?
9.5 Feedback Compensation
487

system showing the gearing of the tachometer to the motor. You can see the input and
output potentiometers as well as the motor and inertial load. The block diagram
representation of a tachometer is shown in Figure 9.47(a), and its typical position within
a control loop is shown in Figure 9.47(b).
While this section shows methods for designing systems using rate feedback,
it also sets the stage for compensation techniques in Chapter 12, where not only rate
but all states including position will be fed back for proper control system performance.
We now discuss design procedures. Typically, the design of feedback compensation
consists of ﬁnding the gains, such as K, K1, and Kf in Figure 9.45, after establishing a
dynamic form for Hc(s). There are two approaches. The ﬁrst is similar to cascade
compensation. Assume a typical feedback system, where G(s) is the forward path and
H(s) is the feedback. Now consider that a root locus is plotted from G(s)H(s). With cascade
compensation we added poles and zeros to G(s). With feedback compensation, poles and
zeros are added via H(s).
With the second approach, we design a speciﬁed performance for the minor loop,
shown in Figure 9.45, followed by a design of the major loop. Thus, the minor loop, such as
ailerons on an aircraft, can be designed with its own performance speciﬁcations and operate
within the major loop.
Approach 1
The ﬁrst approach consists of reducing Figure 9.45 to Figure 9.48 by pushing K to
the right past the summing junction, pushing G2(s) to the left past the pickoff
point, and then adding the two feedback paths. Figure 9.48 shows that the loop
gain, G(s)H(s), is
GsHs  K1G1sKf Hcs  KG2s
9.36
Without feedback, Kf Hc(s), the loop gain is
GsHs  KK1G1sG2s
9.37
Thus, the effect of adding feedback is to replace the poles and zeros of G2(s) with the poles
and zeros of Kf Hcs  KG2s. Hence, this method is similar to cascade compensation in
that we add new poles and zeros via H(s) to reshape the root locus to go through the design
point. However, one must remember that zeros of the equivalent feedback shown in
Figure 9.48, Hs  Kf Hcs  KG2s=KG2s, are not closed-loop zeros.
R(s)
K
Tachometer
C(s)
i(s)
(a)
(b)
Vo(s)
K1
G1(s)
–
+
–
+
Kf s
Kf s
θ
FIGURE 9.47
a. Transfer
function of a tachometer;
b. tachometer feedback
compensation
KK1G1(s)G2(s)
KfHc(s) + KG2(s)
KG2(s)
R(s)
C(s)
–
+
FIGURE 9.48
Equivalent block
diagram of Figure 9.45
488
Chapter 9
Design via Root Locus

For example, if G2s  1 and the minor-loop feedback, Kf Hc(s), is a rate sensor,
Kf Hcs  Kf s, then from Eq. (9.36) the loop gain is
GsHs  Kf K1G1s s  K
Kf


9.38
Thus, a zero at K=Kf is added to the existing open-loop poles and zeros. This zero reshapes
the root locus to go through the desired design point. A ﬁnal adjustment of the gain, K1,
yields the desired response. Again, you should verify that this zero is not a closed-loop zero.
Let us look at a numerical example.
Example 9.7
Compensating Zero via Rate Feedback
Compensating Zero via Rate Feedback
PROBLEM: Given the system of Figure 9.49(a), design rate feedback compensation, as
shown in Figure 9.49(b), to reduce the settling time by a factor of 4 while continuing to
operate the system with 20% overshoot.
SOLUTION: First design a PD compensator. For the uncompensated system, search along
the 20% overshoot line ζ  0:456andﬁndthat the dominantpolesare at 1:809  j3:531,
as shown in Figure 9.50. The estimated speciﬁcations for the uncompensated system
–j20
–j10
j10
j20
j
20% OS
–20
–10
0
10
20
s-plane
–1.809 + j3.531  
K1 = 257.8
117.13°
σ
ω
FIGURE 9.50
Root locus for uncompensated system of
Example 9.7
–
+
K1
s(s + 5)(s + 15)
E(s)
C(s)
R(s)
(a)
(b)
(c)
(d)
–
+
s(s + 5)(s + 15)
C(s)
R(s)
–
+
s(s + 5)(s + 15)
C(s)
R(s)
–
+
s[s2 + 20s + (75 + K1Kf)]
E(s)
C(s)
R(s)
Kfs
–
+
1
Kf  s +    1
Kf
K1
K1
K1
FIGURE 9.49
a. System for Example 9.7; b. system with
rate feedback compensation; c. equivalent compensated
system; d. equivalent compensated system showing unity
feedback
9.5 Feedback Compensation
489

are shown in Table 9.8, and the step response is shown in Figure 9.51. The settling time
is 2.21 seconds and must be reduced by a factor of 4 to 0.55 second.
Next determine the location of the dominant poles for the compensated system. To
achieve a fourfold decrease in the settling time, the real part of the pole must be increased
by a factor of 4. Thus, the compensated pole has a real part of 41:809  7:236. The
imaginary part is then
ωd  7:236 tan 117:13°  14:12
9.39
where 117:13° is the angle of the 20% overshoot line.
Using the compensated dominant pole position of 7:236  j14:12, we sum the
angles from the uncompensated system’s poles and obtain 277:33°. This angle requires
a compensator zero contribution of 97:33° to yield 180° at the design point.
TABLE 9.8
Predicted characteristics of uncompensated and compensated systems of Example 9.7
Uncompensated
Compensated
Plant and compensator
K1
ss  5s  15
K1
ss  5s  15
Feedback
1
0:185s  5:42
Dominant poles
1:809  j3:531
7:236  j14:12
K1
257.8
1388
ζ
0.456
0.456
ωn
3.97
15.87
%OS
20
20
Ts
2.21
0.55
Tp
0.89
0.22
Kv
3.44
4.18
e∞ (ramp)
0.29
0.24
Other poles
16:4
5:53
Zero
None
None
Comments
Second-order approx. OK
Simulate
0
0.5
1.0
1.5
2.0
2.5
Time (seconds)
0.2
0
0.4
0.6
0.8
1.0
1.2
c(t)
3.0
FIGURE 9.51
Step response for uncompensated system of Example 9.7
490
Chapter 9
Design via Root Locus

The geometry shown in Figure 9.52 leads to the calculation of the
compensator’s zero location. Hence,
14:12
7:236  zc
 tan180°  97:33°
9.40
from which zc  5:42.
The root locus for the equivalent compensated system of Figure 9.49(c)
is shown in Figure 9.53. The gain at the design point, which is K1Kf
from Figure 9.49(c), is found to be 256.7. Since Kf is the reciprocal of
the compensator zero, Kf  0:185. Thus, K1  1388.
In order to evaluate the steady-state error characteristic, Kv is found
from Figure 9.49(d) to be
Kv 
K1
75  K1Kf
 4:18
9.41
Predicted performance for the compensated system is shown in
Table 9.8. Notice that the higher-order pole is not far enough away
from the dominant poles and thus cannot be neglected. Further, from
Figure 9.49(d), we see that the closed-loop transfer function is
Ts 
Gs
1  GsHs 
K1
s3  20s2  75  K1Kf s  K1
9.42
Thus, as predicted, the open-loop zero is not a closed-loop zero, and there is
no pole-zero cancellation. Hence, the design must be checked by simulation.
The results of the simulation are shown in Figure 9.54 and show
an over-damped response with a settling time of 0.75 second, compared
to the uncompensated system’s settling time of approximately 2.2
seconds. Although not meeting the design requirements, the response
still represents an improvement over the uncompensated system of
Figure 9.51. Typically, less overshoot is acceptable. The system should
be redesigned for further reduction in settling time.
You may want to do Problem 8 at the end of this chapter, where
you can repeat this example using PD cascade compensation. You will
see that the compensator zero for cascade compensation is a closed-loop
zero, yielding the possibility of pole-zero cancellation. However, PD
compensation is usually noisy and not always practical.
–7.236 –zc
j14.12
Compensator
zero
j
s-plane
σ
ω
97.33°
    = Closed-loop pole
FIGURE 9.52
Finding the compensator zero in
Example 9.7
–j20
–j10
j10
j20
–20
–10
0
j
s-plane
–7.236 + j14.12
K1 = 1388
117.13°
= 0.456
    = Closed-loop pole
    = Open-loop pole
𝜁
σ
ω
FIGURE 9.53
Root locus for the compensated
system of Example 9.7
0.5
0
1.0
c(t)
0
0.5
1.0
1.5
2.0
2.5
Time (seconds)
3.0
FIGURE 9.54
Step response
for the compensated system of
Example 9.7
9.5 Feedback Compensation
491

Approach 2
The second approach allows us to use feedback compensation to design a minor loop’s
transient response separately from the closed-loop system response. In the case of an
aircraft, the minor loop may control the position of the aerosurfaces, while the entire closed-
loop system may control the entire aircraft’s pitch angle.
We will see that the minor loop of Figure 9.45 basically represents a forward-path
transfer function whose poles can be adjusted with the minor-loop gain. These poles then
become the open-loop poles for the entire control system. In other words, rather than
reshaping the root locus with additional poles and zeros, as in cascade compensation, we can
actually change the plant’s poles through a gain adjustment. Finally, the closed-loop poles
are set by the loop gain, as in cascade compensation.
Example 9.8
Minor-Loop Feedback Compensation
Minor-Loop Feedback Compensation
PROBLEM: For the system of Figure 9.55(a), design minor-loop feedback compensa-
tion, as shown in Figure 9.55(b), to yield a damping ratio of 0.8 for the minor loop and a
damping ratio of 0.6 for the closed-loop system.
SOLUTION: Theminorloopisdeﬁnedastheloopcontainingtheplant,1=ss5s15,
and the feedback compensator, Kf s. The value of Kf will be adjusted to set the location of
the minor-loop poles, and then K will be adjusted to yield the desired closed-loop response.
The transfer function of the minor loop, GML(s), is
GMLs 
1
ss2  20s  75  Kf 
9.43
The poles of GML(s) can be found analytically or via the root locus. The root locus for the
minor loop, where Kf s=ss  5s  15 is the open-loop transfer function, is shown in
Figure 9.56. Since the zero at the origin comes from the feedback transfer function of the
minor loop, this zero is not a zero of the closed-loop transfer function of the minor loop.
Hence, the pole at the origin appears to remain stationary, and there is no pole-zero
cancellation at the origin. Equation (9.43) also shows this phenomenon. We see a
stationary pole at the origin and two complex poles that change with gain. Notice that
the compensator gain, Kf, varies the natural frequency, ωn, of the minor-loop poles as seen
s(s + 5)(s + 15)
R(s) +
–
K
+
–
C(s)
1
s(s + 5)(s + 15)
(a)
(b)
R(s) +
C(s)
K
E(s)
Kfs
–
FIGURE 9.55
a. Uncompensated system and b. feedback-compensated system for Example 9.8
492
Chapter 9
Design via Root Locus

from Eq. (9.43). Since the real parts of the complex poles are constant at ζωn  10, the
damping ratio must also be varying to keep 2ζωn  20, a constant. Drawing the ζ  0:8
line in Figure 9.56 yields the complex poles at 10  j7:5. The gain, Kf, which equals
81.25, places the minor-loop poles in a position to meet the speciﬁcations. The poles just
found, 10  j7:5, as well as the pole at the origin (Eq. (9.43)), act as open-loop poles that
generate a root locus for variations of the gain, K.
The ﬁnal root locus for the system is shown in Figure 9.57. The ζ  0:6 damping
ratio line is drawn and searched. The closed-loop complex poles are found to be
4:535  j6:046, with a required gain of 624.3. A third pole is at 10:93.
–j20
–j10
–20
j10
j20
= 0.8
j
10
20
–15
–5
0
s-plane
–10 + j7.5
Kf = 81.25
 = Closed-loop pole (minor loop)
 = Open-loop pole
143.13°
–10
𝜁
ω
σ
FIGURE 9.56
Root locus for
minor loop of Example 9.8
Virtual Experiment 9.2
Improving Performance
Using Rate Feedback with
PD or PID Control
Put theory into practice and
design a compensator in
LabVIEW that controls the ball
position in the Quanser
Magnetic Levitation system.
Magnetic Levitation
technology is used for modern
transportation systems that
suspend, such as the high-speed
Magnetic Levitation train.
Virtual experiments are found
on Learning Space.
= 0.6
j
–20
–10
10
20
–j5
0
j15
j20
–j15
–j20
– 4.535 + j6.046
K = 624.3
 = Closed-loop pole
 = Open-loop pole
s-plane
126.87°
j5
–10.93
–j10
j10
𝜁
ω
σ
FIGURE 9.57
Root locus for
closed-loop system of
Example 9.8
9.5 Feedback Compensation
493

The results are summarized in Table 9.9. We see that the compensated system,
although having the same damping ratio as the uncompensated system, is much faster and
also has a smaller steady-state error. The results, however, are predicted results and must
be simulated to verify percent overshoot, settling time, and peak time, since the third pole
is not far enough from the dominant poles. The step response is shown in Figure 9.58 and
closely matches the predicted performance.
TABLE 9.9
Predicted characteristics of the uncompensated and compensated systems of Example 9.8
Uncompensated
Compensated
Plant and compensator
K1
ss  5s  15
K
ss2  20s  156:25
Feedback
1
1
Dominant poles
1:997  j2:662
4:535  j6:046
K
177.3
624.3
ζ
0.6
0.6
ωn
3.328
7.558
%OS
9.48
9.48
Ts
2
0.882
Tp
1.18
0.52
Kv
2.364
3.996
e∞(ramp)
0.423
0.25
Other poles
16
10:93
Zero
None
None
Comments
Second-order approx. OK
Simulate
0
0
0.2
0.4
0.8
1.0
1.2
0.6
Time (seconds)
c(t)
0.2
0.4
0.6
0.8
1.0
1.2
FIGURE 9.58
Step response simulation for Example 9.8
Skill-Assessment Exercise 9.4
PROBLEM: For the system of Figure 9.59, design minor-loop rate feedback compensa-
tion to yield a damping ratio of 0.7 for the minor loop’s dominant poles and a damping
ratio of 0.5 for the closed-loop system’s dominant poles.
494
Chapter 9
Design via Root Locus

Our discussion of compensation methods is now complete. We studied both cascade
and feedback compensation and compared and contrasted them. We are now ready to show
how to physically realize the controllers and compensators we designed.
9.6 Physical Realization of Compensation
In this chapter, we derived compensation to improve transient response and steady-state
error in feedback control systems. Transfer functions of compensators used in cascade with
the plant or in the feedback path were derived. These compensators were deﬁned by their
pole-zero conﬁgurations. They were either active PI, PD, or PID controllers or passive lag,
lead, or lag-lead compensators. In this section, we show how to implement the active
controllers and the passive compensators.
Active-Circuit Realization
In Chapter 2, we derived
Vos
Vis   Z2s
Z1s
9.44
as the transfer function of an inverting operational ampliﬁer whose conﬁgura-
tion is repeated here in Figure 9.60. By judicious choice of Z1(s) and Z2(s), this
circuit can be used as a building block to implement the compensators and
controllers, such as PID controllers, discussed in this chapter. Table 9.10
summarizes the realization of PI, PD, and PID controllers as well as lag, lead,
ANSWER: The system is conﬁgured similar to Figure 9.55(b) with Kf  77:42 and
K  626:3.
The complete solution is at www.wiley.com/college/nise.
–
K
C(s)
+
R(s)
s(s + 7)(s + 10)
1
FIGURE 9.59
System for Skill-Assessment Exercise 9.4
+
–
Z1(s)
Z2(s)
I1(s)
V1(s)
Vo(s)
Vi(s)
Ia(s)
I2(s)
FIGURE 9.60
Operational ampliﬁer
conﬁgured for transfer function realization
TABLE 9.10
Active realization of controllers and compensators, using an operational ampliﬁer
Function
Z1s
Z2s
Gcs   Z2s
Z1s
Gain
R1
R2
 R2
R1
Integration
R
C

1
RC
s
Differentiation
C
R
RCs
(table continues)
9.6 Physical Realization of Compensation
495

and lag-lead compensators using operational ampliﬁers. You can verify the table by using
the methods of Chapter 2 to ﬁnd the impedances.
Other compensators can be realized by cascading compensators shown in the table. For
example, a lag-lead compensator can be formed by cascading the lag compensator with the lead
compensator,asshowninFigure9.61.Asanexample,letusimplementoneofthecontrollerswe
designed earlier in the chapter.
TABLE 9.10
Active realization of controllers and compensators, using an operational ampliﬁer
(Continued)
Function
Z1s
Z2s
Gcs   Z2s
Z1s
PI controller
R1
C
R2
 R2
R1
s 
1
R2C


s
PD controller
C
R1
R2
R2C s 
1
R1C


PID controller
C1
R1
C2
R2

R2
R1
 C1
C2


 R2C1s 
1
R1C2
s
2
664
3
775
Lag compensation
C1
R1
C2
R2
 C1
C2
s 
1
R1C1


s 
1
R2C2


where R2C2 > R1C1
Lead compensation
C1
R1
C2
R2
 C1
C2
s 
1
R1C1


s 
1
R2C2


where R1C1 > R2C2
+
–
vi(t)
vo(t)
R1
C1
R3
C3
R2
C2
Lag compensator
R2C2 > R1C1
Lead compensator
R3C3 > R4C4
+
–
R4
C4
FIGURE 9.61
Lag-lead compensator implemented with operational ampliﬁers
496
Chapter 9
Design via Root Locus

Passive-Circuit Realization
Lag, lead, and lag-lead compensators can also be implemented with passive networks.
Table 9.11 summarizes the networks and their transfer functions. The transfer functions can
be derived with the methods of Chapter 2.
The lag-lead transfer function can be put in the following form:
Gcs 
s  1
T1


s  1
T2


s  1
αT1


s  α
T2


9.50
where α < 1. Thus, the terms with T1 form the lead compensator, and the terms with T2 form
the lag compensator. Equation (9.50) shows a restriction inherent in using this passive
realization. We see that the ratio of the lead compensator zero to the lead compensator pole
Example 9.9
Implementing a PID Controller
Implementing a PID Controller
PROBLEM: Implement the PID controller of Example 9.5.
SOLUTION: The transfer function of the PID controller is
Gcs  s  55:92s  0:5
s
9.45
which can be put in the form
Gcs  s  56:42  27:96
s
9.46
Comparing the PID controller in Table 9.10 with Eq. (9.46), we obtain the following three
relationships:
R2
R1
 C1
C2
 56:42
9.47
R2C1  1
9.48
and
1
R1C2
 27:96
9.49
Since there are four unknowns and three equations, we arbitrarily
select a practical value for one of the elements. Selecting C2  0:1 μF, the
remaining values are found to be R1  357:65 kΩ, R2  178; 891 kΩ,
and C1  5:59 μF.
The complete circuit is shown in Figure 9.62, where the circuit
element values have been rounded off.
vi(t)
358 kΩ
179 kΩ
+
–
v1(t)
vo(t)
5.6 μF
0.1 μF
FIGURE 9.62
PID controller
9.6 Physical Realization of Compensation
497

must be the same as the ratio of the lag compensator pole to the lag compensator zero. In
Chapter 11 we design a lag-lead compensator with this restriction.
A lag-lead compensator without this restriction can be realized with an active network
as previously shown or with passive networks by cascading the lead and lag networks
shown in Table 9.11. Remember, though, that the two networks must be isolated to ensure
that one network does not load the other. If the networks load each other, the transfer
function will not be the product of the individual transfer functions. A possible realization
using the passive networks uses an operational ampliﬁer to provide isolation. The circuit is
shown in Figure 9.63. Example 9.10 demonstrates the design of a passive compensator.
TABLE 9.11
Passive realization of compensators
Function
Network
Transfer function, Vos
Vis
Lag compensation
vi(t)
R1
R2
C
vo(t)
+
+
–
–
R2
R1  R2
s 
1
R2C
s 
1
R1  R2C
Lead compensation
vi(t)
R1
R2
C
vo(t)
+
+
–
–
s 
1
R1C
s 
1
R1C 
1
R2C
Lag-lead compensation
vi(t)
R1
R2
C1
C2
vo(t)
+
+
–
–
s 
1
R1C1


s 
1
R2C2


s2 
1
R1C1

1
R2C2

1
R2C1


s 
1
R1R2C1C2
R4
R5
C2
R2
R1
R3
R3
C1
Lag
Isolation
gain = –1
Lead
+
–
+
–
vo(t)
vi(t)
–
+
FIGURE 9.63
Lag-lead compensator implemented with cascaded lag and lead networks with
isolation
498
Chapter 9
Design via Root Locus

Example 9.10
Realizing a Lead Compensator
Realizing a Lead Compensator
PROBLEM: Realize the lead compensator designed in Example 9.4 (Compensator b).
SOLUTION: The transfer function of the lead compensator is
Gcs 
s  4
s  20:09
9.51
Comparing the transfer function of a lead network shown in Table 9.11 with Eq. (9.51), we
obtain the following two relationships:
1
R1C  4
9.52
and
1
R1C 
1
R2C  20:09
9.53
Hence, R1C  0:25, and R2C  0:0622. Since there are three network elements and two
equations, we may select one of the element values arbitrarily. Letting C  1 μF, then R1 
250 kΩ and R2  62:2 kΩ.
Skill-Assessment Exercise 9.5
PROBLEM: Implement the compensators shown in a. and b. below. Choose a passive
realization if possible.
a. Gcs  s  0:1s  5
s
b. Gcs  s  0:1s  2
s  0:01s  20
ANSWERS:
a. Gc(s) is a PID controller and thus requires active realization. Use Figure 9.60 with
the PID controller circuits shown in Table 9.10. One possible set of approximate
component values is
C1  10 μF;
C2  100 μF;
R1  20 kΩ;
R2  100 kΩ
b. Gc(s) is a lag-lead compensator that can be implemented with a passive network
because the ratio of the lead pole to zero is the inverse of the ratio of the lag pole to
zero. Use the lag-lead compensator circuit shown in Table 9.11. One possible set of
approximate component values is
C1  100 μF;
C2  900 μF;
R1  100 kΩ;
R2  560 Ω
The complete solution is at www.wiley.com.college/nise.
9.6 Physical Realization of Compensation
499

Case Studies
Antenna Control: Lag-Lead Compensation
Antenna Control: Lag-Lead Compensation
For the antenna azimuth position control system case study in Chapter 8, we obtained a
25% overshoot using a simple gain adjustment. Once this percent overshoot was obtained,
the settling time was determined. If we try to improve the settling time by increasing the
gain, the percent overshoot also increases. In this section, we continue with the antenna
azimuth position control by designing a cascade compensator that yields 25% overshoot at
a reduced settling time. Further, we effect an improvement in the steady-state error
performance of the system.
PROBLEM: Given the antenna azimuth position control system shown on the
front endpapers, Conﬁguration 1, design cascade compensation to meet the following
requirements: (1) 25% overshoot, (2) 2-second settling time, and (3) Kv  20.
SOLUTION: For the case study in Chapter 8, a preampliﬁer gain of 64.21 yielded 25%
overshoot, with the dominant, second-order poles at 0:833  j1:888. The settling time
is thus 4=ζωn  4=:833  4:8 seconds. The open-loop function for the system as
derived in the case study in Chapter 5 is Gs  6:63K=ss  1:71s  100. Hence
Kv  6:63K=1:71  100  2:49. Comparing these values to this example’s problem
statement, we want to improve the settling time by a factor of 2.4, and we want
approximately an eightfold improvement in Kv.
Lead compensator design to improve transient response: First locate the dominant
second-order pole. To obtain a settling time, Ts, of 2 seconds and a percent overshoot of 25%,
the real part of the dominant second-order pole should be at 4=Ts  2. Locating the pole
on the 113:83° line (ζ  0:404, corresponding to 25% overshoot) yields an imaginary part
of 4.529 (see Figure 9.64).
Second, assume a lead compensator zero and ﬁnd the compensator pole. Assuming a
compensator zero at 2, along with the uncompensated system’s open-loop poles and
zeros, use the root locus program in Appendix H.2 at www.wiley.com/college/nise to ﬁnd
that there is an angular contribution of 120:14° at the design point of 2  j4:529.
Therefore, the compensator’s pole must contribute 120:14°  180°  59:86° for the
design point to be on the compensated system’s root locus. The geometry is shown in
Figure 9.64. To calculate the compensator pole, we use 4:529=pc  2  tan 59:86° or
pc  4:63.
59.86°
–1.71
–2
0
–100
113.83°
–2 + j4.529
j
–pc
s-plane
= Closed-loop pole
= Open-loop pole
Note: This figure is not drawn to scale.
= 0.404
𝜁
ω
σ
FIGURE 9.64
Locating
compensator pole
500
Chapter 9
Design via Root Locus

Now determine the gain. Using the lead-compensated system’s open-loop function,
Gs 
6:63Ks  2
ss  1:71s  100s  4:63
9.54
and the design point 2  j4:529 as the test point in the root locus program, the gain,
6.63K, is found to be 2549.
Lag compensator design to improve the steady-state error: Kv for the lead-
compensated system is found using Eq. (9.54). Hence,
Kv 
25492
1:711004:63  6:44
9.55
Since we want Kv  20, the amount of improvement required over the lead-compensated
system is 20=6:44  3:1. Choose pc  0:01 and calculate zc  0:031, which is 3.1 times
larger.
Determine gain: The complete lag-lead-compensated open-loop function, GLLC(s), is
GLLCs 
6:63Ks  2s  0:031
ss  :01s  1:71s  4:63s  100
9.56
Using the root locus program in Appendix H.2 at www.wiley.com/college/nise and
the poles and zeros of Eq. (9.56), search along the 25% overshoot line 113:83° for the
design point. This point has moved slightly with the addition of the lag compensator
to 1:99  j4:51. The gain at this point equals 2533, which is 6.63K. Solving for
K yields K  382:1.
Realization of the compensator: A realization of the lag-lead compensator is shown
in Figure 9.63. From Table 9.11 the lag portion has the following transfer function:
Glags 
R2
R1  R2
s 
1
R2C
s 
1
R1  R2C

R2
R1  R2
s  0:031
s  0:01
9.57
Selecting C  10 μF, we ﬁnd R2  3:2 MΩ and R1  6:8 MΩ.
From Table 9.11 the lead compensator portion has the following transfer function:
Gleads 
s 
1
R1C
s 
1
R1C 
1
R2C

s  2
s  4:63
9.58
Selecting C  10 μF, we ﬁnd R1  50 kΩ and R2  38 kΩ.
The total loop gain required by the system is 2533. Hence,
6:63K
R2
R1  R2
 2533
9.59
where K is the gain of the preampliﬁer, and R2=R1  R2 is the gain of the lag portion.
Using the values of R1 and R2 found during the realization of the lag portion, we ﬁnd
K  1194.
Case Studies
501

The ﬁnal circuit is shown in Figure 9.65, where the preampliﬁer is implemented with
an operational ampliﬁer whose feedback and input resistor ratio approximately equals
1194, the required preampliﬁer gain. The preampliﬁer isolates the lag and lead portions of
the compensator.
Summary of the design results: Using Eq. (9.56) along with K  382:1 yields the
compensated value of Kv. Thus,
Kv  lim
s®0 sGLLCs 
253320:031
0:011:714:63100  19:84
9.60
which is an improvement over the gain-compensated system in the case study of Chapter 8,
where Kv  2:49. This value is calculated from the uncompensated G(s) by letting
K  64:21, as found in the Case Study of Chapter 8.
Finally, checking the second-order approximation via simulation, we see in
Figure 9.66 the actual transient response. Compare this to the gain-compensated system
response of Figure 8.29 to see the improvement effected by cascade compensation over
simple gain adjustment. The gain-compensated system yielded 25%, with a settling time of
about 4 seconds. The lag-lead-compensated system yields 28% overshoot, with a settling
time of about 2 seconds. If the results are not adequate for the application, the system
should be redesigned to reduce the percent overshoot.
2
4
6
8
10
0.2
0.4
0.6
0.8
1.0
1.2
c(t)
Time (seconds)
0
0
FIGURE 9.66
Step response of lag-lead-compensated antenna control
+
–
+
–
vo(t)
vi(t)
3.2 MΩ
6.8 MΩ
10 MΩ
8.4 kΩ
38 kΩ
50 kΩ
10 F
10 F
–
+
μ
μ
FIGURE 9.65
Realization of lag-lead compensator
502
Chapter 9
Design via Root Locus

CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. You are given the antenna azimuth position control system shown on the
front endpapers, Conﬁguration 2. In the challenge in Chapter 8, you were asked to
design, via gain adjustment, an 8-second settling time.
a. For your solution to the challenge in Chapter 8, evaluate the percent overshoot and the
value of the appropriate static error constant.
b. Design a cascade compensator to reduce the percent overshoot by a factor of 4 and the
settling time by a factor of 2. Also, improve the appropriate static error constant by a
factor of 2.
c. Repeat Part b using MATLAB.
UFSS Vehicle: Lead and Feedback Compensation
UFSS Vehicle: Lead and Feedback Compensation
As a ﬁnal look at this case study, we redesign the pitch control loop for the UFSS vehicle.
For the case study in Chapter 8, we saw that rate feedback improved the transient response.
In this chapter’s case study, we replace the rate feedback with a cascade compensator.
PROBLEM: Given the pitch control loop without rate feedback K2  0 for the UFSS
vehicle shown on the back endpapers, design a compensator to yield 20% overshoot and
a settling time of 4 seconds (Johnson, 1980).
SOLUTION: First determine the location of the dominant closed-loop
poles. Using the required 20% overshoot and a 4-second settling time, a
second-order approximation shows the dominant closed-loop poles are
located at 1  j1:951. From the uncompensated system analyzed in
the Chapter 8 case study, the estimated settling time was 19.8 seconds
for dominant closed-loop poles of 0:202  j0:394. Hence, a lead
compensator is required to speed up the system.
Arbitrarily assume a lead compensator zero at 1. Using the root
locus program in Appendix H.2 at www.wiley.com/college/nise, we
ﬁnd that this compensator zero, along with the open-loop poles and
zeros of the system, yields an angular contribution at the design
point, 1  j1:951, of 178:92°. The difference between this angle
and 180°, or 1:08°, is the angular contribution required from the
compensator pole.
Using the geometry shown in Figure 9.67, where pc is the
compensator pole location, we ﬁnd that
1:951
pc  1  tan 1:08°
9.61
from which pc  104:5. The compensated open-loop transfer function is thus
Gs 
0:25K1s  0:435s  1
s  1:23s  2s2  0:226s  0:0169s  104:5
9.62
where the compensator is
Gcs 
s  1
s  104:5
9.63
Using all poles and zeros shown in Eq. (9.62), the root locus program shows that a
gain of 516.5 is required at the design point, 1  j1:951. The root locus of the
compensated system is shown in Figure 9.68.
1.08°
117.13°
–1    j1.951
+
j
–pc
= Closed-loop pole
= Open-loop pole
Note: This figure is not drawn to scale.
s-plane
= 0.456
0
ω
𝜁
σ
FIGURE 9.67
Locating compensator pole
Case Studies
503

Summary
In this chapter, we learned how to design a system to meet transient and steady-state
speciﬁcations. These design techniques overcame limitations in the design methodology
covered in Chapter 8, whereby a transient response could be created only if the poles
generating that response were on the root locus. Subsequent gain adjustment yielded the
A test of the second-order approximation shows three more closed-loop poles at
0:5, 0:9, and 104:5. Since the open-loop zeros are at 0:435 and 1, simulation is
required to see if there is effectively closed-loop pole-zero cancellation with the closed-
loop poles at 0:5 and 0:9, respectively. Further, the closed-loop pole at 104:5 is more
than ﬁve times the real part of the dominant closed-loop pole, 1  j1:951, and its effect on
the transient response is therefore negligible.
The step response of the closed-loop system is shown in Figure 9.69, where we see a
26% overshoot and a settling time of about 4.5 seconds. Comparing this response with
Figure 8.31, the response of the uncompensated system, we see considerable improvement
in the settling time and steady-state error. However, the transient response performance
does not meet the design requirements. Thus, a redesign of the system to reduce the
percent overshoot is suggested if required by the application.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. The heading control system for the UFSS vehicle is shown on the back
endpapers. The minor loop contains the rudder and vehicle dynamics, and the major
loop relates output and input headings (Johnson, 1980).
a. Find the values of K1 and K2 so that the minor-loop dominant poles have a damping
ratio of 0.6 and the major-loop dominant poles have a damping ratio of 0.5.
b. Repeat, using MATLAB.
j
Additional
open-loop pole
at –104.5
–3
–2
–1
1
0
j3
j2
j1
–j1
–j2
–j3
2
s-plane
σ
ω
FIGURE 9.68
Root locus for lead-compensated system
0
0
2
4
6
8
0.2
0.4
0.6
0.8
1.0
1.2
c(t)
Time (seconds)
10
FIGURE 9.69
Step response of lead-compensated UFSS vehicle
504
Chapter 9
Design via Root Locus

desired response. Since this value of gain dictated the amount of steady-state error in the
response, a trade-off was required between the desired transient response and the desired
steady-state error.
Cascade or feedback compensation is used to overcome the disadvantages of gain
adjustment as a compensating technique. In this chapter, we saw that the transient response
and the steady-state error can be designed separately from each other. No longer was a
trade-off between these two speciﬁcations required. Further, we were able to design for a
transient response that was not represented on the original root locus.
The transient response design technique covered in this chapter is based upon
reshaping the root locus to go through a desired transient response point, followed by a
gain adjustment. Typically, the resulting gain is much higher than the original if the
compensated system response is faster than the uncompensated response.
The root locus is reshaped by adding additional poles and zeros via a cascade or
feedback compensator. The additional poles and zeros must be checked to see that any
second-order approximations used in the design are valid. All poles, besides the dominant
second-order pair, must yield a response that is much faster than the designed response.
Thus, nondominant poles must be at least ﬁve times as far from the imaginary axis as the
dominant pair. Further, any zeros of the system must be close to a nondominant pole for
pole-zero cancellation, or far from the dominant pole pair. The resulting system can then be
approximated by two dominant poles.
The steady-state response design technique is based upon placing a pole on or near the
origin in order to increase or nearly increase the system type. Then a zero is placed near this
pole so that the effect upon the transient response is negligible. However, ﬁnal reduction of
steady-state error occurs with a long-time constant. The same arguments about other poles
yielding fast responses and about zeros being cancelled in order to validate a second-order
approximation also hold true for this technique. If the second-order approximations cannot
be justiﬁed, then a simulation is required to make sure the design is within tolerance.
Steady-statedesigncompensatorsareimplementedviaPIcontrollersorlagcompensators.
PI controllers add a pole at the origin, thereby increasing the system type. Lag compensators,
usually implemented with passive networks, place the pole off the origin but near it. Both
methods add a zero very close to the pole in order not to affect the transient response.
The transient response design compensators are implemented through PD controllers
or lead compensators. PD controllers add a zero to compensate the transient response; they
are considered ideal. Lead compensators, on the other hand, are not ideal since they add a
pole along with the zero. Lead compensators are usually passive networks.
We can correct both transient response and steady-state error with a PID or lag-lead
compensator. Both of these are simply combinations of the previously described compensators.
Table 9.7 summarized the types of cascade compensators.
Feedback compensation can also be used to improve the transient response. Here the
compensator is placed in the feedback path. The feedback gain is used to change the
compensator zero or the system’s open-loop poles, giving the designer a wide choice of
various root loci. The system gain is then varied to move along the selected root locus to the
design point. An advantage of feedback compensation is the ability to design a fast response
into a subsystem independently of the system’s total response.
In the next chapter, we look at another method of design, frequency response, which is
an alternate method to the root locus.
Review Questions
1. Brieﬂy distinguish between the design techniques in Chapter 8 and Chapter 9.
2. Name two major advantages of the design techniques of Chapter 9 over the design
techniques of Chapter 8.
Review Questions
505

3. What kind of compensation improves the steady-state error?
4. What kind of compensation improves transient response?
5. What kind of compensation improves both steady-state error and transient response?
6. Cascade compensation to improve the steady-state error is based upon what pole-zero
placement of the compensator? Also, state the reasons for this placement.
7. Cascade compensation to improve the transient response is based upon what pole-zero
placement of the compensator? Also, state the reasons for this placement.
8. What difference on the s-plane is noted between using a PD controller or using a lead
network to improve the transient response?
9. In order to speed up a system without changing the percent overshoot, where must the
compensated system’s poles on the s-plane be located in comparison to the
uncompensated system’s poles?
10. Why is there more improvement in steady-state error if a PI controller is used instead of a
lag network?
11. When compensating for steady-state error, what effect is sometimes noted in the
transient response?
12. A lag compensator with the zero 25 times as far from the imaginary axis as the
compensator pole will yield approximately how much improvement in steady-state error?
13. If the zero of a feedback compensator is at 3 and a closed-loop system pole is at 3:001,
can you say there will be pole-zero cancellation? Why?
14. Name two advantages of feedback compensation.
Problems
1. Design a PI controller to drive the step response error to
zero for the unity feedback system shown in Figure P9.1,
where
Gs 
K
s  1

2 s  10


The system operates with a damping ratio of 0.6.
Compare the speciﬁcations of the uncompensated
and compensated systems. [Section: 9.2]
R(s) +
C(s)
E(s)
G(s)
–
FIGURE P9.1
2. Consider
the
unity
feedback
system
shown
in
Figure P9.1, where
Gs 
K
ss  3s  6
a. Design a PI controller to drive the ramp response error
to zero for any K that yields stability. [Section: 9.2]
b. Use MATLAB to simulate your
design for K  1. Show both the
input ramp and the output
response on the same plot.
3. The unity feedback system shown in Figure P9.1 with
Gs 
K
s  2s  3s  7
is operating with 10% overshoot. [Section: 9.2]
a. What is the value of the appropriate static error
constant?
b. Find the transfer function of a lag network so that the
appropriate static error constant equals 4 without
appreciably changing the dominant poles of the
uncompensated system.
c. Use MATLAB or any other computer
program to simulate the system
to see the effect of your compensator.
4. Repeat Problem 3 for Gs
K
ss3s7. [Section: 9.2]
5. Consider the unity feedback system shown in
Figure P9.1 with
Gs 
K
s  3s  5s  7
506
Chapter 9
Design via Root Locus

a. Design a compensator that will yield Kp  20
without appreciably changing the dominant pole
location that yields a 10% overshoot for the
uncompensated system. [Section: 9.2]
b. Use MATLAB or any other computer
program to simulate the
uncompensated and compensated systems.
c. Use MATLAB or any other computer
program to determine how much
time it takes the slow response
of the lag compensator to bring the out-
put to within 2% of its ﬁnal compensated
value.
6. The unity feedback system shown in Figure P9.1 with
Gs 
Ks  6
s  2s  3s  5
is operating with a dominant-pole damping ratio of
0.707. Design a PD controller so that the settling time
is reduced by a factor of 2. Compare the transient and
steady-state performance of the uncompensated and
compensated systems. Describe any problems with
your design. [Section: 9.3]
7. Redo Problem 6 using MATLAB in
the following way:
a. MATLAB will generate the root locus for
the uncompensated system along with
the 0.707 damping ratio line. You will
interactively
select
the
operating
point. MATLAB will then inform you of
the
coordinates
of
the
operating
point,the gain at the operating point,
as well as the estimated %OS, Ts, Tp, ζ,
ωn, and Kp represented by a second-
order approximation at the operating
point.
b. MATLAB will display the step response
of the uncompensated system.
c. Without
further
input,MATLAB
will
calculate
the
compensated
design
point and will then ask you to input
a value for the PD compensator zero
from
the
keyboard.
MATLAB
will
respond with a plot of the root locus
showing
the
compensated
design
point. MATLAB will then allow you to
keep
changing
the
PD
compensator
value from the keyboard until a root
locus is plotted that goes through
the design point.
d. For the compensated system, MATLAB
will inform you of the coordinates
of the operating point,the gain at
the
operating
point,as
well
as
the estimated %OS, Ts, Tp,ζ, ωn,and
Kp
represented
by
a
second-order
approximation at the operating point.
e. MATLAB
will
then
display
the
step
response of the compensated system.
8. Design a PD controller for the system shown in
Figure P9.2 to reduce the settling time by a factor of
4 while continuing to operate the system with 20.5%
overshoot.Comparetheperformanceofthecompensated
system to that of the uncompensated system. Summarize
the results in a table similar to that in Example 9.7.
R(s)
C(s)
–
+
K
s(s + 8)(s + 25)
FIGURE P9.2
9. Consider the unity feedback system shown in
Figure P9.1 with [Section: 9.3]
Gs 
K
s  53
a. Find the location of the dominant poles to yield a
1.2 second settling time and an overshoot of 15%.
b. If a compensator with a zero at 1 is used to achieve
the conditions of Part a, what must the angular contri-
bution of the compensator pole be?
c. Find the location of the compensator pole.
d. Find the gain required to meet the requirements stated
in Part a.
e. Find the location of other closed-loop poles for the
compensated system.
f. Discuss
the
validity
of
your
second-order
approximation.
g. Use MATLAB or any other computer
program to simulate the
compensated system to check
your design.
10. The unity feedback system shown in Figure P9.1 with
Gs  K
s2
is to be designed for a settling time of 1.667 seconds and
a 16.3% overshoot. If the compensator zero is placed
at 1, do the following: [Section: 9.3]
a. Find the coordinates of the dominant poles.
b. Find the compensator pole.
(problem continues)
Problems
507

(Continued)
c. Find the system gain.
d. Find the location of all nondominant poles.
e. Estimate
the
accuracy
of
your
second-order
approximation.
f. Evaluate the steady-state error characteristics.
g. Use MATLAB or any other computer
program to simulate the system
and evaluate the actual
transient
response
characteristics
for a step input.
11. Given the unity feedback system of Figure P9.1, with
Gs 
Ks  6
s  3s  4s  7s  9
do the following: [Section: 9.3]
a. Sketch the root locus.
b. Find the coordinates of the dominant poles for which
ζ  0:8.
c. Find the gain for which ζ  0:8.
d. If the system is to be cascade-compensated so that
Ts  1 second and ζ  0:8, ﬁnd the compensator
pole if the compensator zero is at 4:5.
e. Discuss
the
validity
of
your
second-order
approximation.
f. Use MATLAB or any other computer
program to simulate the
compensated and uncompensated
systems and compare
the results
to
those expected.
12. Redo Problem 11 using MATLAB in
the following way:
a. MATLAB will generate the root locus for
the uncompensated system along with
the 0.8 damping ratio line. You will
interactively
select
the
operating
point. MATLAB will then inform you of
the
coordinates
of
the
operating
point, the gain at the operating point,
as
well
as
the
estimated
%OS,Ts,
Tp,ζ,ωn,and Kp represented by a second-
order approximation at the operating
point.
b. MATLAB will display the step response
of the uncompensated system.
c. Without
further
input,
MATLAB
will
calculate the compensated design point
and will then ask you to input a value
for the lead compensator pole from the
keyboard. MATLAB will respond with a
plot of the root locus showing the com-
pensated
design
point.
MATLAB
will
then allow you to keep changing the
lead compensator pole value from the
keyboard until a root locus is plotted
that goes through the design point.
d. For the compensated system, MATLAB
will inform you of the coordinates
of
the
operating
point,the
gain
at the operating point,as well as the
estimated %OS, Ts, Tp, ζ, ωn,and Kp
represented by a second-order approx-
imation at the operating point.
e. MATLAB
will
then
display
the
step
response of the compensated system.
f. Change the compensator’s zero location
a few times and collect data on the
compensated system to see if any other
choices
of
compensator
zero
yield
advantages over the original design.
13. Consider the unity feedback system of Figure P9.1 with
Gs 
K
ss  20s  40
The system is operating at 20% overshoot. Design a
compensator to decrease the settling time by a factor of
2 without affecting the percent overshoot and do the
following: [Section: 9.3]
a. Evaluate the uncompensated system’s dominant
poles, gain, and settling time.
b. Evaluate the compensated system’s dominant poles
and settling time.
c. Evaluate the compensator’s pole and zero. Find the
required gain.
d. Use MATLAB or any other computer
program to simulate the
compensated and uncompensated
systems’step response.
14. The unity feedback system shown in Figure P9.1 with
Gs 
K
s  15s2  6s  13
is operating with 30% overshoot. [Section: 9.3]
a. Find the transfer function of a cascade compensator,
the system gain, and the dominant pole location that
will cut the settling time in half if the compensator
zero is at 7.
b. Find other poles and zeros and discuss your second-
order approximation.
c. Use MATLAB or any other
computer program to simulate
508
Chapter 9
Design via Root Locus

both the uncompensated and compensated
systems
to
see
the
effect
of
your
compensator.
15. For the unity feedback system of Figure P9.1 with
Gs 
K
ss  1s2  10s  26
do the following: [Section: 9.3]
a. Find the settling time for the system if it is operating
with 15% overshoot.
b. Find the zero of a compensator and the gain, K, so that
the settling time is 7 seconds. Assume that the pole of
the compensator is located at 15.
c. Use MATLAB or any other computer
program to simulate the
system’s step response to test
the compensator.
16. A unity feedback control system has the following
forward transfer function: [Section: 9.3]
Gs 
K
s2s  4s  12
a. Design a lead compensator to yield a closed-loop step
response with 20.5% overshoot and a settling time of
3 seconds. Be sure to specify the value of K.
b. Is your second-order approximation valid?
c. Use MATLAB or any other
computer program to simulate
and compare the transient
response of the compensated system to
the predicted transient response.
17. For the unity feedback system of Figure P9.1, with
Gs 
K
s2  20s  101s  20
the damping ratio for the dominant poles is to be 0.4, and
the settling time is to be 0.5 second. [Section: 9.3]
a. Find the coordinates of the dominant poles.
b. Find the location of the compensator zero if the
compensator pole is at 15.
c. Find the required system gain.
d. Compare the performance of the uncompensated and
compensated systems.
e. Use MATLAB or any other computer
program to simulate the system
to check your design. Redesign
if necessary.
18. Consider the unity feedback system of Figure P9.1, with
Gs 
K
s  3s  5
a. Show that the system cannot operate with a settling
time of 2/3 second and a percent overshoot of 1.5 %
with a simple gain adjustment.
b. Design a lead compensator so that the system meets
the transient response characteristics of Part a.
Specify the compensator’s pole, zero, and the required
gain.
19. Given the unity feedback system of Figure P9.1 with
Gs 
K
s  2s  4s  6s  8
Find the transfer function of a lag-lead compensator
that will yield a settling time 0.5 second shorter than
that of the uncompensated system. The compensated
system also will have a damping ratio of 0.5, and
improve the steady-state error by a factor of 30. The
compensator zero is at 5. Also, ﬁnd the compensated
system’s gain. Justify any second-order approximations
or verify the design through simulation. [Section: 9.4]
20. Redo Problem 19 using a lag-lead
compensator and MATLAB in the
following way:
a. MATLAB will generate the root locus
for the uncompensated system along
with the 0.5 damping-ratio line. You
will interactively select the operat-
ing point. MATLAB will then proceed to
inform you of the coordinates of the
operating point,the gain at the oper-
ating point, as well as the estimated
%OS,Ts,Tp,ζ, ωn, and Kp represented by
a second-order approximation at the
operating point.
b. MATLAB will display the step response
of the uncompensated system.
c. Without
further
input,
MATLAB
will
calculate the compensated design point
and will then ask you to input a value
for the lead compensator pole from the
keyboard. MATLAB will respond with a
plot of the root locus showing the com-
pensated
design
point.
MATLAB
will
then allow you to keep changing the
lead compensator pole value from the
keyboard until a root locus is plotted
that goes through the design point.
d. For the compensated system, MATLAB will
inform you of the coordinates of the
operating point,the gain at the operat-
ing
point,as well as
the estimated
%OS,Ts,Tp,ζ,ωn, and Kp represented by a
Problems
509

second-order
approximation
at
the
operating point.
e. MATLAB
will
then
display
the
step
response of the compensated system.
f. Change the compensator’s zero location
a few times and collect data on the
compensated system to see if any other
choices of the compensator zero yield
advantages over the original design.
g. Using the steady-state error of the
uncompensated system, add a lag com-
pensator to yield an improvement of 30
times over the uncompensated system’s
steady-state
error,
with
minimal
effect
on
the
designed
transient
response. Have MATLAB plot the step
response. Try several values for the
lag compensator’s pole and see the
effect on the step response.
21. Given the uncompensated unity feedback system of
Figure P9.1, with
Gs 
K
ss  1s  3
do the following: [Section: 9.4]
a. Design a compensator to yield the following speciﬁ-
cations:
settling
time  2:86
seconds;
percent
overshoot  4:32%; the steady-state error is to be
improved by a factor of 2 over the uncompensated
system.
b. Compare the transient and steady-state error speciﬁca-
tions of the uncompensated and compensated systems.
c. Compare the gains of the uncompensated and
compensated systems.
d. Discuss
the
validity
of
your
second-order
approximation.
e. Use MATLAB or any other computer
program to simulate the
uncompensated and compensated
systems and verify the speciﬁcations.
22. For the unity feedback system given in Figure P9.1 with
Gs 
K
ss  5s  11
do the following: [Section: 9.4]
a. Find the gain, K, for the uncompensated system to
operate with 30% overshoot.
b. Find the peak time and Kv for the uncompensated
system.
c. Design a lag-lead compensator to decrease the peak
time by a factor of 2, decrease the percent overshoot
by a factor of 2, and improve the steady-state error by
a factor of 30. Specify all poles, zeros, and gains.
23. The unity feedback system shown in Figure P9.1 with
Gs 
K
s2  4s  8s  10
is to be designed to meet the following speciﬁcations:
Overshoot: Less than 22%
Settling time: Less than 1.6 seconds
Kp  15
Do the following: [Section: 9.4]
a. Evaluate the performance of the uncompensated
system operating at approximately 10% overshoot.
b. Design a passive compensator to meet the desired
speciﬁcations.
c. Use MATLAB to simulate the
compensated system. Compare
the
response
with
the
desired
speciﬁcations.
24. Consider the unity feedback system in Figure P9.1, with
Gs 
K
s  2s  4
The system is operated with 4.32% overshoot. In order to
improve the steady-state error, Kp is to be increased by at
least a factor of 5. A lag compensator of the form
Gcs  s  0:5
s  0:1
is to be used. [Section: 9.4]
a. Find the gain required for both the compensated and
the uncompensated systems.
b. Find the value of Kp for both the compensated and the
uncompensated systems.
c. Estimatethepercentovershootandsettlingtimeforboth
the compensated and the uncompensated systems.
d. Discuss the validity of the second-order approxima-
tion used for your results in Part c.
e. Use MATLAB or any other
computer program to simulate
the step response for the uncompen-
sated and compensated systems. What
do you notice about the compensated
system’s response?
f. Design a lead compensator that will correct the
objection you notice in Part e.
25. For the unity feedback system in Figure P9.1, with
Gs 
K
s  1s  3
design a PID controller that will yield a peak time of
1.122 seconds and a damping ratio of 0.707, with zero
error for a step input. [Section: 9.4]
510
Chapter 9
Design via Root Locus

26. Repeat Problem 25 for a peak time of 1.047 seconds, a
damping ratio of 0.5, zero steady-state error for a step
input, and with
G s  
K
s  1

2
27. For the unity feedback system in Figure P9.1, with
Gs 
K
s  4s  6s  10
do the following:
a. Design a controller that will yield no more than
25% overshoot and no more than a 2-second
settling time for a step input and zero steady-state
error for step and ramp inputs.
b. Use MATLAB and verify your
design.
28. Redo Problem 27 using MATLAB in
the following way:
a. MATLAB will ask for the desired per-
cent overshoot, settling time, and PI
compensator zero.
b. MATLAB will design the PD controller’s
zero.
c. MATLAB will display the root locus of
the PID-compensated system with the
desired percent overshoot line.
d. The user will interactively select the
intersection of the root locus and the
desired percent overshoot line.
e. MATLAB will display the gain and tran-
sient response characteristics of the
PID-compensated system.
f. MATLAB will display the step response
of the PID-compensated system.
g. MATLAB will display the ramp response
of the PID-compensated system.
29. If the system of Figure P9.3 operates with a damping
ratio of 0.456 for the dominant second-order poles,
ﬁnd the location of all closed-loop poles and zeros.
R(s) +
–
C(s)
K
(s2 + 2s + 0.36)
(s + 3)
(s + 2)
FIGURE P9.3
30. For the unity feedback system in Figure P9.1, with
Gs 
K
ss  2s  4s  6
do the following: [Section: 9.5]
a. Design rate feedback to yield a step response with
no more than 15% overshoot and no more than
3 seconds settling time. Use Approach 1.
b. Use MATLAB and simulate your
compensated system.
31. Given the system of Figure P9.4: [Section: 9.5]
R(s)
C(s)
–
+
K1
s(s + 2)(s + 5)
K
s + a
–
+
FIGURE P9.4
a. Design the value of K1, as well as a in the feedback
path of the minor loop, to yield a settling time of
4 seconds with 5% overshoot for the step response.
b. Design the value of K to yield a major-loop response
with 10% overshoot for a step input.
c. Use MATLAB or any other
computer program to simulate
the
step
response
to
the
entire
closed-loop system.
d. Add a PI compensator to reduce
the major-loop steady-state
error to zero and simulate the
step
response
using
MATLAB
or
any
other computer program.
32. Design a PI controller to drive the step-response error
to zero for the unity feedback system shown in
Figure P9.1, where
G s  
K
s  1

 s  3

 s  10


The system operates with a damping factor of
0.4. Design for each of the following two cases:
(1) compensator zero at 0.1, and (2) compensator
zero at 0.7.
Compare the speciﬁcations of the uncompensated
and each one of the compensated systems. Simulate
each one of the systems using any software program.
33. An inverted pendulum mounted on a motor-driven
cart was introduced in Problem 30 in Chapter 3.
Its state-space model was linearized around a station-
ary point, x0 = 0 (Prasad, 2012). At the stationary
point, the pendulum point-mass, m, is in the upright
position at t = 0, and the force applied to the cart, u0, is
0. Its model was then modiﬁed in Problem 55 in
Chapter 6 to have two output variables: the pendulum
angle relative to the y-axis, θ(t), and the horizontal
position of the cart, x(t). MATLAB was then used to
Problems
511

ﬁnd its eigenvalues. Noting that only one pole (out of
four) is located in the left half of the s-plane, we
concluded that this unit requires stabilization.
To accomplish stability and design an appropriate
control system, do the following:
a. Draw a signal-ﬂow diagram for
that unit and use it to develop
Simulink
models
for
two
feedback
systems:
one
to
control
the
cart
position, x(t), and the other to con-
trol the pendulum angle, θ(t). Set the
upper and lower saturation limits of
the second integrator in the angle
loop to 100 and 100, respectively,
and those limits in the position loop
to 10 and 10.
b. Use rate feedback with a gain of 12.5 to
stabilize the pendulum angle control
system.
The
forward
path
of
each
of these systems should include a PD
(proportional-plus-derivative) con-
troller that adjusts the force applied
to the cart, u(t). These controllers3
may be conﬁgured with the following
settings:4
P = 5, I = 0, and D = 5 for the cart
position controller
P = 2, I = 0, and D = 10 for the
pendulum angle controller
c. Utilizing scopes to capture the two
output responses, use a unit-impulse5
as the reference input in the angle
control loop and a unit-step source
(conﬁgured to start at t = 0 with a ﬁnal
value of 1) as the input for the cart
position control loop.
d. If either of the responses has a steady-
state error, e(∞)> 2%, a peak time,
TP > 1.2 seconds, or a percent overshoot,
%OS> 20.5%,suggestappropriatechanges
to its controller settings.
34. Identify and realize the following controllers with
operational ampliﬁers. [Section: 9.6]
a. s  0:01
s
b. s  2
35. Identify and realize the following compensators with
passive networks. [Section: 9.6]
a. s  0:1
s  0:01
b. s  2
s  5
c.
s  0:1
s  0:01


s  1
s  10


36. Repeat
Problem
35
using
operational
ampliﬁers.
[Section: 9.6]
DESIGN PROBLEMS
DESIGN PROBLEMS
37. The room temperature of an 11 m2 room is to be con-
trolled by varying the power of an indoor radiator.
For this speciﬁc room, the open-loop transfer function
from radiator power, _Qs, to temperature, T(s), is
(Thomas, 2005)
Gs  Ts
_Qs 
1  106s2  1:314  109s  2:66  1013
s3  0:00163s2  5:272  107s  3:538  1011
The system is assumed to be in the closed-loop
conﬁguration shown in Figure P9.1.
a. For a unit step input, calculate the steady-state error of
the system.
b. Try using the procedure of Section 9.2 to design a
PI controller to obtain zero steady-state error for
step inputs without appreciably changing the tran-
sient response. Then explain why it is not possible
to do so.
c. Design a PI controller of the form Gcs  Ks  z
s
that will reduce the step-response error to zero while
not changing signiﬁcantly the transient response.
(Hint: Place the zero of the compensator in a position
where the closed-loop poles of the uncompensated
root locus will not be affected signiﬁcantly.)
d. Use Simulink to simulate the
systems of Parts b and c and to
verify the correctness of your design
in Part c.
38. Figure P9.5 shows a two-tank system. The liquid
inﬂow to the upper tank can be controlled using a
valve and is represented by F0. The upper tank’s
outﬂow equals the lower tank’s inﬂow and is repre-
sented by F1. The outﬂow of the lower tank is F2. The
objective of the design is to control the liquid level,
y(t), in the lower tank. The open-loop transmission
for this system is
Ys
Fos 
a2a3
s2  a1  a4s  a1a4
(Romagnoli, 2006). The system will be controlled in
a loop analogous to that of Figure P9.1, where the lower
3 These are PID controllers, in which the integral actions are set to zero to
avoid any negative effect on stability.
4 Note that a high value for the derivative action of the angle controller and a
low value for its proportional gain have been selected to further stabilize the
pendulum.
5 To create a unit-impulse, use a unit-step source followed by a derivative block.
512
Chapter 9
Design via Root Locus

liquid level will be measured and compared to a set point.
The resulting error will be fed to a controller, which in
turn will open or close the valve feeding the upper tank.
F0
F1
F2
FIGURE P9.56
a. Assuming a1  0:04; a2  0:0187; a3  1; and a4 
0:227, design a lag compensator to obtain a step-
response steady-state error of 10% without affecting
the system’s transient response appreciably.
b. Verify your design through
MATLAB simulations.
39. Figure P9.6(a) shows a heat-exchanger process whose
purpose is to maintain the temperature of a liquid at a
prescribed temperature.
The temperature is measured using a sensor and a
transmitter, TT 22, that sends the measurement to a
corresponding controller,TC 22,that compares the actual
temperature with a desired temperature set point, SP. The
controller automatically opens or closes a valve to allow
or prevent the ﬂow of steam to change the temperature in
the tank. The corresponding block diagram for this
system is shown in Figure P9.6(b) (Smith, 2002).
Assume the following transfer functions:
Gvs  0:02
4s  1 ;
G1s 
70
50s  1 ;
Hs 
1
12s  1
a. Assuming Gcs  K, ﬁnd the value of K that will
result in a dominant pole with ζ  0:7. Obtain the
corresponding Ts.
b. Design a PD controller to obtain the same damping
factor as Part a but with a settling time 20% smaller.
c. Verify your results through
MATLAB simulation.
40. Repeat Problem 39, Parts b and c, using a lead
compensator.
SP
T
T(t)
Ti(t)
Steam
Process
fluid
Condensate
return
TC
22
TT
22
(a)
+
–
Gc(s)
Gv(s)
Gp(s)
H(s)
Compensator
Valve
Sensor
Heat exchanger
TSP(s)
T(s)
(b)
FIGURE P9.6
a. Heat-exchanger process;7 b. block diagram
6 Romagnoli, J.A., and Palazoglu. A. Introduction to Process Control. CRC
Press, Boca Raton, 2006. P. 44, Figure 3.4.
7 Smith, C.A. Automated Continuous Process Control. John Wiley & Sons,
New York, NY, 2002. p. 128, Figure 6-1.1.
Problems
513

41. a. Find the transfer function of a motor whose torque-
speed curve and load are given in Figure P9.7.
b. Design a tachometer compensator to yield a damping
ratio of 0.5 for a position control employing a power
ampliﬁer of gain 1 and a preampliﬁer of gain 5000.
c. Compare the transient and steady-state characteristics
of the uncompensated system and the compensated
system.
RPM
Torque
0.5 N-m
5V
60,000
0
0
2
Motor
4
4
10
5 kg-m2
1 N-m-s/rad
1
π
FIGURE P9.7
42. You are given the motor whose transfer function is
shown in Figure P9.8(a).
R(s) +
–
+
–
Kfs
Tachometer
C(s)
E(s)
K1
25
s(s + 2)
Motor
Amplifier
25
s(s + 2)
Ea(s)
o(s)
(a)
(b)
θ
FIGURE P9.8
a. If this motor were the forward transfer function of
a unity feedback system, calculate the percent over-
shoot and settling time that could be expected.
b. You want to improve the closed-loop response. Since
the motor constants cannot be changed and you
cannot use a different motor, an ampliﬁer and
tachometer are inserted into the loop as shown in
Figure P9.8(b). Find the values of K1 and Kf to yield
a percent overshoot of 15% and a settling time of
0.5 second.
c. Evaluate the steady-state error speciﬁcations for
both the uncompensated and the compensated
systems.
43. Apositioncontrolistobedesignedwitha20%overshoot
and a settling time of 2 seconds. You have on hand an
ampliﬁer and a power ampliﬁer whose cascaded transfer
function is K1=s  20 with which to drive the motor.
Two 10-turn pots are available to convert shaft position
into voltage. A voltage of  5π volts is placed across the
pots. A dc motor whose transfer function is of the form
θos
Eas 
K
ss  a
is also available. The transfer function of the motor is
found experimentally as follows: The motor and geared
load are driven open-loop by applying a large, short,
rectangular pulse to the armature. An oscillogram of the
response shows that the motor reached 63% of its ﬁnal
output value at 1/2 second after the application of the
pulse. Further, with a constant 10 volts dc applied to the
armature, the constant output speed was 100 rad/s.
a. Draw a complete block diagram of the system,
specifying the transfer function of each component
when the system is operating with 20% overshoot.
b. Whatwillthesteady-stateerrorbeforaunitrampinput?
c. Determine the transient response characteristics.
d. If tachometer feedback is used around the motor, as
shown in Figure P9.9, ﬁnd the tachometer and the
ampliﬁer gain to meet the original speciﬁcations.
Summarizethetransientandsteady-statecharacteristics.
R(s)
+
–
+
–
Kf
Tachometer
C(s)
K1
Amplifier
Pot
Motor
Power
amp
Pot
s
FIGURE P9.9
514
Chapter 9
Design via Root Locus

44. Apositioncontrolistobedesignedwitha10%overshoot,
a settling time of 1 second, and Kv  1000. You have on
hand an ampliﬁer and a power ampliﬁer whose cascaded
transfer function is K1=s  40 with which to drive the
motor. Two 10-turn pots are available to convert shaft
position into voltage. A voltage of  20π volts is placed
across the pots. A dc motor whose transfer function is of
the form
θos
Eas 
K
ss  a
isalso available. The following data are observed from
a dynamometer test at 50 V. At 25 N-m of torque, the
motor turns at 1433 rpm. At 75 N-m of torque,
the motor turns at 478 rpm. The speed measured at
the load is 0.1 that of the motor. The equivalent inertia,
including the load, at the motor armature is 100 kg-m2,
and the equivalent viscous damping, including the
load, at the motor armature is 50 N-m-s/rad.
a. Draw a complete block diagram of the system,
specifying the transfer function of each component.
b. Design
a
passive
compensator
to
meet
the
requirements in the problem statement.
c. Draw the schematic of the compensator showing all
component values. Use an operational ampliﬁer for
isolation where necessary.
d. Use MATLAB or any other computer
program to simulate your system
and show that all requirements
have been met.
45. Given the system shown in Figure P9.10, ﬁnd the
values of K and Kf so that the closed-loop dominant
poles will have a damping ratio of 0.5 and the under-
damped poles of the minor loop will have a damping
ratio of 0.8.
R(s)
+
–
K
+
–
Kf s
Tachometer
C(s)
E(s)
1
(s + 1)2(s + 5)
Amplifier
Power amplifier
and
plant
FIGURE P9.10
46. Given the system in Figure P9.11, ﬁnd the values of K
and Kf so that the closed-loop system will have a
4.32% overshoot and the minor loop will have a
damping
ratio
of
0.8.
Compare
the
expected
performance of the system without tachometer com-
pensation to the expected performance with tachometer
compensation.
R(s) +
–
K
+
–
Kf s
Tachometer
C(s)
E(s)
1
(s + 1)(s + 5)(s + 10)
Amplifier
Power amplifier
and plant
FIGURE P9.11
47. Steam-driven power generators rotate at a constant
speed via a governor that maintains constant steam
pressure in the turbine. In addition, automatic genera-
tion control (AGC) or load frequency control (LFC) is
added to ensure reliability and consistency despite
load variations or other disturbances that can affect
the distribution line frequency output. A speciﬁc
turbine-governor system can be described only using
the block diagram of Figure P9.1 in which Gs 
GcsGgsGtsGms, where (Khodabakhshian, 2005)
Ggs 
1
0:2s  1 is the governor’s transfer function
Gts 
1
0:5s  1 is the turbine transfer function
Gms 
1
10s  0:8 represents the machine and load
transfer functions
Gc(s) is the LFC compensation to be designed
a. Assuming Gcs  K, ﬁnd the value of K that will
result in a dominant pole with ζ  0:7. Obtain the
corresponding Ts .
b. Design a PID controller to obtain the same damp-
ing factor as in Part a, but with a settling time of 2
seconds and zero steady-state error to step input
commands.
c. Verify your results using a
MATLAB simuation.
48. Repeat Problem 47 using a lag-lead compensator instead
of a PID controller. Design for a steady-state error of 1%
for a step input command.
49. Digital versatile disc (DVD) players incorporate several
control systems for their operations. The control tasks
include (1) keeping the laser beam focused on the disc
surface, (2) fast track selection, (3) disc rotation speed
control, and (4) following a track accurately. In order
to follow a track, the pickup-head radial position is
controlled via a voltage that operates a voice coil
embedded in a magnet conﬁguration. For a speciﬁc
Problems
515

DVD player, the transfer function is given by
Ps  Xs
Vs

0:63
1  0:36
305:4 s 
s2
305:42


1  0:04
248:2 s 
s2
248:22


where xt  radial pickup position and vt  the coil
input voltage (Bittanti, 2002).
a. Assume that the system will be controlled in a
closed-loop conﬁguration, such as the one shown
in Figure P9.1. Assuming that the plant, P(s), is
cascaded
with
a
proportional
compensator,
Gcs  K, plot the root locus of the system.
b. Repeat Part a using MATLAB if
your root locus plot was
created by any other tool.
c. Find the range of K for closed-loop stability, the
resulting damping factor range, and the smallest
settling time.
d. Design a notch ﬁlter compensator so that the system’s
dominant poles have a damping factor of ζ  0:7 with
a closed-loop settling time of 0.1 second.
e. Simulate the system’s step
response for Part c using
MATLAB.
f. Add a PI compensator to the system to achieve zero
steady-state error for a step input without appreciably
affecting the transient response achieved in Part b.
g. Simulate the system’s step
response for Part e using
MATLAB.
50. A coordinate measuring machine (CMM) measures
coordinates on three-dimensional objects. The accuracy
of CMMs is affected by temperature changes as well as
by mechanical resonances due to joint elasticity. These
resonances are more pronounced when the machine
has to go over abrupt changes of dimension, such as
sharp corners at high speed. Each of the machine links
can be controlled in a closed-loop conﬁguration, such
as the one shown in Figure P9.12, designed for a
speciﬁc machine with prismatic (sliding) links. In the
ﬁgure, Xref(s) is the commanded position and X(s) is the
actualposition.Theminorloopusesatachometergenerator
to obtain the joint speed, while the main loop controls the
joint’s position (Özel, 2003).
a. Find the valueof Kthatwillresult inaminorloop with
ζ  0:5.
b. Use a notch ﬁlter compensator, Gc(s), for the external
loop so that it results in a closed-loop damping factor
of ζ  0:7 with Ts ≈4 seconds.
c. Use MATLAB to simulate the
compensated system’s closed-
loop step response.
51. An X-4 quadrotor ﬂyer is designed as a small-sized
unmanned autonomous vehicle (UAV) that ﬂies mainly
indoorsandcanhelpinsearchandrecognizancemissions.
To minimize mechanical problems and for simplicity,
thisaircraftusesﬁxedpitchrotorswithspeciallydesigned
blades. Therefore, for thrust it is necessary to add a ﬁfth
propeller.Asimpliﬁeddesign ofthe thrustcontroldesign
can be modeled as in Figure P9.1 with Gs  GcsPs
where
Ps 
1:90978
s
0:43  1


s
9:6  1


s
0:54  1


represents the dynamics of the thruster rotor gain, the
motor, and the battery dynamics. Initially, the system is
designed using a proportional compensator given by
Gcs  3 (Pounds, 2009).
a. Calculate the resulting steady-state error for a unit
step input.
+
–
+
–
Tachometer generator
Compensator
s(s2 + 14.24s + 3447.91)
0.0466s(s2 + 1.15s + 0.33)
Plant
Xref (s)
Gc(s)
K
574.98
X(s)
FIGURE P9.12
516
Chapter 9
Design via Root Locus

b. Design a lag compensator to yield half the steady-
state error of the proportional compensator, with-
out appreciably affecting the system’s transient
response.
c. Use MATLAB to simulate the
original design and the lag
compensated design. Verify your
results.
52. Problem 8.54 described an ac/dc conversion and
power distribution system for which droop control is
implemented through the use of a proportional
controller to stabilize the dc-bus voltage. For simpliﬁ-
cation, a system with only one source converter and one
load converter was considered. The parameters and
design considerations presented in that problem,
along with some solution results, allow us to represent
the block-diagram of that system as shown in the
Figure P9.13.
H (s)
Ev(s)
GC(s)
+
_
Vdc–ref (s)
VS–lp(s)
(s3 +1225s2 + 5030000s + 62500000)
125(s2 + 1225s + 2530000)
200
s + 200
Is–ref(s)
GP (s)
Vs (s)
FIGURE P9.13
Here Gc(s) is the transfer function of the controller,
Gp(s) represents the forward path of the controlled plant
(a conversion and power distribution unit), and H(s) is
the transfer function of the feedback low-pass ﬁlter
(Karlsson, 2003).
Prepare a table, such as Table 9.5, where the ﬁrst
column, headed Uncompensated, is ﬁlled in with your
results from the proportional design of Problem 8.54,
assuming an input step, vdcref t  750 ut.
Follow Steps 2–8 as described in Section 9.4
(Example 9.5), to design a proportional-plus-integral-
plus-derivative (PID) controller so that the system can
operate with a percent overshoot 4.4 %, a peak time
20% smaller than that of the uncompensated system,
and zero steady-state error, eVstep∞  0. Fill in the
remaining two columns of your table, PD-compensated
and PID-compensated.
53. Testing of hypersonic ﬂight is performed in wind tunnels
where maintaining a constant air pressure is important.
Air pressure control is accomplished in several stages.
For a speciﬁc setup, a simpliﬁed transfer function has
been found to be (Varghese, 2009)
P s 
M s  
2:369  106 s2  7:897  107 s  4:21  105
0:015s5  0:7802s4  9:89s3  18:46s2  3:377s  0:01937
where M(s) is the stem movement of a valve feeding
compressed air into the storage tank, and P(s) is the
settling chamber pressure.
In order to achieve steady-state error, design
a PI controller that operates with a damping factor
of 0.4. Compare the characteristics of the un-
compensated and compensated systems, and use a
computer program to simulate the step response to the
compensated system.
54. A metering pump is a pump capable of delivering a
precise ﬂow rate of ﬂuid. Most metering pumps consist
of an electric motor that varies the strike length of a
shaft, allowing more or less ﬂuid to pass through its
body. The control of such a valve has been considered
and the open-loop transfer function of the pump was
found to be (Yu, 2011)
U s 
Y s  
1:869
s2  12:32s  0:4582
where the output of the system, Y(s), represents the liquid
ﬂow, and the input, U(s), is the command signal to the
motor that varies the pump’s plunger strike length.
a. Design a PID controller to reduce the steady-state
error to zero with a maximum 5% overshoot and a
20% reduction in uncompensated settling time.
b. Findthe characteristicsof theuncompensated system.
c. Design a PID controller to reduce the steady-state
error to zero; achieve a maximum 5% overshoot and
a 20% reduction in uncompensated settling time.
d. Simulate the step response for the compensated
system to verify the validity of your design.
55. A linear model of the α-subsystem of a grid-connected
converter (Mahmood, 2012) with a Y-Y transformer was
presented as the plant in Problem 69 in Chapter 8. You
were asked to ﬁnd the transfer function of that plant,
GP s   Vα s 
Mα s  (see Figure P8.20(b)).
a. Use the results of your solution to Problem 69,
Chapter 8, to write the open-loop transfer function
inpole-zeroform withaunitygain. Then design aPID
controller to yield a zero steady-state error for a step
input with an overshoot of less than 10% and a natural
frequency of 135.3.
b. Plot the time response, c(t), marking on it all relevant
characteristics, such as the percent overshoot (if any),
rise time, settling time, and ﬁnal steady-state value.
Also ﬁnd all closed-loop poles of this system and the
velocity error constant, Kv. Do you have any observa-
tions about the time response and/or the poles?
Problems
517

56. Design a PID controller for the drive system of
Problem 56, Chapter 8, and shown in Figure P8.15
(Thomsen, 2011). Obtain an output response, ωL(t),
with an overshoot 15%, a settling time of preferably
0.2 second, but not more than 5 seconds, a zero
steady-state position error, and a velocity error of
< 2%, for a step input, ωr(t) = 260 u(t) rad/sec, applied
at t = 0.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
57. Control of HIV/AIDS. It was shown in Chapter 6,
Problem 68, that when the virus levels in an HIV/
AIDS patient are controlled using RTIs the linearized
plant model is
Ps  Ys
U1s 
520s  10:3844
s3  2:6817s2  0:11s  0:0126
Assume that the system is embedded in a conﬁguration,
such as the one shown in Figure P9.1, where
Gs  Gcs Ps. Here, Gc(s) is a cascade compen-
sator. For simplicity in this problem, choose the dc
gain of Gc(s) less than zero to obtain a negative-
feedback system (the negative signs of Gc(s) and P(s)
cancel out) (Craig, I. K., 2004).
a. Consider
the
uncompensated
system
with
Gcs  K. Find the value of K that will place
all closed-loop poles on the real axis.
b. Use MATLAB to simulate the
unit-step response of the
gain-compensated system. Note the %OS
and the Ts from the simulation.
c. Design a PI compensator so that the steady-state error
for step inputs is zero. Choose a gain value to make all
poles real.
d. Use MATLAB to simulate the
design in Part c for a unit step
input. Compare the simulation to Part b.
58. Hybrid vehicle. In the previous chapter, we used the
root locus to design a proportional controller for the
speed control of an HEV. We rearranged the block
diagram to be a unity feedback system, as shown in
the block diagram of Figure P7.31 (Preitl, 2007). The
plant and compensator resulted in
Gs 
Ks  0:60
s  0:5858s  0:0163
and we found that K = 0.78 resulted in a critically
damped system.
a. Use
this
design
to
itemize
the
performance
speciﬁcations byﬁlling in a table, similar to Table 9.5,
under the column Uncompensated. Take advantage
of the results from Chapter 8 or use MATLAB to ﬁnd
the entries. Plot c(t) for r(t) = 4 u(t) volts.
b. Now assume that the system
speciﬁcations require zero
steady-state error for step inputs,a
steady-state error for ramp inputs
 2%,a %OS  4.32%,and a settling time
4 sec. It should be evident that this
is not accomplished with a propor-
tional
controller.
Thus,
start
by
designing a PI controller to meet the
requirements. If necessary, add a PD
mode to get a PID controller. Simulate
your ﬁnal design using MATLAB. Fill in
the results of this design in the second
column of your table with the heading
Compensated.
c. Now note the following limitations of linear control
system modeling:
1. No limit is set on system variables. For example,
vehicle acceleration as well as motor and power
ampliﬁer current, torque or power do not have
upper limits.
2. It is assumed that to improve the speed of response
in Part b, we could place the PI controller’s zero on
top of the pole closest to the origin. Realistically,
such pole-zero cancellation is not always possible
to maintain.
If you do not expand your
model beyond the described
limitations if required for accu-
racy, unrealistic response char-
acteristics,
such
as
rise
and
settling times could result. Look
at your design results including
response curves. Are they realis-
tic? If not,revise your Simulink
model,which
you
developed
for
Problem
5.79,
according
to
the
following 4 steps:
i. Represent the motor armature as
a ﬁrst-order system with a unity
steady-state
gain
and
a
time
constant of 50 ms,which avoids
the creation of internal alge-
braic
closed-loops
and
should
have negligible effect on system
response;
518
Chapter 9
Design via Root Locus

ii. Add a saturation element at the
output of the motor armature and
set it to an upper limit of 250 A;
iii. Use the following PI settings. The
PI settings of the speed controller
are P = 61 and I = 0.795. The PI set-
tings of the torque controller are
P = 10 and I = 6;
iv. Run the modiﬁed model and comment on
the graphs obtained for motor cur-
rent, car acceleration, and speed.
59. Parabolic trough collector. The parabolic trough
collector (Camacho, 2012) is a Type 0 system as can
be seen from its transfer function,
G s  
137:2  106 K
s2  0:0224s  196  106 e39s
We want the system operating in the critically damped
mode, but with reduced steady-state error. Using the
root locus and a Padé approximation, esT 
1  T
2 s
1  T
2 s
,
do the following:
a. Substitute the Padé approximation for the delay and
ﬁnd the gain necessary to have the system operating
with a damping factor, ζ  0:5. Also, ﬁnd the
corresponding steady-state error.
b. Design a PI compensator to obtain a zero steady-state
error while maintaining ζ  0:5.
c. Simulate the resulting design
using MATLAB to verify your
design.
Cyber Exploration Laboratory
Experiment 9.1
Objectives
To perform a trade-off study for lead compensation. To design a PI
controller and see its effect upon steady-state error.
Minimum Required Software Packages
MATLAB, and the Control System
Toolbox
Prelab
1. How many lead compensator designs will meet the transient response speciﬁcations of a
system?
2. What differences do the lead compensators of Prelab 1 make?
3. Design a lead compensator for a unity negative feedback system with a forward transfer
function of Gs 
K
ss  3s  6 to meet the following speciﬁcations: percent
overshoot  20%; settling time  2 seconds. Specify the required gain, K. Estimate
the validity of the second-order approximation.
4. What is the total angular contribution of the lead compensator of Prelab 3?
5. Determine the pole and zero of two more lead compensators that will meet the
requirements of Prelab 3.
6. What is the expected steady-state error for a step input for each of the lead-compensated
systems?
7. What is the expected steady-state error for a ramp input for each of the lead-compensated
systems?
8. Select one of the lead compensator designs and specify a PI controller that can be
cascaded with the lead compensator that will produce a system with zero steady-state
error for both step and ramp inputs.
Cyber Exploration Laboratory
519

Lab
1. Using the SISO Design Tool, create the design in Prelab 3 and plot the root locus, step
response, and ramp response. Take data to determine the percent overshoot, settling
time, and step and ramp steady-state errors. Record the gain, K.
2. Repeat Lab 1 for each of the designs in Prelab 5.
3. For the design selected in Prelab 8, use the SISO Design Tool and insert the PI
controller. Plot the step response and measure the percent overshoot, settling time,
and steady-state error. Also, plot the ramp response for the design and measure the
steady-state error.
4. Plot the step and ramp responses for two more values of the PI controller zero.
Postlab
1. Make a table showing calculated and actual values for percent overshoot, settling
time, gain, K, steady-state error for step inputs, and steady-state error for ramp inputs.
Use the three systems without the PI controller and the single system with the PI
controller from Lab 3.
2. Itemize the beneﬁts of each system without the PI controller.
3. Choose a ﬁnal design and discuss the reasons for your choice.
Experiment 9.2
Objective
To design a PID controller via LabVIEW
Minimum Required Software Packages
LabVIEW with the Control Design
and Simulation Module
Prelab
1. Perform Cyber Exploration Laboratory Experiment 8.3.
2. Use the system described in Cyber Exploration Laboratory Experiment 8.3 and replace
the controller described there, Gcs  KDs  KP, with a PID controller.
3. Design the controller to meet the following requirements: (1) shorten the settling time
found in the design of Cyber Exploration Laboratory Experiment 8.3 to less than 1 sec.,
and (2) limit the percent overshoot to no more than 5%.
4. Design a LabVIEW VI to test your design. The front panel inputs will be the PID gains
and the numerator and denominator of the plant. The indicators will be the transfer
functions of the plant, PID controller, and closed-loop system. Finally, provide an
indicator for the step-response graph.
Lab
Run your LabVIEW VI and obtain the step response of the closed-loop system.
Postlab
Compare the transient and steady-state error performance between the
closed-loop step responses of Cyber Exploration Laboratory Experiment 8.3 and this
experiment.
Hardware Interface Laboratory
Experiment 9.3
Speed Control Using PI Control
Objectives
To control the speed of the motor in closed loop using integral control and
to investigate the tradeoffs of this approach
520
Chapter 9
Design via Root Locus

Material Required
Computer with LabView installed; myDAQ; dc brushed
gearmotor with Hall Sensor quadrature encoder (10V to +10V normal operation range);
and motor control chip BA6886N (or a transistor circuit substitute)
Files Provided at www.wiley.com/college/nise
Speed PI Control.vi
Signal Conditioning (SubVI).vi
PI Controller (SubVI).vi
Prelab
Answer the following questions:
+
–
R(s)
KI
s
K
C (s)
st + 1
FIGURE P9.14
For the system shown in Figure P9.14, do the following:
1. Find the closed-loop transfer function from R(s) to C(s).
2. Draw the root locus as a function of KI.
3. Draw the unit-step response marking the settling time, peak time, and maximum output.
Find all the possibilities: overdamped, critically damped, and underdamped.
4. Find an expression for the steady-state error for a unit-step input.
Lab
Software:
Use the Speed PI Control.vi and change the constant on the left to ﬁt your
motor’s gear ratio and encoder CPR as shown in Figure P9.15(b). Also change the
constants wired to the PI controller. These values should be the maximum motor voltage-
dead-zone constant. Change the dead-zone constants inside the signal conditioning block
just as you did in Experiment 8.4.
FIGURE P9.15
Speed PI Control.vi: a. Front Panel; (ﬁgure continues)
Hardware Interface Laboratory
521

Hardware:
Same as Experiment 8.4
Procedure:
1. Make the P gain = 0, and choose a small I gain. Verify the operation of your closed-loop
system. In this experiment we will keep the P gain at 0.
2. Draw a functional block diagram (similar to that presented in Chapter 1) of the
system. Do not include the signal conditioning functions, nor the change-of-
direction signals.
3. Using the transfer function you found in Experiment 4.6, draw the system’s
root locus.
4. Find the theoretical range of KI in which the system is closed-loop stable.
5. Run your program and system to ﬁnd experimentally the range of KI in which the system
is closed-loop stable.
6. Make a judicious choice of three different values of KI for experimentation.
7. Using the transfer function you found in Experiment 8.4 and the three judicious choices
of proportional gain, complete the following table using hand calculations only
(calculators OK, computer simulations are not acceptable). Show all your work.
KI
TP—Peak time
%OS—Percent overshoot
Ts—Settling time
ess—Steady-state error (step input)
Theoretical
8. For each one of the three values of KI, perform step-input experiments. Use a single
value of step input for the three values of KI. Make sure that your oscilloscope captures
contain the system’s transient response in its entirety. Show measurements of all the
parameters in the Theoretical table above and ﬁll in the following Experimental table.
Please note that Ts, the settling time, is hard to measure in the current setting because of
FIGURE P9.15
(Continued) b. Block Diagram
522
Chapter 9
Design via Root Locus

Bibliography
Bittanti, S., Dell’Orto, F., Di Carlo, A., and Savaresi, S. M. Notch Filtering and Multirate Control for
Radial Tracking in High Speed DVD-Players. IEEE Transactions on Consumer Electronics,
vol. 48, 2002, pp. 56–62.
Budak, A. Passive and Active Network Analysis and Synthesis. Houghton Mifﬂin, Boston, MA, 1974.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
Craig, J. J. Introduction to Robotics. Mechanics and Control, 3d ed. Prentice Hall, Upper Saddle
River, NJ, 2005.
D'Azzo, J. J., and Houpis, C. H. Feedback Control System Analysis and Synthesis, 2d ed. McGraw-Hill,
New York, 1966.
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989.
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed.
Saunders College Publishing, New York, 1989.
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980.
Karlsson, P., and Svensson, J. DC Bus Voltage Control for a Distributed Power System, IEEE
Trans. on Power Electronics, vol. 18, no. 6, 2003, pp. 1405–1412.
Khodabakhshian, A., and Golbon, N. Design of a New Load Frequency PID Controller Using
QFT. Proceedings of the 13th Mediterranean Conference on Control and Automation, 2005,
pp. 970–975.
Kuo, B. C. Automatic Control Systems, 7th ed. Prentice Hall, Upper Saddle River, NJ, 1995.
Mahmood, H., and Jiang, J. Modeling and Control System Design of a Grid Connected VSC
Considering the Effect of the Interface Transformer Type. IEEE Transactions on Smart Grid,
vol. 3, no. 1, March 2012, pp. 122–134.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Özel, T. Precision Tracking Control of a Horizontal Arm Coordinate Measuring Machine.
Proceedings of the IEEE Conference on Control Applications, 2003, pp. 103–108.
Pounds, P. E. I., Mahony, R. E., and Corke, P. I. Design of a Static Thruster for Microair Vehicle
Rotorcraft. Journal of Aerospace Engineering, vol. 22, no. 1, 2009, pp. 85–94.
the limited number of analog channels available. Instead of measuring Ts, mark on
your oscilloscope the theoretical value using the scope cursors. (Important: In this
experiment stop the VI before restarting it every time you apply a step input. This
action will reset the integrator).
KI
Tp—Peak time
%OS—Percent overshoot
ess—Steady-state error (step input)
Experimental
Postlab
Make a detailed comparison of your theoretical and experimental tables.
Discuss similarities and discrepancies between experimental and theoretical and give
possible reasons.
Bibliography
523

Prasad, L., Tyagi, B., and Gupta, H. Modeling & Simulation for Optimal Control of Nonlinear
Inverted Pendulum Dynamical System using PID Controller & LQR. IEEE Computer Society
Sixth Asia Modeling Symposium, 2012, pp. 138–143.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in
Hybrid Vehicles. Fourth International Symposium on Applied Computational Intelligence and
Informatics. IEEE. 2007, pp. 157–162.
Romagnoli, J. A., and Palazoglu, A. Introduction to Process Control. CRC Press, Boca Raton, FL,
2006.
Smith, C. A. Automated Continuous Process Control. Wiley, New York, 2002.
Thomas, B., Soleimani-Mosheni, M., and Fahlén, P. Feed-forward in Temperature Control of
Buildings. Energy and Buildings, vol. 37, 2005, pp. 755–761.
Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-Based State Space Control, and
Model-Based Predictive Control for Drive Systems With Elastically Coupled Loads—A
Comparative Study. IEEE Transactions On Industrial Electronics, vol. 58, no. 8, August
2011, pp. 3647–3657.
Van de Vegte, J. Feedback Control Systems, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Varghese, J., and Binu, L. S. Adaptive Fuzzy PI Controller for Hypersonic Wind Tunnel Pressure
Regulation. 10th National Conference on Technological Trends (NCTT09), Nov. 6–7, 2009,
pp. 184–187.
Yu, S., Wu, J., and Zhang, D. Robust Non-fragile PID Controller Design for the Stroke Regulation
of Metering Pumps. Chinese Journal of Chemical Engineering, vol. 19, no. 1, 2011, pp. 83–88.
524
Chapter 9
Design via Root Locus

Frequency Response
Techniques
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Deﬁne and plot the frequency response of a system (Section 10.1)
• Plot asymptotic approximations to the frequency response of a system
(Section 10.2)
• Sketch a Nyquist diagram (Section 10.3–10.4)
• Use the Nyquist criterion to determine the stability of a system (Section 10.5)
• Find stability and gain and phase margins using Nyquist diagrams and Bode
plots (Sections 10.6–10.7)
• Find the bandwidth, peak magnitude, and peak frequency of a closed-loop
frequency response given the closed-loop time response parameters of peak
time, settling time, and percent overshoot (Section 10.8)
• Find the closed-loop frequency response given the open-loop frequency
response (Section 10.9)
• Find the closed-loop time response parameters of peak time, settling
time, and percent overshoot given the open-loop frequency response
(Section 10.10)

10
525

Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with a
case study as follows:
• Given the antenna azimuth position control system shown on the front
endpapers and using frequency response methods, you will be able to ﬁnd
the range of gain, K, for stability. You will also be able to ﬁnd percent
overshoot, settling time, peak time, and rise time, given K.
10.1 Introduction
The root locus method for transient design, steady-state design, and stability was covered in
Chapters 8 and 9. In Chapter 8, we covered the simple case of design through gain
adjustment, where a trade-off was made between a desired transient response and a desired
steady-state error. In Chapter 9, the need for this trade-off was eliminated by using
compensation networks so that transient and steady-state errors could be separately
speciﬁed and designed. Further, a desired transient response no longer had to be on the
original system’s root locus.
This chapter and Chapter 11 present the design of feedback control systems through
gain adjustment and compensation networks from another perspective—that of frequency
response. The results of frequency response compensation techniques are not new or
different from the results of root locus techniques.
Frequency response methods, developed by Nyquist and Bode in the 1930s, are
older than the root locus method, which was discovered by Evans in 1948 (Nyquist,
1932; Bode, 1945). The older method, which is covered in this chapter, is not as intuitive
as the root locus. However, frequency response yields a new vantage point from which to
view feedback control systems. This technique has distinct advantages in the following
situations:
1. When modeling transfer functions from physical data, as shown in Figure 10.1
2. When designing lead compensators to meet a steady-state error requirement and a
transient response requirement
3. When ﬁnding the stability of nonlinear systems
4. In settling ambiguities when sketching a root locus
FIGURE 10.1
National
Instruments PXI, Compact RIO,
Compact DAQ, and USB
hardware plantforms (shown
from left to right) coupled with
NI LabVIEW software to
provide stimulus and acquire
signals from physical systems.
NI LabVIEW can then be used
to analyze data, determine the
mathematical model, and
prototype and deploy a
controller for the physical
system
526
Chapter 10
Frequency Response Techniques

We ﬁrst discuss the concept of frequency response, deﬁne frequency response, derive
analytical expressions for the frequency response, plot the frequency response, develop
ways of sketching the frequency response, and then apply the concept to control system
analysis and design.
The Concept of Frequency Response
In the steady state, sinusoidal inputs to a linear system generate sinusoidal responses of the
samefrequency.Eventhoughtheseresponsesareofthesamefrequencyastheinput,theydiffer
in amplitude and phase angle from the input. These differences are functions of frequency.
Before deﬁning frequency response, let us look at a convenient representation of
sinusoids. Sinusoids can be represented as complex numbers called phasors. The
magnitude of the complex number is the amplitude of the sinusoid, and the angle of
the complex number is the phase angle of the sinusoid. Thus, M1 cos ωt  ϕ1 can be
represented as M1  ϕ1 where the frequency, ω, is implicit.
Since a system causes both the amplitude and phase angle of the input to be
changed, we can think of the system itself as represented by a complex number, deﬁned
so that the product of the input phasor and the system function yields the phasor
representation of the output.
Consider the mechanical system of Figure 10.2(a). If the input force, f(t), is sinusoidal,
the steady-state output response, x(t), of the system is also sinusoidal and at the same
frequency as the input. In Figure 10.2(b) the input and output sinusoids are represented by
complex numbers, or phasors, Miω ϕiω and Moω ϕo ω, respectively. Here, the M’s
are the amplitudes of the sinusoids and the ϕ’s are the phase angles of the sinusoids as shown
in Figure 10.2(c). Assume that the system is represented by the complex number,
Mω ϕω. The output steady-state sinusoid is found by multiplying the complex number
representation of the input by the complex number representation of the system. Thus, the
steady-state output sinusoid is
Moωϕoω  MiωMωϕiω  ϕω
(10.1)
f(t) = Mi cos(ωt+ϕi)
o(ω)
(ω)
 Mass
Viscous damper
Spring
(a)
Input
t
x(t)
(c)
Mi(ω)
i(ω)
M(ω)
Mo(ω)
Mo = Mi M
f(t)
i
o =
  i  +
Mi
t
Output
(b)
x (t) = Mo cos(ω + ϕo) 
ϕ
ϕ
ϕ
ϕ
ϕ
ϕ
FIGURE 10.2
Sinusoidal
frequency response: a. system;
b. transfer function; c. input and
output waveforms
10.1 Introduction
527

From Eq. (10.1) we see that the system function is given by
Mω  Moω
Miω
(10.2)
and
ϕω  ϕoω 
 ϕiω
(10.3)
Equations (10.2) and (10.3) form our deﬁnition of frequency response. We call Mω the
magnitude frequency response and ϕω the phase frequency response. The combination
of the magnitude and phase frequency responses is called the frequency response and
is Mωϕω.
In other words, we deﬁne the magnitude frequency response to be the ratio of the
output sinusoid’s magnitude to the input sinusoid’s magnitude. We deﬁne the phase response
to be the difference in phase angle between the output and the input sinusoids. Both
responses are a function of frequency and apply only to the steady-state sinusoidal response
of the system.
Analytical Expressions for Frequency Response
Now that we have deﬁned frequency response, let us obtain the analytical expression for
it (Nilsson, 1990). Later in the chapter, we will use this analytical expression to
determine stability, transient response, and steady-state error. Figure 10.3 shows a
system, G(s), with the Laplace transform of a general sinusoid, rt  A cos ωt
 B sin ωt 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
A2  B2
p
cos ωt 
 tan
 1B=A as the input. We can represent the input as
aphasorinthreeways: (1)inpolarform,Miϕi,whereMi 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
A2  B2
p
andϕi  
tan
 1B=A;
(2) in rectangular form, A 
 jB; and (3) using Euler’s formula, Mie jϕi.
We now solve for the forced response portion of C(s), from which we evaluate the
frequency response. From Figure 10.3,
Cs  As  Bω
s2  ω2 Gs
(10.4)
We separate the forced solution from the transient solution by performing a partial-fraction
expansion on Eq. (10.4). Thus,
Cs 
As  Bω
s  jωs 
 jω Gs

K1
s  jω 
K2
s 
 jω  Partial fraction terms from Gs
(10.5)
where
K1  As  Bω
s 
 jω Gs

s ® 
jω  1
2 A  jBG
jω  1
2 Mie
jϕiMGe
jϕG
 MiMG
2
e
jϕiϕG
(10.6a)
K2  As  Bω
s  jω Gs

s ® jω  1
2 A 
 jBG jω  1
2 Mie jϕiMGe jϕG
 MiMG
2
e jϕiϕG  K*
1
(10.6b)
For Eqs. (10.6), K*
1 is the complex conjugate of K1,
MG  jG jωj
(10.7)
As + Bω
s2 + ω2
G(s) 
C(s) 
R(s) = 
FIGURE 10.3
System with
sinusoidal input
528
Chapter 10
Frequency Response Techniques

and
ϕG  angle of G jω
(10.8)
The steady-state response is that portion of the partial-fraction expansion that comes
from the input waveform’s poles, or just the ﬁrst two terms of Eq. (10.5). Hence, the
sinusoidal steady-state output, Css(s), is
Csss 
K1
s  jω 
K2
s 
 jω
(10.9)
Substituting Eqs. (10.6) into Eq. (10.9), we obtain
Csss 
MiMG
2
e
jϕiϕG
s  jω

MiMG
2
e jϕiϕG
s 
 jω
(10.10)
Taking the inverse Laplace transformation, we obtain
ct  MiMG
e
jωtϕiϕG  ejωtϕiϕG
2


 MiMG cos ωt  ϕi  ϕG
(10.11)
which can be represented in phasor form as Moϕo  M1ϕ1MGϕG, where MGϕG
is the frequency response function. But from Eqs. (10.7) and (10.8), MGϕG  G jω. In
other words, the frequency response of a system whose transfer function is G(s) is
G jω  Gsjs ® jω
(10.12)
Plotting Frequency Response
G jω  MGω < ϕGω can be plotted in several ways; two of them are (1) as a function
of frequency, with separate magnitude and phase plots; and (2) as a polar plot, where the
phasor length is the magnitude and the phasor angle is the phase. When plotting separate
magnitude and phase plots, the magnitude curve can be plotted in decibels (dB) vs. log ω,
where dB  20 log M.1 The phase curve is plotted as phase angle vs. log ω. The motivation
for these plots is shown in Section 10.2.
Using the concepts covered in Section 8.1, data for the plots also can be obtained
using vectors on the s-plane drawn from the poles and zeros of G(s) to the imaginary axis.
Here the magnitude response at a particular frequency is the product of the vector lengths
from the zeros of G(s) divided by the product of the vector lengths from the poles of G(s),
drawn to points on the imaginary axis. The phase response is the sum of the angles from the
zeros of G(s) minus the sum of the angles from the poles of G(s) drawn to points on the
imaginary axis. Performing this operation for successive points along the imaginary axis
yields the data for the frequency response. Remember, each point is equivalent to
substituting that point, s  jω1, into G(s) and evaluating its value.
The plots also can be made from a computer program that calculates the frequency
response. For example, the root locus program discussed in Appendix H at www.wiley.com/
college/nise can be used with test points that are on the imaginary axis. The calculated K
value at each frequency is the reciprocal of the scaled magnitude response, and the
calculated angle is, directly, the phase angle response at that frequency.
The following example demonstrates how to obtain an analytical expression for
frequency response and make a plot of the result.
1 Throughout this book, “log” is used to mean log10, or logarithm to the base 10.
10.1 Introduction
529

Example 10.1
Frequency Response from the Transfer Function
Frequency Response from the Transfer Function
PROBLEM: Find the analytical expression for the magnitude frequency response and
the phase frequency response for a system Gs  1=s  2. Also, plot both the separate
magnitude and phase diagrams and the polar plot.
SOLUTION: First
substitute
s  jω
in
the
system
function
and
obtain
G jω  1= jω  2  2 
 jω=ω2  4. The magnitude of this complex number,
jG jωj  Mω  1=
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ω2  4
p
, is the magnitude frequency response. The phase angle
of G jω; ϕω  
tan
 1ω=2, is the phase frequency response.
G jω can be plotted in two ways: (1) in separate magnitude and phase plots and
(2) in a polar plot. Figure 10.4 shows separate magnitude and phase diagrams, where
the magnitude diagram is 20 log Mω  20 log 1=
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ω2  4
p
 vs. log ω, and the phase
diagram is ϕω  
tan
 1ω=2 vs. log ω. The polar plot, shown in Figure 10.5, is a plot
of Mω < ϕω  1=
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ω2  4
p
< 
tan
 1ω=2 for different ω.
0
–0.05
–0.10
–0.15
–0.20
–0.25
∞r/s 0.05
0.1
0.15
0.2
0.25
0.3
0.35
0.4
0.45
Re G
10 r/s
9 r/s
8 r/s
7 r/s
6 r/s
5 r/s
4 r/s
3 r/s
2 r/s
1 r/s
0.9 r/s
0.8 r/s
0.7 r/s
0.6 r/s
0.5 r/s
0.4 r/s
0.3 r/s
0.2 r/s
0.1 r/s
0 r/s
G
Im
Note: r/s = rad/s 
0.5
ω=
ω=
FIGURE 10.5
Frequency
response plot for
Gs  1=s  2:
polar plot
–6
Phase (degrees)
0
–90
–12
–18
–24
–30
–36
–10
1
10
Frequency (rad/s)
0.1
100
–20
–30
–40
–50
–60
–70
–80
–42
20 log M
1
10
Frequency (rad/s)
0.1
100
FIGURE 10.4
Frequency
response plots for
Gs  1=s  2: separate
magnitude and phase diagrams
530
Chapter 10
Frequency Response Techniques

In the previous example, we plotted the separate magnitude and phase responses, as
well as the polar plot, using the mathematical expression for the frequency response. Either
of these frequency response presentations can also be obtained from the other. You should
practice this conversion by looking at Figure 10.4 and obtaining Figure 10.5 using
successive points. For example, at a frequency of 1 rad/s in Figure 10.4, the magnitude
is approximately 
7 dB, or 10
7=20  0:447. The phase plot at 1 rad/s tells us that the phase
is about 
26°. Thus on the polar plot, a point of radius 0.447 at an angle of 
26° is plotted
and identiﬁed as 1 rad/s. Continuing in like manner for other frequencies in Figure 10.4, you
can obtain Figure 10.5.
Similarly, Figure 10.4 can be obtained from Figure 10.5 by selecting a sequence of
points in Figure 10.5 and translating them to separate magnitude and phase values. For
example, drawing a vector from the origin to the point at 2 rad/s in Figure 10.5, we see that
the magnitude is 20 log 0:35  
9:12 dB and the phase angle is about 
45°. The magnitude
and phase angle are then plotted at 2 rad/s in Figure 10.4 on the separate magnitude and
phase curves.
In this section, we deﬁned frequency response and saw how to obtain an analytical
expression for the frequency response of a system simply by substituting s  jω into G(s).
We also saw how to make a plot of G jω. The next section shows how to approximate the
magnitude and phase plots in order to sketch them rapidly.
10.2 Asymptotic Approximations: Bode Plots
The log-magnitude and phase frequency response curves as functions of log ω are called
Bode plots or Bode diagrams. Sketching Bode plots can be simpliﬁed because they can be
approximated as a sequence of straight lines. Straight-line approximations simplify the
evaluation of the magnitude and phase frequency response.
Skill-Assessment Exercise 10.1
PROBLEM:
a. Find analytical expressions for the magnitude and phase responses of
Gs 
1
s  2s  4
b. Make plots of the log-magnitude and the phase, using log-frequency in rad/s as the
ordinate.
c. Make a polar plot of the frequency response.
ANSWERS:
a. Mω 
1
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
8 
 ω22  6ω2
q
; for ω 
ﬃﬃﬃ
8
p
: ϕω  
arctan
6ω
8 
 ω2


, for
ω >
ﬃﬃﬃ
8
p
: ϕω  
 π  arctan
6ω
8 
 ω2




b. See the answer at www.wiley.com/college/nise.
c. See the answer at www.wiley.com/college/nise.
The complete solution is at www.wiley.com/college/nise.
10.2 Asymptotic Approximations: Bode Plots
531

Consider the following transfer function:
Gs  Ks  z1s  z2 ∙∙∙s  zk
sms  p1s  p2 ∙∙∙s  pn
(10.13)
The magnitude frequency response is the product of the magnitude frequency responses of
each term, or
jG jωj 
Kjs  z1jjs  z2j ∙∙∙js  zkj
jsmjjs  p1jjs  p2j ∙∙∙js  pnj

s ® jω
(10.14)
Thus, if we know the magnitude response of each pole and zero term, we can ﬁnd the total
magnitude response. The process can be simpliﬁed by working with the logarithm of
the magnitude, since the zero terms’ magnitude responses would be added and the pole
terms’ magnitude responses subtracted, rather than, respectively, multiplied or divided, to
yield the logarithm of the total magnitude response. Converting the magnitude response
into dB, we obtain
20 log jG jωj  20 log K  20 log js  z1j  20 log js  z2j
 ∙∙∙
 20 log jsmj 
 20 log js  p1j 
 ∙∙∙js ® jω
(10.15)
Thus, if we knew the response of each term, the algebraic sum would yield the total
response in dB. Further, if we could make an approximation of each term that would consist
only of straight lines, graphical addition of terms would be greatly simpliﬁed.
Before proceeding, let us look at the phase response. From Eq. (10.13), the phase
frequency response is the sum of the phase frequency response curves of the zero terms
minus the sum of the phase frequency response curves of the pole terms. Again, since the
phase response is the sum of individual terms, straight-line approximations to these
individual responses simplify graphical addition.
Let us now show how to approximate the frequency response of simple pole and zero
terms by straight-line approximations. Later we show how to combine these responses to
sketch the frequency response of more complicated functions. In subsequent sections, after a
discussion of the Nyquist stability criterion, we learn how to use the Bode plots for the
analysis and design of stability and transient response.
Bode Plots for G(s) = (s + a)
Consider a function, Gs  s  a, for which we want to sketch separate logarithmic
magnitude and phase response plots. Letting s  jω, we have
G jω   jω  a  a j ω
a  1

	
(10.16)
At low frequencies when ω approaches zero,
G jω ≈a
(10.17)
The magnitude response in dB is
20 log M  20 log a
(10.18)
where M  jG jωj and is a constant. Eq. (10.18) is shown plotted in Figure 10.6(a) from
ω  0:01a to a.
At high frequencies where ω  a, Eq. (10.16) becomes
G jω ≈a jω
a


 a ω
a
 	
 90°  ω 90°
(10.19)
532
Chapter 10
Frequency Response Techniques

The magnitude response in dB is
20 log M  20 log a  20 log ω
a  20 log ω
(10.20)
where a < ω < ∞. Notice from the middle term that the high-frequency approximation is
equal to the low-frequency approximation when ω  a, and increases for ω > a.
If we plot dB, 20 log M, against log ω, Eq. (10.20) becomes a straight line:
y  20x
(10.21)
where y  20 log M; and x  log ω. The line has a slope of 20 when plotted as dB vs. log ω.
Since each doubling of frequency causes 20 log ω to increase by 6 dB, the line rises at an
equivalent slopeof6 dB/octave,whereanoctaveisa doublingoffrequency.Thisrisebeginsat
ω  a, where the low-frequency approximation equals the high-frequency approximation.
We call thestraight-line approximations asymptotes. Thelow-frequency approximation
is called the low-frequency asymptote, and the high-frequency approximation is called the
high-frequency asymptote. The frequency, a, is called the break frequency because it is the
break between the low- and the high-frequency asymptotes.
Many times it is convenient to draw the line over a decade rather than an octave, where
a decade is 10 times the initial frequency. Over one decade, 20 log ω increases by 20 dB.
Thus, a slope of 6 dB/octave is equivalent to a slope of 20 dB/decade. The plot is shown in
Figure 10.6(a) from ω  0:01a to 100a.
Let us now turn to the phase response, which can be drawn as follows. At the break
frequency, a, Eq. (10.16) shows the phase to be 45°. At low frequencies, Eq. (10.17)
shows that the phase is 0°. At high frequencies, Eq. (10.19) shows that the phase is 90°. To
draw the curve, start one decade 1=10 below the break frequency, 0.1a, with 0° phase,
a
a
a
a
a
a
a
0.01
0.1
10
100a
Frequency (rad/s)
Frequency (rad/s)
90
75
60
45
30
15
Phase (degrees)
0
(a)
(b)
Slope  =   6 dB/octave
Slope = 45°/decade
30 + 20 log
24 + 20 log
18 + 20 log
12 + 20 log
6 + 20 log
20 log
a
a
a
a
0.01a
0.1
10
100a
a
a
a
a
36 + 20 log
42 + 20 log
20 log M
=  20 dB/decade
FIGURE 10.6
Bode plots
of s  a: a. magnitude plot;
b. phase plot
10.2 Asymptotic Approximations: Bode Plots
533

and draw a line of slope 45°/decade passing through 45° at the break frequency and
continuing to 90° one decade above the break frequency, 10a. The resulting phase
diagram is shown in Figure 10.6(b).
It is often convenient to normalize the magnitude and scale the frequency so that the
log-magnitude plot will be 0 dB at a break frequency of unity. Normalizing and scaling
helps in the following applications:
1. When comparing different ﬁrst- or second-order frequency response plots, each plot will
have the same low-frequency asymptote after normalization and the same break
frequency after scaling.
2. When sketching the frequency response of a function such as Eq. (10.13), each factor in
the numerator and denominator will have the same low-frequency asymptote after
normalization. This common low-frequency asymptote makes it easier to add compo-
nents to obtain the Bode plot.
To normalize s  a, we factor out the quantity a and form as=a  1. The frequency is
scaled by deﬁning a new frequency variable, s1  s=a. Then the magnitude is divided by
the quantity a to yield 0 dB at the break frequency. Hence, the normalized and scaled
function is s1  1. To obtain the original frequency response, the magnitude and
frequency are multiplied by the quantity a.
We now use the concepts of normalization and scaling to compare the asymptotic
approximation to the actual magnitude and phase plot for s  a. Table 10.1 shows the
TABLE 10.1
Asymptotic and actual normalized and scaled frequency response data for s  a
Frequency
a
20 log M
a dB
Phase (degrees)
(rad/s)
Asymptotic
Actual
Asymptotic
Actual
0.01
0
0.00
0.00
0.57
0.02
0
0.00
0.00
1.15
0.04
0
0.01
0.00
2.29
0.06
0
0.02
0.00
3.43
0.08
0
0.03
0.00
4.57
0.1
0
0.04
0.00
5.71
0.2
0
0.17
13.55
11.31
0.4
0
0.64
27.09
21.80
0.6
0
1.34
35.02
30.96
0.8
0
2.15
40.64
38.66
1
0
3.01
45.00
45.00
2
6
6.99
58.55
63.43
4
12
12.30
72.09
75.96
6
15.56
15.68
80.02
80.54
8
18
18.13
85.64
82.87
10
20
20.04
90.00
84.29
20
26.02
26.03
90.00
87.14
40
32.04
32.04
90.00
88.57
60
35.56
35.56
90.00
89.05
80
38.06
38.06
90.00
89.28
100
40
40.00
90.00
89.43
534
Chapter 10
Frequency Response Techniques

comparison for the normalized and scaled frequency response of s  a. Notice that the
actual magnitude curve is never greater than 3.01 dB from the asymptotes. This maximum
difference occurs at the break frequency. The maximum difference for the phase curve is
5.71°, which occurs at the decades above and below the break frequency. For convenience,
the data in Table 10.1 is plotted in Figures 10.7 and 10.8.
We now ﬁnd the Bode plots for other common transfer functions.
Actual
90
80
70
60
50
40
30
20
10
0
0.01
0.1
1
Frequency
Phase (degrees)
(rad/s)
a
10
100
Asymptotic approximation
FIGURE 10.8
Asymptotic and actual normalized and scaled phase response of s  a
Actual
Asymptotic approximation
20
18
16
14
12
10
8
6
4
2
00.1
10
1
20 log(M/a)
Frequency (rad/s)
a
FIGURE 10.7
Asymptotic and actual normalized and scaled magnitude response of s  a
10.2 Asymptotic Approximations: Bode Plots
535

Bode Plots for G(s) = 1/(s+a)
Let us ﬁnd the Bode plots for the transfer function
Gs 
1
s  a 
1
a
s
a  1


(10.22)
This function has a low-frequency asymptote of 20 log 1=a, which is found by letting the
frequency, s, approach zero. The Bode plot is constant until the break frequency, a rad/s, is
reached. The plot is then approximated by the high-frequency asymptote found by letting s
approach ∞. Thus, at high frequencies
G jω 
1
a s
a
 

s ® jω

1
a jω
a

 
1
a
ω
a
 
 90°  1
ω  
 90°
(10.23)
or, in dB,
20 log M  20 log 1
a 
 20 log ω
a  
20 log ω
(10.24)
Notice from the middle term that the high-frequency approximation equals the low-
frequency approximation when ω  a, and decreases for ω > a. This result is similar to
Eq. (10.20), except the slope is negative rather than positive. The Bode log-magnitude
diagram will decrease at a rate of 20 dB/decade rather than increase at a rate of 20 dB/decade
after the break frequency.
The phase plot is the negative of the previous example, since the function is the
inverse. The phase begins at 0° and reaches 
90° at high frequencies, going through 
45° at
the break frequency. Both the Bode normalized and scaled log-magnitude and phase plot
are shown in Figure 10.9(d).
Bode Plots for G(s) = s
Our next function, Gs  s, has only a high-frequency asymptote. Letting s  jω, the
magnitude is 20 log ω, which is the same as Eq. (10.20). Hence, the Bode magnitude
plot is a straight line drawn with a 20 dB=decade slope passing through zero dB when
ω  1. The phase plot, which is a constant 90°, is shown with the magnitude plot in
Figure 10.9(a).
FIGURE 10.9
Normalized
and scaled Bode plots for
a. Gs  s;
b. Gs  1=s;
(ﬁgure continues)
0
20
40
–20
–40
20 log M
0.01
0.1
1
10
100
+6 dB/octave =
+20 dB/decade
–6 dB/octave =
–20 dB/decade
Phase (degrees)
Frequency (rad/s)
0.01
0.1
1
10
100
Frequency (rad/s)
0
45
90
–45
–90
0
20
40
–20
–40
20 log M
0.01
0.1
1
10
100
Phase (degrees)
Frequency (rad/s)
0.01
0.1
1
10
100
Frequency (rad/s)
0
45
90
–45
–90
(a)
(b)
G (s) = s
G (s) = 1s
G (s) =1s
G (s) = s
536
Chapter 10
Frequency Response Techniques

Bode Plots for G(s) = 1/s
The frequency response of the inverse of the preceding function, Gs  1=s, is shown in
Figure 10.9(b) and is a straight line with a 
20 dB=decade slope passing through zero dB at
ω  1. The Bode phase plot is equal to a constant 
90°.
We have covered four functions that have ﬁrst-order polynomials in s in the numerator
or denominator. Before proceeding to second-order polynomials, let us look at an example
of drawing the Bode plots for a function that consists of the product of ﬁrst-order
polynomials in the numerator and denominator. The plots will be made by adding together
the individual frequency response curves.
0
20
40
–20
–40
20 log(M/a) 
0.01
0.1
1
10
100
+6 dB/octave =
+20 dB/decade
Phase (degrees)
0.01
0.1
1
10
100
0
45
90
–45
–90
0
20
40
–20
–40
0.01
0.1
1
10
100
Phase (degrees)
0.01
0.1
1
10
100
0
45
90
–45
–90
–6 dB/octave =
–20 dB/decade
+45°/decade
–45°/decade
(c)
(d)
20 logMa
a
Frequency (rad/s)
a
Frequency (rad/s)
a
Frequency (rad/s)
a
Frequency (rad/s)
G (s) = (s + a)
G (s) = (s + a )
G (s) =
1
 (s+a)
G (s) =
1
 (s+a)
FIGURE 10.9
(Continued)
c. Gs  s  a;
d. Gs  1=s  a
Example 10.2
Bode Plots for Ratio of First-Order Factors
Bode Plots for Ratio of First-Order Factors
PROBLEM: Draw the Bode plots for the system shown in Figure 10.10, where
Gs  Ks  3=ss  1s  2.
SOLUTION: We
will
make
a
Bode
plot
for
the
open-loop
function
Gs  Ks  3=ss  1s  2. The Bode plot is the sum of the Bode plots for
each ﬁrst-order term. Thus, it is convenient to use the normalized plot for each of
these terms so that the low-frequency asymptote of each term, except the pole at the origin,
is at 0 dB,making iteasier to add the components of the Bodeplot.We rewriteG(s) showing
each term normalized to a low-frequency gain of unity. Hence,
Gs 
3
2 K
s
3  1


ss  1 s
2  1


(10.25)
Now determine that the break frequencies are at 1, 2, and 3. The magnitude plot should
begin a decade below the lowest break frequency and extend a decade above the highest
R(s) 
–
E(s)
G(s)
C(s)
+
FIGURE 10.10
Closed-loop
unity feedback system
10.2 Asymptotic Approximations: Bode Plots
537

break frequency. Hence, we choose 0.1 radian to 100 radians, or three decades, as the
extent of our plot.
At ω  0:1 the low-frequency value of the function is found from Eq. (10.25) using
the low-frequency values for all of the s=a  1 terms (that is, s  0) and the actual
value for the s term in the denominator. Thus, G j0:1 ≈3
2 K=0:1  15 K. The effect of K
is to move the magnitude curve up (increasing K) or down (decreasing K) by the amount
of 20 log K. K has no effect upon the phase curve. If we choose K  1, the magnitude plot
can be denormalized later for any value of K that is calculated or known.
Figure 10.11(a) shows each component of the Bode log-magnitude frequency
response. Summing the components yields the composite plot shown in Figure 10.11(b).
The results are summarized in Table 10.2, which can be used to obtain the slopes. Each
40
20
–20
–40
–60
–80
0.1
1
10
100
40
20
0
–20
–40
–60
–80
0
0.1
1
10
100
Frequency (rad/s)
Frequency (rad/s)
(a)
(b)
20 dB/dec (6 dB/oct)
–20 dB/dec (–6 dB/oct)
– 40 dB/dec (–12dB/oct)
20 log M
20 log M
(s + 1)
1
–20 dB/dec (–6 dB/oct)
–60 dB/dec (–18 dB/oct)
–40 dB/dec (–12 dB/oct)
1
s + 1
2
2s
3
s + 1
3
FIGURE 10.11
Bode
log-magnitude plot for
Example 10.2:
a. components;
b. composite
TABLE 10.2
Bode magnitude plot: slope contribution from each pole and zero in Example 10.2
Frequency (rad/s)
Description
0.1 (Start:
Pole at 0)
1 (Start:
Pole at 
1)
2 (Start:
Pole at 
2)
3 (Start:
Zero at 
3)
Pole at 0

20

20

20

20
Pole at 
1
0

20

20

20
Pole at 
2
0
0

20

20
Zero at 
3
0
0
0
20
Total slope (dB/dec)

20

40

60

40
538
Chapter 10
Frequency Response Techniques

pole and zero is itemized in the ﬁrst column. Reading across the table shows its
contribution at each frequency. The last row is the sum of the slopes and correlates
with Figure 10.11(b). The Bode magnitude plot for K  1 starts at ω  0:1 with a value of
20 log 15  23:52 dB, and decreases immediately at a rate of 
20 dB=decade, due to the
s term in the denominator. At ω  1, the s  1 term in the denominator begins its
20 dB=decade downward slope and causes an additional 20 dB=decade negative slope, or a
total of 
40 dB=decade. At ω  2, the term s=2  1 begins its 
20 dB=decade slope,
adding yet another 
20 dB=decade to the resultant plot, or a total of 
60 dB=decade slope
that continues until ω  3. At this frequency, the s=3  1 term in the numerator begins
its positive 20 dB=decade slope. The resultant magnitude plot, therefore, changes from a
slope of 
60 dB=decade to 
40 dB=decade at ω  3, and continues at that slope, since
there are no other break frequencies.
The slopes are easily drawn by sketching straight-line segments decreasing by
20 dB over a decade. For example, the initial 
20 dB=decade slope is drawn from
23.52 dB at ω  0:1, to 3.52 dB (a 20 dB decrease) at ω  1. The 
40 dB=decade
slope starting at ω  1 is drawn by sketching a line segment from 3.52 dB at ω  1, to

36.48 dB (a 40 dB decrease) at ω  10, and using only the portion from ω  1 to
ω  2. The next slope of 
60 dB=decade is drawn by ﬁrst sketching a line segment
from ω  2 to ω  20 (1 decade) that drops down by 60 dB, and using only that
portion of the line from ω  2 to ω  3. The ﬁnal slope is drawn by sketching a line
segment from ω  3 to ω  30 (1 decade) that drops by 40 dB. This slope continues to
the end of the plot.
Phase is handled similarly. However, the existence of breaks, a decade below and a
decade above the break frequency, requires a little more bookkeeping. Table 10.3 shows
the starting and stopping frequencies of the 45°=decade slope for each of the poles and
zeros. For example, reading across for the pole at 
2, we see that the 
45° slope starts at a
frequency of 0.2 and ends at 20. Filling in the rows for each pole and then summing the
columns yields the slope portrait of the resulting phase plot. Looking at the row marked
Total slope, we see that the phase plot will have a slope of 
45°=decade from a frequency
of 0.1 to 0.2. The slope will then increase to 
90°=decade from 0.2 to 0.3. The slope will
return to 
45°=decade from 0.3 to 10 rad/s. A slope of 0 ensues from 10 to 20 rad/s,
followed by a slope of 45°=decade from 20 to 30 rad/s. Finally, from 30 rad/s to inﬁnity,
the slope is 0°=decade.
The resulting component and composite phase plots are shown in Figure 10.12.
Since the pole at the origin yields a constant 
90° phase shift, the plot begins at 
90° and
follows the slope portrait just described.
TABLE 10.3
Bode phase plot: slope contribution from each pole and zero in Example 10.2
Frequency (rad/s)
Description
0.1 (Start:
Pole at 
1)
0.2 (Start:
Pole at 
2)
0.3 (Start:
Pole at 
3)
0 (End:
Pole at 
1)
20 (End:
Pole at 
2)
30 (End:
Zero at 
3)
Pole at 
1

45

45

45
0
Pole at 
2

45

45

45
0
Zero at 
3
45
45
45
0
Total slope (deg/dec)

45

90

45
0
45
0
10.2 Asymptotic Approximations: Bode Plots
539

Bode Plots for G(s) = s 2 + 2ζωns + ωn
2
Now that we have covered Bode plots for ﬁrst-order systems, we turn to the Bode
log-magnitude and phase plots for second-order polynomials in s. The second-order
polynomial is of the form
Gs  s2  2ζωns  ω2
n  ω2
n
s2
ω2
n
 2ζ s
ωn
 1


(10.26)
Unlike the ﬁrst-order frequency response approximation, the difference between the
asymptotic approximation and the actual frequency response can be great for some values
of ζ. A correction to the Bode diagrams can be made to improve the accuracy. We ﬁrst
derive the asymptotic approximation and then show the difference between the asymptotic
approximation and the actual frequency response curves.
At low frequencies, Eq. (10.26) becomes
Gs ≈ω2
n  ω2
n0°
(10.27)
The magnitude, M, in dB at low frequencies therefore is
20 log M  20 log jG jωj  20 log ω2
n
(10.28)
At high frequencies,
Gs ≈s2
(10.29)
or
G jω ≈
 ω2  ω2180°
(10.30)
The log-magnitude is
20 log M  20 log jG jωj  20 log ω2  40 log ω
(10.31)
(b)
(a)
–180
Phase (degrees)
0.1
1
10
100
Frequency (rad/s)
45°/dec
–45°/dec
–315
Phase (degrees)
0.1
1
10
100
Frequency (rad/s)
–135
–90
–45
0
45
90
3
s
–270
–225
–180
–135
–90
–45°/dec
45°/dec
–90°/dec
–45°/dec
–360
+1
3
2s
–45°/dec
1
(   + 1)
s
1
+1
2
s
FIGURE 10.12
Bode phase
plot for Example 10.2:
a. components; b. composite
540
Chapter 10
Frequency Response Techniques

Equation (10.31) is a straight line with twice the slope of a ﬁrst-order term (Eq. (10.20)). Its
slope is 12 dB/octave, or 40 dB/decade.
The low-frequency asymptote (Eq. (10.27)) and the high-frequency asymptote
(Eq. (10.31)) are equal when ω  ωn. Thus, ωn is the break frequency for the second-
order polynomial.
For convenience in representing systems with different ωn, we normalize and scale
our ﬁndings before drawing the asymptotes. Using the normalized and scaled term of
Eq. (10.26), we normalize the magnitude, dividing by ω2
n, and scale the frequency, dividing
by ωn. Thus, we plot Gs1=ω2
n  s2
1  2ζs1  1, where s1  s=ωn. Gs1 has a low-frequency
asymptote at 0 dB and a break frequency of 1 rad/s. Figure 10.13(a) shows the asymptotes for
the normalized and scaled magnitude plot.
We now draw the phase plot. It is 0° at low frequencies (Eq. (10.27)) and 180°
at high frequencies (Eq. (10.30)). To ﬁnd the phase at the natural frequency, ﬁrst
evaluate G jω:
G jω  s2  2ζωns  ω2
njs ® jω  ω2
n 
 ω2  j2ζωnω
(10.32)
Then ﬁnd the function value at the natural frequency by substituting ω  ωn. Since the
result is j2ζω2
n, the phase at the natural frequency is 90°. Figure 10.13(b) shows the
phase plotted with frequency scaled by ωn. The phase plot increases at a rate of
90°=decade from 0.1 to 10 and passes through 90° at 1.
Corrections to Second-Order Bode Plots
Let us now examine the error between the actual response and the asymptotic approximation
of the second-order polynomial. Whereas the ﬁrst-order polynomial has a disparity of no
more than 3.01 dB magnitude and 5.71° phase, the second-order function may have a greater
disparity, which depends upon the value of ζ.
–120
20 log (M)ω2
(a)
–45
Phase (degrees)
(b)
–80
–40
0
40
80
120
0
45
90
135
180
–90
0.01
0.1
1
10
100
0.01
0.1
1
10
100
Slope = 12 dB/octave
          = 40 dB/decade
Slope = 90°/decade
n
n
ω ω
n
ω ω
FIGURE 10.13
Bode
asymptotes for normalized and
scaled Gs  s2  2ζωns  ω2
n:
a. magnitude; b. phase
10.2 Asymptotic Approximations: Bode Plots
541

From Eq. (10.32), the actual magnitude and phase for Gs  s2  2ζωns  ω2
n are,
respectively,
M 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ω2
n 
 ω22  2ζωnω2
q
(10.33)
Phase  tan
 1 2ζωnω
ω2
n 
 ω2
(10.34)
These relationships are tabulated in Table 10.4 for a range of values of ζ and plotted in
Figures 10.14 and 10.15 along with the asymptotic approximations for normalized
TABLE 10.4
Data for normalized and scaled log-magnitude and phase plots for s2  2ζωns  ω2
n. Mag  20 logM=ω2
n
Freq.
ω
ωn
Mag (dB)
ζ  0:1
Phase (deg)
ζ  0:1
Mag (dB)
ζ  0:2
Phase (deg)
ζ  0:2
Mag (dB)
ζ  0:3
Phase (deg)
ζ  0:3
0.10

0.09
1.16

0.08
2.31

0.07
3.47
0.20

0.35
2.39

0.32
4.76

0.29
7.13
0.30

0.80
3.77

0.74
7.51

0.65
11.19
0.40

1.48
5.44

1.36
10.78

1.17
15.95
0.50

2.42
7.59

2.20
14.93

1.85
21.80
0.60

3.73
10.62

3.30
20.56

2.68
29.36
0.70

5.53
15.35

4.70
28.77

3.60
39.47
0.80

8.09
23.96

6.35
41.63

4.44
53.13
0.90

11.64
43.45

7.81
62.18

4.85
70.62
1.00

13.98
90.00

7.96
90.00

4.44
90.00
1.10

10.34
133.67

6.24
115.51

3.19
107.65
1.20

6.00
151.39

3.73
132.51

1.48
121.43
1.30

2.65
159.35

1.27
143.00
0.35
131.50
1.40
0.00
163.74
0.92
149.74
2.11
138.81
1.50
2.18
166.50
2.84
154.36
3.75
144.25
1.60
4.04
168.41
4.54
157.69
5.26
148.39
1.70
5.67
169.80
6.06
160.21
6.64
151.65
1.80
7.12
170.87
7.43
162.18
7.91
154.26
1.90
8.42
171.72
8.69
163.77
9.09
156.41
2.00
9.62
172.41
9.84
165.07
10.19
158.20
3.00
18.09
175.71
18.16
171.47
18.28
167.32
4.00
23.53
176.95
23.57
173.91
23.63
170.91
5.00
27.61
177.61
27.63
175.24
27.67
172.87
6.00
30.89
178.04
30.90
176.08
30.93
174.13
7.00
33.63
178.33
33.64
176.66
33.66
175.00
8.00
35.99
178.55
36.00
177.09
36.01
175.64
9.00
38.06
178.71
38.07
177.42
38.08
176.14
10.00
39.91
178.84
39.92
177.69
39.93
176.53
(table continues)
542
Chapter 10
Frequency Response Techniques

magnitude and scaled frequency. In Figure 10.14, which is normalized to the square
of the natural frequency, the normalized log-magnitude at the scaled natural frequency
is 20 log 2ζ. The student should verify that the actual magnitude at the unscaled
natural frequency is  20 log 2 ζω2
n. Table 10.4 and Figures 10.14 and 10.15 can
be used to improve accuracy when drawing Bode plots. For example, a magnitude
correction of 20 log 2ζ can be made at the natural, or break, frequency on the Bode
asymptotic plot.
Bode Plots for G(s) = 1/(s 2 + 2ζωns + ωn
2)
Bode plots for Gs  1=s2  2ζωns  ω2
n can be derived similarly to those for
Gs  s2  2ζωns  ω2
n. We ﬁnd that the magnitude curve breaks at the natural frequency
Freq.
ω
ωn
Mag (dB)
ζ  0:5
Phase (deg)
ζ  0:5
Mag (dB)
ζ  0:7
Phase (deg)
ζ  0:7
Mag (dB)
ζ  1:0
Phase (deg)
ζ  1:0
0.10

0.04
5.77
0.00
8.05
0.09
11.42
0.20

0.17
11.77
0.00
16.26
0.34
22.62
0.30

0.37
18.25
0.02
24.78
0.75
33.40
0.40

0.63
25.46
0.08
33.69
1.29
43.60
0.50

0.90
33.69
0.22
43.03
1.94
53.13
0.60

1.14
43.15
0.47
52.70
2.67
61.93
0.70

1.25
53.92
0.87
62.51
3.46
69.98
0.80

1.14
65.77
1.41
72.18
4.30
77.32
0.90

0.73
78.08
2.11
81.42
5.15
83.97
1.00
0.00
90.00
2.92
90.00
6.02
90.00
1.10
0.98
100.81
3.83
97.77
6.89
95.45
1.20
2.13
110.14
4.79
104.68
7.75
100.39
1.30
3.36
117.96
5.78
110.76
8.60
104.86
1.40
4.60
124.44
6.78
116.10
9.43
108.92
1.50
5.81
129.81
7.76
120.76
10.24
112.62
1.60
6.98
134.27
8.72
124.85
11.03
115.99
1.70
8.10
138.03
9.66
128.45
11.80
119.07
1.80
9.17
141.22
10.56
131.63
12.55
121.89
1.90
10.18
143.95
11.43
134.46
13.27
124.48
2.00
11.14
146.31
12.26
136.97
13.98
126.87
3.00
18.63
159.44
19.12
152.30
20.00
143.13
4.00
23.82
165.07
24.09
159.53
24.61
151.93
5.00
27.79
168.23
27.96
163.74
28.30
157.38
6.00
31.01
170.27
31.12
166.50
31.36
161.08
7.00
33.72
171.70
33.80
168.46
33.98
163.74
8.00
36.06
172.76
36.12
169.92
36.26
165.75
9.00
38.12
173.58
38.17
171.05
38.28
167.32
10.00
39.96
174.23
40.00
171.95
40.09
168.58
TABLE 10.4
Data for normalized and scaled log-magnitude and phase plots for s2  2ζωns  ω2
n. Mag  20 logM=ω2
n
(Continued)
10.2 Asymptotic Approximations: Bode Plots
543

and decreases at a rate of 
40 dB=decade. The phase plot is 0° at low frequencies. At 0:1ωn
it begins a decrease of 
90°=decade and continues until ω  10ωn, where it levels off
at 
180°.
The exact frequency response also follows the same derivation as that of
Gs  s2  2ζωns  ω2
n. The results are summarized in Table 10.5, as well as Figures 10.16
and 10.17. The exact magnitude is the reciprocal of Eq. (10.33), and the exact phase is
the negative of Eq. (10.34). The normalized magnitude at the scaled natural frequency
is 
20 log 2ζ, which can be used as a correction at the break frequency on the Bode
asymptotic plot.
Phase (degrees)
0.1
10
Asymptote
1
0
20
40
60
80
100
120
140
160
180
0.5
1.0
1.5
0.2
0.3
0.7
𝜁 = 0.1
n
ω ω
FIGURE 10.15
Scaled phase response for s2  2ζωns  ω2
n
0.1
1
n
10
–20
–10
0
10
20
30
40
50
𝜁 = 1.5
1.0
High-frequency
asymptote
0.5
 𝜁 = 0.3
Low-frequency
asymptote
0.2
0.1
0.7
ω ω
20 log (M/ω2)
n
FIGURE 10.14
Normalized and scaled log-magnitude response for s2  2ζωns  ω2
n
544
Chapter 10
Frequency Response Techniques

TABLE 10.5
Data for normalized and scaled log-magnitude and phase plots for 1=s2  2ζωns  ω2
n. Mag  20 logM=ω2
n
Freq.
ω
ωn
Mag (dB)
ζ  0:1
Phase (deg)
ζ  0:1
Mag (dB)
ζ  0:2
Phase (deg)
ζ  0:2
Mag (dB)
ζ  0:3
Phase (deg)
ζ  0:3
0.10
0.09

1.16
0.08

2.31
0.07

3.47
0.20
0.35

2.39
0.32

4.76
0.29

7.13
0.30
0.80

3.77
0.74

7.51
0.65

11.19
0.40
1.48

5.44
1.36

10.78
1.17

15.95
0.50
2.42

7.59
2.20

14.93
1.85

21.80
0.60
3.73

10.62
3.30

20.56
2.68

29.36
0.70
5.53

15.35
4.70

28.77
3.60

39.47
0.80
8.09

23.96
6.35

41.63
4.44

53.13
0.90
11.64

43.45
7.81

62.18
4.85

70.62
1.00
13.98

90.00
7.96

90.00
4.44

90.00
1.10
10.34

133.67
6.24

115.51
3.19

107.65
1.20
6.00

151.39
3.73

132.51
1.48

121.43
1.30
2.65

159.35
1.27

143.00

0.35

131.50
1.40
0.00

163.74

0.92

149.74

2.11

138.81
1.50

2.18

166.50

2.84

154.36

3.75

144.25
1.60

4.04

168.41

4.54

157.69

5.26

148.39
1.70

5.67

169.80

6.06

160.21

6.64

151.65
1.80

7.12

170.87

7.43

162.18

7.91

154.26
1.90

8.42

171.72

8.69

163.77

9.09

156.41
2.00

9.62

172.41

9.84

165.07

10.19

158.20
3.00

18.09

175.71

18.16

171.47

18.28

167.32
4.00

23.53

176.95

23.57

173.91

23.63

170.91
5.00

27.61

177.61

27.63

175.24

27.67

172.87
6.00

30.89

178.04

30.90

176.08

30.93

174.13
7.00

33.63

178.33

33.64

176.66

33.66

175.00
8.00

35.99

178.55

36.00

177.09

36.01

175.64
9.00

38.06

178.71

38.07

177.42

38.08

176.14
10.00

39.91

178.84

39.92

177.69

39.93

176.53
(table continues)
10.2 Asymptotic Approximations: Bode Plots
545

Freq.
ω
ωn
Mag (dB)
ζ  0:5
Phase (deg)
ζ  0:5
Mag (dB)
ζ  0:7
Phase (deg)
ζ  0:7
Mag (dB)
ζ  1:0
Phase (deg)
ζ  1:0
0.10
0.04

5.77
0.00

8.05

0.09

11.42
0.20
0.17

11.77
0.00

16.26

0.34

22.62
0.30
0.37

18.25

0.02

24.78

0.75

33.40
0.40
0.63

25.46

0.08

33.69

1.29

43.60
0.50
0.90

33.69

0.22

43.03

1.94

53.13
0.60
1.14

43.15

0.47

52.70

2.67

61.93
0.70
1.25

53.92

0.87

62.51

3.46

69.98
0.80
1.14

65.77

1.41

72.18

4.30

77.32
0.90
0.73

78.08

2.11

81.42

5.15

83.97
1.00
0.00

90.00

2.92

90.00

6.02

90.00
1.10

0.98

100.81

3.93

97.77

6.89

95.45
1.20

2.13

110.14

4.79

104.68

7.75

100.39
1.30

3.36

117.96

5.78

110.76

8.60

104.86
1.40

4.60

124.44

6.78

116.10

9.43

108.92
1.50

5.81

129.81

7.76

120.76

10.24

112.62
1.60

6.98

134.27

8.72

124.85

11.03

115.99
1.70

8.10

138.03

9.66

128.45

11.80

119.07
1.80

9.17

141.22

10.56

131.63

12.55

121.89
1.90

10.18

143.95

11.43

134.46

13.27

124.48
2.00

11.14

146.31

12.26

136.97

13.98

126.87
3.00

18.63

159.44

19.12

152.30

20.00

143.13
4.00

23.82

165.07

24.09

159.53

24.61

151.93
5.00

27.79

168.23

27.96

163.74

28.30

157.38
6.00

31.01

170.27

31.12

166.50

31.36

161.08
7.00

33.72

171.70

33.80

168.46

33.98

163.74
8.00

36.06

172.76

36.12

169.92

36.26

165.75
9.00

38.12

173.58

38.17

171.05

38.28

167.32
10.00

39.96

174.23

40.00

171.95

40.09

168.58
TABLE 10.5
Data for normalized and scaled log-magnitude and phase plots for 1=s2  2ζωns  ω2
n. Mag  20 logM=ω2
n
(Continued)
546
Chapter 10
Frequency Response Techniques

Let us now look at an example of drawing Bode plots for transfer functions that
contain second-order factors.
0.1
10
–50
–40
–30
–20
–10
0
10
20
High-frequency
asymptote
Low-frequency
asymptote
𝜁 = 0.1
 1.5
1.0
0.7
 0.3
0.2
𝜁 = 0.5
n
1
20 log (M/ω2)
n
FIGURE 10.16
Normalized and scaled log-magnitude response for 1=s2  2ζωns  ω2
n
Phase (degrees)
0.1
10
0.5
𝜁 = 0.1
1.0
0.2
Asymptote
0.3
0.7
1
–180
–160
–140
–120
–100
–80
–60
–40
–20
0
1.5
n
FIGURE 10.17
Scaled phase response for 1=s2  2ζωns  ω2
n
Example 10.3
Bode Plots for Ratio of First- and Second-Order Factors
Bode Plots for Ratio of First- and Second-Order Factors
PROBLEM: Draw the Bode log-magnitude and phase plots of G(s) for the unity
feedback system shown in Figure 10.10, where Gs  s  3=s  2s2  2s  25.
10.2 Asymptotic Approximations: Bode Plots
547

SOLUTION: We ﬁrst convert G(s) to show the normalized components that have unity
low-frequency gain. The second-order term is normalized by factoring out ω2
n, forming
s2
ω2
n
 2ζ
ωn
s  1
(10.35)
Thus,
Gs 
3
225
s
3  1

	
s
2  1

	
s2
25  2
25 s  1

  3
50
s
3  1

	
s
2  1

	
s2
25  2
25 s  1


(10.36)
The Bode log-magnitude diagram is shown in Figure 10.18(b) and is the sum of the
individual ﬁrst- and second-order terms of G(s) shown in Figure 10.18(a). We solve this
problem by adding the slopes of these component parts, beginning and ending at the
appropriate frequencies. The results are summarized in Table 10.6, which can be used to
(b)
(a)
–50
20 log M
0.01
100
Frequency (rad/s)
20 log M
0.01
Frequency (rad/s)
0.1
1
10
–70
3
50
–20 dB/dec
20 dB/dec
–40
–30
–20
–10
0
10
–60
–50
–40
–30
–20
–10
100
0.1
1
10
–20 dB/dec
Correction
–40 dB/dec
–40 dB/dec
1
+ 
1
s      
 2  
+ 
s
3  1
1
    s2  +  2  s +1
25     25
FIGURE 10.18
Bode
magnitude plot for
Gs  s  3=
s  2s2  2s  25:
a. components;
b. composite
TABLE 10.6
Magnitude diagram slopes for Example 10.3
Frequency (rad/s)
Description
0.01
(Start:
Plot)
2
(Start:
Pole at 
2)
3
(Start:
Zero at 
3)
5
(Start:
ωn  5)
Pole at 
2
0

20

20

20
Zero at 
3
0
0
20
20
ωn  5
0
0
0

40
Total slope (dB/dec)
0

20
0

40
548
Chapter 10
Frequency Response Techniques

obtain the slopes. The low-frequency value for G(s), found by letting s  0, is 3/50, or

24.44 dB. The Bode magnitude plot starts out at this value and continues until the ﬁrst
break frequency at 2 rad/s. Here the pole at 
2 yields a 
20 dB=decade slope downward
until the next break at 3 rad/s. The zero at 
3 causes an upward slope of 20 dB=decade,
which, when added to the previous 
20 dB=decade curve, gives a net slope of 0. At a
frequency of 5 rad/s, the second-order term initiates a 
40 dB=decade downward slope,
which continues to inﬁnity.
The correction to the log-magnitude curve due to the underdamped second-order
term can be found by plotting a point 
20 log 2ζ above the asymptotes at the natural
frequency. Since ζ  0:2 for the second-order term in the denominator of G(s), the
correction is 7.96 dB. Points close to the natural frequency can be corrected by taking the
values from the curves of Figure 10.16.
TABLE 10.7
Phase diagram slopes for Example 10.3
Frequency (rad/s)
Description
0.2
(Start:
Pole at 
2)
0.3
(Start:
Zero at 
3)
0.5
(Start:
ωn at 
5)
20
(End:
Pole at 
2)
30
(End:
Zero at 
3)
50
(End:
ωn  5)
Pole at 
2

45

45

45
0
Zero at 
3
45
45
45
0
ωn  5

90

90

90
0
Total slope (dB/dec)

45
0

90

45

90
0
–90°/dec
–45°/dec
Phase (degrees)
90
45
0
–45
–90
–135
–180
–225
0.01
0.1
1
10
100
Frequency (rad/s)
0
–45
–90
–135
–180
–225
–270
–315
(a)
(b)
Phase (degrees)
0.01
0.1
1
10
100
Frequency (rad/s)
–45°/dec
3
50
–45°/dec
–90°/dec
1
1
+ 
1
s2  
+  2  s +1
25
25
1
+ 
2
s
–90°/dec
45°/dec
s
3
FIGURE 10.19
Bode phase
plot for Gs  s  3=
s  2s2  2s  25:
a. components;
b. composite
10.2 Asymptotic Approximations: Bode Plots
549

In this section, we learned how to construct Bode log-magnitude and Bode phase
plots. The Bode plots are separate magnitude and phase frequency response curves for a
system, G(s). In the next section, we develop the Nyquist criterion for stability, which makes
use of the frequency response of a system. The Bode plots can then be used to determine the
stability of a system.
10.3 Introduction to the Nyquist Criterion
The Nyquist criterion relates the stability of a closed-loop system to the open-loop
frequency response and open-loop pole location. Thus, knowledge of the open-loop system’s
frequency response yields information about the stability of the closed-loop system. This
concept is similar to the root locus, where we began with information about the open-loop
system, its poles and zeros, and developed transient and stability information about the
closed-loop system.
Although the Nyquist criterion will yield stability information at ﬁrst, we will extend
the concept to transient response and steady-state errors. Thus, frequency response techniques
are an alternate approach to the root locus.
We now turn to the phase plot. Table 10.7 is formed to determine the progression of
slopes on the phase diagram. The ﬁrst-order pole at 
2 yields a phase angle that starts at 0°
and ends at 
90° via a 
45°=decade slope starting a decade below its break frequency and
ending a decade above its break frequency. The ﬁrst-order zero yields a phase angle that
starts at 0° and ends at 90° via a 45°=decade slope starting a decade below its break
frequency and ending a decade above its break frequency. The second-order poles yield a
phase angle that starts at 0° and ends at 
180° via a 
90°=decade slope starting a decade
below their natural frequency ωn  5 and ending a decade above their natural frequency.
The slopes, shown in Figure 10.19(a), are summed over each frequency range, and the
ﬁnal Bode phase plot is shown in Figure 10.19(b).
Students who are using MATLAB should now run ch10p1 in Appendix B.
You will learn how to use MATLAB to make Bode plots and list the
points on the plots. This exercise solves Example 10.3 using
MATLAB.
Skill-Assessment Exercise 10.2
PROBLEM: Draw the Bode log-magnitude and phase plots for the system
shown in Figure 10.10, where
Gs 
s  20
s  1s  7s  50
ANSWER: The complete solution is at www.wiley.com/college/nise.
TryIt 10.1
Use MATLAB, the Control System
Toolbox, and the following statements to
obtain the Bode plots for the system of
Skill-Assessment Exercise 10.2
G=zpk([
20],[
1,
7,...

50], 1)
bode (G); grid on
After the Bode plots appear, click on the
curve and drag to read the coordinates.
550
Chapter 10
Frequency Response Techniques

Derivation of the Nyquist Criterion
Consider the system of Figure 10.20. The Nyquist criterion can tell us how many closed-
loop poles are in the right half-plane. Before deriving the criterion, let us establish
four important concepts that will be used during the derivation: (1) the relationship
between the poles of 1  GsHs and the poles of G(s)H(s); (2) the relationship between
the zeros of 1  GsHs and the poles of the closed-loop transfer function, T(s); (3) the
concept of mapping points; and (4) the concept of mapping contours.
Letting
Gs  NG
DG
(10.37a)
Hs  NH
DH
(10.37b)
we ﬁnd
GsHs  NGNH
DGDH
(10.38a)
1  GsHs  1  NGNH
DGDH
 DGDH  NGNH
DGDH
(10.38b)
Ts 
Gs
1  GsHs 
NGDH
DGDH  NGNH
(10.38c)
From Eqs. (10.38), we conclude that (1) the poles of 1  GsHs are the same as the poles
of G(s)H(s), the open-loop system, and (2) the zeros of 1  GsHs are the same as the
poles of T(s), the closed-loop system.
Next, let us deﬁne the term mapping. If we take a complex number on the s-plane and
substitute it into a function, F(s), another complex number results. This process is called
mapping. For example, substituting s  4  j3 into the function s2  2s  1 yields
16  j30. We say that 4  j3 maps into 16  j30 through the function s2  2s  1.
Finally, we discuss the concept of mapping contours. Consider the collection of
points, called a contour, shown in Figure 10.21 as contour A. Also, assume that
Fs  s 
 z1s 
 z2 . . .
s 
 p1s 
 p2 . . .
(10.39)
Contour A can be mapped through F(s) into contour B by substituting each point of contour
A into the function F(s) and plotting the resulting complex numbers. For example, point Q
in Figure 10.21 maps into point Q´ through the function F(s).
The vector approach to performing the calculation, covered in Section 8.1, can be
used as an alternative. Some examples of contour mapping are shown in Figure 10.22
for some simple F(s). The mapping of each point is deﬁned by complex arithmetic,
where the resulting complex number, R, is evaluated from the complex numbers
R(s) +  
–
G(s)
H(s)
C(s)
FIGURE 10.20
Closed-loop
control system
jω
F(s) 
Im
Contour A 
Re
Contour B
s-plane
F-plane
Q'
Q
σ
FIGURE 10.21
Mapping contour A through function F(s) to contour B
10.3 Introduction to the Nyquist Criterion
551

represented by V, as shown in the last column of Figure 10.22. You should verify that if
we assume a clockwise direction for mapping the points on contour A, then contour B
maps in a clockwise direction if F(s) in Figure 10.22 has just zeros or has just poles that
are not encircled by the contour. The contour B maps in a counterclockwise direction if
F(s) has just poles that are encircled by the contour. Also, you should verify that if the
pole or zero of F(s) is enclosed by contour A, the mapping encircles the origin. In the
last case of Figure 10.22, the pole and zero rotation cancel, and the mapping does not
encircle the origin.
Let us now begin the derivation of the Nyquist criterion for stability. We show that a
unique relationship exists between the number of poles of F(s) contained inside contour A,
the number of zeros of F(s) contained inside contour A, and the number of counterclockwise
V
jω
z1
s
F(s) = (s – z1) 
Im
Contour A 
Re
R = V
Contour B
R
F-plane
(a)
V
jω
p1
s-plane
F(s) =
Im
Contour A 
Re
R = V
Contour B
R
F-plane
(b)
1
(s – p1)
1
V
jω
z1
s-plane
Im
Contour A 
Re
R = V
Contour B
R
F-plane
(c)
V
jω
p1
  F(s) =
Im
Contour A 
Re
R = V
Contour B
(d)
1
1
R
V1
jω
p1
s-plane
Im
Contour A 
Re
R =
Contour B
F-plane
(e)
R
z1
(s – z1)
V2
-plane
F(s) = (s – z1)
s-plane
(s – p1)
F-plane
F(s) = (s – p1)
V2
V1
σ
σ
σ
σ
σ
FIGURE 10.22
Examples of
contour mapping
552
Chapter 10
Frequency Response Techniques

encirclements of the origin for the mapping of contour B. We then show how this
interrelationship can be used to determine the stability of closed-loop systems. This method
of determining stability is called the Nyquist criterion.
Let us ﬁrst assume that Fs  1  GsHs, with the picture of the poles and zeros of
1  GsHs as shown in Figure 10.23 near contour A. Hence, R  V1V2=V3V4V5. As
each point Q of the contour A is substituted into 1  GsHs, a mapped point results on
contour B. Assuming that Fs  1  GsHs has two zeros and three poles, each
parenthetical term of Eq. (10.39) is a vector in Figure 10.23. As we move around contour
A in a clockwise direction, each vector of Eq. (10.39) that lies inside contour A will appear to
undergo a complete rotation, or a change in angle of 360°. On the other hand, each vector
drawn from the poles and zeros of 1  GsHs that exists outside contour A will appear to
oscillate and return to its previous position, undergoing a net angular change of 0°.
Each pole or zero factor of 1  GsHs whose vector undergoes a complete rotation
around contour A must yield a change of 360° in the resultant, R, or a complete rotation of
the mapping of contour B. If we move in a clockwise direction along contour A, each
zero inside contour A yields a rotation in the clockwise direction, while each pole inside
contour A yields a rotation in the counterclockwise direction, since poles are in the
denominator of Eq. (10.39).
Thus, N  P 
 Z, where N equals the number of counterclockwise rotations of
contour B about the origin; P equals the number of poles of 1  GsHs inside
contour A, and Z equals the number of zeros of 1  GsHs inside contour A.
Since the poles shown in Figure 10.23 are poles of 1  GsHs, we know from
Eqs. (10.38) that they are also the poles of G(s)H(s) and are known. But, since the zeros
shown in Figure 10.23 are the zeros of 1  GsHs, we know from Eqs. (10.38) that they
are also the poles of the closed-loop system and are not known. Thus, P equals the number
of enclosed open-loop poles, and Z equals the number of enclosed closed-loop poles. Hence,
N  P 
 Z, or alternately, Z  P 
 N, tells us that the number of closed-loop poles
inside the contour (which is the same as the zeros inside the contour) equals the number
of open-loop poles of G(s)H(s) inside the contour minus the number of counterclockwise
rotations of the mapping about the origin.
If we extend the contour to include the entire right half-plane, as shown in
Figure 10.24, we can count the number of right-half-plane closed-loop poles inside contour
A and determine a system’s stability. Since we can count the number of open-loop poles,
P, inside the contour, which are the same as the right-half-plane poles of G(s)H(s), the only
problem remaining is how to obtain the mapping and ﬁnd N.
Since all of the poles and zeros of G(s)H(s) are known, what if we map through
G(s)H(s) instead of 1  GsHs? The resulting contour is the same as a mapping
through 1  GsHs, except that it is translated one unit to the left. Thus, we count
rotations about 
1 instead of rotations about the origin. Hence, the ﬁnal statement of the
Nyquist stability criterion is as follows:
If a contour, A, that encircles the entire right half-plane is mapped through
G(s)H(s), then the number of closed-loop poles, Z, in the right half-plane equals
s-plane
A
jω
σ
FIGURE 10.24
Contour
enclosing right half-plane to
determine stability
F(s) = 1 + G(s)H(s)
V2
V3
V4
Q
V1
jω
s-plane
Contour A
1 + GH-plane
Contour B
V1
R
Im
Re
=
V5
V2
V3V4V5
R
σ
FIGURE 10.23
Vector
representation of mapping
10.3 Introduction to the Nyquist Criterion
553

the number of open-loop poles, P, that are in the right half-plane minus the
number of counterclockwise revolutions, N, around 
1 of the mapping; that
is, Z  P 
 N. The mapping is called the Nyquist diagram, or Nyquist plot, of
G(s)H(s).
We can now see why this method is classiﬁed as a frequency response technique.
Around contour A in Figure 10.24, the mapping of the points on the jω-axis through the
function G(s)H(s) is the same as substituting s  jω into G(s)H(s) to form the frequency
response function G jωH jω. We are thus ﬁnding the frequency response of G(s)H(s)
over that part of contour A on the positive jω-axis. In other words, part of the Nyquist
diagram is the polar plot of the frequency response of G(s)H(s).
Applying the Nyquist Criterion to Determine Stability
Before describing how to sketch a Nyquist diagram, let us look at some typical examples that
use the Nyquist criterion to determine the stability of a system. These examples give us
a perspective prior to engaging in the details of mapping. Figure 10.25(a) shows a contour A
that does not enclose closed-loop poles, that is, the zeros of 1  GsHs. The contour thus
maps through G(s)H(s) into a Nyquist diagram that does not encircle 
1. Hence,
P  0; N  0, and Z  P 
 N  0. Since Z is the number of closed-loop poles inside contour
A, which encircles the right half-plane, this system has no right-half-plane poles and is stable.
On the other hand, Figure 10.25(b) shows a contour A that, while it does not enclose open-
loop poles, does generate two clockwise encirclements of 
1. Thus, P  0; N  
2, and the
system is unstable; it has two closed-loop poles in the right half-plane, since Z  P 
 N  2.
The two closed-loop poles are shown inside contour A in Figure 10.25(b) as zeros of
1  GsHs. You should keep in mind that the existence of these poles is not known a priori.
In this example, notice that clockwise encirclements imply a negative value for N.
The number of encirclements can be determined by drawing a test radius from 
1 in any
convenient direction and counting the number of times the Nyquist diagram crosses the test
radius. Counterclockwise crossings are positive, and clockwise crossings are negative. For
example, in Figure 10.25(b), contour B crosses the test radius twice in a clockwise direction.
Hence, there are 
2 encirclements of the point 
1.
A
jω
A
s-plane
Test radius
Im
GH-plane
–1
B
Re
Re
B
Im
GH-plane
–1
(a)
(b)
s-plane
G(s)H(s)
G(s)H(s)
= zeros of 1 + G(s)H(s)
= poles of closed-loop system
= poles of 1 + G(s)H(s)
= poles of G(s)H(s)
Location is known
Location not known
jω
σ
σ
FIGURE 10.25
Mapping
examples: a. Contour does not
enclose closed-loop poles;
b. contour does enclose
closed-loop poles
554
Chapter 10
Frequency Response Techniques

Before applying the Nyquist criterion to other examples in order to determine a
system’s stability, we must ﬁrst gain experience in sketching Nyquist diagrams. The next
section covers the development of this skill.
10.4 Sketching the Nyquist Diagram
The contour that encloses the right half-plane can be mapped through the function G(s)H(s)
by substituting points along the contour into G(s)H(s). The points along the positive
extension of the imaginary axis yield the polar frequency response of G(s)H(s).
Approximations can be made to G(s)H(s) for points around the inﬁnite semicircle by
assuming that the vectors originate at the origin. Thus, their length is inﬁnite, and their
angles are easily evaluated.
However, most of the time a simple sketch of the Nyquist diagram is all that is
needed. A sketch can be obtained rapidly by looking at the vectors of G(s)H(s) and their
motion along the contour. In the examples that follow, we stress this rapid method
for sketching the Nyquist diagram. However, the examples also include analytical
expressions for G(s)H(s) for each section of the contour to aid you in determining
the shape of the Nyquist diagram.
Example 10.4
Sketching a Nyquist Diagram
Sketching a Nyquist Diagram
PROBLEM: Speed controls ﬁnd wide application throughout industry and the home.
Figure 10.26(a) shows one application: output frequency control of electrical power
from a turbine and generator pair. By regulating the speed, the control system ensures
that the generated frequency remains within tolerance. Deviations from the desired
speed are sensed, and a steam valve is changed to compensate for the speed error. The
system block diagram is shown in Figure 10.26(b). Sketch the Nyquist diagram for the
system of Figure 10.26.
 Generator
Turbine
Controller
Valve
actuator
Desired speed
or frequency
Frequency or speed
measurements
(a)
Steam
(b)
Desired
speed +
–
Turbine
Amplifier,
valve actuator, and
steam valve
Generator
E (s)
Steam
pressure
Torque
Actual
speed
100
(s + 10)
1
(s + 3)
5
(s + 1)
Sensor
FIGURE 10.26
a. Turbine
and generator; b. block diagram
of speed control system for
Example 10.4
10.4 Sketching the Nyquist Diagram
555

SOLUTION: Conceptually, the Nyquist diagram is plotted by substituting the points of
the contour shown in Figure 10.27(a) into Gs  500=s  1s  3s  10. This
process is equivalent to performing complex arithmetic using the vectors of G(s) drawn
to the points of the contour as shown in Figure 10.27(a) and (b). Each pole and zero
term of G(s) shown in Figure 10.26(b) is a vector in Figure 10.27(a) and (b). The
resultant vector, R, found at any point along the contour is in general the product of
the zero vectors divided by the product of the pole vectors (see Figure 10.27(c)). Thus,
the magnitude of the resultant is the product of the zero lengths divided by the product
of the pole lengths, and the angle of the resultant is the sum of the zero angles minus
the sum of the pole angles.
As we move in a clockwise direction around the contour from point A to point
C in Figure 10.27(a), the resultant angle goes from 0° to 
3  90°  
270°, or from
A´ to C´ in Figure 10.27(c). Since the angles emanate from poles in the denominator
of G(s), the rotation or increase in angle is really a decrease in angle of the function
G(s); the poles gain 270° in a counterclockwise direction, which explains why the
function loses 270°.
While the resultant moves from A´ to C ´ in Figure 10.27(c), its magnitude changes as
the product of the zero lengths divided by the product of the pole lengths. Thus, the
Q'
Im
50
3
Re
A'
B'
–j8.36
D'
C'
–0.874
(c)
GH-plane
B'= V1V2V3
500
jω
–3
–1
–10
C
A
D
B
(a)
s-plane
V1
V2
V3
C
D
–3
–1
–10
(b)
s-plane
B
jω
V3
V2
V1
A
σ
σ
FIGURE 10.27
Vector evaluation of the Nyquist diagram for Example 10.4: a. vectors on contour at
low frequency; b. vectors on contour around inﬁnity; c. Nyquist diagram
556
Chapter 10
Frequency Response Techniques

resultant goes from a ﬁnite value at zero frequency (at point A of Figure 10.27(a), there are
three ﬁnite pole lengths) to zero magnitude at inﬁnite frequency at point C (at point C of
Figure 10.27(a), there are three inﬁnite pole lengths).
The mapping from point A to point C can also be explained analytically. From A to C
the collection of points along the contour is imaginary. Hence, from A to C, Gs  Gjω,
or from Figure 10.26(b),
Gjω 
500
s  1s  3s  10

s ® jω

500

14ω2  30  j43ω 
 ω3
(10.40)
Multiplying the numerator and denominator by the complex conjugate of the denominator,
we obtain
Gjω  500 
14ω2  30 
 j43ω 
 ω3

14ω2  302  43ω 
 ω32
(10.41)
At zero frequency, Gjω  500=30  50=3. Thus, the Nyquist diagram starts at 50=3 at
an angle of 0°. As ω increases, the real part remains positive and the imaginary part remains
negative. At ω 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
30=14
p
, the real part becomes negative. At ω 
ﬃﬃﬃﬃﬃ
43
p
, the Nyquist
diagram crosses the negative real axis, since the imaginary term goes to zero. The
real value at the axis crossing, point Q´ in Figure 10.27(c), found by substituting
into Eq. (10.41), is 
0.874. Continuing toward ω  ∞, the real part is negative, and
the imaginary part is positive. At inﬁnite frequency Gjω ≈j500=ω3, or approximately
zero at 90°.
Around the inﬁnite semicircle from point C to point D shown in Figure 10.27(b),
the vectors rotate clockwise, each by 180°. Hence, the resultant undergoes a counter-
clockwise rotation of 3  180°, starting at point C´ and ending at point D´ of Figure
10.27(c). Analytically, we can see this by assuming that around the inﬁnite semicircle,
the vectors originate approximately at the origin and have inﬁnite length. For any point
on the s-plane, the value of G(s) can be found by representing each complex number in
polar form, as follows:
Gs 
500
R
1ejθ
1R
3ejθ
3R
10ejθ
10
(10.42)
where R
i is the magnitude of the complex number s  i, and θ
i is the angle of the
complex number s  i. Around the inﬁnite semicircle, all R
i are inﬁnite, and we can use
our assumption to approximate the angles as if the vectors originated at the origin. Thus,
around the inﬁnite semicircle,
Gs 
500
∞θ
1  θ
3  θ
10  0 
 θ
1  θ
3  θ
10
(10.43)
At point C in Figure 10.27(b), the angles are all 90°. Hence, the resultant is 0 
 270°,
shown as point C´ in Figure 10.27(c). Similarly, at point D, Gs  0  270° and maps
into point D´. You can select intermediate points to verify the spiral whose radius vector
approaches zero at the origin, as shown in Figure 10.27(c).
The negative imaginary axis can be mapped by realizing that the real part of
GjωHjω is always an even function, whereas the imaginary part of GjωHjω is an
odd function. That is, the real part will not change sign when negative values of ω are used,
whereas the imaginary part will change sign. Thus, the mapping of the negative imaginary
axis is a mirror image of the mapping of the positive imaginary axis. The mapping of the
section of the contour from points D to A is drawn as a mirror image about the real axis of
the mapping of points A to C.
10.4 Sketching the Nyquist Diagram
557

In the previous example, there were no open-loop poles situated along the contour
enclosing the right half-plane. If such poles exist, then a detour around the poles on the
contour is required; otherwise, the mapping would go to inﬁnity in an undetermined way,
without angular information. Subsequently, a complete sketch of the Nyquist diagram could
not be made, and the number of encirclements of 
1 could not be found.
Let us assume a GsHs  Ns=sDs where D(s) has imaginary roots. The s term
in the denominator and the imaginary roots of D(s) are poles of G(s)H(s) that lie on the
contour, as shown in Figure 10.28(a). To sketch the Nyquist diagram, the contour must
detour around each open-loop pole lying on its path. The detour can be to the right of the
pole, as shown in Figure 10.28(b), which makes it clear that each pole’s vector rotates
through 180° as we move around the contour near that pole. This knowledge of the
angular rotation of the poles on the contour permits us to complete the Nyquist diagram.
Of course, our detour must carry us only an inﬁnitesimal distance into the right half-plane,
or else some closed-loop, right-half-plane poles will be excluded in the count.
We can also detour to the left of the open-loop poles. In this case, each pole rotates
through an angle of 
180° as we detour around it. Again, the detour must be inﬁnitesimally
small, or else we might include some left-half-plane poles in the count. Let us look at an
example.
jω
jω
jω
(a)
(b)
(c)
s-plane
s-plane
s-plane
σ
σ
σ
FIGURE 10.28
Detouring
around open-loop poles:
a. poles on contour; b. detour
right; c. detour left
Example 10.5
Nyquist Diagram for Open-Loop Function with Poles
on Contour
Nyquist Diagram for Open-Loop Function with Poles
on Contour
PROBLEM: Sketch the Nyquist diagram of the unity feedback system of Figure 10.10,
where Gs  s  2=s2.
SOLUTION: The system’s two poles at the origin are on the contour and must be
bypassed, as shown in Figure 10.29(a). The mapping starts at point A and continues in a
clockwise direction. Points A, B, C, D, E, and F of Figure 10.29(a) map, respectively,
into points A´; B´; C´; D´; E´; and F´ of Figure 10.29(b).
At point A, the two open-loop poles at the origin contribute 2  90°  180°, and the
zero contributes 0°. The total angle at point A is thus 
180°. Close to the origin, the
function is inﬁnite in magnitude because of the close proximity to the two open-loop poles.
Thus, point A maps into point A´, located at inﬁnity at an angle of 
180°.
Moving from point A to point B along the contour yields a net change in angle of
90° from the zero alone. The angles of the poles remain the same. Thus, the mapping
changes by 90° in the counterclockwise direction. The mapped vector goes from

180° at A´ to 
 90° at B´. At the same time, the magnitude changes from inﬁnity to
zero, since at point B there is one inﬁnite length from the zero divided by two inﬁnite
lengths from the poles.
558
Chapter 10
Frequency Response Techniques

Alternately,
the frequency response can be determined analytically from
G jω  2  jω=
ω2, considering ω going from 0 to ∞. At low frequencies,
G jω ≈2=
ω2, or ∞180°. At high frequencies, G jω ≈j=
ω, or 0 
 90°.
Also, the real and imaginary parts are always negative.
As we travel along the contour BCD, the function magnitude stays at zero (one
inﬁnite zero length divided by two inﬁnite pole lengths). As the vectors move through
BCD, the zero’s vector and the two poles’ vectors undergo changes of 
180° each. Thus,
the mapped vector undergoes a net change of 180°, which is the angular change of the
zero minus the sum of the angular changes of the poles f
180 
 2
180  180g.
The mapping is shown as B´ C´ D´, where the resultant vector changes by 180° with a
magnitude of ε that approaches zero.
From the analytical point of view,
Gs 
R
2θ
2
R0θ0R0θ0
(10.44)
anywhere on the s-plane where R
2θ
2 is the vector from the zero at 
2 to any point on
the s-plane, and R0 θ0 is the vector from a pole at the origin to any point on the s-plane.
Around the inﬁnite semicircle, all R
i  ∞, and all angles can be approximated as if the
vectors originated at the origin. Thus at point B, Gs  0 
 90°, since all θ
i  90° in
Eq. (10.44). At point C, all R
i  ∞, and all θ
i  0° in Eq. (10.44). Thus, Gs  00°.
At point D, all R
i  ∞, and all θ
i  
90° in Eq. (10.44). Thus, Gs  090°.
The mapping of the section of the contour from D to E is a mirror image of the
mapping of A to B. The result is D´ to E´.
Finally, over the section EFA, the resultant magnitude approaches inﬁnity. The
angle of the zero does not change, but each pole changes by 180°. This change yields a
change in the function of 
2  180°  
360°. Thus, the mapping from E´ to A´ is shown as
inﬁnite in length and rotating 
360°. Analytically, we can use Eq. (10.44) for the points
along the contour EFA. At E, Gs  20°=ϵ 
 90°ϵ 
 90°  ∞180°. At
F, Gs  20°=ϵ 0°ϵ 0°  ∞0°. At A, Gs  20°=ϵ 90°ϵ 90° 
∞ 
 180°.
The Nyquist diagram is now complete, and a test radius drawn from 
1 in
Figure 10.29(b) shows one counterclockwise revolution, and one clockwise revolution,
yielding zero encirclements.
Students who are using MATLAB should now run ch10p2 in Appendix B.
You will learn how to use MATLAB to make a Nyquist plot and
list the points on the plot. You will also learn how to specify
a range for frequency. This exercise solves Example 10.5 using
MATLAB.
E
A
F
C
B
D
F'
A'
E'
D'
B'
–2
Two poles
jω
Test radius
Im
Re
–1
(a)
(b)
GH-plane
s-plane
σ
C'
FIGURE 10.29
a. Contour
for Example 10.5; b. Nyquist
diagram for Example 10.5
10.4 Sketching the Nyquist Diagram
559

In this section, we learned how to sketch a Nyquist diagram. We saw how to calculate
the value of the intersection of the Nyquist diagram with the negative real axis. This
intersection is important in determining the number of encirclements of 
1. Also, we
showed how to sketch the Nyquist diagram when open-loop poles exist on the contour; this
case required detours around the poles. In the next section, we apply the Nyquist criterion to
determine the stability of feedback control systems.
10.5 Stability via the Nyquist Diagram
We now use the Nyquist diagram to determine a system’s stability, using the simple equation
Z  P 
 N. The values of P, the number of open-loop poles of G(s)H(s) enclosed by the
contour, and N, the number of encirclements the Nyquist diagram makes about 
1, are used
to determine Z, the number of right-half-plane poles of the closed-loop system.
If the closed-loop system has a variable gain in the loop, one question we would like to
ask is, “For what range of gain is the system stable?” This question, previously answered
by the root locus method and the Routh-Hurwitz criterion, is now answered via the Nyquist
criterion. The general approach is to set the loop gain equal to unity and draw the Nyquist
diagram. Since gain is simply a multiplying factor, the effect of the gain is to multiply the
resultant by a constant anywhere along the Nyquist diagram.
For example, consider Figure 10.30, which summarizes the Nyquist approach for a
system with variable gain, K. As the gain is varied, we can visualize the Nyquist diagram in
Figure 10.30(c) expanding (increased gain) or shrinking (decreased gain) like a balloon.
Skill-Assessment Exercise 10.3
PROBLEM: Sketch the Nyquist diagram for the system shown in Figure 10.10 where
Gs 
1
s  2s  4
Compare your sketch with the polar plot in Skill-Assessment Exercise 10.1(c).
ANSWER: The complete solution is located at www.wiley.com/college/nise.
A
C
B
–1.33
15
8
ω =  11
B'
A'
C'
(a)
R(s) +
–
E(s)
(s – 2)(s – 4)
K(s + 3)(s + 5)
C(s)
–3
–5
2
4
jω
(b)
s-plane
Im
Re
(c)
GH-plane
1
– K
1
σ
FIGURE 10.30
Demonstrat-
ing Nyquist stability: a. system;
b. contour; c. Nyquist diagram
TryIt 10.2
Use MATLAB, the Control
System Toolbox, and the
following statements to plot the
Nyquist diagram of the system
shown in Figure 10.30(a).
G=zpk([
3,
5],...
[2,4],1)
nyquist(G)
After the Nyquist diagram
appears, click on the curve and
drag to read the coordinates.
560
Chapter 10
Frequency Response Techniques

This motion could move the Nyquist diagram past the 
1 point, changing the stability
picture. For this system, since P  2, the critical point must be encircled by the Nyquist
diagram to yield N  2 and a stable system. A reduction in gain would place the critical
point outside the Nyquist diagram where N  0, yielding Z  2, an unstable system.
From another perspective we can think of the Nyquist diagram as remaining stationary
and the 
1 point moving along the real axis. In order to do this, we set the gain to unity and
position the critical point at 
1=K rather than 
1. Thus, the critical point appears to move
closer to the origin as K increases.
Finally, if the Nyquist diagram intersects the real axis at 
1, then G jωH jω  
1.
From root locus concepts, when GsHs  
1, the variable s is a closed-loop pole of the
system. Thus, the frequency at which the Nyquist diagram intersects 
1 is the same
frequency at which the root locus crosses the jω-axis. Hence, the system is marginally stable
if the Nyquist diagram intersects the real axis at 
1.
In summary, then, if the open-loop system contains a variable gain, K, set K  1 and
sketch the Nyquist diagram. Consider the critical point to be at 
1=K rather than at 
1.
Adjust the value of K to yield stability, based upon the Nyquist criterion.
Example 10.6
Range of Gain for Stability via the Nyquist Criterion
Range of Gain for Stability via the Nyquist Criterion
PROBLEM: For the unity feedback system of Figure 10.10, where Gs 
K=ss  3 s  5, ﬁnd the range of gain, K, for stability, instability, and the value of
gain for marginal stability. For marginal stability also ﬁnd the frequency of oscillation.
Use the Nyquist criterion.
SOLUTION: First set K  1 and sketch the Nyquist diagram for the system, using the
contour shown in Figure 10.31(a). For all points on the imaginary axis,
G jωH jω 
K
ss  3s  5
K1
sjω
 
8ω2 
 j15ω 
 ω3
64ω4  ω215 
 ω22
(10.45)
At ω  0; G jωH jω  
0:0356 
 j∞.
Next ﬁnd the point where the Nyquist diagram intersects the negative real axis.
Setting the imaginary part of Eq. (10.45) equal to zero, we ﬁnd ω 
ﬃﬃﬃﬃﬃ
15
p
. Substituting this
jω
–5
–3
– 0.0083
–1
15
Re
(  )
b
(  )
a
Im
s-plane
= 0 +
= 0 –
= –∞
= +∞
= 0 +
= 0 –
=
GH-plane
ω
= –∞
ω
ω
ω
ω
= +∞
ω
ω
ω
σ
FIGURE 10.31
a. Contour for Example 10.6; b. Nyquist diagram
10.5 Stability via the Nyquist Diagram
561

Now that we have used the Nyquist diagram to determine stability, we can develop a
simpliﬁed approach that uses only the mapping of the positive jω-axis.
Stability via Mapping Only the Positive jω-Axis
Once the stability of a system is determined by the Nyquist criterion, continued evaluation
of the system can be simpliﬁed by using just the mapping of the positive jω-axis. This
concept plays a major role in the next two sections, where we discuss stability margin and
the implementation of the Nyquist criterion with Bode plots.
Consider the system shown in Figure 10.32, which is stable at low values of gain and
unstable at high values of gain. Since the contour does not encircle open-loop poles, the
Nyquist criterion tells us that we must have no encirclements of 
1 for the system to be
stable. We can see from the Nyquist diagram that the encirclements of the critical point can
be determined from the mapping of the positive jω-axis alone. If the gain is small, the
mapping will pass to the right of 
1, and the system will be stable. If the gain is high, the
mapping will pass to the left of 
1, and the system will be unstable. Thus, this system is
stable for the range of loop gain, K, that ensures that the open-loop magnitude is less than
unity at that frequency where the phase angle is 180° (or, equivalently, 
180°). This
statement is thus an alternative to the Nyquist criterion for this system.
Now consider the system shown in Figure 10.33, which is unstable at low values of
gain and stable at high values of gain. Since the contour encloses two open-loop poles, two
counterclockwise encirclements of the critical point are required for stability. Thus, for this
case the system is stable if the open-loop magnitude is greater than unity at that frequency
where the phase angle is 180° (or, equivalently, 
180°).
In summary, ﬁrst determine stability from the Nyquist criterion and the Nyquist
diagram. Next, interpret the Nyquist criterion and determine whether the mapping of just the
positive imaginary axis should have a gain of less than or greater than unity at 180°. If the
Nyquist diagram crosses 180° at multiple frequencies, determine the interpretation from
the Nyquist criterion.
value of ω back into Eq. (10.45) yields the real part of 
0.0083. Finally, at ω  ∞,
G jωH jω  GsHsjs ® j∞ 1= j∞3  0 
 270°.
From the contour of Figure 10.31(a), P  0; for stability N must then be equal
to zero. From Figure 10.31(b), the system is stable if the critical point lies outside the
contour N  0, so that Z  P 
 N  0. Thus, K can be increased by 1=0:0083  120:5
before the Nyquist diagram encircles 
1. Hence, for stability, K < 120:5. For marginal
stability K  120:5. At this gain the Nyquist diagram intersects 
1, and the frequency of
oscillation is
ﬃﬃﬃﬃﬃ
15
p
rad/s.
(  )
(  )
A
Contour
s-plane
C
B
jω
Root locus
Im
Re
GH-plane
 
A'
B'
C'
–1
a
b
σ
FIGURE 10.32
a. Contour
and root locus of system that is
stable for small gain and
unstable for large gain;
b. Nyquist diagram
562
Chapter 10
Frequency Response Techniques

A
C
B
A'
B'
C'
Contour
jω
Root locus
Im
Re
 –1
s-plane
GH-plane
(  )
b
(  )
a
σ
FIGURE 10.33
a. Contour
and root locus of system that is
unstable for small gain and
stable for large gain; b. Nyquist
diagram
Example 10.7
Stability Design via Mapping Positive jω-Axis
Stability Design via Mapping Positive jω-Axis
PROBLEM: Find the range of gain for stability and instability, and the gain for
marginal stability, for the unity feedback system shown in Figure 10.10, where
Gs  K=s2 2s  2s  2. For marginal stability, ﬁnd the radian frequency of
oscillation. Use the Nyquist criterion and the mapping of only the positive imaginary axis.
SOLUTION: Since the open-loop poles are only in the left-half-plane, the Nyquist
criterion tells us that we want no encirclements of 
1 for stability. Hence, a gain less than
unity at 180° is required. Begin by letting K  1 and draw the portion of the contour
along the positive imaginary axis as shown in Figure 10.34(a). In Figure 10.34(b), the
intersection with the negative real axis is found by letting s  jω in G(s)H(s), setting the
imaginary part equal to zero to ﬁnd the frequency, and then substituting the frequency
into the real part of G jωH jω. Thus, for any point on the positive imaginary axis,
G jωH jω 
1
s2  2s  2s  2

s ® jω

41 
 ω2 
 jω6 
 ω2
161 
 ω22  ω26 
 ω22
(10.46)
Setting the imaginary part equal to zero, we ﬁnd ω 
ﬃﬃﬃ
6
p
. Substituting this value back into
Eq. (10.46) yields the real part, 
1=20  1=20180°.
This closed-loop system is stable if the magnitude of the frequency response is less
than unity at 180°. Hence, the system is stable for K < 20, unstable for K > 20, and
marginally stable for K  20. When the system is marginally stable, the radian frequency
of oscillation is
ﬃﬃﬃ
6
p
.
(  )
a
(  )
b
–2
 –1
jω
Im
Re
GH-plane
1
20
–
1
4
j
Contour
1
A
B
B'
A'
s-plane
σ
ω
FIGURE 10.34
a. Portion of
contour to be mapped for
Example 10.7; b. Nyquist
diagram of mapping of positive
imaginary axis
10.5 Stability via the Nyquist Diagram
563

10.6 Gain Margin and Phase Margin via
the Nyquist Diagram
Now that we know how to sketch and interpret a Nyquist diagram to determine a closed-loop
system’s stability, let us extend our discussion to concepts that will eventually lead us to the
design of transient response characteristics via frequency response techniques.
Using the Nyquist diagram, we deﬁne two quantitative measures of how stable a system
is. These quantities are called gain margin and phase margin. Systems with greater gain and
phase margins can withstand greater changes in system parameters before becoming unstable.
In a sense, gain and phase margins can be qualitatively related to the root locus, in that systems
whose poles are farther from the imaginary axis have a greater degree of stability.
In the last section, we discussed stability from the point of view of gain at 180° phase
shift. This concept leads to the following deﬁnitions of gain margin and phase margin:
Gain margin, GM. The gain margin is the change in open-loop gain, expressed in
decibels (dB), required at 180° of phase shift to make the closed-loop system unstable.
Phase margin, ΦM. The phase margin is the change in open-loop phase shift required at
unity gain to make the closed-loop system unstable.
These two deﬁnitions are shown graphically on the Nyquist diagram in Figure 10.35.
Assume a system that is stable if there are no encirclements of 
1. Using
Figure 10.35, let us focus on the deﬁnition of gain margin. Here a gain difference
between the Nyquist diagram’s crossing of the real axis at 
1=a and the 
1 critical point
determines the proximity of the system to instability. Thus, if the gain of the system were
multiplied by a units, the Nyquist diagram would intersect the critical point. We then say
that the gain margin is a units, or, expressed in dB, GM  20 log a. Notice that the gain
margin is the reciprocal of the real-axis crossing expressed in dB.
In Figure 10.35, we also see the phase margin graphically displayed. At point Q´,
where the gain is unity, a represents the system’s proximity to instability. That is, at unity
gain, if a phase shift of α degrees occurs, the system becomes unstable. Hence, the amount
of phase margin is α. Later in the chapter, we show that phase margin can be related to the
damping ratio. Thus, we will be able to relate frequency response characteristics to
Skill-Assessment Exercise 10.4
PROBLEM: For the system shown in Figure 10.10, where
Gs 
K
s  2s  4s  6
do the following:
a. Plot the Nyquist diagram.
b. Use your Nyquist diagram to ﬁnd the range of gain, K, for stability.
ANSWERS:
a. See the answer at www.wiley.com/college/nise.
b. Stable for K < 480
The complete solution is at www.wiley.com/college/nise.
564
Chapter 10
Frequency Response Techniques

transient response characteristics as well as stability. We will also show that the
calculations of gain and phase margins are more convenient if Bode plots are used
rather than a Nyquist diagram, such as that shown in Figure 10.35.
For now, let us look at an example that shows the calculation of the gain and phase
margins.
– 1
– 1a
1
Nyquist
diagram
Unit circle
Im
Gain margin = GM = 20 log a
Phase margin = ΦM =  α
Gain difference
before instability
Phase difference
before instability
GH-plane
Re
Q'
α
FIGURE 10.35
Nyquist
diagram showing gain and
phase margins
Example 10.8
Finding Gain and Phase Margins
Finding Gain and Phase Margins
PROBLEM: Find the gain and phase margin for the system of Example 10.7 if K  6.
SOLUTION: To ﬁnd the gain margin, ﬁrst ﬁnd the frequency where the Nyquist diagram
crosses the negative real axis. Finding G jωH jω, we have
G jωH jω 
6
s2  2s  2s  2

s ® jω
 641 
 ω2 
 jω6 
 ω2
161 
 ω22  ω26 
 ω22
(10.47)
The Nyquist diagram crosses the real axis at a frequency of
ﬃﬃﬃ
6
p
rad/s. The real part is
calculated to be 
0.3. Thus, the gain can be increased by 1=0:3  3:33 before the real part
becomes 
1. Hence, the gain margin is
GM  20 log 3:33  10:45 dB
(10.48)
To ﬁnd the phase margin, ﬁnd the frequency in Eq. (10.47) for which the magnitude
is unity. As the problem stands, this calculation requires computational tools, such as a
function solver or the program described in Appendix H.2. Later in the chapter we will
simplify the process by using Bode plots. Equation (10.47) has unity gain at a frequency of
1.253 rad/s. At this frequency, the phase angle is 
112:3°. The difference between this
angle and 
180° is 67:7°, which is the phase margin.
10.6 Gain Margin and Phase Margin via the Nyquist Diagram
565

In this section, we deﬁned gain margin and phase margin and calculated them via
the Nyquist diagram. In the next section, we show how to use Bode diagrams to
implement the stability calculations performed in Sections 10.5 and 10.6 using the
Nyquist diagram. We will see that the Bode plots reduce the time and simplify the
calculations required to obtain results.
10.7 Stability, Gain Margin, and Phase Margin
via Bode Plots
In this section, we determine stability, gain and phase margins, and the range of gain
required for stability. All of these topics were covered previously in this chapter, using
Nyquist diagrams as the tool. Now we use Bode plots to determine these characteristics.
Bode plots are subsets of the complete Nyquist diagram but in another form. They are a
viable alternative to Nyquist plots, since they are easily drawn without the aid of the
computational devices or long calculations required for the Nyquist diagram and root locus.
You should remember that all calculations applied to stability were derived from and based
upon the Nyquist stability criterion. The Bode plots are an alternate way of visualizing and
implementing the theoretical concepts.
Determining Stability
Let us look at an example and determine the stability of a system, implementing the Nyquist
stability criterion using Bode plots. We will draw a Bode log-magnitude plot and then
Students who are using MATLAB should now run ch10p3 in Appendix B.
You will learn how to use MATLAB to ﬁnd gain margin, phase margin,
zero dB frequency, and 180° frequency. This exercise solves Exam-
ple 10.8 using MATLAB.
MATLAB’s LTI Viewer, with the Nyquist diagram selected, is
another method that may be used to ﬁnd gain margin, phase margin,
zero dB frequency, and 180° frequency. You are encouraged to study
Appendix E, at www.wiley.com/college/nise, which contains a
tutorial on the LTI Viewer as well as some examples. Example E.2
solves Example 10.8 using the LTI Viewer.
Skill-Assessment Exercise 10.5
PROBLEM: Find the gain margin and the 180° frequency for the problem in
Skill-Assessment Exercise 10.4 if K  100.
ANSWERS: Gain margin  13:62 dB; 180° frequency  6:63 rad/s
The complete solution is at www.wiley.com/college/nise.
TryIt 10.3
Use MATLAB, the Control System Toolbox,
and the following statements to ﬁnd the gain
and phase margins of G(s)H(s) =
100/[(s+2)(s+4)(s+6)] using the
Nyquist diagram.
G=zpk([],[–2,–4,–6],100)
nyquist(G)
After the Nyquist diagram appears:
1. Right-click in the graph area.
2. Select Characteristics.
3. Select All Stability Margins.
4. Let the mouse rest on the margin points to
read the gain and phase margins.
566
Chapter 10
Frequency Response Techniques

determine the value of gain that ensures that the magnitude is less than 0 dB (unity gain) at
that frequency where the phase is 180°.
Example 10.9
Range of Gain for Stability via Bode Plots
Range of Gain for Stability via Bode Plots
PROBLEM: Use Bode plots to determine the range of K within which the unity feedback
system shown in Figure 10.10 is stable. Let Gs  K=s  2s  4s  5.
SOLUTION: Since this system has all of its open-loop poles in the left-half-plane, the
open-loop system is stable. Hence, from the discussion of Section 10.5, the closed-loop
system will be stable if the frequency response has a gain less than unity when the phase
is 180°.
Begin by sketching the Bode magnitude and phase diagrams shown in Figure 10.36.
In Section 10.2, we summed normalized plots of each factor of G(s) to create the Bode
plot. We saw that at each break frequency, the slope of the resultant Bode plot changed by
an amount equal to the new slope that was added. Table 10.6 demonstrates this
observation. In this example, we use this fact to draw the Bode plots faster by avoiding
the sketching of the response of each term.
The low-frequency gain of G(s)H(s) is found by setting s to zero. Thus, the Bode
magnitude plot starts at K=40. For convenience, let K  40 so that the log-magnitude plot
starts at 0 dB. At each break frequency, 2, 4, and 5, a 20 dB/decade increase in negative
slope is drawn, yielding the log-magnitude plot shown in Figure 10.36.
The phase diagram begins at 0° until a decade below the ﬁrst break frequency of
2 rad/s. At 0.2 rad/s the curve decreases at a rate of 
45°/decade, decreasing an additional
–20
–40
20 log40 M
–60
–80
–100
0.01
100
10
0.1
1
Frequency (rad/s)
Frequency (rad/s)
0.01
100
10
0.1
1
0
–120
Phase (degrees)
0
–270
–225
–180
–135
–90
–45
–20 dB/dec
–40 dB/dec
–60 dB/dec
–45°/dec
–90°/dec
–135°/dec
–90°/dec
–45°/dec
FIGURE 10.36
Bode log-magnitude and phase diagrams for the system of Example 10.9
10.7 Stability, Gain Margin, and Phase Margin via Bode Plots
567

Evaluating Gain and Phase Margins
Next we show how to evaluate the gain and phase margins by using Bode plots
(Figure 10.37). The gain margin is found by using the phase plot to ﬁnd the frequency,
ωGM, where the phase angle is 180°. At this frequency, we look at the magnitude plot to
determine the gain margin, GM, which is the gain required to raise the magnitude curve
to 0 dB. To illustrate, in the previous example with K  40, the gain margin was found
to be 20 dB.
The phase margin is found by using the magnitude curve to ﬁnd the frequency, ωΦM,
where the gain is 0 dB. On the phase curve at that frequency, the phase margin, ΦM, is the
difference between the phase value and 180°.
45°/decade at each subsequent frequency (0.4 and 0.5 rad/s) a decade below each break.
At a decade above each break frequency, the slopes are reduced by 45°=decade at each
frequency.
The Nyquist criterion for this example tells us that we want zero encirclements of

1 for stability. Thus, we recognize that the Bode log-magnitude plot must be less
than unity when the Bode phase plot is 180°. Accordingly, we see that at a frequency of
7 rad/s, when the phase plot is 
180°, the magnitude plot is 
20 dB. Therefore, an
increase in gain of +20 dB is possible before the system becomes unstable. Since the
gain plot was scaled for a gain of 40, +20 dB (a gain of 10) represents the required
increase in gain above 40. Hence, the gain for instability is 40  10  400. The ﬁnal
result is 0 < K < 400 for stability.
This result, obtained by approximating the frequency response by Bode asymptotes,
can be compared to the result obtained from the actual frequency response, which yields a
gain of 378 at a frequency of 6.16 rad/s.
Students who are using MATLAB should now run ch10p4 in Appendix B.
You will learn how to use MATLAB to ﬁnd the range of gain for
stability via frequency response methods. This exercise solves
Example 10.10 using MATLAB.
0 dB
Gain
plot
log ω
log ω
180°
Phase (degrees)
Phase
plot
M
GM
M (dB)
wGM
w   M
Φ
ωΦ
ω
FIGURE 10.37
Gain and phase margins on the Bode diagrams
568
Chapter 10
Frequency Response Techniques

Skill-Assessment Exercise 10.6
PROBLEM: For the system shown in Figure 10.10, where
Gs 
K
s  5s  20s  50
do the following:
a. Draw the Bode log-magnitude and phase plots.
b. Find the range of K for stability from your Bode plots.
c. Evaluate gain margin, phase margin, zero dB frequency, and 180° frequency from your
Bode plots for K  10;000.
ANSWERS:
a. See the answer at www.wiley.com/college/nise.
b. K < 96;270
c. Gain margin  19:67 dB, phase margin  92:9°, zero dB frequency  7:74 rad/s, and
180° frequency  36:7 rad/s
The complete solution is at www.wiley.com/college/nise.
Example 10.10
Gain and Phase Margins from Bode Plots
Gain and Phase Margins from Bode Plots
PROBLEM: If K  200 in the system of Example 10.9, ﬁnd the gain margin and the
phase margin.
SOLUTION: The Bode plot in Figure 10.36 is scaled to a gain of 40. If K  200 (ﬁve
times as great), the magnitude plot would be 20 log 5  13:98 dB higher.
To ﬁnd the gain margin, look at the phase plot and ﬁnd the frequency where the
phase is 180°. At this frequency, determine from the magnitude plot how much the gain
can be increased before reaching 0 dB. In Figure 10.36, the phase angle is 180° at
approximately 7 rad/s. On the magnitude plot, the gain is 
20  13:98  
6:02 dB. Thus,
the gain margin is 6.02 dB.
To ﬁnd the phase margin, we look on the magnitude plot for the frequency where the
gain is 0 dB. At this frequency, we look on the phase plot to ﬁnd the difference between
the phase and 180°. This difference is the phase margin. Again, remembering that the
magnitude plot of Figure 10.36 is 13.98 dB lower than the actual plot, the 0 dB crossing
(
13.98 dB for the normalized plot shown in Figure 10.36) occurs at 5.5 rad/s. At this
frequency the phase angle is 
165°. Thus, the phase margin is 
165° 
 
180°  15°.
MATLAB’s LTI Viewer, with Bode plots selected, is another method
that may be used to ﬁnd gain margin, phase margin, zero dB frequency,
and 180° frequency. You are encouraged to study Appendix E at
www.wiley.com/college/nise, which contains a tutorial on the
LTIVieweraswellassomeexamples.ExampleE.3solvesExample10.10
using the LTI Viewer.
TryIt 10.4
Use MATLAB, the Control
System Toolbox, and the
following statements to
solve Skill-Assessment
Exercise 10.6(c) using
Bode plots.
G=zpk([],...
[
5,
20,
50],10000)
bode(G)
grid on
After the Bode plot appears:
1. Right-click in the graph
area.
2. Select Characteristics.
3. Select All Stability
Margins.
4. Let the mouse rest on the
margin points to read the
gain and phase margins.
10.7 Stability, Gain Margin, and Phase Margin via Bode Plots
569

We have seen that the open-loop frequency response curves can be used not only to
determine whether a system is stable but to calculate the range of loop gain that will
ensure stability. We have also seen how to calculate the gain margin and the phase margin
from the Bode diagrams.
Is it then possible to parallel the root locus technique and analyze and design systems
for transient response using frequency response methods? We will begin to explore the
answer in the next section.
10.8 Relation Between Closed-Loop Transient
and Closed-Loop Frequency Responses
Damping Ratio and Closed-Loop Frequency Response
In this section, we will show that a relationship exists between a system’s transient
response and its closed-loop frequency response. In particular, consider the second-order
feedback control system of Figure 10.38, which we have been using since
Chapter 4, where we derived relationships between the closed-loop transient
response and the poles of the closed-loop transfer function,
Cs
Rs  Ts 
ω2
n
s2  2ζωns  ω2
n
(10.49)
We now derive relationships between the transient response of Eq. (10.49) and characteristics
of its frequency response. We deﬁne these characteristics and relate them to damping ratio,
natural frequency, settling time, peak time, and rise time. In Section 10.10, we will show how
to use the frequency response of the open-loop transfer function
Gs 
ω2
n
ss  2ζωn
(10.50)
shown in Figure 10.38, to obtain the same transient response characteristics.
Let us now ﬁnd the frequency response of Eq. (10.49), deﬁne characteristics of this
response, and relate these characteristics to the transient response. Substituting s  jω into
Eq. (10.49), we evaluate the magnitude of the closed-loop frequency response as
M  jT jωj 
ω2
n
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ω2
n 
 ω22  4ζ2ω2
nω2
q
(10.51)
A representative sketch of the log plot of Eq. (10.51) is shown in Figure 10.39.
We now show that a relationship exists between the peak value of the closed-loop
magnitude response and the damping ratio. Squaring Eq. (10.51), differentiating with
respect to ω2, and setting the derivative equal to zero yields the maximum value of M, Mp,
where
Mp 
1
2ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 ζ2
p
(10.52)
at a frequency, ωp, of
ωp  ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 2ζ2
p
(10.53)
s(s + 2𝜁ωn)
–
R(s) +
E(s)
C(s)
n2
ω
FIGURE 10.38
Second-order closed-loop
system
570
Chapter 10
Frequency Response Techniques

Since ζ is related to percent overshoot, we can plot Mp vs. percent overshoot. The result is
shown in Figure 10.40.
Equation (10.52) shows that the maximum magnitude on the frequency response
curve is directly related to the damping ratio and, hence, the percent overshoot. Also notice
from Eq. (10.53) that the peak frequency, ωp, is not the natural frequency. However, for
low values of damping ratio, we can assume that the peak occurs at the natural frequency.
Finally, notice that there will not be a peak at frequencies above zero if ζ > 0:707. This
limiting value of ζ for peaking on the magnitude response curve should not be confused
with overshoot on the step response, where there is overshoot for 0 < ζ < 1.
Response Speed and Closed-Loop Frequency Response
Another relationship between the frequency response and time response is between the
speed of the time response (as measured by settling time, peak time, and rise time) and the
bandwidth of the closed-loop frequency response. Bandwidth is deﬁned here as the
frequency, ωBW, at which the magnitude response curve is 3 dB down from its value at
zero frequency (see Figure 10.39).
The bandwidth of a two-pole system can be found by ﬁnding that frequency for which
M  1=
ﬃﬃﬃ
2
p
(that is, 
3 dB) in Eq. (10.51). The derivation is left as an exercise for the
student. The result is
ωBW  ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4ζ4 
 4ζ2  2
p
q
(10.54)
1
2
3
4
5
6
7
8
0
10
20
30
40
50
60
70
80
Percent overshoot
Mp
FIGURE 10.40
Closed-loop
frequency response peak vs.
percent overshoot for a two-pole
system
–20
–15
–10
–5
5
10
0
–3
log
p
log
BW
Log-frequency (rad/s)
Magnitude (dB)
20 log Mp
ω
ω
FIGURE 10.39
Representa-
tive log-magnitude plot of
Eq. (10.51)
10.8 Relation Between Closed-Loop Transient and Closed-Loop Frequency Responses
571

To relate ωBW to settling time, we substitute ωn  4=Tsζ, derived from Eq. (4.42), into
Eq. (10.54) and obtain
ωBW  4
Tsζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4ζ4 
 4ζ2  2
q
r
(10.55)
Similarly, since ωn  π=Tp
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 ζ2
p
,
ωBW 
π
Tp
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 ζ2
p
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 
 2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4ζ4 
 4ζ2  2
q
r
(10.56)
To relate the bandwidth to rise time, Tr, we use Figure 4.16, knowing the desired ζ and Tr.
For example, assume ζ  0:4 and Tr  0:2 second. Using Figure 4.16, the ordinate
Trωn  1:463,
from
which
ωn  1:463=0:2  7:315 rad/s.
Using
Eq.
(10.54),
ωBW  10:05 rad/s. Normalized plots of Eqs. (10.55) and (10.56) and the relationship
between bandwidth normalized by rise time and damping ratio are shown in Figure 10.41.
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
1.5
1.6
1.7
1.8
1.9
2
2.1
2.2
Damping ratio
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
0
20
40
60
80
100
120
140
4
4.5
5
5.5
6
6.5
7
Damping ratio
Damping ratio
ωBWTs
(c)
(a)
(b)
ωBWTp
ωBWTr
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
FIGURE 10.41
Normalized
bandwidth vs. damping ratio for
a. settling time; b. peak time;
c. rise time
Skill-Assessment Exercise 10.7
PROBLEM: Find the closed-loop bandwidth required for 20% overshoot and 2-seconds
settling time.
ANSWER: ωBW  5:79 rad/s
The complete solution is at www.wiley.com/college/nise.
572
Chapter 10
Frequency Response Techniques

In this section, we related the closed-loop transient response to the closed-loop
frequency response via bandwidth. We continue by relating the closed-loop frequency
response to the open-loop frequency response and explaining the impetus.
10.9 Relation Between Closed- and Open-Loop
Frequency Responses
At this point, we do not have an easy way of ﬁnding the closed-loop frequency response
from which we could determine Mp and thus the transient response.2 As we have seen, we
are equipped to rapidly sketch the open-loop frequency response but not the closed-loop
frequency response. However, if the open-loop response is related to the closed-loop
response, we can combine the ease of sketching the open-loop response with the transient
response information contained in the closed-loop response.
Constant M Circles and Constant N Circles
Consider a unity feedback system whose closed-loop transfer function is
Ts 
Gs
1  Gs
(10.57)
The frequency response of this closed-loop function is
T jω 
G jω
1  G jω
(10.58)
Since G jω is a complex number, let G jω  Pω  jQω in Eq. (10.58), which
yields
T jω 
Pω  jQω
 Pω  1

  jQω
(10.59)
Therefore,
M2  jT2 jωj 
P2ω  Q2ω
 Pω  1

2  Q2ω
(10.60)
Equation (10.60) can be put into the form
P 
M2
M2 
 1

2
 Q2 
M2
M2 
 12
(10.61)
which is the equation of a circle of radius M=M2 
 1 centered at 
M2=M2 
 1; 0. These
circles, shown plotted in Figure 10.42 for various values of M, are called constant M circles
and are the locus of the closed-loop magnitude frequency response for unity feedback
systems. Thus, if the polar frequency response of an open-loop function, G(s), is plotted and
superimposed on top of the constant M circles, the closed-loop magnitude frequency response
is determined by each intersection of this polar plot with the constant M circles.
2 At the end of this subsection, we will see how to use MATLAB to obtain closed-loop frequency responses.
10.9 Relation Between Closed- and Open-Loop Frequency Responses
573

Before demonstrating the use of the constant M circles with an example, let us go
through a similar development for the closed-loop phase plot, the constant N circles. From
Eq. (10.59), the phase angle, ϕ, of the closed-loop response is
ϕ  tan
 1 Qω
Pω 
 tan
 1
Qω
Pω  1
 tan
 1
Qω
Pω 
Qω
Pω  1
1  Qω
Pω
Qω
Pω  1


(10.62)
after using tan α 
 β   tan α 
 tan β=1  tan α tan β. Dropping the functional
notation,
tan ϕ  N 
Q
P2  P  Q2
(10.63)
Equation (10.63) can be put into the form of a circle,
P  1
2

2

Q 
 1
2N

2
 N2  1
4N2
(10.64)
which is plotted in Figure 10.43 for various values of N. The circles of this plot are called
constant N circles. Superimposing a unity feedback, open-loop frequency response over the
constant N circles yields the closed-loop phase response of the system. Let us now look at
an example of the use of the constant M and N circles.
Im
Re
–2
–1
1
2
1
2
–1
–2
–3
–4
0.6
0.5
M = 0.7
M = 1.3
1.4
1.5
G-plane
M = 1.0
0.4
2.0
1.6
1.8
FIGURE 10.42
Constant M circles
574
Chapter 10
Frequency Response Techniques

Im
Re
1
2
–1
–2
–3
3
2
1
–1
–2
–3
ϕ = 20°
50°
40°
25°
G-plane
70°
–70°
–70°
–50°
–50°
–70°
–50°
30°
–25°
–30°
–20°
–40°
FIGURE 10.43
Constant N circles
Example 10.11
Closed-Loop Frequency Response from Open-Loop
Frequency Response
Closed-Loop Frequency Response from Open-Loop
Frequency Response
PROBLEM: Find the closed-loop frequency response of the unity feedback system
shown in Figure 10.10, where Gs  50=ss  3s  6, using the constant M circles,
N circles, and the open-loop polar frequency response curve.
SOLUTION: First evaluate the open-loop frequency function and make a polar frequency
response plot superimposed over the constant M and N circles. The open-loop frequency
function is
G jω 
50

9ω2  j18ω 
 ω3
(10.65)
from which the magnitude, jG jωj, and phase, G jω, can be found and plotted. The
polar plot of the open-loop frequency response (Nyquist diagram) is shown superimposed
over the M and N circles in Figure 10.44.
10.9 Relation Between Closed- and Open-Loop Frequency Responses
575

The closed-loop magnitude frequency response can now be obtained by ﬁnding the
intersection of each point of the Nyquist plot with the M circles. The closed-loop phase
response can be obtained by ﬁnding the intersection of each point of the Nyquist plot with
the N circles. The result is shown in Figure 10.45.3
Students who are using MATLAB should now run ch10p5 in Appendix B.
You will learn how to use MATLAB to ﬁnd the closed-loop frequency
response. This exercise solves Example 10.11 using MATLAB.
–1.0 –0.8
–0.2
0.2
0
0.4 0.6 0.8 1.0 1.2
j0.2
–j0.2
–j0.4
–j0.6
–j0.8
–j1.0
–j1.2
–j1.4
–j1.8
–j1.6
ω = 0.8
ω = 0.9
ω = 1
ω = 1.3
ω = 1.5
ω = 1.7
ω = 2
ω = 3
ω = 3.5
ω = 2.5
ω = 5
ω = 4.2
Im
Re
–0.6–0.4
FIGURE 10.45
Closed-
loop frequency response
for Example 10.11
Im
Re
1
2
–1
–3
3
2
1
–1
–2
–3
50°
–4
–2
0.6
0
M = 1.0
0
40°
0.5
M = 0.7
25°
M = 1.3
1.4
1.5
G-plane
1.0
ω = 0.8
70°
30°
0.4
–20°
–25°
–30°
– 40°
1.6
1.8
2.0
1.5
2.0
2.5
3.5
3.0
–70°
–50°
ϕ = 20°
FIGURE 10.44
Nyquist
diagram for Example 10.11
and constant M and N
circles
3 You are cautioned not to use the closed-loop polar plot for the Nyquist criterion. The closed-loop frequency
response, however, can be used to determine the closed-loop transient response, as discussed in Section 10.8.
576
Chapter 10
Frequency Response Techniques

Nichols Charts
A disadvantage of using the M and N circles is that changes of gain in the open-loop transfer
function, G(s), cannot be handled easily. For example, in the Bode plot, a gain change is
handled by moving the Bode magnitude curve up or down an amount equal to the gain
change in dB. Since the M and N circles are not dB plots, changes in gain require each point
of G jω to be multiplied in length by the increase or decrease in gain.
Another presentation of the M and N circles, called a Nichols chart, displays
the constant M circles in dB, so that changes in gain are as simple to handle as in the
Bode plot. A Nichols chart is shown in Figure 10.46. The chart is a plot of open-loop
magnitude in dB vs. open-loop phase angle in degrees. Every point on the M circles can
be transferred to the Nichols chart. Each point on the constant M circles is represented by
magnitude and angle (polar coordinates). Converting the magnitude to dB, we can
transfer the point to the Nichols chart, using the polar coordinates with magnitude in dB
plotted as the ordinate, and the phase angle plotted as the abscissa. Similarly, the N circles
also can be transferred to the Nichols chart.
For example, assume the function
Gs 
K
ss  1s  2
(10.66)
Superimposing the frequency response of G(s) on the Nichols chart by plotting magnitude
in dB vs. phase angle for a range of frequencies from 0.1 to 1 rad/s, we obtain the plot
in Figure 10.47 for K  1. If the gain is increased by 10 dB, simply raise the curve for
K  1 by 10 dB and obtain the curve for K  3:16 10 dB. The intersection of the plots of
G jω with the Nichols chart yields the frequency response of the closed-loop system.
Students who are using MATLAB should now run ch10p6 in Appendix B.
You will learn how to use MATLAB to make a Nichols plot. This
exercise makes a Nichols plot of Gs  1=ss  1s  2 using
MATLAB.
MATLAB’s LTI Viewer is an alternative method of obtaining the
Nichols chart. You are encouraged to study Appendix E at www.wiley
.com/college/nise, which contains a tutorial on the LTI Viewer as
well as some examples. Example E.4 shows how to obtain Figure 10.47
using the LTI Viewer.
0.5
–15
–10
–5
0
5
10
15
20
25
–280
–260
–240
–220
–200
–180
–160
–140
–120
–100
–80
Phase (degrees)
Magnitude (dB)
0.707
4
2
1.6
1.4
1.2
1.1
–300°
–340°
    –320°
–40°
–20°
–60°
–5°
–10°
–80°
–220°
–90°
–140°
–160°
–100°
–120°
–270°–260°
–200°
–240°
–180°
–280°
–355°
1.0
0.3
FIGURE 10.46
Nichols chart
10.9 Relation Between Closed- and Open-Loop Frequency Responses
577

10.10 Relation Between Closed-Loop Transient
and Open-Loop Frequency Responses
Damping Ratio From M Circles
We can use the results of Example 10.11 to estimate the transient response characteristics of
the system. We can ﬁnd the peak of the closed-loop frequency response by ﬁnding the
maximum M curve tangent to the open-loop frequency response. Then we can ﬁnd the
damping ratio, ζ, and subsequently the percent overshoot, via Eq. (10.52). The following
example demonstrates the use of the open-loop frequency response and the M circles to ﬁnd
the damping ratio or, equivalently, the percent overshoot.
Example 10.12
Percent Overshoot from Open-Loop Frequency Response
Percent Overshoot from Open-Loop Frequency Response
PROBLEM: Find the damping ratio and the percent overshoot expected from the system
of Example 10.11, using the open-loop frequency response and the M circles.
0.5
ω =.1
–15
–10
–5
0
5
10
15
20
25
–280
–260
–240
–220
–200
–180
–160
–140
–120
–100
–80
Phase (degrees)
Magnitude (dB)
0.707
K=3.16
K=1
ω =.1
ω = 1
ω = 1
4
2
1.6
1.4
1.2
1.1
–300°
–40°
1.0
–270°
–90°
–20°
–60°
–5°
–10°
–260°
–200°
––140°
0.3
–180°
–240° –220°
–160°
–100°
–120°
–340°
–355°
    –320°
–280°
–80°
FIGURE 10.47
Nichols chart
with frequency response for
Gs  K=ss  1s  2
superimoposed. Values for
K  1 and K  3:16 are shown.
Skill-Assessment Exercise 10.8
PROBLEM: Given the system shown in Figure 10.10, where
Gs 
8000
s  5s  20s  50
plot the closed-loop log-magnitude and phase frequency response plots using the
following methods:
a. M and N circles
b. Nichols chart
ANSWER: The complete solution is at www.wiley.com/college/nise.
TryIt 10.5
Use MATLAB, the Control
System Toolbox, and the
following statements to make a
Nichols chart of the system
given in Skill-Assessment
Exercise 10.8
G=zpk([],...
[
5,
20,
50],8000)
nichols(G)
grid on
578
Chapter 10
Frequency Response Techniques

So far in this section, we have tied together the system’s transient response and the
peak value of the closed-loop frequency response as obtained from the open-loop frequency
response. We used the Nyquist plots and the M and N circles to obtain the closed-loop
transient response. Another association exists between the open-loop frequency response
and the closed-loop transient response that is easily implemented with the Bode plots,
which are easier to draw than the Nyquist plots.
Damping Ratio from Phase Margin
Let us now derive the relationship between the phase margin and the damping ratio. This
relationship will enable us to evaluate the percent overshoot from the phase margin found
from the open-loop frequency response.
Consider a unity feedback system whose open-loop function
Gs 
ω2
n
ss  2ζωn
(10.68)
yields the typical second-order, closed-loop transfer function
Ts 
ω2
n
s2  2ζωns  ω2
n
(10.69)
In order to evaluate the phase margin, we ﬁrst ﬁnd the frequency for which jG jωj  1.
Hence,
jG jωj 
ω2
n
j 
 ω2  j2ζωnωj
 1
(10.70)
The frequency, ω1, that satisﬁes Eq. (10.70) is
ω1  ωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ

2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  4ζ 4
q
r
(10.71)
The phase angle of G jω at this frequency is
G jω  
90 
 tan
 1 ω1
2ζωn
 
90 
 tan
 1
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ

2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4ζ 4  1
p
q
2ζ
(10.72)
SOLUTION: Equation (10.52) shows that there is a unique relationship between the
closed-loop system’s damping ratio and the peak value, MP, of the closed-loop system’s
magnitude frequency plot. From Figure 10.44, we see that the Nyquist diagram is
tangent to the 1.8 M circle. We see that this is the maximum value for the closed-loop
frequency response. Thus, Mp  1:8.
We can solve for ζ by rearranging Eq. (10.52) into the following form:
ζ 4 
 ζ2  1=4M2
p  0
(10.67)
Since Mp  1:8, then ζ  0:29 and 0.96. From Eq. (10.53), a damping ratio larger than
0.707 yields no peak above zero frequency. Thus, we select ζ  0:29, which is equivalent
to 38.6% overshoot. Care must be taken, however, to be sure we can make a second-order
approximation when associating the value of percent overshoot to the value of ζ. A
computer simulation of the step response shows 36% overshoot.
10.10 Relation Between Closed-Loop Transient and Open-Loop Frequency Responses
579

The difference between the angle of Eq. (10.72) and 
180° is the phase margin, ϕM. Thus,
ΦM  90 
 tan
 1
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ

2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  4ζ 4
p
q
2ζ
 tan
 1
2ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ

2ζ2 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  4ζ 4
p
q
(10.73)
Equation (10.73), plotted in Figure 10.48, shows the relationship between phase margin and
damping ratio.
As an example, Eq. (10.53) tells us that there is no peak frequency if ζ  0:707.
Hence, there is no peak to the closed-loop magnitude frequency response curve for
this value of damping ratio and larger. Thus, from Figure 10.48, a phase margin of
65:52°ζ  0:707 or larger is required from the open-loop frequency response to ensure
there is no peaking in the closed-loop frequency response.
Response Speed from Open-Loop Frequency Response
Equations (10.55) and (10.56) relate the closed-loop bandwidth to the desired settling or
peak time and the damping ratio. We now show that the closed-loop bandwidth can be
estimated from the open-loop frequency response. From the Nichols chart in Figure 10.46,
we see the relationship between the open-loop gain and the closed-loop gain. The
M  0:707
3 dB curve, replotted in Figure 10.49 for clarity, shows the open-loop gain
when the closed-loop gain is 
3 dB. This relationship typically occurs at ωBW if the
low-frequency closed-loop gain is 0 dB. We can approximate Figure 10.49 by saying that
–7
–6
–5
–4
–3
–2
–1
0
–280 –260 –240 –220 –200 –180 –160 –140 –120 –100 –80
Open-loop phase (degrees)
Closed-loop magnitude = –3 dB
Open-loop magnitude (dB)
–8
FIGURE 10.49
Open-loop
gain vs. open-loop phase angle
for 
3 dB closed-loop gain
10
0
20
30
40
50
60
70
80
90
0
0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0
Damping ratio
Phase margin (degrees)
FIGURE 10.48
Phase margin
vs. damping ratio
580
Chapter 10
Frequency Response Techniques

the closed-loop bandwidth, ωBW (the frequency at which the closed-loop magnitude
response is 
3 dB), equals the frequency at which the open-loop magnitude response is
between 
6 and 
 7:5 dB if the open-loop phase response is between 
135° and 
 225°.
Then,usingasecond-ordersystem approximation,Eqs.(10.55)and(10.56)canbeused,along
with the desired damping ratio, ζ, to ﬁnd settling time and peak time, respectively. Let us look
at an example.
Example 10.13
Settling and Peak Times from Open-Loop Frequency
Response
Settling and Peak Times from Open-Loop Frequency
Response
PROBLEM: Given the system of Figure 10.50(a) and the Bode diagrams of
Figure 10.50(b), estimate the settling time and peak time.
SOLUTION: Using Figure 10.50(b), we estimate the closed-loop bandwidth by ﬁnding
the frequency where the open-loop magnitude response is in the range of 
6 to 
7:5 dB
if the phase response is in the range of 
135° to 
 225°. Since Figure 10.50(b) shows

6 to 
7:5 dB at approximately 3.7 rad/s with a phase response in the stated region,
ωBW  3:7 rad/s.
(  )
a
E(s)
50
s(s + 3)(s + 6)
C(s)
R(s) +
–
10
6
2
 –2
–6
–10
–14
–18
–22
–26
–30
1
2
3
4
5
6
7
8
9
10
Frequency (rad/s)
20 log M
–100
–120
–140
–160
–180
–200
–220
–240
Phase (degrees)
1
2
3
4
5
6
7
8
9
10
Frequency (rad/s)
(  )
b
FIGURE 10.50
a. Block diagram; b. Bode diagrams for system of Example 10.13
10.10 Relation Between Closed-Loop Transient and Open-Loop Frequency Responses
581

10.11 Steady-State Error Characteristics from
Frequency Response
In this section, we show how to use Bode diagrams to ﬁnd the values of the static error
constants for equivalent unity feedback systems: Kp for a Type 0 system, Kv for a Type 1
system, and Ka for a Type 2 system. The results will be obtained from unnormalized and
unscaled Bode log-magnitude plots.
Position Constant
To ﬁnd Kp, consider the following Type 0 system:
Gs  K
∏
n
i1
s  zi
∏
m
i1
s  pi
(10.74)
A typical unnormalized and unscaled Bode log-magnitude plot is shown in Figure 10.51(a).
The initial value is
20 log M  20 log K
∏
n
i1
zi
∏
m
i1
pi
(10.75)
Skill-Assessment Exercise 10.9
PROBLEM: Using the open-loop frequency response for the system in Figure 10.10,
where
Gs 
100
ss  5
estimate the percent overshoot, settling time, and peak time for the closed-loop step
response.
ANSWERS: %OS  44%; Ts  1:64 s; and TP  0:33 s
The complete solution is at www.wiley.com/college/nise.
Next ﬁnd ζ via the phase margin. From Figure 10.50(b), the phase margin is
found by ﬁrst ﬁnding the frequency at which the magnitude plot is 0 dB. At this frequency,
2.2 rad/s, the phase is about 
145°. Hence, the phase margin is approximately
 
 145° 
 
180°  35°. Using Figure 10.48, ζ  0:32. Finally, using Eqs. (10.55)
and (10.56), with the values of ωBW and ζ just found, Ts  4:86 seconds and Tp  129
seconds. Checking the analysis with a computer simulation shows Ts  5:5 seconds, and
Tp  1:43 seconds.
582
Chapter 10
Frequency Response Techniques

But for this system
Kp  K
∏
n
i1
zi
∏
m
i1
pi
(10.76)
which is the same as the value of the low-frequency axis. Thus, for an unnormalized
and unscaled Bode log-magnitude plot, the low-frequency magnitude is 20 log Kp for a
Type 0 system.
Velocity Constant
To ﬁnd Kv for a Type 1 system, consider the following open-loop transfer function of a
Type 1 system:
Gs  K
∏
n
i1
s  zi
s ∏
m
i1
s  pi
(10.77)
A typical unnormalized and unscaled Bode log-magnitude diagram is shown in
Figure 10.51(b) for this Type 1 system. The Bode plot starts at
20 log M  20 log K
∏
n
i1
zi
ω0 ∏
m
i1
pi
(10.78)
The initial 
20 dB/decade slope can be thought of as originating from a function,
G´s  K
∏
n
i1
zi
s ∏
m
i1
pi
(10.79)
20 log M
20 log Kp
0
(  )
a
20 log M
20 log K
0
(  )
b
i =1
n
i=1
0
–20 dB/dec
Kv
20 log M
0
(  )
c
–40 dB/dec
Ka
m
pi
20 log K
i=1
0
m pi
2
zi
i =1
n
zi
FIGURE 10.51
Typical
unnormalized and unscaled
Bode log-magnitude plots
showing the value of static error
constants: a. Type 0; b. Type 1;
c. Type 2
10.11 Steady-State Error Characteristics from Frequency Response
583

G´s intersects the frequency axis when
ω  K
∏
n
i1
zi
∏
m
i1
pi
(10.80)
But for the original system (Eq. (10.77)),
Kv  K
∏
n
i1
zi
∏
m
i1
pi
(10.81)
which is the same as the frequency-axis intercept, Eq. (10.80). Thus, we can ﬁnd Kv by
extending the initial 
20 dB/decade slope to the frequency axis on an unnormalized and
unscaled Bode diagram. The intersection with the frequency axis is Kv.
Acceleration Constant
To ﬁnd Ka for a Type 2 system, consider the following:
Gs  K
∏
n
i1
s  zi
s2 ∏
m
i1
s  pi
(10.82)
A typical unnormalized and unscaled Bode plot for a Type 2 system is shown in
Figure 10.51(c). The Bode plot starts at
20 log M  20 log K
∏
n
i1
zi
ω2
0 ∏
m
i1
pi
(10.83)
The initial 
40 dB/decade slope can be thought of as coming from a function,
G´s  K
∏
n
i1
zi
s2 ∏
m
i1
pi
(10.84)
G´s intersects the frequency axis when
ω 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
K
∏
n
i1
zi
∏
m
i1
pi
v
u
u
u
u
u
t
(10.85)
But for the original system (Eq. (10.82)),
Ka  K
∏
n
i1
zi
∏
m
i1
pi
(10.86)
Thus, the initial 
40 dB/decade slope intersects the frequency axis at
ﬃﬃﬃﬃﬃﬃ
Ka
p
.
584
Chapter 10
Frequency Response Techniques

Example 10.14
Static Error Constants from Bode Plots
Static Error Constants from Bode Plots
PROBLEM: For each unnormalized and unscaled Bode log-magnitude plot shown in
Figure 10.52,
a. Find the system type.
b. Find the value of the appropriate static error constant.
SOLUTION: Figure 10.52(a) is a Type 0 system, since the initial slope is zero. The
value of Kp is given by the low-frequency asymptote value. Thus, 20 log Kp  25, or
Kp  17:78.
30
25
20
15
10
5
0
20 log M
0.1
1
10
Frequency (rad/s)
(a)
15
–5
–25
–45
–65
–85
–105
20 log M
0.1
1
10
Frequency (rad/s)
(b)
0
60
40
20
0
–20
–40
–60
20 log M
0.1
1
10
Frequency (rad/s)
(c)
–40 dB/dec
–20 dB/dec
–40 dB/dec
Zero dB crossing
–20 dB/dec
–20 dB/dec
Zero dB crossing
–40 dB/dec
–20 dB/dec
FIGURE 10.52
Bode log-magnitude plots for Example 10.14
10.11 Steady-State Error Characteristics from Frequency Response
585

10.12 Systems with Time Delay
Time delay occurs in control systems when there is a delay between the commanded
response and the start of the output response. For example, consider a heating system
that operates by heating water for pipeline distribution to radiators at distant locations.
Since the hot water must ﬂow through the line, the radiators will not begin to get hot
until after a speciﬁed time delay. In other words, the time between the command for
more heat and the commencement of the rise in temperature at a distant location along
the pipeline is the time delay. Notice that this is not the same as the transient response or
the time it takes the temperature to rise to the desired level. During the time delay,
nothing is occurring at the output.
Modeling Time Delay
Assume that an input, R(s), to a system, G(s), yields an output, C(s). If another system, G´s,
delays the output by T seconds, the output response is ct 
 T. From Table 2.2, Item 5, the
Laplace transform of ct 
 T is e
sTCs. Thus, for the system without delay,
Cs  RsGs, and for the system with delay, e
sTCs  RsG´s. Dividing these
Skill-Assessment Exercise 10.10
PROBLEM: Find the static error constants for a stable unity feedback system whose
open-loop transfer function has the Bode magnitude plot shown in Figure 10.53.
ANSWERS: Kp  ∞; Kv  ∞; Ka  90:25
The complete solution is www.wiley.com/college/nise.
Figure 10.52(b) is a Type 1 system, since the initial slope is 
20 dB/decade. The
value of Kv is the value of the frequency that the initial slope intersects at the zero dB
crossing of the frequency axis. Hence, Kv  0:55.
Figure 10.52(c) is a Type 2 system, since the initial slope is 
40 dB/decade. The
value of
ﬃﬃﬃﬃﬃﬃ
Ka
p
is the value of the frequency that the initial slope intersects at the zero dB
crossing of the frequency axis. Hence, Ka  32  9.
150
100
50
0
–50
20 log M
0.01
0.1
1
10
100
1000
Frequency (rad/s)
FIGURE 10.53
Bode log-magnitude plot for Skill-Assessment Exercise 10.10
586
Chapter 10
Frequency Response Techniques

two equations, G´s=Gs  e
sT. Thus, a system with time delay T can be represented in
terms of an equivalent system without time delay as follows:
G´s  e
sTGs
(10.87)
The effect of introducing time delay into a system can also be seen from the perspective of
the frequency response by substituting s  jω in Eq. (10.87). Hence,
G´ jω  e
jωTG jω  jG jωjf
ωT  G jωg
(10.88)
In other words, the time delay does not affect the magnitude frequency response curve of
G jω, but it does subtract a linearly increasing phase shift, ωT, from the phase frequency
response plot of G jω.
The typical effect of adding time delay can be seen in Figure 10.54. Assume
that the gain and phase margins as well as the gain- and phase-margin frequencies
shown in the ﬁgure apply to the system without delay. From the ﬁgure, we see that the
reduction in phase shift caused by the delay reduces the phase margin. Using a second-
order approximation, this reduction in phase margin yields a reduced damping ratio for
the closed-loop system and a more oscillatory response. The reduction of phase also
leads to a reduced gain-margin frequency. From the magnitude curve, we can see that a
reduced gain-margin frequency leads to reduced gain margin, thus moving the system
closer to instability.
An example of plotting frequency response curves for systems with delay follows.
0 dB
180°
Gain plot
GM
M(dB)
log ω
log ω
Phase (degrees)
Phase plot with delay
Phase plot without delay
GM
 ΦM
ΦM
ω
ω
FIGURE 10.54
Effect of
delay upon frequency response
Example 10.15
Frequency Response Plots of a System with Time Delay
Frequency Response Plots of a System with Time Delay
PROBLEM: Plot the frequency response for the system Gs  K=ss  1s  10 if
there is a time delay of 1 second through the system. Use the Bode plots.
SOLUTION: Since the magnitude curve is not affected by the delay, it can be plotted
by the methods previously covered in the chapter and is shown in Figure 10.55(a)
for K  1.
10.12 Systems with Time Delay
587

Let us now use the results of Example 10.15 to design stability and analyze transient
response and compare the results to the system without time delay.
The phase plot, however, is affected by the delay. Figure 10.55(b) shows the result.
First draw the phase plot for the delay, e
jωT  1  
 ωT  1  
 ω, since T  1 from the
problem statement. Next draw the phase plot of the system, G jω, using the methods
previously covered. Finally, add the two phase curves together to obtain the total phase
response for e
jωTG jω. Be sure to use consistent units for the phase angles of G jω and
the delay; either degrees or radians.
Notice that the delay yields a decreased phase margin, since at any frequency the
phase angle is more negative. Using a second-order approximation, this decrease in
phase margin implies a lower damping ratio and a more oscillatory response for the
closed-loop system.
Further, there is a decrease in the gain-margin frequency. On the magnitude curve,
note that a reduction in the gain-margin frequency shows up as reduced gain margin, thus
moving the system closer to instability.
Students who are using MATLAB should now run ch10p7 in Appendix B.
You will learn how to use MATLAB to include time delay on Bode
plots. You will also use MATLAB to make multiple plots on one
graph and label the plots. This exercise solves Example 10.15
using MATLAB.
Example 10.16
Range of Gain for Stability for System with Time Delay
Range of Gain for Stability for System with Time Delay
PROBLEM: The open-loop system with time delay in Example 10.15 is used in a unity
feedback conﬁguration. Do the following:
a. Find the range of gain, K, to yield stability. Use Bode plots and frequency response
techniques.
b. Repeat Part a for the system without time delay.
Time delaySystem
Total
20
0
–20
–40
–60
–80
20 log M
0.1
1
10
0.01
Frequency (rad/s)
(a)
–200
–400
–600
–800
Phase (degrees)
0.1
1
0.01
Frequency (rad/s)
(b)
0
10
FIGURE 10.55
Frequency
response plots for
Gs  K=ss  1s  10
with a delay of 1 second and
K  1: a. magnitude plot;
b. phase plot
588
Chapter 10
Frequency Response Techniques

SOLUTION:
a. From Figure 10.55, the phase angle is 
180° at a frequency of 0.81 rad/s for the system
with time delay, marked “Total” on the phase plot. At this frequency, the magnitude
curve is at 
20.39 dB. Thus, K can be raised from its current value of unity to
1020:39=20  10:46. Hence, the system is stable for 0 < K  10:46.
b. If we use the phase curve without delay, marked “System,” 
180° occurs at a frequency
of 3.16 rad/s, and K can be raised 40.84 dB or 110.2. Thus, without delay the system
is stable for 0 < K  110:2, an order of magnitude larger.
Example 10.17
Percent Overshoot for System with Time Delay
Percent Overshoot for System with Time Delay
PROBLEM: The open-loop system with time delay in Example 10.15 is used in a unity
feedback conﬁguration. Do the following:
a. Estimate the percent overshoot if K  5. Use Bode plots and frequency response
techniques.
b. Repeat Part a for the system without time delay.
SOLUTION:
a. Since K  5, the magnitude curve of Figure 10.55 is raised by 13.98 dB. The zero dB
crossing then occurs at a frequency of 0.47 rad/s with a phase angle of 
145°,
as seen from the phase plot marked “Total.” Therefore, the phase margin is
 
145° 
 
180°  35°. Assuming a second-order approximation and using
Eq. (10.73) or Figure 10.48, we ﬁnd ζ  0:33. From Eq. (4.38), %OS  33%. The
time response, Figure 10.56(a), shows a 38% overshoot instead of the predicted 33%.
Notice the time delay at the start of the curve.
b. The zero dB crossing occurs at a frequency of 0.47 rad/s with a phase angle of 
118°,
as seen from the phase plot marked “System.” Therefore, the phase margin is
 
118° 
 
180°  62°. Assuming a second-order approximation and using
c(t)
0.2
0
0
5
10
15
20
25
30
Time (seconds)
(a)
0.4
0.6
0.8
1.0
1.2
1.4
FIGURE 10.56
Step response
for closed-loop system with
Gs  5=ss  1s  10:
a. with a 1-second delay;
(ﬁgure continues)
10.12 Systems with Time Delay
589

In summary, then, systems with time delay can be handled using previously described
frequency response techniques if the phase response is adjusted to reﬂect the time delay.
Typically, time delay reduces gain and phase margins, resulting in increased percent
overshoot or instability in the closed-loop response.
Eq. (10.73) or Figure 10.48, we ﬁnd ζ  0:64. From Eq. (4.38), %OS  7:3%. The time
response is shown in Figure 10.56(b). Notice that the system without delay has less
overshoot and a smaller settling time.
FIGURE 10.56
(Continued)
b. without delay
c(t)
0
2
4
6
8
10
0.2
0
0.4
0.6
0.8
1.0
1.2
2
4
6
8
10
Time (seconds)
(b)
Skill-Assessment Exercise 10.11
PROBLEM: For the system shown in Figure 10.10, where
Gs 
10
ss  1
ﬁnd the phase margin if there is a delay in the forward path of
a. 0 s
b. 0.1 s
c. 3 s
ANSWERS:
a. 18.0°
b. 0.35°
c. 
151:41°
The complete solution is at www.wiley.com/college/nise.
TryIt 10.6
Use MATLAB, the Control System
Toolbox, and the following
statements to solve Skill-Assessment
Exercise 10.11. For each part of the
problem let d  the speciﬁed delay.
G=zpk([],[0,
1],10)
d=0
[numGd,denGd]=pade...
(d,12)
Gd=tf(numGd,denGd)
Ge=G*Gd
bode(Ge)
grid on
After the Bode diagrams appear:
1. Right-click in the graph area.
2. Select Characteristics.
3. Select All Stability Margins.
4. Let the mouse rest on the margin
point on the phase plot to read the
phase margin.
590
Chapter 10
Frequency Response Techniques

10.13 Obtaining Transfer Functions Experimentally
In Chapter 4, we discussed how to obtain the transfer function of a system through
step-response testing. In this section, we show how to obtain the transfer function using
sinusoidal frequency response data.
The analytical determination of a system’s transfer function can be difﬁcult.
Individual component values may not be known, or the internal conﬁguration of the
system may not be accessible. In such cases, the frequency response of the system, from
input to output, can be obtained experimentally and used to determine the transfer
function. To obtain a frequency response plot experimentally, we use a sinusoidal
force or signal generator at the input to the system and measure the output steady-state
sinusoid amplitude and phase angle (see Figure 10.2). Repeating this process at a number
of frequencies yields data for a frequency response plot. Referring to Figure 10.2(b),
the
amplitude
response
is
Mω  Moω=Miω,
and
the
phase
response
is
ϕω  ϕoω 
 ϕiω. Once the frequency response is obtained, the transfer function
of the system can be estimated from the break frequencies and slopes. Frequency response
methods can yield a more reﬁned estimate of the transfer function than the transient
response techniques covered in Chapter 4.
Bode plots are a convenient presentation of the frequency response data for the
purpose of estimating the transfer function. These plots allow parts of the transfer function to
be determined and extracted, leading the way to further reﬁnements to ﬁnd the remaining
parts of the transfer function.
Although experience and intuition are invaluable in the process, the following steps
are still offered as a guideline:
1. Look at the Bode magnitude and phase plots and estimate the pole-zero conﬁguration
of the system. Look at the initial slope on the magnitude plot to determine system type.
Look at phase excursions to get an idea of the difference between the number of poles
and the number of zeros.
2. See if portions of the magnitude and phase curves represent obvious ﬁrst- or second-order
pole or zero frequency response plots.
3. See if there is any telltale peaking or depressions in the magnitude response plot that
indicate an underdamped second-order pole or zero, respectively.
4. If any pole or zero responses can be identiﬁed, overlay appropriate 20 or 40dB/decade
lines on the magnitude curve or 45°/decade lines on the phase curve and estimate the
break frequencies. For second-order poles or zeros, estimate the damping ratio and
natural frequency from the standard curves given in Section 10.2.
5. Form a transfer function of unity gain using the poles and zeros found. Obtain the
frequency response of this transfer function and subtract this response from the previous
frequency response (Franklin, 1991). You now have a frequency response of reduced
complexity from which to begin the process again to extract more of the system’s poles
and zeros. A computer program such as MATLAB is of invaluable help for this step.
Let us demonstrate.
Example 10.18
Transfer Function from Bode Plots
Transfer Function from Bode Plots
PROBLEM: Find the transfer function of the subsystem whose Bode plots are shown in
Figure 10.57.
10.13 Obtaining Transfer Functions Experimentally
591

SOLUTION: Let us ﬁrst extract the underdamped poles that we suspect, based on the
peaking in the magnitude curve. We estimate the natural frequency to be near the peak
frequency, or approximately 5 rad/s. From Figure 10.57, we see a peak of about 6.5 dB,
which translates into a damping ratio of about ζ  0:24 using Eq. (10.52). The unity gain
second-order function is thus G1s  ω2
n=s2  2ζωns  ω2
n  25=s2  2:4s  25.
The frequency response plot of this function is made and subtracted from the previous
Bode plots to yield the response in Figure 10.58.
–15
–20
–25
–30
–35
–40
–45
–50
–55
20 log M
10
100
1000
1
Frequency (rad/s)
0
–20
–40
–60
–80
–100
Phase (degrees)
Frequency (rad/s)
10
100
1000
1
FIGURE 10.58
Original Bode plots minus response of G1s  25=s2  2:4s  25
Phase (degrees)
1000
0
–50
–100
–150
–200
–250
–300
100
10
1
Frequency (rad/s)
20 log M
1000
0
–50
–100
–150
100
10
1
Frequency (rad/s)
FIGURE 10.57
Bode plots for subsystem with undetermined transfer function
592
Chapter 10
Frequency Response Techniques

Overlaying a 
20 dB/decade line on the magnitude response and a 
45°/decade
line on the phase response, we detect a ﬁnal pole. From the phase response, we estimate
the break frequency at 90 rad/s. Subtracting the response of G2s  90=s  90 from
the previous response yields the response in Figure 10.59.
Figure 10.59 has a magnitude and phase curve similar to that generated by a lag
function. We draw a 
20 dB/decade line and ﬁt it to the curves. The break
frequencies are read from the ﬁgure as 9 and 30 rad/s. A unity gain transfer function
containing a pole at 
9 and a zero at 
30 is G3s  0:3s  30=s  9. Upon
subtraction of G1sG2sG3s, we ﬁnd the magnitude frequency response ﬂat 1 dB
and the phase response ﬂat at 
3°5°. We thus conclude that we are ﬁnished
extracting dynamic transfer functions. The low-frequency, or dc, value of the original
curve is 
19 dB, or 0.11. Our estimate of the subsystem’s transfer function is
Gs  0:11G1sG2sG3s, or
Gs  0:11
25
s2  2:4s  25


90
1
s  90


0:3 s  30
s  9


 74:25
s  30
s  9s  90s2  2:4s  25
(10.89)
It is interesting to note that the original curve was obtained from the function
Gs  70
s  20
s  7s  70s2  2s  25
(10.90)
Phase (degrees)
1000
0
–5
–10
–15
–20
–25
–30
–35
100
10
1
Frequency (rad/s)
20 log M
1000
–18
–20
–22
–24
–26
–28
–30
–32
100
10
1
Frequency (rad/s)
FIGURE 10.59
Original Bode plot minus response of
G1sG2s  25=s2  2:4s  25 90=s  90
10.13 Obtaining Transfer Functions Experimentally
593

In this chapter, we derived the relationships between time response performance and
the frequency responses of the open- and closed-loop systems. The methods derived,
although yielding a different perspective, are simply alternatives to the root locus and
steady-state error analyses previously covered.
Skill-Assessment Exercise 10.12
PROBLEM: Estimate G(s), whose Bode log-magnitude and phase plots are shown in
Figure 10.60.
ANSWER: Gs  30s  5
ss  20
The complete solution is at www.wiley.com/college/nise.
–40
–30
–20
–10
0
10
20
20 log M
1
10
100
1000
Frequency (rad/s)
–95
–90
–80
–85
–75
–60
–65
–70
–55
–50
–45
Phase (degrees)
1
10
100
1000
Frequency (rad/s)
FIGURE 10.60
Bode plots for Skill-Assessment Exercise 10.12
Students who are using MATLAB should now run ch10 p8 in Appendix B.
You will learn how to use MATLAB to subtract Bode plots for the
purpose of estimating transfer functions through sinusoidal
testing. This exercise solves a portion of Example 10.18 using
MATLAB.
594
Chapter 10
Frequency Response Techniques

Case Study
Antenna Control: Stability Design
and Transient Performance
Antenna Control: Stability Design
and Transient Performance
Our ongoing antenna position control system serves now as an example that summarizes
the major objectives of the chapter. The case study demonstrates the use of frequency
response methods to ﬁnd the range of gain for stability and to design a value of gain to
meet a percent overshoot requirement for the closed-loop step response.
PROBLEM: Given the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 1, use frequency response techniques to ﬁnd the following:
a. The range of preampliﬁer gain, K, required for stability
b. Percent overshoot if the preampliﬁer gain is set to 30
c. The estimated settling time
d. The estimated peak time
e. The estimated rise time
SOLUTION: Using the block diagram (Conﬁguration 1) shown on the front endpapers and
performing block diagram reduction yields the loop gain, G(s)H(s), as
GsHs 
6:63K
ss  1:71s  100 
0:0388K
s
s
1:71  1

	
s
100  1

	
(10.91)
Letting K  1, we have the magnitude and phase frequency response plots shown in
Figure 10.61.
0
–180
1
10
Frequency (rad/s)
100
0.1
1000
1
10
Frequency (rad/s)
100
0.1
1000
–180
–200
–220
–240
–260
Phase (degrees)
–160
–160
–140
–140
–120
–120
–100
–100
20 log M
–80
–280
–80
–60
–40
–20
FIGURE 10.61
Open-loop frequency response plots for the antenna control system K  1
Case Study
595

Summary
Frequency response methods are an alternative to the root locus for analyzing and
designing feedback control systems. Frequency response techniques can be used more
effectively than transient response to model physical systems in the laboratory. On the
other hand, the root locus is more directly related to the time response.
The input to a physical system can be sinusoidally varying with known frequency,
amplitude, and phase angle. The system’s output, which is also sinusoidal in the steady
state, can then be measured for amplitude and phase angle at different frequencies. From
this data, the magnitude frequency response of the system, which is the ratio of the output
amplitude to the input amplitude, can be plotted and used in place of an analytically
obtained magnitude frequency response. Similarly, we can obtain the phase response by
ﬁnding the difference between the output phase angle and the input phase angle at
different frequencies.
a. In order to ﬁnd the range of K for stability, we notice from Figure 10.61 that the phase
response is 
180° at ω  13:1 rad/s. At this frequency, the magnitude plot is 
68.41 dB.
The gain, K, can be raised by 68.41 dB. Thus, K  2633 will cause the system to be
marginally stable. Hence, the system is stable if 0 < K < 2633.
b. To ﬁnd the percentovershootif K  30, we ﬁrstmake asecond-order approximation and
assume that the second-order transient response equations relating percent overshoot,
damping ratio, and phase margin are true for this system. In other words, we assume that
Eq. (10.73), which relates damping ratio to phase margin, is valid. If K  30, the
magnitude curve of Figure 10.61 is moved up by 20 log 30  29:54 dB. Therefore,
the adjusted magnitude curve goes through zero dB at ω  1. At this frequency,
the phase angle is 
120:9°, yielding a phase margin of 59.1°. Using Eq. (10.73) or
Figure 10.48, ζ  0:6, or 9.48% overshoot. A computer simulation shows 10%.
c. To estimate the settling time, we make a second-order approximation and use
Eq. (10.55). Since K  30 (29.54 dB), the open-loop magnitude response is 
7 dB
when the normalized magnitude response of Figure 10.61 is 
36.54 dB. Thus, the
estimated bandwidth is 1.8 rad/s. Using Eq. (10.55), Ts  4:25 seconds. A computer
simulation shows a settling time of about 4.4 seconds.
d. Using the estimated bandwidth found in Part c along with Eq. (10.56) and the damping
ratio found in a, we estimate the peak time to be 2.5 seconds. A computer simulation
shows a peak time of 2.8 seconds.
e. To estimate the rise time, we use Figure 4.16 and ﬁnd that the normalized rise time
for a damping ratio of 0.6 is 1.854. Using Eq. (10.54), the estimated bandwidth found in
c, and ζ  0:6, we ﬁnd ωn  1:57. Using the normalized rise time and ωn, we ﬁnd
Tr  1:854=1:57  1:18 seconds. A simulation shows a rise time of 1.2 seconds.
CHALLENGE: You are now given a problem to test your knowledge of this chapter’s
objectives. You are given the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 3. Record the block diagram parameters in the table shown on
the front endpapers for Conﬁguration 3 for use in subsequent case study challenge
problems. Using frequency response methods, do the following:
a. Find the range of gain for stability.
b. Find the percent overshoot for a step input if the gain, K, equals 3.
c. Repeat Parts a and b using MATLAB.
596
Chapter 10
Frequency Response Techniques

The frequency response of a system can be represented either as a polar plot or as
separate magnitude and phase diagrams. As a polar plot, the magnitude response is the
length of a vector drawn from the origin to a point on the curve, whereas the phase response
is the angle of that vector. In the polar plot, frequency is implicit and is represented by each
point on the polar curve. The polar plot of G(s)H(s) is known as a Nyquist diagram.
Separate magnitude and phase diagrams, sometimes referred to as Bode plots,
present the data with frequency explicitly enumerated along the abscissa. The magnitude
curve can be a plot of log-magnitude versus log-frequency. The other graph is a plot of
phase angle versus log-frequency. An advantage of Bode plots over the Nyquist diagram
is that they can easily be drawn using asymptotic approximations to the actual curve.
The Nyquist criterion sets forth the theoretical foundation from which the
frequency response can be used to determine a system’s stability. Using the Nyquist
criterion and Nyquist diagram, or the Nyquist criterion and Bode plots, we can determine
a system’s stability.
Frequency response methods give us not only stability information but also transient
response information. By deﬁning such frequency response quantities as gain margin and
phase margin, the transient response can be analyzed or designed. Gain margin is the
amount that the gain of a system can be increased before instability occurs if the phase angle
is constant at 180°. Phase margin is the amount that the phase angle can be changed before
instability occurs if the gain is held at unity.
While the open-loop frequency response leads to the results for stability and
transient response just described, other design tools relate the closed-loop frequency
response peak and bandwidth to the transient response. Since the closed-loop response
is not as easy to obtain as the open-loop response, because of the unavailability of the
closed-loop poles, we use graphical aids in order to obtain the closed-loop frequency
response from the open-loop frequency response. These graphical aids are the M and N
circles and the Nichols chart. By superimposing the open-loop frequency response over
the M and N circles or the Nichols chart, we are able to obtain the closed-loop
frequency response and then analyze and design for transient response.
Today, with the availability of computers and appropriate software, frequency
response plots can be obtained without relying on the graphical techniques described
in this chapter. The program used for the root locus calculations and described in
Appendix H.2 is one such program. MATLAB is another.
We concluded the chapter discussion by showing how to obtain a reasonable
estimate of a transfer function using its frequency response, which can be obtained
experimentally. Obtaining transfer functions this way yields more accuracy than transient
response testing.
This chapter primarily has examined analysis of feedback control systems via
frequency response techniques. We developed the relationships between frequency
response and both stability and transient response. In the next chapter, we apply the
concepts to the design of feedback control systems, using the Bode plots.
Review Questions
1. Name four advantages of frequency response techniques over the root locus.
2. Deﬁne frequency response as applied to a physical system.
3. Name two ways to plot the frequency response.
4. Brieﬂy describe how to obtain the frequency response analytically.
5. Deﬁne Bode plots.
6. Each pole of a system contributes how much of a slope to the Bode magnitude plot?
Review Questions
597

7. A system with only four poles and no zeros would exhibit what value of slope at high
frequencies in a Bode magnitude plot?
8. A system with four poles and two zeros would exhibit what value of slope at high
frequencies in a Bode magnitude plot?
9. Describe the asymptotic phase response of a system with a single pole at 
2.
10. What is the major difference between Bode magnitude plots for ﬁrst-order systems
and for second-order systems?
11. For a system with three poles at 
4, what is the maximum difference between the
asymptotic approximation and the actual magnitude response?
12. Brieﬂy state the Nyquist criterion.
13. What does the Nyquist criterion tell us?
14. What is a Nyquist diagram?
15. Why is the Nyquist criterion called a frequency response method?
16. When sketching a Nyquist diagram, what must be done with open-loop poles on the
imaginary axis?
17. What simpliﬁcation to the Nyquist criterion can we usually make for systems that are
open-loop stable?
18. What simpliﬁcation to the Nyquist criterion can we usually make for systems that are
open-loop unstable?
19. Deﬁne gain margin.
20. Deﬁne phase margin.
21. Name two different frequency response characteristics that can be used to determine a
system’s transient response.
22. Name three different methods of ﬁnding the closed-loop frequency response from the
open-loop transfer function.
23. Brieﬂy explain how to ﬁnd the static error constant from the Bode magnitude plot.
24. Describe the change in the open-loop frequency response magnitude plot if time delay
is added to the plant.
25. If the phase response of a pure time delay were plotted on a linear phase versus linear
frequency plot, what would be the shape of the curve?
26. When successively extracting component transfer functions from experimental
frequency response data, how do you know when you are ﬁnished?
Problems
1. Find analytical expressions for the magnitude and phase
response for each G(s) below. [Section: 10.1]
a. Gs 
1
ss  2s  4
b. Gs 
s  5
s  2s  4
c. Gs  s  3s  5
ss  2s  4
2. For each function in Problem 1, make a plot of the
log-magnitude and the phase, using log-frequency
in rad/s as the ordinate. Do not use asymptotic
approximations. [Section: 10.1]
3. For each function in Problem 1, make a polar plot of the
frequency response. [Section: 10.1]
4. For each function in Problem 1, sketch the Bode
asymptotic magnitude and asymptotic phase plots.
Compare your results with your answers to Problem 1.
[Section: 10.2]
5. Sketch the Nyquist diagram for each of the systems in
Figure P10.1. [Section: 10.4]
598
Chapter 10
Frequency Response Techniques

+
–
50
s(s + 3)(s + 6)
E(s)
R(s)
C(s)
+
E(s)
R(s)
C(s)
+
50
s2(s + 1)
R(s)
C(s)
(s + 4)
+
20
s(s + 1)
R(s)
C(s)
(s + 4)
(s + 3)
System 1
–
–
–
System 2
System 4
System 3
100(s + 5)
s(s + 3)(s2 + 4)
FIGURE P10.1
6. Draw the polar plot from the separate magnitude and
phase curves shown in Figure P10.2. [Section: 10.1]
7. Draw the separate magnitude and phase curves from
the polar plot shown in Figure P10.3. [Section: 10.1]
Imaginary axis
8
6
4
2
0
–2
–4
–6
–8
Real axis
10
8
6
4
2
–2
–4
× 10–3
× 10–3
10
8
7
6
5
4
3
2
ω =1
0
FIGURE P10.3
Phase (deg)
100
0
–50
–100
–150
–200
10
1
0.1
Frequency (rad/s)
20 log M
100
0
–10
–20
–30
–40
10
1
0.1
Frequency (rad/s)
FIGURE P10.2
Problems
599

8. Write a program in MATLAB that
will do the following:
a. Plot the Nyquist diagram of a system
b. Display the real-axis crossing value
and frequency
Apply your program to a unity feedback system with
Gs 
Ks  5
s2  6s  100s2  4s  25
9. Using the Nyquist criterion, ﬁnd out whether each
system of Problem 5 is stable. [Section: 10.3]
10. Using the Nyquist criterion, ﬁnd the range of K for
stability for each of the systems in Figure P10.4.
[Section: 10.3]
+
K
(s + 2)
R(s)
C(s)
+
(s + 2)(s + 4)
R(s)
C(s)
System 2
System 1
+
K(s – 1)
(s + 1)
(s – 2)
(s + 2)
R(s)
C(s)
System 3
1
(s + 4)(s + 6)
–
–
–
1
s
K(s2 – 4s + 13)
FIGURE P10.4
11. For each system of Problem 10, ﬁnd the gain margin
and phase margin if the value of K in each part of
Problem 10 is [Section: 10.6]
a. K  1000
b. K  100
c. K  0:1
12. Write a program in MATLAB that
will do the following:
a. Allow a value of gain, K, to be entered
from the keyboard
b. Display the Bode plots of a system for
the entered value of K
c. Calculate and display the gain and
phase margin for the entered value
of K
Test your program on a unity feedback
system with Gs  K=ss  3s  12.
13. Use MATLAB’s LTI Viewer to ﬁnd
the gain margin, phase margin,
zero dB frequency, and 180° frequency for
a unity feedback system with
Gs 
8000
s  6s  20s  35
Use the following methods:
a. The Nyquist diagram
b. Bode plots
14. Derive Eq. (10.54), the closed-loop bandwidth in
terms of ζ and ωn of a two-pole system. [Section: 10.8]
15. For each closed-loop system with the following
performance characteristics, ﬁnd the closed-loop
bandwidth: [Section: 10.8]
a. ζ  0:2; Ts  3 seconds
b. ζ  0:2; Tp  3 seconds
c. Ts  4 seconds; Tp  2 seconds
d. ζ  0:3; Tr  4 seconds:
16. Consider the unity feedback system of Figure 10.10.
For each G(s) that follows, use the M and N circles to
make a plot of the closed-loop frequency response:
[Section: 10.9]
a. Gs 
10
ss  1s  2
b. Gs 
1000
s  3s  4s  5s  6
c. Gs 
50s  3
ss  2s  4
17. RepeatProblem16,usingtheNicholschartinplaceofthe
M and N circles. [Section: 10.9]
18. Using the results of Problem 16, estimate the percent
overshoot that can be expected in the step response for
each system shown. [Section: 10.10]
19. Use the results of Problem 17 to estimate the percent
overshoot if the gain term in the numerator of the
600
Chapter 10
Frequency Response Techniques

forward path of each part of the problem is respec-
tively changed as follows: [Section: 10.10]
a. From 10 to 30
b. From 1000 to 2500
c. From 50 to 75
20. Write a program in MATLAB that
will do the following:
a. Allow a value of gain, K, to be entered
from the keyboard
b. Display the closed-loop magnitude and
phase frequency response plots of a
unity feedback system with an open-
loop transfer function, KG(s)
c. Calculate and display the peak magni-
tude, frequency of the peak magnitude,
and
bandwidth
for
the
closed-loop
frequency response and the entered
value of K
Test your program on the system of
Figure P10.5 for K  50.
K(s + 5)
s(s2 + 4s +16)
+
–
R(s)
E(s)
C(s)
FIGURE P10.5
21. Use MATLAB’s LTI Viewer with the
Nichols plot to ﬁnd the gain
margin, phase margin, zero dB frequency,
and 180° frequency for a unity feedback
system with the forward-path transfer
function
Gs 
5s  6
ss2  4s  15
22. Write a program in MATLAB that
will do the following:
a. Make a Nichols plot of an open-loop
transfer function
b. Allow the user to read the Nichols plot
display and enter the value of Mp
c. Make closed-loop magnitude and phase
plots
d. Display the expected values of percent
overshoot, settling time, and peak time
e. Plot the closed-loop step response
Test your program on a unity feedback
system with the forward-path transfer
function
Gs 
5s  6
ss2  4s  15
and explain any discrepancies.
23. Using Bode plots, estimate the transient response of the
systems in Figure P10.6. [Section: 10.10]
+
100(s + 2)
s(s + 1)(s + 4)
R(s)
C(s)
–
System 1
+
50(s + 3)(s + 5)
s(s + 2)(s + 4)(s + 6)
E(s)
R(s)
C(s)
–
System 2
FIGURE P10.6
24. For the system of Figure P10.5, do the following:
[Section: 10.10]
a. Plot the Bode magnitude and phase plots.
b. Assuming a second-order approximation, estimate
the transient response of the system if K  2.
c. Use MATLAB or any other program
to check your assumptions by
simulating the step response of the
system.
25. Write a program in MATLAB that
will use an open-loop transfer
function, G(s), to do the following:
a. Make a Bode plot
b. Use frequency response methods to
estimate
the
percent
overshoot,
settling time, and peak time
c. Plot the closed-loop step response
Test
your
program
by
comparing
the
results to those obtained for the systems
of Problem 23.
26. The Bode plots for a plant, G(s), used in a unity
feedback system are shown in Figure P10.7. Do the
following:
a. Findthegainmargin,phasemargin,zerodBfrequency,
180° frequency, and the closed-loop bandwidth.
b. Use your results in Part a to estimate the damping
ratio, percent overshoot, settling time, and peak time.
27. The
open-loop
frequency
response
shown
in
Figure P10.8 was experimentally obtained from a
unity feedback system. Estimate the percent overshoot
and steady-state error of the closed-loop system.
[Sections: 10.10, 10.11]
Problems
601

20
0
–20
–90
–135
–180
–225
–270
–40
–60
–80
–100
10–1
100
Frequency (rad/s)
Frequency (rad/s)
20 log M
Phase (degrees)
101
102
10–1
100
101
102
FIGURE P10.7
60
40
20
0
–100
–100
–120
–140
–160
–180
–200
–220
–240
–260
–80
–280
–80
0.1
1
Frequency (rad/s)
10
0.01
100
–60
–40
–20
20 log M
0.1
1
Frequency (rad/s)
10
0.01
100
Phase (degrees)
FIGURE P10.8
602
Chapter 10
Frequency Response Techniques

28. Consider the system in Figure P10.9. [Section: 10.12]
R(s) +
C(s)
Delay
50
(s + 2)(s + 5)
E(s)
–
FIGURE P10.9
a. Find the phase margin if the system is stable for time
delays of 0, 0.1, 0.2, 0.5, and 1 second.
b. Find the gain margin if the system is stable for each of
the time delays given in Part a.
c. For what time delays mentioned in Part ais the system
stable?
d. For each time delay that makes the system unstable,
how much reduction in gain is required for the system
to be stable?
29. Given a unity feedback system with the forward-path
transfer function
Gs 
K
s  1s  3s  6
and a delay of 0.5 second, ﬁnd the range of gain, K, to
yield stability. Use Bode plots and frequency response
techniques. [Section: 10.12]
30. Given a unity feedback system with the forward-path
transfer function
Gs 
K
ss  1s  15
and a delay of 0.2 second, make a second-order
approximation and estimate the percent overshoot if
K  30. Use Bode plots and frequency response
techniques. [Section: 10.12]
31. Use the MATLAB function pade(T,n)
to model the delay in Problem 30.
Obtain the unit step response and eval-
uate your second-order approximation
in Problem 30.
32. For the Bode plots shown in Figure P10.10, determine
the transfer function by hand or via MATLAB.
[Section: 10.13]
40
20 log M
Phase (degrees)
20
–20
–90
–135
–180
–40
–60
–80
10–1
100
101
102
103
10–1
100
101
102
103
Frequency (rad/s)
Frequency (rad/s)
0
FIGURE P10.10
Problems
603

33. Repeat Problem 32 for the Bode plots shown in
Figure P10.11. [Section: 10.13]
34. An overhead crane consists of a horizontally moving
trolley of mass mT dragging a load of mass mL, which
dangles from its bottom surface at the end of a rope
of ﬁxed length, L. The position of the trolley is
controlled in the feedback conﬁguration shown in
Figure 10.20. Here, Gs  KPs; H  1, and
Ps  XTs
FTs  1
mT
s2  ω2
0
s2s2  aω2
0
The input is fT(t), the input force applied to the trolley.
The output is xT(t), the trolley displacement. Also,
ω0 
ﬃﬃﬃg
L
r
and a  mL  mT=mT (Marttinen, 1990)
Make a qualitative Bode plot of the system assuming
a > 1.
35. A room’s temperature can be controlled by varying the
radiator power. In a speciﬁc room, the transfer function
from indoor radiator power, _Q, to room temperature, T in
°C is (Thomas, 2005)
Ps  Ts
_Qs

1  10
6s2  1:314  10
9s  2:66  10
13
s3  0:00163 s2  5:272  10
7s  3:538  10
11
Thesystemiscontrolled intheclosed-loopconﬁguration
shown in Figure 10.20 with Gs  KPs; H  1.
a. Draw the corresponding Nyquist diagram for K  1.
b. Obtain the gain and phase margins.
c. Find the range of K for the closed-loop stability.
Compare your result with that of Problem 58,
Chapter 6.
36. The open-loop dynamics from dc voltage armature to
angular position of a robotic manipulator joint is given
by Ps 
48500
s2  2:89s (Low, 2005).
a. Draw by hand a Bode plot using asymptotic
approximations for magnitude and phase.
b. Use MATLAB to plot the exact
Bode plot and compare with your
sketch from Part a.
37. Problem 47, Chapter 8 discusses a magnetic levitation
system with a plant transfer function Ps  
1300
s2 
 8602
(Galvão, 2003). Assume that the plant is in cascade
with an M(s) and that the system will be controlled by
the loop shown in Figure 10.20, where Gs  MsPs
and H  1. For each M(s) that follows, draw the Nyquist
diagram when K  1, and ﬁnd the range of closed-loop
stability for K > 0.
a. Ms  
K
b. Ms  
 Ks  200
s  1000
(problem continues)
15
10
5
0
–10
–20
20 log M
Frequency (rad/s)
50
0
–50
–100
–150
Phase (degrees)
1
10
100
0.1
Frequency (rad/s)
–5
–15
–200
1
10
100
0.1
FIGURE P10.11
604
Chapter 10
Frequency Response Techniques

(Continued)
c. Compare your results with those obtained in
Problem 47, Chapter 8.
38. A simple modiﬁed and linearized model for the transfer
function of a certain bicycle from steer angle (δ) to roll
angle (φ) is given by (Åstrom, 2005)
Ps  φs
δs  12s  20
s2  25
Assume the rider can be represented by a gain K, and
that the closed-loop system is shown in Figure 10.20
with Gs  KPs and H  1.
Use MATLAB and the Nyquist
stability criterion to ﬁnd the
range of K for closed-loop stability.
39. The control of the radial pickup position of a digital
versatile disk (DVD) was discussed in Problem 48,
Chapter 9. There, the open-loop transfer function from
coil input voltage to radial pickup position was given as
(Bittanti, 2002)
Ps 
0:63
1  0:36
305:4 s 
s2
305:42


1  0:04
248:2 s 
s2
248:22


Assume the plant is in cascade with a controller,
Ms  0:5s  1:63
ss  0:27
and in the closed-loop conﬁguration shown in Fig-
ure 10.20, where Gs  MsPs and H  1. Do the
following:
a. Draw the open-loop frequency response in a Nichols
chart.
b. Predict the system’s response to a unit step input.
Calculate the %OS, cﬁnal, and Ts.
c. Verify the results of Part b
using MATLAB simulations.
40. A ship’s roll can be stabilized with a control system. A
voltage applied to the ﬁns’ actuators creates a roll torque
that is applied to the ship. The ship, in response to the roll
torque, yields a roll angle. Assuming the block diagram
for the roll control system shown in Figure P10.12,
determine the gain and phase margins for the system.
41. The linearized model of a particular network link
working under TCP/IP and controlled using a random
early detection (RED) algorithm can be described
by Figure 10.20 where Gs  MsPs; H  1, and
(Hollot, 2001)
Ms  0:005L
s  0:005 ; Ps 
140625e
0:1s
s  2:67s  10
a. Plot the Nichols chart for L  1. Is the system
closed-loop stable?
b. Find the range of L for closed-loop stability.
c. Use the Nichols chart to predict %OS and Ts for
L  0:95. Make a hand sketch of the expected unit
step response.
d. Verify Part c with a Simulink
unit step response
simulation.
42. In the TCP/IP network link of Problem 41, let L  0:8,
but assume that the amount of delay is an unknown
variable.
a. Plot the Nyquist diagram of the system for zero delay,
and obtain the phase margin.
b. Find the maximum delay allowed for closed-loop
stability.
43. An experimental holographic media storage system
uses a ﬂexible photopolymer disk. During rotation,
the disk tilts, making information retrieval difﬁcult.
A system that compensates for the tilt has been
developed. For this, a laser beam is focused on the
disk surface and disk variations are measured through
reﬂection. A mirror is in turn adjusted to align with the
disk and makes information retrieval possible. The
system can be represented by a unity feedback system
in which a controller with transfer function
GCs  78:575s  4362
s  132s  8030
and a plant
Ps 
1:163  108
s3  962:5s2  5:958  105s  1:16  108
form an open loop transmission Ls  GcsPs
(Kim, 2009).
+
5
Transducer
Fin
actuator
0.5
s + 5
Ship
roll
dynamics
9
s2 + 1.2s + 9
Desired
roll
angle, θd(s) 
Voltage
Torque
–
Roll
angle
error,  θe(s) 
Actual
roll
angle, θa(s) 
FIGURE P10.12
Block diagram of a ship’s roll-stabilizing system
Problems
605

a. Use MATLAB to obtain the
system’s Nyquist diagram.
Find out if the system is stable.
b. Find the system’s phase margin.
c. Use the value of phase margin obtained
in b. to calculate the expected sys-
tem’s overshoot to a step input.
d. Simulate the system’s response to a
unit step input and verify the %OS
calculated in c.
44. The design of cruise control systems in heavy vehicles,
such as big rigs, is especially challenging due to the
extreme variations in payload. Assume that the fre-
quency response for the transfer function from fuel
mass ﬂow to vehicle speed is shown in Figure P10.13.
0
–10
–20
–30
–40
Magnitude (dB)
Phase (deg)
–50
–60
90
45
0
–45
–90
Frequency (rad/s)
10–6 10–5 10–4 10–3 10–2 10–1 100
101
102
103
104
FIGURE P10.13
This response includes the dynamics of the
engine, the gear box, the propulsion shaft, the differen-
tial, the drive shafts, the chassis, the payload, and tire
dynamics. Assume that the system is controlled in a
closed-loop, unity-feedback loop using a proportional
compensator (van der Zalm, 2008).
a. MakeaplotoftheNyquistdiagramthatcorrespondsto
the Bode plot of Figure P10.13.
b. Assuming there are no open-loop poles in the right
half-plane, ﬁnd out if the system is closed-loop stable
when the proportional gain K = 1.
c. Find the range of positive K for which the system is
closed-loop stable.
45. Use LabVIEW with the Control
Design and Simulation Module
and MathScript RT Module to do
the following: Modify the CDEx
Nyquist Analysis.vi to obtain
the range of K for stability using the
Nyquist plot for any system you enter.
In addition, design a LabVIEW VI that
will accept as an input the polynomial
numerator and polynomial denominator
of an open-loop transfer function and
obtain a Nyquist plot for a value of
K = 10,000. Your VI will also display
the following as generated from the
Nyquist plot: (1) gain margin, (2) phase
margin, (3) zero dB frequency, and (4) 180
degrees frequency. Use the system and
results
of
Skill-Assessment
Exercise
10.6 to test your VIs.
46. Use LabVIEW with the Control
Design and Simulation Module,
and MathScript RT Module to
build a VI that will accept
an open-loop transfer
function, plot the Bode diagram, and plot
the closed-loop step response. Your VI
will also use the CD Parametric Time
Response VI to display (1) rise time, (2)
peak time, (3) settling time, (4) percent
overshoot, (5) steady-state value, and
(6) peak value. Use the system in Skill-
Assessment Exercise 10.9 to test your VI.
Compare the results obtained from your VI
with those obtained in Skill-Assessment
Exercise 10.9.
47. The block diagram of a cascade
system used to control water
level in a steam generator of a
nuclear power plant (Wang, 2009) was pre-
sentedinFigureP6.14.Inthatsystem,the
level controller, GLC(s), is the master
controller and the feed-water ﬂow con-
troller, GFC(s), is the slave controller.
Consider that the inner feedback loop
is replaced by its equivalent transfer
function, GWX(s).
Using numerical values in (Wang,
2009) and (Bhambhani, 2008) the transfer
functions with a 1 second pure delay are:
Gfws 
2  e
τs
sT1s  1 
2  e
s
s25s  1 ;
GWXs 
4s  1
33:333s  1 ;
GLCs  KPLC  KDLCs  1:510s  1
606
Chapter 10
Frequency Response Techniques

Use MATLAB or any other program to:
a. Obtain Bode magnitude and phase plots
for this system using a ﬁfth-order Padé
approximation (available in MATLAB).
Note on these plots, if applicable, the
gain and phase margins.
b. Plot the response of the system, c(t),
to a unit step input, r(t) = u(t). Note
on the c(t) curve the rise time, Tr, the
settling time, Ts, the ﬁnal value of the
output, and, if applicable, the percent
overshoot, %OS, and mid peak time, Tp.
c. Repeat the above two steps for a pure
delay of 1.5 seconds.
48. Fruit ﬂies’ ﬂight dynamics are interesting to study
because they provide a proof-of-concept framework
and inspiration for the invention of man-made machines.
In an experiment (Roth, 2012), ﬂies are stimulated to
follow, in ﬂight, an oscillating vertical bar. Through
frequency response measurements, the obtained open-
loop transfer function from stimulus stripe position to a
voltage proportional to wingbeat amplitudes is
Gs  e
0:032s
0:181s2  1:23s  8:68
s3  20:6s2  277s  1098
Assume a unit feedback system.
a. Make a Bode plot of the open-loop transfer function.
b. Find the gain and phase margins.
c. Use a computer program to make a plot of the
corresponding Nyquist diagram.
d. Use the result in Part b to ﬁnd the range of K for
closed-loopstabilityiftheopen-looptransferfunction
becomes KG(s).
49. In order to self-balance a bicycle, its open-loop transfer
function is found to be (Lam, 2011):
Gs  θs
Us

334019
s4  5126:16s3  2470:7s2  428419s 
 34040
where θ(s) is the angle of the bicycle with respect to
the vertical, and U(s) is the voltage applied to the
motor that drives a ﬂywheel used to stabilize the
bicycle. Note that the bicycle is open-loop unstable
with one open-loop pole in the right half-plane.
a. Draw the Nyquist diagram of the system.
b. Find the system’s gain and phase margins.
c. Assuming a unit feedback system, ﬁnd the range of K
for closed-loop stability if the forward path transfer
function is KG(s).
d. Assuming a second-order approximation, what is the
expected %OS if K = 0.141?
e. Use
a
computer
program
to
simulate
your
system for a unit-step response using the value
of K in Part d.
50. Modify the MATLAB program you
developed in Problem 10.20 to do
the following:
a. Display the closed-loop magnitude and
phase frequency response plots for the
drivesystem(Thomsen,2011)presented
in Problem 56, Chapter 8. Using the
graph properties, specify the value
of K in the Bode plot title.
b. Calculate and display the closed-loop
transfer
function,
T(s),
the
peak
magnitude, frequency of the peak magni-
tude, and bandwidth for the closed-loop
frequency response at the following two
values of the proportional controller’s
gain, K = KP = 3.2 and 10.
51. A linear model of the α-subsystem of a grid-
connected voltage-source converter (VSC) with a
Y-Y transformer (Mahmood, 2012) was presented
in Problem 69, Chapter 8. In Figure P8.20(b),
GC(s) = K and GP(s) is given in a pole zero form
(with a unity gain and slightly modiﬁed parameters)
as follows:
GPs  Vαs
Mαs 
s  2200
s  220s2  120s  16  106
Use MATLAB and frequency
response techniques to obtain
the Bode plots for this system
and ﬁnd the following:
a. The range of K for system stability
b. The gain margin, phase margin, zero dB
frequency, and 180° frequency, if K =
5 × 105.
52. A new measurement-based technique to design ﬁxed-
structure controllers for unknown SISO systems,
which does not require system identiﬁcation, has
been proposed. The fourth-order transfer function
shown below and modiﬁed to have a unity steady-
state gain is used as an example (Khadraoui, 2013).
Gs 
0:11114s2  5s  1
s4  3:1s3  0:85s2  0:87s  0:1111
The interested reader is referred to the reference to
explore this new technique. In this problem and its
Problems
607

companion design problem in Chapter 11, however,
we take a standard approach as covered in Chapters 10
and 11.
Assuming that a cascade-
connected proportional
controller, GC(s) = K, is used,
utilize MATLAB and frequency response
techniques to obtain the Bode plots for
this system and ﬁnd:
a. The range of K for system stability
b. The gain margin, phase margin, zero dB
frequency,
and
180° frequency,
if
K = 0.3.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
53. Control of HIV/AIDS. The linearized model for an
HIV/AIDS patient treated with RTIs was obtained in
Chapter 6 as (Craig, 2004);
Ps  Ys
U1s 

520s 
 10:3844
s3  2:6817s2  0:11s  0:0126
a. Consider this plant in the feedback conﬁguration in
Figure 10.20 with Gs  Ps and Hs  1. Obtain
the Nyquist diagram. Evaluate the system for closed-
loop stability.
b. Consider this plant in the feedback conﬁguration
in Figure 10.20 with Gs  
Ps and Hs  1.
Obtain the Nyquist diagram. Evaluate the system
for closed-loop stability. Obtain the gain and phase
margins.
54. Hybrid vehicle. In Problem 71,
Chapter 8, we used MATLAB to plot
the root locus for the speed control
of an HEV rearranged as a unity-feedback
system, as shown in Figure P7.31 (Preitl,
2007). The plant and compensator were
given by
Gs 
Ks  0:6
s  0:5858s  0:0163
and we found that K = 0.78, resulted in a
critically damped system.
a. Use MATLAB or any other program to
plot the following:
i. The Bode magnitude and phase plots
for that system, and
ii. The response of the system, c(t), to
a step input, r(t) = 4 u(t). Note on
the c(t) curve the rise time, Tr, and
settling time, Ts, as well as the
ﬁnal value of the output.
b. Now add an integral gain to the control-
ler,suchthattheplantandcompensator
transfer function becomes
Gs 
K1s  Zcs  0:6
ss  0:5858s  0:0163
where
K1=0.78
and
Zc  K2
K1
 0:4.
Use
MATLAB or any other program to do the
following:
i. Plot the Bode magnitude and phase
plots for this case.
ii. Obtain the response of the system
to a step input, r(t) = 4 u(t). Plot
c(t) and note on it the rise time, Tr,
percent overshoot, %OS, peak time,
Tp, and settling time, Ts.
c. Does the response obtained in Parts a
orbresembleasecond-orderoverdamped,
critically damped, or underdamped
response? Explain.
55. Parabolic trough collector. As discussed in Section
10.12, the Nyquist stability criterion can be applied to
systems with pure time delay without the need for
rational approximations as required in Problems 8.72
and 9.59. You will verify this by applying the Nyquist
stability criterion to the parabolic trough collector by
assuming a unity-feedback system and a forward-path
transfer function (Camacho, 2012),
Gs 
137:2  10
6K
s2  0:0224s  196  10
6 e
39s
a. Draw the corresponding Nyquist diagram for K = 1.
b. Use the Nyquist diagram to ﬁnd the range of K for
which the system is closed-loop stable.
c. Find the value of K that will make the system
marginally stable and the associated frequency of
oscillation.
608
Chapter 10
Frequency Response Techniques

Cyber Exploration Laboratory
Experiment 10.1
Objectives
To examine the relationships between open-loop frequency response and
stability, open-loop frequency response and closed-loop transient response, and the effect of
additional closed-loop poles and zeros upon the ability to predict closed-loop transient
response
Minimum Required Software Packages
MATLAB, and the Control System
Toolbox
Prelab
1. Sketch the Nyquist diagram for a unity negative feedback system with a forward
transfer function of Gs 
K
ss  2s  10. From your Nyquist plot, determine the
range of gain, K, for stability.
2. Find the phase margins required for second-order closed-loop step responses with the
following percent overshoots: 5%, 10%, 20%, 30%.
Lab
1. Using the SISO Design Tool, produce the following plots simultaneously for the
system of Prelab 1: root locus, Nyquist diagram, and step response. Make plots for the
following values of K: 50, 100, the value for marginal stability found in Prelab 1, and
a value above that found for marginal stability. Use the zoom tools when required to
produce an illustrative plot. Finally, change the gain by grabbing and moving the
closed-loop poles along the root locus and note the changes in the Nyquist diagram
and step response.
2. Using the SISO Design Tool, produce Bode plots and closed-loop step responses for a
unity negative feedback system with a forward transfer function of Gs 
K
ss  102.
Produce these plots for each value of phase margin found in Prelab 2. Adjust the gain to
arrive at the desired phase margin by grabbing the Bode magnitude curve and moving it
up or down. Observe the effects, if any, upon the Bode phase plot. For each case, record
the value of gain and the location of the closed-loop poles.
3. Repeat Lab 2 for Gs 
K
ss  10.
Postlab
1. Make a table showing calculated and actual values for the range of gain for stability as
found in Prelab 1 and Lab 1.
2. Make a table from the data obtained in Lab 2 itemizing phase margin, percent overshoot,
and the location of the closed-loop poles.
3. Make a table from the data obtained in Lab 3 itemizing phase margin, percent overshoot,
and the location of the closed-loop poles.
4. For each Postlab task 1 to 3, explain any discrepancies between the actual values
obtained and those expected.
Experiment 10.2
Objectives
To use LabVIEW and Nichols charts to determine the closed-loop time
response performance
Cyber Exploration Laboratory
609

Bibliography
Åstrom, K., Klein, R. E., and Lennartsson, A. Bicycle Dynamics and Control. IEEE Control System,
August 2005, pp. 26–47.
Bhambhani, V., and Chen, YQ. Experimental Study of Fractional Order Proportional Integral
(FOPI) Controller for Water Level Control. 47th IEEE Conference on Decision and Control,
2008, pp. 1791–1796.
Bittanti, S., Dell’Orto, F., DiCarlo, A., and Savaresi, S. M. Notch Filtering and Multirate Control for
Radial Tracking in High Speed DVD-Players. IEEE Transactions on Consumer Electronics,
vol. 48. 2002, pp. 56–62.
Bode, H. W. Network Analysis and Feedback Ampliﬁer Design. Van Nostrand, Princeton, NJ, 1945.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989.
Franklin, G., Powell, J. D., and Emami-Naeini, A. Feedback Control of Dynamic Systems, 2d ed.
Addison-Wesley, Reading, MA, 1991.
Galvão, R. K. H., Yoneyama, T., and de Araújo, F. M. U. A Simple Technique for Identifying a
Linearized Model for a Didactic Magnetic Levitation System. IEEE Transactions on Education,
vol. 46, no. 1, February 2003, pp. 22–25.
Hollot, C. V., Misra, V., Towsley, D., and Gong, W. A Control Theoretic Analysis of RED.
Proceedings of IEEE INFOCOM, 2001, pp. 1510–1519.
Hostetter, G. H., Savant, C. J., Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed.
Saunders College Publishing, New York, 1989.
Khadraoui, S., Nounou, H., Nounou, M., Datta, A., and Bhattacharyya, S. P. A measurement-based
approach for tuning of reduced-order controllers. American Control Conference (ACC),
June 2013, pp. 3876–3881.
Kim, S.-H., Kim, J. H., Yang, J., Yang, H., Park, J.-Y., and Park, Y.-P. Tilt Detection and Servo
Control Method for the Holographic Data Storage System. Microsyst Technol, vol. 15, 2009.
pp. 1695–1700.
Minimum Required Software Packages
LabVIEW, Control Design and
Simulation Module, MathScript RT Module, and MATLAB
Prelab
1. Assume a unity-feedback system with a forward-path transfer function, Gs 
100
ss  5.
Use MATLAB or any method to determine gain and phase margins. In addition, ﬁnd the
percent overshoot, settling time, and peak time of the closed-loop step response.
2. Design a LabVIEW VI that will create a Nichols chart. Adjust the Nichols chart’s
scale to estimate gain and phase margins. Then, prompt the user to enter the values
of gain and phase margins found from the Nichols chart. In response, your VI will
produce the percent overshoot, settling time, and peak time of the closed-loop step
response.
Lab
Run your VI for the system given in the Prelab. Test your VI with other systems
of your choice.
Postlab
Compare the closed-loop performance calculated in the Prelab with those
produced by your VI.
610
Chapter 10
Frequency Response Techniques

Kuo, B. C. Automatic Control Systems, 5th ed. Prentice Hall, Upper Saddle River, NJ, 1987.
Kuo, F. F. Network Analysis and Synthesis. Wiley, New York, 1966.
Lam, P. Y. Gyroscopic Stabilization of a Kid-Size Bicycle. IEEE 5th International Conference on
Cybernetics and Intelligent Systems, 2011, pp. 247–252.
Low, K. H., Wang, H., Liew, K. M., and Cai, Y. Modeling and Motion Control of Robotic Hand for
Telemanipulation Application. International Journal of Software Engineering and Knowledge
Engineering, vol. 15, 2005, pp. 147–152.
Mahmood, H., and Jiang, J. Modeling and Control System Design of a Grid Connected VSC
Considering the Effect of the Interface Transformer Type. IEEE Transactions on Smart Grid,
vol. 3, no. 1, March 2012, pp. 122–134.
Marttinen, A., Virkkunen, J., and Salminen, R. T. Control Study with Pilot Crane. IEEE Transactions
on Education, vol. 33, no. 3, August 1990, pp. 298–305.
Nilsson, J. W. Electric Circuits, 3d ed. Addison-Wesley, Reading, MA, 1990.
Nyquist, H. Regeneration Theory. Bell Systems Technical Journal, January 1932, pp. 126–147.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Intelligence and Informatics.
IEEE, 2007, pp. 157–162.
Roth, E., Reiser, M. B., Dickinson, M. H., Noah, J., and Cowan, N. J. A Task-level Model for
Optomotor Yaw Regulation in Drosophila Melanogaster: A Frequency-Domain System
Identiﬁcation Approach. 51st IEEE Conference on Decision and Control, December 10–13,
2012, pp. 3721–3726.
Thomas, B., Soleimani-Mosheni, M., and Fahlén, P. Feed-forward in Temperature Control of
Buildings. Energy and Buildings, vol. 37, 2005, pp. 755–761.
Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-based State Space Control, and
Model-Based Predictive Control for Drive Systems With Elastically Coupled Loads—A
Comparative Study. IEEE Transactions on Industrial Electronics, vol. 58, no. 8, August 2011,
pp. 3647–3657.
Van der Zalm, G., Huisman, R., Steinbuch, M., and Veldpaus, F. Frequency Domain Approach for
the Design of Heavy-Duty Vehicle Speed Controllers. Int. J. Heavy Vehicle Systems, vol. 15, no. 1,
2008. pp. 107–123.
Wang, X.-K., Yang, X.-H., Liu, G., and Qian, H. Adaptive Neuro-Fuzzy Inference System PID
Controller for Steam Generator Water Level of Nuclear Power Plant, Proceedings of the Eighth
International Conference on Machine Learning and Cybernetics, 2009, pp. 567–572.
Bibliography
611


Design via Frequency
Response
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Use frequency response techniques to adjust the gain to meet a transient
response speciﬁcation (Sections 11.1–11.2)
• Use frequency response techniques to design cascade compensators to improve
the steady-state error (Section 11.3)
• Use frequency response techniques to design cascade compensators to improve
the transient response (Section 11.4)
• Use frequency response techniques to design cascade compensators to improve
both the steady-state error and the transient response (Section 11.5)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to use frequency response techniques to design the
gain to meet a transient response speciﬁcation.
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to use frequency response techniques to design a
cascade compensator to meet both transient and steady-state error speciﬁcations.

11
613

11.1 Introduction
In Chapter 8, we designed the transient response of a control system by adjusting the
gain along the root locus. The design process consisted of ﬁnding the transient response
speciﬁcation on the root locus, setting the gain accordingly, and settling for the resulting
steady-state error. The disadvantage of design by gain adjustment is that only the
transient response and steady-state error represented by points along the root locus are
available.
In order to meet transient response speciﬁcations represented by points not on the root
locus and, independently, steady-state error requirements, we designed cascade compensators
in Chapter 9. In this chapter, we use Bode plots to parallel the root locus design process from
Chapters 8 and 9.
Let us begin by drawing some general comparisons between root locus and frequency
response design.
Stability and transient response design via gain adjustment. Frequency response
design methods, unlike root locus methods, can be implemented conveniently without a
computer or other tool except for testing the design. We can easily draw Bode plots using
asymptotic approximations and read the gain from the plots. Root locus requires repeated
trials to ﬁnd the desired design point from which the gain can be obtained. For example, in
designing gain to meet a percent overshoot requirement, root locus requires the search of a
radial line for the point where the open-loop transfer function yields an angle of 180°. To
evaluate the range of gain for stability, root locus requires a search of the jω-axis for 180°. Of
course, if one uses a computer program, such as MATLAB, the computational disadvantage
of root locus vanishes.
Transient response design via cascade compensation. Frequency response methods
are not as intuitive as the root locus, and it is something of an art to design cascade
compensation with the methods of this chapter. With root locus, we can identify a speciﬁc
point as having a desired transient response characteristic. We can then design cascade
compensation to operate at that point and meet the transient response speciﬁcations. In
Chapter 10, we learned that phase margin is related to percent overshoot (Eq. (10.73)) and
bandwidth is related to both damping ratio and settling time or peak time (Eqs. (10.55) and
(10.56)). These equations are rather complicated. When we design cascade compensation
using frequency response methods to improve the transient response, we strive to reshape
the open-loop transfer function’s frequency response to meet both the phase-margin
requirement (percent overshoot) and the bandwidth requirement (settling or peak time).
There is no easy way to relate all the requirements prior to the reshaping task. Thus, the
reshaping of the open-loop transfer function’s frequency response can lead to several trials
until all transient response requirements are met.
Steady-state error design via cascade compensation. An advantage of using frequency
design techniques is the ability to design derivative compensation, such as lead compensation,
to speed up the system and at the same time build in a desired steady-state error requirement
that can be met by the lead compensator alone. Recall that in using root locus there are an
inﬁnite number of possible solutions to the design of a lead compensator. One of the
differences between these solutions is the steady-state error. We must make numerous tries
to arrive at the solution that yields the required steady-state error performance. With frequency
response techniques, we build the steady-state error requirement right into the design of the
lead compensator.
You are encouraged to reﬂect on the advantages and disadvantages of root locus and
frequency response techniques as you progress through this chapter. Let us take a closer
look at frequency response design.
When designing via frequency response methods, we use the concepts of stability,
transient response, and steady-state error that we learned in Chapter 10. First, the Nyquist
criterion tells us how to determine if a system is stable. Typically, an open-loop stable
614
Chapter 11
Design via Frequency Response

system is stable in closed-loop if the open-loop magnitude frequency response has a gain of
less than 0 dB at the frequency where the phase frequency response is 180°. Second, percent
overshoot is reduced by increasing the phase margin, and the speed of the response is
increased by increasing the bandwidth. Finally, steady-state error is improved by increasing
the low-frequency magnitude responses, even if the high-frequency magnitude response is
attenuated.
These, then, are the basic facts underlying our design for stability, transient response,
and steady-state error using frequency response methods, where the Nyquist criterion and
the Nyquist diagram compose the underlying theory behind the design process. Thus,
even though we use the Bode plots for ease in obtaining the frequency response, the
design process can be veriﬁed with the Nyquist diagram when questions arise about
interpreting the Bode plots. In particular, when the structure of the system is changed with
additional compensator poles and zeros, the Nyquist diagram can offer a valuable
perspective.
The emphasis in this chapter is on the design of lag, lead, and lag-lead compensation.
General design concepts are presented ﬁrst, followed by step-by-step procedures. These
procedures are only suggestions, and you are encouraged to develop other procedures to
arrive at the same goals. Although the concepts in general apply to the design of PI, PD, and
PID controllers, in the interest of brevity, detailed procedures and examples will not be
presented. You are encouraged to extrapolate the concepts and designs covered and apply
them to problems involving PI, PD, and PID compensation presented at the end of this
chapter. Finally, the compensators developed in this chapter can be implemented with the
realizations discussed in Section 9.6.
11.2 Transient Response via Gain Adjustment
Let us begin our discussion of design via frequency response methods by discussing the link
between phase margin, transient response, and gain. In Section 10.10, the relationship
between damping ratio (equivalently percent overshoot) and phase margin was derived for
Gs  ω2
n=ss  2ζωn. Thus, if we can vary the phase margin, we can vary the percent
overshoot. Looking at Figure 11.1, we see that if we desire a phase margin, ΦM, represented
by CD, we would have to raise the magnitude curve by AB. Thus, a simple gain adjustment
can be used to design phase margin and, hence, percent overshoot.
M (dB)
A
B
Required
increase in gain
Phase (degrees)
C
log ω
–180
log ω
D
0
ΦM
ωΦM
FIGURE 11.1
Bode plots showing gain adjustment for a desired phase margin
11.2 Transient Response via Gain Adjustment
615

We now outline a procedure by which we can determine the gain to meet a percent
overshoot requirement using the open-loop frequency response and assuming dominant
second-order closed-loop poles.
Design Procedure
1. Draw the Bode magnitude and phase plots for a convenient value of gain.
2. Using Eqs. (4.39) and (10.73), determine the required phase margin from the percent
overshoot.
3. Find the frequency, ωΦM, on the Bode phase diagram that yields the desired phase
margin, CD, as shown on Figure 11.1.
4. Change the gain by an amount AB to force the magnitude curve to go through 0 dB at
ωΦM. The amount of gain adjustment is the additional gain needed to produce the
required phase margin.
We now look at an example of designing the gain of a third-order system for percent
overshoot.
Example 11.1
Transient Response Design via Gain Adjustment
Transient Response Design via Gain Adjustment
PROBLEM: For the position control system shown in Figure 11.2, ﬁnd the value of
preampliﬁer gain, K, to yield a 9.5% overshoot in the transient response for a step input.
Use only frequency response methods.
SOLUTION: We will now follow the previously described gain adjustment design
procedure.
1. Choose K  3:6 to start the magnitude plot at 0 dB at ω  0:1 in Figure 11.3.
2. Using Eq. (4.39), a 9.5% overshoot implies ζ  0:6 for the closed-loop dominant
poles. Equation (10.73) yields a 59.2° phase margin for a damping ratio of 0.6.
3. Locate on the phase plot the frequency that yields a 59.2° phase margin. This
frequency is found where the phase angle is the difference between 180° and
59.2°, or 120:8°. The value of the phase-margin frequency is 14.8 rad/s.
4. At a frequency of 14.8 rad/s on the magnitude plot, the gain is found to be 44.2 dB.
This magnitude has to be raised to 0 dB to yield the required phase margin. Since
the log-magnitude plot was drawn for K  3:6, a 44.2 dB increase, or K 
3:6  162:2  583:9, would yield the required phase margin for 9.48% overshoot.
+
–
Shaft
position
K
1
s
1
(s + 36)
100
(s + 100)
Desired
position
R(s)
C(s)
Shaft
velocity
Preamplifier
Power 
amplifier
Motor
and
load
FIGURE 11.2
System for Example 11.1
616
Chapter 11
Design via Frequency Response

The gain-adjusted open-loop transfer function is
Gs 
58;390
ss  36s  100
(11.1)
Table 11.1 summarizes a computer simulation of the gain-compensated system.
Students who are using MATLAB should now run ch11p1 in Appendix B.
You will learn how to use MATLAB to design a gain to meet a percent
overshoot speciﬁcation using Bode plots. This exercise solves
Example 11.1 using MATLAB.
0
–10
–20
–30
–40
–50
–60
–70
–80 0.1
1
10
100
Frequency (rad/s)
20 log M
Magnitude after gain adjustment
Magnitude before gain adjustment
Phase (degrees)
–80
–100
–120
–140
–160
–180
–200
–220 0.1
1
10
100
Frequency (rad/s)
FIGURE 11.3
Bode magnitude and phase plots for Example 11.1
TABLE 11.1
Characteristic of gain-compensated system of Example 11.1
Parameter
Proposed speciﬁcation
Actual value
Kv
—
16.22
Phase margin
59.2°
59.2°
Phase-margin frequency
—
14.8 rad/s
Percent overshoot
9.5
10
Peak time
—
0.18 second
11.2 Transient Response via Gain Adjustment
617

In this section, we paralleled our work in Chapter 8 with a discussion of transient
response design through gain adjustment. In the next three sections, we parallel the root
locus compensator design in Chapter 9 and discuss the design of lag, lead, and lag-lead
compensation via Bode diagrams.
11.3 Lag Compensation
In Chapter 9, we used the root locus to design lag networks and PI controllers. Recall that
these compensators permitted us to design for steady-state error without appreciably
affecting the transient response. In this section, we provide a parallel development using
the Bode diagrams.
Visualizing Lag Compensation
The function of the lag compensator as seen on Bode diagrams is to (1) improve the static
error constant by increasing only the low-frequency gain without any resulting instability,
and (2) increase the phase margin of the system to yield the desired transient response. These
concepts are illustrated in Figure 11.4.
The uncompensated system is unstable, since the gain at 180° is greater than 0 dB. The
lag compensator, while not changing the low-frequency gain, does reduce the high-
frequency gain.1 Thus, the low-frequency gain of the system can be made high to yield
Skill-Assessment Exercise 11.1
PROBLEM: For a unity feedback system with a forward transfer function
Gs 
K
ss  50s  120
use frequency response techniques to ﬁnd the value of gain, K, to yield a closed-loop step
response with 20% overshoot.
ANSWER: K  194;200
The complete solution is located at www.wiley.com/college/nise.
In the SISOTOOL Window for TryIt 11.1:
1. Select Import . . . in the File menu.
2. Click on G in the System Data Window and click Browse . . .
3. In the Model Import Window select radio button Workspace and select G in
Available Models. Click Import, then Close.
4. Click Ok in the System Data Window.
5. Right-click in the Bode graph area and be sure all selections under Show are checked.
6. Grab the stability margin point in the magnitude diagram and raise the magnitude
curve until the phase curve shows the phase margin calculated by the program and
shown in the MATLAB Command Window as Pm.
7. Right-click in the Bode plot area, select Edit Compensator . . . and read the gain
under Compensator in the resulting window.
1 The name lag compensator comes from the fact that the typical phase angle response for the compensator, as
shown in Figure 11.4, is always negative, or lagging in phase angle.
TryIt 11.1
Use MATLAB, the Control
System Toolbox, and the
following statements to solve
Skill-Assessment Exercise 11.1.
pos=20
z=(-log(pos/100))/...
(sqrt(pi^2+...
log(pos/100)^2))
Pm=atan(2*z/...
(sqrt(-2*z^2+...
sqrt(1+4*z^4))))*...
(180/pi)
G=zpk([],...
[0,-50,-120],1)
sisotool
618
Chapter 11
Design via Frequency Response

a large Kv without creating instability. This stabilizing effect of the lag network comes about
because the gain at 180° of phase is reduced below 0 dB. Through judicious design, the
magnitude curve can be reshaped, as shown in Figure 11.4, to go through 0 dB at the desired
phase margin. Thus, both Kv and the desired transient response can be obtained. We now
enumerate a design procedure.
Design Procedure
1. Set the gain, K, to the value that satisﬁes the steady-state error speciﬁcation and plot the
Bode magnitude and phase diagrams for this value of gain.
2. Find the frequency where the phase margin is 5° to 12° greater than the phase margin that
yields the desired transient response (Ogata, 1990). This step compensates for the fact
that the phase of the lag compensator may still contribute anywhere from 5° to 12° of
phase at the phase-margin frequency.
3. Select a lag compensator whose magnitude response yields a composite Bode magnitude
diagram that goes through 0 dB at the frequency found in Step 2 as follows: Draw the
compensator’s high-frequency asymptote to yield 0 dB for the compensated system at the
frequency found in Step 2. Thus, if the gain at the frequency found in Step 2 is 20 log KPM,
then the compensator’s high-frequency asymptote will be set at 20 log KPM. Select the
upper break frequency to be 1 decade below the frequency found in Step 2;2 select the
low-frequency asymptote to be at 0 dB. Connect the compensator’s high- and low-frequency
asymptotes with a 20 dB/decade line to locate the lower break frequency.
4. Reset the system gain, K, to compensate for any attenuation in the lag network in order to
keep the static error constant the same as that found in Step 1.
From these steps, you see that we are relying upon the initial gain setting to meet
the steady-state requirements. Then, we rely upon the lag compensator’s 20 dB/decade
slope to meet the transient response requirement by setting the 0 dB crossing of the
magnitude plot.
log ω
Desired phase
Phase (degrees)
–180
log ω
Kv
M (dB)
Compensated system
Uncompensated system
Lag compensator
Uncompensated system
Compensated system
Phase-margin frequency
Lag compensator
FIGURE 11.4
Visualizing lag compensation
2 This value of break frequency ensures that there will be only 5° to 12° phase contribution from the compensator
at the frequency found in Step 2.
11.3 Lag Compensation
619

The transfer function of the lag compensator is
Gcs 
s  1
T
s  1
αT
(11.2)
where α > 1.
Figure 11.5 shows the frequency response curves for the lag compensator. The range
of high frequencies shown in the phase plot is where we will design our phase margin. This
region is after the second break frequency of the lag compensator, where we can rely on the
attenuation characteristics of the lag network to reduce the total open-loop gain to unity at
the phase-margin frequency. Further, in this region the phase response of the compensator
will have minimal effect on our design of the phase margin. Since there is still some effect,
approximately 5° to 12°, we will add this amount to our phase margin to compensate for the
phase response of the lag compensator (see Step 2).
20
– 20
– 10
– 30
– 40
– 50
– 60
18
16
14
12
10
8
6
4
2
0
0
0.001
20 log M
Phase (degrees)
0.01
0.1
Frequency (rad/s)
Frequency (rad/s)
1
10
100
0.001
0.01
0.1
1
10
100
Range of frequencies for the design
of the phase margin
FIGURE 11.5
Frequency
response plots of a lag
compensator,
Gcs  s  0:1=s  0:01
Example 11.2
Lag Compensation Design
Lag Compensation Design
PROBLEM: Given the system of Figure 11.2, use Bode diagrams to design a lag
compensator to yield a tenfold improvement in steady-state error over the
gain-compensated system while keeping the percent overshoot at 9.5%.
SOLUTION: We will follow the previously described lag compensation design procedure.
1. From Example 11.1 a gain, K, of 583.9 yields a 9.5% overshoot. Thus, for this system,
Kv  16:22. For a tenfold improvement in steady-state error, Kv must increase by a
factor of 10, or Kv  162:2. Therefore, the value of K in Figure 11.2 equals 5839, and
620
Chapter 11
Design via Frequency Response

the open-loop transfer function is
Gs 
583;900
ss  36s  100
(11.3)
The Bode plots for K  5839 are shown in Figure 11.6.
2. The phase margin required for a 9.5% overshoot ζ  0:6 is found from Eq. (10.73)
to be 59.2°. We increase this value of phase margin by 10° to 69.2° in order to
compensate for the phase angle contribution of the lag compensator. Now ﬁnd the
frequency where the phase margin is 69.2°. This frequency occurs at a phase angle of
180°  69:2°  110:8° and is 9.8 rad/s. At this frequency, the magnitude plot
must go through 0 dB. The magnitude at 9.8 rad/s is now +24 dB (exact, that is,
nonasymptotic). Thus, the lag compensator must provide 24 dB attenuation at
9.8 rad/s.
3.&4. We now design the compensator. First draw the high-frequency asymptote at
24 dB. Arbitrarily select the higher break frequency to be about one decade below
the phase-margin frequency, or 0.98 rad/s. Starting at the intersection of this frequency
with the lag compensator’s high-frequency asymptote, draw a 20 dB/decade line until
0 dB is reached. The compensator must have a dc gain of unity to retain the value of Kv
that we have already designed by setting K  5839. The lower break frequency is found
to be 0.062 rad/s. Hence, the lag compensator’s transfer function is
Gcs  0:063s  0:98
s  0:062
(11.4)
where the gain of the compensator is 0.063 to yield a dc gain of unity.
0.01
0.1
1
10
100
Frequency (rad/s)
0
–50
–100
–150
–200
–250
Phase (degrees)
Lag compensator
Uncompensated system
Lag-compensated
system
84
72
60
48
36
24
12
0
–12
–24
–36
–48
–60
0.01
0.1
1
10
100
Frequency (rad/s)
20 log M
Lag compensator
Uncompensated system
Compensated system
FIGURE 11.6
Bode plots for Example 11.2
11.3 Lag Compensation
621

The compensated system’s forward transfer function is thus
GsGcs 
36;786s  0:98
ss  36s  100s  0:062
(11.5)
The characteristics of the compensated system, found from a simulation and exact
frequency response plots, are summarized in Table 11.2.
Students who are using MATLAB should now run ch11p2 in Appendix B.
You will learn how to use MATLAB to design a lag compensator. You
will enter the value of gain to meet the steady-state error
requirement as well as the desired percent overshoot. MATLAB
then designs a lag compensator using Bode plots, evaluates Kv,
and generates a closed-loop step response. This exercise solves
Example 11.2 using MATLAB.
TABLE 11.2
Characteristics of the lag-compensated system of Example 11.2
Parameter
Proposed speciﬁcation
Actual value
Kv
162.2
161.5
Phase margin
59.2°
62°
Phase-margin frequency
—
11 rad/s
Percent overshoot
9.5
10
Peak time
—
0.25 second
Skill-Assessment Exercise 11.2
PROBLEM: Design a lag compensator for the system in Skill-Assessment Exercise 11.1
that will improve the steady-state error tenfold, while still operating with 20% overshoot.
ANSWER:
Glags  0:0691s  2:04
s  0:141
;
Gs 
1; 942; 000
ss  50s  120
The complete solution is at www.wiley.com/college/nise.
TryIt 11.2
Use MATLAB, the Control System Toolbox, and the following statements to solve Skill-Assessment
Exercise 11.2.
pos=20
Ts=0.2
z=(log(pos/100))/(sqrt(pi^2+log(pos/100)^2))
Pm=atan(2*z/(sqrt(2*z^2+sqrt(1+4*z^4))))*(180/pi)
Wbw=(4/(Ts*z))*sqrt((12*z^2)+sqrt(4*z^4-4*z^2+2))
K=1942000
G=zpk([], [0,50,120], K)
sisotool(G,1)
(TryIt continues)
622
Chapter 11
Design via Frequency Response

In this section, we showed how to design a lag compensator to improve the steady-state error
while keeping the transient response relatively unaffected. We next discuss how to improve
the transient response using frequency response methods.
11.4 Lead Compensation
For second-order systems, we derived the relationship between phase margin and percent
overshoot as well as the relationship between closed-loop bandwidth and other time-domain
speciﬁcations, such as settling time, peak time, and rise time. When we designed the lag
network to improve the steady-state error, we wanted a minimal effect on the phase diagram
in order to yield an imperceptible change in the transient response. However, in designing
lead compensators via Bode plots, we want to change the phase diagram. We want to
increase the phase margin to reduce the percent overshoot, and increase the gain crossover
to realize a faster transient response.
Visualizing Lead Compensation
The lead compensator increases the bandwidth by increasing the gain crossover frequency.
At the same time, the phase diagram is raised at higher frequencies. The result is a larger
phase margin and a higher phase-margin frequency. In the time domain, lower percent
overshoots (larger phase margins) with smaller peak times (higher phase-margin frequencies)
is the result. The concepts are shown in Figure 11.7.
The uncompensated system has a small phase margin (B) and a low phase-margin
frequency (A). Using a phase lead compensator, the phase angle plot (compensated system)
is raised for higher frequencies.3 At the same time, the gain crossover frequency in the
magnitude plot is increased from A rad/s to C rad/s. These effects yield a larger phase margin
(D), a higher phase-margin frequency (C), and a larger bandwidth.
One advantage of the frequency response technique over the root locus is that we can
implement a steady-state error requirement and then design a transient response. This
speciﬁcation of transient response with the constraint of a steady-state error is easier to
implement with the frequency response technique than with the root locus. Notice that the
initial slope, which determines the steady-state error, is not affected by the design for the
transient response.
3 The name lead compensator comes from the fact that the typical phase angle response shown in Figure 11.7 is
always positive, or leading in phase angle.
(TryIt continued)
When the SISO Design for SISO Design Task Window appears:
1. Right-click on the Bode plot area and select Grid.
2. Note the phase margin shown in the MATLAB Command Window.
3. Using the Bode phase plot, estimate the frequency at which the phase margin from Step 2 occurs.
4. On the SISO Design for SISO Design Task Window toolbar, click on the red zero.
5. Place the zero of the compensator by clicking on the gain plot at a frequency that is 1/10 that found in
Step 3.
6. On the SISO Design for SISO Design Task Window toolbar, click on the red pole.
7. Place the pole of the compensator by clicking on the gain plot to the left of the compensator zero.
8. Grab the pole with the mouse and move it until the phase plot shows a P.M. equal to that found in
Step 2.
9. Right-click in the Bode plot area and select Edit Compensator . . .
10. Read the lag compensator in the Control and Estimation Tools Manager Window.
11.4 Lead Compensation
623

Lead Compensator Frequency Response
Let us ﬁrst look at the frequency response characteristics of a lead network and derive some
valuable relationships that will help us in the design process. Figure 11.8 shows plots of the
lead network
Gcs  1
β
s  1
T
s  1
βT
(11.6)
for various values of β, where β < 1. Notice that the peaks of the phase curve vary
in maximum angle and in the frequency at which the maximum occurs. The dc gain of
the compensator is set to unity with the coefﬁcient 1=β, in order not to change the dc
gain designed for the static error constant when the compensator is inserted into the
system.
In order to design a lead compensator and change both the phase margin and
phase-margin frequency, it is helpful to have an analytical expression for the maximum
value of phase and the frequency at which the maximum value of phase occurs, as
shown in Figure 11.8.
From Eq. (11.6) the phase angle of the lead compensator, ϕc, is
ϕc  tan1ωT  tan1ωβT
(11.7)
Differentiating with respect to ω, we obtain
dϕc
dω 
T
1  ωT2 
βT
1  ωβT2
(11.8)
M (dB)
log ω
Phase (degrees)
Uncompensated
system
A
Compensated
system
Compensator
C
Compensator
Compensated
system
B
D
–180
–270
Uncompensated
system
log ω
0
0
FIGURE 11.7
Visualizing lead compensation
624
Chapter 11
Design via Frequency Response

Setting Eq. (11.8) equal to zero, we ﬁnd that the frequency, ωmax, at which the maximum
phase angle, ϕmax, occurs is
ωmax 
1
T
ﬃﬃﬃ
β
p
(11.9)
Substituting Eq. (11.9) into Eq. (11.6) with s  jωmax,
Gc jωmax  1
β
jωmax  1
T
jωmax  1
βT

j 1ﬃﬃﬃ
β
p  1
j
ﬃﬃﬃ
β
p
 1
(11.10)
Making use of tanϕ1  ϕ2  tan ϕ1  tan ϕ2=1  tan ϕ1tan ϕ2, the maximum phase
shift of the compensator, ϕmax, is
ϕmax  tan1 1  β
2
ﬃﬃﬃ
β
p
 sin1 1  β
1  β
(11.11)
and the compensator’s magnitude at ωmax is
jGc jωmaxj  1ﬃﬃﬃ
β
p
(11.12)
We are now ready to enumerate a design procedure.
20 log M
Phase (degrees)
0.1
0.1
1
10
β = 0.2
ωT
ωT
20
20
10
30
40
50
60
0
18
16
14
12
10
8
6
4
2
0
100
1
10
100
β = 0.2
β = 0.1
β = 0.3
β = 0.4
β = 0.5
β = 0.1
β = 0.3
β = 0.4
β = 0.5
FIGURE 11.8
Frequency response of a lead compensator, Gcs  1=βs  1=T=s  1=βT
11.4 Lead Compensation
625

Design Procedure
1. Find the closed-loop bandwidth required to meet the settling time, peak time, or rise
time requirement (see Eqs. (10.54) through (10.56)).
2. Since the lead compensator has negligible effect at low frequencies, set the gain, K, of
the uncompensated system to the value that satisﬁes the steady-state error requirement.
3. Plot the Bode magnitude and phase diagrams for this value of gain and determine the
uncompensated system’s phase margin.
4. Find the phase margin to meet the damping ratio or percent overshoot requirement.
Then evaluate the additional phase contribution required from the compensator.4
5. Determine the value of β (see Eqs. (11.6) and (11.11)) from the lead compensator’s
required phase contribution.
6. Determine the compensator’s magnitude at the peak of the phase curve (Eq. (11.12)).
7. Determine the new phase-margin frequency by ﬁnding where the uncompensated
system’s magnitude curve is the negative of the lead compensator’s magnitude at the
peak of the compensator’s phase curve.
8. Design the lead compensator’s break frequencies, using Eqs. (11.6) and (11.9) to ﬁnd
T and the break frequencies.
9. Reset the system gain to compensate for the lead compensator’s gain.
10. Check the bandwidth to be sure the speed requirement in Step 1 has been met.
11. Simulate to be sure all requirements are met.
12. Redesign, if necessary, to meet requirements.
From these steps, we see that we are increasing both the amount of phase margin
(improving percent overshoot) and the gain crossover frequency (increasing the speed).
Now that we have enumerated a procedure with which we can design a lead compensator to
improve the transient response, let us demonstrate.
Example 11.3
Lead Compensation Design
Lead Compensation Design
PROBLEM: Given the system of Figure 11.2, design a lead compensator to yield a 20%
overshoot and Kv  40, with a peak time of 0.1 second.
SOLUTION: The uncompensated system is Gs  100K=ss  36s  100. We will
follow the outlined procedure.
1. We ﬁrst look at the closed-loop bandwidth needed to meet the speed requirement
imposed by Tp  0:1 second. From Eq. (10.56), with Tp  0:1 second and ζ  0:456
(i.e., 20% overshoot), a closed-loop bandwidth of 46.6 rad/s is required.
2. In order to meet the speciﬁcation of Kv  40, K must be set at 1440, yielding
Gs  144;000=ss  36s  100.
4 We know that the phase-margin frequency will be increased after the insertion of the compensator. At this new
phase-margin frequency, the system’s phase will be smaller than originally estimated, as seen by comparing points
B and D in Figure 11.7. Hence, an additional phase should be added to that provided by the lead compensator to
correct for the phase reduction caused by the original system.
626
Chapter 11
Design via Frequency Response

3. The uncompensated system’s frequency response plots for K  1440 are shown in
Figure 11.9.
4. A 20% overshoot implies a phase margin of 48.1°. The uncompensated system with
K  1440 has a phase margin of 34° at a phase-margin frequency of 29.6. To
increase the phase margin, we insert a lead network that adds enough phase to yield
a 48.1° phase margin. Since we know that the lead network will also increase the
phase-margin frequency, we add a correction factor to compensate for the lower
uncompensated system’s phase angle at this higher phase-margin frequency. Since
we do not know the higher phase-margin frequency, we assume a correction factor
of 10°. Thus, the total phase contribution required from the compensator is
48:1°  34°  10°  24:1°. In summary, our compensated system should have a
phase margin of 48.1° with a bandwidth of 46.6 rad/s. If the system’s characteristics
are not acceptable after the design, then a redesign with a different correction factor
may be necessary.
5. Using Eq. (11.11), β  0:42 for ϕmax  24:1°.
6. From Eq. (11.12), the lead compensator’s magnitude is 3.76 dB at ωmax.
7. If we select ωmax to be the new phase-margin frequency, the uncompensated system’s
magnitude at this frequency must be 3.76 dB to yield a 0 dB crossover at ωmax for the
compensated system. The uncompensated system passes through 3.76 dB at
ωmax  39 rad/s. This frequency is thus the new phase-margin frequency.
8. We now ﬁnd the lead compensator’s break frequencies. From Eq. (11.9), 1=T  25:3
and 1=βT  60:2.
1000
20 log M
Phase (degrees)
100
100
0
Frequency (rad/sec)
1
1
10
10
36
24
12
–12
–24
–36
0
– 45
 45
–90
–135
–180
–225
–270
1000
Frequency (rad/sec)
Lead compensator
Compensated system
Uncompensated
system
Lead compensator
Compensated
system
Uncompensated
system
FIGURE 11.9
Bode plots for lead compensation in Example 11.3
11.4 Lead Compensation
627

9. Hence, the compensator is given by
Gcs  1
β
s  1
T
s  1
βT
 2:38 s  25:3
s  60:2
(11.13)
where 2.38 is the gain required to keep the dc gain of the compensator at unity so that
Kv  40 after the compensator is inserted.
The ﬁnal, compensated open-loop transfer function is then
GcsGs 
342;600s  25:3
ss  36s  100s  60:2
(11.14)
10. From Figure 11.9, the lead-compensated open-loop magnitude response is 7 dB
at approximately 68.8 rad/s. Thus, we estimate the closed-loop bandwidth to be
68.8 rad/s. Since this bandwidth exceeds the requirement of 46.6 rad/s, we assume
the peak time speciﬁcation is met. This conclusion about the peak time is based
upon a second-order and asymptotic approximation that will be checked via
simulation.
11. Figure 11.9 summarizes the design and shows the effect of the compensation. Final
results, obtained from a simulation and the actual (nonasymptotic) frequency
response, are shown in Table 11.3. Notice the increase in phase margin, phase-
margin frequency, and closed-loop bandwidth after the lead compensator was added
to the gain-adjusted system. The peak time and the steady-state error requirements
have been met, although the phase margin is less than that proposed and the
percent overshoot is 2.6% larger than proposed. Finally, if the performance is not
acceptable, a redesign is necessary.
Students who are using MATLAB should now run ch11p3 in Appendix B.
You will learn how to use MATLAB to design a lead compensator. You
will enter the desired percent overshoot, peak time, and Kv. MATLAB
then designs a lead compensator using Bode plots, evaluates Kv,
and generates a closed-loop step response. This exercise solves
Example 11.3 using MATLAB.
TABLE 11.3
Characteristic of the lead-compensated system of Example 11.3
Parameter
Proposed
speciﬁcation
Actual gain-
compensated
value
Actual lead-
compensated
value
Kv
40
40
40
Phase margin
48.1°
34°
45.5°
Phase-margin frequency
—
29.6 rad/s
39 rad/s
Closed-loop bandwidth
46.6 rad/s
50 rad/s
68.8 rad/s
Percent overshoot
20
37
22.6
Peak time
0.1 second
0.1 second
0.075 second
628
Chapter 11
Design via Frequency Response

Keep in mind that the previous examples were designs for third-order systems
and must be simulated to ensure the desired transient results. In the next section, we
look at lag-lead compensation to improve steady-state error and transient response.
11.5 Lag-Lead Compensation
In Section 9.4, using root locus, we designed lag-lead compensation to improve the transient
response and steady-state error. Figure 11.10 is an example of a system to which lag-lead
compensation can be applied. In this section we repeat the design, using frequency response
techniques. One method is to design the lag compensation to lower the high-frequency gain,
Skill-Assessment Exercise 11.3
PROBLEM: Design a lead compensator for the system in Skill-Assessment Exercise 11.1
to meet the following speciﬁcations: %OS  20%; Ts  0:2 s and Kv  50.
ANSWER:
Gleads  2:27s  33:2
s  75:4
;
Gs 
300; 000
ss  50s  120
The complete solution is at www.wiley.com/college/nise.
TryIt 11.3
Use MATLAB, the Control System Toolbox, and the following statements to solve Skill-Assessment
Exercise 11.3.
pos=20
Ts=0.2
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2))
Pm=atan(2*z/(sqrt(-2*z^2+sqrt(1+4*z^4))))*(180/pi)
Wbw=(4/(Ts*z))*sqrt((1-2*z^2)+sqrt(4*z^4-4*z^2+2))
K=50*50*120
G=zpk([], [0,-50,-120],K)
sisotool(G,1)
When the SISO Design for SISO Design Task Window appears:
1. Right-click on the Bode plot area and select Grid.
2. Note the phase margin and bandwidth shown in the MATLAB Command Window.
3. On the SISO Design for SISO Design Task Window toolbar, click on the red pole.
4. Place the pole of the compensator by clicking on the gain plot at a frequency that is to the right of the
desired bandwidth found in Step 2.
5. On the SISO Design for SISO Design Task Window toolbar, click on the red zero.
6. Place the zero of the compensator by clicking on the gain plot to the left of the desired bandwidth.
7. Reshape the Bode plots: alternately grab the pole and the zero with the mouse and alternately move
them along the phase plot until the phase plot shows a P.M. equal to that found in Step 2 and a phase-
margin frequency close to the bandwidth found in Step 2.
8. Right-click in the Bode plot area and select Edit Compensator . . .
9. Read the lead compensator in the Control and Estimation Tools Manager Window.
11.5 Lag-Lead Compensation
629

stabilize the system, and improve the steady-state error and then design a lead compensator
to meet the phase-margin requirements. Let us look at another method.
Section 9.6 describes a passive lag-lead network that can be used in place of separate
lag and lead networks. It may be more economical to use a single, passive network that
performs both tasks, since the buffer ampliﬁer that separates the lag network from the lead
network may be eliminated. In this section, we emphasize lag-lead design, using a single,
passive lag-lead network.
The transfer function of a single, passive lag-lead network is
Gcs  GLeadsGLags 
s  1
T1
s  γ
T1
0
B
B
@
1
C
C
A
s  1
T2
s  1
γT2
0
B
B
@
1
C
C
A
(11.15)
where γ > 1. The ﬁrst term in parentheses produces the lead compensation, and the second
term in parentheses produces the lag compensation. The constraint that we must follow here
is that the single value γ replaces the quantity α for the lag network in Eq. (11.2) and the
quantity β for the lead network in Eq. (11.6). For our design, α and β must be reciprocals
of each other. An example of the frequency response of the passive lag-lead is shown in
Figure 11.11.
We are now ready to enumerate a design procedure.
Design Procedure
1. Using a second-order approximation, ﬁnd the closed-loop bandwidth required to meet
the settling time, peak time, or rise time requirement (see Eqs. (10.55) and (10.56)).
2. Set the gain, K, to the value required by the steady-state error speciﬁcation.
3. Plot the Bode magnitude and phase diagrams for this value of gain.
(a)
Katharina Bosse/laif/Redux Pictures.
(b)
Katharina Bosse/laif/Redux Pictures.
FIGURE 11.10
a. The National Advanced Driving Simulator at the University of Iowa; b. test driving the simulator with its realistic
graphics
630
Chapter 11
Design via Frequency Response

4. Using a second-order approximation, calculate the phase margin to meet the damping
ratio or percent overshoot requirement, using Eq. (10.73).
5. Select a new phase-margin frequency near ωBW.
6. At the new phase-margin frequency, determine the additional amount of phase lead
required to meet the phase-margin requirement. Add a small contribution that will be
required after the addition of the lag compensator.
7. Design the lag compensator by selecting the higher break frequency one decade below
the new phase-margin frequency. The design of the lag compensator is not critical, and
any design for the proper phase margin will be relegated to the lead compensator. The
lag compensator simply provides stabilization of the system with the gain required for
the steady-state error speciﬁcation. Find the value of γ from the lead compensator’s
requirements. Using the phase required from the lead compensator, the phase response
curve of Figure 11.8 can be used to ﬁnd the value of γ  1=β. This value, along with the
previously found lag’s upper break frequency, allows us to ﬁnd the lag’s lower break
frequency.
8. Design the lead compensator. Using the value of γ from the lag compensator
design and the value assumed for the new phase-margin frequency, ﬁnd the lower
and upper break frequencies for the lead compensator, using Eq. (11.9) and solving
for T.
9. Check the bandwidth to be sure the speed requirement in Step 1 has been met.
10. Redesign if phase-margin or transient speciﬁcations are not met, as shown by analysis
or simulation.
20 log M
Phase (degrees)
Frequency (rad/s)
100
10
1
0.1
0.01
0.001
100
10
1
0.1
0.01
0.001
– 35
– 30
– 25
– 20
– 15
– 10
– 5
0
– 80
– 60
– 40
– 20
0
20
40
60
80
Frequency (rad/s)
20
30
50
40
Asymptotes for
20
30
40
50
50
40
30
20
10
FIGURE 11.11
Sample frequency response curves for a lag-lead compensator,
Gcs  s  1s  0:1= s  γ s  0:1
γ




11.5 Lag-Lead Compensation
631

Let us demonstrate the procedure with an example.
Example 11.4
Lag-Lead Compensation Design
Lag-Lead Compensation Design
PROBLEM: Given a unity feedback system where Gs  K=ss  1s  4, design a
passive lag-lead compensator using Bode diagrams to yield a 13.25% overshoot, a peak
time of 2 seconds, and Kv  12.
SOLUTION: We will follow the steps previously mentioned in this section for lag-lead
design.
1. The bandwidth required for a 2-seconds peak time is 2.29 rad/s.
2. In order to meet the steady-state error requirement, Kv  12, the value of K is 48.
3. The Bode plots for the uncompensated system with K  48 are shown in Figure 11.12.
We can see that the system is unstable.
4. The required phase margin to yield a 13.25% overshoot is 55°.
5. Let us select ω  1:8 rad/s as the new phase-margin frequency.
6. At this frequency, the uncompensated phase is 176° and would require, if we add a
5° contribution from the lag compensator, a 56° contribution from the lead portion of
the compensator.
7. The design of the lag compensator is next. The lag compensator allows us to keep the
gain of 48 required for Kv  12 and not have to lower the gain to stabilize the system.
As long as the lag compensator stabilizes the system, the design parameters are not
critical, since the phase margin will be designed with the lead compensator. Thus,
choose the lag compensator so that its phase response will have minimal effect at the
new phase-margin frequency. Let us choose the lag compensator’s higher break
frequency to be 1 decade below the new phase-margin frequency, at 0.18 rad/s. Since
we need to add 56° of phase shift with the lead compensator at ω  1:8 rad/s, we estimate
from Figure 11.8 that, if γ  10:6 (since γ  1=β; β  0:094), we can obtain about 56° of
phase shift from the lead compensator. Thus with γ  10:6 and a new phase-margin
frequency of ω  1:8 rad/s, the transfer function of the lag compensator is
Glags  1
γ
s  1
T2


s  1
γT2

 
1
10:6
s  0:183
s  0:0172
(11.16)
where the gain term, 1=γ, keeps the dc gain of the lag compensator at 0 dB. The
lag-compensated system’s open-loop transfer function is
Glag-comps 
4:53s  0:183
ss  1s  4s  0:0172
(11.17)
8. Now we design the lead compensator. At ω  1:8, the lag-compensated system has a
phase angle of 180°. Using the values of ωmax  1:8 and β  0:094, Eq. (11.9) yields
the lower break, 1=T1  0:56 rad/s. The higher break is then 1=βT1  5:96 rad/s.
The lead compensator is
Gleads  γ
s  1
T1


s  γ
T1

  10:6 s  0:56
s  5:96
(11.18)
632
Chapter 11
Design via Frequency Response

The lag-lead-compensated system’s open-loop transfer function is
Glag-lead-comps 
48s  0:183s  0:56
ss  1s  4s  0:0172s  5:96
(11.19)
9. Now check the bandwidth. The closed-loop bandwidth is equal to that frequency where
the open-loop magnitude response is approximately 7 dB. From Figure 11.12, the
magnitude is 7 dB at approximately 3 rad/s. This bandwidth exceeds that required
to meet the peak time requirement.
The design is now checked with a simulation to obtain actual performance
values. Table 11.4 summarizes the system’s characteristics. The peak time requirement
is also met. Again, if the requirements were not met, a redesign would be necessary.
Students who are using MATLAB should now run ch11p4 in Appendix B.
You will learn how to use MATLAB to design a lag-lead compensator.
You will enter the desired percent overshoot, peak time, and Kv.
MATLAB then designs a lag-lead compensator using Bode plots,
evaluates Kv, and generates a closed-loop step response. This
exercise solves Example 11.4 using MATLAB.
.01
0.1
1
10
100
84
72
60
48
36
24
12
0
–12
–24
–36
–48
–60
Frequency (rad/s)
20 log M
0.01
0.1
1
10
100
–250
100
Frequency (rad/s)
Phase (degrees)
–300
–200
–150
–100
–50
0
50
Lag-lead-compensated
system
Lag-compensated
system
Lag-lead compensator
Uncompensated system
Uncompensated
system
Lag-lead
compensator
Lag-lead-compensated
system
Lag-compensated
system
FIGURE 11.12
Bode plots for lag-lead compensation in Example 11.4
TABLE 11.4
Characteristics of gain-compensated system of Example 11.4
Parameter
Proposed speciﬁcation
Actual value
Kv
12
12
Phase margin
55°
59.3°
Phase-margin frequency
—
1.63 rad/s
Closed-loop bandwidth
2.29 rad/s
3 rad/s
Percent overshoot
13.25
10.2
Peak time
2.0 seconds
1.61 seconds
11.5 Lag-Lead Compensation
633

For a ﬁnal example, we include the design of a lag-lead compensator using a Nichols
chart. Recall from Chapter 10 that the Nichols chart contains a presentation of both the
open-loop frequency response and the closed-loop frequency response. The axes of the
Nichols chart are the open-loop magnitude and phase (y and x axis, respectively). The open-
loop frequency response is plotted using the coordinates of the Nichols chart at each
frequency. The open-loop plot is overlaying a grid that yields the closed-loop magnitude
and phase. Thus, we have a presentation of both the open- and closed-loop responses.
Thus, a design can be implemented that reshapes the Nichols plot to meet both open-and
closed-loop frequency speciﬁcations.
From a Nichols chart, we can see simultaneously the following frequency response
speciﬁcations that are used to design a desired time response: (1) phase margin, (2) gain
margin, (3) closed-loop bandwidth, and (4) closed-loop peak amplitude.
In the following example, we ﬁrst specify the following: (1) maximum allowable
percent overshoot, (2) maximum allowable peak time, and (3) minimum allowable static
error constant. We ﬁrst design the lead compensator to meet the transient requirements
followed by the lag compensator design to meet the steady-state error requirement.
Although calculations could be made by hand, we will use MATLAB and SISOTOOL
to make and shape the Nichols plot.
Let us ﬁrst outline the steps that we will take in the example:
1. Calculate the damping ratio from the percent overshoot requirement using
Eq. (4.39)
2. Calculate the peak amplitude, Mp, of the closed-loop response using Eq. (10.52) and
the damping ratio found in (1).
3. Calculate the minimum closed-loop bandwidth to meet the peak time requirement using
Eq. (10.56), with peak time and the damping ratio from (1).
4. Plot the open-loop response on the Nichols chart.
5. Raise the open-loop gain until the open-loop plot is tangent to the required closed-loop
magnitude curve, yielding the proper Mp.
6. Place the lead zero at this point of tangency and the lead pole at a higher frequency.
Zeros and poles are added in SISOTOOL by clicking either one on the tool bar and then
clicking the position on the open-loop frequency response curve where you desire to
add the zero or pole.
7. Adjust the positions of the lead zero and pole until the open-loop frequency response
plot is tangent to the same Mp curve, but at the approximate frequency found in (3). This
yields the proper closed-loop peak and proper bandwidth to yield the desired percent
overshoot and peak time, respectively.
8. Evaluate the open-loop transfer function, which is the product of the plant and the lead
compensator, and determine the static error constant.
9. If the static error constant is lower than required, a lag compensator must now be
designed. Determine how much improvement in the static error constant is
required.
10. Recalling that the lag pole is at a frequency below that of the lag zero, place a
lag pole and zero at frequencies below the lead compensator and adjust to yield
the desired improvement in static error constant. As an example, recall from
Eq. (9.5) that the improvement in static error constant for a Type 1 system is
equal to the ratio of the lag zero value divided by the lag pole value. Readjust the
gain if necessary.
634
Chapter 11
Design via Frequency Response

Example 11.5
Lag-Lead Design Using the Nichols Chart, MATLAB,
and SISOTOOL
Lag-Lead Design Using the Nichols Chart, MATLAB,
and SISOTOOL
PROBLEM: Design a lag-lead compensator for the plant, Gs 
K
ss  5s  10, to
meet the following requirements: (1) a maximum of 20% overshoot, (2) a peak time of
no more than 0.5 seconds, (3) a static error constant of no less than 6.
SOLUTION: We follow the steps enumerated immediately above,
1. Using Eq. (4.39), ζ  0:456 for 20% overshoot.
2. Using Eq. (10.52), Mp  1:23  1:81 dB for ζ  0:456.
3. Using Eq. (10.56), ωBW  9:3 r/s for ζ  0:456 and Tp  0:5.
4. Plot the open-loop frequency response curve on the Nichols chart for K = 1.
5. Raise the open-loop frequency response curve until it is tangent to the closed-loop
peak of 1.81 dB curve as shown in Figure 11.13. The frequency at the tangent point is
approximately 3 r/s, which can be found by letting your mouse rest on the point of
tangency. On the menu bar, select Designs/Edit Compensator . . . and ﬁnd the gain
added to the plant. Thus, the plant is now Gs 
150
ss  5s  10. The gain-adjusted
closed-loop step response is shown in Figure 11.14. Notice that the peak time is about
1 second and must be decreased.
6. Place the lead zero at this point of tangency and the lead pole at a higher frequency.
7. Adjust the positions of the lead zero and pole until the open-loop frequency response
plot is tangent to the same Mp curve, but at the approximate frequency found in 3.
FIGURE 11.13
Nichols chart
after gain adjustment
11.5 Lag-Lead Compensation
635

FIGURE 11.14
Gain-
adjusted closed-loop step
response
FIGURE 11.15
Nichols chart
after lag-lead compensation
636
Chapter 11
Design via Frequency Response

8. Checking Designs/Edit Compensator . . . shows
GsGleads 
1286s  1:4
ss  5s  10s  12, which yields a Kv  3.
9. We now add lag compensation to improve the static error constant by at least 2.
10. Now add a lag pole at 0.004 and a lag zero at 0.008. Readjust the gain to yield the
same tangency as after the insertion of the lead. The ﬁnal forward path is found to be
GsGleadsGlags 
1381s  1:4s  0:008
ss  5s  10s  12s  0:004. The ﬁnal Nichols chart is
shown in Figure 11.15, and the compensated time response is shown in Figure 11.16.
Notice that the time response has the expected slow climb to the ﬁnal value that is
typical of lag compensation. If your design requirements require a faster climb to the
ﬁnal response, then redesign the system with a larger bandwidth or attempt a design
only with lead compensation. A problem at the end of the chapter provides the
opportunity for practice.
FIGURE 11.16
Lag-lead
compensated closed-loop step
response
Skill-Assessment Exercise 11.4
PROBLEM: Design a lag-lead compensator for a unity feedback system with the
forward-path transfer function
Gs 
K
ss  8s  30
to meet the following speciﬁcations: %OS  10%; Tp  0:6 s, and Kv  10. Use
frequency response techniques.
ANSWER: Glags  0:456 s  0:602
s  0:275 ; Gleads  2:19 s  4:07
s  8:93 ; K  2400:
The complete solution is at www.wiley.com/college/nise.
11.5 Lag-Lead Compensation
637

Case Studies
Our ongoing antenna azimuth position control system serves now as an example to
summarize the major objectives of the chapter. The following cases demonstrate the use of
frequency response methods to (1) design a value of gain to meet a percent overshoot
requirement for the closed-loop step response and (2) design cascade compensation to
meet both transient and steady-state error requirements.
Antenna Control: Gain Design
Antenna Control: Gain Design
PROBLEM: Given the antenna azimuth position control system shown on the front end-
papers, Conﬁguration 1, use frequency response techniques to do the following:
a. Find the preampliﬁer gain required for a closed-loop response of 20% overshoot for a
step input.
b. Estimate the settling time.
SOLUTION: The block diagram for the control system is shown on the inside front cover
(Conﬁguration 1). The loop gain, after block diagram reduction, is
Gs 
6:63K
ss  1:71s  100 
0:0388K
s
s
1:71  1


s
100  1


(11.20)
Letting K  1, the magnitude and phase frequency response plots are shown in
Figure 10.61.
a. To ﬁnd K to yield a 20% overshoot, we ﬁrst make a second-order approximation and
assume that the second-order transient response equations relating percent overshoot,
damping ratio, and phase margin are true for this system. Thus, a 20%overshootimplies a
damping ratio of 0.456. Using Eq. (10.73), this damping ratio implies a phase margin of
48.1°. The phase angle should therefore be 180°  48:1°  131:9°. The phase angle
is 131:9° at ω  1:49 rad/s, where the gain is 34.1 dB. Thus K  34:1 dB  50:7
for a 20% overshoot. Since the system is third-order, the second-order approximation
should be checked. A computer simulation shows a 20% overshoot for the step response.
b. Adjusting the magnitude plot of Figure 10.61 for K  50:7, we ﬁnd 7 dB at
ω  2:5 rad/s, which yields a closed-loop bandwidth of 2.5 rad/s. Using Eq. (10.55)
with ζ  0:456 and ωBW  2:5, we ﬁnd Ts  4:63 seconds. A computer simulation
shows a settling time of approximately 5 seconds.
CHALLENGE: We now give you a problem to test your knowledge of this chapter’s
objectives. You are given the antenna azimuth position control system shown on the
inside front cover (Conﬁguration 3). Using frequency response methods, do the following:
a. Find the value of K to yield 25% overshoot for a step input.
b. Repeat Part a using MATLAB.
Antenna Control: Cascade Compensation Design
Antenna Control: Cascade Compensation Design
PROBLEM: Given the antenna azimuth position control system block diagram shown
on the front endpapers, Conﬁguration 1, use frequency response techniques and design
cascade compensation for a closed-loop response of 20% overshoot for a step input, a
ﬁvefold improvement in steady-state error over the gain-compensated system operating
at 20% overshoot, and a settling time of 3.5 seconds.
638
Chapter 11
Design via Frequency Response

SOLUTION: Followingthelag-leaddesignprocedure,weﬁrstdeterminethevalueofgain,
K, required to meet the steady-state error requirement.
1. Using Eq. (10.55) with ζ  0:456, and Ts  3:5 seconds, the required bandwidth is
3.3 rad/s.
2. From the preceding case study, the gain-compensated system’s open-loop transfer
function was, for K  50:7,
GsHs 
6:63K
ss  1:71s  100 
336:14
ss  1:71s  100
(11.21)
This function yields Kv  1:97. If K  254, then Kv  9:85, a ﬁvefold improvement.
3. The frequency response curves of Figure 10.61, which are plotted for K  1, will be
used for the solution.
4. Using a second-order approximation, a 20% overshoot requires a phase margin
of 48.1°.
5. Select ω  3 rad/s to be the new phase-margin frequency.
6. The phase angle at the selected phase-margin frequency is 152°. This is a phase
margin of 28°. Allowing for a 5° contribution from the lag compensator, the lead
compensator must contribute 48:1°  28°  5°  25:1°.
7. The design of the lag compensator now follows. Choose the lag compensator upper
break one decade below the new phase-margin frequency, or 0.3 rad/s. Figure 11.8
says that we can obtain 25.1° phase shift from the lead if β  0:4 or γ  1=β  2:5.
Thus, the lower break for the lag is at 1=γT  0:3=2:5  0:12 rad/s.
Hence,
Glags  0:4 s  0:3
s  0:12
(11.22)
8. Finally, design the lead compensator. Using Eq. (11.9), we have
T 
1
ωmax
ﬃﬃﬃ
β
p 
1
3
ﬃﬃﬃﬃﬃﬃﬃ
0:4
p
 0:527
(11.23)
Therefore, the lead compensator lower break frequency is 1=T  1:9 rad/s, and the
upper break frequency is 1=βT  4:75 rad/s. Thus, the lag-lead-compensated
forward path is
Glag-lead-comps 
6:63254s  0:3s  1:9
ss  1:71s  100s  0:12s  4:75
(11.24)
9. A plot of the open-loop frequency response for the lag-lead-compensated system
shows 7 dB at 5.3 rad/s. Thus, the bandwidth meets the design requirements for
settling time. A simulation of the compensated system shows a 20% overshoot and
a settling time of approximately 3.2 seconds, compared to a 20% overshoot for the
uncompensated system and a settling time of approximately 5 seconds. Kv for the
compensated system is 9.85 compared to the uncompensated system value of 1.97.
CHALLENGE: We now give you a problem to test your knowledge of this chapter’s
objectives. You are given the antenna azimuth position control system shown on
Case Studies
639

Summary
This chapter covered the design of feedback control systems using frequency response
techniques. We learned how to design by gain adjustment as well as cascaded lag, lead, and
lag-lead compensation. Time response characteristics were related to the phase margin,
phase-margin frequency, and bandwidth.
Design by gain adjustment consisted of adjusting the gain to meet a phase-margin
speciﬁcation. We located the phase-margin frequency and adjusted the gain to 0 dB.
A lag compensator is basically a low-pass ﬁlter. The low-frequency gain can be raised
to improve the steady-state error, and the high-frequency gain is reduced to yield stability.
Lag compensation consists of setting the gain to meet the steady-state error requirement and
then reducing the high-frequency gain to create stability and meet the phase-margin
requirement for the transient response.
A lead compensator is basically a high-pass ﬁlter. The lead compensator increases the
high-frequency gain while keeping the low-frequency gain the same. Thus, the steady-state
error can be designed ﬁrst. At the same time, the lead compensator increases the phase angle
at high frequencies. The effect is to produce a faster, stable system, since the uncompensated
phase margin now occurs at a higher frequency.
A lag-lead compensator combines the advantages of both the lag and the lead
compensator. First, the lag compensator is designed to yield the proper steady-state error
with improved stability. Next, the lead compensator is designed to speed up the transient
response. If a single network is used as the lag-lead, additional design considerations are
applied so that the ratio of the lag zero to the lag pole is the same as the ratio of the lead pole
to the lead zero.
In the next chapter, we return to state space and develop methods to design desired
transient and steady-state error characteristics.
Review Questions
1. What major advantage does compensator design by frequency response have over root
locus design?
2. How is gain adjustment related to the transient response on the Bode diagrams?
3. Brieﬂy explain how a lag network allows the low-frequency gain to be increased to
improve steady-state error without having the system become unstable.
4. From the Bode plot perspective, brieﬂy explain how the lag network does not
appreciably affect the speed of the transient response.
5. Whyisthephasemarginincreasedabovethatdesiredwhendesigningalagcompensator?
6. Compare the following for uncompensated and lag-compensated systems designed
to yield the same transient response: low-frequency gain, phase-margin frequency,
gain curve value around the phase-margin frequency, and phase curve values around
the phase-margin frequency.
the front endpapers (Conﬁguration 3). Using frequency response methods, do the
following:
a. Design a lag-lead compensator to yield a 15% overshoot and Kv  20. In order to speed
up the system, the compensated system’s phase-margin frequency will be set to 4.6
times the phase-margin frequency of the uncompensated system.
b. Repeat Part a using MATLAB.
640
Chapter 11
Design via Frequency Response

7. From the Bode diagram viewpoint, brieﬂy explain how a lead network increases the
speed of the transient response.
8. Based upon your answer to Question 7, explain why lead networks do not cause
instability.
9. Why is a correction factor added to the phase margin required to meet the transient
response?
10. When designing a lag-lead network, what difference is there in the design of the lag
portion as compared to a separate lag compensator?
Problems
1. Design the value of gain, K, for a gain margin of 10 dB
in the unity feedback system of Figure P11.1 if
[Section: 11.2]
a. Gs 
K
s  4s  10s  15
b. Gs 
K
ss  4s  10
c. Gs 
Ks  2
ss  4s  6s  10
R(s)
C(s)
+
_
G(s)
FIGURE P11.1
2. For each of the systems in Problem 1, design the gain, K,
for a phase margin of 40°. [Section: 11.2]
3. Given the unity feedback system of Figure P11.1, use
frequency response methods to determine the value of
gain, K, to yield a step response with a 20% overshoot
if [Section: 11.2]
a. Gs 
K
ss  8s  15
b. Gs 
Ks  4
ss  8s  10s  15
c. Gs 
Ks  2s  7
ss  6s  8s  10s  15
4. Given the unity feedback system of Figure P11.1
with
Gs 
Ks  10s  15
ss  2s  5s  20
do the following: [Section: 11.2]
a. Use frequency response methods to determine the
value of gain, K, to yield a step response with a 20%
overshoot.
Make
any
required
second-order
approximations.
b. Use MATLAB or any other computer
program to test your second-
order approximation by simulating the
system for your designed value of K.
5. The unity feedback system of Figure P11.1 with
Gs 
K
ss  7
is operating with 15% overshoot. Using frequency
response techniques, designacompensator toyield Kv 
50 with the phase-margin frequency and phase margin
remaining
approximately
the
same
as
in
the
uncompensated system. [Section: 11.3]
6. Given the unity feedback system of Figure P11.1 with
Gs 
Ks  10s  11
ss  3s  6s  9
do the following: [Section: 11.3]
a. Use frequency response methods to design a lag
compensator to yield Kv  1000 and 15% overshoot
forthestepresponse.Makeanyrequiredsecond-order
approximations.
b. Use MATLAB or any other computer
program to test your second-
order approximation by simulating the
system for your designed value of K and
lag compensator.
7. The unity feedback system shown in Figure P11.1 with
Gs 
K
s  1s  5s  10
is operating with 15% overshoot. Using frequency
response methods, design a compensator to yield a
Problems
641

ﬁvefold improvement in steady-state error without
appreciably
changing
the
transient
response.
[Section: 11.3]
8. Design a lag compensator so that the system of Figure
P11.1 where
Gs 
Ks  4
s  2s  6s  8
operates with a 45° phase margin and a static error
constant of 100. [Section: 11.3]
9. Design a PI controller for the system of Figure 11.2 that
will yield zero steady-state error for a ramp input and a
9.48% overshoot for a step input. [Section: 11.3]
10. For the system of Problem 6, do the following:
[Section: 11.3]
a. Use frequency response methods to ﬁnd the gain, K,
required to yield about 15% overshoot. Make any
required second-order approximations.
b. Use frequency response methods to design a PI
compensator to yield zero steady-state error for
a ramp input without appreciably changing the
transient response characteristics designed in
Part a.
c. Use MATLAB or any other computer
program to test your second-
order approximation by simulating the
system for your designed value of K and
PI compensator.
11. Write a MATLAB program that will
design a PI controller assuming a
second-order approximation as follows:
a. Allow the user to input from the key-
board the desired percent overshoot
b. Design a PI controller and gain to yield
zero steady-state error for a closed-
loop step response as well as meet the
percent overshoot speciﬁcation
c. Display the compensated closed-loop
step response
Test your program on
Gs 
K
s  5s  10
and 25% overshoot.
12. Design a compensator for the unity feedback system of
Figure P11.1 with
Gs 
K
ss  2s  10s  25
toyieldaKv  4 andaphasemarginof45°.[Section:11.4]
13. Consider the unity feedback system of Figure P11.1 with
Gs 
K
ss  5s  20
The uncompensated system has about 55% overshoot
and a peak time of 0.5 second when Kv  10. Do the
following: [Section: 11.4]
a. Use frequency response methods to design a lead
compensator to reduce the percent overshoot to
10%, while keeping the peak time and steady-state
error about the same or less. Make any required
second-order approximations.
b. Use MATLAB or any other computer
program to test your second-
order approximation by simulating the
system for your designed value of K.
14. The unity feedback system of Figure P11.1 with
Gs 
Ks  4
s  2s  5s  12
is operating with 20% overshoot. [Section: 11.4]
a. Find the settling time.
b. Find Kp.
c. Find the phase margin and the phase-margin
frequency.
d. Using frequency response techniques, design a
compensator that will yield a threefold improvement
in Kp and a twofold reduction in settling time while
keeping the overshoot at 20%.
15. Repeat the design of Example 11.3 in the text using a
PD controller. [Section: 11.4]
16. RepeatProblem13usingaPDcompensator.[Section:11.4]
17. Write a MATLAB program that will
design a lead compensator
assuming
second-order
approximations
as follows:
a. Allow the user to input from the key-
board the desired percent overshoot,
peak time, and gain required to meet a
steady-state error speciﬁcation
b. Display
the
gain-compensated
Bode
plot
c. Calculate the required phase margin
and bandwidth
d. Display the pole, zero, and gain of the
lead compensator
e. Display the compensated Bode plot
f. Output the step response of the lead-
compensatedsystemtotestyoursecond-
order approximation
642
Chapter 11
Design via Frequency Response

Test your program on a unity feedback
system where
Gs 
Ks  1
ss  2s  6
and the following speciﬁcations are to
be met: percent overshoot = 10%, peak
time = 0.1 second, and Kv  30.
18. Repeat Problem 17 for a PD
controller.
19. Use frequency response methods to design a lag-lead
compensator for a unity feedback system where
Gs 
Ks  5
ss  2s  10
and the following speciﬁcations are to be met: percent
overshoot = 10%, settling time = 0.2 second, and
Kv  1000. [Section: 11.4]
20. Write a MATLAB program that will
design a lag-lead compensator
assuming
second-order
approximations
as follows: [Section: 11.5]
a. Allow the user to input from the key-
board the desired percent overshoot,
settling time, and gain required to
meetasteady-stateerrorspeciﬁcation
b. Displaythegain-compensatedBodeplot
c. Calculate the required phase margin
and bandwidth
d. Display the poles, zeros, and the gain
of the lag-lead compensator
e. Display the lag-lead-compensated Bode
plot
f. Display the step response of the lag-
lead compensated system to test your
second-order approximation
Use your program to do Problem 19.
21. Given a unity feedback system with
Gs 
K
ss  1:75s  6
designaPIDcontrollertoyieldzerosteady-stateerrorfor
a ramp input, as well as a 20% overshoot, and a peak time
less than 1.8 seconds for a step input. Use only frequency
response methods. [Section: 11.5]
22. A unity feedback system has
Gs 
K
ss  3s  6
If this system has anassociated0.5second
delay, use MATLAB to design the value of
K for 20% overshoot. Make any necessary
second-order approximations, but test
your
assumptions
by
simulating
your
design. The delay can be represented by
cascading the MATLAB function padé (T,n)
with G(s), where T is the delay in seconds
andnistheorderofthePadeapproximation
(use 5). Write the program to do the
following:
a. Accept your value of percent overshoot
from the keyboard
b. Display the Bode plot for K = 1
c. Calculate the required phase margin
and ﬁnd the phase-margin frequency
and the magnitude at the phase-margin
frequency
d. Calculate and display the value of K
DESIGN PROBLEMS
DESIGN PROBLEMS
23. The model for a speciﬁc linearized TCP/IP computer
network queue, working under a random early
detection (RED) algorithm, has been modeled using
the
block
diagram
of
Figure
P11.1,
where
Gs  MsPs, with
Ms  0:005L
s  0:005
and
Ps 
140;625e0:1s
s  2:67s  10
Also, L is a parameter to be varied (Hollot, 2001).
a. Adjust L to obtain a 15% overshoot in the transient
response for step inputs.
b. Verify Part a with a Simulink
unit step response simulation.
24. An electric ventricular assist device (EVAD) that helps
pump blood concurrently to a defective natural heart in
sick patients can be shown to have a transfer function
Gs  Paos
Ems 
1361
s2  69s  70:85
The input, Em(s), is the motor’s armature voltage, and the
output is Pao(s), the aortic blood pressure (Tasch, 1990).
The EVAD will be controlled in the closed-loop
conﬁguration shown in Figure P11.1.
a. Design a phase lag compensator to achieve a tenfold
improvement in the steady-state error to step inputs
withoutappreciablyaffectingthetransientresponseof
the uncompensated system.
(problem continues)
Problems
643

(Continued)
b. Use MATLAB to simulate the
uncompensated and compensated
systems for a unit step input.
25. A Tower Trainer 60 Unmanned Aerial Vehicle has a
transfer function
Ps  hs
δes

34:16s3  144:4s2  7047s  557:2
s5  13:18s4  95:93s3  14:61s2  31:94s
where δes is the elevator angle and h(s) is the change
in altitude (Barkana, 2005).
a. Assuming the airplane is controlled in the closed-
loop
conﬁguration
of
Figure
P11.1
with
Gs  KPs, ﬁnd the value of K that will result
in a 30° phase margin.
b. For the value of K calculated in Part a, obtain the
corresponding gain margin.
c. Obtain estimates for the system’s %OS and settling
times Ts for step inputs.
d. Simulate the step response of
the system using MATLAB.
e. Explain the simulation results and discuss any
inaccuracies in the estimates obtained in Part c.
26. The transfer function from applied force to arm
displacement for the arm of a hard disk drive has
been identiﬁed as
Gs  Xs
Fs  3:3333  104
s2
The position of the arm will be controlled using the
feedback loop shown in Figure P11.1 (Yan, 2003).
a. Design a lead compensator to achieve closed-loop
stability with a transient response of 16% over-
shoot and a settling time of 2 msec for a step input.
b. Verify your design through
MATLAB simulations.
27. For the heat exchange system described in Problem 39,
Chapter 9 (Smith, 2002):
a. Design a passive lag-lead compensator to achieve
5% steady-state error with a transient response of
10% overshoot and a settling time of 60 seconds for
step inputs.
b. Use MATLAB to simulate and
verify your design.
28. Active front steering is used in front-steering four-
wheel cars to control the yaw rate of the vehicle as a
function of changes in wheel-steering commands. For
a certain car, and under certain conditions, it has been
shown that the transfer function from steering wheel
angle to yaw rate is given by (Zhang, 2008):
Ps 
28:4s  119:7
s2  7:15s  14:7
The system iscontrolled in a unity-feedback conﬁguration.
a. Use the Nichols chart and follow the procedure of
Example 11.5 to design a lag-lead compensator such
that the system has zero steady-state error for a step
input. The bandwidth of the closed-loop system must
be ωB  10 rad/sec. Let the open-loop magnitude
response peak be less than 1 dB and the steady-state
error constant Kv  20.
b. Relax the bandwidth requirement to ωB  10 rad/sec.
Design the system for a steady-state error of zero for a
step input. Let the open-loop magnitude response
peak be less than 1 dB and Kv  20 using only a
lead compensator.
c. Simulate the step response
of both designs using MATLAB.
29. Figure P11.2 illustrates a set of booms used for the
delivery of chemicals in agriculture (Sun, 2011). Each
Controller
Infrared
distance
sensor
Infrared
distance
sensor
Hydraulic
cylinder
driving singal
Connected to
the vehicle
Four-rod suspension
FIGURE P11.25
5 Sun, J., and Miao, Y. Modeling and simulation of the agricultural sprayer boom leveling system. IEEE Third International Conf. on Measuring Tech. and
Mechatronics Automation, 2011, pp. 613–618. Figure 2, p. 613. 2011 Third International Conference on Measuring Technology and Mechatronics
Automation by IEEE. Reproduced with permission of IEEE in the format Republish in a book via Copyright Clearance Center.
644
Chapter 11
Design via Frequency Response

of the booms has equally spaced nozzles, the purpose of
which is to maintain a constant gap between the
nozzles and the soil despite car movements due to
road unevenness. The booms are tethered to a vehicle
(not shown in ﬁgure), and the gap is measured using an
infrared sensor. This measurement is fed to a controller
that drives two hydraulic cylinders to adjust the boom’s
positions. Under certain operating conditions, it was
found that the system can be described by the unity-
feedback conﬁguration of Figure P11.1 where
Gs  K
s
2:78  104
s2
602  s
60  1


509:3
s2
2132  3s
213  1


a. Design a lag compensator to achieve Kv  30, and
%OS = 10%.
b. Use a computer program to obtain the step response
of the closed-loop system and verify its performance.
30. The amount of leftover moisture in a grain drying
conveyor process can be controlled by varying the
conveyor’s motor speed (Mansor, 2011). Although
the process is highly variable, the transfer function at
one of the operating points has been found to be
Gs 
0:0169s  0:03558
3:368s3  3:762s2  32:19s  1 e27s
A unity feedback system will be built around this
plant such as the one shown in Figure P11.1 to maintain
grain moisture at speciﬁed levels. The speciﬁcations
are: ess  0 for a unit-step input; ess is half that of the
uncompensated system for a ramp input; settling
time = 500 seconds, and %OS = 13%.
Since the system is Type 0, it must be augmented
to a Type1 using anintegrator in order to achieve ess  0
for a step input. In addition, a phase lead-lag compensa-
tor will be required to achieve the speciﬁcations.
Simulate your design using a computer program.
31. Problem 52 in Chapter 10 mentioned a measurement-
based technique to design ﬁxed-structure controllers,
which does not require system identiﬁcation. In
that problem, we assumed a plant transfer function
of (Khadraoui, 2013)
Gs 
0:11114s2  5s  1
s4  3:1s3  0:85s2  0:87s  0:1111
Again, the interested reader is directed to the
reference for further study. In this problem, however,
we use the design and analysis techniques developed in
this and the previous chapters.
Use MATLAB and Bode plots to
design a PID controller, Gc(s),
to yield zero steady-state error for a
step input, an overshoot of 10 to 20%,
and a settling time of 20 to 50 seconds.
Start your design assuming an overshoot
of 10% and a settling time of 50 seconds.
Consider the design acceptable if the
PID-controlled response satisﬁes the
above requirements.
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
32. Control of HIV/AIDS. In Chapter 6, the model for an
HIV/AIDS patient treated with RTIs was linearized and
shown to be
Ps  Ys
U1s 
520s  10:3844
s3  2:6817s2  0:11s  0:0126

520s  0:02
s  2:2644s2  0:04s  0:0048
It is assumed here that the patient will be treated and
monitored using the closed-loop conﬁguration shown in
Figure P11.1 Since the plant has a negative dc gain,
assume
for
simplicity
that
Gs  Gcs Ps
and
Gc0 < 0. Assume also that the speciﬁcations for the
design are (1) zero steady-state error for step inputs,
(2) overdamped time-domain response, and (3) settling
time Ts ≈100 days (Craig, 2004).
a. The overdamped speciﬁcation requires a ΦM ≈90°.
Find the corresponding bandwidth required to satisfy
the settling time requirement.
b. The zero steady-state error speciﬁcation implies that
the open-loop transfer function must be augmented
to Type 1. The 0.02 zero of the plant adds too much
phase lead at low frequencies, and the complex
conjugate poles,ifleft uncompensated within the loop,
result in undesired oscillations in the time domain.
Thus, as an initial approach to compensation for this
system we can try
Gcs  Ks2  0:04s  0:0048
ss  0:02
For K  1, make a Bode plot of the resulting system.
Obtain the value of K necessary to achieve the design
demands. Check for closed-loop stability.
c. Simulate the unit step response
of the system using MATLAB.
Adjust
K
to
achieve
the
desired
response.
Problems
645

33. Hybrid vehicle. In Part b of Problem 54 in Chapter 10,
we used a proportional-plus-integral (PI) speed
controller that resulted in an overshoot of 20% and
a settling time, Ts  3:92 seconds (Preitl, 2007).
a. Now assume that the system speciﬁcations require a
steady-state error of zero for a step input, a ramp
input steady-state error 2%, a %OS  4.32%, and a
settling time  4 seconds. One way to achieve these
requirements is to cancel the PI-controller’s zero, ZI,
with the real pole of the uncompensated system
closest to the origin (located at 0.0163). Assuming
exact cancellation is possible, the plant and controller
transfer function becomes
Gs 
Ks  0:6
ss  0:5858
Design the system to meet the requirements. You may
use the following steps:
i. Set the gain, K, to the value required by the steady-
state error speciﬁcations. Plot the Bode magnitude
and phase diagrams.
ii. Calculate the required phase margin to meet the
damping ratio or equivalently the %OS requirement,
using Eq. (10.73). If the phase margin found from
the Bode plot obtained in Step i is greater than the
required value, simulate the system to check whether
the settling time is less than 4 seconds and whether
the requirement of a %OS  4.32% has been met.
Redesign if the simulation shows that the %OS
and/or the steady-state error requirements have not
been met. If all requirements are met, you have
completed the design.
b. In most cases, perfect pole-zero cancellation is
not possible. Assume that you want to check what
happens if the PI-controller’s zero changes by ± 20%,
e.g., if ZI moves to:
Case 1: 0:01304
or to
Case 2: 0:01956:
The plant and controller transfer function in these
cases will be, respectively:
Case 1: Gs  Ks  0:6s  0:01304
ss  0:0163s  0:5858
Case 2: Gs  Ks  0:6s  0:01956
ss  0:0163s  0:5858
Set K in each case to the value required by the
steady-state error speciﬁcations and plot the Bode
magnitude and phase diagrams. Simulate the closed-
loop step response for each of the three locations of
ZI: pole/zero cancellation, Case 1, and Case 2, given
in the problem.
Do the responses obtained resemble a second-
order overdamped, critically damped, or underdamped
response? Is there a need to add a derivative mode?
34. Parabolic trough collector. In order to reduce the
steady-state error of the parabolic trough collector sys-
tem, a PI controller is added to the open-loop transfer
function so that (Camacho, 2012)
Gs 
137:2  106Ks  0:01
ss2  0:0224s  196  106 e39s
a. Draw the new resulting Nyquist diagram when K = 1.
b. Find the range of K for closed-loop stability.
c. Use a phase margin argument to ﬁnd the value of K
that will yield ζ  0:5 damping factor.
d. Using the value found in Part a, simulate the system
for a unit-step response using a computer program.
Cyber Exploration Laboratory
Experiment 11.1
Objectives
To design a PID controller using MATLAB’s SISO Design Tool; To
observe the effect of a PI and a PD controller on the magnitude and phase responses at each
step of the design of a PID controller
Minimum Required Software Packages
MATLAB, and the Control System
Toolbox
Prelab
1. What is the phase margin required for 12% overshoot?
2. What is the bandwidth required for 12% overshoot and a peak time of 2 seconds?
646
Chapter 11
Design via Frequency Response

Bibliography
Barkana, I. Classical and Simple Adaptive Control of Nonminimum Phase Autopilot Design. Journal
of Guidance, Control, and Dynamics, vol. 28, 2005, pp. 631–638.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
D’Azzo, J. J., and Houpis, C. H. Feedback Control System Analysis and Synthesis, 2d ed.
McGraw-Hill, New York, 1966.
3. Given a unity feedback system with Gs 
K
ss  1s  4, what is the gain, K, required
to yield the phase margin found in Prelab 1? What is the phase-margin frequency?
4. Design a PI controller to yield a phase margin 5° more than that found in Prelab 1.
5. Complete the design of a PID controller for the system of Prelab 3.
Lab
1. Using MATLAB’s SISO Design Tool, set up the system of Prelab 3 and display the
open-loop Bode plots and the closed-loop step response.
2. Drag the Bode magnitude plot in a vertical direction until the phase margin found in
Prelab 1 is obtained. Record the gain K, the phase margin, the phase-margin frequency,
the percent overshoot, and the peak time. Move the magnitude curve up and down and
note the effect upon the phase curve, the phase margin, and the phase-margin frequency.
3. Design the PI controller by adding a pole at the origin and a zero one decade below the
phase-margin frequency found in Lab 2. Readjust the gain to yield a phase margin 5°
higher than that found in Prelab 1. Record the gain K, the phase margin, the phase-
margin frequency, the percent overshoot, and the peak time. Move the zero back and
forth in the vicinity of its current location and note the effect on the magnitude and phase
curve. Move the magnitude curve up and down and note its effect on the phase curve, the
phase margin, and the phase-margin frequency.
4. Design the PD portion of the PID controller by ﬁrst adjusting the magnitude curve to
yield a phase-margin frequency slightly below the bandwidth calculated in Prelab 2.
Add a zero to the system and move it until you obtain the phase margin calculated in
Prelab 1. Move the zero and note its effect. Move the magnitude curve and note its effect.
Postlab
1. Compare the Prelab PID design with that obtained via the SISO Design Tool. In
particular, compare the gain K, the phase margin, the phase-margin frequency, the
percent overshoot, and the peak time.
2. For the uncompensated system, describe the effect of changing gain on the phase curve,
the phase margin, and the phase-margin frequency.
3. For the PI-compensated system, describe the effect of changing gain on the phase curve,
the phase margin, and the phase-margin frequency. Repeat for changes in the zero
location.
4. For the PID-compensated system, describe the effect of changing gain on the phase
curve, the phase margin, and the phase-margin frequency. Repeat for changes in the PD
zero location.
Bibliography
647

Dorf, R. C. Modern Control Systems, 5th ed. Addison-Wesley, Reading, MA, 1989.
Flower, T. L., and Son, M. Motor Drive Mechanics and Control Electronics for a High Performance
Plotter. HP Journal, November 1981, pp. 12–15.
Hollot, C. V., Misra, V., Towsley, D., and Gong, W. A Control Theoretic Analysis of RED.
Proceedings of IEEE INFOCOM, 2001, pp. 1510–1519.
Hostetter, G. H., Savant, C. J., and Stefani, R. T. Design of Feedback Control Systems, 2d ed. Saunders
College Publishing, New York, 1989.
Khadraoui, S., Nounou, H., Nounou, M., Datta, A., and Bhattacharyya, S. P. A Measurement-based
approach for tuning of reduced-order controllers. American Control Conference (ACC), June 2013,
pp. 3876–3881.
Kuo, B. C. Automatic Control Systems, 5th ed. Prentice Hall, Upper Saddle River, NJ, 1987.
Mansor, H., Noor, S. B. M., Ahmad, R. K. R., and Taip, F. S. Online Quantitative feedback theory
(QFT)-based self-tuning controller for grain drying process. Scientiﬁc Research and Essays, vol. 6,
no. 31, December 16, 2011, pp. 6520–6534.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Phillips, C. L., and Harbor, R. D. Feedback Control Systems. Prentice Hall, Upper Saddle River, NJ,
1988.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Inteligence and Informatics.
IEEE, 2007, pp. 157–162.
Raven, F. H. Automatic Control Engineering, 4th ed. McGraw-Hill, New York, 1987.
Smith, C. A. Automated Continuous Process Control. Wiley, New York, 2002.
Sun, J., and Miao, Y. Modeling and simulation of the agricultural sprayer boom leveling system. IEEE
Third International Conf. on Measuring Tech. and Mechatronics Automation, 2011, pp. 613–618.
Tasch, U., Koontz, J. W., Ignatoski, M. A., and Geselowitz, D. B. An Adaptive Aortic Pressure
Observer for the Penn State Electric Ventricular Assist Device. IEEE Transactions on Biomedical
Engineering, vol. 37, 1990, pp. 374–383.
Yan, T., and Lin, R. Experimental Modeling and Compensation of Pivot Nonlinearity in Hard Disk
Drives. IEEE Transactions on Magnetics, vol. 39, 2003, pp. 1064–1069.
Zhang, J.-Y., Kim, J.-W., Lee, K.-B., and Kim, Y.-B. Development of an Active Front Steering (AFS)
System With QFT Control. International Journal of Automotive Technology, vol. 9, no. 6, 2008,
pp. 695–702.
648
Chapter 11
Design via Frequency Response

Design via State Space
This chapter covers only state-space methods.
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Design a state-feedback controller using pole placement for systems
represented in phase-variable form to meet transient response speciﬁcations
(Sections 12.1–12.2)
• Determine if a system is controllable (Section 12.3)
• Design a state-feedback controller using pole placement for systems not
represented in phase-variable form to meet transient response speciﬁcations
(Section 12.4)
• Design a state-feedback observer using pole placement for systems represented
in observer canonical form (Section 12.5)
• Determine if a system is observable (Section 12.6)
• Design a state-feedback observer using pole placement for systems not
represented in observer canonical form (Section 12.7)
• Design steady-state error characteristics for systems represented in state space
(Section 12.8)

12
649

Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with case
studies as follows:
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to specify all closed-loop poles and then design
a state-feedback controller to meet transient response speciﬁcations.
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to design an observer to estimate the states.
• Given the antenna azimuth position control system shown on the front
endpapers, you will be able to combine the controller and observer
designs into a viable compensator for the system.
12.1 Introduction
Chapter 3 introducedthe concepts of state-space analysis and system modeling. We showedthat
state-space methods, like transform methods, are simply tools for analyzing and designing
feedback control systems. However, state-space techniques can be applied to a wider class of
systemsthantransform methods.Systemswithnonlinearities, such asthatshownin Figure12.1,
and multiple-input, multiple-output systems are just two of the candidates for the state-space
approach. In this book, however, we apply the approach only to linear systems.
In Chapters 9 and 11, we applied frequency domain methods to system design. The
basic design technique is to create a compensator in cascade with the plant or in the feedback
path that has the correct additional poles and zeros to yield a desired transient response and
steady-state error.
One of the drawbacks of frequency domain methods of design, using either root locus
or frequency response techniques, is that after designing the location of the dominant
Robin Nelson/Zuma Press
FIGURE 12.1
A robot in a
hospital pharmacy selects
medications by bar code1
1 Tadeo F., Perez, Loepez O., and Alvarez T. Control of Neutralization Processes by Robust Loopsharing. IEEE
Trans. on Cont. Syst. Tech., vol. 8, no. 2, 2000. Fig. 2, p. 239. IEEE Transactions on Control Systems Technology
by Institute of Electrical and Electronics Engineers; IEEE Control Systems Society Reproduced with permission of
Institute of Electrical and Electronics Engineers, in the format Republish in a book via Copyright Clearance Center.
650
Chapter 12
Design via State Space

second-order pair of poles, we keep our ﬁngers crossed, hoping that the higher-order poles
do not affect the second-order approximation. What we would like to be able to do is specify
all closed-loop poles of the higher-order system. Frequency domain methods of design do
not allow us to specify all poles in systems of order higher than 2 because they do not allow
for a sufﬁcient number of unknown parameters to place all of the closed-loop poles
uniquely. One gain to adjust, or compensator pole and zero to select, does not yield a
sufﬁcient number of parameters to place all the closed-loop poles at desired locations.
Remember, to place n unknown quantities, you need n adjustable parameters. State-space
methods solve this problem by introducing into the system (1) other adjustable parameters
and (2) the technique for ﬁnding these parameter values, so that we can properly place all
poles of the closed-loop system.2
On the other hand, state-space methods do not allow the speciﬁcation of closed-loop
zero locations, which frequency domain methods do allow through placement of the lead
compensator zero. This is a disadvantage of state-space methods, since the location of the
zero does affect the transient response. Also, a state-space design may prove to be very
sensitive to parameter changes.
Finally, there is a wide range of computational support for state-space methods; many
software packages support the matrix algebra required by the design process. However, as
mentioned before, the advantages of computer support are balanced by the loss of graphic
insight into a design problem that the frequency domain methods yield.
This chapter should be considered only an introduction to state-space design; we
introduce one state-space design technique and apply it only to linear systems. Advanced
study is required to apply state-space techniques to the design of systems beyond the scope
of this textbook.
12.2 Controller Design
This section shows how to introduce additional parameters into a system so that we can
control the location of all closed-loop poles. An nth-order feedback control system has an
nth-order closed-loop characteristic equation of the form
sn  an1sn1  ∙∙∙ a1s  a0  0
12.1
Since the coefﬁcient of the highest power of s is unity, there are n coefﬁcients whose values
determine the system’s closed-loop pole locations. Thus, if we can introduce n adjustable
parameters into the system and relate them to the coefﬁcients in Eq. (12.1), all of the poles of
the closed-loop system can be set to any desired location.
Topology for Pole Placement
In order to lay the groundwork for the approach, consider a plant represented in state
space by
_x  Ax  Bu
(12.2a)
y  Cx
(12.2b)
and shown pictorially in Figure 12.2(a), where light lines are scalars and the heavy lines are
vectors.
2 This is an advantage as long as we know where to place the higher-order poles, which is not always the case. One
course of action is to place the higher-order poles far from the dominant second-order poles or near a closed-loop
zero to keep the second-order system design valid. Another approach is to use optimal control concepts, which are
beyond the scope of this text.
12.2 Controller Design
651

In a typical feedback control system, the output, y, is fed back to the summing
junction. It is now that the topology of the design changes. Instead of feeding back y, what if
we feed back all of the state variables? If each state variable is fed back to the control, u,
through a gain, ki, there would be n gains, ki, that could be adjusted to yield the required
closed-loop pole values. The feedback through the gains, ki, is represented in Figure 12.2(b)
by the feedback vector K.
The state equations for the closed-loop system of Figure 12.2(a) can be written by
inspection as
_x  Ax  Bu  Ax  BKx  r  A  BKx  Br
(12.3a)
y  Cx
(12.3b)
Before continuing, you should have a good idea of how the feedback system of
Figure 12.2(b) is actually implemented. As an example, assume a plant signal-ﬂow graph in
phase-variable form, as shown in Figure 12.3(a). Each state variable is then fed back to the
plant’s input, u, through a gain, ki, as shown in Figure 12.3(b). Although we will cover
other representations later in the chapter, the phase-variable form, with its typical lower
companion system matrix, or the controller canonical form, with its typical upper
companion system matrix, yields the simplest evaluation of the feedback gains. In the
ensuing discussion, we use the phase-variable form to develop and demonstrate the concepts.
End-of-chapter problems will give you an opportunity to develop and test the concepts for the
controller canonical form.
The design of state-variable feedback for closed-loop pole placement consists of
equating the characteristic equation of a closed-loop system, such as that shown in
Figure 12.3(b), to a desired characteristic equation and then ﬁnding the values of the
feedback gains, ki.
If a plant like that shown in Figure 12.3(a) is of high order and not represented
in phase-variable or controller canonical form, the solution for the ki’s can be
intricate. Thus, it is advisable to transform the system to either of these forms, design
the ki’s, and then transform the system back to its original representation. We perform
u
B
+
+
C
x
y
A
u
B
+
+
C
x
y
A
+
r
+
–K
(a)
(b)
x
x
∫
∫
FIGURE 12.2
a. State-space
representation of a plant;
b. plant with state-variable
feedback
652
Chapter 12
Design via State Space

this conversion in Section 12.4, where we develop a method for performing
the transformations. Until then, let us direct our attention to plants represented in
phase-variable form.
Pole Placement for Plants in Phase-Variable Form
To apply pole-placement methodology to plants represented in phase-variable form, we take
the following steps:
1. Represent the plant in phase-variable form.
2. Feed back each phase variable to the input of the plant through a gain, ki.
3. Find the characteristic equation for the closed-loop system represented in Step 2.
4. Decide upon all closed-loop pole locations and determine an equivalent characteristic
equation.
5. Equate like coefﬁcients of the characteristic equations from Steps 3 and 4 and solve
for ki.
x1
u
1
x3
x2
x1
y
c1
c3
–a0
–a1
–a2
(a)
u
1
x3
x2
y
c1
c2
c3
–a0
–a1
–a2
(b)
r
1
–k3
–k2
–k1
c2
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE 12.3
a. Phase-
variable representation
for plant; b. plant with
state-variable feedback
12.2 Controller Design
653

Following these steps, the phase-variable representation of the plant is given by Eq. (12.2),
with
A 
0
1
0
∙∙∙
0
0
0
1
∙∙∙
0
..
.
..
.
..
.
..
.
..
.
a0
a1
a2
∙∙∙
an1
2
6666664
3
7777775
; B 
0
0
..
.
1
2
6666664
3
7777775
;
C   c1
c2
∙∙∙
cn 
12.4
The characteristic equation of the plant is thus
sn  an1sn1  ∙∙∙ a1s  a0  0
12.5
Now form the closed-loop system by feeding back each state variable to u, forming
u  Kx
12.6
where
K   k1
k2
∙∙∙
kn 
12.7
The ki’s are the phase variables’ feedback gains.
Using Eq. (12.3a) with Eqs. (12.4) and (12.7), the system matrix, A  BK, for the
closed-loop system is
A  BK 
0
1
0
∙∙∙
0
0
0
1
∙∙∙
0
...
...
...
...
...
a0  k1
a1  k2
a2  k3
∙∙∙
an1  kn
2
666664
3
777775
12.8
Since Eq. (12.8) is in phase-variable form, the characteristic equation of the closed-loop
system can be written by inspection as
detsI  A  BK  sn  an1  knsn1  an2  kn1sn2
 ∙∙∙a1  k2s  a0  k1  0
12.9
Notice the relationship between Eqs. (12.5) and (12.9). For plants represented in phase-
variable form, we can write by inspection the closed-loop characteristic equation from the
open-loop characteristic equation by adding the appropriate ki to each coefﬁcient.
Now assume that the desired characteristic equation for proper pole placement is
sn  dn1sn1  dn2sn2  ∙∙∙ d2s2  d1s  d0  0
12.10
where the di’s are the desired coefﬁcients. Equating Eqs. (12.9) and (12.10), we obtain
di  ai  ki1
i  0; 1; 2; . . . ; n  1
12.11
654
Chapter 12
Design via State Space

from which
ki1  di  ai
12.12
Now that we have found the denominator of the closed-loop transfer function, let us
ﬁnd the numerator. For systems represented in phase-variable form, we learned that the
numerator polynomial is formed from the coefﬁcients of the output coupling matrix, C.
Since Figures 12.3(a) and (b) are both in phase-variable form and have the same output
coupling matrix, we conclude that the numerators of their transfer functions are the same.
Let us look at a design example.
Example 12.1
Controller Design for Phase-Variable Form
Controller Design for Phase-Variable Form
PROBLEM: Given the plant
Gs 
20s  5
ss  1s  4
12.13
design the phase-variable feedback gains to yield 9.5% overshoot and a settling time of
0.74 second.
SOLUTION: We begin by calculating the desired closed-loop characteristic equation.
Using the transient response requirements, the closed-loop poles are 5:4  j7:2. Since
the system is third-order, we must select another closed-loop pole. The closed-loop
system will have a zero at 5, the same as the open-loop system. We could select the
third closed-loop pole to cancel the closed-loop zero. However, to demonstrate the
effect of the third pole and the design process, including the need for simulation, let us
choose 5.1 as the location of the third closed-loop pole.
Now draw the signal-ﬂow diagram for the plant. The result is shown in
Figure 12.4(a). Next feed back all state variables to the control, u, through gains
ki, as shown in Figure 12.4(b).
Writing the closed-loop system’s state equations from Figure 12.4(b), we have
_x 
0
1
0
0
0
1
k1
4  k2
5  k3
2
64
3
75x 
0
0
1
2
64
3
75r
(12.14a)
y   100
20
0  x
(12.14b)
Comparing Eqs. (12.14) to Eqs. (12.3), we identify the closed-loop system matrix as
A  BK 
0
1
0
0
0
1
k1
4  k2
5  k3
2
64
3
75
12.15
To ﬁnd the closed-loop system’s characteristic equation, form
detsI  A  BK  s3  5  k3s2  4  k2s  k1  0
12.16
This equation must match the desired characteristic equation
s3  15:9s2  136:08s  413:1  0
12.17
12.2 Controller Design
655

formed from the poles 5:4  j7:2;  5:4  j7:2, and 5.1, which were previously
determined.
Equating the coefﬁcients of Eqs. (12.16) and (12.17), we obtain
k1  413:1;
k2  132:08;
k3  10:9
12.18
Finally, the zero term of the closed-loop transfer function is the same as the zero
term of the open-loop system, or s  5.
Using Eqs. (12.14), we obtain the following state-space representation of the closed-
loop system:
_x 
0
1
0
0
0
1
413:1
136:08
15:9
2
4
3
5 x 
0
0
1
2
4
3
5r
(12.19a)
y   100
20
0  x
(12.19b)
The transfer function is
Ts 
20s  5
s3  15:9s2  136:08s  413:1
12.20
Figure 12.5, a simulation of the closed-loop system, shows 11.5% overshoot and a
settling time of 0.8 second. A redesign with the third pole canceling the zero at 5 will
yield performance equal to the requirements.
Since the steady-state response approaches 0.24 instead of unity, there is a large
steady-state error. Design techniques to reduce this error are discussed in Section 12.8.
x1
u
1
x3
x2
x1
100
y
20
–4
x3
1
u
1
r
x2
y
–5
–k3
–4
–k2
–k1
(a)
(b)
–5
1
s
1
s
1
s
1
s
1
s
1
s
20
100
FIGURE 12.4
a. Phase-
variable representation for plant
of Example 12.1; b. plant with
state-variable feedback
656
Chapter 12
Design via State Space

In this section, we showed how to design feedback gains for plants represented in
phase-variable form in order to place all of the closed-loop system’s poles at desired
locations on the s-plane. On the surface, it appears that the method should always work for
Students who are using MATLAB should now run ch12 p1 in Appendix B.
You will learn how to use MATLAB to design a controller for phase
variables using pole placement. MATLAB will plot the step
response of the designed system. This exercise solves Example
12.1 using MATLAB.
 0
 0
0.30
2.0
Time (seconds)
c(t)
0.25
0.20
0.15
0.10
0.05
1.5
1.0
0.5
FIGURE 12.5
Simulation of
closed-loop system of
Example 12.1
Skill-Assessment Exercise 12.1
PROBLEMS: For the plant
Gs 
100s  10
ss  3s  12
represented in the state space in phase-variable form by
_x  Ax  Bu 
0
1
0
0
0
1
0
36
15
2
664
3
775x 
0
0
1
2
664
3
775u
y  Cx 
1000
100
0


x
design the phase-variable feedback gains to yield 5% overshoot and a peak time of
0.3 second.
ANSWER:
K   2094
373:1
14:97 
The complete solution is located at www.wiley.com/college/nise.
TryIt 12.1
Use MATLAB, the Control
System Toolbox, and the
following statements to solve
for the phase-variable
feedback gains to place the
poles of the system in Skill-
Assessment Exercise 12.1 at
3  j5;  3  j5, and 10.
A=[0 1 0
0 0 1
0 36 15]
B=[0;0;1]
poles=[3+5j,...
35j,10]
K=acker(A,B,poles)
12.2 Controller Design
657

any system. However, this is not the case. The conditions that must exist in order to uniquely
place the closed-loop poles where we want them is the topic of the next section.
12.3 Controllability
Consider the parallel form shown in Figure 12.6(a). To control the pole location of the
closed-loop system, we are saying implicitly that the control signal, u, can control the
behaviorofeachstatevariableinx.Ifanyoneofthestatevariablescannotbecontrolledby
the control u, then we cannot place the poles of the system where we desire. For example,
in Figure 12.6(b), if x1 were not controllable by the control signal and if x1 also exhibited
an unstable response due to a nonzero initial condition, there would be no way to effect
a state-feedback design to stabilize x1. State variable x1 would perform in its own
way regardless of the control signal, u. Thus, in some systems, a state-feedback design is
not possible.
We now make the following deﬁnition based upon the previous discussion:
If an input to a system can be found that takes every state variable from a desired
initial state to a desired ﬁnal state, the system is said to be controllable; otherwise,
the system is uncontrollable.
Pole placement is a viable design technique only for systems that are controllable. This
section shows how to determine, a priori, whether pole placement is a viable design
technique for a controller.
Controllability by Inspection
We can explore controllability from another viewpoint: that of the state equation itself.
When the system matrix is diagonal, as it is for the parallel form, it is apparent whether
or not the system is controllable. For example, the state equation for Figure 12.6(a) is
_x 
a1
0
0
0
a2
0
0
0
a3
2
64
3
75x 
1
1
1
2
64
3
75u
12.21
or
_x1  a1x1
 u
(12.22a)
_x2 
a2x2
 u
(12.22b)
_x3 
a3x3  u
(12.22c)
Since each of Eqs. (12.22) is independent and decoupled from the rest, the control u
affects each of the state variables. This is controllability from another perspective.
Now let us look at the state equations for the system of Figure 12.6(b):
_x 
a4
0
0
0
a5
0
0
0
a6
2
4
3
5x 
0
1
1
2
4
3
5u
12.23
or
_x1  a4x1
(12.24a)
_x2 
a5x2
 u
(12.24b)
_x3 
a6x3  u
(12.24c)
u  
x1
y
1
1
1
(a)
–a3
x3
–a2
–a1
K2
u  
x1
y
1
1
(b)
–a6
x3 
x2
–a5
–a4
K3
K5
K4
K6
K1
x2
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE 12.6
Comparison of
a. controllable and b. uncontrollable
systems
658
Chapter 12
Design via State Space

From the state equations in (12.23) or (12.24), we see that state variable x1 is not controlled
by the control u. Thus, the system is said to be uncontrollable.
In summary, a system with distinct eigenvalues and a diagonal system matrix is
controllable if the input coupling matrix B does not have any rows that are zero.
The Controllability Matrix
Tests for controllability that we have so far explored cannot be used for representations of
the system other than the diagonal or parallel form with distinct eigenvalues. The problem
of visualizing controllability gets more complicated if the system has multiple poles, even
though it is represented in parallel form. Further, one cannot always determine controllability
byinspectionforsystemsthat arenotrepresentedin parallelform.In otherforms, theexistence
of paths from the input to the state variables is not a criterion for controllability since the
equations are not decoupled.
In order to be able to determine controllability or, alternatively, to design state feedback
for a plant under any representation or choice of state variables, a matrix can be derived that
must have a particular property if all state variables are to be controlled by the plant input, u.
We now state the requirement for controllability, including the form, property, and name of
this matrix.3
An nth-order plant whose state equation is
_x  Ax  Bu
12.25
is completely controllable4 if the matrix
CM   B
AB
A2B
∙∙∙
An1B 
12.26
is of rank n, where CM is called the controllability matrix.5 As an example, let us choose a
system represented in parallel form with multiple roots.
Example 12.2
Controllability via the Controllability Matrix
Controllability via the Controllability Matrix
PROBLEM: Given the system of Figure 12.7, represented by a signal-ﬂow diagram,
determine its controllability.
–1
–1
–10
10
–2
1
u
1
1
10
y
x3
x1
x2
1
s
1
s
1
s
FIGURE 12.7
System for
Example 12.2
3 See the work listed in the Bibliography by Ogata (1990: 699–702) for the derivation.
4 Completely controllable means that all state variables are controllable. This textbook uses controllable to mean
completely controllable.
5 See Appendix G at www.wiley.com/college/nise for the deﬁnition of rank. For single-input systems, instead of
specifying rank n, we can say that CM must be nonsingular, possess an inverse, or have linearly independent rows
and columns.
12.3 Controllability
659

In the previous example, we found that even though an element of the input coupling
matrix was zero, the system was controllable. If we look at Figure 12.7, we can see why. In
this ﬁgure, all of the state variables are driven by the input u.
On the other hand, if we disconnect the input at either dx1=dt; dx2=dt, or dx3=dt, at
least one state variable would not be controllable. To see the effect, let us disconnect the
input at dx2=dt. This causes the B matrix to become
B 
0
0
1
2
64
3
75
12.29
We can see that the system is now uncontrollable, since x1 and x2 are no longer controlled by
the input. This conclusion is borne out by the controllability matrix, which is now
CM 
B
AB
A2B



0
0
0
0
0
0
1
2
4
2
64
3
75
12.30
Not only is the determinant of this matrix equal to zero, but so is the determinant of any 2  2
submatrix. Thus, the rank of Eq. (12.30) is 1. The system is uncontrollable because the rank
of CM is 1, which is less than the order, 3, of the system.
SOLUTION: The state equation for the system written from the signal-ﬂow diagram is
_x  Ax  Bu 
1
1
0
0
1
0
0
0
2
2
64
3
75 x 
0
1
1
2
64
3
75 u
12.27
At ﬁrst, it would appear that the system is not controllable because of the zero in the
B matrix. Remember, though, that this conﬁguration leads to uncontrollability only if
the poles are real and distinct. In this case, we have multiple poles at 1.
The controllability matrix is
CM 
B
AB
A2B



0
1
2
1
1
1
1
2
4
2
64
3
75
12.28
The rank of CM equals the number of linearly independent rows or columns. The
rank can be found by ﬁnding the highest-order square submatrix that is nonsingular.
The determinant of CM  1. Since the determinant is not zero, the 3  3 matrix is
nonsingular, and the rank of CM is 3. We conclude that the system is controllable since the
rank of CM equals the system order. Thus, the poles of the system can be placed using
state-variable feedback design.
Students who are using MATLAB should now run ch12p2 in Appendix B.
You will learn how to use MATLAB to test a system for controlla-
bility. This exercise solves Example 12.2 using MATLAB.
660
Chapter 12
Design via State Space

In summary, then, pole-placement design through state-variable feedback is simpliﬁed
by using the phase-variable form for the plant’s state equations. However, controllability, the
ability for pole-placement design to succeed, can be visualized best in the parallel form, where
the system matrix is diagonal with distinct roots. In any event, the controllability matrix will
always tell the designer whether the implementation is viable for state-feedback design.
The next section shows how to design state-variable feedback for systems not
represented in phase-variable form. We use the controllability matrix as a tool for trans-
forming a system to phase-variable form for the design of state-variable feedback.
12.4 Alternative Approaches to Controller Design
Section 12.2 showed how to design state-variable feedback to yield desired closed-loop
poles. We demonstrated this method using systems represented in phase-variable form and
saw how simple it was to calculate the feedback gains. Many times the physics of the
problem requires feedback from state variables that are not phase variables. For these
systems we have some choices for a design methodology.
The ﬁrst method consists of matching the coefﬁcients of detsI  A  BK with the
coefﬁcients of the desired characteristic equation, which is the same method we used for
systems represented in phase variables. This technique, in general, leads to difﬁcult
calculations of the feedback gains, especially for higher-order systems not represented
with phase variables. Let us illustrate this technique with an example.
Skill-Assessment Exercise 12.2
PROBLEM: Determine whether the system
_x  Ax  Bu 
1
1
2
0
1
5
0
3
4
2
64
3
75 x 
2
1
1
2
64
3
75 u
is controllable.
ANSWER: Controllable
The complete solution is located at www.wiley.com/college/nise.
TryIt 12.2
Use MATLAB, the Control
System Toolbox, and the
following statements to solve
Skill-Assessment Exercise 12.2.
A=[1
1
2
0 1
5
0
3 4]
B=[2;1;1]
Cm=ctrb(A,B)
Rank=rank(Cm)
Example 12.3
Controller Design by Matching Coefficients
Controller Design by Matching Coefficients
PROBLEM: Given a plant, Ys=Us  10=s  1s  2, design state feedback for
the plant represented in cascade form to yield a 15% overshoot with a settling time of
0.5 second.
SOLUTION: The signal-ﬂow diagram for the plant in cascade form is shown in
Figure 12.8(a). Figure 12.8(b) shows the system with state feedback added. Writing
the state equations from Figure 12.8(b), we have
_x 
2
1
k1
k2  1


x 
0
1


r
(12.31a)
y   10
0  x
(12.31b)
12.4 Alternative Approaches to Controller Design
661

The second method consists of transforming the system to phase variables, designing
the feedback gains, and transforming the designed system back to its original state-variable
representation.6 This method requires that we ﬁrst develop the transformation between a
system and its representation in phase-variable form.
Assume a plant not represented in phase-variable form
_z  Az  Bu
(12.34a)
y  Cz
(12.34b)
whose controllability matrix is
CMz   B
AB
A2B ∙∙∙An1B 
12.35
where the characteristic equation is
s2  k2  3s  2k2  k1  2  0
12.32
Using the transient response requirements stated in the problem, we obtain the desired
characteristic equation
s2  16s  239:5  0
12.33
Equating the middle coefﬁcients of Eqs. (12.32) and (12.33), we ﬁnd k2  13. Equating
the last coefﬁcients of these equations along with the result for k2 yields k1  211:5.
u
1
x2
1
x1
10
y
–1
x2
1
1
u
1
r
x1
10
y
–1
–2
–k2
–k1
(a)
(b)
–2
1
s
1
s
1
s
1
s
FIGURE 12.8
a. Signal-ﬂow
graph in cascade form for
Gs  10=s  1s  2;
b. system with state feedback
added
6 See the discussions of Ackermann’s formula in (Franklin, 1994) and (Ogata, 1990), listed in the Bibliography.
662
Chapter 12
Design via State Space

Assume that the system can be transformed into the phase-variable (x) representation with
the transformation
z  Px
12.36
Substituting this transformation into Eqs. (12.34), we get
_x  P1APx  P1Bu
(12.37a)
y  CPx
(12.37b)
whose controllability matrix is
CMx  P1B
P1APP1B
P1AP2P1B
∙∙∙
P1APn1P1B
 P1B
P1APP1B
P1APP1APP1B
∙∙∙
P1AP
P1APP1AP
∙∙∙
P1APP1B
 P1B
AB
A2B
∙∙∙
An1B
12.38
Substituting Eq. (12.35) into (12.38) and solving for P, we obtain
P  CMzC
1
Mx
12.39
Thus, the transformation matrix, P, can be found from the two controllability matrices.
After transforming the system to phase variables, we design the feedback gains as in
Section 12.2. Hence, including both feedback and input, u  Kxx  r, Eqs. (12.37)
becomes
_x  P1APx  P1BKxx  P1Br
 P1AP  P1BKxx  P1Br
(12.40a)
y  CPx
(12.40b)
Since this equation is in phase-variable form, the zeros of this closed-loop system are
determined from the polynomial formed from the elements of CP, as explained in
Section 12.2.
Using x  P1z, we transform Eqs. (12.40) from phase variables back to the original
representation and get
_z  Az  BKxP1z  Br  A  BKxP1z  Br
(12.41a)
y  Cz
(12.41b)
Comparing Eqs. (12.41) with (12.3), the state variable feedback gain, Kz, for the original
system is
Kz  KxP1
12.42
The transfer function of this closed-loop system is the same as the transfer function for
Eqs. (12.40), since Eqs. (12.40) and (12.41) represent the same system. Thus, the zeros of
the closed-loop transfer function are the same as the zeros of the uncompensated plant,
based upon the development in Section 12.2. Let us demonstrate with a design example.
12.4 Alternative Approaches to Controller Design
663

Example 12.4
Controller Design by Transformation
Controller Design by Transformation
PROBLEM: Design a state-variable feedback controller to yield a 20.8% overshoot and
a settling time of 4 seconds for a plant,
Gs 
s  4
s  1s  2s  5
12.43
that is represented in cascade form as shown in Figure 12.9.
SOLUTION: First ﬁnd the state equations and the controllability matrix. The state
equations written from Figure 12.9 are
_z  Azz  Bzu 
5
1
0
0
2
1
0
0
1
2
64
3
75 z 
0
0
1
2
64
3
75 u
(12.44a)
y  Czz   1
1
0  z
(12.44b)
from which the controllability matrix is evaluated as
CMz 
Bz
AzBz
A2
zBz



0
0
1
0
1
3
1
1
1
2
64
3
75
12.45
Since the determinant of CMz is 1, the system is controllable.
We now convert the system to phase variables by ﬁrst ﬁnding the characteristic
equation and using this equation to write the phase-variable form. The characteristic
equation, detsI  Az, is
detsI  Az  s3  8s2  17s  10  0
12.46
Using the coefﬁcients of Eq. (12.46) and our knowledge of the phase-variable form, we
write the phase-variable representation of the system as
_x  Axx  Bxu 
0
1
0
0
0
1
10
17
8
2
64
3
75 x 
0
0
1
2
64
3
75 u
(12.47a)
y   4
1
0  x
(12.47b)
u
z3
1
z2
1
z1
4
–1
–2
–5
y
1
1
1
s
1
s
1
s
FIGURE 12.9
Signal-ﬂow
graph for plant of Example 12.4
664
Chapter 12
Design via State Space

The output equation was written using the coefﬁcients of the numerator of Eq. (12.43),
since the transfer function must be the same for the two representations. The controllability
matrix, CMx, for the phase-variable system is
CMx 
Bx
AxBx
A2
xBx



0
0
1
0
1
8
1
8
47
2
64
3
75
12.48
Using Eq. (12.39), we can now calculate the transformation matrix between the two
systems as
P  CMzC1
Mx 
1
0
0
5
1
0
10
7
1
2
64
3
75
12.49
We now design the controller using the phase-variable representation and then use
Eq. (12.49) to transform the design back to the original representation. For a 20.8%
overshoot and a settling time of 4 seconds, a factor of the characteristic equation of the
designed closed-loop system is s2  2s  5. Since the closed-loop zero will be at s  4,
we choose the third closed-loop pole to cancel the closed-loop zero. Hence, the total
characteristic equation of the desired closed-loop system is
Ds  s  4s2  2s  5  s3  6s2  13s  20  0
12.50
The state equations for the phase-variable form with state-variable feedback are
_x  Ax  BxKxx 
0
1
0
0
0
1
10  k1x
17  k2x
8  k3x
2
64
3
75x
(12.51a)
y   4
1
0  x
(12.51b)
The characteristic equation for Eqs. (12.51) is
det sI  Ax  BxKx  s3  8  k3xs2  17  k2xs  10  k1x
 0
12.52
Comparing Eq. (12.50) with (12.52), we see that
Kx   k1x
k2x
k3x    10
4
2 
12.53
Using Eqs. (12.42) and (12.49), we can transform the controller back to the original
system as
Kz  KxP1   20
10
2 
12.54
The ﬁnal closed-loop system with state-variable feedback is shown in Figure 12.10, with
the input applied as shown.
12.4 Alternative Approaches to Controller Design
665

Let us now verify our design. The state equations for the designed system shown in
Figure 12.10 with input r are
_z  Az  BzKzz  Bzr 
5
1
0
0
2
1
20
10
1
2
64
3
75z 
0
0
1
2
64
3
75r
(12.55a)
y  Czz   1
1
0  z
(12.55b)
Using Eq. (3.73) to ﬁnd the closed-loop transfer function, we obtain
Ts 
s  4
s3  6s2  13s  20 
1
s2  2s  5
12.56
The requirements for our design have been met.
Students who are using MATLAB should now run ch12p3 in Appendix B.
You will learn how to use MATLAB to design a controller for a plant
not represented in phase-variable form. You will see that MATLAB
does not require transformation to phase-variable form. This
exercise solves Example 12.4 using MATLAB.
–1
–2
20
–10
–5
r
1
u
1
1
z3
1
z2
4
z1
y
1
2
1
s
1
s
1
s
FIGURE 12.10
Designed
system with state-variable
feedback for Example 12.4
Skill-Assessment Exercise 12.3
PROBLEM: Design a linear state-feedback controller to yield 20% overshoot and a settling
time of 2 seconds for a plant
Gs 
s  6
s  9s  8s  7
that is represented in state space in cascade form by
_z  Az  Bu 
7
1
0
0
8
1
0
0
9
2
664
3
775z 
0
0
1
2
664
3
775u
y  Cz 
1
1
0


z
ANSWER: Kz   40:23
62:24
14 
The complete solution is located at www.wiley.com/college/nise.
666
Chapter 12
Design via State Space

In this section, we saw how to design state-variable feedback for plants not
represented in phase-variable form. Using controllability matrices, we were able to
transform a plant to phase-variable form, design the controller, and ﬁnally transform the
controller design back to the plant’s original representation. The design of the controller
relies on the availability of the states for feedback. In the next section, we discuss the design
of state-variable feedback when some or all of the states are not available.
12.5 Observer Design
Controller design relies upon access to the state variables for feedback through adjustable
gains. This access can be provided by hardware. For example, gyros can measure position
and velocity on a space vehicle. Sometimes it is impractical to use this hardware for reasons
of cost, accuracy, or availability. For example, in powered ﬂight of space vehicles, inertial
measuring units can be used to calculate the acceleration. However, their alignment
deteriorates with time; thus, other means of measuring acceleration may be desirable
(Rockwell International, 1984). In other applications, some of the state variables may not
be available at all, or it is too costly to measure them or send them to the controller. If the
state variables are not available because of system conﬁguration or cost, it is possible to
estimate the states. Estimated states, rather than actual states, are then fed to the controller.
One scheme is shown in Figure 12.11(a). An observer, sometimes called an estimator, is
used to calculate state variables that are not accessible from the plant. Here the observer is a
model of the plant.
Plant
Observer
Plant
output,
y
Estimated
output,
y
+
Controller
u
+
r = 0
(a)
Plant
Observer
+
Controller
u
+
r = 0
Estimated
states,
(b)
L
A
B
+
+
+
–
To controller
u
(c)
+
Estimated
output,
y
C
x
x
.
Plant
output,
y
 x
Estimated
states,
 x
Plant
output,
y
ˆ
ˆ
ˆ
ˆ
ˆ
ˆ
Estimated
error
 output
∫
FIGURE 12.11
State-
feedback design using an
observer to estimate unavailable
state variables: a. open-loop
observer; b. closed-loop
observer; c. exploded view of a
closed-loop observer, showing
feedback arrangement to reduce
state-variable estimation error
12.5 Observer Design
667

Let us look at the disadvantages of such a conﬁguration. Assume a plant,
_x  Ax  Bu
(12.57a)
y  Cx
(12.57b)
and an observer,
_^x  A^x  Bu
(12.58a)
^y  C^x
(12.58b)
Subtracting Eqs. (12.58) from (12.57), we obtain
_x  _^x  Ax  ^x
(12.59a)
y  ^y  Cx  ^x
(12.59b)
Thus, the dynamics of the difference between the actual and estimated states is unforced,
and if the plant is stable, this difference, due to differences in initial state vectors,
approaches zero. However, the speed of convergence between the actual state and the
estimated state is the same as the transient response of the plant since the characteristic
equation for Eq. (12.59a) is the same as that for Eq. (12.57a). Since the convergence is too
slow, we seek a way to speed up the observer and make its response time much faster than
that of the controlled closed-loop system, so that, effectively, the controller will receive
the estimated states instantaneously.
To increase the speed of convergence between the actual and estimated states, we use
feedback, shown conceptually in Figure 12.11(b) and in more detail in Figure 12.11(c). The
error between the outputs of the plant and the observer is fed back to the derivatives of the
observer’s states. The system corrects to drive this error to zero. With feedback we can
design a desired transient response into the observer that is much quicker than that of the
plant or controlled closed-loop system.
When we implemented the controller, we found that the phase-variable or controller
canonical form yielded an easy solution for the controller gains. In designing an observer, it
is the observer canonical form that yields the easy solution for the observer gains.
Figure 12.12(a) shows an example of a third-order plant represented in observer canonical
form. In Figure 12.12(b), the plant is conﬁgured as an observer with the addition of feedback,
as previously described.
The design of the observer is separate from the design of the controller. Similar to the
design of the controller vector, K, the design of the observer consists of evaluating the
constant vector, L, so that the transient response of the observer is faster than the response of
the controlled loop in order to yield a rapidly updated estimate of the state vector. We now
derive the design methodology.
We will ﬁrst ﬁnd the state equations for the error between the actual state vector and
the estimated state vector, x  ^x. Then we will ﬁnd the characteristic equation for the
error system and evaluate the required L to meet a rapid transient response for the
observer.
Writing the state equations of the observer from Figure 12.11(c), we have
_^x  A^x  Bu  Ly  ^y
(12.60a)
^y  C^x
(12.60b)
668
Chapter 12
Design via State Space

But the state equations for the plant are
_x  Ax  Bu
(12.61a)
y  Cx
(12.61b)
Subtracting Eqs. (12.60) from (12.61), we obtain
_x  _^x  Ax  ^x  Ly  ^y
(12.62a)
y  ^y  Cx  ^x
(12.62b)
where x  ^x is the error between the actual state vector and the estimated state vector, and
y  ^y is the error between the actual output and the estimated output.
Substituting the output equation into the state equation, we obtain the state equation
for the error between the estimated state vector and the actual state vector:
_x  _^x  A  LCx  ^x
(12.63a)
y  ^y  Cx  ^x
(12.63b)
u
b1
x3ˆ
1
x2ˆ
1
x1ˆ
1
yˆ
–a2
–a1
–a0
b2
b3
(a)
b3
b2
u
b1
x3ˆ
1
x2ˆ
1
x1ˆ
1
yˆ
–1
1
y
–a2
–a1
–a0
l3
l2
l1
(b)
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE 12.12
Third-order
observer in observer canonical
form: a. before the addition of
feedback; b. after the addition of
feedback
12.5 Observer Design
669

Letting ex  x  ^x, we have
_ex  A  LCex
(12.64a)
y  ^y  Cex
(12.64b)
Equation (12.64a) is unforced. If the eigenvalues are all negative, the estimated state
vector error, ex, will decay to zero. The design then consists of solving for the values of L to
yield a desired characteristic equation or response for Eqs. (12.64). The characteristic
equation is found from Eqs. (12.64) to be
detλI  A  LC  0
12.65
Now we select the eigenvalues of the observer to yield stability and a desired transient
response that is faster than the controlled closed-loop response. These eigenvalues deter-
mine a characteristic equation that we set equal to Eq. (12.65) to solve for L.
Let us demonstrate the procedure for an nth-order plant represented in observer
canonical form. We ﬁrst evaluate A  LC. The form of A, L, and C can be derived by
extrapolating the form of these matrices from a third-order plant, which you can derive from
Figure 12.12. Thus,
A  LC 
an1
1
0
0
∙∙∙
0
an2
0
1
0
∙∙∙
0
..
.
..
.
..
.
..
.
..
.
..
.
a1
0
0
0
∙∙∙
1
a0
0
0
0
∙∙∙
0
2
666666666664
3
777777777775

l1
l2
..
.
ln1
ln
2
666666666664
3
777777777775
1
0
0
0
∙∙∙
0



an1  l1
1
0
0
∙∙∙
0
an2  l2
0
1
0
∙∙∙
0
..
.
..
.
..
.
..
.
..
.
..
.
a1  ln1
0
0
0
∙∙∙
1
a0  ln
0
0
0
∙∙∙
0
2
666666666664
3
777777777775
12.66
The characteristic equation for A  LC is
sn  an1  l1sn1  an2  l2sn2  ∙∙∙ a1  ln1s  a0  ln  0
12.67
Notice
the
relationship
between
Eq. (12.67)
and the characteristic equation,
detsI  A  0, for the plant, which is
sn  an1sn1  an2sn2  ∙∙∙ a1s  a0  0
12.68
670
Chapter 12
Design via State Space

Thus, if desired, Eq. (12.67) can be written by inspection if the plant is represented in
observer canonical form. We now equate Eq. (12.67) with the desired closed-loop observer
characteristic equation, which is chosen on the basis of a desired transient response.
Assume the desired characteristic equation is
sn  dn1sn1  dn2sn2  ∙∙∙ d1s  d0  0
12.69
We can now solve for the li’s by equating the coefﬁcients of Eqs. (12.67) and (12.69):
li  dni  ani
i  1; 2; . . . ; n
12.70
Let us demonstrate the design of an observer using the observer canonical form. In
subsequent sections we will show how to design the observer for other than observer
canonical form.
Example 12.5
Observer Design for Observer Canonical Form
Observer Design for Observer Canonical Form
PROBLEM: Design an observer for the plant
Gs 
s  4
s  1s  2s  5 
s  4
s3  8s2  17s  10
12.71
which is represented in observer canonical form. The observer will respond 10 times faster
than the controlled loop designed in Example 12.4.
SOLUTION:
1. First represent the estimated plant in observer canonical form. The result is shown in
Figure 12.13(a).
2. Now form the difference between the plant’s actual output, y, and the observer’s
estimated output, ^y, and add the feedback paths from this difference to the derivative of
each state variable. The result is shown in Figure 12.13(b).
3. Next ﬁnd the characteristic polynomial. The state equations for the estimated plant
shown in Figure 12.13(a) are
_^x  A^x  Bu 
8
1
0
17
0
1
10
0
0
2
64
3
75^x 
0
1
4
2
64
3
75u
(12.72a)
^y  C^x   1
0
0  ^x
(12.72b)
From Eqs. (12.64) and (12.66), the observer error is
_ex  A  LCex 
8  l1
1
0
17  l2
0
1
10  l3
0
0
2
64
3
75ex
12.73
12.5 Observer Design
671

Using Eq. (12.65), we obtain the characteristic polynomial
s3  8  l1s2  17  l2s  10  l3
12.74
4. Now evaluate the desired polynomial, set the coefﬁcients equal to those of
Eq. (12.74), and solve for the gains, li. From Eq. (12.50), the closed-loop controlled
system has dominant second-order poles at 1  j2. To make our observer 10 times
faster, we design the observer poles to be at 10  j20. We select the third pole to be
10 times the real part of the dominant second-order poles, or 100. Hence, the
desired characteristic polynomial is
s  100s2  20s  500  s3  120s2  2500s  50;000
12.75
Equating Eqs. (12.74) and (12.75), we ﬁnd l1  112; l2  2483, and l3  49;990.
A simulation of the observer with an input of rt  100t is shown in Figure 12.14.
The initial conditions of the plant were all zero, and the initial condition of ^x1 was 0.5.
Since the dominant pole of the observer is 10  j20, the expected settling time
should be about 0.4 second. It is interesting to note the slower response in Figure 12.14(b),
1
1
u
4
xˆ3
1
1
1
yˆ
–8
–17
–10
u
4
x3ˆ
1
1
x1ˆ
1
– 1
1
y
–8
–17
–10
l3
l2
l1
(a)
(b)
ˆx1
ˆx2
ˆx2
yˆ
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE 12.13
a. Signal-
ﬂow graph of a system using
observer canonical form
variables; b. additional
feedback to create observer
672
Chapter 12
Design via State Space

where the observer gains are disconnected, and the observer is simply a copy of the plant
with a different initial condition.
Students who are using MATLAB should now run ch12p4 in Appendix B.
You will learn how to use MATLAB to design an observer using pole
placement. This exercise solves Example 12.5 using MATLAB.
0.5
0.4
0.3
0.2
0.1
0
–0.1
–0.2
–0.3
–0.4
–0.5
y, y
0
0.1
0.2
0.3
Time (seconds)
y
0.5
0.4
0.3
0.2
0.1
0
–0.1
–0.2
–0.3
–0.4
–0.5
y, y
0
0.1
0.2
0.3
y
y
(a)
Time (seconds)
(b)
ˆ
ˆ
ˆ
yˆ
FIGURE 12.14
Simulation
showing response of observer:
a. closed-loop; b. open-loop
with observer gains
disconnected
Skill-Assessment Exercise 12.4
PROBLEM: Design an observer for the plant
Gs 
s  6
s  7s  8s  9
whose estimated plant is represented in state space in observer canonical form as
_^x  A^x  Bu 
24
1
0
191
0
1
504
0
0
2
664
3
775^x 
0
1
6
2
664
3
775u
^y  C^x 
1
0
0

^x
The observer will respond 10 times faster than the controlled loop designed in
Skill-Assessment Exercise 12.3.
ANSWER: L   216
9730
383;696 T, where T signiﬁes vector transpose
The complete solution is located at www.wiley.com/college/nise.
TryIt 12.3
Use MATLAB, the Control System
Toolbox, and the following statements
to solve Skill-Assessment Exercise 12.4.
A=[24 1 0
191 0 1
504 0 0]
C=[1 0 0]
pos=20
Ts=2
z=(log(pos/100))/...
(sqrt(pi^2 +...
log(pos/100)^2));
wn=4/(z*Ts);
r=roots([1,2*z*wn,...
wn^2]);
poles=10*[r' 10*...
real(r(1))]
l=acker(A',C',poles)'
12.5 Observer Design
673

In this section, we designed an observer in observer canonical form that uses the
output of a system to estimate the state variables. In the next section, we examine the
conditions under which an observer cannot be designed.
12.6 Observability
Recall that the ability to control all of the state variables is a requirement for the
design of a controller. State-variable feedback gains cannot be designed if any
state variable is uncontrollable. Uncontrollability can be viewed best with
diagonalized systems. The signal-ﬂow graph showed clearly that the
uncontrollable state variable was not connected to the control signal of the
system.
A similar concept governs our ability to create a design for an observer.
Speciﬁcally, we are using the output of a system to deduce the state
variables. If any state variable has no effect upon the output, then we cannot
evaluate this state variable by observing the output.
The ability to observe a state variable from the output is best seen from
the diagonalized system. Figure 12.15(a) shows a system where each state
variable can be observed at the output since each is connected to the output.
Figure 12.15(b) is an example of a system where all state variables cannot be
observed at the output. Here x1 is not connected to the output and could not be
estimated from a measurement of the output. We now make the following
deﬁnition based upon the previous discussion:
If the initial-state vector, x(t0), can be found from u(t) and y(t)
measured over a ﬁnite interval of time from t0, the system is said
to be observable; otherwise the system is said to be unobservable.
Simply stated, observability is the ability to deduce the state variables from a
knowledge of the input, u(t), and the output, y(t). Pole placement for an observer
is a viable design technique only for systems that are observable. This section
shows how to determine, a priori, whether or not pole placement is a viable
design technique for an observer.
Observability by Inspection
We can also explore observability from the output equation of a diagonalized
system. The output equation for the diagonalized system of Figure 12.15(a) is
y  Cx   1
1
1  x
12.76
On the other hand, the output equation for the unobservable system of
Figure 12.15(b) is
y  Cx   0
1
1  x
12.77
Notice that the ﬁrst column of Eq. (12.77) is zero. For systems represented in parallel form
with distinct eigenvalues, if any column of the output coupling matrix is zero, the diagonal
system is not observable.
The Observability Matrix
Again, as for controllability, systems represented in other than diagonalized form cannot be
reliably evaluated for observability by inspection. In order to determine observability for
systems under any representation or choice of state variables, a matrix can be derived that
must have a particular property if all state variables are to be observed at the output. We now
state the requirements for observability, including the form, property, and name of this matrix.
x1
–a4
K4
1
x2
1
x3
u
y
(b)
–a5
–a6
K5
K6
x1
1
–a1
K1
1
x2
1
x3
u
y
(a)
–a2
–a3
K2
K3
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE 12.15
Comparison of
a. observable, and b. unobservable systems
674
Chapter 12
Design via State Space

An nth-order plant whose state and output equations are, respectively,
_x  Ax  Bu
(12.78a)
y  Cx
(12.78b)
is completely observable7 if the matrix
OM 
C
CA
..
.
CAn1
2
6666664
3
7777775
12.79
is of rank n, where OM is called the observability matrix.8
The following two examples illustrate the use of the observability matrix.
Example 12.6
Observability via the Observability Matrix
Observability via the Observability Matrix
PROBLEM: Determine if the system of Figure 12.16 is observable.
SOLUTION: The state and output equations for the system are
_x  Ax  Bu 
0
1
0
0
0
1
4
3
2
2
64
3
75x 
0
0
1
2
64
3
75u
(12.80a)
y  Cx   0
5
1  x
(12.80b)
x3
1
u  
x1
y
–2
–3
–4
x2
5
1
1
s
1
s
1
s
FIGURE 12.16
System of
Example 12.6
7 Completely observable means that all state variables are observable. This textbook uses observable to mean
completely observable.
8 See Ogata (1990: 706–708) for a derivation.
12.6 Observability
675

Thus, the observability matrix, OM, is
OM 
C
CA
CA2
2
64
3
75 
0
5
1
4
3
3
12
13
9
2
64
3
75
12.81
Since the determinant of OM equals 344, OM is of full rank equal to 3. The system is thus
observable.
You might have been misled and concluded by inspection that the system is
unobservable because the state variable x1 is not fed directly to the output. Remember
that conclusions about observability by inspection are valid only for diagonalized
systems that have distinct eigenvalues.
Students who are using MATLAB should now run ch12p5 in Appendix B.
You will learn how to use MATLAB to test a system for observability.
This exercise solves Example 12.6 using MATLAB.
Example 12.7
Unobservability via the Observability Matrix
Unobservability via the Observability Matrix
PROBLEM: Determine whether the system of Figure 12.17 is observable.
SOLUTION: The state and output equations for the system are
_x  Ax  Bu 
0
1
5
21=4
"
#
x 
0
1
"
#
u
(12.82a)
y  Cx   5
4 x
(12.82b)
The observability matrix, OM, for this system is
OM 
C
CA
"
#

5
4
20
16
"
#
12.83
1
x2
u
x1
4
y
–5
– 21
4
5
1
s
1
s
FIGURE 12.17
System of Example 12.7
676
Chapter 12
Design via State Space

Now that we have discussed observability and the observability matrix, we are
ready to talk about the design of an observer for a plant not represented in observer
canonical form.
12.7 Alternative Approaches to Observer Design
Earlier in the chapter, we discussed how to design controllers for systems not
represented in phase-variable form. One method is to match the coefﬁcients of
det sI  A  BK with the coefﬁcients of the desired characteristic polynomial.
This method can yield difﬁcult calculations for higher-order systems. Another method
is to transform the plant to phase-variable form, design the controller, and transfer the
design back to its original representation. The transformations were derived from the
controllability matrix.
In this section, we use a similar idea for the design of observers not represented in
observer canonical form. One method is to match the coefﬁcients of detsI  A  LC
with the coefﬁcients of the desired characteristic polynomial. Again, this method can yield
difﬁcult calculations for higher-order systems. Another method is ﬁrst to transform the plant
to observer canonical form so that the design equations are simple, then perform the design
in observer canonical form, and ﬁnally transform the design back to the original
representation.
Let us pursue this second method. First we will derive the transformation between a
system representation and its representation in observer canonical form. Assume a plant not
represented in observer canonical form,
_z  Az  Bu
(12.84a)
y  Cz
(12.84b)
The determinant for this observability matrix equals 0. Thus, the observability matrix does
not have full rank, and the system is not observable.
Again, you might conclude by inspection that the system is observable because all
states feed the output. Remember that observability by inspection is valid only for a
diagonalized representation of a system with distinct eigenvalues.
Skill-Assessment Exercise 12.5
PROBLEM: Determine whether the system
_x  Ax  Bu 
2
1
3
0
2
1
7
8
9
2
64
3
75 x 
2
1
2
2
64
3
75 u
y  Cx   4
6
8  x
is observable.
ANSWER: Observable
The complete solution is located at www.wiley.com/college/nise.
TryIt 12.4
Use MATLAB, the Control System
Toolbox, and the following statements to
solve Skill-Assessment Exercise 12.5.
A=[2
1
3
0 2
1
7 8 9]
C=[4 6 8]
Om=obsv(A,C)
Rank=rank(Om)
12.7 Alternative Approaches to Observer Design
677

whose observability matrix is
OMz 
C
CA
CA2
..
.
CAn2
CAn1
2
66666666664
3
77777777775
12.85
Now assume that the system can be transformed to the observer canonical form, x,
with the transformation
z  Px
12.86
Substituting Eq. (12.86) into Eqs. (12.84) and premultiplying the state equation by P1, we
ﬁnd that the state equations in observer canonical form are
_x  P1APx  P1Bu
(12.87a)
y  CPx
(12.87b)
whose observability matrix, OMx, is
OMx 
CP
CPP1AP
CPP1APP1AP
...
CPP1APP1AP ∙∙∙P1AP
2
666666664
3
777777775

C
CA
CA2
...
CAn1
2
666666664
3
777777775
P
12.88
Substituting Eq. (12.85) into (12.88) and solving for P, we obtain
P  O
1
Mz OMx
12.89
Thus, the transformation, P, can be found from the two observability matrices.
After transforming the plant to observer canonical form, we design the feedback
gains, Lx, as in Section 12.5. Using the matrices from Eqs. (12.87) and the form suggested
by Eqs. (12.64), we have
_ex  P1AP  LxCPex
(12.90a)
y  ^y  CPex
(12.90b)
Since x  P1z, and ^x  P1^z, then ex  x  ^x  P1ez. Substituting ex  P1ez into
Eqs. (12.90) transforms Eqs. (12.90) back to the original representation. The result is
_ez  A  PLxCez
(12.91a)
y  ^y  Cez
(12.91b)
678
Chapter 12
Design via State Space

Comparing Eq. (12.91a) to (12.64a), we see that the observer gain vector is
Lz  LPx
12.92
We now demonstrate the design of an observer for a plant not represented in observer
canonical form. The ﬁrst example uses transformations to and from observer canonical
form. The second example matches coefﬁcients without the transformation. This method,
however, can become difﬁcult if the system order is high.
Example 12.8
Observer Design by Transformation
Observer Design by Transformation
PROBLEM: Design an observer for the plant
Gs 
1
s  1s  2s  5
12.93
represented in cascade form. The closed-loop performance of the observer is governed
by the characteristic polynomial used in Example 12.5: s3  120s2  2500s  50;000.
SOLUTION: First represent the plant in its original cascade form.
_z  Az  Bu 
5
1
0
0
2
1
0
0
1
2
64
3
75 z 
0
0
1
2
64
3
75 u
(12.94a)
y  Cz   1
0
0  z
(12.94b)
The observability matrix, OMz, is
OMz 
C
CA
CA2
2
64
3
75 
1
0
0
5
1
0
25
7
1
2
64
3
75
12.95
whose determinant equals 1. Hence, the plant is observable.
The characteristic equation for the plant is
det sI  A  s3  8s2  17s  10  0
12.96
We can use the coefﬁcients of this characteristic polynomial to form the observer
canonical form
_x  Axx  Bxu
(12.97a)
y  Cxx
(12.97b)
where
Ax 
8
1
0
17
0
1
10
0
0
2
664
3
775;
Cx 
1
0
0


12.98
12.7 Alternative Approaches to Observer Design
679

The observability matrix for the observer canonical form is
OMx 
Cx
CxAx
CxA2
x
2
64
3
75 
1
0
0
8
1
0
47
8
1
2
64
3
75
12.99
We now design the observer for the observer canonical form. First form Ax  LxCx,
Ax  LxCx 
8
1
0
17
0
1
10
0
0
2
64
3
75 
l1
l2
l3
2
64
3
75 1
0
0



8  l1
1
0
17  l2
0
1
10  l3
0
0
2
64
3
75
12.100
whose characteristic polynomial is
detsI  Ax  LxCx  s3  8  l1s2  17  l2s  10  l3
12.101
Equating this polynomial to the desired closed-loop observer characteristic equation,
s3  120s2  2500s  50;000, we ﬁnd
Lx 
112
2483
49; 990
2
64
3
75
12.102
Now transform the design back to the original representation. Using Eq. (12.89), the
transformation matrix is
P  O
1
Mz OMx 
1
0
0
3
1
0
1
1
1
2
64
3
75
12.103
1
s
1
–1
u
1
s
1
1
s
1
1
y
1
–2
–5
1
1
s
1
1
–1
–2
–5
s
1
s
1
1
1
47,619
2,147
112
–1
yˆ
ez
Observer
Plant
z3
z2
z1
z3
z2
z1
             ˆ
ˆ
ˆ
FIGURE 12.18
Observer
design
680
Chapter 12
Design via State Space

Transforming Lx to the original representation, we obtain
Lz  PLx 
112
2147
47;619
2
64
3
75
12.104
The ﬁnal conﬁguration is shown in Figure 12.18.
A simulation of the observer is shown in Figure 12.19(a). To demonstrate the effect
of the observer design, Figure 12.19(b) shows the reduced speed if the observer is simply a
copy of the plant and all observer feedback paths are disconnected.
Students who are using MATLAB should now run ch12p6 in Appendix B.
You will learn how to use MATLAB to design an observer for a plant
not represented in observer canonical form. You will see that
MATLAB does not require transformation to observer canonical
form. This exercise solves Example 12.8 using MATLAB.
0
1
2
3 
Time (seconds) 
y
(a)
y
y
y
y, y
0
1
2
3 
Time (seconds)
(b)
0
0.6
0.4
0.2
–0.6
–0.4
–0.2
0
0.6
0.4
0.2
–0.6
–0.4
–0.2
ˆ
ˆ
y, yˆ
ˆ
FIGURE 12.19
Observer
design step response simulation:
a. closed-loop observer;
b. open-loop observer with
observer gains disconnected
Example 12.9
Observer Design by Matching Coefficients
Observer Design by Matching Coefficients
PROBLEM: A time-scaled model for the body’s blood glucose level is shown in
Eq. (12.105). The output is the deviation in glucose concentration from its mean
value in mg/100 ml, and the input is the intravenous glucose injection rate in g/kg/hr
(Milhorn, 1966).
Gs 
407s  0:916
s  1:27s  2:69
12.105
12.7 Alternative Approaches to Observer Design
681

Design an observer for the phase variables with a transient response described by
ζ  0:7 and ωn  100.
SOLUTION: We can ﬁrst model the plant in phase-variable form. The result is shown in
Figure 12.20(a).
For the plant,
A 
0
1
3:42
3:96
"
#
;
C 
372:81
407


12.106
Calculation of the observability matrix, OM   C
CA T, shows that the plant is observable
and we can proceed with the design. Next ﬁnd the characteristic equation of the observer. First
we have
A  LC 
0
1
3:42
3:96
"
#

l1
l2
"
#
372:81
407



372:81l1
1  407l1
3:42  372:81l2
3:96  407l2
"
#
12.107
u
1
x2
x1
372.81
y
–3.96
–3.42
407
(  )
a
u
1
x2
1
372.81
yˆ
–1
1
y
407
–38.397
35.506
–3.42
–3.96
(  )
b
ˆx1
ˆ
1
s
1
s
1
s
1
s
FIGURE 12.20
a. Plant;
b. designed observer for
Example 12.9
682
Chapter 12
Design via State Space

Now evaluate det λI  A  LC  0 in order to obtain the characteristic equation:
det λI  A  LC

  det
λ  372:81l1
1  407l1
3:42  372:81l2
λ  3:96  407l2
"
#
 λ2  3:96  372:81l1  407l2λ  3:42  84:39l1  372:81l2
 0
12.108
From the problem statement, we want ζ  0:7 and ωn  100. Thus,
λ2  140λ  10;000  0
12.109
Comparing the coefﬁcients of Eqs. (12.108) and (12.109), we ﬁnd the values l1 and l2 to be
38.397 and 35.506, respectively. Using Eq. (12.60), where
A 
0
1
3:42
3:96
"
#
; B 
0
1
"
#
; C 
372:81
407


;
L 
38:397
35:506
"
#
12.110
the observer is implemented and shown in Figure 12.20(b).
Skill-Assessment Exercise 12.6
PROBLEM: Design an observer for the plant
Gs 
1
s  7s  8s  9
whose estimated plant is represented in state space in cascade form as
_^z  A^z  Bu 
7
1
0
0
8
1
0
0
9
2
664
3
775^z 
0
0
1
2
664
3
775u
^y  C^x 
1
0
0

^z
The closed-loop step response of the observer is to have 10% overshoot with a 0.1 second
settling time.
ANSWER:
Lz 
456
28;640
1:54  106
2
64
3
75
The complete solution is located at www.wiley.com/college/nise.
12.7 Alternative Approaches to Observer Design
683

Now that we have explored transient response design using state-space techniques, let
us turn to the design of steady-state error characteristics.
12.8 Steady-State Error Design via Integral Control
In Section 7.8, we discussed how to analyze systems represented in state space for steady-state
error. In this section, we discuss how to design systems represented in state space for
steady-state error.
Consider Figure 12.21. The previously designed controller discussed in Section 12.2
is shown inside the dashed box. A feedback path from the output has been added to form the
error, e, which is fed forward to the controlled plant via an integrator. The integrator
increases the system type and reduces the previous ﬁnite error to zero. We will now derive
the form of the state equations for the system of Figure 12.21 and then use that form to
design a controller. Thus, we will be able to design a system for zero steady-state error for a
step input as well as design the desired transient response.
An additional state variable, xN, has been added at the output of the leftmost integrator.
The error is the derivative of this variable. Now, from Figure 12.21,
_xN  r  Cx
12.111
Writing the state equations from Figure 12.21, we have
_x  Ax  Bu
(12.112a)
_xN  Cx  r
(12.112b)
y  Cx
(12.112c)
Equations (12.112) can be written as augmented vectors and matrices. Hence,
_x
_xN
"
#

A
0
C
0
"
#
x
xN
"
#

B
0
"
#
u 
0
1
"
#
r
(12.113a)
y 
C
0


x
xN


(12.113b)
But
u  Kx  KexN   K
Ke


x
xN


12.114
r
e
B
C
Ke
A
–K
xN
+
+
+
+
u
x
x
y
+
–
∫
∫
FIGURE 12.21
Integral
control for steady-state error
design
684
Chapter 12
Design via State Space

Substituting Eq. (12.114) into (12.113a) and simplifying, we obtain
_x
_xN
"
#

A  BK
BKe
C
0
"
#
x
xN
"
#

0
1
"
#
r
(12.115a)
y 
C
0


x
xN
"
#
(12.115b)
Thus, the system type has been increased, and we can use the characteristic equation
associated with Eq. (12.115a) to design K and Ke to yield the desired transient response.
Realize, we now have an additional pole to place. The effect on the transient response of any
closed-loop zeros in the ﬁnal design must also be taken into consideration. One possible
assumption is that the closed-loop zeros will be the same as those of the open-loop plant.
This assumption, which of course must be checked, suggests placing higher-order poles at
the closed-loop zero locations. Let us demonstrate with an example.
Example 12.10
Design of Integral Control
Design of Integral Control
PROBLEM: Consider the plant of Eqs. (12.116):
_x 
0
1
3
5


x 
0
1


u
(12.116a)
y   1
0  x
(12.116b)
a. Design a controller without integral control to yield a 10% overshoot and a settling time
of 0.5 second. Evaluate the steady-state error for a unit step input.
b. Repeat the design of Part a using integral control. Evaluate the steady-state error for a
unit step input.
SOLUTION:
a.
Using the requirements for settling time and percent overshoot, we ﬁnd that the
desired characteristic polynomial is
s2  16s  183:1
12.117
Since the plant is represented in phase-variable form, the characteristic polynomial for the
controlled plant with state-variable feedback is
s2  5  k2s  3  k1
12.118
Equating the coefﬁcients of Eqs. (12.117) and (12.118), we have
K   k1
k2    180:1
11 
12.119
12.8 Steady-State Error Design via Integral Control
685

From Eqs. (12.3), the controlled plant with state-variable feedback represented in phase-
variable form is
_x  A  BKx  Br 
0
1
183:1
16


x 
0
1


r
(12.120a)
y  Cx   1
0  x
(12.120b)
Using Eq. (7.96), we ﬁnd that the steady-state error for a step input is
e∞  1  CA  BK1B
 1  1
0


0
1
183:1
16
"
#1 0
1
"
#
 0:995
12.121
b. We now use Eqs. (12.115) to represent the integral-controlled plant as follows:
_x1
_x2
_xN
2
664
3
775 
0
1
3
5
"
#

0
1
"
#
k1
k2


 
!
0
1
"
#
Ke
 1
0


0
2
664
3
775
x1
x2
xN
2
664
3
775 
0
0
1
2
664
3
775r

0
1
0
3  k1
5  k2
Ke
1
0
0
2
664
3
775
x1
x2
xN
2
664
3
775 
0
0
1
2
664
3
775r
(12.122a)
y 
1
0
0


x1
x2
xN
2
4
3
5
(12.122b)
Using Eq. (3.73) and the plant of Eqs. (12.116), we ﬁnd that the transfer function of
the plant is Gs  1=s2  5s  3. The desired characteristic polynomial for the closed-
loop integral-controlled system is shown in Eq. (12.117). Since the plant has no zeros, we
assume no zeros for the closed-loop system and augment Eq. (12.117) with a third pole,
s  100, which has a real part greater than ﬁve times that of the desired dominant second-
order poles. The desired third-order closed-loop system characteristic polynomial is
s  100s2  16s  183:1  s3  116s2  1783:1s  18;310
12.123
The characteristic polynomial for the system of Eqs. (12.112) is
s3  5  k2s2  3  k1s  Ke
12.124
Matching coefﬁcients from Eqs. (12.123) and (12.124), we obtain
k1  1780:1
(12.125a)
k2  111
(12.125b)
ke  18;310
(12.125c)
686
Chapter 12
Design via State Space

Now that we have designed controllers and observers for transient response and
steady-state error, we summarize the chapter with a case study demonstrating the design
process.
Substituting these values into Eqs. (12.122) yields this closed-loop integral-controlled
system:
_x1
_x2
_xN
2
64
3
75
0
1
0
1783:1
116
18;310
1
0
0
2
4
3
5
x1
x2
xN
2
4
3
5 
0
0
1
2
4
3
5r
(12.126a)
y 
1
0
0


x1
x2
xN
2
4
3
5
(12.126b)
In order to check our assumption for the zero, we now apply Eq. (3.73) to
Eqs. (12.126) and ﬁnd the closed-loop transfer function to be
Ts 
18;310
s3  116s2  1783:1s  18;310
12.127
Since the transfer function matches our design, we have the desired transient response.
Now let us ﬁnd the steady-state error for a unit step input. Applying Eq. (7.96) to
Eqs. (12.126), we obtain
e∞  1  1
0
0


0
1
0
1783:1
116
18;310
1
0
0
2
64
3
75
1
0
0
1
2
64
3
75  0
12.128
Thus, the system behaves like a Type 1 system.
Skill-Assessment Exercise 12.7
PROBLEM: Design an integral controller for the plant
_x 
0
1
7
9
"
#
x 
0
1
"
#
u
y 
4
1


x
to yield a step response with 10% overshoot, a peak time of 2 seconds, and zero
steady-state error.
ANSWER: K   2:21
2:7 ; Ke  3:79
The complete solution is located at www.wiley.com/college/nise.
12.8 Steady-State Error Design via Integral Control
687

Case Study
Antenna Control: Design of Controller and Observer
Antenna Control: Design of Controller and Observer
In this case study, we use our ongoing antenna azimuth position control system to
demonstrate the combined design of a controller and an observer. We will assume that the
states are not available and must be estimated from the output. The block diagram of
the original system is shown on the front endpapers, Conﬁguration 1. Arbitrarily setting
the preampliﬁer gain to 200 and removing the existing feedback, the forward transfer
function is simpliﬁed to that shown in Figure 12.22.
The case study will specify a transient response for the system and a faster transient
response for the observer. The ﬁnal design conﬁguration will consist of the plant, the
observer, and the controller, as shown conceptually in Figure 12.23. The design of the
observer and the controller will be separate.
PROBLEM: Using the simpliﬁed block diagram of the plant for the antenna azimuth
position control system shown in Figure 12.22, design a controller to yield a 10% overshoot
and a settling time of 1 second. Place the third pole 10 times as far from the imaginary axis
as the second-order dominant pair.
Assume that the state variables of the plant are not accessible and design an observer
to estimate the states. The desired transient response for the observer is a 10% overshoot
1325
s(s + 1.71)(s + 100)
U(s) = E(s)
Y(s) =   o(s)
θ
FIGURE 12.22
Simpliﬁed block diagram of antenna control system shown on the front
endpapers (Conﬁguration 1) with K  200
C
A
x
x
r = 0
+
+
B
+
u
B
Plant
A
x
x
Observer
+ +
–K
C
y
+
ye
Controller
+
+
–
ˆ
u
y
ˆ
L
ˆ
∫
∫
FIGURE 12.23
Conceptual state-space design conﬁguration, showing plant, observer, and
controller
688
Chapter 12
Design via State Space

and a natural frequency 10 times as great as the system response above. As in the case of the
controller, place the third pole 10 times as far from the imaginary axis as the observer’s
dominant second-order pair.
SOLUTION: Controller Design: We ﬁrst design the controller by ﬁnding the desired
characteristic equation. A 10% overshoot and a settling time of 1 second yield ζ  0:591
and
ωn  6:77.
Thus,
the
characteristic
equation
for
the
dominant
poles
is
s2  8s  45:8  0, where the dominant poles are located at 4  j5:46. The third
pole will be 10 times as far from the imaginary axis, or at 40. Hence, the desired
characteristic equation for the closed-loop system is
s2  8s  45:8s  40  s3  48s2  365:8s  1832  0
12.129
Next we ﬁnd the actual characteristic equation of the closed-loop system. The ﬁrst
step is to model the closed-loop system in state space and then ﬁnd its characteristic
equation. From Figure 12.22, the transfer function of the plant is
Gs 
1325
ss  1:71s  100 
1325
ss2  101:71s  171
12.130
Using phase variables, this transfer function is converted to the signal-ﬂow graph shown
in Figure 12.24, and the state equations are written as follows:
_x 
0
1
0
0
0
1
0
171
101:71
2
64
3
75x 
0
0
1
2
64
3
75u  Ax  Bu
(12.131a)
y   1325
0
0 x  Cx
(12.131b)
We now pause in our design to evaluate the controllability of the system. The
controllability matrix, CM, is
CM 
B
AB
A2B


0
0
1
0
1
101:71
1
101:71
10;173:92
2
64
3
75
12.132
The determinant of CM is 1; thus, the system is controllable.
Continuing with the design of the controller, we show the controller’s conﬁguration
with the feedback from all state variables in Figure 12.25. We now ﬁnd the characteristic
u
1
x3
x2
x1
1325
y
–101.71
–171
1
s
1
s
1
s
FIGURE 12.24
Signal-ﬂow graph for Gs  1325=ss2  101:71s  171
Case Study
689

equation of the system of Figure 12.25. From Eq. (12.7) and Eq. (12.131a), the system
matrix, A  BK, is
A  BK 
0
1
0
0
0
1
k1
171  k2
101:71  k3
2
64
3
75
12.133
Thus, the closed-loop system’s characteristic equation is
detsI  A  BK  s3  101:71  k3s2  171  k2s  k1  0
12.134
Matching the coefﬁcients of Eq. (12.129) with those of Eq. (12.134), we evaluate the ki’s
as follows:
k1  1832
(12.135a)
k2  194:8
(12.135b)
k3  53:71
(12.135c)
Observer Design: Before designing the observer, we test the system for observability.
Using the A and C matrices from Eqs. (12.131), the observability matrix, OM, is
OM 
C
CA
CA2
2
664
3
775 
1325
0
0
0
1325
0
0
0
1325
2
664
3
775
12.136
The determinant of OM is 13253. Thus, OM is of rank 3, and the system is observable.
We now proceed to design the observer. Since the order of the system is not high, we
will design the observer directly without ﬁrst converting to observer canonical form. From
Eq. (12.64a) we need ﬁrst to ﬁnd A  LC. A and C from Eqs. (12.131) along with
L 
l1
l2
l3
2
64
3
75
12.137
u
1
x3
x2
x1
1325
y
–101.71
–171
–k1
–k2
–k3
1
s
1
s
1
s
FIGURE 12.25
Plant with state-variable feedback for controller design
690
Chapter 12
Design via State Space

are used to evaluate A  LC as follows:
A  LC 
1325l1
1
0
1325l2
0
1
1325l3
171
101:71
2
64
3
75
12.138
The characteristic equation for the observer is now evaluated as
detλI  A  LC  λ3  1325l1  101:71 λ2
 134;800l1  1325l2  171 λ
 226;600l1  134;800l2  1325l3
 0
12.139
From the problem statement, the poles of the observer are to be placed to yield a
10% overshoot and a natural frequency 10 times that of the system’s dominant pair of
poles. Thus, the observer’s dominant poles yield s2  2  0:591  67:7s  67:72 
s2  80s  4583. The real part of the roots of this polynomial is 40. The third pole is
then placed 10 times farther from the imaginary axis at 400. The composite characteristic
equation for the observer is
s2  80s  4583s  400  s3  480s2  36;580s  1;833;000  0
12.140
Matching coefﬁcients from Eqs. (12.139) and (12.140), we solve for the observer gains:
l1  0:286
(12.141a)
l2  1:57
(12.141b)
l3  1494
(12.141c)
Figure 12.26, which follows the general conﬁguration of Figure 12.23, shows the
completed design, including the controller and the observer.
The results of the design are shown in Figure 12.27. Figure 12.27(a) shows the
impulse response of the closed-loop system without any difference between the plant and
its modeling as an observer. The undershoot and settling time approximately meet the
requirements set forth in the problem statement of 10% and 1 second, respectively. In
Figure 12.27(b), we see the response designed into the observer. An initial condition of
0.006 was given to x1 in the plant to make the modeling of the plant and observer different.
Notice that the observer’s response follows the plant’s response by the time 0.06 second is
reached.
CHALLENGE: You are now given a case study to test your knowledge of this chapter’s
objectives: You are given the antenna azimuth position control system shown on the
front endpapers, Conﬁguration 3. If the preampliﬁer gain K  20, do the following:
a. Design a controller to yield 15% overshoot and a settling time of 2 seconds. Place the
third pole 10 times as far from the imaginary axis as the second-order dominant pole
pair. Use physical variables as follows: power ampliﬁer output, motor angular velocity,
and motor displacement.
b. Redraw the schematic shown on the front endpapers, showing a tachometer that yields
rate feedback along with any added gains or attenuators required to implement the
state-variable feedback gains.
Case Study
691

1.0
–1.0
0
1.0
1.6
2.0
0.5
–
0
0.5
1.5
2.0
2.5
0.4
0.6
0.8
1.2
1.4
1.8
0.2
Time (seconds)
(a)
y,yˆ
Time (seconds)
(b)
y,yˆ
0.05 0.06 0.07 0.08 0.09
0.1
0
y
yˆ
0.04
0.03
0.02
0.01
0
2
4
6
8
10
12
14
16
18
FIGURE 12.27
Designed
response of antenna azimuth
position control system:
a. impulse response—plant and
observer with the same initial
conditions, x10  ^x10  0;
b. portion of impulse
response—plant and observer
with different initial conditions,
^x10  0:006 for the plant,
^x10  0 for the observer
1
u
1
1
yˆ
1325
–1
x3ˆ
x2ˆ
x1ˆ
–101.71
–171
l2 = –1.57
l1 = 0.286
3l = 1494
Observer
–k1 = –1832
Controller
Plant
y
1
1
–k2 = –194.8
–k3 = 53.71
1
s
1
s
1
s
FIGURE 12.26
Completed
state-space design for the
antenna azimuth position
control system, showing
controller and observer
692
Chapter 12
Design via State Space

Summary
This chapter has followed the path established by Chapters 9 and 11—control system
design. Chapter 9 used root locus techniques to design a control system with a desired
transient response. Sinusoidal frequency response techniques for design were covered in
Chapter 11, and in this chapter we used state-space design techniques.
State-space design consists of specifying the system’s desired pole locations and then
designing a controller consisting of state-variable feedback gains to meet these requirements.
If the state variables are not available, an observer is designed to emulate the plant and provide
estimated state variables.
Controller design consists of feeding back the state variables to the input, u, of the
system through speciﬁed gains. The values of these gains are found by matching the
coefﬁcients of the system’s characteristic equation with the coefﬁcients of the desired
characteristic equation. In some cases, the control signal, u, cannot affect one or more state
variables. We call such a system uncontrollable. For this system, a total design is not
possible. Using the controllability matrix, a designer can tell whether or not a system is
controllable prior to the design.
Observer design consists of feeding back the error between the actual output and
the estimated output. This error is fed back through speciﬁed gains to the derivatives of the
estimated state variables. The values of these gains are also found by matching the
coefﬁcients of the observer’s characteristic equation with the coefﬁcients of the desired
characteristic equation. The response of the observer is designed to be faster than that of
the controller, so the estimated state variables effectively appear instantaneously at the
controller. For some systems, the state variables cannot be deduced from the output of
the system, as is required by the observer. We call such systems unobservable. Using the
observability matrix, the designer can tell whether or not a system is observable. Observers
can be designed only for observable systems.
Finally, we discussed ways of improving the steady-state error performance of
systems represented in state space. The addition of an integration before the controlled
plant yields improvement in the steady-state error. In this chapter, this additional integration
was incorporated into the controller design.
Three advantages of state-space design are apparent. First, in contrast to the root locus
method, all pole locations can be speciﬁed to ensure a negligible effect of the nondominant
poles upon the transient response. With the root locus, we were forced to justify an assumption
that the nondominant poles did not appreciably affect the transient response. We were not
always able to do so. Second, with the use of an observer, we are no longer forced to acquire
the actual system variables for feedback. The advantage here is that sometimes the variables
cannot be physically accessed, or it may be too expensive to provide that access. Finally, the
methods shown lend themselves to design automation using the digital computer.
c. Assume that the tachometer is not available to provide rate feedback. Design an
observer to estimate the physical variables' states. The observer will respond with 10%
overshoot and a natural frequency 10 times as great as the system response. Place the
observer’s third pole 10 times as far from the imaginary axis as the observer’s
dominant second-order pole pair.
d. Redraw the schematic on the front endpapers, showing the implementation of the
controller and the observer.
e. Repeat Parts a and c using MATLAB.
Summary
693

A disadvantage of the design methods covered in this chapter is the designer’s
inability to design the location of open- or closed-loop zeros that may affect the transient
response. In root locus or frequency response design, the zeros of the lag or lead
compensator can be speciﬁed. Another disadvantage of state-space methods concerns
the designer’s ability to relate all pole locations to the desired response; this relationship
is not always apparent. Also, once the design is completed, we may not be satisﬁed with
the sensitivity to parameter changes.
Finally, as previously discussed, state-space techniques do not satisfy our intuition as
much as root locus techniques, where the effect of parameter changes can be immediately
seen as changes in closed-loop pole locations.
In the next chapter we return to the frequency domain and design digital systems using
gain adjustment and cascade compensation.
Review Questions
1. Brieﬂy describe an advantage that state-space techniques have over root locus
techniques in the placement of closed-loop poles for transient response design.
2. Brieﬂy describe the design procedure for a controller.
3. Different signal-ﬂow graphs can represent the same system. Which form facilitates
the calculation of the variable gains during controller design?
4. In order to effect a complete controller design, a system must be controllable.
Describe the physical meaning of controllability.
5. Under what conditions can inspection of the signal-ﬂow graph of a system yield
immediate determination of controllability?
6. In order to determine controllability mathematically, the controllability matrix is
formed, and its rank evaluated. What is the ﬁnal step in determining controllability if
the controllability matrix is a square matrix?
7. What is an observer?
8. Under what conditions would you use an observer in your state-space design of a
control system?
9. Brieﬂy describe the conﬁguration of an observer.
10. What plant representation lends itself to easier design of an observer?
11. Brieﬂy describe the design technique for an observer, given the conﬁguration you
described in Question 9.
12. Compare the major difference in the transient response of an observer to that of a
controller. Why does this difference exist?
13. From what equation do we ﬁnd the characteristic equation of the controller-
compensated system?
14. From what equation do we ﬁnd the characteristic equation of the observer?
15. In order to effect a complete observer design, a system must be observable. Describe
the physical meaning of observability.
16. Under what conditions can inspection of the signal-ﬂow graph of a system yield
immediate determination of observability?
17. In order to determine observability mathematically, the observability matrix is
formed and its rank evaluated. What is the ﬁnal step in determining observability
if the observability matrix is a square matrix?
694
Chapter 12
Design via State Space

Problems
1. Consider the following open-loop transfer functions,
where Gs  Ys=Us. Y(s) is the Laplace transform
of the output, and U(s) is the Laplace transform of the
input control signal:
i. Gs  s  3
s  42
ii. Gs 
s
s  5s  7
iii. Gs 
20ss  7
s  3s  7s  9
iv. Gs 
30s  2s  3
s  4s  5s  6
v. Gs 
s2  8s  15
s2  4s  10s2  3s  12
For each of these transfer functions, do the following:
[Section: 12.2]
a. Draw the signal-ﬂow graph in phase-variable form.
b. Add state-variable feedback to the signal-ﬂow
graph.
c. For each closed-loop signal-ﬂow graph, write the
state equations.
d. Write, by inspection, the closed-loop transfer
function, T(s), for your closed-loop signal-ﬂow
graphs.
e. Verify your answers for T(s) by ﬁnding the closed-
loop transfer functions from the state equations
and Eq. (3.73).
2. The following open-loop transfer functions can be
represented by signal-ﬂow graphs in cascade form.
i. Gs  30s  2s  7
ss  3s  5
ii. Gs 
5s2  3s  7
s  2s2  2s  10
For each, do the following: [Section: 12.4]
a. Drawthesignal-ﬂowgraphandshowthestate-variable
feedback.
b. Find the closed-loop transfer function with state-
variable feedback.
3. The following open-loop transfer functions can be
represented by signal-ﬂow graphs in parallel form.
i. Gs  50s2  7s  25
ss  10s  20
ii. Gs 
50s  3s  4
s  5s  6s  7
For each, do the following: [Section: 12.4]
a. Drawthesignal-ﬂowgraphandshowthestate-variable
feedback.
b. Find the closed-loop transfer function with state-
variable feedback.
4. Given the following open-loop plant, [Section: 12.2]
Gs 
50
s  1s  3s  10
design a controller to yield a 10% overshoot and
a settling time of 0.5 second. Place the third pole
10 times as far from the imaginary axis as the dominant
pole pair. Use the phase variables for state-variable
feedback.
5. Section 12.2 showed that controller design is easier to
implementiftheuncompensatedsystemisrepresentedin
phase-variable form with its typical lower companion
matrix. We alluded to the fact that the design can just as
easily progress using the controller canonical form with
its upper companion matrix. [Section: 12.2]
a. Redo the general controller design covered in
Section 12.2, assuming that the plant is represented
in controller canonical form rather than phase-
variable form.
b. Apply your derivation to Example 12.1 if the
uncompensated plant is represented in controller
canonical form.
6. Given the following open-loop plant: [Section: 12.2]
Gs  100s  2s  25
s  1s  3s  5
design a controller to yield 10% overshoot with a peak
time of 0.5 second. Use the controller canonical form for
state-variable feedback.
7. Given the following open-loop plant: [Section: 12.2]
Gs 
20s  2
ss  5s  7
designacontrollertoyielda10%overshootandasettling
time of 2 seconds. Place the third pole 10 times as far
from the imaginary axis as the dominant pole pair. Use
the phase variables for state-variable feedback.
8. Repeat Problem 4 assuming that the plant is represented
in the cascade form. Do not convert to phase-variable
form. [Section: 12.4]
9. Repeat Problem 7 assuming that the plant is repre-
sented in the parallel form. Do not convert to
phase-variable form. [Section: 12.4]
Problems
695

10. a. Given the plant shown in Figure P12.1, what
relationship exists between b1 and b2 to make the
system uncontrollable?
b. What values of b2 will make the system un-
controllable if b1 = 1? [Section: 12.3]
y
u
–1
x1
1
x2
b2
1
–5
b1
–3
1
s
1
s
FIGURE P12.1
11. For each of the plants represented by signal-ﬂow graphs
in Figure P12.2, determine the controllability. If the
controllability can be determined by inspection, state
that it can and then verify your conclusions using
the controllability matrix. [Section: 12.3]
12. Use MATLAB to determine the
controllability of the systems
of Figure P12.2(d) and (f).
13. In Section 12.4, we discussed how to design a con-
troller for systems not represented in phase-variable
form with its typical lower companion matrix. We
described how to convert the system to phase-variable
form, design the controller, and convert back to the
original representation. This technique can be applied
just as easily if the original representation is converted
to controller canonical form with its typical upper
companion matrix. Redo Example 12.4 in the text
by designing the controller after converting the
uncompensated
plant
to
controller
canonical
form. [Section: 12.4]
5
5
x1
x2
y
–2
5
x3
1
–2
–3
1
u
1
x2
1
x1
5
y
5
x3
–3
1
–2
–2
u
1
(a)
(b)
x3
–6
1
1
1
1
1
y
u
x2
x1
–5
–4
y
u
–6
–5
x1
1
1
x2
–2
1
1
x1
y
1
x2
1
x3
1
2
–3
u
–4
(c)
1
–5
–3
x3
x2
1
1
1
y
u
–4
x1
1
(d)
(e)
 (f)
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
1
s
FIGURE P12.2
696
Chapter 12
Design via State Space

14. Consider the following transfer function:
Gs 
s  6
s  3s  8s  10
If the system is represented in cascade form, as shown
in Figure P12.3, design a controller to yield a closed-
loop response of 10% overshoot with a settling time of
1 second. Design the controller by ﬁrst transforming
the plant to phase variables. [Section: 12.4]
15. Use MATLAB to design the
controller gains for the
system given in Problem 14.
16. Repeat Problem 14 assuming that the plant is
represented in parallel form. [Section: 12.4]
17. The open-loop system of Problem 14 is represented as
shown in Figure P12.4. If the output of each block is
assigned to be a state variable, design the controller
gains
for
feedback
from
these
state
variables.
[Section: 12.4]
18. If an open-loop plant
Gs 
100
ss  4s  10
is represented in parallel form, design a controller to
yield a closed-loop response of 20% overshoot and a
peak time of 0.2 second. Design the controller by ﬁrst
transforming the plant to controller canonical form.
[Section: 12.4]
19. For a speciﬁc individual, the
linear time-invariant model of
the hypothalamic-pituitary-
adrenal axis of the endocrine system with
ﬁve state variables has been found to be
(Kyrylov, 2005)
_x1
_x2
_x3
_x4
_x5
2
6666666664
3
7777777775

0:014
0
1:4
0
0
0:023
0:023 0:023
0
0
0:134
0:67
0:67
0:38
0:003264
0
0
0:06
0:06
0
0
0
0:0017
0
0:001
2
6666666664
3
7777777775

x1
x2
x3
x4
x5
2
6666666664
3
7777777775

1
0
0
0
0
2
6666666664
3
7777777775
d0
Thestate-variabledeﬁnitionsweregiven
in Problem 23, Chapter 3.
a. Use MATLAB to determine if the system
is controllable.
b. Use MATLAB to express the matrices A
and B in phase-variable form.
20. Consider the plant
Gs 
1
ss  2s  5
whose state variables are not available. Design an
observer for the observer canonical variables to yield a
transient response described by ζ  0:6 and ωn  50.
Place the third pole 10 times farther from the imaginary
axis than the dominant poles. [Section: 12.5]
21. Design an observer for the plant
Gs 
10
s  3s  7s  15
1
s + 10
1
s + 8
s + 3
s + 6
U(s)
Y(s)
Z3(s)
Z2(s)
FIGURE P12.3
1
s + 3
1
s + 8
s + 10
s + 6
U(s)
Y(s) = Z1(s)
Z3(s)
Z2(s)
FIGURE P12.4
Problems
697

operating with 10% overshoot and 2 seconds peak time.
Design the observer to respond 10 times as fast as the
plant. Place the observer third pole 20 times as far from
the imaginary axis as the observer dominant poles.
Assume the plant is represented in observer canonical
form. [Section: 12.5]
22. Repeat Problem 20assuming thatthe plant is represented
in phase-variable form. Do not convert to observer
canonical form. [Section: 12.7]
23. Consider the plant
Gs 
s  2
s  5s  9
whose phase variables are not available. Design an
observer for the phase variables with a transient response
described by ζ  0:6 and ωn  120. Do not convert to
observer canonical form. [Section: 12.7]
24. Determine whether or not each of the systems shown in
Figure P12.2 is observable. [Section: 12.6]
25. Use MATLAB to determine the
observability of the systems
of Figure P12.2(a) and (f).
26. a. Given the plant of Figure P12.5, what relationship
must exist between c1 and c2 in order for the system
to be unobservable?
b. What
values
of
c1
will
make
the
system
uncontrollable if c2 = 1? [Section: 12.6]
y
u
–1
–2
1
x2
c1
c2
x1
1
s
1
s
FIGURE P12.5
27. Design an observer for the plant
Gs 
1
s  5s  13s  20
represented in cascade form. Transform the plant
to observer canonical form for the design. Then
transform the design back to cascade form. The
characteristic polynomial for the observer is to be
s3  600s2  40;000s  1;500;000.
28. Use MATLAB to design the observer
gains for the system given in
Problem 27.
29. Repeat Problem 27 assuming that the plant isrepresented
in parallel form. [Section: 12.7]
30. Design an observer for
Gs 
45
s  3s  5s  10
represented in phase-variable form with a desired
performance of 10% overshoot and a settling time of
0.5 second. The observer will be 10 times as fast as the
plant, and the observer’s nondominant pole will be
10 times as far from the imaginary axis as the observer’s
dominant poles. Design the observer by ﬁrst converting
to observer canonical form. [Section: 12.7]
31. Observability and controllability properties depend on
the state-space representation chosen for a given
system. In general, observability and controllability
are affected when pole-zero cancellations are present
in the transfer function. Consider the following two
systems with representations:
_xi  Aixi  Bir
y  Cixi;
A1 
0
1
2
3
"
#
; B1 
0
1
"
#
; C1 
2
0


A2 
0
1
0
0
0
1
6
11
6
2
664
3
775; B2 
0
0
1
2
664
3
775; C2 
6
2
0


a. Show that both systems have the same transfer
function Gis  Ys
Rs after pole-zero cancellations.
b. Evaluate the observability of both systems.
32. Given the plant
_x 
1
1
0
2
"
#
x 
0
1
"
#
u;
y 
1
1


x
design an integral controller to yield a 15% overshoot,
0.6-second settling time, and zero steady-state error for a
step input. [Section: 12.8]
33. RepeatProblem32forthefollowingplant:[Section:12.8]
_x 
2
1
0
5
"
#
x 
0
1
"
#
u;
y 
1
1


x
698
Chapter 12
Design via State Space

DESIGN PROBLEMS
DESIGN PROBLEMS
34. Problem 22 in Chapter 3 introduced the model for
patients treated under a regimen of a single day of
Glargine insulin (Tarín, 2005). The model to ﬁnd the
response for a speciﬁc patient to medication can be
expressed in phase-variable form with
A 
0
1
0
0
0
1
501:6  106
128:8  103
854  103
2
64
3
75;
B 
1
0
0
2
64
3
75;
C 
0:78  104
41:4  104
0:01


;
D  0
The state variables will take on a different signiﬁcance
in this expression, but the input and the output remain
the same. Recall that u = external insulin ﬂow, and
y = plasma insulin concentration.
a. Obtain a state-feedback gain matrix so that the
closed-loop system will have two of its poles placed
at 1=15 and the third pole at 1=2.
b. Use MATLAB to verify that the
poles appear at the positions
speciﬁed in Part a.
35. Figure P12.6 shows a continuous stirred tank reactor
in which an aqueous solution of sodium acetate
(CH3COONa) is neutralized in the mixing tank with
hydrochloric acid (HCl) to maintain a particular pH in
the mixing tank.
The amount of acid in the mix is controlled by
varying the rotational speed of a feeding peristaltic
pump. A nominal linearized transfer function from
HCl ﬂowrate to pH has been shown to be (Tadeo, 2000)
Gs  0:9580  104s  0:01197  104
s3  0:5250s2  0:01265s  0:000078
a. Write the system in state-space phase-variable form.
b. Use state-feedback methods to design a matrix K
that will yield an overdamped output pH response
with a settling time of Ts ≈5 min for a step input
change in pH.
c. Simulate the step response of
the resulting closed-loop
system using MATLAB.
36. In the dc-dc converter of Problem 67, Chapter 4 (Van Dijk,
1995), with L  6 mH, C  1 mF, R  100 Ω, a 50%
PWM duty cycle, and assuming the system’s output is the
voltage across the capacitor, the model can be expressed as
_iL
_uC
"
#

0
83:33
500
10
"
#
iL
uC
"
#

166:67
0
"
#
Es
y 
0
1


iL
uC
"
#
Inlet stream
pH
measurement
Control
signal
Control acid stream
Peristaltic
pump
Acid tank
Mixing tank
Liquid pump
Liquid tank
FIGURE P12.69
9 Tadeo F., Perez, Loepez O., and Alvarez T. Control of Neutralization Processes by Robust Loopsharing. IEEE Trans. on Cont. Syst. Tech., vol. 8, no. 2,
2000. Fig. 2, p. 239. IEEE Transactions on Control Systems Technology by Institute of Electrical and Electronics Engineers; IEEE Control Systems Society.
Reproduced with permission of Institute of Electrical and Electronics Engineers, in the format Republish in a book via Copyright Clearance Center.
Problems
699

a. Find the system’s transfer function.
b. Express the system’s state equations in phase-
variable form.
c. Find a set of state-feedback gains to obtain 20%
overshoot and a settling time of 0.5 second in the
phase-variable system.
d. Obtain the corresponding set of state-feedback
gains in the original system.
e. Verify that the set of gains in Part d places the
closed-loop poles at the desired positions.
f. Simulate the unit step
response of the system using
MATLAB.
37. a. Design an observer for the dc-dc converter of
Problem 36. The observer should have time con-
stants 10 times smaller than those of the original
system.
b. Simulate your system and
observer for a unit step input
using Simulink. Assume that the
initial conditions for the original
system are x0  2
1


.The observer should
have initial conditions ^x0  0
0


.
38. a. Design an observer for the neutralization system
using the continuous stirred tank reactor of Prob-
lem 35. The observer should have time constants
10 times smaller than those of the original system.
Assume that the original state variables are those
obtained in the phase-variable representation.
b. Simulate your system and
observer for a unit step input
using Simulink. Assume that the
initial conditions for the original
system are x0 
 1
10
3
2
4
3
5. The observer
should
have
initial
conditions
^x0 
0
0
0
2
4
3
5.
39. a. Redesign the dc-dc converter system of Problem 36
to include integral control.
b. Simulate your system for a step
input using Simulink and verify
that the speciﬁcations are met.
In particular, verify that the system
has zero steady-state error.
40. The use of feedback control to vary the pitch angle in
the blades of a variable speed wind turbine allows
power generation optimization under variable wind
conditions (Liu, 2008). At a speciﬁc operating point, it
is possible to linearize turbine models. For example,
the model of a three-blade turbine with a 15 m radius
working in 12 m/s wind-speed and generating 220 V
can be expressed as
_x
5
0
0
0
0
0
0
1
0
0
10:5229 1066:67 3:38028
23:5107
0
0
993:804
3:125
23:5107
0
0
0
0
10
10
2
6666666664
3
7777777775
x

5
0
0
0
0
2
6666666664
3
7777777775
u
y 0 0 0 1:223x105 0


x
where the state variable vector is given by
x β
ξ
_ξ
ωg
ωgm


Here, β = pitch angle of the wind turbine blades, ξ =
relative angle of the secondary shaft, ωg = generator
speed, and ωgm = generator measurement speed. The
system input is u, the pitch angle reference, and the
output is y, the active power generated.
a. Find a state feedback vector gain such that the system
responds with a 10% overshoot and a settling time of
2 seconds for a step input.
b. Use MATLAB to verify the
operation of the system under
state feedback.
41. The study of the ﬂexible links, such as the one shown
in Figure P12.7, is important because of their appli-
cation to the control of ﬂexible lightweight robots
(Saini, 2012). The ﬂexible link angle is deﬂected
by a servomotor. It is assumed that the base angle,
θt, and the tip angular deﬂection relative to the
undeformed link, αt, can be measured. For a speciﬁc
setup, a state-space model of the system was
700
Chapter 12
Design via State Space

developed. The state vector is x 
θ
α
ω
_α

T,
where ωt  _θt and input ut is the voltage applied
to the servomotor. Thus the system is represented as
_x  Ax  Bu, y  Cx where
A 
0
0
1
0
0
0
0
1
0
673:07
35:1667
0
0
1023:07
35:1667
0
2
66664
3
77775
B 
0
0
61:7325
61:7325
2
66664
3
77775
C 
1
1
0
0


It is desired to build state-feedback compensation
around this system so that the system’s characteristic
equation becomes Ds  s  104. In order to do this:
a. Find the system’s controllability matrix CMO and
show that the system is controllable.
b. Find the original system’s characteristic equation and
use it to ﬁnd a phase-variable representation of the
system.
c. Find the phase-variable system’s controllability
matrix CMP and then ﬁnd the transformation matrix
P  CMOC1
MP.
d. Usethephase-variablerepresentationtoﬁndafeedback
gain matrix KP 
k1p
k2p
k3p
k4p


that will
place the closed-loop poles in the desired positions.
e. Find
the
corresponding
feedback
gain
matrix
KO  KP P1.
L
Tt
θ, ω
θ
θ + α
α
FIGURE P12.710
42. We want to use an observer in a textile machine to
estimate the statevariables. The2-input, 1-output system’s
model is _x  Ax  Bu; y  Cx, where (Cardona, 2010)
A 
0
1
0
52:6532
4:9353
2768:1557
0:001213
0
0:06106
2
64
3
75
B 
0
0
0
0
0:001613
0:001812
2
64
3
75
C 
1
0
0


a. Find the system’s observability matrix OMz and show
that the system is observable.
b. Find the original system’s characteristic equation
and use it to ﬁnd an observable canonical represen-
tation of the system.
c. Find the observable canonical system’s observabil-
ity matrix OMx and then ﬁnd the transformation
matrix P  O1
MzOMx.
d. Use the observable canonical representationto ﬁndan
observer gain matrix Lx 
l1x
l2x
l3x
l4x

T so
that
the
observer
characteristic
polynomial
is
Ds  s3  30s2  316s  1160.
e. Find the corresponding observer gain matrix
Lz  PLx.
43. An inverted pendulum mounted on a motor-driven cart
was presented in Problem 30, Chapter 3. Its state-
space model was linearized (Prasad, 2012) around
a stationary point, x0  0, corresponding to the
pendulum point-mass, m, being in the upright position
at t = 0. Its model was then modiﬁed in Problem 55,
Chapter 6, to have two output variables: the pendulum
angle relative to the y-axis, θt, and the horizontal
position of the cart, x(t). Noting that the unit requires
stabilization, you were asked in Problem 33,
Chapter 9, to develop Simulink models for two feed-
back systems: one to control the cart position, x(t), and
the second to control the pendulum angle, θt.
Modify the second model, using state-feedback
ampliﬁers with appropriate gains (in addition to the rate
feedback ampliﬁer and the PD controller), to improve
the unit-impulse response of the angle control loop.
Compare the response you get here with that obtained
for Problem 33, Chapter 9.
44. Let the plant in the drive system with an elastically
coupled load (Thomsen, 2011) shown in Figure P8.15 be
Gps  Ys
Ms 
250 s2  1:2s  12500
s3  8:1s2  62003s  31250
where Ys  ΩLs, the load speed. Represent Gps in
observer canonical form. Then design an observer for it,
such that it responds 10 times faster than the output, y(t),
if GCs  KP. [Section: 12.5]
10 Saini, S. C., Sharma , Y., Bhandari, M., and Satija, U. Comparison of Pole
PlacementandLQRAppliedtoSingleLinkFlexibleManipulator, International
Conference on Communication Systems and Network Technologies, IEEE
Computer Society, 2012, pp. 843–847, Figure 3, p. 844.
Problems
701

PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
45. Control of HIV/AIDS. The linearized model of HIV
infection when RTIs are used for treatment was intro-
duced in Chapter 4 and repeated here for convenience
(Craig, 2004):
_T
_T*
_v
2
64
3
75 
0:04167
0
0:0058
0:0217
0:24
0:0058
0
100
2:4
2
64
3
75
T
T*
v
2
64
3
75

5:2
5:2
0
2
64
3
75u1
y 
0
0
1


T
T*
v
2
64
3
75
T represents the number of healthy T-cells, T* the number
of infected cells, and v the number of free viruses.
a. Design a state-feedback scheme to obtain
(1) zero steady-state error for step inputs
(2) 10% overshoot
(3) a settling time of approximately 100 days
(Hint: the system’s transfer function has an open-loop
zero at approximately 0.02. Use one of the poles in
the desired closed-loop-pole polynomial to eliminate
this zero. Place the higher-order pole 6.25 times farther
than the dominant pair.)
b. Simulate the unit step response
of your design using Simulink.
46. Hybrid vehicle. In Problem 32, Chapter 3, we introduced
theideathatwhenanelectricmotoristhesolemotiveforce
provider for a hybrid electric vehicle (HEV), the forward
paths of all HEV topologies are similar. It was noted that,
in general, the forward path of an HEV cruise control
system can be represented by a block diagram similar
to that of Figure P3.18 (Preitl, 2007). The diagram is
shown in Figure P12.8, with the parameters substituted
by their numerical values from Problem 69, Chapter 6;
the motor armature represented as a ﬁrst-order system
withaunitysteady-stategainandatimeconstantof50ms;
and the power ampliﬁer gain set to 50. Whereas the state
variables remain as the motor angular speed, ω t , and
armature current, Ia t , we assume now that we have only
one input variable, uc t , the command voltage from the
electronic control unit, and one output variable, car speed,
v  rω=itot  0:06154ω. The change in the load torque,
Tc t , is represented as an internal feedback proportional
to ω t .
Looking at the diagram, the state equations may
be written as
_Ia
_ω
"
#

20
40
0:2491
0:0191
"
#
Ia
ω
"
#

0
1000
"
#
uct
yt  vt  0
0:05154
Ia
ω
"
#
a. Design an integral controller for %OS  4.32%, a
settling time, Ts  4.4 sec, and a zero steady-state
error for a step input (Hint: To account for the effect
of the integral controlleron the transient response, use
Ts = 4 seconds in your calculation of the value of the
naturalfrequency,ωn,oftherequireddominantpoles).
b. Use MATLAB to verify that the
design requirements are met.
47. Parabolic trough collector. A parabolic trough
collector can be designed using state-space tech-
niques. For simplicity, pure time delay will be ignored
here, although it could be handled in several different
ways. Consider the open-loop transfer function
(Camacho, 2012):
Gs 
137:2  106K
s2  0:0224s  196  106
Design a state feedback controller with integral
control to yield zero steady-state error, such that the
system transient response results in a damping factor of
ζ  0:5 with a settling time Ts  200 sec. Simulate the
step response of your designed system using a com-
puter program.
2
0.03787
20
50
1.8
+
+
–
–
–
0.1
0.06154
s + 20
ua(t)
Ia(t)
Ia(t)
Tf (t)
Tc (t)
ω (t)
T(t)
uc(t)
eb(t)
1
7.226 s
ω (t)
ν (t)
FIGURE P12.8
702
Chapter 12
Design via State Space

Cyber Exploration Laboratory
Experiment 12.1
Objective
To simulate a system that has been designed for transient response via a
state-space controller and observer.
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1. This experiment is based upon your design of a controller and observer as speciﬁed in
the Case Study Challenge problem in Chapter 12. Once you have completed the
controller and observer design in that problem, go on to Prelab 2.
2. What is the controller gain vector for your design of the system speciﬁed in the Case
Study Challenge problem in Chapter 12?
3. What is the observer gain vector for your design of the system speciﬁed in the Case
Study Challenge problem in Chapter 12?
4. Draw a Simulink diagram to simulate the system. Show the system, the controller, and
the observer using the physical variables speciﬁed in the Case Study Challenge problem
in Chapter 12.
Lab
1. Using Simulink and your diagram from Prelab 4, produce the Simulink diagram from
which you can simulate the response.
2. Produce response plots of the system and the observer for a step input.
3. Measure the percent overshoot and the settling time for both plots.
Postlab
1. Make a table showing the design speciﬁcations and the simulation results for percent
overshoot and settling time.
2. Compare the design speciﬁcations with the simulation results for both the system
response and the observer response. Explain any discrepancies.
3. Describe any problems you had implementing your design.
Experiment 12.2
Objective
To use LabVIEW to design a controller and observer
Minimum Required Software Packages
LabVIEW, the Control Design and
Simulation Module, and the MathScript RT Module.
Prelab
Create a LabVIEW VI that will design the controller and observer for the
Antenna Control Case Study in this chapter. Your VI will have the following inputs: phase-
variable form of the plant, the controller poles, and the observer poles to meet the
requirements. Your indicators will display the following: the phase-variable equation of
the plant, whether or not the system is controllable, the observer canonical equation of the
observer, whether or not the system is observable, the gains for the controller, and the gains
for the observer. Also provide the impulse response and initial response curves shown in
Figure 12.27. In addition, provide similar response curves for the state variables.
Lab
Run your VI and collect the data from which to compare the results of the case
study with those found from your VI.
Cyber Exploration Laboratory
703

Bibliography
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Cardona, J. E., and Cárdenas, M. O. Design and implementation of a state observer for a textile
machine, IEEE ANDESCON, 2010, pp. 1–6.
Craig, I. K, Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education, vol.
47, no. 1, February 2004, pp. 65–73.
D’Azzo, J. J., and Houpis, C. H. Linear Control System Analysis and Design: Conventional and
Modern, 3d ed. McGraw-Hill, New York, 1988.
Franklin, G. F, Powell, J. D, and Emami-Naeini, A. Feedback Control of Dynamic Systems, 3d ed.
Addison-Wesley, Reading, MA, 1994.
Hostetter, G. H, Savant, C. J. Jr., and Stefani, R. T. Design of Feedback Control Systems, 2d ed.
Saunders College Publishing, New York, 1989.
Kailath, T. Linear Systems. Prentice Hall, Upper Saddle River, NJ, 1980.
Kyrylov, V., Severyanova, L. A., and Vieira, A. Modeling Robust Oscillatory Behavior of the
Hypothalamic-Pituitary-Adrenal Axis. IEEE Transactions on Biomedical Engineering, vol.
52, no. 12, 2005, pp. 1977–1983.
Liu, J.-H., Xu, D.-P., and Yang, X.-Y. Multi-Objective Power Control of a Variable Speed Wind
Turbine Based on Theory. Proceedings of the Seventh International Conference on Machine
Learning and Cybernetics, July 2008, pp. 2036–2041.
Luenberger, D. G. Observing the State of a Linear System. IEEE Transactions on Military Electronics,
vol. MIL-8, April 1964, pp. 74–80.
Milhorn, H. T. Jr., The Application of Control Theory to Physiological Systems. W. B. Saunders,
Philadelphia, 1966.
Ogata, K. Modern Control Engineering, 2d ed. Prentice Hall, Upper Saddle River, NJ, 1990.
Ogata, K. State Space Analysis of Control Systems. Prentice Hall, Upper Saddle River, NJ, 1967.
Prasad, L., Tyagi, B., and Gupta, H. Modeling & Simulation for Optimal Control of Nonlinear
Inverted Pendulum Dynamical System using PID Controller & LQR. IEEE Computer Society Sixth
Asia Modeling Symposium, 2012, pp.138–143.
Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. Fourth International Symposium on Applied Computational Intelligence and Informatics.
IEEE, 2007, pp. 157–162.
Rockwell International. Space Shuttle Transportation System. 1984 (press information).
Saini, S. C., Sharma, Y., Bhandari, M., and Satija, U. Comparison of Pole Placement and LQR
Applied to Single Link Flexible Manipulator. International Conference on Communication Systems
and Network Technologies, IEEE Computer Society, 2012, pp. 843–847.
Shinners, S. M. Modern Control System Theory and Design. Wiley, New York, 1992.
Sinha, N. K. Control Systems. Holt, Rinehart & Winston, New York, 1986.
Tadeo, F., Pérez López, O., and Alvarez, T. Control of Neutralization Processes by Robust
Loop-shaping. IEEE Transactions on Control Systems Technology, vol. 8, no. 2, 2000,
pp. 236–246.
Tarín, C., Teufel, E., Picó, J., Bondia, J., and Pﬂeiderer, H. J. Comprehensive Pharmacokinetic Model
of Insulin Glargine and Other Insulin Formulations. IEEE Transactions on Biomedical Engineering,
vol. 52, no. 12, 2005, pp. 1994–2005.
Postlab
Compare and summarize the results found from your VI with those of the
Chapter 12 Antenna Control Case Study.
704
Chapter 12
Design via State Space

Thomsen, S., Hoffmann, N., and Fuchs, F. W. PI Control, PI-Based State Space Control, and
Model-Based Predictive Control for Drive Systems With Elastically Coupled Loads—A
Comparative Study. IEEE Transactions on Industrial Electronics, vol. 58, no. 8, August 2011,
pp. 3647–3657.
Timothy, L. K, and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New York,
1968.
Van Dijk, E., Spruijt, J. N., O’Sullivan, D. M., and Klaasens, J. B. PWM-Switch Modeling of DC-DC
Converters. IEEE Transactions on Power Electronics, vol. 10, 1995, pp. 659–665.
Bibliography
705


Digital Control Systems
Chapter Learning Outcomes
After completing this chapter the student will be able to:
• Model the digital computer in a feedback system (Sections 13.1–13.2)
• Find z- and inverse z-transforms of time and Laplace functions (Section 13.3)
• Find sampled-data transfer functions (Section 13.4)
• Reduce an interconnection of sampled-data transfer functions to a single
sampled-data transfer function (Section 13.5)
• Determine whether a sampled-data system is stable and determine sampling
rates for stability (Section 13.6)
• Design digital systems to meet steady-state error speciﬁcation (Section 13.7)
• Design digital systems to meet transient response speciﬁcations using gain
adjustment (Sections 13.8–13.9)
• Design cascade compensation for digital systems (Sections 13.10–13.11)
Case Study Learning Outcomes
You will be able to demonstrate your knowledge of the chapter objectives with a
case study as follows:
• Given the analog antenna azimuth position control system shown on the front
endpapers and in Figure 13.1(a), you will be able to convert the system to a
digital system as shown in Figure 13.1(b) and then design the gain to meet a
transient response speciﬁcation.

13
707

• Given the digital antenna azimuth position control system shown in Figure 13.1(b),
you will be able to design a digital cascade compensator to improve the transient
response.
13.1 Introduction
This chapter is an introduction to digital control systems and will cover only frequency-
domain analysis and design. You are encouraged to pursue the study of state-space
techniques in an advanced course in sampled-data control systems. In this chapter, we
introduce analysis and design of stability, steady-state error, and transient response for
computer-controlled systems.
With the development of the minicomputer in the mid-1960s and the microcomputer
in the mid-1970s, physical systems need no longer be controlled by expensive mainframe
computers. For example, milling operations that required mainframe computers in the past
can now be controlled by a personal computer.
The digital computer can perform two functions: (1) supervisory—external to the
feedback loop; and (2) control—internal to the feedback loop. Examples of supervisory
functions consist of scheduling tasks, monitoring parameters and variables for out-of-range
Cable
A/D
D/A
(b)
Computer
Desired
azimuth angle
input
Potentiometer
Azimuth 
angle
output
(a)
Azimuth 
angle
output
Antenna
Antenna
θo(t)
θo(t)
θi(t)
FIGURE 13.1
Conversion of antenna azimuth position control system from a. analog control to
b. digital control
708
Chapter 13
Digital Control Systems

values, or initiating safety shutdown. Control functions are of primary interest to us, since a
computer that performs within the feedback loop replaces the methods of compensation
heretofore discussed. Examples of control functions are lead and lag compensation.
Transfer functions, representing compensators built with analog components, are now
replaced with a digital computer that performs calculations that emulate the physical
compensator. What advantages are there to replacing analog components with a digital
computer?
Advantages of Digital Computers
The use of digital computers in the loop yields the following advantages over analog
systems: (1) reduced cost, (2) ﬂexibility in response to design changes, and (3) noise
immunity. Modern control systems require control of numerous loops at the same
time—pressure, position, velocity, and tension, for example. In the steel industry, a single
digital computer can replace numerous analog controllers with a subsequent reduction in
cost. Where analog controllers implied numerous adjustments and resulting hardware,
digital systems are now installed. Banks of equipment, meters, and knobs are replaced with
computer terminals, where information about settings and performance is obtained through
menus and screen displays. Digital computers in the loop can yield a degree of ﬂexibility in
response to changes in design. Any changes or modiﬁcations that are required in the future
can be implemented with simple software changes rather than expensive hardware
modiﬁcations. Finally, digital systems exhibit more noise immunity than analog systems
by virtue of the methods of implementation.
Where then is the computer placed in the loop? Remember that the digital computer is
controlling numerous loops; thus, its position in the loop depends upon the function it
performs. Typically, the computer replaces the cascade compensator and is thus positioned
at the place shown in Figure 13.2(a).
The signals r, e, f, and c shown in Figure 13.2(a) can take on two forms: digital or
analog. Up to this point we have used analog signals exclusively. Digital signals, which
consist of a sequence of binary numbers, can be found in loops containing digital
computers.
Loops containing both analog and digital signals must provide a means for conversion
from one form to the other as required by each subsystem. A device that converts analog
signals to digital signals is called an analog-to-digital (A/D) converter. Conversely, a device
that converts digital signals to analog signals is called a digital-to-analog (D/A) converter.
r
–
+
r
c
–
+
Digital
computer
Plant
f
e
A/D
Digital
computer
D/A
Plant
c
(a)
(b)
FIGURE 13.2
a. Placement of the digital computer within the loop; b. detailed block diagram
showing placement of A/D and D/A converters
13.1 Introduction
709

For example,inFigure 13.2(b),ifthe plant output,c, and the systeminput,r, are analogsignals,
then an analog-to-digital converter must be provided at the input to the digital computer.
Also, if the plant input, f, is an analog signal, then a digital-to-analog converter must be
provided at the output of the digital computer.
Digital-to-Analog Conversion
Digital-to-analog conversion is simple and effectively instan-
taneous. Properly weighted voltages are summed together to
yield the analog output. For example, in Figure 13.3, three
weighted voltages are summed. The three-bit binary code is
represented by the switches. Thus, if the binary number is
1102, the center and bottom switches are on, and the analog
output is 6 volts. In actual use, the switches are electronic and
are set by the input binary code.
Analog-to-Digital Conversion
Analog-to-digital conversion, on the other hand, is a two-step
process and is not instantaneous. There is a delay between the
input analog voltage and the output digital word. In an analog-
to-digital converter, the analog signal is ﬁrst converted to a sampled signal and then
converted to a sequence of binary numbers, the digital signal.
The sampling rate must be at least twice the bandwidth of the signal, or else there will
be distortion. This minimum sampling frequency is called the Nyquist sampling rate.1
In Figure 13.4(a), we start with the analog signal. In Figure 13.4(b), we see the analog
signal sampled at periodic intervals and held over the sampling interval by a device called a
zero-order sample-and-hold (z.o.h.) that yields a staircase approximation to the analog
signal. Higher-order holds, such as a ﬁrst-order hold, generate more complex and more
accurate waveshapes between samples. For example, a ﬁrst-order hold generates a ramp
between the samples. Samples are held before being digitized because the analog-to-digital
converter converts the voltage to a digital number via a digital counter, which takes time to
reach the correct digital number. Hence, the constant analog voltage must be present during
the conversion process.
After sampling and holding, the analog-to-digital converter converts the sample to a
digital number (as shown in Figure 13.4(c)), which is arrived at in the following manner.
The dynamic range of the analog signal’s voltage is divided into discrete levels, and each
level is assigned a digital number. For example, in Figure 13.4(b), the analog signal is
divided into eight levels. A three-bit digital number can represent each of the eight levels as
shown in the ﬁgure. Thus, the difference between quantization levels is M=8 volts, where M
is the maximum analog voltage. In general, for any system, this difference is M=2n volts,
where n is the number of binary bits used for the analog-to-digital conversion.
Looking at Figure 13.4(b), we can see that there will be an associated error for each
digitized analog value except the voltages at the boundaries such as M=8 and 2M=8. We call
this error the quantization error. Assuming that the quantization process rounds off the
analog voltage to the next higher or lower level, the maximum value of the quantization
error is 1=2 the difference between quantization levels in the range of analog voltages from
0 to 15M=16. In general, for any system using roundoff, the quantization error will be
1=2M=2n  M=2n1.
We have now covered the basic concepts of digital systems. We found out why they
are used, where the digital computer is placed in the loop, and how to convert between
1
2
4
1 volt
Most significant bit
Least significant bit
Analog
output
+
+
+
FIGURE 13.3
Digital-to-analog converter
1 See Ogata (1987: 170–177) for a detailed discussion.
710
Chapter 13
Digital Control Systems

analog and digital signals. Since the computer can replace the compensator, we have to
realize that the computer is working with a quantized amplitude representation of the
analog signal, formed from values of the analog signal, at discrete intervals of time.
Ignoring the quantization error, we see that the computer performs just as the
compensator does, except that signals pass through the computer only at the sampled
intervals of time. We will ﬁnd that the sampling of data has an unusual effect upon the
performance of a closed-loop feedback system, since stability and transient response
are now dependent upon the sampling rate. If the sampling rate is too slow, the system can
be unstable, since the values are not being updated rapidly enough. If we are to analyze and
design feedback control systems with digital computers in the loop, we must be able to model
the digital computer and associated digital-to-analog and analog-to-digital converters.
The modeling of the digital computer along with associated converters is covered in the
next section.
13.2 Modeling the Digital Computer
If we think about it, the form of the signals in a loop is not as important as what happens
to them. For example, if analog-to-digital conversion could happen instantaneously, and
time samples occurred at intervals of time that approached zero, there would be no need
to differentiate between the digital signals and the analog signals. Thus, previous
analysis and design techniques would be valid regardless of the presence of the digital
computer.
The fact that signals are sampled at speciﬁed intervals and held causes the system
performance to change with changes in sampling rate. Basically, then, the computer’s effect
upon the signal comes from this sampling and holding. Thus, in order to model digital
control systems, we must come up with a mathematical representation of this sample-and-
hold process.
1
2
3
4
5
Digital number
000
011
100
101
101
110
110
110
110
110
1
2
3
4
Time (seconds)
5
00
0
2
3
4
5
Time (seconds)
(b)
(a)
Time (seconds)
(c)
1M/8
2M/8
3M/8
4M/8
5M/8
6M/8
7M/8
f (t)
0
1M/8
2M/8
3M/8
4M/8
5M/8
6M/8
7M/8
000
001
010
011
101
110
111
100
1
Digital number
f (t)
FIGURE 13.4
Steps in
analog-to-digital conversion:
a. analog signal; b. analog
signal after sample-and-hold;
c. conversion of samples to
digital numbers
13.2 Modeling the Digital Computer
711

Modeling the Sampler
Our objective at this point is to derive a mathematical model for the digital computer as
represented by a sampler and zero-order hold. Our goal is to represent the computer as a
transfer function similar to that for any subsystem. When signals are sampled, however,
the Laplace transform that we have dealt with becomes a bit unwieldy. The Laplace
transform can be replaced by another related transform called the z-transform. The
z-transform will arise naturally from our development of the mathematical representation
of the computer.
Consider the models for sampling shown in Figure 13.5. The model in Figure 13.5(a)
is a switch turning on and off at a uniform sampling rate. In Figure 13.5(b), sampling can
also be considered to be the product of the time waveform to be sampled, f(t), and a
sampling function, s(t). If s(t) is a sequence of pulses of width TW, constant amplitude,
and uniform rate as shown, the sampled output, f *
TWt, will consist of a sequence
of sections of f(t) at regular intervals. This view is equivalent to the switch model of
Figure 13.5(a).
We can now write the time equation of the sampled waveform, f *
TWt. Using the
model shown in Figure 13.5(b), we have
f *
TWt  f tst  f t
X
∞
k∞
ut  kT  ut  kT  Tw
13.1
where k is an integer between ∞and ∞, T is the period of the pulse train, and TW is the
pulse width.
Since Eq. (13.1) is the product of two time functions, taking the Laplace transform
in order to ﬁnd a transfer function is not simple. A simpliﬁcation can be made if we
assume that the pulse width, TW, is small in comparison to the period, T, such that f(t) can
f(t)
*
Pulse width = TW
T
2T
3T
T
2T
3T
T
2T
3T
f(t)
t
t
f(t)
t
t
t
s(t)
f(t)
(a)
(b)
fTW(t)
*
fTW(t)
*
fTW(t)
*
fTW(t)
Pulse width = TW
Pulse width = TW
s(t)
FIGURE 13.5
Two views of
uniform-rate sampling:
a. switch opening and closing;
b. product of time waveform
and sampling waveform
712
Chapter 13
Digital Control Systems

be considered constant during the sampling interval. Over the sampling interval, then,
f t  f kT. Hence,
f *
TWt 
X
∞
k∞
f kTut  kT  ut  kT  TW
13.2
for small TW.
Equation (13.2) can be further simpliﬁed through insight provided by the Laplace
transform. Taking the Laplace transform of Eq. (13.2), we have
F*
TWs 
X
∞
k∞
f kT ekTs
s
 ekTsTWs
s



X
∞
k∞
f kT 1  eTWs
s


ekTs
13.3
Replacing eTWs with its series expansion, we obtain
F*
TWs 
X
∞
k∞
f kT
1 
1  TWs  TWs2
2!
 ∙∙∙


s
2
6664
3
7775ekTs
13.4
For small TW, Eq. (13.4) becomes
F*
TWs 
X
∞
k∞
f kT TWs
s


ekTs 
X
∞
k∞
f kTTWekTs
13.5
Finally, converting back to the time domain, we have
f *
TWt  TW
X
∞
k∞
f kTδt  kT
13.6
where δt  kT are Dirac delta functions.
Thus, the result of sampling with rectangular pulses can be thought of as a series of
delta functions whose area is the product of the rectangular pulse width and the amplitude of
the sampled waveform, or TWf kT.
Equation (13.6) is portrayed in Figure 13.6. The sampler is divided into two parts:
(1) an ideal sampler described by the portion of Eq. (13.6) that is not dependent upon the
sampling waveform characteristics,
f *t
X
∞
k∞
f kTδt  kT
13.7
and (2) the portion dependent upon the sampling waveform’s characteristics, TW.
f *(t)
Ideal
sampler
f(t)
TW
Σ
–∞
∞
Σ
–∞
∞
=      f(kT) δ(t – kT)
=  TW      f(kT) δ(t – kT)
*
fTW(t)
FIGURE 13.6
Model of
sampling with a uniform
rectangular pulse train
13.2 Modeling the Digital Computer
713

Modeling the Zero-Order Hold
The ﬁnal step in modeling the digital computer is modeling the zero-order hold that follows
the sampler. Figure 13.7 summarizes the function of the zero-order hold, which is to hold the
last sampled value of f(t). If we assume an ideal sampler (equivalent to setting TW  1), then
f *t is represented by a sequence of delta functions. The zero-order hold yields a staircase
approximation to f(t). Hence, the output from the hold is a sequence of step functions whose
amplitude is f(t) at the sampling instant, or f(kT). We have previously seen that the transfer
function of any linear system is identical to the Laplace transform of the impulse response,
since the Laplace transform of a unit impulse or delta function input is unity. Since a single
impulse from the sampler yields a step over the sampling interval, the Laplace transform of
this step, Gh(s), which is the impulse response of the zero-order hold, is the transfer function
of the zero-order hold. Using an impulse at zero time, the transform of the resulting step that
starts at t  0 and ends at t  T is
Ghs  1  eTs
s
13.8
In a physical system, samples of the input time waveform, f(kT), are held over the
sampling interval. We can see from Eq. (13.8) that the hold circuit integrates the input and
holds its value over the sampling interval. Since the area under the delta functions coming
from the ideal sampler is f(kT), we can then integrate the ideal sampled waveform and
obtain the same result as for the physical system. In other words, if the ideal sampled
signal, f *t, is followed by a hold, we can use the ideal sampled waveform as the input,
rather than f *
TWt.
In this section, we modeled the digital computer by cascading two elements: (1) an
ideal sampler and (2) a zero-order hold. Together, the model is known as a zero-order
sample-and-hold. The ideal sampler is modeled by Eq. (13.7), and the zero-order hold is
modeled by Eq. (13.8). In the next section, we start to create a transform approach to digital
systems by introducing the z-transform.
13.3 The z-Transform
The effect of sampling within a system is pronounced. Whereas the stability and transient
response of analog systems depend upon gain and component values, sampled-data system
stability and transient response also depend upon sampling rate. Our goal is to develop a
transform that contains the information of sampling from which sampled-data systems can be
modeled with transfer functions, analyzed, and designed with the ease and insight we enjoyed
with the Laplace transform. We now develop such a transform and use the information from
the last section to obtain sampled-data transfer functions for physical systems.
Ideal sampler
f *(t)
f(t)
Hold
fh(t)
t
t
t
f(t)
f *(t)
f(kT) δ(t     kT)
  –
fh(t)
FIGURE 13.7
Ideal sampling
and the zero-order hold
714
Chapter 13
Digital Control Systems

Equation (13.7) is the ideal sampled waveform. Taking the Laplace transform of this
sampled time waveform, we obtain
F*s 
X
∞
k0
f kTekTs
13.9
Now, letting z  eTs, Eq. (13.9) can be written as
Fz 
X
∞
k0
f kTzk
13.10
Equation (13.10) deﬁnes the z-transform. That is, an F(z) can be transformed to f(kT),
or an f(kT) can be transformed to F(z). Alternately, we can write
f kT ⇆Fz
13.11
Paralleling the development of the Laplace transform, we can form a table relating f(kT), the
value of the sampled time function at the sampling instants, to F(z). Let us look at an
example.
Example 13.1
z-Transform of a Time Function
z-Transform of a Time Function
PROBLEM: Find the z-transform of a sampled unit ramp.
SOLUTION: For a unit ramp, f kT  kT. Hence the ideal sampled step can be written
from Eq. (13.7) as
f *t 
X
∞
k0
ktδt  kT
13.12
Taking the Laplace transform, we obtain
F*s 
X
∞
k0
kTekTs
13.13
Converting to the z-transform by letting ekTs  zk, we have
Fz 
X
∞
k0
kTzk  T
X
∞
k0
kzk  Tz1  2z2  3z3  ∙∙∙
13.14
Equation (13.14) can be converted to a closed form by forming the series for zF(z) and
subtracting F(z). Multiplying Eq. (13.14) by z, we get
zFz  T1  2z1  3z2  ∙∙∙
13.15
Subtracting Eq. (13.14) from Eq. (13.15), we obtain
zFz  Fz  z  1Fz  T1  z1  z2  ∙∙∙
13.16
But
1
1  z1  1  z1  z2  z3  ∙∙∙
13.17
13.3 The z-Transform
715

The example demonstrates that any function of s, F*s, that represents a sampled
time waveform can be transformed into a function of z, F(z). The ﬁnal result,
Fz  Tz=z  12, is in a closed form, unlike F*s. If this is the case for numerous other
sampled time waveforms, then we have the convenient transform that we were looking
for. In a similar way, z-transforms for other waveforms can be obtained that parallel the
table of Laplace transforms in Chapter 2. A partial table of z-transforms is shown in
Table 13.1, and a partial table of z-transform theorems is shown in Table 13.2. For
functions not in the table, we must perform an inverse z-transform calculation similar to
which can be veriﬁed by performing the indicated division. Substituting Eq. (13.17) into
(13.16) and solving for F(z) yields
Fz  T
z
z  12
13.18
as the z-transform of f kT  kT.
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch13sp1 in Appendix F located at www.wiley.com/
college/nise. You will learn how to ﬁnd the z-transform of time
functions. Example 13.1 will be solved using MATLAB and the
Symbolic Math Toolbox.
TABLE 13.1
Partial table of z- and s-transforms
f(t)
F(s)
F(z)
f(kT)
1.
u(t)
1
s
z
z  1
u(kT)
2.
t
1
s2
Tz
z  12
kT
3.
tn
n!
sn1
lim
a ® 0 1n dn
dan
z
z  eaT


kTn
4.
eat
1
s  a
z
z  eaT
eakT
5.
tneat
n!
s  an1
1n dn
dan
z
z  eaT


kTneakT
6.
sin ωt
ω
s2  ω2
z sin ωT
z2  2z cos ωT  1
sin ωkT
7.
cos ωt
s
s2  ω2
zz  cos ωT
z2  2z cos ωT  1
cos ωkT
8.
eatsin ωt
ω
s  a2  ω2
zeaTsin ωT
z2  2zeaTcos ωT  e2aT
eakTsin ωkT
9.
eatcos ωt
s  a
s  a2  ω2
z2  zeaT cos ωT
z2  2zeaT cos ωT  e2aT
eakTcos ωkT
716
Chapter 13
Digital Control Systems

the inverse Laplace transform by partial-fraction expansion. Let us now see how we can
work in the reverse direction and ﬁnd the time function from its z-transform.
The Inverse z-Transform
Two methods for ﬁnding the inverse z-transform (the sampled time function from its
z-transform) will be described: (1) partial-fraction expansion and (2) the power series
method. Regardless of the method used, remember that, since the z-transform came from the
sampled waveform, the inverse z-transform will yield only the values of the time function
at the sampling instants. Keep this in mind as we proceed, because even as we obtain
closed-form time functions as results, they are valid only at sampling instants.
Inverse z-Transforms via Partial-Fraction Expansion
Recall that the Laplace
transform consists of a partial fraction that yields a sum of terms leading to exponentials, that
is, A=s  a. Taking this lead and looking at Table 13.1, we ﬁnd that sampled exponential
time functions are related to their z-transforms as follows:
eakT ⇆
z
z  eaT
13.19
We thus predict that a partial-fraction expansion should be of the following form:
Fz 
Az
z  z1

Bz
z  z2
 ∙∙∙
13.20
Since our partial-fraction expansion of F(s) did not contain terms with s in the numerator
of the partial fractions, we ﬁrst form Fz=z to eliminate the z terms in the numerator,
perform a partial-fraction expansion of Fz=z, and ﬁnally multiply the result by z to
replace the z’s in the numerator. An example follows.
TABLE 13.2
z-transform theorems
Theorem
Name
1.
zfaf tg  aFz
Linearity theorem
2.
zff 1t  f 2tg  F1z  F2z
Linearity theorem
3.
zfeaTf tg  FeaTz
Complex differentiation
4.
zff t  nTg  znFz
Real translation
5.
zftf tg  Tz dFz
dz
Complex differentiation
6.
f 0  lim
z ®∞Fz
Initial value theorem
7.
f ∞  lim
z ® 11  z1Fz
Final value theorem
Note: kT may be substituted for t in the table.
Example 13.2
Inverse z-Transform via Partial-Fraction Expansion
Inverse z-Transform via Partial-Fraction Expansion
PROBLEM: Given the function in Eq. (13.21), ﬁnd the sampled time function.
Fz 
0:5z
z  0:5z  0:7
13.21
13.3 The z-Transform
717

Inverse z-Transform via the Power Series Method
The values of the sampled
time waveform can also be found directly from F(z). Although this method does not yield
closed-form expressions for f(kT), it can be used for plotting. The method consists of
performing the indicated division, which yields a power series for F(z). The power series can
then be easily transformed into F*s and f *t.
SOLUTION: Begin by dividing Eq. (13.21) by z and performing a partial-fraction
expansion.
Fz
z

0:5
z  0:5z  0:7 
A
z  0:5 
B
z  0:7  2:5
z  0:5 
2:5
z  0:7
13.22
Next, multiply through by z.
Fz 
0:5z
z  0:5z  0:7  2:5z
z  0:5  2:5z
z  0:7
13.23
Using Table 13.1, we ﬁnd the inverse z-transform of each partial fraction. Hence, the
value of the time function at the sampling instants is
f kT  2:50:5k  2:50:7k
13.24
Also, from Eqs. (13.7) and (13.24), the ideal sampled time function is
f *t 
X
∞
k∞
f kTδt  kT 
X
∞
k∞
2:50:5k  2:50:7kδt  kT
13.25
If we substitute k  0; 1; 2, and 3, we can ﬁnd the ﬁrst four samples of the ideal sampled
time waveform. Hence,
f *t  0δt  0:5δt  T  0:6δt  2T  0:545δt  3T
13.26
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch13sp2 in Appendix F located at www.wiley.com/
college/nise. You will learn how to ﬁnd the inverse z-transform
of sampled time functions. Example 13.2 will be solved using
MATLAB and the Symbolic Math Toolbox.
Example 13.3
Inverse z-Transform via Power Series
Inverse z-Transform via Power Series
PROBLEM: Given the function in Eq. (13.21), ﬁnd the sampled time function.
SOLUTION: Begin by converting the numerator and denominator of F(z) to
polynomials in z.
Fz 
0:5z
z  0:5z  0:7 
0:5z
z2  1:2z  0:35
13.27
718
Chapter 13
Digital Control Systems

13.4 Transfer Functions
Now that we have established the z-transform, let us apply it to physical systems by
ﬁnding transfer functions of sampled-data systems. Consider the continuous system
shown in Figure 13.8(a). If the input is sampled as shown in Figure 13.8(b), the output is
still a continuous signal. If, however, we are satisﬁed with ﬁnding the output at the
sampling instants and not in between, the representation of the sampled-data system can
be greatly simpliﬁed. Our assumption is visually described in Figure 13.8(c), where the
output is conceptually sampled in synchronization with the input by a phantom sampler.
Now perform the indicated division.
z2  1:2z  0:35

0:5z
0:5z1  0:6z2  0:545z3
0:5z  0:6  0:175z1
0:6  0:175z1
0:6  0:720z1  0:21
0:545z1  0:21
13:28
Using the numerator and the deﬁnition of z, we obtain
F*s  0:5eTs  0:6e2Ts  0:545e3Ts  ∙∙∙
13.29
from which
f *t  0:5δt  T  0:6δt  2T  0:545δt  3T  ∙∙∙
13.30
You should compare Eq. (13.30) with Eq. (13.26), the result obtained via partial
expansion.
Skill-Assessment Exercise 13.1
PROBLEM: Derive the z-transform for f t  sin ωt ut.
ANSWER: Fz 
z1sinωT
1  2z1cosωT  z2
The complete solution is located at www.wiley.com/college/nise.
Skill-Assessment Exercise 13.2
PROBLEM: Find f kT if Fz 
zz  1z  2
z  0:5z  0:7z  0:9 :
ANSWER: f kT  46:8750:5k  114:750:7k  68:8750:9k
The complete solution is located at www.wiley.com/college/nise.
13.4 Transfer Functions
719

Using the concept described in Figure 13.8(c), we derive the pulse transfer function
of G(s).
Derivation of the Pulse Transfer Function
Using Eq. (13.7), we ﬁnd that the sampled input, r*(t), to the system of Figure 13.8(c) is
r*t 
X
∞
n0
rnTδt  nT
13.31
which is a sum of impulses. Since the impulse response of a system, G(s), is g(t), we can
write the time output of G(s) as the sum of impulse responses generated by the input,
Eq. (13.31). Thus,
ct 
X
∞
n0
rnTgt  nT
13.32
From Eq. (13.10),
Cz 
X
∞
k0
ckTzk
13.33
Using Eq. (13.32) with t  kT, we obtain
ckT 
X
∞
n0
rnTgkT  nT
13.34
Substituting Eq. (13.34) into Eq. (13.33), we obtain
Cz 
X
∞
k0
X
∞
n0
rnTgk  nTzk
13.35
G(s)
C(s)
R(s)
G(s)
C(s)
R(s)
(a)
(b)
G(s)
C(s)
R(s)
(c)
R  (s)
R  (s)
C  (s)
Note:  Phantom sampler is shown in color.
*
*
*
FIGURE 13.8
Sampled-data
systems: a. continuous;
b. sampled input; c. sampled
input and output
720
Chapter 13
Digital Control Systems

Letting m  k  n, we ﬁnd
Cz 
X
∞
mn0
X
∞
n0
rnTgmTzmn

X
∞
m0
gmTzm
(
)
X
∞
n0
rnTzn
(
)
13.36
where the lower limit, m  n, was changed to m. The reasoning is that m  n  0 yields
negative values of m for all n > 0. But, since gmT  0 for all m < 0, m is not less than
zero. Alternately, gt  0 for t < 0. Thus, n  0 in the ﬁrst sum’s lower limit.
Using the deﬁnition of the z-transform, Eq. (13.36) becomes
Cz 
X
∞
m0
gmTzmX
∞
n0
rnTzn  GzRz
13.37
Equation (13.37) is a very important result, since it shows that the transform of the sampled
output is the product of the transforms of the sampled input and the pulse transfer function of
the system. Remember that although the output of the system is a continuous function, we
had to make an assumption of a sampled output (phantom sampler) in order to arrive at the
compact result of Eq. (13.37).
One way of ﬁnding the pulse transfer function, G(z), is to start with G(s), ﬁnd g(t), and
then use Table 13.1 to ﬁnd G(z). Let us look at an example.
Example 13.4
Converting G1(s) in Cascade with z.o.h. to G(z)
Converting G1(s) in Cascade with z.o.h. to G(z)
PROBLEM: Given a z.o.h. in cascade with G1s  s  2=s  1 or
Gs  1  eTs
s
s  2
s  1
13.38
ﬁnd the sampled-data transfer function, G(z), if the sampling time, T, is 0.5 second.
SOLUTION: Equation (13.38) represents a common occurrence in digital control
systems, namely a transfer function in cascade with a zero-order hold. Speciﬁcally,
G1s  s  2=s  1 is in cascade with a zero-order hold, 1  eTs=s. We can formulate
ageneralsolutiontothistypeofproblembymovingthesinthedenominatorofthezero-order
hold to G1s, yielding
Gs  1  eTs G1s
s
13.39
from which
Gz  1  z1z G1s
s


 z  1
z
z G1s
s


13.40
Thus, begin the solution by ﬁnding the impulse response (inverse Laplace transform) of
G1s=s. Hence,
G2s  G1s
s
 s  2
ss  1  A
s 
B
s  1  2
s 
1
s  1
13.41
13.4 Transfer Functions
721

Students who are using MATLAB should now run ch13p2 in Appendix B.
You will learn how to use MATLAB to convert G(s) to G(z) when G(s) is
not in cascade with a zero-order hold. This is the same as ﬁnding
the z-transform of G(s).
Students who are using MATLAB should now run ch13p3 in Appendix B.
You will learn how to create digital transfer functions directly.
Students who are using MATLAB should now run ch13p4 in Appendix B.
You will learn how to use MATLAB to convert G(z) to G(s) when G(s) is
not in cascade with a zero-order hold. This is the same as ﬁnding
the Laplace transform of G(z).
Taking the inverse Laplace transform, we get
g2t  2  et
13.42
from which
g2kT  2  ekt
13.43
Using Table 13.1, we ﬁnd
G2z 
2z
z  1 
z
z  eT
13.44
Substituting T  0:5 yields
G2z  z G1s
s



2z
z  1 
z
z  0:607 
z2  0:213z
z  1z  0:607
13.45
From Eq. (13.40),
Gz  z  1
z
G2z  z  0:213
z  0:607
13.46
Students who are using MATLAB should now run ch13p1 in Appendix B.
You will learn how to use MATLAB to convert G1(s)in cascade with a
zero-order hold to G(z). This exercise solves Example 13.4 using
MATLAB.
Students who are performing the MATLAB exercises and want to
explore the added capability of MATLAB’s Symbolic Math Toolbox
should now run ch13sp3 in Appendix F located at www.wiley.com/
college/nise. MATLAB’s Symbolic Math Toolbox yields an alterna-
tive method of ﬁnding the z-transform of a transfer function in
cascade with a zero-order hold. Example 13.4 will be solved using
MATLAB and the Symbolic Math Toolbox with a method that follows
closely the hand calculation shown in that example.
TryIt 13.1
Use MATLAB, the Control
System Toolbox, and the
following statements to ﬁnd
G1s in Example 13.4 given
G(z) in Eq. (13.46)
num=0.213;
den=0.607;
K=1;
T=0.5;
Gz=zpk(num,den,K,T)
Gs=d2c(Gz,'zoh')
Skill-Assessment Exercise 13.3
PROBLEM: Find G(z) for Gs  8=s  4 in cascade with a zero-order sample and
hold. The sampling period is 0.25 second.
ANSWER: Gz  1:264=z  0:3679
The complete solution is located at www.wiley.com/college/nise.
TryIt 13.2
Use MATLAB, the Control
System Toolbox, and the
following statements to solve
Skill-Assessment Exercise 13.3.
Gs=zpk([],4,8)
Gz=c2d(Gs,0.25,'zoh')
722
Chapter 13
Digital Control Systems

The major discovery in this section is that once the pulse transfer function, G(z), of a
system is obtained, the transform of the sampled output response, C(z), for a given sampled
input can be evaluated using the relationship Cz  RzGz. Finally, the time function can
be found by taking the inverse z-transform, as covered in Section 13.3. In the next section,
we look at block diagram reduction for digital systems.
13.5 Block Diagram Reduction
Up to this point, we have deﬁned the z-transform and the sampled-data system transfer
function and have shown how to obtain the sampled response. Basically, we are paralleling
our discussions of the Laplace transform in Chapters 2 and 4. We now draw a parallel with
some of the objectives of Chapter 5, namely block diagram reduction. Our objective here is
to be able to ﬁnd the closed-loop sampled-data transfer function of an arrangement of
subsystems that have a computer in the loop.
When manipulating block diagrams for sampled-data systems, you must be careful to
remember the deﬁnition of the sampled-data system transfer function (derived in the last
section) to avoid mistakes. For example, zfG1sG2sg 6 G1zG2z, where zfG1sG2sg
denotes the z-transform. The s-domain functions have to be multiplied together before
taking the z-transform. In the ensuing discussion, we use the notation G1G2s to denote a
single function that is G1sG2s after evaluating the product. Hence, zfG1sG2 sg 
zfG1G2sg  G1G2z 6 G1zG2 z.
Let us look at the sampled-data systems shown in Figure 13.9. The sampled-data
systems are shown under the column marked s. Their z-transforms are shown under the
column marked z. The standard system that we derived earlier is shown in Figure 13.9(a),
where the transform of the output, C(z), is equal to R(z)G(z). This system forms the basis for
the other entries in Figure 13.9.
In Figure 13.9(b), there is no sampler between G1s and G2s. Thus, we can think of
a single function, G1sG2s, denoted G1G2s, existing between the two samplers and
yielding a single transfer function, as shown in Figure 13.9(a). Hence, the pulse transfer
function is zfG1G2sg  G1G2z. The transform of the output, Cz  RzG1G2z.
In Figure 13.9(c), we have the cascaded two subsystems of the type shown in
Figure 13.9(a). For this case, then, the z-transform is the product of the two z-transforms, or
G2zG1z. Hence the transform of the output Cz  RzG2zG1z.
R(s)
R*(s)
G(s)
C(s)
C*(s)
(a)
(b)
(c)
(d)
R(s)
R*(s)
C(s)
C*(s)
R(s)
R*(s)
G2(s) C(s)
C*(s)
G1(s)
R(s)
G2(s)
C(s)
C*(s)
G1(s) R(s)G1(s)
[R(s)G1(s)]*
G(z)
G2(z)G1(z)
G2(z)
R(z)
R(z)
R(z)
RG1(z)
C(z)
C(z)
C(z)
C(z)
G2G1(z)
G2(s)
G1(s)
s
z
FIGURE 13.9
Sampled-data
systems and their z-transforms
13.5 Block Diagram Reduction
723

Finally, in Figure 13.9(d), we see that the continuous signal entering the sampler is
RsG1s. Thus, the model is the same as Figure 13.9(a) with R(s) replaced by RsG1s,
and G2s in Figure 13.9(d) replacing G(s) in Figure 13.9(a). The z-transform of the input to
G2s is zfRsG1sg  zfRG1sg  RG1z. The pulse transfer function for the system
G2s is G2z. Hence, the output Cz  RG1zG2z.
Using the basic forms shown in Figure 13.9, we can now ﬁnd the z-transform of
feedback control systems. We have shown that any system, G(s), with sampled input and
sampled output, such as that shown in Figure 13.9(a), can be represented as a sampled-data
transfer function, G(z). Thus, we want to perform block diagram manipulations that result in
subsystems, as well as the entire feedback system, that have sampled inputs and sampled
outputs. Then we can make the transformation to sampled-data transfer functions. An
example follows.
Example 13.5
Pulse Transfer Function of a Feedback System
Pulse Transfer Function of a Feedback System
PROBLEM: Find the z-transform of the system shown in Figure 13.10(a).
SOLUTION: The objective of the problem is to proceed in an orderly fashion, starting
with the block diagram of Figure 13.10(a) and reducing it to the one shown in
Figure 13.10(f).
One operation we can always perform is to place a phantom sampler at the output of
any subsystem that has a sampled input, provided that the nature of the signal sent to any
FIGURE 13.10
Steps in
block diagram reduction of a
sampled-data system
(ﬁgure continues)
(b)
C(s)
R*(s) +
–
S1
R(s)
S2
G(s)
C*(s)
S4
S1
S3
G(s)H(s)
(c)
C(s)
R*(s) +
–
S1
R(s)
S2
G(s)
C*(s)
S4
S3
H(s)
(a)
C(s)
+
–
S1
R(s)
G(s)
H(s)
Note:  Phantom samplers are shown in color.
724
Chapter 13
Digital Control Systems

other subsystem is not changed. For example in Figure 13.10(b), phantom sampler S4 can
be added. The justiﬁcation for this, of course, is that the output of a sampled-data system
can only be found at the sampling instants anyway, and the signal is not an input to any
other block.
Another operation that can be performed is to add phantom samplers S2 and S3 at the
input to a summing junction whose output is sampled. The justiﬁcation for this operation is
that the sampled sum is equivalent to the sum of the sampled inputs, provided, of course,
that all samplers are synchronized.
Next, move sampler S1 and G(s) to the right past the pickoff point, as shown in
Figure 13.10(c). The motivation for this move is to yield a sampler at the input of G(s)H(s)
to match Figure 13.9(b). Also, G(s) with sampler S1 at the input and sampler S4 at the
output matches Figure 13.9(a). The closed-loop system now has a sampled input and a
sampled output.
G(s)H(s) with samplers S1 and S3 becomes GH(z), and G(s) with samplers S1 and S4
becomes G(z), as shown in Figure 13.10(d). Also, converting R*(s) to R(z) and C*(s) to
C(z), we now have the system represented totally in the z-domain.
The equations derived in Chapter 5 for transfer functions represented with the
Laplace transform can be used for sampled-data transfer functions with only a change in
variables from s to z. Thus, using the feedback formula, we obtain the ﬁrst block of Figure
13.10(e). Finally, multiplication of the cascaded sampled-data systems yields the ﬁnal
result shown in Figure 13.10(f).
C(z)
R(z) +
–
G(z)
GH(z)
(d)
C(z)
G(z)
1 + GH(z)
( f )
R(z)
C(z)
1
1 + GH(z)
(e)
R(z)
G(z)
FIGURE 13.10
(Continued)
Skill-Assessment Exercise 13.4
PROBLEM: Find Tz  Cz=Rz for the system shown in Figure 13.11.
ANSWER: Tz 
G1G2z
1  HG1G2z
The complete solution is located at www.wiley.com/college/nise.
R(s)
G1(s)
+
–
G2(s)
C(s)
H(s)
FIGURE 13.11
Digital
system for Skill-Assessment
Exercise 13.4
13.5 Block Diagram Reduction
725

This section paralleled Chapter 5 by showing how to obtain the closed-loop, sampled-
data transfer function for a collection of subsystems. The next section parallels the
discussion of stability in Chapter 6.
13.6 Stability
The glaring difference between analog feedback control systems and digital feedback
control systems, such as the one shown in Figure 13.12, is the effect that the sampling rate
has on the transient response. Changes in sampling rate not only change the nature of the
response from overdamped to underdamped, but also can turn a stable system into an
unstable one. As we proceed with our discussion, these effects will become apparent. You
are encouraged to be on the lookout.
We now discuss the stability of digital systems from two perspectives: (1) z-plane and
(2) s-plane. We will see that the Routh-Hurwitz criterion can be used only if we perform our
analysis and design on the s-plane.
Digital System Stability via the z-Plane
In the s-plane, the region of stability is the left half-plane. If the transfer function, G(s), is
transformed into a sampled-data transfer function, G(z), the region of stability on the z-plane
can be evaluated from the deﬁnition, z  eTs. Letting s  α  jω, we obtain
z  eTs  eTαjω  eαTejωT
 eαTcos ωT  j sin ωT
 eαTωT
13.47
since cos ωT  j sin ωT  1ωT.
Each region of the s-plane can be mapped into a corresponding region on the z-plane
(see Figure 13.13). Points that have positive values of α are in the right half of the s-plane,
FIGURE 13.12
A lathe using digital numerical control
726
Chapter 13
Digital Control Systems

region C. From Eq. (13.47), the magnitudes of the mapped points are eαT > 1. Thus points
in the right half of the s-plane map into points outside the unit circle on the z-plane.
Points on the jω-axis, region B, have zero values of α and yield points on the z-plane
with magnitude = 1, the unit circle. Hence, points on the jω-axis in the s-plane map into
points on the unit circle on the z-plane.
Finally, points on the s-plane that yield negative values of α(left–half-plane roots,
region A) map into the inside of the unit circle on the z-plane.
Thus, a digital control system is (1) stable if all poles of the closed-loop transfer
function, T(z), are inside the unit circle on the z-plane; (2) unstable if any pole is outside
the unit circle and/or there are poles of multiplicity greater than one on the unit circle; and
(3) marginally stable if poles of multiplicity 1 are on the unit circle and all other poles
are inside the unit circle. Let us look at an example.
C
Im
s-plane
Re
Im
z-plane
Re
C
A
A
B
B
FIGURE 13.13
Mapping
regions of the s-plane onto
the z-plane
Example 13.6
Modeling and Stability
Modeling and Stability
PROBLEM: The missile shown in Figure 13.14(a) can be aerodynamically controlled
by torques created by the deﬂection of control surfaces on the missile’s body. The
commands to deﬂect these control surfaces come from a computer that uses tracking data
along with programmed guidance equations to determine whether the missile is on track.
The information from the guidance equations is used to develop ﬂight-control commands
for the missile. A simpliﬁed model is shown in Figure 13.14(b). Here the computer
performs the function of controller by using tracking information to develop input
commands to the missile. An accelerometer in the missile detects the actual acceleration,
which is fed back to the computer. Find the closed-loop digital transfer function for this
system and determine if the system is stable for K  20 and K  100 with a sampling
interval of T  0:1 second.
SOLUTION: The input to the control system is an acceleration command developed
by the computer. The computer can be modeled by a sample-and-hold. The s-plane model
is shown in Figure 13.14(c). The ﬁrst step in ﬁnding the z-plane model is to ﬁnd G(z), the
forward-path transfer function. From Figure 13.14(c) or (d),
Gs  1  eTs
s
Ka
ss  a
13.48
13.6 Stability
727

where a  27. The z-transform, G(z), is 1  z1zfKa=s2s  ag.
The term Ka=s2s  a is ﬁrst expanded by partial fractions, after which we ﬁnd the
z-transform of each term from Table 13.1. Hence,
z
Ka
s2s  a


 Kz
a
s2s  a


 Kz
1
s2  1=a
s  1=a
s  a


 K
Tz
z  12  z=a
z  1 
z=a
z  eaT


 K
Tz
z  12 
1  eaTz
az  1z  eaT


13.49
Thus,
Gz  K
Tz  eaT  z  1 1  eaT
a


z  1z  eaT
8
>
>
<
>
>
:
9
>
>
=
>
>
;
13.50
Control
surfaces
A/D
Computer
D/A
Amplifier
K
Airframe
dynamics
A/D
Tracking
data
Missile
acceleration
K
1 – e – Ts
s
27
s(s + 27)
+
–
Acceleration
command
Sample
Hold
Amplifier
Airframe
dynamics
Missile
acceleration
K
s
27
s(s + 27)
+
–
Acceleration
command
Sample
Amplifier
Airframe
dynamics
Missile
acceleration
(b)
(c)
(d)
(a)
1 – e– Ts
Sample
Hold
FIGURE 13.14
Finding
stability of a missile control
system: a. missile; b. conceptual
block diagram; c. block
diagram; d. block diagram with
equivalent single sampler
728
Chapter 13
Digital Control Systems

In the case of continuous systems, the determination of stability hinges upon our
ability to determine whether the roots of the denominator of the closed-loop transfer
function are in the stable region of the s-plane. The problem for high-order systems is
complicated by the fact that the closed-loop transfer function denominator is in polyno-
mial form, not factored form. The same problem surfaces with closed-loop sampled-data
transfer functions.
Tabular methods for determining stability, such as the Routh-Hurwitz method used
for higher-order continuous systems, exist for sampled-data systems. These methods, which
are not covered in this introductory chapter to digital control systems, can be used to
determine stability in higher-order digital systems. If you wish to go further into the area of
digital system stability, you are encouraged to look at Raible’s tabular method or Jury’s
stability test for determining the number of a sampled-data system’s closed-loop poles that
exist outside the unit circle and thus indicate instability.2
The following example demonstrates the effect of sampling rate on the stability of a
closed-loop feedback control system. All parameters are constant except for the sampling
interval, T. We will see that varying T will lead us through regions of stability and instability
just as though we were varying the forward-path gain, K.
Letting T  0:1 and a  27, we have
Gz  K0:0655z  0:02783
z  1z  0:0672
13.51
Finally, we ﬁnd the closed-loop transfer function, T(z), for a unity feedback system:
Tz 
Gz
1  Gz 
K0:0655z  0:02783
z2  0:0655K  1:0672z  0:02783K  0:0672
13.52
The stability of the system is found by ﬁnding the roots of the denominator. For
K  20, the roots of the denominator are 0:12  j0:78. The system is thus stable for
K  20, since the poles are inside the unit circle. For K  100, the poles are at 0.58 and
4.9. Since one of the poles is outside the unit circle, the system is unstable for K  100.
Students who are using MATLAB should now run ch13p5 in Appendix B.
You will learn how to use MATLAB to determine the range of K for
stability in a digital system. This exercise solves Example 13.6
using MATLAB.
Example 13.7
Range of T for Stability
Range of T for Stability
PROBLEM: Determine the range of sampling interval, T, that will make the system
shown in Figure 13.15 stable, and the range that will make it unstable.
SOLUTION: Since Hs  1, the z-transform of the closed-loop system, T(z), is found
from Figure 13.10 to be
Tz 
Gz
1  Gz
13.53
2 A discussion of Raible’s tabular method and Jury’s stability test can be found in Kuo (1980: 278–286).
13.6 Stability
729

We now have found, via the z-plane, that sampled systems are stable if their poles are
inside the unit circle. Unfortunately, this stability criterion precludes the use of the Routh-
Hurwitz criterion, which detects roots in the right half-plane rather than outside the unit
circle. However, another method exists that allows us to use the familiar s-plane
and the Routh-Hurwitz criterion to determine the stability of a sampled system. Let us
introduce this topic.
Bilinear Transformations
Bilinear transformations give us the ability to apply our s-plane analysis and design
techniques to digital systems. We can analyze and design on the s-plane as we have done in
Chapters 8 and 9 and then, using these transformations, convert the results to a digital
system that contains the same properties. Let us look further into this topic.
We can consider z  eTs and its inverse, s  1=T ln z, as the exact transformations
between z and s. Thus, if we have G(z) and substitute z  eTs, we obtain GeTs as the result of
converting to s. Similarly, if we have G(s) and substitute s  1=Tln z, we obtain G((1/T) ln z)
as the result of converting to z. Unfortunately, both transformations yield transcendental
functions, which we of course take care of through the rather complicated z-transform.
What we would like is a simple transformation that would yield linear arguments
when transforming in both directions (bilinear) through direct substitution and without the
complicated z-transform.
Bilinear transformations of the form
z  as  b
cs  d
13.57
To ﬁnd G(z), ﬁrst ﬁnd the partial-fraction expansion of G(s).
Gs  10 1  eTs
ss  1  101  eTs 1
s 
1
s  1


13.54
Taking the z-transform, we obtain
Gz  10z  1
z
z
z  1 
z
z  eT


 10 1  eT
z  eT
13.55
Substituting Eq. (13.55) into (13.53) yields
Tz 
101  eT
z  11eT  10
13.56
The pole of Eq. (13.56), 11eT  10, monotonically decreases from +1 to 1 for
0 < T < 0:2. For 0:2 < T < ∞; 11eT  10 monotonically decreases from 1 to 10.
Thus, the pole of T(z) will be inside the unit circle, and the system will be stable if
0 < T < 0:2. In terms of frequency, where f  1=T, the system will be stable as long as
the sampling frequency is 1=0:2  5 hertz or greater.
C(s)
R(s) +
–
Plant
Hold
T
1– e–Ts
s
10
s + 1
FIGURE 13.15
Digital
system for Example 13.7
730
Chapter 13
Digital Control Systems

and its inverse,
s  dz  b
cz  a
13.58
have been derived to yield linear variables in s and z. Different values of a, b, c, and d have
been derived for particular applications and yield various degrees of accuracy when
comparing properties of the continuous and sampled functions.
For example, in the next subsection we will see that a particular choice of coefﬁcients
will take points on the unit circle and map them into points on the jω-axis. Points outside the
unit circle will be mapped into the right half-plane, and points inside the unit circle will be
mapped into the left half-plane. Thus, we will be able to make a simple transformation from
the z-plane to the s-plane and obtain stability information about the digital system by
working in the s-plane.
Since the transformations are not exact, only the property for which they are designed
can be relied upon. For the stability transformation just discussed, we cannot expect the
resulting G(s) to have the same transient response as G(z). Another transformation will be
covered that will retain that property.
Digital System Stability via the s-Plane
In this subsection, we look at a bilinear transformation that maps jω-axis points on the
s-plane to unit-circle points on the z-plane. Further, the transformation maps right–half-
plane points on the s-plane to points outside the unit circle on the z-plane. Finally, the
transformation maps left–half-plane points on the s-plane to points inside the unit circle on
the z-plane. Thus, we are able to transform the denominator of the pulsed transfer function,
D(z), to the denominator of a continuous transfer function, D(s), and use the Routh-Hurwitz
criterion to determine stability.
The bilinear transformation
s  z  1
z  1
13.59
and its inverse
z  s  1
s  1
13.60
perform the required transformation (Kuo, 1995). We can show this fact as follows: Letting
s  α  jω and substituting into Eq. (13.60),
z  α  1  jω
α  1  jω
13.61
from which
jzj 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
α  12  ω2
q
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
α  12  ω2
q
13.62
Thus,
jzj < 1
when α < 0
(13.63a)
jzj > 1
when α > 0
(13.63b)
13.6 Stability
731

and
jzj  1
when α  0
(13.63c)
Let us look at an example that shows how the stability of sampled systems can be found
using this bilinear transformation and the Routh-Hurwitz criterion.
Example 13.8
Stability via Routh-Hurwitz
Stability via Routh-Hurwitz
PROBLEM: Given Tz  Nz=Dz, where Dz  z3  z2  0:2z  0:1, use the
Routh-Hurwitz criterion to ﬁnd the number of z-plane poles of T(z) inside, outside, and
on the unit circle. Is the system stable?
SOLUTION: Substitute Eq. (13.60) into Dz  0 and obtain3
s3  19s2  45s  17  0
13.64
The Routh table for Eq. (13.64), Table 13.3, shows one root in the right–half-plane
and two roots in the left–half-plane. Hence, T(z) has one pole outside the unit circle, no
poles on the unit circle, and two poles inside the unit circle. The system is unstable because
of the pole outside the unit circle.
TABLE 13.3
Routh table for Example 13.8
s3
1
45
s2
19
17
s1
45.89
0
s0
17
0
Skill-Assessment Exercise 13.5
PROBLEM: Determine the range of sampling interval, T, that will make the system
shown in Figure 13.16 stable.
ANSWER:
0 < T < 0:1022 second
The complete solution is located at www.wiley.com/college/nise.
C(s)
R(s) +
–
Plant
Hold
T
1– e–Ts
s
20
s + 5
FIGURE 13.16
Digital
system for Skill-Assessment
Exercise 13.5
3 Symbolic math software, such as MATLAB’s Symbolic Math Toolbox, is recommended to reduce the labor
required to perform the transformation.
732
Chapter 13
Digital Control Systems

In this section, we covered the concepts of stability for digital systems. Both z- and
s-plane perspectives were discussed. Using a bilinear transformation, we are able to use the
Routh-Hurwitz criterion to determine stability.
The highlight of the section is that sampling rate (along with system parameters, such
as gain and component values) helps to determine or destroy the stability of a digital system.
In general, if the sampling rate is too slow, the closed-loop digital system will be unstable.
We now move from stability to steady-state errors, paralleling our previous discussion of
steady-state errors in analog systems.
13.7 Steady-State Errors
We now examine the effect of sampling upon the steady-state error for digital systems. Any
general conclusion about the steady-state error is difﬁcult because of the dependence of
those conclusions upon the placement of the sampler in the loop. Remember that the
position of the sampler could change the open-loop transfer function. In the discussion of
analog systems, there was only one open-loop transfer function, G(s), upon which the
general theory of steady-state error was based and from which came the standard deﬁnitions
of static error constants. For digital systems, however, the placement of the sampler changes
the open-loop transfer function and thus precludes any general conclusions. In this section,
we assume the typical placement of the sampler after the error and in the position of the
cascade controller, and we derive our conclusions accordingly about the steady-state error of
digital systems.
Consider the digital system in Figure 13.17(a), where the digital computer is
represented by the sampler and zero-order hold. The transfer function of the plant is
represented by G1(s) and the transfer function of the z.o.h. by 1  eTs=s. Letting G(s)
equal the product of the z.o.h. and G1(s), and using the block diagram reduction techniques
for sampled-data systems, we can ﬁnd the sampled error, E*s  Ez. Adding synchronous
samplers at the input and the feedback, we obtain Figure 13.17(b). Pushing G(s) and its input
sampler to the right past the pickoff point yields Figure 13.17(c). Using Figure 13.9(a), we
can convert each block to its z-transform, resulting in Figure 13.17(d).
From this ﬁgure, Ez  Rz  EzGz, or
Ez 
Rz
1  Gz
13.65
The ﬁnal value theorem for discrete signals states that
e*∞  lim
z®11  z1Ez
13.66
Skill-Assessment Exercise 13.6
PROBLEM: Given
Tz  Nz=Dz,
where
Dz  z3  z2  0:5z  0:3,
use
the
Routh-Hurwitz criterion to ﬁnd the number of z-plane poles of T(z) inside, outside, and
on the unit circle. Is the system stable?
ANSWER: T(z) has one pole outside the unit circle, no poles on the unit circle, and two
poles inside the unit circle. The system is unstable.
The complete solution is located at www.wiley.com/college/nise.
13.7 Steady-State Errors
733

where e*∞ is the ﬁnal sampled value of e(t), or (alternatively) the ﬁnal value of
e(kT).4
Using the ﬁnal value theorem on Eq. (13.65), we ﬁnd that the sampled steady-state
error, e*∞, for unity negative-feedback systems is
e*∞  lim
z®11  z1Ez  lim
z®11  z1
Rz
1  Gz
13.67
Equation (13.67) must now be evaluated for each input: step, ramp, and parabola.
Unit Step Input
For a unit step input, Rs  1=s. From Table 13.1,
Rz 
z
z  1
13.68
Substituting Eq. (13.68) into Eq. (13.67), we have
e*∞ 
1
1  lim
z®1 Gz
13.69
(b)
C(s)
R*(s) +
–
T
R(s)
T
G(s)
C*(s)
T
T
T
G(s)
(c)
C(z)
R(z) +
–
G(z)
G(z)
(d)
C(s)
R*(s) +
–
T
R(s)
T
G(s)
T
T
(a)
C(s)
+
–
T
R(s)
G1(s)
E*(s)
E*(s)
E*(s)
1 – e–Ts
s
E*(s)
E*(s)
E(z)
Note:  Phantom samplers are shown in color.
C*(s)
FIGURE 13.17
a. Digital
feedback control system for
evaluation of steady-state
errors; b. phantom samplers
added; c. pushing G(s) and its
samplers to the right past the
pickoff point; d. z-transform
equivalent system
4 See Ogata (1987: 59) for a derivation.
734
Chapter 13
Digital Control Systems

Deﬁning the static error constant, Kp, as
Kp  lim
z®1Gz
13.70
we rewrite Eq. (13.69) as
e*∞ 
1
1  Kp
13.71
Unit Ramp Input
For a unit ramp input, Rz  Tz=z  12. Following the procedure for the step input, you
can derive the fact that
e*∞  1
Kv
13.72
where
Kv  1
T lim
z®1 z  1Gz
13.73
Unit Parabolic Input
For a unit parabolic input, Rz  T2z=z  1=2z  13. Similarly,
e*∞  1
Ka
13.74
where
Ka  1
T2 lim
z®1 z  12Gz
13.75
Summary of Steady-State Errors
The equations developed above for e*∞, Kp, Kv, and Ka are similar to the equations
developed for analog systems. Whereas multiple pole placement at the origin of the s-plane
reduced steady-state errors to zero in the analog case, we can see that multiple pole
placement at z  1 reduces the steady-state error to zero for digital systems of the type
discussed in this section. This conclusion makes sense when one considers that s  0 maps
into z  1 under z  eTs.
For example, for a step input, we see that if G(z) in Eq. (13.69) has one pole at z  1,
the limit will become inﬁnite, and the steady-state error will reduce to zero.
For a ramp input, if G(z) in Eq. (13.73) has two poles at z  1, the limit will become
inﬁnite, and the error will reduce to zero.
Similar conclusions can be drawn for the parabolic input and Eq. (13.75). Here, G(z)
needs three poles at z  1 in order for the steady-state error to be zero. Let us look at
an example.
13.7 Steady-State Errors
735

Example 13.9
Finding Steady-State Error
Finding Steady-State Error
PROBLEM: For step, ramp, and parabolic inputs, ﬁnd the steady-state error for the
feedback control system shown in Figure 13.17(a) if
G1s 
10
ss  1
13.76
SOLUTION: First ﬁnd G(s), the product of the z.o.h. and the plant.
Gs  101  eTs
s2s  1
 101  eTs 1
s2  1
s 
1
s  1


13.77
The z-transform is then
Gz  101  z1
Tz
z  12 
z
z  1 
z
z  eT


 10
T
z  1  1  z  1
z  eT


13.78
For a step input,
Kp  lim
z®1 Gz  ∞;
e*∞ 
1
1  Kp
 0
13.79
For a ramp input,
Kv  1
T lim
z®1z  1Gz  10;
e*∞  1
Kv
 0:1
13.80
For a parabolic input,
Ka  1
T2 lim
z®1 z  12Gz  0;
e*∞  1
Ka
 ∞
13.81
You will notice that the answers obtained are the same as the results obtained for the
analog system. However, since stability depends upon the sampling interval, be sure to
check the stability of the system after a sampling interval is established before making
steady-state error calculations.
Students who are using MATLAB should now run ch13p6 in Appendix B.
You will learn how to use MATLAB to determine Kp, Kv, and Ka in a
digital system as well as check the stability. This exercise sol-
ves Example 13.9 using MATLAB.
Skill-Assessment Exercise 13.7
PROBLEM: For step, ramp, and parabolic inputs, ﬁnd the steady-state error for the
feedback control system shown in Figure 13.17(a) if
G1s 
20s  3
s  4s  5
Let T  0:1 second. Repeat for T  0:5 second.
ANSWER: For T  0:1 second, Kp  3; Kv  0, and Ka  0; for T  0:5 second, the
system is unstable.
The complete solution is located at www.wiley.com/college/nise.
736
Chapter 13
Digital Control Systems

In this section, we discussed and evaluated the steady-state error of digital systems for
step, ramp, and parabolic inputs. The equations for steady-state error parallel those for
analog systems. Even the deﬁnitions of the static error constants were similar. Poles at the
origin of the s-plane for analog systems were replaced with poles at +1 on the z-plane to
improve the steady-state error. We continue our parallel discussion by moving into a
discussion of transient response and the root locus for digital systems.
13.8 Transient Response on the z-Plane
Recall that for analog systems a transient response requirement was speciﬁed by selecting a
closed-loop, s-plane pole. In Chapter 8, the closed-loop pole was on the existing root locus,
and the design consisted of a simple gain adjustment. If the closed-loop pole was not on the
existing root locus, then a cascade compensator was designed to reshape the original
root locus to go through the desired closed-loop pole. A gain adjustment then completed
the design.
In the next two sections, we want to parallel the described analog methods and apply
similar techniques to digital systems. For this introductory chapter, we will parallel the
discussion through design via gain adjustment. The design of compensation is left to you to
pursue in an advanced course.
Chapter 4 established the relationships between transient response and the s-plane.
We saw that vertical lines on the s-plane were lines of constant settling time, horizontal lines
were lines of constant peak time, and radial lines were lines of constant percent overshoot.
In order to draw equivalent conclusions on the z-plane, we now map those lines
through z  esT.
The vertical lines on the s-plane are lines of constant settling time and are character-
ized by the equation s  σ1  jω, where the real part, σ1  4=Ts, is constant and is in the
left–half-plane for stability. Substituting this into z  esT, we obtain
z  eσ1TejωT  r1ejωT
13.82
Equation (13.82) denotes concentric circles of radius r1. If σ1 is positive, the circle has a
larger radius than the unit circle. On the other hand, if σ1 is negative, the circle has a smaller
radius than the unit circle. The circles of constant settling time, normalized to the sampling
interval, are shown in Figure 13.18 with radius eσ1T  e4=Ts=T. Also, Ts=T  4=lnr,
where r is the radius of the circle of constant settling time.
The horizontal lines are lines of constant peak time. The lines are characterized by the
equation s  σ  jω1, where the imaginary part, ω1  π=Tp, is constant. Substituting this
into z  esT, we obtain
z  eσTejω1T  eσTejθ1
13.83
Equation (13.83) represents radial lines at an angle of θ1. If σ is negative, that section of the
radial line lies inside the unit circle. If σ is positive, that section of the radial line lies outside
the unit circle. The lines of constant peak time normalized to the sampling interval are
shown in Figure 13.18. The angle of each radial line is ω1T  θ1  π=Tp=T, from which
Tp=T  π=θ1.
Finally, we map the radial lines of the s-plane onto the z-plane. Remember, these
radial lines are lines of constant percent overshoot on the s-plane. From Figure 13.19, these
radial lines are represented by
σ
ω  tansin1ζ  
ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
13.84
13.8 Transient Response on the z-Plane
737

Hence,
s  σ  jω  ω
ζ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
 jω
13.85
Transforming Eq. (13.85) to the z-plane yields
z  esT  eωT ζ/ ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ2
p


e jωT  eωT ζ/ ﬃﬃﬃﬃﬃﬃﬃﬃ
1ζ 2
p


ωT
13.86
 = 0.3
–0.4
Im
Re
Tp/T = 20
Tp/T = 10
Tp/T = 5
Tp/T = 7
Tp/T = 4
Tp/T = 3
z
 = 0
–1
–1
Ts/T = 3
Ts/T = 5
–0.2
–0.4
–0.6
–0.8
Ts/T = 10
Ts/T = 20
1
0.8
0.6
0.4
0
0.2
–0.8
–0.2
 = 0.5
 = 0.7
 = 0.1
–0.6
 = 0.9
1
0.8
0.6
 = 0.2
0.4
0.2
Ts/T = 2
ζ
ζ
ζ
ζ
ζ
ζ
ζ
FIGURE 13.18
Constant
damping ratio, normalized
settling time, and normalized
peak time plots on the z-plane
Constant percent
overshoot line
j
s-plane
σ
sin–1
cos–1
ω
s = σ + jω
ζ
ζ
FIGURE 13.19
The s-plane
sketch of constant percent
overshoot line
738
Chapter 13
Digital Control Systems

Thus, given a desired damping ratio, ζ, Eq. (13.86) can be plotted on the z-plane
through a range of ωT as shown in Figure 13.18. These curves can then be used as constant
percent overshoot curves on the z-plane.
This section has set the stage for the analysis and design of transient response for
digital systems. In the next section, we apply the results to digital systems using the
root locus.
13.9 Gain Design on the z-Plane
In this section, we plot root loci and determine the gain required for stability as
well as the gain required to meet a transient response requirement. Since the open-
loop and closed-loop transfer functions for the generic digital system shown in
Figure 13.20 are identical to the continuous system except for a change in
variables from s to z, we can use the same rules for plotting a root locus.
However, from our previous discussion, the region of stability on the z-plane
is within the unit circle and not the left half-plane. Thus, in order to determine
stability, we must search for the intersection of the root locus with the unit circle
rather than the imaginary axis.
In the last section, we derived the curves of constant settling time, peak time,
and damping ratio. In order to design a digital system for transient response, we
ﬁnd the intersection of the root locus with the appropriate curves as they appear on
the z-plane in Figure 13.18. Let us look at the following example.
R(z)
–
G(z)
H(z)
C(z)
+
FIGURE 13.20
Generic digital feedback
control system
Example 13.10
Stability Design via Root Locus
Stability Design via Root Locus
PROBLEM: Sketch the root locus for the system shown in Figure 13.21. Also, determine
the range of gain, K, for stability from the root locus plot.
SOLUTION: Treat the system as if z were s, and sketch the root locus. The result is
shown in Figure 13.22. Using the root locus program discussed in Appendix H.2 at
www.wiley.com/college/nise, search along the unit circle for 180°. Identiﬁcation of the
gain, K, at this point yields the range of gain for stability. Using the program, we ﬁnd
that the intersection of the root locus with the unit circle is 160°. The gain at this point
is 0.5. Hence, the range of gain for stability is 0 < K < 0:5.
Students who are using MATLAB should now run ch13p7 in Appendix B.
You will learn how to use MATLAB to plot a root locus on the
z-plane as well as superimpose the unit circle. You will learn
how to select interactively the intersection of the root locus
and the unit circle to obtain the value of gain for stability.
This exercise solves Example 13.10 using MATLAB.
K(z + 1)
(z – 1)(z – 0.5)
+
–
R(z)
C(z)
FIGURE 13.21
Digital
feedback control for
Example 13.10
13.9 Gain Design on the z-Plane
739

In the next example, we design the value of gain, K, in Figure 13.21 to meet a transient
response speciﬁcation. The problem is handled similarly to the analog system design,
where we found the gain at the point where the root locus crossed the speciﬁed damping
ratio, settling time, or peak time curve. In digital systems, these curves are as shown in
Figure 13.18. In summary, then, draw the root locus of the digital system and superimpose
the curves of Figure 13.18. Then ﬁnd out where the root locus intersects the desired damping
ratio, settling time, or peak time curve and evaluate the gain at that point. In order to simplify
the calculations and obtain more accurate results, draw a radial line through the point where
the root locus intersects the appropriate curve. Measure the angle of this line and use the root
locus program in Appendix H.2 at www.wiley.com/college/nise to search along this radial
line for the point of intersection with the root locus.
–3.00
–1.50
0
1.50
3.00
–3.00
–2.25
2.25
3.00
z-plane
Unit circle
Root locus
Re
Im
–0.75
0.75
–1.50
1.50
FIGURE 13.22
Root locus for the system of Figure 13.21
Example 13.11
Transient Response Design via Gain Adjustment
Transient Response Design via Gain Adjustment
PROBLEM: For the system of Figure 13.21, ﬁnd the value of gain, K, to yield a
damping ratio of 0.7.
SOLUTION: Figure 13.23 shows the constant damping ratio curves superimposed over
the root locus for the system as determined from the last example. Draw a radial line
from theorigintotheintersection oftherootlocuswiththe0.7dampingratiocurve(a16.62°
line). The root locus program discussed in Appendix H.2 at www.wiley.com/college/nise
can now be used to obtain the gain by searching along a 16.62° line for 180°, the intersection
with the root locus. The results of the program show that the gain, K, is 0.0627 at
0:719  j0:215, the point where the 0.7 damping ratio curve intersects the root locus.
740
Chapter 13
Digital Control Systems

We can now check our design by ﬁnding the unit sampled step response of the
system of Figure 13.21. Using our design, K  0:0627, along with Rz  z=z  1, a
sampled step input, we ﬁnd the sampled output to be
Cz  RzGz
1  Gz 
0:0627z2  0:0627z
z3  2:4373z2  2z  0:5627
13.87
Performing the indicated division, we obtain the output valid at the sampling instants, as
shown in Figure 13.24. Since the overshoot is approximately 5%, the requirement of a 0.7
damping ratio has been met. You should remember, however, that the plot is valid only at
integer values of the sampling instants.
Students who are using MATLAB should now run ch13p8 in Appendix B.
You will learn how to use MATLAB to plot a root locus on the z-plane
as well as superimpose a grid of damping ratio curves. You will
learn how to obtain the gain and a closed-loop step response of a
digital system after interactively selecting the operating point
on the root locus. This exercise solves Example 13.11 using MATLAB.
z-plane
= 0.7
Root locus
16.62°
0.1
0.3
0.5
0.9
1.1
Im
Re
0.5
0.4
0.3
0.2
0.1
0
0.2
0.4
0.6
0.8
1.0
1.2
–0.1
–0.2
–0.3
–0.4
–0.5
1.3
0.7
ζ
FIGURE 13.23
Root locus
for the system of Figure 13.21
with constant 0.7 damping ratio
curve
0.1
0
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
 1.0
1.1
0
2
4
6
8
10
12
14
16
18
20
Sampling instant
c*(t)
Note:  Valid only at integer values of sampling instant
FIGURE 13.24
Sampled step
response of the system of
Figure 13.21 with K  0:0627
13.9 Gain Design on the z-Plane
741

Simulink provides an alternative method of simulating digital
systems to obtain the time response. Students who are performing
the MATLAB exercises and want to explore the added capability of
Simulink should now consult Appendix C, Simulink Tutorial. Exam-
ple C.4 in the tutorial shows how to use Simulink to simulate
digital systems.
MATLAB’s LTI Viewer provides another method of simulating digital
systems to obtain the time response. Students who are performing
the MATLAB exercises and want to explore the added capability of
MATLAB’s LTI Viewer should now consult Appendix E at www.wiley
.com/college/nise, which contains a tutorial on the LTI Viewer as
well as some examples. One of the illustrative examples, Example
E.5, ﬁnds the closed-loop step response of a digital system using
the LTI Viewer.
In this section, we used the root locus and gain adjustment to design the transient
response of a digital system. This method suffers the same drawbacks as when it was applied
to analog systems; namely, if the root locus does not intersect a desired design point, then a
simple gain adjustment will not accomplish the design objective. Techniques to design
compensation for digital systems can then be applied.
13.10 Cascade Compensation via the s-Plane
In previous sections of this chapter, we analyzed and designed digital systems directly
in the z-domain up to and including design via gain adjustment. We are now ready to
design digital compensators, such as those covered in Chapters 9 and 11. Rather than
continuing on this path of design directly in the z-domain, we depart by covering
analysis and design techniques that allow us to make use of previous chapters by
designing on the s-plane and then transforming our s-plane design to a digital
implementation. We covered one aspect of s-plane analysis in Section 13.6, where
Skill-Assessment Exercise 13.8
PROBLEM: For the system of Figure 13.20 where Hz  1 and
Gz 
Kz  0:5
z  0:25z  0:75
ﬁnd the value of gain, K, to yield a damping ratio of 0.5.
ANSWER: K  0:31
The complete solution is at www.wiley.com/college/nise.
TryIt 13.3
Use MATLAB, the Control System
Toolbox, and the following statements to
solve Skill-Assessment Exercise 13.8.
Gz=zpk(0.5,[0.25,0.75],...
1,[])
rlocus(Gz)
zgrid(0.5, [])
[K,p]=rlocﬁnd(Gz)
Note: When the root locus appears, click
on the intersection of the 0.5 damping
ratio curve and the root locus to calculate
the gain.
742
Chapter 13
Digital Control Systems

we used a bilinear transformation to analyze stability. We now continue with
s-plane analysis and design by applying it to cascade compensator design. Direct
design of compensators on the z-plane is left for a dedicated course in digital control
systems.
Cascade Compensation
In order to perform design in the s-plane and then convert the continuous compensator to a
digital compensator, we need a bilinear transformation that will preserve, at the sampling
instants, the response of the continuous compensator. The bilinear transformation covered
in Section 13.6 will not meet that requirement. A bilinear transformation that can be
performed with hand calculations and yields a digital transfer function whose output
response at the sampling instants is approximately the same as the equivalent analog transfer
function is called the Tustin transformation. This transformation is used to transform the
continuous compensator, Gc(s), to the digital compensator, Gc(z). The Tustin transformation
is given by5
s  2z  1
Tz  1
13.88
and its inverse by
z 
 s  2
T


s  2
T

 
1  T
2 s
1  T
2 s
13.89
As the sampling interval, T, gets smaller (higher sampling rate), the designed digital
compensator’s output yields a closer match to the analog compensator. If the sampling rate is
not high enough, there is a discrepancy at higher frequencies between the digital and analog
ﬁlters’ frequency responses. Methods are available to correct the discrepancy, but they are
beyond the scope of our discussion. The interested reader should investigate the topic of
prewarping, covered in books dedicated to digital control and listed in the Bibliography at
the end of this chapter.
Astrom and Wittenmark (1984) have developed a guideline for selecting the sampling
interval, T. Their conclusion is that the value of T in seconds should be in the range
0:15=ωΦM to 0:5=ωΦM, where ωΦM is the zero dB frequency (rad/s) of the magnitude
frequency response curve for the cascaded analog compensator and plant.
In the following example, we will design a compensator, Gc(s), to meet the required
performance speciﬁcations. We will then use the Tustin transformation to obtain the model
for an equivalent digital controller. In the next section, we will show how to implement the
digital controller.
5 See Ogata (1987: 315–318) for a derivation.
13.10 Cascade Compensation via the s-Plane
743

Example 13.12
Digital Cascade Compensator Design
Digital Cascade Compensator Design
PROBLEM: For the digital control system of Figure 13.25(a), where
Gps 
1
ss  6s  10
13.90
design a digital lead compensator, Gc(z), as shown in Figure 13.25(c), so that the system
will operate with 20% overshoot and a settling time of 1.1 seconds. Create your design
in the s-domain and transform the compensator to the z-domain.
SOLUTION: Using Figure 13.25(b), design a lead compensator using the techniques
described in Chapter 9 or 11. The design was created as part of Example 9.6, where we
found that the lead compensator was
Gcs  1977s  6
s  29:1
13.91
Gc(z)
Digital
lead
compensator
(c)
Gp(z)
Plant with
sample-and-hold
+
–
R(z)
E(z)
C(z)
Gc(s)
Lead
compensator
(b)
Gp(s)
Plant
+
–
R(s)
E(s)
C(s)
D/A
A/D
Digital
computer
Digital
controller
(a)
Gp(s)
Plant
+
–
R(s)
E(s)
C(s)
FIGURE 13.25
a. Digital control system showing the digital computer performing
compensation; b. continuous system used for design; c. transformed digital system
744
Chapter 13
Digital Control Systems

Using Eqs. (13.90) and (13.91), we ﬁnd that the zero dB frequency, ωΦM, for Gp(s)Gc(s) is
5.8 rad/s.Using the guideline described by Astrom andWittenmark (1984), the lowest value
of T should be in the range 0:15=ωΦM  0:026 to 0:5=ωΦM  0:086 second. Let us use
T  0:01 second.
Substituting Eq. (13.88) into Eq. (13.91) with T  0:01 second yields
Gcz  1778z  1674
z  0:746
13.92
The z-transform of the plant and zero-order hold, found by the method discussed in
Section 13.4 with T  0:01 second, is
Gpz  1:602  107z2  6:156  107z  1:478  107
z3  2:847z2  2:699z  0:8521
13.93
The time response in Figure 13.26 (T  0:01 s) shows that the compensated
closed-loop system meets the transient response requirements. The ﬁgure also shows
the response for a compensator designed with sampling times at the extremes of Astrom
and Wittenmark’s guideline.
Students who are using MATLAB should now run ch13p9 in Appendix B.
You will learn how to use MATLAB to design a digital lead compen-
sator using the Tustin transformation. This exercise solves
Example 13.12 using MATLAB.
1.4
T = 0.086 s
T = 0.026 s
T = 0.01 s
1.2
1
0.8
c*(t)
0.6
0.4
0.2
0
0
0.5
1
Time (seconds)
Note: Valid only at integer values of sampling instant
1.5
2
FIGURE 13.26
Closed-loop response for the compensated system of Example 13.12 showing
effect of three different sampling frequencies
13.10 Cascade Compensation via the s-Plane
745

Now that we have learned how to design a digital cascade compensator, Gc(z), the
next section will teach us how to use the digital computer to implement it.
13.11 Implementing the Digital Compensator
The controller, Gc(z), can be implemented directly via calculations within the digital
computer in the forward path as shown in Figure 13.27. Let us now derive a numerical
algorithm that the computer can use to emulate the compensator. We will ﬁnd an expression
for the computer’s sampled output, x*t, whose transforms are shown in Figure 13.27 as
X(z). We will see that this expression can be used to program the digital computer to emulate
the compensator.
Consider a second-order compensator, Gc(z),
Gcz  Xz
Ez  a3z3  a2z2  a1z  a0
b2z2  b1z  b0
13.94
Cross-multiplying,
b2z2  b1z  b0X z  a3z3  a2z2  a1z  a0Ez
13.95
Solving for the term with the highest power of z operating on the output, X(z),
b2z2X z  a3z3  a2z2  a1z  a0Ez  b1z  b0X z
13.96
Skill-Assessment Exercise 13.9
PROBLEM: In Example 11.3, a lead compensator was designed for a unity feedback
system whose plant was
Gs 
100K
ss  36s  100
Thedesignspeciﬁcationswereasfollows:percentovershoot=20%,peaktime=0.1second,
and Kv  40. In order to meet the requirements, the design yielded K  1440 and a lead
compensator,
Gcs  2:38 s  25:3
s  60:2
If the system is to be computer controlled, ﬁnd the digital controller, Gc(z).
ANSWER: Gcz  2:34 z  0:975
z  0:9416 ; T  0:001 second
The complete solution is at www.wiley.com/college/nise.
Gc(z)
G(z)
Plant with
sample-and-hold
Computer
emulating compensator
E(z)
X(z)
C(z)
FIGURE 13.27
Block
diagram showing computer
emulation of a digital
compensator
746
Chapter 13
Digital Control Systems

Dividing by the coefﬁcient of X(z) on the left-hand side of Eq. (13.96) yields
Xz 
a3
b2
z  a2
b2
 a1
b2
z1  a0
b2
z2


Ez 
b1
b2
z1  b0
b2
z2


Xz
13.97
Finally, taking the inverse z-transform,
x*t  a3
b2
e*t  T  a2
b2
e*t  a1
b2
e*t  T  a0
b2
e*t  2T
 b1
b2
x*t  T  b0
b2
x*t  2T
13.98
We can see from this equation that the present sample of the compensator output, x*t, is a
function of future e*t  T, present e*t, past e*t  T, and e*t  2T samples of
e(t), along with past values of the output, x*t  T and x*t  2T. Obviously, if we are to
physically realize this compensator, the output sample cannot be dependent upon future
values of the input. Hence, to be physically realizable, a3 must equal zero for the future value
of e(t) to be zero. We conclude that the numerator of the compensator’s transfer function
must be of equal or lower order than the denominator in order that the compensator be
physically realizable.
Now assume that a3 does indeed equal zero. Equation (13.98) now becomes
x*t  a2
b2
e*t  a1
b2
e*t  T  a0
b2
e*t  2T  b1
b2
x*t  T  b0
b2
x*t  2T
13.99
Hence, the output sample is a function of current and past input samples of the input as well
as past samples of the output. Figure 13.28 shows the ﬂowchart of the compensator from
which a program can be written for the digital computer.7 The ﬁgure shows that the
compensator can be implemented by storing several successive values of the input and
output. The output is then formed by a weighted linear combination of these stored
variables. Let us now look at a numerical example.
Delay
T seconds
e*(t)
e*(t–T)
Delay
T seconds
e*(t–2T)
+
+
+
+
a0
b2
a1
b2
a2
b2
Delay
T seconds
x*(t)
x*(t–T)
Delay
T seconds
x*(t–2T)
–
–
b0
b2
b1
b2
FIGURE 13.28
Flowchart for
a second-order digital
compensator6
6 Adapted from Chassing, R. Digital Signal Processing (New York: John Wiley & Sons, Inc., 1999), p. 137. 1999
John Wiley & Sons, Inc.
7 For an excellent discussion on basic ﬂowcharts to represent digital compensators, including the representation
shown in Figure 13.28 and alternative ﬂowcharts with half as many delays, see Chassaing (1999, pp. 135–143).
13.11 Implementing the Digital Compensator
747

Example 13.13
Digital Cascade Compensator Implementation
Digital Cascade Compensator Implementation
PROBLEM: Develop a ﬂowchart for the digital compensator deﬁned by Eq. (13.100).
Gcz  Xz
Ez 
z  0:5
z2  0:5z  0:7
13.100
SOLUTION: Cross-multiply and obtain
z2  0:5z  0:7X z  z  0:5Ez
13.101
Solve for the highest power of z operating on the output, X(z),
z2Xz  z  0:5Ez  0:5z  0:7X z
13.102
Solving for X(z) on the left-hand side,
Xz  z1  0:5z2Ez  0:5z1  0:7z2X z
13.103
Implementing Eq. (13.103) with the ﬂowchart of Figure 13.29 completes the design.
+
+
+
–
–
Delay
T seconds
Delay
T seconds
Delay
T seconds
Delay
T seconds
e*(t)
e*(t–T)
x*(t–T)
x*(t–2T)
x*(t)
e*(t–2T)
1
0.5
0.7
–0.5
FIGURE 13.29
Flowchart to implement8
Gcz 
z  0:5
z2  0:5z  0:7
Skill-Assessment Exercise 13.10
PROBLEM: Draw a ﬂowchart from which the compensator
Gcz  1899z2  3761z  1861
z2  1:908z  0:9075
can be programmed if the sampling interval is 0.1 second.
ANSWER: The complete solution is at www.wiley.com/college/nise.
8 Adapted from Chassing, R. Digital Signal Processing (New York: John Wiley & Sons, Inc., 1999), p. 137. 1999
John Wiley & Sons, Inc.
748
Chapter 13
Digital Control Systems

In this section, we learned how to implement a digital compensator. The resulting
ﬂowchart can serve as the design of a digital computer program for the computer in the loop.
The design consists of delays that can be thought of as storage for each sampled value of
input and output. The stored values are weighted and added. The engineer then can
implement the design with a computer program.
In the next section, we will put together the concepts of this chapter as we apply the
principles of digital control system design to our antenna azimuth control system.
Case Studies
Antenna Control: Transient Design via Gain
Antenna Control: Transient Design via Gain
We now demonstrate the objectives of this chapter by turning to our ongoing antenna
azimuth position control system. We will show where the computer is inserted in the loop,
model the system, and design the gain to meet a transient response requirement. Later, we
will design a digital cascade compensator.
The computer will perform two functions in the loop. First, the computer will be
used as the input device. It will receive digital signals from the keyboard in the form of
commands, and digital signals from the output for closed-loop control. The keyboard will
replace the input potentiometer, and an analog-to-digital (A/D) converter along with a
unity gain feedback transducer will replace the output potentiometer.
Figure 13.30(a) shows the original analog system, and Figure 13.30(b) shows the
system with the computer in the loop. Here the computer is receiving digital signals from
two sources: (1) the input via the keyboard or other tracking commands and (2) the output
via an A/D converter. The plant is receiving signals from the digital computer via a digital-
to-analog (D/A) converter and the sample-and-hold.
Figure 13.30(b) shows some simplifying assumptions we have made. The power
ampliﬁer’s pole is assumed to be far enough away from the motor’s pole that we can
represent the power ampliﬁer as a pure gain equal to its dc gain of unity. Also, we have
absorbed any preampliﬁer and potentiometer gain in the computer and its associated D/A
converter.
PROBLEM: Design the gain for the antenna azimuth position control system shown in
Figure 13.30(b) to yield a closed-loop damping ratio of 0.5. Assume a sampling interval
of T  0:1 second.
0.64
K
100
s + 100
2.083
s(s + 1.71)
0.1
i
Pot
Preamp
Power
amp
Motor & load
Gears
o
Sample-and-
hold
0.1
Power
amp
Motor & load
Gears
o
A/D
i
1
2.083
s(s + 1.71)
A/D
(a)
(b)
+
–
+
–
Computer
& D/A
θ
θ
θ
θ
FIGURE 13.30
Antenna
control system: a. analog
implementation; b. digital
implementation
Case Studies
749

SOLUTION: Modeling the System: Our ﬁrst objective is to model the system in the
z-domain. The forward transfer function, G(s), which includes the sample-and-hold, power
ampliﬁer, motor and load, and the gears, is
Gs  1  eTs
s
0:2083
ss  a  0:2083
a
1  eTs
a
s2s  a
13.104
where a  1:71, and T  0:1.
Since the z-transform of 1  eTs is 1  z1 and, from Example 13.6, the
z-transform of a=s2s  a is
z
a
s2s  a



Tz
z  12 
1  eaTz
az  1z  eaT


13.105
the z-transform of the plant, G(z), is
Gz  0:2083
a
1  z1z
a
s2s  a


 0:2083
a2
aT  1  eaTz  1  eaT  aTeaT
z  1z  eaT


13.106
Substituting the values for a and T, we obtain
Gz  9:846  104z  0:945
z  1z  0:843
13.107
Figure 13.31 shows the computer and plant as part of the digital feedback control system.
Designing for Transient Response: Now that the modeling in the z-domain is
complete, we can begin to design the system for the required transient response. We
superimposetherootlocusovertheconstantdampingratiocurvesinthez-plane,asshownin
Figure13.32.Alinedrawnfromtheorigintotheintersectionformsan8.58°angle.Searching
along this line for 180°, we ﬁnd the intersection to be 0:915  j0:138, with a loop gain,
9:846  104K, of 0.0135. Hence, K  13:71.
Checking the design by ﬁnding the unit sampled step response of the closed-loop
system yields the plot of Figure 13.33, which exhibits 20% overshoot ζ  0:456.
CHALLENGE: We now give you a case study to test your knowledge of this chapter’s
objectives: You are given the antenna azimuth position control system shown on the front
endpapers, Conﬁguration 2. Do the following:
a. Convert the system into a digital system with T  0:1 second. For the purposes of the
conversion, assume that the potentiometers are replaced with unity gain transducers.
Neglect power ampliﬁer dynamics.
b. Design the gain, K, for 16.3% overshoot.
c. For your designed value of gain, ﬁnd the steady-state error for a unit ramp input.
d. Repeat Part b using MATLAB.
9.846 × 10–4(z + 0.945)
(z – 1)(z – 0.843)
K
Computer
Plant = G(z)
R(z) +
–
C(z)
FIGURE 13.31
Analog
antenna azimuth position
control system converted to a
digital system
750
Chapter 13
Digital Control Systems

Antenna Control: Digital Cascade Compensator Design
Antenna Control: Digital Cascade Compensator Design
PROBLEM: Design a digital lead compensator to reduce the settling time by a factor of
2.5 from that obtained for the antenna azimuth control system in the previous Case
Study problem in this chapter.
SOLUTION: Figure 13.34 shows a simpliﬁed block diagram of the continuous
system, neglecting power ampliﬁer dynamics and assuming that the potentiometers
are replaced with unity gain transducers as previously explained.
We begin with an s-plane design. From Figure 13.33, the settling time is about
5 seconds. Thus, our design requirements are a settling time of 2 seconds and a damping
ratio of 0.5. The natural frequency is ωn  4=ζTs  4 rad/s. The compensated dominant
poles are located at ζωn  jωn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  ζ2
p
 2  j3:464.
Designing a lead compensator zero to cancel the plant pole on the s-plane at 1.71
yields a lead compensator pole at 4. Hence the lead compensator is given by
Gcs  s  1:71
s  4
13.108
0.2
0.4
0.6
0.8
1
–0.6
–0.4
–0.2
0.2
z-plane
Root locus
   = 0.5
8.58
Im
Re
0.4
0.6
0
0
ζ
FIGURE 13.32
Root locus superimposed over
constant damping ratio curve
c*(t)
0
1
2
3
4
5
6
7
8
0
0.2
0.4
0.6
0.8
1
1.2
Time (seconds)
Note: Valid only at integer values of sampling instant
FIGURE 13.33
Sampled step response of the antenna azimuth
position control system
KGc(s)
0.2083
s(s + 1.71)
i
Lead compensator
Plant
o
+
–
(s)
(s)
θ
θ
FIGURE 13.34
Simpliﬁed
block diagram of antenna
azimuth control system
Case Studies
751

Using root locus to evaluate the gain, K, at the design point yields 0:2083K  16, or
K  76:81.
We now select an appropriate sampling frequency as described in Section 13.10.
Using the cascaded compensator,
KGcs  76:81s  1:71
s  4
13.109
and plant,
Gps 
0:2083
ss  1:71
13.110
the equivalent forward-path transfer function, Ges  KGcsGps, is
Ges 
16
ss  4
13.111
The magnitude frequency response of Eq. (13.111) is 0 dB at 3.1 rad/s. Thus, from
Section 13.10, the value of the sampling interval, T, should be in the range 0:15=ωΦM 
0:05 to 0:5=ωΦM  0:16 second. Let us choose a smaller value, say T  0:025 second.
Substituting Eq. (13.89) into Eq. (13.111), where T  0:025, yields the digital
compensator
KGcz  74:72z  71:59
z  0:9048
13.112
In order to simulate the digital system, we calculate the z-transform of the plant in
Figure 13.34 in cascade with a zero-order sample-and-hold. The z-transform of the
sampled plant is evaluated by the method discussed in Section 13.4 using T  0:025. The
result is
Gpz  6:418  105z  6:327  105
z2  1:958z  0:9582
13.113
The step response in Figure 13.35 shows approximately 20% overshoot and a settling time
of 2.1 seconds for the closed-loop digital system.
0
0.5
1
1.5
Note: Valid only at integer values of sampling instant 
2
2.5
3
0
0.2
0.4
0.6
0.8
1
1.2
Time (seconds)
*(t)
θ
FIGURE 13.35
Closed-loop
digital step response for antenna
control system with a lead
compensator
752
Chapter 13
Digital Control Systems

Summary
In this chapter, we covered the design of digital systems using classical methods. State-space
techniques were not covered. However, you are encouraged to pursue this topic in a course
dedicated to sampled-data control systems.
We looked at the advantages of digital control systems. These systems can control
numerous loops at reduced cost. System modiﬁcations can be implemented with software
changes rather than hardware changes.
Typically, the digital computer is placed in the forward path preceding the plant.
Digital-to-analog and analog-to-digital conversion is required within the system to ensure
compatibility of the analog and digital signals throughout the system. The digital computer
in the loop is modeled as a sample-and-hold network along with any compensation that
it performs.
Throughout the chapter, we saw direct parallels to the methods used for s-plane
analysis of transients, steady-state errors, and the stability of analog systems. The parallel is
We conclude the design by obtaining a ﬂowchart for the digital compensator. Using
Eq. (13.112), where we deﬁne KGcz  Xz=Ez, and cross-multiplying yields
z  0:9048X z  74:72z  71:59Ez
13.114
Solving for the highest power of z operating on X(z),
zXz  74:72z  71:59Ez  0:9048Xz
13.115
Solving for X(z),
Xz  74:72  71:59z1Ez  0:9048z1Xz
13.116
Implementing Eq. (13.116) as a ﬂowchart yields Figure 13.36.
CHALLENGE: You are now given a case study to test your knowledge of this
chapter’s objectives. You are given the antenna azimuth position control system
shown on the front endpapers, Conﬁguration 2. Replace the potentiometers with unity
gain transducers, neglect power ampliﬁer dynamics, and do the following:
a. Design a digital lead compensator to yield 10% overshoot with a 1-second peak time.
Design in the s-plane and use the Tustin transformation to specify and implement a
digital compensator. Choose an appropriate sampling interval.
b. Draw a ﬂowchart for your digital lead compensator.
c. Repeat Part a using MATLAB.
+
+
+
–
e*(t–0.025)
x*(t–0.025)
e*(t)
x*(t)
Delay
0.025 second
74.72
–71.59
Delay
0.025 second
–0.9048
FIGURE 13.36
Flowchart for
digital lead compensator9
9 Adapted from Chassing, R. Digital Signal Processing (New York: John Wiley & Sons, Inc., 1999), p. 137. 1999
John Wiley & Sons, Inc.
Summary
753

made possible by the z-transform, which replaces the Laplace transform as the
transform of choice for analyzing sampled-data systems. The z-transform allows us
to represent sampled waveforms at the sampling instants. We can handle sampled
systems as easily as continuous systems, including block diagram reduction, since
both signals and systems can be represented in the z-domain and manipulated
algebraically. Complex systems can be reduced to a single block through techniques
that parallel those used with the s-plane. Time responses can be obtained through
division of the numerator by the denominator without the partial-fraction expansion
required in the s-domain.
Digital systems analysis parallels the s-plane techniques in the area of stability. The
unit circle becomes the boundary of stability, replacing the imaginary axis.
We also found that the concepts of root locus and transient response are easily carried
into the z-plane. The rules for sketching the root locus do not change. We can map points on
the s-plane into points on the z-plane and attach transient response characteristics to the
points. Evaluating a sampled-data system shows that the sampling rate, in addition to gain
and load, determines the transient response.
Cascade compensators also can be designed for digital systems. One method is to ﬁrst
design the compensator on the s-plane or via frequency response techniques described in
Chapters 9 and 11, respectively. Then the resulting design is transformed to a digital
compensator using the Tustin transformation. Designing cascade compensation directly on
the z-plane is an alternative method that can be used. However, these techniques are beyond
the scope of this book.
This introductory control systems course is now complete. You have learned how
to analyze and design linear control systems using frequency-domain and state-space
techniques. This course is only a beginning. You may consider furthering your study of
control systems by taking advanced courses in digital, nonlinear, and optimal control, where
you will learn new techniques for analyzing and designing classes of systems not covered in
this book. We hope we have whetted your appetite to continue your education in control
systems engineering.
Review Questions
1. Name two functions that the digital computer can perform when used with feedback
control systems.
2. Name three advantages of using digital computers in the loop.
3. Name two important considerations in analog-to-digital conversion that yield errors.
4. Of what does the block diagram model for a computer consist?
5. What is the z-transform?
6. What does the inverse z-transform of a time waveform actually yield?
7. Name two methods of ﬁnding the inverse z-transform.
8. What method for ﬁnding the inverse z-transform yields a closed-form expression for
the time function?
9. What method for ﬁnding the inverse z-transform immediately yields the values of the
time waveform at the sampling instants?
10. In order to ﬁnd the z-transform of a G(s), what must be true of the input and the
output?
11. If input R(z) to system G(z) yields output C(z), what is the nature of c(t)?
754
Chapter 13
Digital Control Systems

12. If a time waveform, c(t), at the output of system G(z) is plotted using the inverse
z-transform, and a typical second-order response with damping ratio = 0.5 results,
can we say that the system is stable?
13. What must exist in order for cascaded sampled-data systems to be represented by the
product of their pulse transfer functions, G(z)?
14. Where is the region for stability on the z-plane?
15. What methods for ﬁnding the stability of digital systems can replace the Routh-Hurwitz
criterion for analog systems?
16. To drive steady-state errors in analog systems to zero, a pole can be placed at the origin
of the s-plane. Where on the z-plane should a pole be placed to drive the steady-state error
of a sampled system to zero?
17. Howdotherulesforsketchingtherootlocusonthez-planedifferfromthoseforsketching
the root locus on the s-plane?
18. Given a point on the z-plane, how can one determine the associated percent overshoot,
settling time, and peak time?
19. Given a desired percent overshoot and settling time, how can one tell which point on the
z-plane is the design point?
20. Describe how digital compensators can be designed on the s-plane.
21. What characteristic is common between a cascade compensator designed on the s-plane
and the digital compensator to which it is converted?
Problems
1. Derive the z-transforms for the time functions listed
below. Do not use any z-transform tables. Use the plan
f t ® f *t ® F*s ® Fz, followed by converting
F(z) into closed form making use of the fact that
1=1  z1  1  z1  z2  z3  ∙∙∙. Assume ideal
sampling. [Section: 13.3]
a. eatut
b. u(t)
c. t2eatut
d. cos ωt ut
2. Repeat all parts of Problem 1
using MATLAB and MATLAB’s
Symbolic Math Toolbox.
3. For
each
F(z),
ﬁnd
f(kT)
using
partial-fraction
expansion. [Section: 13.3]
a. Fz 
zz  3z  5
z  0:4z  0:6z  0:8
b. Fz 
z  0:2z  0:4
z  0:1z  0:5z  0:9
c. Fz 
z  1z  0:3z  0:4
zz  0:2z  0:5z  0:7
4. Repeat all parts of Problem 3
using MATLAB and MATLAB’s
Symbolic Math Toolbox.
5. For each F(z) in Problem 3, do the following:
[Section: 13.3]
a. Find f(kT) using the power series expansion.
b. Check your results against your answers from
Problem 3.
6. Using partial-fraction expansion and Table 13.1, ﬁnd the
z-transform for each G(s) shown below if T  0:5 second.
[Section: 13.3]
a. Gs 
s  4
s  2s  5
b. Gs  s  1s  2
ss  3s  4
c. Gs 
20
s  3s2  6s  25
d. Gs 
15
ss  1s2  10s  81
Problems
755

7. Repeat all parts of Problem 6
using MATLAB and MATLAB’s
Symbolic Math Toolbox.
8. Find
Gz  Cz=Rz
for
each
of
the
block
diagrams shown in Figure P13.1 if T  0:3 second.
[Section: 13.4]
9. Find Tz  Cz=Rz for each of the systems shown in
Figure P13.2. [Section: 13.5]
10. Find C(z) in general terms for the digital system shown in
Figure P13.3. [Section: 13.5]
11. Find the closed-loop transfer function, Tz  Cz=Rz,
for the system shown in Figure P13.4. [Section: 13.5]
12. Write a MATLAB program that
can be used to ﬁnd the range
of sampling time, T, for stability. The
program will be used for systems of the
20
s(s + 5)
Hold
(a)
20
s(s + 5)
Hold
(b)
1
(s + 3)
20
s(s + 5)
Hold
(c)
1
(s + 3)
Hold
R(s)
C(s)
C(s)
R(s)
R(s)
C(s)
FIGURE P13.1
R(s)
G1(s)
+
–
G2(s)
C(s)
(a)
H(s)
+
–
R(s)
G1(s)
+
–
G2(s)
C(s)
(b)
H(s)
FIGURE P13.2
G1(s)
C(s)
T
H1(s)
H2(s)
T
–
+
–
+
R(s)
T
G2(s)
G3(s)
G4(s)
+
–
H2(s)
FIGURE P13.3
R(s) 
T
5
Hold
3
C(s)
+
–
+
–
1
s(s + 2)
1
s
FIGURE P13.4
756
Chapter 13
Digital Control Systems

type represented in Figure P13.5 and
should meet the following requirements:
a. MATLAB will convert G1(s) cascaded
with a sample-and-hold to G(z).
b. The program will calculate the z-plane
roots of the closed-loop system for a
range of T and determine the value of
T, if any, below which the system will
be stable. MATLAB will display this
value of T along with the z-plane poles
of the closed-loop transfer function.
Test the program on
G1s 
20s  6
s  1s  3s  4s  8
R(s) +
–
Sample-
and-hold
G1(s)
C(s)
FIGURE P13.5
13. Given the system in Figure P13.6, ﬁnd the range of
sampling interval, T, that will keep the system stable.
[Section: 13.6]
R(s) +
–
T
Hold
1
s(s + 10)
C(s)
FIGURE P13.6
14. Find the range of gain, K, to make the system shown in
Figure P13.7 stable. [Section: 13.6]
R(s) +
–
T = 0.2
Hold
3K
s(s + 4)
C(s)
FIGURE P13.7
15. Find the static error constants and the steady-state error
for each of the digital systems shown in Figure P13.8 if
the inputs are [Section: 13.7]
a. u(t)
b. tu(t)
c. 1
2 t2ut
R(s) +
–
T = 0.5
Hold
1
s + 2
C(s)
System 1
R(s) +
–
T = 0.1
Hold
20
s(s + 2)
C(s)
System 2
R(z) +
–
T = 0.5
C(z)
System 3
R(z) +
–
T = 0.1
0.13(z + 1)
(z – 1)(z – 0.74)
C(z)
System 4
1.28
z – 0.37
FIGURE P13.8
16. Write a MATLAB program that can
be used to ﬁnd Kp, Kv, and Ka for
digital systems. The program will be
used for systems of the type represented
in Figure P13.5. Test your program for
Gz  0:04406z3  0:03624z2  0:03284z  0:02857
z4  3:394z3  4:29z2  2:393z  0:4966
where G(z) is the pulse transfer func-
tion
for
G1s
in
cascade
with
the
z.o.h. and T  0:1 second.
17. For the digital system shown in Figure P13.5, where
G1s  K=s  1s  5, ﬁnd the value of K to
yield a 15% overshoot. Also ﬁnd the range of K for
stability. Let T  0:1 second. [Section: 13.9]
18. Use Simulink to simulate the
step response for the system of
Problem 17. Set the value of gain,
K, to that designed in Problem 17 for 15%
overshoot.
19. Use MATLAB’s LTI Viewer to
deter mine the peak time and
settling time of the closed-loop step
response for System 4 in Figure P13.8.
Problems
757

20. Write a MATLAB program that can
be used to design the gain of a
digital control system to meet a percent
overshoot
requirement.
The
program
will be used for systems of the type
represented in Figure P13.5 and meet the
following requirements:
a. The user will input the desired per-
cent overshoot.
b. MATLAB will convert G1(s) cascaded
with the sample-and-hold to G(z).
c. MATLAB will display the root locus on
the z-plane along with an overlay of
the percent overshoot curve.
d. The user will click with the mouse at
the intersection of the root locus
and percent overshoot overlay and
MATLAB will respond with the value of
gain followed by a display of the step
response of the closed-loop system.
Apply your program to Problem 17 and
compare results.
21. For the digital system shown in Figure P13.5, where
G1s  K=ss  1, ﬁnd the value of K to yield a
peak time of 2 seconds if the sampling interval, T,
is 0.2 second. Also, ﬁnd the range of K for stability.
[Section: 13.9]
22. For the digital system shown in Figure P13.5, where
G1s  K=ss  1s  3, ﬁnd the value of K to
yield a 20% overshoot if the sampling interval, T,
is 0.1 second. Also, ﬁnd the range of K for stability.
[Section: 13.9]
23. For the digital system shown in Figure P13.5, where
G1s  Ks  2  ss  1s  3, ﬁnd the value of
K to yield a settling time of 15 seconds if the sampling
interval, T, is 1 second. Also, ﬁnd the range of K for
stability. [Section: 13.9]
24. A PID controller was designed in Example 9.5 for a
continuous system with unity feedback. The system’s
plant was
Gs 
s  8
s  3s  6s  10
The designed PID controller was
Gcs  4:6 s  55:92s  0:5
s
Find the digital transfer function, Gc(z), of the PID
controller in order for the system to be computer
controlled if the sampling interval, T, is 0.005 second.
[Section: 13.10]
25. A continuous unity feedback system has a forward
transfer function of
Gs 
1
ss  5s  8
The system is to be computer controlled with the
following speciﬁcations:
Percent overshoot: 10%
Settling time: 2 seconds
Sampling interval: 0:01 second
Design a lead compensator for the digital system to
meet the speciﬁcations. [Section: 13.10]
26. Repeat Problem 25 using MATLAB.
27. An inverted pendulum mounted on a
motor-driven cart (Prasad, 2012) was the
subject of Problem 33, Chapter 9. In that
problem you were asked to develop Simulink models for
twofeedbacksystems,oneofwhichwastocontrolthecart
position, x(t). At the recommended settings, the step
response of that system was expected to satisfy the
following requirements: a steady-state error, e(∞)
< 2%, a peak time, TP < 1.2 seconds, and a percent
overshoot, %OS < 20.5%. Having concluded that the
steady-state error was unacceptable, you designed a PID
controller and found its recommended settings.
DigitizetheSimulinkmodeldeveloped
for PID control of the cart position in
Part d of Problem 33, Chapter 9, by adding
azero-order-holdsetto0.01second.Then,
run a simulation to evaluate performance.
DESIGN PROBLEMS
DESIGN PROBLEMS
28. a. Convert the heading control for the UFSS vehicle
shown on the back endpapers (Johnson, 1980) into
a digitally controlled system.
b. Find the closed-loop pulse transfer function, T(z), if
T  0:1 second.
c. Find the range of heading gain to keep the digital
system stable.
29. The analog system of a disk drive is shown in
Figure P13.9. Do the following:
a. Convert the disk drive to a digital system. Use a
sampling time of 0.01 second.
b. Find the range of digital controller gain to keep the
system stable.
758
Chapter 13
Digital Control Systems

c. Find the value of digital controller gain to yield 15%
overshoot for a digital step response.
d. Repeat all previous parts and
obtain the step response for
Part c using MATLAB.
30. In Problem 49, Chapter 9, and Problem 39, Chapter 10,
we considered the radial pickup position control of a
DVD player. A controller was designed and placed in
cascade with the plant in a unit feedback conﬁguration to
stabilize the system. The controller was given by
Ms  0:5s  1:63
ss  0:27
and the plant by (Bittanti, 2002)
Ps 
0:63
1  0:36
305:4 s 
s2
305:42


1  0:04
248:2 s 
s2
248:22


It is desired to replace the continuous system by an
equivalent discrete system without appreciably affecting
the system performance.
a. Find an appropriate sampling frequency for the
discretization.
b. Using the chosen sampling frequency, translate the
continuous compensator into a discrete compensator.
c. Use Simulink to simulate
the continuous and discrete
systems on the same graph.
Assume a unit step input. Are there
signiﬁcant differences in the system’s
performance?
31. In Problem 24, Chapter 11, we discussed an EVAD, a
device that works in parallel with the human heart to help
pump blood in patients with cardiac conditions. The
device has a transfer function
Gs  Paos
Ems 
1361
s2  69s  70:85
where Em(s) is the motor’s armature voltage, and Pao(s)
is the aortic blood pressure (Tasch, 1990). Using
continuous techniques, a cascaded compensator is
designed in a unity feedback conﬁguration with a
transfer function
Gcs  0:5s  1
s  0:05
Selecting to control the device using a microcontroller, a
discrete equivalent has to be found for Gc(s). Do the
following:
a. Find an appropriate sampling frequency for the
discretization.
b. Translate the continuous compensator into a discrete
compensator using the sampling frequency found
in Part a.
c. Use Simulink to simulate
the continuous and discrete
systems on the same graph for a unit
step input. There should be little
difference between the compensated
continuous and discrete systems.
32. In Problem 47, Chapter 9, a steam-driven turbine-
governor
system
was
implemented
by
a
unity
feedback system with a forward-path transfer function
(Khodabakhshian, 2005)
Gs 
K
s  0:08s  2s  5
a. Use a sampling period of T  0:5 s and ﬁnd a discrete
equivalent for this system.
b. Use MATLAB to draw the root
locus.
c. Find the value of K that will result in a
stable system with a damping factor of ζ  0:7.
d. Use the root locus found in Part a to predict the
step-response settling time, Ts, and peak time, Tp.
e. Calculatetheﬁnalvalueoftheclosed-loopsystemunit
step response.
f. Obtain the step response of the
system using Simulink. Verify
the predictions you made in Parts c
and d.
33. Discrete time controlled systems can exhibit unique
characteristics not available in continuous control-
lers. For example, assuming a speciﬁc input and some
conditions, it is possible to design a system to achieve
steady state within one single time sample without
overshoot. This scheme is well known and referred
to as deadbeat control. We illustrate deadbeat
control design with a simple example. For a more
comprehensive treatment see (Ogata, 1987).
s(s + 100)
–
XD(s)
+
YA(s)
20,000
Desired
position
Motor and load
Actual
position
FIGURE P13.9
Simpliﬁed block diagram of a ﬂoppy disk
drive
Problems
759

Assume in Figure 13.25(a) that Gps 
1
s  1. The
purpose of the design will be to ﬁnd a compensator,
Gcz, such that for a step input the system achieves
steady state within one sample. We start by translating
the system into the discrete domain to obtain the
equivalent of Figure 13.25(c). The pulse transfer func-
tion, Gpz  1  eTz1
1  eTz1 , is found using Eq. (13.40),
since it is assumed that the compensator will be
followed by a zero-order hold. In Figure 13.25(c),
the
closed-loop
transfer
function
is
given
by
Cz
Rz  Tz 
GczGpz
1  GczGpz, or, solving for the com-
pensator, we get Gcz 
1
Gpz
Tz
1  Tz. The desired
system output is a unit step delayed by one unit sample.
Thus, Cz 
z
z  1 z1 
1
z  1. Since the input is a unit
step, Rz 
z
z  1; the desired closed-loop transfer
function
is
Cz
Rz  Tz  z1,
and
the
resulting
compensator, found by direct substitution, is given by
Gcz 
1
1  eT
z  eT
z  1 .
Assume now that the plant is given by Gps  1
s, and a
sampling period of T = 0.05 second is used.
a. Design a deadbeat compensator to reach steady state
within one time sample for a step input.
b. Calculate the resulting steady-state error for a
unit-slope ramp input.
c. Simulate your system using
SIMULINK. (Hint: Following
Figure 13.25, the forward path will
consist of the cascading of GC(z), a
zero-order
hold,
and
Gp(s).)
Show
that the system reaches steady state
after one sample. Also verify your
steady-state error ramp result.
34. Given
Gs 
8
s  4
Use
the
LabVIEW
Control
Design
and
Simulation Module to (1) convert G(s)
to a digital transfer function using
a sampling rate of 0.25 second; and
(2)
plot
the
step
responses
of
the
discrete and the continuous transfer
functions.
35. Given
Gz 
Kz  0:5
z  0:25z  0:75
Use the LabVIEW Control Design
and Simulation Module and the
MathScript RT Module to (1) obtain the
value of K that will yield a damping
ratio of 0.5 for the closed-loop system
in
Figure
13.20,
where
H(z)=1;
and
(2) display the step response of the
closed-loop system in Figure 13.20 where
H(z) = 1. Compare your results with those
of Skill-Assessment Exercise 13.8.
36. Obtaining an exact shape in metalforming can be tricky
because of material springback. A feedback system has
been devised in which critical deviations from speciﬁca-
tions are measured as soon as a part is formed and
automatic incremental corrections to the forming tools
are made before the next part is formed. Eventually the
system compensates for material springback and results
in parts compliant with speciﬁcations. A unity-feedback
digital system with a forward path
Gz 
k
z  1
can be used as a simpliﬁed representation of the system
(Fu, 2013).
a. Make a sketch of the system’s root locus.
b. Find the range of k for which the system is closed-
loop stable.
c. Find the system’s steady-state error for a step input.
d. Find the value of k that will result in the fastest
possible response.
37. The purpose of an artiﬁcial pacemaker is to regulate
heart rate in those patients in which the natural feedback
system malfunctions. Assume a unity-feedback system
with a forward path,
Gs 
1352k
ss  8s  20
as a simpliﬁed model of a pacemaker (Neogi, 2010).
a. Convert the pacemaker model to a discrete system
with a sampling rate of 0.01 second.
b. Draw the root locus of the system using a computer
program.
c. Use the root locus in Part b to ﬁnd the range of k
for which the system is closed-loop stable.
d. Use the root locus from Part b to ﬁnd the value of k
that will yield a 5% overshoot for a step input.
e. Simulatetheunit-stepinputofyourdiscretizedsystem
to verify your design.
760
Chapter 13
Digital Control Systems

38. A linear model of the α-subsystem of a grid-connected
voltage-source converter with a Y-Y transformer
(Mahmood, 2012) was presented in Problem 69,
Chapter 8, and Problem 51, Chapter 10. The system
was represented with unity-feedback and a forward
path consisting of the cascading of a compensator and
a plant. The plant is given by
GPs  Vαs
Mαs 
s  2200
s  220s2  120s  16  106
This system is now to be digitally controlled
with the following speciﬁcations: percent overshoot,
%OS = 10%; settling time, TS = 0.1 second; and
sampling interval, T = 0.001 second. Design a lead
compensator for that system to meet these speciﬁca-
tions. [Section: 13.10]
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
PROGRESSIVE ANALYSIS AND DESIGN PROBLEMS
39. Control of HIV/AIDS. In Chapter 11, a continuous
cascaded compensator for a unity feedback system was
designed for the treatment of the HIV-infected patient
treatedwithRTIs(Craig,2004).Thetransferfunctionof
the designed compensator was
Gcs  2  104s2  0:04s  0:0048
ss  0:02
The linearized plant was given by
Ps  Ys
U1s 
520s  10:3844
s3  2:6817s2  0:11s  0:0126
The compensatedsystem is overdamped with anapprox-
imate settling time of 100 seconds. This system must be
discretized for practical reasons: (1) HIV patient cannot
be monitored continuously and (2) medicine dosage
cannot be adjusted continuously.
a. Show that a reasonable sampling period for this
system is T  8 days (medicine dosage will be
updated on a weekly basis).
b. Use Tustin’s method and T  8 days to ﬁnd a discrete
equivalent to Gc(s).
c. Use Simulink to simulate the
continuous and discrete
compensated systems for a unit step
input. Plot both responses on the same
graph.
40. Hybrid vehicle. In Problem 67, Chapter 7
(Figure P7.31), the block diagram of a
cascade scheme for the speed control of an
HEV (Preitl, 2007) was represented as a unity feedback
system. In that diagram the output of the system is the
speed transducer’s output voltage, Cs  KssVs. In
Part b of Problem 33, Chapter 11, where a compensator
was designed for this problem, we discussed the
feasibility of achieving full pole-zero cancellation
when we place a PI speed controller’s zero, ZI, on top
of the uncompensated system’s real pole, closest to the
origin(locatedat0.0163).Notingthatperfectpole-zero
cancellation may not be maintained, we studied a case
where the PI-controller’s zero changed by +20%,
moving to 0.01304. In that case, the transfer function
of the plant with a PI speed controller, which has a
proportional gain = K, was given by
Gs  Ks  0:6s  0:01304
ss  0:0163s  0:5858
Assuming that G1s in Figure P13.5 equals the transfer
function,G(s),givenabove forthevehiclewiththespeed
controller:
a. Develop
a
MATLAB
M-ﬁle
that
would
allow you to do the following: (Hint:
Refer to the M-ﬁles you developed for
Problems 12 and 20 of this chapter)
(1) Convert
G1(s)
cascaded
with
a
sample-and-hold to G(z);
(2) Search over the range 0 < T < 5 sec-
ondsforthelargestsamplingperiod
Tmax below which the system is sta-
ble. Calculate the z-plane roots of
theclosed-loopsystemforthewhole
range of the sampling time, T. Sub-
sequently set T  0:75Tmax;
(3) Design the gain of a digital con-
trol system to meet a percent over-
shoot requirement, %OS, allowing
the user to input the value of the
desired %OS and the value of the PI
speed
controller’s
proportional
gain, K;
(4) Plot the step response of that dig-
ital system (in per unit, p. u., vs.
time in seconds).
b. Run the M-ﬁle you developed in Part a
and enter the values of the desired
percent overshoot, %OS = 0, and the PI
speed controller’s proportional gain,
K = 61;
c. Select a point in the graphics window
displaying the root locus, such that
Problems
761

Cyber Exploration Laboratory
Experiment 13.1
Objectives
To design the gain of a digital control system to meet a transient response
requirement; to simulate a digital control system to test a design; to see the effect of
sampling rate upon the time response of a digital system
Minimum Required Software Packages
MATLAB, Simulink, and the Control
System Toolbox
Prelab
1. Given the antenna azimuth control system shown on the front endpapers, use
Conﬁguration 2 to ﬁnd the discrete transfer function of the plant. Neglect the
dynamics of the power ampliﬁer and include the preampliﬁer, motor, gears, and
load. Assume a zero-order hold and a sampling interval of 0.01 second.
2. Using the digital plant found in Prelab 1, ﬁnd the preampliﬁer gain required for a closed-
loop digital system response with 10% overshoot and a sampling interval of 0.01 second.
What is the peak time?
3. Given the antenna azimuth control system shown on the front endpapers, use
Conﬁguration 2 to ﬁnd the preampliﬁer gain required for the continuous system to
yield a closed-loop step response with 10% overshoot. Consider the open-loop system
to be the preampliﬁer, motor, gears, and load. Neglect the dynamics of the power
ampliﬁer.
Lab
1. Verify your value of preampliﬁer gain found in Prelab 2 using the SISO Design
Tool to generate the root locus for the digital open-loop transfer function found in
Prelab 1. Use the Design Constraints capability to generate the 10% overshoot curve
and place your closed-loop poles at this boundary. Obtain a plot of the root locus and
the design boundary. Record the value of gain for 10% overshoot. Also, obtain a plot
all poles of the closed-loop transfer
function,
Tz,
are
inside
the
unit
circle.
d. Write
the
sampled-data
transfer
functions obtained, Gz and Tz, indi-
cating the corresponding value of
the sampling time, T, and all poles,
r, of the closed-loop transfer func-
tion, Tz;
e. Plot the step response of that digital
system (in per unit, p. u., vs. time in
seconds) noting the following charac-
teristics: ﬁnal value, rise time, and
settling time.
41. Parabolictrough collector. In Problem 34, Chapter 11,
a zero steady-state error for a unit-step input was
achieved through the design of a lag compensator with
integral control. In that problem, the open-loop trans-
mission can be written as Ls  GcsGs, where the
parabolic trough plant is given by (Camacho, 2012)
Gs 
137:2  106
s2  0:0224s  196  106 e39s
and the lag compensator is given by
Gcs  1:12 s  0:01
s
We want to substitute for the continuous com-
pensator with a digital one.
a. Find a suitable sampling period for the system.
b. Find the equivalent compensator’s transfer function
in z-domain.
c. Use Simulink to simulate the
digital compensator with the
continuous plant. Compare the result-
ing response with that of the original
system using the continuous compensa-
tor on the same graph.
762
Chapter 13
Digital Control Systems

of the closed-loop step response using the LTI Viewer and record the values of
percent overshoot and peak time. Use the same tool to ﬁnd the range of gain for
stability.
2. Using Simulink, set up the closed-loop digital system whose plant was found in Prelab 1.
Make two diagrams: one with the digital transfer function for the plant and another using
the continuous transfer function for the plant preceded by a zero-order sample-and-hold.
Use the same step input for both diagrams and obtain the step response of each. Measure
the percent overshoot and peak time.
3. Using Simulink, set up both the digital and continuous systems calculated in Prelab 2
and Prelab 3, respectively, to yield 10% overshoot. Build the digital system with a
sample-and-hold rather than the z-transform function. Plot the step response of each
system and record the percent overshoot and the peak time.
4. For one of the digital systems built in Lab 2, vary the sampling interval and record the
responses for a few values of sampling interval above 0.01 second. Record sampling
interval, percent overshoot, and peak time. Also, ﬁnd the value of sampling interval that
makes the system unstable.
Postlab
1. Make a table containing the percent overshoot, peak time, and gain for each of the
following closed-loop responses: the digital system using the SISO Design Tool; the
digital system using Simulink and the digital transfer functions; the digital system using
Simulink and the continuous transfer functions with the zero-order sample-and-hold;
and the continuous system using Simulink.
2. Using the data from Lab 4, make a table containing sampling interval, percent overshoot,
and peak time. Also, state the sampling interval that makes the system unstable.
3. Compare the responses of all of the digital systems with a sampling interval of 0.01
second and the continuous system. Explain any discrepancies.
4. Compare the responses of the digital system at different sampling intervals with the
continuous system. Explain the differences.
5. Draw some conclusions about the effect of sampling.
Experiment 13.2
Objective
To use the various functions from the LabVIEW Control Design and
Simulation Module for the analysis of digital control systems.
Minimum Required Software Packages
LabVIEW with the Control Design
and Simulation Module and the MathScript RT Module; MATLAB with the Control
Systems Toolbox.
Prelab
You are given Figure P8.22 and the parameters listed in the Prelab of Cyber
Exploration Laboratory Experiment 8.2 for the open-loop NASA eight-axis ARMII
(Advanced Research Manipulator II) electromechanical shoulder joint/link, actuated by
an armature-controlled dc servomotor.
1. Obtain the open-loop transfer function of the shoulder joint/link, Gs  θLs
Vref s, or use
your calculation from Cyber Exploration Laboratory Experiment 8.2.
2. Use MATLAB and design a digital compensator to yield a closed-loop response with
zero steady-state error and a damping ratio of 0.7. If you already have performed Cyber
Exploration Laboratory Experiment 8.2, modify your M-ﬁle from that experiment. Test
your design using MATLAB.
Cyber Exploration Laboratory
763

Bibliography
Astrom, K. J., and Wittenmark, B. Computer Controlled Systems. Prentice Hall, Upper Saddle River,
NJ, 1984.
Bittanti, S., Dell’Orto, F., Di Carlo, A., and Savaresi, S. M. Notch Filtering and Multirate Control for
Radial Tracking in High Speed DVD-Players. IEEE Transactions on Consumer Electronics,
vol. 48, 2002, pp. 56–62.
Boyd, M., and Yingst, J. C. PC-Based Operator Control Station Simpliﬁes Process, Saves Time.
Chilton’s I & CS, September 1988, pp. 99–101.
Camacho, E. F., Berenguel, M., Rubio, F. R., and Martinez, D. Control of Solar Energy Systems.
Springer-Verlag, London, 2012.
Chassaing, R. Digital Signal Processing. Wiley, New York, 1999.
Craig, I. K., Xia, X., and Venter, J. W. Introducing HIV/AIDS Education into the Electrical
Engineering Curriculum at the University of Pretoria. IEEE Transactions on Education,
vol. 47, no. 1, February 2004, pp. 65–73.
Craig, J. J. Introduction to Robotics. Mechanics and Control, 3d ed. Prentice Hall, Upper Saddle
River, NJ, 2005.
Fu, Z., Mo, J., Han, F., and Gong, P. Tool path correction algorithm for single-point incremental
forming of sheet metal. Int. J. Adv. Manuf. Technol., vol. 64, 2013, Springer, pp. 1239–1248.
Hostetter, G. H. Digital Control System Design. Holt, Rinehart & Winston, New York, 1988.
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFSS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980.
Katz, P. Digital Control Using Microprocessors. Prentice Hall, Upper Saddle River, NJ, 1981.
Khodabakhshian, A., and Golbon, N. Design of a New Load Frequency PID Controller Using
QFT. Proceedings of the 13th Mediterranean Conference on Control and Automation, 2005,
pp. 970–975.
Kuo, B. C. Automatic Control Systems, 7th ed. Prentice Hall, Upper Saddle River, NJ, 1995.
Kuo, B. C. Digital Control Systems. Holt, Rinehart & Winston, New York, 1980.
Mahmood, H., and Jiang, J. Modeling and Control System Design of a Grid Connected VSC
Considering the Effect of the Interface Transformer Type. IEEE Transactions on Smart Grid, vol. 3,
no. 1, March 2012, pp. 122–134.
Neogi, B., Ghosh, R., Tarafdar, U., and Das, A. Simulation Aspect of an Artiﬁcial Pacemaker.
International Journal of Information Technology and Knowledge Management, vol. 3, no. 2, 2010,
pp. 723–727.
Nyzen, R. J. Analysis and Control of an Eight-Degree-of-Freedom Manipulator, Ohio University
Masters Thesis, Mechanical Engineering, Dr. Robert L. Williams II, Advisor, August 1999.
Ogata, K. Discrete-Time Control Systems. Prentice Hall, Upper Saddle River, NJ, 1987.
Phillips, C. L., and Nagle, H. T. Jr. Digital Control System Analysis and Design. Prentice Hall,
Upper Saddle River, NJ, 1984.
Prasad, L., Tyagi, B., and Gupta, H. Modeling & Simulation for Optimal Control of Nonlinear
Inverted Pendulum Dynamical System using PID Controller and LQR. IEEE Computer Society
Sixth Asia Modeling Symposium, 2012, pp. 138–143.
Lab
Simulate your Prelab design using a Simulation Loop from the LabVIEW Control
Design and Simulation Module. Plot the step response of two loops as follows: (1) a unity
feedback with the forward path consisting of the continuous system transfer function
preceded by a zero-order hold, and (2) a unity feedback with the forward path consisting of
the equivalent discrete transfer function of your compensator in cascade with the open-loop
plant.
Postlab
Compare the results obtained with those from your prelab MATLAB program.
Comment on time-performance speciﬁcations.
764
Chapter 13
Digital Control Systems

Preitl, Z., Bauer, P., and Bokor, J. A Simple Control Solution for Traction Motor Used in Hybrid
Vehicles. 4th International Symposium on Applied Computational Intelligence and Informatics.
IEEE, 2007, pp. 157–162.
Smith, C. L. Digital Computer Process Control. Intext Educational Publishers, NY, 1972.
Tasch, U., Koontz, J. W., Ignatoski, M. A., and Geselowitz, D. B. An Adaptive Aortic Pressure
Observer for the Penn State Electric Ventricular Assist Device. IEEE Transactions on Biomedical
Engineering, vol. 37, 1990, pp. 374–383.
Tou, J. Digital and Sampled-Data Control Systems. McGraw-Hill, New York, 1959.
Williams, R. L. II. Local Performance Optimization for a Class of Redundant Eight-Degree-of-
Freedom Manipulators. NASA Technical Paper 3417, NASA Langley Research Center,
Hampton VA, March 1994.
Bibliography
765


Appendix A: List of Symbols
%OS
Percent overshoot
A
Ampere—unit of electrical current
A
System matrix for state-space representation
am
Motor time constant
B
Mechanical rotational coefﬁcient of viscous friction in N-m-s/rad
B
Input matrix for state-space representation
C
Electrical capacitance in farads
C
Output matrix for state-space representation
C(s)
Laplace transform of the output of a system
c(t)
Output of a system
CM
Controllability matrix
D
Mechanical rotational coefﬁcient of viscous friction in N-m-s/rad
D
Feedforward matrix for state-space representation
Da
Motor armature coefﬁcient of viscous damping in N-m-s/rad
Dm
Total coefﬁcient of viscous friction at the armature of a motor, including armature
coefﬁcient of viscous friction and reﬂected load coefﬁcient of viscous friction in
N-m-s/rad
E
Energy
E(s)
Laplace transform of the error
e(t)
Error; electrical voltage
Eas
Laplace transform of the motor armature input voltage; Laplace transform of the
actuating signal
eat
Motor armature input voltage; actuating signal
F
Farad—unit of electrical capacitance
F(s)
Laplace transform of f (t)
f(t)
Mechanical force in newtons; general time function
fv
Mechanical translational coefﬁcient of viscous friction
g
Acceleration due to gravity
G
Electrical conductance in mhos
G(s)
Forward-path transfer function
Gcs
Compensator transfer function
Gcz
Sampled transfer function for a compensator
767

GM
Gain margin
Gpz
Sampled transfer function for a plant
H
Henry—unit of electrical inductance
H(s)
Feedback-path transfer function
I
Identity matrix
i(t)
Electrical current in amperes
J
Moment of inertia in kg-m2
Ja
Motor armature moment of inertia in kg-m2
Jm
Total moment of inertia at the armature of a motor, including armature moment of inertia
and reﬂected load moment of inertia in kg-m2
K
Controller gain matrix
K
Mechanical translational spring constant in N/m or rotational spring constant in N-m/rad;
ampliﬁer gain; residue
k
Controller feedback gain; running index
Ka
Acceleration constant
Kb
Back emf constant in V/rad/s
Kf
Feedback gain
kg
Kilogram  newton seconds2=meter—unit of mass
kg-m2
Kilogram meters2  newton-meters seconds2/radian—unit of moment of inertia
Km
Motor gain
Kp
Position constant
Kt
Motor torque constant relating developed torque to armature current in N-m/A
Kv
Velocity constant
L
Electrical inductance in henries
L
Observer gain matrix
l
Observer feedback gain
M
Mass in kilograms; slope of the root locus asymptotes
m
Meter—unit of mechanical translational displacement
Mω
Magnitude of a sinusoidal response
m/s
Meters/second—unit of mechanical translational velocity
MP
Peak magnitude of the sinusoidal magnitude response
N
Newton—unit of mechanical translational force in kilogram meters/second2
N-s/m
Newton-seconds/meter—unit of mechanical translational coefﬁcient of viscous friction
n
System type
N/m
Newton/meter—unit of mechanical translational spring constant
N-m
Newton-meter—unit of mechanical torque
N-m-s/
rad
Newton-meter-seconds/radian—unit of mechanical rotational coefﬁcient of viscous
friction
N-m/A
Newton-meter/ampere—unit of motor torque constant
N-m/rad
Newton-meter/radian—unit of mechanical rotational spring constant
OM
Observability matrix
P
Similarity transformation matrix
pc
Compensator pole
Q
Coulomb—unit of electrical charge
q(t)
Electrical charge in coulombs
R
Electrical resistance in ohms
768
Appendix A: List of Symbols

R(s)
Laplace transform of the input to a system
r
Nonlinear electrical resistance
r(t)
Input to a system
Ra
Motor armature resistance in ohms
rad
Radian—unit of angular displacement
rad/s
Radian/second—unit of angular velocity
s
Second—unit of time
s
Complex variable for the Laplace transform
SF:P
Sensitivity of F to a fractional change in P
T
Time constant; sampling interval for digital signals
T(s)
Closed-loop transfer function; Laplace transform of mechanical torque
T(t)
Mechanical torque in N-m
Tm(t)
Torque at the armature developed by a motor in N-m
Tm(s)
Laplace transform of the torque at the armature developed by a motor
Tp
Peak time in seconds
Tr
Rise time in seconds
Ts
Settling time in seconds
Tw
Pulse width in seconds
u
Input or control vector for state-space representation
u
Input control signal for state-space representation
u(t)
Unit step input
V-s/rad
Volt-seconds/radian—unit of motor back emf constant
v(t)
Mechanical translation velocity in m/s; electrical voltage
vb(t)
Motor back emf in volts
ve(t)
Error voltage
vp(t)
Power ampliﬁer input in volts
x
State vector for state-space representation
x(t)
Mechanical translation displacement in meters; a state variable
_x
Time derivative of a state variable
_x
Time derivative of the state vector
y
Output vector for state-space representation
y(t)
Output scalar for state-space representation
z
Complex variable for the z-transform
zc
Compensator zero
α
Pole-scaling factor for a lag compensator, where α > 1; angle of attack
β
Pole-scaling factor for a lead compensator, where β < 1
γ
Pole-scaling factor for a lag-lead compensator, where γ > 1
δ
Thrust angle
ζ
Damping ratio
θ
Angle of a vector with the positive extension of the real axis
θt
Angular displacement
θa
Angle of a root locus asymptote with the positive extension of the real axis
θc
Angular contribution of a compensator on the s-plane
θmt
Angular displacement of the armature of a motor
λ
Eigenvalue of a square matrix
Appendix A: List of Symbols
769

σ
Real part of the Laplace transform variable, s
σa
Real-axis intercept of the root locus asymptotes
ΦM
Phase margin
Φt
State transition matrix
ϕ
Sinusoidal phase angle; body angle
ϕc
Sinusoidal phase angle of a compensator
ϕmax
Maximum sinusoidal phase angle
Ω
Ohm—unit of electrical resistance
℧
Mho—unit of electrical conductance
ω
Imaginary part of the Laplace transform variable, s
ωt
Angular velocity in rad/s
ωBW
Bandwidth in rad/s
ωd
Damped frequency of oscillation in rad/s
ωΦM
Phase-margin frequency in radians
ωGM
Gain-margin frequency in radians
ωn
Natural frequency in rad/s
ωp
Peak-magnitude frequency of the magnitude frequency response in rad/s
770
Appendix A: List of Symbols

Appendix B: MATLAB
Tutorial
B.1 Introduction
MATLAB is a high-level technical computing environment suitable for solving scientiﬁc
and engineering problems. When used with routines from its companion software, the
Control System Toolbox, MATLAB can be used to analyze and design control systems
problems such as those covered in this textbook. MATLAB and the Control System
Toolbox are commercial software products available from MathWorks, Inc., 3 Apple Hill
Drive, Natick, MA 01760-2098. Phone: (508) 647-7000. Email: info@mathworks.com.
URL: www.mathworks.com.
The MATLAB examples in this tutorial consist of solved problems that demonstrate
the application of MATLAB to the analysis and design of control systems. Many problems
were taken from examples in the text (identiﬁed with a MATLAB icon) that were solved
without MATLAB. A Command Summary at the end of this appendix lists key MATLAB
statements and their descriptions.
The code in this tutorial is also available in the Control Systems Engineering Toolbox
folderat www.wiley.com/college/nise and at www.mathworks.com/matlabcentral/ﬁleexchange.
You should have MATLAB Version 8.3 (R2014a) and the Control System Toolbox Version 9.7
installed on your machine to execute this appendix’s code in the Control Systems Engineering
Toolbox Version 7.
To run the M-ﬁles, ﬁrst be sure the ﬁles are either added to the search path in Set Path
under the HOME tab in the ENVIRONMENT section or appear in the Current Folder
window, which is part of the MATLAB window. To see the computer responses after
installing the M-ﬁles, run each problem by typing the M-ﬁle name, such as ch2p1, after the
prompt >> in the Command Window. You may also run the ﬁles by right-clicking the
ﬁle name, if it appears in the Current Folder window, and select Run.
To view all or part of the M-ﬁle in the Command Window, enter “type <ﬁle name>”
or “help <ﬁle name>,” respectively, after the prompt. You may also view and make changes
to the M-ﬁle by double-clicking the ﬁle in the Current Folder window. This action brings
up the editor. After editing, be sure to save the revised ﬁle before executing.
If you do not have the Control Systems Engineering Toolbox M-ﬁles, you can create
your own M-ﬁles by typing the code for each problem in this appendix into a separate M-ﬁle
(there is no need to type the ﬁnal pause statement or comments), and naming each M-ﬁle
with a .m extension, as in ch2p1.m. You can also type the code for more than one problem
into an M-ﬁle, including the pause command, and name the M-ﬁle with the .m extension.
You can then call the ﬁle from the Command Window, and continue past the pause
statements to the next problem by pressing any key.
771

By its nature, this appendix cannot cover all the background and details necessary for
a complete understanding of MATLAB. For further details, you are referred to other
sources, including MATLAB reference manuals and instructions speciﬁc to your particular
computer. The bibliography at the end of this appendix provides a partial listing of
references. This appendix should give you enough information to be able to apply
MATLAB to the analysis and design problems covered in this book.
The code will also run on workstations that support MATLAB. Consult the MATLAB
Installation Guide for your platform for minimum system hardware requirements.
B.2 MATLAB Examples
Chapter 2: Modeling in the Frequency Domain
ch2p1
Bit strings will be used to identify parts of this tutorial on the computer output. Bit
strings are represented by the text enclosed in apostrophes, such as'ab'. Comments begin
with % and are ignored by MATLAB. Numbers are entered without any other characters.
Arithmetic can be performed using the proper arithmetic operator. Numbers can be assigned
using a left-hand argument and an equals sign. Finally, we can ﬁnd the magnitude and angle
of a complex number, Q using abs (Q) and angle (Q), respectively.
'(ch2p1)'
% Display label.
' How are you?'
% Display string.
-3.96
% Display scalar number -3.96.
-4 + 7i
% Display complex number -4+7i.
-5-6j
% Display complex number -5-6 j.
(-4+7i)+(-5-6i)
% Add two complex numbers and
% display sum.
(-4+7j)*(-5-6j)
% Multiply two complex numbers and
% display product.
M=5
% Assign 5 to M and display.
N=6
% Assign 6 to N and display.
P=M+N
% Assign M+N to P and display.
Q=3+4j
% Define complex number, Q.
MagQ=abs(Q)
% Find magnitude of Q.
ThetaQ=(180/pi)*angle(Q)
% Find the angle of Q in degrees.
pause
ch2p2
Polynomials in s can be represented as row vectors containing the coefﬁcients.
Thus P1  s3  7s2  3s  23 can be represented by the vector shown below with elements
separated by a space or comma. Bit strings can be used to identify each section of this
tutorial.
'(ch2p2)'
% Display label.
P1=[1 7 -3 23]
% Store polynomial s^3 + 7s^2 -3s+
% 23 as P1 and display.
pause
ch2p3
Running the previous statements causes MATLAB to display the results.
Ending the command with a semicolon suppresses the display. Typing an expression
without a left-hand assignment and without a semicolon causes the expression to be
evaluated and the result displayed. Enter P2 in the MATLAB Command Window after
execution.
772
Appendix B: MATLAB Tutorial

'(ch2p3)'
% Display label.
P2=[3 5 7 8] ;
% Assign 3s^3 + 5s^2 +7s + 8 to P2
% without displaying.
3*5
% Evaluate 3*5 and display result.
pause
ch2p4
An F(s) in factored form can be represented in polynomial form. Thus
P3  s  2s  5s  6 can be transformed into a polynomial using poly (V), where
V is a row vector containing the roots of the polynomial and poly(V) forms the coefﬁcients
of the polynomial.
'(ch2p4)'
% Display label.
P3=poly([-2 -5 -6])
% Store polynomial
% (s+2)(s+5)(s+6)as P3 and
% display the coefficients.
pause
ch2p5
We can ﬁnd roots of polynomials using the roots (V) command. The roots are
returned as a column vector. For example, ﬁnd the roots of 5s4  7s3  9s2  3s  2  0.
'(ch2p5)'
% Display label.
P4=[5 7 9 -3 2]
% Form 5s^4+7s^3+9s^2-3s+2 and
% display.
rootsP4=roots(P4)
% Find roots of 5s^4+7s^3+9s^2
%-3s+2,
% assign to rootsP4, and display.
pause
ch2p6
Polynomials can be multiplied together using the conv(a,b) command (stand-
ing for convolve). Thus, P5  s3  7s2  10s  9s4  3s3  6s2  2s  1 is generated as
follows:
'(ch2p6)'
% Display label.
P5=conv([1 7 10 9],[1 -3 6 2 1])
% Form (s^3+7s^2+10s+9)(s^4-
% 3s^3+6s^2+2s+1), assign to P5,
% and display.
pause
ch2p7
The partial-fraction expansion for Fs  bs=as can be found using the
[K, p, k ]= residue (b, a) command (K = residue; p = roots of denominator;
k = direct quotient, which is found by dividing polynomials prior to performing a partial-
fraction expansion). We expand Fs  7s2  9s  12=ss  7s2  10s  100 as an
example. Using the results from MATLAB yields: Fs  0:2554  0:3382i =s
5:00008:6603i0:25540:3382i=s5:00008:6603i0:5280=s70:0171=s:
'(ch2p7)'
% Display label.
numf=[7 9 12];
% Define numerator of F(s).
denf=conv(poly([0 -7]),[1 10 100]);
% Define denominator of F(s).
[K,p,k]=residue(numf,denf)
% Find residues and assign to K;
% find roots of denominator and
% assign to p; find
% constant and assign to k.
pause
B.2 MATLAB Examples
773

ch2p8 (Example 2.3)
Let us do Example 2.3 in the book using MATLAB.
'(ch2p8) Example 2.3'
% Display label.
numy=32;
% Define numerator.
deny=poly([0 -4 -8]);
% Define denominator.
[r,p,k]=residue(numy,deny)
% Calculate residues, poles, and
% direct quotient.
pause
ch2p9 Creating Transfer Functions
Vector Method, Polynomial Form
A transfer function can be expressed as a numerator
polynomial divided by a denominator polynomial, that is, Fs  Ns=Ds. The numerator,
N(s), is represented by a row vector, numf, that contains the coefﬁcients of N(s). Similarly, the
denominator, D(s), is represented bya rowvector, denf, that contains the coefﬁcients of D(s).
We form F(s) with the command, F=tf(numf,denf). F is called a linear time-invariant
(LTI) object. This object, or transfer function, can be used as an entity in other operations, such
as addition or multiplication. We demonstrate with Fs  150s2  2s  7=ss2  5s  4.
Notice after executing the tf command, MATLAB prints the transfer function.
Vector Method, Factored Form
We also can create LTI transfer functions if
the numerator and denominator are expressed in factored form. We do this by using row
vectors containing theroots of the numerator and denominator.ThusGs  K*Ns=Ds can
beexpressed asanLTI objectusingthecommand,G=zpk(numg,deng,K),wherenumg is
a rowvectorcontaining the roots of N(s) anddeng is a rowvector containing the roots of D(s).
Theexpressionzpkstandsforzeros(rootsofthenumerator),poles(rootsofthe denominator),
and gain, K. We demonstrate with Gs  20s  2s  4=s  7s  8s  9. Notice
after executing the zpk command, MATLAB prints the transfer function.
Rational Expression in s Method, Polynomial Form (Requires Control System
Toolbox 8.4)
This method allows you to type the transfer function as you normally
would write it. The statement s=tf('s') must precede the transfer function if you wish to
create an LTI transfer function in polynomial form equivalent to using F=tf(numf,
denf).
Rational Expression in s Method, Factored Form (Requires Control System
Toolbox 8.4)
This method allows you to type the transfer function as you normally would
writeit.Thestatement s=zpk('s') must precedethetransferfunctionifyou wishtocreatean
LTI transfer function in factored form equivalent to using G=zpk(numg,deng,K).
For both rational expression methods the transfer function can be typed in any form
regardless of whether s=tf('s') or s=zpk('s') is used. The difference is in the created
LTI transfer function. We use the same examples above to demonstrate the rational
expression in s methods.
'(ch2p9)'
% Display label.
' Vector Method, Polynomial Form'
% Display label.
numf=150*[1 2 7]
% Store 150(s^2+2s+7) in numf and
% display.
denf=[1 5 4 0]
% Store s(s+1)(s+4) in denf and
% display.
' F(s)'
% Display label.
F=tf(numf,denf)
% Form F(s) and display.
clear
% Clear previous variables from
% workspace.
774
Appendix B: MATLAB Tutorial

' Vector Method, Factored Form'
% Display label.
numg=[-2 -4]
% Store (s+2)(s+4) in numg and
% display.
deng=[-7 -8 -9]
% Store (s+7)(s+8)(s+9) in deng
% and display.
K=20
% Define K.
' G(s)'
% Display label.
G=zpk(numg,deng,K)
% Form G(s) and display.
clear
% Clear previous variables from
% workspace.
' Rational Expression Method, Polynomial Form'
% Display label.
s=tf('s')
% Define's'as an LTI object in
% polynomial form.
F=150*(s^2+2*s+7)/[s*(s^2+...
% Form F (s) as an LTI transfer
5*s+4)]
% function in polynomial form.
G=20*(s+2)*(s+4)/[(s+7)*...
% Form G(s) as an LTI transfer
(s+8)*(s+9)]
% function in polynomial form.
clear
% Clear previous variables from
% workspace.
' Rational Expression Method, Factored Form'
% Display label.
s=zpk('s')
% Define's'as an LTI object in
% factored form.
F=150*(s^2+2 * s+7)/[s *(s^2+5*s+4)]
% Form F(s) as an LTI transfer
% function in factored form.
G=20*(s+2)*(s+4)/[(s+7)*(s+8)*(s+9)]
% Form G(s) as an LTI transfer
% function in factored form.
pause
ch2p10
Transfer function numerator and denominator vectors can be converted
between polynomial form containing the coefﬁcients and factored form containing the
roots. The MATLAB function, tf2zp(numtf,dentf), converts the numerator and
denominator from coefﬁcients to roots. The results are in the form of column vectors.
We demonstrate this with Fs  10s2  40s  60=s3  4s2  5s  7. The MATLAB
function, zp2tf(numzp,denzp,K), converts the numerator and denominator from
roots to coefﬁcients. The arguments numzp and denzp must be column vectors. In the
demonstration that follows, apostrophes signify transpose. We demonstrate the conver-
sion from roots to coefﬁcients with Gs  10s  2 s  4=ss  3s  5.
'(ch2p10)'
% Display label.
' Coefficients for F(s)'
% Display label.
numftf=[10 40 60]
% Form numerator of F(s)=
% (10s^2+40s+60)/(s^3+4s^2+5s
% +7).
denftf=[1 4 5 7]
% Form denominator of F(s)=
% (10s^2+40s+60)/(s^3+4s^2+5s
% +7).
' Roots for F(s)'
% Display label.
[numfzp,denfzp]=tf2zp(numftf,denftf)
% Convert F(s) to factored form.
' Roots for G(s)'
% Display label.
numgzp=[-2 -4]
% Form numerator of
B.2 MATLAB Examples
775

K=10
% G(s)=10(s+2)(s+4)/[s(s + 3)
% (s+5)].
dengzp=[0 -3 -5]
% Form denominator of
% G(s)=10(s+2)(s+4)/[s(s+3)(s+5)].
' Coefficients for G(s)'
% Display label.
[numgtf,dengtf]=zp2tf(numgzp',dengzp',K)
% Convert G(s) to polynomial form.
pause
ch2p11
LTI models can also be converted between polynomial and factored forms.
MATLAB commands tf and zpk are also used for the conversion between LTI models.
If a transfer function,Fzpk(s), is expressed as factors in the numerator and denominator, then tf
(Fzpk) converts Fzpk(s) to a transfer function expressed as coefﬁcients in the numerator and
denominator.Similarly, if a transfer function, Ftf(s),isexpressedascoefﬁcientsinthenumerator
and denominator, then zpk(Ftf) converts Ftf(s) to a transfer function expressed as factors in
the numerator and denominator. The following example demonstrates the concepts.
'(ch2p11)'
% Display label.
'Fzpk1(s)'
% Display label.
Fzpk1=zpk([-2 -4],[0 -3 -5],10)
% Form Fzpk1(s)=
% 10(s+2)(s+4)/[s(s+3)(s+5)].
'Ftf1'
% Display label.
Ftf1=tf(Fzpk1)
% Convert Fzpk1(s) to
% coefficients form.
'Ftf2'
% Display label.
Ftf2=tf([10 40 60],[1 4 5 7])
% Form Ftf2(s)=
% (10s^2+40s+60)/(s^3+4s^2+5s
% +7).
'Fzpk2'
% Display label.
Fzpk2=zpk(Ftf2)
% Convert Ftf2(s) to
% factored form.
pause
ch2p12
Functions of time can be easily plotted using MATLAB’s plot(X,Y,S),
where X is the independent variable, Y is the dependent variable, and S is a character string
describing the plot’s color, marker, and line characteristic. Type HELP PLOT in the
Command Window to see a list of choices for S. Multiple plots also can be obtained
using plot (X1,Y1,S1,X2,Y2,S2,X3,Y3,S3, . . . ). In the following example
we plot on the same graph sin(5t) in red and cos(5t) in green for t  0 to 10 seconds in 0.01
second increments. Time is speciﬁed as t=start: increment: ﬁnal.
'(ch2p12)'
% Display label.
t=0:0.01:10;
% Specify time range and increment.
f1=cos(5*t);
% Specify f1 to be cos(5t).
f2=sin(5*t);
% Specify f2 to be sin (5t).
plot(t,f1,' r',t,f2,' g')
% Plot f1 in red and f2 in green.
pause
Chapter 3: Modeling in the Time Domain
ch3p1
The square system matrix, A 
0
1
0
0
0
1
9 8 7
2
4
3
5 is written with a space or comma
776
Appendix B: MATLAB Tutorial

separating the elements of each row. The next row is indicated with a semicolon or carriage
return. The entire matrix is then enclosed in a pair of square brackets.
'(ch3p1)'
% Display label.
A=[0 1 0;0 0 1; -9 -8 -7]
% Represent A.
' or'
A=[0 1 0
% Represent A.
0 0 1
-9 -8 -7]
pause
ch3p2
A row vector, such as the output matrix C, can be represented with elements
separated by spaces or commas and enclosed in square brackets. A column vector, such as
input matrix B, can be written as elements separated by semicolons or carriage returns, or as
the transpose (’) of a row vector.
'(ch3p2)'
% Display label.
C=[2 3 4]
% Represent row vector C.
B=[7;8;9]
% Represent column vector B.
' or'
B=[7
% Represent column vector B.
8
9]
' or'
B=[7 8 9]'
% Represent column vector B.
pause
ch3p3
The state-space representation consists of specifying the A, B, C, and D matrices
followed by the creation of an LTI state-space object using the MATLAB command,
ss(A,B,C,D). Hence, for the matrices in (ch3p1) and (ch3p2), the state-space
representation would be:
' (ch3p3)'
% Display label.
A=[0 1 0;0 0 1;-9 -8 -7];
% Represent A.
B=[7;8;9] ;
% Represent column vector B.
C=[2 3 4] ;
% Represent row vector C.
D=0;
% Represent D.
F=ss(A,B,C,D)
% Create an LTI object and display.
ch3p4 (Example 3.4)
Transfer functions represented either bynumerator and denominator
or an LTI object can be converted to state space. For numerator and denominator representa-
tion, the conversion can be implemented using [A, B, C, D]=tf2ss(num,den). The A
matrix is returned in a form called the controller canonical form, which will be explained in
Chapter 5 in the text. To obtain the phase-variable form, [Ap,Bp,Cp,Dp], we perform the
following operations: Ap=inv(P)*A*P;Bp=inv(P)*B;Cp=C*P,Dp=D, where P is a
matrix with 1’s along the anti-diagonal and 0’s elsewhere. These transformations will
be explained in Chapter 5. The command inv (X) ﬁnds the inverse of a square matrix.
The symbol * signiﬁes multiplication. For systems represented as LTI objects, the command
ss(F), where F is an LTI transfer-function object, can be used to convert F to a state-space
object. Let us look at Example 3.4 in the text. For the numerator-denominator representation,
notice that the MATLAB response associates the gain, 24, with the vector C rather than the
vector B as in the example in the text. Both representations are equivalent. For the LTI transfer-
function object, the conversion to state space does not yield the phase-variable form. The result
B.2 MATLAB Examples
777

is a balanced model that improves the accuracy of calculating eigenvalues, which are
covered in Chapter 4. Since ss(F) does not yield familiar forms of the state equations
(nor is it possible to easily convert to familiar forms), we will have limited use for that
transformation at this time.
'(ch3p4) Example 3.4'
% Display label.
' Numerator-denominator representation conversion'
% Display label.
' Controller canonical form'
% Display label.
num=24;
% Define numerator of
% G(s)=C(s)/R(s).
den=[1 9 26 24];
% Define denominator of G(s).
[A,B,C,D]=tf2ss(num,den)
% Convert G(s) to controller
% canonical form, store matrices
% A, B, C, D, and display.
' Phase-variable form'
% Display label.
P=[0 0 1;0 1 0;1 0 0];
% Form transformation matrix.
Ap=inv(P)*A*P
% Form A matrix, phase-variable
% form.
Bp=inv(P)*B
% Form B vector, phase-variable
% form.
Cp=C*P
% Form C vector, phase-variable
% form.
Dp=D
% Form D phase-variable form.
' LTI object representation'
% Display label.
T=tf(num,den)
% Represent T(s)=24/(s^3+9s^2 +
% 26s+24) as an LTI transfer-
% function object.
Tss=ss(T)
% Convert T(s) to state space.
pause
ch3p5
State-space representations can be converted to transfer functions represented by
a numerator and a denominator using [num,den]=ss2tf(A,B,C,D,iu), where iu
is the input number for multiple-input systems. For single-input, single-output systems
iu=1. For an LTI state-space system, Tss, the conversion can be implemented using
Ttf=tf(Tss) to yield the transfer function in polynomial form or Tzpk=zpk(Tss) to
yield the transfer function in factored form. For example, the transfer function represented
by the matrices described in (ch3p3) can be found as follows:
' (ch3p5)'
% Display label.
' Non LTI'
% Display label.
A=[0 1 0;0 0 1;-9 -8 -7];
% Represent A.
B=[7;8;9];
% Represent B.
C=[2 3 4];
% Represent C.
D=0;
% Represent D.
' Ttf(s)'
% Display label.
[num,den]=ss2tf(A,B,C,D,1)
% Convert state-space
% representation to a
% transfer function represented as
% a numerator and denominator in
% polynomial form, G(s)=num/den,
% and display num and den.
' LTI'
% Display label.
Tss=ss(A,B,C,D)
% Form LTI state-space model.
' Polynomial form, Ttf(s)'
% Display label.
778
Appendix B: MATLAB Tutorial

Ttf=tf(Tss)
% Transform from state space to
% transfer function in polynomial
% form.
' Factored form, Tzpk(s)'
% Display label.
Tzpk=zpk(Tss)
% Transform from state space to
% transfer function in factored
% form.
pause
Chapter 4: Time Response
ch4p1 (Example 4.6)
We can use MATLAB to calculate characteristics of a second-order
system, such as damping ratio, ζ; natural frequency, ωn; percent overshoot, %OS (pos);
settling time, Ts; and peak time, Tp. Let us look at Example 4.6 in the text.
'(ch4p1) Example 4.6'
% Display label.
p1=[1 3+7*i];
% Define polynomial containing
% first pole.
p2=[1 3-7*i];
% Define polynomial containing
% second pole.
deng=conv(p1,p2);
% Multiply the two polynomials to
% find the 2nd order polynomial,
% as^2+bs+c.
omegan=sqrt(deng(3)/deng(1))
% Calculate the natural frequency,
% sqrt(c/a).
zeta=(deng(2)/deng(1))/(2*omegan)
% Calculate damping ratio,
% ((b/a)/2*wn).
Ts=4/(zeta*omegan)
% Calculate settling time,
% (4/z*wn).
Tp=pi/(omegan*sqrt(1 -zeta^2))
% Calculate peak time,
% pi/wn*sqrt(1 -z^2).
pos=100*exp(-zeta* pi/sqrt(1 -zeta^2))
% Calculate percent overshoot
% (100*e^(-z*pi/sqrt(1-z^2)).
pause
ch4p2 (Example 4.8)
We can use MATLAB to obtain system step responses. These
responses are particularly valuable when the system is not a pure two-pole system and
has additional poles or zeros. We can obtain a plot of the step response of a transfer function,
T(s) =num/den, using the command step(T), where T is an LTI transfer-function object.
Multiple plots also can be obtained using step(T1,T2,...).
Information about the plots obtained with step(T) can be found by left-clicking the
mouse on the curve. You can ﬁnd the curve’s label as well as the coordinates of the point on
which you clicked. Right-clicking away from a curve brings up a menu. From this menu you
can select (1) system responses to be displayed and (2) response characteristics to be
displayed, such as peak response. When selected, a dot appears on the curve at the
appropriate point. Let your mouse rest on the point to read the value of the characteristic.
You may also select (3) choice for grid on or off, (4) choice to normalize the curve, and
(5) properties, such as labels, limits, units, style, and characteristics.
If we add the left-hand side,[y,t]=step(T), we create vectors containing the plot’s
points, where y is the output vector and t is the time vector. For this case, a plot is not made
until the plot(t,y) command is given, where we assume we want to plot the output (y)
versus time (t). We can label the plot, the x-axis, and the y-axis with title('ab'),
xlabel('ab'), and ylabel('ab'), respectively. The command clf clears the graph
B.2 MATLAB Examples
779

prior to plotting. Finally, text can be placed anywhere on the graph using the command
text(X,Y,'text'), where (X,Y) are the graph coordinates where 'text' will be
displayed. Let us look at Example 4.8 in the text.
'(ch4p2) Example 4.8'
% Display label.
' Test Run'
% Display label.
clf
% Clear graph.
numt1=[24.542];
% Define numerator of T1.
dent1=[1 4 24.542];
% Define denominator of T1.
' T1(s)'
% Display label.
T1=tf(numt1,dent1)
% Create and display T1(s).
step(T1)
% Run a demonstration step response
% plot
title (' Test Run of T1(s)' )
% Add title to graph.
pause
' Complete Run'
% Display label.
[y1,t1]=step(T1);
% Run step response of T1 and
% collect points.
numt2=[245.42];
% Define numerator of T2.
p1=[1 10];
% Define (s+10) in denominator
% of T2.
p2=[1 4 24.542];
% Define (s^2+4s+24.542) in
% denominator of T2.
dent2=conv(p1,p2);
% Multiply (s + 10)(s^2+4s+24.542)
% for denominator of T2.
' T2(s)'
% Display label.
T2=tf(numt2,dent2)
% Create and display T2.
[y2,t2]=step(T2);
% Run step response of T2 and
% collect points.
numt3=[73.626];
% Define numerator of T3.
p3=[1 3];
% Define (s+3) in denominator
% of T3.
dent3=conv(p3,p2);
% Multiply (s+3)(s^2+4s+24.542)
% for denominator of T3.
' T3(s)'
% Display label.
T3=tf(numt3,dent3)
% Create and display T3.
[y3,t3]=step(T3);
% Run step response of T3 and
% collect points.
clf
% Clear graph.
plot(t1,y1,t2,y2,t3,y3)
% Plot acquired points with all
% three plots on one graph.
title (' Step Responses of T1(s),T2 (s), and T3(s)')
% Add title to graph.
xlabel(' Time(seconds)')
% Add time axis label.
ylabel (' Normalized Response')
% Add response axis label.
text(0.7,0.7,' c3(t)')
% Label step response of T1.
text(0.7,1.1,' c2(t)')
% Label step response of T2.
text(0.5,1.3,' c1(t)')
% Label step response of T3.
pause
step(T1,T2,T3)
% Use alternate method of plotting
% step responses.
title (' Step Responses of T1(s), T2(s), and T3(s)')
% Add title to graph.
pause
ch4p3
We also can plot the step response of systems represented in state space using the
step(T,t) command. Here T is any LTI object and t=a:b:c is the range for the time axis,
780
Appendix B: MATLAB Tutorial

where a is the initial time, b is the time step size, and c is the ﬁnal time. For example, t=0:1:10
means time from 0 to 10 seconds in steps of 1 second. The t ﬁeld is optional. Finally, in this
example we introduce the command grid on, which superimposes a grid over the step response.
Place the grid on command after the step(T,t) command.
'(ch4p3)'
% Display label.
clf
% Clear graph.
A=[0 1 0;0 0 1;-24 -26 -9];
% Generate A matrix.
B=[0;0;1];
% Generate B vector.
C=[2 7 1];
% Generate C vector.
D=0;
% Generate D.
T=ss(A,B,C,D)
% Generate LTI object, T, in state
% space and display.
t=0:0.1:10;
% Define range of time for plot.
step(T,t)
% Plot step response for given
% range of time.
grid on
% Turn grid on for plot.
pause
ch4p4 (Antenna Control Case Study)
We now use MATLAB to plot the step response
requested in the Antenna Control Case Study.
' (ch4p4) Antenna Control Case Study'
% Display label.
clf
% Clear graph.
numg=20.83;
% Define numerator of G(s).
deng=[1 101.71 171];
% Define denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Form and display transfer
% Function G(s).
step(G);
% Generate step response.
title(' Angular Velocity Response')
% Add title.
pause
ch4p5 (UFSS Case Study)
As a ﬁnal example, let us use MATLAB to do the UFSS Case
Study in the text (Johnson, 1980). We introduce table lookup to ﬁnd the rise time. Using the
interp1(y,t,y1)command,weset upatableofvaluesofamplitude,y,andtime,t,from
thestep response andlook forthevalueoftime for whichthe amplitude isy1= 0.1and0.9. We
also generate time response data over a deﬁned range of time using t=a:b:c followed by
[y,t]=step(G,t). Here G is an LTI transfer-function object andt is the range for the time
axis, where a is the initial time, b is the time step size, and c is the ﬁnal time; y is the output.
' (ch4p5) UFSS Case Study'
% Display label.
clf
% Clear graph.
'(a)'
% Display label.
numg=0.0169;
% Define numerator of 2nd order
% approximation of G(s).
deng=[1 0.226 0.0169];
% Define 2nd order term of
% denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
omegan=sqrt(deng(3))
% Find natural frequency.
zeta=deng(2)/(2*omegan)
% Find damping ratio.
Ts=4/(zeta*omegan)
% Find settling time.
Tp=pi/(omegan*sqrt(1-zeta^2))
% Find peak time.
B.2 MATLAB Examples
781

pos=exp(-zeta*pi/sqrt(1-zeta^2))*100
% Find percent overshoot.
t=0:0.1:35;
% Limit time to find rise time. t=0
% to 35 in steps of 0.1.
[y,t]=step(G,t);
% Generate and save points of step
% response over defined range of t.
Tlow=interp1(y,t,0.1);
% Search table for time when
% y=0.1*finalvalue.
Thi=interp1(y,t,0.9);
% Search table for
% time=0.9*finalvalue.
Tr=Thi-Tlow
% Calculate rise time.
'(b)'
% Display label.
numc=0.125*[1 0.435];
% Define numerator of C(s).
denc=conv(poly([0 -1.23]),[1 0.226 0.0169]);
% Define denominator of C(s).
[K,p,k]=residue(numc,denc)
% Find partial-fraction expansion.
'(d)'
% Display label.
numg=0.125*[1 0.435];
% Define numerator of G(s).
deng=conv([1 1.23],[1 0.226 0.0169]);
% Define denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
[y,t]=step(G);
% Generate complete step response
% and collect points.
plot(t,y)
% Plot points.
title (' Pitch Angle Response')
% Add title.
xlabel(' Time(seconds)')
% label time axis.
ylabel (' Pitch Angle (radians)')
% Label y-axis.
pause
Chapter 5: Reduction of Multiple Subsystems
ch5p1 (UFSS Pitch Control System)
MATLAB can be used for block diagram
reduction. Three methods are available: (1) Solution via Series, Parallel, & Feedback
Commands, (2) Solution via Algebraic Operations, and (3) Solution via Append & Connect
Commands. Let us look at each of these methods.
1. Solution via Series, Parallel, & Feedback Commands
The closed-loop transfer function is obtained using the following commands succes-
sively, where the arguments are LTI objects: series(G1,G2)for a cascade connec-
tion of G1(s); and G2(s); parallel(G1,G2)for a parallel connection of G1(s) and
G2(s); feedback(G,H,sign)for a closed-loop connection with G(s) as the forward
path, H(s) as the feedback, and sign is – 1 for negative-feedback systems or +1 for
positive-feedback systems. The sign is optional for negative-feedback systems.
2. Solution via Algebraic Operations
Another approach is to use arithmetic operations successively on LTI transfer functions
as follows: G2*G1 for a cascade connection of G1(s) and G2(s); G1+G2 for a parallel
connection of G1(s) and G2(s); G/(1+G*H)for a closed-loop negative-feedback
connection with G(s) as the forward path and H(s) as the feedback; G/(1-G*H)for
positive-feedback systems. When using division we follow with the function minreal
(sys)to cancel common terms in the numerator and denominator.
3. Solution via Append & Connect Commands
The last method, which deﬁnes the topology of the system, may be used effectively for
complicated systems. First, the subsystems are deﬁned. Second, the subsystems are
782
Appendix B: MATLAB Tutorial

appended, or gathered, into a multiple-input/multiple-output system. Think of this
system as a single system with an input for each of the subsystems and an output
for each of the subsystems. Next, the external inputs and outputs are speciﬁed. Finally,
the subsystems are interconnected. Let us elaborate on each of these steps.
The subsystems are deﬁned by creating LTI transfer functions for each. The subsystems
are appended using the command G=append(G1,G2,G3,G4, . . . . .Gn), where
the Gi are the LTI transfer functions of the subsystems and G is the appended system.
Each subsystem is now identiﬁed by a number based upon its position in the append
argument. For example, G3 is 3, based on the fact that it is the third subsystem in the
append argument (not the fact that we write it as G3).
Now that we have created an appended system, we form the arguments required to
interconnect their inputs and outputs to form our system. The ﬁrst step identiﬁes which
subsystems have the external input signal and which subsystems have the external output
signal. For example, we use inputs=[1 5 6]and outputs=[3 4]to deﬁne the
external inputs to be the inputs of subsystems 1,5, and 6 and the external outputs to be the
outputs of subsystems 3 and 4. For single-input/single-output systems, these deﬁnitions
use scalar quantities. Thus inputs=5,outputs=8 deﬁne the input to subsystem 5 as
the external input and the output of subsystem 8 as the external output.
At this point we tell the program how all of the subsystems are interconnected. We
form a Q matrix that has a row for each subsystem whose input comes from another
subsystem’s output. The ﬁrst column contains the subsystem’s number. Subsequent
columns contain the numbers of the subsystems from which the inputs come. Thus, a
typical row might be as follows: [3 6 7], or subsystem 3’s input is formed from the
sum of the output of subsystem 6 and the negative of the output of subsystem 7.
Finally, all of the interconnection arguments are used in the connect(G Q inputs,
outputs) command, where all of the arguments have been previously deﬁned.
Let us demonstrate the three methods for ﬁnding the total transfer function by looking
at the back endpapers and ﬁnding the closed-loop transfer function of the pitch control
loop for the UFSS with K1  K2  1 (Johnson, 1980). The last method using append and
connect requires that all subsystems be proper (the order of the numerator cannot be
greater than the order of the denominator). The pitch rate sensor violates this require-
ment. Thus, for the third method, we perform some block diagram maneuvers by pushing
the pitch rate sensor to the left past the summing junction and combining the resulting
blocks with the pitch gain and the elevator actuator. These changes are reﬂected in the
program. You should verify all computer results with hand calculations.
'(ch5p1) UFSS Pitch Control System'
' Solution via Series, Parallel, & Feedback Commands'
% Display labels.
numg1=[-1];
% Define numerator of G1(s).
deng1=[1];
% Define denominator of G1(s).
numg2=[0 2];
% Define numerator of G2(s).
deng2=[1 2];
% Define denominator of G2 (s).
numg3=-0.125*[1 0.435];
% Define numerator of G3(s).
deng3=conv([1 1.23],[1 0.226 0.0169]);
% Define denominator of G3(s).
numh1=[-1 0];
% Define numerator of H1(s).
denh1=[0 1];
% Define denominator of H1(s).
G1=tf(numg1,deng1);
% Create LTI transfer function,
% G1(s).
G2=tf(numg2,deng2);
% Create LTI transfer function,
% G2(s).
G3=tf(numg3,deng3);
% Create LTI transfer function,
% G3(s).
B.2 MATLAB Examples
783

H1=tf (numh1,denh1);
% Create LTI transfer function,
% H1(s).
G4=series(G2,G3);
% Calculate product of elevator
% and vehicle dynamics.
G5=feedback(G4,H1);
% Calculate closed-loop transfer
% function of inner loop.
Ge=series(G1,G5);
% Multiply inner-loop transfer
% function and pitch gain.
' T(s) via Series, Parallel, & Feedback Commands'
% Display label.
T=feedback(Ge,1)
% Find closed-loop transfer
% function.
' Solution via Algebraic Operations'
% Display label.
clear
% Clear session.
numg1=[-1];
% Define numerator of G1(s).
deng1=[1];
% Define denominator of G1(s).
numg2=[0 2];
% Define numerator of G2(s).
deng2=[1 2];
% Define denominator of G2(s).
numg3=-0.125*[1 0.435];
% Define numerator of G3(s).
deng3=conv([1 1.23],[1 0.226 0.0169]);
% Define denominator of G3(s).
numh1=[-1 0];
% Define numerator of H1(s).
denh1=[0 1];
% Define denominator of H1(s).
G1=tf (numg1,deng1);
% Create LTI transfer function, G1(s).
G2=tf (numg2,deng2);
% Create LTI transfer function, G2(s).
G3=tf (numg3,deng3);
% Create LTI transfer function, G3(s).
H1=tf (numh1,denh1);
% Create LTI transfer function, H1(s).
G4=G3*G2;
% Calculate product of elevator and
% vehicle dynamics.
G5=G4/(1+G4*H1);
% Calculate closed-loop transfer
% function of inner loop.
G5=minreal(G5);
% Cancel common terms.
Ge=G5*G1;
% Multiply inner-loop transfer
% functions.
' T(s) via Algebraic Operations'
% Display label.
T=Ge/(1+Ge);
% Find closed-loop transfer function.
T=minreal(T)
% Cancel common terms.
'Solution via Append & Connect Commands'
% Display label.
' G1(s)=(-K1)*(1/(-K2s))=1/s'
% Display label.
numg1=[1];
% Define numerator of G1(s).
deng1=[1 0];
% Define denominator of G1(s).
G1=tf(numg1,deng1)
% Create LTI transfer function,
% G1(s)=pitch gain*
% 1 (1/Pitch rate sensor).
' G2(s)=(-K2s)*(2/(s+2)'
% Display label.
numg2=[-2 0];
% Define numerator of G2(s).
deng2=[1 2];
% Define denominator of G2(s).
G2=tf(numg2,deng2)
% Create LTI transfer function,
% G2(s)=pitch rate sensor*vehicle
% dynamics.
' G3(s)=-0.125(s +0.435)/((s+1.23)(s^2+0.226s+0.0169))'
% Display label.
numg3=-0.125*[1 0.435];
% Define numerator of G3(s).
deng3=conv([1 1.23],[1 0.226 0.0169]);
% Define denominator of G3(s).
784
Appendix B: MATLAB Tutorial

G3=tf(numg3,deng3);
% Create LTI transfer function,
% G3(s)=vehicle dynamics.
System=append(G1,G2,G3)
% Gather all subsystems.
input=1;
% Input is at first subsystem,
% G1(s).
output=3;
% Output is output of third
% subsystem, G3(s).
Q=[1 -3 0
% Subsystem 1, G1(s), gets its
% input from the negative of the
% output of subsystem 3, G3(s).
2 1 -3
% Subsystem 2, G2(s), gets its
% input from subsystem 1, G1(s),
% and the negative of the output
% of subsystem 3, G3(s).
3 2 0];
% Subsystem 3, G3(s), gets its
% input from subsystem 2, G2(s).
T=connect(System,Q,input,output);
% Connect the subsystems.
' T(s) via Append & Connect Commands'
% Display label.
T=tf(T);
% Create LTI closed-loop transfer
% function.
T=minreal(T)
% Cancel common terms.
pause
ch5p2 (Example 5.3)
WecanuseMATLABtocalculatetheclosed-loopcharacteristicsofa
second-order system, such as damping ratio, ζ; natural frequency, ωn; percent overshoot, %OS
(pos); settling time, Ts; and peak time, Tp. The command [numt,dent]=tfdata(T,'v')
extracts the numerator and denominator of T(s) for a single-input/single-output system from
which the calculations are based. The argument'v'returns the numerator and denominator as
simple row vectors. Omitting'v'would return the numerator and denominator as cell arrays
requiring more steps to obtain the row vectors. We end by generating a plot of the closed-loop
step response. Let us look at Example 5.3 in the text.
'(ch5p2) Example 5.3'
% Display label.
numg=[25];
% Define numerator of G(s).
deng=poly([0 -5]);
% Define denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
' T(s)'
% Display label.
T=feedback(G,1)
% Find T(s).
[numt,dent]=tfdata(T,'v');
% Extract numerator & denominator
% of T(s).
wn=sqrt(dent(3))
% Find natural frequency.
z=dent(2)/(2*wn)
% Find damping ratio.
Ts=4/(z*wn)
% Find settling time.
Tp=pi/(wn*sqrt(1-z^2))
% Find peak time.
pos=exp(-z*pi/sqrt(1-z^2))*100
% Find percent overshoot.
step(T)
% Generate step response.
pause
ch5p3
MATLAB can be used to convert transfer functions to state space in a speciﬁed
form. The command [Acc Bcc Ccc Dcc]=tf2ss(num,den) can be used to
convert T(s)=num/den into controller canonical form with matrices and vectors
Acc, Bcc, Ccc, and Dcc. We can then form an LTI state-space object using
Scc=ss (Acc,Bcc,Ccc,Dcc). This object can then be converted into parallel form
B.2 MATLAB Examples
785

using Sp=canon(Scc,'type'), where type=modal yields the parallel form. Another
choice, not used here, is type=companion, which yields a right companion system
matrix. Transformation matrices can be used to convert to other representations. As an
example, let us convert Cs=Rs  24=s  2s  3s  4 into a parallel representation
in state space, as is done in Section 5.7—Parallel Form. Notice that the product of values in
the B and C vectors yields the same product as the results in Eqs. (5.49) and (5.50). Thus, the
two solutions are the same, but the state variables are ordered differently, and the gains are
split between the B and C vectors. We can also extract the system matrices from the LTI
object using [A,B,C,D]=ssdata(S), where S is a state-space LTI object and A, B, C, D,
are its associated matrices and vectors.
'(ch5p3)'
% Display label.
numt=24;
% Define numerator of T(s).
dent=poly([-2 -3 -4]);
% Define denominator of T(s).
' T(s)'
% Display label.
T=tf(numt,dent)
% Create and display T(s).
[Acc Bcc Ccc Dcc]=tf2ss(numt,dent);
% Convert T(s) to controller
% canonical form.
Scc=ss(Acc,Bcc,Ccc,Dcc);
% Create LTI controller canonical
% state-space object.
Sp=canon(Scc,'modal');
% Convert controller canonical form
% to parallel form.
' Controller Canonical Form'
% Display label.
[Acc,Bcc,Ccc,Dcc]=ssdata(Scc)
% Extract and display controller
% canonical form matrices.
' Parallel Form'
% Display label.
[Ap,Bp,Cp,Dp]=ssdata(Sp)
% Extract and display parallel form
% matrices.
pause
ch5p4 (Example 5.9)
We can use MATLAB to perform similarity transformations to
obtain other forms. Let us look at Example 5.9 in the text.
'(ch5p4) Example 5.9'
% Display label.
Pinv=[2 0 0; 3 2 0; 1 4 5];
% Define P inverse.
P=inv(Pinv)
% Calculate P.
'Original'
% Display label.
Ax=[0 1 0;0 0 1;-2 -5 -7]
% Define original A.
Bx=[0 0 1]
% Define original B.
Cx=[1 0 0]
% Define original C.
'Transformed'
% Display label.
Az=Pinv*Ax*P
% Calculate new A.
Bz=Pinv*Bx
% Calculate new B.
Cz=Cx*P
% Calculate new C.
pause
ch5p5
Using MATLAB’s [P,d]=eig(A) command, where the columns of P are the
eigenvectors of A and the diagonal elements of d are the eigenvalues of A, we can ﬁnd the
eigenvectors of the system matrix and then proceed to diagonalize the system. We can also
use canon (S,' modal')to diagonalize an LTI object, S, represented in state space.
'(ch5p5)'
% Display label.
A=[3 1 5;4 -2 7;2 3 1];
% Define original A.
B=[1;2;3];
% Define original B.
786
Appendix B: MATLAB Tutorial

C=[2 4 6];
% Define original C.
[P,d]=eig(A)
% Generate transformation matrix,
% P, and eigenvalues, d.
' Via Transformation'
% Display label.
Adt=inv(P)*A*P
% Calculate diagonal system A.
Bdt=inv(P)*B
% Calculate diagonal system B.
Cdt=C*P
% Calculate diagonal system C.
' Via Canon Command'
% Display label.
S=ss(A,B,C,0)
% Create state-space LTI object
% for original system.
Sp=canon(S,'modal')
% Calculate diagonal system via
% canon command.
pause
Chapter 6: Stability
ch6p1 (Example 6.7)
MATLAB can solve for the poles of a transfer function in order to
determine stability. To solve for the poles of T(s) use the pole(T) command. Let us look at
Example 6.7 in the text.
'(ch6p1) Example 6.7'
% Display label.
numg=1;
% Define numerator of G(s).
deng=conv ([1 0],[2 3 2 3 2]);
% Define denominator of G(s).
G=tf(numg,deng);
% Create G(s) object.
' T(s)'
% Display label.
T=feedback(G,1)
% Calculate closed-loop T(s)
% object.
% Negative feedback is default
% when there is no sign parameter.
poles=pole(T)
% Find poles of T(s).
pause
ch6p2 (Example 6.9)
We can use MATLAB to ﬁnd the range of gain for stability by
generating a loop, changing gain, and ﬁnding at what gain we obtain right–half-plane
poles.
'(ch6p2) Example 6.9'
% Display label.
K=[1:1:2000];
% Define range of K from 1 to 2000
% in steps of 1.
for n=1:length(K);
% Set up length of DO LOOP to equal
% number of K values to be tested.
dent=[1 18 77 K(n)];
% Define the denominator of T(s)
% for the nth value of K.
poles=roots(dent);
% Find the poles for the nth value
% of K.
r=real(poles);
% Form a vector containing the real
% parts of the poles for K(n).
if max(r) >=0,
% Test poles found for the nth
% value of K for a real value  0.
poles
% Display first pole values where
% there is a real part  0.
K=K(n)
% Display corresponding value of K.
break
% Stop loop if rhp poles are found.
end
% End if.
end
% End for.
pause
B.2 MATLAB Examples
787

ch6p3 (Example 6.11)
We can use MATLAB to determine the stability of a system
represented in state space by using the command eig(A) to ﬁnd the eigenvalues of the
system matrix, A. Let us apply the concept to Example 6.11 in the text.
'(ch6p3) Example 6.11'
% Display label.
A=[0 3 1;2 8 1;-10 -5 -2]
% Define system matrix, A.
eigenvalues=eig(A)
% Find eigenvalues.
pause
Chapter 7: Steady-State Errors
ch7p1 (Example 7.4, sys. b)
Static error constants are found using lim snG(s) as
s ® 0. Once the static error constant is found, we can evaluate the steady-state error. To
evaluate the static error constant we can use the command dcgain(G), which
evaluates G(s) at s  0. Let us look at Example 7.4, system (b), in the text.
'(ch7p1) Example 7.4, sys.b'
% Display label.
numg=500*poly([-2 -5 -6]);
% Define numerator of G(s).
deng=poly([0 -8 -10 -12]);
% Define denominator of G(s).
G=tf(numg,deng);
% Form G(s).
' Check Stability'
% Display label.
T=feedback(G,1);
% Form T(s).
poles=pole(T)
% Display closed-loop poles.
' Step Input'
% Display label.
Kp=dcgain(G)
% Evaluate Kp=numg/deng for s=0.
ess=1/(1+Kp)
% Evaluate ess for step input.
' Ramp Input'
% Display label.
numsg=conv([1 0],numg);
% Define numerator of sG(s).
densg=poly([0 -8 -10 -12]);
% Define denominator of sG(s).
sG=tf(numsg,densg);
% Create sG(s).
sG=minreal(sG);
% Cancel common's'in
% numerator(numsg) and
% denominator(densg).
Kv=dcgain(sG)
% Evaluate Kv=sG(s) for s=0.
ess=1/Kv
% Evaluate steady-state error for
% ramp input.
' Parabolic Input'
% Display label.
nums2g=conv([1 0 0],numg);
% Define numerator of s^2G(s).
dens2g=poly([0 -8 -10-12]);
% Define denominator of s^2G(s).
s2G=tf(nums2g,dens2g);
% Create s^2G(s).
s2G=minreal(s2G);
% Cancel common's'in
% numerator(nums2g) and
% denominator(dens2g).
Ka=dcgain(s2G)
% Evaluate Ka=s^2G(s) for s=0.
ess=1/Ka
% Evaluate steady-state error for
% parabolic input.
pause
ch7p2 (Example 7.6)
We can use MATLAB to evaluate the gain, K, required to meet a
steady-state error speciﬁcation. Let us look at Example 7.6 in the text.
'(ch7p2) Example 7.6'
% Display label.
numgdK=[1 5];
% Define numerator of G(s)/K.
dengdK=poly([0 -6 -7 -8]);
% Define denominator of G(s)/K.
GdK=tf(numgdK,dengdK);
% Create G(s)/K.
numgkv=conv([1 0],numgdK);
% Define numerator of sG(s)/K.
788
Appendix B: MATLAB Tutorial

dengkv=dengdK;
% Define denominator of sG(s)/K.
GKv=tf(numgkv,dengkv);
% Create sG(s)/K.
GKv=minreal(GKv);
% Cancel common's'in numerator
% and denominator of sG(s)/K.
KvdK=dcgain(GKv)
% Evaluate (Kv/K)=(numgkv/dengkv)
% for s=0.
ess=0.1
% Enumerate steady-state error.
K=1/(ess*KvdK)
% Solve for K.
' Check Stability'
% Display label.
T=feedback(K*GdK,1);
% Form T(s).
poles=pole(T)
% Display closed-loop poles.
pause
Chapter 8: Root Locus Techniques
ch8p1 (Example 8.7)
MATLAB allows root loci to be plotted with the rlocus(GH)
command, where G(s)H(s)=numgh/dengh and GH is an LTI transfer-function object.
Points on the root locus can be selected interactively using the [K,p]=rlocﬁnd(GH)
command. MATLAB then yields the gain (K) at that point as well as all other poles (p)
that have that gain. We can zoom in and out of the root locus by changing the range of
axis values using the command axis([xmin,xmax,ymin,ymax]). The root locus
can be drawn over a grid that shows constant damping ratio (z) and constant natural
frequency (wn) curves using the sgrid (z,wn)command. To plot multiple ζ and ωn
curves, use z=zmin:zstep:zmax and wn=wnmin:wn-step:wnmax to specify
ranges of values.
'(ch8p1) Example 8.7'
% Display label.
clf
% Clear graph.
numgh=[1 -4 20];
% Define numerator of G(s)H(s).
dengh=poly([-2 -4]);
% Define denominator of G(s)H(s).
' G(s)H(s)'
% Display label.
GH=tf(numgh,dengh)
% Create G(s)H(s) and display.
rlocus(GH)
% Draw root locus.
z=0.2:0.05:0.5;
% Define damping ratio values : 0.2
% to 0.5 in steps of 0.05.
wn=0:1:10;
% Define natural frequency values:
% 0 to 10 in steps of 1.
sgrid(z,wn)
% Generate damping ratio and
% natural frequency grid lines for
% root locus.
title ('Root Locus')
% Define title for root locus.
pause
rlocus(GH)
% Draw close-up root locus.
axis([-3 1 -4 4])
% Define range on axes for root
% locus close-up view.
title('Close-up')
% Define title for close-up root
% locus.
z=0.45;
% Define damping ratio line for
% overlay on close-up root locus.
wn=0;
% Suppress natural frequency
% overlay curves.
sgrid(z,wn)
% Overlay damping ratio curve on
% close-up root locus.
for k=1: 3
% Loop allows 3 points to be
% selected as per Example 8.7,
%(z=0.45, jwcrossing,breakaway).
B.2 MATLAB Examples
789

[K,p]=rlocfind(GH)
% Generate gain, K, and closed-loop
% poles, p, for point selected
% interactively on the root locus.
end
% End loop.
pause
ch8p2 (Example 8.8)
We can couple the design of gain on the root locus with a step-
response simulation for the gain selected. We introduce the command rlocus (G,K), which
allows us to specify the range of gain, K, for plotting the root locus. This command will help us
smooth the usual root locus plot by equivalently specifying more points via the argument, K.
Notice that the ﬁrst root locus plotted without the argument K is not smooth. We also introduce
the command x=input(' prompt'), which allows keyboard entry of a value for x in
response to a prompt. We apply this command to enter the desired percent overshoot. We also
add a variable’s value to the title of the root locus and step-response plots by inserting another
ﬁeld in the title command and use num2str(value) to convert value from a number to a
character string for display. Let us apply the concepts to Example 8.8 in the text.
'(ch8p2) Example 8.8'
% Display label.
clear
% Clear variables from workspace.
clf
% Clear graph.
numg=[1 1.5];
% Define numerator of G(s).
deng=poly([0 -1 -10]);
% Define denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
rlocus(G)
% Draw root locus (H(s)=1).
title(' Original Root Locus')
% Add title.
pause
K=0:0.005:50;
% Specify range of gain to smooth
% root locus.
rlocus(G,K)
% Draw smoothed root locus
% (H(s)=1).
title(' Smoothed Root Locus')
% Add title.
pos=input(' Type %OS ');
% Input desired percent overshoot
% from the keyboard.
z=-log(pos/100)/sqrt(pi^2+[log(pos/100)]^2)
% Calculate damping ratio.
sgrid(z,0)
% Overlay desired damping ratio
% line on root locus.
title([' Root Locus with', num2str(pos),'% overshoot line'])
% Define title for root locus
% showing percent overshoot used.
[K,p]=rlocfind(G)
% Generate gain, K, and closed-loop
% poles, p, for point selected
% interactively on the root locus.
pause
' T(s)'
% Display label.
T=feedback(K*G,1)
% Find closed-loop transfer
% function
% with selected K and display.
step(T)
% Generate closed-loop step
% response for point select on
% root locus.
title([' Step Response for K=',num2str(K)])
% Give step response a title which
% includes the value of K.
pause
790
Appendix B: MATLAB Tutorial

Chapter 9: Design via Root Locus
ch9p1 (Example 9.3)
We can use MATLAB to design PD controllers. The program allows
us to input a desired percent overshoot via the keyboard. MATLAB then produces a root locus
for the uncompensated system with an overlay of the percent overshoot line. We interactively
select the intersection of the root locus and the desired percent overshoot line to set the gain.
MATLAB outputs anestimateoftheuncompensatedsystem’sperformance speciﬁcations and a
step response of the uncompensated system for us to determine the required settling time. After
we input the settling time through the keyboard, MATLAB designs the PD controller and
produces a root locus of the PD compensated system from which we can interactively select the
gain. Finally, MATLAB produces an estimate of the PD compensated system’s performance
speciﬁcations and a step response of the PD compensated system.
'(ch9p1) Example 9.3'
% Display label.
clf
% Clear graph.
'Uncompensated System'
% Display label.
numg=1;
% Generate numerator of G(s).
deng=poly([0 -4 -6]);
% Generate denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
pos=input('Type desired percent overshoot ');
% Input desired percent overshoot.
z=log(pos/100)/sqrt(pi^2+[log(pos/100)]^2);
% Calculate damping ratio.
rlocus(G)
% Plot uncompensated root locus.
sgrid(z,0)
% Overlay desired percent
% overshoot line.
title (['Uncompensated Root Locus with ', num2str(pos),...
'% Overshoot Line'])
% Title uncompensated root locus.
[K,p]=rlocfind(G);
% Generate gain, K, and closed-loop
% poles, p, for point selected
% interactively on the root locus.
' Closed-loop poles='
% Display label.
p
% Display closed-loop poles.
f=input('Give pole number that is operating point ');
% Choose uncompensated system
% dominant pole.
' Summary of estimated specifications for selected point on'
' uncompensated root locus'
% Display label.
operatingpoint=p(f)
% Display uncompensated dominant
% pole.
gain=K
% Display uncompensated gain.
estimated_settling_time=4/abs(real(p(f)))
% Display uncompensated settling
% time.
estimated_peak_time=pi/abs(imag(p(f)))
% Display uncompensated peak time.
estimated_percent_overshoot=pos
% Display uncompensated percent
% overshoot.
estimated_damping_ratio=z
% Display uncompensated damping
% ratio.
estimated_natural_frequency=sqrt(real(p(f))^2+imag(p(f))^2)
% Display uncompensated natural
% frequency.
numkv=conv([1 0],numg);
% Set up numerator to evaluate Kv.
B.2 MATLAB Examples
791

denkv=deng;
% Set up denominator to evaluate Kv.
sG=tf(numkv,denkv);
% Create sG(s).
sG=minreal(sG);
% Cancel common poles and zeros.
Kv=dcgain(K*sG)
% Display uncompensated Kv.
ess=1/Kv
% Display uncompensated
% steady-state
% error for unit ramp input.
' T(s)'
% Display label.
T=feedback(K * G,1)
% Find uncompensated T(s).
step(T)
% Plot step response of
% uncompensated system.
title(['Uncompensated System Step Response with ',num2str(pos),...
'% Overshoot'])
% Add title to uncompensated step
% response.
' Press any key to go to PD compensation'
% Display label.
pause
' Compensated system'
% Display label.
Ts=input('Type Desired Settling Time ');
% Input desired settling time from
% the keyboard.
wn=4/(Ts*z);
% Calculate natural frequency.
desired_pole=(-z*wn)+(wn*sqrt(1-z^2)*i);
% Calculate desired dominant pole
% location.
angle_at_desired_pole=(180/pi)*...
angle(polyval(numg,desired_pole)/polyval(deng,desired_pole));
% Calculate angular contribution
% to desired pole without PD
% compensator.
PD_angle=180-angle_at_desired_pole;
% Calculate required angular
% contribution from PD
% compensator.
zc=((imag(desired_pole)/tan(PD_angle*pi/180))...
real (desired_pole));
% Calculate PD zero location.
' PD Compensator'
% Display label.
numc=[1 zc];
% Calculate numerator of Gc(s).
denc=[0 1];
% Calculate denominator of Gc(s).
' Gc(s)'
% Display label.
Gc=tf (numc,denc)
% Create and display Gc(s).
' G(s)Gc(s)'
% Display label.
Ge=G*Gc
% Cascade G(s) and Gc(s).
rlocus(Ge,0:0.005:100)
% Plot root locus of PD compensated
% system.
sgrid(z,0)
% Overlay desired percent
% overshoot line.
title (['PD Compensated Root Locus with ', num2str(pos),...
'% Overshoot Line'])
% Add title to PD compensated root
% locus.
[K,p]=rlocfind(Ge);
% Generate gain, K, and closed-loop
% poles, p, for point selected
% interactively on the root locus.
' Closed-loop poles='
% Display label.
p
% Display PD compensated systems'
% closed-loop poles.
f=input('Give pole number that is operating point ');
% Choose PD compensated system
% dominant pole.
792
Appendix B: MATLAB Tutorial

' Summary of estimated specifications for selected point on PD'
' compensated root locus'
% Display label.
operatingpoint=p(f)
% Display PD compensated dominant
% pole.
gain=K
% Display PD compensated gain.
estimated_settling_time=4/abs(real(p(f)))
% Display PD compensated settling
% time.
estimated_peak_time=pi/abs(imag(p(f)))
% Display PD compensated peak time.
estimated_percent_overshoot=pos
% Display PD compensated percent
% overshoot.
estimated_damping_ratio=z
% Display PD compensated damping
% ratio.
estimated_natural_frequency=sqrt(real(p(f))^2+imag(p(f))^2)
% Display PD compensated natural
% frequency.
s=tf([1 0],1);
% Create transfer function,'s'.
sGe=s*Ge;
% Create sGe(s).
sGe=minreal(sGe);
% Cancel common poles and zeros.
Kv=dcgain(K*sGe)
% Display compensated Kv.
ess=1/Kv
% Display compensated
% steady-state error for
% unit ramp input.
' T(s)'
% Display label.
T=feedback(K*Ge,1)
% Create and display PD compensated
%T(s).
' Press any key to continue and obtain the PD compensated step'
' response'
% Display label.
pause
step(T)
% Plot step response for PD
% compensated system.
title(['PD Compensated System Step Response with '...
num2str(pos),'% Overshoot'])
% Add title to step response
% of PD compensated system.
pause
ch9p2 (Example 9.4)
We can use MATLAB to design a lead compensator. The program
allows us to input a desired percent overshoot via the keyboard. MATLAB then produces a
root locus for the uncompensated system with an overlay of the percent overshoot line. We
interactively select the intersection of the root locus and the desired percent overshoot line to
set the gain. MATLAB outputs an estimate of the uncompensated system’s performance
speciﬁcations and a step response of the uncompensated system for us to determine the
required settling time. Next we input the settling time and the lead compensator zero through
the keyboard. At this point we take a different approach from that of the previous example.
Rather than letting MATLAB calculate the lead compensator pole directly, MATLAB
produces a root locus for every interactive guess of a lead compensator pole. Each root locus
contains the desired damping ratio and natural frequency curves. When our guess is correct,
the root locus, the damping ratio line, and the natural frequency curve will intersect. We then
interactively select this point of intersection to input the gain. Finally, MATLAB produces
an estimate of the lead-compensated system’s performance speciﬁcations and a step
response of the lead-compensated system.
'(ch9p2) Example 9.4'
% Display label.
clf
% Clear graph.
B.2 MATLAB Examples
793

' Uncompensated System'
% Display label.
numg=1;
% Generate numerator of G(s).
deng=poly([0 -4 -6]);
% Generate denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
pos=input('Type desired percent overshoot ');
% Input desired percent overshoot.
z=-log(pos/100)/sqrt(pi^2+[log(pos/100)]^2);
% Calculate damping ratio.
rlocus(G)
% Plot uncompensated root locus.
sgrid(z,0)
% Overlay desired percent
% overshoot line.
title(['Uncompensated Root Locus with ', num2str(pos),...
'% Overshoot Line'])
% Title uncompensated root locus.
[K,p]=rlocfind(G);
% Generate gain, K, and closed-loop
% poles, p, for point selected
% interactively on the root locus.
' Closed-loop poles='
% Display label.
p
% Display closed-loop poles.
f=input('Give pole number that is operating point ');
% Choose uncompensated system
% dominant pole.
' Summary of estimated specifications for selected point on'
' uncompensated root locus'
% Display label.
operatingpoint=p(f)
% Display uncompensated dominant
% pole.
gain=K
% Display uncompensated gain.
estimated_settling_time=4/abs(real(p(f)))
% Display uncompensated settling
% time.
estimated_peak_time=pi/abs(imag(p(f)))
% Display uncompensated peak time.
estimated_percent_overshoot=pos
% Display uncompensated percent
% overshoot.
estimated_damping_ratio=z
% Display uncompensated damping
% ratio.
estimated_natural_frequency=sqrt(real(p(f))^2+imag(p(f))^2)
% Display uncompensated natural
% frequency.
numkv=conv([1 0],numg);
% Set up numerator to evaluate Kv.
denkv=deng;
% Set up denominator to evaluate Kv.
sG=tf(numkv,denkv);
% Create sG(s).
sG=minreal(sG);
% Cancel common poles and zeros.
Kv=dcgain(K*sG)
% Display uncompensated Kv.
ess=1/Kv
% Display uncompensated
% steady-state error for
% unit ramp input.
' T(s)'
% Display label.
T=feedback(K*G,1)
% Create and display T(s).
step(T)
% Plot step response of
% uncompensated system.
title(['Uncompensated System Step Response with ',...
num2str(pos),'% Overshoot'])
% Add title to uncompensated step
% response.
' Press any key to go to lead compensation'
% Display label.
pause
794
Appendix B: MATLAB Tutorial

Ts=input('Type Desired Settling Time');
% Input desired settling time.
b=input('Type Lead Compensator Zero, (s+b). b= ');
% Input lead compensator zero.
done=1;
% Set loop flag.
while done==1
% Start loop for trying lead
% compensator pole.
a=input ('Enter a Test Lead Compensator Pole, (s+a). a= ');
% Enter test lead compensator pole.
numge=conv(numg,[1 b]);
% Generate numerator of Gc(s)G(s).
denge=conv([1 a],deng);
% Generate denominator
% of Gc(s)G(s).
Ge=tf(numge,denge);
% Create Ge(s)= Gc(s)G(s).
wn=4/(Ts*z);
% Evaluate desired natural
% frequency.
clf
% Clear graph.
rlocus(Ge)
% Plot compensated root locus with
% test lead compensator pole.
axis([-10,10,-10,10])
% Change lead-compensated
% root locus axes.
sgrid(z,wn)
% Overlay grid on lead-compensated
% root locus.
title (['Lead-Compensated Root Locus with ', num2str(pos),...
'% Overshoot Line, Lead Pole at ',...
num2str(-a),' and Required Wn'])
% Add title to lead-compensated
% root locus.
done=input (' Are you done? (y=0,n=1)');
% Set loop flag.
end
% End loop for trying compensator
% pole.
[K,p]=rlocfind (Ge);
% Generate gain, K, and closed-loop
% poles, p, for point selected
% interactively on the root locus.
' Gc(s)'
% Display label.
Gc=tf ([1 b],[1 a])
% Display lead compensator.
' Gc(s)G(s)'
% Display label.
Ge
% Display Gc(s)G(s).
' Closed-loop poles='
% Display label.
p
% Display lead-compensated
% system's
% closed-loop poles.
f=input('Give pole number that is operating point ');
% Choose lead-compensated system
% dominant pole.
' Summary of estimated specifications for selected point on lead'
' compensated root locus'
% Display label.
operatingpoint=p(f)
% Display lead-compensated
% dominant pole.
gain=K
% Display lead-compensated gain.
estimated_settling_time=4/abs(real(p(f)))
% Display lead-compensated
% settling time.
estimated_peak_time=pi/abs(imag(p(f)))
% Display lead-compensated
% peak time.
estimated_percent_overshoot=pos
% Display lead-compensated
% percent overshoot.
B.2 MATLAB Examples
795

estimated_damping_ratio=z
% Display lead-compensated
% damping ratio.
estimated_natural_frequency=sqrt(real(p(f))^2+imag(p(f))^2)
% Display lead-compensated
% natural frequency.
s=tf ([1 0],1);
% Create transfer Function,'s'.
sGe=s*Ge;
% Create sGe(s) to evaluate Kv.
sGe=minreal(sGe);
% Cancel common poles and zeros.
Kv=dcgain(K*sGe)
% Display lead-compensated Kv.
ess=1/Kv
% Display lead-compensated steady-
% state error for unit ramp input.
' T(s)'
% Display label.
T=feedback(K*Ge,1)
% Create and display lead-
% compensated T(s).
' Press any key to continue and obtain the lead-compensated step'
' response'
% Display label.
pause
step(T)
% Plot step response for lead-
% compensated system.
title (['Lead-Compensated System Step Response with ',...
num2str(pos),'% Overshoot'])
% Add title to step response
% of lead-compensated system.
pause
Chapter 10: Frequency Response Techniques
ch10p1 (Example 10.3)
We can use MATLAB to make Bode plots using bode(G),
where G/(s)=numg/deng and G is an LTI transfer-function object. Information about the
plots obtained with bode(G) can be found by left-clicking the mouse on the curve. You can
ﬁnd the curve’s label, as well as the coordinates of the point on which you clicked. Right-
clicking away from a curve brings up a menu if the icons on the menu bar are deselected. From
this menu you can select (1) system responses to be displayed and (2) characteristics, such as
peak response. When selected, a dot appears on the curve at the appropriate point. Let your
mouse rest on the point to read the value of the characteristic. You may also select (3) which
curves to view, (4) choice for grid on or off, (5) returning to full view after zooming, and (6)
properties, such as labels, limits, units, style, and characteristics. We can obtain points on the
plot using [mag, phase, w]=bode(G),where magnitude, phase, and frequency are
stored in mag, phase, and w, respectively. Magnitude and phase are stored as 3-D arrays.
We use mag(:,:)', phase(:,:)' to convert the arrays to column vectors, where the
apostrophe signiﬁes matrix transpose. Let us look at Example 10.3 in the text.
'(ch10p1) Example 10.3'
% Display label.
clf
% Clear graph.
numg=[1 3];
% Define numerator of G(s).
deng=conv([1 2],[1 2 25]);
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
bode(G)
% Make a Bode plot.
grid on
% Turn on grid for Bode plot.
title('Open-Loop Frequency Response')
% Add a title to the Bode plot.
[mag,phase,w]=bode(G);
% Store points on the Bode plot.
points=[20*log10(mag(:,:))',phase(:,:)',w]
% List points on Bode plot with
% magnitude in dB.
pause
796
Appendix B: MATLAB Tutorial

ch10p2 (Example 10.5)
We can use MATLAB to make Nyquist diagrams using
nyquist(G), where G(s)=numg/deng and G is an LTI transfer-function object.
Information about the plots obtained with nyquist(G) can be found by left-clicking
the mouse on the curve. You can ﬁnd the curve’s label, as well as the coordinates of the point
on which you clicked and the frequency. Right-clicking away from a curve brings up a menu
if the icons on the menu bar are deselected. From this menu you can select (1) system
responses to be displayed and (2) characteristics, such as peak response. When selected, a
dot appears on the curve at the appropriate point. Let your mouse rest on the point to read the
value of the characteristic. You may also select (3) whether or not to show negative
frequencies, (4) choice for grid on or off, (5) choice for zooming to (–1,0), (6) returning to
full view after zooming, and (7) properties, such as labels, limits, units, style, and
characteristics. We can obtain points on the plot by using [re,im,w]=nyquist(G),
where the real part, imaginary part, and frequency are stored in re, im, and w,
respectively, and re and im are 3-D arrays. We can specify a range of w by using
[re,im]=nyquist(G,w). We use re(:,:)', and im(:,:)' to convert the arrays to
column vectors. Let us look at Example 10.5 in the text.
'(ch10p2) Example 10.5'
% Display label.
clf
% Clear graph.
numg=[1 2];
% Define numerator of G(s).
deng=[1 0 0];
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
nyquist(G)
% Make a Nyquist diagram.
grid on
% Turn on grid for Nyquist diagram.
title('Open-Loop Frequency Response')
% Add a title to the Nyquist
% diagram.
w=0:0.5:10;
% Let 0 <w< 10 in steps of 0.5.
[re,im]=nyquist(G,w);
% Get Nyquist diagram points for a
% range of w.
points=[re(:,:)',im(:,:)',w']
% List specified range of points
% in Nyquist diagram.
pause
ch10p3 (Example 10.8)
We can use MATLAB to ﬁnd gain margin (Gm), phase margin
(Pm), the gain-margin frequency, where the phase plot goes through 180 degrees (Wcg), and
the phase-margin frequency, where the magnitude plot goes through zero dB(Wcp). To
ﬁnd these quantities we use [Gm, Pm, Wcg, Wcp]=margin(G), where G(s)=numg/deng
and G is an LTI transfer-function object. Let us look at Example 10.8 in the text.
'(ch10p3) Example 10.8'
% Display label.
clf
% Clear graph.
numg=6;
% Define numerator of G(s).
deng=conv([1 2],[1 2 2]);
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
nyquist(G)
% Make a Nyquist diagram.
grid on
% Turn on grid for the Nyquist
% diagram.
title ('Open-Loop Frequency Response')
% Add a title to the Nyquist
% diagram.
[Gm,Pm,Wcg,Wcp]=margin(G);
% Find margins and margin
% frequencies.
B.2 MATLAB Examples
797

' Gm(dB); Pm(deg.); 180 deg. freq.(r/s); 0 dB freq. (r/s)'
% Display label.
margins=[20*log10(Gm),Pm,Wcg,Wcp]
% Display margin data.
pause
ch10p4 (Example 10.9)
We can use MATLAB to determine the range of K for
stability using frequency response methods. Let us look at Example 10.9 in the text.
'(ch10p4) Example 10.9'
% Display label.
numg=1;
% Define numerator of G(s).
deng=poly([-2 -4 -5]);
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
[Gm,Pm,Wcg,Wcp]=margin(G);
% Find margins and margin
% frequencies.
K=Gm
% Display K for stability.
pause
ch10p5 (Example 10.11)
We can use MATLAB to ﬁnd the closed-loop frequency
response. Let us look at Example 10.11 in the text.
'(ch10p5) Example 10.11'
% Display label.
clf
% Clear graph.
numg=50;
% Define numerator of G(s).
deng=poly([0 -3 -6]);
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
'T(s)'
% Display label.
T=feedback(G,1)
% Find and display closed-loop
% transfer function.
bode(T)
% Make a Bode plot.
grid on
% Turn on the grid for the plots.
title('Closed-Loop Frequency Response')
% Add a title to the Bode plot.
pause
nyquist(T)
% Make a Nyquist diagram.
title('Closed-Loop Frequency Response')
% Add a title to the Nyquist
% diagram.
pause
ch10p6
We can use MATLAB to plot Nichols charts using nichols(G), where
G(s)=numg/deng and G is an LTI transfer-function object. The Nichols grid can be
added using the ngrid command after the nichols(G) command. Information about the
plots obtained with nichols(G) can be found by left-clicking the mouse on the curve.
You can ﬁnd the curve’s label, as well as the coordinates of the point on which you clicked
and the frequency. Right-clicking away from a curve brings up a menu if the icons on
the menu bar are deselected. From this menu you can select (1) system responses to be
displayed and (2) characteristics, such as peak response. When selected, a dot appears on
the curve at the appropriate point. Let your mouse rest on the point to read the value of the
characteristic. You may also select (3) choice for grid on or off, (4) returning to full view
798
Appendix B: MATLAB Tutorial

after zooming, and (5) properties, such as labels, limits, units, style, and characteristics. Let
us make a Nichols chart of Gs  1=ss  1s  2.
'(ch10p6)'
% Display label.
clf
% Clear graph.
numg=1;
% Define numerator of G(s).
deng=poly([0 -1 -2]);
% Define denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
nichols(G)
% Make a Nichols plot.
ngrid
% Add Nichols grid.
pause
ch10p7 (Example 10.15)
We can use MATLAB and frequency response methods
to include time delay in the loop. Time delay is represented by [numd,dend]=pade (T,
n), where T is the delay time in seconds and n is the order. Larger values of n give better
approximations to the delay, Gd(s)=numd/dend. Since we are plotting multiple plots, we
ﬁrst collect the data for the Bode plots by using [mag,phase]=bode(G,w), where w is
speciﬁed as a range of frequencies. We then use the generic plotting command. Also notice
the commands used to label the axes and the plots on the Bode plot (see the MATLAB
instruction manual for details). Let us look at Example 10.15 in the text.
'(ch10p7) Example 10.15'
% Display label.
clf
% Clear graph.
hold off
% Turn graph hold off.
numg=1;
% Define numerator of G(s).
deng=poly([0 -1 -10]);
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
w=0.01:0.1:10;
% Let 0.01<w<10 in steps of 0.1.
[magg,phaseg]=bode (G,w);
% Collect Bode data for G(s).
[numd,dend]=pade(1,6);
% Represent the delay.
Gd=tf(numd,dend);
% Create and display the delay,
% Gd(s).
[magd,phased]=bode(Gd,w);
% Collect Bode data for Gd(s).
Ge=Gd*G;
% Form Gd(s)G(s).
[mage,phasee]=bode(Ge,w);
% Collect Bode data for Gd(s)G(s).
subplot(2,1,1)
% Subdivide plot area for plot 1.
semilogx(w,20*log10(mage(:,:)))
% Plot magnitude response.
grid on
% Turn on grid for magnitude plot.
axis([0.01,10,-80,20]);
% Limit Bode plot axes.
title ('Magnitude Response with Delay')
% Add title to magnitude response.
xlabel('Frequency (rad/s)')
% Label x-axis of magnitude
% response.
ylabel(' 20log M')
% Label y-axis of magnitude
% response.
subplot(2,1,2)
% Subdivide plot area for plot 2.
phased=phased-1080;
% Adjust phase offset to compensate
% for modulo 360.
phasee=phasee-1080;
% Adjust phase offset to compensate
% for modulo 360.
semilogx(w,phaseg(:,:),w,phased(:,:),w,phasee(:,:))
% Plot phase response for G(s),
% Gd(s), and G(s)Gd(s) on one
% graph.
B.2 MATLAB Examples
799

grid on
% Turn on grid for phase plot.
axis([0.01,10,-900,0]);
% Limit Bode plot axes.
title ('Phase Response with Delay')
% Add title to phase response.
xlabel('Frequency (rad/s)')
% Label x-axis of phase response.
ylabel('Phase (degrees)')
% Label y-axis of phase response.
text(1.5,-50,'Time Delay')
% Label time delay curve.
text(4,-150,'System')
% Label system curve.
text(2.7,-300,' Total')
% Label total curve.
pause
ch10p8 (Example 10.18)
We can use MATLAB and frequency response methods to
determine experimentally a transfer function from frequency response data. By determining
simplecomponenttransferfunctionsandthensuccessivelysubtractingtheirfrequencyresponse,
we can approximate the complete transfer function. Let us look at Example 10.18 in the text and
use MATLAB for a portion of the problem. You can complete the program for practice. For this
problem we generate the original frequency response plot via a transfer function. Normally, the
data for the original frequency response plot would be tabular, and the program would begin at
the step[M0,P0]=bode(G0,w) where the tabular data is generated. In other words, in a real
application, the data would consist of column vectors M0, P0, and w'.
'(ch10p8) Example 10.18'
% Display label.
clf
% Clear graph.
hold off
% Turn graph hold off.
% Generate the experimental Bode plots for G0(s)=numg0/deng0, that
% is, M0,P0.
numg0=70*[1 20];
% Define numerator of G0(s).
deng0=conv([1 7],[1 2 25]);
% Partially define denominator of
% G0(s).
deng0=conv(deng0,[1 70]);
% Complete the denominator of
% G0(s).
G0=tf(numg0,deng0);
% Create G0(s).
w=1:0.5:1000;
% Let 1<w<1000 in steps of 0.5.
[M0, P0]=bode(G0,w);
% Generate the tabular data.
[20*log10(M0(:,:))',P0(:,:)',w'];
% Convert magnitude data to dB.
bode(G0,w)
% Generate a Bode plot.
grid on
% Turn on grid for Bode plot.
title('Experimental')
% Add title.
pause
clf
% Clear graph.
% Estimate a component part of the transfer function as
% G1 (s)=25/(s^2+2*0.22*5s+5^2) and subtract it from the experimental
% frequency response
numgl=5^2;
% Define numerator of G1(s).
deng1=[1 2*0.22*5 5^2];
% Define denominator of G1(s).
'First estimate'
% Display label.
G1=tf(numg1,deng1)
% Create and display G1(s).
[M1,P1]=bode(G1,w);
% Generate Bode data for G1(s).
M2=20*log10(M0(:,:))-20*log10(M1(:,:));
% Subtract Bode magnitude data of
% G1 from original magnitude data.
P2=P0(:,:)-P1(:,:);
% Subtract Bode phase data of G1
% from original phase data.
subplot(2,1,1)
% Divide plot area in two for
% magnitude plot.
semilogx(w(:,:),M2)
% Plot magnitude response after
% subtracting.
800
Appendix B: MATLAB Tutorial

grid on
% Turn on grid for magnitude plot.
xlabel('Frequency (rad/sec)')
% Add x-axis label.
ylabel('Gain dB')
% Add y-axis label.
subplot(2,1,2)
% Divide plot area in two for phase
% plot.
semilogx(w,P2)
% Plot the phase response after
% subtracting.
grid on
% Turn on grid for phase plot.
title('Experimental Minus 25/(s^2+2*0.22*5s+5^2)')
% Add title.
xlabel('Frequency (rad/sec)')
% Add x-axis label.
ylabel('Phase deg')
% Add y-axis label.
'This completes a portion of Example 10.18.'
'The student should continue the program for practice.'
pause
Chapter 11: Design via Frequency Response
ch11p1 (Example 11.1)
We can design via gain adjustment on the Bode plot using
MATLAB. You will input the desired percent overshoot from the keyboard. MATLAB will
calculate the required phase margin and then search the Bode plot for that phase margin. The
magnitude at the phase-margin frequency is the reciprocal of the required gain. MATLAB
will then plot a step response for that gain. Let us look at Example 11.1 in the text.
'(ch11p1) Example 11.1'
% Display label.
clf
% Clear graph.
numg=[100];
% Define numerator of G(s).
deng=poly ([0 -36 -100]);
% Define denominator of G(s).
G=tf(numg,deng)
% Create and display G(s).
pos=input ('Type %OS ');
% Input desired percent overshoot.
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2));
% Calculate required damping ratio.
Pm=atan(2*z/(sqrt(-2*z^2+sqrt(1+4*z^4))))*(180/pi);
% Calculate required phase margin.
w=0.01:0.01:1000;
% Set range of frequency from 0.01
% to 1000 in steps of 0.01.
[M,P]=bode(G,w);
% Get Bode data.
Ph=-180+Pm;
% Calculate required phase angle.
for k=1: 1: length (P);
% Search Bode data for required
% phase angle.
if P(k)-Ph <=0;
% If required phase angle is found,
% find the value of
M=M(k);
% magnitude at the same frequency.
'Required K'
% Display label.
K=1/M
% Calculate the required gain.
break
% Stop the loop.
end
% End if.
end
% End for.
T=feedback(K*G,1);
% Find T(s) using the calculated K.
step(T)
% Generate a step response.
title (['Closed-Loop Step Response for K= ',num2str(K)])
% Add title to step response.
pause
ch11p2 (Example 11.2)
Let us use MATLAB to design a lag compensator. The
program solves Example 11.2 in the text and follows the same design technique
B.2 MATLAB Examples
801

demonstrated in that example. You will input the value of gain to meet the steady-state
error requirement followed by the desired percent overshoot. MATLAB then designs a
lag compensator, evaluates Kv , and generates a closed-loop step response.
'(ch11p2) Example 11.2'
% Display label.
clf
% Clear graph.
K=input('Type value of K to meet steady-state error requirement ');
% Input K.
pos=input ('Type %OS ');
% Input desired percent overshoot.
numg=[100*K];
% Define numerator of G(s).
deng=poly([0 -36 -100]);
% Define denominator of G(s).
'G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2));
% Calculate required damping
% ratio.
Pm=atan(2*z/(sqrt(-2*z^2+sqrt(1+4*z^4))))*(180/pi)+10;
% Calculate required phase margin.
w=0.01:0.01:100;
% Set range of frequency from 0.01
% to 1000 in steps of 0.01.
[M,P]=bode(G,w);
% Get Bode data.
Ph=-180+Pm;
% Calculate required phase angle.
for k=1:1:length(P);
% Search Bode data for required
% phase angle.
if P(k)-Ph <=0;
% If required phase angle is found,
% find the value of
M=M(k);
% magnitude at the same frequency.
wf=w(k);
% At this frequency the magnitude
% plot must go through 0 dB.
break
% Stop the loop.
end
% End if.
end
% End for.
wh=wf/10;
% Calculate the high-frequency
% break of the lag compensator.
wl=(wh/M);
% Calculate the low-frequency
% break of the lag compensator;
% found from lag compensator,
% Gc(s)=Kc(s+wh)/(s+wl), high & low
% frequency gain requirements.
% At low w, gain=1. Thus,
% Kc*wh/wl=1. At high w, gain=1/M.
% Thus Kc=1/M. Hence
% Kc=wl/wh=1/M, or wl=wh/M.
numc=[1 wh];
% Generate numerator of lag
% compensator, Gc(s).
denc=[1 wl];
% Generate denominator of lag
% compensator, Gc(s).
Kc=wl/wh;
% Generate K for Gc(s).
'Lag compensator'
% Display label.
Kc
% Display lag compensator K.
'Gc(s)'
% Display label.
Gc=tf(Kc*numc,denc)
% Create and display Gc(s).
' Gc(s)G(s)'
% Display label.
GcG=Gc*G
% Create and display Gc(s)G(s).
s=tf([1 0],1);
% Create transfer function,'s'.
sGcG=s*GcG;
% Create sGc(s)G(s).
sGcG=minreal(sGcG);
% Cancel common terms.
802
Appendix B: MATLAB Tutorial

Kv=dcgain(sGcG)
% Evaluate Kv.
T=feedback(GcG,1);
% Create T(s).
step(T)
% Generate a closed-loop, lag-
% compensated step response.
title ('Closed-Loop Step Response for Lag-Compensated System')
% Add title to step response.
pause
ch11p3 (Example 11.3)
Let us use MATLAB to design a lead compensator. The program
solves Example 11.3 in the text and follows the same design technique demonstrated in that
example.You will enterdesiredpercent overshoot,peaktime,andKv .MATLABthendesigns
the lead compensator using Bode plots, calculates Kv , and plots a closed-loop step response.
'(ch11p3) Example 11.3'
% Display label.
clf
% Clear graph.
pos=input ('Type %OS ');
% Input desired percent overshoot.
Tp=input(' Type peak time ');
% Input desired peak time.
Kv=input(' Type value of Kv ');
% Input Kv.
numg=[100];
% Define numerator of G(s).
deng=poly ([0 -36 -100]);
% Define denominator of G(s).
G=tf(numg,deng);
% Create G(s).
s=tf([1 0],1);
% Create transfer function,'s'.
sG=s*G;
% Create sG(s).
sG=minreal(sG);
% Cancel common factors.
K=dcgain(Kv/sG);
% Solve for K.
'G(s)'
% Display label.
G=zpk(K*G)
% Put K into G (s), convert to
% factored form, and display.
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2));
% Calculate required damping
% ratio.
Pm=atan(2*z/(sqrt(-2*z^2+sqrt(1+4*z^4))))*(180/pi);
% Calculate required phase margin.
wn=pi/(Tp*sqrt(1-z^2));
% Calculate required natural
% frequency.
wBW=wn*sqrt((1-2*z^2)+sqrt(4*z^4-4*z^2+2));
% Determine required bandwidth.
w=0.01:0.5:1000;
% Set range of frequency from 0.01
% to 1000 in steps of 0.5
[M,P]=bode(G,w);
% Get Bode data.
[Gm,Pm,Wcg,Wcp]=margin(G);
% Find current phase margin.
Pmreq=atan(2*z/(sqrt(-2*z^2+sqrt(1+4*z^4))))*(180/pi);
% Calculate required phase margin.
Pmreqc=Pmreq+10;
% Add a correction factor of 10
% degrees.
Pc=Pmreqc-Pm;
% Calculate phase contribution
% required from lead compensator.
% Design lead compensator
beta=(1-sin(Pc*pi/180))/(1+sin(Pc*pi/180));
% Find compensator beta.
magpc=1/sqrt(beta);
% Find compensator peak magnitude.
for k=1:1:length(M);
% Find frequency at which
% uncompensated system has a
% magnitude of 1/magpc.
% This frequency will be the new
% phase margin frequency.
if M(k)-(1/magpc) <=0;
% Look for peak magnitude.
B.2 MATLAB Examples
803

wmax=w(k);
% This is the frequency at the
% peak magnitude.
break
% Stop the loop,
end
% End if.
end
% End for.
% Calculate lead compensator zero, pole, and gain.
zc=wmax*sqrt(beta);
% Calculate the lead compensators'
% low break frequency.
pc=zc/beta;
% Calculate the lead compensators'
% high break frequency.
Kc=1/beta;
% Calculate the lead compensators'
% gain.
'Gc(s)'
% Display label.
Gc=tf(Kc*[1 zc],[1 pc]);
% Create Gc(s).
Gc=zpk(Gc)
% Convert Gc (s) to factored form
% and display.
'Ge(s)=G(s)Gc(s)'
% Display label.
Ge=G*Gc
% Form Ge(s)=Gc(s)G(s).
sGe=s*Ge;
% Create sGe(s).
sGe=minreal(sGe);
% Cancel common factors.
Kv=dcgain(sGe)
% Calculate Kv.
T=feedback(Ge,1);
% Find T(s).
step(T)
% Generate closed-loop, lead-
% compensated step response.
title('Lead-Compensated Step Response')
% Add title to lead-compensated
% step response.
pause
ch11p4 (Example 11.4)
Let us use MATLAB to design a lag-lead compensator. The
program solves Example 11.4 in the text and follows the same design technique demon-
strated in that example. You will enter desired percent overshoot, peak time, and Kv.
MATLAB then designs the lag-lead compensator using Bode plots, calculates Kv , and plots
a closed-loop step response.
'(ch11p4) Example 11.4'
% Display label.
clf
% Clear graph.
pos=input('Type %OS ');
% Input desired percent overshoot.
Tp=input('Type peak time ');
% Input desired peak time.
Kv=input('Type value of Kv ');
% Input desired Kv.
numg=[1];
% Define numerator of G(s).
deng=poly([0 -1 -4]);
% Define denominator of G(s).
G=tf(numg,deng);
% Create G(s) without K.
s=tf([1 0],1);
% Create transfer function,'s'.
sG=s*G;
% Create sG(s).
sG=minreal(sG);
% Cancel common factors.
K=dcgain(Kv/sG);
% Solve for K.
'G(s)'
% Display label.
G=tf(K*numg,deng);
% Put K into G(s).
G=zpk(G)
% Convert G(s) to factored form and
% display.
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2));
% Calculate required damping ratio.
Pmreq=atan(2*z/(sqrt(-2*z^2+sqrt(1+4*z^4))))*(180/pi);
% Calculate required phase margin.
wn=pi/(Tp*sqrt(1-z^2));
% Calculate required natural
% frequency.
804
Appendix B: MATLAB Tutorial

wBW=wn*sqrt((1-2*z^2)+sqrt(4*z^4-4*z^2+2));
% Determine required bandwidth.
wpm=0.8*wBW;
% Choose new phase-margin
% frequency.
[M,P]=bode(G,wpm);
% Get Bode data.
Pmreqc=Pmreq-(180+P)+5;
% Find phase contribution required
% from lead compensator
% with additional 5 degrees.
beta=(1-sin(Pmreqc*pi/180))/(1+sin(Pmreqc*pi/180));
% Find beta.
% Design lag compensator zero, pole,
% and gain.
zclag=wpm/10;
% Calculate zero of lag compensator.
pclag=zclag*beta;
% Calculate pole of lag compensator.
Kclag=beta;
% Calculate gain of lag compensator.
'Lag compensator, Glag(s)'
% Display label.
Glag=tf(Kclag*[1 zclag],[1 pclag]); % Create lag compensator.
Glag=zpk(Glag)
% Convert Glag(s) to factored form
% and display.
% Design lead compensator zero,
% pole, and gain.
zclead=wpm*sqrt(beta);
% Calculate zero of lead
% compensator.
pclead=zclead/beta;
% Calculate pole of lead
% compensator.
Kclead=1/beta;
% Calculate gain of lead
% compensator.
'Lead compensator'
% Display label.
Glead=tf(Kclead*[1 zclead],[1 pclead]);
% Create lead compensator.
Glead=zpk(Glead)
% Convert Glead(s) to factored form
% and display.
'Lag-Lead Compensated Ge(s)'
% Display label.
Ge=G*Glag*Glead
% Create compensated system,
% Ge(s)=G(s) Glag(s) Glead(s).
sGe=s*Ge;
% Create sGe(s).
sGe=minreal(sGe);
% Cancel common factors.
Kv=dcgain(sGe)
% Calculate Kv.
T=feedback(Ge,1);
% Find T(s).
step(T)
% Generate closed-loop, lag-lead-
% compensated step response.
title('Lag-Lead-Compensated Step Response')
% Add title to lag-lead-
% compensated
% step response.
pause
Chapter 12: Design via State Space
ch12p1 (Example 12.1)
We can use MATLAB to design controller gains using pole
placement. You will enter the desired percent overshoot and settling time. We introduce
the following commands: [num,den]=ord2(wn,z), which produces a second-order
system, given the natural frequency(wn)and the damping ratio(z). Then we use the
denominator(den)to specify the dominant poles; and K=acker (A,B,-poles),
which calculates controller gains from the system matrix(A), the input matrix(B), the
desired poles(poles). Let us look at Example 12.1 in the text.
B.2 MATLAB Examples
805

'(ch12p1) Example 12.1'
% Display label.
clf
% Clear graph.
numg=20*[1 5];
% Define numerator of G(s).
deng=poly([0 -1 -4]);
% Define denominator of G(s).
'Uncompensated G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
pos=input('Type desired %OS ');
% Input desired percent overshoot.
Ts=input('Type desired settling time ');
% Input desired settling time.
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2));
% Calculate required damping ratio.
wn=4/(z*Ts);
% Calculate required natural
% frequency.
[num,den]=ord2(wn,z);
% Produce a second-order system
% that meets the transient response
% requirements.
r=roots(den);
% Use denominator to specify
% dominant poles.
poles=[r(1) r(2) -5.1];
% Specify pole placement for all
% poles.
characteristiceqdesired=poly(poles)
% Form desired characteristic
% polynomial for display.
[Ac Bc Cc Dc]=tf2ss(numg,deng);
% Find controller canonical form
% of state-space representation
% of G(s).
P=[0 0 1;0 1 0;1 0 0];
% Transformation matrix for
% controller canonical to phase-
% variable form.
Ap=inv(P)*Ac*P;
% Transform Ac to phase-variable
% form.
Bp=inv(P)*Bc;
% Transform Bc to phase-variable
% form.
Cp=Cc*P;
% Transform Cc to phase-variable
% form.
Dp=Dc;
% Transform Dc to phase-variable
% form.
Kp=acker(Ap,Bp,poles)
% Calculate controller gains in
% phase-variable form.
Apnew=Ap-Bp*Kp;
% Form compensated A matrix.
Bpnew=Bp;
% Form compensated B matrix.
Cpnew=Cp;
% Form compensated C matrix.
Dpnew=Dp;
% Form compensated D matrix.
[numt,dent]=ss2tf(Apnew,Bpnew,Cpnew,Dpnew);
% Form T(s) numerator and
% denominator.
'T(s)'
% Display label.
T=tf(numt,dent)
% Create and display T(s).
poles=roots(dent)
% Display poles of T(s).
Tss=ss(Apnew,Bpnew,Cpnew,Dpnew)
% Create and display Tss, an LTI
% state-space object.
step(Tss)
% Produce compensated step
% response.
title('Compensated Step Response')
% Add title to compensated step
% response.
pause
806
Appendix B: MATLAB Tutorial

ch12p2 (Example 12.2)
We can test controllability by using the MATLAB command
Cm=ctrb(A,B)to ﬁnd the controllability matrix given the system matrix(A)and the
input matrix(B). This command is followed by rank(Cm)to test the rank of the
controllability matrix(Cm). Let us apply the commands to Example 12.2.
'(ch12p2) Example 12.2'
% Display label.
A=[-1 1 0;0 -1 0;0 0 -2]
% Define compensated A matrix.
B=[0;1;1]
% Define compensated B matrix.
Cm=ctrb(A,B)
% Calculate controllability
% matrix.
Rank=rank(Cm)
% Find rank of controllability
% matrix.
pause
ch12p3 (Example 12.4)
If we design controller gains using MATLAB, we do not
have to convert to phase-variable form. MATLAB will give us the controller gains for
any state-space representation we input. Let us look at Example 12.4 in the text.
'(ch12p3) Example 12.4'
% Display label.
clf
% Clear graph.
A=[-5 1 0;0 -2 1;0 0 -1];
% Define system matrix A.
B=[0;0;1];
% Define input matrix B.
C=[-1 1 0];
% Define output matrix C.
D=0;
% Define matrix D.
pos=input('Type desired %OS ');
% Input desired percent overshoot.
Ts=input('Type desired settling time ')
% Input desired settling time.
z=(-log(pos/100))/(sqrt(pi^2+log(pos/100)^2));
% Calculate required damping ratio.
wn=4/(z*Ts);
% Calculate required natural
% frequency.
[num,den]=ord2(wn,z);
% Produce a second-order system
% that meets the transient
% requirements.
r=roots(den);
% Use denominator to specify
% dominant poles.
poles=[r(1) r(2) -4];
% Specify pole placement for all
% poles.
K=acker(A,B,poles)
% Calculate controller gains.
Anew=A-B*K;
% Form compensated A matrix.
Bnew=B;
% Form compensated B matrix.
Cnew=C;
% Form compensated C matrix.
Dnew=D;
% Form compensated D matrix.
Tss=ss(Anew,Bnew,Cnew,Dnew);
% Form LTI state-space object.
'T(s)'
% Display label.
T=tf(Tss);
% Create T(s).
T=minreal(T)
% Cancel common terms and display
% T(s).
poles=pole(T)
% Display poles of T(s).
step(Tss)
% Produce compensated step
% response.
title('Compensated Step Response')
% Add title to compensated step
% response.
pause
B.2 MATLAB Examples
807

ch12p4 (Example 12.5)
We can design observer gains by using the command
l=acker(A',C',poles)'. Notice we use the transpose of the system matrix(A)
and output matrix(C)along with the desired poles(poles). Let us look at Example 12.5
in the text.
'(ch12p4) Example 12.5'
% Display label.
numg=[1 4];
% Define numerator of G(s).
deng=poly([-1 -2 -5]);
% Define denominator of G(s).
' G(s)'
% Display label.
G=tf(numg,deng)
% Create and display G(s).
[Ac,Bc,Cc,Dc]=tf2ss(numg,deng);
% Transform G(s) to controller
% canonical form in state space.
Ao=Ac';
% Transform Ac to observer
% canonical form.
Bo=Cc';
% Transform Bc to observer
% canonical form.
Co=Bc';
% Transform Cc to observer
% canonical form.
Do=Dc;
% Transform Dc to observer
% canonical form.
r=roots([1 2 5])
% Find the controller-compensated
% system poles.
poles=10*[r' 10*real(r(1))]
% Make observer poles 10x bigger.
lp=acker(Ao',Co',poles)'
% Find the observer gains in
% observer canonical form.
pause
ch12p5 (Example 12.6)
We can test observability using the MATLAB command
Om=obsv(A,C)to ﬁnd the observability matrix given the system matrix(A)and the
output matrix(C). This command is followed by rank(Om)to test the rank of the
observability matrix (Om). Let us apply the commands to Example 12.6.
'(ch12p5) Example 12.6'
% Display label.
A=[0 1 0;0 0 1;-4 -3 -2]
% Define compensated A matrix.
C=[0 5 1]
% Define compensated C matrix.
Om=obsv(A,C)
% Form observability matrix.
Rank=rank(Om)
% Find rank of observability
% matrix.
pause
ch12p6 (Example 12.8)
We can design observer gains using the command l=acker
(A',C',poles)' without transforming to observer canonical form. Let us look at
Example 12.8 in the text.
'(ch12p6) Example 12.8'
% Display label.
A=[-5 1 0;0 -2 1;0 0 -1];
% Define system matrix A.
B=[0;0;1];
% Define input matrix B.
C=[1 0 0];
% Define output matrix C.
D=0;
% Define matrix D.
poles=roots([1 120 2500 50000])
% Specify pole placement for all
% poles.
l=acker(A',C',poles)'
% Calculate observer gains.
pause
808
Appendix B: MATLAB Tutorial

Chapter 13: Digital Control Systems
ch13p1 (Example 13.4)
We can convert G1(s) in cascade with a zero-order hold
(z.o.h.) to G(z) using MATLAB’s G=c2d (G1,T,' zoh')command, where G1 is an LTI
continuous-system object and G is an LTI sampled-system object. T is the sampling interval and
'zoh'is a method of transformation that assumes G1(s) in cascade with a z.o.h. We simply put
G1(s) into the command (the z.o.h. is automatically taken care of) and the command returns
G(z). Let us apply the concept to Example 13.4. You will enter T through the keyboard.
'(ch13p1) Example 13.4'
% Display label.
T=input('Type T ');
% Input sampling interval.
numg1s=[1 2];
% Define numerator of G1(s).
deng1s=[1 1];
% Define denominator of G1(s).
'G1(s)'
% Display label.
G1=tf(numg1s,deng1s)
% Create G1(s) and display.
'G(z)'
% Display label.
G=c2d(G1,T,'zoh')
% Convert G1(s) in cascade with
% z.o.h. to G(z) and display.
pause
ch13p2
We also can use MATLAB to convert G(s) to G(z) when G(s) is not in cascade
with a z.o.h. The command H=c2d(F,T,'zoh')transforms F(s) in cascade with a z.o.h. to
H(z), where Hz  z  1=z*zfFs=sg. If we let Fs  sGs, the command solves for
H(z), where Hz  z  1=z*zfGsg. Hence, zfGsg  z=z  1*Hz. In summary,
input Fs  sGs, and multiply the result of H=c2d(F,T,'zoh')by z=z  1 . This
process is equivalent to ﬁnding the z-transform. We convert Gs  s  3=s2  6s  13
into G(z). You will enter T, the sampling interval, through the keyboard. T is used to form
H(z). We use an unspeciﬁed sampling interval, T=[ ], to form z=z  1.
'(ch13p2)'
% Display label.
T=input('Type T ');
% Input sampling interval.
numgs=[1 3];
% Define numerator of G(s).
dengs=[1 6 13];
% Define denominator of G(s).
'G(s)'
% Display label.
Gs=tf(numgs,dengs)
% Create and display G(s).
Fs=Gs*tf([1 0],1);
% Create F(s)=sG(s).
Fs=minreal(Fs);
% Cancel common poles and zeros.
Hz=c2d(Fs,T,'zoh');
% Convert F(s) to H(z) assuming
% z.o.h.
Gz=Hz*tf([1 0],[1 -1],[ ]);
% Form G(z)=H(z)*z/(z-1).
'G(z)'
% Display label.
Gz=minreal(Gz)
% Cancel common poles and zeros.
pause
ch13p3 Creating Digital Transfer Functions Directly
Vector Method, Polynomial Form
A digital transfer function can be expressed as a numerator polynomial divided by a
denominator polynomial, that is, Fz  Nz=Dz. The numerator, N(z), is represented
by a vector, numf, that contains the coefﬁcients of N(z). Similarly, the denominator, D(z),
is represented by a vector, denf, that contains the coefﬁcients of D(z). We form F(z)
with the command, F=tf(numf,denf,T), where T is the sampling interval. F is called
a linear time-invariant (LTI) object. This object, or transfer function, can be used as an
entity in other operations, such as addition or multiplication. We demonstrate with
B.2 MATLAB Examples
809

Fz  150z2  2z  7=z2  0:3z  0:02. We use an unspeciﬁed sampling interval,
T=[]. Notice after executing the tf command, MATLAB prints the transfer function.
Vector Method, Factored Form
We also can create digital LTI transfer functions if the numerator and denominator are
expressed in factored form. We do this by using vectors containing the roots of the
numerator and denominator. Thus, Gs  K *Nz=Dz can be expressed as an LTI object
using the command, G=zpk(numg,deng,K,T), where numg is a vector containing the
roots of N(z), deng is a vector containing the roots of D(z), K is the gain, and T is the
sampling interval. The expression zpk stands for zeros (roots of the numerator), poles
(roots of the denominator), and gain, K. We demonstrate with Gz  20z  2z  4=
z  0:5z  0:7z  0:8 and an unspeciﬁed sampling interval. Notice after executing the
zpk command, MATLAB prints the transfer function.
Rational Expression in z Method, Polynomial Form (Requires Control System
Toolbox 9.7)
This method allows you to type the transfer function as you normally would write it. The
statement z=tf('z') must precede the transfer function if you wish to create a digital LTI
transfer function in polynomial form equivalent to using G=tf(numg, deng,T).
Rational Expression in z Method, Factored Form (Requires Control System
Toolbox 9.7)
This method allows you to type the transfer function as you normally would write it. The
statement z=zpk('z')must precede the transfer function if you wish to create a digital LTI
transfer function in factored form equivalent to using G=zpk(numg,deng,K,T).
For both rational expression methods the transfer function can be typed in any form
regardless of whether z=tf('z') or z=zpk('z') is used. The difference is in the
created digital LTI transfer function. We use the same examples above to demonstrate the
rational expression in z methods.
'(ch13p3)'
% Display label.
'Vector Method, Polynomial Form'
% Display label.
numf=150*[1 2 7]
% Store 150(z^2+2z+7) in numf and
% display.
denf=[1 -0.3 0.02]
% Store(z^2-0.3z+0.02) in denf and
% display.
'F(z)'
% Display label.
F=tf(numf,denf,[ ])
% Form F(z) and display.
clear
% Clear previous variables from
% workspace.
'Vector Method, Factored Form'
% Display label.
numg=[-2 -4]
% Store (s+2)(s+4) in numg and
% display.
deng=[0.5 0.7 0.8]
% Store (s-0.5)(s-0.7)(s-0.8) in
% deng and display.
K=20
% Define K.
'G(z)'
% Display label.
G=zpk(numg,deng,K,[ ])
% Form G(z) and display,
clear
% Clear previous variables from
% workspace.
'Rational Expression Method, Polynomial Form'
% Display label.
z=tf('z')
% Define z as an LTI object in
% polynomial form.
810
Appendix B: MATLAB Tutorial

F=150*(z^2+2*z+7)/(z^2-0.3*z+0.02)
% Form F(z) as an LTI transfer
% function in polynomial form.
G=20*(z+2)*(z+4)/[(z-0.5)*(z-0.7)*(z-0.8)]
% Form G(z) as an LTI transfer
% function in polynomial form.
clear
% Clear previous variables from
% workspace.
'Rational Expression Method, Factored Form'
% Display label.
z=zpk('z')
% Define z as an LTI object in
% factored form.
F=150*(z^2+2*z+7)/(z^2-0.3*z+0.02)
% Form F(z) as an LTI transfer
% function in factored form.
G=20*(z+2)*(z+4)/[(z-0.5)*(z-0.7)*(z-0.8)]
% Form G(z) as an LTI transfer
% function in factored form.
pause
ch13p4
We also can use MATLAB to convert G(z) to G(s) when G(s) is not in
cascade with a z.o.h. First, we create a sampled LTI transfer function, as discussed in
ch13p3. The command F=d2c(H,'zoh') transforms H(z) to F(s) in cascade with a z.
o.h., where Hz  z  1=zzfFs=sg. If we consider Fs  sGs, the command
solves for sG(s) given H(z). Finally, sGs=s  Gs yields the ﬁnal result. In summary,
form H(z), where Hz  z  1=zGz. Use F=d2c(H,'zoh') to ﬁnd Fs  sGs.
Divide the result by s and obtain G(s). We convert Gz  z=z  0:3 into G(s). You
will enter T, the sampling interval, through the keyboard.
'(ch13p4)'
% Display label.
T=input('Type T ');
% Input sampling interval.
numgz=[1 0];
% Define numerator of G(z).
dengz=[1 -.3];
% Define denominator of G(z).
'G(z)'
% Display label.
Gz=tf(numgz,dengz,T)
% Create and display G(z).
Hz=Gz*tf([1 -1],[1 0],T);
% Create H(z)=((z-1)/z)*G(z).
Hz=minreal(Hz);
% Cancel common poles and zeros.
Fs=d2c(Hz,'zoh');
% Convert from H(z)to F(s)=sG(s).
Gs=Fs*tf(1,[1 0]);
% Create G(s)=F(s)(1/s).
'G(s)'
% Display label.
Gs=minreal(Gs)
% Cancel common poles and zeros.
pause
ch13p5 (Example 13.6)
We can use MATLAB to ﬁnd the gain for stability. Let us look
at Example 13.6 in the text.
'(ch13p5) Example 13.6'
% Display label.
numgas=27;
% Define numerator of Ga(s).
dengas=[1 27 0];
% Define denominator of Ga(s).
'Ga(s)'
% Display label.
Ga=tf(numgas,dengas)
% Create and display Ga(s).
'G(z)'
% Display label.
Gz=c2d(Ga,0.1,'zoh')
% Find G(z) assuming Ga(s) in
% cascade with z.o.h. and display.
B.2 MATLAB Examples
811

for K=1:0.1:50;
% Set range of K to look for
% stability.
Tz=feedback(K*Gz,1);
% Find T(z).
r=pole(Tz);
% Get poles for this value of K.
rm=max(abs(r));
% Find pole with maximum absolute
% value for this value of K.
if rm>=1,
% See if pole is outside unit
% circle.
break;
% Stop if pole is found outside
% unit circle.
end;
% End if.
end;
% End for.
K
% Display K value.
r
% Display closed-loop poles for
% this value of K.
rm
% Display absolute value of pole.
pause
ch13p6 (Example 13.9)
WecanuseMATLAB’scommanddcgain(Gz)toﬁndsteady-
state errors. The command evaluates the dcgain of Gz, a digital LTI transfer functionobject, by
evaluating Gz at z  1. We use the dc gain to evaluate, Kp, Kv, and Ka. Let us look at Example
13.9 in the text. You will input T, the sampling interval, through the keyboard to test stability.
'(ch13p6) Example 13.9'
% Display label.
T=input('Type T ');
% Input sampling interval.
numg1s=[10];
% Define numerator of G1(s).
deng1s=poly([0 -1]);
% Define denominator of G1(s).
'G1(s)'
% Display label.
G1s=tf(numg1s,deng1s)
% Create and display G1(s).
'G(z)'
% Display label.
Gz=c2d(G1s,T,'zoh')
% Convert G1(s) and z.o.h. to G(z)
% and display.
'T(z)'
% Display label.
Tz=feedback(Gz,1)
% Create and display T(z).
'Closed-Loop z-Plane Poles'
% Display label.
r=pole(Tz)
% Check stability.
M=abs(r)
% Display magnitude of roots.
pause
Kp=dcgain(Gz)
% Calculate Kp.
GzKv=Gz*(1/T)*tf([1 -1],[1 0],T);
% Multiply G(z) by(1/T)*(z-1).
% Also, divide G(z) by z , which
% makes transfer function proper
% and yields same Kv.
GzKv=minreal(GzKv,0.00001);
% Cancel common poles and zeros.
Kv=dcgain(GzKv)
% Calculate Kv.
GzKa=Gz*(1/T^2)*tf([1 -2 1],[1 0 0],T);% Multiply G(z) by (1/T^2)(z-1)^2.
% Also, divide G(z)by z^2 , which
% makes the transfer function
% proper and yields the same Ka.
GzKa=minreal(GzKa,0.00001);
% Cancel common poles and zeros.
Ka=dcgain(GzKa)
% Calculate Ka.
pause
ch13p7 (Example 13.10)
We now use the root locus to ﬁnd the gain for stability. First, we
create a digitalLTI transfer-function objectforGz  Nz=Dz; with an unspeciﬁed sampling
interval. The LTI object is created using tf(numgz,dengz,[]), where numgz represents
812
Appendix B: MATLAB Tutorial

N(z), dengz represents D(z), and[]indicates an unspeciﬁed sampling interval. MATLAB
produces a z-plane root locus along with the unit circle superimposed using the command,
zgrid ([],[]). We then interactively select the intersection of the root locus and the unit
circle. MATLAB responds with the value of gain and the closed-loop poles. Let us look at
Example 13.10.
'(ch13p7) Example 13.10'
% Display label.
clf
% Clear graph.
numgz=[1 1];
% Define numerator of G(z).
dengz=poly([1 0.5]);
% Define denominator of G(z).
'G(z)'
% Display label.
Gz=tf(numgz,dengz,[])
% Create and display G(z).
rlocus(Gz)
% Plot root locus.
zgrid([],[])
% Add unit circle to root locus.
title (['z-Plane Root Locus'])
% Add title to root locus.
[K,p]=rlocfind(Gz)
% Allows input of K by selecting
% point on graphic.
pause
ch13p8 (Example 13.11)
We now use the root locus to ﬁnd the gain to meet a transient
response requirement. After MATLAB produces a z-plane root locus, along with damping ratio
curves superimposed using the command zgrid, we interactively select the desired operating
point at a damping ratio of 0.7, thus determining the gain. MATLAB responds with a gain
value as well as the step response of the closed-loop sampled system using step(Tz), where
Tz is a digital LTI transfer-function object. Let us look at Example 13.11.
'(ch13p8) Example 13.11'
% Display label.
clf
% Clear graph.
numgz=[1 1];
% Define numerator of G(z).
dengz=poly([1 0.5]);
% Define denominator of G(z).
' G(z)'
% Display label.
Gz=tf(numgz,dengz,[])
% Create and display G(z).
rlocus(Gz)
% Plot root locus.
axis([0,1,-1,1])
% Create close-up view.
zgrid
% Add damping ratio curves to root
% locus.
title(['z-Plane Root Locus'])
% Add title to root locus.
[K,p]=rlocfind(Gz)
% Allows input of K by selecting
% point on graphic.
' T(z)'
% Display label.
Tz=feedback(K*Gz,1)
% Find T(z).
step(Tz)
% Find step response of gain-
% compensated system.
title (['Gain Compensated Step Response'])
% Add title to step response of
% gain-compensated system.
pause
ch13p9 (Example 13.12)
Let us now use MATLAB to design a digital lead compensa-
tor. The s-plane design was performed in Example 9.6. Here we convert the design to the z-
plane and run a digital simulation of the step response. Conversion of the s-plane lead
compensator, Gc(s)=numgcs/dengcs, to the z-plane compensator, Gc(z)=numgcz/
dengcz, is accomplished using the Gcz=c2d(numgcs,dengcs,T,' tustin') com-
mand to perform a Tustin transformation, where T=sampling interval, which for this
example is 1/300. This exercise solves Example 13.12 using MATLAB.
B.2 MATLAB Examples
813

'(ch13p9) Example 13.12'
% Display label.
clf
% Clear graph.
T=0.01
% Define sampling interval.
numgcs=1977*[1 6];
% Define numerator of Gc(s).
dengcs=[1 29.1];
% Define denominator of Gc(s).
'Gc(s) in polynomial form'
% Print label.
Gcs=tf(numgcs,dengcs)
% Create Gc(s) in polynomial form
% and display.
'Gc(s) in polynomial form'
% Display label.
Gcszpk=zpk(Gcs)
% Create Gc(s) in factored form
% and display.
'Gc(z) in polynomial form via Tustin Transformation'
% Display label.
Gcz=c2d(Gcs,T,'tustin')
% Form Gc(z) via Tustin
% transformation.
'Gc(z) in factored form via Tustin Transformation'
% Display label.
Gczzpk=zpk(Gcz)
% Show Gc(z) in factored form.
numgps=1;
% Define numerator of Gp(s).
dengps=poly([0 -6 -10]);
% Define denominator of Gp(s).
'Gp(s) in polynomial form'
% Display label.
Gps=tf(numgps,dengps)
% Create Gp(s) in polynomial form
% and display.
'Gp(s) in factored form'
% Display label.
Gpszpk=zpk(Gps)
% Create Gp(s) in factored form
% and display.
'Gp(z) in polynomial form'
% Display label.
Gpz=c2d(Gps,T,'zoh')
% Form Gp(z) via zoh transformation.
'Gp(z) in factored form'
% Display label.
Gpzzpk=zpk(Gpz)
% Form Gp(z) in factored form.
Gez=Gcz*Gpz;
% Form Ge(z)= Gc(z)Gp(z).
'Ge(z)=Gc(z)Gp(z) in factored form' % Display label.
Gezzpk=zpk(Gez)
% Form Ge(z) in factored form
% and display.
'z-1'
% Display label.
zm1=tf([1 -1],1,T)
% Form z-1.
zm1Gez=minreal(zm1*Gez,0.00001);
% Cancel common factors.
'(z-1)Ge(z) for finding steady-state error'
% Display label.
zm1Gezzpk=zpk(zm1Gez)
%Form & display(z-1)Ge(z) in
% factored form.
Kv=(1/T)*dcgain(zm1Gez)
% Find Kv.
'T(z)=Ge(z)/(1+Ge(z))'
% Display label.
Tz=feedback(Gez,1)
% Find closed-loop
% transfer function, T(z)
step(Tz,0:T:2)
% Find step reponse.
title('Closed-Loop Digital Lead Compensated Step Response')
% Add title to step response.
B.3 Command Summary
abs(x)
Obtain absolute value of x.
acker(A,B,poles)
Find gains for pole placement.
angle(x)
Compute the angle of x in radians.
atan(x)
Compute arctan(x).
axis([xmin,xmax,ymin,ymax])
Deﬁne range on axes of a plot.
814
Appendix B: MATLAB Tutorial

bode(G,w)
Make a Bode plot of transfer function G(s) over a
range of frequencies, ω.
Field ω is optional.
break
Exit loop.
c2d(G,T,'tustin')
Convert G(s) to G(z) using the Tustin
transformation.
T is the sampling interval.
c2d(G,T,'zoh')
Convert G(s) in cascade with a zero-order hold to
G(z). T is the sampling interval.
canon(S,'modal')
Convert an LTI state-space object, S, to parallel
form.
clear
Clear variables from workspace.
clf
Clear current ﬁgure.
conv([a b c d],[e f g h])
Multiply as3  bs2  cs  d by
es3  f s2  gs  h.
ctrb(A,B)
Find controllability matrix.
d2c(G,'zoh')
Convert G(z) to G(s) in cascade with a zero-order
hold.
dcgain(G)
Find dc gain for G(s) (that is, s  0), or G(z) (that
is, z  1).
eig(A)
Find eigenvalues of matrix A.
end
End the loop.
exp(a)
Obtain e a.
feedback(G,H,sign)
Find Ts  Gs=1  GsHs. Sign  1 or is
optional for negative feedback systems.
Sign  1 for positive feedback systems.
grid on
Put grid lines on a graph.
hold off
Turn off graph hold; start new graph.
imag(P)
Form a matrix of the imaginary parts of the
components of matrix P.
input('str')
Permit variable values to be entered from the
keyboard with prompt str.
interp1 (x,y,x1)
Perform table lookup by ﬁnding the value of y at
the value of x  x1.
inv(P)
Find the inverse of matrix P.
length(P)
Obtain dimension of vector P.
log(x)
Compute natural log of x.
log10(x)
Compute log to the base 10 of x.
margin(G)
Find gain and phase margins, and gain and phase
margin frequencies of transfer function, G(s).
Return [Gain margin, Phase margin, 180°
frequency, 0 dB frequency].
max(P)
Find the maximum component of P.
minreal(G,tol)
Cancel common factors from transfer function G
(s) within tolerance, tol.
If'tol'ﬁeld is blank, a default value is used.
ngrid
Superimpose grid over a Nichols plot.
nichols(G,w)
Make a Nichols plot of transfer function G(s) over
a range of frequencies, ω.
Field ω is optional.
B.3 Command Summary
815

nyquist(G,w)
Make a Nyquist diagram of transfer function G(s)
over a range of frequencies, ω.
Field ω is optional.
obsv(A,C)
Find observability matrix.
ord2(wn,z)
Create a second-order system,
Gs  1=s2  2ζωns  ω2
n.
pade(T,n)
Obtain nth order Padé approximation for delay, T.
pause
Pause program until any key is pressed.
plot(t1,y1,t2,y2,t3,y3)
Plot y1 versus t1, y2 versus t2, and y3 versus t3 on
the same graph.
pole(G)
Find poles of LTI transfer function object, G(s).
poly([a b c])
Form polynomial s  as  bs  c.
polyval(P,a)
Find polynomial P(s) evaluated at a, that is, P(a).
rank(A)
Find rank of matrix A.
real(P)
Form a matrix of the real parts of the components
of matrix P.
residue(numf,denf)
Find residues of F(s) = numf/denf.
rlocﬁnd(GH)
Allow interactive selection of points on a root
locus plot for loop gain, G(s)H(s).
Return value for K and all closed-loop poles at
that K.
rlocus(GH,K)
Plot root locus for loop gain, G(s)H(s), over a
range of gain, K. The K ﬁeld is optional.
roots(P)
Find roots of polynomial, P.
semilogx(w,P1)
Make a semilog plot of P1 versus log10ω.
series(G1,G2)
Find G1sG2s.
sgrid(z,wn)
Overlay zζ and wn(ωn) grid lines on a root locus.
sin(x)
Find sin(x).
sqrt(a)
Compute
ﬃﬃﬃ
a
p
.
ss2tf(A,B,C,D,1)
Convert a state-space representation to a transfer
function. Return [num,den].
ss(A,B,C,D)
Create an LTI state-space object, S.
ss(G)
Convert an LTI transfer function object, G(s), to
an LTI state-space object.
ssdata(S)
Extract A, B, C, and D matrices from LTI state-
space object, S.
step(G1,G2,.. Gn,t)
Plot step responses of G1s through Gns on one
graph over a range of time, t.
Field t is optional as are ﬁelds G2 through Gn.
subplot(xyz)
Divide plotting area into an x by y grid with z as
the window number for the current plot.
tan(x)
Find tangent of x radians.
text(a,b,'str')
Put str on graph at graph coordinates,
x  a, y  b.
tf2ss(numg,deng)
Convert Gs  numg/deng to state space in
controller canonical form.
Return [A,B,C,D].
vpa(a,D)
Calculate a with D digits and convert to a
symbolic with D digits.
816
Appendix B: MATLAB Tutorial

tf2zp(numg,deng)
Convert Gs  numg/deng in polynomial form
to factored form.
Return[zeros, poles, gains].
tf(numg,deng,T)
Create an LTI transfer function, Gs  numg/
deng, in polynomial form.
T is the sampling interval and should be used only if
G is a sampled transfer function.
tf(G)
Convert an LTI transfer function, G(s), to
polynomial form.
tfdata(G,'v')
Extract numerator and denominator of an LTI
transfer function, G(s), and convert values to a
vector. Return [num, den].
title('str')
Put title str on graph.
xlabel('str')
Put label str on x axis of graph.
ylabel('str')
Put label str on y axis of graph.
zgrid
Superimpose z(ζ) and wn ωn grid curves on a
z-plane root locus.
zgrid([ ],[ ])
Superimpose the unit circle on a z-plane root
locus.
zp2tf ([a b]',[c d]', K)
Convert Fs  Ks  as  b=s  cs  d to
polynomial form.
Return[num,den].
zpk(numg,deng,K,T)
Create an LTI transfer function, Gs  numg/
deng, in factored form.
T is the sampling interval and should be used only
if G is a sampled transfer function.
zpk(G)
Convert an LTI transfer function, G(s), to factored
form.
Bibliography
Johnson, H. et al. Unmanned Free-Swimming Submersible (UFFS) System Description. NRL
Memorandum Report 4393. Naval Research Laboratory, Washington, D.C., 1980.
MathWorks. Control System ToolboxTM Getting Started Guide R2014a. MathWorks, Natick, MA,
2000–2014.
MathWorks. Control System ToolboxTM User’s Guide R2014a. MathWorks, Natick, MA,
2001–2014.
MathWorks. MATLABPrimer R2014a. MathWorks, Natick, MA, 1984–2014.
MathWorks. MATLABGraphics R2014a. MathWorks, Natick, MA, 1984–2014.
MathWorks. MATLABMathematics R2014a. MathWorks, Natick, MA, 1984–2014.
MathWorks. MATLABProgramming Fundamentals R2014a. MathWorks, Natick, MA,
1984–2014.
MathWorks. SimulinkGetting Started Guide R2014a. MathWorks, Natick, MA, 1990–2014.
MathWorks. SimulinkUser’s Guide R2014a. MathWorks, Natick, MA, 1990–2014.
MathWorks MATLAB& SimulinkInstallation Guide R2014a. MathWorks, Natick, MA,
1996–2014.
Bibliography
817


Appendix C: Simulink
Tutorial
C.1 Introduction
Readers who are studying MATLAB may want to explore the functionality and convenience
of Simulink. Before proceeding, the reader should have studied Appendix B, the MATLAB
Tutorial, including Section B.1, which is applicable to this appendix.
Simulink Version 8.3 and MATLAB Version 8.3(R2014a) are required in order to use
Simulink. In addition, if you wish to pursue the design of PID controllers discussed in
Section C.4, you will need the Simulink Control Design Version 4(R2014a) add-on.
The models described in this appendix are available at www.wiley.com/college/nise.
The code will also run on workstations that support MATLAB. Consult the MATLAB
Installation Guide for your platform for minimum system hardware requirements.
Simulink is used to simulate systems. It uses a graphical user interface (GUI) for you
to interact with blocks that represent subsystems. You can position the blocks, resize the
blocks, label the blocks, specify block parameters, and interconnect blocks to form complete
systems from which simulations can be run.
Simulink has block libraries from which subsystems, sources (that is, function
generators), and sinks (that is, scopes) can be copied. Subsystem blocks are available
for representing linear, nonlinear, and discrete systems. LTI objects can be generated if the
Control System Toolbox is installed.
Help is available on the Quick Access Toolbar at the top of the MATLAB R2014a
window. Click the circled question mark and select Simulink. Help is also available for each
block in the block library and is accessed either by right-clicking a block’s icon in the
Simulink Library Browser and selecting Help for or by double-clicking the block’s icon
and then clicking the Help button. Finally, screen tips are available for some toolbar buttons.
Let your mouse’s pointer rest on the button for a few seconds to see the explanation.
C.2 Using Simulink
The following summarize the steps to take to use Simulink. Section C.3 will present four
examples that demonstrate and clarify these steps.
1. Access Simulink The Simulink Library Browser, from where we begin Simulink, is
accessed by typing simulink in the MATLAB Command Window or by clicking on the
Simulink Library button on the toolstrip, shown circled in Figure C.1.
In response, MATLAB displays the Simulink Library Browser shown in
Figure C.2(a). We now create an untitled window, Figure C.2(b), by clicking on the
New model button (shown circled in Figure C.2(a)) on the toolbar of the Simulink
819

FIGURE C.1
MATLAB Window showing how to access Simulink. The Simulink Library Browser button is shown circled
FIGURE C.2
a. Simulink Library Browser window showing the New model button encircled;
(ﬁgure continues)
820
Appendix C: Simulink Tutorial

Library Browser. You will build your system in this window. Existing models may be
opened by clicking on the Open model button on the Simulink Library Browser
toolbar. This button is immediately to the right of the New model button. Existing
models may also be opened from the File section of the Home tab on the Toolstrip or
from the Searchbar below the Toolstrip on the MATLAB window.
2. Select blocks
Figure C.2(a) shows the Simulink Library Browser from which all
blocks can be accessed. The left-hand side of the browser shows major libraries, such as
Simulink, as well as underlying block libraries, such as Continuous. The right-hand side
of Figure C.2(a) also shows the underlying block libraries. To reveal a block library’s
underlying blocks, select the block library on the left-hand side or double-click the block
library on the right-hand side. As an example, the Continuous library blocks under the
Simulink major library are shown exposed in Figure C.3(a). Figures C.3(b) and C.3(c)
show some of the Sources and Sinks library blocks, respectively.
Another approach to revealing the Simulink block library is to type open_system
(‘simulink’) in the MATLAB Command Window. The window shown in Figure C.4 is
the result. Double-clicking any of the libraries in Figure C.4 reveals an individual
window containing that library’s blocks, equivalent to the right-hand side of the
Simulink Library Browser as shown in the examples of Figure C.3.
3. Assemble and label subsystems
Drag required subsystems (blocks) to your model
window from the browser, such as those shown in Figure C.3. Also, you may access the
blocks by double-clicking the libraries shown in Figure C.4. You can position, resize, and
rename the blocks. To position, drag with the mouse; to resize, click on the subsystem and
drag the handles; to rename, click on the existing name, select the existing text, and type the
new name.
4. Interconnect subsystems and label signals Position the pointer on the small arrow on
the side of a subsystem, press the mouse button, and drag the resulting cross-hair pointer
to the small arrow of the next subsystem. A line will be drawn between the two
subsystems. Blocks may also be interconnected by single-clicking the ﬁrst block
followed by single-clicking the second block while holding down the control key.
You can move line segments by positioning the pointer on the line, pressing the mouse
button, and dragging. Branches to line segments can be drawn by positioning the pointer
where you want to create a line segment, holding down the mouse’s right button, and
FIGURE C.2
(Continued ) b. resulting untitled model window
C.2 Using Simulink
821

FIGURE C.3
Simulink block libraries: a. Continuous systems; b. Sources (ﬁgure continues)
822
Appendix C: Simulink Tutorial

dragging the resulting cross hairs. A new line segment will form. Signals can be labeled
by double-clicking the line and typing. Finally, labels can be placed anywhere by double-
clicking and typing into the resulting box.
5. Choose parameters for the subsystems
Double-click a subsystem in your model
window and type in the desired parameters. Some explanations are provided in the Block
FIGURE C.3
(Continued ) c. Sinks
FIGURE C.4
Simulink Block Library window
C.2 Using Simulink
823

Parameters window. Press the Help button in the Block Parameters window for more
details. Explore other options by right-clicking on a block.
6. Choose parameters for the simulation
Select Model Conﬁguration Parameters
under the Simulation menu in your model window to set additional parameters, such as
simulation time. Press the Help button in the Conﬁguration Parameters window for
more details.
7. Start the simulation Make your model window the active window. Double-click the
Scope block (typically, the scope is used to view the simulation results) to display the
Scope window. Select Run under the Simulation menu in your model window or click
on the Run icon on the toolbar of your model window as shown in Figure C.2(b).
Clicking the Stop icon will stop the simulation before completion.
8. Interact with the plot In the Scope window, using the toolbar buttons, you can zoom in
and out, change axes ranges, save axis settings, and print the plot. Right-clicking on the
Scope window brings up other choices.
9. Save your model Saving your model, by choosing Save under the File menu, creates a
ﬁle with an .mdl extension, which is required.
C.3 Examples
This section will present four examples of the use of Simulink to simulate linear, nonlinear,
and digital systems. Examples will show the Simulink block diagrams as well as explain the
settings of parameters for the blocks. Finally, the results of the simulations will be shown.
Example C.1
Simulation of Linear Systems
Simulation of Linear Systems
Our ﬁrst example develops a simulation of three linear systems to compare their step
responses. In particular, we solve Example 4.8 and reproduce the responses shown in
Figure 4.24. Figure C.5 shows a Simulink block diagram formed by following Steps 1
through 5 in Section C.2 as follows:
Access Simulink; select, assemble, and label subsystems
The source is a 1-volt step
input, obtained by dragging the Step block from the Simulink Library Browser under
Sources to your model window.
The ﬁrst system, T1, consists of two blocks, Gain and Transfer Fcn. Gain is
obtained by dragging the Gain block from the Simulink Library Browser under Math
Operations to your model window. Transfer function, T1, is obtained by dragging the
Transfer Fcn block from the Simulink Library Browser under Continuous to your
model window. Systems T2 and T3 are created similarly.
The three output signals, C1, C2, and C3, are multiplexed for display into the single
input of a scope. The Mux (multiplexer) is obtained by dragging the Mux block from the
Simulink Library Browser under Signal Routing to your model window.
The sink is a scope, obtained by dragging the Scope block from the Simulink
Library Browser under Sinks to your model window.
Alternatively, all blocks can be dragged from the Library: simulink window shown in
Figure C.4. The Mux can be found under Signal Routing in the Library: simulink window.
The labels for the blocks can be changed to those shown in Figure C.5 by following
Step 3 in Section C.2.
824
Appendix C: Simulink Tutorial

Interconnect subsystems and label signals
Follow Step 4 to interconnect the
subsystems and label the signals. You must set the mux’s parameters before the wiring
can be completed. See the next paragraph.
Choose parameters for the subsystems
Let us now set the parameters of each block
using Step 5. The Block Parameters window for each block is accessed by double-
clicking the block on your model window. Figure C.6 shows the Block Parameters
windows for the 1-Volt step input, gain, transfer function 1, and mux. Set the parameters
to the required values as shown.
FIGURE C.5
Simulink block
diagram for Example C.1
FIGURE C.6
Block parameters windows for a. 1-Volt step source; (ﬁgure continues)
C.3 Examples
825

FIGURE C.6
(Continued ) b. gain; c. transfer function 1; d. mux
826
Appendix C: Simulink Tutorial

The scope requires further explanation. Double-clicking the Scope block in your model
window accesses the scope’s display, Figure C.7(a).
FIGURE C.7
Windows for the scope: a. Scope; b. ‘Scope’ parameters, General tab; c. ‘Scope’ parameters, History tab;
d. ‘Scope’ parameters, Style tab; (ﬁgure continues)
C.3 Examples
827

Clicking the Parameters icon on the Scope window toolbar, shown in Figure C.7(a),
accesses the ‘Scope’ parameters window as shown in Figure C.7(b). The ‘Scope’
parameters window contains three tabs, General, History, and Style, as shown in
Figure C.7(b), (c), and (d), respectively.
Finally, right-clicking in the plotting area in the Scope window and selecting Axis
properties . . . reveals the ‘Scope’ properties: axis 1 window, Figure C.7(e). We now
can set the display parameters, such as amplitude range.
Choose parameters for the simulation
Follow Step 6 to set simulation parameters.
Figure C.8 shows the resulting Conﬁguration Parameters window. Among other
parameters, the simulation start and stop times can be set.
Start the simulation
Now run the simulation by following Step 7. Figure C.9 shows
the result in the Scope window. Plots are color coded in the order in which they appear at
the mux input as follows: yellow, magenta, cyan, red, green, and dark blue. If the mux
has more inputs, the colors recycle. Colors can be changed in the Style tab of the ‘Scope’
parameters window.
FIGURE C.7
(Continued ) e. ‘Scope’ properties axis 1
FIGURE C.8
Conﬁguration
Parameters window for Solver
tab
828
Appendix C: Simulink Tutorial

Interact with the plot
The toolbar of the Scope window shown in Figure C.9 has
several buttons that can be used to interact with the plot. Let us summarize the function
and operation of each, starting with the left-most button:
Button 1 executes a plot print.
Button 2 has already been explained and is used to set scope parameters.
Button 3 permits zooming into the plot in both the x and y directions. Press the button and drag a rectangle over the
portion of the curve you want to expand.
Button 4 allows zooming in the x direction only. Drag a horizontal line over the plot covering the extent of x you want
to expand.
Button 5 allows zooming in the y direction only. Drag a vertical line over the plot covering the range of y you want to
expand.
Button 6 autoscales axis for use after zooming.
Button 7 saves current axis settings.
Button 8 restores saved axis settings.
Button 9 toggles ﬂoating scope. It must be turned off to use zooming. See documentation
for use of ﬂoating scopes.
Button 10 toggles lock for current axis selection.
Button 11 allows selection of signals to view when using ﬂoating scope.
FIGURE C.9
Scope window
after Example C.1 simulation
stops
C.3 Examples
829

Example C.2
Effect of Ampliﬁer Saturation on Motor's Load Angular
Velocity
Effect of Ampliﬁer Saturation on Motor's Load Angular
Velocity
This example, which generated Figure 4.29 in the text, shows the use of Simulink to
simulate the effect of saturation nonlinearity on an open-loop system. Figure C.10 shows
a Simulink block diagram formed by following Steps 1 through 5 in Section C.2 above.
Saturation nonlinearity is an additional block that we have not used before.
Saturation is obtained by dragging to your model window the Saturation block in the
Simulink Library Browser window under Discontinuities as shown in Figure C.11(a)
and setting its parameters to those shown in Figure C.11(b).
FIGURE C.10
Simulink
block diagram for Example C.2
FIGURE C.11
a. Simulink
library for nonlinearities;
(ﬁgure continues)
830
Appendix C: Simulink Tutorial

Now run the simulation by making your model window active and selecting
Run under the Simulation menu of your model window or clicking on the Run
button on your model window toolbar. Figure C.12 shows the result in the Scope
window.
FIGURE C.11
(Continued )
b. parameter settings for
saturation
FIGURE C.12
Scope window after simulation of Example C.2 stops. The lower curve is the
output with saturation
C.3 Examples
831

Example C.3
Simulating Feedback Systems
Simulating Feedback Systems
Simulink can be used for the simulation of feedback systems. Figure C.13(a) is an
example of a feedback system with saturation.
In this example, we have added a feedback path (see Step 4 in Section C.2) and a
summing junction, which is obtained by dragging the Sum block from the Simulink
Library Browser, contained in the Math Operations library, to your model window.
The Function Block Parameters: Sum window, Figure C.13(b), shows the parameter
settings for the summer. You can set the shape as well as set the plus and minus inputs. In
FIGURE C.13
a. Simulation block diagram for a feedback system with saturation; b. block
parameter window for the summer
832
Appendix C: Simulink Tutorial

the list of signs, the “|”symbol signiﬁes a space. We place it at the beginning to start the
signs at “nine o'clock,” conforming to our standard symbol, rather than at “12 o’clock.”
The result of the simulation is shown in Figure C.14.
Example C.4
Simulating Digital Systems
Simulating Digital Systems
This example demonstrates two methods of generating digital systems via Simulink for
the purpose of simulation, as shown in Figure C.15.
FIGURE C.15
Simulink
block diagram for simulating
digital systems two ways
FIGURE C.14
Simulation
output for Example C.3
C.3 Examples
833

The ﬁrst approach uses a linear transfer function cascaded with a Zero-Order Hold
block obtained from the Simulink Library Browser under the Discrete block library,
shown on the right-hand side of Figure C.16. The second method uses a discrete transfer
function also obtained from the Simulink Library Browser under the Discrete block
library. The remainder of the block diagram was obtained by methods previously
described.
The block parameters for the Zero-Order Hold and Discrete Transfer Fcn blocks
are set as shown in Figures C.17(a) and (b), respectively.
Select Model Conﬁguration Parameters under the Simulation menu in your
model window and set the simulation stop time to 4 seconds, the type to ﬁxed-step,
and the solver to ode4 (Runge-Kutta). The result of the simulation is shown in
Figure C.18.
FIGURE C.16
Simulink library of discrete blocks
FIGURE C.17
Function Block parameter windows for: a. Zero-Order Hold block;
(ﬁgure continues)
834
Appendix C: Simulink Tutorial

FIGURE C.18
Outputs of the digital systems
FIGURE C.17
(Continued ) b. Discrete Transfer Fcn block
C.3 Examples
835

C.4 Using Simulink for Control System Design
In this section we show how to use Simulink to design control systems to meet speciﬁcations
previously discussed in this book. We can make gain adjustments and design compensators
using our Simulink system along with other windows that give us instant veriﬁcation of our
design. Speciﬁcally, we will concentrate on the design of PID compensators. We will show that
PID compensators can be designed automatically or by adjusting design tools, such as response
time and transient behavior. As we make adjustments, we see the immediate result of our design
in lists of speciﬁcations or time responses along with the automatic calculation of the PID gains.
In order to perform control system design, you will need to add the SimulinkControl
DesignTM module Version 4.0 (R2014a), which contains all the necessary tools. Simulink
designs PID controllers using derivative control with a low-pass ﬁlter to reduce noise. The
design requires negative values of derivative gain, which you will notice in the design
examples. We ﬁrst cover the automated design of PID controllers. Next, we cover PID design
using graphical methods.
Automated Design of PID Controllers
The automated design of PID gains generates reasonable robustness and response time. After
the initial design, further adjustments are available, including response time, bandwidth, and
phase margin. Let us ﬁrst enumerate the steps involved, followed by an example.
1. Create a Simulink diagram Begin with a linear or nonlinear feedback control system
containing a PID controller.
2. Set initial values for the PID controller Double-click the PID controller and launch
the Function Block Parameters: PID Controller window. On the MAIN tab, input
nominal values for the Controller parameters. Click Apply.
3. Tune the PID controller
Click Tune . . . in the Function Block Parameters: PID
Controller window. The system is linearized and the PID Tuner window is launched
showing the nominal values response (Block response) and the designed response
(Tuned response). Click the Show parameters button on the Toolstrip of the PID
Tuner window to expose performance data, including the designed PID gains. If the
response meets requirements, then click the Update Block button on the Toolstrip of the
PID Tuner window to write the PID parameters to the controller.
4. Modify the design via interactive tuning
If required, change the performance by
moving the Response Time and Transient Behavior sliders in the middle of the
Toolstrip of the PID Tuner window. Click the Update Block to write the PID
parameters to the controller. If the system is nonlinear, you should run the simulation
to see the effect of the nonlinearity on the designed response.
Example C.5
Automated Design of a PID Controller
Automated Design of a PID Controller
In this example we follow the previously enumerated steps to automate the design of a
PID controller for the system of Figure C.19. The requirements are (1) less than 1 second
settling time; and (2) less than 5% overshoot.
Create a Simulink diagram
We create the Simulink block diagram of Figure C.19
where the PID controller block is found in the Simulink Library Browser as shown in
Figure C.3(a).
Set initial values for the PID controller Double-clicking the PID controller results in
Figure C.20. For initial values we have chosen unity and clicked Apply.
836
Appendix C: Simulink Tutorial

FIGURE C.19
Simulink block diagram for automated design of a PID controller
FIGURE C.20
Function Block Parameters window for the PID controller
C.4 Using Simulink for Control System Design
837

Tune the PID controller
Click Tune . . . in Figure C.20 to launch the PID Tuner
window shown in Figure C.21(a). Click the Show Parameters button, shown encircled,
on the Toolstrip of the PID Tuner window to display parameters and performance.
Modify the design via interactive tuning
Following the instructions in Step 4 on
page 836, we continue tuning the controller using the Response Time and Transient
Bahavior sliders. Finally, click the Update Block button to write the PID parameters to
the controller. The ﬁnal design is shown in Figure C.21(b).
FIGURE C.21
PID Tuner window: a. before additional tuning; b. after additional tuning
838
Appendix C: Simulink Tutorial

Automated Tuning of PID Controllers and Graphical Design
In this subsection, we begin PID design with automated tuning followed by graphical design
of our choice using Bode plots, root locus, etc. Let us ﬁrst enumerate the steps involved
followed by an example.
1. Create a Simulink diagram
Begin with a linear or nonlinear feedback control system
containing a PID controller.
2. Begin compensator design
From the menu bar of your Simulink block diagram
select Analysis/Control Design/Control System Designer . . . launching the Control
and Estimation Tools Manager window.
3. Select block to tune
In the Control and Estimation Tools Manager window, click
Select Blocks. . . . In the resulting Select Blocks to Tune window, choose PID
Controller and click OK.
4. Choose the closed-loop response for which response will be analyzed
On the
Simulink block diagram, choose the input and output for the closed-loop. Right-click at
the input and choose Linear Analysis Points/Input Perturbation. Right-click at the
output point and choose Linear Analysis Points/Output Measurement. Small vertical
arrows result at these points to indicate your selection.
5. TuneblocksandlaunchtheDesignConﬁgurationWizard ClickTuneBlocks . . . and
launch the Design Conﬁguration Wizard. Click Next and select the graphical plots
you want to use for design. Click Next and choose the Analysis Plots you want to use to
analyze the design. Check the Contents of Plots boxes that correspond to the
Responses you want your Analysis Plots to display. Click Finish and launch the
LTI Viewer for SISO Design Task window that contains the Analysis Plots you
selected. Also launched is the SISO Design for SISO Design Task window that
contains the graphical design plots that you previously selected.
6. Perform automatic tuning of the PID controller
In the Control and Estimation
Tools Manager window select the Automated Tuning tab at the top right. Select PID
Tuning in the Design method: drop-down menu. Select Tuning method and Control-
ler Type. Click Update Compensator, which selects compensator gains and updates the
response and graphical design curves. Click Update Simulink Block Parameters.
7. Evaluate performance Right-click the response curve and select Characteristics.
Select each desired choice under Characteristics, adding a plot marker to the curve
at the appropriate measurement point. Click on each marker to read the performance
data.
8. Improve performance by interacting with the graphical design plots Change PID
poles and gains until your response meets the requirements. You may add performance
boundaries by right-clicking the design graphic and selecting Design Requirements/
New. . . . From the pull-down menu select the desired requirements. Upon closing the
window the performance boundary is placed on the graphical design plot.
Example C.6
Automated Tuning of a PID Controller and Graphical Design
Automated Tuning of a PID Controller and Graphical Design
In this example we follow the previously enumerated steps to automatically design a
PID controller for the system of Figure C.19 and follow with further improvement in
performance using root locus. The requirements are: (1) less than 1 second settling
time; and (2) less than 4% overshoot.
C.4 Using Simulink for Control System Design
839

Create a Simulink diagram
We create the Simulink block diagram of Figure C.19
where the PID controller block is found in the Simulink Browser Library as shown in
Figure C.3(a).
Begin Compensator design
In Figure C.19, we select Analysis/Control Design/
Compensator Design. . . , launching the Control and Estimation Tools Manager
window shown in Figure C.22(a).
FIGURE C.22
a. Control and Estimation Tools Manager window before selecting block to
tune; b. Select blocks to Tune window; (ﬁgure continues)
840
Appendix C: Simulink Tutorial

Select blocks to tune
Click Select Blocks . . . in Figure C.22(a) and launch the
Select Blocks to Tune window shown in Figure C.22(b). Select PID Controller
and click OK. The resulting Control and Estimation Tools Manager is shown in
Figure C.22(c).
Choose the closed-loop response for which response will be analyzed
On the Simu-
link block diagram, right-click the output of the step input and select Linear Analysis
Points/Input Perturbation, placing a small down-arrow with a summing junction at
that point, signifying the input of the closed-loop response. Similarly, the closed-loop
output is chosen by right-clicking the output of the plant and selecting Linear Analysis
Points/Output Measurement. A small up-arrow results, signifying the output of the
closed-loop system. The resulting Simulink block diagram is shown in Figure C.23.
Tune blocks and launch the Design Conﬁguration Wizard
Click Tune Blocks . . .
in Figure C.22(c) and launch the Design Conﬁguration Wizard. Click Next. The
resulting window is shown in Figure C24(a). Select Root Locus in the Plot Type pull-
down menu for Plot 1. Click Next to select the plot to be used for analysis as shown in
Figure C.24(b). For this case we choose Step for Plot 1, Plot Type. Also check the
box for Plot 1 below to indicate the Responses as shown.
FIGURE C.22
(Continued) c. Control and Estimation Tools Manager window after selecting
block to tune
FIGURE C.23
Simulink
block diagram showing
closed-loop input and
output points
C.4 Using Simulink for Control System Design
841

Click Finish and launch the LTI Viewer for SISO Design Task window that contains
the step response you selected for analysis. Also launched is the SISO Design for SISO
Design Task window that contains the root locus plot that you previously selected for
design. Before we discuss these two plots, we ﬁrst perform automatic PID tuning.
Perform automated tuning of the PID controller
The Control and Estimation
Tools Manager now looks like that shown in Figure C.25 after selecting the Automated
Tuning tab at the top and making the selections shown in the ﬁgure. Click Update
Compensator and Update Simulink Block Parameters. You should notice a marked
improvement in the step response as shown in Figure C.26.
FIGURE C.24
Design Conﬁguration Wizard: a. with root locus selected as the design tool;
b. with closed-loop step response selected as analysis tool
842
Appendix C: Simulink Tutorial

Evaluate performance
Right-click on the response curve shown in Figure C.26 and
choose Characteristics. Select Peak Response and Settling Time. Blue dots are
placed on the response curve at the appropriate points. Click on each dot to reveal the
performance. In this case we see that automatic tuning yields 6.77% overshoot and 1.56
settling time. The requirements are not met.
FIGURE C.25
Control and Estimation Tools Manager prepared for automatic
PID tuning
FIGURE C.26
LTI Viewer for SISO Design Task window showing closed-loop
step response after automatic PID tuning
C.4 Using Simulink for Control System Design
843

Improve performance by interacting with the graphical design plots
We now
reshape the root locus plot in order to improve performance and meet the require-
ments. On the root locus shown in the SISO Design for SISO Design Task
window, right-click and select Design Requirements/New. . . . In the pull-down
menu select Settling time and type in 1 second. Click OK. Right-click again and
choose Design Requirements/New. . . . In the pull-down menu select Percent
overshoot and type in 4. Click OK. In response, design boundaries are placed on the
root locus. See Figure C.27.
The white space represents responses faster than 1 second settling time and overshoot
less than 4%. Now adjust root locus gain (red squares), PID zero (red zero), and/or PID
pole (red x). These are adjusted by letting your mouse rest on the selected red indicator
until it turns into a hand. Then move the indicator. Shape the root locus until an operating
point falls within the white area. After adjustments, we obtain the root locus shown in
Figure C.28(a) and the time response shown in Figure C.28(b) . We conclude that the
design requirements are met.
FIGURE C.27
Root locus showing design boundaries of 4% overshoot (radial lines) and
1 second settling time (vertical line) with adjustable gain, PID zero, and PID pole
shown in red
844
Appendix C: Simulink Tutorial

FIGURE C.28
Final design as shown in a. root locus; b. step response
C.4 Using Simulink for Control System Design
845

Summary
This appendix explained Simulink, its advantages, and how to use it. Examples were taken
from Chapters 4, 5, and 13 and demonstrated the use of Simulink for simulating linear,
nonlinear, and digital systems.
In addition, we showed how to use the Simulink Control Design add-on to
automatically tune PID controllers and perform shaping of graphical design tools in order
to meet performance requirements.
The objective of this appendix was to familiarize you with the subject and get you
started using Simulink. There are many blocks, parameters, and preferences that could not
be covered in this short appendix. You are encouraged to explore and expand your use of
Simulink by using the on-screen help that was explained earlier. The references in the
Bibliography of this appendix also provide an opportunity to learn more about Simulink.
Bibliography
MathWorks. Control System Toolbox TM Getting Started Guide R2014a. MathWorks, Natick, MA,
2000–2014.
MathWorks. Control System Toolbox TM User’s Guide R2014a. MathWorks, Natick, MA, 2001–2014.
MathWorks. MATLABPrimer R2014a. MathWorks, Natick, MA, 1984–2014.
The designed compensator is displayed in the Control and Estimation Tools Man-
ager under the Compensator Editor tab. Be sure to click the Update Simulink Block
Parameters button at the bottom to update your Simulink model. The result is shown in
Figure C.29.
FIGURE C.29
PID meeting design requirements
846
Appendix C: Simulink Tutorial

MathWorks. MATLABGraphics R2014a. MathWorks, Natick, MA, 1984–2014.
MathWorks. MATLABMathematics R2014a. MathWorks, Natick, MA, 1984–2014.
MathWorks. MATLABProgramming Fundamentals R2014a . MathWorks, Natick, MA, 1984–2014.
MathWorks. SimulinkGetting Started Guide R2014a. MathWorks, Natick, MA, 1990–2014.
MathWorks. SimulinkUser’s Guide R2014a. MathWorks, Natick, MA, 1990–2014.
MathWorks. SimulinkControl DesignTM Getting Started Guide R2014a. MathWorks, Natick, MA,
2004–2014.
MathWorks.SimulinkControl DesignTM User’s GuideR2014a. MathWorks, Natick,MA,2004–2014.
*All MATLAB and Simulink screenshots in this book are reprinted with permission from The
MathWorks, Inc.
Bibliography
847


Appendix D: LabVIEW
Tutorial
D.1 Introduction
LabVIEW is a programming environment that is presented here as an alternative to
MATLAB. Although not necessary, the reader is encouraged to become acquainted
with MATLAB before proceeding, since familiarity with MATLAB can enhance the
understanding of the relationship between textual (MATLAB) and graphical (LabVIEW)
programming languages and extend the functionality of LabVIEW. In this tutorial, we will
show how to use LabVIEW to (1) analyze and design control systems, and (2) simulate
control systems. This appendix was developed using LabVIEW 2013.
LabVIEW is a graphical programming environment that produces virtual
instruments (VI’s). A VI is a pictorial reproduction of a hardware instrument on your
computer screen, such as an oscilloscope or waveform generator. The VI can consist of
various controls and indicators, which become inputs and outputs, respectively, to your
program. Underlying each control and indicator is an associated block of code that deﬁnes
its operation. The LabVIEW model thus consists of two windows: (1) Front Panel, which is
a replica of the hardware front panel showing the controls and indicators, and (2) Block
Diagram, which contains the underlying code for the controls and indicators on the Front
Panel.
Associated with the Front Panel window is a Controls palette window containing
numerous icons representing controls and indicators. The icons can be dragged onto a Front
Panel window to create that control or indicator. Simultaneously, the associated code block
is formed on the Block Diagram window.
Alternately, the block diagram can be formed ﬁrst, and then the front panel is created
from the block diagram. Associated with the Block Diagram window is a Functions palette
window containing numerous icons representing a wide range of functions. Icons can be
dragged onto a Block Diagram window to create that code block.
For example, Figure D.1(a) is the front panel of a signal generator. The generator
consists of a control to select the signal type and a waveform graph that shows the output
waveform. Figure D.1(b) shows the underlying code, which is contained in the code
blocks. Here, the signal type selector is a control, while the waveform graph is an
indicator. Later we will show how to make connections to other VI’s. The palette
windows for the front panel and block diagram are shown respectively in Figures D.1(c)
and (d).
849

D.2 Control Systems Analysis, Design, and Simulation
LabVIEW can be used as an alternative to or in conjunction with MATLAB to analyze,
design, simulate, build, and deploy control systems. In addition to LabVIEW, you will need
the LabVIEW Control Design and Simulation Module. Finally, as an option that will be
explained later, you may want to install the MathScript RT Module.
Analysis and design can be thought of as similar to writing MATLAB code, while
simulation can be thought of as similar to Simulink. In LabVIEW, analysis and design, as
opposed to simulation, are handled from different subpalettes of the Functions window’s
Control Design and Simulation palette. See Figure D.1(d). Analysis and design, and
simulation will typically begin with the Block Diagram window, where icons representing
code blocks will be interconnected. Parameters used by the code can be conveniently
selected, changed, and passed to the code through VI controls on the Front Panel window
created from the code icons. Any results, such as time response, can be displayed through VI
indicators on the Front Panel window created from the code icons.
FIGURE D.1
A LabVIEW function generator VI: a. Front Panel window; b. Block Diagram
window; (ﬁgure continues)
850
Appendix D: LabVIEW Tutorial

D.3 Using LabVIEW
The following steps start you on your way to using LabVIEW for control systems analysis,
design, and simulation. These steps will be illustrated in the examples that follow.
1. Start LabVIEW
LabVIEW starts with the window shown in Figure D.2, where you
can select a New VI or Open an existing VI from the File menu. Alternatively, existing
FIGURE D.1
(Continued) c. Controls palette; d. Functions palette
FIGURE D.2
LabVIEW
window
D.3 Using LabVIEW
851

VI’s can be opened from the Open Existing table on the right. Selecting a new or
existing VI brings up the Front Panel and Block Diagram windows shown in Figure
D.1. If necessary, a window can be opened from the Window tab on the menu bar of the
Front Panel and Block Diagram.
Right-click the Block Diagram window to bring up the Functions palette and click
the thumb tack in the upper left-hand corner to dock the window. Repeat for the Front
Panel window to access the Controls palette.
2. Select blocks
Make the Block Diagram window active, or access it from Window on
the menu bar. Right-click the Block Diagram window or use the View menu to bring up
the Functions palette. Expand the palette window by clicking the double-up arrows at
the bottom. At the top of the palette window click Customize, and select View This
Palette As/Category (Icons and Text) to add a text description below each icon. For
control systems analysis, design, and simulation, expand Control Design & Simulation
in the Functions palette by clicking the arrow to the left of this category.
If you are performing a simulation, clickthe subpalette Simulation. If you are performing
control system analysis or design, click the subpalette Control Design. An arrow in the
upper-right corner of a subpalette indicates additional underlying palettes or blocks.
If the name of the icon is incomplete, resting the mouse over the icon will bring up its
complete identiﬁcation. To obtain detailed help about an icon, right-click the icon and
select Help.
3. Move blocks to the block diagram window
To move the icon to the Block Diagram,
left-click the mouse to attach the icon (some icons take a little time to complete this
operation). When the pointer turns into a hand, click the spot on the Block Diagram
where you want to place the icon.
4. Obtain information about the block
You will now want to obtain information about
how to interconnect the block to other blocks and pass parameters to the block as well as
other characteristics about the block. Select the yellow question mark at the right of the
Block Diagram toolbar to turn on the Context Help window. This window will provide
help about a particular icon if you rest your mouse over that icon. Additional help is
available under the Help menu on the Block Diagram menu bar. Finally, right-click the
icon to bring up a menu with additional choices, such as Properties, if any. In particular,
you will use this menu to create the block’s front panel’s controls and indicators. This
front panel will be your interface with the block to choose parameters and see responses.
5. Interconnect and label blocks
Once blocks are placed on the Block Diagram they
can be moved about by clicking on them or dragging your mouse across several of them
to establish a selection pattern. After the selection pattern has been established, depress
the mouse left button and drag to a new location. To delete a block, select the block and
press the Backspace button on your keyboard.
The context help for the block includes a description of the block’s terminals. Let your
mouse rest on a terminal until the mouse pointer turns into a spool of wire. Click the
terminal and then move the mouse to the next icon’s terminal where you want to make
the connection. Click the destination terminal to complete the wiring. Notice that the
terminal in the Context Help window blinks when your mouse resides above that
terminal on the block, ensuring that you are on the correct terminal. If you make an
error in wiring, click on the wire and press the Backspace button on your keyboard or
right-click the wire and select Delete Wire Branch.
Block labels can be displayed or hidden. Right-click on the block to bring up the
pop-up menu and check or uncheck Visible Items/Label to display or hide, respectively,
the label. Double-clicking on the label above some blocks will allow you to select and
change the text. One click of the mouse on the label will place a selection pattern around
the label and allow you to hold down the left key of the mouse and move the label to a
different location.
852
Appendix D: LabVIEW Tutorial

6. Create the interface to your block
You will now want to create the interface to your
block in order to control or select functions, specify parameters, or view responses. This
interface will be accessed via the Front Panel window. Right-click a terminal on a block
for which you want to create an interface. On the pop-up menu, choose Create/Control
to be able to interact with the block or Create/Indicator to view a response or setting.
7. Set the controls
Switch to the Front Panel window and set your controls. For example,
enter parameter values, select functions, etc. If you want to change values and at some
future time return to the current values, click on Edit on the Block Diagram menu bar and
select Make Current Values Default. To return to the default values in the future, click on
Edit on the Block Diagram menu bar and select Reinitialize Values to Default.
8. Run the program
Click on the arrow at the left of the toolbar on either the Block
Diagram or Front Panel window to run the program. The program can be run
continuously by clicking the curved arrows button on the toolbar second from the left.
Continuously running your program permits changing functions and parameter values
during execution.
In order to identify the buttons, let your mouse rest on a button to bring up a context
menu. Stop your simulation by pressing the red-dot button, third from the left. If you are
performing control systems analysis and design, another way to continuously run the
program is to place a While Loop around your block diagram. The loop is available in
the Functions palette at Express/Execution Control/While Loop. This loop also
places a Stop button on the Front Panel. The program executes until you press the stop
button. In lieu of the Stop button, any true/false Boolean can be wired to the condition
block (red dot) created inside the While Loop.
If you are performing simulation, you can use a Simulation Loop available in the
Functions palette at Control Design andSimulation/Simulation/Control & Simulation
Loop. Place the Control & Simulation Loop around your simulation block diagram by
dragging the mouse. Right-click on the Control & Simulation Loop outline and choose
Conﬁgure Simulation Parameters . . . to determine the parameters for executing the
simulation. The Front Panel indicators and controls are also conﬁgurable. Right-click on
the indicator or control and select Properties.
D.4 Analysis and Design Examples
In this section, we will present some examples showing the use of LabVIEW for the analysis
and design of control systems. In the next section, examples of the use of LabVIEW for
simulation will be presented.
Analysis and design examples use icons selected from the Control Design subpalette
under the Control Design and Simulation palette. In the next section showing examples of
simulation, we will use icons taken from the Simulation subpalette under the Control
Design and Simulation palette.
Example D.1
Open-Loop Step Response
Open-Loop Step Response
Analysis and design usually begins by selecting icons from the Control Design
subpalette and dragging them to the Block Diagram window. The icons represent
blocks of code and the cascading of code blocks can be thought of as a sequence of
lines of code. Thus, an advantage of LabVIEW over MATLAB is that the programmer
does not need to memorize coding language. For example, consider the MATLAB code
shown in TryIt D.1 that produces the step response of G(s) = 100/(s2 + 2s + 100).
TryIt D.1
numg=100;
deng=[1 2 100];
'G(s)'
G=tf(numg,deng)
step(G);
title('Angular Velocity')
D.4 Analysis and Design Examples
853

This step response can be produced in LabVIEW without knowing any coding
language. We now demonstrate by following each step of Section D.3:
1. Start LabVIEW
Start LabVIEW and select New VI from the File menu shown in
Figure D.2.
2. Select blocks
From the Functions palette, select the blocks shown in Figure D.3(a)
and (b).
3. Move/blocks to the Block Diagram window
Drag your icons one at a time to the
Block Diagram window, Figure D.4.
4. Obtain information about the block
Right-click each of the blocks and be sure the
ﬁrst two items under Visible Items are checked. Look at the CD Construct Transfer
Function Model.vi. A Polymorphic VI Selector is shown at the bottom of the icon.
FIGURE D.3
Selecting a. CD Construct . . . and CD Draw . . . ; b. CD Step Response . . .
854
Appendix D: LabVIEW Tutorial

Click the selector to bring up the menu. Select SISO. This block effectively creates the
transfer function shown in the ﬁrst four steps of the MATLAB code in TryIt D.1.
Repeat for the CD Draw Transfer Function Equation.vi and select TF from
the Polymorphic VI Selector. This block will write the transfer function symbolically
in the display. Your selection from the polymorphic vi selector should match the format
of the transfer function created by the CD Construct Transfer Function Model.vi.
Repeat for the CD Step Response.vi. and select TF from the Polymorphic VI
Selector. This block will collect the data for the step response and permit plotting the
data. This block effectively creates the last two commands of the MATLAB code
shown in TryIt D.1.
5. Interconnect and label blocks
You should now have the Block Diagram window
shown in Figure D.4. Interconnect the code blocks. Click on the question mark on
the right side of the toolbar to bring up the context menu. As your mouse passes
above an icon, its context menu appears, showing the terminals. See Figure D.5.
Interconnect the terminals by letting the mouse rest on a terminal until it becomes a
spool of wire.
FIGURE D.4
Block Diagram
window
FIGURE D.5
Context Help
for CD Construct Transfer
Function Model.vi
D.4 Analysis and Design Examples
855

Click on the terminal and then click on the destination terminal. The two terminals
will appear as wired together. Continue wiring terminals until you have the Block
Diagram window shown in Figure D.6. Mid-wire connections as shown can be made
by letting your mouse rest at the connection point until it becomes a spool of wire.
6. Create the interface to your block
You will now want to create the interface to
specify parameters and view responses. This step will create the interface that will be
accessed on the Front Panel window. The interfaces we will create are:
 CD Construct Transfer Function Model.vi input parameter controls. Right-click
on the numerator terminal shown in Figure D.5 and select Create/Control. Repeat
for the denominator.
 CD Step Response.vi response plot indicator. Right-click on the Step Response
Graph terminal and select Create/Indicator.
 CD Draw Transfer Function Equation.vi symbolic transfer function indicator.
Right-click on the Equation terminal and select Create/Indicator. Your Block
Diagram should now look similar to Figure D.7(a).
As an option, you can create transfer functions using a MathScript block if
the MathScript RT Module is installed. This option is generally compatible with
MATLAB’s M-ﬁle code statements for creating your transfer function. Interfaces
are then created to pass parameters to and from the M-ﬁle code. You should be familiar
with MATLAB to use this option. The MathScript block is found in the Programming/
FIGURE D.7
Block Diagram window: a. with Control Design blocks and interfaces;
(ﬁgure continues)
FIGURE D.6
Interconnected blocks
856
Appendix D: LabVIEW Tutorial

Structures/MathScript palette. You create M-ﬁle code inside the MathScript block.
Inputs, outputs, and controls are created as follows. Right-click on the left side of the
MathScript Node and select Add Input. Name the input K. Right-click your terminal
K and select Create/Control. A control is formed on both the Block Diagram and
Front Panel. Repeat the same process to create inputs and controls for parameters a and
b. Now create the output to the MathScript Node. Right-click the right-hand side of the
MathScript Node and select Add Output/G. After wiring your inputs and outputs,
your Block Diagram will be that shown in Figure D.7(b).
On the Block Diagram window menu bar, select Window/Show Front Panel.
You will see the Front Panel shown in Figure D.8 created by your interfaces. You can
double-click the labels above your interfaces either in the Front Panel window or the
Block Diagram window to change the label to be more descriptive of your project.
7. Set the controls
Using the Front Panel window, enter polynomial coefﬁcients for
the numerator and denominator in ascending order—lowest to highest. The selector to
the left of the numerator and denominator shows the power of s for the left-most
coefﬁcient. Increasing the counter allows entry of higher-order coefﬁcients not visible
originally. To make all coefﬁcients of a polynomial visible, let the mouse move on the
right-hand edge of the polynomial indicator until the pointer becomes a double arrow
FIGURE D.7
(Continued) b. with MathScript block
FIGURE D.8
Front Panel: a. for Block Diagram shown in Figure D.7(a); (ﬁgure continues)
D.4 Analysis and Design Examples
857

and blue dots appear at the left and right edges of the entire polynomial indicator. You
can then drag the right blue dot to expose more cells.
Familiarize yourself with the choices on the menu bar as well as those on the
pop-up menus created when you right-click on any indicator or control. For example,
under the Edit menu, among other choices, you can Make Current Values Default or
Reinitialize Values to Default. Right-clicking the indicators or controls brings up a
menu from which, among other choices, Properties can be selected to conﬁgure the
indicator or control as desired.
8. Run the program
Figure D.9 shows Example D.1 after execution. The ﬁgure shows
the values entered, the equation, and the step response. Execution was initiated by
clicking the arrow at the left of the toolbar.
The program can run continuously by clicking the curved arrows on the toolbar.
Now, change values; hit the Enter key and see the results immediately displayed. Stop
the program execution by clicking on the red hexagon on the toolbar. Another way of
FIGURE D.8
(Continued) b. for Block Diagram shown in Figure D.7(b)
FIGURE D.9
FrontPanelafterexecution:a. for block diagram in Figure D.7(a); (ﬁgure continues)
858
Appendix D: LabVIEW Tutorial

continuously running the program is to place a While Loop around the block diagram
as shown in Figure D.10(a). The loop is accessed from Functions/Express/Execution
Control as shown in Figure D.10(b). After selecting the While Loop, drag the cursor
across the block diagram to create the continuous loop. A stop button will appear on the
block diagram as well as on the Front Panel. At the lower right is a Conditional
Terminal icon, which can be used to control the While Loop. The reader should
consult the on-line documentation for further information.
FIGURE D.10
a. Block diagram with While Loop; b. Functions palette showing
While Loop location
FIGURE D.9
(Continued) b. for block diagram in Figure D.7(b)
D.4 Analysis and Design Examples
859

Example D.2
Closed-Loop Step Response
Closed-Loop Step Response
In this example, we show how to display the step response of a unity-feedback
system. For variety, we represent the open-loop system as a ratio of zeros over poles
with a multiplying gain, analogous to MATLAB’s zpk function. In the previous
example, we represented the system as a ratio of polynomials, analogous to MATLAB’s
tf function.
1. Select blocks
The zero-pole-gain transfer function is obtained from the Functions
palette as shown in Figure D.11(a). We place this transfer function in the forward path
FIGURE D.11
a. Obtaining zero-pole-gain transfer function from the Functions palette;
b. Obtaining Feedback interconnection from Functions palette
860
Appendix D: LabVIEW Tutorial

of a unity-feedback system by following its block with a Feedback block obtained
from the Functions palette as shown in Figure D.11(b). If the Model 2 input to the
Feedback block is left unconnected, then a unity-feedback interconnection is assumed.
Other options for interconnection, such as parallel and series, are shown on the palette
of Figure D.11(b).
2. Interconnect and label blocks
Producing the closed-loop step response is similar to
Example D.1, except the step-response blocks are placed at the output of the Feedback
block. The equation writer is wired to the system output as in Example D.1. All data
types must be compatible and are shown selected with the pull-down menu at the base
of the blocks. If you select Automatic in the pull-down menu, LabVIEW will select the
correct form for you as you connect the blocks.
The ﬁnal Block Diagram and Front Panel for this example are shown in
Figure D.12 (a) and (b), respectively. Notice that you enter open-loop poles, zeros, and
gain on the Front Panel in place of polynomial open-loop numerator and denominator
coefﬁcients.
FIGURE D.12
a. Block Diagram for Example D.2; b. Front Panel for Example D.2
D.4 Analysis and Design Examples
861

Example D.3
Root Locus Analysis and Design
Root Locus Analysis and Design
We can obtain root locus plots by adding the Root Locus block obtained from the
Functions palette as shown in Figure D.13. The Root Locus block is connected to
the output of the open-loop system and a Root Locus Graph indicator is formed at the
output of the Root Locus block. The resultant Block Diagram and Front Panel are
shown in Figure D.14(a) and (b) respectively.
Figure D.13 shows other characteristic blocks that can be added. For example, closed-
loop poles and zeros, as well as damping ratio and natural frequency, can be displayed.
FIGURE D.13
Functions palette
showing location of Root Locus block
FIGURE D.14
Windows showing root locus analysis: a. Block Diagram;
b. Front Panel
Example D.4
Open- and Closed-Loop Sinusoidal Frequency Analysis
and Design
Open- and Closed-Loop Sinusoidal Frequency Analysis
and Design
We can obtain open- and closed-loop sinusoidal frequency response curves by replacing
the Root Locus block with the Bode block to yield the open-loop frequency response. A
copy of the Bode block can be added at the output of the Feedback block to obtain the
closed-loop frequency response. Figure D.15 shows where to obtain the Bode block.
862
Appendix D: LabVIEW Tutorial

Figure D.16 shows the Block Diagram and Front Panel with open- and closed-
loop Bode analysis. In order to display the plots, the indicators shown at the outputs of
the Bode blocks were created.
FIGURE D.15
Functions window showing frequency response blocks, such as Bode, Nyquist,
Nichols, and Gain and Phase Margin blocks
FIGURE D.16
Bode analysis via LabVIEW: a. Block Diagram; (ﬁgure continues)
D.4 Analysis and Design Examples
863

Figure D.15 shows other alternatives for frequency response analysis. For
example, in addition to the Bode plots, you can create an indicator telling you the
gain and phase margins by using the Gain and Phase Margin block. Figure D.17
shows that result.
FIGURE D.16
(Continued) b. Front Panel
FIGURE D.17
Bode analysis with gain and phase margin: a. Block Diagram; (ﬁgure continues)
864
Appendix D: LabVIEW Tutorial

D.5 Simulation Examples
Whereas the LabVIEW block sequence for design and analysis is analogous to
following the code statement sequence in a MATLAB M-ﬁle, the LabVIEW block
sequence for simulation is analogous to following the block sequence of a Simulink
diagram.
In this section, we show examples of simulation using LabVIEW. For control
system simulation, icons for the block diagram are taken from the Simulation subpalette
under the Control Design and Simulation palette. Our examples will parallel the
examples shown in Appendix C which uses Simulink.
Finally, if you need to use Nyquist or Nichols charts, the associated blocks are
shown in Figure D.15 and can replace the Bode blocks.
FIGURE D.17
(Continued) b. Front Panel
D.5 Simulation Examples
865

Example D.5
Simulation of Linear Systems
Simulation of Linear Systems
Create Block Diagram and Front Panel
Figure D.18 shows the Block Diagram and
Front Panel for simulating a linear system. The simulation reproduces Example C.1
in Appendix C, which uses Simulink. Blocks are selected from the Simulation subpalette
under the Control Design and Simulation palette and must be placed within
the Simulation Loop obtained from Functions/Control Design and Simulation/
Simulation/Control & Simulation Loop. We now enumerate the detailed steps required
to create the Block Diagram and Front Panel:
FIGURE D.18
Simulation of linear systems: a. Block Diagram; b. Front Panel
866
Appendix D: LabVIEW Tutorial

1. Transfer functions are obtained from Functions/Control Design and Simulation/
Simulation/Continuous Linear Systems/Transfer Function. Right-click on each
transfer function and select Conﬁguration to enter the parameter values shown in
Figure D.18(a) or equivalently in Figure C.5.
2. The gain block is obtained from Functions/Control Design and Simulation/
Simulation/Signal Arithmetic/Gain. Right-click on the gain block and select
Conﬁguration to enter the parameter value.
3. The step-input block is obtained from Functions/Control Design and Simulation/
Simulation/Signal Generation/Step Signal. Right-click on the gain block and select
Conﬁguration to enter the parameter value.
4. In order to display the three step-response curves simultaneously, we use a Build
Array block obtained from Functions/Programming/Array/Build Array. Drag the
bottom of the icon to expose the correct number of inputs (three for this case).
5. To create the display, we use the Simulation Time Waveform block obtained from
Functions/Control Design and Simulation/Simulation/Graph Utilities/Simtime
Waveform. Right-click the output of the Simtime Waveform block and select Create/
Indicator to produce the Waveform Chart icon and the Front Panel display.
Conﬁgure simulation loop
Finally, set the simulation parameters by right-clicking
the Simulation Loop and selecting Conﬁgure Simulation Parameters. . . . Set the
parameters as shown in Figure D.19.
FIGURE D.19
Conﬁguring the Simulation Loop parameters: a. Simulation parameters; b. Timing parameters
D.5 Simulation Examples
867

Conﬁgure graph parameters
On the Front Panel, right-click the graph and select
Properties to conﬁgure graph parameters if required. Select the legend and expand it
vertically to expose all three plot identities. The titles in the legend can be changed to
reﬂect meaningful labels for the plots.
Run the simulation
Perform the simulation by clicking the arrow at the extreme left
of the toolbar on the Front Panel window. You can erase curves between trials by
right-clicking the display and selecting Data Operations/Clear Chart.
Example D.6
Effect of Ampliﬁer Saturation on Motor’s Load
Angular Velocity
Effect of Ampliﬁer Saturation on Motor’s Load
Angular Velocity
Create Block Diagram and Front Panel
The Block Diagram and Front Panel
for simulating a dc motor with and without saturation are shown in Figure D.20.
The Saturation block is obtained from Control Design & Simulation/Simulation/
Nonlinear Systems/Saturation.
Conﬁgure simulation loop
Conﬁgure the simulation loop as shown in ﬁgure D.19,
except change the Final Time (s) in Figure D.19(a) to 10.
Conﬁgure graph parameters
On the Front Panel, right-click the graph and select
Properties to conﬁgure graph parameters. Select the Scales tab and enter 10 in the
Maximum box as shown in Figure D.21. Select the legend and expand it vertically to
expose both plot identities. The titles in the legend can be changed to reﬂect meaningful
labels for the plots.
Run the simulation
Perform the simulation by clicking the arrow at the extreme
left of the toolbar on the Front Panel window. You can erase curves between trials
by right-clicking the display and selecting Data Operations/Clear Chart.
FIGURE D.20
Simulation of a dc motor with and without saturation: a. Block Diagram; (ﬁgure continues)
868
Appendix D: LabVIEW Tutorial

FIGURE D.20
(Continued) b. Front Panel
FIGURE D.21
Chart Properties: Waveform Chart Window
D.5 Simulation Examples
869

Example D.7
Simulating Feedback Systems
Simulating Feedback Systems
Create Block Diagram and Front Panel
The Block Diagram and Front Panel for
simulating feedback systems is shown in Figure D.22. The Summation block is obtained
from Control Design & Simulation/Simulation/Signal Arithmetic/Summation.
Conﬁgure Summation and other blocks
Right-click the Summation block and select
Conﬁguration . . . Repeat for other blocks.
FIGURE D.22
Simulation of feedback systems: a. Block Diagram; b. Front Panel
870
Appendix D: LabVIEW Tutorial

Example D.8
Simulating Digital Systems with the Simulation Palette
Simulating Digital Systems with the Simulation Palette
Digital systems, such as Example C.4 in Appendix C, can be simulated using LabVIEW.
However, there are restrictions on the transfer functions used in the simulation. LabVIEW
requires that all inputs to the transfer functions be present at the beginning of the simula-
tion or else a cycle error will result. Unfortunately, this requirement limits the use of
transfer functions to those with a denominator of higher order than the numerator. Under
these conditions, the reader is advised to use either MATLAB or the Control Design
palette rather than the Simulation palette of the Control Design & Simulation function.
Our ﬁrst digital example will simulate a digital feedback system using the
Simulation palette with proper transfer functions. The next example will simulate
Example C.4 in Appendix C, which does not have proper transfer functions, using
LabVIEW’s Control Design palette.
Create Block Diagram and Front Panel
The Block Diagram and Front Panel for
simulating digital systems is shown in Figure D.23. The Discrete Zero-Order Hold block
is obtained from Control Design & Simulation/Simulation/Discrete Linear Systems/
FIGURE D.23
Simulation of digital systems with Simulation palette: a. Block Diagram; (ﬁgure continues)
Conﬁgure simulation loop
Conﬁgure the simulation loop as shown in Figure D.19,
except change the Final Time (s) in Figure D.19(a) to 10.
Conﬁgure graph parameters
On the Front Panel, right-click the graph and select
Properties to conﬁgure graph parameters. Select the Scales tab and enter 10 in the
Maximum box as shown in Figure D.21.
Run the simulation
Perform the simulation by clicking the arrow at the extreme left
of the toolbar on the Front Panel window. You can erase curves between trials by
right-clicking the display and selecting Data Operations/Clear Chart.
D.5 Simulation Examples
871

Discrete Zero-Order Hold. The Discrete Transfer Function is obtained from Control
Design
&
Simulation/Simulation/Discrete
Linear
Systems/Discrete
Transfer
Function.
Conﬁgure Discrete Zero-Order Hold and other blocks
Right click the Discrete
Zero-Order Hold block and select Conﬁguration . . . Set the sample period to 0.5 second.
Conﬁgure the transfer functions as shown on the Block Diagram. Conﬁgure the Step
Signal to be a unit step.
Conﬁgure simulation loop
Conﬁgure the simulation loop as shown in Figure D.19.
Conﬁgure graph parameters
On the Front Panel, right-click the graph and select
Properties to conﬁgure graph parameters. Select the Scales tab and enter 3 in the
Maximum box for the x axis and 1 for the y axis. Select the legend and expand it
vertically to expose both plot identities. The titles in the legend can be changed to reﬂect
meaningful labels for the plots.
Run the simulation
Perform the simulation by clicking the arrow at the extreme
left of the toolbar on the Front Panel window. You can erase curves between trials
by right-clicking the display and selecting Data Operations/Clear Chart.
The simulation shows the difference in responses obtained by (1) modeling
the digital system as a zero-order hold cascaded with a linear system (Plot 0), or
(2) modeling the system with a digital transfer function (Plot 1).
Example D.9
Simulating Digital Systems with the Control Design Palette
Simulating Digital Systems with the Control Design Palette
In order to avoid cycle errors in LabVIEW, we use the Control Design palette when we
have transfer functions for which the numerator and denominator are of the same order.
This example reproduces Simulink Example C.4.
FIGURE D.23
(Continued) b. Front Panel
872
Appendix D: LabVIEW Tutorial

Create Block Diagram and Front Panel
The Block Diagram and Front Panel for
this example are shown in Figure D.24. Wire the blocks as shown.
Most of the blocks were previously discussed in Examples D.1 and D.2. Digital
transfer functions are created using the same blocks as continuous systems, but with a
nonzero Sampling Time(s) input.
The CD Convert Continuous to Discrete.vi, is obtained from Functions/
Control Design & Simulation/Control Design/Model Conversion/CD Convert
Continuous to Discrete.vi.
FIGURE D.24
Simulation of digital systems with the Control Design palette: a. Block Diagram;
b. Front Panel
D.5 Simulation Examples
873

The Build Array is obtained from Functions/Programming/Array/Build Array.
Expand the Build Array block to show two inputs.
Conﬁgure parameters for Build Array
Right-click on Build Array and select
Concatenate Inputs. Right-click again on Build Array and select Create/Indicator.
Select and then right-click the indicator on the front panel and choose Replace.1
Using the resulting palettes as shown in Figure D.25, select the XY Graph.2
On the front panel expand the legend to show two graphs. Title the legend
components as shown. Change the x- and y-axes’ starting and ending points as desired by
right-clicking the graph and selecting Properties. In the Properties window, select
Scales and enter the desired information. Finally, select Plots and enter your choices.
Right-click the graph on the front panel and select Data Operations and make your
current values the default. Also, right-click again and choose to reinitialize to your
default values. You may also choose to clear the current plot.
Conﬁgure parameters for CD Convert Continuous to Discrete.vi
Right-click and
create a control for Sample Time(s), Numerator, and Denominator as described in
Example D.1. Set the values as shown on the Front Panel.
Conﬁgure parameters for CD Construct Transfer Function Model.vi as a discrete
model
Right-click and create a control for Sample Time(s), Numerator, and
Denominator as described in Example D.1. Set the values as shown on the Front Panel.
Conﬁgure parameters for all CD Draw Transfer Function Equation.vi
Right-click
and create a control for Equation as described in Example D.1. Set the values as shown
on the Front Panel.
Run simulation
See Example D.1 for a description. The results are shown in
Figure D.24(b).
FIGURE D.25
Choosing XYGraph
1 Be sure to select the entire indicator. Then place your mouse on the outer edge and be sure it is a pointer before
selecting Replace.
2 Right click the XY Graph on the front panel and open Properties. On the Appearance tab, select 2 for Plots
shown.
874
Appendix D: LabVIEW Tutorial

D.6 Interfacing with External Hardware
This section provides an introduction to the use of LabVIEW virtual instruments to control
external hardware with the NI myDAQ for students. Speciﬁcally, we concentrate on using
the NI myDAQ to analyze and design an actual feedback system used in the Hardware
Exploration Laboratory sections at the end of select chapters.
1. Required Hardware
NI myDAQ is a data acquisition module that is ideal for
student experimentation, since it is portable and of low cost. In order to perform the
experiments in this book, you will need a motor control chip and a gearmotor.
Although other alternatives exist, we use the following: (1) ROHM motor control
chip, BA6886N; and (2) 9.7:1 metal gearmotor 25Dx48L mm HP with 48 CPR
encoder, which can be obtained from www.pololu.com.
2. Required Software
The software required to support the experiments in this book
are: (1) LabVIEW or the Student Version of LabVIEW and (2) NI ELVISmx Soft
Front Panel (SFP) Instruments, which comes bundled with the NI myDAQ. NI
ELVISmx provides virtual instruments that will generate input signals to and acquire
output signals from your external control system.
3. Basic Conﬁguration
Figure D.26 shows the NI myDAQ and the basic conﬁguration
that will be used to perform control system design and analysis. Detailed wiring diagrams
will accompany speciﬁc experiments.
4. Launching NI myDAQ
The NI myDAQ kit comes with the following cables and
connectors: (1) USB cable; (2) 20-position screw terminal connector; (3) audio cable;
and (4) DMM banana cable. The following steps will launch the NI myDAQ and
NI ELVISmx, which provides convenient virtual instruments for control and data
acquisition.
FIGURE D.26
a. NI myDAQ; (ﬁgure continues)
D.6 Interfacing with External Hardware
875

Step 1: Be sure LabVIEW is installed on your computer.
Step 2: Install the NI myDAQ software.
Step 3: Connect the NI myDAQ to your computer via the USB cable.
Step 4: After NI myDAQ is recognized, NI ELVISmx should launch automatically.
If NI ELVISmx does not launch, then manually launch from the Start
menu All Programs/National Instruments/NI ELVISmx for NI ELVIS &
NI myDAQ/ NI ELVISmx Instrument Launcher. Figure D.27 shows the
window containing the virtual instruments available from NI ELVISmx.
Clicking on any instrument will bring up that VI.
Simple Experiments Using the NI myDAQ
1. Measuring battery voltage using the NI myDAQ Digital Multimeter (DMM)
With
myDAQ connected to your computer, launch the DMM shown in Figure D.27. Attach
the DMM probes between the myDAQ and a battery as shown in Figure D.28(a). Press
the green Run arrow.
ROHM Motor Control Chip
B6886N
9.7:1 Metal Gearmotor
25Dx48L mm HP with 48 CPR
Encoder
(b)
FIGURE D.26
(Continued) b. basic conﬁguration showing NI myDAQ interfaced with motor
control chip and gearmotor; c. interconnected hardware
876
Appendix D: LabVIEW Tutorial

FIGURE D.27
The
NI ELVISmx Instrument
Launcher window
FIGURE D.28
Battery voltage
measurement: a. Connections to
myDAQ; (ﬁgure continues)
D.6 Interfacing with External Hardware
877

2. The NI myDAQ audio equalizer
With myDAQ connected to your computer, launch
the Audio Equalizer in the Featured Instruments menu shown in Figure D.27. Attach
an audio cable from your music source to AUDIO IN on your myDAQ. Similarly, attach
speakers or an earphone to the AUDIO OUT. Press the blue Start arrow. You can now
adjust volume, bass, midtone, and treble as well as watch the audio waveform in time or
frequency. The Audio Equalizer is shown in Figure D.29.
FIGURE D.28
(Continued) b.
DMM reading
FIGURE D.29
The
NI myDAQ Audio Equalizer
878
Appendix D: LabVIEW Tutorial

Summary
This appendix presented LabVIEW as an alternative to MATLAB for analysis, design, and
simulation. Our discussion was divided into analysis and design, and simulation.
Analysis and design is performed by interconnecting code blocks, which is analogous
to writing in-line code for MATLAB M-ﬁles. Since the LabVIEW code blocks are
represented by icons, an advantage of using LabVIEW is that you do not have to know
speciﬁc code statements.
Simulation is performed by interconnecting code blocks and is analogous to Simulink
ﬂow diagrams.
LabVIEW has more extensive applications. You can create virtual instruments on
your computer monitor that can operate external hardware and transmit and receive
telemetric data. We covered a few of these applications in this appendix using the NI
myDAQ. It is left to the interested reader to pursue more of these applications.
Bibliography
National Instruments. Getting Started with LabVIEW. National Instruments, Austin, TX. 2003–2013.
National Instruments. LabVIEW Fundamentals. National Instruments, Austin, TX. 2005.
National Instruments. LabVIEWTM Control Design User Manual. National Instruments, Austin, TX.
2004–2009.
National Instruments. Introduction to LabVIEW in 3 Hours for Control Design and Simulation.
National Instruments Course Notes, Austin, TX. 2009.
National Instruments. NI myDAQ User Guide and Speciﬁcations. National Instruments, Austin, TX.
2010–2011.
*All LabVIEW screenshots and equipment in this book are reprinted with permission of National
Instruments.
Bibliography
879


Glossary
Acceleration constant lim
s®0 s2Gs
Actuating signal The signal that drives the controller. If this signal is the difference between
the input and output, it is called the error.
Analog-to-digital converter A device that converts analog signals to digital signals.
Armature The rotating member of a dc motor through which a current ﬂows.
Back emf The voltage across the armature of a motor.
Bandwidth The frequency at which the magnitude frequency response is 3 dB below the
magnitude at zero frequency.
Basis Linearly independent vectors that deﬁne a space.
Bilinear transformation A mapping of the complex plane where one point, s, is mapped
into another point, z, through z  as  b/cs  d.
Block diagram A representation of the interconnection of subsystems that form a system.
In a linear system, the block diagram consists of blocks representing subsystems, arrows
representing signals, summing junctions, and pickoff points.
Bode diagram (plot) A sinusoidal frequency response plot where the magnitude response
is plotted separately from the phase response. The magnitude plot is dB versus log ω, and
the phase plot is phase versus log ω. In control systems, the Bode plot is usually made
for the open-loop transfer function. Bode plots can also be drawn as straight-line
approximations.
Branches Lines that represent subsystems in a signal-ﬂow graph.
Break frequency A frequency where the Bode magnitude plot changes slope.
Breakaway point A point on the real axis of the s-plane where the root locus leaves the real
axis and enters the complex plane.
Break-in point A point on the real axis of the s-plane where the root locus enters the real
axis from the complex plane.
Characteristic equation The equation formed by setting the characteristic polynomial to
zero.
Characteristic polynomial The denominator of a transfer function. Equivalently, the
unforced differential equation, where the differential operators are replaced by s or λ.
881

Classical approach to control systems See frequency domain techniques.
Closed-loop system A system that monitors its output and corrects for disturbances. It is
characterized by feedback paths from the output.
Closed-loop transfer function For a generic feedback system with Gs in the forward
path and Hs in the feedback path, the closed-loop transfer function, Ts, is
Gs/1 GsHs, where the + is for negative feedback, and the – is for positive feedback.
Compensation The addition of a transfer function in the forward path or feedback path
for the purpose of improving the transient or steady-state performance of a control
system.
Compensator A subsystem inserted into the forward or feedback path for the purpose of
improving the transient response or steady-state error.
Constant M circles The locus of constant, closed-loop magnitude frequency response for
unity feedback systems. It allows the closed-loop magnitude frequency response to be
determined from the open-loop magnitude frequency response.
Constant N circles The locus of constant, closed-loop phase frequency response for unity
feedback systems. It allows the closed-loop phase frequency response to be determined from
the open-loop phase frequency response.
Controllability A property of a system by which an input can be found that takes every
state variable from a desired initial state to a desired ﬁnal state in ﬁnite time.
Controlled variable The output of a plant or process that the system is controlling for the
purpose of desired transient response, stability, and steady-state error characteristics.
Controller The subsystem that generates the input to the plant or process.
Critically damped response The step response of a second-order system with a given
natural frequency that is characterized by no overshoot and a rise time that is faster than any
possible overdamped response with the same natural frequency.
Damped frequency of oscillation The sinusoidalfrequency of oscillation of an underdamped
response.
Damping ratio The ratio of the exponential decay frequency to the natural frequency.
Decade Frequencies that are separated by a factor of 10.
Decibel (dB) The decibel is deﬁned as 10 logPG, where PG is the power gain of a signal.
Equivalently, the decibel is also 20 logVG, where VG is the voltage gain of a signal.
Decoupled system A state-space representation in which each state equation is a function of
only one state variable. Hence, each differential equation can be solved independently of the
other equations.
Digital compensator A sampled transfer function used to improve the response of
computer-controlled feedback systems. The transfer function can be emulated by a
digital computer in the loop.
Digital-to-analog converter A device that converts digital signals to analog signals.
Disturbance An unwanted signal that corrupts the input or output of a plant or process.
Dominant poles The poles that predominantly generate the transient response.
Eigenvalues Any value, λi, that satisﬁes AXi  λixi for xi 6 0. Hence, any value, λi, that
makes xi an eigenvector under the transformation A.
882
Glossary

Eigenvector Any vector that is collinear with a new basis vector after a similarity
transformation to a diagonal system.
Electric circuit analog An electrical network whose variables and parameters are analogous
to another physical system. The electric circuit analog can be used to solve for variables of the
other physical system.
Electrical admittance The inverse of electrical impedance. The ratio of the Laplace
transform of the current to the Laplace transform of the voltage.
Electrical impedance The ratio of the Laplace transform of the voltage to the Laplace
transform of the current.
Equilibrium The steady-state solution characterized by a constant position or oscillation.
Error The difference between the input and the output of a system.
Euler’s approximation A method of integration where the area to be integrated is
approximated as a sequence of rectangles.
Feedback A path through which a signal ﬂows back to a previous signal in the forward path
in order to be added or subtracted.
Feedback compensator A subsystem placed in a feedback path for the purpose of
improving the performance of a closed-loop system.
Forced response For linear systems, that part of the total response function due to the input.
It is typically of the same form as the input and its derivatives.
Forward-path gain The product of gains found by traversing a path that follows the
direction of signal ﬂow from the input node to the output node of a signal-ﬂow graph.
Frequency domain techniques A method of analyzing and designing linear control
systems by using transfer functions and the Laplace transform as well as frequency response
techniques.
Frequency response techniques A method of analyzing and designing control systems by
using the sinusoidal frequency response characteristics of a system.
Gain The ratio of output to input; usually used to describe the ampliﬁcation in the steady
state of the magnitude of sinusoidal inputs, including dc.
Gain margin The amount of additional open-loop gain, expressed in decibels (dB),
required at 180° of phase shift to make the closed-loop system unstable.
Gain-margin frequency The frequency at which the phase frequency response plot equals
180°. It is the frequency at which the gain margin is measured.
Homogeneous solution See natural response.
Ideal derivative compensator See proportional-plus-derivative controller.
Ideal integral compensator See proportional-plus-integral controller.
Instability The characteristic of a system deﬁned by a natural response that grows without
bounds as time approaches inﬁnity.
Kirchhoff’s law The sum of voltages around a closed loop equals zero. Also, the sum of
currents at a node equals zero.
Lag compensator A transfer function, characterized by a pole on the negative real axis
close to the origin and a zero close and to the left of the pole, that is used for the purpose of
improving the steady-state error of a closed-loop system.
Glossary
883

Lag-lead compensator A transfer function, characterized by a pole-zero conﬁguration that
is the combination of a lag and a lead compensator, that is used for the purpose of improving
both the transient response and the steady-state error of a closed-loop system.
Laplace transformation A transformation that transforms linear differential equations into
algebraic expressions. The transformation is especially useful for modeling, analyzing, and
designing control systems as well as solving linear differential equations.
Lead compensator A transfer function, characterized by a zero on the negative real axis
and a pole to the left of the zero, that is used for the purpose of improving the transient
response of a closed-loop system.
Linear combination A linear combination of n variables, xi, for i  1 to n, given by the
following sum, S:
S  KnXn  Kn1Xn1      K1X1
where each Ki is a constant.
Linear independence The variables xi, for i  1 to n, are said to be linearly independent if
their linear combination, S, equals zero only if every Ki  0 and no xi  0. Alternatively, if
the xi’s are linearly independent, then Knxn  Kn1xn1  ∙∙∙ K1x1  0 cannot be solved
for any xk. Thus, no xk can be expressed as a linear combination of the other xi’s.
Linear system A system possessing the properties of superposition and homogeneity.
Linearization The process of approximating a nonlinear differential equation with a linear
differential equation valid for small excursions about equilibrium.
Loop gain For a signal-ﬂow graph, the product of branch gains found by traversing a path
that starts at a node and ends at the same node without passing through any other node more
than once, and following the direction of the signal ﬂow.
Major-loop compensation A method of feedback compensation that adds a compensating
zero to the open-loop transfer function for the purpose of improving the transient response of
the closed-loop system.
Marginal stability The characteristic of a system deﬁned by a natural response that neither
decays nor grows, but remains constant or oscillates as time approaches inﬁnity as long as
the input is not of the same form as the system’s natural response.
Mason’s rule A formula from which the transfer function of a system consisting of the
interconnection of multiple subsystems can be found.
Mechanical rotational impedance The ratio of the Laplace transform of the torque to the
Laplace transform of the angular displacement.
Mechanical translational impedance The ratio of the Laplace transform of the force to the
Laplace transform of the linear displacement.
Minor-loop compensation A method of feedback compensation that changes the poles of a
forward-path transfer function for the purpose of improving the transient response of the
closed-loop system.
Modern approach to control systems See state-space representation.
Natural frequency The frequency of oscillation of a system if all the damping is removed.
Natural response That part of the total response function due to the system and the way the
system acquires or dissipates energy.
884
Glossary

Negative feedback The case where a feedback signal is subtracted from a previous signal in
the forward path.
Newton’s law The sum of forces equals zero. Alternatively, after bringing the ma force to
the other side of the equality, the sum of forces equals the product of mass and acceleration.
Nichols chart The locus of constant closed-loop magnitude and closed-loop phase frequency
responses for unity feedback systems plotted on the open-loop dB versus phase-angle plane. It
allows the closed-loop frequency response to be determined from the open-loop frequency
response.
Nodes Points in a signal-ﬂow diagram that represent signals.
No-load speed The speed produced by a motor with constant input voltage when the torque
at the armature is reduced to zero.
Nonminimum-phase system A system whose transfer function has zeros in the right
half-plane. The step response is characterized by an initial reversal in direction.
Nontouching-loop gain The product of loop gains from nontouching loops taken two,
three, four, and so on at a time.
Nontouching loops Loops that do not have any nodes in common.
Notch ﬁlter A ﬁlter whose magnitude frequency response dips at a particular sinusoidal
frequency. On the s-plane, it is characterized by a pair of complex zeros near the
imaginary axis.
Nyquist criterion If a contour, A, that encircles the entire right half-plane is mapped
through GsHs, then the number of closed-loop poles, Z, in the right half-plane equals the
number of open-loop poles, P, that are in the right half-plane minus the number of
counterclockwise revolutions, N, around 1, of the mapping; that is, Z  P  N. The
mapping is called the Nyquist diagram of GsHs.
Nyquist diagram (plot) A polar frequency response plot made for the open-loop transfer
function.
Nyquist sampling rate The minimum frequency at which an analog signal should be
sampled for correct reconstruction. This frequency is twice the bandwidth of theanalog signal.
Observability A property of a system by which an initial state vector, xt0, can be found
from u(t) and y(t) measured over a ﬁnite interval of time from t0. Simply stated, observability
is the property by which the state variables can be estimated from a knowledge of the input,
u(t), and output, y(t).
Observer A system conﬁguration from which inaccessible states can be estimated.
Octave Frequencies that are separated by a factor of two.
Ohm’s law For dc circuits the ratio of voltage to current is a constant called resistance.
Open-loop system A system that does not monitor its output nor correct for disturbances.
Open-loop transfer function For a generic feedback system with G(s) in the forward path
and H(s) in the feedback path, the open-loop transfer function is the product of the forward-
path transfer function and the feedback transfer function, or GsHs.
Operational ampliﬁer An ampliﬁer—characterized by a very high input impedance, a very
low output impedance, and a high gain—that can be used to implement the transfer function
of a compensator.
Output equation For linear systems, the equation that expresses the output variables of a
system as linear combinations of the state variables.
Glossary
885

Overdamped response A step response of a second-order system that is characterized by
no overshoot.
Partial-fraction expansion A mathematical equation where a fraction with n factors in its
denominator is represented as the sum of simpler fractions.
Particular solution See forced response.
Passive network A physical network that only stores or dissipates energy. No energy is
produced by the network.
Peak time, Tp The time required for the underdamped step response to reach the ﬁrst, or
maximum, peak.
Percent overshoot, %OS The amount that the underdamped step response overshoots the
steady-state, or ﬁnal, value at the peak time, expressed as a percentage of the steady-state value.
Phase margin The amount of additional open-loop phase shift required at unity gain to
make the closed-loop system unstable.
Phase-margin frequency The frequency at which the magnitude frequency response plot
equals zero dB. It is the frequency at which the phase margin is measured.
Phase variables State variables such that each subsequent state variable is the derivative of
the previous state variable.
Phasor A rotating vector that represents a sinusoid of the form A cosωt  ϕ.
Pickoff point A block diagram symbol that shows the distribution of one signal to multiple
subsystems.
Plant or process The subsystem whose output is being controlled by the system.
Poles (1) The values of the Laplace transform variable, s, that cause the transfer function to
become inﬁnite; and (2) any roots of factors of the characteristic equation in the denominator
that are common to the numerator of the transfer function.
Position constant lim
s®0 Gs
Positive feedback The case where a feedback signal is added to a previous signal in the
forward path.
Proportional-plus-derivative (PD) controller A controller that feeds forward to the plant
a proportion of the actuating signal plus its derivative for the purpose of improving the
transient response of a closed-loop system.
Proportional-plus-integral (PI) controller A controller that feeds forward to the plant a
proportion of the actuating signal plus its integral for the purpose of improving the steady-
state error of a closed-loop system.
Proportional-plus-integral-plus-derivative (PID) controller A controller that feeds
forward to the plant a proportion of the actuating signal plus its integral plus its derivative
for the purpose of improving the transient response and steady-state error of a closed-loop
system.
Quantization error For linear systems, the error associated with the digitizing of signals as
a result of the ﬁnite difference between quantization levels.
Raible’s tabular method A tabular method for determining the stability of digital systems
that parallels the Routh-Hurwitz method for analog signals.
Rate gyro A device that responds to an angular position input with an output voltage
proportional to angular velocity.
886
Glossary

Residue The constants in the numerators of the terms in a partial-fraction expansion.
Rise time, Tr The time required for the step response to go from 0.1 of the ﬁnal value to 0.9
of the ﬁnal value.
Root locus The locus of closed-loop poles as a system parameter is varied. Typically, the
parameter is gain. The locus is obtained from the open-loop poles and zeros.
Routh-Hurwitz criterion A method for determining how many roots of a polynomial in s
are in the right half of the s-plane, the left half of the s-plane, and on the imaginary axis.
Except in some special cases, the Routh-Hurwitz criterion does not yield the coordinates of
the roots.
Sensitivity The fractional change in a system characteristic for a fractional change in a
system parameter.
Settling time, Ts The amount of time required for the step response to reach and stay within
2% of the steady-state value. Strictly speaking, this is the deﬁnition of the 2% settling time.
Other percentages, for example 5%, also can be used. This book uses the 2% settling time.
Signal-ﬂow graph A representation of the interconnection of subsystems that form a
system. It consists of nodes representing signals and lines representing subsystems.
Similarity transformation A transformation from one state-space representation to another
state-space representation. Although the state variables are different, each representation is a
valid description of the same system and the relationship between the input and the output.
Stability That characteristic of a system deﬁned by a natural response that decays to zero as
time approaches inﬁnity.
Stall torque The torque produced at the armature when a motor’s speed is reduced to zero
under a condition of constant input voltage.
State equations A set of n simultaneous, ﬁrst-order differential equations with n variables,
where the n variables to be solved are the state variables.
State space The n-dimensional space whose axes are the state variables.
State-space representation A mathematical model for a systemthatconsists of simultaneous,
ﬁrst-order differential equations and an output equation.
State-transition matrix The matrix that performs a transformation on x(0), taking x from
the initial state, x(0), to the state x(t) at any time, t  0.
State variables The smallest set of linearly independent system variables such that the
values of the members of the set at time t0 along with known forcing functions completely
determine the value of all system variables for all t  t0.
State vector A vector whose elements are the state variables.
Static error constants The collection of position constant, velocity constant, and acceleration
constant.
Steady-state error The difference between the input and the output of a system after the
natural response has decayed to zero.
Steady-state response See forced response.
Subsystem A system that is a portion of a larger system.
Summing junction A block diagram symbol that shows the algebraic summation of two or
more signals.
Glossary
887

System type The number of pure integrations in the forward path of a unity feedback
system.
System variables Any variable that responds to an input or initial conditions in a system.
Tachometer A voltage generator that yields a voltage output proportional to rotational
input speed.
Time constant The time for eat to decay to 37% of its original value at t  0.
Time-domain representation See state-space representation.
Torque-speed curve The plot that relates a motor’s torque to its speed at a constant input
voltage.
Transducer A device that converts a signal from one form to another, for example from a
mechanical displacement to an electrical voltage.
Transfer function The ratio of the Laplace transform of the output of a system to the
Laplace transform of the input.
Transient response That part of the response curve due to the system and the way the
system acquires or dissipates energy. In stable systems it is the part of the response plot prior
to the steady-state response.
Tustin transformation A bilinear transformation that converts transfer functions from
continuous to sampled and vice versa. The important characteristic of the Tustin transformation
is that both transfer functions yield the same output response at the sampling instants.
Type See system type.
Undamped response The step response of a second-order system that is characterized by a
pure oscillation.
Underdamped response The step response of a second-order system that is characterized
by overshoot.
Velocity constant lim
s®0 sGs
z-transformation A transformation related to the Laplace transformation that is used for the
representation, analysis, and design of sampled signals and systems.
Zero-input response That part of the response that depends upon only the initial state
vector and not the input.
Zero-order sample-and-hold (z.o.h.) A device that yields a staircase approximation to the
analog signal.
Zeros (1) Those values of the Laplace transform variable, s, that cause the transfer function
to become zero; and (2) any roots of factors of the numerator that are common to the
characteristic equation in the denominator of the transfer function.
Zero-state response That part of the response that depends upon only the input and not the
initial state vector.
888
Glossary

Answers to Selected
Problems
Chapter 1
20. c. xt  2
5  e4t
2
5 cos 3t  8
15 sin 3t


21. b. xt  et  9tet  5e2t  t  2
Chapter 2
4. b. xt  15
26 e2t  3
10 e4t  18
65 cos 3t  1
65 sin 3t
8. Ys
Xs  s3  4s2  6s  8
s3  3s2  5s  1
9. c. d3x
dt3  11 d2x
dt2  12 dx
dt  18x  df
dt  3f t
17. a. Vos
Vis 
1
s  2
19. b. Vos
Vis 
s2  2s  2
s4  2s3  3s2  3s  2
36. θ2s
Ts 
3
20s2  13s  4
37. θ2 s 
T s  
0:011
s  0:29

 s  2:26


46. θ2 s 
Ea s  
0:08
s s  0:8


889

Chapter 3
1.
di2
dt
di4
dt
dvo
dt
2
6666664
3
7777775

 2
5
 1
10
1
10
 1
5
 4
5
4
5
 2
5
 8
5  2
5
2
6666664
3
7777775
i2
i4
vo
2
64
3
75 
2
5
1
5
2
5
2
6666664
3
7777775
vo
y  vo   0
0
1 
i2
i4
vo
2
664
3
775
Note: L1 is left-most inductor in Figure P3.1 in the text.
11. a.
_x 
0
1
0
0
0
0
1
0
0
0
0
1
13
5
1
5
2
66664
3
77775
x 
0
0
0
1
2
66664
3
77775
rt
ct   10
8
0
0  x
14. a. Ys
Rs 
10
s3  5s2  2s  3
18. _x 
 Deq
Jeq
0
Kt
Jeq
N1
N2
1
0
0
 Kb
La
N2
N1
0
 Ra
La
2
66664
3
77775
ωL
θL
ia
2
4
3
5 
0
01
La
2
64
3
75ea
y 
0
N2
N1
0


ωL
θL
ia
2
4
3
5
Chapter 4
14. x t   1
6  1
6 e0:5t
cos
ﬃﬃﬃﬃﬃ
11
p
2
t 
1ﬃﬃﬃﬃﬃ
11
p
sin
ﬃﬃﬃﬃﬃ
11
p
2
t
 
!
 1
6 1  1:091e0:5tcos
ﬃﬃﬃﬃﬃ
11
p
2
t  16:78o
 
!
"
#
:
20. a. ζ  0:375; ωn  4 rad/s; Ts  2:67 s; Tp  0:847 s; %OS  28:06
23. a. s  6:67  j9:88
38. s  1:5  j3:428
39. a. s3  8s2  11s  8  0
b. s  9:11; 0:534; 1:64
43. yt  2
5  2
5 e5t
890
Answers to Selected Problems

46. Φt 
"
1:0455e0:20871t  0:045545e4:7913t
0:21822e0:20871t  0:21822e4:7913t
0:21822e0:20871t  0:21822e4:7913t
0:045545e0:20871t  1:0455e4:7913t
#
xt 
1:0455e0:20871t  0:045545e4:7913t
0:21822e0:20871t  0:21822e4:7913t


yt  0:60911e0:20871t  0:39089e4:7913t
77. D  0:143 N-m-s/rad
80. R  912 Ω
Chapter 5
2. Cs
Rs  G3G1G2  1
1  G1H1
4. Cs
Rs 
G1G2  G3
1  G3H  G1G2H  G2G4
6. Cs
Rs 
G1G5
1  G1G2  G1G3G4G5  G1G3G5G6G7  G1G5G8
9. Cs
Rs 
G4G6  G2G5G6  G3G5G6
1  G6  G1G2  G1G3  G1G2G6
G1G3G6  G4G6G7  G2G5G6G7  G3G5G6G7
26. Cs
Rs 
G1G2G3G4
2  G2G3G4  2G3G4  2G4
27. Cs
Rs 
G1G6G7G2  G3G4  G5
1  G6G7H3G2  G3G4  G5  G6H1  G7H2  G6G7H1H2
28. Cs
Rs 
s3  1
2s4  s2  2s
30. c.
_x 
2
1
0
0
0
2
0
0
0
0
5
0
0
0
0
6
2
66664
3
77775
x 
0
1
1
1
2
66664
3
77775
r
y 
1
6
 1
72
 1
9
1
8


x
37.
_x 
0
1
0
0
2
0
1
0
0
0
0
1
5
1
0
0
2
66664
3
77775
x 
0
0
0
1
2
66664
3
77775
r
y  c   5
1
0
0  x
65. DL  3560 N-m-s/rad
Answers to Selected Problems
891

Chapter 6
1. 2 rhp, 3 lhp, 0 jω
3. 3 rhp, 2 lhp, 0 jω
4. 1 rhp, 0 lhp, 4 jω
5. 0 rhp, 2 lhp, 2 jω
9. Unstable
17. 1 rhp, 2 lhp, 4 jω
23. K > 3
4 ; K < 1
39. a. 4 < K < 20:41;
b. 1:36 rad/s
41. a. 0 < K < 22:22;
b. K  22:22;
c. s   j1:1547; 6:393; 2:607
42.  2
3 < K < 0
Chapter 7
4. estep∞  0;
eramp∞  93:33;
eparabola∞  ∞
7. _e∞  0:9
10. a. %OS  14:01;
b. Ts  0:107 sec;
c. estep∞  0;
d. eramp∞  0:075;
e. eparabola∞  ∞
13. a. Kp  1
3; Kν  0; Ka  0;
b. e1  37:5; 1; 1; respectively;
c. Type 0
20. K  70000
27. β  1; K  1:16; α  7:76; or β  1; K  5:16; α  1:74
32. a. K  831; 744; a  831:744
36. K1  156:8; Kf  7:44
40. a. Step: e∞  0:1622; ramp: e∞  ∞
Chapter 8
16. Breakaway point  2; asymptotes: σa  13/3; jω-axis crossing   j6:3
19. b. Asymptotes: σa   7
3;
c. K  60:2;
d. K  1:88
20. K  9997; α  7
23. a. σa   5
2;
b. s  1:38;  3:62;
c. 0 < K < 126;
d. K  10:3
26. b. K  9:4;
c. Ts  4:62 s; Tp  1:86 s;
d. s  4:27;
e. 0 < K < 60
30. α  4
39. a. 0 < K < 4;
b. K  1090;
c. K  690
42. a. K  170:1;
b. K  16:95
Chapter 9
1. Gcs  s  0:7
s
; K ' 13:8 for both cases; KpO  1:38; KpN  ∞;
%OSO  %OSN  9:48; TsO  TsN  4:36 s
892
Answers to Selected Problems

9. a. s  3:33  j5:519;
b. Angle  73:309°;
c. s  4:985
d. K  187;
e. s  1:66; 11:7
10. a. s  2:4  j4:16;
b. s  6:06;
c. K  29:12;
d. s  1:263;
f. Ka  4:8
14. a. Gcs 
s  7
s  37:42 ; K  5452; dominant poles  4:13  j10:78
24. a. Kuc  10; Kc  9:95;
b. Kpuc  1:25; Kpc  6:22;
c. %OSuc  %OSc  4:32;
d. Uncompensated: exact second-order system, approximation OK;
compensated: closed-loop pole at 0:3, closed-loop zero at 0:5, simulate
e. Approach to ﬁnal value longer than settling time of uncompensated system
f. GLLCs 
404:1s  0:5s  4
s  2s  4s  0:1s  28:36 yields approximately a 5 times
improvement in speed.
25. Gcs  s  7:71s  0:1
s
; K  1:683
29. Poles  0:758 j1:48; 2:54; zeros—none
Chapter 10
10. System 1: 0 < K < 490:2; System 2: 0 < K < 1:4; System 3: 1 < K < ∞
(Answers are from exact frequency response)
11. a. System 1: GM  6:38 dB; ΦM  20:3°
(Answers are from exact frequency response)
15. c. ωBW  2:29 rad/s
23. System 2: Ts  2:23 sec, Tp  0:476 s, %OS  42:62
(Answers are from exact frequency response)
40. GM  6:59 dB, ΦM  46:9° (Answers are from exact frequency response)
Chapter 11
1. a. K  2113 (Answer is from exact frequency response)
2. a. K  2365 (Answer is from exact frequency response)
3. a. K  575 (Answer is from exact frequency response)
12. Gc s   4:611s  1:8
s  8:3
; K  2000
(Answer is from exact frequency response)
21. Gcs  s  0:092s  2:392
s
; K  27:01
(Answer is from exact frequency response)
Chapter 12
1. d. For function i: Ts 
s  3
s2  k2  8s  k1  16
Answers to Selected Problems
893

3. b. For function i: Gs  6:25
s
 27:5
s  10  71:25
s  20 ; Ts  200s2  7s  25
4s3  as2  bs  c
where
a  25k3  110k2  285k1  120
b  750k3  2200k2  2850k1  800
c  5000k3
and C   1
1
1 ;
B   71:25
27:5
6:25 T was used
11. a. Uncontrollable;
b. Controllable;
c. Controllable
14. K   92:35
36:78
7  for a characteristic polynomial of
s  6s2  8s  45:78  s3  14s2  93:78s  274:7
23. L   671:19
1472:4 T for a characteristic polynomial of s2  144s  14; 400
Chapter 13
3. a. f kT  229:50:4k  5040:6k  275:50:8k
6. c. Gz  0:395
z  0:2231
z  0:2231z2  0:1857z  0:04979
8. b. Gz  0:0517
z2  2:2699z  0:2995
z  1z  0:2231z  0:4065
9. a. Tz 
G1zG2z
1  G1zG2Hz
14. 0 < K < 15:76
15. a. Kp  1
2 ; e∞  2
3 ; Kν  0; e∞  ∞; Ka  0; e∞  ∞
17. K  18:42 for 15% of overshoot; 0 < K < 134:76 for stability
894
Answers to Selected Problems

Index
A
Abscissa of convergence, 35n
Absorption, 143–145
Acceleration constant, 345, 584
Ac/dc conversion and power distribution system, 517
Ackerman’s formula, 662n
Active-circuit realization, of compensation, 495–497
Active front steering, 644
Active queue management (AQM) algorithm, 376
Active suspension system, 286–287, 373
Actuating signal, 8
Actuator block diagram, 286
A/D, See Analog-to-digital converter
Adenosine triphosphate (ATP) level, 374
Admittance, 53
AGC, See Automatic generation control
Agee, J. T., 104, 112, 151, 155
Aggarwal, J. K., 112
Agricultural delivery booms, 644–645
Ahmad, R. K. R., 648
AIDS, See HIV/AIDS
Aircraft:
attitude of, 23
hypersonic ﬂight testing, 517
STOL ﬁghter aircraft, 327
Akesson, M., 113
Alertness monitoring, 24
α-subsystem, of grid-connected converter, 517, 607, 761
Alternative Drivetrains, 28n, 30
Alvarez, T., 650n, 699n, 704
Alvin, 271
Ampliﬁers:
operational, 57–61, 188–189
power, 93, 141
preampliﬁers, 93
transfer functions and, 93
Ampliﬁer saturation, 87
load angular velocity response and, 192
simulation with LabVIEW program, 868–869
Amplitudes, 160
Anagnost, J. J., 334
Analogs:
explanation of, 83
parallel, 85–86
series, 83–85
Analog system, disk drive, 758–759
Analog-to-digital control conversion, 710–711
antenna azimuth for, 708
steps to, 711
Analog-to-digital (A/D) converter, 709, 710
Analysis. See also Control systems analysis
deﬁnition of, 9
feedback ampliﬁer, 5
mesh, 48–53
nodal, 50, 53–55
open-loop/closed-loop sinusoidal frequency, 862–865
qualitative design and, 158
sensitivity, 18
sinusoidal frequency, 5
via input substitution, 360–362
Analytical expressions for frequency response,
528–529
Anderson, C. G., 433, 434n, 447
Anderson, S., 28, 30
Anesthesia regulation, 23
Angles of departure and arrival:
from complex pole, 401–402
in root locus sketching, 400–402
Angular displacement:
load, 193, 194
in lossless gears, 74
torque-, 69
895

Angular velocity, 81
load angular velocity response, 192
torque-, 69
Ansermino, J. M., 447
Antenna azimuth, 11–14, 25
analog- to-digital control conversion for, 708
block diagram for, 17
position control system, 203, 285, 691–692
Antenna control system, 11–14
cascade compensation and, 638–640
closed-loop response design for, 272–275
controller/observer design and, 688–693
digital cascade compensator design and, 751–753
gain design and, 638
lag-lead compensation and, 500–503
open-loop response and, 202–205
root locus for, 417–419
stability design/transient performance and, 595–596
stability design via gain for, 321–323
state-space representation and, 141–143
steady-state errors and, 362–363
transfer functions for, 92–94
transient design via gain and, 417–419, 749–751
Anthonis, J., 448
AQM algorithm, See Active queue management algorithm
Aquifers, 144–145
Aquifer system model, 144
Aranda, J., 25n, 31
Armature, 78–79
Armature circuit, 15, 78–79
Armature resistance, 80
Armature voltage, 78–79, 81
Arndt, D., 25, 30
Arrival angle, See Angles of departure and arrival
Arterial blood pressure, 217, 437
Artiﬁcial heart, open-loop transfer function, 217
Artiﬁcial pacemakers, 760
Ashkenas, I., 232
Asparagus-picking robots, 212
Assembly-line robots, steady-state errors and, 349
Åström, K., 290, 296, 430, 447, 605, 610,
743, 764
Asymptotes:
approximations of, 531–550
break frequency, 533
high-frequency, 533
low-frequency, 533
root locus sketching with, 393–395
ATP level, See Adenosine triphosphate level
Attitude, aircraft, 23
Automatic ﬁeld current regulator, 436–437
Automatic generation control (AGC), 515
Automatic Voltage Regulator, 212, 290, 330
B
Back electromotive force, 79
Backlash:
on load angular displacement response, 193, 194
as nonlinearilty, 87
in systems of gears, 73
Bahill, A. T., 30
Baker, M. W., 447
Ballard, R. D., 271, 296, 333
Ball-drop experiment, 150
Bandwidth, 571
Baratta, R. V., 233
Barbé, L., 288n, 297
Barkana, I., 371, 379, 644, 647
Bauer, P., 153n, 156, 297, 334, 380, 448, 524, 611, 648,
704, 765
Bayle, B., 288n, 297
Bechhoefer, J., 24, 30
Behavior at inﬁnity, root locus sketching and, 392–395
Bell Telephone Laboratories, 5
Bennett, S., 4n, 30
Berenguel, M., 112, 155, 232, 296, 333, 379, 447, 523,
610, 647, 704, 764
Bersak, D. R., 334
Bessemer, Henry, 5
Bhambhani, V., 606, 610
Bhandari, M., 701n, 704
Bhattacharyya, S. P., 610, 648
BIBO, See Bounded-input bounded-output
Bicycle:
dynamics, 289–290
self-balancing, 607
steer and roll angle of, 605
steering and tilt angle of, 430
Bilinear transformations, in digital control systems,
730–731
Binu, L. S., 524
Biological system, 94–95
Bittanti, S., 516, 523, 605, 610, 759, 764
Block diagram(s), 16–17
converting signal-ﬂow graphs to, 249–250
functional, 12, 13, 15
of multiple subsystems, 236–245
of open-/closed-loop systems, 7
of phase variables, 132
of summing junctions, 241
of transfer functions, 45
Block diagram reduction, 17
digital control systems and, 723–726
by moving blocks, 242–244
of sampled-data systems, 724–725
via familiar forms, 242–243
Block libraries, in MATLAB Simulink program, 822–823
896
Index

Blocks, in MATLAB Simulink program, 821
Blood pressure, arterial, 217, 437
Bobrow, J. E., 30
Bode, H. W., 5, 30, 610
Bode plots:
of (s+a), 533
approximations for, 531–532
determining stability via, 566–568
evaluating gain/phase margins via, 568–570
for G(s) = (s+a), 532–535
for G(s) = 1/s, 537
for G(s) = 1/(s2 + 2ζωns + ωn
2), 543–547
for G(s) = 1/(s+a), 536
for gain adjustment, 615–616
gain margin/phase margin from, 569
for G(s) = s, 536–537
for G(s) = s2 + 2ζωns + ωn
2, 540–541
for lead compensation, 627
range of gain for stability via, 567–568
for ratio of ﬁrst-order factors, 537–540, 547–550
for ratio of second-order factors, 541–543, 547–550
static error constants from, 585–586
transfer function from, 591–594
Bokor, J., 153n, 156, 297, 334, 380, 448, 524, 611, 648,
704, 765
Bona, B. E., 156, 233, 297, 334, 705
Bondia, J., 156, 704
Boost converter, 291
Borovic, B., 216, 231
Bosch, R., 28, 30, 106, 112
Bottom-up design, 21
Bounded input, 300
Bounded-input bounded-output (BIBO), 300–301
Boyd, M., 764
Branches:
root locus sketching and, 391
of signal-ﬂow graphs, 248–249
Breakaway points:
explanation of, 395–397, 404
using differential calculus to ﬁnd, 397–398
without differentiation, 398–399
Break frequency, 533
Break frequency asymptotes, 533
Break-in points:
explanation of, 395–397, 404
using differential calculus to ﬁnd, 397–398
without differentiation, 398–399
Breazeal, C., 30
Bretholtz, Ø., 31
Budak, A., 523
Butler, H., 290, 291n, 296
Butterworth polynomial, 328
Buzi, G., 379
C
Cai, Y., 379, 447, 611
Camacho, E. F., 29, 30, 107, 112, 153, 155, 222, 232, 294,
332, 333, 377, 379, 438, 447, 519, 523, 608, 610, 646,
647, 702, 704, 764
Campbell, T. J., 434n, 447
Cancellation, pole-zero, 190–191
Cannon, R. H., Jr., 30, 47, 112
Canonical form:
controller, 260–261, 265
Jordan, 260
observer, 261–265, 671–673
transformations to, 260–265
Capacitors, 127
Cárdenas, M. O., 704
Cardona, J. E., 701, 704
Carlson, L. E., 112, 155
Cascade compensation:
antenna control and, 638–640
in digital control systems, 743
steady-state error design via, 614
steady-state errors via, 453–462
transient response design via, 614
transient response improvement via, 462–474
via s-plane, 742–746
Cascade compensators, 486, 744–745, 751–753
Cascaded interconnections, 34
Cascaded subsystems, 237–239, 264
Cascaded systems, load in, 238
Cascade form:
of multiple subsystems, 237–239
of state space, 256–258, 265
Cascade PI controller, robotic manipulator with, 433
Catheter, deﬂection response, 216
Cereijo, M. R., 155
Chan, W. L., 334
Chandra, F. A., 374, 379
Chaos, D., 25n, 31
Characterizing response, from damping ratio, 172
Chassaing, R., 747n, 764
Chebyshev, P. L., 5
Chemical process control system, 329
Chen, J. M., 288n, 297
Chen, N., 374n, 380
Chen, S.-Y., 291, 296
Chen, Y. D., 233
Chen, Yq., 610
Chignola, R., 104, 112
Chiu, D. K., 149, 155
Circuits:
armature, 15, 78–79
complex, 51–55
integrated, 290–291
Index
897

Circuits: (Continued )
inverting operational ampliﬁer, 58–59
nonminimum-phase electric, 188
simple, 50, 51
solenoid coil, 285–286
transformed, 49
Classical technique, 116. See also Frequency-domain
modeling
Cleveland, J. P., 233
Clifford, William Kingdon, 5
Closed-loop feedback, in ventilators, 432
Closed-loop frequency responses:
closed-loop transient responses and, 570–573
relation between open-loop and, 573–578
Closed-loop polar plot, 576n
Closed-loop poles, 301–303, 382–383, 386, 407, 410,
416, 455
Closed-loop response design, for antenna control, 272–275
Closed-loop sinusoidal frequency analysis and design, with
LabVIEW program, 862–865
Closed-loop step response, with LabVIEW program,
860–861
Closed-loop system, 8, 158
block diagram of, 7
error, 337–338
for ideal integral compensator, 455
root sensitivity of, 416–417
Closed-loop transfer function, sensitivity of, 357
Closed-loop transient responses:
closed-loop frequency responses and, 570–573
open-loop frequency responses and, 578–582
Closed-loop vehicle response, for train stopping, 431
CMM, See Coordinate measuring machine
Cochin, I., 112, 155
Coefﬁcient(s):
matching, 661–662, 677, 681–683
reverse, 307
of viscous friction, 61, 69
Companion matrices, 262
Compensated system:
of ideal derivative compensation, 466–467
root locus for, 456
Compensating zero, via rate feedback, 489–491
Compensation. See also speciﬁc types
active-circuit realization of, 495–497
physical realization of, 495–499
for systems, 8
techniques, 452
Compensators, 8, 452–453. See also speciﬁc types
passive realization of, 498
root locus with, 454
root locus without, 454
Completely controllable, 659n
Completely observable, 675n
Complex circuits:
via mesh analysis, 51–53
via nodal analysis, 53–55
Complex numbers, vector representation of, 383–385
Complex pole, angle of departure/arrival from, 401–402
Component design, transient response through, 180–181
Component responses, of three-pole system, 183–184
Computer-aided design, 19–20
Computer-controlled systems, 8
Computer hard disk drive, 9, 433, 644
Computers, See Digital computers
Computer simulation, of step responses, 420
Conductance, 54n
Conservation, ﬂow for, 145
Constant-acceleration inputs, 337
Constant command, 17
Constant M circles, 573–574, 576
Constant N circles, 573–576
Constant-velocity inputs, 336
Continuous casting, in steel production, 289
Continuous stirred tank reactor, 699, 700
Contours, 551–554
Control design palette, in LabVIEW program, 872–874
Controllability, 658–661
by inspection, 658–659
via controllability matrix, 659–660
Controllability matrix, 659–661
Controllable systems, 658
Controlled variable, 7, 34
Controller canonical form, of state space, 260–261, 265
Controller design, 651–658
alternative approaches to, 661–667
antenna control and, 688–693
by matching coefﬁcients, 661–662
for phase-variable form, 655–657
by transformation, 662–666
Controllers. See also Proportional-plus-integral-plus-
derivative (PID) controllers
cascade PI, 433
master, 329
open-loop swivel, 376
in open-loop systems, 7
proportional-plus-derivative, 463
proportional-plus-integral, 453, 457
slave, 329
Control system problem, for root locus, 382–383
Control systems. See also Feedback control systems;
speciﬁc control systems
advantages, 2–4
analysis of, 9–14, 17–18
components, 2
computer-aided design of, 19–20
898
Index

conﬁgurations of, 6–8
deﬁnition of, 2
derivative, 453
design objectives for, 9–14
design process, 14–18
digital computers in, 6
engineering, 20–21
history of, 4–6
integral, 453
prevalence of, 21
proportional, 453
schematic for, 15
test waveforms, 18
theory, 5
twentieth-century developments, 5
Control systems analysis:
in design process, 17–18
with LabVIEW program, 850–851
linear, 5
objectives of, 9–14
Control System Toolbox, 439, 519, 520, 609
Convolution integral, 198
Cook, P. A., 112
Coordinate measuring machine (CMM), 516
Corke, P. I., 523
Coulomb friction, 65n
Cowan, N. J. A., 611
Craig, I. K., 27, 30, 105, 113, 152, 155, 222, 232, 293,
331, 333, 376, 379, 447, 518, 523, 608, 610, 645,
647, 702, 704, 761, 764
Craig, J. J., 447, 523, 764
Cramer’s rule, 52
Crane loading, 103
Crawshaw, L. I., 30
Critically damped response, 167, 168
Critical points, root locus sketching and, 405–406
Crosslapper, 218
Cruise control systems, 606
CT scans, 288
Cubitt, William, 4
Cutaneous rabbit, 24–25
D
Da, R. E., 334
D/A converter, See Digital-to-analog converter
D’Ambrosia, R. D., 233
Damped frequency of oscillation, 178
Damper, mass and, 123
Damping, 79
Damping frequency, exponential, 178
Damping ratio:
characterizing response from, 172
deﬁnition of, 170
natural frequency and, 203–204
from phase margin, 579–580
second-order response as function of, 171
of second-order system, 169–172
second-order underdamped responses for, 174
v. percent overshoot, 176
v. rise time, 177
Das, A., 764
Datta, A., 610, 648
Davidson, C. M., 437, 447
Davis, S. A., 113
D’Azzo, J. J., 30, 333, 340n, 379, 523, 647, 704
DBS, See Deep Brain Stimulation
Dc-dc converter, 219, 699–700
Dc motors, 78
driving rotational mechanical load, 80
load and, 81–82
Dc servomotor, load and, 148
Deadbeat control, 759–760
Dead zone, 87, 193
de Araújo, F. M. U., 447, 610
Deblander, J., 448
Decay frequency, exponential, 169–170
Decoupled equations, 260, 268
Decoupled variables, 123
Deep Brain Stimulation (DBS), 437
Deﬂection response, of ﬂuid-ﬁlled catheter, 216
Degrees of freedom, 64
in rotational systems, 69
de Keyser, R., 232, 289n, 297
Delivery booms, agricultural, 644–645
Dell’Orto, F., 523, 610, 764
de Mathelin, M, 288n, 297
Deng, H., 31
de Paor, A. M., 447
Departure angle, See Angles of departure and arrival
Dependent source, electrical network with, 125–127
Derivative compensation, See Ideal derivative
compensation
Derivative control systems, 453
Design. See also Frequency response design methods; Root
locus design methods; State-space design methods
computer-aided, 19–20
deﬁnition of, 9
with LabVIEW program, 850–851
objectives, 9–14
theory, 5
Design process:
ﬂowchart of, 14
steps of, 14–18
Desired transient response, 9
Desoer, C. A., 334
Destination shaft, 75
Index
899

de Vlugt, E., 288, 296
Diagonalizing:
system in state space, 269–270
system matrix, 267
Diaz, J. M., 25n, 31
DiBona, G. F., 217, 232
Di Carlo, A., 523, 610, 764
Dickinson, M. H., 611
Differential calculus, 397–398
Differential equation(s):
coefﬁcients, 5
fractional calculus, 218
Laplace transform solution of, 39
linearization of, 89–90
linear time-invariant, 16
nth-order, 16, 117
single loop via, 48
transfer function for, 45
Digital cascade compensator design, 744–745
antenna control and, 751–753
Digital compensator, implementing, 746–749
Digital computers:
advantages, 709–710
in control systems, 6
modeling, 711–714
placement within loop, 709
Digital control systems:
advantages of digital computers, 709–710
analog-to-digital conversion, 710–711
antenna control with, 749–753
background, 708–709
bilinear transformations in, 730–731
block diagram reduction and, 723–726
cascade compensation in, 743
cascade compensation via s-plane and, 742–746
digital system stability in, 726–733
digital-to-analog conversion, 710
gain design on z-plane and, 739–742
implementing digital compensators, 746–749
with MATLAB program, 809–814
with MATLAB Simulink program, 833–835
modeling digital computers, 711–714
stability design via root locus in, 739–740
steady-state errors and, 733–737
transfer functions of, 719–723
transient response design via gain adjustment and, 740–741
transient response on z-plane, 737–739
z-transform and, 714–719
Digital feedback control system:
steady-state errors for, 734
unit parabolic input for, 735
unit ramp input for, 735
unit step input for, 734–735
Digital numerical control, lathe with, 726
Digital system simulation, with LabVIEW program,
871–874
Digital system stability:
digital control systems in, 726–733
via Routh-Hurwitz, 732
via s-plane, 731–733
via z-plane, 726–730
Digital-to-analog conversion, 710
Digital-to-analog (D/A) converter, 709, 710
Digital versatile disc (DVD) players, 515–516, 605, 759
Dirac delta functions, 713
Disk drive, 9
analog system of, 758–759
arm, 433, 644
Displacement. See also Angular displacement
force-, 62
mechanical, 61–62
read/write head, 328
Distributed parameter, 70n
Disturbances:
deﬁnition of, 7
steady-state errors for, 351–353
Doebelin, E. O., 30, 113
Dollar, A. M., 334
Dominant-pole argument, 217
Dong, F., 212, 232
Dorf, R. C., 30, 113, 188, 232, 333, 447, 523, 610, 648
Doyle, J. C., 379
Drebbel, Cornelis, 4
Drive system, with elastically coupled load, 290, 331, 701
Driving simulator, 630
Drug absorption, 143–145
D’Souza, A. F., 23, 30, 113
Duals, 262–263
Dubowsky, S., 30
Dumont, G. A., 447
DVD players, See Digital versatile disc players
DVR, See Dynamic voltage restorer
Dynamic control systems, 9
Dynamic subsystems, 141
Dynamic voltage restorer (DVR), 372, 431
Dynamometer, 23, 80–81
E
Economics, as design consideration, 10
Economic system dynamics, 330–331
ECU, See Electronic control unit
Edelson, J., 28, 30
Edelstein-Keshet, L., 103, 104, 113
Eigenvalues, 268
poles and, 195–198
transfer function poles and, 195–198
900
Index

Eigenvector, 267–269
Ekeberg, Ö., 155
Elaraﬁ, M. G. M. K., 218, 232
Electrical constants, of motor transfer function, 81
Electrical network(s):
branch currents in, 124
with dependent source, 125–127
representation of, 124–125
state-space representations of, 116–120
transfer function, 47–61
Electrical to mechanical systems analogies, 61–62
Electric circuit analogs, 83–86
Electric vehicle, mechanical brake response of, 219–220
Electric ventricular assist device (EVAD), 287,
643–644, 759
Electromechanical system transfer functions, 77–83
Electronic control unit (ECU), 28
Elevators, 2, 3
Elevator surface angle, 206
Elkins, J. A., 113, 155
El-Samad, H., 447
Elsley, G., 297, 333
Emami-Naeini, A., 30, 113, 156, 232, 610, 704
Energy storage elements, 123
Enzyme breakdown, 102–103
Eppinger, S. D., 156, 232, 297, 334
Epsilon method, stability via, 306
Equations of motion, See Motion equations
Equilibrium, 87
Errors, 8. See also Steady-state errors
quantization, 710
ramp response, 483
static error constants, 345–347, 458, 585–586
Estimator, 667
EVAD, See Electric ventricular assist device
Evans, W. R., 5, 382, 447
Existing transient response, 9
Exponential damping frequency, 178
Exponential decay frequency, 169–170
Exponential frequency, 163
Exponential response, 160
Exponential time constant, 169–170
External hardware, with LabVIEW program, 875–878
F
Factoring, via Routh-Hurwitz, 317
Fagergren, A., 150, 155
Fahlén, P., 524, 611
FANUC M-410iB robot, 321
Feedback ampliﬁer analysis, 5
Feedback compensation, 487–495
approach 1, 488–491
approach 2, 492–495
generic control system, 487
minor-loop, 492–494
in UFSS, 503–504
Feedback control systems, 8, 240–241. See also Control
systems; speciﬁc control systems
analysis/design of, 245–248
for ideal derivative compensation, 466
with MATLAB Simulink program, 832–833
simulation with LabVIEW program, 870–871
state-space representations of, 263–264
Feedback form, of multiple subsystems, 240–241
Feedback path, 8
Fenn’s law, 287
Fertilizer applicator, 435
Final value theorem, steady-state errors using, 359–360
Finances, of control systems, 10
First-order systems, 162–164
poles of, 159–161
unit step and, 162
zeros of, 159–161
First-order transfer functions via testing, 163–164
Fixed ﬁeld, 78
Fixed structure controllers, SISO system, 607–608, 645
Flexible links, 700–701
Flight dynamics, fruit ﬂy, 607
Floor vibration eliminator, 435
Flower, T. L., 648
Flow for conservation, 145
Fluid-ﬁlled catheter, deﬂection response, 216
Flyball speed governor, 4
Force-displacement, 62
Forced response, 10, 158, 160
Force-velocity, 62
Foroni, R. I., 112
Forssberg, H., 155
Forward-path gain, 251
Forward transfer function, See Open-loop transfer function
Four-wheel drive vehicle, steering model for, 374
Fractional calculus differential equations, 218
Frankle, J. T., 30
Franklin, G. F., 30, 113, 156, 191, 232, 447, 610, 662n, 704
Free-body diagram, 63
Free viruses, 105
Frequency:
break, 533
damped frequency of oscillation, 178
exponential, 163, 169–170
exponential damping, 178
and gain at imaginary-axis crossing, 399–400
natural, 169, 171, 203–204
Frequency-domain modeling:
antenna control system, 92–94
electrical networks, 47–61
Index
901

Frequency-domain modeling: (Continued )
electric circuit analogs, 83–86
electromechanical systems, 77–83
human leg, 94–95
Laplace transforms for, 35–44
with linearization, 87–92
with MATLAB program, 772–776
nonlinearities in, 86–87
representations of systems, 34–35
rotational mechanical systems, 69–73
for systems with gears, 73–77
transfer functions, 44–47
translational mechanical systems, 61–68
v. time-domain modeling, 116
Frequency response:
analytical expressions for, 528–529
for antenna control, 595–596
asymptotic approximations of, 531–550
background on, 526–527
Bode plots of, 531–550
closed-loop, 570–578
closed-loop transient response and, 570–573, 578–582
concept of, 527–528
gain and phase margin via Nyquist diagram, 564–566
lead compensator, 624–625
with MATLAB program, 796–801
Nyquist criterion, 550–555
open-loop, 573–582
plotting, 529–531
sinusoidal, 527
sketching Nyquist diagrams, 555–560
stability, gain margin, and phase margin via Bode plots,
566–570
stability via Nyquist diagram, 560–564
steady-state errors from, 582–586
systems with time delay, 586–590
from transfer function, 530
transfer functions from, 591–594
Frequency response design methods:
antenna control and, 638–640
lag compensation and, 618–623
lag-lead compensation and, 629–637
lead compensation and, 623–629
with MATLAB program, 801–805
overview of, 614–615
root locus and, 614
transient response via gain adjustment and, 615–618
Frequency response plots, 529. See also Bode plots
of time delay systems, 587–588
Friction, 65n
Friedman’s model, 330, 331
Fruit ﬂy ﬂight dynamics, 607
Fu, Z., 760, 764
Fuchs, F. W., 220n, 233, 334, 448, 524, 611, 705
Fuel-cell power plants, 6
Function(s). See also Transfer function(s)
Dirac delta, 713
linearizing, 88
time, 35–36, 715–716
Functional block diagrams, 12, 13
drawing of, 15
G
G(s), steady-state error as, 340–344
Gaiceanu, M., 113
Gain, 3. See also Range of gain for stability
forward-path, 251
at imaginary-axis crossing, 399–400
loop, 241, 251–252
pitch, 322
stability design via, 321–323
steady-state error design via, 363–365
unity, 8
Gain-adjusted antenna control system, step
responses of, 418
Gain adjustment:
bode plots for, 615–616
stability and, 614
transient response via, 615–618
Gain design:
antenna control and, 638
for meeting steady-state error speciﬁcation, 350
Third-order system, 408–411
for transient response, 247
on z-plane, digital control systems and, 739–742
Gain margin:
from Bode plots, 569
evaluating, 568
via Nyquist diagram, 564–566
Galvão, R. K. H., 430, 447, 604, 610
Gamble, J. B., 31, 297
Gauthier, M., 233
Gear backlash, 87
Gear driven rotational systems, 74–75
Gear systems, 73–77
with loss, 76–77
motion equation for, 75
schematic, 73
Gear train, 76
The General Problem of the Stability of Motion
(Lyapunov), 5
Geselowitz, D. B., 297, 648, 765
Ghosh, R., 764
Gillard, D., 233
Glantz, A. S., 216, 232
Glargine insulin, 699
902
Index

Global carbon cycle, schematic description of, 151
Glycolysis, 374
GNP, See Gross National Product
Godhaven, J., 31
Golbon, N., 523, 764
Gompertz growth model, 104
Gong, P., 764
Gong, W., 379, 610, 648
Good, M. C., 232
Goodwin, G. C., 297, 333
Gozde, H., 212, 232, 290, 297, 330, 333
Graebe, S. F., 289, 297, 332, 333
Graham, D., 232
Grain drying conveyor, 645
Graovac, D., 104, 113, 291
Graphical user interface (GUI), 19, 192
Grid-connected converter, α-subsystem, of, 517,
607, 761
Griggs, G. E., 112, 155
Grinder system, 23
Gross National Product (GNP), 330
GUI, See Graphical user interface
Gupta, H., 152n, 156, 233, 334, 524, 704, 764
Gurkaynak, Y., 25, 26n, 30
Guy, W., 433, 447
H
Hacisalihzade, S. S., 31
Hahn, J. O., 432, 447
Hammel, H. T., 30
Han, F., 764
Han, Y. D., 379, 447
Haptipoĝlu, C., 334
Harbor, R. D., 648
Hard disk drive (HDD) arm, 433, 644
Harmonic drives, robotic manipulator with, 435–436
Hatopoğlu, C., 448
HDD arm, See Hard disk drive arm
Head, 144
Heat-exchanger process, 513
Heat exchange system, 644
Heinemann, W., 232
Hekman, K. A., 329, 333
Heller, H. C., 30
Her, M.-G., 288n, 297
High-frequency asymptotes, 533
High-speed proportional solenoid valve, 24
Hisham, S. B., 232
HIV/AIDS control system problem, 27, 105, 152,
222, 293, 331, 376–377, 438, 518, 608, 645,
702, 761
Hoffmann, N., 220n, 233, 334, 448, 524, 611, 705
Hogan, B. J., 23, 30
Hold:
zero-order, 714
zero-order sample-and-, 710, 714, 721–722
Hollot, C. V., 376, 379, 431, 447, 605, 610, 643, 648
Holographic media storage, 605–606
Home entertainment systems, 6
Homogeneity, 86
Homogeneous solutions, 10, 162n
Hong, J., 149, 156
Hormonal regulation mechanisms, 430
Horn, M., 219n, 233
Hospital pharmacy robot, 650
Hostetter, G. H., 30, 297, 333, 360, 379, 523, 610, 648,
704, 764
Hot tail responses, 217
Houpis, C. H., 30, 333, 340n, 379, 523, 647, 704
Hsu, J. C., 113
Huisman, R., 611
Human growth population, 103
Human leg, transfer function of, 94–95
Human postural dynamics, 103–104
Human pupil servomechanism, 432–433
Human response, to visual cues, 215
Hutchinson, S., 380, 436n, 448
Hybrid solar cell, diesel power distribution system and,
289
Hybrid vehicle control problem, 27–28, 105–106, 152–153,
222, 293–294, 331–332, 377, 438, 518–519, 608, 646,
702, 761–762
Hypersonic ﬂight testing, 517
Hypothalamic-pituitary-adrenal axis, 149–150, 697
I
Iagnemma, K., 30
ICE, See Internal combustion engine
Ideal compensators, 452
Ideal derivative compensation, 463–470
design, 466–469
feedback control system for, 466
predicted characteristics for, 465
root locus for, 466, 468
uncompensated/compensated system, 466–467
Ideal integral compensated system response,
uncompensated system response and, 457
Ideal integral compensator, 453–457
closed-loop system for, 455
effect of, 455–457
implementing, 457
Ideal sampling, zero-order hold and, 714
Identity matrix, 136
Ignatoski, M. A., 297, 648, 765
Iizuka, Y., 448
Imaginary-axis crossing, frequency/gain at, 399–400
Index
903

Impedance(s):
for mechanical components, 63–64
rotational mechanical, 75
summing, 55, 57
Impedance relationships, 47
rotational, 69
translational, 61–62
Implantable medical devices, with in-body batteries,
435
Impulse, 17, 18
In-body batteries, implantable medical devices with,
435
Inductors, 127
Inertia, 15, 69, 80
Inﬁnity, sketching behavior at, 392–395
Inigo, R. M., 156
Initial conditions, 45
Input, 2. See also speciﬁc types
Input potentiometer, 92–93
Input signals:
root locus and, 413
test of, 17
Input substitution:
analysis via, 360–362
steady-state errors using, 361–362
Input transducer, 7
Insect ﬂight dynamics, 219, 607
Inspection, mesh equations via, 56–57
Instability, 10, 300, 301. See also Stability
Insulin, 149, 699
Integral control:
design, 685–687
steady-state error design via, 684–687
systems, 453
Integrated circuits, 290–291
Interconnection of subsystems, block diagram of, 34
Internal combustion engine (ICE), 28
Inverse Laplace transform, 35, 36, 162
Inverse z-transform, 717–719
via partial-fraction expansion, 717–718
via power series method, 718–719
Inverted pendulum cart system, 151–152, 220–221, 328,
511–512, 701, 758
Inverting operational ampliﬁer, 57–58, 286
circuit, 58–59
schematic, 58
Ionescu, C., 218, 232
Ionic polymer-metal composite, 219
Isailović, J., 370, 379
J
Jarvis, A. J., 151n, 156
Jason, 315
Jason Junior, 271
Jenkins, H. E., 23, 30
Jeon, C.-H., 297
Jiang, J., 448, 523, 611, 764
Jiayu, K., 218, 232
Jimoh, A. A., 112, 155
Johansson, R., 103, 113
Johnson, H., 205, 232, 275, 277, 285, 297, 322, 333, 419,
421, 447, 503, 504, 523, 758, 764, 781, 783
Joint ﬂexibility, model representing, 436
jω-axis crossings, root locus sketching and, 399–400
Jordan canonical form, 260
Jury’s stability test, 729
K
Kailath, T., 35, 113, 156, 704
Kandel, A., 145, 156
Kanellakopoulos, I., 286n, 297
Karkoub, M., 288, 297
Karlsson, P., 432n, 442, 447, 517, 523
Kasper, R., 232
Katić, V., 113
Katz, P., 764
Kermurjian, A., 113
Khadraoui, S., 607, 610, 645, 648
Khaligh, A., 26n, 30
Khammash, M., 430, 447
Kharitonov’s theorem, 327, 328
Khodabakhshian, A., 515, 523, 759, 764
Kidney function, arterial blood ﬂow and, 217
Kim, J. H., 610
Kim, J.-W., 648
Kim, S.-H., 605, 610
Kim, Y.-B., 648
Kirchhoff’s current law, 16, 47, 83
Kirchhoff’s nodal equations, See Nodal equations
Kirchhoff’s voltage law, 16
Klaasens, J. B., 233, 705
Klapper, J., 30
Klein, R. E., 296, 447, 610
Knight, B., 233
Ko, S.-H., 297
Kong, F., 289, 297
Koontz, J. W., 297, 648, 765
Krieg, M., 104, 113
Ktesibios’ water clock, 4
Kuo, B. C., 218, 232, 447, 485, 523, 611, 648,
729n, 764
Kuo, C.-F. J., 232, 374, 379
Kuo, F. F., 113, 611
Kurfess, T. R., 30
Kwon, O.-S., 297
Kyrylov, V., 149, 156, 697, 704
904
Index

L
LabVIEW program, 20
ampliﬁer saturation simulation with, 868–869
analysis examples with, 853–865
closed-loop step response with, 860–861
control design palette in, 872–874
controlling external hardware with, 875–878
control systems analysis with, 850–851
design examples with, 853–865
design with, 850–851
digital system simulation with, 871–874
feedback system simulation with, 870–871
linear systems simulation with, 866–868
open-loop/closed-loop sinusoidal frequency analysis/
design with, 862–865
open-loop step response with, 853–859
root locus analysis/design with, 862
simulation examples, 865–874
simulation palette in, 871–872
simulation with, 850–851
using, 851–853
Lag compensation, 457–462, 618–623
design procedure, 619–623
root locus and, 459
type 1 systems, 457
visualizing, 618–619
Lag compensator, 453, 618n
design, 459–462
Lagging, 618n
Lag-lead compensation, 629–637
antenna control and, 500–503
design procedure, 630–634
using Nichols chart, 635–637
Lag-lead compensator, 479
design, 479–484
ramp response error for, 483
root locus for, 480–482
Lago, G., 113
Lam, C. S., 372, 379, 447
Lam, P. Y., 607, 611
Landesberg, A., 297
Laplace transform, 16, 35–36
deﬁnition of, 35
of differential equation, 39
inverse, 35, 36
review, 35–44
of state-transition matrix, 198–199
state-transition matrix via, 201–202
table, 36
theorems, 37
of time function, 35–36
Laplace transformed circuit, 49
Laplace transform solution, 196–198
of state equations, 194–198
Lathe, with digital numerical control, 726
Lead compensation, 470–474
Bode plots for, 627
design, 471–474, 626–629
geometry of, 470
possible solutions, 471
in UFSS, 503–504
visualizing, 623–624
Lead compensator, 463, 623n
frequency response, 624–625
realization, 499
Ledgerwood, B. K., 113
Lee, Edmund, 4
Lee, K.-B., 648
Lee, S., 155
Lee, S.-R., 289, 297
Leedal, D. T., 151n, 156
Lennartsson, A., 296, 447, 610
Leo, D. J., 232
Lessard, C. D., 104, 113
Lewis, F. L., 216n, 231
Li, P., 374n, 380
Li, S., 151, 156
Li, Z., 26n, 30
Liang, S. Y., 333
Library Browser, MATLAB Simulink program, 820–821
Liceaga-Castro, E., 150, 156
Lieberman, J., 24, 30
Liew, K. M., 379, 447, 611
Lin, J.-S., 286n, 287, 297, 373, 379
Lin, R., 334, 448, 648
Linan, M., 232
Linear combination, 119, 120
Linear control systems analysis, 5
Linear independence:
explanation of, 120
state variables and, 121–122
Linearity, 86
Linearization, 87–92
about a point, 88
of differential equations, 89–90
of function, 88
longitudinal ﬂight model, 218
state-space representation and, 138–140
Linearized magnetic levitation system block, 430
Linearly dependent motions, 64
Linearly increasing command, 17
Linearly independent, 120
state variables, 121–122
Linear systems, 86
piecewise, 102
simulation with LabVIEW program, 866–868
Index
905

Linear systems (Continued )
simulation with MATLAB Simulink program, 824–829
total response for, 10
Linear time-invariant differential equation, 16
Linear time-invariant model, of hypothalamic-pituitary-
adrenal axis, 149–150
Linear voltage differential transformer (LVDT), 24
Liquid-level control, 4
Lithium-ion battery charger, 329
Liu, A. Q., 216n, 231
Liu, C.-H., 374n, 379
Liu, G., 334, 611
Liu, J.-H., 700, 704
Load:
in cascaded systems, 238
dc servomotor and, 148
elastically coupled, 290, 331, 701
motor and, 81–82, 93, 141–143
rotational mechanical, 80
Load angular displacement response:
backlash effect on, 193, 194
dead zone effect on, 193
Load angular velocity response, ampliﬁer saturation and, 192
Log-magnitude plots, 533, 542–543, 566–567
Longitudinal ﬂight model linearization, 218
Look-ahead offset, 330
Loop analysis, See Mesh analysis
Looper, Mark, 28n
Loop gain, 241, 251–252
Loops:
major, 488
minor, 487, 488
multiple, 51–53
nontouching, 251–252
Lordi, N. G., 143, 156
Lossless gears, 74
angular displacement in, 74
system with, 75–76
Low, K. H., 376, 379, 447, 604, 611
Low back pain, motor trunk patterns and, 217
Lowery, M. M., 447
Low-frequency asymptotes, 533
LTI Viewer, 19, 566, 569
Ludwick, S. J., 30
Luenberger, D. G., 704
Lumped parameter, 70n
Lusitania, 315
LVDT, See Linear voltage differential transformer
Lyapunov, Alexandr Michailovich, 5
M
Mablekos, V. E., 78, 113
Magnetic levitation transportation system, 604–605
Magnitude frequency response, 528
Magnitude plots, 529
Magnusson, M., 113
Mahmood, H., 437, 448, 517, 523, 607, 611,
761, 764
Mahony, R. E., 523
Maka, S., 448
Mallavarapu, K., 219, 232
Malthus, Thomas, 103
Manned submersible, 271
Mansor, H., 645, 648
Mapping contour, 551–552
Mapping only positive jω-axis, stability via, 562–563
Margaris, N. I., 379
Marginally stable systems, 301
Marginal stability, 300
Martin, R. H., Jr., 31
Martinez, D., 112, 155, 232, 296, 333, 379, 447, 523, 610,
647, 704, 764
Marttinen, A., 103, 113, 328, 333, 604, 611
Marumo, Y., 448
Mason, S. J., 251, 297
Mason’s rule:
multiple subsystems and, 251–253
transfer function via, 252–253
Mass, 61, 62, 64
damper and, 123
Master controller, 329
Matching coefﬁcients:
controller design by, 661–662
observer design by, 677, 681–683
Mathematical models, 16–17
from physical system schematics, 34
MathWorks Inc., 19
MATLAB program, 19–20
command summary for, 814–817
design via frequency response with, 801–805
design via root locus with, 791–796
design via state space with, 805–808
digital control systems with, 809–814
examples, 772–814
frequency domain modeling with, 772–776
frequency response techniques with, 796–801
M-ﬁles with, 771
multiple subsystems with, 782–787
root locus with, 789–790
stability with, 787–788
steady-state errors with, 788–789
time domain modeling with, 776–779
time response with, 779–782
using, 771–772
MATLAB Simulink program, See Simulink program
(MATLAB)
906
Index

Matrices:
companion, 262
controllability, 659–661
identity, 136
observability, 674–677
state-transition, 198–199, 201–202
system, 267, 269–270
transformation, 266, 267, 269–271
vector-matrix form, 125
Maximum power point tracking (MPPT) system, 25, 26
Maxwell, James Clerk, 5
Mayr, O., 4n, 31
McKerrow, P. J., 225, 232
McRuer, D., 218, 232
Mechanical brake response, electric vehicle, 219–220
Mechanical constants, 80
Mechanical displacement, 61–62
Mechanical system:
into parallel analog, 86
into series analog, 84–85
Mechanical system transfer functions:
rotational, 69–73
translational, 61–68
Meier, R., 23, 31
MEMS, See Micro Electromechanical System
Mengxiao, W., 232
Mesh, 48
Mesh analysis:
complex circuits via, 51–53
single loop via, 48–50
Mesh equations, via inspection, 56–57
Metalforming, exact shapes in, 760
Metering pumps, 517
Meyer, A. U., 113
M-ﬁles, with MATLAB program, 771
Miao, Y., 648
Michaelis-Menten equations, 102
Micro Electromechanical System (MEMS), 216
Micro Optical Electromechanical Systems (MOEMS), 216
Milhorn, H. T., Jr., 681, 704
Milsum, 1966, 94
Minnichelli, R. J., 328, 334
Minor loop, 487, 488
Minor-loop feedback compensation, 492–494
root locus for, 493
step response simulation for, 494
Minorsky, N., 5, 113
Misra, V., 379, 447, 610, 648
Missile control system:
modeling of, 727–729
stability of, 727–729
Missile steering control, 148
Mitchell, R. J., 374, 375n, 379
Mo, J., 764
Models, in MATLAB Simulink program, 824
MOEMS, See Micro Optical Electromechanical Systems
Mohseni, K., 113
Moment of inertia, 69
Moored ﬂoating platforms, 25
Motion control, 375–376
Motion equations, 62–63, 70–71
for gear systems, 75
by inspection, 67–68, 71–72
Motor(s):
dc, 78, 80–82
explanation of, 78–79
load and, 81–82, 93, 141–143
transfer functions and, 93
Motorcycle radio volume, 23
Motor-driven inverted pendulum cart system, 151–152,
220–221, 328, 511–512, 701, 758
Motor drive system, 220
Motor transfer function, electrical constants of, 81
Motor trunk patterns, low back pain and, 217
Mott, C., 24, 31
MPPT system, See Maximum power point tracking system
Multiple loops, 51–53
Multiple nodes, 54
with current sources, 55
Multiple root of multiplicity, 40
Multiple subsystems. See also Subsystems
analysis and design of feedback systems, 245–248
in antenna control system, 272–275
background on, 236
block diagrams of, 236–245
cascade form of, 237–239, 264
feedback form of, 240–241
Mason’s rule, 251–253
with MATLAB program, 782–787
moving blocks to create familiar forms, 241–245
parallel form of, 239
signal-ﬂow graphs of, 248–251
signal-ﬂow graphs of state equations and, 254–256
similarity transformations, 265–271
in space shuttle, 237
state-space representations of, 256–265
in UFSS vehicle, 275–277
Multiplicity, 40
Muñoz-Mansilla, R., 25, 31
Murakami, T., 375n, 379
Muscle contraction, 104
MyDAQ, 110–112, 226–230, 441, 443, 444
N
Naﬁon sheet, 219
Nagle, H. T., 232, 764
Index
907

Nakamura, M., 217, 232
Nano-positioning device, 217
NASA ﬂight simulator robot arm, 78
Nashner, L. M., 216, 232
National Instruments PXI, 526
Natural frequency:
damping ratio and, 203–204
of general second-order system, 169, 171
Natural period, 169–170
Natural response, 10
of general second-order system, 167, 168
poles and, 158, 160
Naval Research Laboratory, 205
n-channel enhancement-mode MOSFET Source
Follower circuit, 286
Neamen, D. A., 286, 297
Negative feedback, 240n
Negative-feedback systems, 413, 414
Negative step response, of pitch control, 207
Neogi, B., 760, 764
Network theory, 124
Neuroprostheses, 215
Newbury, K., 232
Newton’s laws, 16, 62
Nichols charts, 577–578
lag-lead compensation design using, 635–637
Nieuwland, J., 31
Nilsson, J. W., 35, 113, 528, 611
NI myDAQ, 875–878
Noah, J., 611
Nodal analysis:
complex circuits via, 53–55
simple circuits via, 50
Nodal equations:
form of, 56
method to write, 53–55
Node(s):
multiple, 54, 55
of signal-ﬂow graphs, 248–249
single, 50
No integration systems, steady-state error for, 343
No-load speed, 81
Noninverting operational ampliﬁer, 59–61, 286
circuit, 60
schematic, 59
Nonlinear electrical network, 90–91
Nonlinearities, 86–87
physical, 87
time response and, 192–194
Nonlinear systems, 86–87
representation of, 139–140
translational mechanical, 140
Nonminimum-phase electric circuit, 188
Nonminimum-phase system:
step responses of, 188, 190
transfer function of, 188–190
Nontouching loop gain, 251–252
Nontouching loops, 251–252
Nonunity feedback systems:
steady-state actuating signal for, 356–357
steady-state errors for, 353–356
Noor, S. B. M., 648
Norton’s theorem, 54
Notch ﬁlter, 484–486
Nounou, H., 610, 648
Nounou, M., 610, 648
Novosad, J. P., 31
n simultaneous, ﬁrst-order differential equations, 117
nth-order differential equations:
converted to n simultaneous ﬁrst-order differential
equations, 117
explanation of, 16
Nyawako, D., 435, 448
Nygaard, G., 31
Nyquist, H., 5, 31, 611
Nyquist criterion, 550–555
derivation of, 551–554
range of gain for stability via, 561–562
stability determination with, 554–555
Nyquist diagram:
gain margin/phase margin via, 564–566
for open-loop function, 558–559
sketching, 555–560
stability via, 560–564
Nyquist sampling rate, 710
Nyzen, R. J., 448, 764
O
Observability, 674–677
by inspection, 674
via observability matrix, 675–676
Observability matrix, 674–677
observability via, 675–676
unobservability via, 676–677
Observable systems, 674
Observer, 667
Observer canonical form:
observer design for, 671–673
of state space, 261–265
Observer design, 667–674
alternative approaches, 677–684
antenna control and, 688–693
by matching coefﬁcients, 677, 681–683
for observer canonical form, 671–673
by transformation, 677–681
Octave, 533
908
Index

Ogata, K., 31, 113, 232, 523, 611, 619, 648, 659n, 662n,
675n, 704, 710n, 734n, 743n, 759, 764
Ohnishi, K., 375n, 376, 379
Oil cylinder valve, 151
Oil drilling rigs, 26–27
Okun’s law, 330, 331
OMS, See Orbital maneuvering system
One integration systems, steady-state error for, 344
Open-loop frequency responses:
closed-loop transient responses and, 578–582
relation between closed-loop and, 573–578
response speed from, 580–582
Open-loop function, Nyquist diagram for, 558–559
Open-loop pitch response, UFSS and, 205–207
Open-loop poles, 392–393, 430
Open-loop response, antenna control and, 202–205
Open-loop sinusoidal frequency analysis and design, with
LabVIEW program, 862–865
Open-loop step response, with LabVIEW program,
853–859
Open-loop swivel controller, 376
Open-loop systems, 7
Open-loop transfer function, 217, 241
Operational ampliﬁers, 57–61, 188–189, 286
Optical disk recording system, 6
Orbital maneuvering system (OMS), 6
Oscillations:
damped, 13, 169
damped frequency of, 166
undamped sinusoidal, 208
O’Sullivan, D. M., 233, 705
Oustaloup’s method, 218
Output, 2
Output engine fan speed, 327
Output equation, 117–121
Output potentiometer, 92–93
Output response, 158
Output transducer, 8
Overdamped behavior, 208
Overdamped response, 165–167
Overhead crane system, 604
Overshoot, 174, 402, 408, 589–590. See also Percent
overshoot
Özel, T., 516, 523
Özgüner, Ü., 330, 334, 448
P
Pacemakers, artiﬁcial, 760
Packet information ﬂow, 376
Padé approximation, 330, 433
Paint mixing, 105
Palazoglu, A., 513n, 524
Papadopoulos, K. G., 375, 379
Papastefanaki, E. N., 379
Papin, Denis, 4
Parabolic inputs:
in control system design, 17, 18
steady-state error and, 336, 337, 342–343
unit, 735
Parabolic trough collector problem, 29, 106–107, 153, 222,
294, 332, 377, 438, 519, 608, 646, 702, 762
Parallel analog, 85–86
development of, 85
mechanical system converted into, 86
parameters for, 85
Parallel form:
of multiple subsystems, 239
of state space, 258–260, 264
Parallel hybrid-electric vehicle, 28
Parallel subsystems, 239
Park, J.-Y., 610
Park, Y.-P., 610
Parkinson’s disease, 437
Partial-fraction expansion, 37–44
inverse z-transform via, 717–718
Particular solutions, 10, 162n
Passive-circuit realization, 497–499
PD controllers, See Proportional-plus-derivative controllers
Peak time, 173
evaluation of, 175
lines of constant, 178
from pole location, 178–180
from transfer function, 177
Pendulum:
inverted pendulum cart system, 151–152, 220–221, 328,
511–512, 701, 758
simple, 139
Percent overshoot, 174
evaluation of, 175–176
lines of constant, 178
from pole location, 178–180
for time delay systems, 589–590
from transfer function, 177
v. damping ratio, 176
Pérez López, O., 650n, 699n, 704
Performance, 2
Peters, S., 30
Pﬂeiderer, H. J., 156, 704
Pharmaceutical drug absorption, 143–145
Pharmaceutical drug-level concentrations, 143
Phase frequency response, 528
Phase margin:
from Bode plots, 569
damping ratio from, 579–580
evaluating, 568
via Nyquist diagram, 564–566
Index
909

Phase shift oscillator, 333
Phase-variable form, state space in, 256, 264
Phase-variable representation:
controller design for, 655–657
for plant, 652, 653
Phase variables, 133
block diagram of, 132
choice, 133
Phasors, 527
Philco Technological Center, 156
Phillips, C. L., 232, 648, 764
Philon of Byzantium, 4
Photovoltaic system, 25–26, 104, 151
pH processes, modeling/control of, 218–219
Phugoid mode, 218
Physical system:
mathematical models from schematics of, 34
transform requirements into, 14–15
Piccin, O., 288, 297
Pickoff points, 236
Picó, J., 156, 704
PI controllers, See Proportional-plus-integral controllers
PID control, 375
PID controllers, See Proportional-plus-integral-plus-
derivative controllers
Piecewise linear systems, 102
Pinette, B., 149n, 156
Pitch angle control representation, in UFSS, 275–277,
285
Pitch control loop:
with rate feedback, 421
root locus of, 419
for UFSS vehicle, 205
without rate feedback, 420
Pitch control system, negative step response of, 207
Pitch gain, 322
Planetary gear systems, 220
Plant, 2, 7
phase-variable representation for, 652, 653
pole placement for, 653–658
state-space representation of, 651–652
with state-variable feedback, 689–690
Plots, in MATLAB Simulink program, 824. See also
speciﬁc types of plots
Polar plot, 576n
Pole(s), 158
eigenvalues and, 195–198
evaluating response with, 161
of ﬁrst-order system, 159–161
of transfer function, 159
underdamped response using, 166
Pole distribution, via Routh table with row of zeros,
309–310
Pole location:
peak time from, 178–180
percent overshoot from, 178–180
for plant, 653–658
for root locus, 387
settling time from, 178–180
topology for, 651–653
Pole plot, for underdamped second-order
system, 178
Pole sensitivity, root locus and, 415–417
Pole-zero plot, 160
Popa, D., 216n, 231
Position constant, 582–583
Position control system, 11, 34
antenna azimuth, 11–14, 203
response of, 13
with speciﬁed overshoot and settling time, 514–515
tachometer as, 487
Position error constant, 345
Positive feedback, 240n
Positive-feedback systems, root locus for, 413–415
Postural arm reﬂexes, 287–288
Potentiometer, 8, 22–23
input, 92–93
output, 92–93
Pounds, P. E. I., 330, 334, 516, 523
Powell, J. D., 30, 113, 156, 232, 610, 704
Power ampliﬁer, 93, 141
Power series method, inverse z-transform via, 718–719
Prasad, L., 151, 152n, 156, 220, 233, 328, 334, 511, 524,
701, 704, 758, 764
Preampliﬁer, 93
Precision grip dynamics, 150
Preitl, Z., 153, 156, 293, 297, 334, 377, 380, 448, 518, 524,
608, 611, 646, 648, 702, 704, 761, 765
Prewarping, 743
Process control industry, 5
Processes (plants), 2, 7
Prochazka, A., 233
Proportional control system, 453
Proportional-plus-derivative (PD) controllers, 463
Proportional-plus-integral (PI) controllers, 453, 457
Proportional-plus-integral-plus-derivative (PID)
controllers, 5
characteristics of, 476
design, 475–479
implementing, 497
root locus for, 476
Pulse transfer function:
derivation of, 720–721
of feedback system, 724–725
Pupil dilation, 24
Pythagorean theorem, 178
910
Index

Q
Qian, H., 334, 611
Qu, S.-G., 151, 156
Qualitative analysis and design, 158
Qualitative method, 158
Quantization error, 710
R
Radial pickup position control, of DVD player, 515–516,
605, 759
Radiator power control, 604
Raible’s tabular method, 729
RAM, See Random-access memory
Ramon, H., 448
Ramp inputs:
in control system design, 17, 18
sensitivity of steady-state error with, 358
steady-state error and, 336–338, 342
unit, 735
Ramp response error, for lag-lead compensator, 483
Random-access memory (RAM), 349
Random early detection (RED) algorithm, 431, 605, 643
Range of gain for stability:
for time delay systems, 588–589
via Bode plots, 567–568
via Nyquist criterion, 561–562
Range of sampling interval, for stability, 729–730
Rate feedback, compensating zero via, 489–491
Raven, F. H., 64, 113, 648
Reaction control system (RCS), 6
Read/write head displacement, 328
Real-axis breakaway, root locus sketching and, 395–399
Real-axis break-in points, root locus sketching and,
395–399
Real-axis pole, transient response and, 160
Real-axis segments, root locus sketching and, 391
Realization:
active-circuit, 495–497
of lag-lead compensator, 501–502
passive-circuit, 497–499
Reciprocal, of time constant, 163
RED algorithm, See Random early detection algorithm
Reference, 7
Reference input, 34
Reidel, S. A., 113
Reinoso, A. J., 25n, 31
Reiser, M. B., 611
Remote-controlled robot, 3
Ren, Z., 220, 233
Residues, 190–191
Resistance(s), 49
armature, 80
running, 106
Resistor, 49
Response speed, from open-loop frequency response,
580–582
Retinal light ﬂux, 433
Reverse coefﬁcients, stability via, 307
Reynolds, P., 448
Richon, J.-B., 434n, 447
Riegelman, S., 156
Ringdorfer, M., 219, 233
Riseman, E. M., 149n
Rise time, 163, 173
evaluation of, 176–178
from transfer function, 176–177
v. damping ratio, 177
Robotic manipulator, 376
with cascade PI controller, 433
harmonic drives with, 435–436
target environment and, 149
Robots, 3
asparagus-picking, 212
assembly-line, 349
FANUC M-410iB, 321
hospital pharmacy, 650
input commands to, 183
leg of, 139–140
remote-controlled, 3
with television imaging systems, 148–149
walking, 139
Robust design, 10–11
Rockwell International, 6, 8, 10, 31, 667, 704
Roll-stabilizing system, ship, 605
Romagnoli, J. A., 512, 513n, 524
Room temperature control, 512
Root locus, 5
for antenna control, 417–419
for compensated system, 456
with compensator, 454
control problem for, 382–383
deﬁnition of, 382, 386–388
frequency response design methods and, 614
from general control system, 388
generalized, 411–412
for ideal derivative compensation, 466, 468
lag compensation and, 459
for lag-lead compensator, 480–482
with MATLAB program, 789–790
for minor-loop feedback compensation, 493
for notch ﬁlter, 484–485
for PID controllers, 476
of pitch control loop, 419
plotting/calibrating, 402–403
pole location for, 387
pole plot for, 387
Index
911

Root locus (Continued )
pole sensitivity and, 415–417
for positive-feedback systems, 413–415
properties of, 388–390
sample, 450
for security camera system, 386
starting/ending points and, 391–392
UFSS and, 419–421
for uncompensated system, 456
vector representation of complex numbers and, 383–385
without compensator, 454
Root locus design methods:
for antenna control system, 500–503
cascade compensation, 453–474
compensation conﬁgurations for, 452
with compensators, 452–453
with feedback compensation, 487–495
improving steady-state error with, 451–462, 474–486
improving transient response with, 450–451, 462–486
with LabVIEW program, 862
lag-lead compensator design, 479–484
with MATLAB, 791–796
notch ﬁlters, 484–486
physical realization of compensation, 495–499
PID controller design, 475–479
for UFSS vehicle, 503–504
Root locus sketching:
angles of departure/arrival in, 400–402
with asymptotes, 393–395
behavior at inﬁnity, 392–395
branches and, 391
critical points and, 405–406
example of, 404–407
jω-axis crossings and, 399–400
real-axis breakaway and, 395–399
real-axis break-in points and, 395–399
real-axis segments and, 391
reﬁning, 395–403
rules for, 390–395, 404
symmetry and, 391
transient response design via gain adjustment from,
407–411
Root sensitivity, of closed-loop system, 416–417
Roots of denominator of F(s):
complex or imaginary, 41–44
real and distinct, 38–40
real and repeated, 40–41
Rotational mechanical impedances, 75
Rotational mechanical load, DC motor driving, 80
Rotational mechanical system transfer functions, 69–73
Rotational systems:
degrees of freedom in, 69
driven by gears, 74–75
Roth, E., 607, 611
Rotor, 78
Routh, E. J., 5, 334
Routh-Hurwitz criterion, 303–305
digital system stability via, 732
examples of, 311–318
factoring via, 317
special cases of, 305–311
stability via, 316–317
with zero in ﬁrst column, 312–313
Routh table:
generating, 303–305
interpreting, 305
pole distribution via, 309–310
with row of zeros, 309–310, 314–315
stability via, 308
zero in, 305–311
Rover, 3
Rubio, F. R., 112, 155, 232, 296, 333, 379, 447, 523, 610,
647, 704, 764
Running resistances, 106
S
Saeys, W., 435, 448
Safety valve, 4
Saini, S. C., 700, 701n, 704
Salapaka, M. V., 233
Salapaka, S., 217, 233
Salminen, R. T., 103n, 113, 333, 611
Sampled-data systems. See also Digital control systems
block diagram reduction of, 724–725
transfer functions and, 719–723
z-transform and, 723
Sampler, modeling, 712–713
Sarcomere, 287
Sarpeshkar, R., 447
Satija, U., 701n, 704
Saturation, ampliﬁer, See Ampliﬁer saturation
Saturation nonlinearity, with MATLAB Simulink program,
830–831
Savant, C. J., Jr., 30, 297, 333, 379, 523, 610, 648, 704
Savaresi, S. M., 523, 610, 764
Sawusch, M. R., 233
Schematics:
control system, 15
gear system, 73
global carbon cycle, 151
inverting operational ampliﬁer, 58
mathematical models from, 34
noninverting operational ampliﬁer, 59
Schierman, J. D., 327
Schiop, L., 105, 113
Schneider, R. T., 376, 380
912
Index

Schnell, 2004, 102
Schouten, A. C., 296
Sebastian, A., 233
Second-order responses:
damping ratio and, 171
Second-order step responses:
approximation, 191
components of, 166
Second-order systems, 164–172
damping ratio of, 169–172
natural frequency of, 169
step responses for damping, 168
Second-order transfer functions via testing, 181–182
Second-order underdamped responses:
for damping ratio values, 174
speciﬁcations, 173–174
Second-order underdamped systems, step
responses of, 178–179
Security camera system, root locus for, 386
Seering, W. P., 156, 232, 297, 334
Segway personal transporter, 24
Self-balancing bicycle, 607
Sensitivity:
of closed-loop transfer function, 357
steady-state errors and, 356–359
of steady-state error with ramp input, 358
of steady-state error with step input, 358
Sensitivity analysis, 18
Sensor, 8
Serial hybrid-electric vehicle, 28
Series analog, 83–85
Series RLC electrical network, 49
Settling time, 163, 174
lines of constant, 178
from pole location, 180
from transfer function, 176, 177
Severyanova, L. A., 156, 704
Shahin, M., 437, 448
Shao, M., 156
Sharma, Y., 701n, 704
Shaw, D. A., 31
Shibata, M., 375n, 379
Shinners, S. M., 704
Ship:
roll axis, 207
roll-stabilizing system of, 605
stability, 5
steering, 5
Shortening muscle velocity, 287
Short period mode, 218
Short takeoff and landing (STOL) ﬁghter aircraft, 327
Signal-ﬂow graphs:
components of, 248–249
converting block diagrams to, 249–250
development stages of, 254–255
of multiple subsystems, 248–251
of state equations, 254–256
Signals, in MATLAB Simulink program, 821, 823
Similarity transformations:
of multiple subsystems, 265–271
on state equations, 266–267
Similar systems, 265, 271
Simple circuits:
via nodal analysis, 50
via voltage division, 51
Simple pendulum, 139
Simulation palette, in LabVIEW program, 871–872
Simulation parameters, in MATLAB Simulink program,
824
Simulations:
with LabVIEW program, 850–851
in MATLAB Simulink program, 824
Simulink program (MATLAB), 19, 186, 192–194, 219,
247, 742
accessing, 819–821
assembling and labeling subsystems in, 821
block libraries, 822–823
digital control systems with, 833–835
examples, 824–835
feedback systems with, 832–833
interacting with plots, 824
interconnecting subsystems and labeling signals, 821,
823
linear system simulation with, 824–829
saturation nonlinearity with, 830–831
saving models in, 824
selecting blocks in, 821
simulation parameters in, 824
starting simulations, 824
subsystem parameters in, 823, 824
using, 819–824
Single loop:
via differential equation, 48
via mesh analysis, 48–50
via transform methods, 50
Single node, 50
Single-pole oil cylinder valve, 151
Sinha, N. K., 704
Sinusoidal frequency analysis, 5
Sinusoidal inputs, 17, 18
SISO Design Tool, 19
SISO systems, ﬁxed structure controllers for, 607–608, 645
Sivan, R., 297
Skeletal muscle voltage potential, 218
Slave controller, 329
Smith, C. A., 513, 524, 644, 648
Index
913

Smith, C. L., 765
Smoother, block diagram, 430
Soleimani-Mosheni, M., 524, 611
Solenoid coil circuit, 285–286
Solomonow, M., 233
Son, M., 648
Source shaft, 77
Space shuttle, 6
main engine controller, 8
multiple subsystems in, 237
Speed control, 4
Sperry Gyroscope Company, 5
s-plane:
cascade compensation via, 742–746
digital system stability via, 731–733
mapping of, onto z-plane, 727
Split-power hybrid-electric vehicle, 28
Spong, M., 380, 435, 436n, 448
Spring constant, 61, 69
Springs, translational relationships for, 62
Spruijt, J. N., 233, 705
Squid jet locomotion, 104
Stability, 10
for antenna control system, 321–322
closed-loop poles/response in, 301–303
deﬁnition of, 300–301
determining, 566–567
digital system, 726–733
evaluation of, 301–303
with MATLAB program, 787–788
Maxwell’s criterion of, 5
of missile control system, 727–729
range of sampling interval for, 729–730
Routh-Hurwitz criterion of, 303–318
in state space, 318–321
transient response design via gain adjustment and, 614
in UFSS vehicle, 322–323
via epsilon method, 306
via mapping only positive jω-axis, 562–563
via Nyquist diagram, 560–564
via reverse coefﬁcients, 307
via Routh table, 308
Stability design:
antenna control and, 595–596
via gain, 321–323
via root locus, 739–740
Stabilization, control systems for, 5
Stable systems, steady-state error and, 337
Stall torque, 81
Stapleton, C. A., 436, 448
State, 118
State equations, 117, 120–122
Laplace transform solution of, 194–198
signal-ﬂow graphs of, 254–256
similarity transformations on, 266–267
time domain solution of, 198–202
State-feedback design, 667
State space, 121
alternative representations in, 256–265
cascade form of, 257–259, 265
controller canonical form of, 260–261, 265
diagonalizing system in, 269–270
graphic representation of, 121
observer canonical form of, 261–265
parallel form of, 258–260, 264
phase-variable form of, 256, 264
stability in, 318–321
from transfer function, 130–136
transfer function from, 136–138
State-space design methods:
for antenna control, 688–693
controllability in, 658–661
controller design, 651–658, 661–667
with MATLAB program, 805–808
observability in, 674–677
observer design, 667–674, 677–684
steady-state error design via integral control, 684–687
v. domain design methods, 650–651
State-space representation, 16, 117
advantages of, 116
antenna control and, 141–143
application of, 122–129
computer simulation and, 146
of electrical networks, 116–120
of feedback systems, 263–264
general, 120–122
linearization and, 138–140
of plant, 651–652
to transfer function, 137–138
State-transition matrix, 198–199
Laplace transform of, 198–199
via Laplace transform, 201–202
State-variable feedback, plant with, 689–690
State variables, 117, 121
linearly independent, 121–122
minimum number of, 122–123
State vector, 121
Static error constants, 345–347, 458
from Bode plots, 585–586
steady-state error via, 346–347
Steady-state actuating signal, for nonunity feedback
systems, 356–357
Steady-state error design:
via cascade compensation, 614
via integral control, 684–687
Steady-state errors, 2, 13–14, 18. See also Errors
914
Index

antenna control and, 362–363
assembly-line robots and, 349
deﬁnition of, 336
digital control systems and, 733–737
digital feedback control system for, 734
for disturbances, 351–353
evaluating, 337–338
ﬁnding, 736
from frequency response, 582–586
improving, 451–452, 474–486
with MATLAB program, 788–789
for no integration systems, 343
for nonunity feedback systems, 353–356
for one integration systems, 344
parabola input and, 336, 337
parabolic input and, 342–343
ramp input and, 336–338, 342
sensitivity of, 356–359
sources of, 338–339
speciﬁcations, 348–351
stable systems and, 337
from step disturbances, 352
step input and, 336–338, 341–342
for systems in state space, 359–362
system type and, 347–348
in terms of G(s), 340–344
in terms of T(s), 339–340
test inputs, 336–337
test waveforms for, 336
transient response, 18, 474–486
for unity feedback systems, 339–344
using ﬁnal value theorem, 359–360
using input substitution, 361–362
via cascade compensation, 453–462
via static error constants, 346–347
video laser disc recorder and, 363–365
Steady-state response, 9, 10n, 162n
Steam-driven power generators, 329–330, 515, 606–607
Steam-driven turbine governor system, 759
Steam pressure control, 4
Steel production, continuous casting in, 289
Steering:
active front steering, 644
for four-wheel drive vehicle, 374
history of control systems for, 5
missile steering control, 148
vehicle steering control model, 374, 430, 644
Steering angle, bicycle, 430
Stefani, R. T., 30, 215, 233, 297, 333, 379, 523, 610,
648, 704
Steinbuch, M., 611
Step disturbances, steady-state errors from, 352
Step inputs:
in control system design, 17, 18
sensitivity of steady-state error with, 358
steady-state error and, 336–338, 341–342
unit, 162, 734–735
Step responses:
computer simulation of, 420
of gain-adjusted antenna control system, 418
for minor-loop feedback compensation, 494
of nonminimum-phase network, 190
of nonminimum-phase system, 188
of pitch control loop without rate feedback, 420
of pitch control loop with rate feedback, 421
for second-order system damping cases, 168
of second-order underdamped systems, 178–179
of three-pole systems, 185–186
for transfer functions, 185–186
STOL ﬁghter aircraft, See Short takeoff and landing ﬁghter
aircraft
s-transform, table of, 716
Strobel, K. L., 232
Submarine autopilot, 150
Subsystem parameters, in MATLAB Simulink program,
823, 824
Subsystems. See also Multiple subsystems
deﬁnition of, 2
in MATLAB Simulink program, 821, 823
Summers, T. A., 233
Summing:
admittances, 55, 85
impedances, 55, 57
junctions, 7, 236, 241
torques of pendulum, 139
voltages, 57
Sun, J., 644, 648
Sun, M., 219, 233
Superposition, 86
Susceptance, 54n
Suspension, active, 286–287, 373
Svensson, J., 432n, 447, 523
Sweet, L. M., 232
Symbolic Math Toolbox, 19
Symbols list, 767–770
Symmetry, root locus sketching and, 391
System matrix, diagonalizing a, 267
System representation, 34–35
System response, 158
with additional poles, 182–186
from transfer function, 46
with zeros, 186–191
Systems in state space, steady-state errors for, 359–362
System step response test, laboratory results of, 164
System type, steady-state errors and, 347–348
System variables, 121
Index
915

T
T(s), steady-state error as, 339–340
Tabular method (Raible), 729
Tachometer:
as position control system, 487
transfer function of, 488
Tactile feedback suit, 24–25
Tadeo, F., 650n, 699, 704
Taip, F. S., 648
Tan, X., 149n, 156
Taplamacioglu, M. C., 232, 297, 333
Tarafdar, U., 764
Target environment, robotic manipulator and, 149
Tarín, C., 149, 156, 699, 704
Tasch, U., 287, 297, 643, 648, 759, 765
Taylor series, 89, 90, 138
TCP/IP network model, 605, 643
Television imaging system, robot with, 148–149
Temperature control system, 4, 23
Testing:
ﬁrst-order transfer functions via, 163–164
hypersonic ﬂight, 517
second-order transfer functions via, 181–182
Test inputs, for steady-state error, 336–337
Test waveforms, 18
for steady-state error, 336
Teufel, E., 156, 704
Textile cross-lapper machine, 374
Textile machine, 701
Thermistor, 8
Thermostat, 6
Third-order observer, 669
Third-order system gain design, 408–411
Thomas, B., 329, 512, 524, 604, 611
Thomsen, S., 220, 233, 290, 331, 334, 448, 518, 524, 607,
611, 701, 705
Three-loop electrical network, 56
Three-mode controllers, See Proportional-plus-integral-
plus-derivative (PID) controllers
Three-phase ac/dc converter, 104, 291
Three-pole systems:
comparing responses of, 185–186
component responses of, 183–184
step responses of, 185–186
Time constant, 162–163
exponential, 169–170
reciprocal of, 163
Time delay systems, 586–590
frequency response plots of, 587–588
percent overshoot for, 589–590
range of gain for stability for, 588–589
Time-domain modeling:
antenna control system, 141–143
applications of state-space representation, 122–129
converting state space to transfer functions, 136–138
converting transfer functions to state space, 130–136
general state-space representation, 120–122
with linearization, 138–140
with MATLAB program, 776–779
pharmaceutical drug absorption, 143–145
of state equations, 198–202
state-space representations of electrical networks,
116–120
v. frequency-domain modeling, 116
Time function:
Laplace transform of, 35–36
z-transform of, 715–716
Time response:
with additional poles, 182–186
for antenna control system, 202–205
in ﬁrst-order systems, 162–164
general second-order system, 169–172
Laplace transform solutions of state equations, 194–198
with MATLAB program, 779–782
nonlinearities and, 192–194
overview of, 158
overview of second-order systems, 164–165
poles/zeros and, 158–161
second-order systems with zeros, 186–191
time domain solution of state equations, 198–202
for UFSS vehicle, 205–207
in underdamped second-order systems, 173–182
Time-varying systems, 116
Timothy, L. K., 156, 233, 297, 334, 705
Titanic, 271
Top-down design, 21
Torque, of motor, 79
Torque-angular displacement, 69
Torque-angular velocity, 69
Torque-controlled crane, 328
Torque equivalent mechanical loading, 79
Torque-speed curve, 81–82
Total response, 10
Tou, J., 765
Tower Trainer 60 Unmanned Aerial Vehicle, 371, 644
Towsley, D., 379, 447, 610, 648
Train stopping, closed-loop vehicle response for, 431
Transducers:
input, 7
output, 8
Transfer function(s), 16, 44–47
for antenna control system, 92–94
block diagram of, 45
from Bode plots, 591–594
with constant term in numerator, 131–133
decomposing, 133, 134
916
Index

for differential equation, 45
of digital control systems, 719–723
electrical network, 47–61
electromechanical system, 77–83
experimentally obtaining, 591–594
ﬁrst-order transfer functions via testing, 163–164
frequency response from, 530
of human leg, 94–95
matrix, 136–137
nonminimum-phase system of, 188–190
peak time from, 177
percent overshoot from, 177
poles of, 159
with polynomial in numerator, 134–135
rise time from, 176–177
rotational mechanical system, 69–73
sampled-data systems and, 719–723
second-order approximation, 186
second-order transfer functions via testing, 181–182
settling time from, 176, 177
from state space, 136–138
to state space, 130–136
state-space representation to, 137–138
step responses for, 185–186
system response from, 46
translational mechanical system, 61–68
via Mason’s rule, 252–253
zeros of, 159
Transfer function poles, eigenvalues and, 195–198
Transfer pitch angle, of UFSS vehicle, 206
Transformation(s):
bilinear, 730–731
to canonical form, 260–265
controller design by, 662–666
observer design by, 677–681
similarity, 265–271
Transformation matrix, 266, 267, 269–271
Transformed circuit, 49
Transformed free-body diagram, 63
Transform methods, single loop via, 50
Transform of the response, 173
Transient performance, stability design and, 595–596
Transient response, 2, 9, 10n
cascade compensation for improvement of, 462–474
desired and existing, 9
ﬁnding, 246–247
gain design for, 247
improving, 450–451
modeling, 18
modeling steady-state error, 18
real-axis pole and, 160
steady-state errors and, 18, 474–486
through component design, 180–181
via gain adjustment, 615–618
on z-plane, 737–739
Transient response design via cascade compensation, 614
Transient response design via gain adjustment, 407–411,
614
antenna control and, 417–419, 749–751
digital control systems and, 740–741
UFSS and, 419–421
Transition method, 303, 397–398
Translational mechanical system:
representation of, 128
transfer functions, 61–68
Transpose, 125
A Treatise on the Stability of a Given State of Motion
(Routh), 5
TryIt, 40–43, 46, 57, 71, 135, 138, 182, 186, 187, 191,
197, 245, 248, 261, 263, 271, 306, 314, 320, 348,
350, 354, 358, 360, 385, 390, 406, 461, 470, 550,
560, 566, 569, 578, 590, 618, 622–623, 629, 657,
661, 673, 677, 722, 742
Tsai, C.-C., 232
Tsang, K. M., 329, 334
Tsunashima, H., 448
Tu, H.-M., 232, 374n, 379
Tumor cell growth model, 104
Turnbull, G. A., 31
Tustin transformation, 743
Two degrees of freedom translational mechanical system,
65–66
Two-loop electrical network, 51–53
Two-pole system, zeros and, 187
Two-tank liquid control system, 512–513
Two-wheeled driving control system, 25
Tyagi, B., 152n, 156, 233, 334, 524, 704, 764
Tyberg, V. J., 232
Type 3 feedback control systems, 375
U
UAV helicopter, 330
UFSS, See Unmanned Free-Swimming Submersible
UNAIDS, 27, 31
Unbounded input, 300
Uncompensated system:
of ideal derivative compensation, 465–467
root locus for, 456
Uncompensated system response, ideal integral
compensated system response and, 457
Uncontrollable system, 658
Undamped response, 167, 168
Undamped sinusoidal oscillations, 208
Underdamped curve, 169
Underdamped response, 166–167
Underdamped second-order systems, 173–182
Index
917

Underwater remote-controlled vehicle, 315
Uniform-rate sampling, 712
Uniform rectangular pulse train, 713
United Technologies, 3
Unit multiplicity, 310n
Unit parabolic input, for digital feedback control system,
735
Unit ramp input, for digital feedback control system, 735
Unit step input:
for digital feedback control system, 734–735
ﬁrst-order system and, 162
Unity feedback systems:
forming an equivalent, 353–354
steady-state error for, 339–344
Unity gain, 8
Unmanned autonomous vehicle, 516–517
Unmanned Free-Swimming Submersible (UFSS), 158,
271
heading control, 758
lead/feedback compensation in, 503–504
open-loop pitch response and, 205–207
pitch angle control representation, 275–277, 285
pitch control loop for, 205
stability design via gain in, 322–323
transient design via gain and, 419–421
Unobservability, via observability matrix, 676–677
Unobservable systems, 674
Unstable systems, 301. See also Stability
Ünyelioğlu, K. A., 430, 448
Űnyelioglu, K. A., 334
V
van der Helm, F. C. T., 296
van der Molen, G. M., 150n, 156
Van de Vegte, J., 524
van de Zalm, G., 606, 611
Van Dijk, E., 219, 233, 699, 705
Van Valkenburg, M. E., 113
Varghese, J., 517, 524
Variable speed wind turbine, feedback control, 700
Variable valve timing (VVT), 220
Vaughan, N. D., 24, 31, 285, 297
Vector-matrix form, 125
Vector representation, of complex numbers, 383–385
Vectors:
evaluation of complex function via, 385
Laplace transform of, 136n
state, 121
Vehicle steering control model, 374, 430, 644
Veldpaus, F., 611
Velocity:
angular, 69, 81, 192
constant-velocity inputs, 336
force-, 62
shortening muscle, 287
Velocity constant, 345, 583–584
Venter, J. W., 30, 105n, 113, 152n, 155, 232, 296, 333,
379, 447, 523, 610, 647, 704, 764
Ventilators, closed-loop feedback in, 432
Verﬁng, E. H., 31
Vertical risers, 4
Vertical spindle surface grinding, 329
Video laser disc recorders, 363–365
Vidyasagar, M., 113, 380, 436n, 448
Vieira, A., 156, 704
Virkkunen, J., 103n, 113, 333, 611
Virtual Experiment, 65, 81, 138, 162, 177, 247, 311, 352,
466, 493
Virtual reality simulator, 288
Viruses, free, 105
Viscous damper, 62, 64, 123
Viscous damping, 15
Visual cues, human response to, 215
Voltage(s):
armature, 78–79, 81
skeletal muscle voltage potential, 218
summing, 57
Voltage-charge, 47
Voltage-current, 47
Voltage-dependent current source, 125–127
Voltage division, simple circuits via, 51
Voltage droop control, 431
Voltage-source converter (VSC), 437–438, 607
VVT, See Variable valve timing
W
Wang, F., 31
Wang, H., 379, 447, 611
Wang, W., 31
Wang, X.-K., 329, 334, 606, 611
Water clock, 4
Water level control, in steam generator, 329–330
Water-loading experiments, 437
Watt, James, 4
Waveforms, 18
Weiss, R., 149n
Williams, R. L., II, 448, 765
Windmill speed control, 4
Wind turbines, 433–435
Wingrove, R. C., 330, 334
Wittenmark, B., 743, 764
Wolfson, P., 232
Wong, M. C., 379, 447
Woods Hole Oceanographic Institution, 315
Wormly, D. N., 156, 232, 297, 334
Wu, J., 524
918
Index

X
X-4 quadrotor, 516–517
Xia, W., 156
Xia, X., 30, 105n, 113, 152n, 155, 232, 296, 333, 379, 447,
523, 610, 647, 704, 764
Xiong, Y., 233
Xu, D.-P., 704
Xue, D., 218, 233
Y
Yamazaki, H., 431, 448
Yan, T., 328, 334, 433, 448, 644, 648
Yang, H., 610
Yang, J., 610
Yang, X.-H., 334, 611
Yang, X.-Y., 704
Yaniv, Y., 287, 297
Ye, Z., 156
Yin, G., 374, 380
Yingst, J. C., 764
Yoneyama, T., 447, 610
Yu, S., 517, 524
Z
Zbinden, A. M., 31
Zedka, M., 217, 233
Zero(s), 158
entire row is, 308–311
in ﬁrst column, 306–307, 312–313
of ﬁrst-order system, 159–161
in Routh table, 305–311
system response with, 186–191
of transfer function, 159
two-pole system and, 187
Zero-input response, 198
Zero-order hold, 714
Zero-order sample-and-hold (z.o.h.), 710, 714, 721–722
Zero-state response, 198, 209
Zhang, D., 524
Zhang, J.-Y., 644, 648
Zhang, Y., 156
Zhao, Q., 26, 31
Zhongjun, X., 232
Zhou, B. H., 215, 233
Zhou, J., 31
Zhu, G. G., 220n, 233
z.o.h., See Zero-order sample-and-hold
z-plane:
digital system stability via, 726–730
gain design on, 739–742
s-plane mapping onto, 727
transient response on, 737–739
z-transform, 712
digital control systems and, 714–719
sampled-data systems and, 723
table of, 716
theorems, 717
of time function, 715–716
Index
919


Key Equations

Unmanned Free-Swimming
Submersible Vehicle
Pitch Control System
Pitch gain
Pitch
command
θc(s)
Commanded
elevator
deflection
δec(s)
2
s + 2
Elevator
actuator
Elevator
deflection
δe(s)
Vehicle
dynamics
–0.125(s +0.435)
(s +1.23)(s2+0.226s+0.0169)
Pitch
θ (s)
Pitch rate
sensor
–K2s
+
–
+
–
–K1
Heading Control System
Heading
gain
Heading
command
Commanded
rudder
deflection
Rudder
actuator
Vehicle
dynamics
Yaw 
rate
sensor
Heading
Heading
(yaw)
rate
–
2
s + 2
+
–
–
+
0.125(s + 0.437)
(s + 1.29)(s + 0.193)
ψc(s)
δrc(s)
δr(s)
ψ (s)
ψ (s)
Rudder
deflection
1
s
–K2s
–K1


Appendix E: MATLAB’s GUI
Tools Tutorial
E.1 Introduction
Readers who are studying MATLAB may want to explore the convenience of MATLAB’s
LTI Viewer, the Simulink LTI Viewer, and the SISO Design Tool. SISO is an acronym for
single-input single-output. Before proceeding, the reader should have studied Appendix B,
the MATLAB Tutorial, including Section B.1, which is applicable to this appendix.
MATLAB Version 8.3(R2014a), MATLAB’s Control System Toolbox Version 9.7,
Simulink Version 8.3, and Simulink Control Design Version 4.0 are required in order to use
the tools described in this appendix.
The M-ﬁles in this appendix are available elsewhere on this Web site. Consult
the MATLAB Installation Guide for your platform for minimum system hardware
requirements.
E.2 The LTI Viewer: Description
The LTI Viewer is a convenient way to obtain and view time and frequency response plots
of LTI transfer functions and obtain measurements from these plots. In particular, some of
the graphs the LTI Viewer can create are step and impulse responses, Bode, Nyquist,
Nichols, and pole-zero plots. In addition, the values of critical points on these plots can be
displayed with a click of the mouse. Table E.1 shows the critical points that are available for
each plot.
TABLE E.1
Critical points available for each plot in MATLAB’s LTI Viewer
Peak value:
peak time
or frequency
Settling
time
Rise
time
Steady
state
value
Gain/phase margins;
zero dB/180°
frequencies
Pole-zero
value
Step
•
•
•
•
Impulse
•
•
Bode
•
•
Nyquist
•
•
Nichols
•
•
Pole-zero
•
1

E.3 Using the LTI Viewer
In this section we give you steps you may follow to use the LTI Viewer to plot time and
frequency responses. If you have trouble, help is available on the LTI Viewer window menu
barandontheStatus Barat thebottomoftheLTIViewer window. Helpisalso available onthe
Quick Access Toolbar at the top of the MATLAB R2014a window. Enter LTI Viewer in the
search box on the right. The following summarize the steps you may take to obtain plots from
the LTI Viewer.
1. Access the LTI Viewer
The LTI Viewer, shown in Figure E.1, may be accessed by
typing ltiview in the MATLAB Command Window or by executing this command in
an M-ﬁle.
2. Create LTI transfer function
Create LTI transfer functions for which you want to
obtain responses. The transfer functions can be created in an M-ﬁle or in the MATLAB
Command Window. Run the M-ﬁle or MATLAB Command Window statements to
place the transfer function in the MATLAB workspace. All LTI objects in the MATLAB
workspace can be exported to the LTI Viewer.
3. Select LTI transfer functions for the LTI Viewer
Choose Import . . . under the File
menu in the LTI Viewer window and select all LTI objects whose responses you wish to
display in the LTI Viewer sometime during your current session.
4. Select the LTI objects for the next reponse plot
Right-click anywhere in the
LTI Viewer plot area to produce a pop-up menu as shown in Figure E.1. Under
Systems, select or deselect the objects whose plots you want or do not want to show in
the LTI Viewer. More than one LTI transfer function may be selected.
5. Select the plot type
Right-click anywhere in the LTI Viewer plot area to produce a
pop-up menu as shown in Figure E.1. Under Plot Types, select the type of plot you want
to show in the LTI Viewer.
6. Select the characteristics
Right-click anywhere in the LTI Viewer plot area to produce
a pop-up menu as shown in Figure E.1. Under Characteristics, select the characteristics
FIGURE E.1
LTI Viewer showing
right click pop-up menu
2
Appendix E: MATLAB’s GUI Tools Tutorial

of the plot you want displayed. More than one characteristic may be selected. For each
characteristic chosen, a point will be placed on the plot at the appropriate location.
7. Interact with the Plot:
Zoom in
Select the Zoom In button (with the + sign) on the tool bar. Hold the mouse
button down and drag a rectangle on the plot over the area you want to enlarge. Let
go of the mouse button. You may also click the mouse. Each click zooms you in
closer.
Zoom out
Select the Zoom Out button (with the  sign) on the tool bar. Click on the
plot. Each click widens your view.
Grid
Select Grid in the right-click menu to toggle the grid on and off. The right-
click menu will not work if any zoom button on the tool bar is selected.
Normalize
Select Normalize in the right-click menu to normalize all curves in view.
Full view
Select Full View in the right-click menu to return to the full view of your
plot after zooming.
Characteristics
Read the values of the characteristics by placing the mouse on the
characteristics point on the plot. Left-click the mouse to keep the values displayed.
Properties
Select Properties in the right-click menu to change the appearance of the
graph. You can change the title, axis labels, x and y limits, font size and styles,
colors, and response characteristics deﬁnitions.
Coordinates and curve
Left-click the mouse at any point on the plot to read the
system identiﬁcation and the coordinates.
Add text and graphics
Under the File menu, choose Print to Figure. The tool bar of
this ﬁgure has additional tools for adding text, arrows, and lines.
Additional plot-edit capabilities
The Edit menus of the LTI Viewer and the ﬁgures
created by selecting Print to Figure offer a wide variety of control over the plot
presentation.
E.4 LTI Viewer Examples
This section presents ﬁve examples of the use of the LTI Viewer taken from Chapters 4, 10,
and 13. The examples will show the M-ﬁles along with the resulting LTI Viewer window.
Example E.1
Step Response
Step Response
PROBLEM: This example, taken from Example 4.8 in the text, shows the use of the LTI
Viewer to display simultaneously three step responses as well as their peak time, settling
time, rise time, and steady-state values. Let us follow the steps listed in Section E.3.
Access the LTI Viewer and create the LTI objects
Follow Steps (1) and (2) in Section
E.3 to access the LTI Viewer and generate the LTI transfer functions. Figure E.2(a)
shows the M-ﬁle used to generate the three transfer functions.
Select transfer functions for viewing responses
After running the M-ﬁle, follow Steps
(3) and (4) in Section E.3 and select T1, T2, and T3.
Select the plot type
Follow Step (5) in Section E.3 and select Step.
Select the Characteristics
Follow Step (6) in Section E.3 and select Peak Response,
Settling Time, Rise Time, and Steady State.
Interact with the plot
Follow Step (7) in Section E.3 and interact with the plot. In
particular, read the peak value and peak time of T3’s step response. Figure E.2(b) shows
E.4 LTI Viewer Examples
3

the LTI Viewer window with the responses and system T3’s peak amplitude, percent
overshoot, and peak time.
FIGURE E.2
LTI Viewer used
for step response: a. M-ﬁle;
b. LTI Viewer
Example E.2
Nyquist Diagram and Gain/Phase Margins
Nyquist Diagram and Gain/Phase Margins
PROBLEM: This example, taken from Example 10.8 in the text, shows the use of the LTI
Viewer in plotting a Nyquist diagram and obtaining gain margin, phase margin, zero dB
frequency, and 180° frequency. To create this plot follow Step (1) through (4) in Section E.3
using the M-ﬁle shown in Figure E.3(a). Then use the right-click menu and select Nyquist
under Plot Type. To ﬁnd the gain and phase margins as well as the gain and phase margin
frequencies, use the right-click menu and select All Stability Margins under Character-
istics.FigureE.3(b)showstheresultingLTIViewerwindow.Thesystem’sgainmarginand
180° frequency are displayed along with the phase margin and zero dB frequency.
4
Appendix E: MATLAB’s GUI Tools Tutorial

FIGURE E.3
LTI Viewer used
for Nyquist diagram: a. M-ﬁle;
b. LTI Viewer
Example E.3
Bode Plots and Gain/Phase Margins
Bode Plots and Gain/Phase Margins
PROBLEM: This example, taken from Example 10.10 in the text, shows the use of the
LTI Viewer in making a Bode plot and obtaining gain margin, phase margin, zero dB
frequency, and 180° frequency. To create this plot, follow Steps (1) through (4) in Section
E.3 using the M-ﬁle shown in Figure E.4(a). Then use the right-click menu and select
Bode under Plot Type. To ﬁnd the gain and phase margins as well as the gain and phase
margin frequencies, use the right-click menu and select All Stability Margins under
Characteristics. Use the right-click menu and select Grid. Figure E.4(b) shows the
resulting LTI Viewer window. The system’s phase margin and 0 dB frequency are
displayed along with the gain margin and 180° frequency.
E.4 LTI Viewer Examples
5

Since Example 10.10 used asymptotic approximations to determine the character-
istics, such as gain and phase margin, there will be some discrepancy between the
characteristics found using the LTI Viewer, which uses the exact frequency response, and
the results of Example 10.10.
FIGURE E.4
LTI Viewer used
for Bode plot: a. M-ﬁle;
b. LTI Viewer
Example E.4
Nichols Chart and Gain/Phase Margins
Nichols Chart and Gain/Phase Margins
PROBLEM: This example, which reproduces Figure 10.47 in the text, shows the use of
the LTI Viewer in making a Nichols chart and obtaining gain margin, phase margin, zero
dB frequency, and 180° frequency. To create this plot follow Step (1) through (4) in
Section E.3 using the M-ﬁle shown in Figure E.5(a). Then use the right-click menu and
select Nichols under Plot Type.
To ﬁnd the gain and phase margins as well as the gain and phase margin frequencies,
use the right-click menu and select All Stability Margins under Characteristics. Use the
right-click menu to select Grid. Finally, select Zoom In from the toolbar and drag your
mouse over a portion of the Nichols plot to create the close-up view shown in Figure E.5(b).
Figure E.5(b) also shows the points from which gain and phase margins and frequencies
can be read.
6
Appendix E: MATLAB’s GUI Tools Tutorial

Example E.5
Step Response for Digital systems
Step Response for Digital systems
PROBLEM: This example shows the use of the LTI Viewer to produce step responses for
digital system. To create this plot follow Steps (1) through (4) in Section E.3 using the M-ﬁle
shown in Figure E.6(a). Then use the right-click menu and select Step under Plot Type.
Figure E.6(b) shows the LTI Viewer window with the digital step response.
FIGURE E.5
LTI Viewer
used for Nichols chart:
a. M-ﬁle; b. LTI Viewer
FIGURE E.6
LTI Viewer
used for digital step response:
a. M-ﬁle; (ﬁgure continues)
E.4
LTI Viewer Examples
7

E.5 Simulink and the LTI Viewer
Readers who are using Simulink may use the LTI Viewer to obtain responses and their
characteristics directly from Simulink models. All of the response plots and characteristics
available to you in the LTI Viewer using transfer functions generated in MATLAB and
placed in the MATLAB workspace are available to you from your Simulink model. Any
nonlinear blocks in your Simulink model are linearized by the Simulink LTI Viewer before
presenting the requested response curve. You will be able to:
1. Set a point on your Simulink model where the input signal will be applied.
2. Set output points on your Simulink model where responses will be obtained.
3. Specify operating conditions, such as initial conditions and input value.
E.6 Using the LTI Viewer with Simulink
In this section we present the steps you may follow to use the LTI Viewer with Simulink.
Help is available on the menu bar of the MATLAB Window. Click on the encircled
question mark. When the help screen is available, choose Simulink Control Design. Help is
also available from Help on the menu bar of the Control and Estimation Tools Manager
Window. From Help select Simulink Control Design Help. The following summarize
the steps you may take to use the LTI Viewer with Simulink. We use the system from
Example C.3 to demonstrate.
1. Access a Simulink Model
Start with your Simulink model window shown in Figure E.7
2. Deﬁne the input and output of your analysis model
Click on the point to apply the
input. Right click on the selected point and choose Linear Analysis Points then Input
Perturbation on the drop-down menu. Next, click on the point to view the output. Right
click on the selected point and choose Linear Analysis Points then Output
FIGURE E.6
(Continued)
b. LTI Viewer
8
Appendix E: MATLAB’s GUI Tools Tutorial

Measurement on the drop-down menu. The input and output points are shown on the
Simulink model of Figure E.7.
3. Linearize the model
Under the Analysis menu select Control Design followed by
Linear Analysis . . .
In response, MATLAB opens the Linear Analysis Tool
Window, Figure E.8. Select the Exact Linearization tab followed by pressing the
Linearize green arrow on the Toolstrip.
4. Launch the LTI Viewer
After linearization, the LTI Viewer is launched in the Linear
Analysis Tool window as shown in Figure E.9. All of the LTI Viewer functions
previously described are now available.
E.6
Using the LTI Viewer with Simulink
9
FIGURE E.7
Simulink model window showing Input Perturbation point and Output
Measurement point
FIGURE E.8
Linear Analysis Tool window

E.7 The SISO Design Tool: Description
The SISO Design Tool is a convenient and intuitive way to obtain, view, and interact with a
system’s root locus and Bode plots. The tool also has the option of using a Nichols chart,
which can be selected under the View menu. After the tool produces these plots, you can do
the following with the root locus: (1) drag closed-loop poles along the root locus and read
gain, damping ratio, natural frequency, and pole location, (2) view immediate changes in the
Bode plots, and (3) view immediate changes in the system’s closed-loop response via the
LTI Viewer for SISO Design Tool window. You can add poles, zeros, and compensators,
which can be interactively changed to see the immediate effects on the root locus, Bode
plots, and time response.
You can do the following with the Bode plots: (1) effect a gain change by moving the
Bode magnitude curve up and down and reading the gain, gain margin, gain margin
frequency, phase margin, phase margin frequency, and whether the loop is stable or
unstable, (2) view immediate changes on the root locus, and (3) view immediate changes in
the system’s closed-loop response via the LTI Viewer for SISO Design Tool window. You
can add poles, zeros, and compensators, which can be interactively changed to see the
immediate effect on the Bode plots, root locus, and time response.
Finally, you can add root locus or Bode plot design constraints that are then displayed
on the respective plot.
E.8 Using the SISO Design Tool
In this section we present the steps you may follow to use the SISO Design Tool. If you have
trouble, help is available by selecting SISO Design Tool Help under the SISO Design for
SISO Design Task window Help menu. Context-sensitive help also is available. Select the
FIGURE E.9
Linear Analysis Tool window after linearization showing inserted LTI Viewer
10
Appendix E: MATLAB’s GUI Tools Tutorial

context-sensitive tool (the arrow and question mark) from the SISO Design for SISO
Design Task window, move it to the item on the SISO Design for SISO Design Task
window about which you have a question, and click. The explanation will appear in the
Help window. Help is also available on the Status Bar at the bottom of the SISO Design
Tool window. Finally, screen tips are available for the toolbar buttons. Let your mouse’s
pointer rest on the button for a few seconds to see the explanation. The following summarize
the steps you may take to use the SISO Design Tool.
1. Access the SISO Design Tool
The SISO Design for SISO Design Task window,
shown in Figure E.10, may be accessed by typing sisotool in the MATLAB Command
Window or by executing this command in an M-ﬁle.
2. Create LTI transfer functions
Create open-loop LTI transfer functions for which you
want to analyze closed-loop characteristics or design compensators. The transfer
functions can be created in an M-ﬁle or in the MATLAB Command Window. Run
the M-ﬁle or MATLAB Command Window statements to place the transfer functions
in the MATLAB workspace. All LTI objects in the MATLAB workspace can be
exported to the SISO Design Tool. For this example we run an M-ﬁle and generate the
LTI object for Gs  s  8=s  3s  6s  10.
3. Create the closed-loop model for the SISO Design Tool
Choose Import . . . under
the File menu in the SISO Design for SISO Design Task window to display the System
Data window shown in Figure E.11(a).
FIGURE E.10
SISO Design for SISO Design Task window
E.8 Using the SISO Design Tool
11

Type the LTI transfer function in the Data column. Alternately, click the Browse . . .
button and select the function you want to analyze in the resulting Model Import window
shown in Figure E.11(b). Click Import followed by Close in the Model Import window.
Click OK in the System Data window.
4. Interact with the SISO Design Tool
After the System Data window closes, the SISO
Design for SISO Design Task window now contains the root locus and Bode plots for
the system as shown in Figure E.12.
You can now add the window to your desktop from which you can immediately view
closed-loop responses as you make changes to the root locus or Bode plot. Under the
Analysis menu select the desired response to open the LTI Viewer for SISO Design Task
window. Be sure to right-click on the LTI Viewer for SISO Design Task and choose
Systems to display the system response you desire. See the earlier Task sections of this
appendix for information on the LTI Viewer.
FIGURE E.11
a. The System Data window b. The Model Import window
12
Appendix E: MATLAB’s GUI Tools Tutorial

Changing gain
You may change the loop gain in three ways. (1) Grab a closed-loop
pole (red squares) on the root locus. When the arrow cursor changes to a hand, hold down
the left button of your mouse and drag the closed-loop pole along the root locus. You will
see immediate changes on the Bode plot and the closed-loop response in the LTI Viewer
for SISO Design Task window. The value of gain will be displayed in the Status Bar at the
bottom of the SISO Design for SISO Design Task window. (2) The loop gain can also be
changed by positioning the cursor over the open-loop Bode magnitude plot until it changes
to a hand. Hold down the left button of your mouse and drag the Bode magnitude plot up
or down. You will see immediate changes on the root locus and closed-loop response.
(3) Finally, the gain can also be changed by choosing Design in the SISO Design for SISO
Design Task menu bar and then selecting Edit Compensator . . . When the Control and
Estimation Tools Manager window appears, type the desired gain in the Compensator
Editor section and hit enter. As you change the gain, notice that you can read the gain and
phase margins and the gain and phase margin frequencies at the bottom of the Bode
magnitude and phase plots. Also, at the bottom of the Bode magnitude plot you are told
whether or not your closed-loop system is stable.
Grids
You may toggle the root locus and Bode plot grids on and off by right-
clicking in the respective plot’s window and selecting or deselecting Grid. The root locus
grids are damping ratio and natural frequency.
Zoom
See the instructions for zooming in Section E.3, using the LTI Viewer.
Design constraints
You may add design boundaries on your plots. For example, if
you want the settling time to be less than 2 seconds, a vertical gray bar immediately to the
right of 2 will signify the boundary for that portion of the root locus where the settling
FIGURE E.12
SISO Design for SISO Design Task window
E.8 Using the SISO Design Tool
13

time does not meet the requirements. These constraints may be selected by right-clicking
a respective plot and selecting Design Requirements. Choose whether you want a
New . . . constraint or you want to Edit . . . an existing constraint. Constraints may also
be edited on the plots. Position your cursor at the boundary of the constraint. Left click and
when it turns into a four-pointed arrow, you can drag the boundary to a new position. The
values of the constraints are displayed in the Status Bar at the bottom of the plots.
Properties
Right-clicking in a plot’s window and selecting Properties . . . dis-
plays the Property Editor window. From this window you can control some properties of
the plot, such as axis labels and limits. There are other options available. For instance, you
may change the damping ratio grids to show percent overshoot by right-clicking in the root
locus window and selecting Properties . . .
Once the Property Editor window is
displayed, click the Options tab and select Display damping values as % peak overshoot.
You may want to explore other options available for the root locus and Bode plots.
Add poles, zeros, and compensators
Poles and zeros may be added from the SISO
Design Tool for SISO Design Task window toolbar shown in Figure E.13. Use the SISO
Design for SISO Design Task toolbar and select the desired compensator pole or zero. Your
cursor shows that a pole or zero was selected. Point your cursor arrow to the point on the root
locus or Bode plot where you want to add the compensator and click. The compensator is
shown in the Control and Estimation Tools Manager window under the Compensator
Editor tab. The effect of adding the compensator is immediately seen in the root locus, Bode
plots, and LTI Viewer for SISO Design Task windows. You may change the way the
compensator is represented by going to SISO Tool Preferences . . . under the Edit menu.
Select the Options tab and choose the compensator format you want.
Editing compensators
The pole and zero values of the compensators can be edited in
several ways. (1) Place your cursor over a compensator zero or pole on the root locus or Bode
plot. When the cursor changes to a hand, hold down the left button of your mouse and drag the
pole or zero to a new position. (2) Choose Design then Edit Compensator . . . on the SISO
Design for SISO Task window menu bar. In response, MATLAB produces the Control and
Estimation Tools Manager. Under the Compensator Editor tab you can type in another
location for compensator zeros and poles. (3) Poles and zeros can be erased using the eraser on
the tool bar in Figure E.13. Select the eraser with your mouse and click on the pole or zero you
wishtoerase.The effectofeditingthecompensatorisimmediately seenintheroot locus, Bode
plots, and LTI Viewer for SISO Design Task response window.
Other options and windows
There are other options and windows available that
may be important to your project. You are encouraged to explore other menu items not
discussed in this section.
Summary
This appendix described three MATLAB GUI tools: the LTI Viewer, the Simulink LTI
Viewer, and the SISO Design Tool.
FIGURE E.13
SISO Design for SISO Design Task window toolbar
14
Appendix E: MATLAB’s GUI Tools Tutorial

We described how to use MATLAB’s LTI Viewer to obtain time and frequency
response plots, as well as critical points on those plots, for transfer functions within the
MATLAB workspace. Several examples covering step responses for continuous and
sampled systems, Nyquist diagrams, Bode plots, and Nichols charts were given.
In addition, several preferences that we did not describe are available from the LTI
Viewer Edit menu. Within that menu, choose Plot Conﬁgurations . . . to select a response
layout. Line Styles . . . allows you to change the color, marker, and line style orders. The
interested reader should consult the Control System Toolbox reference listed in the
Bibliography of this appendix for more details about options not covered in this appendix
as well as additional instruction about the LTI Viewer.
The Simulink LTI Viewer extends the usefulness of the LTI Viewer to Simulink
diagrams. Simulink models are linearized before presenting the response curves in the
Simulink LTI Viewer. You may set the input and output points at any appropriate place
ontheSimulinkdiagram.YoumaymakechangestotheSimulinkdiagramandsimultaneously
display the response of each mode in the Simulink LTI Viewer.
The SISO Design Tool is a convenient and intuitive way to obtain, view and interact
with a system’s root locus, Bode plot, and Nichols plot. You can move closed-loop poles
along the root locus and immediately read the values of gain, locations of closed-loop poles,
and characteristics of performance, Furthermore, you can see the changes in the open-loop
frequency response as well as the closed-loop response if you have the LTI Viewer for SISO
Design Task open. Gain also can be adjusted on the open-loop frequency response plots, and
the effect can be seen immediately on the root locus and closed-loop responses. Finally, you
can add compensators and see the immediate effect on the root locus, open-loop frequency
response plots, and the closed-loop responses.
In conclusion, it should be pointed out that results obtained from the GUIs might be
different from the analysis presented in the chapters. For example, the GUIs use non-
asymptotic frequency response plots to obtain results, while our analysis and design may
have used asymptotic Bode plots. Another example is settling time. In Chapter 4 we
approximated the settling time so that it was measured at the peaks. With the GUIs the actual
settling time is used, that is, the time the curve ﬁrst enters and stays within the 2%
boundary.
Bibliography
MathWorks. Control System ToolboxTM Getting Started Guide R2014a. MathWorks, Natick, MA,
2000–2014.
MathWorks. MATLABPrimer R2014a. MathWorks, Natick, MA, 1984–2014.
MathWorks. SimulinkUser’s Guide R2014a. MathWorks, Natick, MA, 1990–2014.
MathWorks. SimulinkControl DesignTM Getting Started Guide R2014a. MathWorks, Natick, MA,
2004–2014.
Bibliography
15

Appendix F: MATLAB’s Symbolic
Math Toolbox Tutorial
F.1 Introduction
Readers who are studying MATLAB may want to explore the additional functionality of
MATLAB’s Symbolic Math Toolbox. Before proceeding, the reader should have studied
Appendix B, the MATLAB tutorial, including Section B.1, which is applicable to this
appendix.
MATLAB’s Symbolic Math Toolbox Version 6.0 in addition to MATLAB Version 8.3
(R2014a) and the Control System Toolbox Version 9.7 is required in order to add symbolic
mathematics capability to your M-ﬁles.
The M-ﬁles in this appendix are available elsewhere on this Web site.
Symbolic math commands are used in your MATLAB M-ﬁles right along with your
standard MATLAB statements. The only additional requirement is to declare symbolic
variables before they are used with the statement syms x1 x2..., where xi are symbolic
variables.
Some of the added capabilities that the Symbolic Math Toolbox yields for control
systems analysis and design include the following:
1. Functions and equations can be entered symbolically. That is, alpha characters as
well as numerical characters can be used in your M-ﬁles. For example, you can enter
B=x^2+3∗x+7, instead of B=[1 3 7]. You could even enter B=a∗x^2+b∗x+c and
obtain its factors as
[
2
1/2]
[
-b + (b - 4 a c)
]
[1/2 — — — — — — — — — — — — — — — — — — — ]
[
a
]
[
]
[
2
1/2]
[
-b - (b - 4 a c)
]
[1/2 — — — — — — — — — — — — — — — — — — — ]
[
a
]
2. Symbolic expressions can be manipulated algebraically and simpliﬁed.
3. Transfer functions can be typed almost as written, making your M-ﬁles more readable.
For example, the statement, G=(s+1)∗(s+2)/[(s^2+3∗s+10)∗(s+4)] would re-
place the three statements, numg=poly([1 2]), deng=conv([1 3 10),[1 4]),
and G=tf(numg,deng).
1

4. Laplace and z-transforms as well as their inverses can be entered and found in symbolic
form.
5. Functions can be “pretty printed” for clarity in the MATLAB Command Window and
printed output.
These are only a few advantages of using the Symbolic Math Toolbox. This appendix
will explore more. The reader is encouraged not to stop exploration at the end of
Appendix F, since there is so much more than can be covered here. The Bibliography
at the end of this appendix gives references for further pursuit.
The format of the examples in this appendix follows Appendix B. Symbolic
programs use the designation: chapter <number> symbolic program<number>, that is,
ch2sp3. Thus, the programs in this appendix can be distinguished from Appendix B programs
by the use of “sp” (symbolic program) before the program number, rather than “p” (program),
that is, ch2p3. Symbolic Math Toolbox examples are included for Chapters 2, 3, 4, 6, and 13.
The reader is encouraged, however, to apply what is learned to other chapters.
F.2 Symbolic Math Toolbox Examples
Chapter 2: Modeling in the Frequency Domain
ch2sp1
MATLAB’s calculating power is greatly enhanced using the Symbolic Math
Toolbox. In this example we demonstrate its power by calculating inverse Laplace trans-
forms of F(s). The beginning of any symbolic calculation requires deﬁning the symbolic
objects. For example, the Laplace transform variable, s, or the time variable, t, must be
deﬁned as a symbolic object. This deﬁnition is performed using the syms command.
Thus, syms s deﬁnes s as a symbolic object; syms t deﬁnes t as a symbolic object;
and syms s t deﬁnes both s and t as symbolic objects. We need only deﬁne objects
that we input to the program. Variables produced by the program need not be deﬁned.
Thus, if we are ﬁnding inverse Laplace transforms, we need only deﬁne s as a symbolic
object, since t results from the calculation. Once the object is deﬁned, we can then type F
as a function of s as we normally would write it. We do not have to use vectors to
represent the numerator and denominator. The Laplace transforms or time functions can
also be printed in the MATLAB Command Window as we normally would write it.
This form is called pretty printing. The command is pretty(F), where F is the function
we want to pretty print. In the code below, you can see the difference between normal
printing and pretty printing if you run the code without the semicolons at the steps where
the functions, F or f, are deﬁned. Once F is deﬁned as F(s), we can ﬁnd the inverse Laplace
transform using the command ilaplace(F). In the following example, we ﬁnd the inverse
Laplace transforms of the frequency functions in the examples used for Cases 2 and 3 in
Section 2.2 in the text.
'(ch2sp1)'
% Display label.
syms s
% Construct symbolic object for
% Laplace variable 's'.
'Inverse Laplace transform'
% Display label.
F=2/[(s+1)*(s+2)^2];
% Define F(s) form case 2 example.
'F(s) from case 2'
% Display label.
pretty (F)
% Pretty print F(s)
f=ilaplace(F);
% Find inverse Laplace transform.
'f(t) for case 2'
% Display label.
pretty(f)
% Pretty print f(t) for Case 2.
F=3/[s*(s^2+2*s+5)];
% Define F(s) from Case 3 example.
'F(s) for Case 3'
% Display label.
pretty(F)
% Pretty print F(s) for Case 3.
2
Appendix F: MATLAB’s Symbolic Math Toolbox Tutorial

f=ilaplace(F);
% Find inverse Laplace transform.
'f(t) for Case 3'
% Display label.
pretty(f)
% Pretty print f(t) for Case 3.
Pause
ch2sp2
In this example, we ﬁnd Laplace transforms of time functions using the
command, laplace(f), where f is a time function, f(t). As an example, we use
the time functions that resulted from the calculations in Cases 2 and 3 in Section 2.2 in
the text and work in reverse to obtain their Laplace transforms. We will see that the
command, laplace(f), yields F(s) in partial fractions. In addition to pretty printing
discussed in the previous example, the Symbolic Math Toolbox contains other commands
that can change the look of the displayed result for readability and form. Some of these
commands are: collect(F)—collect common coefﬁcient terms of F; expand(F)—
expands product of factors of F; factor(F)—factors F; simple(F)—ﬁnds
simplest form of F with the least number of terms; simplify(F)—simpliﬁes
F; vpa(expression, places)—standing for variable precision arithmetic, this
command converts fractional symbolic terms into decimal terms with a speciﬁed number
of decimal places. For example, the symbolic fraction, 3/16, would be converted to 0.1875 if
the argument, places, were 4. In the example below, we ﬁnd the Laplace transform of a
time function. The result is displayed as partial fractions. To combine the partial fractions,
we use the command, simplify(F), where F is the Laplace transform of f(t) found using
laplace(f). Finally, we use F=vpa(F,3) to convert the symbolic fractions to
decimals in the displayed result.
'(ch2sp2)'
% Display label.
syms t
% Construct symbolic object for
% time variable 't'.
'Laplace transform'
% Display label.
'f(t) from Case 2'
% Display label.
f=2*exp(-t)-2*t*exp(-2*t)-2*exp(-2*t);
% Define f(t) from Case 2 example.
pretty(f)
% Pretty print f(t) from Case 2
% example.
'F(s) for Case 2'
% Display label.
F=laplace(f);
% Find Laplace transform.
pretty(F)
% Pretty print partial fractions of
% F(s) for Case 2.
F=simplify(F);
% Combine partial fractions.
pretty(F)
% Pretty print combined partial
% fractions.
'f(t) for Case 3'
% Display label.
f=3/5-3/5*exp(-t)* [cos(2 * t)+(1/2)*sin(2 * t)];
% Define f(t) from Case 3 example.
pretty (f)
% Pretty print f(t) for Case 3.
'F(s) for Case 3 - Symbolic fractions'
% Display label.
F=laplace(f);
% Find Laplace transform.
pretty(F)
% Pretty print partial fraction of
% F(s) for Case 3.
'F(s) for Case 3 - Decimal representation'
% Display label.
F=vpa(F,3);
% Convert symbolic numerical
% fractions to 3-place decimal
% representation for F(s).
pretty(F)
% Pretty print decimal
% representation.
F.2 Symbolic Math Toolbox Examples
3

'F(s) for Case 3 - Simplified
% Display label.
F=simplify(F);
% Combine partial fractions.
pretty(F)
% Pretty print combined partial
% fractions.
pause
ch2sp3
MATLAB’s Symbolic Math Toolbox may be used to simplify the input of
complicated transfer functions as follows: Initially, input the transfer function G(s) =
numg/deng via symbolic math statements. Then convert G(s) to an LTI transfer function
object. This conversion is done in two steps. The ﬁrst step uses the command [numg,
deng]=numden(G) to extract the symbolic numerator and denominator of G. The
second step converts, separately, the numerator and denominator to vectors using the
command sym2poly(S), where S is a symbolic polynomial. The last step consists
of forming the LTI transfer function object by using the vector representation of the
transfer function’s numerator and denominator. As an example, we form the LTI object
Gs  54s  27s352s237s 73=ss4872s3 437s2 89s 65 s2  79s 36,
making use of MATLAB’s Symbolic Math Toolbox for simplicity and readability.
'(ch2sp3)'
% Display label.
syms s
% Construct symbolic object for
% frequency variable's'.
G=54*(s+27)*(s^3+52*s^2+37*s+73)...
/(s*(s^4+872*s^3+437*s^2+89*s+65)*(s^2+79*s+36));
% Form symbolic G(s).
'Symbolic G(s)'
% Display label.
pretty(G)
% Pretty print symbolic G(s).
[numg,deng]=numden(G);
% Extract symbolic numerator and
% denominator.
numg=sym2poly(numg);
% Form vector for numerator of
% G(s).
deng=sym2poly(deng);
% Form vector for denominator of
% G(s).
'LTI G(s) in Polynomial Form'
% Display label.
Gtf=tf(numg,deng)
% Form and display LTI object for
% G(s) in polynomial form.
'LTI G(s) in Factored Form'
% Display label.
Gzpk=zpk(Gtf)
% Convert G(s) to factored form.
pause
ch2sp4 (Example 2.10)
MATLAB’s Symbolic Math Toolbox may be used to simplify
the solution of simultaneous equations by using Cramer’s rule. A system of simultaneous
equations can be represented in matrix form by AxB, where A is the matrix formed from
the coefﬁcients of the unknowns in the simultaneous equations, x is a vector containing the
unknowns, and B is a vector containing the inputs. Cramer’s rule states that xk the kth
element of the solution vector, x, is found using xk  detAk=detA, where Ak is the matrix
formed by replacing the kth column of matrix A with the input vector, B. In the text we refer
to det(A) as “delta.” In MATLAB, matrices are written with a space or comma separating
the elements of each row. The next row is indicated with a semicolon or carriage return.
The entire matrix is then enclosed in a pair of square brackets. Applying the above to the
solution of Example 2.10: A=[(R1+L∗s)L∗s;L∗s (L∗s+R2+(1/(c∗s)))] and
Ak=[(R1+L∗s) V;L∗s 0]. The function det(matrix) evaluates the determinant of
the square matrix argument. Let us now ﬁnd the transfer function Gs  I2s=Vs, asked
for in Example 2.10. The command simplify(S), where S is a symbolic function, is
introduced in the solution. Simplify(S) simpliﬁes the solution by shortening the length
4
Appendix F: MATLAB’s Symbolic Math Toolbox Tutorial

of S. The use of simplify(I2) shortens the solution by combining like powers of the
Laplace variable, s.
'(ch2sp4) Example 2.10'
% Display label.
syms s R1 R2 L c V
% Construct symbolic objects for
% frequency variable 's', and
%'R1','R2', 'L','c', and 'V'.
% Note: Use lower-case 'c'
% in declaration for
% capacitor.
A2=[(R1+L*s)V;-L*s 0]
% Form Ak = A2.
A=[(R1+L*s)-L*s;-L*s (L*s+R2+(1/(c*s)))]
% Form A.
I2=det(A2)/det(A);
% Use Cramer's rule to solve for
% I2(s).
I2=simplify(I2);
% Reduce complexity of I2(s)
G=I2/V;
% Form transfer function,
% G(s) = I2(s)/V(s).
'G(s)'
% Display label.
pretty (G)
% Pretty print G(s).
pause
Chapter 3: Modeling in the Time Domain
ch3sp1 (Example 3.6)
MATLAB’s Symbolic Math Toolbox may be used to perform
matrix operations. The code for these operations is intuitive and readable. The operations
are addition (+), subraction (), inverse (^1), and matrix raised to a power n (^n). We
demonstrate by solving Example 3.6 in the text using Eq. 3.73 directly.
'(ch3sp1) Example 3.6'
% Display label.
syms s
% Construct symbolic object for
% frequency variable's'.
A=[0 1 0;0 0 1;-1 -2 -3];
% Create matrix A.
B=[10;0;0];
% Create vector B.
C=[1 0 0];
% Create vector C.
D=0;
% Create D.
I=[1 0 0;0 1 0;0 0 1];
% Create identity matrix.
'T(s)'
% Display label.
T=C*((s*I-A)^-1)* B+D;
% Find transfer function.
pretty(T)
% Pretty print transfer function.
pause
Chapter 4: Time Response
Ch4sp1 (Example 4.11)
MATLAB’s Symbolic Math Toolbox, with its ability to perform
matrix operations, lends itself to the Laplace transform solution of state equations. Also, the
command [V,D]=eig(A) allows us to ﬁnd the eigenvalues of a square matrix, A, which are
the diagonal elements of diagonal matrix D. We demonstrate by solving Example 4.11.
'(ch4sp1) Example 4.11'
% Display label.
syms s
% Construct symbolic object for
% frequency variable 's'.
'a'
% Display label.
A=[0 1 0;0 0 1;-24 -26 -9];
% Create matrix A.
B=[0;0;1];
% Create vector B.
X0=[1;0;2];
% Create initial condition vector,
% X(0).
F.2 Symbolic Math Toolbox Examples
5

U=1/(s+1);
% Create U(s).
I=[1 0 0;0 1 0;0 0 1];
% Create identity matrix.
X=((s*I-A)^-1)*(X0+B*U);
% Find Laplace transform of state
% vector.
x1=ilaplace(X(1));
% Solve for X1(t).
x2=ilaplace(X(2));
% Solve for X2(t).
x3=ilaplace(X(3));
% Solve for X3(t).
y=x1+x2;
% Solve for output, y(t).
y=vpa(y,3);
% Convert fractions to decimals.
'y(t)'
% Display label.
pretty(y)
% Pretty print y(t).
'b'
% Display label.
[V,D]=eig(A);
% Find eigenvalues, which are the
% diagonal elements of D.
'Eigenvalues on diagonal'
% Display label.
D
% Display D.
pause
ch4sp2 (Example 4.12/4.13)
In this example we use MATLAB’s Symbolic Math
Toolbox to solve state equations in the time domain. We make use of the Symbolic
Math Toolbox’s ability to perform integration. We ﬁrst solve for the state-transition matrix
by taking the inverse Laplace transform of sI  A1. We then use the convolution integral
to obtain the solution. Integration is performed using the command int(S,v,a,b),
where S is the function to be integrated, v is the variable of integration, a is the lower limit
of integration, and b is the upper limit of integration. As an example we solve Example 4.12
in the text. The state-transition matrix is obtained by the method demonstrated in Example
4.13 in the text.
'(ch4sp2) Example 4.12/4.13'
% Display label.
syms s t tau
% Construct symbolic object for
% frequency variable 's','t',
% and 'tau'.
'a'
% Display label.
A=[0 1;-8 -6]
% Create matrix A.
B=[0;1]
% Create vector B.
X0=[1;0]
% Create initial condition vector,
% X(0).
U=1
% Create u(t).
I=[1 0;0 1];
% Create identity matrix.
'E=(s*I-A)^-1'
% Display label.
E=((s*I-A)^-1)
% Find Laplace transform of state-
% transition
matrix,(sI-A)^-1.
Fi11=ilaplace(E(1,1));
% Take inverse Laplace transform
Fi12=ilaplace(E(1,2));
% of each element
Fi21=ilaplace(E(2,1));
% of (sI-A)^-1
Fi22=ilaplace(E(2,2));
% to find state-transition matrix.
'Fi(t)'
% Display label.
Fi=[Fi11 Fi12;Fi21 Fi22];
% Form state-transition matrix,
% Fi(t).
pretty(Fi)
% Pretty print state-transition
% matrix, Fi(t).
Fitmtau=subs(Fi,t,t-tau);
% Form Fi(t-tau).
'Fi(t-tau)'
% Display label.
pretty(Fitmtau)
% Pretty print Fi(t-tau).
X=Fi*X0+int(Fitmtau*B*1,tau,0,t); % Solve for X(t).
X=expand(X);
% Expand X for clearer display.
6
Appendix F: MATLAB’s Symbolic Math Toolbox Tutorial

'X(t)'
% Display label.
pretty(X)
% Pretty print X (t).
pause
Chapter 6: Stability
ch6sp1 (Example 6.2)
MATLAB’s Symbolic Math Toolbox may be used conveniently
to calculate the values in a Routh table. The toolbox is particularly useful for more
complicated tables, where symbolic objects, such as epsilon, are used. In this example we
represent each row of the Routh table by a vector. Expressions are written for subsequent
row elements by using the equations given in Table 6.2 of the text. The MATLAB command
det(M) is used to ﬁnd the determinant of the square matrix, M, as shown for each row
element in Table 6.2. Further, we test the previous row’s ﬁrst element to see if it is zero.
If it is zero, it is replaced by epsilon, e, in the next row’s calculation. The preceding logic is
performed using MATLAB’s IF/ELSE/END as shown in the code below.
We now demonstrate the making of a Routh table using the Symbolic Math Toolbox
for a problem that requires the epsilon method to complete the table. The following program
produces the Routh table for Example 6.2 in the text. Also, for clarity, we convert all rows to
symbolic objects, simplify, and pretty print after forming the table. CAUTION: In general,
the results of this program are not valid if an entire row is zero as e approaches zero, such
as[e 0 0 0]. This case must be handled differently, as discussed in text Section 6.3 in the
subsection, “Entire Row Is Zero.”
'(ch6sp1) Example 6.2'
% Display label.
% -det([si() si(); sj() sj()])/sj()
% Template for use in each cell.
syms e
% Construct a symbolic object for
% epsilon.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
s5=[1 3 5 0 0];
% Create s^5 row of Routh table.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
s4=[2 6 3 0 0];
% Create s^4 row of Routh table.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if -det([s5(1) s5(2);s4(1) s4(2)])/s4(1)==0
s3=[e...
-det([s5(1) s5(3);s4(1) s4(3)])/s4(1) 0 0];
% Create s^3 row of Routh table
% if 1st element is 0.
else
s3=[-det([s5(1) s5(2);s4(1) s4(2)])/s4(1)...
-det([s5(1) s5(3);s4(1) s4(3)])/s4(1) 0 0];
% Create s^3 row of routh table
% if 1st element is not zero.
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if -det([s4(1) s4(2);s3(1) s3(2)])/s3(1)==0
s2=[e...
-det([s4(1) s4(3);s3(1) s3(3)])/s3(1) 0 0];
% Create s^2 row of Routh table
% If 1st element is 0.
else
s2=[-det([s4(1) s4(2);s3(1) s3(2)])/s3(1)...
-det([s4(1) s4(3);s3(1) s3(3)])/s3(1) 0 0];
% Create s^2 row of Routh table
% if 1st element is not zero.
end
F.2 Symbolic Math Toolbox Examples
7

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if -det([s3(1) s3(2);s2(1) s2(2)])/s2(1)==0
s1=[e...
-det([s3(1) s3(3);s2(1) s2(3)])/s2(1) 0 0];
% Create s^1 row of Routh table
% if 1st element is 0.
else
s1=[-det([s3(1) s3(2);s2(1) s2(2)])/s2(1)...
-det([s3(1) s3(3);s2(1) s2(3)])/s2(1) 0 0];
% Create s^1 row of Routh table
% if 1st element is not zero.
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
s0=[-det([s2(1) s2(2);s1(1) s1(2)])/s1(1)...
-det([s2(1) s2(3);s1(1) s1(3)])/s1(1) 0 0];
% Create s^0 row of Routh table.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
's5'
% Display label.
s5=sym(s5);
% Convert s5 to a symbolic object.
s5=simplify(s5);
% Simplify terms in s^5 row.
pretty(s5)
% Pretty print s^5 row.
's4'
% Display label.
s4=sym(s4);
% Convert s4 to a symbolic object.
s4=simplify(s4);
% Simplify terms in s^4 row.
pretty(s4)
% Pretty print s^4 row.
's3'
% Display label.
s3=sym(s3);
% Convert s3 to a symbolic object.
s3=simplify(s3);
% Simplify terms in s^3 row.
pretty(s3)
% Pretty print s^3 row.
's2'
% Display label.
s2=sym(s2);
% Convert s2 to a symbolic object.
s2=simplify(s2);
% Simplify terms in s^2 row.
pretty(s2)
% Pretty print s^2 row.
's1'
% Display label.
s1=sym(s1);
% Convert s1 to a symbolic object.
s1=simplify(s1);
% Simplify terms in s^1 row.
pretty(s1)
% Pretty print s^1 row.
's0'
% Display label.
s0=sym(s0);
% Convert s0 to a symbolic object.
s0=simplify(s0);
% Simplify terms in s^0 row.
pretty(s0)
% Pretty print s^0 row.
pause
ch6sp2 (Example 6.9)
MATLAB’s Symbolic Math Toolbox also may be used conveniently to calculate the values
in a Routh table that contains a variable gain, K. The technique is similar to the previous
example, ch6sp1, except that K, rather than e, is used as the symbolic object. We now
demonstrate the solution of Example 6.9 in the text using MATLAB and MATLAB’s
Symbolic Math Toolbox.
'(ch6sp2) Example 6.9'
% Display label.
% -det([si() si();sj() sj()])/sj()
% Template for use in each cell.
syms K
% Construct a symbolic object for
% gain, K.
s3=[1 77 0 0];
% Create s^3 row of Routh table.
8
Appendix F: MATLAB’s Symbolic Math Toolbox Tutorial

s2=[18 K 0 0];
% Create s^2 row of Routh table.
s1=[-det([s3(1) s3(2);s2(1) s2(2)])/s2(1)...
-det([s3(1) s3(3);s2(1) s2(3)])/s2(1) 0 0];
% Create s^1 row of Routh table.
s0=[-det([s2(1) s2(2);s1(1) s1(2)])/s1(1)...
-det([s2(1) s2(3);s1(1) s1(3)])/s1(1) 0 0];
% Create s^0 row of Routh table.
's3'
% Display label.
s3=sym(s3);
% Convert s3 to a symbolic object.
s3=simplify(s3);
% Simplify terms in s^3 row.
pretty(s3)
% Pretty print s^3 row.
's2'
% Display label.
s2=sym(s2);
% Convert s2 to a symbolic object.
s2=simplify(s2);
% Simplify terms in s^2 row.
pretty(s2)
% Pretty print s^2 row.
's1'
% Display label.
s1=sym(s1);
% Convert s1 to a symbolic object.
s1=simplify(s1);
% Simplify terms in s^1 row.
pretty(s1)
% Pretty print s^1 row.
's0'
% Display label.
s0=sym(s0);
% Convert s0 to a symbolic object.
s0=simplify(s0);
% Simplify terms in s^0 row.
pretty(s0)
% Pretty print s^0 row.
pause
Chapter 13: Digital Control Systems
ch13sp1 (Example 13.1)
MATLAB’s Symbolic Math Toolbox and the command
ztrans(f) can be used to ﬁnd the z-transform of a time function, f, represented as
f(nT). MATLAB assumes that the default sampled-time independent variable is n and the
default transform independent variable is z. If you want to use k instead of n, that is, f(kT),
use ztrans(f,k,z). This command overrides MATLAB’s defaults and assumes the
sampled-time independent variable to be k. Let us solve Example 13.1 using MATLAB’s
Symbolic Math Toolbox.
'(ch13sp1) Example 13.1'
% Display label.
syms n T
% Construct symbolic objects for
%'n' and 'T'.
'f(nT)'
% Display label.
f=n*T;
% Define f(nT).
pretty(f)
% Pretty print f(nT).
'F(z)'
% Display label.
F=ztrans(f);
% Find z-transform, F(z).
pretty(F)
% Pretty print F(z).
pause
ch13sp2 (Example 13.2)
MATLAB’s Symbolic Math Toolbox and the command
iztrans(F) can be used to ﬁnd the time-sampled function represented as f(nT), given
its z-transform, F(z). If you want the sampled time function returned as f(kT), then
change MATLAB’s default independent sampled-time variable by using the command
iztrans(F,k). Let us solve Example 13.2 using MATLAB’s Symbolic Math Toolbox.
'(ch13sp2) Example 13.2'
% Display label.
syms z k
% Construct symbolic objects for
%'z' and 'k'.
'F(z)'
% Display label.
F.2 Symbolic Math Toolbox Examples
9

F=0.5*z/((z-0.5)*(z-0.7));
% Define F(z).
pretty (F)
% Pretty print F(z).
'f(kT)'
% Display label.
f=iztrans(F,k);
% Find inverse z-transform, f(kT).
pretty(f)
% Pretty print f(kT).
'f(nT)'
% Display label.
f=iztrans(F);
% Find inverse z-transform, f(nT).
pretty(f)
% Pretty print f(nT).
pause
ch13sp3 (Example 13.4)
MATLAB’s Symbolic Math Tolbox can be used to ﬁnd the
z-tansform of a transfer function, G(s), in cascade with a z.o.h. Two new commands
are introduced. The ﬁrst, compose(f,g), allows a variable g to replace the variable t in
f(t). We use this command to replace t in g2(t) with nT before taking the z-transform. The other
new command is subs(S,old,new). Subs stands for symbolic substitution. Old is a
variablecontainedinS.Newisanumericalorsymbolicquantitytoreplaceold.Weusesubs
to replace T in G(z) with a numerical value. To ﬁnd the z-transform of a transfer function, G(s),
in cascade with a z.o.h. by using MATLAB’s Symbolic Math Toolbox, we perform the
following steps: (1) Construct G2s  Gs=s; (2) ﬁnd the inverse Laplace transform of
G2(s); (3) replace t with nT in g2(t); (4) ﬁnd Gz  1  z1G2z; (5) substitue a numerical
value for T. Let us solve Example 13.4 using MATLAB’s Symbolic Math Toolbox.
'(ch13sp3) Example 13.4'
% Display label.
syms s z n T
% Construct symbolic objects for
% 's', 'z', 'n', and 'T'.
G2s=(s+2)/(s*(s+1));
% Form G2(s)=G(s)/s.
'G2(s)=G(s)/s'
% Display label.
pretty(G2s)
% Pretty print G2(s).
'g2(t)'
% Display label.
g2t=ilaplace(G2s);
% Find g2(t).
pretty(g2t)
% Pretty print g2(t).
g2nT=compose(g2t,n*T);
% Find g2 (nT).
'g2(nT)'
% Display label.
pretty(g2nT)
% Pretty print g2(nT).
Gz=(1-z^-1)* ztrans(g2nT);
% Find G(z)=(1-z^-1)G2(z).
Gz=simplify(Gz);
% simplify G(z).
'G(z)=(1-z^-1)G2(z)'
% Display label.
pretty(Gz)
% Pretty print G(z).
Gz=subs(Gz,T,0.5);
% Let T=0.5 in G(z).
Gz=vpa(simplify(Gz),4);
% Simplify G(z) and evaluate
% numerical values to 4 places.
'G(z) evaluated for T=0.5'
% Display label.
pretty(Gz)
% Pretty print G(z) with numerical
% values.
pause
F.3 Command Summary
diff (S,'x')
Differentiate the symbolic function, S, with respect to variable, x.
compose(f,g)
Substitute g(y) for x in f(x).
expand(x)
Expand a symbolic function.
ilaplace(X)
Find inverse Laplace transform of X(s).
int(S,v,a,b)
Integrate S with respect to v from lower limit a to upper limit b.
10
Appendix F: MATLAB’s Symbolic Math Toolbox Tutorial

iztrans(F,k)
Find inverse z-transform. Finds f(kT) given F(z).
Without optional ﬁeld, k, ﬁnds f(nT).
laplace(x)
Find Laplace transform of x(t).
numden(G)
Extract symbolic numerator and denominator from G(s).
pretty(x)
Pretty print x.
simple(x)
Find simplest from of symbolic object x.
simplify(x)
Simplify x.
subs(S,old,new)
Substitute new for old in symbolic S.
sym(v)
Convert v to a symbolic object.
syms x y z
Declare x, y, and z to be symbolic objects.
sym2poly(P)
Convert symbolic polynomial, P, to a vector.
vpa(x,D)
Use variable precision arithmetic. Convert fractional symbolic
values to decimal with D places.
ztrans(f)
Find z-transform of f(nT).
Bibliography
MathWorks. Control System Toolbox
TM Getting Started Guide R1024a. MathWorks, Natick, MA,
2000–2014.
MathWorks. MATLABPrimer R2014. MathWorks, Natick, MA, 1984–2014.
MathWorks. Symbolic Math Toolbox
TM User’s Guide R2014a. MathWorks, Natick, MA, 1993–2014.
Bibliography
11

Appendix G: Matrices, Determinants,
and Systems of Equations
G.1 Matrix Deﬁnitions and Notations
Matrix
An m × n matrix is a rectangular or square array of elements with m rows and n columns. An
example of a matrix is shown in Eq. (G.1).
A 
a11
a12
∙∙∙
a1n
a21
a22
∙∙∙
a2n
...
...
...
...
am1
am2
∙∙∙
amn
2
66664
3
77775
G:1
For each subscript, aij, i = the row, and j = the column. If m = n, the matrix is said to be a
square matrix.
Vector
If a matrix has just one row, it is called a row vector. An example of a row vector follows:
B 
b11
b12
∙∙∙
b1n


G:2
If a matrix has just one column, it is called a column vector. An example of a column vector
follows:
C 
c11
c12
..
.
cm1
2
66664
3
77775
G:3
1

Partitioned Matrix
A matrix can be partitioned into component matrices or vectors. For example, let
A 
a11
a12
a13
a14
a21
a22
a23
a24
a31
a32
a33
a34
a41
a42
a43
a44
2
6664
3
7775 
a11
a12
a13
a14
a21
a22
a23
a24
a31
a32
a33
a34
a41
a42
a43
a44
2
6664
3
7775 
A11
A12
A21
A22


G:4
where
A11 
a11
a12
a21
a22
a31
a32
2
64
3
75;
A12 
a13
a14
a23
a24
a33
a34
2
64
3
75
A21 
a41
a42


;
A22 
a43
a44


Null Matrix
A matrix with all elements equal to zero is called the null matrix; that is, aij  0 for all i and j
An example of a null matrix follows:
A 
0
0
0
∙∙∙
0
0
0
0
∙∙∙
0
..
.
..
.
..
.
..
.
..
.
..
.
..
.
0
0
0
0
0
0
0
2
66664
3
77775
G:5
Diagonal Matrix
A square matrix with all elements off of the diagonal equal to zero is said to be a diagonal
matrix; that is, aij  0 for i 6 j. An example of a diagonal matrix follows:
A 
a11
0
0
∙∙∙
0
0
a22
0
∙∙∙
0
0
0
a33
∙∙∙
0
...
...
...
...
...
0
0
0
∙∙∙
ann
2
66666664
3
77777775
G:6
Identity Matrix
A diagonal matrix with all diagonal elements equal to unity is called an identity matrix and is
denoted by I; that is, aij  1 for i  j, and aij  0 for i 6 j. An example of an identity matrix
follows:
A 
1
0
0
∙∙∙
0
0
1
0
∙∙∙
0
..
.
..
.
..
.
..
.
..
.
0
0
0
∙∙∙
1
2
66664
3
77775
G:7
2
Appendix G: Matrices, Determinants, and Systems of Equations

Symmetric Matrix
A square matrix for which aij = aji is called a symmetric matrix. An example of a symmetric
matrix follows:
A 
3
8
7
8
9
2
7
2
4
2
64
3
75
G:8
Matrix Transpose
The transpose of matrix A, designated AT, is formed by interchanging the rows and columns
of A. Thus, if A is an m × n matrix with elements aij, the transpose is an n × m matrix with
elements aji. An example follows. Given
A 
1
7
9
2
6
3
4
8
5
1
3
2
2
6664
3
7775
G:9
then
AT 
1
2
4
1
7
6
8
3
9
3
5
2
2
64
3
75
G:10
Determinant of a Square Matrix
The determinant of a square matrix is denoted by det A, or
a11
a12
∙∙∙
a1n
a21
a22
∙∙∙
a2n
...
...
...
...
am1
am1
∙∙∙
amn
2
66664
3
77775
G:11
The determinant of a 2  2 matrix,
A 
a11
a12
a21
a22


G:12
is evaluated as
det A  a11
a12
a21
a22

  a11a22  a21a12
G:13
Minor of an Element
The minor, Mij of element aij of det A is the determinant formed by removing the ith row and the
jth column from det A. As an example, consider the following determinant:
det A 
3
8
7
6
9
2
5
1
4


G:14
G.1 Matrix Deﬁnitions and Notations
3

The minor M32 is the determinant formed by removing the third row and the second column
from det A. Thus,
M32  3
7
6
2

  36
G:15
Cofactor of an Element
The cofactor, Cij, of element aij of det A is deﬁned to be
Cij  1

ijMij
G:16
For example, given the determinant of Eq. (G.14)
C21  1

21M21  1

3 8
7
1
4

  25
G:17
Evaluating the Determinant of a Square Matrix
The determinant of a square matrix can be evaluated by expanding minors along any row or
column. Expanding along any row, we ﬁnd
det A  P
n
k1
aikCik
G:18
where n = number of columns of A; j is the jth row selected to expand by minors; and Cik is
the cofactor of aik. Expanding along any column, we ﬁnd
det A  P
m
k1
akjCkj
G:19
where m = number of rows of A; j is the jth column selected to expand by minors; and Ckj is
the cofactor of akj. For example, if
A 
1
3
2
5
6
7
8
5
4
2
64
3
75
G:20
then, expanding by minors on the third column, we ﬁnd
det A  2 5
6
8
5

  7 1
3
8
5

  4
1
3
5
6

  195
G:21
Expanding by minors on the second row, we ﬁnd
det A  5 3
2
5
4

  6 1
2
8
4

  7 1
3
8
5

  195
G:22
Singular Matrix
A matrix is singular if its determinant equals zero.
Nonsingular Matrix
A matrix is nonsingular if its determinant does not equal zero.
4
Appendix G: Matrices, Determinants, and Systems of Equations

Adjoint of a Matrix
The adjoint of a square matrix, A, written adj A, is the matrix formed from the transpose of the
matrix A after all elements have been replaced by their cofactors. Thus,
adj A 
C11
C12
∙∙∙
C1n
C21
C22
∙∙∙
C2n
...
...
...
...
Cn1
Cn2
∙∙∙
Cnn
2
66664
3
77775
T
G:23
For example, consider the following matrix:
A 
1
2
3
1
4
5
6
8
7
2
64
3
75
G:24
Hence,
adj A 

4
5
8
7



1
5
6
7


1
4
6
8



2
3
8
7


1
3
6
7



1
2
6
8


2
3
4
5



1
3
1
5


1
2
1
4

2
666666664
3
777777775
T

12
10
2
37
11
8
32
4
6
2
64
3
75
G:25
Rank of a Matrix
The rank of a matrix, A, equals the number of linearly independent rows or columns. The
rank can be found by ﬁnding the highest-order square submatrix that is nonsingular. For
example, consider the following:
A 
1
5
2
4
7
5
3
15
6
2
64
3
75
G:26
The determinant of A  0. Since the determinant is zero, the 3  3 matrix is singular.
Choosing the submatrix
A 
1
5
4
7


G:27
whose determinant equals 27, we conclude that A is of rank 2.
G.2 Matrix Operations
Addition
The sum of two matrices, written A + B = C, is deﬁned by aij + bij = cij. For example,
2
1
3
5



7
5
4
3



9
6
1
8


G:28
G.2 Matrix Operations
5

Subtraction
The difference between two matrices, written A – B = C, is deﬁned by aij – bij = cij. For
example,
2
1
3
5



7
5
4
3



5
4
7
2


G:29
Multiplication
The product of two matrices, written AB = C, is deﬁned by cij  P
n
k1
aikbkj. For example, if
A 
a11
a12
a13
a21
a22
a23


;
B 
b11
b12
b13
b21
b22
b23
b31
b32
b33
2
64
3
75
G:30
then
C 
a11b11  a12b21  a13b31


a11b12  a12b22  a13b32


a11b13  a12b23  a13b33


a21b11  a22b21  a23b31


a21b12  a22b22  a23b32


a21b13  a22b23  a23b33




G:31
Notice that muitiplicalion is deﬁned only if the number of columns of A equals the number
of rows of B.
Multiplication by a Constant
A matrix can be multiplied by a constant by multiplying every element of the matrix by that
constant. For example, if
A 
a11
a12
a21
a22


G:32
then
kA 
ka11
ka12
ka21
ka22


G:33
Inverse
An n  n square matrix, A, has an inverse, denoted by A1, which is deﬁned by
AA1  I
G:34
where I is an n  n identity matrix. The inverse of A is given by
A1  adj A
det A
G:35
For example, ﬁnd the inverse of A in Eq. (G.24). The adjoint was calculated in Eq. (G.25).
The determinant of A is
det A  1 4
5
8
7

  1 2
3
8
7

  6 2
3
4
5

  34
G:36
6
Appendix G: Matrices, Determinants, and Systems of Equations

Hence,
A1 
12
10
2
37
11
8
32
4
6
2
64
3
75
34

0:353
0:294
0:059
1:088
0:324
0:235
0:941
0:118
0:176
2
64
3
75
G:37
G.3 Matrix and Determinant Identities
The following are identities that apply to matrices and determinants.
Matrix Identities
Commutative Law
A  B  B  A
G:38
AB 6 BA
G:39
Associative Law
A  B  C  A  B  C
G:40
ABC  ABC
G:41
Transpose of Sum
A  BT  AT  BT
G:42
Transpose of Product
ABT  BTAT
G:43
Determinant Identities
Multiplication of a Single Row or Single Column of a Matrix, A, by a Constant
If a single row or single column of a matrix, A, is multiplied by a constant, k, forming the
matrix, Ã, then
det ~A  k det A
G:44
Multiplication of All Elements of an n × n Matrix, A, by a Constant
detkA  kndet A
G:45
Transpose
det AT  det A
G:46
G.3 Matrix and Determinant Identities
7

Determinant of the Product of Square Matrices
det AB  det A det B
G:47
det AB  det BA
G:48
G.4 Systems of Equations
Representation
Assume the following system of n linear equations:
a11x1  a12x2  ∙∙∙ a1n  b1
a21x1  a22x2  ∙∙∙ a2n  b2
..
.
an1x1  an2x2  ∙∙∙ ann  bn
G:49
This system of equations can be represented in vector-matrix form as
Ax  B
G:50
where
A 
a11
a12
∙∙∙
a1n
a21
a22
∙∙∙
a2n
..
.
..
.
..
.
..
.
an1
an2
∙∙∙
ann
2
66664
3
77775
;
B 
b1
b2
..
.
bn
2
66664
3
77775
;
x 
x1
x2
..
.
xn
2
66664
3
77775
For example, the following system of equations,
5x1  7x2  3
G:51a
8x1  4x2  9
G:51b
can be represented in vector-matrix form as Ax = B, or
5
7
8
4

 x1
x2



3
9


G:52
Solution via Matrix Inverse
If A is nonsingular, we can premultiply Eq. (G.50) by A1, yielding the solution x. Thus,
x  A1B
G:53
For example, premultiplying both sides of Eq. (G.52) by A1, where
A1 
5
7
8
4

1

0:0526
0:0921
0:1053
0:0658


G:54
we solve for x = A1B as follows:
x1
x2



0:0526
0:0921
0:1053
0:0658


3
9



0:987
0:276


G:55
8
Appendix G: Matrices, Determinants, and Systems of Equations

Solution via Cramer’s Rule
Equation (G.53) allows us to solve for all unknowns, xi, where i = 1 to n. If we are interested
in a single unknown, xk, then Cramer’s rule can be used. Given Eq. (G.50), Cramer’s rule
states that
xk  det Ak
det A
G:56
where Ak; is a matrix formed by replacing the kth column of A by B. For example, solve
Eq. (G.52). Using Eq. (G.56) with
A 
5
7
8
4


;
B 
3
9


we ﬁnd
x1 
3
7
9
4


5
7
8
4


 75
76  0:987
G:57
and
x2 
5
3
8
9


5
7
8
4


 21
76  2:276
G:58
Bibliography
Dorf, R. C. Matrix Algebra—A Programmed Introduction. Wiley, New York, 1969.
Kreyszig, E. Advanced Engineering Mathematics. 4th ed. Wiley, New York, 1979.
Wylie, C. R., Jr. Advanced Engineering Mathematics. 5th ed. McGraw-Hill, New York, 1982.
Bibliography
9

Appendix H: Control System
Computational Aids
H.1 Step Response of a System Represented in State Space
In this section we will discuss how to obtain the step response of systems represented in state
space. We will begin by discussing how state equations can be used to program a digital
computer and progress to a computer program that you can use to perform step-response
simulations.
Using State Equations for Computer Simulations
One advantage of state equations is the ability to use this representation to simulate control
systems on the digital computer. This section is devoted to demonstrating this concept.
Consider the system represented in state-space by Eqs. (H.1).
_x1
_x2



0
1
2
3


x1
x2



0
1


u t 
H:1a
y t  
2
3

 x1
x2


H:1b
x1 0
 
x2 0
 



1
2


H:1c
This system is represented in phase-variable form and has a unit step input, u(t). We are
about to formulate a solution for the system output, y(t), by numerically integrating the
differential equation on the digital computer. We will use a method called Euler’s
approximation, where the area to be integrated is approximated as a rectangle. The solution
obtained on the computer is an actual time waveform plot rather than the closed-form
expression we arrived at via the Laplace transform.
Writing the state equations explicitly, we have
dx1
dt  x2
H:2a
dx2
dt  2x1  3x2  1
H:2b
1

If we approximate dx by Δx and dt by Δt, and multiply through by Δt
Δx1  x2Δt
H:3a
Δx2  2x1  3x2  1

Δt
H:3b
We can say that the value at the next interval for either state variable is approximately the
current value plus the change. Thus,
x1 t  Δt

  x1 t   Δx1
H:4a
x2 t  Δt

  x2 t   Δx2
H:4b
Finally, from the output equation (H.1b), y(t) at the next time interval, y(t + Δt), is
y t  Δt

  2x1 t  Δt

  3x2 t  Δt


H:5
Let us see how this would work on the digital computer. From the problem statement, x1
and x2 begin at t = 0 with values 1 and 2, respectively. If we assume a Δt interval of
0.1 second1, the change in x1 and x2 from 0 to 0.1 second is found from Eqs. (H.3) to be,
Δx1  x2 0
 Δt  0:2
H:6a
Δx2  2x1 0
   3x2 0
   1

Δt  0:5
H:6b
from which the state variables at t = 0.1 second are found from Eqs. (H.4) to be
x1 0:1

  x1 0
   Δx1  0:8
H:7a
x2 0:1

  x2 0
   Δx2  1:5
H:7b
Finally, the output at t = 0.1 second is calculated from Eq. (H.5) to be,
y 0:1

  2x1 0:1

  3x2 0:1

  2:9
H:8
The values of the state variables at t = 0.1 second are used to calculate the values of the state
variables and the output at the next interval of time, t = 0.2 second. Once again the changes
in x1 and x2 are,
Δx1  x2 0:1

Δt  0:15
H:9a
Δx2  2x1 0:1

  3x2 0:1

  1

Δt  0:39
H:9b
from which the state variables at t = 0.2 second are found to be
x1 0:2

  x1 0:1

  Δx1  0:65
H:10a
x2 0:2

  x2 0:1

  Δx2  1:11
H:10b
1 Δt is selected to be small and, initially, at least an order of magnitude less than the system’s time constants. In order
to determine, empirically, how small Δt should be, the value of Δt can be successively reduced after each response
has been calculated by the computer until the difference between the current response and the previous response is
negligible. If Δt is too large, then error results from inaccurately representing the area under the state variable curve.
If Δt is too small, then round-off error will accumulate during the computation because of the numerous
calculations.
2
Appendix H: Control System Computational Aids

Finally, the output at t = 0.2 second is calculated as,
y 0:2

  2x1 0:2

  3x2 0:2

  2:03
H:11
The results are summarized in Figure H.1. Continuing in like manner until t = tf, the
maximum desired time, the response for 0  t  tf can be obtained.
Computer Program for Step Response
In this subsection we will design a computer program that simulates a system’s step response
using state equations. The code was developed using Visual BasicVersion 6 and converted
to a stand-alone application that runs on a PC2. The resulting application, recommended for
readers who do not have access to MATLAB, can be found in the Appendix H folder on
www.wiley.com/college/nise3. To run the setup program, open the folder labeled Step
Response inside the Appendix H folder and double-click on setup icon. For directions on
running the program see the README ﬁle inside the Appendix H folder. Let us now
summarize the design of the step response software.
First, we enumerate the software requirements as follows:
1. The user will input (1) system order, (2) components of the system, input, and output
matrix.
2. The user will input the initial conditions.
3. The user will input the following plot parameters: (1) iteration interval, (2) plot interval,
and (3) maximum time.
4. The program will plot the step response as well as listing the response data.
5. The program will replot the step response after allowing the user to change the initial
conditions as well as the plot parameters without reentering the system.
The program plots the step response of a system represented in state space and
permits the user to choose an iteration interval. A helpful technique of ﬁnding the
iteration interval is to run the program with successively diminishing iteration intervals
FIGURE H.1
State variables
and output for the system of
Eqs. H.1
2 Visual Basic is a registered trademark of Microsoft Corporation.
3 MATLAB is a registered trademark of The Math Works, Inc.
H.1 Step Response of a System Represented in State Space
3

until reaching an iteration interval below which there is no appreciable change in the
results.
Another parameter the user can select is the print interval which allows the user to
print at a larger time interval than the iteration interval.
The execution time of the program is also an input parameter. The user should choose
a time for which the output has already reached a steady-state value.
A simpliﬁed ﬂow-chart for the program is shown in Figure H.2 and uses the system of
Eqs. (H.1).
Code Module
We now present a sample implementation of the ﬂow-chart of Figure H.2. The routine can
run independently, as part of a Visual Basic Code Module, or tailored to another
programming language or other machines, such as hand-held calculators.
FIGURE H.2
Flow-chart for
step response program
Input
System:
Store plot point
Solve state equations for next point
Maximum
time
exceeded?
Time to 
store
plot
point?
Plot
End
No
Yes
No
Yes
x
Ax
Bu; y = Cx
A
a11
a12
a21
a22
  1
0
2
3
Start
B
b1
b2
0
1 ; C =  2
3
Iteration interval: T
0.001 second
Initial state vector: x(0)
–2
1
Plot interval: 0.1 second
Maximum time: 2 seconds
Maximum amplitude: 4
x1
(a11 x1
a12 x2
b )
1
T;
x2
(a21x1
a22x2
b )
2
T
x1
x1
x ; x
1
2
x 2
x ; y
2
c x
1
1
c x
2 2
• =
=
= −
−
=
=
∆= 
=
∆
=
+
+
∆
∆
=
+
+
∆
=
+ ∆
=
+ ∆
=
+
4
Appendix H: Control System Computational Aids

The routine can obtain its input variable values through the Visual Basic GUI
interface, as presented in the sample run below, or through another program written to
pass this code the input variables. The same is true of the output variables. In the sample run
below, output variables are passed to the Visual Basic GUI interface for display, but could
just as well be passed to another program.
We now list the sample subroutine, which we call CalcStateSpace:
' ********** Input Variables**************
'Although the following arrays are being dimensioned for a
'100th order system, only a portion of the array, defined by
'the sys_order variable, is used.
Public X(100) As Single
'X vector input.
Public A(100, 100) As Single
'A matrix Input.
Public B(100) As Single
'B matrix Input.
Public C(100) As Single
'C vector Input
Public PRNT_Int
'Print interval input.
Public sys_order
'System order input.
Public DELTAT
'Delta time input.
Public MAXTIME
'Total run-time input.
' ************** Output Variables***********************
Public DELTAX (1000) As Single
'Array holding the time for
'each point calculated.
Public Y (1000) As Single
'Array holding the output
'response value for each
'point calculated.
' **************Subroutine CalcStateSpace***************
Public Sub CalcStateSpace ()
On Error GoTo errorHandle
' *************Store initial value for plot*************
Let cx=0
For i=1 To sys_order
cx=cx + C(i-1)*X(i - 1)
Next i
Y(0)=cx
' ******************** Start plot loop******************
For K=1 To CInt(MAXTIME/PRNT_Int) Step 1
'Index for Printing interval
' **************** Start iteration loop******************
For n=1 To CInt (PRNT_Int/DELTAT) Step 1
'Index for iteration interval
For i=1 To sys_order
Let ax=0
For j=1 To sys_order
ax=ax + A(i - 1, j - 1)*X(j - 1)
Next j
DELTAX (i - 1)=(ax+B (i - 1))*DELTAT
'Calculate delta X1
Next i
H.1 Step Response of a System Represented in State Space
5

For i = 1 To sys_order
X(i - 1) = X(i - 1) + DELTAX (i - 1)
'Calculate next x
Next i
Let cx = 0
For i = 1 To sys_order
cx = cx + C(i - l)*X(i - 1)
Next I
Next n
' ***************** End iteration loop******************
Y(K) = cx
Next K
' ***************** End plot loop***********************
Exit Sub
errorHandle:
message = "System Error: " + Err.Description
MsgBox (message)
On Error GoTo 0
End Sub
As an example, data entry and results for the code shown above are via a graphical
user interface (GUI) developed in Visual Basic 6 and produced by the stand-alone
application enclosed in this folder. Figure H.3 shows the GUI interface for data entry
using the system of Eqs. H.1 as an example. Figure H.4 shows the output window for the
example.
FIGURE H.3
Step response
program: GUI interface for data
entry
6
Appendix H: Control System Computational Aids

H.2 Root Locus and Frequency Response
In this section we will develop a computer program that can be used as an alternative to
MATLAB to search for points on the root locus and obtain magnitude and phase frequency
response data. The code was developed using Visual BasicVersion 6 and converted to a
stand-alone application that runs on a PC. The resulting application, recommended for
readers who do not have access to MATLAB, can be found in the Appendix H folder on
www.wiley.com/college/nise. To run the setup program, open the folder labeled Root Locus
inside the Appendix H folder and double-click on setup icon. For directions on running the
program see the README ﬁle inside the Root Locus folder. The program also can be
adapted to hand-help calculators. Let us now summarize the design of the step response
software.
First, we enumerate the software requirements as follows:
1. The user will input the number of open-loop poles and zeros.
2. The user will input the values of the open-loop poles and zeros.
3. The user will select polar or Cartesian coordinates for the test point.
4. The user will input the coordinates of the test point.
5. The user will initiate the calculation.
6. The program will display the angle and magnitude of the open-loop transfer function at
the test point as well as the gain.
7. The user can change the open-loop poles and zeros and the test point before initiating
another calculation.
A simpliﬁed ﬂow-chart for the program is shown in Figure H.5.
Code Module
We now present a sample implementation of the ﬂow-chart of Figure H.5. The routine can
run independently, as part of a Visual Basic Code Module, or tailored to another
programming language or other machines, such as hand-held calculators.
The routine can obtain its input variable values through the Visual Basic GUI
interface, as presented in the sample run below, or through another program written to
pass this code the input variables. The same is true of the output variables. In the sample run
below, output variables are passed to the Visual Basic GUI interface for display, but could
just as well be passed to another program.
FIGURE H.4
Step response
program: output window
H.2 Root Locus and Frequency Response
7

We now list the sample subroutine, which we call RootLocusCalc:
' ************************* Input Variables *************************
Public Polar
'True or False. Determines if input test
'point is interpreted as polar coordinates
'(Polar = True or Cartesian Coordinates
'(Polar = False).
Public testAVal
'Test point x coordinate (Polar = False) or
'test point magnitude (Polar = True).
Public testBVal
'Test point y coordinate (Polar = False) or
'test point angle (Polar = True).
Public NumPolesVal
'Number of poles in system (0 to 10).
Public NumZerosVal
'Number of Zeros in system (0 to 10).
'The following variables have enough space for 10 poles,
'but only the number of data points referred to by NumPolesVal
'are stored in the array starting at the 0th element.
FIGURE H.5
Flow-chart for
root locus and frequency
response program
• Input number of poles 
• Input number of zeros 
• Input coordinates of poles 
• Input coordinates of zeros 
• Select polar or Cartesian
  coordinates for test point 
Start
Begin calculation
Test point= 
pole or zero?
Input test point
Give error message
Yes
poles angles
zero angles -
Angle =
∑
∑
Gain = Π pole lengths / Π zero lengths
Magnitude = 1 / Gain
End
8
Appendix H: Control System Computational Aids

Public RLPoleRe (10)
'Stores each open-loop poles's real part.
Public RLPoleI (10)
'Stores each open-loop poles's imaginary part.
'The following variables have enough space for 10 zeros,
'but only the number of data points referred to by NumZerosVal
'are stored in the array starting at the 0th element.
Public RLZeroRe(10)
'Stores each open-loop zero's real part.
Public RLZeroIm(10)
'Stores each open-loop zero's imaginary part.
' ************************** Output Variables **************************
Public RLKval
'Returns the Gain at the given test point.
Public RLMagVal
'Returns the magnitude at the given test point.
Public RLAngleVal
'Returns the angle in degrees at the given
'test point.
Public ErrorFlag
'If this variable is set to True, then
'an error occurred during calculation
'and the output data is disregarded.
' ********************** Subroutine RootLocusCalc **********************
Const pi = 3.14159265358979
Public Sub RootLocusCalc ()
Dim deltaX As Single
Dim deltaY As Single
ErrorFlag = False
RecGain = 1
angle = 0
If Polar = True Then 'Convert polar test point to Cartesian.
testReVal = testAVal * Cos(testBVal * pi/180)
testImVal = testAVal * Sin(testBVal * pi/180)
Else
'Test point is Cartesian - use as is.
testReVal = testAVal
testImVal = testBVal
End If
For K = 0 To NumPolesVal - 1
ReVal= RLPoleRe(K)
ImVal= RLPoleI(K)
deltaX = testReVal - ReVal
deltaY = testImVal - ImVal
If Abs(deltaX) < 0.0000000001 And_
Abs(deltaY) < 0.0000000001 Then
MsgBox ("ERROR: Test point is the same as an " & _
"open-loop pole. Enter new test point.")
ErrorFlag = 1
GoTo exitrootlocus
Else
RecGain = RecGain * CartToMag (deltaX, deltaY)
angle = angle - CartToAngle (deltaX, deltaY)
End If
Next K
H.2 Root Locus and Frequency Response
9

For K = 0 To NumZerosVal - 1
ReVal =RLZeroRe(K)
ImVal= RLZeroIm(K)
deltaX = testReVal - ReVal
deltaY = testImVal - ImVal
If Abs(deltaX) < 0.0000000001 And_
Abs(deltaY) < 0.0000000001 Then
MsgBox ("ERROR: Test point is the same as an " & _
"open-loop zero. Enter new test point.")
ErrorFlag = 1
GoTo exitrootlocus
Else
RecGain = RecGain/CartToMag(deltaX, deltaY)
angle = angle + CartToAngle(deltaX, deltaY)
End If
Next K
angle = angle * 180/pi
angle = (angle/360 - Fix(angle/360)) * 360
exitrootlocus:
If ErrorFlag < > 1 Then
RLKval = RecGain
RLMagVal = 1/RecGain
RLAngleVal = angle
End If
End Sub
' *********************Function CartToMag*********************
Public Function CartToMag(X As Single, Y As Single) As Single
CartToMag = Sqr(Abs(X ^ 2 + Y ^ 2))
End Function
' ********************* Function CartToAngle *********************
Public Function CartToAngle (deltaX, deltaY) As Single
If deltaX = 0 Then angle = pi/2 _
Else angle = Atn(Abs(deltaY)/Abs(deltaX))
If deltaY >= 0 And deltaX >= 0 Then angle = angle
If deltaY >= 0 And deltaX < 0 Then angle = (pi - angle)
If deltaY < 0 And deltaX <= 0 Then angle = -(pi - angle)
If deltaY < 0 And deltaX > 0 Then angle = -angle
CartToAngle = angle
End Function
Data entry and results for the code shown above are via a graphical user interface (GUI)
developed in Visual Basic 6 and produced by the stand-alone application included in the
Appendix H folder. Figure H.6 shows the GUI interface for data entry and results using
G s  
s  1


s s  3

 s  5

 and a test point = 2 + j3 as an example.
10
Appendix H: Control System Computational Aids

FIGURE H.6
Root locus
program: GUI interface for data
entry and results
H.2 Root Locus and Frequency Response
11

Appendix I: Derivation of a
Schematic for a DC Motor
The objective of this appendix is to derive a schematic for an armature-controlled dc motor,
including parameter relationships.1 This schematic can then be used to obtain the relationship
between the input voltage and output angular displacement of a motor.
We begin by describing the behavior of electric currents in the presence of magnetic
ﬁelds. From Figure I.1, an electric current, i, ﬂowing in a wire of length, l, in the presence of
a magnetic ﬁeld of strength B feels a force, F, equal to
F  Bli
I:1
This principle can be used to build a motor, since the force produced can be used to
turn a rotating member called a rotor. Basically, we attach the wire to the rotor, create a
magnetic ﬁeld with magnets, and allow the force to act to turn the rotor. In Figure I.2(a), we
show the wire wrapped longitudinally around a cylindrical rotor, which is called an
armature. The core is made of soft iron that easily conducts magnetic lines of force.
The magnets are cut so that at the surface of the rotor the lines of magnetic ﬂux are
perpendicular. The force produced is tangent to the rotor and causes the armature to rotate.
Each side of the loop feels a force as given by Eq. (I.1). Thus the total force, F, which acts
tangential to the core, is
F  2Bli
I:2
where ia is the current through the wire on the armature. If the radius of the armature is r,
then the developed torque, Tm, is
Tm  rF  r2Blia  Ktia
I:3
1 This appendix summarizes the derivations discussed in detail in the references listed in the Bibliography.
Force = F
Magnetic field = B
South pole
North pole
Current  = i
FIGURE I.1
Current-carrying wire in a magnetic ﬁeld
1

where Kt = 2Blr is called the torque constant, and ia is called the armature current. To
develop more torque, we can increase the magnetic ﬁeld strength, B, or equivalently Kt, by
wrapping a coil around the permanent magnets as shown in Figure I.2(b).
There is a problem with the motor in Figure I.2(a). As the wire segment shown
near point A´ passes point A, the force will still be downward and the armature will
begin to turn in the opposite direction. To correct for this reversal, we need to reverse
the direction of the current ﬂow, ia when that wire segment reaches point A. Another
reversal is required again at point A´. Figure I.2(b) shows how we can reverse the
current in the wire every half turn to keep the armature turning in the same direction.
Using slip rings to which the ends of the wire are connected, and brushes, which are
stationary and rub against the slip rings, completing the circuit for ia to ﬂow, the
current reverses every half turn. This arrangement of slip rings and brushes is called a
commutator.
So far we have seen that a force exists on the wire wrapped around the armature. We
now explore the possibility that a voltage is also induced across the terminals of this wire.
Knowledge of this voltage will help us establish a circuit model for the motor. According to
Faraday’s law, if a loop of wire, such as a single loop wrapped around the armature, is placed
in a changing magnetic ﬁeld, a voltage
vb t    dϕ
dt
I:4
will be induced across the loop, where vb(t) is the induced voltage and ϕ is the ﬂux passing
through the loop. Assuming that the ﬂux density, B, is a constant anywhere along the surface
of a half cylinder enclosed by the loop, and using ϕ = BA, where A is the surface area of the
enclosed half cylinder, the induced voltage for our single loop is
vb t   B dA
dt
I:5
To determine the surface area of the half cylinder enclosed by the loop, we examine
Figure I.3, which is an end view of the armature showing the ends of the wire and the
magnetic lines of ﬂux. The area, A1, through which the ﬂux passes from the center to the
surface is the product of the circumference and length of the cylinder, or
A1  r π  θ

l
I:6
The area, A2, through which the ﬂux passes from the surface to the center is
A2  rθ

l
I:7
FIGURE I.2
a. Current-
carrying wire on a rotor;
b. current-carrying wire on a
rotor with commutation and
coils added to the permanent
magnets to increase magnetic
ﬁeld strength
Armature
Armature
Field
Commutator
South
pole
North
pole
South
pole
North
pole
2r
A
F
F
ia
ia
ia
(b)
(a)
ia
ia
if
if
A
2
Appendix I: Derivation of a Schematic for a DC Motor

Thus,
vb t    dB A1  A2


dt
 Brl d π  2θ


dt
 2Brl dθ
dt  2Brlω  Kbω
I:8
For a motor, this induced voltage, vb(t), is called the back electromagnetic force, or back
emf. The constant Kb = 2Blr is called the back emf constant. Notice that Kt = Kb in a
consistent set of units.
Finally, the torque developed can be increased by winding a number of wire loops on
the armature. This is called the armature winding. The back emf will also be increased
because these loops can be thought of as a series connections where the voltages in each
loop will add.
In summary, if a wire carrying current ia(t) passes through a magnetic ﬁeld, a torque,
Tm(t) = Ktia(t), will be developed. Further, from Faraday’s law the wire will have an induced
voltage called the back emf. This voltage is given by vb t   Kbω t .
From the relationships that we developed, we can create a circuit model for the motor
as shown in Figure I.4. The armature winding is represented as having resistance, Ra, and,
because it is wound around the armature, inductance, La. The back emf is shown as vb(t)
A2
A1
B
loop
South
North
loop
C
B
B
r
C
FIGURE I.3
Magnetic ﬂux
density passing through a loop
of wire on an armature
Armature
circuit
+
+
Fixed
field
Rotor
Ra
La
Tm(t)
m(t)
b(t)
ea(t)
ia(t)
FIGURE I.4
DC motor circuit diagram
Appendix I: Derivation of a Schematic for a DC Motor
3

across the rotor. The ﬁxed ﬁeld is created by the electromagnets. Shown at the output of the
rotor are the developed torque, Tm(t), and the output angular displacement, θm(t).
Bibliography
Chapman, S. J. Electric Machinery Fundamentals, 2d ed. McGraw-Hill, New York, 1991.
Chiasson, J. The Physics of a DC Motor for Control Courses, Notes. University of Pittsburgh, PA,
1993.
Matsch, L. W. Electromagnetic and Electromechanical Machines. Harper & Row, New York, 1977.
4
Appendix I: Derivation of a Schematic for a DC Motor

Appendix J: Derivation of the Time
Domain Solution of State Equations
J.1 Derivation
Rather than using the Laplace transformation, we can solve the equations directly in the time
domain using a method closely allied to the classical solution of differential equations. We
will ﬁnd that the ﬁnal solution consists of two parts that are different from the forced and
natural responses
First, assume a homogeneous state equation of the form
_xt  Axt
J:1
Since we want to solve for x, we assume a series solution, just as we did in elementary scalar
differential equations. Thus,
xt  b0  b1t  b2t2  ∙∙∙ bktk  bk1tk1  ∙∙∙
J:2
Substituting Eq. (J.2) into (J.1) we get
b1  2b2t  ∙∙∙ kbktk1  k  1bk1tk  ∙∙∙
 Ab0  b1t  b2t2  ∙∙∙ bktk  bk1tk1  ∙∙∙
J:3
Equating like coefﬁcients yields
b1  Ab0
J:4a
b2  1
2 Ab1  1
2 A2b0
J:4b
..
.
bk  1
k! Akb0
J:4c
bk1 
1
k  1! Ak1b0
..
.
J:4d
Substituting these values into Eq. (J.2) yields
xt  b0  Ab0t  1
2 A2b0t2  ∙∙∙ 1
k! Akb0tk 
1
k  1! Ak1b0tk1  ∙∙∙

I  At  1
2 A2t2  ∙∙∙ 1
k! Aktk 
1
k  1! Ak1tk1  ∙∙∙


b0
J:5
1

But, from Eq. (J.2),
x0  b0
J:61
Therefore,
xt 
I  At  1
2 A2t2  ∙∙∙ 1
k! Aktk 
1
k  1! Ak1tk1  ∙∙∙


x0
J:7
Let
eAt 
I  At  1
2 A2t2  ∙∙∙ 1
k! Aktk 
1
k  1! Ak1tk1  ∙∙∙


J:8
where eAt is simply a notation for the matrix formed by the right-hand side of Eq. (J.8). We
use this deﬁnition because the right-hand side of Eq. (J.8) resembles a power series
expansion of eat, or
eat 
1  at  1
2 a2t2  ∙∙∙ 1
k! aktk 
1
k  1! ak1tk1  ∙∙∙


J:9
Using Eq. (J.7), we have
xt  eAtx0
J:10
We give a special name to eAt: it is called the state-transition matrix2, since it performs a
transformation on x(0), taking x from the initial state, x(0), to the state x(t) at any time, t. The
symbol, Φ(t), is used to denote eAt. Thus,
Φt  eAt
J:11
and
xt  Φtx0
J:12
There are some properties of Φ(t) that we will use later when we solve for x(t) in the
text. From Eq. (J.12),
x0  Φ0x0
J:13
Hence, the ﬁrst property of Φ(t) is
Φ0  I
J:14
where I is the identity matrix. Also, differentiating Eq. (J.12) and setting this equal to
Eq. (J.1) yields
_xt  _Φtx0  Axt
J:15
which, at t = 0, yields
_Φ0x0  Ax0
J:16
1 In this development we consider the initial time, t0, to be 0. More generally, t0 6 0. After completing this
development, the interested reader should consult Appendix K on www.wiley.com/college/nise for the more
general solution in terms of initial time t0 6 0.
2 The state-transition matrix here is for the initial time t0 = 0. The derivation in Appendix K on www.wiley.com/
college/nise for t0 6 0 yields xt  eAtt0xt0.
2
Appendix J: Derivation of the Time Domain Solution of State Equations

Thus, the second property of Φ(t) follows from Eq. (J.16):
_Φ0  A
J:17
In summary, the solution to the homogeneous, or unforced, system is
xt  Φtx0
J:18
where
Φ0  I
J:19
and
_Φ0  A
J:20
Let us now solve the forced, or nonhomogeneous, problem. Given the forced state
equation
_xtAxt  But
J:21
rearrange and multiply both sides by eAt:
eAt _xt  Axt

  eAtBut
J:22
Realizing that the left-hand side is equal to the derivative of the product eAtx(t), we obtain
d
dt eAtxt


 eAtBut
J:23
Integrating both sides yields
eAtxt

t
0  eAtxt  x0 
Z t
0
eAτBuτdτ
J:24
since eAt evaluated at t = 0 is the identity matrix (from Eq. (J.8)). Solving for x(t) in
Eq. (J.24) we obtain
xt  eAtx0 
Z t
0
eAtτBuτdτ
 Φtx0 
Z t
0
Φt  τBuτdτ
J:25
where Φ(t) = eAt by deﬁnition.
Bibliography
Timothy, L. K., and Bona, B. E. State Space Analysis: An Introduction. McGraw-Hill, New York,
1968.
Bibliography
3

Appendix K: Solution of State
Equations for t0 6 0
In Section 4.11 we used the state-transition matrix to perform a transformation taking x(t) from
an initial time, t0 = 0, to any time, t  0, as deﬁned in Eq. (4.109). What if we wanted to take x(t)
from a different initial time, t0 6 0, to any time t  t0; would Eq. (4.109) and the state-transition
matrix change? To ﬁnd out, we need to convert Eq. (4.109) into a form that shows t0 6 0 as the
initial state rather than t0 = 0 (Kuo, 1991).
Using Eq. (4.109), we ﬁnd x(t) at t0 to be
xt0  Φt0x0 
Z t0
0
Φt0  τBuτdτ
K:1
Solving for x(0) by premultiplying both sides of Eq. (K.1) by Φ1 (t0) and rearranging,
x0  Φ1t0xt0  Φ1t0
Z t0
0
Φt0  τBuτdτ
K:2
Substituting Eq. (K.2) into Eq. (4.109) yields
xt  ΦtΦ1t0xt0  Φ1t0
Z t0
0
Φt0  τBuτdτ

Z t0
0
Φt  τBuτdτ
 ΦtΦ1t0xt0  ΦtΦ1t0
Z t0
0
Φt0  τBuτdτ

Z t
0
Φt  τBuτdτ
K:3
Since Φt  eAt and Φt  eAt; ΦtΦt  I. Hence,
Φ1t  Φt
K:4
Therefore
ΦtΦ1t0  eAteAt0  eAtt0  Φt  t0
K:5
Substituting Eq. (K.5) into Eq. (K.3) yields
xt  Φt  t0xt0 
Z t0
0
Φt  t0Φt0  τBuτdτ

Z t
0
Φt  τBuτdτ
K:6
1

But
Φt  t0Φt0  τ  eAtt0eAt0τ  eAt0τ  Φt  τ
K:7
Substituting Eq. (K.7) into Eq. (K.6),
xt  Φt  t0xt0 
Z t0
0
Φt  τBuτdτ 
Z t
0
Φt  τBuτdτ
K:8
Combining the two integrals ﬁnally yields
xt  Φt  t0xt0 
Z t
t0
Φt  τBuτdτ
K:9
Equation (K.9) is more general than Eq. (4.109) in that it allows us to ﬁnd x(t) after an initial
time other than t0 = 0. We can see that the state-transition matrix, Φ(t – t0), is of a more general
form than previously described. In particular, the state-transition matrix is also a function of
the initial time. We conclude this section by deriving some important properties of Φ(t – t0).
Using Eq. (K.4), the inverse of Φ(t – t0) is
Φ1t  t0  Φt0  t
K:10
Also, from Eq. (K.7),
Φt2  t0  Φt2  t1Φt1  t0
K:11
which states that the transformation from t0 to t2 is the product of the transformation from t0
to t1 and the transformation from t1 to t2.
Bibliography
Kuo, B. Automatic Control Systems, 6th ed. Prentice-Hall, Englewood Cliffs, NJ, 1991.
2
Appendix K: Solution of State Equations for t0 6 0

Appendix L: Derivation
of Similarity Transformations
L.1 Introduction
In Section 5.7 in the text we saw that systems can be represented with different state
variables even though the transfer function relating the output to the input remains
the same. The various forms of the state equations were found by manipulating the transfer
function, drawing a signal-ﬂow graph, and then writing the state equations from the
signal-ﬂow diagram. These systems are called similar systems. Although their state-space
representations are different, similar systems have the same transfer function and hence
the same poles or eigenvalues.
The question now arises whether we can make transformations among similar systems
from one set of state equations to another without using the transfer function and signal-ﬂow
graphs. In this Appendix we will derive this transformation.
L.2 Expressing Any Vector in Terms of Basis Vectors
Let us begin by reviewing the representation of vector quantities in space. In Chapter 3, we
learned that the state variables form the axes of the state space. Using a second-order system as
an example, Figure L.1 shows two sets of axes, x1x2 and z1z2.1
Thus a state vector, x, in state space can be written either in terms of the state variables
or axes, x1 and x2, or if we call it z, the state variables or axes, z1 and z2. In other words, the
same vector is expressed in terms of different state variables. From this discussion we begin
to see that the transformation from one set of state equations to another may be simply the
transformation from one set of axes to another set of axes. Let us look further into this
possibility by ﬁrst clarifying the ways in which vectors can be represented in space.
Unit vectors, Ux1, and Ux2, which are collinear with the axes x1 and x2, form linearly
independent vectors called basis vectors for the space, x1x2. Any vector in the space can be
written in two ways. First, it can be written as a linear combination of the basis vectors. This
linear combination implies vector summation of the basis vectors to form that vector.
Second, any vector can be written in terms of its components along the axes. Summarizing
these two ways of writing a vector, we have
x  x1Ux1  x2Ux2 
x1
x2


L:1
1 These axes are shown to be orthogonal (90° to each other) for clarity. In general, the axes need be only linearly
independent and are not necessarily at 90°. Linear independence precludes collinear axes.
1

Similarly, the same vector, which will now be called z, can be written in terms of the basis
vectors in the z1z2 space,
z  z1Uz1  z2Uz2 
z1
z2


L:2
L.3 Vector Transformations
What is the relationship between the components of x and z in Eqs. (L.1) and (L.2)? In other
words, how do we transform vector x into vector z and vice versa? To begin we realize that
unit vectors Uz1, and Uz2, which are collinear with z1 and z2 and are basis vectors for the
space, z1z2, can be also written in terms of the basis vectors of the x1x2 space. Hence,
Uz1  p11Ux1  p21Ux2
L:3a
Uz2  p12Ux1  p22Ux2
L:3b
Substituting Eqs. (L.3) into Eq. (L.2), and realizing that the vectors z and x are the same,
yields x in terms of the components of z, or
x  z1 p11 z2 p12Ux1 z1 p21 z2 p22Ux2
L:4
which is equivalent to
x 
p11
p12
p21
p22


z1
z2


 Pz
L:5
and
z  P1x
L:6
We can think of Eq. (L.5) as a transformation that takes z in the z1z2 plane and transforms it
to x in the x1x2 plane. Hence, if we can ﬁnd P, we can make the transformation between the
two state-space representations.
L.4 Finding the Transformation Matrix, P
We can ﬁnd the transformation matrix, P, from Eqs. (L.3). Since we know all vector
quantities in the equation, we can then solve for pij’s. Notice that the columns of P are the
coordinates of the basis vectors of the z1z2 space expressed as linear combinations of the
basis vectors of the x1x2 space as shown in Eqs. (L.3). Thus the ﬁrst column of P is Uz1 and
z2
x2
z1
x1
Uz2
Uz1
Ux2
x or z
Ux1
FIGURE L.1
State-space transformations
2
Appendix L: Derivation of Similarity Transformations

the second column is Uz2. Partitioning P, we get
P  Uz1 Uz2


L:7
Let us look at an example of the transformation of a vector from one space to another.
Example L.1
Vector Transformations to New Basis
Vector Transformations to New Basis
PROBLEM: Transform the vector
x 
1
2
2
2
64
3
75
L:8
expressed with its basis vectors,
Ux1 
1
0
0
2
64
3
75;
Ux2 
0
1
0
2
64
3
75;
Ux3 
0
0
1
2
64
3
75;
L:9
to a vector expressed in the system,
Uz1 
0
1=
ﬃﬃﬃ
2
p
1=
ﬃﬃﬃ
2
p
2
64
3
75;
Uz2 
0
1=
ﬃﬃﬃ
2
p
1=
ﬃﬃﬃ
2
p
2
64
3
75;
Uz3 
1
0
0
2
64
3
75;
L:10
SOLUTION:
Using Eq. (L.2) as a guide, the vector z can be written in terms of the basis
vectors, Uzi.
z  z1Uz1  z2Uz2  z3Uz3
L:11
Substituting the values of each Uzi given in Eq. (L.10) as components of the basis vectors,
Uxi, Eq. (L.11) is transformed to the components of x,
x  z1
0
1=
ﬃﬃﬃ
2
p
1=
ﬃﬃﬃ
2
p
2
64
3
75  z2
0
1=
ﬃﬃﬃ
2
p
1=
ﬃﬃﬃ
2
p
2
64
3
75  z3
1
0
0
2
64
3
75 
0z1  0z2  0z3
1=
ﬃﬃﬃ
2
p


z1 
1=
ﬃﬃﬃ
2
p


z2  0z3
1=
ﬃﬃﬃ
2
p


z1 
1=
ﬃﬃﬃ
2
p


z2  0z3
2
6664
3
7775
L:12
which can be written as,
x 
0
0
1
1=
ﬃﬃﬃ
2
p
1=
ﬃﬃﬃ
2
p
0
1=
ﬃﬃﬃ
2
p
1=
ﬃﬃﬃ
2
p
0
2
64
3
75
z1
z2
z3
2
64
3
75
L:13
L.4 Finding the Transformation Matrix, P
3

Now that we are able to transform a state vector into different basis systems, let us see how to
transform the state-space representation between basis systems.
L.5 Transforming the State Equations
We have seen that the same state vector can be expressed in terms of different basis vectors.
This conversion amounts to selecting a different set of state variables to represent the same
system transfer function.
Let us now convert a state-space representation with state vector, x, into a state-space
representation with a state vector, z. Assume the state-space representation shown in
Eq. (L.15).
_x  Ax  Bu
L:15a
y  Cx  Du
L:15b
Let x = Pz from Eq. (L.5). Hence,
P_z  APz  Bu
L:16a
y  CPx  Du
L:16b
Premultiplying the state equation by P1,
_z  P1APz  P1Bu
L:17a
y  CPz  Du
L:17b
Eqs. (L.17) are an alternate representation of a system in state space. The transformed
system matrix is P1AP, the input coupling matrix is P1B, the output matrix is CP, and the
feedforward matrix remains D.
We now will show that the transfer function, T(s) = Y(s)=U(s), which relates the
output of the system to its input for the system represented by Eqs. (L.17), is the same as the
system of Eqs. (L.15) if, y and u are scalars, y(t) and u(t).
From Eq. (3.73), the transfer function for the system of Eqs. (L.15) is
Ts  Ys
Us  CsI  A1B  D
L:18
The transfer function of the system of Eqs. (L.17) can be found by substituting its equivalent
output, system, input, and feedforward matrices into Eq. (L.18). Hence, the transfer function
As we predicted, the columns of P are the basis vectors of the z1z2 space (Eq. (L.10)).
Also,
z  P1x 
0
0:707
0:707
0
0:707
0:707
1
0
0
2
64
3
75
1
2
2
2
64
3
75 
2:83
0
1
2
64
3
75
L:14
In summary, the vector x   1
2
2 T in the x1x2 space transforms into z 
 2:83
0
1 T in the z1z2 space. x and z are the same vector expressed in different
coordinate systems.
4
Appendix L: Derivation of Similarity Transformations

for the system of Eqs. (L.17) is
Ts  Ys
Us  CPsI  P1AP1P1B  D
L:19
Making successive use of the matrix inverse theorem, (MN)1 = N1M1, we ﬁnd
Ts  CPPsI  P1AP1B  D  CPsI  P1APP1B  D
L:20
Since (sI  P1AP)P1 = (sP1  P1AP),
Ts  CPsP1  P1A1B  D  CsI  A1B  D
L:21
which is identical to Eq. (L.18). Since the transfer function is the same, the system’s poles
and zeros remain the same through the transformation.
We can show more formally that the eigenvalues do not change under a similarity
transformation. The characteristic equation for the system prior to the transformation is
det(sIA) = 0. After the transformation, the characteristic equation is det(sIP1AP) = 0.
But, I = P1P. Therefore the characteristic equation after the transformation can be
written as
detsP1P  P1AP  detP1sI  AP  0
L:22
Since the determinant of the product of matrices is the product of the determinants,
detP1sI  AP  detP1detsI  AdetP  0
L:23
But,
detP1detP  detI  1
L:24
Hence,
detsI  P1AP  detsI  A  0
L:25
Eq. (L.25) shows that the eigenvalues do not change under the transformation.
In this appendix we have shown that a vector, x, in the x1x2 basis system can be
expressed as a vector, z, in the z1z2 basis system using
x 
p11
p12
p21
p22


z1
z2


 Pz
L:26
Similarly, the inverse is
z  P1x
L:27
We found that the transformation matrix, P, consists of columns, which are the coordinates
of the basis vectors of the z1z2 space expressed as linear combinations of the basis vectors of
the x1x2 space, or
P 
Uz1
Uz2


L:28
L.5 Transforming the State Equations
5

Using the previous results, the state equations can be transformed from the x state variables
to the z state variables using
_z  P1APz  P1Bu
L:29a
y  CPz  Du
L:29b
Finally, we found that the eigenvalues of the x system are the same as those of the z system.
Hence, the transfer function calculated from either system will be the same.
Bibliography
Timothy, L., and Bona, B., State Space Analysis: An Introduction, McGraw-Hill, New York,
1968.
6
Appendix L: Derivation of Similarity Transformations

Appendix M: Root Locus
Rules: Derivations
M.1 Derivation of the Behavior of the Root Locus
at Inﬁnity (Kuo, 1987)
Let the open-loop transfer function be represented as follows:
KGsHs 
Ksm  a1sm1  ∙∙∙ am
smn  b1smn1  ∙∙∙ bmn
M:1
or
KGsHs 
K
smn  b1smn1  ∙∙∙ bmn
sm  a1sm1  ∙∙∙ am


M:2
Performing the indicated division in the denominator, we obtain
KGsHs 
K
sn  b1  a1sn1  ∙∙∙
M:3
In order for a pole of the closed-loop transfer function to exist,
KGsHs  1
M:4
Assuming large values of s that would exist as the locus moves toward inﬁnity,
Eq. (M.3) becomes
sn  b1  a1sn1  K
M:5
Factoring out sn, Eq. (M.5) becomes
sn 1  b1  a1
s


 K
M:6
Taking the nth root of both sides, we have
s 1  b1  a1
s

1=n
 K1=n
M:7
1

If the term
1  b1  a1
s

1=n
M:8
is expanded into an inﬁnite series where only the ﬁrst two terms are signiﬁcant,1 we obtain
s 1  b1  a1
ns


 K1=n
M:9
Distributing the factor S on the left-hand side yields
s  b1  a1
n
 K1=n
M:10
Now, letting s = σ + jω and K1=n  jK1=nje j2k1π=n, where
11=n  e j2k1π=n  cos 2k  1π
n


 j sin 2k  1π
n


M:11
Eq. (M.10) becomes
σ  jω  b1  a1
n

K1=n
 cos 2k  1π
n
 j sin 2k  1π
n


M:12
where k = 0, ± 1, ± 2, ± 3, . . . Setting the real and imaginary parts of both sides equal to
each other, we obtain
σ  b1  a1
n

K1=n
cos 2k  1π
n
M:13a
ω  jk1=njsin  2k  1π
n
M:13b
Dividing the two equations to eliminate |K1/n|, we obtain
σ  b1  a1
n
ω

cos 2k  1π
n
sin 2k  1π
n
M:14
Finally, solving for ω, we ﬁnd
ω  tan 2k  1π
n


σ  b1  a1
n


M:15
The form of this equation is that of a straight line,
ω  Mσ  σ0
M:16
where the slope of the line, M, is
M  tan 2k  1π
n
M:17
1 This is a good approximation since s is approaching inﬁnity for the region applicable to the derivation.
2
Appendix M: Root Locus Rules: Derivations

Thus, the angle of the line in radians with respect to the positive extension of the real axis is
θ  2k  1π
n
M:18
and the σ intercept is
σ0   b1  a1
n


M:19
From the theory of equations,2
b1   P finite poles
M:20a
a1   P finite zeros
M:20b
Also, from Eq. (M.1),
n  number of finite poles  number of finite zeros
 #finite poles  #finite zeros
M:21
By examining Eq. (M.16), we conclude that the root locus approaches a straight line
as the locus approaches inﬁnity. Further, this straight line intersects the σ axis at
σ0 
P finite poles  P finite zeros
#finite poles  #finite zeros
M:22
which is obtained by substituting Eqs. (M.20)
Let us summarize the results: The root locus approaches straight lines as asymptotes
as the locus approaches inﬁnity. Further, the equation of the asymptotes is given by the real-
axis intercept and the angle with respect to the real axis as follows:
σ0 
P finite poles  P finite zeros
#finite poles  #finite zeros
M:23
θ 
2k  1π
#finite poles  #finite zeros
M:24
where k = 0, ± 1, ± 2, ± 3, . . . Notice that the running index, k, in Eq. (M.24) yields a
multiplicity of lines that account for the many branches of a root locus that approach inﬁnity.
M.2 Derivation of Transition Method for Breakaway
and Break-in Points
The transition method for ﬁnding real-breakaway and break-in points without differentiat-
ing can be derived by showing that the natural log of 1/[G(σ)H(σ)] has a zero derivative at
the same value of σ as 1/[G(σ)H(σ)] (Franklin, 1991).
We now show that if we work with the natural log we can eliminate the step of
differentiation.
2 Given an nth-order polynomial of the form sn + an–1sn–1 + ∙∙∙, the coefﬁcient, an–1, is the negative sum of the
roots of the polynomial.
M.2 Derivation of Transition Method for Breakaway and Break-in Points
3

First ﬁnd the derivative of the natural log of 1=[G(σ)H(σ)] and set it equal to zero.
Thus,
d
dσ ln
1
GσHσ


 GσHσ d
dσ
1
GσHσ


 0
M:25
Since G(σ)H(σ) is not zero at the breakaway or break-in points, letting
d
dσ ln
1
GσHσ


 0
M:26
will thus yield the same value of σ as letting
d
dσ
1
GσHσ


 0
M:27
Hence,
d
dσ ln
1
GσHσ


 d
dσ ln σ  p1σ  p2 ∙∙∙σ  pn
σ  z1σ  z2 ∙∙∙σ  zm


 d
dσ

lnσ  p1  lnσ  p2 ∙∙∙lnσ  pn
 lnσ  z1  lnσ  z2 ∙∙∙ lnσ  zm


1
σ  p1

1
σ  p2
∙∙∙
1
σ  pn

1
σ  z1

1
σ  z2
∙∙∙

1
σ  zm
 0
M:28
or
P
n
i1
1
σ  pi
 P
m
i1
1
σ  zi
M:29
where zi and pi are the negatives of the zero and pole values of G(s)H(s), respectively.
Equation (M.29) can be solved for σ, the real axis values that minimize or maximize K,
yielding the breakaway and break-in points without differentiating.
Bibliography
Franklin, G. F.; Powell, J. D.; and Emami-Naeini, A. Feedback Control of Dynamic Systems, 2d ed.
Addison-Wesley, Reading, Mass., 1991.
Kuo, B. Automatic Control Systems, 5th ed. Prentice-Hall, Englewood Cliffs, N.J., 1987.
4
Appendix M: Root Locus Rules: Derivations

Solutions to Skill-Assessment
Exercises
CHAPTER 2
2.1
The Laplace transform of t is 1
s2 using Table 2.1, Item 3. Using Table 2.2, Item 4,
F sð Þ ¼
1
s þ 5
ð
Þ2.
2.2
Expanding F(s) by partial fractions yields:
F sð Þ ¼ A
s þ
B
s þ 2 þ
C
s þ 3
ð
Þ2 þ
D
s þ 3
ð
Þ
where,
A ¼
10
s þ 2
ð
Þ s þ 3
ð
Þ2

S!0
¼ 5
9
B ¼
10
s s þ 3
ð
Þ2

S!2
¼ 5
C ¼
10
s s þ 2
ð
Þ

S!3
¼ 10
3 ; and D ¼ s þ 3
ð
Þ2 dF sð Þ
ds

s!3
¼ 40
9
Taking the inverse Laplace transform yields,
f tð Þ ¼ 5
9  5e2t þ 10
3 te3t þ 40
9 e3t
2.3
Taking the Laplace transform of the differential equation assuming zero initial
conditions yields:
s3C sð Þ þ 3s2C sð Þ þ 7sC sð Þ þ 5C sð Þ ¼ s2R sð Þ þ 4sR sð Þ þ 3R sð Þ
Collecting terms,
s3 þ 3s2 þ 7s þ 5


C sð Þ ¼ s2 þ 4s þ 3


R sð Þ
Thus,
C sð Þ
R sð Þ ¼
s2 þ 4s þ 3
s3 þ 3s2 þ 7s þ 5
1

2.4
G sð Þ ¼ C sð Þ
R sð Þ ¼
2s þ 1
s2 þ 6s þ 2
Cross multiplying yields,
d2c
dt2 þ 6 dc
dt þ 2c ¼ 2 dr
dt þ r
2.5
C sð Þ ¼ R sð ÞG sð Þ ¼ 1
s2 
s
s þ 4
ð
Þ s þ 8
ð
Þ ¼
1
s s þ 4
ð
Þ s þ 8
ð
Þ ¼ A
s þ
B
s þ 4
ð
Þ þ
C
s þ 8
ð
Þ
where
A ¼
1
s þ 4
ð
Þ s þ 8
ð
Þ

S!0
¼ 1
32
B ¼
1
s s þ 8
ð
Þ

S!4
¼  1
16 ; and C ¼
1
s s þ 4
ð
Þ

S!8
¼ 1
32
Thus,
c tð Þ ¼ 1
32  1
16 e4t þ 1
32 e8t
2.6
Mesh Analysis
Transforming the network yields,
+
V(s)
I1(s)
I2(s)
V1(s)
V2(s)
I9(s)
+
1
1
s
s
s
_
_
Now, writing the mesh equations,
s þ 1
ð
ÞI1 sð Þ  sI2 sð Þ  I3 sð Þ ¼ V sð Þ
sI1 sð Þ þ 2s þ 1
ð
ÞI2 sð Þ  I3 sð Þ ¼ 0
I1 sð Þ  I2 sð Þ þ s þ 2
ð
ÞI3 sð Þ ¼ 0
Solving the mesh equations for I2(s),
I2 sð Þ ¼
s þ 1
ð
Þ
V sð Þ
1
s
0
1
1
0
s þ 2
ð
Þ


s þ 1
ð
Þ
s
1
s
2s þ 1
ð
Þ
1
1
1
s þ 2
ð
Þ


¼ s2 þ 2s þ 1


V sð Þ
s s2 þ 5s þ 2
ð
Þ
2
Solutions to Skill-Assessment Exercises

But, VL sð Þ ¼ sI2 sð Þ
Hence,
VL sð Þ ¼ s2 þ 2s þ 1


V sð Þ
s2 þ 5s þ 2
ð
Þ
or
VL sð Þ
V sð Þ ¼ s2 þ 2s þ 1
s2 þ 5s þ 2
Nodal Analysis
Writing the nodal equations,
1
s þ 2


V1 sð Þ  VL sð Þ ¼ V sð Þ
V1 sð Þ þ
2
s þ 1


VL sð Þ ¼ 1
s V sð Þ
Solving for VL(s),
VL sð Þ ¼
1
s þ 2


V sð Þ
1
1
s V sð Þ


1
s þ 2


1
1
2
s þ 1




¼ s2 þ 2s þ 1


V sð Þ
s2 þ 5s þ 2
ð
Þ
or
VL sð Þ
V sð Þ ¼ s2 þ 2s þ 1
s2 þ 5s þ 2
2.7
Inverting
G sð Þ ¼  Z2 sð Þ
Z1 sð Þ ¼ 100000
105=s

 ¼ s
Noninverting
G sð Þ ¼ Z1 sð Þ þ Z sð Þ
½

Z1 sð Þ
¼
105
s þ 105
 
!
105
s
 
!
¼ s þ 1
2.8
Writing the equations of motion,
s2 þ 3s þ 1


X1 sð Þ  3s þ 1
ð
ÞX2 sð Þ ¼ F sð Þ
 3s þ 1
ð
ÞX1 sð Þ þ s2 þ 4s þ 1


X2 sð Þ ¼ 0
Chapter 2
Solutions to Skill-Assessment Exercises
3

Solving for X2(s),
X2 sð Þ ¼
s2 þ 3s þ 1


F sð Þ
 3s þ 1
ð
Þ
0


s2 þ 3s þ 1


 3s þ 1
ð
Þ
 3s þ 1
ð
Þ
s2 þ 4s þ 1




¼
3s þ 1
ð
ÞF sð Þ
s s3 þ 7s2 þ 5s þ 1
ð
Þ
Hence,
X2 sð Þ
F sð Þ ¼
3s þ 1
ð
Þ
s s3 þ 7s2 þ 5s þ 1
ð
Þ
2.9
Writing the equations of motion,
s2 þ s þ 1


u1 sð Þ  s þ 1
ð
Þu2 sð Þ ¼ T sð Þ
 s þ 1
ð
Þu1 sð Þ þ 2s þ 2
ð
Þu2 sð Þ ¼ 0
where u1 sð Þ is the angular displacement of the inertia.
Solving for u2 sð Þ,
u2 sð Þ ¼
s2 þ s þ 1


T sð Þ
 s þ 1
ð
Þ
0


s2 þ s þ 1


 s þ 1
ð
Þ
 s þ 1
ð
Þ
2s þ 2
ð
Þ


¼
s þ 1
ð
ÞF sð Þ
2s3 þ 3s2 þ 2s þ 1
From which, after simplification,
u2 sð Þ ¼
1
2s2 þ s þ 1
2.10
Transforming the network to one without gears by reflecting the 4 N-m/rad spring to
the left and multiplying by (25/50)2, we obtain,
Writing the equations of motion,
s2 þ s


u1 sð Þ  sua sð Þ ¼ T sð Þ
su1 sð Þ þ s þ 1
ð
Þua sð Þ ¼ 0
where u1 sð Þ is the angular displacement of the 1-kg inertia.
Solving for ua sð Þ,
ua sð Þ ¼
s2 þ s


T sð Þ
s
0


s2 þ s


s
s
s þ 1
ð
Þ


¼
sT sð Þ
s3 þ s2 þ s
4
Solutions to Skill-Assessment Exercises

From which,
ua sð Þ
T sð Þ ¼
1
s2 þ s þ 1
But, u2 sð Þ ¼ 1
2 ua sð Þ:
Thus,
u2 sð Þ
T sð Þ ¼
1=2
s2 þ s þ 1
2.11
First find the mechanical constants.
Jm ¼ Ja þ JL
1
5  1
4

2
¼ 1 þ 400
1
400


¼ 2
Dm ¼ Da þ DL
1
5  1
4

2
¼ 5 þ 800
1
400


¼ 7
Now find the electrical constants. From the torque-speed equation, set vm ¼ 0 to
find stall torque and set Tm ¼ 0 to find no-load speed. Hence,
Tstall ¼ 200
vnoload ¼ 25
which,
Kt
Ra
¼ Tstall
Ea
¼ 200
100 ¼ 2
Kb ¼
Ea
vnoload
¼ 100
25 ¼ 4
Substituting all values into the motor transfer function,
um sð Þ
Ea sð Þ ¼
KT
RaJm
s s þ 1
Jm


Dm þ KTKb
Ra

 ¼
1
s s þ 15
2


where um sð Þ is the angular displacement of the armature.
Now uL sð Þ ¼ 1
20 um sð Þ. Thus,
uL sð Þ
Ea sð Þ ¼
1=20
s s þ 15
2


2.12
Letting
u1 sð Þ ¼ v1 sð Þ=s
u2 sð Þ ¼ v2 sð Þ=s
Chapter 2
Solutions to Skill-Assessment Exercises
5

in Eqs. 2.127, we obtain
J1s þ D1 þ K
s


v1 sð Þ  K
s v2 sð Þ ¼ T sð Þ
 K
s v1 sð Þ þ
J2s þ D2 þ K
s


v2 sð Þ
From these equations we can draw both series and parallel analogs by considering
these to be mesh or nodal equations, respectively.
–
+
J1
J1
J2
J2
D1
D1
D2
D2
T(t)
T(t)
w1(t)
w1(t)
w2(t)
w2(t)
1
1
K
1
1
Series analog
Parallel analog
K
2.13
Writing the nodal equation,
C dv
dt þ ir  2 ¼ i tð Þ
But,
C ¼ 1
v ¼ vo þ dv
ir ¼ evr ¼ ev ¼ evoþdv
Substituting these relationships into the differential equation,
d vo þ dv
ð
Þ
dt
þ evoþdv  2 ¼ i tð Þ
ð1Þ
We now linearize ev.
The general form is
f v
ð Þ  f vo
ð
Þ  df
dv

vo
dv
Substituting the function, f v
ð Þ ¼ ev, with v ¼ vo þ dv yields,
evoþdv  evo  dev
dv

vo
dv
6
Solutions to Skill-Assessment Exercises

Solving for evoþdv,
evoþdv ¼ evo þ dev
dv

vo
dv ¼ evo þ evodv
Substituting into Eq. (1)
ddv
dt þ evo þ evodv  2 ¼ i tð Þ
ð2Þ
Setting i tð Þ ¼ 0 and letting the circuit reach steady state, the capacitor acts like an
open circuit. Thus, vo ¼ vr with ir ¼ 2. But, ir ¼ evr or vr ¼ lnir.
Hence, vo ¼ ln 2 ¼ 0:693. Substituting this value of vo into Eq. (2) yields
ddv
dt þ 2dv ¼ i tð Þ
Taking the Laplace transform,
s þ 2
ð
Þdv sð Þ ¼ I sð Þ
Solving for the transfer function, we obtain
dv sð Þ
I sð Þ ¼
1
s þ 2
or
V sð Þ
I sð Þ ¼
1
s þ 2 about equilibrium:
CHAPTER 3
3.1
Identifying appropriate variables on the circuit yields
–
+
–
+
C1
iL
iC2
iC1
iR
C2
R
L
vo(t)
v1(t)
Writing the derivative relations
C1
dvC1
dt
¼ iC1
L diL
dt ¼ vL
C2
dvC2
dt
¼ iC2
ð1Þ
Chapter 3
Solutions to Skill-Assessment Exercises
7

Using Kirchhoff’s current and voltage laws,
iC1 ¼ iL þ iR ¼ iL þ 1
R vL  vC2
ð
Þ
vL ¼ vC1 þ vi
iC2 ¼ iR ¼ 1
R vL  vC2
ð
Þ
Substituting these relationships into Eqs. (1) and simplifying yields the state
equations as
dvC1
dt
¼ 
1
RC1
vC1 þ 1
C1
iL 
1
RC1
vC2 þ
1
RC1
vi
diL
dt ¼  1
L vC1 þ 1
L vi
dvC2
dt
¼ 
1
RC2
vC1 
1
RC2
vC2
1
RC2
vi
where the output equation is
vo ¼ vC2
Putting the equations in vector-matrix form,
_x ¼

1
RC1
1
C1

1
RC1
 1
L
0
0

1
RC2
0

1
RC2
2
66666664
3
77777775
x þ
1
RC1
1
L
1
RC2
2
66666664
3
77777775
vi tð Þ
y ¼ 0
0
1
½
x
3.2
Writing the equations of motion
s2 þ s þ 1


X1 sð Þ
sX2 sð Þ
¼ F sð Þ
sX1 sð Þ þ s2 þ s þ 1


X2 sð Þ
X3 sð Þ
¼ 0
X2 sð Þ þ s2 þ s þ 1


X3 sð Þ ¼ 0
Taking the inverse Laplace transform and simplifying,
€x1 ¼ _x1  x1 þ _x2 þ f
€x2 ¼ _x1  _x2  x2 þ x3
€x3 ¼ _x3  x3 þ x2
Defining state variables, zi,
z1 ¼ x1; z2 ¼ _x1; z3 ¼ x2; z4 ¼ _x2; z5 ¼ x3; z6 ¼ _x3
8
Solutions to Skill-Assessment Exercises

Writing the state equations using the definition of the state variables and the inverse
transform of the differential equation,
_z1 ¼ z2
_z2 ¼ €x1 ¼ _x1  x1 þ _x2 þ f ¼ z2  z1 þ z4 þ f
_z3 ¼ _x2 ¼ z4
_z4 ¼ €x2 ¼ _x1  _x2  x2 þ x3 ¼ z2  z4  z3 þ z5
_z5 ¼ _x3 ¼ z6
_z6 ¼ €x3 ¼ _x3  x3 þ x2 ¼ z6  z5 þ z3
The output is z5. Hence, y ¼ z5. In vector-matrix form,
_z ¼
0
1
0
0
0
0
1
1
0
1
0
0
0
0
0
1
0
0
0
1
1
1
1
0
0
0
0
0
0
1
0
0
1
0
1
1
2
666666664
3
777777775
z þ
0
1
0
0
0
0
2
666666664
3
777777775
f tð Þ; y ¼ 0
0
0
0
1
0
½
z
3.3
First derive the state equations for the transfer function without zeros.
X sð Þ
R sð Þ ¼
1
s2 þ 7s þ 9
Cross multiplying yields
s2 þ 7s þ 9


X sð Þ ¼ R sð Þ
Taking the inverse Laplace transform assuming zero initial conditions, we get
€x þ 7_x þ 9x ¼ r
Defining the state variables as,
x1 ¼ x
x2 ¼ _x
Hence,
_x1 ¼ x2
_x2 ¼ €x ¼ 7_x  9x þ r ¼ 9x1  7x2 þ r
Using the zeros of the transfer function, we find the output equation to be,
c ¼ 2_x þ x ¼ x1 þ 2x2
Putting all equation in vector-matrix form yields,
_x ¼
0
1
9
7
"
#
x þ
0
1
"
#
r
c ¼ 1
2
½
x
Chapter 3
Solutions to Skill-Assessment Exercises
9

3.4
The state equation is converted to a transfer function using
G sð Þ ¼ C sI  A
ð
Þ1B
ð1Þ
where
A ¼
4
1:5
4
0
	

; B ¼
2
0
	

; and C ¼ 1:5
0:625
½
:
Evaluating sI  A
ð
Þ yields
sI  A
ð
Þ ¼
s þ 4
1:5
4
s
	

Taking the inverse we obtain
sI  A
ð
Þ1 ¼
1
s2 þ 4s þ 6
s
1:5
4
s þ 4
	

Substituting all expressions into Eq. (1) yields
G sð Þ ¼
3s þ 5
s2 þ 4s þ 6
3.5
Writing the differential equation we obtain
d2x
dt2 þ 2x2 ¼ 10 þ df tð Þ
ð1Þ
Letting x ¼ xo þ dx and substituting into Eq. (1) yields
d2 xo þ dx
ð
Þ
dt2
þ 2 xo þ dx
ð
Þ2 ¼ 10 þ df tð Þ
ð2Þ
Now, linearize x2.
xo þ dx
ð
Þ2  x2
o ¼ d x2


dx

xo
dx ¼ 2xodx
from which
xo þ dx
ð
Þ2 ¼ x2
o þ 2xodx
ð3Þ
Substituting Eq. (3) into Eq. (1) and performing the indicated differentiation gives
us the linearized intermediate differential equation,
d2dx
dt2 þ 4xodx ¼ 2x2
o þ 10 þ df tð Þ
ð4Þ
The force of the spring at equilibrium is 10 N. Thus, since F ¼ 2x2; 10 ¼ 2x2
o from
which
xo ¼
ﬃﬃﬃ
5
p
10
Solutions to Skill-Assessment Exercises

Substituting this value of xo into Eq. (4) gives us the final linearized differential
equation.
d2dx
dt2 þ 4
ﬃﬃﬃ
5
p
dx ¼ df tð Þ
Selecting the state variables,
x1 ¼ dx
x2 ¼ _dx
Writing the state and output equations
_x1 ¼ x2
_x2 ¼€dx ¼ 4
ﬃﬃﬃ
5
p
x1 þ df tð Þ
y ¼ x1
Converting to vector-matrix form yields the final result as
_x ¼
0
1
4
ﬃﬃﬃ
5
p
0
	

x þ
0
1
	

df tð Þ
y ¼ 1
0
½
x
CHAPTER 4
4.1
For a step input
C sð Þ ¼
10 s þ 4
ð
Þ s þ 6
ð
Þ
s s þ 1
ð
Þ s þ 7
ð
Þ s þ 8
ð
Þ s þ 10
ð
Þ ¼ A
s þ
B
s þ 1 þ
C
s þ 7 þ
D
s þ 8 þ
E
s þ 10
Taking the inverse Laplace transform,
c tð Þ ¼ A þ Bet þ Ce7t þ De8t þ Ee10t
4.2
Since a ¼ 50; Tc ¼ 1
a ¼ 1
50 ¼ 0:02s; Ts ¼ 4
a ¼ 4
50 ¼ 0:08 s; and
Tr ¼ 2:2
a ¼ 2:2
50 ¼ 0:044 s.
4.3
a. Since poles are at 6  j 19:08; c tð Þ ¼ A þ Be6tcos 19:08t þ f
ð
Þ.
b. Since poles are at 78:54 and 11:46; c tð Þ ¼ A þ Be78:54t þ Ce11:4t.
c. Since poles are double on the real axis at 15 c tð Þ ¼ A þ Be15t þ Cte15t:
d. Since poles are at j 25; c tð Þ ¼ A þ B cos 25t þ f
ð
Þ.
4.4
a. vn ¼
ﬃﬃﬃﬃﬃﬃﬃﬃ
400
p
¼ 20 and 2zvn ¼ 12; ;z ¼ 0:3 and system is underdamped.
b. vn ¼
ﬃﬃﬃﬃﬃﬃﬃﬃ
900
p
¼ 30 and 2zvn ¼ 90; ;z ¼ 1:5 and system is overdamped.
c. vn ¼
ﬃﬃﬃﬃﬃﬃﬃﬃ
225
p
¼ 15 and 2zvn ¼ 30; ;z ¼ 1 and system is critically damped.
d. vn ¼
ﬃﬃﬃﬃﬃﬃﬃﬃ
625
p
¼ 25 and 2zvn ¼ 0;
;z ¼ 0 and system is undamped.
Chapter 4
Solutions to Skill-Assessment Exercises
11

4.5
vn ¼
ﬃﬃﬃﬃﬃﬃﬃﬃ
361
p
¼ 19 and 2zvn ¼ 16;
;z ¼ 0:421:
Now, Ts ¼
4
zvn
¼ 0:5 s and Tp ¼
p
vn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
¼ 0:182 s.
From Figure 4.16, vnTr ¼ 1:4998. Therefore, Tr ¼ 0:079 s.
Finally, %os ¼ e
zp
ﬃﬃﬃ
1
p
 z2  100 ¼ 23:3%
4.6
a. The second-order approximation is valid, since the dominant poles have a real
part of 2 and the higher-order pole is at 15, i.e. more than five-times further.
b. The second-order approximation is not valid, since the dominant poles have a real
part of 1 and the higher-order pole is at 4, i.e. not more than five-times further.
4.7
a. Expanding G(s) by partial fractions yields G sð Þ ¼ 1
s þ 0:8942
s þ 20  1:5918
s þ 10  0:3023
s þ 6:5.
But 0:3023 is not an order of magnitude less than residues of second-order terms
(term 2 and 3). Therefore, a second-order approximation is not valid.
b. Expanding G(s) by partial fractions yields G sð Þ ¼ 1
s þ 0:9782
s þ 20  1:9078
s þ 10  0:0704
s þ 6:5.
But 0.0704 is an order of magnitude less than residues of second-order terms
(term 2 and 3). Therefore, a second-order approximation is valid.
4.8
SeeFigure4.31inthetextbookfortheSimulinkblockdiagramandtheoutputresponses.
4.9
a. Since
sI  A ¼
s
2
3
s þ 5
	

; sI  A
ð
Þ1 ¼
1
s2 þ 5s þ 6
s þ 5
2
3
s
	

:
Also,
BU sð Þ ¼
0
1= s þ 1
ð
Þ
"
#
.
The state vector is X sð Þ ¼ sI  A
ð
Þ1 x 0
ð Þ þ BU sð Þ
½
 ¼
1
s þ 1
ð
Þ s þ 2
ð
Þ s þ 3
ð
Þ 
2 s2 þ 7s þ 7


s2  4s  6
"
#
. The output is Y sð Þ ¼ 1
3
½
X sð Þ ¼
5s2 þ 2s  4
s þ 1
ð
Þ s þ 2
ð
Þ s þ 3
ð
Þ ¼
 0:5
s þ 1  12
s þ 2 þ 17:5
s þ 3. Taking the inverse Laplace transform yields y tð Þ ¼
0:5et  12e2t þ 17:5e3t.
b. The eigenvalues are given by the roots of jsI  Aj ¼ s2 þ 5s þ 6, or 2 and 3.
4.10
a. Since
sI  A
ð
Þ ¼
s
2
2
s þ 5
	

; sI  A
ð
Þ1 ¼
1
s2 þ 5s þ 4
s þ 5
2
2
s
	

. Taking the
Laplace transform of each term, the state transition matrix is given by
F tð Þ ¼
4
3 et  1
3 e4t
2
3 et  2
3 e4t
 2
3 et þ 2
3 e4t
 1
3 et þ 4
3 e4t
2
664
3
775:
12
Solutions to Skill-Assessment Exercises

b. Since
F t  t
ð
Þ ¼
4
3 e tt
ð
Þ  1
3 e4 tt
ð
Þ
2
3 e tt
ð
Þ  2
3 e4 tt
ð
Þ
 2
3 e tt
ð
Þ þ 2
3 e4 tt
ð
Þ
 1
3 e tt
ð
Þ þ 4
3 e4 tt
ð
Þ
2
664
3
775 and
Bu t
ð Þ ¼
0
e2t
	

; F t  t
ð
ÞBu t
ð Þ ¼
2
3 etet  2
3 e2te4t
 1
3 etet þ 4
3 e2te4t
2
664
3
775:
Thus, x tð Þ ¼ F tð Þx 0
ð Þ þ
R t
0 F t  t
ð
Þ
BU t
ð Þdt ¼
10
3 et  e2t  4
3 e4t
 5
3 et þ e2t þ 8
3 e4t
2
664
3
775
c. y tð Þ ¼ 2
1
½
x ¼ 5et  e2t
CHAPTER 5
5.1
Combine the parallel blocks in the forward path. Then, push 1
s to the left past the
pickoff point.
1
s
s
s
s
s2 + 1
+
–
–
R(s)
C(s)
Combine the parallel feedback paths and get 2s. Then, apply the feedback formula,
simplify, and get, T sð Þ ¼
s3 þ 1
2s4 þ s2 þ 2s.
5.2
Find the closed-loop transfer function, T sð Þ ¼
G sð Þ
1 þ G sð ÞH sð Þ ¼
16
s2 þ as þ 16, where
and G sð Þ ¼
16
s s þ a
ð
Þ and H sð Þ ¼ 1. Thus, vn ¼ 4 and 2zvn ¼ a, from which z ¼ a
8.
But, for 5% overshoot, z ¼
ln
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ ln2
%
100


s
¼ 0:69. Since, z ¼ a
8 ; a ¼ 5:52.
Chapter 5
Solutions to Skill-Assessment Exercises
13

5.3
Label nodes.
+
+
+
–
–
R(s)
s
s
N1 (s)
N2 (s)
N3 (s)
N4 (s)
N6 (s)
N5 (s)
N7 (s)
s
C(s)
1
s
1
s
Draw nodes.
R(s)
N1(s)
N2(s)
N5(s)
N7(s)
N6(s)
N3(s)
N4(s)
C (s)
Connect nodes and label subsystems.
R(s)
C(s)
1
1
s
s
−1
s
s
1
1
−1
1
1
s
N1 (s)
N2 (s)
N5 (s)
N6 (s)
N7 (s)
N3 (s)
N4 (s)
Eliminate unnecessary nodes.
R(s)
C(s)
1
s
s
1
s
1
s
–s
–1
14
Solutions to Skill-Assessment Exercises

5.4
Forward-path gains are G1G2G3 and G1G3.
Loop gains are G1G2H1; G2H2;
and G3H3.
Nontouching loops are G1G2H1
½
 G3H3
½
 ¼ G1G2G3H1H3 and
G2H2
½
 G3H3
½
 ¼ G2G3H2H3.
Also, D ¼ 1 þ G1G2H1 þ G2H2 þ G3H3 þ G1G2G3H1H3 þ G2G3H2H3:
Finally, D1 ¼ 1 and D2 ¼ 1.
Substituting these values into T sð Þ ¼ C sð Þ
R sð Þ ¼
P
k TkDk
D
yields
T sð Þ ¼
G1 sð ÞG3 sð Þ 1 þ G2 sð Þ
½

1 þ G2 sð ÞH2 sð Þ þ G1 sð ÞG2 sð ÞH1 sð Þ
½
 1 þ G3 sð ÞH3 sð Þ
½

5.5
The state equations are,
_x1 ¼ 2x1 þ x2
_x2 ¼ 3x2 þ x3
_x3 ¼ 3x1  4x2  5x3 þ r
y ¼ x2
Drawing the signal-flow diagram from the state equations yields
1
s
1
s
1
s
1
1
1
1
–5
–4
–2
–3
–3
r
x1
x2
x3
y
5.6
From G sð Þ ¼ 100 s þ 5
ð
Þ
s2 þ 5s þ 6 we draw the signal-flow graph in controller canonical form
and add the feedback.
1
–5
–6
100
500
–1
y
r
1
s
1
s
x1
x2
Chapter 5
Solutions to Skill-Assessment Exercises
15

Writing the state equations from the signal-flow diagram, we obtain
x ¼
105
506
1
0
"
#
x þ
1
0
"
#
r
y ¼ 100
500
½
x
5.7
From the transformation equations,
P1 ¼
3
2
1
4
	

Taking the inverse,
P ¼
0:4
0:2
0:1
0:3
	

Now,
P1AP ¼
3
2
1
4
"
#
1
3
4
6
"
#
0:4
0:2
0:1
0:3
"
#
¼
6:5
8:5
9:5
11:5
"
#
P1B ¼
3
2
1
4
"
#
1
3
"
#
¼
3
11
"
#
CP ¼ 1
4
½

0:4
0:2
0:1
0:3
"
#
¼ 0:8
1:4
½

Therefore,
_z ¼
6:5
8:5
9:5
11:5
"
#
z þ
3
11
"
#
u
y ¼ 0:8
1:4
½
z
5.8
First find the eigenvalues.
jlI  Aj ¼
l
0
0
l
	


1
3
4
6
	


 ¼ l  1
3
4
l þ 6

 ¼ l2 þ 5l þ 6
From which the eigenvalues are 2 and 3.
Now use Axi ¼ lxi for each eigenvalue, l.
Thus,
1
3
4
6
	

 x1
x2
	

¼ l x1
x2
	

For l ¼ 2,
3x1 þ 3x2 ¼ 0
4x1  4x2 ¼ 0
16
Solutions to Skill-Assessment Exercises

Thus x1 ¼ x2
For l ¼ 3
4x1 þ 3x2 ¼ 0
4x1  3x2 ¼ 0
Thus x1 ¼ x2 and x1 ¼ 0:75x2; from which we let
P ¼
0:707
0:6
0:707
0:8
	

Taking the inverse yields
P1 ¼
5:6577
4:2433
5
5
	

Hence,
D ¼ P1AP ¼
5:6577
4:2433
5
5
"
#
1
3
4
6
"
#
0:707
0:6
0:707
0:8
"
#
¼
2
0
0
3
"
#
P1B ¼
5:6577
4:2433
5
5
"
#
1
3
"
#
¼
18:39
20
"
#
CP ¼ 1
4
½

0:707
0:6
0:707
0:8
"
#
¼ 2:121
2:6
½

Finally,
_z ¼
2
0
0
3
"
#
z þ
18:39
20
"
#
u
y ¼ 2:121
2:6
½
z
CHAPTER 6
6.1
Make a Routh table.
s7
3
6
7
2
s6
9
4
8
6
s5
4.666666667
4.333333333
0
0
s4
4.35714286
8
6
0
s3
12.90163934
6.426229508
0
0
s2
10.17026684
6
0
0
s1
1.18515742
0
0
0
s0
6
0
0
0
Since there are four sign changes and no complete row of zeros, there are four right
half-plane poles and three left half-plane poles.
6.2
Make a Routh table. We encounter a row of zeros on the s3 row. The even polynomial
is contained in the previous row as 6s4 þ 0s2 þ 6. Taking the derivative yields
Chapter 6
Solutions to Skill-Assessment Exercises
17

24s3 þ 0s. Replacing the row of zeros with the coefficients of the derivative yields
the s3 row. We also encounter a zero in the first column at the s2 row. We replace the
zero with e and continue the table. The final result is shown now as
s6
1
6
1
6
s5
1
0
1
0
s4
6
0
6
0
s3
24
0
0
0
ROZ
s2
e
6
0
0
s1
144=e
0
0
0
s0
6
0
0
0
There is one sign change below the even polynomial. Thus the even polynomial
(4th order) has one right half-plane pole, one left half-plane pole, and 2 imaginary
axis poles. From the top of the table down to the even polynomial yields one sign
change. Thus, the rest of the polynomial has one right half-plane root, and one left
half-plane root. The total for the system is two right half-plane poles, two left half-
plane poles, and 2 imaginary poles.
6.3
Since G sð Þ ¼
K s þ 20
ð
Þ
s s þ 2
ð
Þ s þ 3
ð
Þ ; T sð Þ ¼
G sð Þ
1 þ G sð Þ ¼
K s þ 20
ð
Þ
s3 þ 5s2 þ 6 þ K
ð
Þs þ 20K
Form the Routh table.
s3
1
6 þ K
ð
Þ
s2
5
20K
s1
30  15K
5
s0
20K
From the s1 row, K < 2. From the s0 row, K > 0. Thus, for stability, 0 < K < 2.
6.4
First find
sI  A
j
j ¼
s
0
0
0
s
0
0
0
s
2
64
3
75 
2
1
1
1
7
1
3
4
5
2
64
3
75


¼
s  2
ð
Þ
1
1
1
s  7
ð
Þ
1
3
4
s þ 5
ð
Þ


¼ s3  4s2  33s þ 51
Now form the Routh table.
s3
1
33
s2
4
51
s1
20:25
s0
51
There are two sign changes. Thus, there are two rhp poles and one lhp pole.
18
Solutions to Skill-Assessment Exercises

CHAPTER 7
7.1
a. First check stability.
T sð Þ ¼
G sð Þ
1 þ G sð Þ ¼
10s2 þ 500s þ 6000
s3 þ 70s2 þ 1375s þ 6000 ¼
10 s þ 30
ð
Þ s þ 20
ð
Þ
s þ 26:03
ð
Þ s þ 37:89
ð
Þ s þ 6:085
ð
Þ
Poles are in the lhp. Therefore, the system is stable. Stability also could be checked
via Routh-Hurwitz using the denominator of T(s). Thus,
15u tð Þ :
estep 1
ð
Þ ¼
15
1 þ lim
s!0 G sð Þ ¼
15
1 þ 1 ¼ 0
15tu tð Þ :
eramp 1
ð
Þ ¼
15
lim
s!0 sG sð Þ ¼
15
102030
2535
¼ 2:1875
15t2u tð Þ :
eparabola 1
ð
Þ ¼
15
lim
s!0 s2G sð Þ ¼ 30
0 ¼ 1; since L 15t2


¼ 30
s3
b. First check stability.
T sð Þ ¼
G sð Þ
1 þ G sð Þ ¼
10s2 þ 500s þ 6000
s5 þ 110s4 þ 3875s3 þ 4:37e04s2 þ 500s þ 6000
¼
10 s þ 30
ð
Þ s þ 20
ð
Þ
s þ 50:01
ð
Þ s þ 35
ð
Þ s þ 25
ð
Þ s2  7:189e  04s þ 0:1372
ð
Þ
From the second-order term in the denominator, we see that the system is unstable.
Instability could also be determined using the Routh-Hurwitz criteria on the
denominator of T(s). Since the system is unstable, calculations about steady-state
error cannot be made.
7.2
a. The system is stable, since
T sð Þ ¼
G sð Þ
1 þ G sð Þ ¼
1000 s þ 8
ð
Þ
s þ 9
ð
Þ s þ 7
ð
Þ þ 1000 s þ 8
ð
Þ ¼
1000 s þ 8
ð
Þ
s2 þ 1016s þ 8063
and is of Type 0. Therefore,
Kp ¼ lim
s!0 G sð Þ ¼ 10008
79
¼ 127; Kv ¼ lim
s!0 sG sð Þ ¼ 0;
and Ka ¼ lim
s!0 s2G sð Þ ¼ 0
b.
estep 1
ð
Þ ¼
1
1 þ lim
s!0 G sð Þ ¼
1
1 þ 127 ¼ 7:8e  03
eramp 1
ð
Þ ¼
1
lim
s!0 sG sð Þ ¼ 1
0 ¼ 1
eparabola 1
ð
Þ ¼
1
lim
s!0 s2G sð Þ ¼ 1
0 ¼ 1
Chapter 7
Solutions to Skill-Assessment Exercises
19

7.3
System is stable for positive K. System is Type 0. Therefore, for a step input
estep 1
ð
Þ ¼
1
1 þ Kp
¼ 0:1. Solving for Kp yields Kp ¼ 9 ¼ lim
s!0 G sð Þ ¼ 12K
1418; from
which we obtain K ¼ 189.
7.4
System is stable. Since G1 sð Þ ¼ 1000, and G2 sð Þ ¼ s þ 2
ð
Þ
s þ 4
ð
Þ,
eD 1
ð
Þ ¼ 
1
lim
s!0
1
G2 sð Þ þ lim G1
s!0
sð Þ
¼
1
2 þ 1000 ¼ 9:98e  04
7.5
System is stable. Create a unity-feedback system, where He sð Þ ¼
1
s þ 1  1 ¼ s
s þ 1
The system is as follows:
+
–
–
R(s)
Ea(s)
C(s)
100
s + 4
−s
s + 1
Thus,
Ge sð Þ ¼
G sð Þ
1 þ G S
ð ÞHe sð Þ ¼
100
s þ 4
ð
Þ
1 
100s
s þ 1
ð
Þ s þ 4
ð
Þ
¼ 100 s þ 1
ð
Þ
S2  95s þ 4
Hence, the system is Type 0. Evaluating Kp yields
Kp ¼ 100
4 ¼ 25
The steady-state error is given by
estep 1
ð
Þ ¼
1
1 þ Kp
¼
1
1 þ 25 ¼ 3:846e  02
7.6
Since G sð Þ ¼
K s þ 7
ð
Þ
s2 þ 2s þ 10 ; e 1
ð
Þ ¼
1
1 þ Kp
¼
1
1 þ 7K
10
¼
10
10 þ 7K .
Calculating the sensitivity, we get
Se:K ¼ K
e
@e
@K ¼
K
10
10 þ 7K


10
ð
Þ7
10 þ 7K
ð
Þ2 ¼ 
7K
10 þ 7K
20
Solutions to Skill-Assessment Exercises

7.7
Given
A ¼
0
1
3
6
	

; B ¼
0
1
	

; C ¼ 1
1
½
; R sð Þ ¼ 1
s :
Using the final value theorem,
estep 1
ð
Þ ¼ lim
s!0 sR sð Þ 1  C sI  A
ð
Þ1B
h
i
¼ lim
s!0
1  1
1
½

s
1
3
s þ 6
"
#1 0
1
"
#
2
4
3
5
¼ lim
s!0
1  1
1
½

s þ 6
1
3s
s
"
#
s2 þ 6s þ 3
0
1
"
#
2
66664
3
77775
¼ lim
s!0
s2 þ 5s þ 2
s2 þ 6s þ 3 ¼ 2
3
Using input substitution,
step 1
ð
Þ ¼ 1 þ CA1B ¼ 1  1
1
½

0
1
3
6
"
#1 0
1
"
#
¼ 1 þ 1
1
½

6
1
3
0
"
#
3
0
1
"
#
¼ 1 þ 1
1
½

 1
3
0
2
4
3
5 ¼ 2
3
CHAPTER 8
8.1
a. F 7 þ j9
ð
Þ ¼
7 þ j9 þ 2
ð
Þ 7 þ j9 þ 4
ð
Þ0:0339
7 þ j9
ð
Þ 7 þ j9 þ 3
ð
Þ 7 þ j9 þ 6
ð
Þ ¼
5 þ j9
ð
Þ 3 þ j9
ð
Þ
7 þ j9
ð
Þ 4 þ j9
ð
Þ 1 þ j9
ð
Þ
¼ 66  j72
ð
Þ
944  j378
ð
Þ ¼ 0:0339  j0:0899 ¼ 0:096 < 110:7
b. The arrangement of vectors is shown as follows:
jw
s
s-plane
X
X
–2
–4
–1
–3
–6
–5
–7
X
M1
M2
M3
M4
M5
(–7+j9)
0
Chapter 8
Solutions to Skill-Assessment Exercises
21

From the diagram,
F 7 þ j9
ð
Þ ¼
M2M4
M1M3M5
¼
3 þ j9
ð
Þ 5 þ j9
ð
Þ
1 þ j9
ð
Þ 4 þ j9
ð
Þ 7 þ j9
ð
Þ ¼ 66  j72
ð
Þ
944  j378
ð
Þ
¼ 0:0339  j0:0899 ¼ 0:096 <; 110:7
8.2
a. First draw the vectors.
jw
s
s-plane
X
X
–2
–3
0
–1
j1
j2
j3
–j1
–j2
–j3
From the diagram,
P angles ¼ 180  tan1 3
1


 tan1 3
1


¼ 180  108:43 þ 108:43 ¼ 180:
b. Since the angle is 180, the point is on the root locus.
c. K ¼ P pole lengths
P zero lengths ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12 þ 32
p


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
12 þ 32
p


1
¼ 10
8.3
First, find the asymptotes.
sa ¼
P poles  P zeros
# poles  # zeros ¼ 2  4  6
ð
Þ  0
ð Þ
3  0
¼ 4
ua ¼ 2k þ 1
ð
Þp
3
¼ p
3 ; p; 5p
3
22
Solutions to Skill-Assessment Exercises

Next draw root locus following the rules for sketching.
–8
–7
–6
–5
–4
–3
–2
–1
0
1
2
3
–5
–4
–3
–2
–1
0
1
2
3
4
5
Real Axis
Imag Axis
8.4
a.
j3
s
jw
s-plane
X
X
O
–2
2
–j3
0
b. Using the Routh-Hurwitz criteria, we first find the closed-loop transfer function.
T sð Þ ¼
G sð Þ
1 þ G sð Þ ¼
K s þ 2
ð
Þ
s2 þ K  4
ð
Þs þ 2K þ 13
ð
Þ
Using the denominator of T(s), make a Routh table.
We get a row of zeros for K ¼ 4. From the s2 row with K ¼ 4; s2 þ 21 ¼ 0. From
which we evaluate the imaginary axis crossing at
ﬃﬃﬃﬃﬃ
21
p
.
c. From part (b), K ¼ 4.
d. Searching for the minimum gain to the left of 2 on the real axis yields 7 at a
gain of 18. Thus the break-in point is at 7.
s2
1
2K þ 13
s1
K  40
0
s0
2K þ 13
0
Chapter 8
Solutions to Skill-Assessment Exercises
23

e. First, draw vectors to a point e close to the complex pole.
jw
s
s-plane
X
X
–2
2
0
j3
–j3
At the point e close to the complex pole, the angles must add up to zero. Hence,
angle from zero – angle from pole in 4th quadrant – angle from pole in 1st quadrant ¼
180, or tan1 3
4
 
 90  u ¼ 180. Solving for the angle of departure,
u ¼ 233:1.
8.5
a.
jw
4
–3
X
X
s-plane
o
0
z = 0.5
j4
–j4
s
2
o
24
Solutions to Skill-Assessment Exercises

b. Search along the imaginary axis and find the 180 point at s ¼ j4:06.
c. For the result in part (b), K ¼ 1.
d. Searching between 2 and 4 on the real axis for the minimum gain yields the break-in
at s ¼ 2:89.
e. Searching along z ¼ 0:5 for the 180 point we find s ¼ 2:42 þ j4:18.
f. For the result in part (e), K ¼ 0:108.
g. Using the result from part (c) and the root locus, K < 1.
8.6
a.
s
jw
z = 0.591
–2
–4
–6
X
X
X
0
s-plane
b. Searching along the z ¼ 0:591 (10% overshoot) line for the 180 point yields
2:028 þ j2:768 with K ¼ 45:55.
c. Ts ¼
4
jRej ¼
4
2:028 ¼ 1:97 s; Tp ¼
p
jImj ¼
p
2:768 ¼ 1:13 s; vnTr ¼ 1:8346 from the
rise-time chart and graph in Chapter 4. Since vn is the radial distance to the pole,
vn ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
2:0282 þ 2:7682
p
¼ 3:431. Thus, Tr ¼ 0:53 s; since the system is Type 0,
Kp ¼
K
246 ¼ 45:55
48
¼ 0:949. Thus,
estep 1
ð
Þ ¼
1
1 þ Kp
¼ 0:51:
d. Searching the real axis to the left of 6 for the point whose gain is 45.55, we find
7:94. Comparing this value to the real part of the dominant pole, 2:028, we find
that it is not five times further. The second-order approximation is not valid.
8.7
Find the closed-loop transfer function and put it the form that yields pi as the root
locus variable. Thus,
T sð Þ ¼
G sð Þ
1 þ G sð Þ ¼
100
s2 þ pis þ 100 ¼
100
s2 þ 100
ð
Þ þ pis ¼
100
s2 þ 100
1 þ
pis
s2 þ 100
Chapter 8
Solutions to Skill-Assessment Exercises
25

Hence, KG sð ÞH sð Þ ¼
pis
s2 þ 100. The following shows the root locus.
s
jw
–j10
X
O
s-plane
0
X j10
8.8
Following the rules for plotting the root locus of positive-feedback systems, we
obtain the following root locus:
s
jw
–2
–4
X
s-plane
–1
X
X
o
0
–3
8.9
The closed-loop transfer function is T sð Þ ¼
K s þ 1
ð
Þ
s2 þ K þ 2
ð
Þs þ K. Differentiating the
denominator with respect to K yields
2s @s
@K þ K þ 2
ð
Þ @s
@K þ s þ 1
ð
Þ ¼ 2s þ K þ 2
ð
Þ @s
@K þ s þ 1
ð
Þ ¼ 0
Solving for @s
@K, we get @s
@K ¼
 s þ 1
ð
Þ
2s þ K þ 2
ð
Þ. Thus, Ss:K ¼ K
s
@s
@K ¼
K s þ 1
ð
Þ
s 2s þ K þ 2
ð
Þ :
Substituting K ¼ 20 yields Ss:K ¼ 10 s þ 1
ð
Þ
s s þ 11
ð
Þ .
Now find the closed-loop poles when K ¼ 20. From the denominator of T sð Þ;
s1;2 ¼ 21:05;  0:95, when K ¼ 20.
For the pole at 21:05,
Ds ¼ s Ss:K
ð
Þ DK
K ¼ 12:05
10 21:05 þ 1
ð
Þ
21:05 21:05 þ 11
ð
Þ


0:05 ¼ 0:9975:
26
Solutions to Skill-Assessment Exercises

For the pole at 0:95,
Ds ¼ s Ss:K
ð
Þ DK
K ¼ 0:95
10 0:95 þ 1
ð
Þ
0:95 0:95 þ 11
ð
Þ


0:05 ¼ 0:0025:
CHAPTER 9
9.1
a. Searching along the 15% overshoot line, we find the point on the root locus at
3:5 þ j5:8 at a gain of K ¼ 45:84. Thus, for the uncompensated system,
Kv ¼ lim
s!0 sG sð Þ ¼ K=7 ¼ 45:84=7 ¼ 6:55.
Hence, eramp uncompensated 1
ð
Þ ¼ 1=Kv ¼ 0:1527.
b. Compensator zero should be 20x further to the left than the compensator pole.
Arbitrarily select Gc sð Þ ¼
s þ 0:2
ð
Þ
s þ 0:01
ð
Þ.
c. Insert compensator and search along the 15% overshoot line and find the root
locus at 3:4 þ j5:63 with a gain, K ¼ 44:64. Thus, for the compensated system,
Kv ¼ 44:64 0:2
ð
Þ
7
ð Þ 0:01
ð
Þ ¼ 127:5 and eramp compensated 1
ð
Þ ¼ 1
Kv
¼ 0:0078.
d. eramp uncompensated
eramp compensated
¼ 0:1527
0:0078 ¼ 19:58
9.2
a. Searching along the 15% overshoot line, we find the point on the root locus at
3:5 þ j5:8 at a gain of K ¼ 45:84. Thus, for the uncompensated system,
Ts ¼
4
jRej ¼ 4
3:5 ¼ 1:143 s:
b. The real part of the design point must be three times larger than the un-
compensated pole’s real part. Thus the design point is 3 3:5
ð
Þþ j 3 5:8
ð
Þ ¼
10:5 þ j 17:4. The angular contribution of the plant’s poles and compensator
zero at the design point is 130:8. Thus, the compensator pole must contribute
180  130:8 ¼ 49:2. Using the following diagram,
–pc
s
jw
s-plane
–10.5
j17.4
49.2°
we find
17:4
Pc  10:5 ¼ tan 49:2, from which, pc ¼ 25:52. Adding this pole, we find
the gain at the design point to be K ¼ 476:3. A higher-order closed-loop pole is
found to be at 11:54. This pole may not be close enough to the closed-loop zero
at 10. Thus, we should simulate the system to be sure the design requirements
have been met.
Chapter 9
Solutions to Skill-Assessment Exercises
27

9.3
a. Searching along the 20% overshoot line, we find the point on the root locus at
3:5 þ 6:83 at a gain of K ¼ 58:9. Thus, for the uncompensated system,
Ts ¼
4
jRej ¼ 4
3:5 ¼ 1:143 s:
b. For the uncompensated system, Kv ¼ lim
s!0 sG sð Þ ¼ K=7 ¼ 58:9=7 ¼ 8:41. Hence,
eramp uncompensated 1
ð
Þ ¼ 1=Kv ¼ 0:1189.
c. In order to decrease the settling time by a factor of 2, the design point is twice the
uncompensated value, or 7 þ j 13:66. Adding the angles from the plant’s poles
and the compensator’s zero at 3 to the design point, we obtain 100:8. Thus,
the compensator pole must contribute 180  100:8 ¼ 79:2. Using the following
diagram,
–pc
s
jw
s-plane
79.2°
–7
j13.66
we find 13:66
Pc  7 ¼ tan79:2, from which, pc ¼ 9:61. Adding this pole, we find the
gain at the design point to be K ¼ 204:9.
Evaluating Kv for the lead-compensated system:
Kv ¼ lim
s!0 sG sð ÞGlead ¼ K 3
ð Þ= 7
ð Þ 9:61
ð
Þ
½
 ¼ 204:9
ð
Þ 3
ð Þ= 7
ð Þ 9:61
ð
Þ
½
 ¼ 9:138:
Kv for the uncompensated system was 8.41. For a 10x improvement in steady-state
error, Kv must be 8:41
ð
Þ 10
ð
Þ ¼ 84:1. Since lead compensation gave us Kv ¼ 9:138,
we need an improvement of 84:1=9:138 ¼ 9:2. Thus, the lag compensator zero
should be 9.2x further to the left than the compensator pole. Arbitrarily select
Gc sð Þ ¼ s þ 0:092
ð
Þ
s þ 0:01
ð
Þ .
Using all plant and compensator poles, we find the gain at the design point to
be K ¼ 205:4. Summarizing the forward path with plant, compensator, and gain
yields
Ge sð Þ ¼ 205:4 s þ 3
ð
Þ s þ 0:092
ð
Þ
s s þ 7
ð
Þ 9:61
ð
Þ s þ 0:01
ð
Þ :
Higher-order poles are found at 0:928 and 2:6. It would be advisable to simulate
the system to see if there is indeed pole-zero cancellation.
28
Solutions to Skill-Assessment Exercises

9.4
The configuration for the system is shown in the figure below.
1
s(s+ 7)(s +10)
R(s)
C(s)
+
K
+
–
–
Kfs
Minor-Loop Design:
For the minor loop, G sð ÞH sð Þ ¼
Kf
s þ 7
ð
Þ s þ 10
ð
Þ. Using the following diagram, we
find that the minor-loop root locus intersects the 0.7 damping ratio line at
8:5 þ j 8:67. The imaginary part was found as follows: u ¼ cos1z ¼ 45:57. Hence,
Im
8:5 ¼ tan45:57, from which Im ¼ 8:67.
s
jw
s-plane
–7
z = 0.7
X
X
−10
−8.5
(-8.5 + j8.67)
q
Im
The gain, Kf, is found from the vector lengths as
Kf ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1:52 þ 8:672
p
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1:52 þ 8:672
p
¼ 77:42
Major-Loop Design:
Using the closed-loop poles of the minor loop, we have an equivalent forward-path
transfer function of
Ge sð Þ ¼
K
s s þ 8:5 þ j8:67
ð
Þ s þ 8:5  j8:67
ð
Þ ¼
K
s s2 þ 17s þ 147:4
ð
Þ :
Using the three poles of Ge sð Þ as open-loop poles to plot a root locus, we search
along z ¼ 0:5 and find that the root locus intersects this damping ratio line at 4:34 þ
j7:51 at a gain, K ¼ 626:3.
Chapter 9
Solutions to Skill-Assessment Exercises
29

9.5
a. An active PID controller must be used. We use the circuit shown in the following
figure:
+
–
Z1(s)
Z2(s)
I1(s)
V1(s)
Vo(s)
Vi(s)
Ia(s)
I2(s)
where the impedances are shown below as follows:
C1
R1
Z1(s)
Z2(s)
C2
R2
Matching the given transfer function with the transfer function of the PID
controller yields
Gc sð Þ ¼ s þ 0:1
ð
Þ s þ 5
ð
Þ
s
¼ s2 þ 5:1s þ 0:5
s
¼ s þ 5:1 þ 0:5
8
¼ 
R2
R1
þ C1
C2


þ R2C1s þ
1
R1C2
s
2
664
3
775
Equating coefficients
1
R1C2
¼ 0:5
ð1Þ
R2C1 ¼ 1
ð2Þ
R2
R1
þ C1
C2


¼ 5:1
ð3Þ
In Eq. (2) we arbitrarily let C1 ¼ 105. Thus, R2 ¼ 105. Using these values along with
Eqs. (1) and (3) we find C2 ¼ 100mF and R1 ¼ 20 kV.
b. The lag-lead compensator can be implemented with the following passive net-
work, since the ratio of the lead pole-to-zero is the inverse of the ratio of the lag
pole-to-zero:
R1
C1
R2
C2
+
–
+
–
vo(t)
vi(t)
30
Solutions to Skill-Assessment Exercises

Matchingthegiventransferfunctionwiththetransferfunctionofthepassivelag-lead
compensator yields
Gc sð Þ ¼
s þ 0:1
ð
Þ s þ 2
ð
Þ
s þ 0:01
ð
Þ s þ 20
ð
Þ ¼
s þ 0:1
ð
Þ s þ 2
ð
Þ
s2 þ 20:01s þ 0:2
¼
s þ
1
R1C1


s þ
1
R2C2


s2 þ
1
R1C1
þ
1
R2C2
þ
1
R2C1


s þ
1
R1R2C1C2
Equating coefficients
1
R1C1
¼ 0:1
ð1Þ
1
R2C2
¼ 0:1
ð2Þ
1
R1C1
þ
1
R2C2
þ
1
R2C1


¼ 20:01
ð3Þ
Substituting Eqs. (1) and (2) in Eq. (3) yields
1
R2C1
¼ 17:91
ð4Þ
Arbitrarily letting C1 ¼ 100 mF in Eq. (1) yields R1 ¼ 100 kV.
Substituting C1 ¼ 100 mF into Eq. (4) yields R2 ¼ 558 kV.
Substituting R2 ¼ 558 kV into Eq. (2) yields C2 ¼ 900 mF.
CHAPTER 10
10.1
a.
G sð Þ ¼
1
s þ 2
ð
Þ s þ 4
ð
Þ ; G jv
ð
Þ ¼
1
8 þ v2
ð
Þ þ j6v
M v
ð Þ ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
8  v2
ð
Þ2 þ 6v
ð
Þ2
q
For v <
ﬃﬃﬃ
8
p
, f v
ð Þ ¼ tan1
6v
8  v2


:
For v <
ﬃﬃﬃ
8
p
, f v
ð Þ ¼  p þ tan1
6v
8  v2
	



:
b.
Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Diagrams
10–1
100
101
102
–200
–150
–100
–50
0
–100
–80
–60
–40
–20
0
Chapter 10
Solutions to Skill-Assessment Exercises
31

c.
Real Axis
Imaginary Axis
Nyquist Diagrams
–0.05
0
0.05
0.1
0.15
0.2
–0.08
–0.06
–0.04
–0.02
0
0.02
0.04
0.06
0.08
10.2
20 log M
–120
–100
–80
–60
–40
0.1
1
10
100
1000
–40 dB/dec
–20 dB/dec
–20 dB/dec
–40 dB/dec
Frequency (rad/s)
Actual
Asymptotic
Frequency (rad/s)
Phase (degrees)
–150
–100
–50
–200
–45o/dec
–90o/dec
–45o/dec
–90o/dec
–45o/dec
–45o/dec
0.1
1
10
100
Actual
Asymptotic
1000
32
Solutions to Skill-Assessment Exercises

10.3
The frequency response is 1/8 at an angle of zero degrees at v ¼ 0. Each pole rotates
90 in going from v ¼ 0 to v ¼ 1. Thus, the resultant rotates 180 while its
magnitude goes to zero. The result is shown below.
Re
Im
0
1
8
w = ∞
w = 0
10.4
a. The frequency response is 1/48 at an angle of zero degrees at v ¼ 0. Each pole
rotates 90 in going from v ¼ 0 to v ¼ 1. Thus, the resultant rotates 270 while
its magnitude goes to zero. The result is shown below.
Im
Re
1
48
w = 0
w = ∞
0
w = 6.63
1
480
–
b. Substituting
jv
into
G sð Þ ¼
1
s þ 2
ð
Þ s þ 4
ð
Þ s þ 6
ð
Þ ¼
1
s3 þ 12s2 þ 44s þ 48
and
simplifying, we obtain G jv
ð
Þ ¼ 48  12v2


 j 44v  v3


v6 þ 56v4 þ 784v2 þ 2304. The Nyquist diagram
crosses the real axis when the imaginary part of G jv
ð
Þ is zero. Thus, the Nyquist
diagram crosses the real axis at v2 ¼ 44; or v ¼
ﬃﬃﬃﬃﬃ
44
p
¼ 6:63 rad=s. At this fre-
quency G jv
ð
Þ ¼  1
480. Thus, the system is stable for K < 480.
Chapter 10
Solutions to Skill-Assessment Exercises
33

10.5
If K ¼ 100, the Nyquist diagram will intersect the real axis at 100=480. Thus,
GM ¼ 20 log 480
100 ¼ 13:62 dB. From Skill-Assessment Exercise Solution 10.4, the
180 frequency is 6.63 rad/s.
10.6
a.
0
0
0
1
0
0
1
0
1
1
–180
–160
–140
–120
–100
–80
Frequency (rad/s)
20 log M
–60
Frequency (rad/s)
Phase (degrees)
1
10
100
1000
–300
–250
–200
–150
–100
–50
0
b. The phase angle is 180 at a frequency of 36.74 rad/s. At this frequency the gain is
99:67 dB. Therefore, 20 logK ¼ 99:67, or K ¼ 96; 270. We conclude that the
system is stable for K < 96; 270.
c. For K ¼ 10; 000, the magnitude plot is moved up 20log10; 000 ¼ 80 dB. Therefore,
the gain margin is 99:67  80 ¼ 19:67 dB. The 180 frequency is 36.7 rad/s. The
gain curve crosses 0 dB at v ¼ 7:74 rad=s, where the phase is 87:1. We calculate
the phase margin to be 180  87:1 ¼ 92:9.
10.7
Using z ¼
ln %=100
ð
Þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ ln2 %100
ð
Þ
q
, we find z ¼ 0:456, which corresponds to 20% over-
shoot. Using Ts ¼ 2; vBW ¼ 4
Tsz
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  2z2
ð
Þ þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4z4  4
p
z2 þ 2
q
¼ 5:79 rad=s.
34
Solutions to Skill-Assessment Exercises

10.8
For both parts find that G jv
ð
Þ ¼ 160
27  6750000  101250v2


þ j1350 v2  1350


v
v6 þ 2925v4 þ 1072500v2 þ 25000000
.
For a range of values for v, superimpose G jv
ð
Þ on the a. M and N circles, and on the
b. Nichols chart.
a.
M = 1.3
1.4
1.5
1.6
1.8
2.0
M = 0.7
0.6
0.5
0.4
M = 1.0
–2
–1
1
2
3
Im
Re
1
2
–1
–2
–3
–3
Φ = 20°
25°
30°
–20°
–40°
–50°
–30°
–70°
40°
50°
70°
–25°
G-plane
–4
b.
Open-Loop Phase (deg)
Open-Loop Gain (dB)
Nichols Charts
–350
–300
–250
–200
–150
–100
–50
0
–200
–150
–100
–50
0
6 dB
3 dB
1 dB
0.5 dB
0.25 dB
0 dB
–1 dB
–3 dB
–6 dB
–12 dB
–20 dB
–40 dB
–60 dB
–80 dB
–100 dB
–120 dB
–140 dB
–160 dB
–180 dB
–200 dB
–220 dB
–240 dB
Chapter 10
Solutions to Skill-Assessment Exercises
35

Plotting the closed-loop frequency response from a. or b. yields the following plot:
–120
–100
–80
–60
–40
–20
0
Frequency (rad/s)
20 log M
0
0
0
1
0
0
1
0
1
1
Frequency (rad/s)
1
10
100
1000
–300
–250
–200
–150
–100
–50
0
Phase (degrees)
10.9
The open-loop frequency response is shown in the following figure:
Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Diagrams
–40
–20
0
20
40
10–1
100
101
102
–160
–140
–120
–100
36
Solutions to Skill-Assessment Exercises

The open-loop frequency response is 7 at v ¼ 14:5 rad=s. Thus, the estimated
bandwidth is vWB ¼ 14:5 rad=s. The open-loop frequency response plot goes
through zero dB at a frequency of 9.4 rad/s, where the phase is 151:98.
Hence, the phase margin is 180  151:98 ¼ 28:02. This phase margin corre-
sponds to
z ¼ 0:25: Therefore; %OS ¼ e zp=
ﬃﬃﬃﬃﬃﬃﬃﬃ
1z2
p


 100 ¼ 44:4%
Ts ¼
4
vBWz
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  2z2
ð
Þ þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4z4  4z2 þ 2
p
q
¼ 1:64 s and
Tp ¼
p
vBW
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  2z2
ð
Þ þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4z4  4z2 þ 2
p
q
¼ 0:33 s
10.10
The initial slope is 40 dB/dec. Therefore, the system is Type 2. The initial slope
intersects 0 dB at v ¼ 9:5 rad=s. Thus, Ka ¼ 9:52 ¼ 90:25 and Kp ¼ Kv ¼ 1.
10.11
a. Without delay, G jv
ð
Þ ¼
10
jv jv þ 1
ð
Þ ¼
10
v v þ j
ð
Þ, from which the zero dB fre-
quency is found as follows: M ¼
10
v
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
v2 þ 1
p
¼ 1. Solving for v; v
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
v2 þ 1
p
¼ 10, or
after squaring both sides and rearranging, v4 þ v2  100 ¼ 0. Solving for the
roots, v2 ¼ 10:51; 9:51. Taking the square root of the positive root, we find the
0 dB frequency to be 3.08 rad/s. At this frequency, the phase angle, f ¼
ﬀv þ j
ð
Þ ¼ ﬀ3:08 þ j
ð
Þ ¼ 162. Therefore the phase margin is 180
162 ¼ 18.
b. With a delay of 0.1 s,
f ¼ ﬀv þ j
ð
Þ  vT ¼ ﬀ3:08 þ j
ð
Þ  3:08
ð
Þ 0:1
ð
Þ 180=pi
ð
Þ
¼ 162  17:65 ¼ 179:65
Therefore the phase margin is 180  179:65 ¼ 0:35. Thus, the system is table.
c. With a delay of 3 s,
f ¼ ﬀv þ j
ð
Þ  vT ¼ ﬀ3:08 þ j
ð
Þ  3:08
ð
Þ 3
ð Þ 180=pi
ð
Þ ¼ 162  529:41
¼  691:41 ¼ 28:59 deg:
Therefore the phase margin is 28:59  180 ¼ 151:41 deg. Thus, the system is
unstable.
10.12
Drawing judicially selected slopes on the magnitude and phase plot as shown below
yields a first estimate.
Chapter 10
Solutions to Skill-Assessment Exercises
37

Experimental
Frequency (rad/sec)
–40
–30
–20
–10
0
10
20
1
2
3
4 5 6 7 8 10
20 30 40 50 70 100
200 300
500
1000
–95
–90
–85
–80
–75
–70
–65
–60
–55
–50
–45
Phase(deg)
Gain(dB)
We see an initial slope on the magnitude plot of 20 dB/dec. We also see a final
20 dB/dec slope with a break frequency around 21 rad/s. Thus, an initial estimate is
G1 sð Þ ¼
1
s s þ 21
ð
Þ. Subtracting G1 sð Þ from the original frequency response yields the
frequency response shown below.
40
50
60
70
80
90
1
2
3
4
5 6 7 8 10
20
30 40 50
70
100
200 300
500
1000
0
20
40
60
80
100
Experimental Minus 1/s(s+21)
Frequency (rad/sec)
Gain(dB)
Phase(deg)
38
Solutions to Skill-Assessment Exercises

Drawing judicially selected slopes on the magnitude and phase plot as shown
yields a final estimate. We see first-order zero behavior on the magnitude and
phase plots with a break frequency of about 5.7 rad/s and a dc gain of about
44 dB ¼ 20log 5:7K
ð
Þ, or K ¼ 27:8. Thus, we estimate G2 sð Þ ¼ 27:8 s þ 7
ð
Þ. Thus,
G sð Þ ¼ G1 sð ÞG2 sð Þ ¼ 27:8 s þ 5:7
ð
Þ
s s þ 21
ð
Þ
. It is interesting to note that the original problem
was developed from G sð Þ ¼ 30 s þ 5
ð
Þ
s s þ 20
ð
Þ.
CHAPTER 11
11.1
The Bode plot for K ¼ 1 is shown below.
Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Diagrams
–180
–160
–140
–120
–100
–80
–60
10–1
100
101
102
103
–250
–200
–150
–100
A 20% overshoot requires z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:456. This damping ratio implies a
phase margin of 48.10, which is obtained when the phase angle ¼ 1800 þ 48:10
¼ 131:9. This phase angle occurs at v ¼ 27:6 rad=s. The magnitude at this frequency
is 5:15  106. Since the magnitude must be unity K ¼
1
5:15  106 ¼ 194; 200.
11.2
To meet the steady-state error requirement, K ¼ 1; 942; 000. The Bode plot for this
gain is shown below.
Chapter 11
Solutions to Skill-Assessment Exercises
39

Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Diagrams
–40
–20
0
20
40
60
10–1
100
101
102
103
–250
–200
–150
–100
A 20% overshoot requires z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:456. This damping ratio
implies a phase margin of 48:1. Adding 10 to compensate for the phase angle
contribution of the lag, we use 58:1. Thus, we look for a phase angle of
180 þ 58:1 ¼ 129:9. The frequency at which this phase occurs is 20.4 rad/s.
At this frequency the magnitude plot must go through zero dB. Presently, the
magnitude plot is 23.2 dB. Therefore draw the high frequency asymptote of the lag
compensator at 23:2 dB. Insert a break at 0:1 20:4
ð
Þ ¼ 2:04 rad=s. At this frequency,
draw 23:2 dB/dec slope until it intersects 0 dB. The frequency of intersection
will be the low frequency break or 0.141 rad/s. Hence the compensator is
Gc sð Þ ¼ Kc
s þ 2:04
ð
Þ
s þ 0:141
ð
Þ, where the gain is chosen to yield 0 dB at low frequencies,
or Kc ¼ 0:141=2:04 ¼ 0:0691. In summary,
Gc sð Þ ¼ 0:0691
s þ 2:04
ð
Þ
s þ 0:141
ð
Þ and G sð Þ ¼
1;942;000
s s þ 50
ð
Þ s þ 120
ð
Þ
11.3
A 20% overshoot requires z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:456. The required bandwidth
is then calculated as vBW ¼ 4
Tsz
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  2z2
ð
Þ þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4z4  4z2 þ 2
p
q
¼ 57:9 rad/s. In order
to meet the steady-state error requirement of Kv ¼ 50 ¼
K
50
ð
Þ 120
ð
Þ, we calculate
K ¼ 300; 000. The uncompensated Bode plot for this gain is shown below.
40
Solutions to Skill-Assessment Exercises

Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Plot for K = 300000
–60
–40
–20
0
20
40
10–1
100
101
102
103
–250
–200
–150
–100
The uncompensated system’s phase margin measurement is taken where the
magnitude plot crosses 0 dB. We find that when the magnitude plot crosses 0 dB,
the phase angle is 144:8. Therefore, the uncompensated system’s phase margin is
180 þ 144:8 ¼ 35:2. The required phase margin based on the required damping
ratio is FM ¼ tan1
2z
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
2z2 þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 þ 4z4
p
q
¼ 48:1. Adding a 10 correction factor, the
required phase margin is 58:1. Hence, the compensator must contribute
fmax ¼ 58:1  35:2 ¼ 22:9.
Using
fmax ¼ sin1 1  b
1 þ b,
b ¼ 1  sinfmax
1 þ sinfmax
¼ 0:44.
The compensator’s peak magnitude is calculated as Mmax ¼ 1ﬃﬃﬃb
p
¼ 1:51. Now find
the frequency at which the uncompensated system has a magnitude 1=Mmax, or
3:58 dB. From the Bode plot, this magnitude occurs at vmax ¼ 50 rad=s. The
compensator’s zero is at zc ¼ 1
T. vmax ¼
1
T
ﬃﬃﬃb
p
Therefore, zc ¼ 33:2.
The compensator’s pole is at Pc ¼ 1
bT ¼ zc
b ¼ 75:4. The compensator gain is
chosen to yield unity gain at dc.
Hence,
Kc ¼ 75:4=33:2 ¼ 2:27.
Summarizing,
Gc sð Þ ¼ 2:27 s þ 33:2
ð
Þ
s þ 75:4
ð
Þ,
and
G sð Þ
300;000
s s þ 50
ð
Þ s þ 120
ð
Þ.
Chapter 11
Solutions to Skill-Assessment Exercises
41

11.4
A 10% overshoot requires z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:591. The required bandwidth
is then calculated as vBW ¼
p
Tp
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  2z2
ð
Þ þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
4z4  4z2 þ 2
p
q
¼ 7:53 rad=s:
In order to meet the steady-state error requirement of Kv ¼ 10 ¼
K
8
ð Þ 30
ð
Þ, we
calculate K ¼ 2400. The uncompensated Bode plot for this gain is shown below.
Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Diagrams
–100
–80
–60
–40
–20
0
20
40
10–1
100
101
102
103
–250
–200
–150
–100
Let us select a new phase-margin frequency at 0:8vBW ¼ 6:02 rad=s. The
required phase margin based on the required damping ratio is FM ¼ tan1
2z
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
2z2 þ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1 þ 4z4
p
q
¼ 58:6. Adding a 5 correction factor, the required phase
margin is 63:6. At 6.02 rad/s, the new phase-margin frequency, the phase angle
is–which represents a phase margin of 180  138:3 ¼ 41:7. Thus, the lead com-
pensator must contribute fmax ¼ 63:6  41:7 ¼ 21:9.
Using fmax ¼ sin1 1  b
1 þ b, b ¼ 1  sinfmax
1 þ sinfmax
¼ 0:456.
We now design the lag compensator by first choosing its higher break frequency one
decade below the new phase-margin frequency, that is, zlag ¼ 0:602 rad=s. The lag
compensator’s pole is plag ¼ bzlag ¼ 0:275. Finally, the lag compensator’s gain is
Klag ¼ b ¼ 0:456.
42
Solutions to Skill-Assessment Exercises

Now we design the lead compensator. The lead zero is the product of the new
phase margin frequency and
ﬃﬃﬃb
p , or zlead ¼ 0:8vBW
ﬃﬃﬃb
p
¼ 4:07. Also, plead ¼ zlead
b
¼ 8:93. Finally, Klead ¼ 1
b ¼ 2:19. Summarizing,
Glag ¼ sð Þ ¼ 0:456 s þ 0:602
ð
Þ
s þ 0:275
ð
Þ ; Glead sð Þ ¼ 2:19 s þ 4:07
ð
Þ
s þ 8:93
ð
Þ ;
and k ¼ 2400:
CHAPTER 12
12.1
We first find the desired characteristic equation. A 5% overshoot requires
z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:69. Also, vn ¼
p
Tp
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
¼ 14:47 rad=s. Thus, the char-
acteristic equation is s2 þ 2zvns þ v2
n ¼ s2 þ 19:97s þ 209:4. Adding a pole at 10 to
cancel
the
zero
at
10
yields
the
desired
characteristic
equation,
s2 þ 19:97s þ 209:4


s þ 10
ð
Þ ¼ s3 þ 29:97s2 þ 409:1s þ 2094. The compensated sys-
tem matrix in phase-variable form is
A  BK ¼
0
1
0
0
0
1
 k1
ð
Þ
 36 þ k2
ð
Þ
 15 þ k3
ð
Þ
2
64
3
75. The characteristic equation for this
system is jsI  A  BK
ð
Þj ¼ s3 þ 15 þ k3
ð
Þs2 þ 36 þ k2
ð
Þs þ k1
ð
Þ. Equating coeffi-
cients of this equation with the coefficients of the desired characteristic equation
yields the gains as
K ¼ k1
k2
k3
½
 ¼ 2094
373:1
14:97
½
:
12.2
The controllability matrix is
CM ¼
B
AB
A2B


¼
2
1
1
1
4
9
1
1
16
2
64
3
75. Since
jCMj ¼ 80, CM is full rank, that is, rank 3. We conclude that the system is controllable.
12.3
First check controllability. The controllability matrix is CMz ¼
B
AB
A2B


¼
0
0
1
0
1
17
1
9
81
2
64
3
75. Since jCMzj ¼ 1, CMz is full rank, that is, rank 3. We conclude that
the system is controllable. We now find the desired characteristic equation. A 20%
overshoot requires z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:456. Also, vn ¼ 4
zTs
¼ 4:386 rad=s.
Chapter 12
Solutions to Skill-Assessment Exercises
43

Thus, the characteristic equation is s2 þ 2zvns þ v2
n ¼ s2 þ 4s þ 19:24. Adding a pole
at 6 to cancel the zero at 6 yields the resulting desired characteristic equation,
s2 þ 4s þ 19:24


s þ 6
ð
Þ ¼ s3 þ 10s2 þ 43:24s þ 115:45:
Since G sð Þ ¼
s þ 6
ð
Þ
s þ 7
ð
Þ s þ 8
ð
Þ s þ 9
ð
Þ ¼
s þ 6
s3 þ 24s2 þ 191s þ 504, we can write the phase-
variable
representation
as
Ap ¼
0
1
0
0
0
1
504
191
24
2
64
3
75 ; Bp ¼
0
0
1
2
64
3
75; Cp ¼
6
1
0
½
. The compensated system matrix in phase-variable form is Ap  BpKp ¼
0
1
0
0
0
1
 504 þ k1
ð
Þ
 191 þ k2
ð
Þ
 24 þ k3
ð
Þ
2
64
3
75. The characteristic equation for this
system is jsI  Ap  BpKp


j ¼ s3 þ 24 þ k3
ð
Þs2 þ 191 þ k2
ð
Þs þ 504 þ k1
ð
Þ. Equat-
ing coefficients of this equation with the coefficients of the desired characteristic
equation yields the gains as Kp ¼ k1
k2
k3
½
 ¼ 388:55
147:76
14
½
. We
now develop the transformation matrix to transform back to the z-system.
CMz ¼
Bz
AzBz
A2
zB z
h
i
¼
0
0
1
0
1
17
1
9
81
2
64
3
75 and
CMp ¼
Bp
ApBp
A2
pBp
h
i
¼
0
0
1
0
1
24
1
24
385
2
64
3
75:
Therefore,
P ¼ CMzC1
Mx ¼
0
0
1
0
1
17
1
9
81
2
64
3
75
191
24
1
24
1
0
1
0
0
2
64
3
75 ¼
1
0
0
7
1
0
56
15
1
2
64
3
75
Hence, Kz ¼ KpP1 ¼ 388:55
147:76
14
½

1
0
0
7
1
0
49
15
1
2
64
3
75
¼ 40:23
62:24
14
½
.
12.4
For the given system e_x ¼ A  LC
ð
Þex ¼
 24 þ l1
ð
Þ
1
0
 191 þ l2
ð
Þ
0
1
 504 þ l3
ð
Þ
0
0
2
64
3
75ex. The characteristic
polynomial
is
given
by
j sI  A  LC
ð
Þ
½
j ¼ s3 þ 24 þ l1
ð
Þs2 þ
191 þ l2
ð
Þs þ
504 þ l3
ð
Þ. Now we find the desired characteristic equation. The dominant poles
from Skill-Assessment Exercise 12.3 come from s2 þ 4s þ 19:24


. Factoring yields
2 þ j3:9
ð
Þ and 2  j3:9
ð
Þ. Increasing these poles by a factor of 10 and adding a
third pole 10 times the real part of the dominant second-order poles yields the
44
Solutions to Skill-Assessment Exercises

desired characteristic polynomial, s þ 20 þ j39
ð
Þ s þ 20  j39
ð
Þ s þ 200
ð
Þ ¼ s3 þ 240s2
þ 9921s þ 384200. Equating coefficients of the desired characteristic equation to the
system’s characteristic equation yields L ¼
216
9730
383696
2
64
3
75.
12.5
The
observability
matrix
is
OM ¼
C
CA
CA2
2
64
3
75 ¼
4
6
8
64
80
78
674
848
814
2
64
3
75,
where
A2 ¼
25
28
32
7
4
11
77
95
94
2
64
3
75. The matrix is of full rank, that is, rank 3, since
jOMj ¼ 1576. Therefore the system is observable.
12.6
The system is represented in cascade form by the following state and output
equations:
_z ¼
7
1
0
0
8
1
0
0
9
2
64
3
75z þ
0
0
1
2
64
3
75u
y ¼ 1
0
0
½
z
The observability matrix is OMz ¼
Cz
CzAz
CzA2
z
2
64
3
75 ¼
1
0
0
7
1
0
49
15
1
2
64
3
75,
where A2
z ¼
49
15
1
0
64
17
0
0
81
2
64
3
75. Since G sð Þ ¼
1
s þ 7
ð
Þ s þ 8
ð
Þ s þ 9
ð
Þ
¼
1
s3 þ 24s2 þ 191s þ 504, we can write the observable canonical form as
_x ¼
24
1
0
191
0
1
504
0
0
2
64
3
75x þ
0
0
1
2
64
3
75u
y ¼ 1
0
0
½
x
The observability matrix for this form is OMx ¼
Cx
CxAx
CxA2
x
2
64
3
75 ¼
1
0
0
24
1
0
385
24
1
2
64
3
75,
Chapter 12
Solutions to Skill-Assessment Exercises
45

where
A2
x ¼
385
24
1
4080
191
0
12096
504
0
2
64
3
75:
We next find the desired characteristic equation. A 10% overshoot requires
z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:591. Also, vn ¼ 4
zTs
¼ 67:66 rad=s. Thus, the characteristic
equation is s2 þ 2zvns þ v2
n ¼ s2 þ 80s þ 4578:42. Adding a pole at 400, or 10 times
the real part of the dominant second-order poles, yields the resulting desired character-
istic equation,
s2 þ 80s þ 4578:42


s þ 400
ð
Þ ¼ s3þ 480s2 þ 36580s þ 1:831x106. For
the
system
represented
in
observable
canonical
form
e_x ¼ Ax  LxCx
ð
Þ ex ¼
 24 þ l1
ð
Þ
1
0
 191 þ l2
ð
Þ
0
1
 504 þ l3
ð
Þ
0
0
2
64
3
75ex.
The
characteristic
polynomial
is
given
by
j sI  Ax  LxCx
ð
Þ
½
j ¼ s3 þ 24 þ l1
ð
Þs2 þ 191 þ l2
ð
Þs þ 504 þ l3
ð
Þ.
Equating
coeffi-
cients of the desired characteristic equation to the system’s characteristic equation
yields Lx ¼
456
36; 389
1; 830; 496
2
64
3
75.
Now, develop the transformation matrix between the observer canonical and
cascade forms.
P ¼ O1
MzOMx ¼
1
0
0
7
1
0
49
15
1
2
6664
3
7775
1
1
0
0
24
1
0
385
24
1
2
6664
3
7775
¼
1
0
0
7
1
0
56
15
1
2
6664
3
7775
1
0
0
24
1
0
385
24
1
2
6664
3
7775
¼
1
0
0
17
1
0
81
9
1
2
6664
3
7775
Finally,
Lz ¼ PLx ¼
1
0
0
17
1
0
81
9
1
2
64
3
75
456
36; 389
1; 830; 496
2
64
3
75 ¼
456
28; 637
1; 539; 931
2
64
3
75 
456
28; 640
1; 540; 000
2
64
3
75.
46
Solutions to Skill-Assessment Exercises

12.7
We first find the desired characteristic equation. A 10% overshoot requires
z ¼
log
%
100


ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
p2 þ log2
%
100


s
¼ 0:591
Also, vn ¼
p
Tp
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
¼ 1:948 rad=s. Thus, the characteristic equation is s2þ
2zvns þ v2
n ¼ s2 þ 2:3s þ 3:79. Adding a pole at 4, which corresponds to the
original system’s zero location, yields the resulting desired characteristic equation,
s2 þ 2:3s þ 3:79


s þ 4
ð
Þ ¼ s3 þ 6:3s2 þ 13s þ 15:16.
Now,
_x
_xN
	

¼
A  BK
ð
Þ
BKe
 C
0
	

x
xN
	

þ
0
1
	

r; and y ¼ C
0
½

x
xN
	

,
where
A  BK ¼
0
1
7
9
	


0
1
	

k1
k2
½
 ¼
0
1
7
9
	


0
0
k1
k2
	

¼
0
1
 7 þ k1
ð
Þ
 9 þ k2
ð
Þ
	

C ¼ 4
1
½

Bke ¼
0
1
	

ke ¼
0
ke
	

Thus,
_x1
_x2
_xN
2
64
3
75 ¼
0
1
0
 7 þ k1
ð
Þ
 9 þ k2
ð
Þ
ke
4
1
0
2
64
3
75
x1
x2
xN
2
64
3
75 þ
0
1
	

r; y ¼ 4
1
0
½

x1
x2
xN
2
64
3
75.
Finding the characteristic equation of this system yields
sI 
A  BK
ð
Þ
BKe
C
0
	


 ¼
s
0
0
0
s
0
0
0
s
2
64
3
75 
0
1
0
 7 þ k1
ð
Þ
 9 þ k2
ð
Þ
ke
4
1
0
2
64
3
75


¼
s
1
0
7 þ k1
ð
Þ
s þ 9 þ k2
ð
Þ
ke
4
1
s
2
64
3
75


¼ s3 þ 9 þ k2
ð
Þs2 þ 7 þ k1 þ ke
ð
Þs þ 4ke
Equating this polynomial to the desired characteristic equation,
s3 þ 6:3s2 þ 13s þ 15:16 ¼ s3 þ 9 þ k2
ð
Þs2 þ 7 þ k1 þ ke
ð
Þs þ 4ke
Solving for the k’s,
K ¼ 2:21
2:7
½
 and ke ¼ 3:79:
Chapter 12
Solutions to Skill-Assessment Exercises
47

CHAPTER 13
13.1
f tð Þ ¼ sin vkT
ð
Þ; f  tð Þ ¼ P
1
k¼0
sin vkT
ð
Þd t  kT
ð
Þ;
F sð Þ ¼
X
1
k¼0
sin vkT
ð
ÞekTs ¼
X
1
k¼0
ejvkT  ejvkT


ekTs
2j
¼ 1
2j
X
1
k¼0
eT sjv
ð
Þ

k

eT sþjv
ð
Þ

k
But, P
1
k¼0
xk ¼
1
1  x1
Thus,
F sð Þ ¼ 1
2j
1
1  eT sjv
ð
Þ 
1
1  eT sþjv
ð
Þ
	

¼ 1
2j
eTsejvT  eTsejvT
1  eTsejvT  eTsejvT
ð
Þ þ e2Ts
	

¼ eTs
sin vT
ð
Þ
1  eTs2cos vT
ð
Þ þ e2Ts
	

¼
z1sin vT
ð
Þ
1  2z1cos vT
ð
Þ þ z2
13.2
F z
ð Þ ¼
z z þ 1
ð
Þ z þ 2
ð
Þ
z  0:5
ð
Þ z  0:7
ð
Þ z  0:9
ð
Þ
F z
ð Þ
z
¼
z z þ 1
ð
Þ z þ 2
ð
Þ
z  0:5
ð
Þ z  0:7
ð
Þ z  0:9
ð
Þ
¼ 46:875
z
z  0:5  114:75
1
z  0:7 þ 68:875
z
z  0:9
F z
ð Þ ¼ 46:875
z
z  0:5  114:75
z
z  0:7 þ 68:875
z
z  0:9 ;
f kT
ð
Þ ¼ 46:875 0:5
ð
Þk  114:75 0:7
ð
Þk þ 68:875 0:9
ð
Þk
13.3
Since G sð Þ ¼ 1  eTs


8
s s þ 4
ð
Þ,
G z
ð Þ ¼ 1  z1


z
8
s s þ 4
ð
Þ


¼ z  1
z
z A
s þ
B
s þ 4


¼ z  1
z
z 2
s þ
2
s þ 4


:
Let G2 sð Þ ¼ 2
s þ
2
s þ 4. Therefore, g2 tð Þ ¼ 2  2e4t, or g2 kT
ð
Þ ¼ 2  2e4kT.
Hence, G2 z
ð Þ ¼
2z
z  1 
2z
z  e4T ¼
2z 1  e4T


z  1
ð
Þ z  e4T
ð
Þ.
48
Solutions to Skill-Assessment Exercises

Therefore, G z
ð Þ ¼ z  1
z
G2 z
ð Þ ¼ 2 1  e4T


z  e4T
ð
Þ .
For T ¼ 1
4 s, G z
ð Þ ¼
1:264
z  0:3679.
13.4
Add phantom samplers to the input, feedback after H(s), and to the output. Push
G1(s)G2(s), along with its input sampler, to the right past the pickoff point and obtain
the block diagram shown below.
H(s)G1(s)G2(s)
G1(s)G2(s)
R(s)
C(s)
+
–
Hence, T z
ð Þ ¼
G1G2 z
ð Þ
1 þ HG1G2 z
ð Þ.
13.5
Let G sð Þ ¼
20
s þ 5. Let G2 sð Þ ¼ G sð Þ
s
¼
20
s s þ 5
ð
Þ ¼ 4
s 
4
s þ 5. Taking the inverse
Laplace transform and letting t ¼ kT, g2 kT
ð
Þ ¼ 4  4e5kT. Taking the z-transform
yields G2 z
ð Þ ¼
4z
z  1 
4z
z  e5T ¼
4z 1  e5T


z  1
ð
Þ z  e5T
ð
Þ.
Now, G z
ð Þ ¼ z  1
z
 G2 z
ð Þ ¼ 4 1  e5T


z  e5T
ð
Þ .
Finally, T z
ð Þ ¼
G z
ð Þ
1 þ G z
ð Þ ¼ 4 1  e5T


z  5e5T þ 4.
The pole of the closed-loop system is at 5e5T  4. Substituting values of T, we find
that the pole is greater than 1 if T > 0:1022 s. Hence, the system is stable for
0 < T < 0:1022 s.
13.6
Substituting z ¼ s þ 1
s  1 into D z
ð Þ ¼ z3  z2  0:5z þ 0:3, we obtain D sð Þ ¼ s3  8s2
27s  6. The Routh table for this polynomial is shown below.
s3
1
27
s2
8
6
s1
27:75
0
s0
6
0
Since there is one sign change, we conclude that the system has one pole outside the
unit circle and two poles inside the unit circle. The table did not produce a row of
zeros and thus, there are no jv poles. The system is unstable because of the pole
outside the unit circle.
Chapter 13
Solutions to Skill-Assessment Exercises
49

13.7
Defining G(s) as G1(s) in cascade with a zero-order-hold,
G sð Þ ¼ 20 1  eTs


s þ 3
ð
Þ
s s þ 4
ð
Þ s þ 5
ð
Þ
	

¼ 20 1  eTs

 3=20
s
þ
1=4
s þ 4
ð
Þ 
2=5
s þ 5
ð
Þ
	

:
Taking the z-transform yields
G z
ð Þ ¼ 20 1  z1


3=20
ð
Þz
z  1 þ
1=4
ð
Þz
z  e4T 
2=5
ð
Þz
z  e5T
	

¼ 3 þ 5 z  1
ð
Þ
z  e4T  8 z  1
ð
Þ
z  e5T :
Hence for T ¼ 0:1 second, Kp ¼ lim
z!1 G z
ð Þ ¼ 3, and Kv ¼ 1
T lim
z!1 z  1
ð
ÞG z
ð Þ ¼ 0, and
Ka ¼ 1
T2 lim
z!1 z  1
ð
Þ2G z
ð Þ ¼ 0. Checking for stability, we find that the system is
stable for T ¼ 0:1 second, since T z
ð Þ ¼
G z
ð Þ
1 þ G z
ð Þ ¼
1:5z  1:109
z2 þ 0:222z  0:703 has poles
inside the unit circle at 0:957 and þ 0:735. Again, checking for stability, we find that
the
system
is
unstable
for
T ¼ 0:5
second,
since
T z
ð Þ ¼
G z
ð Þ
1 þ G z
ð Þ ¼
3:02z  0:6383
z2 þ 2:802z  0:6272 has poles inside and outside the unit circle at þ0:208 and
3:01, respectively.
13.8
Draw the root locus superimposed over the z ¼ 0:5 curve shown below. Searching
along a 54:3 line, which intersects the root locus and the z ¼ 0:5 curve, we find the
point 0:587ﬀ54:3 ¼ 0:348 þ j 0:468
ð
Þ and K ¼ 0:31.
–3
–2.5
–2
–1.5
–1
–0.5
0
0.5
1
1.5
2
–1.5
–1
–0.5
0
0.5
1
1.5
Real Axis
Imag Axis
z-Plane Root Locus
54.3°
(0.348 + j0.468)
K = 0.31
13.9
Let
Ge sð Þ ¼ G sð ÞGc sð Þ ¼
100K
s s þ 36
ð
Þ s þ 100
ð
Þ
2:38 s þ 25:3
ð
Þ
s þ 60:2
ð
Þ
¼
342720 s þ 25:3
ð
Þ
s s þ 36
ð
Þ s þ 100
ð
Þ s þ 60:2
ð
Þ :
50
Solutions to Skill-Assessment Exercises

The following shows the frequency response of Ge jv
ð
Þ.
Frequency (rad/sec)
Phase (deg); Magnitude (dB)
Bode Diagrams
–60
–40
–20
0
20
40
10–1
100
101
102
103
–250
–200
–150
–100
We find that the zero dB frequency, vFM, for Ge jv
ð
Þ is 39 rad/s. Using Astrom’s
guideline the value of T should be in the range, 0:15=vFM ¼ 0:0038 second to
0:5=vFM ¼ 0:0128 second. Let us use T ¼ 0:001 second. Now find the Tustin
transformation for the compensator. Substituting s ¼ 2 z  1
ð
Þ
T z  1
ð
Þ into Gc sð Þ ¼
2:38 s þ 25:3
ð
Þ
s þ 60:2
ð
Þ
with T ¼ 0:001 second yields
Gc z
ð Þ ¼ 2:34
z  0:975
ð
Þ
z  0:9416
ð
Þ :
13.10
Gc z
ð Þ ¼ X z
ð Þ
E z
ð Þ ¼ 1899z2  3761z þ 1861
z2  1:908z þ 0:9075 . Cross-multiply and obtain
z2  1:908z þ

0:9075X z
ð Þ ¼ 1899z2  3761z þ 1861


E z
ð Þ. Solve for the highest power of z
operating on the output, X(z), and obtain z2X z
ð Þ ¼
1899z2  3761z þ 1861


E z
ð Þ  1:908z þ 0:9075
ð
ÞX z
ð Þ. Solving for X(z) on the left-hand side yields
Chapter 13
Solutions to Skill-Assessment Exercises
51

X z
ð Þ ¼ 1899  3761z1 þ 1861z2


E z
ð Þ
1:908z1 þ 0:9075z2


X z
ð Þ. Finally,
we implement this last equation with the following flow chart:
e*(t)
x*(t)
e*(t-0.1)
x*(t-0.1)
x*(t-0.2)
e*(t-0.2)
Delay
0.1 second
1899
–3761
1861
0.9075
–1.9.08
+
+
+
+
–
–
Delay
0.1 second
Delay
0.1 second
Delay
0.1 second
52
Solutions to Skill-Assessment Exercises


