
Dynamics 365 for Finance and
Operations Development
Cookbook
Fourth Edition
#VJMEFYUFOTJWFQPXFSGVMBOEBHJMFCVTJOFTTTPMVUJPOT
Deepak Agarwal
Abhimanyu Singh
BIRMINGHAM - MUMBAI

Dynamics 365 for Finance and Operations
Development Cookbook
Fourth Edition
Copyright Â© 2017 Packt Publishing
All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or
transmitted in any form or by any means, without the prior written permission of the
publisher, except in the case of brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this book to ensure the accuracy of the
information presented. However, the information contained in this book is sold without
warranty, either express or implied. Neither the authors, nor Packt Publishing, and its
dealers and distributors will be held liable for any damages caused or alleged to be caused
directly or indirectly by this book.
Packt Publishing has endeavored to provide trademark information about all of the
companies and products mentioned in this book by the appropriate use of capitals.
However, Packt Publishing cannot guarantee the accuracy of this information.
First published: December 2009
Second edition: May 2012
Third edition: April 2015
Fourth edition: August 2017
Production reference: 1100817
1VCMJTIFECZ1BDLU1VCMJTIJOH-UE
-JWFSZ1MBDF
-JWFSZ4USFFU
#JSNJOHIBN
#1#6,
ISBN 978-1-78646-886-4
XXXQBDLUQVCDPN

Credits
Authors
Deepak Agarwal
Abhimanyu Singh
Copy Editor
Safis Editing
Reviewer
Santosh Paruvella
Project Coordinator
Prajakta Naik
Commissioning Editor
Aaron Lazer
Proofreader
Safis Editing
Acquisition Editor
Denim Pinto
Indexer
Francy Puthiry
Content Development Editor
Lawrence Veigas
Graphics
Abhinash Sahu
Technical Editor
Mehul Singh
Production Coordinator
Nilesh Mohite

About the AuthorV
Deepak Agarwal is a Microsoft Certified Professional who has more than 6 years of
relevant experience. He has worked with different versions of Axapta, such as AX 2009, AX
2012, and Dynamics 365. He has had a wide range of development, consulting, and leading
roles, while always maintaining a significant role as a business application developer.
Although his strengths are rooted in X++ development, he is a highly regarded developer
and expert in the technical aspects of Dynamics AX development and customization. He
has also worked on base product development with the Microsoft team.
He was awarded the Most Valuable Professional (MVP) award from Microsoft for
Dynamics AX four times in a row, and he has held this title since 2013.
He shares his experience with Dynamics AX on his blog: "YBQUB7T.F
Deepak has also worked on the following Packt books:
Microsoft Dynamics AX 2012 R3 Reporting Cookbook
1.
Dynamics AX 2012 Reporting Cookbook
2.
Microsoft Dynamics AX 2012 Programming: Getting Started
3.
I would like to thank my wife for her support during this duration. Big thanks for her
understanding while I spent late hours working on this book. Thanks to my co-author,
Abhimanyu, and the Packt team for their support and efforts.

Abhimanyu Singh works as a Microsoft Dynamics 365 for Finance and Operations
consultant. Since the start of his career in 2012, he has worked in the development and
designing of business solutions for customers in supply chain management, banking, and
finance domain using Microsoft technologies. He has several certifications, including the
Microsoft Certified Dynamics Specialist certification.
I would like to thank my parents, sister, and brother-in-law for their support and
inspiration during the time spent on this book. Secondly, I wish to thank the co-author of
this book, and my friend, Deepak Agarwal--a very experienced Dynamics AX consultant.

About the Reviewer
Santosh Paruvella has 12 years of experience in Dynamics AX, and he has worked on
various versions of it, from 3.0 to 2012, and Dynamics 365 for Finance and Operations. He is
presently working as a Technical Architect and Lead for various implementation projects,
designing the solutions and leading the team towards successful implementations.
I have got the chance to review this Dynamics 365 for finance and Operations
Development Cookbook, and I am very thankful to the Packt team and the author for this
opportunity. This is a very good book for beginners to start with AX development.

www.PacktPub.com
For support files and downloads related to your book, please visit XXX1BDLU1VCDPN. Did
you know that Packt offers eBook versions of every book published, with PDF and ePub
files available? You can upgrade to the eBook version at XXX1BDLU1VCDPNand as a print
book customer, you are entitled to a discount on the eBook copy. Get in touch with us at
TFSWJDF!QBDLUQVCDPN for more details.
At XXX1BDLU1VCDPN, you can also read a collection of free technical articles, sign up for a
range of free newsletters and receive exclusive discounts and offers on Packt books and
eBooks.
IUUQTXXXQBDLUQVCDPNNBQU
Get the most in-demand software skills with Mapt. Mapt gives you full access to all Packt
books and video courses, as well as industry-leading tools to help you plan your personal
development and advance your career.
Why subscribe?
Fully searchable across every book published by Packt
Copy and paste, print, and bookmark content
On demand and accessible via a web browser

Customer Feedback
Thanks for purchasing this Packt book. At Packt, quality is at the heart of our editorial
process. To help us improve, please leave us an honest review on this book's Amazon page
at IUUQTXXXBNB[PODPNEQ.
If you'd like to join our team of regular reviewers, you can e-mail us at
DVTUPNFSSFWJFXT!QBDLUQVCDPN. We award our regular reviewers with free eBooks and
videos in exchange for their valuable feedback. Help us be relentless in improving our
products!

This book is dedicated to my grandpa, the late Mr. M.R. Agarwal. You are always a blessing
indeed.
- Deepak Agarwal

Table of Contents
Preface
1
Chapter 1: Processing Data
8
Introduction
8
Creating a new project, package, and model
9
How to do it...
9
There's more...
13
Creating a new number sequence
14
How to do it...
15
How it works...
21
See also
21
Renaming the primary key
22
How to do it...
25
How it works...
28
Adding a document handling note
28
Getting ready
29
How to do it...
30
How it works...
32
Using a normal table as a temporary table
32
How to do it...
33
How it works...
34
Copying a record
34
How to do it...
35
How it works...
37
There's more...
38
Building a query object
39
How to do it...
40
How it works...
41
There's more...
42
Using the OR operator
43
See also
44
Using a macro in a SQL statement
44
How to do it...
45
How it works...
46
Executing a direct SQL statement
47

[ ii ]
How to do it...
47
How it works...
50
There's more...
51
Enhancing the data consistency checks
53
Getting ready
53
How to do it...
55
How it works...
57
There's more...
58
Using the date effectiveness feature
58
How to do it...
59
How it works...
62
Chapter 2: Working with Forms
63
Introduction
63
Creating dialogs using the RunBase framework
64
How to do it...
65
How it works...
69
Handling the dialog event
70
How to do it...
71
How it works...
75
See also
76
Creating dialogs using the SysOperation framework
76
Getting ready
77
How to do it...
78
Building a dynamic form
86
How to do it...
87
How it works...
91
Adding a form splitter
93
How to do it...
94
How it works...
95
Creating a modal form
96
How to do it...
96
How it works...
98
There's more...
98
See also
98
Modifying multiple forms dynamically
98
How to do it...
99
How it works...
101
Storing the last form values
101
How to do it...
102

[ iii ]
How it works...
104
Using a tree control
105
How to do it...
106
How it works...
111
See also
112
Adding the View details link
112
How to do it...
113
How it works...
115
Selecting a form pattern
116
How to do it
116
Full list of form patterns
117
How to do it...
118
Creating a new form
121
Getting ready
121
How to do it...
121
How it works...
126
Chapter 3: Working with Data in Forms
127
Introduction
127
Using a number sequence handler
128
How to do it...
128
How it works...
131
See also
132
Creating a custom filter control
132
How to do it...
133
How it works...
137
See also
138
Creating a custom instant search filter
138
How to do it...
138
How it works...
140
See also
141
Building a selected/available list
141
How to do it...
142
How it works...
146
There's more...
147
Creating a wizard
151
How to do it...
152
How it works...
162
Processing multiple records
164
How to do it...
164

[ iv ]
How it works...
167
Coloring records
168
Getting ready
168
How to do it...
168
How it works...
169
See also
170
Adding an image to records
170
How to do it...
171
How it works...
172
There's more...
172
Displaying an image as part of a form
173
Saving a stored image as a file
175
Chapter 4: Building Lookups
179
Introduction
179
Creating an automatic lookup
180
How to do it...
180
How it works...
181
There's more...
181
Creating a lookup dynamically
183
How to do it...
184
How it works...
186
There's more...
187
Using a form to build a lookup
187
How to do it...
187
How it works...
191
See also
193
Building a tree lookup
193
How to do it...
193
How it works...
196
See also
197
Displaying a list of custom options
197
How to do it...
198
How it works...
200
There's more...
200
Displaying custom options in another way
200
How to do it...
201
How it works...
204
There's more...
204
Building a lookup based on the record description
207

[ v ]
How to do it...
207
How it works...
209
There's more...
210
Building the browse for folder lookup
213
How to do it...
214
How it works...
218
There's more...
218
Creating a color picker lookup
219
How to do it...
220
How it works...
222
Chapter 5: Processing Business Tasks
223
Introduction
223
Using a segmented entry control
224
How to do it...
224
How it works...
227
There's more...
227
See also
229
Creating a general journal
230
How to do it...
230
How it works...
235
There's more
235
See also
238
Posting a general journal
238
How to do it...
238
How it works...
240
See also
240
Processing a project journal
241
How to do it...
241
How it works...
243
There's more...
244
Creating and posting a ledger voucher
245
How to do it...
245
How it works...
248
See also
250
Changing an automatic transaction text
250
Getting ready
251
How to do it...
251
How it works...
253
There's more...
253

[ vi ]
Creating a purchase order
254
How to do it...
255
How it works...
256
There's more...
257
Posting a purchase order
257
How to do it...
257
How it works...
259
There's more...
260
Creating a sales order
261
How to do it...
261
How it works...
262
There's more...
263
Posting a sales order
263
How to do it...
264
How it works...
265
There's more...
265
Creating an electronic payment format
266
How to do it...
266
How it works...
271
Chapter 6: Data Management
273
Introduction
273
Data entities
274
Getting ready
274
How to do it...
275
How it works...
280
There's more...
281
Building a data entity with multiple data sources
283
How to do it...
283
How it works...
289
There's more...
290
Data packages
292
Getting ready...
292
How to do it...
294
There's more...
299
See also
302
Data migration
302
Getting ready
303
How to do it...
305
How it works...
308

[ vii ]
Importing data
308
How to do it...
308
How it works...
314
Troubleshooting
314
Getting ready
314
How to do it...
315
How it works...
322
There's more...
326
Chapter 7: Integration with Microsoft Office
327
Introduction
327
Configuring and using the Excel Data Connector add-in
328
How to do it...
328
How it works...
332
Using Workbook Designer
333
How to do it...
333
How it works...
336
Export API
336
How to do it...
337
How it works...
339
Lookup in Excel - creating a custom lookup
340
How to do it...
340
How it works...
341
Document management
342
How to do it...
342
How it works...
344
There's more...
344
Chapter 8: Integration with Power BI
346
Introduction
346
Configuring Power BI
347
How to do it...
347
How it works...
354
There's more...
355
See also
355
Consuming data in Excel
356
How to do it...
356
How it works...
361
See also
362
Integrating Excel with Power BI
363

[ viii ]
How to do it...
363
How it works...
366
See also
366
Developing interactive dashboards
366
How to do it...
367
How it works...
374
Embedding Power BI visuals
374
How to do it...
374
How it works...
376
Chapter 9: Integration with Services
377
Introduction
377
Authenticating a native client app
378
Getting ready
378
How to do it...
378
How it works...
386
There's more...
387
See also
387
Creating a custom service
388
Getting ready
388
How to do it...
388
How it works...
392
Consuming custom services in JSON
392
Getting ready
393
How to do it...
393
How it works...
396
There's more...
396
Consuming custom services in SOAP
397
Getting ready
397
How to do it...
398
How it works...
400
Consuming OData services
401
Getting ready
401
How to do it...
402
How it works...
405
There's more...
406
See also
406
Consuming external web services
406
Getting ready
406
How to do it...
406

[ ix ]
How it works...
412
There's more...
413
See also
414
Chapter 10: Improving Development Efficiency and Performance
415
Introduction
415
Using extensions
416
How to do it...
416
How it works...
419
Caching a display method
420
How to do it...
420
How it works...
422
There's more...
423
Calculating code execution time
424
How to do it...
424
How it works...
425
There's more...
426
Enhancing insert, update, and delete operations
427
How to do it...
427
How it works...
434
There's more...
435
Using delete_from
435
Using update_recordSet for faster updates
436
Writing efficient SQL statements
437
How to do it...
437
How it works...
439
There's more...
440
See also
441
Using event handler
441
How to do it...
442
How it works...
444
There's more...
444
Creating a Delegate method
445
Getting ready...
445
How to do it...
445
How it works...
447
There's more...
447
See also
447
Index
448

Preface
As a Dynamics 365 for Finance and Operations developer, your responsibility is to deliver
all kinds of application customization, whether small adjustments or a bespoke modules.
Dynamics 365 for Finance and Operations is a highly customizable system and requires a
significant amount of knowledge and experience to deliver quality solutions. One goal can
be achieved in multiple ways, and there is always the question of which way is the best.
This book takes you through numerous recipes to help you with daily development tasks.
Each recipe contains detailed step-by-step instructions along with the application
screenshots and in-depth explanations. The recipes cover multiple Dynamics 365 for
Financial and Operations modules, so, at the same time, the book provides an overview of
the functional aspects of the system for developers.
What this book covers
$IBQUFS, Processing Data, focuses on data manipulation. It explains how to build data
queries, check and modify existing data, read and write external files, and use data
effectively.
$IBQUFS, Working with Forms, covers various aspects of building forms in Dynamics 365
for Finance and Operations. In this chapter, dialogs and their events are explained. Also,
various useful features, such as splitters, tree controls, and checklists, are explained.
$IBQUFS, Working with Data in Forms, basically supplements Chapter 2, Working with Forms,
and explains the data organization in forms. The examples in this chapter include
instructions for building filter controls on forms, processing multiple records, and working
with images and colors.
$IBQUFS, Building Lookups, covers all kinds of lookups in the system. This chapter starts
with a simple, automatically generated lookup, continues with more advanced ones, and
finishes with standard Windows lookups, such as the file selection dialog and the color
picker.
$IBQUFS, Processing Business Tasks, explains how to use the Dynamics 365 for Finance and
Operations business logic API. In this chapter, topics such as how to process journals,
purchase orders, and sales orders are discussed. Other features, such as posting ledger
vouchers, modifying transaction texts, and creating electronic payment formats, are
included as well.

Preface
[ 2 ]
$IBQUFS, Data Management, explains the data management and data entity concepts, how
to build a data entity, data packages, and import and export in Dynamics 365 for Financial
and Operations.
$IBQUFS, Integration with Microsoft Office, explains how to configure and use the Excel
Data Connector add-in, and design Excel workbooks with the data feed from Dynamics 365
from Operations using OData. It also covers how to use the export API and document
management.
$IBQUFS, Integration with Power BI, explains the configuration of Power BI and its
integration with Dynamics 365 for Financial and Operations to develop interactive
dashboards and embed them in Dynamics 365 for Financial and Operations workspaces.
$IBQUFS, Integration with Services, explains how to use services in Dynamics 365 for
Financial and Operations. This chapter covers how to create services, authentication, SOAP
applications, JSON applications, and OData services. It also demonstrates how to consume
external services.
$IBQUFS, Improving Development Efficiency and Performance, presents a few ideas on how
to make daily development tasks easier. It discusses how system performance can be
improved by following several simple rules. This chapter explains how to calculate code
execution time, how to write efficient SQL statements, and how to properly cache display
methods.
Exceptions and considerations
The code in this book follows the best practice guidelines provided by Microsoft, but there
are some exceptions:
No text labels were used to make the code clear
No three-letter code was used in front of each new AOT object
No configuration or security keys were used
Object properties that are not relevant to the topic being discussed are not set
Also, here are some considerations that you need to keep in mind when reading this book:
Each recipe only demonstrates the principle and is not a complete solution
The data in your environment might not match the data used in the recipes, so
the code might have to be adjusted appropriately
For each recipe, the assumption is that no other modifications are present in the
system, unless it is explicitly specified

Preface
[ 3 ]
The code might not have all the possible validations that are not relevant to the
principle being explained
The code might have more variables than required in order to ensure that it is
clear for all audiences
Sometimes, unnecessary code wrapping is used to make sure the code fits into
the page width of this book and is easily readable
What you need for this book
All the coding examples were performed in a Microsoft Azure-hosted Microsoft Dynamics
365 for Financial and Operations environment. The following list of software from the
virtual image was used in this book:
Microsoft Dynamics 365 for Financial and Operations (Update 6)
Microsoft Visual studio 2015
Microsoft Windows Server 2015 Enterprise
Microsoft SQL Server 2016
Microsoft Power BI
Microsoft Office Excel 2015
Microsoft Office Word 2015
Microsoft Internet Explorer
Windows Notepad
Although all the recipes have been tested on the previously-mentioned software, they may
work on older or newer software versions with minor code adjustments. As Microsoft is
continuously evolving on Dynamics 365 for Financial and Operations, we might see some
differences while using the same code in older or newer updates of application. Stick to the
concept and customize or extend the application.
Who this book is for
If you are a Dynamics AX developer primarily focused on delivering time-proven
applications, then this book is for you. This book is also ideal for people who want to raise
their programming skills above the beginner level, and, at the same time, learn the
functional aspects of Dynamics 365 for Financial and Operations. Some X++ coding
experience is expected.

Preface
[ 4 ]
Sections
In this book, you will find several headings that appear frequently (Getting ready, How to
do it, How it works, There's more, and See also).
To give clear instructions on how to complete a recipe, we use these sections as follows:
Getting ready
This section tells you what to expect in the recipe, and describes how to set up any software
or any preliminary settings required for the recipe.
How to do it...
This section contains the steps required to follow the recipe.
How it works...
This section usually consists of a detailed explanation of what happened in the previous
section.
There's more...
This section consists of additional information about the recipe in order to make the reader
more knowledgeable about the recipe.
See also
This section provides helpful links to other useful information for the recipe.
Conventions
In this book, you will find a number of text styles that distinguish between different kinds
of information. Here are some examples of these styles and an explanation of their meaning.
Code words in text, database table names, folder names, filenames, file extensions,
pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Then, to
override the data source's XSJUF
 method."

Preface
[ 5 ]
A block of code is set as follows:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF8SJUUFO>
QVCMJDWPJE$VTU(SPVQ@0O8SJUUFO
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTOVNCFS4FR'PSN)BOEMFS
GPSN.FUIPE%BUB4PVSDF8SJUF

^
New terms and important words are shown in bold. Words that you see on the screen, for
example, in menus or dialog boxes, appear in the text like this: "Clicking the Next button
moves you to the next screen."
Warnings or important notes appear like this.
Tips and tricks appear like this.
Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this
book-what you liked or disliked. Reader feedback is important for us as it helps us develop
titles that you will really get the most out of.
To send us general feedback, simply e-mail GFFECBDL!QBDLUQVCDPN, and mention the
book's title in the subject of your message.
If there is a topic that you have expertise in and you are interested in either writing or
contributing to a book, see our author guide at XXXQBDLUQVCDPNBVUIPST.
Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you
to get the most from your purchase.

Preface
[ 6 ]
Downloading the example code
You can download the example code files for this book from your account at
IUUQXXXQBDLUQVCDPN. If you purchased this book elsewhere, you can visit
IUUQXXXQBDLUQVCDPNTVQQPSU and register to have the files e-mailed directly to you.
You can download the code files by following these steps:
Log in or register to our website using your e-mail address and password.
1.
Hover the mouse pointer on the SUPPORT tab at the top.
2.
Click on Code Downloads & Errata.
3.
Enter the name of the book in the Search box.
4.
Select the book for which you're looking to download the code files.
5.
Choose from the drop-down menu where you purchased this book from.
6.
Click on Code Download.
7.
Once the file is downloaded, please make sure that you unzip or extract the folder using the
latest version of:
WinRAR / 7-Zip for Windows
Zipeg / iZip / UnRarX for Mac
7-Zip / PeaZip for Linux
The code bundle for the book is also hosted on GitHub at IUUQTHJUIVCDPN1BDLU1VCM
JTIJOH%ZOBNJDTGPS'JOBODFBOE0QFSBUJPOT%FWFMPQNFOU$PPLCPPL'PVSUI&
EJUJPO. We also have other code bundles from our rich catalog of books and videos
available at IUUQTHJUIVCDPN1BDLU1VCMJTIJOH. Check them out!
Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do
happen. If you find a mistake in one of our books-maybe a mistake in the text or the code-
we would be grateful if you could report this to us. By doing so, you can save other readers
from frustration and help us improve subsequent versions of this book. If you find any
errata, please report them by visiting IUUQXXXQBDLUQVCDPNTVCNJUFSSBUB, selecting
your book, clicking on the Errata Submission Form link, and entering the details of your
errata. Once your errata are verified, your submission will be accepted and the errata will
be uploaded to our website or added to any list of existing errata under the Errata section of
that title.

Preface
[ 7 ]
To view the previously submitted errata, go to
IUUQTXXXQBDLUQVCDPNCPPLTDPOUFOUTVQQPSU and enter the name of the book in the
search field. The required information will appear under the Errata section.
Piracy
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At
Packt, we take the protection of our copyright and licenses very seriously. If you come
across any illegal copies of our works in any form on the Internet, please provide us with
the location address or website name immediately so that we can pursue a remedy.
Please contact us at DPQZSJHIU!QBDLUQVCDPN with a link to the suspected pirated
material.
We appreciate your help in protecting our authors and our ability to bring you valuable
content.
Questions
If you have a problem with any aspect of this book, you can contact us at
RVFTUJPOT!QBDLUQVCDPN, and we will do our best to address the problem.

1
Processing Data
In this chapter, we will cover the following recipes:
Creating a new project, package, and model
Creating a new number sequence
Renaming the primary key
Adding a document handling note
Using a normal table as a temporary table
Copying a record
Building a query object
Using a macro in a SQL statement
Executing a direct SQL statement
Enhancing the data consistency checks
Using the date effectiveness feature
Introduction
This chapter focuses on data manipulation exercises in all new Dynamics 365 for Finance
and Operations. These exercises are very useful when doing data migration, system
integration, custom reporting, and so on. Here, we will discuss how to work with query
objects from the X++/C# code. We will also discuss how to reuse macros in X++ SQL
statements and how to execute SQL statements directly to the database. This chapter will
explain how to rename primary keys, how to merge and copy records, how to add
document handling notes to selected records, and how to create and read XML and comma-
separated files. The chapter ends with a recipe about the date effectiveness feature.

Processing Data
[ 9 ]
Creating a new project, package, and model
Elements in Dynamics 365 for Finance and Operations represent every individual element
of AOT such as class, table, form, and so on. Elements in Dynamics 365 for Finance and
Operations are stored on disk as XML files; these files contain the metadata and source code
for the element. The XML files are the unit of Source Control.
Projects works the same as AX2012, but in D365 an element can be customized only once
they are added to a specific Visual Studio project. The project may only belong to one
model.
A Dynamics 365 for Finance and Operations model is a group of elements. Standard
elements are part of a standard model; you can add them into your model and do
customization. A model is a design-time concept. An example of models: warehouse
management model, a project accounting model, and more. Models can have one or more
projects. Models may only belong to one package.
A Dynamics 365 for Finance and Operations package is a deployment and compilation
unit of one or more models. It includes model metadata, binaries, cubes, and other
associated resources. One or more D365 packages can be packaged into a deployment
package, which is the vehicle used for deployment on UAT and production environments.
Packages are packaged into a deployable package file for deployment to Sandbox or
production environments. A package can have one or more models. Packages can have
references to other packages, just like .NET assemblies can reference each other.
How to do it...
To create a new project, follow these steps:
Open Visual Studio as admin.
1.
On the File menu, point to New, and then click Project.
2.
In the list of template types, expand the Installed node.
3.
Expand the Templates node.
4.
Select the Microsoft Dynamics 365 for Operations category.
5.
Select the D365 Project template.
6.
Enter the name and location for the new project.
7.

Processing Data
[ 10 ]
Select Create directory for solution if you want to create a new solution for this
8.
project, uncheck if you want to add in your current solution.
To create a new model, follow these steps:
Open Visual Studio as admin.
1.
On the Dynamics 365 menu, point to Model management and select Create
2.
model.

Processing Data
[ 11 ]
Give a model, publisher name, and other values:
3.

Processing Data
[ 12 ]
Now here you can create a new package or select any existing package. We could
4.
create a new package and select the required package as referenced packages:

Processing Data
[ 13 ]
Double-check the summary with details. Select Create new project if you want to
5.
create a new project in this model once created. You can mark this model to all
your new projects by selecting options:
There's more...
As you saw, there was one more step while creating a model, Select referenced packages.
When you create your own package you can select from an existing package to add them as
references in your new package. You may need to add some standard package reference if
you want to add them into your customization.

Processing Data
[ 14 ]
Here are the steps to create a new package:
Open Visual Studio as admin.
1.
On the Dynamics 365 menu, point to Model management and select Create
2.
model.
Give a model, publisher name, and other values.
3.
On the next step select Create new package
4.
Give a name to your package.
5.
Next select the existing package as a reference to this new package.
6.
Click on Finish.
7.
So now you have your own model with a new package.
Creating a new number sequence
Number sequences in A Dynamics 365 for Finance and Operations is a deployment and
compilation unit of one or more models. It includes model metadata, binaries, cubes, and
other associated resources. One or more D365 packages can be packaged into a deployment
package, which is the vehicle used for deployment on UAT and production environments.
Packages are packaged into a deployable package file for deployment to Sandbox or
production environments. A package can have one or more models. Packages can have
references to other packages, just like .NET assemblies can reference each other. are used to
generate specifically formatted numbers for record identification. These number sequences
can be anything from voucher numbers or transaction identification numbers to customer
or vendor accounts.
When developing custom functionality, often one of the tasks is to add a new number
sequence to the system in order to support newly created tables. Adding a number
sequence to the system is a two-step process. First, we create the number sequence itself;
second, we start using it in some particular form or from the code.
D365 contains a list of /VNCFS4FR"QQMJDBUJPO.PEVMF derivative classes, which hold the
number sequence's setup data for the specific module. These classes are read by the number
sequence wizard, which detects existing number sequences and proposes to create the
missing ones or newly added ones. The wizard is normally run as a part of the application
initialization. It can also be rerun any time later when expanding the D365 functionality
used, where a setup of additional number sequences is required. The wizard also has to be
rerun if new custom number sequences are added to the system.

Processing Data
[ 15 ]
In this recipe, we will do the first step, that is, add a new number sequence to the system. In
a standard application, the customer group number is not driven by any number sequence,
so we will enhance this by creating it. The second step is explained later in the Using a
number sequence handler recipe in $IBQUFS, Working with Data in Forms.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new /VNCFS4FR.PEVMF$VTUPNFS@QBDLU class in the D365 Project that
1.
extends the /VNCFS4FR.PEVMF$VTUPNFS class in the Application and add the
following code snippet at the bottom of the MPBE.PEVMF@&YUFOTJPO
 method:
DMBTT/VNCFS4FR.PEVMF$VTUPNFS@QBDLUFYUFOET
/VNCFS4FR.PEVMF$VTUPNFS
\
QVCMJDWPJEMPBE.PEVMF@&YUFOTJPO

\
/VNCFS4FR%BUBUZQFEBUBUZQF/VNCFS4FR%BUBUZQFDPOTUSVDU

EBUBUZQFQBSN%BUBUZQF*E
FYUFOEFE5ZQF/VN
$VTU(SPVQ*E
EBUBUZQFQBSN3FGFSFODF)FMQ
$VTUPNFSHSPVQ*%
EBUBUZQFQBSN8J[BSE*T$POUJOVPVT
GBMTF
EBUBUZQFQBSN8J[BSE*T.BOVBM
/P:FT/P
EBUBUZQFQBSN8J[BSE*T$IBOHF%PXO"MMPXFE
/P:FT:FT
EBUBUZQFQBSN8J[BSE*T$IBOHF6Q"MMPXFE
/P:FT:FT
EBUBUZQFQBSN8J[BSE)JHIFTU

EBUBUZQFQBSN4PSU'JFME

EBUBUZQFBEE1BSBNFUFS5ZQF
/VNCFS4FR1BSBNFUFS5ZQF%BUB"SFBUSVFGBMTF
UIJTDSFBUF
EBUBUZQF
^
^
Downloading the example code
You can download the example code files for all Packt books you have
purchased from your account at IUUQXXXQBDLUQVCDPN. If you
purchased this book elsewhere, you can visit
IUUQXXXQBDLUQVCDPNTVQQPSU and register to have the files emailed
directly to you.

Processing Data
[ 16 ]
Create a new runnable class (Job) with the following lines of code, build the
2.
solution and run it:
DMBTTMPBE/VN4FR$VTU1BDLU
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJE.BJO
"SHTBSHT
\
EFGJOFUIFDMBTTWBSJBCMF
/VNCFS4FR.PEVMF$VTUPNFS@QBDLUOZNCFS4FR.PEOFX
/VNCFS4FR.PEVMF$VTUPNFS@QBDLU

MPBEUIFOVNCFSTFRVFODFT
OZNCFS4FR.PEMPBE.PEVMF@&YUFOTJPO

^
^
Run the number sequence wizard by clicking on the Generate button under
3.
Number sequence by going to Organization administration | Common |
Number sequence and then click on the Next button, as shown in the following
screenshot:

Processing Data
[ 17 ]
Click on Details to view more information. Delete everything apart from the
4.
rows where Area is Accounts receivable and Reference is Customer group. Note
the number sequence codes and click on the Next button, as shown here:
On the last page, click on the Finish button to complete the setup, as shown in the
5.
following screenshot:

Processing Data
[ 18 ]
The newly created number sequences now can be found in the Number sequence
6.
form, as shown in the following screenshot:

Processing Data
[ 19 ]
Navigate to Organization administration | Number sequences | Segment
7.
configuration and notice the new Customer group reference under the Accounts
receivable area:
Navigate to Accounts receivable | Setup | Accounts receivable parameters and
8.
select the Number sequences tab. Here, you should see the new number
sequence code:

Processing Data
[ 20 ]
The last thing to be done is to create a helper method for this number sequence.
9.
Create a new extension class $VTU1BSBNFUFST@&YUFOTJPO for the
$VTU1BSBNFUFST table and add it to the Dynamics 365 Project and then create
the following method and build the solution:
<&YUFOTJPO0G
UBCMF4US
$VTU1BSBNFUFST>
GJOBMDMBTT$VTU1BSBNFUFST@&YUFOTJPO
\
TVNNBSZ 
(FUTUIFOVNCFSSFGFSFODFDVTUPNFSHSPVQJE
TVNNBSZ 
SFUVSOT 
"OJOTUBODFPGUIFD /VNCFS4FRVFODF3FGFSFODFD DMBTT
SFUVSOT 
DMJFOUTFSWFSTUBUJD/VNCFS4FRVFODF3FGFSFODF
OVN3FG$VTU(SPVQ*E

\
/VNCFS4FRVFODF3FGFSFODF/VNCFS4FR3FGFSFODF
/VNCFS4FR3FGFSFODF/VNCFS4FR3FGFSFODFGJOE3FGFSFODF

FYUFOEFE5ZQF/VN
$VTU(SPVQ*E
SFUVSO/VNCFS4FR3FGFSFODF
^
^

Processing Data
[ 21 ]
How it works...
We start the recipe by adding a number sequence initialization code into the
/VNCFS4FR.PEVMF$VTUPNFS@QBDLU class. As understood from its name, the number
sequence initialization code holds the initialization of the number sequences that belong to
the Accounts receivable module.
The code in the MPBE.PEVMF@&YUFOTJPO
 method defines the default number sequence
settings to be used in the wizard, such as the data type, description, and highest possible
number. Additional options such as the starting sequence number, number format, and
others can also be added here. All the mentioned options can be changed while running the
wizard. The BEE1BSBNFUFS5ZQF
 method is used to define the number sequence scope.
In the example, we created a separate sequence for each Legal entity.
Before we start the wizard, we initialize number sequence references. This should be done
as a part of the Dynamics 365 for Finance and Operations initialization checklist, but in this
example, we execute it manually by calling the MPBE.PEVMF@&YUFOTJPO
 method of the
/VNCFS4FR"QQMJDBUJPO.PEVMF@QBDLU class.
Next, we execute the wizard that will create the number sequences for us. We skip the
welcome page and in the second step of the wizard, the Details button can be used to
display more options. The options can also be changed later in the Number sequences form
before or even after the number sequence is actually used. The last page shows an overview
of what will be created. Once completed, the wizard creates new records in the Number
sequences form for each company.
The newly created number sequence reference appears in the Segment configuration form.
Here, we can see that the Data area checkbox is checked, which means that we will have
separate number lists for each company. The number sequence setup can be normally
located in the module parameter forms.
See also
The Using a number sequence handler recipe in $IBQUFS, Working with Data in
Forms

Processing Data
[ 22 ]
Renaming the primary key
Most of you who are familiar with the Dynamics 365 for Finance and Operations
application, have probably used the standard 3FOBNF function. This function allows you to
rename the primary key of almost any record. With this function, you can fix records that
were saved or created by mistake. This function ensures data consistency, that is, all the
related records are renamed as well. It can be accessed from the Record information form
(shown in the following screenshot), which can be opened by selecting Record info from
the right-click menu on any record:

Processing Data
[ 23 ]
A new form will open as follows:

Processing Data
[ 24 ]
Click on the Rename button to rename the Vendor Account field value.
When it comes to mass renaming, this function might be very time-consuming as you need
to run it on every record. An alternative way of doing this is to create a job that
automatically runs through all the required records and calls this function automatically.

Processing Data
[ 25 ]
This recipe will explain how the record's primary key can be renamed through the code. As
an example, we will create a job that renames a vendor account.
How to do it...
Carry out the following steps in order to complete this recipe:
Navigate to Accounts payable | Vendors | All vendors and find the account that
1.
has to be renamed, as shown in the following screenshot:
Click on Transactions in the Action pane to check the existing transactions, as
2.
shown in the following screenshot:

Processing Data
[ 26 ]
Create a new project, create a runnable class named 7FOE"DDPVOU3FOBNF, and
3.
enter the following code snippet. Use the previously selected account:
DMBTT7FOE"DDPVOU3FOBNF
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
7FOE5BCMFWFOE5BCMF
UUT#FHJO
TFMFDUGJSTU0OMZWFOE5BCMF
XIFSFWFOE5BCMF"DDPVOU/VN		
JG
WFOE5BCMF
\
WFOE5BCMF"DDPVOU/VN	64	
WFOE5BCMFSFOBNF1SJNBSZ,FZ

^
UUT$PNNJU
^
^

Processing Data
[ 27 ]
Select class 7FOE"DDPVOU3FOBNF and right-click and then select Set as startup
4.
object. Execute the class by clicking Start in Visual Studio and check whether the
renaming was successful, by navigating to Accounts payable | Vendors | All
vendors again and finding the new account. The new account should have
retained all its transactions and other related records, as shown in the following
screenshot:
Click on Transactions in the Action pane in order to see whether the existing
5.
transactions are still in place, as shown in the following screenshot:

Processing Data
[ 28 ]
How it works...
In this recipe, we first select the desired vendor record and set its account number to the
new value. Note that only the fields belonging to the table's primary key can be renamed in
this way.
Then, we call the table's SFOBNF1SJNBSZ,FZ
 method, which does the actual renaming.
The method finds all the related records for the selected vendor account and updates them
with the new value. The operation might take a while, depending on the volume of data, as
the system has to update multiple records located in multiple tables.
Adding a document handling note
Document handling in Dynamics 365 for Finance and Operations is a feature that allows
you to add notes, links, documents, images, files, and other related information to almost
any record in the system. For example, we can track all the correspondence sent out to our
customers by attaching the documents to their records in Dynamics 365 for Finance and
Operations. Document handling on most of the forms can be accessed either from the
Action pane by clicking on the Attachments button and selecting Document handling from
the Command menu under File or selecting the Document handling icon from the status
bar.

Processing Data
[ 29 ]
Document handling has a number of configuration parameters that you can find by
navigating to Organization administration | Setup | Document management. Please refer
to Dynamics 365 for Operations Manuals to find out more.
Dynamics 365 for Finance and Operations also allows you to add document handling notes
from the code. This can come in handy when you need to automate the document handling
process. In this recipe, we will demonstrate this by adding a note to a vendor account.
Getting ready
Before you start, ensure that document handling is enabled on the user interface. Open
Document management parameters by navigating to Organization administration | Setup
| Document management and make sure that Use Active document tables is not marked,
as shown in the following screenshot:
Then, open the Document types form from the same location and pick or create a new
document type with its Group set to Note, as shown in the following screenshot. In our
demonstration, we will use Note.

Processing Data
[ 30 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Navigate to Accounts payable | Vendors | All vendors and locate any vendor
1.
account to be updated, as shown in the following screenshot:

Processing Data
[ 31 ]
Create a Dynamics 365 for Operations Project, create a new runnable class named
2.
7FOE"DDPVOU%PDVNFOU, and enter the following code snippet. Use the
previously selected vendor account and document type:
DMBTT7FOE"DDPVOU%PDVNFOU
\
TUBUJDWPJENBJO
"SHT@BSHT
\
7FOE5BCMFWFOE5BCMF
%PDV5ZQFEPDV5ZQF
%PDV3FGEPDV3FG
WFOE5BCMF7FOE5BCMFGJOE
		
EPDV5ZQF%PDV5ZQFGJOE
	/PUF	
JG
EPDV5ZQF]]
EPDV5ZQF5ZQF(SPVQ%PDV5ZQF(SPVQ/PUF
\
UISPXFSSPS
*OWBMJEEPDVNFOUUZQF
^
EPDV3FG3FG$PNQBOZ*EWFOE5BCMFEBUB"SFB*E
EPDV3FG3FG5BCMF*EWFOE5BCMF5BCMF*E
EPDV3FG3FG3FD*EWFOE5BCMF3FD*E
EPDV3FG5ZQF*EEPDV5ZQF5ZQF*E
EPDV3FG/BNF	"VUPNBUJDOPUF	
EPDV3FG/PUFT	"EEFEGSPN9	
EPDV3FGJOTFSU

JOGP
%PDVNFOUOPUFIBTCFFOBEEFETVDDFTTGVMMZ
^
^
Run the class to create the note.
3.
Go back to the vendor list and click on the Attachments button in the form's
4.
Action pane or select Document handling from the Command menu under File
to view the note added by our code, as shown in the following screenshot:

Processing Data
[ 32 ]
How it works...
All the document handling notes are stored in the %PDV3FG table, where three fields,
3FG$PNQBOZ*E, 3FG5BCMF*E, and 3FG3FD*E, are used to identify the parent record. In this
recipe, we set these fields to the vendor company ID, vendor table ID, and vendor account
record ID, respectively. Then, we set the type, name, and description and inserted the
document handling record. Notice that we have validated the document type before using
it. In this way, we added a note to the record.
Using a normal table as a temporary table
Standard Dynamics 365 for Finance and Operations contains numerous temporary tables
that are used by the application and can be used in custom modifications too. Although
new temporary tables can also be easily created using the Dynamics 365 for Operations
Project, sometimes it is not effective. One of the cases where it is not effective can be when
the temporary table is similar to an existing one or exactly the same. The goal of this recipe
is to demonstrate an approach for using standard non temporary tables in order to hold
temporary data.
As an example, we will use the vendor table to insert and display a couple of temporary
records without affecting the actual data.

Processing Data
[ 33 ]
How to do it...
Carry out the following steps in order to complete this recipe:
In the Dynamics 365 Project, create a new class named 7FOE5BCMF5NQ with the
1.
following code snippet:
DMBTT7FOE5BCMF5FNQ
\
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
7FOE5BCMFWFOE5BCMF
WFOE5BCMFTFU5NQ

WFOE5BCMF"DDPVOU/VN		
WFOE5BCMF#MPDLFE$VTU7FOEPS#MPDLFE/P
WFOE5BCMF1BSUZ
WFOE5BCMFEP*OTFSU

WFOE5BCMFDMFBS

WFOE5BCMF"DDPVOU/VN		
WFOE5BCMF#MPDLFE$VTU7FOEPS#MPDLFE"MM
WFOE5BCMF1BSUZ
WFOE5BCMFEP*OTFSU

XIJMFTFMFDUWFOE5BCMF
\
JOGP
TUS'NU

WFOE5BCMF"DDPVOU/VN
WFOE5BCMF#MPDLFE
^
^
^
Run the class and check the results, which may be similar to this:
2.

Processing Data
[ 34 ]
How it works...
The key method in this recipe is TFU5NQ
. This method is available in all the tables, and it
makes the current table instance behave as a temporary table in the current scope. Basically,
it creates an *O.FNPSZ temporary table that has the same schema as the original table.
In this recipe, we create a new class and place all the code in its NBJO
 method. The reason
why we create a class, not a job, is that the NBJO
 method can be set to run on the server
tier by specifying the server modifier. This will improve the code's performance.
In the code, we first call the TFU5NQ
 method on the WFOE5BCMF table to make it
temporary in the scope of this method. This means that any data manipulations will be lost
once the execution of this method is over and the actual table content will not be affected.
Next, we insert a couple of test records. Here, we use the EP*OTFSU
 method to bypass
any additional logic, which normally resides in the table's JOTFSU
 method. We have to
keep in mind that even the table becomes temporary; all the code in its JOTFSU
,
VQEBUF
, EFMFUF
, JOJU7BMVF
, and other methods is still present and we have to
make sure that we don't call it unintentionally.
The last thing to do is to check for newly created records by listing the WFOE5BCMF table. We
can see that although the table contains many actual records, only the records that we
inserted were displayed in the Infolog window. Additionally, the two records we inserted
do not appear in the actual table.
Copying a record
Copying existing data is one of the data manipulation tasks in Dynamics 365 for Finance
and Operations. There are numerous places in the standard D365 application where users
can create new data entries just by copying existing data and then modifying it. A few of the
examples are the Copy button in Cost management | Inventory accounting | Costing
versions and the Copy project button in Project management and accounting | Projects |
All projects. Also, although the mentioned copying functionality might not be that
straightforward, the idea is clear: the existing data is reused while creating new entries.
In this recipe, we will learn two ways to copy records in X++. We will discuss the usage of
the table's EBUB
 method, the HMPCBMCVGCVG
 function, and their differences. As an
example, we will copy one of the existing ledger account records into a new record.

Processing Data
[ 35 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Navigate to General ledger | Chart of accounts | Accounts | Main accounts and
1.
find the account to be copied. In this example, we will use 130100, as shown in
the following screenshot:

Processing Data
[ 36 ]
Create a Dynamics 365 for Operations Project, create a runnable class named
2.
.BJO"DDPVOU$PQZ with the following code snippet, and run it:
DMBTT.BJO"DDPVOU$PQZ
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
.BJO"DDPVOUNBJO"DDPVOU
.BJO"DDPVOUNBJO"DDPVOU
NBJO"DDPVOU.BJO"DDPVOUGJOE#Z.BJO"DDPVOU*E
		
UUT#FHJO
NBJO"DDPVOUEBUB
NBJO"DDPVOU
NBJO"DDPVOU.BJO"DDPVOU*E		
NBJO"DDPVOU/BNF	DPQZ	
JG
NBJO"DDPVOUWBMJEBUF8SJUF

\
UISPX&YDFQUJPO&SSPS
^
NBJO"DDPVOUJOTFSU

UUT$PNNJU
^
^

Processing Data
[ 37 ]
Navigate to General ledger | Chart of accounts | Accounts | Main accounts
3.
again and notice that there are two identical records now, as shown in the
following screenshot:
How it works...
In this recipe, we have two variables: NBJO"DDPVOU for the original record and
NBJO"DDPVOU for the new record. First, we find the original record by calling
GJOE.BJO"DDPVOU*E
 in the .BJO"DDPVOU table.
Next, we copy it to the new one. Here, we use the EBUB
 table's NFNCFS method, which
copies all the data fields from one variable to another.

Processing Data
[ 38 ]
After that, we set a new ledger account number, which is a part of a unique table index.
Finally, we call JOTFSU
 on the table if WBMJEBUF8SJUF
 is successful. In this way, we
create a new ledger account record, which is exactly the same as the existing one apart from
the account number.
There's more...
As we saw before, the EBUB
 method copies all the table fields, including system fields
such as the record ID, company account, and created user. Most of the time, it is OK
because when the new record is saved, the system fields are overwritten with the new
values. However, this function may not work for copying records across the companies. In
this case, we can use another function called CVG#VG
. This function is a global function
and is located in the (MPCBM class, which you can find by navigating to AOT | Classes. The
CVG#VG
 function is very similar to the table's EBUB
 method with one major difference.
The CVG#VG
 function copies all the data fields excluding the system fields. The code in
the function is as follows:
TUBUJDWPJECVG#VG
$PNNPO@GSPN
$PNNPO@UP
5BCMF4DPQF@TDPQF5BCMF4DPQF$VSSFOU5BCMF0OMZ
\
%JDU5BCMFEJDU5BCMFOFX%JDU5BCMF
@GSPN5BCMF*E
'JFME*EGJFME*EEJDU5BCMFGJFME/FYU
@TDPQF
XIJMF
GJFME*EJT4ZT*E
GJFME*E
\
@UP
GJFME*E@GSPN
GJFME*E
GJFME*EEJDU5BCMFGJFME/FYU
GJFME*E@TDPQF
^
^
We can clearly see that during the copying process, all the table fields are traversed, but the
system fields, such as 3FD*E or EBUB"SFB*E, are excluded. The JT4ZT*E
 helper function
is used for this purpose.

Processing Data
[ 39 ]
In order to use the CVG#VG
 function, the code of the .BJO"DDPVOU$PQZ job can be 
amended as follows:
DMBTT.BJO"DDPVOU$PQZ#VG#VG
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
.BJO"DDPVOUNBJO"DDPVOU
.BJO"DDPVOUNBJO"DDPVOU
NBJO"DDPVOU.BJO"DDPVOUGJOE#Z.BJO"DDPVOU*E
		
UUT#FHJO
CVG#VG
NBJO"DDPVOUNBJO"DDPVOU
NBJO"DDPVOU.BJO"DDPVOU*E		
NBJO"DDPVOU/BNF	DPQZ	
JG
NBJO"DDPVOUWBMJEBUF8SJUF

\
UISPX&YDFQUJPO&SSPS
^
NBJO"DDPVOUJOTFSU

UUT$PNNJU
^
^
Building a query object
Query objects in Dynamics 365 for Finance and Operations are used to build SQL
statements for reports, views, forms, and so on. They are normally created in the AOT using
the drag and drop functionality and by defining various properties. Query objects can also
be created from the code at runtime. This is normally done when AOT tools cannot handle
complex and/or dynamic queries.

Processing Data
[ 40 ]
In this recipe, we will create a query from the code to retrieve project records from the
Project management module. We will select only the projects of the type Time & material,
starting with 00005 in its number and containing at least one hour transaction. The project
list will be sorted by project name.
How to do it...
Carry out the following steps in order to complete this recipe:
Open the project area, create a runnable class named 1SPK5BCMF2VFSZ, and enter
1.
the following code snippet:
DMBTT1SPK5BCMF2VFSZ
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
2VFSZRVFSZ
2VFSZ#VJME%BUB4PVSDFRCET
2VFSZ#VJME%BUB4PVSDFRCET
2VFSZ#VJME3BOHFRCS
2VFSZ#VJME3BOHFRCS
2VFSZ3VORVFSZ3VO
1SPK5BCMFQSPK5BCMF
RVFSZOFX2VFSZ

RCETRVFSZBEE%BUB4PVSDF
UBCMF/VN
1SPK5BCMF
RCETBEE4PSU'JFME
GJFME/VN
1SPK5BCMF/BNF
4PSU0SEFS"TDFOEJOH
RCSRCETBEE3BOHF
GJFME/VN
1SPK5BCMF5ZQF
RCSWBMVF
RVFSZ7BMVF
1SPK5ZQF5JNF.BUFSJBM
RCSRCETBEE3BOHF
GJFME/VN
1SPK5BCMF1SPK*E
RCSWBMVF
4ZT2VFSZWBMVF-JLF
RVFSZ7BMVF
		
RCETRCETBEE%BUB4PVSDF
UBCMF/VN
1SPK&NQM5SBOT
RCETSFMBUJPOT
USVF
RCETKPJO.PEF
+PJO.PEF&YJTUT+PJO

Processing Data
[ 41 ]
RVFSZ3VOOFX2VFSZ3VO
RVFSZ
XIJMF
RVFSZ3VOOFYU

\
QSPK5BCMFRVFSZ3VOHFU
UBCMF/VN
1SPK5BCMF
JOGP
TUS'NU

QSPK5BCMF1SPK*E
QSPK5BCMF/BNF
QSPK5BCMF5ZQF
^
^
^
Run the class and you will get a screen similar to the following screenshot:
2.
How it works...
First, we create a new RVFSZ object. Next, we add a new 1SPK5BCMF data source to the
RVFSZ object by calling its BEE%BUB4PVSDF
 member method. The method returns a
reference to the 2VFSZ#VJME%BUB4PVSDF object-RCET. Here, we call the BEE4PSU'JFME

method to enable sorting by the project name.

Processing Data
[ 42 ]
The following two blocks of code create two ranges. The first block of code shows only the
projects of the UJNFNBUFSJBM type and the second one lists only the records where the
project number starts with . These two filters are automatically added together using
SQL's "/% operator. The 2VFSZ#VJME3BOHF objects are created by calling the BEE3BOHF

member method of the 2VFSZ#VJME%BUB4PVSDF object with the field ID number as the
argument. The range value is set by calling WBMVF
 on the 2VFSZ#VJME3BOHF object itself.
We use the RVFSZ7BMVF
function from the (MPCBM class and the WBMVF-JLF
 function
from the 4ZT2VFSZ class to prepare the values before applying them as a range. More
functions, such as RVFSZ/PU7BMVF
 and RVFSZ3BOHF
, can be found in the (MPCBM
application class by navigating to AOT | Classes. Note that these functions are actually
shortcuts to the 4ZT2VFSZ application class, which in turn has even more interesting helper
methods that might be handy for every developer.
Adding another data source to an existing one connects both the data sources using SQL's
+0*/ operator. In this example, we are displaying projects that have at least one posted
hour line. We start by adding the 1SPK&NQM5SBOT table as another data source.
Next, we need to add relationships between the tables. If relationships are not defined on
tables, we will have to use the BEE-JOL
 method with relation field's ID numbers. In this
example, relations in the tables are already defined, so you only need to enable them by
calling the SFMBUJPOT
 method with USVF as an argument.
Calling KPJO.PEF
 with +PJO.PEF&YJTUT+PJO as a parameter ensures that only the
projects that have at least one hour transaction will be selected. In situations like this, where
we do not need any data from the second data source, performance-wise it is better to use
an FYJTUT join instead of the JOOFS join. This is because the JOOFS join fetches the data
from the second data source and, therefore, takes longer to execute.
The last thing that needs to be done is to create and run the RVFSZ3VO object and show the
selected data on the screen.
There's more...
It is worth mentioning a couple of specific cases when working with query objects from the
code. One of them is how to use the 03 operator and the other one is how to address array
fields.

Processing Data
[ 43 ]
Using the OR operator
As you have already noted, regardless of how many ranges are added, all of them will be
added together using SQL's "/% operator. In most cases, this is fine, but sometimes complex
user requirements demand ranges to be added using SQL's 03 operator. There might be a
number of workarounds, such as using temporary tables or similar tools, but we can use the
Dynamics 365 for Operations feature that allows you to pass a part of a raw SQL string as a
range.
In this case, the range has to be formatted in a manner similar to a fully-qualified SQL
XIFSF clause, including field names, operators, and values. The expressions have to be
formatted properly before you use them in a query. Here are some of the rules:
The expression must be enclosed within single quotes
Inside, the whole expression has to be enclosed within parentheses
Each subexpression must also be enclosed within parentheses
String values have to be enclosed within double quotes
For enumerations, use their numeric values
For value formatting, use various Dynamics 365 for Operations functions, such as
RVFSZ7BMVF
 and EBUF4US9QQ
, or methods from the 4ZT2VFSZ class.
Let's replace the code snippet from the previous example with the following lines of code:
RCSWBMVF
4ZT2VFSZWBMVF-JLF
RVFSZ7BMVF
		
XJUIUIFOFXDPEF
RCSWBMVF
TUS'NU
	

MJLF]]
	
GJFME4US
1SPK5BCMF1SPK*ERVFSZWBMVF
		
GJFME4US
1SPK5BCMF4UBUVT1SPK4UBUVT*O1SPDFTT
Notice that by adding zero to the enumeration in the previous code, we can force the
TUS'NU
 function to use the numeric value of the enumeration. The TUS'NU
 output
should be similar to the following line:


1SPK*EMJLF]]
4UBUVT

Processing Data
[ 44 ]
Now if you run the code, besides all the projects starting with , the result will also
include all the active projects, as shown in the following screenshot:
See also
The Creating a custom filter recipe in $IBQUFS, Working with Data in Forms
The Using a form for building a lookup recipe in $IBQUFS, Building Lookups
Using a macro in a SQL statement
In a standard Dynamics 365 for Finance and Operations application, there are macros, such
as *OWFOU%JN+PJO and *OWFOU%JN4FMFDU, which are reused numerous times across the
application. These macros are actually full or partial X++ SQL queries that can be called with
various arguments. Such approaches save development time by allowing you to reuse
pieces of X++ SQL queries.
In this recipe, we will create a small macro, which holds a single XIFSF clause, to display
only the active vendor records. Then, we will create a class that uses the created macros to
display a vendor list.

Processing Data
[ 45 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Create a Dynamics 365 for Operations Project and create a new macro named
1.
7FOE5BCMF/PU#MPDLFE with the following code snippet:

#MPDLFE$VTU7FOEPS#MPDLFE/P
In the Dynamics 365 Project, create a new SVOOBCMF class called
2.
7FOE5BCMF.BDSP with the following code:
DMBTT7FOE5BCMF.BDSP
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
7FOE5BCMFWFOE5BCMF
XIJMFTFMFDUWFOE5BCMF
XIFSF7FOE5BCMF/PU#MPDLFE
WFOE5BCMF
\
JOGP
TUS'NU

WFOE5BCMF"DDPVOU/VN
WFOE5BCMFOBNF

^
^
^
Run the job and check the results, as shown in the following screenshot:
3.

Processing Data
[ 46 ]
How it works...
First, we define a macro that holds the XIFSF clause. Normally, the purpose of defining
SQL in a macro is to reuse it a number of times in various places. We use  as an
argument. More arguments can be used.
Next, we create a job with the TFMFDU statement. Here, we use the previously created macro
in the XIFSF clause and pass WFOE5BCMF as an argument.
The query works like any other query, but the advantage is that the code in the macro can
be reused elsewhere.
Remember that before we start using macros in SQL queries, we should be aware of the
following caveats:
Too much code in a macro might reduce the SQL statement's readability for other
developers
Cross-references do not take into account the code inside the macro
Changes in the macro will not reflect in the objects where the macro is used until
the objects are recompiled

Processing Data
[ 47 ]
Executing a direct SQL statement
Dynamics 365 for Finance and Operations allows developers to build X++ SQL statements
that are flexible enough to fit into any custom business process. However, in some cases, the
usage of X++ SQL is either not effective or not possible at all. One such case is when we run
data upgrade tasks during an application version upgrade. A standard application contains
a set of data upgrade tasks to be completed during the version upgrade. If the application is
highly customized, then most likely, standard tasks have to be modified in order to reflect
data dictionary customization's, or a new set of tasks have to be created to make sure data is
handled correctly during the upgrade.
Normally, at this stage, SQL statements are so complex that they can only be created using
database-specific SQL and executed directly in the database. Additionally, running direct
SQL statements dramatically increases data upgrade performance because most of the code
is executed on the database server where all the data resides. This is very important while
working with large volumes of data.
This recipe will demonstrate how to execute SQL statements directly. We will connect to the
current Dynamics 365 for Finance and Operations database directly using an additional
connection and retrieve a list of vendor accounts.
How to do it...
Carry out the following steps in order to complete this recipe:
In the Dynamics 365 Project, create a new class named 7FOE5BCMF4RM using the
1.
following code snippet:
DMBTT7FOE5BCMF4RM
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
6TFS$POOFDUJPOVTFS$POOFDUJPO
4UBUFNFOUTUBUFNFOU
TUSTRM4UBUFNFOU
4RM4ZTUFNTRM4ZTUFN
4RM4UBUFNFOU&YFDVUF1FSNJTTJPOTRM1FSNJTTJPO
3FTVMU4FUSFTVMU4FU
%JDU5BCMFUCM7FOE5BCMF

Processing Data
[ 48 ]
%JDU5BCMFUCM%JS1BSUZ5BCMF
%JDU'JFMEGME1BSUZ
%JDU'JFMEGME"DDPVOU/VN
%JDU'JFMEGME%BUB"SFB*E
%JDU'JFMEGME#MPDLFE
%JDU'JFMEGME3FD*E
%JDU'JFMEGME/BNF
UCM7FOE5BCMFOFX%JDU5BCMF
UBCMF/VN
7FOE5BCMF
UCM%JS1BSUZ5BCMFOFX%JDU5BCMF
UBCMF/VN
%JS1BSUZ5BCMF
GME1BSUZOFX%JDU'JFME
UBCMF/VN
7FOE5BCMF
GJFME/VN
7FOE5BCMF1BSUZ
GME"DDPVOU/VNOFX%JDU'JFME
UBCMF/VN
7FOE5BCMF
GJFME/VN
7FOE5BCMF"DDPVOU/VN
GME%BUB"SFB*EOFX%JDU'JFME
UBCMF/VN
7FOE5BCMF
GJFME/VN
7FOE5BCMF%BUB"SFB*E
GME#MPDLFEOFX%JDU'JFME
UBCMF/VN
7FOE5BCMF
GJFME/VN
7FOE5BCMF#MPDLFE
GME3FD*EOFX%JDU'JFME
UBCMF/VN
%JS1BSUZ5BCMF
GJFME/VN
%JS1BSUZ5BCMF3FD*E
GME/BNFOFX%JDU'JFME
UBCMF/VN
%JS1BSUZ5BCMF
GJFME/VN
%JS1BSUZ5BCMF/BNF
TRM4ZTUFNOFX4RM4ZTUFN

TRM4UBUFNFOU	4&-&$5'30.	
	+0*/0/	
	8)&3&"/%	
TRM4UBUFNFOUTUS'NU
TRM4UBUFNFOU
GME"DDPVOU/VNOBNF
%C#BDLFOE4RM
GME/BNFOBNF
%C#BDLFOE4RM
UCM7FOE5BCMFOBNF
%C#BDLFOE4RM
UCM%JS1BSUZ5BCMFOBNF
%C#BDLFOE4RM
GME1BSUZOBNF
%C#BDLFOE4RM
GME3FD*EOBNF
%C#BDLFOE4RM

Processing Data
[ 49 ]
GME%BUB"SFB*EOBNF
%C#BDLFOE4RM
GME#MPDLFEOBNF
%C#BDLFOE4RM
TRM4ZTUFNTRM-JUFSBM
DVSFYU
USVF
TRM4ZTUFNTRM-JUFSBM
$VTU7FOEPS#MPDLFE/PUSVF
VTFS$POOFDUJPOOFX6TFS$POOFDUJPO

TUBUFNFOUVTFS$POOFDUJPODSFBUF4UBUFNFOU

TRM1FSNJTTJPOOFX4RM4UBUFNFOU&YFDVUF1FSNJTTJPO
TRM4UBUFNFOU
TRM1FSNJTTJPOBTTFSU

SFTVMU4FUTUBUFNFOUFYFDVUF2VFSZ
TRM4UBUFNFOU
$PEF"DDFTT1FSNJTTJPOSFWFSU"TTFSU

XIJMF
SFTVMU4FUOFYU

\
JOGP
TUS'NU

SFTVMU4FUHFU4USJOH

SFTVMU4FUHFU4USJOH

^
^
^
Run the class to retrieve a list of vendors directly from the database, as shown in
2.
the following screenshot:

Processing Data
[ 50 ]
How it works...
We start the code by creating the %JDU5BCMF and %JDU'JFME objects to handle the vendor
table and its fields, which are used later in the query. The %JS1BSUZ5BCMF is used to get
additional vendor information.
A new 4RM4ZTUFN object is also created. It is used to convert D365 types to SQL types.
Next, we set up a SQL statement with a number of placeholders for the table or field names
and field values to be inserted later.
The main query creation takes place next, when the query placeholders are replaced with
the right values. Here, we use the previously created %JDU5BCMF and %JDU'JFME type
objects by calling their OBNF
 methods with the %C#BDLFOE4RM enumeration as an
argument. This ensures that we pass the name in the exact manner it is used in the
database-some of the SQL field names are not necessary, which is the same as field names
within the application.
We also use the TRM-JUFSBM
 method of the previously created TRM4ZTUFN object to
properly format SQL values in order to ensure that they do not have any unsafe characters.
The value of the TRM4UBUFNFOU variable that holds the prepared SQL query depending on
your environment is as follows:
4&-&$5"$$06/5/6./".&'30.7&/%5"#-&
+0*/%*31"35:5"#-&0/7&/%5"#-&1"35:%*31"35:5"#-&3&$*%
8)&3&%"5""3&"*%	VTNG	"/%#-0$,&%
Once the SQL statement is ready, we initialize a direct connection to the database and run
the statement. The results are returned in the SFTVMU4FU object, and we get them by using
the XIJMF statement and calling the OFYU
 method until the end.
Note that we created an TRM1FSNJTTJPO object of the type
4RM4UBUFNFOU&YFDVUF1FSNJTTJPO here and called its BTTFSU
 method before
executing the statement. This is required in order to comply with Dynamics 365 for
Operation's trustworthy computing requirements.
Another thing that needs to be mentioned is that when building direct SQL queries, special
attention has to be paid to license, configuration, and security keys. Some tables or fields
might be disabled in the application and may contain no data in the database.
The code in this recipe can be also used to connect to external ODBC databases. We only
need to replace the 6TFS$POOFDUJPO class with the 0ECD$POOFDUJPO class and use text
names instead of the %JDU5BCMF and %JDU'JFME objects.

Processing Data
[ 51 ]
There's more...
The standard Dynamics 365 for Finance and Operations application provides an alternate
way of building direct SQL statements by using a set of 42-#VJMEFS classes. By using these
classes, we can create SQL statements as objects, as opposed to text. Next, we will
demonstrate how to use a set of 42-#VJMEFS classes. We will create the same SQL
statement as we did before.
First, in a Dynamics 365 project, create another class named 7FOE5BCMF4RM#VJMEFS using
the following code snippet:
DMBTT7FOE5BCMF4RM#VJMEFS
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
6TFS$POOFDUJPOVTFS$POOFDUJPO
4UBUFNFOUTUBUFNFOU
TUSTRM4UBUFNFOU
4RM4UBUFNFOU&YFDVUF1FSNJTTJPOTRM1FSNJTTJPO
3FTVMU4FUSFTVMU4FU
42-#VJMEFS4FMFDU&YQSFTTJPOTFMFDU&YQS
42-#VJMEFS5BCMF&OUSZWFOE5BCMF
42-#VJMEFS5BCMF&OUSZEJS1BSUZ5BCMF
42-#VJMEFS'JFME&OUSZBDDPVOU/VN
42-#VJMEFS'JFME&OUSZEBUB"SFB*E
42-#VJMEFS'JFME&OUSZCMPDLFE
42-#VJMEFS'JFME&OUSZOBNF
TFMFDU&YQS42-#VJMEFS4FMFDU&YQSFTTJPODPOTUSVDU

TFMFDU&YQSQBSN6TF+PJO
USVF
WFOE5BCMFTFMFDU&YQSBEE5BCMF*E
UBCMFOVN
7FOE5BCMF
EJS1BSUZ5BCMFWFOE5BCMFBEE+PJO5BCMF*E
UBCMFOVN
%JS1BSUZ5BCMF
BDDPVOU/VNWFOE5BCMFBEE'JFME*E
GJFMEOVN
7FOE5BCMF"DDPVOU/VN
OBNFEJS1BSUZ5BCMFBEE'JFME*E
GJFMEOVN
%JS1BSUZ5BCMF/BNF

Processing Data
[ 52 ]
EBUB"SFB*EWFOE5BCMFBEE'JFME*E
GJFMEOVN
7FOE5BCMF%BUB"SFB*E
CMPDLFEWFOE5BCMFBEE'JFME*E
GJFMEOVN
7FOE5BCMF#MPDLFE
WFOE5BCMFBEE3BOHF
EBUB"SFB*EDVSFYU

WFOE5BCMFBEE3BOHF
CMPDLFE$VTU7FOEPS#MPDLFE/P
TFMFDU&YQSBEE4FMFDU'JFME&OUSZ
42-#VJMEFS4FMFDU'JFME&OUSZOFX&YQSFTTJPO
BDDPVOU/VN
	"DDPVOU/VN	
TFMFDU&YQSBEE4FMFDU'JFME&OUSZ
42-#VJMEFS4FMFDU'JFME&OUSZOFX&YQSFTTJPO
OBNF	/BNF	
TRM4UBUFNFOUTFMFDU&YQSHFU&YQSFTTJPO
OVMM
VTFS$POOFDUJPOOFX6TFS$POOFDUJPO

TUBUFNFOUVTFS$POOFDUJPODSFBUF4UBUFNFOU

TRM1FSNJTTJPOOFX4RM4UBUFNFOU&YFDVUF1FSNJTTJPO
TRM4UBUFNFOU
TRM1FSNJTTJPOBTTFSU

SFTVMU4FUTUBUFNFOUFYFDVUF2VFSZ
TRM4UBUFNFOU
$PEF"DDFTT1FSNJTTJPOSFWFSU"TTFSU

XIJMF
SFTVMU4FUOFYU

\
JOGP
TUSGNU

SFTVMU4FUHFU4USJOH

SFTVMU4FUHFU4USJOH

^
^
^
In the preceding method, we first create a new TFMFDU&YQS object, which is based on the
42-#VJMEFS4FMFDU&YQSFTTJPO class. It represents the object of the SQL statement.

Processing Data
[ 53 ]
Next, we add the 7FOE5BCMF table to it by calling its member method BEE5BCMF*E
. This
method returns a reference to the WFOE5BCMF object of the type 42-#VJMEFS5BCMF&OUSZ,
which corresponds to a table node in a SQL query. We also add %JS1BSUZ5BCMF as a joined
table.
Then, we create a number of field objects of the 42-#VJMEFS'JFME&OUSZ type to be used
later and two ranges to show only this company account and only the active vendor
accounts.
We use BEE4FMFDU'JFME&OUSZ
 to add two fields to be selected. Here, we use the
previously created field objects.
The SQL statement is generated once the HFU&YQSFTTJPO
 method is called, and the rest 
of the code is the same as in the previous example.
Running the class will give us results, which are exactly similar to the ones we got earlier.
Enhancing the data consistency checks
It is highly recommended that you run the standard Dynamics 365 for Finance and
Operations data consistency checks from time to time, which can be found by navigating to
System administration | Periodic tasks | Database | Consistency check, to check the
system's data integrity. This function finds orphan data, validates parameters, and does
many other things, but it does not do everything. The good thing is that it can be easily
extended.
In this recipe, we will see how we can enhance the standard Dynamics 365 for Finance and
Operations consistency check to include more tables in its data integrity validation.
Getting ready
Before we start, we need to create an invalid setup in order to make sure that we can
simulate data inconsistency. Navigate to Fixed assets | Setup | Value models and create a
new model, for instance, 5&45, as shown in the following screenshot:

Processing Data
[ 54 ]
Navigate to Fixed assets | Setup | Fixed asset posting profiles and under the Ledger
accounts group, create a new record with the newly created value model for any of the
posting types, as shown here:
Go back to the Value models form and delete the previously created value model. Now, we
have a nonexistent value model in the fixed asset posting settings.

Processing Data
[ 55 ]
How to do it...
Carry out the following steps in order to complete this recipe:
In the Dynamics 365 Project, create a new class named
1.
"TTFU$POTJTUFODZ$IFDL with the following code snippet:
DMBTT"TTFU$POTJTUFODZ$IFDLFYUFOET4ZT$POTJTUFODZ$IFDL
\
DMJFOUTFSWFSTUBUJD$MBTT%FTDSJQUJPOEFTDSJQUJPO

\
SFUVSO'JYFEBTTFUT
^
DMJFOUTFSWFSTUBUJD)FMQ5YUIFMQ5FYU

\
SFUVSO$POTJTUFODZDIFDLPGUIFGJYFEBTTFUNPEVMF
^
QVCMJD*OUFHFSFYFDVUJPO0SEFS

\
SFUVSO
^
QVCMJDWPJESVO

\
UIJTLFSOFM$IFDL5BCMF
UBCMF/VN
"TTFU-FEHFS"DDPVOUT
^
^

Processing Data
[ 56 ]
Navigate to System administration | Periodic tasks | Database | Consistency
2.
check, select the newly created Fixed assets option from the Module drop-down
list, and click on OK to run the check, as shown here:

Processing Data
[ 57 ]
Now, the message displayed in the Infolog window should complain about the
3.
missing value model in the fixed assets posting settings, as shown in the
following screenshot:
How it works...
The consistency check in Dynamics 365 for Finance and Operations validates only the
predefined list of tables for each module. The system contains a number of classes derived
from 4ZT$POTJTUFODZ$IFDL. For example, the $VTU$POTJTUFODZ$IFDL class is
responsible for validating the Accounts receivable module, -FEHFS$POTJTUFODZ$IFDL for
validating General ledger, and so on.

Processing Data
[ 58 ]
In this recipe, we created a new class named "TTFU$POTJTUFODZ$IFDL, extending the
4ZT$POTJTUFODZ$IFDL class for the fixed asset module. The following methods were
created:
EFTDSJQUJPO
: This provides a name to the consistency check form.
IFMQ5FYU
: This displays some explanation about the check.
FYFDVUJPO0SEFS
: This determines where the check is located in the list.
SVO
: This holds the code to perform the actual checking. Here, we use the
LFSOFM$IFDL5BCMF
 member method, which validates the given table.
There's more...
The classes that we just mentioned can only be executed from the main Consistency check
form. Individual checks can also be invoked as standalone functions. We just need to create
an additional method to allow the running of the class:
TUBUJDWPJENBJO
"SHT@BSHT
\
4ZT$POTJTUFODZ$IFDL+PCDPOTJTUFODZ$IFDL+PC
"TTFU$POTJTUFODZ$IFDLBTTFU$POTJTUFODZ$IFDL
DPOTJTUFODZ$IFDL+PCOFX4ZT$POTJTUFODZ$IFDL+PC
DMBTT*E(FU
BTTFU$POTJTUFODZ$IFDL
JG
DPOTJTUFODZ$IFDL+PCQSPNQU

\
SFUVSO
^
DPOTJTUFODZ$IFDL+PCSVO

^
Using the date effectiveness feature
Date effectiveness allows developers to easily create date range fields. Date ranges are used
to define record validity between the specified dates, for example, defining employee
contract dates and defining vendor license validity.
This feature significantly reduces the amount of time that developers spend on developing
business logic/code and also provides a consistent approach to implement data range fields.

Processing Data
[ 59 ]
This recipe will demonstrate the basics of date effectiveness. We will create a new table to
implement date range validation.
How to do it...
Carry out the following steps in order to complete this recipe:
Run Visual Studio as admin:
Load your earlier project.
1.
Add a new TablePktEmployeeContract.
2.
Set the property as follows:
Property
Value
ValidTimeStateFieldType Date

Processing Data
[ 60 ]
Note the two new fields that are automatically added to the table, as shown in the
following screenshot (ValidTo and ValidFrom):

Processing Data
[ 61 ]
Now create a new index as follows and add fields as follows:
3.
Set the following mentioned property for the index here:
4.
Property
Value
AlternateKey
Yes
ValidTimeStateKey
Yes
ValidTimeStateMode NoGap

Processing Data
[ 62 ]
Now open the table and enter some records in this table itself instead of creating
5.
a new form for the table. Right-click on Table and select Browse table:
How it works...
We start the recipe by setting the 7BMJE5JNF4UBUF'JFME5ZQF property to %BUF in the
4ZT&NBJM5BCMF table. This automatically creates two new fields--7BMJE'SPN and 7BMJE5P
that are used to define a date range.
Next, we add the created fields to the primary index where the &NQM/VN field is used and
adjust the index's properties.
We set the "MUFSOBUF,FZ property to :FT in order to ensure that this index is a part of an
alternate key.
We set the 7BMJE5JNF4UBUF,FZ property to :FT in order to specify that the index is used
to determine valid date ranges.
We also set the 7BMJE5JNF4UBUF.PEF property to /P(BQ in order to ensure that email
templates with the same identification number can be created within continuous periods.
This property can also be set to (BQ, allowing noncontiguous date ranges.

2
Working with Forms
In this chapter, we will cover the following recipes:
Creating dialogs using the RunBase framework
Handling the dialog event
Creating dialogs using the SysOperation framework
Building a dynamic form
Adding a form splitter
Creating a modal form
Modifying multiple forms dynamically
Storing the last form values
Using a Tree control
Adding the View details link
Selecting a Form Pattern
Full list of form patterns
Creating a new form
Introduction
Forms in Dynamics 365 for Finance and Operations represent the user interface and are
mainly used to enter or modify data. They are also used to run reports, execute user
commands, validate data, and so on.

Working with Forms
[ 64 ]
Normally, forms are created using the AOT by producing a form object and adding form
controls, such as tabs, tab pages, grids, groups, data fields, and images. The form's behavior
is controlled by its properties or the code in its member methods. The behavior and layout
of form controls are also controlled by their properties and the code in their member
methods. Although it is very rare, forms can also be created dynamically from code.
In this chapter, we will cover various aspects of using Dynamics 365 for Finance and
Operations forms. We start by building Dynamics 365 for Finance and Operations dialogs,
which are actually dynamic forms, and then go on to explain how to handle their events.
The chapter will also show you how to build dynamic forms, how to add dynamic controls
to existing forms, and how to make modal forms.
Creating dialogs using the RunBase
framework
Dialogs are a way to present users with a simple input form. They are commonly used for
small user tasks, such as filling in report values, running batch jobs, and presenting only the
most important fields to the user when creating a new record. Dialogs are normally created
from X++ code without storing the actual layout in the AOT.
The application class called %JBMPH is used to build dialogs. Other application classes, such
as %JBMPH'JFME, %JBMPH(SPVQ, and %JBMPH5BC1BHF, are used to create dialog controls.
The easiest way to create dialogs is to use the 3VO#BTF framework. This is because the
framework provides a set of predefined methods, which make the creation and handling of
the dialog well-structured, as opposed to having all the code in a single place.
In this example, we will demonstrate how to build a dialog from code using the 3VO#BTF
framework class. The dialog will contain customer table fields shown in different groups
and tabs for creating a new record. There will be two tab pages, (FOFSBM and %FUBJMT. The
first page will have the $VTUPNFSBDDPVOU and /BNF input controls. The second page will
be divided into two groups, 4FUVQ and 1BZNFOU, with relevant fields inside each group.
The actual record will not be created, as it is beyond the scope of this example. However, for
demonstration purposes, the information specified by the user will be displayed in the
Infolog window.

Working with Forms
[ 65 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new project $SFBUFEJBMPH
1.
Add a new 3VOOBCMF class and rename it .Z%JBMPH. Now, add the following
2.
code snippet:
Declare all your objects in the class, as shown follows:
DMBTT.Z%JBMPHFYUFOET3VO#BTF
\
%JBMPH'JFMEGJFME"DDPVOU
%JBMPH'JFMEGJFME/BNF
%JBMPH'JFMEGJFME(SPVQ
%JBMPH'JFMEGJFME$VSSFODZ
%JBMPH'JFMEGJFME1BZN5FSN*E
%JBMPH'JFMEGJFME1BZN.PEF
$VTU/BNFDVTU/BNF
$VTU(SPVQ*EDVTU(SPVQ*E
$VSSFODZ$PEFDVSSFODZ$PEF
$VTU1BZN5FSN*EQBZN5FSN*E
$VTU1BZN.PEFQBZN.PEF
QVCMJDDPOUBJOFSQBDL

\
SFUVSODPO/VMM

^
QVCMJDCPPMFBOVOQBDL
DPOUBJOFS@QBDLFE$MBTT
\
SFUVSOUSVF
^
Create a dialog method to capture runtime user inputs for customer details:
0CKFDUEJBMPH

\
%JBMPHEJBMPH
%JBMPH(SPVQHSPVQ$VTUPNFS
%JBMPH(SPVQHSPVQ1BZNFOU
EJBMPHTVQFS

EJBMPHDBQUJPO
$VTUPNFSJOGPSNBUJPO
GJFME"DDPVOUEJBMPHBEE'JFME

Working with Forms
[ 66 ]

FYUFOEFE5ZQF4US
$VTU7FOE"$$VTUPNFSBDDPVOU
GJFME/BNFEJBMPHBEE'JFME
FYUFOEFE5ZQF4US
$VTU/BNF
EJBMPHBEE5BC1BHF
%FUBJMT
HSPVQ$VTUPNFSEJBMPHBEE(SPVQ
4FUVQ
GJFME(SPVQEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU(SPVQ*E
GJFME$VSSFODZEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VSSFODZ$PEF
HSPVQ1BZNFOUEJBMPHBEE(SPVQ
1BZNFOU
GJFME1BZN5FSN*EEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU1BZN5FSN*E
GJFME1BZN.PEFEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU1BZN.PEF
SFUVSOEJBMPH
^
Now, when users select their desired values, we need to read all of them to show
in the infolog. Use HFU'SPN%JBMPH to read a dialog field's value:
QVCMJDCPPMFBOHFU'SPN%JBMPH

\
DVTU"DDPVOUGJFME"DDPVOUWBMVF

DVTU/BNFGJFME/BNFWBMVF

DVTU(SPVQ*EGJFME(SPVQWBMVF

DVSSFODZ$PEFGJFME$VSSFODZWBMVF

QBZN5FSN*EGJFME1BZN5FSN*EWBMVF

QBZN.PEFGJFME1BZN.PEFWBMVF

SFUVSOTVQFS

^
Use the SVO method to make Infolog statements, as in the following code:
QVCMJDWPJESVO

\
JOGP
:PVIBWFFOUFSFEDVTUPNFSJOGPSNBUJPO
JOGP
TUS'NU
"DDPVOUDVTU"DDPVOU
JOGP
TUS'NU
/BNFDVTU/BNF
JOGP
TUS'NU
(SPVQDVTU(SPVQ*E
JOGP
TUS'NU
$VSSFODZDVSSFODZ$PEF
JOGP
TUS'NU
5FSNTPGQBZNFOUQBZN5FSN*E
JOGP
TUS'NU
.FUIPEPGQBZNFOUQBZN.PEF
^

Working with Forms
[ 67 ]
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
.Z%JBMPHNZ%JBMPHOFX.Z%JBMPH

JG
NZ%JBMPHQSPNQU

\
NZ%JBMPHSVO

^
^
^
In order to test the dialog, right-click on this class and set as startup project.
3.
Build your project. Now, run the project. The following form will appear in the
4.
internet browser:

Working with Forms
[ 68 ]
Click on the Details tab page; you will see a screen similar to the following
4.
screenshot:
Enter information in all the fields and click on OK. The results will be displayed
5.
on the Infolog tab on top of the browser window.

Working with Forms
[ 69 ]
How it works...
First, we create a new class named .Z%JBMPH. By extending it from 3VO#BTF, we utilize a
standard approach to develop data manipulation functions in Dynamics 365 for Operations
. The 3VO#BTF framework will define a common structure and automatically add additional
controls, such as the OK and Cancel buttons, to the dialog.
Then, we declare class member variables, which will be used later. The %JBMPH'JFME type
variables are actual user input fields. The rest of the variables are used to store the values
returned from the user input.
The QBDL
 and VOQBDL
 methods are normally used to convert an object into a container
and convert the container back into an object, respectively. A container is a common format
used to store objects in the user cache (4ZT-BTU7BMVF) or to transfer the object between the
server and client tiers. The 3VO#BTF framework needs these two methods to be
implemented in all its subclasses. In this example, we are not using any of the QBDL
 or
VOQBDL
 features, but because these methods are mandatory, we return an empty
container from QBDL
 and we return USVF from VOQBDL
.
The layout of the actual dialog is constructed in the EJBMPH
 member method. Here, we
define local variables for the dialog itself-tab pages and groups. These variables, as opposed
to the dialog fields, do not store any values for further processing. The TVQFS
 in the
method creates the initial dialog object for us and automatically adds the relevant controls,
including the OK and Cancel buttons.
Additional dialog controls are added to the dialog by using the BEE'JFME
, BEE(SPVQ
,
and BEE5BC1BHF
 methods. There are more methods, such as BEE5FYU
, BEE*NBHF
,
and BEE.FOV*UFN#VUUPO
, which are used to add different types of controls. All the
controls have to be added to the dialog object directly. Adding an input control to groups or
tabs is done by calling BEE'JFME
 right after BEE(SPVQ
 or BEE5BC1BHF
. In the
previous example, we added tab pages, groups, and fields in a top-down logical sequence.
Note that it is enough only to add a second tab page; the first tab page, labeled (FOFSBM, is
added automatically by the 3VO#BTF framework.

Working with Forms
[ 70 ]
Values from the dialog controls are assigned to the variables by calling the WBMVF

member method of %JBMPH'JFME. If a dialog is used within the 3VO#BTF framework, as it
is used in this example, the best place to assign dialog control values to variables is the
HFU'PSN%JBMPH
 member method. The 3VO#BTF framework calls this method right after
the user clicks on OK.
The main processing is done in the SVO
 method. For demonstration purposes, this class
only shows the user input in the Infolog tab on top of the browser window.
In order to make this class runnable, the NBJO
 static method has to be created. Here, we
create a new $VTU$SFBUF object and invoke the user dialog by calling the QSPNQU

method. Once the user has finished entering customer details by clicking on OK, we call the
SVO
 method to process the data.
Handling the dialog event
Sometimes, in the user interface, it is necessary to change the status of one field depending
on the status of another field. For example, if the user marks the Show filter checkbox, then
another field, Filter, appears or becomes enabled. In AOT forms, this can be done using the
NPEJGJFE
 input control event. However, if this feature is required on runtime dialogs,
handling events is not that straightforward.
Often, existing dialogs have to be modified in order to support events. The easiest way to
do this is, of course, to convert a dialog into an AOT form. However, when the existing
dialog is complex enough, a more cost-effective solution would probably be to implement
dialog event handling instead of converting into an AOT form. Event handling in dialogs is
not flexible, as in the case of AOT forms; but in most cases, it does the job.
In this recipe, we will create a dialog similar to the previous dialog, but instead of entering
the customer number, we will be able to select the number from a list. Once the customer is
selected, the rest of the fields will be filled in automatically by the system from the customer
record.

Working with Forms
[ 71 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new class named .Z%JBMPH4FMFDU with the following code snippet:
1.
DMBTT.Z%JBMPH4FMFDUFYUFOET3VO#BTF
\
%JBMPH'JFMEGJFME"DDPVOU
%JBMPH'JFMEGJFME/BNF
%JBMPH'JFMEGJFME(SPVQ
%JBMPH'JFMEGJFME$VSSFODZ
%JBMPH'JFMEGJFME1BZN5FSN*E
%JBMPH'JFMEGJFME1BZN.PEF
QVCMJDDPOUBJOFSQBDL

\
SFUVSODPO/VMM

^
QVCMJDCPPMFBOVOQBDL
DPOUBJOFS@QBDLFE$MBTT
\
SFUVSOUSVF
^
Create a dialog method to capture run time user inputs for customer details:
2.
0CKFDUEJBMPH

\
%JBMPHEJBMPH
%JBMPH(SPVQHSPVQ$VTUPNFS
%JBMPH(SPVQHSPVQ1BZNFOU
EJBMPHTVQFS

EJBMPHDBQUJPO
$VTUPNFSJOGPSNBUJPO
EJBMPHBMMPX6QEBUF0O4FMFDU$USM
USVF
GJFME"DDPVOUEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU"DDPVOU$VTUPNFSBDDPVOU
GJFME/BNFEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU/BNF
GJFME/BNFFOBCMFE
GBMTF
EJBMPHBEE5BC1BHF
%FUBJMT

Working with Forms
[ 72 ]
HSPVQ$VTUPNFSEJBMPHBEE(SPVQ
4FUVQ
GJFME(SPVQEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU(SPVQ*E
GJFME$VSSFODZEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VSSFODZ$PEF
GJFME(SPVQFOBCMFE
GBMTF
GJFME$VSSFODZFOBCMFE
GBMTF
HSPVQ1BZNFOUEJBMPHBEE(SPVQ
1BZNFOU
GJFME1BZN5FSN*EEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU1BZN5FSN*E
GJFME1BZN.PEFEJBMPHBEE'JFME

FYUFOEFE5ZQF4US
$VTU1BZN.PEF
GJFME1BZN5FSN*EFOBCMFE
GBMTF
GJFME1BZN.PEFFOBCMFE
GBMTF
SFUVSOEJBMPH
^
QVCMJDWPJEEJBMPH4FMFDU$USM

\
$VTU5BCMFDVTU5BCMF
DVTU5BCMF$VTU5BCMFGJOE
GJFME"DDPVOUWBMVF

GJFME/BNFWBMVF
DVTU5BCMFOBNF

GJFME(SPVQWBMVF
DVTU5BCMF$VTU(SPVQ
GJFME$VSSFODZWBMVF
DVTU5BCMF$VSSFODZ
GJFME1BZN5FSN*EWBMVF
DVTU5BCMF1BZN5FSN*E
GJFME1BZN.PEFWBMVF
DVTU5BCMF1BZN.PEF
^
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
.Z%JBMPH4FMFDUNZ%JBMPH4FMFDUOFX.Z%JBMPH4FMFDU

JG
NZ%JBMPH4FMFDUQSPNQU

\
NZ%JBMPH4FMFDUSVO

^
^
^

Working with Forms
[ 73 ]
Set this class as Set as Startup Object
3.

Working with Forms
[ 74 ]
Save all your changes and build your project. Now run the project. The following
4.
form will appear in an internet browser.
Run the project, select any customer from the list, and move the cursor to the next
5.
control. Notice how the rest of the fields were automatically populated with the
customer's information, as shown in the following screenshot:

Working with Forms
[ 75 ]
When you click on the Details tab page, you will see more information about the
ÅÇ¯
customer, as shown in the following screenshot:
How it works...
The new class named .Z%JBMPH4FMFDU is actually a copy of the .Z%JBMPH class from the
previous recipe, with a few changes. In its class declaration, we leave all the %JBMPH'JFME
declarations and remove the rest of the variables.

Working with Forms
[ 76 ]
The QBDL
 and VOQBDL
 methods remain the same, as we are not using any of their
features.
In the EJBMPH
 member method, we call the BMMPX6QEBUF0O4FMFDU$USM
 method with
the USVF argument to enable input control event handling. We also disable all the controls,
apart from Customer account, by calling FOBCMF
 with the GBMTF parameter for each
control.
The EJBMPH4FMFDU$USM
 member method of the 3VO#BTF class is called every time the
user modifies any input control in the dialog. It is the place where we have to add all the
required code to ensure that in our case, all the controls are populated with the correct data
from the customer record-once Customer account is selected.
The NBJO
 method ensures that the class is runnable.
See also
The Creating dialogs using the RunBase framework recipe
Creating dialogs using the SysOperation
framework
SysOperation is a framework in Dynamics 365 for Finance and Operations that allows
application logic to be written in a way that supports running operations interactively or via
the D365 batch server. The SysOperation framework follows the MVC (Model-View-
Controller) pattern. As the name implies, the MVC pattern isolates the Model, View, and
Controller components, which makes the process loosely coupled built over the
SysOperation framework. Depending on parameters, the controller can execute different
service operations under four main execution modes. Regardless of which mode a service is
running in, the code runs on a server. This makes the minimum number of round trips
between server and client.
Synchronous: When a service is run in synchronous mode, although it runs on a
server, it freezes the Dynamics 365 for Operations browser client. A call is
initiated from the client and an object is marshaled to the server to run in CIL.
This is good for smaller processes.

Working with Forms
[ 77 ]
Asynchronous: In an asynchronous call to service, the client remains responsive.
They only work using the WCF asynchronous service call mechanism. This is
why it is necessary to have it running as an AIF service. One should drop it to the
Dynamics 365 for Operations service group and redeploy the service group. This
is good for lengthy processes where durability is not important.
Reliable Asynchronous: Works like batch service. As soon as a call is initiated to
run a service in reliable asynchronous mode, it is scheduled to be run on the
batch server instantly, but removed as soon as it finishes the job. One can see it
among other scheduled jobs. Since it runs on a batch server, it can exploit the
power of parallel processing. It is used in scenarios where a job needs to be run
on a server and not to schedule. There is room for performance enhancement
making use of parallel processing among different AOS.
Scheduled Batch: A job is scheduled to run on a batch server. This is similar to
reliable asynchronous, except that it does not delete the job instance once the job
is finished. This is used for jobs that need to be run repeatedly at specified time
intervals. There is room for performance enhancements making use of parallel
processing among different AOS.
In this recipe, we will create a dialog which will take certain parameters. Based on the
parameters provided, customer's balance will be displayed onscreen by pressing the button
on the All Customers form to Display balances. It can be opened by navigating to Accounts
receivable | Customers | All Customers.
Getting ready
We will be using the following development artifacts for demonstration purposes.
Data contract: The data contract ($VTU#BMBODF%BUB$POUSBDU) is the model 
class in which we define which attributes we need for our operation, commonly
set as parameters by the user in a dialog. It's just a model class with an attribute,
in which we will use the %BUB$POUSBDU"UUSJCVUF attribute to decorate our
class declaration. For each member variable, we have to define one parm
methods using the attribute %BUB.FNCFS"UUSJCVUF, which will work like getter
setter method. Additionally, if we want some more methods to be available to us,
we can also extend the standard class 4ZT0QFSBUJPO%BUB$POUSBDU#BTF. With
this class, we can define how our basic dialog will look to the user. We can define
our labels, groups, sizes, and types of parameters.

Working with Forms
[ 78 ]
How to do it...
Carry out the following steps in order to complete this recipe:
In the VS project , create a new class called $VTU#BMBODF%BUB$POUSBDU with the
1.
following code snippet:
<
%BUB$POUSBDU"UUSJCVUF
4ZT0QFSBUJPO$POUSBDU1SPDFTTJOH"UUSJCVUF

DMBTT4US
$VTU#BMBODF6*#VJMEFS
4ZT0QFSBUJPO(SPVQ"UUSJCVUF

	%BUF	!"QQMJDBUJPO1MBUGPSN4JOHMF4QBDF		
>
DMBTT$VTU#BMBODF%BUB$POUSBDUJNQMFNFOUT4ZT0QFSBUJPO7BMJEBUBCMF
\
/P:FT*EBMMPX.PEJGZ%BUF
5SBOT%BUFUSBOT%BUF
TUSQBDLFE2VFSZ
TVNNBSZ 
(FUTPSTFUTUIFWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
%BUF5SBOTBDUJPO%BUF
TVNNBSZ 
QBSBNOBNF@USBOT%BUF 
5IFOFXWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
%BUF5SBOTBDUJPO%BUF
QBSBN 
SFUVSOT 
5IFDVSSFOUWBMVFPGEBUBDPOUSBDUQBSBNFUFS
%BUF5SBOTBDUJPO%BUF
SFUVSOT 
<%BUB.FNCFS"UUSJCVUF
	%BUF5SBOTBDUJPO%BUF	
4ZT0QFSBUJPO-BCFM"UUSJCVUF
MJUFSBM4US
!4:4
4ZT0QFSBUJPO(SPVQ.FNCFS"UUSJCVUF
	%BUF	
4ZT0QFSBUJPO%JTQMBZ0SEFS"UUSJCVUF
		>UPEBZ	TEBUF
QVCMJD5SBOT%BUFQBSN5SBOT%BUF

5SBOT%BUF@USBOT%BUFUSBOT%BUF
\
USBOT%BUF@USBOT%BUF
SFUVSOUSBOT%BUF
^
TVNNBSZ 
(FUTPSTFUTUIFWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
%BUF$POUSPM

Working with Forms
[ 79 ]
TVNNBSZ 
QBSBNOBNF@BMMPX.PEJGZ%BUF 
5IFOFXWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
%BUF$POUSPM
QBSBN 
SFUVSOT 
5IFDVSSFOUWBMVFPGEBUBDPOUSBDUQBSBNFUFS
%BUF$POUSPM
SFUVSOT 
<%BUB.FNCFS"UUSJCVUF
	%BUF$POUSPM	
4ZT0QFSBUJPO-BCFM"UUSJCVUF
&OBCMFEBUFDPOUSPM
4ZT0QFSBUJPO(SPVQ.FNCFS"UUSJCVUF
	%BUF	
4ZT0QFSBUJPO%JTQMBZ0SEFS"UUSJCVUF
		>
QVCMJD/P:FT*EQBSN"MMPX.PEJGZ%BUF

/P:FT*E@BMMPX.PEJGZ%BUFBMMPX.PEJGZ%BUF
\
BMMPX.PEJGZ%BUF@BMMPX.PEJGZ%BUF
SFUVSOBMMPX.PEJGZ%BUF
^
TVNNBSZ 
7BMJEBUFTUIFEJBMPHWBMVFTGPSFSSPST
TVNNBSZ 
SFUVSOT 
GBMTFJGBOFSSPSIBTPDDVSSFEJOUIFEJBMPHWBMVFT
PUIFSXJTFUSVF
SFUVSOT 
SFNBSLT 
5IFEJBMPHWBMVFTBSFIBOEMFEUISPVHIUIFDPOUSBDU
SFNBSLT 
QVCMJDCPPMFBOWBMJEBUF

\
CPPMFBOSFUUSVF
JG
USBOT%BUFBMMPX.PEJGZ%BUF
SFUDIFDL'BJMFE
	5SBOTBDUJPOEBUFDBOOPUCFFNQUZ	
SFUVSOSFU
^
<%BUB.FNCFS"UUSJCVUF
"JG2VFSZ5ZQF"UUSJCVUF

	@QBDLFE2VFSZ	RVFSZTUS
$VTU5BCMF434
>
QVCMJDTUSQBSN2VFSZ
TUS@QBDLFE2VFSZQBDLFE2VFSZ
\
QBDLFE2VFSZ@QBDLFE2VFSZ
SFUVSOQBDLFE2VFSZ

Working with Forms
[ 80 ]
^
QVCMJD2VFSZHFU2VFSZ

\
SFUVSOOFX
2VFSZ
4ZT0QFSBUJPO)FMQFSCBTF%FDPEF
QBDLFE2VFSZ
^
QVCMJDWPJETFU2VFSZ
2VFSZ@RVFSZ
\
QBDLFE2VFSZ
4ZT0QFSBUJPO)FMQFSCBTF&ODPEF
@RVFSZQBDL

^
^
Here, 4ZT0QFSBUJPO(SPVQ"UUSJCVUF specifies how we group the contract
parameters and provides the order in which to display the group. Data contract
also implements the 4ZT0QFSBUJPO7BMJEBUBCMF interface, due to which we
need to override the 7BMJEBUF
 method and validate parameters before actual
execution begins. Using 4ZT0QFSBUJPO$POUSBDU1SPDFTTJOH"UUSJCVUF we
specify the 6*CVJMEFS class to modify the parameter's behavior at runtime. We
will create this UI builder class later in this chapter.
In the VS project , create a new class called $VTU#BMBODF$POUSPMMFS with the
2.
following code snippet:
Controller: As the name implies, this class has great responsibility for initiating
the operation. This class holds all the information regarding execution mode; it
should show a progress form or dialog. It is best practice not to write the whole
business login in the $POUSPMMFS class itself. That's why, in this demo, we have
created one service class to write our business logic, and that service class
reference is provided in this controller class main method.
DMBTT$VTU#BMBODF$POUSPMMFSFYUFOET
4ZT0QFSBUJPO4FSWJDF$POUSPMMFS
\
TUSQBDLFE2VFSZ
$VTU#BMBODF%BUB$POUSBDUDPOUSBDU
TVNNBSZ 
4FUTUIFRVFSZSBOHFTCBTFEPODBMMFS
TVNNBSZ 
QBSBNOBNF@RVFSZ 
5IFIPMEUIFD 2VFSZD PCKFDUPGUIFTFSWJDF

Working with Forms
[ 81 ]
QBSBN 
QVCMJDWPJETFU3BOHFT

\
2VFSZ#VJME3BOHFRVFSZ#VJME3BOHF
2VFSZ#VJME%BUB4PVSDFRVFSZ#VJME%BUB4PVSDF
'PSN%BUB4PVSDFDVTU5BCMF%4
$VTU5BCMFDVTU5BCMF
TUSSBOHF
2VFSZ@RVFSZ
DPOUSBDUUIJTHFU%BUB$POUSBDU0CKFDU
BT
$VTU#BMBODF%BUB$POUSBDU
@RVFSZDPOUSBDUHFU2VFSZ

JG
UIJTQBSN"SHT

UIJTQBSN"SHT
DBMMFS

UIJTQBSN"SHT
EBUBTFU
UBCMF/VN
$VTU5BCMF
\
DVTU5BCMF%4'PSN%BUB6UJMHFU'PSN%BUB4PVSDF

UIJTQBSN"SHT
SFDPSE

JG
@RVFSZDVTU5BCMF%4
\
CVJMESBOHF
GPS
DVTU5BCMFDVTU5BCMF%4HFU'JSTU
USVF
DVTU5BCMF%4HFU'JSTU
USVFDVTU5BCMF%4DVSTPS

DVTU5BCMF
DVTU5BCMFDVTU5BCMF%4HFU/FYU

\
SBOHFSBOHF		DVTU5BCMF"DDPVOU/VN
SBOHF
		DVTU5BCMF"DDPVOU/VN
^
JG
SBOHF
\
RVFSZ#VJME%BUB4PVSDF
@RVFSZEBUB4PVSDF5BCMF
UBCMF/VN
$VTU5BCMF
DIFDLGPS2VFSZ#VJME%BUB4PVSDF
JG
RVFSZ#VJME%BUB4PVSDF
\
DMFBSUIFPMESBOHFBOEUIFOBEEJU
RVFSZ#VJME%BUB4PVSDFDMFBS3BOHFT

JG
RVFSZ#VJME3BOHF
\
RVFSZ#VJME3BOHF
RVFSZ#VJME%BUB4PVSDFBEE3BOHF

GJFME/VN
$VTU5BCMF"DDPVOU/VN

Working with Forms
[ 82 ]
^
RVFSZ#VJME3BOHFWBMVF
SBOHF
^
^
^
^
DPOUSBDUTFU2VFSZ
@RVFSZ
^
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
$VTU#BMBODF$POUSPMMFSDPOUSPMMFSOFX
$VTU#BMBODF$POUSPMMFS
DMBTT4US
$VTU#BMBODF4FSWJDF
NFUIPE4US
$VTU#BMBODF4FSWJDFQSPDFTT%BUB
4ZT0QFSBUJPO&YFDVUJPO.PEF4ZODISPOPVT
DPOUSPMMFSQBSN"SHT
@BSHT
DPOUSPMMFSTFU3BOHFT

DPOUSPMMFSTUBSU0QFSBUJPO

^
^
Here, we extend the 4ZT0QFSBUJPO4FSWJDF$POUSPMMFS class to inherit
controller capabilities. The main method is used to create an instance of the
controller class, where we specify the service class and service method which need
to be called to execute the business logic. The TFU3BOHFT
 method is called to
specify ranges based on the caller.
Service: As I mentioned earlier, it's not a good practice to keep the whole
business logic in one controller class, because it would be a big responsibility for
a single class to handle. That's why, here, we have created a 4FSWJDF class which
is referenced in the $POUSPMMFS class.
In the VS project , create a new class called $VTU#BMBODF$POUSPMMFS with the
3.
following code snippet:
DMBTT$VTU#BMBODF4FSWJDF
\
<4ZT&OUSZ1PJOU"UUSJCVUF>
QVCMJDWPJEQSPDFTT%BUB
$VTU#BMBODF%BUB$POUSBDU
@DVTU#BMBODF%BUB$POUSBDU
\
2VFSZ3VORVFSZ3VO
$VTU5BCMFDVTU5BCMF
"NPVOUCBMBODF

Working with Forms
[ 83 ]

DSFBUFBOFXRVFSZSVOPCKFDU
RVFSZ3VOOFXRVFSZ3VO

@DVTU#BMBODF%BUB$POUSBDUHFU2VFSZ

MPPQBMMSFTVMUTGSPNUIFRVFSZ
XIJMF
RVFSZ3VOOFYU

\
DVTU5BCMFRVFSZ3VOHFU
UBCMF/VN
DVTU5BCMF
JG
@DVTU#BMBODF%BUB$POUSBDUQBSN5SBOT%BUF

CBMBODFDVTU5BCMFCBMBODF.45

EBUF/VMM

@DVTU#BMBODF%BUB$POUSBDUQBSN5SBOT%BUF

FMTF
CBMBODFDVTU5BCMFCBMBODF.45

EJTQMBZUIFCBMBODF
JOGP
TUS'NU
DVTU5BCMF"DDPVOU/VNCBMBODF
^
^
^
Here, we get the contract parameters and execute the business logic. The customer
balance in the accounting currency is displayed as at a date if a certain date is
specified. Herein, we could also multithread our process.
UIBuider: This class is only required when you want to play with added
parameters (data member attributes) in the contract class. For example,
modifying lookup or enabling/disabling certain parameters on a dialog.
In the VS project , create a new class called $VTU#BMBODF6*#VJMEFS with the
4.
following code snippet:
DMBTT$VTU#BMBODF6*#VJMEFSFYUFOET
4ZT0QFSBUJPO"VUPNBUJD6*#VJMEFS
\
%JBMPH'JFMEEJBMPH'JFME"MMPX.PEJGZ%BUF
%JBMPH'JFMEEJBMPH'JFME5SBOT%BUF
$VTU#BMBODF%BUB$POUSBDUDVTU#BMBODF%BUB$POUSBDU
QVCMJDCPPMFBOBMMPX.PEJGZ%BUF.PEJGJFE
'PSN$IFDL#PY$POUSPM
@DIFDL#PY$POUSPM
\
TFUFOBCMFEPSEJTBCMFECBTFEPODIFDLCPY
EJBMPH'JFME5SBOT%BUFFOBCMFE

BOZFOVN
EJBMPH'JFME"MMPX.PEJGZ%BUFWBMVF


Working with Forms
[ 84 ]
PSBMUFSOBUJWFMZ

EJBMPH'JFME5SBOT%BUFFOBCMFE

@DIFDL#PY$POUSPMDIFDLFE

SFUVSOUSVF
^
QVCMJDWPJEQPTU#VJME

\

TVQFS

HFUEBUBDPOUSBDU
DVTU#BMBODF%BUB$POUSBDUUIJTEBUB$POUSBDU0CKFDU

HFUEJBMPHGJFMET
EJBMPH'JFME5SBOT%BUFUIJTCJOE*OGP
HFU%JBMPH'JFME

DVTU#BMBODF%BUB$POUSBDUNFUIPETUS

DVTU#BMBODF%BUB$POUSBDUQBSN5SBOT%BUF
EJBMPH'JFME"MMPX.PEJGZ%BUF
UIJTCJOE*OGP
HFU%JBMPH'JFME

DVTU#BMBODF%BUB$POUSBDUNFUIPETUS

DVTU#BMBODF%BUB$POUSBDUQBSN"MMPX.PEJGZ%BUF
SFHJTUFSPWFSSJEFNFUIPET
EJBMPH'JFME"MMPX.PEJGZ%BUFSFHJTUFS0WFSSJEF.FUIPE

NFUIPETUS
'PSN$IFDL#PY$POUSPMNPEJGJFE
NFUIPETUS
$VTU#BMBODF6*#VJMEFS
BMMPX.PEJGZ%BUF.PEJGJFEUIJT
EJBMPH'JFME5SBOT%BUFFOBCMFE

BOZFOVN
EJBMPH'JFME"MMPX.PEJGZ%BUFWBMVF

^
^
Here, we override the QPTU#VJME method and get the two dialog fields. Taking it
further, we register the BMMPX.PEJGZ%BUF.PEJGJFE
 on event modified of our
EJBMPH'JFME"MMPX.PEJGZ%BUF control.
Finally, we need to create an action menu item as an entry point to execute the
preceding code:

Working with Forms
[ 85 ]
In the VS project, create a new action menu item called
1.
$VTU#BMBODF$POUSPMMFS with the following properties:
Place the menu item at Accounts receivable | Customers | All Customers |
2.
Customer | Balance | Display balance, as shown in the following screenshot:

Working with Forms
[ 86 ]
Finally, our customer form will look as follows:
3.
The final output will look as follows:
4.

Working with Forms
[ 87 ]
Building a dynamic form
A standard approach to creating forms in Dynamics 365 for Finance and Operations is to
build and store GPSN objects in the AOT. It is possible to achieve a high level of complexity
using this approach. However, in a number of cases, it is necessary to have forms created
dynamically. In a standard Dynamics 365 for Finance and Operations application, we can
see that application objects, such as the Table browser form, various lookups, or dialogs,
are built dynamically. Even in Dynamics 365 for Finance and Operations, where we have a
browser-based interface, every form or dialog opens in a browser only.
In this recipe, we will create a dynamic form. In order to show how flexible the form can be,
we will replicate the layout of the existing Customer groups form located in the Accounts
receivable module. The Customers form can be opened by navigating to Accounts
receivable | Setup | Customers.
How to do it...
Carry out the following steps in order to complete this recipe:
In the AOT, create a new class called $VTU(SPVQ%ZOBNJD'PSN with the
1.
following code snippet.
We will run this class directly to get output. So, just for ease, we will write all
2.
code in the main method of this class:
DMBTT$VTU(SPVQ%ZOBNJD'PSN
\
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
0CKFDUEFDMBSBUJPOT
%JDU5BCMFEJDU5BCMF
'PSNGPSN
'PSN#VJME%FTJHOEFTJHO
'PSN#VJME%BUB4PVSDFET
'PSN#VJME"DUJPO1BOF$POUSPMBDUJPO1BOF
'PSN#VJME"DUJPO1BOF5BC$POUSPMBDUJPO1BOF5BC
'PSN#VJME#VUUPO(SPVQ$POUSPMCUOHSQ
'PSN#VJME#VUUPO(SPVQ$POUSPMCUOHSQ
'PSN#VJME$PNNBOE#VUUPO$POUSPMDNE/FX
'PSN#VJME$PNNBOE#VUUPO$POUSPMDNE%FM
'PSN#VJME.FOV#VUUPO$POUSPMNC1PTUJOH
'PSN#VJME'VODUJPO#VUUPO$POUSPMNJC1PTUJOH
'PSN#VJME'VODUJPO#VUUPO$POUSPMNJC'PSFDBTU
'PSN#VJME(SJE$POUSPMHSJE

Working with Forms
[ 88 ]
'PSN#VJME(SPVQ$POUSPMHSQ#PEZ
"SHTBSHT
'PSN3VOGPSN3VO
5BTL
EJDU5BCMFOFX%JDU5BCMF
UBCMF/VN
$VTU(SPVQ
6TF'PSNDMBTTUPDSFBUFBEZOBNJDTGPSNBOE
VTFJUTNFUIPEUPTFUEJGGFSFOUQSPQFSUJFT
GPSNOFX'PSN

GPSNOBNF
$VTU(SPVQ%ZOBNJD
"EEEBUBTPVSDFJO'PSN
ETGPSNBEE%BUB4PVSDF
EJDU5BCMFOBNF

ETUBCMF
EJDU5BCMFJE

4FU%FTJHOQSQFSUJFT
EFTJHOGPSNBEE%FTJHO
	%FTJHO	
EFTJHODBQUJPO
$VTUPNFSHSPVQT
EFTJHOTUZMF
'PSN4UZMF4JNQMF-JTU
EFTJHOUJUMF%BUBTPVSDF
ETJE

"EE"DUJPO1BOEFTJHODPOUSPMTBOETFUUIFJS
QSPQFSUJFT
BDUJPO1BOFEFTJHOBEE$POUSPM
'PSN$POUSPM5ZQF"DUJPO1BOF	"DUJPO1BOF	
BDUJPO1BOFTUZMF
"DUJPO1BOF4UZMF4USJQ
BDUJPO1BOF5BCBDUJPO1BOFBEE$POUSPM
'PSN$POUSPM5ZQF"DUJPO1BOF5BC	"DUJPO1BOF5BC	
CUOHSQBDUJPO1BOF5BCBEE$POUSPM
'PSN$POUSPM5ZQF#VUUPO(SPVQ	/FX%FMFUF(SPVQ	
CUOHSQBDUJPO1BOF5BCBEE$POUSPM
'PSN$POUSPM5ZQF#VUUPO(SPVQ	#VUUPO(SPVQ	
"EE$PNNBOE#VUUPOEFTJHODPOUSPMTBOETFUUIFJS
QSPQFSUJFT
DNE/FXCUOHSQBEE$POUSPM
'PSN$POUSPM5ZQF$PNNBOE#VUUPO	/FX#VUUPO	
DNE/FXQSJNBSZ
/P:FT:FT
DNE/FXDPNNBOE
UBTL/FX
"EE$PNNBOE#VUUPOEFTJHODPOUSPMTBOETFUUIFJS
QSPQFSUJFT
DNE%FMCUOHSQBEE$POUSPM
'PSN$POUSPM5ZQF$PNNBOE#VUUPO	%FMFUF#VUUPO	
DNE%FMUFYU
%FMFUF

Working with Forms
[ 89 ]
DNE%FMTBWF3FDPSE
/P:FT:FT
DNE%FMQSJNBSZ
/P:FT:FT
DNE%FMDPNNBOE
UBTL%FMFUF3FDPSE
"EE.FOV#VUUPOEFTJHODPOUSPMTBOETFUUIFJS
QSPQFSUJFT
NC1PTUJOHCUOHSQBEE$POUSPM
'PSN$POUSPM5ZQF.FOV#VUUPO	.FOV#VUUPO1PTUJOH	
NC1PTUJOHIFMQ5FYU
4FUVQSFMBUFEEBUBGPSUIFHSPVQ
NC1PTUJOHUFYU
4FUVQ
NJC1PTUJOHNC1PTUJOHBEE$POUSPM
'PSN$POUSPM5ZQF.FOV'VODUJPO#VUUPO	1PTUJOH	
NJC1PTUJOHUFYU
	*UFNQPTUJOH	
NJC1PTUJOHTBWF3FDPSE
/P:FT/P
NJC1PTUJOHEBUB4PVSDF
ETJE

NJC1PTUJOHNFOV*UFN/BNF

NFOVJUFN%JTQMBZ4US
*OWFOU1PTUJOH
NJC'PSFDBTUCUOHSQBEE$POUSPM
'PSN$POUSPM5ZQF.FOV'VODUJPO#VUUPO	4BMFT'PSFDBTU	
NJC'PSFDBTUUFYU
	'PSFDBTU	
NJC'PSFDBTUTBWF3FDPSE
/P:FT/P
NJC'PSFDBTUNFOV*UFN/BNF
NFOVJUFN%JTQMBZ4US
'PSFDBTU4BMFT(SPVQ
"EE(SJEEFTJHODPOUSPMTBOETFUUIFJS
QSPQFSUJFT
HSQ#PEZEFTJHOBEE$POUSPM
'PSN$POUSPM5ZQF(SPVQ
	#PEZ	
HSQ#PEZIFJHIU.PEF
'PSN)FJHIU$PMVNO)FJHIU
HSQ#PEZDPMVNOTQBDF

HSQ#PEZTUZMF
(SPVQ4UZMF#PSEFSMFTT(SJE$POUBJOFS
HSJEHSQ#PEZBEE$POUSPM
'PSN$POUSPM5ZQF(SJE(SJE
HSJEEBUB4PVSDF
ETOBNF

HSJETIPX3PX-BCFMT
GBMTF
HSJEXJEUI.PEF
'PSN8JEUI$PMVNO8JEUI
HSJEIFJHIU.PEF
'PSN)FJHIU$PMVNO)FJHIU
"EEGJFMETJO(SJEBOETFUUIFJSQSPQFSUJFT
HSJEBEE%BUB'JFME

ETJE
GJFME/VN
$VTU(SPVQ$VTU(SPVQ

Working with Forms
[ 90 ]
HSJEBEE%BUB'JFME
ETJE
GJFME/VN
$VTU(SPVQ/BNF
HSJEBEE%BUB'JFME
ETJE
GJFME/VN
$VTU(SPVQ1BZN5FSN*E
HSJEBEE%BUB'JFME
ETJE
GJFMEOVN
$VTU(SPVQ$MFBSJOH1FSJPE
HSJEBEE%BUB'JFME
ETJE
GJFME/VN
$VTU(SPVQ#BOL$VTU1BZN*E5BCMF
HSJEBEE%BUB'JFME
ETJE
GJFME/VN
$VTU(SPVQ5BY(SPVQ*E
BSHTOFX"SHT

BSHTPCKFDU
GPSN
GPSN3VODMBTT'BDUPSZGPSN3VO$MBTT
BSHT
GPSN3VOJOJU

GPSN3VOSVO

GPSN3VOEFUBDI

^
^
In order to test the form, run the $VTU(SPVQ%ZOBNJD class. Notice that the form
3.
is similar to the one located in Accounts receivable, which can be obtained by
navigating to Setup | Customers | Customer groups, as shown in the following
screenshot:

Working with Forms
[ 91 ]
How it works...
We start the code by declaring variables. Note that most of the variable types begin with
'PSN#VJME, which are a part of a set of application classes used to build dynamic forms.
Each of these types corresponds to the control types that are manually used when building
forms in the AOT.
Right after the variable declaration, we create a EJDU5BCMF object based on the $VTU(SPVQ
table. We will use this object several times later in the code. Then, we create a GPSN object
and set a name by calling the following lines of code:
GPSNOFX'PSN

GPSNOBNF
$VTU(SPVQ%ZOBNJD

Working with Forms
[ 92 ]
The name of the GPSN object is not important, as this is a dynamic form. The form should
have a data source, so we add one by calling the BEE%BUB4PVSDF
 method to the GPSN
object and by providing a previously created EJDU5BCMF object, as shown here:
ETGPSNBEE%BUB4PVSDF
EJDU5BCMFOBNF

ETUBCMF
EJDU5BCMFJE

Every form has a design, so we add a new design, define its style as a simple list, and set its
UJUMF data source, as shown in the following code snippet:
EFTJHOGPSNBEE%FTJHO
	%FTJHO	
EFTJHODBQUJPO
$VTUPNFSHSPVQT
EFTJHOTUZMF
'PSN4UZMF4JNQMF-JTU
EFTJHOUJUMF%BUBTPVSDF
ETJE

Once the design is ready, we can start adding controls from the code as if we were doing
this from the AOT. The first thing you need to do is to add a TUSJQ action pane with its
buttons:
BDUJPO1BOFEFTJHOBEE$POUSPM

'PSN$POUSPM5ZQF"DUJPO1BOF	"DUJPO1BOF	
BDUJPO1BOFTUZMF
"DUJPO1BOF4UZMF4USJQ
BDUJPO1BOF5BCBDUJPO1BOFBEE$POUSPM

'PSN$POUSPM5ZQF"DUJPO1BOF5BC	"DUJPO1BOF5BC	
CUOHSQBDUJPO1BOF5BCBEE$POUSPM
Right after the action pane, we add an automatically expanding grid that points to the
previously mentioned data source. Just to follow best practices, we place the grid inside a
(SPVQ control:
HSQ#PEZEFTJHOBEE$POUSPM
'PSN$POUSPM5ZQF(SPVQ	#PEZ	
HSQ#PEZIFJHIU.PEF
'PSN)FJHIU$PMVNO)FJHIU
HSQ#PEZDPMVNOTQBDF

HSQ#PEZTUZMF
(SPVQ4UZMF#PSEFSMFTT(SJE$POUBJOFS
HSJEHSQ#PEZBEE$POUSPM
'PSN$POUSPM5ZQF(SJE(SJE
HSJEEBUB4PVSDF
ETOBNF

HSJETIPX3PX-BCFMT
GBMTF
HSJEXJEUI.PEF
'PSN8JEUI$PMVNO8JEUI
HSJEIFJHIU.PEF
'PSN)FJHIU$PMVNO)FJHIU
Next, we add a number of grid controls that point to the relevant data source fields by
calling BEE%BUB'JFME
 on the HSJE object. The last thing is to initialize and run the form.
Here, we use the recommended approach to creating and running forms using the globally
available DMBTT'BDUPSZ object.

Working with Forms
[ 93 ]
Adding a form splitter
In Dynamics 365 for Finance and Operations, complex forms consist of one or more
sections. Each section may contain grids, groups, or any other element. In order to maintain
section sizes while resizing the form, the sections are normally separated by so-called
splitters. Splitters are not special Dynamics 365 for Finance and Operations controls; they
are (SPVQ controls with their properties modified so that they look like splitters. Most of the
multisection forms in Dynamics 365 for Finance and Operations already contain splitters.
In this recipe, in order to demonstrate the usage of splitters, we will modify one of the
existing forms that does not have a splitter. We will modify the Account reconciliation
form in the Cash and bank management module. You can open this module by navigating
to Cash and bank management | Setup | Bank group. From the following screenshot, you
can see that it is not possible to control the size of each grid individually and that they are
resized automatically using a fixed radio button when resizing the form:
In this recipe, we will demonstrate the usage of splitters by improving this situation. We
will add a form splitter between two grids in the mentioned form. This will allow users to
define the sizes of both grids in order to ensure that the data is displayed optimally.

Working with Forms
[ 94 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Add the #BOL(SPVQ form in the AOT and, in the form's design, add a new (SPVQ
1.
control right after the "DUJPO1BOF control with the following properties:
Property
Value
Name
Top
AutoDeclaration Yes
FrameType
None
Move the %FUBJMT)FBEFS and 5BC controls into the newly created group.
2.
Change the following properties of the existing %FUBJMT)FBEFS group:
3.
Property Value
Top
Auto
Height
Column height
Add a new (SPVQ control immediately below the 5PQ group with the following
4.
properties:
Property
Value
Name
Splitter
Style
SplitterVerticalContainer
AutoDeclaration Yes
Add the following line of code at the bottom of the form's class declaration:
5.
4ZT'PSN4QMJUUFS@:GPSN4QMJUUFS
Add the following line of code at the bottom of the form's JOJU
 method:
6.
GPSN4QMJUUFSOFX4ZT'PSN4QMJUUFS@:
4QMJUUFS5PQFMFNFOU

Working with Forms
[ 95 ]
Save all your code and build the solution.
7.
Now, in order to test the results, navigate to Cash and bank management |
8.
Setup | Bank groups. Note that, now, the form has a splitter in the middle, which
makes the form look better and allows you to resize both grids, as shown in the
following screenshot:
How it works...
Normally, a splitter has to be placed between two form groups. In this recipe, to follow this
rule, we need to adjust the BankGroup form's design. The %FUBJMT)FBEFS group and 5BC
controls are moved to a new group called 5PQ. We do not want this new group to be visible
to the user, so we set 'SBNF5ZQF to /POF. Setting "VUP%FDMBSBUJPO to :FT allows you to
access this object from the code. Finally, we make this group automatically expand in the
horizontal direction by setting its 8JEUI property to $PMVNOXJEUI. At this stage, the
visual form layout does not change, but now we have the upper group ready.
We change its 5PQ behavior to "VUP and make it fully expandable in the vertical direction.
The )FJHIU property of the grid inside this group also has to be changed to $PMVNO
IFJHIU in order to fill all the vertical space.

Working with Forms
[ 96 ]
In the middle of these two groups, we add a splitter. The splitter is nothing but another
group which looks like a splitter. We set its 4UZMF property to
4QMJUUFS7FSUJDBM$POUBJOFS, which makes this control look like a proper form splitter.
Finally, we have to declare and initialize the 4ZT'PSN4QMJUUFS@: application class, which
does the rest of the tasks.
In this way, horizontal splitters can be added to any form. Vertical splitters can also be
added to forms using a similar approach. For this, we need to use another application class
called 4ZT'PSN4QMJUUFS@9.
Creating a modal form
Often, people who are not familiar with computers and software tend to get lost among
open application windows. The same can be applied to Dynamics 365 for Finance and
Operations. Frequently, a user opens a form, clicks a button to open another one, and then
goes back to the first one without closing the second form. Sometimes this happens
intentionally, sometimes not, but the result is that the second form gets hidden behind the
first one and the user starts wondering why it is not possible to close or edit the first form.
Although it is not best practice, sometimes such issues can be easily solved by making the
child form a modal window. In other words, the second form always stays on top of the
first one until it is closed. In this recipe, we will make a modal window from the Create
sales order form.
How to do it...
Carry out the following steps in order to complete this recipe:
Add the 4BMFT$SFBUF0SEFS form in the project and set its %FTJHO property:
1.
Property
Value
WindowType Popup

Working with Forms
[ 97 ]
In order to test it, navigate to Sales and marketing | Common | Sales orders |
2.
All sales orders and start creating a new order. Notice that, now, the sales order
creation form always stays on top:

Working with Forms
[ 98 ]
How it works...
The form's design has a 8JOEPX5ZQF property, which is set to 4UBOEBSE by default. In
order to make a form behave as a modal window, we have to change it to 1PQVQ. Such
forms will always stay on top of the parent form.
There's more...
We already know that some of the Dynamics 365 for Finance and Operations forms are
created dynamically using the %JBMPH class. If we take a deeper look at the code, we will
find that the %JBMPH class actually creates a runtime form. This means that we can apply the
same principle--change the relevant form's EFTJHO property. The following lines of code
can be added to the %JBMPH object and will do the job:
EJBMPHEJBMPH'PSN
CVJME%FTJHO
XJOEPX5ZQF

'PSN8JOEPX5ZQF1PQVQ
Here, we get a reference to the form's design by first using the EJBMPH'PSN
 method of
the %JBMPH object to get a reference to the %JBMPH'PSN object, and then we call
CVJME%FTJHO
 on the latter object. Lastly, we set the EFTJHO property by calling its
XJOEPX5ZQF
 method with the 'PSN8JOEPX5ZQF1PQVQ argument.
See also
The Creating dialogs using the RunBase framework recipe
Modifying multiple forms dynamically
In the standard Dynamics 365 for Finance and Operations, there is a class called
4ZT4FUVQ'PSN3VO. The class is called during the run of every form in Dynamics 365 for
Operations; therefore, it can be used to override one of the common behaviors for all
Dynamics 365 for Finance and Operations forms. For example, different form background
colors can be set for different company accounts, some controls can be hidden or added
depending on specific circumstances, and so on.
In this recipe, we will modify the 4ZT4FUVQ'PSN3VO class to automatically add the About
Dynamics 365 for Operations button to every form in Dynamics 365 for Finance and
Operations.

Working with Forms
[ 99 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new project, name it .VMUJQMF'PSN, and change the model to Application
1.
Platform, as shown in the following screenshot:
Add the 'PSN3VO class and create a new method with the following code snippet:
2.
QSJWBUFWPJEBEE"CPVU#VUUPO

\
'PSN"DUJPO1BOF$POUSPMBDUJPO1BOF
'PSN"DUJPO1BOF5BC$POUSPMBDUJPO1BOF5BC
'PSN$PNNBOE#VUUPO$POUSPMDNE"CPVU
'PSN#VUUPO(SPVQ$POUSPMCUOHSQ
EFGJOFUBTL"CPVU

BDUJPO1BOFUIJTEFTJHO
DPOUSPM/VN

JG
BDUJPO1BOF]]

BDUJPO1BOFJT'PSN"DUJPO1BOF$POUSPM]]
BDUJPO1BOFTUZMF
"DUJPO1BOF4UZMF4USJQ
\
SFUVSO
^
BDUJPO1BOF5BCBDUJPO1BOFDPOUSPM/VN


Working with Forms
[ 100 ]
JG
BDUJPO1BOF5BC]]

BDUJPO1BOF5BCJT'PSN"DUJPO1BOF5BC$POUSPM
\
SFUVSO
^
CUOHSQBDUJPO1BOF5BCBEE$POUSPM

'PSN$POUSPM5ZQF#VUUPO(SPVQ	#VUUPO(SPVQ	
CUOHSQDBQUJPO
"CPVU
DNE"CPVUCUOHSQBEE$POUSPM

'PSN$POUSPM5ZQF$PNNBOE#VUUPO	"CPVU	
DNE"CPVUDPNNBOE
UBTL"CPVU
DNE"CPVUJNBHF-PDBUJPO

4ZT*NBHF-PDBUJPO&NCFEEFE3FTPVSDF
DNE"CPVUOPSNBM*NBHF
		
DNE"CPVUCJH
/P:FT:FT
DNE"CPVUTBWF3FDPSE
/P:FT/P
^
In the same class, override its SVO
 method with the following code snippet:
3.
QVCMJDWPJESVO

\
UIJTBEE"CPVU#VUUPO

TVQFS

^
In order to test the results, open any list page; for example, go to Accounts
4.
Receivable | Customers | All customers and you will notice a new button
named About Dynamics 365 for Operations in the Action pane, as shown in the
following screenshot:

Working with Forms
[ 101 ]
How it works...
The 4ZT4FUVQ'PSN3VO is the application class that is called by the system every time a user
runs a form. The best place to add our custom control is in its SVO
 method.
We use the UIJTEFTJHO
 method to get a reference to the form's design and then we
check whether the first control in the design is an action pane. We continue by adding a
new separate button group and the About Dynamics 365 for Operations command button.
Now, every form in Dynamics 365 for Finance and Operations with an action pane will
have one more button.
Storing the last form values
Dynamics 365 for Finance and Operations has a very useful feature that allows you to save
the latest user choices per user per form, report, or any other object. This feature is
implemented across a number of standard forms, reports, periodic jobs, and other objects
which require user input. When developing a new functionality for Dynamics 365 for
Finance and Operations, it is recommended that you keep it that way.

Working with Forms
[ 102 ]
In this recipe, we will demonstrate how to save the latest user selections. In order to make it
as simple as possible, we will use the existing filters on the Bank statement form, which can
be opened by navigating to Cash and bank management | Common | Bank accounts,
selecting any bank account, and then clicking on the Account reconciliation button in the
Action pane. This form contains one filter control called View, which allows you to display
bank statements based on their status. The default view of this form is Unreconciled. We
will see how to use the below code to save user selections for future purposes.
How to do it...
Carry out the following steps in order to complete this recipe:
In the AOT, find the #BOL"DDPVOU4UBUFNFOU form and add the following code
1.
snippet to the bottom of its class declaration:
"MM/PU3FDPODJMFETIPX"MM3FDPODJMFE
EFGJOF$VSSFOU7FSTJPO

MPDBMNBDSP$VSSFOU-JTU
TIPX"MM3FDPODJMFE
FOENBDSP
Add the following additional form methods:
2.
QVCMJDWPJEJOJU1BSN%FGBVMU

\
TIPX"MM3FDPODJMFE"MM/PU3FDPODJMFE/PU3FDPODJMFE
^
QVCMJDDPOUBJOFSQBDL

\
SFUVSO<$VSSFOU7FSTJPO$VSSFOU-JTU>
^
QVCMJDCPPMFBOVOQBDL
DPOUBJOFS@QBDLFE$MBTT
\
JOUWFSTJPO3VO#BTFHFU7FSTJPO
@QBDLFE$MBTT
TXJUDI
WFSTJPO
\
DBTF$VSSFOU7FSTJPO
<WFSTJPO$VSSFOU-JTU>@QBDLFE$MBTT
SFUVSOUSVF
EFGBVMU
SFUVSOGBMTF
^

Working with Forms
[ 103 ]
SFUVSOGBMTF
^
QVCMJD*EFOUJGJFS/BNFMBTU7BMVF%FTJHO/BNF

\
SFUVSOFMFNFOUBSHT
NFOV*UFN/BNF

^
QVCMJD*EFOUJGJFS/BNFMBTU7BMVF&MFNFOU/BNF

\
SFUVSOUIJTOBNF

^
QVCMJD6UJM&MFNFOU5ZQFMBTU7BMVF5ZQF

\
SFUVSO6UJM&MFNFOU5ZQF'PSN
^
QVCMJD6TFS*EMBTU7BMVF6TFS*E

\
SFUVSODVS6TFS*E

^
QVCMJD%BUB"SFB*EMBTU7BMVF%BUB"SFB*E

\
SFUVSODVSFYU

^
Override the form's SVO
 method and add the following lines of code right
3.
before its TVQFS
 method:
Y4ZT-BTU7BMVFHFU-BTU
UIJT
"MM3FDPODJMFETFMFDUJPO
TIPX"MM3FDPODJMFE
Override the form's DMPTF
 method and add the following lines of code at the
4.
bottom of this method:
TIPX"MM3FDPODJMFE"MM3FDPODJMFETFMFDUJPO

Y4ZT-BTU7BMVFTBWF-BTU
UIJT
Finally, delete the following line of code from the JOJU
 method of the
5.
#BOL"DDPVOU4UBUFNFOU data source:
BMM3FDPODJMFETFMFDUJPO


Working with Forms
[ 104 ]
Now, to test the form, navigate to Cash and bank management | Common |
6.
Bank accounts, select any bank account, click on Account reconciliation, change
the filter's value, close the form, and then open it again. The latest selection
should remain, as shown in the following screenshot:
How it works...
First, we define a variable that will store the value of the filter control. The $VSSFOU-JTU
macro is used to define a list of variables that we are going to save in the usage data.
Currently, we have our single variable inside it.
The $VSSFOU7FSTJPO macro defines a version of the saved values. In other words, it says
that the variables defined by the $VSSFOU-JTU macro, which will be stored in the system
usage data, can be addressed using the number .
Normally, when implementing the last value saved for the first time for a particular object,
$VSSFOU7FSTJPO is set to . Later on, if you decide to add new values or change the
existing ones, you have to change the value of $VSSFOU7FSTJPO, normally increasing it by
one. This ensures that the system addresses the correct list of variables in the usage.
The JOJU1BSN%FGBVMU
 method specifies the default values if nothing is found in the
usage data. Normally, this happens if we run a form for the first time, we change
$VSSFOU7FSTJPO, or we clear the usage data. This method is called automatically by the
Y4ZT-BTU7BMVF class.

Working with Forms
[ 105 ]
The QBDL
 and VOQBDL
 methods are responsible for formatting a storage container from
the variables and extracting variables from a storage container, respectively. In our case,
QBDL
 returns a container consisting of two values: version number and statement status.
These values will be sent to the system usage data storage after the form is closed. When the
form is opened, the Y4ZT-BTU7BMVF class uses VOQBDL
 to extract values from the stored
container. It checks whether the container version in the usage data matches the current
version number defined by $VSSFOU7FSTJPO, and only then the values are considered
correct and assigned to the form's variables.
The return values of MBTU7BMVF%FTJHO/BNF
, MBTU7BMVF&MFNFOU/BNF
,
MBTU7BMVF5ZQF
, MBTU7BMVF6TFS*E
, and MBTU7BMVF%BUB"SFB*E
 represent a
unique combination that is used to identify the stored usage data. This ensures that
different users can store the last values of different objects in different companies without
overriding each other's values.
The MBTU7BMVF%FTJHO/BNF
 method is meant to return the name of the object's current
design in cases where the object can have several designs. In this recipe, there is only one
design, so instead of leaving it empty, we used it for a slightly different purpose. The
method returns the name of the menu item used to open this form. In this case, separate
usage datasets will be stored for each menu item that opens the same form.
The last two pieces of code need to be added to the form's SVO
 and DMPTF
 methods. In
the SVO
 method, Y4ZT-BTU7BMVFHFU-BTU
UIJT retrieves the saved user values
from the usage data and assigns them to the form's variables.
Finally, the code in the DMPTF
 method is responsible for assigning user selections to the
variables and saving them to the usage data by calling
Y4ZT-BTU7BMVFTBWF-BTU
UIJT.
Using a tree control
Frequent users will notice that some of the Dynamics 365 for Finance and Operations forms
use tree controls instead of the commonly used grids. In some cases, this is extremely
useful, especially when there are parent-child relationships among records. It is a much
clearer way to show the whole hierarchy, as compared to a flat list. For example, product
categories are organized as a hierarchy and give a much better overview when displayed in
a tree layout.

Working with Forms
[ 106 ]
This recipe will discuss the principles of how to build tree-based forms. As an example, we
will use the Budget model form, which can be found by navigating to Budgeting | Setup |
Basic Budgeting | Budget models. This form contains a list of budget models and their
submodels and, although the data is organized using a parent-child structure, it is still
displayed as a grid. In this recipe, in order to demonstrate the usage of the 5SFF control, we
will replace the grid with a new 5SFF control.
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new project in your solution in Visual Studio. Add a new class called
1.
#VEHFU.PEFM5SFF with the following code snippet:
QVCMJDDMBTT#VEHFU.PEFM5SFF
\
'PSN5SFF$POUSPMUSFF
#VEHFU.PEFM*ENPEFM*E
^
QVCMJDWPJEOFX
'PSN5SFF$POUSPM@GPSN5SFF$POUSPM
#VEHFU.PEFM*E@CVEHFU.PEFM*E
\
USFF@GPSN5SFF$POUSPM
NPEFM*E@CVEHFU.PEFM*E
^
QVCMJDTUBUJD#VEHFU.PEFM5SFFDPOTUSVDU
'PSN5SFF$POUSPM@GPSN5SFF$POUSPM
#VEHFU.PEFM*E@CVEHFU.PEFM*E		
\
SFUVSOOFX#VEHFU.PEFM5SFF
@GPSN5SFF$POUSPM
@CVEHFU.PEFM*E
^
QSJWBUF5SFF*UFN*EYDSFBUF/PEF
5SFF*UFN*EY@QBSFOU*EY
#VEHFU.PEFM*E@NPEFM*E
3FD*E@SFD*E
\
5SFF*UFN*EYJUFN*EY
#VEHFU.PEFMNPEFM
#VEHFU.PEFMTVCNPEFM

Working with Forms
[ 107 ]
NPEFM#VEHFU.PEFMGJOE
)FBEJOH4VC)FBEJOH
@NPEFM*E
JUFN*EY4ZT'PSN5SFF$POUSPMBEE5SFF*UFN
USFF
@NPEFM*E		NPEFM5YU
@QBSFOU*EY
@SFD*E

USVF
JG
NPEFM*E@NPEFM*E
\
USFFTFMFDU
JUFN*EY
^
XIJMFTFMFDUTVCNPEFM
XIFSFTVCNPEFM.PEFM*E@NPEFM*E
TVCNPEFM5ZQF)FBEJOH4VC4VC.PEFM
\
UIJTDSFBUF/PEF
JUFN*EY
TVCNPEFM4VC.PEFM*E
TVCNPEFM3FD*E
^
SFUVSOJUFN*EY
^
QVCMJDWPJECVJME5SFF

\
#VEHFU.PEFMNPEFM
#VEHFU.PEFMTVCNPEFM
5SFF*UFN*EYJUFN*EY
USFFEFMFUF"MM

USFFMPDL

XIJMFTFMFDU3FD*E.PEFM*EGSPNNPEFM
XIFSFNPEFM5ZQF)FBEJOH4VC)FBEJOH
OPU&YJTUTKPJOTVCNPEFM
XIFSFTVCNPEFM4VC.PEFM*ENPEFM.PEFM*E
TVCNPEFM5ZQF)FBEJOH4VC4VC.PEFM
\
JUFN*EYUIJTDSFBUF/PEF
'PSN5SFF"EE3PPU
NPEFM.PEFM*E
NPEFM3FD*E
4ZT'PSN5SFF$POUSPMFYQBOE5SFF
USFFJUFN*EY
^
USFFVO-PDL
USVF
^

Working with Forms
[ 108 ]
In the AOT, open the #VEHFU.PEFM form's design, expand the #PEZ group, then
2.
expand the (SJE$POUBJOFS group and change the following property of the
#VEHFU.PEFM grid control:
Property Value
Visible
No
Create a new 5SFF control right below the #VEHFU.PEFM grid with these
3.
properties, as shown in the following table along with their values:
Property
Value
Name
Tree
Width
Column width
Height
Column height
Border
Single line
RowSelect
Yes
AutoDeclartion Yes
Add the following line of code to the bottom of the form's class declaration:
4.
#VEHFU.PEFM5SFFNPEFM5SFF
Add the following lines of code at the bottom of the form's JOJU
 method:
5.
NPEFM5SFF#VEHFU.PEFM5SFFDPOTUSVDU
5SFF
NPEFM5SFFCVJME5SFF

Override TFMFDUJPO$IBOHFE
 on the 5SFF control with the following code
6.
snippet:
QVCMJDWPJETFMFDUJPO$IBOHFE
'PSN5SFF*UFN@PME*UFN
'PSN5SFF*UFN@OFX*UFN
'PSN5SFF4FMFDU@IPX
\
#VEHFU.PEFMNPEFM
#VEHFU.PEFM*ENPEFM*E
TVQFS
@PME*UFN@OFX*UFN@IPX

Working with Forms
[ 109 ]
JG
@OFX*UFNEBUB

\
TFMFDUGJSTU0OMZNPEFM
XIFSFNPEFM3FD*E@OFX*UFNEBUB

JG
NPEFM5ZQF)FBEJOH4VC4VC.PEFM
\
NPEFM*ENPEFM4VC.PEFM*E
TFMFDUGJSTU0OMZNPEFM
XIFSFNPEFM.PEFM*ENPEFM*E
NPEFM5ZQF)FBEJOH4VC)FBEJOH
^
#VEHFU.PEFM@ETGJOE3FDPSE
NPEFM
#VEHFU.PEFM@ETSFGSFTI

^
^
Override the EFMFUF
 method on the #VEHFU.PEFM data source with the
7.
following code snippet:
QVCMJDWPJEEFMFUF

\
TVQFS

JG
#VEHFU.PEFM3FD*E
\
NPEFM5SFFCVJME5SFF

^
^
Add the following line of code at the bottom of the XSJUF
 method on the
8.
#VEHFU.PEFM data source:
NPEFM5SFFCVJME5SFF

Override the EFMFUF
 method on the 4VC.PEFM data source with the following
9.
code snippet:
QVCMJDWPJEEFMFUF

\
TVQFS

JG
4VC.PEFM3FD*E
\
NPEFM5SFFCVJME5SFF

^
^

Working with Forms
[ 110 ]
Override the XSJUF
 method on the 4VC.PEFM data source and add the
10.
following line of code at the bottom:
NPEFM5SFFCVJME5SFF

Save all your code and build your solution.
11.
In Visual Studio, the #VEHFU.PEFM design should look like the following
12.
screenshot:
To test the 5SFF control, navigate to Budgeting | Setup | Basic budgeting |
13.
Budget models. Notice how the budget models are presented as a hierarchy, as
shown here:

Working with Forms
[ 111 ]
How it works...
This recipe contains a lot of code, so we create a class to hold most of it. This allows you to
reuse the code and keep the form less cluttered.
The new class contains a few common methods, such as OFX
 and DPOTUSVDU
, for
initializing the class, and two methods which actually generate the tree.
The first method is DSFBUF/PEF
 and is used to create a single budget model node with
its children, if any. It is a recursive method, and it calls itself to generate the children of the
current node. It accepts a parent node and a budget model as arguments. In this method, we
create the node by calling the BEE5SFF*UFN
 method of the 4ZT'PSN5SFF$POUSPM class.
The rest of the code loops through all the submodels and creates subnodes (if there are any)
for each of them.
Second, we create CVJME5SFF
, where the whole tree is created. Before we actually start
building it, we delete all the existing nodes (if any) in the tree and then lock the 5SFF
control to make sure that the user cannot modify it while it's being built. Then, we add
nodes by looping through all the parent budget models and calling the previously
mentioned DSFBUF/PEF
. We call the FYQBOE5SFF
 method of the
4ZT'PSN5SFF$POUSPM class in order to display every parent budget model that was
initially expanded. Once the hierarchy is ready, we unlock the 5SFF control.

Working with Forms
[ 112 ]
Next, we modify the BudgetModel form by hiding the existing grid section and adding a
new USFF control. Tree nodes are always generated from the code and the previously
mentioned class will do exactly that. On the form, we declare and initialize the NPEFM5SFF
object and build the tree in the form's JOJU
 method.
In order to ensure that the currently selected tree node is displayed on the form on the
right-hand side, we override the USFF control's TFMFDUJPO$IBOHFE
 event, which is
triggered every time a tree node is selected. Here, we locate a corresponding record and
place a cursor on that record.
The rest of the code on the form is to ensure that the tree is rebuilt whenever the data is
modified.
See also
The Preloading images recipe in $IBQUFS, Working with Data in Forms
The Building a tree lookup recipe in $IBQUFS, Building Lookups
Adding the View details link
Dynamics 365 for Finance and Operations has a very useful feature that allows the user to
open the main record form with just a few mouse clicks on the current form. The feature is
called View details and is available in the right-click context menu on some controls. It is
based on table relationships and is available for those controls whose data fields have
foreign key relationships with other tables.
Because of the data structure's integrity, the View details feature works most of the time.
However, when it comes to complex table relations, it does not work correctly or does not
work at all. Another example of when this feature does not work automatically is when the
EJTQMBZ or FEJU methods are used on a form. In these and many other cases, the View
details feature has to be implemented manually.
In this recipe, to demonstrate how it works, we will modify the General journal form in the
General ledger module and add the View details feature to the %FTDSJQUJPO control,
allowing users to jump from the right-click context menu to the Journal names form.

Working with Forms
[ 113 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Add the -FEHFS+PVSOBM5BCMF form to your project, expand its data sources,
1.
and override KVNQ3FG
 of the /BNF field on the -FEHFS+PVSOBM5BCMF data
source with the following code snippet:
QVCMJDWPJEKVNQ3FG

\
-FEHFS+PVSOBM/BNFOBNF
"SHTBSHT
.FOV'VODUJPONG
OBNF-FEHFS+PVSOBM/BNFGJOE

-FEHFS+PVSOBM5BCMF+PVSOBM/BNF
JG
OBNF
\
SFUVSO
^
BSHTOFX"SHT

BSHTDBMMFS
FMFNFOU
BSHTSFDPSE
OBNF
NGOFX.FOV'VODUJPO

NFOVJUFN%JTQMBZ4US
-FEHFS+PVSOBM4FUVQ
.FOV*UFN5ZQF%JTQMBZ
NGSVO
BSHT
^
Save all your code and build your solution.
2.

Working with Forms
[ 114 ]
Navigate to General ledger | Journals Entries | General journal, select any of
3.
the existing records, and right-click on the Description column. Notice that the
View details option, which will open the Journal names form, is available now,
as shown here:
You may need to refresh your Dynamics 365 for Operations page to reflect your
changes in the frontend.
When you click on View details, the below form should open:
4.

Working with Forms
[ 115 ]
How it works...
Normally, the View details feature is controlled by the relationships between the
underlying tables. If there are no relationships or the form control is not bound to a table
field, then this option is not available. However, we can force this option to appear by
overriding the control's KVNQ3FG
 method.
In this method, we add code that opens the relevant form. This can be done by declaring,
instantiating, and running a 'PSN3VO object, but an easier way to do this is to simply run
the relevant menu item from the code. In this recipe, the code in KVNQ3FG
 does exactly
that.
In the code, first we check whether a valid journal name record is found. If so, we run the
-FEHFS+PVSOBM4FUVQ menu item with an "SHT object that holds the journal name record
and the current GPSN object information as a caller. The rest is done automatically by the
system, that is, the Journal names form is opened with the currently selected journal name.

Working with Forms
[ 116 ]
Selecting a form pattern
In the latest version of Dynamics 365 for Finance and Operations, form patterns are now an
integrated part of the form development experience. These patterns provide form structure
based on a particular style (including required and optional controls), and also provide
many default control properties. In addition to top-level form patterns, Dynamics 365 for
Operations has also introduced subpatterns which can be applied to container controls, and
that provide guidance and consistency for subcontent on a form, such as, on a Fast Tab.
Form patterns have made form development easier in Dynamics 365 for Finance and
Operations by providing a guided experience for applying patterns to forms to guarantee
that they are correct and consistent. Patterns help validate form and control structures, and
also the use of controls in some places. Patterns also help guarantee that each new form that
a user encounters is immediately recognizable in appearance and function. Form patterns
can provide many default control properties, and these also contribute to a more guided
development experience. Because patterns provide many default layout properties, they
help guarantee that forms have a responsive layout. Finally, patterns also help guarantee
better compatibility with upgrades.
Many of the existing form styles and templates from AX 2012 continue to be supported in
the current version Dynamics 365 for Finance and Operations. However, legacy form styles
and templates that aren't supported have a migration path to a Dynamics 365 for Finance
and Operations pattern. Because the foundational elements of Dynamics 365 for Finance
and Operations are built based on those legacy form styles and patterns, the transition from
AX 2012 to the current version of Dynamics 365 for Finance and Operations is as easy as
possible.
The selection of a form pattern is an important step in the process of migrating a form. A
pattern that is a good fit for the target form reduces the amount of migration work that is
required. Therefore, some investigation is required to select the best form pattern for the
form that you're migrating.
How to do it
Applying a pattern is a straightforward process that can modify properties on multiple
containers and controls on a form. Here is the standard flow for applying patterns:
Identify a target form and add it to your project. Then, in Visual Studio, open
1.
Application Explorer, and find the form. Right-click the form, and then select
Add to project. When you open the form in the designer, it should have the
Pattern: <unselected> designation on the design node.

Working with Forms
[ 117 ]
Decide which pattern to apply. You can refer to the exported details file in the last
2.
recipe.
Now we need to apply the pattern. Right-click the Design node of the target
3.
form, select Apply pattern, and then click the Pattern to apply.
As a last step, we may need to handle a few errors. Information about the pattern
4.
appears on the Pattern tab. To learn about the pattern structure, click control
names on the Pattern tab to navigate the pattern structure.
Double-click an error to go to the control that the error was reported for, if the
5.
control exists.
If the control already exists on the form but is in a different place, move the
6.
control to the correct place, as indicated by the pattern.
If the control doesn't exist, create the control.
7.
Full list of form patterns
In the current version of Dynamics 365 for Finance and Operations, there are a total of five
form patterns that we use the most:
Details Master
Form Part - Fact Boxes
Simple List
Table of Contents
Operational workspaces
For a full list of the forms that are currently using a particular form pattern, generate the
Form Patterns report from within Microsoft Visual Studio. On the Dynamics 365 menu,
expand the Add-ins option, and click Run form patterns report. A background process
generates the report. After several seconds, a message box appears in Visual Studio to
indicate that the report has been generated and inform you about the location of the Form
Patterns report file. You can filter this file by pattern to find forms that use a particular
pattern.

Working with Forms
[ 118 ]
How to do it...
We're going to look at how to run the form patterns report. This report is generated through
Visual Studio and gives us information about all of the forms in the system with the
corresponding form patterns:
Open VS as admin and go to the Dynamics 365 menu.
1.
Select Add ins | Run form patterns report:
2.
This will generate a CSV file that we can open in Excel.
3.

Working with Forms
[ 119 ]
Open the Excel file and you'll notice that, we have columns that tell us which
4.
model the form is in, the system name for the form, as well as the form style and
the form pattern:

Working with Forms
[ 120 ]
In this CSV file, we will also get details about the controls and the coverage
5.
percentage. Filter helps to determine which system form has which pattern
applied, and also which forms do not have any pattern applied. The following are
all form patterns in Dynamics 365 for Operations:
Apply your filter as per your requirements and see the results.

Working with Forms
[ 121 ]
Creating a new form
In Dynamics 365 for Finance and Operations, form creations are slightly easier than in
AX2012 and earlier versions. Here, we have more tools to create any specific form using
design templates. Every form plays an important role where we need to interact with the
user to view, insert, update, or delete any record(s).
In this recipe, we will create a simple form using a template and add this form to one of the
menus so that users can access it from the front end.
Getting ready
Let's think about a scenario where the admin needs to check all existing users in the system.
Although we have one standard form for this, we cannot give access to everyone because
this form also has many other options to perform on this form, while our requirement is to
just see read only data. We will use this form in further recipes to justify the name of this
form. Here, it will show all enabled and disabled users.
How to do it...
Add a new form in your project name it 1LU%JTBCMFE6TFST.
1.
Expand the %BUB4PVSDFT node and add the 6TFS*OGP table in it:
2.

Working with Forms
[ 122 ]
Set the following properties on Data source:
3.
Go to Design, right click on Apply Pattern, and select Simple List. This will
4.
create the respective pattern for you:
You have to add all those elements in design the section in the same order.
5.

Working with Forms
[ 123 ]
Add all the missing objects such as "DUJPO1BOF, (SPVQ, and a (SJE.
6.
Now, you have to select a pattern for CustomFilter group; select Custom and
7.
Quick Filters.
You will see another pattern available for this; add all missing objects to this
8.
group:
Your form design should look like this:
9.

Working with Forms
[ 124 ]
Now, let's add some fields in your grid to show actual data. Add fields from
10.
UserInfo Data source:
Give a caption to your design, such as %JTBCMFEVTFSTXJUIDPMPS. We will
11.
use this form in further recipes to justify its name:
Now, to add this form to the front end, create a %JTQMBZ.FOV*UFN for this
12.
form.

Working with Forms
[ 125 ]
Create an extension of 4ZTUFN"ENJOTUSBUJPO menu and add this new display
13.
menu item under Users, as in the following screenshot:
To test this form, save all your changes and build the solution. Now, go to
14.
System administrator| Users |Disabled users with color. Your form should look
like the following screenshot:

Working with Forms
[ 126 ]
How it works...
Creating a new form in Dynamics 365 for Finance and Operations is very systematic and
easy. All you need to do is identify the purpose of the form and choose a relevant pattern.
Once you apply a pattern to your form, it will show the required object details with a
sequence, as shown in step 4 in the above recipe. All you need to add now are the respective
objects in your design with the given sequence.

3
Working with Data in Forms
In this chapter, we will cover the following recipes:
Using a number sequence handler
Creating a custom filter control
Creating a custom instant search filter
Building a selected/available list
Creating a wizard
Processing multiple records
Coloring records
Adding an image to records
Introduction
This chapter basically supplements the previous one and explains data organization in
forms in the new Dynamics 365 for Finance and Operations. It shows how to add custom
filters to forms to allow users to filter data and create record lists for quick data
manipulation.
This chapter also discusses how the displaying of data can be enhanced by adding icons to
record lists and trees, and how normal images can be stored along with the data by reusing
the existing Dynamics 365 for Finance and Operations application objects.
A couple of recipes will show you how to create wizards in the new Dynamics 365 for
Finance and Operations to guide users through complex tasks. This chapter will also show
several approaches to capturing user-selected records on forms for further processing, and
ways to distinguish specific records by coloring them.

Working with Data in Forms
[ 128 ]
Using a number sequence handler
As already discussed in the Creating a new number sequence recipe in $IBQUFS, Processing
Data, number sequences are widely used throughout the system as a part of the standard
application. Dynamics 365 for Finance and Operations also provides a special number
sequence handler class to be used in forms. It is called /VNCFS4FR'PSN)BOEMFS and its
purpose is to simplify the usage of record numbering on the user interface. Some of the
standard Dynamics 365 for Finance and Operations forms, such as Customers or Vendors,
already have this feature implemented.
This recipe shows you how to use the number sequence handler class. Although in this
demonstration we will use an existing form, the same approach will be applied when
creating brand new forms.
For demonstration purposes, we will use the existing Customer groups form located in
Accounts receivable | Setup | Customers and change the Customer group field from
manual to automatic numbering. We will use the number sequence created earlier, in the
Creating a new number sequence recipe in $IBQUFS, Processing Data.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new project, 6TJOH/VNCFS4FRIBOEMFS, create a new extension class
1.
$VTU(SPVQ@&YUFOTJPO for the $VTU(SPVQ form, and add the following code
snippet to its class declaration:
QVCMJD/VNCFS4FR'PSN)BOEMFSOVNCFS4FR'PSN)BOEMFS
Also, create a new method called OVNCFS4FR'PSN)BOEMFS
 in the same class:
2.
QVCMJD/VNCFS4FR'PSN)BOEMFSOVNCFS4FR'PSN)BOEMFS

\
JG
OVNCFS4FR'PSN)BOEMFS
\
OVNCFS4FR'PSN)BOEMFS/VNCFS4FR'PSN)BOEMFSOFX'PSN
$VTU1BSBNFUFSTOVN3FG$VTU(SPVQ*E
/VNCFS4FRVFODF*E
UIJTUIJT$VTU(SPVQ@ETGJFME/VN
$VTU(SPVQ$VTU(SPVQ
^
SFUVSOOVNCFS4FR'PSN)BOEMFS
^

Working with Data in Forms
[ 129 ]
To override the $VTU(SPVQ data source's DSFBUF
 method, copy the
3.
0O$SFBUJOH and 0O$SFBUFE events from the data source and paste them in the
class $VTU(SPVQ@&YUFOTJPO with the following code snippet:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF$SFBUJOH>
QVCMJDWPJE$VTU(SPVQ@0O$SFBUJOH
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTOVNCFS4FR'PSN)BOEMFS
GPSN.FUIPE%BUB4PVSDF$SFBUF1SF

^
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF$SFBUFE>
QVCMJDWPJE$VTU(SPVQ@0O$SFBUFE
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTOVNCFS4FR'PSN)BOEMFS
GPSN.FUIPE%BUB4PVSDF$SFBUF

^
Then, to override its EFMFUF
 method, subscribe to the 0O%FMFUJOH event of
4.
the $VTU(SPVQ data source and paste it in the FYUFOTJPO class with the
following code snippet:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF%FMFUJOH>
QVCMJDWPJE$VTU(SPVQ@0O%FMFUJOH
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTOVNCFS4FR'PSN)BOEMFS
GPSN.FUIPE%BUB4PVSDF%FMFUF

^
Then, to override the data source's XSJUF
 method, subscribe to the 0O8SJUUFO
5.
event with the following code snippet:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF8SJUUFO>
QVCMJDWPJE$VTU(SPVQ@0O8SJUUFO
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTOVNCFS4FR'PSN)BOEMFS
GPSN.FUIPE%BUB4PVSDF8SJUF

^

Working with Data in Forms
[ 130 ]
Similarly, to override its WBMJEBUF8SJUF
 method, subscribe to the
6.
0O7BMJEBUFE8SJUF event of the $VTU(SPVQ data source with the following code
snippet:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF7BMJEBUFE8SJUF>
QVCMJDWPJE$VTU(SPVQ@0O7BMJEBUFE8SJUF
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
CPPMFBOSFUUSVF
SFU
UIJTOVNCFS4FR'PSN)BOEMFS
GPSN.FUIPE%BUB4PVSDF7BMJEBUF8SJUF

SFU
^
For the same data source, to override its MJOL"DUJWF
 method, subscribe to
7.
0O-JOL"DUJWF with the following code snippet:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
$VTU(SPVQ
$VTU(SPVQ'PSN%BUB4PVSDF&WFOU5ZQF1PTU-JOL"DUJWF>
QVCMJDWPJE$VTU(SPVQ@0O-JOL"DUJWF
'PSN%BUB4PVSDFTFOEFS
'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTOVNCFS4FR'PSN)BOEMFS

GPSN.FUIPE%BUB4PVSDF-JOL"DUJWF

^
Finally, to override the form's DMPTF
 method, subscribe to the 0O$MPTJOH
8.
event of the form with the following code snippet:
<'PSN&WFOU)BOEMFS
GPSNTUS
$VTU(SPVQ'PSN&WFOU5ZQF$MPTJOH>
QVCMJDWPJE$VTU(SPVQ@0O$MPTJOH
Y'PSN3VOGPSN3VO
'PSN&WFOU"SHTF
\
JG
OVNCFS4FR'PSN)BOEMFS
\
OVNCFS4FR'PSN)BOEMFSGPSN.FUIPE$MPTF

^
^
In order to test the numbering, navigate to Accounts receivable | Setup |
9.
Customers | Customer groups and try to create several new records--the
Customer group value will be generated automatically:

Working with Data in Forms
[ 131 ]
How it works...
First, we declare an object of type /VNCFS4FR'PSN)BOEMFS in the form's class declaration.
Then, we create a new corresponding form method called OVNCFS4FR'PSN)BOEMFS
,
which instantiates the object if it has not been instantiated yet and returns it. This method
allows us to hold the handler creation code in one place and reuse it many times within the
form.
In this method, we use the OFX'PSN
 constructor of the /VNCFS4FR'PSN)BOEMFS class to
create the OVNCFS4FR'PSN)BOEMFS object. It accepts the following arguments:
The number sequence code, which was created in the Creating a new number sequence recipe
in $IBQUFS, Processing Data, ensures the proper format of the customer group numbering.
Here, we call the OVN3FG$VTU(SPVQ*E
 helper method from the $VTU1BSBNFUFST table
to find which number sequence code will be used when creating new customer group
records:
The 'PSN3VO object, which represents the form itself
The form data source, where we need to apply the number sequence handler
The field number of the field into which the number sequence will be populated

Working with Data in Forms
[ 132 ]
Finally, we add the various /VNCFS4FR'PSN)BOEMFS methods to the corresponding events
methods on the form's data source to ensure proper handling of the numbering when
various events are triggered.
You may need to refresh your browser to see your changes.
See also
The Creating a new number sequence recipe in $IBQUFS, Processing Data
Creating a custom filter control
Filtering forms in Dynamics 365 for Finance and Operations is implemented in a variety of
ways. As part of the standard application, Dynamics 365 for Finance and Operations
provides various filtering options, such as Filter by Selection, Filter by Grid, or Advanced
Filter/Sort located in the toolbar, which allow you to modify the underlying query of the
currently displayed form. In addition to the standard filters, the Dynamics 365 for Finance
and Operations list pages normally allow quick filtering on most commonly used fields.
Besides that, some of the existing forms have even more advanced filtering options, which
allow users to quickly define complex search criteria.
Although the latter option needs additional programming, it is more user-friendly than
standard filtering and is a very common request in most of the Dynamics 365 for Finance
and Operations implementations.
In this recipe, we will learn how to add custom filters to a form. We will use the .BJO
BDDPVOUT form as a basis and add a few custom filters, which will allow users to search for
accounts based on their name and type.

Working with Data in Forms
[ 133 ]
How to do it...
Carry out the following steps in order to complete this recipe:
In the AOT, locate the .BJO"DDPVOU form and select the option to DSFBUF
1.
FYUFOTJPO of it in a new project. Open the form and select the design under the
/BWJHBUJPO-JTU control and add a new group control with the following
properties:
Property
Value
Name
Filter
AutoDeclaration Yes
Move this group below 5SFF'JMUFS and add a new 4USJOH control with the
2.
following properties:
Property
Value
Name
FilterName
AutoDeclaration
Yes
ExtendedDataType AccountName
Add a new $PNCP#PY control to the same group with the following properties:
3.
Property
Value
Name
FilterType
AutoDeclaration Yes
EnumType
DimensionLedgerAccountType
Selection
10

Working with Data in Forms
[ 134 ]
Create a new extension class, .BJO"DDPVOU'PSN@&YUFOTJPO , subscribe an
4.
0O.PEJGJFE event of the newly created controls, and add the following code
snippet in the FYUFOTJPO class:
<&YUFOTJPO0G
GPSNTUS
.BJO"DDPVOU>
GJOBMDMBTT.BJO"DDPVOU'PSN@&YUFOTJPO
\
<'PSN$POUSPM&WFOU)BOEMFS
GPSN$POUSPM4US
.BJO"DDPVOU
'JMUFS/BNF'PSN$POUSPM&WFOU5ZQF.PEJGJFE>
QVCMJDWPJE'JMUFS/BNF@0O.PEJGJFE
'PSN$POUSPMTFOEFS
'PSN$POUSPM&WFOU"SHTF
\
'PSN%BUB4PVSDFNBJO"DDPVOU@ET
TFOEFSGPSN3VO
EBUB4PVSDF
GPSNEBUBTPVSDFTUS
.BJO"DDPVOU
.BJO"DDPVOU
NBJO"DDPVOU@ETFYFDVUF2VFSZ

^
<'PSN$POUSPM&WFOU)BOEMFS
GPSN$POUSPM4US
.BJO"DDPVOU
'JMUFS5ZQF'PSN$POUSPM&WFOU5ZQF.PEJGJFE>
QVCMJDWPJE'JMUFS5ZQF@0O.PEJGJFE
'PSN$POUSPMTFOEFS
'PSN$POUSPM&WFOU"SHTF
\
'PSN%BUB4PVSDFNBJO"DDPVOU@ET
TFOEFSGPSN3VO
EBUB4PVSDF
GPSNEBUBTPVSDFTUS
.BJO"DDPVOU
.BJO"DDPVOU
NBJO"DDPVOU@ETFYFDVUF2VFSZ

^
^
After all modifications, in the AOT, the .BJO"DDPVOU&YUFOTJPO form will
5.
look similar to the following screenshot:

Working with Data in Forms
[ 135 ]
In the same extension class, subscribe to the 0O2VFSZ&YFDVUJOH and
6.
0O2VFSZ&YFDVUFE events to override the FYFDVUF2VFSZ
 method of the
.BJO"DDPVOU data source, and then add the following code snippet in the
extension class:
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
.BJO"DDPVOU
.BJO"DDPVOU'PSN%BUB4PVSDF&WFOU5ZQF2VFSZ&YFDVUJOH>
QVCMJDWPJE.BJO"DDPVOU@0O2VFSZ&YFDVUJOH
'PSN%BUB4PVSDF
TFOEFS'PSN%BUB4PVSDF&WFOU"SHTF
\
2VFSZ#VJME3BOHFRCS/BNF
2VFSZ#VJME3BOHFRCS5ZQF
2VFSZ#VJME%BUB4PVSDFRCET
TFOEFSRVFSZ
EBUB4PVSDF5BCMF
UBCMF/VN
.BJO"DDPVOU
.BJO"DDPVOUVQEBUF#BMBODFT

RCS/BNF4ZT2VFSZGJOE0S$SFBUF3BOHF
RCETGJFME/VN
.BJO"DDPVOU/BNF
RCS5ZQF4ZT2VFSZGJOE0S$SFBUF3BOHF
RCETGJFME/VN
.BJO"DDPVOU5ZQF
TUSGJMUFS5FYU
UIJTEFTJHO
DPOUSPM/BNF
'JMUFS/BNFWBMVF4US

JG
GJMUFS5FYU
\
RCS/BNFWBMVF
4ZT2VFSZWBMVF-JLF
GJMUFS5FYU
^
FMTF

Working with Data in Forms
[ 136 ]
\
RCS/BNFWBMVF
4ZT2VFSZWBMVF6OMJNJUFE

^
JG
'JMUFS5ZQFTFMFDUJPO

%JNFOTJPO-FEHFS"DDPVOU5ZQF#MBOL
\
RCS5ZQFWBMVF
4ZT2VFSZWBMVF6OMJNJUFE

^
FMTF
\
RCS5ZQFWBMVF
RVFSZ7BMVF
'JMUFS5ZQFTFMFDUJPO

^
^
<'PSN%BUB4PVSDF&WFOU)BOEMFS
GPSN%BUB4PVSDF4US
.BJO"DDPVOU
.BJO"DDPVOU'PSN%BUB4PVSDF&WFOU5ZQF2VFSZ&YFDVUFE>QVCMJD
WPJE.BJO"DDPVOU@0O2VFSZ&YFDVUFE
'PSN%BUB4PVSDF
TFOEFS'PSN%BUB4PVSDF&WFOU"SHTF
\
UIJTDSFBUF5SFF

^
In order to test the filter, navigate to General ledger | Common | Main accounts
and change the values in the newly created filters--the account list will change,
reflecting the selected criteria:

Working with Data in Forms
[ 137 ]
How it works...
We start by adding an empty 'JMUFS group control to make sure all our controls are placed
from the left to the right in one line.
Next, we add two controls that represent the Account name and Main account type filters
and enable them to be automatically declared for later usage in the code. We also subscribe
their 0O.PEJGJFE
 event methods to ensure that the .BJO"DDPVOU data source's query is
re-executed whenever the controls' values change.
Finally, we subscribe to 0O2VFSZ&YFDVUJOH and 0O2VFSZ&YFDVUFE events on the
.BJO"DDPVOU data source to override the function of the FYFDVUF2VFSZ
 method. The
code uses two event handlers, to apply the ranges before TVQFS
 of FYFDVUF2VFSZ
 and
DSFBUF5SFF
 after the TVQFS
0O2VFSZ&YFDVUJOH event make sure the query is
modified before fetching the data.
Here, we declare and create two new 2VFSZ#VJME3BOHF objects, which represent the
ranges on the query. We use the GJOE0S$SFBUF3BOHF
 method of the 4ZT2VFSZ
application class to get the SBOHF object. This method is very useful and important, as it
allows you to reuse previously created ranges.
Next, we set the ranges' values. If the filter controls are blank, we use the
WBMVF6OMJNJUFE
 method of the 4ZT2VFSZ application class to clear the ranges. If the
user types some text into the filter controls, we pass those values to the query ranges. The
global RVFSZ7BMVF
 function--which is actually a shortcut to 4ZT2VFSZWBMVF
-
ensures that only safe characters are passed to the range. The 4ZT2VFSZWBMVF-JLF

method adds the  character around the account name value to make sure that the search is
done based on partial text.
Note that the 4ZT2VFSZ helper class is very useful when working with queries, as it does all
kinds of input data conversions to make sure they can be safely used. Here is a brief
summary of some of the 4ZT2VFSZ methods:
WBMVF6OMJNJUFE
: This method returns a string representing an unlimited
query range value, that is, no range at all.
WBMVF
: This method converts an argument into a safe string. The global
RVFSZ7BMVF
 method is a shortcut for this.
WBMVF/PU
: This method converts an argument into a safe string and adds an
inversion sign in front of it.

Working with Data in Forms
[ 138 ]
See also
The Building a query object recipe in $IBQUFS, Processing Data.
Creating a custom instant search filter
The standard form filters and the majority of customized form filters in Dynamics 365 for
Finance and Operations are only applied once the user presses a button or a key. This is
acceptable in most cases, especially if multiple criteria are used. However, when the result
retrieval speed and usage simplicity has priority over system performance, it is possible to
set up the search so that the record list is updated instantly when the user starts typing.
In this recipe, to demonstrate the instant search, we will modify the Vendor group form.
We will add a custom Name filter, which will update the group list automatically when the
user starts typing. We will need to overlay the Vendor group form, as the methods that we
will be using for instant search don't yet have an event listener provided by Microsoft.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new project in Visual Studio, open the 7FOE(SPVQ form, and add a new
1.
group control 'JMUFS below 2VJDL'JMUFS$POUSPM to the already existing
$VTUPN'JMUFS(SPVQ group control.
Property
Value
Name
Filter
AutoDeclaration Yes

Working with Data in Forms
[ 139 ]
Then, add a 4USJOH control to the new group 'JMUFS with the following
2.
properties:
Property
Value
Name
FilterName
AutoDeclaration
Yes
ExtendedDataType Name
Override the control's UFYU$IBOHF
 method with the following code snippet:
3.
QVCMJDWPJEUFYU$IBOHF

\
TVQFS

7FOE(SPVQ@ETFYFDVUF2VFSZ

^
On the same control, override the control's FOUFS
 method with the following
4.
code snippet:
QVCMJDWPJEFOUFS

\
TVQFS

UIJTTFU4FMFDUJPO
TUS-FO
UIJTUFYU

TUS-FO
UIJTUFYU

^
Override the FYFDVUF2VFSZ
 method of the 7FOE(SPVQ data source as follows:
5.
QVCMJDWPJEFYFDVUF2VFSZ

\
2VFSZ#VJME3BOHFRCS/BNF
RCS/BNF
4ZT2VFSZGJOE0S$SFBUF3BOHF
UIJTRVFSZ#VJME%BUB4PVSDF

GJFME/VN
7FOE(SPVQ/BNF
RCS/BNFWBMVF
'JMUFS/BNFUFYU

		RVFSZ7BMVF
'JMUFS/BNFUFYU
		
4ZT2VFSZWBMVF6OMJNJUFE

TVQFS

^

Working with Data in Forms
[ 140 ]
In order to test the search, build your solution, navigate to Accounts payables |
6.
Vendors | Vendor groups, and start typing in the Name filter. Note how the
vendor group list is being filtered automatically:
How it works...
First of all, we add a new control, which represents the Name filter. Normally, the user's
typing triggers the UFYU$IBOHF
 event method on the active control every time a
character is entered. So, we override this method and add code to re-execute the form's
query whenever a new character is typed in.
Next, we have to correct the cursor's behavior. Currently, once the user types in the first
character, the search is executed and the system moves the focus out of this control and then
moves back into the control selecting all the typed text. If the user continues typing, the
existing text will be overwritten with the new character and the loop will continue.

Working with Data in Forms
[ 141 ]
In order to go around this, we have to override the control's FOUFS
 event method. This
method is called every time the control receives a focus, whether it was done by a user's
mouse, key, or by the system. Here, we call the TFU4FMFDUJPO
 method. Normally, the
purpose of this method is to mark a control's text, or a part of it, as selected. Its first
argument specifies the beginning of the selection and the second one specifies the end. In
this recipe, we use this method in a slightly different way. We pass the length of the typed
text as a first argument, which means the selection starts at the end of the text. We pass the
same value as a second argument, which means that selection ends at the end of the text. It
does not make any sense from a selection point of view, but it ensures that the cursor
always stays at the end of the typed text, allowing the user to continue typing.
The last thing to do is to add some code to the FYFDVUF2VFSZ
 method to change the
query before it is executed. Modifying the query was discussed in detail in the Creating a
custom filter control recipe. The only thing to note here is that we add  to the beginning and
the end of the search string to do the search with a partial string.
Note that the system's performance might be affected, as the data search is executed every
time the user types in a character. It is not recommended to use this approach for large
tables.
See also
The Creating a custom filter control recipe
All your objects must belong to the same package, so you don't need to
create a separate project for each recipe. You can add your code/object in
your existing project/solution customization is possible only if the models
are in the same package.
Building a selected/available list
Frequent users might note that some of the Dynamics 365 for Finance and Operations forms
contain two sections placed next to each other and allow the moving of items from one side
to the other. Normally, the right section contains a list of available values and the left one
contains the values that have been chosen by the user. Buttons in the middle the allow the
moving of data from one side to another. Double-click and drag and drop mouse events are 
also supported. Such design improves the user's experience, as data manipulation becomes
more user-friendly.

Working with Data in Forms
[ 142 ]
Some of the examples in the standard application can be found at General ledger | Chart of
accounts | Dimensions | Financial dimension sets or System administration | Users |
User groups.
This functionality is based on the 4ZT-JTU1BOFM3FMBUJPO5BCMF$BMM#BDL application
class. Developers only need to create its instance with the required parameters and the rest
is done automatically.
This recipe will show the basic principles of how to create selected/available lists. We will
add an option for assigning customers to buyer groups in the Buyer groups form in the
Inventory management module.
How to do it...
Carry out the following steps in order to complete this recipe:
In the AOT, create a new table named *OWFOU#VZFS(SPVQ-JTU. Let's not change
1.
any of its properties, as this table is for demonstration only.
Add a new field to the table with the following properties (click on Yes if asked
2.
to add a new relation to the table):
Property
Value
Type
String
Name
GroupId
ExtendedDataType ItemBuyerGroupId
Add another field to the table with the following properties:
3.
Property
Value
Type
String
Name
CustAccount
ExtendedDataType CustAccount

Working with Data in Forms
[ 143 ]
In the AOT, open the *OWFOU#VZFS(SPVQ form and change its design's property
4.
as follows:
Property Value
Style
Auto
Add a new 5BC control with the following properties to the design's bottom:
5.
Property
Value
Name
Tab
Width mode
SizeToAvailable
Height mode Column height
Add a new 5BC1BHF control with the following properties to the newly created
6.
tab:
Property Value
Name
BuyerGroups
Caption
Buyer groups
Add another 5BC1BHF control with the following properties to the newly created
7.
tab:
Property Value
Name
Customers
Caption
Customers

Working with Data in Forms
[ 144 ]
Move the existing (SJE control into the first tab page and disable the existing
8.
$VTUPN'JMUFS(SPVQ group by setting its property:
Property Value
Enable
No
The form will look similar to the following screenshot:
9.
Add the following line to the form's class declaration:
10.
4ZT-JTU1BOFM3FMBUJPO5BCMFTZT-JTU1BOFM
Override the form's JOJU
 method with the following code snippet:
11.
QVCMJDWPJEJOJU

\
DPOUBJOFSDPMVNOT
3FT"QQM
DPMVNOT<GJFME/VN
$VTU5BCMF"DDPVOU/VN>
TZT-JTU1BOFM4ZT-JTU1BOFM3FMBUJPO5BCMFOFX'PSN
FMFNFOU
FMFNFOUDPOUSPM*E
GPSN$POUSPM4US
*OWFOU#VZFS(SPVQ$VTUPNFST

Working with Data in Forms
[ 145 ]
4FMFDUFE
"WBJMBCMF
*NBHF$VTUPNFS
UBCMF/VN
*OWFOU#VZFS(SPVQ-JTU
GJFME/VN
*OWFOU#VZFS(SPVQ-JTU$VTU"DDPVOU
GJFME/VN
*OWFOU#VZFS(SPVQ-JTU(SPVQ*E
UBCMF/VN
$VTU5BCMF
GJFME/VN
$VTU5BCMF"DDPVOU/VN
DPMVNOT
TVQFS

TZT-JTU1BOFMJOJU

^
Override the QBHF"DUJWBUFE
 method on the newly created $VTUPNFST tab
12.
page with the following code snippet:
QVCMJDWPJEQBHF"DUJWBUFE

\
TZT-JTU1BOFMQBSN3FMBUJPO3BOHF7BMVF
*OWFOU#VZFS(SPVQ(SPVQ
TZT-JTU1BOFMQBSN3FMBUJPO3BOHF3FD*E
*OWFOU#VZFS(SPVQ3FD*E
TZT-JTU1BOFMGJMM

TVQFS

^
In order to test the list, first, save all your code and build your solution.
13.

Working with Data in Forms
[ 146 ]
Now navigate to Inventory management | Setup | Inventory | Buyer groups
14.
and select any group. Then, go to the Customers tab page and use the buttons
provided to move records from one side to the other. You can also double-click or
drag and drop with your mouse:
How it works...
In this recipe, the *OWFOU#VZFS(SPVQ-JTU table is used as a many-to-many relationship
table between the buyer groups and the customers.
In terms of form design, the only thing that needs to be added is a new tab page. The rest is
created dynamically by the 4ZT-JTU1BOFM3FMBUJPO5BCMF application class.

Working with Data in Forms
[ 147 ]
In the form's class declaration, we declare a new variable based on the
4ZT-JTU1BOFM3FMBUJPO5BCMF class and instantiate it in the form's JOJU
 method using
its OFX'PSN
 constructor. The method accepts the following parameters:
The 'PSN3VO object representing the form itself.
The name of the tab page.
The label of the left section.
The label of the right section.
The number of the image that is shown next to each record in the lists.
The relationship table number.
The field number in the relationship table representing the child record. In our
case, it is the customer account number--$VTU"DDPVOU.
The field number in the relationship table representing the parent table. In this
case, it is the buyer group number--(SPVQ*E.
The number of the table that is displayed in the lists.
A container of the field numbers displayed in each column.
We also have to initialize the list by calling its member method JOJU
 in the form's
JOJU
 method right after the TVQFS
 method.
The list's controls are created dynamically when the Customers tab page is opened. In order
to accommodate that, we add the list's creation code to the QBHF"DUJWBUFE
 event
method of the newly created tab page. In this way, we ensure that the list is populated
whenever a new buyer group is selected.
There's more...
The 4ZT-JTU1BOFM3FMBUJPO5BCMF class can only display fields from a single table.
Alternatively, there is another application class named
4ZT-JTU1BOFM3FMBUJPO5BCMF$BMMCBDL, which allows you to create more complex lists.
In order to demonstrate its capabilities, we will expand the previous example by displaying
the customer name next to the account number. The customer name is stored in another
table and can be retrieved by using the OBNF
 method on the $VTU5BCMF table.

Working with Data in Forms
[ 148 ]
First, in the form's class declaration, we have to change the list declaration to the following
code line:
4ZT-JTU1BOFM3FMBUJPO5BCMF$BMMCBDLTZT-JTU1BOFM
Next, we create two new methods--one for the left list and the other one for the right list--
that generate and return data containers to be displayed in each section. The methods will
be placed on the *OWFOU#VZFS(SPVQ-JTU table. In order to improve performance, these
methods will be executed on the server tier (note the server modifier):
TUBUJDTFSWFSDPOUBJOFSTFMFDUFE$VTUPNFST
*UFN#VZFS(SPVQ*E@HSPVQ*E
\
DPOUBJOFSSFU
DPOUBJOFSEBUB
$VTU5BCMFDVTU5BCMF
*OWFOU#VZFS(SPVQ-JTUHSPVQ-JTU
XIJMFTFMFDUDVTU5BCMF
PSEFSCZ"DDPVOU/VN
FYJTUTKPJOHSPVQ-JTU
XIFSFHSPVQ-JTU$VTU"DDPVOUDVTU5BCMF"DDPVOU/VN
HSPVQ-JTU(SPVQ*E@HSPVQ*E
\
EBUB<DVTU5BCMF"DDPVOU/VN
DVTU5BCMF"DDPVOU/VN
DVTU5BCMFOBNF
>
SFU<EBUB>
^
SFUVSOSFU
^
TUBUJDTFSWFSDPOUBJOFSBWBJMBCMF$VTUPNFST
*UFN#VZFS(SPVQ*E@HSPVQ*E
\
DPOUBJOFSSFU
DPOUBJOFSEBUB
$VTU5BCMFDVTU5BCMF
*OWFOU#VZFS(SPVQ-JTUHSPVQ-JTU
XIJMFTFMFDUDVTU5BCMF
PSEFSCZ"DDPVOU/VN
OPU&YJTUTKPJOGJSTU0OMZHSPVQ-JTU
XIFSFHSPVQ-JTU$VTU"DDPVOUDVTU5BCMF"DDPVOU/VN

Working with Data in Forms
[ 149 ]
HSPVQ-JTU(SPVQ*E@HSPVQ*E
\
EBUB<DVTU5BCMF"DDPVOU/VNDVTU5BCMF"DDPVOU/VN
DVTU5BCMFOBNF
>
SFU<EBUB>
^
SFUVSOSFU
^
Each of the methods returns a container of containers. The outer container holds all the
items in the list. The inner container represents one item in the section and it contains three
elements--the first is the identification number of the element and the next two are
displayed on the screen.
Next, we create two new methods with the same names on the *OWFOU#VZFS(SPVQ form
itself. These methods are required to be present on the form by the
4ZT-JTU1BOFM3FMBUJPO5BCMF$BMMCBDL class. These methods are nothing but wrappers
to the previously created methods:
QSJWBUFDPOUBJOFSTFMFDUFE$VTUPNFST

\
SFUVSO*OWFOU#VZFS(SPVQ-JTUTFMFDUFE$VTUPNFST
*OWFOU#VZFS(SPVQ(SPVQ
^
QSJWBUFDPOUBJOFSBWBJMBCMF$VTUPNFST

\
SFUVSO*OWFOU#VZFS(SPVQ-JTUBWBJMBCMF$VTUPNFST
*OWFOU#VZFS(SPVQ(SPVQ
^
In this way, we reduce the number of calls between the client and server tiers while
generating the lists.
Finally, we replace the form's JOJU
 method with the following code snippet:
QVCMJDWPJEJOJU

\
DPOUBJOFSDPMVNOT
3FT"QQM
DPMVNOT<>
TZT-JTU1BOFM4ZT-JTU1BOFM3FMBUJPO5BCMF$BMMCBDLOFX'PSN
FMFNFOUFMFNFOUDPOUSPM*E

Working with Data in Forms
[ 150 ]
GPSN$POUSPM4US
*OWFOU#VZFS(SPVQ$VTUPNFST
4FMFDUFE
"WBJMBCMF
*NBHF$VTUPNFS
UBCMF/VN
*OWFOU#VZFS(SPVQ-JTU
GJFME/VN
*OWFOU#VZFS(SPVQ-JTU$VTU"DDPVOU
GJFME/VN
*OWFOU#VZFS(SPVQ-JTU(SPVQ*E
UBCMF/VN
$VTU5BCMF
GJFME/VN
$VTU5BCMF"DDPVOU/VN
DPMVNOT

		
		
JEFOUJGJFS4US
TFMFDUFE$VTUPNFST
JEFOUJGJFS4US
BWBJMBCMF$VTUPNFST
TVQFS

TZT-JTU1BOFMJOJU

^
This time, we used the OFX'PSN
 constructor of the
4ZT-JTU1BOFM3FMBUJPO5BCMF$BMMCBDL class, which is very similar to the previous one,
but accepts the names of methods as arguments, which will be used to populate the data in
the right and left sections.
Note that the DPMVNOT container that previously held a list of fields now contains two zeros.
By doing that, we simply define that there will be two columns in each list. Since the lists
are actually generated outside the 4ZT-JTU1BOFM3FMBUJPO5BCMF$BMMCBDL class, we do
not need to specify the field numbers of the columns anymore.
Now, when you run the Buyer groups form, both sections contain a customer name
column:

Working with Data in Forms
[ 151 ]
Creating a wizard
Wizards in Dynamics 365 for Finance and Operations are used to help a user to perform a
specific task. An example of a standard Dynamics 365 for Finance and Operations wizards
is the Number Sequence Wizard.
Normally, a wizard is presented to a user as a form with a series of steps. During the wizard
run, all the user's inputs are collected and committed to the database. Then, the user presses
the Finish button on the last wizard page.
In this recipe, we will create a new wizard to create main accounts. First, we will use the
standard Dynamics 365 for Finance and Operations wizard to create a framework, and then
we will add some additional controls manually.

Working with Data in Forms
[ 152 ]
How to do it...
Carry out the following steps in order to complete this recipe:
In the Development Workspace, create a new Dynamics 365 for Operations
1.
project.
Create a new Class named XJ[BSE that extends 4ZT8J[BSE:
2.

Working with Data in Forms
[ 153 ]
Create a new Form named XJ[BSE, select a design, and apply the design pattern
3.
8J[BSE:
Address BP Warnings:
4.
%FTJHO$BQUJPO isn't empty
The form must be referenced by at least one menu item
5BC1BHF$BQUJPO isn't empty (for all wizard content pages)
.BJO*OTUSVDUJPO5FYU isn't empty (for all wizard content pages)

Working with Data in Forms
[ 154 ]
The form design should look as follows:
Create a new display menu item named 8J[BSE, set its Object Type as $MBTT
5.
and Object as 8J[BSE and the properties window should look as follows:

Working with Data in Forms
[ 155 ]
Create a new macro library named .BJO"DDPVOU8J[BSE with the following line
6.
of code:
EFGJOFUBC4UFQ

Modify the 8J[BSE class by adding the following lines of code to its class
7.
declaration:
.BJO"DDPVOUNBJO"DDPVOU
.BJO"DDPVOU8J[BSE
Add a new method in the class name BDDFTT.FOV'VODUJPO
8.
TVNNBSZ 
3FUSJFWFTBNFOVGVODUJPO
TVNNBSZ 
SFUVSOT 
5IFNFOVGVODUJPO
SFUVSOT 
QVCMJD.FOV'VODUJPOBDDFTT.FOV'VODUJPO

\
SFUVSOOFX
.FOV'VODUJPO

NFOVJUFN%JTQMBZ4US
8J[BSE.FOV*UFN5ZQF%JTQMBZ
^
Override the method GPSNOBNF
 and add the following line of code:
9.
SFUVSOGPSN4US
8J[BSE

Working with Data in Forms
[ 156 ]
Add a new method QBSN$BMMFS%FTU and use the following code:
10.
TVNNBSZ 
(FUTPSTFUTDBMMFSEFTUJOBUJPO
VTFEUPHFUQBSBNFUFSGSPN
NFOVJUFN
TVNNBSZ 
QBSBNOBNF@DBMMFS%FTU $BMMFSEFTUJOBUJPOQBSBN 
SFUVSOT $BMMFSEFTUJOBUJPOSFUVSOT 
QVCMJDTUSQBSN$BMMFS%FTU
TUS@DBMMFS%FTUDBMMFS%FTU
\
DBMMFS%FTU@DBMMFS%FTU
SFUVSODBMMFS%FTU
^
Add the following line of code to the overridden method TFUVQ/BWJHBUJPO

11.
in the same class:
OFYU&OBCMFE<UBC4UFQ>GBMTF
Override the GJOJTI
 method of the class with the following code snippet:
12.
QSPUFDUFEWPJEGJOJTI

\
NBJO"DDPVOUJOJU7BMVF

NBJO"DDPVOU-FEHFS$IBSU0G"DDPVOUT
-FEHFS$IBSU0G"DDPVOUTDVSSFOU

NBJO"DDPVOU.BJO"DDPVOU*EGPSN3VOBDDPVOU/VN

NBJO"DDPVOU/BNFGPSN3VOBDDPVOU/BNF

NBJO"DDPVOU5ZQFGPSN3VOBDDPVOU5ZQF

TVQFS

^
Replace the WBMJEBUF
 method of the same class with the following code
13.
snippet:
CPPMFBOWBMJEBUF

\
SFUVSONBJO"DDPVOUWBMJEBUF8SJUF

^

Working with Data in Forms
[ 157 ]
Replace the SVO
 method of the same class with the following code snippet:
14.
WPJESVO

\
NBJO"DDPVOUJOTFSU

JOGP
TUS'NU
-FEHFSBDDPVOU		XBTTVDDFTTGVMMZDSFBUFE
NBJO"DDPVOU.BJO"DDPVOU*E
^
In the 8J[BSE form, add the following line of code to its class declaration:
15.
.BJO"DDPVOU8J[BSE
Change the form's design property:
16.
Property Value
Caption
Main account wizard
Modify the properties of the 4UFQ tab page, as follows:
17.
Property Value
Caption
Welcome
Add a new 4UBUJD5FYU control in this tab page with the following properties:
18.
Property Value
Name
WelcomeTxt
Text
This wizard helps you to create a new main account.
Modify the properties of the 4UFQ tab page:
19.
Property
Value
Caption
Account setup
HelpText Specify account number, name, and type.

Working with Data in Forms
[ 158 ]
Add a new 4USJOH&EJU control in this tab page with the following properties:
20.
Property
Value
Name
AccountNum
AutoDeclaration
Yes
Label
Main account
ExtendedDataType AccountNum
Add one more 4USJOH&EJU control in this tab page with the following
21.
properties:
Property
Value
Name
AccountName
AutoDeclaration
Yes
ExtendedDataType AccountName
Add a new $PNCP#PY control in this tab page with the following properties:
22.
Property
Value
Name
AccountType
AutoDeclaration Yes
EnumType
DimensionLedgerAccountType
Modify the properties of the 4UFQ tab page, as follows:
23.
Property Value
Caption
Finish
Add a new 4UBUJD5FYU control on this tab page with the following properties:
24.
Property Value
Name
FinishTxt
Text
This wizard is now ready to create new main account.

Working with Data in Forms
[ 159 ]
Create the following four methods at the top level of the form:
25.
QVCMJD.BJO"DDPVOU/VNBDDPVOU/VN

\
SFUVSO"DDPVOU/VNUFYU

^
QVCMJD"DDPVOU/BNFBDDPVOU/BNF

\
SFUVSO"DDPVOU/BNFUFYU

^
QVCMJD%JNFOTJPO-FEHFS"DDPVOU5ZQFBDDPVOU5ZQF

\
SFUVSO"DDPVOU5ZQFTFMFDUJPO

^
QVCMJDWPJETFU/FYU

\
TZT8J[BSEOFYU&OBCMFE
UIJTBDDPVOU/VN
UIJTBDDPVOU/BNF

UBC4UFQ
GBMTF
^
Add the following code in the JOJU
 method of the form:
26.
QVCMJDWPJEJOJU

\
TVQFS

JG
FMFNFOU"SHT
DBMMFS

\
TZT8J[BSEFMFNFOU"SHT
DBMMFS

^
FMTF
\
8J[BSENBJO
OFX"SHT

FMFNFOUDMPTF$BODFM

^
^
Add a new method named UBC
 and place the following code:
27.
'PSN5BC$POUSPMUBC

\
SFUVSO.BJO5BC
^

Working with Data in Forms
[ 160 ]
Add a new method that returns the reference of the wizard instance:
28.
4ZT8J[BSEXJ[BSE

\
SFUVSOTZT8J[BSE
^
Now, override the UFYU$IBOHF
 method on the "DDPVOU/VN and
29.
"DDPVOU/BNF controls with the following code:
QVCMJDWPJEUFYU$IBOHF

\
TVQFS

FMFNFOUTFU/FYU

^
After all modifications, the form will look as follows:
In order to test the newly created wizard, run the Wizard menu item, and the
30.
wizard will appear. On the first page, click on Next:

Working with Data in Forms
[ 161 ]
On the second page, specify Main account, Account name, and Main account
31.
type:

Working with Data in Forms
[ 162 ]
On the last page, click on Finish to complete the wizard:
32.
The Infolog window will display a message that a new account was created
33.
successfully:
How it works...
The wizard creates three AOT objects for us:
The 8J[BSE class, which contains all the logic required to run the wizard
The 8J[BSE form, which is the wizard layout
Finally, the 8J[BSE display menu item, which is used to start the wizard and can
be added to a menu

Working with Data in Forms
[ 163 ]
The generated wizard is just a starting point for our custom wizard. It already has three
pages, as we specified during its creation, but we still have to add new user input controls
and custom code in order to implement our requirements.
We start by defining a new UBC4UFQ macro, which holds the number of the second tab
page. We are going to refer to this page several times, so it is good practice to define its
number in one place.
In the 8J[BSE class, we override its TFUVQ/BWJHBUJPO
 method, which is used to define
initial button states. We use this method to disable the Next button on the second page by
default. The OFYU&OBCMFE variable is an array holding the initial enabled or disabled state
for each tab page.
The overridden GJOJTI
 method is called when the user clicks on the Finish button. Here,
we initialize the record and then assign user input to the corresponding field values.
In the WBMJEBUF
 method, we check the account that will be created. This method is called
right after the user clicks on the Finish button at the end of the wizard and before the main
code is executed in the SVO
 method. Here, we simply call the WBMJEBUF8SJUF
 method
for the record from the main account table.
The last thing to do in the class is to place the main wizard code--insert the record and
display a message--in the SVO
 method.
In the 8J[BSE form's design, we modify properties of each tab page and add text to explain
to the user the purpose of each step. Note that the )FMQ5FYU property value on the second
tab page appears as a step description right below the step title during runtime. This is done
automatically by the 4ZT8J[BSE class.
Finally, on the second tab page, we place three controls for user input. Later on, we create
three methods which return the controls' values: account number, name, and type values,
respectively. We also override the UFYU$IBOHF
 event methods on the controls to
determine and update the runtime state of the Next button. These methods call the
TFU/FYU
 method, which actually controls the behavior of the Next button. In our case,
we enable the Next button as soon as all input controls have values.

Working with Data in Forms
[ 164 ]
Processing multiple records
In Dynamics 365 for Finance and Operations, by default, most of the functions available on
forms are related to currently selected single record. However, on many Dynamics 365 for
Finance and Operations forms you will find a multiple record selection option, but at the
same time ,you will be able to perform some certain operations only. So, to perform a
specific operation on all selected records, some modification is required.
In this recipe, we will explore how to process multiple records at the same time. You can
modify an existing process for the same. For this demonstration, we will add a new button
to the action pane on the Vend Table form to show multiple selected accounts in the
Infolog window.
How to do it...
For this recipe, we will extend the 7FOE5BCMF form. Currently, we don't have an option to
put multiple vendors on hold in a single click. So, we will add a new button there to process
all selected vendors. Carry out the following steps in order to complete this recipe:
Add a new project in your Visual Studio Solution 1SPDFTTJOH.VMUJQMF3FDPSET, create
an extension of the 7FOE5BCMF form from AOT, and add this to the project.
To process selected records, add a new button 1SPDFTT4FMFDUFE to the
1.
7FOEPS.PEJGZ#VUUPO(SPVQ control in the action pane. Add the button here
with the following properties:
Property
Value
Name
ProcessSelected
Text
On hold (All selected)
MultiSelect Yes
Create a new extension class 7FOE5BCMF'SPN@&YUFOTJPO for the 7FOE5BCMF
2.
form and add a method with the following code snippet:
<&YUFOTJPO0G
GPSNTUS
7FOE5BCMF>
GJOBMDMBTT7FOE5BCMF'SPN@&YUFOTJPO
QVCMJDWPJEQSPDFTT4FMFDUFE
'PSN$POUSPMTFOEFS
'PSN$POUSPM&WFOU"SHTF
\
7FOE5BCMFUNQ7FOE5BCMFVQEBUF7FOE5BCMF

Working with Data in Forms
[ 165 ]
JOUSFDPSE6QEBUFE
GPS
UNQ7FOE5BCMFUIJT7FOE5BCMF@ETHFU'JSTU
USVF
UIJT7FOE5BCMF@ETHFU'JSTU
USVF
UIJT7FOE5BCMF@ETDVSTPS
UNQ7FOE5BCMFUNQ7FOE5BCMF
UIJT7FOE5BCMF@ETHFU/FYU

\
UUTCFHJO
TFMFDUGJSTUPOMZGPSVQEBUFVQEBUF7FOE5BCMFXIFSF
VQEBUF7FOE5BCMF"DDPVOU/VNUNQ7FOE5BCMF"DDPVOU/VN
VQEBUF7FOE5BCMF#MPDLFE$VTU7FOEPS#MPDLFE"MM
VQEBUF7FOE5BCMFVQEBUF

SFDPSE6QEBUFE
UUTDPNNJU
^
JOGP
TUS'NU
5PUBMSFDPSETQSPDFTTFESFDPSE6QEBUFE
^
^
Now, copy the 0O$MJDLFE event handler from the 1SPDFTT4FMFDUFE button
3.
control and add a new method in 7FOE5BCMF'SPN@&YUFOTJPO with the
following code snippet:
TVNNBSZ 

TVNNBSZ 
QBSBNOBNFTFOEFS QBSBN 
QBSBNOBNFF QBSBN 
<'PSN$POUSPM&WFOU)BOEMFS
GPSN$POUSPM4US
7FOE5BCMF
1SPDFTT4FMFDUFE'PSN$POUSPM&WFOU5ZQF$MJDLFE>
QVCMJDWPJE1SPDFTT4FMFDUFE@0O$MJDLFE
'PSN$POUSPMTFOEFS
'PSN$POUSPM&WFOU"SHTF
\
UIJTQSPDFTT4FMFDUFE
TFOEFSF
^

Working with Data in Forms
[ 166 ]
In order to test the record selection, navigate to Accounts payable | Vendor | All
4.
vendors, select several records, and click on the new On Hold (All selected)
button.

Working with Data in Forms
[ 167 ]
The selected items will be displayed in the Vendors on hold form as well. To
5.
check, navigate to Accounts payable | Vendor | Vendors on hold.
How it works...
In earlier versions, we had .VMUJ4FMFDUJPO)FMQFS to support such customization. In
current versions, this class has been deprecated. So we have to travel record by record here.
Next, get the first marked record using 7FOE5BCMF@%4HFU'JSTU
USVF, and then go
through all the other marked records (if any) using 7FOE5BCMF@%4HFUOFYU
 and
process them one by one. In this demonstration, we simply put vendors on hold using this
code.
The last thing to do is to update the table using another object of the table. Note that the
button's .VMUJ4FMFDU property is set to :FT to ensure it is still enabled when multiple
records are marked.

Working with Data in Forms
[ 168 ]
Coloring records
One of Dynamics 365 for Operation's exciting features, which can enhance user experience,
is the ability to color individual records. Some users might find the system more intuitive
and user-friendly through this modification.
For example, emphasizing the importance of disabled records by highlighting terminated
employees or former customers in red allows users to identify relevant records at a glance.
Another example is to show processed records, such as posted journals or invoiced sales
orders, in green.
Getting ready
In this recipe, we will learn how to change a record's color. We will use one created earlier
form the 1LU%JTBCMFE6TFS form located in System administration | Users | Disabled
Users with color and add a method to show disabled users in red.
How to do it...
Add a new project in your solution.
1.
Go to application explorer and search for the 1LU%JTBCMFE6TFS form; add this
2.
form to your project.
Now, override the EJTQMBZ0QUJPO
 method in its UserInfo data source with
3.
the following code snippet:
QVCMJDWPJEEJTQMBZ0QUJPO
$PNNPO@SFDPSE
'PSN3PX%JTQMBZ0QUJPO@PQUJPOT
\
JG
@SFDPSE
GJFME/VN
6TFS*OGP&OBCMF
\
@PQUJPOTCBDL$PMPS
8JO"1*3(#JOU

^
TVQFS
@SFDPSE@PQUJPOT
^

Working with Data in Forms
[ 169 ]
You should take care with the selected model for your project, every time
you add/customize an object into your project.
In order to test the coloring, navigate to System administration | Users | Users |
4.
Disabled Users with color and note how disabled users are now displayed in a
different color:
How it works...
The EJTQMBZ0QUJPO
 method on any form's data source can be used to change some of
the visual options. Before displaying each record, this method is called by the system with
two arguments--the first is the current record and the second is a 'PSN3PX%JTQMBZ0QUJPO
object--whose properties can be used to change a record's visual settings just before it
appears onscreen. In this example, we check whether the current user is disabled, and if
they are, we change the background property to light red by calling the CBDL$PMPS

method with the color code.

Working with Data in Forms
[ 170 ]
In this example, we used the @SFDPSE
GJFME/VN
6TFS*OGP&OBCMF expression to
address the &OBCMF field on the 6TFS*OGP table. This type of expression is normally used
when we know the type of record, but it is declared as a generic $PNNPO type.
For demonstration purposes, we specified the color directly in the code, but it is a good
practice for the color code to come from a configuration table. See the Creating a color picker
lookup recipe in $IBQUFS, Building Lookups, to learn how to allow the user to choose and
store the color selection.
See also
The Creating a color picker lookup recipe in $IBQUFS, Building Lookups
The Creating a new form recipe in $IBQUFS, Working with forms
Adding an image to records
Company-specific images in Dynamics 365 for Finance and Operations can be stored along
with the data in the database tables. They can be used for different purposes, such as a
company logo that is displayed in every printed document, employee photos, inventory
pictures, and so on.
Images are binary objects and they can be stored in the container table fields. In order to
make the system perform better, it is always recommended to store images in a separate
table so that it does not affect the retrieval speed of the main data.
One of the most convenient ways to attach images to record is to use the Document
handling feature of Dynamics 365 for Finance and Operations. It does not require any
change in the application. However, the Document handling feature is a very generic way
of attaching files to record and might not be suitable for specific circumstances.
Another way of attaching images to records is to utilize the standard application objects,
though minor application changes are required. For example, the company logo in the
Legal entities form, located at Organization administration | Setup | Organization, is one
of the places where the images are stored that way.
In this recipe, we will explore the latter option. As an example, we will add the ability to
store an image for each customer. We will also add a new Image button on the Customers
form, allowing us to attach or remove images from customers.

Working with Data in Forms
[ 171 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Open the $VTU5BCMF form in the AOT. Add a new .FOV*UFN#VUUPO control at
1.
the bottom of the Accounts button group, which is located at ActionPaneHeader
| aptabCustomer | btngrpCustomerAccounts, with the following properties:
Property
Value
Name
Image
Text
Image
ButtonDisplay
TextWithImageAbove
NormalImage
10598
ImageLocation
EmbeddedResource
DataSource
CustTable
MenuItemType
Display
MenuItemName CompanyImage
Navigate to Accounts receivable | Customers | All customers and note the new
2.
Image button in the action pane:

Working with Data in Forms
[ 172 ]
Click on the button, and then use the Change button to upload a new image for
3.
the selected item:
The Remove button can be used to delete an existing image.
How it works...
In this demonstration, there are only three standard Dynamics 365 for Finance and
Operations objects used:
The $PNQBOZ*NBHF table, which holds image data and information about the
record to which the image is attached. The separate table allows you to easily
hook image functionality to any other existing table without modifying that table
or decreasing its performance.
The $PNQBOZ*NBHF form, which shows an image and allows you to modify it.
The %JTQMBZ menu item $PNQBOZ*NBHF, which allows you to open the form.
We added the menu item to the $VTU5BCMF form and modified some of its visual
properties. This ensures that it looks consistent with the rest of the action pane. We also
changed its %BUB4PVSDF property to the $VTU5BCMF data source. This makes sure that the
image is stored against that record.
There's more...
The following two topics will explain how a stored image can be displayed as a new tab
page on the main form and how it can be saved back to a file.

Working with Data in Forms
[ 173 ]
Displaying an image as part of a form
In this section, we will extend the recipe by displaying the stored image on a new tab page
on the Customers form.
Firstly, we need to add a new tab page to the end of the $VTU5BCMF form's 5BC)FBEFS
control, which is located inside another tab page called 5BC1BHF%FUBJMT. This is where our
image will be displayed. Right-click on this new tab and set the patterns to *NBHF1SFWJFX
as follows:
Set the following properties of the new tab page:
Property
Value
Name
TabImage
AutoDeclaration Yes
Caption
Image
Add a new 8JOEPX type control to the tab page. This control will be used to display the
image. Set its properties as follows:
Property
Value
Name
CustImage
AutoDeclaration Yes

Working with Data in Forms
[ 174 ]
Next, let's create a new method at the top level of the $VTU5BCMF form:
QVCMJDWPJEMPBE*NBHF

\
*NBHFJNH
$PNQBOZ*NBHFDPNQBOZ*NBHF
DPNQBOZ*NBHF$PNQBOZ*NBHFGJOE
$VTU5BCMFEBUB"SFB*E
$VTU5BCMF5BCMF*E
$VTU5BCMF3FD*E
JG
DPNQBOZ*NBHF*NBHF
\
JNHOFX*NBHF

JNHTFU%BUB
DPNQBOZ*NBHF*NBHF
$VTU*NBHFJNBHF
JNH
^
FMTF
\
$VTU*NBHFJNBHF
OVMM
^
^
This method finds a $PNQBOZ*NBHF record first, which is attached to the current record,
and then displays the binary data using the $VTU*NBHF control. If no image is attached, the
8JOEPX control is cleared to display an empty space.
Next, we add the following line of code after super to the bottom of the
TFMFDUJPO$IBOHFE
 method of the $VTU5BCMF data source to ensure that the image is
loaded for a currently selected record:
FMFNFOUMPBE*NBHF

Now, save all your code and build the VS solution. To test your code, navigate to Account
receivable | Customers | All customers, select previously used customers, and click on the
customer Account number in the grid. On the Customers form, note the new tab page with
the image displayed:

Working with Data in Forms
[ 175 ]
Saving a stored image as a file
This section will describe how the stored image can be restored back to a file. This is quite a
common case when the original image file is lost. We will enhance the standard *NBHF form
by adding a new Save as button, which allows us to save the stored image as a file.
Let's find the $PNQBOZ*NBHF form in the AOT and add a new #VUUPO control to the form's
#VUUPO(SPVQ, which is located in the first tab of the "DUJPO1BOF control. Set the button's
properties as follows:
Property Value
Name
SaveAs
Text
Save as

Working with Data in Forms
[ 176 ]
Create a new method at the top level of the form:
QVCMJDWPJETBWF*NBHF

\
*NBHFJNH
'JMFOBNFOBNF
TUSUZQF
'JMF
JG
JNBHF$POUBJOFS
\
SFUVSO
^
JNHOFX*NBHF

JNHTFU%BUB
JNBHF$POUBJOFS
UZQF		TUS-XS
FOVNWBMVF
JNHTBWF5ZQF

OBNF8JO"1*HFU4BWF'JMF/BNF
FMFNFOUI8OE

<8JO"1*GJMF5ZQF
UZQF"MM'JMFT/BNFUZQF>
		
		
JG
OBNF
\
JNHTBWF*NBHF
OBNF
^
^
This method will present the user with the Save as dialog, allowing them to choose the
desired filename to save the current image. Note that the JNBHF$POUBJOFS form variable
holds image data. If it is empty, it means there is no image attached, and we do not run any
of the code. We also determine the loaded file type to make sure our Save as dialog shows
only files of that particular type, for example, JPEG.
Override the button's DMJDLFE
 method with the following code snippet to make sure
that the TBWF*NBHF
 method is executed once the user clicks on the button:
WPJEDMJDLFE

\
TVQFS

FMFNFOUTBWF*NBHF

^

Working with Data in Forms
[ 177 ]
Now, save all your changes and build your solution. To test, go to Account receivable |
Customers | All customers, click on the Image button, and you will find that a new Save as
button is available:
Use this button to save the stored image as a file:

Working with Data in Forms
[ 178 ]
Note that the $PNQBOZ*NBHF form is used system-wide and the new button is available
across the whole system now.
We do not recommend overlaying unless it's the only option. We urge you
to always try to use extensions, event handlers, and events for your
development to achieve any requirement rather than overlaying standard
objects. You may have found some recipes here with overlaying objects; all
of them just for illustration purposes, and to simplify the explanation of
the actual agenda of the recipe.

4
Building Lookups
In this chapter, we will cover the following recipes:
Creating an automatic lookup
Creating a lookup dynamically
Using a form to build a lookup
Building a tree lookup
Displaying a list of custom options
Displaying custom options in another way
Building a lookup based on the record description
Building the browse for folder lookup
Creating a color picker lookup
Introduction
Lookups are the standard way to display a list of possible selection values to the user, while
editing or creating database records. Normally, standard lookups are created automatically
by the system in Dynamics 365 for Finance and Operations and are based on the extended
data types and table setup. It is also possible to override the standard functionality by
creating your own lookups from the code or using the Dynamics 365 for Finance and
Operations forms.
In this chapter, we will cover various lookup types, such as file selector, color picker, or tree
lookup, as well as the different approaches to create them.

Building Lookups
[ 180 ]
Creating an automatic lookup
EDT (Extended Data Type) and table relation type lookups are the simplest lookups in
Dynamics 365 for Finance and Operations and can be created in seconds without any
programming knowledge. They are based on table relations and appear automatically. No
additional modifications are required.
This recipe will show you how to create a very basic automatic lookup using table relations.
To demonstrate this, we will add a new .FUIPEPGQBZNFOU column to the existing
Customer group form.
How to do it...
To create an automatic lookup, we can follow the following steps:
Create a new solution named $SFBUJOH"VUPNBUJD-PPLVQ and assign an
1.
appropriate package to it.
Find a $VTU(SPVQ table in AOT under application explorer, right-click the table,
2.
and select the option $SFBUF&YUFOTJPO to add it to the project and create a new
TUSJOH type field in the table with the following properties:
Property
Value
Name
PaymMode
ExtendedDataType CustPaymMode
Add the newly created field to the end of the 0WFSWJFX field group of the table.
3.
Save your object(s) and build the solution.
4.
To check the results, navigate to Accounts receivable | Setup | Customers |
5.
Customer groups and note the newly created Method of payment column with
the lookup:

Building Lookups
[ 181 ]
How it works...
The newly created 1BZN.PEF field is based on the $VTU1BZN.PEF extended data type and
therefore, it automatically inherits its relation. To follow the best practices, all relations must
be present on tables. We also add the newly created field to the table's 0WFSWJFX group to
make sure that the field automatically appears on the Customer group form. This relation
ensures that the field has an automatic lookup.
There's more...
The automatically generated lookup, in the preceding example, has only two columns--
.FUIPEPGQBZNFOU and %FTDSJQUJPO. Dynamics 365 for Finance and Operations allows
us to add more columns or change the existing columns with minimum effort by changing
various properties. Lookup columns can be controlled at several different places:
Relation fields, on either an extended data type or a table, are always shown on
lookups as columns.

Building Lookups
[ 182 ]
Fields defined in the table's 5JUMF'JFME and 5JUMF'JFME properties are also
displayed as lookup columns.
The first field of every table's index is displayed as a column.
The index fields and the 5JUMF'JFME and 5JUMF'JFME properties are in effect
only when the "VUP-PPLVQ field group of a table is empty. Otherwise, the fields
defined in the "VUP-PPLVQ group are displayed as lookup columns along with
the relation columns.
Duplicate columns are shown only once.
Now, to demonstrate how the "VUP-PPLVQ group can affect lookup columns, let us modify
the previous example by adding an additional field to this group. Let us customize and add
the 1BZN4VN#Z field to the "VUP-PPLVQ group on the $VTU1BZN.PEF5BCMF table in the
middle, between the 1BZN.PEF and /BNF fields. Now, the lookup has one more column
labeled Period:
It is also possible to add display methods to the lookup's column list. We can extend our
example by adding the QBZN"DDPVOU/BNF
 display method to the "VUP-PPLVQ group on
the $VTU1BZN.PEF5BCMF table right after 1BZN4VN#Z. Save your object and build the
project. Check the result now:

Building Lookups
[ 183 ]
Now, in this lookup, we can see the Account Name next to Period, but with the display
method in this lookup we don't have options to filter the records. Methods have limitations
to display only records, similar to earlier versions, of Dynamics 365 for Finance and
Operations.
Creating a lookup dynamically
Automatic lookups, mentioned in the previous recipe, are widely used across the system
and are very useful in simple scenarios. When it comes to showing different fields from
different data sources, applying various static or dynamic filters, or similar, some coding is
required. The current version of Dynamics 365 for Finance and Operations is flexible
enough that the developer can create custom lookups, either using the Dynamics 365 for
Finance and Operations forms or by running them dynamically from the X++ code.
This recipe will show how to dynamically build a runtime lookup from the code. In this
demonstration, we will modify the Vendor account lookup on the Customers form to allow
users to select only those vendors that use the same currency as the currently selected
customer.

Building Lookups
[ 184 ]
How to do it...
To create a lookup dynamically, we can follow the following steps:-
Create a new solution name $SFBUJOH%ZOBNJD-PPLVQ and assign an
1.
appropriate package to it.
Create a new extension class for the 7FOE5BCMF table and add it to the project.
2.
Use the following code in the class:
<&YUFOTJPO0G
UBCMF4US
7FOE5BCMF>
GJOBMDMBTT7FOE5BCMF@&YUFOTJPO
\
QVCMJDTUBUJDWPJEMPPLVQ7FOEPS#Z$VSSFODZ
'PSN$POUSPM@DBMMJOH$POUSPM
$VSSFODZ$PEF@DVSSFODZ
\
2VFSZRVFSZ
2VFSZ#VJME%BUB4PVSDFRCET
2VFSZ#VJME3BOHFRCS
4ZT5BCMF-PPLVQMPPLVQ
RVFSZOFX2VFSZ

RCETRVFSZBEE%BUB4PVSDF
UBCMF/VN
7FOE5BCMF
RCSRCETBEE3BOHF
GJFME/VN
7FOE5BCMF$VSSFODZ
RCSWBMVF
RVFSZWBMVF
@DVSSFODZ
MPPLVQ4ZT5BCMF-PPLVQOFX1BSBNFUFST
UBCMF/VN
7FOE5BCMF
@DBMMJOH$POUSPM
USVF
MPPLVQQBSN2VFSZ
RVFSZ
MPPLVQBEE-PPLVQ'JFME
GJFME/VN
7FOE5BCMF"DDPVOU/VN
USVF
MPPLVQBEE-PPLVQ'JFME
GJFME/VN
7FOE5BCMF1BSUZ
MPPLVQBEE-PPLVQ'JFME
GJFME/VN
7FOE5BCMF$VSSFODZ
MPPLVQQFSGPSN'PSN-PPLVQ

^
^
Now create a new extension class for the $VTU5BCMF form with the name
3.
$VTU5BCMF@&YUFOTJPO. Find form $VTU5BCMF and then, in the design, locate
the 7FOE"DDPVOU field at
$VTU5BCMF=%FTJHO=5BC=5BC1BHF%FUBJMT=5BC)FBEFS=5BC%FUBJMT=7FOEPS
=7FOEPS@7FOE"DDPVOU, copy its 0O-PPLVQ
 event, and paste it in an extension
class with the following code snippet:
<&YUFOTJPO0G
GPSN4US
$VTU5BCMF>

Building Lookups
[ 185 ]
GJOBMDMBTT$VTU5BCMF@&YUFOTJPO
\
<'PSN$POUSPM&WFOU)BOEMFS
GPSN$POUSPM4US
$VTU5BCMF
7FOEPS@7FOE"DDPVOU'PSN$POUSPM&WFOU5ZQF-PPLVQ>
QVCMJDWPJE7FOEPS@7FOE"DDPVOU@0O-PPLVQ
'PSN$POUSPMTFOEFS'PSN$POUSPM&WFOU"SHTF
\
7FOE5BCMFMPPLVQ7FOEPS#Z$VSSFODZ
TFOEFSUIJT$VTU5BCMF$VSSFODZ
'PSN$POUSPM$BODFMBCMF4VQFS&WFOU"SHTDBODFM4VQFS
FBT'PSN$POUSPM$BODFMBCMF4VQFS&WFOU"SHT
DBODFMTVQFS
UPQSFWFOUFSSPS
DBODFM4VQFS$BODFM4VQFS$BMM

^
^
To test this, navigate to Accounts receivable | Common | Customers | All
4.
customers, select any of the customers, and click on Edit in the action pane. Once
the Customers form is displayed, expand the Vendor account lookup located in
the Miscellaneous details tab page, under the Remittance group. The modified
lookup now has an additional column named Currency, and vendors in the list
will match the customer's currency. The following screenshot depicts this:

Building Lookups
[ 186 ]
How it works...
First, on the 7FOE5BCMF table, we create a new method that generates the lookup. This is
the most convenient place for such a method, taking into consideration that it may be
reused at a number of other places.
In this method, we first create a new query, which will be the base for lookup records. In
this query, we add a new data source based on the 7FOE5BCMF table and define a new range
based on the $VSSFODZ field.
Next, we create the actual lookup object and pass the query object through the
QBSN2VFSZ
 member method. The MPPLVQ object is created using the OFX1BSBNFUFST

constructor of the 4ZT5BCMF-PPLVQ class. It accepts the following three parameters:
The table ID, which is going to be displayed.
A reference to the form calling the control.
An optional CPPMFBO value, which specifies that the value in the control should
be preselected in the lookup. The default is USVF.
We use the BEE-PPLVQ'JFME
 method to add three columns--7FOEPSBDDPVOU, /BNF,
and $VSSFODZ. This method accepts the following parameters:
The ID of the field that will be displayed as a column.
An optional Boolean parameter that defines which column will be used as a
return value to the caller control upon user selection. Only one column can be
marked as a return value. In our case, it is vendor account.
Finally, we run the lookup by calling the QFSGPSN'PSN-PPLVQ
 method.
The last thing to do is to add some code to the MPPLVQ
 method of the VendAccount field
of the CustTable data source in the CustTable form. By replacing its TVQFS
 method with
our custom code, we have overridden the standard, automatically generated lookup, with
the custom lookup.

Building Lookups
[ 187 ]
There's more...
Suppose for some use case we need to show the vendor balance as well. We could achieve
this by using the method CBMBODF"MM$VSSFODZ on 7FOE5BCMF, which displays the vendor
balance. To do so, we could add the following code in the MPPLVQ7FOEPS#Z$VSSFODZ
method in the 7FOE5BCMF@&YUFOTJPO class before the QFSGPSN'PSN-PPLVQ
 method
call:
MPPLVQBEE-PPLVQ'JFME
GJFME/VN
7FOE5BCMF1BSUZ
MPPLVQBEE-PPLVQ'JFME
GJFME/VN
7FOE5BCMF$VSSFODZ
MPPLVQBEE-PPLVQ.FUIPE

UBCMF.FUIPE4US
7FOE5BCMFCBMBODF"MM$VSSFODZ
MPPLVQQFSGPSN'PSN-PPLVQ

Using a form to build a lookup
For the most complex scenarios, where you need some advance lookups with more options
on data filtration or selection; Dynamics 365 for Finance and Operations offers the
possibility to create and use a form as a lookup, by creating a new form.
Similar to forms, the form lookups support various features, such as tab pages, event
handling, complex logic, and so on. In this recipe, we will demonstrate how to create a
lookup using a form. As an example, we will modify the standard customer account lookup
to display only the customers who are not placed on hold for invoicing and delivery.
How to do it...
Add a new project and create a new form named $VTU-PPLVQ. Add a new data
1.
source with the following properties:
Property
Value
Name
CustTable
Table
CustTable
AllowCheck
No
AllowEdit
No
AllowCreate
No

Building Lookups
[ 188 ]
AllowDelete
No
OnlyFetchActive Yes
Right-click on Design and Add form Pattern -PPLVQ#BTJD on design.
2.
Add a new grid control to the form's design with the following properties:
3.
Property
Value
Name
Customers
ShowRowLabels No
DataSource
CustTable
Drag and drop "DDPVOU/VN and #MPDLFE fields from a $VTU5BCMF data source.
4.
Set property BVUPEFDMBSBUJPO to :FT.
Add a new 3FGFSFODF(SPVQ control to the grid with the following properties,
5.
right after "DDPVOU/VN:
Property
Value
Name
Name
DataSource
CustTable
ReferenceField Party
Add one more 4USJOH&EJU control to the grid with the following properties,
6.
right after the /BNF:
Property
Value
Name
Phone
DataSource
CustTable
DataMethod phone

Building Lookups
[ 189 ]
Override the form's JOJU
 method with the following code snippet:
7.
QVCMJDWPJEJOJU

\
TVQFS

FMFNFOUTFMFDU.PEF
$VTU5BCMF@"DDPVOU/VN
^
Override the form's SVO
 method with the following code snippet:
8.
QVCMJDWPJESVO

\
'PSN4USJOH$POUSPMDBMMJOH$POUSPM
CPPMFBOGJMUFS-PPLVQ
DBMMJOH$POUSPM4ZT5BCMF-PPLVQHFU$BMMFS4USJOH$POUSPM
FMFNFOUBSHT

GJMUFS-PPLVQ4ZT5BCMF-PPLVQGJMUFS-PPLVQ1SF3VO
DBMMJOH$POUSPM
$VTU5BCMF@"DDPVOU/VN
$VTU5BCMF@ET
TVQFS

4ZT5BCMF-PPLVQGJMUFS-PPLVQ1PTU3VO
GJMUFS-PPLVQ
DBMMJOH$POUSPMUFYU

$VTU5BCMF@"DDPVOU/VN
$VTU5BCMF@ET
^
Finally, override the JOJU
 method of the $VTU5BCMF data source with the
9.
following code snippet:
QVCMJDWPJEJOJU

\
2VFSZRVFSZ
2VFSZ#VJME%BUB4PVSDFRCET
2VFSZ#VJME3BOHFRCS
RVFSZOFX2VFSZ

RCETRVFSZBEE%BUB4PVSDF
UBCMF/VN
$VTU5BCMF
RCSRCETBEE3BOHF
GJFME/VN
$VTU5BCMF#MPDLFE
RCSWBMVF
RVFSZWBMVF
$VTU7FOEPS#MPDLFE/P
UIJTRVFSZ
RVFSZ
^

Building Lookups
[ 190 ]
The form in the Application Object Tree (AOT) will look similar to the following
10.
screenshot:
Locate the $VTU"DDPVOU extended data type in the AOT, create its extension with
11.
name $VTU"DDPVOU&YUFOTJPO, and change its property as follows:
Property
Value
FormHelp CustLookup
To test the results, navigate to Sales and marketing | Common | Sales orders |
12.
All sales orders and start creating a new sales order. Note that, now, the
Customer account lookup is different, and it includes only active customers:

Building Lookups
[ 191 ]
How it works...
Automatically generated lookups have a limited set of features and are not suitable in more
complex scenarios. In this recipe, we are creating a brand new form-based lookup, which
will replace the existing customer account lookup. The name of the newly created form is
$VTU-PPLVQ and it contains the -PPLVQ text at the end to make sure it can be easily
distinguished from other forms in the AOT.
In the form, we add a new data source and change its properties. We do not allow any data
updating by setting the "MMPX&EJU, "MMPX$SFBUF, and "MMPX%FMFUF properties to /P.
Security checks will be disabled by setting "MMPX$IFDL to /P. To increase the performance,
we set 0OMZ'FUDI"DUJWF to :FT, which will reduce the size of the database result set to
only the fields that are visible on the form. We also set the data source index to define initial
data sorting.

Building Lookups
[ 192 ]
Next, in order to make our form lookup look exactly like a standard lookup, we have to
adjust its layout. Therefore, we set its 'SBNF and 8JOEPX5ZQF properties to #PSEFS and
1PQVQ, respectively. This removes form borders and makes the form very similar to a
standard lookup. Then, we add a new grid control with four controls inside, which are
bound to the relevant $VTU5BCMF table fields and methods. We set the 4IPX3PX-BCFMT
property of the grid to /P to hide the grid's row labels.
After this, we have to define which form control will be used to return a value from the
lookup to the calling form. We need to specify the form control manually in the form's
JOJU
 method, by calling FMFNFOUTFMFDU.PEF
, with the name of the control as an
argument.
In the form's SVO
 method, we add some filtering, which allows the user to use the
BTUFSJTL () symbol to search for records in the lookup. For example, if the user types 
into the $VTUPNFSBDDPVOU control, the lookup will open automatically with all customer
accounts starting with 1. To achieve this, we use the GJMUFS-PPLVQ1SF3VO
 and
GJMUFS-PPLVQ1PTU3VO
 methods of the standard 4ZT5BCMF-PPLVQ class. Both these
methods require a calling control, which can be obtained by the
HFU$BMMFS4USJOH$POUSPM
 method of the same 4ZT5BCMF-PPLVQ class. The first
method reads the user input and returns USVF if a search is being performed, otherwise, it
returns GBMTF. It must be called before the TVQFS
 method in the form's SVO
 method,
and it accepts four arguments:
The DBMMJOH control on the parent form
The SFUVSOJOH control on the lookup form
The NBJOEBUBTPVSDF on the lookup form
An PQUJPOBMMJTU of other data sources on the lookup form, which are used in
the search
The GJMUFS-PPLVQ1PTU3VO
 method must be called after the TVQFS
 method in the
form's SVO
 method, and it also accepts four arguments:
A result value from the previously called GJMUFS-PPLVQ1SF3VO
 method
The user text specified in the calling control
The returning control on the lookup form
The lookup data source
The code in the $VTU5BCMF data source's JOJU
 method replaces the data source query
created by its TVQFS
 method with the custom one. Basically, here, we create a new 2VFSZ
object and change its range to include only active customers.

Building Lookups
[ 193 ]
The 'PSN)FMQ property of the $VTU"DDPVOU extended data type will make sure that this
form is opened every time the user opens the Customer account lookup.
See also
The Building a query object recipe in $IBQUFS, Processing Data
Building a tree lookup
The form's USFF controls are a user-friendly way of displaying a hierarchy of related
records, such as a company's organizational structure, inventory bill of materials, projects
with their subprojects, and so on. These hierarchies can also be displayed in the custom
lookups, allowing users to browse and select the required value in a more convenient way.
The Using a tree control recipe in $IBQUFS, Working with Forms, explained how to present
the budget model hierarchy as a tree in the Budget model form. In this recipe, we will reuse
the previously created #VEHFU.PEFM5SFF class and demonstrate how to build a budget
model tree lookup.
How to do it...
In the AOT, create a new form named #VEHFU.PEFM-PPLVQ. Set its design
1.
properties as follows:
Property
Value
Frame
Border
WindowType Popup
Add a new 5SFF control to the design with the following properties:
2.
Property Value
Name
ModelTree
Width
250

Building Lookups
[ 194 ]
Add the following line of code to the form's class declaration:
3.
#VEHFU.PEFM5SFFCVEHFU.PEFM5SFF
Override the form's JOJU
 method with the following code snippet:
4.
QVCMJDWPJEJOJU

\
'PSN4USJOH$POUSPMDBMMJOH$POUSPM
DBMMJOH$POUSPM4ZT5BCMF-PPLVQHFU$BMMFS4USJOH$POUSPM
UIJTBSHT

TVQFS

CVEHFU.PEFM5SFF#VEHFU.PEFM5SFFDPOTUSVDU
.PEFM5SFF
DBMMJOH$POUSPMUFYU

CVEHFU.PEFM5SFFCVJME5SFF

^
Override the NPVTF%CM$MJDL
 and NPVTF6Q
 methods of the .PEFM5SFF
5.
control with the following code snippet:
QVCMJDJOUNPVTF%CM$MJDL
JOU@Y
JOU@Z
JOU@CVUUPO
CPPMFBO@DUSM
CPPMFBO@TIJGU
\
JOUSFU
'PSN5SFF*UFNGPSN5SFF*UFN
#VEHFU.PEFMCVEHFU.PEFM
SFUTVQFS
@Y@Z@CVUUPO@DUSM@TIJGU
GPSN5SFF*UFNUIJTHFU*UFN
UIJTHFU4FMFDUJPO

TFMFDUGJSTU0OMZ4VC.PEFM*EGSPNCVEHFU.PEFM
XIFSFCVEHFU.PEFM3FD*EGPSN5SFF*UFNEBUB

FMFNFOUDMPTF4FMFDU
CVEHFU.PEFM4VC.PEFM*E
SFUVSOSFU
^
QVCMJDJOUNPVTF6Q
JOU@Y
JOU@Z
JOU@CVUUPO
CPPMFBO@DUSM
CPPMFBO@TIJGU
\
JOUSFU
SFUTVQFS
@Y@Z@CVUUPO@DUSM@TIJGU

Building Lookups
[ 195 ]
SFUVSO
^
The form will look similar to the following screenshot:
6.
In the AOT, open the #VEHFU.PEFM table and change its MPPLVQ#VEHFU.PEFM

7.
method with the following code snippet:
QVCMJDTUBUJDWPJEMPPLVQ#VEHFU.PEFM
'PSN4USJOH$POUSPM@DUSM
CPPMFBO@TIPX4UPQQFEGBMTF
\
"SHTBSHT
0CKFDUGPSN3VO
BSHTOFX"SHT

BSHTOBNF
GPSN4US
#VEHFU.PEFM-PPLVQ
BSHTDBMMFS
@DUSM
GPSN3VODMBTTGBDUPSZGPSN3VO$MBTT
BSHT
GPSN3VOJOJU

@DUSMQFSGPSN'PSN-PPLVQ
GPSN3VO
^

Building Lookups
[ 196 ]
To see the results, navigate to Budgeting | Common | Budget register entries |
8.
All budget register entries. Start creating a new entry by clicking on the Budget
register entry button in the action pane and expanding the Budget model
lookup:
How it works...
First, we create a new form named BudgetModelLookup, which we will use as a custom
lookup. We set its design's 'SBNF and 8JOEPX5ZQF to #PSEFS and 1PQVQ respectively, to
change the layout of the form so that it looks like a lookup. We also add a new 5SFF control
and set its width.

Building Lookups
[ 197 ]
In the form's class declaration, we define the #VEHFU.PEFM5SFF class, which we have
already created in the Using tree controls recipe in $IBQUFS, Working with Forms.
The code in the form's JOJU
 method builds the tree. Here, we create a new object of the
#VEHFU.PEFM5SFF type by calling the DPOTUSVDU
 constructor, which accepts two
arguments:
The 5SFF control, which represents the actual tree.
The #VEHFU model, which is going to be preselected initially. Normally, it is a
value of the calling control, which can be detected using the
HFU$BMMFS4USJOH$POUSPM
 method of the 4ZT5BCMF-PPLVQ application
class.
The code in NPVTF%CM$MJDL
 returns the user-selected value from the tree node
back to the calling control and closes the lookup.
Finally, the NPVTF6Q
 method has to be overridden to return 1 to make sure 
that the lookup does not close while the user expands or collapses the tree nodes.
See also
The Using a tree control recipe in $IBQUFS, Working with Forms
Displaying a list of custom options
Besides normal lookups, Dynamics 365 for Finance and Operations provides a number of
other ways to present the available data for user selection. It does not necessarily have to be
a record from the database; it can be a list of hardcoded options or some external data.
Normally, such lists are much smaller as opposed to those of the data-driven lookups, and
are used for very specific tasks.
In this recipe, we will create a lookup of several predefined options. We will use a job for
this demonstration.

Building Lookups
[ 198 ]
How to do it...
Add a new project and add a new 3VOOBCMF$MBTT named 1JDL-JTU:
1.
DMBTT1JDL-JTU
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
.BQDIPJDFT
TUSSFU
DIPJDFTOFX.BQ
5ZQFT*OUFHFS
5ZQFT4USJOH
DIPJDFTJOTFSU
"YBQUB
DIPJDFTJOTFSU
%ZOBNJDT"9
DIPJDFTJOTFSU
%ZOBNJDT"9
DIPJDFTJOTFSU
%ZOBNJDT"9
DIPJDFTJOTFSU
%ZOBNJDT"9
DIPJDFTJOTFSU
%ZOBNJDT
SFUQJDL-JTU
DIPJDFT$IPPTFWFSTJPO
JG
SFU
\
JOGP
TUS'NU
:PV	WFTFMFDUFEPQUJPO/PSFU
^
^
^
Save all your code, right-click on this new class, and click on 4FUBTTUBSUVQ
2.
PCKFDU. Now build your project.

Building Lookups
[ 199 ]
Run the project to view the results:
3.
Double-click on one of the options to show the selected option in the Infolog
4.
window:

Building Lookups
[ 200 ]
How it works...
The key element in this recipe is the global QJDL-JTU
 function. Lookups created using
this function are based on values stored in a map. In our example, we define and initialize a
new map. Then, we insert a few key-value pairs and pass the map to the QJDL-JTU

function. This function accepts three parameters:
A map that contains lookup values
A column header, which is not used here
A lookup title
The function that displays values from the map returns the corresponding keys, once the
option is selected.
There's more...
The global QJDL-JTU
 function can basically display any list of values. Besides that,
Dynamics 365 for Finance and Operations also provides a number of other global lookup
functions, which can be used in more specific scenarios. Here are a few of them:
QJDL%BUB"SFB
: This shows a list of Dynamics 365 for Finance and Operations
companies.
QJDL6TFS(SPVQT
: This shows a list of user groups in the system.
QJDL6TFS
: This shows a list of Dynamics 365 for Finance and Operations
users.
QJDL5BCMF
: This shows all Dynamics 365 for Finance and Operations tables.
QJDL'JFME
: This shows table fields. The table number has to be specified as an
argument for the function.
QJDL$MBTT
: This shows a list of Dynamics 365 for Finance and Operations
classes.
Displaying custom options in another way
The global system functions, such as QJDL-JTU
 and QJDL6TFS
, allow developers to
build various lookups displaying a list of custom options. Besides that, the standard
Dynamics 365 for Finance and Operations application contains a few more useful functions,
allowing us to build more complex lookups of custom options.

Building Lookups
[ 201 ]
One of the custom functions is called TFMFDU4JOHMF
, and it provides the user with a list
of options. It also displays a checkbox next to each option that allows users to select the
option. To demonstrate this, we will create a new class that shows the usage of these
functions.
How to do it...
Add a new project in the solution name %JTQMBZ$VTUPN0QUJPOT"OPUIFS8BZ
1.
Find a 4ZT-JTU4FMFDU form in AOT and select customize to add it in the project.
2.
Add new method TFMFDU4JOHMF and add the following code:
3.
QVCMJDWPJETFMFDU4JOHMF

\
TJOHMF4FMFDUUSVF
^
Now select project and add a new item, a new Runnable class (Job) named
4.
4ZT-JTU4FMFDU4JOHMF:
DMBTT4ZT-JTU4FMFDU4JOHMF
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
DPOUBJOFSDIPJDFT
DPOUBJOFSIFBEFST
DPOUBJOFSTFMFDUJPO
DPOUBJOFSTFMFDUFE
CPPMFBOPL
DIPJDFT<
<=O"YBQUBGBMTF>
<=O%ZOBNJDT"9GBMTF>
<=O%ZOBNJDT"9GBMTF>
<=O%ZOBNJDT"9GBMTF>
<3=O%ZOBNJDT"93GBMTF>
<3=O%ZOBNJDT"93USVF>
<=O%ZOBNJDTGPSPQFSBUJPOTUSVF>>
IFBEFST<7FSTJPO%FTDSJQUJPO>
TFMFDUJPO4ZT-JTU4FMFDU4JOHMFTFMFDU4JOHMF
$IPPTFWFSTJPO
1MFBTFTFMFDU%ZOBNJDT"9WFSTJPO

Building Lookups
[ 202 ]
DIPJDFT
IFBEFST
<PLTFMFDUFE>TFMFDUJPO
JG
PLDPO-FO
TFMFDUFE
\
JOGP
TUS'NU
:PV	WFTFMFDUFEPQUJPO/P
DPO1FFL
TFMFDUFE
^
^
TUBUJDDMJFOUDPOUBJOFSTFMFDU4JOHMF
$BQUJPO@DBQUJPO
TUS@JOGP"OJOGPUFYUEJTQMBZFEJOUIFUPQPGUIFGPSN
DPOUBJOFS@DIPJDFT
DPOUBJOFS@IFBEFSTDPO/VMM
*GOVMMUIFMJTUWJFXJT
VTFE
0CKFDU@DBMMFSOVMM

\
"SHTBSHT
'PSN3VOGPSN3VO
0CKFDUPCK
DPOUBJOFSTFMFDUFE
BSHTOFX"SHT
GPSN4US
4ZT-JTU4FMFDU
BSHTDBMMFS
@DBMMFS
GPSN3VODMBTTGBDUPSZGPSN3VO$MBTT
BSHT
GPSN3VOJOJU

GPSN3VOEFTJHO
WJTJCMF
USVF
PCKGPSN3VO
PCKJOGPUYU
@JOGP
PCKDIPJDFT
@DIPJDFT
PCKIFBEFST
@IFBEFST
PCKTFMFDU4JOHMF

GPSN3VOSVO

GPSN3VOXBJU

TFMFDUFEPCKTFMFDUFE

JG
DPO-FO
TFMFDUFE 
\
SFUVSO<GPSN3VODMPTFE0L
<DPO1FFL
TFMFDUFE>>
^
SFUVSO<GPSN3VODMPTFE0L
DPO/VMM
>
^

Building Lookups
[ 203 ]
Run the job to display the options:
5.
Select any of the options, click on the OK button, and note that your choice is
6.
displayed in the Infolog window shown in the following screenshot:

Building Lookups
[ 204 ]
How it works...
We start by defining the choices variable and setting its values. The variable is a container
and it holds container values, where each container inside the parent container is made of
three elements and represents one selectable option in the list:
The first element is text displayed on the lookup. By default, in the lookup, only
one column is displayed, but it is possible to define more columns, simply by
separating the texts using the new line symbol.
The second element is the number of an item in the list. This value is returned
from the lookup.
The third value specifies whether the option is marked by default.
Now, when the list values are ready, we call the TFMFDU4JOHMF
 function to build the
actual lookup. This function accepts five arguments:
The window title
The lookup description
A container of list values
A container representing column headings
An optional reference to a caller object
The TJOHMF4FMFDU
 function returns a container of two elements:
USVF or GBMTF depending whether the lookup was closed using the OK button
or not
The numeric value of the selected option
There's more...
You may notice that the lookup, which was created using the TJOHMF4FMFDU
 method,
allows chooses only one option from the list. There is another similar function named
TFMFDU.VMUJQMF
, which is exactly the same except that the user can select multiple
options from the list. The following code snippet demonstrates its usage:
DMBTT4ZT-JTU4FMFDU.VMUJQMF
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 

Building Lookups
[ 205 ]
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
DPOUBJOFSDIPJDFT
DPOUBJOFSIFBEFST
DPOUBJOFSTFMFDUJPO
DPOUBJOFSTFMFDUFE
CPPMFBOPL
DIPJDFT<
<=O"YBQUBGBMTF>
<=O%ZOBNJDT"9GBMTF>
<=O%ZOBNJDT"9GBMTF>
<=O%ZOBNJDT"9GBMTF>
<3=O%ZOBNJDT"93GBMTF>
<3=O%ZOBNJDT"93USVF>
<=O%ZOBNJDTGPSPQFSBUJPOTUSVF>>
IFBEFST<7FSTJPO%FTDSJQUJPO>
TFMFDUJPO4ZT-JTU4FMFDU.VMUJQMFTFMFDU.VMUJQMF
$IPPTFWFSTJPO
1MFBTFTFMFDU%ZOBNJDT"9WFSTJPO
DIPJDFT
IFBEFST
<PLTFMFDUFE>TFMFDUJPO
JG
PLDPO-FO
TFMFDUFE 
\
GPS
JOUJJDPO-FO
TFMFDUFEJ
\
JOGP
TUS'NU
:PV	WFTFMFDUFEPQUJPO/P
DPO1FFL
TFMFDUFEJ
^
^
^
3FUVSOTDPOUBJOFSXJUIUIFTUBUVTPGIPXUIFGPSNJT
DMPTFEQMVTUIFTFMFDUFEJET
TUBUJDDMJFOUDPOUBJOFSTFMFDU.VMUJQMF
$BQUJPO@DBQUJPO
TUS@JOGP"OJOGPUFYUEJTQMBZFEJOUIFUPQPGUIFGPSN
DPOUBJOFS@DIPJDFT
DPOUBJOFS@IFBEFSTDPO/VMM
*GOVMMUIFMJTUWJFX
JTVTFE
0CKFDU@DBMMFSOVMM

\
"SHTBSHT
'PSN3VOGPSN3VO
0CKFDUPCK
BSHTOFX"SHT
GPSN4US
4ZT-JTU4FMFDU
BSHTDBMMFS
@DBMMFS

Building Lookups
[ 206 ]
GPSN3VODMBTTGBDUPSZGPSN3VO$MBTT
BSHT
GPSN3VOJOJU

GPSN3VOEFTJHO
WJTJCMF
USVF
PCKGPSN3VO
PCKJOGPUYU
@JOGP
PCKDIPJDFT
@DIPJDFT
PCKIFBEFST
@IFBEFST
GPSN3VOSVO

GPSN3VOXBJU

SFUVSO<GPSN3VODMPTFE0L
PCKTFMFDUFE
>
^
^
Now, in the lookup, it is possible to select multiple options:
Note that in this case, the returned value is a container holding the selected options.

Building Lookups
[ 207 ]
Building a lookup based on the record
description
Normally, data lookups in Dynamics 365 for Finance and Operations display a list of
records where the first column always contains a value, which is returned to a calling form.
The first column in the lookup normally contains a unique record identification value,
which is used to build relations between tables. For example, the Customer lookup displays
the customer account number, the customer name, and some other fields; the Inventory
item lookup displays the item number, the item name, and other fields.
In some cases, the record identifier can be not so informative. For example, it is much more
convenient to display a person's name versus its number. In the standard application, you
can find a number of places where the contact person is displayed as a person's name, even
though the actual table relation is based on the contact person's ID.
In this recipe, we will create such a lookup. We will replace the Vendor group selection
lookup on the Vendors form to show group description, instead of group ID.
How to do it...
In the AOT, create a new 4USJOH extended data type with the following
1.
properties:
Property Value
Name
VendGroupDescriptionExt
Label
Group
Extends
Description
Open the 7FOE5BCMF table and create a new method with the following code
2.
snippet:
QVCMJDFEJU7FOE(SPVQ%FTDSJQUJPO&YUFEJU7FOE(SPVQ
CPPMFBO@TFU
7FOE(SPVQ%FTDSJQUJPO&YU@HSPVQ
\
7FOE(SPVQWFOE(SPVQ
JG
@TFU
\
JG
@HSPVQ

Building Lookups
[ 208 ]
\
JG
7FOE(SPVQFYJTU
@HSPVQ
\
UIJT7FOE(SPVQ@HSPVQ
^
FMTF
\
TFMFDUGJSTU0OMZ7FOE(SPVQGSPNWFOE(SPVQ
XIFSFWFOE(SPVQ/BNF@HSPVQ
UIJT7FOE(SPVQWFOE(SPVQ7FOE(SPVQ
^
^
FMTF
\
UIJT7FOE(SPVQ		
^
^
SFUVSO7FOE(SPVQOBNF
UIJT7FOE(SPVQ
^
In the AOT, find the 7FOE5BCMF form, locate the 1PTUJOHHSPVQ control inside
3.
MainTab | TabPageDetails | Tab | TabGeneral | UpperGroup | Posting , and
modify its properties as follows:
Property
Value
DataGroup
In the same form, in the 1PTUJOH group, modify the 1PTUJOH@7FOE(SPVQ
4.
control as follows:
Property
Value
DataField
DataMethod editVendGroup
Override the MPPLVQ
 method of the 1PTUJOH@7FOE(SPVQ control with the
5.
following code snippet:
QVCMJDWPJEMPPLVQ

\
UIJTQFSGPSN5ZQF-PPLVQ
FYUFOEFE5ZQF/VN
7FOE(SPVQ*E
^

Building Lookups
[ 209 ]
To check the results, navigate to Accounts payable | Common | Vendors | All
6.
vendors, select any record, and click on the Edit button in the action pane. In the
opened form, check the newly created lookup on the (SPVQ control, located in the
General tab of the page:
How it works...
First, we create a new extended data type, which we will use as the basis for the 7FOEPS
HSPVQTFMFDUJPO control. The type extends the existing %FTDSJQUJPO extended data type
as it has to be of the same size as the vendor group name. It will also have the same label as
7FOE(SPVQ*E because it is going to replace the existing (SPVQ control on the form.
Next, we create a new FEJU method, which is used to show the group description instead
of the group ID on the form. It also allows changing the control value.

Building Lookups
[ 210 ]
The FEJU method is created on the 7FOE5BCMF table, it is the most convenient place for
reuse and it uses the newly created extended data type. This ensures that the label of the
VTFS control stays the same. The method accepts two arguments, as this is a mandatory
requirement for the FEJU methods. The first argument defines whether the control was
modified by the user, and if yes, the second argument holds the modified value. In this
recipe, the second value can be either HSPVQ*% or HSPVQEFTDSJQUJPO. The value will be
group ID if the user selects this value from the lookup. It will be group description if the
user decides to manually type the value into the control. We use the extended data type,
which is bigger in size, that is, the 7FOE(SPVQ%FTDSJQUJPO&YU type. The method returns a
vendor group name, which is shown on the form.
Next, we need to modify the 7FOE5BCMF form. We change the existing vendor group ID
control to use the newly created FEJU method. By doing this, we make the control unbound
and therefore lose the standard lookup functionality. To correct this, we override the
MPPLVQ
 method on the control. Here, we use the QFSGPSN5ZQF-PPLVQ
 method to
restore the lookup functionality.
There's more...
In the previous example, you may notice that the lookup does not find the currently
selected group. This is because the system tries to search group ID by group description.
This section will show how to solve this issue.
First, we have to create a new form named VendGroupLookup, that acts as a lookup. Add
a new data source to the form, with the following properties:
Property
Value
Name
VendGroup
Table
VendGroup
Index
GroupIdx
AllowCheck
No
AllowEdit
No
AllowCreate
No
AllowDelete
No
OnlyFetchActive Yes

Building Lookups
[ 211 ]
Change the properties of the form's design as follows:
Property
Value
Frame
Border
WindowType Popup
Add a new (SJE control to the form's design with the following properties:
Property
Value
Name
VendGroups
ShowRowLabels No
DataSource
VendGroup
DataGroup
Overview
Several new controls will appear in the grid automatically. Change the properties of the
7FOE(SPVQT@7FOE(SPVQ control as follows:
Property
Value
AutoDeclaration Yes
Override the form's JOJU
 and SVO
 methods with the following code snippet,
respectively:
QVCMJDWPJEJOJU

\
TVQFS

FMFNFOUTFMFDU.PEF
7FOE(SPVQT@7FOE(SPVQ
^
QVCMJDWPJESVO

\
7FOE(SPVQ*EHSPVQ*E
HSPVQ*EFMFNFOUBSHT
MPPLVQ7BMVF

TVQFS

7FOE(SPVQ@ETGJOE7BMVF
GJFME/VN
7FOE(SPVQ7FOE(SPVQHSPVQ*E
^

Building Lookups
[ 212 ]
The key element here is the GJOE7BMVF
 method in the form's SVO
 method. It places the
cursor on the currently selected vendor group record. The group ID is retrieved from the
argument's object using the MPPLVQ7BMVF
 method.
In the project, the form design will look similar to the following screenshot:
Next, we need to create a new TUBUJD method on the 7FOE(SPVQ table, which opens the
new lookup form:
QVCMJDTUBUJDWPJEMPPLVQ7FOEPS(SPVQ'PSN
'PSN4USJOH$POUSPM@DBMMJOH$POUSPM
7FOE(SPVQ*E@HSPVQ*E
\
'PSN3VOGPSN3VO
"SHTBSHT
BSHTOFX"SHT

BSHTOBNF
GPSN4US
7FOE(SPVQ-PPLVQ
BSHTMPPLVQ7BMVF
@HSPVQ*E
GPSN3VODMBTT'BDUPSZGPSN3VO$MBTT
BSHT
GPSN3VOJOJU

@DBMMJOH$POUSPMQFSGPSN'PSN-PPLVQ
GPSN3VO
^
Here, we use the GPSN3VO$MBTT
 method of the global DMBTT'BDUPSZ object. Note that
here we pass the group ID to the form through the "SHT object.
The final touch is to change the code in the MPPLVQ
 method of the
7FOE(SPVQT@7FOE(SPVQ control on the 7FOE5BCMF form:
QVCMJDWPJEMPPLVQ

\
7FOE(SPVQMPPLVQ7FOEPS(SPVQ'PSN
UIJT7FOE5BCMF7FOE(SPVQ
^

Building Lookups
[ 213 ]
Now, when you open the Vendors form, make sure that the current vendor group in the
Group lookup is preselected correctly:
Building the browse for folder lookup
In Dynamics 365 for Finance and Operations, file reading or saving is a very common
operation. Normally, for non-automated operations, the system prompts the user for file
input.
This recipe will demonstrate how the user can be presented with the file browse dialog box
in order to choose the files in a convenient way.
Folder browsing lookups can be used when the user is required to specify a local or a
network folder, to store or retrieve external files. Such lookups are generated in Dynamics
365 for Finance and Operations using the 'JMFVQMPBE control.
In this recipe, we will learn how to create a lookup for folder browsing. As an example, we
will create a new field and control named %PDVNFOUT on the Vendor parameters form,
which will allow us to store a folder path.

Building Lookups
[ 214 ]
How to do it...
Create a new project. Open AOT, add a 7FOE1BSBNFUFST table for
1.
customization, and create a new field with the following properties:
Property
Value
Type
String
Name
DocumentPath
Label
Documents
ExtendedDataType FilePath
Add the newly created field to the bottom of the table's (FOFSBM field group.
2.
In AOT, find form 7FOE1BSBNFUFST and add it to the project using the
3.
customize option.
Select form and datasource 7FOE1BSBNFUFST and select the 3FTUPSF option.
4.
Add a new 'JMF6QMPBE$POUSPM next to the Document path with the following
5.
properties:

Building Lookups
[ 215 ]
After restore, the form design should look as follows:
6.
Next, open the 7FOE1BSBNFUFST form and change the following methods:
7.
JOJU

DMPTF0L

Declare a variable in the JOJU method as follows:
8.
'JMF6QMPBEVQMPBE$POUSPM
Add the following lines in the JOJU
 method:
9.
VQMPBE$POUSPMGJMFVQMPBE$POUSPM
VQMPBE$POUSPMOPUJGZ6QMPBE$PNQMFUFE
FWFOUIBOEMFS
'JMF6QMPBE$POUSPMVQMPBE$PNQMFUFE

Building Lookups
[ 216 ]
Add new method DMPTF0L
 on the 7FOE1BSBNFUFST form as follows:
10.
QVCMJDWPJEDMPTF0L

\
'JMF6QMPBEVQMPBE$POUSPM
VQMPBE$POUSPM'JMF6QMPBE$POUSPM
VQMPBE$POUSPMOPUJGZ6QMPBE$PNQMFUFE
FWFOUIBOEMFS
'JMF6QMPBE$POUSPMVQMPBE$PNQMFUFE
TVQFS

^
Add a new method on 'JMF6QMPBE$POUSPM and add OFXDPEF:
11.
QVCMJDWPJEVQMPBE$PNQMFUFE

\
'JMF6QMPBE5FNQPSBSZ4UPSBHF3FTVMUGJMF6QMPBE3FTVMU
'JMF6QMPBE$POUSPMHFU'JMF6QMPBE3FTVMU

JG
GJMF6QMPBE3FTVMUOVMM
GJMF6QMPBE3FTVMUHFU6QMPBE4UBUVT

\
7FOE1BSBNFUFST%PDVNFOU1BUI
GJMF6QMPBE3FTVMUHFU'JMF/BNF

^
^
Build and synchronize the project.
12.
As a result, we will be able to select and store a text file in the Accounts
13.
receivables | Setup | Accounts receivables parameters form in the Upload file
field under the General tab page:

Building Lookups
[ 217 ]
In the preceding screen, when you click on the Upload button under the General
14.
group, a dialog opens up where we need to choose the file to upload, as shown in
the following screenshot:

Building Lookups
[ 218 ]
How it works...
In this recipe, we first create a new field to store the file location. We use the 'JMFQBUI
extended data type. We also add this field to the field group in the table to ensure that it is
displayed on the form automatically. A 'JMFVQMPBE control is added to handle file
upload events on the form.
The following form methods are called by the GJMFVQMPBE control and must be present on
the caller form:
The VQMPBE$PNQMFUFE
 method contains code to get the file path and place it
in the %PDVNFOU1BUI field
The JOU
 and DMPTF0,
 method delegates the VQMPBE$PNQMFUFE
 method
There's more...
Additionally, if we want to select a file of a certain type, then we can easily go on
'JMF6QMPBE$POUSPM, look at its properties, and find 'JMF5ZQFT"DDFQUFE. We could
select UYU as shown in the following screenshot:

Building Lookups
[ 219 ]
This would make our browse folder lookup as follows, and would by default allow us to
select a UYU file:
Creating a color picker lookup
In Dynamics 365 for Finance and Operations, the color selection dialog boxes are used in
various places, allowing the user to select and store a color code in a table field. Then the
stored color code can be used in various places to color data records, change form
backgrounds, set colors for various controls, and so on.
In this recipe, we will create a color lookup. For demonstration purposes, we will add an
option to set a color for each legal entity in the system.

Building Lookups
[ 220 ]
How to do it...
In the AOT, open the $PNQBOZ*OGP table and create a new field with the
1.
following properties:
Property
Value
Type
Integer
Name
CompanyColor
ExtendedDataType CCColor
Open the 0.-FHBM&OUJUZ form, locate the 5PQ1BOFM group in Design | Tab |
2.
General, and add a new *OU&EJU control with the following properties to the
bottom of the group:
Property
Value
Name
CompanyColor
AutoDeclaration Yes
LookupButton
Always
ShowZero
No
Label
Company color
In the same form, create a new method with the following code snippet in the
3.
$PNQBOZ*OGP data source:
QVCMJDFEJU$$$PMPSFEJU$PNQBOZ$PMPS
CPPMFBO@TFU
$PNQBOZ*OGP@DPNQBOZ*OGP
$$$PMPS@DPMPS
\
JG
@DPNQBOZ*OGP$PNQBOZ$PMPS
\
$PNQBOZ$PMPSCBDLHSPVOE$PMPS
@DPNQBOZ*OGP$PNQBOZ$PMPS
^
FMTF
\
$PNQBOZ$PMPSCBDLHSPVOE$PMPS
8JO"1*3(#JOU

^
$PNQBOZ$PMPSGPSFHSPVOE$PMPS
$PNQBOZ$PMPSCBDLHSPVOE$PMPS

SFUVSO@DPNQBOZ*OGP$PNQBOZ$PMPS

Building Lookups
[ 221 ]
^
Update the properties of the newly created $PNQBOZ$PMPS control as follows:
4.
Property
Value
DataSource
CompanyInfo
DataMethod editCompanyColor
On the same control, override its MPPLVQ
 method with the following code
5.
snippet:
QVCMJDWPJEMPPLVQ

\
JOUSFE
JOUHSFFO
JOUCMVF
JOUDPMPSUIJTWBMVF

DPMPS$PMPS4FMFDUJPOTFMFDU$PMPS
UIJTDPMPS
$PNQBOZ*OGP$PNQBOZ$PMPSDPMPS
UIJTWBMVF
DPMPS
UIJTCBDLHSPVOE$PMPS
DPMPS
^
To test the results, navigate to Organization administration |Organization |
6.
Legal entities and note the newly created Company color lookup:

Building Lookups
[ 222 ]
How it works...
Dynamics 365 for Finance and Operations does not have a special control to select colors.
Therefore, we have to create a fake control, which is presented to the user as a color
selection.
Colors in Dynamics 365 for Finance and Operations are stored as integers, so we first create
a new *OUFHFS field on the $PNQBOZ*OGP table. On the form, we create a new control,
which will display the color. The created control does not have any automatic lookup and
therefore it does not have the lookup button next to it. We have to force the button to
appear by setting the control's -PPLVQ#VUUPO property to "MXBZT.
Next, we create a OFXFEJU method, which is then set on the created control as a EBUB
method. This method is responsible for changing the control's background to match the
stored color. This gives an impression to the user that the chosen color was saved. The
background is set to XIJUF if no value is present. The method always returns the value 
because we do not want to show the actual color code in it. The control's 4IPX;FSP
property is set to /P to ensure that even the returned  is not displayed. In this way, we
create a control that looks like a real DPMPSTFMFDUJPO control.
The last thing to do is to override the control's MPPLVQ
 method with the code that invokes
the color selection dialog box. Here, we use the TFMFDU$PMPS method of the
$PMPS4FMFDUJPO class to convert the current control's background color into a red-green-
blue component set. This set is then passed to the WBMVF
 method to make sure that the
currently set color is selected on the lookup initially. The TFMFDU$PMPS
 method is the
NBJO method, which invokes the lookup. It accepts the following arguments:
The current window handle
A CJOBSZPCKFDU representing up to 16 custom colors
This method returns an integer code of the color components, which has to be converted
back to a numeric value in order to store it in the table field.

5
Processing Business Tasks
In this chapter, we will cover the following recipes:
Using a segmented entry control
Creating a general journal
Posting a general journal
Processing a project journal
Creating and posting a ledger voucher
Changing an automatic transaction text
Creating a purchase order
Posting a purchase order
Creating a sales order
Posting a sales order
Creating an electronic payment format
Introduction
In Dynamics 365 for Finance and Operations, various business operations, such as creating
financial journals, posting sales orders, and generating vendor payments are performed
from the user interface by users on a periodic basis. For developers, it is very important to
understand how it works internally in new Dynamics 365 for Finance and Operations so
that the logic can be used to design and implement new customized business logic.

Processing Business Tasks
[ 224 ]
This chapter will explain how various Dynamics 365 business operations can be performed
through the code. We will discuss how to perform different operations on various journals,
sales order, purchase orders, and so on. This chapter also explains how to work with the
ledger voucher object and how to enhance the setup of the automatically-generated
transaction texts. Posting purchase and sales orders and changing business document
layout per company are also discussed here. This chapter includes other features, such as
creating a new electronic payment format and controlling the display of inventory
dimensions.
Using a segmented entry control
In Dynamics 365 for Finance and Operations, segmented entry control can simplify the task
of entering complex account and dimension combinations. The control consists of a
dynamic number of elements, named segments. The number of segments may vary
depending on the setup, and their lookup values may depend on the values specified in
other segments in the same control. The segmented entry control always uses the controller
class, which handles the entry and display in the control.
In this recipe, we will show you how a segmented entry control can be added to a form. In
this demonstration, we will add a new -FEHFSBDDPVOU control to the general ledger
parameters form, assuming that the control can be used as a default ledger account for
various functions. The example does not make much sense in practice, but it is perfectly
suitable to demonstrate the usage of the segmented entry control.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new extension of the -FEHFS1BSBNFUFST table in your project and
1.
create a new *OU type field with the following properties (click on Yes to
automatically add a foreign key relationship once you are asked):
Property
Value
Name
LedgerDimension
ExtendedDataType LedgerDimensionAccount
Add the newly created field to the (FOFSBM group in the table.
2.

Processing Business Tasks
[ 225 ]
Find the table's relation, named %JNFOTJPO"UUSJCVUF7BMVF$PNCJOBUJPO, and
3.
change its property, as follows:
Property
Value
UseDefaultRoleNames No
In the project, add the -FEHFS1BSBNFUFST form and declare the following
4.
variables in class declaration:
.BJO"DDPVOU3FD*EDVSSFOU.BJO"DDPVOU*E
.BJO"DDPVOU3FD*EQSFWJPVT.BJO"DDPVOU*E
.BJO"DDPVOU3FD*EDVSSFOU0GGTFU.BJO"DDPVOU*E
%JNFOTJPO"UUSJCVUF3FD*ENBJO"DDPVOU%JN"UUS
-FEHFS+PVSOBM&OHJOFMFEHFS+PVSOBM&OHJOF
In the same form, find the (FOFSBM@-FEHFS%JNFOTJPO segmented entry control
5.
by going to Tab | LedgerTab | LedgerTabFastTab | GeneralTabPage | General,
and then change the field properties:
Property
Value
Auto Declaration
Yes
Controller class
DimensionDynamicAccountController
Include Financial accounts Yes
Is default account
False
Now override three of its methods with the following code snippet:
6.
QVCMJDWPJEPO4FHNFOU$IBOHFE
%JNFOTJPO$POUSPM4FHNFOU@TFHNFOU
\
JG
@TFHNFOUQBSN%JNFOTJPO"UUSJCVUF
3FD*E
NBJO"DDPVOU%JN"UUS
\
QSFWJPVT.BJO"DDPVOU*EDVSSFOU.BJO"DDPVOU*E
^
TVQFS
@TFHNFOU
MFEHFS+PVSOBM&OHJOF
-FEHFS+PVSOBM&OHJOFDPOTUSVDU
-FEHFS+PVSOBM5ZQF%BJMZ
FMFNFOU
MFEHFS+PVSOBM&OHJOFMFEHFS+PVSOBM5BCMF

FMFNFOUBSHT
SFDPSE

^

Processing Business Tasks
[ 226 ]
Add the following lines of code at the bottom of the form's JOJU
 method
7.
before TVQFS
:
NBJO"DDPVOU%JN"UUS
%JNFOTJPO"UUSJCVUFHFU8FMM,OPXO%JNFOTJPO"UUSJCVUF

%JNFOTJPO"UUSJCVUF5ZQF.BJO"DDPVOU
In the BDUJWF
 method of EBUBTPVSDF-FEHFS1BSBNFUFST, add the
8.
following line of code:
DVSSFOU.BJO"DDPVOU*E
.BJO"DDPVOUHFU.BJO"DDPVOU3FD*E'SPN-FEHFS%JNFOTJPO

-FEHFS1BSBNFUFST-FEHFS%JNFOTJPO
QSFWJPVT.BJO"DDPVOU*EDVSSFOU.BJO"DDPVOU*E
Add the %JNFOTJPO)JFSBSDIZ)FMQFS class to the project and add a few lines of
9.
code in the HFU)JFSBSDIZ5ZQF#Z"DDPVOU5ZQF
method at line number 442
under DBTFFOVN/VN
-FEHFS+PVSOBM"$5ZQF
EFGBVMU
SFUVSO%JNFOTJPO)JFSBSDIZ5ZQF"DDPVOU4USVDUVSF
To test the results, navigate to General ledger | Setup | General ledger
10.
parameters and notice the newly created -FEHFSBDDPVOU control, which allows
you to select and save the main account and a number of financial dimensions, as
shown in the following screenshot:

Processing Business Tasks
[ 227 ]
How it works...
We start the recipe by creating a new field in the -FEHFS1BSBNFUFST table. The field
extends the -FEHFS%JNFOTJPO"DDPVOU extended data type in order to ensure that the
segmented entry control appears automatically, once this field is added to the user
interface. We also add the newly created field to one of the table's groups in order to make
sure that it appears on the form automatically.
Next, we have to modify the -FEHFS1BSBNFUFST form. In its class declaration and the
JOJU
 method, we define and instantiate the -FEHFS%JNFOTJPO"DDPVOU$POUSPMMFS
class, which handles the events raised by the segmented entry control. The combination of
the class and the control allows the user to see a dynamic number of segments, based on the
system configuration.
Then, we override the following methods in the control:
MPBE"VUP$PNQMFUF%BUB
: This retrieves the autocompleted data
MPBE4FHNFOUT
: This loads the value stored in the table field into the control
TFHNFOUFE7BMVF$IBOHFE
: This updates the controller class when the value of
the control is changed by the user
Lastly, we override the following methods in the data source field:
SFTPMWF3FGFSFODF
: This finds the ledger account record specified by the user
KVNQ3FG
: This enables the View details link in the control's right-click context
menu
WBMJEBUF
: This performs user input validation
There's more...
In this section, we will discuss how the input of the segmented entry control can be
simulated from the code. It is very useful when migrating or importing data into the
system. In the Dynamics Project, add the %JNFOTJPO"UUSJCVUF7BMVF$PNCJOBUJPO table
and create a new method with the following code snippet:
QVCMJDTUBUJD-FEHFS%JNFOTJPO"DDPVOUHFU-FEHFS%JNFOTJPO
.BJO"DDPVOU/VN@NBJO"DDPVOU*E
DPOUBJOFS@EJNFOTJPOT
DPOUBJOFS@WBMVFT
\
.BJO"DDPVOUNBJO"DDPVOU

Processing Business Tasks
[ 228 ]
%JNFOTJPO)JFSBSDIZEJN)JFS
-FEHFS4USVDUVSFMFEHFS4USVDU
.BQEJN4QFD
/BNFEJN/BNF
/BNFEJN7BMVF
%JNFOTJPO"UUSJCVUFEJN"UUS
%JNFOTJPO"UUSJCVUF7BMVFEJN"UUS7BMVF
-JTUEJN4PVSDFT
%JNFOTJPO%FGBVMUJOH&OHJOFEJN&OH
JOUJ
NBJO"DDPVOU.BJO"DDPVOUGJOE#Z.BJO"DDPVOU*E
@NBJO"DDPVOU*E
JG
NBJO"DDPVOU3FD*E
\
SFUVSO
^
TFMFDUGJSTU0OMZ3FD*EGSPNEJN)JFS
XIFSFEJN)JFS4USVDUVSF5ZQF
%JNFOTJPO)JFSBSDIZ5ZQF"DDPVOU4USVDUVSF
EJN)JFS*T%SBGU/P:FT/P
FYJTUTKPJOMFEHFS4USVDU
XIFSFMFEHFS4USVDU-FEHFS-FEHFSDVSSFOU

MFEHFS4USVDU%JNFOTJPO)JFSBSDIZEJN)JFS3FD*E
JG
EJN)JFS3FD*E
\
SFUVSO
^
EJN4QFD
%JNFOTJPO%FGBVMUJOH&OHJOFDSFBUF&NQUZ%JNFOTJPO4QFDJGJFST

GPS
JJDPO-FO
@EJNFOTJPOTJ
\
EJN/BNFDPO1FFL
@EJNFOTJPOTJ
EJN7BMVFDPO1FFL
@WBMVFTJ
EJN"UUS%JNFOTJPO"UUSJCVUFGJOE#Z/BNF
EJN/BNF
JG
EJN"UUS3FD*E
\
DPOUJOVF
^
EJN"UUS7BMVF
%JNFOTJPO"UUSJCVUF7BMVFGJOE#Z%JNFOTJPO"UUSJCVUF"OE7BMVF
EJN"UUSEJN7BMVFGBMTFUSVF
JG
EJN"UUS7BMVF*T%FMFUFE
\
DPOUJOVF
^
%JNFOTJPO%FGBVMUJOH&OHJOFJOTFSU%JNFOTJPO4QFDJGFS
EJN4QFD
EJN"UUS3FD*E

Processing Business Tasks
[ 229 ]
EJN7BMVF
EJN"UUS7BMVF3FD*E
EJN"UUS7BMVF)BTI,FZ
^
EJN4PVSDFTOFX-JTU
5ZQFT$MBTT
EJN4PVSDFTBEE&OE
EJN4QFD
EJN&OH%JNFOTJPO%FGBVMUJOH&OHJOFDPOTUSVDU'PS.BJO"DDPVOU*E
NBJO"DDPVOU3FD*E
EJN)JFS3FD*E
EJN&OHBQQMZ%JNFOTJPO4PVSDFT
EJN4PVSDFT
SFUVSOEJN&OHHFU-FEHFS%JNFOTJPO

^
This method can be used to convert a combination of main accounts and a number of
financial dimension values into a ledger account. The method accepts the following three
arguments:
The main account number
A container of dimension names
A container of dimension values
We start this method by searching for the main account record. We also locate the record of
the hierarchy of the current chart of accounts.
Next, we fill an empty map with the dimension values. Before inserting each value, we
check whether the dimension and its value are present in the system. To do this, we use the
methods in the %JNFOTJPO"UUSJCVUF and %JNFOTJPO"UUSJCVUF7BMVF tables to do.
We end the method by creating a new %JNFOTJPO%FGBVMUJOH&OHJOF object and passing
the list of dimensions and their values to it. Now, when everything is ready, the
HFU-FEHFS%JNFOTJPO
 method of %JNFOTJPO%FGBVMUJOH&OHJOF returns the ledger
account number.
See also
The Creating a general journal recipe
The Creating and posting a ledger voucher recipe

Processing Business Tasks
[ 230 ]
Creating a general journal
Journals in Dynamics 365 for Finance and Operations are manual worksheets that can be
posted into the system. One of the frequently used journals for financial operations is the
general journal. It allows the virtual processing of any type of posting: ledger account
transfers, fixed asset operations, customer/vendor payments, bank operations, project
expenses, and so on. Journals, such as the fixed assets journal, payment journal in
Accounts receivable or Accounts payable, and many others, are optimized for specific
business tasks, but they basically do the same job.
In this recipe, we will demonstrate how to create a new general journal record from the
code. The journal will hold a single line for debiting one ledger account and crediting
another one. For demonstration purposes, we will specify all the input values in the code.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new Dynamics 365 solution named $SFBUF(FOFSBM+PVSOBM Change
1.
the model name in properties with the one created earlier.
In the project, create a new class named -FEHFS+PVSOBM5SBOT%BUB with the
2.
following code snippet:
QVCMJDDMBTT-FEHFS+PVSOBM5SBOT%BUBFYUFOET+PVSOBM5SBOT%BUB
\
^
QVCMJDWPJEDSFBUF
CPPMFBO@EP*OTFSUGBMTF
CPPMFBO@JOJU7PVDIFS-JTUUSVF
\
MBTU-JOF/VN
KPVSOBM5SBOT-JOF/VNMBTU-JOF/VN
JG
KPVSOBM5BCMF%BUBKPVSOBM7PVDIFS/VN

\
UIJTJOJU7PVDIFS
MBTU7PVDIFS
GBMTF
@JOJU7PVDIFS-JTU
^
UIJTBEE5PUBM
GBMTFGBMTF
JG
@EP*OTFSU
\
KPVSOBM5SBOTEP*OTFSU


Processing Business Tasks
[ 231 ]
^
FMTF
\
KPVSOBM5SBOTJOTFSU

^
JG
KPVSOBM5BCMF%BUBKPVSOBM7PVDIFS/VN

\
MBTU7PVDIFSKPVSOBM5SBOT7PVDIFS
^
^
Add the -FEHFS+PVSOBM4UBUJD class in your project and replace its
3.
OFX+PVSOBM5SBOT%BUB
 method with the following code snippet:
+PVSOBM5SBOT%BUBOFX+PVSOBM5SBOT%BUB
+PVSOBM5SBOT.BQ@KPVSOBM5SBOT
+PVSOBM5BCMF%BUB@KPVSOBM5BCMF%BUB
\
SFUVSOOFX-FEHFS+PVSOBM5SBOT%BUB
@KPVSOBM5SBOT
@KPVSOBM5BCMF%BUB
^
Create a new class named (FU-FEHFS%JNFOTJPO with the following code
4.
snippet:
DMBTT(FU-FEHFS%JNFOTJPO
\
QVCMJDTUBUJD-FEHFS%JNFOTJPO"DDPVOUHFU-FEHFS%JNFOTJPO
.BJO"DDPVOU/VN@NBJO"DDPVOU*E
DPOUBJOFS@EJNFOTJPOT
DPOUBJOFS@WBMVFT
\
.BJO"DDPVOUNBJO"DDPVOU
%JNFOTJPO)JFSBSDIZEJN)JFS
-FEHFS4USVDUVSFMFEHFS4USVDU
.BQEJN4QFD
/BNFEJN/BNF
/BNFEJN7BMVF
%JNFOTJPO"UUSJCVUFEJN"UUS
%JNFOTJPO"UUSJCVUF7BMVFEJN"UUS7BMVF
-JTUEJN4PVSDFT
-FEHFS%JNFOTJPO%FGBVMUJOH&OHJOFEJN&OH
JOUJ
NBJO"DDPVOU.BJO"DDPVOUGJOE#Z.BJO"DDPVOU*E
@NBJO"DDPVOU*E
JG
NBJO"DDPVOU3FD*E

Processing Business Tasks
[ 232 ]
\
SFUVSO
^
TFMFDUGJSTU0OMZ3FD*EGSPNEJN)JFS
XIFSFEJN)JFS4USVDUVSF5ZQF
%JNFOTJPO)JFSBSDIZ5ZQF"DDPVOU4USVDUVSF
EJN)JFS*T%SBGU/P:FT/P
FYJTUTKPJOMFEHFS4USVDU
XIFSFMFEHFS4USVDU-FEHFS-FEHFSDVSSFOU

MFEHFS4USVDU%JNFOTJPO)JFSBSDIZEJN)JFS3FD*E
JG
EJN)JFS3FD*E
\
SFUVSO
^
EJN4QFD-FEHFS%JNFOTJPO%FGBVMUJOH&OHJOF
DSFBUF&NQUZ%JNFOTJPO4QFDJGJFST

GPS
JJDPO-FO
@EJNFOTJPOTJ
\
EJN/BNFDPO1FFL
@EJNFOTJPOTJ
EJN7BMVFDPO1FFL
@WBMVFTJ
EJN"UUS%JNFOTJPO"UUSJCVUFGJOE#Z/BNF
EJN/BNF
JG
EJN"UUS3FD*E
\
DPOUJOVF
^
EJN"UUS7BMVF
%JNFOTJPO"UUSJCVUF7BMVFGJOE#Z%JNFOTJPO"UUSJCVUF"OE7BMVF
EJN"UUSEJN7BMVFGBMTFUSVF
JG
EJN"UUS7BMVF*T%FMFUFE
\
DPOUJOVF
^
-FEHFS%JNFOTJPO%FGBVMUJOH&OHJOFJOTFSU%JNFOTJPO4QFDJGFS
EJN4QFD
EJN"UUS3FD*E
EJN7BMVF
EJN"UUS7BMVF3FD*E
EJN"UUS7BMVF)BTI,FZ
^
EJN4PVSDFTOFX-JTU
5ZQFT$MBTT
EJN4PVSDFTBEE&OE
EJN4QFD
EJN&OH-FEHFS%JNFOTJPO%FGBVMUJOH&OHJOF
DPOTUSVDU'PS.BJO"DDPVOU*E
NBJO"DDPVOU3FD*E
EJN)JFS3FD*E
EJN&OHBQQMZ%JNFOTJPO4PVSDFT
EJN4PVSDFT
SFUVSOEJN&OHHFU-FEHFS%JNFOTJPO

^

Processing Business Tasks
[ 233 ]
^
Create another class named -FEHFS+PVSOBM$SFBUF with the following code
5.
snippet:
DMBTT-FEHFS+PVSOBM$SFBUF
\
QVCMJDTUBUJDWPJE.BJO
"SHT@BSHT
\
-FEHFS+PVSOBM5BCMFKPVS5BCMF
-FEHFS+PVSOBM5SBOTKPVS5SBOT
-FEHFS+PVSOBM5BCMF%BUBKPVS5BCMF%BUB
-FEHFS+PVSOBM5SBOT%BUBKPVS5SBOT%BUB
-FEHFS+PVSOBM4UBUJDKPVS4UBUJD
%JNFOTJPO%ZOBNJD"DDPVOUMFEHFS%JN
%JNFOTJPO%ZOBNJD"DDPVOUPGGTFU-FEHFS%JN
UUT#FHJO
MFEHFS%JN
(FU-FEHFS%JNFOTJPOHFU-FEHFS%JNFOTJPO
		
<	#VTJOFTT6OJU		%FQBSUNFOU	>
<				>
PGGTFU-FEHFS%JN
(FU-FEHFS%JNFOTJPOHFU-FEHFS%JNFOTJPO
		
<	#VTJOFTT6OJU		%FQBSUNFOU	>
<				>
KPVS5BCMF%BUB+PVSOBM5BCMF%BUBOFX5BCMF
KPVS5BCMF
KPVS5BCMF+PVSOBM/VNKPVS5BCMF%BUBOFYU+PVSOBM*E

KPVS5BCMF+PVSOBM5ZQF-FEHFS+PVSOBM5ZQF%BJMZ
KPVS5BCMF+PVSOBM/BNF	(FO+SO	
KPVS5BCMF%BUBJOJU'SPN+PVSOBM/BNF
-FEHFS+PVSOBM/BNFGJOE
KPVS5BCMF+PVSOBM/BNF
KPVS4UBUJDKPVS5BCMF%BUBKPVSOBM4UBUJD

KPVS5SBOT%BUBKPVS4UBUJDOFX+PVSOBM5SBOT%BUB
KPVS5SBOT
KPVS5BCMF%BUB
KPVS5SBOT%BUBJOJU'SPN+PVSOBM5BCMF

KPVS5SBOT$VSSFODZ$PEF	64%	
KPVS5SBOTJOJU7BMVF

KPVS5SBOT5SBOT%BUFTZTUFN%BUF(FU

KPVS5SBOT-FEHFS%JNFOTJPOMFEHFS%JN
KPVS5SBOT5YU	(FOFSBMKPVSOBMEFNP	
KPVS5SBOT0GGTFU-FEHFS%JNFOTJPOPGGTFU-FEHFS%JN
KPVS5SBOT"NPVOU$VS%FCJU
KPVS5SBOT%BUBDSFBUF

KPVS5BCMFJOTFSU

UUT$PNNJU

Processing Business Tasks
[ 234 ]
JOGP
TUS'NU
+PVSOBM		IBTCFFODSFBUFEKPVS5BCMF+PVSOBM/VN
^
^
Save all your code and set this class as TFUBTTUBSUVQPCKFDU. Now, run the
6.
project and you will get the following message:
Now check the results by navigating to General ledger | Journal entries |
7.
General journals, as shown in the following screenshot:
Click on the Lines button to open journal lines and notice the created line, as
8.
shown in the following screenshot:

Processing Business Tasks
[ 235 ]
How it works...
We start the recipe by creating the -FEHFS+PVSOBM5SBOT%BUB class, which will handle the
creation of journal lines. It inherits everything from the +PVSOBM5SBOT%BUB class, apart
from its DSFBUF
 method. Actually, this method is a copy of the same method from the
+PVSOBM5SBOT%BUB class, with the exception that it does not contain the code that is not
relevant to the ledger journal creation. We also modify the OFX+PVSOBM5SBOT%BUB

constructor of the -FEHFS+PVSOBM4UBUJD class to use our newly created class.
The journal creation code is placed in a new job. We start the code by initializing ledger
dimensions. Here, we use the HFU-FEHFS%JNFOTJPO
 method from the previous recipe to
get ledger dimensions. This method accepts three parameters: the main account number, a
container of dimension names, and a container of dimension values. In this example, the
ledger dimensions consist of the main account, business unit, and department, and its value
is . Use your own values depending on the data you have.
We also create a new KPVS5BCMF%BUB object that is used for journal record handling. Then,
we set the journal number, type, and name and call the JOJU'SPN+PVSOBM/BNF
 method
to initialize some additional values from the journal name settings. At this stage, the journal
header record is ready.
Next, we create a journal line. We create a new KPVS5SBOT%BUB object to handle the journal
line, and we call its JOJU'SPN+PVSOBM5BCMF
 method to initialize additional values from
the journal header. Then, we set some of the journal line values, such as the currency and
transaction date.
Finally, we call the DSFBUF
 method on the KPVS5SBOT%BUB object and the JOTFSU

method on the KPVS5BCMF object to create the journal line and header records, respectively.
The journal is now ready to be reviewed.
There's more
The preceding example can be easily modified to create different journals, not just the
general journal. For instance, the payment journal in the Accounts payable module is
based on the same data sources as the general journal and some of its code is the same. So,
let's create a new, similar job named 7FOE1BZN+PVSOBM$SFBUF with the following code
snippet:
DMBTT7FOE1BZN+PVSOBM$SFBUF
\
QVCMJDTUBUJDWPJE.BJO
"SHT@BSHT

Processing Business Tasks
[ 236 ]
\
-FEHFS+PVSOBM5BCMFKPVS5BCMF
-FEHFS+PVSOBM5SBOTKPVS5SBOT
-FEHFS+PVSOBM5BCMF%BUBKPVS5BCMF%BUB
-FEHFS+PVSOBM5SBOT%BUBKPVS5SBOT%BUB
-FEHFS+PVSOBM4UBUJDKPVS4UBUJD
%JNFOTJPO%ZOBNJD"DDPVOUMFEHFS%JN
%JNFOTJPO%ZOBNJD"DDPVOUPGGTFU-FEHFS%JN
UUT#FHJO
MFEHFS%JN-FEHFS%ZOBNJD"DDPVOU)FMQFS
HFU%ZOBNJD"DDPVOU'SPN"DDPVOU/VNCFS
		
-FEHFS+PVSOBM"$5ZQF7FOE
-FEHFS+PVSOBM"$5ZQF7FOE
PGGTFU-FEHFS%JN-FEHFS%ZOBNJD"DDPVOU)FMQFS
HFU%ZOBNJD"DDPVOU'SPN"DDPVOU/VNCFS
	64.'01&3	
-FEHFS+PVSOBM"$5ZQF#BOL
+PVSOBMIFBEFSEBUB
KPVS5BCMF%BUB+PVSOBM5BCMF%BUBOFX5BCMF
KPVS5BCMF
KPVS5BCMF+PVSOBM/VNKPVS5BCMF%BUBOFYU+PVSOBM*E

KPVS5BCMF+PVSOBM5ZQF-FEHFS+PVSOBM5ZQF1BZNFOU
KPVS5BCMF+PVSOBM/BNF	7FOE1BZ	
KPVS5BCMF%BUBJOJU'SPN+PVSOBM/BNF
-FEHFS+PVSOBM/BNFGJOE
KPVS5BCMF+PVSOBM/BNF
KPVS4UBUJDKPVS5BCMF%BUBKPVSOBM4UBUJD

+PVSOBMMJOFEBUB
KPVS5SBOT%BUBKPVS4UBUJDOFX+PVSOBM5SBOT%BUB
KPVS5SBOT
KPVS5BCMF%BUB
KPVS5SBOT%BUBJOJU'SPN+PVSOBM5BCMF

KPVS5SBOT$VSSFODZ$PEF	64%	
KPVS5SBOTJOJU7BMVF

KPVS5SBOT5SBOT%BUFTZTUFN%BUF(FU

KPVS5SBOT"DDPVOU5ZQF-FEHFS+PVSOBM"$5ZQF7FOE
KPVS5SBOT-FEHFS%JNFOTJPOMFEHFS%JN
KPVS5SBOT5YU	7FOEPSQBZNFOUKPVSOBMEFNP	
KPVS5SBOT0GGTFU"DDPVOU5ZQF-FEHFS+PVSOBM"$5ZQF#BOL
KPVS5SBOT0GGTFU-FEHFS%JNFOTJPOPGGTFU-FEHFS%JN
KPVS5SBOT"NPVOU$VS%FCJU
KPVS5SBOT%BUBDSFBUF

KPVS5BCMFJOTFSU

UUT$PNNJU
JOGP
TUS'NU
+PVSOBM		IBTCFFODSFBUFEKPVS5BCMF+PVSOBM/VN
^
^

Processing Business Tasks
[ 237 ]
When you run your code, your output will look as follows:
Now, the newly created journal can be found by navigating to Accounts payable | Journals
| Payments | Payment journal, as shown here:
The journal's lines should reflect what we've specified in the code, as shown in the
following screenshot:

Processing Business Tasks
[ 238 ]
The code in this section has only slight differences compared to the previous example, as
follows:
The ledger dimension contains a reference to a vendor account, and the offset
ledger dimension refers to a bank account record
The journal type is changed to a vendor disbursement, that is,
-FEHFS+PVSOBM5ZQF1BZNFOU
The journal name to be matched with the payment journal configuration is
different
The journal line account type is set to WFOEPS, and the offset account type is set to
CBOL
See also
The Using a segmented entry control recipe
The Posting a general journal recipe
Posting a general journal
Journal posting is the next step once the journal has been created. Although most of the
time journals are posted from the user interface, it is also possible to perform the same 
operation from the code.
In this recipe, we will explore how a general journal can be posted from the code. We are
going to process the journal created in the previous recipe.
How to do it...
Carry out the following steps in order to complete this recipe:
Navigate to General ledger | Journals | General journal and find an open
1.
journal. Create a new journal if none exists. Note the journal's number.

Processing Business Tasks
[ 239 ]
In your solution, add a new runnable class named -FEHFS+PVSOBM1PTU with the
2.
following code snippet (replace the  text with the journal's number from
the previous step):
TUBUJDWPJE-FEHFS+PVSOBM1PTU
"SHT@BSHT
\
-FEHFS+PVSOBM$IFDL1PTU-FEHFS+PVSOBM$IFDL1PTU
-FEHFS+PVSOBM5BCMF-FEHFS+PVSOBM5BCMF
-FEHFS+PVSOBM5BCMF-FEHFS+PVSOBM5BCMFGJOE
		
-FEHFS+PVSOBM$IFDL1PTU
-FEHFS+PVSOBM$IFDL1PTUOFX-FEHFS+PVSOBM5BCMF
KPVS5BCMF
/P:FT:FT
-FEHFS+PVSOBM$IFDL1PTUSVO

^
Save all your code and build your solution.
3.
Now, test set this class as a startup object, run the solution, and notice the Infolog
4.
window, confirming that the journal was successfully posted, as shown here:

Processing Business Tasks
[ 240 ]
Navigate to General ledger | Journals | General journal and locate the journal
5.
in order to make sure that it was posted, as shown in the following screenshot:
How it works...
In this recipe, we created a new job named -FEHFS(FOFSBM+PVSOBM1PTU, which holds all
the code. Here, we use the -FEHFS+PVSOBM$IFDL1PTU class, which does all the work. This
class ensures that all the necessary validations are performed. It also locks the journal so
that no user can access it from the user interface.
In the job, we create the KPVS1PTU object by calling the OFX-FEHFS+PVSOBM5BCMF

constructor on the -FEHFS+PVSOBM$IFDL1PTU class. This method accepts a journal header
record to be processed and a second argument, defining whether the journal should be
validated and posted or only validated. In this recipe, we find the previously created
journal record and pass it to the -FEHFS+PVSOBM$IFDL1PTU class along with the second
argument, instructing it to perform both validation and posting.
See also
The Creating a general journal recipe

Processing Business Tasks
[ 241 ]
Processing a project journal
As with most of the modules in Dynamics 365 for Finance and Operations, the Project
management and accounting module contain several journals, such as hour, expense, fee,
and item. Although they are similar to the general journal, they provide a more convenient
user interface to work with projects and contain some module-specific features.
In this recipe, we will create and post a project journal from the code. We will process an
hour journal, holding a registered employee's time.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new project 1SPDFTT1SPKFDU+PVSOBM, and assign our custom model to
1.
it.
Create a new class named 1SPK+PVSOBM$SFBUF with the following code snippet
2.
(replace the input values in the code to match your data):
DMBTT1SPK+PVSOBM$SFBUF
\
QVCMJDTUBUJDWPJE.BJO
"SHT@BSHT
\
1SPK+PVSOBM5BCMFKPVS5BCMF
1SPK+PVSOBM5SBOTKPVS5SBOT
1SPK+PVSOBM5BCMF%BUBKPVS5BCMF%BUB
1SPK+PVSOBM5SBOT%BUBKPVS5SBOT%BUB
1SPK+PVSOBM4UBUJDKPVS4UBUJD
UUT#FHJO
KPVS5BCMF%BUB+PVSOBM5BCMF%BUBOFX5BCMF
KPVS5BCMF
KPVS5BCMF+PVSOBM*EKPVS5BCMF%BUBOFYU+PVSOBM*E

KPVS5BCMF+PVSOBM5ZQF1SPK+PVSOBM5ZQF)PVS
KPVS5BCMF+PVSOBM/BNF*E	)PVST	
KPVS5BCMF%BUBJOJU'SPN+PVSOBM/BNF
1SPK+PVSOBM/BNFGJOE
KPVS5BCMF+PVSOBM/BNF*E
KPVS4UBUJDKPVS5BCMF%BUBKPVSOBM4UBUJD

KPVS5SBOT%BUBKPVS4UBUJDOFX+PVSOBM5SBOT%BUB
KPVS5SBOT
KPVS5BCMF%BUB
KPVS5SBOT%BUBJOJU'SPN+PVSOBM5BCMF

KPVS5SBOTJOJU7BMVF

KPVS5SBOT1SPK*E		
KPVS5SBOTJOJU'SPN1SPK5BCMF
1SPK5BCMFGJOE
KPVS5SBOT1SPK*E

Processing Business Tasks
[ 242 ]
KPVS5SBOT5SBOT%BUFTZTUFN%BUF(FU

KPVS5SBOT1SPK5SBOT%BUFKPVS5SBOT5SBOT%BUF
KPVS5SBOT$BUFHPSZ*E	5BYJ	
KPVS5SBOTTFU)PVS$PTU1SJDF

KPVS5SBOTTFU)PVS4BMFT1SJDF

KPVS5SBOT5BY*UFN(SPVQ*E
1SPK$BUFHPSZGJOE
KPVS5SBOT$BUFHPSZ*E5BY*UFN(SPVQ*E
KPVS5SBOT%&-@8PSLFS
)DN8PSLFSGJOE#Z1FSTPOOFM/VNCFS
		3FD*E
KPVS5SBOT5YU	5BYJGBSFSFJNCVSTFNFOU	
KPVS5SBOT2UZ
KPVS5SBOT%BUBDSFBUF

KPVS5BCMFJOTFSU

UUT$PNNJU
JOGP
TUS'NU
+PVSOBM		IBTCFFODSFBUFEKPVS5BCMF+PVSOBM*E
^
^
Execute the class and check the results by navigating to Project management and
3.
accounting | Journals | Hour, as shown in the following screenshot:
Click on the Lines button to open journal lines and notice the newly created
4.
record, as shown in the following screenshot:

Processing Business Tasks
[ 243 ]
How it works...
In this recipe, we create a new job where we store all the code. In the job, we use the
1SPK+PVSOBM5BCMF%BUB and 1SPK+PVSOBM5SBOT%BUB classes in a way similar to how we
used the -FEHFS+PVSOBM5BCMF%BUB and -FEHFS+PVSOBM5SBOT%BUB classes in the
Creating a general journal recipe. Here, we create a new KPVS5BCMF%BUB object used for
journal record handling. Then, we initialize the journal number, type, and name of the
actual journal record. For demonstration purposes, we set the journal name in the code, but
it can be easily replaced with a value from some parameter. Next, we call
JOJU'SPN+PVSOBM/BNF
 on the KPVS5BCMF%BUB object in order to initialize some
additional values from the journal name settings. At this stage, the journal header record is
ready.
Next, we create a journal line. Here, we first create a new KPVS5SBOT%BUB object to handle
the journal line. Then, we call its JOJU'SPN+PVSOBM5BCMF
 method in order to initialize
the additional values from the journal header. Finally, we set some of the journal line
values, such as transaction and project date, category, and worker number. Normally,
these values have to be taken from the user input, external data, or any other source,
depending on the functionality being built. In this example, we simply specify the values in
the code.
Lastly, we call the DSFBUF
 method on KPVS5SBOT%BUB and the JOTFSU
 method on
KPVS5BCMF to create the journal line and the header records, respectively. The journal is
now ready to be reviewed.

Processing Business Tasks
[ 244 ]
There's more...
For further journal processing, we can use the class named 1SPK+PVSOBM$IFDL1PTU to
post project journals from the code. In the Dynamics project, let's create another class
named 1SPK+PVSOBM1PTU with the following code snippet (replace 1++@ with your
journal number):
DMBTT1SPK+PVSOBM1PTU
\
QVCMJDTUBUJDWPJE.BJO
"SHT@BSHT
\
1SPK+PVSOBM$IFDL1PTUKPVS1PTU
KPVS1PTU1SPK+PVSOBM$IFDL1PTUOFX+PVSOBM$IFDL1PTU
USVF
USVF
+PVSOBM$IFDL1PTU5ZQF1PTU
UBCMF/VN
1SPK+PVSOBM5BCMF
	1++@	
KPVS1PTUSVO

^
^
Run the job to post the journal. The Infolog window should display the confirmation, as
shown here:
In the newly created job, we use the OFX+PVSOBM$IFDL1PTU
 constructor of the
1SPK+PVSOBM$IFDL1PTU class. The constructor accepts the following arguments:
A Boolean value that specifies whether to block the journal while it is being
posted or not. It is a good practice to set the value to USVF, as this ensures that no
one modifies this journal while it is being posted.
A Boolean value that specifies whether to display results in the Infolog window.

Processing Business Tasks
[ 245 ]
The type of action being performed. The possible values for this class are either
1PTU or $IFDL. The latter one only validates the journal, and the first one
validates and posts the journal at once.
The table ID of the journal being posted.
The journal number to be posted.
Finally, we call the SVO
 method, which posts the journal.
Creating and posting a ledger voucher
In Dynamics 365 for Finance and Operations, all the financial transactions, regardless of
where they are originated, end up in the General ledger module. When it comes to
customized functionality, developers should use the Dynamics 365 APIs to create the
required system entries. No transactions can be created directly in the tables, as this may
affect the accuracy of financial data.
In order to ensure data consistency, the system provides numerous APIs for developers to
use. One of them is ledger voucher processing. This allows you to post a financial voucher
in the General ledger module. Vouchers in Dynamics 365 for Finance and Operations are
balanced financial entries that represent a single operation. They include two or more
ledger transactions. The ledger voucher API ensures that all the mandatory fields, such as
voucher numbers, ledger accounts, offset account, financial dimensions, balances, and
others, are filled and valid.
In this recipe, we will demonstrate how a ledger voucher can be created and posted from
the code. We will create a single voucher with two balancing transactions.
How to do it...
Carry out the following steps in order to complete this recipe:
Double-check whether the HFU-FEHFS%JNFOTJPO
 method exists in the
1.
%JNFOTJPO"UUSJCVUF7BMVF$PNCJOBUJPO table. If not, create it as described in
the first recipe of this chapter.
In the solution, create a new job named -FEHFS7PVDIFS1PTU with the following
2.
code snippet:
DMBTT1BDLU-FEHFS7PVDIFS1PTU
\

Processing Business Tasks
[ 246 ]
QVCMJDTUBUJDWPJE.BJO
"SHT@BSHT
\
-FEHFS7PVDIFS-FEHFS7PVDIFS
-FEHFS7PVDIFS0CKFDUWPVDIFS0CK
-FEHFS7PVDIFS5SBOT0CKFDUWPVDIFS5S0CK
-FEHFS7PVDIFS5SBOT0CKFDUWPVDIFS5S0CK
%JNFOTJPO%ZOBNJD"DDPVOUMFEHFS%JN
%JNFOTJPO%ZOBNJD"DDPVOUPGGTFU-FEHFS%JN
$VSSFODZ&YDIBOHF)FMQFSDVSSFODZ&YDI)FMQFS
$PNQBOZ*OGPDPNQBOZ*OGP
MFEHFS%JN
(FU-FEHFS%JNFOTJPOHFU-FEHFS%JNFOTJPO
		
<	#VTJOFTT6OJU		%FQBSUNFOU	>
<				>
PGGTFU-FEHFS%JN
(FU-FEHFS%JNFOTJPOHFU-FEHFS%JNFOTJPO
		
<	#VTJOFTT6OJU		%FQBSUNFOU	>
<				>
-FEHFS7PVDIFS-FEHFS7PVDIFSOFX-FEHFS1PTU
%FUBJM4VNNBSZ%FUBJM
4ZT.PEVMF-FEHFS
		
WPVDIFS0CK-FEHFS7PVDIFS0CKFDU
OFX7PVDIFS
	5&45	
DPNQBOZ*OGP$PNQBOZ*OGPGJOE%BUB"SFB
DVSFYU

DVSSFODZ&YDI)FMQFS
$VSSFODZ&YDIBOHF)FMQFSOFX&YDIBOHF%BUF
-FEHFSQSJNBSZ-FEHFS
DPNQBOZ*OGP3FD*E
WPVDIFS0CKQBSN"DDPVOUJOH%BUF

-FEHFS7PVDIFSBEE7PVDIFS
WPVDIFS0CK
WPVDIFS5S0CK
-FEHFS7PVDIFS5SBOT0CKFDUOFX5SBOTBDUJPO"NPVOU%FGBVMU
WPVDIFS0CK
-FEHFS1PTUJOH5ZQF-FEHFS+PVSOBM
MFEHFS%JN
	64%	

DVSSFODZ&YDI)FMQFS
WPVDIFS5S0CK
-FEHFS7PVDIFS5SBOT0CKFDUOFX5SBOTBDUJPO"NPVOU%FGBVMU
WPVDIFS0CK
-FEHFS1PTUJOH5ZQF-FEHFS+PVSOBM
PGGTFU-FEHFS%JN
	64%	

DVSSFODZ&YDI)FMQFS

Processing Business Tasks
[ 247 ]
-FEHFS7PVDIFSBEE5SBOT
WPVDIFS5S0CK
-FEHFS7PVDIFSBEE5SBOT
WPVDIFS5S0CK
-FEHFS7PVDIFSFOE

JOGP
TUS'NU
7PVDIFS		IBTCFFOQPTUFEWPVDIFSMBTU7PVDIFS

^
^
Run the class to create a new ledger voucher, as shown in the following
3.
screenshot:
To check what has been posted, navigate to General Ledger | Inquiries |
4.
Voucher transactions and type in the voucher number used in the code, as
shown in the following screenshot:

Processing Business Tasks
[ 248 ]
Click on OK to display the posted voucher:
5.
How it works...
In the newly created job, we first define the ledger accounts where the posting will be done.
Normally, this comes from the user input, but for demonstration purposes, here we have
specified it in the code. We use the previously created HFU-FEHFS%JNFOTJPO
 method to
simulate the ledger account entry.
Next, we create a new -FEHFS7PVDIFS object, which represents a collection of vouchers.
Here, we call the OFX-FEHFS1PTU
 constructor of the -FEHFS7PVDIFS class. The
OFX-FEHFS1PTU
 constructor accepts three mandatory and four optional arguments,
which are listed as follows:
Post detailed or summarized ledger transactions.
The system module from which the transactions originate.
A number sequence code, which is used to generate the voucher number. In this
example, we will set the voucher number manually. So, this argument can be left
empty.
The transaction type that will appear in the transaction log.
The transaction text.

Processing Business Tasks
[ 249 ]
A Boolean value, which specifies whether this voucher should meet the approval
requirements.
A Boolean value, defining whether the voucher can be posted without a posting
type when posting inventory transactions.
Then, we create a new -FEHFS7PVDIFS0CKFDU object, which represents a single voucher.
We call the OFX7PVDIFS
 constructor of the -FEHFS7PVDIFS0CKFDU class. It accepts only
one mandatory parameter and a number of optional parameters, which are listed as follows:
The voucher number; normally, this should be generated using a number
sequence, but in this example, we set it manually
The transaction date; the default is the TFTTJPO date
The system module from which the transactions originate
The ledger transaction type
A flag defining whether this is a correcting voucher; the default is /P
The posting layer; the default is $VSSFOU
The document number
The document date
The acknowledgement date
The BEE7PVDIFS
 method of the -FEHFS7PVDIFS class adds the created
voucher object to the voucher
Once the voucher is ready, we create two voucher transactions. The transactions are
handled by the -FEHFS7PVDIFS5SBOT0CKFDU class. They are created by calling its
OFX5SBOTBDUJPO"NPVOU%FGBVMU
 constructor with the following mandatory arguments:
The ledger voucher object
The ledger posting type
The ledger account number
The currency code
The amount in the currency
The currency exchange rate helper

Processing Business Tasks
[ 250 ]
Notice the last argument, which is a currency exchange rate helper, used when operating in
currencies other than the main company currency.
We add the created transaction objects to the voucher by calling its BEE5SBOT
 method. At
this stage, everything is ready for posting.
Finally, we call the FOE
 method on the -FEHFS7PVDIFS object, which posts the
transactions to the ledger.
See also
The Using a segmented entry control recipe
Changing an automatic transaction text
Every financial transaction in Dynamics 365 for Finance and Operations must have a
descriptive text. Some texts are entered by users and some can be generated by the system.
The latter option holds true for automatically generated transactions, where the user cannot
interact with the process.
Dynamics 365 for Finance and Operations provides a way to define texts for automatically
generated transactions. The setup can be found by navigating to Organizations
administration | Setup | Default descriptions. Here, the user can create custom
transaction texts for various automatic transaction types and languages. The text itself can
have a number of placeholders--digits with a percent sign in front of them, which are
replaced with actual values during the process. Placeholders can be from  to , and they
can be substituted with the following values:
: This is the transaction date
: This is a relevant number, such as the invoice and delivery note
: This is the voucher number
 to : This is custom and depends on the module

Processing Business Tasks
[ 251 ]
In this recipe, we will demonstrate how the existing automatic transaction text functionality
can be modified and extended. One of the places where it is used is the automatic creation
of vendor payment journal lines, during the vendor payment proposal process. We will
modify the system so that the texts of the automatically-generated vendor payment lines
include the vendor names.
Getting ready
First, we need to make sure that the vendor payment transaction text is set up properly.
Navigate to Organization administration | Setup | Default descriptions, find a line with
Vendor - payment, vendor, (if this record is not there, you can create a new one), and
change the text to 7FOEPSQBZNFOUUP, as shown in the following screenshot:
How to do it...
Carry out the following steps in order to complete this recipe:
Add the $VTU7FOE1BZN1SPQPTBM5SBOTGFS5P+PVSOBM class to your project and
1.
add the following lines of code at the bottom of the HFU5SBOTBDUJPO5FYU

method, right before its return:
USBOTBDUJPO5YUTFU,FZ
@DVTU7FOE1BZN1SPQPTBM-JOFDVTU7FOE5BCMF
OBNF


Processing Business Tasks
[ 252 ]
Navigate to Accounts payable | Payments | Payment journal and create a new
2.
journal. Open journal lines, run Create payment proposal, which is under
Payment proposal, from the action pane. Define the desired criteria or leave the
field blank and click on OK. In the newly opened Vendor payment proposal
form, click on the Create Payment button to transfer all the proposed lines to the
journal. See the following screenshot:
Notice that the transaction text in each journal line includes the vendor name, as
3.
shown in the following screenshot:

Processing Business Tasks
[ 253 ]
How it works...
The vendor payment proposal uses the $VTU7FOE1BZN1SPQPTBM5SBOTGFS5P+PVSOBM
class to create the lines. The same class contains a method named HFU5SBOTBDUJPO5FYU
,
which is responsible for formatting the text in each line. If we look inside it, we can see that
the 5SBOTBDUJPO5YU class is used for this purpose. This class contains the following
methods, which are used to substitute the placeholders from  to  in the defined text:
: TFU%BUF

: TFU'PSN-FUUFS

: TFU7PVDIFS

: TFU,FZ

: TFU,FZ

: TFU,FZ

By taking a look at the code, you can see that only the  placeholder is used. So, you can
fill the  placeholder with the vendor name. To achieve this, you need to call the
TFU,FZ
 method with the vendor name as an argument. In this way, every journal line
created by the automatic vendor payment proposal will contain a vendor name in its
description.
There's more...
In standard application, we have limited placeholders, as shown in the following
screenshot:

Processing Business Tasks
[ 254 ]
If more than three custom placeholders are required, it is always possible to add an
additional placeholder, by creating a new TFU,FZ
 method in the 5SBOTBDUJPO5YU class.
For example, if we want to add a  placeholder, we have to do the following:
Add the following line of code to the class declaration of the 5SBOTBDUJPO5YU
1.
class:
TUSLFZ
Create a new method with the following code snippet:
2.
WPJETFU,FZ
TUS@LFZ
\
LFZ@LFZ
^
Change the last line of the UYU
 method to the following:
3.
SFUVSOTUS'NU
UYU
EBUF4US6TS
USBOT%BUF%BUF'MBHT'PSNBU"MM
GPSN-FUUFS/VN
WPVDIFS/VN
LFZ
LFZ
LFZ
LFZ
Now, we can use the TFU,FZ
 method to substitute the  placeholder.
4.
Note that, although more placeholders can be added, you should take into consideration the
fact that the transaction text field has a finite number of characters and excessive text will
simply be truncated.
Creating a purchase order
Purchase orders are used throughout the purchasing process to hold information about the
goods or services that a company buys from its suppliers. Normally, purchase orders are
created from the user interface, but in automated processes, purchase orders can be also
created from the code.

Processing Business Tasks
[ 255 ]
In this recipe, you will learn how to create a purchase order from the code. We will use a
standard method provided by the application.
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new runnable class named $SFBUF1VSDI0SEFS with the following code
1.
snippet:
TUBUJDWPJE1LU$SFBUF1VSDI0SEFS
"SHT@BSHT
\
/VNCFS4FROVNCFS4FR
1VSDI5BCMFQVSDI5BCMF
1VSDI-JOFQVSDI-JOF
UUT#FHJO
JOJUJBMJ[FOVNCFSTFRVFODFPCKFDUT
OVNCFS4FR/VNCFS4FROFX(FU/VN
1VSDI1BSBNFUFSTOVN3FG1VSDI*E

OVNCFS4FRVTFE

QVSDI5BCMF1VSDI*EOVNCFS4FROVN

QVSDI5BCMFJOJU7BMVF

*OJUJBMJ[FOFXSFDPSEJO1VSDI5BCMFVTJOHWFOEPSBDDPVOU
QVSDI5BCMFJOJU'SPN7FOE5BCMF
7FOE5BCMFGJOE
	WFOE	
JG
QVSDI5BCMFWBMJEBUF8SJUF

\
UISPX&YDFQUJPO&SSPS
^
QVSDI5BCMFJOTFSU

JOTFSUQVSDIBTFMJOF
QVSDI-JOF1VSDI*EQVSDI5BCMF1VSDI*E
QVSDI-JOF*UFN*E	JUFN	
QVSDI-JOFDSFBUF-JOF
USVFUSVFUSVFUSVFUSVFUSVF
UUT$PNNJU
JOGP
TUS'NU
/FX1VSDIBTFPSEFS		IBTCFFODSFBUFE
QVSDI5BCMF1VSDI*E
^
Save and build your code and select this class as set as startup object. Now run
2.
the project to create a new purchase order.

Processing Business Tasks
[ 256 ]
Navigate to Procurement and sourcing | Common | Purchase orders | All
3.
purchase orders in order to view the purchase order created, as shown in the
following screenshot:
How it works...
In this recipe, we created a new job named $SFBUF1VSDI0SEFS, which holds all the code.
Here, we start by getting the next purchase order number with the help of the /VNCFS4FR
class. We also call the JOJU7BMVF
 and JOJU'SPN7FOE5BCMF
 methods to initialize
various QVSDI5BCMF buffer fields. Normally, the argument of the JOJU'SPN7FOE5BCMF

method should come from a user selection screen or some other source, but for
demonstration purposes, we specify the value in the code. We insert the purchase order
record into the table only if the validation in the WBMJEBUF8SJUF
 method is successful.
Next, we create purchase order lines. Here, we assign the previously used purchase order
number and then set the item number. As previously mentioned, such values should come
from a user input or some other source, but for demonstration purposes, we specify it in the
code.

Processing Business Tasks
[ 257 ]
Finally, we call the DSFBUF-JOF
 method of the 1VSDI-JOF table to create a new line.
This is a very useful method, allowing you to quickly create purchase order lines. This
method accepts a number of optional Boolean arguments, which are listed as follows:
Perform data validations before saving; the default is GBMTF
Initialize the line record from the 1VSDI5BCMF table; the default is GBMTF
Initialize the line record from the *OWFOU5BCMF table; the default is GBMTF
Calculate inventory quantity; the default is GBMTF
Add miscellaneous charges; the default is USVF
Use trade agreements to calculate the item price; the default is GBMTF
Do not copy the inventory site and warehouse from the purchase order header;
the default is GBMTF
Use purchase agreements to get the item price; the default is GBMTF
There's more...
You can also use the data entities, to insert Purchase Order Header and Line records. To
insert purchase order header, use the 1VSDI1VSDIBTF0SEFS)FBEFS&OUJUZ entity and for
Purchase Order Line data use the 1VSDI1VSDIBTF0SEFS-JOF&OUJUZ data entity.
In the preceding code sample, we used a few methods to set some mandatory values in
1VSDI5BCMF and 1VSDI-JOF. Until you find similar methods in these entities, you may
have to assign all mandatory values manually.
Posting a purchase order
In Dynamics 365 for Finance and Operations, the purchase order goes through a number of
statuses in order to reflect its current position within the purchasing process. The status can
be updated either manually by using the user interface or programmatically from the code
as well.
In this recipe, we will demonstrate how a purchase order status can be updated from the
code. We will confirm the purchase order created in the previous recipe and print the
relevant document on the screen.

Processing Business Tasks
[ 258 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new runnable class, named $POGJSN1VSDI0SEFS with the following code
1.
snippet. Replace  with your number, that is created after previous code
$SFBUF1VSDI0SEFS (your PO number could be different from mine so double-
check):
TUBUJDWPJE$POGJSN1VSDI0SEFS
"SHT@BSHT
\
1VSDI'PSN-FUUFSQVSDI'PSN-FUUFS
1VSDI5BCMFQVSDI5BCMF
QVSDI5BCMF1VSDI5BCMFGJOE
		
QVSDI'PSN-FUUFS1VSDI'PSN-FUUFSDPOTUSVDU
%PDVNFOU4UBUVT1VSDIBTF0SEFS
QVSDI'PSN-FUUFSVQEBUF
QVSDI5BCMF
		
%BUF5JNF6UJMEBUF
%BUF5JNF6UJMVUD/PX

1VSDI6QEBUF"MM
"DDPVOU0SEFS/POF
/P:FT/P
/P:FT:FT
^
Save and build your code and select this class as set as startup object. Now, run
2.
the project to post the specified purchase order.
Navigate to Procurement and sourcing | Common | Purchase orders | All
3.
purchase orders and note that the Approval status column of the posted order is
now different, as shown here:

Processing Business Tasks
[ 259 ]
How it works...
In this recipe, we create a new job named $POGJSN1VSDI0SEFS, which holds all the code.
First, we find a purchase order, which we are going to update. In this recipe, we use the
purchase order created in the previous recipe. Here, we will normally replace the code with
a user input or an output from some other function.
Next, we create a new 1VSDI'PSN-FUUFS object using its DPOTUSVDU
 constructor. The
constructor accepts an argument of the %PDVNFOU4UBUVT type, which defines the type of
posting to be done. Here, we use %PDVNFOU4UBUVT1VSDIBTF0SEFS as a value, as we
want to confirm the purchase order.
The last thing to do is to call the VQEBUF
 method of the 1VSDI'PSN-FUUFS object, which
does the actual posting. It accepts a number of arguments, which are listed as follows:
The purchase order header record; in this case, it is the 1VSDI5BCMF table.
An external document number; it's not used in this demonstration, as it is not
required when posting a purchase order confirmation.
The transaction date; the default date is the system's date.
The quantity to be posted; the default is 1VSDI6QEBUF"MM. Other options, such
as 1VSDI6QEBUF1BDLJOH4MJQ or 1VSDI6QEBUF3FDFJWF/PX, are not
relevant when confirming a purchase order.
The order summary update; this argument is not used at all. The default is
"DDPVOU0SEFS/POF.
A Boolean value defining whether a preview or the actual posting should be
done.
A Boolean value defining whether the document should be printed.
A Boolean value specifying whether printing management should be used. The
default value is GBMTF.
A Boolean value defining whether to keep the remaining quantity on order;
otherwise, it is set to zero. This argument is used when posting credit notes.
A container of a number of 5NQ'SN7JSUVBM records. This argument is optional
and is used only when posting purchase invoices.

Processing Business Tasks
[ 260 ]
There's more...
The same technique can be used to post a purchase packing slip, invoice, or update to any
other status, which is available in a given context. Let's take a look at the following example:
QVSDI'PSN-FUUFS1VSDI'PSN-FUUFSDPOTUSVDU
%PDVNFOU4UBUVT1VSDIBTF0SEFS
Replace the preceding code snippet with the following:
QVSDI'PSN-FUUFS1VSDI'PSN-FUUFSDPOTUSVDU
%PDVNFOU4UBUVT*OWPJDF
Now, let's take another code snippet:
QVSDI'PSN-FUUFSVQEBUF
QVSDI5BCMF
		
%BUF5JNF6UJMEBUF
%BUF5JNF6UJMVUD/PX

1VSDI6QEBUF"MM
"DDPVOU0SEFS/POF
/P:FT/P
/P:FT:FT
Replace the preceding code snippet with the following:
QVSDI'PSN-FUUFSVQEBUF
QVSDI5BCMF
		
%BUF5JNF6UJMEBUF
%BUF5JNF6UJMVUD/PX

1VSDI6QEBUF"MM
"DDPVOU0SEFS/POF
/P:FT/P
/P:FT:FT
Now, when you run the job, the purchase order will be updated to an invoice. To check the
updated purchase order, navigate to Procurement and sourcing | Common | Purchase
orders | All purchase orders; notice that its Status field is different now.
If you are adding your objects in new projects, then you may need to set
this project property set as startup project as well, to run your preceding
code while you run the whole solution/project.

Processing Business Tasks
[ 261 ]
Creating a sales order
Sales orders are used throughout the sales process to hold information about the goods or
services that a company sells to its customers. Normally, sales orders are created from the
user interface, but for the automated processes, sales orders can also be created from the
code.
In this recipe, you will learn how to create a sales order from the code. We will use a
standard method provided by the application.
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new 3VOOBCMF class in your project and name it 4BMFT0SEFS$SFBUF.
1.
Copy and paste the following code in the main method of this class:
TUBUJDWPJE4BMFT0SEFS$SFBUF
"SHT@BSHT
\
/VNCFS4FROVNCFS4FR
4BMFT5BCMFTBMFT5BCMF
4BMFT-JOFTBMFT-JOF
UUT#FHJO
OVNCFS4FR/VNCFS4FROFX(FU/VN
4BMFT1BSBNFUFSTOVN3FG4BMFT*E

OVNCFS4FRVTFE

TBMFT5BCMF4BMFT*EOVNCFS4FROVN

TBMFT5BCMFJOJU7BMVF

TBMFT5BCMF$VTU"DDPVOU	64	
TBMFT5BCMFJOJU'SPN$VTU5BCMF

JG
TBMFT5BCMFWBMJEBUF8SJUF

\
UISPX&YDFQUJPO&SSPS
^
TBMFT5BCMFJOTFSU

TBMFT-JOF4BMFT*ETBMFT5BCMF4BMFT*E
TBMFT-JOF*UFN*E	%	
TBMFT-JOFDSFBUF-JOF
USVFUSVFUSVFUSVFUSVFUSVF
UUT$PNNJU
JOGP
TUS'NU
4BMFTPSEFS		IBTCFFODSFBUFETBMFT5BCMF4BMFT*E
^
Save and build your code and select this class as set as startup object. Now, run
2.
the project to create a new sales order.

Processing Business Tasks
[ 262 ]
Navigate to Sales and marketing | Common | Sales orders | All sales orders in
3.
order to view the newly created sales order, as shown in the following
screenshot:
How it works...
In this recipe, we create a new job named 4BMFT0SEFS$SFBUF, which holds all the code.
The job starts by generating the next sales order number with the help of the /VNCFS4FR
class. We also call the JOJU7BMVF
 and JOJU'SPN$VTU5BCMF
 methods to initialize
various TBMFT5BCMF buffer fields. Notice that, for JOJU'SPN$VTU5BCMF
, we first set the
customer account and call the method afterwards, instead of passing the customer record as
an argument. We insert the sales order record into the table only if the validation in the
WBMJEBUF8SJUF
 method is successful.
Next, we create sales order lines. Here, we assign the previously used sales order number
and set the item number.
Finally, we call the DSFBUF-JOF
 method of the 4BMFT-JOF table to create a new line.
This is a very useful method, which allows you to quickly create sales order lines. The
method accepts a number of optional Boolean arguments. The following list explains most
of them:
Perform the data validations before saving; the default is GBMTF
Initialize the line record from the 4BMFT5BCMF table; the default is GBMTF
Initialize the line record from the *OWFOU5BCMF table; the default is GBMTF
Calculate the inventory quantity; the default is GBMTF

Processing Business Tasks
[ 263 ]
Add the miscellaneous charges; the default is USVF
Use the trade agreements to calculate the item price; the default is GBMTF
Reserve the item; the default is GBMTF
Ignore the customer credit limit; the default is GBMTF
There's more...
You can also use the data entities to insert Sales Order Header and Line records. To insert
into Sales order header, use the 4BMFT0SEFS)FBEFS&OUJUZ entity, and for Sales Order
Line data, use the 4BMFT0SEFS-JOF&OUJUZ data entity.
In the preceding code sample, we used a few methods to set some mandatory values in
4BMFT5BCMF and 4BMFT-JOF. You won't find similar methods in these entities so you may
have to assign all mandatory values manually.
While running any code from VS directly, it uses application UI to perform this task. In this
situation, many times you don't have the option to choose company and the default
company will be DAT. So you have to set the company on your project before you run your
code. To set the default company for a specific project, set the project property as shown in
the following screenshot:

Processing Business Tasks
[ 264 ]
Posting a sales order
In Dynamics 365 for Finance and Operations, a sales order goes through a number of
statuses in order to reflect its current position within the sales process. The status can be
updated either manually using the user interface or programmatically from the code.
In this recipe, we will demonstrate how a sales order status can be updated from the code.
We will register a packing slip for the sales order created in the previous recipe and print
the relevant document on the screen.
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new SVOOBCMFDMBTT, named 4BMFT0SEFS1PTU1BDLJOH4MJQ with the
1.
following code snippet in the main method (replace  with your Sales
Order number, that was generated after the previous code):
TUBUJDWPJE4BMFT0SEFS1PTU1BDLJOH4MJQ
"SHT@BSHT
\
4BMFT'PSN-FUUFSTBMFT'PSN-FUUFS
TBMFT5BCMFTBMFT5BCMF
TBMFT5BCMF4BMFT5BCMFGJOE
		
TBMFT'PSN-FUUFS4BMFT'PSN-FUUFSDPOTUSVDU
%PDVNFOU4UBUVT1BDLJOH4MJQ
TBMFT'PSN-FUUFSVQEBUF
TBMFT5BCMF
%BUF5JNF6UJMEBUF
%BUF5JNF6UJMVUD/PX

4BMFT6QEBUF"MM
"DDPVOU0SEFS/POF
/P:FT/P
/P:FT:FT
^
Save and build your code and select this class as set as startup object. Now, run
2.
the project to post the specified sales order. As a result you will see the status of
sales order  will be changed to delivered.

Processing Business Tasks
[ 265 ]
How it works...
In this recipe, we create a new job named 4BMFT0SEFS1PTU1BDLJOH4MJQ, which holds all
the code.
First, we find a sales order, which we are going to update. In this recipe, we use the sales
order created in the previous recipe. Here, we will normally replace this code with a user
input or an output from some other function.
Next, we create a new 4BMFT'PSN-FUUFS object using its DPOTUSVDU
 constructor. The
constructor accepts an argument of the %PDVNFOU4UBUVT type, which defines the type of
posting to be done. Here, we use %PDVNFOU4UBUVT1BDLJOH4MJQ as a value, as we want
to register a packing slip.
Finally, we call the VQEBUF
 method of 4BMFT'PSN-FUUFS, which does the actual posting.
It accepts a number of arguments, as follows:
The sales order header record, that is, the 4BMFT5BCMF table.
The transaction date; the default is the system date.
The quantity to be posted; the default is 4BMFT6QEBUF"MM.
The order summary update; this argument is not used at all. The default is
"DDPVOU0SEFS/POF.
A Boolean value defining whether a preview or the actual posting should be
done.
A Boolean value defining whether the document should be printed.
A Boolean value specifying whether printing management should be used; the
default is GBMTF.
A Boolean value defining whether to keep the remaining quantity on order;
otherwise, it is set to zero. This argument is used when posting credit notes.
A container of a number of 5NQ'SN7JSUVBM records; this argument is optional
and is used only when posting sales invoices.
There's more...
The 4BMFT'PSN-FUUFS class can also be used to do other types of posting, such as sales
order confirmation, picking lists, or invoices. For example, to invoice the previously used
sales order:
TBMFT'PSN-FUUFS4BMFT'PSN-FUUFSDPOTUSVDU
%PDVNFOU4UBUVT1BDLJOH4MJQ

Processing Business Tasks
[ 266 ]
Replace the preceding line of code with the following line of code:
TBMFT'PSN-FUUFS4BMFT'PSN-FUUFSDPOTUSVDU
%PDVNFOU4UBUVT*OWPJDF
Now, when you run the job, the sales order will be updated to an invoice.
Creating an electronic payment format
Electronic payments, in general, can save time and reduce paperwork when making or
receiving payments within a company. Dynamics 365 for Finance and Operations provides
a number of standard out-of-the-box electronic payment formats. The system also provides
an easy way of customizing the existing payment forms or creating new ones.
In this recipe, you will learn how to create a new custom electronic payment format. To
demonstrate the principle, we will only output some basic information, and we will
concentrate on the approach itself.
How to do it...
Carry out the following steps in order to complete this recipe:
In the AOT, create a new class named 7FOE0VU1BZN3FDPSE@5FTU with the
1.
following code snippet:
QVCMJDDMBTT7FOE0VU1BZN3FDPSE@5FTUFYUFOET7FOE0VU1BZN3FDPSE
\
^
QVCMJDWPJEPVUQVU

\
TUSPVU3FDPSE
/BNFDPNQBOZ/BNF
#BOL"DDPVOUCBOL"DDPVOU
PVU3FDPSETUS3FQ
		
DPNQBOZ/BNFTVC4US
DVTU7FOE1BZNSFDJFWFST$PNQBOZ/BNF

CBOL"DDPVOUTVC4US
DVTU7FOE1BZNSFDJFWFST#BOL"DDPVOU

PVU3FDPSETUS1PLF
PVU3FDPSEDPNQBOZ/BNF
PVU3FDPSETUS1PLF
PVU3FDPSECBOL"DDPVOU
GJMFXSJUF
PVU3FDPSE
^

Processing Business Tasks
[ 267 ]
Create another class named 7FOE0VU1BZN@5FTU with the following code snippet:
2.
QVCMJDDMBTT7FOE0VU1BZN@5FTUFYUFOET7FOE0VU1BZN
\
^
QVCMJD1BZN*OUFSGBDF/BNFJOUFSGBDF/BNF

\
SFUVSO5FTUQBZNFOUGPSNBU
^
QVCMJD$MBTT*EDVTU7FOE0VU1BZN3FDPSE3PPU$MBTT*E

\
SFUVSODMBTT/VN
7FOE0VU1BZN3FDPSE@5FTU
^
QSPUFDUFE0CKFDUEJBMPH

\
%JBMPH3VOCBTFEJBMPH
EJBMPHTVQFS

UIJTEJBMPH"EE'JMF/BNF
EJBMPH
SFUVSOEJBMPH
^
QVCMJDCPPMFBOWBMJEBUF
0CKFDU@DBMMFE'SPNOVMM
\
SFUVSOUSVF
^
QVCMJDWPJEPQFO

\
-PDBM$PEF1BHF
GJMF$VTU7FOE0VU1BZNOFX'JMF
GJMFOBNFDQ@
JG
GJMF]]GJMFTUBUVT
*0@4UBUVT0L
\
UISPXFSSPS
TUS'NU
'JMFDPVMEOPUCFPQFOFEGJMFOBNF
^
GJMFPVU'JFME%FMJNJUFS
		
GJMFPVU3FDPSE%FMJNJUFS
	=S=O	
GJMFXSJUF
	4UBSUJOHGJMF	
^
QVCMJDWPJEDMPTF

\
GJMFXSJUF
	$MPTJOHGJMF	
^

Processing Business Tasks
[ 268 ]
Navigate to Accounts payable | Setup | Payment | Methods of payment and
3.
create a new record, as follows:
Open the File formats tab page, click on the Setup button, and move your newly
4.
created Test payment format from the pane on the right-hand side to the pane on
the left-hand side.
Then, go back to the Methods of payment form and select Text payment format
5.
in the Export format field as follows:

Processing Business Tasks
[ 269 ]
Close the Methods of payment form. Navigate to Accounts payable | Journals |
6.
Payments | Payment journal and create a new journal. Click on the Lines button
to open the journal lines. Create a new line and make sure you set Method of
payment to Test, as follows:
Next, click Generate payments. Fill in the dialog fields as displayed in the
7.
following screenshot, click on OK, and select the exported file's name:

Processing Business Tasks
[ 270 ]
Click on OK to complete the process; notice that the journal line's Payment status
8.
changed from None to Sent, which means that the payment file was generated
successfully.
Open the created file with any text editor (for example, Notepad), to check its
9.
contents, shown as follows:

Processing Business Tasks
[ 271 ]
How it works...
In this recipe, we create two new classes, which are normally required for generating
custom vendor payments. Electronic payments are presented as text files to be sent to the
bank. The first class is the 7FOE0VU1BZN3FDPSE@5FTU class, which is responsible for
formatting the payment lines, and the second one is the 7FOE0VU1BZN@5FTU class, which
generates the header and footer sections and creates the payment file itself.
The 7FOE0VU1BZN3FDPSE@5FTU class extends 7FOE0VU1BZN3FDPSE and inherits all the
common functionality. We only need to override its PVUQVU
 method to define our own
logic in order to format the payment lines. The PVUQVU
 method is called once for each
payment line.
Inside the PVUQVU
 method, we use the PVU3FDPSE variable, which we initially fill in with
50 blank characters using the global TUS3FQ
 function, and then insert all the necessary
information into the predefined positions within the variable, as per format requirements.
Normally, here we should insert all the required information, such as dates, account
numbers, amounts, references, and so on. However, to keep this demonstration to a
minimum, we only insert the company name and the bank account number.
In the same method, we use another variable named DVTU7FOE1BZN of the $VTU7FOE1BZN
type, which already holds all the information we need. We only have to call some of its
methods to retrieve it. In this example, to get the company name and the bank account
number, we call SFDJFWFST$PNQBOZ/BNF
 and SFDJFWFST#BOL"DDPVOU
, respectively.
We trim the returned values using the global TVCTUS
 function, and insert them into the
first and 43rd positions of the PVU3FDPSE variable using the global TUS1PLF
 function.
Finally, at the bottom of the PVUQVU
 method, we add the formatted text to the end of the
payment file.
Another class that we create is 7FOE0VU1BZN@5FTU. It extends the 7FOE0VU1BZN class and
also inherits all the common functionality. We only need to override some of the methods
that are specific to our format.
The JOUFSGBDF/BNF
 method, returns a name of the payment format. Normally, this text
is displayed in the user interface, when configuring payments.
The DVTU7FOE0VU1BZN3FDPSE3PPU$MBTT*E
 method returns an ID of the class, which
generates payment lines. It is used internally to identify which class to use when formatting
the lines. In our case, it is 7FOE0VU1BZN3FDPSE@5FTU.

Processing Business Tasks
[ 272 ]
The EJBMPH
 method is used only if we need to add something to the user screen when
generating payments. Our payment is a text file, so we need to ask a user to specify the
filename. We do this by calling the EJBMPH"EE'JMF/BNF
 method, which is a member
method of the parent class. It will automatically add a file selection control and we won't
have to worry about things, such as a label or how to get its value from the user input.
There are numerous other standard controls, which can be added to the dialog by calling
various EJBMPH"EE
 methods. Additional controls can also be added here using
BEE'JFME
 or similar methods of the dialog object directly.
The WBMJEBUF
 method is one of the methods that has to be implemented in each custom
class. Normally, user input validation should go here. Our example does not have any
validation, so we simply return true.
In the PQFO
 method, we are responsible for initializing the file variable for further
processing. Here, we use the OFX'JMF
 constructor of the $VTU7FOE0VU1BZN class to
create a new instance of the variable. After some standard validations, we set the field and
the row delimiters by calling the PVU'JFME%FMJNJUFS
 and PVU3FDPSE%FMJNJUFS

methods of the $VTU7FOE0VU1BZN class, respectively. In this example, the values in each
line should not be separated by any symbol, so we call the PVU'JFME%FMJNJUFS
 method
with an empty string. We call the PVU3FDPSE%FMJNJUFS
 method with the new line
symbol to define that every line ends with a line break. Note that the last line of this method
writes a text to the file header. Here, we place some simple text so that we can recognize it
later when viewing the generated file.
The last one is the DMPTF
 method, which is used to perform additional actions before the
file is closed. Here, we specify some text to be displayed in the footer of the generated file.
Now, this new payment format is ready for use. After some setup, we can start creating the
vendor payment journals with this type of payment. Note, the file generated in the previous
section of this recipe, we can clearly see which text in the file comes from which part of the
code. These parts should be replaced with your own code to build custom electronic
payment formats for Dynamics 365 for Finance and Operations.

6
Data Management
In this chapter, we will cover the following recipes:
Data entities
Building a data entity with multiple data sources
Data packages
Data migration
Import of data
Troubleshooting
Introduction
The data management feature in Dynamics 365 for Finance and Operations enables you to
manage and audit your data efficiently in systems. The excellent feature provides many
tools such as Import, Export, delete bulk data and detect duplicate data, and so on. You can
also develop custom data entities as well.
Integration through the data management platform provides more capabilities and higher
throughput for inserting/extracting data through entities. Typically, data goes through three
phases in this integration scenario:
Source - These are inbound data files or messages in the queue. Typical data
formats include CSV, XML, and tab-delimited.
Staging - These are automatically generated tables that map very closely to the
data entity. When data management enabled is true, staging tables are generated
to provide intermediary storage. This enables the framework to do high-volume
file parsing, transformation, and some validations.
Target - This is the data entity where data will be imported.

Data Management
[ 274 ]
Now let's see how to build an entity and how to use any existing/new data entity in
Dynamics 365 for Finance and Operations. We can create new entities in two ways:
Using a Wizard
Directly from a table
We will explain both with different recipes in this chapter.
Data entities
In the earlier version of Dynamics 365 for Finance and Operations, there are multiple
options such as DIXF, Excel Add-ins, and AIF for data management. Data entities are
introduced as a part of data management to be used as a layer of abstraction to easily
understand by using business concepts.
The concept of data entities combines those different concepts into one. You can reuse Data
entities for an Excel Add-ins, Integration, or import/export. The following table shows core
scenarios of Data management:
Data Migration
Migrate reference, master, and document data from legacy or
external systems.
Setup and copy
configuration
Copy configuration between company/environments.
Configure processes or modules using the Lifecycle Services
(LCS) environment.
Integration
Real-time service based integration.
Asynchronous integration.
More information about this can be found at IUUQTEPDTNJDSPTPGUDP
NFOVTEZOBNJDTVOJGJFEPQFSBUJPOTEFWJUQSPEBUBFOUJUJFT
EBUBFOUJUJFTEBUBQBDLBHFT.
Getting ready
The following are the terms introduced for data management that will be used throughout
the chapter:

Data Management
[ 275 ]
Data project
A project that contains configured data entities, which include mapping
and default processing options.
Data job
A job that contains an execution instance of the data project, uploaded files,
schedule (recurrence), and processing options.
Job history
Histories of source to staging and staging to target.
Data package A single compressed file that contains a data project manifest and/or data
files. This is generated from a data job and used for import or export of
multiple files with the manifest.
Data management uses data entities under the hood for an abstract layer for business logic
implementation. Data is inserted in staging tables using SSIS, which is then validated and
transformed to map to the target entity.
How to do it...
Carry out the following steps in order to complete this recipe:
Create a new Dynamics 365 for Operations project in Visual Studio.
1.

Data Management
[ 276 ]
We will create a demo table with a few fields as follows, to use in this Data
2.
Entity:
Add a new Data Entity in the project by right-clicking the menu as follows:
3.

Data Management
[ 277 ]
Next you will get a wizard screen, select PacktVendTable as the Primary
4.
datasource. Entity category as Master and click on Next:

Data Management
[ 278 ]
In the next step, you have to choose all required fields from the primary
5.
EBUB4PVSDF table, for this recipe we will keep only a few fields and mark them
as Is Mandatory as well. Once done, click on Finish:
Save your project and build it. The project must look as follows:
6.

Data Management
[ 279 ]
Now we need to add this entity in the data management work space. Navigate to
7.
Work space | Data management|Data entities.
Add a new record as follows and save it. Now click on Validate:

Data Management
[ 280 ]
Let's try to import data into PacktVendTable using this new Data entity. Now go
8.
back to the Data management work space. Click on Import tile. Fill in the details
as follows:
Upload the Excel file that contains data. Now click on the Import button. You will get a
notification once this import is done. To check, browse the table and check inserted data.
How it works...
We start this recipe with creating a new table with a few fields similar to WFOE5BCMF. This
table is used to create a new data entity through the VS wizard. We added new a data entity
object in our project, once we select a Data entity object it will initiate a wizard.

Data Management
[ 281 ]
In this step, we select our primary table that we created earlier. In the entity category field
you have to choose this on the basis of table type. There are five different types of entity
category. If you are using any existing table, this will select automatically, while for new
tables you may have to change it accordingly.
In the next step, we select fields that are really required in this entity. You can change a few
properties of fields such as label and mandatory. At the end of this wizard you will have a
new data entity along with a staging table created. You will find a few more supporting
Dynamics 365 for Finance and Operations objects in your project.
There's more...
It is important to understand the different categories of entities while you are working on
data entities. In Dynamics 365 for Finance and Operations, entities are categorized based on
their functions and the type of data that they serve. The following are five categories for
data entities:
Parameter:
Tables that contain only one record, where the columns are values
for settings. Examples of such tables exist for Account payable
(AP), General ledger (GL), client performance options, workflows,
and so on.
Functional or behavioral parameters.
Required to set up a deployment or a module for a specific build or
customer.
Can include data that is specific to an industry or business. The
data can also apply to a broader set of customers.
Reference:
Simple reference data, of small quantity, that is required to operate
a business process.
Data that is specific to an industry or a business process.
Examples include units, dimensions, and tax codes.
Master:
Data assets of the business. Generally, these are the "nouns" of the
business, which typically fall into categories such as people, places,
and concepts.
Complex reference data, of large quantity. Examples include
customers, vendors, and projects.

Data Management
[ 282 ]
Document:
Worksheet data that is converted into transactions later.
Documents that have complex structures, such as several line items
for each header record. Examples include sales orders, purchase
orders, open balances,and journals.
The operational data of the business.
Transaction:
The operational transaction data of the business.
Posted transactions. These are non-idempotent items such as
posted invoices and balances. Typically, these items are excluded
during a full dataset copy.
Examples include pending invoices.
Let's see one more example where we will discuss how to create the same entity
from the PacktVendTable wizard. To carry on, follow these steps:
Right-click on the table and select Addins |Create data entity. As shown in the
1.
following screenshot:

Data Management
[ 283 ]
It will directly create all required objects in your current project:
2.
Now save all your changes and build the solution. On successful build, your
3.
Data entity will be ready for use.
Building a data entity with multiple data
sources
We could also create a data entity where we include multiple data sources. Here our data
entity takes care of all integrity constraints and validation and creates records in related
tables if it does not exist. Let us take, an example of inventory breakdown, where we create
an inventory site, warehouse, location, zones, aisle, and so on. We could create a data entity,
which encapsulates all these tables, and a flat file import could create related records in all
these tables.
How to do it...
Carry out the following steps in order to complete this recipe:
Add a new data entity in the project and name it 1BDLU*OWFOU#SFBL%PXO.
1.

Data Management
[ 284 ]
A Data Entity Wizard will be launched, as shown in the following screenshot:
2.
Next you need to select all/required fields from WMSLocation.
3.

Data Management
[ 285 ]
Click on the Add data source button and select Relation InventLocation.
4.

Data Management
[ 286 ]
Select Invent location from the node at the right of WMSlocation, as shown in
5.
the next screenshot.
Add new data source InventSite to InventLocation and select all fields:
6.
Add more tables, WHSZone and WMSAisle, on WMSLocation:
7.

Data Management
[ 287 ]
The system will create the data entity, staging table, and privileges to support
8.
data management and OData on the data entity.
Select all child data sources and set the *T3FBE0OMZ property as No, as shown
9.
in the following table:
Your properties must look as follows:
Fetch mode
OneToOne
Is Read Only No

Data Management
[ 288 ]
Now to verify the integrity of the data entity. Create a runnable class name,
10.
*OWFOU#SFBL%PXO$SFBUF, and add the following code:
DMBTT*OWFOU#SFBL%PXO$SFBUF
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
1BDLU*OWFOU#SFBL%PXOJOWFOU#SFBL%PXO
JOWFOU#SFBL%PXOJOJU7BMVF

JOWFOU#SFBL%PXO*OWFOU4JUF@4JUF*E	1BDLU4JUF	
JOWFOU#SFBL%PXO*OWFOU4JUF@/BNF1BDLUTJUF
JOWFOU#SFBL%PXO*OWFOU-PDBUJPO@*OWFOU-PDBUJPO*E1BDLU
JOWFOU#SFBL%PXO*OWFOU-PDBUJPO@/BNF1BDLU

Data Management
[ 289 ]
JOWFOU#SFBL%PXOX.4-PDBUJPO*E1BDLU8.4
JOWFOU#SFBL%PXOBJTMF*E1BDLU8.4"JTMF
JOWFOU#SFBL%PXO8.4"JTMF@JOWFOU-PDBUJPO*E1BDLU
JOWFOU#SFBL%PXO8.4"JTMF@BJTMF*E1BDLU8.4"JTMF
JOWFOU#SFBL%PXO8.4"JTMF@JOWFOU-PDBUJPO*E1BDLU
JOWFOU#SFBL%PXOJOWFOU-PDBUJPO*E1BDLU
JOWFOU#SFBL%PXO8)4;POF@;POF*E1BDLU;POF
JOWFOU#SFBL%PXO8)4;POF@;POF/BNF1BDLU;POF
JOWFOU#SFBL%PXO8)4;POF@;POF(SPVQ*E#6-,
JOWFOU#SFBL%PXO;POF*E1BDLU;POF
JOWFOU#SFBL%PXOJOQVU-PDBUJPO1BDLU8.4
JOWFOU#SFBL%PXOMPDBUJPO5ZQF8.4-PDBUJPO5ZQF1JDL
JOWFOU#SFBL%PXOJOTFSU

^
^
On running this class it would create a site, warehouse, location, zone, and aisle
11.
in a single run. These types of data entities could be very useful when migrating
flat data from a client.
How it works...
In this recipe, we used the WMSLocation table as our parent datasource. This table is used
to create a new data entity through the VS wizard. We added a new data entity object in our
project, once we select a data entity object it will initiate a wizard.
In this step, we select our primary table, that is, WMSLocation. In the entity category field,
you have to choose this based on table type. There are five different types of entity category.
If you are using any existing table, this will select automatically, while for new tables you
may have to change it accordingly.
In the next step, we have selected InventLocation, InventSite, WHSZone, and WMSAisle,
which are related tables. After you have found a few more supporting Dynamics 365 for
Finance and Operations objects in your project. After the last step, you need to open data
entity and modify the *T3FBE0OMZ property on all child data sources to No as it would
allow us to create related records in the child table. Finally, to test this entity you create a
job and after running, verify the data in related tables.

Data Management
[ 290 ]
You can add more data sources in the wizard and use fields from related
child tables as well. To use other tables make sure relevant relations exist
on table level.
There's more...
The custom entity that we created in the preceding recipe could be used in data
management. Here we would use the entity to export the inventory setup data.
Select the Export option and choose our custom entity in the Data entity drop-down, as
shown in the following screenshot:

Data Management
[ 291 ]
Select the Export option, it schedules an export batch job that reads the data entity and
writes the data to file as per the setup specified for the export job. Data gets exported
successfully and we can view staging data to validate that the correct data has been
imported.

Data Management
[ 292 ]
Data packages
Data packages in Dynamics consist of logically grouped data entities. In a simpler way, a
data package contains one or more entities or groups of data entities. Lifecycle Services
(LCS) contains multiple base data packages that you can use to reduce implementation time
during the project. These packages also be used to prepare your system in much less time
with demo/real data. These packages can contain the elements that are required in each
module/area in order to meet the minimum requirements. As per business requirements or
advanced business processes, you might have to add more entities to the list of packages.
Getting ready...
The data packages that Microsoft publishes on LCS use a numbering sequence that is based
on the module, data type, and sequence. Here is an example:
Module/area numbering:

Data Management
[ 293 ]
Data type numbering:
Numbering format:
The names of data packages include the numbering format, which is followed by the
module abbreviation and then a description. For example, the following screenshot shows
the general ledger data packages:
Now, in this recipe we will see how to create a new package in Dynamics 365 for Finance
and Operations. However, it does not require any coding at all, but still you have to choose
every entity wisely for your data package, to perform all export/import functions properly.
Data packages can be used for both importing and exporting data into your application. In
coming recipes we will see both examples. Initially we will export a package followed by
importing data back to the system using the same package.

Data Management
[ 294 ]
How to do it...
Let's create a simple package first that will contain two entities. Carry out the following
steps in order to complete this recipe:
Navigate to Workspace | Data management | Export.
1.
Fill out details as shown in the following screen, with your first entity Customer.
2.
Click on Add Entity:

Data Management
[ 295 ]
Add another entity in your package, Customer groups. Click on Add entity:
3.

Data Management
[ 296 ]
Your screen must look as follows:
4.
Click on Entity Sequence and change the $VTUPNFSHSPVQT sequence to 1, and
5.
click on Update selected. Now update the sequence for $VTUPNFST to 2 and click
on Update Selected. Now click on the OK button:

Data Management
[ 297 ]
Now you are on the Data Management home screen. Click on the Export button.
6.
You will be redirected to the Job Execution form. Once execution has succeeded,
click on Download package:
While asking for Data, the package does not exist. Click Yes to create a new
7.
package. You will get a ZIP file with both entities along with two more files,
Manifest and PackageHeader. Both files have metadata for your package.
Now let us try to import this package with a few new records and some updates
8.
in existing records.
In customer entity, modify entities as follows:

Data Management
[ 298 ]
In customer group, modify entities as follows:
Save your data and make a ZIP file along with Manifest and packageHeader.
Now let's try to import this data package in the system. We have two options to
9.
import packages in a system. First using LCS tools and using data management
workspace. In our recipe we will use data management workspace. Navigate to
Data management workspace and select Import. Fill details in as follows:

Data Management
[ 299 ]
Now click on the Import button. A job will execute and insert/update data in its
10.
respective table. You can see the record counts once it completes:
There's more...
With the LCS tool, you can create default packages as well using Process Data Package. LCS
will create Data packages for you for all available modules with proper sequencing and
mapping.

Data Management
[ 300 ]
Let's see how to create default Data packages in LCS:
Log into your LCS account. Select your project in case you have multiple projects
1.
aligned with your LCS account.
Go to Asset Library, select Process data package:
2.
Click on the Import button and select a Process Data Package template and click
3.
on pick.
It will create a new Process data package file with the status, Processing. It will
take a few minutes to create all packages under the Data package tab.

Data Management
[ 301 ]
Once done, refresh your page and select Data package under Asset Library, you
4.
will find that all default packages are added here:
The same will be added in the Configuration & data manager tool. To check, go
5.
back to the Project home screen in LCS and select the Configuration and Data
Manager tool. Your screen must look as follows:

Data Management
[ 302 ]
From here you can download the packages and upload them with real data. Once
6.
you have all required data in entities, the same package can be uploaded in
Dynamics 365 for Finance and Operations through the Configuration & data
manager tool.
See also
You can find all available Data packages with their sequence number at the given
link: IUUQTEPDTNJDSPTPGUDPNFOVTEZOBNJDTVOJGJFEPQFSBUJPOT
EFWJUQSPEBUBFOUJUJFTEBUBFOUJUJFTEBUBQBDLBHFT.
Data migration
Data migration is a key task of a project implementation cycle. Here are the key points
regarding export/import tasks.
The following pain points can occur during migration:
Inability to do quick iterative migration and validations
Multiple hops that lead to multiple dependencies and change of errors
Complexity due to repeated manual interventions
Difficulty in tracing and error troubleshooting
Difficulty migrating a large volume of data within a time constraint
During migration, you can strategize and choose data entities. Data entities also save time
during implementation because previous activities required data export from a database,
data export validation, and data transformation to files such as Excel or XML. In the current
version of Dynamics 365 for Finance and Operations, these hops have been eliminated. If an
import error occurs, you can skip selected records and choose to proceed with the import
using the good data, opting to then fix and import the bad data later. You will be allowed to
partially continue and bad data will be indicated by using errors. Data imports can be easily
scheduled using a batch, which offers flexibility when it is required to run. For example,
you can migrate customer groups, customers, vendors, and other data entities in the system
at any time.

Data Management
[ 303 ]
Getting ready
Export is the process of extracting data from the system utilizing data entities. The export
process is done through a project. When creating the process, there is a lot of flexibility as to
how the export project is defined. There is an option to choose not only which data entities
to export, but also the number of entities, the file format used (there are 14 different formats
to choose for export), and apply a filter to each entity to limit what is exported. After the
data entities have been pulled into the project, the sequencing and mapping described
earlier can be performed for each export project.
After the project is created and saved you can export the project to create a job. During the
export process, you can see a graphical view of the status of the job and the record count.
This view shows multiple records so you can review the status of each record prior to
downloading the actual files.

Data Management
[ 304 ]
After a few seconds, click refresh and you will notice a change in status of the job:

Data Management
[ 305 ]
After the job is completed, you can choose how to download the files of each data entity
either as a separate file or by combining the files as a package. If there are multiple data
entities in the job, choosing the package option will expedite the upload process. The
package is a zipped file, containing a data file for each entity as well as a package header
and manifest. These additional documents are used when importing in order to add the
data files to the correct data entities and sequence the import process.
How to do it...
Dynamics 365 for Finance and Operations provides out-of-the-box entities for data export
and import; we will take an example to export stock on hand by inventory site:
Click on Export in data management:
1.

Data Management
[ 306 ]
Click on the Export button to export the data and to schedule a batch job select
2.
Create recurring data job. After clicking Export it will show the following screen:

Data Management
[ 307 ]
On the refreshing form, we see status as 7426 records exported. Here we need to
3.
click Download package to download the data here and the system will create a
data package for us:

Data Management
[ 308 ]
You can check the staging logs for details by navigating to the View staging data button, as
shown in the preceding screenshot.
How it works...
In normalized tables, a lot of the data for each item might be stored in an Invent Sum table,
and then the rest might be spread across a small set of related tables. Dynamics 365 uses the 
data entity for the inventory on hand concept which appears as one de-normalized view, in
which each row contains all the data from the invent sum table and its related tables to
show inventory stock by site. An export job gives feasibility to either export the data from
target entity to staging table and then write the same data to the file or skip staging and
write the data directly to file. Here, when we choose staging then the system writes the data
to file using SQL server integration services.
Importing data
Import is the process of pulling data into a system utilizing data entities. The import 
process is done through the Import tile in the Data Management workspace. Data can be
imported either for individual entities or for a group of logically related entities that are
sequenced in the correct order. The file formats vary depending on the type of import. For
an entity, it can be an Excel file that is comma-separated, tab-separated, text. For a data
package, it is a ZIP file. In both cases, the files are exported using the previously-mentioned
export process. The detailed steps for importing data using data packages are as follows.
How to do it...
Let us import and create released products in Dynamics 365 for Finance and Operations:
In the system administration module, click Data management workspace, to
1.
begin importing, select import tile.
In the Name field, provide a logical name for the package, which is being
2.
imported. In the Source Data Format field, select $47 as the source data format.

Data Management
[ 309 ]
Click the Upload button and choose the file from the location for the data that is
3.
being imported.

Data Management
[ 310 ]
After clicking Import, the system will import the file in a blob, as shown in the
4.
screenshot:

Data Management
[ 311 ]
Click Refresh to update the job status:
5.

Data Management
[ 312 ]
Check the status of the job to see if the records are imported:
6.

Data Management
[ 313 ]
View staging data and check the product in released form:
7.
Finally, we could check that the product imported by us is released in designated company.
Using data management platform in Dynamics 365 for Operation we could import
thousands of products and release them in multiple companies.

Data Management
[ 314 ]
How it works...
Dynamics 365 creates a staging table for each entity in the database where the target table
resides. Data that is being migrated is first moved to the staging table. There, you can verify
the data, and perform any cleanup or conversion that is required. You can then move the
data to the target table or export it. Here in, we provide a source file for import of released
products, then the system imports the flat data file in a staging table using the SSIS package
and then uses X++ jobs to move data from the staging table to the target table to create
records in &DP3FT1SPEVDU, *OWFOU5BCMF, and related tables. It uses data entity for
insertion of flat data from staging in target tables so that related records are created and
their integrity is maintained.
Troubleshooting
Now you must have understood the concept and logic behind data management. We also
created a few entities, packages, and other related objects. Import and Export become very
easy with Dynamics 365; however, these processes are not always straightforward. You
may get a few unwanted errors during this.
In this section, we will see how to troubleshoot these errors and warnings.
Getting ready
While working with data management at times we encounter errors in import and exports.
The framework provided with the product is robust enough to identify the error logs and
suggest for possible solutions to rectify the data. This section describes how to troubleshoot
during the different stages of data package processing.

Data Management
[ 315 ]
How to do it...
Carry on the following steps to troubleshoot some issues that you may get during routine
development:
Normally during export processes, we do not get any errors, but if you get an
1.
error during the export process click View execution log and review the log text,
staging log details, and Infolog for more information:

Data Management
[ 316 ]
If you get an error during the export process with a note directing you to not skip
2.
staging, turn off the Skip staging, and then add the entity. If you are exporting
multiple data entities, you can use the Skip staging button for each data entity:
For carrying out import processes upload the data entity files.
3.
If data entities do not display in Selected Files and Entities after you click
4.
Upload during the import process, wait a few minutes, and then check if the
0-&%# driver is still installed. If not, then reinstall the 0-&%# driver. The driver is
.JDSPTPGU"DDFTT%BUBCBTF&OHJOF3FEJTUSJCVUBCMF
"DDFTT%BUBCBTF&OHJOF@YFYF.

Data Management
[ 317 ]
If data entities display in Selected Files and Entities with a warning after you
5.
click Upload during the import process, verify and fix the mapping of individual
data entities by clicking View map. Update the mapping and click save for each
data entity.
Import the data entities:
6.

Data Management
[ 318 ]
If data entities fail, (shown with a red X or yellow triangle icon on the data entity
7.
tile) after you click Import, click View staging data on each tile under the
Execution summary page to review the errors. Sort and scroll through the
records with Transfer status is equal to Error to display the errors in the Message
section. Download the staging table via Microsoft Office. Fix a record (or all
records) directly in staging by clicking Edit, Validate all, and Copy data to
target, or fix the import file (not staging file) and re-import the data:

Data Management
[ 319 ]
We could choose correct values in staging from the dropdown and then validate
8.
the lines:

Data Management
[ 320 ]
After successful validation we could copy the data to target and run the job
9.
synchronously or asynchronously.

Data Management
[ 321 ]
After the job is completed, we could check status of staging records as follows:
10.
If data entities fail, you can check the import file to see whether there is an extra
11.
line in the file with text that displays "This is a string that is inserted into Excel as
a dummy cell to make the column to support more than 255 characters. By
default, an Excel destination component will not support more than 255
characters. The default type of Excel will be set based on the first few rows". This
line is added during data export. If this line exists, delete this line, re-package the
data entity, and try to import.

Data Management
[ 322 ]
How it works...
Usually the system provides enough support to check the logs of error and resolve them.
Let's see how we could check the log and interpret it to resolve the issue:
Status and error details of a scheduled job can be found under the Job history
1.
section in the Data management form:

Data Management
[ 323 ]
Status and error details of previous runs for data entities can be displayed by
2.
selecting a data project and clicking Job history. In the Execution history form,
select a job, and click View staging data and View execution log. The previous
runs include data project runs that were executed as batch jobs or manually:
Many entities support automatic generation of identifiers based on number
3.
sequence setup. For example, when creating a product, the product number is
automatically generated and the form does not allow you to edit values
manually:

Data Management
[ 324 ]
Here auto-generated fields will allow the framework to use the number sequence
4.
that auto generates the Product number and we need not include the product
number in our import file:

Data Management
[ 325 ]
It is possible to enable manual assignment of number sequences:
5.

Data Management
[ 326 ]
In this case, you can manually provide the value and enable manual assignment
6.
of product numbers instead:
If you are using the import file to create released products then you need to
7.
supply a product number column.
There's more...
While importing the system users entity, you may receive a integrity violation error if there
is a guest user in the exported package. The guest user must be deleted from the package in
order for the entity to work.
If a record already exists in the UserInfo table (the admin record would most likely always
exist), the import will fail for those records, but work for other records.

7
Integration with Microsoft Office
In this chapter, we will cover the following recipes:
Configuring and using the Excel Data Connector add-in
Using Workbook Designer
Export API
Lookup in Excel - creating a custom lookup
Document management
Creating a Word document with repeated elements
Introduction
In our day-to-day operations we use Microsoft Office a lot to store and retrieve numerical
data in a grid format of columns and rows to calculating and analyze company data such as
sales figures, sales taxes, or commissions. Dynamics 365 for Finance and Operations
provides us with integration with Microsoft Office, which includes Microsoft Excel,
Microsoft Word, the Document Management subsystem, and email. In this chapter, we will
see how Microsoft Dynamics 365 for Finance and Operations integrates with Excel and
Word by using data entities as an entry point into the system, how Excel can become a core
part of the user experience, and how Excel and Word can be used for ad hoc lightweight
reporting. We will also see how files can be stored and shared by using the Document
Management and email capabilities in Dynamics 365 for Finance and Operations.

Integration with Microsoft Office
[ 328 ]
Configuring and using the Excel Data
Connector add-in
Microsoft Excel can change and quickly analyze data. The Excel Data Connector app
interacts with Excel workbooks and OData services that are created for publicly exposed
data entities. The Excel Data Connector add-in enables Excel to become a seamless part of
the user experience. The Excel Data Connector add-in is built by using the Office Web Add-
ins framework. The add-in runs in a task pane. Office Web Add-ins are web applications
that run inside an embedded Internet Explorer browser window.
In this recipe, we will show you how to configure an Excel Data Connector add-in and use
it to export data from Dynamics 365 for Finance and Operations and publish the updated
data back in Dynamics 365 for Finance and Operations.
How to do it...
Carry out the following steps in order to complete this recipe:
Open a new workbook in Excel and navigate to the Insert tab. Under Add-ins,
1.
select My Add-ins, as shown in the following screenshot:

Integration with Microsoft Office
[ 329 ]
Under Office Add-ins, navigate to STORE, search for Microsoft Dynamics
2.
Office Add-in, and click on Add. This is shown in the following screenshot:
Once you've clicked, a new window will open within Excel as follows. Click on
3.
Add server information and the system will ask for account credentials. You
have to sign in as the user that has access in your Dynamics 365 for Finance and
Operations:

Integration with Microsoft Office
[ 330 ]
This will open up a Data Connector add-in app window as follows:
4.
Let's navigate to Accounts receivable | Customers | All Customers, press the
5.
Open in MS office button, select OPEN IN EXCEL, and choose to Download:

Integration with Microsoft Office
[ 331 ]
Let the file reload and retrieve the data. It will open the file as follows. Select a
6.
customer record to update the Customer group field to change its value from 
to :
Once the Customer group value has been changed, then select the Publish button
7.
to update the record in Dynamics 365 for Finance and Operations. Consider the
following screenshot:

Integration with Microsoft Office
[ 332 ]
Filter the customer in the ALL CUSTOMERS form and check the result, as
8.
shown in the following screenshot:
How it works...
We start the recipe by first installing the Microsoft Dynamics Office add-ins for Dynamics
365 for Finance and Operations. Data from Dynamics is exposed to the external world by
using OData entities, and authentication is done via Azure Active Directory, providing that
the user signed in has access to Office 365. OData sits on the same authentication stack as
the server. The add-in uses OAuth to facilitate authentication.
We can use the Microsoft Dynamics Excel Data Connector App (Excel App) to create, read,
update, and delete Dynamics 365 for Finance and Operations. The connector uses OData
services that are created for any entity that is left in the default state of Public
(DataEntity.Public=:FT).
The following text will suggest how the data is accessed by Excel by using various
technologies:
Excel | Office Web Add-in (JS + HTML) | JavaScript OData API (Olingo) | Authentication
through Azure Active Directory (AAD) | Dynamics 365 for Finance and Operations OData
services on the AOS | Dynamics 365 for Finance and Operations Entities | Dynamics 365 for
Finance and Operations LINQ provider | Dynamics 365 for Finance and Operations
Database.

Integration with Microsoft Office
[ 333 ]
Using Workbook Designer
We can use the Workbook Designer page to design an editable custom export workbook 
that contains an entity and a set of fields. Before we can publish data edits, all the key fields
of the entity must be in the Excel table. Key fields have a key symbol next to them. To
successfully create or update a record, it must have all the mandatory fields in the Excel
table. Mandatory fields have an asterisk () next to them.
In this recipe, we will show you how to design an Excel workbook from Dynamics 365 for
Finance and Operations and use it to export data from Dynamics 365 for Finance and
Operations and publish the updated data back in Dynamics 365 for Finance and Operations.
We could also import the same workbook to use it as a document template.
How to do it...
Carry out the following steps in order to complete this recipe:
Navigate to Common | Common | Office Integration | Excel workbook
1.
designer form in Dynamics 365 for Finance and Operations.
Find the data entity Vendor and select the fields from the available fields, as
2.
follows:
Click the Create workbook button. The Create workbook button will add the
3.
selected entity and fields, a pointer to the server, and the app into a workbook.

Integration with Microsoft Office
[ 334 ]
The Get entity record count button will show the record count for the currently
4.
selected entity. Currently, the Excel Data Connector App cannot handle large (tall
and wide) data-sets. Any unfiltered entity with more than  records is at
risk of crashing the app.
After creating the workbook, enable editing in Excel and the data will be loaded
5.
as follows:
After obtaining a workbook with an Excel Data Connector App, additional data
6.
sources can be added using the Design button:

Integration with Microsoft Office
[ 335 ]
We could edit data here and add this workbook to Document Templates in
7.
Dynamics 365 for Finance and Operations, so that it will be added as an option in
the Open in Excel section of the Open in Microsoft Office menu.
Navigate to Common | Common | Office Integration | Document Templates:
8.
Note here, List in Open Office Menu will be checked for the record created for
9.
our custom Vendors Workbook record:

Integration with Microsoft Office
[ 336 ]
Navigate to Accounts payable | Vendors | All Vendors:
10.
How it works...
Dynamics 365 for Finance and Operations has an inbuilt framework to design workbooks,
where the user is presented with the Data entities dropdown. When we select data entity
fields for export, to retrieve the resulting workbook, click Create Workbook in the app bar.
We can save this workbook and it can be imported as a Word document template. Once this
is imported into the system and has a List in Open Office menu, then it is automatically
added as a generated Excel template.
Export API
The Export API is used to provide custom export options such as Open in Excel options
that are manually added via the Export API.
In this recipe, we will show how to use the Export API to provide custom export options by
adding an explicit button for Open in Excel experiences. The label shown on the button
should usually be Open target in Excel where the target is the name of the target data, such
as 7FOEPST or DBUBMPH. The code behind such a button will be for obtaining the template
to be used. Add the desired filter and pass the template to the user.

Integration with Microsoft Office
[ 337 ]
How to do it...
Carry out the following steps in order to complete this recipe:
Start Visual Studio 2015 by opening the previously created project, or create a
1.
new project.
Right-click on the project, and then click Add | New item.
2.
Select the Resource item type and set the name to 7FOEPS#BTJD5FNQMBUF. Make
3.
sure that 7FOEPS#BTJD5FNQMBUFYMTY is closed.
Add a document template for usage in code.
4.
Add a new button 0QFO7FOEPS*O&YDFM on the 7FOE5BCMF form under the path
5.
='PSNT=7FOE5BCMF=%FTJHO=
"DUJPO1BOF
"DUJPO1BOF=7FOEPS5BC
"DUJPO1BOF5BC=7FOEPS.PEJGZ
#V
UUPO(SPVQ=0QFO7FOEPS*O&YDFM
#VUUPO.
Add code on the DMJDLFE method on the OpenVendorInExcel button:
6.
<$POUSPM
#VUUPO>
DMBTT0QFO7FOEPS*O&YDFM
\
QVCMJDWPJEDMJDLFE

\
TVQFS

DPOTUTUSUFNQMBUF/BNFSFTPVSDF4US
7FOEPS#BTJD5FNQMBUF
%PDV5FNQMBUFUFNQMBUF
%PDV5FNQMBUFGJOE5FNQMBUF
0GGJDF"QQ"QQMJDBUJPO5ZQF&YDFM
UFNQMBUF/BNF
&OTVSFUIFUFNQMBUFXBTQSFTFOU
JG
UFNQMBUFUFNQMBUF5FNQMBUF*%UFNQMBUF/BNF
\
.BQGJMUFST5P"QQMZOFX.BQ
5ZQFT4USJOH5ZQFT$MBTT
$SFBUFWFOEPSTGJMUFS
&YQPSU5P&YDFM'JMUFS5SFF#VJMEFSGJMUFS#VJMEFSOFX
&YQPSU5P&YDFM'JMUFS5SFF#VJMEFS
UBCMFTUS
7FOE7FOEPS&OUJUZ
BOZUZQFGJMUFS4USJOH
GJMUFS#VJMEFSBSF&RVBM
GJFMETUS
7FOE7FOEPS&OUJUZ
7FOEPS"DDPVOU/VNCFS7FOE5BCMF"DDPVOU/VN

Integration with Microsoft Office
[ 338 ]
GJMUFST5P"QQMZJOTFSU
UBCMFTUS
7FOE7FOEPS&OUJUZ
GJMUFS4USJOH
HFOFSBUFUIFXPSLCPPLVTJOHUIFUFNQMBUFBOEGJMUFST
%PDV5FNQMBUF3FOEFSSFOEFSFSOFX%PDV5FNQMBUF3FOEFS

TUSEPDVNFOU6SMSFOEFSFSSFOEFS5FNQMBUF5P4UPSBHF
UFNQMBUF
GJMUFST5P"QQMZ
1BTTUIFXPSLCPPLUPUIFVTFS
JG
EPDVNFOU6SM
\
#SPXTFSCOFX#SPXTFS

COBWJHBUF
EPDVNFOU6SMGBMTFGBMTF
^
FMTF
\
FSSPS
TUS'NU
!"QQMJDBUJPO'PVOEBUJPO%PDV5FNQMBUF
(FOFSBUJPO'BJMFEUFNQMBUF/BNF
^
^
FMTF
\
XBSOJOH
TUS'NU
!"QQMJDBUJPO'PVOEBUJPO%PDV5FNQMBUF/PU'PVOE
UFNQMBUF/BNF
^
^
^
Navigate to Accounts payable | Vendors | All Vendors and find the button
7.
Open Vendors in Excel:

Integration with Microsoft Office
[ 339 ]
This button will export the selected record. Here, we have applied filters on the
8.
vendor code so it will only export the vendor code  record from all the
companies. To select a record from a particular company, apply filters on
EBUB"SFB*E:
How it works...
Here, we first need to add the resource which refers are Excel template. This same template
should be loaded as a document template in Dynamics 365 for Finance and Operations.
Once this is done, we can use the same template to export the data to Excel in our code.
We can add a filter while retrieving data by using &YQPSU5P&YDFM'JMUFS5SFF#VJMEFS
which returns a filter expression of class type. Then, insert these values in .BQ type and use
the %PDV5FNQMBUF3FOEFS class to render the document from the method
SFOEFS5FNQMBUF5P4UPSBHF
, which returns the browser URL. The browser URL can be
passed to the OBWJHBUF
 method of the #SPXTFS class.

Integration with Microsoft Office
[ 340 ]
Lookup in Excel - creating a custom lookup
To facilitate data entry, the Excel App provides lookups and data assistance. Date fields
provide a date picker, enumeration (enum) fields provide an enum list, and relationships 
provide a relationship lookup. When relationships exist between entities, a relationship
lookup is shown. We can create custom lookups to show data options when an enum or
relationship isn't sufficient. The main use case is when data must be retrieved from an
external service and presented in real time.
In this recipe, we will show how to add a custom lookup on currency code on a vendor's
entity.
How to do it...
Carry out the following steps in order to complete this recipe:
Open the previously created project in Visual Studio.
1.
Open the Designer View for VendVendorEntity. Right-click on Methods and
2.
then click on New Method.
Add the MPPLVQ@$VSSFODZ$PEF method from the following code sample:
3.
<4ZT0%BUB"DUJPO"UUSJCVUF
7FOE7FOEPS&OUJUZ$VTUPN-PPLVQGBMTF
/BNFJONFUBEBUB
4ZT0%BUB$PMMFDUJPO"UUSJCVUF
@GJFMET5ZQFT4USJOH
5ZQFTJODPOUFYU
4ZT0%BUB'JFME-PPLVQ"UUSJCVUF
$VSSFODZ$PEF>/BNFPGGJFME
QVCMJDTUBUJDTUSMPPLVQ@$VSSFODZ$PEF
"SSBZ@GJFMET
\
0GGJDF"QQ$VTUPN-PPLVQ-JTU3FTVMUSFTVMU
OFX0GGJDF"QQ$VTUPN-PPLVQ-JTU3FTVMU

SFTVMUJUFNT
WBMVF
*/3
SFTVMUJUFNT
WBMVF
64%
SFTVMUJUFNT
WBMVF
&63
SFTVMUJUFNT
WBMVF
#-3
SFTVMUJUFNT
WBMVF
"&%
SFTVMUJUFNT
WBMVF
.:3
SFUVSOSFTVMUTFSJBMJ[F

^

Integration with Microsoft Office
[ 341 ]
Open Excel Workbook, and open designer to add fields as follows:
4.
Select the Currency Code (Currency as shown in the following screenshot)
5.
column; have a look at the Add-ins window for lookup values:
How it works...
Here, Dynamics 365 for Finance and Operations Data entity API automatically recognizes
4ZT0%BUB"DUJPO"UUSJCVUF, 4ZT0%BUB$PMMFDUJPO"UUSJCVUF, and
4ZT0%BUB'JFME-PPLVQ"UUSJCVUF. Also, we need to add the method name as
MPPLVQ@GJFMEOBNF
 so that the system considers it to render the lookup for the field.
Here, in this example, we have provided lookup on CurrencyCode. When we navigate to
the field, the system uses OData API and retrieves the lookup values.

Integration with Microsoft Office
[ 342 ]
Document management
In Dynamics 365 for Finance and Operations, document management supports Azure Blob
and SharePoint online for saving record attachments. Database storage is not supported
anymore.
Azure Blob: Azure Blob storage is the default storage for Dynamics 365 for Finance and
Operations. It is equivalent to storage in a database, as documents can only be accessed
through Dynamics 365 for Finance and Operations. Also, it provides the added benefit of
providing storage that doesn't negatively affect the performance of the database.
SharePoint Online: When you have an O365 license and MS, autodiscover the SharePoint
tenant, for example, a user on the QBDLU1VCMJDBUJPOPONJDSPTPGUDPN0""%
tenant gets QBDLU1VCMJDBUJPOTIBSFQPJOUDPN as the SharePoint site. This whole
architecture allows SharePoint storage to work immediately.
How to do it...
Carry out the following steps to understand document management:
As the very first step, check whether DOCUMENT HANDLING is enabled or
1.
not. You can turn on this feature through the Options button in the right top
corner on your screen by following this path:
Options | Preferences/General | Miscellaneous and set the document handling
as active:

Integration with Microsoft Office
[ 343 ]
Once this feature is enabled, you will get the attach button in the upper-right
2.
corner, as shown in the following screenshot. To check, open any form (Account
receivable | Customers | All customers):
Now, to add any document, click on the New button. You will have an option to
3.
choose from File, Image, Note, and URL document types and the system will ask
you to upload the attachment:

Integration with Microsoft Office
[ 344 ]
Let's try to attach an image file. Select Image from the New dropdown. Select an
4.
image file. Once the upload is done, you can check the related information on the
form along with the preview:
On this form, you will see some more fast tabs that contain more details about
5.
this attachment.
How it works...
In Dynamics 365 for Finance and Operations, when you select an attachment, it will store it
on your selected storage, while using the Azure storage system will create a Blob and link it
to the current record.
There's more...
You may have found some changes in different updates of Dynamics 365 for Finance and
Operations, as earlier it was Microsoft Dynamics 365 for Operation and still some more
exciting updates are in the queue.
For example, in the preceding recipe, we showed four document types, while in current
versions you may get File and Image only.

Integration with Microsoft Office
[ 345 ]
You can also attach Office document types, such as Microsoft Word, Excel, and PowerPoint
files, but for that you must use a production Office Web Apps Server, which might not be
available in a OneBox configuration.
Once you have an Office365 license, you need to set up SharePoint storage for attachments.
To do that, go to Organization administration | Document management | Document
management parameters and ensure that the SharePoint server has been automatically
discovered and set:
Test this connection and, on successful setup, open or create a Document type, set the
document type's location to 4IBSF1PJOU, and select the folder that the files should be
stored in.

8
Integration with Power BI
In this chapter, we will cover the following recipes:
Configuring Power BI
Consuming data in Excel
Integrating Excel with Power BI
Developing interactive dashboards
Embedding Power BI visuals
Introduction
Power BI is best known as a reporting tool that helps you to create interactive visual
reports. When it comes to Dynamics 365 for Finance and Operations, now it's a cloud-based
analytics visualization platform that helps you to extract, transform, and present business
data from Microsoft Dynamics 365 for Finance and Operations to interactive reports and
dashboards.
This chapter explains the out-of-box integration between Dynamics 365 for Finance and
Operations and 1PXFS#*DPN. You will also learn how we can use the features and its
services that are part of Microsoft Power BI to access, explore, and gain insight from your
Microsoft Dynamics 365 for Finance and Operations.
Power BI provides you a self-service analytics solution while working with the Office 365
cloud service and automatically refreshes the Microsoft Dynamics 365 for Finance and
Operations data into your BI dashboards. You can also use Power BI Desktop or Microsoft
Office Excel Power Query for authoring reports and Power BI for sharing dashboards and
refreshing data from Microsoft Dynamics 365 for Finance and Operations, this allows your
organization to use a powerful way to work with Dynamics 365 data.

Integration with Power BI
[ 347 ]
Configuring Power BI
You can connect to Microsoft Dynamics 365 for Finance and Operations with Power BI
Desktop to create custom Dynamics 365 reports and dashboards for use with the Power BI
service. To enable Power BI the very first thing you have to do is configure your Power BI
with Dynamics 365 for first use.
How to do it...
Follow these steps:
Log in to your Power BI account using IUUQTQPXFSCJNJDSPTPGUDPNFOVT.
1.
Give details about the application and Dynamics 365 for Finance and Operations
2.
environment, you can refer to the following for more clarity:
App Name: Give a generic application name
App Type: Choose Server side web app
Redirect URL: Add oauth at the end of your home page URL
Home page URL: Application URL

Integration with Power BI
[ 348 ]
Choose APIs to access:
3.

Integration with Power BI
[ 349 ]
Register your app.
4.
In this step, click on Register App and the system will create DMJFOU*% and
DMJFOUTFDSFU for your new app. Keep a backup of both values, you need to put
these values in the next step:
Now open Dynamics 365 for operation and navigate to System Administration |
5.
Setup | Power BI.

Integration with Power BI
[ 350 ]
Use DMJFOU*% and "QQMJDBUJPO,FZ, and add the details here which has been
generated from the last step respectively:

Integration with Power BI
[ 351 ]
Now open any workspace, on the right side you will get a Power BI tile, click on
6.
Get started:

Integration with Power BI
[ 352 ]
Now authorize Power BI using admin credentials. Once done with this step you
7.
will get power BI tiles on the workspace:

Integration with Power BI
[ 353 ]
Now navigate to System administration| Setup | System parameter, and go to
8.
the help tab. You will get a notification for connecting with LCS, select Click here
to connect to LCS:
On successful authentication, you will get selection data in the Help tab.
Fill in the required details here:
9.

Integration with Power BI
[ 354 ]
Now navigate to System administrator | Setup | Entity Store and refresh all
10.
BHHSFHBUFNFBTVSFNFOU. You can set batch jobs as well for this activity:
Now you will get these in your LCS account under Shred Asset library | Power
11.
BI reports. You can download the QCYJ files to modify the Power BI desktop
application.
Go to System administrator | Setup | Deploy Power BI files and deploy all
12.
required BI files from this screen.
How it works...
When you log in to the Power Bi account using your organization credentials you will be
able to access it. Using these steps, you can generate $MJFOU*E and BQQMJDBUJPOJE for
your power BI application. Use these details in Dynamics 365 to create mapping with a
Power BI account.

Integration with Power BI
[ 355 ]
After this initial mapping, you have to do more setup in Dynamics 365, as shown in the
preceding recipe. Once you are done with all these steps you will be able to access Power BI
tiles under each workspace.
There's more...
You can download a default Power BI report using LCS. Log in to your LCS account and
select Shared asset library, under Power BI report Model you will see 14 default BI report
model files:
Click any of them and you can download it on your local drive. Use Power BI desktop to 
modify these reports.
See also
You may need to install Power BI gateway to connect with the application,
download this using the following link:
IUUQTQPXFSCJNJDSPTPGUDPNFOVTHBUFXBZ

Integration with Power BI
[ 356 ]
Consuming data in Excel
In this recipe, we will consume Dynamics 365 data into an Excel file using power view and
power pivot tools. Follow with use of power view report. It's a very useful tool for reports
and visual artifacts. There are many ways to import data into Excel, here in this recipe we
will use the 0%BUB feed to get required data and convert it into visual reports.
How to do it...
Open Excel and go to the Data tab. Click on New Query | From other source |
1.
From OData feed:

Integration with Power BI
[ 357 ]
In the next screen add your Dynamics 365 API URL, add EBUB at the end of the
2.
URL, and click OK:
It will navigate you to the next screen where we need to select three tables, as
3.
shown in the following screenshot:

Integration with Power BI
[ 358 ]
When you click the Load button, all queries will load on your Excel file right
away. You can select every query for an update such as hiding/selecting the
require column.
Now go to Data tab | Data tool group | Manage Data Model. It will open
4.
another screen for Power Pivot for Excel. Go to Design Tab | Relationship group
| Manage Relationships, use this form to create/edit appropriate relationships
between tables as follows:
Close the Manage Relationships dialog box.
Now try to add some calculated measures on the report, to do that, use the
5.
Measures pane at the bottom of the PowerPivot Window to add two new
measures:
Click on the Measure pane below your grid and enter the following formula, and
then press Enter:
5PUBM%FCJU$"-$6-"5&
46.
<%FCJU"NPVOU>

Integration with Power BI
[ 359 ]
Click on another cell below the previous one, as shown in the following
screenshot, and enter the following formula:
5PUBM$SFEJU$"-$6-"5&
46.
<$SFEJU"NPVOU>

Integration with Power BI
[ 360 ]
Now we need to add a report using this query, navigate to Insert | Power View.
6.
It will load a blank power view report. You will get your query in this report.
Now drag and drop the total fields that we created in the previous step. Also, you
can update the design using Design | Switch visualization:

Integration with Power BI
[ 361 ]
In case you are looking for a specific view, you can try to drag the fields in the
7.
Power View pane in the left window, and drag them into the correct Axis and
Legend areas to get the required visuals:
You can now drill into the vendor group by double-clicking the 7FOEPS(SPVQ*E
8.
column.
How it works...
Using OData end points, it's easy to expose into Excel. To validate that data entities are
exposed by using the OData v4 endpoint, add a suffix of EBUB to the URL. The URL should
now be in the following format:
IUUQTZPVSFOWJSPONFOUDMPVEBYEZOBNJDTDPNEBUB

Integration with Power BI
[ 362 ]
For Internet Explorer, JSON files need to be downloaded before you can view them. Use
Visual Studio to view the JSON file. If you're using Chrome, you can view the feed in your
browser window itself:
It will show all available queries that are available.
There are a few more add-ins on the market such as Microsoft SQL Server Power Pivot for
Excel, which enables data modeling for business users using an in-memory engine that is
built into Excel. This will allow you to process large amounts of data at the same time
without worrying about performance.
Another add-in is Power View, which lets you build visualizations that are interactive in
Excel itself by using data modeled and loaded by Power Pivot and Power Query.
See also
If you are not getting a Power view option in Excel, follow this link to enable it:
IUUQTTVQQPSUPGGJDFDPNFOVTBSUJDMF5VSOPO1PXFS7JFXJO&YDFM
GPS8JOEPXTGGDBGDBBGBB

Integration with Power BI
[ 363 ]
Integrating Excel with Power BI
In this recipe, we will continue from the last recipe and create a dashboard by using this
data model. Use this excel file as a data source to build your Power BI tile.
How to do it...
Log in to IUUQBQQQPXFSCJDPN using your organization credentials. For first 
1.
time users, you can sign up for a trial version:
Create a new dashboard by clicking on the plus sign (+) next to Dashboards.
2.
Enter the name as WFOEPSQBZNFOU.
Click on GetData and under the Files tile click on select Local File and load your
3.
excel file and then import it into Power BI:

Integration with Power BI
[ 364 ]
On successful import your dashboard should look like this:
4.
Save your setup.

Integration with Power BI
[ 365 ]
Now you will be able to use this Power BI tile in Dynamics 365 for Operation
5.
workspaces:
To get this tile live on your WorkSpace you need to use the Power BI section in its
respective workspace.

Integration with Power BI
[ 366 ]
How it works...
Dynamics 365 for operation data source is the most useful data source for Power BI as
Power BI authoring tools, like Excel and Power BI Desktop. You have to connect to data
using an OData feed that uses Power Query and access data entities that can be used to
author Power BI reports and dashboards.
OData V4 authentication is required to expose Dynamics 365 for Finance and Operations
data entities as data feeds. Data entities included here are standard data entities and
aggregate data entities that enable you to summarize and calculate data in the OData feed.
All business users can get access to these feeds based on the security privileges defined in
the system. OData authentication can also be consumed by any other tool that supports the
OData protocol and works with Dynamics 365 for Finance and Operations data securely.
See also
If you are using Microsoft Excel 2013, you must download Power Query using
the following link:
IUUQXXXNJDSPTPGUDPNFOHCEPXOMPBEEFUBJMTBTQYJE
Developing interactive dashboards
Microsoft ships pre-built Dynamics 365 for Operation content packs for Power BI, which
includes dashboards and reports. For demonstration purposes we could also load these
content packs from 1PXFS#*DPN in our application and analyze the data.
In this recipe, we will show you how to develop a Power BI dashboard for organizational
content packs, to share their data and datasets, reports, and other visual analytical data
within their organization.

Integration with Power BI
[ 367 ]
How to do it...
Get Power BI desktop to connect your Azure SQL database from this link:
1.
IUUQTXXXNJDSPTPGUDPNFOVTEPXOMPBEEFUBJMTBTQYJE.
After installation, open Power BI Desktop and select the Get Data option, as
2.
shown in the following screenshot:

Integration with Power BI
[ 368 ]
Here we get various options for our data source. We could choose any of the
3.
options here, but for this recipe we will choose SQL Server:
Fill in the details as shown in the preceding screenshot and click OK to connect.
4.

Integration with Power BI
[ 369 ]
Select the two tables, InventSum and InventDim, as shown in the screenshot and
5.
click Load:
Select the Edit Queries option, as shown in the following screenshot:
6.

Integration with Power BI
[ 370 ]
It will open up Query editor, select Home |Combine group | Merge queries
under the combine tab, as shown in the following screenshot.
Under the Merge queries window, select the values as shown in the following
7.
screenshot:

Integration with Power BI
[ 371 ]
Here, we need to specify relationships between the two data sources on the
8.
InventDimId field and select Join type as Inner join. On the new merged query
Stock profile, select the specific column field as INVENTSITEID:

Integration with Power BI
[ 372 ]
On the Query Editor window, select Close & Apply:
9.
Select Aggregate fields such as AVAILPHYSICAL, DEDUCTED, POSTEDQTY,
10.
RECEIVED, and PHYSICALINVENT. Select fields INVENTSITEID and
ITEMID in AXIS and turn on drill down mode as shown in the following
screenshot:

Integration with Power BI
[ 373 ]
Publish the report to Power BI using the Publish button on the Share tab. Use a
11.
power BI account to publish the report:
Log in to QPXFSCJDPN and find the report StockProfile under the Reports tab:
12.

Integration with Power BI
[ 374 ]
How it works...
Here in this recipe, we load the data of InventSum and InventDim by connecting to the
Dynamics 365 for Finance and Operations SQL database. Once the queries for the two tables
are loaded then we merge the queries into one by specifying Inner Join on the InventDim
field.
Here we fetch the InventSiteId field from the InventDim table and provide the latter on the
AXIS of the chart. In addition to this we provide an ItemId field on the AXIS as well under
InventSiteId for drill down on stock of items on site.
Embedding Power BI visuals
Dashboard solutions and reporting can be crafted and viewed on their own in Power BI for
any organization and business unit. Dynamics 365 for operation provides Power BI columns
on some of the workspaces. Just click Get Started and it opens a Power BI tile catalog; these
are the dashboard solutions and reports that are pinned on Power BI.
In this recipe, we will show you how you can pin interactive dashboards developed on
Power BI to a Dynamics 365 for Finance and Operations workspace to provide intuitive
visuals. We could also open 1PXFS#*DPN from here by clicking on dashboard for a more
interactive analysis.
How to do it...
Log in to 1PXFS#*DPN and create a new dashboard by using a plus (+) sign to add
1.
a blank dashboard.

Integration with Power BI
[ 375 ]
Access our report Stock profile and select the option Pin visual on the report:
2.
Now log in to Dynamics 365 for Finance and Operations and move to Category
3.
and product management workspace and connect to Power BI.
Select the tile for Stock profile and press OK to embed it in Dynamics 365 for
4.
Finance and Operations:

Integration with Power BI
[ 376 ]
This embeds the screen on our workspcae. Furthermore, for analysis and drill-
5.
down purposes we could double-click on the report and open it in 1PXFS#*DPN
for more interactive analysis:
How it works...
In the preceding recipe, we have obtained analytical data by querying an SQL database. The
query is used to aggregate and calculate data on InventSum and create a power BI tile. We
are already signed into Dynamics 365 for Finance and Operations using AAD (Azure
Active Directory), so authorization of a connection between Dynamics 365 for Finance and
Operations and Power BI is done already. Power BI tiles and visualizations are loaded,
which we could pin to the workspace of Dynamics 365 for Finance and Operations.

9
Integration with Services
In this chapter, we will cover the following recipes:
Authenticating a native client app
Creating a custom service
Consuming custom services in JSON
Consuming custom services in SOAP
Consuming OData services
Consuming external web services
Introduction
In a cross-platform environment and large enterprises, there are many scenarios wherein
many external or third-party solutions are used, which might be a web application or an
application inside a domain. They need to integrate data with Dynamics 365 for Finance
and Operations in real time or at specified intervals depending on the nature of the
business, such as currency exchange rates from banks, syncing with POS terminals, and
inbound/outbound integrations with other legacy systems.
Dynamics 365 provides us with ample options that we can use for integrating, such as
custom services that we create to expose X++ business logic through a service interface for
inbound and outbound integrations, OData REST endpoints that encapsulates Dynamics
365 for Finance and Operations business entities and allows us to perform CRUD
operations using OAuth V2.0.
In this chapter, we will learn to use various integration technologies using simple business
solution examples that are required day-to-day.

Integration with Services
[ 378 ]
Authenticating a native client app
Azure Active Directory (AAD) uses OAuth 2.0 to enable you to authorize access to web
applications and web APIs in your Azure AD tenant. This guide is language independent,
and describes how to send and receive HTTP messages without using any of our open-
source libraries.
OData Services, JSON-based custom services, and REST metadata services support
standard OAuth 2.0 authentication.
Getting ready
Although we can create multiple types of apps using ADD, here we will discuss two kinds
of applications that are supported in Microsoft AAD for Dynamics 365 for Operation:
Native client application: This requires a redirect URI, which Azure AD uses to
return token responses. This flow uses a username and password for
authentication and authorization.
Web App/API (Confidential client): A confidential client is an application that
can keep a client password confidential to the world. It uses a client app ID and a
client secret key to prepare client credentials. The authorization server assigns
this client password to the client application.
These details are shown on Microsoft's official website.
Registering an app with ADD will create an application ID for a new application and also
enables it to receive tokens from external systems. Let's see how we can add a new native
app in Azure Active Directory. In this recipe, get the help of the NuGet Package Manager
Console to install the .JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"DUJWF%JSFDUPSZ library.
To get more details on how to install the
.JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"DUJWF%JSFDUPSZ library, visit
IUUQTXXXOVHFUPSHQBDLBHFT.JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"
DUJWF%JSFDUPSZ.

Integration with Services
[ 379 ]
How to do it...
Log in to the Azure portal (IUUQTQPSUBMB[VSFDPN).
1.
If you have multiple AAD tenants, select the one that you want to use to create a
2.
new app.
Go to Menu in the left corner of the portal and select Azure active directory |
3.
App registration. The following screenshot shows the form to add a new
application:
Click on New application registration, and, in the new form, fill in all the details
4.
as in the following table and hit the create button:
Name
PacktDataIntegarionApp
Application type Native
Redirect URI
IUUQT1BDLU%BUB*OUFHSBUJPO"QQ

Integration with Services
[ 380 ]
Your form must look as follows:

Integration with Services
[ 381 ]
On completion of this registration, AD assigns your application a unique client
5.
identifier, that is, Application ID to your application:
Check the settings and make sure all other properties for this new application are
6.
in place before using it. Refer to the following screenshot:

Integration with Services
[ 382 ]
Now let's register this app in Dynamics 365 for Finance and Operations. Navigate
7.
to System administration | Setup | Azure Active Directory applications form,
click on the new button and fill in the required details as follows:
Client Id GEEGFDB
Name
1BDLU%BUB*OUFHSBUJPO"QQ
User Id
"ENJO
Your record should look as follows:
8.
After this final step, we are now good to use this app in our code.
Now, create a new Visual Studio C# class library project, which we will utilize for
9.
getting authentication to access Dynamics 365 for Finance and Operationss ERP.
Later, we will utilize the same to authenticate access to Dynamics 365 for Finance
and Operations by our web service.
Create a new class $MJFOU$POGJHVSBUJPODT ,where we will specify our
10.
configuration using properties. Specify the following namespaces:
VTJOH4ZTUFN
VTJOH4ZTUFN$PMMFDUJPOT(FOFSJD
VTJOH4ZTUFN-JOR
VTJOH4ZTUFN5FYU
VTJOH4ZTUFN5ISFBEJOH5BTLT
Add the following specified code in our class. Here, we will set the default values
11.
of properties:
QVCMJDQBSUJBMDMBTT$MJFOU$POGJHVSBUJPO
\
QVCMJDTUBUJD$MJFOU$POGJHVSBUJPO%FGBVMU\HFU\SFUVSO

Integration with Services
[ 383 ]
$MJFOU$POGJHVSBUJPO0OF#PY^^
QVCMJDTUBUJD$MJFOU$POGJHVSBUJPO0OF#PYOFX
$MJFOU$POGJHVSBUJPO

\
6SJ4USJOH
IUUQTEEFWEQLDEGFCDBPTDMPVEBY
EZOBNJDTDPN
"DUJWF%JSFDUPSZ3FTPVSDF
IUUQTEEFWEQLDEGFDBPTDMPVEBYEZOBNJDTDPN
"DUJWF%JSFDUPSZ5FOBOU
IUUQTMPHJOXJOEPXTOFUNZ5FOBOUPONJDSPTPGUDPN
"DUJWF%JSFDUPSZ$MJFOU"QQ*EEBEBGFFGFBC

^
QVCMJDTUSJOH6SJ4USJOH\HFUTFU^
QVCMJDTUSJOH"DUJWF%JSFDUPSZ3FTPVSDF\HFUTFU^
QVCMJD4USJOH"DUJWF%JSFDUPSZ5FOBOU\HFUTFU^
QVCMJD4USJOH"DUJWF%JSFDUPSZ$MJFOU"QQ*E\HFUTFU^
^
We will create a new class, where we will perform actual operations to get
12.
authentication, and name this class as 0"VUI)FMQFS:
VTJOH.JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"DUJWF%JSFDUPSZ
VTJOH4ZTUFN
VTJOH4ZTUFN$PMMFDUJPOT(FOFSJD
VTJOH4ZTUFN-JOR
VTJOH4ZTUFN5FYU
VTJOH4ZTUFN5ISFBEJOH5BTLT
QVCMJDDMBTT0"VUI)FMQFS
\
TVNNBSZ 
5IFIFBEFSUPVTFGPS0"VUI
TVNNBSZ 
QVCMJDDPOTUTUSJOH0"VUI)FBEFS"VUIPSJ[BUJPO
TVNNBSZ 
SFUSJFWFTBOBVUIFOUJDBUJPOIFBEFSGSPNUIFTFSWJDF
TVNNBSZ 
SFUVSOT UIFBVUIFOUJDBUJPOIFBEFSGPSUIF8FC"1*DBMM
SFUVSOT 
QVCMJDTUBUJDTUSJOH(FU"VUIFOUJDBUJPO)FBEFS
CPPM
VTF8FC"QQ"VUIFOUJDBUJPOGBMTF
\
TUSJOHBBE5FOBOU
$MJFOU$POGJHVSBUJPO%FGBVMU"DUJWF%JSFDUPSZ5FOBOU
TUSJOHBBE$MJFOU"QQ*E
$MJFOU$POGJHVSBUJPO%FGBVMU"DUJWF%JSFDUPSZ$MJFOU"QQ*E

Integration with Services
[ 384 ]
TUSJOHBBE3FTPVSDF
$MJFOU$POGJHVSBUJPO%FGBVMU"DUJWF%JSFDUPSZ3FTPVSDF
"VUIFOUJDBUJPO3FTVMUBVUIFOUJDBUJPO3FTVMU
WBSBVUIFOUJDBUJPO$POUFYUOFX
"VUIFOUJDBUJPO$POUFYU
BBE5FOBOU
5PLFO$BDIF%FGBVMU4IBSFE
BVUIFOUJDBUJPO3FTVMU
BVUIFOUJDBUJPO$POUFYU"DRVJSF5PLFO"TZOD
BBE3FTPVSDFBBE$MJFOU"QQ*E
OFX6SJ
IUUQTQBDLU*OUFHSBUJPO"QQ
OFX1MBUGPSN1BSBNFUFST
1SPNQU#FIBWJPS"VUP3FTVMU
$SFBUFBOEHFU+85UPLFO
SFUVSOBVUIFOUJDBUJPO3FTVMU$SFBUF"VUIPSJ[BUJPO)FBEFS

^
^
Now, to test the authentication, we could create a new console application, name
13.
it 1BDLU5FTU"VUIFOUJDBUJPO ,and set it as a start-up project. Add new code in
our 1SPHSBNDT class:
VTJOH4ZTUFN
VTJOH4ZTUFN$PMMFDUJPOT(FOFSJD
VTJOH4ZTUFN-JOR
VTJOH4ZTUFN5FYU
VTJOH4ZTUFN5ISFBEJOH5BTLT
VTJOH"VUIFOUJDBUJPO6UJMJUZ
OBNFTQBDF1BDLU5FTU"VUIFOUJDBUJPO
\
DMBTT1SPHSBN
\
TUBUJDWPJE.BJO
TUSJOH<>BSHT
\
WBSPBVUI)FBEFS0"VUI)FMQFS(FU"VUIFOUJDBUJPO)FBEFS

$POTPMF8SJUF-JOF
PBVUI)FBEFS5P4USJOH

$POTPMF3FBE-JOF

^
^
^

Integration with Services
[ 385 ]
Now, click on the Start button in VS and you will be prompted to enter the
14.
username and password of the Dynamics 365 for Finance and Operations user:

Integration with Services
[ 386 ]
It will present you with an Authentication header, as shown in the following
15.
screenshot:
You need this authentication header while interacting with this app.
How it works...
Azure active directory provides a secure sign in and authorization for its services.
Dynamics 365 for Finance and Operations is also based on a SaaS (Software as a Service)
module, and Azure plays an important role in providing all required prerequires for your
environment.
When you register a new app in AAD, it creates an application ID for it and this can be used
to register in Dynamics 365 and in your code to enable a bridge between Dynamics 365 and
your application. While calling this application in a console app, you get an interface where
you can use your system credentials to get an authentication header.
Here, while registering the app, we are presented with options to select Web Application or
Native Client Application. We will be utilizing this app for authentication in console
applications, so here we are using Native Client Application.

Integration with Services
[ 387 ]
We create a class $MJFOU$POGJHVSBUJPODT to specify the configuration for accessing
authorization header. We create properties for URI, active directory resource, aadTenant,
and azure active directory client app ID and specify their default values. Next, we create an
authorization helper class 0"VUI)FMQFSDT . Here, we first create an object of
authorization context by calling "VUIFOUJDBUJPO$POUFYU
4USJOH5PLFO$BDIF that
will return us the context with the address of the authority. Passing
5PLFO$BDIF%FGBVMU4IBSFE means that the authentication library will automatically
save tokens in default 5PLFO$BDIF whenever we obtain them.
There's more...
If you are using web applications, provide the sign-on URL, which must be the base URL of
your app, where users can sign in, for example, IUUQMPDBMIPTU.
To acquire a security token from the authority, we use the overloaded method
"DRVJSF5PLFO"TZOD , where we pass BBE3FTPVSDF, client app ID, and the redirect URI
specified on the native client app:
aadResource: Identifies the target resource that is the recipient of the requested
token
client App Id: Identifies the Azure client app that has the requested token
redirect URI: Identifies the URI address that needs to be returned on response
from the Azure authentication authority
PlatformParameters: Identifies object of additional parameters used for
authorization
Next, we get an object of the BVUIPSJ[BUJPO3FTVMU class and call its method
$SFBUF"VUIPSJ[BUJPO)FBEFS, which returns an authorization header.
See also
App sample on GitHub:
IUUQTHJUIVCDPN"[VSF4BNQMFTVUG&$RVFSZBDUJWFEJSFDUPSZ
Code sample:
IUUQTEPDTNJDSPTPGUDPNFOHCB[VSFBDUJWFEJSFDUPSZEFWFMPQBDUJWF
EJSFDUPSZDPEFTBNQMFT

Integration with Services
[ 388 ]
Creating a custom service
In Dynamics 365 for Finance and Operations, we still have custom services available to
expose the system's functionality to the external world. Microsoft uses the SysOperation
framework, where data contracts are decorated with standard attributes, and it
automatically serializes and desterilizes data that is shared between two applications. Any
service method can be exposed to the external world by using 4ZT&OUSZ1PJOU"UUSJCVUF
and then specifying the service operation under Application Explorer | AOT | Services.
In this recipe, we will create a custom service that will be consumed in subsequent recipes
to demonstrate how it could be consumed by the external world.
Getting ready
For this recipe, you should have a little knowledge of data contracts and service methods.
How to do it...
Create a new Dynamics 365 for Finance and Operations project in Visual Studio
1.
and name it #VJMEJOH$VTUPN4FSWJDF.
In the project, create a new class, which will serve as a data contract for our
2.
custom web service. Name this class 1BDLU$VTU#BMBODF%BUB$POUSBDU. This
class is decorated with the %BUB$POUSBDU attribute and the data methods are
decorated with %BUB.FNCFS"UUSJCVUF. We will create the following data
methods in our class, which will be exposed to the external world as parameters:
<
%BUB$POUSBDU"UUSJCVUF4ZT0QFSBUJPO(SPVQ"UUSJCVUF
	%BUF	
!"QQMJDBUJPO1MBUGPSN4JOHMF4QBDF		
>
DMBTT1BDLU$VTU#BMBODF%BUB$POUSBDU
\
5SBOT%BUFUSBOT%BUF
$VTU"DDPVOUBDDPVOU/VN
%BUB"SFB*EEBUB"SFB*E
TVNNBSZ 
(FUTPSTFUTUIFWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
%BUF5SBOTBDUJPO%BUF
TVNNBSZ 
QBSBNOBNF@USBOT%BUF 

Integration with Services
[ 389 ]
5IFOFXWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
%BUF5SBOTBDUJPO%BUF
QBSBN 
SFUVSOT 
5IFDVSSFOUWBMVFPGEBUBDPOUSBDUQBSBNFUFS
%BUF5SBOTBDUJPO%BUF
SFUVSOT 
<%BUB.FNCFS"UUSJCVUF
	%BUF5SBOTBDUJPO%BUF	
4ZT0QFSBUJPO-BCFM"UUSJCVUF
MJUFSBM4US
!4:4
4ZT0QFSBUJPO(SPVQ.FNCFS"UUSJCVUF
	%BUF	
4ZT0QFSBUJPO%JTQMBZ0SEFS"UUSJCVUF
		>UPEBZ	TEBUF
QVCMJD5SBOT%BUFQBSN5SBOT%BUF
5SBOT%BUF@USBOT%BUF
USBOT%BUF
\
USBOT%BUF@USBOT%BUF
SFUVSOUSBOT%BUF
^
<%BUB.FNCFS"UUSJCVUF
	$PNQBOZ	
4ZT0QFSBUJPO-BCFM"UUSJCVUF
MJUFSBM4US
!4:4
4ZT0QFSBUJPO(SPVQ.FNCFS"UUSJCVUF
	$PNQBOZ	
4ZT0QFSBUJPO%JTQMBZ0SEFS"UUSJCVUF
		>UPEBZ	TEBUF
QVCMJD%BUB"SFB*EQBSN%BUB"SFB*E
%BUB"SFB*E@EBUB"SFB*E
EBUB"SFB*E
\
EBUB"SFB*E@EBUB"SFB*E
SFUVSOEBUB"SFB*E
^
TVNNBSZ 
(FUTPSTFUTUIFWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
$VTUPNFS"DDPVOU
TVNNBSZ 
QBSBNOBNF@BDDPVOU/VN 
5IFOFXWBMVFPGUIFEBUBDPOUSBDUQBSBNFUFS
$VTUPNFS"DDPVOU
QBSBN 
SFUVSOT 
5IFDVSSFOUWBMVFPGEBUBDPOUSBDUQBSBNFUFS
$VTUPNFS"DDPVOU
SFUVSOT 
<%BUB.FNCFS"UUSJCVUF
	$VTUPNFS"DDPVOU	
4ZT0QFSBUJPO-BCFM"UUSJCVUF
MJUFSBM4US
"DDPVOUOVNCFS
4ZT0QFSBUJPO(SPVQ.FNCFS"UUSJCVUF
	"DDPVOU	
4ZT0QFSBUJPO%JTQMBZ0SEFS"UUSJCVUF
		>
QVCMJD$VTU"DDPVOUQBSN$VTU"DDPVOU
$VTU"DDPVOU@BDDPVOU/VN

Integration with Services
[ 390 ]
BDDPVOU/VN
\
BDDPVOU/VN@BDDPVOU/VN
SFUVSOBDDPVOU/VN
^
^
Now, let's create a service method that will accept a data contract as a parameter
3.
and returns back the balance of the customer:
DMBTT1BDLU$VTU#BMBODF4FSWJDF
\
<"JG$PMMFDUJPO5ZQF
	SFUVSO	5ZQFT3FBM
FYUFOEFE5ZQF4US
"NPVOU>
QVCMJD"NPVOUQSPDFTT%BUB
1BDLU$VTU#BMBODF%BUB$POUSBDU
@DVTU#BMBODF%BUB$POUSBDU
\
2VFSZ3VORVFSZ3VO
$VTU5BCMFDVTU5BCMF
"NPVOUCBMBODF
4ZTUFN&YDFQUJPOFY
USZ
\
JG
@DVTU#BMBODF%BUB$POUSBDUQBSN%BUB"SFB*E

\
DIBOHFDPNQBOZ
@DVTU#BMBODF%BUB$POUSBDUQBSN%BUB"SFB*E

\
DSFBUFBOFXRVFSZSVOPCKFDU
WBSRVFSZOFX2VFSZ

WBSRCET
RVFSZBEE%BUB4PVSDF
UBCMF/VN
$VTU5BCMF
RCETBEE3BOHF
GJFME/VN
$VTU5BCMF"DDPVOU/VNWBMVF
@DVTU#BMBODF%BUB$POUSBDUQBSN$VTU"DDPVOU

RVFSZ3VOOFXRVFSZ3VO
RVFSZ
MPPQBMMSFTVMUTGSPNUIFRVFSZ
XIJMF
RVFSZ3VOOFYU

\
DVTU5BCMFRVFSZ3VOHFU
UBCMF/VN
DVTU5BCMF
EJTQMBZUIFCBMBODF
CBMBODFDVTU5BCMFCBMBODF.45

^
^
^
^

Integration with Services
[ 391 ]
DBUDI
&YDFQUJPO$-3&SSPS
\
FY$MS*OUFSPQHFU-BTU&YDFQUJPO

JG
FYOVMM
\
FYFYHFU@*OOFS&YDFQUJPO

JG
FYOVMM
\
FSSPS
FY5P4USJOH

^
^
^
SFUVSOCBMBODF
^
^
Create a new service object under the services node with the name
4.
1BDLU$VTU#BMBODF4FSWJDF and set the following properties on it:
Property
Value
Class
1BDLU$VTU#BMBODF4FSWJDF
External name 1BDLU$VTU#BMBODF4FSWJDF
Namespace
IUUQTDIFNBTQBDLUDPN$VTU#BMBODF
Right-click on the Service Operations node under our service
5.
1BDLU$VTU#BMBODF4FSWJDF , select new service operations and set the
following properties:
Method QSPDFTT%BUB
Name
QSPDFTT%BUB
Create a new object under the Service groups node and name it
6.
1BDLU$VTU#BMBODF4FSWJDFT. Right-click and select New Service . Set the
following properties on it:
Name
Service
Service 1BDLU$VTU#BMBODF4FSWJDF

Integration with Services
[ 392 ]
Build the project and, on successful build, our web service is available to the
7.
external world.
How it works...
Once the project is built, our web service is deployed on SOAP and JSON endpoints
automatically. Now, the contract class that we created here serves the purpose of passing 
the parameters that are required by our service for processing business logic. The data
member attribute on the method in the contract class tells the system this method needs to
be exposed to the external world as a parameter.
Our service method QSPDFTT%BUB has the return type Amount EDT, but the external world
doesn't know about this type, so we have used the "JG$PMMFDUJPO5ZQF attribute to return
the type Real.
Consuming custom services in JSON
Custom services are always deployed on two endpoints:
JSON (JavaScript Object Notation) endpoint
SOAP (Simple Object Access Protocol) endpoint
In Dynamics 365 for Finance and Operations, all service groups under AOT | Service
groups are automatically deployed. Therefore, all services that need to be deployed must be
a part of a service group.
JSON endpoint is deployed at
IUUQTIPTU@VSJ BQJ4FSWJDFTTFSWJDF@HSPVQ@OBNF TFSWJDF@HSPVQ@TFS
WJDF@OBNF PQFSBUJPO@OBNF .
In this recipe, we will consume Dynamics 365 for Finance and Operations custom web
service in JSON.

Integration with Services
[ 393 ]
Getting ready
You need to install /FXUPOTPGU+TPO NuGet to build this recipe. So, navigate to NuGet
Package Manager Console in Visual Studio and install /FXUPOTPGU+TPO. As we have
done in the previous recipe, get the help of NuGet Package Manager Console to install the
.JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"DUJWF%JSFDUPSZ library.
To get more details on how to install the
.JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"DUJWF%JSFDUPSZ library, visit
IUUQTXXXOVHFUPSHQBDLBHFT/FXUPOTPGU+TPO.
How to do it...
Create a new C# console application in our project and name it
1.
1BDLU+TPO"QQMJDBUJPO. Here, we need to add a reference to
/FXUPOTPGU+TPO and our authentication project built in the first recipe.
Create a new class for a data contract, where we need to set the properties:
2.
QVCMJDDMBTT$VTU#BMBODF%BUB$POUSBDU
\
QVCMJDTUSJOH$PNQBOZ\HFUTFU^
QVCMJDTUSJOH$VTUPNFS"DDPVOU\HFUTFU^
QVCMJDTUSJOH%BUF5SBOTBDUJPO%BUF\HFUTFU^
^
Create a new class 3PPU0CKFDU for our datacontract that we need to serialize in
3.
JSON and pass as a parameter when calling the service:
QVCMJDDMBTT3PPU0CKFDU
\
QVCMJDPCKFDU$BMM$POUFYU\HFUTFU^
QVCMJD$VTU#BMBODF%BUB$POUSBDU@DVTU#BMBODF%BUB$POUSBDU\
HFUTFU^
^

Integration with Services
[ 394 ]
Now, in our class 1SPHSBNDT, which by default is added when we create the
4.
console application project, add the following namespaces:
VTJOH"VUIFOUJDBUJPO6UJMJUZ
VTJOH/FXUPOTPGU+TPO
VTJOH4ZTUFN
VTJOH4ZTUFN*0
VTJOH4ZTUFN/FU
VTJOH4ZTUFN5FYU
Add the following code in our class 1SPHSBNDT, which we will use to call the
5.
web service in JSON:
DMBTT1SPHSBN
\
QVCMJDTUBUJDTUSJOH(FU$VTU#BMBODF0QFSBUJPO1BUI
$MJFOU$POGJHVSBUJPO%FGBVMU6SJ4USJOH
BQJTFSWJDFT1BDLU$VTU#BMBODF4FSWJDFT
4FSWJDFQSPDFTT%BUB
TUBUJDWPJE.BJO
TUSJOH<>BSHT
\
WBSDVTU#BMBODFOFX$VTU#BMBODF%BUB$POUSBDU

DVTU#BMBODF$VTUPNFS"DDPVOU%&
DVTU#BMBODF$PNQBOZ64.'
DVTU#BMBODF%BUF5SBOTBDUJPO%BUF5
WBSSPPU+TPOOFX3PPU0CKFDU

SPPU+TPO@DVTU#BMBODF%BUB$POUSBDUDVTU#BMBODF
TUSJOHKTPO+TPO$POWFSU4FSJBMJ[F0CKFDU
SPPU+TPO
WBSSFRVFTU
)UUQ8FC3FRVFTU$SFBUF
(FU$VTU#BMBODF0QFSBUJPO1BUI
SFRVFTU)FBEFST<0"VUI)FMQFS0"VUI)FBEFS>
0"VUI)FMQFS(FU"VUIFOUJDBUJPO)FBEFS

SFRVFTU.FUIPE1045
SFRVFTU$POUFOU-FOHUI
4ZTUFN5FYU65'&ODPEJOHFODPEJOHOFX
4ZTUFN5FYU65'&ODPEJOH

#ZUF<>CZUF"SSBZFODPEJOH(FU#ZUFT
KTPO
SFRVFTU$POUFOU-FOHUICZUF"SSBZ-FOHUI
SFRVFTU$POUFOU5ZQF!BQQMJDBUJPOKTPO
VTJOH
4USFBNEBUB4USFBNSFRVFTU(FU3FRVFTU4USFBN

\
EBUB4USFBN8SJUF
CZUF"SSBZCZUF"SSBZ-FOHUI
^

Integration with Services
[ 395 ]
MPOHMFOHUI
USZ
\
VTJOH
)UUQ8FC3FTQPOTFSFTQPOTF

)UUQ8FC3FTQPOTFSFRVFTU(FU3FTQPOTF

\
VTJOH
4USFBNSFTQPOTF4USFBN
SFTQPOTF(FU3FTQPOTF4USFBN

\
VTJOH
4USFBN3FBEFSTUSFBN3FBEFSOFX
4USFBN3FBEFS
SFTQPOTF4USFBN
\
TUSJOHSFTQPOTF4USJOH
TUSFBN3FBEFS3FBE5P&OE

$POTPMF8SJUF-JOF
SFTQPOTF4USJOH
^
^
MFOHUISFTQPOTF$POUFOU-FOHUI
^
^
DBUDI
8FC&YDFQUJPOFY
\
8SJUFDPEFUPMPHUIFFYDFQUJPOIFSF
^
$POTPMF3FBE-JOF

^
^
Let's run our application and check the results. Set the project as a startup project
6.
and click the start button on Visual Studio. You will get a prompt to add a
username and password for authentication; after you sign in, you will get the
result shown in the following screenshot:

Integration with Services
[ 396 ]
So, here, we get the balance of customer %& from USMF company.
7.
How it works...
Here, we use /FXUPO4PGU+TPO to use the +TPO$POWFSU class to serialize C# object in
JSON. The more difficult part is to prepare a JSON string that can be understood by D365 to
fetch parameters. We first start by creating an object for $VTU#BMBODF%BUB$POUSBDU and
set contract parameters such as $VTUPNFS"DDPVOU, $PNQBOZ, and so on. Finally, we have to
create a root contract that we will serialize and pass a JSON string to our web service. This
contract consists of EBUB$POUSBDU and it is called context contract. Here, the
)UUQ8FC3FRVFTU$SFBUF method creates an instance of the JSON endpoint URI that we
provide, and then we need to get authentication from azure to access our Dynamics 365 for
Finance and Operations ERP application.
We specify .FUIPE1045 on our request to submit data to be processed by the JSON
endpoint. MIME type for JSON is "application/JSON" and default encoding is
UTF8Encoding, which we used to prepare the content and make objects of a request stream
to write encrypted data on the request stream. In the next step, invoke the (FU3FTQPOTF,
which gives us a 8FCSFTQPOTF object, which we implicitly convert in the
)UUQ8FC3FTQPOTF object, and then use it to get a response stream.
This is how we call the web service using JSON. You may note that calling a web service in
JSON has less overheads and provides a significantly faster response than SOAP.
There's more...
Microsoft has introduced a REST (Representational State Transfer) metadata service in
Dynamics 365 for Finance and Operations, which is a read-only service. In terms of OData,
users can make only (&5 requests, since it is an OData implementation. The main purpose
of this endpoint is to provide metadata information for application elements. The
Application Explorer retrieves the data using this service API.
REST endpoint is hosted at IUUQ<CBTF63*>.FUBEBUB.
Currently, this endpoint provides metadata for the following elements:

Integration with Services
[ 397 ]
Labels: This gets labels from the system. They have a dual pair key, language, and ID, so
that you can retrieve the value of the label.
Example:
IUUQT<CBTF63*>NFUBEBUB-BCFMT
*E	!47$@0%BUB-BCFM'JMF-BCFM`-BOHVBHF	FOVT	
Data entities: This returns a JSON-formatted list of all the data entities in the system.
Example:
IUUQT<CBTF63*>.FUBEBUB%BUB&OUJUJFT
These details are shown on Microsoft's official website.
Consuming custom services in SOAP
Dynamics 365 for Finance and Operations also allows us to consume web services on the
SOAP endpoint. The main advantages of using SOAP protocol is its descriptive definition,
which helps us identify the contracts, proxy classes, and service methods.
Usually, the SOAP endpoint is deployed at
IUUQTIPTU@VSJ TPBQ4FSWJDFTTFSWJDF@HSPVQ@OBNF .
In this recipe, we will consume our same custom web service at the SOAP endpoint.
Getting ready
In this recipe, we will get the balance of a customer and verify that it is the same in
Dynamics 365 for Finance and Operations. Our code is inspired by solutions at
IUUQTHJUIVCDPN.JDSPTPGU%ZOBNJDT"9
*OUFHSBUJPOUSFFNBTUFS4FSWJDF4BNQMFT. So, we will use the Soap Utility solution
provided by Microsoft to get our SOAP endpoint address and binding element. Get the help
of the NuGet Package Manager Console to install the
.JDSPTPGU*EFOUJUZ.PEFM$MJFOUT"DUJWF%JSFDUPSZ library.

Integration with Services
[ 398 ]
How to do it...
Create a console application and name it 1BDLU40"1"QQMJDBUJPO. Add a
1.
reference to the project 40"16UJMJUZ project and our authentication project.
Add a service reference to our custom web service hosted at the SOAP endpoint
2.
IUUQTEEFWEQLDEGFCPTDMPVEBYEZOBNJDTDPNTPBQTF
SWJDFTQBDLU$VTU#BMBODF4FSWJDFT.
Use the following namespaces in our class to utilize already existing APIs:
3.
VTJOH"VUIFOUJDBUJPO6UJMJUZ
VTJOH4ZTUFN
VTJOH4ZTUFN4FSWJDF.PEFM
VTJOH4ZTUFN4FSWJDF.PEFM$IBOOFMT
VTJOH4PBQ6UJMJUZ$VTU#BMBODF
Add the following code in our 1SPHSBNDT class, which will call Customer
4.
balance web services to get the customer balance from Dynamics 365 for Finance
and Operations:
DMBTT1SPHSBN
\
QVCMJDDPOTUTUSJOH$VTU#BMBODF4FSWJDF/BNF
QBDLU$VTU#BMBODF4FSWJDFT
<45"5ISFBE>
TUBUJDWPJE.BJO
TUSJOH<>BSHT
\
WBSBPT6SJ4USJOH$MJFOU$POGJHVSBUJPO%FGBVMU6SJ4USJOH
WBSPBVUI)FBEFS0"VUI)FMQFS(FU"VUIFOUJDBUJPO)FBEFS

WBSTFSWJDF6SJ4USJOH
4PBQ6UJMJUZ4PBQ)FMQFS(FU4PBQ4FSWJDF6SJ4USJOH
$VTU#BMBODF4FSWJDF/BNFBPT6SJ4USJOH
WBSFOEQPJOU"EESFTTOFX
4ZTUFN4FSWJDF.PEFM&OEQPJOU"EESFTT
TFSWJDF6SJ4USJOH
WBSCJOEJOH4PBQ6UJMJUZ4PBQ)FMQFS(FU#JOEJOH

WBSDMJFOUOFX1BDLU$VTU#BMBODF4FSWJDF$MJFOU
CJOEJOH
FOEQPJOU"EESFTT
WBSDIBOOFMDMJFOU*OOFS$IBOOFM
4PBQ6UJMJUZ$VTU#BMBODF1BDLU$VTU#BMBODF%BUB$POUSBDU
DIBOHF
DIBOHFOFX

Integration with Services
[ 399 ]
4PBQ6UJMJUZ$VTU#BMBODF1BDLU$VTU#BMBODF%BUB$POUSBDU

DIBOHF$VTUPNFS"DDPVOU%&
DIBOHF$PNQBOZ64.'
4PBQ6UJMJUZ$VTU#BMBODFQSPDFTT%BUBVQEBUF
WBSDBMMDPOUFYUOFX
4PBQ6UJMJUZ$VTU#BMBODF$BMM$POUFYU

DBMMDPOUFYU$PNQBOZ64.'
DBMMDPOUFYU-BOHVBHFFOVT
DBMMDPOUFYU1BSUJUJPO,FZJOJUJBM
VQEBUFOFX4PBQ6UJMJUZ$VTU#BMBODFQSPDFTT%BUB

VQEBUF@DVTU#BMBODF%BUB$POUSBDUDIBOHF
VQEBUF$BMM$POUFYUDBMMDPOUFYU
VTJOH
0QFSBUJPO$POUFYU4DPQFPQFSBUJPO$POUFYU4DPQF
OFX0QFSBUJPO$POUFYU4DPQF
DIBOOFM
\
)UUQ3FRVFTU.FTTBHF1SPQFSUZSFRVFTU.FTTBHF
OFX)UUQ3FRVFTU.FTTBHF1SPQFSUZ

SFRVFTU.FTTBHF)FBEFST<0"VUI)FMQFS0"VUI)FBEFS>
PBVUI)FBEFS
0QFSBUJPO$POUFYU$VSSFOU0VUHPJOH.FTTBHF1SPQFSUJFT<
)UUQ3FRVFTU.FTTBHF1SPQFSUZ/BNF>SFRVFTU.FTTBHF
WBSSFTVMU

4PBQ6UJMJUZ$VTU#BMBODF1BDLU$VTU#BMBODF4FSWJDF
DIBOOFMQSPDFTT%BUB
VQEBUF
$POTPMF8SJUF-JOF
#BMBODFPGDVTUPNFS\^JT\^
DIBOHF$VTUPNFS"DDPVOUSFTVMUSFTVMU
^
$POTPMF3FBE-JOF

^
^
Now, to check the output of our code, set our project as a startup project and run
5.
the console application by clicking the Start button on the Visual Studio toolbar.
You will get a prompt to enter your username and password to get an
6.
authentication header from azure. After successful authentication, a web service
call will be made by passing a contract and proxy to the service method:

Integration with Services
[ 400 ]
This is the output that we get from Dynamics 365 for Finance and Operations
7.
web service. Let's verify the output by navigating to USMF |
AccountsReceivables | Customers | AllCustomers. On customer %&,press
the Balance button and you will get a screen as follows:
You can see in the Dynamics 365 Customer form, the balance for this customer is
.
How it works...
Here, we first add a service reference of the SOAP endpoint. After adding a SOAP
endpoint, you can use Object browser to view the contract and service clients generated. We
utilize 4PBQ6UJMJUZ here to get a formatted endpoint address and binding to call the web
service client. We get the authentication packet and specify it on the request header of our
web service.

Integration with Services
[ 401 ]
We create an object of data contract to specify the parameters required to execute our
business logic. Also, call context here is required to set company, partition key, user ID, and
language to the web service. We specify the call context and data contract on our web
service method, request a call using the client proxy and get a response from the web
service as a customer balance which we print onscreen.
Consuming OData services
In Dynamics 365 for Finance and Operations, OData is a standard protocol for creating and
consuming data. Odata provides a REST (Representational State Transfer) endpoint, for
CRUD (Create, Read, Update, and delete) operations. To expose data entities on OData
endpoint, we need to mark the *T1VCMJD property of data entity as true in the Application
Object Tree (AOT). Users can use OData to insert and retrieve data using CRUD
functionality.
OData doesn't require a call context values, unlike SOAP, by default; it returns only data 
that belongs to the user's default company. We could specify a cross-company =true query
option to facilitate the user to fetch data from all other companies that they have access to.
Example:
IUUQ<CBTF63*>EBUB$VTUPNFSTDSPTTDPNQBOZUSVF
Getting ready
In this recipe, we will integrate a Vendor and verify that it is created in Dynamics 365 for
Finance and Operations. Our code is inspired by a solution at
IUUQTHJUIVCDPN"[VSF4BNQMFTVUG&$RVFSZBDUJWFEJSFDUPSZ. So, we
will use the ODataUtility solution provided by Microsoft for our OData integration, which
enables you to get Dynamics 365 data entities into your code.

Integration with Services
[ 402 ]
How to do it...
Create a new Console application project and name it as
1.
1BDLU0%BUB*OUFHSBUJPO"QQMJDBUJPO:
Add references to your Authentication project, which we created in the earlier
2.
recipe and 0%BUB6UJMJUZ and add the following namespaces:
VTJOH"VUIFOUJDBUJPO6UJMJUZ
VTJOH.JDSPTPGU0%BUB$MJFOU
VTJOH0%BUB6UJMJUZ.JDSPTPGU%ZOBNJDT%BUB&OUJUJFT
VTJOH4ZTUFN
VTJOH4ZTUFN-JOR

Integration with Services
[ 403 ]
In the following code, for the class 0%BUB$SFBUF7FOEPS ,we first get an
3.
authentication header and set it on the OData context:
DMBTT0%BUB$SFBUF7FOEPS
\
QVCMJDTUBUJDTUSJOH0%BUB&OUJUZ1BUI
$MJFOU$POGJHVSBUJPO%FGBVMU6SJ4USJOHEBUB
^
Add a method to create a new vendor, with the following code. Here, we are
4.
using static values for a new vendor:
QVCMJDTUBUJDWPJE$SFBUF7FOEPS
3FTPVSDFTDPOUFYU
\
TUSJOHWFOEPS"DDPVOU/VNCFS1BDLU
USZ
\
7FOEPSWFOEPS&OUJUZOFX7FOEPS

%BUB4FSWJDF$PMMFDUJPO7FOEPS WFOEPS&OUJUZ$PMMFDUJPO
OFX%BUB4FSWJDF$PMMFDUJPO7FOEPS 
DPOUFYU
WFOEPS&OUJUZ$PMMFDUJPO"EE
WFOEPS&OUJUZ
WFOEPS&OUJUZ7FOEPS"DDPVOU/VNCFSWFOEPS"DDPVOU/VNCFS
WFOEPS&OUJUZ7FOEPS/BNF1BDLUQSJOUFST
WFOEPS&OUJUZ7FOEPS4FBSDI/BNF1BDLUQSJOUFST
WFOEPS&OUJUZ7FOEPS1BSUZ5ZQF0SHBOJ[BUJPO
WFOEPS&OUJUZ"EESFTT$PVOUSZ3FHJPO*E*/%
WFOEPS&OUJUZ$VSSFODZ$PEF*/3
WFOEPS&OUJUZ7FOEPS(SPVQ*E
WFOEPS&OUJUZ%BUB"SFB*E64.'
DPOUFYU4BWF$IBOHFT
4BWF$IBOHFT0QUJPOT1PTU0OMZ4FU1SPQFSUJFT]
4BWF$IBOHFT0QUJPOT#BUDI8JUI4JOHMF$IBOHFTFU
$POTPMF8SJUF-JOF
TUSJOH'PSNBU
7FOEPS\^DSFBUFE
WFOEPS"DDPVOU/VNCFS
^
DBUDI
%BUB4FSWJDF3FRVFTU&YDFQUJPOF
\
$POTPMF8SJUF-JOF
TUSJOH'PSNBU
7FOEPS\^GBJMFE
WFOEPS"DDPVOU/VNCFS
^
^
^

Integration with Services
[ 404 ]
Now, add a main method with the following code, where we set the other
5.
required parameter and get the authentication header:
TUBUJDWPJE.BJO
TUSJOH<>BSHT
\
6SJP%BUB6SJOFX6SJ
0%BUB&OUJUZ1BUI6SJ,JOE"CTPMVUF
WBSDPOUFYUOFX3FTPVSDFT
P%BUB6SJ
DPOUFYU4FOEJOH3FRVFTUOFX
&WFOU)BOEMFS4FOEJOH3FRVFTU&WFOU"SHT 
EFMFHBUF
PCKFDUTFOEFS4FOEJOH3FRVFTU&WFOU"SHTF
\
WBSBVUIFOUJDBUJPO)FBEFS
0"VUI)FMQFS(FU"VUIFOUJDBUJPO)FBEFS

F3FRVFTU.FTTBHF4FU)FBEFS
0"VUI)FMQFS0"VUI)FBEFS
BVUIFOUJDBUJPO)FBEFS
^
$SFBUF7FOEPS
DPOUFYU
$POTPMF3FBE-JOF

^
Set our project as a startup project and execute the project using the Start button
6.
in Visual Studio. You will get a prompt to enter a username and password, which
you need to enter to get authentication. Once authenticated, our OData
application will create the user and show the following screen:
We could verify the vendor created by logging into Dynamics 365 for Finance
7.
and Operations USMF company and opening ALL VENDORS:

Integration with Services
[ 405 ]
As you can see, vendor 1BDLU has been added in Dynamics 365
successfully.
How it works...
OData lets you interact with data by using RESTful web services. Adding using
0%BUB6UJMJUZ.JDSPTPGU%ZOBNJDT%BUB&OUJUJFT enables you to get access to
Dynamics 365 data entities in C# code. Now, in the DSFBUF7FOEPS method, assign values to
all respective fields in the data entity. Make sure all related masters, such as
7FOEPS(SPVQ*E and WFOEPS1BSUZ5ZQF already exist in the Dynamics 365 database.
Finally, in the NBJO method, get an authentication header using:
WBSBVUIFOUJDBUJPO)FBEFS0"VUI)FMQFS(FU"VUIFOUJDBUJPO)FBEFS

And, on successful authentication, call the DSFBUF7FOEPS method to insert the vendor
record in the respective tables in the Dynamics 365 datasource. Finally, call
$POTPMF3FBE-JOF
 to see the result onscreen.

Integration with Services
[ 406 ]
There's more...
In the preceding recipe, we used static vales for vendor creation. You can convert this into
your business logic and use it for your actual development, where you get vendors data
from an external source and insert it into Dynamics 365 for Finance and Operations.
See also
For more information about OData, see the following web page:
IUUQXXXPEBUBPSHEPDVNFOUBUJPO
Consuming external web services
Dynamics 365 for Finance and Operations supports consuming external web services by
writing a simple wrapper class on the external web service endpoint in Visual Studio and
adding its reference Dynamics 365 for Finance and Operations project.
Getting ready
For this code walkthrough, we will take a free online web service for a currency converter.
You can find the WSDL at IUUQDVSSFODZDPOWFSUFSLPXBCVOHBOFUDPOWFSUFSBTNY
How to do it...
Add a new Class Library and name it &YUFSOBM8FCTFSWJDFT:
1.

Integration with Services
[ 407 ]
Add a service reference under the References node of our newly created project.
2.
Use the following service
IUUQDVSSFODZDPOWFSUFSLPXBCVOHBOFUDPOWFSUFSBTNY.
Give a name $VSSFODZ$POWFSUFS4FSWJDFT in the namespace.

Integration with Services
[ 408 ]
By clicking on the Go button, the system will fetch and show all the available
3.
services and operations in this web service, as follows:
Click on the OK button.
It will add a new node in your project service reference.
4.
Check the BQQDPOGJH file. It should look as follows:
5.

Integration with Services
[ 409 ]
Now, go to the DMBTT node and add the following namespace:
6.
VTJOH4ZTUFN
VTJOH4ZTUFN$PMMFDUJPOT(FOFSJD
VTJOH4ZTUFN-JOR
VTJOH4ZTUFN5FYU
VTJOH4ZTUFN5ISFBEJOH5BTLT
VTJOH&YUFSOBM8FC4FSWJDFT$VSSFODZ$POWFSUFS4FSWJDF
VTJOH4ZTUFN4FSWJDF.PEFM
Rename the class name to $VSSFODZ$POWFSUFS, and replace its main method
7.
with a new method HFU$VSSFDZ3BUF, as shown in the following code:
QVCMJDTUSJOHHFU$VSSFODZ3BUF
4USJOHDVSTUSJOHDVS
\
#BTJD)UUQ#JOEJOHIUUQ#JOEJOHOFX#BTJD)UUQ#JOEJOH

&OEQPJOU"EESFTTFOE1PJOUOFX&OEQPJOU"EESFTT
!IUUQDVSSFODZDPOWFSUFSLPXBCVOHBOFUDPOWFSUFSBTNY
WBSTPBQ$MJFOUOFX$POWFSUFS4PBQ$MJFOU
IUUQ#JOEJOH
FOE1PJOU
WBSVTE5PJOSTPBQ$MJFOU(FU$POWFSTJPO3BUF

Integration with Services
[ 410 ]
DVS5P4USJOH
DVS5P4USJOH
%BUF5JNF/PX
SFUVSOVTE5PJOS5P4USJOH

^
Save all your code and build the project.
8.
Sometimes, you may face unexpected errors during a build. In such cases,
right-click on the solution and clean the solution. Now, try to rebuild the
complete solution.
Now, our web service is ready to be consumed in Dynamics 365. Add a new
9.
Operation Project in your solution. Name it 1LU&YUFSOBM8FC4FSWJDF%"9.
In the Reference node, right-click and add a new reference. You can choose the
10.
project and it will add the EMM file automatically in the reference node. See the
following screenshot:

Integration with Services
[ 411 ]
Once you click on the OK button, this must be added in the Reference node of
11.
the current project.
Now add a runnable class in your Operation Project, name it
12.
$POTVNF4FSWJDF*O%"9, and add a namespace of:
VTJOH&YUFSOBM8FC4FSWJDFT
Add the following code in the main method:
13.
&YUFSOBM8FC4FSWJDFTDVSSFODZ$POWFSUFSDVSSFODZ$PWFSUFS
OFX&YUFSOBM8FC4FSWJDFTDVSSFODZ$POWFSUFS

WBSDPOW3BUFTUS/VN
DVSSFODZ$PWFSUFSHFU$VSSFODZ3BUF
64%
*/3
JOGP
TUS'NU
DPOW3BUF
Save all your code and build the solution. Set this project
14.
1LU&YUFSOBM8FC4FSWJDF%"9 as a startup project and class
$POTVNF4FSWJDF*O%"9 it as a startup Object.
To test the code, run the solution now. You will get your conversion rate in the
15.
following screen:
 is the currency conversion rate for USD and INR.

Integration with Services
[ 412 ]
How it works...
Every web service comes with certain services and operations; you can get all these details
along with the web service. The very first thing we added was a service reference to our C#
project that enables us to interact with this web service and use its methods/services in
code. After adding a service endpoint, you can use Object browser to view the contract and
service clients generated.
Next, you have to create a binding and endpoint for this service; without these you may get
the following error while it is running:

Integration with Services
[ 413 ]
C# code doesn't take a string directly; you have to convert all objects into a string using the
5P4USJOH
 method.
On the other side, in a Dynamics 365 project, once you add a C# project in the Reference
node, you can interact with its class now. Adding a namespace on top of your class will
help to reduce extra lines of code.
Lastly, create an object of C# service; it's the same as creating an object for any other class:
&YUFSOBM8FC4FSWJDFTDVSSFODZ$POWFSUFSDVSSFODZ$PWFSUFS
OFX&YUFSOBM8FC4FSWJDFTDVSSFODZ$POWFSUFS

And convert the return value, that is, a string into a number to show as output:
WBSDPOW3BUFTUS/VN
DVSSFODZ$PWFSUFSHFU$VSSFODZ3BUF
64%
*/3
JOGP
TUS'NU
DPOW3BUF
There's more...
Browse this service on an internet browser to check the services, description and all
available operations in this service:
IUUQDVSSFODZDPOWFSUFSLPXBCVOHBOFUDPOWFSUFSBTNY
The following are available operations for the preceding service:
Check each of them to get detailed information on a particular operation code reference.

Integration with Services
[ 414 ]
See also
There are lots of free web services over the internet; you can get them free of cost and use
them in your code. Some of them are:
IUUQXXXXFCTFSWJDFYOFUOFX)PNF*OEFY
IUUQXXXWJTVBMXFCTFSWJDFDPN
We will not support any website/company/person if they use any web
service in their code. Please do study and take cautions when using any
web services in your production environment.

10
Improving Development
Efficiency and Performance
In this chapter, we will cover the following recipes:
Using Extension
Caching a display method
Calculating code execution time
Enhancing insert, update, and delete operations
Writing efficient SQL statements
Using event handler
Creating a Delegate method
Introduction
We are entering a new era of Dynamics AX as Dynamics 365 for Finance and Operations,
and it is quite common for many small and large Microsoft Dynamics 365 for Finance and
Operations installations/implementations to suffer from performance issues. These issues
can be caused by insufficient infrastructure, incorrect configuration, ineffective code, and
many other reasons.
There are lots of ways to troubleshoot and fix performance issues. Using standard tools or
review logic. This chapter discusses a few simple must-know techniques to write code
properly and improve logic to deal with basic performance issues. It is hard to get a
complete guide to solve performance issues in Dynamics 365 for Finance and Operations.

Improving Development Efficiency and Performance
[ 416 ]
Using extensions
In Dynamics 365 for Finance and Operations, development requirements can be better
achieved using an extension approach on standard application objects. Unlike overlayering
in AX 2012, extensions in Dynamics 365 for Finance and Operations don't overlay the base
model elements. Instead, it compiles them in separate assemblies, which allows us to
customize on standard objects and associated business logic using Event Handler.
Extensions provide minimal overhead when a base package is upgraded.
In this recipe, we will be extending *OWFOU+PVSOBM5SBOT and adding new fields in it.
How to do it...
Create a new project in Visual Studio 6TJOH&YUFOTJPOT and select package,
1.
which references "QQMJDBUJPO suit package.
In Application explorer, find the table *OWFOU+PVSOBM5SBOT and create its
2.
extension.
Create a new field, "WBJMBCMF4UPDL with the following properties:
3.
Property Value
Name
"WBJMBCMF4UPDL
Label
"WBJMBCMFTUPDL
EDT
Qty
Your new field should look as follows:
4.

Improving Development Efficiency and Performance
[ 417 ]
Copy its event handler method PO.PEJGJFE'JFME:
5.
Create a new class, 1BDLU*OWFOU+PVSOBM5SBOT&WFOUIBOEMFS and paste the
6.
PO.PEJGJFE'JFME event handler method in this class. In addition to the default
code, we need to get the .PEJGZ'JFME&WFOU"SHT arguments to get the field ID
and use switch case. The %BUB&WFOU)BOEMFS specifies the source of the event
and %BUB&WFOU5ZQF is an enum for the type of event supported. Once the event
arguments are received, we get field ID to call our logic based on a switch-case
ladder. Modify the code in this class so that it looks as follows:
DMBTT1BDLU*OWFOU+PVSOBM5SBOT&WFOUIBOEMFS
\
TVNNBSZ 

Improving Development Efficiency and Performance
[ 418 ]

TVNNBSZ 
QBSBNOBNFTFOEFS QBSBN 
QBSBNOBNFF QBSBN 
<%BUB&WFOU)BOEMFS
UBCMF4US
*OWFOU+PVSOBM5SBOT
%BUB&WFOU5ZQF.PEJGJFE'JFME>
QVCMJDTUBUJDWPJE*OWFOU+PVSOBM5SBOT@PO.PEJGJFE'JFME

$PNNPOTFOEFS%BUB&WFOU"SHTF
\
.PEJGZ'JFME&WFOU"SHTBSHTFBT.PEJGZ'JFME&WFOU"SHT
*OWFOU+PVSOBM5SBOTJOWFOU+PVSOBM5SBOTTFOEFS
BT*OWFOU+PVSOBM5SBOT
TXJUDI
BSHTQBSN'JFME*E

\
DBTFGJFME/VN
*OWFOU+PVSOBM5SBOT*UFN*E
JOWFOU+PVSOBM5SBOT"WBJMBCMF4UPDL
*OWFOU0OIBOEOFX*UFN*E
JOWFOU+PVSOBM5SBOT*UFN*E
BWBJM1IZTJDBM

CSFBL
^
^
^
In Application explorer, find the form *OWFOU+PVSOBM5SBOT and create its
7.
extension. Expand the data sources, drag field from *OWFOU+PVSOBM5SBOT data
source to Grid in the LineView(Tab) page. It should look as follows:

Improving Development Efficiency and Performance
[ 419 ]
Navigate to Inventory Management | Journal entries | Items | Movement and
8.
create a NPWFNFOUKPVSOBM. Go into journal lines and select item. Our code will
fetch the available physical quantity of items and display it in the field:
How it works...
Here, we create a new field in *OWFOU+PVSOBM5SBOT&YUFOTJPO that extends the base
package element in our custom package. We copy the event handler of the method on
.PEJGJFE'JFME and copy it in our custom class, where we modify it according to our
needs. As we know, we have to fetch the stock of an item when it is changed, so we have
put our code on modified events on the items JE field. We fetch the stock using the
*OWFOU0O)BOE class method BWBJM1IZTJDBM
 and save it in our field. This way, we have
customized application code without overlayering the base package application objects.
This approach helps in easy upgrades in base application objects such as classes, tables, and
forms. Event handlers on table methods are already provided by the system and they can be
utilized.
Always use proper comments in between code. Don't put any single lines
of code without comments. Always use a prefix for your new method,
new fields, and objects. Normally, we use the initial three letters for this,
such as QLU for PacktPub.

Improving Development Efficiency and Performance
[ 420 ]
Caching a display method
In Dynamics 365 for Finance and Operations, EJTQMBZ methods are still used in some 
places to show additional information on forms or reports such as fields, calculations, and
more. Although they are shown as physical fields, their values are a result of the methods to
which they are bound.
The EJTQMBZ methods are executed each time the form is redrawn. This means that the
more complex the method is, the longer it will take to display it on the screen. Hence, it is
always recommended to keep the code in the EJTQMBZ methods to a minimum.
The performance of the EJTQMBZ methods can be improved by caching them. This is when a
EJTQMBZ method's return value is retrieved from a database or calculated only once and
subsequent calls are made to the cache.
In this recipe, we will create a new cached EJTQMBZ method for the PaymentTerm
description. We will also discuss a few scenarios in order to learn how to properly use
caching.
How to do it...
In the Application explorer, locate the $VTU(SPVQ table and customize it into
1.
your project.
Add a EJTQMBZ method with the following code snippet:
2.
TVNNBSZ 
/FXNFUIPEBEEFECZ:PVS/BNFGPSSFR1BDLU$IBQUFS
EJTQMBZEFTDSJQUJPOGPS1BZNFOUUFSN
TVNNBSZ 
EJTQMBZ%FTDSJQUJPOQLUEJTQMBZ1BZN5FSN%FTDSJQUJPO

\
SFUVSO
TFMFDUGJSTU0OMZ%FTDSJQUJPOGSPN1BZN5FSN
XIFSF1BZN5FSN1BZN5FSN*EUIJT1BZN5FSN*E%FTDSJQUJPO
^
Add the newly created method to the table's 0WFSWJFX group, right beneath the
3.
1BZN5FSN*E field, so it will update it on form design on the 0WFSWJFX field
group and we don't need to add this field on the form separately.

Improving Development Efficiency and Performance
[ 421 ]
In the Application Object Tree, find the $VTU(SPVQ form and add it into your
4.
project.
Override the JOJU
 method of its $VTU(SPVQ data source with the following
5.
code snippet:
TVNNBSZ 
"EEFECZZPVSOBNFPO.BZGPSQVSPTF
TVNNBSZ 
QVCMJDWPJEJOJU

\
TVQFS

UIJTDBDIF"EE.FUIPE
UBCMF.FUIPE4US
$VTU(SPVQ
QLUEJTQMBZ1BZN5FSN%FTDSJQUJPO
^
To test the EJTQMBZ method, Save and build your solution.
6.

Improving Development Efficiency and Performance
[ 422 ]
Navigate to Accounts receivable | Setup | Customers | Customer groups.
7.
You will see a newly added display method showing Terms of Payment in the
8.
form, as shown in the following screenshot:
How it works...
In this recipe, we created a new EJTQMBZ method in the $VTU(SPVQ table to show the
description of Terms of Payment, which is defined in a Customer group record. In the
method, we use a query to retrieve only the %FTDSJQUJPO field from the 1BZN5FSN table.
Here, we can use the GJOE
 method of the 1BZN5FSN table, but that will have decreased
the EJTQMBZ method's performance, as it returns the whole 1BZN5FSN record when we only
need a single field. In a scenario such as this, when there are only a few records in the table,
it is not so important; however, in the case of millions of records, the difference in the
performance will be noticeable. This is precisely why we need to cache the display method
that we have covered in this recipe. We also add the method that we created to the
Overview group in the table in order to ensure that it automatically appears on the
Overview screen of the Customer group form.

Improving Development Efficiency and Performance
[ 423 ]
In order to cache the EJTQMBZ method, we override the JOJU
 method of the $VTU(SPVQ
data source and call it's DBDIF"EE.FUIPE
 method to ensure that the method's return
values are stored in the cache.
The DBDIF"EE.FUIPE
 method instructs the system's caching mechanism to load the
method's values into the cache for the records visible on the screen, plus some subsequent
records. It is important that only the display methods that are visible in the Overview tab
are cached. The display methods located in different tabs can show a value from one record
at a time, even though the caching mechanism loads values from multiple records into the
cache.
Speaking about the EJTQMBZ method caching, there are other ways to do this. One of the
ways is to place the 4ZT$MJFOU$BDIF%BUB.FUIPE"UUSJCVUF attribute at the top of the
EJTQMBZ method, as shown in the following code snippet:
<4ZT$MJFOU$BDIF%BUB.FUIPE"UUSJCVUF>
EJTQMBZ%FTDSJQUJPOEJTQMBZ1BZN5FSN%FTDSJQUJPO

\
SFUVSO
TFMFDUGJSTU0OMZ%FTDSJQUJPOGSPN1BZN5FSN
XIFSF1BZN5FSN1BZN5FSN*EUIJT1BZN5FSN*E%FTDSJQUJPO
^
In this case, the method will automatically be cached on any form where it is used without
any additional code.
Another way is to change the $BDIF%BUB.FUIPE property of the form's control to :FT. This
will have the same effect as using the DBDIF"EE.FUIPE
 method or the
4ZT$MJFOU$BDIF%BUB.FUIPE"UUSJCVUF attribute.
There's more...
Display methods can be used in Lookup methods as well. However, you will not be able to
perform any sorting and filtering in this field. Using the following code syntax, you can add
a new field in Lookup using a display method:
TZT5BCMF-PPLVQBEE-PPLVQ.FUIPE
UBCMF.FUIPE4US
5BCMF/BNF.FUIPE/BNF
You can add this in your Lookup method right after all your physical fields.

Improving Development Efficiency and Performance
[ 424 ]
Calculating code execution time
When working on improving existing code, there is always the question of how to measure
results. There are numerous ways to do this, for example, visually assessing improvements,
getting feedback from users, using the code profiler and/or trace parser, and various other
methods.
In this recipe, we will discuss how to measure the code execution time using a very simple
method, just by temporarily adding a few lines of code. In this way, the execution time of
the old code can be compared with that of the new one in order to show whether any
improvements were made.
How to do it...
In the solution, add a new runnable class and write the following code snippet:
1.
DMBTT1LU(FU&YFDVUBJPOUJNF
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
JOUTUBSU
JOUFOE
TUBSU8JO"1*HFU5JDL$PVOU

TMFFQ
QBVTFGPSNJMMJTFDPOET
FOE8JO"1*HFU5JDL$PVOU

JOGP
TUS'NU
FOETUBSU
^
^
Set this class as a startup object in project and run the solution to see how many
2.
milliseconds it takes to execute the code, as shown in the following screenshot:

Improving Development Efficiency and Performance
[ 425 ]
How it works...
In this recipe, the TMFFQ
 command simulates our business logic, which measures the
execution time.
The main element is the HFU5JDL$PVOU
 method of the standard 8JO"1* class. The
method returns the 5JDL$PVOU property of the .NET environment, which is a 32-bit integer
containing the amount of time, in milliseconds, that has passed since the last time the
computer was started.
We place the first call to the HFU5JDL$PVOU
 method before the code we want to measure,
and we place the second call right after the code. In this way, we know when the code was
started and when it was completed. The difference between the times is the code execution
time, in milliseconds.
Normally, using such a technique to calculate the code execution time does not provide
useful information, as we cannot exactly tell whether it is right or wrong. It is much more
beneficial to measure the execution time before and after we optimize the code. In this way,
we can clearly see whether any improvements were made.

Improving Development Efficiency and Performance
[ 426 ]
There's more...
The approach described in the previous section can be successfully used to measure long-
running code, such as numerous calculations or complex database queries. However, it may
not be possible to assess code that takes only a few milliseconds to execute.
The improvement in the code may not be noticeable, as it can be greatly affected by the
variances caused by the current system conditions. In such a case, the code in question can
be executed a number of times so that the execution times can be properly compared.
To demonstrate this, we can modify the previously created job as follows:
DMBTT1LU(FU&YFDVUBJPOUJNF
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
JOUJ
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

GPS
JJJJ
\
TMFFQ
QBVTFGPSNJMMJTFDPOET
^
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
UJNF5BLFO
^
^

Improving Development Efficiency and Performance
[ 427 ]
Your output must look like the following line:
Now, the execution time will be much longer, as we add a GPS loop to increase the
execution time and, therefore, it is easier to assess.
Enhancing insert, update, and delete
operations
Dynamics 365 for Finance and Operations is a three-tier architecture and it takes a
significant amount of time for a database call to insert, update, and delete. The system
provides us with some constructs that allow us to insert/update/delete more than one
record into the database in a single trip, which reduces communication between the
application and the database and it increases performance.
In this recipe, we will use these constructs and see how to do so effectively.
How to do it...
Create a custom table 1BDLU$VTUPNFS*OWPJDFT where we will be inserting
1.
records with the following fields:
Field: *OWPJDF"DDPVOU
Property Value
Name
*OWPJDF"DDPVOU

Improving Development Efficiency and Performance
[ 428 ]
Label
*OWPJDFBDDPVOU
EDT
"DDPVOU/VN
Field: *OWPJDF*E
Property Value
Name
*OWPJDF*E
Label
*OWPJDFJE
EDT
%PDVNFOU/VN
Field: *OWPJDF"NPVOU
Property Value
Name
*OWPJDF"NPVOU
Label
*OWPJDFBNPVOU
EDT
"NPVOU
Field: *OWPJDF2UZ
Property Value
Name
*OWPJDF2UZ
Label
*OWPJDFRUZ
EDT
2UZ
Field: $VSSFODZ4ZNCPM
Property Value
Name
$VSSFODZ4ZNCPM
Label
$VSSFODZ
EDT
$VSSFODZ4ZNCPM

Improving Development Efficiency and Performance
[ 429 ]
After all the preceding fields, your table will look as follows:
Create a new runnable class JOTFSU*OWPJDFT3FDPSE*OTFSU-JTU and add the
2.
following code:
DMBTTJOTFSU*OWPJDFT3FDPSE*OTFSU-JTU
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
$VTU*OWPJDF+PVSDVTU*OWPJDF+PVS
1BDLU$VTUPNFS*OWPJDFTDVTUPNFS*OWPJDF
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
JOUJ
5IJTDPMMFDUJPOXJMMTUPSFUIFSFDPSETUIBUNVTUCF
JOTFSUFEJOUPUIFEBUBCBTFXFQSPWJEFTLJQ*OTFSU.FUIPEBOE
TLJQ%BUBCBTF-PHBTUSVFBOESFTUQBSBNFUFSTBTGBMTF
3FDPSE*OTFSU-JTUDVTUPNFS*OWPJDFT5P#F*OTFSUFEOFX

Improving Development Efficiency and Performance
[ 430 ]
3FDPSE*OTFSU-JTU
UBCMF/VN
1BDLU$VTUPNFS*OWPJDFTUSVF
USVFUSVFGBMTFGBMTFDVTUPNFS*OWPJDF
*OJUJBMJ[FUIFTUBSUEBUFUJNF
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

4FMFDUPOMZUIFSFRVJSFEGJFMETGSPNUIFUBCMF
XIJMFTFMFDU*OWPJDF"DDPVOU*OWPJDF*E*OWPJDF"NPVOU2UZ
$VSSFODZ$PEFGSPNDVTU*OWPJDF+PVS
\
*OJUJBMJ[JOHUIFCVGGFSXJUIJOWPJDFSFDPSET
DVTUPNFS*OWPJDF*OWPJDF"DDPVOUDVTU*OWPJDF+PVS*OWPJDF"DDPVOU
DVTUPNFS*OWPJDF*OWPJDF*DVTU*OWPJDF+PVS*OWPJDF*E
DVTUPNFS*OWPJDF*OWPJDF"NPVOUDVTU*OWPJDF+PVS*OWPJDF"NPVOU
DVTUPNFS*OWPJDF*OWPJDF2UDVTU*OWPJDF+PVS2UZ
DVTUPNFS*OWPJDF$VSSFODZ4ZNCPMDVTU*OWPJDF+PVS$VSSFODZ$PEF
*OTUFBEPGJOTFSUJOHUIFSFDPSEJOUPUIFEBUBCBTFXF
XJMMBEEJUUPUIF3FDPSE*OTFSU-JTUBSSBZ
DVTUPNFS*OWPJDFT5P#F*OTFSUFEBEE
DVTUPNFS*OWPJDF
J
^
"GUFSGVMGJMMJOHUIFBSSBZXJUIUIFFMFNFOUTUP
CFJOTFSUFEXFBSF
SFBEUPFYFDVUFUIFJOTFSUPQFSBUJPO
DVTUPNFS*OWPJDFT5P#F*OTFSUFEJOTFSU%BUBCBTF

EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
	*UUPPLNJMJTFDPOETUPJOTFSUSFDPSETXJUI
B3FDPSE*OTFSU-JTUBQQSPBDI	UJNF5BLFOJ
^
^
The Infolog shows us  records inserted in the table in  milliseconds
3.
using the 3FDPSE*OTFSU-JTU approach:

Improving Development Efficiency and Performance
[ 431 ]
Furthermore, we could enhance performance by using JOTFSU@3FDPSE4FU. Let's
4.
create a new class JOTFS*OWPJDFT*OTFSU3FDPSE4FU and add the following
code:
DMBTTJOTFSU*OWPJDFT*OTFSU3FDPSE4FU
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
$VTU*OWPJDF+PVSDVTU*OWPJDF+PVS
1BDLU$VTUPNFS*OWPJDFTDVTUPNFS*OWPJDF
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
JOUJ
TFMFDUDPVOU
3FD*EGSPNDVTU*OWPJDF+PVS
JDVTU*OWPJDF+PVS3FD*E
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

JOTFSU@SFDPSETFU
DVTUPNFS*OWPJDF
*OWPJDF"DDPVOU*OWPJDF*E*OWPJDF"NPVOU
*OWPJDF2UZ$VSSFODZ4ZNCPM
TFMFDU
*OWPJDF"DDPVOU*OWPJDF*E*OWPJDF"NPVOU2UZ$VSSFODZ$PEF
GSPNDVTU*OWPJDF+PVS
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$

Improving Development Efficiency and Performance
[ 432 ]
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
	*UUPPLNJMJTFDPOETUPJOTFSUSFDPSET
XJUIBJOTFSU@SFDPSETFUBQQSPBDI	UJNF5BLFOJ
^
^
The Infolog shows us  records inserted in the table in  milliseconds
5.
using the JOTFSU@3FDPSE4FU approach:
We could also use the RVFSZJOTFSU@SFDPSETFU method for improved
6.
performance, which could help us in different scenarios. Let's perform the same
task using this approach. Create a new class
*OTFSJ*OWPJDFT2VFSZ*OTFSU3FDPSE4FU and add the following code:
DMBTT*OTFSU*OWPJDFT2VFSZ*OTFSU3FDPSE4FU
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
.BQGJFME.BQQJOH
2VFSZRVFSZ
2VFSZ#VJME%BUB4PVSDFRCET$VTU*OWPJDF+PVS
2VFSZ#VJME'JFME-JTUGJFME-JTU
1BDLU$VTUPNFS*OWPJDFTDVTUPNFS*OWPJDF
$VTU*OWPJDF+PVSDVTU*OWPJDF+PVS
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
JOUJ

Improving Development Efficiency and Performance
[ 433 ]
$PVOUUIFSFDPSETUPCFJOTFSUFEGPSEFNPQVSQPTF
TFMFDUDPVOU
3FD*EGSPNDVTU*OWPJDF+PVS
JDVTU*OWPJDF+PVS3FD*E
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

1SFQBSFUIFRVFSZPCKFDU
RVFSZOFX2VFSZ

1SFQBSFUIFEBUBTPVSDFGPSSFDPSETFUPQFSBUJPO
RCET$VTU*OWPJDF+PVS
RVFSZBEE%BUB4PVSDF
UBCMF/VN
$VTU*OWPJDF+PVS
"EEGJFMETFMFDUJPOMJTU
GJFME-JTURCET$VTU*OWPJDF+PVSGJFMET

GJFME-JTUBEE'JFME
GJFME/VN
$VTU*OWPJDF+PVS
*OWPJDF"DDPVOU
GJFME-JTUBEE'JFME
GJFME/VN
$VTU*OWPJDF+PVS*OWPJDF*E
GJFME-JTUBEE'JFME
GJFME/VN
$VTU*OWPJDF+PVS
*OWPJDF"NPVOU
GJFME-JTUBEE'JFME
GJFME/VN
$VTU*OWPJDF+PVS2UZ
GJFME-JTUBEE'JFME
GJFME/VN
$VTU*OWPJDF+PVS$VSSFODZ$PEF
GJFME-JTUEZOBNJD
2VFSZ'JFME-JTU%ZOBNJD/P
*OTFSUUIFGJFMENBQQJOHCFUXFFOUBSHFUUBCMF
BOERVFSZEBUBTPVSDFT
GJFME.BQQJOHOFX.BQ
5ZQFT4USJOH5ZQFT$POUBJOFS
GJFME.BQQJOHJOTFSU
GJFME4US
1BDLU$VTUPNFS*OWPJDFT
*OWPJDF"DDPVOU
<RCET$VTU*OWPJDF+PVSVOJRVF*E

GJFME4US
$VTU*OWPJDF+PVS*OWPJDF"DDPVOU>
GJFME.BQQJOHJOTFSU
GJFME4US
1BDLU$VTUPNFS*OWPJDFT
*OWPJDF*E
<RCET$VTU*OWPJDF+PVSVOJRVF*E
GJFME4US
$VTU*OWPJDF+PVS
*OWPJDF*E>
GJFME.BQQJOHJOTFSU
GJFME4US
1BDLU$VTUPNFS*OWPJDFT
*OWPJDF"NPVOU
<RCET$VTU*OWPJDF+PVSVOJRVF*E

GJFME4US
$VTU*OWPJDF+PVS*OWPJDF"NPVOU>
GJFME.BQQJOHJOTFSU
GJFME4US
1BDLU$VTUPNFS*OWPJDFT
*OWPJDF2UZ
<RCET$VTU*OWPJDF+PVSVOJRVF*E

GJFME4US
$VTU*OWPJDF+PVS2UZ>
GJFME.BQQJOHJOTFSU
GJFME4US
1BDLU$VTUPNFS*OWPJDFT
$VSSFODZ4ZNCPM
<RCET$VTU*OWPJDF+PVSVOJRVF*E

GJFME4US
$VTU*OWPJDF+PVS$VSSFODZ$PEF>

Improving Development Efficiency and Performance
[ 434 ]
1FSGPSNRVFSZJOTFSUSFDPSETFU
RVFSZJOTFSU@SFDPSETFU
DVTUPNFS*OWPJDFGJFME.BQQJOH
RVFSZ
HFUEBUFUJNFPODPNQMFUJPOPGQSPDFTT
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

HFUUJNFTQBOCZVTJOHTVCUSBDUNFUIPEPGEBUF5JNFDMBTT
UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
	*UUPPLNJMJTFDPOETUPJOTFSUSFDPSET
XJUI
BRVFSZJOTFSU@SFDPSETFUBQQSPBDI	UJNF5BLFOJ
^
^
The Infolog shows us  records inserted in the table in  milliseconds
7.
using the RVFSZ::JOTFSU@3FDPSE4FU approach:
How it works...
The 3FDPSE*OTFSU-JTU class acts as an array of the given type and holds the table buffer.
It can insert multiple records in a single database trip. The BEE
 method prepares the stack
of records and the JOTFSU%BUBCBTF
 method packs these records and sends them to the
database in a single trip, where they are unpacked and inserted into the database table
record by record. While creating an instance of 3FDPSE*OTFSU-JTU, we could skip certain
system methods, such as insert by passing some parameters.

Improving Development Efficiency and Performance
[ 435 ]
We have also used JOTFSU@SFDPSE4FU/EFMFUF@GSPN/VQEBUF@SFDPSE4FU, which are
called set based operations, and insert all records in a database in a single call to the
database. However, these operations are converted to record-by-record operations if
insert/update/delete methods are overridden on application tables. To counter this, for
example, to skip the insert method, we could specify
@UBCMF#VGGFSTLJQ%BUB.FUIPET
USVF.
There's more...
While working on a real-time project, you may need to deal with a number of records to
perform CRUD methods. In such cases, it's a difficult and time consuming process to
process each record individually. Let's look at how to handle such scenarios.
Using delete_from
We might need to delete records from a table specifying some clause in minimum time. This
we could achieve using EFMFUF@GSPN. Create a EFMFUF*OWPJDFT%FMFUF'SPN class and
add the following code:
DMBTTEFMFUF*OWPJDFT%FMFUF'SPN
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
1BDLU$VTUPNFS*OWPJDFTDVTUPNFS*OWPJDF
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
JOUJ
TFMFDUDPVOU
3FD*EGSPNDVTUPNFS*OWPJDF
JDVTUPNFS*OWPJDF3FD*E
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

EFMFUFTBMMSFDPSEJOPOFHP
EFMFUF@GSPNDVTUPNFS*OWPJDF
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO

Improving Development Efficiency and Performance
[ 436 ]
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
	*UUPPLNJMJTFDPOETUPEFMFUFSFDPSETXJUI
BEFMFUF@GSPNBQQSPBDI	UJNF5BLFOJ
^
^
While running your code, you will get an output notification as follows:
Using update_recordSet for faster updates
Sometimes, we need to update some records in a table, which we might do using loops,
which can be time consuming. Here, to update the records in a single application to
database trip, we can use VQEBUF@SFDPSE4FU. Create an
VQEBUF*OWPJDFT6QEBUF3FDPSE4FU class and add the following code:
DMBTTVQEBUF*OWPJDFT6QEBUF3FDPSE4FU
\
TVNNBSZ 
3VOTUIFDMBTTXJUIUIFTQFDJGJFEBSHVNFOUT
TVNNBSZ 
QBSBNOBNF@BSHT 5IFTQFDJGJFEBSHVNFOUTQBSBN 
QVCMJDTUBUJDWPJENBJO
"SHT@BSHT
\
1BDLU$VTUPNFS*OWPJDFTDVTUPNFS*OWPJDF
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
JOUJ
TFMFDUDPVOU
3FD*EGSPNDVTUPNFS*OWPJDF

Improving Development Efficiency and Performance
[ 437 ]
XIFSFDVTUPNFS*OWPJDF*OWPJDF2UZ
JDVTUPNFS*OWPJDF3FD*E
DVTUPNFS*OWPJDFDMFBS

TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

UUTCFHJO
VQEBUFTBMMSFDPSEJOPOFHP
VQEBUF@SFDPSETFUDVTUPNFS*OWPJDF
TFUUJOH*T6QEBUFE
XIFSFDVTUPNFS*OWPJDF*OWPJDF2UZ
UUTDPNNJU
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
	*UUPPLNJMJTFDPOETUPVQEBUFSFDPSET
XJUIBVQEBUF@SFDPSETFUBQQSPBDI	UJNF5BLFOJ
^
^
Writing efficient SQL statements
In Dynamics 365 for Finance and Operations, SQL statements can often become
performance bottlenecks. Therefore, it is very important to understand how Visual Studio
handles database queries and to follow all the best practice recommendations in order to
keep your system healthy and efficient.
In this recipe, we will discuss some of the best practices to use when writing database
queries. For demonstration purposes, we will create a sample GJOE method with different
logic and queries and discuss each of them. The method will locate the $VTU(SPVQ table
record of the given customer account.
How to do it...
As methods are not allowed on extensions, to demonstrate this recipe we need to
1.
over layer a $VTU(SPVQ table. Add a $VTU(SPVQ table in your project, and create
the following method:
TVNNBSZ 

TVNNBSZ 

Improving Development Efficiency and Performance
[ 438 ]
QBSBNOBNF@DVTU"DDPVOU QBSBN 
QBSBNOBNF@GPSVQEBUF QBSBN 
SFUVSOT SFUVSOT 
QVCMJDTUBUJD$VTU(SPVQ1LUGJOE#Z$VTU"DDPVOU
$VTU"DDPVOU
@DVTU"DDPVOU
CPPMFBO@GPSVQEBUFGBMTF
\
$VTU5BCMFDVTU5BCMF
$VTU(SPVQDVTU(SPVQ
JG
@DVTU"DDPVOU
\
TFMFDUGJSTU0OMZ$VTU(SPVQGSPNDVTU5BCMF
XIFSFDVTU5BCMF"DDPVOU/VN@DVTU"DDPVOU
^
JG
DVTU5BCMF$VTU(SPVQ
\
JG
@GPSVQEBUF
\
DVTU(SPVQTFMFDU'PS6QEBUF
@GPSVQEBUF
^
TFMFDUGJSTU0OMZDVTU(SPVQXIFSF
DVTU(SPVQ$VTU(SPVQDVTU5BCMF$VTU(SPVQ
^
SFUVSODVTU(SPVQ
^
In the same table, create another method with the following code snippet:
2.
TVNNBSZ 

TVNNBSZ 
QBSBNOBNF@DVTU"DDPVOU QBSBN 
QBSBNOBNF@GPSVQEBUF QBSBN 
SFUVSOT SFUVSOT 
QVCMJDTUBUJD$VTU(SPVQ1LUGJOE#Z$VTU"DDPVOU
$VTU"DDPVOU@DVTU"DDPVOU
CPPMFBO@GPSVQEBUFGBMTF
\
$VTU5BCMFDVTU5BCMF
$VTU(SPVQDVTU(SPVQ
JG
@DVTU"DDPVOU
\
JG
@GPSVQEBUF
\
DVTU(SPVQTFMFDU'PS6QEBUF
@GPSVQEBUF

Improving Development Efficiency and Performance
[ 439 ]
^
TFMFDUGJSTU0OMZDVTU(SPVQFYJTUT
KPJODVTU5BCMF
XIFSFDVTU(SPVQ$VTU(SPVQDVTU5BCMF$VTU(SPVQ
DVTU5BCMF"DDPVOU/VN@DVTU"DDPVOU
^
SFUVSODVTU(SPVQ
^
How it works...
In this recipe, we have two different versions of the same method. Both methods are
technically correct, but the second one is more efficient. Let's analyze each of them.
In the first method, we should pay attention to the following points:
Verify that the @DVTU"DDPVOU argument is not empty; this will avoid the running
of an unnecessary database query.
Use the GJSTU0OMZ keyword in the first SQL statement to disable the effect of the
read-ahead caching. If the GJSTU0OMZ keyword is not present, the statement will
retrieve a block of records, return the first one, and ignore the others. In this case,
even though the customer account is a primary key and there is only one match,
it is always recommended that you use the GJSTU0OMZ keyword in the GJOE

methods.
In the same statement, specify the field list--the $VTU(SPVQ field--we want to
retrieve, instructing the system not to fetch any other fields that we are not
planning to use. In general, this can also be done on the Application Object Tree
query objects by setting the %ZOBNJD property of the 'JFMET node to /P in the
query data sources and adding only the required fields manually. This can also
be done in forms by setting the 0OMZ'FUDI"DUJWF property to :FT in the form's
data sources.
Execute the TFMFDU'PS6QEBUF
 method only if the @GPSVQEBUF argument is
set. Using the JG statement is more efficient than calling the
TFMFDU'PS6QEBUF
 method with GBMTF.
The second method already uses all the discussed principles, plus an additional one:
Both the SQL statements are combined into one using an FYJTUT join. One of the
benefits is that only a single trip is made to the database. Another benefit is that
no fields are retrieved from the DVTUPNFS table because of the FYJTUT join. This
makes the statement even more efficient.

Improving Development Efficiency and Performance
[ 440 ]
There's more...
To understand the preceding code in more depth, let's try to analyze the execution using
one of the earlier recipes code. Carry out the following:
Add a new class in your project and write the following code:
DMBTT1LU$VTU(SPVQ"DUJPO
\
QVCMJDTUBUJDWPJENBJO
"SHTBSHT
\
$VTU(SPVQDVTU(SPVQ
JOUUJNF5BLFO
4ZTUFN%BUF5JNFEBUF5JNF/PX
4ZTUFN5JNF4QBOUJNF4QBO
VUDEBUFUJNFTUBSU%BUF5JNF65$
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

$VTU(SPVQ$VTU(SPVQQLU'JOE#Z$VTU"DDPVOU

TMFFQ
QBVTFGPSNJMMJTFDPOET
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
.FUIPEUJNFUJNF5BLFO
TUBSU%BUF5JNF65$%BUF5JNF6UJMVUD/PX

$VTU(SPVQ$VTU(SPVQ1LUGJOE#Z$VTU"DDPVOU

TMFFQ
QBVTFGPSNJMMJTFDPOET
EBUF5JNF/PX4ZTUFN%BUF5JNFHFU@6UD/PX

UJNF4QBO
EBUF5JNF/PX4VCUSBDU
VUD%BUF5JNF4ZTUFN%BUF5JNF

TUBSU%BUF5JNF65$
UJNF5BLFOUJNF4QBOHFU@5PUBM.JMMJTFDPOET

JOGP
TUS'NU
.FUIPEUJNFUJNF5BLFO
^
^
Now, set your class and project as startup object/project. Save all your code and run the
solution. You will get the following results:

Improving Development Efficiency and Performance
[ 441 ]
Method 1, where we used different JG statements to validate some conditions clearly shows
that it took  ms, while Method 2, where we used JG statement wisely to optimize the
code and execution time, took  ms. This is how you must use efficient code during
development to reduce the time taken and speed up your execution time for better
performance.
See also
There are many APIs that are deprecated in Dynamics 365 for Finance and Operations. You
can have a look at the following link to check all the lists of deprecated APIs in Dynamics
365 for Finance and Operations. Along with others, 8*/"1* is no longer in use in the
current version of Dynamics 365 for Finance and Operations:
IUUQTEPDTNJDSPTPGUDPNFOVTEZOBNJDTPQFSBUJPOTEFWJUQSPNJHS
BUJPOVQHSBEFEFQSFDBUFEBQJT
Using event handler
Use of event handler is always recommended, and it is the safest way to modify any
existing functionality in Dynamics 365 for Finance and Operations. However, it may not fit
with every requirement, but always try to use event handler in every possible place. You
can use event handler on Classes, Forms, and Tables. On any method, whether it's on a
Table, Class, or Form, you can write QSF or QPTU event handler, while on Tables and Forms
you will also get standard Events under Event nodes such as PO*OTFSUJOH, PO%FMFUFE,
and so on.

Improving Development Efficiency and Performance
[ 442 ]
To understand this concept better, let's take the example of General Journal. While entering
new lines in Journal, we need to validate that the credit amount must not exceed 1000. To
do this, carry on with the following recipe.
How to do it...
Go to the -FEHFS+PVSOBM5SBOT table and open it in designer.
1.
Right-click on the JOTFSU method and select Copy event handler method | Pre-
2.
event handler:
Create a new class in your project, give it the name
3.
QLU-FEHFS+PVSOBM5SBOT&WFOU)BOEMFS, and paste event handler code here.
Now get the table buffer and write your logic as follows:
4.
DMBTT1LU-FEHFS+0VSOBM5SBOT&WFOU)BOEMFS
\
TVNNBSZ 
1SFFWFOUIBOEMFSNFUIPEPO*OTFSUNFUIPEUPQVU
WBMJEBUJPOT

Improving Development Efficiency and Performance
[ 443 ]
TVNNBSZ 
QBSBNOBNFBSHT QBSBN 
<1SF)BOEMFS'PS
UBCMF4US
-FEHFS+PVSOBM5SBOT
UBCMF.FUIPE4US
-FEHFS+PVSOBM5SBOTJOTFSU>
QVCMJDTUBUJDWPJE
-FEHFS+PVSOBM5SBOT@1SF@JOTFSU
9QQ1SF1PTU"SHT
BSHT
\
-FEHFS+PVSOBM5SBOTMFEHFS+PVSOBM5SBOT"SHTHFU5IJT

JG
MFEHFS+PVSOBM5SBOT"NPVOU$VS$SFEJU 
\
(MPCBMFSSPS
$SFEJUBNPVOUNVTUCFMFTTUIBO
^
^
^
Now, to test your code, go to General Ledger | Journal Entries | General
5.
Journal and create a new journal, click on lines, and create a new line with the
credit amount . On saving, the system should throw the error Credit
Amount must be less than 1000, as shown in the following screenshot:
You can add any logic or validation using Event handler, as per the requirement
6.
chosen from QSFPSQPTU event handler.

Improving Development Efficiency and Performance
[ 444 ]
How it works...
When you copy an event handler method, the system will copy its syntax and you can paste
it in a new method in the event handler class. event handler uses 9QQ1SF1PTU"SHT to pass
the arguments and the same will be used to capture the table buffer using the HFU5IJT

method. Once you get the table buffer, you can retrieve any field or method to use in your
logic.
On the basis of your selection criteria, the event handler method will execute. For example,
if you choose post Event handler, it will execute just after that method execution is finished.
Refer to the following code to understand post Event handler:
<1PTU)BOEMFS'PS
UBCMF4US
$VTU(SPVQUBCMF.FUIPE4US
$VTU(SPVQ
EFMFUF>
QVCMJDTUBUJDWPJE$VTU(SPVQ@1PTU@EFMFUF
9QQ1SF1PTU"SHTBSHT
\
^
TJNJMBSMZJGZPVDIPPTF1SFFWFOUIBOEMFSJUXJMMFYFDVUFKVTU
CFGPSFUIFFYFDVUJPOPGNFUIPE
<1SF)BOEMFS'PS
UBCMF4US
$VTU(SPVQUBCMF.FUIPE4US
$VTU(SPVQ
EFMFUF>
QVCMJDTUBUJDWPJE$VTU(SPVQ@1SF@EFMFUF
9QQ1SF1PTU"SHTBSHT
\
^
There's more...
Post event handler is the same, but the only difference is that it will execute after the parent
method. Apart from pre-and post-event handler, Dynamics 365 for Finance and Operations
provides event handling on system events/methods such as PO%FMFUJOH, 0O%FMFUF,
0O*OTFSU, and so on. These event handlers have different syntax than the Pre-Post event
handler, but the concept is the same.
To use these event handlers, simply expand the Events node on Tables and Forms. Classes
don't have Events. Expand the Events node and choose the required event, then right-click
and select Copy Event Handler Method and paste it into your event handler class. You
have to use the following syntax to get the table buffer:
<%BUB&WFOU)BOEMFS
UBCMF4US
-FEHFS+PVSOBM5SBOT
%BUB&WFOU5ZQF*OTFSUFE>
QVCMJDTUBUJDWPJE-FEHFS+PVSOBM5SBOT@PO*OTFSUFE
$PNNPO
TFOEFS%BUB&WFOU"SHTF
\
-FEHFS+PVSOBM5SBOTMFEHFS+PVSOBM5SBOTTFOEFSBT

Improving Development Efficiency and Performance
[ 445 ]
MFEHFS+PVSOBM5SBOT
/PXVTFUIJTUBCMFCVGGFSJOZPVSMPHJD
^
Creating a Delegate method
The %FMFHBUF method is also very helpful to minimize overlaying, and you can use the
%FMFHBUF method to communicate objects that exist in different packages/models and help
to solve dependencies between models when migrating code. %FMFHBUF can be very useful
when you need to use two objects that are not in the same package. Use the delegate
concept by defining a contract between the delegate instance and the delegate handler. We
have a new structure of Dynamic 365 for Operations--you will not be able to use an object
outside of its own package. So, to use delegate in such situations a delegate declaration
must have three things--a %FMFHBUF keyword, return type should be WPJE, and it should be
an empty method.
Let's understand it using the following recipe.
Getting ready...
To understand this recipe, let's consider a scenario. We have a requirement where we are
creating an Expense journal through code and to identify such transactions we added a new
field on the -FEHFS+PVSOBM5SBOT table as 1LU/P-FEHFS1PTU. Now, whenever users post
this journal, it will go to the project journal instead of Ledger accounts.
To skip -FEHFS posting we need to check for this customized Boolean field and pass a
GBMTF value to its QBSN1PTU5P(FOFSBM-FEHFS method.
How to do it...
Add a 1SPK1PTU$PTU+PVSOBM class on your solution, and add a new delegate
1.
method with the following syntax:
TVNNBSZ 
/FXEFMFHBUFNFUIPEBEEFECZ%FFQBL0O.BZ
TVNNBSZ 
EFMFHBUFWPJEQLU$IFDL/P-FEHFS
3FG3FD*E@3FDJE
&WFOU)BOEMFS3FTVMU@SFTVMU
\

Improving Development Efficiency and Performance
[ 446 ]
^
/PXXFIBWFUPDBMMUIJTNFUIPEJO/FXNFUIPEPG
1SPK1PTU$PTU+PVSOBM
DMBTT"EECFMPXDPEFUPDBMMEFMFHBUFNFUIPE
#PPMFBOOP-FEHFS
&WFOU)BOEMFS3FTVMUSFTVMUOFX&WFOU)BOEMFS3FTVMU

JG
MFEHFS+PVSOBM5SBOT3FD*E
\
UIJT1LU$IFDL/P-FEHFS
MFEHFS+PVSOBM5SBOT3FD*ESFTVMU
OP-FEHFSSFTVMUSFTVMU

UIJTQBSN1PTU5P(FOFSBM-FEHFS
OP-FEHFS
^
Add a new event handler class in your project and add a new method with the
2.
following code:
<4VCTDSJCFT5P
DMBTT4US
1SPK1PTU$PTU+PVSOBM
EFMFHBUF4US
1SPK1PTU$PTU+PVSOBMQLU$IFDL/P-FEHFS>
QVCMJDTUBUJDWPJE1SPK1PTU$PTU+PVSOBM@1LU$IFDL/P-FEHFS

3FG3FD*E@3FDJE&WFOU)BOEMFS3FTVMU@SFTVMU
\
-FEHFS+PVSOBM5SBOTMFEHFS+PVSOBM5SBOT
-FEHFS+PVSOBM5SBOTGJOE3FD*E
@3FDJEGBMTF
JG
MFEHFS+PVSOBM5SBOT1LU/P-FEHFS1PTU
\
@SFTVMUSFTVMU
GBMTF
^
FMTF
\
@SFTVMUSFTVMU
USVF
^
^
Now try to post one Expense journal with this scenario and you will see there are
3.
no General Journal transactions; all vouchers will post only in Project
transactions.

Improving Development Efficiency and Performance
[ 447 ]
How it works...
Delegate methods serve as a contract between the delegate instance and the delegate
handler, without any code/logic itself. The 4VCTDSJCFT5P keyword in an event handler
method creates a static delegate handler. 4VCTDSJCFT5P requires a class name and delegate
method name.
We created a new delegate method and called this method in between the new method.
When a pointer calls this method, it will call event handler code and we will get the
required buffer.
There's more...
&WFOU)BOEMFS3FTVMU is used to get any return value from event handler to use in your
code. However, it's not mandatory and you can create as many parameters as required. So,
try to add more parameters to explore and play with the %FMFHBUF method.
See also
Please have a look at the %JNFOTJPO)JFSBSDIZ%FMFHBUFT class and how it works. This
class has many delegate methods and they are invoked from the %JNFOTJPO'PDVT form.
Try to debug these two objects to better understand the various uses of delegate methods.

Index
A
Application Object Tree (AOT)  , 
automatic lookup
   creating  , 
automatic transaction text
   modifying  , 
Azure Active Directory (AAD)  
Azure Blob  
Azure portal
   URL  
Azure SQL
   URL, for connecting to Power BI  
Azure
   references  
B
Boolean value  
browse
   building, for folder lookups  
C
caching
   display method  
code execution time
   calculating  
color picker lookup
   creating  , 
color selection dialog boxes
   using  
confidential client  
CRUD (Create, Read, Update, and delete)  
currency converter
   reference link  
custom filter control
   creating  , 
custom instant search filter
   creating  , 
custom Lookup
   creating  , 
custom options
   displaying, in another way  , 
   list, displaying  , 
custom service
   consuming, in JSON  
   consuming, in SOAP  , 
   creating  , 
D
data consistency checks
   enhancing  , 
data contract  
data entities
   about  , , 
   building, with multiple data sources  
   document  
   master  
   parameters  
   reference  
   transaction  
data management  
data migration  
data packages
   about  , 
   reference link  
data
   consuming, in Excel  
   importing  , 
date effectiveness feature
   using  , 
Delegate method
   creating  , 
delete operation
   enhancing  

[ 449 ]
   somewhere clause, using  
dialogs
   creating, RunBase framework used  , 
   creating, SysOperation framework used  , 
   event, handling  , 
direct SQL statement
   executing  , , 
display method
   caching  
document handling note
   adding  , 
document management  , 
dynamic form
   building  , 
Dynamics 365
   about  
   APIs  
E
EDT (Extended Data Type)  
electronic payment format
   creating  , 
elements  
Event handler
   using  
Excel Data Connector app
   configuring  , 
   using  , 
Excel
   data, consuming  
   integrating, with Power BI  , 
export API  , 
export process  
extensions
   using  , 
external web services
   consuming  
F
folder browsing lookups  
folder lookup
   browse, building  
form pattern
   list  , 
   selecting  
form splitter
   adding  , 
form
   about  
   creating  , 
   using, to build lookups  , 
G
general journal
   creating  , , 
   posting  , 
H
hardcoded options  
I
image
   adding, to records  , 
   displaying, as part of form  , 
   stored image, saving as file  
import process  
insert operation
   enhancing  
interactive dashboards
   developing  , 
J
JSON (JavaScript Object Notation)
   custom services, consuming  
L
labels  
last form values
   storing  , 
ledger voucher processing  
ledger voucher
   creating  , 
   posting  , 
Lifecycle Services (LCS)  
Line records  
lookups
   about  
   building, based on record description  , 
   building, form used  , 

[ 450 ]
   creating, dynamically  , 
M
macro
   using, in SQL statement  , 
Microsoft.IdentityModel.Clients.ActiveDirectory
library
   reference link  
modal form
   creating  
model
   creating  
multiple data sources
   data entity, building  
multiple forms
   modifying, dynamically  , 
multiple records
   processing  , 
MVC (Model-View-Controller)  
N
native client app
   aadResource  
   authenticating  , 
   client App Id  
   PlatformParameters  
   redirect URI  
native client application  
normal table
   using, as temporary table  
number sequence handler
   using  , 
number sequence
   creating  , 
O
OData endpoint
   reference link  
OData services
   consuming  , 
   reference link  
operations
   reference link  
P
package
   creating  
Power BI
   about  
   configuring  , 
   Excel, integrating  , 
   reference link  
   URL  
   URL, for downloading  
   visuals, embedding  , 
Power Query
   URL, for downloading  
Power view option
   URL, for enabling  
primary key
   renaming  , 
project journal
   processing  , 
project
   creating  
Purchase Order Header record  
purchase order
   creating  , 
   posting  , 
Q
query object
   building  , 
   OR operator, using  
R
records
   coloring  , 
   copying  , 
   image, adding  , 
REST (Representational State Transfer)  
RunBase framework
   used, for creating dialogs  , 
S
Sales Order Header  
sales order
   creating  

   posting  , 
segmented entry control
   using  , , 
selected/available list
   building  , , 
set based operation  
SharePoint online  
SOAP (Simple Object Access Protocol)
   about  
   custom services, consuming  , 
Soap Utility  
splitters  
SQL statement
   macro, using  , 
   writing  , 
SysOperation framework
   asynchronous  
   reliable asynchronous  
   scheduled batch  
   synchronous  
   used, for creating dialogs  , 
T
tree control
   using  , 
tree lookup
   building  , 
troubleshooting  , 
U
unique record identification value  
update operation
   enhancing  
   update_recordSet, using  
V
View details link
   adding  , 
W
wizard
   creating  , , 
Workbook Designer
   using  , 
X
X++ code  

