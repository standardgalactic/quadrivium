Data	  Structures	  
Universal	  Hash	  
Func3ons:	  Deﬁni3on	  
and	  Example	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Overview	  of	  Universal	  Hashing	  
Next	  :	  details	  on	  randomized	  solu3on	  (in	  3	  parts).	  
	  
Part	  1	  :	  proposed	  deﬁni3on	  of	  a	  “good	  random	  hash	  func3on”.	  
	  (“universal	  family	  of	  hash	  func3ons”)	  
	  
Part	  3	  :	  concrete	  example	  of	  simple	  +	  prac3cal	  such	  func3ons	  
	  
Part	  4	  :	  jus3ﬁca3ons	  of	  deﬁni3on	  :	  “good	  func3ons”	  lead	  to	  “good
	  performance”	  

Tim	  Roughgarden	  
Universal	  Hash	  Func3ons	  
Deﬁni3on	  :	  Let	  H	  be	  a	  set	  of	  hash	  func3ons	  from	  U	  to	  {0,1,2,…,n-­‐1}	  
	  
H	  is	  universal	  if	  and	  only	  if	  :	  
	  for	  all	  x,y	  in	  U	  (with	   	  	  	  	  	  	  	  	  	  	  )	  
ie.,	  h(x)	  =	  h(y)	  
(n	  =	  #	  of	  
buckets	  )	  
When	  h	  is	  chosen	  uniformly	  at	  random	  from	  H.	  
(i.e.,	  collision	  probability	  as	  small	  as	  with	  “gold	  standard”	  of	  
perfectly	  random	  hashing	  

Consider	  a	  hash	  func3on	  family	  H,	  where	  each	  hash	  func3on	  of	  H	  
maps	  elements	  from	  a	  universe	  U	  to	  one	  of	  n	  buckets.	  Suppose	  H	  
has	  the	  following	  property:	  for	  	  every	  bucket	  I	  and	  key	  k,	  a	  1/n	  
frac3on	  of	  the	  hash	  func3ons	  in	  H	  map	  k	  to	  i.	  Is	  H	  universal	  ?	  
Yes,	  always.	  
No,	  never.	  
Maybe	  yes,	  maybe	  no	  (depends	  on	  the	  𝐻).	  
Only	  if	  the	  hash	  table	  is	  implemented	  using	  chaining.	  
Yes	  :	  Take	  H	  =	  all	  func3ons	  from	  U	  to	  
{0,1,2,..,n-­‐1}	  
	  
	  No	  :	  Take	  H	  =	  the	  set	  of	  n	  diﬀerent	  	  
	  	  	  	  	  	  	  	  	  	  constant	  func3ons	  

Tim	  Roughgarden	  
Example:	  Hashing	  IP	  Addresses	  
Let	  U	  =	  IP	  addresses	  (	  of	  the	  form	  (x1,x2,x3,x4),	  	  
with	  each	  	  
Let	  n	  =	  a	  prime	  (e.g.,	  small	  mul3ple	  of	  #	  of	  objects	  in	  HT)	  
Construc3on	  :	  Deﬁne	  one	  hash	  func3on	  ha	  per	  4-­‐tuple	  a	  
=	  (a1,a2,a3,a4)	  with	  each	  	  
Deﬁne	  :	  ha	  :	  IP	  addrs	  -­‐>	  buckets	  by	  
n4	  such	  func3ons	  

Tim	  Roughgarden	  
A	  Universal	  Hash	  Func3on	  
Deﬁne	  :	  
	  
	  
	  
Theorem:	  This	  family	  is	  universal	  

Tim	  Roughgarden	  
Consider	  dis3nct	  IP	  addresses	  (x1,x2,x3,x4),	  (y1,y2,y3,y4).	  
Assume	  :	  x4	  ≠	  y4
	  	  	  	  	  Ques3on	  :	  collision	  probability	  ?	  
	  
Note	  :	  collision	  <==>	  
	  
	  
	  
Next	  :	  condi3on	  on	  random	  choice	  of	  a1,a2,a3.	  (a4	  s3ll	  random	  )	  
Proof	  (Part	  I)	  

Tim	  Roughgarden	  
The	  Story	  So	  Far	  :	  with	  a1,a2,a3	  ﬁxed	  arbitrarily,	  how	  many	  choices	  of	  
a4	  	  sa3sfy	  	  
	  
	  
	  
Key	  Claim	  :	  le_-­‐hand	  side	  equally	  likely	  to	  be	  
any	  of	  {0,1,2,…,n-­‐1}	  
	  
Reason	  :	  x4	  ≠	  y4	  	  	  	  (x4-­‐y4	  ≠	  0	  	  mod	  n)	  
n	  is	  prime,	  	  a4	  uniform	  at	  random	  
“Proof”	  by	  example	  :	  n	  =	  7,	  x4-­‐y4	  =	  2	  or	  3	  mod	  n	  
Proof	  (Part	  II)	  
Some	  ﬁxed	  
number	  in	  
{0,1,2,..,n-­‐1}	  
Implies	  Prob[ha(x)	  =	  ha(y)]	  =	  1/n	  
[addendum	  :	  make	  sure	  n	  bigger	  than	  
the	  maximum	  value	  of	  an	  ai]	  
<==>	  x,y	  collide	  under	  ha	  
S3ll	  random	  

