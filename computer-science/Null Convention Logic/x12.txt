H
I
A
B
memory
A
B
C
D
E
F
G
H
I
A
B
C
D
E
F
G
H
I
A
B
C
D
E
F
G
H
I
A
B
C
D
E
F
G
H
I
message
message
message
core1
core2
core3
core4
Figure 2.11 Four-bit adder partitioned and mapped to sequential threads.

Given the network of functions and specifi ed completeness boundaries,
the network can be partitioned hierarchically into different implementa-
tion regimes and coordination protocols such as hardware, fi rmware and
software. It can also be partitioned laterally into coupled cycles forming

spontaneously behaving pipeline structures or into multi-threaded sequences
of operations.

With the NULL convention and the enhanced functions the expression of
concurrent behavior appears to be as simple as the expression of strictly
sequential behavior. But is sequential expression actually that simple?
2.7 THE COMPLEXITY OF SEQUENTIALITY
Glimpsing the simplicity of concurrency reveals the inherent complexity of
sequentiality.

2.7.1 Unavoidable Concurrency
A sequence is a mapping from a concurrent; partially ordered expression. It
cannot be any other way. The partially ordering of the fl ow of data among the
functions is simple and direct, and expresses the necessary and inherent struc-
ture of a process. Understanding and expressing the partial ordering cannot
be avoided.

A programmer typically starts a programming task by scribbling fl ow graphs
in a notebook. The programmer then translates these partially ordered graphs
into a sequence of operations. Getting the sequence right is not the important
thing. The important thing is getting the partial ordering relationships right
within the sequence. The partial ordering of the dependency relationships is
the referent for the correctness of a sequence. There are many possible correct
sequences that express a given process and every one of them must conform
to the same partial ordering: the same expression of concurrency.

2.7.2 The Variety of Sequence
Figure 2.12 shows a labeled partial ordered expression. In mapping the partial
order to a sequence A and B can occur in any order before D. E and F can
occur in any order before H and after D. G must occur after D and before I.

I can occur anyplace after G and C. C can occur anyplace before I. There are
an enormous number of possible correct sequences. With such variety of cor-
rectness it can be diffi cult to be confi dent of the correctness of a specifi c
sequence and even more diffi cult to reliably perceive incorrectness.

A
B
C
D
E
F
G
H
I
Figure 2.12 Labeled partially ordered expression.

THE COMPLEXITY OF SEQUENTIALITY 27

THE SIMPLICITY OF CONCURRENCY
2.7.3 The Irreversibility of Sequence
Once an expression is sequentialized, it can be diffi cult to recover the partial
ordering. While any expression of partially ordered concurrency can be easily
translated to a totally ordered sequence, the reverse is not the case. The
variety of sequence and ambiguities of memory mapping can obscure the
partial ordering relationships. A compiler employs sophisticated algorithms
to recover the partial ordering relationships from a sequential expression with
only limited success.

But, why, one might well ask, is a compiler trying to recover the partial
order relationships? The programmer roughs out the partial order depen-
dency relationships of the process, and then translates these relationships into
a sequence of operations. The programmer next presents the sequence to a
compiler that attempts to generate the partial order dependency graph from
the presented sequence so that it can attempt to reorder the sequence that the
programmer gave it into a sequence that is more effi cient for the target
machine.The machine puts a great effort into fi guring out how to execute the
instructions out of order so that multiple instructions can be executed concur-
rently. Why doesn’t the programmer just give the compiler the partial order
dependency graph?
While there are many compelling practical reasons to build sequential
machines, there is no reason whatever to write sequential programs for these
machines. A program should be a specifi cation of the dependency relation-
ships and the coordination boundaries. More than that is not necessary. Such
an expression can be automatically partitioned and mapped into a sequence
of instructions and memory references for any sequential machine. Since the
invention of compilers it has not been necessary for humans to write sequen-
tial programs.

2.7.4 The Necessary Expression of Memory
When a partial ordering is mapped into a sequence, an explicit expression of
memory must be included. With concurrency expressed in terms of a network
of direct association relationships among continually instantiated functions,
data is maintained on the association paths of the network. There is no need
to express explicit memory. A sequential operator is instantiated only during
its turn in the sequence and cannot itself maintain its output data beyond its
own instantiation. Each result must be shelved somewhere until its receiving
operator gets its turn in the sequence.

The fl ow relationships of the data and the maintenance of the data during
its fl ow must be expressed indirectly in terms of locations in a separately
expressed common memory. Figure 2.13 illustrates the mapping of the full-
adder network of Figure 2.12 to a sequence of operations with memory.

Operator A will store its output data in a memory location which will stably
maintain the data until operator D gets its turn in sequence and reads that
location to get its input. Since there are many possible orders for the sequence,

there is no natural relationship between operator order and order of memory
reference. So the memory references must be explicitly associated with each
operator. Each operator in sequence reads its input from memory and writes
its output to memory.

Asking a human to coordinate an arbitrary mapping of addresses to an
arbitrarily chosen sequence of operators invites error. Assessing the correct-
ness or incorrectness of a human’s arbitrary mapping and sequencing can be
elusive. On the other hand, a valid mapping between memory and sequence
can be automatically and reliably generated from a concurrent expression.

2.7.5 The Necessary Expression of Control
A sequence controller, shown in Figure 2.14 encompassing the sequence, is
not a part of a sequential expression itself but is an extra expression that must
be assumed by the sequential expression. A sequential expression cannot
spontaneously fl ow. It has no expressional basis for the operators to spontane-
ously sequence themselves by their own behavior. The operators must be
sequenced by the behavior of a separate expression, a controller, to instantiate
and uninstantiate each operator in turn. This explicitly controlled instantiation
and uninstantiation is inherent to the notion of sequentiality. If each operation
is not uninstantiated before the next operation is instantiated, there is a condi-
tion of uncoordinated concurrent behavior and possible ambiguity.

2.7.6 Sequentiality Cannot Be Expressionaly Primitive
Because sequential behavior must be managed by a controller, it cannot be
expressionally primitive. The most primitive expression (the most primitive
C
D
E
F
G
H
I
A
B
data memory
Figure 2.13 The full-adder mapped to fully ordered operations with memory.

C
D
E
F
G
H
I
A
B
