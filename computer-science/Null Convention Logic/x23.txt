THE INVOCATION MODEL
vacuum, that infl uences the output voltage value, that does not feed back and
infl uence the input voltage value. The voltage on the transistor of Figure 5.8c
infl uences the charge value in the channel that infl uences the electron fl ow
value through the channel, that infl uences the voltage value at the output, that
does not feed back and infl uence the input voltage value.

The switch has been considered to be a fundamental element for building
computers because Boolean logic functions can be expressed in terms of net-
works of switches, because a switch is directional, because it asserts a fresh
(amplifi ed) signal, and because it is easy to understand and build. But any
means of discrete interactive behavior will suffi ce as a primitive element of
autonomous computation.

5.3.3 Discretizing the Resolution Behavior of
Association Relationships
The directionalized behavior, however, is not discrete. Consider that the name
presented to an operator is 01, which is appreciated by the operator asserting
1. Assume that the next name to be resolved is 10, which is expressionaly
identical to 01 but both inputs will transition their values. If the 1 value transi-
tions to 0 before the 0 value transitions to 1, then the name 00 is temporarily
formed and appreciated by the operator output transitioning to 0. When the
0 transitions to 1, the name 10 is formed and the operator output transitions
to 1. The transition of the operator to 0 was an erroneous resolution that
depended on the sequence of transitions of the inputs. If the 0 had transitioned
to 1 fi rst forming the name 11, then the operator would have continued assert-
ing 1 and the spurious transition to 0 would not have occurred. Further, when
the original 1 value transitions to 0, there is still no transition of the operator
output value. There has been no spurious transition, but there has been no
appreciating change either. There is no way to appreciate that 10 is the next
fully formed name and is correctly resolved by the operator.

In the pure value expressions above the complete formation of a name is
an appreciable event that occurs in relation to the absence of a formed name.

There is no formed name. Suddenly there is a formed name. A value transform
rule is invoked. The formed name disappears and the result value appears.

Each name formation and its resolution is a discrete event. In a static structure
of associated thengs, a completely formed resolvable name is continually
presented to a unit of association, which continually resolves the presented
name. There is never an absence of a formed name, so there can be no discrete
occurrence of a formed named name to mark the beginning of a resolution.

There is never an absence of an asserted result, so there can be no discrete
occurrence of an asserted result to mark the completion of a resolution.

To appreciate discrete name formation and resolution in a context of con-
tinually presented values, consecutively presented names must be formed
from disjoint value sets. A name is completely formed when values transition
from values of one set to a completely formed name of values of another set.


Alternately transitioning formed names between at least two disjoint sets of
values allows the completeness of name formation and the resolution of the
name to be appreciated as a discrete event. Distributing disjoint value sets
over a large expression could be very complicated but, again, there is a con-
venient convention that greatly simplifi es the task for humans.

The NULL Convention A single new value is assigned that is disjoint from
the name forming values. If the name forming values are called ‘data’ values
the newly assigned value will be a ‘not data’ value called NULL. A name
formed of ‘data’ values will express “a data name.” A name formed of all
NULL values will express “not a data name.” A data name and all NULL can
form alternately in relation to each other as shown in Figure 5.9. The formation
of each name is a discrete appearance event in its value domain. A data name
can form in relation to all NULL. And all NULL can form in relation to a data
name. In both cases the discrete completeness of name formation (all NULL
or complete data) can be directly appreciated by the value transform rules.

These monotonic transitionings will be called wavefronts. The monotonic
transition from ‘completely NULL’ to ‘completely data’ is a data wavefront
and the transition from ‘completely data’ to ‘completely NULL’ is a NULL
wavefront. Successive ‘data’ names are separated by an all NULL ‘not data’
name. This will be referred to as the NULL convention.

The Completeness Criterion Each operator must now appreciate these
completeness relations in terms of its value transform rules. Each operator
must transition its asserted value only when its input values are a completely
formed data name or are all NULL. The following three rules condition the
behavior of an operator:
• If input is “completely data,” then transition output to the “data” resolu-
tion of input.

• If input is “completely NULL,” then transition output to “NULL”.

• If input is neither “completely data” nor “completely NULL,” do not
transition output.

The transition of the output to a data value implies the completeness of
data presentation at the input, the completeness of its resolution and that the
completely
NULL
Data
wavefront
Data
wavefront
Data
wavefront
NULL
wavefront
NULL
wavefront
NULL
wavefront
completely
NULL
completely
NULL
completely
NULL
completely
data
completely
data
completely
data
Figure 5.9 Successive wavefronts monotonically transitioning between symbolically disjoint
expressions.

ASSOCIATION EXPRESSION 71

THE INVOCATION MODEL
asserted output is the correct resolution of the presented input. The transition
of the output to NULL implies the completeness of NULL presentation at the
input. This is called the completeness criterion.

Boolean functions enhanced with completeness behavior, shown in Figure
5.10, are no longer mathematical functions but now include a state holding or
hysteresis behavior. A dash means that there is no value transform rule for
that name and hence no transition. The domain inversion will be explained
later. A logic using the NULL value and state-holding behavior will be called
a NULL Convention Logic.

The Completeness Behavior of a Network of Enhanced Functions The
monotonic behavior of the data and the completeness behavior of each opera-
tor fully coordinates the order of events in a network of associated operators.

The individual completeness behaviors accumulate so that the network as a
whole expresses the completeness criterion. Consider the network of enhanced
Boolean operators shown in Figure 5.11. Divide the network arbitrarily into
N ranks of operators ordered progressively from input to output, with all
inputs before the fi rst rank, and all outputs after the last rank. The rank
boundaries are shown in Figure 5.11 with vertical lines labeled alphabetically
in rank order from input to output:
• For the values crossing G to be all data, all of the values crossing F must
be data.

• For the values crossing F to be all data, all of the values crossing E must
be data.

T
N
F
K
J
I
F
T
N
T
N
F
N
F
T
K
L
J
K
L
I
J
I
K
-
T
T
-
F
T
N
-
-
N
T
N
F
N
F
T
K
L
J
K
L
I
J
I
K
