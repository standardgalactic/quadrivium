in a schoolyard full of children. This dilemma is called the state explosion
problem. Can chip designers create order out of the potential chaos of concur-
rent actions? [9]
The state space of the process must include all the possible states of
all the possible correct and incorrect orderings, including incorrect states
due to critical timing relationships (glitches). For a concurrent expression of
any practical size the state space that must be considered can become
enormous.

Only after enumerating all the possible sequences (orderings of compo-
nents–events–actions, execution paths) through the expanded state space can
one begin to attempt to reduce the possible sequences and to make each exe-
cution sequence unambiguously result in a transition to the correct fi nal
state.

THE COMPLEXITY OF CONCURRENCY 13

THE SIMPLICITY OF CONCURRENCY
2.2.3 Elusive Confi dence
Faced with such complexity of behavior it is diffi cult to attain confi dence in
the behavior of a concurrent system.

concurrent programming is much more diffi cult than sequential programming
because of the diffi culty of ensuring that a concurrent program is correct. [2]
Reliably reproducible behavior is the critical ingredient of confi dence. The
many possible orderings of concurrency does not contribute to confi dence.

Our ability to test a large sequential program in small steps depends fundamen-
tally on the reproducible behavior of the program. [4]
The important thing about a sequential program is that it always gives the same
results when it operates on the same data independently of how fast it is executed.

All that matters is the sequence in which the operations are carried out. [4]
Convenient state visibility is lost with concurrent behavior. The fi rst diffi -
culty is the state space explosion. The state space to consider is just much
larger than a sequential state space. The second diffi culty is that with concur-
rent events there is no reliable way to determine when an extended state is
stable and can be sampled. Even if one is able to sample the extended state,
one must also be able to discern which order of events (execution path) is in
play to analyze the sampled state.

With sequentiality it is assumed that each event completes before the next
event begins. In the interval between events a stable state of the system can
be sampled to verify the correct behavior of each event in turn. In the context
of state behavior it is clearly easier to observe and trust the behavior of
sequentiality than it is to observe and trust the behavior of concurrency.

2.2.4 Confusions
If concurrent behavior is so impossibly complex, how is it possible that any-
thing at all is designed to reliably operate with concurrent behavior? The
natural world operates with massively concurrent behaviors and almost every
human artifact including computers operate reliably with concurrent behav-
iors. The situation can’t possibly be as bad as it appears.

Having adopted this assumption of arbitrary speed, the designer or programmer
proceeds to construct systems that enforce the sequencing that is logically neces-
sary to the computation. Sequencing can, for example, be enforced by such
causal mechanisms as signals, shared variables, or messages between concurrent
processes. [8]
Since one cannot rely on timing relationships to control concurrent events
one must rely on “causal mechanisms” or, in other words, logical relationships

to manage concurrent events. If concurrency can in fact be managed with
logical relationships, why all the agonizing about timing relationships? Why
are time relationships considered at all? Why is concurrency not considered
purely in terms of logical relationships to begin with? The answers lie with the
mathematical notion of the function.

2.3 THE ROOTS OF APPARENT COMPLEXITY
A mathematical function is a mapping from an input data state to an output
data state. Neither the expression of the mathematical function nor the expres-
sion of the data state includes the expression of how the function might
interact with other functions, how an instance of input data presented to the
function might be bounded (when it begins and when it ends), or how the
result of the function might be presented and bounded (when it is valid and
when it is not valid). These aspects of a functions’ behavior were, historically,
expressed by a mathematician with a pencil. The mathematician understands
the proper fl ow of data among the functions and can correctly manage the
behavior of each function and the fl ow of data among functions. But when
functions are obliged to behave on their own, in the absence of the mathemati-
cian, the expression of this coordinating behavior embodied in the mathemati-
cian is lost.

How the lost expressivity of the missing mathematician is re-established is
the root of the confusion and the crux of the matter.

2.3.1 The Behavior of Mathematical Functions
The Boolean combinational logic expression of Figure 2.1, which is a network
of concurrent or partially ordered Boolean functions, is taken as an exemplar
of a concurrent system of mathematical functions. There is the expression of
each function and the expression of the partial ordering (data paths, associa-
tion relationships) among the functions. There is no expression of coordina-
tion of behavior among the functions. There is no expression of when a
function should behave and when a function should not behave, so the data
paths and the functions must be presumed to behave continuously.

When the inputs of a Boolean combinational expression are presented with
a new instance of input data, a wavefront of stable correct result values fl ow
THE ROOTS OF APPARENT COMPLEXITY 15
Figure 2.1 Network of Boolean functions.


THE SIMPLICITY OF CONCURRENCY
from the input through the network of logic functions to the output, but in
the absence of the coordinating mathematician, data transitions fl ow indis-
criminately over the freely fl owing paths and through the continuously respon-
sive functions. As some functions and paths are faster than others, the inputs
of each function will arrive at different times and cause some functions to
temporarily assert an erroneous result, which will be presented to the next
functions in the path. As these temporary errors propagate and compound, a
chaos of indeterminate result values speeds ahead of the wavefront of stable
correct results, causing the output of the Boolean expression to transition
through a large number of incorrect states before the wavefront of correct
result values reaches the output and the expression stabilizes to the correct
resolution of the presented input. This indeterminate behavior is a vivid mani-
festation of the chaos of concurrency.

One might try to avoid the indeterminate transitions by specifi cally express-
ing a precise propagation delay for each component, but propagation delays,
which can vary with a number of factors such as data dependencies, tempera-
ture, age, and manufacturing variability, cannot be reliably expressed. The
indeterminate behavior of concurrent functions cannot be avoided by manag-
ing the propagation delays of components.

Even if the indeterminate transitioning could be avoided, there would still
be no means to determine from the behavior of the expression itself when the
output of the expression is asserting the correct result. If the current input
happens to be identical to the previous input, the expression exhibits no transi-
tion behavior at all, correct or incorrect.

The boundaries of data presentation and resolution, traditionally expressed
by the mathematician, are missing in a concurrent composition of mathemati-
cal functions. The expression of these boundaries must be re-established.

2.3.2 Re-establishing the Expression of Boundaries
A concurrent composition of mathematical functions with a stably presented
input can be relied on to eventually settle to a stable correct result of the
presented input. This eventual stability can be characterized with a time inter-
val beginning from the presentation of input with a duration of the propaga-
tion time of the slowest path in the expression plus a margin to accommodate
the propagation variabilities of the path. This time interval can be associated
with memory elements at the input and the output of the function. The
memory element at the input presents and stably maintains the input to the
expression at the beginning of the time interval. The memory element at
the output of the expression ignores the indeterminate transitions during the
time interval and samples the correct result after the expression has stabilized
at the end of the time interval. The chaotic behavior of the concurrent expres-
sion is isolated by the time interval and the bounding memories.

The expressivity of the mathematician, who can easily manage the correct
resolution of a partial ordering of functions, has not been fully recovered.


Instead, the behavior of the concurrent functions is blurred into a single timed
event characterized by the time interval itself. But enough expressivity of
boundary behavior has been recaptured to be of practical use.

2.3.3 Composing Time Intervals
A concurrent/combinational expression, its time interval, and its input and
output memory elements can now be composed with other similar units of
expression in terms of their time intervals and by sharing their memory ele-
ments. If this composition contains concurrency, the same problem of differing
and varying delays among components (in this case the time intervals) leads
to indeterminate behavior.

This second-order indeterminacy can be avoided, however, if all time inter-
vals are identical and are in phase. The result is a strict sequencing of events
in terms of a succession of identical time intervals most conveniently expressed
by a globally available interval signal or clock. When the clock tics, each
memory element simultaneously receives output from a predecessor expres-
sion and presents input to a successor expression establishing the boundaries
of data fl ow through the expression. Between clock tics the memory elements
contain the sampled state of the system.

2.3.4 The Simplicity of Sequentiality
By associating with the concurrent expression a time interval and memory
elements that mask its indeterminate behavior and that determinantly bound
its data fl ow behavior, the uncoordinated behavior of concurrent functions has
been rendered suffi ciently coordinated. Synchronous sequentiality tames the
complexities of concurrency and provides a key to practical process expres-
sion. But there is another way to re-establish the lost expressivity of the
missing mathematician.

2.4 SYMBOLIC COORDINATION
The expression of the boundaries of data presentation and the appreciation
of those boundaries in the behavior of the functions can be re-established
purely in terms of symbolic behaviors by enhancing the symbolic expression
of the data to express its own fl ow boundaries and by enhancing the symbolic
expression of the function to appreciate those fl ow boundaries.

2.4.1 Symbolically Expressing Data Flow Boundaries
To the symbols representing data is added a symbol, NULL, that explicitly
represents “not-data.” This allows two disjoint state domains in the represen-
tation of data: “completely data” (all data symbols) and “completely not-data”
SYMBOLIC COORDINATION 17

THE SIMPLICITY OF CONCURRENCY
(all NULL symbols). The data can now transition monotonically between
“completely not-data” and “completely data” as illustrated in Figure 2.2. The
transition of the input from “completely not-data” to “completely data” is
