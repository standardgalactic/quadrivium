
Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright © 2007 John Wiley & Sons, Inc.

TRANSCENDING THE
VARIABLE
The notion of the variable is deeply embedded in computer science and pro-
gramming. Yet it is also viewed as a troublesome concept. There have been
efforts to eliminate the variable, to tame the variable, and to compensate for
the variable. However, there have been no efforts to question the notion of
variable itself. Perhaps the troublesome aspects can be dealt with by slightly
altering the notion of what a variable name means.

4.1 THE VARIABLE IN MATHEMATICS
The notion of the variable is one of the more profound ideas of mathematics.

Variables allow the relations of an algebraic function to be expressed in com-
pletely general terms with arbitrary symbols (variables) as placeholders for
numeric values.

Consider the algebraic equation F = A + B. A and B are the domain variables.

They can be replaced with any numeric value in the domain of the function. F
is the range variable. It is replaced with the result of the function on whatever
values replaced A and B. Once replaced, an algebraic variable no longer exists.

Nor does the equation and its variables renew after a resolution. Each instance
of the equation is a new instance of substitution on a new equation.

The notion of a mathematical variable is clearly defi ned:
In general, variables, which are usually represented by letters, represent empty
space into which an arbitrary element from a fi xed set can be substituted. [2]

TRANSCENDING THE VARIABLE
A variable is a symbol or a place-holder that can be replaced by any member
of a given set. The given set is called the universal set or the universe of the
variable. Each member of the set is called a value of the variable. [4]
4.2 THE VARIABLE IN COMPUTER SCIENCE
While there is no confusion about what a variable is in computer science, it is
diffi cult to fi nd an explicit defi nition. The word and the concept just are. Very
early in one text discussing basic principles of programming the following
passage occurs with no prior defi nition, discussion, or even mention of the
concept of variable: “m ← n means the value of the variable m is to be replaced
by the current value of the variable n” [3].

The passage alone is nevertheless suffi ciently defi ning. A computer science
variable is a symbolic name of a persistently existing storage bin that can
contain over time a sequence of values from the universe of the variable in
contrast to an element of a symbolic equation that can be replaced. The vari-
able is not replaced by a value, but the symbolic variable coexists with a value
contained in its storage bin. This contained value can be accessed or replaced
by referencing the storage bin with the symbolic variable.

4.2.1 The Confusion
While there are differences between the notion of the mathematical variable
and the notion of the computer science variable, their usage appears identical.

F = A + B is a valid programming statement as well as a valid mathematical
equation. The mathematical equation, however, expresses nothing about
where the values might come from. Anyone anywhere in the universe can
substitute the variables with values and resolve the resulting equation. One
general equation serves all mathematical purposes.

On the other hand, each variable of a programming statement explicitly
expresses where its value comes from by uniquely binding to a specifi c storage
bin. The symbolic name of the variable is associated with the storage bin rather
than with a specifi c equation. There may be many identical equations in a
program referencing different variables. And there may be many different
equations referencing the same variable.

The mathematical variable is bound to its equation. The computer science
variable is bound to a memory storage bin. The two notions of variable are
quite different.

4.2.2 The Discontents
What appears on the surface to be a happy correspondence of a convenient
abstraction becomes, in the details of binding, a troublesome concept for
computer programming.


Scope of Reference A variable, not being bound to a specifi c equation, can
be referenced from anywhere in a program. Any equation in the program can
reference an incorrect variable. There is no inherent limitation to a variable’s
scope of reference. There have been conventions imposed to limit the scope
of reference, such as information hiding, block structuring, strong typing, and
object orienting. These help some, but there is still signifi cant reference
freedom within the limited scopes. It is up to the programmer to get every
variable reference right.

Order of Reference Some variables depend on the values of other variables
and variable references must occur in a specifi c partial order to properly
implement the dependency relationships of the process. There may be many
sequences that express the specifi c partial order. There is nothing inherent in
the variables to suggest a proper sequence. A number of imposed conventions
have addressed this issue, including eliminating the GOTO statement, struc-
tured programming, and limiting expression modules to an easily graspable
size. In the end, expressing a sequence that properly implements the specifi c
partial ordering is entirely up to the programmer.

Side Effects A program can mimic a mathematical equation as a subpro-
gram with domain and range variables to which actual values are passed. This
is very like the mathematical view of substituting variables with actual
values in a unique instantiation of an equation. But a subprogram can do
something that a mathematical equation cannot do. It can alter the values of
domain variables, even though they are strictly input variables that are not
intended to be altered. This is called a side effect. Side effects can be particu-
larly sinister because a poorly written library routine that a programmer has
no control over can undermine her most exemplary effort to write a correct
program.

4.3 A COMPETITION OF MATHEMATICAL FORMALISMS
The notion of the variable is at the center of a competition among mathemati-
cal formalisms applied to programming. Imperative programming derives
from the notion of the algorithm as a step by step transformation of an explic-
itly referenced state [3]. In a sequence of transformations one transformation
writes a storage bin to be read by a later transformation. The write and the
read are expressed by an identical variable name associated with each opera-
tion that binds to a storage bin.

Functional programming, on the other hand, views the variable name refer-
ence as a major source of programming ills and strives to eliminate the use of
variable names entirely by expressing processes in terms of function applica-
tion and by expressing function composition by syntactic nesting [1]. Values
fl ow directly from function application to function application through nesting
A COMPETITION OF MATHEMATICAL FORMALISMS 45

TRANSCENDING THE VARIABLE
relationships, eliminating the need to make explicit references to storage bins,
and hence eliminating the need for variable names. All the expressional diffi -
culties with variables, including side effects, are eliminated. However, syntac-
tic nesting is a limited form of expressing association.

Figure 4.1 illustrates the situation. Figure 4.1a is a graphic representation
of a combinational expression. It is expressed in terms of direct association
relationships among operators. There is no explicit expression of address-
able storage. Figure 4.1b shows a sequential version of the combinational
expression. The explicit expression of storage is necessary in addition to
the expression of the sequence to express the process. Figure 4.1c is a func-
tional expression of the process. The operations are directly associated
by nested parenthesis. Again, there is no explicit expression of or reference
to storage of state: To variable or not to variable, that is the question. Or
is it?
4.4 PROCESS EXPRESSION AS ASSOCIATION RELATIONSHIPS
Neither the imperative nor the functional methods fully satisfy? While the
imperative method of sequencing operations and referencing variables seems
plodding, inelegant, and too free form, functional programming seems a pre-
tension that does not quite deliver and is too limiting. Can there be an under-
lying conceptual commonality that unifi es and illuminates?
If there is a underlying commonality of process expression it should
be discernible in any serviceable expression of a process. Consider the
integer matrix addition routine of Example 4.1 in a typical imperative form.

MATRIX1 is added to MATRIX2 to produce MATRIX3 all of which are
N by M.

A
B
C
D
E
F
G
H
I
C
D
E
F
G
H
I
A
B
memory
a. Labeled partially ordered expression (concurrent)
b. Mapped to completely ordered expression (sequential)
sum(H(E(D(A(x,y),B(x,y)),z),F(D(A(x,y),B(x,y)),z)))
carry(I(C(x,y),G(D(A(x,y),B(x,y)),z)))
x
y
z
xyz
carry
sum
carry
sum
c. Mapped to functional expression
Figure 4.1 Three forms of a single expression.


The outer loop associates the corresponding vectors of each matrix and pres-
ents them to the inner loop. The inner loop associates the corresponding
integers of each vector and presents them to the integer add expression.

The integer add software expression is a sequence of instructions that move
the corresponding integers from memory to associate them directly to the
hardware add expression. The hardware add expression associates the corre-
sponding digits of each integer by a wire connection and presents them to the
expression for digit addition.

