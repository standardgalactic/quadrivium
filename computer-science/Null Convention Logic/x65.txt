the mutually exclusive group of places in braces. In the defi nition given in
Example 12.9 content in exactly one of A0< >, or A1< > and one of B0< >, or
B1< > is completeness for the source list and content in one of $0, or $1 is
completeness for the destination list.

12.5.3 Conditional Completeness
Conditional completeness is expressed when the content of one place in a list,
which must always be complete, determines the completeness relations of
other places in the list delimited by braces.

Conditional Input Conditional input is shown in Example 12.10. The invo-
cation of fan-in will pass $in1, $in2, $in3, or $in4 depending on the content of
$select, which can be A, B, C, or D. The content of select< > will form an
invocation name in the place of resolution. The invoked defi nition will return
an expression fragment that directs the content of one of the input places
to the output destination place. Only one of $in1, $in2, $in3, or $in4 needs
content for completeness. The braces explicitly express this completeness rela-
tion. Input completeness is a $select content and content of the selected source
place. The mutually exclusive completeness relationships are also refl ected in
the defi nition lists.

The unselected places may or may not have content. If a place has content
and is not selected, its content will be retained until a presentation occurs that
does select it.

Conditional Output Conditional output can also be expressed as shown in
Example 12.11. The invocation of fan-out will pass $input to output1< >,
OR[({A0< > A1< >}{B0< > B1< >})({$0 $1}) . . . : ]
Example 12.9 Mutually exclusive completeness.

inv
fanin($select {$input1 $input2 $input3 $input4})(output< >)
def
fanin[(select< > {in1< > in2< > in3< > in4< >})($out)
$select( ) : A[out< $in1 >]
B[out< $in2 >]
C[out< $in3 >]
D[out< $in4 >] ]
Example 12.10 Conditional input expression.

COMPLETENESS RELATIONS 207

THE INVOCATION LANGUAGE
output2< >, output3< >, or output4< > depending on the content of select< >.

Output completeness is exactly one of output1< >, output2< >, output3< >, or
output4< >. The braces explicitly express this completeness criterion. The
mutually exclusive completeness relationships are also refl ected in the defi ni-
tion lists.

Serial Bus: Fan-in/Fan-out Expression Example 12.12 is a serial bus
expressed by two invocations associating the output of a fan-in with the input
of a fan-out.

Parallel Bus: Fan-out/Fan-in Expression Example 12.13 is a parallel bus
expressed by associating the output of multiple fan-outs with the input of
multiple fan-ins. The outA’s and outB’s of the fan-out invocations associate
to the inputs of the fan-in invocations.

inv
fanout($select $input)({output1< > output2< > output3< > output4< >})
def
fanout[(select< > in< >)({$out1 $out2 $out3 $out4})
$select( ) : A[out1< $in >]
B[out2< $in >]
C[out3< $in >]
D[out4< $in >] ]
Example 12.11 Controlled fan-out expression.

inv
fanin($selin {$in1 $in2})(serialmid< >)
inv
fanout($selout $serialmid)({out1< > out2< > out3< > out4< >})
Example 12.12 Serial bus.

inv
fanout($seloutA $srcA)({outA1< > outA2< > outA3< > outA4< > outA5<
>})
inv
fanout($seloutB $srcB)({outB1< > outB2< > outB3< > outB4< > outB5< >})
inv
fanin($selin1 {$outA1 $outB1})(dest1< >)
inv
fanin($selin2 {$outA2 $outB2})(dest2< >)
inv
fanin($selin3 {$outA3 $outB3})(dest3< >)
inv
fanin($selin4 {$outA4 $outB4})(dest4< >)
inv
fanin($selin5 {$outA5 $outB5})(dest5< >)
Example 12.13 Parallel bus.


12.5.4 Arbitration Completeness
Arbitration manages the content fl ow of two or more places of uncoordinated
fl ow into a single coordinated fl ow. If all the arbitrated places have content
simultaneously, the places will compete for the privilege of fl owing through
the arbiter. It cannot be predetermined which content will fl ow. Contents that
lose the competition will remain and wait their turn or participate in the next
competition. If only one place has content, the content will fl ow through the
arbiter without competition.

The arbitrated places are encompassed with double braces in the invocation
destination list. The double-braced list of destination places associates to a
single-source place in the defi nition source list.

Example 12.14 is an expression that arbitrates the content fl ow of $place1
and $place2. The arbitrated content fl ows into placeB< >, through the expres-
sion in the place of resolution and out through $pass back to next< >. The
uncoordinated fl ow into Place1 and place2 becomes a coordinated fl ow out of
next< >.

12.5.5 Complex Completeness Relationships
There can arise circumstances of more complex completeness relationships.

An ALU is one of these. The ALU is a locality of multiple possibilities associ-
ated by a single command content. While this is an artifact of sequentiality,
the language should encompass it. Each function in the ALU can take differ-
ent confi gurations of input and assert different confi gurations of output. Not
all inputs of the ALU are always used, and not all outputs are always asserted.

What needs to be expressed in the context of the defi nition is the completeness
relationships for each possible confi guration of the ALU. The questions to be
answered are, What are the completeness relations for each list, and how does
the completeness relations of the destination list relate to the completeness
relations of the source list? This is the critical information to confi gure a
coordination protocol between the source list (the output of the invocation)
and the destination list (the input of the invocation). With these relationships
expressed, any form of coordination from cycles to clocks can be automatically
added to the expression.

Example 12.15 shows the defi nition for an ALU that receives a command
whose content is always complete and one to three other inputs. There are
seven commands: shift left(SL), shift right(SR), NOT, AND, OR, XOR, and
ADD. Each command can involve a different input and output completeness
inv
Arbiter({{$place1 $place2}})(next< >) . . . . . $next
def
Arbiter[(placeB< >)($pass) pass<$placeB> : ]
Example 12.14 Arbitrated places.

COMPLETENESS RELATIONS 209

THE INVOCATION LANGUAGE
relation. The shifts and NOT take one input and assert one output, the logic
functions take in two inputs and assert one output, and the ADD takes in
three inputs and asserts two outputs.

Each completeness relation is expressed as a sublist of places enclosed in
parenthesis. All of the places of a sublist must have content for completeness.

The seven sublists are enclosed in braces, indicating that only one of the sub-
lists will have content. Each sublist is then labeled with the enabling command
content.

Completeness for the source list is content in the command place and com-
plete content in one of the sublists. Completeness for the destinationlist is
complete content in one of the sublists. The destination list is structured iden-
tically to the source list with a corresponding order of sublists.

12.5.6 The Occasional Output
An expression might resolve a multitude of presentations before asserting an
output. A code detector, for instance, might only occasionally assert “detect.”
Consider that an expression always asserts a “yes” or a “no” and that only the
“yes” is to be passed on. A response fi lter expression, shown in Example 12.16,
can receive an answer containing “yes” or “no” and only pass on the “yes”
content. When the content is “no”, an empty content is returned to the place
of resolution, to $NO and to NO< >,which expresses completeness for the
invocation but does not associate with any destination place in the expression.

NO< > is a dead-end association. When a “yes” is received, a “yes” content is
returned, passed on through $YES to OK< > in the invocation, and continues
on to $OK.

ALU(ADD, $A $B $carryin)(output< >carryout< >)
ALU[(command< > {SL(A< >) SR(A< >) NOT(A< >) AND(A< > B< >)
OR(A< > B< >) XOR(A< > B< >) ADD(A< > B< > carryin< >})
({SL($result) SR($result) NOT($result) OR($result)
AND($result) XOR($result) ADD($result $carryout)})
. . . . . . : . . . ] ]
Example 12.15 Defi nition of ALU with complex completeness relations.

inv
report($answer)(OK< > NO< >) . . . . $OK
def
report[(answer< >)({$YES $NO})
$answer() :
yes[yes<yes>]
no[NO< >] ]
Example 12.16 Example with occasional source place.


12.6 BUNDLED CONTENT
Bracket pairs nested within a source list of a defi nition indicate unbundling of
content from a single destination place in the invocation destination list. Each
bracket pair associates with a single destination place of an invocation. Bracket
pairs nested within a destination list of a defi nition indicate bundling of content
into a single source place in the invocation source list. Each bracket pair asso-
ciates with a single source place in the invocation source list. Bundling is
a convenient convention when many association relationships follow an iden-
