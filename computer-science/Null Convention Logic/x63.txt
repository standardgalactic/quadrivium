There are four syntax structures: the source place, the destination place, the
invocation, and the defi nition. A source place anywhere in the string is later-
ally associated by name correspondence to one or more destination places.

Boundaries within the network are expressed with an invocation. One or more
destination places are associated as an input boundary, and one or more
source places are associated as an output boundary. The invocation boun-
daries laterally associate with other invocations and hierarchically associate
by name correspondence to a defi nition that contains the expression between
the input and output boundaries of the invocation.

12.3.1 Lateral Composition: Place-to-Place Association
Non-neighbor places in the string are associated by name correspondence
between a source place and one or more destination places. Sourcename is
the correspondence name of the source place and destinationname is the cor-
respondence name of the destination place.

Source place:
sourcename· content Ò
Destination place:
$destinationname
A source place will associate with all destination places with an identical
correspondence name. The behavior model is that the content of a source
place fl ows to each destination place of the same name. In Figure 12.1a
AGXST is the content of a source place named Abel. Source place Abel< >
is associated with one destination place $Abel by name correspondence. The
AGXST will fl ow from source Abel< > to destination place $Abel. Figure
12.1b shows a source place named Baker with a content NGRYU with a fan-
out association by name correspondence to three destination places named
Baker. The content, NGRYU, will fl ow to all three destination places.

A single correspondence name can span only one association. There cannot
be two source places of the same name. Figure 12.2a illustrates the ambiguity
of identically named source places.

$Abel
Abel< AGXST >
Baker< NGRYU >
$Baker
$Baker
$Baker
Name correspondence association
Syntactic structure association
a. One-to-one association
b. Fan-out association
Figure 12.1 Source to destination association expressions.

THE SYNTAX STRUCTURES 199

THE INVOCATION LANGUAGE
To extend a path of association, a destination place associates with a dif-
ferently named source place by syntax association. Figure 12.2b shows a source
place fi rst< > with a content FSZPQ that is associated with destination $fi rst
by name correspondence association. Destination place $fi rst is associated
with source place second< > by syntax structure association. Source place
second< > is associated with destination place $second by name correspon-
dence association. Destination place $second is associated with source place
third< > by syntax structure association. Source place third< > is associated
with destination place $third by name correspondence association. The FSZPQ
in source place fi rst< > ultimately fl ows through the associations to destination
place $third.

Different syntax structures are associated by name correspondence, and
different correspondence names are associated by syntax structure. Extended
paths of association are expressed by alternating name correspondence
association and syntax structure association, weaving a tapestry of arbitrarily
complex association relationships in a one-dimensional string of symbols.

12.3.2 Hierarchical Composition: The Invocation and Defi nition
The invocation and defi nition express the boundaries of both lateral and hier-
achical composition.

The Invocation The invocation associates destination places to form an
input boundary and associates source places to form an output boundary. The
behavior model is that the boundaries are completeness boundaries and that
the invocation expresses completeness criterion behavior between its input
and output boundaries. When the content at the output boundary is complete,
the content presented to the input is complete, and the output is the correct
resolution of the content presented to the input boundary. Invocation bound-
aries are the boundaries of the expression. They are composition boundaries,
coordination boundaries, and partition boundaries.

An invocation is a named syntax structure of two parenthesized lists. Invo-
cationname is the correspondence name of the invocation. The destination list
b. Daisy chain association
first< FSZPQ >
second<$first>
third<$second>
$third
a. Ambiguous association
$Abel
Abel< AGXST >
Abel< >
Name correspondence association
Syntactic structure association
Figure 12.2 Daisy chaining associations.


is the input boundary for the invocation, in which the content to be resolved
is received, and the source list is the output boundary for the invocation,
through which the result content is distributed.

Invocation
invocationname(destination list)(source list)
Figure 12.3 shows the syntax structure of the invocation and its external
association relationships. ProcX is the correspondence name of the invocation
that associates with a defi nition of the same name.

The Defi nition The defi nition expresses the network of associations between
the boundaries of the associated invocation. A defi nition is a named syntax
structure delimited by brackets containing a source list delimited by parenthe-
sis, a destination list delimited by parenthesis, a place of resolution terminated
by a colon followed by a place of contained defi nitions. Defi nitionname is the
correspondence name of the defi nition. The source list is the input for the
defi nition through which a formed name is received, and the destination list
is the output for the defi nition through which the results are delivered. The
place of resolution is best understood as a bounded pure value expression that
can contain association expressions.

defi nition
defi nitionname[(source list)(destination list)
place of resolution : contained defi nitions]
A defi nition associates to an invocation by name correspondence. The place
of resolution contains the expression between the boundaries that resolves the
presented input to an asserted output. The source list receives the input con-
tents by correspondence of syntax structure from an invocation destination
list and associates them to destination places in the resolving expression in the
place of resolution. The resolving expression contains source places that asso-
ciate to the output destination places. The destination list receives the results
from the source places of the resolving expression and returns them by cor-
respondence of syntax structure to the invocation source list.

Name correspondence association
Syntax structure association
ProcX($place1$place2$place3)(placeA< >placeB< >)
...$placeA
...place1< 1 >
...place2< 0 > ...place3< 1 >
...$placeB
name
destination list
source list
input completeness
boundary
output completeness
boundary
Figure 12.3 The invocation syntax and external associations.

THE SYNTAX STRUCTURES 201

THE INVOCATION LANGUAGE
Figure 12.4 shows the syntax structure of the defi nition and its internal
association relationships. ProcX is the correspondence name of the defi nition
and associates with a invocation of the same name.

12.3.3 The Association of Invocation and Defi nition
An invocation associates by name correspondence to an identically named
defi nition. The lists of the invocation associate with the lists of the defi nition
by syntactic structure. The source list of the defi nition associates to the desti-
nation list of the invocation by order correspondence. The destination list of
the defi nition associates to the source list of the invocation by order corre-
spondence. This might seem somewhat confusing at fi rst, but the rationale is
straightforward.

In Figure 12.5a the invocation ABC associates by name correspondence
to defi nition ABC. Destination places of the invocation destination list
associate by order with the source places of the defi nition source list. Source
places of the invocation source list associate by order with the destination
places of the defi nition destination list. The destination list of the invocation
is places to where contents fl ow to form the content to be resolved. The
source list of the defi nition is the places from which the content fl ows to the
resolving expression. The destination list of the defi nition is the places to
where the results of the resolving expression will fl ow, and the source list of
the invocation is the places from which results will fl ow to their destinations.

Figure 12.5b gives a graphic representation of the invocation–defi nition syn-
tactic interface.

The interface relationships can also be understood in terms of daisychain-
ing. Figure 12.5c shows the invocation and defi nition lists with destination
places merged into their associated source places showing the relationship of
the invocation and defi nition boundaries in terms of syntactic daisychaining.

Because its interface of association places with the external expression is
purely syntactic, a defi nition forms an isolated correspondence name domain
for source places and destination places. Internal names can be chosen without
concern that there will be ambiguity with the external expression.

Name correspondence association
Syntax structure association
ProcX[(A< >B< >C< >)($result1 $result2)
ProcA($A $B $C)(result2< >)... : ... ]
name
destination list
source list
Resolving expression
in place of resolution
Figure 12.4 The defi nition syntax and internal and external associations.


