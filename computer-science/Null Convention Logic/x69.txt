F[J,N,R]
pf[r]
hb[i]
ld[m]
im[s]
rW[v]
TU[b,d,f]
T
U
W
h
l
p
b
f
W
h
p
d
l
m
r
W
i
s
v
B
C
F
G J
K
N
O
R
h
l
p
Figure 12.14 Resolution progression of pure value expression.


AND
OR
AND
AND
S0
S1
X0
X1
Y0
Y1
OR
CO0
CO1
AND
OR
AND
AND
CI0
CI1
NOT
NOT
NOT
NOT
Figure 12.15 Pure association expression of full-adder.

invocation
FULLADD($A $B $C)(< > CARRYOUT< >) . . . $CARRYOUT
defi nition
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
NOT($X)(OP1< >) AND($OP1 $Y)(OP4 < >)
NOT($Y)(OP2< >) AND($X $OP2)(OP3< >)
OR($OP4 $OP3)(FIRSTSUM< >)
NOT($FIRSTSUM)(OP6< >) AND($C $OP6)(OP7< >)
NOT($C)(OP5< >) AND($OP5 $FIRSTSUM)(OP8< >)
OR($OP7 $OP8)(SUM< >)
AND($X $Y)(OP10< >) AND($C $FIRSTSUM)(OP9< >)
OR($OP10 $OP9)(CARRY< >)
: OR[([{A0< > A1< >}][{B0< > B1< >}])([{$O0 $O1}])
out1($A1 $B1)
out1($A1 $B0)
out1($A0 $B1)
out0 $A0 $B0) : out1[O1<D>] out0[O0<D>] ]
AND[([{A0< > A1< >}][{B0< > B1< >}])([{$O0 $O1}])
out1($A1 $B1)
out0($A1 $B0)
out0($A0 $B1)
out0 $A0 $B0) : out1[O1<D>] out0[O0<D>] ]
NOT[([{A0< >A1< >}])([{$O0 $O1}])
O0<$A1>
O1<$A0>:] ]
Example 12.27 Pure association string expression of full-adder.

The individual paths of the dual-path inputs associate in the destination list
of each invocation. For each presentation the destination list of only one of the
invocations will have complete content enabling the invocation. The enabled
invocation will invoke a defi nition that associates a data value with one of the
A PROGRESSION OF EXAMPLES 223

THE INVOCATION LANGUAGE
mutually exclusive output places. The set of invocations expresses the truth
table for the OR operator in terms of association differentiation. The value dif-
ferentiation version of OR is expressed in Examples 12.19, 12.20, and 12.21.

How primitive relationships may be mapped to autonomy is not necessarily
a concern of the language, but the mapping should nevertheless be expressible
in the language. This example illustrates disjointed mapping. The language
expression takes the expression to a certain level, and then a mapping occurs
between the language primitive relationships and a different form of expres-
sion that is equivalent.

In this case the language expresses the primitive association relationships
as a set of invocations for each Boolean function. The set of invocations in
the OR defi nition map directly to the pure association expression of Figure
12.16a, which is a minterm form NULL Convention Logic (NCL) expression
that can be transformed into the equivalent expressions in Figure 12.16b or
into the expression in Figure 12.16c. The NCL expression form of Figure
12.16c was directly substituted for the Boolean functions of the full-adder of
Figure 12.7 to arrive at the expression of Figure 12.15.

The NCL operators can also be expressed in the language as pure value
expressions. Example 12.28 shows the 2of2 operator and the 3of6 operator
expressed as pure value expressions within the language.

12.8.10 Another Pure Association Full-Adder
The full-adder of Figure 12.17 is a pure association NCL expression derived
directly from the mapping of differentnesses for the binary full-adder, rather
than being mapped from some other form of expression.

Example 12.29 is the language expression in terms of NCL operators cor-
responding to Figure 12.17. The dual-rail paths are unbundled and bundled in
O0
A0
A1
B0
B1
O1
OR
OR
B1
A0
B0
A1
O1
O0
a. Minterm form
b. Equivalent 1
c. Equivalent 2
B1
A0
B0
A1
O1
O0
AB
OR
2of2[(A< > B< >) $A$B : DD[D] ]
3of6[(A< > B< > C< > D< > E< > F< >)
$A$B$C$D$E$F :
DDD[D] ]
Example 12.28 NCL expressions as pure value language expressions.

Figure 12.16 NCL mappings of Boolean OR function.


invocation
FULLADD($A $B $C)(< > CARRYOUT< >) . . . $CARRYOUT
defi nition
FULLADD[(({A0< > A1< >})({B0< > B1< >})({C0< > C1< >}))
( ({$SUM0 $SUM1}) ({$CARRY0 $CARRY1}))
CARRY0< 2of3($A0 $B0 $C0) >
CARRY1< 2of3($A1 $B1 $C1) >
SUM0< 3of5($CARRY1 $CARRY1 $A0 $B0 $C0) >
SUM1< 3of5($CARRY0 $CARRY0 $A1 $B1 $C1) > :
2of3[(A< > B< > C< >) $A$B$C : DD[D] ]
3of5[(A< > B< > C< > D< > E< >)
$A$B$C$D$E : DDD[D] ] ]
Example 12.29 Language expression of NCL Full-adder.

S
Y
X
CI
CO
Figure 12.17 An optimal version of pure association full-adder.

the defi nition of FULLADD and associated to the NCL operators. The NCL
operators are expressed as pure value expressions.

12.9 GREATER COMPOSITION: FOUR-BIT ADDER
Greater expressions are composed by associating places of destination lists
and source lists among invocations. A network of invocations can be encap-
sulated in a defi nition resulting in hierarchical levels of defi nitions of networks
of invocations.

12.9.1 Associated Invocations
Invocations of FULLADD can be associated to form the expression of a four-
bit adder. The four-bit parallel adder expression of Figure 12.18 is the lan-
guage expression for the graphic expression of Figure 7.12. Boundaries
expressed by the invocations that correspond to the boundaries of the graphic
expression are highlighted. The invocation of 4BITADD receives two four-bit
