N
N
N
N
N
N
N
N
N
A
B
C
D
E
F
G
C
X
Y
SUM (T, F, N)
(T, F, N)
CARRY (T, F, N)
Figure 2.4 The completeness criterion for a combinational expression as a whole.

SYMBOLIC COORDINATION 19

THE SIMPLICITY OF CONCURRENCY
When the output of the expression monotonically transitions to “com-
pletely data,” it means that the input is “completely data,” the data wavefront
has completely propagated through the expression, and the data output is the
correct result of the presented input. When the output of a concurrent expres-
sion monotonically transitions to “completely NULL,” it means that the input
is “completely NULL,” the NULL wavefront has completely propagated
through the expression, and the NULL output is the correct result of the pre-
sented input. The output of the expression as a whole expresses the complete-
ness criterion and maintains the monotonic behavior of the input.

It does not matter when or in what order the values transition at the input
of the expression. Nor does it matter what the delays might be internal to the
expression. Consider the shaded function in Figure 2.4. It does not matter how
long the data values (NULL values) take to propagate through other opera-
tors and over signal paths to the input of the shaded function, its output will
not transition until all values are data (NULL) at the input of the function.

For each wavefront each function synchronizes its input and switches its
output exactly once to a correct value coordinating the orderly propagation
of a wavefront of monotonic transitions of correct result values through the
concurrent expression until the output of the expression as a whole is com-
plete. The orderly symbolic behavior of each individual function accumulates
to orderly symbolic behavior of the whole expressing the completeness crite-
rion for the expression as a whole.

The behavior of the expression is fully determined in terms of symbolic
behavior. There is no explicit expression of control. There is no consideration
of timing relationships anywhere in the expression. There are no races, no
hazards, and no spurious result values. There is no nondeterministic behavior.

For a given input there is only one possible ordering of operators, one possible
path through the state space. There is no state space explosion. The behavior
of the expression is deterministic, is repeatable, is testable and is trustable.

The complexities of concurrency have vanished. The expression is complete
in itself and behaves deterministically on its own terms. No supplementary
expression such as a time interval, a memory, a sequence controller or a math-
ematician is required.

2.4.4 A New Symbolic Primitivity
The representation of data is no longer just data symbols. It includes what is
essentially a syntax symbol, NULL, that separates successive presentations of
input data. The operators are no longer mathematical functions. They main-
tain state. But they maintain state in a very specifi c way that relates to and
propagates the monotonic completeness behavior of the data.

With these new primitivities the expressivity of the mathematician has been
effectively integrated into the symbolic expression of the data and the func-
tions. There is no compromise. The expression behaves exactly as if a mathe-
matician had managed its behavior.


2.4.5 Ignoring NULL
Enhanced functions vary in their behavior only for a data wavefront. The
NULL wavefront behavior is identical and universal for all enhanced func-
tions. Presented with a NULL wavefront, the enhanced functions of any
network will all transition to NULL. So, when expressing a concurrent expres-
sion, the NULL wavefront behavior can be ignored and only the behavior of
the data wavefront has to be explicitly expressed. The coordinating complete-
ness behavior of the enhanced functions is also identical and universal and
need not be explicitly expressed.

Given an expression in terms of mathematical functions as in Figure 2.5a,
the mathematical functions can be directly substituted with enhanced func-
tions as in Figure 2.5b, creating a deterministically behaving symbolic expres-
sion. One can continue composing solely in terms of mathematical functions
just as always. An expression with enhanced functions can be automatically
generated from an expression of mathematical functions.

One can compose concurrent networks of functions with confi dence that
the concurrent behaviors will properly coordinate without explicitly express-
ing any of the details of the coordination, just like expressing a sequence of
operations with the confi dence that the sequence will be properly coordinated
without explicitly expressing any of the details of coordinating the sequence.

2.5 COORDINATING CONCURRENT NETWORKS
The enhanced functions of a network will coordinate their behavior among
themselves, endowing the network with completeness criterion behavior.

Networks can coordinate among themselves in terms of this completeness
behavior.

2.5.1 The Self-coordinating Network
The completeness of the output of a network can be collected and expressed
by asserting a single NULL value for complete NULL and a single data
value for complete data. This completeness value can be domain inverted
and become an acknowledge value fedback to the input of the network. The
N
N
N
N
N
N
N
N
N
a. Boolean functions
b. Enhanced Boolean functions
Figure 2.5 Identical concurrent networks mapping to different primitives.

COORDINATING CONCURRENT NETWORKS 21

THE SIMPLICITY OF CONCURRENCY
domain inversion function, inverts a data value to a NULL value and inverts
a NULL value to a chosen data value, in this case T.

The acknowledge signal can regulate the presentation of input to the
network, as shown in Figure 2.6, with input regulator logic. When the acknowl-
edge value is data, it will allow a data wavefront to pass the input regulator,
which is a rank of enhanced AND functions. As long as the acknowledge value
remains data the data wavefront will be stably maintained by the input regula-
tor even if the data inputs to the AND functions transition to NULL. When
the acknowledge value becomes NULL, a NULL wavefront will be allowed
to pass. As long as the acknowledge value remains NULL, the NULL wave-
front will be stably maintained by the rank of enhanced AND functions even
if the data inputs to the AND functions transition to data. The acknowledge
value and the input regulator regulates the orderly presentation of alternating
data and NULL wavefronts to the concurrent expression.

The closed expression formed by the acknowledge path is called a cycle.

By virtue of the domain inversion a cycle is an oscillator which oscillates
between completely data and completely NULL.

2.5.2 Composing Cycles
Cycles can be coupled by interlinking the cycles as in Figure 2.7. The comple-
tion detection of a presenting cycle is placed after the input regulation of a
receiving cycle.

Presentation
boundary
Result
boundary
N
N
N
N
N
N
N
N
N
N
Input
regulation
N
N
N
C
X
Y
Acknowledge
Completness
detection
domain
inversion
T
N
F
K
J
I
N
N
T
domain
inversion
CARRY
SUM
Figure 2.6 A concurrent network coordinating its own input forming a cycle.

Input
regulation
