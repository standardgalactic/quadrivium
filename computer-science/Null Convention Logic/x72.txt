
Figure 12.22 Four-phase handshake protocol.

COORDINATION BOUNDARIES 233

THE INVOCATION LANGUAGE
Each boundary must acknowledge all the places that contribute to its
content and must be acknowledged by all the places to which it contributes.

Acknowledge relationships for the example of Figure 12.19 are shown in
Figure 12.24. When the four destination places of the destination list are com-
plete, the destination list acknowledges the four source places. When the two
source places of the source list are complete, the source list acknowledges the
destination list. When the three destination places associated with the two
source places of the source list are complete, each acknowledges the source
Thank you
request content
You’re welcome
Next content
Next content
Thank you
request content
Thank you
request content
Next content
Next content
Thank you
request content
Thank you
request content
Next content
Next content
Thank you
request content
You’re welcome
You’re welcome
Figure 12.23 Protocol behavior of interlinked cycles.

destination
list places
source list
places
input
boundary
output
boundary
Definition
Invocation
source list
places
destination
list places
source
places in
other
invocations
place of resolution
expression
destination
places in
other
invocations
Figure 12.24 Completeness boundaries of invocation with acknowledge fl ow.


list. When acknowledges from all destination places are received, the source
list of the invocation is acknowledged.

All boundaries between explicitly coordinated boundaries are coordinated
with the completeness criterion. All boundaries above explicitly coordinated
boundaries are coordinated in terms of the explicitly coordinated boundaries.

These coordination relationships are discussed in Section 7.2.

Clocked Coordination Coordination can also be added at a chosen hierar-
chical level with a time interval, a clock and clocked registers. However, the
timing behavior of the encompassed expression must then be guaranteed to
be within the timing constraints of the clock and the behavior of the registers.

Figure 12.25 shows the four-bit adder coordinated with clocked registers.

Mapping to Sequential Coordination An invocation expression can be
easily mapped to an explicit expression of sequential coordination. The semi-
colon is introduced as a new syntax symbol to express statement sequence.

Each invocation is a bounded statement. The invocations are sorted such that
all source places precede their associated destination places in the sequence.

The place correspondence names become variable names referencing memory
locations. Each source place represents a memory write operation, and each
destination place represents a memory read operation. The sequentialized
expression is shown in Example 12.39.

SUM0
SUM1
SUM2
CARRY
SUM3
C
X0
Y0
X1
Y1
X2
Y2
X3
Y4
clock
r
e
g
i
s
t
e
r
r
e
g
i
s
t
e
r
Figure 12.25 Four-bit adder mapped to a clocked autonomous expression.

COORDINATION BOUNDARIES 235

THE INVOCATION LANGUAGE
12.12 LARGE DOMAINS OF DIFFERENTNESS
Large domains of mutually exclusive differentness are expressed with large
sets of unique names. For a pure association expression, each unique place
must have a correspondence name. For a pure value expression, the character
set of the language will rapidly run out of unique characters and the values
will need to be represented as unique names. Proteins, for instance, might be
represented with their fully spelled out protein names.

The discussion will focus on association expression. The simplest expression
of a large domain of differentness is a large collection of places with unique
association relationships. Each place is an appreciation of an interaction of
differentnesses.

Figure 12.26 illustrates expression of unique places as appreciation of inter-
actions of differentnesses. It shows both the graphical expression and the lan-
guage expression of the minterm form of a pure association expression for a
binary full-adder. In the language expression there are eight invocations with
just a destination list. Each destination list is a unique combination of associa-
tions to places in the source list. Given the mutual exclusivity relationships of
4BITADD ($A0 $B0 $A1 $B1 $A2 $B2 $A3 $B3 $C0)
(SUM0< > SUM1< > SUM2< > SUM3< > CARRYOUT3< >);
4BITADD[(A0< > B0< > A1< > B1< > A2< > B2< > A3< > B3< >C0< >)
($SUM0 $SUM1 $SUM2 $SUM3 $CARRYOUT3)
FULLADD($A0 $B0 $C0)(SUM0< > CARRYOUT0< >);
FULLADD($A1 $B1 $CARRYOUT0)(SUM1< > CARRYOUT1< >);
FULLADD($A2 $B2 $CARRYOUT1)(SUM2< > CARRYOUT2< >);
FULLADD($A3 $B3 $CARRYOUT2)(SUM3< > CARRYOUT3< >); ]
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
NOT($X)(OP1< >);
NOT($Y)(OP2< >);
AND($OP1 $Y)(OP4 < >);
AND($X $OP2)(OP3< >);
AND($X $Y)(OP10< >);
OR($OP4 $OP3)(FIRSTSUM< >);
NOT($C)(OP6< >);
NOT($FIRSTSUM)(OP5< >);
AND($C $OP5)(OP8< >);
AND($OP6 $FIRSTSUM)(OP7< >);
AND($C $FIRSTSUM)(OP9< >);
OR($OP7 $OP8)(SUM< >);
OR($OP10 $OP9)(CARRY< >); ]
Example 12.39 Sequentialized four-bit adder.


the places in the source list, only one invocation destination list will become
complete, thus enabling its invocation. The enabled invocation will invoke its
named defi nition and generate the indicated output behavior.

There can be large mutually exclusive input domains of differentness whose
interaction produces a very large mutually exclusive domain of appreciation
differentnesses. A large domain of differentness can be expressed by expanding
the mutually exclusive input domains. Figure 12.27 shows an expression with
two large input domains and a very large minterm. There might be K mutually
FULLADD[(({A0< > A1< >})({B0< > B1< >})({C0< > C1< >}))
( ({$SUM0 $SUM1}) ({$CARRY0 $CARRY1}))
000($A0 $B0 $C0)
001($A0 $B0 $C1)
010($A0 $B1 $C0)
011($A0 $B1 $C1)
100($A1 $B0 $C0)
101($A1 $B0 $C1)
010($A1 $B1 $C0)
111($A1 $B1 $C1) :
000[SUM0< D > CARRY0< D > ]
001[SUM1< D > CARRY0< D > ]
010[SUM1< D > CARRY0< D > ]
011[SUM0< D > CARRY1< D > ]
100[SUM1< D > CARRY0< D > ]
101[SUM0< D > CARRY1< D > ]
110[SUM0< D > CARRY1< D > ]
111[SUM1< D > CARRY1< D > ] ]
