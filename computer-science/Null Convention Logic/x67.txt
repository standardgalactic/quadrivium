NOT($X)(OP1< >)
AND($OP1 $Y)(OP4 < >)
NOT($Y)(OP2< >)
AND($X $OP2)(OP3< >)
OR($OP4 $OP3)(FIRSTSUM< >)
NOT($FIRSTSUM)(OP6< >)
AND($C $OP6)(OP7< >)
NOT($C)(OP5< >)
AND($OP5 $FIRSTSUM)(OP8< >)
OR($OP7 $OP8)(SUM< >)
AND($X $Y)(OP10< >)
AND($C $FIRSTSUM)(OP9< >)
OR($OP10 $OP9)(CARRY< >)
:
OR[(A< > B< >)($res) res<$A$B()> :00[0] 01[1] 10[1] 11[1] ]
AND[(A< > B< >)($res) res<$A$B()> :00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >)($res) res<$A()> :1[0] 0[1] ] ]
Example 12.19 Imperative form of expression.

invocation
FULLADD(0, 1, 0)(< > CARRYOUT< >) ... $CARRYOUT
definition
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
NOT($X)(OP1< >) AND($OP1 $Y)(OP4 < >)
NOT($Y)(OP2< >) AND($X $OP2)(OP3< >)
OR($OP4 $OP3)(FIRSTSUM< >)
NOT($FIRSTSUM)(OP6< >)
AND($C $OP6)(OP7< >)
NOT($C)(OP5< >) AND($OP5 $FIRSTSUM)(OP8< >)
OR($OP7 $OP8)(SUM< >)
AND($X $Y)(OP10< >) AND($C $FIRSTSUM)(OP9< >)
OR($OP10 $OP9)(CARRY< >)
:
OR[(A< > B< >)($res) res<$A$B()> :00[0] 01[1] 10[1] 11[1] ]
AND[(A< > B< >)($res) res<$A$B()> :00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >)($res) res<$A()> :1[0] 0[1] ]
]
Figure 12.8 Input associations of the defi nition.

A PROGRESSION OF EXAMPLES 215

THE INVOCATION LANGUAGE
12.8.2 Functional Form
Example 12.20 is the full-adder expression in terms of a nesting structure
of abbreviated invocations that each receive a single return in place. The
FIRSTSUM< > source place represents the output of the fi rst half-adder and
is fanned out to three destination places. SUM< > and CARRY< > source
places are the results of the expression and associate with the destination
places in the destination list of the defi nition.

Expressing association relationships with syntactic nesting may be useful as
a human convenience, but it is neither a necessary nor a suffi cient form of
expression in a symbol string. It is not suffi cient in that it cannot directly
invocation
FULLADD(0, 1, 0)(< > CARRYOUT< >) ... $CARRYOUT
definition
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
NOT($X)(OP1< >) AND($OP1 $Y)(OP4 < >)
NOT($Y)(OP2< >) AND($X $OP2)(OP3< >)
OR($OP4 $OP3)(FIRSTSUM< >)
NOT($FIRSTSUM)(OP6< >)
AND($C $OP6)(OP7< >)
NOT($C)(OP5< >) AND($OP5 $FIRSTSUM)(OP8< >)
OR($OP7 $OP8)(SUM< >)
AND($X $Y)(OP10< >) AND($C $FIRSTSUM)(OP9< >)
OR($OP10 $OP9)(CARRY< >)
:
OR[(A< > B< >)($res) res<$A$B()> :00[0] 01[1] 10[1] 11[1] ]
AND[(A< > B< >)($res) res<$A$B()> :00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >)($res) res<$A()> :1[0] 0[1] ]
]
Figure 12.9 Associations within the resolution expression.

inv
FULLADD(0, 1, 0)(< > CARRYOUT< >) . . . $CARRYOUT
def
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
FIRSTSUM<OR(AND(NOT($X),$Y),AND($X,NOT($Y)))>
CARRY<OR(AND($X,$Y),AND($C,$FIRSTSUM)>
SUM<OR(AND(NOT($C),$FIRSTSUM),AND($C,NOT
($FIRSTSUM)))>
:
OR[(A< >B< >)<$A$B()> : 0[0] 1[1] 00[0] 01[1] 10[1] 11[1] ]
AND[(A< >B< >)<$A$B()> : 0[0] 1[0] 00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >)<$A()> :1[0] 0[1] ]
Example 12.20 Functional form.


express circular or feedback relationships and it cannot directly express fan-
out relationships. The fan-out relationship in Example 12.20 is expressed with
a source place FIRSTSUM<>. It is not necessary in that all relationships that
can be expressed in terms of nesting can be expressed in terms of name
correspondence.

12.8.3 Net List Form
Example 12.21 shows a netlist form of expression. Each invocation is abbrevi-
ated as a single return invocation and is nested in a source place. Each source
place is associated with a destination in the destination list of an invocation.

The expression is a collection of named statements and direct connections
among them.

12.8.4 Longer Value Transform Rule Names
Example 12.22 shows a FULLADD expression that directly resolves the three
value name in terms of value transform rule defi nitions with three value
names. Now there are only two invocations in the place of resolution invoking
the defi nitions COUT and ADD, as shown in Figure 12.10. With longer value
transform rule names there is more expression in terms of value differentiation
and less in terms of association differentiation.

invocation
FULLADD(0, 1, 0)(< > CARRYOUT<
>) . . . $CARRYOUT
defi nition
FULLADD[(X< >Y< >C< >)($SUM $CARRY)
OP1< NOT($X) >
OP4< AND($OP1 $Y) >
OP2< NOT($Y) >
OP3< AND($X $OP2) >
FIRSTSUM< OR($OP4 $OP3) >
OP6< NOT($FIRSTSUM) >
OP7< AND($C $OP6) >
OP5< NOT($C) >
OP8< AND($OP5 $FIRSTSUM) >
SUM< OR($OP7 $OP8) >
OP10< AND($X $Y) >
OP9< AND($C $FIRSTSUM) >
OR($OP10 $OP9)(CARRY< >)
:
OR[(A< > B< >) <$A$B()> :00[0] 01[1] 10[1] 11[1] ]
AND[(A< > B< >) <$A$B()> :00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >) <$A()> :1[0] 0[1] ] ]
Example 12.21 Net list form.

A PROGRESSION OF EXAMPLES 217

THE INVOCATION LANGUAGE
12.8.5 Limited Set of Name-Forming Symbols
Name forming symbols disjoint from the syntax symbols are used to form
correspondence names as well as to express content. Name correspondence
relies only on name equality; it is insensitive to the symbol set used. Unique
and equal names can be expressed using any set of conveniently available
symbols. Even a single symbol can be used, in which case names will corre-
spond solely by their length. The only requirement of correspondence names
is that they correspond.

Correspondence names and content are syntactically isolated as content
fl ows through the association paths until the content symbols emerge and
briefl y form correspondence names. All content symbols ultimately partici-
pate in forming correspondence names, so the set of content symbols must be
included in the set of correspondence name symbols. The constant defi nitions,
the value transform rules, determine the set of content symbols. Every content
eventually contributes to the formation of the name of a constant defi nition.

In the examples above the correspondence names were formed with a full
alphabet and the content names were formed with the symbols 0 and 1.

Example 12.23 and Figure 12.11 show the full-adder expressed using just two
name-forming symbols: 0 and 1. The structure of the expression is identical to
Example 12.22. Only the correspondence names have been changed.

12.8.6 More Available Content Values
With more content values available there can be less association structure of the
expression. The values S, T, U, V, W, and X map to the following meanings:
inv
FULLADD(0, 1, 0)(< > CARRYOUT< >) . . . $CARRYOUT
def
FULLADD[(A< >B< >C< >)( $SUM $CARRY)
CARRY<COUT($A $B $C)>
SUM<ADD($A $B $C)>
COUT[(X< > Y< > Z< >)<$X$Y$Z() > :
000[0] 001[0] 010[0] 011[1]
100[0] 101[1] 110[1] 111[1] ]
ADD[(X< > Y< > Z< >)<$X$Y$Z()> :
000[0] 001[1] 010[1] 011[0]
100[1] 101[0] 110[0] 111[1]
] ]
Example 12.22 Longer value transform rule names.

X
C
Y
CARRY
SUM
ADD
COUT
Figure 12.10 Full-adder with more expressive functions.


S means A = 0
T means A = 1
U means B = 0
V means B = 1
W means CI = 0
X means CI = 1
S means SUM = 0
T means SUM = 1
W means CO = 0
X means CO = 1
In the expression of Example 12.24 the place of resolution contains no
