N
N
N
N
Input
regulation
N
N
N
N
Input
regulation
N
N
N
N
combinational
network
combinational
network
Completness
detection
Acknowledge
domain
inversion
Acknowledge
domain
inversion
Completness
detection
Completeness
detection
Acknowledge
domain
inversion
Figure 2.7 Coupled cycles forming a pipeline.


While an acknowledge value is data, the input regulator will allow a data
wavefront from the presenting network to pass and will stably present it to its
own receiving network. The presenting network will not receive its own
acknowledge until the acknowledge value of the receiving network transitions
to data, allowing the data wavefront to pass the input regulator and be pre-
sented to the output completeness logic for the presenting network. An
acknowledge signal says:
• The data wavefront has been received. I can accept a NULL wavefront
now.

• The NULL wavefront has been received. I can accept a data wavefront
now.

Each network maintains its output wavefront until the wavefront is accepted
and maintained by its receiving networks. Alternating data and NULL wave-
fronts spontaneously propagate from cycle to cycle. Complex spontaneously
fl owing pipeline structures can be composed of coupled cycles. A fuller discus-
sion of composing cycles into complex autonomously behaving pipeline
systems can be found in [7].

2.6 PARTITIONING A CONCURRENT NETWORK
Indefi nitely large networks of enhanced functions can be composed that
express the completeness criterion. Since any network of enhanced functions
expresses the completeness criterion, any subnetwork expresses the complete-
ness criterion. The result is a nested hierarchy of boundaries. The expression
within each boundary expresses the completeness criterion and can support
cycle coordination. Figure 2.8 shows a network of four full-adders, composed
to express a four-bit adder and its nested hierarchy of boundaries. Figure 2.9
shows cycle coordination applied at the boundary of the four-bit adder with
the coupled portions of presenting and receiving cycles.

2.6.1 Hierarchical Partitioning
Figure 2.10a shows the four-bit adder partitioned with cycle coordination at
the boundaries of the full-adders. The four-bit adder is now a pipeline of four
full-adders. Figure 2.10b shows the four-bit adder partitioned with cycle
coordination at the boundaries of the enhanced functions. The four-bit adder
is now a fairly complex structure of pipelined functions. In each case the
expression of the four-bit adder network remains constant. The cycle coordi-
nation can be automatically added at any specifi ed hierarchical boundary
level.

The method extends to all levels of expression. A large complex network
of functions can be hierarchically partitioned and mapped into differing
PARTITIONING A CONCURRENT NETWORK 23

THE SIMPLICITY OF CONCURRENCY
SUM0
SUM1
SUM2
CARRY
SUM3
C
X0
Y0
X1
Y1
X2
Y2
X3
Y4
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
four-bit adder
boundary
full-adder
boundaries
enhanced
function
boundaries
Figure 2.8 Four-bit adder and composition boundaries.

implementation environments of hardware, instruction set, fi rmware, soft-
ware, scriptware, and so on. These partitions can be coordinated with what-
ever protocol is conveniently available at each hierarchical level. The lowest
levels might be coordinated with time intervals and a clock or with the NULL
convention and cycles. Higher levels might use message passing or communi-
cation channels.

The most abstract level is no different from the most primitive function
level. Each level is represented as a network of expressions that know when
they are done and when they are ready and that are coordinated with inter-
linked completeness protocols.

2.6.2 Lateral Partitioning
The network can also be laterally partitioned within a particular hierarchical
level. A network below a low-level hierarchical boundary might be laterally
partitioned into a set of common subnetworks which become an instruction
set for that level of the expression. A higher level partitioning into common
subnetworks might result in a subroutine library. A network as whole might
be partitioned into subnetworks of minimal dependency relationships which
become threads of the process.


N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
