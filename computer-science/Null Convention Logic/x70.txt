numbers and a carry-in value and returns a four-bit sum and a carryout value.

In the defi nition of 4BITADD the digits of each number are fanned out to
four invocations of FULLADD. The invocations are linked by CARRYOUTx
associations.

GREATER COMPOSITION: FOUR-BIT ADDER 225

THE INVOCATION LANGUAGE
12.9.2 Nested Invocations
Since there is only one association relationship (CARRYOUTx) between the
invocations, the four-bit adder can also be composed as nested invocations as
in Example 12.30.

12.9.3 Nested Defi nitions
The four-bit adder can also be composed in terms of nested defi nitions forming
a recursive structure, as shown in Example 12.31. 4BITADD adds the fourth
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
NOT($X)(OP1< >) AND($OP1 $Y)(OP4 < >)
NOT($Y)(OP2< >) AND($X $OP2)(OP3< >)
OR($OP4 $OP3)(FIRSTSUM< >)
NOT($FIRSTSUM)(OP5< >)
AND($C $OP5)(OP8< >)
NOT($C)(OP6< >) AND($OP6 $FIRSTSUM)(OP7< >)
OR($OP7 $OP8)(SUM< >)
AND($X $Y)(OP10< >) AND($C $FIRSTSUM)(OP9< >)
OR($OP10 $OP9)(CARRY< >) :
OR[(A< > B< >)($res) res<$A$B()> :00[0] 01[1] 10[1] 11[1] ]
AND[(A< > B< >)($res) res<$A$B()> :00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >)($res) res<$A()> :1[0] 0[1] ]
]
4BITADD($X0 $Y0 $X1 $Y1 $X2 $Y2 $X3 $Y3 $CARRYIN)
(S0< > S1< > S2< > S3< > CARRYOUT< >)
4BITADD[(A0< > B0< > A1< > B1< > A2< > B2< > A3< > B3< >C0< >)
($SUM0 $SUM1 $SUM2 $SUM3 $CARRYOUT3)
FULLADD($A0 $B0 $C0)(SUM0< > CARRYOUT0< >)
FULLADD($A1 $B1 $CARRYOUT0)(SUM1< > CARRYOUT1< >)
FULLADD($A2 $B2 $CARRYOUT1)(SUM2< > CARRYOUT2< >)
FULLADD($A3 $B3 $CARRYOUT2)(SUM3< > CARRYOUT3< >) :
]
four-bit adder invocation
full-adder invocation
primitive invocation
4BITADD[(A0< > B0< > A1< > B1< > A2< > B2< > A3< > B3< >C0< >)
($S0 $S1 $S2 $S3 $CARRYOUT3)
CARRYOUT3< FULLADD($A3 $B3, FULLADD($A2 $B2,
FULLADD($A1 $B1, FULLADD($A0 $B0
$C0)(S0< > < >))(S1< > < >))(S2< > < >))(S3< > < >) > ]
Example 12.30 Four-bit adder as nested invocations.

Figure 12.18 Four-bit adder with hierarchical boundaries.


bits and passes the remaining bits to 3BITADD. 3BITADD adds the third
bits and passes the rest off to 2BITADD. Finally, 1BITADD returns a carry,
the carries propagate back up the hierarchy, and the full sum is returned
by 4BITADD. 1BITADD is a contained defi nition of 2BITADD, which is
a contained defi nition of 3BITADD, which is a contained defi nition of
4BITADD.

12.9.4 Structureless Expression
The four-bit add can also be composed without any hierarchical syntactic
structure. In Example 12.32 the four-bit adder is expressed entirely in terms
of association relationships among primitive operators. The structure of the
expression is entirely in terms of unique correspondence names.

4BITADD[(A0< > B0< > A1< > B1< > A2< > B2< > A3< > B3< >CIN< >)
($S0 $S1 $S2 $S3 $COUT)
FULLADD($A3 $B3 $C2)(S3< > COUT< >)
3BITADD($A2 $B2 $A1 $B1 $A0 $B0 $CIN)(S0< > S1< >S2< > C2< >) :
3BITADD[(A0< > B0< > A1< > B1< > A2< > B2< > CIN< >)($S0 $S1 $S2
$COUT)
FULLADD($A2 $B2 $C1)(S2< > COUT< >)
2BITADD($A1 $B1 $A0 $B0 $CIN)(S0< > S1< > C1< >) :
2BITADD[(A0< > B0< > A1< > B1< > CIN< >)($S0 $S1 $COUT)
FULLADD($A1 $B1 $C0)(S1< > COUT< >)
1BITADD($A0 $B0 $CIN)(S0< > C0< >) :
1BITADD[(A0< > B0< > CIN< >)($S0 $COUT)
FULLADD($A0 $B0 $CIN)(S0< > COUT< >)
] ] ] ]
Example 12.31 Four-bit adder in terms of nested defi nitions.

def
4BITADD[(X0< > Y0< > X1< > Y1< > X2< > Y2< > X3< > Y3< >CIN< >)
($SUM0 $SUM1 $SUM2 $SUM3 $CARRY3)
NOT($X0)(OP01< >) AND($OP01 $Y0)(OP04 < >) NOT($Y0)(OP02< >)
AND($X0 $OP02)(OP03< >) OR($OP04 $OP03)(FIRSTSUM0< >)
NOT($FIRSTSUM0)(OP06< >) AND($CIN $OP06)(OP07< >)
NOT($CIN)(OP05< >)
AND($OP05 $FIRSTSUM0)(OP08< >) OR($OP07 $OP08)(SUM0< >)
AND($X0 $Y0)(OP010< >) AND($CIN $FIRSTSUM0)(OP09< >)
OR($OP010 $OP09)(CARRY0< >)
NOT($X1)(OP11< >) AND($OP11 $Y1)(OP14 < >) NOT($Y1)(OP12< >)
AND($X1 $OP12)(OP13< >) OR($OP14 $OP13)(FIRSTSUM1< >)
GREATER COMPOSITION: FOUR-BIT ADDER 227

THE INVOCATION LANGUAGE
NOT($FIRSTSUM1)(OP16< >) AND($CARRY0 $OP16)(OP17< >)
NOT($CARRY0)(OP15< >)
AND($OP15 $FIRSTSUM1)(OP18< >) OR($OP17 $OP18)(SUM1< >)
AND($X1 $Y1)(OP110< >) AND($CARRY0 $FIRSTSUM1)(OP19< >)
OR($OP110 $OP19)(CARRY1< >)
NOT($X2)(OP21< >) AND($OP21 $Y2)(OP24 < >) NOT($Y2)(OP22< >)
AND($X2 $OP22)(OP23< >) OR($OP24 $OP23)(FIRSTSUM2< >)
NOT($FIRSTSUM2)(OP26< >) AND($CARRY1 $OP26)(OP27< >)
NOT($CARRY1)(OP25< >)
AND($OP25 $FIRSTSUM2)(OP28< >) OR($OP27 $OP28)(SUM2< >)
AND($X2 $Y2)(OP210< >) AND($CARRY1 $FIRSTSUM2)(OP29< >)
OR($OP210 $OP29)(CARRY2< >)
NOT($X3)(OP31< >) AND($OP31 $Y3)(OP34 < >) NOT($Y3)(OP32< >)
AND($X3 $OP32)(OP33< >) OR($OP34 $OP33)(FIRSTSUM3< >)
NOT($FIRSTSUM3)(OP36< >) AND($CARRY2 $OP36)(OP37< >)
NOT($CARRY2)(OP35< >)
AND($OP35 $FIRSTSUM3)(OP38< >) OR($OP37 $OP38)(SUM3< >)
AND($X3 $Y3)(OP310< >) AND($CARRY2 $FIRSTSUM3)(OP39< >)
OR($OP310 $OP39)(CARRY3< >)
: OR[(A< > B< >)($res) res<$A$B()> :00[0] 01[1] 10[1] 11[1] ]
AND[(A< > B< >)($res) res<$A$B()> :00[0] 01[0] 10[0] 11[1] ]
NOT[(A< >)($res) res<$A()> :1[0] 0[1] ] ]
Example 12.32 Syntactically fl at expression of four-bit adder.

12.10 CONDITIONALITY
The basis of conditionality in the language is content emerging from associa-
tion fl ow paths at a destination place to form correspondence names dynami-
cally forming association relationships. The formed name must match the
name of an expressed defi nition.

In Example 12.33 the invocationname is expressed as two destination
places. When content fl ows to both destination places, an invocationname is
formed and the named defi nition is invoked. The most primitive conditionality
is the invocation of a value transform rule. The defi nition of the Boolean OR
operator in Example 12.34 illustrates conditional invocation of value trans-
form rules. The contents of association paths A< > and B< > emerge at the
destination places $A and $B to form an invocationname. The invoked defi ni-
tion returns a constant, which becomes the content of the single source place,
which is returned to the place of invocation as content of the un-named source
place and begins fl owing through association paths.


12.10.1 IF-THEN-ELSE
The IF-THEN-ELSE construct can be expressed with simple name conven-
tions. In Example 12.35 The association path $logic to logical< > to $logical is
assumed by convention to contain either TRUE or FALSE. The contents of
the second and third places of the destination list are constants that are the
names of the conditional defi nitions. $logical becomes either TRUE or FALSE,
invoking the named defi nitions contained within the defi nition of IF. The
defi nition for TRUE returns the content of thenname< >. The defi nition for
FALSE returns the content of elsename< >. The returned content fl ows
through $name to result< > to $result to form an invocation of either THIS
or THAT, which are defi nitions contained in the defi nition containing the
invocation of IF. The thenname and the elsename can be any arbitrary local
names. The names just have to have corresponding defi nitions.

A convention of naming is established with a set of defi nitions that return
a set of common names. Example 12.36 is a set of conditionals that all return
TRUE or FALSE.

An invocation of a conditional can be nested in a destination list of the
Invocation of IF as in Example 12.37.

12.10.2 IF-THEN
In the IF-THEN construct the ELSE is left to a default behavior. In a sequen-
tial expression, this means continuing the sequence. However, in the invoca-
tion language, there are no default behaviors, so this construct is not viable in
the invocation language.

$A$B( . . . . . . . . )
Example 12.33 Conditional invocationname.

OR[(A< >B< >) <$A$B()> : 0[0] 1[1] 00[0] 01[1] 10[1] 11[1] ]
Example 12.34 Conditional invocation of value transform rules.

IF($logic, THIS, THAT)(result< >) . . . . . . $result( ) . . . . : THIS[. . . . . . . .]
THAT[. . . .] ]
IF[(logical< > thenname< > elsename< >)($name)
$logical() :
TRUE[ name<$thenname>]
FALSE[ name<$elsename>] ]
Example 12.35 IF-THEN-ELSE expression conventions.

CONDITIONALITY 229

THE INVOCATION LANGUAGE
12.10.3 Multi-way Conditionality
Multi-way conditionality is directly expressed in the invocation language with
multiple name to multiple place correspondence as shown in Example 12.38.

The invocation passes the name of the defi nition to be invoked. The set of
names must be a pre-expressed convention between the invocation and the
defi nition. While nested IFs can be expressed in the language, there is no inher-
ent need to binary encode conditions and decode them with nested IFs.

12.11 COORDINATION BOUNDARIES
The invocation language is a language of association relationships among
composition boundaries. The behavior of an expression unfolds with content
fl owing along association paths through composition boundaries. Each invoca-
binaryequal[(a< > b< >) $a$b() : 00[TRUE] 01[FALSE] 10[FALSE]
11[TRUE] ]
binarygreater[(a< > b< >) $a$b() : 00[FALSE] 01[FALSE] 10[TRUE]
11[FALSE] ]
