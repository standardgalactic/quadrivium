Assuming a binary representation of the integers, the associated digits are
presented to a binary full-adder circuit. The full-adder circuit is a combina-
tional circuit expressed in terms of logic functions directly associated by wire
connection. Each logic function directly associates each possible input with its
appropriate output transforming its input data directly to result data. Each
full-adder combinational circuit produces a result digit.

The integer add hardware expression then associates each result digit by
wire connection to compose the result integer. The further instructions of the
integer add software function associates the results from the hardware add
expression to form the result vector and next associates the result vectors to
form the result matrix.

The characterization of the process expression and resolution is uniform
and consistent, even though three totally different expression environments
are involved: the high-level programming language procedure, the machine
instructions, and the logic circuits of the hardware adder. Each very different
expression is doing exactly the same thing. It is decomposing the input data
structure, associating the decomposed data elements, and presenting them to
the next lower level of process expression which further decomposes and
associates until the decomposed elements are primitive values that are associ-
ated with primitive functions in the correct progression producing primitive
result values. It is all just bookkeeping of association relationships to get the
correct progression of primitive functions that realize the process.

What must be effectively expressed no matter what form of expression is
being employed is the proper patterns of association relationships. Consider
PROCEDURE MATRIXADD (MATRIX1, MATRIX2, MATRIX3,
N, M)
BEGIN
FOR I = 1 TO N
FOR J = 1 TO M
MATRIX3(I, J) = MATRIX1(I, J) + MATRIX2(I, J)
ENDFOR
ENDFOR
END
Example 4.1 Example expression.

PROCESS EXPRESSION AS ASSOCIATION RELATIONSHIPS 47

TRANSCENDING THE VARIABLE
the mathematical function of Example 4.2 for the distance between two car-
tesian points. This mathematical notation very elegantly expresses the associa-
tion relationships among the parts of the expression. There is no expression
of sequence and no reference to any variables other than the input and output
variables. Figure 4.2 shows the graphical representation of the association
relationships of the distance equation.

The process is expressed imperatively in Example 4.3 in terms of a strict
sequence of operations writing and reading intermediate variables. Each
source operation must explicitly store its result value in a storage bin, and each
destination operation must explicitly refer to the storage bin of the value when
its turn in the sequence occurs. The variables, explicitly referencing temporary
storage bins, are implicitly expressing an association relationship from the
place in the expression where the variable is written to the place in the expres-
sion where the variable is read.

The association relationships can also be expressed by explicitly attaching
names to places and associating the names directly by name correspondence
shown in Example 4.4. name< > will represent a source place and $name will
represent a destination place. If a source place name and a destination place
name correspond, then the two places are associated. Values fl ow directly
from source places to destination places.

Since the association relationships among the place names determine the
structure of the expression there is no inherent ordering of the statements.

d
x
x
y
y
=
−
(
) +
−
(
)
y1
y2
x2
-
-
*
*
+
sqrt
d
x1
Figure 4.2 Graphical expression of the association relationships of the distance equation.

Example 4.2 Mathematical function.

Operation 1: temp1 = x2 − x1;
Operation 2: temp2 = y2 − y1;
Operation 3: temp3 = temp1 ∗ temp1;
Operation 4: temp4 = temp2 ∗ temp2;
Operation 5: temp5 = temp3 + temp4;
Operation 6: distance = sqrt(temp5);
Example 4.3 Imperative expression.


Example 4.5 is identical to Example 4.4. Another possibility is expressing the
association relationships with syntactic nesting rather than name correspon-
dence as in Example 4.6. This is the choice of functional programming.

It will be noticed that there are two references to sub(x2, x1) and to
sub(y2, y1) because fan-out cannot be expressed with syntactic nesting associa-
tion. Figure 4.3 graphically illustrates the association structure for the func-
tional expression. Referencing identical function calls multiple times because
of the inability to express fan-out leads to awkward expressions and belabor-
ments of the obvious such as the notion of referential transparency, which
states that a function called with the same input values must always deliver the
same result values. Why would a function not always deliver the same results
for the same inputs? Because functional programming does not characterize
the internal expression of the function and it does not eliminate all side effects.

Referential transparency states as a rule that there can be no side effects.

place1<x2 − x1>
place2<y2 − y1>
place3<$place1 ∗ $place1>
place4<$place2 ∗ $place2>
place5<$place3 + $place4>
distance<sqrt($place5)>
*
*
+
sqrt
x2
x1
-
x2
x1
-
y1
y2
-
y1
y2
-
d
place4<$place2 ∗ $place2>place3<$place1 ∗ $place1>place2<y2 − y1>
distance<sqrt($place5)>place5<$place3 + $place4>place1<x2 − x1>
distance(sqrt(add((mult(sub(x2,x1),sub(x2,x1)),
mult(sub(y2,y1),sub(y2,y1))))
Example 4.6 Syntactic nesting expression.

Example 4.5 Alternative name association expression.

Figure 4.3 Association structure of the functional expression of the distance equation.

Example 4.4 Name association expression.

PROCESS EXPRESSION AS ASSOCIATION RELATIONSHIPS 49

TRANSCENDING THE VARIABLE
Fan-out relationships can be directly expressed with name correspondence
relationships as shown in Example 4.7, which is entirely in terms of name cor-
respondence association relationships with no syntactic nesting.

The reader should notice that the only example that employed the notion
of a variable as an explicit reference to storage bins was Example 4.3, which
expressed the process as a sequence of operations. The other examples
expressed the process in terms of direct association relationships. All the
examples effectively express the process. The underlying commonality is that
they are all, one way or another, expressing association relationships among
places in the expression. There is nothing expressionally fundamental or nec-
essary about expressing strict sequentiality or about explicitly referencing
storage bins. If one forgets that the names temp1, temp2, and so on, refer to
storage bins and view them as direct association relationships, then the expres-
sion of Example 4.3 is structurally identical to Example 4.4. It is just a slight
change in point of view.

4.5 TRANSCENDING THE VARIABLE
The variable name as a reference to a storage bin is clearly problematic. But
the solution is not to avoid the use of reference names entirely but to recon-
sider what these names might refer to. The notion of a name referring to direct
association relationships between places within an expression accomplished
the same end as the variable name, while avoiding the problems of the variable
name as a reference to a storage bin. The reference scope of a name express-
ing a direct association relationship is locally limited by the nature of the direct
association relationship. There can only be one source place associated with
a name, and this is equivalent to imposing the property of single assignment
on a storage bin variable. Side effects and the ambiguities of sequence associ-
ated with variable names simply do not occur with names expressing direct
association relationships. Direct association relationships can be automatically
mapped to storage bin references. There is no need for the notion of the vari-
able name as an explicit reference to a storage bin.

place1<sub(x2,x1)>
place2<sub(y2,y1)>
place3<mult($place1,$place1)>
place4<mult($place2,$place2)>
place5<add($place3,$place4)>
distance<sqrt($place5)>
Example 4.7 Completely in terms of name correspondence association.


