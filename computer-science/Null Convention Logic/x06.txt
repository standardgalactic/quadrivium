The notion of the algorithm simply does not provide conceptual enlighten-
ment for the questions that most computer scientists are concerned with.

1.5 CONCLUSION
What is essentially a discipline of pure mathematics has come to be called “the
theory of computer science,” and the notion of the algorithm has been decreed
to be a fundamental paradigm of computer science. The mathematical per-
spective, however, is the wrong point of view. It is asking the wrong questions.

Mathematicians and computer scientists are pursuing fundamentally different
aims, and the mathematician’s tools are not as appropriate as was once sup-
posed to the questions of the computer scientist. The primary questions of
computer science are not of computational possibilities but of expressional
possibilities. Computer science does not need a theory of computation; it
needs a comprehensive theory of process expression.

REFERENCES
1. C. Lejewski. History of logic. In Encyclopedia Britannica Macropaedia, Vol. 11.

Chicago: William Benton, 1974, pp. 56–72.

2. M. M. Garland. Cambridge Before Darwin. Cambridge: Cambridge University,
1980, p. 36.

3. H. G. Forder and F. A. Valentine. Euclidian geometry. In Encyclopaedia Britan-
nica Macropedia, Vol. 7. Chicago: William Benton, 1974, pp. 1099–1112.

4. A. Hodges. Alan Turing the Enigma. New York: Simon and Schuster, 1983, p. 91.

5. D. Hilbert. Mathematical problems. In Mathematics People, Problems, Results,
Vol. 1, ed. by D. M. Campbell and J. C. Higgins. Belmont, CA: Wadsworth Inter-
national, 1984, p. 275.

REFERENCES 9

A CRITICAL REVIEW OF THE NOTION OF THE ALGORITHM IN COMPUTER SCIENCE
6. A. A. Markov. Theory of Algorithms, trans. by J. J. Schorr-Kon. Jerusalem: Keter
Press, 1971, p. 1.

7. J. H. Wegstein. Algorithms. In Communications of the ACM 3 (February 1960),
p. 73.

8. D. E. Knuth. Fundamental Algorithms. Reading, MA: Addison-Wesley, 1969,
p. 1.

9. Z. W. Pylyshyn. Theoretical ideas: Algorithms automata and cybernetics. In Per-
spectives on the Computer Revolution, ed. by Zenon W. Pylyshyn. Englewood
Cliffs, NJ: Prentice-Hall, 1970. pp. 60–68.

10. S. Amarel. Computer science. In Encyclopedia of Computer Science (1st ed. 1976).

New York: Petrocelli/Carter, 1976, pp. 314–318.

11. M. S. Carberry, H. M. Khalil, J. F. Leathrum, and L. S. Levy. Foundations of
Computer Science, Potomac, MD: Computer Science Press, 1979, pp. 2–4, 16.

12. J. M. Brady. The Theory of Computer Science. London: Chapman and Hall, 1977,
pp. 8–9.

13. A. Ralston. Introduction to Programming and Computer Science. New York:
McGraw-Hill, 1971, pp. 1–5.

14. I. Pohl and A. Shaw. The Nature of Computation. Rockville, MD: Computer
Science Press, 1981, pp. 3–7.

15. P. Ceruzzi. Electronics technology and computer science, 1940–1975: A coevolu-
tion. Annals of the History of Computing 10 (4, 1989): 265–270.

16. R. R. Korfhage. Algorithm. In Encyclopedia of Computer Science (1st ed. 1976).

New York: Petrocelli/Carter, 1976, p. 49.

17. E. Horowitz and S. Sahni. Fundamentals of Computer Algorithms. Potomac, MD:
Computer Science Press, 1979, pp. 1–2.

18. B. W. Wah and C. V. Ramamoorthy. Theory of algorithms and computation com-
plexity with applications to software design. In Handbook of Software Engineering,
ed. by C. R. Vick and C. V. Ramamoorthy. New York: Van Nostrand Reinhold,
1984, p. 88.

19. K. Maly and A. R. Hanson. Fundamentals of the Computing Sciences. Englewood
Cliffs, NJ: Prentice-Hall, 1978, p. 41.

20. F. S. Beckman. Mathematical Foundations of Programming. Reading, MA:
Addison-Wesley, 1980, p. 398.

21. E. V. Krishnamurthy. Introductory Theory of Computer Science. New York:
Springer-Verlag, 1983, p. 3.

22. J. K. Rice and J. R. Rice. Introduction to Computer Science. New York: Holt,
Rinehart and Winston, 1969, pp. 47, 49.


Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright © 2007 John Wiley & Sons, Inc.

THE SIMPLICITY
OF CONCURRENCY
The expression of sequentiality is generally considered to be simple and reli-
able, whereas the expression of concurrency is perceived to be complex and
nondeterministic. Sequentiality is accepted as a primitive form of expression
and concurrency is characterized in terms of sequentiality. It is argued here
that the perception of the simplicity of sequentiality and the complexity of
concurrency is an artifact of a particular conceptual view; it is not unlike the
perceived impossibility of traveling to the moon while thinking in terms of
cycles and epicycles in crystalline spheres.

The diffi culty lies in the notion of the mathematical function, which is a
simple mapping relation with no expression of coordination behavior with
other functions. The expressivity of coordination traditionally resides in a
mathematician with a pencil. In the absence of a mathematician, the uncoor-
dinated behavior of a system of functions, is nondeterministic.

The coordination expression of the missing mathematician can be restored
in two different ways that lead to radically different views of process expres-
sion. In one view, sequentiality is simple and primitive and concurrency is a
complex and risky derivative of sequentiality, and in the other view, concur-
rency is simple and primitive and sequentiality is a complex and risky special
case of concurrency.


THE SIMPLICITY OF CONCURRENCY
2.1 THE PRIMACY OF SEQUENTIALITY
For a number of seemingly good conceptual and practical reasons sequential-
ity is considered to be a fundamental primitive form of process expression. A
strong conceptual motivation for sequentiality comes from the theory of com-
puter science adopted from the theory of mathematics. The notion of the
algorithm characterizes a computational process as a strict sequence of pre-
cisely defi ned operations. From the mathematicians point of view, any concur-
rent expression (a partial ordering) can be reduced to a sequential expression
(a total ordering). Sequential expression is a suffi cient theoretical primitive so
there is no theoretical necessity to consider concurrency on its own terms.

Sequentiality appears to reside at a reductive conceptual bottom.

There are practical motivations. A transistor can only do one thing at a
time in sequence. There is the convenience of generally confi guring a system
by using a single element over and over in sequence. There is the sense that
humans seem to think, intellectually at least, in a step-by-step manner. There
is the unprecedented success at building and using sequential computing
machines.

But most infl uential is that concurrency appears to be complex, even non-
deterministic, and chaotic, like a hydra-headed beast that must be wrestled
into submission. Sequential expression, by contrast, seems simple, straightfor-
ward, and tractable. It only makes good sense to appeal to the simplicity of
sequentiality to tame the complexity of concurrency.

Accordingly, sequentiality is regarded as a primitive form of process expres-
sion and concurrency is characterized in terms of sequentiality as cooperating
sequential processes [5], communicating sequential processes [3], interleaved
sequential processes [2], and so on.

2.2 THE COMPLEXITY OF CONCURRENCY
The complexity of concurrency manifests itself in a number of forms, and all
relate to unruly behavior. It just seems obvious that controlling a gaggle of
multiple events all at once should be more diffi cult than controlling one thing
at a time in sequence.

2.2.1 The Demon of Indeterminacy
The introduction of concurrency into computation opens Pandora’s box to
release the possibility of nondeterminacy and a host of other complications,
including deadlock and livelock. . . . Events within concurrent systems do not
necessarily occur at predetermined times, but may occur in different orders
depending upon the relative speeds of different system parts. The usual assump-
tion, which is also physically realistic, is that relative speeds cannot be controlled
so precisely that the designer or programmer can depend upon them to enforce
sequencing requirements. [8]

Events can occur in different orders depending on the relative speeds of
different system parts. The speeds of the parts cannot be controlled to avoid
the different orderings and most of the possible different orderings do not
result in a correct answer.

Unfortunately, asynchronous circuits are diffi cult to design because they are
concurrent systems. When trying to understand a synchronous circuit, it is pos-
sible to pretend that events occur in lock-step. Variations in the speeds of func-
tional elements can be ignored, since the clock is timed to allow for the worst-case
delays. the lock-step model does not work for speed-independent designs—a
correct design must exhibit proper behavior no matter what the speeds of its
components. When several components are operating concurrently, there may
be a very large number of possible execution paths, each corresponding to a
different set of delays in the components. Nondeterminism resulting from
unknown or varying delays is the essential problem in all concurrent systems.

For a property to hold for a concurrent system it must hold for every possible
execution. [1]
By “must hold for every possible execution” it is meant that if all the pos-
sible execution paths (orderings of components/events) give the same correct
result, the problem of many different orderings can be overcome. The fi rst
step in resolving this expressional diffi culty is to determine all the possible
execution paths. This is called the state space explosion problem.

2.2.2 The State Space Explosion
Although the architectural freedom of asynchronous systems is a great benefi t,
it also poses a diffi cult challenge. Because each part sets its own pace, that pace
may vary from time to time in any one system and may vary from system to
system. If several actions are concurrent, they may fi nish in a large number of
possible sequences, Enumerating all the possible sequences of actions in a
complex asynchronous chip is as diffi cult as predicting the sequences of actions
