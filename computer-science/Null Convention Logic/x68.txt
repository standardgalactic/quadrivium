parentheses, so it is a pure value expression in which the values spontaneously
associate to form names of value transform rules. The expression is entirely
inv
1011001101(0,1, 0)(< > 101010101< >) $101010101
def
1011001101[(1100< >1101< >1110< >)($11010 $111111111)
111111111< 11110000($1100 $1101 $1110)(< >)>
11010<11001100($1100 $1101 $1110)(< >)>
11110000[(11100< >11101< > 11110< >)<$11100 $11101 $11110()>:
000[0] 001[0] 010[0] 011[1] 100[0] 101[1] 110[1] 111[1] ]
11001100[(11100< >11101< > 11110< >)<$11100 $11101 $11110()>:
000[0] 001[1] 010[1] 011[0] 100[1] 101[0] 110[0] 111[1] ] ] ]
Example 12.23 Full-adder with binary correspondence names.

111111111
11010
11110000
11001100
1110
1100
1101
Figure 12.11 Full-adder with binary correspondence names.

inv
FULLADD($A,$B,$C)(< > CARRYOUT< >)
def
FULLADD[(A< > B< > CI< >)($SUM $CO)
$A$B$CI :
SUW[SUM<S> CO<W>] SUX[SUM<T> CO<W>]
SVW[SUM<T> CO<W>] SVX[SUM<S> CO<X>]
TUW[SUM<T> CO<W>] TUX[SUM<S> CO<X>]
TVW[SUM<S> CO<X>] TVX[SUM<T> CO<X>] ]
Example 12.24 Pure value place of resolution.

A PROGRESSION OF EXAMPLES 219

THE INVOCATION LANGUAGE
in terms of defi nitions. There is no association structure in the place of resolu-
tion. However, the values S, T, W, and X are used for both the input and for
the output. To avoid reforming input names in the place of resolution, the
result values must be isolated within a source place when they are delivered
to the place of resolution. While the place of resolution of Example 12.24 is
a pure value expression, the expression as a whole is not quite a pure value
expression.

12.8.7 Pure Value Expression
The values K, L, M, and N are added as output values that are unique from
the input values.

S means A = 0
T means A = 1
U means B = 0
V means B = 1
W means CI = 0
X means CI = 1
K means SUM = 0
L means SUM = 1
M means CO = 0
N means CO = 1
The output values can now be delivered to the place of resolution as free
values and can effect their own output, in this case by invoking a defi nition
that contains a source place with themselves as content that associates to
$SUM and $CARRY. The expression of Example 12.25, as a whole, is a pure
value expression.

12.8.8 Another Pure Value Expression
The binary full-adder of Figure 12.7 can be mapped directly into a pure value
expression that is expressed solely in terms of unique symbols and value trans-
form rules. The Boolean logic expression uses two unique symbols, 0 and 1, and
inv
FULLADD($A,$B,$C)(< > CARRYOUT< >)
def
FULLADD[(A< > B< > CI< >)($SUM $CO)
$A$B$CI :
K[SUM<K>] L[SUM<L>] M[CO<M>] N[CO<N>]
SUW[K,M] SUX[L,M] SVW[L,M] SVX[K,N]
TUW[L,M] TUX[K,N] TVW[K,N] TVX[L,N] ]
Example 12.25 Pure value expression.


unique places within the expression to represent unique differentnesses within
the expression. The 0 or 1 on this path is different from the 0 or 1 on that
path. The graphical circuit in Figure 12.12. shows the mapping of each wire
(association path) to two unique symbols. One representing a 0 symbol on the
wire and one representing a 1 symbol on the wire.

C means X = 0
D means X = 1
E means Y = 0
F means Y = 1, and so on, for each wire in the circuit
The value transform rules for resolving each formed name are derived from
the symbols associated with each function. The derivation of the value trans-
form rules for the function surrounded by O, P, Q, R, W, and X is shown in
Figure 12.13. The set of derived value transform rules then becomes the set
of contained defi nitions. Example 12.26 is the pure value expression. The input
content is dumped into the place of resolution with no invocation syntax and
begins forming names.

Figure 12.14 shows the resolution for input values B, C, and F as a pro-
gression of populations of symbols in a shaking bag, which represents the place
of resolution. In each population of values only certain associations form a
name of a value transform rule. In each population the values that form the
name of a value transform rule are shown circled. The value transform rules
involved in each population are shown above the arrows and assert the values
that will be in the succeeding population. The fi nal values s and v invoke defi -
nitions with source places that associate to places in the destination list of the
defi nition. In a shaking bag s and v might cause the bag to open.

12.8.9 Pure Association Expression
To maintain consistency with the other examples, a NULL Convention Logic
pure association expression, shown in Figure 12.15, is mapped directly from
K
L
J
K
Q
R
P
O
K
L
J
K
W
W
X
W
OQ[W] OR[W] PQ[W] PR[X]
Figure 12.13 Mapping an interaction expression.

C
A
B
CARRY
SUM
A,B
C,D
E,F
G,H
I,J
K,L
M,N
O,P
Q,R
S,T
U,V
W,X
g,h
a,b
k,l
c,d
o,p
e,f
i,j
m,n
q,r
s,t
u,v
Figure 12.12 Mapping association differentiation to unique symbols.

A PROGRESSION OF EXAMPLES 221

THE INVOCATION LANGUAGE
the full-adder of Figure 12.7 by substituting the Boolean functions with 2NCL
expressions. Example 12.27 is a pure association expression. The expression
is identical to Example 12.19 except for the defi nitions of OR, AND, and
NOT, which are expressed in terms of a set of invocations only one of which
will achieve completeness of its destination list.

A language expression properly ends with either primitive value transform
rules or primitive association relationships. Example 12.27 is a pure associa-
tion expression that ends with primitive association relationships.

inv
FULLADD($A,$B,$C)(< > CARRYOUT< >)
def
FULLADD[(X< >Y< >CI< >)( $SUM $CARRY)
$X $Y $CI:
“fan-out input symbols”
A[g,k,o] B[h,l,p] C[G,K,O] D[H,L,P] E[I,M,Q] F[J,N,R]
“defi ne combinational resolution stages”
GI[S] GJ[T] HI[S] HJ[S]
KM[U] KN[U] LM[V] LN[U]
OQ[W] OR[W] PQ[W] PR[X]
SU[a,c,e] SV[b,d,f] TU[b,d,f] TV[b,d,f] “fan out input to second
half-adder”
ga[i] gb[j] ha[i] hb[i]
kc[m] kd[m] lc[n] ld[m]
oe[q] of[q] pe[q] pf[r]
im[s ] in[ t ] jm[ t ] jn[ t ] “sum”
qW[u ] qX[ v ] rW[v ] rX[ v ] “carry”
s[SUM< s >] t[SUM< t >] u[CARRY< u >] v[CARRY< v >] “output”
]
Example 12.26 Pure value expression of Boolean full-adder.

OR[W]
GJ[T]
KN[U]
B[h,l,p]
C[G,K,O]
