greater (N)
remainder
cyclelesser (M)
cyclegreater (N)
dualfanin
dualfanout
LTsteer
Figure 12.30 The greatest common divisor association structure.


inv
fourstate($value)(value< 0 >) . . . $value
def
fourstate[(curvalue < >)($nextvalue)
nextvalue <$curvalue( )> :
0[1] 1[2] 2[3] 3[0] ] ]
Example 12.41 Four-value sequencer.

inv fourvalue($value)(value< 0 >) . . . $value
def fourvalue[([{S1 < > S2 < > S3 < > S4 < > }])([{$SA $SB $SC $SD}])
A( $S4 )
B( $S1 )
C( $S2 )
D( $S3 ) :
A[SA<D>] B[SB<D>] C[SC<D>] D[SD<D>] ] ]
Example 12.42 Pure association sequencer.

inv
fourstate($value)(value< 0 >) . . . $value
def
fourstate[(curvalue < >)($nextvalue)
$curvalue :
0[nextvalue <1>] 1[nextvalue <2>]
2[nextvalue <3>] 3[nextvalue <0>] ] ]
Example 12.43 Pure value sequencer.

inv
fourvalue()
def
fourvalue[()($value)
nextvalue($value)(value< 0 >) :
nextvalue[(curvalue< >)($newvalue)
newvalue<$curvalue()>
0[1] 1[2] 2[3] 3[0] ] ]
Example 12.44 Sequencer with internal state maintaining invocation.

12.16 CODE DETECTOR
The code detector of Example 12.45 detects the occurrence of code sequence
0010111 in a continuous stream of bits. It is a state machine that enters a par-
ticular state when the sequence is detected. The invocation of code, receives
the current state and the next bit in the stream, invokes the defi nition of code,
and receives in return the next state and the detect condition. The next state
CODE DETECTOR 241

THE INVOCATION LANGUAGE
in the source list associates with current state in the destination list. When the
next bit arrives, the defi nition is invoked with the current state and the next
bit. The expression is initialized by setting the content of state< > to S0. The
behavior of the state machine is presented in Figure 12.31 as a function table
and as a state transition graph.

The code detector always asserts a yes or a no for the detect condition.

A response fi lter expression, such as Example 12.16 shown earlier in
this chapter, can receive the detect condition and only pass on the yes
condition.

to state 2
to state 4
to state 0
to state 0
to state 2
to state 0
to state 1
to state 3
to state 1
to state 1
to state 0
to state 2
to state 5
to state 6
state 0
state 1
state 2
state 3
state 4
state 5
state 6
Detect
Detect
inv
code($state $nextbit)(state< S0 > detect< >)
def
code[(currentstate< > newbit< >)($state $detect)
$newbit$currentstate( ) :
0S0[detect< no > state<S1>]
0S1[detect< no > state<S2>]
0S2[detect< no > state<S2>]
0S3[detect< no > state<S4>]
0S4[detect< no > state<S2>]
0S5[detect< no > state<S1>]
0S6[detect< no > state<S1>]
1S0[detect< no > state<S0>]
1S1[detect< no > state<S0>]
1S2[detect< no > state<S3>]
1S3[detect< no > state<S0>]
1S4[detect< no > state<S5>]
1S5[detect< no > state<S6>]
1S6[detect< yes > state<S0>] ]
Example 12.45 Code detector state machine.

Figure 12.31 Bit sequence detector state machine.


12.17 A CONTROL PROGRAM
This example is an expression to control the behavior of a set of stoplights at
an intersection. There is a main road and a side road forming a Tee. The traffi c
lights are green for the main road and red for the side road until a car is
detected on the side road by a magloop switch. The lights then cycle to red
for main road and green for side road to allow the car on the side road to
enter the main road. Each cycle has a specifi c period. The main lights become
amber for 5 seconds, the main lights are red and the side light green for 40
seconds, and the side light is amber for 5 seconds; then the main light becomes
green and the side light red for 60 seconds before another control cycle is
allowed.

There are two walk buttons controlling walk lights for the main road and
for the side road. When the side road button is pushed, the side road light is
red and the main light is green; the walk light for the side road will cycle to
walk for 20 seconds and then don’t walk for 10 seconds before allowing
another control cycle.

When the main walk button is pushed, the main lights will cycle to red for
the main road and red for the side road. The walk lights will then cycle to
walk for 20 seconds and don’t walk for 10 seconds. Then the main light will
cycle back to green.

The control program is shown as Example 12.46. The sequencing behavior
of the program is expressed with a single token fl owing through the places
named Nx in the expression. The Nx places form a structure of three rings
coupled through the invocation of listen. The single token fl ows from listen
into a control ring and sequences its behaviors as it fl ows through the ring and
then back to the listen invocation. The ring structure of the expression and its
response to the switch inputs is shown in Figure 12.32.

The input to listen is the token and content from the magloop switch or the
walk buttons. The token input is received in the mutually exclusive places $N9,
$N20, and $N25. The enclosing braces indicate that only one place will have
content at a time, which is true by virtue of there being only one token. The
switch and button destination places encompassed by double braces are arbi-
trated into the invocation. The source list of the listen invocation has three
places encompassed by braces, indicating that only one place will have content:
the single token. The defi nition of listen receives the token and directs it to a
specifi c output according to the switch and button content. The token fl owing
through a specifi c output path enables and begins a specifi c control sequence.

The control periods are expressed with an invocation of delay which receives
the token and returns it after the specifi ed period.

The expression is within a defi nition named world with no source list and
no destination list: no input and no output. There are free source places and
destination places within the defi nition. The free source places magloop, main-
button, and sidebutton represent the switches providing input to the control
expression. The free destination places mainlight, sidelight, mainwalklight,
A CONTROL PROGRAM 243

THE INVOCATION LANGUAGE
World[
magloop< > mainbutton< > sidebutton< > startA< token >
$mainlight $sidelight $mainwalklight $sidewalklight
“listen for switch and buttons”
listen({$N9 $N20 $N25} {{$magloop $mainbutton $sidebutton}})({N1< > N10< >
N21 < >})
listen[(token< > signal< >)({$out1 $out2 $out3})
$signal( ) : magloop[out1<$token>] mainbutton[out2<$token>] sidebutton[out3
<$token>] ]
“cycle main lights”
setlights($N1,AR)(N2< > mainlight< > sidelight< >) delay($N2, 5)(N3< >)
setlights($N3,RG)(N4< > mainlight< > sidelight< >) delay($N4, 40)(N5< >)
setlights($N5,RA)(N6< > mainlight< > sidelight< >) delay($N6, 5)(N7< >)
setlights({$N7 $startC},GR)(N8< > mainlight< > sidelight< >) delay($N8 60)
(N9< >)
“cycle main walk light”
setlights($N10,AR)(N11< > mainlight< > sidelight< >) delay($N11, 5)(N12< >)
setlights($N12,RR)(N13< > mainlight< > sidelight< >) delay($N13, 5)(N14< >)
setmainwalk($N14,W)(N15< > walklight< >) delay($N15, 20)(N16< >)
setmainwalk($N16,DW)(N17< > walklight< >) delay($N17, 10)(N18< >)
setlights($N18,GR)(N19< > mainlight< > sidelight< >) delay($N19, 60)(N20< >)
“cycle side walk light”
setsidewalk($N21,W)(N22< > walklight< >) delay($N22, 20)(N23< >)
setsidewalk($N23,DW)(N24< > walklight< >) delay($N24, 10)(N25< >)
“initialize walk lights”
setsidewalk($startA,DW)(startA1< > walklight< >) delay($startA1, 10)(startB< >)
setmainwalk($startB,DW)(starB1< > walklight< >) delay($startB1, 10)(startC< >)
setlights[(Nx< > color< >)($next $main $side)
next<$Nx > $color( ) :
GR[main<green> side<red>] AR[[main<amber> side<red>]
RG[[main<red> side<green>] RA[[main<red> side<amber>]
RR[[main<red> side<red>] ]
setmainwalk[($Nx< >,color< >)($next $mainwalklight)
