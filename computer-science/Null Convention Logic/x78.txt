tokens in the input places to satisfy the weights of the input arcs, but transi-
tions fi re indiscriminately of each other and, in particular, regardless of the
MODELS OF CONCURRENCY 257

REFLECTIONS
state of receiving transitions. There seems to be a relationship between empti-
ness and fullness but this is not a completeness relationship. A place can
contain any amount of tokens and a fi ring transition will not necessarily empty
all the tokens from a place. If the input places of a transition have enough
tokens to fi re three times, the transition will fi re three times in immediate
succession sending tokens to its output places. The fi rings of transitions are
not, themselves, coordinated. A transition fi res when its input is satifi ed
regardless of the state of the receiving places allowing tokens to collide and
pile up in places.

With an appropriate network structure and with a suffi ciently sparse initial
marking of tokens, one can tease coordinated deterministic behavior from
component behaviors that are inherently nondeterministic in composition. If,
as a token fl ows, it trails emptiness immediately behind it, the tokens are kept
far enough apart in the network by dependency relationships to avoid colli-
sions. The alternation of the fl ow of completeness and emptiness through the
network can effectively mimic a monotonic coordination protocol like the
NULL convention and cycles. Figure 13.1a shows a 2NCL pipeline of coupled
cycles, and Figure 13.1b shows the corresponding Petri net model The weight
of each arc is one. When a token enters the upper left place a token wavefront
will fl ow through the expression mimicing the behavior of the 2NCL cycles.

A Petri net is generally considered to be modeling control fl ow. It is only
a partial model of overall behavior. It does not model data or data processes.

Also the model of token fl ow does not correspond to available spontaneous
behaviors such as voltage level transitions.

13.12.2 Data Flow
Data fl ow does model data and data processes [4]. Data fl ow has many simi-
larities to the invocation model. A data fl ow expression is a network of linked
operators through which data fl ows. There is a notion of coordinating data
fl ow in terms of completeness relationships. An operator can proceed only
when all its input links have data in them and its output link is empty. The
requirement that the output link be empty corresponds to NULL, keeps suc-
cessive wavefronts of data separated, and coordinates the fl ow of data through
a. 2NCL single-rail pipeline of coupled cycles.

b. Petri net model of cycle behavior.

Figure 13.1 2NCLcycles and Petri net cycles.


the network. The behavior of a data fl ow network is coordinated by the input
completeness and output emptiness relationships as data fl ows through the
network.

There is no notion of central memory, all state is maintained in the links
connecting the operators. All behavior and all memory is distributed locally
within the network. There is no globally infl uential behavior or data.

Since any operator with complete input can proceed, the data fl ow model
is inherently concurrent. This rule of behavior appears to eliminate any
explicit notion of control in the model, but there is a critical factor missing.

There is no intrinsic means of directly expressing or appreciating complete-
ness of input or emptiness of output in the defi nition of the links or of the
operators. The notion of data remains one of continuous presentation and for
the operators, which are typically defi ned to be functions, one of stateless
mappings. There must still be a separate agent of control managing the fl ow
of data through the operators. Completeness and emptiness is just a rule of
behavior to be enforced somehow or other. It is not an intrinsic behavior of
the model.

Typically a binary token fl ows along with data to indicate empty and full.

A controller manages operator behaviors and fl ow of data in terms of the
token fl ow. The fl ow of the token and the data still have to be carefully timed.

While the data fl ow model has transcended the explicit control of sequence,
it introduces the even more complex explicit control of concurrency and
concurrent timing relationships. Data fl ow computers have not become eco-
nomically viable because the gained performance benefi t has never exceeded
the increased costs of complex concurrency control. To achieve economic
concurrency, the issues of critical timing and explicit control must be
eliminated.

Data fl ow, as a network of linked operators, remains a one hierarchical
level conception of concurrent behavior. An operator is not expressed inter-
nally as a data fl ow graph and a data fl ow graph does not abstract into an
operator.

13.12.3 Asynchronous Circuit Design
Circuits of logic functions have always been inherently concurrent expressions
with unruly behavior. One solution was to fi lter out the unruly behavior with
a time interval and a clock. Asynchronous circuit design is an attempt to tame
the unruliness of concurrent behavior with a means other than a time interval
and a clock [5, 6]. At the primitive level of logic circuit design there cannot
be an explicit control expression. The logic has to behave on its own terms.

The C-element was introduced, and it provided a logic operator with state-
holding behavior that could appreciate transitions between disjoint states.

This enabled the notion of delay insensitive encoding of data, which is a form
of the NULL convention. Asynchronous circuits were then expressed with a
combination of Boolean functions and C-elements. The diffi culty is that the
MODELS OF CONCURRENCY 259

REFLECTIONS
stateless Boolean functions were retained. While such mixed expressions can
be made to work, they are still very complex and involve many critical timing
relationships. Asynchronous circuit design is also a single-level model that
resides at the logic level.

13.12.4 Actors
At the upper level of abstraction lies actors: expressions that interact by
sending and receiving messages [7]. Actors are not hierarchical. They do not
compose to form new actors. The inside of an actor is a sequential program
or a script, not one or more other actors. Actors do not aspire to conceptual
primitivity. The model assumes a supporting system, not expressed as actors,
that manages message traffi c, the dynamic instantiation of actors, and the
interpretation of an actor’s script.

13.12.5 Connectionism
Connectionism, or parallel distributed processing, or neural networks, or asso-
ciative processing, are all attempts at pure association expressions that learn.

The characterization of these networks is still in terms of continually presented
data and continually acting stateless functions. The fl ow through an expression
still needs to be timed and controlled.

13.13 CONCLUSION
The invocation model begins with the notion of differentness and its apprecia-
tion, with the primitive concepts of associated thengs asserting values that
change according to value transform rules. While several conventions were
introduced along the way, no new primitive concepts were introduced. Asso-
ciating thengs and their changing values are suffi cient to encompass the expres-
sions of natural computation and the expressions of human computation in all
their familiar forms.

The invocation model of process expression encompasses the expressions
of humans and the expressions of nature in the same sense that aerodynamics
encompasses the wing of a bird and the wing of an airplane. Computer science
is not an artifi cial science, it is as natural as physics and chemistry. Contem-
porary computer science is simply distracted by a very narrow mathematical
view of computing and cannot see beyond it.

It is as if aerodynamics had begun as “kite science.” A science of the artifi -
cial with a fundamental concept being the notion of a tether. A kite cannot
possibly fl y unless it is tethered against the wind. Without the tether the kite
must fall. The notion that a kite might create its own wind is not part of the
“science.” Computer science must create its own wind and soar beyond its
current sequential vistas.

