
11.6 REFERENTIAL TO AUTONOMOUS
If a faithful symbolic process expression of an existing association expression
cannot be obtained, by observation can a symbolic process expression be
created that maps to an artifi cial autonomous expression indistinguishable
from an existing association expression? This can take two forms.

The fi rst form is a symbolic process expression that captures the form of
expression of the amoeba and, when mapped to autonomous behavior, is an
instance of an amoeba, not identical to any existing amoeba but a fully viable
instance of an amoeba indistinguishable both internally and externally from
any other instance of an amoeba.

The second form is a symbolic process expression that when mapped to
autonomous behavior produces the same behaviors as an amoeba but with an
internal expression that is completely different. It is a robot amoeba. The
autonomous expression saves the behavioral appearances of the amoeba but
not the internal substance.

Saving the appearances is a uniquely mathematical point of view that
derives from the mathematical strategy of abstracting out variety of expression
as irrelevant. The Turing test exemplifi es this point of view. If the results (the
external behaviors) are identical (indistinguishable), then the processes are
equivalent and any difference in their specifi c expression is irrelevant. The
symbolic process expression of the robot amoeba is fully representative. This
may satisfy a mathematician, but it will not satisfy a biologist and should not
satisfy a computer scientist.

The problem with saving the appearances is that it cannot be ensured that
all appearances have been saved. There might lurk in the internal expression
infrequent, nondeterministic appreciations exhibiting behaviors that have not
been observed or compared and whose appearance cannot have been saved.

If the goal is to understand the existing expression; simply saving the appear-
ances is not suffi cient.

11.7 PURE VALUE REFERENTIAL EXPRESSION
A pure value referential expression is a collection of value transform rules
specifying the patterns of interaction among symbol values. A pure value
expression is almost entirely lateral with very little hierarchical structure. All

the values in a pure value expression must be unique, so there is no common-
ality of expression to exploit. The symbol interactions are self-coordinating,
so there are no coordination protocols to ignore. The symbolic value trans-
form rules are a one-to-one mapping to the behaviors of an autonomous pure
value expression, so there is no opportunity to ignore resource issues. In short,
there are no opportunities for convenient economies of expression in a pure
value referential expression.

Mapping a pure value referential expression to an autonomous pure value
expression is very different from mapping an association expression. One must
fi nd just the right spontaneously behaving resources with the appropriate
interaction behaviors. For a large expression this could be diffi cult to impos-
sible. Humans are not facile with creating pure value expressions. Humans
minimize value expression and maximize association expression. Logical oper-
ators are typically expressed as pure value expressions. The truth table of a
logical operator is a set of value transform rules. But logical operators are
typically implemented as a network of transistor switches. The insides of a
transistor, which is a fully associated pure value expression, is the largest
autonomous pure value expression that humans typically employee.

Pure value expression is not an economic medium of referential expression
nor a convenient medium of artifi cial autonomous expression. While nature
might create a soup bowl processor in the form of the biological cell, humans
are more facile with association expression.

11.8 CONTINUAL MAPPING OF REFERENTIAL TO AUTONOMOUS
Association expression has been discussed in terms of a persistent greater
association expression with less persistent memories that contain referential
expressions that change and are appreciated by the greater association expres-
sion. There is another relationship of referential expression to association
expression to consider, and that is when a referential expression is more per-
sistent than the greater association expression and the greater association
expression derives its persistence by being continually mapped from a more
persistent referential expression.

The biological cell is such an expression where the DNA referential expres-
sion is continually mapped into the autonomous expression of the cell. The
components of the cell expression are as transient as the differentnesses
fl owing through the expression. The form and structure of the greater associa-
tion expression persist by virtue of a continuous stream of new components
mapped from DNA that spontaneously organize into the greater association
expression of the cell. This is how the pure value expressions of the cell con-
tinually renew and persist.

Another form of most persistent referential expression is a constitution and
canon of laws and traditions of a society continually mapping onto and struc-
turing successive generations of constituent association expressions.

CONTINUAL MAPPING OF REFERENTIAL TO AUTONOMOUS 195

REFERENTIAL AND AUTONOMOUS PROCESS EXPRESSION
11.9 SUMMARY
An autonomous expression is complete and behaves on its own expressional
merits. A referential expression is an incomplete symbolic expression that
does not behave on its own merits. Because it is incomplete and does not
behave it can appeal to conventions and commonalities in a shorthand of
process expression. One might consider referential symbolic expression to be
an abstract invention of humans but it is, in fact, integral to all process
expression.

Referential expression occurs within autonomous expressions as the content
of the intermediate persistence memories forming internal models of experi-
ence. It occurs as a means of communication among autonomous expressions
and as a persistent means of externally storing representations of experience.

It occurs as a template to be mapped to autonomous behavior by fi lling in the
incomplete parts and enlivening the expression. The completed expression
might be mapped directly to autonomously behaving components or it might
be interpreted by an existing autonomous expression or by an artifi cial autono-
mous expression created specifi cally to enliven referential expressions.

There is no archetypal or universal form of referential expression encom-
passing all forms of expression. Each expression must adopt a point of view
of what the differentnesses and their interactions are and how they will be
represented and not all points of view can be encompassed by a single point
of view.


Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright Â© 2007 John Wiley & Sons, Inc.

THE INVOCATION
LANGUAGE
This chapter presents a symbol string language of direct association relation-
ships that embodies the invocation model.

12.1 THE NATURE OF SYMBOL STRING EXPRESSION
The essential property of a symbol string is that it exists in an inherently
limiting one-dimensional expression space. A symbol in the string can
associate with its direct neighbors but cannot directly associate with more
remote places in the string. Contrast this to the expression of an electronic
circuit in three-dimensional space in which any place in the circuit can directly
associate with any other place in the circuit via a wire connecting the two
places.

A symbol string expression must be mappable to higher dimensional forms
of expression. So there must be a means of expressing higher dimensional
relationships in the one-dimensional string, a means of delimiting places within
the string, and a means of associating these places from anywhere in the string
to anywhere else in the string. This is accomplished with syntax structure and
with name correspondence.

Of the available symbols a small set is reserved for expressing syntax
structures, and the rest can be used for expressing correspondence names and
the content that fl ows through the expression. Syntax structure can express
delimitation of places and their local association in terms of nesting and

THE INVOCATION LANGUAGE
contiguity, but it cannot associate one place in the expression with any other
arbitrary place in the expression. This is accomplished with name correspon-
dence association. Each syntax structure has a unique name. Remote syntax
structures with identical names are associated by the correspondence of their
names.

Another consequence of the one-dimensionality of the symbol string is that
there is not enough dimensionality for a symbol string expression to autono-
mously resolve in the context of the string. A symbol string expression can be
mapped into an expression with suffi cient dimensionality, or it can be inter-
preted within an expression of suffi cient dimensionality. However, a symbol
string cannot spontaneously behave on its own merits. A symbol string expres-
sion is a purely referential form of expression.

Since a symbol string is purely referential, it can indulge in expressional
effi ciencies that are not available to expressions that autonomously resolve.

It can express just the necessary relationships of a process and defer as uni-
versal conventions many of the details of process behavior. The deferred
expressivity can be added back in during mapping to autonomy or during
interpretation.

12.2 A LANGUAGE OF ASSOCIATION RELATIONSHIPS
The invocation language embodies the invocation model. It expresses
association relationships among places in an expression in contrast to a
sequence of operations on a state space. It expresses distributed concurrency
in contrast to centralized sequentiality. It expresses locally autonomous
behavior in contrast to centrally controlled behavior. It expresses distributed
data maintenance in contrast to centralized data maintenance. Expression
in the language is uniform and consistent from primitive expressions such
as logic functions or protein interactions through all levels of hierarchical
composition.

There are several familiar notions of expressivity that the language does
not include. There is no predefi ned set of symbols, no predefi ned set of primi-
tive operators, no predefi ned data types or structures, and no predefi ned
control operators. There is no concept of sequence or of any time referent, no
concept of explicit control, no concept of explicitly addressable memory, and
no concept of state space.

Expressions in the invocation language can be mapped into any form of
implementation from a fully distributed and concurrent pipeline structure to
a contemporary sequential processor and onto any intermediate fl avor of dis-
tributed processing such as multiple core sequential processors, DSPs, and
programmable gate arrays. Uncluttered with conventions and confusions the
invocation language captures the elegant simplicity of expressing concurrent
and distributed behavior encompassing all forms of process expression from
mathematical computation to biological metabolism.


12.3 THE SYNTAX STRUCTURES
