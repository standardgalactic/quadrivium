Completeness must be explicitly restored. One might attempt to restore complete-
ness with the expression of Figure 4.21b. While this restores completeness for the
‘force zeros’ and ‘force ones’ expressions, the 2 of 4 operator will always achieve com-
plete input and assert an output DATA value producing an orphan through the operator
when the ‘pass input’ result is asserted. The expression of Figure 4.21c restores com-
pleteness to ‘force zeros’ and ‘force ones’ and does not produce an orphan.
An error can be made on a function as simple as the Boolean AND function.
Figure 4.22 shows the mapping with preminimized output equations leading to
a 2NCL expression that does not fulfill completeness. The output can assert a
DATA value when only one input is DATA, as shown with the wide path through
the expression.
When one enters the realm of incomplete mappings that must be restored to com-
pleteness, one enters a very subtle and uncertain territory [25]. There is no developed
methodology for restoring and verifying completeness and of verifying the isolation
of orphans for a restored expression. Figure 4.21b was long believed by a human
mind to be complete and orphan isolating. It was sometime before the presence of
the orphan was realized. Figure 4.21c was not discovered by a human mind at all
but by an experimental program derived from an experimental asynchronous
design tool (Petrify [7]). In short, the detection of incompleteness and the restoration
of completeness cannot rely on human mentality, and the automated tools are not
available.
Although the five operator expression of Figure 4.21c for the clipper control is
more efficient than the six operator expressions of Figure 4.19 and Figure 4.20, it
is most convenient, currently, to map to the 2NCL expression from the sum of pro-
ducts Boolean output equations. This inherently maintains completeness and orphan
path isolation in the 2NCL expression. It is then easier to optimize in terms of 2NCL
operators while maintaining completeness relationships and orphan path isolation. It
is not clear that it will ever be advantageous to minimize the Boolean functions, per-
form the mapping, and then try to restore completeness and orphan isolation.
4.7.3
The Clipper Data Function
With a 3 value variable as control, the function for each bit 0 through 4 has as inputs
one 3 value variable and one 2 value variable, and as output one 2 value variable.
The map for this function with the output equations is shown in Figure 4.23.
Z1
Z0 X0Y0 + X0Y1 + X1Y0
X1Y1
A + B
AB
3. AB
2
A
B
0
AND
1
0
1
0
1
2
1
Y1
X0
Y0
X1
Z1
Z0
X0 + Y0
X1Y1
2. A + B
1
A
B
Figure 4.22
Preminimization leading to an incomplete implementation of AND.
4.7 EXAMPLE 4: A BINARY CLIPPER
81

Figure 4.24 shows an output expression for each bit using operator 19 and a
2NCL expression of the complete clipper.
4.8
EXAMPLE 5: A CODE DETECTOR
Example five shown in Figure 4.25 is the combinational function of a state machine
to detect the sequence 0010111 in a sequential stream of binary variables.
Figure 4.25a shows the state machine diagram, and Figure 4.25b shows the function
map of the combinational expression that resolves the current state with the next
input variable to determine the next state. Figure 4.25c shows the output equations
derived from the function map. The input of the function is one 2 value variable and
one 7 value variable (the current state). The output is one 2 value variable (detect,
not detect) and one 7 value variable (the next state). All states output a not detect
until state 6 sees a 1 that outputs a detect and returns to state 0 to begin searching
again.
The equations for each output value yield two generic equations: AB, which is a 2
of 2 operator, and AB þ AC þ AD, which is operator 17 and which can also map to
operator 10 because of the mutual exclusivity of B, C, and D. Operator 10 is chosen
to draw the example expression. The full combinational expression is shown in
Figure 4.26. The complete state machine will be presented later, in Section 7.1.3
of Chapter 7.
4.9
COMPLETENESS SUFFICIENCY
Completeness of the output variables must indicate completeness of the input vari-
ables and completeness of propagation. If there is only one output variable, then this
single variable must fulfill the completeness criterion. If there are two or more vari-
ables, their collective completeness must fulfill the completeness criterion. The
carry output of the full adder, for instance, does not fulfill the completeness criterion
0
pass input
1
force ones
1
1
force zeros
0
0
1
0
P
Z
O
O0 + O1 + P1
Z0 + Z1 + P0
AB + AD + CB
AB + AD + CB
Specific equations
Generic equations
2
3
27
A
D
B
A
C
27. AB + BC + AD
19. AB + AC + AD + BC + BD
C
D
A
B
3
Figure 4.23
Clipper data path function map.
82
2NCL COMBINATIONAL EXPRESSION

force zeros
force ones
3
3
0
0
0
0
0
0
1
0
1
0
1
0
1
0
1
4
3
2
1
0
1
1
1
1
1
3
3
3
3
3
3
3
3
1
0
1
7
6
5
0
1
70
60
50
71
51
61
pass input
5
51
71
60
51
61
50
50
71
70
61
60
51
50
70
3
3
3
3
3
3
1
P
n0
Z
n1
3
0
n0
P
n1
O
3
1
Expression for each bit 0-4
using operator 19
Figure 4.24
Complete 2NCL expression for the clipper.
4.9 COMPLETENESS SUFFICIENCY
83

state 0
state 1
state 2
state 3
state 4
state 5
state 6
state 0
state 1
state 2
state 3
state 4
state 5
state 6
to state 2
to state 4
to state 0
to state 0
to state 2
to state 0
to state 1
