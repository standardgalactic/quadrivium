taneously oscillate, this out-of-phase synchronization results in transition wave-
fronts propagating from oscillator to oscillator spontaneously flowing through the
structure as shown in Figure 3.4. This is the familiar pipeline structure and will
Unsynchronized signals
fanning in to the shared
completeness path are
synchronized by the
completeness relationship.
Signals fanning out from the
shared completeness path
are synchronized by virtue
of being generated from a
single signal.
2
3
Figure 3.2
Synchronized cycles.
2
are
synchronized
by this shared
completeness
path
These two cycles
are
synchronized
by this shared
completeness
path
These two cycles
are
synchronized
by this shared
completeness
path
These two cycles
are
synchronized
by this shared
completeness
path
2
2
2
These two cycles
Figure 3.3
Pipeline synchronized cycles.
32
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
Time
0 wavefront
1 wavefront
Figure 3.4
Transition wavefronts propagating through pipeline synchronized cycles.
3.1 THE CYCLE
33

be called pipeline synchronization or simply a pipeline. The behavior of the pipeline
is completely logically determined by the shared completeness paths.
The oscillators of the pipeline shown in Figure 3.4 with closed paths on either end
will continuously oscillate, and transition wavefronts will continuously flow through
the structure. This spontaneous wavefront flow through spontaneously active pipe-
lines composed of coupled oscillators continually striving to oscillate is the foun-
dation of behavior for logically determined systems.
3.1.3
Cycles and 2NCL Data Paths
A 2NCL data path monotonically transitions between complete DATA (one DATA
value per variable) and complete NULL (all NULL values). This monotonic transi-
tioning embodies the behavior of a single binary signal.
Figure 3.5 shows a pipeline with a data path of two 4 value variables. The rank of
1 of 4 operators detects the one DATA and all NULL state of each variable and the 2
of 2 operator in the acknowledge path detects the completeness of DATA and NULL
over the two variables in the data path. The detection across a data path of com-
pletion of DATA and completion of NULL reduces the behavior of a whole data
path to a binary signal with the values ‘complete data’ and ‘complete NULL’. Con-
sequently a portion of the binary signal path of a ring oscillator can be replaced with
an entire 2NCL data path. The resulting structure, which will be called a cycle, still
behaves like a ring oscillator striving to oscillate.
The binary signal from the completion detection forms an acknowledge signal,
which is inverted and presented to a previous portion of the data path forming a
shared completeness path spanning the entire data path. The spanning completeness
2
2
2
4 value
variable
spanning shared
completeness path
completeness
detection
4 value
variable
registration
stage
2
2
2
2
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
1
1
2
2
2
2
2
2
2
2
1
1
2
2
2
2
2
2
2
2
1
1
spanning
Figure 3.5
Pipelined cycles with 2NCL data path.
34
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

detection and the spanning shared completeness path together synchronize the entire
data path and condition its behavior to that of a binary signal. The completion detec-
tion, the acknowledge signal, its inversion, the spanning shared completeness path,
and the portion of the data path between the shared completeness path and the
completeness detection form a cycle. A shared completeness path followed by
completion detection forms a registration stage synchronizing two cycles.
Transition wavefronts flowing through a pipeline of synchronized cycles are now
propagating real data. Arbitrarily wide data paths can be incorporated into cycles
and the behavior of the resulting structure remains spontaneously active and logi-
cally determined.
3.1.4
Data Path Abstraction
Conversely, since the data path transitions monotonically just like a single binary
signal, the entire data path can be abstracted to a single binary signal as shown in
Figure 3.6 without changing the synchronization behavior of the cycles. Completion
on the data path is trivial, and the shared completion path is a single M of M oper-
ator. With this collapsed data path model the behavior of an entire system can be
modeled and emulated with single signal data paths to determine the correctness
of the system control structure and dynamic behavior issues such as maximum
throughput and throughput bottlenecks independent of the data path functionality.
These circuits can be simulated, or they can be physically implemented. The struc-
ture and behavior of a significant sized system could easily be mapped into a single
FPGA, for instance.
Figure 3.6 also illustrates viewing the cycle in terms of a data path part and an
acknowledge path part. The acknowledge signal is the portion of a cycle that is actu-
ally a binary signal. The figures will follow the convention of illustrating the data
paths as wide lines and acknowledge paths as narrow lines.
The discussion of cycle structures will continue in terms of multi-variable data
paths, collapsed data paths, and also the graphic shown in Figure 3.7, which indi-
cates a registration stage on an arbitrarily wide data path. The three representations
will be used as convenient.
3.1.5
Composition in Terms of Cycles
1. Every signal path in a system must be part of a cycle.
2
2
2
2
1 value
variable
acknowledge path
data path
data path
acknowledge path
Figure 3.6
Pipeline cycles with data path collapsed into single-value variable data path.
3.1 THE CYCLE
35

2. Every cycle must have an odd number of inversions. It is convenient to assume
that each cycle has a single inversion in the acknowledge path.
3. Shared cycle paths must be completeness paths.
