enhanced with C-elements, timing assumptions (e.g., wires with zero delay or
detailed timing coordination of specific signals within a logic expression) and
dual-rail encoding. While this can be achieved to a certain degree, the heterogeneous
nature of the expression results in arcane logic structures with subtle modes of beha-
vior including critical timing relationships [4,33,58,59].
Some asynchronous design methodologies pursue the minimal expression of timing
relationships. Muller’s modules [35], Delay-Insensitive Minterm Synthesis [53], and
Martin’s methodology [29,30] have approached logically determined design but have
not presented a coherent, easily understandable, and adoptable conceptual foundation.
Other methodologies pursue maximum speed and minimum size by minimizing
the expression of logical relationships and simply embracing the increased critical
timing relationships as an integral part of the design methodology [55,56,54].
The bundled data/micropipeline approach splits the difference. It uses a standard
timed Boolean data path and an asynchronous control substrate that expresses the
intervals as local clocks to the data path registers using a matched delay element
associated with each combinational expression [57,15].
1.3.6
The Complexity Burden of Asynchronous Design
While the C-element and dual-rail encoding were steps in the right direction, they did
not step far enough. Boolean logic was retained as a primary form of expression. The
result was a heterogeneous expression methodology with subtle logic structures and
complex behavior modes that neither enlightened understanding nor enabled practice.
The primary question of asynchronous design—How can Boolean logic be made
to work without a clock?—is the wrong question. Boolean logic does not provide an
adequate conceptual foundation and simply confuses the issues. The reliance on
Boolean logic as a fundamental form of expression is a primary reason that asyn-
chronous design is difficult, is distrusted, and has not been adopted.
1.3.7
The Cost of Supplementation
As logic expression becomes more complex, supplementary expression simply com-
pounds the complexity of expression. Clearly, one should strive to avoid the neces-
sity of supplementary expression.
1.4
DEFINING A SUFFICIENTLY EXPRESSIVE LOGIC
What if a sufficiently expressive logic were available, a logic that could completely
express the behavior of a system solely in terms of logical relationships? There
would be no need for any supplementary expression with its compounding complex-
ity. Such a logic must symbolically express the boundaries of data presentation, and
its operators must appreciate the expressed boundaries.
1.4
DEFINING A SUFFICIENTLY EXPRESSIVE LOGIC
5

1.4.1
Logically Expressing Data Presentation Boundaries
First, the representation of the data must include an explicit symbolic expression of ‘not
data’. A symbol that explicitly means ‘not data’ is added to the ‘data’ symbols, and the
input presented to the logic operators transition monotonically between ‘completely
not data’ and ‘completely data’, as shown in Figure 1.2. The transition of the input
from ‘completely not data’ to ‘completely data’, called a ‘data’ wavefront, expresses
a new data presentation and the beginning of an instance of resolution. The transition
of the input from ‘completely data’ to ‘completely not data’, called a ‘not data’ wave-
front, expresses the end of an instance of resolution and the boundary between instan-
tiations. Dual-rail encoding is a specific instance of such a representation.
1.4.2
Logically Recognizing Data Presentation Boundaries
To logically appreciate the presentation boundaries the logic operators must respond
only to completeness relationships at their inputs in contrast to continuously
responding to all possible inputs.
If input is:
. ‘completely data’, then transition output to the correct ‘data’ resolution of
input,
. ‘completely not data’, then transition output to ‘not data’,
. neither ‘completely data’ nor ‘completely not data’ do not transition output.
Example operators are shown in Figure 1.3. T and F are the ‘data’ symbols and N
is the ‘not data’ symbol. The dash means that the output of the operator does not
transition.
data
data
wavefront
data
wavefront
data
wavefront
not data
wavefront
not data
wavefront
not data
wavefront
completely
not data
completely
not data
data
data
completely
not data
completely
not data
completely
completely
completely
Figure 1.2
Monotonically alternating wavefronts of completely data and completely not data.
T
N
F
N
F
T
-
F
T
-
F
F
N
-
-
T
N
F
N
F
T
-
T
-
T
N
-
-
T
N
F
F
T
N
T
N
F
N
F
T
-
T
F
-
F
T
N
-
-
Figure 1.3
Logic operators that recognize ‘data’ from ‘not data’.
6
TRUSTING LOGIC

Each logic operator, responding only to completeness of input relationships,
coordinates its own behavior with the completeness behavior of the presented
input. When the output of a logic operator monotonically transitions to ‘completely
data’, it means that the input is ‘completely data’ and the data output is the correct
result of the presented input. When the output of a logic operator monotonically
transitions to ‘completely not data’, it means that the input is ‘completely not
data’ and the ‘not data’ output is the correct result of the presented input. The
C-element is a specific instance of such a logic operator.
This completeness behavior of the logic operator scales up for any acyclic
combination of logic operators. Consider the combinational expression shown in
Figure 1.4. Circles are logic operators and they are acyclically connected from
input to output. Divide the network arbitrarily into N ranks of operators ordered pro-
gressively from input to output, with all inputs before the first rank and all outputs
after the last rank. The rank boundaries are shown in Figure 1.4 with vertical lines
labeled alphabetically in rank order from input to output. Consider that the
expression is in a completely ‘not data’ state and a ‘data’ wavefront is presented.
The ‘data’ wavefront will transition the inputs to ‘data’ as the input monotonically
transitions to ‘all data’.
. For the symbols crossing E to be all data all of the symbols crossing D must be
data.
. For the symbols crossing D to be all data all of the symbols crossing C must be
data.
. For the symbols crossing C to be all data all of the symbols crossing B must be
data.
. For the symbols crossing B to be all data all of the symbols crossing A must be
data.
. Therefore, for all the symbols after E to be data, all the symbols before A must
be data.
output
state
A
B
C
D
E
1
5
4
3
2
6
8
11
7
10
9
input
state
B
input
state
A
Figure 1.4
The completeness criterion for a combinational expression as a whole.
1.4
DEFINING A SUFFICIENTLY EXPRESSIVE LOGIC
7

These considerations are also true for the ‘not data’ wavefront presented when the
expression is in a ‘completely data’ state. Simply substitute ‘not data’ for ‘data’ in
the text above.
The output of the combinational expression as a whole maintains the monotonic
behavior of the input. When the output transitions to ‘completely data’, it means the
input has transitioned to ‘completely data’ and the output is the correct resolution of
the input. When the output transitions to ‘completely not data’, it means the input
has transitioned to ‘completely not data’ and the output is the correct resolution
of the input.
Given the monotonic behavior of the input, it does not matter when or in what
order transitions occur at the input of the expression. Nor does it matter what the
delays might be internal to the expression. Consider operator 7 in Figure 1.4. It
does not matter how long the ‘data’ symbols (‘not data’ symbols) take to propagate
through other operators and over signal paths to the input of operator 7, its output
will not transition until all symbols are ‘data’ (‘not data’) at the input of the operator.
For each wavefront, each logic operator synchronizes its input and switches its
output exactly once coordinating the orderly propagations of monotonic transitions
to correct result symbols through the combinational expression until the output of
the expression as a whole is complete. There are no races, no hazards, and no spur-
ious result symbols during the propagation of the monotonic wavefront of correct
results through the combinational expression.
The behavior of the combinational expression is expressed entirely in terms of
logical relationships. No expression of any time relationship or any other nonlogical
relationship is necessary to fully characterize the behavior of the expression. The
behavior of the combinational expression is completely logically determined.
1.4.3
Logically Coordinating the Flow of Data
Now that the boundaries of presentation and resolution can be expressed logically in
terms of completeness relationships, the flow of presentation wavefronts among
expressions can be coordinated in terms of these same completeness relationships.
When a combinational expression detects completeness on its output it generates
an acknowledge signal in the inverse domain from the detected completion. For
‘completely data’ output the acknowledge signal transitions to ‘not data’. For ‘com-
pletely not data’ output the acknowledge signal transitions to a ‘data’ symbol.
Each combinational expression includes an acknowledge signal as an integral
part of its input completeness relation. When the acknowledge signal presented to
a combinational expression transitions from ‘not data’ to ‘data’, the input of the
combinational expression will become completely data and a data wavefront will
be enabled to propagate to the output of the combinational expression. As long as
the input acknowledge signal remains ‘data’ the combinational expression will
stably maintain its ‘data’ output symbols even if a ‘not data’ wavefront is presented
on the data path. When the acknowledge signal transitions from ‘data’ to ‘not data’,
a ‘not data’ wavefront will be enabled to flow through the combinational expression.
