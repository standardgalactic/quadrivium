A0
A1
B0
B1
INV
INV
2
3
2
3
2
3
2
3
A
B
S
C
Figure 2.14
2NCL expression by direct substitution of a Boolean circuit.
2.3
DERIVING A 2 VALUE LOGIC
25

The orphan paths are the only logical ambiguity (delay sensitivity) associated
with 2NCL. They can be conveniently isolated to local transmission paths inside
an expression, and their delay behavior can be made insignificant in relation to
the wavefront cycle period of a combinational expression. The timing sensitivity
of the orphan is relative, not absolute.
2.3.7
2NCL Summary
2NCL is a practical, sufficiently expressive, 2 value logic suitable for electronic
implementation. A logically determined electronic digital system can be completely
expressed solely in terms of 2NCL. A noncritical timing relationship, the orphan,
must be considered but can be easily managed.
Unlike 4NCL and 3NCL for which any combination of operators will be a logi-
cally determined expression, 2NCL operators can be combined into expressions that
are not logically determined in any sense. So there must be rules of effective design
associated with 2NCL. (The synthesis of 2NCL combinational expressions is dis-
cussed in Chapter 4.) Basically a 2NCL combinational expression must express
the completeness criterion between input and output variable boundaries, and it
must isolate orphan signal paths.
These rules can be isolated from the system designer by providing a library of
2NCL expression that are correctly formed and fully logically determined at their
variable boundaries. The designer can then freely compose fully logically deter-
mined expressions simply by connecting the expression together through their vari-
ables. The first-order demonstration of this is the set of expressions of Figure 2.11,
which are sufficient to map any Boolean combinational expression into a logically
determined 2NCL combinational expression.
Logical Honesty. Logically determined variable boundaries are also integrity
checking nodes as illustrated in Figure 2.16. The multi-path encoding is inherently
2
2
0
1
S
0
1
B
A
0
1
CI
0
1
3
3
2
2
0
1
S
0
1
B
A
0
1
CI
0
1
3
3
Logically determined
variable boundary
Not logically determined
variable boundary
Effective DATA path
NULL path
Orphan path
a. Orphan path through operator
b. Orphan path limited by effective path
Figure 2.15
Orphan path through operator isolated with a created output variable.
26
A SUFFICIENTLY EXPRESSIVE LOGIC

redundant and includes illegal codes. If two DATA values of any variable ever
become 1 at the same time, this illegal condition can be detected by a 2 of N oper-
ator, with N being the number of values in the variable. For an 2NCL expression to
lie, it requires two coordinated faults where a path that should remain NULL
becomes DATA and the path that should become DATA remains NULL. Any
stuck at fault will cause the monotonic transitioning to cease resulting in deadlock.
Each logically determined variable boundary will
1. assert a correct result, or
2. fail to assert a result (deadlock), or
3. assert a logically detectable illegal code.
2.4
COMPROMISING LOGICAL COMPLETENESS
With 2NCL one can choose to erode logical completeness for practical reasons.
Eroding logical completeness means that less of the behavior of the expression is
logically determined and more behavior must be expressed in terms of timing
assumptions. To the extent that one can make reliable assumptions about expression
behavior, one does not need to logically express that behavior. Of course, all the
assumptions must then be made to be true in any actual implementation. In the
case of 2NCL the consequence of eroding logical completeness is longer orphan
paths with more critical timing relationships.
2.4.1
Moving Logically Determined Completeness Boundaries
Farther Apart
One can choose, for instance, to compromise logical completeness by moving the
logically determined variable boundaries farther apart. The 2NCL AND and OR
functions can be expressed with simpler operators that do not express the complete-
ness criterion. The expressions of Figure 2.17b expresses the same data transform-
ation function as the expressions of Figure 2.17a, but they can generate an output
without having a complete input data set. The output of the OR, for instance, can
transition to 1 when only one input variable is data. The boundaries of the
expressions are variables, but the variables do not express the completeness criterion
and are not logically determined variable boundaries.
0
OR
1
0
1
0
1
2
3
2
Error
Figure 2.16
Error-detecting expression.
2.4
COMPROMISING LOGICAL COMPLETENESS
27

If these expressions are substituted in the half-adder expression on Figure 2.18a,
the result is the expression of Figure 2.18b, which contains simpler logical elements.
This circuit preserves the completeness criterion for the circuit as a whole, but the
logically determined variable boundaries are farther apart and the orphan paths
are longer. So more precise assumptions are required about delay relationships.
The reduced logical expressivity necessitates more expression of temporal relation-
ships to completely characterize the behavior of the expression.
2.4.2
No Logically Determined Boundaries in Data Path
One might wish to compromise the logical completeness to the point where there are
no logically determined boundaries at all in the combinational expressions of the
data path. If there are no logically determined completeness boundaries and the
completeness criterion is not in play, then a timing interval must be associated
with the expression. One might as well use the less expressive Boolean logic.
Figure 2.17
2NCL AND and OR expressions that do not enforce the completeness criterion.
Figure 2.18
Lessening logical completeness.
28
A SUFFICIENTLY EXPRESSIVE LOGIC

One might still use logically determined expressions to manage the data path. A
delay element can be associated with each combinational expression, and sequen-
cing of these delays can be managed by inserting the delays in a pipeline with a 1
value variable data path, as shown in Figure 2.19, forming a micropipeline or
bundled data structure [52,57]. The logically determined variable boundaries of
wavefronts flowing through this pipeline and through the delay elements provide
the timed propagation boundaries for the combinational expressions coordinating
the flow of data through the data path.
2.4.3
No Logically Determined Boundaries at All
The next compromise of logical expressivity would be to remove all logically deter-
mined variable boundaries from the system. Every expression in the system posses
an associated time interval, and it is convenient if they are all equal and in phase. A
single global signal distributed to each combinational expression expressing a single
time period will suffice. The result is clocked Boolean logic shown in Figure 2.20.
This is the form of least logical determination and most timing assumption.
Figure 2.19
Bundled data/micropipeline style expressions.
Figure 2.20
Clocked Boolean logic.
2.4
COMPROMISING LOGICAL COMPLETENESS
29

2.5
SUMMARY
The search for a sufficiently expressive practical logic was begun by enhancing
Boolean logic to sufficient expressivity. This required a 4 value logic (4NCL) to
retain the function form of the logical operators. From this was derived a 3 value
logic (3NCL) with logic operators that are state holding. From 3NCL one can
derive either Boolean logic, which abandons logical completeness, or 2NCL,
which preserves logical completeness with a noncritical timing relationship in the
orphan path. In 2NCL there is discovered a sufficiently expressive practical logic
suitable for electronic implementation.
30
A SUFFICIENTLY EXPRESSIVE LOGIC

&CHAPTER 3
The Structure of Logically Determined
Systems
The structure of a logically determined system is quite different from a clock-driven
system. While a clocked system derives its liveness and coordination of information
flow from the pulse of the clock, a logically determined system must derive these
properties of behavior solely from its logical relationships.
It is first shown that there is a simple logical relationship that is inherently live. It
is next shown that this inherently live logical relationship can be evolved into
structures called cycles, which can be composed into pipelines that spontaneously
propagate data wavefronts. These pipelines can then be composed into structures
that coordinate the flow and interaction of data wavefronts implementing complex
digital systems.
3.1
THE CYCLE
There is one very simple logical relationship that is spontaneously active.
3.1.1
The Ring Oscillator
A ring oscillator shown in Figure 3.1 is a closed signal path with an odd number of
inversions propagating a binary signal. It will continually strive to oscillate and is
spontaneously active.
Figure 3.1
Ring oscillator.
31
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

3.1.2
Oscillator Composition with Shared Completeness Path
Two ring oscillators can be combined and synchronized by sharing a completeness
path. The shared completeness path requires that the signal transition in each direc-
tion be complete in all paths before the signal transition continues in any path. All
shared paths must transition to 1 before the transition to 1 continues through any of
the paths. All shared paths must transition to 0 before the transition to 0 continues
through any of the paths.
A 2NCL N of N operator expresses a shared completeness path as shown in
Figure 3.2. The combined structure will oscillate at the frequency of the slowest
oscillator. A fast oscillator will always wait for the transition on a slower oscillator
at the completeness path. This structure, called combinational synchronization, syn-
chronizes the signal behavior of the oscillators in phase by combining the signals
through a shared completeness path.
When an oscillator shares a different completeness path with each of two other
oscillator, as shown in Figure 3.3, it will synchronize through one of its shared com-
pleteness paths with one oscillator, and then it will synchronize through the other
shared completeness path with the other oscillator. As the individual oscillator spon-
