Smaller cycles can be achieved by partitioning combinational expressions, by
partitioning the data path, and by integrating the data path combinational logic
and control logic. The smallest possible cycle consists of a single 1 value variable
data path with no combinational expression shown in Figure 5.2
1
1
1
1
2
2
2
2
2
2
2
2
2
2
Domain
inversion
Domain inversion
Combinational
expression
Figure 5.1
Cycle path and cycle highlighting convention.
95
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

5.1
PARTITIONING COMBINATIONAL EXPRESSIONS
A combinational expression can be partitioned with the familiar pipeline slicing into
data path wide cycles. It can also be partitioned into even smaller units that corre-
spond to the generation of each variable in the combinational expression.
5.1.1
Pipeline Partitioning the Combinational Expression
The expression of Figure 5.3 will be used as the first discussion example. It is a
single cycle with a combinational expression that is a binary full adder expressed
as two half adders and an OR function. The first thing to understand is that any
rank of combinational logic can be turned into a registration stage.
A spanning completeness path is formed by presenting an acknowledge to each
operator as a necessary input. Regardless of the function of the operator, one more
necessary input means the threshold of the operator must be increased by one. An M
of N operator becomes an M þ 1 of N þ 1 operator. The completeness path must
span the data path. If there are paths that bypass the rank of logic, the rank of
logic must be extended through these paths by adding 2 of 2 operators and the
acknowledge. Spanning completion detection is then added after the spanning com-
pleteness path, and one has a registration stage.
This process is illustrated in Figure 5.4. Each rank of logic in the combinational
expression has been turned into a registration stage. Where there was one very long
2
2
1 value
variable
data path
Figure 5.2
Minimum possible cycle.
2
2
2
2
2
2
2
2
2
2
3
Half-adder
Half-adder
2
2
2
2
2
2
2
2
2
2
2
2
C1
C0
A1
A0
B1
B0
1
1
1
1
1
1
S1
S0
C1
C0
2
OR
1
Figure 5.3
Single cycle with an example combinational expression.
96
CYCLE GRANULARITY

cycle there are now five smaller cycles with faster periods, and the throughput for the
expression is increased.
One can also view this partitioning in terms of merging the combinational logic
into regulator ranks. Figure 5.5 shows the example combinational expression with
the 2 of 2 ranks of logic turned into registration stages. The remaining ranks of
threshold 1 operators can be merged into the regulator ranks.
The expression of Figure 5.6a can be merged into the expression of Figure 5.6b.
If the inputs B, C, and D are mutually exclusive, which they are in this case because
they are values of a minterm variable, then the inputs of the threshold 1 operator can
be merged into the operator shown in Figure 5.6c.
The resulting expression of Figure 5.7 has fewer cycles than Figure 5.4 with more
combinational logic integrated into each spanning completeness path. The version of
Figure 5.7, with fewer operators, may have fewer transistors and the version of
Figure 5.4, with simpler faster operators, may have higher throughput.
The reader should notice that in the expressions of both Figure 5.4 and Figure 5.7
there is not a single operator performing solely a data path combinational function.
3
2
0
1
0
1
0
1
0
1
0
1
3
3
3
2
3
3
3
2
2
2
2
2
2
2
2
3
3
3
3
2
2
2
2
2
2
3
2
3
3
3
2
3
3
2
2
2
2
2
Figure 5.4
Example with all logic stages converted to registration stages.
Figure 5.5
Example with 2 of 2 logic stages converted to registration stages.
5.1 PARTITIONING COMBINATIONAL EXPRESSIONS
97

In both instances the entire combinational expression has been merged into spanning
completeness paths of registration stages. The expression of flow control and the
expression of data path combinational functionality are fully merged.
It may not always make sense to integrate combinational logic and control this
thoroughly. For instance, the full-adder expression of Figure 5.8a has many paths
bypassing the first rank of logic and turning that rank of logic into a spanning com-
pleteness path is rather expensive in terms operators and in terms of the completion
detection. The pipelined version of Figure 5.8b may not perform any better in any
sense than its nonpipelined version of Figure 5.8a. Also the merging of the flow
control and combinational logic expressions may require complex operators such
as the 5 input threshold 4 operators in Figure 5.8b and the 3 of 5 operators of
Figure 5.7 that may not be available in the libraries. It might be very useful to
extend the library to include all four input operators extended by one necessary
input to accommodate merging acknowledges.
5.1.2
Variable Partitioning the Combinational Expression
A combinational expression may be partitionable into even smaller cycles. Each
stage of variable generation in the combinational expression can be turned into a
registration stage. Figure 5.9 shows the expression of Figure 5.4 further parti-
tioned at the level of individual variables. The partitioning may be guided by the
acknowledge rules of cycle construction. Every source registration stage must be
B
C
D
2
C
D
B
2
C
D
B
4
1
Figure 5.6
Merged operators.
3
3
3
3
3
3
3
3
3
3
3
3
2
2
2
2
2
2
2
2
2
2
3
3
3
S1
S0
C1
C0
C1
C0
A1
A0
2
