1
0
1
2
2
1
0
1
2
2
1
0
1
0
1
0
1
0
1
2
2
1
2
2
1
2
2
1
2
2
1
2
2
2
destination A
registration
stage
destination B
registration
stage
A0
I0 I0
I0
I1 I1
I1
I2 I2
I2
I3 I3
I3
A1
A2
A3
0
1
2
3
Figure 5.19
2D pipelined fan-out expression.
5.5 2D PIPELINED OPERATIONS
109

1
source
registration
stage
3
3
1
3
3
1
I(1)
0
1
I(1)
0
1
B(1)
0
1
A(1)
0
1
0
1
2
2
1
I(1)
0
1
2
2
1
2
destination A
registration
stage
destination B
registration
stage
1
source
registration
stage
3
3
1
I(1)
0
1
A(1)
0
1
0
1
2
2
I(1)
0
1
destination A
registration
stage
1
Sel A Sel B
3
3
1
I(1)
0
1
A(1)
0
1
2
2
2
destination A
registration
stage
a. One slice of data path
Figure 5.20
Component structures of the 2D fan-in structure.

and fan-in steering structures via a control variable wavefront. In 2D pipelined
control the control variable wavefront is pipelined across the data path from
the leading variable to the trailing variable. Figure 5.18 shows a data path with
the cycles of the gray control variable pipeline entering the data path at the LSV
and piping across the data path to the MSV.
2D Pipelined Fan-out Steering. In the fan-out steering expression, a data path
wavefront and a control variable wavefront interact to steer the data path wavefront
from a source pipeline to one of several destination pipelines (see Section 3.3.2 of
Chapter 3). To implement 2D pipelining, the control variable is pipelined across the
variables of the data path steering each data path variable in turn. If the data path
pipelines from LSV to MSV, the control variable will interact, first with the LSV
variable of the data path and then pipe across the data path. It will successively inter-
act with the data path variables until the MSV variable is steered, whereupon the
control variable is consumed.
A 2D pipelined 1 to 2 fan-out structure is shown in Figure 5.19. At each variable
of the data path the control variable enables the destination registration stage for that
variable and then flows on to the next variable.
1
1
1
3
3
1
3
3
1
0
1
3
3
1
3
3
1
0
1
3
3
1
3
3
1
0
1
3
3
1
3
3
1
0
1
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
2
2
1
2
2
1
2
2
1
2
2
1
2
2
2
destination
registration
stage
2
2
1
2
2
1
2
2
1
2
2
1
source B
registration
stage
source A
registration
stage
