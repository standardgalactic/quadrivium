The slower Read operations will not slow down the faster output data path.
6.4 THE REGISTER FILE
123

1
1
1
W/R
S
1
S
P
C
I
O
W/R
S
1
S
P
C
I
O
W/R
S
1
S
P
C
I
O
Data path
Control path
Acknowledge path
&
&
&
Figure 6.10
Register file with distributed, concurrent control.

Again, if there are consecutive Reads from the same register, the whole structure
waits on the wavefronts from the Reads.
The Write and Read operations are strictly sequenced for each individual register
but are quite independent among different registers, so one register can be read while
another register is being written.
6.4.2
2D Pipelined Register File
The register file can be 2D pipelined just like any other data path function by pipe-
lining the control variables across the data path (see the discussion on two-
dimensional pipelining in Section 5.3 of Chapter 5). The pipelining can be MSV
first or LSV first. Write wavefronts will flow in diagonally, Read wavefronts will
flow out diagonally, and if a Read immediately follows a Write, a wavefront can
flow diagonally right through the register file.
6.5
DELAY PIPELINE MEMORY
A wavefront may be delayed N wavefronts in relation to itself through a parallel
pipeline in which N wavefronts were initialized. It will then continually store N
wavefronts. Figure 6.11 shows such a delay structure. The wavefront from regis-
tration stage I goes over the upper data path to registration stage D1 and over the
lower data path into the B input of the combinational expression. The A input, pre-
sented from the upper data path, is a delayed wavefront. For every wavefront that
flows through registration stage I and over the lower pipeline through the combina-
tional expression, one wavefront will enter the upper pipeline, and one wavefront
will leave the upper pipeline. The wavefronts in the upper pipeline will always be
delayed by the number of wavefronts that were initialized in the upper pipeline.
6.6
DELAY TOWER
A pipeline delay can be expensive in terms of switching cost. Every wavefront flows
through every cycle in the pipeline. For large delays the delay tower of Figure 6.12
with a fan-out–fan-in structure can be much more efficient. Each data path will store
2
comb
exp
I
D
1
A
B
Data path
Acknowledge path
Figure 6.11
Pipeline delay line.
6.6 DELAY TOWER
125

one wavefront and each wavefront only propagates through one data path. When the
data path is selected for a Write, the wavefront flows into a pipeline and then waits to
be selected for a Read to flow out of the pipeline.
The value of the control variable rotates Writes and Reads through the data paths.
The control values skew the Writes and Reads such that each Write is one path
behind the Read in the rotation of paths. The result is that the structure is storing
two wavefronts and the Read output wavefront is always two ahead of the Write
input wavefront. The rotation sequence is Read A–Write B, Read C–Write A,
Read B–Write C. The structure must be initialized with a DATA wavefront in pipe-
line A and a DATA wavefront in pipeline C.
6.7
FIFO TOWER
While a logically determined pipeline is inherently a first-in–first-out memory
structure (FIFO). It can, again, be more efficient in terms of switching to use the
tower structure. In the FIFO tower of Figure 6.13 the Read and Write operations
are controlled by independent sequencers. The Reads and Writes free run in relation
to each other. When the FIFO is empty, the next Read will wait on a DATA wave-
front to arrive. When the FIFO is full, the next Write will wait on a bubble to arrive.
The structure does not need to be initialized with wavefronts. The two sequencers
should begin, enabling the same pipeline to Write and Read.
6.8
STACK TOWER
See the discussion on stack controller in Section 7.1.4 of Chapter 7.
C
B
A
1
I
1
2
1
value
sequencer
comb
exp
2
Data path
Control path
Acknowledge path
Figure 6.12
Delay tower structure.
126
MEMORY ELEMENTS

6.9
WRAPPER FOR STANDARD MEMORY MODULES
Figure 6.14 shows a wrapper that allows the use of a standard binary memory in a
logically determined system. The wrapper presents a boundary of logically deter-
mined interaction protocol while accommodating the timing issues related to the
data format conversions and the behavior of the memory itself inside the boundary.
6.9.1
The Write Operation
A Write operation specified by a Write value of the control variable waits until there
is a complete data wavefront and a complete address wavefront. A Write command
is then presented to the memory and a delay is exercised. After the delay all three
input registration stages are acknowledged indicating the Write operation is
complete. The NULL wavefronts remove the Write command and acknowledge
I
W
R
memory
B
to
MP
A
3
2
&
P
1
R W
delay
delay
Address
DATA
Write/Read
variable
DATA
MP
to
B
MP
to
B
Figure 6.14
Logically determined wrapper for standard binary memory.
C
B
A
1
I
1
1
sequencer
A
Data path
Control path
Acknowledge path
sequencer
B
O
Figure 6.13
Tower FIFO structure.
6.9 WRAPPER FOR STANDARD MEMORY MODULES
127

the input registration stages with a request for a DATA wavefront, resetting the
wrapper for another operation.
6.9.2
The Read Operation
A Read operation specified by a Read value of the control variable waits until there
is a complete address wavefront. A Read command is then presented to the memory,
and a delay is exercised. After the delay the produce registration stage is enabled,
and a DATA wavefront flows through the output register P. The acknowledge
from P and the completion of the delay acknowledge the input registration stages
with a request for NULL. The NULL wavefront then removes the Read command
and produces a NULL wavefronts through the produce stage that flows through
the P registration stage. The input registration stages are acknowledged with a
request for a DATA wavefront resetting the wrapper for another operation.
6.9.3
The Binary Conversions
The binary conversions, because they involve binary signals, cannot be logically
determined. They are Boolean functions, and their timing behavior must be con-
sidered in the delays associated with the memories. The conversion expressions
for both dual-path and four-path encodings are shown in Figure 6.15
6.9.4
2D Pipelined Memories
The wrapper and the memory can be 2D pipelined. The wrapper can be 2D pipelined
in either direction. The memory must be partitioned into independent slices, each
with full address decode for each slice, matching the granularity of the data path par-
titioning. This may or may not be feasible. The alternative is to provide triangular
buffers on the input and output data paths of the memory to convert between
diagonal wavefronts and vertical wavefronts.
0
1
2
3
B0
B1
Q0
0
1
2
3
Q0
B0
B1
B0
0
1
B0
0
1
Figure 6.15
Binary conversion expressions.
128
MEMORY ELEMENTS

6.10
EXERCISES
6.1. Design and simulate a 2D pipelined register file.
6.2. Design and simulate a wrapper and memory for a 2D pipelined memory.
6.3. When does it become more efficient to use a delay tower instead of a pipeline
delay?
6.4. Design and simulate a one-dimensional 5 sample FIR filter and IIR filter.
