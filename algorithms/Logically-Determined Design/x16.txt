add3/R
add5/W
add6/W
MI
MR
MR
MR
RFA
RFB
RFA
RFB
RG
RM
RM
MR
MR
MR
FR
FR
GR
1/W
2/W
3/W
1/R
2/R
4/W
2/R
3/R
5/W
5/R
6/W
5/R
6/R
f2
f3
g1
Fmod
Gmod
RFOsel
RFIsel
Radd/op
Madd/op
MFOsel
contents of each control pipeline/FIFO
Figure 3.32
The contents of each control pipeline/FIFO.
54
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

determined system with this added path will operate correctly, it will not operate
efficiently. While this has usefully served as a simple and familiar example of a logi-
cally determined system, the approaches to system architecture that have been so
effective for sequential state-based architectures are not so effective for logically
determined system design.
3.5
INITIALIZATION
A logically determined system must begin activity in a unambiguously defined logi-
cal state. This typically does not occur with power up of a system, so there must be
an explicit initialization operation. Every operator and every signal in the system
must be set to a stable logic state prior to beginning activity. The initialization oper-
ation is not part of the logic of the system, and it is not logically determined. An initi-
alization signal must force the output of a sufficient number of operators to establish
the initial state of the system, and this signal must be held long enough for the initial
system state to stabilize. Once this is accomplished the initialization signal can be
released, and the system can begin behaving according to its logical relationships.
3.5.1
Initializing the System
One obvious strategy is to initialize every operator in the system. A more efficient
approach is to initialize the shared paths of the registration stages to NULL. Since
all combinational expressions respond to the universal NULL function, the NULL
wavefronts will propagate through the combinational expressions, initializing
them to NULL. The combinational expression then need not be explicitly initialized.
As shown in Figure 3.33, the data path is set to NULL, the combinational
expressions propagate to NULL, and the acknowledge paths all request DATA.
When the init signal is released, the expression is ready to receive data wavefronts.
3
1
0
S
0
1
A
2
2
3
2N
1
1
1
CI
2
1
1
0
CO
1
B
0
1
0
1
2N
2N
2N
2N
2N
2N
2N
2N
2N
init
Figure 3.33
Registration stage initialization.
3.5 INITIALIZATION
55

A more efficient initialization approach is to initialize the acknowledge paths
shown in Figure 3.34. If the data path is initialized to NULL at the beginning of a
pipeline and all acknowledge signals are set to request NULL, then the initialized
NULL wavefront will propagate through the entire pipeline. The init signal must
be held long enough for the NULL wavefront to completely propagate. When the
init signal is released, the acknowledge paths will immediately transition to request-
ing DATA, and the system will be ready to receive DATA wavefronts. Operators that
can be initialized are more complex than operators that cannot be initialized. In gen-
eral, initializing the acknowledge path is the most efficient approach to initialization.
If very fast initialization or reset is required, the data path approach is faster.
3.5.2
Initializing Data Wavefronts
Frequently a DATA wavefront must be initialized internal to the system. This initi-
alization can be accomplished with registration stage initialization as shown in
Figure 3.35. For the states of the associated acknowledge signals to be properly
initialized, the stages surrounding the stage initialized to DATA must be explicitly
initialized to NULL.
Initializing a DATA wavefront with acknowledge path initialization, shown in
Figure 3.36, is a little more involved but more efficient. The top path of the
middle stage is initialized to DATA. Because of the initialized DATA value, the
acknowledge signal from this stage will become NULL, so it does not need to be
Figure 3.34
Acknowledge path initialization.
1
2N
2N
init
1
2D
2N
1
2N
2N
Figure 3.35
Initializing a DATA wavefront.
56
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

initialized to NULL. The other acknowledge signals will attempt to request DATA
and must be initialized to NULL to allow the NULL wavefronts to propagate
through the data path. The stage just ahead of the initialized stage, which is pre-
sented with a DATA value, must be initialized to NULL. The acknowledge signal
from this stage that will acknowledge the stage being initialized is not initialized
to NULL but is allowed to request DATA. This is necessary to maintain the initia-
lized DATA value when the init signal is reset. If this acknowledge signal were initi-
alized to NULL, the NULL wavefront presented to the stage would immediately
overwrite the initialized DATA value. In the following stage only the paths that
receive a DATA value must be explicitly initialized to NULL.
3.6
TESTING
While it appears the behavior of logically determined system is very dynamic and
unobservable, there are many characteristics that make testing easy. The first is
that the behavior is logically determined. There is no ambiguity about timing
relationships causing glitches or intermittent failures. Because of the redundant
encoding of the data, a logically determined system will either halt by failing to
achieve a completeness relationship somewhere in the system or will exhibit an ille-
gal code. If a system halts, it is not a difficult problem to trace the source of the halt.
Illegal data codes (more than 1 DATA value per variable) can be easily checked
during operation.
The logically determined behavior of an implemented system is identical to the
logically determined behavior of its software simulation. This provides a powerful
tool for testing hypotheses about behavior, for verifying a diagnosis, and for analyz-
ing performance.
While a logically determined system in operation is very dynamic, it can be easily
placed in static state conditions for testing. Upon enabling or disabling selected
output acknowledge signals and then entering selected wavefronts into the
system, the wavefronts will back up in the system creating stable static states that
can then be queried.
As a system is receiving its initial flow of wavefronts before it settles to a stable
flow behavior, internal cycles with different periods influence the output port and the
1
2
2
init
1
2D
2N
1
2N
2
1N
1N
Figure 3.36
DATA wavefront initialization with acknowledge path initialization.
3.6 TESTING
57

input ports, creating a startup signature of wavefront periods. The same thing occurs
when the system is emptying of wavefronts. These wavefronts period signatures can
be used in testing and in gaining limited information about the behavior of cycles
internal to the system.
There are many advantages in terms of lack of ambiguity of behavior, controll-
ability of behavior, and reproducibility of behavior that make logically determined
systems easy to test and debug. Current testing systems designed to operate with
clocked systems can even be conveniently used [51].
3.7
SUMMARY
A complex digital system is composed as a structure of pipelines. Pipelines are com-
posed of coupled cycles. Cycles enliven the system by autonomously striving to
oscillate, producing wavefronts that spontaneously flow through the pipelines. All
of this is expressed entirely in terms of 2NCL. No other form of expression is
needed. A digital system is completely expressed and its behavior completely deter-
mined solely in terms of logical relationships.
3.8
EXERCISES
3.1. In general, a cycle can have an odd number of inversions anywhere in the path
of the cycle. Discuss why it is best to ignore this generality and to limit the
notion of a cycle to a single inversion in the acknowledge path.
3.2. Are there other primitive logical expressions that, like the ring oscillator, are
spontaneously active and that cannot be characterized as a composition of ring
oscillators?
3.3. Define a language of cycle composition.
3.4. Define the procedure to analyze orphan paths and completeness conformance
for expressions in NCL.
3.5. Define a procedure to analyze cycle path integrity for an expression in NCL.
3.6. Define the procedure to automatically extract the collapsed data path model
from a complete data path expression in NCL.
3.7. Define a procedure for generating a cycle composition expression from a beha-
vioral expression.
58
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

&CHAPTER 4
2NCL Combinational Expression
A logically determined 2NCL combinational expression, in addition to implementing
the combinational function, implements a shared completeness path that synchronizes
two or more cycles. There are three issues associated with creating logically deter-
mined combinational expressions in 2NCL. The first is the specification of the func-
tion itself. The second is the fulfillment of the completeness criterion. If the
completeness criterion is not fulfilled, the expression is not logically determined
and does not implement a shared completeness path. The third is with isolating the
orphan paths. If orphan paths are not isolated, it cannot be said that an expression
is, for all practical purposes, logically determined. Long orphan paths can create
critical timing issues and require explicit timing analysis to verify the correct behavior
