289
CONTENTS
xiii

&PREFACE
Complexity is a primary problem of contemporary digital system design. While
manufacturing productivity is growing at 60% a year, design productivity is growing
at 25% a year [41]. The industry is mobilizing with more complex tools and more
complexly integrated tools. The problem of complexity is being conquered with
complexity.
The possibility has not been considered that the practical complexity being
encountered might be considerably greater than it needs to be. Where the accepted
conceptual foundations are inadequate to the task, and have unnecessarily com-
pounded the inherent complexity of a system, the complexity of practice might be
significantly diminished with a slightly different conceptual orientation.
As this book shows, a Boolean logic expression requires a carefully coordinated
supplementary expression of a critical time relationship. This extra expression of
time and its coordination complicates the expression of a digital system far
beyond its intrinsic logical complexity. If there were a logic sufficiently expressive
to not require supplementary expression, it would be possible to simply and straight-
forwardly characterize a digital system and its behavior purely in terms of logical
relationships, a logically determined system.
This book derives such a sufficiently expressive logic, NULL Convention
LogicTM, and presents the methodologies of designing logically determined sys-
tems. The book is an introduction to logically determined electronic system
design for the interested scientist, engineer, or student. It presents conceptual foun-
dations as well as basic system structures and practical methodologies of a logically
determined electronic system design.
Chapter 1 explains how the accepted conceptual foundations of digital system
design compound the inherent complexity of a system and presents a conceptual
foundation to avoid this compounding of complexity. The practical embodiment
of this conceptual foundation is developed in Chapters 2 through 4 in the form of
2 value NULL Convention Logic. Chapters 5 through 9 present the basic structures
of a logically determined system design. Chapters 10 through 14 present the meth-
odologies of understanding and managing the behavior of a logically determined
system which is different from the familiar behavior of a clocked system.
A logically determined system exhibits what is referred to as asynchronous beha-
vior. Although NCL encompasses many elements of traditional asynchronous
design, this book is not about asynchronous design in its traditional context.
The familiar elements are assembled here in a new context of a coherent and
xv

consistent logic. The interested reader can find the field of asynchronous design very
ably presented in several contemporary texts.
For more information on this book please visit the following website:
www.theseusresearch.com.
ACKNOWLEDGMENTS
Although NULL Convention Logic (NCL) is entirely my own intellectual initiative,
I have accepted significant help in its development.
The concepts presented here were developed over many years with contributions
from many people. Scott Brandt contributed to the discovery and conceptual devel-
opment of NULL Convention Logic. Ken Wagner provided the business frame of
mind as a partner, first in Theseus Research and then as a cofounder of Theseus
Logic, Inc. in 1996. Theseus Logic is currently commercializing NULL Convention
Logic. Over 20 chips have been successfully fabricated, and a commercially avail-
able tool set and macro library is available. Funding has come from private invest-
ment and from government research contracts with Ballistic Missile Defense
Organization (BMDO), Defense Advanced Research Projects Agency (DARPA),
National Security Agency (NSA), and the United States Army and Air Force.
NCL is the property of Theseus Logic Inc. and a license must be obtained from
Theseus logic for any commercial use of NCL.
Working with the engineers of Theseus Logic has provided me with a practical
grounding and a deeper understanding of the technology. More specifically, Ryan
Jorgenson provided the Excel Spreadsheet simulation of pipeline behavior used in
Chapters 10 and 11, Mike Hagedorn invented the dual rail MUTEX of Chapter 8,
and Steve Masteller developed the interweaved control pipelining of Chapter 8.
Michiel Ligthart, Ross Smith, and Oriol Roig formulated the first design method-
ology for NCL and produced the first commercially available tool set. Alexander
Taubin and Alex Kondratyev joined Theseus Logic and contributed their deeply
rooted academic background and expertise in asynchronous design to the development
of the first design methodology, circuit techniques, 2D pipelining, and much more.
David Duncan absorbed the literature of the 1960s and 1970s on threshold logic
design to understand the threshold nature of 2NCL. He defined the library of
gates and several optimization techniques. He is primarily responsible for the
content of Chapter 4. He also investigated the literature on pipeline behavior and
contributed to Chapters 10 and 11.
Jerry Sobelman, Larry Kinney, and Keshab Parhi of the University of Minnesota
brought early insights to the development of the technology. Jerry Sobelman formu-
lated the gate implementations and with the assistance of Jason Hinze designed the
early experimental test chips. Jordi Cortadella of the Universitat Polite`cnica de Cat-
alunya contributed the synthesis experiment referred to in Section 4.7.2. Steve
Furber of University of Manchester and Jens Sparso of the Technical University
of Denmark provided valuable suggestions along the way.
Writing the book was supported by Theseus Logic.
xvi
PREFACE

&CHAPTER 1
Trusting Logic
Boolean logic is a mathematical symbol system. There is a population of symbols
organized into a state space, a set of primitive function mappings, a logic expression
specifying a progression of primitive function mappings, and a set of rules of beha-
vior to coordinate the flow of symbols from the state space through the progression
of function mappings to resolve the logic expression. This passive symbol system is
enlivened by an active agent that can manipulate the symbols in accordance with the
rules, traditionally a mathematician with a pencil.
When a logic expression such as Figure 1.1 is enlivened by a mathematician, the
logic expression and the mathematician form a complete expression that properly
resolves. The mathematician, understanding the rules of behavior, coordinates the
behavior of the symbolic expression with her pencil. She animates the symbols
moving them from function to function, instantiating functions in the proper order
when their input symbols are available. This coordination behavior is embodied
in the mathematicianâ€™s understanding of the rules of interpretation and is not explicit
in the logic expression itself.
A function mapping simply specifies a mapping from input symbols to output
symbols. Nothing is expressed about the presentation of symbols or about instantia-
tion of the function. A logical expression specifies the dependency relationships
among the input and output symbols of functions but expresses nothing about
coordination behavior among the functions. On its own expressional merits, without
the mathematician, a Boolean logic expression is an incomplete expression that
cannot be trusted.
1.1
MATHEMATICIANLESS ENLIVENMENT OF LOGIC
EXPRESSION
How the missing expressivity of the absent mathematician is restored to form a suf-
ficiently complete expression is the crux of the matter. One can create a machine to
emulate the mathematician. One can supplement the Boolean logic expression with
1
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

some other form of expression. Or one can define a logic that is sufficiently expres-
sive in its own terms to fully characterize reliable behavior.
1.2
EMULATING THE MATHEMATICIAN
One might suggest that the mathematician can be replaced by building the rules of
coordination into an interpreting machine to properly resolve the logic expression.
The logic expression remains a passive symbolic expression that is enlivened by the
activity of the interpreter. This is a viable approach for all levels of abstraction
except the most primitive. There must be an expression of a most primitive interpreter
that cannot itself be interpreted. The logical expression of this last interpreter must
behave spontaneously and autonomously on its own merits. The missing expressivity
of the absent mathematician cannot ultimately be restored with an interpreting machine.
1.3
SUPPLEMENTING THE EXPRESSIVITY OF BOOLEAN LOGIC
Since the expression of the symbols, the function mappings, and the dependency
relationships among functions express no boundaries of instantiation, mapping the
logic expression to continuously acting spontaneous behaviors is a valid enliven-
ment of the symbolic expression. The functions can be represented such that
they spontaneously and continuously transform symbols that spontaneously and
continuously flow along the dependency relationships among functions. While
these continuous behaviors faithfully enliven the logic expression itself, they do
not encompass the coordinating expressivity of the missing mathematician.
1.3.1
The Expressional Insufficiency of Boolean Logic
When a new input is presented to a continuously behaving Boolean combinational
expression, a stable wavefront of correct result transitions flows from the input through
the network of logic functions to the output. Since Boolean functions are continuously
responsive to freely flowing symbols and since some functions and signal paths are
Figure 1.1
A Boolean logic expression.
2
TRUSTING LOGIC

faster than others, a chaos of invalid and indeterminate result transitions may rush
ahead of the stable wavefront of valid transitions. Such chaotic behavior causes the
output of the expression to assert a large number of invalid results before the stable
wavefront of correct results reaches the output and the expression as a whole stabilizes
to the correct resolution of the presented input. A Boolean logic combinational
expression cannot, on its own terms, avoid this indeterminate behavior.
But even if indeterminate transitions could be avoided, there is still no means to
determine from the behavior of the expression itself when the output of the
expression has stabilized to the correct result. If the current input state happens to
be identical to the previous input state, the expression exhibits no transition behavior
at all, correct or incorrect. Being unable to express its own boundaries of behavior a
Boolean combinational expression cannot coordinate its own successive instantia-
tions nor can it coordinate instantiations with other combinational expressions.
These coordination behaviors must be expressed in some other way.
1.3.2
Supplementing the Logical Expression
A continuously behaving Boolean combinational expression can be relied on to
eventually settle to a stable correct result of a stably presented input. After presen-
tation of a new instance of input to a Boolean expression, it is necessary and suffi-
cient to wait an appropriate time interval, characterized by the slowest propagation
path in the expression, to ensure that the wavefront of stable results has propagated
through the expression and the output of the expression has stabilized to the correct
resolution of the presented input data. During the time interval all the erroneous tran-
sitions due to the racing wavefronts can be ignored, and at the end of the interval the
correct result can be sampled. Thus the boundaries of instantiation and resolution
can be expressed by supplementing the logic expression with an expression of a
time interval. This time interval, however, is a nonlogical expression that must be
associated with and coordinated with every Boolean combinational logic expression
and that is specific to each implementation of a logic expression.
1.3.3
Coordinating Combinational Expressions
A combination logic expression will receive a succession of inputs to resolve and
combinational logic expressions will pass results among themselves to resolve.
For a given logic expression, each instance of resolution must be completed and
stable before it can be passed on, and the result must be passed on before the
given logic expression can accept a new input to resolve. These boundaries of
behavior are expressed by the time interval associated with each combinational
expression, so the coordination of behavior among combinational expressions
must be expressed in terms of these associated time intervals. This coordination is
accomplished with a state-holding element between each combinational logic
expression that ignores transition behavior during an interval, samples the output
of each logic expression at the end of each interval, and stably presents the sampled
output as input to a successor combinational expression.
1.3
SUPPLEMENTING THE EXPRESSIVITY OF BOOLEAN LOGIC
3

A system consists of multiple combinational expressions, each with an associated
time interval and coordinated among themselves in terms of these time intervals.
This coordination is most conveniently expressed when all the time intervals are
the same duration and are in phase. All logic expressions present valid output and
become ready for new input simultaneously, in phase with a common interval
expression beating the cadence of successive instantiations.
While the coordinating expressivity of the mathematician has not been restored at
the function level, it is sufficiently restored at the level of the time interval to enable
practical application.
1.3.4
The Complexity Burden of the Time Interval
Supplementing Boolean logic with an expression of time compounds the complexity
of the expression. The structure of the logical expression must be specified. The
structure of the time expression must be specified. The delay behavior of the
logic in a particular implementation must be determined. The behavior of the
time expression in the particular implementation must be determined. The logic
expression and the time expression must be integrated. The behavior of the com-
bined expressions must be verified.
There can be no first-order confidence in the behavior of the combined
expression. Confidence can only be gained in terms of exhaustive observation of
its behavior. At the granularity of the time interval the combined expression gener-
ates a sequence of stable states that can be sampled and compared to a theoretically
derived enumeration of states to verify correct behavior.
1.3.5
Forms of Supplementation Other Than the Time Interval
There have been ongoing attempts to provide supplemental forms of expression for
continuously acting Boolean logic expressions other than the time interval called
â€˜asynchronous design research.â€™ The expressional insufficiency of Boolean logic
was recognized by Muller in 1962 [35] who introduced two supplementary forms
of expression.
The first supplement, called a C-element, could enhance Boolean expressions to
avoid indeterminate output. A C-element is a state-holding operator that transitions
its output to 1 only when both inputs are 1 and transitions its output to 0 only when
both inputs are 0, and for 01 and 10 inputs does not transition its output but holds its
current state. The C-element has to be an indivisible primitive operator in its own
right. It cannot be implemented in terms of Boolean logic functions. But the
C-element, added to Boolean logic, creates a heterogeneous logic that is difficult
to formalize, analyze, and synthesize and that still has subtle timing issues [31,1,8].
The second supplement was dual-rail encoding of binary data, in which binary
symbols are represented with two wires: 01 represents FALSE and 10 represents
TRUE; 00 represents the absence of data and 11 is illegal. Dual-rail encoding can
express the absence of data and the presence of data, providing a logical expression
of the boundaries of successive data presentations.
4
TRUSTING LOGIC

The C-element and dual-rail encoding remain standard elements of asynchronous
design. The general approach has been to compose Boolean logic expressions
