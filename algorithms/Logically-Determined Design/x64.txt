cycle 23
cycle 24
Figure 12.16
Twenty-two wavefronts and 2 bubbles flowing through a 24 cycle ring.
12.4 RING SIGNAL BEHAVIOR
219

transient when the ring behavior has stabilized. Notice that in delay-limited behavior
with 8 to 14 wavefronts the signal behavior of the cycles and the throughput of the
ring are identical and constant. Notice also that in wavefront-limited behavior every
cycle waits in the same state, whereas in bubble-limited behavior alternate cycles
wait in alternating states.
0 bubbles flowing through
cycle 24 allowing 0
wavefronts to progress
Pipeline now deadlocked
cycle 1
cycle 2
cycle 3
cycle 4
cycle 5
cycle 6
cycle 7
cycle 8
cycle 9
cycle 10
cycle 11
cycle 12
cycle 13
cycle 14
cycle 15
cycle 16
cycle 17
cycle 18
cycle 19
cycle 20
cycle 21
cycle 22
cycle 23
cycle 24
Figure 12.17
Twenty-four wavefronts not flowing through a 24 cycle ring.
220
RING BEHAVIOR

&CHAPTER 13
Interacting Pipeline Structures
A logically determined system is a structure of pipelines. Once the logical behavior
is determined, the next question is the performance of the system in terms of
through-put. How do pipelines interact to affect throughput, and how can pipeline
structures be designed to achieve optimal throughput? Given the dynamic behavior
of the cycles and pipelines, one might think that an intuitive understanding of the
behavior of and design of a multi-pipeline structure would be impossible. The
only approach to the reliable design of multi-pipeline structures would seem to be
through complex mathematical network and queueing theories supplemented with
detailed simulation studies.
It is possible, however, to characterize the behavior of a multi-pipeline structure
solely in terms of static relationships. These static relationships are easily under-
standable and are sufficient to support precise synthesis of pipeline structures with
optimal performance. The principles of the static synthesis of multiple-pipeline
structures will be presented with several examples. This chapter will cover the
basics of two-pipeline structures. The next chapter will show how to construct com-
plex pipeline structures in terms of two-pipeline structures.
A two-pipeline structure consists of two pipelines combined by a fan-out struc-
ture and by a fan-in structure through a combinational expression as shown in
Figure 13.1.
There are two points of synchronization. Where the pipelines fan-out, they are
synchronized through the acknowledge paths (bubbles) of the two fan-out cycles.
1
comb
exp
A
B
Figure 13.1
Base model of two-pipeline structure.
221
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

This is shown as operator A in Figure 13.1. Where the pipelines fan-in, they are
synchronized through the data path by a combinational expression B in Figure 13.1.
The combined pipelines form a closed structure bounded by the points of synchro-
nization. The behavior of the closed structure is limited by the structure itself, simi-
larly to the way that the behavior of a ring is limited by its closed structure.
13.1
PRELIMINARIES
For clarity of presentation, collapsed data path models will be used for the examples.
The behaviors exhibited and the synthesis techniques discussed are fully applicable
to pipeline structures with full-width data paths.
The input of each two pipeline structure is simulated with an auto-produce cycle
and the output is simulated with an auto-consume cycle. The terminology is in
relation to wavefronts. The auto-produce cycle will produce a wavefront and con-
sume a bubble every time a bubble flows into the cycle. The auto-consume cycle
will consume a wavefront and produce a bubble every time a wavefront flows
into the cycle. The auto cycles shown in Figure 13.2 will always cycle faster than
any other cycle in a pipeline structure, will not cast shadows into the structure,
and so will not affect the inherent throughput behavior of the structure. The auto
cycles produce a steady stream of wavefronts and bubbles on demand allowing
the isolated analysis of the inherent throughput behavior of a pipeline structure.
The unit of propagation delay for the examples is a tic. Each operator has a propa-
gation delay of 3 tics for both DATA and NULL. An inverter has a propagation
delay of 1 tic for both DATA and NULL. Specific delays are shown as circles
with the value in tics of the delay in the circle. Wires have no delay. What will
be important is propagation delays along specific paths. It is simple to include
wire delays on these paths for real world structures, but for purposes of illustration
it is simpler to leave them out. The characterizations of these delays do not always
need to be either precise or absolute. In many cases there will be a range of structural
configurations that will deliver an optimal throughput for a range of delay par-
ameters. The delays can also be conveniently relative. For instance, the delays in
tics mentioned above can be interpreted to mean that the delay of an operator is
three times longer than the delay of an inverter.
2N
2N
auto-
produce
cycle
auto-
consume
cycle
Figure 13.2
Auto cycles for simulating isolated pipeline structures.
222
INTERACTING PIPELINE STRUCTURES

13.2
EXAMPLE 1: THE BASICS OF A
TWO-PIPELINE STRUCTURE
The initial discussion will focus on a simple example of a concurrent-path function.
This might be a function something like F ¼ (2y 2 1)2 þ 3y. Each term is
computed in a concurrent path branching from the y input and then combined
through a sum to the final result. The computations will be characterized abstractly
in a collapsed data path model with delay elements representing function
components. The final add is represented by a 2 of 2 operator. The example will
assume a lower data path with one computation component and an upper data
path with three computation components. The preliminary structure is shown in
Figure 13.3 as a pipeline structure with three cycles; a single computation cycle
encompassing the large combinational expression, an auto-produce cycle, and an
auto-consume cycle. The throughput of the structure is determined by the cycle
period of the computation cycle. This cycle period is determined by the upper
data path, which takes longer than the lower data path. The cycle period is 22 tics
and the throughput of the structure is one wavefront every 22 tics.
A pipeline structure is created by pipelining the upper and lower data paths with a
cycle for each function delay. This results in a pipeline structure with an upper pipe-
line of five cycles and a lower pipeline of three cycles as shown in Figure 13.4. The
fan-out bubble synchronization is operator A, and the fan-in wavefront synchroniza-
tion is operator B.
The pipelining has not changed the functionality of the expression but what now
is the throughput of the structure? Can the throughput be enhanced by adding buffer
cycles to one of the pipelines. If so which pipeline, how many cycles, and where in
the pipeline should they be placed?
13.2.1
Basics of Flow
Each population of wavefronts and bubbles in the structure flows out of the structure,
and each population is renewed within the structure by wavefronts flowing in
100
110
120
130
140
150
160
170
180
190
200
210
220
230
240
250
260
270
280
290
300
310
320
330
Figure 13.3
Example function mapped into two data paths in a single cycle.
2N
2
2N
auto-
consume
cycle
auto-
produce
cycle
4
4
4
4
x2
-1
sq
+
x3
13.2 EXAMPLE 1: THE BASICS OF A TWO-PIPELINE STRUCTURE
223

through the input and by bubbles flowing in through the output. Bubbles and wave-
fronts flow out of the structure through the synchronization points. When there is a
bubble from each pipeline presented to operator A, a bubble will flow out of the
structure and a wavefront will flow into the structure and be copied to both pipelines.
When there is a wavefront from each pipeline presented to operator B, a wavefront
will flow out of the structure and a bubble will flow into the structure and be copied
to both pipelines. The quantity of bubbles and wavefronts in each pipeline will
always be a constant equal to the number of cycles in the pipeline.
The cycles of each pipeline of the example are initialized to bubbles. There are no
wavefronts initialized in the structure. After initialization, bubbles from each pipe-
line will synchronize and begin flowing out of the structure, allowing wavefronts to
flow into the structure. This flow will continue until the smallest population of
bubbles is depleted. In this example after the three bubbles of the lower pipeline
have synchronized with three bubbles of the upper pipeline and allowed three wave-
fronts into the structure, the lower pipeline has run out of it its initial supply of
bubbles. The fourth bubble of the lower pipeline that will synchronize with the
fourth bubble of the upper pipeline must be a new bubble that entered the structure
when a wavefront flowed out of the structure. At this point there may or may not be a
wait for the fourth bubble in the lower pipeline. The arrival of this fourth bubble
depends on the exit of the first bubble and on the structure itself.
As the first bubble flows out the input of the pipeline, it allows a first wavefront
into the pipeline that will propagate to the output of the structure and allow a fourth
bubble to flow into the structure. This bubble will be copied to the lower pipeline as
the fourth bubble of the lower pipeline and will be copied to the upper pipeline as the
sixth bubble of the upper pipeline. This fourth/sixth bubble, which is the first bubble
to enter the structure, is the renewal bubble for the first bubble that left the structure.
This fourth bubble in the lower pipeline will then flow to the input of the structure.
The critical question is whether this fourth bubble arrives at the input of the lower
pipeline in time to flow out as the fourth bubble of the structure with no wait at the
synchronization operator A or whether it arrives after the three bubbles have flowed
100
110
120
130
140
150
160
170
180
190
200
210
220
230
240
250
260
270
