2.3.4
Subvariable Expressivity
With 2NCL the mapping to a Boolean expression is no longer operator for operator. A
Boolean logic function is expressed as a combination of multiple 2NCL logic oper-
ators. While Boolean functions are dealing with inputs and outputs that are whole vari-
ables, 2NCL operators area dealing with inputs and outputs that are individual values
of variables. An operation on variables is built out of operations on values individu-
ally. For instance, the 2 of 2 operator in the OR expression of Figure 2.11 has, as input,
the 0 value path from each input variable but does not consider the 1 value path from
either variable. In this sense 2NCL might be called a subvariable logic.
2.3.5
Completeness at the Variable Level
Logically determined completeness relationships are defined in terms of variables.
The input and output boundaries of the 2NCL expressions of Figure 2.11 are vari-
ables. These expressions do not transition their output variables from NULL to
DATA until the input variables are completely DATA (one DATA value per vari-
able) and then do not transition their output variables to NULL until the input
variables are completely NULL. The variable boundaries of each expression are
logically determined completeness boundaries that express the completeness cri-
terion for the expression as a whole. These 2NCL expressions can be directly
substituted for Boolean functions in a Boolean combinational expression producing
a logically determined 2NCL combinational expression.
2.3.6
The 2NCL Orphan Path
Internal to each 2NCL expression, the continuity of the variable is not maintained as
each value path individually branches to many places. For each data wavefront
0
AND
1
0
1
0
1
2
3
0
OR
1
0
1
0
1
2
3
XOR
0
1
0
1
0
1
2
2
2
2
0
1
0
1
logically
determined
variable
boundary
Figure 2.11
2NCL expression mappings for Boolean functions.
22
A SUFFICIENTLY EXPRESSIVE LOGIC

through an expression there will be an effective path that is a logically determined
irredundant path from the input through the expression that generates the output.
When the output transitions to complete DATA, it implies that the input data set
is complete and that the transitions to DATA have propagated over the effective
path to the output. When the input transitions to NULL, the NULL values will
propagate over the effective path to the output. When the output becomes all
NULL, it means that the input is all NULL and that the effective path has transi-
tioned to NULL.
There will also be ineffective paths branching off this effective path that do not
contribute to the output and whose behavior therefore cannot be determined by the
output behavior. These ineffective paths will be called orphans because they have
lost all of their logical relations. Figure 2.12 shows the effective path and orphan
paths for all four data configurations of the XOR expression.
A slow orphan path is not a problem for an individual data wavefront because the
orphan paths do not contribute to the output, nor can they confuse the generation of
the output. The difficulty arises with the possibility of a slow orphan not propagating
NULL fast enough and getting a stale data value mixed up with a succeeding data
wavefront.
Upon completion of the data wavefront at the output, the NULL wavefront will
be requested and presented to the input of the expression while orphans may still be
transitioning to DATA. The NULL wavefront will arrive, and the output of the
expression transitioning to all NULL implies that the input and the entire effective
path has transitioned to NULL; it does not imply that the orphans have transitioned
to NULL. The output becomes completely NULL, and the next DATA wavefront is
requested. If all the orphan paths from the previous data wavefront have not transi-
tioned to NULL, the next data wavefront can interact with the slow orphan in a non-
logically determined way. Ambiguous resolution, hazards, glitches, and chaos can
ensue.
So the complete characterization of the behavior of a 2NCL expression must
include the timing relationship that all orphan paths must completely transition
before the succeeding wavefront arrives. In Figure 2.13 this orphan timing relation-
ships is illustrated in the context of the coordination structure shown in Figure 1.5. In
combinational expression Y the dark gray path is the orphan that must propagate
from A to B before the light gray paths propagate from A through their respective
2
2
2
2
XOR
0
1
0
1
0
1
2
2
2
2
XOR
0
1
0
1
0
1
2
2
2
2
XOR
0
1
0
1
0
1
2
2
2
2
XOR
0
1
0
1
0
1
NULL path
effective DATA path
ineffective Orphan path
Figure 2.12
Effective paths and orphan paths through the XOR equivalent expression.
2.3
DERIVING A 2 VALUE LOGIC
23

Domain Inversion
combinational
expression
detect
completeness
Domain Inversion
detect
completeness
A
B
X Y
W
Domain Inversion
combinational
expression
detect
completeness
Domain Inversion
combinational
expression
detect
completeness
Z
Orphan path from branch A
Cycle paths from branch A
expression
combinational
Figure 2.13
The orphan path-timing relationship.

combinational expressions, form completeness at the input of Y, and propagate to
B. While the timing relationship of the orphan path must be kept in mind, it is a non-
critical timing relationship that is easily managed.
Logical Isolation of Orphans. Orphan paths can easily be constrained to very
local isolation within the logic structure. They do not cross logically determined
variable completeness boundaries, and they can be isolated between these bound-
aries in any logical expression. If orphan paths crossed completeness boundaries,
the boundaries would not be logically determined. Figure 2.14 provides an example
of a 2NCL expression generated from a Boolean logic combinational expression by
direct operator substitution. Each Boolean function equivalent expression is logi-
cally determined at its boundaries, and these boundaries become internal to the
greater combinational expression. The effective path for A ¼ 0 and B ¼ 1 is
shown with the associated orphan paths. It can be seen that all orphan paths are
isolated between logically determined completeness boundaries of each Boolean
operator equivalent expression.
It is possible for an orphan path to include 2NCL operators and to be arbitrarily
long, but an orphan path can always be isolated to a local transmission path without
an operator by inserting a logically determined variable boundary after the portion of
the orphan path that includes operators and then subjecting the variable boundary to
output completion determination. The part of the path including the operator then
becomes an effective path that is logically determined by the output, thus shortening
the orphan path to a local transmission path that does not include an operator.
Figure 2.15a shows a 2NCL expression with an orphan path that includes an oper-
ator. The outputs of the two 2 of 3 operators form an internal variable boundary that
is not logically determined. Including the internal variable in the output completion
in conjunction with output variables that are logically determined makes the paths of
the orphan up to the point of branching to the output effective paths and hence makes
them logically determinable. The remaining path of the orphan becomes a much
reduced orphan path.
Logically determined boundary
Effective DATA path
Ineffective DATA path (orphan)
NULL value
0
AND
1
0
1
0
1
0
OR
1
0
1
0
1
0
AND
1
0
1
0
1
0
AND
1
0
1
0
1
S0
S1
C0
C1
