to state 3
to state 1
to state 1
to state 0
to state 2
to state 5
to state 6
Detect
0
1
2
3
4
5
6
0
0
1
0
1
1
1
1
1
0
1
0
0
Detect
0
b. Next state function map
a. State machine diagram
(1S0 + 1S1 + 1S3) + 1S6
0S0 + 0S5 + 0S6
0S1 + 0S2 + 0S4
1S2
0S3
1S4
1S5
(AB + AC + AD) + AB
AB + AC + AD
AB + AC + AD
AB
AB
AB
AB
17. AB + AC + AD
C
D
A
B
4
Specific equations
Generic equations
detect
no detect
1S6
everything else
10. AB + AC + AD + BC + BD + CD
C
D
A
B
2
B, C and D are ME
3. AB
A
B
2
Figure 4.25
Function map of combinational control function of a state machine.

in that the carryout variable can assert DATA with any two of the three inputs being
DATA, as shown in Figure 4.27a. But the SUM output variable does require all three
inputs to become DATA before it transitions to DATA fulfilling the completeness
criterion. The sum variable does not by itself indicate the completeness of propa-
gation. Completion of the sum variable together with completion of the carry vari-
able do fulfill the completeness of propagation as well as completeness of input.
Combining the two completions as shown in Figure 4.27b is sufficient to fulfill
the completeness criterion for the full-adder expression.
The completeness criterion can be fulfilled even if no single output variable indi-
cates the completion of the input variables. Take an expression with three input vari-
ables A, B, and C and two output variables X and Y. Assume that the complete
transition of X indicates the complete transition and propagation of A and B and
that the complete transition of Y indicates the complete transition and propagation
of B and C. The combination of the completeness of X and Y indicates the comple-
teness for A, B, and C.
4.10
GREATER COMBINATIONAL COMPOSITION
Combinational expressions that express completeness and orphan isolation and are
bounded by logically determined variables can be combined by connecting variables
into greater combinational expressions. The connected variables become internal
S0
S1
S2
S3
S4
S5
S6
NOT DETECT
DETECT
2
2
2
2
2
2
2
1
2
1
S0
1
S2
0
S3
1
S4
1
S5
S1
S3
0
S0
S5
S6
0
S1
S2
S4
1
S6
Figure 4.26
Combinational expression for the code detector state machine.
4.10 GREATER COMBINATIONAL COMPOSITION
85

logically determined variable boundaries of the greater expression, which will itself
express completeness and orphan isolation as a whole.
4.10.1
Composition of Combinational Expressions
Figure 4.28 shows a full-adder combinational expression composed of two half-
adder combinational expressions and an OR combinational expression. Each subex-
pression fulfills the completeness criterion and outputs a variable that becomes an
internal variable of the greater combinational expression forming internal complete-
ness boundaries in the greater expression.
Product partitioning (see Section 4.5) is essentially decomposing a greater com-
binational expression into completeness fulfilling subexpressions with logically
determined variable boundaries. These boundaries are then recomposed into the
greater combinational expression.
4.10.2
The 2NCL Ripple Carry Adder
Combinational expressions with an output variable that does not form a complete-
ness boundary may still be composable if the composition relationship itself leads
to the fulfillment of completion. Composing a ripple carry adder from full adders
provides an example. The full adders compose through the carry variable that by
DATA path
NULL path
Logically determined
completeness boundary
a. Assertion of carry without complete input
1
0
S
2
1
2
2
2
1
0
CO
1
0
1
B
A
0
1
CI
0
1
3
3
2
2
2
2
2
0
1
0
1
B
A
0
1
CI
0
1
3
3
Figure 4.27
Sufficient completeness of full adder.
86
2NCL COMBINATIONAL EXPRESSION

itself does not fulfill the completeness criterion and does not present a completeness
boundary. The completeness of each adder stage is expressed by its sum output,
which includes the carry from the previous stage. The completeness of all the
input of the ripple carry adder is established with the completeness of all the sum
variables. The completeness of the propagation of each carry variable, except the
last, is established by the sum variable of each following full adder, as shown in
Figure 4.29. S0 indicates the completeness of transition and propagation of Cl,
A0, and B0. S1 indicates the completeness of transition and propagation of A1
and B1 and carryout from the S0 adder stage. Each Sn indicates the completion
of transition and propagation of the Sn 2 1 carryout. The completion of propagation
of the last carryout is explicitly determined and combined with all the sum com-
pletions. While no single output indicates the completeness of all the inputs, the
combination of all the sum completions and the last carry indicates the completion
of transition and propagation of all the inputs for the whole ripple carry adder com-
binational expression.
4.11
DIRECTLY MAPPING BOOLEAN COMBINATIONAL
EXPRESSIONS
Boolean function expressions can be mapped directly into 2NCL combinational
expressions by simply substituting equivalent expressions. While it involves ineffi-
ciencies of expression and limits expressions to 2 value variables, this method is
attractive because it allows the utilization of standard design tools and method-
ologies and provides an easily accessible and immediate entry to logically deter-
mined system design.
4.11.1
Mapping 2 Variable Boolean Functions
The 2 NCL expressions mapping to 2 variable Boolean functions were introduced in
Section 2.3.3 of Chapter 2. They are derived from function maps in Figure 4.15 and
Figure 4.16 for the synthesis of the half adder, which is a Boolean exclusive OR for
2
3
2
2
2
2
2
2
2
2
Half adder
Half adder
OR
Completeness
