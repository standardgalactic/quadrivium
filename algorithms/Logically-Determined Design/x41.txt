6.10 EXERCISES
129

&CHAPTER 7
State Machines
In a logically determined system the state is expressed as spontaneously flowing
wavefronts. Wavefront flow can be constrained in a ring to express the localized
behavior of a state machine.
7.1
BASIC STATE MACHINE STRUCTURE
The basic structure of a logically determined state machine, illustrated in Figure 7.1,
is a ring coupled to a pipeline through a combinational expression. The ring main-
tains the current state. The pipeline presents input wavefronts and accepts output
wavefronts. The combinational expression receives the current state and the next
data input and asserts the next state and a data output.
The ring must be initialized with one DATA wavefront expressing the initial
state. If the ring is initialized to all NULL, there will be no current state wavefront
for the first DATA wavefront, and the structure will deadlock. The ring will always
contain exactly one DATA wavefront and one NULL wavefront.
2
Data
Input
Data
Output
New
State out
Current
State in
Combinational
expression
Figure 7.1
Basic state machine structure.
131
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

The combinational expression has a fan-in of two inputs and a fan-out of two, so
the acknowledge signals completing its cycle have a fan-in of two and a fan-out of
two. The completeness criterion of the combinational expression ensures that the
Nth state wavefront in the ring will interact with the Nth DATA wavefront propagat-
ing along the data path. The output of the combinational expression is the data wave-
front presented to the pipeline and the new state wavefront presented to the ring.
7.1.1
State Sequencer
The simplest state machine is a state sequencer, and it does not have a combinational
expression. There are no input data, just output data and the next state. The state
values are just shifted within the state variable to transition to the next state.
Figure 7.2 shows a 4 value state sequencer implemented as a 4 cycle ring with a
4 value variable. The ring presents its output to a pipeline and recirculates the
next state in the ring. A next state variable wavefront is delivered with each
acknowledge requesting data.
7.1.2
Monkey Get Banana
The monkey get banana machine is a state machine that controls a banana vending
machine for a monkey. The monkey has to push 4 buttons—A, B, C, D—in sequence
to get a banana. If she pushes any button out of sequence, the machine is reset and she
has to start with A again, Figure 7.3 shows the state diagram and the state function
map. The buttons are expressed as a 4 value variable, and the states of the machine
are expressed as a 4 value variable. The combinational expression can be read directly
off the function map. The combinational expression in this instance receives signals
from a cycle that intersects the outsides world. For the state machine to work, the
button signals must behave as proper wavefronts. For instance, two button cannot
send signals simultaneously, and there must be a NULL wavefront between each
1
1
1
1
ACK
S0
S1
S2
S3
2
2
2
2
2
2
2
2
2
2
2
2
3
3
3
3
Figure 7.2
Simple state sequencer.
132
STATE MACHINES

button signal. These conditions can be accomplished by conditioning the signals with
an arbiter. See the discussion on ‘the arbiter’ in Section 8.4.2 of Chapter 8.
The output is the delivery of a banana. There is no acknowledge from the
monkey. The machine just dumps a banana and goes to state 0.
7.1.3
Code Detector
The code detector is a state machine to detect the sequence 0010111 in a sequential
stream of binary variables. The combinational expression for the state machine was
1
1
1
S0
S0
S0
S0
S1
S2
S3
S0
S1
S2
S3
give banana
S1
S2
S3
S0
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
4
4
4
4
1
Figure 7.4
Monkey get banana state machine.
Next state function map
to state 0
to state 0
to state 0
to state 0
to state 0
to state 2
to state 1
to state 0
A
B
state 0
state 1
state 2
state 3
to state 0
to state 0
to state 0
to state 3
C
to state 0
to state 0
to state 0
to state 0
D
Give Banana
0
1
2
3
D
C
B
A
BCD
ACD
ABD
ABC
Give
Banana
A
C
B
D
A B C D
Figure 7.3
Monkey get banana state control.
7.1 BASIC STATE MACHINE STRUCTURE
133

Figure 7.5
Code detector state machine.

presented in Section 4.8 of Chapter 4. Here the combinational expression is inserted
in a 3 cycle ring in Figure 7.5 to form the state machine. The ring maintains the 7
value state variable. Initializing operators are shown to initialize a state wavefront
to state 0 in the ring. The initializing signal is not shown. The state variable is
Figure 7.6
Detector state machine with embedded combinational expression.
Figure 7.7
Code detector with a 1 value variable output.
7.1 BASIC STATE MACHINE STRUCTURE
135

combined with the binary input variable through the combinational expression to
determine the next state and a 2 value decision variable with the meanings
‘detect’ and ‘not detect’.
The state machine can be optimized by making the combinational expression a
registration stage of the ring as shown in Figure 7.6. Adding the acknowledge/
request to the combinational rank in this instance results in three 5 input operators
that may not be available in a library. This is an instance that arises frequently, and it
might be advantageous to define special 5 input operators that can receive the one
extra necessary signal, the acknowledge, to allow the optimization of combinational
expressions into registration stages.
Single-value Detect Variable. With a 2 value detect variable the destination of
the detect variable has to continually acknowledge the state machine for both
‘detects’ and ‘not detects’. It might be convenient if the detect wavefront is gener-
ated only when there is a ‘detect’. Consequently there is an acknowledge only when
a detect wavefront is generated. The state machine must be able to determine when
to expect an acknowledge and when to not expect an acknowledge. This is
determined by the 8 value variable generated by the combinational expression, so
the acknowledge completeness must be conditioned by this variable.
The strategy in this case is to fill in the acknowledges so that the state machine
always receives an acknowledge. The seven values of the output variable that do
p
u
s
h
p
u
s
h
p
u
s
h
p
u
s
h
to state 2
to state 3
to state 2
to state 0
to state 1
to state 0
