As long as the input acknowledge signal remains ‘not data’, a combinational
8
TRUSTING LOGIC

expression will stably maintain its ‘not data’ output symbols even if a ‘data’ wave-
front is presented on the data path.
When a combinational expression detects completeness on its output, it means
that a wavefront has been enabled through it by the acknowledge signal and that
it is stably maintaining the output wavefront. Upon output completeness it can
inform, via the acknowledge signal, each combinational expression whose output
provided input to it that they need no longer maintain their output and that they
can allow a new input wavefront to propagate. This relationship is illustrated in
Figure 1.5. Stably maintained wavefronts flow through the system passed from com-
binational expression to combinational expression fully coordinated in terms of
completeness relationships.
1.4.4
Mathematicianless Completeness of Expression
Symbols move from function to function, instantiating in the proper order as their
input symbols are available. Wavefronts flow from expression to expression and
instantiate in the proper order when their inputs are complete. This coordination
behavior is explicit in the logic itself. The expressivity of the absent mathematician
has been fully restored in the expressivity of the logic.
A logic expression can be complete and sufficient in itself. No supplementary
expression is required.
1.5
THE LOGICALLY DETERMINED SYSTEM
A logically determined system is a structure of logical relationships whose behavior
is completely and unambiguously determined by those logical relationships. Wave-
fronts spontaneously flow through combinational expressions fully coordinated by
logical relationships. One might try to imagine the flowing wavefronts in terms of
a single collective state, but this imagined collective state is subject to concurrent
transitions coordinated solely by logical relationships with no consideration for
any time relationships. The behavior of the collective state in relation to time is
Domain Inversion
combinational
expression
detect
completeness
Domain Inversion
combinational
expression
detect
completeness
Figure 1.5
Coordination among combinational expression in terms of completeness
relationships.
1.5
THE LOGICALLY DETERMINED SYSTEM
9

simply indeterminate. There is no way of sampling a stable configuration of the col-
lective state that at any chosen instant might be in transition. The familiar method-
ology of understanding, and acquiring confidence by enumerating and comparing
sequences of a collective state, is not applicable to a logically determined system.
1.6
TRUSTING THE LOGIC: A METHODOLOGY OF
LOGICAL CONFIDENCE
Behavior that appears chaotic, undetermined, unknowable, and untrustable in the
context of a collective state appears orderly, completely determined, directly know-
able, and trustable in the context of logic relationships. The only path to understand-
ing and trusting the behavior of a logically determined system is in terms of the logic
relationships.
The behavior of a first logical expression can be understood locally in terms of its
direct neighbor expressions. As the neighbor expressions are understood, their beha-
vior neighborhood includes the first logical expression. As understanding progresses
logical expression by logical expression, a tapestry of logically determined behavior
is woven of overlapping behavior neighborhoods, Confidence in system behavior is
progressively approached in humanly graspable steps.
1.7
SUMMARY
Boolean logic is insufficiently expressive on its own terms and must be sup-
plemented with an expression of a mathematician or an expression of time or an
expression of non-Boolean operators. The supplemental expression compounds
the inherent complexity of the logical expression. The behavior of a supplemented
expression cannot be directly trusted, so confidence in system behavior is found in
exhaustive correspondence with enumerated states.
While the C-element and dual-rail encoding were steps toward sufficient expres-
sivity, they did not step far enough. The C-element prefigures the importance of
completeness behavior and dual-rail encoding prefigures the more general concept
of monotonic transitioning between ‘data’ and ‘not data’. The halter limiting the
steps was the continuing reliance on Boolean logic as a primary form of expression.
Stepping far enough leads to a coherent logic that is sufficiently expressive to
completely and unambiguously express the behavior of a system solely in terms
of logical relationships. There is no need for any supplemental form of expression.
A system operating solely in terms of logical relationships behaves generally
concurrently. There is no temporal synchronization of state transitions and, hence,
no collective state that is reliably and meaningfully samplable. What appears to
be chaotic and disorderly from the point of view of the state behavior is fully deter-
mined and orderly from the point of view of the logic. Confidence in system
behavior requires a new rationale grounded in trusting the logic. A quite different
regime of design, behavior, and rationale of confidence emerges. Since the behavior
10
TRUSTING LOGIC

of a design is completely determined by the logical relationships, the logic can and
must be trusted.
1.8
EXERCISES
1.1. Discuss the philosophical implications of a concept which is considered a
primitive characterization but which must be supplemented to fulfill its
mission of primitivity.
1.8
EXERCISES
11

&CHAPTER 2
A Sufficiently Expressive Logic
Another approach to overcoming the expressional insufficiencies of Boolean logic is
to search for a practical logic that is expressionally sufficient. While the previous
chapter defined the conceptual form of an expressionally sufficient logic, it did
not define a practical instance of such a logic.
2.1
SEARCHING FOR A NEW LOGIC
The search is conducted by first enhancing Boolean logic to expressional sufficiency
in terms of pure function operators. This results in a 4 value logic, which is imprac-
tical to implement. This 4 value logic is then evolved to a practical 2 value logic.
2.1.1
Expressing Discrete Data Presentation Boundaries
To the data values TRUE and FALSE is added the value NULL, to represent the
state of ‘no data’. This will be referred to as the NULL convention. The input pre-
sented to a combinational logic expression will monotonically transition between
‘complete data’ and ‘no data’ or all NULL. These monotonic transitions shown
in Figure 2.1 will be referred to as wavefronts. The monotonic transition from
‘complete NULL’ to ‘complete data’ is a data wavefront and the transition from
‘complete data’ to ‘complete NULL’ is a NULL wavefront. Each successive data
wavefront is separated by a NULL wavefront.
2.1.2
Logically Recognizing Discrete Data Presentation Boundaries
The disjoint domains of ‘complete data’ and ‘complete NULL’ can be appreciated
by a logic function if a fourth value is added. INTERMEDIATE (I), which expresses
input ‘incomplete’ (neither ‘completely data’ nor ‘completely NULL’). The result-
ing 4 value logic functions are shown in Figure 2.2. The data function is shown in the
bold box within the logic function table. A logic that includes a NULL value and that
recognizes completeness relationships in the primitive logic operators will be
13
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

referred to as a NULL Convention Logic (NCL) and this 4 value logic as 4NCL [10].
The recognition of completeness relationships will be called the completeness
criterion.
Each function outputs a data value only when there is ‘complete data’ present at
the input. Each function outputs a NULL value only when there is ‘complete NULL’
present at the input. Otherwise, the input is ‘incomplete’ and the function outputs an
INTERMEDIATE value. If the input to a function monotonically transitions
between ‘complete data’ and ‘complete NULL’ with possible INTERMEDIATE
values during each transition, the function will maintain the monotonic transitioning
behavior in its output.
2.1.3
The Universality of the NULL Function
4NCL logic functions vary in their behavior only for the data function. The NULL
function behavior is identical for all operators and for any combination of operators.
When presented with a NULL wavefront, they will all transition to NULL. So only
the behavior of the data wavefront needs to be considered when specifying a com-
binational expression. The NULL wavefront behavior is universally identical and
can be ignored.
2.1.4
Bounding the Behavior of a Combinational Expression
The completeness behavior of individual functions scales up for a combination
expression as a whole. The discussion of a combinational expression behavior in
Chapter 1 is reiterated here in terms of DATA, NULL, and INTERMEDIATE.
Consider the combinational expression shown in Figure 2.3. The circles are logical
T
I
F
I
F
T
K
L
J
K
L
I
J
I
K
N
N
I
F
T
I
I
F
F
I
I
I
I
I
I
I
I
N
T
I
F
I
F
T
K
L
J
K
L
I
J
I
K
N
N
I
T
T
I
I
F
T
I
I
I
I
I
I
I
I
N
T
I
F
K
J
I
F
T
I
N
IN
T
I
F
I
F
T
K
L
J
K
