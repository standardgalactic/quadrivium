Figure 5.7
Threshold 1 operators merged into regulator ranks.
98
CYCLE GRANULARITY

acknowledged by all the destination registration stages it contributed to, and every
destination registration stage must acknowledge every source registration stage that
contributed to it. The gist is to make the logic asserting each internal variable a regis-
tration stage. Essentially, a combinational expression can be woven from cycles,
variable by variable.
5.2
PARTITIONING THE DATA PATH
An acknowledge path spanning a wide data path creates a very large cycle. There is
no inherent necessity that a data path be spanned by a single cycle with full width
a. Combinational full adder in single cycle stage
3
1
0
S
0
1
A
2
2
3
2
2
1
2
2
1
2
2
1
CI
2
2
2
1
1
2
2
0
CO
1
B
0
1
0
1
0
1
S
1
0
CO
2
2
2
2
2
2
3
3
2
2
4
4
2
0
1
A
2
2
1
2
2
1
CI
1
2
2
B
0
1
0
1
4
Figure 5.8
Optimal full adder nonpipelined and pipelined.
5.2 PARTITIONING THE DATA PATH
99

completion and acknowledge. The urge for full data path completion is a misconcep-
tion derived from the mathematical abstraction of number as a primitive unit of
manipulation and from the experience of controlling the data path with the clock.
In the context of this discussion the primitive unit of manipulation is a 2NCL vari-
able. A digit is a 2NCL variable, and a number is an array of digits.
The data path can be partitioned into small cycles, reducing the overall cost of the
completion path both in terms of time and resources. If there are no dependency
relationships between variables in a data path, as in the case with a transmission
pipeline, then each variable in the data path can manage its flow independently.
The multi-variable data path cycles of Figure 5.10a can be partitioned into indepen-
dent single-variable data path cycles of Figure 5.10b. For wide data paths this can
save a lot of resources and a lot of time. The independently flowing variables will
be re-synchronized when they encounter dependency relationships in the data
path such as a combinational expression or a stage that requires full data path
synchronization such as an I/O port.
5.3
TWO-DIMENSIONAL PIPELINING: ORTHOGONAL PIPELINING
ACROSS A DATA PATH
With a variable partitioned data path, pipelines can be constructed across the
data path. This results in orthogonal pipeline structures that will be called two-
dimensional or 2D pipelines.
A data path can be partitioned even if there are dependency relationships among
the variables such as the adder carry dependence or a data path spanning control
variable. These dependency relationship can be pipelined across the data path
with 2D pipelining.
The ripple carry binary adder will serve as an introductory example. The carry of
a ripple carry adder is a dependency among variables (digits) in the data path. This
dependency relationship can be accommodated across the full data path width by
0
1
CI
0
1
0
1
Y
X
0
1
0
1
CO
S
3
2
3
3
3
2
2
2
2
2
2
2
2
2
3
3
3
3
2
2
2
2
2
2
3
2
3
3
3
2
2
2
2
2
1
1
1
1
2
2
2
2
2
1
1
1
Figure 5.9
Variable partitioned data path with integrated combinational logic.
100
CYCLE GRANULARITY

demanding completion of all the output variables as well as the last carryout vari-
able, as shown in Figure 5.11a with the full data path width cycle highlighted.
The dependency relationship can also be accommodated by pipelining the carry
value between the full adder stages from the least significant variable (LSV) to
the most significant variable (MSV) forming a structure of many small cycles
across the data path, as shown in Figure 5.11b with the cycles of the structure high-
lighted. As data path variables pipeline along the data path through the adder, the
carry variable pipelines across the data path variables. A cycle encompasses each
full adder, sharing completeness paths vertically with the neighboring full adder
cycles and horizontally with the input variable cycles and the output variable cycles.
The pipelining across the data path can be of any granularity. Each orthogonal
cycle can encompass two, four, or more full-adder stages (digits). It is a trade-off
between the cost of completion, the cost of pipelining, and the desired performance
a. Unpartitioned data path
4 value
variable
4 value
variable
2
2
2
2
2
2
2
2
1
1
2
2
2
2
2
2
2
2
1
1
2
2
2
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
4 value
