an output expression for a DATA wavefront is strictly unate. Remember that the
library of 2NCL operators was constructed to map to all unate Boolean functions
of four variables or less. The DATA function unate Boolean equations of the library
operators map directly onto the unate Boolean output equations.
The complete behavior of a multi-value variable is characterized by the collective
behavior of its set of Boolean output expressions, one equation for each value of the
variable. Exactly one output value per variable must transition to DATA for each
2. A + B
A
B
1
F = A + B
A
B
0
OR
1
0
1
0
1
2
3
A0
A1
B0
B1
Z1
Z0
a. 2NCL operator 2 and the
Boolean equation of its
b. Boolean function and its 2NCL combinational expression
DATA threshold function
Figure 4.7
Two roles of Boolean equations.
4.3 2NCL COMBINATIONAL EXPRESSION
67

DATA wavefront. Since this single transition must indicate completeness of input,
each output expression must individually express the completeness of the input vari-
ables and must also isolate orphan paths. This can be conveniently accomplished by
retaining the sum of products form of the Boolean equations when mapping to 2NCL
operators. As will be shown later, optimizing the Boolean equations before mapping
can greatly confuse the issues of completeness and orphan paths. Optimization must
be performed in terms of 2NCL operators after the mapping.
4.4
EXAMPLE 1: BINARY PLUS TRINARY TO
QUATERNARY ADDER
Construction of the 2NCL combinational expression begins with determining the
individual Boolean sum of product expressions for each output value. The first
example will be the addition of a binary variable to a trinary variable producing a
quaternary variable. The structure of the function is identical to Figure 4.8 and
requires four output expressions. The function can be characterized by the function
map in Figure 4.9 and the Boolean output equations can be read directly off the map.
For instance, Z2 ¼ X2Y0 þ X1Y1. The output equations are then mapped to generic
equations that map directly to 2NCL operators. Boolean logic provides a convenient
intermediate specification language.
AND
0
1
2
1
Y
X
Z
2 variable
function
Y1
X0
Y0
X1
X2
Z1
Z0
Z0
expression
Z1
expression
Z2
expression
Z3
expression
Z3
Z2
Y1
X0
Y0
X1
Z1
Z0
X2
Z3
Z2
Detail of
value paths
a. Variable level function
b. Value level of function
c. Internal structure of function
Figure 4.8
Mapping a two-variable multivalue function.
Z1
Z2
Z0
Z3
X0Y0
X1Y0 + X0Y1
X2Y0 + X1Y1
X2Y1
AB
AB + CD
AB + CD
AB
Generic
form
26
2
2
26
2
2
2
2
1
2
Z
0
3
1
2
0
1
Y
X
0
Specific
equation
AB
AB + CD
2
A
B
A
B
C
D
26
2
2
Y0
Y1
Z0
Z1
Z1
Z2
Z2
Z3
X0 X1 X2
Figure 4.9
2NCL mixed radix adder.
68
2NCL COMBINATIONAL EXPRESSION

The four output expressions in this case can be implemented with single oper-
ators. Function AB is implemented by a 2 of 2 operator. Z0 and Z3 requires one
DATA from each input variable so the completeness criterion is fulfilled. Function
AB þ CD is implemented by operator 26. Z1 and Z2 also requires one DATA from
each input variable fulfilling the completeness criterion. The resulting 2NCL
expression of the multi-value function in the right of Figure 4.9 is implemented
with four operators. There is only one rank of logic, the expression as a whole fulfills
the completeness criterion, and no ineffective path transitions can get past the one
rank of operators. So orphans are isolated to path segments within the expression.
4.5
EXAMPLE 2: LOGIC UNIT
The next example is a logic unit that will perform an AND, OR, or XOR on two
binary variables. The function has two 2 value input variables, one 3 value input
control variable with values A (AND), O (OR), and X (XOR), and one 2 value
output variable. The function is shown in Figure 4.10. The equations that read off
the function map are somewhat more complex than those of the previous example.
They do not map directly to single operators and have to be resolved in stages. There
are two ways to partition an expression to resolve in stages. The products can be par-
titioned or the sums can be partitioned. Product partitioning will be used in this
instance. In product partitioning two input variables are fully resolved, producing
an internal variable. Then the next input variable is resolved in relation to the
internal variable producing a second interval variable, then a next input variable
is resolved in relation to the second internal variable, and so on until the output vari-
able is produced. This is a straightforward way to proceed, and it ensures progressive
logically determined variable boundaries through the combinational expression.
Each logically determined internal variable boundary can express completeness
and isolate orphan paths.
In the 2NCL expression of Figure 4.10 the first rank of 2 of 2 operators resolves
the X and Y inputs into a 4 value variable with the values s, t, u, and v. This first rank
Z0
X0Y0A + X0Y0O + X0Y0X + X0Y1A + X1Y0A + X1Y1X
Output equations
A
X0,Y0
O
X
X0,Y1
Z0
Z0
Z0
Z1
Z0
Z1
X1,Y0
X1,Y1
Z0
Z1
Z1
Z1
Z1
Z0
2
2
2
2
A
O
X
2
2
2
2
1
1
Y
1
0
0
1
0
1
X
C
2
s
t
u
v
Z1
X1Y1A + X1Y1O + X1Y0O + X0Y1O + X1Y0X + X0Y1X
Z
Figure 4.10
Logic unit slice.
4.5 EXAMPLE 2: LOGIC UNIT
69

of operators fulfills the completeness criterion on the X and Y input variables and
isolates the orphan paths of X and Y. This internal variable becomes an input vari-
