4
Ack
5
1
1
1
1
1
Figure 8.5
Bus with interwoven control values.
146
BUSSES AND NETWORKS

The seven control paths with 20 values has been reduced to one control path with
10 values. The bus structure using the interwoven control values is shown in
Figure 8.5. The structure still exploits all possible concurrency and inherently man-
ages all conflicts.
8.2
A FAN-OUT STEERING TREE
Wavefronts can be steered by stages through a fan-out tree. A multi-variable address
propagates with each wavefront. At each stage an address variable is consumed to
steer the wavefront. At the end of the steering tree the address variables have
been consumed and the wavefront is delivered to the correct output data path.
Figure 8.6 shows a two-stage fan-out steering tree. Two address variables steer a
wavefront through the network. The first stage fans out to three paths controlled
by a 3 value variable. The second 2 value address variable is steered along with
the data wavefront through the first stage and controls the second-stage fan-out to
two paths.
1
2
2
2
1
1
1
Data path
Control path
Acknowledge path
Figure 8.6
Multi-stage fan-out network.
8.2 A FAN-OUT STEERING TREE
147

As wavefronts propagate concurrent propagation increases. Many wavefronts can
be propagating through the tree simultaneously. A steering tree can feed wavefronts
from a fast input path into concurrently propagating slower paths, which might be
functional paths.
8.3
FAN-IN STEERING TREES DO NOT WORK
Fan-in structures cannot be structured as trees and must be flat. Figure 8.7 shows
a fan-in tree structure. The fundamental question is which input wavefront should
be steered to the output path. In the tree structure the final decision is made between
two wavefronts presented to the final stage. If there are two DATA wavefronts on
the internal paths just prior to the last stage and only one is selected to propagate
to the output, then one DATA wavefront is marooned on an internal path. This
marooned wavefront will deadlock the structure because the wavefront will never
flow and the input will never receive another request for DATA.
The marooned wavefront must be consumed. If it is a valid wavefront, it is erro-
neous to consume it. If it is not a valid wavefront, then it must be a dummy wave-
front generated specially to be consumed in order to satisfy the control structure. To
generate the dummy wavefront, it must have been determinable in advance which
Any wavefront abandoned
in this stage will deadlock
the circuit.
2
1
1
1
1
2
1
Figure 8.7
Fan-in tree network structure that demands two wavefronts on the internal paths.
148
BUSSES AND NETWORKS

wavefront is going to get to the output, so there is no point in delaying the decision.
All of this adds up to the realization that fan-in steering structures cannot and should
not be structured as a tree. They must be a flat, single stage structure as shown in
Figure 8.8.
8.4
ARBITRATED STEERING STRUCTURES
Arbitration is required when there are simultaneous requests for a resource that can
only be used by one requester at a time. In a logically determined system the wave-
front flow through most resources is determined by the sequencing of data path
wavefront and control path wavefronts. Conflict can occur with resources that are
logically indifferent to access order. One such circumstances is when two wave-
fronts need to flow through the same data path segment in a switching network. If
two wavefronts can try to simultaneously use a single data path, their access must
be arbitrated and sequenced. One must be blocked while the other is allowed to
pass. When the other has finished its passage, the one can be allowed to proceed.
8.4.1
The MUTEX
Arbitration begins with a mutual exclusion operator or MUTEX. A MUTEX oper-
ator of Figure 8.9 receives two request signals as inputs and outputs strictly one at a
time of two grant signals. If R1 and R2 simultaneously transition high at the input of
the, The MUTEX will allow only one signal through as G1 or G2 transitioning high.
The two input signals contest for passage and only one wins. If one signal is ahead of
1
1
Figure 8.8
Flat fan-in structure.
8.4 ARBITRATED STEERING STRUCTURES
149

the other, then it wins and the later signal is blocked. Assume that R1 won and that
G1 high is asserted by the MUTEX. The MUTEX will continue asserting G1 high
and blocking R2 until R1 transitions low, removing the request. Upon R1 transition-
ing low, the MUTEX will immediately transition G1 low and allow R2, if it is pre-
sent, by transitioning G2 high. A MUTEX does not alternate inputs. If there are 5
consecutive R1 requests, there will be 5 consecutive G1 grants.
If the two requests transition simultaneously, the resolution of the conflict can
take an arbitrarily long time. This condition of indecision is called metastability.
While the duration of metastability is a critical issue for clocked systems, it is less
so for logically determined systems. While it may create a throughput issue, it does
not create a correctness of logical operation issue. The logical will wait as long as
necessary for the metastability to resolve.
The MUTEX and metastability are well-studied topics [2,13]. In-depth discus-
sions of mutual exclusion and arbitration can be found in recent texts [33,52,59].
8.4.2
The Arbiter
In arbitrating control behaviors the immediate grant of the other request by the
MUTEX, when one request is removed, may not adequately serve the desired beha-
vior protocol. One might wish, for instance, to have more positive control over when
the next grant occurs. An arbiter is an expression wrapped around a MUTEX to pro-
vide this extra control. A standard form of arbiter known as a request/grant arbiter is
shown in Figure 8.10.
M
U
T
E
X
G1
G2
R1
R2
R1
R2
Figure 8.9
CMOS MUTEX.
G1
G2
R1
R2
2
2
1
1
1
R1
R2
G
R
2
2
1
1
1
M
U
T
E
X
M
U
T
E
X
Figure 8.10
Request/grant arbiter expression.
150
BUSSES AND NETWORKS

The arbiter features crossblocking signals, the wide paths in Figure 8.10a, to
allow each grant to further delay the other grant. When G1 occurs the crossblocking
signal blocks the grant of a G2 request. G1 will eventually lead to the release of the
R1 request, whereupon the MUTEX can immediately grant G2. The G2 grant is
blocked, however, until request R is released, grant G is released, and the blocking
signal is released. Thus the granting of the next request can be controlled by the
external G signal.
There is a timing issue shown in Figure 8.10b. The blocking signal must effec-
tively propagate before the MUTEX is able to transition its grant. When G2 is
asserted, the blocking signal must propagate and block before G2 causes R2 to be
released and allows R1 to be granted. From the branch of G2, the blocking signal
must be strictly faster than the path indicated by the gray highlight of Figure 8.10b.
The added control around the MUTEX allows NULL wavefronts to be inserted
between MUTEX grants.
8.4.3
An Arbitrated 2 to 1 Fan-in
To show how the arbiter fits into a cycle structure, it is redrawn in Figure 8.11a and
juxtaposed with an arbitrated 2NCL fan-in structure in Figure 8.11b. The G paths
G1
G2
R1
R2
G
R
1
1
1
2
2
M
U
T
E
X
I1
I2
a. Redrawn arbiter
1
1
1
1
M
U
T
E
X
1
1
3
3
1
3
3
2
2
1
1
2
2
2
2
Data path
Control path
Acknowledge path
G1
G2
R1
R2
I1
I2
R
G
Figure 8.11
Arbitrated fan-in structure.
8.4 ARBITRATED STEERING STRUCTURES
151

