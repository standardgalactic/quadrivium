wavefront via the rank of AND operators. A DATA-NULL wavefront sequence has
been produced from the stable wavefront on the storage path S. In Figure 6.7d the
NULL wavefront propagates through the output pipeline and the register becomes
stable again, waiting for the next control variable wavefront.
6.3.2
The Write Cycle
The storage/consume registration stage (SC) will capture a wavefront and stably main-
tain the wavefront’s values. Notice that the Write control value presented to the SC
registration stage is inverted and that the acknowledge/request signal from the SC
registration stage to the control registration stage is inverted twice. This effectively
DATA
NULL
&
W/R
S
1
S
P
C
I
O
b. Control variable arrives with READ
value and DATA wavefront is produced
a. Stable waiting for control variable
stable waiting for the next control variable
&
W/R
S
1
S
P
C
I
O
W/R
S
1
S
P
C
I
O
&
W/R
S
1
S
P
C
I
O
&
Figure 6.7
Read cycle for the auto consume/auto produce register.
120
MEMORY ELEMENTS

inverts the phase of the registration stage in relationto the other registrationstages in the
system. While most other registration stages are normally maintaining a NULL wave-
front the SC registration stages is normally maintaining a DATA wavefront.
The Write control variable value is normally NULL. The inverted control value
presented to the SC registration stage is normally DATA and will maintain the last
DATA wavefront that played through the registration stage. In Figure 6.8a the reg-
ister begins in a stable state waiting for a control variable wavefront. In Figure 6.8b,
a control variable arrives with a Write value. This becomes a NULL value at the
input of the SC registration stage, which allows the NULL wavefront of registration
stage I to flow through registration stage SC, overwriting and consuming the stored
DATA wavefront.
In Figure 6.8c, registration stage SC detects the NULL wavefront and requests a
DATA wavefront from registration stage I, requests a DATA wavefront for its own
auto consume cycle, and requests a NULL wavefront from the control registration
b. Control variable with Write value arrives
and stored wavefront is consumed
f. NULL wavefront arrives and the register is
stable waiting for the next control variable
DATA
NULL
d. NULL plays through the control stage
allowing the DATA wavefront to flow
through the SC stage
&
W/R
S
1
S
P
C
I
O
&
W/R
S
1
S
P
C
I
O
&
W/R
S
1
S
P
C
I
O
&
W/R
S
1
S
P
C
I
O
&
W/R
S
1
S
P
C
I
O
a. Stable waiting for control value
&
W/R
S
1
S
P
C
I
O
e. DATA wavefront is detected, NULL is
requested from stage I, SC itself, and DATA
is requested from the control stage
c. NULL wavefront is detected, DATA
is requested from stage I, SC itself, and NULL
is requested from the control stage
Figure 6.8
Write cycle for the auto consume/produce register.
6.3 THE CONSUME/PRODUCE REGISTER STRUCTURE
121

stage W/R. A DATA wavefront flows through registration stage I. In Figure 6.8d,
the NULL control wavefront arrives. This is inverted to a data value at the SC regis-
tration stage that allows the DATA wavefront to flow through registration stage SC
into S. In Figure 6.8e, registration stage SC detects the DATA wavefront and
requests a NULL wavefront from registration stage I and a DATA wavefront
from the control registration stage W/R. In Figure 6.8f, a NULL wavefront flows
through I and the register enters a stable state waiting for the next control variable.
Registration stage SC will maintain the DATA wavefront until another Write control
value arrives.
6.4
THE REGISTER FILE
A register file can be constructed by placing individual registers in a fan-out–fan-in
structure. The basic register file structure is shown in Figure 6.9. Three register
elements are integrated into a fan-out–fan-in steering structure. A wavefront can
be written to the selected register by directing it from the input data path through
the appropriate fan-out path and commanding a Write operation. A register can
be read by commanding a Read operation directing the output from the appropriate
fan-in path to the output data path.
The SC registration stage of each register is exposed to the fan-out bus that is con-
tinually transitioning. If the only input to registration stage SC were the control
value and the data path and all the control values are DATA, then each data wave-
front on the bus would flow through all the SC registration stages and overwrite all
the stored wavefronts. What protects each SC registration stage and its stored
W/R
S
S
C
3
3
3
3
3
3
addr
1
S
S
C
S
S
C
ABC
W R
1
C
B
A
1
I
1
P
Data path
Control path
Acknowledge path
&
&
&
Figure 6.9
Sequential access register file.
122
MEMORY ELEMENTS

wavefront is the NULL value of the auto-consume input to the SC registration stage.
To isolate a registration stage on a transitioning bus, there must be two control inputs
asserting different values. If there is one control input asserting NULL, it will allow
NULL wavefronts through. If there is one control value asserting DATA, it will
allow DATA wavefronts through. If there are two control inputs asserting different
values, then the registration stage becomes locked in a noncompeteness state, so no
data path wavefronts can flow through the registration stage. Notice that in
Figure 6.8a the two control inputs to the SC registration stage in the stable waiting
state are different values. This is the reason for the auto-consume cycle around the
SC registration stage.
In this instance there is one 3 value address variable and one 2 value control
variable. The address variable and the 2 value control variable are combined into
a single 6 value variable that controls the register file. The behavior of the register
file is sequentially ordered by the sequence of control variable wavefronts.
6.4.1
A Concurrent Access Register File
The key to concurrent behavior is distributed control. There is no particular need to
combine all the control of the register file into a single control variable. The input
address, the output address and the control of each register can be independently
generated and resolved. There is an Nth fan-out address associated with each Nth
Write control variable value and an Nth fan-in address associated with each Nth
Read control variable value. Figure 6.10 shows a register file with distributed con-
trol. Each register is embedded in a pipeline that can store one input wavefront and
one output wavefront. The fan-out control can direct a wavefront to a register. The
wavefront flows into the pipeline and is presented to the I registration stage awaiting
the Write command. In the meantime the fan-out control can direct the next wave-
front over a different fan-out path to a different register. If the next wavefront is
directed to the same register, the fan-out structure blocks and waits until the
Write is completed for the previous wavefront; at this time the blocked wavefront
will flow into the register pipeline and free the fan-out structure for another opera-
tion. If the input data path and fan-out structure are much faster than the register
elements, then many register elements can be operating concurrently while not slow-
ing down the input data path.
Since the SC registration stage is not exposed to the ambiguity of the fan-out path,
the auto-consume cycle around SC is not needed here. Registration stage I blocks each
next wavefront from the SC registration stage. The isolation on the fan-out bus is
expressed with the select control values that are always different from the acknowl-
edge value for the registration stage until the registration stage is selected.
The Read operations also buffer their output in the register element pipeline
awaiting the appropriate address to steer them out of the register file structure.
So, if the output data path and fan-in structure is much faster than the Read oper-
ation, then multiple registers can be concurrently performing a Read operation.
