via spontaneously propagating wavefronts that are steered, that interact, that com-
bine and split, and that transform. Control wavefronts and data path wavefronts
flow quite autonomously through the system. There is no subdomain of control.
There are just wavefronts flowing through the system, and thatâ€™s all there is, period.
1
1
1
function unit
c
function unit
a
function unit
b
2
Figure 3.29
Structure with independent paths requiring fan-in control.
50
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

There are no signals in the familiar sense. All signal paths in the system are
enlisted to implement cycles. Cycles are enlisted to implement pipelines, pipelines
are structured into a system, and wavefronts flow through the pipelines.
3.4.1
Managing Wavefront Interaction
Managing wavefront interaction is a matter of how the wavefronts enter the pipe-
lines of the system and how they interact. An essential aspect of the system structure
is the completeness criterion of each shared path in the system. Wavefronts interact
at shared paths. When an Nth wavefront arrives at a shared path, it will be blocked
and will wait until an Nth wavefront arrives on the other path. When all Nth wave-
fronts are present at a shared path, they will form completeness and will interact. The
result wavefront will flow to the next shared path and wait for another wavefront or
interact with the other wavefront already waiting. This waiting for completeness,
which is fundamental to the logical design methodology right down to the logic
operators, is the coordination mechanism of the system.
There are no control signals. There is no global or local time reference. While the
flow of wavefronts through each cycle is strictly sequential, the flow of wavefronts
through the system as a whole is generally concurrent. In a behaving system there is
no state anywhere in the system that is reliably samplable at any given instant. The
state of the system resides in the flowing wavefronts, and there is no way to deter-
mine when wavefronts might be interacting and transforming or when they might be
stable. From the point of view of the system state the behaviour of the system
appears to be chaotic and indeterminate. The behavior of a logically determined
system must be viewed in terms of its logically relationships, and in this context
its behaviour appears quite orderly and completely determined.
3.4.2
A Simple Example System
Consider a simple system modeled, for the purpose of familiarity to the reader, on a
traditional sequential processor architecture shown in Figure 3.30. It has a memory
(M), a function unit (F), a register file (R), and an instruction decoder (I). The
memory, the function unit, and the register file are all connected by black data
paths with steering elements. The instruction decoder is connected to all the other
units with gray control variable pipelines. Again, they are not control signals.
They are pipelines through which control variable wavefronts flow. There is no
difference between a data path and a control variable path except labeling. They
are both pipelines built of cycles.
Each instruction in sequence is decoded by the instruction decoder into several
control variables, each of which flows into its own control pipeline. The Madd/
op pipeline has two variables, the memory address variable and a 2 value variable
with the values R and W for read and write. The MFOsel pipeline controls the
fan-out structure for the memory read operation and is a single variable with the
values MI and MR. The RFOsel pipeline controls the fan-out structure for the reg-
ister file read operation and is a single variable with the values RM, RFA, RFB, and
3.4 THE LOGICALLY DETERMINED SYSTEM
51

RG. The RFIsel pipeline controls the fan-in structure for the register file write oper-
ation and is a single variable with the values MR, FR, and GR. The Radd/op pipe-
line has two variables, the register address variable and a 2 value variable with the
values R and W for read and write. The Fmod pipeline is the function modifier for
the F function unit and is a single variable with the values f1, f2, and f3. The Gmod
pipeline is the function modifier for the G function unit and is a single variable with
the values g1 and g2.
The behavior of the system begins by initializing it to stable state, and initiating
an instruction fetch by placing an address wavefront in the Madd/op pipeline and a
select wavefront in the MFOsel pipeline. The address wavefront flows through the
memory (M) and is transformed into a data wavefront that flows to the FANOUT
and, interacting with the MFOsel wavefront, is steered to the instruction decoder
(I). Flowing through the instruction decoder, the data wavefront is split into field
wavefronts conditioned by the OP code field wavefront. Each field wavefront, as
it flows, is encoded or decoded to form its appropriate control wavefront and thus
flows to its appropriate control pipeline. This first fetched instruction reads a
location from memory and places it in the register file (R). The instruction decodes
to a memory address (MAD/op), a register address (Radd/op), a memory FANOUT
select (MFOsel), and a register FANIN select. (RFLsel) All four of these wavefronts
R
F
A
O
U
T
F
A
I
N
F
G
M
RG
RFB
GR
RFA
FR
MR
RM
Gmod
Fmod
RFOsel
RFIsel
Radd/op
Madd/op
Data path pipeline
Control path pipeline(FIFO)
I
FA
O
U
T
MI
MFOsel
A
B
N
N
N
Figure 3.30
Pipeline structure of simple processor.
52
THE STRUCTURE OF LOGICALLY DETERMINED SYSTEMS

are sent into their pipelines together. The memory address wavefront transforms into
a data wavefront that interacts with the MFOsel wavefront, flows to the register file
FANIN, and interacts with the RFLsel, which enables it to flow to the register file
where it interacts with Radd/op wavefront and is stored.
Say all traffic to the register file is blocked and that the pipelines are backing up.
Consider that 5 consecutive instructions read from the memory and write to the reg-
ister file. There will be 10 read operations to the memory. Five reads will be instruc-
tions fetches steered to the instruction decoder and five will be data reads that are
steered to the register file and that will back up in the pipeline. There will also be
5 RFIsel wavefront issued by the instruction decoder that will back up in the
RFIsel pipeline. When the register file starts accepting writes, the data wavefronts
and the control wavefronts will flow from their pipelines in sequence. The first
data wavefront will be steered by the first RFIsel wavefront, the second by the
second, and so on. As long as the instruction decoder is placing the control wave-
fronts into their pipelines in the sequence that the instructions generated them, all
wavefronts flowing through the system will correctly meet at shared completeness
paths and properly interact.
Figure 3.31 shows a more extensive slice of system activity for a short selection
of simple instructions. There are load from memory to register file instructions (LD),
function F instructions (F), function G instructions (G), and store to memory from
the register file instructions (ST). For each decode step the decoder initiates control
variable wavefronts into the control path pipelines. All the control variables in the
control path pipelines are in instruction order. Figure 3.31 shows the decode steps
and the value of the control variable wavefronts initiated at each step. For the func-
tion instructions there are multiple decode steps. One instruction fetch is shown at
the beginning just to show how it works. The decoder initiates the control wave-
fronts, and they begin propagating autonomously through the control pipelines
and through the system.
instruction
Madd/op
MFOsel
RFOsel
RFIsel
Radd/op
Fmod
Gmod
fetch inx
inx/R
MI
LD 1,add1
add1/R
MR
MR
1/W
LD 2,add2
add2/R
MR
MR
2/W
LD 3,add3
add3/R
MR
MR
3/W
F 1,2,4,f2
RFA
1/R
f2
RFB
2/R
FR
4/W
F 2,3,5,f3
RFA
2/R
f3
RFB
3/R
FR
5/W
G 5,6,g1
RG
5/R
g1
GR
6/W
ST 5,add4
add4/W
RM
5/R
ST 6,add5
add5/W
RM
6/R
control variables generated by decoder into each control pipeline/FIFO
Figure 3.31
Decoder activity.
3.4 THE LOGICALLY DETERMINED SYSTEM
53

It will be assumed here, for purposes of illustration, that the instruction decode is
very fast and the pipelines are very slow, with the result that the control wavefronts
back up in the pipelines. Pipelines naturally act as FIFOs. The instructions are
decoded in sequence. The decoded control variable wavefronts enter the FIFOs in
sequence, and each FIFO maintains the sequence of wavefronts presented to it.
Figure 3.32 shows the contents of the pipeline/FIFOs after the decoder has
decoded all the instructions. The top of the diagram is the exit of each FIFO. So
each value at the top of each FIFO is a wavefront awaiting another wavefront at a
shared completeness path, except for the memory and register file read operations
that initiate data wavefronts. The g1 cannot flow until a data wavefront arrives at the
G function, which will not happen until the 5/R of Radd/op pairs with the RG of
RFOsel. Similarly the f2 has to await a data wavefront at the F function. The
1/W in Radd/op is awaiting a data wavefront from the fan-in element. The MR
of RFIsel is awaiting a data wavefront from the memory. The RFA of RFOsel is
awaiting a data wavefront from the register file, which will not occur until the 1R
of Radd/op is effected and so will not occur until the three writes are completed.
The MI of MFOsel is awaiting a data wavefront from the memory.
The inx/R of Madd/op is not waiting and will generate a data wavefront from
memory. This first data wavefront will be steered by MI to the instruction decoder,
but the next data wavefront from add1/R will be steered by MR to the register file
and begin the flow of wavefronts that will carry out the resolution of the instruction
sequence. As long as the decoder keeps decoding instructions and sending control
variable wavefronts into the control path pipelines, the system will continue flowing
and correctly resolving instruction streams.
To keep the example simple, the condition code data path from the function units
to the instruction decoder has been ignored. A logically determined system works
best with deep finely grained pipelines. If the decoder has to frequently wait on
the condition code, these pipelines will frequently be idle. While a logically
inx/R
add1/R
add2/R
