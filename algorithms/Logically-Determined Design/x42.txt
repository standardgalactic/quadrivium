to state 0
to state 1
to state 4
to state 3
read
pop
push
ERROR
ERROR
READ
READ
READ
READ
READ
READ
READ
READ
WRITE
WRITE
WRITE
WRITE
ERROR
state 0
state 1
state 2
state 3
state 4
to state 4
to state 1
to state 2
to state 3
to state 4
0
1
2
3
4
error
p
op
p
op
p
op
p
op
p
u
s
h
p
op
error
error
a. State machine diagram
Figure 7.8
Stack controller state diagram and function map.
136
STATE MACHINES

not generate a detect wavefront are collected to generate what is essentially a ‘not
detect’ acknowledge. Essentially the ‘not detect’ value is auto-consumed. When
there is a ‘detect’, there will be an acknowledge from the receiving cycle of the
detect wavefront. The resulting expression is shown in Figure 7.7.
7.1.4
Stack Controller
The stack controller manages a 4 entry stack with ‘push’, ‘pop’, and ‘read’, com-
mands. The read command reads the top of the stack without popping it. The con-
troller implements the stack by sending addresses and commands to a register file
(see the discussion of ‘the register file’ in Section 6.4).
The state machine maintains a 5 value state variable that represents the current
top of the stack. States 1 through 4 are direct address lines for the register file.
S0
read
S0
pop
S0
push
S1
read
S1
pop
S1
push
S0
S2
read
S2
pop
S2
push
S3
read
S3
pop
S3
push
S4
read
S4
pop
S4
push
S1
S2
S3
S4
write 1
write 2
write 3
write 4
ERROR
read 1
read 2
read 3
read 4
ERROR
ERROR
1
2
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
1
1
1
1
1
1
1
1
Figure 7.9
Combinational expression for the stack controller state machine.
7.1 BASIC STATE MACHINE STRUCTURE
137

Figure 7.10
Stack controller state machine and interface diagram.

State 0 is the empty state. The input to the state machine is a three value command
variable specifying ‘push’, ‘pop’, or ‘read’. For each command it sends an address
and command to the register file and sets the next state. For the empty and full con-
ditions it outputs an error code. The input to the stack controller is a 5 value state
variable and a 3 value command variable. The state diagram is shown in
Figure 7.8a, and the state function map is shown in Figure 7.8b.
The combinational expression for the controller can be read directly from the
function map and is shown in Figure 7.9. The first rank of logic generates the com-
mands to the register file, and the second rank generates the next state. Each rank of
logic can be a registration stage. The complete state machine is shown in
Figure 7.10a. It is a ring of three cycles. Two of the registration stages are
formed from the two ranks of logic, and only one is serving just as a registration
stage.
The complete stack is shown in Figure 7.10b. The combinational expression
always generates an internal wavefront to the next ring registration stage and
always generates an external wavefront to the register file or to the error handler,
so there must be an acknowledge from the next ring registration stage and an
acknowledgement from either the register file or the error handler.
7.2
EXERCISES
7.1. What are the problems of a nondeterministic interface with the real world. Dis-
cuss the relationships between the monkey and the get banana state machine.
Can the behavior of the monkey be integrated into the cycle structure of the
machine?
7.2. Design an 6 bit code detector that will detect any 6 bit code.
7.3. Design and simulate a 2D pipelined stack.
7.2 EXERCISES
139

&CHAPTER 8
Busses and Networks
Data path wavefronts are steered through a logically determined system by interact-
ing with control wavefronts. The basic fan-out and fan-in steering structures have
already been presented in Section 3.3 of Chapter 3. This chapter will elaborate on
larger structures built from those basics.
8.1
THE BUS
8.1.1
The Serial Bus Structure
A bus steers wavefronts from multiple source paths to multiple destination paths.
The most familiar form is the serial bus over which one wavefront can flow at a
time. Figure 8.1 shows a serial bus with two source paths and five destination
paths. The two source paths fan-in to a single path, which then fans-out to the
five destination paths. The source registration stages are controlled by a single 2
value control variable. The destination registration stages are controlled by a
single 5 value control variable. The Nth data wavefront will be steered by the Nth
source control variable and the Nth destination control variable.
The throughput of a serial bus can be increased with 2D pipelining. Several wave-
fronts can simultaneously flow through the bus as the control variables propagate
across the data path. As with most 2D pipelined structures, the throughput of the
bus will be independent of the width of the data path. A 2D pipelined serial bus
might actually be the most efficient high-throughput structure for very wide data
paths.
8.1.2
The Crossbar
By fanning-out the source paths to many internal paths and fanning-in these internal
paths to the destination paths, the many internal paths can support concurrency of
wavefront flow through the bus. Figure 8.2 shows the crossbar structure.
Each source path and destination path is now controlled by its own control vari-
able. It is now possible to enable path A to path 4 and to simultaneously enable path
141
Logically Determined Design: Clockless System Design with NULL Convention LogicTM, by Karl M. Fant
ISBN 0-471-68478-3
Copyright # 2005 John Wiley & Sons, Inc.

B to path 3. If paths A and B are simultaneously enabled to path 4, the control vari-
able of path 4 will determine the sequence of wavefronts through path 4. All possible
concurrency is automatically exploited by the structure, and all conflicts are auto-
matically resolved by the structure itself. Again, at each stage the Nth control vari-
able wavefront steers the Nth data path wavefront and everybody waits for
completeness.
Consolidated Fan-out Controls. The reader may notice that there is an enable
registration stage at both ends of each internal path. There only needs to be one
enable per path as long as there is only one path enabled into each fan-in. Both con-
trol values that enable the ends of the path can be grouped at the fan-out registration
stage of each path. When the enable values are grouped, a path is enabled only if
both control values are DATA. The values A to 1 and 1 from A will enable one
path and the values B to 2 and 2 from B will enable another path. The A to 1 and
B to 1 will never be simultaneously enabled because the values 1 from A and 1
from B are mutually exclusive. The values 2 from A and 3 from A will never be sim-
ultaneously enabled because the values A to 2 and A to 3 are mutually exclusive.
Again, the structure inherently exploits all possible concurrency and inherently man-
ages all flow conflicts. Figure 8.3 shows the crossbar with the consolidated control
1
1
1
Figure 8.1
Serial bus structure.
142
BUSSES AND NETWORKS

1
A
1
B
1
1
1
1
