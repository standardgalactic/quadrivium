3
3
3
3
3
A
B
C
D
E
F
Figure 9.10
Logic functions implemented from common minterm variable.
9.2 A QUATERNARY ALU
167

The pieces are in place. In each expression defined above the control value that
chooses the function and enables the function is combined into the expression in the
first rank of logic of the function. In the case of the ADD and logic functions it is in
the first rank of logic receiving the common minterm variable. This limits orphan
paths of the input data paths. Unless a function is selected, no data path wavefront
will pass through any operators of the function.
An ALU of any data path width can be assembled by stacking the above-defined
digit functions across the data path and embedding them in an appropriate control
structure, as shown in Figure 9.14. There is a 7 value command variable that selects
the function for the ALU. The command variable is a wavefront, just like any other
wavefront in the system. A command variable wavefront presents a single DATA
Figure 9.11
Quaternary full adder implemented from the common minterm variable.
168
MULTI-VALUE NUMERIC DESIGN

value, enabling one function. When the function is complete, the command variable
will present a NULL wavefront. When the NULL wavefront is complete, another
command variable will be presented, selecting the next function. The input to the
ALU is the data path wavefront and the command variable wavefront. Each Nth
command variable wavefront operates on the Nth data path wavefront.
The ALU is a cycle with three input paths and three output paths. The output
paths are well conditioned in that only one wavefront flows through one output
Figure 9.12
Derivation and expression for the quaternary shift.
Figure 9.13
Derivation and expression for the quaternary NOT.
9.2 A QUATERNARY ALU
169

path for each command. There is no ambiguity about the generation of an acknowl-
edge. There is, however, ambiguity about how the acknowledges are used. The input
paths are not well conditioned in that some commands use three input paths (ADD),
some commands use two input paths (AND, OR, XOR) and some commands use
only one path (SHIFT, NOT). This is another situation where a completeness
relationship varies with a controlling variable.
In this case the acknowledge paths to the input paths are conditioned by combin-
ing the command variable values with the acknowledge paths to the B and CARRY
IN inputs. The command variable values enable the acknowledge paths, and hence
enable the proper wavefronts, to flow through the proper input paths. All functions
use the A input. The logical and ADD functions also use the B input and only the
ADD function uses the CARRY IN input. Notice that the inversion of the acknowl-
edges is before the merging of the command values. This puts the command vari-
able, the input registration stages, and the acknowledges all in the same
monotonic transition phase. Every cycle always uses the A input and the command
input, so they are always acknowledged. This acknowledge is not conditioned by a
command value.
9.3
A BINARY ALU
The next question is how the quaternary ALU compares with a binary ALU convert-
ing 4 value to 2 value, performing binary functions, and then converting back to 4
Figure 9.14
Quaternary ALU structure.
170
MULTI-VALUE NUMERIC DESIGN

Figure 9.15
Binary ALU expressions.

value. Figure 9.15 shows the function expressions for the binary ALU. There is the 4
value to 2 value conversion and the 2 value to 4 value conversion, and each function
labeled with its command value name. The logic functions OR, AND, and XOR take
advantage of a common minterm. The SHIFT, ADD, and NOT functions relate
directly to the dual-rail inputs. The NOT function is almost identical for both the
4 value and the 2 value functions.
The basic structure of the binary ALU of Figure 9.16 is the same as the quaternary
ALU except for the conversions between dual-rail and four-rail representations.
9.4
COMPARISON
The quaternary ALU is compared with the binary ALU with and without the data
path conversions. The comparisons are in terms of operator count, propagation
delay, and operator switching. The comparison is for the costs of processing one
quaternary digit applied to a one digit ALU. The comparisons are tallied in
Table 9.1. The binary ALU is presented with the conversion between four-rail
and dual-rail, and it is presented without the conversion as if dual-rail data paths
were presented directly to the ALU. The operator total is for the whole ALU. The
switch and delay totals are just for the functions of the ALU, and each function
includes the data path conversions and common minterm switches and delays.
For the two designs with a four-rail data path, the quaternary ALU wins on all
counts. It is smaller and faster, and has much lower power. The quaternary ALU
is even competitive with the binary ALU without the data path conversions. It is
a little larger, but it is still faster and uses less power.
Figure 9.16
Binary ALU.
172
MULTI-VALUE NUMERIC DESIGN

TABLE 9.1
Comparison of the Binary and Quaternary ALUs
Binary ALU With Conversion
Quaternary ALU
Binary ALU Without Conversion
Operators
Switches
Delay
Operators
Switches
Delay
Operators
Switches
Delay
4 to 2
8
4
1
2 to 4
4
1
1
com min
8
1
1
10
1
1
8
1
1
ADD
16
13
7
14
5
3
16
8
5
OR
4
9
4
5
2.3
2.3
4
4
2
AND
4
9
4
5
2.3
2.3
4
4
2
XOR
4
9
4
5
2.2
2.2
4
4
2
NOT
4
7
3
4
1
1
4
2
1
SHIFT
16
11
4
16
4
2
16
6
2
Totals
68
58
26
59
16.8
12.8
56
28
14

9.5
SUMMARY
While the encoding analysis and the architecture comparison are somewhat cursory,
they are sufficient to demonstrate that 1 of 4 encoding is an optimal numeric rep-
resentation and that quaternary arithmetic with 1 of 4 encoding is a very viable
option for logically determined system design.
9.6
EXERCISES
9.1. Discuss fours complement arithmetic, and explain how to deal with the sign
digit.
9.2. Design and simulate a completely quaternary micro controller with fours comp-
lement arithmetic.
174
MULTI-VALUE NUMERIC DESIGN

&CHAPTER 10
The Shadow Model of Pipeline
Behavior
The flow of wavefronts through a logically determined pipeline derives from the
behavior of individual cycles and the shared path completeness synchronization
among cycles. The flow of elements controlled by local interactions among the
elements is an extraordinarily diverse phenomenon and has been studied using extra-
ordinarily diverse models including queueing theory [3,62,38,37], traffic flow
models [21], random walk models [14,12], industrial manufacturing production
line models [18], and computer pipeline models [16,9,39,5,23]. Helbing [20] pro-
vides a comprehensive overview of the approaches to modeling self-driven many
particle systems. None of these approaches, however, have generated an intuitively
graspable model that illuminates the fundamental mechanism of wavefront flow
through a logically determined pipeline structure. The shadow model fills this void.
10.1
PIPELINE STRUCTURE
The primary performance measure for a logically determined pipeline is throughput.
The throughput of a cycle is the number of wavefronts that can propagate through a
cycle per unit time. The throughput of a pipeline is the number of wavefronts that
can propagate through the pipeline per unit time. The pipeline throughput is a
result of the individual behaviors of its component cycles.
The first step is to define the behavioral components of the pipeline.
10.1.1
The Cycle Path and the Cycle Period
The cycle period is the sum of the delays around a cycle path as shown in Figure 10.1
For the examples of this chapter the 2 of 2 operator has a delay of three tics and the 1
of 2 operator with inverter has a delay of one tic. The cycle of Figure 10.1 has a
period of 7 tics.
175
