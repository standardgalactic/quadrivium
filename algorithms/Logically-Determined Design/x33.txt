2
1
2
2
1
2
2
1
0
1
B3
0
1
2
carry
registration
stage
carry
registration
stage
carry
registration
stage
Figure 5.11
Full-completion adder and 2D pipelined adder with cycle structure highlighted.
Figure 5.12
Cycle structures for full-completion data path and a 2D pipelined data path.
102
CYCLE GRANULARITY

is a cycle, and the overlap of the ellipses represents shared completeness paths
(registration stages) between the cycles. All cycles share paths along the data
path. In the 2D pipelined data path, some cycles share paths orthogonally to the
data path and some do not. There will be cycles for which the variables of a wave-
front have no dependency relationships and the individual variables of the wavefront
can flow independently along the data path. These include transmission pipelines,
buffer stages, logic operations, format conversion operations, and so forth. If
there are dependency relationships among the variables of a wavefront, then the
cycles must shares paths orthogonally to the data path pipelining dependency
relationships across the data path. These include most arithmetic operations,
searches such as priority encoding, and control operations that steer wavefronts.
5.4
2D WAVEFRONT BEHAVIOR
The 2D pipelined wavefronts flow diagonally through the data path. When the LSV
adder stage has completed its sum variable, there is no logical necessity for it to wait
until the MSV sum variable has been completed. The LSV sum variable can proceed
to flow through the data path. As soon as the LSV variable stage has completed its
carry variable the LSV þ 1 adder stage can proceed to complete its sum variable. As
the carry variable propagates to the MSV adder stage, sum variables are presented to
the data path in succession. The LSV sum variable leads in the data path, and each
successive sum variable lags slightly, resulting in a diagonal wavefront of sum
variables.
As soon as the LSV sum variable has propagated out, the LSV full-adder stage
can receive and propagate the NULL wavefront and then receive and resolve the
LSV variable of the next wavefront. There can be multiple wavefronts simul-
taneously flowing through the ripple carry adder in progressive stages of completion.
This produces a much higher throughput than if all the sum variables waited on full
data path width completion before proceeding to propagate. This is illustrated in
Figure 5.13. The narrow black line in Figure 5.13a is the 2D pipelined ripple
carry adder. The gray lines are consecutive wavefronts propagating through a 2D
pipelined adder. In the full-completion adder, the wide black line of Figure 5.13b,
the gray lines are the consecutive wavefronts that waited for full width data path
completion. The gray line inside the wide black line illustrates the carry propagation
LSV
MSV
• • • •
Figure 5.13
Wavefront flow for 2D pipelining and full-completion pipelining.
5.4 2D WAVEFRONT BEHAVIOR
103

through the full-completion adder and contrasts the two behaviors. The horizontal
distance between the lines illustrates that the 2D pipelined wavefronts have a
much higher throughput than the 1D pipelined wavefronts.
A full-completion ripple carry adder will deliver average case completion beha-
vior across its sum variables depending on its width, but the 2D pipelined ripple
carry adder delivers constant case behavior independent of its width. If the wave-
fronts presented to the adder are propagating at the appropriate diagonal, then the
carry variable of sum Vn will arrive at stage Vn þ 1 at the same time than the wave-
front variables n þ 1 are arriving at the adder stage Vn þ 1. The ripple of the carry
does not cause any delays. It can be seen from Figure 5.13 that as the full-completion
adder gets wider, the carry takes longer and the wavefronts get farther apart. As the
2D pipelined adder gets wider, it just accommodates more concurrent wavefronts,
and the distance between wavefronts remains the same. No matter how wide the
2D adder, 8 digits or 1000 digits, its throughput is constant.
5.4.1
Orthogonal Pipelining Direction
The data path can be orthogonally pipelined either from LSV to MSV or from MSV
to LSV. Different functions demand pipelining in different directions. Most control
variable wavefronts such as MUX and DEMUX select, register file commands,
addresses, and so forth can be piped in either direction. The carry dependency of
addition flows from LSV to MSV. Other functions, such as compare which typically
begins with the sign bit, naturally flow from the MSV to the LSV. Other functions
that shuffle variables, such as bit reverse and barrel shift, do not favor diagonal
wavefronts in either direction but instead favor a vertical slope. Different depen-
dency relationships result in wavefront flows with conflicting slopes, illustrated in
Figure 5.14. LSV leading wavefronts will be called positive slope wavefronts and
MSV leading wavefronts will be called negative slope wavefronts. Wavefront
slope conflict is the primary issue for 2D pipelining.
5.4.2
Wavefront Conflicts
As mentioned above, if the wavefront is propagating at the right slope, then the arri-
val of the variables in the wavefront can occur at a variable stage at the same time
that the orthogonally propagating dependency arrives and there is no waiting. If the
LSV
MSV
• • • •
• • • •
Figure 5.14
Opposing 2D wavefront flows.
104
CYCLE GRANULARITY

wavefront is not at the right slope, then there is waiting. If data path functions
demand opposing slope flow, there is a lot of waiting. Figure 5.15 shows progressive
snapshots of the flow of a wavefront through two stages demanding opposing slope
flow. The orthogonal dependency of function A flows from LSV to MSV, so wave-
fronts flowing through A lead with LSV with a positive slope. The orthogonal
dependency of function B flows from MSV to LSV, so wavefronts flowing through
B lead with MSV with a negative slope.
The LSV variable emerges from function A, but function B will not be ready for it
until its dependency has propagated from its MSV to its LSV. Function B will not
begin propagating until the MSV of function A has emerged and is presented to
function B. So the LSV result variable of function A wait through the orthogonal
propagation of function A and then through the orthogonal propagation of function
B before it can propagate through the LSV of function B. The wavefront flattens out
against function B and then begins emerging with the opposite flow diagonal. The
flow of A is blocked until the LSV of B flows, so the succeeding wavefront flattens
out against A waiting for B to propagate. Wavefront flow conflict can detrimentally
affect the throughput of a data path. But this can be managed.
5.4.3
Managing Wavefront Flow
The first thing to understand is that no matter how conflicted, congested, or how
ragged the wavefront flow becomes along the data path, the system is logically
determined and will perform correctly. One must get used to trusting the logic
flow. It is very different from trusting state sequencing and timing analysis. Mana-
ging the wavefront flow has no impact whatever on the correct logical functioning of
the system. The two issues are completely separate.
The key to performance for a 2D pipelined system is managing the slope of wave-
front flow. This can be achieved with a combination of buffering and data path func-
tion design. The slope of wavefront flow is a function of the forward latency along
the path and the forward latency across the data path. Each 2D pipelined cycle will
typically have two outputs: a result output that propagates along the data path and a
dependency output that propagates across the data path. The forward latency of these
two outputs can be different. If they are about the same, it can be said that the wave-
front propagates with a slope of 458. If the across is slower than along then the slope
will be less than 458. If the across is faster than the along then the slope will be
greater than 458.
LSV
MSV
•••
•••
•••
•••
•••
•••
•••
•••
•••
Figure 5.15
Time sequence of wavefront flow through data path functions demanding
opposing slope flow.
5.4 2D WAVEFRONT BEHAVIOR
105

The function with the smallest slope will dominate and determine the propagation
slope for the system. It is somewhat analogous to the slowest stage of a pipeline. The
variable stages of functions with steeper slopes (fast propagation across the data
path) will always have to wait on input variables from functions with shallower
slopes (slower propagation across the data path).
The throughput of the data path is determined by the distance between wavefronts
along the data path. This is determined by how long it takes successive result vari-
ables to emerge from a cycle of the data path. So the throughput of the data path is
still determined by the slowest cycle of the data path. Another way to say it is that the
throughput will be determined by the slower of the horizontal and vertical outputs of
the cycle. In this context it is not advantageous for one output to emerge before the
other output. There is no advantage, for instance, to compute the carry value faster
than the sum value to achieve faster carry propagation. With 2D pipelining, if the
carry is produced early, it will just have to wait for the variables on the data path.
A fast carry may change the slope of the wavefront, but it will not increase the
throughput. The critical factor is the cycled period itself, and there is no throughput
advantage to one output occurring faster than another.
5.4.4
Wavefront Slope Buffering
Wavefront slopes can be managed with triangle buffering. The triangle buffer is
composed of buffer cycles with no dependency relationships across the data path.
Figure 5.16c illustrates a triangle buffer in terms of cycles. The larger number of
cycles at the LSV side of the data path form a FIFO that stores and delays the leading
variables while the trailing variables catch up. As the buffer crosses the data path,
fewer cycles are needed to form smaller FIFOs. Figure 5.16a shows positive
slope wavefronts being converted to vertical slope wavefronts through the black
LSV
MSV
a. Positive slope to vertical slope
b. Positive slope to negative slope
Figure 5.16
Triangle buffering to manage diagonal wavefront flow.
106
CYCLE GRANULARITY

triangle buffer. The wide end of the triangle buffer has many buffer cycles, and the
narrow end no buffer cycles. The vertical wavefronts can be presented to a clocked
interface or a barrel shifter, for instance, at the full throughput of the data path. With
a thicker triangle buffer in Figure 5.16b, positive slope wavefronts can be converted
to negative slope wavefronts with no loss in throughput.
5.4.5
Function Structuring
The next consideration is the structure of the data path functions themselves.
A design should take into account the wavefront angle needs of functions as they
progress through the data path to minimize the buffering needed to maintain
throughput. A worst case structure would be a data path with alternate functions
demanding opposing wavefront slopes.
5.5
2D PIPELINED OPERATIONS
The operation stages of the data path can be data operations or they can be control
operations. This section provides an example of each.
5.5.1
2D Pipelined Data Path Operations
A data path operation is an integral part of the data path. Wavefronts arrive, flow
through, transform, and continue through the data path. The ripple carry adder of
Figure 5.11 is an example of a data path function. Three wavefronts, A, B, and
carry-in, arrive, flow through the adder and transform, and two wavefronts, the
sum and the carryout, continue through the data paths. A binary comparator is
another example of data path operation.
A Binary Comparator. A binary comparator can be implemented as a 2D pipe-
lined structure to flow from either the LSV or the MSV. Figure 5.17 shows compara-
tors of each type. The comparator of Figure 5.17a flows from MSV to LSV. The
resolution begins with the sign bit. If A is negative and B is positive, then A is
LT B. If A is positive and B is negative, then A is GT B. If both signs are equal,
then it must be remembered whether the signs were positive or negative to resolve
the upstream comparisons. An internal variable with four values—pos, GT, LT, and
neg—is pipelined across the digits of the number. At any digit if a GT or LT resol-
ution is determined, then the comparison is resolved and the GT or LT will continue
propagating to the LSV, consuming the remaining digits of the number wavefront.
The final output at the LSV is a 3 value variable with the EQ, GT, and LT. If the
resolution continues to be equal, then the final result is EQ; otherwise, it is GT or LT.
The binary comparator can also be pipelined from LSV to MSV as shown in
Figure 5.17b. In this case the highest order bit difference is detected and piped up
the digits to the sign bits. The final resolution cannot be determined until the sign
bits are encountered in the MSV stage.
5.5 2D PIPELINED OPERATIONS
107

GT LT
EQ B A
00
01
10
11
AB
