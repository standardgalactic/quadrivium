P
P
P
P
P
J
A
K
A
P
P
P
P
P
P
X output
A
B
IK -> LI
JK -> IJ
KK -> LK
R
R
R
R
R
R
R
R
R
R
R
R
=
=
=
=
=
=
=
=
=
IJ -> KJ
JJ -> KK
KJ -> KL
II -> JK
JI -> JI
KI -> KI
AB -> XY
Figure 6.13 The complete four-value expression.

NOT
AND
OR
Rotate
I
K
J
K
J
I
L
J
K
L
I
Equal
I
K
J
K
J
I
K
L
J
K
L
I
J
I
K
L
L
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
L
Priority
I
K
J
K
J
I
L
L
K
J
I
L
K
J
J
L
K
K
K
L
L
L
L
L
I
K
J
K
J
I
L
L
I
I
I
I
I
I
I
J
I
I
I
K
K
J
I
L
Assert
Figure 6.14 The four-value operators and the Boolean operators.

6.3 A UNIVERSAL FOUR-VALUE OPERATOR
In Boolean logic there are two universal operators, NAND and NOR, that
can mimic the other functions and that are each suffi cient to completely
express Boolean processes. Is it possible to express a single four-value opera-
tor capable of mimicking the behavior of the four operators: rotate, equality,
assert, and priority. And is it suffi cient to completely express any four-value
process?
A UNIVERSAL FOUR-VALUE OPERATOR 93

ALONG THE SPECTRUM
Because a large number of convention choices are available, such as what
the rotation sequence will be, what the TRUE and FALSE values will be,
what the DEFAULT value will be, and what the standard recognition name
will be, there can be many different confi gurations of operators providing a
certain amount of fl exibility in the confi guration of a universal operator. The
operator shown in Figure 6.15 was arrived at with little effort and will be the
focus of the discussion.

The primary diffi culty with a universal operator is the need to perform
value rotation. This means that the result values of all operators are
always rotated and the mapping of values to meanings in the expression
are always becoming skewed. In a Boolean logic circuit expressed with
NAND gates, for instance, if one logic stage is interpreted in terms of positive
logic, the next logic stage will be interpreted in terms negative logic. With
multi-value expressions, the mapping of meaning to values, for example, which
value represents TRUE, will rotate through as many stages as there are
values.

For the present four-value example, the result values will simply be rotated
between operations to maintain a constant mapping of value to meaning and
a simple correspondence with the previous examples. The purpose here is
simply to show that a universal operator is possible. The fi rst step is to show
how it mimics each of the four operators.

6.3.1 The Rotate Operator
Setting one input to a constant I will cause the other input to be rotated. The
behavior of the universal operator is limited to one row or one column. The
rotate mapping is shown in Figure 6.16.

U
I
I
K
J
K
J
I
L
