
In each population of values only certain associations form a name of a value
K
L
J
K
Q
R
P
O
K
L
J
K
W
W
X
W
OQ[W] OR[W] PQ[W] PR[X]
“fan-out input values”
A[g,k,o] B[h,l,p]
C[G,K,O] D[H,L,P]
E[I,M ,Q] F[J,N,R]
GI[S] GJ[T] HI[S] HJ[S]
KM[U] KN[U] LM[V] LN[U]
OQ[W] OR[W] PQ[W] PR[X]
“fan out input to second half-adder”
SU[a,c,e] SV[b,d,f] TU[b,d,f] TV[b,d,f]
ga[i] gb[j] ha[i] hb[i]
kc[m] kd[m] lc[n] ld[m]
oe[q] of[q] pe[q] pf[r]
im[ s ] in[ t ] jm[ t ] jn[ t ] “sum”
qW[ u ] qX[ v ] rW[ v ] rX[ v ] “carry out”
“fan-out input values”
A[g,k,o] B[h,l,p]
C[G,K,O] D[H,L,P]
E[I,M ,Q] F[J,N,R]
GI[S] GJ[T] HI[S] HJ[S]
KM[U] KN[U] LM[V] LN[U]
OQ[W] OR[W] PQ[W] PR[X]
“fan out input to second half-adder”
SU[a,c,e] SV[b,d,f] TU[b,d,f] TV[b,d,f]
ga[i] gb[j] ha[i] hb[i]
kc[m] kd[m] lc[n] ld[m]
oe[q] of[q] pe[q] pf[r]
im[ s ] in[ t ] jm[ t ] jn[ t ] “sum”
qW[ u ] qX[ v ] rW[ v ] rX[ v ] “carry out”
Figure 7.9 Mapping of value transform rules from operators.

Figure 7.10 Set of value transform rules for full-adder with completeness boundaries.

BOUNDARIES OF COMPLETENESS BEHAVIOR 107

COMPOSING BOUNDARIES
transform rule which are shown circled. The value transform rules involved
in each resolution stage that assert the values of the succeeding population,
are shown above the arrows. The completeness boundaries of the resolution
progression are shown also as encompassing ovals.

The population of values at each stage of resolution is unique. There is no
ambiguity of association or interaction at any stage of the resolution. The
spontaneous individual behavior of indiscriminately associating values reliably
and unambiguously resolves to a correct result. The progression of behavior
is identical to the progression of behavior of the association expression of
Figure 7.5.

While completeness boundaries can exist among the behaviors of a pure
value expression, it may not be a sensible form of pure value expression. A
pure value expression is capable of exhaustive global association and breaking
the association of values into progressive steps defeats this expressivity. The
example of Figure 7.2 can be expressed as a pure value expression below using
the same value assignments for input and output shown in Figure 7.8 and using
three-value transform rule names. The expression resolves with two concur-
rent behaviors, and fewer values and value transform rules are required.

ACE[s,u] ACF[t,u] ADE[t,u] ADF[s,v]
BCE[t,u] BCF[s,v] BDE[s,v] BDF[t,v]
7.1.3 Greater Composition
Full-adders can be composed via their boundaries into a multi-bit ripple-carry
adder. A new completeness boundary is formed about the ripple-adder. The
previous boundaries about the full-adder and internal to the full-adder remain
OR[W]
GJ[T]
KN[U]
B[h,l,p]
C[G,K,O]
F[J,N,R]
pf[r]
hb[i]
ld[m]
im[s]
rW[v]
TU[b,d,f]
T
U
W
h
l
p
b
f
W
h
p
d
l
m
r
W
i
s
v
B
C
F
G J
K
N
O
R
h
l
p
Figure 7.11 Progression of resolution for pure value expression with completeness
boundaries.


intact. A four-bit adder and its boundaries are shown in Figure 7.12. The
ripple-adders can be composed into multipliers, dividers, and so forth. Indefi -
nitely complex expressions can be composed with bigger networks of associa-
tion composition.

An appreciation stride can be attributed to each boundary. Each Boolean
function can appreciate two differentnesses among four input names. Each
full-adder can appreciate four differentnesses among eight input names. The
four-bit adder can appreciate 32 differentnesses among 512 input names.

7.1.4 Summary
Larger expressions with a greater stride of appreciation can be composed by
associating the boundaries of lesser expressions with lesser strides of apprecia-
tion. When behavior boundaries are composed their behavior must be coor-
dinated. The primitive form of coordination is the completeness criterion that
can be expressed with the NULL convention for association expressions and
that can be expressed directly with the value transform rules for pure value
expressions. The binary full-adder has suffi ced to illustrate the fi rst-order
composition of completeness boundaries, the variety of possible boundary
structures, and the coordinated behavior of the composed boundaries.

SUM0
SUM1
SUM2
CARRY
SUM3
C
X0
Y0
X1
Y1
X2
Y2
X3
Y4
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
four-bit adder
boundary
