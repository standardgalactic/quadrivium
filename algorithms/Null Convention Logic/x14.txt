the behavior of the process. No supplemental assistance is needed.

Computer science is at cross purposes with itself. It has adopted conceptual
foundations tailored for the aims of mathematicians but that are not appropri-
ate for the aims of computer science. While mathematics is concerned with
the nature of a process independent of how the process might be expressed,
CONCLUSION 33

THE SIMPLICITY OF CONCURRENCY
computer science is concerned with the variety of ways process can be expressed
independent of what process might be expressed. However, computer science
has adopted a conceptual foundation from mathematics designed to fi lter out
variety of expressivity [6]. What is usefully primitive for one endeavor is not
necessarily what is usefully primitive for another endeavor. While mathemat-
ics purposely avoids concurrency, computer science must embrace concur-
rency in its foundations.

REFERENCES
1. D. L. Dill. Trace Theory for Automatic Hierarchical Verifi cation of Speed-
Independent Circuits. Cambridge: MIT Press, 1989, pp. 2, 3.

2. M. Ben-Ari. Principles of Concurrent Programming. Englewood Cliffs, NJ: Prentice
Hall International, 1982, p. 18.

3. C. A. R. Hoare. Communicating Sequential Processes. Englewood Cliffs, NJ:
Prentice Hall International, 1985.

4. P. B. Hanson. The Architecture of Concurrent Programs. Englewood Cliffs, NJ:
Prentice Hall, 1977.

5. E. W. Dyjkstra. Cooperating sequential processes. In Programming Languages, ed.

by F. Genuys. New York: Academic Press, 1968, pp. 42–112.

6. K. M. Fant. A critical review of the notion of the algorithm in computer science.

Proceedings of the 21st Annual Computer Science Conference, New York: ACM
Press, February 1993, pp. 1–6.

7. K. M. Fant. Logically Determined Design: Clockess System Design with NULL
Convention Logic. Hoboken, NJ: Wiley Interscience, 2005.

8. C. Seitz, ed. Introduction. In Resources in Parallel and Concurrent Systems. New
York: ACM Press, 1991, p. ix.

9. I. E. Sutherland and J. Ebergen. Computers without clocks. Scientifi c American 287
(August 2002): 62–69.


Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright © 2007 John Wiley & Sons, Inc.

DEHUMANIZING
COMPUTER SCIENCE
Humans have always been integral to the works of mathematics. Mathemati-
cians devise symbol systems, including algorithms, to manipulate the symbols.

They then enliven the symbol system by manipulating its symbols on paper
according to the rules of an algorithm. While the manipulating human has been
eliminated and replaced with a machine, the humans that conceive symbol
systems and the humans that engineer the manipulating machines remain in
the works. However, it is possible to eliminate these humans as well.

3.1 THE HUMANS IN COMPUTER SCIENCE
Today computer science with its mathematical heritage retains humans in the
works. These humans constitute an element of arbitrarily suffi cient expressiv-
ity. If one is only interested in the nature of a symbol system independent of
how it might be expressed, then any workable expression of a symbol system
will suffi ce. Although appeal to arbitrarily suffi cient expressivity can be con-
veniently effective, if one is seeking insight into the nature of expression itself,
the presence of arbitrarily suffi cient expressivity fundamentally undermines
the effort.

If there is an arbitrarily suffi cient interstitial mortar, then the conceptual
bricks do not have to fi t well. Any concepts can be cobbled together into an
apparently universal whole that is adequately functional and that can even
appear to be simple in some compelling sense. But the element of arbitrary

DEHUMANIZING COMPUTER SCIENCE
suffi ciency eliminates the necessity of the concepts fi tting together and pre-
cludes the possibility of discovering appropriate concepts and how they might
fi t. A fudged model cannot provide insightful understanding or unifying con-
nections. Appeal to arbitrary suffi ciency can reveal nothing about essential
necessity.

Saying a human does it in computer science is like saying a god does it in
physics. The humans in the works both enable the computer and deny it theo-
retical closure. This diffi culty of humans in the works is explicitly recognized
in the view of the computer as an artifact and the acceptance that computers
cannot be theorized about in the same sense that natural phenomena can be
theorized about [2].

“If what the computer scientist says about computers in theory does not
agree with behavior, he or she can always change the computer” to match the
theory [1].

The essential problem is that there is no way to compare conceptual models.

The humans in the works ensure that all models, even those with partially
characterizing or misleading concepts, will appear equally successful. There is
no criterion of failure, no hint of inadequacy. With the inability to theorize
the only approach to understanding the subject appears to be experience and
experiment, and the only approach to managing it appears to be imposed
rationale and convention. Imposing mathematical rationale and convention
seems reasonable and convenient.

But are computers and symbol systems as artifactual as supposed? Are
humans necessary to symbol systems. Symbolic computing mechanisms exist
in nature, particularly in biology. Computer science aspires to encompass
these symbol systems. A conceptual model of nature’s symbol systems cannot
have humans in the works. Can a conceptual model of symbolic expression be
conceived that does not require humans?
3.2 ELIMINATING THE HUMANS
It has long been recognized that the symbol-manipulating human might be
replaced by a machine. The development of computer science to date is all
about replacing the manipulating human in the works with a spontaneously
behaving machine: the computer. But there are still humans involved in the
conception of the symbol system and in the design of the mechanism. These
humans are somewhat more diffi cult to remove.

3.2.1 The Engineering Human
The diffi culty with removing the engineering human is that the manipulating
human was not completely eliminated to begin with. The manipulating human

provided something more than just the enlivenment of the symbolic expres-
sions. The human also provided coordination behavior. Symbolic expressions
do not include the expression of coordinating behavior. So simply enlivening
a symbolic expression with spontaneously behaving symbols and their interac-
tions is not suffi cient. Coordination behavior must also be added to the en -
livened expression, and this is added by a human engineer. The diffi culty is
illustrated with a Boolean expression of a full adder expressed in terms of two
half adders shown in Figure 3.1.

The Boolean logic expression can be enlivened by mapping the symbolic
expression to spontaneously behaving symbols and spontaneously behaving
symbol interactions (functions). When a new input state is presented to the
inputs of the Boolean combinational expression, a stable wavefront of correct
result values fl ows from the input through the network of functions to the
output. But since Boolean functions are continuously responsive and since
some functions and signal paths can be faster than others, invalid and indeter-
minate result values may speed ahead of the stable wavefront of valid results.

This rushing wavefront of indeterminacy may cause the output of the Boolean
expression to transition through a large number of incorrect values before the
stable wavefront of correct result values reaches the output and the expression
as a whole stabilizes to the correct resolution of the presented input. The
behavior of the enlivened symbolic expression is not determinate.

This indeterminate behavior does not occur when the manipulating human
with a pencil enlivens the expression. The human can determine when all the
input symbols are available for each function and resolve each function in its
proper turn. The resolution of the expression fl ows to completion with no
ambiguity of behavior.

There is no way to determine, solely in terms of the behavior of the enliv-
ened expression itself, when the stable wavefront of correct results reaches
the output. However, an enlivened expression can be relied on to eventually
stabilize to a correct result state. After presentation of an input, it is suffi cient
to wait an appropriate time interval, characterized by the slowest propagation
path through the expression, to ensure that the wavefront of stable result
values has propagated through the expression and that the output of the
expression has stabilized to the correct resolution of the presented input. This
time interval, however, is not symbolic, is implementation specifi c, and cannot
be derived from the symbolic expression. It requires the participation of an
engineering human.

CI
X
Y
S
CO
Figure 3.1 Boolean full-adder.

ELIMINATING THE HUMANS 37

DEHUMANIZING COMPUTER SCIENCE
The arbitrarily expressive engineering human in the works contrives to
make the insuffi ciently expressive enlivened Boolean expressions work. If a
Boolean logic expression cannot behave correctly on its own without the
assistance of a human, it must be considered a conceptual failure. This circum-
stance can be viewed in two ways. One can assign theoretical primacy to
Boolean logic anyway and regard this circumstance as showing that humans
are necessary and cannot be eliminated from the works of symbolic expres-
sion. Or one can search for a model that works on its own symbolic terms
without human assistance.

3.2.2 Eliminating the Human Engineer
The Boolean logic expression of the full-adder can be symbolically expressed
in a different way. The Boolean logic expression uses two unique symbols, 0
and 1, and unique places within the expression to represent different meanings
within the expression. Each unique meaning is expressed as a combination of
symbol and place (wire). The 0 or 1 on one wire is different from the 0 or 1
on a different wire. These unique place-value meanings of the Boolean logic
expression can be mapped into an expression purely in terms of unique
symbols.

Imagine that there are a multitude of unique symbols available such that
each unique meaning can be represented by a unique symbol. Such a mapping
of unique symbols to meanings is shown in relation to the Boolean circuit in
Figure 3.2. Two unique symbols for each wire in the circuit represent the 0
