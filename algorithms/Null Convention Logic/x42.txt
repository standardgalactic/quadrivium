S → A
T → B
U → C
V → D
G → F
H → E
The name-forming values A, B, C, and D are next conditioned with coor-
dination values a and b. The result values E and F assert the coordination
values as well as the fi nal result values of the new function is shown in Figure
7.30. The expression is initialized with one a and one b. When an S or T
appears, the a will allow it to transform to an A or B. When a U or V appears,
the b will allow it to transform to a C or D. A single name is formed and
resolved to F or E. An F will transform into G, a and b. An E will transform
into an H, a and b. In both cases the a and b are regenerated and can allow
another transformation of S or T and U or V into A or B and C or D, allowing
another name to form and be resolved to F or E. There is no confusion with
AC[F]
AD[E]
BC[E]
BD[E]
Sa[A]
Ta[B]
Ub[C]
Vb[D]
F[Gab]
E[Hab]
Figure 7.30 Coordination of presentation with a value cycle.

COORDINATING PURE VALUE EXPRESSIONS 125

COMPOSING BOUNDARIES
the previous F or E because it transformed to G or H when the a and b were
asserted.

The oval in Figure 7.30 indicates a pure value cycle. The S, T, U, V, F, and
E rules buffer the internal function from the general pure value expression.

The coordination values a and b circulate around the function coordinating
the formation of names and assertion of results in strict sequence, creating an
isolated and coordinated value domain within the greater pure value expres-
sion. There can still be many Ss, Ts, Us, and Vs, but there will never be more
than one A or B and never more than one C or D.

The expression is an isolated locus of cyclic behavior with coordinated
completeness boundaries. The behavior of the value cycle is identical to the
behavior of the association cycle of Figure 7.13. Like the association cycle,
value cycles can be interlinked to coordinate the fl ow of values among them.

7.4.2 Coordinating Cycles
Value cycles can coordinate their behavior by combining their buffering rules
and sharing coordination values. This is identical to interlinking the complete-
ness protocols of association cycles through shared data paths. Consider the
intersection of cycle 1 and cycle 2 of Figure 7.31. The output rules for cycle 2
are
S[Ayz]
T[Byz]
Fn[Gab]
En[Hab]
AC[F]
AD[E]
BC[E]
BD[E]
Sa[Ayz]
Ta[Byz]
IK[S]
IL[S]
JK[S]
JL[T]
Qy[Iwx]
Ry[Jwx]
Ub[Ccd]
Vb[Dcd]
Γz[Kwx]
Πz[Lwx]
MO[U]
MP[V]
NO[V]
NP[V]
Wc[Mwx]
Xc[Nwx]
Yd[Owx]
Zd[Pwx]
Cycle 1
Cycle 2
Cycle 3
Cycle 6
Cycle 5
Cycle 4
Cycle 7
Cycle 8
Function 1
Function 2
Function 3
Figure 7.31 Coordinated fan-in cycle structure in a pure value expression.


The values y and z are the coordination values for cycle 2. The input rules for
cycle 1 are
Sa[A]
Ta[B]
The value a is the coordination value for cycle 1. The two rule sets can be
combined to coordinate the behavior of cycle 1 and cycle 2 as follows:
Sa[Ayz]
Ta[Byz]
Assume that cycle 2 has asserted a result value S. The S will not transform
into an A until the coordination value of cycle 1 is present. The A becomes
an isolated input for cycle 1, and the y and z allow another input to be pre-
sented in cycle 2. The S will not transform until the a is present. Cycle 2 cannot
receive a new input name until the y and z are asserted. The y and z will not
be asserted until an a is present. An a will not be present until cycle 1 is ready
to receive a new input name. When the a is present, the name Sa is formed
and resolved to Ayz. Cycle 1 receives a new input value, and cycle 2 is enabled
to receive a new input value.

Each cycle is isolated by its circulating coordination values and its value
transform rules embodying the coordination protocol.The fl ow of name for-
mation and resolution from cycle to cycle is fully coordinated and fully deter-
mined by the interlinked completeness protocol. There is no ambiguous
behavior. Large structures of cycles can be coordinated in a pure value expres-
sion via circulating coordination values. Figure 7.31 shows an extended fan-in
structure of coordinated cycles in a pure value expression. Each oval is an
isolated value cycle with interlinked coordination behavior.

Figure 7.32 shows a buffering rule set for a fan-out relationship from
cycle 1 to cycle 2 and cycle 3. The value n is a coordination value for cycle
3, and G and H are input values for cycle 3. The value m is a coordination
Fnm[GKab]
Enm[HLab]
AC[F]
AD[E]
BC[E]
BD[E]
Sa[Ayz]
Ta[Byz]
Ub[Ccd]
Vb[Dcd]
Cycle 1
Cycle 3
Cycle 5
Cycle 4
Cycle 2
Figure 7.32 Coordinated fan-out cycle structure in a pure value expression.

COORDINATING PURE VALUE EXPRESSIONS 127

COMPOSING BOUNDARIES
value for cycle 2, and K and L are input values for cycle 2. An asserted F or
E will not transform until both cycle 2 and cycle 3 are ready to receive
input.

Each oval is a cycle with a progression of three sets of value transform rules.

One set coordinates the presentation of name forming values, a second set
resolves the formed name, and a third set coordinates the assertion of result
values. Cycle behavior is coordinated by combining a fi rst rule set of one cycle
with a third rule set of another cycle. While the lower case coordination values
circulate within each cycle, the upper case data values propagate from cycle
to cycle.

The coordination values and the buffering value transform rules interlink
the cycles, creating pipeline behavior within the pure value expression. Appre-
ciation of differentness propagates progressively and unambiguously through
the pipelined expression in the midst of a teeming sea of values.

It must be emphasized that there is nothing physical or spatial about these
cycles. The thengs and their asserted values are rattling around indiscrimi-
nately in a shaking bag or a frothing soup. The cycles and their structure are
loci of behavior expressed in terms of name formation dependency relation-
ships among value transform rules.

7.4.3 Integrating the Expression of Function and Coordination
The expression of coordination can be integrated into each internal expression
just like the coordination was integrated in the association expression of
Figure 7.15. Each cycle is still defi ned by circulating coordination values and
comprises three sets of rules: allow name forming values to present a name,
resolve the formed name, project the result values. Each group of rules
expresses a name resolution plus coordination for another cycle. Figure 7.33
shows the integration of a portion of the expression of Figure 7.31. There are
fewer rules, but the names and results for each rule are more complex.

Each expression directly incorporates coordination values, coordinating the
presentation of its result values to successor functions and coordinating its
own name formations from the results of predecessor functions. The functions
can resolve more complex names from more different sources. An intertwined
complexity of behavior can be expressed that strains human understanding
but whose behavior is nevertheless fully coordinated and unambiguous.

7.4.4 Associating Pure Value Expressions
The progression of different result values cannot continue indefi nitely in a
pure value expression. Infi nite differentness of value or even arbitrarily ade-
quate differentness of value is not assumed. Values must eventually be reused
to express other differentnesses. A value cannot be reused in a single pure
value expression, so there must be other isolated pure value expressions that
use the same value to express different meanings.


A pure value expression can extend its stride of appreciation by projecting
values beyond itself into another pure value expression. The value transform
rules of a pure value expression express an input value by including it as a
name-forming value for some value transform rules but not as a result value
