another association expression can encounter it and interpret it in terms of its
own appreciation behavior.

11.1.8 Symbolic Processes
Rather than relying on the inherent appreciation behaviors of a receiving
association expression, a symbolic referential expression might include its own
unique rules of appreciation behavior expressed with the same symbols and
expressed simply enough for any association expression to grasp in terms of
its own inherent appreciation behaviors. This will be called a symbolic process
expression. A symbolic process expression can then be appreciated by a
receiving association expression in terms of manipulating the symbolic expres-
sion according to the symbolic rules of behavior instead of being appreciated
in terms of its own inherent behaviors. A symbolic process becomes not just
AUTONOMOUS TO REFERENTIAL 185

REFERENTIAL AND AUTONOMOUS PROCESS EXPRESSION
similarly interpreted but identically interpreted among association expres-
sions. The variations of individual expression and appreciation can be mini-
mized to insignifi cance with the formalism of symbolic process expression.

Symbolic process expression relies on a very high level of persistence.

Symbolic process expression fails if the symbols change or if the behavior rules
change. The whole point is that, among themselves and through time, all par-
ticipating association expressions see the same association structure of symbols
and the same rules of behavior.

11.1.9 Transcendent Expression
Symbolic process expression is an external form of expression complete in
itself and unambiguous in its own terms: a universal language identically
appreciable by all expressions transcending the limitations of the association
expressions themselves. Symbolic process expression offers a stable standard
of communication among association expressions and a persistence of memory
greater than the association expressions themselves.

11.2 REFERENTIAL TO AUTONOMOUS
A symbolic process expression is of no signifi cance in itself. It is only signifi -
cant in that the expressed behavior is realized. There are a number of ways
that the behavior of a symbolic process expression can be realized.

11.2.1 By Association Expression
An association expression can interpret the symbolic process expression
according to its rules of behavior.

11.2.2 By Artifi cial Expression
A symbolic process expression and its rules of behavior can be embodied in
a specifi cally constructed artifi cial association expression.

By Direct Mapping The symbols and their interaction rules can be mapped
to spontaneous behaviors, and the behaviors organized according to the sym-
bolic process expression. The symbolic process expression becomes an autono-
mously behaving artifi cial expression that realizes the single symbolic process
expression.

By Interpreter An artifi cial expression that embodies just the rules of
be havior and a large symbol memory can be constructed to interpret symbolic
process expressions. Symbol values can be physically represented in a common
addressable memory, and an artifi cial expression can be built that can manipu-

late the physical representations of the symbols in memory according to the
rules of behavior by shuffl ing symbol values around in memory.

A referential symbolic process expression can be translated into the inter-
preterâ€™s internal referential form of expression and placed in its memory. The
behavior of the expression is then realized, as the artifi cial interpreter expres-
sion is directed by the internal expression of the symbolic process and manages
the fl ow of content through memory.

An interpreter can be general in that any symbolic process expression might
be mapped into it and have its symbols manipulated.

Mixed Artifi cial Expression The direct mapping and the interpreter are
two extremes of realizing the behavior of a symbolic process expression with
artifi cial autonomous expression. There can also be a middle ground, which
is partly interpretive and partly directly mapped.

The most familiar mixed artifi cial expression is the conventional computer.

Expressions mapped to the computer are partitioned hierarchically at the level
of arithmetic/logical operations. The greater partition expression is a network
of references to arithmetic/logical operations, and the lesser partition expres-
sions are the arithmetic/logical operations. The lesser expressions are directly
mapped to artifi cial autonomous expressions, and the greater expression is
interpreted. A set of directly mapped arithmetic and logical operations are
collected in an arithmetic-logic unit (ALU) within which they can be refer-
enced by an interpreter. The greater expression is mapped into a sequence of
references to memory and references to the available arithmetic-logic func-
tions and placed into the memory of the interpreter. A sequence controller
then scans the internal referential expression, enlivening it in terms of content
fl ow through memory and through the ALU.

Convenient Realization The mixed artifi cial expression is a convenient
means of realizing a large class of symbolic process expressions. The inter-
pretive aspect makes it a general interpreter. Symbolic process expressions
mapped into the mixed artifi cial expression do not have to refer to any of the
ALU operations, in which case it behaves as a pure interpreter. An expression
that does use the ALU functions can behave much more effi ciently. A wide
range of referential expressions can be quickly and simply enlivened by
mapping them into a mixed artifi cial expression.

11.3 ECONOMIES OF REFERENTIAL EXPRESSION
Because a symbolic process expression does not behave, it can transcend the
gritty details of autonomous expression and offer a convenient economy,
generality, and fl exibility of expression by taking advantage of various forms
of shorthand expression. It can assume universal conventions that need not
be explicitly expressed. It can assume common subexpressions that need not
ECONOMIES OF REFERENTIAL EXPRESSION 187

REFERENTIAL AND AUTONOMOUS PROCESS EXPRESSION
be explicitly expressed. It can be convenient to an originator of expression
such as a human instead of specifi c to some autonomous behavior environ-
ment. It can be general in the sense that a single symbolic referential expres-
sion can represent and map to many other forms of referential and autonomous
expression.

11.3.1 Hierarchical Parsimony
A common subexpression that occurs many times in an expression can be
referred to many times but need be symbolically expressed only once. If a
process has 1000 additions, a symbolic process need not explicitly express the
adder 1000 times. It can express the adder once and refer to the adder expres-
sion 1000 times. When mapping to autonomous behavior, the references can
be expanded. The single adder expression might be replicated to 1000 autono-
mous adder expressions, and one associated with each reference or a single
autonomous adder expression might be used over and over in time, with each
reference being associated to a single autonomous adder in sequence. A ref-
erential symbolic process expression is a template that can be mapped to other
forms of referential symbolic process expression and to forms of autonomous
expression.

Multiple references to a common expression is a hierarchical partition
relationship and can be repeated at each level of hierarchy. No part of a ref-
erential symbolic process expression has to be expressed more than once,
enabling a convenient economy of expression when commonalities of expres-
sion are present.

11.3.2 Partitioning Uniformity
Each reference is both a hierarchical and a lateral boundary and the structure
of references directly expresses the hierarchical and lateral structure of behav-
ior boundaries of the process. The hierarchy bottoms out with value transform
rules, which have no hierarchical or lateral reference structure. The lateral
structure has no inherent limits.

A symbolic process expression can assume that all of its boundaries are
identical, providing a uniform template that can be partitioned in many ways
and mapped to varied autonomous behavior domains. The identical referen-
tial boundaries of the symbolic process expression might be partitioned across
multiple transistors, across multiple instructions, across multiple threads,
across multiple computers, into different hierarchical regimes, and so on.

11.3.3 Coordination Simplicity
A referential symbolic process expression assumes that its identical boundar-
ies are coordinated identically with a universal coordination protocol in terms
of the completeness criterion and need not explicitly express coordination

behavior. As a referential symbolic process expression is mapped to autono-
mous behavior, its boundaries get mapped into and stretched across different
regimes of expression, both hierarchical and lateral, each requiring a different
coordination protocol. Lower level coordination boundaries might be mapped
to the completeness criterion and cycles or to time intervals and a clock.

Higher level coordination boundaries might be mapped to sequence control,
fork and join, semaphores, messages, and so on. Even higher level boundaries
might be mapped to various forms of communication channels. Each autono-
mous coordination protocol implements in one way or another the behavior
of the completeness criterion. A symbolic process expression provides a
uniform template ready to be stretched and mapped and fi lled in with appro-
priate coordination behaviors.

11.3.4 Resource Indifference
A referential symbolic process expression can be completely referential down
to the expression of the values and the value transform rules. It need not
consider any particular detail of autonomous behavior or condition of avail-
able autonomous resources. There might be 1000 references to add, but the
symbolic process expression need not be concerned with whether there might
be 1000 adders available or only one adder available or with how an adder
might be expressed. The issues related to specifi c or limited autonomous
resources can be ignored by the symbolic process expression and resolved
when it is mapped to autonomous expression.

11.4 ARCHETYPAL REFERENTIAL EXPRESSION
A symbolic process can ignore many of the messy details of autonomous
expression and express just essential relationships. It can use shorthand expres-
sion and assume universal conventions. It provides a template of essential
relationships that can be mapped to many other forms of referential expres-
sion and to a wide range of autonomous expressions. Might it be possible that
there is a most general, most convenient, most mappable form of symbolic
process expression for a given process: a single archetypal expression of a
process that captures the essence of the process and that can map to all pos-
sible referential and autonomous expressions of the process?
11.4.1 Elusive Essence
The essence of a process is the interactions of the differentnesses independent
of how the differentnesses and their interactions might be expressed. While
this essence is embodied in every possible expression of a process, like a pla-
tonic form, the essence itself cannot be directly expressed. How does one
express something independently of how it might be expressed?
ARCHETYPAL REFERENTIAL EXPRESSION 189

REFERENTIAL AND AUTONOMOUS PROCESS EXPRESSION
Consider binary digit addition. The essence of binary digit addition that all
expressions of binary digit addition must relate to is the mapping of values,
