S
CO
Full-Adder
CI
X
Y
S
CO
S
C
CI
X
Y
S
CO
N
N
N
N
N
Figure 7.1 A full-adder expression.

Figure 7.2 Composed full-adder expression.

Figure 7.3 Full-adder in terms of two input operators.


Consider that the XOR is not available and only AND, OR, and NOT are
available; the expression might look like Figure 7.4. Again, the completeness
boundaries of the functions accumulate so that the boundaries of the full-
adder are completeness boundaries.

In Figure 7.4 the full-adder is expressed in terms of two half-adders. The
boundaries of the half-adders shown in Figure 7.5 added as internal boundar-
ies are completeness boundaries also. The boundaries of any subnetwork will
be completeness boundaries. While all boundaries defi ned within the greater
network of primitive operators are arbitrary, some might seem less arbitrary
than others. Internal boundaries are usually defi ned for convenience of
expression.

Consider that only two-value NULL Convention Logic operators are avail-
able. The 2NCL pure association expression corresponding to the full-adder
of Figure 7.5 is shown in Figure 7.6. The two expressions have the same bound-
ary structure.

CI
X
Y
S
CO
N
N
N
N
N
N
N
N
N
CI
X
Y
S
CO
N
N
N
N
N
N
N
N
N
AND
OR
AND
AND
S0
S1
X0
X1
Y0
Y1
OR
CO0
CO1
AND
OR
AND
AND
CI0
CI1
NOT
NOT
NOT
NOT
Figure 7.4 Full-adder in terms of more limited two input operators.

Figure 7.5 Half-adder boundaries of the full-adder.

Figure 7.6 NULL Convention Logic pure association expression of full-adder.

BOUNDARIES OF COMPLETENESS BEHAVIOR 105

COMPOSING BOUNDARIES
All expressions of a process are not identically partitionable. The minterm
expression of Figure 7.7 expresses the same full-adder process but its bound-
ary structure is quite different.

7.1.2 Pure Value Boundaries
Consider that there are no operators at all but there are lots of values and
value transform rules. The full-adder of Figure 7.5 can be mapped directly into
a pure value expression. The Boolean logic expression uses unique places
within the association expression and two unique symbols, 0 and 1, to repre-
sent unique differentnesses within the expression. The 0 or 1 on this associa-
tion path is different from the 0 or 1 on that association path. In Figure 7.8
each association path is mapped into two unique symbols, one representing a
0 symbol on the path and one representing a 1 symbol on the path. The
mapping for symbols C, D, E, and F are shown below.

C means X = 0
D means X = 1
E means Y = 0
F means Y = 1, and so on, for each path in the circuit.

The value transform rules for resolving each locus of interaction corre-
sponding to each operator are derived from the symbols associated with each
S
CO
CXY
Y
X
CI
N
N
N
N
N
N
N
N
N
N
CI
X
Y
S
CO
A,B
C,D
E,F
G,H
I,J
K,L
M,N
O,P
Q,R
S,T
U,V
W,X
g,h
a,b
k,l
c,d
o,p
e,f
i,j
m,n
q,r
s,t
u,v
Figure 7.7 Minterm expression of full-adder.

Figure 7.8 Full-adder with values assigned to paths.


operator. The derivation of the value transform rules for the operator sur-
rounded by O, P, Q, R, W, and X is shown in Figure 7.9.

The resulting set of derived value transform rules are shown on the left side
of Figure 7.10. A pure value expression is structured by relationships among
the value transform rules and can have the same boundaries as an association
expression. In a pure value expression a completeness boundary is a locus of
mutually exclusive assertion. At the input, only one of C or D will be asserted.

Further in only one of U or V will be asserted, and so on. In the association
expression of Figure 7.8 mutual exclusivity is expressed with the paths (wires)
that can only assert one value at a time of two possible valves. In the pure
value expression the mutual exclusivity is explicitly expressed in the value
transform rules. If mutual exclusivity is expressed in the presentation of the
input of the expression, it will be maintained through the resolution and
expressed at the output of the expression. The completeness boundaries of
the derived pure value expression coincide with the loci of mutual exclusivity.

Completeness boundaries identical to the boundaries in Figure 7.5 are shown
on the right side of Figure 7.10.

Figure 7.11 shows the progression of resolution for input values B(1), C(0), and
F(1) that is equivalent to the binary name 101 resolving to a sum of s (0) and a
carry of v (1) as a progression of populations of symbols in a shaking bag.
