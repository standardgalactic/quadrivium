tical fl ow path as with a multi-value paths of a pure association expression
or digits of place-value numbers.

Example 12.17 shows an example of bundling and mutual exclusion. The
defi nition of the OR is in terms of dual-rail coding. The two rails are bundled
in places A and B of the invocation. The two bracket pairs in the source
list of the defi nition associate with the $A and $B of the invocation. A0< >
A1< > are unbundled from $A. B0< > B1< > are unbundled from $B. A0< >
and A1< > enclosed in braces are mutually exclusive as are B0< > and
B1< >. $0 and $1 in the destination list of the defi nition are bundled and as -
sociate with Y< > in the source list of the invocation.

The multi-rail representations are bundled and conveniently expressed as
a single place at the next higher composition level. Later in this chapter
Example 12.27, a pure association expression of a full-adder, shows this usage.

At the Boolean function level the expression is in terms of paths with bundled
content. In the defi nition of each Boolean function the paths are unbundled
and expressed as explicitly dual-rail paths.

Bundling can be used for any common association path. Example 12.18
shows the bundling and unbundling of a four-digit number. The places in the
OR($A $B)(Y< >)
:
OR[( [{A0< > A1< >}] [{B0< > B1< >}] )( [{$0 $1}] )
1< 3of6($A1 $A1 $A0 $B0 $B1 $B1) >
0< 2of2($A0 $B0) > : ]
Example 12.17 Bundling mutually exclusive path into a single path.

4BITADD($A $B $CARRYIN)(SUM< > CARRYOUT< >)
4BITADD[([A0< > A1< > A2< > A3< >] [B0< > B1< > B2< > B3< >] CI<
>)
([$SUM0 $SUM1 $SUM2 $SUM3] $CO). . . : . . .]
Example 12.18 Bundling digits into numbers.

BUNDLED CONTENT 211

THE INVOCATION LANGUAGE
invocation are bundled, and the places in the defi nition are unbundled. The
source places A0 through A3 are unbundled from $A. The sum destination
places SUM0 through SUM3 are bundled into SUM< >. The Ax’s and Bx’s
might be dual-rail representation and might be further unbundled into their
dual-rail components as in Example 12.17.

The bundling brackets follow the bundled content delimiting the content
into nested levels of bundling. Each level of bundling adds outermost brackets.

Each level of unbundling strips the outermost brackets from the bundled
content.

12.7 EXPRESSION STRUCTURE
Figure 12.6 shows the component structures of an example expression. There
are some outlying source places and destination places. They associate with
an invocation of ProcX. There is a defi nition of ProcX with a source list and
a destination list. The resolution place of the defi nition contains an invocation
of ProcA within a source place named result2. The place of contained defi ni-
tions contains the defi nition of ProcA that itself contains a set of value trans-
form rule defi nitions.

The arrows show the association relationships and the fl ow of content. The
content 1, 0, 1 is formed in the destination list of the invocation of ProcX
fl owing from source places place1< >, place2< >, and place3< > to destination
places $place1, $place2, and $place3. The content fl ows into the defi nition of
ProcX through source places A< >, B< >, and C< > and into the destination
ProcA[(X< > Y< > Z< >) <$X$Y$Z( )> : 000[0] 001[0] 010[0] 011[1]
100[0] 101[1] 110[1] 111[1] ]
ProcX($place1$place2$place3)(placeB< >)
$placeB ...

place1< 1 > ... place2< 0 > ...

place3< 1 > ...

ProcX[(A< >B< >C< >)($result2)
result2<ProcA($A $B $C)> ... :
]
constant definitions
invocation without destination list
Name correspondence association
Syntactic structure association
Neighbor association
Figure 12.6 Structure of language example.


places $A, $B, and $C in the invocation of ProcA in the place of resolution.

The contents then fl ow into the source places X< >, Y< >, and Z< >, of the
ProcA defi nition, and then into the destination places $X, $Y, and $Z in the
place of resolution of ProcA forming the invocation 101(), which invokes the
defi nition 101[1], which returns the value 1, which then fl ows out of the defi ni-
tion of ProcA to the place of the ProcA invocation becoming the content of
the source place result2< >, then to the destination place $result2, to the source
place placeB< > in the invocation of ProcX, and on to the destination place
$placeB.

The gray arrows indicate name correspondence associations, and the black
arrows indicate syntax structure associations. The black ring is neighbor asso-
ciation. The alternating shades along association paths show the alternation
between name correspondence association and syntax structure association,
each extending the reach of the other and weaving a network of association
pathways through the invocations and defi nitions.

12.7.1 Name Correspondence Search
The language assumes a search behavior to match correspondence names.

Some name correspondence association relationships are static, and the
search for corresponding names in the string can be carried out by a language
processor and mapped to a direct association relationship such as a wire
in the autonomous expression. For some association relationships the
correspondence name is not expressed until the time of resolution when
a name emerges from a content path. So the search must be integral to
the resolution behavior. These searches can be mapped to effi cient search
expressions in the autonomous expression such as a combinational logic
expression, a MUX, the addressing behavior of a conventional memory, or a
shaking bag.

12.7.2 Scope of Correspondence Name Reference
A defi nition forms a syntactically isolated correspondence name domain for
source places and destination places. To maintain the integrity of association
relationships and content fl ow, all content fl ow into and out of a defi nition
must fl ow through the syntactic interface with an invocation. Place correspon-
dence names do not cross defi nition boundaries.

However, the correspondence of invocationnames to defi nitionnames
can have a larger scope of reference. It is convenient to assume hierarchical
scope of reference rules for invocationnames. The search for the corre-
sponding defi nitionname can progress up the hierarchy of nested defi nitions
until a match is found. No matter where in the hierarchy a defi nition is
found, it can be considered to be instantiated at the place of the invocation.

This allows the expression and invocation of common defi nitions in the
language.

EXPRESSION STRUCTURE 213

THE INVOCATION LANGUAGE
12.8 A PROGRESSION OF EXAMPLES
A progression of example expressions of a single process is presented to
illustrate the range of expressivity of the invocation language. Binary digit
addition will serve as the example process with the fi rst example being a binary
full-adder composed of two half-adders shown as a graphical expression in
Figure 12.7. The expression is a structure of association relationships among
Boolean functions. The input and output of the full-adder is a completeness
boundary, and the input and output of each function is a completeness
boundary.

12.8.1 Imperative Form
The graphic expression of Figure 12.7 is labeled with correspondence names
for the inputs of the expression, which are destination places of the invocation,
and the output of each function, which are the source places in the expression.

Example 12.19 expresses the full-adder as an imperative expression. It is a
collection of statements, each an invocation of a function with its input and
output. The associations are completely in terms of name correspondence
relationships. There is a one-to-one correspondence between the graphic
expression and the string expression.

Note that the fi rst source place of the source list of the invocation of
FULLADD is unnamed and the $SUM result of the defi nition is associated
to the place of the invocation. The CARRY result associates by name corre-
spondence to $CARRY in the defi nition destination list, by syntax correspon-
dence to CARRYOUT<> in the invocation source list and then by name
correspondence to $CARRYOUT.

There are three contained defi nitions. The AND and OR defi nitions use a
different set of value transform rule defi nitions with the same set of names.

Each set of value transform rules is isolated within a defi nition, so there is no
ambiguity of name correspondence.

Figure 12.8 shows the associations from the source list of the defi nition to
destination places within the expression at the place of resolution. The expres-
sion is identical to Example 12.19 except that some invocations have been
doubled up on a single line. Figure 12.9 shows the associations of resolution
fl ow within the resolution expression and the fl ow of the results to $SUM and
$CARRY.

C
X
Y
CARRY
SUM
OP4
OP8
OP7
OP3
OP1
OP2
OP10
FIRSTSUM
OP6
OP5
OP9
Figure 12.7 Boolean binary full-adder in terms of two half-adders.


inv
FULLADD(0, 1, 0)(< > CARRYOUT < >) . . . $CARRYOUT
def
FULLADD[(X< >Y< >C< >)( $SUM $CARRY)
