logicaland[(a< > b< >) $a$b() :
FALSEFALSE[FALSE]
FALSETRUE[FALSE]
TRUEFALSE[FALSE]
TRUETRUE[TRUE] ]
logicalnot[(a< >) $a() TRUE[FALSE] FALSE[TRUE] ]
Example 12.36 Set of defi nitions establishing correspondence name convention.

IF(equal($X $Y), THIS, THAT)(result< >) . . . . . . $result( ) . . . . :
THIS[. . . . . . . .] THAT[. . . .] ]
Example 12.37 Nested conditional that returns TRUE or FALSE.

dox($choice)
dox[(todo< > )
<$todo()> :
doA[ . . . ]
doB[ . . . ]
doC[ . . . ]
. . . . . . . .

doZ[ . . . ] ]
Example 12.38 Expression of multi-way conditionality.


tion expresses a composition boundary that is also a coordination boundary,
every one of which must be coordinated. The language assumes that all bound-
aries are coordinated with the completeness criterion behavior.

12.11.1 Invocation Boundaries
An invocation associates destination places in a destination list and source
places in a source list. Each place and each list represents a boundary of com-
pleteness behavior. Content fl ow from boundary to boundary must be coor-
dinated both within an invocation and between invocations. The completeness
boundaries of the invocation are refl ected to a defi nition, as shown in Figure
12.19, that contains the expression between these two boundaries in its place
of resolution. The expression inside the defi nition will also contain invocations
with boundaries forming a hierarchical structure of composition boundaries,
which expresses rich possibilities of partitioning and coordinating.

12.11.2 Coordination Behavior
The essence of coordination is completeness behavior. In a sequence of opera-
tions, each operation must be completed before the next operation in the
sequence can commence. In an invocation language expression, the resolution
of each invocation must be completed before its correct result fl ows to further
associations and it accepts a new presentation to resolve. Just as a sequential
language assumes that any implementation will properly coordinate the com-
pleteness behavior of a sequence, the invocation language assumes a universal
convention of completeness behavior and assumes that when an invocation
expression is mapped to autonomous behavior and partitioned in various ways
along boundaries according to the available resources, that the partitioned
boundaries will be coordinated in ways, which realize the completeness
destination
list places
source list
places
input
boundary
output
boundary
Definition
Invocation
source list
places
destination
list places
source
places in
other
invocations
place of resolution
expression
destination
places in
other
invocations
Figure 12.19 Completeness boundaries of the invocation with content fl ow.

COORDINATION BOUNDARIES 231

THE INVOCATION LANGUAGE
behavior in one way or another. It is suffi cient for the language to express
coordination boundaries with their completeness criteria without expressing
the details of coordination.

The universal convention assumed by the language is the completeness
criterion: the completeness of content at one boundary implies completeness
at boundaries from which content fl ows to that boundary. The completeness
criterion forms a basis of coordination supporting protocols from the NULL
convention to the cycle to high-level communication protocols. The complete-
ness criterion also encompasses the interval and the clock protocol. The task
of the interval is to express when a resolution is complete and correct. The
task of the clock is to synchronize the completeness of concurrent intervals
and of successive intervals.

The Completeness Dialogue The completeness criterion enables the
simple dialogue of Figure 12.20. This dialogue assumes the NULL convention
as an integral part of the dialogue. The dialogue occurs between the output
boundary of an invocation and all the destination places to which its source
places associate. And the dialogue occurs between the input boundary of an
invocation and all the source places to which its destination places associate.

A dialogue also occurs between the input boundary as a whole and the output
boundary as a whole of an invocation, shown in Figure 12.21. The thank you
and the request are also called an acknowledge.

The two dialogues are structurally identical. It is such a dialogue, based on
completeness relationships, that is assumed by the language to coordinate the
fl ow of content between all boundaries.

Four-Phase Handshake Protocol The dialogue is identical to the classic
four-phase handshake protocol, which is typically presented, as shown in
Figure 12.22, as two signals with interlocking behavior coordinating the trans-
fer of content between two places. Only the send behaviors are explicitly
I have completely received
the DATA wavefront. Thank
you. You may now send a
NULL wavefront.

I have completely received
the NULL wavefront. You may
send a DATA wavefront.

Here is your DATA wavefront.

You are welcome. Here is your
NULL wavefront.

thank you
Completeness
request
Completeness
NULL welcome wavefront
DATA content wavefront
Here is your DATA wavefront.

And so on
DATA content wavefront
Figure 12.20 Completeness coordination protocol between expressions.


represented by the signals, which are labeled with the behavior names. The
receive behaviors are implied by the send behaviors and are usually illustrated
with arrows. “Content” implies that the request was received. “Thanks”
implies that the content was received. “Welcome” implies that the “thanks”
was received. “Request” implies that the welcome was received.

The Cycle Protocol Cycle behavior introduced in Section 7.2.1 is a direct
expression of the completeness dialogue. The dialogue can be interlinked just
like cycles are interlinked to manage fl ow of content. Interlinked cycles express
a progression of coordination dialogues. Figure 12.23 illustrates the dialogue
behavior of interlinked cycles forming an autonomously behaving pipeline.

12.11.3 Coordinating Boundaries
Within an invocation the content of the destination list ultimately fl ows to the
content of the source list, and the completeness of the source list is coordi-
nated with the completeness of the destination list. Each destination place in
the destination list will associate with and coordinate with a source place in
the greater expression. Each source place in the source list will associate with
and coordinate with one or more destination places in the greater expression.

Within the invocation the source list as a whole must coordinate with the
destination list as a whole.

Here is your DATA wavefront.

You are welcome. Here is your
NULL wavefront.

thank you
Completeness
request
Completeness
NULL welcome wavefront
DATA content wavefront
Here is your DATA wavefront.

And so on
The DATA wavefront has
been passed on. Thank
you. You may now receive
a NULL wavefront.

The NULL wavefront has
been passed on. You may
now receive a DATA
wavefront.

DATA content wavefront
thanks
welcome
request
content
thanks
welcome
request
content
request
source to destination
destination to source
Figure 12.21 Completeness coordination protocol within an expression.
