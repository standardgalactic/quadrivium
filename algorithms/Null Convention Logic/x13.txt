data memory
function memory
sequence
controller
Figure 2.14 Sequential expression with sequence controller.

THE COMPLEXITY OF SEQUENTIALITY 29

THE SIMPLICITY OF CONCURRENCY
controller) cannot itself be a sequential expression with a controller. It must
be a form of expression more primitive than sequentiality that behaves entirely
in terms of its own expressivity without any assistance.

2.8 CONCLUSION
With the traditional mathematical notion of expressing a process in terms
of composing functions, the behavior of the mathematician with a pencil em -
bodies a critical expressivity of the behavior of the process. The mathemati-
cian knows when data is ready to be presented to the next function and when
to write down each function and substitute its data. If the mathematician is
not available, this expressivity of behavior is lost, and on their own, the behav-
ior of composed functions becomes indeterminate. The lost expression of
behavior embodied in the missing mathematician must be restored to the
behaving functions.

The expression of the mathematician’s behavior can be restored in two
ways. One way is to retain the notion of a mathematical function as a primitive
form and add other forms of expression such as time intervals, memory, and
explicit control properly coordinated with the expression of the functions. The
other way is to enhance the symbolic expression of the functions and the data
to include the necessary expression of coordination behavior.

2.8.1 A Question of Primitivity
If one retains the notion of the mathematical function then one is confronted
with the fact that a composition of functions do not work properly and will
assert a rash of incorrect results before settling to an assertion of a correct
result. If one adopts the notion of the enhanced functions, a composition of
enhanced functions work properly and transition to a correct result without
any assertion of incorrect results.

The incorrect behavior of a composition of mathematical functions can be
isolated by associating a time interval with the expression. By analyzing the
delay behavior of the components and their composite delay behavior for a
specifi c implementation, a time interval can be defi ned for that specifi c imple-
mentation that extends from presentation of input to beyond the incorrect
behavior into the period of stable correct behavior. The interval can control
a memory associated with the expression output of the expression to sample
the correct result. The indeterminate logical behavior is thus isolated by the
time interval and the memory. The expression is now in terms of logic, memory
and time. The time behavior and the logical behavior have to be properly
coordinated for the expression to work correctly.

A composition of enhanced functions does not assert incorrect behavior
and there is no need to isolate its logical behavior. It remains purely in terms
of logical behavior.

The logic expression of the mathematical functions, the memory and the
time interval form a unit of expression that can be further composed in terms

of shared memories and shared time intervals. The shared time intervals must
be all be identical and in phase. This greater composition is a structure of
expressions behaving synchronously in relation to a common time interval: a
clock.

An expression of enhanced functions can logically regulate its input with
its own completeness behavior and a feedback path from its output to its input
forming a cycle. Further composition occurs in terms of interlinked cycles. The
greater composition is a structure of cycles each behaving purely in terms of
logical relationships and the composition as a whole behaving purely in terms
of logical relationships. It is a fully deterministic expression of distributed
concurrent behavior.

The clock coordinating the behavior of the mathematical functions isolates
all logical relationships. The logical relationships of the expression are not
available and have to be reconstituted in terms of a new logical expression of
explicit control. The clocked greater composition performs one set of behaviors
every interval tick. The new level of explicit control can only compose in terms
of a sequence of interval tick behaviors. The incompetence of the mathematical
functions has led to explicitly controlled, strictly sequential behavior.

At some point the greater expression of enhanced functions will be reused
iteratively. Continued composition might occur sequentially but it need not.

The logical behaviors of the expression were never isolated so its complete
logical structure is intact and available. This logical structure can be parti-
tioned in various ways to allow parallel and pipeline iterative behaviors.

Mathematical functions do not behave properly to begin with. In correcting
the behavior of the functions, one is led through a progression of supporting
concepts to sequentiality. The coordinating behavior of the mathematician is
only partially restored with a complex scaffolding of concepts. Enhanced func-
tions work properly to begin, require no additional supporting concepts, and
leads to distributed concurrency. The coordination behavior of the mathema-
tician is fully restored with a single simple conceptual reorientation.

2.8.2 A Labyrinth of Concepts
Mathematical functions do not work. The concepts necessary to make them
work leads to an ad hoc scaffolding of mutually supporting concepts that is
diffi cult to escape:
stateless mathematical function,
time interval,
synchronicity,
sequentiality,
explicit control,
common memory, and
extended state space.

CONCLUSION 31

THE SIMPLICITY OF CONCURRENCY
It is not possible to change one concept without confl icting with another
concept. Attempting concurrency leads to complex control and the explosion
of the state space. Attempting to avoid the time interval leads back to the
races and hazards of the functions. Abandoning synchronicity leads to inde-
terminate behavior. Attempting to distribute memory bumps into the arbi-
trary sequencing and arbitrary memory mapping of sequentiality. Attempting
to avoid control leaves the sequence to fend for itself which it cannot do.

One cannot fi nd ones way out of the labyrinth incrementally or gradually.

The only way to escape the labyrinth and glimpse the simplicity of concurrency
is to change the beginning primitive concept. With enhanced functions that
cooperate a set of complimentary concepts emerge that are not necessary
supporting concepts but are natural consequence of the fact that enhanced
functions work to begin with:
state holding cooperating functions,
logical completeness,
distributed local behavior,
concurrency,
cooperation,
distributed content fl ow, and
logical determinism.

2.8.3 A Discord of Conceptual Views
The two primitive beginnings lead to two very different views of process
expression. There is the sequentical world view and there is the concurrent
world view.

In the sequential world view concurrency is fraught with races, hazards and
indeterminate behavior. Sequentiality tames the unruly concurrent behavior
providing a well behaved, stable foundation for process expression. It is foolish
to consider reversion to primitive concurrent behavior. The only reliable path
to concurrency is through cooperating sequential processes.

From the concurrent world view, concurrency, beginning with cooperating
primitive functions, provides a completely logically determined, well behaved,
stable foundation for process expression. Sequentiality is an unreliable form
of expression founded on a time interval that is implementation specifi c and
is not precisely manageable. The many possible correct sequences and the
arbitrary memory assignments make sequentiality complex, confusing and
prone to error.

2.8.4 Illusions of Diffi culty
It seems obvious that controlling one event at a time in sequence must be
simpler than controlling many events simultaneously. But that is only if one

thinks in terms of control instead of in terms of orderly collective behavior by
virtue of orderly individual behavior.

The timing races among concurrent functions can be an intractable coordi-
nation problem, but only if one is thinking in terms of functions incapable of
coordinating their symbolic behavior with other functions. If one thinks instead
in terms of functions that are capable of coordinating among themselves, the
timing issues disappear.

State space explosion is a problem only if one thinks in terms of globally
sampled instants of an extended state space. If one can trust the symbolic
behavior, considering the behavior of a “state space” is unnecessary. The
notion of an extended state space is an artifact of sequentiality. Sequential
behavior is not fully determined by its symbolic behavior, but is determined
by its symbolic behavior, its sequence control, and its memory mapping. The
only coherent characterization of sequential behavior is in terms of transitions
of its state space. Sequentiality can be defi ned as one atomic transition at a
time of a state space and sequential behavior can be characterized in terms of
enumerating these state space transitions.

Concurrent behavior is a composition of local state spaces behaving locally.

Attempting to combine the local spaces into a collective extended state space
is meaningless. It is not possible to predict an instant when there are no transi-
tions occurring in the extended state space and it can be reliably sampled.

Even if an extended state space is successfully sampled, it is not possible to
predict what the state of the space should be at any instant. So as a referent
for behavior in the context of concurrency the notion of an extended state
space is useless and meaningless. Concurrent behavior with enhanced func-
tions is fully determined by symbolic behavior. One can and must trust the
symbolic behavior.

2.8.5 A Question of Philosophy
The deeper question is what is adopted as primitive and why? Any network
of concurrent behaviors can be mapped to a sequence of behaviors. This
would seem to imply that sequentiality is a reductive conceptual bottom and
is consequently more fundamental and primitive than concurrency. But a
sequence of behaviors is not conceptually coherent. It is not suffi cient in itself.

It requires the assistance of a memory and of a sequence controller. How
can a concept be primitive that requires assistance to fulfi ll its mission of
primitivity?
A network of enhanced functions, on the other hand, is coherent and suf-
fi cient in itself. The spontaneous behavior of the enhanced functions realizes
