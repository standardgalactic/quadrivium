REFERENCES
1. J. Backus. Can programming be liberated from the von Neumann style? A func-
tional style and its algebra of programs. Communications of the ACM 21 (August
1978): 613–641.

2. W. Gelert, H. Kustner, M. Hellwich, and H. Kastner, eds. The VNR Concise Ency-
clopedia of Mathematics. New York: Van Nostrand Reinhold, 1975, p. 40.

3. D. Knuth. Fundamental Algorithms, The Art of Computer Programming Vol. 1.

(Reading, Addison Wesley, 1969). p. 3.

4. L. Trivieri. Fundamental Concepts of Elementary Mathematics. (New York, Harper
and Row), 1977. p. 46.

REFERENCES 51

Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright © 2007 John Wiley & Sons, Inc.

THE INVOCATION MODEL
Process is the appreciation of differentness. Differentness is appreciated with
change: an after that is different from a before. Change must include an
encompassing persistence that relates a particular after to a particular before.

XZ changes to XY and YA changes to YC. Z appreciates X by changing to
Y, A appreciates Y by changing to C. Z and Y are related by a persistence.

A and C are related by a second persistence. The two persistences are
themselves different and are related by the interaction of YA. This counter-
point of persistence relating differentness of change relating differentness of
persistence relating differentness of change is the essence of process and its
expression.

5.1 THENGS AND VALUES
A primitive expression of differentness is introduced: a theng (sounds like
thing), which asserts one at a time of two or more possible values. A theng is
a persistence relating its changing values. Different thengs can associate and
their values can interact and change. Two thengs are associated when they are
suffi ciently proximate for their values to interact. Thengness expresses persis-
tence. It is substantial and spatial. Valueness expresses change. It is symbolic
and temporal. The asserted values of associated thengs form a name. Values
forming a name can transform in accordance with a correspondingly named
value transform rule. Thengs, values, association relationships among thengs,

THE INVOCATION MODEL
and value transform rules are the only primitive concepts that will be intro-
duced. Everything that follows is in terms of these primitive concepts.

Thengs can form association structures. Each theng in an association struc-
ture is different from all other thengs in the structure by virtue of its unique
place in the structure. This will be called association differentiation.

Values can interact specifi cally with other values according to a set of value
transform rules. A value is different from all other values by virtue of its
unique interaction behavior with all the other values. This will be called value
differentiation.

Association differentiation and value differentiation are two complemen-
tary domains of differentiation interlinked by thengs asserting values. They
form a primitive warp and woof of persistence and change from which is
woven the tapestry of process expression.

A theng asserting a value can take many different forms. It might be a wire
asserting a voltage, a protein asserting a shape value, a molecule asserting a
chemical identity, a digit asserting a value, a human asserting speech, a fi eld
asserting a force, and so on. It is called theng because no common word quite
covers the scope of the notion.

Each domain of differentiation can be considered individually by minimiz-
ing the differentiation of the other domain. Value differentiation can be con-
sidered on its own terms in an expression where all differentiation is in terms
of value, and there is no differentiation in terms of association. This will be
called a pure value expression.

5.2 PURE VALUE EXPRESSION
In a pure value expression the thengs asserting values are all mutually associ-
ated at a single place of association. There is no structure of association rela-
tionships and no way to tell one theng from another by its unique place in a
structure of association relationships; there is no differentiation in terms of
association. The only differentness at the single place of association is differ-
entness of value.

5.2.1 The Mutual Association of Thengs
There are two ways to view the mutual association of thengs at a single place.

The fi rst view is to consider that thengs are all statically mutually associated.

This is illustrated on the left of Figure 5.1 with four thengs, each directly
associating with the other three. One might imagine a group of neurons each
having a synapse with all the others. All possible names are simultaneously
formed by the asserted values of the associated thengs.

The second view is to consider that thengs are dynamically mutually
associated by being locally constrained and agitated such that all thengs will
eventually associate and all possible names will eventually be formed. This is

illustrated on the right of Figure 5.1 as a shaking bag. The bag is the expres-
sion of the association relationship. It ensures that thengs will not wander off
and fail to associate. One might envision this in terms of warm matter in a
gravity well or the cytoplasm within a cell membrane.

The condition of being statically associated is expressionaly identical to the
condition of being dynamically associated. Simultaneous static association
corresponds to the case of all eventual dynamic associations fortuitously
occurring simultaneously.

5.2.2 The Value Transform Rule
The change behavior of formed names is expressed by a set of value transform
rules. These rules express all the values that can populate a pure value expres-
sion, all the resolvable names that can be formed by the values, and the resolu-
tion of each name.

A value transform rule is expressed as a name formed by an association of
values and the resulting values to which the name resolves. The association
of values itself is the name of the rule. The symbol string representation
of a value transform rule is
name[result]
For example, the rule AB[F] states that if the values A and B associate, the
rule named AB will be invoked resolving the name with the values A and B
transforming into the value F. The values A and B cease, and the value F
becomes. While the values of a symbol string are inherently ordered, the
values associating to form a name in a pure value expression are not ordered.

BA is the same name as AB. If associated values do not form the name of a
value transform rule, there is no resolution and no value transformation.

A pure value expression is an association of the thengs asserting their
values and a set of value transform rules. The set of value transform rules
expresses all resolvable names and how they are to be resolved. Which names
will actually form depends on the values asserted by the thengs. When a
Figure 5.1 Static and dynamic forms of mutual association.

PURE VALUE EXPRESSION 55

THE INVOCATION MODEL
resolvable name is formed, the appropriate rule is invoked and the value
transformation occurs.

A set of value transform rules might be the functions of a logic, the operations
of an arithmetic, the laws of chemistry, protein interaction rules, and so on.

5.2.3 Value Differentiation
One value is different from all other values because it interacts with the other
values differently from all the other values:
AX[B] means that if A associates with X, the result is B.

AZ[C] means that if A associates with Z, the result is C.

X and Z are different because they behave differently with A.

Consider the following set of value transform rules.

AX[B]
AZ[C]
NB[J]
CN[G]
GM[K]
GD[L]
Assume that a place initially contains A, M, and N. If an X arrives, the result
will be a J:
AX → B
BN → J
If a Z appears, because M is present, the result will be a K:
AZ → C
CN → G
GM → K
If D were present instead of M, the result would be L:
AZ → C
CN → G
GD → L
Each value is different from each other value because its name forming and
resolution behavior, as expressed by the value transform rules, is different
from all the other values.


Notice that the resolution of each expression is fully coordinated. BN
cannot form until AX has formed and transformed into B. GM cannot form
until CN is formed and transformed into G and CN cannot form until AZ is
formed and transformed into C, and so on. There is no ambiguity in the
behavior of the expression. In particular, there are no races or hazards. The
behavior is directed, discrete, and fully deterministic.

While value transform rules can directly express fully determined behavior,
they can also express ambiguous behavior. If, for instance, D, M, and G are
present in the expression above, the names GM and GD can equally form,
and K or L are equally possible results. In the shaking bag one name may
form and transform before the other. In the static association expression both
names will form simultaneously, but there is only one G; only one behavior
can occur, and it is not possible to predetermine which behavior will occur.

There is no referent or metric in either case to determine one behavior over
the other. The behaviors are equally uncertain in both forms of expression.

5.2.4 Differentness as Limitation of Behavior
Differentness is an expression of limited possibilities. A theng can interact
only with neighbor thengs with which it is directly associated. A value can
transform only with other values that form the name of a value transform rule.

Behavior in time is limited by the mutually exclusive behavior of the theng,
