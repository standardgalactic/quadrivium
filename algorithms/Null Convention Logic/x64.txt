12.3.4 Abbreviated Forms of the Invocation and Defi nition
The invocation and defi nition syntax structures can be abbreviated to express
simpler association relationships and also to accommodate familiar forms of
symbol string expression.

Return a Content to Place of Invocation An unnamed source place in the
source place list of an invocation associates by implicit name correspondence
to the place of the invocation and no other place. The invocation itself becomes
the single destination place for the returned result. In Example 12.1 the fi rst
source place in the source list of the invocation is unnamed. The destination
place $SUM in the destination list of the defi nition associates to the unnamed
source place. The content fl owing through $SUM will associate to the unnamed
source place and fl ow to the place of the invocation.

Single Return to Place of Invocation If an invocation receives a single
result in its own place, there is no need of a source list. The corresponding
ABC[(A<$place1> B<$place2> C<$place3>)(placeA<$result1> placeB< $result2>) ... : ... ]
ABC[(A< >B< >C< >)($result1 $result2) ... : ... ]
ABC($place1 $place2 $place3)(placeA< > placeB< >)
a. symbol string representation
b. Graphic representation
Invocation
Definition
c. Merged string representation
Name correspondence association
Syntax structure association
place1
$
placeA
< >
< >
A
place2
$
< >
B
place3
$
< >
C
$
result1
placeB
< >
$
result2
Invocation
Definition
Source list
Destination list
Source list
Destination list
Figure 12.5 The syntactic association of invocation to defi nition.

invocation
FULLADD(0, 1, 0)(< > CARRYOUT< >) . . . $CARRYOUT
defi nition
FULLADD[(X< >Y< >C< >)($SUM $CARRY)
Example 12.1 Unnamed source place in an invocation.

THE SYNTAX STRUCTURES 203

THE INVOCATION LANGUAGE
defi nition can express the single return with the absence of a destination list
and with the presence of a single unnamed source place in the place of resolu-
tion. An expression like Example 12.2 can be further abbreviated to the form
of Example 12.3.

This abbreviation supports the familiar expressional form of functional
nesting. In Example 12.4 each invocation has only a destination list and is part
of the destination list of another invocation or is within a source place.

The Conditional Invocation Name If an invocation has an empty destina-
tion list, i.e. no input, then the invocationname itself must express the variable
part of the invocation. The conditional invocationname is the mechanism of
content transformation in the language. The invocation correspondence name
is formed from the content of one or more contiguous destination places.

Content emerges from fl ow paths to interact by forming the correspondence
name of an invocation. All content fl owing through the association paths
eventually emerges to form an invocation correspondence name. This is how
value transform rules are invoked to transform the fl owing content of the
expression.

$place1$place2$place3()
The Constant Defi nition If a defi nition does not contain a source list and
does not contain a defi nition list, it is a constant defi nition. With no input
associations there is no content fl ow into the defi nition to resolve, no need for
internal defi nitions, and no need for the colon. A constant defi nition contains
only a place of resolution between the brackets, which contains a constant
content and can be abbreviated as shown below:
defi nitionname[constant]
invocation
AND($A $B)(< >)
defi nition
AND[(X< >Y< >C< >)($R) R<. . . . . . > : . . . . .]
Example 12.2 Expressing a single return to place of invocation.

invocation
AND($A $B)
defi nition
AND[(X< >Y< >) < . . . . . . > : . . . . . ]
Example 12.3 Further abbreviated expression of a single return to place of invocation.

<OR(AND(NOT($X),$Y),AND($X,NOT($Y)))>
Example 12.4 Nested invocations.


Since there is no destination list, the constant content is returned to the place
of invocation.

A constant defi nition expresses a value transform rule. Example 12.5 shows
the value transform rule defi nitions for the AND function. The content values
1 or 0 will propagate through A< > and B< >, and a two-value name will be
formed by $A$B() that will invoke one of the contained defi nitions. The con-
stant of the invoked defi nition will return to the place of the invocation, enter-
ing a fl ow path in the unnamed source place, and will fl ow through the unnamed
source place back to the invocation of AND. The set of constant defi ni-
tions—value transform rule defi nitions–expresses the truth table of the AND
function. One can think of the content forming the invocationname that trans-
forms into the content of the defi nition.

A constant defi nition can also contain a fragment of expression including
an invocation that will be returned to the place of invocation. The formation
of an invocationname in a place of resolution results in the fragment of expres-
sion in the corresponding constant defi nition being returned to the place of
invocation in the place of resolution and consequently being resolved. In
Example 12.6 the content of select< > will be A or B. This content fl ows to
$select and forms the invocation A( ) or B( ), invoking one of the two con-
tained defi nitions. The content of the named defi nition is returned to the place
of invocation in the place of resolution and resolved directing the input to one
of two possible output association paths.

The Pure Value Expression If there are no list parenthesis in a place of
resolution, then there are no explicit invocations. The contents fl owing into a
place of resolution are assumed to be freely associating values of a pure value
expression that will form names of contained defi nitions. The contained defi ni-
tions are value transform rules, or they contain association expression frag-
ments to be inserted into the place of resolution.

defi nitionname[(A< >B< >C< >)( . . .) $A$B$C : . . . ]
The place of resolution of Example 12.26, as seen later in this chapter, contains
a pure value expression.

AND[(A< >B< >) <$A$B()> : 00[0] 01[0] 10[0] 11[1]]
Example 12.5 OR function with value transform rule defi nitions.

def
fanout[(select< > in< >)({$out1 $out2})
$select( ) :
A[out1< $in >]
B[out2< $in >] ]
Example 12.6 Fan-out steering.

THE SYNTAX STRUCTURES 205

THE INVOCATION LANGUAGE
12.4 THE COMMA
The comma is a general separator. There can be cases of separate places that
must be syntactically separated but that are not separated by the syntax
defi ned so far such as two constants in the destination list of an invocation.

Example 12.7 illustrates two constants, NT and EW, in the destination of an
invocation delimited by a comma. Without the fi rst comma, NT would get
confused with the B of $B. Without the second comma, NT and EW would
appear as a single constant.

Because the destination places are not syntactically isolated, in an invoca-
tion destination list the meaning can become ambiguous if a destination place
is followed by a conditional invocation. In Example 12.8 the destination places
$C$D form an invocationname. If the comma did not separate $B and $C, all
four destination places would be considered to form the invocationname.

Commas can be used freely as a redundant separator for convenient read-
ability. In Example 12.8 the string “$A, $B” is identical to the string “$A $B”.

12.5 COMPLETENESS RELATIONS
The language does not express the details of coordination. It assumes com-
pleteness criterion behavior between the boundaries of each invocation and
between source and destination places. The language must, however, indicate
what constitutes completeness for each invocation boundary.

12.5.1 Full Completeness
The simplest completeness relation is that content be present at all places in
each list. An invocation begins when there is content in all of its destination
places. An invocation is completed when there is content in all of its source
places. A list with no additional syntax implies full completeness.

12.5.2 Mutually Exclusive Completeness Relations
There are many circumstances where, for each instantiation, exactly one of a
group of places will have content. This mutually exclusive behavior can occur
ProcX($A $B, NT, EW)()
Example 12.7 Comma-delimited constants.

ProcX($A $B, $C$D())()
Example 12.8 Comma-delimited destination places.


in pure association expression with multi-path representation where a group
of places mutually exclusively assert a value. This is expressed by enclosing
