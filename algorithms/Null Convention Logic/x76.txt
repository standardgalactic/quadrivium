works, even as the theory has made the engineering more complex than
necessary.

13.1 IN THE BEGINNING
The notion of mechanical computation has been knocking around mathemat-
ics since the thirteenth century. It came to fruition in the twentieth century
with the formalization of mathematical computation in the notion of the
algorithm and the Turing machine. The electronic computer was the embodi-
ment of the mathematical notion of mechanical computation, the extension
of an established mathematical idea. It seemed obvious that the computer
was a mathematical object encompassed within the theoretical foundations of
mathematics.

The problem is that the theoretical foundations of mathematics have not
worked out very well as theoretical foundations for computer science. Chapter

REFLECTIONS
1, “A Critical Review of the Notion of the Algorithm in Computer Science,”
criticizes the theoretical foundations of contemporary computer science and
argues that computer science is not mathematics at all, that mathematicians
and computer scientists are pursuing very different goals.

Computer science is primarily concerned with the nature of the expression of
processes regardless of what particular process might be expressed.

Mathematics is primarily concerned with the nature of the behavior of a specifi c
process regardless of how that process might be expressed.

Computer science is a science of process expression, quite distinct
from mathematics, and the conceptual foundations of mathematics are not
appropriate for computer science. A conceptual orientation that fi lters out
variety of expression is not the best foundation for studying variety of
expressivity.

Furthermore computer science aspires to encompass the symbolic compu-
tational processes of nature such as cell biology and brain function. There are
no Turing machines in nature, no global clocks, no central memories. Nature
is not binary, and it is not Boolean. If computer science wishes to more closely
model nature, then it needs conceptual models more closely attuned to nature’s
expressions.

13.2 THE ROOT PROBLEM
Chapter 2, “The Simplicity of Concurrency,” attacks the nuts and bolts of
contemporary computer science head on. The conceptual diffi culties of com-
puter science can be traced to the mathematical notion of a function as a
stateless mapping. Composed functions produce races and hazards. A time
interval is added to isolate the unruly logic behavior, and further composition
must be in terms of the time intervals, which can only be composed synchro-
nously or sequentially. A sequence of operations requires explicit sequence
control, and an addressable memory is required to park data awaiting its turn
in sequence. The notion of a samplable state space is introduced to provide a
methodology of confi dence.

13.2.1 The Labyrinth
This is a structure of interlinked, mutually supporting concepts forming a
labyrinth that is diffi cult to escape. A conceptual view can defend itself by
appearing ideally suited within its own context and making other conceptual
views appear less than ideal. Sequentiality appears straightforward and much
simpler than concurrency, but this is only if both sequentiality and concur-
rency are looked at in terms of sequentiality.


13.2.2 Exiting the Labyrinth
The only path to a different conceptual view is to start over from the primitive
beginning. Chapter 2 introduces the NULL convention and the concept of
state-holding primitives that understand how to cooperate among themselves.

A quite different conceptual view emerges.

A concurrent composition of state-holding primitives cooperate to deter-
ministically coordinate the fl ow of resolution. There is no need of the concept
of a time interval, no need of the notion of synchronous sequentiality, no need
of explicit control, no need for a notion of an addressable memory, and fi nally
no need of the notion of a state space. Primitive state-holding functions are
suffi cient in themselves to build complex expressions in contrast to primitive
stateless functions that must be supported with a Rube Goldberg structure of
ad hoc concepts. One glimpses the simplicity of concurrency and the complex-
ity of sequentiality.

Table 13.1 contrasts the two views of process expression. The left column
lists the familiar notions that must be abandoned and the right column lists
the new notions that must be embraced.

13.3 COMPUTER GODS
How is it that deeply fl awed theoretical foundations have seemingly supported
the greatest technological achievement in human history. The answer is the
humans in the works. The success of the computer has been largely a matter
of engineering cleverness and determination masking the shortcomings of
concept.

The humans are another “presence” of the mathematical heritage: the
symbol system defi ning human, the algorithm inventing human, the machine
designing human, and the pencil wielding human. The computer eliminated
the pencil wielding human, but the others remain in the works.

If one only wants a working expression of a process, appeal to arbitrary suf-
fi ciency, if it is available, can be conveniently effective. However, if one is
seeking insight into the nature of process expression itself, the presence of
COMPUTER GODS 251
Table 13.1 A contrast of worldviews
Abandon Notions of
Embrace Notions of
Stateless functions
State-holding functions
Time interval
Logical completeness
Synchronicity
Distributed local behavior
Sequentiality
Concurrency
Explicit control
Cooperation
Common memory
Distributed content fl ow
Extended state space
Logical determinism

REFLECTIONS
arbitrarily suffi cient expressivity fundamentally undermines any such effort.

Appeal to arbitrary suffi ciency can reveal nothing about essential necessity.

Saying a human does it in computer science is like saying a God does it in
physics.

A human is an arbitrarily capable attribute that can make anything work,
fi lling in the nooks and crannies of conceptual shortcomings. No theory can
be falsifi ed. Theories cannot be compared because all theories of computing
work equally well. The humans in the works both realize the computer and
deny it theoretical closure.

But are the humans really necessary? Computing mechanisms and pro-
cesses exist in nature and computer science aspires to encompass these pro-
cesses, in particular, biological and neural processes. These processes are
clearly naturally occurring phenomena, are decidedly not artifactual, and do
not have humans in their works. If computer science is to encompass brains
and other natural processes, it must eliminate its humans in the works.

Chapter 3, “Dehumanizing Computer Science,” introduces the notion of
the pure value expression within which expressions can spontaneously arise
and persist. No human creators, inventors, or designers are needed.

13.4 WHAT’S IN A NAME?
The notion of the variable is another idea from mathematics that sort of works
but causes a lot of problems also. Chapter 4, “Transcending the Variable,”
sets the stage for a programming language purely in terms of association rela-
tionships by showing that a variable name is really expressing an association
relationship. If a variable name is understood as expressing a direct association
relationship rather than as a reference to memory, then the problems of
ambiguous reference and side effects do not arise.

13.5 THE INVOCATION MODEL
Chapter 5, “The Invocation Model,” introduces the invocation model of
process expression that characterizes process in terms of the expression and
appreciation of differentness. The invocation model posits a primitive theng
that asserts one at a time of two or more possible values. Theng represents
spatial persistence, and value represents symbolic mutability. Thengs can asso-
ciate forming structures within which each theng is different by virtue of its
place in the structure. Values interact according to value transform rules. A
value is different by virtue of its interaction behavior with other values. Asso-
ciated thengs and changing values are two different ways of expressing and
appreciating differentness that cooperate to form expressions of indefi nite
complexity. Thengs associating and asserting values that change according to
value transform rules prove suffi cient to encompass all familiar forms of
process expression. No additional concepts were introduced, and none were
needed.


Process can be expressed purely in terms of value differentness, purely in
terms of association differentness, or as a combination of association different-
ness and value differentness forming a spectrum of expression from pure value
expression on one end to pure association expression on the other end with
mixed expression in the middle.

While the behavior of pure value interaction can be discrete, directed, and
deterministic, associated thengs do not inherently exhibit directional, discrete,
or determined behavior. It was shown how to use value differentiation to
achieve association expressions with discrete, directed, and deterministic
behavior with the NULL convention and the unit of association convention.

The pure association expression was then presented that expresses a process
purely in terms of association differentiation. With pure association expres-
sion emerged a new form of minimum value logic, 2 value NULL Convention
Logic.

The invocation model and its spectrum of expression directly relates the
expression forms of nature and of humans. Nature’s expressions such as pro-
teins in the cytoplasm, which use lots of values and little association structure,
fall toward the pure value end of the spectrum. Natures expression of the brain
and DNA fall toward the pure association end of the spectrum. Humans are
fond of the pure association end of the spectrum with large association struc-
tures and very few values.

Chapter 6, “Along the Spectrum,” journeys across the spectrum with a
single example process expressed at different places along the spectrum illus-
trating the pure forms of expression and the mixed forms of expression with
a discussion of the relative effi ciencies of the various forms.

13.6 COMPOSING DIFFERENTNESS
Primitive differentnesses and primitive appreciations compose to form more
