next<$Nx> $color( ) :
W[walklight<WALK>]] DW[walklight<DON’T WALK>] ]
setsidewalk[($Nx< >,color< >)($next $sidewalklight)
next<$Nx> $color( ) :
W[walklight<WALK>]] DW[walklight<DON’T WALK>] ] ]
Example 12.46 Street light control program.


and sidewalklight represent the lights that are being controlled by the control
expression. These free places are the interfaces of the expression. They can
be considered the dangling wires to be connected.

The liveness of the expression derives from the fl owing token and the
switch inputs. The expression is started with a token content in the free source
place named startA< > that fl ows through two invocations to initialize the walk
lights. The token then enters the control paths and initializes the traffi c lights
through $startC. $N7 and $startC are encompassed in braces, indicating that
only one will have content at a time. The token initially fl ows through the
$startC place and afterward fl ows through the $N7 place.

12.18 LFSR
The binary Linear Feedback Shift Register (LFSR) shown in Figure 12.33 is
a complex cyclic association structure of invocations of XORs and invocations
of buffers. Each buffer is initialized with 0 or 1. The expression of the LFSR
is the association structure of invocations of XOR and BUF. In the graphic
expression, the output of each function is named with a letter. In the string
expression, the output of each invocation is named with the corresponding
letter. Any number of invocations can associate with any source place of the
XOR
XOR
XOR
XOR
XOR
XOR
XOR
XOR
A
J
H
G
F
E
D
C
B
L
K
R
M
N
O
P
Q
S
Figure 12.33 Linear Feedback Shift Register.

LFSR 245
main and side lights
sidewalk lights
mainbutton
magloop
sidebutton
GR
RG
AR
listen
RA
GR
RR
AR
MW
MDW
SDW
SW
mainwalk lights
Figure 12.32 Structure of stoplight control expression.


THE INVOCATION LANGUAGE
LFSR from anywhere in the greater expression. Example 12.47 shows three
external invocations associating with the LFSR.

The LFSR could be isolated in a defi nition, but that would limit its acces-
sibility. The LFSR is a wavefront source. The initialized values continually
cycle around the rings of the LFSR, producing a steady stream of wavefronts
to all associated destination places. Residing in the midst of a large expression,
it can send wavefronts to many places simultaneously.

12.19 SUMMARY
The Invocation language is a language of association relationships. Unclut-
tered with conventions and confusions, it captures the bare essentials and
elegant simplicity of expressing concurrent distributed behavior from its most
primitive form to expressions of arbitrary complexity. It encompasses all forms
World[
invoc($K)(. . .) . . . . . . invoc2($D)(. . .) . . . . . . . invoc3($F)(. . .)
XOR($C,$D)(M< >)
XOR($E,$F)(N< >)
XOR($M,$N)(O< >)
BUF($C)(D<0>)
BUF($D)(E<1>)
BUF($B)(C<0>)
BUF($E)(F<0>)
XOR($A,$B)(Q< >)
XOR($G,$H)(R< >)
XOR($Q,$R)(S< >)
BUF($L)(A<0>)
BUF($A)(B<0>)
BUF($F)(G<1>)
BUF($P)(H<0>)
XOR($O,$G)(P< >)
BUF($H)(J<1>)
XOR($S,$J)(K< >)
BUF ($K)(L<0>) :
XOR[(A< >B< >)<$A$B()> : 00[0] 01[1] 10[1] 11[0] ]
BUF[(content< >)($content) ] ]
Example 12.47 Linear Feedback Shift Register.


of process expression from logic circuits to mathematical computation, from
cell metabolism to neuron networks and biological structures.

The language is presented in the context of a contemporary programming
language, but there are many familiar programming concepts and constructs
that are not included in the language.

There is No Conception of Sequence in the Language. The language
expresses generally concurrent behavior in terms of association rela-
tionships and fl ow boundaries coordinated in terms of completeness
relationships.

There is No Conception of Explicit Control in the Language. The language
assumes fully distributed locally autonomous behavior. Content fl ows
spontaneously through paths of association, locally coordinating its fl ow
from boundary to boundary in terms of completeness relationships. The
notion of explicit control does not arise.

There are No Predefi ned Control Operators in the Language. Name forma-
tion is the primitive behavior of the language from which all expression
of conditionality derives.

There is No Predefi ned Set of Primitive Symbols. Any set of symbols can
be used. A small set of the available symbols must be reserved to express
the syntax structures and the rest can be used to express correspondence
names and content. The symbols used in this chapter are simply a con-
venient set of symbols familiar to most readers.

There are No Predefi ned Data Types, Data Operators or Data Structures. What
is commonly considered to be data and its operations are expressed from
scratch in the language instead of being pre-defi ned. Expression in the
language begins with value transform rules expressing the primitive
interaction relationships among the available symbol values. Sets of
value transform rules can be encapsulated within a defi nition expressing
an operation on a data element. Further hierarchical defi nitions express
more complex compositions of data and their behaviors.

There is No Conception of Separate Addressable Memory in the Language
and No Notion of a Variable as a Reference to Memory. Content of a
resolving instance of a process is assumed to be maintained in the asso-
ciation paths of an expression. The notion of a separate addressable
memory does not arise.

There is No Conception of a Sampleable State Space. The language assumes
fully determined locally autonomous behavior. “State transitions” can
occur at any time. There are no predictable instants of stability to sample
an extended state space. An expression is understood and trusted in
terms of its fully determined symbolic behavior. The notion of state
space is meaningless and unnecessary.

There is No Conception of Time Reference or Time Relationship in the
Language. The behavior of an expression is purely in terms of symbolic
SUMMARY 247

THE INVOCATION LANGUAGE
behavior. There is no need for any global or local referent of time or of
any form of time-related behavior within the language. Any relation to
an external time referent is an implementation issue, not a language
issue.

The invocation language provides a general solution to concurrent system
design and to concurrent programming that is uniform and consistent at all
levels of hierarchical composition from value interaction mapping tables to
the highest levels of abstraction. Invocation expressions can be mapped to any
convenient implementation environment from a direct implementation of the
pipeline structure to a conventional sequential computer or to any fl avor of
distributed multiprocessing environment in between such as multiple core
processors or sea of ALU processors. The invocation language is the key to
scalable computing and to concurrent computing.


Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright © 2007 John Wiley & Sons, Inc.

REFLECTIONS
Contemporary computer science is deeply fl awed. One might think that the
technical and commercial success of computers speaks to the robustness of
the theoretical concepts supporting the enterprise, but far from delivering
conceptual enlightenment, insight and support in building and using com-
puters, contemporary theory injects unnecessary complexity, expense, and risk
into the enterprise. The success of electronic computers has been largely a
matter of engineering determination and cleverness by the humans in the
