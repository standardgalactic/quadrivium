S
CO
CXY
Y
X
CI
Figure 12.26 Pure association minterm expression.

BIGDIF[({A0< > A1< > ...Am-1< > Am< >}
{B0< > B1< > ... Bn-1< > Bn< >})
( {$O00 $O01 $O02 ... $Omn-1 $Omn} )
00($A0 $B0)
01($A0 $B1)
02($A0 $B2)
•
•
•
mn-1($An $Bn-1)
mn($An $Bn) :
00[ O00< D > ]
01[ O01< D > ]
02[ O02< D > ]
•
•
•
mn-1[ Omn-1< D > ]
mn[ Omn< D > ] ]
n
n
B
A
Figure 12.27 The expression of very large differentness domains.

LARGE DOMAINS OF DIFFERENTNESS 237

THE INVOCATION LANGUAGE
exclusive input domains each with L possibilities resulting in LK possible appre-
ciation minterm places. Each appreciation can enable a behavior appropriate
to the appreciated name. The names are shown in the example as a progression
of place-value names, and while there may be convenient aspects to expressing
the names as place-value numbers, there is no need that the names be ordinal
or cardinal or be otherwise related beyond each being unique.

12.13 EXPERIENCE MEMORY
An enabled place can be a ring that remembers the behaviors coincident with
an appreciation. There might be several input domains of differentness such
as visual recognition input, tactile input, smell input, or hearing input. These
differentnesses can combine resolving to a very large domain of unique places
appreciating an experience. The current behavior is presented to all the rings,
and each experience appreciation enables one ring that remembers the behav-
iors coincident with the experience. One can start with a very large expression,
and as experience accrues, the rings become populated with content. Each
access of a ring is both a read and a write. The remembered content spills out,
combines with the current content of the experience, fl ows back into the ring,
and continues on to infl uence the next behavior of the expression.

Figure 12.28 shows the structure of an experience memory and its language
expression. The inputs are the current behavior and the multiple differentness
n
n
B
A
ring op
ring op
ring op
ring op
ring op
ring op
ring op
ring op
current behavior
EXPMEM[(CB< > {A0< > A1< > ...Am-1< > Am< >}
{B0< > B1< > ... Bn-1< > Bn< >})
( {$O00 $O01 $O02 ... $Omn-1 $Omn} )
00($CB $A0 $B0)(O00< D >)
01($CB $A0 $B1)(O01< D >)
02($CB $A0 $B2)(O02< D >)
•
•
•
mn-1($CB $An $Bn-1)(Omn-1< D >)
mn($CB $An $Bn)(Omn< D >) :
00[(in< >)($out) combine($in $out)(out< >) :
combine[( A< > B< >)( $C) ...] ]
01[(in< >)($out) combine($in $out)(out< >) :
combine[( A< > B< >)( $C) ...] ]
02[(in< >)($out) combine($in $out)(out< >) :
combine[( A< > B< >)( $C) ...] ]
•
•
•
mn-1[(in< >)($out) combine($in $out)(out< >) :
combine[( A< > B< >)( $C) ...] ]
mn[(in< >)($out) combine($in $out)(out< >) :
combine[( A< > B< >)( $C) ...] ] ]
Figure 12.28 Experience memory.


domains. The appreciation is the familiarity and the content of the memory is
the reminiscence. The memory associates experience through time.

12.14 CONDITIONAL ITERATION
The greatest common divisor algorithm of Euclid (GCD), shown in the fl ow-
chart of Figure 12.29, illustrates conditional iteration in the language. The
algorithm generates intermediate values until M is equal to 0, at which point
N is equal to the greatest common divisor of the input M and N. Example
12.40 is the invocation expression of the greatest common divisor algorithm.

yes
no
exchange
M and N
L = M mod N
N = M
M = L
M > 0
GCD = N
yes
no
M < N
input M, N
Figure 12.29 Euclid’s greatest common divisor algorithm.

inv
GCD($M $N)( GCD< >)
def
GCD[(M< >N< >)( $GCD)
init< 0 >
LTsteer($M,$N)(inlesser< > ingreater< >)
dualfanin($incondition {$inlesser $remainder}{$ingreater $cyclelesser})
(lesser< > greater< >)
Mod($cyclelesser $cyclegreater)(remainder< >)
EQ0({$lesser $init})(incondition< > outcondition< > )
dualfanout($outcondition $lesser $greater)
({(cyclelesser< > cyclegreater< >) ( SINK< > GCD< >)})
:
dualfanin[(steer< >{A< > B< >}{C< > D< >})($out1 $out2)
$steer( ):
True[out1< $A > out2< $B >]
False[out1< $C > out2 < $D >]]
dualfanout[(steer< > A< > B< >)({($out1 $out2) ($out3 $out4)})
$steer( ):
True[out1< $A > out2< $B >]
False[out3< $B > out4< $A >]]
EQ0[(A< >)($condition $condition)
condition<Equal($A,0 )>: ]
LTsteer[(A< >B< >)($out1 $out2)
LT($A $B) :
True[out1< $A > out2< $B >
False[out1< $B > out2< $A >]] ]
Example 12.40 The invocation expression of the greatest common divisor.

CONDITIONAL ITERATION 239

THE INVOCATION LANGUAGE
The association relationships form a ring that the content fl ows around until
the termination state is reached. N is passed on as the GCD, and a new pair
of numbers is allowed.

Figure 12.30 shows the association structure of the invocation expression.

LTsteer makes sure that the inputs are correctly oriented in terms of magni-
tude. The invocation of dualfanin accepts input from either the input or the
feedback ring depending on the content of $lesser (M). If lesser is equal to
zero, then a new input can be accepted. If it is greater than zero, then a resolu-
tion is in progress. The content of source place init< > provides an input of 0
to the invocation of EQ0 to confi gure the expression to accept its fi rst input.

The invocation of dualfanout delivers the content of the pipeline into the
ring or to the output depending on the value of $lesser. The function N mod
M is performed in the feedback ring and passed through dualfanin; then the
content of $lesser is tested. If $lesser is zero, then the resolution is completed
and dualfanout delivers the content of $greater to the output as the greatest
common divisor and discards the content of lesser.

12.15 VALUE SEQUENCER
Example 12.41 is a simple expression that continually rotates through four
values. Each time it is invoked, it returns the next value. The value is main-
tained in the invocation itself in the feedback association from the source
list to the destination list. The value is initialized by setting the content of
value< > to 0. Example 12.42 is a pure association version of a value sequencer.

Example 12.43 is a pure value version of a value sequencer.

The invocation maintaining the value can be inside the defi nition, as in
Example 12.44. In this case the invocation does not send the current value but
just requests the next value. The internal memory value sequencer is a wave-
front source continually presenting successive wavefronts to the place of the
invocation.

M<N?
M=0?
N mod M
M
N
inlesser
ingreater
condition
GCD
lesser (M)
