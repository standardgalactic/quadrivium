X
Y
Z
BY
CY
AZ
BZ
CZ
Fifteen value
mapping
Recognize input
name
Generate appreciation
behavior
Figure 6.26 Mapping of one data value onto baseline process.


It was also shown that there is a universal four-value operator and that there
can be a universal operator for any set of values.

With nine data values there was suffi cient value differentiation that the
process could be expressed as a single operator. With 15 data values the
process could be expressed as a pure value expression. Examples were shown
with three values, two values, and fi nally one data value that was the pure
association expression of the process. The examples are shown in relation to
the spectrum in Figure 6.27.

The spectrum is not a continuum but is discrete. Values, value transform
rules, and associations exist in units. There cannot be half a value, half a value
transform rule, or half an association. Hence the operators, as compositions
of value transform rules, exist in units and are associated in units. The spec-
trum is punctuated with peaks and valleys of various effi ciencies and ineffi cien-
cies. Considering just the value differentiation, Table 6.1 characterizes the
effi ciency of expression among the examples. Clock and register transitions
are not considered in the table for the transitions associated with timed co -
ordination of transitions.

At the two ends of the spectrum there is no unused differentiation. The
most wasteful example expression is with six values. Next most wasteful is nine
values, and then two values and four values. Three values is the most effi cient
representation in the middle of the spectrum.

In the examples it is assumed that the NULL convention will be applied by
substituting NULL convention operators for the functional operators. The
Pure Value
Expression
Pure Association
Expression
values
values
values
values
more unique value
less association
less unique value
more association
values
values
value
Figure 6.27 Example expressions on spectrum.

Table 6.1 Value differentiation effi ciencies of the example expressions
Possible
Actual
Unused
Transition
Differentnesses
Differentnesses
Differentiation
Behaviors
Example
in/in/out
in/in/out
in/in/out=
NULL/timed
Data values
One
3/3/9
3/3/9
0/0/0 = 0
2/NA
Two
4/4/16
3/3/9
1/1/7 = 9
54/6.5
Three
3/3/9
3/3/9
0/0/0 = 0
74/12.75–16.5
Four
4/4/16
3/3/9
1/1/7 = 9
74/12.75–16.5
Six
6/6/36
3/3/9
3/3/27 = 33
74/12.75–16.5
Nine
9/9/9
3/3/9
6/6/0 = 12
2/0.89
Fifteen
3/3/9
3/3/9
0/0/0 = 0
1/NA
SUMMARY 101

ALONG THE SPECTRUM
operators of the expression become more complex and the transition behavior
dramatically increases. But consider what happens with the one-value pure
association expression that is more effi cient in every aspect than all the other
association expressions. There are fewer and simpler operators and less transi-
tion behavior. The 15-value pure value expression is also more effi cient in
terms of transitions than all the other expressions.

A particular process embodies a characteristic quantity of differentiation.

The expression of the process may be purely in terms of value differentiation,
purely in terms of association differentiation, or a collaboration of the two.

Expressions in the middle territory tend to be more complex than the pure
forms of expression, due to encoding differentness with a combination of value
differentiation and association differentiation. The result is that the expres-
sions are continually de-encoding to pure association to recognize names and
then re-encoding the recognition to assert the results. This can be most dra-
matically seen with the two-value example expression. The four-bit input
name is de-encoded to a pure association representation (9 unique places, in
the middle of the expression) and then re-encoded into a four bit representa-
tion. Encoding differentness with 2 values or 10 values does not always lead
to the most effi cient expressions of process. All processes, however, are effi -
ciently expressed at the two ends of the spectrum where an expression can
match exactly the differentiation required by any process with minimal transi-
tion behavior.


Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright © 2007 John Wiley & Sons, Inc.

COMPOSING BOUNDARIES
The previous two chapters discussed how expressional primitives associate
and collaborate to express a greater stride of appreciation that recognizes and
appreciates more differentness than any individual primitive could recognize.

A pure value expression with a set of value transform rules can recognize and
appreciate larger and more numerous formed names than any individual value
transform rule. A structure of associated operators can recognize and appreci-
ate larger and more numerous formed names than any individual operator.

These greater expressions form behavior boundaries with their appreciation
behavior. There is an input boundary that receives a presented name to appre-
ciate, and there is an output boundary through which appreciation behavior
is asserted. These greater expressions can be further composed into even
greater expressions with greater strides of appreciation of differentness by
associating output boundaries to input boundaries.

This chapter discusses the composition of behavior boundaries to express
a greater stride of appreciation. The discussion will be initially in terms of
association expression. There can also be boundary relationships within a pure
value expression that will be discussed.

7.1 BOUNDARIES OF COMPLETENESS BEHAVIOR
The completeness criterion is expressed between the input and output bound-
aries of an expression, promising orderly deterministic behavior from input

COMPOSING BOUNDARIES
boundary to output boundary. When two expressions are composed, output
boundary to input boundary, an internal mutual completeness boundary
is formed between the two expressions. The new greater expression also
expresses the completeness criterion from its new input boundary to its new
output boundary.

7.1.1 Association Boundaries
Consider the binary full-adder of Figure 7.1 that takes three binary inputs and
asserts two binary outputs. The full-adder is bounded by inputs CI, X, and Y
and outputs S and CO.

Consider that the full-adder is composed of two three input expressions, S
and C as in Figure 7.2. S outputs the sum and C outputs the carry. Each expres-
sion has its own input and output boundary. If S and C express the complete-
ness criterion, then their boundaries compose to express the completeness
criterion for the full-adder.

Consider that three input expressions are not available but only two input
expressions are available. Figure 7.3 shows the full-adder in terms of two input
NULL convention Boolean functions. Each function is bounded and expresses
the completeness criterion. Again, the completeness relations of the boundar-
ies of the functions accumulate so that the full-adder input and output bound-
aries are completeness boundaries. The boundary of the full-adder encompasses
the boundaries of the functions and appreciates a greater range of different-
ness than any function individually.

CI
X
Y
