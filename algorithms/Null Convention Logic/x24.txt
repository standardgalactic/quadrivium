-
T
F
-
F
T
N
-
-
N
T
N
F
N
F
T
K
L
J
K
L
I
J
I
K
-
F
T
-
F
F
N
-
-
N
T
N
F
K
J
I
N
N
T
domain
inversion
(T, F, N)
(T, F, N)
Presentation
boundary
Result
boundary
N
N
N
N
N
N
N
N
N
A
B
C
D
E
F
G
C
X
Y
CARRY
SUM (T, F, N)
(T, F, N)
(T, F, N)
Figure 5.10 Set of completeness appreciating Boolean operators.

Figure 5.11 The completeness criterion for a network of operators as a whole.


• For the values crossing E to be all data, all of the values crossing D must
be data.

• For the values crossing D to be all data, all of the values crossing C must
be data.

• For the values crossing C to be all data, all of the values crossing B must
be data.

• For the values crossing B to be all data, all of the values crossing A must
be data.

• Therefore, for all the values after G to be data, all the values before A
must be data. If any value before A is NULL, at least one value after G
will be NULL.

These considerations are also true for the NULL wavefront presented when
the expression is in a “completely data” state. Simply interchange NULL and
data in the text above.

During a data wavefront values transition monotonically from NULL to
data as resolution progresses through the expression from input to output. If
any value crossing a boundary is NULL, then there will be at least one NULL
value crossing all boundaries to the right of that boundary. There can only be
a complete set of output data values when there is a complete set of input data
values and the data values have propagated through the expression. There can
only be a complete set of output NULL values when there is a complete set
of input NULL values and the NULL values have propagated through the
expression. The expression as a whole expresses the completeness criterion.

Completeness of the output implies completeness of the input. The output
also maintains the monotonic Transition behavior of the input.

The behavior of a wavefront propagating through the expression is com-
pletely determined. It does not matter when or in what order the values transi-
tion at the input of the expression. Nor does it matter what the delays might
be internal to the expression. Consider the shaded function in Figure 5.11. It
does not matter how long the data values (NULL values) take to propagate
through other operators and over signal paths to the input of the shaded func-
tion, its output will not transition until all values are data (NULL) at the input
of the function. For each wavefront, each function synchronizes its input and
switches its output exactly once to a correct value coordinating the orderly
propagation of a wavefront of monotonic transitions of correct result values
through the expression until the output of the expression as a whole is com-
plete. The orderly symbolic behavior of each individual function accumulates
to orderly symbolic behavior of the whole, expressing the completeness crite-
rion for the expression as a whole.

The behavior of the expression is fully determined in terms of symbolic
behavior. There is no explicit expression of control. There is no consideration
of timing relationships anywhere in the expression. There are no races, no
hazards, and no spurious result values. There is no nondeterministic behavior.

ASSOCIATION EXPRESSION 73

THE INVOCATION MODEL
There is no state space explosion. For a given input there is only one possible
partial ordering of operators. The behavior of the expression is deterministic,
is repeatable, is testable, and is trustable.

Ignoring the NULL Convention Just as the directionalization convention
can be ignored once the buffering thengs and their behavior had been univer-
sally established, so can the NULL value and its behavior be ignored once the
NULL convention has been universally established. The NULL function is
identical and universal for all operators and for all combinations of operators;
when the input is all NULL, the output becomes all NULL. Because of this
universality the NULL behavior need not always be explicitly expressed. One
can express primitive operators, solely in terms of data value behaviors as in
Figure 5.12a. The primitive operators can be directly substituted with NULL
convention operators as in Figure 5.12b.

5.3.4 Summary of Discretization and Directionalization
With simple conventions of value differentiation, the behavior of associated
thengs can be directionalized and discretized. No new expressional primitives
have been postulated. A process expression is still just associated thengs
asserting values transforming according to value transform rules.

5.3.5 The Pure Association Expression
With directional and discrete behavior established according to the conven-
tions of value differentiation, the pure association expression can now be
presented. Pure association expression occurs when there is only one data
value, which will be called DATA, to express the meanings of the process.

With one data value, there can be no differentiation of process meaning in
terms of value. All differentiation of process meaning is in terms of place in
a structure of association relationships.

The Multi-rail Data Differentiation Convention Differentnesses that were
expressed by two or more data values must now be expressed by different
places in a structure of association relationships. A variable that is commonly
N
N
N
N
N
N
N
N
N
a. Boolean functions
b. Enhanced Boolean functions
Figure 5.12 Mapping to the NULL convention.


understood as a single unique place that expresses multiple mutually exclusive
meanings with multiple unique values must now be represented as multiple
unique places in a structure of association relationships that mutually exclu-
sively assert a single DATA value. A place either asserts its meaning by
asserting the DATA value or does not assert its meaning by asserting the
NULL value. A binary variable is expressed as two places, place #1 and place
#2, that mutually exclusively express TRUE and FALSE. If place #1 asserts a
DATA value, the meaning of the variable is TRUE. If place #2 asserts its
DATA value, the meaning of the variable is FALSE. It is illegal for both
places to assert a DATA value at the same time. If both places assert NULL,
then the variable is in its ‘not data’ state. The binary variable is shown in
Figure 5.13.

A variable in its most general sense is a locus of mutually exclusive assertion.

In general, an M value variable can be represented with M places only one of
