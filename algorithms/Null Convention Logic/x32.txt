L
I
J
K
I
K
J
K
J
I
L
L
J
I
L
K
I
I
I
I
I
I
J
I
I
I
K
I
Figure 6.15 A universal four-value operator.

Figure 6.16 Universal four-value rotate operator.


6.3.2 The Equality Operator
II is chosen as the recognition name, so for all name recognition stages the
input values will be rotated to the II name. The name II will result in an L,
and all other names will result in a non L. This establishes the logic conven-
tions that L is TRUE and non L is FALSE. The universal equality operator
is shown in Figure 6.17.

6.3.3 The Assertion Operator
One input of the operator is set to a constant value. The other value from the
equality operators will be L or a non-L value. The L value will be rotated so
that it becomes an I value. If the rotated value is I, the operator will assert
the value specifi ed by the constant value input; otherwise, the operator will
assert the default value I.

Since the operator is going to assert a rotated result value, the constant
input value must be set to the value in the rotation order before the desired
result value. For instance, a constant K will result in the operator asserting a
J. Figure 6.18 shows an assert confi guration to assert the result value J.

6.3.4 The Priority Operator
There are only Is and the single asserted result value, which itself might be an
I, presented to the result collection priority tree. Each priority collection stage
has either II or I and non I presented to it. If II is presented, the asserted
result value will be L. If a non-I value is presented, the result value will be the
rotation neighbor of the non-I value. Rotating the result value three times will
convert the L into I or the rotated assertion value back into the actual asser-
tion value. Thus each priority operator has three rotates on its result variable,
as shown in Figure 6.19.

U
K
U
U
I
U
I
U
I
Figure 6.17 Universal four-value equality operator.

Figure 6.18 Universal four-value assert operator.

U
U
I
U
I
U
I
Figure 6.19 Universal four-value priority operator.

A UNIVERSAL FOUR-VALUE OPERATOR 95

ALONG THE SPECTRUM
6.3.5 The Four-Value Expression with the Universal Operator
An expression with the universal transform is shown in Figure 6.20. Only the
Y output is shown. The X output is expressed with a tree of assertion opera-
tors and priority operators just like the Y output. Optimization of the output
generation is not considered.

6.4 THE EXPRESSIVITY OF OPERATORS
If the internal buffering associations are ignored, a primitive operator can be
thought of as a pure value expression expressed as a set of value transform
rules. More expressive operators means that there is more expression in terms
of value differentiation and that less expression will be required in terms of
association differentiation. Less expressive operators means that more differ-
entiation in terms of association will be required.

Consider the availability of four equality operators that each asserts a
different TRUTH value. Each equality operator could assert its output
value directly. The assertion operators would not be needed and could be
eliminated from the expression. The value differentiation is slightly increased
and the association differentiation is slightly diminished. If a set of equality
operators were available that each directly recognized a different input name,
Recognize input name
Generate appreciation behavior
Y result
J
K
L
U
U
U
K
L
I
U
U
U
L
J
J
U
U
U
U
U
U
U
U
U
U
U
A
B
IK -> LI
JK -> IJ
KK -> LK
AB -> XY
U
U
U
U
U
U
U
U
U
IJ -> KJ
JJ -> KK
KJ -> KL
II -> JK
JI -> JI
KI -> KI
U
I
I
U
U
I
U
I
U
U
I
U
I
U
I
U
I
=
I
Figure 6.20 Example expression in terms of universal four-value transforms.


then the rotate operators could be eliminated from the expression. Again,
the value differentiation is increased, and the association differentiation is
diminished.

6.5 SIX AVAILABLE DATA VALUES
With six available data values the form of the encoding and the form of the
expression remains identical to the form of the four-value expression. Each
input can be represented with one value, and each output must be represented
with two values. With six values, however, there is a great deal more wasted
value differentiation than with four values.

6.6 NINE AVAILABLE DATA VALUES
With nine values available the result values need no longer be encoded in two
variables. The entire process can be expressed as a single operator shown in
Figure 6.21.

It appears that no association relationships are needed. However, the same
values are used for both inputs and the output, so the expression must be an
operator that isolates the values of the inputs and the values of the output
with internal buffering associations.

