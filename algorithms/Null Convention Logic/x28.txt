a value expression. Values transform in passing through the operator. Theng
A of the operator unit of association is a locus of pure value expression
and is the pure value expression responsible for the transformation of the
values.

The two domains of expression alternately serve as medium and different-
ness, mutually isolating and renewing each other, each transcending itself
through the other. Each stage of association reuses value expression. Each
stage of value expression creates new places that can be associated. Figure
5.23 illustrates the alternation of expression between value expression and
association expression. Each alternation extends the expression of different-
ness, by small steps, to arbitrary complexity. The two domains of differentia-
tion are the warp and woof weaving an arbitrarily complex tapestry of
differentness and its appreciation.

WARP AND WOOF 83

THE INVOCATION MODEL
5.7 SUMMARY
Process is differentness at play, endlessly appreciating itself. Unique values
transforming at a single place of association or the transformation of common
values fl owing through places of association. Primitive concepts of expressing
differentness were introduced: thengs that can associate and assert one at a
time of two or more values that can change according to value transform rules.

No other concepts were introduced, no timing relationships, no explicit control,
no explicit sequencing, no extended state space, no humans with pencils. No
further concepts will be introduced. These are suffi cient.

Thengs associating and values interacting form two interpenetrating
domains of differentiation. Thengs can be different by virtue of a unique place
in a structure of association relationships. Values can be different by virtue of
unique interaction relationships, with other values as expressed by the value
transform rules. Differentness can be expressed with different values at a
single place or with identical values at different places.

The two interpenetrating domains of differentiation form a spectrum of
expression from pure value at one end to pure association at the other end.

Along the spectrum the two domains of differentiation interweave in various
proportions. The spectrum unites forms of expression previously considered
quite disparate, such as symbolic computation and biological processes. Within
the invocation model, the expression of the behavior of a living cell is not
fundamentally different from the expression of the behavior of an artifi cial
computer. They each express and appreciate differentness at different ends of
the spectrum. Humans and nature are doing fundamentally the same thing.

They just go about it a little differently.

Association expression
Value expression
N
N
N
N
N
N
N
N
N
Figure 5.23 Alternating value and association differentiation.


Computer Science Reconsidered: The Invocation Model of Process Expression, by Karl M. Fant
Copyright Â© 2007 John Wiley & Sons, Inc.

ALONG THE SPECTRUM
At the two ends of the spectrum are pure value expression and pure associa-
tion expression. In the interior of the spectrum are expressions with various
proportions of value differentiation and association differentiation. This
chapter discusses expression along the spectrum.

6.1 THE EXAMPLE PROCESS
The baseline process is an arbitrary mapping of two inputs, each with three
differentnesses combining to form nine possible input names mapping to nine
unique appreciation behaviors. The empty table on the left of Figure 6.1 shows
the structure of the process. The table will be fi lled in with expressions of dif-
ferentness, as in the table on the right, at various places along the spectrum
with discussions of the corresponding expressions.

6.1.1 Place on the Spectrum
The place of an expression on the spectrum is determined by its proportion
of value differentiation and proportion of association differentiation. The fi rst
example will jump into the middle of the spectrum with an extended discussion
of expressing the baseline process with four data values. Then expressions with
more available data values and expressions with fewer available data values
will be considered.


ALONG THE SPECTRUM
6.1.2 Ignoring NULL
The NULL convention is a universal behavior and need not be explicitly
expressed when symbolically expressing a process. The null convention can
be formulaically added to the symbolic expression of the data behavior. The
examples will assume the completeness criterion and will be presented without
reference to the NULL convention.

6.2 FOUR AVAILABLE DATA VALUES
Only four values (I, J, K, and L) are available to express the 15 differentnesses
of the process. It is assumed that the two inputs are isolated from each other
by association and that the input is isolated from the output by association.

The differentnesses of the inputs can be expressed with identical values and
the output can be expressed with the same values used for the input. The three
differentnesses of each input can be expressed with three values, but the nine
result differentnesses will have to be expressed as a two value encoding. A
mapping of four values to express the differentnesses of the baseline process
is shown in Figure 6.2. The process receives two input values A and B and
generates two output values X and Y.

6.2.1 Name Recognition
The fi rst task of any expression is to recognize a presented name. There must
be a means of matching a presented name to an internal representation of the
recognizable names and a means of that internal representation generating
the appropriate appreciation behavior for the recognized name.

I
J
K
L
M
N
Figure 6.1 Baseline example process.

A
B
X
Y
LK
KI
IJ
LI
KL
KK
KJ
JI
JK
I
J
K
I
J
K
A
B
XY
Figure 6.2 Mapping of four values onto the baseline process.


One way to recognize the nine possible names is with a unique operator
that recognizes each name. However, name recognition can be expressed
more generally for any number of values and any set of names with just two
generic operators: an operator that recognizes one standard name and an
operator that can transform any name into the standard name by rotating
values.

The Equality Operator The equality operator recognizes a single name. If
it is presented with its recognition name, it will output a value that can be
understood to mean True, or I have recognized my name. If it is presented
with any other name it will output a value that can be understood to mean
False, or I have not recognized my name. The recognition name and the True
and False values can be arbitrarily assigned. Figure 6.3 shows a four-value
equality operator with the recognition name of LL, a True value of L and a
False value of I.

If the presented name is LL, the operator outputs L. If the presented name
is anything else, the operator outputs I.

The Rotation Operator With the rotation operator any presented name can
be transformed into the standard recognition name, in this case LL. Each
application of the rotation operator transforms the input value to a rotational
neighbor value. Any value can be transformed into any other value with one
or more applications of the rotate operator. The four-value rotation operator
is shown in Figure 6.4.

The value I can be transformed to the value L with three rotations. The
example of Figure 6.5 transforms the name IJ into the name LL. Only the
name IJ will rotate to LL. If the result is not LL, then the presented name was
not IJ.

=
I
K
J
K
J
I
K
L
J
K
L
I
J
I
K
L
L
I
I
